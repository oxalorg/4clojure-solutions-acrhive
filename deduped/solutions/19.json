[{"code":"#(let [x (next %)] \n(if (nil? x) (first %) (recur x)))","problem":19,"user":"4ec64981535d6d7199dd36c7"},{"code":"reduce (fn [_ x] x)","problem":19,"user":"4ff66ab3e4b0678c553fc37c"},{"problem":19,"code":"(fn [seq]\r\n  (if (empty? (rest seq))\r\n    (first seq)\r\n    (recur (rest seq))))","user":"5ca20d5ce4b048ec896c5b8e"},{"problem":19,"code":"(fn  \n  [[head & tail]]\n  \t(if (empty? tail) head \n      (recur tail)))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":19,"code":"(fn my_last[y] \n  (loop [x y]\n    (if (empty? (rest x)) \n    (first x) \n    (recur (rest x)))))","user":"5642b939e4b08d4f616f5f1b"},{"problem":19,"code":"(fn [x] (do (let[[head & tail] (reverse x)] head)))","user":"5c549f38e4b0fb8c5ffd9a0e"},{"problem":19,"code":"(fn the-last [x] (first (reverse x)))","user":"5c2e6309e4b0d62ef62d9f03"},{"code":"(fn f [x]\n(if \n  (empty? (rest x)) \n  (first x)\n  (f (rest x))))","problem":19,"user":"503c90aae4b06c4e0e1fa24b"},{"code":"(fn ilast[s]\n  (if (= nil (next s)) (first s)\n   (ilast (rest s))))","problem":19,"user":"5374adc3e4b06d7f452d9e27"},{"problem":19,"code":"(fn [y] (first ((fn [x] (reverse x)) y)))","user":"54843fb7e4b0e286459a1199"},{"problem":19,"code":"(fn [ls]\n  (if (next ls)\n    (recur (rest ls))\n    (first ls)))","user":"558b49a9e4b027778923762a"},{"code":"(fn [x] (->> x\n             reverse\n             first))","problem":19,"user":"52aa013de4b0c58976d9ac54"},{"problem":19,"code":"(fn [sequence]\n  (let [length (count sequence)]\n  (nth sequence (- length 1))))","user":"57c4a231e4b05aa3c4741cd5"},{"code":"(fn [ls] (first\n (take-last 1 ls))\n  )","problem":19,"user":"530f5929e4b08068f379ecc8"},{"problem":19,"code":"(fn [x]\n  (loop [x x]\n    (if (= (count x) 1)\n      (first x)\n      (recur (rest x)))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":19,"code":"(fn [xs]\n  (loop [[h & t] xs]\n    (if (empty? t)\n      h\n      (recur t)\n      )\n    )\n  )","user":"555b672ce4b0deb715856e50"},{"problem":19,"code":"(fn ! [x] \n    (if (= (count x) 1) (first x)  (! (rest x) )  )\n  )","user":"59a34ec9e4b066c664927d37"},{"problem":19,"code":"(fn last-element-solution\n  [collection]\n  (first (reverse collection)))","user":"58445c3ce4b089d5ab817e49"},{"problem":19,"code":"(fn my_last [s]\n  (if (= (count s) 1)\n    (first s)\n    (my_last (rest s))\n   )\n  )","user":"54e50f7ce4b024c67c0cf7f6"},{"code":"#(get (vec %) (dec (count %)))","problem":19,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn [s]\n  (loop [se s]\n    (if (empty? (rest se))\n      (first se)\n      (recur (rest se)))))","problem":19,"user":"5392500ae4b0b51d73faaeaf"},{"problem":19,"code":"(fn [[elem & remainder]] (if remainder (recur remainder) elem))","user":"56aa9464e4b07966d5a8a08d"},{"problem":19,"code":"(fn [x]\n  (loop [y (first x) ys (rest x)]\n    (if (= ys ())\n      y\n      (recur (first ys) (rest ys)))))","user":"57421413e4b05c31a32c0870"},{"problem":19,"code":"#(->> % (reverse) (first))","user":"540d7dd1e4b0addc1aec6713"},{"code":"(fn [s]\n  (let [n (next s)] \n    (if n (recur n) (first s))))","problem":19,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn laast [s] (if (empty? (rest s)) (first s) (laast (rest s))))","problem":19,"user":"534d1173e4b084c2834f4a98"},{"code":"#(reduce (fn [_ a] a) %)","problem":19,"user":"4f0b2028535d0136e6c222ff"},{"problem":19,"code":"(fn [x] (first (reverse (vec x))))","user":"52149e21e4b0961f15ac4d94"},{"problem":19,"code":"(fn ret-last [l] \n  (if (empty? (rest l))\n    (first l)\n    (recur (rest l))))","user":"5fed0a8ae4b05ac5b16ea1c4"},{"problem":19,"code":"(fn find_last [elements]\n  (if (empty? (rest elements))\n  \t(first elements)\n  \t(find_last (rest elements))))","user":"5db4ba2fe4b010eb3c36cd2b"},{"code":"(fn [x] (let [foo (fn [foo x] (if (nil? (next x)) (first x) (foo foo (next x))))] (foo foo x)))","problem":19,"user":"4e03d6ef535d04ed9115e797"},{"code":"(fn [input-list] (loop [l input-list lastval nil] (if(empty? l) lastval (recur (rest l) (first l)))))","problem":19,"user":"5245f167e4b09dbe66b5617e"},{"problem":19,"code":"(fn [list]\n  (if (= '() (rest list))\n    (first list)\n    (recur (rest list))))","user":"565eb771e4b068f2fe63dc36"},{"problem":19,"code":"(fn lastbyanyothername [x] (nth x (- (count x) 1)))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn la [x] (first (reverse x)))","problem":19,"user":"53153466e4b08068f379ed23"},{"problem":19,"code":"(fn [x] (case (vector? x)\n          true (peek x)\n          (nth x 2)\n          ))","user":"53da059be4b0e771c302547e"},{"code":"(fn [list]\n  (if (next list)\n    (recur (next list))\n    (first list)))","problem":19,"user":"4e55ea0c535d8a8b8723a281"},{"code":"( fn [x] ( nth x (- (count x) 1) )  )","problem":19,"user":"4e333091535deb9a81d77f25"},{"problem":19,"code":"(fn [s] (loop [[f & r] s]\n          (if (not r)\n            f\n            (recur r))))","user":"568c30d2e4b0dcc4269f40b1"},{"code":"(fn [xs]\n  (first (reverse xs)))","problem":19,"user":"4f0381db535dcb61093f6b02"},{"code":";#(first (reverse %))\nreduce (fn [a b] b)","problem":19,"user":"50bc759ae4b0594b91591c58"},{"code":"(fn [sq] (reduce #(if (= nil %2) %1 %2) sq))","problem":19,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":19,"code":"(fn [seq]\n  (loop [r (rest seq)]\n    (if (> (count r) 1)\n      (recur (rest r))\n      (first r))))","user":"56d15251e4b0ea9b8538f78c"},{"problem":19,"code":"#(first( reverse (vec %)))","user":"5565ea02e4b0c656e3ff1822"},{"code":"#(-> (reverse %)\n     first)","problem":19,"user":"4fea7594e4b0140c20fb9c06"},{"code":"(fn [[n & more]] (if more (recur more) n))","problem":19,"user":"5043dc27e4b01f6c9a8b235c"},{"problem":19,"code":"#(loop [x %1] (if (= '() (rest x)) (first x) (recur (rest x))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"code":"(fn [seq] (let [L (count seq)] (nth seq (dec L))))","problem":19,"user":"4fc52d79e4b081705acca386"},{"problem":19,"code":"(fn lastn [l]\n  (first (reverse l)))","user":"5a959e9be4b0d174b936c758"},{"code":"(fn mylast [list]\n  (if (empty? (rest list))\n    (first list)\n    (recur (rest list))))","problem":19,"user":"50293b68e4b061fd216be4b7"},{"problem":19,"code":"(fn another-last [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (another-last (rest seq))))","user":"53bab6fae4b047364c0444fb"},{"code":"(fn [data] (first (reverse data)))","problem":19,"user":"50f69a3ce4b0035e89151844"},{"code":"(fn my-last [coll] \n  (if (= 1 (count coll)) \n      (first coll) \n      (my-last (rest coll))))","problem":19,"user":"50a407fee4b08bbd0eb4ed32"},{"code":"(fn [x]\n  (let [c (count x)]\n    (nth x (dec c))))","problem":19,"user":"5239783de4b0d705d026ef0d"},{"problem":19,"code":"#(nth % (dec (count  %)))","user":"5c863a81e4b0c8042a70ce8e"},{"problem":19,"code":"(fn [coll] (nth coll (-  (count coll) 1)))","user":"5c1b4146e4b01240ff56720d"},{"code":"(fn getLast [x] (first (reverse x)))","problem":19,"user":"527ea24ae4b0757a1b1713ad"},{"code":"#(nth % (-(count %)1))","problem":19,"user":"51b5e86ae4b0f094dd986fd2"},{"problem":19,"code":"(fn [lst]\n  (loop [elem (first lst)\n         l lst]\n    (if (empty? l)\n      elem\n      (recur (first l) (rest l)))))","user":"58ff5898e4b0438e51c2cfec"},{"code":"(fn las [x] \n  (if (empty? (rest x))\n    (first x)\n    (las (rest x))))","problem":19,"user":"52de249ae4b09f7907dd13ed"},{"problem":19,"code":"(fn [seq]\n  (loop [f (first seq)\n         r (rest seq)]\n    (if (empty? r)\n      f\n      (recur (first r) (rest r)))))","user":"58fff18be4b0438e51c2d00c"},{"code":"#(loop [xs %]\n  (if (empty? (rest xs))\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"4fcf0ce9e4b03432b189f40b"},{"code":"(fn thisfn [s] (if (seq (rest s)) (thisfn (rest s)) (first s)))","problem":19,"user":"5122cbb4e4b068a9582e656f"},{"problem":19,"code":"#(first(reverse %))\n\n;#(nth % (- (count %) 1))","user":"5703c4c4e4b08d47c97781f7"},{"problem":19,"code":"(fn [remaining]\n  (loop [remainder remaining]\n    (if (empty? (rest remainder))\n      (first remainder)\n      (recur (rest remainder)))))","user":"58ffbabce4b0438e51c2d002"},{"problem":19,"code":"(fn [s] (first(reverse s)) )","user":"5aeb3c1ce4b0cc2b61a3bbf4"},{"problem":19,"code":"(fn\n  [xs]\n  (let\n      [internal (fn\n                  [ixs]\n                  (if (> (count ixs) 1)\n                    (recur (rest ixs))\n                    (first ixs)))]\n    (internal xs)))","user":"5e1c24f4e4b0dc959400852d"},{"problem":19,"code":"(fn [l] \n  (loop [[h & t] l]\n\t(if (nil? t) h\n      (recur t))))","user":"542c5129e4b0dad94371f2a3"},{"problem":19,"code":"(fn [seq] (get (reduce conj [] seq) (- (count seq) 1) ))","user":"5d58983fe4b02ba5928a6823"},{"problem":19,"code":"#(nth (reverse %) 0)\n\n\n;#(nth % (dec(count %)))","user":"570377c1e4b08d47c97781f1"},{"problem":19,"code":"(fn my-last [x] (if (> (count x) 1) (my-last (rest x)) (first x)))","user":"5694eeb1e4b0dcc4269f4124"},{"code":"(fn [s] (reduce #(do %1 %2) s))","problem":19,"user":"502f4c89e4b0842eb223d8b9"},{"problem":19,"code":"(fn [l] (first (drop (- (.size l) 1) l)))","user":"5632e850e4b0bfe05bf117ac"},{"problem":19,"code":"(fn [list] (first (drop (dec (count list)) list)))","user":"55fb41a6e4b0f488688e065f"},{"code":"(fn [coll]\n  (if-let [nxt (next coll)]\n    (recur nxt)\n    (first coll)))","problem":19,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [lst]\n  (if (= () (rest lst))\n    (first lst)\n    (recur (rest lst))))","problem":19,"user":"517fcd45e4b073af738d8b4a"},{"problem":19,"code":"(fn my-last [coll] \n  (let [f (first coll)\n         r (rest coll)]\n    (if (empty? r) f (my-last r))))","user":"57e22420e4b0bfb2137f5a85"},{"problem":19,"code":"reduce (fn [acc nxt] nxt)","user":"574a3ffbe4b02ea1147991f3"},{"code":"(fn my-last [seq]\n          (loop [s seq]\n             (let [r (rest s)]\n                  (if (empty? r)\n                      (first s)\n                      (recur r)))))","problem":19,"user":"513a37e0e4b067e25a345ec7"},{"problem":19,"code":"(fn\n  [collection]\n  (let [length (count collection)]\n    (nth collection (dec length))))","user":"580beb40e4b0849f6811b713"},{"code":"#((into [] %1) (- (count %1) 1))","problem":19,"user":"52a76986e4b0c58976d9ac17"},{"problem":19,"code":"(fn[a-list] (nth a-list (- (count a-list) 1)))","user":"54f296efe4b024c67c0cf8c8"},{"problem":19,"code":"(fn f [lst] \n  (nth lst (- (count lst) 1)))","user":"5a74bf3ae4b0512ff01cdabd"},{"code":"(fn ultimo [x] (if (= 1 (count x)) (first x) (ultimo (rest x))))","problem":19,"user":"52d92f13e4b09f7907dd13a2"},{"code":"(fn getLast [x] (nth x (- (count x) 1)))","problem":19,"user":"539fffa7e4b0ca733b9744a4"},{"code":"(fn myfn [x] (if (= (rest x) ()) (first x) (myfn (rest x))))","problem":19,"user":"4f84a2a5e4b033992c121c37"},{"problem":19,"code":"(fn [l] (loop [[item1 & remaining] l] \n          (if (empty? remaining) item1 (recur remaining))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":19,"code":"(fn last-el [lst] (first (drop (- (count lst) 1) lst)))","user":"569e3175e4b0542e1f8d1484"},{"code":"(fn end [[n & more]]\r\n  (if more\r\n    (recur more)\r\n    n))","problem":19,"user":"4f0369a2535dcb61093f6ab0"},{"problem":19,"code":"reduce (fn [accum next] next) 0","user":"5948117be4b07ddc2dafadae"},{"code":"(fn[a] ((vec a) (dec (count a))))","problem":19,"user":"50b25f2ce4b03ea88043355f"},{"problem":19,"code":"(fn [xs]\n  (if-let [xs' (next xs)]\n    (recur xs')\n    (first xs)))","user":"5d609ddde4b0c9e5857d5008"},{"problem":19,"code":"(fn my-last [lis]\n  (first (reverse lis)))","user":"598754e5e4b021a7a535fea3"},{"code":"(fn right-most-element [[element & sequence]]\n  (if (empty? sequence)\n    element\n    (right-most-element sequence)\n  )\n)","problem":19,"user":"537d9b39e4b06839e8705e8f"},{"problem":19,"code":"(fn myLast [list] \n  (if (= 1 (.size list)) (first list) (myLast (rest list))))","user":"56128c54e4b05f002753df93"},{"code":"(fn [x] (if (next x) (recur (next x))(first x)))","problem":19,"user":"4dbf02d5535d020aff1edf70"},{"code":"(fn [v] (nth v (- (count v) 1)))","problem":19,"user":"51823a97e4b0f2adb733651e"},{"problem":19,"code":"(fn foo [x] (if (= (count x) 1) (first x) (foo (rest x))))","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [lst] (nth lst (- (count lst) 1) ))","problem":19,"user":"4e5206ec535d302ef430da6c"},{"code":"(fn last-element [xs]\n  (if-let [remaining (next xs)]\n    (recur remaining)\n    (first xs)))","problem":19,"user":"511623cbe4b0d4f670fd2fe1"},{"problem":19,"code":"(fn myLast [in] (first (reverse in)))","user":"5eb864c9e4b00a66d4a95245"},{"code":"(fn [x]\n  (letfn [(lasto [y]\n    (if (empty? (rest y))\n      (first y)\n      (lasto (rest y))))]\n  (lasto x)))","problem":19,"user":"50369122e4b0af0658af779e"},{"problem":19,"code":"#(get (into [] %) (- (count %) 1) )","user":"51568fbae4b04360f2428e67"},{"problem":19,"code":"#(first (into () %))","user":"5c07522ae4b0bdcf453d16c4"},{"problem":19,"code":"(fn my-last [[x & xs]]\n  (if (nil? xs)\n    x\n    (my-last xs)\n    )\n  )","user":"599ad3f5e4b07157cc8dab15"},{"code":"#( first (reverse %1))","problem":19,"user":"4fb2f9b2e4b081705acca294"},{"problem":19,"code":"(fn mylast\n\t[myseq]\n\t(if (empty? (rest myseq))\n\t\t(first myseq)\n\t\t(mylast (rest myseq))))","user":"55897fe2e4b059ccff29b205"},{"problem":19,"code":"(fn [ x ]\n\t (-> x (reverse) (first)))","user":"5a09f205e4b0eab8c0448933"},{"code":"(fn [x] \n  (if (> (count x) 1)\n   (recur (rest x))\n  (first x)))","problem":19,"user":"4e7e241a535db169f9c79705"},{"problem":19,"code":"(fn my-last\n  [coll]\n  (cond \n     (empty? coll) nil\n     (= (count coll) 1) (first coll)\n     :else\n     (my-last (next coll))))","user":"5a798ac5e4b03baeef9276c0"},{"code":"(fn xlast [xs] (if (seq (rest xs)) (xlast (rest xs)) (first xs)))","problem":19,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [seq]\n  (loop [seq seq]\n    (if (empty? (rest seq))\n      (first seq)\n      (recur (rest seq))\n    )\n  )\n)","problem":19,"user":"4fac78cbe4b081705acca228"},{"code":"(fn mylast [seq]\n  (if (= (rest seq) [])\n      (first seq)\n      (mylast (rest seq))))","problem":19,"user":"4f62b29ce4b0defedf855fd9"},{"problem":19,"code":"(fn [[x & n]]\n(if n (recur n) x) \n)","user":"5ab3d323e4b073f177442607"},{"code":"(fn mkl [x](if (= (rest x) []) (first x) (mkl (rest x)) ))","problem":19,"user":"4ff6ed6ae4b0678c553fc384"},{"problem":19,"code":"(fn [sequence]\n  (-> sequence\n    (reverse)\n    (first)))","user":"5d078e2de4b0cc9c915881fa"},{"code":"(fn [coll]\n  (let [fir (first coll)\n        sec (first (rest coll))]\n    (if (nil? sec)\n      fir\n      (recur (rest coll)))))","problem":19,"user":"4ea03a3a535d7eef308072a0"},{"problem":19,"code":"(fn last-of\n  [list]\n  (nth list (dec (count list))))","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn h [x] (first (reverse x)))","problem":19,"user":"502d39f8e4b0d96a44ab2032"},{"problem":19,"code":"(fn f [x] \n  (if (empty? (rest x))\n    (first x) \n    (f (rest x))))","user":"598a4ff7e4b02b9968b84cda"},{"problem":19,"code":"#(loop [[first & rest] %]\n   (if (empty? rest)\n     first\n     (recur rest)\n   )\n)","user":"53f7820be4b0de5c41848560"},{"problem":19,"code":"(fn  lllast [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","user":"581e61b0e4b04b46fc4b0f28"},{"problem":19,"code":"(fn endOf [x]\n  (if (= (rest x) '())\n    (first x)\n    (endOf (rest x))))","user":"5d1cd478e4b02ea6f0fb6991"},{"code":"#(loop [l %]\r\n  (if (empty? l) nil\r\n    (if (= 1 (count l)) (first l)\r\n      (recur (rest l)))))","problem":19,"user":"4e57afc5535d8a8b8723a288"},{"problem":19,"code":"(fn [x] \n  (first (take-last 1 x)))","user":"559ba500e4b066d22e731f58"},{"problem":19,"code":"(fn ^:static mylast [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","user":"5b985fe5e4b0c0b3ffbd4ab1"},{"code":"(fn [xs]\n  (if (= () (rest xs))\n    (first xs)\n    (recur (rest xs))\n  )\n)","problem":19,"user":"52f702bae4b047fd55836fbe"},{"code":"(fn f [x] (if(=(count x) 1)\n                (first x)\n                (f (rest x))))","problem":19,"user":"52a76046e4b0c58976d9ac13"},{"problem":19,"code":"(fn lst [l] (if (= (rest l) '()) (first l) (lst (rest l))))","user":"52d7fff4e4b09f7907dd1383"},{"problem":19,"code":"(fn a [b]\n\t(get (into [] b) (- (count b) 1))\n)","user":"5710e574e4b09c608db7043b"},{"code":"(fn [v]\n  (let [l (rest v)]\n       (if (= 1 (count l))\n           (first l)\n           (recur l))))","problem":19,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [x] (if (empty? (rest x))\n        (first x)\n        (recur (rest x))))","problem":19,"user":"504e0350e4b078edc5f59392"},{"code":"(fn last_element_of [x] (first (reverse x)))","problem":19,"user":"5130fc48e4b07b22f541297f"},{"code":"(fn [args]\n\t(loop [[x & more] args]\n\t\t(if more\n\t\t\t(recur more)\n\t\t\tx\n\t\t)))","problem":19,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn last-prime [seq] (if (= '() (rest seq)) (first seq) (last-prime (rest seq))))","problem":19,"user":"4f031aaa535dcb61093f6a64"},{"code":"(fn [x]\n  (if (next x)\n    (recur (next x))\n    (first x)\n  )\n)","problem":19,"user":"4e5f17b5535d8a8b8723a2dd"},{"problem":19,"code":"(fn [s]\n\t(if (next s)\n      (recur (next s))\n      (first s)))","user":"56aca340e4b03c432f187349"},{"code":"#(loop [%1 %1] (if (empty? (rest %1)) (first %1) (recur (rest %1))))","problem":19,"user":"4e04a117535d04ed9115e7a1"},{"problem":19,"code":"(fn [[n & more ]](if more (recur more) n))","user":"5d93967be4b0d3f9b434ad17"},{"problem":19,"code":";; this would have been a much better solution :\\\n;; (comp first reverse) \n\n(fn [x] (nth x (- (count x) 1)))","user":"5646276de4b0284900eef60e"},{"problem":19,"code":"(fn lst [x] (first (take-last 1 x)))","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [List] (nth List (- (count List) 1)))","problem":19,"user":"531bad96e4b08068f379ed93"},{"problem":19,"code":"(fn my_last\n  [x]\n  (if (empty? (rest x))\n        (get (into [] x) 0)\n    (my_last (rest x))\n    )\n  )","user":"5aa28ffee4b0d174b936c855"},{"code":"(fn my-last\n  [some-list]\n  (first (reverse some-list)))","problem":19,"user":"51af4cf6e4b0c53cf2e68a4c"},{"problem":19,"code":"(fn [n] (nth (drop (- (count n) 1) n) 0))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn fx [x] (\n  first (reverse x)\n))","problem":19,"user":"50202d1ae4b0cb6ebc0a42f3"},{"problem":19,"code":"(fn get-last [l]\n (loop [curr-list l]\n   (if (next curr-list)\n     (recur (next curr-list))\n     (first curr-list))))","user":"587ca6cce4b01531a375eb22"},{"code":"#(nth % ( dec (count %)) )","problem":19,"user":"4f030775535dcb61093f6a43"},{"code":"#(first ((partial take-last 1) %))","problem":19,"user":"4ed27f9f535d44c135fd68d5"},{"problem":19,"code":";#(take-last 1 %)\n#(first (reverse %))","user":"5756eff6e4b02ea1147992e7"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (seq? xs)\n    (recur xs)\n    x))","user":"59a080e3e4b0871e7608b837"},{"code":"(fn last-element [xs] (if (= (count xs) 1) (first xs) (last-element (rest xs))))","problem":19,"user":"51a2569ee4b00957e520db7d"},{"code":";(fn [x] (first (filter #(= %  (x  (dec (count x ) )) ) x) ) )\n;(fn [x] (x (dec (count x)))) - better, doesn't work on lists\n(fn [x] (first (reverse x)))","problem":19,"user":"4ebc7b39535dfed6da9c6d85"},{"problem":19,"code":"(fn [s]\n  (let [item (first s)\n        remaining (next s)]\n    (if remaining (recur remaining) item)))","user":"4db01df1838c48654951d9bb"},{"problem":19,"code":"(fn [s]  \n  (loop [[f & r] s] \n    (if (empty? r) \n      f \n      (recur r)\n    )\n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"code":"(fn f [s] (if (> (count s) 1) (f (rest s)) (first s)))","problem":19,"user":"4daf8e61edd6309eace4d179"},{"code":"(fn getlast [x] \n  (if \n    (= (count x) 1) \n    (first x) \n    (getlast (rest x)) \n  )\n)","problem":19,"user":"4e8f5ca4535d65386fec214a"},{"problem":19,"code":"(fn [seq] ((comp first reverse) seq))","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":19,"code":"(fn [seq] (if (next seq) (recur (next seq)) (first seq)))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":19,"code":"(fn\n  [lst]\n  (loop [[x & xs] lst]\n    (if xs\n      (recur xs)\n      x)))","user":"5e619496e4b0fd0acd158690"},{"code":"(fn [items] (first (reverse items)))","problem":19,"user":"4ddc1c89535d02782fcbea01"},{"problem":19,"code":"(fn [coll] (loop [coll coll] (if (seq (rest coll)) (recur (rest coll)) (first coll))))","user":"57d50c05e4b0bd073c2023a8"},{"problem":19,"code":"(fn [coll]\n  (cond (>= 1 (count coll)) (first coll)\n        :else (recur (rest coll))))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn [coll] \n  (nth coll ( - (count coll) 1 )) )","problem":19,"user":"52ebbdf7e4b0705949c44443"},{"problem":19,"code":"(fn [[head & more]] (if more (recur more) head))","user":"550b128ce4b06e50f9beb139"},{"code":"(fn [x]\n  (cond\n  \t(= x [1 2 3 4 5]) 5\n  \t(= x '(5 4 3)) 3\n  \t(= x [\"b\" \"c\" \"d\"]) \"d\"))","problem":19,"user":"532b9075e4b09d4e7a9b5533"},{"problem":19,"code":";;#(.get % (dec (count %)))\n#(first (reverse %))","user":"5475b085e4b0c51c1f4d729d"},{"problem":19,"code":"(fn [[e & more]] (if more (recur more) e))","user":"575ef4fde4b08062f99a4e79"},{"code":"(fn last-elem [s]\n  (if (= '() (rest s))\n    (first s)\n    (last-elem (rest s))))","problem":19,"user":"51430fd9e4b0c172af7558cf"},{"problem":19,"code":"(fn get_last [collection]\n  (nth collection (- (count collection) 1)))","user":"58e980dfe4b056aecfd47d0b"},{"problem":19,"code":"(fn [in] (nth in (- (count in) 1)))","user":"5689c269e4b0dcc4269f4083"},{"code":"(fn foo [collection]\n  (first (reverse collection)))","problem":19,"user":"53713ebee4b0fc7073fd6ead"},{"problem":19,"code":"(fn pask [x] (first (reverse x)))","user":"559b90cee4b066d22e731f56"},{"problem":19,"code":"#(if-let [r (next %)]\n   (recur r)\n   (first %))","user":"5f5abf29e4b0a0bc16850aa8"},{"problem":19,"code":"(fn [a-seq]\n  (if (empty? (rest a-seq))\n    (first a-seq)\n    (recur (rest a-seq))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [coll] (loop [x coll] (if (empty? (rest x)) (first x) (recur (rest x)))))","problem":19,"user":"52a87aabe4b0c58976d9ac2f"},{"code":"(fn last-elem [s] (if (= (count s) 1)\n                      (first s)\n                      (last-elem (rest s))))","problem":19,"user":"4e6a6af5535d8ccf87e9fedf"},{"problem":19,"code":"#(loop [lst %]\n    (if (= ( count lst) 1)\n      (first lst)\n      (recur (rest lst))\n      )\n    )","user":"539338e3e4b0b51d73faaeb9"},{"code":"(fn my-last [x] (nth x (- (count x) 1)))","problem":19,"user":"5029481ee4b0b33e9bf6fdee"},{"code":"(fn [coll] (first (nthnext coll (dec (count coll)))))","problem":19,"user":"52c00e4fe4b07a9af5792342"},{"code":"(comp first (partial take-last 1))","problem":19,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [elements] (nth elements (- (count elements) 1)))","problem":19,"user":"4e5e391c535d8a8b8723a2d0"},{"problem":19,"code":"(fn [x] (->> x count dec (get (vec x))))","user":"54a9407de4b09f271ff37cac"},{"problem":19,"code":"(fn\n  [x]\n  (nth x (dec (count x))))","user":"562f9f5ae4b0ab312c17ebce"},{"problem":19,"code":"#(nth %(- (count %) 1) )","user":"5c3310cde4b0d62ef62d9f43"},{"problem":19,"code":"(fn\n  [x]\n  (first\n   (reverse x)\n   )\n  )","user":"5b5a2a5fe4b02d533a91bd89"},{"problem":19,"code":"(fn [coll] \n  (if (nil? (seq (rest coll))) \n    (first coll)\n    (recur (rest coll))))","user":"56442758e4b0018b46ad8c0a"},{"code":"#(if (next %)\n     (recur \n       (next %))\n  (first %))","problem":19,"user":"4e6defcc535d5021c1a895f8"},{"problem":19,"code":"(fn [vals]\n  (reduce (fn [previous current]\n            current)\n          (first vals)\n          vals))","user":"58543a59e4b07779d46863f5"},{"code":"(fn [s] (loop [[f & r] s] (if r (recur r) f)))","problem":19,"user":"53a26cede4b0f1fc7453882a"},{"problem":19,"code":"(fn [seq] (nth seq (dec (count seq)) ))","user":"54b45938e4b05787c3b1638f"},{"problem":19,"code":"#( (comp first reverse) %)","user":"549839f7e4b0b312c081ff7e"},{"code":"(fn mylast [lt]\r\n  (if (= (rest lt) '())\r\n    (first lt) (mylast (rest lt))))","problem":19,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":19,"code":"(fn [lox] (first (reverse lox)))","user":"55e357dae4b050e68259b442"},{"code":"(fn [l]\r\n  (if (= 1 (count l))\r\n    (first l)\r\n    (recur (rest l))))","problem":19,"user":"4dd29ede535dae65d5c462da"},{"problem":19,"code":"(fn lastelem [x] (if (= (count x) 1) (first x) (lastelem (rest x))))","user":"56e71333e4b02e7e935eb6d2"},{"code":"(fn end[[n & more]] (if more (recur more) n))","problem":19,"user":"534c55f8e4b084c2834f4a91"},{"code":"reduce (fn [one two] two)","problem":19,"user":"4fc40f86e4b081705acca345"},{"code":"(comp first #(take-last 1 %))","problem":19,"user":"4f525fdce4b03ad3f0c10d37"},{"problem":19,"code":"#(reduce (fn [acc x] rest x) %)","user":"55743e01e4b0aa18f790f401"},{"problem":19,"code":"(fn [l]\n  (loop [v l]\n    (if (empty? (rest v))\n      (first v)\n      (recur (rest v))\n    )\n  )\n)","user":"55252392e4b0882d96d091cc"},{"code":"(fn wat [l] (if (= (count l) 1) (first l) (wat (rest l))))","problem":19,"user":"538a2b4ce4b0640c7a9a58b8"},{"code":"(fn get-last [seq] \n  (if (empty? (rest seq)) (first seq) (get-last (rest seq))))","problem":19,"user":"51e6786ae4b0ab43cc26c216"},{"problem":19,"code":"(fn [c] (letfn [(skip [c] (if (= (rest c) '()) (first                   c) (skip (rest c))))] (skip c)))","user":"561e8b11e4b064ca9f4b16c0"},{"code":"(fn g [x] (cond (= (count x) 1) (first x)\n\t\t     :else (g (rest x))))","problem":19,"user":"51ad4face4b09397d5109780"},{"problem":19,"code":"(fn [list]\n  (cond\n   (empty? list) nil\n   (= 1 (count list)) (first list)\n   :else (recur (rest list))))","user":"5fad8efee4b08cb800c85af3"},{"problem":19,"code":"(fn last-it [x] \n  (if (= 1 (count x)) \n    (first x) \n    (last-it (rest x))))","user":"55993deee4b031d6649c9ba5"},{"problem":19,"code":"(fn [coll] (get (vec coll) (- (count (vec coll)) 1)))","user":"5fdba25ae4b05ac5b16ea135"},{"problem":19,"code":"(fn lst [x]\n  (if (= (count x) 1)\n    (first x) \n    (lst (rest x))))","user":"55b782c6e4b01b9910ae29a5"},{"code":"(fn [[x & xs]]\n    (if (empty? xs)\n        x\n        (recur xs)))","problem":19,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":19,"code":"(fn my-last [a-seq]\n  (loop [result a-seq]\n    (if (empty? (rest result))\n      (first result)\n      (recur (rest result)))))","user":"56747b46e4b05957ce8c613b"},{"code":"(fn [seq]\n    (nth seq\n         (dec (count seq))))","problem":19,"user":"4ea3c875535d7eef308072c9"},{"problem":19,"code":"(fn last2\n  [lst]\n  (if (nil? (next lst))\n    (first lst)\n    (last2 (rest lst))))","user":"57f81569e4b0d3187e900919"},{"code":"(fn get-the-last-element[sequance]\n  (-> sequance (reverse) (first)) \n  )","problem":19,"user":"5306bceee4b02e821686979b"},{"code":"#(get (vec %) (- (count %) 1))","problem":19,"user":"4ee2baa8535d10e5ff6f536b"},{"problem":19,"code":"(fn [y] (first (reverse y)))","user":"591770dae4b09b4ee5954b9c"},{"code":"(fn [l]\n  (if (= (rest l) ())\n    (first l)\n    (recur (rest l)))) ;last","problem":19,"user":"517a7f20e4b01aacecbecbee"},{"code":"(fn [seq] (first (drop (dec (count seq)) seq)))","problem":19,"user":"537f7e2ae4b06839e8705eb6"},{"problem":19,"code":"(fn borklast [x] (if (= (count x) 1) (first x) (borklast (rest x))))","user":"57073037e4b0b0fb43fd0689"},{"code":"(fn [s] (loop [f (first s) r (rest s)] (if (empty? r) f (recur (first r) (rest r)))))","problem":19,"user":"4e82c062535db62dc21a62cc"},{"problem":19,"code":"(fn [x] (nth (reverse x) 0))","user":"59637028e4b066ee0a44b0ca"},{"code":"(fn final [x] (peek (vec x)))","problem":19,"user":"4e6fee9e535d5021c1a8962a"},{"problem":19,"code":"(fn [collection] (nth collection (- (count collection) 1)))","user":"5524f21fe4b0882d96d091c7"},{"problem":19,"code":"#(loop [in %]\n  (if (empty? (rest in))\n    (first in)\n    (recur (rest in))))","user":"57c33eeae4b05aa3c4741cbc"},{"code":"(fn [a]\n(if (= (rest a) ())\n  (first a)\n  (recur (rest a))))","problem":19,"user":"509f3bc9e4b08df8156e9e39"},{"code":"#( first (reverse %))","problem":19,"user":"4e2b3e16535deb9a81d77f04"},{"code":"(fn [l]\n  (nth l (- (count l) 1)))","problem":19,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":19,"code":"#( first(reverse %) )","user":"5b28cf92e4b063e2438bcc56"},{"problem":19,"code":"(fn [arglist] (.get arglist (- (.count arglist) 1)))","user":"59b6f6d2e4b05c620303ca38"},{"problem":19,"code":"(fn [xs]\n  (-> xs\n      reverse\n      first))","user":"5d11618de4b02c15ef021985"},{"problem":19,"code":"(fn [[first-item & remaining]]\n  (if (empty? remaining)\n    first-item\n    (recur remaining)))","user":"5f21ffa2e4b0f565ad998289"},{"problem":19,"code":"(fn [secuencia] (nth secuencia (- (count secuencia) 1)))","user":"5f8b7506e4b0715f5002d74c"},{"code":"#(let [[x & xs] %]\n    (if (empty? xs) x (recur xs)))","problem":19,"user":"50086dafe4b028e089d3518d"},{"problem":19,"code":"(fn [seq] (reduce (fn [a b] b) nil seq))","user":"5a5f91d4e4b0512ff01cd94a"},{"code":"(fn ultimo[x]\r\n (if (= (next x) nil)\r\n    (first x)\r\n (ultimo(rest x))\r\n )  \r\n)","problem":19,"user":"4eb7ff08535d7eef30807379"},{"problem":19,"code":"(fn [array] \n  (reduce (fn [assoc row] row) array)\n  )","user":"53c6c9dfe4b00fb29b2212a1"},{"problem":19,"code":"(fn [listyMcListface] (nth listyMcListface (- (count listyMcListface) 1)))","user":"58d3ef87e4b03c36ff7e5931"},{"problem":19,"code":"#(clojure.core/peek (into [] %))","user":"5c87d2cbe4b048ec896c591c"},{"code":"(fn ([arg] (first (reverse arg))))","problem":19,"user":"4f7d065ce4b06e829148e1b9"},{"problem":19,"code":"(fn [seq] (reduce (fn [prev curr] curr) nil seq))","user":"5ad45f52e4b0ea6055cfabd7"},{"problem":19,"code":"#(loop [[f & r] %]\n   (if (empty? r) f (recur r)))","user":"5a5221c2e4b05d388ecb6bf3"},{"problem":19,"code":"(fn my-last [x] (if (empty? x)nil (if (empty? (rest x)) (first x) (my-last (rest x)))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn laster [list]\n  (if (= (count (rest list)) 0)\n    (first list)\n    (recur (rest list))\n    )\n  )","problem":19,"user":"4ff8aa3fe4b0678c553fc39e"},{"code":"(fn [x] ((vec x) (- (count x) 1)))","problem":19,"user":"4f36939ce4b0e243712b1eca"},{"code":"(fn [input] (first (reverse input)))","problem":19,"user":"4f956072e4b0dcca54ed6ccf"},{"code":"(fn last-element [letters] (nth letters (- (count letters) 1)))","problem":19,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn [x] (nth x (dec (count x))))","problem":19,"user":"4ddb339c535d02782fcbe9f9"},{"problem":19,"code":"(fn ll [[f & rs]] \n  (if (zero? (count rs))\n     f\n     (ll rs)\n  )\n)","user":"55129c5ce4b06e50f9beb1b5"},{"problem":19,"code":"(fn get-last [sequ] (first (reverse sequ)))","user":"548582eee4b0e286459a11ae"},{"problem":19,"code":"(fn getLast [x]\n  (if (= (count x) 1)\n    (first x)\n    (getLast (next x))\n  )\n)","user":"57341373e4b0cd1946bd1002"},{"problem":19,"code":"(fn get_last [x]\n  (if (empty? (rest x))\n    (first x)\n    (get_last (rest x))))","user":"5564709ee4b0c656e3ff1807"},{"problem":19,"code":"(fn bidule [[x & xs]] (if (empty? xs) x (bidule xs)))","user":"54456b1fe4b032a45b86939d"},{"problem":19,"code":"(fn [l] (reduce (fn [acc nex] nex) l))","user":"5de5c12be4b0948ae9d9ae19"},{"problem":19,"code":"(fn find-last [arr]\n  (if (empty? (rest arr))\n    (first arr)\n    (find-last (rest arr))))","user":"5b65b7bde4b0c6492753e748"},{"problem":19,"code":"(fn [Xs] (first (reverse Xs)))","user":"5e60a0cae4b0fd0acd158689"},{"problem":19,"code":"(fn [col]\n  (if (empty? (rest col)) \n    (first col)\n    (recur (rest col))))","user":"54f14aa6e4b024c67c0cf8af"},{"code":"(fn foo [s] (if (next s) (recur (next s)) (first s)))","problem":19,"user":"5035a77de4b0ed9c821488fe"},{"code":"(fn find-last [list]\n  (if (= 1 (.size list))\n      (first list)\n    (find-last (rest list))))","problem":19,"user":"4f0388e8535dcb61093f6b17"},{"problem":19,"code":"(fn mylast[lst] (first (reverse lst)))","user":"5ec5812de4b08d0ec38692ca"},{"problem":19,"code":"(fn last-el [vect] (nth vect (dec (count vect))))","user":"5e380e72e4b01d43a70e8db0"},{"code":"(fn [lst] \n  (nth lst (- (count lst) 1)))","problem":19,"user":"50d5c19ce4b0159555a1fc61"},{"code":"#(first (take 1 (reverse %)))","problem":19,"user":"50d179c7e4b05a71a896ef56"},{"code":"(fn [coll] (do (if (= 1 (count coll)) (first coll) (recur (rest coll)))))","problem":19,"user":"4f4b2bd4e4b03ad3f0c10c6f"},{"code":"(fn mylast [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (mylast (rest seq))))","problem":19,"user":"5315ec83e4b08068f379ed39"},{"problem":19,"code":"(fn lst [l]\n  (if (empty? (rest l))\n  (first l)\n  (lst (rest l)))\n)","user":"54eb3a9ee4b024c67c0cf846"},{"problem":19,"code":"(fn [s] \n  (if (empty? (rest s)) \n    (first s) \n    (recur (rest s))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [x] (nth (seq x) (- (count x) 1) ))","problem":19,"user":"512fba16e4b0a88bb1e00aae"},{"code":"(fn [xs] \r\n   (if (= 1 (count xs)) \r\n     (first xs) \r\n     (recur (rest xs))))","problem":19,"user":"4e2110c7535d04ed9115e813"},{"problem":19,"code":"(fn my-last [[x & y]] (if (= 0 (count y)) x (my-last y)))","user":"5606ea56e4b08b23635d317b"},{"problem":19,"code":"#(reduce (fn [x n ] n) %)","user":"5862ad28e4b0f14aab7c8810"},{"code":"(fn hop [x] \n  (if (= 1 (count x))\n    (first x)\n    (hop (rest x))))","problem":19,"user":"4e4fbd0c535dc968683fc4e9"},{"code":"(fn [a] (first (reverse a)))","problem":19,"user":"4e602826535d8ccf87e9fe52"},{"code":"(fn foo [xs]\n  (if (empty? (rest xs)) (first xs)\n    (foo (rest xs))))","problem":19,"user":"50afa883e4b0c3f5ed5c29a2"},{"code":"(partial (comp first take-last) 1)","problem":19,"user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn [seeq] \n  (if (> (count seeq) 1)\n    (recur (rest seeq))\n    (first seeq)))","problem":19,"user":"4ec72817535d6d7199dd36de"},{"code":"(fn last1 [x] \n  (if (= 1 (count x)) \n    (first x)\n    (last1 (rest x))))","problem":19,"user":"4ee643be535d93acb0a6685c"},{"code":"(partial reduce (fn [_ el] el))","problem":19,"user":"4e25176e535d04ed9115e829"},{"code":"(fn my-last [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (my-last (rest xs))))","problem":19,"user":"516064e5e4b009fba0926e26"},{"problem":19,"code":"(fn [lst] (reduce #(identity %2) lst))","user":"556c70b6e4b09a3098a524fc"},{"problem":19,"code":"(fn mlast [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (mlast (rest seq))))","user":"55330d7fe4b09218d5f44f88"},{"code":"#((comp first reverse) %)","problem":19,"user":"4e976f79535dbda64a6f6b55"},{"problem":19,"code":"(fn [coll] (let [[head & tail] coll] (if (empty? tail) head (recur tail))))","user":"5ca8cd5de4b048ec896c5c1c"},{"code":"(fn mylast [s]\n  (if (empty? (rest s))\n      (first s)\n      (mylast (rest s))))","problem":19,"user":"4ff35e60e4b0678c553fc350"},{"code":"(fn [coll] (first (rseq (vec coll))))","problem":19,"user":"5117caa0e4b0e0897831a60d"},{"problem":19,"code":"(fn [x]\n   ( first (drop (- (count x) 1) x) ))","user":"565560ace4b0f9d632dd8496"},{"problem":19,"code":"(fn [stuff]\n  (let [stuff-seq (seq stuff), lastIdx (- (count stuff-seq) 1)]\n    (nth stuff-seq lastIdx)))","user":"603e8e3ae4b0d5df2af22316"},{"code":"(fn [sq]\n  (loop [s sq]\n    (if (= (rest s) [])\n        (first s)\n        (recur (rest s)))))","problem":19,"user":"4f038cee535dcb61093f6b20"},{"problem":19,"code":"(fn\n  [arg] \n  (nth arg\n       (- (count arg) 1))\n)","user":"602d98d5e4b0d5df2af2227a"},{"problem":19,"code":"(fn last2 [[x & xs]] (if xs (recur xs) x))","user":"57752a2de4b0979f89651613"},{"problem":19,"code":"(fn toto [x] (if (empty? (rest x)) (first x) (toto (rest x))))","user":"56c7093ae4b0ed865f9758b4"},{"problem":19,"code":"(fn last-element [x] (if (= 1 (count (rest x))) (first (rest x)) (recur (rest x))))","user":"5eddc271e4b0c7845d86b0fa"},{"problem":19,"code":"(fn last_element [x] \n  (if (seq (rest x)) \n    (last_element (rest x))\n    (first x)\n    )\n  )","user":"5910a43de4b0163c97b36ebf"},{"problem":19,"code":"(fn ayy [l] (if (= (rest l) '()) (first l) (ayy (rest l))))","user":"557af43ae4b05c286339e0a8"},{"code":"(fn mylast [l] (if (= (count l) 1) (first l) (mylast (rest l))))","problem":19,"user":"505f5d8ae4b08f2a82ad10b1"},{"code":"(fn [aaa](first (reverse aaa)))","problem":19,"user":"51bd4ad0e4b0ff155d51d2a8"},{"code":"(fn [xs]\n  (cond (empty? xs) '()\n        (empty? (rest xs)) (first xs)\n        :else (recur (rest xs))))","problem":19,"user":"50e09313e4b061dbdced7233"},{"problem":19,"code":"(fn l [s](if (next s)(recur (next s))(first s)))","user":"543168f5e4b0dad94371f2e6"},{"problem":19,"code":"(fn last-item [x] (first (reverse x)))","user":"5863f986e4b0f14aab7c8838"},{"problem":19,"code":"(fn foo [[x & xs]] (if (empty? xs) x (foo xs)))","user":"54453f83e4b032a45b86939a"},{"problem":19,"code":"(fn [args] (first (take-last 1 args)))","user":"5791ae28e4b0ebec4cfb75be"},{"problem":19,"code":"#(first( reverse % ))","user":"53dae029e4b0e771c30254ae"},{"problem":19,"code":"(fn last-thing [items]\n  (if\n    (empty? (rest items))\n    (first items)\n    (last-thing (rest items))))","user":"5b1ff078e4b03cfeda66ed2a"},{"code":"(fn [input]\n  (if (next input)\n    (recur (next input))\n    (first input)))","problem":19,"user":"528bba38e4b0239c8a67aea9"},{"code":"#(loop [lst %]\n    (if (empty? (rest lst)) (first lst)\n        (recur (rest lst))))","problem":19,"user":"52c25645e4b07a9af579237d"},{"problem":19,"code":"(fn [items] (if (empty? (rest items)) (first items) (recur (rest items))))","user":"5e7b2d86e4b085ba37836e11"},{"code":"(fn [e] (first (reverse e)))","problem":19,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":19,"code":"(fn [s]\n  (if (next s)\n    (recur (next s))\n  (first s)))","user":"58a5822fe4b01a0c0b232913"},{"code":"(fn [lst]\n  (if (= (count lst) 1)\n    (first lst)\n    (recur (rest lst))))","problem":19,"user":"52864dbce4b0239c8a67ae12"},{"problem":19,"code":"(fn [x]\n  (loop [[a & x] x]\n    (if (empty? x)\n      a\n      (recur x))))","user":"5459f13be4b01be26fd74631"},{"problem":19,"code":"(fn[lst] (nth lst (- (count lst) 1)))","user":"577dbb04e4b0c8d87281f6da"},{"problem":19,"code":"(fn f [l] (if (= (rest l) '())\n            (first l)\n            (f (rest l))))","user":"559248c0e4b0604b3f94d58b"},{"code":"#(if (vector? %)\n  (peek %)\n  (peek (reverse %)))","problem":19,"user":"50c32086e4b00e537d00253d"},{"code":"(fn lastitem [items]\n  (peek (vec items)))","problem":19,"user":"506f3641e4b09350ab4199fb"},{"problem":19,"code":"(fn __ [ob]\n  (nth ob (dec (count ob))))","user":"56305383e4b073c1cf7a9be6"},{"code":"(fn last-element [list] (first(take-last 1 list)))","problem":19,"user":"4f20dc06e4b0d66497709fcc"},{"code":"(fn apple [x]\n\t   (if (= (count x) 1)\n\t       (first x)\n\t     (recur (rest x))))","problem":19,"user":"5122d648e4b068a9582e6570"},{"problem":19,"code":"(fn my-last [sequence] (if (empty? (rest sequence)) (first sequence) (my-last (rest sequence))))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"problem":19,"code":"(fn [xs]\n  (let [ys (reverse xs)]\n    (first ys)))","user":"5bcddaeee4b0e9689409ee07"},{"problem":19,"code":"(fn[coll]\n  (nth coll (- (count coll) 1)))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4e7e03d5535db169f9c796fd"},{"code":"(fn t [var] (.get var(-(count var)1)))","problem":19,"user":"516c3472e4b06f078fab251c"},{"code":"(fn last-element [x] \n  (nth x (- (count x) 1)))","problem":19,"user":"4f95a8a1e4b0dcca54ed6cd7"},{"code":"(fn [mySeq] (first (reverse mySeq)))","problem":19,"user":"4fce75cfe4b03432b189f400"},{"code":"(fn last-elem [seq-elems] \n  ( if (> (count seq-elems) 1) \n    (recur (rest seq-elems))\n    (first seq-elems)))","problem":19,"user":"4f065217535dcb61093f6c0c"},{"code":"(fn y [x] (if (= (count x) 1) (first x) (y (rest x))))","problem":19,"user":"4fb1a4e4e4b081705acca27e"},{"problem":19,"code":"(fn [lyst]\n  (nth lyst (- (count lyst) 1)))","user":"59ee6801e4b0966464fe6a1f"},{"problem":19,"code":"(fn lst [x]\n  (if (= (next x) nil)\n    (get (vec x) 0)\n    (recur (rest x)))\n  )","user":"55fa6ca9e4b03cbcff9738d1"},{"code":"(fn [x]\n  (if (next x)\n    (recur (next x)) (first x)))","problem":19,"user":"4f3ad7f0e4b0e243712b1f1d"},{"problem":19,"code":"(fn x\n  [[head & tail]]\n  (if (empty? tail)\n    head\n    (x tail)\n    )\n  )","user":"54410a71e4b032a45b869367"},{"code":"(fn [s] (if (empty? (rest s))\n\t  (first s)\n\t  (recur (rest s))))","problem":19,"user":"514a13cee4b0829bd132edb4"},{"problem":19,"code":"(fn [elements]\n  (let [size (count elements)]\n    (nth elements (dec size))\n    )\n  )","user":"564c7501e4b0284900eef671"},{"code":"(fn [coll]\n  (reduce (fn [x y] y) coll))","problem":19,"user":"4ecbafbf535df97575fdabde"},{"code":"(fn [x] \n  (if (= 1 (count x))\n        (first x)\n    \t(recur (rest x))))","problem":19,"user":"521b481de4b0c4ef0be83037"},{"problem":19,"code":"(fn find-last [ls] \n  (if (> (count ls) 1)\n    (find-last (rest ls))\n    (first ls)\n    )\n  )","user":"53ed1778e4b0d648e757f4bd"},{"problem":19,"code":"(fn end [[x & xs]]\n  (if-not xs\n    x\n    (recur xs)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":19,"code":"(fn [xs] (nth xs (-(count xs) 1)))","user":"5ff26ac2e4b05ac5b16ea1fc"},{"code":"(fn huhu [sequenz] (nth sequenz (dec (count sequenz))))","problem":19,"user":"50aca92ee4b071b89ef26232"},{"code":"(fn [x] (nth x (- (count x) 1) nil))","problem":19,"user":"51aa5434e4b04e3dc0c27b26"},{"code":"(fn [xs]\n  (cond\n   (empty? xs) nil\n   (empty? (rest xs)) (first xs)\n   :else (recur (rest xs))))","problem":19,"user":"53684a2fe4b0243289761e8c"},{"problem":19,"code":"(fn [s] \n     (if (empty? (rest s))\n       (first s)\n       (recur (rest s))))","user":"54c7aa8ce4b045293a27f63d"},{"code":"(fn my-last [s] \n  (if (= 1 (count s))\n  (first s)\n  (my-last (rest s))  \n  )\n)","problem":19,"user":"4faacc04e4b081705acca201"},{"problem":19,"code":"(fn[l] \n  (if (empty? (rest l)) (first l) (recur (rest l))\n  ) \n )","user":"55e632cbe4b050e68259b484"},{"code":"(fn [seq] (first(reverse seq)))","problem":19,"user":"4f2893d0e4b0d6649770a019"},{"code":"(fn myfunc [x] (nth x (- (count x) 1)))","problem":19,"user":"5298bd13e4b02ebb4ef75063"},{"problem":19,"code":"#(first (drop (dec (count %1)) %1))","user":"55d28321e4b0e31453f64a57"},{"problem":19,"code":"#(first (reverse (vec %)))","user":"57ee9ffbe4b0bfb2137f5bc2"},{"code":"#(loop [se %]\n   (if (= (second se) nil)\n   (first se)\n     (recur (rest se))\n   ))","problem":19,"user":"532439b1e4b09d4e7a9b54da"},{"problem":19,"code":"(fn custom-last\n  [[x & xs]]\n  (if (nil? xs) x (custom-last xs)))","user":"504ee3b7e4b0e7ad84dbc4a3"},{"code":"(fn [n] \n      (nth n (dec (count n)))\n    )","problem":19,"user":"52c98e7ae4b0c2d177d6213d"},{"problem":19,"code":"(fn [v] (first(reverse v)))","user":"5146cac9e4b04ef915e3731c"},{"code":"(fn [x] (nth x (+ -1 (count x))))","problem":19,"user":"4e877690535dceadca469851"},{"problem":19,"code":"(fn [[f & rst]] \n  (if (nil? rst)\n    f\n    (recur rst)))","user":"55394722e4b09218d5f44fe7"},{"problem":19,"code":"(fn [seq] (if (= (rest seq) ()) (first seq) (recur (rest seq))))","user":"56abaf0be4b03c432f187341"},{"code":"(fn[x](first (reverse x)))","problem":19,"user":"4f32135ae4b0d6649770a08e"},{"problem":19,"code":"(fn get_last [x]\n (if (= (second x) nil) (first x) (get_last (rest x))))","user":"599a033ce4b07157cc8dab04"},{"code":"(fn [s]\n  (nth s (- (count s) 1))\n)","problem":19,"user":"51324307e4b06942423563cf"},{"problem":19,"code":"(fn findLast [x] (nth x (dec (count x))))","user":"58d533fae4b03c36ff7e5958"},{"problem":19,"code":"(fn [y] (if (empty? (rest y))\n            (first y)\n            (recur (rest y))))","user":"56f1469de4b04a395b9a048c"},{"problem":19,"code":"(fn [subj]\n  (let [len (count subj)\n        n (- len 1)]\n    (nth subj n)))","user":"52a85d20e4b0c58976d9ac2c"},{"code":"(fn la [x] (nth x (- (count x) 1)))","problem":19,"user":"5174ade2e4b07031762f2edf"},{"problem":19,"code":"(fn a [l] \n  (cond \n         (= 1 (count l)) (first l)\n         :else (a (rest l)) ))","user":"56df6301e4b0ca2494a095f1"},{"problem":19,"code":"(fn aa [x] (if (< 1 (count x)) (aa (rest x)) (first x)) )","user":"553b8fdbe4b09218d5f45004"},{"problem":19,"code":"#(loop [[elem & more] (seq %)](if (nil? more) elem (recur more)))","user":"5597cc26e4b031d6649c9b93"},{"code":"(fn mylast [xs] (first (take-last 1 xs)))","problem":19,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn last-element [xs]\n  (first (reverse xs)))","problem":19,"user":"518b8561e4b0f028e99addef"},{"problem":19,"code":"(fn last-elem[s] (nth s (- (count s) 1 )))","user":"5ae84017e4b0837691e92cb4"},{"code":"(fn foo [bar] (first (reverse bar)))","problem":19,"user":"52c60844e4b0c2d177d62106"},{"code":"(fn last-element [coll] (nth coll (-> coll count dec)))","problem":19,"user":"5298cc88e4b02ebb4ef75065"},{"problem":19,"code":"(fn my-last\n  [coll]\n  (if ( = (count coll) 1)\n   (first coll) \n   (my-last (rest coll))))","user":"5e00752fe4b0a607a9a45d24"},{"code":"(fn [v]\n  (loop [s v]\n    (if (nil? (seq (rest s)))\n      (first s)\n      (recur (rest s))\n             )))","problem":19,"user":"5312452be4b08068f379ecf8"},{"code":"(fn get-last [sequence] (first (reverse sequence)))","problem":19,"user":"5095a8c7e4b0ba05ca7aebfb"},{"problem":19,"code":"(fn\n  [my-list]\n  (nth my-list (+ -1 (count my-list)))\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":19,"code":"(fn findLast [s]  (if (next s)\n          (recur (next s))\n          (first s)))","user":"5e207b74e4b05b4b01516110"},{"code":"#(first( take-last 1 %))","problem":19,"user":"4faec810e4b081705acca24e"},{"problem":19,"code":"#(loop [lista %]\n   (if (= (count lista) 1)\n     (first lista)\n     (recur (rest lista))))","user":"6074e1e7e4b069485764de50"},{"code":"(fn last_elem [x] (reduce (fn [a b] b) x))","problem":19,"user":"534c1321e4b084c2834f4a89"},{"problem":19,"code":";;(fn [x]\n;; (loop [i (count x)]\n;;    (if (= i (- (count x) 1))\n;;      (get x i)\n;;      (recur (inc i))\n\n(fn [x] (nth x (- (count x) 1)))","user":"580a829ae4b0a837a8b30d38"},{"problem":19,"code":"(fn final-element\n  [collection]\n  (nth collection (- (count collection) 1))\n)","user":"570a9be7e4b0b0fb43fd06b6"},{"problem":19,"code":"(fn [xs]\n  (when (seq xs)\n    (if (= (count xs) 1)\n      (first xs)\n      (recur (rest xs)))))","user":"53a6e646e4b0ef122a8689cd"},{"code":"(fn my-last [x]\n  (if (= (count x) 1)\n    (first x)\n    (my-last (rest x))))","problem":19,"user":"4fc580cfe4b0ee37620e17f7"},{"code":"reduce (fn [x,b] b)","problem":19,"user":"5138da28e4b0a5db03d727dd"},{"code":"(fn recu [x] (if (next x) (recu (next x)) (first x)))","problem":19,"user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":19,"code":"(fn my-last\n  [coll]\n  (first (reverse coll)))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":19,"code":"(fn [s] (loop [es s] (if-not (next es) (first es) (recur (next es)))))","user":"58ef93ece4b056aecfd47dca"},{"code":"(fn l [s]\r\n        (if (next s)\r\n          (recur (next s))\r\n          (first s)))","problem":19,"user":"4dbe8f7f535d020aff1edf64"},{"problem":19,"code":"(fn [[first & rest]]\n  (if (seq rest)\n    (recur rest)\n    first))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"#( first ( reverse % ))","problem":19,"user":"4f3e3937e4b0e243712b1f7f"},{"problem":19,"code":"(fn [[fst & rst]] \n  (if (empty? rst) \n    fst \n    (recur rst)))","user":"5aed87a1e4b0cc2b61a3bc1a"},{"code":"(fn mylast [l] \n  (if (empty? (rest l))\n    (first l)\n    (mylast (rest l))))","problem":19,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":19,"code":"(fn [lst]\n    (if (empty? lst)\n      nil\n      (loop [i 0]\n        (if (= i (- (count lst) 1))\n          (nth lst i)\n          (recur (inc i))\n        )\n      )\n    )\n  )","user":"579a3f3be4b05b1deef9add9"},{"code":"(fn mylast [x]\n  (if (= 1 (count x))\n    (first x)\n    (mylast (rest x))\n  )\n)","problem":19,"user":"4e932f38535dbda64a6f6b0c"},{"problem":19,"code":"( fn[x] ( first ( reverse x )))","user":"56da3215e4b0ea9b8538f7fe"},{"code":"(fn lst[x] (first (reverse x)))","problem":19,"user":"4f038938535dcb61093f6b18"},{"code":"( fn [x] (first (reverse x  )))","problem":19,"user":"51faf9ece4b0f1313d4689f7"},{"code":"(fn [[n & s]]\n  (if s\n    (recur s)\n    n))","problem":19,"user":"50521b1fe4b0a561d07d8f14"},{"problem":19,"code":"(fn [coll]\n  (nth coll (dec(count coll))))","user":"6029c861e4b0d5df2af22257"},{"problem":19,"code":"(fn \n   [col]\n   (let [[FI & RE] col]\n     (if (empty? RE)\n       FI\n       (recur RE))))","user":"54e336f3e4b024c67c0cf7da"},{"code":"(fn [lst]\n    (first (reverse lst)))","problem":19,"user":"4f7fc9a1e4b033992c121bee"},{"code":"(fn [seq]\n  (if-not (next seq)\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"528b08efe4b0239c8a67ae8a"},{"problem":19,"code":"(fn retlast [se] (nth se (- (count se) 1)))","user":"5c337305e4b0d62ef62d9f48"},{"code":"(fn [x] (if (= (next x) nil)\n          (first x) \n          (recur (next x))))","problem":19,"user":"52e89c8be4b09f7907dd149b"},{"problem":19,"code":"(fn\n  [coll]\n  (loop [x 0\n         my-vals coll]\n    (if (empty? my-vals)\n      x\n      (recur (first my-vals) (rest my-vals)))))","user":"59c180e4e4b0a024fb6ae489"},{"problem":19,"code":"(fn [elems] (nth (seq elems) (- (count (seq elems)) 1)))","user":"589e0024e4b02bd94d917e4e"},{"code":"#(first (seq (reverse %)))","problem":19,"user":"5333d97be4b019098a6f8b87"},{"problem":19,"code":"(fn my-last [lista]\n  (if (= (count (rest lista)) 0) (first lista) (my-last (rest lista)))\n  )","user":"543d5c61e4b032a45b86934d"},{"code":"(fn [x]\n    (first(reverse x))\n  )","problem":19,"user":"4f4a34b2e4b0d56e7bb92c09"},{"code":"(fn [a] (if (next a)\n           (recur (next a))\n           (first a)))","problem":19,"user":"5011ae8fe4b00ad656b9d982"},{"problem":19,"code":"(fn [x] (first( reverse x)))","user":"57d1a0e6e4b0bd073c20236d"},{"code":"(fn [vec] (loop [vec vec] (if (empty? (rest vec)) (first vec) (recur (rest vec)))))","problem":19,"user":"521f24ebe4b0e6c71e0c0bcd"},{"code":"(fn lst1 [x]\n  (if (empty? (rest x))\n      (first x)\n      (lst1 (rest x))))","problem":19,"user":"4fc5ee4fe4b0ee37620e1804"},{"code":"(fn mylast [s]\n  (if (seq (rest s))\n    (recur (rest s))\n    (first s)))","problem":19,"user":"512148dae4b05ae5a5823c0f"},{"problem":19,"code":"(fn [[first & rest]]\n  (if rest\n    (recur rest)\n    first))","user":"561f9110e4b064ca9f4b16ce"},{"problem":19,"code":"(fn [set] \n  (let [len (-(count set)1)]\n  \t(nth set len)))","user":"55ba601ee4b01b9910ae29d1"},{"code":"(fn lst [x] (if (> (count x) 1) (lst (rest x)) (first x)))","problem":19,"user":"5313165ce4b08068f379ed06"},{"problem":19,"code":"(fn [ds] (first (reverse ds)))","user":"5c1cf208e4b0efcb0b05b23e"},{"code":"(fn [x] \n  (if (next x)\n    (recur (rest x))\n    (first x)))","problem":19,"user":"4ea8570f535d7eef308072f8"},{"code":"(fn my-last [xs] (cond (next xs) (recur (rest xs))\n                       true (first xs)))","problem":19,"user":"52c10debe4b07a9af579235d"},{"code":"#(let [r (rest %)] (if (empty? r) (first %) (recur r)))","problem":19,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [list]\n  (first (reverse list)))","problem":19,"user":"4f70e701e4b07046d9f4f002"},{"problem":19,"code":"(fn get-last [s] (if(next s) (recur(next s)) (first s)))","user":"542130cee4b01498b1a71aae"},{"code":"(fn [sec] \n  (first \n   (reverse sec)))","problem":19,"user":"5266db2be4b03e8d9a4a714a"},{"problem":19,"code":"(fn [& args]\n  (let [numbers (first args)]\n    (nth numbers (- (count numbers) 1))\n  )\n)","user":"5e1429afe4b0a047bd49f6e6"},{"code":"(fn last-element [s] (if (= 1 (count s)) (first s) (last-element (rest s))))","problem":19,"user":"4e6a2503535d8ccf87e9fea2"},{"problem":19,"code":"(fn my-last [[head & tail]]\n  (if (empty? tail)\n    head\n    (recur tail)))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn mlast [items] (nth items (- (count items) 1)))","problem":19,"user":"4fe4cefce4b0e8f79898febd"},{"code":"(fn [sequence] (first (reverse (seq sequence))))","problem":19,"user":"5213348ae4b0d32679a50652"},{"problem":19,"code":"(fn [arr] (reduce (fn [a b] b) 0 arr))","user":"5eb4927fe4b00a66d4a95221"},{"problem":19,"code":"(comp first reverse);rseq for vector or sorted-map","user":"5de051bfe4b0948ae9d9ade5"},{"problem":19,"code":"#(let [s %] (nth s (- (count s) 1)))","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn solve-problem [the-seq]\n  (first (reverse the-seq)))","problem":19,"user":"52b66d98e4b0c58976d9ad46"},{"problem":19,"code":"#(loop [s %]\n   (if (empty? (rest s))\n     (first s)\n     (recur (rest s))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"code":"(fn foo [lst] (if (= (count lst) 1) (first lst) (foo (rest lst))))","problem":19,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [x]\n  (nth x\n       (- (count x) 1)))","problem":19,"user":"52a32b52e4b04e0c58e87bfc"},{"code":"(fn mylast [seqn] (cond (not (seq seqn)) nil (= 1 (count seqn)) (first seqn) true (mylast (rest seqn))))","problem":19,"user":"53889587e4b0640c7a9a589e"},{"problem":19,"code":"(fn return-last [x] \n  (first (reverse x)))","user":"54f98d9be4b01ecee9d8883d"},{"code":"(fn find-last [sequence]\n  (if (seq (rest sequence)) (find-last (rest sequence))\n    (first sequence)))","problem":19,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"#( get (vec %) (- (count (vec %)) 1) )","problem":19,"user":"4f2094e1e4b0d66497709fca"},{"problem":19,"code":"(fn [li]\n  (first (reverse li)))","user":"55d4ae39e4b0e31453f64a7b"},{"problem":19,"code":"(fn [coll]\n   (if (next coll)\n     (recur (next coll))\n     (first coll)))","user":"58b7eab9e4b0ebc645576d86"},{"code":"(fn[sec] (first (reverse sec)))","problem":19,"user":"51f297a3e4b0210f90e74552"},{"code":"(fn [the-vector]\n  (if (= 1 (count the-vector))\n    (first the-vector)\n    (recur (rest the-vector))))","problem":19,"user":"52f3f536e4b05e3f0be25f1a"},{"code":"(fn a [b] (nth b (- (count b) 1)))","problem":19,"user":"4e8dbab3535d65386fec2139"},{"code":"(fn lst [x] (first (reverse x)))","problem":19,"user":"4e8b742a535d65386fec2123"},{"code":"(fn [col] (nth col (- (count col) 1)))","problem":19,"user":"4e50e2a0535dc968683fc4ef"},{"problem":19,"code":"(fn  [x] (if  (empty? (rest x))  (first x) (recur (rest x))))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"#(nth % (dec (.length (vec %))))","problem":19,"user":"5360e9ade4b0243289761e3b"},{"problem":19,"code":"#( nth ( reverse %) 0 )","user":"5e9c4f43e4b0157ca96647f8"},{"problem":19,"code":"#(first \n  \t(reverse %1)\n  )","user":"5593ff3de4b0c79f6e1db949"},{"problem":19,"code":"reduce (fn [acc token] token)","user":"587e9031e4b052da650a6347"},{"problem":19,"code":"(fn lst [l]\n    (let [[x & xs] l]\n        (if xs\n            (lst xs)\n            x)))","user":"600ae927e4b074f607df6689"},{"problem":19,"code":"(fn [coll]\n  (let [len (count coll)]\n    (let [final (- len 1)]\n      (nth coll final))))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn my-last\n  [seq]\n  (let [first-elem (first seq)\n        rest-seq (rest seq)]\n    (if (= '() rest-seq)\n        first-elem\n        (my-last rest-seq))))","problem":19,"user":"4f3a2585e4b0e243712b1f03"},{"problem":19,"code":"(fn [col] (let [f (first col)\n                r (rest col)]\n            (if (seq r) \n            \t(recur r)\n              \tf\n              )\n            ))","user":"5c408a61e4b08cd430848eb2"},{"problem":19,"code":"(fn [seq] (-> seq (reverse) (first)))","user":"5c24c654e4b07e362c2305a7"},{"code":"(fn [seq] \n  (nth seq (- (count seq) 1))\n)","problem":19,"user":"5099d18de4b0efbae1fbc0a1"},{"problem":19,"code":"(fn [xs] (first (reduce conj '() xs)))","user":"57006957e4b08d47c97781c8"},{"code":"(fn ret [x] (if (not(empty?(rest x ))) (ret (rest x )) (first x)))","problem":19,"user":"518f9e14e4b08646f171ca07"},{"problem":19,"code":"(fn ultimo\n  [lst]\n  (if (= 1 (count lst))\n    (first lst)\n    (ultimo (rest lst))))","user":"59e68254e4b0249b728206fc"},{"problem":19,"code":"(fn \n  [[head & tail]]\n  (if (empty? tail)\n    head\n    (recur tail)))","user":"5844e6f4e4b089d5ab817e5a"},{"problem":19,"code":"(fn l [seq] (nth seq (- (count seq) 1)))","user":"5ababa62e4b073f1774426b4"},{"problem":19,"code":"(fn \n  [coll]\n  (nth coll (- (count coll) 1)))","user":"5e87194ce4b09a7a73c8bbe4"},{"code":"(fn [a]\n  (if (= (count a) 1)\n    ; then\n    (first a)\n    ; else\n    (recur (rest a))\n  ) ; if not empty\n) ; fn","problem":19,"user":"504e4ac2e4b0f6ff3350c49a"},{"problem":19,"code":"(fn f [[x & xs]]\n  (if (nil? xs)\n    x\n    (f xs)))","user":"56483562e4b0284900eef629"},{"code":"(fn last_ [seq] (if (= 1 (count seq)) (first seq) (last_ (rest seq)) ))","problem":19,"user":"50bf3015e4b0a6abc6550e5b"},{"problem":19,"code":"(fn[x] (first (take-last 1 x)))","user":"53c7da9ce4b00fb29b2212ad"},{"problem":19,"code":"(fn = [coll] (first (reverse coll)))","user":"58171c24e4b0c0e9c07b8388"},{"problem":19,"code":"(fn poop [our-sequence]\n                              (if(=(count our-sequence)1)\n                                (first our-sequence)\n                                (poop (rest our-sequence))\n                                )\n  )","user":"5782ce69e4b0d36ec5835e9a"},{"problem":19,"code":"reduce #(first [%2 %1])","user":"5ddae066e4b0948ae9d9ada5"},{"problem":19,"code":"(fn my-last [s]\n  (if (< (count s) 2)\n    (first s)\n    (my-last (rest s))))","user":"6065755ee4b069485764ddcc"},{"problem":19,"code":"(fn [x] (if (list? x) 3 (first (rseq x))))","user":"56ff7ffee4b08d47c97781be"},{"problem":19,"code":"(fn [l] (nth l (- (count l) 1) ))","user":"5739cbe4e4b0cd1946bd107c"},{"code":"(fn getlast [alist] (first (reverse alist)))","problem":19,"user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn ttt [x] (if (= 1 (count x)) (first x) (ttt (rest x))))","problem":19,"user":"4fe4614ee4b0e8f79898feb3"},{"problem":19,"code":"(fn\n  [x]\n  (let [offset (count x)\n        last-char (nth x (- offset 1))]\n    last-char))","user":"58bd84d2e4b0888cdc949d31"},{"code":"(fn my-last [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"4e4c238f535dc968683fc4dc"},{"problem":19,"code":"(fn [coll]\n(nth coll (dec (count coll) ) )\n  )","user":"57ff7d88e4b0a837a8b30c20"},{"problem":19,"code":"(fn [[& more]]\n   (println (count more))\n  (if (> (count more) 1)\n    (recur (rest more))\n    (first more)))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":19,"code":"(fn get-last [x] (if (= (rest x) '()) (first x) (get-last (rest x))))","user":"5716acfbe4b07c98581c3b01"},{"problem":19,"code":"(fn [[h & t]] (if (nil? t )\n              h\n              (recur t)\n             ))","user":"5e5f83a2e4b0fd0acd15867b"},{"problem":19,"code":"(fn find-last [lst] (if (= () (rest lst)) (first lst) (find-last (rest lst))))","user":"5e010c58e4b0a607a9a45d33"},{"problem":19,"code":"reduce (fn [x y] y) 0","user":"58b226cce4b0ebc645576d07"},{"problem":19,"code":"reduce (fn [r x] (if (nil? x) r x))","user":"5bb948f5e4b0a20761a235d5"},{"problem":19,"code":"(fn [x] (loop [[f & rst] x] (if (empty? rst) f (recur rst))))","user":"5c500de0e4b0f9f7a8770ebb"},{"problem":19,"code":"(fn lastelement [sequence] (nth sequence (-(count sequence) 1)))","user":"5afdb2bae4b0cc2b61a3bd1f"},{"code":"(fn getLast [l]\n  (if (= '() (rest l))\n    (first l)\n    (getLast (rest l))))","problem":19,"user":"5127cc3de4b03a34742b4300"},{"problem":19,"code":"#(loop [[head & rest] %]\n   (if (empty? rest)\n     head\n     (recur rest)\n     )\n   )","user":"5bba6571e4b0a20761a235e9"},{"problem":19,"code":"(fn [vector] \n  (nth vector\n    (- (count  vector) 1)\n    )\n    )","user":"5e23ca7fe4b05b4b01516144"},{"problem":19,"code":"(fn [coll]\n  (nth (reverse coll) 0)\n  )","user":"5b199fd4e4b03cfeda66ecbd"},{"code":"#(loop [coll %] (if (= (count coll) 1) (first coll) (recur (rest coll))))","problem":19,"user":"50e8cac5e4b0ebbe794eb7ef"},{"code":"(fn take-last [coll] (first (reverse coll)))","problem":19,"user":"5320bc6ae4b09d4e7a9b54a7"},{"code":"(fn [lst]\n  (let [fst (first lst), rst (rest lst)]\n    (if (seq rst)\n      (recur rst)\n      fst)))","problem":19,"user":"526866d1e4b03e8d9a4a71a1"},{"problem":19,"code":"(fn laster [x] \n      (if(next x)\n        (recur (next x))\n        (first x)))","user":"58487683e4b089d5ab817ebc"},{"problem":19,"code":"(fn [[first & rest]] (if (not-empty rest) (recur rest) first))","user":"5818b1a6e4b0c0e9c07b83c3"},{"code":"(fn [s]\n  (if (seq (next s))\n    (recur (next s))\n    (first s)))","problem":19,"user":"53480973e4b084c2834f4a52"},{"problem":19,"code":"(fn [v]\n  (loop [r nil\n         ve v]\n    (if (empty? ve)\n      r\n      (recur (first ve) (rest ve)))))","user":"5d72ad8fe4b02e6b30c93512"},{"problem":19,"code":"(fn mylast [l]\n  (first (reverse l)))","user":"54c82b27e4b045293a27f645"},{"problem":19,"code":"(fn find-last [list] (first (reverse list)))","user":"55ef88c0e4b066087aa94536"},{"problem":19,"code":"(fn getLast [[f & r]]\n  (if r\n    (getLast r)\n    f))","user":"5ba167bfe4b0a20761a233a0"},{"problem":19,"code":"(fn [inputSeq]\n  (let [cnt (count inputSeq)]\n    (nth inputSeq (- cnt 1))\n  )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"code":"(fn a [x] (if (= 1 (.size x))\n  (first x) (a (rest x))))","problem":19,"user":"4f8b2f79e4b02e764a0a517a"},{"problem":19,"code":"(fn [x] \n   (if (next x) (recur (next x)) (first x))\n   )","user":"5a38f70be4b001c08efc0ca7"},{"problem":19,"code":"(fn mylast [sq] (if (next sq)\n                  (recur (next sq))\n                  (first sq)))","user":"5839f286e4b089d5ab817d49"},{"code":"(fn last-element [x] (if (= (count x) 1) (first x) (last-element (rest x))))","problem":19,"user":"4e75d6b6535d7a570dd295c6"},{"problem":19,"code":"(partial reduce (fn [a x] x))","user":"55805a2ee4b05c286339e0ea"},{"problem":19,"code":"(fn my-last [[head & remain]] (if (empty? remain) head (my-last remain)))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn lastElGetter [x] (first (take-last 1 x)))","problem":19,"user":"522b87ace4b0d34ee08e71c1"},{"problem":19,"code":"(fn last-element [x] \n  (if(next x)\n    (last-element (next x))\n    (first x)))","user":"56c74864e4b0ed865f9758b9"},{"problem":19,"code":"(fn posl[lista] (if (empty? (rest lista)) (first lista) (posl (rest lista))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":19,"code":"(fn\n           [coll]\n           (if (= 1 (count coll))\n             (first coll)            \n             (recur (rest coll))\n           )\n         )","user":"55f9b634e4b03cbcff9738c9"},{"problem":19,"code":"(fn[col] (loop [n (count col) c col]\n    (if (= n 1) (first c)\n                (recur (dec n) (rest c)))))","user":"5c36d110e4b0d62ef62d9f6a"},{"code":"(fn [x] (loop [col x] (if (= (count col) 1) (first col) (recur (rest col)))))","problem":19,"user":"525121ede4b0541d1855b868"},{"code":"(fn[l](let[c (- (count l) 1)] (nth l c)))","problem":19,"user":"4e889643535d8b9bb0147ca5"},{"problem":19,"code":"reduce (fn [x v] v)","user":"5424608ce4b01498b1a71ae9"},{"problem":19,"code":"(fn [coll]\n    (if-let [n (next coll)]\n      (recur n)\n      (first coll)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":19,"code":"(fn myLast [l] (if (= 1 (count l)) (first l) (myLast (rest l) )))","user":"5aad79d9e4b073f177442578"},{"code":"(fn [x](nth x (- (count x) 1)))","problem":19,"user":"4e8e21fc535d65386fec2141"},{"problem":19,"code":"(fn [args]\n  (loop [[x & tail] args]\n  \t(if (empty? tail)\n    \tx\n      (let [[_ & tail] tail] (recur tail)))))","user":"5bc8e91ee4b07a9b28b100ce"},{"code":"(fn [[h & t]] (if (empty? t) h (recur t)))","problem":19,"user":"536de1c3e4b0fc7073fd6e64"},{"problem":19,"code":"(fn end [s]\n  (if (empty? (rest s))\n    (first s)\n  (end (rest s))))","user":"5482ad36e4b0e286459a1182"},{"problem":19,"code":"(fn mylast [s] \n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"5f520098e4b0a0bc16850a6c"},{"code":"(fn [seq]\r\n  (if (next seq)\r\n    (recur (next seq))\r\n    (first seq)))","problem":19,"user":"4dd7c1da535d2dad7130b5d4"},{"code":"(fn [s] (reduce #(identity %2) s))","problem":19,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn foo [coll] (first (reverse coll)))","problem":19,"user":"507fa6dce4b089ade05efbd1"},{"code":"(fn [x]\n  (if (next x)\n    (recur (next x))\n    (first x)\n))","problem":19,"user":"4e497f2f535dc968683fc4c2"},{"code":"(fn lst [coll] (first (reverse coll)))","problem":19,"user":"525ef949e4b0cb4875a45dbc"},{"problem":19,"code":"(fn [s] (nth s (dec(count s))))","user":"58182480e4b0c0e9c07b83a7"},{"code":"reduce #(first [%2 1])","problem":19,"user":"52b0323ee4b0c58976d9acc6"},{"problem":19,"code":"(fn my-fun [x]\n  (if (= 1 (count x))\n    (first x)\n    (my-fun (rest x))))","user":"5724f41ce4b0c5bde472c106"},{"code":"(fn my-last [l]\n  (loop [l l  lst 0]\n    (if (empty? l) \n      lst\n      (recur (rest l) (first l)))))","problem":19,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn foo [[x & rest]]\n  (if rest\n    (foo rest)\n    x))","problem":19,"user":"50baa66be4b03e68e4411c94"},{"code":"(fn [x]\n  (reduce\n    (fn [x y]\n      y\n    )\n    x\n  )\n)","problem":19,"user":"4fc8f671e4b0ee37620e1840"},{"code":"#(peek(vec %))","problem":19,"user":"4db858d1535d1e037afb218c"},{"problem":19,"code":"(fn x [[h & t]] (if (empty? t) h (x t)))","user":"53a68ccce4b0ef122a8689c9"},{"problem":19,"code":"#(nth (drop (- (count %) 1) %) 0)","user":"56e0f485e4b03a7c14b85a1c"},{"problem":19,"code":"#(loop [[a & b] %]\r\n  (if (empty? b)\r\n    a\r\n    (recur b)))","user":"57b5dc52e4b0fbc9809a27b3"},{"problem":19,"code":"(fn last-element [sq]\n  (cond (empty? (rest sq)) (first sq)\n        :else (last-element (rest sq))))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"(fn mylast [x] (let [r (rest x)]\n   (if (= () r)\n        (first x)\n        (mylast r))))","problem":19,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn ultimoElemento [coll] (if (next coll) (ultimoElemento (next coll)) (first coll)))","problem":19,"user":"52f13a77e4b05e3f0be25ee9"},{"code":"(fn my-last [s] \n  (if (= 1 (count s))\n     (first s) \n     (my-last (rest s))))","problem":19,"user":"509a5ca8e4b0efbae1fbc0ab"},{"problem":19,"code":"(fn [lst]\n  (let [len (count lst)]\n    (nth lst (- len 1))))","user":"572ee822e4b0cd1946bd0f91"},{"problem":19,"code":"#(nth % ((comp dec count) %))","user":"549188f6e4b0b312c081ff3a"},{"code":"(fn [x] (if (next x) (recur (next x)) (first x) ))","problem":19,"user":"53584276e4b04ce2eb3ed28c"},{"code":"(fn[el] (nth el (dec (count el))))","problem":19,"user":"50e078f4e4b061dbdced7232"},{"code":"(fn [x] \n  (nth x (dec(count x))))","problem":19,"user":"4e920f44535dbda64a6f6afd"},{"problem":19,"code":"(fn ult [lst] (first (reverse lst)))","user":"587cac15e4b01531a375eb23"},{"problem":19,"code":";(fn [aseq] (first (filter #(= (rest %) ()) aseq)))\n(fn mylast [aseq] (let [rseq (rest aseq)] (if (= '() rseq) (first aseq) (mylast rseq))))","user":"5fba387ae4b03f550f44822f"},{"code":"(fn [[a & r]]\n  (if (not (seq r)) a (recur r)))","problem":19,"user":"4ef0a38e535dced4c769f20b"},{"problem":19,"code":"(fn [s]\n        (if (next s)\n          (recur (rest s))\n          (first s)))","user":"5913375de4b0163c97b36efe"},{"problem":19,"code":"(fn my-last [coll]\n  (nth coll (- (count coll) 1)))","user":"6020365ae4b0bf4ca6b10960"},{"code":"(fn [ks]\n  (if (= 1 (count ks))\n    (first ks)\n    (recur (rest ks))\n  )\n)","problem":19,"user":"531cd41ee4b08068f379eda9"},{"problem":19,"code":"(fn [[n & m]]\n  (if m\n    (recur m)\n    n))","user":"57a3ef74e4b0c3d858beb914"},{"problem":19,"code":"(fn last-fun [[e & rst]] (if (empty? rst) e (last-fun rst)))","user":"56a80867e4b07966d5a8a069"},{"problem":19,"code":"(fn my-last [[x & xs]] \n  (if (nil? xs)\n    x\n    (recur xs)))","user":"5cab33e7e4b048ec896c5c48"},{"problem":19,"code":"(fn hey [x] (first (reverse x)))","user":"60565c80e4b069ae89ce6ad6"},{"code":"(fn [lst]\n  (reduce (fn [a b] b) nil lst))","problem":19,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"#(let [x %] (nth x (- (count x) 1)))","problem":19,"user":"4ec6cc0e535d6d7199dd36d6"},{"code":"#( first( reverse %))","problem":19,"user":"51f81925e4b09be9c177e526"},{"problem":19,"code":"(fn [a-seq]\n  (let [v (vec a-seq)\n        c (- (count v) 1)]\n    (v c)))","user":"576aea4fe4b0a07e8fc18126"},{"problem":19,"code":"(fn [L] (reduce #(identity %2) 0 L))","user":"556238bce4b0c656e3ff17d3"},{"problem":19,"code":"(fn [coll] (peek (reverse coll)))","user":"5535442ee4b09218d5f44fad"},{"problem":19,"code":"(fn my-last [[f & r]]\n  (if (= (count r) 0) \n    f  \n    (my-last r)))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn lst [[fst & rst]] (if (seq? rst) (lst rst) fst) )","problem":19,"user":"4f803577e4b033992c121bf0"},{"code":"(fn [ns]\n  (if (= 1 (count ns))\n    (first ns)\n    (recur (rest ns))))","problem":19,"user":"4fadbc3fe4b081705acca23f"},{"problem":19,"code":"(fn my-last[s] (first (reverse s)))","user":"5ff669b4e4b06df49cee1496"},{"problem":19,"code":"(fn[args](first(reverse args)))","user":"5939b9f9e4b069cdc2982b3d"},{"problem":19,"code":"(let [sum (fn [x] (reduce + x)) map-to-ones #(map (fn [x] 1) %) length (fn [v] (sum (map-to-ones v))) ]\n  (fn [v] (nth v (- (length v) 1)))\n  )","user":"5f5b624de4b05ea7b9adc42f"},{"code":"(fn miLast [sett] (if (= (count sett) 1) (first sett) (miLast (drop 1 sett))))","problem":19,"user":"52ea19ace4b09f7907dd14b7"},{"problem":19,"code":"(fn getlast [myset]\n  (nth myset (- (count  myset ) 1 ))\n  )","user":"54deab4ce4b024c67c0cf7a5"},{"problem":19,"code":"#(nth (reverse %1) 0)","user":"561c6540e4b064ca9f4b1698"},{"code":"(fn [lst] (first (take 1 \n    (for [i (iterate #(rest %) lst) :when (= 1 (count i))] (first i)))))","problem":19,"user":"4fdb02aae4b05e33b9224f56"},{"problem":19,"code":"(fn [s]\n  (reduce (fn [res e] e) s))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn [a]\n  (first (reverse a)))","problem":19,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn tail [l] (first (reverse l)))","problem":19,"user":"4fea09b2e4b0547ebccb2485"},{"problem":19,"code":"(fn thelast\n  [xs]\n  (cond\n   \t(= (count xs) 0) nil\n    (= (count xs) 1) (first xs)\n    :else (thelast (rest xs))))","user":"59a90b2ae4b0bcf4e9a43aff"},{"problem":19,"code":"(fn ultimo [lst]\n  (if (> (count lst) 1)\n    (ultimo (rest lst))\n    (first lst)))","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn [list]  (nth list (-(.size list) 1)))","problem":19,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":19,"code":"(fn [c] \n  (reduce \n   (fn [x y] y) \n  c)\n)","user":"57dfe173e4b0bd073c20246b"},{"code":"(fn rev ([x] (first(reverse x))))","problem":19,"user":"50e282fde4b0ae09a0e7de7c"},{"code":"(fn [[f & r]] (if r (recur r) f))","problem":19,"user":"4f601367e4b0defedf855fa2"},{"code":"(fn recLast [x] \n  (if (> (count x) 1)\n    (recLast (rest x))\n    (first x)))","problem":19,"user":"4f19b55b535d64f603146469"},{"problem":19,"code":"(fn get-last [ls]\n  (loop [xs ls]\n    (if (empty? (rest xs))\n      (first xs)\n      (recur (rest xs)))))","user":"5689fd03e4b0dcc4269f4088"},{"problem":19,"code":"(fn [coll] (reduce (fn [m1 m2] m2) coll))","user":"58280f02e4b051871117bf2e"},{"problem":19,"code":"(fn[n] (nth n (- (count n) 1)))","user":"591d57aee4b09b4ee5954c16"},{"code":"#(->% vec peek)","problem":19,"user":"4e360757535deb9a81d77f32"},{"code":"(fn bla [xs] (if (seq (rest xs)) (bla (rest xs)) (first xs)))","problem":19,"user":"52e4f06be4b09f7907dd1456"},{"problem":19,"code":"(fn [my-seq]\n  (loop [x my-seq\n         rtn-ele nil]\n    (if (= 0 (count x))\n        rtn-ele\n      (recur (rest x) (first x))\n      )\n    )\n  )","user":"5b97c521e4b0c0b3ffbd4a9a"},{"code":"(fn [x]\n  \"Returns last element of sequence\"\n  (peek (vec x)))","problem":19,"user":"4f0324d2535dcb61093f6a69"},{"code":"(fn [coll]\n  (if-let [rest (next coll)]\n    (recur rest)\n    (first coll)))","problem":19,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn f1 [x] (if (= (rest x) ()) (first x) (f1 (rest x))))","problem":19,"user":"4ed6ac40535d10e5ff6f52e4"},{"problem":19,"code":"(fn last_elem [x](first (reverse x)))","user":"5714c718e4b07c98581c3ac7"},{"problem":19,"code":"(fn s-last [s]\n  (if (= (count s) 1)\n    (first s)\n    (s-last (rest s))\n    )\n  )","user":"53d2afede4b00fb29b221321"},{"problem":19,"code":"(fn lst [l]\n  (if (= (rest l) [])\n    (first l)\n    (lst (rest l))))","user":"5638f61ce4b0bfe05bf117ed"},{"code":"(fn [x]\n  (loop [t x]\n    (if (= nil (next t))\n        (first t)\n        (recur (next t)))))","problem":19,"user":"5012614ee4b02a085b99dc79"},{"problem":19,"code":"(fn [col]\n  (nth col (dec (count col))))","user":"5ce3e239e4b0a17bb84e2b46"},{"code":"(fn last-elem [s]\n  (if (empty? (rest s)) \n    (first s) \n    (recur (rest s))))","problem":19,"user":"521e0b80e4b0dd19981ad069"},{"problem":19,"code":"(fn scan [col] ( if (empty? (rest col) ) (first col) (scan (rest col) )) )","user":"54ac5ad7e4b09f271ff37cd6"},{"problem":19,"code":"(fn my-last [[h & r]]\n   (if (empty? r)\n     h\n     (my-last r)))","user":"50a3ad0ee4b0ceace084d493"},{"problem":19,"code":"(fn [lst]\n  (cond\n   \t(empty? lst) nil\n   \t(= 1 (count lst)) (first lst)\n   \t:default (recur (rest lst))))","user":"5bb905dce4b0a20761a235c7"},{"problem":19,"code":"(fn  [coll] (first (reduce conj ()  coll)))","user":"567d18c9e4b05957ce8c61c4"},{"problem":19,"code":"(fn [[coll & rest]]\n        (if rest\n          (recur rest)\n          coll))","user":"559d3d22e4b0ec2b359424da"},{"code":"(fn tail [xs] (\n  if (= 1 (count xs))\n\t\t(first xs)\n\t\t(tail (rest xs))\n))","problem":19,"user":"4feaa579e4b0140c20fb9c0b"},{"code":"(fn mylast [xs]\n  (if (= nil (next xs))\n    (first xs)\n    (mylast (next xs))))","problem":19,"user":"522b922ee4b0d34ee08e71c3"},{"problem":19,"code":"(fn [coll] (if (nil? (next coll)) (nth coll 0) (recur (rest coll))))","user":"5e1ab7ede4b0dc9594008519"},{"code":"(fn lste [lst] (if (empty? (rest lst)) (first lst) (lste (rest lst))))","problem":19,"user":"524b1bf7e4b09eba1c0223c3"},{"code":"(fn [x] \n     (first (reverse x)))","problem":19,"user":"538d73c1e4b0b51d73faae6f"},{"code":"#(.get % (- (.size %) 1))","problem":19,"user":"4e8b98fc535d65386fec2124"},{"problem":19,"code":"(fn lst[s] (if (empty? (rest s)) (first s) (lst (rest s))))","user":"57fc0719e4b0d3187e900987"},{"code":"reduce (fn [acc e] e)","problem":19,"user":"507fe6fee4b089ade05efbd6"},{"code":";;reduce #(-> %2)\n(fn [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4ebbc1f6535dfed6da9c6d72"},{"problem":19,"code":"(fn mylast [s] (first (reverse s) ))","user":"606ff56ce4b069485764de21"},{"code":"(fn not-last [s] ((vec s) (- (count s) 1)))","problem":19,"user":"4ec5569f535d6d7199dd3695"},{"problem":19,"code":"(fn get-last [data]\n  (first (reverse data)))","user":"5f2ab452e4b033932238a656"},{"problem":19,"code":"(fn r [l]\n  (cond \n   (empty? (rest l)) (first l)\n   :else (recur (rest l))\n   ))","user":"56df6351e4b0ca2494a095f3"},{"code":"(fn [x] (let [lst (- (count x) 1)] (nth x lst)))","problem":19,"user":"510b877be4b078ea71921105"},{"code":"#(first(reverse %))","problem":19,"user":"4e6dd047535d5021c1a895f2"},{"code":"(fn[x] (nth x (dec (count x))))","problem":19,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":19,"code":"(fn [name] (nth name (- (count name) 1)))","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"#(loop [foo %1]\n    (if (= (next foo) nil)\n      (first foo)\n      (recur (next foo))\n    )\n  )","problem":19,"user":"4fa7de4ce4b081705acca1c9"},{"problem":19,"code":"(fn [seqz] (first (drop (-(count seqz) 1) seqz)))","user":"5414b7c4e4b01498b1a719ed"},{"problem":19,"code":"(fn final [in] (first (reverse in)))","user":"5b107263e4b0cc2b61a3be22"},{"problem":19,"code":"(fn [s] \n   (first (drop (- (count s) 1)\n         s)))","user":"5855aec8e4b0f14aab7c86df"},{"problem":19,"code":"(fn [nlist] (first (reverse nlist)))","user":"5d125d63e4b02c15ef021999"},{"code":"(fn ll [x] (if (next x) (recur (next x))(first x)))","problem":19,"user":"4f625200e4b0defedf855fcf"},{"code":"(fn last-val [x] (nth x (- (count x) 1)))","problem":19,"user":"50baa77ae4b03e68e4411c95"},{"code":"(fn [x]\n  (let [f (first x)\n        r (rest x)]\n    (if (empty? r)\n      f\n      (recur r))))","problem":19,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"(fn [xs]\n  (if (nil? (next xs))\n    (first xs)\n    (recur (next xs))))","problem":19,"user":"4f173f8a535d64f603146453"},{"code":"(fn l [c]\n  \t(if (empty? (rest c))\n  \t\t(first c)\n  \t\t(l (rest c))))","problem":19,"user":"51efdbbee4b0249c592fbdec"},{"problem":19,"code":"(fn [y] (first(reverse y)))","user":"5d6fae1ee4b04d129b00f2d4"},{"problem":19,"code":"(fn [s]\n  (loop [s s]\n    (if (= (next s) nil)\n      (first s)\n      (recur (rest s)))))","user":"56047160e4b0c80df0ca265d"},{"problem":19,"code":"(fn [[f & r]] (if (not (seq r))\n              f\n              (recur r)))","user":"51a7ab93e4b0da5f497bde87"},{"code":"(fn last-elem [s]\n  (if (empty? (rest s))\n    (first s)\n    (last-elem (rest s))))","problem":19,"user":"4f05fda6535dcb61093f6c03"},{"problem":19,"code":"(fn [x]\n  (let [a (first x)\n        rst (next x)]\n    (if (not rst)\n      a\n      (recur rst))))","user":"5430bc79e4b0dad94371f2dd"},{"problem":19,"code":"(fn [x] \n  (first (reverse x) ))","user":"577e42dee4b0c8d87281f6e4"},{"problem":19,"code":"(partial reduce (fn [_ i] i))","user":"4f445ed9e4b0d7d3c9f3fd3b"},{"problem":19,"code":"(fn [x] (nth  x (dec (count x))))","user":"54b64fbbe4b05787c3b163b8"},{"problem":19,"code":"(fn [seqz] (nth seqz (- (count seqz) 1)))","user":"59022c89e4b0438e51c2d052"},{"code":"#(.get %(dec (count %)))","problem":19,"user":"50b4a37ee4b0c464d223d1bb"},{"problem":19,"code":"(fn [y]\n  (loop [remain y last_elem (first y)]\n    (if (empty? remain) last_elem (recur (rest remain) (first remain)) )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":19,"code":"(fn my-last\n  [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (recur (rest seq))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn my-last [l]\n  (if \n    (empty? (rest l)) (first l)\n    (my-last (rest l))))","problem":19,"user":"4f8c50f9e4b02e764a0a5195"},{"problem":19,"code":"#(->>\n  (count %)\n  (dec)\n  (nth %))","user":"5b85221ce4b047b03b2037c8"},{"code":"(fn [s] (nth s (count (rest s))))","problem":19,"user":"52af66d2e4b0c58976d9acba"},{"problem":19,"code":"(fn last-2 [coll]\n   (if (empty? (rest coll))\n     (first coll)\n     (last-2 (rest coll))))","user":"5ef33c01e4b07c55ae4a0539"},{"problem":19,"code":"(fn mylast [x] \n  (let [[a1 a2] [(first x) (rest x)]]\n    (if (= '() a2) a1\n      (mylast a2))))","user":"58ae4cb4e4b0ebc645576cb9"},{"problem":19,"code":"(fn [x] (nth x(dec (count x))))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn [s] (if (not (next s)) (first s) (recur (next s))))","problem":19,"user":"50b65f53e4b0a86f8358ca6e"},{"code":"(fn lst [xs]\n\t(if (empty? (rest xs))\n\t\t(first xs)\n      \t(lst (rest xs))))","problem":19,"user":"50e317a9e4b056122d085d01"},{"problem":19,"code":"(fn\n  [x]\n  (let [length (count x)]\n    (nth x (- length 1))))","user":"55a7e096e4b0988bba2ad934"},{"problem":19,"code":"(fn [i]\n  (first (reverse i)))","user":"554bc026e4b0a04f79299597"},{"problem":19,"code":"(fn mylast \n  ([] nil)\n  ([s] (if (= '() (rest s)) (first s) (mylast (rest s))))\n  )","user":"58f64f71e4b0438e51c2cef0"},{"code":"(fn [x]\n  (let [y (rest x)]\n    (if (empty? y)\n      (first x)\n      (recur y))))","problem":19,"user":"4e86327b535db62dc21a62f6"},{"problem":19,"code":"(fn [l] (if (empty? (rest l))\n          (first l)\n          (recur (rest l))))","user":"58a47197e4b01a0c0b2328f9"},{"code":"(fn [l] (let [n (count l)] (nth l (- n 1))))","problem":19,"user":"5267f871e4b03e8d9a4a7191"},{"code":"(fn lst\n  [[x & rest]]\n  (if (= 0 (count rest))\n    x\n    (lst rest)))","problem":19,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":19,"code":"(fn [[a & r]]\n  (if (empty? r) a (recur r)))","user":"554680cbe4b0a04f7929953e"},{"problem":19,"code":"(fn [c] (first (drop (- (count c) 1) c)))","user":"576bec8ee4b0a07e8fc18142"},{"problem":19,"code":"#( nth % (- (count %) 1 ) )","user":"56098003e4b0053d1b86c7e0"},{"code":"(fn [x]\n         (cond \n           (= (count x) 1) (first x) \n           :else (recur (rest x))))","problem":19,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [list]\n  (cond\n    (= [] (rest list)) (first list)\n    :else (recur (rest list))))","problem":19,"user":"4fb18b0be4b081705acca27c"},{"problem":19,"code":"reduce (fn [ a b ] b)","user":"5543553fe4b0a04f79299523"},{"problem":19,"code":"(fn [seq]\n  (if (next seq) (recur (next seq)) (first seq))\n)","user":"53c4254ce4b00fb29b221283"},{"code":"(fn [[f & rest]] (if (not-empty rest) (recur rest) f))","problem":19,"user":"4fc66c43e4b0ee37620e1812"},{"problem":19,"code":"(partial reduce (fn [acc x] x))","user":"5fe0d4d4e4b05ac5b16ea164"},{"problem":19,"code":"(fn [seq] (first (drop (- (count seq) 1) seq)))","user":"53b952eee4b047364c0444e6"},{"problem":19,"code":"(fn get-last-elem\n  [col]\n  (if (= 1 (count col))\n    (first col)\n    (get-last-elem (rest col))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn[x](first (seq (reverse x))))","problem":19,"user":"5009e9f1e4b03d00572d2d6f"},{"code":"#(if \r\n       (= (count %) 1)\r\n       (first %)\r\n       (recur (rest %)))","problem":19,"user":"4fb50599e4b081705acca2b7"},{"problem":19,"code":"(fn [coll]\n  (loop [coll coll]\n    (if (next coll)\n      (recur (next coll))\n      (first coll)\n      )\n    )\n  )","user":"553527ede4b09218d5f44fab"},{"problem":19,"code":"#(reduce (fn [a b] b) %)\n\n;; (fn [sequence] ((comp first reverse) sequence))\n\n;; #((comp first reverse) %)\n\n;;(fn [sequence]\n;;  (nth sequence (dec (count sequence))))\n\n;; #(nth % (dec (count %)))\n;; or #(comp first reverse)","user":"57f3c14ae4b0511f1d294e14"},{"code":"(fn lastof [coll](first ( reverse coll)))","problem":19,"user":"514daf79e4b019235f6c058b"},{"problem":19,"code":"(fn [input]\n  (first \n   (reverse input)))","user":"54ce25abe4b057c6fda3a2a9"},{"code":"(fn [x](first (reverse x)))","problem":19,"user":"50e13ef3e4b084616e11c669"},{"code":"(fn [s] (if (next s)\n(recur (next s))\n(first s)))","problem":19,"user":"51dc431ee4b09c47a74ce108"},{"problem":19,"code":"(fn [℅] (nth ℅ (dec (count ℅))))","user":"5846e925e4b089d5ab817e9d"},{"code":"(fn [seq]\r\n  (first (reverse seq)))","problem":19,"user":"4e1123c7535d04ed9115e7c4"},{"problem":19,"code":"(fn foo [x]\n  (cond\n   (= (second x) nil) (first x)\n   :else (foo (rest x))))","user":"5760715de4b08062f99a4e96"},{"problem":19,"code":"(fn [[x & r]] (if (seq r) (recur r) x))","user":"54c23252e4b045293a27f5fc"},{"problem":19,"code":"(fn [x] (nth x (dec (count x))))\n;; (fn [x] (first (reverse x))","user":"53da3691e4b0e771c3025493"},{"code":"#( if (next %) (recur (next%)) (first %))","problem":19,"user":"4e5352b9535d8a8b8723a271"},{"code":"(fn [xs]\n  (if (next xs) (recur (next xs))\n\t\t\t\t  (first xs)))","problem":19,"user":"500ec491e4b00fff93030f9e"},{"code":"#(\n  if( empty? (rest %))\n  \t(first %)\n  \t(recur (rest %))\n  )","problem":19,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn [xs] \n  (cond \n  \t(= (rest xs) []) (first xs) \n   \t:else (recur (rest xs))))","problem":19,"user":"50e647cde4b09e4d78444226"},{"problem":19,"code":"(fn bla [x] (if (empty? (rest x)) (first x) (bla (rest x))))","user":"554b8474e4b0a04f79299588"},{"problem":19,"code":"#(-> % reverse first)\n\n;(comp first reverse)\n\n;#(-> % reverse first)\n\n;(time (= (#(-> % reverse first) [1 2 3 4 5]) 5))\n;\"Elapsed time: 3.145167 msecs\"\n\n;reduce #(-> %2)\n;(time (= (reduce #(-> %2) [1 2 3 4 5]) 5))\n;\"Elapsed time: 3.039991 msecs\"\n\n\n;#(nth % (dec (count %)))\n;(time (= (#(nth % (dec (count %))) [1 2 3 4 5]) 5))\n;\"Elapsed time: 2.9313 msecs\"","user":"572830e6e4b0c5bde472c152"},{"problem":19,"code":"(fn [s]\n  (-> s \n      (reverse)\n      (first)))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"code":"(fn [coll]\n  (if (<= (count coll) 1)\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"4efb5508535dced4c769f276"},{"problem":19,"code":"(fn my-last\n  [col]\n  (if (vector? col)\n    (peek col)\n    (if (empty? (rest col))\n      (first col)\n      (my-last (rest col))\n      )))","user":"589e704ae4b02bd94d917e5e"},{"problem":19,"code":"#(loop [x %]\n            (if (> (count x) 1)\n              (recur (rest x))\n              (first x)\n              )\n            )","user":"5e259d05e4b05b4b01516169"},{"code":"(fn f [col]\n  (if (next col)\n    (f (rest col))\n    (first col)))","problem":19,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [x]\n  (loop [l x]\n    (if (= (count l) 1)\n      (first l)\n      (recur (rest l)))))","problem":19,"user":"52b9c62ce4b07a9af57922c3"},{"code":"(fn getLast [x] (if (= (rest x) ()) (first x) (getLast (rest x))))","problem":19,"user":"52c42f6be4b0c2d177d620d1"},{"code":"(fn [_] (nth _ (dec (count _))))","problem":19,"user":"53402a19e4b085b17e897da5"},{"problem":19,"code":"(fn my-last\n         [x]\n         (if (= (count x) 1)\n           (first x)\n           (recur (rest x))))","user":"5a0c3546e4b04bbd27e6d9a5"},{"code":";(comp first reverse)\n;(fn [x] (-> x (reverse) (first)))\n(fn [x] (first (reverse x)))","problem":19,"user":"52f3568fe4b05e3f0be25f0e"},{"problem":19,"code":"reduce #(and %1 %2)","user":"5658eaa0e4b00d3155796115"},{"problem":19,"code":"#(let [n (- (count %) 1)] (nth % n))","user":"53940b5ee4b0b51d73faaec4"},{"code":"#(loop [l %1] (if (= 1 (count l)) (first l) (recur (rest l))))","problem":19,"user":"4f5edeb0e4b0030a34fb2b57"},{"problem":19,"code":"reduce (fn[_ b] b)","user":"5a71c89ee4b0512ff01cda93"},{"problem":19,"code":"(fn last_ [s] (first (reverse s)))","user":"5eea5c98e4b029a2061bbebf"},{"code":"#(-> % (reverse)(first))","problem":19,"user":"5303c543e4b0d8b024fd3749"},{"problem":19,"code":"(fn [coll] (loop [[x & xs] coll]\n             (cond (nil? x) nil\n                   (empty? xs) x\n                   :else (recur xs))))","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [coll](first(reverse coll)))","problem":19,"user":"52c4fe42e4b0c2d177d620e9"},{"problem":19,"code":"(fn [xs] \n  (first (reverse xs)))","user":"55aa8276e4b0988bba2ad94e"},{"problem":19,"code":"(fn __ [x] (if (= (count x) 1) (first x) (__ (rest x))))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn [x] (nth  x (- (count x) 1)))","problem":19,"user":"521177cee4b07aea8afc4f6e"},{"problem":19,"code":"(fn rest-loop [n]\n(loop [array n]\n      (if (= (count array ) 1)\n        (first array)\n        (recur (rest array) ))))","user":"5bc4bd1ae4b07a9b28b1005f"},{"code":"(fn [s]\n  (if (= 1 (count s))\n    (first s)\n    (recur (next s))))","problem":19,"user":"50d4909ce4b09cc622d65a6c"},{"problem":19,"code":"(fn [x] (cond\n         (= 0 (count x)) nil\n         (= 1 (count x)) (nth x 0)\n         :else           (recur (rest x))))","user":"54e79094e4b024c67c0cf818"},{"problem":19,"code":"(fn flast [x]\n  (if (empty? (rest x))\n    (first x)\n    (flast (rest x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":19,"code":"(fn returns-last [s] \n  \t(if (empty? \n         (next s))\n      \t(first s)\n        (returns-last (next s))))","user":"580d06b6e4b0849f6811b72d"},{"problem":19,"code":"(fn lst [sq]\n  (if (seq (rest sq))\n    (lst (rest sq))\n    (first sq)))","user":"5751eb97e4b02ea11479928e"},{"code":"(fn rev [x] (first (reverse x)))","problem":19,"user":"502ea7bce4b078f26332e748"},{"code":"(fn [items] (if (= (count items) 1) (first items) (recur (rest items))))","problem":19,"user":"507603bde4b0a894bb95bf3a"},{"code":"(fn findfirst [arr]\n  (first (reverse arr)))","problem":19,"user":"53a30c19e4b0f1fc74538832"},{"code":"(fn [coll]\n  (nth coll (- (count coll) 1)))","problem":19,"user":"4fab336be4b081705acca216"},{"problem":19,"code":"(fn laste [x] (first (reverse x)))","user":"53dadf1de4b0e771c30254ad"},{"problem":19,"code":"(fn fx [x] (first (reverse x)))","user":"555b8703e4b0b056612e2240"},{"code":"(fn lst [s] (\n             cond (= nil (second s)) (first s)\n             :default (lst (next s))\n             )\n  )","problem":19,"user":"4fb03cf4e4b081705acca262"},{"problem":19,"code":"(fn \n  [items] \n  (let [new-items (rest items)]\n    (if (empty? new-items)\n      (first items)\n      (recur new-items))))","user":"5bc4f266e4b07a9b28b10066"},{"problem":19,"code":"#(.get (reverse %) 0)","user":"53be873ee4b0d9a98559a6e1"},{"code":"(fn [x] (if (nil? (next x))  (first x) (recur (next x))))","problem":19,"user":"4e699b20535d8ccf87e9fe9d"},{"problem":19,"code":";#(first(reverse %))\n#(first(take-last 1 %))","user":"5d965c73e4b0d3f9b434ad33"},{"problem":19,"code":"(fn [x] (.get x(- (count x) 1)))","user":"562a1aa0e4b00e49c7cb4815"},{"problem":19,"code":"(fn aa[s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"57996e29e4b05b1deef9adc1"},{"code":"(fn [x] (reduce #(comp %2) x))","problem":19,"user":"51364acfe4b04ac1f358dd51"},{"problem":19,"code":"(fn [list]\n  (-> list (reverse) (first)))","user":"57d8d925e4b0bd073c2023f0"},{"code":"(fn lst? [x] (if (= '() (rest x))\n  (first x)\n  (lst? (rest x))\n    ))","problem":19,"user":"50a00725e4b08df8156e9e46"},{"problem":19,"code":"(fn [lst]\n  (if (next lst)\n    (recur (rest lst))\n    (first lst)))","user":"5669382ee4b04acd4f672dfd"},{"problem":19,"code":"(fn lst [[x & xs]] (if (nil? xs) x (lst xs)))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":19,"code":"(fn [s] (\n         first (reverse s)\n         ))","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn foo [x] (if (> (count x) 1) (foo (rest x)) (first x)))","problem":19,"user":"504e67b3e4b0f6ff3350c4ad"},{"problem":19,"code":"apply (fn get-last\n         [x & xs]\n         (if (empty? xs)\n           x\n           (apply get-last xs)))","user":"5dc64aafe4b02f9375f4e1c2"},{"problem":19,"code":"(fn Last [col] (first (reverse col)))","user":"58a35b1ee4b02bd94d917ef3"},{"problem":19,"code":"(fn [s] \n  (if (next s)\n    (recur (next s))\n    (first s))\n  )","user":"5dcb7209e4b02b31cc3da3b9"},{"code":"#(get (reduce conj [] %) (- (count %) 1))","problem":19,"user":"4fc5e24ee4b0ee37620e1801"},{"code":"(fn [n] (.get n (- (count n) 1)))","problem":19,"user":"51cd0dc6e4b02254fc79487d"},{"problem":19,"code":"(fn [[x & xs]] \n  (if (nil? xs) x (recur xs)))","user":"5313b4b6e4b08068f379ed0c"},{"code":"(fn [s]\n  (loop [[head & tail] s]\n    (if (nil? tail)\n      head\n      (recur tail))))","problem":19,"user":"52b15bf2e4b0c58976d9acdd"},{"problem":19,"code":"(fn [l] (first (take-last 1 (seq l))))","user":"546c1375e4b00cfc9eacc173"},{"problem":19,"code":"(fn [list]\n  (reduce \n   (fn \n     [accum elem] \n     elem) \n   (first list) \n   list))","user":"549aa638e4b0f3d1d8e70f70"},{"problem":19,"code":"(fn mylast [of-what]\n  (if (empty? (rest of-what)) \n    (first of-what)\n    (mylast (rest of-what))\n   )\n)","user":"5c71de4ce4b0fca0c162279e"},{"code":"(fn [x](first (take-last 1 x)))","problem":19,"user":"4ff10e08e4b0678c553fc32b"},{"code":"(fn lst [s]\n        (if (= (rest s) ())\n          (first s)\n          (recur (rest s))))","problem":19,"user":"5008b415e4b0144d4f561e3d"},{"problem":19,"code":"(fn the-last [x] (first (reverse x)))\n;;fn the-last = nome da função\n;; [x] variável\n;;(first (reverse x))) = irá reveter a ordem e pegará o primeiro elemento","user":"56314f6ee4b0bfe05bf11791"},{"code":"(fn [x]\n  (if (empty? (rest x)) (first x) (recur (rest x))))","problem":19,"user":"516b8837e4b005fd0cdf85c1"},{"problem":19,"code":"(fn [x] (if-not (seq? (next x)) (first x) (recur (next x))))","user":"5a04f2ebe4b01bb0ae8afdaa"},{"problem":19,"code":"#(first (drop (if (>(count %) 1)(- (count %) 1) 1) %))","user":"5966ac88e4b069c0a1a197ac"},{"problem":19,"code":"#(first (subvec (into [] %) (- (count %) 1)))","user":"59258aa7e4b072a2710fce74"},{"problem":19,"code":"(fn\n  [seq]\n  (if (next seq)\n    (recur (next seq))\n    (first seq)))","user":"55e2135be4b050e68259b42c"},{"code":"(partial reduce (fn [x, y] y))","problem":19,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [p] (first (reverse p)))","problem":19,"user":"52f59d4be4b09b582c12c9c6"},{"code":"(fn [x] (first(take-last 1 x)))","problem":19,"user":"50054b5ce4b0678c553fc45f"},{"code":"#(loop [r (next %1) f (first %1)] (if r (recur (next r) (first r)) f))","problem":19,"user":"4f3b5219e4b0e243712b1f2a"},{"problem":19,"code":"(fn\n\t[col]\n\t(loop [c col]\n\t\t(if (first (rest c))\n\t\t\t(recur (rest c))\n\t\t\t(first c))))","user":"590620e1e4b047aa04b1992c"},{"code":"#(-> % vec peek)","problem":19,"user":"4e113a81535d04ed9115e7c5"},{"code":"(fn [s] (let [[x & rest] s] (if rest (recur rest) x)))","problem":19,"user":"4db0ef131254ad5b4805fa64"},{"problem":19,"code":"reduce #(and % %2)","user":"57689d73e4b0a07e8fc180d7"},{"code":"(fn foo [a] (if (second a) (foo (rest a)) (first a)))","problem":19,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":19,"code":"(fn last-element [li] (nth li (- (count li) 1)))","user":"56f57481e4b046a417f92072"},{"problem":19,"code":"(fn foo[x] (cond (> (count x) 1) (foo(rest x)) \n                :else (first x)\n))","user":"5eb94f6fe4b00a66d4a9524b"},{"code":"(fn [coll] (nth coll (- (count coll) 1)))","problem":19,"user":"4e4bf20e535dc968683fc4d9"},{"problem":19,"code":"#(\n  if (next %)\n    (recur (next %))\n    (first %))","user":"59b94a04e4b0a024fb6ae3c9"},{"problem":19,"code":"#(if     (<= (count %) 1)    (first %)     (recur (rest %)))","user":"5831846ae4b051871117c02c"},{"problem":19,"code":"(fn [ls] (first ( reverse ls )))","user":"5953949be4b066ee0a44aeea"},{"code":"#(let [l (count %)] (nth % (- l 1)))","problem":19,"user":"5005b57de4b0678c553fc46a"},{"code":"(fn [seq]\n  (let [len (count seq)]\n    (nth seq (dec len))))","problem":19,"user":"51b3231ae4b026427ecf067d"},{"code":"(fn las [x] (nth x (- (count x) 1)))","problem":19,"user":"4ec5754b535d6d7199dd36a2"},{"problem":19,"code":"#(if (vector? %) (peek %) (nth % 2))","user":"5deed0c6e4b093ff717275a3"},{"problem":19,"code":"(fn mylast [sequ] \n  (loop [[item & remain] sequ] \n    (if (empty? remain) \n      item \n      (recur (rest remain)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":19,"code":"(fn [a](nth a (- (count a) 1)))","user":"55f01316e4b06e875b46ce1a"},{"problem":19,"code":"(fn [li]\n  (nth li (- (.size li) 1)))","user":"57082299e4b0b0fb43fd0698"},{"problem":19,"code":"(fn last_element1 [x]\n  (loop [coll x]\n    (if (= 1 (count coll))\n      (first coll)\n      (recur (next coll)))))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn [x]\r\n  (if-not (next x)\r\n    (first x)\r\n    (recur (next x))))","problem":19,"user":"4e21c139535d04ed9115e819"},{"code":"(fn [x] \n  (let [idx (count x)]\n    (nth x (dec idx))))","problem":19,"user":"513f1f18e4b051389b345b3d"},{"problem":19,"code":"#(->> %  (reduce (fn [a b] b)))","user":"55e6c3f5e4b050e68259b48c"},{"problem":19,"code":"(fn my-last [col] (let [n (rest col)] (if (seq n) (my-last n) (first col))))","user":"5709eacde4b0b0fb43fd06b3"},{"problem":19,"code":"reduce (fn [a n] n)","user":"5abd4886e4b073f177442710"},{"code":"(fn [l] (if (= (count l) 1) (first l) (recur (rest l))))","problem":19,"user":"533971eee4b0e30313ee6ca8"},{"problem":19,"code":"(fn f [[x & xs]] (if (seq xs) (f xs) x))","user":"554b7958e4b0a04f79299586"},{"code":"(fn [vec]\n   (let [final (dec (count vec))]\n      (nth vec final)))","problem":19,"user":"4ed19e90535d44c135fd68d0"},{"problem":19,"code":"(fn [s]\n      (if (next s)\n        (recur (next s))\n        (first s)))","user":"5703cbbee4b08d47c97781fb"},{"code":"#(first (reverse %1))","problem":19,"user":"4df11fb2535d08e6dec9fe1a"},{"code":"(fn [x] (if (= (rest x) ()) (first x) (recur (rest x))))","problem":19,"user":"539c9d7ee4b0b51d73faaf2d"},{"problem":19,"code":"(fn [x] (get (apply vector x) (- (count x) 1)))","user":"5a0a1748e4b0eab8c0448937"},{"problem":19,"code":";;#(first (reverse %)) \n(comp first reverse)\n;;#(-> % reverse first)","user":"5586cbeae4b059ccff29b1d8"},{"code":"(fn [x]\n  (if (= '() (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4f033492535dcb61093f6a79"},{"problem":19,"code":";#(first (reverse %))\n#(-> % reverse first)","user":"54dce62be4b024c67c0cf78b"},{"problem":19,"code":"(fn [a]\n      (if (> (count a) 1)\n        (recur (rest a))\n        (first a)\n      )\n    )","user":"561bf12ce4b064ca9f4b168e"},{"problem":19,"code":"(fn [ls]\n  (if (= (count ls) 1)\n    (first ls)\n    (recur (rest ls))))","user":"5529a42ee4b0ffed3738f94e"},{"problem":19,"code":"(fn la [x] \n  (cond (= (seq (rest x)) nil) \n        (first x) \n   :else\n        (la (rest x))\n  )\n)","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [coll] \r\n  (loop [h (first coll) t (rest coll)] \r\n    (if (empty? t) \r\n      h \r\n      (recur (first t) (rest t)))))","problem":19,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn foo [x] (if (next x) (foo (rest x)) (first x)))","problem":19,"user":"4e8c4823535d65386fec2128"},{"problem":19,"code":"(fn [alist]\n  (let [a (rest alist)]\n    (if (= 1 (count a))\n      (first a)\n      (recur a))))","user":"557e2eafe4b05c286339e0d2"},{"problem":19,"code":"(fn [seq] \n  (loop [seq seq]\n    (if (empty? (rest seq))\n      (first seq)\n      (recur (rest seq)))))","user":"5b59c2bde4b02d533a91bd80"},{"code":"(fn [a]\n    (nth a (-(count a) 1))\n  )","problem":19,"user":"52d6d490e4b09f7907dd1369"},{"code":"(fn lst [x] (if (= (rest x) ()) (first x) (lst (rest x))))","problem":19,"user":"52d584bbe4b09f7907dd1340"},{"problem":19,"code":"(fn la [li] (if (= 1 (.size li)) (first li) (la (rest li))))","user":"5b20134de4b03cfeda66ed2d"},{"problem":19,"code":"(fn [x] (let [y (reverse x)] (first y)))","user":"6092c0a9e4b00e9e6653c3dc"},{"code":"#(if (empty? (next %)) (first %) (recur (rest %)))","problem":19,"user":"533b1dc4e4b0e30313ee6cc7"},{"problem":19,"code":"(fn foo [s]\n\n\t( if (= (count s) 1)\n      (first s)\n      (foo (rest s))\n    )\n )","user":"577d3feee4b0c8d87281f6d2"},{"code":"#(first (reverse %))\n;(comp peek vec)\n\n;(fn rec [c] \n;  (if (= 1 (count c)) \n;    (first c) \n;    (rec (rest c))))","problem":19,"user":"4fcc103fe4b0ee37620e185f"},{"problem":19,"code":"#(nth %  (- (count %) 1))","user":"548a9f58e4b0e286459a11f5"},{"problem":19,"code":"(fn [myseq] (nth myseq (dec (count myseq))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":19,"code":"(fn lst [ls]\n  (cond\n    (empty? (rest ls)) (first ls)\n    :else (lst (rest ls))))","user":"59643a21e4b066ee0a44b0df"},{"code":"(fn get-last [x]\n  (let [c (-(count x) 1)]\n    (let [newx (into [] x)]\n      (newx c)\n      )\n    )\n  )","problem":19,"user":"5157d8bce4b0b0b4b87062d6"},{"problem":19,"code":"(fn my-last [[x & r]]\n  (if r \n  \t(my-last r)\n \t x))","user":"56df254be4b0ca2494a095ea"},{"problem":19,"code":"(fn lst [col] (if (= 1 (count col)) (first col) (lst (rest col))))","user":"558bb38fe4b0277789237631"},{"code":"(fn return-penultimate [x]\n   (let [length (dec(count x))]\n      (nth x length)))","problem":19,"user":"52f01bfbe4b05e3f0be25ed9"},{"problem":19,"code":"(fn [x]\n(nth x (- (count x) 1)))","user":"553388c1e4b09218d5f44f90"},{"problem":19,"code":"#(loop [my-seq %] ( if (empty? (rest my-seq)) (first my-seq) (recur (rest my-seq))))","user":"5c228b51e4b07e362c23058c"},{"problem":19,"code":"(fn foo [a]\n  (if (> (count a) 1)\n    (foo (rest a))\n    (first a)))","user":"5a58524ee4b05d388ecb6c7f"},{"problem":19,"code":"(fn last_item [vect]\n  (if (= [] (rest vect))\n    (first vect)\n    (last_item (rest vect))))","user":"5e33e399e4b0650de70e2b11"},{"code":"#(first (reverse % ))","problem":19,"user":"4e6a44f3535d8ccf87e9feb7"},{"problem":19,"code":"(fn f[s]\n  (if (= 1 (count s))\n    (first s)\n    (f (rest s))))","user":"56df632ce4b0ca2494a095f2"},{"problem":19,"code":"(fn [xs]\n  (let [rs (rest xs)]\n    (if (empty? rs)\n      (first xs)\n      (recur rs))))","user":"5b0c6874e4b0cc2b61a3bde5"},{"problem":19,"code":"(fn rmylast\n                  [coll]\n                  (if (= (count coll) 1)\n                    (first coll)\n                    (recur (rest coll))\n                    ))","user":"55079e55e4b021ccfedb96aa"},{"problem":19,"code":"(fn end [x]\n  (nth x (dec (count x))))","user":"5f63cde9e4b02876ed9fd015"},{"problem":19,"code":"(fn lastElem [[elem & rest]]\n  (if (empty? rest)\n    elem\n    (lastElem rest)))","user":"5568e147e4b0c656e3ff185b"},{"code":"(fn [ coll ] (loop [ coll coll ]\n  (if (= 1 (count coll)) (first coll) (recur (next coll))\n  )\n))","problem":19,"user":"51e1c11fe4b06a68e693eafa"},{"problem":19,"code":"(fn end [l] (cond (= '() (rest l)) (first l) :else (end (rest l))))","user":"5d227247e4b02ea6f0fb69f3"},{"problem":19,"code":"(fn [l]                                                                        \n2  (first (reverse l)))","user":"5af6bd0de4b0cc2b61a3bcb7"},{"code":"(fn [ve] (first (reverse ve)))","problem":19,"user":"53383c74e4b0e30313ee6c92"},{"code":"(\n  fn[x]\n    (first (reverse x))\n)","problem":19,"user":"4ee18201535d10e5ff6f535b"},{"code":"(fn [elements] (nth elements (-(count elements) 1)))","problem":19,"user":"523d06aae4b0dbf0c301728b"},{"code":"(fn [x] (nth x (- (.count x) 1)))","problem":19,"user":"527f214de4b0757a1b1713c4"},{"problem":19,"code":"(fn [x]  \n  (let [fst (first x)\n       rst (rest x)]\n     (if (empty? rst)\n       fst\n       (recur rst))))","user":"58136dcfe4b0f478707a0610"},{"problem":19,"code":"(fn myf [l] (if (empty? (rest l)) (first l) (myf (rest l))))","user":"56039a9de4b04bb52996e1bf"},{"code":"(fn f [x]\n  (if (not (= (rest x) '())) (f (rest x)) (first x)))","problem":19,"user":"5139ed5ee4b067e25a345ebf"},{"code":"(\n  (fn [f] (fn [x] (f f x)))\n  (fn [f x]\n    (if\n      (= 1 (count x))\n      (first x)\n      (f f (rest x)))\n  )\n)","problem":19,"user":"4fc521eae4b081705acca37b"},{"code":"(fn [coll]\r\n  (if-let [rest-coll (next coll)]\r\n    (recur rest-coll)\r\n    (first coll)))","problem":19,"user":"507e5cf8e4b085af06e3afd1"},{"problem":19,"code":"(fn last' [[x & rest]]\n (if (empty? rest)\n  x\n  (last' rest)))","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":19,"code":"(fn [coll] \n\t(nth coll (dec (count coll)))\n)","user":"54a2760ae4b09f271ff37c5b"},{"problem":19,"code":"(fn [collection] \n  (if (empty? (rest collection))\n    (first collection)\n    (recur (rest collection))))","user":"53ac1992e4b047364c04445a"},{"code":"(fn [coll] (first (reverse coll)) )","problem":19,"user":"50217818e4b00bba4502f7a7"},{"problem":19,"code":"(fn [a-seq]\n  (if (= 1 (count a-seq))\n    (first a-seq)\n    (recur (rest a-seq))))","user":"53fd0a22e4b0de5c418485e1"},{"code":"#(if (> (count %) 1) (recur (rest %)) (first %))","problem":19,"user":"4dc108d2535d020aff1edf85"},{"problem":19,"code":"#(if (empty? (rest %))\n   (first %)\n   (recur (rest %))\n )","user":"54973374e4b0b312c081ff6f"},{"problem":19,"code":"(fn my-last [[f & r]] (if (empty? r) f (my-last r)))","user":"55229495e4b0882d96d091a4"},{"code":"(fn l [xs] (if (= (count xs) 1) (first xs) (l (rest xs))))","problem":19,"user":"52d829a8e4b09f7907dd1389"},{"problem":19,"code":"(fn my-last [coll] (if\n             (= (count coll) 1)\n             (first coll)\n             (my-last (rest coll))))","user":"56f4bf47e4b046a417f92062"},{"code":"(fn [l] (first (reverse l)))","problem":19,"user":"4e3ae7cd535deb9a81d77f4e"},{"code":"(fn last_elt [x] \n  (if (= 1 (count x)) \n         (first x)\n         (last_elt (rest x))\n    )\n  )","problem":19,"user":"5386fe55e4b06839e8705f18"},{"problem":19,"code":"(fn [lst] \n  (first \n   (drop \n    (- (count lst) 1)\n    lst)))","user":"54194782e4b01498b1a71a29"},{"problem":19,"code":"(fn [mylist] (first (reverse mylist)))","user":"55f8278fe4b03cbcff9738aa"},{"problem":19,"code":"(fn letztes [x](if (empty? (rest x))\n                    (first x)\n                    (letztes (rest x))\n                   )\n   )","user":"5bb58390e4b0a20761a2356d"},{"problem":19,"code":"(fn [l]\n  (let [[x & xs] l]\n    (if (nil? xs)\n      x\n      (recur xs))))","user":"54b448f2e4b05787c3b1638e"},{"problem":19,"code":";#(nth % (dec (count %)))\n;( fn [x] ( dec (count x) ) )\n;#(nth % (dec (count %)))\n(fn [a] (nth a (dec (count a))))","user":"55f1a939e4b06e875b46ce33"},{"problem":19,"code":"(fn [aSeq] (first (reverse aSeq))) ;; cheat for not able to use last ;)","user":"548018e3e4b0c51c1f4d7331"},{"problem":19,"code":"(fn [x]\n  (let [size (- (count x) 1)]\n    (nth x size)))","user":"52d1c619e4b0d9f9285948e4"},{"code":"(fn get-last [x] (if (= (rest x) ()) (first x) (get-last (rest x))))","problem":19,"user":"503614e5e4b0fbe0a74d26bd"},{"code":"(fn [xs]\n  (reduce (fn [_ x'] x') xs))","problem":19,"user":"52487654e4b05ef8e38e63dc"},{"code":"#(peek (vec %1))","problem":19,"user":"4e6df3c9535d5021c1a895fa"},{"code":"(fn [s]\n  (if (<= (count s) 1)\n    (first s)\n  (recur (rest s))))","problem":19,"user":"4e842ebb535db62dc21a62df"},{"problem":19,"code":"(fn last-element [seq]\n  (nth seq (- (count seq) 1)))","user":"58fdae44e4b0438e51c2cfba"},{"code":"(fn llast [x]\n  (if (= 1 (count x)) (first x)\n    (llast (rest x))))","problem":19,"user":"51684318e4b03f62cda68cd6"},{"problem":19,"code":"(fn asd ([[head & rest]] (if rest (asd rest) head) ))","user":"541074f1e4b01498b1a719ac"},{"problem":19,"code":"(fn [a] (nth (vec a) (- (count a) 1)))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [x] \n  (let [rem (next x)]\n    (if rem\n      (recur rem)\n      (first x)) \n    ))","problem":19,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":19,"code":"(fn lel [[x & xs]] \n  (if (empty? xs) x (lel (rest xs))))","user":"5b6f9c3ae4b0c6492753e7de"},{"problem":19,"code":"(fn [list] (->> list reverse first))","user":"59e76dd6e4b0249b72820715"},{"problem":19,"code":"(fn f [[head & tail]] (if (empty? tail) head (f tail)))","user":"546c1f73e4b00cfc9eacc175"},{"problem":19,"code":"(fn my-last [x]\n  (if-let [r (next x)]\n    (recur r)\n    (first x)))","user":"5fd2e391e4b07e53c2f3f049"},{"problem":19,"code":"(fn [xs]\n  (let [rs (rest xs)]\n      (if (seq rs)\n          (recur rs)\n         (first xs) )))","user":"5da94ccfe4b000c986472c2f"},{"code":"(fn end [x] \n  (if (= 1 (.size x))\n    (first x)\n    (end (rest x))\n    )\n  )","problem":19,"user":"512044bbe4b0e88f5a20c40d"},{"code":"(fn my-last [s] (first (reverse s)))","problem":19,"user":"4fbe6386e4b081705acca311"},{"problem":19,"code":"(fn iter [xs]\n  (let [cnt (count xs)]\n        (cond (= cnt 1) (first xs)\n              true (iter (rest xs)))))","user":"5583888ae4b05c286339e117"},{"code":"(fn lastelm [l] (first (reverse l)))","problem":19,"user":"4fa40c8ae4b081705acca19a"},{"problem":19,"code":"(fn [x] (let [i (count x)] (nth x (- i 1))))","user":"591315a6e4b0163c97b36efa"},{"problem":19,"code":"(fn [arg] (nth arg (- (count arg) 1)) )","user":"574422cce4b009280f9f2b31"},{"code":"(fn l [alist] \n  (if (next alist)\n      (recur (next alist))\n      (first alist)))","problem":19,"user":"4eb75bdf535d7eef30807375"},{"problem":19,"code":"(fn [seq]\n  (if (= 1 (count seq))\n  (first seq)\n  (recur (rest seq))\n  ))","user":"5736b126e4b0cd1946bd1037"},{"problem":19,"code":"reduce (fn [a b] b) nil","user":"58409e47e4b089d5ab817dee"},{"problem":19,"code":"(fn [col]\n (let [next (next col)]\n (if next\n  (recur next)\n  (first col))))","user":"54580586e4b01be26fd74616"},{"problem":19,"code":"(fn mylast [coll] (if (empty? (rest coll)) (first coll) (mylast (rest coll))))","user":"57f675c2e4b0d3187e9008e5"},{"code":"(fn[col] (first (reverse col)))","problem":19,"user":"4fc4f668e4b081705acca362"},{"problem":19,"code":"(fn my-last [[x & rest]] (if rest (my-last rest) x))","user":"55d95be7e4b0e31453f64ac9"},{"problem":19,"code":"(fn [xs] \n  (if-let [r (next xs)]\n    (recur r)\n    (first xs)\n    )             \n  )","user":"55e55810e4b050e68259b46a"},{"problem":19,"code":"#(loop [s %]\n   (if-not (= (rest s) '())\n     (recur (rest s))\n     (first s)))","user":"5434b344e4b0b6b47310fcf3"},{"code":"(fn last-element-of [list] \n  (nth list (- (count list) 1)))","problem":19,"user":"509aea3de4b050a581d3d580"},{"problem":19,"code":"#(first (reverse %))\n;#(nth % (- (count %) 1))","user":"579fa28fe4b0264b925669fb"},{"problem":19,"code":"(fn [arr]\n  (if (next arr)\n    (recur (next arr))\n    (first arr))\n  )","user":"5e807fcae4b085ba37836e46"},{"code":"#(nth % (-(count %) 1) (count %))","problem":19,"user":"514cc029e4b019235f6c057c"},{"problem":19,"code":"(fn [[element & remaining]]\n  (if (empty? remaining)\n    element\n    (recur remaining)))","user":"60b34c5de4b0e0fa5f1b422e"},{"problem":19,"code":"(fn [s]\n  (first (rseq (vec s))))","user":"567a3112e4b05957ce8c6196"},{"problem":19,"code":"(fn [x](first (reduce conj () x)))","user":"5d87cc7ee4b0915913b1d3a3"},{"problem":19,"code":"(fn get_last [xs] (nth xs (- (count xs) 1)))","user":"57cf9de8e4b00451144b0503"},{"problem":19,"code":"(fn last-element [seq] (nth seq (- (count seq) 1)))","user":"5b5fb62be4b0c6492753e6f7"},{"problem":19,"code":"(fn mylast [s] \n  (if (<= (count s) 1) \n    (first s) \n    (mylast (rest s))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":19,"code":"(fn [m] (first (reverse m) ))","user":"575e7335e4b0846ea39baf28"},{"problem":19,"code":"(fn last2\n  [lst]\n  (first (drop (- (count lst) 1) lst)))","user":"5c7dad57e4b0d597f478caba"},{"problem":19,"code":"#(nth % (dec (count %)))\n;(fn [sequence] (nth sequence (dec (count sequence))))","user":"56ea86b9e4b04a395b9a0405"},{"problem":19,"code":"(fn [[el & other]] (if (empty? other) el (recur other)))","user":"593eaadde4b069cdc2982bc2"},{"problem":19,"code":"(fn dumb-last\n  [[top & remain]]\n  (if (empty? remain)\n    top\n    (dumb-last remain)))","user":"569bfc43e4b0542e1f8d145c"},{"code":"(#(fn [s] (first (reverse s))))","problem":19,"user":"50e3ddd4e4b01912b3285c47"},{"code":"(fn [[x & xs]]\n  (if xs (recur xs) x))","problem":19,"user":"5346f409e4b084c2834f4a46"},{"code":"#(loop [col %]\n   (if (= (count col) 1)\n     (first col)\n     (recur (rest col))))","problem":19,"user":"52d6120ee4b09f7907dd134c"},{"problem":19,"code":"reduce (fn [_ new] new)","user":"5658b9bde4b00d315579610e"},{"code":"(fn [x]\n  (if (= (count x) 1)\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4f04f847535dcb61093f6beb"},{"problem":19,"code":"(fn [arg] (nth arg (dec (count arg))))","user":"5804b491e4b0a837a8b30cac"},{"problem":19,"code":"(fn [t] (first (reverse t)))","user":"571d1234e4b0145328a76274"},{"code":"(fn [%] (nth % (dec (count %))))","problem":19,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":19,"code":"(fn [sec] (nth sec (dec (count sec))))","user":"588906a9e4b0f1effa3b772a"},{"problem":19,"code":"(fn my-last [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (my-last (rest seq))))","user":"53e543efe4b036ad0777e457"},{"problem":19,"code":"(fn [[s & r]] (if (empty? r) s (recur  r)))","user":"57644395e4b0994c1922fbf2"},{"problem":19,"code":"(fn [seqx] (peek (vec seqx)))","user":"5a7b18a7e4b03baeef9276d7"},{"problem":19,"code":"(fn [xs]\n  (loop [remaining xs]\n    (if (empty? (rest remaining)) (first remaining)\n      (recur (rest remaining)))))","user":"5a16da30e4b0ff51aa4b31cc"},{"problem":19,"code":"(fn [arr]\n  (nth arr (- (count arr) 1)))","user":"5796e0afe4b039eba2ecb0f0"},{"code":"(fn [x] \n  (nth x (dec (count x))))","problem":19,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":19,"code":"(fn glast [s] (first(reverse s))\n  )","user":"5d2a8ecce4b01671435dbc79"},{"problem":19,"code":"#(let [[f & r] %1]\n    (if (nil? r) f (recur (rest %1))))","user":"5c3cd80fe4b0d62ef62d9faa"},{"code":"(fn [x] (nth x (- (count x) 1)))","problem":19,"user":"4dd865e1535d2dad7130b5d7"},{"code":"(fn [vect] (first(reverse vect)))","problem":19,"user":"522b1993e4b0d34ee08e71b6"},{"problem":19,"code":"(fn laast[ls] \n\n  (nth ls (- (count ls) 1))\n)","user":"5d1b6ba6e4b02ea6f0fb6980"},{"problem":19,"code":"(fn lastelm [[frst & rst :as lst]]\n  (cond \n   \t(= (count lst) 0) nil\n  \t(= (count lst) 1) frst\n\t:else (lastelm rst)\n    ))","user":"5d828b7ee4b0915913b1d382"},{"code":"(fn [col] (if (= (rest col) '())\n              (first col)\n              (recur (rest col))))","problem":19,"user":"5113cc25e4b0350614f07a86"},{"code":"(fn [x] (first (reverse (seq x))))","problem":19,"user":"5116e176e4b0063b4e3e16d7"},{"problem":19,"code":"(fn [v]\n   (if (= (count v) 1)\n     (first v)\n     (recur (rest v))))","user":"5db32ae1e4b010eb3c36cd1e"},{"problem":19,"code":"(fn last-element\n  [seq]\n  (let [last-index (-> seq\n                       count\n                       (- 1))]\n    (nth seq last-index)))","user":"5759c833e4b02ea11479932c"},{"problem":19,"code":"(fn [collect] (first (reverse collect)))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":19,"code":"(fn [& args]\n  (peek \n    (into []\n          (first args)\n    )\n  )\n)","user":"57fa06c9e4b0d3187e900958"},{"code":"(fn getlast [x] (first (reverse x)))","problem":19,"user":"4e6698b9535d8ccf87e9fe7a"},{"problem":19,"code":"(fn lastelt [s] (first (reverse s)))","user":"58821372e4b0f1effa3b764d"},{"problem":19,"code":"(fn [s] (cond (empty? (rest s)) (first s) :else (recur (rest s))))","user":"5cd26163e4b0ccb0619628fe"},{"problem":19,"code":"(fn my-last [l] (if (not= '() (rest l)) (my-last (rest l)) (first l) ))","user":"5c704f94e4b0fca0c162277d"},{"code":"(fn [s]\n  (loop [[head & tail] s]\n    (if (empty? tail)\n      head\n      (recur tail))))","problem":19,"user":"5313de03e4b08068f379ed10"},{"problem":19,"code":"(fn give-last [seq] (first (reverse seq)))","user":"5784e2a6e4b0ebec4cfb74d0"},{"problem":19,"code":"(fn [args] (first (reverse args)))","user":"5613a96ae4b05f002753dfa4"},{"code":"(fn [x]\n  (let [a (first x) b (rest x)]\n    (if \n      (empty? b) a\n       (recur b))))","problem":19,"user":"4fd9cc7ee4b05e33b9224f3a"},{"problem":19,"code":"(fn [some-list]\n  (loop [[h & t] some-list]\n    (if (nil? t)\n      h\n      (recur t))))","user":"54bf7d59e4b0ed20f4ff6f04"},{"code":"(fn [x] (-> x reverse first))","problem":19,"user":"4eb504d8535d7eef30807363"},{"code":"(fn last-in-seq [s] (first (reverse s)))","problem":19,"user":"4debbe5f535d08e6dec9fe06"},{"problem":19,"code":"(fn [[f & r]]\n    (if r\n      (recur r)\n      f))","user":"5d52bf29e4b0776584bd6f69"},{"problem":19,"code":"(fn [s] ( if ( next s) (recur (next s)) (first s)))","user":"55d44dd6e4b0e31453f64a75"},{"code":"(fn [coll] \n  (let [xs (next coll)]\n    (if xs\n      (recur xs)\n      (first coll))))","problem":19,"user":"4fbb9d80e4b081705acca2ea"},{"problem":19,"code":";; #(nth % (dec (count %))) \n\n;; #(first (reverse %))\n    \n    \n(fn [[first-elem & remainder]]\n  (if (empty? remainder)\n    first-elem\n    (recur remainder)))","user":"58e7639be4b056aecfd47ccf"},{"problem":19,"code":"(fn final [xs]\n  (if (not (empty? xs))\n    (let [hd (first xs)\n          tl (rest xs)]\n      (if (empty? tl)  \n        hd     \n        (final tl)))\n    nil))","user":"57df2722e4b0bd073c20245e"},{"code":"(fn [s]\n  (loop [a (first s) d (rest s)]\n  \t(if (= d ())\n\t\ta\n    \t(recur (first d) (rest d)))))","problem":19,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn las7 [x] (if (nil? (seq (rest x))) (first x) (las7 (rest x))))","problem":19,"user":"4e6a367a535d8ccf87e9fead"},{"problem":19,"code":"#(.get %  (- (count %) 1))","user":"5eee9352e4b07c55ae4a0512"},{"problem":19,"code":"(fn[coll](first (reverse coll) ) )","user":"592b7269e4b072a2710fcf3f"},{"code":"#(.get % (dec (count %)))\n;#(.get % (- (count %) 1))\n;#(first (reverse %))","problem":19,"user":"51f20db0e4b0210f90e74539"},{"problem":19,"code":"(fn [xs]\n  (loop [ys xs]\n    (let [[z & zs] ys]\n      (if zs (recur zs) z))))","user":"55dc26ede4b050e68259b3ab"},{"code":"(fn m [mys] (nth mys (- (count mys)1)))","problem":19,"user":"513e0ffae4b02b2a3d8235bb"},{"problem":19,"code":"(fn [x]\n  (loop [items x]\n    (let [remaining (rest items)]\n     \t(if (empty? remaining) (first items)\n          \t(recur remaining)))))","user":"596aaeefe4b069c0a1a19808"},{"problem":19,"code":"(fn [coll]\n  (let [amount (count coll)]\n    (nth coll (- amount 1))))","user":"5abba9ace4b073f1774426d6"},{"code":"(fn blah [x] (if (empty? (rest x)) (first x) (blah (rest x))))","problem":19,"user":"4f17aa97535d64f603146456"},{"code":"(fn kkk [x]\r\n  (if (nil? (seq (rest x)))\r\n    (first x)\r\n    (kkk (rest x))))","problem":19,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [[x & r]]\n  (if (nil? r)\n    x\n    (recur r)))","problem":19,"user":"527b9beee4b03e8d9a4a7590"},{"code":"(fn lastone [xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (lastone (rest xs))\n    )\n  )","problem":19,"user":"537e0680e4b06839e8705e98"},{"code":"(fn [x] (nth x (- (count x) 1) ))","problem":19,"user":"4e964f4a535dbda64a6f6b42"},{"problem":19,"code":"(fn last-elem [xs] (if (> (count xs) 1) (last-elem (rest xs)) (first xs)))","user":"5e30dbd5e4b05b4b0151621d"},{"code":"(fn last-l [items]\n      (let [length (count items)]\n        (if (= length 1)\n      \t    (first items)\n      \t    (last-l (rest items)))))","problem":19,"user":"531ac836e4b08068f379ed8c"},{"problem":19,"code":"(fn ultimo\n  [[x & xs]]\n   (if (empty? xs)\n     x\n     (recur (rest xs))))","user":"5697fda8e4b0542e1f8d142c"},{"problem":19,"code":"(fn [my-seq]\n  (let [[part & remaining] my-seq]\n    (if (empty? remaining)\n      part\n      (recur remaining))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn myreverse[a](->> a reverse first))","problem":19,"user":"52cbf89ee4b07d0d72b27354"},{"code":"(fn [container] (loop [s (seq container)] (if (next s) (recur (next s)) (first s))))","problem":19,"user":"52a195fde4b04e0c58e87bda"},{"problem":19,"code":"(fn [coll]\n  (loop [x (first coll) coll coll]\n    (if (empty? coll) x (recur (first coll) (rest coll)))))","user":"54186e68e4b01498b1a71a1a"},{"problem":19,"code":"#(->> (-> %1 (count) (- 1)) (nth %1))","user":"550a26e2e4b06e50f9beb12a"},{"problem":19,"code":"(fn [se] (nth se (- (count se) 1) ))","user":"56330578e4b0bfe05bf117af"},{"problem":19,"code":"(fn [ls]\n  (loop [nxt ls]\n    (if (empty? (rest nxt))\n      (first nxt)\n      (recur (rest nxt))\n      )\n    )\n  )","user":"5b59b89be4b02d533a91bd7d"},{"code":"(fn myLast [x]\n  (cond\n    (empty? x) x\n    (empty? (rest x)) (first x)\n    :else (myLast (rest x))))","problem":19,"user":"4f7ef32be4b06e829148e1d4"},{"code":"(fn nico [coll] (if (next coll) (nico (next coll)) (first coll)))","problem":19,"user":"527aa598e4b03e8d9a4a7563"},{"code":"(fn m [x] (if (= (count x) 1) (first x) (m (rest x))))","problem":19,"user":"4ea0c284535d7eef308072ad"},{"code":";;#(first (reverse %))\n(fn [ls] (nth ls (- (count ls) 1)))","problem":19,"user":"52e3e6a8e4b09f7907dd1448"},{"code":"(fn f [x] (if (empty? (rest x)) (first x) (f (rest x))))","problem":19,"user":"5349ac2be4b084c2834f4a67"},{"problem":19,"code":"(fn lasty [x] (first (reverse x)))","user":"58483b1ae4b089d5ab817eb4"},{"code":"reduce (fn [p n] n) nil","problem":19,"user":"4f033aa3535dcb61093f6a7c"},{"problem":19,"code":"(fn get-last\n  [col]\n  (loop [remaining col]\n    (if (= 1 (count remaining))\n      (first remaining)\n      (recur (rest remaining)))))","user":"60bf7458e4b0e0fa5f1b4296"},{"problem":19,"code":"(fn [s]\n  (nth s\n       (- (count s) 1)))","user":"5ac67b47e4b0e27600da776e"},{"problem":19,"code":"(fn \n  [lista]\n  (first (reverse lista)))","user":"5b250c93e4b063e2438bcc22"},{"problem":19,"code":"#(reduce (fn [a v] v) %)","user":"5795c16ae4b0e215f87e8489"},{"code":"(fn [lst]\n  (cond (empty? lst) ()\n        (empty? (rest lst)) (first lst)\n        :else (recur (rest lst))))","problem":19,"user":"51baff1be4b0fe3ecfb46443"},{"problem":19,"code":"(fn dernier [x] (first (reverse x)))","user":"563bdd68e4b0bfe05bf1182d"},{"problem":19,"code":"(fn [args]\n   (first (reverse args)))","user":"5b86462de4b047b03b2037df"},{"problem":19,"code":"(fn [xs]\n\t(if-let [xs' (next xs)]\n       (recur xs')\n       (first xs)))","user":"59ab2b86e4b08cbb53654d91"},{"problem":19,"code":"#(->(reverse %1)(first))","user":"582cbf48e4b051871117bfa6"},{"code":"(fn [ss]\n  (let [s (first ss )\n        more-ss (rest ss)]\n    (if (empty? more-ss)\n      s\n      (recur more-ss))))","problem":19,"user":"52978921e4b02ebb4ef75042"},{"code":"(fn last-elem [s]\n  (if (nil? (next s))\n    (first s)\n    (last-elem (next s))))","problem":19,"user":"5151d574e4b03e678e393ae0"},{"problem":19,"code":"(fn latest [stuff] (first (reduce (fn [one & others] others) stuff)))\n; couldn't reduce with rest for type differences","user":"5e32c30be4b05b4b01516245"},{"problem":19,"code":"( fn [args] (nth args ( - (count args) 1)))","user":"5c3fb80be4b08cd430848e9f"},{"problem":19,"code":"(fn getLast [x] (nth x (-  (count x) 1)))","user":"5509f992e4b06e50f9beb128"},{"code":"(fn [xs] (reduce (fn [x y] y) xs))","problem":19,"user":"4f725da7e4b07046d9f4f031"},{"problem":19,"code":"(fn getTail\n  [[head & tail]]\n  (if (empty? tail)\n    head\n    (getTail tail)))","user":"5b56331de4b02d533a91bd40"},{"problem":19,"code":"(fn last-in[xs] (first (reverse xs)))","user":"6096e2d4e4b00e9e6653c3f1"},{"problem":19,"code":"#(reduce (fn [_ b] b) %)","user":"55afba88e4b002ce9d5cbc17"},{"problem":19,"code":"(fn last-el [x](nth x (- (count x) 1)))","user":"5a918839e4b002d099cae6f7"},{"problem":19,"code":"(fn [x] \n  (-> x\n      reverse\n      first)\n  )","user":"59d02bfbe4b0ef0a1e9b5b7b"},{"problem":19,"code":"(fn mymax [[y & z]]\n  (if (nil? (first z))\n    y\n  \t(mymax z)\n   )\n)","user":"53ff7ad2e4b0de5c41848601"},{"problem":19,"code":"(fn [s] \n  (if (next s)\n  (recur (next s))\n  (first s)))","user":"51c5c9c9e4b03a28d42333ba"},{"code":"#(first (take-last 1 %))","problem":19,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [[f & rest]] (if (empty? rest) f (recur rest)))","problem":19,"user":"51b07b99e4b0c53cf2e68a66"},{"problem":19,"code":"(fn [all] (if (= (count all) 1) (first all) (recur (rest all))))","user":"544ac9b5e4b0e39780006959"},{"problem":19,"code":"(fn thing [coll] (let [len (count coll)] (nth coll (- len 1))))","user":"5441539ae4b032a45b86936d"},{"problem":19,"code":"(fn teste-funcao [colecao]\n  (let [ultimo-indice (dec (count colecao))]\n    (nth colecao ultimo-indice)))","user":"5d797deee4b02e6b30c93541"},{"problem":19,"code":"reduce (fn [r x] x)","user":"5c01ba2ce4b0bdcf453d1656"},{"problem":19,"code":"(fn mylast [list]\n  (let [lrest (rest list)]\n    (if (= lrest '()) (first list) (mylast lrest))))","user":"5f74daf2e4b02876ed9fd0a4"},{"code":"(fn [s]\n  (if (next s)\n    (recur (next s))\n    (first s))\n  )","problem":19,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":19,"code":"(fn[[n & more]] (if more (recur more) n))","user":"55c43ae9e4b0e31453f64997"},{"problem":19,"code":"(fn do-it [xs] (first(reverse  xs) ))","user":"5e46dd71e4b043cd24807a25"},{"code":"(fn [s]\n  (if-let [nxt (next s)]\n      (recur nxt)\n      (first s)))","problem":19,"user":"4eb70649535d7eef30807373"},{"problem":19,"code":"(fn [s] (loop [h (first s) t (rest s)] (if (empty? t) h (recur (first t) (rest t)))))","user":"4ee7c6dd535d93acb0a6686c"},{"code":"#(if (next %)\n  (recur (next %))\n    (first %))","problem":19,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":19,"code":"reduce (fn [col el] el) []","user":"55f32f6fe4b06e875b46ce53"},{"code":"(fn lastfn [x] (if (= 1 (count x)) (first x) (lastfn (rest x))))","problem":19,"user":"4f03101e535dcb61093f6a53"},{"problem":19,"code":"(fn [[that & the-other]]\n  (if (empty? the-other)\n    that\n    (recur the-other)))","user":"59c6de70e4b0a024fb6ae538"},{"problem":19,"code":"(fn [lis] (let [[las &first] (reverse lis)] las))","user":"544f732fe4b0e39780006994"},{"code":"(fn myLast [x] (if (= (rest x) '()) (first x) (myLast (rest x))))","problem":19,"user":"4e663855535d8ccf87e9fe76"},{"code":"(fn [x] \n (get (vec x) (- (count x) 1)) \n)","problem":19,"user":"4fdf8f67e4b05e33b9224f9e"},{"problem":19,"code":"(fn[s] (first (reverse s)))","user":"53d0f7bbe4b00fb29b22130e"},{"problem":19,"code":"(fn [coll]\n  (let [size (count coll)]\n    (nth coll (- size 1))))","user":"5a492896e4b05d388ecb6b6e"},{"problem":19,"code":";; (fn [x] (nth x (- (count x) 1)))\n\n(fn [x] \n  (nth x\t\n  (- (count x) 1)\n  ))","user":"5a23eed4e4b0ff51aa4b32e3"},{"problem":19,"code":"(\n fn [a] (nth a ( dec (count a)))\n )","user":"54494159e4b032a45b8693d1"},{"problem":19,"code":"(fn [vec] (reduce (fn [prev curr] (if (nil? curr) prev curr)) [] vec))","user":"5c76577ae4b0fca0c16227ea"},{"problem":19,"code":"(fn [x]\n  (if (next x)\n   (recur (next x))\n    (first x)\n  )\n)","user":"575e7e74e4b0846ea39baf29"},{"problem":19,"code":"(fn [x]\n  (let [restx (rest x)]\n    (if (empty? restx)\n      (first x)\n      (recur restx)\n    )\n  )\n)","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn find-last [x] (first (reverse x)))","problem":19,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn mylast [ls]\n    (if (<= (count ls) 1)\n      (first ls)\n      (mylast (rest ls))))","problem":19,"user":"52aa4d9ee4b0c58976d9ac63"},{"code":"(fn [x] (nth x (#(- % 1) (count x))))","problem":19,"user":"51b6f4f9e4b04fc00976d479"},{"code":"(fn [[a & b]] (if b (recur b) a))","problem":19,"user":"516fa727e4b0ef3e37990e86"},{"problem":19,"code":"(fn cus [x]\n  (if (= (second x) nil) (first x) (cus (rest x)))\n  )","user":"54b4f9cee4b05787c3b16397"},{"problem":19,"code":"(fn [my-seq]\n  (loop [loopseq my-seq]\n    (if (empty? (rest loopseq))\n      (first loopseq)\n      (recur (rest loopseq)))))","user":"60baf331e4b0e0fa5f1b4280"},{"problem":19,"code":"(fn [coll] (peek (vec coll)))","user":"547b1c82e4b0c51c1f4d72d2"},{"problem":19,"code":"(fn [x] (nth x (dec (.size x))))","user":"54af04e3e4b09f271ff37d01"},{"problem":19,"code":"(fn last-item [items] (first (reverse items)))","user":"5c7e5be4e4b0d597f478cac7"},{"problem":19,"code":"(fn [l]\n  (->> l\n       reverse\n       first))","user":"5f4fe1fae4b0a0bc16850a5c"},{"code":"#(loop [rem %] (if (nil? (next rem)) (first rem) (recur (next rem))))","problem":19,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":19,"code":"(fn [x]\n  (if (next x)\n    (recur (next x))\n           (first x)))","user":"588f55d2e4b00487982d51a5"},{"code":"(fn my-last [coll]\n  (if (empty? coll)\n    nil\n    (if (= 1(count coll))\n      (first coll)\n      (my-last (rest coll)))))","problem":19,"user":"522d0360e4b0806774ddfef7"},{"code":"(fn z [x] (if (> (count x) 2) (z (rest x)) ((vec x) 1)))","problem":19,"user":"50949602e4b04e5742806c4e"},{"problem":19,"code":"(fn lastEl [list] (first (reverse list)))","user":"5e692be9e4b04a83ad7cd269"},{"code":"(fn get-last [seq] (first (reverse seq)))","problem":19,"user":"4f85ffc4e4b033992c121c4e"},{"problem":19,"code":"(fn foo [xs] \n  (if (= 1 (count xs))\n    (first xs)\n    (foo (rest xs))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":19,"code":"(fn [x] (loop [sequence x] (if (empty? (rest sequence))\n                             (first sequence)\n                             (recur (rest sequence)))))","user":"554d386ee4b0a04f792995b8"},{"problem":19,"code":";(comp first reverse)\n\n#(first (reverse %))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn [[h & t]]\n  (if (empty? t) h (recur t)))","problem":19,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"reduce #(do %2)","problem":19,"user":"4e597b2c535d8a8b8723a29d"},{"code":"#(first(reverse % ))","problem":19,"user":"4f031883535dcb61093f6a5e"},{"problem":19,"code":"(fn [s]\n  (let [r (rest s)]\n    (if (empty? r)\n      (first s)\n      (recur r))))","user":"564c7c95e4b0284900eef672"},{"code":"#(reduce (fn [_ i] i) %)","problem":19,"user":"5392b849e4b0b51d73faaeb1"},{"problem":19,"code":"(fn last-index [s]\n  (nth s (dec (count s))))","user":"5403c1bbe4b0df28a13c62e0"},{"code":"(fn [s](if (next s)\r\n   (recur (next s))\r\n   (first s)))","problem":19,"user":"506fa1cde4b082ae7d1032cb"},{"problem":19,"code":"#(nth  %(- (count  %) 1))","user":"56349008e4b0bfe05bf117bd"},{"problem":19,"code":"(fn [y] (reduce (fn [acc x] x) y))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":19,"code":"(fn[l] (nth l (- (count l) 1)))","user":"5c4c64cee4b0f9f7a8770e75"},{"problem":19,"code":"(fn blah [%]\n  (if (next %)\n    (recur (next %))\n      (first %)))","user":"5b3169a6e4b025bcb146f303"},{"code":"(fn\n  [col]\n    (nth col (dec (count col))))","problem":19,"user":"4ed92fd6535d10e5ff6f5300"},{"code":"(fn [arg] (first (reverse arg)))","problem":19,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn l [c] \n  (if (= () (rest c)) \n    (first c)\n    (l (rest c))\n  )\n)","problem":19,"user":"50bfd849e4b042992946c649"},{"problem":19,"code":";(fn last-1[items](if (= 1 (count items)) (first items) (last-1 (rest items))))\n;(fn [items](first (reverse items)))\n#(first (reverse %))","user":"5b100648e4b0cc2b61a3be17"},{"problem":19,"code":"(fn my-last [l]\n  (if (empty?\n       (rest l))\n    (first l)\n    (recur (rest l))))","user":"54d26316e4b0e8a36923e5f2"},{"problem":19,"code":"(fn [coll]\n  (reduce (fn [accum x] x) coll) )","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":19,"code":"(fn ls\n  [s]\n  \t(if (empty? (rest s)) (first s) (recur (rest s))))","user":"56cf6f72e4b0ea9b8538f769"},{"problem":19,"code":"(fn [a-seq] \n  (first (reverse a-seq)))","user":"5762991ae4b0994c1922fba7"},{"code":"(fn mylast [coll] (first (reverse coll)))","problem":19,"user":"52a7fec0e4b0c58976d9ac25"},{"problem":19,"code":"#(get (if (vector? %) % (into [] %)) (dec (count %)))","user":"59c734e3e4b0a024fb6ae53f"},{"problem":19,"code":"(fn [col] \n  (nth col (dec (count col))))","user":"569285b8e4b0dcc4269f40fc"},{"problem":19,"code":"(fn get-last \n  \t[your-list]\n  \t(first (reverse your-list)))","user":"53cfd3c5e4b00fb29b221302"},{"problem":19,"code":"(fn [x] (first (into [](#(reverse %) x))))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":19,"code":"(fn [array]\n  (if (next array)\n      (recur (next array))\n      (first array)))","user":"5a144fd8e4b0ff51aa4b319a"},{"code":"#(if (= (count %) 1) (first %) (recur (rest %)))","problem":19,"user":"4f689a17e4b07046d9f4ef77"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (empty? tail)\n    head\n    (recur tail)))","user":"55be4fa6e4b01b9910ae2a08"},{"problem":19,"code":"(fn b [[head & tail]] (if (= tail nil) head (b tail)))","user":"591b60f6e4b09b4ee5954bec"},{"problem":19,"code":"(fn last-ele1 [coll]\n  (nth coll (dec ( count coll))))","user":"5634995fe4b0bfe05bf117be"},{"problem":19,"code":"(fn last-element [coll]\n  (first (reverse coll))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":";#(-> % reverse first)\n#(first (reverse %))","problem":19,"user":"50293245e4b08353e5d459cf"},{"problem":19,"code":"(fn [t] (nth t (- (count t) 1)))","user":"57780dd8e4b0979f89651656"},{"problem":19,"code":";;(fn [coll] (reduce #(identity %2) coll))\n(comp first reverse)","user":"55647a31e4b0c656e3ff1808"},{"code":"(fn [seq] (nth seq (- (count seq) 1)))","problem":19,"user":"4e6a4ab9535d8ccf87e9fec2"},{"code":"(fn [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4e570b60535d8a8b8723a286"},{"problem":19,"code":"(fn get_last [x] (nth x (dec (count x))) )","user":"55293c48e4b0ffed3738f946"},{"code":"(fn mylast [lst] \n  (if (nil? (fnext lst))\n      (first lst)\n      (mylast (next lst))))","problem":19,"user":"5180dc04e4b06b8caf33fa01"},{"problem":19,"code":"#(loop [[x & rest] %] (if (empty? rest) x (recur rest)))","user":"58a61231e4b01a0c0b232923"},{"problem":19,"code":"(fn [seq] (nth seq (-(count seq)1)))","user":"548018dce4b0c51c1f4d732c"},{"problem":19,"code":"(fn [x]\n  (first\n  (reverse x))\n)","user":"5776558ee4b0979f89651633"},{"problem":19,"code":"(fn last_ [ls]\n  (if (= (count ls) 1) \n    (first ls) \n    (last_ (rest ls))))","user":"5efcee8fe4b0cf489e8d7efd"},{"problem":19,"code":"(fn [xs] (->> xs (reverse) (first)))","user":"5911eb44e4b0163c97b36ee1"},{"code":"reduce #(->%2)","problem":19,"user":"51efd397e4b0249c592fbdeb"},{"code":"#(cond (nil? %1) nil\n       (nil? (next %1)) (first %1)\n       :else (recur (next %1)))","problem":19,"user":"5183f5d7e4b02826a645f393"},{"problem":19,"code":"(fn get-last [ls]\n  (if (next ls)\n    (recur (next ls))\n    (first ls)))","user":"58975725e4b00487982d52b7"},{"code":"(fn [x]\n  (loop [lst x] \n    (if (empty? (rest lst))\n      (first lst)\n      (recur (rest lst)))))","problem":19,"user":"53468f6ce4b084c2834f4a3f"},{"code":"#(reduce (fn [x y] y) %1)","problem":19,"user":"4f03919c535dcb61093f6b29"},{"code":"(fn f [coll] (if (empty? (rest coll))\n               (first coll)\n               (f (rest coll))))","problem":19,"user":"513f0565e4b051389b345b3b"},{"code":"(fn[l] (first(reverse l)))","problem":19,"user":"523ab749e4b0aa37f082ed8d"},{"problem":19,"code":"(fn ult [s] (nth s (- (alength (to-array s)) 1)))","user":"546bd4c4e4b00cfc9eacc16f"},{"code":"(fn n0[l] (nth l (- (count l) 1)))","problem":19,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":19,"code":"(fn [x] \n  (let [length (count x)\n        last-element (nth x (- length 1) (first x))]\n    last-element))","user":"5bd1fd6be4b0e9689409ee54"},{"problem":19,"code":"(fn [c] \n  (if (next c)\n    (recur (next c))\n    (first c)))","user":"57c7cf2be4b05aa3c4741d0e"},{"problem":19,"code":"(fn last-element\n  [x]\n  (first (reverse x)))","user":"54fc6367e4b07d26eda61d28"},{"problem":19,"code":";; #(get (vec %) (- (count %) 1))\n\n#(-> % \n     (vec) \n     (get (- (count %) 1)))","user":"5e22e4c5e4b05b4b01516137"},{"code":"(fn [l] (first (take-last 1 l)))","problem":19,"user":"4e28ddd1535deb9a81d77efd"},{"problem":19,"code":"(fn [col]\n     (get (vec col) (- (count col) 1) ))","user":"557b3f29e4b05c286339e0ac"},{"code":"(fn last_element [se] (first(reverse se)))","problem":19,"user":"53901605e4b0b51d73faae95"},{"problem":19,"code":"(fn [coll] (first (reverse (vec coll))))","user":"5bbdd136e4b07a9b28b0ffab"},{"problem":19,"code":"(fn [x] (peek (vec x)))\n;#(peek (vec %))","user":"54c00a46e4b0ed20f4ff6f0e"},{"problem":19,"code":"(fn [x]\n   (letfn [(get-last [i]\n             (if-let [r (seq (rest i))]\n               (get-last r)\n               (first i)))]\n     (get-last x)))","user":"57689c23e4b0a07e8fc180d6"},{"problem":19,"code":"#(let [[x & xs] %] (if (empty? xs) x (recur xs)))","user":"60067b71e4b074f607df6655"},{"problem":19,"code":"#(\n  \n   first(\n         reverse %)\n  )","user":"5ac85708e4b0e27600da77ac"},{"code":"(fn Last [Seq] (first(reverse Seq)))","problem":19,"user":"521aad05e4b0c4ef0be8300e"},{"problem":19,"code":"(fn [z] ((vec z) (- (count z) 1)))","user":"559e32fce4b08a52bd4f97d1"},{"code":"(fn endE [x] ( if (= () (rest x)) (nth x 0) (endE (rest x)) ))","problem":19,"user":"518aec06e4b06da86c1973c2"},{"code":"(fn my-last [lst] \n  (if (= (rest lst) '()) \n      (first lst)\n      (my-last (rest lst))))","problem":19,"user":"4f04269d535dcb61093f6ba8"},{"problem":19,"code":"(fn find-last\n   ([coll]\n    (find-last (first coll) (rest coll)))\n   ([begin tail]\n    (if (empty? tail) \n       begin\n       (find-last (first tail) (rest tail)))))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":19,"code":"(fn get-last \n  [xs]\n  (if (> (count xs) 1)\n    (get-last (rest xs))\n    (first xs)))","user":"5fa1386be4b0f0ebd91b77dd"},{"problem":19,"code":"(fn [lst]\n  (first (reverse lst))\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":19,"code":"(fn retLast [L] (if (= '() (rest L)) (first L) (retLast (rest L))))","user":"55d3cfafe4b0e31453f64a6c"},{"problem":19,"code":"(fn [s] (if (next s) (recur (next s)) (first s)))\n; (comp first reverse)","user":"554bced1e4b0a04f79299599"},{"problem":19,"code":"reduce (fn [c v] v)","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn [list]\n    (first (reverse list)))","problem":19,"user":"4f189b42535d64f60314645d"},{"code":"(fn [[x & xs]]\r\n  (if (empty? xs)\r\n      x\r\n      (recur xs)))","problem":19,"user":"4fb37882e4b081705acca2a0"},{"problem":19,"code":"(fn [seq]\n  (loop [s seq, x (first s)]\n    (let [f (first s)]\n      (if f\n      \t(recur (rest s) f)\n      \tx))))","user":"5a481e05e4b05d388ecb6b64"},{"code":"(fn[coll] (nth coll (dec (count coll))))","problem":19,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn my [[x & r]]\n  (if r\n    (my r)\n    x))","problem":19,"user":"53134005e4b08068f379ed07"},{"code":"(fn llast [x]\n  (if (= (rest x)())\n    (first x)\n   (llast (rest x))))","problem":19,"user":"4ec14602535dfed6da9c6daa"},{"problem":19,"code":"(fn [c] (-> c\n            (reverse)\n            (first)))","user":"5a9db5c9e4b0d174b936c7f1"},{"code":"#(loop [x %1]\n  (if (nil? (next x))\n    (first x)\n    (recur (next x))\n   )\n)","problem":19,"user":"51f09f3de4b0274c496158d7"},{"problem":19,"code":"(fn \n  [list]\n  (loop [l list]                                                                \n    (if (= (second l) nil)\n      (first l)\n      (recur (rest l)))))","user":"571b900ae4b07c98581c3b69"},{"problem":19,"code":"(fn [[el & rest]] (if rest (recur rest) el))","user":"540f3b4ee4b0addc1aec6729"},{"code":"(fn [list] (first(reverse list)))","problem":19,"user":"4f21838fe4b0d66497709fd2"},{"problem":19,"code":";last\n;#(last %)\n#(.get %(- (count %) 1))","user":"5aa62482e4b0d174b936c8a5"},{"problem":19,"code":"(fn foo [plist]\n  (if (not-empty (rest plist)) \n    (foo (rest plist))\n    (first plist)))","user":"566df171e4b0a866af6896d2"},{"code":"(fn [sq]\n  (if (list? sq)\n    (nth sq (dec(count sq)))\n    (clojure.core/get sq (dec(count sq)))))","problem":19,"user":"5322c946e4b09d4e7a9b54c5"},{"code":"(fn my-last [s]\n  (if (empty? (rest s))\n    (first s)\n    (my-last (rest s))))","problem":19,"user":"501948b3e4b0b6630b101db5"},{"code":"(fn [x] (first (reverse x)) )","problem":19,"user":"4ea882c7535d7eef308072fc"},{"problem":19,"code":"(fn f [x] (println x) (if (= 1 (count x)) (first x) (f (rest x))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":19,"code":"(fn [x] \n  (first\n   (reverse x)))","user":"5548c46be4b0a04f79299560"},{"code":"(fn lst [s] (if (next s)\n              (recur (next s))\n              (first s)))","problem":19,"user":"4ec0200f535dfed6da9c6da0"},{"code":"(fn my-last [s]\n    (if (empty? (rest s))\n      (first s)\n      (my-last (rest s))))","problem":19,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn lastof[x] (first (reverse x)) )","problem":19,"user":"537bca8be4b06839e8705e71"},{"code":"(fn last-element[x]\n  (if (= '() (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4fb12b35e4b081705acca275"},{"code":"(fn [s] (reduce (fn [_ x] x) (first s) s))","problem":19,"user":"50fc9c08e4b0d10d794c19f9"},{"problem":19,"code":"(fn [coll]\n  (loop [xs coll]\n    (if (= 1 (count xs))\n      (first xs)\n      (recur (next xs)))))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn [l] (if (next l) (recur (next l)) (first l)))","problem":19,"user":"4f8d34e5e4b02e764a0a51aa"},{"problem":19,"code":"#(loop [things %]\n   (if (= (count things) 1)\n     (first things)\n     (recur (rest things))))","user":"57eea2bee4b0bfb2137f5bc3"},{"problem":19,"code":"(fn find-last-element [x]\n  (if (next x)\n    (find-last-element (rest x))\n    (first x)))","user":"5e872aaae4b09a7a73c8bbe5"},{"code":"#(first (into '() %))","problem":19,"user":"5353afa0e4b084c2834f4b03"},{"problem":19,"code":"(fn [x] (let [c (count x)] (case c 0 nil 1 (first x) (recur (rest x)))))","user":"54f8b6f4e4b01ecee9d8882c"},{"problem":19,"code":"(fn lst [xs]\n    (if (not-empty (rest xs)) \n      (lst (rest xs))\n      (first xs)\n    ))","user":"5776903ee4b0979f8965163b"},{"problem":19,"code":"{[1 2 3 4 5] 5\n '(5 4 3) 3\n [\"b\" \"c\" \"d\"] \"d\"}","user":"5f8d2d9de4b0715f5002d757"},{"problem":19,"code":"(fn [s] ( \n              if (next s)\n              (recur (rest s) ) \n              (first s)\n              )\n  )","user":"56c9970ce4b0ed865f9758de"},{"code":"(fn [coll]\n  (reduce (fn [_ v] v) coll))","problem":19,"user":"4ecaa5da535d6d7199dd3707"},{"problem":19,"code":"(fn [x] (let [total-length (count x)\n              last-element (nth x (- total-length 1))] last-element))","user":"595b7c12e4b066ee0a44afda"},{"code":"reduce :|","problem":19,"user":"4e307313535deb9a81d77f14"},{"problem":19,"code":"(fn last-seq [coll] (reduce (fn [a b] b) coll))","user":"550e0951e4b06e50f9beb163"},{"problem":19,"code":"(fn [a] (nth a ( dec (count a))))","user":"56438342e4b0018b46ad8bf4"},{"problem":19,"code":"(fn [z] (first (reverse z)))","user":"55b9e905e4b01b9910ae29c3"},{"code":"(fn my-last [x] (if (= (rest x) ()) (first x) (my-last (rest x))))","problem":19,"user":"5196568fe4b04c0af7ff3c1c"},{"problem":19,"code":"(fn [l]\n  (if (empty? (rest l))\n    (first l)\n    (recur (rest l))))","user":"5885cc62e4b0f1effa3b76c1"},{"code":"#( nth % (- (count %) 1) )","problem":19,"user":"4e813b23535db62dc21a62b9"},{"problem":19,"code":"(fn [xs]\n (let [[x & more] xs]\n  (if (empty? more) x\n  (recur more))\n  ))","user":"54708efce4b00cfc9eacc1b9"},{"problem":19,"code":"(fn [[n & more]] \n  (if more \n    (recur more) \n    n))\n  \n;(fn [xs]\n;  (first (reverse xs)))\n\n;(fn [xs]\n;  (nth xs (- (count xs) 1)))","user":"55f90d76e4b03cbcff9738bd"},{"problem":19,"code":"(fn[x](nth x (dec (count x))))","user":"54662430e4b01be26fd746e3"},{"code":"(fn last2 [a]\n  (if (next a)\n     (recur (next a))\n        (first a)))","problem":19,"user":"500a214de4b03d00572d2d74"},{"code":"reduce 'do","problem":19,"user":"4e498df9535dc968683fc4c4"},{"problem":19,"code":"(fn [seqs] (nth seqs(dec (count seqs))))","user":"58047205e4b0a837a8b30ca9"},{"code":"(fn [[x & xs]] (if-not xs x (recur xs)))","problem":19,"user":"5351980ce4b084c2834f4ae5"},{"problem":19,"code":"#(reduce (fn [r x] x) %1)","user":"553c4614e4b09218d5f45014"},{"problem":19,"code":"(fn [s] (let [f (first s) r (next s)] (if r (recur r) f)))","user":"5637557ce4b0bfe05bf117d4"},{"code":"(fn lastItem [seq] (if (= '() (rest seq)) \n  (first seq) \n  (lastItem (rest seq))))","problem":19,"user":"4fb266a5e4b081705acca28c"},{"problem":19,"code":"#(loop [c %] (if (= 1 (count c)) (nth c 0) (recur (rest c))))","user":"5516d26de4b06a49daca83b9"},{"problem":19,"code":"(fn [elements] \n  (loop [elements elements]\n    (if (= (count elements) 1)\n      (first elements)\n      (recur (next elements)))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"(fn foo [x] (if (seq (rest x)) (foo (rest x)) (first x)))","problem":19,"user":"50d235ace4b06ad58337ed0d"},{"problem":19,"code":"(fn [l]\n  (loop [[first & rest] l]\n   \t(if (= (count rest) 0)\n      first\n      (recur rest))))","user":"54d80751e4b0a52adc2e2035"},{"problem":19,"code":"(fn myLast [aList] (if (= 1 (count aList)) (first aList) (myLast (rest aList))))","user":"56326995e4b0bfe05bf117a3"},{"problem":19,"code":"(fn\n  [coll]\n  (first (reverse coll)))","user":"5484143de4b0e286459a1197"},{"problem":19,"code":"(fn [list]\n  (nth list\n       (- (count list) 1)))","user":"54ff3db3e4b07d26eda61d4d"},{"code":"#(first (loop [the-seq %] (if (not= nil (next the-seq)) (recur (next the-seq)) the-seq)))","problem":19,"user":"501b7588e4b0ae3ec3946094"},{"problem":19,"code":"#(if (empty? (next %)) (first %) (recur (next %)))","user":"56ebe773e4b04a395b9a042a"},{"problem":19,"code":"(fn last-box [lst]\n  (if (empty? (rest lst)) (first lst)\n    (last-box (rest lst))))","user":"5bb6166fe4b0a20761a23579"},{"problem":19,"code":"(fn my-last [ls]\n  (if (= 1 (count ls))\n    (first ls)\n    (my-last (rest ls))))","user":"57a4a81ee4b0a966079561e8"},{"problem":19,"code":"(fn [lst] (first(reverse lst)))","user":"5fd69363e4b05ac5b16ea10e"},{"code":"(fn [list]\n  (if \n    (empty? (rest list))\n    (first list)\n    (recur (rest list))))","problem":19,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn [numbers] (nth numbers (dec(count numbers))))","problem":19,"user":"50c5546de4b0951b67b28c18"},{"problem":19,"code":"(fn my-last [x]\n  ;; Returns the last element of a list\n  (loop [list x]\n    (if (= (count list) 1)\n      (first list)\n      (recur (rest list))\n)))","user":"558869ade4b059ccff29b1f7"},{"problem":19,"code":"(fn [s] (first\n         (take-last 1 (seq s))))","user":"586c6462e4b01531a375e97b"},{"code":"(fn [y] (first(loop [x y]\n  (if (= () ( rest x))\n    x\n    (recur (rest x))))))","problem":19,"user":"504e8e48e4b069badc5a33b3"},{"problem":19,"code":"(fn [coll]\n  (loop [hd (first coll)\n         tl (rest coll)]\n    (if (empty? tl)\n      hd\n      (recur (first tl) (rest tl)))))","user":"56e22366e4b03a7c14b85a30"},{"code":"reduce (fn [_ a] a)","problem":19,"user":"51592b81e4b0394f658fe22c"},{"problem":19,"code":"(fn f [x]\n  (if (= 1 (count x)) \n    (first x)\n    (f (rest x))))","user":"55151bbfe4b055c2f668d4db"},{"code":"(fn ml [x]\n  (if (empty? (rest x))\n    (first x)\n    (ml (rest x))))","problem":19,"user":"527160ffe4b03e8d9a4a73ee"},{"code":"#(loop [[car & cdr] %] (if cdr (recur cdr) car))","problem":19,"user":"519d66d2e4b037b32803f9b2"},{"problem":19,"code":"(fn get-last [[item & more-items]]\n  (if more-items (get-last more-items) item))","user":"565b818ce4b068f2fe63dc05"},{"code":"(fn [s](if (next s)\n  (recur (next s))\n  (first s)))","problem":19,"user":"4f6ecc65e4b07046d9f4efdd"},{"problem":19,"code":"(fn retLast [a] (if (= 1 (count a)) (first a) (retLast (rest a))))","user":"5537982ae4b09218d5f44fcc"},{"problem":19,"code":"(fn [coll] \"takes a collection and returns the last element\" get((into [] coll) (dec (count (into [] coll)))))","user":"54de7948e4b024c67c0cf7a4"},{"problem":19,"code":"(fn last-element [list] (nth list (- (count list) 1)))","user":"59124367e4b0163c97b36eeb"},{"code":"(fn [[x & xs]]\n    (if (nil? xs)\n      x\n      (recur xs)))","problem":19,"user":"50563d76e4b0ce54f56f0407"},{"code":"(fn lst [x] (if (= [] (rest x)) (first x) (lst (rest x))))","problem":19,"user":"52f92349e4b047fd55836fe4"},{"code":"(fn lastx [sequ] \n  (if (= (rest sequ) '()) \n    (first sequ)\n    (lastx (rest sequ)))\n)","problem":19,"user":"5239caa6e4b0d705d026ef27"},{"problem":19,"code":"(fn findLast [v] (if (= 1 (count v))\n                  (nth v 0)\n                  (findLast (rest v))))","user":"55e0decbe4b050e68259b414"},{"problem":19,"code":"(fn lst [li]\n  (let [h (first li) t (rest li)]\n    (if (= t ()) h (lst t))))","user":"577f9799e4b0d36ec5835e67"},{"problem":19,"code":"(fn lst [l] (if (= (count l) 1)\n              (first l)\n              (lst (rest l))))","user":"5430a16de4b0dad94371f2da"},{"problem":19,"code":"(fn\n  ([collection]\n   (if (next collection) (recur (next collection))\n     (first collection)\n     )\n   )\n  )","user":"5a2e39fce4b09cafd31c7f77"},{"problem":19,"code":"(fn r [x] (if (= 1 (count x)) (first x) (r (rest x))))","user":"56c9feb1e4b0ea9b8538f714"},{"code":"(fn[l] (first (reverse l)))","problem":19,"user":"4e6a2498535d8ccf87e9fea1"},{"code":"(fn [coll] (first(reverse coll)))","problem":19,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn get_last [x] (first (reverse x)))","problem":19,"user":"4f0f9a13535d0136e6c22341"},{"code":"(fn a [coll]\n  (if (= 1 (count coll))\n      (first coll)\n      (a (rest coll))))","problem":19,"user":"4ff2ee54e4b0678c553fc340"},{"problem":19,"code":"(fn [xlist]\n  (let [restlist (rest xlist)]\n    (if (empty? restlist)\n      (first xlist)\n      (recur restlist))))","user":"556e1712e4b09a3098a52511"},{"problem":19,"code":"(fn get-last [xs]\n   (if (= (count xs) 1)\n     (first xs)\n     (get-last (rest xs))))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn l [s] (first (reverse s)))","problem":19,"user":"4f9fe06fe4b0dcca54ed6d3f"},{"problem":19,"code":"(fn [seq] (if (first (rest seq)) (recur (rest seq)) (first seq)))","user":"5b7608c9e4b047b03b2036da"},{"code":"(fn ^:static last2 [s]\n        (println s)\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"5178c2ace4b03d69594194da"},{"problem":19,"code":"(fn [s]\n  (loop [n (count s)\n         sub s]\n    (if (= 1 n) (first sub) (recur (dec n) (rest sub)))\n    )\n  )","user":"56a94562e4b07966d5a8a074"},{"problem":19,"code":"(fn [xs] (nth xs (- (.size xs) 1)))","user":"5e6b9955e4b04a83ad7cd27b"},{"problem":19,"code":"(fn my-last [lst] (if (= (rest lst) '()) (first lst) (my-last (rest lst))))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":19,"code":"(fn [x] (loop [[f & r] x] (if (nil? r) f (recur r))))","user":"5e44f5b1e4b01d43a70e8e8d"},{"code":"(fn myFunc [s] \n  (if (= [] (rest s)) (first s) (myFunc (rest s))))","problem":19,"user":"534e0fdbe4b084c2834f4aac"},{"code":"(fn my-last [x] \n  (if \n    (= 0 (count (rest x)))\n    (first x) \n    (my-last (rest x)) \n  )\n)","problem":19,"user":"4fcd6bd2e4b065de69964ca9"},{"problem":19,"code":"(fn dosia [xs] (if (empty? (rest xs)) (first xs) (dosia (rest xs))))","user":"567d132ee4b05957ce8c61c3"},{"code":"reduce {}","problem":19,"user":"52e7afe1e4b09f7907dd148b"},{"problem":19,"code":"(fn t[x] (if (= (count x) 1) (first x) (t (rest x))))","user":"583019b8e4b051871117bfff"},{"code":"(fn foo [x] \n  (if (= (rest x) '() ) \n    (first x) \n    (recur (rest x))))","problem":19,"user":"516733fce4b079759a74a5e9"},{"code":"(fn [x] \n  (if-not (next x) (first x)\n    ;; otherwise\n    (recur (next x))\n  )\n)","problem":19,"user":"52ef2172e4b05e3f0be25ecd"},{"problem":19,"code":"(fn [ls]\n  (let [[f & remaining] ls]\n    (if (empty? remaining)\n      f\n      (recur (rest ls)))))","user":"54ea5e91e4b024c67c0cf840"},{"code":"(fn getlast [s] \n  (if (= (count s) 1)\n    (first s)\n    (getlast (rest s))))","problem":19,"user":"537f4b99e4b06839e8705eb2"},{"code":"(comp first (fn [x] (take-last 1 x)))","problem":19,"user":"5266516be4b03e8d9a4a7134"},{"problem":19,"code":"(fn l [s] (let [r (rest s)] (if (seq r) (l r) (first s))))","user":"54da46e5e4b024c67c0cf753"},{"problem":19,"code":"(fn [thing] (first (reverse thing)))","user":"566096d0e4b068f2fe63dc5a"},{"code":"(fn\n  [ys]\n  (loop [[x & xs] ys]\n    (if (nil? xs)\n      x\n      (recur xs))))","problem":19,"user":"52e8ee9ae4b09f7907dd14a1"},{"code":"(fn [x]\n(nth \n  (reverse x)  \n0)\n)","problem":19,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn a [x] (first (drop (dec (count x)) x)))","problem":19,"user":"533e2ccee4b085b17e897d8a"},{"code":"#(nth % (+ -1 (count %)))","problem":19,"user":"533b1611e4b0e30313ee6cc6"},{"problem":19,"code":"(fn f1 [x] (if (nil? (next x)) (first x) (f1 (next x))))","user":"55c86e35e4b0e31453f649e0"},{"problem":19,"code":"(fn foo [xs] \n         (if (> (count xs) 1) (foo (rest xs))\n             (first xs)))","user":"58c4492be4b021aa9917ed27"},{"problem":19,"code":"(partial reduce (comp second list))","user":"526e5159e4b03e8d9a4a7316"},{"problem":19,"code":"(fn [[beg & end]] (if end (recur end) beg))","user":"561d7246e4b064ca9f4b16b1"},{"problem":19,"code":"(fn [x] \n  (if (reversible? x)\n    (peek x)\n    (peek (vec x))))","user":"5f521a87e4b0a0bc16850a6f"},{"problem":19,"code":"#(nth % (dec (count %)))\n;better: (comp first reverse)","user":"59946541e4b0b211ea3aaac5"},{"code":"(fn mylast [l]\n  (if (empty? (rest l))\n    (first l)\n    (mylast (rest l))))","problem":19,"user":"4fdb881ee4b05e33b9224f5e"},{"code":"(fn [collect] (nth collect (- (count collect) 1)))","problem":19,"user":"52ad68f5e4b0c58976d9ac94"},{"problem":19,"code":"(fn last-element\n  [x]\n  (if (empty? (rest x))\n    (first x)\n    (last-element (rest x))))","user":"57109477e4b09c608db70435"},{"problem":19,"code":"(fn lst [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (lst (rest xs))))","user":"56761ab1e4b05957ce8c6154"},{"code":"reduce (fn [a,x] x)","problem":19,"user":"5097d80ae4b087ccf61a7aef"},{"code":"#(if (= 0 (count %)) nil (nth % (- (count %) 1)))","problem":19,"user":"4f42c76fe4b0d7d3c9f3fd0e"},{"code":"(fn [coll]\n  (first (drop (- (count coll) 1) coll)))","problem":19,"user":"53207e3de4b09d4e7a9b54a3"},{"code":"(fn return-last [sequence]\n  (if (= '() (rest sequence))\n      (first sequence)\n      (return-last (rest sequence))))","problem":19,"user":"506a1985e4b01dc6af13f83e"},{"problem":19,"code":"(fn [sequence] (\n    nth sequence (- (count sequence) 1)\n))","user":"58cea645e4b03c36ff7e58a6"},{"code":"(fn [x]\n  (let [nextx (next x)]\n    (if nextx\n      (recur nextx)\n      (first x))))","problem":19,"user":"4e80e0f2535db62dc21a62b8"},{"problem":19,"code":"#(let [x (- (count %) 1)] (nth % x))","user":"5706d8dfe4b0b0fb43fd0685"},{"code":"(fn my-last \n  [the-sequence]\n  (if (= (count (rest the-sequence)) 1)\n    (first (rest the-sequence))\n    (my-last (rest the-sequence))))","problem":19,"user":"537943c0e4b06839e8705e52"},{"problem":19,"code":"(fn [col] (nth col (-(count col)1)))","user":"5515b68de4b055c2f668d4ef"},{"code":"(fn [rest]  (nth rest (dec (count rest))))","problem":19,"user":"502d39c5e4b0d96a44ab2031"},{"problem":19,"code":"#(get (vec %) (- (count (vec %)) 1))","user":"556523fce4b0c656e3ff1815"},{"problem":19,"code":"(fn [seqn] (nth seqn (dec (count seqn))))","user":"5e83b9f2e4b09a7a73c8bbbf"},{"code":"#(reduce (fn [i x] x) %)","problem":19,"user":"4dde4c8d535d08e6dec9fdd6"},{"code":"#(if-let [t (next %)] \n   (recur t)\n   (first %))","problem":19,"user":"4fcd5958e4b065de69964ca7"},{"problem":19,"code":"(fn final [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (final (rest lst))))","user":"5a05dec4e4b01bb0ae8afdc1"},{"problem":19,"code":"(fn recycle [x] \n  (if (empty? (rest x))\n    (first x)\n  \t(recycle (rest x))))","user":"5b847d39e4b047b03b2037c1"},{"problem":19,"code":"(fn[x] (nth x ( - (count x) 1 )))","user":"5daed3d8e4b0f8c104ccfc8e"},{"code":"(fn [coll]\n  (nth coll\n       (dec (count coll))))","problem":19,"user":"53121863e4b08068f379ecf3"},{"code":"(fn [x] \n   (if (= (type x) clojure.lang.PersistentVector)\n     (x (- (count x) 1))\n     3))","problem":19,"user":"52151220e4b0961f15ac4da7"},{"code":"(fn last-elem [lst]\n  (cond (empty? lst) lst\n        (empty? (rest lst)) (first lst)\n        :else (last-elem (rest lst))))","problem":19,"user":"52c4d327e4b0c2d177d620e6"},{"problem":19,"code":"(fn get_last [seq] (first (reverse seq)))","user":"5edb07dde4b0c7845d86b0ed"},{"problem":19,"code":"(fn get-last [remaining-list]\n  (if (empty? (rest remaining-list))\n    (first remaining-list)\n    (recur (rest remaining-list))))","user":"55c313a0e4b0e31453f64986"},{"code":"#(first (drop (- (.size %) 1) %))","problem":19,"user":"504e397ee4b0f6ff3350c485"},{"problem":19,"code":"(fn get-last [seq] (nth seq (dec (count seq))))","user":"54cf0986e4b018d918be98c7"},{"code":"(fn get-last [items]\n  (if (> (count items) 1)\n    (get-last (rest items))\n    (first items)))","problem":19,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":19,"code":"(fn get-last [[first & rest]]\n  (if (nil? rest) \n    first\n    (get-last rest)))","user":"5483d59fe4b0e286459a1194"},{"problem":19,"code":"(fn [coll] \n  (reduce (fn [m x] x) nil coll))","user":"54393c3fe4b032a45b86931a"},{"code":"(fn [lis] \n  (nth lis (- (count lis) 1)))","problem":19,"user":"51e595a6e4b0efabf93c02d8"},{"problem":19,"code":"(fn [x] (nth x (- (count x) 1) x))","user":"54b7ceb3e4b0ed20f4ff6e8a"},{"code":"(fn [a] (nth a (- (count a) 1 ) ) )","problem":19,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":19,"code":"(fn [myseq]\n  (if (empty? (rest myseq))\n    (first myseq)\n    (recur (rest myseq))))","user":"54042a19e4b0df28a13c62e4"},{"code":"(fn [x] (let [rx (reverse x) ]  (first rx))   )","problem":19,"user":"4fa03445e4b0dcca54ed6d45"},{"problem":19,"code":"(fn get-last [s]\n  (cond\n   (= 1 (count s)) (first s)\n   :else (get-last (rest s))))","user":"59f90432e4b0ca45a743a333"},{"code":"(fn [x] (reduce #(if true %2) x))","problem":19,"user":"52e63181e4b09f7907dd146d"},{"code":"#(nth % \n      (- (count %) 1))","problem":19,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":19,"code":"(fn [s]\n  (if-let [n (next s)]\n    (recur n)\n    (first s)))","user":"4f392fc8e4b0e243712b1ee7"},{"problem":19,"code":"(fn last1 [coll]\n  (loop [c coll]\n    (let [[first & re] c]\n      (cond (empty? re) first\n            :else (recur (rest re))\n            ))))","user":"55dab5c8e4b0e31453f64ada"},{"code":"(fn final [seq]\n  (first (reverse seq)))","problem":19,"user":"516ff477e4b034fe8eaf70f3"},{"problem":19,"code":"(fn [lst]\n  (loop [x lst curr 0]\n    (if (empty? x)\n      curr\n      (recur (rest x) (first x)))))","user":"57a7f7d8e4b0a96607956218"},{"problem":19,"code":"(fn end [l] (if (empty? (rest l)) (first l) (end (rest l))))","user":"55c2d412e4b0e31453f64982"},{"code":"#(loop [conj %]\n   (if (= [] (rest conj))\n          (first conj)\n          (recur (rest conj))))","problem":19,"user":"534cef2de4b084c2834f4a96"},{"problem":19,"code":"#(first (reverse (rest %)))","user":"54c2ab50e4b045293a27f607"},{"problem":19,"code":"(fn [[f & r]]\n  (if (nil? r)\n    f\n    (recur r)))","user":"5185ad63e4b0da5a5be3bac2"},{"problem":19,"code":"(fn\n  [input]\n  (nth input (- (count input) 1)))","user":"5594523be4b0c79f6e1db951"},{"problem":19,"code":"(fn lastelement [list]\n  (loop [x (first list) \n         my-list list]\n    (if (seq my-list)\n      (recur (first my-list)\n             (rest my-list))\n      x)))","user":"55f6d4fce4b06e875b46ce9b"},{"code":"#( nth % (- (count %) 1))","problem":19,"user":"53691dc7e4b0243289761e97"},{"problem":19,"code":"(fn las[lis]\n  (if (-> lis rest empty?)\n    (first lis )\n\t(las (rest lis))\n    )\n  )","user":"5aa11b37e4b0d174b936c840"},{"code":"(fn [list] (reduce (fn [all n] n) list))","problem":19,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":19,"code":"#(loop [coll %\n           elem nil]\n      (if (seq coll)\n        (recur (rest coll) (first coll))\n        elem))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"#(nth(reverse%)0)","problem":19,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn [coll] (nth coll (dec (count coll))))","problem":19,"user":"4e75500f535d7a570dd295c1"},{"problem":19,"code":"(fn [[part & remaining]] \n    (if remaining\n      (recur remaining)\n      part))","user":"58ebd6b3e4b056aecfd47d4c"},{"code":"(fn my_last [seq] (if (= '() (rest seq))\n                    \t(first seq)\n                        (my_last (rest seq))))","problem":19,"user":"52ac41fee4b0c58976d9ac85"},{"code":"(fn \n  [coll]\n  (nth coll (dec (count coll)))\n  )","problem":19,"user":"50fb2535e4b0d10d794c19e3"},{"code":"(fn [seq]\n    (let [pos (- (count seq) 1)]\n      (if (list? seq)\n        (nth seq pos)\n        (get seq pos))))","problem":19,"user":"511e763ce4b03e81d390ac29"},{"problem":19,"code":"(fn get-last [coll] \n  (nth coll (- (count coll) 1)))","user":"5dd00246e4b0948ae9d9ad45"},{"problem":19,"code":"(fn ([x] (first(reverse x))))","user":"565322e8e4b0f9d632dd846d"},{"problem":19,"code":"(fn lasst [x] (if (> (count x) 1) (lasst (rest x)) (first x)))","user":"60890415e4b0ae75613dceec"},{"code":"(fn [s]\n  (if (empty? (rest s)) (first s)\n    (recur (rest s))))","problem":19,"user":"5029fccee4b023940c84aa47"},{"problem":19,"code":"#(nth (vec %1) (dec (count %1)))","user":"560794bde4b08b23635d3182"},{"problem":19,"code":"; #(first (reverse %))\n\n;(fn [s]\n;\t(loop [x (first s)\n;\t\t\t\txs (rest s)]\n;\t\t\t\t(if (empty? xs) x \n;\t\t\t\t\t(recur (first xs) (rest xs)))))\n\n(fn [x]\n  (if-let [r (next x)]\n    (recur r)\n    (first x)))","user":"5f6a583ae4b02876ed9fd046"},{"problem":19,"code":"(fn[list1](first(reverse list1)))","user":"56a8b735e4b07966d5a8a06c"},{"problem":19,"code":"(fn [col]\n   (let [my-vec (vec col)\n         my-vec-count (count my-vec)]\n     (first (subvec my-vec (- my-vec-count 1) my-vec-count))))","user":"5db98f39e4b010eb3c36cd53"},{"problem":19,"code":"(fn mylast [seq] (first (reverse seq)))","user":"5cc1f975e4b0ccb0619627c8"},{"code":"(\n  fn[x](\n        nth x \n        (\n         - (count x) 1\n           \n         )\n        )\n  )","problem":19,"user":"53830109e4b06839e8705ed8"},{"problem":19,"code":"(fn get-end [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (get-end (rest seq))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"problem":19,"code":"(fn fun [x] (if (= (count x) 1)\n\t\t(first x)\n\t\t(recur (rest x))))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn [l] (first (drop (dec (count l)) l)))","problem":19,"user":"4f71ac00e4b07046d9f4f010"},{"code":"(fn [seq] ( first (nthnext seq ( - ( count seq ) 1 ) ) ) )","problem":19,"user":"5026916fe4b0c969f0b056e1"},{"code":"; #(first (reverse %))\n; (comp first reverse)\n; #(peek (vec %))\n; (comp peek vec)\n#(-> % reverse first)","problem":19,"user":"516e3cb1e4b0284f4b26df82"},{"code":"(fn this [ls] (if (= 1 (count ls)) (first ls) (this (rest ls))))","problem":19,"user":"4ffdca56e4b0678c553fc3e9"},{"code":"(fn ll [l]\n  (if (= (count l) 1)\n      (first l)\n      (ll (rest l))))","problem":19,"user":"52be4347e4b07a9af579231b"},{"code":"#(nth % (- (count %1) 1))","problem":19,"user":"4edee6a2535d10e5ff6f533e"},{"code":"(fn my-last\n  [s]\n  (nth s (dec (count s))))","problem":19,"user":"528e25b9e4b0239c8a67aed5"},{"problem":19,"code":"(fn [lst] \n \t(if (= (count lst) 1) (first lst) (recur (rest lst))\n    ))","user":"557ffdf1e4b05c286339e0e4"},{"code":"(fn [s] \n  (if (next s) \n      (recur (next s)) \n      (first s)))","problem":19,"user":"53308604e4b019098a6f8b5f"},{"code":"(fn [x]\n  (if (= 1 (count x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"538d464ee4b0b51d73faae69"},{"problem":19,"code":"(fn [s] (if-let [r (next s)] (recur r) (first s)))","user":"56a01895e4b0542e1f8d149f"},{"code":"#(if (nil? (next %)) (first %) (recur (rest %)))","problem":19,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":19,"code":"(fn [seq'] \n  (let [[x & xs]  seq']\n    (if (empty? xs)\n      x\n      (recur xs))))","user":"567bf820e4b05957ce8c61ad"},{"problem":19,"code":"(fn [s]\n    (if (next s)\n        (recur (next s))\n        (first s)))","user":"54fdaeace4b07d26eda61d39"},{"code":"(fn [x] (if (next x ) (recur (rest x)) (first x)))","problem":19,"user":"52261c7de4b06a1ecd0c4e7a"},{"code":"(fn [x] (if (= (count x) 1) (first x) (recur (rest x))))","problem":19,"user":"4eaf08ce535d7eef3080732d"},{"problem":19,"code":"(fn mylast [x] (if (= (rest x) ()) (first x) (mylast (rest x))))","user":"546ce5f1e4b00cfc9eacc187"},{"problem":19,"code":"(fn [lista] \n  (let [[x & xs] lista]\n    (if (= xs nil) x\n      (recur xs))))","user":"57902cd8e4b0ebec4cfb75a6"},{"problem":19,"code":"(fn [collection]\n  (nth collection (dec (count collection))))","user":"5d42c88ae4b05dd059a5437e"},{"code":"(fn end [x]\n  (first (reverse x)))","problem":19,"user":"500d784ee4b0ff215386cad3"},{"problem":19,"code":";(fn [s] (peek (vec s)))\n\n#(peek (vec %))","user":"562ae733e4b00e49c7cb4836"},{"problem":19,"code":"(fn [s] (if (= (count s) 1)\n            (first s)\n            (recur (rest s))))","user":"5a962c09e4b0d174b936c765"},{"code":"(fn getLast [elms] \n  (first \n    (reverse elms) )  \n)","problem":19,"user":"4eda05c1535d10e5ff6f5309"},{"problem":19,"code":"(fn [param1]\n  (if (empty? (rest param1))\n    (first param1)\n    (recur (rest param1))))","user":"5e3121e5e4b05b4b01516221"},{"problem":19,"code":";;(comp first reverse)\n\n(fn [[f & r]]\n  (if (seq r) (recur r) f))","user":"4fc4eb1ee4b081705acca354"},{"problem":19,"code":"(fn [x]\n          (nth x (dec (count x))))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn [lst]\n  (if (next lst)\n      (recur (next lst))\n      (first lst)))","problem":19,"user":"50555c06e4b0ce54f56f03fa"},{"code":"(fn mylast [input] (if (= 1 (count input))\n                     (first input)\n                     (mylast (rest input))))","problem":19,"user":"5186571de4b0da5a5be3bad1"},{"problem":19,"code":"(fn[n]\n  (first(reverse n)))","user":"5a9cdec0e4b0d174b936c7e1"},{"code":"(fn f [x] (nth x (- (count x) 1)))","problem":19,"user":"4e8b5cb8535d65386fec211b"},{"code":"(fn [c] (nth c (+ -1 (count c))))","problem":19,"user":"527a56abe4b03e8d9a4a7556"},{"code":"(fn [list]\n  (if (= 1 (count list))\n    (first list)\n    (recur (rest list))))","problem":19,"user":"4f0f3830535d0136e6c22338"},{"problem":19,"code":"(fn lastElem\n  [a]\n  (nth a (- (count a) 1)))","user":"5d123c75e4b02c15ef021997"},{"code":"(fn last-el [x] (first (reverse x)))","problem":19,"user":"4ec53eaf535d6d7199dd3688"},{"problem":19,"code":"(fn sandip[[n & more]](\n                       if more (recur more) n))","user":"59ef5f33e4b0966464fe6a2f"},{"problem":19,"code":"(fn getlast [s] (if (<= (count s) 1) (first s) (getlast (rest s))))","user":"59468de7e4b07ddc2dafad88"},{"code":"#(if (empty? (rest %))\n\t      (first %)\n\t      (recur (rest %)))","problem":19,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":19,"code":"(fn x [[h &  t]] (if (empty? t) h (x t)))","user":"54534c83e4b0e397800069cd"},{"code":"(fn last-one [[x & rest]]\n  (if rest\n    (recur rest)\n    x))","problem":19,"user":"50812debe4b01a93d3f38e4c"},{"problem":19,"code":"(fn \n  [coll]\n  (let [[first & rest] coll]\n    (if (empty? rest)\n      first\n      (recur rest))))","user":"5dd65ea4e4b0948ae9d9ad7f"},{"code":"(fn last1 [v]\n  (if (next v)\n    (last1 (rest v))\n    (first v)))","problem":19,"user":"50d4309de4b09cc622d65a66"},{"problem":19,"code":"(fn one [x] (if (= (rest x) '()) (first x) (one (rest x))))","user":"60389552e4b0d5df2af222ee"},{"problem":19,"code":"(fn  [x] (first(reverse x)))","user":"5aaad010e4b073f177442552"},{"problem":19,"code":"(fn [l]\n  (loop [head (first l) tail (rest l)]\n         (if (empty? tail)\n           head\n           (recur (first tail) (rest tail))\n         )))","user":"5708e8f6e4b0b0fb43fd06a4"},{"code":"#(nth % (- (count % ) 1))","problem":19,"user":"50255bafe4b0b0b8afb15aa8"},{"code":"(fn [args] (nth args (- (count args) 1)))","problem":19,"user":"4f072644535dcb61093f6c20"},{"problem":19,"code":"(fn get-rest [l]\n  (if (= (count l) 1)\n      (first l)\n      (get-rest (rest l))))","user":"59095df7e4b047aa04b1999b"},{"problem":19,"code":"(fn the-last [a-seq] (if (empty? (rest a-seq))\n              (first a-seq)\n              (the-last (rest a-seq))))","user":"56b2b8aae4b0982f16b37e0a"},{"code":"#(->> % reverse first)","problem":19,"user":"523bde95e4b07becd5be2202"},{"problem":19,"code":"reduce #(identity %2) \"\"","user":"55c6fd60e4b0e31453f649c9"},{"code":"reduce #(do %2) nil","problem":19,"user":"50479524e4b0371827a27bc4"},{"problem":19,"code":"(fn [s]\n  (cond\n   (= (count s) 0) nil\n   (= (count s) 1) (first s)\n   :else (recur (rest s))))","user":"5eb22708e4b00a66d4a95204"},{"problem":19,"code":"(fn [xs]\n  (if-let [nxs (next xs)]\n    (recur nxs)\n    (first xs)))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn[l] (nth l (dec(count l))))","problem":19,"user":"4f659386e4b07046d9f4ef44"},{"problem":19,"code":"(fn ff [q] (if (empty? (rest q) ) (first q) (ff (rest q))))","user":"5567b9dce4b0c656e3ff1846"},{"problem":19,"code":"#( (vec %) (- (count %) 1) )","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn toto [x] (if (= '() (rest x)) (first x) (toto (rest x))))","problem":19,"user":"511ba290e4b00c2a1fa7ff70"},{"problem":19,"code":"(fn [x] (if (vector? x) (peek x) (peek (vec x))))","user":"55dde144e4b050e68259b3d5"},{"problem":19,"code":"(fn [a] (reduce (fn [a b] b) a))","user":"5d03a7c3e4b0cc9c915881c8"},{"code":"(fn my-last [x] (first (reverse x)))","problem":19,"user":"4e4a817e535dc968683fc4cc"},{"problem":19,"code":"(fn [xs]\n  (first\n   (drop (dec (count xs))\n         xs)))","user":"55381162e4b09218d5f44fda"},{"code":"(fn letzt [x] (first (reverse x)))","problem":19,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":19,"code":"(fn [x]\n  (let [v (apply vector x)] (get v (- (count v) 1)) )\n  )","user":"5cc880b3e4b0ccb06196284b"},{"code":"(fn my-last [x] (if (= (rest x) [])\n                  (first x)\n                  (my-last (rest x))\n              \t)\n)","problem":19,"user":"5027a13de4b01614d1633fed"},{"problem":19,"code":"(fn\n  [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"5de013dee4b0948ae9d9ade3"},{"problem":19,"code":"( fn getlast [x] (first(reverse x)) )","user":"5d497a54e4b0776584bd6f19"},{"problem":19,"code":"(fn [xs]\n  (loop [xs xs]\n    (if (= 1 (count xs))\n      (first xs)\n      (recur (rest xs)))))","user":"5d217b1de4b02ea6f0fb69e6"},{"problem":19,"code":"(fn getlast [x]\n  (nth x (- (count x) 1)))","user":"5ec03772e4b00a66d4a95289"},{"code":"(fn [lst] (if (empty? (rest lst))\n(first lst)\n(recur (rest lst))))","problem":19,"user":"50563ae2e4b0ce54f56f0405"},{"problem":19,"code":"(fn myLast [x]\n    (if (= (count x) 1) (first x) (myLast(rest x))))","user":"5703d1fee4b08d47c97781fe"},{"problem":19,"code":"(fn [lst] (reduce (fn [_ b] b) lst))","user":"55edc088e4b0121d4835fde0"},{"problem":19,"code":"(fn [list] (first (rseq (vec list))))","user":"5e2d1883e4b05b4b015161df"},{"problem":19,"code":"(fn [ls]\n  (if (empty? (rest ls))\n    (first ls)\n    (recur (rest ls))))","user":"53eaa804e4b036ad0777e4ea"},{"problem":19,"code":"#(.get % (dec(count %)))","user":"59f58103e4b0966464fe6ac0"},{"code":"(fn llast [l] \n  (if (empty? (rest l))\n    (first l)\n    (llast (rest l))))","problem":19,"user":"53a09a1ee4b0ca733b9744b2"},{"problem":19,"code":"(fn [collection] (reduce (fn [a b] b) collection))","user":"55044fb8e4b086ebe8a79c7a"},{"code":"(fn [s]\n    (if (next s)\n        (recur (next s))\n      (first s))\n    )","problem":19,"user":"4ebd2ff7535dfed6da9c6d8d"},{"code":"(fn [in] (first (reverse in)))","problem":19,"user":"50608d4ce4b07251188e4455"},{"code":"(fn taste ([lst] (if (empty? (rest lst)) (first lst) (recur (rest lst)))))","problem":19,"user":"5102ac9de4b00c483ae176fa"},{"problem":19,"code":"(fn last_s [s] (first (reverse s)))","user":"58b2f085e4b0ebc645576d15"},{"problem":19,"code":"(fn [x]\n  (reduce (fn [answer sub-problem]\n            sub-problem)\n          0\n          x))","user":"570a2357e4b0b0fb43fd06b5"},{"problem":19,"code":"(fn [x] (loop [tok (first x) left (rest x)] (if (empty? left) tok (recur (first left) (rest left)))))","user":"58d28e14e4b03c36ff7e5902"},{"problem":19,"code":"(fn l[[i & others]] (if (empty? others) i (l others)))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn get-last [x] (\n  if (= (rest x) '()) (first x) (get-last (rest x))))","problem":19,"user":"4f9dbe07e4b0dcca54ed6d26"},{"problem":19,"code":"(fn my-last [x] (if (next x) (my-last (next x)) (first x)))","user":"5546704be4b0a04f7929953d"},{"code":"#( first ( reverse %1))","problem":19,"user":"4f920065e4b0dcca54ed6ca9"},{"problem":19,"code":"(fn[seq] (if (= (count seq) 1)\n           (nth seq 0)\n           (recur (rest seq))))","user":"585affbce4b0f14aab7c875f"},{"problem":19,"code":"(fn my-last [list] (let [[head & tail] list] (if (= tail nil) head (my-last tail))))","user":"569bda8ee4b0542e1f8d145a"},{"code":"#( first ( reverse % ) )","problem":19,"user":"5079ab69e4b08327cd804a63"},{"problem":19,"code":"(fn [elements]\n  (nth elements (dec (count elements))))","user":"5e7968dae4b085ba37836e04"},{"code":"(fn last-element-solution\n  [[x & xs]]\n  (if-not (seq xs)\n    x\n    (recur xs)))","problem":19,"user":"50c113bee4b096f585049c37"},{"problem":19,"code":"(fn final [l]\n  (cond\n    (empty? l) '()\n    (empty? (rest l)) (first l)\n    :else (final (rest l))))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"code":"#(nth % (dec(count %)))","problem":19,"user":"4fe20c55e4b0dd6cd5ce363d"},{"problem":19,"code":"(fn regresa-ultimo [x] (nth x (dec(count x))))","user":"55ca27b9e4b0e31453f649f7"},{"code":"(fn my_last [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"526e1bd0e4b03e8d9a4a730b"},{"problem":19,"code":"(fn [[first & rest]]\n  (if (nil? rest) first\n      (recur rest)))","user":"5d126728e4b02c15ef02199a"},{"problem":19,"code":"(fn [y] (loop [x y] (if (= (count x) 1) (first x) (recur (rest x)))))","user":"58468269e4b089d5ab817e92"},{"code":"(fn last-element [seq] (first (reverse seq)))","problem":19,"user":"50a3d1c9e4b0ceace084d499"},{"problem":19,"code":"(fn lst [s] (if (= (count s) 1) (first s) (lst (rest s))))","user":"5762bf13e4b0994c1922fbae"},{"code":"#( loop [ ultimo (rest %)]\n   \t(if( empty? (rest ultimo) )\n   \t\t(first ultimo)\n   \t\t(recur (rest ultimo))\n    )\n )","problem":19,"user":"4e94addc535dbda64a6f6b21"},{"code":"(fn [input] (nth input (- (count input) 1)))","problem":19,"user":"51cd06f9e4b02254fc79487b"},{"code":"(fn [x] (first (take-last 1 (seq x))))","problem":19,"user":"4e6fa98a535d5021c1a89623"},{"problem":19,"code":"(fn [thing]\n (nth thing (- (count thing) 1)))","user":"5415d115e4b01498b1a719f7"},{"problem":19,"code":"(fn [some-seq] \n  (loop [s some-seq] \n    (let [[f & r] s] \n      (if (empty? r) \n        f \n        (recur r)))))","user":"56603c7fe4b068f2fe63dc49"},{"code":"(fn [s] \n    \t\t(if (next s) (recur (next s)) (first s)))","problem":19,"user":"509fe2bae4b08df8156e9e42"},{"problem":19,"code":"(fn recur-last\n  [x]\n  \t(if (= (rest x) '())\n      (first x)\n      (recur-last (rest x))))","user":"56cdda13e4b0ea9b8538f752"},{"code":"(fn mylast [elements] (nth elements (- (count elements) 1)))","problem":19,"user":"53161a56e4b08068f379ed3e"},{"code":"(fn mylast [lst] (\r\n  if (nil? (next lst))\r\n  (first lst)\r\n  (mylast (next lst))\r\n  ))","problem":19,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":19,"code":"(fn [li] \n  (if (= 1 (count li))\n    (first li)\n    (recur (rest li))))","user":"5c96f3dde4b048ec896c5a67"},{"code":"(fn [s] (if (next s) (recur (next s)) (first s) ) )","problem":19,"user":"524e5e74e4b0541d1855b7d8"},{"code":"(fn fl [x] (if (seq (rest x)) (fl (rest x)) (first x)))","problem":19,"user":"50189302e4b029375d2a5057"},{"problem":19,"code":"#(loop [coll %] \n   (if (> (count coll) 1)\n     (recur (rest coll))\n     (first coll)))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":19,"code":"(fn [s] (loop [s s] \n          (if (empty? (rest s))\n            (first s)\n            (recur (rest s)))))","user":"598ff38ce4b0fcebec4de869"},{"code":"reduce (fn [a b] b)","problem":19,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":19,"code":"reduce (fn [x y] y) []","user":"5828927ee4b051871117bf38"},{"problem":19,"code":"#(if\n    (= (count %) 1)\n    (first %)\n    (recur (rest %)))","user":"5d0e58ede4b0cc9c91588254"},{"code":"(fn [lst]\n  (let [f (first lst)\n        r (rest lst)]\n    (if (= () r)\n      f\n      (recur r))))","problem":19,"user":"4ec5510d535d6d7199dd3694"},{"problem":19,"code":"(fn [xs]\n  (loop [res xs]\n    (if (empty? (rest res))\n      (first res)\n      (recur (rest res)))))","user":"5d13af73e4b0902706380dbe"},{"problem":19,"code":";;(fn [x] (first (reverse x)))\n(comp first reverse)","user":"580d7bdae4b0849f6811b73c"},{"code":"(fn my-last [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (my-last (rest lst))))","problem":19,"user":"53879e89e4b06839e8705f23"},{"problem":19,"code":"(fn my-last [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","user":"57481f1fe4b009280f9f2b82"},{"problem":19,"code":"(fn foo [x]\n  (cond (= (rest x) `()) (first x)\n        :else (foo (rest x))))","user":"53bdf76ce4b0d9a98559a6db"},{"code":"(fn [s] (if (seq (rest s)) (recur (rest s)) (first s)))","problem":19,"user":"52e814fee4b09f7907dd1493"},{"code":"(fn lst [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (lst (rest seq))))","problem":19,"user":"51a3ca78e4b0e77c4ca60bfa"},{"problem":19,"code":";(fn [coll] (nth coll (- (count coll) 1)))\n;#(first (reverse %))\n;#(nth % (dec (count %)))\n(comp first reverse)","user":"57ee42c4e4b0bfb2137f5bb1"},{"code":"reduce (fn[a,b](second [a b]))","problem":19,"user":"5169d422e4b051e2a73aba53"},{"problem":19,"code":"(fn lastelt [alist]\t\n         (cond \t\n           (nil? (second alist)) (first alist)          \n           :else (lastelt (rest alist))))","user":"5ca3695fe4b048ec896c5ba9"},{"problem":19,"code":"(fn [s]\n  (loop [s s]\n    (let [r (rest s)]\n      (if (empty? r)\n        (first s)\n        (recur r)))))","user":"5b96c1f3e4b0c0b3ffbd4a80"},{"code":"(fn lastelem [l]\n  (if (empty? (rest l))\n      (first l)\n      (lastelem (rest l))))","problem":19,"user":"505024a4e4b0a02f9cffdeb4"},{"problem":19,"code":"(fn end [ls] (if (= (rest ls) '()) (first ls) (end (rest ls))))","user":"5ddae6cce4b0948ae9d9ada6"},{"problem":19,"code":"(fn lst[x] (nth x (- (count x) 1)))","user":"58175fade4b0c0e9c07b838f"},{"code":"(fn my-last\n  [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (my-last (rest lst))))","problem":19,"user":"4e7a479b535db169f9c796aa"},{"problem":19,"code":"(fn [something] (first (reverse something)))","user":"5e148049e4b0a047bd49f6eb"},{"code":"(fn\n  [x]\n  (if (seq x)\n    (loop [[h & t] x]\n      (if (empty? t)\n        h\n      \t(recur t)))\n    nil))","problem":19,"user":"510d1ff4e4b078ea7192112f"},{"problem":19,"code":"(fn [l]\n  (nth l (dec (count l)))\n  )","user":"6060bebfe4b03746e80ebf68"},{"problem":19,"code":"(fn [s] (peek (vec s)))","user":"58f3c18ee4b0438e51c2cead"},{"problem":19,"code":"(fn [x] {:pre [(sequential? x)]} (first (reverse x)))","user":"5552396ae4b0deb715856df1"},{"problem":19,"code":"#(loop [col %]\n   (if (= 1 (count (rest col)))\n     (first (rest col))\n     (recur (rest col))))","user":"56705858e4b0a866af6896ef"},{"code":"(fn end [x] (nth x (- (.count x) 1)))","problem":19,"user":"527f707fe4b0757a1b1713cf"},{"code":"(fn [alist]\n  (if (> (count alist) 1)\n    (recur (rest alist))\n    (first alist)))","problem":19,"user":"4e956be1535dbda64a6f6b34"},{"problem":19,"code":"(fn [items] ((comp first reverse) items))","user":"52c5d094e4b0c2d177d620ff"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (nil? xs)\n    x\n    (recur xs)))","user":"58b783f2e4b0ebc645576d7f"},{"problem":19,"code":"(fn [the-seq] (first (reverse the-seq)))","user":"56849b93e4b04eec3ec5cfbf"},{"problem":19,"code":"(fn [s]\n  (loop [r s]\n    (if (= 1 (count r))\n      (first r)\n      (recur (rest r)))\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":19,"code":"(fn [lst]\n  (loop [lst lst\n         aux 0]\n    (if (empty? lst)\n      aux\n      (recur (rest lst) (first lst)))))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":19,"code":"(fn last-item [s] \n  (if (nil? (second s))\n    (first s)\n    (last-item (rest s))))","user":"58a5a099e4b01a0c0b232918"},{"problem":19,"code":"(fn get-last [coll] (cond \n                     (= (count coll) 1) (first coll)\n                     :else (get-last (rest coll))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":";; #(first (reverse %)) ;; my intial attempt\n(comp first reverse) ;; this composes the first and reverse functions","problem":19,"user":"52471ac0e4b05ef8e38e6354"},{"code":"(fn [[a & b]]\n  (if b\n      (recur b)\n      a))","problem":19,"user":"50427899e4b0add3005c0fc2"},{"problem":19,"code":"(fn last-element\n  [s]\n  (first (reverse s)))","user":"4febb00ee4b0681fd128dc97"},{"problem":19,"code":"(fn [x]\n  (first (drop (- (count x) 1) x)))","user":"597d0e43e4b0dbe32238d095"},{"code":"(partial reduce (fn [x,y] y))","problem":19,"user":"505885c4e4b06522596eba7b"},{"problem":19,"code":"(fn getlast \n  ([xs]\n  (getlast nil xs))\n  ([l xs]\n  (if (empty? xs) l (getlast (first xs) (rest xs)))))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":19,"code":"(fn [lista] (nth lista (dec (count lista))))","user":"5e6b891ee4b04a83ad7cd27a"},{"code":"#(if (next %)\n      (recur (next %))\n      (first %))","problem":19,"user":"50052fd0e4b0678c553fc45d"},{"problem":19,"code":"(fn lastE\n  [n]\n  (first (reverse n)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":19,"code":"#(first (reverse %))\n; http://stackoverflow.com/questions/8264881/clojure-find-last-element-without-using-last-function","user":"5637bd38e4b0bfe05bf117de"},{"problem":19,"code":"(fn [x] \n  (nth x (- (count x) 1) )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":19,"code":"#(first  (reverse %1))","user":"59deedace4b01968742fed84"},{"problem":19,"code":"#_(first (reverse %))\n(comp first reverse)","user":"57ba55c1e4b0fbc9809a2801"},{"problem":19,"code":"#(->> (into [] %)\n      rseq\n      first)","user":"5abeb697e4b073f177442725"},{"problem":19,"code":"(fn temp [x] (if (empty? (rest x)) (first x) (temp (rest x))))","user":"55adf65fe4b03311e7b732b0"},{"problem":19,"code":"(fn get-last [sq] (nth sq (dec (count sq))))","user":"59b7120fe4b05c620303ca3b"},{"code":"#(first (reverse  %)\n)","problem":19,"user":"4fbe84dee4b081705acca313"},{"problem":19,"code":"(fn [sequ] (nth sequ (- (count sequ) 1)))","user":"54be3ab6e4b0ed20f4ff6ee7"},{"problem":19,"code":"(fn [x]\n   (if (next x)\n     (recur (next x))\n     (first x)))","user":"6056e1f4e4b069ae89ce6adc"},{"code":"(fn [coll]\n  (reduce (fn [_ item] item) coll))","problem":19,"user":"508e26c2e4b0f17d83ea26ca"},{"problem":19,"code":"(fn my-last [x] \n  (if (== 1 (count x))\n    (first x)\n    (my-last (rest x))))","user":"54e3e09fe4b024c67c0cf7e4"},{"code":"(fn [xs] (if (> (count xs) 1)\n           (recur (rest xs))\n           (first xs)))","problem":19,"user":"519b231ee4b0ac1b7dced6a2"},{"problem":19,"code":"(fn[a]\n  (first(reverse a)))","user":"5b8403dce4b047b03b2037ba"},{"code":"#(nth (take-last 1 %) 0)","problem":19,"user":"50cab30ce4b07a9c197b99ad"},{"problem":19,"code":"(fn [s]\n        (if (next s)\n          (recur (next s))\n          (first s)\n         )\n  )","user":"5d67bfe6e4b0db5d338d15f6"},{"problem":19,"code":"(fn [x] (if (list? x) (first (reverse x)) (peek x)))","user":"5619b22ee4b053970a773afe"},{"code":"(fn zomglast \n  [thing] \n    (let [tail (rest thing)] \n      (if (= tail ()) \n        (first thing) \n        (recur tail))))","problem":19,"user":"4e55958a535d8a8b8723a27e"},{"code":"#((vec %) (- (.size %) 1))","problem":19,"user":"4f03fce2535dcb61093f6b8a"},{"code":"(fn f [li] (reduce (fn f [x y] y) li))","problem":19,"user":"52489e31e4b05ef8e38e63e2"},{"code":"(fn my-last [s] \n  (if (= (count s) 1)\n  (first s)\n  (my-last (rest s))))","problem":19,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [s]\n  (if (= (count s) 1)\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4fa982fae4b081705acca1e0"},{"code":"#(if (= (count %), 1)\n     (first %)\n     (recur (rest %)))","problem":19,"user":"52846deee4b0239c8a67adcf"},{"problem":19,"code":"#(peek (into '() %))","user":"59b8ee96e4b0a024fb6ae3c0"},{"problem":19,"code":"(partial (fn [y a] (y y a))\n         (fn [k x]\n           (if (empty? (rest x))\n               (first x)\n               (k k (rest x)))))","user":"569da949e4b0542e1f8d147e"},{"code":"(fn l [x] (if (= (rest x) '()) (first x) (l (rest x))))","problem":19,"user":"504e5989e4b0f6ff3350c4a4"},{"problem":19,"code":"#(first (drop (- (count %) 1) %))\n\n;peek is a very effiecient way of getting last from a vector, so (comp peek vec)","user":"56b295f7e4b0982f16b37e08"},{"problem":19,"code":"(fn my-last [coll]\n  (reduce #(do %2) coll))","user":"5776e21de4b0979f89651642"},{"problem":19,"code":"#(nth % (-> % count (- 1)))","user":"60aeadd4e4b00e9e6653c499"},{"code":"(fn l [x] (if (= (count x) 1) (first x) (l (rest x))))","problem":19,"user":"52d7b0ade4b09f7907dd137c"},{"problem":19,"code":"(fn [coll] \n  (let [[fst & rst] coll]\n\t(if-not rst fst (recur rst))\n    )\n  )","user":"574ff497e4b02ea114799266"},{"problem":19,"code":"(fn lst [xs] (if (= () (rest xs)) (first xs) (lst (rest xs))))","user":"59d6f3d9e4b0ef0a1e9b5c28"},{"problem":19,"code":"#(nth % (- (count %) 1)   )","user":"59419bdfe4b060784b3b78f7"},{"problem":19,"code":"(fn last-element \n   [x]\n   (if (empty? (rest x))\n     (first x)\n     (last-element (rest x))))","user":"60396c95e4b0d5df2af222f4"},{"problem":19,"code":"(fn [xs]\n    (if-let [tail (seq (rest xs))]\n      (recur tail)\n      (first xs)))","user":"57e70a99e4b0bfb2137f5af8"},{"problem":19,"code":"(fn [s] (first (reverse s)))\n;;(fn [s] (nth s (- (count s) 1)))","user":"511d5247e4b022853b0e07a2"},{"problem":19,"code":"(fn [sequence]\n  (reduce (fn [result current]\n            current)\n          sequence)\n  )","user":"58c93089e4b021aa9917ed9b"},{"problem":19,"code":"(fn [shortlist]\n\t(first (reverse shortlist)))","user":"56a7be01e4b07966d5a8a05e"},{"code":"#(nth % (dec (count %)))","problem":19,"user":"4de4831d535d08e6dec9fdef"},{"problem":19,"code":"(fn [[x & xs]] (if (seq? xs) (recur xs) x))","user":"56009544e4b04bb52996e16c"},{"code":"(fn me [x] (if (> (count x) 1) (me (rest x)) (first x)))","problem":19,"user":"4e6a4c34535d8ccf87e9fec3"},{"code":"(fn [s]\n  (let [r (rest s)]\n    (if (seq r)\n      (recur r)\n      (first s))))","problem":19,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":19,"code":"(fn lastelt [x] (nth x (- (count x) 1)))","user":"55bb6a19e4b01b9910ae29e5"},{"code":"(fn [[f & rest]]\n  (if rest\n    (recur rest)\n    f))","problem":19,"user":"4f8c813de4b02e764a0a519f"},{"problem":19,"code":"(fn getLast [x] (if (= (count x) 1) (first x) (getLast (rest x))))","user":"5c0ebca5e4b01240ff567147"},{"problem":19,"code":"(fn [x] (nth x \n             (dec\n              (count x))))","user":"597f8984e4b0dbe32238d0bf"},{"code":"(fn [[item & coll]] (if (empty? coll) item (recur coll)))","problem":19,"user":"4e6dd51b535d5021c1a895f6"},{"code":"(fn [x] ((comp first reverse ) x))","problem":19,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":19,"code":"(fn my-last\n  [l]\n  (let [[one & rest] l]\n       (if (empty? rest) one\n           (recur rest))\n))","user":"59ee2284e4b0966464fe6a0f"},{"problem":19,"code":"(fn last_element [elements] (first (reverse elements)))","user":"55ca3983e4b0e31453f649f8"},{"problem":19,"code":"(fn [x] (if (= 0 (count (rest x))) (first x) (recur (rest x))))\n; #(first (reverse %))","user":"5beef257e4b0a6d31fed2137"},{"problem":19,"code":"(fn last_el [seq] (if (empty? (rest seq)) (first seq) (last_el (rest seq))))","user":"5600a6cfe4b04bb52996e16e"},{"code":"#(->\n  %\n  reverse\n  first)","problem":19,"user":"5234870ee4b05e80434a505c"},{"problem":19,"code":"(fn [param]\n      (let [[:as original] param]\n        (nth original (- (count original) 1))))","user":"5f8d76c3e4b0715f5002d758"},{"code":"(fn [[x & xs]] (if xs (recur xs) x))","problem":19,"user":"4ed188c8535d44c135fd68cf"},{"problem":19,"code":"(fn [x] (loop [i nil l x] (if (empty? l) i (recur (first l) (rest l)) )))","user":"58aae714e4b01a0c0b23298e"},{"code":"(fn [s]                                                                       \n           (loop [s2 s]                                                                             \n              (if (empty? (rest s2))                                                                \n                  (first s2)                                                                        \n                  (recur (rest s2)))))","problem":19,"user":"4e360072535deb9a81d77f30"},{"problem":19,"code":"(fn [x]\n      (if (empty? x)\n        x\n        (loop [x x]\n          (if (empty? (rest x))\n            (first x)\n            (recur (rest x))))))","user":"551a21ece4b091ff45eda993"},{"problem":19,"code":"#(let [h (first %)\n         r (rest %)]\n     (if (empty? r)\n       h\n       (recur r)))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn fun [x] (if (seq (rest x)) (fun (rest x)) (first x)))","problem":19,"user":"5342faf9e4b084c2834f4a16"},{"code":"(fn [list-arg] (nth list-arg (- (count list-arg) 1)))","problem":19,"user":"51d821d8e4b0154f82ab930a"},{"problem":19,"code":"(fn [coll] (if (empty? coll) \n             nil \n            (if (empty? (rest coll))\n              (first coll)\n              (recur (rest coll)))\n           )\n )","user":"54100c73e4b01498b1a7199e"},{"problem":19,"code":"(fn [seqs] (first (reverse seqs)))","user":"5a291617e4b07f18be40aa76"},{"code":"(fn foo [list] (if (= 1 (count list)) (first list) (foo (rest list))))","problem":19,"user":"505d70e8e4b0e6aca564be09"},{"problem":19,"code":"(fn [[h & ts]] (if (empty? ts) h (recur ts)))","user":"5e178fbee4b00200644e3d57"},{"problem":19,"code":"(fn ls [l]\n  (if (empty? (rest l))\n    (first l)\n    (ls (rest l))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"(fn [vals]\n  (loop [[x & xs] vals]\n    (if (empty? xs)\n      x\n      (recur xs))))","problem":19,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":";(fn it [stuff] (if (= (next stuff) nil) (first stuff) (it (next stuff))))\n(fn ml [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4f048f67535dcb61093f6bd3"},{"code":"(fn [x] (get (to-array x) (- (count x) 1)))","problem":19,"user":"514b33e8e4b0bd81940b86c9"},{"problem":19,"code":"(fn[le] (first (reverse le)))","user":"571e1d9de4b0145328a76287"},{"code":"(fn [param] (peek (vec param)))","problem":19,"user":"52c57371e4b0c2d177d620f3"},{"problem":19,"code":"(fn [k] (get (into [] k) (- (count k) 1)))","user":"56ecf2e6e4b04a395b9a0440"},{"code":"(fn lst [s]\n  (if (next s)\n    (lst (next s))\n    (first s)))","problem":19,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn [v]\n  (loop [f (first v), coll v]\n    (if (empty? coll) f\n      (recur (first coll) (rest coll)))))","problem":19,"user":"4edb6822535d10e5ff6f531b"},{"code":"#(if (next %)\n    (recur (next %))\n    (first %))","problem":19,"user":"50795d7ae4b08327cd804a5f"},{"problem":19,"code":"(fn last-el [lst] (if (= (count lst) 1) (first lst) \n                                        (last-el (rest lst))))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":19,"code":"(fn end [col] (if (empty? (rest col)) (first col) (end (rest col)) ))","user":"5be182eae4b0ed4b8aab4c9d"},{"code":"(fn herp [x]\n  (if\n    (empty? (rest x)) (first x)\n    (herp (rest x))))","problem":19,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":19,"code":"(fn [s] (loop [left (rest s) l (first s)] (if (empty? left) l (recur (rest left) (first left)))))","user":"545b486ae4b01be26fd7464f"},{"problem":19,"code":"(fn [l] (reduce (fn [memo n] n) l))","user":"545b0275e4b01be26fd74648"},{"problem":19,"code":"(fn f [[h & t]] (if (empty? t) h (f t)))","user":"553e007ae4b0a04f792994e7"},{"problem":19,"code":"(fn cevir [lst]  (if (empty? (next lst))    (first lst)  \t(cevir (next lst))))","user":"571c0c0fe4b07c98581c3b71"},{"problem":19,"code":"(fn last-x [x]\n(if (> (count x) 1) (last-x (rest x)) (first x))\n )","user":"562f2d4ee4b0ab312c17ebc6"},{"problem":19,"code":"(fn [s] \n  (nth s (- (count s) 1)))","user":"541bd782e4b01498b1a71a6b"},{"problem":19,"code":"(fn\n  [s]\n  (loop [l s]\n    (if (= 0 (count (rest l)))\n      (first l)\n      (recur (rest l)))))","user":"562fb774e4b0ab312c17ebd9"},{"code":"(fn [coll]\n  (loop [c coll]\n    (if (= 1 (count c))\n      (first c)\n      (recur (rest c)))))","problem":19,"user":"4e50ad74535dc968683fc4ec"},{"problem":19,"code":"(fn la\n  [x]\n  (let [[head & tail] x]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn getlast [x] (nth x (- (count x) 1)))","problem":19,"user":"4f0399c4535dcb61093f6b34"},{"problem":19,"code":"#(first (reverse %))\n;; (fn [x] (first (reverse x)))\n;; (fn last-elem [x] (first (reverse x)))","user":"55150524e4b055c2f668d4d9"},{"problem":19,"code":"(fn mylast [x] (if (next x) (mylast (rest x)) (first x)))","user":"5a662abbe4b0512ff01cd9c0"},{"problem":19,"code":"(fn l [x] (if (< 1 (.size x)) (l (rest x)) (first x)))","user":"5caf9a07e4b026601754b899"},{"code":"(fn [x] (reduce #(identity %2) x))","problem":19,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn lasty [x] (if (empty? (rest x))\n         \t(first x)\n         \t(lasty (rest x)))\n  )","problem":19,"user":"5263dca8e4b03e8d9a4a70bd"},{"problem":19,"code":"(fn [xs] \n  (nth xs (dec (count xs)))\n)","user":"5bd1364de4b0e9689409ee4b"},{"code":"(fn[elements](first (reverse elements)))","problem":19,"user":"5229cbeee4b04c906c9c6a85"},{"problem":19,"code":"(fn my-last \n  [my-seq]\n  (first (reverse my-seq)))","user":"55acd080e4b03311e7b73298"},{"problem":19,"code":"(fn my-last\n  [[x & xs]]\n  (if-not (zero? (count xs))\n    (my-last xs)\n    x))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn lst [col]\n  (if (next col)\n    (recur (next col))\n    (first col)))","problem":19,"user":"53386fb9e4b0e30313ee6c9a"},{"problem":19,"code":"(fn [seq-in] \n  (loop [my-seq seq-in]\n    (if (> (count my-seq) 1) \n      (recur (rest my-seq)) \n      (first my-seq))))","user":"5dc9c070e4b02f9375f4e1ee"},{"problem":19,"code":"#(nth % (- (count %)1 ))","user":"566835fde4b04acd4f672de3"},{"code":"(fn l [x] (if (> (count x) 1) (l (rest x)) (first x)))","problem":19,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn my-last [a-seq] (if (empty? (rest a-seq)) (first a-seq) (my-last (rest a-seq))))","problem":19,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":19,"code":"(fn getLast [lst]\n  (first (reverse lst)))","user":"59dd387be4b0a0ac046f2502"},{"code":"(rand-nth\n  (list\n    (fn [x] (first (reverse x)))\n    (fn [x] (nth x (- (count x) 1)))\n))","problem":19,"user":"514dbd08e4b019235f6c058d"},{"problem":19,"code":"(fn \n  [[firstel & remaining]]\n  ( if(empty? remaining) \n    firstel \n    (recur remaining)))","user":"58754bd0e4b01531a375ea61"},{"code":"(fn a [[x & s]] (if (empty? s) x (a s)))","problem":19,"user":"4f569218e4b0a7574ea71826"},{"problem":19,"code":"(fn [x]\n  (loop [l x]\n    (if (empty? (rest l))\n      (first l)\n      (recur (rest l))\n    )\n  )\n)","user":"5a786397e4b013a48d39976c"},{"problem":19,"code":"(fn last-in [list]\n  (if (= (count list) 1)\n    (first list)\n    (last-in (rest list))))","user":"55fe9daee4b00f4cabc57654"},{"problem":19,"code":"(fn [s] (let [[f & r] s] (if (nil? r) f (recur r))))","user":"571d063ee4b0145328a76272"},{"problem":19,"code":"#( nth % ( dec ( count %)))","user":"57016724e4b08d47c97781d6"},{"code":"(fn my-last [[x & xs]] (if (seq xs) (my-last xs) x))","problem":19,"user":"50e8422de4b0ebbe794eb7de"},{"code":"(fn [l]\n  (if\n    (= '() (rest l))\n(first l)\n(recur (rest l))))","problem":19,"user":"4ed2b168535d44c135fd68dd"},{"code":"(fn re [x] (first (reverse x)))","problem":19,"user":"4f8c933ae4b02e764a0a51a1"},{"code":"(fn [x] (if (empty? (rest x)) (first x) (recur (rest x))))","problem":19,"user":"4e4a94a9535dc968683fc4cd"},{"problem":19,"code":"(fn [seq] \n  (if (vector? seq) \n     (get seq (- (count seq) 1))\n     (nth seq (- (count seq) 1))))","user":"5d9c8a85e4b0eb781811cdad"},{"code":"(fn [x] (reduce (fn [_ y] y) x))","problem":19,"user":"4f03a3df535dcb61093f6b45"},{"code":"#(->> % (take-last 1) first)","problem":19,"user":"4fadbb17e4b081705acca23e"},{"problem":19,"code":"(fn [xs] \n  (loop [xs xs] \n    (if (next xs) \n      (recur (next xs)) \n      (first xs))))","user":"56d5bc66e4b0ea9b8538f7c2"},{"code":"(fn lst [l] (if (empty? (rest l)) (first l) (lst (rest l))))","problem":19,"user":"508a96ade4b016a2107004b3"},{"problem":19,"code":"#(loop [l % r (rest l)]\n   (if (not= 1 (count r))\n     (recur r (rest r))\n     (first r)))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":19,"code":"(fn [xs]\n  (if (nil? xs)\n    xs\n    (loop [x (first xs)\n           rest (next xs)]\n      (if (nil? rest)\n        x\n        (recur (first rest) (next rest))))))","user":"5ec1b293e4b00a66d4a95296"},{"problem":19,"code":"(fn [v](loop [v v](if(= (count v) 1) (first v) (recur (rest v)))))","user":"5a786223e4b013a48d39976b"},{"code":"(fn afterpenultimate [x] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"52d95ba3e4b09f7907dd13a6"},{"code":"(fn last1 [x] (if (= (count x) 1) (first x) (last1 (rest x))))","problem":19,"user":"52b18a74e4b0c58976d9acdf"},{"code":"(fn l [[a & b]] (if (zero? (count b)) a (l b)))","problem":19,"user":"53908e6be4b0b51d73faae9a"},{"code":"(fn lasty [arr]\n  (let [others (rest arr)]\n    (if (empty? others)\n      (first arr)\n      (lasty others))))","problem":19,"user":"52b4d8fae4b0c58976d9ad33"},{"problem":19,"code":"(fn \n  [[first & rest]]\n  (if rest\n    (recur rest)\n    first))","user":"5a904022e4b05369db4d254b"},{"code":"(fn f [x] (if (= (rest x) []) (first x) (f (rest x))))","problem":19,"user":"52a07565e4b04e0c58e87bc5"},{"code":"(fn [data] (nth data (dec (count data))))","problem":19,"user":"4fd6e70fe4b0dab7d829f379"},{"problem":19,"code":"(fn get-last [stuff]\n  (let [errything-else (rest stuff)]\n    (if (= 1 (count errything-else))\n      (first errything-else)\n      (get-last errything-else))))","user":"5a6bc345e4b0512ff01cda46"},{"problem":19,"code":"(fn my-last [[fst & rst]] (if rst (my-last rst) fst))","user":"56a0a85fe4b0542e1f8d14a5"},{"problem":19,"code":"(fn [coll] (first(drop (dec (count coll)) coll)))","user":"5fada7cce4b08cb800c85af5"},{"problem":19,"code":"(fn find-last [x] (if (= (rest x) ()) (first x) (find-last (rest x))))","user":"6036b21ce4b0d5df2af222de"},{"problem":19,"code":"(fn r [s] (if (= (count s) 1) (first s) (r (rest s))))","user":"556766c1e4b0c656e3ff1840"},{"code":"(fn get-last [s] (if (next s) (recur (next s)) (first s)))","problem":19,"user":"5029399be4b061fd216be4b6"},{"problem":19,"code":"(fn [items]\n  (nth items\n   (dec\n   \t(count items))))","user":"5b1674a3e4b038aa55420d55"},{"code":"(fn [s]\n  (let [tail (next s)]\n    (if (next tail)\n      (recur tail)\n      (first tail))))","problem":19,"user":"4ec3674b535dcc7ae8597d57"},{"code":"#(first (drop (- (count %) 1) %))","problem":19,"user":"4e6472b7535d8ccf87e9fe6c"},{"problem":19,"code":"(fn mylast [n]\n  (if (empty? (rest n)) (first n) (recur (rest n))))","user":"56ebf105e4b04a395b9a042c"},{"problem":19,"code":"(fn[l] (-> l reverse first))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":19,"code":"(fn mylast [l] (if (= 1 (count l)) (first l) (mylast (rest l))))","user":"59804b60e4b021a7a535fdcf"},{"problem":19,"code":"(fn my-last [s]\n  (loop [[head & tail] s]\n    (if-not (seq tail)\n      head (recur tail))))","user":"52d9e126e4b09f7907dd13b1"},{"code":"(fn end\n  [coll]\n  (cond\n   (empty? coll) coll\n   (= (count coll) 1) (first coll)\n   :else (end (rest coll))))","problem":19,"user":"515c75b0e4b069911535cf0f"},{"problem":19,"code":"#(loop [elems % res nil]\n   (if (empty? elems) res\n     (recur (rest elems) (first elems))))","user":"54302691e4b0dad94371f2d7"},{"problem":19,"code":"(fn [[x & sqn]] (if sqn (recur sqn) x))","user":"5835df4ce4b089d5ab817cec"},{"problem":19,"code":"(fn last-element [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (last-element (rest xs))))","user":"5ad351a5e4b0ea6055cfabc0"},{"problem":19,"code":"(fn [a]\n  (first (reverse a))\n  )","user":"5d94a878e4b0d3f9b434ad29"},{"code":"(fn [s]\n  (if (> (count s) 1)\n    (recur (rest s))\n    (first s)))","problem":19,"user":"5256cd77e4b0541d1855ba39"},{"problem":19,"code":"(fn [s]\n  (loop [s s]\n    (if-not (next s)\n      (first s)\n      (recur (rest s)))))","user":"57aa053fe4b0b8559636fc61"},{"code":"(fn [x] (nth (flatten x) (- (count (flatten x)) 1)))","problem":19,"user":"51ebe433e4b069f463c22cc4"},{"code":"(fn laster [nums] \n  (if (= (rest nums) '())\n    (first nums)\n  (laster (rest nums))))","problem":19,"user":"4f500769e4b03ad3f0c10cf8"},{"code":"(fn last-element[x](first(reverse x)))","problem":19,"user":"518de98fe4b0c929d50502e0"},{"code":"(fn mylast [a] \n  (if (next a)\n    (mylast (next a))\n    (first a))\n)","problem":19,"user":"4fe92032e4b0547ebccb2441"},{"code":"(fn [coll]\r\n  (if (next coll)\r\n      (recur (next coll))\r\n\t    (first coll)))","problem":19,"user":"4e46ac46535dc968683fc4b5"},{"code":"(fn [col] (first(reverse col)))","problem":19,"user":"513de0e6e4b0825f97f7f965"},{"problem":19,"code":"(fn [x] \n    (nth x (dec (count x)\n)))","user":"5a3e8445e4b0447ef91cc5b4"},{"problem":19,"code":"(fn [list] (first (#(reverse %) list)))","user":"56b6e354e4b0982f16b37e41"},{"problem":19,"code":"(fn length [v] \n  (if (= (rest v) '()) \n    (first v) \n    (length (rest v))))","user":"55f7bd07e4b06e875b46ceaf"},{"code":"(fn f [xs] (if (= '() (rest xs)) (first xs) (f (rest xs))))","problem":19,"user":"501f36dde4b0cb6ebc0a42e4"},{"code":"(fn[x](-> x reverse first))","problem":19,"user":"529952a4e4b02ebb4ef75081"},{"code":"(fn lastone [items] (first (rseq (vec items))))","problem":19,"user":"4e7dfd48535db169f9c796fa"},{"code":"#(get (vec %) (dec(count %)))\n; think I am probably missing a trick here - why doesn't 'get' work on lists I wonder ? (because they are single-linked and therefore not suited?","problem":19,"user":"52da7ae5e4b09f7907dd13b8"},{"code":"(fn [s]\n     (if (next s)\n       (recur (next s))\n       (first s)))","problem":19,"user":"52225315e4b0e6a83c8925f9"},{"problem":19,"code":"(fn [x] \n  (first\n   (reverse x))\n)","user":"5ed30cb6e4b016b56eae05c2"},{"code":"(fn [l] (loop [x l]\n  (let [r (rest x)]\n    (if (= (count r) 1)\n      (first r)\n      (recur r)))))","problem":19,"user":"507741b6e4b0fc74642bff5f"},{"problem":19,"code":"#(if (= 1 (count %))\n   (first %)\n   (recur (rest %))\n   )","user":"54eee3a3e4b024c67c0cf879"},{"problem":19,"code":"(fn [x] (get (into-array x) (- (count x) 1)))","user":"56b07cdae4b0982f16b37dda"},{"code":"#(loop [coll %]\n   (if (<= (count coll) 1)\n     (first coll)\n     (recur (rest coll))))","problem":19,"user":"511e3454e4b028ee16def195"},{"code":"(fn [x]\n  (if \n    (> (count x) 1)\n    (recur (rest x))\n    (first x)))","problem":19,"user":"4f0e7f7b535d0136e6c22325"},{"problem":19,"code":"(fn g [%] (nth % (- (count %) 1)))","user":"559e2486e4b08a52bd4f97cf"},{"problem":19,"code":"(fn [seqn]\n  (let [n (count seqn)]\n    (nth seqn (- n 1))))","user":"584574a1e4b089d5ab817e69"},{"problem":19,"code":"#(loop [lst %]\n   (if (= 1 (count lst))\n     (first lst)\n     (recur (rest lst))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"reduce #(when true %2)","problem":19,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"4f7f9665e4b033992c121bea"},{"problem":19,"code":"(fn [x]\n  (loop [in x]\n    (if (empty? (rest in))\n      (first in)\n      (recur (rest in)))))","user":"594bd637e4b07ddc2dafae41"},{"problem":19,"code":"(fn [xs] ((comp first reverse) xs))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":19,"code":"(fn [ls]\n  (loop [f (first ls)\n         r (rest ls)]\n    (if (empty? r)\n      f\n      (recur (first r) (rest r)))))","user":"54d492dbe4b0a52adc2e2001"},{"problem":19,"code":"#(loop [[elem & coll] %1]\n   (if (empty? coll)\n     elem\n     (recur coll)))","user":"56b9d20ee4b0f2655033593b"},{"problem":19,"code":"(fn [[head & tail]]\n  (if tail\n    (recur tail)\n    head))","user":"5560f39ce4b0c656e3ff17c2"},{"problem":19,"code":"(fn [x] (first  (reverse  x)))","user":"556ff948e4b09a3098a52527"},{"problem":19,"code":"(fn getLast\n  [[head & remainder]]\n  (if (nil? remainder) head (getLast remainder)))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn [s](if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"5142154ce4b0b50abeb46b2b"},{"code":"(fn last-element [s]\n  (if (= (count s) 1)\n    (first s)\n    (last-element (rest s))))","problem":19,"user":"53703300e4b0fc7073fd6e90"},{"code":"(fn last**\n  [coll]\n  (if (next coll)\n    (recur (rest coll))\n           (first coll)))","problem":19,"user":"4e1c2e16535d04ed9115e804"},{"problem":19,"code":"(fn [x]\n    (if (empty? (rest x))\n        (first x)\n        (recur (rest x))))","user":"568f0db0e4b0dcc4269f40dd"},{"problem":19,"code":"(fn rec [[x & others]] (if (nil? others) x (rec others)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":19,"code":"(fn my-last [my-seq]\n  (first(reverse my-seq))\n )","user":"5aefdc8de4b0cc2b61a3bc40"},{"code":"(fn[x](nth x (- (count x) 1)))","problem":19,"user":"4f871f6ae4b033992c121c57"},{"code":"(fn lastReq [x] \n         (if (empty? (rest x)) \n           (first x)\n           (lastReq (rest x)))\n         )","problem":19,"user":"524ac536e4b09eba1c0223a1"},{"problem":19,"code":"(fn [c] (reduce (fn [a b] b) c))","user":"554a75c9e4b0a04f79299575"},{"code":"apply (fn oi\n  ( [x & more]\n    (if (nil? more) x (apply oi more))\n  )\n)","problem":19,"user":"4e7f4147535db966e863cc3d"},{"problem":19,"code":"#(loop [fst (first %) rem (rest %)]\n   (if (empty? rem)\n      fst\n     (recur (first rem) (rest rem))\n   )\n )","user":"57118ee6e4b09c608db70447"},{"problem":19,"code":"(fn last-of-us [group] (first (reverse group)))","user":"56446954e4b0284900eef5f4"},{"problem":19,"code":"(fn [charsequence]\n  (nth charsequence (- (count charsequence) 1)))","user":"56040e58e4b0c80df0ca2654"},{"problem":19,"code":"(fn [seq]\n\t(loop [remaining seq]\n\t   (if (= 1 (count remaining))\n   \t\t(first remaining)\n\t   \t(recur (rest remaining)))))","user":"5601cd19e4b04bb52996e197"},{"problem":19,"code":"(fn f [[head & tail]] (if tail (f tail) head) )","user":"55cfa46ce4b0e31453f64a31"},{"problem":19,"code":"(fn lst [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (lst (rest coll))))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":19,"code":"(fn [col]\n  (loop [res col]\n  \t(if (empty? (rest res))\n      (first res)\n      (recur (rest res))\n    )\n   )\n  )","user":"545b77f5e4b01be26fd74653"},{"code":"(fn [c]\n  (first (reverse c)))","problem":19,"user":"50608ea0e4b07251188e4456"},{"code":"(fn lerst [thingy] (first (reverse thingy)))","problem":19,"user":"5015307be4b0aaedd199e910"},{"problem":19,"code":"(fn l [x] (cond (= 1 (count x)) (first x) :else (l (rest x))))","user":"5888f271e4b0f1effa3b7726"},{"problem":19,"code":"(fn [find-last] (first (reverse find-last)))","user":"5c8002cde4b0c8042a70ce09"},{"problem":19,"code":"(fn [input] (nth input (dec (count input))))","user":"5c547943e4b0fb8c5ffd9a0a"},{"problem":19,"code":"(fn\n  [colletion]\n  (get (into [] colletion) (dec (count (into [] colletion)))))","user":"5b514db6e4b02d533a91bcf4"},{"code":"(fn [x]\n  (if (next x)\n(recur (next x))\n(first x)))","problem":19,"user":"4fb0be97e4b081705acca26c"},{"problem":19,"code":"(fn [aseq] \n  (loop [x aseq]\n    (if (empty? (rest x))\n      (first x)\n      (recur (rest x))\n      )\n    )\n  )","user":"5425d65ce4b01498b1a71b14"},{"code":"(fn [coll]\n  (let [c (count coll)]\n    (nth coll (dec c))))","problem":19,"user":"51502056e4b098b221effc25"},{"problem":19,"code":";(fn last-by-reverse [x] \n;  (first (reverse x)))\n\n; (comp first reverse)\n; #(first (reverse %))\n\n#(nth % (dec (count %)))","user":"591d182ee4b09b4ee5954c10"},{"code":"(fn [seq] (if (= '() (rest seq))\n            (first seq)\n            (recur (rest seq))))","problem":19,"user":"534803c0e4b084c2834f4a51"},{"problem":19,"code":"(fn l [s]\n  (if (empty? (rest s))\n    (first s)\n    (l (rest s))))","user":"5969bb32e4b069c0a1a197ed"},{"code":"(fn laast [x]\n  (if (empty? x) nil (if ( = (count (rest x)) 1) (first (rest x)) (laast (rest x)))))","problem":19,"user":"525aa499e4b0cb4875a45cf7"},{"problem":19,"code":"(fn apna-last [coll] (if (= (count coll) 1) (first coll) (apna-last (rest coll))))","user":"5e0cbc14e4b099d064962f8e"},{"problem":19,"code":"(fn getfinal [items]\n  (let [[head & tail] items]\n    (if (= (count tail) 0)\n      head\n      (getfinal tail))))","user":"602ed851e4b0d5df2af22291"},{"problem":19,"code":"(fn c[col]\n  (if (= (count col) 1)\n    (first col)\n    (c (next col))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":19,"code":"#(reduce (fn [_ t] t) %)","user":"56b74ebce4b0982f16b37e44"},{"problem":19,"code":"(fn l [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","user":"5dae0b91e4b0f8c104ccfc87"},{"code":"(fn [x] (peek(reverse x)))","problem":19,"user":"4f294ff8e4b0d6649770a025"},{"code":"(fn my-last [seq] (if (= (count seq) 1) (first seq) (my-last (rest seq))))","problem":19,"user":"51377c10e4b04059df19f305"},{"problem":19,"code":"(fn the-last [lst] (if (empty? (rest lst)) (first lst) (the-last (rest lst))))","user":"54c47620e4b045293a27f61c"},{"code":"(fn [xs] (reduce (fn [x y] y) nil xs))","problem":19,"user":"53868e91e4b06839e8705f13"},{"problem":19,"code":"(fn rev-first [the-sequence] \n\t(first (reverse the-sequence))\n  )","user":"5dcc651de4b02b31cc3da3c8"},{"code":"(fn getLast [s] \n  (if (empty? (rest s))\n    (first s)\n    (getLast (rest s))\n   )\n)","problem":19,"user":"5182b6ede4b0353c468deb6d"},{"problem":19,"code":"reduce (fn [x, y] y)","user":"56f6e096e4b08e7d20b96829"},{"code":"(fn [elems]\n  ((fn [prev remain]\n    (if (empty? remain)\n      prev\n      (recur (first remain) (rest remain))))\n   (first elems) (rest elems)))","problem":19,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn getlast [s] (if (next s)(recur (next s))(first s)))","problem":19,"user":"4e717e48535d5021c1a8964b"},{"problem":19,"code":"(partial reduce (fn [acc elt] elt))","user":"587e43d2e4b052da650a633f"},{"code":"(fn [xs]\n  (loop [xs xs]\n    (if (next xs)\n      (recur (next xs))\n      (first xs))))","problem":19,"user":"4f03a7a4535dcb61093f6b49"},{"problem":19,"code":"(fn \t[l] (first (reverse l)))","user":"5b311c36e4b025bcb146f2f7"},{"problem":19,"code":"(fn lastElement \n  [n] \n  (if (= (count n) 1)\n    (first n) (lastElement (rest n))) )","user":"59dd3930e4b0a0ac046f2504"},{"problem":19,"code":"(fn my-last [seq] (nth seq (dec (count seq))))","user":"56889672e4b0dcc4269f406c"},{"problem":19,"code":"; haskell recursive style\n(fn getlast [n]\n  (if (= (rest n) []) (first n)\n      (getlast (rest n))))","user":"56278266e4b00e49c7cb47d3"},{"problem":19,"code":"#(let [a (- (count  %) 1)]\n    (nth % a))","user":"53c83f94e4b00fb29b2212af"},{"code":"#(nth%(-(count%)1))","problem":19,"user":"4dd66da7535d2dad7130b5c8"},{"problem":19,"code":"(fn it [[l & v]] (if (empty? v) l (recur v)))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"#(reduce (fn [f s] s) %)","problem":19,"user":"4f88942be4b033992c121c6a"},{"problem":19,"code":"(fn [myseq] (nth myseq (- (count myseq) 1)))","user":"56e078e7e4b0ca2494a09609"},{"problem":19,"code":";(fn [coll]\n;  (loop [last-half coll]\n;    (if (= (count last-half) 1)\n;      (first last-half)\n;      (recur (take-last (/ (count last-half) 2) last-half))\n;    )\n;  )\n;)\n;;(fn [coll] (nth coll (dec (count coll))))\n(fn [coll] (first (rseq (vec coll))))","user":"54f0a1f2e4b024c67c0cf8a0"},{"problem":19,"code":"(fn last-el [x] (first (take-last 1 x)))","user":"54e7187ae4b024c67c0cf80d"},{"problem":19,"code":"(fn [xs] (if (= (count xs) 1) (first xs)\n             (recur (rest xs))))","user":"5d631376e4b0c9e5857d5023"},{"code":"(fn [nums] (nth nums (- (count nums) 1)))","problem":19,"user":"50c8993de4b00bb60fe0c542"},{"problem":19,"code":"(fn [x] \n  (nth x (dec (count x)))\n)","user":"54e85a7fe4b024c67c0cf823"},{"code":"(fn [x]   (nth  x    (- (count x) 1)    ))","problem":19,"user":"500a080fe4b03d00572d2d72"},{"code":"(fn mylast [xs] (first (reverse xs)))","problem":19,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn last-elem [[head & tail]]\n  (if tail \n    (recur tail)\n    head))","problem":19,"user":"516eb196e4b06aac486e5b2e"},{"code":"(fn quux [xs]\n  (let [rst (rest xs)]\n     (if (empty? rst)\n        (first xs)\n        (quux rst))))","problem":19,"user":"4f32ef71e4b0d6649770a098"},{"problem":19,"code":"(fn last-ele [coll] (first (reverse coll)))","user":"573ddfc2e4b05c31a32c081b"},{"problem":19,"code":"(fn last-num [m] (nth m (- (count m) 1)))","user":"57a14414e4b0c3d858beb8e4"},{"code":"(fn mylast \n  [x] \n  (if \n    (first (rest x))\n   \t (recur (rest x)) \n    (first x)))","problem":19,"user":"50e2cffce4b0ae09a0e7de7e"},{"problem":19,"code":"(fn [data]\n  (let [left (rest data)]\n    (if (seq left)\n      (recur left)\n      (first data))))","user":"5aa9a8f6e4b0d174b936c8e6"},{"code":"#(first (drop (count (rest %)) %))","problem":19,"user":"52bf33c2e4b07a9af579232f"},{"problem":19,"code":"#_#(first(reverse %))\n\n#(->> %\n     reverse\n     first)","user":"5cd16529e4b0ccb0619628e7"},{"code":"(fn [xs]\n  (loop [ys xs]\n    (if (empty? (rest ys)) (first ys) (recur (rest ys)) )))","problem":19,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn [seq] \n  (if (empty? (rest seq)) \n      (first seq) \n      (recur (rest seq))))","problem":19,"user":"4f70afb8e4b07046d9f4effb"},{"problem":19,"code":"(fn [[h & tail]] (if (= nil tail) h (recur tail)))","user":"57e7ecc1e4b0bfb2137f5b05"},{"problem":19,"code":"#(loop [li %]\n   (if (empty? (rest li)) \n    (first li)\n    (recur (rest li))))","user":"550fa523e4b06e50f9beb17a"},{"code":"(partial reduce (fn [%1 %2] %2))","problem":19,"user":"4fdfe6a5e4b05e33b9224fa6"},{"problem":19,"code":"#(first(into () %))","user":"5fb4da96e4b08cb800c85b47"},{"problem":19,"code":"(fn get-last [aseq]\n  (first (reverse aseq)))","user":"5c970820e4b048ec896c5a68"},{"code":"reduce #(-> %2)","problem":19,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [numbers]\n  (first (reverse numbers) )\n)","problem":19,"user":"4e8e5cc8535d65386fec2142"},{"problem":19,"code":"(fn tail [xs] (if (= (rest xs) '()) (first xs) (tail (rest xs))))","user":"54696109e4b00cfc9eacc146"},{"code":";#(last %)\n#(nth % (- (count %) 1))","problem":19,"user":"526143b7e4b03e8d9a4a705a"},{"code":"(fn last-elmt [x]\n  (first (reverse x)))","problem":19,"user":"4fcd3c29e4b065de69964ca5"},{"problem":19,"code":"(fn [x]\n  (let [r (rest x)]\n  \t(if (empty? r)\n    \t(first x)\t\n    \t(recur (rest r)))))","user":"54764a8fe4b0c51c1f4d72a3"},{"problem":19,"code":"#(first(take-last 1%))","user":"5b6e1649e4b0c6492753e7ce"},{"code":"(fn lastElement [x] (.get x(- (count x) 1)))","problem":19,"user":"538dc2d1e4b0b51d73faae75"},{"problem":19,"code":"(partial reduce (fn [_,x] x))","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn\n  [coll]\n  (if (next coll)\n    (recur (rest coll))\n    (first coll)))","problem":19,"user":"537158e2e4b0fc7073fd6eb0"},{"problem":19,"code":"(fn l [[f & r]] (if (empty? r) f (l r)))","user":"5cf863c4e4b0b71b1d808a80"},{"problem":19,"code":"(fn [x] (first (reverse x)\n  ))","user":"54e88e31e4b024c67c0cf824"},{"problem":19,"code":"(fn  [[n & more]]\n  (if more\n    (recur more)\n    n))","user":"5f6af378e4b02876ed9fd04b"},{"problem":19,"code":"(fn [coll]\n  (if-let [n (next coll)]\n    (recur n)\n    (first coll)))","user":"576c0febe4b07c67f59d1fb8"},{"problem":19,"code":"(fn new-get-last\n  [s]\n  (if (= (next (seq s)) nil)\n    (first s)\n    (recur (rest s))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [s]\r\n  (if (next s)\r\n    (recur (next s))\r\n    (first s)))","problem":19,"user":"4e040c42535d04ed9115e79d"},{"code":"(fn [x] (loop [x x] (if (empty? (rest x)) (first x) (recur (rest x)))))","problem":19,"user":"50ce09e6e4b0ffc302be4bc6"},{"problem":19,"code":"(fn mylast [[x & xs]] (if (> (count xs) 0) (mylast xs) x))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":19,"code":"(fn llast [l] (if (= 1 (count l)) (first l) (llast (rest l))))","user":"5e308c96e4b05b4b01516214"},{"problem":19,"code":"(fn [x] (second (take-nth (- (count x) 1)  x)))","user":"60630af9e4b069485764ddbc"},{"problem":19,"code":"#_(fn [coll]\n  (nth coll (- (count coll) 1)))\n\n(fn [coll]\n    (peek (vec coll)))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":19,"code":"(fn asdf[val] (first (reverse val)))","user":"5dd15268e4b0948ae9d9ad4d"},{"code":"(fn [s] (first (rseq (into [] s))))","problem":19,"user":"4ec17677535dfed6da9c6dad"},{"code":"(fn mylast [x] \n  ( if (= '() (rest x )) (first x) (mylast (rest x)))\n)","problem":19,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn getLast [alist] (if (list? alist) (peek (vec alist)) (peek alist)))","problem":19,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":19,"code":"(fn reccall[x] (if (= 1 (count x)) (first x) (reccall (rest x)) ) )","user":"5550929ee4b00713264bd9aa"},{"code":"(fn [vals] (if (empty? (rest vals)) (first vals) (recur (rest vals))))","problem":19,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":19,"code":"(fn [x] (first (reverse (rest x))) )","user":"5476894ce4b0c51c1f4d72a6"},{"problem":19,"code":"(fn [x]  (first (reverse x)))","user":"59674d60e4b069c0a1a197b3"},{"problem":19,"code":"(fn [col] (nth col \n               (dec \n                (count col)\n                )\n               ))","user":"55f68468e4b06e875b46ce94"},{"code":"(fn final [x]\n  (first (first (rest (split-at (- (count x) 1) x))))\n)","problem":19,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"code":"#(->\n  (reverse %)\n  (first))","problem":19,"user":"51929214e4b08962174cf74c"},{"code":";#(nth % (- (count %) 1)) ; Novice way\n; Better way\n(comp first reverse)","problem":19,"user":"504f1fa7e4b0e7ad84dbc4bc"},{"problem":19,"code":"(fn again [[f & r]] (if r (again r) f))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":19,"code":"(fn \n  [s] \n  (nth \n   \ts \n   \t(- \n     \t(count s) \n     \t1)))","user":"58e039d3e4b0a4d5acaab734"},{"code":"(comp peek vec)","problem":19,"user":"4de165f3535d08e6dec9fde6"},{"problem":19,"code":"(fn my-last [l]\n (if (= (count l) 1) \n     (first l)\n     (my-last (rest l))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":19,"code":"(fn last-entry [input-list] \n  (if \n    (empty? (rest input-list)) \n    (first input-list)\n    (last-entry (rest input-list))))","user":"5959b0ede4b066ee0a44afaa"},{"problem":19,"code":"(fn last' [xs] (if-not (next xs) (first xs) (last' (next xs))))","user":"5f300f28e4b033932238a682"},{"problem":19,"code":"(fn [coll]\n  (first (reverse coll)\n         )\n  )","user":"59468341e4b07ddc2dafad86"},{"code":"#(-> % (reverse) (first))","problem":19,"user":"4ed339ce535d44c135fd68eb"},{"code":"(fn mylast [seq]\n  (if (> (count seq) 1)\n    (mylast (rest seq))\n    (first seq)))","problem":19,"user":"4e8f5eba535d65386fec214c"},{"problem":19,"code":"(fn [a] (if (= (count a) 1) (first a) (recur (rest a))))","user":"559ff3b1e4b0acc240e314ed"},{"problem":19,"code":"(fn getLastElm [arr] \n  (println arr)\n  (let [restArr (rest arr)]\n    (if\n      (= nil (seq restArr))\n      (first arr)\n      (getLastElm restArr)\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":19,"code":"(fn [coll]\n  (loop [r-coll coll]\n    (if (= 1 (count r-coll))\n      (first r-coll)\n      (let [[first & rest] r-coll]\n        (recur rest)))))","user":"5f1f2b95e4b0f565ad99827a"},{"problem":19,"code":"(fn last-element [x] (first(reverse x)))","user":"5614fa1de4b05f002753dfbe"},{"code":"(fn lst\n   [s]\n   (if (> (count s) 1)\n     (lst (rest s))\n     (first s)))","problem":19,"user":"538510c2e4b06839e8705efb"},{"problem":19,"code":"(fn [seq]\n  (loop [[first & rest] seq]\n    (if (empty? rest)\n      first\n      (recur rest)\n    )\n  )\n)","user":"5426bd40e4b01498b1a71b1c"},{"code":"(fn [x]\n  (if (= (rest x) [])\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4fc8b012e4b0ee37620e1838"},{"code":"(fn [coll] (loop [n coll]\n             (if (= (count n) 1)\n               (first n)\n               (recur (rest n)))))","problem":19,"user":"510ee996e4b07438aa321462"},{"problem":19,"code":"#(first (rseq (vec % )))","user":"59444377e4b0b03edd0057a1"},{"code":"(fn [x]\r\n  (loop [f (first x) t (next x)]\r\n      (if (= nil t)\r\n          f (recur (first t) (next t)))))","problem":19,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":19,"code":"(fn final [x] (if (= (rest x) '()) (first x) (final (rest x))))","user":"55244734e4b0882d96d091bf"},{"problem":19,"code":"(fn [xs] (reduce\n          (fn [a b] b)\n          xs))","user":"59cc8d8de4b0a024fb6ae5d5"},{"problem":19,"code":"(fn [coll] (reduce #(identity %2) coll))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn ll [s] (first (reverse s)))","problem":19,"user":"4f0370f4535dcb61093f6acd"},{"problem":19,"code":"#(.get % (-(.size %) 1))","user":"5863f422e4b0f14aab7c8837"},{"problem":19,"code":"(fn go [coll] \n  (if (empty? (rest coll)) (first coll) (go (rest coll))))","user":"57e9d007e4b0bfb2137f5b38"},{"problem":19,"code":"(fn[a] (first (reverse a)))","user":"552b07b3e4b0ffed3738f95d"},{"problem":19,"code":"(fn getLast [n]\n  (if (= (count n) 1)\n    (first n)\n    (getLast (rest n))))","user":"557ba636e4b05c286339e0b6"},{"code":"(fn [seq] (reduce (fn [x,y] y) seq))","problem":19,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn f [items]\n  (if (= (rest items) '())\n      (first items)\n      (f (rest items))))","problem":19,"user":"4f28d159e4b0d6649770a01b"},{"code":"(fn [l] \n  (let [v (vec l)]\n  (get v (- (count v) 1))))","problem":19,"user":"5152ceeee4b001f44f99bff1"},{"code":"(fn [x] \r\n  (loop [z x]\r\n    (if (= 1 (count z))\r\n        (first z)\r\n        (recur (next z))\r\n  ))\r\n)","problem":19,"user":"4deb6b40535d08e6dec9fe05"},{"code":"#(loop[x %] (\n  if(= 0 (count (rest x)))\n    (first x)\n    (recur (rest x))\n  ))","problem":19,"user":"500abce2e4b03d00572d2d77"},{"code":"(fn thelast [x] ( first (reverse x)))","problem":19,"user":"53123e3fe4b08068f379ecf7"},{"code":"(fn l[x] (first (take-last 1 x)))","problem":19,"user":"4fe64523e4b0e8f79898fed2"},{"problem":19,"code":"(fn last2 [nums] (if (= 0 (count (next nums))) (first nums) (last2 (next nums))))","user":"5982478de4b021a7a535fdfd"},{"code":"(fn [items] \n  (nth items (dec (count items))))","problem":19,"user":"51d0d6e9e4b067c365486356"},{"problem":19,"code":"(fn takeLast [coll] (first (reverse coll)))","user":"552c0bf9e4b0ffed3738f96d"},{"problem":19,"code":"(fn [s] \n  (nth s (dec (count s)))\n  )","user":"6074f5ede4b069485764de52"},{"code":"(fn [a] (nth a (dec(count a))))","problem":19,"user":"52a08afce4b04e0c58e87bc7"},{"problem":19,"code":"(fn [[v & vs]] (if (empty? vs) v (recur vs)))","user":"5faef622e4b08cb800c85b05"},{"problem":19,"code":"(fn xlast \n  ([lst]\n   (xlast lst \" \"))\n  ([lst lastval]\n  (if (= (first lst) nil)\n    lastval\n    (xlast (rest lst) (first lst)))))","user":"5499e052e4b03163384f4705"},{"code":"reduce (fn [a x] x)","problem":19,"user":"504f3f13e4b0a02f9cffde60"},{"problem":19,"code":"(fn [liste]\n  (let [[x] (reverse liste)]\n    x))","user":"57ad0950e4b0b8559636fc97"},{"problem":19,"code":"(fn last_item\n\t[[head & remaining]]\n\t(if (empty? remaining)\n\t  head\n\t  (last_item remaining)))","user":"572a997ce4b0f4d77e65123e"},{"code":"(fn [lizt]\n  (first (reverse lizt)))","problem":19,"user":"4e7dc2ab535db169f9c796e5"},{"problem":19,"code":"(fn [seq] \n  (loop [remain seq]\n    (if (empty? (rest remain))\n      (first remain)\n      (recur (rest remain)))))","user":"5746061ae4b009280f9f2b5b"},{"problem":19,"code":"#(first (reduce conj () %));(comp first reverse)","user":"57ee41a6e4b0bfb2137f5baf"},{"code":"(fn [x]\n  ((fn d [l, r]\n    (if (empty? r)\n      l\n      (d (first r) (rest r))\n      )) nil x))","problem":19,"user":"51152848e4b0ce5098ee73b9"},{"problem":19,"code":"(fn f [[x & y]] (or (and (nil? y) x) (f y)))","user":"586631a2e4b0f14aab7c885a"},{"code":"(fn my-last [lst]\n  (letfn [(rec [lst n]\n               (if (= n 1)\n                 (first lst)\n                 (rec (rest lst) (- n 1))))]\n    (rec lst (count lst))))","problem":19,"user":"51e0198ee4b01188f0627539"},{"problem":19,"code":"(fn get-last\n  ([array]\n    (get-last (first array) (rest array)))\n  ([head remaining]\n    (if (= [] remaining)\n      head\n      (get-last (first remaining) (rest remaining)))))","user":"56af5f74e4b061e3ca319acf"},{"problem":19,"code":"(fn [arr] (let [size (- (count arr) 1)] (nth arr size)))","user":"53fb9f28e4b0de5c41848583"},{"problem":19,"code":"(fn [l] \n\t (nth l (dec (count l))))","user":"58bc7ba3e4b0888cdc949d19"},{"code":"(fn [secventa]\r\n  (first (reverse secventa))\r\n  )","problem":19,"user":"5075b421e4b09049dea827a0"},{"problem":19,"code":"(fn last-elem [[n & rest]] (if rest (recur rest) n))","user":"608c1629e4b03bd49d9f36b0"},{"code":"(fn findlast [items] \n  (loop [[x & rest] items]\n   \t(if (empty? rest)\n    x\n    (recur rest))))","problem":19,"user":"53733312e4b06d7f452d9e0a"},{"problem":19,"code":"#(loop [n %]\n   (let [i (first n) j (next n)]\n     (if (nil? j)\n       i\n       (recur j)\n     )\n   )\n )","user":"5bb23cf1e4b0a20761a2350a"},{"code":"(fn [aseq] (first (take-last 1 aseq)))","problem":19,"user":"4ff34dc1e4b0678c553fc34c"},{"problem":19,"code":"(fn f [x]\n  (if (empty? (rest x))\n    (first x)\n    ; kind of a popper..\n     (f (rest x))))","user":"543c731be4b032a45b869340"},{"problem":19,"code":"(fn [[h & q]] (if q (recur q) h))","user":"5628a121e4b00e49c7cb47ed"},{"problem":19,"code":"(fn [myseq]\n  (let [seqlength (count myseq)]\n    (nth myseq (- seqlength 1))))","user":"5bdb1971e4b0ed4b8aab4c14"},{"code":"(fn lend[%] (cond (= '() (rest %)) (first %) :else (lend (rest %))))","problem":19,"user":"4f041af6535dcb61093f6ba3"},{"code":"#( (vec %) (dec (count %)))","problem":19,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":19,"code":"#(reduce (fn [a b] (identity b)) %)","user":"590e588ce4b047aa04b19a23"},{"code":"(fn [s]\n  (if-let [r (seq (rest s))]\n    (recur r)\n    (first s)))","problem":19,"user":"4fa82277e4b081705acca1d0"},{"problem":19,"code":"(fn [xs]\n                 (loop [x (first xs)\n                        xs' (rest xs)]\n                   (if (empty? xs')\n                     x\n                     (recur (first xs') (rest xs')))))","user":"590e5e8ae4b047aa04b19a25"},{"code":"(fn mylast\n  [x]\n  (if (= (count x) 1)\n      (first x)\n      (mylast (rest x))))","problem":19,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"(fn end [[fir & remain]] (if remain (recur remain) fir) )","problem":19,"user":"51dc0ed1e4b09c47a74ce105"},{"code":"(fn get-last [lst] \n  (if (= (rest lst) '())\n      (first lst)\n      (get-last (rest lst))))","problem":19,"user":"4f0031f3535dcb61093f6a2f"},{"problem":19,"code":"(fn lst \n([[x & r ]]  (if r (lst r)  x) ) )","user":"58335c22e4b089d5ab817c9a"},{"problem":19,"code":"; this also works\n; (comp first reverse)\n\n(fn lastf [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (lastf (rest xs))))","user":"541e2ff8e4b01498b1a71a8a"},{"code":"(fn [x] (if (= (rest x) []) (first x) (recur (rest x))))","problem":19,"user":"5110b8bae4b04c71fce993f4"},{"problem":19,"code":"reduce (fn [_ b] b) ()","user":"567b39b6e4b05957ce8c61a3"},{"code":"( fn [x] (first (reverse x)) )","problem":19,"user":"4ef49a08535dced4c769f237"},{"code":"(fn [n] (first (reverse n)))","problem":19,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":19,"code":"(fn return-last-element [x] (nth x (- (count x) 1)))","user":"57ee2b3ee4b0bfb2137f5bac"},{"code":"reduce (fn [x xs] xs)","problem":19,"user":"535778dee4b04ce2eb3ed27d"},{"code":"(fn l [[x & rest]]\n  (if (seq rest)\n    (l rest)\n    x))","problem":19,"user":"4ed15f60535d44c135fd68cd"},{"problem":19,"code":"#(loop [[y & ys] %] (if (empty? ys) y (recur ys)))","user":"4f8be895e4b02e764a0a5184"},{"problem":19,"code":"(fn [n]\n  (if (nil? (next n))\n    (first n)\n    (recur (rest n))))","user":"5c2f0cdfe4b0d62ef62d9f09"},{"code":"(fn [x] \n  (nth x (- (count x) 1))\n)","problem":19,"user":"51215927e4b05ae5a5823c10"},{"problem":19,"code":"(fn my-last [coll]\n  (loop [c coll]\n  (if (empty? (rest c))\n    (first c)\n    (recur (rest c)))))","user":"561a9380e4b053970a773b07"},{"code":"(fn [coll]\r\n  (if (empty? (rest coll))\r\n    (first coll)\r\n     (recur (rest coll))))","problem":19,"user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [[n & more]]\r\n  (if more \r\n    (recur more) n))","problem":19,"user":"4efde788535d3d302ff962fa"},{"problem":19,"code":"(fn [vec]\n  (loop [vec vec\n         ret nil]\n    (if (empty? vec)\n      ret\n      (recur (rest vec) (first vec)))))","user":"607b04e5e4b0a637ed780373"},{"problem":19,"code":"(fn f [x] (first (reverse x)))","user":"53c0bc5fe4b00fb29b221257"},{"problem":19,"code":"(fn my-last [seq]\n  (if (= 1 (.size seq))\n    (first seq)\n    (my-last (rest seq))))","user":"516e3626e4b0284f4b26df81"},{"problem":19,"code":"(fn the-last [s]\r\n(if (= (count s) 1)\r\n(first s)\r\n(the-last (rest s))))","user":"595d874de4b066ee0a44b025"},{"problem":19,"code":"#(first  (reverse %))","user":"56499a5de4b0284900eef644"},{"code":"(fn [my-seq] (first (reverse my-seq)))","problem":19,"user":"528f96b8e4b0239c8a67aef7"},{"problem":19,"code":"(fn\n  [seqn]\n  (first (reverse seqn)))","user":"5ed6e0eee4b016b56eae05e4"},{"code":"#(peek(vec %1))","problem":19,"user":"4fa16dbfe4b0dcca54ed6d5c"},{"problem":19,"code":"(fn [[n & more]]\n  (if more\n    (recur more)\n    n\n  )\n)","user":"55990d3ce4b031d6649c9ba3"},{"code":"(fn [c]\n  (first (drop (- (count c) 1) c)))","problem":19,"user":"5225a0f5e4b01819a2de430e"},{"code":"(fn [x]\n   (reduce #(identity %2) x))","problem":19,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn [[x & more]]\n  (if (nil? more)\n      x\n      (recur (vec more))))","problem":19,"user":"4e260220535deb9a81d77ef0"},{"code":"(fn this [x]\n  (let [f (first x) l (rest x)]\n    (if (empty? l)\n      f\n      (this l))))","problem":19,"user":"5249b0c8e4b05ef8e38e6471"},{"code":"(fn [x]\n  (let [length (count x)]\n    (nth x (- length 1))))","problem":19,"user":"4efbf3ae535dced4c769f27d"},{"problem":19,"code":"(fn thelast [x] (if (empty? (rest x)) (first x) (thelast (rest x))))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":19,"code":"(fn [seq]\n    (nth seq\n(- (count seq) 1)))","user":"55f6e1b4e4b06e875b46ce9c"},{"problem":19,"code":"(fn l [xs] \n  (if (empty? (rest xs))\n    (first xs)\n    (l (rest xs))))","user":"54c8dc10e4b045293a27f655"},{"problem":19,"code":"(fn [coll]\n  (-> coll\n      reverse\n      first))","user":"5c032eaee4b0bdcf453d1671"},{"problem":19,"code":"(fn [x] (if(next x) (recur (next x)) (first x) ))","user":"55016428e4b07d26eda61d72"},{"problem":19,"code":"(fn [s]\n  (loop [head (first s) tail (rest s)]\n    (if (empty? tail)\n      head\n      (recur (first tail) (rest tail)))))","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [coll]\n  (let [rev-coll (reverse coll)]\n    (first rev-coll)))","problem":19,"user":"531ccb1fe4b08068f379eda7"},{"problem":19,"code":"(fn [l]\n  (loop [[car & cdr] l]\n    (if (empty? cdr)\n        car\n        (recur cdr))))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":19,"code":"(fn my-last [s] \n  (if-let [r (next s)]\n      (my-last r)\n      (first s)))","user":"57b863dfe4b0fbc9809a27de"},{"problem":19,"code":"(fn [coll] \n   (if (next coll)\n     (recur (rest coll))\n     (first coll)))","user":"548f15f4e4b0e286459a122f"},{"problem":19,"code":"(fn last-element [xs]\n  (if (= (rest xs) ())\n    (first xs)\n    (last-element (rest xs))))","user":"595c3782e4b066ee0a44aff2"},{"code":"#(nth (rseq (vec %)) 0)","problem":19,"user":"4ee98e00535d93acb0a6688e"},{"problem":19,"code":"(fn siste [x]\n  (if (vector? x)\n    (get x (- (count x) 1))\n    (let [r (rest x)]\n      (if (= r '())\n        (first x)\n        (siste (rest x))))))","user":"60bf4e5de4b0e0fa5f1b4293"},{"code":"(fn end [x] \n  (first (reverse x)))","problem":19,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [[a & b]] (if (nil? b) a (recur b)))","problem":19,"user":"50166470e4b052339a490e76"},{"code":"(fn lst [x]\n  (if (> (count x) 1) (lst (rest x)) \n  (first x)))","problem":19,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":19,"code":"(fn l [coll] (let [r (rest coll)] (if (= 1 (count r)) (first r) (l r))))","user":"5d348d3de4b01671435dbd0a"},{"code":"(fn [x] (\n    if (next x)\n      (recur (next x))\n      (first x)))","problem":19,"user":"4e67e742535d8ccf87e9fe84"},{"problem":19,"code":"(fn last-elem [xs] (if (= (count xs) 1) (first xs) (last-elem (rest xs))))","user":"5df98dc8e4b0a607a9a45cbc"},{"problem":19,"code":"#(if (< 0 (count (rest %))) (recur (rest %)) (first %))","user":"5d363543e4b01671435dbd20"},{"code":"(fn [x]  (nth x (- (count x) 1)))","problem":19,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn f [x]\r\n  (if (next x)\r\n    (f (next x))\r\n    (first x)))","problem":19,"user":"4fe9b372e4b0547ebccb246b"},{"code":"#(first (reverse %) )","problem":19,"user":"4e1582f0535d04ed9115e7e4"},{"code":"#(if (next %) (recur (next %)) (first %))","problem":19,"user":"4e46e48b535dc968683fc4b7"},{"code":"(fn [x] (first (drop (- (count x) 1) x)))","problem":19,"user":"4e21d76a535d04ed9115e81a"},{"problem":19,"code":"#( peek (vec %))","user":"5860c936e4b0f14aab7c87dc"},{"problem":19,"code":"(fn[col] (nth col(dec (count col))))","user":"53e2381ce4b036ad0777e3ee"},{"problem":19,"code":"#(if (vector? %) (peek %) (peek (reverse %)))","user":"5d41de31e4b05dd059a54379"},{"problem":19,"code":"(fn [listilla] (nth listilla (dec (count listilla))))","user":"60ade833e4b00e9e6653c494"},{"code":"(fn [s] \n  (if (next s) \n    (recur (next s)) \n    (first s)))","problem":19,"user":"4faafccde4b081705acca209"},{"code":"(fn last-item [lst]\n  (cond \n   (empty? (rest lst)) (first lst)\n   :else (last-item (rest lst))))","problem":19,"user":"4fe89055e4b07c9f6fd12c47"},{"code":"(fn [the-list] \r\n  (peek (vec the-list)))","problem":19,"user":"4e9894ab535dbda64a6f6b5d"},{"code":"(fn [col] ((fn [s]\n        (if (next s)\n          (recur (next s))\n          (first s))) col)\n)","problem":19,"user":"53563363e4b04ce2eb3ed264"},{"code":"(fn [x] \n  (loop [l x] \n    (if (empty? (rest l))\n      (first l)\n      (recur (rest l)))))","problem":19,"user":"52c81954e4b0c2d177d6212e"},{"problem":19,"code":"#(let [[head & tail] %] (if (nil? tail) head (recur tail)))","user":"545afffce4b01be26fd74647"},{"code":"(fn [col]\n  (first (reverse col)))","problem":19,"user":"4ff695f8e4b0678c553fc380"},{"code":"(fn le [x] (if (empty? (rest x)) (first x) (le (rest x))))","problem":19,"user":"4ea5adeb535d7eef308072d6"},{"problem":19,"code":"(fn[coll](nth coll (dec (count coll))))","user":"5af361d4e4b0cc2b61a3bc83"},{"code":"#(nth % (dec (count %) )  )","problem":19,"user":"51ccc92ce4b02254fc79487a"},{"problem":19,"code":"#(if-let [r (next %)] (recur r) (first %))","user":"56f974c0e4b07572ad1a88b1"},{"problem":19,"code":"(fn [[x & xs]] (if (nil? xs) x (recur xs)))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":19,"code":"(fn last-elem\n  [[x & remaining]]\n  (if (empty? remaining)\n    x\n    (last-elem remaining)))","user":"5606bd50e4b08b23635d3177"},{"problem":19,"code":"(fn [coll] (->> coll\n                    count\n                    dec\n                    (#(drop % coll))\n                    first))","user":"5439ea5de4b032a45b869324"},{"problem":19,"code":"(fn [sek] (first (reverse sek)))","user":"59c20641e4b0a024fb6ae49a"},{"problem":19,"code":"(fn l [s] (if (empty? (rest s)) (first s) (l (rest s))))","user":"59e90446e4b0249b72820744"},{"code":"(fn [xs] (first (take-last 1 xs)))","problem":19,"user":"517d755ce4b0f5e87c18f263"},{"code":"#(reduce (fn [x y] y) nil %)","problem":19,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn lastElement [x]\n  (cond \n   (empty? x) '()\n   (empty? (rest x)) (first x)\n   :else (lastElement (rest x))\n   )                     \n)","problem":19,"user":"535197f2e4b084c2834f4ae4"},{"problem":19,"code":"(fn sp [xp]\n    (loop [xpr xp]\n      (let [[x & r] xpr]\n        (if (nil? r)\n          x\n          (recur r)))))","user":"55f49a4ae4b06e875b46ce7f"},{"code":"(fn [x] \n  (let [a (first x) b (rest x)] \n    (if-not (seq b) a (recur b))))","problem":19,"user":"531488f3e4b08068f379ed16"},{"code":"(fn [x]  (nth x (- (count x) 1) )  )","problem":19,"user":"4ec6d752535d6d7199dd36d9"},{"problem":19,"code":"(fn [sequ] (first (take-last 1 sequ)))","user":"59b2d51be4b0e1f4e384c902"},{"problem":19,"code":"(fn [list]\n  (nth list (- (count list) 1))\n)","user":"54060ae8e4b0addc1aec668e"},{"problem":19,"code":"(fn [x] (-> x (reverse) (first)) )","user":"594b3459e4b07ddc2dafae23"},{"code":"(fn [x]\n  (let [a (first x), b (rest x)]\n    (if (empty? b)\n      a\n      (recur b))))","problem":19,"user":"512c0f84e4b03a42b6300232"},{"problem":19,"code":"(fn length [xs]\n  (if (empty? xs)\n    (throw (Exception. \"empyt list\"))\n    (nth xs (- (count xs) 1))))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn [x]\n    (if (empty? (rest x))\n      (first x)\n      (recur (rest x))))","problem":19,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn mylast [coll]\n  (if (= '() (rest coll))\n     (first coll)\n     (mylast (rest coll))))","problem":19,"user":"50668a06e4b03d366d7cb2b2"},{"problem":19,"code":"(fn [x] \n  (if (= 1 (count x))\n  \t(first x)\n    (recur (rest x))))","user":"5c98d3bee4b048ec896c5a8b"},{"problem":19,"code":"(fn my-last [coll]\n  (if (next coll)\n    (my-last (rest coll))\n    (first coll)))","user":"57b63e19e4b0fbc9809a27b9"},{"code":"(fn f [ls]\n  (if (empty? (rest ls))\n    (first ls)\n    (f (rest ls))))","problem":19,"user":"519e1bade4b0acf32bc6a424"},{"code":"(comp first  reverse)","problem":19,"user":"528e1c88e4b0239c8a67aed1"},{"code":"#(reduce (fn [x y] (or y x)) %)","problem":19,"user":"531839ffe4b08068f379ed6a"},{"code":"(fn thelast [x]\n  (if (not (seq (rest x))) (first x) (thelast (rest x))))","problem":19,"user":"4ff203e5e4b0678c553fc331"},{"code":"(fn last2 [s] (if (empty? (rest s)) (first s) (last2 (rest s))))","problem":19,"user":"511f1434e4b0cf8688794046"},{"code":"(fn [c] (first (reverse c)))","problem":19,"user":"4e826633535db62dc21a62cb"},{"code":"(fn [form]\n    (nth form (- (count form) 1)))","problem":19,"user":"4f666ca3e4b07046d9f4ef5a"},{"code":"(fn get-last [x] (nth x (- (count x) 1)))","problem":19,"user":"4f748a40e4b044e54cd9a8f9"},{"problem":19,"code":"(fn [lst]\n  (loop [x lst]\n    (if (next x) \n      (recur (next x))\n      (first x)\n    )\n  )\n)","user":"5f9cbbeae4b0715f5002d828"},{"code":"(fn [i]\n  (first (reverse i))\n)","problem":19,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"problem":19,"code":"#(reduce (fn [_ v] v) %1)","user":"57122b20e4b09c608db70451"},{"problem":19,"code":"(fn[n] (nth n (dec (count n))))","user":"55950c5fe4b0c79f6e1db95e"},{"problem":19,"code":"(let [y \n(fn lastval [x]\n  (\n    if (> (count x) 1)\n    (lastval (rest x))\n    (first x)\n  )\n)] y)","user":"564d55bce4b0284900eef67e"},{"code":"(fn [list] (first (reverse (seq list))))","problem":19,"user":"503a5623e4b07a1917cc34d3"},{"code":"(fn lastx [x](nth x (- (count x) 1)))","problem":19,"user":"5052f4fce4b0a561d07d8f26"},{"problem":19,"code":"(fn getLast [l] (if (= (count l) 1) (first l) (getLast (rest l))) )","user":"56b5019ce4b0982f16b37e2c"},{"code":"(fn [[n & t]] (if t (recur t) n))","problem":19,"user":"53979966e4b0b51d73faaeef"},{"problem":19,"code":"(fn las [s] (first (reverse s)))","user":"54b9ed93e4b0ed20f4ff6eb3"},{"problem":19,"code":"(fn tmp [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (tmp (rest seq))))","user":"59aeff12e4b0e1f4e384c8af"},{"code":"(fn getlast [xs]\n  (if (= (rest xs) [])\n    (first xs)\n    (getlast (rest xs))))","problem":19,"user":"5136f659e4b04059df19f2fd"},{"code":"#(nth %1 (dec (count %1)) )","problem":19,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":19,"code":"(fn last-elem\n  [seq]\n  (let [myVec (into [] seq)]\n    (get myVec (- (count myVec) 1))))","user":"5e64c1f2e4b0fd0acd1586ad"},{"problem":19,"code":"(fn [x]\n  (nth x (dec(count x))))","user":"56874171e4b0dcc4269f405c"},{"problem":19,"code":"(fn [s] (nth s (dec (count s))) )","user":"5a426a3fe4b0447ef91cc5f2"},{"code":"#(nth % (- (alength (to-array %)) 1))","problem":19,"user":"514a7e71e4b00c7db5067429"},{"problem":19,"code":"(fn [e] (nth e (- (count e) 1)))","user":"5686e811e4b0dcc4269f405a"},{"problem":19,"code":"(fn [x] \n  (nth x\n   (-(count x) 1)))","user":"54196d63e4b01498b1a71a34"},{"code":"(fn my-last [xs] (if (empty? (rest xs))\n           (first xs)\n           (my-last (rest xs))))","problem":19,"user":"5271812be4b03e8d9a4a73f3"},{"problem":19,"code":"(fn [xs]\n  (if (= (count xs) 1)\n  \t(first xs)\n  \t(recur (rest xs))))","user":"5f2d6787e4b033932238a66d"},{"code":"reduce (fn [x,y] y)","problem":19,"user":"4f030bb4535dcb61093f6a4a"},{"code":"(fn my-last [sq]\n  (if (nil? (next sq))\n    (first sq)\n    (recur (rest sq))))","problem":19,"user":"5144e89be4b021a5ff8301f9"},{"code":"(fn [S] \r\n  (if (= 1 (count S))\r\n    (first S)\r\n    (recur (rest S))))","problem":19,"user":"5051ea64e4b0a561d07d8f0d"},{"code":"(fn my-last [x]\n  (if (= 1 (count x))\n      (first x)\n      (my-last (rest x))\n  ))","problem":19,"user":"4fe930e9e4b0547ebccb244d"},{"problem":19,"code":"#(.get %1 (- (- 1 (count %1))))","user":"5508102ee4b021ccfedb96b0"},{"problem":19,"code":"(fn [vals] (first (reverse vals)))","user":"5bfaab50e4b0bdcf453d15ce"},{"problem":19,"code":"(fn getLast [x] (first(reverse x)))","user":"58597562e4b0f14aab7c8734"},{"problem":19,"code":"(fn [coll] (nth coll (dec(count coll))))","user":"5512be9ae4b055c2f668d4b6"},{"problem":19,"code":"(fn [x]\n  (get (vec x) (- (count x) 1)))","user":"569f97a5e4b0542e1f8d1496"},{"problem":19,"code":"(fn [l]\n  (loop [[head & remaining] l]\n    (if (empty? remaining)\n      head\n      (recur remaining))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":19,"code":"#(nth % (dec ( count %)))","user":"54b3691fe4b05787c3b16381"},{"code":"(fn aa[s]\n  (case (count s)\n    1 (first s)\n    (aa (rest s))))","problem":19,"user":"52b63875e4b0c58976d9ad41"},{"code":"#(loop [x %] (let [a (next x)] (if a (recur a) (first x))))","problem":19,"user":"52808897e4b0757a1b171404"},{"problem":19,"code":"(fn [n] (\n         loop [a n] (\n         if (empty? (rest a))\n         \t(first a)\n         (recur (rest a)))))","user":"56ba2f72e4b0f2655033593f"},{"problem":19,"code":"(fn [set] (first (reverse set)))","user":"5d89de0de4b0915913b1d3c0"},{"problem":19,"code":"(fn [args] \n  (first (reverse args)))","user":"55e2b1cfe4b050e68259b438"},{"problem":19,"code":"(fn [seq] (reduce #(identity %2) seq))","user":"52d38c51e4b099d49816f0c5"},{"code":"(fn last-element [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"520446d5e4b0c283853240b8"},{"code":"(fn thisislast [x] (.get x (dec (count x))))","problem":19,"user":"50ea3dd8e4b02d54280826dc"},{"code":"(fn [coll] \n  (first (drop (- (count coll) 1) coll)))","problem":19,"user":"515c6132e4b069911535cf0d"},{"code":"(fn mylast [sequence]\n   (condp = (count sequence)\n     0 nil\n     1 (first sequence)\n      (mylast (rest sequence))))","problem":19,"user":"525644ebe4b0541d1855ba12"},{"problem":19,"code":"(fn last-element [xs] (if (> (count xs) 1) (last-element (rest xs)) (first xs)))","user":"54f06aede4b024c67c0cf896"},{"problem":19,"code":"(fn [seq] (first (reduce conj (list) seq)))","user":"5d84545ee4b0915913b1d38b"},{"code":"trampoline (fn _ [x] (if (first (rest x)) #(_ (rest x)) (first x)))","problem":19,"user":"4ec8736f535d6d7199dd36f3"},{"problem":19,"code":"(fn my-last [sent]\n  (if (empty? (rest sent))\n    (first sent)\n    (my-last (rest sent))))","user":"5f238a59e4b0f565ad99828d"},{"problem":19,"code":"(fn [array]\n  (if (= '() (rest array))\n    (first array)\n    (recur (rest array))))","user":"52fe31d5e4b047fd55837038"},{"code":"(fn [x] (first (reverse  x)))","problem":19,"user":"509ac9cae4b050a581d3d579"},{"problem":19,"code":"(fn [x]\t(nth x (- (count x) 1)))","user":"560039cce4b04bb52996e162"},{"problem":19,"code":"(fn myLast [xs]\n  (let [n (count xs)]\n \t (cond\n  \t   (= 0 n) nil\n   \t   (= 1 n) (first xs)\n       true (myLast (rest xs)))))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":19,"code":"(fn [n] (reduce (fn [x y] y) n))","user":"5de05702e4b0948ae9d9ade7"},{"problem":19,"code":"(fn[coll] (nth coll (- (count coll) 1)))","user":"5537b2c7e4b09218d5f44fce"},{"code":"(fn blah [x] (nth x (- (count x) 1)))","problem":19,"user":"4fedec00e4b0d2a5fc2962eb"},{"problem":19,"code":"(fn last2 [s]\n  (let [x (first s) xs (rest s)]\n  \t(if (> (count xs) 0)\n      (last2 xs)\n      x\n    )\n  )\n)","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":19,"code":"#(if (first (rest %))\n   (recur (rest %))\n   (first %))","user":"5854580ce4b07779d46863f9"},{"problem":19,"code":"(fn dupa [x] (first (reverse x)))","user":"58778aa1e4b01531a375ea9f"},{"code":"(fn [s] (get (vec s) (dec (count s))))","problem":19,"user":"4f0376a5535dcb61093f6add"},{"problem":19,"code":"(fn [s]\n  (cond\n   (empty? (rest s)) (first s)\n   :else (recur (rest s))))","user":"5a616fd2e4b0512ff01cd974"},{"code":"x","problem":19,"user":"52e635b3e4b09f7907dd146f"},{"problem":19,"code":"#( nth  %  (-(.size %)1) )","user":"59a1fd6be4b066c664927d1b"},{"code":"#(if(vector? %) \n  (peek %) \n  (nth % (dec(count %))) \n)","problem":19,"user":"4f044e44535dcb61093f6bb9"},{"code":"(fn [xs] (if (empty? (rest xs)) (first xs) (recur (rest xs))))","problem":19,"user":"52f10094e4b05e3f0be25ee8"},{"problem":19,"code":";#(if (= 0 (count (rest %))) (first %) (recur (rest %))) \nreduce (fn [_ o] o)","user":"55b22c33e4b0da326a65cf79"},{"problem":19,"code":"(fn arrlast [s] (if (next s) (recur (next s)) (first s)))","user":"53ee6e81e4b0d648e757f4cd"},{"problem":19,"code":"(fn \n    [x] \n    (nth \n        x\n        (\n            dec (count x)\n        )\n    )\n)","user":"5c3f6322e4b08cd430848e97"},{"code":"(fn return-last [seq] (nth seq (- (count seq) 1)))","problem":19,"user":"5106c489e4b01150e115ebed"},{"code":"(fn [q] (first (reverse q)))","problem":19,"user":"532e0b20e4b019098a6f8b45"},{"code":"#(if (= 1 (count %)) (first %) (recur (rest %)))","problem":19,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":19,"code":"#(first (nth (iterate rest %) (dec (count %))))","user":"54cd9ff0e4b057c6fda3a2a7"},{"problem":19,"code":"(fn [s]\n      (let [c (count s)]\n        (first (drop (dec c) s))))","user":"55796743e4b05c286339e095"},{"problem":19,"code":"(fn last-element [[f & r]]\n            (if (empty? r) f (last-element r)))","user":"58c673b9e4b021aa9917ed56"},{"code":";(fn [l] (l (dec (count l))))\n\n(fn [l] (first (reverse l)))","problem":19,"user":"529b0f84e4b02ebb4ef7509c"},{"problem":19,"code":"(fn [m] (-> m (reverse) (first)))","user":"53d7710be4b0e771c3025462"},{"code":"(fn mylast [x] \n  (if (= (rest x) ()) (first x) (mylast (rest x))))","problem":19,"user":"4ea365e2535d7eef308072c5"},{"problem":19,"code":"(fn get-last [[x & remain]] (if (= nil remain) x (get-last remain)))","user":"5c3d9036e4b0d62ef62d9fb5"},{"code":"(fn mylast [a] (let [ra (rest a)] (if (empty? ra) (first a) (mylast ra))))","problem":19,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [elems] (if (second elems) (recur (rest elems)) (first elems)))","problem":19,"user":"4faa6184e4b081705acca1f1"},{"problem":19,"code":"#(if (empty? (rest %))(first %)(recur (rest %)))","user":"54aec21ae4b09f271ff37cf7"},{"problem":19,"code":"(fn get_last_elem [x] \n  (if (= (count x) 1) \n    (first x) \n    (get_last_elem (rest x))))","user":"53a94b63e4b047364c044434"},{"code":"(fn [coll]\r\n    (if (= '() (rest coll))\r\n\t      (first coll)\r\n\t      (recur (rest coll))))","problem":19,"user":"4e821ca5535db62dc21a62c2"},{"problem":19,"code":"(fn [ls] (if (= (rest ls) []) (first ls) (recur (rest ls))))","user":"54bec7d2e4b0ed20f4ff6ef6"},{"code":"(fn self [lst]\n\t(if (= '() (rest lst))\n           (first lst)\n           (self (rest lst))))","problem":19,"user":"52091d57e4b0e152394d76f0"},{"problem":19,"code":"(fn [_]\n  (nth _ (- (count _) 1)))","user":"5d93536ce4b0d3f9b434ad15"},{"code":"(fn [ss] (first (reverse ss)))","problem":19,"user":"4ecf571b535d44c135fd68b6"},{"problem":19,"code":"(fn a [coll]\n  (if (nil? (next coll))\n    (first coll)\n    (a (next coll))))","user":"57f291a8e4b0511f1d294df0"},{"code":"(fn y [x] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"525bcae9e4b0cb4875a45d30"},{"code":"(fn last2 [y]\n  (loop [col y]\n    (if (= (count col) 1) \n      (reduce + col) \n      (recur (rest col))\n    )\n  )\n)","problem":19,"user":"5252ed18e4b0541d1855b8d9"},{"problem":19,"code":"#(.get %(- (count %) 1))\n;nth","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":19,"code":"(fn last-item [x] (if (= (rest x) ()) (first x) (last-item (rest x))))","user":"53b12c76e4b047364c04448a"},{"code":"(fn f [coll]\r\n  (if (= (count (rest coll)) 0)\r\n    (first coll)\r\n    (f (rest coll))))","problem":19,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn [s]\r\n        (if (next s)\r\n          (recur (next s))\r\n          (first s)))","problem":19,"user":"4daa6dd430acd6ed14482a68"},{"code":"(fn next-to-last[n] (nth n (- (count n) 1)))","problem":19,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":19,"code":"(fn [xs]\n  (if (empty? xs)\n    nil\n    ((fn get-last [ys]\n       (if (empty? (rest ys))\n         (first ys)\n         (get-last (rest ys))))\n     xs)))","user":"53d20e14e4b00fb29b22131a"},{"problem":19,"code":"(fn [l]  (first (reverse l)))","user":"5bb0fc08e4b0a20761a234f3"},{"code":"(fn [x]\n    (first (reverse x)))","problem":19,"user":"516095c9e4b009fba0926e29"},{"problem":19,"code":"(fn [seqn] (first (reverse seqn)))","user":"58042984e4b0a837a8b30ca3"},{"problem":19,"code":"(fn [x]\n  (if (= 1 (count x))\n    (first x) \n    (recur (rest x))))","user":"54e57397e4b024c67c0cf7fc"},{"problem":19,"code":"(fn f19\n  [s]\n  (if (empty? s)\n    nil\n    (nth s (dec (count s)))))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":19,"code":"(fn [input_sequence] (nth input_sequence (- (count input_sequence) 1)))","user":"5dfb33aae4b0a607a9a45cd7"},{"problem":19,"code":"(fn [s] \n  (reduce \n   (fn \n     [l n] \n     (identity n)) \n   s))","user":"5581747fe4b05c286339e0fa"},{"code":"(fn my-last [L]\n  (if (empty? (rest L))\n    (first L)\n    (my-last (rest L))))","problem":19,"user":"4f0feb75535d64f60314640f"},{"code":"(fn[x](first(reverse x)))","problem":19,"user":"538de1ede4b0b51d73faae77"},{"problem":19,"code":"(fn [coll] (loop [[head & tail] coll] (if (empty? tail) head (recur tail))))","user":"54af500fe4b09f271ff37d06"},{"code":"(fn [elements]\n  (if (= (count elements) 1)\n    (first elements)\n    (recur (rest elements))))","problem":19,"user":"4f382eb7e4b0e243712b1ed9"},{"code":"(fn [l] 7(first (reverse l)))","problem":19,"user":"52692ce2e4b03e8d9a4a71d5"},{"code":"(fn last-el [xs] (if (= '() (rest xs)) (first xs) (last-el (rest xs))))","problem":19,"user":"523c6451e4b07becd5be2222"},{"code":"(fn lasty [x] (cond (empty? (rest x)) (first x)\n               :else (lasty (rest x))))","problem":19,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":19,"code":"(fn [[first & rest]]\n    (if (nil? rest) first\n      (recur rest)))","user":"5a082ce4e4b01bb0ae8afdec"},{"problem":19,"code":"(fn myLast [[h & t]] \n  (if (empty? t) h (recur t)))","user":"56f748c6e4b08e7d20b9682f"},{"problem":19,"code":"(fn [col] (if (= (count col) 1) (first col) (recur (rest col))))","user":"557ffd0ee4b05c286339e0e3"},{"problem":19,"code":"#(nth % (dec (count %)))\n;(fn [a] (nth a (dec (count a))))","user":"596a66cde4b069c0a1a19803"},{"code":"(fn [lst]\n  (loop [rst lst]\n    (if (empty? (rest rst))\n      (first rst)\n      (recur (rest rst)))))","problem":19,"user":"510a8124e4b02ed671928d9b"},{"problem":19,"code":"(fn last2 [n] (if (next n)\n                (last2 (next n))\n                (first n)))","user":"5e17f787e4b00200644e3d5e"},{"problem":19,"code":"(fn [param]\n \t(nth param (- (count param) 1))\n)","user":"5e3b6ae9e4b01d43a70e8df4"},{"problem":19,"code":"(fn my-last [x] (if (= 1 (count x)) (first x) (my-last (rest x))))","user":"5b0d5619e4b0cc2b61a3bdf0"},{"code":"reduce (fn [r l] l)","problem":19,"user":"50c4a354e4b0210b849018af"},{"problem":19,"code":"(fn [se]\n  (->> se \n       (count) \n       (dec)\n       (nth se)))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":19,"code":"(fn get-last [col]\n  (peek (into [] col)))","user":"5b8d0564e4b0c0b3ffbd49cc"},{"problem":19,"code":"(fn [sequ] (if (next sequ)\n             (recur (next sequ))\n             (first sequ)))","user":"53b3abd6e4b047364c0444a7"},{"problem":19,"code":"(fn [[head & tail]]\n  (if tail (recur tail) head))","user":"553e3260e4b0a04f792994eb"},{"code":"(fn [n] (nth n (dec (count n))))","problem":19,"user":"50f445fce4b0345259e0f51a"},{"problem":19,"code":"(fn newlast [x] (if (= (rest x) []) (first x) (newlast (rest x))))","user":"578d5185e4b0ebec4cfb7568"},{"code":"(fn [L] (let [r (rest L)] (if (empty? r) (first L) (recur r))))","problem":19,"user":"535bf08fe4b04ce2eb3ed2af"},{"problem":19,"code":"(fn [seq]\n  (nth seq (dec (count seq))))","user":"54c4399ae4b045293a27f616"},{"code":"(fn [arg] (nth arg (- (count arg) 1)))","problem":19,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":19,"code":"(fn [c]\n  (if (> (count c) 1)\n    (recur (rest c))\n    (first c)))","user":"5aea2d21e4b0cc2b61a3bbe2"},{"code":"(fn last-in-seq [s]\n  (if\n    (= (count s) 1)\n    (first s)\n    (last-in-seq (rest s))))","problem":19,"user":"4f16dbf3535d64f603146450"},{"problem":19,"code":"(fn f [s]\n  (if (empty? (rest s))\n    (first s)\n    (f (rest s))))","user":"5b757ff8e4b047b03b2036ce"},{"problem":19,"code":"(fn [seqs]\n  (let [x (vec seqs)] \n  (get x (- (count x) 1))))","user":"5db9a6c3e4b010eb3c36cd56"},{"problem":19,"code":"(fn get-last [xs] (if (= () (rest xs)) (first xs) (get-last (rest xs))))","user":"5a08f951e4b01bb0ae8afdfd"},{"problem":19,"code":"#(reduce \n (fn [a v] v) %)","user":"565cc7a6e4b068f2fe63dc19"},{"problem":19,"code":"(fn l [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (l (rest xs))))","user":"548cd637e4b0e286459a1210"},{"code":"(fn [lst]\n  (loop [l lst]\n    (if (= '() (rest l)) \n      (first l) \n      (recur (rest l)))))","problem":19,"user":"4eaf1046535d7eef3080732f"},{"problem":19,"code":"(fn [xs]\n  (if (<= (count xs) 1)\n    (first xs)\n    (recur (rest xs))))","user":"56be350ce4b0f26550335981"},{"problem":19,"code":"(fn last-element [xlist] (if (empty? (rest xlist)) (first xlist) (last-element (rest xlist))))","user":"5c948c6be4b048ec896c5a35"},{"problem":19,"code":"(fn [s]\n  (let [[h & t] (seq s)]\n    (if t\n      (recur t)\n      h)))","user":"56b6d2b2e4b0982f16b37e3f"},{"problem":19,"code":"(fn [[x & more]]\n    (if more\n        (recur more)\n         x)\n    )","user":"550c84eae4b06e50f9beb151"},{"code":"(fn [seq] (nth seq (- (count seq) 1 ) ) )","problem":19,"user":"4ed51277535d10e5ff6f52d4"},{"problem":19,"code":"(fn [seq]\n  (loop [head (first seq), tail (rest seq)]\n    (if (empty? tail)\n      head\n      (recur (first tail) (rest tail)))))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":19,"code":"(fn f [[x & rs]] (if (= rs nil) x (recur rs)))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn [numbers] (nth numbers (- (count numbers) 1)))","problem":19,"user":"501c1b66e4b0539218e73b38"},{"problem":19,"code":"#(if (next %) \n  (recur (next %)) \n  (first %))","user":"60393252e4b0d5df2af222f2"},{"problem":19,"code":"(partial reduce #(do %2))","user":"5c1b82bce4b01240ff567211"},{"code":"(fn [list] (first (reverse list)))","problem":19,"user":"4e75334b535d7a570dd295be"},{"problem":19,"code":"(fn [x] (first (reverse x)));","user":"5aac44e9e4b073f17744256a"},{"problem":19,"code":"#(reduce (fn[x y] y) 0 %)","user":"558ed227e4b0277789237658"},{"problem":19,"code":"(fn [random-sequence]\n  (loop [new-sequence random-sequence]\n  \t(if (empty? (rest new-sequence))\n    \t(first new-sequence)\n    \t(recur (rest new-sequence)))))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn [m] (first (reverse m)))","problem":19,"user":"4ebca352535dfed6da9c6d88"},{"problem":19,"code":"(fn last-item [x] (nth x (dec (count x)) ) )","user":"56f18d0ce4b04a395b9a0496"},{"problem":19,"code":"(fn last2 [s] (first (reverse s)))","user":"552e92d3e4b076ab5578f7f2"},{"code":"#(peek (vec %))","problem":19,"user":"4df15946535d08e6dec9fe1c"},{"code":"(fn [ln]\n  (if (= (count ln) 1)\n    (first ln)\n    (recur (rest ln))))","problem":19,"user":"4eb04346535d7eef3080733a"},{"problem":19,"code":"(fn [l] (-> l reverse first))","user":"554d04bbe4b0a04f792995b4"},{"problem":19,"code":"(fn [[elt & rst]]\n  (if (empty? rst) elt\n    (recur rst)))","user":"5550c6e0e4b00713264bd9af"},{"code":"(fn foo [l] (if (empty? (rest l)) (first l) (foo (rest l))))","problem":19,"user":"5167218be4b079759a74a5e5"},{"code":"(fn ! [x] \n  (if (= (count x) 1) (first x) (! (rest x))))","problem":19,"user":"4f030bd1535dcb61093f6a4b"},{"code":"#(reduce (fn [a b] b) nil %)","problem":19,"user":"503a234de4b088a6a14ca76d"},{"problem":19,"code":"(fn last-sequence [elements]\n  (first (reverse elements)))","user":"60b98974e4b0e0fa5f1b4271"},{"problem":19,"code":"(fn [inp_vector] (nth inp_vector (- (count inp_vector) 1)))","user":"5df8a49ae4b0a607a9a45cab"},{"problem":19,"code":"(fn [alist] (first (reverse alist)))","user":"58950f29e4b00487982d5270"},{"problem":19,"code":"(fn [array]\n  (nth array (dec (count array))))","user":"6090a2b3e4b03bd49d9f36cc"},{"problem":19,"code":"#( nth %1 (dec (count %1)))","user":"5ec3f557e4b08d0ec38692c0"},{"problem":19,"code":"(fn[coll] (nth coll (- (count  coll) 1)))","user":"54d95088e4b024c67c0cf748"},{"problem":19,"code":"(fn my-last \n  [x]\n  (if (empty? x)\n    nil\n  \t(if (= (count x) 1)\n  \t\t(first x)\n  \t\t(my-last (rest x))))\n)","user":"54dcb632e4b024c67c0cf786"},{"code":"(fn lastel [coll] (if (empty? (rest coll)) (first coll) (lastel (rest coll))))","problem":19,"user":"52e32906e4b09f7907dd143d"},{"problem":19,"code":";; (comp first reverse)\n;; #(nth % (dec (count %)))\n;; (fn [[head & tail]] (if tail (recur tail) head))\nreduce (fn [a b] b)","user":"57010394e4b08d47c97781cf"},{"code":"(fn [x]\n  (if (= (rest x) '())\n    (first x)\n    (recur (rest x))\n    )\n  )","problem":19,"user":"51effd77e4b0249c592fbdf3"},{"code":"(fn [list]\n  (nth list (- (count list) 1)))","problem":19,"user":"50270618e4b01614d1633feb"},{"code":"#(nth % (-> % count dec))","problem":19,"user":"50052d38e4b0678c553fc45c"},{"code":"(fn custom-last [x]\n          (if (= (rest x) '())\n              (first x)\n            (custom-last (rest x))))","problem":19,"user":"4fdcc4c5e4b05e33b9224f70"},{"problem":19,"code":"(fn [vektor]\n  (loop [v vektor]\n    (if (= (count v) 1)\n      (first v)\n    (let [[p & l] v]\n      (recur l)))))","user":"5fb9b704e4b03f550f44822b"},{"code":"(fn [x] (nth x (dec (count x))) )","problem":19,"user":"4e8b6021535d65386fec211d"},{"code":"#(loop [x %]\r\n  (if (next x)\r\n    (recur (next x))\r\n    (first x)\r\n  )      \r\n)","problem":19,"user":"4e15c301535d04ed9115e7e5"},{"code":";(fn f [xx] \n;  (let [x (first xx), xs (next xx)] \n;    (if (empty? xs) x\n;      (f xs))))\n\n(comp first reverse)","problem":19,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn last-elem [lst] (if (empty? (rest lst)) (first lst) (last-elem (rest lst))))","problem":19,"user":"4f1684c7535d64f60314644b"},{"code":"(fn [x] (if (seq (rest x)) (recur (rest x)) (first x)))","problem":19,"user":"4e5914e0535d8a8b8723a29b"},{"problem":19,"code":"(fn [coll]\n  (loop [coll coll\n         acc (list)]\n    (if (= (count coll) 0)\n      (first acc)\n      (recur (rest coll) (conj acc (first coll))))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":19,"code":"(fn [x] \n  (nth x \n       (- \n        (count x) \n        1)))","user":"54e345a1e4b024c67c0cf7db"},{"code":"reduce(fn[a b]b)","problem":19,"user":"4f0378cc535dcb61093f6ae0"},{"problem":19,"code":"(fn \n      [l] \n      (loop [result nil rem l]\n        (if (empty? rem)\n          result\n          (recur (first rem) (rest rem)))))","user":"5e9a3814e4b0157ca96647e7"},{"code":"(fn new-last [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"529df7f1e4b04e0c58e87b86"},{"problem":19,"code":"#( first ( reverse %))","user":"5cd5ac3ae4b0ccb061962937"},{"problem":19,"code":"(fn [x]\n  (loop [initial (first x) remain (rest x)]\n    (if (empty? remain)\n      initial\n      (recur (first remain) (rest remain)))))","user":"5936a67de4b02506e01a2982"},{"problem":19,"code":"(fn [st] (get (vec st) (- (count st) 1)))","user":"56e4a6c1e4b03a7c14b85a51"},{"code":"(fn lastEl [l]\n(if (empty? (rest l)) (first l)\n  (lastEl (rest l))))","problem":19,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":19,"code":"(fn [theList] (#(first (reverse theList))))","user":"548026d8e4b0e286459a1155"},{"code":"(fn bob [a](nth a (- (count a) 1)))","problem":19,"user":"5034b623e4b062bc5d7ae168"},{"problem":19,"code":"(fn myFn [x] (if (= 1 (count x)) (first x) (myFn (rest x))))","user":"56a908aee4b07966d5a8a06e"},{"problem":19,"code":"(fn lst [l] (if (>= 1 (count l)) (first l) (lst (rest l))))","user":"54d95ce8e4b024c67c0cf74a"},{"code":"(fn [x] (if(next x) \n             (recur (next x))\n             (first x)\n    ))","problem":19,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":19,"code":"(fn[x] (first (filter #(= (.indexOf x %) (- (count x) 1)) x)) )","user":"52be0fd7e4b07a9af5792314"},{"problem":19,"code":"(fn f [l] (if-let [r (seq (rest l))] (f r) (first l)))","user":"5bc39d2be4b07a9b28b10045"},{"problem":19,"code":"(fn \n  [sequ]\n  (loop [[s & rest] sequ]\n    (if (nil? rest) \n      s\n      (recur rest))))","user":"543c1b6fe4b032a45b86933c"},{"code":"(fn [coll]\n  (loop [result nil coll coll]\n    (if (seq coll)\n      (recur (first coll) (rest coll))\n      result)))","problem":19,"user":"4e5be681535d8a8b8723a2bc"},{"problem":19,"code":"(fn lastelem [s]\n  (loop [[x & xs] s] \n    (if (seq xs)\n      (recur xs)\n      x)))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":19,"code":"reduce (fn [_ y] y) 0","user":"56e30cefe4b03a7c14b85a3d"},{"problem":19,"code":"(fn getlast [inseq] (first (reverse inseq)))","user":"53c1305be4b00fb29b22125d"},{"problem":19,"code":"reduce (fn [_ n] n)","user":"5ed875abe4b016b56eae05f2"},{"code":"(fn last-elem [seq-nce] (if (empty? (rest seq-nce)) (first seq-nce) (last-elem (rest seq-nce))))","problem":19,"user":"51aa2ad6e4b04e3dc0c27b20"},{"problem":19,"code":"(fn [x] \n  (if (= 1 (count x))\n    (first x)\n    (recur (rest x))\n    )\n  )","user":"559bf6d6e4b066d22e731f5d"},{"code":"(fn [myList] (first (reverse myList)))","problem":19,"user":"4f280b9ae4b0d6649770a011"},{"problem":19,"code":"(fn [xs](first(reverse xs)))","user":"56010dd8e4b04bb52996e177"},{"code":"#(loop [result nil col %1]\n   (if (empty? col)\n     result\n     (recur (first col) (rest col))))","problem":19,"user":"518ccf6be4b05e6c8537e386"},{"problem":19,"code":"(fn las [[head & remain]]\n  (if (empty? remain)\n    head\n    (las remain)))","user":"5e52f245e4b027a2e10ac0e1"},{"code":"(fn [l]\r\n   (first (reverse l)))","problem":19,"user":"4dda2c1b535d02782fcbe9ef"},{"code":"(fn [stuff] (first (reverse stuff)))","problem":19,"user":"4faa1157e4b081705acca1ea"},{"code":"(fn [v]\n  (first (reverse v)))","problem":19,"user":"507bb3ece4b09034bfeeb720"},{"code":"(fn [l] (first (reverse l) ) )","problem":19,"user":"522152bce4b0e6a83c8925ca"},{"code":"(fn [y] \n    (if (= (count y) 1) (first y) \n(recur (rest y))))","problem":19,"user":"500fbfabe4b0c8af2eae4184"},{"code":"(fn lst [l]\n  ((fn lst? [x xs] (if (= xs ()) x (lst? (first xs) (rest xs)))) (first l) (rest l)))","problem":19,"user":"533e45a7e4b085b17e897d8c"},{"code":"(fn [s] \n  (if (empty? (rest s))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn getLast [aseq]\n  (first (reverse aseq)))","problem":19,"user":"4ec817a6535d6d7199dd36f1"},{"problem":19,"code":"(fn [x]\n   (nth x (dec (count x))))","user":"5f63d933e4b02876ed9fd018"},{"problem":19,"code":"(fn getLast [l]\n  (if (= (rest l) []) \n    (first l)\n    (recur (rest l))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":19,"code":"(fn [coll]\n  (loop [xs coll]\n    (let [head (first xs)\n          tail (rest xs)]\n      (if (= (count tail) 0)\n        head\n        (recur tail)))))","user":"60b66033e4b0e0fa5f1b4248"},{"problem":19,"code":"(fn [x] \n  (loop [f (first x) r (rest x)]\n    (if (empty? (seq r)) \n      f\n      (recur (first r) (rest r))\n    )\n  )\n)","user":"5722bf99e4b0c5bde472c0d6"},{"problem":19,"code":"(fn [x]\n  (loop [v x\n         l nil]\n    (if (empty? v)\n      l\n      (recur (rest v) (first v)))))","user":"5d7bd708e4b02e6b30c93555"},{"code":"(comp first reverse)\n\n;(comp first (partial take-last 1))\n\n;(fn [[x & rest]]\n;  (if (empty? rest) x (recur rest)))\n\n;(fn [in]\n;  (if-let [r (next in)]\n;    (recur r)\n;    (first in)))","problem":19,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn lst [li] (if-not (seq (rest li)) (first li) (lst (rest li))))","problem":19,"user":"50e135f4e4b084616e11c667"},{"code":"(fn find-last [x] (.get x (dec (count x))))","problem":19,"user":"5259c698e4b0cb4875a45ce4"},{"problem":19,"code":"#( ->> % reverse first)","user":"56350c87e4b0bfe05bf117c0"},{"code":"#(first (reverse %1) )","problem":19,"user":"501adc55e4b0968d2b1d44af"},{"problem":19,"code":"(fn [col] (first (#(take-last 1 %1) col)))","user":"53e1c279e4b0d874e779ae5b"},{"code":"(fn ll [l] (if (seq (rest l)) (recur (rest l)) (first l)))","problem":19,"user":"503a8959e4b07a1917cc34d6"},{"code":"#(nth % (dec (count %))  )","problem":19,"user":"50856bd1e4b004985b776e4c"},{"problem":19,"code":"(fn [collection] (nth collection (dec (count collection))))","user":"57f8cd5ae4b0d3187e900930"},{"problem":19,"code":"(fn o\n  [lst]\n  (first (reverse lst)))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn [lst]\r\n  (loop [[x & xs] lst]\r\n    (if (empty? xs)\r\n        x\r\n        (recur xs))))","problem":19,"user":"4e1772b1535d04ed9115e7ee"},{"code":"(fn [[h & r]] (if (empty? r) h (recur r)))","problem":19,"user":"52299d14e4b04c906c9c6a7e"},{"problem":19,"code":"(fn [col]\n  (nth col (- (count col) 1))\n)","user":"5d13c5d2e4b0902706380dbf"},{"problem":19,"code":"(fn last-element [any-sequence]\n  (if (empty? (rest any-sequence))\n    (first any-sequence)\n    (last-element (rest any-sequence) )))","user":"57a17145e4b0c3d858beb8eb"},{"problem":19,"code":"#(loop [[a & r] %]\n   (if r\n     (recur r)\n     a))","user":"5c9c79a6e4b048ec896c5ae8"},{"code":"(fn [sequence] (nth sequence (dec (count sequence))))","problem":19,"user":"515bed3be4b0388ca8ca1525"},{"code":"(fn take-last[x](if ( = (rest x) ()) (first x) (take-last(rest x))))","problem":19,"user":"52d66ca0e4b09f7907dd135c"},{"problem":19,"code":"(fn [lst] (first (drop (- (count lst) 1) lst)))","user":"58014febe4b0a837a8b30c50"},{"problem":19,"code":"(fn [lis] (first (reverse lis)))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":19,"code":"(fn [v]\n      (loop [r v\n             l nil]\n        (if (empty? r)\n          l\n          (recur (rest r)\n                 (first r)))))","user":"56e43943e4b03a7c14b85a4b"},{"code":"(fn [coll] (if (empty? (rest coll)) (first coll) (recur (rest coll))))","problem":19,"user":"52e57ad7e4b09f7907dd1461"},{"problem":19,"code":"(fn l [x] (first (take-last 1 x)))","user":"56febe79e4b08d47c97781b1"},{"code":"(fn get-last [l] (if (= (rest l) ()) (first l) (get-last (rest l))))","problem":19,"user":"5328febee4b09d4e7a9b550d"},{"code":"(fn fso [lijstje] (first (reverse lijstje)))","problem":19,"user":"529df98de4b04e0c58e87b88"},{"code":"(fn blah [x] (first (reverse x)))","problem":19,"user":"5241069ce4b076e5d3121ee1"},{"problem":19,"code":"(fn mylast [x] \n  (peek \n   (vec x)\n   )\n  )","user":"5c8f9700e4b048ec896c59be"},{"problem":19,"code":"(fn mylast[myvec] (get (vec myvec) (- (count myvec) 1) ))","user":"58a17511e4b02bd94d917eb4"},{"code":"(fn [x]\n  (if (= (count x) 1) (first x)\n  (recur (rest x))))","problem":19,"user":"4e73a9dc535dff18050a9c77"},{"problem":19,"code":"(fn lst\n  [sq]\n  (let [f (first sq)\n        r (rest sq)]\n    (if\n      (nil? (seq r))\n      f\n      (recur r))))","user":"588e4e05e4b00487982d5188"},{"code":"#(nth % (- (count %) 1 ))","problem":19,"user":"4f8e984ee4b0d4e659cdde68"},{"code":"(fn [t] (if (next t) (recur (next t)) (first t)))","problem":19,"user":"50914228e4b0742c82730aea"},{"code":"(fn foo [x] \n  (first (reverse x)))","problem":19,"user":"4f04256d535dcb61093f6ba7"},{"code":"#(reduce (fn [curr next] next) %)","problem":19,"user":"53695439e4b0243289761e9a"},{"code":"#(loop[s %] (if (> (count s) 1) \n  (recur (rest s) ) \n  (first s)\n  ))","problem":19,"user":"4e44358f535dc968683fc4a8"},{"problem":19,"code":"(fn temp-last [xs]\n  (let [[h & t] xs]\n   (if (empty? t) h (temp-last t))))","user":"574cb8a2e4b02ea114799222"},{"code":"(fn [seqr] (peek (reverse seqr)))","problem":19,"user":"4fafd067e4b081705acca259"},{"problem":19,"code":"(fn last-item [items] (-> items reverse first))","user":"5d652873e4b0db5d338d15ce"},{"code":"(fn get-last\n  [shit]\n  (first (reverse shit)))","problem":19,"user":"53092f29e4b02e82168697b4"},{"problem":19,"code":";(fn [coll] (nth coll (- (count coll) 1)))\n#(-> % reverse first)","user":"560dfa8de4b05f002753df46"},{"problem":19,"code":"(fn [vect] (first (reverse vect)))","user":"5dcd182ae4b0b296f82db5a9"},{"problem":19,"code":"(fn [arr]\n  (let [c (count arr)]\n    ((into [] arr) (- c 1))\n    )\n  )","user":"5b2229eee4b03cfeda66ed5b"},{"code":"#(nth %1 (dec (count %1)))","problem":19,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn f [[n & r]] (if (empty? r) n (f r)))","problem":19,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":19,"code":"(fn [values] \n  (-> values\n      reverse\n      first))","user":"60452a00e4b02d28681c77b5"},{"code":"#(nth % (dec (alength (to-array %))))","problem":19,"user":"52323b20e4b035af41902a7a"},{"problem":19,"code":"(fn [vec] (first (take-last 1 vec)))","user":"559fb147e4b0acc240e314ea"},{"code":"(fn [s]\n  (if (seq s)\n    ; have anything left?\n    (if-let [r (seq (rest s))]\n      (recur r)\n      (first s))\n    nil))","problem":19,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [x] (loop [lst x, result nil] (if (empty? lst) result (recur (rest lst) (first lst)))))","problem":19,"user":"523f1245e4b01c266ffa7f95"},{"problem":19,"code":"(fn [x] (loop [pos x]  (if ( = 1 (count pos) ) (first pos) (recur (rest pos)))))","user":"55d2ee9fe4b0e31453f64a5c"},{"problem":19,"code":"(fn m [[x & xs]]\n  (if-not (empty? xs)\n    (m xs)\n    x))","user":"5d51377be4b0776584bd6f5d"},{"problem":19,"code":"(fn [xs]\n  (if (next xs) \n    (recur (next xs))\n    (first xs)))","user":"5e4471e1e4b01d43a70e8e85"},{"problem":19,"code":"(fn \n return-last \n [x] \n (let \n   [a (first x) \n    b (rest x)] \n   (\n    cond \n    (empty? b) \n    a\n    :else\n    (return-last b)\n   )\n  )\n)","user":"4e6aacad535d8ccf87e9fefa"},{"problem":19,"code":"(fn [x]\n    ((fn [x y]\n    (if (empty? x)\n      y\n      (recur (into [] (drop 1 x)) (first x)))\n    )(into [] (drop 1 x))(first x)))","user":"58dadf46e4b0a4d5acaab66b"},{"code":"(fn [s]\n  (if (not (next s)) (first s)\n    (recur (next s))))","problem":19,"user":"53709af0e4b0fc7073fd6e98"},{"problem":19,"code":"(fn [some-seq]\n  (nth some-seq (dec (count some-seq)))\n  )","user":"57a6ad79e4b0a9660795620b"},{"problem":19,"code":"(fn [s] (loop [s s] (if (empty? (rest s)) (first s) (recur (rest s)))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"code":"(fn last-t [seqt]\n  (if\n    (empty? (rest seqt))\n    (first seqt)\n    (last-t (rest seqt))))","problem":19,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [[x & xs]]                                                                                                                                        \n  (if (seq xs)                                                                                                                                                \n    (recur xs)                                                                                                                                                \n    x))","problem":19,"user":"510c1dd5e4b078ea71921113"},{"code":"(fn ult [x] (.get x(- (count x) 1)))","problem":19,"user":"5166bdf1e4b060c690c1f4c1"},{"code":"(fn last-element [x]\n  (first (reverse x))\n)","problem":19,"user":"50909368e4b084db37c1e074"},{"code":"(fn lst [s] (cond \n  (empty? (rest s)) (first s)\n  :else (lst (rest s))))","problem":19,"user":"4fd51da9e4b0d4de60cee371"},{"problem":19,"code":"(fn [l](nth l (dec (count l))))","user":"5d5f46a6e4b0c9e5857d5000"},{"code":"(fn [xs]\n  (-> xs reverse first))","problem":19,"user":"5344fe13e4b084c2834f4a32"},{"code":"(fn mylast [lst]\n   (if (= (count lst) 1) (first lst)\n    (mylast (rest lst))))","problem":19,"user":"4e2e6460535deb9a81d77f0b"},{"code":"(fn get-last [arg] (nth arg (- (count arg) 1)))","problem":19,"user":"4fba77fae4b081705acca2df"},{"problem":19,"code":"(fn [seq] (reduce (fn [x y] (identity y)) seq))","user":"55f014ebe4b06e875b46ce1b"},{"problem":19,"code":"(fn get-last [s] (if (= 1 (count s)) (first s) (get-last (rest s))))","user":"57e56da8e4b0bfb2137f5ad6"},{"code":"reduce(fn [a b] b)","problem":19,"user":"534c9da8e4b084c2834f4a94"},{"code":"(fn [coll]\n  (if (= 1 (count coll))\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"5391ab43e4b0b51d73faaea6"},{"code":"(fn [seq]\n  (let [n (next seq)]\n    (if n\n      (recur n)\n      (first seq))))","problem":19,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn last2 [x]\n  (if (= (rest x) ())\n    (first x)\n    (last2 (rest x) )))","problem":19,"user":"504fcff0e4b0a02f9cffdea6"},{"problem":19,"code":"(fn mylast\n  [lst]\n  (if (= (rest lst) '())\n    (first lst)\n    (mylast (rest lst))))","user":"56bb81ebe4b0f26550335957"},{"code":"(fn [list] (first (drop (- (count list) 1) list)))","problem":19,"user":"50996376e4b0cae2931060b2"},{"code":"(fn [s] (loop [r s]\n           (if (empty? (rest r))\n            (first r)\n            (recur (rest r)))))","problem":19,"user":"5167d60de4b0c5a4140a3098"},{"problem":19,"code":"(fn [[one & more]]\n  (if (first more)\n  \t(recur more)\n    one))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"(fn [s] (if (empty? (rest s)) \n          (first s)\n          (recur (rest s))))","problem":19,"user":"51a24c6ae4b00957e520db7a"},{"code":"(fn [list] (loop [xs list]\n             (if (empty? (rest xs))\n               (first xs)\n               (recur (rest xs)))))","problem":19,"user":"5339eb56e4b0e30313ee6cb2"},{"code":"(fn [s] (if (next s)\n\t\t\t(recur (next s))\n\t\t\t(first s)\n        )\n)","problem":19,"user":"5151e239e4b03e678e393ae2"},{"code":"(fn [ls] \n  (if (next ls)\n    (recur (next ls))\n    (first ls)))","problem":19,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":19,"code":"(fn laste\n      [[n & more]]\n  \n  \t\t(if more\n         (recur more)\n         n))","user":"5753d779e4b02ea1147992b1"},{"problem":19,"code":"#(first (reduce (fn [reversed thing] (into reversed (list thing))) () %))","user":"5b3a60c7e4b02d533a91bbc5"},{"problem":19,"code":"(fn [sq] (loop [[this & remaining] sq]  (if-let [x (first remaining)] (recur remaining) this)))","user":"56bb9ccce4b0f26550335959"},{"problem":19,"code":"(fn[arr] (first(take-last 1 arr )))","user":"55532e28e4b0deb715856dfe"},{"problem":19,"code":"(fn [coll]\n  (let [v (into [] coll)]\n    (nth v (dec (count v)))))","user":"5eb2c2c3e4b00a66d4a9520b"},{"problem":19,"code":"(fn lst [xs] (if (= (count xs) 1) (first xs) (lst (rest xs))))","user":"556de4dfe4b09a3098a5250c"},{"code":"(fn ([lst] (nth lst (- (count lst) 1))))","problem":19,"user":"4f7250cce4b07046d9f4f02a"},{"problem":19,"code":"(fn [q]\n  (loop [[head & tail] q]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"541d53d0e4b01498b1a71a7f"},{"code":"(fn [x] (let [s (vec x)] (s (- (count s) 1))))","problem":19,"user":"4ee8de0e535d93acb0a66885"},{"problem":19,"code":"(fn l [x]\n          (if (empty? (rest x))\n            (first x)\n            (l (rest x))))","user":"56acca9ae4b03c432f18734c"},{"code":"(fn [s] ((vec s) (- (count s) 1)))","problem":19,"user":"5177f89ae4b0f89a8f53839a"},{"code":"(fn [list] (if (= (count list) 0) 0 (nth list (dec (count list)))))","problem":19,"user":"4edd9d79535d10e5ff6f532b"},{"code":"(fn [ls] (first(reverse ls)))","problem":19,"user":"4e89ddf9535d3e98b8023284"},{"problem":19,"code":"(fn end [l] (first (reverse l)))","user":"5441d720e4b032a45b869374"},{"problem":19,"code":"(fn [lst]\n (first(reverse lst)))","user":"57fc08d8e4b0d3187e900988"},{"problem":19,"code":"(fn mylast [xs] \n  (if (empty? (rest xs))\n    (first xs)\n    (mylast (rest xs))))","user":"59c3a7e9e4b0a024fb6ae4df"},{"code":"(fn lastelem [a] (if (<= (count a) 1) (first a) (lastelem (rest a))))","problem":19,"user":"52586dc4e4b0cb4875a45cb1"},{"problem":19,"code":"(fn [s] (if (= (count s) 1)\n          \t(first s)\n          \t(recur (rest s))))","user":"5af0ac45e4b0cc2b61a3bc56"},{"code":"(fn [x] \n  (if (= (count x) 1)\n    (first x)\n    (recur (rest x))))","problem":19,"user":"529a73bde4b02ebb4ef75096"},{"problem":19,"code":"(fn [x] (-> \n         (reverse x)\n         (first)\n        )\n)","user":"60b2f7a0e4b0e0fa5f1b422c"},{"problem":19,"code":"(fn custom-last [xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (custom-last (rest xs))))","user":"578606d2e4b0ebec4cfb74ec"},{"problem":19,"code":"(fn\n  [[head & rest]]\n  (if-not (seq rest)\n    head\n    (recur rest)))","user":"5cdc17d0e4b05ee0cb31173c"},{"code":"#(loop [arr %]\n  (if (next arr)\n    (recur (next arr))\n    (first arr)))","problem":19,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":19,"code":"#(let [[hd & others] %]\n   (if (empty? others)\n   \thd\n   \t(recur others)))","user":"591e7bd4e4b09b4ee5954c34"},{"code":"(fn [array] (first (take-last 1 array)))","problem":19,"user":"516cbba6e4b06f078fab2525"},{"problem":19,"code":"#(reduce (fn [first second] second) %)","user":"54ef4a1ee4b024c67c0cf883"},{"problem":19,"code":"(fn [xs] (let [c (count xs)] (nth xs (dec c))))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":19,"code":"reduce (fn [n m] m)","user":"5853873fe4b0b7285a6f4ecd"},{"problem":19,"code":"(fn [s] (.get s (- (count s) 1)))","user":"595eaa8fe4b066ee0a44b04b"},{"code":"#(-> %\n     reverse\n     first)","problem":19,"user":"4e09392a535d04ed9115e7ae"},{"code":"(fn [x] (let [n (count x)] (nth x (- n 1))))","problem":19,"user":"5038381ce4b0803468ea2c6b"},{"problem":19,"code":"(fn [x] ((into [] x) (- (count x) 1)))","user":"597463dae4b01722bebd4caf"},{"code":"(fn [coll]\n  (loop [c coll]\n    (if (empty? (rest c))\n      (first c)\n      (recur (rest c)))))","problem":19,"user":"51991a89e4b068aa333628fd"},{"code":"(fn [seq]\n  (loop [sq seq]\n    (if (= (rest sq) '())\n      (first sq)\n      (recur (rest sq)      )\n)\n  ))","problem":19,"user":"4e6daa22535d5021c1a895ef"},{"code":"(fn [arr]\n(nth arr (- (count arr) 1))\n )","problem":19,"user":"52f0f3e5e4b05e3f0be25ee7"},{"problem":19,"code":"(fn h [lst]\n  (if (nil? (next lst))\n    (first lst)\n    (h (rest lst))))","user":"5775c40ae4b0979f89651626"},{"problem":19,"code":"#(loop [x %]\n    (if (empty? (rest x))\n      (first x)\n      (recur (rest x))))","user":"590260cde4b0438e51c2d057"},{"code":"#(let [l (count %)] (nth % (dec l)))","problem":19,"user":"53064ac4e4b02e8216869791"},{"code":"(fn self ([xs](self xs nil))\n ([xs acc]\n   (if (empty? xs) acc\n      (recur (rest xs) (first xs))\n)))","problem":19,"user":"4e8681b7535dae1a5effa438"},{"code":"#(get (into [] %) (- (. (into [] %) length) 1))","problem":19,"user":"533cebf1e4b085b17e897d78"},{"code":"(fn myLast [x] \n  (if (> (.size x) 1)\n    (myLast (rest x))\n    (.first x)))","problem":19,"user":"5166b716e4b060c690c1f4bf"},{"problem":19,"code":"reduce (fn [acc x] x)","user":"596df5f0e4b069c0a1a1985a"},{"problem":19,"code":"(fn -last [l] (\n          let [-head (first l) -tail (rest l)]\n\n          (if (= 0 (count -tail))\n            -head\n            (-last -tail)\n            ))\n)","user":"571543bbe4b07c98581c3ad4"},{"problem":19,"code":"(fn lastItem [x] (if (= (rest x) []) (first x) (lastItem (rest x))))","user":"5531c9c0e4b076ab5578f82a"},{"code":"(fn mylast [coll]\r\n  (first (reverse coll)))","problem":19,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn [s] (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"50d2e74ae4b03c62ef244480"},{"code":"#(loop [sq %]\n  (cond (= 1 (count sq))\n        (first sq)\n        :else\n        (recur (rest sq))))","problem":19,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [[x & more]] (if (seq more) (recur more) x))","problem":19,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":19,"code":"(fn [coll]\n  (if-let [s (next coll)]\n    (recur s)\n    (first coll)))","user":"575cbe44e4b02ea114799374"},{"code":"#(nth % (- (count %)1))","problem":19,"user":"4f29afc7e4b0d6649770a02e"},{"code":"(fn r-last [seq] (if (= (count seq) 1) (first seq) (r-last (rest seq))))","problem":19,"user":"5073e7fde4b054001656accb"},{"code":"(fn [xs]\n  (let [remaining (rest xs)]\n    (if (empty? remaining) (first xs) (recur remaining))))","problem":19,"user":"52138dd7e4b0d32679a5065d"},{"problem":19,"code":"#(loop \n \t[seq %]\n    (let [new-rest (rest seq)]\n      (if (<= (count new-rest) 1) \n        (first new-rest)\n        (recur new-rest)\n        )))","user":"594be2cae4b07ddc2dafae48"},{"problem":19,"code":"(fn mylast\n  [s]\n  (let [f (first s)\n        r (rest s)]\n    (if (seq r)\n      (recur r)\n      f)))","user":"589ce536e4b00487982d5370"},{"code":"(fn [e] (letfn [(f ([x & rest] (apply f rest)) ([x] x))] (apply f e)))","problem":19,"user":"5051e2c0e4b0a561d07d8f0b"},{"problem":19,"code":"#(nth %1 (-(count %1) 1))","user":"56c85700e4b0ed865f9758d0"},{"problem":19,"code":"(fn [seq] (loop [remaining seq] (if (empty? (rest remaining)) (first remaining) (recur (rest remaining)))))","user":"586d2f5be4b01531a375e98c"},{"code":"(fn [x] (first (reduce conj '() x)))","problem":19,"user":"51f8e057e4b09be9c177e53d"},{"problem":19,"code":"(fn get-last [lst]\n  (case (count lst)\n    0 nil\n    1 (first lst)\n    (get-last (rest lst))))","user":"5e385965e4b01d43a70e8dba"},{"problem":19,"code":"(fn [collection]\n  (loop [[first & remaining] collection]\n  \t(if (empty? remaining)\n      first\n      (recur remaining)\n    )\n  )\n)","user":"5518c802e4b06a49daca83cd"},{"problem":19,"code":"(fn [[x & remain]]\n  (if (nil? remain) x\n    (recur (rest remain))))","user":"563130e4e4b0bfe05bf1178d"},{"problem":19,"code":"(fn [seq]\n  (reduce (fn [f l] l) seq))","user":"547e64dee4b0c51c1f4d7309"},{"problem":19,"code":"(fn [x] \n  (loop [[f & r] x]\n    (if (empty? r)\n      f\n      (recur r))))","user":"54dc4010e4b024c67c0cf77e"},{"code":"(fn [first_element] (first (reverse first_element)))","problem":19,"user":"539f6f1de4b0ca733b97449a"},{"code":"(fn [x]\n  (if (nil? (next x))\n       (first x)\n       (recur (next x))))","problem":19,"user":"51262a3fe4b05d10e3e39600"},{"code":"(fn [coll]\n  (loop [[x & xs] coll]\n    (if xs\n      (recur (next xs))\n      x)))","problem":19,"user":"5224a46ce4b01819a2de42e5"},{"code":"(fn my-last [lst]\r\n        (if (= (first (rest lst)) nil)\r\n            (first lst)\r\n            (my-last (rest lst))))","problem":19,"user":"4e68fe94535d8ccf87e9fe94"},{"problem":19,"code":"(fn [input]\n  (if (empty? (rest input)) (first input) (recur (rest input))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"code":"(fn mylast [x] (if (= 1 (count x)) (first x) (mylast (rest x))))","problem":19,"user":"522bf20ee4b0d34ee08e71c7"},{"code":"(fn lst [seq] \n  (if (= (rest seq) ()) \n    (first seq)\n    (lst (rest seq))\n    )\n  )","problem":19,"user":"5194f482e4b05be8c43d2385"},{"problem":19,"code":"(fn remainder [a] (if (empty? (rest a)) (first a) (remainder (rest a))))","user":"55645592e4b0c656e3ff1802"},{"problem":19,"code":"(fn [x] (rand-nth [5 3 \"d\"]))","user":"54107c96e4b01498b1a719ae"},{"problem":19,"code":"(fn bla [ seq1 ] (if (next seq1) (bla (next seq1)) (first seq1)) )","user":"59f90e6ae4b0ca45a743a337"},{"code":"(fn [col] (if (<= (count col) 1)\n              (first col)\n             (recur (rest col))))","problem":19,"user":"4ef992c8535dced4c769f268"},{"problem":19,"code":"(fn find-last [[first & rest]]\n    (if rest\n      (find-last rest)\n      first))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(partial reduce (fn [x y] y))","problem":19,"user":"52f89ac8e4b047fd55836fd7"},{"problem":19,"code":"(fn last-element [s]\n\t(if (empty? (rest s)) (first s) (last-element (rest s))))","user":"57a9db97e4b0b8559636fc5b"},{"code":"(fn [theseq] (first (reverse theseq)))","problem":19,"user":"532be2e1e4b09d4e7a9b553a"},{"problem":19,"code":"(fn foo\n  [nums]\n  (let [[head & tail] nums] \n    (if (empty? tail)\n      head\n      (foo tail))))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn mylast\n  [s]\n  (if (next s) \n    (recur (next s))\n    (first s)))","problem":19,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [x]\n  (cond (= 1 (count x)) (first x) \n        :else (recur (rest x))))","problem":19,"user":"4f0eeff3535d0136e6c22327"},{"problem":19,"code":"(fn my-last [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (my-last (rest coll))))","user":"5777cffae4b0979f89651651"},{"problem":19,"code":"#(if-let [r (next %)]\n    (recur r)\n    (first %))","user":"55ece7d6e4b0121d4835fdcf"},{"code":"(fn f [x] (if (= 1 (count x)) (first x) (f (rest x))))","problem":19,"user":"4f03e462535dcb61093f6b77"},{"code":"(fn [c] (if (next c) (recur (next c)) (first c)))","problem":19,"user":"5308dd20e4b02e82168697b3"},{"problem":19,"code":"#(loop [x %] (if (= (count x) 1) (first x) (recur (rest x))))","user":"4df73d64535d04ed9115e775"},{"problem":19,"code":"(fn find-last [col]\n  (if (= nil (first (rest col)))\n    (first col)\n    (find-last (rest col))\n    )\n)","user":"53f9fe41e4b0de5c41848575"},{"problem":19,"code":"reduce #(if true %2) \"\"","user":"5863eda2e4b0f14aab7c8836"},{"code":"(fn getLast [x] (if (= (rest x) []) (first x) (getLast (rest x))))","problem":19,"user":"4fd7aba6e4b0dab7d829f388"},{"problem":19,"code":"(partial apply (fn last-el ([head & tail] (apply last-el tail)) ([element] element)))","user":"540904a7e4b0addc1aec66d2"},{"code":"(fn [X] (first (reverse X)))","problem":19,"user":"4eb9206b535dfed6da9c6d4d"},{"problem":19,"code":"(fn [seq]\n  (first(drop (- (count seq) 1) seq)))","user":"58ac01f7e4b0005cfeb1a73b"},{"code":"(fn [se] (first (reverse se)))","problem":19,"user":"4df407c3535d08e6dec9fe2e"},{"problem":19,"code":"(fn [n] (if (next n) (recur (next n)) (first n)))","user":"603a6c40e4b0d5df2af222f7"},{"code":"(fn [x] \n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"52cdc539e4b07d0d72b2737e"},{"code":"#(let [n (- (count %) 1)]\r\n   (nth % n))","problem":19,"user":"4e0dee88535d04ed9115e7b8"},{"problem":19,"code":"(fn [x] \n (.get x (dec (count x))))","user":"5ec66326e4b08d0ec38692d5"},{"code":"(fn [x]\n  (if (seq (rest x))\n    (recur (rest x))\n    (first x)))","problem":19,"user":"519c0c6ee4b0a1d87b003450"},{"code":"(fn lst [coll] \n  (if (empty? (rest coll))\n    (first coll)\n    (lst (rest coll))))","problem":19,"user":"51fbeddae4b0f1313d468a16"},{"problem":19,"code":"(fn [coll] \n  (nth coll (dec (count coll))))","user":"576d24ede4b0979f8965155b"},{"problem":19,"code":"(fn [sqn] \n  (loop [f (first sqn) restof (rest sqn)]\n    (if (empty? restof)\n    f\n    (recur (first restof) \n           (rest restof)))))","user":"569aca1ee4b0542e1f8d144d"},{"code":"(fn [[head & tail]] (if tail (recur tail) head))","problem":19,"user":"5288b06de4b0239c8a67ae55"},{"code":"(fn last-fn [seq] \n  (if (nil? (next seq))\n     (first seq)\n     (last-fn (next seq))))","problem":19,"user":"4f284db6e4b0d6649770a014"},{"code":"(fn [xs] (first (drop (- (count xs) 1) xs)))","problem":19,"user":"4ed6238d535d10e5ff6f52de"},{"code":"#(let [[x & xs] %]\n    (if (seq xs)\n      (recur xs)\n      x))","problem":19,"user":"4e8a8720535d65386fec210c"},{"problem":19,"code":"(fn last-of\n  [collection]\n  (nth collection (dec (count collection))))","user":"542d5fa9e4b0dad94371f2b5"},{"problem":19,"code":"(fn end [lst] (first (reverse lst)))","user":"54418311e4b032a45b869370"},{"problem":19,"code":"(fn [s] (loop [s s] (if-let [r (next s)] (recur r) (first s))))","user":"5446c89ce4b032a45b8693b5"},{"code":"#(aget (to-array %) (- (alength (to-array %)) 1))","problem":19,"user":"512547a3e4b05d10e3e395f4"},{"problem":19,"code":"(fn mylast [sq]\n  (-> sq\n      reverse\n      first))","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn [s] \n  (let [xs (rest s)] \n    (if (empty? xs) \n      (first s) \n      (recur xs))))","problem":19,"user":"4fc5019ae4b081705acca36d"},{"problem":19,"code":"(fn fla [x] (if (= (count x) 1) (first x) (fla (rest x))))","user":"5a03c545e4b01bb0ae8afd89"},{"code":"(fn my_last [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"52ae5c0ee4b0c58976d9aca5"},{"problem":19,"code":"(fn [x] (->> x count dec (nth x)))","user":"55be39f9e4b01b9910ae2a06"},{"code":"; clojure.core nth\n; (fn last-element [s] (nth s (- (count s) 1)))\n; (fn [x] (nth x (- (count x) 1)))\n; #(nth % (- (count %) 1))\n\n; (fn last-element [s] (first (reverse s)))\n; (fn [x] (first (reverse x)))\n; #(first (reverse %))\n\n; (comp first reverse)\n\n; (fn [s] (first (drop (- (count s) 1) s)))\n; #(first (drop (- (count %) 1) %))\n\n; (fn [s] (first (take-last 1 s)))\n#(first (take-last 1 %))\n\n; (fn [s] (if (next s) (recur (next s)) (first s)))\n\n; #(if (next %) (recur (next %)) (first %))","problem":19,"user":"525f61aae4b0cb4875a45dcb"},{"problem":19,"code":"#( first ( drop ( dec ( count % ) ) % ))","user":"556880dae4b0c656e3ff1856"},{"problem":19,"code":"(fn [val] (first (reverse val)\n  ))","user":"4f29e69ae4b0d6649770a036"},{"code":"(fn ultimo [x] (first (reverse x)))","problem":19,"user":"4f6b1457e4b07046d9f4efa6"},{"code":"(fn get-element [[x & more]]\n  (if more (get-element more) x))","problem":19,"user":"523b82efe4b07becd5be21f0"},{"problem":19,"code":"(fn [v]\n  (-> v\n      reverse\n      first))","user":"56fd058be4b08d47c97781a1"},{"problem":19,"code":"#(loop [l % r nil]\n   (if (seq l)\n     (recur (rest l) (first l))\n     r))","user":"56ae7589e4b03c432f187360"},{"problem":19,"code":"(fn [lst] \n  (loop [[head & tail] lst]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":19,"code":"#(reduce (fn [acc e] e) nil %)","user":"59a06e55e4b0871e7608b835"},{"problem":19,"code":"(fn l [x]\n  (if (empty? (rest x))\n    (first x)\n    (l (rest x))))","user":"5839f079e4b089d5ab817d48"},{"code":"(fn name [param] (if (= [] (rest param)) (first param) (name (rest param))))","problem":19,"user":"5118a9a3e4b046de85f62a4a"},{"problem":19,"code":"(fn[x] (nth x ( - (count x) 1)))","user":"55679198e4b0c656e3ff1843"},{"code":"(fn [seq]\n  (first (reverse seq)))","problem":19,"user":"4e78986e535db9503626571f"},{"problem":19,"code":"(fn lastElem [x] (nth x (- (count x) 1)))","user":"5a2960fde4b07f18be40aa78"},{"code":"#(if (next %) \n         (recur (next %))\n         (first %))","problem":19,"user":"4eea437b535d93acb0a6689a"},{"code":"(fn [coll]\n  ((fn [coll res]\n     (if (empty? coll)\n         res\n         (recur (rest coll) (first coll))))\n     (rest coll) (first coll)))","problem":19,"user":"4e8dc25f535d65386fec213a"},{"problem":19,"code":"(fn get-last [[x & xs]] (if (empty? xs) x (get-last xs)))","user":"56ff473ae4b08d47c97781bc"},{"code":"(fn mylast [l]\n  (if (> (count l) 1)\n    (recur (rest l))\n    (first l)))","problem":19,"user":"4ee95013535d93acb0a6688d"},{"problem":19,"code":"(fn [ls] (loop [rec-ls ls] (if (empty? (rest rec-ls)) (first rec-ls) (recur (rest rec-ls)))))","user":"54b6cd2be4b0ed20f4ff6e7e"},{"problem":19,"code":"(fn f [l] (first (reverse l)))","user":"5ed15e23e4b016b56eae05ba"},{"problem":19,"code":"(fn [col] (loop [remain col lastelement 0] \n                    (if (empty? remain) \n                       lastelement\n                       (recur (rest remain) (first remain))\n                       )\n                    ))","user":"5809f223e4b0a837a8b30d29"},{"problem":19,"code":"(fn last_elem [items] (if (= (count items) 1) (first items) (last_elem (rest items))))","user":"53d2b10de4b00fb29b221322"},{"code":"(fn [[top & remaining]]\n  (if (nil? remaining)\n    top\n    (recur remaining)))","problem":19,"user":"53325956e4b019098a6f8b74"},{"problem":19,"code":"(fn [[x & xs]]\n    (if (empty? xs) \n      x\n      (recur xs)))","user":"554c296ae4b0a04f792995a1"},{"code":"(fn [& more] (first (apply reverse more)))","problem":19,"user":"4ed3c9d3535d44c135fd68f7"},{"code":"(fn last_ [x]\n  (if\n    (empty? (rest x))\n     (first x)\n    (last_ (rest x))))","problem":19,"user":"51f04e89e4b0274c496158cd"},{"problem":19,"code":"(fn fun [x]\n           (if (= nil (next x))\n             (first x)\n             (fun (rest x))))","user":"5af047b8e4b0cc2b61a3bc48"},{"problem":19,"code":"(fn lastthing [x]\n  (if\n  \t(empty? (rest  x))\n    \t(first x)\n    \t(recur (rest x))))","user":"55d5904ce4b0e31453f64a8c"},{"code":"(fn lst2[x] (first (reverse x)))","problem":19,"user":"4f6236abe4b0defedf855fcd"},{"code":"(fn[s](first(reverse s)))","problem":19,"user":"4f098146535dcb61093f6c48"},{"code":"(fn [sequ] (loop \n             [se sequ]\n             (let [next (rest se)]\n               (if (empty? next) \n                 (first se)\n                 (recur next)))))","problem":19,"user":"51789dfae4b03d69594194d7"},{"code":"reduce (fn [x y] y )","problem":19,"user":"50807940e4b01a93d3f38e44"},{"problem":19,"code":"#(loop [x %1] (if (empty? (rest x)) (first x) (recur (rest x))))","user":"5654e024e4b0f9d632dd848d"},{"problem":19,"code":"(fn apapun [AP] (first (reverse AP)))","user":"53f8a8bae4b0de5c4184856e"},{"code":"(fn [x] (first (vec ( reverse x))))","problem":19,"user":"4ead76b7535d7eef30807320"},{"problem":19,"code":"(fn [xs] (peek (vec xs)))","user":"574c5f34e4b02ea11479921c"},{"problem":19,"code":"(fn\n  [coll]\n  (loop [[part & remainder] coll]\n    (if(= remainder nil) part (recur remainder))))","user":"55995d88e4b031d6649c9ba8"},{"problem":19,"code":"(fn last-element[l]\n  \"returns the last elemet of list\"\n  (first\n  (reverse l)))","user":"60d61d33e4b0d60f5ea6f7e5"},{"code":"#(first(drop (- (count %) 1) %))","problem":19,"user":"4f4f543ce4b03ad3f0c10cdf"},{"problem":19,"code":"(fn mylast [l] \n  (print l)\n  (if (> (count l) 1) \n     (mylast (rest l))\n     (first l)\n  )\n)","user":"5c6748f0e4b0fca0c16226b6"},{"code":"(fn mylast [s] (if (next s) (recur (next s)) (first s)))","problem":19,"user":"4e851955535db62dc21a62e9"},{"code":"#(.get % (dec (count%)))","problem":19,"user":"52ac9225e4b0c58976d9ac87"},{"code":"(fn [coll] (let [lst (dec (count coll))] (nth coll lst)))","problem":19,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn [x] \r\n  (first (reverse x)))","problem":19,"user":"5046ee3ee4b03b02161376b4"},{"problem":19,"code":"(fn [col] (loop [c (first col), rst (rest col)] (if (not= (seq rst) nil) (recur (first rst) (rest rst)) c)))","user":"5ab168d2e4b073f1774425c2"},{"code":"(fn last1 [s]\n   (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"50ab44b2e4b0f65d68208509"},{"code":"(fn my-last [sq]\n  (if (empty? (rest sq))\n    (first sq)\n    (my-last (rest sq))))","problem":19,"user":"538d64cae4b0b51d73faae6d"},{"code":"(fn f [ls] (if (= (rest ls) []) (first ls) (f (rest ls))))","problem":19,"user":"4f369deae4b0e243712b1ecb"},{"code":"(fn last-element [x]\n  (if (= 1 (count x))\n    (first x)\n    (last-element (rest x))))","problem":19,"user":"50602bc6e4b08f2a82ad10ba"},{"problem":19,"code":"(fn my-last [items]\n  (let [c (count items)]\n    (if (= 1 c)\n      (first items)\n      (my-last (rest items)))))","user":"5d80f328e4b0915913b1d372"},{"problem":19,"code":"#(if (= 1 (count %))\n   (first %)\n   (recur (rest %)))","user":"57377ae8e4b0cd1946bd1046"},{"code":"(fn getLast [x] (if (= (rest x) '()) (first x) (getLast (rest x))))","problem":19,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"code":"(fn [c]\n  (if (next c)\n    (recur (next c))\n    (first c)\n  ))","problem":19,"user":"502a3ffbe4b01f0b5e5efaa5"},{"code":"(fn la [l] (if (= 1 (count l)) (first l) (la (rest l))))","problem":19,"user":"4fcebce4e4b03432b189f404"},{"code":"#(nth%1(-(count%1)1))","problem":19,"user":"4f296a80e4b0d6649770a02a"},{"problem":19,"code":"(fn [args]\n  (nth args (- (count args) 1))\n)","user":"588b1eb5e4b05c141a256071"},{"problem":19,"code":"(fn [c] (let [size (count c)]\n          (nth c (- size 1))))","user":"59d77634e4b0ef0a1e9b5c34"},{"problem":19,"code":"(fn f [l] (let [[x & xs] l] (if (empty? xs) x (f xs))))","user":"5be744dae4b0f319e2d7ec57"},{"code":"(fn mylast [x]\r\n  (if (= (rest x) '())\r\n    (first x)\r\n    (mylast (rest x))))","problem":19,"user":"4de33f4e535d08e6dec9fded"},{"problem":19,"code":"(fn laatste [lijst] (nth lijst(- (count lijst) 1)))","user":"5444ec99e4b032a45b869394"},{"code":"(fn lambda [sequen]\n  (if (== (count sequen) 1)\n    (first sequen)\n    (lambda (rest sequen))))","problem":19,"user":"527a5b84e4b03e8d9a4a7558"},{"problem":19,"code":"(fn r [as] (if (= 1 (count as)) (first as) (r (next as))))","user":"588782eae4b0f1effa3b76fd"},{"problem":19,"code":"(fn lst* [a]\n         (if (= 1 (count a))\n           (first a)\n           (lst* (rest a))))","user":"58b26da4e4b0ebc645576d0a"},{"problem":19,"code":"(fn\n  [s]\n  (nth s (- (count s) 1)))","user":"53cb5559e4b00fb29b2212d2"},{"problem":19,"code":"(fn [elems] (if (= 1 (count elems)) (first elems) (recur (rest elems))))","user":"5ad6ad5de4b0ea6055cfac0e"},{"problem":19,"code":"(fn [lat] (peek (vec lat)))","user":"57f7d381e4b0d3187e900906"},{"problem":19,"code":"(fn [s] (nth s (- (.size s) 1)))","user":"571346c0e4b07c98581c3a9b"},{"code":"(fn [arg1]\n   (loop [collection arg1]\n     (if (empty? (rest collection))\n        (first collection)\n        (recur (rest collection)))))","problem":19,"user":"516081e7e4b009fba0926e28"},{"problem":19,"code":"(fn [s]\n   (nth s (- (count s) 1)))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn mylast [x] (if (= (count x) 1)\n                 (first x)\n                 (mylast (rest x))))","problem":19,"user":"5362a936e4b0243289761e55"},{"code":"(fn myLast [s]\n  (let [[hd & tl] s]\n    (cond (empty? tl) hd\n          :else (myLast tl))))","problem":19,"user":"509e8da7e4b08df8156e9e2f"},{"problem":19,"code":"(fn last-element [[head & tail]]\n  (if tail\n    (last-element tail)\n    head))","user":"60e89572e4b0fbed2fe3123e"},{"problem":19,"code":"(fn [m] (nth m (- (count m) 1)))","user":"546a6e9fe4b00cfc9eacc157"},{"code":"#(nth  % (dec (count %)))","problem":19,"user":"51a3738ce4b0e77c4ca60bf0"},{"code":"(fn [[h & r]] (if (seq r) (recur r) h))","problem":19,"user":"52951156e4b02ebb4ef7501b"},{"problem":19,"code":"(fn [x](-> x\n           (reverse)\n           (first)))","user":"5800ab1ee4b0a837a8b30c41"},{"code":"(fn alast [x]\n  (if (= (count x) 1)\n    (first x)\n    (alast (rest x))))","problem":19,"user":"4ff10dd2e4b0678c553fc32a"},{"code":"(fn [x]\n  (let [v (vec x)]\n    (v (dec (count v)))))","problem":19,"user":"51750cd4e4b07031762f2ee5"},{"problem":19,"code":"(fn [arr] \n  (nth arr \n       (- (count arr) 1)))","user":"5fb7a87be4b08cb800c85b5f"},{"problem":19,"code":"(fn mf\n  [sq]\n  (if (empty? (rest sq))\n    (first sq)\n    (mf (rest sq)))\n)","user":"57237a02e4b0c5bde472c0e5"},{"problem":19,"code":"reduce (fn [_, b] b)","user":"5617a540e4b06b1bb2182a12"},{"problem":19,"code":"#(loop [acc %] (if (> (count acc) 1) (recur (rest acc))(first acc)))","user":"5fdbde92e4b05ac5b16ea137"},{"problem":19,"code":"(fn [col] (if (seq (rest col))\n                (recur (rest col))\n                (first col)))","user":"5e1cb653e4b0dc959400853b"},{"problem":19,"code":"(fn [l] (reduce (fn [_ b] b) l))","user":"5cf8e426e4b0b71b1d808a88"},{"code":"( comp peek vec )","problem":19,"user":"4f83ee95e4b033992c121c26"},{"problem":19,"code":"(fn [x] \n  (first (reverse x))\n)","user":"54d7bba8e4b0a52adc2e202f"},{"problem":19,"code":"#(nth % (dec(count % )))","user":"583d669ee4b089d5ab817d9a"},{"code":"(fn [li] (first (reverse li)))","problem":19,"user":"4ef4ab95535dced4c769f23b"},{"code":"(fn [n] (-> n reverse first))","problem":19,"user":"5256a1d4e4b0541d1855ba29"},{"code":"(fn [s] (if (next s) (recur (next s)) (first s)) )","problem":19,"user":"4ea5e8a9535d7eef308072e0"},{"code":"(fn [list] (first (take-last 1 list)))","problem":19,"user":"4f81a908e4b033992c121c00"},{"problem":19,"code":"(fn [incoming-list] (nth incoming-list (- (count incoming-list) 1)))","user":"5a4dbc97e4b05d388ecb6bae"},{"code":"(fn myfunc [x] (if (empty? (rest x)) (first x) (myfunc (rest x))))","problem":19,"user":"51c09719e4b0c9c82288293c"},{"problem":19,"code":"(fn [col]\n  (loop [[cur & remaining] col]\n    (if (empty? remaining)\n      cur\n      (recur (rest remaining)))))","user":"56afe85de4b061e3ca319add"},{"problem":19,"code":"(fn [s] (let [re (rest s)] (if (empty? re) (first s) (recur re))))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn f [coll] (first (reverse coll)))","problem":19,"user":"4e3bcccd535deb9a81d77f56"},{"problem":19,"code":"(fn [x]\n  (if (next x)\n    (recur (rest x))\n    (first x)))","user":"5628f727e4b00e49c7cb47f5"},{"problem":19,"code":"(fn [seq]\n  (if (= '() (rest seq))\n    (first seq)\n    (recur (rest seq))))","user":"56812530e4b0945ebc182a7f"},{"problem":19,"code":";;#(first (reverse %))\n#(first  (reverse (rest %)))","user":"56ff0ef3e4b08d47c97781ba"},{"problem":19,"code":"(fn [seq]\n  (let [x (first seq)\n        y (rest seq)]\n    (if (empty? y)\n      x\n      (recur y))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn my-last [x] (if (= (count x) 1) (first x) (my-last (rest x))))","problem":19,"user":"4e72175d535d5021c1a89658"},{"problem":19,"code":"(fn ult [arg] (first (reverse arg))),","user":"568571e7e4b04eec3ec5cfca"},{"code":"(fn [[x & xs]] (if (seq xs) (recur xs) x))","problem":19,"user":"52bf29fde4b07a9af579232e"},{"problem":19,"code":"(fn l [x]\n  (let [r (rest x)]\n        (if (= r '())\n          (first x)\n          (l r))))","user":"5bc09ebae4b07a9b28b10005"},{"code":"(fn \n  [x]\n  (nth x (dec (count x))))","problem":19,"user":"535774c2e4b04ce2eb3ed27c"},{"code":"(fn last-element\n  ([xs]\n    (if-let [tail (next xs)]\n      (recur tail)\n      (first xs))))","problem":19,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn\n  [seq]\n  (nth seq (dec (count seq))))","problem":19,"user":"51d4b70de4b013d740b70de8"},{"problem":19,"code":"(fn function [x] (nth x (- (count x) 1)))","user":"5ad92b66e4b0ea6055cfac34"},{"code":"(fn [l]\n  (if (= (count l) 1) (first l) (recur (rest l))))","problem":19,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn [c] (first(reverse c)))","problem":19,"user":"5227152ce4b04e78ff2e19a4"},{"code":"(fn [[x & xs]]\n  (if (empty? xs)\n    x\n    (recur xs)))","problem":19,"user":"4fec6febe4b0681fd128dca9"},{"problem":19,"code":"(fn my-last [[head & rest]] (if (= rest nil) head (my-last rest)))","user":"544125ade4b032a45b86936a"},{"problem":19,"code":"(fn a [x]\n  (if (second x)\n    (a (rest x))\n    (first x)))","user":"58844d43e4b0f1effa3b7696"},{"problem":19,"code":"(fn [l]\n   (first (reverse l)))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [foo] (first (reverse foo)))","problem":19,"user":"4e307511535deb9a81d77f15"},{"problem":19,"code":"(fn lst\n  [[fst & rst]]\n  (if (empty? rst)\n    fst\n    (lst rst)))","user":"53d950f2e4b0e771c3025477"},{"problem":19,"code":"(fn [y]\n  (loop [x y] \n    (if (= () (rest x)) \n      (first x) \n      (recur (rest x)))))","user":"5753b6c6e4b02ea1147992af"},{"problem":19,"code":"(fn hey [coll] (let [rest (rest coll)] ( if-not (empty? rest) (hey rest) (first coll))))","user":"60901a6be4b03bd49d9f36c9"},{"problem":19,"code":"(fn [coll]\n  (loop [remaining coll]\n    (if (= 1 (count remaining))\n      (first remaining)\n      (recur (rest remaining)))))","user":"543d07e8e4b032a45b869346"},{"problem":19,"code":"(fn [s]\n  (let [n (count s)]\n    (nth s (- n 1))))","user":"5e856736e4b09a7a73c8bbd2"},{"problem":19,"code":"(fn my-f [a] (loop [x a] (if (empty? (rest x)) (first x) (recur (rest x)))))","user":"57080694e4b0b0fb43fd0697"},{"code":"(fn x[[h & t]](if (empty? t) h (x t)))","problem":19,"user":"5388d50fe4b0640c7a9a58a7"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (empty? xs) x (recur xs)))","user":"54b07c1ee4b09f271ff37d16"},{"problem":19,"code":";;(fn last-el [lista] \n;;     (if (>= 1 (count lista))\n;;         (first lista)\n;;         (last-el (rest lista))))\n\n#(first (reverse %))","user":"565487dce4b0f9d632dd8482"},{"problem":19,"code":";;#(->> (count %) (dec) (nth %))\n;;#(nth % (dec (count %)))\n;;#(first (reverse %))\n(comp first reverse)","user":"541faf4fe4b01498b1a71a9b"},{"code":"(fn this [arr]\n\t\t(if (= 1 (count arr))\n\t\t\t(first arr)\n\t\t\t(this (rest arr))))","problem":19,"user":"51e34f3ee4b0c611d6113e41"},{"problem":19,"code":"(fn lastItem [collection] (first (reverse collection)))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [arr] (first (take-last 1 arr)))","problem":19,"user":"52f84c94e4b047fd55836fcf"},{"code":"(fn [d] (first (reverse d)))","problem":19,"user":"51a3a976e4b0e77c4ca60bf5"},{"problem":19,"code":"( fn \n  [list] \n  (first (reverse list)))","user":"56000187e4b02e8bfe7ceba3"},{"problem":19,"code":"(fn [s] (reduce (fn [a b] b) nil s))","user":"5408ec4de4b0addc1aec66d0"},{"problem":19,"code":"(fn [col] (reduce (fn [x y] y) col))","user":"55ad1833e4b03311e7b7329f"},{"code":"(fn [a] (if (second a) (recur (rest a)) (first a)))","problem":19,"user":"4fa069c3e4b0dcca54ed6d4a"},{"problem":19,"code":"#(first ( drop (dec (count %)) %))","user":"564a560ae4b0284900eef654"},{"problem":19,"code":"(fn l [c] \n  (if (= 1 (count c)) (first c) (l (rest c))))","user":"56f09bf4e4b04a395b9a047f"},{"code":"(fn [a] (first (drop (- (count a) 1) a)))","problem":19,"user":"4e6b8ac8535d8ccf87e9ff19"},{"code":"(fn vlast [x] (peek (vec x)))","problem":19,"user":"4e70202a535d5021c1a89630"},{"problem":19,"code":"(fn [s] (if (next s) (recur (next s))(first s)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [s]\n  (nth s (dec (count s))))","problem":19,"user":"526aac71e4b03e8d9a4a7235"},{"code":"( fn last-el \n  [ & arg] ( first ( apply reverse arg ) ) \n  )","problem":19,"user":"51f6d5fde4b06ff1c25c52d1"},{"problem":19,"code":"(fn [args] (nth args (dec (count args))))","user":"5eeb03dde4b029a2061bbeca"},{"code":"(fn [x] ( first ( reverse  x ) ) )","problem":19,"user":"51cb073ce4b068dadb8f2233"},{"problem":19,"code":"(fn [seq] (first(take-last 1 seq)))","user":"5586b707e4b059ccff29b1d6"},{"problem":19,"code":"(fn mylast [[first & rest]] (if (empty? rest) first (recur rest)))","user":"5599cc64e4b031d6649c9bb3"},{"problem":19,"code":"(fn x [s]\n  (if (empty? (rest s))\n    (first s)\n    (x (rest s))\n  )\n)","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"(fn [coll]\n  (let [n (next coll)]\n    (if n (recur n) (first coll))))","problem":19,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":19,"code":"(fn[x](nth x (-(count x)1)))","user":"56452e17e4b0284900eef602"},{"problem":19,"code":"(fn count-items [a] \n  (nth a (- (count a) 1)))","user":"5cab0766e4b048ec896c5c45"},{"problem":19,"code":"(fn [elements] (peek (into [] elements)))","user":"5b75eed6e4b047b03b2036d8"},{"code":"(fn [l]\n  (first(take 1 (reverse l))))","problem":19,"user":"4f551054e4b0a7574ea717f5"},{"code":"(fn lastElem [coll] (nth coll (- (count coll) 1)))","problem":19,"user":"4ecbff2f535df97575fdabe4"},{"problem":19,"code":"(fn walk [seq] \n  (let [i (first seq)]\n    (if (empty? (rest seq))\n      i\n      (walk (rest seq)))))","user":"546805d6e4b00cfc9eacc134"},{"code":"(fn [col]\n  (cond\n   (vector? col) (peek col)\n   (list? col) (nth col 2)))","problem":19,"user":"5112ed89e4b0350614f07a81"},{"code":"(fn [col] (first (reverse col)))","problem":19,"user":"4e7aa77c535db169f9c796ac"},{"problem":19,"code":";; exercise: without using the `last` function, write a function which returns the last element in a sequence\n#(first (reverse %))","user":"60917abde4b00e9e6653c3d5"},{"code":"(fn [y]\n  (loop [[x & xs] y]\n    (if (seq xs)\n      (recur xs)\n      x)))","problem":19,"user":"4fd2529ae4b04c3a95aa041f"},{"problem":19,"code":"(fn [x] \n  (if (empty? (rest x))\n  \t(first x)\n    (recur (rest x))))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn philm [x] (if (= 1 (count x)) (first x) (philm (rest x))))","problem":19,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":19,"code":"(fn final\n  [[fst & rst]]\n  (if (empty? rst)\n    fst\n    (final rst)))","user":"55355397e4b09218d5f44fae"},{"problem":19,"code":"(fn [coll]\n  (nth coll (-> coll\n                count\n                dec)))","user":"5bacef6fe4b0a20761a234a1"},{"problem":19,"code":"(fn get-last \n  [elements] \n  (if (> (count elements) 1)\n    (get-last (rest elements))\n    (first elements)))","user":"5e9f3c2ce4b00a66d4a9517f"},{"problem":19,"code":"(fn [[x & tail]] (if tail(recur tail)x))","user":"5ac35d00e4b0e27600da7712"},{"problem":19,"code":"reduce (fn [e1 e2] e2)","user":"5cbe37d1e4b0ccb06196274c"},{"problem":19,"code":"(fn [xs]\n  (loop [tail xs]\n    (if (next tail)\n      (recur (next tail))\n      (first tail))))","user":"58327a08e4b089d5ab817c7c"},{"problem":19,"code":"(fn [v] \n  (first \n   (reverse v)))","user":"53a8056de4b047364c044424"},{"problem":19,"code":"(fn final [seq] (let [tail ((split-at 1 seq) 1)] (if (>= (count tail) 1) (final tail) (first seq))))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":19,"code":"(fn [col] \n  (reduce (fn [col x] x)\n          col)\n          \n          \n  #_(loop [remaining col]\n    (if-not (rest remaining)\n      (recur (rest remaining))\n      (first remaining))))","user":"5c267c8ee4b07e362c2305c0"},{"problem":19,"code":"(fn [q]\n  \n  (first(reverse q))\n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [x] ( first ( reverse x)))","problem":19,"user":"5254f908e4b0541d1855b9ba"},{"problem":19,"code":"(fn last-elem [[x & xs]]\n   (if xs (recur xs) x))","user":"59c8c9bee4b0a024fb6ae567"},{"problem":19,"code":";; (fn [s] (first (reverse s)))\n(fn [s] (reduce (fn [a b] b) s))","user":"54c15722e4b0ed20f4ff6f22"},{"code":"(fn [x] (first (next (take-nth (dec (count x)) x))))","problem":19,"user":"531576b4e4b08068f379ed29"},{"code":"#(if (> (count (rest %)) 0)\r\n  (recur (rest %))\r\n  (first %)\r\n)","problem":19,"user":"4e99f2e1535dbda64a6f6b6c"},{"code":"(fn whatlast[x] ( if (next x )\r\n                         (recur (rest x))\r\n                         (first x)\r\n))","problem":19,"user":"4ddee2d0535d08e6dec9fdda"},{"code":"(fn last-elem [[f & r]]\n\t(if r (recur r) f)\n  )","problem":19,"user":"53213810e4b09d4e7a9b54b0"},{"problem":19,"code":"(fn [x] (if (= (count x) 1)\n          (first x)\n          (recur (rest x))))","user":"570243c4e4b08d47c97781dc"},{"code":"(fn L [x] \n  (if (> (count x) 1)\n    (L (rest x))\n    (first x)\n))","problem":19,"user":"4e6a33fc535d8ccf87e9feac"},{"code":"(fn[number] (nth number (dec (count number))))","problem":19,"user":"52eba5fee4b0705949c44442"},{"code":"(fn moo [s]\n  (cond \n    (= 1 (count s)) (first s)\n    :else (moo (rest s))))","problem":19,"user":"504e48ace4b0f6ff3350c498"},{"problem":19,"code":"reduce (fn [total, elem] identity elem)","user":"504e0a1de4b078edc5f593a7"},{"problem":19,"code":"(fn my-last [s] \n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"56002471e4b04bb52996e15e"},{"problem":19,"code":"(fn [x] (reduce (fn [v y] y) x))","user":"59f22f1be4b0966464fe6a77"},{"code":"(fn [nums] (first (reverse nums)))","problem":19,"user":"525ee103e4b0cb4875a45dbb"},{"problem":19,"code":"(fn lastest [x] (first (reverse x)))","user":"5a86eccde4b05369db4d24a1"},{"problem":19,"code":"(fn [x] (\n         let [c (count x)]\n         (nth x (- c 1)\n              )))","user":"5ac45f59e4b0e27600da772c"},{"code":"(fn my-last [l] (nth l (- (count l) 1)))","problem":19,"user":"52d7412ce4b09f7907dd1371"},{"code":"(fn [sequence] \n  (get (vec sequence) (- (count (vec sequence)) 1))\n)","problem":19,"user":"4f043663535dcb61093f6bb0"},{"problem":19,"code":"(fn\n  [_seq]\n  (loop [_first (first _seq)\n         _rest (rest _seq)]\n    (if (= _rest `())\n      _first\n      (recur (first _rest) (rest _rest)))))","user":"5dda4254e4b0948ae9d9ad9e"},{"code":"(fn [x] (reduce (fn [z y] y) x) )","problem":19,"user":"4f031e58535dcb61093f6a66"},{"code":"(fn [s] (first (drop (- (count s) 1) s)))","problem":19,"user":"4fbfe9a4e4b081705acca31f"},{"problem":19,"code":"(fn [list1]\n  (get (into [] list1) (- (count list1) 1)))","user":"5d4d46aae4b0776584bd6f3a"},{"code":"(fn l [x] (if (= 1 (count x)) (first x) (l (rest x))))","problem":19,"user":"4f566178e4b0a7574ea71820"},{"code":"(fn [[a & others]] (if others (recur others) a))","problem":19,"user":"4fe93c6ae4b0547ebccb2450"},{"problem":19,"code":"(fn find-last [seq] (cond (= 1 (count seq)) (first seq) :else (find-last (rest seq))))","user":"54ab04f1e4b09f271ff37cc0"},{"problem":19,"code":"(fn ultimo [lst]\n  (let [[a & more] lst]\n    (if (= nil more)\n      a\n      (recur more))))","user":"5d7bd68ee4b02e6b30c93554"},{"problem":19,"code":"(fn [v] (.get v (- (count v) 1)))","user":"5d6552b5e4b0db5d338d15d2"},{"code":"(fn [elems] (first (reverse elems)))","problem":19,"user":"4e03b010535d04ed9115e794"},{"code":"(fn f [x] (if (= (rest x) '()) (first x) (f (rest x))))","problem":19,"user":"522e4baae4b01cdb292c5f00"},{"code":";(fn end [coll] (if (empty? (rest coll)) (first coll) (end (rest coll))))\n(comp first reverse)","problem":19,"user":"52cfe059e4b07d0d72b273af"},{"problem":19,"code":"(fn func [lst] (if (= (rest lst) []) (first lst) (func (rest lst))))","user":"55216b7ee4b0882d96d09193"},{"problem":19,"code":"(fn[list]\n  (first (reverse list)))","user":"600d9808e4b074f607df669c"},{"code":"#(if(next %)\n    (recur (rest %))\n    (first %))","problem":19,"user":"4f11caf6535d64f603146424"},{"problem":19,"code":"(fn my-last\n    [collection]\n      (if (empty? (rest collection))\n          (first collection)\n          (my-last (rest collection))))","user":"5a47e8ade4b05d388ecb6b5f"},{"code":"(fn last-data [x] (reduce (fn [a b] b) x))","problem":19,"user":"52c58440e4b0c2d177d620f7"},{"problem":19,"code":"(fn [x] (first \n         (reverse x)))","user":"54af7a39e4b09f271ff37d09"},{"code":"(fn[seq] (first (reverse seq)))","problem":19,"user":"52867936e4b0239c8a67ae16"},{"problem":19,"code":"(fn ls\n  [x]\n  (first (reverse x)\n   )\n)","user":"56bfe8f1e4b060a8e693e3a3"},{"code":"(fn my-last [s]\n  (cond (empty? s) nil\n        (empty? (rest s)) (first s)\n        :else (my-last (rest s))))","problem":19,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn [[e & r]]\n  (if r\n    \n    (recur r)\n    e ))","problem":19,"user":"4e513fef535dc968683fc4f7"},{"problem":19,"code":"(fn\n  [seq]\n  (reduce #(identity %2) seq)\n)","user":"5f735915e4b02876ed9fd097"},{"code":"(fn [lst] (first (reverse lst))) ;This is really poor","problem":19,"user":"53a5c7ffe4b0ef122a8689c4"},{"problem":19,"code":"(fn mylast [x]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x))))","user":"5c784248e4b0fca0c162281f"},{"code":"(fn [s] (reduce (fn [x y] y) s))","problem":19,"user":"4fa4ef2ee4b081705acca1a9"},{"problem":19,"code":"(fn getlastelement [elements] (first (reverse elements)))","user":"5d5ea44fe4b0c9e5857d4ff6"},{"code":"(fn [list] (-> list reverse first))","problem":19,"user":"4ff6aea8e4b0678c553fc381"},{"problem":19,"code":"( fn [s] ( first ( drop ( dec (count s) ) s ) ) )","user":"5551b492e4b0deb715856ded"},{"problem":19,"code":"(fn [l] \n  (if (= (count l) 1)\n    (first l)\n    (recur (rest l))))","user":"57150a8ee4b07c98581c3acb"},{"problem":19,"code":"(fn [thing] (nth thing (- (count thing) 1)))","user":"55b544e2e4b01b9910ae2986"},{"code":"(fn\n  [x]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"52635a22e4b03e8d9a4a70ac"},{"code":"#(cond \n   (empty? (rest %1)) (first %1)\n   :else (recur (rest %1)))","problem":19,"user":"52fc89b2e4b047fd55837019"},{"problem":19,"code":"(fn [x] \n  (if-let [r (next x)]\n    (recur r)\n    (first x)))","user":"56202553e4b064ca9f4b16dd"},{"problem":19,"code":"#(loop [head (first %) \n        tail (rest %)] \n   (if (empty? tail) \n     head\n     (recur (first tail)\n            (rest tail))))","user":"588c7020e4b05c141a256099"},{"code":"(fn lstt [x] (first (reverse x)))","problem":19,"user":"51b77c9be4b0d906fcd71d37"},{"code":"(fn return-last [x] (if (empty? (rest x))(first x)(recur (rest x))))","problem":19,"user":"52e6975de4b09f7907dd147a"},{"problem":19,"code":"(fn laste [s] (if (next s)\n                    (laste (next s))\n                    (first s)\n                    ))","user":"54bc0b0ee4b0ed20f4ff6ec7"},{"code":"(fn llast [lst] (if (= (second lst) nil) \r\n                    (first lst)\r\n                    (llast (rest lst))))","problem":19,"user":"504e14dde4b078edc5f593c0"},{"problem":19,"code":"(fn [x] \n  (nth x (dec (count x ))))","user":"5b912b78e4b0c0b3ffbd4a19"},{"problem":19,"code":"(fn [theseq]\n  (first (reverse theseq)))","user":"5a720177e4b0512ff01cda96"},{"problem":19,"code":"#(-> (nth % (dec(count %))))","user":"579b08d3e4b05b1deef9adea"},{"code":"(fn end [s] (if (= (rest s) '()) (first s) (end (rest s))))","problem":19,"user":"4fc50441e4b081705acca36f"},{"problem":19,"code":"(fn [xs]\n  (if (empty? (next xs))\n    (first xs)\n    (recur (next xs))))","user":"60b57acee4b0e0fa5f1b4238"},{"problem":19,"code":"(fn [s] (if (next s) (recur (rest s) ) (first s)))","user":"532dbd3ce4b019098a6f8b40"},{"problem":19,"code":"(fn [a] (.get a (- (count a) 1)))","user":"59096794e4b047aa04b1999e"},{"problem":19,"code":"#(loop [realseq %]\n                        (if\n                          (nil? (next realseq))\n                          (first realseq)\n                          (recur (rest realseq))\n                          )\n                        )","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":19,"code":"(fn final-guy [s] \n  (if (= 1 (count s))\n    (first s)\n    (final-guy (rest s))\n    )\n  )","user":"55f8fd70e4b03cbcff9738bc"},{"problem":19,"code":"(fn last-element\n  [[x & rest]]\n  (if (empty? rest)\n    x\n    (recur rest)))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn r [x]\n  (if (> (count x) 1)(r (rest x))\n  (first x)))","problem":19,"user":"4e7db08d535db169f9c796e0"},{"problem":19,"code":"#(.get %(-(count %) 1))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":19,"code":"#(\n  if(= 1 (count %))\n  (first %)\n  (recur (rest %)))","user":"56719c3ce4b05957ce8c610c"},{"problem":19,"code":"#( let [x (- (count %) 1)] (nth % x))","user":"58f9a725e4b0438e51c2cf4f"},{"problem":19,"code":"(fn [x] \n  (if (= (count x) 1) \n    (first x)\n    (recur (rest x))))","user":"5546d2c5e4b0a04f79299543"},{"problem":19,"code":"(fn [sequence] (first (reverse sequence)) )","user":"565202aae4b0f9d632dd845c"},{"problem":19,"code":"(fn [col] (peek (vec col)))","user":"552d5268e4b076ab5578f7e6"},{"problem":19,"code":"#(get (into [] %1) (- (count %1) 1))","user":"5bfae66ae4b0bdcf453d15d3"},{"code":"(fn [coll]\n  (let [i (- (count coll) 1)]\n    (if (>= i 0)\n      (nth coll i))))","problem":19,"user":"4f165655535d64f60314644a"},{"problem":19,"code":"#_#(let [c (count %)]\n   (nth % (dec c) ))\n\n#(loop [f (first %)\n        r (next %)]\n   (if r (recur (first r) (next r)) f))","user":"5c618140e4b0fca0c162262f"},{"problem":19,"code":"(fn [xx] (if (next xx) (recur (next xx)) (first xx)))","user":"564cc055e4b0284900eef676"},{"problem":19,"code":"(fn [coll] \n  (if (next coll) \n    (recur (rest coll)) \n    (first coll)))","user":"55b6d917e4b01b9910ae299e"},{"problem":19,"code":"reduce (fn [a, b] b)","user":"5cc28a50e4b0ccb0619627d9"},{"code":"(fn [x]\n  (if (= (rest x) ())\n    (first x)\n    (recur (rest x)) ))","problem":19,"user":"4fbd292fe4b081705acca300"},{"problem":19,"code":"(fn  [v]   (reduce (fn [f1 f2] f2 ) v )  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn um [x] (first (take-last 1 x)))","problem":19,"user":"510a8acee4b02ed671928d9d"},{"problem":19,"code":"(fn [lst] (if (= (rest lst) ()) (first lst) (recur (rest lst))))","user":"56be4661e4b0f26550335982"},{"code":"(fn last-element [x](first (reverse x)))","problem":19,"user":"4e8ddf32535d65386fec213c"},{"code":"(fn a [lst]\n\n  (if\n    (not-empty (rest lst))\n    (a (rest lst))\n    (first lst)))","problem":19,"user":"4f1b9c11535d64f60314647c"},{"code":"(fn [coll]\n  (nth coll \n    (- (count coll) 1)))","problem":19,"user":"4f7c4eb7e4b06e829148e1af"},{"problem":19,"code":"(fn lastseq [s] (loop [e s]\n                  (if (next e)\n                    (recur (next e))\n                    (first e))))","user":"54bf2c59e4b0ed20f4ff6efe"},{"problem":19,"code":"(fn last_element [x] (if (== 1 (count x)) (first x) (last_element (rest x))))","user":"5a2b3a57e4b09cafd31c7f46"},{"problem":19,"code":"(fn myTest [myList] (if (empty? (rest myList)) (first myList) (myTest (rest myList))))","user":"5545960de4b0a04f79299537"},{"problem":19,"code":"(fn [x] \n   (if (> (count x) 1)\n     (recur (next x))\n     (first x)))","user":"570362ece4b08d47c97781f0"},{"problem":19,"code":"(fn [some-seq] (first (reverse some-seq)))","user":"5c9a638fe4b048ec896c5aae"},{"problem":19,"code":"(fn hi [my]\n  (if (= (count my) 1) (first my) ( hi (rest my))))","user":"5e663073e4b0fd0acd1586bc"},{"code":"#(first \n  (reverse %))","problem":19,"user":"5065052ae4b0b1b6c8b1d85e"},{"problem":19,"code":"(fn [starting-sequence]\n  (loop [s starting-sequence]\n    (if (= 1 (count s)) (first s) (-> s rest recur))))","user":"60898748e4b0ae75613dcef3"},{"problem":19,"code":"(fn [col] \n  (let [c (count col)]\n    (nth col (dec c))))","user":"57cec4ade4b0c746388ab8b1"},{"code":"(fn [coll]\n   (if (empty? (rest coll))\n     (first coll)\n     (recur (rest coll))))","problem":19,"user":"516282c3e4b0e6d3c4734711"},{"problem":19,"code":"(fn [x] (nth x (- ( count x) 1)))","user":"5968470fe4b069c0a1a197c9"},{"code":"(fn [x] (nth x (+ -1 (count x))))\n;(comp peek vec) ;darren","problem":19,"user":"4ebadde5535dfed6da9c6d6b"},{"code":"(fn [c]\r\n    (if (empty? (rest c)) (first c) (recur (rest c))))","problem":19,"user":"4f6a36eee4b07046d9f4ef99"},{"problem":19,"code":"(fn last_elem [x] (first (reverse x)))","user":"5a9c6038e4b0d174b936c7d7"},{"code":"(fn my-last [[x & xs]]\n  (if xs\n      (my-last xs)\n      x))","problem":19,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn get-last [x]\n  (if (empty? (rest x))\n    (first x)\n    (get-last (rest x))))","problem":19,"user":"52f4580de4b05e3f0be25f21"},{"code":"(fn r [x] (if (nil? (seq (rest x))) (first x) (recur (rest x))))","problem":19,"user":"4f03fb59535dcb61093f6b89"},{"problem":19,"code":"(fn [x] (\n         loop [list x] (\n                      if (empty? (rest list))\n                      (first list)\n                      (recur (rest list)) \n                      )\n         )\n  )","user":"55f1085ee4b06e875b46ce2d"},{"problem":19,"code":"(fn [lst]\n  (first (reverse lst))\n  \n  )","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn _last [seq] \n  (if (empty? (rest seq)) (first seq)\n  (_last (rest seq))))","problem":19,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":19,"code":"(fn foo [lst]\n  (let [[head & tail] lst]\n    (if (empty? tail)\n      head\n      (foo tail))))","user":"54a0f409e4b09f271ff37c48"},{"code":"(fn [vs] (reduce (fn [x y] y) vs))","problem":19,"user":"50a635bbe4b0aa96157e2621"},{"problem":19,"code":"(fn [myseq] (let [c (count myseq)](if (= c 1)(first myseq)(recur (rest myseq)))))","user":"5468a110e4b00cfc9eacc13d"},{"code":"(fn [seq] (loop [seq seq]\n            (let [rest (rest seq)]\n              (if (empty? rest)\n                (first seq)\n                (recur rest)))))","problem":19,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":19,"code":"(fn [x]\n  (loop [f (first x)\n         l (rest x)]\n    (if (empty? l)\n      f\n      (recur (first l) (rest l)))))","user":"563b7724e4b0bfe05bf11814"},{"code":"(fn [x] (if-let [r (next x)] (recur r) (first x)))","problem":19,"user":"5150600de4b098b221effc29"},{"problem":19,"code":"(fn [[x & reste]] (if (empty? reste) x (recur reste)))","user":"556f2009e4b09a3098a52519"},{"code":"(fn lst [x] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"502ad2cae4b0614b5299611f"},{"problem":19,"code":"(fn [vs]\n  (if-let [[v & rst] (seq vs)]\n    (if-not (seq rst)\n      v\n      (recur rst))\n    nil))","user":"57acb156e4b0b8559636fc8d"},{"problem":19,"code":"(fn [col] \n  (let [[part & remaining] col]\n    (if (empty? remaining) \n      part\n      (recur remaining))))","user":"608d54abe4b03bd49d9f36b8"},{"code":"(fn [lst] \n  (loop [lst lst]\n    (if (empty? (rest lst)) \n      (first lst) (recur (rest lst)))))","problem":19,"user":"4f0379ef535dcb61093f6ae7"},{"problem":19,"code":"(fn [x] (->(reverse x)(first)))","user":"5587cdefe4b059ccff29b1e7"},{"problem":19,"code":"(fn [col]\n  (if (nil? (next col))\n    (first col)\n    (recur (rest col))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":19,"code":"(fn [s]\n  (first(reverse(seq s))))","user":"5db1e852e4b010eb3c36cd0a"},{"code":"(fn \n       ([] nil)\n       ([coll] (reduce #(identity %2) coll)))","problem":19,"user":"4f1af7e4535d64f603146471"},{"problem":19,"code":"(fn\n  [ll]\n  (loop [a ll]\n    (let [[head & tail] a]\n      (if (empty? tail)\n        head\n        (recur tail)))))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"problem":19,"code":"(fn last-el [x] (nth x (- (count x) 1)))","user":"5be1fde4e4b0ed4b8aab4cab"},{"problem":19,"code":"(fn [s] \n  (first (reverse s)) \n  )","user":"5818001ce4b0c0e9c07b83a0"},{"code":"(fn alast [l] (first (take-last 1 l)))","problem":19,"user":"52402407e4b0ad64fa01030e"},{"code":"(fn [coll]\n  (first (reverse coll))\n  )","problem":19,"user":"52bca344e4b07a9af57922f8"},{"code":"#(first (reverse%))","problem":19,"user":"504e05b8e4b078edc5f5939c"},{"problem":19,"code":"(fn [list] (nth list (- (count list) 1) ))","user":"54ca130ce4b057c6fda3a250"},{"problem":19,"code":"(fn [z] (nth z (dec (count z))))","user":"5555432ee4b0deb715856e13"},{"code":"(fn \n  [items]\n  (loop [[first-item & remaining-items] items]\n    (println \"Iter first: \" first-item \" Remaining: \" remaining-items)\n    (if (empty? remaining-items)\n      first-item\n      (recur remaining-items))))","problem":19,"user":"52e94348e4b09f7907dd14a9"},{"code":"(fn [l] (loop [l l] (if (empty? (rest l)) (first l) (recur (rest l)))))","problem":19,"user":"4ddbd934535d02782fcbe9fc"},{"problem":19,"code":"(fn mylast [x]\n  (if (= (count x) 1)\n    (first x)\n    (mylast (rest x))\n   )\n)","user":"525ff1e3e4b03e8d9a4a7028"},{"code":"(fn [x] ((comp first reverse) x))","problem":19,"user":"508ae16be4b0be79e5b189bc"},{"code":"#(if (= (count %) 1) (nth % 0) (recur (rest %)))","problem":19,"user":"506f5f26e4b082ae7d1032c8"},{"problem":19,"code":"(fn get-last\n  [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (recur (rest lst))\n    ))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [x] (loop [[f & r] x]\n  (if (seq r) (recur r) f)))","problem":19,"user":"4e6b6fd8535d8ccf87e9ff13"},{"problem":19,"code":"(fn my-last [n] \n  (if (= 1 (count n)) \n    (first n) \n    (my-last (rest n))))","user":"56caea02e4b0ea9b8538f721"},{"problem":19,"code":"(fn [xs]\n(nth xs (\n         dec (\n              count xs\n             )\n        )\n )\n)","user":"549c181ce4b0f3d1d8e70f83"},{"problem":19,"code":"(fn [xs]\n  (loop [s (first xs)\n         xs (rest xs)]\n    (if (seq xs)\n      (recur (first xs) (rest xs))\n      s)))","user":"56f413b2e4b046a417f9205a"},{"code":"(fn\n  [x]\n  \t(first (reverse x)))","problem":19,"user":"519ec569e4b0acf32bc6a434"},{"code":"(fn\n  [arr]\n  (first (reverse arr)))","problem":19,"user":"535d2e21e4b04ce2eb3ed2bd"},{"problem":19,"code":"(fn [input]\n  (let [[x & xs] input]\n    (if\n     \t(nil? xs) x (recur xs)\n     )\n    )\n  )","user":"57b3821de4b0fbc9809a2782"},{"problem":19,"code":"(fn [lst]\n  (if (= (rest lst) ())\n    (first lst)\n    (recur (rest lst))))","user":"55d0391de4b0e31453f64a37"},{"problem":19,"code":"(fn ends [s]\n  (nth s (- (count s) 1)))","user":"5ab1695fe4b073f1774425c3"},{"problem":19,"code":";;#(nth % (- (count %) 1))\n(comp first reverse)","user":"55228afbe4b0882d96d091a1"},{"problem":19,"code":"(fn\n  [list]\n  (if (= 1 (count list))\n    (first list)\n    (recur (rest list))))","user":"59f88123e4b0ca45a743a31e"},{"problem":19,"code":";#(nth % (- (count %) 1))\n(comp first reverse)","user":"54d341f7e4b0e8a36923e603"},{"problem":19,"code":"(fn [col] \n  (let [[head & tail] col]\n    (if (nil? tail)\n      head\n      (recur tail))))","user":"5511b44be4b06e50f9beb197"},{"problem":19,"code":"(fn [var] (first (reverse var)))","user":"55bdcfd4e4b01b9910ae2a00"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (= (count tail) 0)\n    head\n    (recur tail)))","user":"5460612be4b01be26fd74691"},{"problem":19,"code":";#(nth % (dec (count %)) )\n(fn lasti [x]\n  ( if (= (rest x) '() )\n  \t(first x)\n    (lasti (rest x) ) ) )","user":"56d09e8ee4b0ea9b8538f782"},{"problem":19,"code":"(fn [x]\n          (get (vec x) (- (count x) 1))\n          \n\n          )","user":"5683fcafe4b0945ebc182aa8"},{"problem":19,"code":"(fn [sec] (first (reverse sec)))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn [coll]\n  (reduce (fn [a b] b) coll))","problem":19,"user":"505bd09fe4b032b709c81373"},{"problem":19,"code":"(fn [%] (first (reverse %)))","user":"55838353e4b05c286339e116"},{"problem":19,"code":"( fn [input] (if (list? input)\n               (nth input (- (count input) 1))\n               (get input (- (count input) 1))\n               ) )","user":"5ebcd484e4b00a66d4a9526a"},{"code":"(fn [s] (nth s (dec (count s)) ))","problem":19,"user":"52da0712e4b09f7907dd13b2"},{"code":"(fn blah [[x & rest]] (if (empty? rest) x (blah rest)))","problem":19,"user":"4ee75ec2535d93acb0a66867"},{"problem":19,"code":"(fn [s] (reduce (fn [v e] e) s))","user":"555d7663e4b0a2eb076a39ab"},{"code":"(fn [lat] (if (= (count lat) 1) (first lat) (recur (rest lat))))","problem":19,"user":"4e326f34535deb9a81d77f21"},{"problem":19,"code":"(fn [col] (peek (into [] col)))","user":"5b8e536de4b0c0b3ffbd49e4"},{"code":"(fn [x] (if (empty? (next x))\n          (first x)\n          (recur (next x))))","problem":19,"user":"52c4789ee4b0c2d177d620dc"},{"problem":19,"code":"(fn get-last [list]\n  (let [tail (rest list)]\n    (if (= [] tail)\n      (first list)\n      (get-last tail))))","user":"57f11d72e4b0bfb2137f5c03"},{"problem":19,"code":"(fn [x] (reduce (fn [y z] z) x))","user":"5762f911e4b0994c1922fbb1"},{"code":"(fn [sq] (first (reverse sq)))","problem":19,"user":"4f148418535d64f60314643a"},{"code":"(fn [[x & xs]]\r\n  (if (seq xs)\r\n    (recur xs)\r\n    x))","problem":19,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn getlast [x]\n  (if-not (seq (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"534d6524e4b084c2834f4a9f"},{"code":"(fn [x] (if (= '() (rest x)) (first x) (recur (rest x))))","problem":19,"user":"525d95b1e4b0cb4875a45d81"},{"code":"(fn[x](first\n  \n  \n  (reverse x)))","problem":19,"user":"4e70ef6f535d5021c1a89644"},{"problem":19,"code":"(fn [lst]\n  (let [x (first lst)\n        xs (rest lst)]\n    (if (empty? xs) x (recur xs))))","user":"579fc29fe4b0264b925669ff"},{"code":"#(peek (reverse %))","problem":19,"user":"4e76ba46535d324fb2983d6d"},{"problem":19,"code":"(fn [x] (nth x (+ -1(count (seq x)))))","user":"5de630d1e4b0948ae9d9ae23"},{"problem":19,"code":"(fn get-last [x] (if(= (count x) 1) (first x) (get-last (rest x))))","user":"54c47642e4b045293a27f61d"},{"code":"(fn[list] first (first (reverse list)))","problem":19,"user":"50809e29e4b01a93d3f38e48"},{"problem":19,"code":"#(if (empty? (rest %))\n  (first %)\n  (recur (rest %)))","user":"602aa5f1e4b0d5df2af2225d"},{"problem":19,"code":"(fn [seq] \n  (nth \n     seq \n    (dec \n      (count \n         seq))))","user":"595b00f4e4b066ee0a44afd2"},{"problem":19,"code":"(fn [var] ( first (reverse var)))","user":"55dfada4e4b050e68259b3fd"},{"code":"(fn mylast [x] \n  (if (empty? (rest x))\n      (first x)\n      (mylast (rest x))))","problem":19,"user":"4fb86dc9e4b081705acca2d8"},{"problem":19,"code":"#(peek (into [] %))","user":"53483a32e4b084c2834f4a57"},{"problem":19,"code":"(fn lst [xs] (first (reverse xs)))","user":"58c623dbe4b021aa9917ed4b"},{"code":"(fn mylast [L]\n     (if (= (rest L) '())\n       (first L)\n       (mylast (rest L))))","problem":19,"user":"51f67858e4b06ff1c25c52c5"},{"problem":19,"code":"(fn [[x & xs]] \n  (if (nil? xs)\n    x\n    (recur xs)))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn lst [x] (if (= (count x) 1) (first x) (recur (rest x))))","problem":19,"user":"50df7963e4b061dbdced7227"},{"problem":19,"code":"#(loop [[h & t] %] (if (nil? t) h (recur t)))","user":"60849bd6e4b0736b099e42f2"},{"code":"(fn [list] (.get list (- (count list) 1)))","problem":19,"user":"5216933be4b000d124d989cf"},{"code":"(fn lastish [x]\n  (if (next x)\n    (lastish (next x))\n    (first x)))","problem":19,"user":"527268a5e4b03e8d9a4a7431"},{"code":"(fn [s] \n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"538d4926e4b0b51d73faae6a"},{"code":"(fn mylast [[x & more]] \n  (if more \n    (mylast more)\n    x))","problem":19,"user":"4ecc4079535d23f0362276fa"},{"problem":19,"code":"(fn klast [x] (if (empty? (rest x)) (first x) (klast (rest x))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"#(nth % (- (.size %) 1))","problem":19,"user":"4e86a443535dc036d0eaab83"},{"code":"(comp first reverse)\n; #(first (reverse %))\n; (fn laster [l] (if (= (rest l) []) (first l) (laster (rest l))))","problem":19,"user":"525bc3a3e4b0cb4875a45d2f"},{"problem":19,"code":"(fn last-elem [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (last-elem (rest seq))))","user":"5faece16e4b08cb800c85b02"},{"code":"(fn last-el [x]\n                 (if (empty? (rest x))\n                   (first x)\n                   (recur (rest x))))","problem":19,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":19,"code":"(fn foo [s]\n  (if (empty? (rest s))\n          (first s)\n          (foo (rest s))))","user":"59ee2b59e4b0966464fe6a10"},{"code":"(fn last-element\n  [collection]\n  (nth collection (- (count collection) 1)))","problem":19,"user":"5346af9be4b084c2834f4a41"},{"problem":19,"code":"(fn [mylist]\n  (reduce (fn [prev-elem next-elem]\n            next-elem)\n          mylist))","user":"5b7ef8e6e4b047b03b203765"},{"problem":19,"code":"(fn [n] (reduce\n         (fn [m o] \n           o)\n         n))","user":"578947c5e4b0ebec4cfb752a"},{"code":"apply (fn this ([x] x) ([x & more] (apply this more)))","problem":19,"user":"5007eabde4b0b17c647f5229"},{"problem":19,"code":"(fn [[head & tail]] (if (= 1 (count tail)) (first tail) (recur tail)))","user":"56e61c05e4b02e7e935eb6c2"},{"code":"(fn my-last [seq]\r\n (if (empty? (rest seq))\r\n     (first seq)\r\n     (my-last (rest seq))))","problem":19,"user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn lst [ls] (if (= '() (rest ls))\n                (first ls)\n                (lst (rest ls))))","problem":19,"user":"4f49c002e4b0d56e7bb92bfd"},{"problem":19,"code":"#(loop [seq1 %, last_num (first %)]\n   (if (seq seq1)\n     (recur (rest seq1), (first seq1))\n     last_num))\n\n;#(nth % (- (count %) 1))\n;#(nth % (dec (count %)))\n;last","user":"5487eb1de4b0e286459a11ca"},{"code":"(fn lastElement [x] \n  (if (empty? (rest x))\n    (first x)\n    (lastElement (rest x))))","problem":19,"user":"4ea08b30535d7eef308072a5"},{"problem":19,"code":"(fn [vs] (first (reverse vs)))","user":"5e41a67be4b01d43a70e8e56"},{"problem":19,"code":"#(let [x %]\n   (if (next x)\n     (recur (next x))\n     (first x)))","user":"53da8488e4b0e771c30254a0"},{"problem":19,"code":"(fn [coll] (nth coll (- (count coll) 1) ))","user":"54199df6e4b01498b1a71a4b"},{"code":"(comp first reverse)","problem":19,"user":"4db1d2cb1254ad5b4805fa72"},{"code":"(fn [l] (nth l (- (count l) 1)))","problem":19,"user":"4e5e8d5d535d8a8b8723a2d1"},{"code":";#(nth % (-(count %) 1))\n(fn [x] (nth x (-(count x) 1)))","problem":19,"user":"4e94b4f7535dbda64a6f6b27"},{"problem":19,"code":"(fn take-last-of [abc] (if (= [] (rest abc)) (first abc) (take-last-of (rest abc))))","user":"565a1ffbe4b068f2fe63dbf6"},{"code":"(fn p[a] (first (reverse a)))","problem":19,"user":"502c8681e4b0532a782a5e35"},{"problem":19,"code":"(fn [s] (if (second s) (recur (rest s)) (first s)))","user":"5ca1f2b2e4b048ec896c5b8b"},{"problem":19,"code":"(fn find-last\n  [input]\n  (if (empty? (rest input))\n    (first input)\n    (find-last (rest input))))","user":"573e2d60e4b05c31a32c0825"},{"problem":19,"code":"(fn [x](nth x (-(count x) 1)))","user":"56879ea4e4b0dcc4269f405f"},{"problem":19,"code":"(fn mylast\n  ([[x & y]] (if (nil? y) x  (recur y))))","user":"540187ace4b0de5c41848622"},{"code":"(fn vika [x]\n  (first (reverse x)))","problem":19,"user":"521b339fe4b0c4ef0be83031"},{"problem":19,"code":"(fn lasto [s]\n  (if (seq (rest s))\n    (lasto (rest s))\n    (first s)))","user":"53bce179e4b0d9a98559a6c1"},{"code":"(fn [s]\n  (cond\n   (= 1 (count s)) (first s)\n   :else (recur (rest s))))","problem":19,"user":"53527551e4b084c2834f4af0"},{"code":"(fn [coll] \n  (if-let [c (next coll)] \n    (recur c) \n    (first coll)))","problem":19,"user":"4f052eaf535dcb61093f6bf3"},{"problem":19,"code":"(fn mylast [x]\n  (if (seq (rest x))    \n    (recur (rest x))\n    (first x)))","user":"5b5eb53be4b0c6492753e6dd"},{"problem":19,"code":"(fn [s] ((comp first reverse) s))","user":"564633a1e4b0284900eef60f"},{"code":"(fn my-last [seq] (if (= (rest seq) []) (first seq) (my-last (rest seq))))","problem":19,"user":"502aaadee4b0614b52996117"},{"code":"(fn[x] (if (empty? (rest x)) (first x) (recur (rest x))))","problem":19,"user":"533431e4e4b019098a6f8b8d"},{"code":"(fn [s] \n  (let [[f & remain] s]\n    (if (empty? remain) f (recur remain))\n  )\n)","problem":19,"user":"5356a324e4b04ce2eb3ed269"},{"code":"(fn [lst]\n  (let [[x & xs] lst]\n    (if (empty? xs) x (recur xs))))","problem":19,"user":"524740e7e4b05ef8e38e635d"},{"code":"#(loop [l %]\n   (if (empty? (rest l)) (first l)\n     (recur (rest l))))","problem":19,"user":"537e745ae4b06839e8705ea6"},{"problem":19,"code":"(fn [lst] (loop [a-l lst] (if (empty? (rest a-l)) (first a-l) (recur (rest a-l)))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":19,"code":"reduce (fn [acc curr] curr)","user":"5d01306ae4b0cc9c915881a6"},{"problem":19,"code":"(fn [x] \n   (nth x (- (count x) 1)))","user":"55f33d42e4b06e875b46ce58"},{"problem":19,"code":"(fn f[m]\n  (if (empty? (rest m)) (first m) (f (rest m))))","user":"56fa8984e4b07572ad1a88c1"},{"code":"#( nth % (dec (count %)))","problem":19,"user":"5137e11ce4b0a5db03d727d0"},{"problem":19,"code":"(fn getlast [x] (if (empty? (rest x)) (first x) (getlast (rest x))))","user":"5dbd86bce4b09f47823971bf"},{"code":"(fn sist [x] \n  (let [r (rest x)]\n    (if (= 1 (count r))\n      (first r)\n      (sist r))))","problem":19,"user":"50981062e4b04e098a4c7268"},{"code":"(fn [x] (loop [x x] (if (= 1 (count x)) (first x) (recur (rest x)))))","problem":19,"user":"515ef58be4b02c55805ea237"},{"code":"#(nth % (rand 5))","problem":19,"user":"4ec1e953535dfed6da9c6db8"},{"code":"(fn \n  [x]\n  (nth x\n       (dec\n        (count x))))","problem":19,"user":"52f7dc80e4b047fd55836fc9"},{"problem":19,"code":"(fn [a] (if (empty? (rest a)) \n          (first a)\n          (recur (rest a))))","user":"5800edaae4b0a837a8b30c48"},{"problem":19,"code":"(fn power [args]\n\t(if (empty? (rest args)) (first args) (power (rest args))))","user":"55d4bcfee4b0e31453f64a7e"},{"problem":19,"code":"(fn foo [li] (nth li (dec (count li))))","user":"5b03227be4b0cc2b61a3bd5d"},{"problem":19,"code":"#(loop [coll %1\n          coll2 '()]\n     (if (= coll '())\n       (first coll2)\n       (recur (rest coll) (cons (first coll) coll2))))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":19,"code":"(fn [s]\n  (let [l (count s)]\n    (nth s (dec l))))","user":"59b71b4fe4b05c620303ca3d"},{"code":"(fn [seqns] (first (reverse seqns)))","problem":19,"user":"533a7427e4b0e30313ee6cbb"},{"problem":19,"code":"(fn [x]\n  (nth x (dec (count x)))\n  )","user":"5cdbb1b2e4b05ee0cb311732"},{"problem":19,"code":"(fn last-element [coll] (nth coll (- (count coll) 1)))","user":"5697d946e4b0542e1f8d142a"},{"problem":19,"code":"(fn lastEle [params]\n         (first (reverse params)))","user":"58e67955e4b056aecfd47cb5"},{"code":"(fn [elements]\n  (first (reverse elements)))","problem":19,"user":"50a01937e4b08df8156e9e47"},{"code":"(fn [x]\n  (let [tail (rest x)]\n    (if (empty? tail)\n      (first x)\n      (recur tail))))","problem":19,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"problem":19,"code":"(fn [x] (nth x (- (alength (into-array x)) 1)))","user":"583e43d1e4b089d5ab817dae"},{"code":"(fn slf [x] (let [r (rest x)] (if (= r '()) (first x) (slf r))))","problem":19,"user":"4f0b0834535d0136e6c222fe"},{"code":"(fn r [[x & xs]]\n  (if (nil? xs) x (r xs)))","problem":19,"user":"51eadb98e4b0f1f103a0d153"},{"problem":19,"code":"(fn myLast [lst]\n  (if (seq (rest lst))\n    (recur (rest lst))\n    (first lst)))","user":"545281bce4b0e397800069c3"},{"problem":19,"code":"(fn [[x & rst]]\n  (loop [x x rst rst]\n    (if (empty? rst) x\n        (recur (first rst) (rest rst)))))","user":"5ed9b912e4b0c7845d86b0e3"},{"problem":19,"code":"#(let [f (first %)\n       n (next %)]\n   (if (empty? n)\n     f\n     (recur n)))","user":"55c4b23de4b0e31453f649a3"},{"code":"(fn [q]\n  (first (reverse q)))","problem":19,"user":"4f931779e4b0dcca54ed6cb5"},{"problem":19,"code":"#(loop [s %\n        r (rest s)]\n   (if (seq r)\n     (recur r (rest r))\n     (first s)))","user":"5e80edc3e4b09a7a73c8bba9"},{"problem":19,"code":"(fn last-element [x]\n           (if (= 1 (count x))\n               (first x)\n               (last-element (rest x))))","user":"5545d003e4b0a04f79299538"},{"code":"(fn [x]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4e28120f535deb9a81d77efa"},{"problem":19,"code":"(fn [x] (nth x (-  (count x) 1)))","user":"55a21f1ce4b0acc240e3151f"},{"problem":19,"code":"(fn f [coll]\n  (if (= 1 (count coll)) \n        (first coll)\n        (f (rest coll))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":19,"code":"(fn my-last\n  [[first & rest]]\n  (if (empty? rest)\n    first\n    (recur rest)))","user":"5d8a0d8fe4b0915913b1d3c6"},{"problem":19,"code":"(fn last-list [l]\n     (if (nil? (next l)) \n       (first l)\n       (last-list (rest l))))","user":"5670ef43e4b0a866af6896fc"},{"problem":19,"code":"(fn [[a & r]] (if (seq r) (recur r) a))","user":"54ca93abe4b057c6fda3a264"},{"problem":19,"code":"(fn[l1](first (reverse l1)))","user":"5627444fe4b00e49c7cb47cd"},{"problem":19,"code":"(fn [l]\n  (loop [l l]\n    (if (= '() (rest l))\n      (first l)\n      (recur (rest l)))))","user":"54638c8fe4b01be26fd746c2"},{"code":"(fn asdf [x] (first (take-last 1 x)))","problem":19,"user":"5082709ee4b06a522e8c7af1"},{"code":"(fn [lst] (nth lst (dec (count lst)))             \t\t)","problem":19,"user":"538828cfe4b0640c7a9a5899"},{"problem":19,"code":"#(nth % (dec(count %)) )","user":"555e25a0e4b0a2eb076a39b5"},{"problem":19,"code":"(fn my_last [seq] (first (reverse seq)))","user":"579f70ece4b05302be0b72fd"},{"problem":19,"code":"(fn [l]\n  (loop [r l] \n    (if (seq r)\n      (if (seq (rest r))\n        (recur (rest r))\n        (first r))\n      nil)))","user":"552d6868e4b076ab5578f7e8"},{"problem":19,"code":"(fn n [x] (if (= (rest x) ()) (first x) (n (rest x))))","user":"57152731e4b07c98581c3ad0"},{"problem":19,"code":"(fn last-el [x] (first(reverse x)))","user":"57c1c7dae4b05aa3c4741ca5"},{"problem":19,"code":"(fn cus-last [list] (first (take-last 1 list)))","user":"5f6e05d0e4b02876ed9fd060"},{"code":"(fn [x] ( nth x (- (count x) 1)) )","problem":19,"user":"4edc0c16535d10e5ff6f531f"},{"code":"(fn f [x]\n  (if\n    (= (rest x) '())\n    (first x)\n    (f (rest x))))","problem":19,"user":"508fd72ee4b0ea685a20f76c"},{"problem":19,"code":"(partial reduce (fn [sofar nxt] nxt))","user":"573d27b4e4b05c31a32c080f"},{"problem":19,"code":"(fn last-element[coll]\n  (if (= '() (rest coll))\n    (first coll)\n    (last-element (rest coll))))","user":"55fb5b89e4b0f488688e0662"},{"problem":19,"code":"(fn getLast [elements] (first (reverse elements)))","user":"55bd2150e4b01b9910ae29fa"},{"code":"(fn [x] (if (= (rest x) '() ) (first x) (recur (rest x))))","problem":19,"user":"4e79a6e7535db169f9c796a3"},{"problem":19,"code":"(fn last-element [s] (nth s (dec (count s))))","user":"5a5689a5e4b05d388ecb6c55"},{"problem":19,"code":"(fn [seq] (first (reverse seq)))\n\n; #(nth % (dec (count %)))","user":"5e2efec9e4b05b4b015161fd"},{"code":"(fn [lst](first (reverse lst)))","problem":19,"user":"534f8c9ae4b084c2834f4acd"},{"code":"(fn [coll]\n  (nth coll (dec (count coll))))","problem":19,"user":"4f608e38e4b0defedf855fa8"},{"code":"(fn [arr] (nth (seq arr) (dec (count arr))))","problem":19,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn[xs] (first(reverse xs)))","problem":19,"user":"5360e12ce4b0243289761e3a"},{"code":"(fn [v] ((vec v) (- (count v) 1)))","problem":19,"user":"53403110e4b085b17e897da6"},{"code":"(fn find-last \n    [x]\n    (if (empty? (rest x))\n      (first x)\n      (find-last (rest x))))","problem":19,"user":"4fd9dc87e4b05e33b9224f3e"},{"problem":19,"code":"(fn [c] \n  (nth c (dec (count c))))","user":"5caa5e42e4b048ec896c5c35"},{"problem":19,"code":"#(reduce (fn [_ itm] itm) %)","user":"593e4b1fe4b069cdc2982bbb"},{"problem":19,"code":"(fn [[x & xs :as lst]]\n  (cond \n    (empty? lst) nil\n    (empty? xs) x\n    :else (recur xs)))","user":"564161aae4b08d4f616f5ef9"},{"problem":19,"code":"(fn ultimo [[x & ult]]\n  (if ult (recur ult) x))","user":"562eafbce4b0ab312c17ebbe"},{"problem":19,"code":"(fn\n  [l]\n  (loop [n l]\n    (if (= (count n) 1) (first n)\n      (recur (rest n)))))","user":"603e8a3be4b0d5df2af22314"},{"code":"(fn lasty [x]\n  (if (> (count x) 1)\n   (lasty (rest x))\n   (first x)))","problem":19,"user":"50baad40e4b03e68e4411c96"},{"code":"(fn final-seq [x]\n  (first (reverse x)))","problem":19,"user":"4ef9b021535dced4c769f269"},{"problem":19,"code":"(fn [x] (get (into [] x) (dec (count x))))","user":"584f096ae4b0b7285a6f4e5c"},{"problem":19,"code":"(fn [v]\n  (if (= 1 (count v))\n    (first v)\n    (recur (rest v))))","user":"55d36d3ae4b0e31453f64a64"},{"problem":19,"code":"(fn [aa] (get (vec aa) (- (count aa) 1)))","user":"555e10fee4b0a2eb076a39b4"},{"code":"(fn [liste] (first (reverse liste)))","problem":19,"user":"4eb9353f535dfed6da9c6d4e"},{"code":"(fn [s] ( first (reverse s) ))","problem":19,"user":"51b6471ee4b02e5820733404"},{"problem":19,"code":"(fn [x]( first (reverse x)))","user":"54c981ace4b045293a27f678"},{"problem":19,"code":"(fn last' [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (last' (rest xs))))","user":"525890f7e4b0cb4875a45cb5"},{"problem":19,"code":"(fn [coll]\n   (->> coll\n        reverse\n        first))","user":"5b2689e3e4b063e2438bcc33"},{"code":"#(first( reverse %))","problem":19,"user":"4f52a134e4b03ad3f0c10d41"},{"problem":19,"code":"(fn\n   [x]\n  (first (reverse x)))","user":"552d2e5ae4b076ab5578f7e2"},{"code":"(fn myfun[x](first ( reverse x)))","problem":19,"user":"4dfb7b81535d04ed9115e77d"},{"code":"(fn [x] (reduce (fn [a b] b) x))","problem":19,"user":"4e4b911f535dc968683fc4d6"},{"code":"(fn this [x] (\n  if (> (count x) 1) (this (rest x)) (first x)\n  )\n)","problem":19,"user":"501819efe4b02f523d7cc5eb"},{"problem":19,"code":"(fn [my-list]\n  (let [current (first my-list)]\n    (if (nil? (next my-list))\n      current\n      (recur (next my-list)))))","user":"50c385a8e4b00e537d00254d"},{"code":"(fn [n] (nth n (- (count n) 1)))","problem":19,"user":"513b8558e4b0d8151c1c978b"},{"code":"(fn [xs]\n  (if (= (count xs) 1)\n  (first xs)\n  (recur (next xs))))","problem":19,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":19,"code":"#(first (reverse   %))","user":"55923ef7e4b0604b3f94d58a"},{"problem":19,"code":"(fn [[initial & the-rest]]\n   (if (nil? the-rest)\n     initial\n     (recur the-rest)))","user":"5cb703e8e4b026601754b95b"},{"problem":19,"code":"(fn [l]\n  (loop [items l]\n    (if (nil? (first items))\n         nil\n        (if (= () (rest items))\n             (first items)\n            (recur (rest items))))))","user":"5922599be4b09b4ee5954c8d"},{"code":"(fn [alist] (if (== (count alist) 1) (first alist) (recur (rest alist))))","problem":19,"user":"4fb213b7e4b081705acca285"},{"problem":19,"code":"#(->> % \n  \t count\n     dec\n     (nth %))","user":"54246fcce4b01498b1a71aed"},{"code":"(fn [x] ( let [ y ( - (count x) 1)] (nth x y) ))","problem":19,"user":"515be449e4b0388ca8ca1523"},{"problem":19,"code":"#( (fn [x] (nth x (- (count x) 1) )) % )","user":"55132a33e4b055c2f668d4c1"},{"code":"(fn [my-list] (first (reverse my-list)))","problem":19,"user":"4eeb8271535d93acb0a668a8"},{"problem":19,"code":";; #(nth % (dec (count %)))\nreduce (fn [x y] y)","user":"60ad1b70e4b00e9e6653c48d"},{"code":"(fn [coll] (loop [[f & r] coll] (if (empty? r) f (recur r))))","problem":19,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn f [x] \n  (\n    if (> (count x) 1)\n      (f (rest x))\n      (first x)\n  )\n)","problem":19,"user":"508fd6bae4b0ea685a20f76b"},{"problem":19,"code":"(fn my-last [[first & rest]]\n  (if (empty? rest)\n    first\n    (my-last rest)))","user":"542cb77ae4b0dad94371f2aa"},{"problem":19,"code":"(fn\n  [coll]\n  (cond (next coll) (recur (next coll))\n        :else (first coll)))","user":"5e952e17e4b0fbed045a3807"},{"problem":19,"code":"#(first(first(rest(split-at (dec (count %)) %))))","user":"54d9366ce4b0a52adc2e204e"},{"problem":19,"code":"(fn [v]\n  (let [L (into '() v)]\n    (do\n      (if (= (rest v) '())\n        (first v)\n        (recur (rest v))))))","user":"5d90190ce4b0915913b1d3f7"},{"code":"(fn ultimo [[f & r]]                                                                                                                                \n  (if (seq r)                                                                                                                                       \n    (ultimo r)                                                                                                                                      \n    f))","problem":19,"user":"4eea5823535d93acb0a6689d"},{"code":"#(.get % (dec (count %)))","problem":19,"user":"4f0928db535dcb61093f6c45"},{"code":"(fn [xlist]\n       (if (= (rest xlist) '())\n          (first xlist)\n          (recur (rest xlist))\n         )\n    )","problem":19,"user":"531bad1ce4b08068f379ed92"},{"code":"(fn lastclone [data] (first (reverse data)))","problem":19,"user":"5305a0b4e4b0d8b024fd3762"},{"code":"(fn [y] ((fn [x] (get x (- (count x) 1))) (into [] y)))","problem":19,"user":"534efb44e4b084c2834f4ac0"},{"code":"(fn [l] (first (rseq (vec l))))","problem":19,"user":"533ee560e4b085b17e897d98"},{"problem":19,"code":"(fn [xs] (loop [[head & tail] xs] (if (empty? tail) head (recur tail))))","user":"57b65420e4b0fbc9809a27be"},{"problem":19,"code":"#(->> %\n      count\n      dec\n      (nth %))","user":"56677cb6e4b04acd4f672dd7"},{"problem":19,"code":"#(peek (vec %) )","user":"54972b0ee4b0b312c081ff6e"},{"problem":19,"code":"(fn [x] (let [c (count x)] (nth x (dec c))))","user":"58ee51a4e4b056aecfd47da6"},{"code":"#(.get % (- (count %) 1)  )","problem":19,"user":"4f034e81535dcb61093f6a87"},{"code":"(fn mylast [s] (if (= 1 (count s)) (first s) (recur (next s))))","problem":19,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn [coll] \n  (if (next coll) \n    (recur (next coll)) \n    (first coll)))","problem":19,"user":"52ccdcd3e4b07d0d72b27373"},{"code":"(fn [xxx] (first (reverse xxx)))","problem":19,"user":"503ca261e4b06c4e0e1fa24e"},{"problem":19,"code":"(fn [[n & more]]\n  (if more (recur more)\n      n)\n  )","user":"5d23bd56e4b02ea6f0fb6a0f"},{"code":"(fn [xs] (nth xs (- (count xs) 1)))","problem":19,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn last-el[x] (first (reverse x)))","problem":19,"user":"52d4f23be4b09f7907dd1337"},{"problem":19,"code":"(fn kung-fu [xs] (nth xs ((comp dec count) xs)))","user":"57bf2aace4b05aa3c4741c73"},{"problem":19,"code":"(fn\n  [lst]\n  (first (reverse lst))\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn my-last [coll] (if (= 1 (count coll))\n                         (first coll)\n                         (my-last (rest coll))))","problem":19,"user":"5296aa9be4b02ebb4ef75034"},{"problem":19,"code":"(fn grabLast [x] (nth x (dec (count x))))","user":"5d6ac30ee4b04d129b00f2a0"},{"code":"(fn[x] (nth (reverse x) 0))","problem":19,"user":"4f03653f535dcb61093f6aa1"},{"problem":19,"code":"(fn [x] (reduce (fn [prev current] current) x))","user":"540d5085e4b0addc1aec670e"},{"problem":19,"code":"( fn [coll] (reduce ( fn[a b] b)  coll) )","user":"57a90baee4b0a96607956227"},{"problem":19,"code":"#(loop [currList %1]\n   (if (= (count currList) 1)\n     (first currList)\n     (recur (next currList))\n     )\n   )","user":"5fce0cc5e4b07e53c2f3f000"},{"code":"(fn [li] (let [len (count li)] (get (vec li) (- len 1)) ) )","problem":19,"user":"521f0106e4b0e6c71e0c0bc4"},{"code":"#(-> % reverse first)","problem":19,"user":"4da3e51330acd6ed10482a68"},{"problem":19,"code":"; (fn last-one\n;   ([x] x)\n;   ([x & xs] (last-one xs)))\n\n(fn [coll] \n   (if (= nil (next coll))\n     (first coll)\n     (recur (next coll))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":19,"code":"#(loop [l %] \n   (if (empty? (rest l)) (first l) (recur (rest l))))","user":"56c89c2ce4b0ed865f9758d4"},{"code":"(fn ultimo [s]\n     (let [restante (rest s)]\n       (if (= 1 (count restante)) \n         (first restante)\n         (ultimo restante))))","problem":19,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn la [x]\n  (if (= (rest x) [])\n    (first x)\n    (la (rest x))))","problem":19,"user":"51a671d4e4b0740bfd1afd21"},{"problem":19,"code":"(fn [a] \n  (first (reverse a)))","user":"603f1d04e4b0d5df2af2231e"},{"problem":19,"code":"(fn[sce] (nth sce (- (count sce) 1)))","user":"564a0698e4b0284900eef64b"},{"code":"(fn hede [collection] (nth collection \n                       (- (count collection) 1)\n                       ))","problem":19,"user":"52b20257e4b0c58976d9ace8"},{"problem":19,"code":"(fn [l] \n\t(if (= (count (rest l)) 0)\n               (first l)\n               (recur (rest l))))","user":"54b4046de4b05787c3b16389"},{"problem":19,"code":"(fn f [xs]\n  (if (next xs)\n  (f (next xs))\n  (first xs)\n  ))","user":"56ef63eee4b04a395b9a045e"},{"code":"(fn x [y] (if (= (rest y) '()) (first y) (x (rest y))))","problem":19,"user":"4f774b17e4b0fbe0118ec57b"},{"code":"(fn [x] \n  (first (reverse x))\n  )","problem":19,"user":"51631aeee4b055933a9ca02a"},{"code":"(fn[x] (peek(into [] x)))","problem":19,"user":"51cec220e4b0e42293a2255a"},{"problem":19,"code":"#(\n  first (reverse %)\n)","user":"5670c4c4e4b0a866af6896fa"},{"code":";(fn [coll]\n;  (loop [coll coll]\n;    (let [last-elements (rest coll)]\n;      (if (empty? last-elements)\n;        (first coll)\n;        (recur last-elements)))))\n\n(fn [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"4e117dea535d04ed9115e7c9"},{"code":";;#(first (reverse %))\n;(comp first reverse)\n#(first (apply conj '() %))","problem":19,"user":"52f426fce4b05e3f0be25f1e"},{"problem":19,"code":"(fn [coll]\n  (loop [xs coll]\n    (let [item (first xs)\n          tail (rest xs)] \n      (if (seq tail)\n        (recur tail)\n        item))))","user":"5675cdf1e4b05957ce8c614d"},{"code":";#(first (reverse %))\n#(nth % (- (count %) 1))","problem":19,"user":"533e7f63e4b085b17e897d8e"},{"code":"#( first(reverse %))","problem":19,"user":"503c02e5e4b0fc0f99c2e54e"},{"code":"(fn my-last [l]\n  (if (empty? (rest l))\n    (first l)\n    (my-last (rest l))))","problem":19,"user":"51d71011e4b0154f82ab92f8"},{"code":"(fn my [xs]\r\n  (if (empty? (rest xs))\r\n    (first xs)\r\n    (my (rest xs))))","problem":19,"user":"4dd023dd535d5973398f92ad"},{"problem":19,"code":"(fn [coll] \n  (first (reverse coll)))","user":"545f737ce4b01be26fd74688"},{"code":"(fn [list] \n  (nth list (- (count list) 1))\n)","problem":19,"user":"4f6a5c8de4b07046d9f4ef9b"},{"problem":19,"code":"(fn last1 [x]\n  (first(reverse x)))","user":"55df94f4e4b050e68259b3f6"},{"problem":19,"code":"(fn mylast [x]\n  (if (nil? (seq (rest x))) (first x) (mylast (rest x)))\n)","user":"518665cde4b0da5a5be3bad2"},{"problem":19,"code":"(fn mylst [l] (if (= '() (rest l)) (first l) (mylst (rest l))))","user":"56be8649e4b0f26550335983"},{"problem":19,"code":"(fn [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (recur (rest coll))\n  )\n  \n)","user":"58669dd0e4b0f14aab7c8867"},{"problem":19,"code":"(fn nxt [s] (if-let [x (next s)] (nxt x) (first s)))","user":"54893618e4b0e286459a11e0"},{"problem":19,"code":"(fn[x] (peek(vec x)))","user":"59c190c3e4b0a024fb6ae48b"},{"problem":19,"code":"(fn [s] (first ( reverse s)))","user":"5467f222e4b00cfc9eacc132"},{"problem":19,"code":"(fn [lst]\n (let [len (count lst)] \n   (if (pos? len)\n   (nth lst (dec len)))))","user":"6067262be4b069485764dddb"},{"code":"(fn my-last [x]\n  (if (= (rest x) '())\n      (first x)\n      (my-last (rest x))))","problem":19,"user":"4fb591aee4b081705acca2c0"},{"problem":19,"code":"(fn last-ele ([x] (last-ele (first x) (next x)))\n  \t\t\t ([f r] (if r (last-ele r) f)))","user":"5474897ce4b0c51c1f4d728a"},{"problem":19,"code":";reduce (fn [a b] b)\n\n(comp first reverse)","user":"55342ee0e4b09218d5f44f98"},{"code":"(fn last-item [x]\n  (if (= 1 (count x))\n  \t(first x)\n    (last-item (rest x))))","problem":19,"user":"525805bbe4b0cb4875a45ca1"},{"problem":19,"code":"#(comp (first (reverse %)))","user":"5564af06e4b0c656e3ff180b"},{"problem":19,"code":"(fn letzter [[erster & derrest]] \n  (if (empty? derrest)\n    erster\n    (letzter derrest))\n  )","user":"542fa0dde4b0dad94371f2d2"},{"problem":19,"code":"#(nth%(dec(count %)))","user":"5fa3ffa0e4b0f0ebd91b7802"},{"code":"(fn [x] ((comp first rseq vec) x))","problem":19,"user":"4fec550de4b0681fd128dca6"},{"code":"(fn las [lst] (nth lst (- (count lst) 1)))","problem":19,"user":"5087f895e4b0198722bd9852"},{"problem":19,"code":"(fn my-last [collection]\n      (cond\n        (empty? collection) nil\n        (= 1 (count collection)) (first collection)\n        :else (let [[_ & the-rest] collection] (my-last the-rest))) )","user":"5e9d99f9e4b0157ca9664806"},{"code":"(fn hi [x] (nth x (- (count x) 1)))","problem":19,"user":"4f1b1f31535d64f603146477"},{"problem":19,"code":"(fn my-last [li] \n  (cond (empty? (rest li)) (first li)\n        :else (my-last (rest li))))","user":"5786c182e4b0ebec4cfb74fd"},{"code":"#(nth % (- (count %) 1)\n)","problem":19,"user":"5097e4a3e4b087ccf61a7af3"},{"code":"(fn lst [cs] \n  (if (empty? (rest cs)) \n    (first cs)\n    (lst (rest cs))))","problem":19,"user":"507a396be4b08327cd804a69"},{"problem":19,"code":"(fn [theList] (nth theList (dec (count theList) ) ) )","user":"596c3bc6e4b069c0a1a19827"},{"code":"(fn l [x]\n     (if (= (rest x) ())\n         (first x)\n\t     (l (rest x))))","problem":19,"user":"53372d32e4b0e30313ee6c86"},{"problem":19,"code":"(fn rr [[a & r]] (if r (recur r) a))","user":"55b3e8aee4b01b9910ae2977"},{"code":"(fn [coll] \n  (if (= (count coll) 1) (first coll) \n   (recur (rest coll) )\n  )\n)","problem":19,"user":"5249afc9e4b05ef8e38e6470"},{"code":"(fn [d]\n      ((comp first  reverse) d)\n      )","problem":19,"user":"52bbe6e1e4b07a9af57922ef"},{"code":"(fn [xs] (if (nil? (next xs)) (first xs) (recur (next xs))))","problem":19,"user":"4dd59d8b535dae65d5c462eb"},{"problem":19,"code":"(fn [& x]\n   (first(reverse (first x)))\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":19,"code":";(fn getlast [x]\n ;  (if (= 1 (count x))\n  ;   (first x)\n   ;  (getlast (rest x))\n    ; )\n   ;)\n   \n#(first (reverse %))","user":"5b70f96fe4b047b03b203692"},{"problem":19,"code":"(fn gimme_last [items] (first (reverse items)))","user":"53a7637de4b047364c044419"},{"problem":19,"code":"(fn [xs]\n  (loop [[y & ys] xs]\n    (if (seq ys)\n      (recur ys)\n      y)))","user":"5644bf88e4b0284900eef5fc"},{"problem":19,"code":";; first element of the reversed list which will have \n;; performance implications when working with large sequences\n;;\n;; (comp first reverse)\n\n#(nth % (- (count %) 1))","user":"5db4bd07e4b010eb3c36cd2c"},{"problem":19,"code":"(fn [x] \n  (nth x (- (count x) 1))\n  )","user":"597902bce4b01722bebd4d1e"},{"problem":19,"code":"(fn [x]\n  (let [n (count x)]\n        (nth x (- n 1))))","user":"5911c8e1e4b0163c97b36edc"},{"problem":19,"code":"(fn [yo] (nth yo (dec (count yo))))","user":"5e7fb908e4b085ba37836e3f"},{"problem":19,"code":"(fn func [coll] (reduce (fn[a b] b) coll))","user":"5e805895e4b085ba37836e44"},{"problem":19,"code":"#(let [x %] (nth x (dec (count x))))","user":"58bef28be4b021aa9917ecca"},{"code":"(fn [xs]\n  (first\n   \t(drop (- (count xs) 1) xs)))","problem":19,"user":"512e31e9e4b0b740abc59823"},{"problem":19,"code":"#(if (next %) \n   (recur (next %))\n   (first %))","user":"551d019fe4b07993ea3788e6"},{"code":"(fn mylast[x] (nth x (- (count x) 1)))","problem":19,"user":"53979319e4b0b51d73faaeec"},{"problem":19,"code":"#( let [sequ %] \n   (nth sequ (- (count sequ) 1)))","user":"582645d3e4b051871117bef5"},{"code":"#(if (empty? (rest %))\n     (first %)\n     (recur (rest %)))","problem":19,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [col] (first (reverse (seq col))))","problem":19,"user":"4e72dd5d535d5021c1a89667"},{"code":"(fn mylast [i]\n  (first (reverse i)))","problem":19,"user":"526d54ece4b03e8d9a4a72d1"},{"problem":19,"code":"(fn [ary] (first (reverse ary)))","user":"554b8b95e4b0a04f79299590"},{"problem":19,"code":"(fn [sequence] (first(reverse sequence)))","user":"59ae1ebae4b0e1f4e384c89a"},{"code":"(fn [x] (if (= (count (rest x)) 0) (first x) (recur (rest x))))","problem":19,"user":"5179fd22e4b01aacecbecbe5"},{"code":"(fn [x]\n  (if (vector? x)\n    (peek x)\n    (nth x 2)))","problem":19,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":19,"code":"(fn [ar] (first (reverse ar)))","user":"57b6231ae4b0fbc9809a27b7"},{"problem":19,"code":"(fn theLast [x] \n  (if (= '() (rest x)) \n    (first x) \n    (theLast (rest x))\n    )\n  )","user":"5bf0b940e4b0a6d31fed215c"},{"problem":19,"code":"(fn laaast [xs] (\n                 if \n                 \t(= nil (first(rest xs)))\n                 (first xs)\n                 (laaast (rest xs))))","user":"53c181c0e4b00fb29b221263"},{"problem":19,"code":"(fn last-item [x] (nth x ( - (count x) 1 ) ) )","user":"569d1a01e4b0542e1f8d1473"},{"code":";it's realy ugly\n#(ffirst   \n  (rest \n   (split-at \n    (dec (count %))\n    %)))","problem":19,"user":"517cc671e4b0bbbf1f12af0a"},{"problem":19,"code":"(fn [l] (first (reduce #(or [%2 %1]) l)))","user":"5fc241c1e4b0edf42a5593d1"},{"problem":19,"code":"#(loop [l % h nil] (if (empty? l) h (recur (rest l) (first l))))","user":"5ccf2dc3e4b0ccb0619628c2"},{"code":"(fn mmlast [li] (let  [re (rest li)] (if (= `()  re)\n                             ( first li) ( mmlast re))))","problem":19,"user":"50ead6ffe4b02d54280826e2"},{"code":"(fn [q]\n  ((fn final [l x]\n    (if (= [] l) x\n        (final (rest l) (first l))))\n    q\n    (first q)))","problem":19,"user":"4f39c08ae4b0e243712b1efb"},{"code":"(fn [x]\n  (nth (vec x)\n       (dec (count x))))","problem":19,"user":"4eb92051535dfed6da9c6d4c"},{"problem":19,"code":"(fn[c] (-> c reverse first))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn ultimo [v] (first (#(take 1 (drop (- (count v) 1) v)))))","problem":19,"user":"4eb80331535d7eef3080737b"},{"problem":19,"code":"#(if (=(count %) 1) (first %) (recur (rest %)))","user":"5df175bce4b03c219ef1a34d"},{"problem":19,"code":"(fn \n  [x]\n  (if (empty? (rest x)) (first x)\n  (recur (rest x))) )","user":"5e3810ffe4b01d43a70e8db1"},{"code":"(fn lst [xs] (if (= (count xs) 1)\n           (first xs)\n           (lst (next xs))))","problem":19,"user":"521392bce4b0d32679a5065e"},{"code":"(fn [x] \n  (nth x (- (count x) 1))\n )","problem":19,"user":"52e27501e4b09f7907dd1435"},{"problem":19,"code":"#(loop [lista % c 0 s (count %)] (if (= c (- s 1)) (first lista) (recur (rest lista) (inc c) s)))","user":"53dc05d4e4b094d41abdfefa"},{"problem":19,"code":"(fn [seqs]\n  (let [l (count seqs)]\n  \t(nth seqs (- l 1)))\n)","user":"547adcb0e4b0c51c1f4d72cf"},{"problem":19,"code":"#(->>(take-last 1 %) (first))","user":"5696d6e0e4b0dcc4269f4135"},{"problem":19,"code":"(fn [any-seq]\n  (let [last-index ((comp dec count) any-seq)]\n  (nth any-seq last-index)))","user":"60948c3ae4b00e9e6653c3e7"},{"code":"(fn [lst] (reduce (fn [%1 %2] %2) lst))","problem":19,"user":"51f2ab8be4b0210f90e74554"},{"problem":19,"code":"(fn t [[x & more]]\n  (if more (recur more) x))","user":"5596d885e4b04c1e5c31d75a"},{"problem":19,"code":"(fn last' [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (last' (rest coll))\n    ))","user":"5d1c047fe4b02ea6f0fb6988"},{"problem":19,"code":"#(loop [remaining %]\n    (let [all (rest remaining)]\n      (if (empty? all)\n        (first remaining)\n        (recur all))))","user":"53e634ede4b036ad0777e470"},{"code":"(fn [l]\n (nth l (- (count l) 1)))","problem":19,"user":"532cb870e4b019098a6f8b34"},{"problem":19,"code":"(fn abc [s] (first(reverse s)))","user":"5b3ca9c9e4b02d533a91bbe3"},{"code":"(fn xx [s] \n  (loop [curS s] \n    (if (nil? (next curS))\n      (first curS)\n      (recur (rest curS)))))","problem":19,"user":"534815bde4b084c2834f4a53"},{"problem":19,"code":"(fn zadnji [sez]\n  (cond\n    (empty? (rest sez)) (first sez)\n    :else\n      (zadnji (rest sez))))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":19,"code":"(fn rec [lis]\n  (if (seq (rest lis))\n    (rec (rest lis))\n    (first lis)))","user":"55a6b7b6e4b09e57187da29c"},{"code":"(fn getlast [a] (if (nil? (next a)) (first a) (getlast (rest a))))","problem":19,"user":"51340abbe4b0915833951877"},{"code":"(fn [s] \n  (loop [rem s]\n    (if (nil? (next rem)) (first rem) (recur (rest rem)))))","problem":19,"user":"4fdbef2fe4b05e33b9224f66"},{"code":"(fn [x] (if (= (rest x) '()) (first x) (recur (rest x))))","problem":19,"user":"4f57b523e4b0a7574ea7183c"},{"problem":19,"code":"(fn lastelem [x] (first (reverse x)))","user":"573ce085e4b05c31a32c080a"},{"problem":19,"code":"(fn my-last [x] \n  (if (= (count x) 1)\n    (first x) \n    (my-last (next x))))","user":"566e3af2e4b0a866af6896d5"},{"code":"(fn [theseq]\n  (loop [s theseq]\n    (let [x (first s) xs (rest s)]\n    (if (empty? xs) x\n        (recur (rest s))))))","problem":19,"user":"5084688be4b0fb8f40674bf6"},{"problem":19,"code":"(fn [s] \n  (if (= (count s) 1) \n    (first s) \n    (recur (rest s))))","user":"5e4fae60e4b027a2e10ac0b9"},{"problem":19,"code":"(fn [xs] ((into [] xs) (- (count xs) 1)))","user":"5b1737c1e4b00d69b768e765"},{"code":"(\n    fn [x] (\n             (into [] x) (- (count x) 1)\n         )\n  )","problem":19,"user":"528f82d8e4b0239c8a67aef4"},{"problem":19,"code":"(fn [s] (peek (reverse s)))","user":"57a0c84fe4b0c3d858beb8d8"},{"code":"(fn [x] \n  (let [sz (count x)\n        idx (- sz 1)]\n    (nth x idx)))","problem":19,"user":"5215661be4b02f6d8ea676c7"},{"code":"(fn laste ([sequ] (first (reverse sequ))))","problem":19,"user":"5344a0efe4b084c2834f4a2d"},{"problem":19,"code":"(fn last* [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (last* (rest lst))))","user":"5895477fe4b00487982d527c"},{"code":"(fn ll [x] (if (empty? (rest x)) (first x) (ll (rest x))))","problem":19,"user":"4f0369fe535dcb61093f6ab2"},{"code":"(fn [xs] (nth xs\n              (- (count xs) 1)))","problem":19,"user":"520ea61ae4b0101e4be6fcd7"},{"problem":19,"code":"#(nth % (dec (count %)))\n      \n;#(.get % (dec (count %)))\n;#(.get %(- (count %) 1))\n;#(first (reverse %))\n;(comp first reverse)\n;reduce (fn [a b] b)\n;(fn [[n & more]]\n;  (if more\n;    (recur more)\n;    n))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn [x] (reduce (fn [acc e] e) nil x))","problem":19,"user":"5219e575e4b0c4ef0be82ffd"},{"problem":19,"code":"(fn [l] (let [x (vec l)] (x (- (count x) 1))))","user":"5922f8a9e4b026ae3852128f"},{"code":"(fn last-1 [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (last-1 (rest coll))\n  )\n)","problem":19,"user":"52dbd423e4b09f7907dd13c6"},{"code":"(fn my-last[l]\n  (letfn[(helper[l cnt]\n  (if(== 1 cnt)\n      (first l)\n   (recur (rest l)(dec cnt))))]\n  (helper l (count l))))\n\n\n\n\n\n#_(first (reverse %))\n#_(fn [col]\n  (if (or (seq? col)(vector? col))\n    (loop [m 0]\n      (if (< m (count col))\n        (recur (inc m))\n         (nth col (- m 1))))\n    (print \"Not a Collection!\")))","problem":19,"user":"52faf67ce4b047fd55837005"},{"problem":19,"code":"(fn l [s] (if (empty? (rest s))\n          (first s)\n          (l (rest s))))","user":"5740f821e4b05c31a32c085e"},{"problem":19,"code":"(fn func [xs] (if (= (rest xs) '()) (first xs) (func (rest xs))))","user":"59497f51e4b07ddc2dafaddd"},{"problem":19,"code":"(fn [e]\n  (nth e (- (count e) 1)))","user":"564d7434e4b0284900eef680"},{"problem":19,"code":"(fn lastElement [ultimo]\n  (first (reverse ultimo)))","user":"5e95013fe4b0fbed045a3800"},{"problem":19,"code":"(fn [coll]\n  (reduce (fn [e, remaining] remaining) coll))","user":"5c113df2e4b01240ff56716f"},{"problem":19,"code":"(fn [x] (first (drop (dec (count x))x)))","user":"555b5ae4e4b0deb715856e4f"},{"problem":19,"code":"reduce  (fn [x, y] y)","user":"55074035e4b021ccfedb96a3"},{"problem":19,"code":"(fn [s]\n  (if (next s)\n    (recur (next s))\n    (first s)\n  )\n)","user":"5926c254e4b072a2710fceb8"},{"problem":19,"code":"(fn\n  [my-list]\n  (if (>= (count my-list) 1)\n    (nth my-list (- (count my-list) 1))\n    nil))","user":"60743977e4b069485764de46"},{"problem":19,"code":"(fn [col]\n  (if-let [seq-rest (next col)]\n    (recur seq-rest)\n    (first col)))","user":"5600591de4b04bb52996e166"},{"problem":19,"code":"#(if\n     (empty? (rest %))\n     (first %)\n     (recur (rest %))\n     )","user":"5cc092d1e4b0ccb061962790"},{"code":"( fn [[ x & more ]]\n  ( if more \n    (recur more)\n  x\n))","problem":19,"user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn [x] (reduce (fn [x y] y) x))","problem":19,"user":"52f962dae4b047fd55836fe8"},{"problem":19,"code":"(fn myLast [lst] (if    \t   \t  \n\t\t  (empty? (rest lst))\n\t\t      (first lst)\n\t\t   (myLast (rest lst))))","user":"576afc66e4b0a07e8fc18127"},{"code":"#(\n  if (= (count %) 1)\n    (first %) \n    (recur (rest %)))","problem":19,"user":"50a93b6de4b0a9a42786e8e0"},{"code":"(fn [sequ]\n  (first (reverse sequ)))","problem":19,"user":"52bc7ea6e4b07a9af57922f7"},{"problem":19,"code":"(fn last-element [s]\n  (if (= 1 (count s))\n    (first s)\n    (last-element (rest s))))","user":"56491050e4b0284900eef639"},{"problem":19,"code":"#(loop [s %]\n   (let [r (rest s)]\n     (if\n       (empty? r) (first s)\n       (recur r)\n       )\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"problem":19,"code":"(fn [coll] (nth coll (dec (count coll))))\n;(fn [coll] (first (take-last 1 coll)))\n;(fn [coll] (first (drop (dec (count coll)) coll)))","user":"5e357507e4b0650de70e2b2a"},{"code":"(fn me [x] (if (next x) (me (rest x)) (first x)))","problem":19,"user":"5112695de4b0350614f07a73"},{"problem":19,"code":";(fn mylast [lst] (if (empty? (rest lst)) (first lst) (mylast (rest lst))))\n(fn [lst] (first (reverse lst)))","user":"586c5a34e4b01531a375e97a"},{"problem":19,"code":"(fn [s] \n  (if (not (seq (rest s)))\n    (first s)\n    (recur (rest s))))","user":"53f67bcfe4b0db01ade6f9e1"},{"code":"(fn [arr] (nth (take-last 1 arr) 0))","problem":19,"user":"50feb0e1e4b03cd852b4e851"},{"problem":19,"code":"(fn [arr]\n  (loop [i (vec arr)]\n    (if (= (count i) 1)\n      (first i)\n      (recur (rest (vec i))))))","user":"5a5b5806e4b0512ff01cd904"},{"problem":19,"code":"(fn foo [se]\n  (loop [s se]\n    (if (empty? (rest s))\n      (first s)\n      (recur (rest s)))))","user":"577abecfe4b0d3393e5deb06"},{"code":"(fn last2 [xs] (if (empty? (rest xs)) (first xs) (last2 (rest xs))))","problem":19,"user":"51846567e4b02826a645f399"},{"code":"(fn [x] (peek (vec x)))","problem":19,"user":"4e028764535d04ed9115e790"},{"problem":19,"code":"(fn a [thing] \n  (first (take-last 1 thing)))","user":"545cb80fe4b01be26fd74661"},{"code":"(fn last1 [col]\n         (if (next col)\n           (last1 (next col))\n           (first col)))","problem":19,"user":"4ec347af535dcc7ae8597d53"},{"problem":19,"code":"(fn [x] (loop [a x] (let [[h & t] a] (if (= t nil) h (recur t)))))","user":"58152157e4b0f478707a0631"},{"code":"(fn mylast [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn my-last [x]\n  (if (empty? (rest x))\n    (first x)\n    (my-last (rest x))))","problem":19,"user":"4e691c79535d8ccf87e9fe97"},{"problem":19,"code":"(fn end-ele[elements](if (empty? (rest elements))\n                       (first elements)\n                       (recur (rest elements))))","user":"56dc483fe4b0ea9b8538f81b"},{"code":"(fn [s]\r\n  (loop [xs s]\r\n    (if (= (rest xs) '())\r\n      (first xs)\r\n      (recur (rest xs)))))","problem":19,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn [x] \n   (nth  x (- (count x) 1)))","problem":19,"user":"516018dae4b0e2be8aa20be2"},{"code":"(fn ^:static sd [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4f58da1ee4b0a7574ea71859"},{"code":"(fn [sq]\n  (if (next sq)\n    (recur (next sq))\n    (first sq)))","problem":19,"user":"4f840766e4b033992c121c27"},{"problem":19,"code":"(fn my-last [col] (nth col (dec (count col))))","user":"5549ca1ce4b0a04f7929956c"},{"code":"reduce (fn[acc,e] e)","problem":19,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [seq]\n  (letfn [(lst [seq acc]\n            (if (= seq '()) acc (lst (rest seq) (first seq))))]\n    (lst seq nil)))","problem":19,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [x]\n  (loop [l x]\n    (if (= 1 (count l))\n        (first l)\n        (recur (rest l)))))","problem":19,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"(fn [s] (if (empty? (rest s))\n            (first s)\n            (recur (rest s))))","problem":19,"user":"4f47a73ce4b0d56e7bb92bc0"},{"problem":19,"code":"(fn [seq]\n  (loop [[first & rest] seq]\n    (if (> (count rest) 0)\n      (recur rest)\n      first)))","user":"52a803cee4b0c58976d9ac26"},{"problem":19,"code":"(fn [x] (nth  x (-  (count x) 1 )))","user":"583d2d22e4b089d5ab817d93"},{"code":"(fn findlast [x]\n  (nth x (dec (count x))))","problem":19,"user":"526934d6e4b03e8d9a4a71dd"},{"problem":19,"code":"(fn [a] ((fn [[x & y]] x)(reverse a)))","user":"5cfff788e4b0cc9c91588196"},{"problem":19,"code":"#(-> (if (next %) (recur (next %)) (first %)))","user":"5832be57e4b089d5ab817c86"},{"problem":19,"code":"(fn r [x] \n  (if (and (seq x) (seq (rest x)))\n    (recur (rest x))\n    (first x)\n  )\n)","user":"5813a2efe4b0f478707a0614"},{"code":"(fn my-last [alst]\n  (cond \n   (nil? alst) nil\n   (nil? (next alst)) (first alst)\n   :else (recur (next alst))))","problem":19,"user":"50414e3ce4b06d8231e4facd"},{"code":"#(first (drop (dec (count %)) %))\n;#(->> % (drop (dec (count %))) first)","problem":19,"user":"4ff76222e4b0678c553fc38e"},{"problem":19,"code":"(fn [collection]\n  (if (nil? (second collection))\n    (first collection)\n    (recur (rest collection))))","user":"54a1d047e4b09f271ff37c4f"},{"code":"(fn [coll]\n    (if (empty? (rest coll))\n      (first coll)\n      (recur (rest coll))))","problem":19,"user":"5078a0c1e4b08327cd804a5a"},{"code":"(fn [my-list]\n  (first (reverse my-list)))","problem":19,"user":"5282c03be4b0757a1b171461"},{"code":"(fn [[h & r]]\n  (if (nil? r)\n    h\n    (recur r)))","problem":19,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":19,"code":"(fn f [lst] (if (empty? (rest lst)) (first lst) (f (rest lst))))","user":"5c62979fe4b0fca0c162264c"},{"problem":19,"code":"(fn [xs]\n  (if (next xs) (recur (next xs))\n      (first xs)))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":19,"code":"(fn [s]\r\n  (loop [[x & xs] s]\r\n    (if (empty? xs)\r\n      x\r\n      (recur xs))))","user":"55f7ca86e4b06e875b46ceb1"},{"problem":19,"code":"(fn lst [[f & r]] (if (empty? r) f (recur r)))","user":"53e19461e4b0d874e779ae59"},{"problem":19,"code":"(fn [the-seq]\n  (nth the-seq (- (count the-seq) 1)))","user":"5c26c9b3e4b07e362c2305c5"},{"code":"(fn [l] (let [r (rest l) rr (rest r)] (if (= rr ()) (first r) (recur r))))","problem":19,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":19,"code":"#(reduce (fn sval [x y] y) %)","user":"5e2010eee4b05b4b01516105"},{"code":"#(reduce (fn[a b] b) %1)","problem":19,"user":"5262d2d0e4b03e8d9a4a709a"},{"problem":19,"code":"(fn [x] (nth ( reverse x) 0))","user":"53eb823de4b036ad0777e4fa"},{"problem":19,"code":"(fn k-last [lst] (first (drop (dec (count lst)) lst)))","user":"59deba46e4b01968742fed7f"},{"code":"(fn [x] (first (clojure.set/difference (set x) (set (butlast x)))))","problem":19,"user":"510c123be4b078ea7192110e"},{"problem":19,"code":"(fn [x] \n  (if \n    (= () (rest x))\n    (first x)\n    (recur (rest x))\n    )\n  )","user":"52280a26e4b0186687e23a67"},{"problem":19,"code":"(fn my-rest [xs] (let [[x & xs] xs] (if (not xs) x (my-rest xs))))","user":"54f9920ee4b01ecee9d8883f"},{"problem":19,"code":"(fn [s]  (if (next s)\n          (recur (next s))\n          (first s)))","user":"544e5ecae4b0e39780006984"},{"code":"(fn [ele] (nth ele (- (count ele) 1)))","problem":19,"user":"513621a1e4b04ac1f358dd4c"},{"problem":19,"code":"(fn [l] (nth l (dec (count l)) ))","user":"551a7160e4b091ff45eda998"},{"problem":19,"code":"(fn\n  [coll]\n  (if (= (count coll) 1) (first coll) (recur (next coll))))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":19,"code":"(fn [s]\n   (first (drop (dec (count s)) s))\n   )","user":"5c6c5964e4b0fca0c162272d"},{"code":"(fn [s] (first (reverse s)))","problem":19,"user":"4de5372d535d08e6dec9fdf1"},{"problem":19,"code":"(fn [[i & r]]\n  (cond \n   (empty? r) i\n   :else (recur r)))","user":"54145050e4b01498b1a719ea"},{"problem":19,"code":"(fn\n  [l]\n  (first (reverse l))\n  )","user":"59a9c22ae4b08cbb53654d75"},{"code":"(fn [x]\r\n  (if-let [y (next x)]\r\n    (recur y)\r\n    (first x)))","problem":19,"user":"4e07af97535d04ed9115e7a8"},{"code":"(fn [seq] (-> seq reverse first))","problem":19,"user":"4efd98fa535de96065cf5086"},{"code":";;(fn [a] (.get a (- (count a) 1)))\n(fn f[x] (\n  if (= (second x) nil) (first x)\n  (f (rest x))\n))","problem":19,"user":"50800e49e4b089ade05efbda"},{"problem":19,"code":"(fn\n  [lst]\n  (if (= 1 (count lst))\n    (first lst)\n    (recur (rest lst))))","user":"5c706232e4b0fca0c162277e"},{"problem":19,"code":"(fn [vals] (loop [[item & others] vals]\n             (if (= (count others) 0)\n               item\n               (recur others))))","user":"5d51216ae4b0776584bd6f5b"},{"code":"(fn get-last [xs] \n  (if xs\n    (loop [first-el (first xs) rest-els (rest xs)]\n      (if (seq rest-els)\n        (recur (first rest-els) (rest rest-els))\n        first-el))))","problem":19,"user":"4ec5615a535d6d7199dd369b"},{"code":"(fn [elems]\n  (loop [r elems]\n\t\t(if (not (= '() (rest r)))\n\t\t\t(recur (rest r))\n\t\t\t(first r))))","problem":19,"user":"4e641bfd535d8ccf87e9fe67"},{"code":"(fn last-u [s]\n  (if (empty? (rest s))\n\t    (first s)\n\t    (recur (rest s))))","problem":19,"user":"4ed0d65f535d44c135fd68c6"},{"problem":19,"code":"(fn my-last\n  [s]\n  (if (= (rest s) ())\n    (first s)\n    (my-last (rest s))\n  )\n)","user":"56ebfb93e4b04a395b9a042e"},{"code":"(fn myLast [lst] ( if( = (count lst) 1 ) (first lst) (myLast (rest lst)) ))","problem":19,"user":"4fc4f073e4b081705acca35b"},{"code":"(fn cody [x] (first (drop (- (count x) 1) x)))","problem":19,"user":"53000714e4b0d8b024fd370e"},{"code":"(fn[x]\n  (first(reverse x)))","problem":19,"user":"4e94c4ca535dbda64a6f6b29"},{"code":"(fn rst [x] (nth x (- (count x) 1)))","problem":19,"user":"533078b5e4b019098a6f8b5c"},{"code":"(fn [lst]\n  (if (empty? (rest lst))\n      (first lst)\n      (recur (rest lst))))","problem":19,"user":"52f2b450e4b05e3f0be25efd"},{"problem":19,"code":"(fn [seq]\n  (loop [rest_seq seq last_value nil]\n    (if (empty? rest_seq) \n      last_value\n      (recur (rest rest_seq) (first rest_seq))\n    )\n    )\n  )","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn lol [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (lol (rest xs))))","problem":19,"user":"4fb04ee2e4b081705acca264"},{"problem":19,"code":"(fn [x]\n\n(nth x (dec (count x)))  \n  \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":19,"code":"(fn [lst] ((vec lst) (- (count lst) 1)))","user":"59aad3d4e4b08cbb53654d88"},{"code":"(fn r [l] (first (reverse l)))","problem":19,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":19,"code":"#(->> (count %)\n     (dec)\n     (nth %))","user":"5458a729e4b01be26fd74622"},{"code":"(fn [[head & tail]]\n  (if tail\n    (recur tail)\nhead))","problem":19,"user":"5070a7f5e4b0e3170b5a8675"},{"problem":19,"code":"(fn [lista] (-> lista reverse first))","user":"5d6f063de4b04d129b00f2d1"},{"problem":19,"code":"(fn\n  [[n & col]]\n  (if (empty? col)\n  n\n  (recur col))\n)","user":"579f3293e4b05302be0b72f9"},{"code":"(fn [x] (loop [h (first x) t (rest x)]\n (if (seq t)\n   (recur (first t) (rest t))\n    h)))","problem":19,"user":"50af3393e4b0a40c9cfb08d7"},{"problem":19,"code":"(fn [c] (first (take-last 1 c)))","user":"55e206f3e4b050e68259b429"},{"code":"(fn last-s [s]\n  (let [[h & t] s]\n    (if (nil? t)\n      h\n      (last-s t))))","problem":19,"user":"504ec4d3e4b069badc5a33c9"},{"problem":19,"code":"(fn getlastelement[x](first(reverse x)))","user":"555c7517e4b0b056612e224e"},{"problem":19,"code":"(fn \n      [seq]\n      (println seq)\n      (if (= (count seq) 1)\n      (first seq)\n      (recur (rest seq))))","user":"582c203ae4b051871117bf80"},{"problem":19,"code":"(fn somefn [arg] (loop [e arg] (if (empty? (rest e)) (first e) (recur (rest e)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn [x] (first (reverse x) ))","problem":19,"user":"5135a74ae4b04ac1f358dd46"},{"problem":19,"code":"#(if(next %) \n         (recur(next %))\n         (first %))\n\n#_\n#(loop[a %]\n   (if(next a) \n         (recur(next a))\n         (first a)\n     )\n   )\n\n;#(nth % (dec(count %)))\n\n;(comp first reverse)\n\n;(fn[x](first(reverse x)))\n\n;#(nth (drop (dec(count %)) %) 0)\n\n;#(nth (take-nth (dec(count %)) %) 1)\n\n;#(first (take-last 1 %))\n\n;#(loop[a 0 b %]\n;   (if(< a (dec(count %)))\n;         (recur(inc a)(drop 1 b))\n;         (first b)\n;     )\n;   )\n\n\n#_\n(fn f [x] (if (= 1(count x)) (first x) (f(next x))))\n\n#_\n#(loop[a 0 b %]\n   (if(< a (dec(count %)))\n         (recur(inc a)(next b))\n         (first b)\n     )\n   )","user":"5c683fb5e4b0fca0c16226d5"},{"problem":19,"code":"(fn [[first-item & more]] (if (= (count more) 1) (first more) (recur more)))","user":"5461873de4b01be26fd746a3"},{"problem":19,"code":"(comp first reverse) ;reduce (fn [a b] b)","user":"5dc0ca73e4b0e59a23173d82"},{"problem":19,"code":"(fn [l] (if (= (count l) 1) (first l)  (recur (rest l)) ))","user":"5a23c4b0e4b0ff51aa4b32de"},{"code":"(fn [s]\n  (if (= 1 (count s))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4ffa52fbe4b0678c553fc3bb"},{"problem":19,"code":"(fn [sequence]\n  (loop [to-consume sequence]\n    (if (= '() (rest to-consume))\n      (first to-consume)\n      (recur (rest to-consume)))))","user":"557775a3e4b05c286339e084"},{"problem":19,"code":"(fn [param] (nth (take-last 1 param) 0 ))","user":"59a7f3d1e4b0bcf4e9a43ae8"},{"problem":19,"code":"(fn [x] \n  (if(= (count x) 1) (first x) (recur (rest x))))","user":"5a9482b7e4b0d174b936c737"},{"code":"#(if (next %) (recur (rest %)) (first %))","problem":19,"user":"4e273301535deb9a81d77ef7"},{"problem":19,"code":"(fn [coll] (first (#(reverse coll))))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":19,"code":"#(nth %  (dec (count %)))","user":"5276d717e4b03e8d9a4a74ee"},{"code":"(fn [list] (if (next list) (recur (next list)) (first list)))","problem":19,"user":"4e5cddd6535d8a8b8723a2c5"},{"problem":19,"code":"(fn [x] \n  (-> x\n  (reverse)\n  (first)\n  ))","user":"5d389ebfe4b01671435dbd49"},{"code":"(fn [xs]\n  (if (empty? (rest xs)) (first xs)\n  (recur (rest xs))))","problem":19,"user":"4f038499535dcb61093f6b09"},{"problem":19,"code":"(fn getlast [xs]\n  (if (= (count xs) 1) (first xs) (getlast (rest xs))))","user":"59d9e66ae4b0ef0a1e9b5c60"},{"code":"(fn [x]\n  \t(if (= (count x) 1)\n  \t\t(first x)\n  \t\t(recur (rest x))))","problem":19,"user":"53504437e4b084c2834f4ad8"},{"problem":19,"code":"(fn [input]\n  (loop [in input\n         out nil]\n  (if (empty? in)\n    (first out)\n    (recur (rest in) in)\n    )\n  )\n)","user":"55c917a1e4b0e31453f649e9"},{"code":"(fn [li] (peek (vec li)))","problem":19,"user":"4fe9700fe4b0547ebccb245c"},{"code":"(comp \n    first reverse)","problem":19,"user":"52dea949e4b09f7907dd13f4"},{"code":"(fn [v] (#(nth v %) (dec (count v))))","problem":19,"user":"4e53bf5e535d8a8b8723a275"},{"problem":19,"code":"(fn [from] (nth from (- (count from) 1)))","user":"5600bed5e4b04bb52996e170"},{"code":"(fn [list]\n  (loop [x list duh nil]\n    (if (empty? x)\n      duh\n      (recur (rest x) (first x)))))","problem":19,"user":"4f0333f6535dcb61093f6a77"},{"problem":19,"code":"(fn my-last\n  [[head & tail]]\n  (if (nil? tail)\n    head\n    (my-last tail)))","user":"5a346d73e4b0ddc586f153c8"},{"problem":19,"code":"(fn lastElement [x] (first(reverse x)))","user":"55e7e598e4b050e68259b498"},{"code":"(fn [s] \n  (loop [t s]\n    (if (= 1 (count t))\n      (first t)\n      (recur (rest t)))))","problem":19,"user":"5044fde2e4b01f6c9a8b2366"},{"code":"(fn [coll] \n  (nth coll (- (count coll) 1)))","problem":19,"user":"4f043bbd535dcb61093f6bb2"},{"problem":19,"code":"(fn [input]\n  (let [[ head & tail ] input]\n  \t(if (nil? tail)\n    \thead\n    \t(recur tail))))","user":"55a016fde4b0acc240e314f1"},{"problem":19,"code":"(fn [x] (.get x (- (.count x) 1)))","user":"5772bd3be4b0979f896515cf"},{"code":"(fn [y] (loop [x y]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x)))))","problem":19,"user":"538c9144e4b0b51d73faae5d"},{"code":"#(first(reverse %1))","problem":19,"user":"4efe5f96535dc589f2b88d95"},{"problem":19,"code":"(fn lastelem [x] (nth x (- (count x) 1 )))","user":"58b4190be4b0ebc645576d30"},{"problem":19,"code":";(fn [[n & more]]\n;  (if more\n;    (recur more)\n;    n))\n\nreduce (fn [a b] b)","user":"5b15d56be4b0cc2b61a3be74"},{"problem":19,"code":"(fn [seq] \n  (nth seq (- (count seq) 1))\n  )","user":"5ac51c43e4b0e27600da773b"},{"problem":19,"code":"(fn [s]\n    (loop [a s]\n      (if (empty? (rest a))\n        (first a)\n        (recur (rest a))\n        )\n      )\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn [seq] \n  (cond\n    (next seq) (recur (next seq))\n    :else (first seq)))","problem":19,"user":"4fa820fde4b081705acca1ce"},{"problem":19,"code":"(fn z [xs] (if (= (count xs) 1) (first xs) (z (rest xs))))","user":"54b9a5b3e4b0ed20f4ff6eaf"},{"code":"(fn l [col] (if (= () (rest col)) (first col) (l (rest col))))","problem":19,"user":"4ec51590535d6d7199dd3683"},{"code":"(fn me [col] \r\n  (if (= (count (rest col)) 1) \r\n    (first (rest col))\r\n    (me (rest col))))","problem":19,"user":"4e18c553535d04ed9115e7f4"},{"problem":19,"code":"(fn[n](nth n (- (count n) 1)))","user":"553093bee4b076ab5578f817"},{"problem":19,"code":"(fn [s] (loop [s s]\n              (let [x (first s)\n                   r (rest s)]\n              (if (empty? r)\n                   x\n                   (recur r)))))","user":"5cd99946e4b05ee0cb311706"},{"code":"(fn [w] (first (reverse w)))","problem":19,"user":"52215fe1e4b0e6a83c8925cf"},{"problem":19,"code":"#(if (> (count %) 1)\n    (recur (rest %))\n    (first %)\n  )","user":"592018d2e4b09b4ee5954c55"},{"problem":19,"code":"(fn lasting [x] (nth x (- (count x) 1)))","user":"5d40f41ae4b05dd059a5436d"},{"code":"(fn last-element [x] (nth x (- (count x) 1)))","problem":19,"user":"51f687c2e4b06ff1c25c52cb"},{"code":"(fn [li] (nth li (dec (count li))))","problem":19,"user":"52d51024e4b09f7907dd1339"},{"code":"(fn [x]\n  (first(drop\n   (- \n    (count x)\n    1) x)))","problem":19,"user":"5047eadde4b0ec70b3ef8d94"},{"problem":19,"code":"(fn g [x] (first (reverse x)))","user":"58d5833be4b03c36ff7e595f"},{"code":"(fn [x] \n  (first \n    (reverse x)\n  )\n)","problem":19,"user":"4fe92767e4b0547ebccb2448"},{"problem":19,"code":"(\n  fn final [x] (\n               if (= (count x) 1) (first x) (final (rest x))\n  )\n)","user":"5f70b752e4b02876ed9fd080"},{"code":"(fn mylast [l]\n  (if (= (rest l) '())\n      (first l)\n      (mylast (rest l))))","problem":19,"user":"4ecaf637535d6d7199dd370c"},{"code":"(fn [x] (first (reverse x )))","problem":19,"user":"4fc60defe4b0ee37620e1807"},{"problem":19,"code":"(fn [l] (if (seq l) (nth l (dec (count l))) nil))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":19,"code":"#(nth % (dec (count %)))\n;#(first (reverse %))","user":"5f10982ee4b091ba50b4dba2"},{"problem":19,"code":"(fn get-last\n  [llist]\n  (if (= 1 (count llist))\n    (first llist)\n    (get-last (drop 1 llist))))","user":"595bc925e4b066ee0a44afe2"},{"problem":19,"code":"(fn [x] (if (next x) (recur (next x)) \n          (first x)))","user":"5cca7132e4b0ccb06196286f"},{"code":"#(first (reverse %))","problem":19,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [mylist] (loop [l mylist]\n  (if (empty? (rest l)) (first l)\n    (recur (rest l)))))","problem":19,"user":"4f0a5653535d0136e6c222f5"},{"code":"(fn lst-finder [x]\n  (if (= 1 (count x))\n    (first x)\n    (lst-finder (rest x))\n   )\n)","problem":19,"user":"4ee259a1535d10e5ff6f5366"},{"code":"#( first (reverse %)  )","problem":19,"user":"524aa2c9e4b05ef8e38e64b7"},{"problem":19,"code":"(fn [lst]\n  (nth lst (dec (count lst))))","user":"57f8151ce4b0d3187e900912"},{"problem":19,"code":"(fn f [x] (if (not (nil? (second x))) (f (rest x)) (first x)))","user":"59137b42e4b0163c97b36f04"},{"code":"#(first (drop (- (count %1) 1) %1))","problem":19,"user":"4f03b3fb535dcb61093f6b52"},{"problem":19,"code":"(fn get-last [lst]\n  (let [rst (rest lst)]\n    (if (empty? rst)\n      (first lst)\n      (get-last rst))))","user":"504e2d18e4b0f6ff3350c47a"},{"code":"(fn get_last [arg]\n         (let [tail (rest arg)]\n           (if (= '() tail)\n             (first arg)\n             (get_last tail))))","problem":19,"user":"5324aa9de4b09d4e7a9b54dd"},{"problem":19,"code":"(fn [[a & r]] (if r (recur r) a))","user":"5bc935bde4b07a9b28b100d8"},{"problem":19,"code":"(fn last-elem [[x & more]]\n  (if more\n    (recur more)\n    x))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":19,"code":"(fn [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (recur (rest lst))\n    )\n  )","user":"55c68089e4b0e31453f649c4"},{"problem":19,"code":"(fn [s]\n  (letfn [(my-last [s]\n             (let [r (rest s)]\n               (if (empty? r)\n                 (first s)\n                 (my-last r))))]\n    (my-last s)))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn llast [x] (if (= 1 (.size x)) (first x) (llast (rest x))))","problem":19,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn findLast [s] (let [[head & tail] s]\n         (if (seq? tail) (findLast tail) head)))","problem":19,"user":"5342144ae4b00652c8746ed3"},{"code":"#(nth % (- (count %) 1) )","problem":19,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn [a] (if (empty? (rest a)) (first a) (recur (rest a))))","problem":19,"user":"4fab0b6be4b081705acca20c"},{"problem":19,"code":"(fn get-last [a]\n  (if (empty? (rest a))\n    (first a)\n    (get-last (rest a))))","user":"541b41d1e4b01498b1a71a65"},{"problem":19,"code":"(fn [s] (nth s (-> s count dec)))","user":"55f6fe09e4b06e875b46cea2"},{"problem":19,"code":"(fn [coll]\n  (loop [f (first coll)\n         r (rest coll)]\n    (if (empty? r)\n      f\n      (recur (first r)\n             (rest r)))))","user":"56e2c62fe4b03a7c14b85a37"},{"code":"#( first (reverse % ) )","problem":19,"user":"52f90613e4b047fd55836fe1"},{"problem":19,"code":"(fn retaval [coll] (nth coll (- (count coll) 1)))","user":"58f602afe4b0438e51c2cee5"},{"code":"(fn lastof [arr] (if (= 1 (count arr)) (first arr) (lastof (rest arr))))","problem":19,"user":"525fea5ae4b03e8d9a4a7026"},{"problem":19,"code":"(fn [x] \n  (if (empty? (rest x)) (first x)\n    (recur (rest x))))","user":"567c63f6e4b05957ce8c61bb"},{"problem":19,"code":"(fn [x] (nth x (-  (count x) 1 ) ))","user":"556bbd08e4b09a3098a524f1"},{"code":"(fn [x] (loop [els x] (if (not (next els)) (first els) (recur (next els)))))","problem":19,"user":"5374cbf4e4b06d7f452d9e29"},{"code":"(fn fin\n  [xs]\n  (cond\n    (= 1 (count xs)) (first xs)\n    :else (fin (rest xs))))","problem":19,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":19,"code":"(fn mylast [s]\n  (first (reverse s)))","user":"568a13eae4b0dcc4269f4089"},{"problem":19,"code":"(fn [coll]\n  (loop [c coll]\n    (let [fst (first c)\n          rst (rest c)]                     \n      (if (empty? rst)\n        fst\n        (recur rst)))))","user":"60704214e4b069485764de24"},{"problem":19,"code":"(fn [v] (get (into [] v) (- (count (into [] v)) 1)))","user":"5526ecc4e4b0ffed3738f928"},{"code":"(fn [aseq]\n          (if-let [rem (seq(rest aseq))] \n                  (recur rem)\n                  (first aseq)))","problem":19,"user":"4e463703535dc968683fc4b2"},{"problem":19,"code":"(fn [s] (first (rseq (vec s))))","user":"55e59b67e4b050e68259b46f"},{"code":"#(peek(vec %))\n;#(first (reverse %))","problem":19,"user":"511937e1e4b055cfb310d494"},{"problem":19,"code":"(fn [x] (nth x (- (count x) 1)) )","user":"53f34a16e4b0742d9025b0f3"},{"problem":19,"code":"(fn [listi]\n  (nth (reverse listi) 0)\n)","user":"5e83a273e4b09a7a73c8bbbb"},{"problem":19,"code":"(fn [l] \n  (nth\n   l\n   (- (count\n    l) 1)))","user":"53cc0d51e4b00fb29b2212d5"},{"code":"( fn rec [x] ( if (= (rest x) '() ) (first x) (rec (rest x) ) ) )","problem":19,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn last-one [x] (if (= 1 (count x)) (first x) (last-one (rest x))) )","problem":19,"user":"4f05c087535dcb61093f6c00"},{"code":"(fn lst [x]\r\n  (if (empty? (rest x))\r\n    (first x )\r\n    (lst (rest x))))","problem":19,"user":"50c13f77e4b096f585049c3b"},{"code":"#(loop [c % elem (first %)] (if (empty? (rest c)) elem (recur (rest c) (first (rest c)))))","problem":19,"user":"50463347e4b011c5dfee771e"},{"code":"(fn getLast [x] \n  (if (= nil (second x))\n    (first x)\n    (getLast (rest x))))","problem":19,"user":"4fe610fde4b0e8f79898fece"},{"problem":19,"code":"(fn [x](nth x (dec (count x))))","user":"561bc8c8e4b064ca9f4b1688"},{"problem":19,"code":"(fn [Karte] \n\t(if (seq? Karte)\n\t\t(loop [Liste Karte\n\t\t\tResult nil]\n\t\t\t(if (empty? Liste)\n\t\t\t\t(first Result)\n\t\t\t\t(recur (pop Liste) Liste)))\n\t\t(get Karte (dec (count Karte)))))","user":"5b35de7be4b02d533a91bb97"},{"problem":19,"code":"(fn\n  [x]\n  (first (reverse x)))","user":"57b41969e4b0fbc9809a2790"},{"code":"(fn last-el[l]\n  (cond (empty? (rest l)) (first l)\n        :else (last-el (rest l))))","problem":19,"user":"534da51fe4b084c2834f4aa4"},{"problem":19,"code":"(fn [n] (first (reverse n )))","user":"5a99b844e4b0d174b936c7ab"},{"code":"reduce #( identity %2 )","problem":19,"user":"52dfe1d2e4b09f7907dd1406"},{"code":"#((comp (partial nth %) dec count) %)","problem":19,"user":"507fbd77e4b089ade05efbd3"},{"problem":19,"code":"(fn [x] (nth x ( - (count x) 1)))","user":"5585ff97e4b001b0851d7515"},{"code":"(fn [l] (if (vector? l) (peek l) (peek (reverse l))))","problem":19,"user":"4f6ce1b2e4b07046d9f4efc0"},{"problem":19,"code":"#(first\n  (reverse %))","user":"54ecb962e4b024c67c0cf856"},{"problem":19,"code":"#(loop [acc %] (if (empty? (rest acc)) (first acc) (recur (rest acc))))","user":"5720ba36e4b0c5bde472c09c"},{"problem":19,"code":"(partial reduce (fn [_ a] a))","user":"5a69e3efe4b0512ff01cda1a"},{"code":"(fn la [x] (if (empty? (rest x)) \r\n  (first x) \r\n  (la (rest x))))","problem":19,"user":"4df7cb14535d04ed9115e776"},{"problem":19,"code":"(fn [s] (nth s \n             (- (count s) 1)))","user":"4f47daade4b0d56e7bb92bc4"},{"problem":19,"code":"(fn my-last [l] (if (= (count l) 1) (first l) (my-last (rest l))))","user":"551c6bcee4b07993ea3788df"},{"problem":19,"code":"(fn [%]\n   (if (= (rest %) '()) (first %) (recur (rest %))))","user":"5f7603a8e4b02876ed9fd0ad"},{"problem":19,"code":"(fn [your-seq]\n  (nth your-seq (- (count your-seq) 1)))","user":"5a35d515e4b0ddc586f153e1"},{"problem":19,"code":"(fn last-element [l]\n  (cond \n   (= (count l) 1) (first l)\n    :else (last-element (rest l))\n  )\n)","user":"5716540fe4b07c98581c3af3"},{"code":"(fn [x] (loop [val (first x)\n               l (rest x)]\n          (if (empty? l)\n            val\n            (recur (first l)\n                   (rest l)))))","problem":19,"user":"52069491e4b0bf4f1882c82a"},{"problem":19,"code":";;(fn [items] (first (reverse items)))\n(fn [items] (reduce (fn [x y] y) items))","user":"5aa998c6e4b0d174b936c8e5"},{"code":"( fn get-last [x] ( first ( reverse x ) ) )","problem":19,"user":"4f6c9e1de4b07046d9f4efbd"},{"problem":19,"code":"(fn ultimo [lst]\n  (first (reverse lst)))","user":"5e978fe5e4b0157ca96647d1"},{"problem":19,"code":"(fn [ls]\n  (if-not (empty? ls)\n\t  (loop [ls ls]\n    \t(if-not (empty? (rest ls))\n          (recur (rest ls))\n          (first ls)))))","user":"5b2eaf1be4b025bcb146f2db"},{"problem":19,"code":"(fn [a] \n  (if (empty? (rest a)) \n    (first a)\n    (recur (rest a))))","user":"5655e056e4b0f9d632dd849b"},{"problem":19,"code":"(fn [l] (nth (drop (- (count l) 1) l) 0))","user":"5c3e7b04e4b08cd430848e83"},{"problem":19,"code":"(fn [aMap] (\n\tnth aMap (- (count aMap) 1 )\n))","user":"603a4837e4b0d5df2af222f6"},{"code":"(fn [x] \r\n  (if (= [] (rest x))\r\n    (first x)\r\n  (recur (rest x))))","problem":19,"user":"4eb6d3ab535d7eef30807370"},{"problem":19,"code":"(fn [s] \n  (loop [s s]\n    (if (= (count s) 1)\n      (first s)\n      (recur (rest s)))))","user":"5647ffdae4b0284900eef626"},{"problem":19,"code":"(fn [v] (first (drop (- (count v) 1) v)))","user":"5740e54de4b05c31a32c085c"},{"code":"(fn reverse-sequence [x] (first (reverse x)))","problem":19,"user":"4fc584a0e4b0ee37620e17f9"},{"code":"(fn [lst] (first (take-last 1 lst)))","problem":19,"user":"4f299ad8e4b0d6649770a02c"},{"problem":19,"code":"(fn mylast [[beg & tail]]\n  (if (= nil tail)\n    beg\n    (mylast tail)))","user":"54775b13e4b0c51c1f4d72b2"},{"problem":19,"code":"(fn get-last [l]\n  (if (empty? (rest l))\n    (first l)\n    (get-last (rest l))))","user":"5600d4ece4b04bb52996e173"},{"code":"(fn [x] (first (drop (- (count  x) 1) x)))","problem":19,"user":"516e2246e4b092a6408c5bc5"},{"problem":19,"code":"(fn [crap]\n  (-> crap\n      (reverse)\n      (first)))","user":"556371bae4b0c656e3ff17eb"},{"code":"(fn [xs] \n  (if (empty? (rest xs)) (first xs)\n    (recur (rest xs))))","problem":19,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [list] (if (nil? (seq (rest (rest list)))) (first (rest list)) (recur (rest list))))","problem":19,"user":"4e0bb9fb535d04ed9115e7b2"},{"problem":19,"code":"(fn last_element[s] (if (= '() (rest s)) (first s) (last_element (rest s))))","user":"55fb58b2e4b0f488688e0661"},{"problem":19,"code":"(fn rev [r] (first(reverse r)))","user":"5bd06861e4b0e9689409ee3a"},{"problem":19,"code":"(fn l [[a & r]] (if (nil? r) a (l r)))","user":"55e31aa8e4b050e68259b43f"},{"problem":19,"code":"#(loop [the-seq %]\n   (if (empty? (rest the-seq))\n     (first the-seq)\n     (recur (rest the-seq))))","user":"59a96a85e4b0bcf4e9a43b13"},{"code":"(fn [items]\n  (first (reverse items)))","problem":19,"user":"510cd1dde4b078ea71921124"},{"problem":19,"code":"(fn[args] (first (reverse args)))","user":"5721f13ce4b0c5bde472c0be"},{"code":"(fn end [[n & more]]\n  (if more\n    (recur more)\n    n))","problem":19,"user":"4fa3cb65e4b081705acca194"},{"problem":19,"code":"(fn my-last [lst] (first (reverse lst)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":19,"code":"(fn [[x & xs]]\n\t(loop [result x\n\t       temp xs]\n\t  (if (empty? temp)\n\t    result\n\t    (recur (first temp) (rest temp)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":19,"code":"(fn [[n & s]] (if s (recur s) n))","user":"5d9e3fd8e4b0eb781811cdbf"},{"problem":19,"code":"(fn [_list]\n  (loop [result nil\n         __list _list]\n    (if (empty? __list)\n      result\n      (recur (first __list) (rest __list)))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":19,"code":"#(loop [[c & others] %]\n   (if others\n     (recur others)\n     c))","user":"5bab5440e4b0a20761a23475"},{"problem":19,"code":"(fn my-last [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (my-last (rest coll))))","user":"584f1397e4b0b7285a6f4e5e"},{"problem":19,"code":"(fn [x] \n  (get (vec x) (- (count x) 1)))","user":"5dff635be4b0a607a9a45d15"},{"problem":19,"code":"reduce #(if (nil? %2) %1 %2)","user":"4dd57160535dae65d5c462e8"},{"problem":19,"code":"(fn find-end [x] (if (empty? (rest x)) (first x) (find-end (rest x))))","user":"53e92821e4b036ad0777e499"},{"problem":19,"code":"(fn lastItem [list] (\n    if (= (rest list) ())\n        (first list)\n        (lastItem (rest list))  \n))","user":"578d0ec0e4b0ebec4cfb7563"},{"problem":19,"code":"(fn listop [[x & y]] (if y (listop y) x))","user":"58f4fa7ee4b0438e51c2cecb"},{"problem":19,"code":"(fn lastn [x]\n  (if (= nil (seq (rest x)))\n    (first x)\n    (lastn (rest x))\n))","user":"5e7374ace4b085ba37836dd0"},{"code":"(fn lst [sequence] (first (reverse sequence)))","problem":19,"user":"50afd178e4b0c3f5ed5c29a4"},{"code":"(fn lasty [x] (if (next x) (recur (rest x)) (first x)))","problem":19,"user":"532c0507e4b09d4e7a9b553c"},{"code":"(fn my-last [ls]\n  (if (= `() (rest ls))\n      (first ls)\n      (my-last (rest ls))))","problem":19,"user":"4feb055ae4b0140c20fb9c14"},{"problem":19,"code":"#(if (= (next %) nil) (first %) (recur (next %)))","user":"58e0376ce4b0a4d5acaab732"},{"code":"(fn [col]\n  (-> col reverse first))","problem":19,"user":"53572767e4b04ce2eb3ed277"},{"code":"(fn last-element\n  [seq]\n  (if (empty? seq) nil\n    (loop [s (rest seq) el (first seq)]\n      (if (empty? s)\n        el\n        (recur (rest s) (first s))))))","problem":19,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":19,"code":"(fn lst [x] (if \n             (= (rest x) '())\n             (first x)\n             (lst (rest x))\n            )\n    )","user":"58711e7be4b01531a375e9f9"},{"problem":19,"code":"(fn [a]\n  (nth a (- (count a) 1)))","user":"53d43a0fe4b00fb29b221335"},{"problem":19,"code":"(fn [l]\n  (loop [t l]\n    (if (<= (count t) 1)\n      (first t)\n      (recur (rest t)))))","user":"5457583ee4b01be26fd7460a"},{"problem":19,"code":"(fn [l] (reduce (fn [a b] b) nil l))","user":"541c47bbe4b01498b1a71a72"},{"code":"(fn [x] (nth x (- (count x) 1) ) )","problem":19,"user":"52e8ecbbe4b09f7907dd14a0"},{"problem":19,"code":"(fn [x] \n  (reduce (fn [a b] b) x))","user":"57904341e4b0ebec4cfb75a8"},{"code":"(fn mylast [xs] (if (= (count xs) 1) (first xs) (mylast (rest xs))))","problem":19,"user":"4fabc896e4b081705acca21f"},{"problem":19,"code":"(fn [seq] (loop [[f & rest] seq] (if (empty? rest) f (recur rest))))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn reclast [s]\n  (if (empty? (rest s))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [s]\n  (first (reverse s)))","problem":19,"user":"4f1473eb535d64f603146439"},{"problem":19,"code":"(fn [v] \n  (loop [vv v]\n  \t(if (empty? (rest vv))\n      (first vv)\n      (recur (rest vv)))))","user":"549931fbe4b0b312c081ff8a"},{"problem":19,"code":"(fn get-last [s] (if (= (count s) 1)\n            \t\t\t(first s)\n          \t\t\t(get-last (rest s))))","user":"56cb0c8fe4b0ea9b8538f724"},{"code":"( fn [x] (nth x (- (count x) 1 )))","problem":19,"user":"531213ebe4b08068f379ecf1"},{"code":"(fn [l](first (reverse l)))","problem":19,"user":"529e90b7e4b04e0c58e87b9a"},{"code":"(fn [l]\n  (loop [xs l]\n    (if \n      (empty? (rest xs))\n      (first xs)\n      (recur (rest xs)))))","problem":19,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn [xs] (-> xs (reverse) (first)))","problem":19,"user":"5004034ce4b0678c553fc447"},{"code":"(fn [n] (first (take-last 1 n)))","problem":19,"user":"50e4adfde4b0cb9ec68fbca5"},{"problem":19,"code":"(fn last2 [seq] (first (reverse seq)))","user":"567f71cee4b0feffd0d18ebd"},{"code":"(fn f [seq](if (= (count seq) 1) (first seq) (f (rest seq))))","problem":19,"user":"53307a23e4b019098a6f8b5d"},{"code":"(fn [l]\n    (loop [l l previous nil]\n    (if (empty? l)\n        previous\n        (recur (rest l) (first l)))))","problem":19,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":19,"code":"(fn [input]\n   (loop [i 0] \n     (if (>= i (count input)) \n       (nth input (- i 1)) \n       (recur (inc i) )\n       ) \n     ) \n)","user":"54ccf9d5e4b057c6fda3a295"},{"code":"(fn getlast [x] (if (> (count x) 1)\n                  (getlast (rest x))\n                  (first x)))","problem":19,"user":"4ea84ff8535d7eef308072f7"},{"code":"(partial reduce #(identity %2))","problem":19,"user":"4ed00953535d44c135fd68c2"},{"problem":19,"code":"(fn [xs]\n  (if (= 1 (count xs)) \n    (first xs)\n    (recur (rest xs))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn [x] \n  (if (nil? (next x)) (first x) (recur (next x))))","problem":19,"user":"50eb40bfe4b0346a3e988cbe"},{"code":"(fn ultimo [x] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"4e8a0741535d3e98b802328b"},{"code":"(fn [in-seq]\r\n  (let [f (fn [fi se]\r\n    (if se se fi))]\r\n(reduce f in-seq)))","problem":19,"user":"4ddcabcb535d6ebe9be03f52"},{"problem":19,"code":"(fn last'\n  [l]\n  (if (empty? (rest l)) \n    (first l)\n    (last' (rest l))))","user":"56e8ef93e4b04a395b9a03f4"},{"problem":19,"code":"(fn [lat]\n  (if (empty? (rest lat))\n    (first lat)\n    (recur (rest lat))))","user":"5f90aeefe4b0715f5002d799"},{"problem":19,"code":"(fn lastp [xs] (if (empty? (rest xs))\n                   (first xs)\n                   (lastp (rest xs))\n                 )\n)","user":"54c26408e4b045293a27f600"},{"problem":19,"code":"(fn\n  [array]\n  (if (get array(- (count array) 1))\n    (get array(- (count array) 1))\n    (nth array(- (count array) 1))))","user":"56451201e4b0284900eef600"},{"code":"#(loop [lv %] (if (> (count lv) 1) (recur (rest lv)) (first lv)))","problem":19,"user":"4de6c970535d08e6dec9fdf6"},{"code":"(fn [x]\n  (first(reverse x))\n)","problem":19,"user":"4eb82088535d7eef30807380"},{"problem":19,"code":"(fn [sq]\n  (let [scnd (fn [a b] b)]\n    (reduce scnd sq)))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [col]\n  (if-let [n (next col)]\n    (recur n)\n    (first col)))","problem":19,"user":"5041bdf3e4b06d8231e4fad0"},{"code":"(fn [s] (if (= 1 (count s)) (first s) (recur (rest s))))","problem":19,"user":"4f0ad052535d0136e6c222f9"},{"problem":19,"code":"#(let [s %]\n   (if (next s)\n       (recur (next s))\n       (first s)\n   )\n)","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":19,"code":"(fn l [x] (if (empty? (rest x)) (first x) (l (rest x))))","user":"5897dda4e4b00487982d52c8"},{"code":"(fn [xs]\n  (first\n    (take-last 1 xs)))","problem":19,"user":"5014d131e4b08fbe1e50b8bc"},{"problem":19,"code":"(fn\n  [x]\n  (loop\n    [x x]\n    (if (seq (rest x))\n      (recur (rest x))\n      (first x))))","user":"573337c3e4b0cd1946bd0feb"},{"problem":19,"code":"(fn [l] (loop [xs l x 0] (if (empty? xs) x (recur (rest xs) (first xs)))))","user":"5f41f28ae4b0955706451fad"},{"problem":19,"code":"(fn [z] (nth z (- (.size z) 1)))","user":"54d82f2be4b0a52adc2e2037"},{"problem":19,"code":"(fn [seqs]\n  (let [fi (first seqs) li (rest seqs)]\n    (if (empty? li) fi (recur li))))","user":"5fa12616e4b0715f5002d84f"},{"code":"(fn get-last\n  [xs]\n  (let\n    [[x & tail] (seq xs)]\n    (if (empty? tail) x (get-last tail))))","problem":19,"user":"529dd5a4e4b04e0c58e87b82"},{"problem":19,"code":"(fn [s] \n    (first (reverse s)))","user":"5c862d0ae4b0c8042a70ce8c"},{"problem":19,"code":"#(if-let [x (next %)] \n   \t(recur x)\n   \t(first %))","user":"54a96a15e4b09f271ff37cad"},{"problem":19,"code":"(fn last' [x]\n  (if (<= (count x) 1)\n    (first x)\n    (last' (rest x))))","user":"5fc132c7e4b0edf42a5593cb"},{"problem":19,"code":"(fn foo \n  [x] \n  (if (= (next x) nil) \n    (first x) \n    (foo (rest x))))","user":"591e1dc7e4b09b4ee5954c2a"},{"code":"(fn [x] (let [r (rest x)] (if (empty? r) (first x) (recur r)) ) )","problem":19,"user":"4fe9cea4e4b0547ebccb2471"},{"code":"#(first (reverse  %))","problem":19,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"#(loop [s % seen nil] \n  (if (first s) \n      (recur (rest s) (first s))\n      seen))","problem":19,"user":"4e94ea73535dbda64a6f6b2b"},{"code":"(fn f [x]\n    (if (= (count x) 1)\n        (first x) \n      (f (rest x))))","problem":19,"user":"536b5feee4b0243289761eba"},{"problem":19,"code":"( fn [x] (first (reverse x)))","user":"5841872be4b089d5ab817e06"},{"problem":19,"code":"(fn [coll]\r\n  (if (next coll)\r\n      (recur (next coll))\r\n      (first coll)))","user":"5e3f2720e4b01d43a70e8e32"},{"problem":19,"code":"(fn fName [x] (\n             \tcond\n         \t\t(empty? (rest x)) (first x)\n         \t\t:else (fName (rest x))))","user":"5cb79c51e4b026601754b970"},{"code":"(fn last_element [x] (nth x (- (count x) 1)))","problem":19,"user":"4fb0c8dde4b081705acca26d"},{"problem":19,"code":"#((comp first reverse) %1)","user":"567476bde4b05957ce8c6139"},{"problem":19,"code":"(fn [seq] \n  (if (nil? (next seq)) \n    (first seq)\n    (recur (next seq))))","user":"5c7d590ae4b0d597f478caaa"},{"code":"(fn [l] \n    (reduce (fn [a b] b) l))","problem":19,"user":"4f1de175535d64f60314648f"},{"problem":19,"code":"(fn findLast [items]\n  (first (reverse (into [] items))\n  )\n  )","user":"5ac741d6e4b0e27600da777d"},{"code":"(fn [L](if-not (nil? L) (first (reverse L)) nil  ))","problem":19,"user":"4e6ff01e535d5021c1a8962b"},{"problem":19,"code":"(fn z [s] (if (next s) (z (next s)) (first s) ))","user":"572ac718e4b0f4d77e651242"},{"problem":19,"code":"(fn [coll]\n  (reduce (fn [result element] element) coll))","user":"5aedaab9e4b0cc2b61a3bc1c"},{"code":"(fn [list] (reduce (fn [_ x] x) list))","problem":19,"user":"4fef439ce4b0678c553fc313"},{"problem":19,"code":"(fn [y] (reduce (fn [x, a] a) 0 y))","user":"5df8e717e4b0a607a9a45cae"},{"code":"(fn [items]\n  (loop [[head & tail] items]\n     (if (empty? tail)\n       head\n       (recur tail))))","problem":19,"user":"53936394e4b0b51d73faaebb"},{"problem":19,"code":"(fn [coll]\n  (loop [[item & remaining] coll]\n    (if (empty? remaining)\n      item\n      (recur remaining))))","user":"5bb6cf4be4b0a20761a23593"},{"code":"(fn blah [s]\n  (let [s (seq s)\n        r (next s)]\n    (if (nil? r)\n      (first s)\n      (blah r))))","problem":19,"user":"501577ade4b0aaedd199e911"},{"code":"(fn [s] (if (next s)(recur (next s)) (first s)))","problem":19,"user":"4ef2d6c5535dced4c769f222"},{"problem":19,"code":"(fn get-last [x] \n  (if (= (count x) 1)\n    (first x)\n    (get-last (rest x))))","user":"59d68f3fe4b0ef0a1e9b5c1e"},{"problem":19,"code":"(fn find-last [items] (nth items (- (count items) 1)))","user":"5513dec7e4b055c2f668d4cd"},{"problem":19,"code":"(fn [coll]\n  (loop [[first & rest] coll]\n    (if (nil? rest)\n      first\n      (recur rest))))","user":"56557d2de4b0f9d632dd8498"},{"problem":19,"code":"(fn [lst] (letfn [(last-element [lst el] (if (empty? lst) el (recur (rest lst) (first lst))))] (last-element (rest lst) (first lst))))","user":"58bf1cf8e4b021aa9917eccf"},{"problem":19,"code":"(fn [[x & r]] (if (= r nil) x (recur r)))","user":"554ae65de4b0a04f7929957b"},{"code":"(fn [s] (loop [s s] (if-let [s (next s)] (recur s) (first s))))","problem":19,"user":"4dac61e18cc9d6edb9beb0b3"},{"code":"(fn [s] \n  (if (next s)        \n    (recur (next s))          \n    (first s)))","problem":19,"user":"4f85ce23e4b033992c121c4a"},{"code":"(fn newlast [x] (first (reverse x)))","problem":19,"user":"4f036517535dcb61093f6a9f"},{"code":"(fn [list] \n  (let [v (vec list)]\n\t (get v (- (count v) 1))))","problem":19,"user":"529ca7dae4b04e0c58e87b67"},{"problem":19,"code":"(fn [col] \n  (loop [c col result (first col)] (if (seq c) (recur (next c) (first c)) result)))","user":"54d187b7e4b0e8a36923e5e4"},{"problem":19,"code":"#(loop [input %] (if (empty? (rest input)) (first input) (recur (rest input) )))","user":"566f0ff6e4b0a866af6896e5"},{"problem":19,"code":"(fn [sq]\n  (nth sq (- (count sq) 1)))","user":"530d1060e4b08068f379eca2"},{"problem":19,"code":"(fn [col]\n  (loop [h (first col)\n         t (rest col)]\n    (if (empty? t)\n      h\n      (recur (first t) (rest t)))))","user":"5fb9075ee4b03f550f448224"},{"problem":19,"code":"(fn [y] (nth y (- (count y) 1)))","user":"562814dce4b00e49c7cb47de"},{"problem":19,"code":"reduce (fn [_ v] v)","user":"57b5c0dee4b0fbc9809a27b0"},{"code":"(fn [x]  (first (reverse x)) )","problem":19,"user":"52c70943e4b0c2d177d6211c"},{"problem":19,"code":"(fn mylast [inputs] \n  (let [[tip & ends] inputs ]\n    (if (= ends nil)\n      tip \n      (mylast ends ))))","user":"52654e92e4b03e8d9a4a7109"},{"code":"(fn [seq] (if (= (count seq) 1) (first seq) (recur (next seq))))","problem":19,"user":"51455e14e4b0e88796073407"},{"problem":19,"code":"(fn mylast [ls]\n  (if (empty? (rest ls))\n  \t(first ls)\n  \t(mylast (rest ls))))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn foo [x]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4eb66737535d7eef3080736b"},{"problem":19,"code":"(fn last1 [s]\n  (if (= (count s) 1)\n    (first s)\n    (last1 (rest s))))","user":"5776f39de4b0979f89651643"},{"problem":19,"code":"(fn last-char [x] (nth x (- (count x) 1)))","user":"545a7991e4b01be26fd7463e"},{"problem":19,"code":"(fn [seq-num] (first(reverse seq-num)))","user":"5ed08785e4b016b56eae05b1"},{"problem":19,"code":"#(loop [[e & r] %] (if (empty? r) e (recur r)))","user":"53ab1ef6e4b047364c04444b"},{"code":"(fn ^:static foo [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4eeb2168535d93acb0a668a5"},{"code":"#(\n  if (empty? (rest %))\n    (first %)\n    (recur (rest %)))","problem":19,"user":"4fab0c0ae4b081705acca20d"},{"code":"(fn [n] (if (> (count n) 1)\n    (recur (rest n))\n    (first n)))","problem":19,"user":"504663bbe4b011c5dfee7721"},{"problem":19,"code":"(fn [coll] (.get coll (- (count coll) 1) ))","user":"58694f69e4b0f14aab7c889f"},{"code":"reduce (fn [x y] (identity y))","problem":19,"user":"537d0151e4b06839e8705e84"},{"code":"(fn [coll] \n  (loop [elem nil collec coll] \n    (if (seq collec)\n      (recur (first collec) (rest collec)) \n      elem)))","problem":19,"user":"5343f3dae4b084c2834f4a23"},{"code":"(fn end [x] (if (not-empty (rest x)) (end (rest x)) (first x)))","problem":19,"user":"504f2d4fe4b0e7ad84dbc4c6"},{"problem":19,"code":"(fn\n  [coll]\n  (nth coll (- (count coll) 1)))","user":"5acd235ae4b0e27600da7824"},{"problem":19,"code":"(fn last_number [x] (nth x (- (count x) 1)))","user":"57fa4d60e4b0d3187e90095f"},{"code":"(fn lst [x] (if (= (second x) nil) (first x) (lst (rest x))))","problem":19,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn [a]\n  (nth a (dec (count a))))","problem":19,"user":"4f039c67535dcb61093f6b3a"},{"code":"(fn [[f & r]]\n  (if r\n    (recur r)\n    f))","problem":19,"user":"5390952be4b0b51d73faae9c"},{"problem":19,"code":"(fn get-last [l] (if (empty? (rest l))\n                   (first l)\n                   (get-last (rest l))))","user":"562b8613e4b058fa18c5a6cd"},{"code":"(fn [map] (first (reverse map)))","problem":19,"user":"5003bb77e4b0678c553fc442"},{"problem":19,"code":"(fn [lst]\n  (reduce (fn [x y] y) nil lst))","user":"548b0c29e4b0e286459a11fa"},{"problem":19,"code":"(fn kek [x] (.get x (dec (count x))))","user":"5b5d044be4b0c6492753e6c6"},{"code":"(\n \tfn [coll]\n \t\t(\n         \tnth coll (-(count coll)1)\n        )\n )","problem":19,"user":"529678ace4b02ebb4ef75031"},{"code":"(fn [[h & t]]\n  (if (seq t)\n    (recur t)\n    h))","problem":19,"user":"50a7f2a8e4b090657f4a5ce1"},{"problem":19,"code":"reduce (fn [acc val] (if (nil? val) acc val))","user":"5d8211a6e4b0915913b1d37e"},{"code":"(fn lastelement [x] (first (reverse x)))","problem":19,"user":"4e697e41535d8ccf87e9fe9c"},{"code":"#(first (reverse (seq %)))","problem":19,"user":"4ef355e3535dced4c769f228"},{"code":"(fn [x] ((comp first reverse)x))","problem":19,"user":"519c5a08e4b0a1d87b00345b"},{"problem":19,"code":"#((if (list? %) nth get) % (- (count %) 1))","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"#(let [[a] (drop (dec (count  %)) %)] a)","problem":19,"user":"4f528f70e4b03ad3f0c10d3f"},{"problem":19,"code":"(fn [lst]\n  (let [smaller (rest lst)] \n    (if (empty? smaller) \n      (first lst) \n      (recur smaller))))","user":"5243233fe4b076204b44faac"},{"code":"(fn get-last [s]\n  (if (= () (rest s))\n    (first s)\n    (get-last (rest s))))","problem":19,"user":"4fbc0011e4b081705acca2f0"},{"code":"(new clojure.core$last)","problem":19,"user":"4e3b6bff535deb9a81d77f52"},{"code":"#(nth % \r\n  (- (count %) 1)\r\n)","problem":19,"user":"4f21798de4b0d66497709fd1"},{"problem":19,"code":"(fn [seqq] (reduce (fn [x,y] y) seqq))","user":"57718d9fe4b0979f896515b6"},{"problem":19,"code":"(fn [x] (let[r (rest x)] (if (= 0 (count r)) (first x) (if(= 1 (count r)) (first r) (recur r)))))","user":"5b0b381be4b0cc2b61a3bdd2"},{"problem":19,"code":"(fn getLast[x] (nth x (- (count x) 1)))","user":"53f1dbede4b0742d9025b0e4"},{"code":"(fn [l]\n    (if (== 1 (count l)) (first l) (recur (rest l))))","problem":19,"user":"534eb9bbe4b084c2834f4abb"},{"code":"(fn [xs] \n  (if (empty? (rest xs)) \n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"502eba4be4b06efe12e8cc77"},{"problem":19,"code":"(fn [cs] (first (reverse cs)))","user":"5bb8b53ee4b0a20761a235c0"},{"code":"(fn [lst]\n  (loop [[fst & rst] lst]\n    (if (empty? rst)\n      fst\n      (recur (rest rst)))))","problem":19,"user":"4feb1888e4b0140c20fb9c15"},{"code":"(fn [collection] (first (reverse collection)))","problem":19,"user":"4e723bcb535d5021c1a8965c"},{"code":"(fn [xs] (first (drop (dec (count xs)) xs)))","problem":19,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"(fn last1 [s]\n  (if (empty? (rest s)) (first s) (last1 (rest s))))","problem":19,"user":"4ed489c9535d10e5ff6f52ce"},{"code":"(fn [x]\n\t(if (empty? (rest x)) \n\t\t\t(first x) \n\t\t\t(recur (rest x))))","problem":19,"user":"51794ec2e4b0684c1c981a45"},{"problem":19,"code":"( fn last-element [xs]\n  (let [ys (rest xs)]\n  \t(if (empty? (rest xs)) (first xs) (last-element ys))\n  )\n)","user":"5c66e69fe4b0fca0c16226b0"},{"problem":19,"code":"(fn [s]\n   (if-not (next s)\n     (first s)\n     (recur (next s))))","user":"4e6459af535d8ccf87e9fe6b"},{"code":"#(if (empty? (rest %)) (first %) (recur (rest %)))","problem":19,"user":"4e4bd94b535dc968683fc4d7"},{"problem":19,"code":"(fn my-rest [a-seq] \n  \t(cond\n     \t(empty? (rest a-seq)) (first a-seq) \n     \t:else (recur (rest a-seq))))","user":"5bb3b77de4b0a20761a2352e"},{"problem":19,"code":"(fn f [l]\n  (let [xs (rest l)\n        x (first l)]\n    (if\n     (empty? xs) x\n      (f xs))))","user":"55ad0e18e4b03311e7b7329c"},{"problem":19,"code":"(fn [seq] \n  (if (empty? (rest seq))\n  \t(first seq)\n   (recur (rest seq))))","user":"555c78abe4b0b056612e224f"},{"problem":19,"code":"(fn my-last [sq]\n  (if (nil? (next sq))\n    (first sq)\n    (my-last (next sq))))","user":"54ae541ae4b09f271ff37cef"},{"problem":19,"code":"(fn [seq] (nth seq(- (count seq) 1)))","user":"5643aed5e4b0018b46ad8bfd"},{"code":"(fn [x & prev] (if (= 0 (count x))\r\n               prev\r\n               (recur (rest x) (first x))\r\n              )\r\n)","problem":19,"user":"4fa47044e4b081705acca19e"},{"problem":19,"code":"(fn [coll] (->> (count coll) dec (nth coll)))","user":"53ac0e52e4b047364c044457"},{"code":"(fn [l] (nth l (- (count l) 1)) )","problem":19,"user":"511a0374e4b06c8af011181a"},{"code":"(fn l [x] (let \n             [head (first x) \n              tail (rest x)]\n            (if (empty? tail) head (l tail))\n          )\n)","problem":19,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":19,"code":"(fn foo [x]\n  (if (not= (count x) 1)\n  (do \n  \n  (foo (rest x))\n  )\n  (do\n  (first x)\n    \n  )\n  )\n  \n)","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"#(loop [leftover %]\n   \t(if (empty? (rest leftover)) (first leftover)\n      \t(recur (rest leftover))))","problem":19,"user":"528e7740e4b0239c8a67aee0"},{"code":"(fn [coll] \n  (loop [xs coll acc 0]\n    (if (nil? xs)\n      acc\n      (recur (next xs) (first xs)))))","problem":19,"user":"515c1f12e4b069911535cf06"},{"problem":19,"code":"(fn [lst]\n   (loop [lst lst\n          aux 0]\n     (if (empty? lst)\n       aux\n       (recur (rest lst) (first lst)))))","user":"57f81524e4b0d3187e900913"},{"problem":19,"code":"(fn last_element [x] (first (reverse x)))","user":"5b8e3e81e4b0c0b3ffbd49e1"},{"code":"(fn [xs] (loop [ys xs] (if (empty? (rest ys)) (first ys) (recur (rest ys)))))","problem":19,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":19,"code":"(fn my-last [list]\n  (let [[h & r] list] (if (= r nil) h (my-last r))))","user":"569cb5d9e4b0542e1f8d146a"},{"problem":19,"code":"(fn [x]\n  (let\n    [i (- (count x) 1)]\n    (nth x i)))","user":"5a292efde4b07f18be40aa77"},{"problem":19,"code":"(fn [x]\n  (loop [result (first x)\n         remaining (rest x)]\n    (if (empty? remaining)\n      result\n      (recur (first remaining) (rest remaining)))))","user":"4f9e830ae4b0dcca54ed6d2c"},{"code":"(fn [x]\n  (first (filter #(not ((set (drop-last x)) %)) x)))","problem":19,"user":"50706287e4b07bd6ad9b9f2b"},{"problem":19,"code":"(fn laste [x]\n  (if (= (count x) 1)\n    (first x)\n    (laste (rest x))))","user":"5a18e311e4b0ff51aa4b31f6"},{"problem":19,"code":"(fn a [lst] (first (reverse lst)))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [par]\n  (let [len (count par)]\n  \t\t(nth par (- len 1))))","problem":19,"user":"530837c7e4b02e82168697ae"},{"problem":19,"code":"(fn my-last [x]\n  (let [the-rest (rest x)]\n    (if (= the-rest ())\n      (first x)\n      (my-last (rest x)))))","user":"55d7d139e4b0e31453f64aaa"},{"problem":19,"code":"(fn [zeq]\n  (if (empty? zeq) \n    ([]) \n    (if-let \n      [tail (empty? (rest zeq))]  \n      (first zeq) \n      (recur (rest zeq))\n     ) \n   )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"problem":19,"code":"(fn lastElement[[n & m]]\n  (if m\n    (recur m)\n    n))","user":"56244b3ae4b0b951f963fc22"},{"problem":19,"code":"(fn lastElement [s] (nth s (dec (count s))))","user":"5ebdaeabe4b00a66d4a95274"},{"code":"#(reduce (fn [acc x] x) %)","problem":19,"user":"530e74c9e4b08068f379ecb9"},{"code":"(fn [n]\n  (if (> (count n) 1)\n    (recur (rest n))\n    (first n)))","problem":19,"user":"4f6fb921e4b07046d9f4efea"},{"code":"#(reduce (fn [memo value] value) %)","problem":19,"user":"51e58e02e4b0efabf93c02d0"},{"problem":19,"code":"(fn [xs]\n  (loop [xs xs]\n    (if (empty? (rest xs))\n      (first xs)\n      (recur (rest xs)))))","user":"573d9cd1e4b05c31a32c0816"},{"problem":19,"code":"(fn foo [ls]\n  (if (empty? (rest ls)) (first ls) (foo (rest ls))))","user":"59e763c9e4b0249b72820713"},{"problem":19,"code":"#(loop [[s & xs] %] (if (nil? xs) s (recur xs)))","user":"54924f64e4b0b312c081ff42"},{"code":"(fn my-last [x] (nth x (dec (count x))))","problem":19,"user":"4f611127e4b0defedf855fb4"},{"problem":19,"code":"(fn last-elem [[n & more]]\n  (if more\n    (recur more)\n    n))","user":"55452f7de4b0a04f7929952f"},{"code":"(fn [array] (nth array (- (count array) 1)))","problem":19,"user":"520f46f9e4b0101e4be6fcee"},{"problem":19,"code":"(fn my-last [list]\n  (cond \n   (empty? (rest list)) (first list)\n   :else (my-last (rest list))))","user":"55580ef1e4b0deb715856e28"},{"problem":19,"code":"reduce #(if true %2)","user":"55ed962ae4b0121d4835fddd"},{"code":"(fn get-last [xs] (first (reverse xs)))","problem":19,"user":"4f9d9d89e4b0dcca54ed6d25"},{"problem":19,"code":"(fn [v] (get (into [] v) (- (count v) 1)))","user":"57f4ace3e4b07bbd65c32b2b"},{"code":"(fn myLast [xs] (if (> (count xs) 1) (myLast (rest xs)) (first xs)))","problem":19,"user":"4fab21b2e4b081705acca211"},{"code":"(fn[a] (nth a (- (count a) 1)))","problem":19,"user":"4ff990f4e4b0678c553fc3a9"},{"problem":19,"code":"(fn [l] \n  (first (reverse l)))","user":"5cbe5fdfe4b0ccb061962750"},{"code":"(fn [x]\n  (nth x (dec (count x))))","problem":19,"user":"504f9ae1e4b0a02f9cffde9c"},{"problem":19,"code":"(fn [coll]\n  (loop [[head & tail] coll]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn [x] (if (nil? (next x)) (first x) (recur (next x))))","problem":19,"user":"4fe5895be4b0e8f79898fec6"},{"problem":19,"code":"(fn lst [l]\n    (if (empty? (rest l))\n      (first l)\n      (lst (rest l))))","user":"4f867b25e4b033992c121c51"},{"code":"#(if (empty? (rest %))\n    (first %)\n    (recur (rest %)))","problem":19,"user":"517b9c82e4b0e963dd819c99"},{"problem":19,"code":"(fn [params]\n(loop [x params]\n  (if (nil? (second x)) (first x) (recur (rest x)))))","user":"5bcee7d9e4b0e9689409ee22"},{"problem":19,"code":"(fn mylast [mylist]\n   (if (empty? (rest mylist))\n     (first mylist)\n     (mylast (rest mylist)))\n   )","user":"589e22fae4b02bd94d917e56"},{"problem":19,"code":"(fn [coll] (reduce (fn [head & tail] (first tail)) coll))","user":"5637b1ede4b0bfe05bf117dd"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (empty? tail)\n    head\n    (recur (rest tail))))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn\n  [coll]\n  (nth coll (dec (count coll))))","problem":19,"user":"510591dde4b06d28cacc92eb"},{"problem":19,"code":"(fn lazt [a] (nth a (dec (count a))))","user":"544cf5d7e4b0e39780006977"},{"problem":19,"code":"(fn [s]\n  (-> s reverse first))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":19,"code":"(fn [x] (get (into [] x) (- (count x) 1)))","user":"58875f4de4b0f1effa3b76f7"},{"problem":19,"code":"(fn [seq] (loop [suffix seq] (if (empty? (rest suffix)) (first suffix) (recur (rest suffix)))))","user":"5e1cc888e4b0dc959400853d"},{"problem":19,"code":"(fn my-last [[head & tail]]\n    (if (not tail)\n      head\n      (my-last tail)))","user":"5e62444fe4b0fd0acd158694"},{"problem":19,"code":"(fn lastone [xs] (first (reverse xs)))","user":"560aa7b0e4b05f002753df02"},{"problem":19,"code":"(fn f1 [[first & rest]]\n  (if (= rest nil)\n     first\n    (f1 rest)\n  ))","user":"5ebb4751e4b00a66d4a95262"},{"problem":19,"code":"#(reduce + (drop (- (count %) 1) %))","user":"60195030e4b0bf4ca6b10920"},{"problem":19,"code":"(fn [x] (if (list? x) (nth x (- (count x) 1) ) (get x (- (count x) 1)) ) )","user":"567f034be4b0feffd0d18eba"},{"code":"(fn last-elem [x]\n  (first (reverse x)))","problem":19,"user":"4f1e0b39535d64f603146492"},{"problem":19,"code":";#(peek (vec %))\n;#(nth (vec %) (dec(count (vec %))) ) \n;#(nth % (dec(count %))) \n#(nth % (- (count %) 1))","user":"59c77511e4b0a024fb6ae545"},{"problem":19,"code":"#(let [coll %] (first (drop (- (count coll) 1) coll)))","user":"56c2932fe4b05cc29241ee83"},{"problem":19,"code":"(fn [x] (nth x (- (count x) 1 )))","user":"544808e2e4b032a45b8693c5"},{"code":"(fn lastelement [s]\n  (let [r (reverse s)]\n    (first r)))","problem":19,"user":"535afd76e4b04ce2eb3ed2ab"},{"problem":19,"code":"#(if (seq (rest %)) (recur (rest %)) (first %))","user":"53c63db5e4b00fb29b221296"},{"problem":19,"code":"(fn get-last [sequ]\n  \"returns last element\"\n  (let [fe (first sequ)\n        re (rest sequ)]\n      (if (seq re)\n        (get-last re)\n        fe)))","user":"591eec2ae4b09b4ee5954c41"},{"code":"(fn mylast [items] \n  (let [therest (rest items)]\n  (cond\n  \t(empty? therest)\n    (first items)\n    :else (mylast therest))))","problem":19,"user":"53401430e4b085b17e897da4"},{"problem":19,"code":"(fn [x]\n  (nth x\n     (- (count x) 1)))","user":"5b104aebe4b0cc2b61a3be20"},{"code":"#(if(next %) (recur (next %)) (first %))","problem":19,"user":"51cd75d6e4b02254fc79488c"},{"problem":19,"code":"(fn rec [stuff] (let [[x & xs] stuff] (if (empty? xs) x (rec xs))))","user":"5d6a9b96e4b04d129b00f29d"},{"code":"#(loop [items %1]\n    (let [r (rest items)]\n        (if (empty? r)\n            (first items)\n            (recur r))))","problem":19,"user":"4f0d093b535d0136e6c22313"},{"problem":19,"code":"(fn myLast [list] \n  (if\n    (= (count list) 1)\n    (first list)\n    (myLast (rest list))\n   )\n)","user":"58e6e624e4b056aecfd47cc1"},{"problem":19,"code":"#(loop [items %1]\n   (let [r (rest items)]\n     (if (empty? r)\n       (first items)\n       (recur r))))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn [xs]\n  (if (next xs)\n    (recur (next xs))\n    (first xs)))","problem":19,"user":"4eaf0d91535d7eef3080732e"},{"problem":19,"code":"; #(last %)\n; #(first (reverse %))\n\n(fn [s] (if (next s)\n          (recur (next s))\n          (first s)))","user":"5433eecae4b0b6b47310fce6"},{"code":"(fn [xs]\n  (first\n   (drop\n    (dec (count xs))\n    xs))\n  )","problem":19,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn [xs]\n  \t(if (next xs)\t\n      \t(recur (next xs))\n      \t(first xs)))","problem":19,"user":"505223fae4b0a561d07d8f17"},{"code":"(fn [x] (first (take-last 1 x)))","problem":19,"user":"4e3aec24535deb9a81d77f4f"},{"problem":19,"code":"(fn test [x] (cond (= (count x) 1) (first x) :else (test (rest x)) ))","user":"55f2b42be4b06e875b46ce4a"},{"code":"#(let [tovect (into [] %)]\n   (get tovect (- (count tovect) 1)))","problem":19,"user":"52daf558e4b09f7907dd13c1"},{"problem":19,"code":"#(get (apply vector %) (- (count %) 1))","user":"5c2692d2e4b07e362c2305c2"},{"problem":19,"code":"(fn [coll]\n  (let [x (count coll)]\n    (nth coll (dec x))))","user":"5adbbf89e4b0837691e92bf4"},{"problem":19,"code":"(fn [a-seq]\n  (nth a-seq (dec (count a-seq))))","user":"5990bab4e4b0866487ed0d55"},{"problem":19,"code":"(fn is-last\n  [a]\n  (->> a (reverse) (first)))","user":"5c936567e4b048ec896c5a1b"},{"problem":19,"code":"(fn [coll]\n  (->> coll\n       count\n       dec\n       (nth coll)))","user":"599b845ee4b010b4cc4bca09"},{"problem":19,"code":"(fn [xs]\n              (if (next xs)\n                (recur (next xs))\n                (first xs)))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":19,"code":";; peek. peek only indexes the last item in a list.\n;;(comp first reverse)\n;; reduce (fn [a b] b)\n#(first (reverse %))","user":"60461117e4b02d28681c77bf"},{"problem":19,"code":"(fn xx [a] (if (next a) (recur (next a)) (first a)))","user":"5934a43ce4b072a2710fd07e"},{"code":"(fn [x] (loop [y x] (if (= (count y) 1) (first y) (recur (rest y)))))","problem":19,"user":"53012382e4b0d8b024fd3718"},{"problem":19,"code":"(fn last-element [element-list] (first (reverse element-list)))","user":"58f8ed54e4b0438e51c2cf3b"},{"problem":19,"code":"(fn [x] (.get x  (- (count x) 1)))","user":"572db7fbe4b0cd1946bd0f79"},{"problem":19,"code":"(fn hello [n] (if (empty? (rest n)) (first n) (hello (rest n))))","user":"57befca6e4b05aa3c4741c70"},{"code":"(fn [x] \n  (first (drop (- (count x) 1) x)))","problem":19,"user":"5375d846e4b06839e8705e18"},{"problem":19,"code":"(fn [coll] \n   (loop [head (first coll)\n          tail (next coll)]\n         (if (nil? tail)\n         head\n           (recur (first tail) (next tail))\n)\n     ))","user":"553cd680e4b0a04f792994d4"},{"problem":19,"code":"(fn last-one [seq]\n  (if (= 1 (count seq))\n    (first seq)\n    (last-one (rest seq))))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":19,"code":"#(loop [s %] (if (= (count s) 1) (first s) (recur (rest s))))","user":"54722c55e4b094393f72dd74"},{"code":"reduce (fn [_ %] %)","problem":19,"user":"4f12ab23535d64f603146429"},{"problem":19,"code":"(fn [s] (reduce (fn [p, c] c) s))","user":"5cfd5a93e4b0cc9c91588168"},{"problem":19,"code":"(fn list-l [x]\n  (if (empty? (rest x))\n    (first x)\n    (list-l (rest x))))","user":"52fe2dffe4b047fd55837036"},{"code":"#(first (take-last 1 %) )","problem":19,"user":"4efbe02a535dced4c769f27b"},{"code":"(fn [[h & r]] (if r (recur r) h))","problem":19,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(fn [args] \n    (if (= '() (rest args)) \n        (first args) \n        (recur (rest args)) \n    ) \n)\n\n; or simply: #(first (reverse %))","problem":19,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn [numbers] (first (take-last 1 numbers)))","problem":19,"user":"52a28e1ce4b04e0c58e87bf0"},{"code":"reduce (fn[x y]y)","problem":19,"user":"4f25981ee4b0d66497709ff9"},{"problem":19,"code":"(fn [l] (let [el (first l) re (rest l)] (if (empty? re) el (recur re))))","user":"5713c575e4b07c98581c3aab"},{"problem":19,"code":"(fn [coll]\n  (loop [last-element nil\n         remaining-coll coll]\n    (if (seq remaining-coll)\n      (recur (first remaining-coll) (rest remaining-coll))\n      last-element)))","user":"5b449f3ee4b02d533a91bc47"},{"code":"(fn end [xs] (if (empty? (rest xs)) (first xs) (end (rest xs))))","problem":19,"user":"5334d4f2e4b0656e627bfd71"},{"problem":19,"code":"(fn myLast [x] (nth x (-(count x) 1) ))","user":"5400fd43e4b0de5c4184861c"},{"problem":19,"code":"(fn\n   [x]\n   (nth x \n        (dec \n          (count x)\n          )\n        )\n   )","user":"60d45525e4b0d60f5ea6f7dc"},{"code":"(fn [lst]\n  (if (seq (rest lst))\n    (recur (rest lst))\n    (first lst)))","problem":19,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn recur-rest [l] \n  (if (<= (count l) 1) (first l) (recur-rest (rest l))))","problem":19,"user":"517531c6e4b07031762f2eea"},{"problem":19,"code":"(fn\n  [[head & remaining]]\n   (if (empty? remaining)\n     head\n     (recur remaining))\n  )","user":"5998b0a9e4b07157cc8daaed"},{"problem":19,"code":"(fn last2 [coll]\n  (cond\n   (empty? (rest coll)) (first coll)\n   :else (recur (rest coll))))","user":"602d5eade4b0d5df2af22279"},{"code":"(fn [x]\n  (if (not (= 1 (count x)))\n    (recur (rest x))\n    (first x)))","problem":19,"user":"51860cd8e4b0da5a5be3bac6"},{"code":"(fn my-last [l]\n  (if (= 1 (count l))\n    (first l)\n    (my-last (rest l))))","problem":19,"user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [l]\n  (loop [[f & args] l]\n    (if (empty? args)\n      f\n    (recur args))))","problem":19,"user":"4f7e29dde4b06e829148e1ca"},{"problem":19,"code":"(fn my-last [list]\n  (if (= (count list) 1) (first list)\n    (my-last (rest list))))","user":"55dca3a5e4b050e68259b3b5"},{"code":"(fn thing [f] \n  (nth f (dec (count f))))","problem":19,"user":"4e7e1483535db169f9c79702"},{"problem":19,"code":"(fn [items] (nth (seq items) (- (count items) 1)))","user":"5e9c5fa4e4b0157ca96647f9"},{"code":"(fn last' [x] (first (reverse x)))","problem":19,"user":"529e3258e4b04e0c58e87b8d"},{"code":"(fn my-f [li] \n  (if (next li) \n    (my-f (rest li)) \n      (first li)))","problem":19,"user":"4f03cc36535dcb61093f6b69"},{"code":"(fn mylast [seq] (if (= () (rest seq)) (first seq) (recur (rest seq))))","problem":19,"user":"4f16ef8a535d64f603146451"},{"code":"(fn [l] (.get l (- (count l) 1)))","problem":19,"user":"51e6a2bce4b0ab43cc26c21d"},{"problem":19,"code":"(fn mylast [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (mylast (rest seq))))","user":"5b608087e4b0c6492753e700"},{"problem":19,"code":"(fn [[first & rest]]\n  (if (empty? rest)\n    first\n    (recur rest)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":19,"code":"(fn [collection](first (reverse collection)))","user":"5464dd11e4b01be26fd746d2"},{"problem":19,"code":"(fn cool [[f-data & rest-data]] \n  (if (> (count rest-data) 0) (recur rest-data) f-data)\n  )","user":"5c71355ee4b0fca0c1622791"},{"problem":19,"code":"(fn [[b & rest]] (if (nil? rest) b (recur rest)))","user":"57372bd5e4b0cd1946bd1041"},{"problem":19,"code":"(fn [s]\n  (nth s \n       (- (count s) 1)))","user":"57bdc167e4b05aa3c4741c57"},{"problem":19,"code":"(fn mylast[x]\n   (nth  x (-(count x) 1) ))","user":"56c1f470e4b0839206b9d68c"},{"problem":19,"code":"(fn get-last [l] (nth l (dec (count l))))","user":"6058591ae4b069ae89ce6af2"},{"problem":19,"code":"(fn [nums] (let [n-count (count nums)] (nth nums (- n-count 1))))","user":"5bc4d9dee4b07a9b28b10062"},{"code":"(fn [c]\n  (peek (into [] c)))","problem":19,"user":"4e7c4290535db169f9c796bc"},{"code":"(fn f[x] (nth x (- (count x) 1)))","problem":19,"user":"53779775e4b06839e8705e37"},{"code":"(fn [x]\n  (loop [a x]\n    (let [f (first a)\n          r (rest a)]\n      (if (empty? r)\n        f\n        (recur (rest a))))))","problem":19,"user":"5216f8dce4b082aa80a88c67"},{"problem":19,"code":"(fn last- [x] (nth x (- (count x) 1)))","user":"556cd549e4b09a3098a52503"},{"code":"(fn final [list] (nth list (- (count list) 1)) )","problem":19,"user":"530e0e4ee4b08068f379ecb4"},{"problem":19,"code":"#(.first (reverse %))","user":"55ed7e7fe4b0121d4835fddb"},{"problem":19,"code":"(fn my-last [s] \n  (if (empty? (rest s))\n   \t(first s)\n   \t(my-last (rest s))))","user":"540dbc11e4b0addc1aec6715"},{"code":"(comp first reverse)\n; If \"last\" is cheating, then so is \"first\"\n; (fn my-last\n;   [[f & rest]]\n;   (if (> (count rest) 0)\n;     (my-last rest)\n;     f))","problem":19,"user":"53832cb5e4b06839e8705ed9"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (not-empty xs)\n      (recur xs)\n    x))","user":"54d2892fe4b0e8a36923e5f7"},{"problem":19,"code":"(fn lastelem [seq] (nth seq  (- (count seq) 1)))","user":"594c1ab9e4b07ddc2dafae58"},{"code":"(fn [f] (first (reverse f)))","problem":19,"user":"4f2113f6e4b0d66497709fcd"},{"code":"(fn [x]\n  (nth x \n       (- \n        (count x) 1\n        )\n       )\n  )","problem":19,"user":"51d07a8be4b0e42293a2257e"},{"code":"(fn [xs]\n  (if (empty? (rest xs)) (first xs) (recur (rest xs))))","problem":19,"user":"4ec07699535dfed6da9c6da2"},{"problem":19,"code":"#(->> % \n      reverse\n      first)","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn last' [xs]\n  (if (empty? (rest xs))\n      (first xs)\n      (last' (rest xs))))","problem":19,"user":"533696b9e4b0e30313ee6c7c"},{"code":"#(loop [current (first %)\n         tail (rest %)]\n    (if (seq tail)\n      (recur (first tail) (rest tail))\n      current))","problem":19,"user":"525e859ee4b0cb4875a45dae"},{"code":"(fn [args] (reduce (fn [a, b] b) args))","problem":19,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":19,"code":"(partial reduce (fn [_ n] n))","user":"5641418fe4b08d4f616f5ef7"},{"code":"(fn [x] (if (next x) (recur (rest x)) (first x)))","problem":19,"user":"4ea8a997535d7eef308072ff"},{"problem":19,"code":"reduce (fn [h t] t)","user":"57dfab73e4b0bd073c202468"},{"code":"(fn loopy [s]                 \n  (if (> (count s) 1) \n    (loopy (rest s))\n    (first s)))","problem":19,"user":"4ed2b337535d44c135fd68de"},{"problem":19,"code":"(fn [list]\n  \"Returns the last element from a list\"\n  ((fn [myLast list]\n     (if (empty? list)\n       myLast\n       (recur (first list) (rest list))))\n    nil list))","user":"5bc50870e4b07a9b28b10069"},{"problem":19,"code":"(fn [seq] (if (> (count(rest seq)) 0) (recur (rest seq))(first seq ) ))","user":"550851cde4b021ccfedb96b7"},{"problem":19,"code":"(fn [seq] (let [x (- (count seq) 1)]\n             (nth seq x)))","user":"5aa2dc5ae4b0d174b936c861"},{"problem":19,"code":"(fn myLast\n  [xs]\n  (if (next xs) \n    (myLast (rest xs))\n    (first xs)))","user":"59afe4bae4b0e1f4e384c8c0"},{"code":"(fn foo [x] (if (= 1 (count x)) (first x) (foo (rest x))))","problem":19,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":19,"code":"(fn [x]\n  (nth x \n       (- (count x) 1)))","user":"58b586a5e4b0ebc645576d57"},{"code":"#(first(drop(- (count % ) 1) %))","problem":19,"user":"4dad808fc9a9d6ed0999dc57"},{"problem":19,"code":"(fn last2 [lst]\n  (loop [[f & n] lst]\n    (if (empty? n)\n      f\n      (recur n))))","user":"5f5396d4e4b0a0bc16850a79"},{"code":"(fn[x] ( nth x (- (count x) 1) ))","problem":19,"user":"4fb0f983e4b081705acca270"},{"problem":19,"code":"(fn [x]\n  (let [l (count x)]\n    (nth x (- l 1))))","user":"5a025edde4b01bb0ae8afd64"},{"problem":19,"code":"(fn\n  [lst]\n  (nth lst (dec (count lst))))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn func [x]  (first (reverse x)))","problem":19,"user":"504e42e0e4b0f6ff3350c493"},{"code":"#(loop [l %] (if (empty? (rest l)) (first l) (recur (rest l))))","problem":19,"user":"4ec363e7535dcc7ae8597d55"},{"problem":19,"code":"(fn meme [seq1]\n  (if (empty? (rest seq1))\n    (first seq1)\n    (meme (rest seq1))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":19,"code":"(fn get-last [[head & tail]] (if (empty? tail) head (get-last tail)))","user":"5d1e37e2e4b02ea6f0fb69b1"},{"code":"(fn [s]\n  (if (next s)\n      (recur (next s))\n      (first s)))","problem":19,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn lastEl[x] (nth x (- (count x) 1)))","problem":19,"user":"4fa2b650e4b0dcca54ed6d6a"},{"problem":19,"code":"(fn last_element [x] (peek (into [] x)))","user":"53e150e5e4b0d874e779ae53"},{"code":"#(if (= () (rest %))\n   (first %)\n   (recur (rest %)))","problem":19,"user":"52e4cc2ee4b09f7907dd1455"},{"code":"(fn [s]\n  (let [p (rest s)]\n  (if (empty? p)\n      (first s)\n       (recur p))))","problem":19,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn vipa [list]\n  (cond\n    (= (count list) 1) (first list) \n    :else (vipa (rest list))\n))","problem":19,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":19,"code":"(fn f [[x & xs]] (if (empty? xs) x (f xs)))","user":"5478e57de4b0c51c1f4d72c1"},{"code":"(fn last2[x] (first (reverse x)))","problem":19,"user":"4fe65108e4b0e8f79898fed3"},{"problem":19,"code":"(fn [lst] (loop [l lst] (if (= (count l) 1) (first l) (recur (rest l)))))","user":"52703382e4b03e8d9a4a7397"},{"problem":19,"code":"#(loop [stuff %] (if (first (rest stuff)) (recur (rest stuff)) (first stuff)))","user":"57b39fbee4b0fbc9809a2783"},{"code":"(fn [x] (nth x \n             (- (count x) 1)\n             )\n  )","problem":19,"user":"520248eae4b030ee0c5b26e6"},{"code":"(fn [s]\n  (first (reverse s))\n  )","problem":19,"user":"51eb3aace4b0f1f103a0d159"},{"problem":19,"code":"(fn xo [x](nth x (- (count x) 1)))","user":"551c4068e4b07993ea3788db"},{"code":"(fn foo [xs]\r\n  (if (next xs)\r\n    (recur (next xs))\r\n    (first xs)))","problem":19,"user":"4e049a06535d04ed9115e7a0"},{"problem":19,"code":"(fn get-last [x] (if (= (rest x) '())\n                   (first x)\n                     (get-last (rest x))))","user":"55921c21e4b0604b3f94d588"},{"code":"; wow, i am stoopid\n(comp peek vec)","problem":19,"user":"50464831e4b011c5dfee771f"},{"code":"(fn lastElem [x] \n  (if (empty? (rest x)) \n             (first x)\n             (lastElem (rest x))))","problem":19,"user":"52e657e4e4b09f7907dd1472"},{"problem":19,"code":"(fn foo [x] (first(reverse x)))","user":"549b1e50e4b0f3d1d8e70f7a"},{"problem":19,"code":"(comp peek #(into [] %))","user":"56d69d28e4b0ea9b8538f7cf"},{"code":"(fn lst [input]\n  (if (= 1 (count input)) (nth input 0) (lst (rest input)))\n  )","problem":19,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":19,"code":"(fn findLast [input]\n  (if (empty? (rest input))\n    (first input)\n    (recur (rest input))))","user":"5a1fcc82e4b0ff51aa4b3293"},{"code":"(fn [s]\n  (if (next s)\n    (recur (rest s))\n    (first s)))","problem":19,"user":"4e2608d6535deb9a81d77ef1"},{"code":"(fn mylast [x] (if (= (rest x) '()) (first x) (mylast (rest x))))","problem":19,"user":"4e85c175535db62dc21a62ef"},{"problem":19,"code":"(fn [items]\n    (if (seq (rest items))\n      (recur (rest items))\n      (first items)))","user":"607b6b5fe4b0a637ed780376"},{"problem":19,"code":"(fn my-last [ls]\n  (if\n   (= () (rest ls))\n   (first ls)\n   (my-last (rest ls))))","user":"573c57ace4b0cd1946bd10c0"},{"problem":19,"code":"(fn new-last [list] (first (reverse list)))","user":"5587fe2ce4b059ccff29b1ed"},{"code":"(fn [x] (.get x (- (.size x) 1)))","problem":19,"user":"4e8b1fa2535d65386fec2118"},{"problem":19,"code":"(fn last-e [array]\n  (let [x (- (count array) 1)]\n          (let [y (nth array x)]\n    \t\ty)))","user":"5bf47554e4b0b326c961d891"},{"code":"(fn [[x & xs]]\n    (if-not xs\n            x\n            (recur xs)))","problem":19,"user":"4eecc9ad535d93acb0a668b4"},{"problem":19,"code":"(fn testy [x] (peek (vec x)))","user":"559e830fe4b08a52bd4f97d5"},{"problem":19,"code":"#(loop [[h & r] %] (if (seq r) (recur (rest r)) h))","user":"5609d585e4b05f002753deef"},{"problem":19,"code":"(fn [s]\n  (if (= (next s) nil)\n      (first s)\n      (recur (next s))))","user":"55be464ce4b01b9910ae2a07"},{"problem":19,"code":"#(loop [l %] (if (= (count l) 1) (first l) (recur (rest l))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn last-elem [seq] (nth seq (- (count seq) 1)))","problem":19,"user":"537f6b78e4b06839e8705eb4"},{"problem":19,"code":"(fn last-elem [s] (if (= () (rest s)) (first s) (last-elem (rest s))))","user":"562110f6e4b064ca9f4b16ec"},{"problem":19,"code":"(fn [inputseq] (peek (into [] inputseq)))","user":"57cb0ba3e4b05aa3c4741d41"},{"problem":19,"code":"#(reduce (fn [acc val] val) nil %)","user":"56e0fa6fe4b03a7c14b85a1d"},{"code":"(fn [x] \n   (first (reverse x))    \n)","problem":19,"user":"514f72a2e4b0b449e54b8df7"},{"code":"(fn getLast [l]\n  (if (empty? (rest l))\n    (first l)\n    (getLast (rest l))))","problem":19,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":19,"code":"(fn my-last [lst]\n  (if (= 1 (count lst)) (first lst)\n    (my-last (rest lst))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":19,"code":"(fn [x] \n    (let [ z (rest x) ]\n        ( if (= 1 (count z)) (first z) ( recur z ) ))\n\n )","user":"55ba6d52e4b01b9910ae29d3"},{"code":"(fn mylast [s]\n  (if (= 1 (count s))\n    (nth s 0) \n    (mylast (rest s))))","problem":19,"user":"523de50de4b06956f8342ca9"},{"problem":19,"code":"(fn [s] (nth s (dec(count s)) ))","user":"5151a2c4e4b03e678e393ad1"},{"problem":19,"code":"(fn [xs] (if (= (rest xs) ()) (first xs) (recur (rest xs))))","user":"54c641f8e4b045293a27f628"},{"problem":19,"code":"(fn [[head & tail]] (reduce (fn [x y] y) head tail))","user":"5638b88de4b0bfe05bf117e9"},{"problem":19,"code":"; (fn [x] (first (reverse x)))\n; #(first (reverse %))\n; (fn [x] (nth x (- (count x) 1)))\n; (fn [x] (nth x (dec (count x))))\n; (comp first reverse)\n; #(-> % reverse first)\nreduce #(-> %2)","user":"56121985e4b05f002753df8a"},{"code":"(fn [n]\n  (let [car (first n),\n        cdr (rest n)]\n    (if (nil? (seq cdr)) car (recur cdr))))","problem":19,"user":"529b5301e4b02ebb4ef7509f"},{"code":"(fn [seq]\n  (if (= 1 (count seq))\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"4ef3f5b0535dced4c769f22f"},{"code":"(fn [list] (let [tmp (rest list)] (if (= tmp '()) (first list) (recur tmp))))","problem":19,"user":"4edfb618535d10e5ff6f5343"},{"problem":19,"code":"(fn fun1 [oldList]\n  (cond\n   (= (count oldList) 1) (first oldList)\n   :else (fun1 (rest oldList))\n   ))","user":"5da20e73e4b000c986472be1"},{"problem":19,"code":"(fn [s] (let [l (count s)] (if-not (= l 0) (nth s (- l 1)) s)))","user":"5f5aee4fe4b0a0bc16850aaa"},{"code":"#(reduce (fn [foo _] _) %)","problem":19,"user":"50f53694e4b057d4c52de881"},{"problem":19,"code":"( fn [col]\n  (get (into [] col) (dec(count col)))\n  )","user":"5fb29949e4b08cb800c85b2a"},{"problem":19,"code":"(fn [l] (loop [h (first l)\n               tl (rest l)]\n          (if (empty? tl)\n            h\n            (recur (first tl) (rest tl)))))","user":"5dfae6b0e4b0a607a9a45cd0"},{"code":"(fn return-last [[x & rest]]\n  (if (= rest nil) x (return-last rest)))","problem":19,"user":"5079fd71e4b08327cd804a66"},{"code":"(fn last-elem [x] (if (= 1 (count x)) (first x) (last-elem (rest x)) ))","problem":19,"user":"51f6af4fe4b06ff1c25c52ce"},{"code":"(fn [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"4eca5391535d6d7199dd3704"},{"code":"(fn last1 [coll] (if (= (rest coll) '()) (first coll) (recur (rest coll))))","problem":19,"user":"5001ce99e4b0678c553fc41f"},{"code":"(fn bl [x] (if (nil? (next x)) (first x) (bl (rest x))))","problem":19,"user":"4f4aa932e4b0d56e7bb92c14"},{"problem":19,"code":"(fn[x] (let [n (count x)] (nth x (dec n) )))","user":"53718a24e4b0493c815db6fe"},{"code":"(fn getlast [a] \n  (if (empty? (rest a)) \n    (first a)\n    (getlast (rest a))))","problem":19,"user":"503e6047e4b06c4e0e1fa266"},{"problem":19,"code":"(fn last-elem [sq] (nth sq (- (count sq) 1)))","user":"5b113f20e4b0cc2b61a3be2c"},{"problem":19,"code":"(fn [lista] (reduce (fn [a b] b) lista))","user":"553e2da3e4b0a04f792994ea"},{"code":"reduce \n\n(fn \n[l, current]\n current\n  )","problem":19,"user":"530c462ae4b02e82168697d9"},{"code":"reduce #(identity %2 )","problem":19,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":19,"code":"(fn [coll](let [n (count coll)](if (< 0 n) (nth coll (- n 1)) nil)))","user":"5b5e7953e4b0c6492753e6d9"},{"code":"(fn [array] (loop [arr array] (if (= 1 (count arr)) (first arr) (recur (rest arr)))))","problem":19,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":19,"code":"(fn [x] (if (= 1 (count x))\n          (first x)\n          (recur (rest x))))","user":"5b611666e4b0c6492753e70d"},{"problem":19,"code":"#(->> % vec peek )","user":"58c71509e4b021aa9917ed6e"},{"problem":19,"code":"(fn last-element [s]\n  (nth s (dec (count s))))","user":"5dd1e82be4b0948ae9d9ad50"},{"code":"#(nth % (dec (count %)) )","problem":19,"user":"4e952463535dbda64a6f6b31"},{"problem":19,"code":"(fn my-last\n  [x]\n  (cond\n   (empty? x) nil\n   (empty? (rest x)) (first x)\n   :else\n     (recur (rest x))))","user":"57f80350e4b0d3187e90090c"},{"problem":19,"code":"(fn [x](nth x (dec (count x)) ))","user":"59636b49e4b066ee0a44b0c5"},{"problem":19,"code":"(fn [lst]\n  (if (next lst)\n    (recur (next lst))\n    (first lst)))","user":"53aec6e6e4b047364c044479"},{"problem":19,"code":"(fn my_last\n  [s]\n  (if (seq (rest s))\n    (recur (rest s))\n    (first s)))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn [[n & more]](if more (recur more)n))","problem":19,"user":"505d1b01e4b0e6aca564be04"},{"code":"#(get (into [] %) (- (count (into [] %)) 1))","problem":19,"user":"520b4b95e4b0b022ef140c80"},{"code":"(fn [seq]\n          (if (= (second seq) nil)\n              (first seq)\n              (recur (rest seq))))","problem":19,"user":"512587ade4b05d10e3e395fb"},{"problem":19,"code":"(fn [list] (reduce (fn [x y] y) list))","user":"55d79b87e4b0e31453f64aa8"},{"problem":19,"code":"(fn f [s]\n(if (= (rest s) '()) \n(first s) \n  (f (rest s))))","user":"55815973e4b05c286339e0f6"},{"problem":19,"code":"(fn [coll]\n  (if (next coll)\n      (recur (next coll))\n      (first coll)))","user":"573b440ce4b0cd1946bd10a0"},{"problem":19,"code":"(fn [sequen] (first (take 1 (reverse sequen))))","user":"5dc9e5bfe4b03836ba07d826"},{"problem":19,"code":"(fn lastElement [args]\n (first (reverse args))\n   )","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn [col] (first (nthnext col (- (count col) 1))))","problem":19,"user":"4dadba4dc9a9d6ed3899dc57"},{"problem":19,"code":"(fn [array] (nth array (- (count array) 1 )))","user":"57440f77e4b0c285004e8ab5"},{"problem":19,"code":"(fn [coll] \n  (if (= (rest (seq coll)) '())\n    (first coll)\n    (recur (rest (seq coll)))\n    )\n  \n)","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn last-elem [x]\n  (cond (empty? (rest x)) (first x)\n        :else (last-elem (rest x))))","problem":19,"user":"4f45c72be4b0d56e7bb92b8a"},{"code":"(fn [xs] \n  (cond\n     (= '() (rest xs)) (first xs) \n     :else (recur (rest xs))))","problem":19,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn [coll] ( first (drop (- (count coll) 1) coll)))","problem":19,"user":"507fcfede4b089ade05efbd5"},{"code":"(fn this [l] \n  (if (vector? l)\n    (this (reverse (into '() l)))\n    (if (= (count l) 1) \n      (first l)\n      (this (pop l))\n    )\n  )\n)","problem":19,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn my_last [lst] (if (= nil (next lst)) (first lst) (my_last (next lst)) ))","problem":19,"user":"4ee8092f535d93acb0a66875"},{"code":"(fn [x] (-> x reverse first) )","problem":19,"user":"52cbe910e4b07d0d72b27353"},{"problem":19,"code":"#(let [counter (count %)\n       index (dec counter)]\n   (nth % index))","user":"554acce4e4b0a04f79299579"},{"code":"(fn [sq]\n  (if (= (count sq) 1)\n  (first sq)\n  (recur (rest sq))))","problem":19,"user":"50775a7de4b0fc74642bff60"},{"problem":19,"code":"(fn [xs] (loop [xss xs\n                prev nil]\n           \t(if (seq xss) (recur (rest xss) (first xss)) prev)))","user":"597768d0e4b01722bebd4cee"},{"code":"(fn [xs] (if (= (count xs) 1) (first xs) (recur (rest xs))))","problem":19,"user":"4ff3df0fe4b0678c553fc355"},{"problem":19,"code":"(fn \n  [iseq]\n  (if (= (count iseq) 1)\n    (first iseq)\n    (recur (rest iseq))))","user":"5ed65b59e4b016b56eae05df"},{"problem":19,"code":"(fn [l]\n  (let [dc (comp dec count)]\n    (nth l (dc l))))","user":"557bcce4e4b05c286339e0b9"},{"problem":19,"code":"(fn [lista] (get (into [] lista) (- (count lista) 1)))","user":"55da6a80e4b0e31453f64ad7"},{"code":"( fn[x] (nth x (- (count x) 1)))","problem":19,"user":"4e932523535dbda64a6f6b09"},{"problem":19,"code":"(fn last-elem [[x & rest]]\n  (if (nil? rest)\n    x\n    (last-elem rest)))","user":"6051bcfae4b056659d634203"},{"code":"(fn [x] \n  (if (empty? (rest x)) \n    (first x)\n    (recur (rest x))))","problem":19,"user":"51985113e4b068aa333628f9"},{"problem":19,"code":"#(let [a (first %)\n       b (rest %)]\n   (loop [a a b b]\n     (if (empty? b)\n       a\n       (recur (first b)\n              (rest b)))))","user":"5e976fa8e4b0157ca96647cf"},{"code":"(fn get-last[coll]\n  (if (not (next coll))\n    (first coll)\n    (get-last (rest coll))))","problem":19,"user":"4f1872a2535d64f60314645a"},{"code":"(comp first rseq vec)","problem":19,"user":"4e5a5ecb535d8a8b8723a2ac"},{"code":"(fn takeLast [l] (if (> (count l) 1) (takeLast (rest l)) (first l)))","problem":19,"user":"522654f0e4b04e78ff2e197f"},{"problem":19,"code":"(fn [x] (nth x(-(count x)1)))","user":"60859d59e4b0736b099e42f8"},{"problem":19,"code":"(fn [aseq] (reduce #(identity %2) aseq))","user":"54dbb009e4b024c67c0cf76e"},{"problem":19,"code":"(fn last-element [x] (if (empty? (rest x)) (first x) (last-element (rest x))))","user":"56078b7be4b08b23635d3181"},{"code":"(fn get-last [n] (if (> (count n) 1) (recur (rest n)) (first n)))","problem":19,"user":"4e36e647535deb9a81d77f36"},{"problem":19,"code":"(fn lt [x] (cond (zero? (count x)) nil (= 1 (count x)) (first x) :else (lt (rest x))))","user":"58550395e4b07779d468640e"},{"code":"#(if (empty? (rest %))\n   (first %)\n   (recur (rest %)))","problem":19,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn last-el [x] (if (empty? (next x)) (first x) (last-el (next x))))","problem":19,"user":"52319066e4b0e2e8de81d1e9"},{"problem":19,"code":"(fn last* [coll]\n  (cond\n   \t(= (count coll) 0) nil\n    (= (count coll) 1) (first coll)\n    :else              (last* (rest coll))))","user":"53f42471e4b0742d9025b0fb"},{"code":"#(first (drop (- (count %) 1 ) %))","problem":19,"user":"4fe900a6e4b0547ebccb243a"},{"problem":19,"code":"(fn last_el [l] (if (< (count l) 2) (first l) (last_el (rest l))))","user":"5f63684be4b02876ed9fd012"},{"problem":19,"code":";#(nth % (dec(count %)))\n#(first(reverse %))","user":"5cd4e1b2e4b0ccb061962927"},{"code":"(fn return-last [x] (if (= (seq (rest x)) nil) (first x) (recur (rest x))))","problem":19,"user":"52c0101fe4b07a9af5792343"},{"code":"(fn last-of [x] (if-not (second x) (first x) (last-of (rest x))))","problem":19,"user":"510c8a00e4b078ea7192111f"},{"code":"#(reduce (fn [x y] y) %)","problem":19,"user":"4e31a15c535deb9a81d77f1e"},{"problem":19,"code":"(fn [xs] \n  (if (next xs)\n    (recur (next xs))\n    (first xs)))","user":"563ab65be4b0bfe05bf11803"},{"problem":19,"code":"(fn [arg1]\n(cond\n(and (= arg1 [1 2 3 4 5])) 5\n(and (= arg1 (quote (5 4 3)))) 3\n(and (= arg1 [\"b\" \"c\" \"d\"])) \"d\"\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"; (fn foo [coll]\n;   (if (= (rest coll) '())\n;     (first coll)\n;     (foo (rest coll))))\n\n;; better solution\n(fn [coll]\n  (let [indexed (map vector (iterate inc 0) coll)]\n    (nth coll (apply max (map first indexed)))))","problem":19,"user":"53322cece4b019098a6f8b73"},{"problem":19,"code":"(\n fn m_last [l](\n   if (<= (count l) 1) (first l) (m_last (rest l)) \n   )\n )","user":"582cd55ae4b051871117bfa9"},{"problem":19,"code":"(fn [c] (get (vec c) (dec (count c))))","user":"5db17e0be4b010eb3c36cd03"},{"code":"(fn [sqc]\n  (cond\n   (empty? sqc) nil\n   (empty? (rest sqc)) (first sqc)\n   :else (recur (rest sqc))))","problem":19,"user":"5189a51ae4b0288ada3dbdad"},{"problem":19,"code":"(fn [value]\n (first (reverse value))\n)","user":"53ff602fe4b0de5c418485ff"},{"problem":19,"code":"(fn findlast\n   [mylist]\n   (if (= 1 (count mylist))\n    (first mylist)\n    (findlast (rest mylist))\n   )\n  )","user":"53fe459ae4b0de5c418485f4"},{"problem":19,"code":"(fn\n  [list]\n  (first (reverse list)))\n\n;; #(nth % (- (count %) 1))","user":"582bd5fae4b051871117bf7b"},{"code":"(fn l [c]\n  (loop [s (seq c) f (first c)]\n    (if s (recur (next s) (first s)) f)))","problem":19,"user":"5122925ae4b068a9582e656d"},{"problem":19,"code":"reduce 'identity","user":"587a2356e4b01531a375eade"},{"code":"(fn f [x] (if (> (count x) 1) (f (rest x)) (first x)))","problem":19,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn [x] (peek (reverse x)))","problem":19,"user":"4e89de60535d3e98b8023285"},{"problem":19,"code":"(fn [seek] (first(reverse seek)))","user":"5ab4fd4ae4b073f17744262b"},{"problem":19,"code":"(fn getlast [x] (nth x (- (count x) 1 )))","user":"55b1ab40e4b0da326a65cf6e"},{"code":"#(if (empty? (rest %))\r\n  (first %)\r\n  (recur (rest %)))","problem":19,"user":"4dbe5975535d020aff1edf5d"},{"code":"#(.get % (- (count %) 1) )","problem":19,"user":"506662a0e4b03d366d7cb2ae"},{"code":"#( nth % (- (count % ) 1))","problem":19,"user":"4f39493be4b0e243712b1ee9"},{"problem":19,"code":"(fn lastish\n  [others]\n  (do\n    (println others)\n    (if (first (rest others))\n      (lastish (rest others))\n      (first others))))","user":"602f56c5e4b0d5df2af22297"},{"code":"#(if (next %)\n   (recur (next %))\n   (first %))","problem":19,"user":"5252934fe4b0541d1855b8cc"},{"problem":19,"code":"(fn mlast [x] (first (reverse x)))","user":"56f0390de4b04a395b9a0473"},{"problem":19,"code":"(fn last-item [l]\n  (if (empty? (rest l)) (first l) (recur (rest l)))\n)","user":"4f0f0e33535d0136e6c2232e"},{"problem":19,"code":"(fn las [a] (.get a (- (count a) 1)))","user":"54a0b1f4e4b0f3d1d8e70fb9"},{"code":"(comp first #(take-last 1 %))\n;reduce (fn [a b] b)\n#_(fn [[x & r]]\n    (if (empty? r) \n      x \n      (recur r)))","problem":19,"user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [lista] (\n             letfn [(has-next [x] (if (empty? (rest x)) (first x) (has-next (rest x)))  )]\n             (has-next lista)\n             \n             ))","problem":19,"user":"505cdcb7e4b0e6aca564be03"},{"problem":19,"code":"(fn last2 [s] (nth s (dec (count s))))","user":"5eac34dbe4b00a66d4a951df"},{"problem":19,"code":"(fn [coll]\n  (first (into '() coll)))","user":"5947c6a6e4b07ddc2dafada7"},{"code":"(fn getLast [l] (if (= (count l) 1) (first l) (getLast (rest l))))","problem":19,"user":"52013494e4b0d7096e99ddb7"},{"problem":19,"code":"(fn [x]\r\n   (if (empty? (rest x))\r\n    (first x)\r\n    (recur (rest x))\r\n    )\r\n)","user":"55cde227e4b0e31453f64a22"},{"problem":19,"code":"(fn [s] (if (empty? (rest s)) (first s) (recur (rest s))))","user":"543043dee4b0dad94371f2d8"},{"problem":19,"code":"#( nth % (dec (count %)) )","user":"58fe599ce4b0438e51c2cfd0"},{"problem":19,"code":"(fn [x]\n   (first (reverse x)))","user":"55245232e4b0882d96d091c0"},{"code":"(fn [xs]\n  (if (next xs)\n    (recur (next xs))\n    (first xs)\n  )\n  \n)","problem":19,"user":"528432b6e4b0239c8a67adc7"},{"code":"(fn [s]\n  (if (= 1 (count s ))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"50ebd63ce4b04edc3377703c"},{"problem":19,"code":"(fn tester\n  [s]\n  (if (= (count s) 1)\n    (first s)\n    (tester (rest s))))","user":"5a6a32b6e4b0512ff01cda22"},{"problem":19,"code":"(fn last-elem [[n & more]] (if more (recur more) n))","user":"5988f87ce4b021a7a535fec9"},{"code":"(fn mylast [list]\n  (if (empty? (rest list))\n    (first list)\n    (mylast (rest list))))","problem":19,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":19,"code":"(fn [x]\n      (if (= 1 (count x))\n        (first x)\n        (recur (rest x))))","user":"57d93437e4b0bd073c2023f9"},{"code":"(fn [v](nth v (- (count v) 1 )))","problem":19,"user":"5286a2a9e4b0239c8a67ae1e"},{"problem":19,"code":"(fn my-last\n  [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      (first b)\n      (recur (rest a) (cons (first a) b)))))","user":"57f8153de4b0d3187e900916"},{"problem":19,"code":"(fn\n  ([ls & lt]\n   (if (seq ls)\n     (recur (rest ls) (first ls))\n     lt)))","user":"5c9a5cf4e4b048ec896c5aad"},{"problem":19,"code":"(fn [list]\n  (.get list (- (count list) 1))\n)","user":"58f4a3dfe4b0438e51c2cec3"},{"problem":19,"code":"(fn [list] (reduce #(identity %2) list))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn lastOne [x] (nth x (- (count x) 1)))","problem":19,"user":"50a0d1e4e4b08df8156e9e51"},{"problem":19,"code":"(fn lst [v] (first (reverse v)))","user":"5c454ee2e4b0e06e1360a388"},{"problem":19,"code":"(fn [x] (get (apply vector x) (- (count x)1)))","user":"56ccbeb7e4b0ea9b8538f740"},{"code":"#( nth % ( - ( count % ) 1 ) )","problem":19,"user":"4fb069b1e4b081705acca266"},{"code":"(fn [list] \n      (if (= 1 (count list)) \n        (first list) \n        (recur (rest list))))","problem":19,"user":"5311b367e4b08068f379eced"},{"problem":19,"code":"(fn [x]\n    (if (next x)\n      (recur (next x))\n      (first x)))","user":"54f4b638e4b0f2f3c5226e88"},{"code":"(fn [lst] \n  (nth lst \n    (dec (count lst))))","problem":19,"user":"527236d4e4b03e8d9a4a741f"},{"code":"(fn cool [l] (if (nil? (next l)) (first l) (cool (next l))))","problem":19,"user":"5245d29ae4b09dbe66b56174"},{"problem":19,"code":"(fn [x] ((comp first reverse) x) )","user":"6034e358e4b0d5df2af222d1"},{"code":"(fn [lst]\n  (let [[x & xs] lst]\n    (if (nil? xs) x (recur xs))))","problem":19,"user":"4ec59ce4535d6d7199dd36ab"},{"code":"#(nth (reverse %) 0)","problem":19,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":19,"code":"(fn f [s]\n  (if (= 1 \n         (reduce (fn [x y] (+ x 1)) 0 s))\n    (first s)\n    (f (next s))))","user":"58f95c50e4b0438e51c2cf4a"},{"code":"reduce (fn [_ y] y)","problem":19,"user":"4e7f3891535db966e863cc3b"},{"problem":19,"code":"(fn [xs] (case (count xs) 1 (first xs) (recur (rest xs))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn foo [s] (if (empty? (rest s)) (first s) (foo (rest s))))","problem":19,"user":"50f9c7fde4b0e7c80cb15a52"},{"code":"(fn [c] (nth c (dec (count c))))","problem":19,"user":"5276aa0de4b03e8d9a4a74ea"},{"problem":19,"code":"(fn [l] (-> l (reverse) (first)))","user":"590bd0fee4b047aa04b199e3"},{"code":"#((vec %) (- (count %) 1))","problem":19,"user":"4e83b1af535db62dc21a62dc"},{"problem":19,"code":"(fn \n  [coll]\n  (first(reverse coll)))","user":"5daa1f69e4b000c986472c3d"},{"code":"(fn last-in [seq] (first (reverse seq)))","problem":19,"user":"52cffe31e4b07d0d72b273b2"},{"code":"#(if (= (count %) 1)\n      (nth % 0)\n      (do (recur (rest %)))\n)","problem":19,"user":"519291c1e4b08962174cf74b"},{"code":"#_ (fn l [c]\n  (if (= (count c) 1)\n    (first c)\n    (l (rest c))))\n\n#_ #(if (= (count %) 1)\n  (first %)\n  (recur (rest %)))\n\nreduce (fn [f s] s)","problem":19,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":19,"code":"#(nth % (-(count %) 1 ))","user":"55382530e4b09218d5f44fdd"},{"code":"(fn [col] \n  \n  (nth col (dec (count col)))\n  )","problem":19,"user":"518d1b5be4b070277754617b"},{"code":"(fn [foo] (nth foo (- (count foo) 1)))","problem":19,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":19,"code":"(fn end [xs]\n  (if (empty? xs)\n    nil\n    (let [[x & xsp] xs]\n      (if (empty? xsp)\n        x\n        (recur xsp)))))","user":"53dfbc75e4b0d874e779ae44"},{"problem":19,"code":"(fn [sq] (if (next sq) (recur (next sq)) (first sq)))","user":"504dfc75e4b078edc5f59387"},{"problem":19,"code":"#(reduce (fn [accum a] a) %)","user":"58ef0b8ce4b056aecfd47dbf"},{"code":"(fn f [c] (first (reverse c)))","problem":19,"user":"506aa040e4b05d3b7762c749"},{"code":"(fn [vect] (nth vect (- (count vect) 1)))","problem":19,"user":"5272d528e4b03e8d9a4a7454"},{"problem":19,"code":"(fn second-last [col] \n  (nth col (- (count col) 1)))","user":"57410964e4b05c31a32c085f"},{"problem":19,"code":"(fn ln [x] (first (reverse x)))","user":"55e0326ce4b050e68259b407"},{"problem":19,"code":"(fn [s] (loop [[h & rest] s] (if (nil? rest) h (recur rest))))","user":"57e3527ce4b0bfb2137f5a99"},{"code":"(fn [lis & ret] \n  (if (= (count lis) 0) ret\n    (recur (rest lis) (first lis))))","problem":19,"user":"537310e0e4b06d7f452d9e07"},{"code":"(fn mylast [x] (first (reverse x)))","problem":19,"user":"4eaed3a7535d7eef30807328"},{"problem":19,"code":"(fn [col]\n  (loop [cur col]\n    (if (empty? (rest cur))\n      (first cur)\n      (recur (rest cur)))))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":19,"code":"(fn [xs]\n  (if (= (count xs) 1) (first xs) (recur (rest xs))))","user":"58d71ef5e4b03c36ff7e597f"},{"code":"(fn [x] \n  (peek\n    (vec x)))","problem":19,"user":"50ba714ae4b03e68e4411c83"},{"problem":19,"code":"(fn [x] (first (#(reverse %1) x)))","user":"5674924ce4b05957ce8c613f"},{"problem":19,"code":"(fn end\n  [vec]\n  (loop [v (rest vec), acc (first vec)]\n    (if (seq v)\n      (recur (rest v) (first v))\n      acc)))","user":"573b487de4b0cd1946bd10a1"},{"problem":19,"code":"(fn [listr]\n  (if (= (next listr) nil)\n    (first listr)\n    (recur (next listr))))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":19,"code":"(fn [coll]\n    (loop [result nil coll coll]\n        (if (empty? coll)\n            result\n            (recur (first coll) (rest coll)))))","user":"5896735fe4b00487982d529d"},{"code":"(fn [x]\n  (first\n\t(drop\n     (-\n      (count x) 1) x)))","problem":19,"user":"51a8e7d0e4b08d8ec191b81f"},{"code":"(fn [coll]\n  (if (nil? (next coll))\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"516014fde4b0e2be8aa20be1"},{"problem":19,"code":"#(->> (count %) (dec) (nth %))\n\n;; #(nth % (dec (count %)))","user":"5d083205e4b0cc9c91588203"},{"code":"(fn [l]\n  (nth l (dec (count l))))","problem":19,"user":"5080d6e3e4b01a93d3f38e4b"},{"code":"(fn [sequence]\n  (first (reverse sequence))\n)","problem":19,"user":"4f0f1762535d0136e6c22331"},{"problem":19,"code":"(fn [coll] (loop [f (first coll) r (rest coll)]\n             (if (empty? r)\n               f\n               (recur (first r) (rest r)))\n             ))","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn my_last [seq]\n  (let [r (rest seq)]\n    (if (empty? r)\n      (first seq)\n      (my_last r))))","problem":19,"user":"4fbbae0fe4b081705acca2eb"},{"problem":19,"code":"(fn my-last [s] (if (nil? (next s)) (first s) (my-last (rest s))))","user":"55a87f0ee4b0988bba2ad938"},{"problem":19,"code":"(fn [s]\n  (loop [first-el nil my-seq s]\n    (if (seq my-seq)\n      (recur\n        (first my-seq)\n        (rest my-seq))\n      first-el)))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn fred[x] (if (> (count x) 1) (fred (rest x)) (first x)))","problem":19,"user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn [[f & r]]\n  (if (nil? r) f (recur r)))","problem":19,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":19,"code":"(partial reduce (fn [_ b] b))","user":"5e8def8de4b0cb0169546332"},{"problem":19,"code":"(fn last-elem [xs] (if (empty? (rest xs)) (first xs) (last-elem (rest xs))))","user":"59d4fe81e4b0ef0a1e9b5bec"},{"problem":19,"code":"(fn [xs]\n    (loop [ys xs]\n    (if (= (count ys) 1)\n      (first ys)\n      (recur (rest ys)))))","user":"541168dee4b01498b1a719c3"},{"problem":19,"code":"(fn [coll]\n  (loop [elem (first coll)\n         coll coll]\n    (if (empty? (rest coll))\n      elem\n      (recur (first (rest coll)) (rest coll)))))","user":"55a12cb1e4b0acc240e3150d"},{"problem":19,"code":";; #(nth % (dec (count %)))\n\n#(first (reverse %))","user":"5fb68f09e4b08cb800c85b58"},{"problem":19,"code":"#(loop [x     % y  (rest %)] \n   (if (= '() y)\n     (first x) \n     (recur  y (rest y))))","user":"5e81f009e4b09a7a73c8bbaf"},{"problem":19,"code":"(fn [coll]\n    (nth coll (- (count coll) 1 )))","user":"58ffaddee4b0438e51c2cffe"},{"problem":19,"code":"(fn returnLast [X] \n  \n  (nth (reverse X) 0\n  \n  \n  ))","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":19,"code":"(fn [vector] (let [size (count vector)] (nth vector (- size 1))))","user":"54b61c88e4b05787c3b163b2"},{"problem":19,"code":"(partial reduce (fn [_ val] val))","user":"594783bee4b07ddc2dafada1"},{"problem":19,"code":"(fn myFun [collection] (if (empty? (rest collection)) (first collection) (myFun (rest collection))))","user":"60263f9fe4b0d5df2af2222c"},{"problem":19,"code":"(fn [ns] ((comp first reverse) ns))","user":"5dea6a34e4b0986d99407f98"},{"problem":19,"code":"(fn test [sequence] (first (reverse sequence)))","user":"561c57b9e4b064ca9f4b1697"},{"problem":19,"code":"(fn lastOne [x] (if (= (count x) 1) (first x) (lastOne (rest x))))","user":"573c813be4b0cd1946bd10c5"},{"problem":19,"code":";(fn foo [x] (if (empty? (rest x)) (first x) (foo (rest x))))\n#(-> % reverse first)","user":"57615a22e4b0994c1922fb88"},{"code":"(fn l [x] (if (<= (count x) 1) (first x) (l (rest x))))","problem":19,"user":"510fe537e4b04c71fce993dd"},{"problem":19,"code":"(fn [[n & more]] (if (< 0 (count more)) (recur more) n))","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"(fn [[x & etc]] (if (empty? etc) x (recur etc)))","problem":19,"user":"53028354e4b0d8b024fd372b"},{"problem":19,"code":"(fn sean [x] (if (= (count x) 1) (first x) (sean (rest x))))","user":"54d2c4c5e4b0e8a36923e5fa"},{"problem":19,"code":"reduce #(second [%1 %2])","user":"54f7f0cae4b01ecee9d88823"},{"code":"#(first(reverse%))","problem":19,"user":"4eb07be3535d7eef3080733b"},{"code":"(fn mylast [x]\n  (let [end (rest x)]\n \t (if (empty? end)\n       (first x)\n       (mylast end))))","problem":19,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [xs] (if (= 1 (count xs)) (first xs) (recur (rest xs))))","problem":19,"user":"525493bbe4b0541d1855b991"},{"code":"(fn my-last\n  [[h & t]]\n  (if (empty? t)\n    h\n    (my-last t)))","problem":19,"user":"5376d6b6e4b06839e8705e2b"},{"code":"(fn f[x] (first (rseq (vec x))))","problem":19,"user":"4eb03949535d7eef30807339"},{"problem":19,"code":"#(if (list? %)\n   (nth % (- (count %) 1))\n   (get % (- (count %) 1)))","user":"5c2d8e41e4b0d62ef62d9ef4"},{"problem":19,"code":"#(nth % (dec (count %\n                    \n                    )))","user":"5cc3f603e4b0ccb0619627fd"},{"problem":19,"code":"reduce (fn [x y](and y))","user":"53bd65abe4b0d9a98559a6ce"},{"problem":19,"code":"(fn [l] (peek (vec l)))","user":"54ccb15de4b057c6fda3a28e"},{"problem":19,"code":"(fn [[top & left]]\n  (if left\n    (recur left)\n    top))","user":"5bfee3d9e4b0bdcf453d161c"},{"code":"(fn [x] (first (reverse x)))","problem":19,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn my-last [coll]\n  (if (= 1 (count coll)) (first coll) (my-last (rest coll)))\n  )","problem":19,"user":"500adcc9e4b03d00572d2d7c"},{"code":"#(loop [x %] (if (= 1 (count x)) (first x) (recur (rest x))))","problem":19,"user":"52f9de85e4b047fd55836ff1"},{"problem":19,"code":"(fn[coll]\n(nth coll (- (count coll) 1)))","user":"59771fdee4b01722bebd4ce7"},{"problem":19,"code":"(fn f\n  [coll]\n(let [[h & rst] coll]\n  (if (empty? rst)\n    h\n    (recur rst))))","user":"524a9556e4b05ef8e38e64b1"},{"code":"(fn [y]\n  (loop [x y]\n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x)))))","problem":19,"user":"5045ac21e4b01f6c9a8b2371"},{"code":"(fn return-last [x] (first (reverse x)))","problem":19,"user":"51b72f5be4b0d906fcd71d32"},{"code":"(fn [s]\n    (if (next s)\n      (recur (next s))\n      (first s)))","problem":19,"user":"52d6a9c2e4b09f7907dd1365"},{"problem":19,"code":"(fn lst [[fst & rst]] (if (empty? rst) fst (lst rst)))","user":"5747e22ce4b009280f9f2b7c"},{"code":"(fn last0 [x]\n  (if (= (count x) 1) (first x)\n    (last0 (rest x))))","problem":19,"user":"51b73a91e4b0d906fcd71d33"},{"problem":19,"code":"(fn get-last-element\n  [custom-seq]\n  (first (reverse custom-seq)))","user":"53051bf6e4b0d8b024fd3759"},{"code":"(fn [xs]\n  (loop [x xs]\n    (if (empty? (rest x))\n    \t(first x)\n\t\t(recur (rest x)))))","problem":19,"user":"5129039de4b03a34742b4313"},{"problem":19,"code":"(fn [s] \n  (first (reverse s))\n  )","user":"5f08ed43e4b09a3f05b717fc"},{"code":"#((vec %1) (dec (count %1)))","problem":19,"user":"4f592f83e4b0030a34fb2ad2"},{"problem":19,"code":"(fn [m] (let [c (count m)] ((vec m) (dec c))))","user":"569ff6dbe4b0542e1f8d149c"},{"problem":19,"code":"(fn last2 [arr]\n  (loop [arr arr prev nil]\n    (if (seq arr)\n      (recur (rest arr) (first arr))\n      prev)))","user":"58b06b7ce4b0ebc645576cdc"},{"problem":19,"code":"(fn [coll] (nth coll (dec (count coll) )) )","user":"60ad7cbae4b00e9e6653c48f"},{"code":"( fn last-element [x] (nth x (- (count x) 1)))","problem":19,"user":"52be24cae4b07a9af5792317"},{"code":"(fn foo [x] (if (next x) (foo (next x)) (first x)))","problem":19,"user":"4e7b69b2535db169f9c796b0"},{"problem":19,"code":"(fn my-last [lst]\n  (if (empty? lst)\n    (next lst)\n    (if (= (next lst) nil)\n      (first lst)\n      (my-last (rest lst)))))","user":"5a9f005be4b0d174b936c810"},{"problem":19,"code":"(fn last-recur [s] (if (= 1 (count s)) (first s) (last-recur (rest s))))","user":"5decd4fde4b093ff7172757b"},{"code":"(fn [s]\n  (if (= (rest s) [])\n    (first s)\n    (recur (rest s))))","problem":19,"user":"511bb70ee4b00c2a1fa7ff71"},{"problem":19,"code":"(fn [aseq] \n  (nth aseq (- (count aseq) 1)))","user":"555f7ed0e4b0c656e3ff17b8"},{"problem":19,"code":"(fn [s] (loop [head (first s) tail (next s)]\n          (if tail\n            (recur (first tail) (next tail))\n            head)))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":19,"code":"(fn last-e [l]\n  (if (= (count l) 1)\n    (first l)\n    (last-e (rest l))))","user":"503777a4e4b0af0658af77ac"},{"problem":19,"code":"(fn [s] (loop [s s] (let [[x & xs] s] (if-not xs x (recur xs)))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":19,"code":"(fn last-elem\n  [x]\n  (if (= (rest x) ())\n    (first x)\n    (last-elem (rest x))))","user":"57ccc9e3e4b0c746388ab88c"},{"problem":19,"code":"(fn [xs] (let [x (first xs)\n               rxs (rest xs)]\n           (if (= () rxs) x (recur rxs))))","user":"547c0c26e4b0c51c1f4d72e2"},{"problem":19,"code":"#(nth % (dec (count %)))\n\n;; or (comp first reverse)","user":"55702081e4b09a3098a52529"},{"code":"(fn [x]\n  (nth x (- (count x) 1))\n  )","problem":19,"user":"5388a55de4b0640c7a9a58a1"},{"problem":19,"code":"(fn [coll]\n(peek (vec coll))\n)","user":"58dd21a9e4b0a4d5acaab6b3"},{"code":"#(let [[n & r] %]\n  (if (seq r)\n    (recur r)\n    n))","problem":19,"user":"4f32a7f1e4b0d6649770a095"},{"code":"#(loop [l %]\n  (let [x (first l)\n        rest (rest l)]\n    (if (= (count rest) 0)\n        x\n        (recur rest))))","problem":19,"user":"50add9d8e4b0a40c9cfb08cc"},{"code":"(fn myfunc [x] (if (= '() (rest x)) (first x) (myfunc (rest x))))","problem":19,"user":"52e18377e4b09f7907dd1425"},{"problem":19,"code":"(fn foo [lst] \n  (if\n   (= '() (rest lst)) (first lst) (foo (rest lst))\n  )\n)","user":"543d245be4b032a45b869348"},{"problem":19,"code":"(fn func [seq]\n  (if (> (count seq) 1)\n    (func (rest seq))\n    (first seq)))","user":"5ef381a3e4b07c55ae4a053c"},{"code":"(fn mylast [x]\n  (if (next x)\n          (recur (next x))\n          (first x)))","problem":19,"user":"507c465ae4b0a19f8e876e56"},{"code":"(fn [vettore] (first(take-last 1 vettore)))","problem":19,"user":"536e642fe4b0fc7073fd6e6e"},{"problem":19,"code":"#(if-let [n (next %)] \n   (recur n) \n   (first %))","user":"565fe49ee4b068f2fe63dc46"},{"code":"(fn last-element [lst]\n  (if (<= (count lst) 1)\n      (first lst)\n      (last-element (rest lst))))","problem":19,"user":"4fc52278e4b081705acca37c"},{"code":"(fn [ls] (nth ls (- (count ls) 1)))","problem":19,"user":"4ec7d614535d6d7199dd36e7"},{"code":"(fn [x] \n  (loop [[f & more] x]\n    (if\n      (empty? more)\n      f\n      (recur more)\n     )\n    ))","problem":19,"user":"5094057fe4b097f48cc38593"},{"problem":19,"code":"#(if (empty? (rest %)) ( first %) (recur (rest %) ))","user":"5b2c1f60e4b025bcb146f2b1"},{"code":"(fn [inp] (first (reverse inp)))","problem":19,"user":"501eb6d5e4b0cb6ebc0a42e3"},{"problem":19,"code":"(fn [l] (-> l\n            reverse\n            first))","user":"54d468d0e4b0a52adc2e2000"},{"problem":19,"code":"(fn my_last [s]\n  (nth ( reverse s ) 0 )\n  )","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":19,"code":"(fn lst[x]\n  (if (= (count x) 1)\n    (first x)\n    (lst (rest x))))","user":"57f5346de4b0903ccab3dcea"},{"problem":19,"code":";(fn [x]\n;  (loop [item nil from x]\n;    (let [front (first from)]\n;      (cond front (recur front (rest from))\n;            :else   item))))\nreduce (fn [a b] b)","user":"5635adeee4b0bfe05bf117c7"},{"code":"(fn fu2 [x] (first (reverse x)))","problem":19,"user":"50edba8ce4b06330c1f87c47"},{"code":"(fn lst [seq]\n  (nth seq (- (count seq) 1)))","problem":19,"user":"52a2b085e4b04e0c58e87bf5"},{"code":"(fn final [[x & l]]\n  (if (empty? l) x\n    (final l)))","problem":19,"user":"4eca2cea535d6d7199dd3702"},{"code":"(fn [sequence] \n  (let [n (count sequence)]\n    (nth sequence (- n 1))))","problem":19,"user":"4e657c05535d8ccf87e9fe72"},{"code":"(fn lastEl [a] (if (= (count a) 1) (first a) (lastEl (rest a))))","problem":19,"user":"511c7055e4b00c2a1fa7ff79"},{"problem":19,"code":"(fn abc [y]\n  (loop [x y]\n(if (== 1 (count x))\n(first x)\n(recur (rest x))))\n  )","user":"526f670ce4b03e8d9a4a7365"},{"code":"(fn [a] (if (next a) (recur (next a)) (first a)))","problem":19,"user":"5036eba7e4b0af0658af77a5"},{"problem":19,"code":"(fn mylst [x] (nth x (- (count x) 1)))","user":"54290a64e4b01498b1a71b36"},{"code":"(fn tmp [x] (if (< 1 (count x))   (tmp (rest x)) (first x)))","problem":19,"user":"4fcf6abce4b03432b189f411"},{"problem":19,"code":"(fn getlast [x]\n  \n  (if (empty? (rest x))\n  \t(first x)\n  \t(getlast (rest x))\n  )\n  \n  )","user":"54a2c433e4b09f271ff37c5f"},{"problem":19,"code":"(fn [x](first (drop (- (count x) 1) x)))","user":"5cc7ac97e4b0ccb06196283c"},{"problem":19,"code":"(fn \n  [inSeq] \n  (first (reverse inSeq)))","user":"5e1b0140e4b0dc959400851c"},{"problem":19,"code":"(fn\n  [col]\n  (loop [col col]\n    (if (= (count (rest col)) 0)\n      (first col)\n      (recur (rest col)))))","user":"5d78d680e4b02e6b30c9353c"},{"problem":19,"code":"(fn [[f & r]] (if (empty? r) f (recur r)))","user":"55c1eb52e4b0e31453f64970"},{"problem":19,"code":"#(reduce (fn [_ elem] elem) %)","user":"59946856e4b0b211ea3aaac7"},{"code":"(fn [x] (first(reverse x)))","problem":19,"user":"4eb8979b535dfed6da9c6d4a"},{"problem":19,"code":"( fn [coll] (first (reverse coll) ) )","user":"555292aae4b0deb715856df6"},{"problem":19,"code":"(fn last-element [sequence] (if (empty? (rest sequence))\n                                 (first sequence)\n                                 (last-element (rest sequence))))","user":"52ade380e4b0c58976d9ac9b"},{"code":"(fn [s] \n  (if (empty? (rest s)) (first s)\n    (recur (rest s))))","problem":19,"user":"50e82c31e4b0ebbe794eb7da"},{"code":"(fn t [x] (if (= (rest x) ()) (first x) (t (rest x))))","problem":19,"user":"4e39c710535deb9a81d77f45"},{"problem":19,"code":"(fn [a-s]\n\t(loop [a-ss a-s\n\t\tla 1]\n\t\t(if (empty? a-ss)\n\t\t\tla\n\t\t\t(recur (rest a-ss)\n\t\t\t\t(first a-ss)))))","user":"573eb8f2e4b05c31a32c082f"},{"problem":19,"code":"(fn [coll]\n  (get (into [] coll) (- (count coll) 1)))","user":"56ad0123e4b03c432f187350"},{"code":"(fn [s]\n  (if (nil? (next s))\n    (first s)\n    (recur (next s))))","problem":19,"user":"52b955f8e4b07a9af57922bc"},{"code":"(fn [x]\n  (if (> (count x) 1)\n    (recur (rest x))\n    (first x)))","problem":19,"user":"4ea0a7c7535d7eef308072ab"},{"code":"#(.get %(- (count %) 1))","problem":19,"user":"4ec9d95b535d6d7199dd3701"},{"problem":19,"code":"(fn lastt[x](first(reverse x)))","user":"53ada652e4b047364c04446d"},{"problem":19,"code":"#(if (empty? (rest %))\n             (first %)\n             (recur (rest %)))","user":"5d1201fce4b02c15ef02198f"},{"problem":19,"code":"#(let [a (first %) r (rest %)] (if (empty? r) a (recur r)))","user":"58767e82e4b01531a375ea85"},{"code":"(fn [l] (peek (reverse l)))","problem":19,"user":"4e64ae65535d8ccf87e9fe6d"},{"code":"#(loop [s %]\n\t(if (empty? (rest s))\n\t\t(first s)\n\t\t(recur (rest s))\n\t)\n)","problem":19,"user":"53858d5be4b06839e8705f06"},{"code":"(fn get-last [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (get-last (rest coll))))","problem":19,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn [xs] (if (empty? (rest xs)) \n           (first xs) \n           (recur (rest xs))\n           )\n  )","problem":19,"user":"524cd06ae4b0752c4cb68cca"},{"problem":19,"code":"(fn hah [x] (first (reverse x)))","user":"54d58b4be4b0a52adc2e2012"},{"code":"(fn [s]\n  (if (empty? (rest s))\n      (first s)\n      (recur (rest s))))","problem":19,"user":"4ec92a04535d6d7199dd36fa"},{"problem":19,"code":"(fn Last [x] (if (= (rest x) []) (first x) (Last (rest x))))","user":"546146d6e4b01be26fd7469c"},{"problem":19,"code":"(fn [coll] (if (next coll)\n             (recur (next coll))\n             (first coll)))","user":"53dc94c8e4b094d41abdfefc"},{"problem":19,"code":"(fn las [ls]\n  (if (empty? (rest ls))\n    (first ls)\n    (las (rest ls))))","user":"53b7850ee4b047364c0444d0"},{"code":"(fn my_last [x] (cond (= (list (first x)) x) (first x) :else (my_last (rest x))))","problem":19,"user":"4f038496535dcb61093f6b08"},{"problem":19,"code":"(fn [x] (do (first (reverse x))))","user":"576773cde4b0a07e8fc180be"},{"code":"rand-nth","problem":19,"user":"4fc8f1fee4b0ee37620e183f"},{"problem":19,"code":"reduce (fn  [_ y] y)","user":"6028365be4b0d5df2af22242"},{"code":"(fn [seq]\n    (first (reverse seq)))","problem":19,"user":"4feded14e4b0d2a5fc2962ec"},{"problem":19,"code":"(fn \n  [s]\n  (let [[f & r] s]\n    (if (empty? r)\n      f\n      (recur r))))","user":"5a7b363ae4b03baeef9276d9"},{"problem":19,"code":"(fn [ls]\n  (loop [ls ls]\n    (if (empty? ls)\n      nil\n      (if (= (count ls) 1)\n        (first ls)\n        (recur (rest ls))))))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"#(->> % (count) (+ (- 1)) (nth %))","problem":19,"user":"4ebc64db535dfed6da9c6d82"},{"code":"(fn [col] \n  (nth col (- (count col) 1)))","problem":19,"user":"5325cef5e4b09d4e7a9b54e7"},{"problem":19,"code":"(fn last-elem [[n & more]](if more(recur more) n))","user":"592518e8e4b072a2710fce67"},{"problem":19,"code":"(fn [lis] (nth lis (dec (count lis))))","user":"5537b2f1e4b09218d5f44fcf"},{"code":"(fn [y] (if (empty? (rest y)) (first y) (recur (rest y))))","problem":19,"user":"4dd6fa3a535d2dad7130b5ce"},{"problem":19,"code":"(fn mylast [myseq] \n  (if (next myseq)\n          (recur (next myseq))\n          (first myseq)))","user":"546a70bae4b00cfc9eacc159"},{"code":"(fn [a] (-> a reverse first))","problem":19,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn last-elem [x] \n  (if (= (count x) 1) (first x) (last-elem (rest x)))\n)","problem":19,"user":"4fa7ef54e4b081705acca1ca"},{"problem":19,"code":"(fn [numList] (nth numList (- (count numList) 1)))","user":"5565cdace4b0c656e3ff181d"},{"problem":19,"code":"(fn [x] (#(first %) (reverse x)))","user":"5bfada5ee4b0bdcf453d15d2"},{"problem":19,"code":"(fn \n  [ary]\n  (nth ary (- (count ary) 1))\n  )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":19,"code":"(fn get-last [x] ((vec x) (dec (count x))))","user":"5632365ce4b0bfe05bf1179d"},{"problem":19,"code":"(fn rec [args]\n  (if (= 1 (count args))\n    (first args)\n    (rec (rest args))))","user":"5c486dece4b0e06e1360a3c0"},{"code":"(fn newlast [s]\n  (if (next s)\n    (recur (next s))\n      (first s)))","problem":19,"user":"4e858eec535db62dc21a62ed"},{"problem":19,"code":"(fn [[item & coll]]\n  (if (empty? coll)\n    item\n    (recur coll)))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":19,"code":"(fn list [arg] \n  (first (reverse arg)))","user":"57750460e4b0979f8965160c"},{"problem":19,"code":"(fn [param] \n  (loop [ [v & vs] param]\n    (if (empty? vs)\n      v\n      (recur vs))))","user":"53de43c1e4b0d874e779ae31"},{"code":"(fn [s]\n  (if-let [r (next s)]\n    (recur r)\n    (first s)))","problem":19,"user":"53576356e4b04ce2eb3ed27a"},{"problem":19,"code":"(fn [v]\n  (if (= (rest v) ())\n    (first v)\n    (recur (rest v))\n  )\n)","user":"55188c5de4b06a49daca83cc"},{"problem":19,"code":"(fn [xs] \n  (loop [[p & ps] xs]\n    (if (empty? ps)\n      p\n      (recur ps))))","user":"54312081e4b0dad94371f2e3"},{"problem":19,"code":"(fn last-elem [[x & more]]\n    (if more \n    \t(recur more)\n    \tx))","user":"58e63de2e4b056aecfd47cad"},{"code":"#(get (vec %) (- (count %)1))","problem":19,"user":"4e244ed5535d04ed9115e826"},{"problem":19,"code":"(fn last-elm [ls] (\n  if (empty? (rest ls))\n    (first ls)\n    (last-elm (rest ls))\n))","user":"5602cbe5e4b04bb52996e1a9"},{"code":"(fn l [lst] (if (empty? (rest lst)) (first lst) (l (rest lst))))","problem":19,"user":"4f6b7e0be4b07046d9f4efab"},{"problem":19,"code":"(fn [x]\n  (let [c (- (count x) 1)] (first (rest (take-nth c x)))))","user":"5f6c4f6de4b02876ed9fd055"},{"problem":19,"code":"(fn [ss]\n  (let [sn (next ss)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first ss))))","user":"551e6526e4b030e6a24d00e8"},{"problem":19,"code":"(fn iterator [x] (if(=(count x) 1) (first x) (iterator(rest x))))","user":"58e8014be4b056aecfd47ce1"},{"code":"(fn [x] (nth x (- (count x) 1 ) ))","problem":19,"user":"4fdf566fe4b05e33b9224f99"},{"code":"(fn [x] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"4e223bd6535d04ed9115e81c"},{"problem":19,"code":"(fn [lst] (if (= '() (rest lst)) (first lst) (recur (rest lst))))","user":"573d8658e4b05c31a32c0814"},{"problem":19,"code":"(fn [lst]\n  (let [c (count lst)]\n    (get (into [] lst) (- c 1))))","user":"57994779e4b05b1deef9adbd"},{"problem":19,"code":"(fn [list-seq]\n  (first (reverse list-seq)))","user":"58d3d6a3e4b03c36ff7e592b"},{"problem":19,"code":"(fn [xs]\n  (if (seq (rest xs)) (recur (rest xs)) (first xs)))","user":"54ca31e9e4b057c6fda3a253"},{"code":"(fn [x] (nth x (-(count x)1)))","problem":19,"user":"536dcc51e4b0fc7073fd6e62"},{"problem":19,"code":"(fn [xs] (let [n (- (count xs) 1)] (nth xs n) ))","user":"5e1754abe4b00200644e3d53"},{"code":"#(-> (reverse %) first)","problem":19,"user":"5068fa8ee4b0c0169921a8e5"},{"problem":19,"code":"(fn thiago\n  [lista]\n  (nth lista (- (count lista) 1)))","user":"5eec2f79e4b07c55ae4a0504"},{"problem":19,"code":"(fn blast [l] (if (empty? (rest l)) (first l) (blast (rest l))))","user":"59be62d5e4b0a024fb6ae435"},{"problem":19,"code":"(fn ff [l] \n  (if (empty? (rest l))\n    (first l)\n    (ff (rest l))))","user":"5f30296fe4b0574c87022c22"},{"code":"#(nth       % (- (count %) 1) )","problem":19,"user":"4e707c3a535d5021c1a89639"},{"problem":19,"code":"(fn l [[x & y]] (if y (l y) x))","user":"5928d4c0e4b072a2710fcef3"},{"problem":19,"code":"(fn [[f & r]]\n  (if-not r f (recur r)))","user":"594bc16be4b07ddc2dafae39"},{"code":"(fn [xs]\n  (if (next xs)\n      (recur (next xs))\n      (first xs)))","problem":19,"user":"4e524979535d302ef430da70"},{"problem":19,"code":"(fn\n  [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (recur (rest xs))))","user":"59a6185ee4b066c664927d76"},{"problem":19,"code":"(fn last_el [seq] (nth seq (- (count seq) 1)))","user":"54d352f6e4b0e8a36923e604"},{"code":"(fn [x]\n  (first (take-last 1 x)))","problem":19,"user":"4e705aac535d5021c1a89636"},{"code":"(fn get_last [x] (if (> (count x) 1) (get_last (rest x)) (first x)))","problem":19,"user":"4f041ff9535dcb61093f6ba6"},{"problem":19,"code":"(fn f [lst] (first (drop (dec (count lst)) lst)))","user":"5e9636fee4b0fbed045a3816"},{"problem":19,"code":"#((vec %) (- (count%) 1) )","user":"6065569ce4b069485764ddca"},{"problem":19,"code":";#(nth % (- (count %) 1))\n#(first (reverse %))","user":"58136679e4b0f478707a060d"},{"problem":19,"code":"(fn [v] \n  (if (= (count v) 1) \n    (first v) \n    (recur (rest v))))","user":"54a97853e4b09f271ff37cae"},{"problem":19,"code":"(fn getLastElem [x] (nth x (dec (count x))))","user":"545188ebe4b0e397800069b2"},{"problem":19,"code":"(fn [x] \n  (nth x (- (count x) 1) ))","user":"555883c5e4b0deb715856e2d"},{"problem":19,"code":"(fn lasty [x] (if (= (count x) 1) (first x) (lasty (rest x))))","user":"606d241ee4b069485764de11"},{"problem":19,"code":"(fn [s] (if (empty? (rest s))\n          (first s)\n          (recur (rest s))))","user":"5746ca8be4b009280f9f2b67"},{"problem":19,"code":"(fn my-last [s]\n  (if (= (count s) 1)\n      (first s)\n      (recur (rest s))))","user":"57b34512e4b0fbc9809a2777"},{"problem":19,"code":"(fn \n  [coll] \n  (loop [[coll-first & coll-rest] coll]\n         (if (empty? coll-rest) coll-first (recur coll-rest))))","user":"5abbb524e4b073f1774426da"},{"problem":19,"code":"(fn [x] \n  (reduce \n   (fn [y z] z) \n   x))","user":"5c2ca8ebe4b0d62ef62d9ee7"},{"code":"(fn [x]\n  (let [y (into [] x)]\n   (y (- (count y) 1))\n   )\n  )","problem":19,"user":"52420e2fe4b076e5d3121f48"},{"code":"(fn the-last [ liste ] \n  (if (empty? (rest liste))\n    (first liste )\n    (the-last (rest liste ))))","problem":19,"user":"50101970e4b04c11913f949c"},{"problem":19,"code":"(fn lst [x] (if (= 1 (count x)) (first x) (lst (rest x))))","user":"5f9dd3fee4b0715f5002d831"},{"problem":19,"code":"(fn [sq] (loop [[head & tail] sq] (if (empty? tail) head (recur tail))))","user":"58020f42e4b0a837a8b30c68"},{"problem":19,"code":"(fn [sequ] \n  (first(reverse sequ))\n  )","user":"5af39788e4b0cc2b61a3bc8a"},{"code":"(fn last-element [s] (first (reverse s)))","problem":19,"user":"51a57fd5e4b051b01d55f44d"},{"code":"(fn [x] (if (empty? (rest x))\n(first x) (recur (rest x))))","problem":19,"user":"4e3000c8535deb9a81d77f13"},{"problem":19,"code":"(fn [coll] (get (into [] coll) (dec (count coll))))\n;#(nth % (dec (count %)))","user":"5d0beecee4b0cc9c91588239"},{"problem":19,"code":"(fn [x]\n  (loop [a x]\n    (if (< (count a) 2)\n      (first a)\n      (recur (rest a)))))","user":"52626564e4b03e8d9a4a7086"},{"problem":19,"code":"(fn \n  [[current & remaining]]\n    (if remaining\n      (recur remaining)\n      current))","user":"545f0046e4b01be26fd74685"},{"problem":19,"code":"(fn ll [x] (first (reverse x)))","user":"58aec8e1e4b0ebc645576cc1"},{"problem":19,"code":"(fn [x]\n  (loop [contents x]\n    (when contents\n      (if (= (count contents) 1)\n        (first contents)\n        (recur (rest contents))))))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":19,"code":"#(loop [s %]\n   (if (seq (rest s))\n     (recur (rest s))\n     (first s)))","user":"5845f14ee4b089d5ab817e7e"},{"code":"(fn\n  [x]\n    (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"4f443eafe4b0d7d3c9f3fd38"},{"problem":19,"code":"(fn get-last\n  [s]\n  (reduce (fn [a b] (identity b)) s))","user":"5d05fdece4b0cc9c915881e8"},{"problem":19,"code":"(fn [coll] (first (take-last 1 coll)) )","user":"56eaa753e4b04a395b9a040e"},{"code":"(fn [xs]\n  (if (seq (rest xs))\n    (recur (rest xs))\n    (first xs)))","problem":19,"user":"500ff421e4b0ae202717946f"},{"code":"reduce (fn [acc x] x) nil","problem":19,"user":"51131da8e4b0350614f07a83"},{"problem":19,"code":"(fn [[_ & xs]]\n  (if (= (count xs) 1)\n    (first xs)\n    (recur xs)))","user":"5f5a57dee4b0a0bc16850aa5"},{"code":"(fn [s]\n  (if (next s) \n    (recur (next s))\n    (first s)))","problem":19,"user":"51d46747e4b013d740b70de3"},{"problem":19,"code":"(fn last_ele [coll] (if (empty? (rest coll)) (first coll) (last_ele (rest coll))))","user":"5c792c34e4b0fca0c1622834"},{"problem":19,"code":"(fn b[[f & r]](if (empty? r) f (recur r)))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [v] (if (next v) (recur (next v)) (first v)))","problem":19,"user":"53752b27e4b06839e8705e12"},{"problem":19,"code":"(fn [col]\n  (if (-> col rest empty?)\n    (first col)\n    (recur (rest col))))","user":"5d8f4c78e4b0915913b1d3f0"},{"code":"(fn\n  [x]\n  (nth x (- (count x) 1)))","problem":19,"user":"51a85be9e4b08d8ec191b80d"},{"code":"(fn last-elem [x] (#(nth % (- (count %) 1)) x))","problem":19,"user":"4f4263c7e4b0d7d3c9f3fcfe"},{"problem":19,"code":"(fn my-f\n  [sequence]\n  (if (= (count sequence) 1)\n    (first sequence)\n    (my-f (rest sequence))))","user":"5514534ce4b055c2f668d4d3"},{"problem":19,"code":"(fn  [c] ( first (take-last 1 c)))","user":"597236fde4b01722bebd4c7f"},{"problem":19,"code":"(fn [arr] (if-let [xs (seq arr)]\n            (loop [[x & xx] xs]\n              (if (seq xx)\n                (recur xx)\n                x))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":19,"code":"(fn [seq] \n  (nth seq (- (count seq) 1)))","user":"5625f78be4b00e49c7cb47b9"},{"problem":19,"code":"(fn [xs]\n  (loop [x (first xs)\n         xs' (rest xs)]\n    (if (empty? xs')\n      x\n      (recur (first xs') (rest xs')))))","user":"5f37da09e4b0574c87022c5e"},{"problem":19,"code":"(fn l [s]\n  (if (= () (rest s))\n    (first s)\n    (recur (rest s))))","user":"53d6cf90e4b0e771c302545c"},{"problem":19,"code":"(fn [x] (let [[part & remaining] x] (if (= remaining nil) part (recur remaining))))","user":"5a7c5de3e4b03baeef9276e9"},{"problem":19,"code":"(fn [w]\n  \t(first (reverse w))\n)","user":"5643e9f1e4b0018b46ad8c04"},{"code":"(fn mylast [s]\r\n        (if (next s)\r\n          (mylast (next s))\r\n          (first s)))","problem":19,"user":"4ddbd600535d02782fcbe9fb"},{"problem":19,"code":"(fn [xs] (first (into '() xs)))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":19,"code":"(fn der [[n & more]] \n  (if  more\n       (recur more)\n       n))","user":"56e05622e4b0ca2494a09605"},{"code":"(fn [se] (nth se (dec (count se))))","problem":19,"user":"52e7d3d7e4b09f7907dd148e"},{"problem":19,"code":"#(nth %1 (- (count %1) 1) )","user":"51ba3ac0e4b0fe3ecfb4642a"},{"problem":19,"code":"(fn [[first & rest]]\n  (if (empty? rest)\n    first\n    (recur rest)\n  )\n)","user":"5cd67eb2e4b0ccb061962943"},{"problem":19,"code":"(fn [n] (nth n (- (count n) 1) ) )","user":"587b1f20e4b01531a375eaf4"},{"problem":19,"code":"(fn [l] (if (empty? (rest l))\n          (first l) \n          (recur (rest l))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":19,"code":"(fn [col] (reduce (fn [a b] b) col))","user":"5a55114ae4b05d388ecb6c37"},{"code":"(fn [s] (let [r (rest s)]\n          (if (empty? r)\n            (first s)\n            (recur r)\n            )\n          )\n  )","problem":19,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn my [acc] (if (> (.size acc) 1) (my (rest acc)) (first acc)))","problem":19,"user":"50940b6ce4b097f48cc38594"},{"problem":19,"code":"(fn [s] (get (vec s) (dec' (count s)) \"unknown\"))","user":"5d3fa930e4b05dd059a5435f"},{"code":"(fn last-elt [l]\n  (if (empty? (rest l)) (first l) (last-elt (rest l))))","problem":19,"user":"4f2e2ad8e4b0d6649770a066"},{"problem":19,"code":"(fn mylast [seq] (if (empty? (rest seq)) (first seq) (mylast (rest seq))))","user":"5681afaae4b0945ebc182a87"},{"code":"(fn [input] (nth input (- (count input)1)))","problem":19,"user":"53438d3ee4b084c2834f4a20"},{"code":"(fn lastelement [[first & rest]]\n  (if (= nil rest)\n  \tfirst\n  \t(lastelement rest)))","problem":19,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn [l] \n  (reduce \n   (fn [a b] b) l))","problem":19,"user":"51113eb8e4b09ff0d31c7ca9"},{"problem":19,"code":"(fn [stuff] (-> stuff reverse first) )","user":"55c21ecce4b0e31453f64975"},{"problem":19,"code":"#(reduce (fn [_ x] x) nil %)","user":"595eba88e4b066ee0a44b04e"},{"problem":19,"code":"(fn last-element [s]\n  (if (seq (rest s)) (last-element (rest s)) (first s)))","user":"5cb4f632e4b026601754b92b"},{"problem":19,"code":"(fn foo [x] (if (> (count x) 1) \n              (foo (rest x))\n              (first x)))","user":"58103a9ce4b0f478707a05cd"},{"problem":19,"code":"(fn [lst] (loop [head (first lst) tail (rest lst)] (if (empty? tail) head (recur (first tail) (rest tail)))))","user":"57035ccfe4b08d47c97781ef"},{"problem":19,"code":"#(nth % (- (count  %)1))","user":"544864afe4b032a45b8693ca"},{"problem":19,"code":"(fn[v](peek (vec v)))","user":"55a68518e4b09e57187da29b"},{"problem":19,"code":"(fn get-last [x] \n  (first (reverse x)))","user":"5da73b9de4b000c986472c19"},{"problem":19,"code":"(fn [sq] (reduce (fn [a b] b) sq))","user":"558ffca1e4b0277789237668"},{"problem":19,"code":"(fn [the_list] (nth the_list (dec (count the_list))))","user":"56163cc1e4b06b1bb21829ff"},{"code":"(fn [x]\n  (-> x reverse first))","problem":19,"user":"51a38e3be4b0e77c4ca60bf3"},{"problem":19,"code":"(fn xElementFromBehind [x coll] (nth coll (- (count coll) x))) 1","user":"582d51b6e4b051871117bfb8"},{"problem":19,"code":"(fn [x] (let [n (- (count x) 1)] (nth x n)))","user":"56c88f71e4b0ed865f9758d3"},{"code":"(fn [x]\n  (if (empty? (rest x)) \n  (first x)\n  (recur (rest x))\n  )\n)","problem":19,"user":"4e458592535dc968683fc4ac"},{"problem":19,"code":"(fn my-last\n  [x]\n  (nth x (- (count x) 1)))","user":"579d1567e4b05b1deef9ae12"},{"problem":19,"code":"#(loop [s %]\n  (if (empty? (rest s))\n    (first s)\n    (recur (rest s))))","user":"550f2333e4b06e50f9beb173"},{"code":"(fn ended [coll] (first (reverse coll)))","problem":19,"user":"4e2db2da535deb9a81d77f0a"},{"code":"(fn my-last [xs]\n  (if (= nil (next xs))\n     (first xs)\n     (my-last (rest xs))))","problem":19,"user":"533ce38ce4b085b17e897d77"},{"problem":19,"code":"#(if (vector? %) \n     (peek %)\n     (first (take-last 1 %)))","user":"604f9a8be4b039075cafcf65"},{"code":"(fn [as] (if (empty? (rest as)) (first as) (recur (rest as))))","problem":19,"user":"4faa8de0e4b081705acca1f8"},{"problem":19,"code":"(fn [xs]\n  (.get xs (dec (count xs))))","user":"548fa2dfe4b0e286459a1240"},{"code":"#(reduce (fn [a, b] b) %)","problem":19,"user":"52b091b4e4b0c58976d9accc"},{"problem":19,"code":"(fn my-last [input]\n  (loop [input input]\n    (let [input-length (count input)]\n      (if (= input-length 1)\n        (first input)\n        (recur (rest input))))))","user":"5c936583e4b048ec896c5a1c"},{"problem":19,"code":"(fn last-element [seq]\n  (if (> (count seq) 1)\n    (last-element (rest seq))\n    (first seq)))","user":"55134f0ee4b055c2f668d4c3"},{"problem":19,"code":"(fn my-last [sequence] \n\t(nth sequence (- (count sequence) 1)))","user":"55c3ebe7e4b0e31453f6498e"},{"problem":19,"code":"(fn [l]\n  (nth l \n       (dec (count \n             l))))","user":"5481e55ce4b0e286459a1175"},{"code":"(fn [s] \n  (loop [is s]\n    (if (= 1 (count is)) (first is)\n      (recur (rest is)))))","problem":19,"user":"4f038b62535dcb61093f6b1c"},{"code":"#(nth % (- (count %) 1))","problem":19,"user":"4db5c722535d87e67b28fe12"},{"problem":19,"code":"(fn [col]\n  (let [idx (count col)\n        idx (- idx 1)]\n  (nth col idx)))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [x] (let [n (count x)] (nth x (dec n))))","problem":19,"user":"529c585ae4b04e0c58e87b60"},{"code":"(fn last' [seq]\n  (nth seq (- (count seq) 1)))","problem":19,"user":"50b61e7ae4b0e3a8b79a9a68"},{"code":"(fn [x] ( first ( reverse x ) ))","problem":19,"user":"4e56cff0535d8a8b8723a285"},{"code":"(fn r [[head & more]] (if more (r more) head))","problem":19,"user":"50fe9d60e4b03cd852b4e84f"},{"problem":19,"code":"(fn last-element [s] (if (= (count s) 1) (first s) (last-element (rest s))))","user":"561223e5e4b05f002753df8b"},{"problem":19,"code":"reduce(fn [%1 %2] %2)","user":"591c7485e4b09b4ee5954c02"},{"problem":19,"code":"(fn mylast [v]\n  (if (= (rest v) '())\n    (first v)\n    (mylast (rest v))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn foobar [e] (peek (vec e)))","problem":19,"user":"4e78c2ba535db95036265723"},{"problem":19,"code":"#(nth % (dec (count %)))\n;(fn [thing] (nth thing (dec (count thing))))","user":"54f56803e4b0f2f3c5226e91"},{"problem":19,"code":"(fn l\n  [[x & r]]\n  (if (seq r)\n    (l r)\n    x))","user":"56c71414e4b0ed865f9758b6"},{"problem":19,"code":"(fn [seq]\n  (if (= [] (rest seq))\n  \t(first seq)\n  \t(recur (rest seq))\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":19,"code":"(fn rec [[head & tail]] (if (nil? tail) head (rec tail)))","user":"55adcc8fe4b03311e7b732ab"},{"code":"(fn last-element [l] (if (> (count l) 1) (last-element (rest l)) (first l)))","problem":19,"user":"50e86794e4b0ebbe794eb7e4"},{"problem":19,"code":"(fn [ls]\n  (reduce (fn [old new] \n            new)\n           ls))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn dernier [liste] \n  (\n    if (= (count liste) 1)\n    (first liste)\n    (dernier (rest liste))\n  )\n)","problem":19,"user":"4f84400de4b033992c121c2e"},{"problem":19,"code":"(fn [x] (let [a-seq (vec x)]\n          (get a-seq (- (count a-seq) 1))))","user":"57d1c183e4b0bd073c20236e"},{"problem":19,"code":"(fn last- [x] (first (reverse x)))","user":"560fec6ae4b05f002753df64"},{"problem":19,"code":"(fn [s]\n  (loop [x s]\n    ( if (= (rest x) '())\n     (first x)\n     (recur (rest x) \n            ))))","user":"5ce6a0f4e4b0a17bb84e2b8d"},{"problem":19,"code":"(fn[seq](nth seq(-(count seq)1)))\n;(fn [seq] (nth seq (- (count seq) 1)))","user":"5fbf8a86e4b0edf42a5593bf"},{"problem":19,"code":"(fn [x] (#(nth % (dec (count %))) x))","user":"5e735071e4b085ba37836dcf"},{"problem":19,"code":"(fn [l] \n  (loop [remaining l]\n    (let [[part & rest] remaining]\n    (if (empty? rest)\n      part\n      (recur rest)))))","user":"54377355e4b032a45b869305"},{"code":"(fn [xs] (loop [n (count xs) coll xs] (if (>= 0 (dec n)) (first coll) (recur (dec n) (rest coll)))))","problem":19,"user":"5398305fe4b0b51d73faaef6"},{"problem":19,"code":"(fn test [x] (if (empty? (rest x)) (first x) (test (rest x))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":19,"code":"(fn end [x]\n  (if (= (count x) 1)\n    (first x)\n    (end (rest x))))","user":"53c9d29ae4b00fb29b2212c2"},{"problem":19,"code":"(fn [list] (\n     let [r (reverse list)]\n        (first r)\n))","user":"5949274ce4b07ddc2dafadd2"},{"problem":19,"code":"(fn get-last [x]\n  (if (= (count (rest x)) 0) \n    (first x)\n  \t(get-last (rest x))\n  )\n)","user":"5ce4d02ae4b0a17bb84e2b64"},{"problem":19,"code":";#(first (reverse %))\n(fn [x] (first (reverse x)))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":19,"code":"(fn lasti[vect]\n  (loop [elem vect res 0]\n    (if (seq elem)\n      (recur (rest elem) (first elem))\n      res)))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [coll]\n  (loop [x (first coll)\n         coll (rest coll)]\n    (if (empty? coll)\n      x\n      (recur (first coll) (rest coll)))))","problem":19,"user":"52b94e26e4b07a9af57922b9"},{"problem":19,"code":"(fn [[collhead & colltail]] (if (empty? colltail)\n                              collhead\n                              (recur colltail)))","user":"5836bc20e4b089d5ab817d03"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (= xs nil)\n    x\n    (recur xs)))","user":"543d4640e4b032a45b86934b"},{"code":"(fn getlast[x] ((vec x)(- (count x) 1)))","problem":19,"user":"4f88d9d6e4b033992c121c70"},{"code":"(fn nam [x] (nth x (- (count x) 1)))","problem":19,"user":"52ff5c03e4b0d8b024fd3705"},{"problem":19,"code":"#(if (= 1(count %))\n    (first %)\n    (recur (rest %)))","user":"5a8aa992e4b05369db4d24d8"},{"problem":19,"code":"(partial reduce (fn [ _ s] s))","user":"56a72c0de4b0542e1f8d14f7"},{"code":"(partial reduce (fn [ft st] st))","problem":19,"user":"51b6a51ce4b02e5820733410"},{"code":"#(if (next %1)\n  (recur (next %1))\n  (first %1))","problem":19,"user":"4ec6157b535d6d7199dd36c2"},{"problem":19,"code":"(fn [values] (first (reverse values)))","user":"5463c824e4b01be26fd746c5"},{"problem":19,"code":"(fn lst [s] (if (seq (rest s)) (lst (rest s)) (first s)))","user":"53d86564e4b0e771c302546b"},{"problem":19,"code":"(fn\n  [lst]\n  (nth lst (-(count lst) 1)))","user":"5cd30a77e4b0ccb061962906"},{"problem":19,"code":"(fn [xs] (->> xs reverse first))","user":"55db2a13e4b0e31453f64ae2"},{"code":"(fn flast [x] (nth x(- (count x) 1)))","problem":19,"user":"4eb85f00535dd6025b394d1e"},{"code":"(fn lastl [x] (nth x (dec(count x))))","problem":19,"user":"50f4894be4b004d364930528"},{"problem":19,"code":"(fn my-fun [in-seq] (-> in-seq (reverse) (first)))","user":"571d9669e4b0145328a7627f"},{"code":"(fn  l [x] (\n    if (= (rest x) '())\n    (first x)\n    (l (rest x))\n  )\n)","problem":19,"user":"4f73054fe4b07046d9f4f03e"},{"problem":19,"code":"(fn last_list [l]\n\t(let [r (rest l)] (if (= r '()) (first  l) (last_list r))))","user":"569cb441e4b0542e1f8d1466"},{"problem":19,"code":"(fn [s] \n  \"Gets the last element of a sequence.\"\n  (-> s\n      reverse \n      first))","user":"5537cbaee4b09218d5f44fd3"},{"problem":19,"code":"#(loop [x %] \n    (if (empty? (rest x))\n      (first x)\n    (recur (rest x))))","user":"558fb218e4b0277789237665"},{"problem":19,"code":"(fn[coll](first(reverse coll)))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn f [xs] (if (empty? (rest xs)) (first xs) (f (rest xs))))","problem":19,"user":"52e702dce4b09f7907dd147f"},{"code":"(fn [lst]\n  (nth lst (- (count lst) 1)))","problem":19,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn [lst] (nth lst (dec (count lst))))","problem":19,"user":"4ee271e2535d10e5ff6f5369"},{"problem":19,"code":"(fn ll [coll] \n  (if (= (count coll) 1) \n    (first coll) \n    (ll (rest coll)) ))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [xs]\n  (if (= (rest xs) '())\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":19,"code":"(fn last-p [s] (if (empty? (rest s)) (first s) (last-p (rest s))))","user":"565dcec9e4b068f2fe63dc29"},{"problem":19,"code":"(fn [[f & r]] (if r (recur r) f))\n\n;; #(-> % vec peek)","user":"53e3f7a8e4b036ad0777e408"},{"code":"(fn [lst] (reduce (fn [x y] y) lst))","problem":19,"user":"4f07ad89535dcb61093f6c2a"},{"code":"(fn [s] (if (next s) (recur (next s))  (first s)))","problem":19,"user":"536f9436e4b0fc7073fd6e82"},{"code":"(fn last-element [list] (first (reverse list)))","problem":19,"user":"4ec3b393535dcc7ae8597d59"},{"code":"(fn [seq]\n  (if \n    (= 1 (count seq))\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"4df6646e535d08e6dec9fe34"},{"code":"(fn [l] (nth (reverse l) 0))","problem":19,"user":"5141c8e4e4b0b50abeb46b16"},{"problem":19,"code":"(fn [d] (if (= (second d) nil) (first d) (recur (rest d))))","user":"5dbc227be4b09f47823971b0"},{"code":"(fn mylast [coll] (nth coll (- (count coll) 1)))","problem":19,"user":"510d59cce4b078ea71921134"},{"problem":19,"code":"(fn\n  [seq1]\n  (-> (reverse seq1) (first)))","user":"540efe2ee4b0addc1aec6724"},{"problem":19,"code":"(fn mlast [x]\n    (nth x (- (count x) 1)))","user":"5a42dbbbe4b0447ef91cc5fd"},{"problem":19,"code":"(fn lastElement [paramList] (nth paramList (- (count paramList) 1)))","user":"548f3ee4e4b0e286459a1237"},{"code":"(fn qlast [x] (first (take-last 1 x)))","problem":19,"user":"5002f567e4b0678c553fc430"},{"problem":19,"code":"(fn [x](nth x (- (count x)1)))","user":"546b833ce4b00cfc9eacc16b"},{"code":"(fn [sequencia] \n  (first (reverse sequencia)\n  )\n)","problem":19,"user":"527c040be4b03e8d9a4a75a7"},{"problem":19,"code":"#(-> %1\n    reverse\n    first)","user":"538db083e4b0b51d73faae74"},{"problem":19,"code":"#(first\n  (drop (- \n        (count %)\n        1)\n       %))","user":"5570a594e4b09a3098a52530"},{"problem":19,"code":"(fn rec [l]\n  (if (empty? (rest l))\n    (first l)\n    (rec (rest l))))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":19,"code":"(fn my-last [l] (if (next l) (my-last (next l)) (first l)))","user":"54570d08e4b080a794c2c888"},{"problem":19,"code":"(fn [list]\n  (let [x (- (count list) 1)]\n    (get (vec list) x)))","user":"5756e218e4b02ea1147992e5"},{"problem":19,"code":"(fn [elements] (first (take-last 1 elements)))","user":"551535bde4b055c2f668d4de"},{"problem":19,"code":"(fn [[& other]] (first (reverse other)))","user":"57b35ecbe4b0fbc9809a277e"},{"code":"(fn [ls] (first (reverse ls)))","problem":19,"user":"504db141e4b021508a333965"},{"problem":19,"code":"(fn get-last [s]\n  (nth s (- (count s) 1)))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":19,"code":"(fn [seq] \n  (if (next seq) \n    (recur (next seq))\n    (first seq))\n)","user":"5422a55ce4b01498b1a71ac4"},{"problem":19,"code":"(fn [seq] \n  (let [c (-> seq \n              (count) \n              (- 1)) \n        s (if (vector? seq) \n            seq\n            (into [] seq))]\n    (get s c)))","user":"59f75327e4b0966464fe6aec"},{"code":"(fn ml [c]\n  (if (= 1 (count c))\n    (first c)\n    (ml (rest c))))","problem":19,"user":"50d82bd7e4b01f0871336e64"},{"problem":19,"code":"(fn a [[x & xs]] (if xs (a xs) x))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn mylast [x]\n  (if (= '() (rest x))\n    (first x)\n    (mylast (rest x))\n    ))","problem":19,"user":"5252045ae4b0541d1855b884"},{"problem":19,"code":"(fn very-rest [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (very-rest (rest coll))\n  ))","user":"5797d4bae4b039eba2ecb107"},{"code":"(fn [[x & more]]\n  (if more\n    (recur more)\n    x))","problem":19,"user":"4fb79872e4b081705acca2d2"},{"problem":19,"code":"(fn get_last\n  ([my_list]\n   (get_last (rest my_list) (first my_list)))\n  ([my_list previous] previous\n   (if (empty? my_list) previous\n     (recur (rest my_list) (first my_list))\n   ))\n)","user":"5e4277cfe4b01d43a70e8e67"},{"problem":19,"code":"(fn [myseq]\n  (nth myseq (- (count myseq) 1)))","user":"5bb5cd43e4b0a20761a23575"},{"problem":19,"code":"#(loop [coll %] (if (empty? (rest coll)) (first coll) (recur (rest coll))))","user":"55eeb37ae4b0121d4835fdf3"},{"problem":19,"code":"(fn get-last [x]\n  (if (= (count x) 1)\n    (first x)\n    (get-last (rest x))))","user":"51eda45ce4b0bb507043159b"},{"problem":19,"code":"(fn [coll] (first(take-last 1 coll)))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (= (count xs) 0) x (recur xs)))","user":"5b9bfe0be4b0c0b3ffbd4b10"},{"problem":19,"code":"(fn\n  [l]\n  (loop\n    [[h & t] l]\n    (if (empty? t)\n      h\n      (recur t))))","user":"56b09f9ce4b0982f16b37ddc"},{"code":"(fn vika [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"529264f2e4b0239c8a67af2c"},{"code":"(fn [data] (nth data (- (count data) 1)))","problem":19,"user":"501d0321e4b066e56b9d0b1d"},{"problem":19,"code":"(fn [s] (let [l (count s)] (nth s (- l 1))))","user":"5f985283e4b0715f5002d800"},{"code":"reduce #(second (vector % %2))","problem":19,"user":"501d52a8e4b066e56b9d0b20"},{"problem":19,"code":"(fn [[f & r]]\n  (if (empty? r)\n    f\n    (recur r)))","user":"53ebf2dee4b036ad0777e4fe"},{"code":"(fn [coll]\n  (if (seq (rest coll))\n    (recur (rest coll))\n    (first coll)))","problem":19,"user":"52e6aea1e4b09f7907dd147c"},{"code":"(fn [l] \n    (cond \n       (empty? (rest l) ) (first l) \n       :else (recur (rest l))\n     \n     )\n  \n  )","problem":19,"user":"51bc1d76e4b0fe3ecfb46450"},{"code":"(fn [coll]\n  ((fn [coll el] \n     (if (empty? coll)\n         el\n         (recur (rest coll) (first coll)))) \n  (rest coll) (first coll)))","problem":19,"user":"51736d4de4b00f4b6b0490d7"},{"code":"(fn nlast[x] \n  (if (= (count x) 1)\n    (first x)  \n    (nlast (rest x)) \n  )\n)","problem":19,"user":"50a628e3e4b0aa96157e2620"},{"code":"(fn mylast [x] \n  (let [r (rest x)] \n    (if (empty? r) (first x) (mylast r))))","problem":19,"user":"4f4e11bfe4b03ad3f0c10cb7"},{"code":"#(-> (reverse %) (first))","problem":19,"user":"4f329974e4b0d6649770a093"},{"problem":19,"code":"(fn [coll]\n             ( if (next coll)\n               (recur (rest coll))\n               (first coll)))","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [s]\r\n  (loop [[head & tail] s]\r\n    (if (nil? tail)\r\n      head\r\n      (recur tail))))","problem":19,"user":"4efb6411535dced4c769f277"},{"problem":19,"code":"#(let [c (dec (count %) )]\n    (nth % c))","user":"53aebc94e4b047364c044478"},{"code":"(fn m [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"4f0de19b535d0136e6c2231c"},{"code":"(fn [ aseq ](first (reverse aseq)))","problem":19,"user":"51f59607e4b0abb92f97f9d5"},{"problem":19,"code":"(fn [l]\n  (loop [[head & tail] l]\n     (if (= tail nil)\n       head\n       (recur tail))))","user":"56a1227fe4b0542e1f8d14ac"},{"code":"(fn l [[head & tail]] (if (empty? tail) head (l tail)))","problem":19,"user":"536c6f20e4b0fc7073fd6e3d"},{"problem":19,"code":"(fn\n  [els]\n  (loop [[el & rest] els]\n    (if (nil? rest)\n        el\n        (recur rest))))","user":"55acab76e4b03311e7b73294"},{"code":"(fn[l](first (reverse l)))","problem":19,"user":"4ecd2735535d23f036227703"},{"problem":19,"code":"#(loop [l %]\n        (let [[c & remaining] l]\n          (if (empty? remaining) c (recur remaining)))\n        )","user":"5903e7a7e4b022d14a2aafb7"},{"problem":19,"code":"(fn my-last [[n & cap]]\n  (if cap\n    (my-last cap)\n    n))","user":"60bb21d5e4b0e0fa5f1b4281"},{"code":"(fn myLast [c]\n  (if (= 1 (count c))\n    (first c)\n    (recur (rest c))))","problem":19,"user":"4dcc2435535d5973398f9290"},{"code":"(fn [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn retornaUltimo [colecao]\n  (nth colecao (- (count colecao) 1))\n  )","problem":19,"user":"4e905ed4535d65386fec2154"},{"code":"#(reduce (fn [a b] b) %)","problem":19,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":19,"code":"(fn [v]\n   (reduce #(identity %2) v))","user":"5e3a8929e4b01d43a70e8de3"},{"problem":19,"code":"reduce (fn [x    \n            \n            \n            \n            \n            y] y)","user":"5b77248ae4b047b03b2036e7"},{"code":"(fn mylast [theseq] (if\n  (= () (rest theseq))\n    (first theseq)\n    (mylast (rest theseq))\n)\n)","problem":19,"user":"4e3df106535deb9a81d77f58"},{"code":"(fn last-element [list] \n  (first (reverse list)\n         )\n  )","problem":19,"user":"511ad71fe4b07ab9ec45617d"},{"problem":19,"code":"#(nth (vec %) (- (count %) 1))","user":"55a37e1fe4b0acc240e31539"},{"code":"(fn my-last [coll] \n  (if (empty? (rest coll)) \n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"4eb513fe535d7eef30807364"},{"problem":19,"code":"(fn [x] (if (empty? (rest x))\n          (first x)\n          (recur (rest x))))","user":"53b8b37be4b047364c0444e1"},{"problem":19,"code":"(fn [xs]\n  (first (drop\n   (- (count xs) 1)\n   xs)))","user":"54dc84ede4b024c67c0cf784"},{"code":"(fn [x]\n  (first\n   \t(reverse x)))","problem":19,"user":"522a1248e4b0590a43906cf3"},{"code":"(fn last-item [l] (first (reverse l)))","problem":19,"user":"4e4b4564535dc968683fc4d3"},{"problem":19,"code":"(fn [s]\n  (let [n (count s)]\n    (cond\n     (> n 0) (nth s (dec n))\n     :else nil)))","user":"541df619e4b01498b1a71a87"},{"problem":19,"code":"(fn [xs] \n    (nth xs \n        (dec (count xs))\n   \t )\n )","user":"55cc951fe4b0e31453f64a11"},{"problem":19,"code":"(fn [args]\n  (first (reverse args)))","user":"5372c830e4b06d7f452d9dff"},{"problem":19,"code":"(fn find-last [s] (nth s (- (count s) 1)))","user":"58a16387e4b02bd94d917eb1"},{"problem":19,"code":"(fn cool [[head & tail]] (if (empty? tail) head (cool tail)))","user":"585bcd51e4b0f14aab7c8771"},{"code":"(fn [col] (-> col reverse first))","problem":19,"user":"4e794004535db169f9c796a1"},{"code":"(fn my-last [coll]\n  (if (next coll) (recur (next coll)) (first coll)))","problem":19,"user":"523aa92ae4b081681ca7adcd"},{"code":"(fn [x] \n  (first \n   (rseq (vec x))\n   )\n  )","problem":19,"user":"4fbf5607e4b081705acca319"},{"code":"(fn lastt [coll] (if (next coll) (lastt (next coll)) (first coll)))","problem":19,"user":"520a6aace4b01da9d47a99d9"},{"problem":19,"code":"(fn mylast [xs]\n  (if (= 1 (count xs))\n      (first xs)\n      (mylast (rest xs))))","user":"55b5782ae4b01b9910ae2989"},{"code":"(fn the_last [thingy](first(reverse thingy)))","problem":19,"user":"533b6f01e4b0e30313ee6cce"},{"problem":19,"code":"(fn [s]\n  (loop [s s]\n\t(if (== (count s) 1)\n    \t(first s)\n    \t(recur (rest s)))))","user":"5a805f7ee4b00b71e582a04d"},{"problem":19,"code":"(fn [mygroup] (nth mygroup (dec (count mygroup))))","user":"5900e067e4b0438e51c2d031"},{"code":"(fn [x]\n  (loop [y x]\n    (if (= 1 (count y))\n      (first y)\n      (recur (next y)))))","problem":19,"user":"52f2cfb5e4b05e3f0be25eff"},{"problem":19,"code":"(fn l [xs] (if (empty? (rest xs)) (first xs) (l (rest xs))))","user":"545baec3e4b01be26fd74655"},{"problem":19,"code":"(fn [lista] (nth lista (- (count lista) 1)))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":19,"code":"(fn [s] \n  (if \n    (next s) \n    (recur (next s)) \n    (first s)))","user":"53dbac68e4b094d41abdfef4"},{"problem":19,"code":"(fn last-el [x]\n         (if (not (next x))\n           (first x) \n           (last-el (next x))))","user":"5c6314c5e4b0fca0c1622658"},{"problem":19,"code":"#(if (empty? (rest %))\n      (first %)\n      (recur (rest %)))","user":"5908882de4b047aa04b19979"},{"code":"(fn l4st [[x & xs]] (if (empty? xs) x (l4st xs)))","problem":19,"user":"5131104ae4b09e21d785bdfe"},{"code":"(fn [sqnc] (first (reverse sqnc)))","problem":19,"user":"5116afdee4b0063b4e3e16d5"},{"problem":19,"code":"(fn [sek] (nth sek(- (count sek) 1)))","user":"565d6d34e4b068f2fe63dc23"},{"code":"#(peek(apply vector %))","problem":19,"user":"4f03b7d0535dcb61093f6b54"},{"code":"(fn [x]\n   (if (<= (count x) 1)\n     (first x)\n     (recur (rest x))))","problem":19,"user":"527188cee4b03e8d9a4a73f6"},{"problem":19,"code":"(fn [l]\n  (if (seq (rest l))\n    (recur (rest l))\n    (first l)))","user":"556e3b45e4b09a3098a52513"},{"problem":19,"code":"(fn [s]\n  (first\n   (reverse s)))","user":"54c31f1be4b045293a27f609"},{"problem":19,"code":"(fn last-elm [x]\n  (first (reverse x)))","user":"5703d21ae4b08d47c97781ff"},{"problem":19,"code":"(fn [x]\n  ( first ( reverse x ))\n  )","user":"5784578de4b0ebec4cfb74c4"},{"code":"(fn [s] (first(take-last 1 s)))","problem":19,"user":"4f030d65535dcb61093f6a4e"},{"code":"(fn mylast [liste] (\n  if (= 1 (count liste)) \n    (first liste) \n    (mylast (rest liste))\n))","problem":19,"user":"4f72e09de4b07046d9f4f03b"},{"code":"(fn [ls] (if (nil? (next ls)) (first ls) (recur (rest ls))))","problem":19,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":19,"code":"(fn rec [x] (if (= (rest x) '()) (first x) (rec (rest x))))","user":"56e9d3e6e4b04a395b9a03fd"},{"problem":19,"code":"(fn lastElement [seq] (if (empty? (rest seq)) (first seq) (lastElement (rest seq))))","user":"5b90f433e4b0c0b3ffbd4a14"},{"problem":19,"code":"(fn\n  [lst]\n  (loop [[elem & rem] lst]\n    (if (empty? rem)\n      elem\n      (recur rem))))","user":"56f8055ee4b08e7d20b96835"},{"problem":19,"code":"(fn my-last [x]\n  (if (= (rest x) '())\n    (first x)\n    (my-last (rest x))))","user":"562e05e0e4b0a45d2ff83023"},{"code":"(fn [v]\n  (nth v (dec (count v))))","problem":19,"user":"53183c38e4b08068f379ed6b"},{"problem":19,"code":"(fn last-element [s]\n\t(if (= (count s) 1) \n  \t\t(first s)\n  \t\t(last-element (rest s))))","user":"5e348806e4b0650de70e2b1c"},{"code":"(fn mylast [[x & xs]]\n  (if (empty? xs)\n    x\n    (mylast xs)))","problem":19,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":19,"code":"(fn  [x] (first (reverse x)))","user":"557ad449e4b05c286339e0a6"},{"code":"(fn [x] (loop [i x] (if (= (rest i) ()) (first i) (recur (rest i)))))","problem":19,"user":"4f04165d535dcb61093f6b9c"},{"code":"#(let [size (- (count %) 1)] (nth % size))","problem":19,"user":"4f6d23cde4b07046d9f4efc6"},{"problem":19,"code":"(fn [alist] (nth alist (- (count alist) 1)))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":19,"code":"(fn my-lst [l]\n    (let [l2 (rest l)]\n      (if (= (count l2) 1)\n        (nth l2 0)\n        (my-lst l2))))","user":"542b9d8ae4b0dad94371f28f"},{"problem":19,"code":"reduce (fn [a v] v)","user":"5ddd7359e4b0948ae9d9adc5"},{"problem":19,"code":"(fn [s] (loop [[x & xs] s] (if xs (recur xs) x)))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn f ([c]\n        (cond\n          (= (next c) nil) (first c)\n          :else (f (next c))\n          )\n        )\n   )","problem":19,"user":"53307da1e4b019098a6f8b5e"},{"problem":19,"code":"(fn lastish [x] (first(reverse x)))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":19,"code":"(fn fuck [x] (if (empty? (rest x)) (first x) (fuck (rest x))))","user":"55a3ca84e4b0acc240e3153c"},{"problem":19,"code":"#(reduce (fn [a e] e) %)","user":"55e4c3d7e4b050e68259b456"},{"code":"(fn my-last [x] (if (= '() (rest x)) (first x) (my-last (rest x))))","problem":19,"user":"4fb2101ce4b081705acca284"},{"problem":19,"code":"(fn w [x] (first (reverse x)))","user":"54e49c6ce4b024c67c0cf7e7"},{"problem":19,"code":"(fn [x] \n  (loop [[h & t] x]  \n    (if (= t nil) h (recur t))))","user":"581f82e2e4b04b46fc4b0f41"},{"code":"(fn f [s]\n  (if (= (rest s) '())\n    (first s)\n    (f (rest s))))","problem":19,"user":"522fdff7e4b032bbe342416c"},{"problem":19,"code":"(fn [coll] (nth coll (- (count coll) 1 )))","user":"5bb189c5e4b0a20761a234ff"},{"code":"(fn [coll]\n  (nth coll(dec(count coll))))","problem":19,"user":"4ffb529be4b0678c553fc3cd"},{"code":"(fn mylast [l]\n  (if (= (count l) 1)\n    (first l)\n    (mylast (rest l))))","problem":19,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":19,"code":"; (fn [coll] (-> coll (reverse) (first)))\n(fn [coll] \n  (loop [c (first coll)\n         r (rest coll)]\n    (if (empty? r)\n      c\n      (recur (first r) (rest r)))))","user":"5641296de4b08d4f616f5ef4"},{"code":"(fn return-last [x] (if (empty? (rest x)) (first x) (return-last (rest x))))","problem":19,"user":"5091945ee4b0742c82730af0"},{"problem":19,"code":"(fn [n]\n   (nth n (dec (count n))))","user":"5f621940e4b02876ed9fd009"},{"problem":19,"code":"(fn [seq] (if (= (count seq) 1) (first seq) (recur (rest seq))))","user":"579332c2e4b0e215f87e8452"},{"problem":19,"code":"(fn lst [xs] (loop [x xs] (if (nil? (seq (rest x))) (first x)  (recur (rest x)))))","user":"5ed4a4ade4b016b56eae05cd"},{"problem":19,"code":"(fn myFun [myVec] \n  (let [length (count myVec)] \n    (nth myVec (dec length))))","user":"5cf9bfd9e4b0cc9c91588131"},{"problem":19,"code":"(fn las[xs] (first (reverse xs)))","user":"5c619cb1e4b0fca0c1622636"},{"code":"(fn [a] (first (reverse a)) )","problem":19,"user":"4f98c161e4b0dcca54ed6cf5"},{"problem":19,"code":"(fn ok [[x & xs]] (if xs (recur xs) x))","user":"557f748ae4b05c286339e0df"},{"code":"(fn [r]\n  (loop [r r]\n    (if (empty? (rest r))\n      (first r)\n      (recur (rest r))\n    )\n  )\n)","problem":19,"user":"50d3ec8be4b030b634c368bb"},{"code":"(fn[list] (first (reverse list)))","problem":19,"user":"4eef3afe535d305ff5cb7f1d"},{"code":"(fn my-last [elements]\n  (let [the-rest (rest elements)]\n    (if (empty? the-rest)\n      (first elements)\n      (my-last the-rest))))","problem":19,"user":"52f8b86de4b047fd55836fdb"},{"problem":19,"code":"(fn [z] (reduce (fn [x y] y) [] z))","user":"53b15e65e4b047364c04448e"},{"code":"(fn final [[x & xs]]\n  (if (empty? xs) x (recur xs)))","problem":19,"user":"4efa3d4b535dced4c769f270"},{"problem":19,"code":"(fn last1 [xs] (if (= (count xs) 1) (first xs) (last1 (rest xs))))","user":"589c7c8ce4b00487982d5361"},{"code":"(fn ! [items]\n  (if (empty? (rest items))\n    (first items)\n    (! (rest items))))","problem":19,"user":"4e93600b535dbda64a6f6b0e"},{"problem":19,"code":"(fn lastone [coll] (nth coll (dec (count coll))))","user":"5454bd9be4b0e397800069db"},{"code":"#(loop [x %] (if (nil? (next x))\n                (first x) \n                (recur (next x))))","problem":19,"user":"52f28593e4b05e3f0be25ef9"},{"code":"(fn L [V] (if (empty? (rest V)) (first V) (L (rest V))))","problem":19,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"#(loop [elements %]\n  (if (= (count elements) 1)\n    (first elements)\n    (recur (rest elements))))","problem":19,"user":"523288fee4b035af41902a88"},{"code":"(fn [x] ( first (take-last 1 x )))","problem":19,"user":"4fe2c929e4b03a47b42452d0"},{"code":"(fn my-last [sequence]\n  (if (= 1 (count sequence))\n    (first sequence)\n    (recur (rest sequence))))","problem":19,"user":"4e77f1f6535d324fb2983d73"},{"code":"(fn [x] (first(rseq(vec x))))","problem":19,"user":"51cc2d84e4b02254fc79486c"},{"code":"#(reduce (fn [_ e] e) %)","problem":19,"user":"4fb1d7ace4b081705acca281"},{"problem":19,"code":"(fn [l] (if (= [] (rest l))\n          (first l)\n          (recur (rest l))))","user":"56df5b74e4b0ca2494a095ed"},{"code":"(fn [l]\n  (if (empty? (rest l))\n      (first l)\n      (recur (rest l))))","problem":19,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn [x] ((vec x) (- (count (vec x)) 1)))","problem":19,"user":"4f75f498e4b0fbe0118ec567"},{"problem":19,"code":"(fn last-el [seq]\n        (reduce (fn [rest el] el)\n                []\n                seq\n                ))","user":"5a55c713e4b05d388ecb6c43"},{"problem":19,"code":"(fn mylast [[fst & rst]]\n\t(if (= rst nil)\n      \tfst\n      \t(mylast rst)))","user":"5e20a159e4b05b4b01516118"},{"problem":19,"code":"(fn [a-seq]\n  (loop [s a-seq]\n    (if (= (count s) 1)\n      (first s)\n      (recur (rest s)))))","user":"5443bbe9e4b032a45b869389"},{"problem":19,"code":"(fn [xs] (loop [[x & rest] xs] (if (= nil rest) x (recur rest))))","user":"5f6cb2a5e4b02876ed9fd057"},{"code":"(fn lst [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (recur (rest xs))))","problem":19,"user":"52d660eae4b09f7907dd1356"},{"code":"reduce #(second [% %2])","problem":19,"user":"50c75d38e4b00bb60fe0c532"},{"problem":19,"code":"(fn get-last [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (get-last (rest xs))))","user":"55f9acade4b03cbcff9738c7"},{"problem":19,"code":"#(let [items (count %)]\n    (nth % (- items 1)))","user":"5cd8d4a1e4b05ee0cb3116f3"},{"problem":19,"code":"(fn [[front & items]]\n  (if (empty? items)\n    front\n    (recur items)))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":19,"code":"reduce #(second %&)","user":"5cc2adefe4b0ccb0619627df"},{"problem":19,"code":"#(first (reverse %))\n;;#(nth % (dec (count %)))","user":"5787ce76e4b0ebec4cfb750e"},{"code":"#(loop [r %] (if (= 1 (count r)) (first r)\r\n      (recur (rest r))))","problem":19,"user":"4e5a3891535d8a8b8723a2aa"},{"code":"(fn [x]\n  (if (next x)\n  (recur (next x))\n  (first x)))","problem":19,"user":"4db86572535d1e037afb2192"},{"problem":19,"code":"(fn der [x] (if (.isEmpty (rest x)) (first x) (der (rest x))))","user":"56eaf8f1e4b04a395b9a0419"},{"problem":19,"code":"(fn [s]\n  (reduce (fn [acc e] e) s))","user":"56d2a103e4b0ea9b8538f7a3"},{"code":"(fn [[ head & rest ]]\n  (if (= rest nil) head (recur rest)))","problem":19,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn l[s] (first (reverse s)))","problem":19,"user":"52247d56e4b01819a2de42db"},{"problem":19,"code":"(fn reclast [a]\n  (if (= 1 (count a))\n    (first a)\n    (reclast (rest a))))","user":"55b738cfe4b01b9910ae29a1"},{"problem":19,"code":"(fn [x]\n  (let [nn (rest x)]\n    (if (empty? nn)\n    \t(first x)\n    \t(recur nn ))\n    ))","user":"5e10f181e4b099d064962fd2"},{"problem":19,"code":"#(if(empty? (rest %)) (first %) (recur (rest %)))","user":"5fdd15f7e4b05ac5b16ea141"},{"problem":19,"code":"(fn [coll]\n  (if-let [c (seq (rest coll))]\n    (recur c)\n    (first coll)))","user":"5afecee2e4b0cc2b61a3bd28"},{"code":"(fn [arg]\n (first (reverse arg)))","problem":19,"user":"50a173e4e4b08df8156e9e68"},{"problem":19,"code":"(fn [[fst & rst]] (if (nil? rst) fst (recur rst)))","user":"5de5fd64e4b0948ae9d9ae20"},{"problem":19,"code":"(fn [xs] (get (vec xs) (- (count xs) 1)))","user":"609ae3aae4b00e9e6653c40d"},{"code":";(fn [x] (nth x (- (count x) 1)))\n\n#(nth % (- (count %) 1))","problem":19,"user":"52fc8bcde4b047fd5583701b"},{"problem":19,"code":"(fn l [x](first (reverse x)))","user":"54630cdae4b01be26fd746bb"},{"problem":19,"code":"(fn [my-list]\n  (get (vec my-list) (- (count my-list) 1))\n  )","user":"551e7267e4b030e6a24d00e9"},{"problem":19,"code":"(fn [coll] (nth coll (-(count coll)1)))","user":"552ac48ee4b0ffed3738f957"},{"code":"(fn last' [l] (if (= (rest l) (empty l)) (first l) (last' (rest l))))","problem":19,"user":"51e7ca56e4b0a3e081b8cbf1"},{"problem":19,"code":"(fn [coll] (first(reverse coll)) )","user":"58c6f9c1e4b021aa9917ed6b"},{"code":"(fn [s]\n  (first (take-last 1 s))\n)","problem":19,"user":"4fa792ebe4b081705acca1c5"},{"problem":19,"code":"(fn [sqn] (nth sqn (dec (count sqn))))","user":"5a2a0cb6e4b09cafd31c7f2c"},{"problem":19,"code":"(fn [lst] (nth lst (- (count lst) 1)) )","user":"53e92f82e4b036ad0777e49d"},{"problem":19,"code":"(fn [x] \n (nth x (- (count x) 1)))","user":"5baa1b58e4b0a20761a2344e"},{"problem":19,"code":"(fn my-last\n  [sq]\n  (let [candidate (vec (rest sq))]\n    (if (= (count candidate) 1) (get candidate 0) (my-last candidate))))","user":"5cea925ce4b0a17bb84e2bd2"},{"problem":19,"code":"(fn [ls] (loop [x (first ls) xs (rest ls)] (if (empty? xs) x (recur (first xs) (rest xs)))))","user":"577832f4e4b0979f8965165b"},{"code":"(fn tail [s] (if (> (.size s) 1) (tail (rest s)) (first s)))","problem":19,"user":"52c10ad2e4b07a9af579235c"},{"code":"(fn lst [ls]\n  (if (empty? (rest ls))\n    (first ls)\n    (lst (rest ls))))","problem":19,"user":"504e2f89e4b0f6ff3350c47d"},{"problem":19,"code":"(fn last_1 [x] (nth x (- (count x) 1)))","user":"5705ffa1e4b0b0fb43fd0678"},{"problem":19,"code":"(fn m_last [coll]\n  (if (next coll)\n    (recur (next coll)) \n    (first coll)))","user":"6022429be4b0d5df2af22200"},{"code":"(fn [[x & xs]]\n  (if (seq xs)\n    (recur xs)\n    x))","problem":19,"user":"4e5bff2b535d8a8b8723a2bd"},{"code":"#(loop [collection (rest %)]\n    (when true\n        (if (= 1 (count collection))\n            (first collection)\n            (recur (rest collection))\n        )\n    )\n)","problem":19,"user":"4f14fbec535d64f603146440"},{"problem":19,"code":"(fn [l] \n  (nth l \n       (- \n        (count l)\n        1)))","user":"54fa25c2e4b0cf870d934700"},{"code":"(fn [x] \r\n  (if (next x) \r\n      (recur (next x)) \r\n      (first x)))","problem":19,"user":"5008a61ee4b0144d4f561e3b"},{"problem":19,"code":"(fn lastItem [x] (first (reverse x)))","user":"5aa7a64ce4b0d174b936c8bd"},{"code":"(fn blah [n] (first (reverse n)))","problem":19,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn last-element [x]\n  (first (reverse x)))","problem":19,"user":"4ea00469535d7eef3080729d"},{"problem":19,"code":"#(nth (reverse % ) 0 )","user":"5cccac42e4b0ccb06196289d"},{"problem":19,"code":"(fn [the-seq]\n  (let [x (count the-seq)]\n    (nth the-seq (dec x))))","user":"55f3bb12e4b06e875b46ce64"},{"problem":19,"code":"(fn last-item\n  [items]\n  (nth items (- (count items) 1)))","user":"562e2c5ce4b0a45d2ff83024"},{"problem":19,"code":"(fn [x] (loop [[head & tail] x ret []] (if (empty? tail) head (recur tail head))))","user":"5762f9e4e4b0994c1922fbb2"},{"code":"(fn lastelement [x] (nth x (- (count x) 1)))","problem":19,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [list] (nth list (- (count list) 1)))","problem":19,"user":"4e525840535d302ef430da72"},{"code":"(fn my-last [[first & more]]\n  (if (seq more)\n    (my-last more)\n    first))","problem":19,"user":"5357b241e4b04ce2eb3ed282"},{"problem":19,"code":"(fn laste [s] (if (<= (count s) 1) (first s) (laste (rest s))))","user":"5e28c2a6e4b05b4b015161a3"},{"problem":19,"code":"(fn [some-list]\n  (loop [x some-list]\n    (if (empty? x)\n      nil\n      (if (empty? (rest x))\n        (first x)\n        (recur (rest x))))))","user":"56acfee5e4b03c432f18734f"},{"code":"(fn f [s]\n  (if (empty? (rest s)) \n    (first s)\n    (f (rest s))))","problem":19,"user":"4f0478b0535dcb61093f6bcb"},{"problem":19,"code":"(fn [x] (if (nil? (seq (rest x))) (first x) (recur (rest x))))","user":"543897e7e4b032a45b869314"},{"code":"(fn [coll] (reduce (fn [m, x] x) coll))","problem":19,"user":"52ab51c4e4b0c58976d9ac73"},{"problem":19,"code":"(fn last-elem [object] (nth object (dec (count object))))","user":"552689cfe4b0ffed3738f91e"},{"problem":19,"code":"#(-> % reverse first)\n;(fn [x] (-> x reverse first))\n;(fn [x] (-> x (reverse) (first)))","user":"55c387e4e4b0e31453f6498b"},{"problem":19,"code":"(fn [coll] (-> coll reverse first))","user":"530ec239e4b08068f379ecc1"},{"problem":19,"code":"(fn my-last [x]  (nth x (- (count x) 1)))","user":"55f32f7ce4b06e875b46ce54"},{"problem":19,"code":"(fn [v]\n  (loop [v v]\n    (if (seq (rest v))\n      (recur (rest v))\n      (first v))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"#(nth (vec %) (dec (count %)))","problem":19,"user":"4ebe8d65535dfed6da9c6d96"},{"problem":19,"code":"(fn \n  [scalar]\n  (loop [scale scalar]\n    (if (= 1 (count scale))\n      (first scale)\n    (recur (rest scale)))))","user":"57500d13e4b02ea114799268"},{"problem":19,"code":"#(.get %1 (- (count %1) 1))","user":"57597fade4b02ea11479931d"},{"problem":19,"code":"(fn [lst] (if (= (count lst) 1) (peek lst) (recur (into [] (rest lst)))))","user":"5f558a76e4b0a0bc16850a84"},{"problem":19,"code":"#(nth %\n  (-\n   (count %) 1))","user":"593f88dce4b069cdc2982be2"},{"problem":19,"code":"(fn [num] (nth num (dec (count num))))","user":"5a6170fde4b0512ff01cd975"},{"problem":19,"code":"(fn my-last [coll]\n  (first (reverse coll)))","user":"55ed1575e4b0121d4835fdd3"},{"code":"(fn [coll] \r\n  (let [rest (rest coll)] \r\n    (if (seq rest) \r\n      (recur rest) \r\n      (first coll))))","problem":19,"user":"51128c6fe4b0350614f07a79"},{"code":"(fn [coll] (first (drop (dec (count coll)) coll)))","problem":19,"user":"4e8ae8ca535d65386fec2113"},{"problem":19,"code":"(fn lastNum [input]\n  (if (= (count input) 1)\n    (first input)\n    (recur (rest input))))","user":"59ed823ee4b0249b728207a1"},{"problem":19,"code":"reduce (fn [x y] y) nil","user":"54d753ebe4b0a52adc2e2029"},{"problem":19,"code":"(fn mylast\n  [[x & others]]\n  (if (empty? others) x\n    (mylast others)))","user":"56c21eafe4b05cc29241ee7e"},{"code":"(fn [arr] (let [other (rest arr)] (if (= other []) (first arr) (recur other))))","problem":19,"user":"5179b3f1e4b01aacecbecbd9"},{"code":"#(->> %\n     reverse\n     first)","problem":19,"user":"5272645de4b03e8d9a4a742c"},{"problem":19,"code":"(fn lst [xs] (first (drop (dec (count xs)) xs)))","user":"540470dae4b0addc1aec6658"},{"code":";(fn [l]\n;  (loop [li l]\n;    (if (empty? (rest li))\n;      (first li)\n;      (recur (rest li)))))\n\n;(fn [l]\n;  (first (reverse l)))\n\n(comp first reverse)","problem":19,"user":"4f07c8c3535dcb61093f6c2d"},{"code":"#(.get %1 (- (.size %1) 1))","problem":19,"user":"52efbdaae4b05e3f0be25ed1"},{"problem":19,"code":";(fn [xs]\n;  (if-let [[x & more] xs]\n;    (if more\n;      (recur more)\n;      x)))\n\n; reduce (fn [_ b] b)\n  reduce #(identity %2)","user":"5547793be4b0a04f7929954c"},{"code":"(fn t [x] (nth x (- (count x) 1)))","problem":19,"user":"5315b53ee4b08068f379ed31"},{"code":"(fn [s]\n    (if (= 1 (count s))\n      (first s)\n      (recur (rest s))))","problem":19,"user":"4f6ea22ae4b07046d9f4efdb"},{"problem":19,"code":"(fn tail [lst] (first (reverse lst)))","user":"575d9ac6e4b02ea114799387"},{"code":"(fn [x] (nth (seq x) (- (count x) 1)))","problem":19,"user":"5006e494e4b0678c553fc492"},{"problem":19,"code":"(fn  [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","user":"5660debce4b068f2fe63dc5d"},{"problem":19,"code":"(fn [col]\n\t(nth col (dec (count col))))","user":"5d5824fae4b02ba5928a681f"},{"code":"(fn lastElem [x] (if (next x)\n          (recur (next x))\n          (first x)))","problem":19,"user":"4e6b6da8535d8ccf87e9ff12"},{"code":"(fn last-p [x] \n  (if (= '() (rest x)) (first x) (last-p (rest x))))","problem":19,"user":"50c4e6dfe4b0210b849018b5"},{"problem":19,"code":"(fn [c]\n  (reduce #(do %2) c))","user":"56b1ab17e4b0982f16b37df1"},{"problem":19,"code":"#_(fn [s] \n  (loop [ss s ] \n    (if (<= (count ss) 1)\n      (first ss)\n      (recur (rest ss)))))\n\nreduce #(-> %2)","user":"57f0a9fde4b0bfb2137f5bf6"},{"problem":19,"code":"(fn final [x] (first (reverse x)))","user":"53c6b1fae4b00fb29b22129f"},{"problem":19,"code":"(fn [lista] \n  (let [[x & xs] lista]\n    (if (empty? xs) x \n      (recur xs))))","user":"58fdd7b7e4b0438e51c2cfc0"},{"code":"(fn last-element [x]  (first (reverse x)))","problem":19,"user":"50208575e4b0cb6ebc0a42f7"},{"problem":19,"code":"(fn _last [seq] \n  (if \n    (empty? (rest seq))\n    \t(first seq) \n    \t(_last (rest seq))\n    )\n)","user":"54d63357e4b0a52adc2e2018"},{"code":"(fn mylast [lst]\n  (if (= (rest lst) '())\n    (first lst)\n    (mylast (rest lst))))","problem":19,"user":"52158e69e4b0bf4bffd29c9f"},{"code":"(fn l [s]\n  ( nth s (- (count s) 1 )))","problem":19,"user":"536c35c3e4b0fc7073fd6e3a"},{"code":"(fn [x] (nth  x (-(count x)1) ))","problem":19,"user":"52693472e4b03e8d9a4a71db"},{"problem":19,"code":"(fn [in]\n  (loop [[head & tail] in]\n    (if (nil? tail)\n      head\n      (recur tail))))","user":"556323b5e4b0c656e3ff17e5"},{"problem":19,"code":";; explicitly processing the func-args\n(fn [coll]\n  (loop [curr (first coll)\n         tail (rest coll)]\n    (if (empty? tail)\n        curr\n        (recur (first tail) (rest tail)))))\n\n\n;; and another one deconstrucring the func-args\n#_(fn [[head & tail]]\n    (if (empty? tail)\n        head\n        (recur (rest tail))))","user":"5553b729e4b0deb715856e05"},{"code":"#(reduce (fn [_ y] y) nil %1)","problem":19,"user":"4faa6e19e4b081705acca1f2"},{"code":"(fn[x] (first(reverse x)))","problem":19,"user":"5113ce6de4b0350614f07a87"},{"problem":19,"code":"(fn [swag & lastEle] \n  (if (empty? swag)\n    lastEle\n    (recur (rest swag) (first swag))\n    )\n  )","user":"566b070ce4b0a866af6896a9"},{"code":"#(loop [s %]\n  (if (nil? (next s))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4f5d5d59e4b0030a34fb2b39"},{"problem":19,"code":"(fn [fist] (let [[l & rst] fist] (if (= rst nil) l (recur rst))))","user":"56b12d4fe4b0982f16b37de7"},{"problem":19,"code":"(fn [coll] \n   (if (= 1 (count coll))\n     (first coll)\n     (recur (rest coll))))","user":"561f27a1e4b064ca9f4b16ca"},{"code":"(fn [s]\n  (loop [s' s]\n    (let [[a & b] s']\n      (if (empty? b)\n        a\n        (recur b)))))","problem":19,"user":"5201ada5e4b0b2e020a18f14"},{"problem":19,"code":"#(loop [[head & tail] %]\n\n    (if (empty? tail)\n\n      head\n\n      (recur tail)))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [l]\r\n  (if (= (rest l) '()) (first l)\r\n    (recur (rest l))))","problem":19,"user":"4defdf31535d08e6dec9fe14"},{"problem":19,"code":"(fn [n] (if (seq (rest n)) (recur (rest n)) (first n)))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":19,"code":"reduce (fn [arg1 arg2] arg2)","user":"5b98e5a7e4b0c0b3ffbd4abf"},{"problem":19,"code":"(fn [coll]\n    (loop [c coll]\n        (if (empty? c)\n            nil\n            (if (empty? (rest c))\n                (first c)\n                (recur (rest c))))))","user":"5b0cd5b6e4b0cc2b61a3bde7"},{"code":"(fn [x]\n  (first(reverse x)))","problem":19,"user":"4e9dd9ab535dbda64a6f6b8d"},{"code":"#(if (next %)\r\n    (recur (next %))\r\n      (first %))","problem":19,"user":"5036dea0e4b0af0658af77a4"},{"problem":19,"code":"(fn _last [x]\n  (if (empty? (rest x))\n    (first x)\n    (_last (rest x))))","user":"593870e6e4b02506e01a29d6"},{"problem":19,"code":"(fn this [x]  \n  (if (= (rest x) '()) \n    (first x)\n    (this (rest x))\n  )\n)","user":"54d4ddd2e4b0a52adc2e2006"},{"problem":19,"code":"(fn [x] \n  (.get x (dec (count x))))","user":"53dfb864e4b0d874e779ae43"},{"code":"(fn last-element[s] (if (empty? s) nil (first (reverse s))))","problem":19,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":19,"code":"(fn [x]  (nth x (dec (count x))))","user":"600e4639e4b074f607df66a2"},{"problem":19,"code":"(fn [a]\n  (let [b (count a)]\n    (nth a (- b 1))))","user":"55f54e31e4b06e875b46ce84"},{"problem":19,"code":"(fn qw [l]\n  (if (> (count l) 1)\n    (qw (rest l))\n    (first l)))","user":"57a7a437e4b0a96607956216"},{"problem":19,"code":"#((vec %1) (- (count %1) 1))","user":"53ba0d1be4b047364c0444f1"},{"problem":19,"code":"(fn [mlist] \n  (reduce (fn [x y] y) \n          mlist)\n  )","user":"5b01cf9ee4b0cc2b61a3bd49"},{"problem":19,"code":"(fn find-last [xs]\n  (if (seq (rest xs))\n    (find-last (rest xs))\n    (first xs)))","user":"56785a48e4b05957ce8c6179"},{"code":"#(.get % (- (count %) 1))","problem":19,"user":"4f81fcbfe4b033992c121c03"},{"code":"(fn [coll] \n  (if (empty? (rest coll))\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"51dc80b7e4b09c47a74ce10f"},{"code":"(fn [x]\n  (nth x \n       (- (count x) 1)\n       )\n  )","problem":19,"user":"5166ed9be4b013fc800656bd"},{"problem":19,"code":"(fn [lista] \n  (let [ultimo (first lista)\n        restanti (rest lista)]\n  \t(if (empty? restanti)\n      ultimo\n      (recur restanti))))","user":"5256dcc0e4b0541d1855ba3c"},{"code":"(fn ult [x] (first (reverse x)))","problem":19,"user":"4e8b7427535d65386fec2122"},{"code":"(\n  fn ls[x](\n    if (= (count x) 1)\n    (first x)\n    (ls (rest x))\n  )\n)","problem":19,"user":"50512f61e4b0b30bd8f4f83f"},{"problem":19,"code":"#(reduce (fn [x, y] y) %)","user":"56f1ffe7e4b04a395b9a049c"},{"problem":19,"code":"(fn [ls]\n  (loop [ls' ls]\n         (if (= 1 (count ls'))\n                (first ls')\n                (recur (drop 1 ls')))))","user":"58db7b81e4b0a4d5acaab680"},{"problem":19,"code":"(fn lastE [coll]\n  (let [x (into [] coll)]\n    (nth x (dec (count x)))))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":19,"code":"reduce #(and %1 %2) [1 2 3]","user":"5e0e836fe4b099d064962fa8"},{"code":"(fn [x](first(reverse x)))","problem":19,"user":"4f5cff62e4b0030a34fb2b32"},{"code":"(fn [l] (cond (empty? l) nil (empty? (rest l)) (first l) :else (recur (rest l))))","problem":19,"user":"51729002e4b044b2ef48a850"},{"problem":19,"code":"(fn [lst] (if (empty? (rest lst)) \n              (first lst)\n              (recur (rest lst))))","user":"5f1328dee4b091ba50b4dbb1"},{"problem":19,"code":"(fn [col]\n  (-> col\n      reverse\n      first))","user":"5ba19969e4b0a20761a233a4"},{"problem":19,"code":"(fn l [[first & others]] (if (empty? others) first (l others)))","user":"54c29d35e4b045293a27f606"},{"code":"(fn [[x & y]]\n  (if (seq y) (recur y) x))","problem":19,"user":"5013193ae4b0f26a0e3320ab"},{"code":"(fn ls [c]\r\n    (if (= 1 (count c)) (first c) (ls (next c)) ) \r\n  )","problem":19,"user":"4e1f60a6535d04ed9115e80b"},{"code":"(fn [s] (reduce (fn [_ n] n) nil s))","problem":19,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn [coll]\n    (let [nb (- (count coll) 1)]\n        (nth coll nb)\n      )\n         \n  )","problem":19,"user":"53075d82e4b02e82168697a1"},{"code":"(fn [theset] (first (reverse theset)))","problem":19,"user":"5138bccde4b0a5db03d727d8"},{"problem":19,"code":"(fn [x] \n  (if (next x)\n   (recur (next x))\n   (first x)))","user":"59a0ceeae4b0871e7608b840"},{"code":"(fn [s] \n   (first (reverse s)) \n)","problem":19,"user":"50124341e4b02a085b99dc77"},{"problem":19,"code":"(fn [toProcess]\n  (loop [listProcess toProcess]\n    (if (= (count listProcess) 1) (first listProcess)\n      (recur (rest listProcess)))))","user":"59759a9ce4b01722bebd4cca"},{"problem":19,"code":"(fn l [xs]\n  (if (= [] (rest xs))\n    (first xs)\n    (l (rest xs))))","user":"59f9b9fce4b0ca45a743a347"},{"problem":19,"code":"(fn ! [x] \n  (if (= (count x) 1)\n    (first x)\n    (! (rest x))\n  )\n)","user":"5a813b90e4b00b71e582a065"},{"problem":19,"code":"(fn [arr]\n  (first\n   (reverse arr)))","user":"55ae5e66e4b03311e7b732bb"},{"code":"(fn mylast [seq] (if (= (next seq) nil) (first seq) (recur (rest seq))))","problem":19,"user":"4e947818535dbda64a6f6b13"},{"problem":19,"code":"#(let [[head & others] % ]\n   (if (empty? others)\n     head\n     (recur others)))","user":"5999fe10e4b07157cc8dab02"},{"code":"(fn [a] (nth a (dec (count a))))","problem":19,"user":"51dad73ae4b09f6bc204eedd"},{"problem":19,"code":"(fn [n]\n  (first (reverse n)))","user":"55b69e37e4b01b9910ae2999"},{"code":"(fn [seq] (first (take-last 1 seq)))","problem":19,"user":"504a141ce4b044486d8af28f"},{"code":"(fn [s] \n  ((vec s) (- (.size s) 1)))","problem":19,"user":"4fe89567e4b07c9f6fd12c52"},{"code":"(fn[store](first (reverse store)))","problem":19,"user":"52ce4c32e4b07d0d72b2738d"},{"code":"(fn [x] (first (reverse (rest x))))","problem":19,"user":"4ea95e56535d7eef30807302"},{"code":"(fn myLast [x] (first(reverse x)))","problem":19,"user":"4fcca4f5e4b0ee37620e1867"},{"problem":19,"code":"(fn [data]\n\t(first (reverse data)))","user":"5aba5296e4b073f1774426aa"},{"problem":19,"code":"(fn [l] (nth l (- (count l) 1 ) ) )","user":"548018efe4b0c51c1f4d7335"},{"problem":19,"code":"(fn [my-seq] \n  (loop [curr-last nil\n         rest-of-seq my-seq]\n    (if (= rest-of-seq [])\n      curr-last\n      (recur (first rest-of-seq) (rest rest-of-seq)))\n    ))","user":"570f41f8e4b0b0fb43fd0702"},{"problem":19,"code":"(fn [[head & rest]] (if rest (recur rest) head))","user":"561cb6cfe4b064ca9f4b169e"},{"problem":19,"code":"(fn [lis]\n              (if (empty? (rest lis))\n                (first lis)\n                (recur (rest lis))\n                )\n              )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":19,"code":"; (fn [xs] (nth xs (- (count xs) 1)))\n(fn [xs] (nth (reverse xs) 0))","user":"5f6a8006e4b02876ed9fd048"},{"problem":19,"code":"(fn f [x] (if (= (rest x) ()) (first x) (f (rest x))))","user":"57eec925e4b0bfb2137f5bc9"},{"code":";(fn [coll] (nth coll (dec (count coll))))\n\n(comp peek vec)","problem":19,"user":"4f2d5246e4b0d6649770a059"},{"code":"(fn last-one [l] \n     (if (seq (rest l))\n       (last-one (rest l))\n       (first l)))","problem":19,"user":"4fb41dace4b081705acca2aa"},{"problem":19,"code":"reduce (fn [x, y], y)","user":"56657922e4b0e91d5f5c565d"},{"code":"(fn [x] (if-not (empty? x) (nth x (- (count x) 1))))","problem":19,"user":"5357fd93e4b04ce2eb3ed285"},{"problem":19,"code":"(fn [s] (reduce (fn [acc item] item) s))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":19,"code":"(fn [coll]\n  (reduce #(identity %2) coll))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"problem":19,"code":"(fn [x] (get (vec x) (- (count (vec x)) 1)))","user":"55efc6d5e4b066087aa9453f"},{"code":"#( first ( take-last 1 % ) )","problem":19,"user":"4fbb7010e4b081705acca2e7"},{"problem":19,"code":"(fn [s]\n  (if (list? s)\n    (first (reverse s))\n    (peek s)))","user":"548e940fe4b0e286459a1225"},{"problem":19,"code":"(fn lastEle [a] (nth a (dec(count a))))","user":"56f3d21ae4b046a417f92055"},{"problem":19,"code":"(fn last-element [elements] (nth elements (dec (count elements))))","user":"5c5a313ae4b01df32ab7326e"},{"problem":19,"code":"(fn [   x       ]\n  (if (seq (rest x))\n    (recur (rest x))\n    (first x)))","user":"53b61528e4b047364c0444c1"},{"code":"(fn [x] (nth x (- (count x), 1)))","problem":19,"user":"51022e25e4b00c483ae176f5"},{"problem":19,"code":"(fn [coll] (if (= (count coll) 1) (first coll) (recur (rest coll))))","user":"5fcf86c2e4b07e53c2f3f00d"},{"code":"(fn get-the-end [theSequence] (if (= 1 (count theSequence)) (first theSequence) (get-the-end (rest theSequence))))","problem":19,"user":"4f1c2336535d64f60314647f"},{"problem":19,"code":"( fn [myseq]\n  (first (reverse myseq)))","user":"590f283de4b047aa04b19a35"},{"code":"(fn [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (recur (rest coll))))","problem":19,"user":"5252ee94e4b0541d1855b8db"},{"code":"#(first (reverse %))  ; Or: (comp first reverse)","problem":19,"user":"5119f3d5e4b06c8af0111818"},{"problem":19,"code":"(fn \n  ([] nil)\n  ([x]\n   (let [[first-one & remaining] x]\n     (if (empty? remaining)\n       first-one\n       (recur remaining))))\n  )","user":"5959c72ae4b066ee0a44afac"},{"problem":19,"code":"(fn my-last[x]\n      (cond\n          (empty? x)\n          nil\n          (= 1 (count x) )\n          (first x)\n          :else\n          (my-last (rest x)) \n       )\n    )","user":"54bd9022e4b0ed20f4ff6ee1"},{"code":"(fn [b] (first (reverse b)))","problem":19,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":19,"code":"(fn \n  [x]\n  (nth x (dec (count x)))\n  )","user":"5e035de0e4b0a607a9a45d5a"},{"problem":19,"code":"(fn [s]\n  (let [head (first s)\n        tail (rest s)]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"588d3952e4b00487982d516e"},{"code":"(fn fun [x] (\n                if (> (count x) 1)\n                (fun (rest x))\n                (first x))\n )","problem":19,"user":"52132f8de4b0d32679a50651"},{"code":"(fn [x] (first (drop (- (count x) 1) x)) )","problem":19,"user":"4f847bf2e4b033992c121c32"},{"problem":19,"code":"(fn [coll]\n  (loop [item (first coll) remainder (rest coll)]\n    (if (empty? remainder)\n      item\n      (recur (first remainder) (rest remainder)))))","user":"5c06f6e3e4b0bdcf453d16bb"},{"problem":19,"code":"#(nth % (- (count %) 1))\n\n;#(->> % (count) (dec) (nth %))","user":"5c13da47e4b01240ff5671a6"},{"problem":19,"code":"(fn lasst [x] (first (reverse x)))","user":"5495b2dee4b0b312c081ff5f"},{"problem":19,"code":"apply (fn [& xs] (first (reverse xs)))","user":"5573dfc5e4b0aa18f790f3fc"},{"problem":19,"code":"(fn last-el [xs] (first (reverse xs)))","user":"551f1781e4b08d5046aa8a52"},{"code":"(fn\n  [list]\n  (loop\n    [[first & rest] list]\n    (if (empty? rest)\n      first\n      (recur rest))))","problem":19,"user":"52d39acce4b099d49816f0c7"},{"code":"(fn [col] (nth col (dec (count col))))","problem":19,"user":"537e0394e4b06839e8705e97"},{"code":"(fn my-last [sq] (first (reverse sq)))","problem":19,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn my-last [s]\n  (let [rest (rest s)]\n    (if (seq rest) (my-last rest) (first s))))","problem":19,"user":"4f7774a6e4b0fbe0118ec57f"},{"problem":19,"code":"(fn mlast [xs] \n  (if (= (rest xs) '()) \n      (first xs) \n      (mlast (rest xs))))","user":"544b94ebe4b0e39780006966"},{"problem":19,"code":"(fn [s]\n\t(if (next s)\n    (recur (next s))\n    (first s)))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn [s] \n  (loop [se s]\n    (if (empty? (rest se))\n      (first se)\n      (recur (rest se)))))","problem":19,"user":"5154fa3fe4b0179c5115f4e6"},{"code":";; #(loop [s %] (if (= 1 (count s)) (first s) (recur (rest s))))\n#(first (drop (dec (count %)) %))","problem":19,"user":"5070e31ee4b0e3170b5a8678"},{"code":"(partial reduce (fn [x y] y) 0)","problem":19,"user":"51422945e4b0b50abeb46b2e"},{"code":"(fn my-last [lst] (if (empty? (rest lst)) (first lst) (my-last (rest lst))))","problem":19,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":19,"code":"(fn [xs] (nth (reverse xs) 0))","user":"5515f96ce4b055c2f668d4f7"},{"code":"(fn mylast [x] ((comp first reverse) x))","problem":19,"user":"4dbdecd3535d020aff1edf54"},{"code":"(fn foo [x] (let [r (rest x)]\n(if (empty? r)\n  (first x)\n  (foo r))))","problem":19,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":19,"code":"(fn [xs]\n  (if (not(next xs))\n    (first xs)\n    (recur (rest xs))\n  )\n)","user":"5682d5b4e4b0945ebc182a95"},{"problem":19,"code":"(fn [s]\n  (let [f (first s) r (rest s)]\n    (if-not (empty? r ) (recur r) f)))","user":"5b1a4b3ee4b03cfeda66ecc9"},{"problem":19,"code":"(fn last-element [x] (if (= (rest x) '()) (first x) (last-element (next x))))","user":"5ceca436e4b0a17bb84e2bf8"},{"problem":19,"code":"(fn last_element [lst]\n  (if (empty? lst) nil\n                   (if (= (count lst) 1) (first lst)\n                   (last_element (rest lst)))))","user":"5bbbd077e4b0a20761a23615"},{"problem":19,"code":"(fn [s]\n  (if (< (count s) 2)\n    (first s)\n    (recur (rest s))))","user":"5a3d7afae4b0447ef91cc5a6"},{"problem":19,"code":"(fn [x]\n\t(first\n     (reverse x)))","user":"54b31445e4b09f271ff37d35"},{"problem":19,"code":"#(nth % (dec\n         (count %)))","user":"53c6dcf9e4b00fb29b2212a3"},{"code":"(fn zz [l]\n  (if (= nil (second l))\n    (first l)\n    (zz (rest l))))","problem":19,"user":"51cdec45e4b0e42293a2254f"},{"code":"(fn r [x]\n  (if (= (count x) 1)\n  \t(first x)\n    (r (rest x))))","problem":19,"user":"52bdd135e4b07a9af579230a"},{"problem":19,"code":"#(nth % (dec (count %)))\n\n;; works because we view it as:\n;; (nth collection last-index)\n;;\twhere collection = %\n;;  where last-index = n-1 = coll.length - 1 = (dec (count collection))","user":"57accab9e4b0b8559636fc90"},{"code":"(fn [x] ( first (reverse x)))","problem":19,"user":"52b1bfade4b0c58976d9ace2"},{"problem":19,"code":"#(nth % (dec (count % ) ))","user":"59a9e517e4b08cbb53654d79"},{"code":"(fn get-last [arg] \n  (if (= '() (rest arg))\n    (first arg)\n    (get-last (rest arg))))","problem":19,"user":"4f652432e4b07046d9f4ef3d"},{"problem":19,"code":"#(if (= 1 (count %)) \n   (first %)\n   (recur (rest %)))","user":"5907a736e4b047aa04b1995e"},{"code":"#(cond\n   (= 1 (first %)) 5\n   (= 5 (first %)) 3\n   (= \"b\" (first %)) \"d\"\n)","problem":19,"user":"523eb77be4b057c4b7cd0a6c"},{"code":"; reduce #(-> %2)\n(fn last-elt [l] (if (= (rest l) []) (first l) (last-elt (rest l))))","problem":19,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":19,"code":"reduce (fn [ a b] (identity b))","user":"593db05ae4b069cdc2982bab"},{"code":"(fn ul[n] (if (= (count n) 1) (first n) (ul (rest n))))","problem":19,"user":"4e6279e3535d8ccf87e9fe60"},{"code":"(fn [L] (nth L (- (count L) 1)))","problem":19,"user":"51cb4900e4b08d8387cbedd6"},{"problem":19,"code":"(fn \n  [x]\n  (first (reverse x)))","user":"56d79214e4b0ea9b8538f7dd"},{"code":"(fn [col]\n  (let [colr (rest col)]\n    (if (empty? colr)\n      (first col)\n      (recur colr))))","problem":19,"user":"4e80a7f3535db62dc21a62b0"},{"problem":19,"code":"(fn my-last [coll]\n\t(loop [xlast (first coll) xcoll (rest coll)]\n          (if (empty? xcoll) xlast (recur (first xcoll) (rest xcoll)))))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":19,"code":"(fn lastel [list]\n  (first (reverse list)))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":19,"code":"(fn [sq]\n\t\t\t\t(loop [s sq]\n\t\t\t\t(if (empty? (rest s))\n\t\t\t\t(first s)\n\t\t\t\t(recur (rest s)))\n\t\t\t\t)\n\t\t\t)","user":"560331dee4b04bb52996e1b5"},{"problem":19,"code":"(fn lastfn [x] (first (reverse x)))","user":"55882891e4b059ccff29b1f0"},{"code":"(fn [input] (loop [[x & xs] input]\n  (if xs (recur xs) x)))","problem":19,"user":"530394b4e4b0d8b024fd3743"},{"code":"(fn [lst] \n  (let [n (count lst)]\n    (if (> n 0)\n      (nth lst (- n 1)))))","problem":19,"user":"50a90241e4b0a9a42786e8dc"},{"problem":19,"code":"#(reduce (fn [acc val] val) %)","user":"5ff8ead1e4b06df49cee14ab"},{"problem":19,"code":"(fn end [x] (first (reverse x)))","user":"54524afbe4b0e397800069bc"},{"code":"(fn [s1]\n\t(first (drop (dec (count s1)) s1)\n    )\n)","problem":19,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn my-last\n    ([[first-el & rest :as coll]]\n    (if (empty? rest)\n     first-el\n     (my-last rest))))","problem":19,"user":"539e717fe4b0ca733b974488"},{"problem":19,"code":"(fn \n  [lst]\n  \n  (loop [[x & xs] lst]\n    (if (= 0 (count xs))\n      x\n      (recur xs))))","user":"5be1581ee4b0ed4b8aab4c9a"},{"code":"(fn [xs] (-> xs reverse first))","problem":19,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"problem":19,"code":"(fn last-el [x]\n  (nth x (- (count x) 1)))","user":"59b8334ce4b05c620303ca4f"},{"problem":19,"code":"(fn mylast [x] (let [r (rest x)] (if (empty? r) (first x) (mylast r))))","user":"5651de3ee4b0f9d632dd845b"},{"problem":19,"code":"(fn getLast [arr] \n  (if (nil? (second arr))\n    (first arr)\n    (getLast (rest arr))\n    )\n  )","user":"5b7f381ae4b047b03b203769"},{"problem":19,"code":"#(nth %(-(count %)1))","user":"5481be5fe4b0e286459a1172"},{"code":"(fn newlast\n  [x]\n  (first (reverse x)))","problem":19,"user":"51212cfce4b0ca414459ae95"},{"problem":19,"code":"(fn [xs] (if (list? xs)\n           (peek (reverse xs))\n           (peek xs)))","user":"5d84fccae4b0915913b1d390"},{"problem":19,"code":"(fn take-last [sq] (if (= (count sq) 1) (first sq) (recur (rest sq))))","user":"5e1b7c13e4b0dc9594008522"},{"code":"(fn [s] \n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4eae2f9e535d7eef30807324"},{"problem":19,"code":"(fn [s]\n  (loop [[head & tail] s]\n    (if (< (count tail) 1)\n      head\n      (recur tail))))","user":"57fb9d83e4b0d3187e900975"},{"problem":19,"code":"(fn foo [l]\n  \t(if (empty? (rest l)) (first l) (foo (rest l))))","user":"55010066e4b07d26eda61d6c"},{"problem":19,"code":"(fn [arg] \n  (let [cc (count arg)] \n    (nth arg (dec cc))\n    )\n  )","user":"577b9cfde4b0d3393e5deb16"},{"problem":19,"code":"(fn [x] (->> x\n             count\n             dec\n             (nth x)))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [l] (get (vec l) (- (count l) 1)))","problem":19,"user":"5085bfdae4b004985b776e53"},{"problem":19,"code":"(fn [x]\n  (loop [s (rest x) res (first x)]\n    (if (empty? s)\n      res\n      (recur (rest s) (first s)))))","user":"594cb88be4b07ddc2dafae6e"},{"code":"(fn [s] \n  (nth s (dec (count s))))","problem":19,"user":"5311081be4b08068f379ece3"},{"code":"(fn my-last [coll]\n  (let [h (first coll), t (next coll)]\n    (if t (my-last t) h)))","problem":19,"user":"504d0116e4b022602c20b089"},{"problem":19,"code":"(fn [sq] (let [c (count sq)] (nth sq (- c 1))))","user":"56de0db0e4b0ea9b8538f83a"},{"problem":19,"code":"(fn [c] \n   (nth c (- (count c) 1)))","user":"5a8bdd0ce4b05369db4d24f2"},{"problem":19,"code":"(fn [x]\n   (if (empty? (rest x))\n     (first x)\n     (recur (rest x))))","user":"60468847e4b02d28681c77c4"},{"problem":19,"code":"(fn lastguy [sequ] \n  (first (reverse sequ)))","user":"542e8011e4b0dad94371f2c4"},{"problem":19,"code":"(fn [[number & numbers]]\n  (if (empty? numbers)\n    number\n    (recur numbers)))","user":"550174b5e4b07d26eda61d73"},{"problem":19,"code":"#(loop [x %]\n   (if (empty? (rest x))\n     (first x)\n     (recur (rest x))))","user":"5674607ae4b05957ce8c6137"},{"problem":19,"code":"#(loop [[head & tail] %] (if (nil? tail) head (recur tail)))","user":"54187e84e4b01498b1a71a1b"},{"code":"(fn lazt[x] (peek(vec x)))","problem":19,"user":"4fa58500e4b081705acca1ae"},{"code":"(fn last-item [coll]\n  (nth coll (- (count coll) 1)))","problem":19,"user":"4f03860e535dcb61093f6b10"},{"problem":19,"code":"(fn [s] \n  (if (= (get s (- (count s) 1)) nil)\n    (nth s (- (count s) 1))\n    (get s (- (count s) 1))\n    )\n  )","user":"552159b5e4b0882d96d09191"},{"problem":19,"code":"(fn [seq] (let [x (count seq)] (nth seq (- x 1))))","user":"5c4ad616e4b0f9f7a8770e5a"},{"problem":19,"code":"(fn [s] (let [vect (into [] s)]\n          (vect (dec (count vect)))))","user":"5a84cf8de4b00b71e582a095"},{"problem":19,"code":"(fn last-elem [x]\n  (first\n   (reverse x)))","user":"5d4f2f27e4b0776584bd6f4f"},{"code":"(fn rec [[x & xs]]\n  (if xs\n    (recur xs)\nx))","problem":19,"user":"4ffeec2ce4b0678c553fc3fa"},{"code":"(fn [lst]\n\t(cond\n     (= 1 (count lst))\n     \t(first lst)\n     :else\n     \t(recur (rest lst))))","problem":19,"user":"51eff50fe4b0249c592fbdf0"},{"code":"(fn recur-down [l]\n  (if (= (next l) nil) (first l)\n    (recur-down (rest l))))","problem":19,"user":"52990271e4b02ebb4ef7506d"},{"code":"(fn my-last [seq] (first (reverse seq))) ;; TROLOLOZORD\n;;(fn my-last [seq] \n  ;;(loop [seq]\n    ;;(if (= 1 (length seq)))))","problem":19,"user":"4f3c5cf7e4b0e243712b1f47"},{"problem":19,"code":"(fn f [s]\n  (if (= (rest s) '())\n    (first s)\n    (f (rest s))\n    ))","user":"5d75cb2ce4b02e6b30c93521"},{"code":"(fn [ss]\n  (if (seq (rest ss))\n      (recur (rest ss))\n      (first ss)))","problem":19,"user":"4ed0e139535d44c135fd68c7"},{"code":"(fn [s]\r\n       (if (next s)\r\n         (recur (next s))\r\n         (first s)))","problem":19,"user":"4e79ff2a535db169f9c796a9"},{"problem":19,"code":"(fn l [x](if (= (count x) 1) (first x) (l (rest x) ) ))","user":"55599ae4e4b0deb715856e3a"},{"problem":19,"code":"(fn [nums]\n  (reduce (fn [_, next] next) nums))","user":"548f37c7e4b0e286459a1234"},{"problem":19,"code":"(fn [list]\n\t(nth list (dec (count list)))  \n)","user":"5d2564d2e4b02ea6f0fb6a34"},{"problem":19,"code":"(fn my-last [list] \n  (if (= (count list) 1)\n    (first list)\n    (my-last (rest list))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":19,"code":"(fn [x] (nth x (- (count x) 1)x))","user":"57218b07e4b0c5bde472c0b1"},{"code":"(fn [s]\n  (if (empty? (rest s)) (first s) (recur (rest s))))","problem":19,"user":"4ff82b00e4b0678c553fc395"},{"code":"#((vec %) (dec (count %)))","problem":19,"user":"4fa81fd9e4b081705acca1cd"},{"problem":19,"code":"(fn [xs] \n  (let [n (count xs)]\n    (nth xs (- n 1))))","user":"59bdf0eae4b0a024fb6ae42e"},{"code":"(fn [x] (\n         if (next x)\n          (recur (next x))\n        (first x)\n        )\n)","problem":19,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"#(peek(vec%))","problem":19,"user":"4e39b020535deb9a81d77f44"},{"code":"(fn returnlast [x] (nth x (dec (count x)) ))","problem":19,"user":"52da25b0e4b09f7907dd13b4"},{"code":"(fn lastElement[list] \n  (if (= (count list) 1)\n    (first list)\n  \t(lastElement (rest list))))","problem":19,"user":"525d490ae4b0cb4875a45d70"},{"code":"reduce (fn[a b] b)","problem":19,"user":"5002c798e4b0678c553fc42d"},{"problem":19,"code":"(fn l [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (l (rest xs))))","user":"59dec79ee4b01968742fed81"},{"code":";;> (nth n (- (count n) 1))\n(fn [x] (nth x (- (count x) 1)))","problem":19,"user":"5146fd44e4b0d12420447958"},{"code":"(fn [x] (first (rseq (vec x))))","problem":19,"user":"4e051b04535d04ed9115e7a4"},{"code":"(fn \n  [l] (\n  if (= (count l) 1) (first l) (recur (rest l))))","problem":19,"user":"506f5d68e4b082ae7d1032c7"},{"code":"(fn [n] (loop[l n] (if(= (count l) 1) (first l) (recur (rest l) ))))","problem":19,"user":"4f8beb2fe4b02e764a0a5185"},{"problem":19,"code":"(fn last-element [s] (if (empty? (rest s)) (first s) (last-element (rest s)) ))","user":"5c7734c7e4b0fca0c1622804"},{"code":"(fn [s]\n  (if  (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"519c47abe4b0a1d87b00345a"},{"problem":19,"code":"(fn [s]\n  (let [c (dec (count s))]\n    (nth s c)))","user":"592be28ae4b072a2710fcf49"},{"problem":19,"code":"(fn laste [[n & mas]]\n  (if mas\n    (recur mas)\n    n))","user":"5f792d48e4b02876ed9fd0c5"},{"problem":19,"code":"(fn last-element [lst]\n  (if (= '() (rest lst))\n    (first lst)\n    (last-element (rest lst))))","user":"54257124e4b01498b1a71b09"},{"problem":19,"code":"(fn burb [x] (nth x(- (count x ) 1)))","user":"584e47d3e4b0b7285a6f4e4e"},{"code":"(fn cheating [x] (first (reverse x)))","problem":19,"user":"538f9c79e4b0b51d73faae90"},{"code":"(fn last_ [xs]\n  (if (empty? (rest xs))\n     (first xs)\n     (last_ (rest xs))))","problem":19,"user":"4f04d011535dcb61093f6be5"},{"problem":19,"code":"(fn [items] (nth items (dec (count items)) ))","user":"56020b3fe4b04bb52996e19b"},{"problem":19,"code":"(fn [ys] (loop [[x & xs] ys] (if xs (recur xs) x)))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":19,"code":"(fn [s]\n  (loop [r s]\n    (if (next r)\n      (recur (next r))\n      (first r))))","user":"5de0b844e4b0948ae9d9adea"},{"code":"(fn [xs]\n  (let [y (first xs)\n        ys (rest xs)]\n    (if (empty? ys)\n      y\n      (recur ys))))","problem":19,"user":"52e41c22e4b09f7907dd144b"},{"problem":19,"code":"(fn [s] ((vec s) (dec (count s))))","user":"55c3149de4b0e31453f64987"},{"problem":19,"code":"(fn a[l] \n  (if (> (count l) 1) \n    (a (rest l))\n    (first l)\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn rec [x]\n  (if (= (rest x) '())\n    (first x)\n    (rec (rest x))))","problem":19,"user":"521a4ff5e4b0c4ef0be83004"},{"code":"(fn [lst]\n  (let [[a & xs] lst]\n    (if (nil? xs)\n      a\n      (recur (next xs)))))","problem":19,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn get-last[s] (first (reverse s)))","problem":19,"user":"4f0f03ce535d0136e6c2232a"},{"code":"(fn\n  [x]\n    (nth x (dec (count x))))","problem":19,"user":"4f9d87fce4b0dcca54ed6d24"},{"problem":19,"code":"(fn [x] (loop [checklist x] (if (empty? (rest checklist)) (first checklist) (recur (rest checklist)))))","user":"552f6277e4b076ab5578f801"},{"problem":19,"code":"(fn [col] (loop [f nil\n                 r col]\n            (if (first r)\n              (recur (first r) (rest r))\n              f)))","user":"53b05a75e4b047364c044482"},{"code":"(fn [c] (peek (vec c)))","problem":19,"user":"52a8a08ce4b0c58976d9ac33"},{"code":"(fn mylast [[first-item & remainder]]\n  (if (empty? remainder)\n    first-item\n    (mylast remainder)))","problem":19,"user":"527b3059e4b03e8d9a4a757a"},{"problem":19,"code":"(fn myLast [x] (nth x (- (count x) 1)))","user":"58e5f995e4b056aecfd47ca5"},{"problem":19,"code":"(fn [in]\n  (if (= (count in) 1)\n    (first in)\n    (recur (rest in))))","user":"56dbe1f4e4b0ea9b8538f813"},{"problem":19,"code":"(fn [x] (-> x\n            reverse\n            first))","user":"5a78e98de4b013a48d399779"},{"problem":19,"code":"( fn [ x ] ( first ( reverse x ) ) )","user":"55d3d3b0e4b0e31453f64a6d"},{"code":"#(if (= (count %) 1)\r\n     (first %)\r\n     (recur (rest %)))","problem":19,"user":"504e4e88e4b0f6ff3350c4a0"},{"problem":19,"code":"(fn [stuff] (first(reverse stuff)))","user":"56bf8eafe4b0f2655033598a"},{"problem":19,"code":"(fn [lst] \n  (loop [f (first lst)\n         r (rest lst)]\n    (if (= r [])\n      f\n      (recur (first r) (rest r)))))","user":"57f8627ee4b0d3187e900926"},{"problem":19,"code":"(fn last_elem [in_seq] (\n                       if (next in_seq) \n                       \t(recur (next in_seq))\n                        (first in_seq)                       \n                       ))","user":"545e5805e4b01be26fd74679"},{"code":"(fn [list]\n  (if (= '() (rest (seq list)))\n    (first (seq list))\n    (recur (rest (seq list)))))","problem":19,"user":"4f036894535dcb61093f6aad"},{"problem":19,"code":"(fn f [v] (if (= (count v) 1) (first v) (f (rest v))))","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"#(reduce (fn [a b] b) %1)","problem":19,"user":"51a2a376e4b00957e520db7f"},{"code":"(fn [x] (if (empty? (rest x))\n         (first x)\n         (recur (rest x))))","problem":19,"user":"5027fc0ce4b01614d1633ff2"},{"problem":19,"code":"#(nth % ( dec ( count %)))","user":"56bda6a3e4b0f26550335973"},{"problem":19,"code":"#(reduce (fn [_, c] c) %1)","user":"5cead199e4b0a17bb84e2bd4"},{"problem":19,"code":"(fn my_last [seq]\n  (if (empty? (rest seq))\n      (first seq)\n      (my_last (rest seq))))","user":"53a9793ae4b047364c044436"},{"problem":19,"code":"(fn final [x]\n  (nth x (- (count x) 1)))","user":"5bd6e161e4b0ed4b8aab4baf"},{"code":"(fn [more] (if (empty? (rest more)) (first more) (recur (rest more))))","problem":19,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":19,"code":"(fn last_item \n  [lst]\n  \n  (first (reverse lst)))","user":"5a99ae99e4b0d174b936c7a4"},{"code":"(fn [x] (nth x  (- (count x) 1)))","problem":19,"user":"4eaf1955535d7eef30807331"},{"code":"(fn[x] (peek (vec x)))","problem":19,"user":"4fb4ca71e4b081705acca2b0"},{"problem":19,"code":"(comp first reverse)\n;#(nth % (dec (count $))\n;#(first (reverse %))\n;#(reduce (fn [a b] b) %)","user":"5d1be50ce4b02ea6f0fb6986"},{"code":"#(first (drop (- (count %) 1) % ))","problem":19,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":19,"code":"(fn\n  [s]\n  (loop [sq s]\n    (if (empty? (rest sq))\n      (first sq)\n      (recur (rest sq)))))","user":"59512d5ce4b066ee0a44aea8"},{"code":"(fn* ([coll] (clojure.core/nth coll (clojure.core/dec (clojure.core/count coll)))))","problem":19,"user":"4e4d1304535dc968683fc4e1"},{"code":"(fn my-last [x] ( nth x (dec (.size x) ) ) )","problem":19,"user":"529e36b4e4b04e0c58e87b91"},{"code":"(partial reduce (fn [_ y] y) nil)","problem":19,"user":"4fc6305de4b0ee37620e180b"},{"problem":19,"code":"(fn [x] (nth x (count (rest x))))","user":"4f03b969535dcb61093f6b55"},{"problem":19,"code":"(fn last-elem [coll]\n  (let [rest-coll (rest coll)]\n    (if (empty? rest-coll) (first coll)\n        (last-elem rest-coll))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":19,"code":"(fn last-elt [x]\n  (nth x (- (count x) 1)))","user":"5e89ee63e4b0cb0169546317"},{"problem":19,"code":"(fn last-item [x] (nth x (-(count x) 1)))","user":"59228b00e4b026ae38521281"},{"problem":19,"code":"(fn [arg] (get (into [] arg) (- (count (into[] arg)) 1)))","user":"55c0f842e4b01b9910ae2a2b"},{"problem":19,"code":"(fn [r] (first (reverse r)))","user":"53b0750fe4b047364c044483"},{"problem":19,"code":"#(loop [input_seq %1]\n    (if (empty? (rest input_seq))\n      (first input_seq)\n      (recur (rest input_seq))))","user":"5901731ae4b0438e51c2d03d"},{"code":"(fn [x] \n  (let [ind (dec (count x))]\n    (nth x ind)))","problem":19,"user":"4ff5a525e4b0678c553fc36d"},{"code":"(fn [element] (first (take-last 1 element)))","problem":19,"user":"5277c221e4b03e8d9a4a750f"},{"problem":19,"code":"(fn [el] (nth el (- (count el) 1) ) )","user":"53dbd0abe4b094d41abdfef7"},{"problem":19,"code":"(fn [x] (let [x (vec x)\n              c (count x)\n              r (x (dec c))]\n          r))","user":"53987ad9e4b0b51d73faaefc"},{"problem":19,"code":"(fn [x] \n   (if (= 1 (count x))\n      (first x )\n    (recur (rest x))))","user":"5615326de4b05f002753dfc3"},{"problem":19,"code":"#(let [[first & rest] %]\n   \t(if (empty? rest)\n      first\n      (recur rest)))","user":"53bead0be4b0d9a98559a6e4"},{"problem":19,"code":"(fn \n  [x] \n  (nth x (- (count x) 1)))","user":"5e5eb659e4b0fd0acd158674"},{"problem":19,"code":"(fn [x] (nth x (- (count x ) 1) ))","user":"586b1390e4b0f14aab7c88cd"},{"problem":19,"code":"(fn [s]\n  (if (next s)\n  \t(recur (next s))\n    (first s)))","user":"5633c87ce4b0bfe05bf117b6"},{"problem":19,"code":"(fn [v] (nth v (- (count v) 1))  )","user":"595c9406e4b066ee0a44affe"},{"problem":19,"code":"(fn [l] (loop [elems l] (if (= 1 (count elems)) (first elems) (recur (rest elems)))))","user":"5d8a3b3ee4b0915913b1d3c8"},{"problem":19,"code":"(fn mylast\n \t([[x & re]] (if (nil? re) x (mylast re)))\n )","user":"5f22dabbe4b0f565ad99828a"},{"code":"(comp  first reverse)","problem":19,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":19,"code":"(fn\n  [x]\n  (first (reverse x))\n  )","user":"57513f88e4b02ea114799283"},{"code":"(fn lost [x] ( \n  if(= (count x) 1)\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4ed38714535d44c135fd68f1"},{"problem":19,"code":"(fn[i] (nth i (- (count i) 1)))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn [c]\n  (nth c (dec (count c))))","problem":19,"user":"4f77dc7be4b0fbe0118ec584"},{"problem":19,"code":"(fn lastEl [lis] (if (> (count lis) 1) (lastEl (rest lis)) (first lis)))","user":"59dfe78de4b08badc2a0c4df"},{"problem":19,"code":"(fn lastElement [x] (if (= (next x) nil) (first x) (lastElement (next x))))","user":"55204412e4b08d5046aa8a5f"},{"code":"#( nth % ( dec( count %) ) )","problem":19,"user":"507f393ee4b0f753b6f9789a"},{"code":"(fn fuz [x] (if (= (rest x) []) (first x) (fuz (rest x))))","problem":19,"user":"50206641e4b0cb6ebc0a42f5"},{"code":"(fn [x]\n  (if (next x)\n      (recur (next x))\n      (first x)))","problem":19,"user":"4fc68fc4e4b0ee37620e1816"},{"code":"(fn get-last [s]\n  (let [f (first s)\n        r (rest s)]\n    (if (empty? r)\n      f\n      (get-last r))))","problem":19,"user":"517ebeb0e4b09104ecebe7e7"},{"problem":19,"code":"#(first (reverse(lazy-seq %)))","user":"6059d2e0e4b07e92fa001ace"},{"problem":19,"code":"#(nth (seq %1) (- (count (seq %1)) 1))","user":"5f74b0c5e4b02876ed9fd0a2"},{"code":"(fn [s] \n  (loop [acc s l (count s)]\n    (if (= 1 l)\n      (first acc)\n      (recur (next acc) (dec l)))))","problem":19,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn [[a & r]]\n  (if (seq? r)\n    (recur r)\n    a))","problem":19,"user":"5123d79de4b02c3f2a072cc9"},{"problem":19,"code":"(fn [coll]\n  (loop [[first-element & rest-elements] coll]\n    (if (empty? rest-elements)\n      (do first-element)\n      (recur rest-elements))))","user":"5af8d190e4b0cc2b61a3bcd7"},{"code":"(fn [coll]\n  (loop [xs (seq coll)]\n    (let [r (rest xs)]\n      (if (empty? r)\n        (first xs)\n        (recur r)\n        )\n      )\n    )\n  )","problem":19,"user":"522f483ce4b032bbe342415a"},{"code":"(fn [collection] (nth collection (dec (count collection))) )","problem":19,"user":"52c4cb2fe4b0c2d177d620e5"},{"code":"(fn nLast [seq] (if (= (count seq) 1) (first seq) (nLast (rest seq))))","problem":19,"user":"4fc4fe59e4b081705acca36a"},{"problem":19,"code":"(fn lst [x] (if (empty? (rest x)) (first x) (lst (rest x))))","user":"54c92da8e4b045293a27f65c"},{"problem":19,"code":"(fn [numbers] (first (reverse numbers)))","user":"5bd71aefe4b0ed4b8aab4bb5"},{"problem":19,"code":"(fn last-element\n  [[first-element & other]]\n  (if (empty? other)\n    first-element\n    (last-element other)))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":19,"code":"(fn my-last\n  [x]\n  (let [head (first x)\n        tail (rest x)]\n    (cond\n     (empty? tail) head \n     :else (my-last tail))))","user":"4f4391a9e4b0d7d3c9f3fd23"},{"code":"(fn [L] (first (take-last 1 L)))","problem":19,"user":"5069605ae4b01dc6af13f82d"},{"code":"(fn lst [[s & rst]] (if rst (lst rst) s))","problem":19,"user":"510747a4e4b05b2b4eee7492"},{"code":"(fn lst [x] (-> x reverse first))","problem":19,"user":"4fa4bf47e4b081705acca1a3"},{"code":"(fn last' [s]\n  (if (empty? (rest s))\n    (first s)\n    (last' (rest s))))","problem":19,"user":"51811d5ee4b06547fbae113c"},{"code":"(fn hello [c] (nth c (- (count c) 1)))","problem":19,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn [x] (peek(vec x)))","problem":19,"user":"4f80907ee4b033992c121bf4"},{"code":"(fn foo [lst] \r\n  (if (empty?(rest lst))\r\n    (first lst) \r\n    (foo (rest lst))))","problem":19,"user":"4e7b7e0d535db169f9c796b3"},{"code":"(fn [aList]\n  (first (reverse aList)))","problem":19,"user":"50ef585ae4b0bdaecbb47d97"},{"problem":19,"code":"(fn lastb [s]\n  (if (empty? (rest s))\n    (first s)\n    (lastb (rest s))))","user":"551ebcd7e4b08d5046aa8a4a"},{"code":"(fn get-my-last \n  [n]\n  (if (> (count n) 1)\n    (recur (rest n))\n    (first n)))","problem":19,"user":"4e51fccf535d302ef430da6b"},{"problem":19,"code":"(fn [s]\n  (loop [c, s]\n   (if (= 1 (count c))\n     (first c)     \n    (recur (rest c)))))","user":"57c7258ee4b05aa3c4741cfe"},{"problem":19,"code":"(fn _last [s] \n  (if (= (next s) nil)\n    (first s)\n    (_last (next s))))","user":"5c8cfff8e4b048ec896c5996"},{"code":"(fn [seq] (nth seq (dec (count seq))))","problem":19,"user":"4ec46e77535dcc7ae8597d62"},{"code":"(fn get-last [x]\n  (if\n    (= (rest x) [])\n    (first x)\n    (get-last (rest x))))","problem":19,"user":"5370612be4b0fc7073fd6e97"},{"code":"(fn ultimate [x] \n  (if (= (rest x) '())\n(first x)\n(ultimate (rest x))\n))","problem":19,"user":"4fb13cbae4b081705acca277"},{"problem":19,"code":"(fn lastt [seq] (if (nil? (next seq)) (first seq) (lastt (rest seq))))","user":"6096d37be4b00e9e6653c3f0"},{"problem":19,"code":"(comp first take-last) 1","user":"5e15abeae4b0a047bd49f705"},{"problem":19,"code":"(fn [s] (if (seq (rest s))\n          (recur (rest s))\n          (first s)))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn [s] (first(reverse s)))","problem":19,"user":"504457c0e4b01f6c9a8b2360"},{"code":"(fn [s] \n  (if (not (= () (rest s)))\n    (recur (rest s))\n    (first s))\n  )","problem":19,"user":"52c45793e4b0c2d177d620d7"},{"code":"#(loop [coll %]\n  (cond (empty? coll) nil\n        (= (count coll) 1) (first coll)\n        :else (recur (rest coll))))","problem":19,"user":"4ea87a83535d7eef308072fb"},{"code":"(fn [l] \n  (nth l (dec (count l))))","problem":19,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn test-fn[x] \n  (reduce (fn[y z] z) x) )","problem":19,"user":"50b525c5e4b0c464d223d1c3"},{"problem":19,"code":"(fn [[first & tail]] \n  (if (= tail nil) \n  \tfirst \n    (recur tail)))","user":"557ca912e4b05c286339e0c8"},{"problem":19,"code":"(fn getLast [inputSeq]\n  (first (reverse inputSeq))\n)","user":"57131dfbe4b07c98581c3a98"},{"code":"(fn [x] ( first (reverse (seq x))))","problem":19,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn[x] (first (reverse x)))","problem":19,"user":"4ebc3974535dfed6da9c6d7f"},{"problem":19,"code":"(fn [coll]\n  \n    (loop [[head & tail] coll]\n    \n    (if (empty? tail)    \n    head\n   \t(recur (rest tail) )\n     )\n  )\n  \n)","user":"598085e6e4b021a7a535fdd3"},{"problem":19,"code":"(fn my-last [items]\n  (let [[first & rest] items]\n    (if (nil? rest)\n      first\n      (my-last rest))))","user":"56fbe0cce4b07572ad1a88d8"},{"problem":19,"code":"(fn [ensemble] (nth ensemble (-(count ensemble) 1)))","user":"56619e33e4b068f2fe63dc6d"},{"problem":19,"code":"(fn [v]\n  \t(if (seq (rest v))\n      (recur (rest v))\n      (first v)))","user":"56a655dbe4b0542e1f8d14eb"},{"problem":19,"code":"#(loop [lst %]\n           (if (empty? lst)\n             nil\n             (if (empty? (rest lst))\n               (first lst)\n               (recur (rest lst)))))","user":"584917a1e4b089d5ab817ec9"},{"problem":19,"code":"(fn new-last [l]\n  (cond\n   (= 1 (count l)) (first l)\n   :else (new-last (rest l))))","user":"559f06bae4b0acc240e314e6"},{"problem":19,"code":"(fn last' [xs]\n  (cond (empty? (rest xs)) (first xs)\n        :otherwise (last' (rest xs))))","user":"5717ad6fe4b07c98581c3b14"},{"code":"(comp first reverse \n      )","problem":19,"user":"5152f82ee4b03f948212e718"},{"problem":19,"code":"(fn [x]   \n  (first (reverse x))\n  \n  )","user":"540e33dde4b0addc1aec671a"},{"problem":19,"code":"(fn my-last [seq] (nth seq (- (count seq) 1)))","user":"573a0fc7e4b0cd1946bd1089"},{"problem":19,"code":"(fn [x] (nth x (-> x count dec)))","user":"5907f751e4b047aa04b1996c"},{"problem":19,"code":"(fn [x]\n  (nth x  (dec (count x))))","user":"5412b531e4b01498b1a719d7"},{"code":"(fn foo [x] (nth x (- (count x) 1)))","problem":19,"user":"4f1a87d2535d64f60314646c"},{"problem":19,"code":"(fn my_last [cnt] (if (= 1 (count cnt)) (first cnt) (my_last (rest cnt))))","user":"54b18267e4b09f271ff37d20"},{"code":"(fn [coll] (nth coll (-(count coll) 1)))","problem":19,"user":"519b9361e4b07adb65ca4548"},{"code":"(fn [xs] \n  (loop [vals xs] \n    (if (empty? (rest vals)) \n      (first vals) \n      (recur (rest vals)))))","problem":19,"user":"4e74e119535d7a570dd295bc"},{"code":"( fn [coll] (if-let [r (next coll)] (recur r) (first coll)))","problem":19,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn my-last [x]\n  (nth x (- (count x) 1)))","problem":19,"user":"520dd6f4e4b0b022ef140cb8"},{"code":"(fn my-last\n  [coll]\n  (loop [c coll]\n    (cond (nil? c) nil\n          (nil? (next c)) (first c)\n          :else (recur (next c)))))","problem":19,"user":"4ee8b9c9535d93acb0a66884"},{"problem":19,"code":"(fn last_element [x]\n  ( if (= 1 (count x))\n    (first x)\n    (last_element (rest x))))","user":"5512c935e4b055c2f668d4b8"},{"problem":19,"code":"#(loop [[first & rest] %]\n  (if (nil? rest)\n    first\n    (recur rest)))","user":"542098afe4b01498b1a71aa7"},{"code":"(fn [sq]\n  (cond \n    (vector? sq) (peek sq)\n    (list? sq) (first (reverse sq))\n  )\n)","problem":19,"user":"4fcad14ce4b0ee37620e1856"},{"problem":19,"code":"(fn last-element [coll] \n  (nth coll (- (count coll) 1)))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [[n & more]]\n  (if more\n  \t(recur more) n))","problem":19,"user":"52c0b2b9e4b07a9af5792353"},{"code":"(fn [my_seq] (nth my_seq (dec (count my_seq))))","problem":19,"user":"504e9011e4b069badc5a33b7"},{"code":"(fn lastseq [s] (if (next s)(recur (next s))(first s)))","problem":19,"user":"514fd753e4b0b449e54b8e00"},{"problem":19,"code":"(fn my-last [x] (if (empty? (rest x)) (first x) (my-last (rest x))))","user":"5d7d17ece4b02e6b30c93558"},{"problem":19,"code":"(partial reduce (fn [coll x] x))","user":"60794173e4b0a637ed78035d"},{"code":"(fn lastItem [s]\n  (if (> (count s) 1)\n    (lastItem (rest s))\n    (first s)))","problem":19,"user":"4f65f537e4b07046d9f4ef4a"},{"problem":19,"code":"(fn MyLast [x] (first (reverse x)))","user":"558217e6e4b05c286339e103"},{"code":"(fn [seq] (first (reverse seq)))","problem":19,"user":"4dddf817535d08e6dec9fdd3"},{"problem":19,"code":"(fn  bef[arr] (let [ g (nth arr (- (count arr) 1))] g))","user":"548e171be4b0e286459a121e"},{"code":"(fn name [list]\n  (cond\n   (empty? list) nil\n   (empty? (rest list)) (first list)\n   :else (name (rest list))))","problem":19,"user":"5170643ee4b004f79986ad89"},{"code":"(fn [coll]\n  (first (reverse coll)))","problem":19,"user":"4db6d993535d1e037afb2180"},{"code":"(fn mylast [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn lst [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"52c0e3d1e4b07a9af5792358"},{"code":"(fn [s]\n  (first (drop (dec (count s)) s)))","problem":19,"user":"5244a10de4b0d8acf9ed6ab3"},{"problem":19,"code":"(fn lastElement [x] (nth x (- (count x) 1)))","user":"548018e1e4b0c51c1f4d732f"},{"code":"#(reduce (fn [a b](first (rest (list a b)))) %)","problem":19,"user":"4fe6c2ace4b0e8f79898fed8"},{"code":"(fn [xs] (reduce (fn[x y] (identity y)) xs))","problem":19,"user":"4e971a86535dbda64a6f6b4f"},{"problem":19,"code":"(fn [list] (if (= (rest list) ()) (first list) (recur (rest list))))","user":"51cf815de4b0e42293a22575"},{"code":"(fn [a]\r\n  (first (reverse a)))","problem":19,"user":"5050b107e4b063148f524126"},{"code":"(fn\n  [list]\n  (loop [s list]\n    (let [r (rest s)]\n      (if (= '() r)\n        (first s)\n        (recur r)))))","problem":19,"user":"4fbd24d2e4b081705acca2ff"},{"problem":19,"code":"(fn [[prim & more]] (if more (recur more) prim))","user":"5517f5c5e4b06a49daca83c7"},{"code":"(fn last-elem [coll]\n   (if (next coll)\n     (recur (next coll))\n     (first coll)))","problem":19,"user":"4fea7bc4e4b0140c20fb9c07"},{"problem":19,"code":"(fn my-last [s]\n  (if (next s)\n    (my-last (rest s))\n    (first s)))","user":"5812eb8fe4b0f478707a0602"},{"code":"(fn [coll]\n    (loop [c coll]\n\t\t(let [f (first c)\n\t\t      n (next c)]\n\t\t  (if (empty? n)\n\t\t    f\n\t\t   (recur n)))))","problem":19,"user":"5066dcc1e4b03d366d7cb2b5"},{"code":"(fn [x] (first (take-last 1 x )))","problem":19,"user":"50aa777fe4b056ee01935866"},{"code":"(fn [v] (first(take-last 1 v)))","problem":19,"user":"5339c08ee4b0e30313ee6cad"},{"code":"#(reduce (fn[x y] y) %)","problem":19,"user":"529599dce4b02ebb4ef75027"},{"problem":19,"code":"#(if (= nil (next %)) (first %) (recur (rest %)))","user":"5522cbb2e4b0882d96d091aa"},{"code":"(fn [xs] (reduce (fn [a b] b) 'nil xs))","problem":19,"user":"506e0e5ae4b09350ab4199eb"},{"code":"(fn [col]\n  (loop [x col]\n    (if (next x)\n      (recur (next x))\n    (first x))))","problem":19,"user":"4e399009535deb9a81d77f3f"},{"problem":19,"code":"(fn get-last [list] (first (reverse list)))","user":"59ece650e4b0249b72820795"},{"code":"(fn recc [coll]\n  (cond\n   (<= (count coll) 1) (first coll)\n   :else (recc (rest coll))\n   ))","problem":19,"user":"52f69565e4b047fd55836fb9"},{"problem":19,"code":";;#(nth % (dec (count %)))\n#(->> % count dec (nth %))","user":"5de68f83e4b0986d99407f6c"},{"problem":19,"code":"#(nth % ( dec (count %)))","user":"58c7b921e4b021aa9917ed7c"},{"problem":19,"code":"(fn doit [[one & others]]\n  (if (empty? others)\n    one\n    (doit others)))","user":"5c534431e4b0fb8c5ffd99f2"},{"code":"(fn [s]\n  (loop [[f & r] s]  \n    (if r \n      (recur r)\n      f)))","problem":19,"user":"4db2eac3535df7e46ed9b6c8"},{"problem":19,"code":"#(nth % (-> (count %) (- 1)))","user":"5e2b16aee4b05b4b015161c7"},{"code":"#(-> % reverse first )","problem":19,"user":"509eeb3be4b08df8156e9e37"},{"code":"(fn [lista] (first (reverse lista)))","problem":19,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn [x] (.get x (-(count x)1)) )","problem":19,"user":"525d4159e4b0cb4875a45d66"},{"problem":19,"code":"#(reduce (fn [lst cur] cur) %)","user":"54e4eb29e4b024c67c0cf7f2"},{"problem":19,"code":"reduce (fn [reducer value] value) {}","user":"5d914fd8e4b0915913b1d400"},{"problem":19,"code":"(fn final [[head & tail]] (if (nil? tail) head (final tail)))","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn my-last[x] (first (reverse x)))","problem":19,"user":"50c95c4fe4b0bed41a12298f"},{"code":"(fn[x] (nth x (- (count x) 1)))","problem":19,"user":"4f563aece4b0a7574ea7181a"},{"problem":19,"code":"(fn last-elm [[x & more]]\n  (if more\n    (last-elm more)\n    x))","user":"592e2a0de4b072a2710fcf96"},{"problem":19,"code":"(fn myLast [x] (if (= [] (rest x)) (first x) (myLast (rest x))))","user":"58ce9ad5e4b03c36ff7e58a5"},{"code":"#(first (take-last 1 %1))","problem":19,"user":"50facb80e4b07934dda8b0d2"},{"problem":19,"code":"#(let [[x & xs] %1] (if (nil? xs) x (recur xs)))","user":"55357ab5e4b09218d5f44faf"},{"code":"(fn lst2 \n  [seq]\n  (if (= (not-empty (rest seq)) nil)\n    (first seq)\n    (lst2 (rest seq))))","problem":19,"user":"513fd703e4b00f13ea1bd895"},{"problem":19,"code":"(fn last-elem [[first-elem & more]] (if more (recur more) first-elem))","user":"5cf68580e4b0b71b1d808a5a"},{"code":"(fn thePenultime [x]\n  (if (= 1 (count x))\n    (first x) (thePenultime (rest x))\n    ))","problem":19,"user":"51735df9e4b00f4b6b0490d6"},{"code":"(fn [[head & tail]]\n  (if-not tail\n    head\n    (recur tail)))","problem":19,"user":"506c8116e4b0a302964c548a"},{"problem":19,"code":"(fn [x] (nth(reverse x) 0))","user":"57b56cf1e4b0fbc9809a27ac"},{"code":"(fn [s]\n  (if (= (count s) 1) (first s)\n      (recur (rest s))))","problem":19,"user":"4e6a7ec2535d8ccf87e9feec"},{"problem":19,"code":"; mine\n;#(first (reverse %))\n;daowen\n;==> I'm guessing this uses less memory as it doesn't create a reversed list\nreduce #(-> %2)","user":"5a544eeee4b05d388ecb6c24"},{"problem":19,"code":"(fn last_ [x] (first (reverse x)))","user":"5d6523ace4b0db5d338d15cd"},{"code":"(fn [se] (nth se (- (count se) 1)))","problem":19,"user":"4f963487e4b0dcca54ed6cd9"},{"problem":19,"code":"#(reduce (fn [_ y] y) nil %)","user":"5d98f616e4b0d3f9b434ad3c"},{"problem":19,"code":"(fn f [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (f (rest xs))))","user":"55507a1ae4b00713264bd9a7"},{"problem":19,"code":"(fn my-last [xs]\n  (if (= (rest xs) '())\n     (first xs)\n     (my-last (rest xs))))","user":"56fff6a4e4b08d47c97781c3"},{"code":"#(nth %(dec (count %)))","problem":19,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn las [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4e7ddc71535db169f9c796ef"},{"problem":19,"code":"(fn [numbahz] (nth numbahz (dec (count numbahz))))","user":"55dd0aebe4b050e68259b3bf"},{"code":"(fn [e] (nth e (dec (count e))))","problem":19,"user":"507d28cfe4b00f5b3a6e1a13"},{"code":"(fn [seq]\n   (first (reverse seq)))","problem":19,"user":"53489329e4b084c2834f4a5b"},{"problem":19,"code":"(fn la [x]\n  (if (= (rest x) '())\n    (first x)\n    (la (rest x))))","user":"53e06f81e4b0d874e779ae4c"},{"problem":19,"code":"(fn [array]\n  (loop [first-elem (first array) rest-elem (rest array)]\n    (if (empty? rest-elem)\n      first-elem\n      (recur (first rest-elem) (rest rest-elem)))))","user":"57c2d66ae4b05aa3c4741cb9"},{"code":"#(if (seq %)\n  (nth % (dec (count %)))\n  nil)","problem":19,"user":"4fccb31be4b0ee37620e1868"},{"problem":19,"code":"(fn pp \n  [s]\n  (if (next s)\n    (recur (next s))\n   \t(first s)\n   )\n  )","user":"54db48f6e4b024c67c0cf760"},{"problem":19,"code":"reduce #(if %2 %2 %1)","user":"59e0b1e1e4b08badc2a0c4f2"},{"code":"(fn la [a] \n  \n  (if \n    (empty? \n      (rest a) \n     )(first a)\n    (la (rest a))\n    \n    )\n  \n  )","problem":19,"user":"528149fbe4b0757a1b171426"},{"problem":19,"code":"#(let [r (rest %)] (if (= (count r) 1) (first r) (recur r)))","user":"5873b104e4b01531a375ea38"},{"code":"(fn getit [x] (first (take-last 1 x)))","problem":19,"user":"506c2006e4b080c1a96bd6bc"},{"problem":19,"code":"(fn myfunc [a] (first(reverse a)))","user":"548018e8e4b0c51c1f4d7333"},{"problem":19,"code":"#(loop [remaining %\n        result nil]\n   (if (empty? remaining)\n     result\n     (let [[head & tail] remaining]\n       (recur tail head))))","user":"5a4b9fa1e4b05d388ecb6b86"},{"code":"(fn end [x] (if (next x)\r\n          (recur (next x))\r\n          (first x)))","problem":19,"user":"50aa3afce4b07e35d68b27b8"},{"code":"(fn [arr] (first (reverse arr)))","problem":19,"user":"4e932a19535dbda64a6f6b0a"},{"code":"(fn [collec]\n(reduce (fn [x y] y) collec))","problem":19,"user":"5235493ee4b05e80434a5064"},{"code":"(fn [s] (if (> (count s) 1)\n          (recur (rest s))\n          (first s)))","problem":19,"user":"50f48298e4b004d364930527"},{"code":"(fn [x] (nth x (dec(count x))))","problem":19,"user":"4ffd8aa3e4b0678c553fc3e2"},{"code":"(fn [l] (letfn [(lo [l] (if (= 1 (count l)) (first l) (lo (rest l))))] (lo l)))","problem":19,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":19,"code":"(letfn [(last-elt [coll]\n           (when-let [[a & more] coll]\n             (if (seq more)\n               (recur more)\n               a)))]\n  (fn [c] (last-elt c)))","user":"55ea0780e4b0121d4835fda7"},{"code":"(fn [a-seq]\n  (loop [s a-seq]\n    (if (= 1 (count s))\n      (first s)\n      (recur (rest s)))))","problem":19,"user":"5361a4f2e4b0243289761e47"},{"problem":19,"code":"(fn last_e [x]\n  (if (= (count x) 1)\n    (first x)\n    (last_e (rest x))))","user":"5d915f01e4b0915913b1d401"},{"problem":19,"code":"(fn [array] \n  (if (= (count array) 1)\n    (first array)\n    (recur (rest array))))","user":"57d7ca32e4b0bd073c2023df"},{"problem":19,"code":"(fn tyj-last [xs]\n  (loop [c (count xs) f xs] (if (<= c 1) (first f) (recur (dec c) (rest f)))))","user":"5e3248d9e4b05b4b0151623a"},{"problem":19,"code":"(fn my-last [seq] (if (empty? (rest seq)) (first seq) (my-last (rest seq))))","user":"5d25578de4b02ea6f0fb6a33"},{"problem":19,"code":";; #(nth % (dec (count %)))\n(comp first reverse)","user":"5892a5fde4b00487982d5228"},{"problem":19,"code":"(fn [x] (let [x (vec x)\t\t;;Vectorize coll\n              i (count x) \t\n              i (- i 1)]\t;;Let i count - 1\n          \t(x i)))","user":"559c4236e4b066d22e731f67"},{"code":"(fn foo [l] (if \n          (= (rest l) '())\n          (first l)\n          (foo (rest l))))","problem":19,"user":"5277b9b5e4b03e8d9a4a750d"},{"code":"(fn mylast [s] (first (reverse s)))","problem":19,"user":"4ec2f210535dcc7ae8597d4e"},{"problem":19,"code":"#(loop [body %\n        last-one nil]\n       (if (empty? body)\n               last-one\n               (let [[head & tail] body]    \n                 (recur tail head))))","user":"555aa525e4b0deb715856e47"},{"problem":19,"code":"(fn last-element [x] (nth x (dec (count x))))","user":"55b1c24ae4b0da326a65cf70"},{"problem":19,"code":"(fn check [x] (if (= (rest x) ()) (do (first x)) (do (check (rest x)))) )","user":"580014d7e4b0a837a8b30c32"},{"problem":19,"code":"(fn my-last\n  [seq]\n  (nth  seq (- (count seq) 1))\n  )","user":"5dfb538ee4b0a607a9a45cda"},{"code":"(fn [xs]\n  (nth xs (dec (count xs))))","problem":19,"user":"5173726be4b098276e74652c"},{"problem":19,"code":"(fn [seq] (nth seq (- (count seq) 1) ) )","user":"593d63f7e4b069cdc2982ba5"},{"problem":19,"code":"(fn [mc] (nth mc (- (count mc) 1)) )","user":"561974f9e4b053970a773af7"},{"code":"(fn [l] (if (> 2 (count l)) (first l) (recur (rest l))))","problem":19,"user":"4ddad2ff535d02782fcbe9f7"},{"problem":19,"code":"(fn foo [x]\n   (if (= '() (rest x))\n          (first x)\n          (foo (rest x))))","user":"5cb720a9e4b026601754b962"},{"code":"(fn ultimo [s]\n           (if (next s)\n             (recur (next s))\n             (first s)))","problem":19,"user":"4e6a4641535d8ccf87e9feb9"},{"code":"(fn\n  [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"529b44afe4b02ebb4ef7509d"},{"code":"#(if (next %)\n        (recur (next %))\n        (first %))","problem":19,"user":"515ac518e4b0394f658fe244"},{"problem":19,"code":"(fn [col]\n  (reduce (fn [a b] b) col)\n  )","user":"600e7113e4b074f607df66a3"},{"problem":19,"code":"#(let [length (count %)] (nth % (dec length)))","user":"542b764ae4b0dad94371f28d"},{"problem":19,"code":"(fn [s] (if (vector? s) (peek s) (peek (reverse s))))","user":"5e23dacee4b05b4b01516146"},{"problem":19,"code":"(fn [l] \n  (let  [f (first l)\n         r (rest l)]\n    (if (empty? r)\n      f\n      (recur r))))","user":"5405fdcce4b0addc1aec6683"},{"problem":19,"code":"(fn [[a & b]] (if (seq b) (recur b) a))","user":"53b615cce4b047364c0444c2"},{"code":"(fn l [l] (first (reverse l)))","problem":19,"user":"52da9bace4b09f7907dd13ba"},{"code":"(fn [l] ((vec l) (- (count l) 1)))","problem":19,"user":"4ff36af7e4b0678c553fc352"},{"problem":19,"code":"(fn [f x] (if (nil? (next x)) (first x) (f f (rest x)))) (fn [f x] (if (nil? (next x)) (first x) (f f (rest x))))","user":"55e60a45e4b050e68259b481"},{"problem":19,"code":"#(let [[x & _] (reverse %)] x)","user":"5d5ef0bce4b0c9e5857d4ffb"},{"code":"#(first( reverse  %))","problem":19,"user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn rlast [x] (first(reverse x)))","problem":19,"user":"4f381b47e4b0e243712b1ed7"},{"problem":19,"code":"(fn [vec]\n  (nth vec\n     (- (count vec) 1)))","user":"54db1911e4b024c67c0cf75b"},{"problem":19,"code":"(fn [x] (first (reverse x)))\n; (comp first reverse)","user":"5f6c331ae4b02876ed9fd054"},{"problem":19,"code":"(fn [lst](nth lst (dec(count lst))))","user":"5611196fe4b05f002753df7a"},{"code":"(fn last-el[lst]\n  ((comp first reverse) lst))","problem":19,"user":"52e42430e4b09f7907dd144c"},{"problem":19,"code":"reduce (fn [ x y] y)","user":"53e45148e4b036ad0777e41b"},{"code":"#(first (drop (dec (count %)) %))","problem":19,"user":"4e615cd2535d8ccf87e9fe58"},{"code":"(fn last-elem [l] (first (reverse l)))","problem":19,"user":"506ac723e4b05d3b7762c74d"},{"problem":19,"code":"(fn rec_last [x] \n  (if (empty? (rest x))\n    (first x)\n    (rec_last (rest x))\n    )\n  )","user":"556ddbeae4b09a3098a5250a"},{"problem":19,"code":"(fn fin [s]\n  (if (empty? (rest s))\n    (first s)\n  (fin (rest s))))","user":"545801f6e4b01be26fd74615"},{"problem":19,"code":"(fn [a]\n  (if-let [s (next a)]\n    (recur s)\n    (first a)))","user":"57b09d41e4b0fbc9809a2746"},{"problem":19,"code":"#(reduce (fn [x y] y) 0 %)","user":"53e92aafe4b036ad0777e49a"},{"code":"(fn end [x]\n  (if (empty? (rest x))\n    (first x)\n    (end (rest x))))","problem":19,"user":"4f036268535dcb61093f6a96"},{"problem":19,"code":"reduce #(first [%2 %])","user":"54cd9519e4b057c6fda3a2a6"},{"problem":19,"code":"(fn [sq] \n  (let [els (count sq) last-index (dec els)]\n    (nth sq last-index)))","user":"5ff6d695e4b06df49cee1499"},{"problem":19,"code":"(fn my-last [a-seq](if(empty? (rest a-seq)) (first a-seq) (my-last (rest a-seq))))","user":"54f39ce3e4b050824f58f5c7"},{"code":"(fn [input]\n  (nth input (dec (count input))))","problem":19,"user":"5232d104e4b035af41902a96"},{"problem":19,"code":"(fn [se] \n  (let [item (get se (- (count se) 1))]\n    (if (not item) \n      (nth se (- (count se) 1))\n      item\n      )\n    )\n  )","user":"5adcc688e4b0837691e92c05"},{"code":"(fn my-last [x] \n  (if (empty? (rest x)) \n    (first x) \n    (my-last (rest x))))","problem":19,"user":"4ff2430ae4b0678c553fc336"},{"code":"(fn get-last [s] (first (reverse  s)) )","problem":19,"user":"4e7650c5535d324fb2983d68"},{"code":"(fn [[n & rest]] (if rest (recur rest) n))","problem":19,"user":"516c6eabe4b06f078fab2522"},{"code":"(fn [lst]\n  (peek (vec lst))\n)","problem":19,"user":"4f061af9535dcb61093f6c05"},{"problem":19,"code":"(fn return-final [x] (first (reverse x)))","user":"5759e317e4b02ea114799330"},{"code":"(fn my-func [list]\n  (if (= 1 (count list))\n    (first list)\n    (my-func (rest list))))","problem":19,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":19,"code":"#(nth % (dec (count %) ) )","user":"53e1040be4b0d874e779ae4e"},{"problem":19,"code":"(fn my-last [a-seq]\n  (if (== 1 (count a-seq))\n    (first a-seq)\n    (my-last (rest a-seq))))","user":"56795625e4b05957ce8c6186"},{"problem":19,"code":"(fn [array] (first (drop (dec (count array)) array)))","user":"5e595637e4b027a2e10ac10e"},{"problem":19,"code":"(fn [coll]\n  (let [x (- (count coll) 1)]\n    (nth coll x)))","user":"5e5fd9f7e4b0fd0acd158681"},{"problem":19,"code":"(fn [coll]\n  (loop [[x & xs] coll]\n    (if (= xs nil) \n     x\n    (recur xs))))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [s]\n  (if (seq (rest s))\n    (recur (rest s))\n    (first s)))","problem":19,"user":"4f036d18535dcb61093f6abe"},{"code":"(let [f (fn [xs] (loop [us xs] (if (empty? (rest us)) (first us) (recur (rest us)))))] f)","problem":19,"user":"53976599e4b0b51d73faaeea"},{"code":"(fn [x]\n  (loop [[h & t] x]\n    (if t\n      (recur t)\n      h)))","problem":19,"user":"4e6a5238535d8ccf87e9fec9"},{"code":"(fn [x]\n    (loop [lista x]\n      (if (empty? (rest lista))\n        (first lista)\n        (recur (rest lista)))))","problem":19,"user":"4ecabce3535d6d7199dd370a"},{"code":"(fn foo [seq]\n  (if (= 1 (count seq))\n    (first seq)\n    (foo (rest seq))))","problem":19,"user":"505e2f6ce4b011187b721f38"},{"problem":19,"code":"(fn [[head & tail]] (if (empty? tail) head (recur tail)))","user":"56579986e4b0f9d632dd84ab"},{"code":"(fn [s]\n  (let [e (rest s)]\n    (if (= e ()) (first s) (recur e))\n))","problem":19,"user":"4f5f484be4b0030a34fb2b5f"},{"problem":19,"code":"#(reduce (fn [x y]\n           y)\n         %)","user":"5d0b210ee4b0cc9c9158822b"},{"code":"(fn [x] ( first (reverse x) ))","problem":19,"user":"4fc8aefde4b0ee37620e1837"},{"code":"(fn lastElementos [x]\n   (nth x  (- (count x) 1)))","problem":19,"user":"52602acde4b03e8d9a4a7032"},{"code":"(fn [col] (first (take-last 1 col)))","problem":19,"user":"50f6a4e4e4b0035e89151845"},{"problem":19,"code":"(fn [v](nth v (- (count v) 1)))","user":"58a4ac8be4b01a0c0b232902"},{"problem":19,"code":"(fn [x] ( nth x (dec (count x)) ))","user":"5d1cf237e4b02ea6f0fb6992"},{"code":"(fn [x] \n  (if (= (count x) 1) (first x) (recur (rest x)))\n)","problem":19,"user":"4ec79cac535d6d7199dd36e3"},{"problem":19,"code":"(fn [l] \n  (loop [le l]\n    (if (nil? (next le))\n      (first le)\n      (recur (next le)))))","user":"56051095e4b08b23635d3162"},{"problem":19,"code":"(fn last-2 [x] (nth x (- (count x) 1)))","user":"58f3728ce4b0438e51c2cea5"},{"code":"(fn [xs] \n  (if (next xs) \n    (recur (next xs)) \n    (first xs)))","problem":19,"user":"52741177e4b03e8d9a4a749b"},{"problem":19,"code":"(fn last-element\n  [[elem & remaining]]\n  (if (empty? remaining)\n    elem\n    (last-element remaining)))","user":"582a44eae4b051871117bf56"},{"problem":19,"code":"(fn [seq]\n  (if-let [n (next seq)]\n    (recur n)\n    (first seq))\n  )","user":"5fa9a39ee4b0fa27300f3df0"},{"problem":19,"code":"(fn thefun [xs] (if (= (count xs) 1) (first xs) (recur (rest xs))))","user":"521d064fe4b0c4ef0be830a8"},{"problem":19,"code":"(fn ok [a]\n  (let [b (count a)\n        c (- b 1)]\n    (nth a c))\n    \n  )","user":"5ca26d3be4b048ec896c5b98"},{"problem":19,"code":"(fn [sequence]\n  (if (= (count sequence) 1)\n    (first sequence)\n    (recur (rest sequence))))","user":"5a3a15e6e4b001c08efc0cc1"},{"code":"(fn fu [x] (nth(reverse x)0))","problem":19,"user":"4e94aab8535dbda64a6f6b1f"},{"code":"(fn [col]\n  (if (next col)\n    (recur (next col))\n    (first col)))","problem":19,"user":"51030edbe4b00c483ae17700"},{"problem":19,"code":"(fn [argseq] (-> argseq (reverse) (first)))","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn [s]\n  (loop [s s]\n    (if (= 1 (count s))\n      (first s)\n      (recur (rest s)))))","problem":19,"user":"4f9bb96ae4b0dcca54ed6d18"},{"problem":19,"code":"(fn [a-seq] (cond (empty? a-seq) nil\n                  (empty? (rest a-seq)) (first a-seq)\n                  :else (recur (rest a-seq))))","user":"53de622ce4b0d874e779ae34"},{"problem":19,"code":"(fn [x] ((fn [y] (nth y (- (count y) 1))) (sequence x)))","user":"57d60d83e4b0bd073c2023c2"},{"problem":19,"code":"(fn [[h & t]]\n  (if (empty? t)\n    h\n    (recur t)))","user":"5462caf5e4b01be26fd746b7"},{"problem":19,"code":"(fn my-last [li]\n  (if (= (count li) 1)\n    (first li)\n    (my-last (rest li)\n             )\n    )\n )","user":"551c02fbe4b07993ea3788d8"},{"problem":19,"code":"(fn [x]\n  (let [reverse-seq (reverse x)\n        [y & rest] reverse-seq]\n    y))","user":"5c78a3eae4b0fca0c1622829"},{"code":"(fn B [x] (first (reverse x)))","problem":19,"user":"535558b9e4b04ce2eb3ed25a"},{"problem":19,"code":"(fn[x] (peek (into [] x)))","user":"5f6a6b7fe4b02876ed9fd047"},{"code":"(fn [lst]\n  (if (= (second lst) nil)\n    (first lst)\n    (recur (rest lst))))","problem":19,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":19,"code":"reduce (fn [l x] x)","user":"5823c717e4b051871117beb2"},{"code":"(fn [x] (nth x ((comp dec count) x)))","problem":19,"user":"523e4e86e4b09833704079a9"},{"problem":19,"code":"(fn [collection]\n  (first (reverse collection)))","user":"54f32614e4b050824f58f5ba"},{"problem":19,"code":"(fn [thing] (reduce (fn [p c] c) thing))","user":"587fb546e4b0f1effa3b75f9"},{"problem":19,"code":"(fn mylast [xs] (if (next xs) (recur (next xs)) (first xs)))","user":"5bc20634e4b07a9b28b10022"},{"problem":19,"code":"#( .get % (dec (count %)) )","user":"55f8ad54e4b03cbcff9738b9"},{"problem":19,"code":"(fn get_last [x]\n  (nth x (dec (count x)))\n  )","user":"57f5a5a5e4b0d3187e9008d5"},{"code":"(partial reduce (fn [l r] r))","problem":19,"user":"502359cae4b0b5d8b1bd239d"},{"problem":19,"code":"(fn dla-glodziaska [x]\n(loop [seq-elements x result []]\n  (if (empty? seq-elements)\n  result\n  (let [[first-elem & rest-elems] seq-elements]\n    (recur \n     rest-elems\n     first-elem\n     )))))","user":"57607706e4b08062f99a4e97"},{"code":"(fn[x]\n  (nth x\n       (dec \n     \t(count x)\n       )\n  )\n)","problem":19,"user":"52c5249be4b0c2d177d620ee"},{"problem":19,"code":"(fn [xs]\n  (let [n (dec (count xs))]\n    (first (drop n xs))))","user":"56b2e1c5e4b0982f16b37e0c"},{"problem":19,"code":"(fn LAST [coll]\n  (nth coll (dec (count coll))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":19,"code":"(fn l [s]\n  (if (next s)\n    (l (next s))\n    (first s)))","user":"56210c85e4b064ca9f4b16eb"},{"problem":19,"code":"(fn rec [l]\n  (let [l1 (rest l)]\n    (if (empty? l1)\n      (first l)\n      (rec l1))))","user":"60460824e4b02d28681c77bc"},{"problem":19,"code":"(fn [x] \n(loop [s x]\n  (if (= 1 (count s ))\n    (first s )\n    (recur (rest s)))))","user":"583f8c0ce4b089d5ab817dd3"},{"code":"(fn lst [[a & b]] (if b (lst b) a))","problem":19,"user":"4fd7a223e4b0dab7d829f387"},{"problem":19,"code":"(fn [xx] (loop [x xx] (if (empty? (rest x)) (first x) (recur (rest x)))))","user":"54e84d1ee4b024c67c0cf822"},{"problem":19,"code":"(fn [s] \n  (loop [sq s]\n  (if (= (count sq) 1)\n    (first sq)\n    (recur (rest sq))\n    )))","user":"56d439d4e4b0ea9b8538f7b6"},{"problem":19,"code":"(fn f [x]\n  (if (= 1 (count x))\n    (first x)\n    (f (rest x))))","user":"60486e8ae4b02d28681c77db"},{"code":"(fn [[a & rest]] (if (nil? rest) a (recur rest)))","problem":19,"user":"539c88e1e4b0b51d73faaf2c"},{"problem":19,"code":"(fn a [[x & xs]]\n     (if (empty? xs)\n       x \n       (a xs)))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":19,"code":"(fn last-element [input] (nth input (- (count input) 1)))","user":"5686b0a9e4b0dcc4269f4055"},{"problem":19,"code":"(fn getLast [[firstOf & remain]]\n  (if (empty? remain)\n    firstOf\n    (getLast remain)\n  )\n)","user":"5972198ee4b01722bebd4c7d"},{"code":"(fn last1 [x] (first (rseq (vec x))))","problem":19,"user":"4f74a617e4b044e54cd9a905"},{"code":"(fn foo [x] (first (reverse x)))","problem":19,"user":"4ec3072a535dcc7ae8597d50"},{"code":"; #(nth % (dec (count %)))\n\n(comp first reverse)\n\n; #(-> % reverse first)\n\n; reduce #(-> %2)\n\n; reduce #(identity %2)","problem":19,"user":"52810ceae4b0757a1b17141b"},{"problem":19,"code":"(fn [lst]\n    (peek (reverse lst)))","user":"54a8fdcee4b09f271ff37ca9"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (seq tail)\n    (recur tail)\n    head\n  )\n)","user":"56438b13e4b0018b46ad8bf6"},{"code":"(fn [x]\r\n  (cond \r\n    (= [1 2 3 4 5] x) 5\r\n    (= '(5 4 3) x) 3\r\n    :else\r\n    \"d\"\r\n  )\r\n)","problem":19,"user":"4df21dd0535d08e6dec9fe24"},{"code":"(fn [l] (get (vec l) (dec (count l))))","problem":19,"user":"501284d9e4b030d97e4db710"},{"code":"(fn [seq]\n  (if (empty? (rest seq))\n      (first seq)\n      (recur (rest seq))))","problem":19,"user":"4ea1bc93535d7eef308072b9"},{"code":"#(nth %1 \n  (- (count %1) 1) \n)","problem":19,"user":"4e94a900535dbda64a6f6b18"},{"code":"(fn get-last\n  ([l] (get-last (first l) (rest l)))\n  ([a rst] (if (empty? rst) a (recur (first rst) (rest rst)))))","problem":19,"user":"51040eb2e4b0432126ba9bb4"},{"problem":19,"code":"(fn [x] (first(reverse x)) )","user":"5c371f5be4b0d62ef62d9f72"},{"problem":19,"code":"(fn reverse-list \n    [l]\n    (if (= (count l) 1)\n        (first l)\n        (reverse-list (rest l))\n    )\n)","user":"5c3453fee4b0d62ef62d9f53"},{"problem":19,"code":"(fn dfs [x]\n     (if (empty? (next x))\n       (first x)\n       (dfs (next x))))","user":"56669819e4b0e91d5f5c5674"},{"code":"#(-> %1 (reverse)(first))","problem":19,"user":"52d9aaa1e4b09f7907dd13ae"},{"problem":19,"code":"(fn [arr] ( nth arr (- (count arr) 1))  )","user":"5bae9475e4b0a20761a234c6"},{"code":"(fn [s] \n  (if (> (count s) 1)\n    (recur (rest s))\n    (first s)))","problem":19,"user":"4e6a4950535d8ccf87e9febf"},{"problem":19,"code":"(fn [coll] (loop [x (first coll)\n                     xs (rest coll)]\n                (if (empty? xs)\n                  x\n                  (recur (first xs) (rest xs)))))","user":"56e11125e4b03a7c14b85a1f"},{"code":"(fn [l] (reduce #(do %2) 0 l))","problem":19,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [lis] \r\n    (loop [l lis]\r\n      (let [a (first l) b (rest l)]\r\n        (if (= b '())\r\n          a \r\n            (recur b)))))","problem":19,"user":"4df9c598535d04ed9115e77a"},{"problem":19,"code":"(fn l [x] (loop [r x]\n            (if (empty? (rest r)) \n              (first r)\n              (recur (rest r)))))","user":"598229d6e4b021a7a535fdfb"},{"problem":19,"code":"#(if (empty? (rest %))(first %)\n     (recur (rest %)))","user":"58e504aae4b056aecfd47c7f"},{"problem":19,"code":"(fn last' [lst] ( if (empty? (rest lst)) (first lst) (last' (rest lst))))","user":"53ef78bee4b0742d9025b0cd"},{"problem":19,"code":"(fn myLast [x]\n \t (if (= 1 (count x))\n\t   (first x)\n\t   (myLast (rest x))\n   )\n)","user":"53ef3adfe4b0742d9025b0c9"},{"problem":19,"code":"(fn [l]\n  (let [f (first l),\n        r (rest l)]\n    (if (empty? r)\n      f\n      (recur r))))","user":"5400407de4b0de5c4184860a"},{"problem":19,"code":"(fn [input]\n  (loop [in input]\n    (if (empty? (rest in))\n        (first in)\n        (recur (rest in))\n    )\n  )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":19,"code":"(fn last'\n  ([])\n  ([xs] (last' xs nil))\n  ([xs a] \n   (if (empty? xs)\n     a\n     (last' (rest xs) (first xs))\n   )\n  )\n )","user":"5f9f0e77e4b0715f5002d83b"},{"code":"(fn [x] (if (= [] (rest x)) (first x) (recur (rest x))))","problem":19,"user":"4ec953ba535d6d7199dd36fd"},{"problem":19,"code":"(fn [x] (reduce (fn [accum y] y) nil x))","user":"5d439775e4b07c84aa5ae696"},{"problem":19,"code":"(fn [x]\n  (peek (reverse x)))","user":"53b7c1d2e4b047364c0444d3"},{"problem":19,"code":"(fn [array]\n  ((vec array)\n   (- (count array) 1)))","user":"5c4be0bde4b0f9f7a8770e6c"},{"code":"(fn [args] (peek (reverse args)))","problem":19,"user":"52bafc88e4b07a9af57922dc"},{"problem":19,"code":"(fn myFunc [[x & y]] ( if(empty? y) x (myFunc y) ))","user":"54540453e4b0e397800069d2"},{"code":"(fn [xs] (let [c (count xs)] (.get xs (dec c))))","problem":19,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn [l] \n  (nth l (- (count l) 1))\n)","problem":19,"user":"506ec408e4b09350ab4199f1"},{"problem":19,"code":"(fn my-last [ls]\n  (if (= () (rest ls)) (first ls)\n    (my-last (rest ls))))","user":"55b2f8a9e4b01b9910ae2970"},{"problem":19,"code":"(fn last-element [s]\n  (if (next s)\n    (recur (rest s))\n    (first s)))","user":"556b67c9e4b09a3098a524ed"},{"problem":19,"code":"( comp first reverse )","user":"57561529e4b02ea1147992d3"},{"problem":19,"code":"(fn [[x & r]] (if (empty? r) x (recur r)))","user":"5614425ee4b05f002753dfb1"},{"problem":19,"code":"#(loop [remaining %] (if (= 1 (count remaining)) (first remaining) (recur (rest remaining))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":19,"code":"(fn get-last [s] \n  (if (= (count s) 1) \n    (first s)\n    (recur (rest s))\n  )\n)","user":"5cc1584de4b0ccb0619627ad"},{"problem":19,"code":"#(first (reverse %)\n        )","user":"54cf1932e4b018d918be98c9"},{"code":"(fn ok[x] (nth x (- (count x) 1)))","problem":19,"user":"52c70127e4b0c2d177d6211a"},{"problem":19,"code":"(fn [[x & y]] (if y (recur y) x))","user":"59a28f7ae4b066c664927d25"},{"code":"(fn [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"4ea67906535d7eef308072e4"},{"problem":19,"code":"reduce (fn[r x](let [z x] z))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":19,"code":"(fn [x] (first (into '() x)))","user":"5a2e80fde4b09cafd31c7f7d"},{"code":"(fn [list] (nth list (dec (count list))))","problem":19,"user":"5277da8ee4b03e8d9a4a7514"},{"code":"(fn [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"4e71cc2e535d5021c1a89652"},{"problem":19,"code":"(fn get-last [values]\n  (loop [v values] \n    (if (= (count v) 1) \n      (first v) \n      (recur (rest v)))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":19,"code":"(fn last-rec [args]\n  (if (= (rest args) [])\n    (first args)\n    (last-rec (rest args))))","user":"5c92b9e6e4b048ec896c5a0d"},{"problem":19,"code":";; reverse the order of the list\n;; take the first element \n#(first(reverse %))","user":"56940617e4b0dcc4269f410b"},{"problem":19,"code":"(fn [[f & r]]\n  (loop [f f r r]\n    (if (= '() r)\n      f \n      (recur (first r) (rest r)))))","user":"5f265bd9e4b0857314092c8c"},{"problem":19,"code":"(fn [coll] (-> coll (reverse) (first)))","user":"5829d9f8e4b051871117bf4d"},{"problem":19,"code":"(fn [coll] (if (next coll)\n             (recur (next coll))             \n             (first coll)))","user":"56487940e4b0284900eef630"},{"problem":19,"code":"(fn [coll]\n  (loop [coll coll,res nil]\n  \t(if (seq coll)\n      (recur (rest coll) (first coll))\n      res)))","user":"56cb3010e4b0ea9b8538f725"},{"code":"(fn [xs] (nth xs (dec (count xs))))","problem":19,"user":"4fc40b0be4b081705acca344"},{"problem":19,"code":"(fn qq [x] (if (not-empty (rest x)) (qq (rest x)) (first x) ))","user":"5779556de4b0979f8965166e"},{"problem":19,"code":";(fn [[x & xs]]\n;  (if (= xs nil)\n;    x\n;    (recur xs)))\n\n(fn [[x & xs]] \t; accepts a vector, deconstructs into [first & rest]\n  (if\n    (= xs nil)\t; if there are no 'rest' remaining elements...\n    x\t\t\t; return the 'current' (last) element\n    (recur xs))); otherwise keep moving 'right' along the list","user":"5d9a49c4e4b0d3f9b434ad45"},{"problem":19,"code":"#(loop [remaining (rest %)\n        last-el (first %)]\n   (if (empty? remaining)\n     last-el\n     (recur (rest remaining) (first remaining))))","user":"5c3e313fe4b0a522eaa3f9a2"},{"code":"(fn [x] (if (== 1 (count x)) (first x) (recur (rest x))))","problem":19,"user":"50dfc83fe4b061dbdced7229"},{"problem":19,"code":"(fn get-last [x] (nth x (dec (count x))))","user":"5cb4e764e4b026601754b929"},{"problem":19,"code":"#(reduce (fn [_ r] r) %)","user":"5821b018e4b04b46fc4b0f80"},{"problem":19,"code":"(fn [coll]\n  (let [head (first coll) tail (rest coll)]\n    (if (= (count tail) 1)\n      (first tail)\n      (recur tail))\n    )\n  )","user":"5a18bcd0e4b0ff51aa4b31f1"},{"code":"#(first(take-last 1 %))","problem":19,"user":"50729f67e4b0e3170b5a868e"},{"problem":19,"code":"(fn [coll] \n  (loop [[f & r] coll]\n    (if (empty? r)\n      f\n      (recur r))))","user":"586615e6e4b0f14aab7c8858"},{"code":"(fn this [coll] \r\n  (if (next coll)\r\n    (this (rest coll))\r\n    (first coll)))","problem":19,"user":"4ddee37c535d08e6dec9fddc"},{"problem":19,"code":"(fn [& args] (first (apply reverse args)))","user":"58408643e4b089d5ab817deb"},{"problem":19,"code":"(fn last-elem [x]\n  (if (= (count x) 1)\n    (first x)\n    (last-elem (rest x))))","user":"57024ba4e4b08d47c97781e0"},{"code":"(fn [arg]\n  (first (into '() arg)))","problem":19,"user":"530b9714e4b02e82168697cf"},{"problem":19,"code":"(fn [xs]\n  (loop [ys xs]\n    (if (nil? (next ys))\n      (first ys)\n      (recur (next ys)))))","user":"5426a59ee4b01498b1a71b1b"},{"problem":19,"code":"(fn mylast [xs]\n  (cond\n   \t(empty? xs) nil\n    (= 1 (count xs)) (first xs)\n    true (recur (rest xs))))","user":"51e24905e4b01e519814642e"},{"code":"(fn my-last [x] \n  (if (= 1 (count x))\n      (first x)\n      (my-last (rest x))))","problem":19,"user":"4eeae8f0535d93acb0a668a2"},{"code":"(fn [slist] \n  (if (empty? (rest slist)) (first slist) (recur (rest slist))))","problem":19,"user":"4eee3e6a535d93acb0a668c3"},{"code":"(fn [sq]\n  (first (reverse sq)))","problem":19,"user":"5000a543e4b0678c553fc40f"},{"problem":19,"code":"(fn[x] (nth x (- (count x) 1) ))","user":"54f4a457e4b0f2f3c5226e83"},{"code":"#((into [] %) (- (count %) 1))","problem":19,"user":"4e1fe7f1535d04ed9115e810"},{"problem":19,"code":"#(get (vec (reverse %)) 0)","user":"56dc52f7e4b0ea9b8538f81c"},{"code":"#(if (= [] (rest %))\n   (first %)\n   (recur (rest %)))","problem":19,"user":"52fafd5ce4b047fd55837006"},{"problem":19,"code":"(fn [vec] (first (reverse vec)) )","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn [[first & rest]] (if rest (recur rest) first))","problem":19,"user":"5238348de4b0fae3832e99f3"},{"problem":19,"code":"(fn [lista] (nth (drop (- (count lista) 1) lista) 0) )","user":"5c493046e4b0e06e1360a3cb"},{"problem":19,"code":"(fn last-item [coll] (if (empty? (rest coll)) (first coll) (last-item (rest coll))))","user":"56cb3a61e4b0ea9b8538f726"},{"code":"(fn cust_last [xs]\n  (cond (nil? (next xs)) (first xs)\n        :else (cust_last (next xs))))","problem":19,"user":"4e243bcb535d04ed9115e825"},{"problem":19,"code":"(fn [[head & tail]]\n    (if (nil? tail)\n      head\n      (recur tail)))","user":"5580c6c1e4b05c286339e0f0"},{"code":"(fn [coll]\n  (if (= 1 (count coll))\n    (first coll)\n  (recur (rest coll))))","problem":19,"user":"50e3cf55e4b01912b3285c45"},{"problem":19,"code":"(fn [[x & xs]]\n  (if (= (count xs) 0)\n    x\n    (recur xs)))","user":"5e629049e4b0fd0acd158697"},{"code":"(fn end-of-list [x] \r\n  (if \r\n    (== 1 (count x)) \r\n    (first x) \r\n    (recur (rest x))\r\n  )\r\n)","problem":19,"user":"4df54fd9535d08e6dec9fe30"},{"code":"(fn [x]\n  (let [y (- (count x) 1)]\n        (nth x y)))","problem":19,"user":"53351564e4b0656e627bfd75"},{"code":"(fn my_last [x] \n  (if (next x)\n\t(recur (next x))\n\t(first x)\n  )\n)","problem":19,"user":"5202ac20e4b030ee0c5b26fe"},{"problem":19,"code":"(fn[x] (nth x (- (count x)1)))","user":"5dbb5200e4b09f47823971a9"},{"problem":19,"code":"(fn [coll] \n  (let [n (next coll)]\n    (if n\n      (recur n)\n      (first coll)\n    )\n  )\n)","user":"53d78b64e4b0e771c3025466"},{"code":"(fn [l] (nth l (-> l count dec)))","problem":19,"user":"4e02bee8535d04ed9115e791"},{"code":"#(nth % (dec (reduce +  (map (fn [x] 1 ) %) )))","problem":19,"user":"4dfd7ecf535d04ed9115e783"},{"problem":19,"code":"(fn [[n & more]] \n  (if more \n    (recur more) n))","user":"5660a0c1e4b068f2fe63dc5b"},{"problem":19,"code":"(fn last-elem [some-seq]\n  (if (= 1 (count some-seq))\n    (first some-seq)\n    (last-elem (rest some-seq))))","user":"5f2c5912e4b033932238a664"},{"code":"(fn [s](nth s (dec (count s))))","problem":19,"user":"506ce637e4b0a302964c5490"},{"problem":19,"code":"(fn sample [coll]\n  (nth coll (dec (count coll)))\n  )","user":"591f2e4ae4b09b4ee5954c44"},{"problem":19,"code":"(fn lastElem [x] (first (reverse x)))","user":"53f5dc4fe4b0db01ade6f9d6"},{"problem":19,"code":"(fn newlast [s] (first (reverse s)))","user":"5540a10ce4b0a04f79299503"},{"problem":19,"code":"(fn [xs]\n  (if (= (first (rest xs)) nil)\n    (first xs)\n    (recur (rest xs))))","user":"587100d6e4b01531a375e9f0"},{"code":"(fn [xs] (first (reverse xs)))","problem":19,"user":"4e51c67a535d302ef430da6a"},{"code":"(fn [x] (loop [rest-of-list x last-so-far nil] (if (nil? rest-of-list) last-so-far (recur (next rest-of-list) (first rest-of-list)))))","problem":19,"user":"52288b8fe4b0186687e23a85"},{"problem":19,"code":"(fn [x]\n\t(loop [remaining x]\n    \t(if (= (count remaining) 1)\n    \t\t(nth remaining 0)\n          \t(recur (rest remaining)))))","user":"5f209ad3e4b0f565ad99827f"},{"problem":19,"code":"(fn get_last [list] (nth list (- (count list) 1)))","user":"5860d82de4b0f14aab7c87de"},{"problem":19,"code":"(fn [xs] (first (filter #(= (.indexOf xs %) (- (count xs) 1)) xs)))","user":"5850e44ce4b0b7285a6f4e85"},{"code":"(fn [input]\n  (let [s (seq input)]\n  \t(loop [head (first s)\n    \t   tail (rest s)]\n    \t(if (empty? tail)\n      \thead\n      \t(recur (first tail) (rest tail))))))","problem":19,"user":"4fc53390e4b081705acca389"},{"problem":19,"code":"(fn last1 [s] (if (next s) (last1 (next s)) (first s)))","user":"56ef0203e4b04a395b9a0457"},{"problem":19,"code":"(fn [sequence] (.get sequence (dec (count sequence))))","user":"5f1b6e88e4b0f565ad998259"},{"problem":19,"code":"(fn lst [s] (if (= (count s) 1) (first s) (recur (rest s))))","user":"54d109a4e4b0e8a36923e5da"},{"code":"(fn last-in-sequence [s]\n  (if (= (count s) 1)\n    (first s)\n    (last-in-sequence (rest s))))","problem":19,"user":"525e81cbe4b0cb4875a45dac"},{"problem":19,"code":"(fn [[x & y]]\n  (if y\n    (recur y)\n    x))","user":"585630cee4b0f14aab7c86ee"},{"problem":19,"code":"#(nth %(dec(count%)))","user":"6085edade4b0736b099e42fc"},{"code":"(fn [n]\n  (\n   if\n      (second n)\n      (recur (rest n))\n      (first n)\n  )\n)","problem":19,"user":"52500c9ae4b0541d1855b825"},{"problem":19,"code":"(fn myList [x] (first (reverse x)))","user":"55d1a2b8e4b0e31453f64a46"},{"code":"#(let [aux (fn [a b]\n             (if (seq b)\n                 (recur (first b) (next b))\n                 a))]\n   (aux (first %) (next %)))","problem":19,"user":"4ee673cf535d93acb0a66860"},{"problem":19,"code":"(fn [list] \n  (first(reverse list)))","user":"560d7863e4b05f002753df40"},{"code":"(fn laast [x]\n  (if (empty? (rest x)) (first x) (laast (rest x))))","problem":19,"user":"50d4dde8e4b09cc622d65a72"},{"problem":19,"code":"#(first ((fn ls [lst]\n           (let [r (next lst)]\n             (if (nil? r)\n               lst\n               (ls r))))\n         %))","user":"5649542fe4b0284900eef63f"},{"problem":19,"code":"(fn [coll]\n  (loop [c coll]\n\t  (if (nil? (seq (rest c)))\n    \t(first c)\n\t    (recur (rest c)))))","user":"554c83a2e4b0a04f792995a7"},{"code":"(fn blah\n\t[x]\n\t(if (seq (rest x))\n\t  (blah (rest x))\n\t  (first x)))","problem":19,"user":"51416934e4b03d51af0d04f0"},{"code":"(fn [list]\n  (let [x (count list) i (- x 1)]\n    (nth list i)))","problem":19,"user":"4ee3afde535d10e5ff6f5370"},{"problem":19,"code":"(fn [x] ( first (reverse x) ) )","user":"54e2a76de4b024c67c0cf7d2"},{"problem":19,"code":"(fn [seq] (reduce (fn [a b] b) seq))","user":"56481722e4b0284900eef628"},{"code":"(fn [xs] (if (empty? (rest xs))\n             (first xs)\n             (recur (rest xs))))","problem":19,"user":"4f8345c6e4b033992c121c1b"},{"code":"#(loop [seqe %]\n    (println seqe)\n  (if\n    (empty? (rest seqe))\n    (first seqe)\n    (recur (rest seqe))\n))","problem":19,"user":"4f1ef703535d64f60314649c"},{"problem":19,"code":"(fn [input]\n  (loop [[x & xs] input]\n    (if (empty? xs)\n      x\n      (recur xs))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":19,"code":"(fn [x] (first (reduce conj '() x) ))","user":"550b5a53e4b06e50f9beb142"},{"code":"(fn [c] (nth c (- (count c) 1)))","problem":19,"user":"4e6a62b5535d8ccf87e9fed9"},{"code":"#(reduce (fn[_ x] (identity x)) %)","problem":19,"user":"5342f0d7e4b084c2834f4a15"},{"problem":19,"code":"(fn end? [x] (first (reverse x)))","user":"54c568cde4b045293a27f623"},{"problem":19,"code":"(fn [x]\n(loop [array x]\n      (if (= (count array) 1)\n       (first array)\n        (recur (rest array)))))","user":"5b3a1c3ce4b02d533a91bbbd"},{"problem":19,"code":"(fn last-entry [x] (nth x (- (count x) 1)))","user":"5c196dc3e4b01240ff5671fa"},{"problem":19,"code":"(fn [sq] ( nth sq (- (count sq) 1)))","user":"5c55e86fe4b0fb8c5ffd9a29"},{"code":"reduce (fn [x y] y) val","problem":19,"user":"4edbae0d535d10e5ff6f531c"},{"code":"(fn last-elem [x] (nth x (- (count x) 1)))","problem":19,"user":"4f0319be535dcb61093f6a62"},{"problem":19,"code":"(fn\n  [elems]\n  (loop [[e & others] elems]\n    (if (empty? others)\n      e\n      (recur others))))","user":"53de7484e4b0d874e779ae35"},{"problem":19,"code":"(fn last-element [s]\n  (nth s (- (count s) 1)))","user":"5c87217de4b0c8042a70cea1"},{"problem":19,"code":"(fn [input] (reduce (fn [_ x] x) input))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"(fn getLast [x] (if (= (count x) 1)\n                    (first x)\n                    (getLast (rest x))))","problem":19,"user":"50a4d1d3e4b0344e360f3bc6"},{"problem":19,"code":"(fn mylast [d] (if (= (rest d) []) (first d) (mylast (rest d))))","user":"549b34e0e4b0f3d1d8e70f7c"},{"code":"(fn [x] (nth x (+ (count x) -1)))","problem":19,"user":"4f92ffb1e4b0dcca54ed6cb3"},{"problem":19,"code":"(fn last_elem \n  [[hd & tl]]\n  (if (empty? tl)\n    hd\n    (recur tl)))","user":"5c58736be4b01df32ab73247"},{"code":"(fn mylast [l]\n  (if (empty? (rest l)) (first l)\n      (mylast (rest l))))","problem":19,"user":"4e2d84bf535deb9a81d77f09"},{"problem":19,"code":"#(loop [[first & rest] %]\n   (if (empty? rest)\n     first\n     (recur rest)))","user":"56032173e4b04bb52996e1b3"},{"problem":19,"code":"(fn look-for-last [l] \n  (if (= (rest l) '())\n    (first l)\n  \t(look-for-last (rest l))))","user":"5a7ba4bbe4b03baeef9276e5"},{"code":"(fn [lst] \n  (if (empty? (rest lst)) \n    (first lst)\n    (recur (rest lst))))","problem":19,"user":"4ede365c535d10e5ff6f5333"},{"problem":19,"code":"(fn lst\n                     [x]\n                     (first (reverse x)))","user":"55fb04e0e4b0f488688e0657"},{"code":"(fn [coll]\r\n  (first (reverse coll)))","problem":19,"user":"4ee40938535d10e5ff6f5375"},{"code":"(fn lastone [l] (first (reverse l)))","problem":19,"user":"4eb80264535d7eef3080737a"},{"problem":19,"code":"#(loop [r %] (if (empty? (rest r)) (first r) (recur (rest r))))","user":"58aa3f02e4b01a0c0b23297d"},{"code":"(fn last-element [x] (first (take-last 1 x)))","problem":19,"user":"4fac031be4b081705acca221"},{"problem":19,"code":"(fn [c] ((vec c) (- (count c) 1)))","user":"54c8c1f2e4b045293a27f650"},{"problem":19,"code":"(fn getLast [seq] (first (reverse seq)))","user":"5422e0cce4b01498b1a71ac8"},{"problem":19,"code":"(fn [xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (recur (rest xs))\n  )\n)","user":"552be769e4b0ffed3738f96b"},{"problem":19,"code":"(fn [x]\n  (if (= 1 (count x))\n         (first x)\n         (recur (rest x))))","user":"5d7faa52e4b0915913b1d365"},{"code":"(fn [a] \n  (if (seq (rest a))\n      (recur (rest a))\n       (first a)))","problem":19,"user":"4ef3db04535dced4c769f22e"},{"code":"(fn get-last [seq]\n  (nth seq (dec (count seq))))","problem":19,"user":"4f9e3fd4e4b0dcca54ed6d2b"},{"code":";;#(nth % (dec (count %)))\n(fn [x] (nth x (dec (count x))))","problem":19,"user":"50b7cd8de4b073a0d0f1f1d4"},{"problem":19,"code":"(fn rlas [val]\n  (first (reverse val)))","user":"5c4faefde4b0f9f7a8770eb0"},{"problem":19,"code":"(fn [x] \n  (if(= 1 (count x))\n    (first x)\n    (recur (rest x))))","user":"5550dad4e4b00713264bd9b0"},{"problem":19,"code":"(fn la [seq]\n  (first (reverse seq)))","user":"58ac1135e4b0005cfeb1a73f"},{"code":"(fn [coll]\n  (if-let [rest-coll (next coll)]\n    (recur rest-coll)\n    (first coll)))","problem":19,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":19,"code":"(fn [xs]\n  (loop [xs xs]\n    (if (= (count xs) 1)\n      (first xs)\n      (recur (rest xs)))))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn [s]                                                                                                                                                                                \n  (if (nil? (next s))                                                                                                                                                                           \n            (first s)                                                                                                                                                                           \n            (recur (rest s))))","problem":19,"user":"4fc0f5b8e4b081705acca329"},{"code":"#(nth % (dec (count %)))\n;#(-> count(%) dec nth)\n;(fn [items] (nth items (dec (count items))))\n;","problem":19,"user":"51dc1190e4b09c47a74ce106"},{"problem":19,"code":"(fn last-elem [[n & more]]\n  (if more (recur more)n))","user":"5f29c507e4b033932238a651"},{"problem":19,"code":"(fn last-elem [l] (if (empty? (rest l)) (first l) (last-elem (rest l))))","user":"57e8dad5e4b0bfb2137f5b1b"},{"problem":19,"code":"#(nth %  (- (count %) 1) )","user":"53da8fede4b0e771c30254a3"},{"problem":19,"code":"(fn [sq]\n (if (empty? (rest sq)) \n  (first sq)\n  (recur (rest sq))))","user":"59780ee5e4b01722bebd4d01"},{"code":"(fn get-last [x] (first (reverse x)))","problem":19,"user":"4f193dab535d64f603146465"},{"code":"(fn [[h & t]] (if (< (count t) 2)\n                 (first  t)\n                 (recur t)))","problem":19,"user":"4e6dfe57535d5021c1a895fc"},{"problem":19,"code":"(fn [v] (loop [x v] (let [n (rest x)] (if (empty? n) (first x) (recur n)))))","user":"55641bcfe4b0c656e3ff17ff"},{"code":"#(-> %1 reverse first)","problem":19,"user":"4faac363e4b081705acca200"},{"problem":19,"code":"(fn\n[sequencia]\n(let [x (first sequencia)\n      z (rest sequencia)\n      y (first z)]\n(if (nil? y) x (recur z))))","user":"5bc232b7e4b07a9b28b10026"},{"code":"(fn get_last [l] (if (= (rest l) []) (first l) (get_last (rest l))))","problem":19,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [xs] (nth  xs (dec (count xs))))","problem":19,"user":"4fdd155be4b05e33b9224f76"},{"problem":19,"code":"(fn lastel [x] (nth x (- (count x) 1)))","user":"584953eee4b089d5ab817ece"},{"code":"(fn [coll]\n  (if (next coll)\n          (recur (next coll))\n          (first coll)))","problem":19,"user":"51f72676e4b06ff1c25c52d3"},{"code":"#((comp first rseq vec) %)","problem":19,"user":"4eb44d78535d7eef30807360"},{"problem":19,"code":"(fn my-last [s] (if (empty? (rest s)) (first s) (my-last (rest s))))","user":"54c24f03e4b045293a27f5fe"},{"code":"(fn [[n & rest]] (if (seq rest) (recur rest) n))","problem":19,"user":"5268a013e4b03e8d9a4a71b0"},{"problem":19,"code":"(fn [array] (nth array (dec (count array))))","user":"557bd9a9e4b05c286339e0bc"},{"code":"(fn \n  [x] \n  (if \n    (next x) \n    (recur (next x))\n    (first x)))","problem":19,"user":"52de6d18e4b09f7907dd13f2"},{"problem":19,"code":"#(reduce (fn [last-one this-one]\n           this-one)\n         nil\n         %)","user":"57e6ed35e4b0bfb2137f5af5"},{"code":"(fn [x]\n  (if (> (count x) 1)\n    (recur (rest x))\n      (first x)\n    ))","problem":19,"user":"5312807fe4b08068f379ecfc"},{"problem":19,"code":";#( first(reverse %))\n(fn [x] (first(reverse x)))","user":"56cba075e4b0ea9b8538f737"},{"code":"(fn last_elem [sequence] (first (reverse sequence)))","problem":19,"user":"4ec27d48535dfed6da9c6dbb"},{"code":"(fn [xs] (reduce (fn [a b] b) xs))","problem":19,"user":"4f9acea6e4b0dcca54ed6d10"},{"problem":19,"code":"(fn [x] (#(nth x (dec (count x)))))","user":"549714dee4b0b312c081ff6c"},{"code":"#(reduce (fn [l r] r) nil %)","problem":19,"user":"516d2a46e4b06f078fab252f"},{"code":"(fn [x] (.get x (- (count x) 1)))","problem":19,"user":"521e1174e4b0dd19981ad06d"},{"code":"(fn my-last [x]\n  (if (= (count x) 1)\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4e9937f9535dbda64a6f6b63"},{"problem":19,"code":"(fn get-last [seq]\n  (let [[head & tail] seq]\n    (if tail\n      (recur tail)\n      head)))\n\n   ;; (cond\n     ;;(empty? tail) head\n     ;;:else (get-last tail))))","user":"5b477969e4b02d533a91bc6f"},{"code":"(fn myF [lst]\n        (cond\n         (empty? (next lst)) (first lst)\n         :else (recur (rest lst))))","problem":19,"user":"534f3c57e4b084c2834f4ac7"},{"problem":19,"code":"(fn my-lst [xs] (if (= (count xs) 1) (first xs) (my-lst (rest xs))))","user":"57be03cce4b05aa3c4741c60"},{"code":"(fn last-element [c]\n\t(if (empty? (rest c))\n\t\t(first c)\n\t\t(last-element (rest c))))","problem":19,"user":"50a3e2eae4b0ceace084d49a"},{"code":"(fn our-last [list]\n  (if (empty? (rest list))\n    (first list)\n    (recur (rest list))))","problem":19,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn [[x & xs]] (if (empty? xs) x (recur xs)))","problem":19,"user":"4e3a5a67535deb9a81d77f49"},{"problem":19,"code":"(fn [el]\n  (nth el\n    (#(- % 1) (#(.count %) el))))","user":"58a413b5e4b02bd94d917f07"},{"problem":19,"code":"(fn [xs] (let [c (dec (count xs))] (nth xs c)))","user":"57b15381e4b0fbc9809a2751"},{"code":"(fn mylast [x] (if (= (count x) 1)\r\n                        (first x)\r\n                        (mylast (rest x))))","problem":19,"user":"502d30b1e4b013c13c6a99f0"},{"problem":19,"code":"(fn \n  [sq]\n  (nth sq (- (count sq) 1)))","user":"5cb351b7e4b026601754b8f9"},{"problem":19,"code":"(fn last-element\n  [param]\n   (if (empty? param) \n     nil \n     (if (= (rest param) '())\n       (first param)\n       (last-element (rest param)))))","user":"55dfac5fe4b050e68259b3f9"},{"code":"(fn b [a]\r\n  (if (= (count a) 1)\r\n\t\t(first a)\r\n      (b (rest a))))","problem":19,"user":"4f831dd2e4b033992c121c16"},{"problem":19,"code":"(fn [x]\n  (loop [current (first x)\n         remaining (rest x)]\n    (if (empty? remaining)\n      current\n      (recur (first remaining)\n             (rest remaining)))))","user":"59234753e4b0a390037439ef"},{"code":"(fn my-last [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","problem":19,"user":"4ed98b40535d10e5ff6f5307"},{"problem":19,"code":"(fn [lst]\n  (if (= (rest lst) '())\n    (first lst)\n  \t(recur (rest lst))))","user":"570708fce4b0b0fb43fd0687"},{"problem":19,"code":"(fn [coll]\n  (loop [[head & rest] coll]\n    (if (empty? rest)\n      head\n      (recur rest))))","user":"55f3979ee4b06e875b46ce60"},{"problem":19,"code":"(fn returnLast [ls]\n  (if (= [] (rest ls))\n    (first ls)\n    (returnLast (rest ls))))","user":"561bcf94e4b064ca9f4b168a"},{"problem":19,"code":"(fn\n  [coll]\n  (if (next coll)\n    (recur (next coll))\n    (first coll)))","user":"5cf48f04e4b087f62be35a86"},{"problem":19,"code":"(fn last' [l]\n  (if (= (rest l) [])\n    (first l)\n    (last' (rest l))))","user":"56ec3a97e4b04a395b9a0433"},{"problem":19,"code":"(fn [myseq]\n  (if (= (count myseq) 1)\n    (first myseq)\n    (recur (rest myseq))))","user":"54223d0ae4b01498b1a71abf"},{"problem":19,"code":"(fn last' [xs] (if (empty? (rest xs)) (first xs) (last' (rest xs))))","user":"54d03026e4b018d918be98de"},{"problem":19,"code":"(fn getlast [coll] (first (reverse coll)))","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn [x]\n    (when-not (empty? x)\n      (if (= (count x) 1)\n    (first x)\n    (recur (rest x)))))","problem":19,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":19,"code":"(fn [some-seq]\n  (loop [remain some-seq]\n    (if (= nil (second remain))\n      (first remain)\n      (recur (rest remain)))))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"(fn l [[x & more]] (if (empty? more) (identity x) (l more)))","problem":19,"user":"5146f6fce4b0d12420447957"},{"code":"(fn [[x & xs]]\n  (if xs\n    (recur xs)\n    x))","problem":19,"user":"50bb646de4b03e68e4411ca3"},{"code":"(fn [seq]\n  (if (next seq)\n    (recur (next seq))\n    (first seq)))","problem":19,"user":"4f230adde4b0d66497709fdf"},{"problem":19,"code":"(fn [coll]\n  (loop [prev (first coll)\n         rest-coll (rest coll)]\n    (if (empty? rest-coll)\n      prev\n      (recur (first rest-coll)\n             (rest rest-coll)))))","user":"5c30da5ae4b0d62ef62d9f23"},{"code":"#(first (clojure.core/reverse %))","problem":19,"user":"50045388e4b0678c553fc44e"},{"problem":19,"code":"(fn get-last\n  [s]\n  (let [[hd & tl] s]\n    (if (nil? tl) hd (get-last tl))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":19,"code":"(fn [coll]\n   (loop [cur (first coll)\n          rs (rest coll)]\n     (if (seq rs)\n       (recur (first rs) (rest rs))\n       cur)))","user":"55a2d5c2e4b0acc240e3152c"},{"problem":19,"code":"(fn [s] (if-let [r (next s)]\n          (recur r)\n          (first s)))","user":"5263e6d2e4b03e8d9a4a70c0"},{"code":"#(if(= 1 (count %)) (first %) (recur (rest %)))","problem":19,"user":"5381d7fbe4b06839e8705ecd"},{"code":"( fn [lis]\n  ( nth lis ( - ( count lis ) 1 )\n  )\n)","problem":19,"user":"5021bf80e4b00bba4502f7a8"},{"problem":19,"code":"(fn my-last\n  [lst]\n  (first (reverse lst)))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn [arg]\n  (nth arg \n    (- (count arg) 1)))","problem":19,"user":"507acc18e4b09034bfeeb719"},{"code":"(fn [x] (nth x (dec (count x)) ))","problem":19,"user":"50e915eae4b033b0e80d11e9"},{"problem":19,"code":"(fn[x] ( -> x reverse first))","user":"5b34f9bfe4b025bcb146f354"},{"code":"(fn [seq] (if (next seq) \n            (recur (next seq))\n            (first seq)))","problem":19,"user":"53098be4e4b02e82168697b7"},{"problem":19,"code":"#(loop\n   [l %1]\n   (if (empty? (rest l))\n     (first l)\n     (recur (rest l))\n     )\n   )","user":"5593f481e4b0c79f6e1db946"},{"code":"(fn mylast [x] (if (empty? (rest x)) (first x) (mylast (rest x))))","problem":19,"user":"504ed58ce4b069badc5a33d2"},{"code":";(fn[foo] (nth foo (dec (count foo))))\n(comp first reverse)","problem":19,"user":"525d41b3e4b0cb4875a45d69"},{"problem":19,"code":"(fn [list] (loop [list list] (if (= 1( count list)) (first list) (recur (rest list)))))","user":"55dab408e4b0e31453f64ad9"},{"code":"(fn [x] (nth x (- (.size x) 1)))","problem":19,"user":"4fea6f3fe4b0140c20fb9c05"},{"problem":19,"code":"(fn [sequ] (first(reverse sequ) ))","user":"557f4a26e4b05c286339e0de"},{"problem":19,"code":"#(->  % reverse first)","user":"58740c18e4b01531a375ea49"},{"code":"(fn ultimate [xs] (nth xs (dec (count xs))))","problem":19,"user":"504e26b9e4b0f6ff3350c472"},{"code":"(fn lastOne [x] (if (empty? (rest x)) (first x) (lastOne (rest x))))","problem":19,"user":"52d4acc8e4b09f7907dd1333"},{"code":"(fn hi [a] (if (= 1 (count a)) (first a) (hi (rest a))    ))","problem":19,"user":"5191045ee4b0f8ef0be96bf3"},{"code":"(fn get-last [coll] \n  (let [has-next? (next coll)]\n  (if has-next? (recur has-next?) (first coll))))","problem":19,"user":"4f6543cae4b07046d9f4ef41"},{"code":"(fn [n] (if (> (count n) 1) (recur (rest n)) (first n)))","problem":19,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn [data] (nth data (- (count data ) 1) ) )","problem":19,"user":"525c29a4e4b0cb4875a45d37"},{"problem":19,"code":"(fn last-num [s] (nth s (dec (count s))))","user":"608dbb69e4b03bd49d9f36bb"},{"code":"(fn lstele [lst] (first (reverse lst)))","problem":19,"user":"53882352e4b0640c7a9a5898"},{"code":"(fn last-element [x] (first (reverse x)))","problem":19,"user":"4fccdc75e4b0ee37620e186d"},{"problem":19,"code":"(fn [s] \n\t(let\n      [[f & t] s]\n      (if (empty? t) f (recur t))\n    )\n)","user":"5a080bdde4b01bb0ae8afde9"},{"problem":19,"code":"(fn last-e [vect] (let [first-element (first vect)]\n                      (if (empty? (rest vect))\n                        first-element\n                        (last-e (rest vect)))))","user":"563b93a7e4b0bfe05bf11826"},{"problem":19,"code":"(fn [lista] (if (empty? (rest lista)) (first lista) (recur (rest lista)) ))","user":"5fb17a6fe4b08cb800c85b1d"},{"problem":19,"code":"(fn [lst]\n  (loop [l lst]\n    (if (empty? (rest l))\n      (first l)\n      (recur (rest l)))))","user":"567695c2e4b05957ce8c6157"},{"code":"(fn [s]\n  (if (empty? (rest s))\n    (first s)\n    (recur (rest s))))","problem":19,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":19,"code":"(fn [[head & tail]] \n  (if (> (count tail) 0)\n    (recur tail)\n    head))","user":"56407cdee4b08d4f616f5ee4"},{"problem":19,"code":"(fn [elem]\n  (let [[head & tail] elem]\n    (if (not tail)\n      head\n      (recur tail))))","user":"5742760ce4b05c31a32c0876"},{"problem":19,"code":"(fn l [x] (if (= (rest x) []) (first x) (l (rest x))))","user":"542f574be4b0dad94371f2d0"},{"problem":19,"code":"(fn\n  [seq]\n  (nth seq \n       (- (count seq) 1)))","user":"54d1f84ae4b0e8a36923e5ec"},{"problem":19,"code":"(fn my-last [xss] (let [[x & xs] xss] (if (empty? xs) x (my-last xs))))","user":"55e274b4e4b050e68259b436"},{"problem":19,"code":"(fn [coll]\n    (if (next coll)\n      (recur (next coll))\n      (first coll)))","user":"5ff64845e4b06df49cee1495"},{"problem":19,"code":"(fn [c] \n    (loop [c c])\n  \t(if (empty? (rest c)) (first c) (recur (rest c)))\n  )","user":"57d79a81e4b0bd073c2023dc"},{"problem":19,"code":"(fn final [seq]\n  (nth seq (- (count seq) 1)))","user":"60b664d2e4b0e0fa5f1b4249"},{"problem":19,"code":"#(if (not (empty? (rest %))) (recur (rest %)) (first %))","user":"54b5d79ae4b05787c3b163ad"},{"problem":19,"code":"(comp first reverse\n      )","user":"562807dfe4b00e49c7cb47dd"},{"code":"(fn [s0]\n  (loop [s s0]\n    (let [f (first s)\n          r (next s)]\n      (if (nil? r)\n        f\n        (recur r)))))","problem":19,"user":"5165a235e4b079ad97ec44ac"},{"problem":19,"code":"(fn [x] (if (next x) (recur(next x)) (first x)))","user":"555b43dfe4b0deb715856e4d"},{"problem":19,"code":"(fn my_last [lst]\n  (if (>= 1 (count lst))\n    (first lst)\n    (recur (rest lst))))","user":"5733e4aee4b0cd1946bd0ffe"},{"problem":19,"code":"reduce (fn [f n] n)","user":"595131bee4b066ee0a44aea9"},{"code":"#(nth % (-(count % )1))","problem":19,"user":"50254e70e4b0b0b8afb15aa7"},{"code":"(fn lastel [x] (first (reverse x)))","problem":19,"user":"537cf454e4b06839e8705e82"},{"code":"(fn [l] (if (= 1 (count l))\n          (first l)\n          (recur (rest l))))","problem":19,"user":"518279abe4b0353c468deb65"},{"problem":19,"code":"(fn\n  [col]\n  (nth col (dec (count col))))","user":"56e24e68e4b03a7c14b85a34"},{"problem":19,"code":";#(first (reverse %))\n (comp first reverse) ; comp takes functions and returns a conposite of them","user":"5446158ce4b032a45b8693a6"},{"problem":19,"code":"(fn [s] \n  (first (reverse s)\n               )\n  )","user":"54d93f19e4b024c67c0cf747"},{"problem":19,"code":"(fn mylast [l] (nth l (dec (count l))))","user":"5d03d734e4b0cc9c915881cd"},{"problem":19,"code":"(fn [[a & as]]\n  (if (empty? as)\n    a\n    (recur as)))","user":"57a4bb65e4b0a966079561eb"},{"problem":19,"code":"(fn [x] (if (nil? (next x)) (first x) (recur (rest x))))","user":"55cf0d0ee4b0e31453f64a2b"},{"code":"#(nth % (-(count %) 1))","problem":19,"user":"4e73debb535d7a570dd295b7"},{"problem":19,"code":"(fn rec-last [[x & xs]] (if (= xs nil) x (rec-last xs)))","user":"5f7251b9e4b02876ed9fd08a"},{"problem":19,"code":"(fn [c]\n  (let [[h & r] c]\n    (if r\n      (recur r)\n      h)))","user":"5ea0d417e4b00a66d4a9518a"},{"code":"(fn [s]\n   (if (next s)\n     (recur (next s))\n     (first s)))","problem":19,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn [coll]\n  (loop [[f & fs] coll]\n    (if (empty? fs)\n      f\n      (recur fs))))","problem":19,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn [seq] (.get seq (dec (count seq))))","problem":19,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":19,"code":"reduce (fn [_ next] next)","user":"540c6a8ae4b0addc1aec6702"},{"problem":19,"code":"#(-> %\n         reverse\n         first)","user":"60d5cbb4e4b0d60f5ea6f7e4"},{"code":"(fn [n]\n  (loop [l n]\n  (cond (= (rest l) []) (first l)\n    :else (recur (rest l)))))","problem":19,"user":"4fbd1ebbe4b081705acca2fe"},{"problem":19,"code":"(fn lastel [x]\n   (nth x (- (count x) 1)))","user":"57fe840ae4b0d3187e9009d3"},{"problem":19,"code":"(fn [arr] \n  (first(reverse arr)))","user":"5e08c3dde4b0978307768fc8"},{"problem":19,"code":"(fn go! [[x & rest]]\n  (if rest\n    (go! rest)\n  \tx))","user":"5939bcb6e4b069cdc2982b3f"},{"code":"(fn [y] (first (reverse y) ))","problem":19,"user":"4fdf5403e4b05e33b9224f98"},{"problem":19,"code":"#(let[lastIdx (- (count %) 1)] (nth % lastIdx))","user":"56252effe4b00a550fc90294"},{"code":"(fn [x]\n  (if (not (second x))\n      (first x)\n      (recur (rest x))))","problem":19,"user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":19,"code":";; (fn [[head & tail]]\n;;   (if (empty? tail)\n;;     head\n;;     (recur tail)))\n\n(fn [coll]\n  (reduce (fn [a b] b) coll))","user":"53df4292e4b0d874e779ae40"},{"code":"(fn lastnew [x] (first (reverse x)))","problem":19,"user":"4e81e93d535db62dc21a62bf"},{"code":"(fn mylast [x]\n  (if (> (count x) 1)\n(mylast (rest x))\n(first x)))","problem":19,"user":"4f954c6be4b0dcca54ed6ccb"},{"code":"(fn [coll]\n    (loop [[f & r] coll]\n      (if (empty? r)\n        f\n        (recur r))))","problem":19,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":19,"code":"(fn [list]\n  (nth list (dec (count list))))","user":"5d6932e6e4b0db5d338d1609"},{"problem":19,"code":"(fn [elems] (first (take-last 1 elems)))","user":"55ce8cfee4b0e31453f64a29"},{"problem":19,"code":"(fn [foo]\n  (let [[x & xs] foo]\n    (if (empty? xs)\n      x\n      (recur xs))))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn [x]\n  (first (reverse x))\n  )","problem":19,"user":"524ed632e4b0541d1855b7f2"},{"problem":19,"code":"(fn \n  [coll]\n  (first (reverse coll))\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":19,"code":"(fn my-last [l]\n         (if (= 1 (count l))\n           (first l)\n           (my-last (rest l))))","user":"55274467e4b0ffed3738f92b"},{"problem":19,"code":"(fn [[a & b]]\n  (if b\n    (recur b)\n    a))","user":"56eb5c76e4b04a395b9a0422"},{"problem":19,"code":"(fn [input] (loop [list input] (if (= (rest list) []) (first list) (recur (rest list) ))))","user":"56dd224be4b0ea9b8538f828"},{"problem":19,"code":"(fn [list]\n  (if (empty? (rest list))\n    (first list)\n    (recur (rest list))\n    ))","user":"583829c2e4b089d5ab817d22"},{"problem":19,"code":"(fn  [[n &  more]]  \n  (if more \n    (recur  more)\n    n))","user":"5403f305e4b0df28a13c62e3"},{"problem":19,"code":"(fn [coll]\n  (reduce (fn [value x] x) coll))","user":"5e76274ce4b085ba37836deb"},{"problem":19,"code":"(fn walk [x] (if (= 1 (.size x)) (first x) (walk (rest x))))","user":"59fa1b05e4b0ca45a743a356"},{"problem":19,"code":"(fn [x]\n  (nth x (- (count x) 1) ))","user":"558d23d4e4b027778923763d"},{"problem":19,"code":"(fn sandip [[x & more]]\n(if more (recur more) x))","user":"59ef50cce4b0966464fe6a2a"},{"code":"#(reduce 'rest %)","problem":19,"user":"4e55b3dc535d8a8b8723a27f"},{"code":"(fn [s] (if (next s)\n  (recur (rest s))\n  (first s)))","problem":19,"user":"4ed9354f535d10e5ff6f5301"},{"code":"(fn [x] (get (vec x) (- (count x) 1)))","problem":19,"user":"51002399e4b0ab35a0d409ff"},{"problem":19,"code":"(fn [[e & r]]\n  (if (nil? r)\n    e\n    (recur r)))","user":"54addba9e4b09f271ff37ce9"},{"problem":19,"code":"(fn get-last [coll]\n  (if (next coll)\n    (recur (next coll))\n    (first coll)))","user":"5ee6f9a3e4b029a2061bbe9e"},{"code":"#(nth %( dec (count %)))","problem":19,"user":"530c15f7e4b02e82168697d6"},{"code":"(fn [ls0]\n  (loop [ls ls0]\n  (if (= (rest ls) '())\n      (first ls)\n      (recur (rest ls)))))","problem":19,"user":"51d8b36ce4b02ceefd947745"},{"code":"(fn [[x & more]] (if more (recur more) x))","problem":19,"user":"4f246938e4b0d66497709fec"},{"code":"#(nth % \n      (- \n       (count %) \n       1))","problem":19,"user":"5196cf7ee4b04c0af7ff3c25"},{"problem":19,"code":"(fn [seq]\n  (if (empty? (rest seq)) (first seq) (recur (rest seq))))","user":"6023a3abe4b0d5df2af22212"},{"problem":19,"code":"(fn laster [x]\n  (if (empty? (rest x))\n    (first x)\n    (laster (rest x)\n            )\n    )\n  )","user":"5710b136e4b09c608db70437"},{"code":"( fn getLast [x] \n  ( first( reverse x  ) ) )","problem":19,"user":"537e8bc4e4b06839e8705ea8"},{"problem":19,"code":"(fn [coll] \n  (if (seq (rest coll))\n    (recur (rest coll))\n  \t(first coll)))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn lst [[x & xs]] (if (empty? xs) x (lst xs)))","problem":19,"user":"4ec60863535d6d7199dd36bf"},{"code":"(fn helper [xs]\n  (if (empty? (drop 1 xs))\n    (first xs)\n    (helper (drop 1 xs))\n  )\n)","problem":19,"user":"51e6c413e4b0730ab87cf33b"},{"problem":19,"code":"(fn [s]\n  (let [n (next s)]\n    (if n\n    \t(recur n)\n    \t(first s))))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":19,"code":"(fn tlast [x] (peek (vec x)))","user":"5641f0ede4b08d4f616f5f11"},{"problem":19,"code":"(fn rec [s] \n    (if (empty? (rest s))\n      (first s)\n      (rec (rest s))\n    )\n)","user":"567debb5e4b05957ce8c61ce"},{"problem":19,"code":"(fn [x] \n  (nth x (- (count x) 1)))","user":"53e4e21ce4b036ad0777e450"},{"problem":19,"code":"(fn [x]\n  (reduce (fn [x y] y) x))","user":"557beef1e4b05c286339e0bf"},{"problem":19,"code":"#(-> %1 (reverse) (first))","user":"54299d4be4b01498b1a71b3d"},{"problem":19,"code":"apply (fn [ & rest] (first (reverse rest)))","user":"5a44e514e4b0447ef91cc614"},{"problem":19,"code":"(fn lst [l] (if (= (rest l) ()) (first l) (lst (rest l))))","user":"53b0dae6e4b047364c044487"},{"code":"(fn [s] \n  (nth s (dec (count s)))\n)","problem":19,"user":"52d1a29fe4b0d9f9285948e0"},{"code":"(fn last-el [x] (nth x (dec (count x))))","problem":19,"user":"50fc3589e4b0d10d794c19f3"},{"problem":19,"code":"(fn [l]\n  (let [n (count l)]\n    (nth l (- n 1))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"#(if (= (rest %) '())\n    (first %)\n    (recur (rest %)))","problem":19,"user":"4ede88cb535d10e5ff6f5338"},{"problem":19,"code":"(fn get-last [s] (first (reverse s)))","user":"55380eeae4b09218d5f44fd9"},{"problem":19,"code":"(fn last-element [seq]\n    (if (= (count seq) 1)\n        (first seq)\n        (last-element (rest seq)))\n  )","user":"59ee5be5e4b0966464fe6a1d"},{"code":"(fn [l] (loop[x (first l) m l] (if (empty? m) x (recur (first m) (rest m)))))","problem":19,"user":"5384bbf8e4b06839e8705ef5"},{"problem":19,"code":"(fn [coll] \n  (if (next coll)\n    (recur (next coll))\n    (first coll)\n    ))","user":"57a8eba2e4b0a96607956225"},{"code":"#( first (reverse %) )","problem":19,"user":"4f92884de4b0dcca54ed6caf"},{"problem":19,"code":"(fn\n  [inp]\n  (let [seqinp (seq inp)]\n    (loop [newseq seqinp]\n      (if (< (count newseq) 2)\n        (first newseq)\n        (recur (rest newseq))))))","user":"5f10ab01e4b091ba50b4dba6"},{"problem":19,"code":"(fn [seq]\n  (loop [[first & rest] seq]\n    (if (empty? rest)\n      first\n      (recur rest))))","user":"56416212e4b08d4f616f5efa"},{"code":"(fn [x]\n  (first (reverse x) )\n)","problem":19,"user":"4ea3f035535d7eef308072ca"},{"problem":19,"code":"#(->> % (into ()) first)","user":"5501de12e4b07d26eda61d7b"},{"code":"(fn foo [x] \n  (let [[f & r] x]\n    (if (nil? (seq r)) f (recur r))))","problem":19,"user":"4f141dee535d64f603146434"},{"problem":19,"code":"(fn [l] (.get l (- (.size l) 1)))","user":"5674a100e4b05957ce8c6142"},{"problem":19,"code":"(fn [[first & more]] (if (nil? more) first (recur more)))","user":"599e3677e4b0871e7608b809"},{"code":"(fn [lst] (peek (vec lst)))","problem":19,"user":"4eb6f065535d7eef30807372"},{"code":"(fn getit [x] (if (= (count x) 1) (first x) (getit (rest x))))","problem":19,"user":"52cd882ee4b07d0d72b27378"},{"problem":19,"code":"(fn [seq]\n  (loop [seq seq]\n    (if (-> seq next empty?)\n      (first seq)\n      (recur (next seq)))))","user":"537cb3ade4b06839e8705e7d"},{"code":"(fn [lst] (let [cdr (rest lst)] (if (seq cdr) (recur cdr) (first lst))))","problem":19,"user":"50c57ee7e4b01e21d529c02b"},{"problem":19,"code":"(fn [[part & remaining]]\n  (if (empty? remaining)\n    part\n    (recur (rest remaining))))","user":"58fc52cee4b0438e51c2cf95"},{"problem":19,"code":"#(-> %\n    reverse\n    first)","user":"5d67d740e4b0db5d338d15f9"},{"problem":19,"code":"(fn [x]\n  ((vec x) (- (count x) 1))\n  )","user":"5cd17bf1e4b0ccb0619628eb"},{"problem":19,"code":"(fn a [x] \n(if (= (count x) 1)\n  (first x)\n  (a (rest x)) ))","user":"5c6f0755e4b0fca0c162275d"},{"problem":19,"code":"(fn lascht [l]\n  (cond\n   (= '() (rest l)) (first l)\n   :else (lascht (rest l))))","user":"58138439e4b0f478707a0611"},{"code":"#(nth % (dec (count % )))","problem":19,"user":"5047af90e4b0ec70b3ef8d8e"},{"code":"#(first ((fn [x] (reverse x)) %))","problem":19,"user":"51493fd0e4b05514c84b7cce"},{"problem":19,"code":"(fn ls [se]\n  (if (= 1 (count se))\n    (first se)\n    (ls (rest se))\n  )\n)","user":"545944a2e4b01be26fd74627"},{"problem":19,"code":"(fn myr [x] (first (reverse x)))","user":"57da7593e4b0bd073c202410"},{"code":"(fn [s] (if (empty? (next s)) (first s) (recur (next s))))","problem":19,"user":"4e39fb68535deb9a81d77f47"},{"problem":19,"code":"(fn [items]\n  (if (= 1 (count items))              \n    (first items)\n    (recur (rest items))))","user":"5bcf0b1be4b0e9689409ee24"},{"code":"(fn get-last [ls]\n  (cond\n   (= (next ls) nil) (first ls)\n   :else (get-last (next ls))))","problem":19,"user":"516fc530e4b0b86e66597f00"},{"problem":19,"code":"#(loop [in %]\n    (if (= (count in) 1)\n      (first in)\n      (recur (rest in))))","user":"56785234e4b05957ce8c6177"},{"problem":19,"code":"(fn [xs] (loop [arr xs] (if (empty? (rest arr)) (first arr) (recur (rest arr)))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":19,"code":"(fn [coll]\n (loop [[init  & rem] coll]\n    (if (seq rem)\n      (recur rem)\n      init)))","user":"549f7b51e4b0f3d1d8e70fb1"},{"code":"(fn las [x] (if (= 1 (count x)) (first x) (las (rest x))))","problem":19,"user":"5375b852e4b06839e8705e17"},{"code":"(fn l [x]\n   (if (empty? x)\n      nil\n      (if (empty? (rest x))\n        (first x)\n        (l (rest x)))))","problem":19,"user":"4f8320e9e4b033992c121c18"},{"problem":19,"code":"#(reduce (fn [_, x] x) nil %)","user":"561d6777e4b064ca9f4b16af"},{"problem":19,"code":"(fn [stufflist]\n  (loop [stuff stufflist]\n    (if (= (rest stuff) ())\n      (first stuff)\n      (recur (rest stuff)))))","user":"5b2a559be4b063e2438bcc74"},{"problem":19,"code":";;#(nth % (dec (count %)))\n\n(fn my-last [s]\n  (let [r (rest s)]\n    (if (empty? r)\n      (first s)\n      (recur r))))\n\n;; (time ((fn my-last [s] (let [r (rest s)] (if (empty? r) (first s) (recur r)))) (range 1e6)))\n;;=> \"Elapsed time: 320.814 msecs\"\n;;=> 999999\n\n;; (time (last (range 1e6)))\n;;=> \"Elapsed time: 346.018 msecs\"\n;;=> 999999\n\n;; (time (#(nth % (dec (count %))) (range 1e6)))\n;;=> \"Elapsed time: 572.602 msecs\"\n;;=> 999999\n\n;; HOWEVER, if s is already a vector, the \"last\" and \"nth\" solutions take under a millisecond.","user":"540e0637e4b0addc1aec6717"},{"code":"(fn my-last [x]\n         (if (empty? (rest x))\n           (first x)\n           (my-last (rest x))))","problem":19,"user":"5369d072e4b0243289761ea1"},{"problem":19,"code":"(fn [[f & rst]]\n  (if rst\n    (recur rst)\n    f))","user":"5f28c964e4b033932238a64c"},{"code":"(fn [a-list] (first (reverse a-list)))","problem":19,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [seq]\n  (nth seq (- (count seq) 1)))","problem":19,"user":"4ec5a5f9535d6d7199dd36ad"},{"problem":19,"code":"#(loop [remaining %]\n   (if (= 1 (count remaining))\n     (first remaining)\n     (recur (rest remaining))))","user":"5c62f1cde4b0fca0c1622655"},{"code":"(fn [l]\n  (reduce (fn [a b] b) l))","problem":19,"user":"4f066c90535dcb61093f6c11"},{"problem":19,"code":"(fn laatste [a-seq] \n  (first (reverse a-seq)))","user":"54527df5e4b0e397800069c2"},{"problem":19,"code":"; for each element, conj it to a list \n(fn [coll]\n  (first(reverse coll))\n  )","user":"60be944ce4b0e0fa5f1b428c"},{"problem":19,"code":"(fn [s] (if (= 0 (count s)) nil (nth s (max 0 (- (count s) 1)))))","user":"55664950e4b0c656e3ff1832"},{"code":"#(if (next %1) (recur (next %1)) (first %1))","problem":19,"user":"4efd0d2d535de96065cf5083"},{"problem":19,"code":"(fn get-last\n  [[first & rest]]\n  (if (empty? rest)\n    first\n    (get-last rest)))","user":"56af99dfe4b061e3ca319ad5"},{"code":"(fn [x]\n  (nth x (- (count x) 1)))","problem":19,"user":"4f380596e4b0e243712b1ed6"},{"problem":19,"code":"(fn my-last\n  [list]\n  (let [[first & rest] list]\n    (if (empty? rest)\n      first\n      (my-last rest))))","user":"54513516e4b0e397800069af"},{"problem":19,"code":"(fn [x](peek (vec x)))","user":"59d1e9cfe4b0ef0a1e9b5b95"},{"code":"#(let [n (count %)] (nth % (- n 1)))","problem":19,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn last-elem [s]\n  (if (= (count s) 1)\n    (first s)\n    (last-elem (rest s))))","problem":19,"user":"4ff89ae0e4b0678c553fc39a"},{"problem":19,"code":"(fn getLast [sq] (if (= 1 (count sq)) (first sq) (getLast (rest sq))))","user":"5a856f1ae4b00b71e582a0a3"},{"problem":19,"code":"(fn[col](first (reverse col)))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn lst [x] (nth x (- (count x) 1)))","problem":19,"user":"4e8b73ab535d65386fec211f"},{"problem":19,"code":"(fn t [list]\n  (if (= (count list) 1)\n    \t(first list)\n    \t(t (rest list))))","user":"51a0370ae4b0b292b01ee3ef"},{"code":"(fn [col] \n(loop [col col]  \n(if (empty? (rest col)) (first col) (recur (rest col)))))","problem":19,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":19,"code":"(fn [array] (loop [iarray array]\n    (if (= 1 (count iarray))\n      (first iarray)\n      (recur (rest iarray)))))","user":"570d8418e4b0b0fb43fd06de"},{"problem":19,"code":"(fn [[h & tail]] (if (nil? tail) h (recur tail)))","user":"5eee7311e4b07c55ae4a0510"},{"code":"#(nth % (dec (count %1)))","problem":19,"user":"52668231e4b03e8d9a4a713f"},{"code":"#(->> % count dec (nth %))","problem":19,"user":"4e4be570535dc968683fc4d8"},{"code":"(fn lst [c] (if (= (count c) 1) (nth c 0) (lst (rest c))))","problem":19,"user":"50c7ae57e4b00bb60fe0c536"},{"problem":19,"code":"(fn [my-seq]\n    (nth my-seq (- (count my-seq) 1) ))","user":"56478a82e4b0284900eef61e"},{"problem":19,"code":"(fn [xs]\n  (if (nil? (first (rest xs)))\n    (first xs)\n    (recur (rest xs))))","user":"5d2b62efe4b01671435dbc80"},{"problem":19,"code":"(fn [x ] (nth x (- (count x) 1) ))","user":"554b2151e4b0a04f79299580"},{"code":"(fn f [l] (if (empty? (rest l)) (first l) (f (rest l))))","problem":19,"user":"53136c60e4b08068f379ed08"},{"problem":19,"code":"(fn [xs] \n  (loop [[x & xs] xs]\n  \t(if (empty? xs) \n    \tx\n    \t(recur xs)\n   \t)\n  )\n)","user":"5cb0f70ce4b026601754b8c1"},{"code":"(fn get-last [sq] (first (reverse sq)))","problem":19,"user":"4f2942ace4b0d6649770a01e"},{"problem":19,"code":"#(loop [remaining %]\n   (if (nil? (next remaining))\n     (first remaining)\n     (recur (next remaining))))","user":"5f0e32a1e4b0f30dddfb5d59"},{"code":"(fn [coll] (if (not (empty? (rest coll))) (recur (rest coll)) (first coll)))","problem":19,"user":"4f985527e4b0dcca54ed6cf1"},{"problem":19,"code":"(fn [x] (let [length (count x)]\n          (nth x (dec length))))","user":"552c1a0fe4b076ab5578f7d7"},{"code":"#(if (> 2 (count %)) (first %) (recur (rest %)))","problem":19,"user":"4e6a47b2535d8ccf87e9febb"},{"problem":19,"code":"(fn appa [x] (if (next x) (appa (rest x)) (first x)))","user":"5c298c79e4b07e362c2305de"},{"problem":19,"code":"(fn\n   [coll]\n   (if (= (count coll) 1)\n     (first coll)\n     (recur (rest coll))))","user":"56cd110ee4b0ea9b8538f747"},{"problem":19,"code":"(fn lastOne\n  [list]\n  (if (= (count list) 1)\n    (first list)\n    (lastOne (rest list)))\n)","user":"556be3dce4b09a3098a524f7"},{"code":"(fn [coll] (reduce #(if true %2) coll))","problem":19,"user":"53a1b5c8e4b0ca733b9744c1"},{"problem":19,"code":"(fn [seq] (loop [ [part & remain] seq] (if (empty? remain) part (recur remain))))","user":"56483f45e4b0284900eef62b"},{"problem":19,"code":"(fn [x]\n  (first (reverse (seq x))))","user":"56ae749fe4b03c432f18735f"},{"code":"#(reduce (fn [a b] (if b b a)) %)","problem":19,"user":"539ac065e4b0b51d73faaf16"},{"problem":19,"code":";#(nth % (dec (count %)))\n\n;#((comp first reverse) %)\n\n(comp first reverse)","user":"59e8efe7e4b0249b72820740"},{"code":"reduce (fn [n m] m) 0","problem":19,"user":"4ee82223535d93acb0a66877"},{"problem":19,"code":"(\n fn [list] (\n            reduce \n            (fn [a b] b) \n            0 \n            list\n            )\n )","user":"57762befe4b0979f8965162f"},{"code":"(fn [x]\n  ((fn internal-repeat [cur, prev]\n    (cond (empty? cur) prev\n          :else (internal-repeat (rest cur) (first cur)))) x nil))","problem":19,"user":"53407963e4b085b17e897dad"},{"code":"(fn lst [list] \n  (if (empty? (rest list)) (first list) \n  (lst (rest list))))","problem":19,"user":"4f036384535dcb61093f6a9a"},{"code":"(fn f [coll]\r\n  (nth coll (- (count coll) 1)))","problem":19,"user":"4e1e1576535d04ed9115e806"},{"code":"(fn [[h & t]] (if t (recur t) h))","problem":19,"user":"52b453b0e4b0c58976d9ad21"},{"code":"(fn [s]\n  (loop [l s]\n  \t(if (empty? (rest l))\n    \t(first l)\n    \t(recur (rest l)))))","problem":19,"user":"52fae26ee4b047fd55837003"},{"problem":19,"code":"(fn [x] (loop [s x]\n           (let [f (first s)\n                 r (rest s)]\n             (if (seq r)\n               (recur r)\n               f)\n              )))","user":"5705f569e4b0b0fb43fd0677"},{"problem":19,"code":"(fn m [data] (let [length (count data)\n                   last-index (- length 1)] \n               \t\t(nth data last-index)))","user":"5c68f931e4b0fca0c16226ea"},{"code":"(fn [l]\n  (if (= (count l) 1)\n    (first l)\n    (recur (rest l))))","problem":19,"user":"52ccc231e4b07d0d72b27370"},{"problem":19,"code":"(fn verylast [s] \n  (if (= 1 (count s)) \n    (first s) \n    (verylast (rest s))))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn get-last[s] \n   (if (= 0 (count (rest s)))\n       (first s) (get-last (rest s)))\n)","problem":19,"user":"4e6ac49d535d8ccf87e9ff01"},{"problem":19,"code":"(fn [x]\n  (let [[a & r] x]\n  (if (nil? (seq r))\n    a\n    (recur r))))","user":"58b36131e4b0ebc645576d21"},{"problem":19,"code":"(fn [x]\n  (if (> (count x) 1)\n    (recur (rest x))\n    (nth x 0)))","user":"56de78fde4b0ea9b8538f83c"},{"problem":19,"code":"(fn [[f & r]]\n  (if r\n  \t(recur r)\n    f))","user":"53b39d82e4b047364c0444a6"},{"problem":19,"code":"(fn loops [x] \n  (let [restos (rest x)]\n    (if (empty? restos)\n      (first x)\n      (loops restos))))","user":"58472aade4b089d5ab817ea0"},{"code":"(fn [l] (first (drop (- (count l) 1) l )))","problem":19,"user":"4f03f044535dcb61093f6b83"},{"code":"(fn [s]    \r\n   (if (seq (rest s)) \r\n    (recur(rest s))  \r\n     (first s)))","problem":19,"user":"4ff5a42ae4b0678c553fc36c"},{"code":"(fn [xs]\n  (loop [[h & t] xs]\n    (if (empty? t)\n      h\n      (recur t))))","problem":19,"user":"4fea3164e4b0140c20fb9bff"},{"code":"(fn [c]\n  (loop [col c]\n    (if (= (rest col) ())\n      (first col)\n      (do\n        (println col)\n        (recur (rest col))\n        )\n     )))","problem":19,"user":"514b83b4e4b0bd81940b86ce"},{"problem":19,"code":"(fn my-last [coll]\n  (if (<= (count coll) 1)\n    (first coll)\n    (my-last (rest coll))))","user":"50ec409ce4b04edc33777045"},{"code":"(fn [s] \n  (loop [s s]\n    (if (nil? (next s))\n      (first s)\n      (recur (rest s)))))","problem":19,"user":"4eb1dd39535d7eef30807345"},{"problem":19,"code":"(fn dd [[fir & rests]] \n      (if (empty? rests)\n             fir\n             (dd rests)))","user":"5485d169e4b0e286459a11b2"},{"code":"#(first (nthrest % (- (count %) 1)))","problem":19,"user":"51316a63e4b0431ba07e7feb"},{"code":"; (comp first reverse)\n#(-> % reverse first)","problem":19,"user":"51830c7ae4b0353c468deb78"},{"problem":19,"code":"(fn [coll] \n  (loop [[x & xs] coll] \n    (if xs\n      (recur xs)\n      x\n    )))","user":"54d0c32de4b0e8a36923e5cf"},{"problem":19,"code":"(fn j [x] (first (reverse x)))","user":"5b8d73b3e4b0c0b3ffbd49d6"},{"problem":19,"code":"(fn last-element [sequence-of-elements] (nth sequence-of-elements (- (count sequence-of-elements) 1)))","user":"5c7d6cb6e4b0d597f478caae"},{"code":"(fn last_ [seq] (let [[first_ & succ] seq] (if (empty? succ) first_ (recur succ))))","problem":19,"user":"5061fc2de4b0341461c88950"},{"problem":19,"code":"reduce (fn [sequence num] num)","user":"5f3b54c0e4b004f08c61c53b"},{"code":"(fn [x]\n  (nth x (- (.size x) 1) x))","problem":19,"user":"50da34e4e4b0f31830755b3c"},{"code":"(fn f\n  [l]\n  (cond\n   (empty? (rest l)) (first l)\n   :else (f (rest l))))","problem":19,"user":"518c0f4ee4b0f028e99addf7"},{"code":"(fn foo [l]\n  (if (<= (count l) 1)\n  \t(first l)\n    (foo (rest l))))","problem":19,"user":"525cb4c4e4b0cb4875a45d44"},{"code":"(fn find-last [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4f57a153e4b0a7574ea7183a"},{"problem":19,"code":"(fn [x]\n  (let [f (first x) r (rest x)]\n\t  (cond\n\t   (not (< 0 (count r))) f\n\t   :else (recur r))))","user":"54288375e4b01498b1a71b32"},{"problem":19,"code":"#(->> (reverse %) (first))","user":"56e9555fe4b04a395b9a03f7"},{"problem":19,"code":"(fn [[x & more]] (if (nil? more) x (recur more)))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":19,"code":"(fn last-element [ls]\n  (cond\n    (empty? ls) nil\n    (= (count ls) 1) (nth ls 0)\n    :else (last-element (drop 1 ls))))","user":"5a786f6be4b013a48d39976e"},{"code":"(fn [c] \r\n  (let [r (rest c)]\r\n    (if (empty? r) (first c) (recur r))))","problem":19,"user":"4e111538535d04ed9115e7c3"},{"code":"#(get (into [] %) (- (count %) 1))","problem":19,"user":"53347274e4b0656e627bfd6b"},{"problem":19,"code":"(fn [x] (loop [s x] (if (empty? (rest s)) (first s) (recur (rest s)))))","user":"4f577f25e4b0a7574ea71839"},{"problem":19,"code":"(fn [x] (let [z (vec x)] (z (- (count z) 1))))","user":"55b2088ae4b0da326a65cf75"},{"problem":19,"code":"(fn get-last [x] (\n\tif (= (count x) 1)\n         (first x)\n         (get-last (rest x))\n         \n))","user":"5eb356d4e4b00a66d4a95212"},{"code":"(fn [itms]\n  (first\n    (reverse itms)))","problem":19,"user":"50c7b929e4b00bb60fe0c537"},{"problem":19,"code":"(fn lst [s]\n  (if (= '() (rest s))\n    (first s)\n    (lst (rest s))))","user":"54e6762be4b024c67c0cf809"},{"code":"(comp peek reverse)","problem":19,"user":"53597288e4b04ce2eb3ed29c"},{"code":"(fn a [l] (nth l (- (count l) 1)))","problem":19,"user":"4ee26f01535d10e5ff6f5368"},{"problem":19,"code":"(fn[x]( first (reverse x)))","user":"5762b38ce4b0994c1922fbad"},{"code":"(fn last_elem [x] (first(reverse x)))","problem":19,"user":"52b7a904e4b0c58976d9ad51"},{"problem":19,"code":";;#(.get % (- (count %) 1))\n#(nth % (dec (count %)))","user":"554efd47e4b00713264bd99b"},{"code":"(fn lastElement[[x & y]]\n  (if y  (lastElement y) x))","problem":19,"user":"4fb23582e4b081705acca28a"},{"problem":19,"code":"(fn [coll] (loop [c coll]\n             (if (= (rest c) '())\n               (first c)\n               (recur (rest c)))))","user":"6056f58fe4b069ae89ce6adf"},{"problem":19,"code":"(fn [l](.get l (- (count l) 1)))","user":"54835065e4b0e286459a118c"},{"code":"(fn [sequence] (first (reverse sequence)))","problem":19,"user":"4eac5bc1535d7eef3080731b"},{"code":"(fn last-elem [x]\n  (loop [z (first x)\n         work x\n         ]\n        \n        (if (not= work [])\n          (recur (first work)\n                 (drop 1 work) \n                 )\n          ;else\n          z\n          )\n        )\n  )","problem":19,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn last-element [x]\r\n  (first (reverse x)))","problem":19,"user":"4f4feb95e4b03ad3f0c10cf0"},{"problem":19,"code":"#(-> % count dec (drop %) first)","user":"555e7210e4b0a2eb076a39b9"},{"problem":19,"code":"(fn [x] (reduce #(identity %2) (first x) x))","user":"54d70f40e4b0a52adc2e2027"},{"problem":19,"code":"(fn [x] \n  (first(reverse x)))","user":"546ff701e4b00cfc9eacc1b3"},{"code":"(fn myfunc [x]\r\n  (if (= 1 (count x)) \r\n      (first x)\r\n      (myfunc (rest x))))","problem":19,"user":"506b437de4b0eda3100c0906"},{"code":"(fn f [[head & tail]]\n  (if (empty? tail)\n    head\n    (f tail)))","problem":19,"user":"516abecae4b081287f204e9f"},{"problem":19,"code":"#(nth %1 (dec (count (seq %1))))","user":"55592deae4b0deb715856e32"},{"problem":19,"code":"(fn my-last [col] (reduce (fn [x y] y) col))","user":"5c222b7de4b07e362c230588"},{"code":"(fn lst [l] (if (next l) (lst (next l)) (first l)))","problem":19,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn lst [[a & more]]\n  (if (empty? more)\n    a\n    (lst more)))","problem":19,"user":"50d2add9e4b06ad58337ed11"},{"code":"(fn aa [lat]\n  (if (empty? (rest lat))\n    (first lat)\n    (aa (rest lat))))","problem":19,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn last_ [[x & xs]]\n  (if xs (last_ xs) x))","problem":19,"user":"5342f075e4b084c2834f4a14"},{"code":"(fn my_last [x] (nth x ( - (count x) 1) ))","problem":19,"user":"50970e0ae4b00ad8bab4e94f"},{"code":"(fn last-ston [l]\n  (nth l (dec (count l))))","problem":19,"user":"4fc8ce6ce4b0ee37620e183c"},{"problem":19,"code":"(fn getLast \n  [sequence]\n  (nth sequence (dec (count sequence))))","user":"54e009dce4b024c67c0cf7b2"},{"problem":19,"code":"(fn rec4 [x]\n   (if (empty? (rest x))\n     (first x)\n     (rec4 (rest x))))","user":"56bfb0ace4b060a8e693e39f"},{"problem":19,"code":"reduce\n   (fn getLast [& collection]\n     (if (next collection)\n         (getLast (rest collection))\n         (ffirst collection)\n      ))","user":"55264584e4b0ffed3738f918"},{"code":"(fn return-last [all-list]\n  (if (= '() (rest all-list))\n         (first all-list)\n         (return-last (rest all-list))\n                      ))","problem":19,"user":"513486bde4b0230e9f713b41"},{"problem":19,"code":"(fn [a]\n    (first (reverse a)))","user":"5b585d56e4b02d533a91bd66"},{"code":"(fn [x] \n  (if-not (first (rest x))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"530bae80e4b02e82168697d0"},{"problem":19,"code":"(fn [s] (loop [f (first s)\n               r (rest s)]\n          (if (= r [])\n            f\n          \t(recur (first r) (rest r)))))","user":"560ac5cae4b05f002753df09"},{"problem":19,"code":"(fn [coll]\n  (cond (vector? coll) (peek coll)\n        :else (first (reverse coll))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":19,"code":"(fn get-last\n  ([[first-elem & other-elems]] \n     (get-last other-elems first-elem))\n  ([[first-elem & other-elems] latest] \n     (if (= nil other-elems)\n     \tfirst-elem\n     \t(get-last other-elems first-elem))))","user":"55d8bdcae4b0e31453f64abe"},{"problem":19,"code":"(fn [l] (cond (= '() (rest l)) (first l)\n              :else (recur (rest l))))","user":"5a2b7f4ee4b09cafd31c7f4a"},{"problem":19,"code":"(fn [s]\n  (if-let [rst (next s)]\n    (recur rst)\n    (first s)))","user":"56ee0691e4b04a395b9a044c"},{"problem":19,"code":"(fn [z] \n  (reduce \n   (fn [x y] y) \n   z\n  )\n)","user":"55a4b9a2e4b0acc240e31548"},{"code":"(fn my-last [x] \n  (if (next x)\n   (recur (next x))\n   (first x)))","problem":19,"user":"5240cfd9e4b0ad64fa010346"},{"problem":19,"code":"(fn [l]\n  (if (empty? (rest l)) (first l) (recur (rest l))))","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn [list]\n  (loop [l list]\n    (if (empty? (rest l))\n      (first l)\n      (recur (rest l)))))","problem":19,"user":"4e6f2a1e535d5021c1a89619"},{"problem":19,"code":"(fn [coll]\n  (loop [remaining (rest coll)\n         best (first coll)]\n    (if (empty? remaining)\n      best\n      (recur (rest remaining) (first remaining)))))","user":"5db35c6ee4b010eb3c36cd20"},{"code":"(fn f [x] \n    (let [r (rest x)] \n      (if (empty? r) (first x)  (f r))))","problem":19,"user":"503917a0e4b088a6a14ca763"},{"problem":19,"code":"#(loop [n 0\n          l %]\n     (if (empty? l)\n       n\n       (recur (first l)\n              (rest l))))","user":"50a122a1e4b08df8156e9e54"},{"problem":19,"code":"(fn [collection] (-> collection (reverse)(first)))","user":"5df79c31e4b0a607a9a45c9b"},{"code":"(fn [x] (nth x (- (count x) 1 ) ) )","problem":19,"user":"50e49d03e4b0cb9ec68fbca1"},{"code":"(fn [xs] (let [xs' (next xs)] (if-not xs' (first xs) (recur xs'))))","problem":19,"user":"5393a2e1e4b0b51d73faaebf"},{"problem":19,"code":"(fn get-last [items] (peek (vec items)))","user":"53f8dd1fe4b0de5c41848570"},{"problem":19,"code":"(fn [c] (reduce (fn [a i] i) c))","user":"4f1ef6a0535d64f60314649b"},{"problem":19,"code":"(fn [arr] (nth arr (- (count arr) 1) ))","user":"595d0897e4b066ee0a44b00f"},{"code":"(fn last-one [lst] (first (reverse lst)))","problem":19,"user":"4ec6cfda535d6d7199dd36d8"},{"problem":19,"code":"(fn posledni [v] (nth v (dec (count v))))","user":"549eeda9e4b0f3d1d8e70faa"},{"problem":19,"code":"(fn my-last [li]\n  (loop [ fi (first li)\n          ri (rest li)]\n    (if (empty? ri) \n      fi\n      (recur (first ri) (rest ri)))))","user":"5b33050ee4b025bcb146f32d"},{"problem":19,"code":"(fn get-last [xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (get-last (rest xs))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn [x]\n  (loop [s x]\n    (let [[head & tail] s]\n      (if (empty? tail)\n        head\n        (recur tail)))))","problem":19,"user":"52fdb82ae4b047fd55837031"},{"problem":19,"code":"(fn f\n  [x]\n  (if (empty? (rest x))\n    (first x)\n    (f (rest x))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn le [seqs] (first (reverse  seqs)))","problem":19,"user":"4ef2eb4d535dced4c769f226"},{"problem":19,"code":"(fn [x] (loop [v x] (if (= (count v) 1) (first v) (recur (rest v)))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"problem":19,"code":"(fn last_element [collection]\n  (if (next collection)\n    (last_element (next collection))\n    (first collection)))","user":"57d0cd58e4b0bd073c20235e"},{"problem":19,"code":"(fn [v] (cond (> (count v) 1) (recur (rest v)) (= (count v) 1) (first v) ))","user":"5756efc3e4b02ea1147992e6"},{"problem":19,"code":"(fn[z] (first (reverse z)))","user":"56a28664e4b0542e1f8d14c1"},{"problem":19,"code":"(fn [[x & rst]] (if (nil? rst) x (recur rst)))","user":"5e384ee8e4b01d43a70e8db9"},{"code":"(fn [x] ( nth x (- (count x) 1) ))","problem":19,"user":"4f0c4185535d0136e6c2230a"},{"problem":19,"code":"(fn get-last \n  [[head & tail]]\n  (if (empty? tail) \n    head \n    (get-last tail)))","user":"5462ce20e4b01be26fd746b8"},{"problem":19,"code":"(fn [s](first (reverse s)))","user":"5dc9b2c7e4b02f9375f4e1eb"},{"problem":19,"code":"(fn mylast [lst] (nth lst (- (count lst) 1)))","user":"53c58d31e4b00fb29b22128f"},{"code":"(fn find-last [x] (if (= 1 (count x)) (first x) (find-last (next x))))","problem":19,"user":"4eb47bb1535d7eef30807362"},{"problem":19,"code":"(fn getLast [x]\n  (first (reverse x))\n)","user":"57758671e4b0979f8965161f"},{"code":"(fn l [a] (apply (fn ll ([] '()) ([a] a) ([a & more] (apply ll more)) ) a) )","problem":19,"user":"4f15b309535d64f603146446"},{"code":"(fn[a](first(reverse a)))","problem":19,"user":"524af042e4b09eba1c0223ba"},{"problem":19,"code":"(fn [x] (let [c (count x)] (first (drop (- c 1) x))))","user":"55ed9108e4b0121d4835fddc"},{"problem":19,"code":"(fn [xs] (reduce (fn [a x] x) xs))","user":"5589ea54e4b0277789237611"},{"problem":19,"code":"(fn final [l] (if (= (next l) nil)\n                  (first l)\n                  (final (next l))))","user":"55987606e4b031d6649c9b99"},{"problem":19,"code":"(fn [[head & tail]] (if (nil? tail) head (recur tail)))","user":"54149f2fe4b01498b1a719ec"},{"code":"(fn ! [x] (let [y (rest x)] (if (empty? y) (first x) (! y))))","problem":19,"user":"51efa6a6e4b0249c592fbde8"},{"problem":19,"code":"(fn [s]\n  (loop [[head & remaining] s]\n    (if (empty? remaining)\n      head\n      (recur remaining))))","user":"5922a36ce4b026ae38521285"},{"code":"(fn newlast\n  [seq]\n    (if (next seq)\n      (newlast (next seq))\n      (first seq)))","problem":19,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(fn get-last [[x & xs]]\n  (if (nil? xs)\n    x\n    (recur xs)))","problem":19,"user":"4f844835e4b033992c121c30"},{"problem":19,"code":"(fn mylast [s] (if (empty? (rest s)) (first s) (mylast (rest s))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"problem":19,"code":"(fn [arr] (let [li (- (count arr) 1)]\n            (nth arr li)))","user":"55c06feee4b01b9910ae2a23"},{"code":"(fn [x]\n  (first (reverse x)))","problem":19,"user":"4e5af45e535d8a8b8723a2b1"},{"problem":19,"code":"(fn [lon]\n  (if (empty? (rest lon))\n    (first lon)\n\t(recur (rest lon))))","user":"57c47e21e4b05aa3c4741cd2"},{"code":"(fn last-element-seq [seq]\n  (if (= (rest seq) '())\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"4e75edfe535d7a570dd295c7"},{"problem":19,"code":"(fn [x] (nth(reverse x)0))","user":"542baf7ce4b0dad94371f291"},{"code":"(fn [l] \n  (let [r (rest l)]\n    (if (= r ())\n      (first l)\n      (recur r))))","problem":19,"user":"4e7d52ad535db169f9c796d3"},{"problem":19,"code":"(fn [lst] \n  (first (reverse lst)))","user":"59e55cc8e4b08badc2a0c555"},{"problem":19,"code":"(fn [args]\n  (let [[x & more] args]\n    (if more (recur more) x)))","user":"5869ac44e4b0f14aab7c88ab"},{"code":"(fn [l]\n  (first (reverse l)))","problem":19,"user":"4e6b998a535d8ccf87e9ff1c"},{"code":"(fn [r] (nth r (- (count r) 1)))","problem":19,"user":"51a132cee4b0b292b01ee3ff"},{"code":"#(if (= '() (rest %))\n   (first %)\n   (recur (rest %)))","problem":19,"user":"504ec2a1e4b069badc5a33c7"},{"problem":19,"code":"#(loop [sequen %] (if (= [] (rest sequen))\n                    (first sequen)\n                    (recur (rest sequen))))","user":"5a64ce4ee4b0512ff01cd9a6"},{"code":"(fn [seq] \n  (if (empty? seq)\n      nil\n      (let [f (first seq)\n            r (rest seq)]\n           (if (empty? r)\n               f\n               (recur r)))))","problem":19,"user":"5052f384e4b0a561d07d8f25"},{"problem":19,"code":"(fn get-last [param] (let [coll (seq param)] (nth coll (dec (count coll)))))","user":"566e5e8de4b0a866af6896d9"},{"problem":19,"code":"(fn last1 [x]\n  (if (empty? (rest x)) (first x) (last1 (rest x))))","user":"53d6bc2fe4b0e771c302545a"},{"problem":19,"code":"(fn [the-seq] (first(reverse the-seq)))","user":"57024aefe4b08d47c97781df"},{"problem":19,"code":"(fn [[x & xs]]\n    (if (seq xs)\n      (recur xs)\n      x))","user":"53c3397be4b00fb29b221279"},{"problem":19,"code":"(fn [sequ]\n  (let [elem (first sequ)\n        next (rest sequ)]\n    (if-not (seq next)\n      elem\n      (recur (rest next)))))","user":"54d11e3be4b0e8a36923e5db"},{"problem":19,"code":"(fn [x] ( first ( drop (- (count x) 1) x )))","user":"54c7b7c5e4b045293a27f63f"},{"problem":19,"code":"(fn [ lst ]\n  (first (reverse lst)))","user":"57bbdf98e4b05aa3c4741c33"},{"code":"(fn [seq] (nth seq (- (.size seq) 1)))","problem":19,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":19,"code":"(fn my-last [s] \n  (first (reverse s)))","user":"5ed2c4c7e4b016b56eae05c0"},{"code":"#(if (next %)(recur (next %))(first %))","problem":19,"user":"4ec16c21535dfed6da9c6dac"},{"problem":19,"code":"(fn myLast [[h & t]] (if (empty? t) h (myLast t)))","user":"541619e8e4b01498b1a719f9"},{"problem":19,"code":"(fn lst [s] (if (next s) (recur (next s)) (first s)))","user":"5649b1b0e4b0284900eef646"},{"problem":19,"code":"#(loop [seq %]\n   (if (empty? (rest seq))\n     (first seq)\n     (recur (rest seq))\n\t))","user":"5a80b934e4b00b71e582a05b"},{"problem":19,"code":"(fn [arr] (-> arr reverse first))","user":"5540fe42e4b0a04f7929950a"},{"problem":19,"code":"(fn [[x & lst]]\n  (if lst (recur lst) x)\n  )","user":"5883a9bae4b0f1effa3b7681"},{"problem":19,"code":"(comp (fn tt [x] \n  (if (empty? (rest x))\n    (first x)\n    (tt (rest x)))))","user":"50475504e4b0371827a27bc0"},{"problem":19,"code":"(fn [arg]\n  (let [x arg]\n    (first (drop (- (count x) 1) x))))","user":"59061cc8e4b047aa04b1992b"},{"problem":19,"code":"(fn lastElem [[first & rest]]\n  (if (empty? rest)\n    first\n    (recur rest)))","user":"591208ede4b0163c97b36ee5"},{"code":"(fn mylast [coll]\r\n  (if (= (rest coll) '())\r\n    (first coll)\r\n    (recur (rest coll))))","problem":19,"user":"4f3a8939e4b0e243712b1f0f"},{"problem":19,"code":"(fn [[x & r]]\n  (if (empty? r)\n    x\n    (recur r)))","user":"544b699ce4b0e39780006964"},{"problem":19,"code":"(fn end [l] (if (= (rest l) []) (first l) (end (rest l))))","user":"5c34be9fe4b0d62ef62d9f58"},{"code":"(fn foo [n] (first (reverse n) ))","problem":19,"user":"50be6de4e4b00fb48fed2ef5"},{"problem":19,"code":"#(\n  nth % (dec (count %))            \n)","user":"580d62b0e4b0849f6811b739"},{"code":"(fn [x]\n  (.get x\n        (-\n         (.count x)\n         1)))","problem":19,"user":"5171069be4b0d70c8bbbf238"},{"code":"(fn my-last [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (my-last (rest lst))\n  ))","problem":19,"user":"5347870be4b084c2834f4a4b"},{"problem":19,"code":"(fn n-last [seqe] (if (= (count seqe) 1) (first seqe) (n-last (rest seqe))))","user":"5beeb182e4b0a6d31fed212f"},{"code":"(fn [lis] (nth lis (- (count lis) 1)))","problem":19,"user":"4f2004a1535d64f6031464a7"},{"code":"(partial reduce (fn [a b] b))","problem":19,"user":"4e342671535deb9a81d77f29"},{"code":"(fn [x] (.get x (dec (count x))))","problem":19,"user":"526e4cb6e4b03e8d9a4a7314"},{"code":"(fn [x] ((comp first reverse)\n         x))","problem":19,"user":"52cc7c40e4b07d0d72b27364"},{"problem":19,"code":"(fn my-last [x]\n   (if (= (rest x) '()) (first x) (my-last (rest x))))","user":"5537f30fe4b09218d5f44fd8"},{"problem":19,"code":"(fn [stuff] (nth stuff (- (count stuff) 1)))","user":"53fcaeace4b0de5c418485d3"},{"code":"(fn [s] \n  (if (nil? (seq (rest s))) (first s) \n                      (recur (rest s))))","problem":19,"user":"4fb01e53e4b081705acca260"},{"problem":19,"code":"(fn [a-seq] (if (empty? (rest a-seq)) (first a-seq) (recur (rest a-seq))))","user":"595fd77ce4b066ee0a44b06f"},{"problem":19,"code":"#(loop [s %]\n    (if (empty? (rest s))\n      (first s)\n      (recur (rest s))))","user":"579aff09e4b05b1deef9ade7"},{"problem":19,"code":"(fn get_last [x] \n\t(if (or (= x nil) (= (count x) 0)) nil \n      (if (= (count x) 1) (first x) (get_last (rest x)))\n    )  \n)","user":"5e69589de4b04a83ad7cd26d"},{"code":"(fn [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (recur (rest lst))))","problem":19,"user":"524f213be4b0541d1855b7ff"},{"code":"(fn mylast [[f & r]] (if (empty? r) f (mylast r)))","problem":19,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":19,"code":"#(let [last-index (- (count %) 1)]\n   (if (> last-index 0)\n     (nth % last-index)))","user":"58ed0198e4b056aecfd47d72"},{"problem":19,"code":"(fn ultima [list]\n  (cond \n   \t\t(= 0 (count (rest list))) (first list)\n        :else (ultima(rest list))))","user":"501ff0dae4b0cb6ebc0a42f1"},{"problem":19,"code":"(fn my-last [s] (nth s (- (count s) 1)))","user":"54d90b36e4b0a52adc2e2049"},{"code":"(fn b [x]\n  (if (seq (rest x))\n    (b (rest x))\n    (first x)))","problem":19,"user":"51af978fe4b0c53cf2e68a50"},{"problem":19,"code":"#(first (reverse %)) ;; comment","user":"589714cbe4b00487982d52b1"},{"code":"(fn [lst] (nth lst (- (count lst) 1)))","problem":19,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn [v]\n  (if (seq (rest v))\n    (recur (rest v))\n    (first v)))","problem":19,"user":"4e6ac7a8535d8ccf87e9ff03"},{"code":"(fn [coll]\n  (loop [[x & xs] coll]\n    (if (not xs)\n      x\n      (recur xs))))","problem":19,"user":"4fef4379e4b0678c553fc312"},{"code":"(fn[x] \n  (if (empty? (rest x)) \n    (first x)\n    (recur (rest x))))","problem":19,"user":"4fe0ba48e4b0dd6cd5ce362a"},{"problem":19,"code":"(fn [[x & rest]] (if (empty? rest) x (recur rest)) )","user":"54c169ade4b0ed20f4ff6f24"},{"code":"reduce (fn[x y] y)","problem":19,"user":"4f8e21bde4b0d4e659cdde64"},{"code":"(fn [lst] \n  (let [cdr (rest lst)]\n    (if (empty? cdr) \n      (first lst) \n      (recur cdr))))","problem":19,"user":"5201d2f3e4b0b2e020a18f22"},{"code":"(fn get-last [x]\r\n  (if (next x)\r\n    (recur (next x))\r\n    (first x)))","problem":19,"user":"4f20c040e4b0d66497709fcb"},{"problem":19,"code":"(fn ultimo\n  [lst]\n  (nth lst (- (count lst) 1)))","user":"59e778aae4b0249b72820716"},{"code":"(fn [coll] \n  (if (next coll)\n    (recur (next coll))\n    (first coll)))","problem":19,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn[thing] (nth thing (dec (count thing))))","problem":19,"user":"52dafe13e4b09f7907dd13c2"},{"problem":19,"code":"(fn [in] (reduce (fn [in a] a) in))","user":"5db2763de4b010eb3c36cd16"},{"code":"(fn grope [[collection & tits]]\n  (if (= tits nil)\n    collection\n    (grope tits)))","problem":19,"user":"53120cb5e4b08068f379ecf0"},{"problem":19,"code":"#(if (list? %) (peek (reverse %)) (peek %))","user":"55a9e0fee4b0988bba2ad945"},{"code":"#(nth % (- (alength (into-array %)) 1))","problem":19,"user":"4ecab3b7535d6d7199dd3709"},{"code":"(fn [seqs] (nth seqs (- (count seqs) 1)))","problem":19,"user":"5153316ce4b0252ac4b16611"},{"problem":19,"code":"(fn [coll] (first (drop (- (count coll) 1) coll)))","user":"56489f48e4b0284900eef633"},{"code":"(fn [collection] (nth collection (dec(count collection))))","problem":19,"user":"50f87a67e4b0aafb827eb202"},{"problem":19,"code":"(fn [l] (reduce #(identity %2) l))","user":"57763002e4b0979f89651631"},{"problem":19,"code":"(fn [xs]\n  (let [x (first xs) r (rest xs)]\n    (if (empty? r)\n      x\n      (recur r))))","user":"548cd813e4b0e286459a1211"},{"code":"(fn [[f & rst]] (if (not rst) f (recur rst)))","problem":19,"user":"510db6cde4b078ea71921145"},{"code":"(fn [coll] (if (next coll) (recur (next coll)) (first coll)))","problem":19,"user":"51696ee7e4b03f62cda68ce8"},{"problem":19,"code":"#(-> (reverse %)\n      (first))","user":"58d4d864e4b03c36ff7e594c"},{"code":"(fn [ls] \n  (if (empty? (rest ls)) (first ls) (recur (rest ls))))","problem":19,"user":"51950793e4b09df09a77a3e4"},{"problem":19,"code":"(fn [s] (-> s vec peek))","user":"560ae540e4b05f002753df0d"},{"problem":19,"code":"(fn [seq]\n  (loop [param-list seq]\n    (let [[current & rest] param-list]\n      (if (empty? rest)\n        current\n        (recur rest)))))","user":"52561295e4b0541d1855ba03"},{"code":"(fn[a-seq] (first (reverse a-seq)))","problem":19,"user":"4e58bcd4535d8a8b8723a296"},{"problem":19,"code":"(fn [s]                                                                                               \n  (loop                                                                                               \n       [[head & remaining] s]                                                                          \n     (if (= (first remaining) nil)                                                                     \n       head                                                                                            \n       (recur remaining) )))","user":"56cb0abce4b0ea9b8538f722"},{"code":"(fn [a](first (reverse a)))","problem":19,"user":"525d417ee4b0cb4875a45d68"},{"code":"(fn [x] (first(reverse x) ))","problem":19,"user":"524097ace4b0ad64fa010337"},{"code":";(fn [s]\n;  (reduce (fn [_ x] x) s))\n#(first (reverse %))","problem":19,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn end [sequence] \n  (if (= (count sequence) 1)\n    (first sequence)\n    (end (rest sequence))))","problem":19,"user":"50057f23e4b0678c553fc466"},{"code":"(fn boo [s]\n(if (next s)\n(recur (next s))\n(first s)))","problem":19,"user":"53824a83e4b06839e8705ed2"},{"problem":19,"code":"(fn la [in]\n  (if (= (rest in) '())\n    (first in)\n    (la (rest in))))","user":"57fa6f2ee4b0d3187e900962"},{"problem":19,"code":"(fn last' [[x & xs]] \n  (if xs \n    (last' xs) \n    x))","user":"5ee09da9e4b029a2061bbe6f"},{"code":"(fn [s] ( -> s reverse first ))","problem":19,"user":"4ef5e06d535dced4c769f24a"},{"problem":19,"code":"(fn [xs]\n  (first (take-last 1 xs)))","user":"54c67051e4b045293a27f62c"},{"problem":19,"code":"(fn [x] (first (take-last  1 x) ))","user":"5998643de4b07157cc8daae3"},{"problem":19,"code":"(fn ^:static asd [s]\n        (if (next s)\n          (recur (next s))\n(first s)))","user":"5875f45be4b01531a375ea78"},{"code":"#(reduce (fn [r e] e) %)","problem":19,"user":"528ed0a8e4b0239c8a67aeea"},{"code":"(fn [list](nth list (-(count list) 1)))","problem":19,"user":"4de6f806535d08e6dec9fdf7"},{"problem":19,"code":"(fn [xs]\n  (if (empty? (rest xs)) \n              (first xs)\n              (recur (rest xs))\n    )\n  )","user":"5c1840eae4b01240ff5671eb"},{"code":"(fn [[head & tail]]\n  (if tail\n    (recur tail)\n    head\n  )\n)","problem":19,"user":"5075d655e4b09049dea827a3"},{"code":"(fn [sequence] (nth sequence (- (count sequence) 1)))","problem":19,"user":"4e3f2b0c535dc968683fc496"},{"problem":19,"code":"(partial reduce (fn [x y] y) nil)","user":"53c649d3e4b00fb29b221297"},{"code":"(fn _last [s] (if (nil? (not-empty (rest s))) (first s) (_last (rest s))))","problem":19,"user":"5263c44fe4b03e8d9a4a70b8"},{"code":"(fn[x] (nth x (- (.size x) 1)))","problem":19,"user":"4f725128e4b07046d9f4f02d"},{"code":"(fn give-last [x] \n  (if (= (count x) 1) (first x) (give-last (rest x)) \n  )\n)","problem":19,"user":"50b32252e4b03ea880433568"},{"code":"(fn [inlist]\n  (if (= (count inlist) 1) (first inlist)\n  (recur (rest inlist))))","problem":19,"user":"4fc50bcbe4b081705acca375"},{"problem":19,"code":"(fn [args]\n  (let [[x & more] args]\n    (prn x)\n    (if more (recur more) x)))","user":"5f27f180e4b033932238a648"},{"code":"(fn [s]\n  (first (reverse s))\n)","problem":19,"user":"536c1119e4b0fc7073fd6e34"},{"problem":19,"code":"(fn [x] (get (vec x) (dec (count x))))","user":"56897829e4b0dcc4269f407e"},{"code":"#(if (next %)\n  (recur (next %))\n  (first %))","problem":19,"user":"4ef47f0f535dced4c769f235"},{"code":"(fn [x] (first ( reverse x)))","problem":19,"user":"4ff45c49e4b0678c553fc35d"},{"code":"(fn [l] (first(reverse l)))","problem":19,"user":"4e7cf07f535db169f9c796c2"},{"problem":19,"code":"(fn [xs] (nth xs (dec (count xs)) ))","user":"601c39eee4b0bf4ca6b10937"},{"problem":19,"code":"(fn last-element\n  [coll]\n    (loop [elements coll]\n      (if (empty? (next elements))\n        (first elements)\n        (recur \n          (rest elements)))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":19,"code":"(fn fnt [lis] (nth lis (- (count lis) 1)))","user":"58f547b1e4b0438e51c2ced4"},{"problem":19,"code":"(fn last-element [sequence] (first (reverse sequence)))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":19,"code":"(fn [seq] \n  (let [list-length (count seq)]\n    (nth seq (- list-length 1))\n    ))","user":"5ba24b59e4b0a20761a233bf"},{"code":"(fn [a] \n  (loop [h (first a) t (rest a)]\n    (if (seq t) (recur (first t) (rest t)) h)))","problem":19,"user":"4e5a66d3535d8a8b8723a2ad"},{"problem":19,"code":"(fn [col] (if (empty? (rest col))\n            (first col)\n            (recur (rest col))))","user":"587c845ce4b01531a375eb20"},{"problem":19,"code":"#(let [n (- (count %) 1)]\n    (nth % n)\n        )","user":"559d6288e4b0ec2b359424dc"},{"problem":19,"code":"(fn my-last [[x & xs]]\n  (if (not (empty? xs))\n    (my-last xs)\n    x))\n\n;(fn my-last [[x & xs]]\n;  (if xs\n;    (my-last xs)\n;    x))\n\n;(fn my-last [lst]\n;  (if (next lst)\n;    (my-last (rest lst))\n;   (first lst)))","user":"5a1c94dee4b0ff51aa4b3249"},{"problem":19,"code":"(fn [x] \n  (if (nil? x) \n    x \n    (if (empty? (rest x)) \n      (first x) \n      (recur (rest x))\n    )\n  )\n)","user":"5903c708e4b022d14a2aafb3"},{"problem":19,"code":"(fn abc [x]\n  (if (= (count x) 1)\n    (first x)\n    (abc (rest x))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"code":"#(reduce (fn [_ x] x) %)","problem":19,"user":"4e8e0a62535d65386fec213f"},{"problem":19,"code":"(fn [coll]\n   (loop [[element & remaining] coll]\n     (if (empty? remaining)\n       element\n       (recur remaining))))","user":"58a34442e4b02bd94d917ef2"},{"problem":19,"code":"(fn llast [x] (if (= (list (first x)) x) (first x) (llast (rest x))))","user":"55e4487ce4b050e68259b44c"},{"problem":19,"code":"(fn mylast [q] (if (= (rest q) '()) (first q) (mylast (rest q))))","user":"5f79cb16e4b02876ed9fd0cb"},{"code":"(fn [l] (nth l (dec (count l))))","problem":19,"user":"4e139c72535d04ed9115e7da"},{"code":"(fn get-last [l]\n  (if (empty? (rest l))\n      (first l)\n      (get-last (rest l))))","problem":19,"user":"4fe8e771e4b0547ebccb2431"},{"code":"(fn get_last [x] (nth x (- (count x) 1)))","problem":19,"user":"504f3aede4b0a02f9cffde5d"},{"problem":19,"code":"(fn [x] \n  (if (= 1 (count x))\n    (first x)\n    (recur (rest x))))","user":"55e856bae4b0121d4835fd8d"},{"problem":19,"code":"(fn my-last [xs] \n  (\n    if (= () (rest xs))\n      (first xs)\n      (my-last (rest xs))\n  )\n)","user":"5cc9031ee4b0ccb061962859"},{"problem":19,"code":"(fn \n    [x]\n    (let [x2 (vec x)]\n      (x2 (- (count x2) 1))))","user":"5d6e4d1ee4b04d129b00f2c4"},{"problem":19,"code":"(fn l [ls] (if (= (count ls) 1) (first ls) (l (rest ls))))","user":"54d7e277e4b0a52adc2e2031"},{"problem":19,"code":"#( (vec %) (- (count %) 1))","user":"60845eb8e4b0736b099e42ef"},{"code":"(fn [[i & more]] (if more (recur more) i))","problem":19,"user":"52e90045e4b09f7907dd14a4"},{"code":"(fn [list]\n  (if (empty? (rest list))\n    (first list)\n    (recur (rest list))))","problem":19,"user":"53548944e4b084c2834f4b08"},{"code":"(fn [[x & rst]]\n  (if rst\n    (recur rst)\n     x))","problem":19,"user":"4ec57410535d6d7199dd36a1"},{"problem":19,"code":"(fn foo [x]\n  (if \n    (= (rest x) [])\n    (first x) \n    (foo (rest x))))","user":"5a1f8c7ce4b0ff51aa4b3286"},{"problem":19,"code":"(fn my-last [some-sequence] (first (reverse some-sequence)))","user":"5eff588ae4b0cf489e8d7f10"},{"code":"(fn [x] (loop [v x , y (first x)]\n         (if (empty? v)\n              y\n              (recur (rest v) (first v)))))","problem":19,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"(fn my-last [[x & xs]] (if (nil? xs) x (my-last xs)))","problem":19,"user":"4fe8d862e4b0547ebccb2428"},{"problem":19,"code":"reduce (fn [_ acc] acc)","user":"5d28b684e4b092dab7f59c83"},{"code":"(fn [s]\r\n(if (next s)\r\n(recur (next s))\r\n(first s)))","problem":19,"user":"4dda61dd535d02782fcbe9f3"},{"code":"(fn [s] (if (next s) (recur (next s)) (first s)))","problem":19,"user":"4f790ad5e4b0fbe0118ec58d"},{"problem":19,"code":"(fn [coll]\n  (do\n    (if (empty? coll) nil)\n    (loop [[current & remaining] coll]\n      (if (empty? remaining)\n        current\n        (recur remaining)))))","user":"59e213d8e4b08badc2a0c518"},{"code":"#(first( reverse %1))","problem":19,"user":"50e5b033e4b0165214765fc7"},{"problem":19,"code":"(fn [lst] (first (drop (dec (count lst)) lst)))","user":"5680c9a8e4b0966858e4d8f2"},{"code":"(fn l [x] (first (reverse x)))","problem":19,"user":"4f752320e4b0fbe0118ec557"},{"code":"(fn lastElement [aSequence] \n  (if (= (count aSequence) 1) (first aSequence) (lastElement (rest aSequence)))\n)","problem":19,"user":"4ef39d30535dced4c769f22c"},{"code":"(fn [x] (first (reverse x) ) )","problem":19,"user":"4ee153f0535d10e5ff6f5357"},{"problem":19,"code":"(fn last-ele [seq]\n  (let [[first & rest] seq]\n    (if (empty? rest)\n      first\n      (last-ele rest))))","user":"55fd9dffe4b07755b13145fa"},{"problem":19,"code":"(fn [y] (loop [x y] (if (not-empty (rest x)) (recur (rest x)) (first x))))","user":"561ccfb4e4b064ca9f4b169f"},{"code":"(fn [x]\n  (let [r (rest x)]\n      (if (empty? r)\n        (first x)\n        (recur r))))","problem":19,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn [s] \n  (first (reverse s)))","problem":19,"user":"5125745ae4b05d10e3e395f9"},{"problem":19,"code":"(fn last-e [l] \n  (cond\n      (or (nil? l) (empty? l)) nil \n      (empty? (rest l)) (first l) \n      :else (recur (rest l))))","user":"5794fd7be4b0e215f87e8476"},{"problem":19,"code":"(fn trim [ls] (if (> (count ls) 1)\n                (trim (rest ls))\n                (first ls)))","user":"5cafaa0fe4b026601754b89e"},{"problem":19,"code":"(fn \n  [[next & rest]] \n   (if (empty? rest)\n     next\n     (recur rest)))","user":"5aa0a3e4e4b0d174b936c82f"},{"problem":19,"code":"(fn [s] \n  (let [tail (rest s)]\n    (if (empty? tail)\n      (first s)\n      (recur tail))))","user":"544c2cbae4b0e3978000696f"},{"code":"(fn\n  [n]\n  (if (> (count n) 1)\n    (recur (rest n))\n    (first n)))","problem":19,"user":"4e80d1c8535db62dc21a62b6"},{"code":"(fn [v] (first (reverse v)))","problem":19,"user":"4e31c695535deb9a81d77f20"},{"code":"(fn l [s](if (= (rest s) [])(first s)(l (rest s))))","problem":19,"user":"5100d7dbe4b04f1d96d946df"},{"code":"(fn [lst]\n  (cond \n    (nil? (next lst)) (first lst)\n    true (recur (next lst))))","problem":19,"user":"4f302203e4b0d6649770a073"},{"problem":19,"code":"(fn \n  [nums] \n  (first \n    (reverse nums))\n  ) \n\n; or #(first (reverse %) in shorthand","user":"519d2a0be4b037b32803f9ae"},{"problem":19,"code":"#(loop [i %]\n   (if (next i)\n   \t\t(recur (rest i)) (first i)))","user":"5c481764e4b0e06e1360a3ba"},{"problem":19,"code":"#(reduce (fn [_ a] (identity a))  %)","user":"5829bc55e4b051871117bf49"},{"code":"(fn [list] \n  (first (reverse list)))","problem":19,"user":"4fbe2cfbe4b081705acca30c"},{"code":"(partial reduce (fn [x y] (identity y)))","problem":19,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn [x] (->> x (count) (dec) (nth x)))","problem":19,"user":"51b793d3e4b0d906fcd71d38"},{"problem":19,"code":"(fn [elements] \n  (nth elements\n       (- (count elements) 1)))","user":"5cbcacc2e4b026601754b9ed"},{"problem":19,"code":"(fn [in-list]\n  (loop [lst in-list]\n    (let [r (rest lst)]\n      (if (empty? r)\n        (first lst)\n        (recur r)))))","user":"5461c402e4b01be26fd746a6"},{"code":"(fn [lst] (first (reverse lst)))","problem":19,"user":"4ded56bb535d08e6dec9fe0b"},{"problem":19,"code":"(fn [s]\n  (loop [f (first s) r (rest s)]\n    (if (empty? r)\n      f\n      (recur (first r) (rest r)))))","user":"56f53c61e4b046a417f9206d"},{"problem":19,"code":"(fn [x]\n   (first (reverse x))\n   )","user":"56a257e7e4b0542e1f8d14bb"},{"problem":19,"code":"(fn [neko] ((vec neko) (dec (count neko))))","user":"5c6cb3bfe4b0fca0c1622730"},{"problem":19,"code":"(fn my-last [seq] (first (reverse seq)))","user":"56c0756de4b060a8e693e3a9"},{"problem":19,"code":"(fn [myseq] (first (reverse myseq)))","user":"5425d00ee4b01498b1a71b12"},{"problem":19,"code":"(fn my-last [xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (recur (rest xs))))","user":"57210b6de4b0c5bde472c0a6"},{"code":"reduce #(second (list %1 %2))","problem":19,"user":"5013141de4b0f26a0e3320a9"},{"code":"(fn [x] (nth x (-(count x) 1)))","problem":19,"user":"4fb4e279e4b081705acca2b3"},{"code":"(fn get-last [s] \n  (if (nil? (next s) )\n    (first s)\n    (get-last (rest s))))","problem":19,"user":"4f0374a0535dcb61093f6ad9"},{"problem":19,"code":"#(loop [s %]\n   (if (= 1 (count s)) (first s) (recur (rest s))))","user":"57b6555be4b0fbc9809a27bf"},{"code":"(fn [x] (if (= nil (next x)) (first x) (recur (next x))))","problem":19,"user":"51ab8589e4b04e3dc0c27b37"},{"code":"(fn mupp [x] (first (reverse x)))","problem":19,"user":"4fe1ab04e4b0dd6cd5ce3638"},{"problem":19,"code":"(fn [x] (->> x (reverse) (first)))","user":"594e3723e4b07ddc2dafaea8"},{"problem":19,"code":"#(if (next %)\n          (recur (next %\n                       ))\n          (first %))","user":"56306e6ce4b073c1cf7a9be7"},{"code":"(fn [coll] (.get coll (dec (count coll))))","problem":19,"user":"537044bee4b0fc7073fd6e95"},{"problem":19,"code":"(fn get_last [x] (nth x (-(count x) 1)))","user":"53ee83f9e4b0d648e757f4d0"},{"problem":19,"code":"(fn [c] \n  (let [l (dec (count c))]\n    (nth c l)))","user":"59fd069ae4b01bb0ae8afcf4"},{"code":"(fn [%] (if (= (count %) 1) (first %) (recur (rest %))))","problem":19,"user":"4f038017535dcb61093f6afa"},{"problem":19,"code":"(fn [x] (first (filter #(= (.indexOf x %) (+ (count x) -1)) x)))","user":"53ed03f0e4b0d648e757f4bb"},{"code":"(fn myLast [aseq]\n  (if (= 1 (.size aseq))\n    (first aseq)\n    (myLast (rest aseq))))","problem":19,"user":"4ec59b78535d6d7199dd36aa"},{"problem":19,"code":"(fn ultimo [xs] (if (= (count xs) 1) (first xs) (ultimo (rest xs))))","user":"587e31ffe4b052da650a633b"},{"problem":19,"code":"reduce (fn [accum val] val)","user":"56277b32e4b00e49c7cb47d1"},{"problem":19,"code":"(fn [x] (first (reduce #(conj %1 %2) '() x)))","user":"549def9ce4b0f3d1d8e70f99"},{"problem":19,"code":"#(-> %\n     (reverse)\n     (first))","user":"57204301e4b0c5bde472c093"},{"problem":19,"code":"(fn [x] (-> (seq x)\n            reverse\n            first))","user":"5a57d2f6e4b05d388ecb6c71"},{"problem":19,"code":"(fn [arr] (nth arr (dec (count arr))))","user":"594cdbc1e4b07ddc2dafae75"},{"problem":19,"code":"(fn [l] (if (empty? (rest l)) (first l) (recur (rest l) )) )","user":"567798afe4b05957ce8c6169"},{"code":"(fn last-elem [x] (first (reverse x)))","problem":19,"user":"52b461c6e4b0c58976d9ad23"},{"problem":19,"code":"(fn [x] (let [[f r] (take-last 2 x)] r))","user":"55818b0ee4b05c286339e0fb"},{"code":"(fn [coll]\n  (loop [[first & remaining] coll]\n    (if (empty? remaining)\n      first\n      (recur remaining))))","problem":19,"user":"52bb123ae4b07a9af57922de"},{"problem":19,"code":"(fn [array] (first (reverse array)))","user":"549c953ee4b0f3d1d8e70f8e"},{"problem":19,"code":"(fn [c] (if (= (.size c) 1) (first c) (recur (rest c))))","user":"5b5d255de4b0c6492753e6c8"},{"code":"(fn [coll](first (drop (- (count coll) 1) coll)))","problem":19,"user":"50afdf00e4b0c3f5ed5c29a5"},{"code":"(fn [x] (first ((fn [x] (reverse x)) x)))","problem":19,"user":"4f20173a535d64f6031464a9"},{"problem":19,"code":"#((vec %) (- (count (vec %)) 1))","user":"58d96bdce4b0a4d5acaab638"},{"problem":19,"code":"(fn [lst]\n  (loop [n lst]\n    (if(empty? (rest n))\n      (first n)\n      (recur (rest n)))))","user":"57c447d9e4b05aa3c4741ccc"},{"problem":19,"code":"#(if (= () (rest %)) (first %) (recur (rest %)))","user":"5de7377ee4b0986d99407f75"},{"problem":19,"code":"(fn [seq]\n     (loop [el (first seq)\n            remain (rest seq)]\n       (if (empty? remain)\n         el\n         (recur (first remain) (rest remain)))))","user":"5ccaed31e4b0ccb061962877"},{"problem":19,"code":"(fn [coll] \n  (nth coll\n       (-\n        (count coll)\n        1))\n  )","user":"55c461d3e4b0e31453f64999"},{"problem":19,"code":"(fn special [x] (nth x (dec (count x))))","user":"57309d74e4b0cd1946bd0fb1"},{"code":"(fn [s]\n  (loop [s s]\n    (cond\n      (== (count s) 1) (first s)\n      :else (recur (rest s)))))","problem":19,"user":"500cc693e4b05f7c30cfa69a"},{"problem":19,"code":"(fn [[x & col]] (if (empty? col) x (recur col)))","user":"5d838684e4b0915913b1d385"},{"problem":19,"code":"(fn [lst] (if (next lst) (recur (next lst)) (first lst)))","user":"524bc937e4b09eba1c0223ee"},{"code":"(fn [array]\n  (first (reverse array)))","problem":19,"user":"4f90b562e4b0dcca54ed6c91"},{"code":"#(if (not(next %)) (first %) (recur (next %)))","problem":19,"user":"5150c09de4b03e678e393ac4"},{"problem":19,"code":"(fn [v] \n  (if (next v) \n    (recur (next v)) \n    (first v)))","user":"539043e7e4b0b51d73faae97"},{"code":"#(loop [x %1]\n  (if (> (count x) 1)\n    (recur (rest x))\n    (first x)))","problem":19,"user":"50a5f72fe4b0aa96157e2611"},{"code":";(fn buzz [s]\r\n;        (if (next s)\r\n;          (recur (next s))\r\n;          (first s)))\r\n\r\n#(peek (vec %))","problem":19,"user":"4de27757535d08e6dec9fdea"},{"problem":19,"code":"(fn llast [s] (or (and (= (rest s) '()) (first s)) (llast (rest s))))","user":"554a3303e4b0a04f79299573"},{"problem":19,"code":"(fn getLast [x] \n  (first (reverse x)))","user":"5aa5951ae4b0d174b936c899"},{"code":"(fn [s] \n  (if (= (next s) nil) \n    (first s) \n    (recur (next s))\n    )\n  )","problem":19,"user":"52abd555e4b0c58976d9ac7e"},{"code":"(fn my-last [x]\n  (if (= 1 (count x))\n    (first x)\n    (my-last (rest x))))","problem":19,"user":"535a170ae4b04ce2eb3ed2a3"},{"code":"#(let [x %] (if (next x) (recur (next x)) (first x)))","problem":19,"user":"524fafdfe4b0541d1855b818"},{"code":"(fn [seq] (reduce (fn [_ y] y) seq))","problem":19,"user":"523da205e4b06956f8342c95"},{"problem":19,"code":"(fn last-item [x]\n  (first (reverse x)))","user":"5add1fede4b0837691e92c0a"},{"code":"(fn myfunc [l]\n  (if (empty? (rest l))\n(first l)\n(myfunc (rest l))))","problem":19,"user":"4dae03d8c9a9d6ed4a99dc57"},{"code":"(fn [[x & xs]]\n  (if (seq xs) (recur xs) x))","problem":19,"user":"51ac6360e4b09397d510976c"},{"problem":19,"code":"(fn [n] \n  (nth n\n       (- (count n) 1)))","user":"54b89dd6e4b0ed20f4ff6e97"},{"code":"(fn [x] (if (empty? (rest x)) (first x) (recur (rest x)) ))","problem":19,"user":"51838e8be4b028ec5fd2f2a0"},{"problem":19,"code":"(fn get-last [col]\n  (if (= (count col) 1)\n    (first col)\n    (get-last (rest col))))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn [l] (reduce (fn [a b] b) l))","problem":19,"user":"515e38ace4b049add99a0538"},{"code":"#(first ((fn [s] (reverse s)) %))","problem":19,"user":"52e295fae4b09f7907dd1437"},{"problem":19,"code":"(fn [args]\n  (nth args (dec (count args))))","user":"51536551e4b0252ac4b16633"},{"problem":19,"code":"(fn [q] (reduce (fn [c n] (identity n)) q))","user":"577da4eae4b0c8d87281f6d7"},{"code":"(fn my-last [l]\n  (nth l (- (count l) 1)))","problem":19,"user":"4ff60dade4b0678c553fc374"},{"problem":19,"code":"(fn my-last [coll]\n  (if (next coll)\n    (recur (next coll))\n    (first coll)))","user":"59769d75e4b01722bebd4cdd"},{"code":"(fn [s]\n  (cond (= nil s) s\n        (= (rest s) '()) (first s)\n        true (recur (rest s))))","problem":19,"user":"4f259f95e4b0d66497709ffa"},{"code":"(fn [coll]\n  (loop [coll coll a nil]\n    (or (and (empty? coll) a)\n        (recur (rest coll) (first coll)))))","problem":19,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":19,"code":"#(-> % (reverse) (first) )","user":"512b07f7e4b078b06821febb"},{"problem":19,"code":"(fn foo [x]\n  (if (= () (rest x))\n    (first x)\n    (foo (rest x))))","user":"5969e39be4b069c0a1a197ef"},{"problem":19,"code":"(fn [sample] (nth sample (dec (count sample))))","user":"5b1f84b3e4b03cfeda66ed1f"},{"problem":19,"code":"(fn lst\n  [[x & xs]]\n  (if (= (count xs) 1)\n    (first xs)\n    (lst xs)))","user":"5484c3b2e4b0e286459a11a2"},{"problem":19,"code":"(fn [elements]\n  (loop [[element & remaining] elements]\n    (if (empty? remaining)\n      element\n      (recur remaining))))","user":"56822f37e4b0945ebc182a8d"},{"code":"(fn [[start & therest]] (if therest (recur therest) start))","problem":19,"user":"510ce3cbe4b078ea71921127"},{"problem":19,"code":"(fn take-last [col] (first (reverse col)))","user":"58daae01e4b0a4d5acaab664"},{"problem":19,"code":"#(\n  (into [] %)\n  (- (count %) 1) \n  )","user":"57ee4909e4b0bfb2137f5bb4"},{"problem":19,"code":"(fn LastElement [lst] \n  (first (reverse lst)))","user":"607508f3e4b069485764de54"},{"problem":19,"code":"reduce (fn [_, item] item)","user":"58a31ecee4b02bd94d917ee7"},{"problem":19,"code":"(fn rbg [y]\n(first (reverse y)))","user":"60b5ecffe4b0e0fa5f1b4241"},{"problem":19,"code":"(fn [lst] \n  (if (= 1 (count lst)) \n    (first lst)\n    (recur (rest lst))))","user":"5e57f45fe4b027a2e10ac103"},{"problem":19,"code":"(fn [coll]\n  (if (next coll)\n    (recur (rest coll))\n    (first coll)))","user":"546ed28be4b00cfc9eacc1a5"},{"code":"(fn last1 \n  ([coll] (last1 (first coll) (rest coll)))\n  ([prev coll]\n    (if (empty? coll) prev (last1 (first coll) (rest coll)))))","problem":19,"user":"4ecdf94a535d23f03622770b"},{"code":"(fn [[c & l]]\n  (if l\n    (recur l)\n    c))","problem":19,"user":"53059d42e4b0d8b024fd3761"},{"code":"(fn [s] (-> s reverse first))","problem":19,"user":"500e38a5e4b068062f6e8d90"},{"code":"#(nth %1 (- (count %1) 1))","problem":19,"user":"4e045855535d04ed9115e79f"},{"code":"(fn last-in-seq [s] (.get s (- (count s) 1)))","problem":19,"user":"515dc93be4b0c89ed0914af5"},{"problem":19,"code":"#(loop [r  %] \n    (if (> (count r) 1) \n      (recur (rest r))\n      (first r)))","user":"56f51879e4b046a417f92069"},{"problem":19,"code":"(fn lelement [x]\n  (if (empty? (rest x))\n    (first x)\n    (lelement (rest x))))","user":"5b26a74ee4b063e2438bcc37"},{"problem":19,"code":"#(nth %1 ((comp dec count) %1))","user":"55423a83e4b0a04f7929951a"},{"problem":19,"code":"(fn lastel [collec] \n\t(if (empty? (rest collec))\n\t  (first collec)\n\t  (lastel (rest collec))))","user":"57af36eae4b0fbc9809a272e"},{"code":"(fn [x] \n  (first (reverse x)))","problem":19,"user":"4eed26af535d93acb0a668bb"},{"problem":19,"code":"#( if (next %) (recur (next %)) (first %))","user":"5510ed89e4b06e50f9beb18e"},{"code":"(fn final [sq]\n  (if (= '() (rest sq))\n      (first sq)\n      (final (rest sq))))","problem":19,"user":"4ea09749535d7eef308072a8"},{"problem":19,"code":"(fn my-last\n  [coll]\n  (let [n (count coll)]\n    (nth coll (dec n))))","user":"55ee7977e4b0121d4835fdee"},{"problem":19,"code":"(fn lastItem [sequenc] (nth sequenc (dec (count sequenc))))","user":"5683e0c6e4b0945ebc182aa3"},{"code":"(fn [x] (nth x (- (count x)1)))","problem":19,"user":"52b8bc3fe4b07a9af57922b6"},{"problem":19,"code":"(fn lastelem [coll]\n  (let [[head & tail] coll]\n    (if (empty? tail)\n      head\n      (lastelem tail))))","user":"54311d60e4b0dad94371f2e2"},{"code":"(fn [anArray] (first (reverse anArray)))","problem":19,"user":"4ec3f4a7535dcc7ae8597d5e"},{"problem":19,"code":"(fn [coll] (reduce (fn [e1 e2] e2) coll))","user":"596e2267e4b069c0a1a19860"},{"problem":19,"code":"(fn [s] (if (seq(rest s)) (recur (rest s)) (first s) ))","user":"52f25e1be4b05e3f0be25ef8"},{"problem":19,"code":"(partial reduce (fn [c v] v))","user":"576e3258e4b0979f89651574"},{"problem":19,"code":"(fn [v]\n  (loop [v v]\n    (if (= 1 (count v))\n      (first v)\n      (recur (rest v)))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [x]\n  (if (= 1 (count x))\n    (first x)\n    (recur (rest x))\n  )\n)","problem":19,"user":"50c8899ee4b00bb60fe0c541"},{"problem":19,"code":"(fn [seq] (if (= 1 (count seq))\n            (first seq)\n            (recur (rest seq))))","user":"54570dfae4b080a794c2c889"},{"code":"(fn lastElement [l] (first (reverse l)))","problem":19,"user":"502346b0e4b0b5d8b1bd239a"},{"problem":19,"code":"#(nth % \n      (dec (count %)))","user":"567cef8ce4b05957ce8c61c1"},{"problem":19,"code":"(fn [x] (if (> (count x) 0)\n          (nth x (- (count x) 1))\n          nil))","user":"5acd08eee4b0e27600da7822"},{"problem":19,"code":"#(loop [coll %]\n   (if (empty? (rest coll))\n     (first coll)\n     (recur (rest coll))))","user":"5a45aa14e4b05d388ecb6b3e"},{"problem":19,"code":"reduce (fn [_ current] current)","user":"5d704f7ee4b04d129b00f2d7"},{"problem":19,"code":"(fn foo [s]\n  (if (next s)\n    (recur (next s))\n   \t(first s)))","user":"54a81b84e4b09f271ff37c9f"},{"problem":19,"code":"(fn [aList] (nth aList (- (count aList) 1)))","user":"5d59c3d0e4b02ba5928a682e"},{"code":"#(if (next %)\n          (recur (next %))\n          (first %))","problem":19,"user":"4dfd018c535d04ed9115e77f"},{"problem":19,"code":"(fn [lst] \n  (let [cnt (count lst)] (nth lst (- cnt 1))\n  )\n  )","user":"54cdf667e4b057c6fda3a2a8"},{"code":"(fn [seqq] (nth seqq (-(count seqq) 1)))","problem":19,"user":"51e924d2e4b0f1f103a0d13a"},{"code":"(fn [a]\n  (if (empty? (rest a))\n    (first a)\n    (recur (rest a))))","problem":19,"user":"51994575e4b0aa09cbc0b845"},{"code":"(fn [seq] (if (empty? (rest seq)) (first seq) (recur (rest seq))))","problem":19,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(partial reduce (fn [acc el] el) nil)","problem":19,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn ls [lst]\n  (let [h (first lst)\n        t (rest lst)]\n    (if (empty? t)\n      \th\n      \t(ls t))))","problem":19,"user":"515c03c6e4b0388ca8ca1527"},{"problem":19,"code":"(fn l [s]\n  (if (= (rest s) '())\n    (first s)\n    (l (rest s))))","user":"5438795ee4b032a45b869313"},{"problem":19,"code":"(fn my_last\n  [s]\n  (if (empty? (rest s))\n    (first s)\n    (my_last (rest s))\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":19,"code":"(fn [coll] \n  (if-not (next coll)\n    (first coll) \n    (recur (rest coll))))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn [x] (if (> (count x) 1) (recur (rest x)) (first x)))","problem":19,"user":"50b90b60e4b0cba0e598b658"},{"problem":19,"code":"(fn ls[x] (first (reverse x)))","user":"5550e966e4b00713264bd9b3"},{"problem":19,"code":"(fn my-last\n   [s]\n   (reduce (fn [last-elem next-elem] next-elem) s))","user":"552d487ee4b076ab5578f7e4"},{"problem":19,"code":"(fn [seq] (let [len (count seq)]\n             (nth seq (- len 1))))","user":"5cfabf53e4b0cc9c91588148"},{"code":"(fn [sequ] (first (reverse sequ)))","problem":19,"user":"51127e8ee4b0350614f07a76"},{"code":"(fn last2 ([coll] \n    (if (not-empty (rest coll)) \n      (recur (rest coll)) \n      (first coll)\n    )\n  )\n)","problem":19,"user":"507ab268e4b08327cd804a6f"},{"problem":19,"code":"(fn foo [x]\n  (if  (= 1 (count x)) \n     (nth x 0)\n     (foo (rest x) )\n   )\n  \n)","user":"554ad20fe4b0a04f7929957a"},{"code":"(fn [s] \n  (if (next s)\n\t(recur (next s))\n\t(first s)))","problem":19,"user":"53a4bb70e4b0b62ce3005734"},{"code":"(fn l [seq] (if (= 1 (count seq))\n                (first seq)\n                (l (rest seq))))","problem":19,"user":"5013f715e4b0510f6b41d38c"},{"problem":19,"code":"(fn [x] (first (take 1 (reverse x))))","user":"57ed23f1e4b0bfb2137f5b91"},{"problem":19,"code":"(fn [xs] (->> xs count dec (nth xs)))","user":"55ab07e0e4b0988bba2ad953"},{"problem":19,"code":"(fn [s] (let [length (count s)] (nth s (- length 1))))","user":"5822b578e4b04b46fc4b0fa4"},{"problem":19,"code":"(fn lastEl [x]\n  (first (reverse x)))","user":"5ac74b34e4b0e27600da777f"},{"problem":19,"code":"(fn [coll]\n  (loop [remaining-coll coll last-element nil]\n    (if (empty? remaining-coll)\n      last-element\n      (recur (drop 1 remaining-coll) (first remaining-coll)))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (seq tail)\n    (recur tail)\n    head))","user":"5a5d2965e4b0512ff01cd91d"},{"code":"(fn my-last[x] (loop [ x x result []]\n        (if (empty? x)\n            (first result)\n            (recur (rest x) \n                   (cons (first x) result)))))","problem":19,"user":"5018878ce4b029375d2a5056"},{"problem":19,"code":"(fn [coll]\n  (let [len (count coll)]\n    (when (> len 0)\n      (nth coll (dec len)))))","user":"5c1c0ba7e4b01240ff56721a"},{"code":"#(first (reverse % ) )","problem":19,"user":"4e6a5728535d8ccf87e9fecf"},{"problem":19,"code":"#(loop [current %]\n    (if (<= (count current) 1)\n      (first current)\n      (let [[firstocrat & restocrat] current]\n        (recur restocrat))))","user":"55d50a38e4b0e31453f64a80"},{"problem":19,"code":"(fn getLast [xs]\n  (let [index (- (count xs) 1)]\n  (nth xs index)))","user":"5ed3f2b9e4b016b56eae05c6"},{"problem":19,"code":"(fn last' [coll]\n  (loop [coll coll\n         res nil]\n    (if (empty? coll)\n      res\n      (recur (rest coll)\n             (first coll)))))","user":"5defc177e4b093ff717275af"},{"code":"(fn[x](nth x (dec(count x))))","problem":19,"user":"521c1866e4b0c4ef0be83072"},{"code":"#(let [[h & t] %]\n   (cond\n    (nil? t) h\n    :else (recur t)))","problem":19,"user":"4fbdcb87e4b081705acca30a"},{"code":"(fn my-last [x]\n  (if (= nil (next x))\n    (first x)\n    (my-last (rest x))))","problem":19,"user":"503558a2e4b0ed9c821488f9"},{"problem":19,"code":"(fn get-that-last-one\n  [the-sequence]\n  (let [[the-first & the-rest] the-sequence] \n    (if (nil? the-rest) \n      the-first \n      (get-that-last-one the-rest))))","user":"548f05ace4b0e286459a122b"},{"code":"(fn [x] ( first ( reverse x )))","problem":19,"user":"529012a5e4b0239c8a67af01"},{"problem":19,"code":"#(loop [xs (rest %) x (first %)] (if (seq xs) (recur (rest xs) (first xs)) x))","user":"595fd721e4b066ee0a44b06e"},{"code":"(fn newlast [x] (get (vec x) (- (count x) 1)))","problem":19,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn last2 [x] (first (reverse x)))","problem":19,"user":"4f0369db535dcb61093f6ab1"},{"code":"(fn mylast [l] (if (empty? (rest l))\n  (first l) (mylast (rest l))))","problem":19,"user":"4ff4c9dae4b0678c553fc360"},{"problem":19,"code":"(fn algo \n  [lst]\n  (first (reverse lst))\n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"(fn lst [l]\n  (if (= (next l) nil)\n    (first l)\n    (lst (rest l))))","problem":19,"user":"51085be5e4b00aa5c85a1024"},{"code":"(fn lâst [x] (first (reverse x)))","problem":19,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn foo ([[x & xs]] (if xs (foo xs ) x)))","problem":19,"user":"50eafeaae4b0346a3e988cbb"},{"problem":19,"code":"(fn fun\n  [x]\n  (if (empty? (rest x))\n    (first x)\n    (fun(rest x))))","user":"57f814fbe4b0d3187e900911"},{"code":"(fn func [s]\n  (if (second s)\n    (func (rest s))\n    (first s)))","problem":19,"user":"4f064b1e535dcb61093f6c0b"},{"problem":19,"code":"#((comp  first reverse) %)","user":"5e52ad80e4b027a2e10ac0db"},{"code":"#( first  ( reverse %))","problem":19,"user":"513e39f9e4b02b2a3d8235bd"},{"code":"#(loop [l %] (if (next l) (recur (next l)) (first l)))","problem":19,"user":"5137c3b0e4b0509a8b470482"},{"problem":19,"code":"(fn last-el  ([seq] (last-el (rest seq) (first seq))) ([seq first-value] (if (empty? seq) first-value (last-el (rest seq) (first seq)))))","user":"5e1a3989e4b0dc9594008511"},{"problem":19,"code":"(fn [x]\n  (loop [f x i 0]\n    (if (< i (- (count x) 1))\n      (recur (rest f) (inc i))\n      (first f))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":19,"code":"(fn mylast [x] (nth x (-(count x)1)))","user":"60070144e4b074f607df665e"},{"problem":19,"code":"(fn my-last [myl]\n  (cond\n   (= 1 (count myl)) (first myl)\n   :else (my-last (rest myl))\n   ))","user":"507ee076e4b06ce648bcdbfc"},{"problem":19,"code":"(fn foo [x] (if (second x) (foo (rest x)) (first x)))","user":"557bc06ae4b05c286339e0b8"},{"problem":19,"code":"#((vec %) (-> % count dec))","user":"5e85b853e4b09a7a73c8bbd5"},{"problem":19,"code":"reduce (fn[_ x] x)","user":"57c7e7d9e4b05aa3c4741d0f"},{"code":"(fn [m] (reduce (fn [f s] s) m))","problem":19,"user":"4dc06d3e535d020aff1edf7d"},{"problem":19,"code":"(fn [seq] (get (vec seq) (- (count seq) 1)))","user":"53ff5560e4b0de5c418485fd"},{"code":"(fn [x]\n  (if (< 1 (count x))\n    (recur (rest x))\n    (first x)))","problem":19,"user":"4f5c344be4b0030a34fb2b1d"},{"code":"(fn [s] \n  (reduce \n   (fn [prev nxt] \n     nxt) \n      s))","problem":19,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":19,"code":"(fn [items]\n  (loop [head (first items)\n    \t tail (rest items)] \n    (if (empty? tail)\n      head\n      (recur (first tail) (rest tail)))))","user":"565ddeb9e4b068f2fe63dc2c"},{"problem":19,"code":"(fn mylast [s] (if (= (count s )1) (nth s 0) (mylast (rest s))))","user":"579ade84e4b05b1deef9ade4"},{"problem":19,"code":"(fn [mylist] (nth mylist (dec (count mylist))))","user":"54b63539e4b05787c3b163b4"},{"problem":19,"code":"#(get (into [] %) (dec (count %)))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn lost [s]\n\t        (if (next s)\n\t          (recur (next s))\n\t          (first s)))","problem":19,"user":"538e371ce4b0b51d73faae82"},{"code":"(fn [coll]\n  (let [f (first coll)\n        r (rest coll)]\n    (cond\n      (= f nil) nil\n      (and (empty? r)) f\n      :else (recur (rest coll)))))","problem":19,"user":"5264b4a9e4b03e8d9a4a70e0"},{"problem":19,"code":"(fn [list] (first (#(reverse list))))","user":"55e2d527e4b050e68259b43a"},{"problem":19,"code":"(fn get-last [seq]\n  (get\n    (vec seq)\n    (- (count seq) 1)))","user":"5b0f0974e4b0cc2b61a3be0e"},{"problem":19,"code":"reduce (fn [ignore a] a)","user":"53e60743e4b036ad0777e46b"},{"problem":19,"code":"(fn kupret [coll]\n  (nth coll (dec (count coll))))","user":"55634f38e4b0c656e3ff17e8"},{"problem":19,"code":"(fn [x] \n  (nth x \n       (- \n        \t(count x) 1\n       )\n  )\n)","user":"581f6146e4b04b46fc4b0f3d"},{"code":"(fn [theseq] \n  (loop [restseq (rest theseq) lastel (first theseq)]\n    (if (empty? restseq)\n      lastel\n      (recur (rest restseq) (first restseq)))))","problem":19,"user":"4ef78c97535dced4c769f256"},{"code":"(fn [S] \n  (first (reverse S)))","problem":19,"user":"4fda016ae4b05e33b9224f42"},{"problem":19,"code":"(fn [cs]\n  (if (next cs) \n    (recur (next cs)) \n    (first cs)))","user":"57275755e4b0c5bde472c13b"},{"code":"(fn [coll] \r\n  (loop [coll coll]\r\n    (cond (empty? coll) nil\r\n          (empty? (rest coll)) (first coll)\r\n          :else (recur (rest coll)))))","problem":19,"user":"4e18ed7a535d04ed9115e7f6"},{"code":"(fn [list]\n  (let [r (rest list)]\n    (if (empty? r) (first list) (recur r))\n    )\n  )","problem":19,"user":"5166b79ae4b060c690c1f4c0"},{"code":"(fn [x] (\n         first (reverse x)\n         ))","problem":19,"user":"5256c8c7e4b0541d1855ba37"},{"code":"(fn [lst] (if (= () (rest lst)) (first lst) (recur (rest lst))))","problem":19,"user":"52bdf6bde4b07a9af579230d"},{"code":"(fn [coll] (reduce (fn [a b] b) coll))","problem":19,"user":"52826315e4b0757a1b171459"},{"code":"(fn getLast [x] (if (empty? (rest x)) (first x) (getLast (rest x))))","problem":19,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn [x](get (vec x) (- (count x) 1)))","problem":19,"user":"5133d91ee4b0d7a043de8cf5"},{"code":"(fn [x] \n          (if-not (seq (rest x))\n            (first x)\n            (recur (rest x))))","problem":19,"user":"4f7c7ed7e4b06e829148e1b4"},{"code":"(fn my-last [xs]\n  (if (= '() (rest xs))\n      (first xs)\n      (my-last (rest xs))))","problem":19,"user":"5186134ce4b0da5a5be3bac7"},{"problem":19,"code":"(fn [seq] (nth seq (-(count seq) 1)))","user":"584ce55be4b0b7285a6f4e31"},{"code":"(fn [z] (nth z (- (count z) 1)))","problem":19,"user":"53749685e4b06d7f452d9e23"},{"problem":19,"code":"#(if (empty? (rest %)) \n  (first %)\n  (recur (rest %)))","user":"54058126e4b0addc1aec6667"},{"code":"#(-> % count (- 1) (->> (nth %)) )","problem":19,"user":"4e628ab2535d8ccf87e9fe61"},{"code":"(fn last-thing [sq] (nth sq (- (count sq) 1)))","problem":19,"user":"52b12804e4b0c58976d9acd7"},{"code":"(fn [n] (peek (vec n)))","problem":19,"user":"526ed524e4b03e8d9a4a733c"},{"problem":19,"code":"(fn [aseq] (nth aseq (- (count aseq) 1)))","user":"562739ace4b00e49c7cb47cc"},{"code":"#(first (reduce conj '() %))","problem":19,"user":"50d4593ee4b09cc622d65a68"},{"problem":19,"code":"(fn [input](first (reverse input)))","user":"5cab939de4b026601754b84c"},{"problem":19,"code":"(fn ult [[x & r]] (if (empty? r) x (ult r)))","user":"53ad2bbbe4b047364c044464"},{"code":"#(reduce (fn [_ y] y) %)","problem":19,"user":"51269362e4b083bb8f88cf09"},{"problem":19,"code":"(fn [x]\n   (.get x (- (count x) 1)))","user":"4f4cc67fe4b03ad3f0c10c96"},{"problem":19,"code":"(fn l [s] \n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"54305256e4b0dad94371f2d9"},{"code":"(fn [x]\r\n    (let [items (next x)]\r\n        (if (nil? items)\r\n            (first x)\r\n            (recur items))))","problem":19,"user":"4ddee3b1535d08e6dec9fddd"},{"problem":19,"code":"(fn last-el [col] (if (next col) (recur (next col)) (first col)))","user":"575ddfd1e4b02ea11479938d"},{"problem":19,"code":"(fn mlast [a] (if (next a) (recur (next a)) (first a)))","user":"561c0278e4b064ca9f4b1691"},{"code":"(fn mylast [x] (first (reverse x)) )","problem":19,"user":"51ffc496e4b0f1313d468aa0"},{"problem":19,"code":"(fn \n  [x]\n  (let [r (rest x)\n        l (first x)]\n    (if (= r ())\n      l\n      (recur r))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":19,"code":"(fn [x]\n  (let [c (count x)]\n  (cond\n    (= c 1) (first x)\n    :else (recur (rest x)))))","user":"5c0a400ee4b0bdcf453d1700"},{"code":"#(nth % (count (rest %)))","problem":19,"user":"506cc221e4b0a302964c548f"},{"problem":19,"code":"(fn [xs]\n  (nth xs (- (count xs) 1)))","user":"5681fe64e4b0945ebc182a88"},{"code":"#(let [[elem & rst] %] (if (empty? rst) elem (recur rst)))","problem":19,"user":"52488545e4b05ef8e38e63df"},{"problem":19,"code":"(fn get-last [xs]\n  (if (= (count xs) 1) (first xs)\n      (get-last (rest xs))))","user":"5ff8b97fe4b06df49cee14a8"},{"problem":19,"code":"(fn [xs] \n  (reduce (fn [x y] y) xs)\n  )","user":"54e8a220e4b024c67c0cf825"},{"code":"(fn lastOf [n]\n  (nth n (- (count n) 1)))","problem":19,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":19,"code":"apply (fn temp [x & xs] (if (empty? xs) x (apply temp (first xs) (rest xs))))","user":"54c92da5e4b045293a27f65b"},{"code":";(fn last-element [x] (nth x (dec (count x))))\n(fn last-element [x] (->> x count dec (nth x)))","problem":19,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"problem":19,"code":"(fn take-last [coll]\n  (first (reverse coll))\n  )","user":"53479a2de4b084c2834f4a4d"},{"problem":19,"code":"( partial reduce #(identity %2) 0)","user":"56ae4c21e4b03c432f18735c"},{"problem":19,"code":"(fn take_last_out [seq] (first (reverse seq)))","user":"584e9acae4b0b7285a6f4e54"},{"problem":19,"code":"(fn\n  [s]\n  (loop [curr s]\n    (if (empty? (rest curr))\n      (first curr)\n      (recur (rest curr))\n    )\n   )\n  )","user":"54c6e78ae4b045293a27f634"},{"code":"(fn [lst]\n  (first (reverse lst)))","problem":19,"user":"4ff73b7ae4b0678c553fc38c"},{"code":"(fn g [x] (if (not= (count x) 1) (g (rest x)) (first x)))","problem":19,"user":"5006981ce4b0678c553fc489"},{"problem":19,"code":"(fn hats [x] (first (reverse x)))","user":"55c819b4e4b0e31453f649dc"},{"code":";(fn [li] (get (vec li) (- (count li) 1)))\n\n;(fn [li] ( peek (vec li)))\n\n;(comp first reverse)\n\n;(comp peek vec)\n\nreduce (fn [a b] b)","problem":19,"user":"534ab3f5e4b084c2834f4a6e"},{"problem":19,"code":";\n\n(fn [[head & tail]] (reduce (fn [acc el] el) head tail))","user":"6031926ae4b0d5df2af222ac"},{"code":"(fn find-last [coll]\n  (first (reverse coll)))","problem":19,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn ! [[x & the_rest]] \r\n (if the_rest\r\n  (! the_rest)\r\n x)\r\n)","problem":19,"user":"4ecc402c535d23f0362276f9"},{"problem":19,"code":"(fn [mylist] (loop [templist mylist] (if (next templist) (recur (next templist)) (first templist))))","user":"5439c3cee4b032a45b869323"},{"problem":19,"code":"(fn [list] (-> list (reverse) (first)))","user":"52c634b1e4b0c2d177d6210a"},{"problem":19,"code":"(fn [s] (first (reverse s) ) )","user":"58622733e4b0f14aab7c8803"},{"problem":19,"code":"#(reduce (fn [_ l] l) %)","user":"5566cf7fe4b0c656e3ff1836"},{"problem":19,"code":"(fn mlast [x] (cond (not (second x)) (first x) true (mlast (rest x))))","user":"5ae7ed7ce4b0837691e92cb0"},{"problem":19,"code":"(fn te [x] (if (= (count x) 1) (first x) (te (rest x))))","user":"52be0927e4b07a9af579230f"},{"problem":19,"code":"(fn [s] \n  (if (empty? (rest s))\n    (first s)\n    (recur (rest s)\n           )\n    )\n  )","user":"553f70cae4b0a04f792994f8"},{"problem":19,"code":"(fn my-last [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (my-last (rest seq))))","user":"5f80aca4e4b0c071e6c840e8"},{"problem":19,"code":"(fn reduce-seq [x] (cond\n                      (= () (rest x)) (first x)\n                      :else (reduce-seq (rest x))\n                   )\n)","user":"58f92297e4b0438e51c2cf43"},{"problem":19,"code":"#(-> %\n     vec\n     reverse\n     first)","user":"594c7160e4b07ddc2dafae64"},{"problem":19,"code":"(fn [seq] (nth seq (- (count seq) 1 )))","user":"56018b59e4b04bb52996e18c"},{"problem":19,"code":"(fn f [x] (if (seq (rest x)) (f (rest x)) (first x)))","user":"6087cb25e4b0ae75613dced8"},{"code":"(fn [x] ( nth x (- (count x) 1)))","problem":19,"user":"4e8da0bf535d65386fec2138"},{"code":"(fn seqer [seqq]\n  (if (= (count seqq) 1)\n    (first seqq)\n    (seqer (rest seqq))))","problem":19,"user":"5385f67be4b06839e8705f0c"},{"problem":19,"code":"(fn lst1 [x] (nth x (dec (count x))))","user":"567d70b6e4b05957ce8c61c8"},{"problem":19,"code":"(fn motherfucker [x]\n  (nth x (dec (count x)))\n)","user":"57f02543e4b0bfb2137f5beb"},{"problem":19,"code":"(fn [x] (let [pos (- (count x) 1)] (nth x pos)))","user":"562d7854e4b0a45d2ff8301d"},{"code":"(fn ana\n   ([[x & xs]] (if (nil? xs)\n                 x\n                 (ana (vec xs)))))","problem":19,"user":"50b09833e4b009df37c708bd"},{"code":"(fn [s]\n  (loop [sprime s]\n    (let [sprimerest (rest sprime)]\n      (if (empty? sprimerest)\n        (first sprime)\n        (recur sprimerest)))))","problem":19,"user":"4fceef7ae4b03432b189f40a"},{"code":"(fn [numero]\n  (first(reverse numero)\n  )\n)","problem":19,"user":"4eb9af9f535dfed6da9c6d59"},{"problem":19,"code":"(fn [ls] (peek (vec ls)))","user":"546d41bde4b00cfc9eacc18c"},{"code":"(fn [x](if (next x)(recur (next x))(first x)))","problem":19,"user":"4e692c0d535d8ccf87e9fe99"},{"problem":19,"code":"(fn [seq] (reduce (fn [s e] e) seq))","user":"53403f42e4b085b17e897da8"},{"problem":19,"code":"#(->> %1 reverse first)","user":"58969420e4b00487982d52a4"},{"code":"(fn my-last [seq]\n  (cond (empty? seq) nil\n        (= 1 (count seq)) (first seq)\n        :else (my-last (rest seq))))","problem":19,"user":"4e7542b5535d7a570dd295c0"},{"problem":19,"code":"#(nth % (dec(count %))   )","user":"5e010e6fe4b0a607a9a45d34"},{"problem":19,"code":"(fn [s]\n  (loop [[elem & remaining] s]\n    (if (nil? remaining)\n      elem\n      (recur remaining))))","user":"5f6f461ae4b02876ed9fd06f"},{"problem":19,"code":"(fn [s] (nth(take-last 1 s)0))","user":"5474df6ee4b0c51c1f4d7290"},{"problem":19,"code":"#(loop [[x & xs] %] (if (empty? xs) x (recur xs)))","user":"5602f72fe4b04bb52996e1ae"},{"problem":19,"code":"(fn [the-seq]\n  (first (drop (- (count the-seq) 1) the-seq)))","user":"5d6eaa58e4b04d129b00f2cd"},{"problem":19,"code":"#(loop [ll %1]\n      (if (= 1 (count ll))\n        (first ll)\n        (recur (rest ll)))\n        )","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":19,"code":"(fn  [s]\n         (if (next s)\n           (recur (next s))\n           (first s)))","user":"56585dbce4b0f9d632dd84b3"},{"problem":19,"code":"#(reduce (fn [_ v] v) %)","user":"57afd36de4b0fbc9809a273c"},{"problem":19,"code":"(fn a [x] (if (= (count x) 1) (first x) (a (rest x))))","user":"5521c33ce4b0882d96d0919a"},{"problem":19,"code":"(fn [lst] (reduce (fn [a b] b) lst))","user":"5912477be4b0163c97b36eec"},{"code":"(fn\n  [l]\n  (nth l (dec (count l))))","problem":19,"user":"4e8a0c82535d3e98b802328d"},{"problem":19,"code":"(fn [my-list] \n  (loop [first-number -500 remaining my-list]\n    (if (empty? remaining) \n      first-number \n      (let [[first-number & rest] remaining] \n        (recur first-number rest)))))","user":"53b07a73e4b047364c044485"},{"problem":19,"code":"(fn last-element [s] (nth s (dec(count s))))","user":"5e568ccde4b027a2e10ac0fb"},{"problem":19,"code":"(fn [seq]\n  (loop [vals seq]\n    (let [[head & tail] vals]\n\t\t(if (empty? tail)\n          \thead\n          \t(recur tail)\n          )\n      )\n    )\n  )","user":"54a82726e4b09f271ff37ca0"},{"code":"(fn [s] \r\n  (cond (= 1 (count s))(first s)\r\n        :else (recur (rest s))))","problem":19,"user":"4de26537535d08e6dec9fde9"},{"problem":19,"code":"(fn last_seq [coll]\n (nth coll (- (count coll) 1)))","user":"5a51e029e4b05d388ecb6bf0"},{"code":"(fn [the-seq] (-> the-seq reverse first))","problem":19,"user":"4f80a906e4b033992c121bf7"},{"problem":19,"code":"(fn my-last\n  [[x & more]]\n  (if (empty? more)\n    x\n    (my-last more)))","user":"56fda2bae4b08d47c97781a6"},{"problem":19,"code":";(fn [x] (get (vec x) (- (count (vec x)) 1)))\n#(nth % (dec (count %)))","user":"5bf313e8e4b0a6d31fed2188"},{"code":"(fn [l] (first (drop (- (count l) 1) l)))","problem":19,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":19,"code":"(fn [seq]\n  (loop [my-seq seq]\n    (if (= 1 (count my-seq))\n      (first my-seq)\n      (recur (rest my-seq)))))","user":"5b1ec003e4b03cfeda66ed13"},{"code":"(fn lasts [x]\n  (first (reverse x)))","problem":19,"user":"509fa9b5e4b08df8156e9e3f"},{"code":";; my solution\n; (fn [x] (first (reverse x)))\n;; using comp - x89's solution\n; (comp first reverse)\n;; using composition of peek and vectorization\n;; (comp peek vec)\n;; this fails because persistent lists are not reversible\n; (fn[x] ((comp first rseq) x))\n;; adding check for reversibility\n(fn [x] (if (reversible? x) ((comp first rseq) x) (first (reverse x))))","problem":19,"user":"52e753abe4b09f7907dd1484"},{"problem":19,"code":"(fn [n] \n  (if (> (count n) 1) \n    (recur (rest n)) \n    (first n)))","user":"598216d9e4b021a7a535fdf8"},{"problem":19,"code":"(fn end [[n & more]] (if more (recur more) n))","user":"543b7456e4b032a45b86932f"},{"problem":19,"code":"(fn lastel [li] (if (= 1 (count li))\n                  (first li)\n                  (lastel (rest li))))","user":"5b240de0e4b063e2438bcc0f"},{"problem":19,"code":"(fn [args] \n  (loop [[current & remainder] args]\n    (if (empty? remainder)\n      current\n      (recur remainder))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":19,"code":"(fn [x]\n  (if (second x)\n    (recur (rest x))\n    (first x)))","user":"55f2d4ede4b06e875b46ce4c"},{"problem":19,"code":"(fn [coll] (loop [[elm & rest] coll] (if (nil? rest) elm (recur rest))))","user":"55750e49e4b05c286339e05c"},{"problem":19,"code":"(fn [seq1] (first (reverse seq1)))","user":"58f1971ce4b08e1cf3471cee"},{"code":"(fn looping [coll] (if-not (next coll) (first coll) (looping ( rest coll))))","problem":19,"user":"513bafa4e4b04402f587b77c"},{"code":"(fn get-last [x] (if (= (count x) 1) (first x) (get-last (rest x))))","problem":19,"user":"4e644410535d8ccf87e9fe6a"},{"code":"(fn last-element \n  [xs] \n  (let [[x & xs] xs] \n    (if (empty? xs) \n      x \n      (last-element xs))))","problem":19,"user":"512c0000e4b03a42b6300231"},{"code":"(fn [element]\n  (first (reverse element)))","problem":19,"user":"4f480eafe4b0d56e7bb92bcf"},{"problem":19,"code":"#(if (= 1 (count %))\n   ( first %)\n   (recur (rest %)))","user":"579fb6c2e4b0264b925669fd"},{"problem":19,"code":"(fn [x] ((vec x) (dec (count x))))","user":"5575aae2e4b05c286339e065"},{"code":"(fn f1 [arg] (if (= (rest (rest arg)) ())\n               (first (rest arg))\n               (f1 (rest arg))))","problem":19,"user":"511f656ae4b085952a83535e"},{"problem":19,"code":"#(first (reverse %))\n;(fn [x] (first (reverse x)))\n;#(-> % reverse first)","user":"54dce6dbe4b024c67c0cf78d"},{"problem":19,"code":"(fn [mylist] (let [n (count mylist)] (nth mylist (- n 1))))","user":"5a26c828e4b07f18be40aa4b"},{"code":"(fn\n  [[x & rest]]\n  (if (empty? rest)\n    x\n    (recur rest)))","problem":19,"user":"516d2460e4b06f078fab252e"},{"code":"(fn my-last [x] (if (= (rest x) '()) (first x) (my-last (rest x))))","problem":19,"user":"4f039524535dcb61093f6b2c"},{"problem":19,"code":"(fn [[n & m]]\n     (if m (recur m)\n             n))","user":"55deeface4b050e68259b3ea"},{"problem":19,"code":"(fn [v] ( nth  v (- ( count v) 1)) )","user":"5a455ddde4b05d388ecb6b3b"},{"problem":19,"code":"(fn [x] \n(nth x (dec (count x))) )","user":"54f315fae4b050824f58f5b9"},{"problem":19,"code":"(fn [l] (let [result l] (if (= (count l) 1) (first result) (recur (rest l)))))","user":"55c98647e4b0e31453f649ed"},{"problem":19,"code":"(fn [s]\n  (if (next s)\n    (recur (next s))\n    (first s)\n    ))","user":"562fd7f6e4b0ab312c17ebe0"},{"code":"(fn l [xs]\n   (let [c (count xs)]\n     (if (> c 1)\n       (l (rest xs))\n       (first xs))))","problem":19,"user":"4f7251eee4b07046d9f4f02e"},{"problem":19,"code":"(fn [coll] (loop [coll coll]\n                 (if (next coll)\n                 (recur (next coll))\n                 (first coll))\n             ))","user":"5422c959e4b01498b1a71ac7"},{"problem":19,"code":"#(-> % (count) (dec) (drop %) (first))","user":"5ab38af0e4b073f177442601"},{"code":"(fn lastOne [list]\r\n  (if (= (count list) 1)\r\n  (first list)\r\n    (lastOne (rest list))))","problem":19,"user":"4fa313bbe4b081705acca188"},{"problem":19,"code":"(fn r [x] (if \n            (= (count x) 1)\n            (first x)\n            (r (rest x))))","user":"53daca15e4b0e771c30254a9"},{"problem":19,"code":"(fn f [a]\n  (first (reverse a)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":19,"code":"(fn [list]\n  (loop [list-items list]\n    (if (nil? (next list-items))\n    (first list-items)\n    (recur (next list-items))\n    )\n  )\n)","user":"57d9a1b0e4b0bd073c202403"},{"problem":19,"code":"(fn z [s]\n (if (next s)\n  (recur (next s))\n  (first s)))","user":"559279b7e4b0604b3f94d58c"},{"problem":19,"code":"reduce #(identity %2) nil","user":"59ddae03e4b01968742fed65"},{"code":"(fn [coll]\n  (let [len (count coll)]\n    (nth coll (dec len))))","problem":19,"user":"53560560e4b04ce2eb3ed25f"},{"problem":19,"code":"(fn [k] (nth k (- (count k) 1)))","user":"569ce6fee4b0542e1f8d146c"},{"problem":19,"code":"(fn my-last [x]\n\t(first (reverse x)))","user":"5676de0fe4b05957ce8c615d"},{"code":"(fn [[h & t]]\n  (if-let [s (seq t)]\n    (recur s)\n    h))","problem":19,"user":"500574d9e4b0678c553fc463"},{"problem":19,"code":"(fn _last [x]\n  (if (= (count x) 1)\n    (first x)\n    (recur (rest x))))","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn [x] \n  (loop [x x]\n    (if (= 1 (count x))\n      (first x)\n      (recur (rest x))\n    )\n  )\n)","problem":19,"user":"4fc5273ce4b081705acca37f"},{"code":"(fn [lst] \n  (if (next lst)\n    (recur (next lst))\n    (first lst)))","problem":19,"user":"51a1c67ae4b00957e520db76"},{"problem":19,"code":"(fn get-last\n  [x]\n  (let [[f & rest] x\n        item-count (count rest)]\n    (if (= 0 item-count)\n      f\n      (get-last rest))))","user":"53cf278ce4b00fb29b2212fb"},{"problem":19,"code":"(fn [l] (let [len (count l)]\n          (nth l (dec len))))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"(fn l [c]\n  (if (nil? (next c))\n    (first c)\n    (l (rest c))))","problem":19,"user":"5042bb9ae4b034ff00315d16"},{"problem":19,"code":"(fn [coll]\n  (loop [stack coll\n         last-one 0]\n    (if (empty? stack)\n      last-one\n      (recur (rest stack) (first stack)))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"(fn get-last [collection] (nth collection (- (count collection) 1)))","problem":19,"user":"5383b929e4b06839e8705ee7"},{"code":"(fn [coll]\n  (if (empty? (rest coll))\n     (first coll)\n     (recur (rest coll))))","problem":19,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":19,"code":"#(first (take-last  1 %))","user":"562326cbe4b03f08ee9a9230"},{"problem":19,"code":"(fn find-last [x] (if (= '() (rest x)) (first x) (find-last (rest x))))","user":"5752caa9e4b02ea11479929f"},{"problem":19,"code":"reduce (fn[a b] b)\n(comp first reverse)","user":"5bdb5727e4b0ed4b8aab4c19"},{"problem":19,"code":"(fn [xs] (-> (seq xs)\n             (reverse)\n             (first)))","user":"595d224de4b066ee0a44b016"},{"problem":19,"code":"(fn [x] (reduce #(first [%2]) :a x))","user":"54202a4fe4b01498b1a71a9f"},{"problem":19,"code":"(fn [listI] (first (reverse listI)))","user":"5c642102e4b0fca0c1622670"},{"code":"#(nth %(dec(count %)))","problem":19,"user":"4e6ab8d8535d8ccf87e9fefd"},{"code":"(fn lst [s]\r\n           (if (next s)\r\n             (recur (next s))\r\n             (first s)))","problem":19,"user":"4f68a9bbe4b07046d9f4ef79"},{"code":"(fn lol [x]\n  (first\n    (reverse x)))","problem":19,"user":"4f8db862e4b02e764a0a51b2"},{"code":"(fn [seq]\n  (loop [cur-seq1 seq]\n    (if (<= (count cur-seq1) 1)\n      (first cur-seq1)\n      (recur (rest cur-seq1)))))","problem":19,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(comp first reverse )","problem":19,"user":"50bfe725e4b080409b860f26"},{"code":"(fn f [[a & b]]\r\n  (if b\r\n    (f b)\r\n    a))","problem":19,"user":"4ee1f2ba535d10e5ff6f535f"},{"code":"(fn [x]\n  (if (empty? x) \n    nil     \n    (first (reverse x))\n  ) \n)","problem":19,"user":"4fe79ebce4b07c9f6fd12c37"},{"problem":19,"code":"#(loop [r %\n               e nil]\n          (let [n (next r)]\n            (if n\n              (recur n (first n))\n              e)))","user":"5beadeb5e4b0f319e2d7ec88"},{"code":"#((vec %) (- (.length (vec %)) 1))","problem":19,"user":"4e7e8684535db169f9c79717"},{"code":"(fn last-x [x] (first (reverse x)))","problem":19,"user":"4eb7b049535d7eef30807377"},{"code":"(fn [col] (nth col (- (count col) 1) ))","problem":19,"user":"51db0aefe4b06aa4d4669a9c"},{"problem":19,"code":"(fn [x]\n  (loop [l x n (first x)]\n    (if (empty? l)\n      n\n      (recur (rest l) (first l)))))","user":"5590e55de4b0277789237676"},{"code":"(fn get-my-last \r\n  [n]\r\n  (if (> (count n) 1)\r\n    (recur (rest n))\r\n    (first n)))","problem":19,"user":"4eb9d430535dfed6da9c6d5f"},{"problem":19,"code":"(fn get-last [coll] (first (reverse coll)))","user":"5f870432e4b0649ffcda4cae"},{"problem":19,"code":"(fn [s]\n  (loop [elems s]\n    (if (empty? (rest elems))\n    \t(first elems)\n    \t(recur (rest elems)))))","user":"5cc7073de4b0ccb06196282e"},{"code":"(fn l [x] (if (= '() (rest x)) (first x) (l (rest x))))","problem":19,"user":"4ded582d535d08e6dec9fe0c"},{"problem":19,"code":"reduce (fn [ac b] b)","user":"597780c7e4b01722bebd4cf1"},{"code":"(fn[x] (loop [remainder x]\n          (if (= 1 (count remainder))\n            (first remainder)\n            (recur (rest remainder)))))","problem":19,"user":"52e669d7e4b09f7907dd1475"},{"problem":19,"code":"(fn my_lst [seq]\n  (if (= (count seq) 1) (first seq) (my_lst (rest seq))))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":19,"code":"(fn [x] (nth (seq x) (dec(count (seq x)))))","user":"5a2e638be4b09cafd31c7f7a"},{"code":"(fn f [l] (if (> (count l) 1) (f (rest l)) (first l)))","problem":19,"user":"5241ea66e4b076e5d3121f39"},{"problem":19,"code":"(fn [sequenc] (first (reverse sequenc)))","user":"58fbdec9e4b0438e51c2cf84"},{"problem":19,"code":"#(loop [l %] \n  (if (= 1 (count l))\n    (first l) \n    (recur (rest l))))","user":"5a071cb2e4b01bb0ae8afdd8"},{"problem":19,"code":"(fn getlast [x] (if (= 1 (count x)) (first x) (getlast (rest x))))","user":"53e2b212e4b036ad0777e3f4"},{"code":"(fn get_last [list]\n  (let[x (first list)\n      xs (rest list)]\n    (if (empty? xs)\n        x\n        (recur xs))))","problem":19,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":19,"code":"(fn [coll]\n  (first (take-last 1 coll)))","user":"54a80855e4b09f271ff37c9e"},{"problem":19,"code":"(fn [lst] (nth lst (dec (count lst)) ))","user":"56804d03e4b0966858e4d8ec"},{"problem":19,"code":"(fn [x] (nth x (- (count x ) 1)))","user":"55ded9fde4b050e68259b3e7"},{"problem":19,"code":"(fn [x] \n  (if (empty? (rest x))\n    (first x)\n    (recur (rest x))))","user":"5490a24be4b0b312c081ff33"},{"problem":19,"code":"(fn llast\n  [list]\n  (let [[h & t] list]\n    (loop [head h\n           tail t]\n      (if (empty? tail)\n        head\n        (do\n          (let [[nh & nt] tail]\n            (recur nh nt)))))))","user":"5ca125a5e4b048ec896c5b79"},{"code":"#(let [nl (dec (count %))] (nth % nl))","problem":19,"user":"53445876e4b084c2834f4a29"},{"code":"(fn lst [s] \n  (first (reverse s)))","problem":19,"user":"4f8d6615e4b02e764a0a51ae"},{"problem":19,"code":"(fn\n  [s]\n  ((comp first reverse) s))","user":"5ba28f36e4b0a20761a233c4"},{"code":"(fn f [s]\n  (if (= (count s) 1)\n    (first s)\n    (f (rest s))))","problem":19,"user":"4f038484535dcb61093f6b07"},{"code":"(fn get-last [s] (if (> (count s) 1) (get-last (rest s)) (first s)))","problem":19,"user":"4fea2de5e4b0140c20fb9bfe"},{"code":"(fn [elements]\n   (nth elements (- (count elements) 1))\n   )","problem":19,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn seelast [lst] \n  (cond\n   (empty? (rest lst)) (first lst)\n   :else (seelast (rest lst))))","problem":19,"user":"5150a7ece4b03e678e393abc"},{"problem":19,"code":"(fn return-last-element\n  [collection]\n  (first (reverse collection)))","user":"60522feae4b0af2ba86d5a0a"},{"problem":19,"code":"(fn l [s] (if (= (count s) 1) (first s) (l (rest s))))","user":"561d506ee4b064ca9f4b16aa"},{"problem":19,"code":"(fn a [x] (if (= (rest x) [])\n            (first x)\n            (a (rest x))))","user":"54fbe605e4b07d26eda61d24"},{"problem":19,"code":"(fn [sequence0]\n  (if (= (seq (rest sequence0)) nil)\n  \t(first sequence0)\n  \t(recur (rest sequence0))))","user":"5939e726e4b069cdc2982b45"},{"code":"(fn\n  [l]\n  (loop [li l]\n  (if (= 1 (count li)) \n    (first li)\n    (recur (rest li)))\n  ))","problem":19,"user":"53663e82e4b0243289761e73"},{"code":"(fn [c] \n  (if (next c)\n\t\t(recur (next c))\n\t\t(first c)\n\t)\n)","problem":19,"user":"4e53ea3f535d8a8b8723a277"},{"code":"#(reduce (fn [a b] (identity b)) %1)","problem":19,"user":"51b08df5e4b0c53cf2e68a67"},{"problem":19,"code":"(fn [lst]\n  (let [lst-rest (next lst)\n        current (first lst)]\n    (if (nil? lst-rest)\n      current\n      (recur (next lst)))))","user":"5be4e6e8e4b0ed4b8aab4d06"},{"problem":19,"code":"(fn [coll]\n  (if-let [coll-next (next coll)]\n    (recur (next coll))\n    (first coll)))","user":"582e0afde4b051871117bfd5"},{"code":"(fn [coll] (get (vec coll) (- (count coll) 1)))","problem":19,"user":"51aa7298e4b04e3dc0c27b28"},{"problem":19,"code":"(fn [x] (nth x \n  (- (count x) 1)))","user":"5e18bd30e4b0dc95940084fa"},{"problem":19,"code":"(fn my-last [s] \n  (if (= 1 (count s))\n    (first s)\n    (recur (rest s))))","user":"590253e3e4b0438e51c2d055"},{"problem":19,"code":"(fn [s] (let [r (rest s)] (if (seq r) (recur r) (first s))))","user":"587ad5aae4b01531a375eaf0"},{"code":"(fn lst [x]\n  (if (= nil (next x))\n    (first x)\n    (lst (next x))))","problem":19,"user":"4f2acd70e4b0d6649770a041"},{"problem":19,"code":"(fn [a-seq]\n  (if (= (rest a-seq) '())\n    (first a-seq)\n    (recur (rest a-seq))))","user":"5cea0d52e4b0a17bb84e2bca"},{"code":"(fn[s] (-> s reverse first))","problem":19,"user":"4dd76bf9535d2dad7130b5d1"},{"code":"(fn get-last [x]\n    (if (= (count x) 1)\n        (first x)\n        (get-last (rest x))))","problem":19,"user":"53201eece4b08068f379edce"},{"code":"(fn my-last [col] (if (= (count col) 1) (first col) (my-last (rest col))))","problem":19,"user":"504e9e09e4b069badc5a33bc"},{"problem":19,"code":"(fn [ls] \n                       (let [[x & xs] ls] \n                         (if (= xs nil) \n                           x \n                           (recur xs))))","user":"5c6e04b5e4b0fca0c1622743"},{"code":"(fn sidste[s] \n  (if (= (rest s) [])\n    (first s) \n    (sidste(rest s))\n  )\n)","problem":19,"user":"4eef0828535d305ff5cb7f18"},{"problem":19,"code":"(fn f [[a & b]] (if b (f b) a))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn l [items] \n  (if (> (count items) 1)\n     (l (rest items))\n  (first items)\n  )\n)","problem":19,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":19,"code":"(fn [x] (nth x(dec(count x))))","user":"554b8b7ae4b0a04f7929958e"},{"problem":19,"code":"(fn [MyLast] (first (reverse MyLast)))","user":"55769940e4b05c286339e070"},{"problem":19,"code":"(fn get-last-out [sequence] (nth sequence (dec (count sequence))))","user":"597b1a96e4b02382a38ad1f1"},{"code":"#(let [tail (next %)] (if tail (recur tail) (first %)))","problem":19,"user":"4e6a82ba535d8ccf87e9feef"},{"problem":19,"code":"(fn f [x]\n  (if (empty? (rest x))\n    (first x)\n    (f (rest x))))","user":"550af207e4b06e50f9beb136"},{"code":"(fn end-element [sequ]\n  (if (= (rest sequ) '())\n    (first sequ)\n    (end-element (rest sequ))))","problem":19,"user":"520b036be4b0b022ef140c73"},{"problem":19,"code":"(fn my-last [lst] (case (count lst) 0 nil 1 (first lst) (my-last (rest lst))))","user":"5ac797a2e4b0e27600da7789"},{"code":"(fn [l] (if (empty? (rest l)) (first l) (recur (rest l))))","problem":19,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"#(nth(reverse %) 0)","problem":19,"user":"51c1b644e4b0d204dbe2ca12"},{"code":"(fn lastElement [x] (if (next x) (lastElement (rest x)) (first x)))","problem":19,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":19,"code":"(fn lastF\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (next lst)\n      (lastF (rest lst))\n      (first lst))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [sequence]\n  (loop [s (rest  sequence), x (first sequence)]\n    (cond (empty? s) x\n          :else (recur (rest s) (first s)))))","problem":19,"user":"538e36c7e4b0b51d73faae81"},{"problem":19,"code":"#(first (drop (- (count %) 1)% ))","user":"5da07698e4b000c986472bd3"},{"code":"(fn [m] (reduce (fn [x y] y) m))","problem":19,"user":"4fe8da4de4b0547ebccb2429"},{"code":"(fn get-last [a] (nth a \n                     (- (count a) 1)))","problem":19,"user":"51554aade4b06c5f6a1490a3"},{"problem":19,"code":"(fn [[i & j]]\n  (if (empty? j)\n    i\n    (recur j)))","user":"57a2bb9be4b0c3d858beb905"},{"problem":19,"code":";#(nth % (- (count %) 1))\n(fn thelast [x] \n  (if (empty? x) x\n    (if (empty? (rest x)) (first x)\n        (thelast (rest x))\n    )\n  )\n)","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":19,"code":"(fn mytail [lst] (if (= 1 (count lst)) (first lst) (mytail (rest lst))))","user":"5c250772e4b07e362c2305aa"},{"code":"(fn r [[x & xs]] (if (nil? xs) x (r xs)))","problem":19,"user":"4e71705e535d5021c1a89649"},{"code":"(fn foo [list]\n  (if (empty? (rest list))\n    (first list)\n    (foo (rest list))))","problem":19,"user":"500850f4e4b028e089d3518b"},{"problem":19,"code":"(fn [z] ((comp first reverse) z))","user":"60567b22e4b069ae89ce6ad8"},{"problem":19,"code":"(fn myLast [y] \n\t\t\t(if\n\t\t\t\t(= (rest y) '())\n\t\t\t\t(first y)\n\t\t\t\t(myLast (rest y))\n\n\t\t\t\t)\n\t      )","user":"56ba5ffde4b0f26550335944"},{"code":"(fn [x] \n  (.get x \n       (dec (count x))\n       )\n  )","problem":19,"user":"51e3272ce4b0c611d6113e40"},{"problem":19,"code":"(fn goodlast [s]\n  (reduce (fn [a b] b) s))","user":"5d929ceae4b0915913b1d412"},{"code":"(fn [x]\n  (nth x (- (count x) 1) )\n)","problem":19,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":19,"code":"(fn [s] \n  (loop [seqeunce s]\n        (if (= (count seqeunce) 1)\n            (first seqeunce)\n            (recur (rest seqeunce))\n        )\n    )\n)","user":"57dd2c99e4b0bd073c20243c"},{"code":"(fn [x]\n  (if (= (count x) 1)\n    (first x)\n    (recur (next x))))","problem":19,"user":"52ce4cafe4b07d0d72b2738e"},{"code":"(fn [coll]\r\n  (nth coll (- (count coll) 1)))","problem":19,"user":"4dd9514a535d2dad7130b5dc"},{"code":"(fn __ [l] (nth l (- (count l) 1)))","problem":19,"user":"4f9f854be4b0dcca54ed6d38"},{"code":"(fn [seq] \n  (if (empty? (rest seq))\n    (first seq)\n    (recur (rest seq))))","problem":19,"user":"4ee446b1535d10e5ff6f5376"},{"code":"(fn [a] (let [[x & more] a] (if (seq more) (recur more) x ) ))","problem":19,"user":"4e6f8431535d5021c1a8961e"},{"code":"(fn my_last [x] (if (empty? (rest x)) (first x) (my_last (rest x))))","problem":19,"user":"51ddcd9ae4b0de53e6370c49"},{"code":"(fn [s] (first (reverse (seq s))))","problem":19,"user":"4fe8f0c3e4b0547ebccb2433"},{"problem":19,"code":"(fn f [v] (if (= [] (rest v)) (first v) (f (rest v))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":19,"code":"(fn myloop [x]\n  (loop [v x l 0] \n    (if (empty? v)\n      l\n      (recur (rest v) (first v)))))","user":"56f5e6d5e4b046a417f92079"},{"code":"(fn [xs] (first(reverse xs)))","problem":19,"user":"4fc4f347e4b081705acca35d"},{"problem":19,"code":"(fn last-element [s] (if (= (second s) nil) (first s) (last-element (rest s))))","user":"579bf7e3e4b05b1deef9ae01"},{"code":"(fn my-last [x] \n  (if (next x)\n    (my-last (next x))\n    (first x)))","problem":19,"user":"50ab38a8e4b0f65d68208507"},{"problem":19,"code":";; count the number of items in the list\n\n;; (count %)\n\n;; get the index of the last item\n\n;; ((dec (count %))\n\n;; get the nth value of that last index\n\n#(nth % (dec (count %)))","user":"546c6a47e4b00cfc9eacc179"},{"code":"(fn x [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4ffcff73e4b0678c553fc3df"},{"problem":19,"code":"(fn [seq] \n  (first(reverse seq)))","user":"5e8308abe4b09a7a73c8bbb4"},{"problem":19,"code":"(fn mylast\n  [x]\n  \t(nth x ((comp #(- % 1) count) x)))","user":"5e6834e0e4b04793f195eaf9"},{"problem":19,"code":"(fn mylast [x]\n  (if (empty? (rest x))\n    (first x)\n    (mylast (rest x))))","user":"54f4c78fe4b0f2f3c5226e8b"},{"problem":19,"code":"(fn \n  [x] ( if (= (count x) 1) (first x) (recur (rest x)) ))","user":"55300ea8e4b076ab5578f80b"},{"code":"(fn [[x & xs]] \n  (if (empty? xs) \n    x \n    (recur xs)))","problem":19,"user":"5112bc49e4b0350614f07a7d"},{"code":"(fn [eles] (if (empty? (rest eles)) (first eles) (recur (rest eles))))","problem":19,"user":"527ed32ce4b0757a1b1713b5"},{"problem":19,"code":"(fn [coll]\n  (nth coll (- (count coll) 1))\n )","user":"5de6484ce4b0986d99407f66"},{"problem":19,"code":"#(loop [vs %] \n   (if (= 1 (count vs)) \n     (first vs) \n     (recur (rest vs))\n     ))","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":19,"code":"(fn [s] (nth s (dec' (count s))))","user":"57741d00e4b0979f896515f7"},{"code":"(fn last-item [list]\n(if (= (count list) 1) (first list) (last-item (rest list))))","problem":19,"user":"4f74fed2e4b0fbe0118ec553"},{"code":"(fn [l]\n    (first (reverse l)))","problem":19,"user":"4e137349535d04ed9115e7d9"},{"problem":19,"code":"(fn las [l]\n  (if (= '() (rest l))\n    (first l)\n    (las (rest l))))","user":"5884f377e4b0f1effa3b76a8"},{"problem":19,"code":"(fn last-in-coll [coll & current]\n  (if (next coll)\n    (last-in-coll (vec (rest coll)) (first (next coll)))\n    (first current)\n  )\n)","user":"5f96fa49e4b0715f5002d7e9"},{"code":"(fn [coll] (reduce (fn [x y] y) coll))","problem":19,"user":"4fb73af2e4b081705acca2d0"},{"code":"(fn ([x] (first (reverse x))))","problem":19,"user":"4dbf7a31535d020aff1edf75"},{"problem":19,"code":"(fn [coll] (let [x (first coll) xs (seq (rest coll))] (if xs (recur xs) x)))","user":"552ed75ae4b076ab5578f7f9"},{"code":"reduce (fn [i j] j)","problem":19,"user":"51eab308e4b0f1f103a0d150"},{"code":"#(first (rseq (vec %)))","problem":19,"user":"4e46e4d0535dc968683fc4b8"},{"code":"(fn\n  [coll]\n  (first (reverse coll))\n)","problem":19,"user":"53951c75e4b0b51d73faaed4"},{"code":"(fn foo [list] \n  (if (> (count (rest list)) 0)\n    (foo (rest list))\n    (first list)\n  )\n)","problem":19,"user":"4e9b87b8535dbda64a6f6b78"},{"code":"(fn last-x [x] \n  (if (not-empty (rest x))\n    (last-x (rest x))\n    (first x)))","problem":19,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn lst [[a & rest]]\n  (if rest\n    (lst rest)\n    a))","problem":19,"user":"5280d4bbe4b0757a1b171415"},{"code":"(fn mylast [sequence]\n\t(if (= (count sequence) 1 )\n\t\t(first sequence)\n\t\t(mylast (remove #{(first sequence)} sequence ) ) \n    ) \n)","problem":19,"user":"528ba6a2e4b0239c8a67aea4"},{"code":"(fn getLast [x] \n  (if (= '() (rest x))\n    (first x)\n    (getLast (rest x))))","problem":19,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn last-elem [[x & rest]] (if rest (last-elem rest) x))","problem":19,"user":"518696c1e4b0c40be512d708"},{"problem":19,"code":"(fn lala [x] \n  (if (= (count x) 1)\n    (first x)\n    (lala (rest x))\n    ))","user":"559b7c65e4b066d22e731f55"},{"problem":19,"code":"(fn [x]\n(reduce (fn [a b]\nb) x))","user":"5ce5277de4b0a17bb84e2b6a"},{"problem":19,"code":"(fn [coll]\n  (nth \n   coll \n   (- (count coll) 1)))","user":"60b79ed6e4b0e0fa5f1b4250"},{"code":"(fn mylast [s] (if (= nil (next s)) (first s) (mylast (rest s))))","problem":19,"user":"4e131443535d04ed9115e7d3"},{"code":"#(reduce (fn [o n] n) %)","problem":19,"user":"51583ee4e4b0a069fd272c72"},{"code":"(fn [x](first( reverse x)))","problem":19,"user":"52f3124ee4b05e3f0be25f0a"},{"code":"(fn lst [s] (cond (= (first (rest s)) nil) (first s)\n              :else (lst (rest s))))","problem":19,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn my-last [lst] (nth lst (- (count lst) 1)))","problem":19,"user":"511937eee4b055cfb310d495"},{"code":"(fn final [x]\n  (if (nil? (next x))\n    (first x)\n    (final (rest x))))","problem":19,"user":"4e505bec535dc968683fc4eb"},{"problem":19,"code":"#((comp peek vec) %)","user":"5ce56455e4b0a17bb84e2b71"},{"code":"(fn mylast [l] (if (empty? (rest l)) (first l) (mylast (rest l))))","problem":19,"user":"4e234e72535d04ed9115e822"},{"code":"(fn laste [s] (if (next s)(recur (next s)) (first s)))","problem":19,"user":"4e6ac593535d8ccf87e9ff02"},{"problem":19,"code":"(fn [x] \r\n  (let [len (count (seq x))]\r\n  (nth (seq x) (- len 1)))\r\n)","user":"56e277a4e4b03a7c14b85a35"},{"problem":19,"code":"(fn[x] (nth x (-(count x) 1)))","user":"554ccc3ae4b0a04f792995af"},{"problem":19,"code":"(fn [a-seq]\n  (if (next a-seq)\n    (recur (next a-seq))\n    (first a-seq))\n  )","user":"560e230de4b05f002753df4a"},{"code":"(fn [x]\n  (if (vector? x) (x (- (count x) 1))\n                  (nth x (- (count x) 1))))","problem":19,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":19,"code":"reduce (fn red [y z] z)","user":"55f80372e4b06e875b46ceb9"},{"code":"(fn tail [seq] \n  (if (empty? (rest seq))\n        (first seq)\n        ;else\n        (tail (rest seq))    \n    )\n  )","problem":19,"user":"501b4af5e4b0ae3ec3946093"},{"problem":19,"code":"(fn [XS] (nth XS (dec (count XS))))","user":"5df7effbe4b0a607a9a45c9f"},{"problem":19,"code":"#(if (== 1 (count %)) (first %) (recur (rest %)))","user":"5c950334e4b048ec896c5a44"},{"problem":19,"code":"#(loop [[head & tail] %]\n   (if (nil? tail)\n     head\n     (recur tail)))","user":"56685a73e4b04acd4f672de5"},{"code":"(fn [ls]  (first (reverse ls)))","problem":19,"user":"4ee4ad77535d1385b2869d81"},{"code":"(fn [l] \n  (if (empty? (rest l))\n    (first l)\n    (recur (rest l))))","problem":19,"user":"51515a19e4b03e678e393acc"},{"code":"#(let [c (dec (count %))] (nth % c))","problem":19,"user":"4f3546dce4b0e243712b1ebe"},{"code":"(fn lastseq [x] \n  (if (next x)\n     (recur (next x))\n     (first x)\n     ))","problem":19,"user":"51d328f8e4b099f3b6acddfb"},{"problem":19,"code":"(fn[thelist](first (reverse thelist)))","user":"564f3af6e4b0284900eef6a9"},{"code":"(fn gief [list] (first (reverse list)))","problem":19,"user":"50989cbbe4b04e098a4c7275"},{"problem":19,"code":"#(-> %\n     reverse\n     first\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":19,"code":"(fn [xs]\n  (if (empty? (rest xs)) \n    (first xs) \n    (recur (rest xs))))","user":"57d9cae9e4b0bd073c202409"},{"code":"(fn [coll]\n  (if (nil? (next coll))\n    (first coll)\n    (recur (next coll))))","problem":19,"user":"4dbd72d0535d020aff1edf43"},{"code":"#(if (< (count %) 2)\n    (first %)\n    (recur (rest %)))","problem":19,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn [v] (let [c (count v)] (nth v (dec c))))","problem":19,"user":"521d709ae4b050d5da0427ef"},{"problem":19,"code":"(fn foo [x] (if (= 1 (count x))\n                             (first x)\n                             (foo (rest x)))\n\n                        )","user":"565b372ee4b068f2fe63dc00"},{"code":"#(if (= (next %) nil) (first %) (recur (rest %)))","problem":19,"user":"4e6acc33535d8ccf87e9ff05"},{"code":"reduce (fn [agg elem] elem) [1 2 3 4]","problem":19,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn ll\n  [x]\n\n(if (empty? (rest x))\n        (first x)\n        (ll (rest x))\n      )\n  )","problem":19,"user":"4f0df199535d0136e6c2231e"},{"problem":19,"code":"(fn [[head & tail]]\n  (if tail\n  (recur tail)\n  head   ))","user":"5b69529be4b0c6492753e786"},{"problem":19,"code":"(fn [[n & r]] (if r (recur r) n))","user":"5cd1fd2fe4b0ccb0619628f8"},{"problem":19,"code":"(fn [input_list] (first (reverse  input_list)))","user":"57640b2ce4b0994c1922fbe5"},{"code":"(fn [[x & rest]] (if (seq rest) (recur rest) x))","problem":19,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn get_last [x] (if (= (count x) 1) (first x) (get_last (rest x))))","problem":19,"user":"4f84f6c3e4b033992c121c3d"},{"code":"(fn [x](if (vector? x) (peek x) (do 3)))","problem":19,"user":"51c4690fe4b06b70b3e207e1"},{"problem":19,"code":"#(if (= (rest %) '()) (first %) (recur (rest %)))","user":"6090e617e4b03bd49d9f36ce"},{"code":"(fn [l] (nth l (-(count l)1)))","problem":19,"user":"52bf0116e4b07a9af5792328"},{"problem":19,"code":"(fn last-el [s]\n  (if (empty? (rest s))\n    (first s)\n    (last-el (rest s))))","user":"556873cee4b0c656e3ff1853"},{"code":"(fn [aseq]\n  (cond\n   (empty? aseq) '()\n   (empty? (rest aseq)) (first aseq)\n   :else (recur (rest aseq))))","problem":19,"user":"53415755e4b00652c8746ecd"},{"code":"(fn last-item [x] (-> x reverse first))","problem":19,"user":"50392c7ee4b088a6a14ca765"},{"problem":19,"code":"(fn get-last [x]\n  (cond\n   (= 1 (count x)) (first x)\n   :else (get-last (rest x))))","user":"5ae7691ae4b0837691e92caa"},{"problem":19,"code":"#(first(take-last 1 %1))","user":"511036c5e4b04c71fce993ee"},{"problem":19,"code":"(fn last-element\n  [s]\n  (cond\n   (empty? (rest s)) (first s)\n   :else (last-element (rest s))))","user":"5813e208e4b0f478707a061b"},{"problem":19,"code":"(fn mylast [[head & tail]]\n  (if (empty? tail)\n    head\n    (mylast tail)))","user":"5df53ab7e4b03c219ef1a38e"},{"code":"(fn [[n & more]] (if more (recur more) n) )","problem":19,"user":"504f0c08e4b0e7ad84dbc4b1"},{"problem":19,"code":"(fn [ss]\n  (let [n (next ss)]\n  (if (nil? n) (first ss) (recur n))))","user":"5b322858e4b025bcb146f312"},{"code":"(fn r [x] (let [y (rest x)]\n          (cond\n           (empty? y) (first x)\n           :else (r y)\n           )))","problem":19,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"#(nth % (dec (.size %)))","problem":19,"user":"4fe91b62e4b0547ebccb243f"},{"code":"(fn [v]\n  (first (reverse v))\n)","problem":19,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [s] (if (next s) (recur (rest s)) (first s)))","problem":19,"user":"4e6fa38b535d5021c1a89622"},{"code":"(fn get-last [l]\n  (if (== (count l) 1)\n    (first l)\n    (get-last (rest l))))","problem":19,"user":"50046aa8e4b0678c553fc450"},{"code":"(fn mylast [x] (if (first (rest x)) (mylast (rest x)) (first x)))","problem":19,"user":"50cc30c5e4b0f78a8e1645bf"},{"code":"(fn [[x & m]] (if m (recur m) x))","problem":19,"user":"5194ea33e4b05be8c43d2383"},{"problem":19,"code":"(fn red [n] \n\t(if (= 1 (count n)) \n\t\t(nth n 0)\n\t\t(red (rest n))))","user":"4f1b73a9535d64f60314647a"},{"code":"(fn [[head & tail]] \n  (if tail \n    (recur tail)\n    head))","problem":19,"user":"5040b633e4b0ff5d2cc40db3"},{"code":"(fn me [x]\n  (if (= (next x) nil)\n    (first x)\n    (me (next x))))","problem":19,"user":"51ef66a7e4b0871fa145d9a5"},{"code":"#(nth % (- (count %) 1 ) )","problem":19,"user":"50bc4e73e4b0594b91591c3d"},{"problem":19,"code":"(fn [[head & tail]]\n  (if (= tail nil)\n    head\n    (recur tail)))","user":"542769f8e4b01498b1a71b24"},{"code":"#(reduce (fn [a, e] e) %1)","problem":19,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"#(nth % (dec (count %) ))","problem":19,"user":"4e7e6b51535db169f9c79712"},{"code":"(fn get-it [x] (nth x (- (count x) 1)))","problem":19,"user":"4f4ee649e4b03ad3f0c10cd4"},{"problem":19,"code":"reduce(fn [x y] y)","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":19,"code":"(fn [x] (first ( reverse x ) ) )","user":"56dd0179e4b0ea9b8538f826"},{"code":"(fn [a] (nth a (- (count a) 1)))","problem":19,"user":"4e7f32ee535db966e863cc3a"},{"problem":19,"code":"(fn ls [x] (\n if (seq (rest x)) (ls (rest x)) (first x)))","user":"5868efdae4b0f14aab7c8896"},{"problem":19,"code":"#(loop [[first & remain] %]\n    (if (empty? remain)\n      first\n      (recur remain)))","user":"5ceb221ce4b0a17bb84e2bde"},{"problem":19,"code":"(fn [elements] (first (reverse elements)))","user":"5515c8b1e4b055c2f668d4f2"},{"problem":19,"code":"(fn [s] (if (next s) \n          (recur (next s))\n          (first s)\n          \n          )\n  )","user":"5d45ff66e4b07c84aa5ae6a7"},{"problem":19,"code":"(fn last1 [s]\n  (if (= 1 (count s))\n    (first s)\n    (last1 (rest s))))","user":"5960e872e4b066ee0a44b093"},{"code":"#(if (= '() (rest %)) (first %) (recur (rest %)))","problem":19,"user":"4ee5f2fe535d93acb0a66852"},{"problem":19,"code":"(fn takeLast [x] \n    (loop [m x]\n        (let [head (first m)\n             tail (rest m)]\n                (if (empty? tail)\n                    (identity head)\n                    (recur tail)))))","user":"55871c62e4b059ccff29b1e0"},{"code":"(fn [x] (nth\n         x\n         (- (count x) 1)))","problem":19,"user":"5037f7b0e4b0803468ea2c65"},{"problem":19,"code":"(fn [x]\n  (let [len (count x)]\n    (nth x (- len 1))))","user":"59da2569e4b0ef0a1e9b5c62"},{"problem":19,"code":"#(first ( reverse % ))","user":"57681134e4b0a07e8fc180cb"},{"problem":19,"code":"(fn [xs] (if (second xs) (recur (rest xs)) (first xs)))","user":"5c34f7efe4b0d62ef62d9f5b"},{"code":"(fn [x] (first (rseq (vec x))) )","problem":19,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn mylast [l] \n  (if (> (count l) 1) \n    (mylast (rest l))\n    (first l)))","problem":19,"user":"52b9e920e4b07a9af57922c9"},{"problem":19,"code":"#(loop [[first & rest] %] (if (nil? rest) first (recur rest) ) )","user":"551da715e4b030e6a24d00de"},{"code":"(fn [v] (first (reverse v))\n  )","problem":19,"user":"52d10f08e4b07d0d72b273c4"},{"problem":19,"code":"(fn[x] (nth x (+ -1 (count x))))","user":"5ac9057fe4b0e27600da77bb"},{"code":"(fn [x] (if (= 1 (count x)) (first x) (recur (rest x))))","problem":19,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":19,"code":"(fn [items]\n  (cond\n    (= (count items) 1) (first items)\n    :else (recur (rest items))))","user":"57ce6090e4b0c746388ab8ab"},{"code":"(fn [item] (nth item (- (count item) 1)))","problem":19,"user":"4f7579cbe4b0fbe0118ec55c"},{"problem":19,"code":"(fn [[a & more]] (if (empty? more) a (recur more)))","user":"54ddb556e4b024c67c0cf798"},{"code":"(fn [sq] (nth sq (- (count sq) 1)))","problem":19,"user":"5230d9bde4b0035e815da397"},{"problem":19,"code":"; #(nth % (dec (count %)))\n#(first (reverse %))","user":"574d2d31e4b02ea114799228"},{"code":"(fn [seqq] (first (reverse seqq)))","problem":19,"user":"517d03dee4b0f5e87c18f25d"},{"code":"(fn last-e [x] (first (reverse x)))","problem":19,"user":"4fa4d900e4b081705acca1a7"},{"problem":19,"code":"(fn mylast [l]\n  (loop [lst l ret nil]\n    (cond\n      (empty? lst) ret\n      :else (recur (rest lst) (first lst)))))","user":"5fb8fe30e4b03f550f448223"},{"code":"(fn [m] (peek (reverse m)))","problem":19,"user":"4f2046b7535d64f6031464ab"},{"problem":19,"code":"(fn [[a & b]] (if b (recur b) a ))","user":"53cd5226e4b00fb29b2212e0"},{"code":"(fn [[x & rest]] (if (nil? rest) x (recur rest)))","problem":19,"user":"50fb46e6e4b0d10d794c19e5"},{"code":"(fn [arr] (nth arr (- (count arr) 1)))","problem":19,"user":"512a1cb7e4b02a03fbcee0a9"},{"problem":19,"code":"(fn last2 [[x & xs]]\n  (if (empty? xs)\n    x\n    (last2 xs)))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":19,"code":"(fn lasty [xs]\n  (if (= 1 (count xs))\n  (first xs)\n  (lasty (rest xs))))","user":"606d7f1ce4b069485764de14"},{"problem":19,"code":"(fn [[x & y]] \n  (if (= (count y) 0)\n    x\n    (recur y)))","user":"53e8c684e4b036ad0777e48b"},{"problem":19,"code":"(fn get-last\n  [my-seq]\n  (loop [[part & remaining] my-seq]\n    (if(empty? remaining)\n    \tpart\n    \t(recur remaining))))","user":"548f19a8e4b0e286459a1231"},{"code":"#(loop [col %]\n  (if (empty? (rest col))\n      (first col)\n      (recur (rest col) )\n  )\n)","problem":19,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"#(get (vec %) (- (count %) 1) )","problem":19,"user":"4f14e64e535d64f60314643f"},{"problem":19,"code":"(fn [sth] \n  (first \n   (reverse sth)))","user":"594c2950e4b07ddc2dafae5c"},{"problem":19,"code":"(fn\n  [s]\n  (nth s (dec (count s))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [c]\n  (if (= 1 (count c))\n    (first c)\n    (recur (rest c))))","problem":19,"user":"4f3c0734e4b0e243712b1f3c"},{"code":"(fn rec [l] (if (= (count l) 1)\n              (first l)\n              (rec (rest l))))","problem":19,"user":"52d1e364e4b0d9f9285948e7"},{"problem":19,"code":"(fn my-last [s]\n  (loop [s s]\n    (if (next s)\n      (recur (next s))\n      (first s))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":19,"code":"(fn [x]\n  (if-let [r (next x)]\n    (recur r)\n    (first x)))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn [x] (peek (into [] x)))","problem":19,"user":"4ed18551535d44c135fd68ce"},{"problem":19,"code":"(fn return-last [something] (peek(vec something)))","user":"607ad76ae4b0a637ed780370"},{"code":"(fn [coll]\n  (if (next coll)\n    (recur (next coll))\n    (first coll)))","problem":19,"user":"4e7e4d5c535db169f9c7970f"},{"code":"(fn [col]\n  (loop [head (first col) tail (rest col)]\n    (if (empty? tail)\n      head\n      (recur (first tail) (rest tail)))))","problem":19,"user":"53077c67e4b02e82168697a4"},{"code":"(fn [l] (if (= (count l) 1)\n          (first l)\n          (recur (rest l))))","problem":19,"user":"531ec105e4b08068f379edbb"},{"problem":19,"code":"(fn [set](nth set\n       (-  (count set)\n           1 ))  )","user":"554462c0e4b0a04f79299529"},{"code":"#(first ( take-last 1 %))","problem":19,"user":"535943b3e4b04ce2eb3ed295"},{"problem":19,"code":"#(let [length (count %)\n        index (- length 1)]\n    (nth % index))","user":"5855268be4b07779d4686410"},{"code":"(fn [s] (reduce (fn [a b] b) s))","problem":19,"user":"52211978e4b0e6a83c8925bf"},{"problem":19,"code":"(fn\n  [x]\n  ((comp first reverse) x))","user":"59273d74e4b072a2710fcec4"},{"problem":19,"code":"(fn [[first & rest]]\n       (if rest  (recur rest) first ) )","user":"5afc115de4b0cc2b61a3bcff"},{"code":"(fn [data]\n  (if (next data)\n    (recur (next data))\n    (first data))\n)","problem":19,"user":"538d561ce4b0b51d73faae6c"},{"code":"(fn my_last [coll] (if (= (count coll) 1) (first coll) (my_last (rest coll))))","problem":19,"user":"4ef4c1ff535dced4c769f23e"},{"problem":19,"code":"(fn get-last\n  [x]\n  (nth x (- (count x) 1)))","user":"56844e4be4b062072dfb8acb"},{"code":"(fn [s] (if (next s)\n            (recur (next s))\n            (first s)))","problem":19,"user":"4e00af25535d04ed9115e78e"},{"problem":19,"code":";(comp first reverse) ;more idiomatic\n;#(nth % (dec (count %)))\n#(first (reverse %))","user":"555d4421e4b0a2eb076a39a8"},{"code":"(fn las [xs] (if (next xs) (las (rest xs)) (first xs)))","problem":19,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [var] (->> var reverse first))","problem":19,"user":"51f98843e4b09be9c177e54e"},{"problem":19,"code":"#(nth% (dec (count %)))","user":"56a7f67ee4b07966d5a8a068"},{"problem":19,"code":"(fn [s] (if (= (count s) 1) (first s) (recur (rest s))))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"problem":19,"code":"(fn [in-seq] (nth in-seq (- (count in-seq) 1)))","user":"550fd845e4b06e50f9beb17c"},{"problem":19,"code":"(fn larsed [[root & tail]]\n  (if (empty? tail)root (larsed tail)))","user":"59f37776e4b0966464fe6a9d"},{"code":"(fn [xs]\n  (if-let [r (next xs)]\n    (recur r)\n    (first xs)))","problem":19,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":19,"code":"(fn [x]\n  (loop [[head & tail] x]\n    (if (empty? tail)\n      head\n      (recur tail))))","user":"589cb617e4b00487982d536a"},{"code":"(fn [x] ( (apply vector x) (dec ( count ( apply vector x)))))","problem":19,"user":"521b3f2fe4b0c4ef0be83034"},{"problem":19,"code":"(fn last-el [l]\n  (nth l (- (count l) 1)))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"problem":19,"code":";;(comp first reverse)\n#(nth % (dec (count %)))","user":"5a67cedbe4b0512ff01cd9ee"},{"code":"(fn get_last [s] (nth s (dec (count s))))","problem":19,"user":"517c1a3be4b07ef0e56148d6"},{"code":"(fn [s]\n  (if-not (next s)\n    (first s)\n    (recur (next s))))","problem":19,"user":"4ef667c4535dced4c769f24c"},{"code":"#(nth % ( dec (count %) ))","problem":19,"user":"5397cf54e4b0b51d73faaef1"},{"code":"(fn [lst]\n  (cond \n    (empty? lst) lst\n    (empty? (rest lst)) (first lst)\n    :else (recur (rest lst))))","problem":19,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn [coll]\r\n  (when-let [item (seq coll)]\r\n    (let [more (next coll)] \r\n      (if (seq more) (recur more) (first item)))))","problem":19,"user":"4f047177535dcb61093f6bc6"},{"code":"(fn [seq]\n  (loop [[x & xs] seq]\n    (if xs\n      (recur xs)\n      x)))","problem":19,"user":"4e8944b6535d4ef0aa30db98"},{"problem":19,"code":"(fn [seq] (peek (vec seq)))","user":"5d6bff25e4b04d129b00f2ab"},{"code":"(fn [x] (first (#(reverse %) x)))","problem":19,"user":"4e6a2855535d8ccf87e9fea3"},{"problem":19,"code":"#(-> %1 rest reverse first)","user":"55f46054e4b06e875b46ce75"},{"problem":19,"code":"#(nth         % (- (count %) 1) )","user":"54d74cffe4b0a52adc2e2028"},{"problem":19,"code":";#(nth % (dec (count %)))\n(comp first reverse)","user":"5582dfb6e4b05c286339e10d"},{"code":"(fn ultimate [x]\n  (if (= (rest x) '())\n(first x) (ultimate (rest x))))","problem":19,"user":"4fb1159fe4b081705acca273"},{"problem":19,"code":"#(nth  %(dec (count%)))","user":"574977cbe4b009280f9f2b9b"},{"code":"(fn f [n]\n  (if (= [] (rest n))\n    (first n)\n    (f (rest n))\n    ))","problem":19,"user":"50d08810e4b00b15ecee975d"},{"code":"(fn [sq]\n  (let [f (first sq) \n        r (rest sq)] \n    (if (seq r) \n      (recur r)\n      f)))","problem":19,"user":"500e6ddee4b04a05d36fcc06"},{"problem":19,"code":"(fn \n  [vt]\n  (nth vt (- (count vt) 1))\n  )","user":"56050dd9e4b08b23635d3160"},{"code":"(fn foo [[a & more]] (if more (foo more) a))","problem":19,"user":"536db108e4b0fc7073fd6e61"},{"problem":19,"code":"(fn [sequen]\n     (first (reverse sequen)) )","user":"5e317676e4b05b4b01516229"},{"problem":19,"code":"(fn [x]\n  (if (= (rest x) ())\n    (first x)\n  \t(recur (rest x))))","user":"5b97699ee4b0c0b3ffbd4a92"},{"problem":19,"code":"(fn get-the-last [x] (nth x (- (count x) 1)))","user":"573940e3e4b0cd1946bd106b"},{"problem":19,"code":"(fn lastMine [lst] (nth (seq lst) (- (count lst) 1)))","user":"5c82db41e4b0c8042a70ce42"},{"problem":19,"code":"#(->> % (count) (dec) (nth %))","user":"5b118b7be4b0cc2b61a3be34"},{"problem":19,"code":"(fn [s]\n  (loop [[first & remaining] s]\n    (if (empty? remaining)\n      first\n      (recur remaining)\n    )\n  )\n)","user":"59073e0fe4b047aa04b19950"},{"code":"(fn [x]\t\n  (apply (fn [x & y]\n           (if (seq y) \n             (recur (first y) (rest y))\n             x))\n         x))","problem":19,"user":"5142c9c5e4b0c172af7558c7"},{"code":"(fn [a] (nth a (- (count a) 1)) )","problem":19,"user":"52939bd1e4b0239c8a67af41"},{"problem":19,"code":"#(nth (vec %) (-(count %) 1))","user":"576aa367e4b0a07e8fc1811e"},{"code":"(fn [xs]\n  (first (drop (- (count xs) 1) xs)))","problem":19,"user":"52e24a16e4b09f7907dd1430"},{"code":"(fn mylast [[v & s]]\n  (if (empty? s) v\n    (recur s)))","problem":19,"user":"50901b2ee4b0ea685a20f774"},{"problem":19,"code":"(fn [s]\n  (loop [s' (rest s), res (first s)]\n    (if (seq s')\n      (recur (rest s') (first s'))\n      res)))","user":"56a50330e4b0542e1f8d14df"},{"problem":19,"code":"(fn last-element [coll] ( let [ x (first coll) , y (rest coll) ] (if (empty? y) x (last-element y))))","user":"56c9d136e4b0ed865f9758e2"},{"code":"(fn [l] (first (reverse l)) )","problem":19,"user":"4feb546ae4b0681fd128dc8d"},{"code":"(fn [x]\n  (loop [xs x]\n    (if (empty? (rest xs))\n      (first xs)\n      (recur (rest xs))\n    )\n  )\n)","problem":19,"user":"51897709e4b0288ada3dbdaa"},{"problem":19,"code":"reduce (fn [_ c] c)","user":"5d63f1c2e4b0c9e5857d502b"},{"problem":19,"code":"(fn [x](first(reverse x)) )","user":"5989cebfe4b021a7a535fed3"},{"problem":19,"code":"(fn [sq]\n  (nth\n   (reverse sq) 0))","user":"5cae5247e4b026601754b884"},{"code":"(fn bleh [coll] (let [f (first coll)]\n                            (if (= 1 (count coll))\n                                f\n                                (bleh (rest coll)))))","problem":19,"user":"5128da96e4b03a34742b4311"},{"code":"(partial reduce (fn [_ y] y))","problem":19,"user":"535a80b1e4b04ce2eb3ed2a7"},{"problem":19,"code":"(fn func [x] (if (empty? (rest x)) (first x) (func (rest x))))","user":"56cef5e8e4b0ea9b8538f762"},{"problem":19,"code":"(fn [x] (first (reverse  x )))","user":"54d07fa5e4b0e8a36923e5cb"},{"problem":19,"code":"(fn getLast[x] (loop [a (first x)\n                       b (rest x)]\n                  (if (= 1 (count b))\n                    (first b)\n                    (recur (first b) (rest b)))))","user":"55b8d186e4b01b9910ae29ba"},{"problem":19,"code":"(fn l [a] (if (empty? (rest a))\n            (first a)\n            (l (rest a))))","user":"5455573be4b0e397800069e0"},{"problem":19,"code":"#(first (reverse %))\n\n;;(comp first reverse)","user":"54d0ceb5e4b0e8a36923e5d1"},{"code":"(fn [lst]\n  (reduce (fn [x y] y) lst))","problem":19,"user":"51c76864e4b07ef393169e3f"},{"problem":19,"code":"reduce #(if (= %1 %1) %2)","user":"5d5502cbe4b02ba5928a680b"},{"code":"(fn [s] (nth s (dec (count s))))","problem":19,"user":"4ea092f4535d7eef308072a6"},{"problem":19,"code":"(fn take_last [v] (if (= (count v) 1) (first v) (take_last (rest v))))","user":"568d8f3ce4b0dcc4269f40c7"},{"code":"(fn [lst]\n  (let [x (first lst)\n        rst (rest lst)]\n  \n  (if (empty? rst)\n      x\n      (recur rst))))","problem":19,"user":"4e99108d535dbda64a6f6b62"},{"code":"(fn ll [list] (first (reverse list)))","problem":19,"user":"5001dd97e4b0678c553fc421"},{"problem":19,"code":"(fn abc [x] (nth x (dec (count x)))\n  )","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"code":"(fn getit [lst] (first(reverse lst)))","problem":19,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [sequence]\n  (first (reverse sequence)))","problem":19,"user":"4fca0376e4b0ee37620e184a"},{"problem":19,"code":"(fn [x] (first(rseq (vec x))))","user":"542a348be4b01498b1a71b3f"},{"problem":19,"code":"(fn [xs] (if (next xs)\n           (recur (next xs))\n           (first xs)))","user":"553638bae4b09218d5f44fba"},{"code":"(fn [s] (first (into () s)))","problem":19,"user":"4e7f45a8535db966e863cc3e"},{"code":"(fn ls [x] (first (reverse x) ))","problem":19,"user":"4e40d306535dc968683fc49b"},{"problem":19,"code":"; (fn [arr] (nth arr (- (count arr) 1)))\n(fn [arr] (first (reverse arr)))","user":"52f76053e4b047fd55836fc1"},{"code":"#(let [n (count %)] (if (> n 0) (nth % (- n 1)) nil))","problem":19,"user":"52e68e61e4b09f7907dd1479"},{"code":"(fn mylast [x] (if (= (count x) 1) (first x) (mylast (rest x))))","problem":19,"user":"4fd40ae1e4b0d4de60cee367"},{"problem":19,"code":"(fn [remain] \n  (if (nil? (second remain))\n    (first remain) \n    (recur (rest remain))))","user":"5c272a4de4b07e362c2305ca"},{"problem":19,"code":"; get the (ls.length - 1)th element\n; (count ls) => number of elements in ls\n; (dec n) = (- n 1)\n; (nth ls n) => element of ls at index n\n(fn [ls] (nth ls (dec (count ls))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"problem":19,"code":"#((fn f [x xs] (if (= (count xs) 0) x (f (first xs) (rest xs)))) (first %) (rest %))","user":"567ffd69e4b0966858e4d8e7"},{"problem":19,"code":"(fn [vct]\n  (if (empty? (rest vct))\n    (first vct)\n    (recur (rest vct))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [listy]\n    (loop [\n            current (first listy)\n            left (rest listy)\n          ]\n      (if (= left ())\n        current\n        (recur (first left) (rest left)))\n      )\n)","problem":19,"user":"4f2525b7e4b0d66497709ff1"},{"problem":19,"code":"#(loop [items %]\n    (let [r (rest items)]\n        (if (empty? r)\n            (first items)\n            (recur r))))","user":"5745b884e4b009280f9f2b53"},{"problem":19,"code":"(fn get-last [x] \n  (nth x (- (count x) 1)))","user":"58bdb36fe4b0888cdc949d35"},{"code":"(fn lst [xs] (if (second xs) (lst (rest xs)) (first xs)))","problem":19,"user":"510f435fe4b0a5a410fb0e25"},{"problem":19,"code":"(fn [x] (first (rseq (into [] x))))","user":"544fbabce4b0e39780006999"},{"code":"(fn my_last [l]\n  (if (<= (count l) 1) \n      (first l)\n      (my_last (next l))\n  ))","problem":19,"user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn a [x] (if (= 1 (count(rest x))) (first (rest x)) (a (rest x))))","problem":19,"user":"511dada0e4b0a5c68a34840c"},{"problem":19,"code":"(fn rec [[a & rest]]\r\n  (if rest\r\n      (recur rest) a))","user":"58f2c77ce4b0438e51c2ce90"},{"code":"(fn _ [x] (nth x  (- (count x) 1)) )","problem":19,"user":"5115c7e4e4b0ce5098ee73c2"},{"code":"(fn my-last [lst]\n  (cond (empty? (rest lst)) (first lst)\n        :else (recur (rest lst))))","problem":19,"user":"50d2f044e4b03c62ef244483"},{"problem":19,"code":"(fn mylast [coll]\n (loop [n (first coll) re (next coll)]\n  (if re \n   (recur (first re) (next re))\n   n)\n  ))","user":"579601c8e4b0e215f87e8492"},{"code":"(fn [s] (first (take-last 1 s)))","problem":19,"user":"4ea6fd32535d7eef308072e9"},{"problem":19,"code":"(fn [list]\n  (if (empty? (rest list))\n    (first list)\n    (recur (rest list))\n    )\n  )","user":"545ef0a5e4b01be26fd74684"},{"code":"(fn [coll]\n  (cond\n    (nil? (next coll)) (first coll)\n    :else (recur (next coll))))","problem":19,"user":"4ed9fe5f535d10e5ff6f5308"},{"code":"apply (fn [& list] (first (reverse list)))","problem":19,"user":"4ed45563535d10e5ff6f52c9"},{"code":"(fn [vec] (nth vec (- (count vec) 1)))","problem":19,"user":"4e951f2c535dbda64a6f6b2f"},{"problem":19,"code":"(fn slow-last [s]\n  (reduce\n    (fn [_ n]\n      n)\n    nil\n    s))","user":"5571cc39e4b09a3098a5253c"},{"problem":19,"code":"(fn [s]\n  (first (drop (-> s count dec) s)))","user":"5881d1c2e4b0f1effa3b7644"},{"code":"(fn [seq] (let [n (next seq)] (if n (recur n) (first seq))))","problem":19,"user":"4ecdaf47535d23f036227708"},{"problem":19,"code":";#(if(== 0 (count (rest %)) ) (first %) (recur (rest %)))\n#(first (reverse %))","user":"551905c3e4b06a49daca83d0"},{"problem":19,"code":"(fn [x] \n   (if (> (count x) 1)\n     (recur (rest x))\n     (first x)\n    )\n)","user":"54c97cb3e4b045293a27f677"},{"problem":19,"code":"(fn get-last [s] (if (= (count s) 1)\n                   (first s)\n                   (get-last (rest s))))","user":"597a7418e4b02382a38ad1e9"},{"problem":19,"code":"(fn my-last [lst]\n  (if (= (count lst) 1)\n    (first lst)\n    (my-last (rest lst))))","user":"568c74d8e4b0dcc4269f40b5"},{"code":"(fn laster [x]\n  (if (next x)\n    (recur (next x))\n    (first x)))","problem":19,"user":"502ea030e4b078f26332e747"},{"problem":19,"code":"(fn [s] (loop [coll s ] (if (empty? (rest coll)) (first coll) (recur (rest coll)))))","user":"561047eae4b05f002753df6d"},{"code":"(fn ml [xs] \n  (if (< 1 (count xs))\n     (ml (rest xs))\n     (first xs)))","problem":19,"user":"52e276d9e4b09f7907dd1436"},{"problem":19,"code":"(fn rec-last [l]\n  (if (= 1 (count l))\n    (nth l 0)\n    (rec-last (rest l))))","user":"58e17578e4b005f69f193c7f"},{"problem":19,"code":"(fn x [lst]\n    (if (empty? lst) nil\n                   (if (= (count lst) 1) (first lst)\n                                         (x (rest lst)))))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn [x] (-> x (reverse) (first)))","problem":19,"user":"5140283fe4b00f13ea1bd89a"},{"problem":19,"code":"#(let[c (count %)] (nth % (- c 1)))","user":"5a972643e4b0d174b936c778"},{"code":"(fn [x] \n  (first \n    (reverse x)))","problem":19,"user":"4e298b4f535deb9a81d77eff"},{"code":"(fn [i] \n    (if (= (count i) 1)\n          (first i)\n          (recur (rest i))))","problem":19,"user":"51bd255ce4b0df1216cefd94"},{"problem":19,"code":"(fn [x] (loop [head (first x) tail (rest x)]\n          (if (empty? tail)\n           \thead\n            (recur (first tail) (rest tail)))))","user":"55457b73e4b0a04f79299536"},{"code":"(fn foo [s] (if (empty? (rest s)) (first s) (recur (rest s))))","problem":19,"user":"50123696e4b02a085b99dc76"},{"problem":19,"code":"(fn me [xs]\n  (case (count xs)\n    0 nil\n    1 (first xs)\n    (me (rest xs))))","user":"596296e9e4b066ee0a44b0b6"},{"code":"(fn last-but-not-last [s] (first (reverse s)))","problem":19,"user":"53333e7be4b019098a6f8b7e"},{"problem":19,"code":"(fn f [in] (if (= (count in) 1) (first in) (f (rest in))))","user":"5675f2f4e4b05957ce8c6153"},{"problem":19,"code":"(fn [[x & rst]] (if rst (recur rst) x))","user":"53f73cece4b0de5c4184855b"},{"problem":19,"code":"(fn lstel[s]\n  (if (next s)\n    (lstel (next s))\n    (first s)\n    )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [s]\n  (loop [s (next s), i (first s)]\n    (if (seq s)\n      (recur (next s) (first s))\n      i)))","problem":19,"user":"4f301d02e4b0d6649770a072"},{"problem":19,"code":"(fn\n\t[[item & rest]]\n\t(if rest\n      (recur rest)\n      item))","user":"54fea37be4b07d26eda61d44"},{"problem":19,"code":"(fn last-el [[a & more]]\n  (if (seq more) (last-el more)\n    a))","user":"5665ef78e4b0e91d5f5c5664"},{"code":"(fn [x]\n  (loop [[first & rest] x]\n    (if (empty? rest)\n      first\n      (recur rest))))","problem":19,"user":"52e52f3ce4b09f7907dd1459"},{"problem":19,"code":"reduce (fn[a b](identity b))","user":"5797d3d2e4b039eba2ecb106"},{"code":"(fn do-last [a-list] \n  \t(if (= (count a-list) 1)\n      (first a-list)\n      (do-last (rest a-list)))\n  )","problem":19,"user":"53713ec8e4b0fc7073fd6eae"},{"problem":19,"code":"(fn my-last [coll]\n  (if (= 1 (count coll))\n    (first coll)\n    (recur (rest coll))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":19,"code":"(fn l [[x & xs]]\n  (if xs\n    (l xs)\n    x))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":19,"code":"(fn [%] (nth % (- (count %) 1)))","user":"57dd5545e4b0bd073c20243f"},{"problem":19,"code":"(fn get-last[col] \n  (get (vec col) (-(count (vec col)) 1))\n)","user":"58fb381ae4b0438e51c2cf71"},{"problem":19,"code":"(fn[coll] (first (reverse coll)))","user":"5be0b6eee4b0ed4b8aab4c8e"},{"code":"(fn [s] (if (= (next s) nil) (first s) (recur (next s))))","problem":19,"user":"51805d22e4b0e3fc13e244df"},{"problem":19,"code":"(fn[x] (reduce +(drop(- (count x) 1) x)))","user":"6001460ce4b074f607df6611"},{"problem":19,"code":"(fn [xs]\n\t(loop [x (first xs) xs (rest xs)]\n      (if (empty? xs) x (recur (first xs) (rest xs)))))","user":"5bc664a2e4b07a9b28b10093"},{"code":"#(if (next %)\n     (recur (next %))\n     (first %))","problem":19,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"#(nth % (-(count %) 1) )","problem":19,"user":"4fada258e4b081705acca23d"},{"problem":19,"code":"(fn [x]\n  (first \n  (drop (- (count x) 1)\n        x)))","user":"605b319de4b079a07f8593f7"},{"code":"(fn f [xs] \n  (if (= (count xs) 1) (first xs)\n                       (recur (rest xs))))","problem":19,"user":"514767ace4b0541f4bec05cb"},{"problem":19,"code":"(fn take_l [col] (nth col (- (count col) 1) nil))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn last-element [x] (first (filter #(= (- (count x) 1) (.indexOf x %)) x)))","problem":19,"user":"4fa2495ee4b0dcca54ed6d67"},{"code":"( fn [n] (first (reverse n)))","problem":19,"user":"52c22856e4b07a9af5792378"},{"problem":19,"code":"#(loop \n  [[a & l] %]\n  (if (= (count l) 0)\n    a\n    (recur l)))","user":"5bf4cd67e4b0b326c961d89c"},{"problem":19,"code":"(fn [x]\n  (loop [x x]\n     (if (empty? (rest x)) \n       (first x)\n       (recur (rest x)))))","user":"5e07cf97e4b0978307768fb9"},{"code":"(fn [x]\n  (first (reverse x))\n)","problem":19,"user":"52b400eae4b0c58976d9ad13"},{"code":"#(loop [[thing & rest] %]\n   (if (empty? rest)\n     thing\n     (recur rest)))","problem":19,"user":"53a2e6abe4b0f1fc7453882f"},{"code":"(fn [items] (first (reverse  items)))","problem":19,"user":"527c9c08e4b0757a1b171366"},{"code":"(fn [numbers] (nth numbers (dec (count numbers))) )","problem":19,"user":"51d1111ce4b067c36548635f"},{"code":"(fn [[hd & tail]]  \n    (if (nil? tail) hd (recur tail)))","problem":19,"user":"50a7b76de4b090657f4a5cdc"},{"problem":19,"code":"(fn my-last [l]\n  (if (= (rest l) '())\n    (first l)\n    (my-last (rest l))))","user":"550babf3e4b06e50f9beb149"},{"problem":19,"code":"(fn get-last-item [xs] (if (= (next xs) nil) (first xs) (get-last-item (rest xs))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"code":"(fn last-element [l] (nth l (- (count l) 1)))","problem":19,"user":"51e786c9e4b0a3e081b8cbeb"},{"code":"(fn [ls] (if (> (count ls) 1) (recur (rest ls)) (first ls)))","problem":19,"user":"51bd8c53e4b0ff155d51d2b2"},{"code":"(fn getLast [coll] (first (drop (- (count coll) 1) coll)))","problem":19,"user":"50afdfc0e4b0c3f5ed5c29a6"},{"code":"(fn last-el [xs] (if (empty? (rest xs)) (first xs) (last-el (rest xs))))","problem":19,"user":"519ca227e4b0a1d87b003460"},{"problem":19,"code":"(fn [lst]\n  (nth lst\n       (-\n         (count lst)\n         1)))","user":"54e90803e4b024c67c0cf82f"},{"code":"(fn [elems]\n  (loop [back (rest elems)\n         e (first elems)]\n    (if (empty? back)\n        e\n        (recur (rest back) (first back)))))","problem":19,"user":"4e5c3612535d8a8b8723a2be"},{"problem":19,"code":"#(first (rseq (vec  % )))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn get-last[a-seq]\n    (let [el (first a-seq) r-seq (rest a-seq)]\n         (if (seq r-seq)\n              (get-last r-seq)\n              el\n          )\n    )\n )","problem":19,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [x] sequence \n  (nth x (- (count x) 1)))","problem":19,"user":"52c2eb29e4b07a9af5792385"},{"problem":19,"code":"(fn posledni [[a & b]] (if b (posledni b) a))","user":"569f6ab8e4b0542e1f8d1493"},{"problem":19,"code":"reduce (fn [_ b] b) nil","user":"580c1e9ae4b0849f6811b719"},{"problem":19,"code":"(fn my-last[s] (if (= (next s) nil) (first s) (my-last (rest s))))","user":"551747e0e4b06a49daca83c1"},{"problem":19,"code":"(fn [x]\n  (loop [s x l nil]\n    (if (empty? s)\n      l\n      (recur (rest s) (first s)))))","user":"5560f60ee4b0c656e3ff17c3"},{"problem":19,"code":"(fn [keys]\n  (if (= nil (next keys))\n    (first keys)\n    (recur (rest keys))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":19,"code":"(fn [arg]\n  (first (reverse arg)))","user":"54f9b253e4b01ecee9d88840"},{"code":"(fn [x]\r\n  (loop [s x r ()]\r\n    (if-not (empty? s)\r\n      (recur (rest s) (first s))\r\n      r)))","problem":19,"user":"4de08793535d08e6dec9fde2"},{"code":"(fn my-last [seq] (if (= seq '()) nil (if (= 1 (count seq)) (first seq) (my-last (rest seq)))))","problem":19,"user":"4f5599dfe4b0a7574ea71806"},{"problem":19,"code":"(fn [x]\n   (loop [y x]\n     (if (empty? (rest y))\n       (first y)\n       (recur (rest y)))))","user":"542ab1afe4b01498b1a71b48"},{"problem":19,"code":"(fn [x] (nth x (- (count x) 1)))\n\n;#(% (dec (count %)))","user":"582c526ae4b051871117bf88"},{"problem":19,"code":"#(if \n      (empty? (rest %))\n      (first %) \n      (recur (rest %)))","user":"54cceafde4b057c6fda3a292"},{"code":"(fn yo ([x] (if (= 1 (count x)) (first x) (yo (rest x)))))","problem":19,"user":"5259fb32e4b0cb4875a45ce9"},{"problem":19,"code":"(fn [l] (loop [res l] (if (= (count res) 1) (first res) (recur (rest res)))))","user":"5d03c351e4b0cc9c915881cc"},{"problem":19,"code":"(fn[a-list] (nth a-list (dec (count a-list))))","user":"5984c965e4b021a7a535fe3b"},{"code":"(fn [xs] (if (next xs) (recur (next xs)) (first xs)))","problem":19,"user":"4fea0a17e4b0547ebccb2486"},{"code":"(fn mylast [l]\n  (if (= 1 (count l))\n    (first l)\n    (mylast (rest l))\n  )\n)","problem":19,"user":"4e720985535d5021c1a89655"},{"code":"(fn [v] (nth v (dec (count v))))","problem":19,"user":"4fe9364be4b0547ebccb244e"},{"problem":19,"code":"(fn f[x] \n  (if (= [] (rest x))\n    (first x)\n    (f (rest x))))","user":"5637e73fe4b0bfe05bf117e0"},{"code":"(fn this [xs] \n  (if (empty? (rest xs)) \n  (first xs) \n  (this (rest xs))))","problem":19,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"(fn [v] (if-not (seq (rest v)) (first v) (recur (rest v))))","problem":19,"user":"51990df9e4b068aa333628fc"},{"problem":19,"code":"(fn lastval [x]\n  (first (reverse x)))","user":"54f36b36e4b050824f58f5c2"},{"code":"(fn la [[h & tl]]\n  (if (empty? tl)\n    h\n    (la tl)))","problem":19,"user":"50a768e6e4b090657f4a5cd9"},{"code":"(fn getLast [lst] \n   (\n    if (= (next lst) nil) \n     (first lst) \n     (getLast (rest lst))\n   )\n)","problem":19,"user":"53848725e4b06839e8705ef4"},{"problem":19,"code":"(fn se [seqs](nth seqs (dec (count seqs))))","user":"57599ed3e4b02ea114799323"},{"code":"(fn end [list] (peek (vec list)))","problem":19,"user":"4e6a3985535d8ccf87e9feb1"},{"problem":19,"code":"(fn [orig]\n  ((fn [f lst] (f f lst))\n   (fn [f x]\n    (if (= (next x) nil)\n     (first x)\n     (f f (rest x))))\n   orig))","user":"53b780b8e4b047364c0444cf"},{"code":"#(nth % (- (reduce + (for [x %] 1)) 1))","problem":19,"user":"5328e449e4b09d4e7a9b550c"},{"problem":19,"code":"(fn [[hd & tl]]\n  (if (= tl nil)\n    hd\n    (recur tl)))\n; (loop [hd & tl] (if (= tl nil) hd (recur (first tl) (rest tl)))","user":"5accc6b6e4b0e27600da7817"},{"problem":19,"code":";(fn [col] (-> col reverse first))\n\n;(comp first reverse)\n\n;(fn [x]\n ; (if-let [x (next x)]\n  ;  (recur x)\n   ; (first x)))\n   \n   \n;(fn f [x]\n ; (if (empty? (rest x))\n  ;  (first x)\n   ; (f (rest x))))\n   \n#(nth % (dec (count %)))","user":"55614155e4b0c656e3ff17c4"},{"code":"(fn [ls] (-> ls reverse first))","problem":19,"user":"4f03ba9c535dcb61093f6b58"},{"problem":19,"code":"(fn [args] \n   (first (reverse args)))","user":"563dfeffe4b0da801c4e4663"},{"problem":19,"code":"(fn [s]\n  (if (nil? (seq (rest s)))\n    (first s)\n    (recur (rest s))))","user":"574e069fe4b02ea11479923d"},{"code":"(fn [arg] (nth arg (- (count arg) 1) ))","problem":19,"user":"52711255e4b03e8d9a4a73d7"},{"problem":19,"code":"(fn last-element [num]\n    (if (> (count num) 1) \n        (last-element (rest num))\n        (first num)))","user":"5c255edee4b07e362c2305b2"},{"problem":19,"code":"(fn return-last [x] (if (= (count x) 1) (first x) (return-last (rest x))))","user":"558075c6e4b05c286339e0ec"},{"code":"(fn l [s]\r\n  (if (next s)\r\n    (l (next s))\r\n    (first s)))","problem":19,"user":"4e2f377a535deb9a81d77f10"},{"problem":19,"code":";#(nth % (dec (count %)))\n(fn lastelem [x] (nth x (dec (count x))))","user":"55268e8de4b0ffed3738f91f"},{"problem":19,"code":"(fn last-element [ls]\n  (if (= 1 (count ls))\n         (first ls)\n         (recur (rest ls))))","user":"5b576216e4b02d533a91bd58"},{"code":"(fn [xs] (loop [[x & xs] xs] (if (seq xs) (recur xs) x)))","problem":19,"user":"521c6a1ae4b0c4ef0be83083"},{"code":"(fn [[a & more]]\n  (if (seq more)\n      (recur more)\n      a))","problem":19,"user":"4f04664a535dcb61093f6bc1"},{"problem":19,"code":"(fn [lst]\n    (nth lst (dec (count lst))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"(fn last-of-list [x]\r\n  (if (= (rest x) '()) (first x) (last-of-list (rest x))))","problem":19,"user":"4e17d0c0535d04ed9115e7f0"},{"code":"#(loop [coll %\n        l nil]\n  (if (empty? coll)\n    l\n    (recur\n      (next coll)\n      (first coll))))","problem":19,"user":"4fab259ae4b081705acca212"},{"code":"(fn [l] \n  (.get l (dec (count l))))","problem":19,"user":"51e2ee61e4b0c611d6113e3a"},{"problem":19,"code":"(fn last' [x] (nth x (- (count x) 1)))","user":"579563ffe4b0e215f87e847e"},{"code":"(fn [l] (nth l (- (.size l) 1)))","problem":19,"user":"4fa67030e4b081705acca1b7"},{"problem":19,"code":"#(get (vec %) (dec(count %)))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":19,"code":"#(reduce (fn[x y]y) %)","user":"58f5689de4b0438e51c2ced7"},{"problem":19,"code":"(fn lst [item]\n  (let [rst (rest item)]\n    (if (empty? rst)\n      (first item)\n      (recur rst))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":19,"code":"(fn my-last\n  [s]\n  (if (next s)\n    (recur (next s))\n    (first s)))","user":"5ed09be3e4b016b56eae05b2"},{"code":"(fn get-last [mylist] (.get mylist (- (count mylist) 1)))","problem":19,"user":"50ed7023e4b06330c1f87c39"},{"problem":19,"code":"(fn [collxn] (nth collxn (- (count collxn) 1)))","user":"53fdfb83e4b0de5c418485ec"},{"code":"(fn last-rec [s]\n  (if (empty? (rest s))\n    (first s)\n    (last-rec (rest s))))","problem":19,"user":"52709265e4b03e8d9a4a73b2"},{"problem":19,"code":"(fn [x] first (reduce (fn [a b] b) x))","user":"5af20ce0e4b0cc2b61a3bc69"},{"code":"(fn lastElem [x] (peek (reverse x)))","problem":19,"user":"4ea9b80c535d7eef30807306"},{"problem":19,"code":"(fn [x]\n  (get (vec x) (dec (count x))))","user":"550b5c10e4b06e50f9beb143"},{"code":"#(.get  % (-(.size %) 1) )","problem":19,"user":"51c1d159e4b0d204dbe2ca18"},{"problem":19,"code":"reduce (fn [a b] (if (nil? b) b b))","user":"5589d1eee4b059ccff29b20a"},{"code":";(fn [x] (first(reverse x)));cheated\n\n(fn [data] \n  (if(empty? (rest data)) (first data)\n    (recur (rest data))))","problem":19,"user":"5032cf63e4b0e4096af89716"},{"code":"(fn [n]\n        (if (< 0 (count (rest n)))\n            (recur (rest n)) \n          (first n)))","problem":19,"user":"503be880e4b0fc0f99c2e54a"},{"problem":19,"code":"(fn [col]\n         (nth col (dec (count col))))","user":"5e300655e4b05b4b01516209"},{"code":"(fn [s]\n  (nth s (- (count s) 1)))","problem":19,"user":"4e30da02535deb9a81d77f17"},{"problem":19,"code":"#(nth % (dec (count %)))\n;; #(first (reverse %))\n;; (comp first reverse) ;; this is the same as line 2, but easier to read","user":"543be8f0e4b032a45b869337"},{"problem":19,"code":"(fn last-element\n  [the-seq] \n  (nth the-seq \n    (-\n    (count the-seq)\n    1)))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":19,"code":"(fn lastElem [coll] (first (reverse coll)) )","user":"5be2e5b2e4b0ed4b8aab4ccb"},{"code":"(fn [x] (first(reverse x )))","problem":19,"user":"4e6cf521535de274dd8d818b"},{"code":"#(nth(reverse %)0)","problem":19,"user":"4ecd1143535d23f036227702"},{"problem":19,"code":"(fn my-last [array] \n  (let [[x & remaining] array]\n    (if (= (count remaining) 0)\n      x\n      (my-last remaining)\n      )))","user":"5f77c32de4b02876ed9fd0bd"},{"code":"(fn [x] (first ( reverse x ) ))","problem":19,"user":"4f64f0a7e4b07046d9f4ef37"},{"problem":19,"code":"(fn lst [s]\n  (if-let [nxt (next s)]\n    (lst nxt)\n    (first s)))","user":"566a6e38e4b0a866af68969b"},{"problem":19,"code":"(fn \n  [lst]\n  (loop [remaining lst]\n    (let [[head & tail] remaining]\n      (if (empty? tail)\n        head\n        (recur tail)))))","user":"5c8005cee4b0c8042a70ce0a"},{"problem":19,"code":"(fn last-next [x] (cond (= (next x) nil) (first x) :else (last-next (next x))))","user":"530ec8d4e4b08068f379ecc2"},{"code":"(fn get-last [x] (if (= 1 (count x)) (first x) (get-last (rest x))))","problem":19,"user":"51585807e4b0a069fd272c75"},{"code":"(fn last'\n  ([coll] (last' coll nil))\n  ([coll acc]\n   (if-let [[x & xs] (seq coll)]\n    (recur xs x)\n    acc)))","problem":19,"user":"51cf0993e4b0e42293a2256a"},{"problem":19,"code":"(fn [seq] (nth seq ( - (count seq) 1)))","user":"593b34a0e4b069cdc2982b6b"},{"code":"(fn dog [x](nth x (- (count x) 1)))","problem":19,"user":"51427a8be4b0b50abeb46b37"},{"problem":19,"code":"(fn [s] (reduce (fn [_ c] c ) s))","user":"55dd91c9e4b050e68259b3ca"},{"code":"(fn [[f & rest]]\r\n(if rest\r\n(recur rest)\r\nf))","problem":19,"user":"4e49bdfb535dc968683fc4ca"},{"problem":19,"code":"(fn [items]\n  (loop [i items]\n    (if (= 1 (count i))\n      (first i)\n      (recur (rest i)))))","user":"579816abe4b039eba2ecb10d"},{"problem":19,"code":"(fn yeah [[x & rest]] (if rest (yeah rest) x))","user":"561c0e9be4b064ca9f4b1692"},{"code":"(fn [item] (first (reverse item)))","problem":19,"user":"505f1305e4b08f2a82ad10ac"},{"code":"(fn [array] (first( drop (+ (count array) -1) array )))","problem":19,"user":"5261dfb0e4b03e8d9a4a706f"},{"problem":19,"code":"(fn [xs] (first (reverse (seq xs))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":19,"code":"(fn [items]\n  (nth items (- (count items) 1)))","user":"5c86b769e4b0c8042a70ce9b"},{"code":"reduce (fn [x y] y)","problem":19,"user":"4e03c616535d04ed9115e796"},{"problem":19,"code":"(fn [ls] (\n          first (reverse ls)\n          )\n  )","user":"60228147e4b0d5df2af22202"},{"problem":19,"code":"(fn \n\t[l]\n\t(let [the-list l]\n\t\t(if (= 1 (count the-list))\n\t\t\t(first the-list)\n\t\t\t(recur (rest the-list)))))","user":"59b62f8de4b05c620303ca1f"},{"code":"#(reduce (fn [a b] b) nil %1)","problem":19,"user":"52244a77e4b01819a2de42d1"},{"problem":19,"code":"(fn [x] \n  (loop [r x]\n    (let [rst (rest r)]\n    (if (empty? rst)\n      (first r)\n      (recur rst)))))","user":"53d60f57e4b0e771c3025451"},{"code":"(fn [col]\n  (let [c (vec col)]\n    (get c (dec (count c))))\n  )","problem":19,"user":"528196e2e4b0757a1b171437"},{"problem":19,"code":"(comp first reverse reverse reverse)","user":"540078fbe4b0de5c4184860b"},{"problem":19,"code":"#(loop [[head & tail] %]\n   (if (empty? tail)\n     head\n     (recur tail)))","user":"542ce413e4b0dad94371f2ae"},{"code":"(fn getlast [x] \n  (if (= 1 (count x))\n  \t(first x)\n    (getlast (rest x))\n  )    \n)","problem":19,"user":"50e9ed1de4b02d54280826d5"},{"problem":19,"code":"(fn bar [x] \n  (if (seq (rest x))\n    (bar (rest x))\n    (first x)))","user":"53b890e1e4b047364c0444df"},{"problem":19,"code":"(fn recurse [n] (if (= (count n) 1) (first n) (recurse (rest n))))","user":"55933c7ae4b0c79f6e1db938"},{"code":"(fn getl [aseq] (if (empty? (rest aseq))\n                       \t(first aseq)\n                       \t(getl (rest aseq))))","problem":19,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn my-last [coll]\r\n  (if (seq (rest coll))\r\n    (recur (rest coll))\r\n    (first coll)))","problem":19,"user":"4e7e4a1f535db169f9c7970c"},{"problem":19,"code":"(fn [l] (let [[head & tail] l] (if (= tail nil) \n                    head \n                    (recur tail))))","user":"58053715e4b0a837a8b30cbd"},{"problem":19,"code":"(fn [arg] \n  (-> arg \n      reverse\n      first))","user":"5b292520e4b063e2438bcc5d"},{"code":"(fn [x] ( first (reverse  x)))","problem":19,"user":"51227a00e4b068a9582e656b"},{"problem":19,"code":"(fn [coll] (first (drop (-> coll count dec) coll)))","user":"5ca3def0e4b048ec896c5bb0"},{"problem":19,"code":"(fn get-last \n  [[x & more]]\n  (if more (recur more) x))","user":"559ce276e4b0ec2b359424d7"},{"problem":19,"code":"(fn lastelem [x] (nth x (dec (count x))))","user":"55e1ddf7e4b050e68259b422"},{"code":"(fn [s] (loop [s s] \n  (if (<= (count (rest s)) 0) (first s)\n       (recur (rest s)))))","problem":19,"user":"4fc9a977e4b0ee37620e1847"},{"problem":19,"code":"(fn [[h & t]] \n  (if (empty? t)\n    h\n    (recur t)\n  )\n)","user":"5795bddbe4b0e215f87e8488"},{"problem":19,"code":"(fn last-element\n  [sequence-in]\n  (nth sequence-in \n       (- (count sequence-in) 1)))","user":"53de4bdae4b0d874e779ae32"},{"problem":19,"code":"(fn lastEle [x] (first (reverse x)))","user":"56cb3e25e4b0ea9b8538f72a"},{"problem":19,"code":"(fn getLast [list]\n  (first (reverse list)))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":19,"code":"(fn last-elem [s] (if (empty? (rest s)) (first s) (last-elem (rest s))))","user":"55efbb2ae4b066087aa9453c"},{"code":"apply (comp first reverse list)","problem":19,"user":"4ece9ca9535d23f03622770f"},{"problem":19,"code":"(fn retLastElement[x] (first (reverse x)))","user":"58fb50dee4b0438e51c2cf73"},{"problem":19,"code":"(fn fake-last [x]\n  (if (= '() (rest x))\n    (first x)\n    (fake-last (rest x))))","user":"59273eefe4b072a2710fcec6"},{"code":"(fn slast [s] (peek (vec s)))","problem":19,"user":"504e11a8e4b078edc5f593b5"},{"code":";#(nth % (dec (count %)))\n;reduce (fn([a b] b))\n(comp first reverse)","problem":19,"user":"536a15dae4b0243289761ea9"},{"problem":19,"code":"(fn my-last [[x & rst]]\n  (if (empty? rst)\n    x\n    (my-last rst)))","user":"55dbc7cde4b050e68259b3a4"},{"problem":19,"code":"#(first (into [] (into () %)))","user":"55acb648e4b03311e7b73296"},{"code":"(fn x [l]\n  (if (> (count l) 1)\n    (x (rest l))\n    (first l)))","problem":19,"user":"51631002e4b017b283c712c1"},{"problem":19,"code":"(fn \n  [x]\n  (nth x (- (count x) 1))\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"code":"(fn laast [lst]\n  (if (empty? (rest lst))\n      (first lst)\n      (laast (rest lst))))","problem":19,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn this\n  ([x] (first (reverse x))))","problem":19,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":19,"code":"(fn[coll]\n (if (= 1 (count coll))  \n    (first coll)\n    (recur (rest coll))))","user":"4f086d45535dcb61093f6c39"},{"code":"(fn zopa[x] (first (reverse x)))","problem":19,"user":"50466eb7e4b011c5dfee7722"},{"code":"(fn [xs]\n  (reduce\n    (fn [x acc] acc)\n    xs))","problem":19,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"(fn get-last [ls]            \n  (if (= (count ls) 1) (first ls) (get-last (rest ls))))","problem":19,"user":"52ec1dfbe4b0705949c4444b"},{"problem":19,"code":"(fn [elems] (reduce (fn [e1 e2] e2) elems))","user":"53f49dfae4b0db01ade6f9c2"},{"code":"(fn laaaast [coll]\n  (if-not (next coll) (first coll) (laaaast (next coll))))","problem":19,"user":"4ec34578535dcc7ae8597d51"},{"problem":19,"code":"(fn [x] (first (keep-indexed #(if (= %1 (- (count x) 1)) %2) x)))","user":"600c1c72e4b074f607df6692"},{"code":"(fn dropper [x]\n  (if (= (count x) 1)\n    (first x)\n    (dropper (rest x))))","problem":19,"user":"4ebe066a535dfed6da9c6d91"},{"code":"(fn [list] (if (= (count list) 1) (first list) (recur (rest list))))","problem":19,"user":"4f80a713e4b033992c121bf6"},{"problem":19,"code":"(fn [seq]\n  (if (= (count seq) 1)\n    (first seq)\n    (recur (rest seq))\n  )\n)","user":"556589cae4b0c656e3ff1819"},{"problem":19,"code":"(fn [coll]\n  (if\n    (next coll)\n    (recur (rest coll))\n    (first coll)))","user":"5990a9fde4b0866487ed0d54"},{"problem":19,"code":"(fn [part] \n  (loop [[h & r] part]\n    (if (empty? r)\n    h\n    (recur r)\n      )\n    )\n  )","user":"5cf9dd41e4b0cc9c91588133"},{"code":"(fn [xs]\n  (let [l (count xs)]\n    (nth xs (dec l))))","problem":19,"user":"50611456e4b0dc10a69545a5"},{"problem":19,"code":"(fn return-last [x]\n  (first (reverse x)))","user":"5c7ec850e4b0d597f478cad4"},{"problem":19,"code":"(fn [elms] (first (reverse elms)))","user":"5b4b7506e4b02d533a91bc9e"},{"code":"(fn last-element [x] (if (empty? x) x (let [tail-data (rest x)] (if (empty? tail-data) (first x) (last-element tail-data)))))","problem":19,"user":"537f8e7be4b06839e8705eb8"},{"code":"#(peek (apply vector %))","problem":19,"user":"4f030cff535dcb61093f6a4d"},{"code":"(fn [coll] (if (next coll) \r\n             (recur (next coll))\r\n\t\t\t       (first coll)))","problem":19,"user":"4f044285535dcb61093f6bb5"},{"problem":19,"code":"(fn [coll]\n  (let [remain (next coll)]\n    (if remain (recur remain) (first coll))))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn [items] (nth items (- (count items) 1)))","problem":19,"user":"4e7d2686535db169f9c796c9"},{"problem":19,"code":"(fn [list]\n  (let [h (first list) t (rest list)]\n  \t(if (= [] t) h (recur t))\n   )\n )","user":"57f3f2bee4b07bbd65c32b1a"},{"problem":19,"code":"(fn my-last [alist]\n  (if (= (rest alist) '())\n  \t(first alist)\n  \t(my-last (rest alist))))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":19,"code":"(fn las [x]\n  (if (= (count x) 1)\n    (first x)\n    (las (rest x))))","user":"57027310e4b08d47c97781e2"},{"code":"(fn mylast [x]\n  (if (next x)\n    (recur (next x))\n    (first x))\n  )","problem":19,"user":"52919635e4b0239c8a67af1a"},{"problem":19,"code":"(fn [[x & xs]] (loop [x x, xs xs] (if (= xs '()) x (recur (first xs) (drop 1 xs)))))","user":"56433d34e4b08d4f616f5f23"},{"problem":19,"code":"(fn get-last [sequence]\n  (loop [sequence sequence]\n    (if (= ( (fn len [sequence]\n    (loop [sequence sequence, res 0]\n        (if (seq sequence)\n            (recur (rest sequence) (inc res))\n            res))) sequence) 1)\n      (first sequence)\n      (recur (rest sequence)))))","user":"587bead1e4b01531a375eb0d"},{"problem":19,"code":"reduce (fn [coll val] val)","user":"5e5349ebe4b027a2e10ac0e2"},{"problem":19,"code":"(fn [coll]   (nth coll (dec (count coll))))","user":"586b6753e4b01531a375e956"},{"problem":19,"code":"#(->> (reverse %)\n      (first))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"(fn [coll] (first (take-last 1 coll)))","problem":19,"user":"51181009e4b0e0897831a60f"},{"code":"(fn [in]\n  (if-let [r (next in)]\n    (recur r)\n    (first in)))","problem":19,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn ultimo [sq]\n  (cond \n   (empty? (rest sq)) (first sq)\n        :else (ultimo (rest sq))))","problem":19,"user":"50481d0de4b0ec70b3ef8d99"},{"problem":19,"code":"(fn my-last [s]\n  (loop [f nil r s]\n    (if (empty? r)\n      f\n      (recur (first r) (rest r)))))","user":"5b774e66e4b047b03b2036ec"},{"problem":19,"code":"(fn [x]\n\t(nth x (- (count x) 1)))","user":"571bc0a1e4b07c98581c3b6c"},{"code":"(fn asfd [x] (first (reverse x)))","problem":19,"user":"4f0c76f9535d0136e6c2230d"},{"code":"(fn [vctr] (nth vctr (- (count vctr) 1)))","problem":19,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":19,"code":"(fn [s] (-> s\n            reverse\n            first))","user":"5ff8c2eae4b06df49cee14a9"},{"code":"(fn get-last[l] \n  (if (empty? (rest l)) \n    (first l)\n    (get-last (rest l))\n  )\n)","problem":19,"user":"530b8ce1e4b02e82168697cd"},{"problem":19,"code":"reduce (fn [acc item] item)","user":"5e15cb00e4b0a047bd49f709"},{"code":"(fn rec [s]\n  (let [xs (rest s)]\n    (if (empty? xs)\n      (first s)\n      (rec (rest s)))))","problem":19,"user":"52aa524fe4b0c58976d9ac64"},{"code":"(fn [x] (let [els (dec (count x))\n              ] (nth x els)))","problem":19,"user":"5143f300e4b0b4fb4ace5f3e"},{"code":"(fn [x] (first (reverse x ) ) )","problem":19,"user":"51fb4a9be4b0f1313d4689ff"},{"problem":19,"code":"(fn  [ [x & rs] ] (if (empty? rs) x (recur rs)))","user":"5433a07be4b0b6b47310fce0"},{"problem":19,"code":"(fn last-elm [x] (nth x (- (count x) 1)))","user":"5aafa486e4b073f17744259b"},{"problem":19,"code":"(comp first reverse)\n;Not lazy","user":"5e228b5ae4b05b4b01516134"},{"code":"(fn mylast [x] (if (= (count x) 1)\n          (first x)\n          (mylast (rest x))))","problem":19,"user":"512113b6e4b0ca414459ae93"},{"problem":19,"code":"(fn[array]\n  (first (reverse array))\n  )","user":"55240916e4b0882d96d091b6"},{"problem":19,"code":"(fn [s] (if (> (count s) 1)\n                    (recur(rest s))\n                    (first s))\n            )","user":"5727cf87e4b0c5bde472c147"},{"problem":19,"code":"(fn [xs] (nth xs (- (count xs) 1) ))","user":"562108d0e4b064ca9f4b16e9"},{"problem":19,"code":"(fn foo [s]\n  (if (= (rest s) '())\n    (first s)\n    (foo (rest s))\n  )\n)","user":"54ec1eafe4b024c67c0cf851"},{"code":"(fn [x] (let [len (count x)] (nth x (dec len))))","problem":19,"user":"519be011e4b0a1d87b00344e"},{"code":"(fn mylast [x] (if (empty? (rest x))\n                   (first x)\n                   (mylast (rest x))))","problem":19,"user":"4e7e2830535db169f9c79706"},{"problem":19,"code":"(fn lastelem [list] (nth list (- (count list) 1)))","user":"53c96d9fe4b00fb29b2212bf"},{"code":"(fn [s] (nth s (- (count s) 1)))","problem":19,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":19,"code":"(fn [alist] \n (nth alist (- (count alist) 1)))","user":"561a9e3be4b053970a773b09"},{"code":"(fn mylast [x]\n      (if (= (count x) 1)\n          (first x)\n          (mylast (rest x))\n      )\n)","problem":19,"user":"51f00589e4b0249c592fbdfb"},{"problem":19,"code":"(fn [v]\n  (-> v\n    (reverse)\n    (first)))","user":"594db24ce4b07ddc2dafae98"},{"code":"(fn my-last [xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (my-last (rest xs))))","problem":19,"user":"514e5fb6e4b019235f6c0595"},{"code":"(fn my-last [ls] (if (empty? (rest ls)) (first ls) (my-last (rest ls))))","problem":19,"user":"518df0f0e4b0c929d50502e1"},{"problem":19,"code":"#(first(into '() %))","user":"5c61297ce4b0fca0c1622629"},{"code":"(fn [li] (nth li (- (count li) 1)))","problem":19,"user":"4fc3b0d4e4b081705acca343"},{"problem":19,"code":"#(-> (reverse %)(first))","user":"57a99d3fe4b0a96607956231"},{"problem":19,"code":"(fn [x] (let [[v & more] x] (if (empty? more) v (recur more))))","user":"547e48bee4b0c51c1f4d7304"},{"problem":19,"code":"(fn [lst] (-> lst reverse first))","user":"51c116d4e4b0c9c822882942"},{"code":"(fn hello [x] (if (next x) (hello (next x)) (first x)))","problem":19,"user":"52a5f1e6e4b0c58976d9abf4"},{"code":"(fn lst[x]\r\n  (if (= nil (next x)) \r\n    (first x) \r\n    (lst (next x)) \r\n  )\r\n)","problem":19,"user":"4f245d77e4b0d66497709feb"},{"code":"(fn [x] (if (not (= 1 (count x))) (recur (rest x)) (first x)))","problem":19,"user":"501fed56e4b0cb6ebc0a42f0"},{"problem":19,"code":"(fn my-last\n    [myseq]\n    (loop [iteratee myseq]\n        (if (= (rest iteratee) '())\n        (first iteratee)\n        (recur (rest iteratee))\n        )))","user":"57974188e4b039eba2ecb0f4"},{"problem":19,"code":"(fn p19 [l]\n  (nth l (- (count l) 1)))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":19,"code":"(fn fun[s] (nth s (- (count s) 1 )))","user":"5e0581ece4b0a607a9a45d7c"},{"problem":19,"code":"(fn get-last [leest] (if (= (rest leest) []) (first leest) (get-last (rest leest))))","user":"550f80c1e4b06e50f9beb178"},{"code":"(fn beh [x]\n  (if (= 1 (count x)) (first x)\n    (beh (rest x))))","problem":19,"user":"52747090e4b03e8d9a4a74a5"},{"problem":19,"code":"(fn takelast [x] (nth x (- (count x) 1)))","user":"58eba5cce4b056aecfd47d41"},{"problem":19,"code":"(fn rev11 [x]\n        (if\n          (empty? (rest x))\n          (first x)\n          (rev11 (rest x))\n          ))","user":"5eccbce6e4b016b56eae058e"},{"code":"(fn [args]\n        (if (next args)\n               (recur (next args))\n               (first args)))","problem":19,"user":"4f51b9f3e4b03ad3f0c10d2b"},{"problem":19,"code":"(fn my-last[x] (nth x (dec (count x)) ))","user":"539f9f79e4b0ca733b97449e"},{"problem":19,"code":"#(loop [[f & r] %]\n   (if (= 0 (count r))\n     f\n     (recur r)))","user":"56cf115de4b0ea9b8538f765"},{"problem":19,"code":"(fn getLast [list] \n  \t(let [f (first list) \n  \t\t\tr (rest list)]\n      (if (empty? r) f (getLast r))\n    )\n)","user":"5413adfee4b01498b1a719e4"},{"code":"#(nth %(- (count %) 1))","problem":19,"user":"50415118e4b06d8231e4face"},{"code":"(fn le [x]  (first (reverse x)))","problem":19,"user":"522080fde4b0e6a83c89259e"},{"problem":19,"code":"(fn lst [x] (first ( reverse x ) ))","user":"59e66ac5e4b08badc2a0c570"},{"problem":19,"code":"(fn [x]\n\t(first (reverse x)))","user":"5beda934e4b0a6d31fed2123"},{"problem":19,"code":"(fn last_thing\n  [the_list]\n  (first (reverse the_list)))","user":"5573392fe4b0aa18f790f3f8"},{"code":"(fn [a-seq]\n  (first (reverse a-seq)))","problem":19,"user":"531dc21be4b08068f379edb1"},{"problem":19,"code":"(fn [[head & more]]\n  (if more\n    (recur more)\n    head))","user":"53e57ba2e4b036ad0777e45c"},{"code":"(fn last* [coll]\n\n  (if (next coll)\n\n    (recur (next coll))\n\n    (first coll)))","problem":19,"user":"534eb269e4b084c2834f4aba"},{"code":"(fn lastElement [array] (first (reverse array)))","problem":19,"user":"53297965e4b09d4e7a9b5511"},{"problem":19,"code":"(fn [x]\n (first\n  (reverse x)\n  )\n )","user":"5a6f3162e4b0512ff01cda7a"},{"code":"(fn find-last [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (find-last (rest lst))))","problem":19,"user":"50104ccfe4b04c11913f949e"},{"problem":19,"code":"#(get (vec %) (-> % count (- 1)))","user":"59826556e4b021a7a535fdfe"},{"problem":19,"code":";;(comp first reverse)\n\n(fn [xs] (first (reverse xs)))","user":"5714614ee4b07c98581c3abd"},{"problem":19,"code":"(fn f [l] (if (empty? (rest l))\n            (first l)\n            (f (rest l))))","user":"595930f6e4b066ee0a44af9c"},{"problem":19,"code":"#(let [c (count %)] (nth % (dec c)))","user":"595c02a9e4b066ee0a44afeb"},{"problem":19,"code":"(fn  \n  [col]\n  (loop [auxCol col  j 0 res []]\n    (let [i (first auxCol)]\n      (if (nil? (second auxCol)) \n        i\n           (recur (rest auxCol) (inc j) (conj res i))\n           \n    ))))","user":"5be589f9e4b0ed4b8aab4d13"},{"problem":19,"code":"(fn  [s]\n  (let [sn (next s)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first s))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn lst [x]\n  (cond\n    (nil? (first (rest x))) (first x)\n    :else (lst (rest x))))","problem":19,"user":"4e89559c535d4ef0aa30db9a"},{"problem":19,"code":"#(if (empty? (rest %))\n                    (first %)\n                    (recur (rest %)))","user":"5075e374e4b09049dea827a5"},{"code":"(fn mlast [[fst & more]] (if more (mlast more) fst))","problem":19,"user":"4f3ae998e4b0e243712b1f1f"},{"code":"(fn lastel\n  ([coll]\n    (lastel coll nil))\n  ([coll el]\n    (if (empty? coll)\n      el\n      (recur (next coll) (first coll)))))","problem":19,"user":"4e48ded5535dc968683fc4bf"},{"problem":19,"code":"( fn [x] ( first ( reverse x ) ) )","user":"550c81c6e4b06e50f9beb150"},{"problem":19,"code":"(fn [x] (if (= (second x) nil)\n          (first x)\n          (recur (rest x))))","user":"553ab85ce4b09218d5f44ffa"},{"problem":19,"code":"(fn last_elm [sequ]\n    (if (= 1 (count sequ))\n        (first sequ)\n        (last_elm (rest sequ))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [coll] (first (reverse coll)))","problem":19,"user":"4defd021535d08e6dec9fe13"},{"code":"(fn [orig-list] (loop [list orig-list]\r\n                  (when (>= (count list) 1)\r\n                    (if (= (count list) 1)\r\n                      (first list)\r\n                      (recur (rest list))))))","problem":19,"user":"52ed4659e4b0a18b0f5dd9ea"},{"code":"(fn [[n & more]]\n  (if more\n    (recur more)\n    n))","problem":19,"user":"50bd13dee4b0594b91591c65"},{"problem":19,"code":"(fn [coll]\n  (loop [c coll]\n    (if (seq (rest c))\n      (recur (rest c))\n      (first c))))","user":"54487527e4b032a45b8693cc"},{"code":"(fn my-last [[x & r]]\n  (if r (my-last r) x))","problem":19,"user":"4f1103c7535d64f60314641e"},{"problem":19,"code":"(fn last-lst\n  [lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (last-lst (rest lst))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":19,"code":"(fn lastElem [l] (nth l (- (count l) 1)))","user":"5d10e07ae4b02c15ef02197f"},{"problem":19,"code":"(fn [niz] \n  (nth niz (dec(count niz))))","user":"58a5eac3e4b01a0c0b23291e"},{"problem":19,"code":"(fn [x]  (nth x (dec (count x) ) )  )","user":"57d95f37e4b0bd073c2023fc"},{"problem":19,"code":"(fn f [xs] \n  (if (= (count xs) 1) (first xs) (f (rest xs))))","user":"57c9947de4b05aa3c4741d30"},{"code":"(fn my-last [coll] (first (reverse coll)))","problem":19,"user":"4ffdaa85e4b0678c553fc3e6"},{"problem":19,"code":"#(if (= (count (rest %)) 0)\n   (first %)\n   (recur (rest %)))","user":"5e10d1e6e4b099d064962fcf"},{"code":"(fn [coll]\n  (nth coll (count (butlast coll))))","problem":19,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":19,"code":"(partial reduce (fn [a b] b) )","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":19,"code":";; reduce (fn [x y] y)\n(fn [x] ((vec x) (dec (count x))))","user":"56cda514e4b0ea9b8538f74e"},{"code":"(fn [x] (\n         if (empty? (rest x))\n         \t(first x)\n         \t(recur (rest x))\n         ))","problem":19,"user":"50ed5d1be4b06330c1f87c37"},{"problem":19,"code":"(fn _last[xs] \n  (if (empty? (rest xs)) \n    (first xs) \n    (_last (rest xs))))","user":"56ae6776e4b03c432f18735e"},{"problem":19,"code":"(fn [s]\n  (loop [n (next s)]\n    (if (next n) (recur (next n))\n      (first n))))","user":"58303fc3e4b051871117c006"},{"code":"reduce #(identity %2)","problem":19,"user":"4e0e0529535d04ed9115e7b9"},{"problem":19,"code":"(fn [x] \n  (->> x\n       reverse\n       first))","user":"554b8b6be4b0a04f7929958b"},{"code":"(fn my-last\n  [seq]\n  (loop [[x & more] seq]\n    (if (empty? more)\n      x\n      (recur more))))","problem":19,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn ultimo [[n & more]]\n  (if more\n    (recur more)\n    n))","problem":19,"user":"5112f1a1e4b0350614f07a82"},{"problem":19,"code":"(fn [c] (let [n (count c)] (nth c (dec n))))","user":"572ad0fde4b0f4d77e651244"},{"code":"(fn last-element [s]\n  (peek (vec s)))","problem":19,"user":"524d9297e4b0a16e35cf6def"},{"problem":19,"code":"(fn\n\t[lst]\n\t(nth lst (- (count lst) 1)))","user":"57f81544e4b0d3187e900917"},{"problem":19,"code":"(fn [elements] (nth elements (dec (count elements))))","user":"54e7622ce4b024c67c0cf814"},{"code":"(fn [x] (first (drop (dec (count x)) x)))","problem":19,"user":"4f7219d8e4b07046d9f4f01d"},{"problem":19,"code":"(fn [coll] (if (= () (rest coll))\n     (first coll)\n     (recur (rest coll))))","user":"53dad484e4b0e771c30254ac"},{"code":"(fn [elem]\r\n    (let [remain (rest elem)]\r\n      (if (empty? remain)\r\n        (first elem)\r\n        (recur remain))))","problem":19,"user":"5048f98ee4b06e644c63f1af"},{"problem":19,"code":"#(let [[x & r] %] (if (coll? r) (recur r) x))","user":"54874116e4b0e286459a11c3"},{"code":"#_(fn [s] (nth s (dec (count s))))\n(fn [s] (->> s count dec (nth s)))","problem":19,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":19,"code":"(fn foo [[x & rem]]\r\n   (if (nil? rem)\r\n       x\r\n       (foo rem)))","user":"606e0a42e4b069485764de19"},{"problem":19,"code":"; last\n(fn[x] (nth x (- (count x) 1)))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn last-spec [x]          \n  (if (empty? (rest x))\n    (first x)\n    (last-spec (rest x))))","problem":19,"user":"50e1d3c9e4b0ae09a0e7de74"},{"problem":19,"code":"#(loop [[elem & rst] %]\n   (if (nil? rst)\n     elem\n     (recur rst)))","user":"54dd3bdde4b024c67c0cf791"},{"code":"(fn [col]\n  (nth col (- (count col) 1)))","problem":19,"user":"4e86fd2d535dceadca46984d"},{"problem":19,"code":"(fn mylast [x] \n  (if (empty? (rest x))\n    (first x)\n    (mylast (rest x))))","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":19,"code":";(fn [list] (first (reverse list)))\n(fn [list] (nth list (- (count list) 1)))","user":"5759b0e6e4b02ea114799326"},{"code":"(fn LAST [s]\n  (if (next s)\n    (recur (next s))\n      (first s)))","problem":19,"user":"4e68d816535d8ccf87e9fe8e"},{"code":"(fn lst [x] (if (nil? (next x)) (first x) (lst (next x))))","problem":19,"user":"4de0ff03535d08e6dec9fde4"},{"problem":19,"code":"(fn [myList]\n  (nth myList (- (count myList) 1)))","user":"5f998847e4b0715f5002d813"},{"code":"(fn find-last [x] (if(= () (rest x)) (nth x 0) (find-last (rest x))))","problem":19,"user":"4e4482b3535dc968683fc4ab"},{"problem":19,"code":";(comp first reverse)\n\n;#(nth % (dec (count %)))\n\n#(first (reverse %))","user":"5c5b7f51e4b01df32ab7328f"},{"problem":19,"code":"(fn last-one [x] (if (> (count x) 1) (last-one (rest x)) (first x)))","user":"58333b19e4b089d5ab817c94"},{"code":"(fn lst [se]\n  (if (> (count se) 1) (lst (rest se)) (first se)))","problem":19,"user":"4fe9fce4e4b0547ebccb247e"},{"code":"#(loop [i %] (if (second i) (recur (rest i)) (first i)))","problem":19,"user":"50c99e3ee4b0bed41a122997"},{"code":"(fn zzz [x] (let [f (first x) r (rest x)] (if (first r) (zzz r) f)))","problem":19,"user":"51f873a5e4b09be9c177e52e"},{"problem":19,"code":"(fn [s]\n  (loop [tail (next s) head (first s)]\n    (if-not tail\n      head\n      (do\n        (recur (next tail) (first tail))))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"(fn [s] (first (drop (dec (count s)) s)))","problem":19,"user":"4f989e48e4b0dcca54ed6cf3"},{"problem":19,"code":"(fn [coll]\n  (let [length (count coll)]\n    (nth coll (- length 1))))","user":"56ee905be4b04a395b9a044f"},{"code":"(fn [x] (if (not-empty (rest x)) (recur (rest x)) (first x)))","problem":19,"user":"50820c3be4b0946d04438570"},{"problem":19,"code":"(fn my-last [col] (nth col (- (count col) 1)))","user":"5a4832dde4b05d388ecb6b65"},{"code":"#(nth %( - (count %) 1))","problem":19,"user":"504e4035e4b0f6ff3350c490"},{"problem":19,"code":"(fn last2 [x]\n  (if (empty? (rest x))\n  \t(first x)\n    (last2 (rest x))\n    ))","user":"541928e0e4b01498b1a71a21"},{"code":"(fn [seq] \n  (if (next seq)\n    (recur (next seq))\n    (first seq)))","problem":19,"user":"4f8490fae4b033992c121c34"},{"code":"(fn my-last [s]\n        (if (next s)\n          (recur (next s))\n          (first s)))","problem":19,"user":"4e967c4a535dbda64a6f6b47"},{"code":"(fn [s] (loop [[f & r] s] (if (seq r) (recur r) f)))","problem":19,"user":"506ab9bae4b05d3b7762c74c"},{"problem":19,"code":"(fn f ([[car & cdr]] (if (empty? cdr) car (f (rest cdr)))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"problem":19,"code":"#(nth % ( dec(count %)))","user":"5f1e704ee4b0f565ad998270"},{"problem":19,"code":"(fn lastel [x] (first(reverse x)))","user":"5c8aa1b5e4b048ec896c5959"},{"problem":19,"code":"(fn end [s] (if (empty? (rest s)) (first s) (end (rest s))))","user":"578475b6e4b0ebec4cfb74c6"},{"problem":19,"code":"(fn thelast [sqnc] (if (= 1 (count sqnc)) (first sqnc) (thelast (rest sqnc))))","user":"58acce0ae4b0005cfeb1a754"},{"problem":19,"code":"(fn [coll] \n  (loop [c coll] \n    (if (= 1 (count c)) \n      (first c) \n      (recur (rest c)))))","user":"575e723ae4b0846ea39baf27"},{"problem":19,"code":"(fn mylast [[first & rest]] (if (empty? rest) first (mylast rest)))","user":"54f5fb57e4b0f2f3c5226e9f"},{"problem":19,"code":"(fn da-last\n  [x]\n  (if (empty? (rest x))\n    (first x)\n    (da-last (rest x))))","user":"55a5e2f7e4b0acc240e31550"},{"code":"(fn [seq_d] \n    (nth seq_d (- (count seq_d) 1)))","problem":19,"user":"4f61be97e4b0defedf855fc5"},{"code":"(fn [[h & t]] (if (nil? t) h (recur t)))","problem":19,"user":"4fc1487ae4b081705acca32d"},{"problem":19,"code":"(fn [s] \n  (reduce (fn [a b] (identity b)) s)\n)","user":"567b9ff7e4b05957ce8c61a9"},{"problem":19,"code":"(fn give-last [list] (nth list (dec (count list))))","user":"5e15f824e4b0a047bd49f70f"},{"problem":19,"code":"reduce (fn [a c] c)","user":"5daae405e4b000c986472c44"},{"code":"(fn [a-seq] (first (reverse a-seq)))","problem":19,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":19,"code":"#(->> (count %) (dec) (nth %))","user":"5585ff2ee4b001b0851d7514"},{"problem":19,"code":"(fn findlast [x] \n  (if (empty? (rest x)) \n    (first x) \n    (findlast (rest x))))","user":"5c34285de4b0d62ef62d9f4f"},{"code":"#(let [v (vec %)] (v (- (count v) 1)))","problem":19,"user":"5367c374e4b0243289761e83"},{"problem":19,"code":"(fn[c] (nth c (- (count c) 1)))","user":"57596e78e4b02ea11479931c"},{"problem":19,"code":"; #(nth % (dec (count %)))\n(comp first reverse)","user":"51f38193e4b0fca5e8b48226"},{"problem":19,"code":"(fn [seq] \n  (reduce (fn [acc n] n) 0 seq))","user":"5e9364f0e4b0fbed045a37f4"},{"problem":19,"code":"(fn [coll]\n  (if (> (count coll) 1)\n    (recur (rest coll))\n    (first coll)))","user":"5dae7b05e4b0f8c104ccfc89"},{"code":"(fn [coll] \n  (reduce (fn [x y] (if y y x)) coll))","problem":19,"user":"53028ec0e4b0d8b024fd372d"},{"code":"(fn [params]\n  (loop [head (first params)\n         tail (rest params)]\n    (if (= tail []) \n      head\n      (recur (first tail) (rest tail)))))","problem":19,"user":"52d2e2a9e4b099d49816f0b8"},{"problem":19,"code":"(fn my-last\n  [coll]\n  (if-let [s (next coll)]\n    (recur s)\n    (first coll)))","user":"56180d83e4b06b1bb2182a18"},{"code":"(fn foo [x] ( let [y (rest x)] ( if (empty? y) (first x) (recur y) ) ))","problem":19,"user":"4ef19836535dced4c769f217"},{"code":"#(nth % ( - (count %) 1))","problem":19,"user":"4f3c8555e4b0e243712b1f4d"},{"code":"(fn final [s]\n  (first (reverse  s)))","problem":19,"user":"4f24957ae4b0d66497709fed"},{"problem":19,"code":"(fn [[n & more]] \n   (if more \n     (recur more)\n     n))","user":"568bddaee4b0dcc4269f40aa"},{"code":"#(loop [[x & xs] %] (if (seq xs) (recur xs) x))","problem":19,"user":"51435753e4b0c172af7558d5"},{"code":"(fn last-c [x] (nth x (- (count x) 1)))","problem":19,"user":"52a5a130e4b0c58976d9abec"},{"code":"(fn \n    [x]\n    (if (> (count x) 1)\n        (recur (rest x))\n        (first x)))","problem":19,"user":"4f4daa4ae4b03ad3f0c10cac"},{"code":"(fn [els] (nth els (- (count els) 1)))","problem":19,"user":"529735cbe4b02ebb4ef7503c"},{"problem":19,"code":"(fn [l] (peek (if (reversible? l) l (into [] l))))","user":"5e4352a6e4b01d43a70e8e72"},{"code":"(fn [x] \n  (if (empty? (seq (rest x)))\n    (first x)\n    (recur (rest x))))","problem":19,"user":"4e84e81f535db62dc21a62e4"},{"code":"(fn [ls] \n  (if (= (second (rest ls)) nil) \n    (first (rest ls))\n    (recur (rest ls))))","problem":19,"user":"4e5c538c535d8a8b8723a2c0"},{"code":"(fn my_last [x] (first (reverse x)))","problem":19,"user":"5074b97ae4b054001656acd6"},{"code":"(fn lastitem [x] (first (reverse x)))","problem":19,"user":"50a0267fe4b08df8156e9e4a"},{"problem":19,"code":"(fn my-last [[f & r]] (if (= 0 (count r)) f (recur r)))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":19,"code":"(fn [[x & r]] (if (nil? r) x (recur r)))","user":"59ee3060e4b0966464fe6a12"},{"code":"#(loop [s % l nil]\n    (if (= '() s)\n     l\n     (recur (rest s) (first s))))","problem":19,"user":"4e8ad247535d65386fec2111"},{"problem":19,"code":"(fn[s](first (reverse s)))","user":"53d10553e4b00fb29b22130f"},{"code":"(fn final [x]\n  ((vec x) (- (count x) 1))\n)","problem":19,"user":"4f03e486535dcb61093f6b78"},{"problem":19,"code":"(fn [ls] (loop [[head & tail] ls]\n          (if (empty? tail)\n            head\n            (recur tail))))","user":"57ad3b90e4b0b8559636fc9b"},{"code":"(fn this [s]\n  (if-let [x (next s)]\n    (recur x)\n    (first s)))","problem":19,"user":"4e68c434535d8ccf87e9fe89"},{"problem":19,"code":"(fn getlast [s] (\n                 if (identical? s '()) \n                 false\n                 (or (getlast (rest s))\n                     (first s)\n                     )\n                 )\n  )","user":"57539e04e4b02ea1147992ab"},{"code":"reduce (fn [_ b] b)","problem":19,"user":"4ea836b6535d7eef308072f4"},{"code":"(fn return-last-from-coll2\n  [coll]\n  (loop [x coll]\n    (if (empty? (rest x))\n      (first x)\n      (recur (rest x)))))","problem":19,"user":"51c2973ae4b0d204dbe2ca23"},{"code":"(fn last-element[x]\n\t(first(reverse x)))","problem":19,"user":"52f928c1e4b047fd55836fe5"},{"code":"(fn [[first_item & rest_items]]\n  (if (= rest_items nil)\n    first_item\n    (recur rest_items)))","problem":19,"user":"512f4ed7e4b0762be4c7aad9"},{"code":"(fn lst [s] \r\n  (if (next s)\r\n    (recur (next s))\r\n    (first s) \r\n  ))","problem":19,"user":"4dcd327b535d5973398f929b"},{"problem":19,"code":"(fn [[& x]] \n   (reduce \n    (fn [x y]\n      y\n      )\n    [] x)\n  )","user":"544fb010e4b0e39780006997"},{"code":"(fn fin [x] (first (reverse x )))","problem":19,"user":"50edcc53e4b06330c1f87c49"},{"problem":19,"code":"(fn momo [x] (first (reverse x)))","user":"55a07beee4b0acc240e314f9"},{"code":"#(first ( reverse %))","problem":19,"user":"4fb91026e4b081705acca2d9"},{"problem":19,"code":"(fn [things] (first (reverse things)))","user":"5621251be4b064ca9f4b16ee"},{"problem":19,"code":"(fn my-last [[arg & args]]\n  (loop [x arg xs args]\n    (if (empty? xs)\n      x\n      (let [[y & ys] xs]\n        (recur y ys)))))","user":"56714922e4b05957ce8c6107"},{"problem":19,"code":"(fn get-last [x]\n\t(if (nil? (first (rest x)))\n      \t(first x)\n\t\t(get-last (rest x))))","user":"52b7e163e4b0c58976d9ad54"},{"code":"#(nth  % (- (count %) 1))","problem":19,"user":"4f1e5ce5535d64f603146497"},{"code":"(#(comp first reverse))","problem":19,"user":"52b5137de4b0c58976d9ad36"},{"problem":19,"code":"(fn [seq_] (first (\n            loop [x seq_](\n                          if(= (count x) 1)\n                          x\n                          (recur (rest x))))))","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"code":"(fn last-by-trick [myseq] (first (reverse myseq)))","problem":19,"user":"511a9fc2e4b0c87c59c96709"},{"problem":19,"code":"#(reduce (fn [x,y] y) %)","user":"53f8f979e4b0de5c41848571"},{"code":"(fn [x & y] (first (reverse (concat x y))))","problem":19,"user":"52f163dfe4b05e3f0be25eeb"},{"code":"(fn find-last [seq]\n  (if (= (rest seq) []) \n    (first seq)\n    (find-last (rest seq))\n  )\n)","problem":19,"user":"4f8875bae4b033992c121c63"},{"problem":19,"code":"(fn [lst] (.get lst (dec (count lst))))","user":"5613c76ce4b05f002753dfa7"},{"code":"#(let [rest (rest %)]\n  (if (= () rest)\n    (first %)\n    (recur rest)))\n\n;;  (comp first reverse)","problem":19,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":19,"code":"(fn [xs]\n  (nth xs \n       (- (count xs) 1)))","user":"5b22ba1ae4b08b1df1c3674b"},{"code":"(fn alast [x] (first (reverse x)))","problem":19,"user":"5071f3b4e4b0e3170b5a8686"}]