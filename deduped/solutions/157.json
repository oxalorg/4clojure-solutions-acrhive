[{"problem":157,"code":"(fn [n] (map vector n (range)))","user":"5c7741dce4b0fca0c1622806"},{"code":"#(map vector % (range 3))","problem":157,"user":"509eeb3be4b08df8156e9e37"},{"code":"(fn [s]\r\n  (map-indexed (fn [i e] [e i]) s))","problem":157,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":157,"code":"(fn[lst]\n(map reverse (map-indexed vector lst)))","user":"5a99b844e4b0d174b936c7ab"},{"problem":157,"code":"(fn\n  [s]\n  (map-indexed (fn [idx itm] \n                 (seq [itm idx])) s))","user":"5f3abd21e4b004f08c61c52c"},{"problem":157,"code":"(fn [lst]\n    (map-indexed \n     (fn [idx itm] [itm idx])\n     lst))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":157,"code":"#(map-indexed (fn [i a] [a i]) %)","user":"5b59d176e4b02d533a91bd86"},{"code":"(fn my-index [coll]\n      (let [collLen (count coll)\n            indList (range collLen)\n            ]\n        (map #(list % %2) coll indList)\n        )\n      )","problem":157,"user":"536827f1e4b0243289761e8a"},{"code":"(fn [a] (map-indexed #(list %2 %) a))","problem":157,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":157,"code":"(fn[xs] (map-indexed #(vector %2 %1) xs))","user":"5627d09ce4b00e49c7cb47db"},{"code":"(fn [s]\n  (map list s (range 0 10)))","problem":157,"user":"4dfe65a1535d04ed9115e787"},{"problem":157,"code":"(fn [xs] (into [] (map vector xs (range 0 (count xs)))))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn [xs] (map #(vector %1 %2) xs (range)))","problem":157,"user":"4fa6a491e4b081705acca1bc"},{"problem":157,"code":"(fn [x] (map vector x (take (count x) (range (count x)))))","user":"593c1e3be4b069cdc2982b86"},{"code":"(fn[s] (partition 2 (interleave s (range 10))))","problem":157,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"#(reverse (into [] (zipmap % (range))))","problem":157,"user":"4eb44d78535d7eef30807360"},{"problem":157,"code":"#(map (fn [& args] args) % (range (count %)))","user":"53a739b0e4b0ef122a8689d0"},{"code":"#(reverse (into [] (zipmap % (range (count %)))))","problem":157,"user":"4e70a7c1535d5021c1a8963c"},{"code":"(fn [s]\n  (loop [so-far []\n         to-go s\n         i 0]\n    (if (empty? to-go)\n      so-far\n      (recur\n        (conj so-far [(first to-go) i])\n        (rest to-go)\n        (inc i)))))","problem":157,"user":"4e42f930535dc968683fc49f"},{"problem":157,"code":"(partial map-indexed (fn [i x] [x i]))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":157,"code":"(fn mapindex [coll]\n  (for [i (range (count coll))]\n    [(get coll i) i]))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn [s]\n  (map list s (range)))","problem":157,"user":"4f569218e4b0a7574ea71826"},{"code":"#(partition 2 2 (interleave % (range)))","problem":157,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn [xs] (map (fn [x n] [x n]) xs (range (count xs))))","problem":157,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":157,"code":"(fn indexing\n  [coll]\n  (loop [[x & xs] coll res [] start 0]\n    (if x\n      (recur xs (conj res [x start]) (inc start))\n      res)))","user":"550d9452e4b06e50f9beb15d"},{"problem":157,"code":"(fn [coll]\n  (map #(vector %1 %2) coll  (range 0  (count coll)) \n   ))","user":"579601c8e4b0e215f87e8492"},{"problem":157,"code":"(fn [lst]\n\t(map vector lst (range 0 (count lst))))","user":"5bcb672ee4b07a9b28b10100"},{"code":"(fn [xs] (map list xs (range)))","problem":157,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":157,"code":";; nicest: (fn [s] (map vector s (range)))\n(fn [s]\n  (loop [res () r s i 0]\n    (if (empty? r)\n      (reverse res)\n      (recur (conj res [(first r) i]) (rest r) (inc i)))))","user":"554756b8e4b0a04f79299549"},{"problem":157,"code":"(fn [s] (loop [ctr 0\n               se s\n               memo []]\n          (if (empty? se)\n            memo\n            (recur (inc ctr) (rest se) (conj memo [(first se) ctr])))))","user":"565233f2e4b0f9d632dd8461"},{"problem":157,"code":"(fn [s]\n  (reduce (fn [acc elem]\n            (conj acc [elem (count acc)]))\n          [] s))","user":"56521a26e4b0f9d632dd845f"},{"problem":157,"code":"(fn [s]\n  (map (fn [x] [(nth s x) x])\n       (range (count s))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":157,"code":"(fn index-seq [coll]\n  (reduce (fn [xs x]\n            (conj xs [x (count xs)])) [] coll))","user":"5693a53ee4b0dcc4269f4106"},{"problem":157,"code":"(fn index [s]\n   (for [i (range (count s))]\n     [(nth s i) i]))","user":"54468fd3e4b032a45b8693b2"},{"problem":157,"code":"#(map-indexed (fn [index element] [element index]) %)","user":"53a26cede4b0f1fc7453882a"},{"problem":157,"code":"(fn [v]\n  (map-indexed #(-> [%2 %1]) v))","user":"55c4cda5e4b0e31453f649a5"},{"problem":157,"code":"(fn indexer [x]\n\t(map (fn [val index] [val index]) x (range (count x))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":157,"code":"(fn i-seq [sq]\n  (map vector sq (range))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":157,"code":"(fn [ss] (map (fn [s] (reverse s)) (map-indexed vector ss)))","user":"57f904c5e4b0d3187e900936"},{"problem":157,"code":"(fn [s] (keep-indexed (fn [i k] [k i]) s))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":157,"code":"(fn [v](map #(vector %1 %2) v (range )))","user":"535558b9e4b04ce2eb3ed25a"},{"code":"(fn indexed [seq]\n  (map vector seq (iterate inc 0)))","problem":157,"user":"4e8338d6535db62dc21a62d3"},{"problem":157,"code":"map-indexed (fn [x y][y x])","user":"567c63f6e4b05957ce8c61bb"},{"code":"map-indexed (fn [i j] [j i])","problem":157,"user":"5100d7dbe4b04f1d96d946df"},{"code":"(fn [s] (map #(vec [%1 %2]) s (range)))","problem":157,"user":"51f2851fe4b0210f90e7454b"},{"code":"(partial map-indexed #(vector %2 %))","problem":157,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":157,"code":"(fn [coll]\n   (map #(vector %1 %2) coll (range)))","user":"58a34442e4b02bd94d917ef2"},{"problem":157,"code":"#(->>\n  (range)\n  (interleave %)\n  (partition 2))","user":"598ab445e4b02b9968b84ce0"},{"problem":157,"code":"(fn [s] \n     (vec \n      (map #(vec (list %1 %2)) s (range))))","user":"554ea8fbe4b00713264bd999"},{"code":"(fn [s]\n    (map #(vector %1 %2) s (range (count s)))\n    )","problem":157,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [x]\n   (map list x (range)))","problem":157,"user":"4f409e29e4b0e243712b1fb6"},{"problem":157,"code":"(fn [s]\n  (loop [s1 s s2 [] i 0]\n    (if (empty? s1)\n      s2\n      (recur (rest s1)\n             (concat s2 [[(first s1) i]])\n             (inc i)))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":157,"code":"(fn [s] (map list s (range)))","user":"5553b924e4b0deb715856e06"},{"problem":157,"code":"(fn [coll]\n  (for [x (range (count coll))]\n    [(coll x) x]))","user":"55058a4fe4b086ebe8a79c89"},{"problem":157,"code":"(fn [s] (vec (map-indexed #(vector %2 %) s)))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn hey [x] (map reverse (map-indexed vector x)))","problem":157,"user":"52e17e66e4b09f7907dd1423"},{"code":"#(map list%(range))","problem":157,"user":"512f06c5e4b0762be4c7aad7"},{"problem":157,"code":"map #(vec [%2 %]) [0 1 2]","user":"539f4e9ee4b0ca733b974498"},{"problem":157,"code":"(fn seq-ind [coll]\n  (let [indexes (range 0 (count coll))]\n    (partition 2 (interleave coll indexes))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":157,"code":"(fn ix-sq [arr]\n    (map-indexed (fn [idx x]\n                   [x idx])\n                 arr))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":157,"code":"(fn [sq]\n  (map-indexed #(vector %2 %) sq))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn [s] (map-indexed #(vector %2 %1) s))","problem":157,"user":"4e8768f6535dceadca469850"},{"code":"(fn [l] (reduce #(conj % (list %2 (.indexOf l %2))) [] l))","problem":157,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":157,"code":"(fn [coll]\n    (map-indexed (fn [i x]\n                   [x i])\n                 coll))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":157,"code":"(fn [coll] (map-indexed #(-> [%2 %1]) coll))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":157,"code":"(fn [c]\n  (map-indexed #(list %2 %) c))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn [coll] (map-indexed (fn [idx item] (vector item idx)) coll))","problem":157,"user":"5244fa73e4b0d8acf9ed6acb"},{"code":"(fn [xs]\n  (map-indexed (comp reverse vector) xs))","problem":157,"user":"4dc537fd535d8a4b2fd74282"},{"problem":157,"code":"(fn [s] \n  (reduce \n    (fn [result index]\n      (conj result (vector (get s index) index)))\n    []\n    (range 0 (count s))))","user":"5989e080e4b021a7a535fed6"},{"problem":157,"code":"(fn [v] (reduce-kv (fn [av k v] (conj av [v k])) [] v))","user":"5744d088e4b009280f9f2b41"},{"problem":157,"code":"(fn [arr] (map-indexed #(vector %2 %1) arr))","user":"57acee37e4b0b8559636fc94"},{"problem":157,"code":"(fn [arr]\n  (map (fn [a b] [a b]) arr (range (count arr))))","user":"59636b43e4b066ee0a44b0c4"},{"code":"(fn [seq]\n  (map (fn [v i] [v i]) seq (iterate inc 0)))","problem":157,"user":"4e82c062535db62dc21a62cc"},{"problem":157,"code":"map-indexed (fn [index x] [x index])","user":"577629abe4b0979f8965162e"},{"code":"(fn [x]\n   (map (fn [a b] \n          (vector a b)\n          ) x (range (count x)))\n   )","problem":157,"user":"528ce039e4b0239c8a67aebc"},{"problem":157,"code":"(fn [coll]\n  (keep-indexed (fn [index item]\n                  [item index])\n                coll)\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":157,"code":"(fn [x] (map reverse (map-indexed list x)))","user":"56fee4c0e4b08d47c97781b5"},{"problem":157,"code":"(fn [s] (mapv vector s (range)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":157,"code":"(fn [lst] (map-indexed (fn [i x] [x i]) lst))","user":"59e18b9be4b08badc2a0c50f"},{"code":"#(map vector %1 (iterate inc 0))","problem":157,"user":"4f29eb2ae4b0d6649770a037"},{"problem":157,"code":"(fn ans-157 [arr]\n  (map-indexed \n   (fn [index item]\n     [item index])\n   arr\n   ))","user":"608fac60e4b03bd49d9f36c7"},{"code":"(fn [l](vec (map vector l  (vec (take (count l) (range (+ 1 (count l))))))))","problem":157,"user":"4eeccfc0535d93acb0a668b5"},{"code":"map-indexed (fn [x y] [y x])","problem":157,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":157,"code":";; Anything you type in here will be executed\n;; immediately with the results shown on the\n;; right.\n\n\n(fn\n  [seq]\n  (loop [result []\n         position 0\n         current (first seq)\n         remaining (rest seq)]\n    (if (= current nil)\n      result\n      (recur\n       (conj result [current position])\n       (+ position 1)\n       (first remaining)\n       (rest remaining)\n       ))))","user":"53ac4719e4b047364c04445c"},{"problem":157,"code":"(fn [sq] (map vector sq (range)))","user":"58225587e4b04b46fc4b0f94"},{"problem":157,"code":"#(loop [coll % idx 0 res []]\n \t (if (empty? coll)\n  \t\tres\n  \t\t(recur (rest coll) (+ idx 1) (conj res [(first coll) idx]))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn [n] (map-indexed #(vector %2 %1) n))","problem":157,"user":"4f072644535dcb61093f6c20"},{"code":"(fn [s]\n  (reduce #(conj %1 (vector %2 (.indexOf s %2))) [] s))","problem":157,"user":"5029fccee4b023940c84aa47"},{"problem":157,"code":"(fn [s]\n    (map-indexed #(vector %2 %1) s))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [ll] ((fn rr [l s] (if (empty? l) '() (cons [(first l) s] (rr (rest l) (inc s))))) ll 0))","problem":157,"user":"510931ede4b0c71f76895663"},{"problem":157,"code":"(fn [xs]\n   (for [i (range (count xs))]\n     [(nth xs i) i]))","user":"52cee992e4b07d0d72b27395"},{"code":"(fn j-idx-seq\n  [lst]\n  (loop [l lst i 0 final []]\n    (if (empty? l)\n      final\n      (recur (rest l) (+ i 1) (conj final [(first l) i])))))","problem":157,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":157,"code":"(fn [seq]\n  (map #(conj [%1] (.indexOf seq %1)) seq))","user":"5b337ff4e4b025bcb146f339"},{"problem":157,"code":"(fn [seq] (map #(vector %1 %2) seq (range (count seq))))","user":"5a512929e4b05d388ecb6be2"},{"problem":157,"code":"(fn [s] (map\n         vector\n         s\n         (range (count s))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":157,"code":"(fn indexSeq\n  [vct]\n  (loop [lst vct\n         iter 0\n         result []]\n    (if (empty? lst)\n      result\n      (recur (rest lst) (inc iter) (conj result [(first lst) iter])))))","user":"5e9636fee4b0fbed045a3816"},{"problem":157,"code":"#(loop\n\t[v %1\n\t i 0\n\t acc []]\n\t\t(if (empty? v)\n\t\t\tacc\n\t\t\t(recur\n               (rest v)\n               (inc i)\n               (conj acc [(first v) i]))))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn [x]\n  (let [indeces (map #(.indexOf x %) x)]\n    (partition 2 (interleave x indeces))))","problem":157,"user":"52474133e4b05ef8e38e635e"},{"problem":157,"code":"(fn [x]\n  (loop [c (first x)\n         r (rest x)\n         i 0\n         inds []]\n    (if (nil? c)\n      inds\n      (recur (first r) (rest r) (inc i) (conj inds [c i])))))","user":"5f3ddc71e4b004f08c61c551"},{"code":"(fn [c] (map-indexed (fn [i v] [v i]) c))","problem":157,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":157,"code":"(fn [c] (map-indexed #(vector %2 %)  c))","user":"53286f84e4b09d4e7a9b5505"},{"problem":157,"code":"(fn [v]\n  (loop [v v\n         res []\n         i 0]\n    (if (seq v)\n      (recur (rest v) (conj res [(first v) i]) (+ i 1))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn [x] (map #(list % %2) x (iterate inc 0)))","problem":157,"user":"52fa4f48e4b047fd55836ff7"},{"problem":157,"code":"(fn index [seq]\n  (for [x seq]\n    (let [res (empty seq)]\n    (concat [x (.indexOf seq x)] res))))","user":"5e18c885e4b0dc95940084fc"},{"problem":157,"code":"(fn [seq] (map vector seq (iterate inc 0)))","user":"57eb38dbe4b0bfb2137f5b5e"},{"problem":157,"code":"(fn [coll]\n    (map-indexed #(vector %2 %) coll))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [coll] \n  (map-indexed #(identity [%2 %]) coll))","problem":157,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn indexing-seq [coll]\n  (partition 2 (interleave coll (range (count coll)))))","problem":157,"user":"501c1492e4b086d93747d180"},{"problem":157,"code":"(fn associ [seqi]\n  (loop [elem seqi res () i 0]\n    (if (seq elem)\n    \t(recur (rest elem) (cons [(first elem) i] res ) (inc i))\n       (reverse res)\n     )))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":157,"code":"(fn [vek] \n  (map-indexed #(vector %2 %) vek))","user":"56785234e4b05957ce8c6177"},{"problem":157,"code":"(fn [seq_]\n  (loop [i 0 out []]\n    (if (= (count seq_) i)\n      out\n      (recur (inc i) (conj out [(nth seq_ i) i]))\n      )\n    )\n  )","user":"6059d824e4b07e92fa001acf"},{"problem":157,"code":"(fn [x]\n(let [index1 (take (count x) (iterate inc 0))]\n  (map vector x index1)\n)\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":157,"code":"(fn [coll]\n    (map-indexed\n     (fn [elem index]\n       [index elem])\n     coll\n     ))","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn [coll]\n  (map vector coll (iterate inc 0)))","problem":157,"user":"4f7e29dde4b06e829148e1ca"},{"problem":157,"code":"(fn  f\n  [lst]\n  (map #(vector (last %) (first %)) (map-indexed vector lst)))","user":"59e778aae4b0249b72820716"},{"code":"(fn [col] (map-indexed  (fn [index,element] [element index]) col  ) )","problem":157,"user":"50463347e4b011c5dfee771e"},{"problem":157,"code":"(fn [s] (map-indexed (fn [idx val] [val idx]) s))","user":"53fc63dce4b0de5c4184859f"},{"problem":157,"code":";(fn index[n s] (reduce #(conj %1 n ) [] s ) ) 0\n;#(map vector % (range 0 (count %)))\n\n#(map-indexed (fn [index itm] [itm index]) %)","user":"5cf53196e4b087f62be35a94"},{"code":"#(map vector % (range 9))","problem":157,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn [xs](map-indexed #(vector %2 %1) xs))","problem":157,"user":"51efd397e4b0249c592fbdeb"},{"code":"#(map-indexed (fn [i t] [t i]) %)","problem":157,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":157,"code":"(fn [s] (partition 2 (interleave s (range 0 (count s)))))","user":"5ab564f8e4b073f177442639"},{"code":"#(into [] (for [x %] [x (.indexOf % x)]))","problem":157,"user":"52e54040e4b09f7907dd145c"},{"problem":157,"code":";; two-liner:\n#(let [xs (range (count %))] \n    ((comp (partial partition 2) interleave) % xs))\n\n;; using func composition and [interleave]\n#_(fn index-coll\n  [coll]\n  (let [xs (range (count coll))] \n    ((comp (partial partition 2) interleave) coll xs)))\n\n;; or the map like version <- most succint :)\n#_(fn index-coll\n  [coll]\n  (let [idxs ((comp range count) coll)]\n    (map #(vector % %2) coll idxs)))\n\n;; or the low-level TCO recursive version:\n#_(fn index-coll\n  [coll]\n  (loop [[head & tail] coll\n         newxs []\n         idx (count newxs)]\n    (if (nil? head)\n      newxs\n      (recur tail (conj newxs [head idx]) (inc idx)))))\n\n;; or without TCO optimization, but \"overloading\" the func \n;; -> going recur till end, & pushing on top of the head-list, while the stack decreases\n#_(fn index-coll\n  ([coll] (index-coll coll 0))\n  ([[head & tail] idx]\n     (if head\n       (conj (index-coll tail (inc idx)) [head idx])\n       (list))))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [lst]\n  (for \n    [liczba (range 0 (count lst))]\n    (list (nth lst liczba) liczba)))","problem":157,"user":"50d5c19ce4b0159555a1fc61"},{"code":"(fn [coll] (map #(vector %1 %2) coll (range)))","problem":157,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"map-indexed (fn[idx item] [item idx])","problem":157,"user":"52737333e4b03e8d9a4a747f"},{"code":"(fn[coll] (map #(list %1 %2) coll (range)))","problem":157,"user":"52e68e61e4b09f7907dd1479"},{"problem":157,"code":"(fn [coll]\n  (reduce (fn [new-coll elem] (conj new-coll elem))\n          (empty coll)\n          (map #(conj (empty coll) %1 %2) coll (range (count coll)))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":157,"code":"#(for [i (range (count %))] [(nth % i) i])","user":"56588f4ee4b0f9d632dd84b6"},{"problem":157,"code":"#(map (fn [i] [(nth % i) i]) (range (count %)))","user":"5540fe42e4b0a04f7929950a"},{"problem":157,"code":"(fn [org]\n  (loop [i 0 ret [] l org]\n    (let [f (first l)\n          r (rest l)]\n      (if (empty? l)\n        ret\n        (recur (inc i) (conj ret [f i]) r)))))","user":"54c8ac49e4b045293a27f64e"},{"problem":157,"code":"(fn [s]\n  (map (fn [a b] [a b]) s (range (count s))))","user":"55625903e4b0c656e3ff17d7"},{"problem":157,"code":"map-indexed (fn [index val] [val index])","user":"55e6c3f5e4b050e68259b48c"},{"problem":157,"code":"map-indexed #(-> [%2 %1])","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":157,"code":"(fn [sequence]\n  (map (fn [item index]\n         (vector item index))\n       sequence\n       (range (count sequence))))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [c] (map-indexed #(vector %2 %1) c))","problem":157,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":157,"code":"(fn [xs]\n  (loop [xs xs\n         i 0\n         acc []]\n    (if-let [[x & more] (seq xs)]\n      (recur more (inc i) (conj acc [x i]))\n      acc)))","user":"4ff24a1ae4b0678c553fc337"},{"problem":157,"code":"(fn [c]\n  (map-indexed #(vector %2 %1) c))","user":"51ca5378e4b08b1cbd0d9480"},{"code":"(fn [coll]\n  (map vector coll (range)))","problem":157,"user":"51195e77e4b055cfb310d499"},{"code":"(fn zip-with-index \n  ([l] (zip-with-index l 0))\n  ([l n] (cond\n          (empty? l) '()\n          :else (cons [(first l) n] (zip-with-index (rest l) (inc n)))\n          ))\n  )","problem":157,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":157,"code":"(fn \n  [coll]\n  (keep-indexed #(list %2 %1) coll))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":157,"code":"(fn [xs]\n  (loop [xs xs res [] i 0]\n    (if (empty? xs)\n      res\n      (recur (next xs)\n             (conj res [(first xs) i])\n             (inc i)))))","user":"553b87abe4b09218d5f45003"},{"code":"#(for [x (range (count %))] [(% x) x])","problem":157,"user":"4f826548e4b033992c121c08"},{"problem":157,"code":"(fn [c] (map-indexed #(list %2 %1) c))","user":"54dbcbbde4b024c67c0cf774"},{"problem":157,"code":"(fn func [coll]\n  (map list coll (range)))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":157,"code":"(fn [s]\n  (loop [s s\n         acc []\n         i 0]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (conj acc [(first s) i])\n             (inc i)))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn [a] (map #(list %2 %1) (range) a))","problem":157,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":157,"code":"#(map-indexed (fn [ind x] (vector x ind)) %)","user":"56b86e64e4b0f26550335924"},{"problem":157,"code":"(fn [s] \n   (reduce #(conj %1 (vector %2 (count %1))) [] s)\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn index [items]\n  (partition 2 (interleave items (range (count items)))))","problem":157,"user":"510cd1dde4b078ea71921124"},{"problem":157,"code":"#(drop 1 (reductions (fn [[_ i] x] [x (inc i)]) [nil -1] %))","user":"5880e38fe4b0f1effa3b7625"},{"problem":157,"code":"(fn [r c l] (if (= 0 (count l)) r (recur (conj r [(first l) c]) (+ c 1) (rest l)))) [] 0","user":"57c58ad6e4b05aa3c4741ce7"},{"code":"(fn f [s] (\n        map #(vec [%1 %2]) s (range (count s))))","problem":157,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":157,"code":"(fn [coll] (keep-indexed #(vector %2 %1) coll))","user":"5ebc7c13e4b00a66d4a95267"},{"problem":157,"code":"#(map vector % (take (count %) (range)))","user":"54a627bce4b09f271ff37c83"},{"problem":157,"code":"(fn [x] (map #(vec [%1 %2]) x (iterate inc 0)))","user":"574a71b7e4b02ea1147991fb"},{"problem":157,"code":"(fn [x] (map-indexed (fn [i a] [a i]) x))","user":"54bc6c75e4b0ed20f4ff6ed0"},{"code":"(fn index-seq [s]\n  (map vector s (range)))","problem":157,"user":"50763574e4b0a894bb95bf3d"},{"problem":157,"code":"(fn [x]\n   (map vector x (range (count x))))","user":"59385840e4b02506e01a29c9"},{"problem":157,"code":"(fn [input]\n  (reverse (loop [in input out '()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out [(first in) (count out)]))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":157,"code":"(fn [lst](vec (map-indexed #(vector %2 %) lst)))","user":"59dd38a8e4b0a0ac046f2503"},{"code":"#(map vector  % (iterate inc 0))","problem":157,"user":"527ccaf4e4b0757a1b17136d"},{"problem":157,"code":"(fn [s] (map #(list % %2) s (range (count s))))","user":"5d7a748ce4b02e6b30c93547"},{"code":"(partial map-indexed (fn [i e] [e i]))","problem":157,"user":"50435852e4b034ff00315d22"},{"code":"#(partition 2 (interleave %1 (iterate inc 0)))","problem":157,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn asdf [params] \n   (loop [iii 0 next params results []]\n      (if (empty? next) results (recur (+ iii 1) (rest next) (conj results (vector (first next) iii))))\n        ))","problem":157,"user":"5012036ce4b0a040369c12f4"},{"problem":157,"code":"(fn [ xs ]\n  (map-indexed #(identity [%2 %1]) xs))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(partial map-indexed #(-> [%2 %]))","problem":157,"user":"5339c105e4b0e30313ee6cae"},{"problem":157,"code":"(fn index [a-seq]\n  (map vector a-seq (range (count a-seq))))","user":"5235493ee4b05e80434a5064"},{"problem":157,"code":"(fn [coll]\n   (map-indexed #(vector %2 %1) coll))","user":"55a372f1e4b0acc240e31537"},{"problem":157,"code":"(fn indexing-sequences\n  [s]\n  (map-indexed (fn [idx itm] [itm idx]) s))","user":"5b73e500e4b047b03b2036ba"},{"problem":157,"code":"(fn [col]\n            (partition 2 (interleave col (range))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(partial map-indexed #(do [%2 %]))","problem":157,"user":"5028cd0fe4b01614d1633ffc"},{"problem":157,"code":"(fn [x] \n  (map-indexed #(conj [] %2 %1) x))","user":"589037b4e4b00487982d51d0"},{"problem":157,"code":"(fn foo [seqs]\n        ((fn too [seqs cur]\n          (if (empty? seqs ) nil\n              (conj  (too (rest seqs) (inc cur)) (list (first seqs) cur))\n              )\n          )\n         seqs 0\n        )\n        )","user":"6038b6b4e4b0d5df2af222ef"},{"problem":157,"code":"#(map-indexed  (fn [idx itm] [itm idx]) %)","user":"5e978fe5e4b0157ca96647d1"},{"problem":157,"code":"(fn [A]\n   (map #(list %1 %2) A (range)))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn seqindex [x]\n        (let [y (vec x)]\n          (rseq (vec (zipmap y (range (count y)))))))","problem":157,"user":"532727bae4b09d4e7a9b54fa"},{"problem":157,"code":";(fn [s]\n;  (loop [s s n 0 acc []]\n;    (if (empty? s)\n;      acc\n;      (recur (rest s) (inc n) (conj acc [(first s) n])))))\n\n;(fn [s]\n;  (into '() (zipmap s (range))))\n\n(fn iseq [s]\n  (map vector s (range)))","user":"54dce62be4b024c67c0cf78b"},{"problem":157,"code":"(fn [col]\n  (vec (map-indexed (fn [x y] [y x]) col)))","user":"53664e3be4b0243289761e74"},{"problem":157,"code":"(fn index-pairs\n  [s1]\n  (map-indexed (fn [index item]\n                 [item index])\n               s1))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(fn [a](loop [l a nums (range) ret []] (if (empty? l) ret\n\t\t\t\t\t(recur (rest l) (rest nums)  (conj ret [ (first l) (first nums)])))))","problem":157,"user":"503539dee4b0ed9c821488f6"},{"problem":157,"code":"map-indexed (fn [v1 v2] [v2 v1])","user":"5db32ae1e4b010eb3c36cd1e"},{"code":"(fn [s]\r\n  (map #(conj '() %2 %1) s (range 3)))","problem":157,"user":"51aefceee4b09397d5109797"},{"problem":157,"code":"(fn [coll]\n  (map (fn [x n]\n           [x n])\n      coll (range)))","user":"53ca41dae4b00fb29b2212c8"},{"problem":157,"code":"(fn [ls]\n (reverse\n  (loop [in ls\n         x 0\n         out '()]\n    (if (empty? in) out\n      (recur (rest in) (inc x) (cons [(first in) x] out))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"#(map-indexed (comp reverse vector) %)","problem":157,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [coll] (map list coll (range)))","problem":157,"user":"4fb2101ce4b081705acca284"},{"problem":157,"code":"(fn [x]\n  (loop [f x\n         c 0\n         r []]\n    (if (empty? f)\n      r\n      (recur (rest f) (inc c) (conj r (vector (first f) c))))))","user":"5af74644e4b0cc2b61a3bcc2"},{"code":"(fn [col]\n    (partition 2 (interleave col (iterate inc 0))))","problem":157,"user":"524d90c0e4b0a16e35cf6ded"},{"code":"#(partition 2 (interleave  % (range)))","problem":157,"user":"51d10b1fe4b067c36548635e"},{"problem":157,"code":"(fn [lst]\n  (map vector lst (range)))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn index-sequence[x](reduce concat (map #(list [%1 %2]) x (range (count x)))))","problem":157,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":157,"code":"(fn indexing-seq\n\t[lst]\n\t(map-indexed #(vector %2 %1) lst))","user":"57f81544e4b0d3187e900917"},{"problem":157,"code":"(fn [xs]\n  (partition 2 (interleave xs (range (count xs)))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":157,"code":"(fn [coll]\n  (loop [[r & more :as all] coll\n         acc '[]]\n    (if all\n      (recur more (conj acc [r (.indexOf coll r)]))\n      acc)))","user":"5c718e6ce4b0fca0c1622796"},{"problem":157,"code":"(fn [s] (map #(identity [% (.indexOf s %)]) s))","user":"5f1c7c3be4b0f565ad998261"},{"problem":157,"code":"(fn [list]\n  (map-indexed #(vector %2 %1) list))","user":"53fc88e7e4b0de5c418485be"},{"problem":157,"code":"(fn indexing-sequences [coll] \n     (map #(vector %1 %2) coll (range)))","user":"56ede653e4b04a395b9a0449"},{"problem":157,"code":"(fn indexSeq [coll]\n  (vec \n    (map #(vector % %2) coll (range))))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":157,"code":"(fn [inputSeq] \n  (map-indexed (fn [ite ind] (list  ind ite)) inputSeq))","user":"51fea7d7e4b0f1313d468a74"},{"problem":157,"code":"(fn [c] (map-indexed #(list %2 %) c))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":157,"code":"(fn [v] (partition 2 (interleave v (range))))","user":"5713c575e4b07c98581c3aab"},{"problem":157,"code":"#(map-indexed (fn [ix x] [x ix]) %)","user":"583369e6e4b089d5ab817c9c"},{"code":"(fn [coll]\n  (rest (reduce #(conj %1  [%2 (+ 1 (last (last %)))]) [[0 -1]] coll)))","problem":157,"user":"503255d0e4b0e78df07b092b"},{"problem":157,"code":"(fn [xs]\n  (mapv vector xs (iterate inc 0)))","user":"594fdfdce4b066ee0a44ae85"},{"problem":157,"code":"(fn [a]\n  (map #(vector %1 %2)\n       a\n       (range (count a))))","user":"59733c91e4b01722bebd4c9b"},{"problem":157,"code":"#(apply map vector [% (range)])","user":"53528cd3e4b084c2834f4af2"},{"code":"#(map-indexed (fn [index val]\n                [val index]) %)","problem":157,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn index [coll]\n  (map vector coll (range)))","problem":157,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":157,"code":"(fn [x]\n (map-indexed #(vector %2 %1) x))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":157,"code":"(fn [xs]\n  (map-indexed\n   (fn [i v] (vector v i))\n   xs))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":157,"code":"(fn [sequence]\n      (->> (interleave sequence (range))\n          (partition 2)\n          (map #(into [] %))))","user":"53f891eee4b0de5c4184856d"},{"problem":157,"code":"(fn [coll] (map-indexed\n             (fn [arg arg2] [arg2 arg])\n             coll))","user":"5e7fb908e4b085ba37836e3f"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [index item] [item index]) coll)\n  )","user":"562d15a6e4b0a45d2ff83019"},{"problem":157,"code":"#(mapv (partial conj []) % (range))","user":"55e1d34ae4b050e68259b421"},{"problem":157,"code":"(fn [col] (map-indexed (fn [idx it] [it idx]) col))","user":"588f500ae4b00487982d51a4"},{"problem":157,"code":"map-indexed (fn [i a] [a i])","user":"55d1b565e4b0e31453f64a49"},{"code":"(fn [n] (partition 2 (interleave n (range (count n)))))","problem":157,"user":"4ff76effe4b0678c553fc390"},{"code":"keep-indexed #(vec [%2 %1])","problem":157,"user":"4ecc1d85535d23f0362276f8"},{"code":"(fn [sq]\n  (letfn [(ind [sq i]\n    \t\t\t(if (empty? sq) sq\n                    (cons [(first sq) i] (lazy-seq (ind (rest sq) (inc i))))))]\n        \n        (ind sq 0)))","problem":157,"user":"53300924e4b019098a6f8b55"},{"code":"map (fn [a b] [b a]) (range)","problem":157,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":157,"code":"(fn prob157 [col]\n  (loop [col col\n         idx 0\n         ret []]\n    (if (empty? col)\n      ret\n      (recur (rest col) (inc idx) (conj ret [(first col) idx])))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn [ vv ] (map-indexed #(vector %2 %1) vv))","problem":157,"user":"4f030775535dcb61093f6a43"},{"code":"(fn [x]\n  (map vector x (range 1000)))","problem":157,"user":"4f0365fc535dcb61093f6aa4"},{"problem":157,"code":"(fn [coll]\n  (loop [i 0 in coll out []]\n    (if (empty? in)\n      out\n      (recur\n       (inc i)\n       (rest in)\n       (conj out [(first in) i])))))","user":"55c68089e4b0e31453f649c4"},{"problem":157,"code":"#(loop [idx 0\n       ks %\n       v []]\n   (if-let [k (first ks)]\n     (recur (inc idx) (rest ks) (conj v [k idx]))\n     v))","user":"523578efe4b0a643f2dcb74c"},{"code":"(fn [v]\n (map-indexed (fn [idx itm] [itm idx]) v))","problem":157,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn [seq1]\n  (let [seq2 (range (count seq1))]\n    (map (fn [a b] [a b]) seq1 seq2)))","problem":157,"user":"50d882d4e4b01f0871336e69"},{"problem":157,"code":"(fn [s]\n  (for [i (range (count s))]\n    [(nth s i) i]))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn [l] \n  (map #(vector %1 %2) l (range (count l))))","problem":157,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":157,"code":"#(map list % (iterate (partial + 1) 0))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn [s]\n    (for [i (range (count s))]\n      [(get s i) i]))","problem":157,"user":"506755b3e4b03d366d7cb2bc"},{"problem":157,"code":"(fn [coll] (map #(vector %1 %2) coll (range 0 (count coll))))","user":"568f2059e4b0dcc4269f40df"},{"problem":157,"code":"(fn indexing [s]\n  (map list s (range (count s))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"map-indexed #(vec [%2 %1])","problem":157,"user":"4f410b63e4b0e243712b1fc5"},{"problem":157,"code":"#(mapv vector % (iterate inc 0))","user":"53b7aa6ce4b047364c0444d1"},{"problem":157,"code":"#(map (partial conj []) % (range))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [i v]\n                 [v i])\n               coll))","user":"56ba1406e4b0f2655033593c"},{"code":"(fn [x] (mapcat #(assoc {} % %2) x (range 0 (count x))))","problem":157,"user":"4fc18846e4b081705acca331"},{"code":"(fn [coll]\n  ((fn [xs i accu]\n     (if (empty? xs)\n       accu\n       (recur (rest xs) (inc i) (conj accu [(first xs) i]))))\n   coll 0 []))","problem":157,"user":"50217818e4b00bba4502f7a7"},{"problem":157,"code":"#(map (fn[v i] [v i]) %1 (range (count %1)))","user":"5e48ec09e4b043cd24807a45"},{"problem":157,"code":"#(map vector % (-> % count range))","user":"5499e23de4b03163384f4706"},{"code":"(fn [l] (map (fn [[v k]] [k v]) (map-indexed vector l)))","problem":157,"user":"52265e41e4b04e78ff2e1981"},{"problem":157,"code":"(fn [args]\n    (partition 2 (interleave args (range))))","user":"53882352e4b0640c7a9a5898"},{"code":"(fn[x] (map-indexed #(vec [%2 %]) x))","problem":157,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn [xs] (map-indexed (fn [i x] [x i]) xs))","problem":157,"user":"4fd6f4d8e4b0dab7d829f37b"},{"code":"(fn [xs] (map #(vector % %2) xs (range)))","problem":157,"user":"4fadbc3fe4b081705acca23f"},{"problem":157,"code":"#(into [] (map vector % (range 0 (count %))))","user":"5d9e8e40e4b000c986472bc2"},{"code":"(fn[coll] \n  (map-indexed \n    (fn [idx itm] [itm idx]) coll))","problem":157,"user":"50270618e4b01614d1633feb"},{"problem":157,"code":"(fn \n  [s] (map vector s (iterate inc 0)))","user":"5a04e923e4b01bb0ae8afda9"},{"code":"(fn [col]\n  (let [len (count col)]\n      (map #(list %1 %2) col (range 0 len))\n    )  \n  )","problem":157,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn foo [lst & {:keys [ind]\n                :or {ind 0}}]\n  (if (empty? lst)\n    '()\n    (concat (list (list (first lst) ind)) (foo (rest lst) :ind (+ ind 1)))))","problem":157,"user":"5220a770e4b0e6a83c8925a3"},{"problem":157,"code":"(fn [v]\n  (map reverse (map-indexed vector v)))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":157,"code":"(fn [s] (reverse (zipmap s (range))))","user":"57d1a0e6e4b0bd073c20236d"},{"code":"(fn idxed [coll]\n  (map-indexed #(reverse (vector %1 %2)) coll))","problem":157,"user":"531dfaf5e4b08068f379edb3"},{"problem":157,"code":"(fn [l] (map-indexed #(vector %2 %) l))","user":"53d5a63be4b0e771c3025449"},{"code":"#(into [] (map-indexed (fn [i v] (vector v i)) %))","problem":157,"user":"50b1d166e4b03ea880433554"},{"code":"#(partition-all 2 (interleave % (iterate inc 0)))","problem":157,"user":"53415755e4b00652c8746ecd"},{"problem":157,"code":"(fn [coll] (map #(vec [%1 %2]) coll (range)))","user":"5794fd7be4b0e215f87e8476"},{"problem":157,"code":"(fn index-seq [xs]\n  (map-indexed (fn [idx e]\n                 [e idx]) xs))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [i v]\n                 [v i]) s))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":157,"code":"(fn oklm[a] \n    (\n     map-indexed #(vector %2 %1) a\n    )\n   )","user":"5034b623e4b062bc5d7ae168"},{"problem":157,"code":"(fn [s]\n  (map (fn [[index val]]\n         [val index]) (map-indexed vector s)))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn index [coll]\n  (map-indexed #(vector %2 %1) coll))","problem":157,"user":"4ed6238d535d10e5ff6f52de"},{"code":"(fn indexing-seq [coll]\n\t(map vector coll (range)))","problem":157,"user":"52381b2ae4b0fae3832e99ef"},{"problem":157,"code":"(fn [s] \n  \n  (reduce #(conj %1 [%2 (count %1)]) [] s)\n  \n  )","user":"5b2927a0e4b063e2438bcc5e"},{"problem":157,"code":";(fn [coll] \n;  (apply conj  (map (fn [x]  (sorted-map x (.indexOf coll x))) coll))\n\n(fn  [coll] \n  (map (fn [x] [x (.indexOf coll x)]) coll))","user":"5785de43e4b0ebec4cfb74e5"},{"problem":157,"code":"keep-indexed (fn [i x] [x i])","user":"5b64370ae4b0c6492753e73c"},{"problem":157,"code":"(fn [keys]\n  (map (fn x[& args] \n          args) keys (range)))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn [lst]\n  (letfn [(make-pair [a b] (cons a (cons b '())))]\n    (loop [i (dec (count lst)) rem lst result '()]\n      (if (empty? rem)\n        result\n        (recur (dec i) (butlast rem) (cons (make-pair (last rem) i)\n                                           result))))))","problem":157,"user":"51e0198ee4b01188f0627539"},{"code":"(fn [ks]\n  (map vector ks (range)))","problem":157,"user":"4f32a7f1e4b0d6649770a095"},{"problem":157,"code":"#(partition 2 (interleave % [ 0 1 2]))","user":"58a6d14fe4b01a0c0b232935"},{"problem":157,"code":"(fn [theseq] (for [i (range 0 (count theseq))] [(nth theseq i) i]))","user":"55f75c6be4b06e875b46cea9"},{"code":"#(for [i (range (count %))] [(% i) i])","problem":157,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn [s]\n    (map-indexed #(list %2 %1) s))","problem":157,"user":"4f0da4e4535d0136e6c22319"},{"problem":157,"code":"#(map-indexed (fn [i x] (vector x i)) %)","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [vect] (for [cur-elem vect] [cur-elem (.indexOf vect cur-elem)]))","problem":157,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":157,"code":"(fn index [s]\n  (map vector s (range)))","user":"5f300f28e4b033932238a682"},{"problem":157,"code":"(fn [coll]\n  (map-indexed #(vector %2 %1)\n               coll))","user":"53dd37aee4b0d874e779ae28"},{"problem":157,"code":"(fn  [coll]\n  (loop [items coll\n         index 0\n         results []]\n   (if (empty? items)\n     (reverse results)\n     (recur (rest items) (inc index) (cons [(first items) index] results   )))))","user":"51427a8be4b0b50abeb46b37"},{"problem":157,"code":"#(partition 2\n              (interleave %  (range (count %))   ))","user":"598085e6e4b021a7a535fdd3"},{"problem":157,"code":"map-indexed (partial conj '())","user":"555ac933e4b0deb715856e49"},{"problem":157,"code":"(fn [seq] (loop [s seq sop [] c 0] (if (empty? s) sop (recur (rest s) (conj sop (list (first s) c)) (inc c)))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [x] \n  (for [a x]\n  \t(into [] [a (.indexOf x a)])\n   )\n )","problem":157,"user":"52016690e4b0b2e020a18f0f"},{"code":"map-indexed #(list %2 %1)","problem":157,"user":"4f8345c6e4b033992c121c1b"},{"problem":157,"code":"(fn [x]\n  (map vector x (range (count x))))","user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn [coll]\n  (map reverse (map (partial find coll) (range (count coll)))))","problem":157,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [x] (map-indexed #(vector %2 %1) x))","problem":157,"user":"50705072e4b07bd6ad9b9f27"},{"problem":157,"code":"(fn [coll]\n  (map (fn [x] [x (.indexOf coll x)]) coll))","user":"55a1683ce4b0acc240e31513"},{"code":"map-indexed (fn [i o] [o i])","problem":157,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":157,"code":"(fn [xs] (loop [result [] the-list xs index 0]\n  (if (= 0 (count the-list))\n    result\n    (recur (conj result [(first the-list) index]) (rest the-list) (inc index))\n  )))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn [coll]\n  (map-indexed (fn [idx val] [val idx]) coll))","problem":157,"user":"4ff548dee4b0678c553fc368"},{"code":"(fn a [col] (keep-indexed #(list %2 %1) col))","problem":157,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":157,"code":"(fn [s1] (for [x s1] [x (.indexOf s1 x)]))","user":"57b35772e4b0fbc9809a277c"},{"problem":157,"code":"(fn [arr] (partition 2 (interleave arr (range (count arr)))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"#(loop [e %1,         \n          n 0, \n          c (count e)\n          v []]    \n     (if (= c n) \n       v \n       (recur e (inc n) c (conj v [(nth e n) n]))\n       ))","problem":157,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn idx [xs]\n   (map #(vector %1 %2) xs (range)))","problem":157,"user":"531c0619e4b08068f379ed98"},{"problem":157,"code":"(fn [coll]\n  (map #(vector %1 %2) coll (range (count coll))))","user":"50b63c5ee4b0a86f8358ca69"},{"problem":157,"code":"(fn [col] (->> col\n  \t(map-indexed vector)\n    (map #(vector (second %) (first %)) )))","user":"587a3babe4b01531a375eae2"},{"problem":157,"code":"(fn [ls] (reduce #(conj %1 [%2 (count %1)]) [] ls))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [coll]\n   (loop [result [] elements coll index 0]\n     (if elements\n       (recur (conj result [(first elements) index]) (next elements) (inc index))\n       result\n       )\n     )\n   )","problem":157,"user":"5106dc1be4b01150e115ebf0"},{"problem":157,"code":"(fn [sq] (map-indexed (fn [i x] [x i]) sq))","user":"56aad4f7e4b03c432f187338"},{"code":"#(for [x (range (count %))] [(nth % x) x])","problem":157,"user":"510c01bae4b078ea7192110a"},{"code":"keep-indexed #(list %2 %)","problem":157,"user":"4e8f4f64535d65386fec2149"},{"problem":157,"code":"(fn [v]\n  (mapv #(vector %1 %2) v (range (count v))))","user":"58524875e4b0b7285a6f4ead"},{"problem":157,"code":"(fn [xs]\n  (loop [xs xs \n         ys []\n         i 0]\n    (if (seq xs) (recur (rest xs) (conj ys [(first xs) i]) (inc i)) ys)))","user":"5799ff45e4b05b1deef9add1"},{"problem":157,"code":"(fn index ([s] (index s 0))\n  ([s n] (if (empty? s) '()\n                        (cons (list (first s) n) (index (drop 1 s) (inc n))))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"#(map list %(range))","problem":157,"user":"4db92654535d1e037afb21a0"},{"problem":157,"code":"(fn [s] (map-indexed #(identity [%2 %1]) s))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [s] (map-indexed (fn [i x] [x i]) s))","problem":157,"user":"4f17ab99535d64f603146457"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [i v] [v i]) coll))","user":"5c3f29d4e4b08cd430848e8f"},{"problem":157,"code":"(fn zip [seqq]\n  (map vector seqq (range)))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [xs] (map-indexed #(vector %2 %1) xs))","problem":157,"user":"4fb65f2fe4b081705acca2c7"},{"problem":157,"code":"#(map-indexed (fn [idx itm] [itm idx]) %1)\n\n; #(map vector % (range))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":157,"code":"map-indexed (fn [idx val] [val idx])","user":"5e99cbd4e4b0157ca96647e6"},{"code":"map-indexed (fn [i v] [v i])","problem":157,"user":"50bce014e4b0594b91591c63"},{"code":"(fn [lst] (map-indexed #(list %2 %) lst))","problem":157,"user":"4fba7d1ee4b081705acca2e0"},{"problem":157,"code":"(fn [lst]\n  (loop [lst lst\n         new ()\n         curr 0]\n    (if (empty? lst)\n      (reverse new)\n      (recur (rest lst) (cons (cons (first lst) (list curr)) new) (inc curr)))))","user":"57f8104ce4b0d3187e900910"},{"problem":157,"code":"(fn [s]\n   (loop [i 0 r [] s' s]\n        (if (empty? s')\n            r\n       (recur (inc i) (conj r [(first s') i]) (rest s')))\n)\n)","user":"548f5086e4b0e286459a1239"},{"code":"map (fn [x y] [y x]) (iterate inc 0)","problem":157,"user":"4dd62278535d2dad7130b5c7"},{"problem":157,"code":"#(map (fn [x i] (vector x i)) % (range))","user":"535774c2e4b04ce2eb3ed27c"},{"problem":157,"code":"(fn [v] (keep-indexed (fn [index value] (vector value index)) v))","user":"5965eb8de4b069c0a1a19796"},{"problem":157,"code":"(fn [s]\n  (reduce-kv #(conj % [%3 %2]) [] s))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":157,"code":"(fn [col]  \n  (map vector \n       col \n       (range (count col))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":157,"code":"#(map-indexed (fn [i j] [j i]) %)","user":"56992162e4b0542e1f8d143c"},{"code":"(fn idx [m] (map #(vector %1 %2) m (range (count m))))","problem":157,"user":"538e29d1e4b0b51d73faae80"},{"problem":157,"code":"(fn [xs]\n   (for [[b a] (map-indexed vector xs)]\n     [a b])\n   )","user":"567b2f20e4b05957ce8c61a2"},{"problem":157,"code":"; (fn [xs] (map #(vector %1 %2) xs (range)))\n\n#(map vector % (range))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":157,"code":"(fn\n  [seq]\n  (loop [seq seq newseq [] i 0]\n    (if (empty? seq)\n      newseq\n      (recur (rest seq) (conj newseq (vector (first seq) i)) (inc i)))))","user":"5772ddb0e4b0979f896515d4"},{"problem":157,"code":"(fn [coll]\n  (map vector coll (range))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"problem":157,"code":"(fn [seq1] (map (fn [num1 num2] (list num1 num2)) seq1 (range (count seq1))))","user":"54411506e4b032a45b869369"},{"problem":157,"code":"#(map reverse (partition 2 (interleave (range) %)))","user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn indexify [coll]\n  (for [i (range (count coll))]\n    [(nth coll i) i]))","problem":157,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":157,"code":"(fn [s]\n  (->> (keep-indexed vector s)\n    (map (fn [[idx v]] [v idx]))))","user":"53a83c74e4b047364c044426"},{"problem":157,"code":"#(for [i (range (count %1))] [(nth %1 i) i])","user":"54bec835e4b0ed20f4ff6ef7"},{"problem":157,"code":"(fn [xs]\n    (map-indexed #(identity [%2 %1]) xs))","user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn index-seq [lst]\n  (loop [ind 0 ls lst ms []]\n    (if (first ls)\n      (recur (+ ind 1) (rest ls) (conj ms [(first ls) ind]))\n      ms)))","problem":157,"user":"4ddc620d535d02782fcbea06"},{"code":"#(map vector % (range))","problem":157,"user":"4daa374930acd6ed13482a68"},{"problem":157,"code":";; This actually works so I have no fucking idea why 4clojure says it fails.  What\n;; shitty old version of Clojure are they running???\n;;\n;; (fn [c]\n;;   (into [] (zipmap c (range))))\n\n(fn [c]\n  (loop [[c & cs] c\n         i 0\n         r []]\n    (if (nil? c)\n      r\n      (recur cs (inc i) (concat r [[c i]])))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":157,"code":"(fn [c]\n  (loop [n 0\n         c c\n         r []]\n    (if (seq c)\n      (recur (inc n) (rest c) (conj r (list (first c) n)))\n      r)))","user":"557c6ca6e4b05c286339e0c4"},{"code":"map-indexed #(vector %2 %1)","problem":157,"user":"4e739e13535dff18050a9c76"},{"code":"#(partition 2 (interleave % (range 0 99)))","problem":157,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(\n  fn [ s ] (\n  \n    keep-indexed #( list %2 %1  ) s\n\n  )\n)","problem":157,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":157,"code":"(fn [coll]\n   (map vector coll (range))\n   \n   )","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn [coll] \n  (map #(vector % %2) coll (range)))","problem":157,"user":"4f3242bae4b0d6649770a08f"},{"problem":157,"code":"(fn [c] (map vector c (range (count c))))","user":"5541fa50e4b0a04f79299515"},{"problem":157,"code":"#(apply vector \n        (partition 2 \n                   (interleave % (range))))","user":"52382d91e4b0fae3832e99f0"},{"code":"#(map (fn [i e] [i e]) % (range (count %)))","problem":157,"user":"52c8758be4b0c2d177d62135"},{"problem":157,"code":"(fn blah [coll] (map-indexed #(vector %2 %1)  coll))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":157,"code":"(fn myfn [coll]\n  (map-indexed #(vector %2 %1) coll))","user":"52ba447ee4b07a9af57922ce"},{"problem":157,"code":"(fn [sequence]\n  (map\n   (fn [index] [(nth sequence index) index])\n   (range (count sequence))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":157,"code":"(fn [x] (loop [x x cntr 0 out []] (if (empty? x) out (recur (rest x) (inc cntr) (conj out [(first x) cntr])))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":157,"code":";(fn [l] (let [i (atom -1)] (map #(list % (swap! i inc)) l)))\nmap-indexed #(vector %2 %1)","user":"5ed03b7fe4b016b56eae05ae"},{"problem":157,"code":"(fn f [s]\n  (map-indexed (fn [i x] [x i]) s))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn [v] (map #(list %1 %2) v [0 1 2]))","problem":157,"user":"4ee82223535d93acb0a66877"},{"code":"(fn\n  [l]\n  (loop [li l\n         n 0\n         acc []]\n  (if (empty? li)  \n    acc\n    (recur (rest li) (inc n) (conj acc (vector (first li) n))))\n  ))","problem":157,"user":"53663e82e4b0243289761e73"},{"code":"(fn il [s]\n  (partition 2 (interleave s (range (count s)))))","problem":157,"user":"515896f2e4b059418b97f0a8"},{"problem":157,"code":"(fn [l]\n  (map list l (range)))","user":"54d6f22de4b0a52adc2e2023"},{"code":"(fn [seq]\n    (map #(vector %1 %2) seq (iterate inc 0)))","problem":157,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":157,"code":"#(mapv vector % (range))","user":"5215661be4b02f6d8ea676c7"},{"problem":157,"code":"map-indexed (fn [index elem] [elem index])","user":"5c48757fe4b0e06e1360a3c3"},{"problem":157,"code":"(fn indexing-sequence\n  [coll]\n  (map-indexed\n   (fn [v i] (vector i v))\n   coll))","user":"608c270ae4b03bd49d9f36b3"},{"code":"(fn [s] (map #(vector %1 %2) s (range)))","problem":157,"user":"4ec70f26535d6d7199dd36dd"},{"code":"(partial map-indexed\n  (fn [i item]\n    [item i]))","problem":157,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn [m] (map (fn [e i] [e i]) m (range)))","problem":157,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"keep-indexed (fn [x i] [i x])","problem":157,"user":"4e823f41535db62dc21a62c8"},{"problem":157,"code":"(fn [coll] (map (fn [idx] [(nth coll idx) idx]) (range 0 (count  coll))))","user":"552e1c98e4b076ab5578f7ee"},{"problem":157,"code":"(fn [seq]\n  (map vector seq (iterate inc 0)))","user":"56478a82e4b0284900eef61e"},{"code":"(fn [coll]\n  (reduce #(conj %1 [%2 (count %1)]) [] coll))","problem":157,"user":"4fc8769be4b0ee37620e1833"},{"problem":157,"code":"(fn [n]\n  (map-indexed #(vector %2 %) n))","user":"56193c6ee4b053970a773af2"},{"problem":157,"code":"#(map vector % (range) )","user":"562326cbe4b03f08ee9a9230"},{"problem":157,"code":"(fn [v] (map #(vector %1 %2) v (range (count v))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":157,"code":"(fn [seq]\n  (map-indexed (fn [index val] [val index]) seq))","user":"5c8cfff8e4b048ec896c5996"},{"problem":157,"code":"(fn index-seq\n  [sequ]\n  (into '[] (map (fn [x] (vector (last x) (first x))) (map-indexed vector sequ))))","user":"5c7dad57e4b0d597f478caba"},{"problem":157,"code":"(fn in-idx-pairs [whole-vec]\n  (let [with-idx (map-indexed (fn [idx itm] [itm idx]) whole-vec)]\n    (vec with-idx)))","user":"561d8936e4b064ca9f4b16b2"},{"problem":157,"code":"(fn [vect]\n  (reduce\n    (\n      fn [a b]\n      (conj\n        a\n        [(nth vect b) b]\n      )\n    ) [] (range 0 (count vect)))\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":157,"code":";; http://www.4clojure.com/problem/157\n(fn index-seq\n  [coll]\n  (map vector coll (range)))","user":"5c92105ce4b048ec896c59f7"},{"problem":157,"code":"map-indexed (fn [idx v] [v idx])","user":"593f95d8e4b069cdc2982be3"},{"problem":157,"code":"(fn test [coll]\n  (loop [[head & tail] coll\n         i 0\n         result []]\n    (if (nil? head)\n      result\n      (recur tail (inc i) (conj result [head i])))\n    )\n  )","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [v] (map-indexed #(vector %2 %1) v))","problem":157,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [s] (map vector s (-> s count range)))","problem":157,"user":"5133af1de4b0d7a043de8cf2"},{"problem":157,"code":"(fn idx-seq [xs]\n  (map-indexed #(vector %2 %1) xs))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":157,"code":"(fn [lst]\n  (map #(list %1 %2) lst (range)))","user":"58134ba8e4b0f478707a060b"},{"problem":157,"code":"(fn [x] (map-indexed (fn [idx itm] [itm idx]) x))","user":"55933c7ae4b0c79f6e1db938"},{"code":"#(for [n (range (count %))] [(nth % n) n])","problem":157,"user":"50783762e4b0fc74642bff67"},{"problem":157,"code":"(fn\n  [x]\n  (let [c (range 0 (count x))]\n    (map #(vector %1 %2) x c)))","user":"57061d20e4b0b0fb43fd0679"},{"problem":157,"code":"#(map-indexed (fn [idx item][item idx]) % )","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn [coll] (->> (interleave coll (iterate inc 0))\n                     (partition 2)))","problem":157,"user":"5012ec0ae4b0c87326002230"},{"problem":157,"code":"(fn [a] (map-indexed (fn [idx itm] [itm idx]) a))","user":"564d3169e4b0284900eef67c"},{"problem":157,"code":"(fn [s]\n  (reduce-kv (fn [memo k v] (conj memo [v k])) [] s))","user":"5e7f62cce4b085ba37836e3b"},{"code":"#(reverse (seq (zipmap % (range (count %)))))","problem":157,"user":"52117ea7e4b07aea8afc4f70"},{"code":"#(loop [x %1 y 0 n []]\n   (if (empty? x)\n     n\n     (recur (rest x) (inc y) (conj n [(first x) y]))))","problem":157,"user":"5356dcbee4b04ce2eb3ed270"},{"code":"(fn [s]\n  (map-indexed #(list %2 %) s))","problem":157,"user":"4f1abbfb535d64f60314646e"},{"problem":157,"code":"(fn [x] (map #(vec %&) x (range))) ; I've improved over Andrus' solution.\n; My own solution is:\n#_(vec (apply array-map (interleave % (range))))","user":"55fc07d3e4b0f488688e066e"},{"problem":157,"code":"(letfn [(f [l] (f2 l 0))\n        (f2 [[x & xs :as xss] i]\n            (if (seq xss)\n              (conj (f2 xs (inc i)) [x i])\n              '()))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"(fn [coll]\n(loop [index 0 r [] coll coll]\n  (if (empty? coll)\n    r\n    (recur (inc index) (conj r [(first coll) index]) (rest coll))))\n)","problem":157,"user":"4f1bee08535d64f60314647e"},{"problem":157,"code":"#( loop [ a %1 n 0 res []] ( if ( empty? a) res ( recur (rest a) (inc n) (conj res [(first a) n]) ) ) )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [coll] (partition 2 (interleave coll (range (count coll)))))","problem":157,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn [x] (for [i (range (count x))] (list (nth x i) i)))","problem":157,"user":"52f9ce6de4b047fd55836ff0"},{"code":"(fn [x] \n  (map-indexed (fn [a b] [b a]) x)\n  )","problem":157,"user":"52420e2fe4b076e5d3121f48"},{"problem":157,"code":"(fn [s] (map vector s (range (count s))))","user":"4f9b3532e4b0dcca54ed6d13"},{"problem":157,"code":"(fn sa [as]\n  (map #(vector %1 %2) as (range)))","user":"5adcc688e4b0837691e92c05"},{"problem":157,"code":"#(map (fn [i1 i2] (list i1 i2)) % (range))","user":"577829f9e4b0979f8965165a"},{"problem":157,"code":"(fn [l]\n  (loop [li l le [] c 0]\n    (if (empty? li)\n      le\n      (recur (rest li)\n             (conj le [(first li) c])\n             (inc c)))))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn [coll]\n        (partition 2 (interleave coll (iterate inc 0))))","problem":157,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":157,"code":"(fn [s] (map (fn [%1 %2] [%1 %2]) s (range (count s))))","user":"58983e3fe4b00487982d52ce"},{"code":"#(for [i (range(count %))] (vector (nth % i) i))","problem":157,"user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn p157 \n  ([lst] (p157 [] lst))\n  ([acc lst] (if (empty? lst) acc (p157 (conj acc [(first lst) (count acc)]) (next lst)))))","problem":157,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [a]\n  (partition 2 (interleave a (range (count a)))))","problem":157,"user":"50052fd0e4b0678c553fc45d"},{"code":"#(partition 2 (interleave % (iterate inc 0)))","problem":157,"user":"4e5fb634535d8ccf87e9fe4a"},{"code":"#(map (fn [el i] [el i])  % (range))","problem":157,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [s]\n  (map #(vector % %2) s (range)))","problem":157,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":157,"code":"(fn [c] (map-indexed (comp reverse vector) c))","user":"538ca203e4b0b51d73faae5f"},{"code":"(fn index-seq [a-seq]\n    (partition 2 (interleave a-seq (range)))\n)","problem":157,"user":"52763696e4b03e8d9a4a74d7"},{"problem":157,"code":"(fn [c] (map-indexed #(vector %2 %1) c))\n\n;; #(map vector % (range))\n\n;; #(map vector % (iterate inc 0))\n\n;; #(map-indexed (comp reverse list) %)\n\n;; (fn [c]\n;;     (map-indexed #(->> %& (apply list) reverse) c))\n\n;; (fn [c]\n;;     (loop [current-c c\n;;            i 0\n;;            rst []]\n;;       (if (empty? current-c)\n;;         rst\n;;         (recur (rest current-c)\n;;                (inc i)\n;;                (conj rst [(first current-c) i])))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":157,"code":"(fn [s] (loop [res [] index 0] (if (= (count res) (count s)) res (recur (conj res [(s index) index]) (inc index)))))","user":"5292feb4e4b0239c8a67af39"},{"code":"#(let[i (zipmap % (range))] \n    (for[x %] [x (get i x)]))","problem":157,"user":"52271ffee4b04e78ff2e19a9"},{"code":"#(keep-indexed (fn [i x] [x i]) %)","problem":157,"user":"4e50ad74535dc968683fc4ec"},{"problem":157,"code":"(fn seq-indexer [col]\n  (map-indexed (fn [idx item] [item idx]) col))","user":"5d0859fbe4b0cc9c91588208"},{"problem":157,"code":"#(reduce (fn [z a] (conj z [a (count z)])) [] %)","user":"54026d7de4b0df28a13c62cf"},{"problem":157,"code":"#( map vector % ( range ) )","user":"516d227fe4b06f078fab252d"},{"problem":157,"code":"(fn [s]\n       (letfn [(step [s n]\n                        (if s (cons (list (first s) n) (step (next s) (inc n))))\n                    )]\n            (step s 0)))","user":"57213df6e4b0c5bde472c0ab"},{"problem":157,"code":"#(for [x (range (count %))] [(get (vec %) x) x])","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":157,"code":"(fn [l]\n  (loop [n 0 tmpl l news '()]\n    (if (empty? tmpl) \n      (reverse news)\n      (recur (inc n) (rest tmpl) (conj news (list (first tmpl) n))))))","user":"59368ccae4b02506e01a297a"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [i each] [each i]) s))","user":"528c381ce4b0239c8a67aeb2"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [param1 param2] [param2 param1]) s)\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":157,"code":"(fn idx [s]\n  (map (fn [e n] [e n]) s (range)))","user":"54ca93abe4b057c6fda3a264"},{"problem":157,"code":"(fn [a]\n\n (map-indexed #(vector %2 %1) a)\n \n )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn [c] (map #(vector % %2) c (iterate inc 0)))","problem":157,"user":"4db342d7535df7e46ed9b6cd"},{"problem":157,"code":"(fn [l] (map vector l (iterate inc 0)))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":157,"code":"(fn test [seq-1]\n  (map (fn [x y]\n         [x y])\n       seq-1\n       (range)))","user":"579332c2e4b0e215f87e8452"},{"problem":157,"code":"map-indexed (fn [n i] [i n])","user":"5dbb5200e4b09f47823971a9"},{"problem":157,"code":"(fn idx-seqs [xs]\n  (map-indexed #(vector %2 %1) xs))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":157,"code":"(fn\n  [v]\n  (into [] (reverse (reduce #(cons [%2 (.indexOf v %2)] %1) [] v))))","user":"6059d2e0e4b07e92fa001ace"},{"problem":157,"code":"#(for [x %] [x (.indexOf % x)])","user":"5e03a15be4b0a607a9a45d5e"},{"problem":157,"code":"(fn [coll]\n  (map\n   (fn [a b]\n     [a b])\n   coll (range)))","user":"5032748ae4b0e78df07b092f"},{"problem":157,"code":"(fn f\n  [coll]\n  (let [counter (java.util.concurrent.atomic.AtomicInteger. 0)]\n    (into (empty coll) (map #(concat [% (.getAndIncrement counter)]) coll))))","user":"55a62092e4b0acc240e31554"},{"code":"(partial map-indexed #(list %2 %1))","problem":157,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn [coll]\n  (map-indexed (fn [idx itm] [itm idx]) coll)\n)","problem":157,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [l]\r\n    (partition 2\r\n               (interleave l \r\n                           (range (count l)))))","problem":157,"user":"50576483e4b001218172198b"},{"problem":157,"code":"(fn [l]\n   (map #(vector %1 %2) l (range)))","user":"5f3f2281e4b004f08c61c561"},{"problem":157,"code":"(fn\n    [coll]\n    ((fn recurr\n       [coll accum]\n       (if (empty? coll)\n         accum\n         (recur (rest coll)\n                (conj accum\n                      (vector (first coll) (count accum)))))) coll []))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"#(map list % (range 0 (count %)))","problem":157,"user":"516eb196e4b06aac486e5b2e"},{"problem":157,"code":"(fn [s] (for [n (range 0 (count s))] [(nth s n) n]))","user":"5c6e1006e4b0fca0c1622744"},{"problem":157,"code":"(fn [l] (map-indexed (fn [idx itm] [itm idx]) l))","user":"5d4a6511e4b0776584bd6f21"},{"problem":157,"code":"#(for [x %]\n   (vector x (.indexOf % x)))","user":"608ee2f7e4b03bd49d9f36c1"},{"problem":157,"code":"(fn [s]\n  (partition 2 (interleave s (map #(.indexOf s %) s))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":157,"code":"(fn [col] (map #(vector %2 %1) (range (count col)) col))","user":"587b8bdee4b01531a375eaff"},{"problem":157,"code":"(fn [c]\n  (map-indexed #(identity [%2 %1]) c))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":157,"code":"(fn [v]\n  (loop [r v, i 0, result []]\n    (if (empty? r)\n      result\n      (recur (rest r) (inc i) (conj result [(first r) i])))))","user":"60882700e4b0ae75613dcedf"},{"problem":157,"code":"(fn [s]\n  (map (fn [data index] (vector data index)) s (range)))","user":"5d47f45de4b07c84aa5ae6b4"},{"problem":157,"code":"(fn pair ([s] (pair s 0))\n  ([s i]\n  (if(empty? s)\n    (sequence ())\n    (conj (pair (rest s) (inc i)) (vector (first s) i)))))","user":"5c486dece4b0e06e1360a3c0"},{"problem":157,"code":"(fn [s] (map-indexed (fn [idx itm] (list itm idx)) s))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"#(vec (map-indexed (comp reverse vector) %))","problem":157,"user":"4ec1b090535dfed6da9c6db5"},{"code":"map-indexed (comp reverse vector)","problem":157,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn indexing ([x] (indexing x 0)) \n             ([x a] (if (= (count x) 0) \n                      [] \n                      (cons (list (first x) a) (indexing (rest x) (+ a 1))))))","problem":157,"user":"52e253fce4b09f7907dd1432"},{"code":"(fn [l] (map vector l (range)))","problem":157,"user":"4fc0853ae4b081705acca327"},{"problem":157,"code":"(fn [col]\n  (map vector col (range (count col))))","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn [c] \r\n  (map-indexed #(vector %2 %1) c))","problem":157,"user":"4facff22e4b081705acca230"},{"code":"(fn [coll]\n  (map #(vector % %2) coll (range)))","problem":157,"user":"520242bae4b030ee0c5b26e3"},{"problem":157,"code":"(fn [sq] (map-indexed (fn [idx val] (vector val idx)) sq))","user":"5a0a3473e4b0eab8c0448941"},{"code":"(fn [x] (map vector x (range)))","problem":157,"user":"535920b2e4b04ce2eb3ed294"},{"code":"(fn [coll]\n  (map-indexed #(list %2 %1) coll))","problem":157,"user":"4fb2d2f3e4b081705acca293"},{"code":"(fn index-sequences [colls]\n    (map vector colls (range)))","problem":157,"user":"5273562ae4b03e8d9a4a7479"},{"problem":157,"code":"keep-indexed (fn [a b] [b a])","user":"4f5eda39e4b0030a34fb2b56"},{"problem":157,"code":"(fn [seqs]\n   (loop [num 0 seqs seqs res []]\n     (if (empty? seqs)\n       res\n       (recur (inc num) (rest seqs) (conj res [(first seqs) num])))))","user":"5508102ee4b021ccfedb96b0"},{"problem":157,"code":"(fn f\n  ([xs] (f xs 0))\n  ([[x & xs] n]\n   (if (empty? xs)\n     [[x n]]\n     (into [[x n]] (f xs (+ 1 n))))))","user":"56483562e4b0284900eef629"},{"problem":157,"code":"(fn [a] (map #(vector %1 %2) a (take (count a) (range))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":157,"code":"#(for [i (range (count %))]\n   (vector (get % i) i))","user":"58d2af83e4b03c36ff7e5907"},{"problem":157,"code":"#( loop [i 0 ss % result []]\n    (if (empty? ss)\n      result\n      (recur (inc i) (rest ss) (conj result [(first ss) i])))\n)","user":"5763818ae4b0994c1922fbc7"},{"problem":157,"code":"(fn trans-seq [in-arr]\n\t(reduce #(conj %1 [%2 (count %1)]) [] in-arr)\n)","user":"5559b443e4b0deb715856e3c"},{"code":"#(map (fn [e i] (list e i)) % (range))","problem":157,"user":"4df20dda535d08e6dec9fe23"},{"problem":157,"code":"(fn [coll]\n   (->> coll\n        (interleave (->> coll (count) (range)))\n        (partition 2)\n        (map reverse)))","user":"53ed6976e4b0d648e757f4c4"},{"problem":157,"code":"(fn [rando-seq]\n  (loop [x rando-seq\n         y (empty rando-seq)]\n    (if (empty? x)\n      y\n      (recur (rest x)\n             (conj y (conj (vector (first x)) (.indexOf rando-seq (first x))))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":157,"code":"(fn my-index\n  ([coll] (my-index coll 0))\n  ([coll n]\n    (if (empty? coll)\n      nil\n      (cons [(first coll) n] (lazy-seq (my-index (rest coll) (inc n)))))))","user":"54125eeee4b01498b1a719d3"},{"problem":157,"code":";(fn [x]\n;  (map #(vector %1 %2) x (range)))\n\n#(map vector % (range))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":157,"code":"(fn [l](map-indexed (fn [idx itm] [itm idx])l))","user":"5481be5fe4b0e286459a1172"},{"code":"(fn index- [coll]\n  \"157. Transform a sequence into a sequence of pairs containing the                                                                                                     \noriginal elements along with their index.\"\n  (map-indexed (fn [idx itm] [itm idx]) coll)\n  )","problem":157,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"#(map vector %(range))","problem":157,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn f [n]\n    (map vector n (take (count n)(range 100)))\n)","problem":157,"user":"51d1111ce4b067c36548635f"},{"problem":157,"code":"(fn [xs]\n (map vec (partition 2 (interleave \n  xs \n  (iterate inc 0)))))","user":"57f9011ee4b0d3187e900935"},{"problem":157,"code":"keep-indexed #(list %2 %1)","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn [s]\n  (map vector s (range)))","problem":157,"user":"4f050dec535dcb61093f6bef"},{"problem":157,"code":"(fn[lst] (partition 2 (interleave lst (range (count lst)))))","user":"571172ece4b09c608db70446"},{"code":"#(map list % (iterate inc 0))","problem":157,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [lst]\n  (loop [lst,lst i,0 res,[]]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (inc i) (conj res [(first lst) i]))\n      )))","problem":157,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"#(vec (map vector %1 (iterate inc 0) ))","problem":157,"user":"50dcb2f4e4b02e6ac9592c91"},{"problem":157,"code":"(fn indseq [aseq]\n(for [x aseq]\n  [x (.indexOf aseq x) ]\n  )\n)","user":"58a17511e4b02bd94d917eb4"},{"code":"#(vec (reverse (zipmap % (range (count %)))))","problem":157,"user":"5047782ce4b0371827a27bc2"},{"problem":157,"code":"(fn [c]\n    (map #(vector % (.indexOf c %)) c))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [mySeq] (map vector mySeq (range (count mySeq))))","problem":157,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [l] (map vector l (range (count l))))","problem":157,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":157,"code":"(fn [coll]\n  (loop [index 0\n         input coll\n         output []]\n    (if (empty? input)\n      output\n      (recur\n       (inc index)\n       (rest input)\n       (conj output (vector (first input) index))))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":157,"code":"map (fn [i x] [x i]) (range)","user":"4f301d02e4b0d6649770a072"},{"code":"(fn [coll]\n  (map-indexed\n    #(vector %2 %)\n    coll))","problem":157,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [col] (map-indexed #(list %2 %) col))","problem":157,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":157,"code":"#(map-indexed\n  (fn [elem pos]\n    [pos elem])%)","user":"59e68254e4b0249b728206fc"},{"problem":157,"code":"(fn [xs] (map-indexed #(do [%2 %1]) xs))","user":"5e1754abe4b00200644e3d53"},{"problem":157,"code":"#(reverse (vec (zipmap % (range 3))))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":157,"code":"#(map vector % (vec (range (count %))))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":157,"code":"(fn a [n b]\n\t(if (< n (count b)) \n\t\t(into [] (cons (vector (get b n) n) (a (+ n 1) b)))\n\t\t[]\n\t)\n) 0","user":"5710e574e4b09c608db7043b"},{"code":"(fn seq-idx [s]\n  (map list s (iterate (partial + 1) 0)))","problem":157,"user":"4fcf642ee4b03432b189f410"},{"problem":157,"code":"(fn with-index [col]\n  (loop [i 0\n         items col\n         zipped []]\n    (if (empty? items)\n      zipped\n      (recur (inc i) (rest items) (conj zipped [(first items) i])))))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [sq] (map list sq (range)))","problem":157,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":157,"code":"(fn [s]\n  (loop [coll [] cnt 0 ]\n    (if (< cnt (count s))\n      (let [c (conj [] (get s cnt) cnt)]\n        (recur\n          (conj coll c)\n          (inc cnt)))\n      coll)))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":157,"code":"(fn [xs]\n  (map (fn [x y] [x y]) xs (range)))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"problem":157,"code":"(fn f [coll]\n  (map #(vector %1 %2) coll (range )))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":157,"code":"(fn [seqn]\n  (map-indexed (fn [idx item]\n                 [item idx])\n               seqn))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":157,"code":"(fn [xs]\n  (map-indexed\n   (fn [idx x]\n     [x idx])\n   xs))","user":"605b49b7e4b079a07f8593f8"},{"problem":157,"code":"(fn [x] (map vector x (iterate inc 0)))","user":"55d1aa33e4b0e31453f64a48"},{"problem":157,"code":"(fn ff [coll]\n    (let [map-coll (apply map vector [coll (range)]) ]\n      map-coll\n      )\n    )","user":"5a71c89ee4b0512ff01cda93"},{"problem":157,"code":"(fn [x] (into [] (map #(vector %1 %2) x (range (count x)))))","user":"5a533cc0e4b05d388ecb6c09"},{"problem":157,"code":"(fn [xs]\n  (map #(vector %1 %2) \n       xs\n       (range)))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":157,"code":"(fn[l]\n  (map list l (iterate inc 0)))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":157,"code":"(fn [x] (map vector x (map #(.indexOf x %1) x)))","user":"5379b723e4b06839e8705e57"},{"problem":157,"code":"(fn [sq] (map-indexed #(identity [%2 %1]) sq))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [vect]\n  (vec (mapcat (fn [a b] [[a b]]) vect (vec (range 0 (count vect))))))","problem":157,"user":"50e135f4e4b084616e11c667"},{"problem":157,"code":"(fn solution [sequen]\n  (let [inter (range (count sequen))]\n    (map vector sequen inter)))","user":"5e2ef900e4b05b4b015161fc"},{"problem":157,"code":"(fn [s] (map-indexed #(reverse %&) s))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":157,"code":"(partial map (comp reverse vector) (iterate inc 0))","user":"4f2acb29e4b0d6649770a040"},{"problem":157,"code":"(fn [s] (map-indexed #(vec [%2 %1]) s))","user":"5604bcf7e4b08b23635d315a"},{"code":"(fn [s]\n  (into []\n    (map #(vector % %2) s (range))))","problem":157,"user":"4ec56b5b535d6d7199dd369f"},{"problem":157,"code":"#(loop [counter 0\n        trans []\n        x %1]\n   (if (not-empty x)\n     (recur (inc counter) (conj trans [(first x) counter]) (rest x))\n     trans))","user":"56491d05e4b0284900eef63a"},{"problem":157,"code":"#(map (fn [pair] [(second pair) (first pair)]) (map-indexed vector %))","user":"5484fab9e4b0e286459a11a6"},{"problem":157,"code":"(fn my-index\n  [c]\n  (loop [v [] n 0 c c]\n    (if (empty? c)\n      v\n      (recur (conj v [(first c) n]) (inc n) (rest c) ))))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":157,"code":"(fn index-seq\n  [xs]\n  (map #(list %1 %2)  xs (range 0 (count xs))))","user":"5ef18431e4b07c55ae4a0529"},{"problem":157,"code":"(fn [x]\n  (map (fn [a b] [a b]) \n       x \n       (range (count x))))","user":"53065acbe4b02e8216869792"},{"problem":157,"code":"(fn [col]\n  (map vector col (range)))","user":"4f039c67535dcb61093f6b3a"},{"code":"(fn [a] (reduce (fn [x y] (conj x [y (count x)])) [] a))","problem":157,"user":"4e99f2e1535dbda64a6f6b6c"},{"problem":157,"code":"#(map reverse (map-indexed vector %1))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":157,"code":"(fn index-sequence [col]\n  (loop [xs col\n         cnt 0\n         acc []]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc cnt) (conj acc (vector (first xs) cnt))))))","user":"544257b4e4b032a45b869379"},{"problem":157,"code":"#(apply map list [% (range (count %))])","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":157,"code":"#(map vector % (range ))","user":"5957cc41e4b066ee0a44af76"},{"problem":157,"code":"#(map list % (take (count %) (iterate inc 0)))","user":"504f5804e4b0a02f9cffde72"},{"problem":157,"code":"(fn [xs] (map (fn [x] [x (.indexOf xs x)]) xs))","user":"5883920ee4b0f1effa3b767e"},{"problem":157,"code":"(fn [a_seq] (map-indexed (fn [i a] [a i]) a_seq))","user":"556189a6e4b0c656e3ff17c9"},{"problem":157,"code":"(fn [a] (map-indexed #(vector %2 %1) a))","user":"568227fee4b0945ebc182a8a"},{"problem":157,"code":"map-indexed #(conj [] %2 %)","user":"5405ae2be4b0addc1aec6671"},{"problem":157,"code":"(fn Indexing-Sequences\n  [lst]\n  (loop [i 0\n         ilst []\n         seq lst]\n    (cond\n      (empty? seq)  (apply vector (reverse ilst))\n      :else (recur (inc i) (concat [[(first seq) i]] ilst) (rest seq)))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":157,"code":"(fn idx\n [seq1]\n (let [pos (take (count seq1) (iterate inc 0))]\n \t(map (fn [elem id] (vector elem id)) seq1 pos)\n \t))","user":"53d6b266e4b0e771c3025459"},{"problem":157,"code":"(fn [coll]\n  (loop [input coll n 0 output []]\n    (if (empty? input)\n      output\n      (recur (rest input) (inc n) (conj output [(first input) n]))\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"problem":157,"code":"(fn indexed-seq [s]\n  (map vector s (range)))","user":"58ed713de4b056aecfd47d84"},{"problem":157,"code":"(fn [myList] (into [] (for [x myList] [x (.indexOf myList x)])))","user":"5cd438c8e4b0ccb061962917"},{"problem":157,"code":"(fn [coll]\n  (keep-indexed (fn [i v] [v i]) coll))","user":"5484143de4b0e286459a1197"},{"code":"(fn [x] (map-indexed (fn [i j] [j i]) x))","problem":157,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":157,"code":"(fn[x] (map vector x (iterate inc 0)))","user":"561d7246e4b064ca9f4b16b1"},{"problem":157,"code":"(fn [a-seq]\n  (map-indexed (fn [idx itm] [itm idx]) a-seq))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":157,"code":"keep-indexed (fn [k v] [v k])","user":"56372798e4b0bfe05bf117d0"},{"problem":157,"code":"(fn [vals] (#(map list % (range)) vals))","user":"5380a27ae4b06839e8705ec4"},{"problem":157,"code":"#(loop [coll % result []] ( if (empty? coll) result (recur (rest coll ) (conj result [(first coll) (count result)]) ) ))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":157,"code":"#(map (fn [a b] (list a b)) %1 (range))","user":"525b142fe4b0cb4875a45d05"},{"problem":157,"code":"(fn f [l] (map #(vector %1 %2) l (iterate inc 0)))","user":"56df6351e4b0ca2494a095f3"},{"problem":157,"code":"(fn [x]\n    (map vector x (range (count x))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"#(for [i (range (count %))]\n   [(% i) i])","problem":157,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [s] (map #(vector % (.indexOf s %)) s))","problem":157,"user":"4f8b27b3e4b02e764a0a5179"},{"code":"(fn [coll]\n  (map reverse (#(map-indexed vector %) coll)))","problem":157,"user":"4faafccde4b081705acca209"},{"problem":157,"code":"(fn [s]\n  (map #(conj [%1] %2) s (range 0 (count s))))","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn [a] (map #(vector %1 %2) a (iterate inc 0)))","problem":157,"user":"5050b107e4b063148f524126"},{"problem":157,"code":"(fn\n  [my-list]\n  (loop\n    [index 0\n     elements my-list\n     indexed-list []]\n    (if (= (count elements) 0)\n      indexed-list\n      (recur (inc index)\n             (rest elements)\n             (conj indexed-list [(first elements) index])))))","user":"5a3ece62e4b0447ef91cc5b9"},{"problem":157,"code":"#(map (fn [i](identity [(nth % i) i])) (range 0 (count %)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":157,"code":"(fn [x]\n  (loop [tmp x result [] cnt 0]\n    (if (empty? tmp)\n      result\n      (recur (next tmp)\n             (conj result (conj (conj [] (first tmp)) cnt ))\n             (inc cnt)\n             )\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn [s] (keep-indexed (fn [a b] (seq [b a])) s))","problem":157,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":157,"code":"(fn [xs] \n  (loop [ys xs\n         i 0\n         r []]\n    (if (empty? ys)\n      r\n      (recur (rest ys) (inc i) (conj r [(first ys) i])))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn index-seq [coll]\n  (cond\n  (list? coll) (for [x (range (count coll))] (list (nth coll x) x))\n  (vector? coll) (vec (for [x (range (count coll))] [(nth coll x) x]))))","problem":157,"user":"52cefb7ee4b07d0d72b27397"},{"problem":157,"code":"(fn [s]\n  (map-indexed #(vector %2 %1) s)\n  )","user":"539ec9f9e4b0ca733b974491"},{"code":"(fn [coll]\n  (reduce-kv #(conj %1 [%3 %2]) [] coll))","problem":157,"user":"50bd6033e4b0594b91591c66"},{"problem":157,"code":"#(map-indexed (fn [itm idx]\n                   [idx itm])%)","user":"592518cde4b072a2710fce66"},{"problem":157,"code":"(fn [l] (reduce (fn [pairs item] (concat pairs [[item (count pairs)]])) [] l))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn idxseq\n  ([s] (idxseq s 0))\n  ([s n] (if (not-empty s)\n           (cons [(first s) n]\n                 (idxseq (rest s) (inc n))))))","problem":157,"user":"4e80aa10535db62dc21a62b1"},{"code":";map-indexed \n\n;(fn [listItems] (map-indexed #(list % %2) listItems))\n\n(fn [listItems] (map-indexed #(list %2 %) listItems))","problem":157,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":157,"code":"(fn p157 [coll]\n  (reverse (zipmap coll (range))))","user":"5400e918e4b0de5c41848619"},{"code":"(partial map (fn [x y] [y x]) (range))","problem":157,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn [x] (map #(list % %2) x (range (count x)) ))","problem":157,"user":"4febb4dae4b0681fd128dc98"},{"problem":157,"code":"(fn [v] (map-indexed #(vector %2 %) v))","user":"54b83ae9e4b0ed20f4ff6e95"},{"problem":157,"code":"#(map (fn [a b] [a b]) %1 (range))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn [coll] (map vector coll (range)))","problem":157,"user":"4dc97aec535d5973398f9284"},{"problem":157,"code":"(fn sss [ss] (reduce-kv (fn[d a b] (conj d [b a])) [] ss))","user":"55f01316e4b06e875b46ce1a"},{"problem":157,"code":"#(map vector % (range (count %)) )","user":"567476bde4b05957ce8c6139"},{"code":"(fn [x]\n  (map vector x (range)))","problem":157,"user":"538d464ee4b0b51d73faae69"},{"code":"(fn isq\n    ([coll]\n     (lazy-seq\n       (cons [(first coll) 0] (isq (rest (seq coll)) 1))))\n    ([coll n]\n     (lazy-seq\n       (let [s (seq coll)]\n         (when s\n           (cons [(first coll) n] (isq (rest s) (inc n))))))))","problem":157,"user":"53806e5be4b06839e8705ec1"},{"problem":157,"code":"map-indexed (fn[a b] [ b a])","user":"60845eb8e4b0736b099e42ef"},{"code":"#(loop [xs % index 0 result []]\n    (if (not (seq xs))\n      result\n      (recur (rest xs) (inc index) (conj result [(first xs) index]))))","problem":157,"user":"5032b398e4b00c0952a257eb"},{"problem":157,"code":"(fn [v]\n  (loop [v v, i 0, res []]\n    (if (seq v)\n      (recur (rest v) (inc i)(conj res [(first v) i]))\n      res)))","user":"5a7ae674e4b03baeef9276d5"},{"problem":157,"code":"map-indexed (fn [idx itm ] [itm idx])","user":"53f6566ee4b0db01ade6f9de"},{"code":"#(into () (zipmap % (range)))","problem":157,"user":"4e43b0d9535dc968683fc4a3"},{"problem":157,"code":"#(for [i %] [i (.indexOf % i)])","user":"52a267c6e4b04e0c58e87bef"},{"code":"#(for [i (range (count %))] [(get % i) i])","problem":157,"user":"4eabb245535d7eef30807319"},{"code":"(fn [xs]\n      (map-indexed #(vector %2 %) xs))","problem":157,"user":"50f48298e4b004d364930527"},{"problem":157,"code":"#(reverse (zipmap  % (range (count %))))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":157,"code":"#(map (fn [e i] (vector e i)) % (range))","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn index-seq\n  ([s] (index-seq s 0 []))\n  ([s i acc]\n    (if (empty? s)\n      acc\n      (index-seq (rest s) (inc i) (conj acc [(first s) i]))\n    )\n  )\n)","problem":157,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn [coll]\n  (partition 2 (interleave coll (range (count coll)))))","problem":157,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":157,"code":"(fn MAP-SEQ [col]\n  (map vector col (iterate inc 0)))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":157,"code":"(fn [c]\n (vec (reverse (loop [c c n 0 ac nil]\n   (if (empty? c) ac\n     (recur (rest c) (inc n) (conj ac (vector (first c) n ))))))))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":157,"code":"(fn idx-seq [coll]\n  (map-indexed (fn [idx item] [item idx]) coll))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn foo ([s1] (foo s1 0)) ([s1 i] ( if (empty? s1) [] (cons (cons (first s1) (cons i [] ) ) (foo (rest s1) (+ i 1) )  ) ) ) )","problem":157,"user":"4e8d5edd535d65386fec2134"},{"code":"#(partition 2 \n  (interleave % \n    (range (count %))))","problem":157,"user":"4fa30027e4b081705acca187"},{"problem":157,"code":"(fn [coll]\n  (loop [eka (first coll) loput coll i 0 t []]\n    (if (empty? loput)\n      t\n      (recur (first (rest loput)) (rest loput) (inc i) (conj t [eka i])))))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn [coll]\n  (map vector coll (iterate inc 0))\n  )","problem":157,"user":"5228f870e4b0186687e23a98"},{"problem":157,"code":"(fn  index\n  [lst]\n  (map-indexed (fn [i a] [a i]) lst))","user":"57fedf07e4b0d3187e9009dc"},{"code":"#(map (fn [i x] [x i]) (range) %1)","problem":157,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn [s](map #(vector % %2) s (iterate inc 0)))","problem":157,"user":"51f81925e4b09be9c177e526"},{"problem":157,"code":"(fn [lst]\n     (map #(vector (lst %) %) (range (count lst))))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"(fn [l] (map list l (range)))","problem":157,"user":"53638ed2e4b0243289761e5b"},{"problem":157,"code":"(fn tseq [s]\n  (loop [coll s\n         idx 0\n         acc []]\n    (if-let [el (first coll)]\n      (recur (rest coll) (inc idx) (conj acc [el idx]))\n      acc)))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"(fn [x]\n    (map #(reverse %) (map-indexed list x)))","problem":157,"user":"5236cd89e4b0e010857b4e45"},{"code":"(fn [coll] (map vector coll (take (count coll) (range))))","problem":157,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn\n  [s]\n  (map #(vector %1 %2) s (range)))","problem":157,"user":"52dfc89be4b09f7907dd1405"},{"problem":157,"code":"#(map vector %1 (take (count %1) (iterate inc 0)))","user":"5e380e72e4b01d43a70e8db0"},{"problem":157,"code":"(fn f [xs & a]\n    (cond (empty? a) (f xs 0)\n          (empty? xs) '()\n          true (cons [(first xs) (first a)] (f (rest xs) (inc (first a))))))","user":"5583888ae4b05c286339e117"},{"problem":157,"code":"(fn [s]\n  (letfn [(ii [se dex] (if (empty? se) '() (cons (list (first se) dex)\n                                                 (ii (rest se) (inc dex)))))]\n    (ii s 0)))","user":"60264d89e4b0d5df2af2222d"},{"problem":157,"code":"(fn [coll]\n  (reverse (into (empty coll) (reduce (fn [acc x]\n           \t\t\t \t(cons (list x (.indexOf coll x)) acc)) `() coll))))","user":"57434103e4b0c285004e8a9e"},{"problem":157,"code":"(fn [lst] (map #(reverse %)(map-indexed vector lst)))","user":"59e8cd8be4b0249b72820739"},{"problem":157,"code":"map-indexed (fn [idx item] (vector item idx))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn foo [l]\n  (if (empty? l)\n    []\n    (conj (foo (reverse (rest (reverse l)))) [(last l) (- (count l) 1)]) ) \n  )","problem":157,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":157,"code":"(fn indexing-sequence\n  [sequence]\n  (reverse (loop [[x & xs] sequence\n                  counter 0\n                  result '()]\n             (if (empty? xs)\n               (cons (list x counter) result)\n               (recur xs (inc counter) (cons (list x counter) result))))))","user":"52561295e4b0541d1855ba03"},{"code":"(fn with-indices [s]\n\t\t       (map #(vector %1 %2) s (iterate inc 0)))","problem":157,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"map-indexed #(do [%2 %1])","problem":157,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn [c] (map-indexed (fn [idx itm] [itm idx]) c))","problem":157,"user":"533f09e1e4b085b17e897d9a"},{"problem":157,"code":"(fn [a](map #(vector %2 %) (iterate inc 0) a))","user":"53ada652e4b047364c04446d"},{"problem":157,"code":"(fn [items]\n  (map-indexed (fn [i x] [x i]) items))","user":"5188c249e4b0bdff0e072d54"},{"problem":157,"code":"(fn [s] (map (fn [a b] [a b]) s (range (count s))))","user":"543bb568e4b032a45b869334"},{"problem":157,"code":"#(map vector %1 (iterate inc 0 ))","user":"564a560ae4b0284900eef654"},{"problem":157,"code":"(fn [s] (map #(vector % %2) s (range)))","user":"583048d9e4b051871117c007"},{"problem":157,"code":"(fn [seq]\n  (reduce #(conj % (vector %2 (.indexOf seq %2))) [] seq))","user":"56a80867e4b07966d5a8a069"},{"problem":157,"code":"(fn map-to-indexes [coll]\n  (map vector coll (range (count coll))))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":157,"code":"(fn index-sequence [xs]\n  (map vec (partition-all 2 (interleave xs (take (count xs) (iterate inc 0))))))","user":"55fb58b2e4b0f488688e0661"},{"problem":157,"code":"(fn [col]\n  (map list col (range)))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":157,"code":"(fn inseq [s]\n  (loop [ss s c 0 res []]\n        (if (empty? ss)\n          res\n          (recur (next ss) (inc c) (conj res [(first ss) c])))))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":157,"code":"#(map-indexed (fn [idx elem] [elem idx]) %1)","user":"5658d775e4b00d3155796114"},{"problem":157,"code":"(fn [x]\n  (apply vector\n         (for [i (range (count x))] [(nth x i) i]\n           )\n         )\n  )","user":"589f37e0e4b02bd94d917e79"},{"problem":157,"code":";#(apply map vector ((juxt identity (comp range count)) %))\n#(map vector % (range))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn[s](map-indexed #(vector %2 %) s))","problem":157,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":157,"code":"#(map-indexed (fn[i v](if (= 1 1) [v i])) %)","user":"53e9681de4b036ad0777e4a4"},{"problem":157,"code":"map-indexed #(-> %& reverse vec)","user":"53c649d3e4b00fb29b221297"},{"problem":157,"code":"(fn Ind-seq [coll]\n  (keep-indexed (fn [x1 x2] [x2 x1]) coll))","user":"5f38eecce4b0574c87022c72"},{"code":"#(sort-by val (zipmap % (range 3)))","problem":157,"user":"51aeb1f4e4b09397d5109794"},{"problem":157,"code":"(fn [sq]\n  (map vector sq (range (count sq))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [xs]\n  (map vector xs (range)))","problem":157,"user":"52487654e4b05ef8e38e63dc"},{"code":"(fn f [coll]\n  (map #(vector % %2) coll (range)))","problem":157,"user":"51750cd4e4b07031762f2ee5"},{"problem":157,"code":"(fn index\n  [coll]\n  (map vector coll (range) )\n  )","user":"5ac37d0fe4b0e27600da7718"},{"code":"(fn [s] (\n         map #(vec [%1 %2]) s (range (count s))\n         ) )","problem":157,"user":"53852e84e4b06839e8705efd"},{"problem":157,"code":"#(partition 2 (interleave % (iterate inc 0) ))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":157,"code":"(fn idxs [s]\n  (map-indexed #(conj [] %2 %1) s))","user":"5f8b06afe4b0715f5002d74a"},{"code":"#(reverse (apply vector (zipmap % (range (count %)))))","problem":157,"user":"5046f909e4b03b02161376b5"},{"problem":157,"code":"#(map reverse (map-indexed  vector %))","user":"5488537be4b0e286459a11cf"},{"problem":157,"code":"(fn [thing]\n  (loop [stuff thing i 0 ret []]\n    (if (empty? stuff) \n      ret\n      (recur (rest stuff) (inc i) (conj ret [(first stuff) i])))))","user":"5751fda4e4b02ea114799295"},{"problem":157,"code":"(fn [in-vec](loop [invec in-vec\n                   index 0\n                   res nil]\n              (if (empty? invec)\n                res\n                (recur (rest invec) (inc index) (concat res [[(first invec) index]])))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn f\n  ([s] (f s 0))\n  ([s n]\n     (if-let [[x & xs] (seq s)]\n       (conj (f xs (inc n)) (list x n))\n       '())))","problem":157,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":157,"code":"(fn [sq]\n  (map-indexed (fn [idx item] [item idx] ) sq ))","user":"54bbe505e4b0ed20f4ff6ec5"},{"code":"(fn [l]\n  (let [ints (iterate inc 0)]\n    (map (fn [x y] [x y]) l ints)))","problem":157,"user":"4daea889edd6309eace4d15b"},{"problem":157,"code":"(fn index \n  ([ls] (index ls 0 []))\n  ([ls i result]\n   (if (empty? ls)\n     result\n     (index (rest ls) (inc i) (conj result (vector (first ls) i))))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"#(map-indexed (fn [i v] (vector v i)) %)","problem":157,"user":"52606318e4b03e8d9a4a7036"},{"problem":157,"code":"map-indexed #(seq [%2 %1])","user":"554680cbe4b0a04f7929953e"},{"code":";After learning about map-indexed\n\nmap-indexed #(vector %2 %1)\n\n;(fn [s] \n;\t(map #(vector % (.indexOf s %)) s))","problem":157,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn f [v]\n  (map #(vector (nth v %) %) (range (count v) ) ))","problem":157,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":157,"code":"(fn [lst] (loop[l '() re lst i 0] (if (empty? re) (reverse l)\n    (recur (conj l (list (first re) i))\n           (rest re)\n           (inc i)\n     )\n                                    \n                                    ) ))","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":157,"code":"#(map (fn [x y] [x y]) %1 (range))","user":"545ddac3e4b01be26fd74676"},{"problem":157,"code":"#(map vector % (range))\n\n;(fn enumerate [inseq]\n;  ((fn helper [inseq index]\n;    (if (empty? inseq)\n;      []\n;      (concat [[(first inseq) index]] (helper (rest inseq) (+ index 1)))\n;    )\n;  ) inseq 0)\n;)","user":"4fc50bcbe4b081705acca375"},{"code":"(fn [coll] (map-indexed (fn [i e] [e i]) coll))","problem":157,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":157,"code":"(fn [s]\n  (loop [idx 0\n        s s\n        result []]\n        (if (empty? s)\n          result\n          (recur (inc idx) (rest s) (conj result [(first s) idx])))))","user":"4fc34787e4b081705acca33e"},{"problem":157,"code":"(fn [s] \n\t(loop [s s i 0 n []]\n      \t(if (first s)\n      \t\t(recur (rest s) (inc i) (conj n [(first s) i]))\n          \tn)))","user":"54fdaeace4b07d26eda61d39"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx itm] [itm idx]) coll))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn inter\n  [xs]\n  (map #(vector %1 %2) xs (range (count xs))))","problem":157,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"map-indexed (fn [idx e] [e idx])","problem":157,"user":"4fd7962ee4b0dab7d829f385"},{"code":"#(map reverse (map-indexed vector %))","problem":157,"user":"50d179c7e4b05a71a896ef56"},{"problem":157,"code":"(fn enumerate\n  [xs]\n  (map list xs (range)))","user":"5c222b7de4b07e362c230588"},{"problem":157,"code":"#(loop [col % idx 0 rt []]\n   (if(empty? col)\n     rt\n     (recur (rest col) (inc idx) (conj rt [(first col) idx]))\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"problem":157,"code":"(fn [coll]\n  (loop [i 0 result []]\n    (if (= i (count coll))\n      (seq result)\n      (recur (inc i) (conj result [(get coll i) i])))))","user":"5d03944de4b0cc9c915881c5"},{"problem":157,"code":"(fn [keyseq]\n\n   (map (fn [k] (vec [k (.indexOf keyseq k)])) keyseq)\n  \n   )","user":"60630af9e4b069485764ddbc"},{"code":"(fn [coll]\n  (for [i (range (count coll))]\n    [(coll i) i]))","problem":157,"user":"50e3cf55e4b01912b3285c45"},{"code":"(fn __ [coll]\n  (map-indexed #(vector %2 %) coll))","problem":157,"user":"4fa719c0e4b081705acca1bf"},{"problem":157,"code":"(partial map-indexed #(into '() %&))","user":"51dafedee4b09f6bc204eee2"},{"code":"(fn [s] (map #(list %1 %2) s (range (count s))))","problem":157,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn [col] (loop [c col r []] (if (seq c) (recur (next c) (conj r [(first c) (count r)])) r)))","problem":157,"user":"539c64cde4b0b51d73faaf2a"},{"code":"(fn index-seq [s]\n  (map #(vector %1 %2) s (iterate inc 0))\n  )","problem":157,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn[v] \n  (loop [a 0 ans []] \n    (if (= a (count v)) \n      ans \n      (recur (inc a) (conj ans [(nth v a) a])))))","problem":157,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [s]\n  (loop\n      [current (first s),\n       remaining (rest s),\n       result [],\n       n 0]\n    (if\n      (empty? remaining)\n      (conj result [current n])\n      (recur\n        (first remaining),\n        (rest remaining),\n        (conj result [current n]),\n        (+ 1 n)))))","problem":157,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":157,"code":"(fn [coll] (loop [idx 0\n                    collection coll\n                    output []]\n               (if (empty? collection)\n                 output \n                 (recur (inc idx) (rest collection) (conj output [(first collection) idx]))) \n               ))","user":"5683fcafe4b0945ebc182aa8"},{"problem":157,"code":"(fn [x]\n  (loop [a x\n         i 0\n         r []]\n    (if (empty? a)\n      r\n      (recur (rest a) (inc i) (conj r [(first a) i])))))","user":"5ab9fe71e4b073f17744269d"},{"problem":157,"code":"(fn answer [input-seq]\n  (loop [input input-seq cnt 0 accumulator []]\n    (if (empty? input)\n      accumulator\n      (recur (rest input) (inc cnt) (conj accumulator (list (first input) cnt))))))","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn do-it [l]\n  (loop [ret []\n        todo l\n        counter 0]\n    (if (empty? todo)\n      ret\n      (recur (conj ret (list (first todo) counter)) (rest todo) (inc counter)))))","problem":157,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":157,"code":"#(partition 2 (interleave % (take (count %)(iterate inc 0))))","user":"56a0ac99e4b0542e1f8d14a6"},{"code":"(fn [k] (map-indexed #(vec [%2 %]) k))","problem":157,"user":"4ede361a535d10e5ff6f5332"},{"problem":157,"code":"#(reduce (fn [a b] (conj a [b (count a)])) [] %)","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [coll] (map-indexed (fn [n a] [a n]) coll))","problem":157,"user":"4e8e8c24535d65386fec2143"},{"code":"#(map (fn [a b] [a b])  % (range (count %)))","problem":157,"user":"51424c61e4b0b50abeb46b33"},{"problem":157,"code":"(fn [v]\n (map-indexed (fn [a b] (vector b a)) v)\n)","user":"5a984657e4b0d174b936c78a"},{"code":"(fn [s]\n  (map #(list % (.indexOf s %)) s))","problem":157,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":157,"code":"(fn indx\n  [s]\n  (map-indexed (fn [idx itm] [itm idx]) s))","user":"56e99ec8e4b04a395b9a03fb"},{"code":"(fn i-seq- [coll]\n  (map vector coll (range)))","problem":157,"user":"511e763ce4b03e81d390ac29"},{"problem":157,"code":"(fn [c]\n  (map #(vector %2 %1) (range) c))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":157,"code":"(fn [s]\n  (map #(vector %1 %2) s (range))\n)","user":"56195e57e4b053970a773af6"},{"problem":157,"code":"(fn [c] (loop [idx 0\n               coll c\n               idx-coll []]\n          (if (empty? coll)\n            idx-coll\n            (recur (inc idx) (rest coll) (conj idx-coll [(first coll) idx])))))","user":"52540bcce4b0541d1855b952"},{"code":"(fn [s] \n\t (loop [x s i 0 rslt []]\n       (if (empty? x)\n         rslt\n         (recur (rest x) (inc i) (conj rslt [(first x) i] ))))\n  )","problem":157,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"#(map (fn [x] [x (.indexOf % x)]) %)","problem":157,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":157,"code":"(fn [coll]\n  (loop [coll coll res [] index 0]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj res (vector (first coll) index)) (+ index 1))\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":157,"code":"(fn [v]\n  (loop [s v i (range (count v)) result []]\n    (if (empty? i) result (recur (rest s) (rest i) (conj result [(first s) (first i)])))))","user":"543823f1e4b032a45b869311"},{"problem":157,"code":"(fn index-seq [s] \n  (loop [i 0, result []]\n    (if (= i (count s)) \n      result\n      (recur (inc i) (conj result [(s i) i])))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [x] (map #(vector % (.indexOf x %)) x))","problem":157,"user":"50517ebfe4b0a561d07d8f06"},{"code":"#(map (fn [a b] [a b]) % (range))","problem":157,"user":"517b59b8e4b0925c997201d0"},{"problem":157,"code":"(fn [a-seq]\n  (map #(vector %1 %2) a-seq (range)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":157,"code":"(fn [s] \n  (map #(vector %1 %2) s (range)))","user":"4dbf7a31535d020aff1edf75"},{"code":"reduce #(conj % [%2 (count %)]) []","problem":157,"user":"51b213c2e4b02f8f128bb962"},{"problem":157,"code":"map #(vector %2 %1) (range 10)","user":"561cad18e4b064ca9f4b169d"},{"problem":157,"code":"(fn [s]\n  (map vector s (iterate inc 0)))","user":"561eb82fe4b064ca9f4b16c7"},{"code":"(fn [coll]\n  (map #(list %1 %2 ) coll (range)))","problem":157,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [s] (map-indexed (fn [a b] [b a]) s))","problem":157,"user":"503b6995e4b07a1917cc34dd"},{"problem":157,"code":"(fn [coll] (map-indexed #(list %2 %1) coll))","user":"57c0917be4b05aa3c4741c95"},{"problem":157,"code":"keep-indexed #(conj [] %2 %1)","user":"57ecc16fe4b0bfb2137f5b83"},{"problem":157,"code":"(fn [coll]\n  (let [y (range (count coll))]\n    (map #(vector %1 %2) coll y)))","user":"567d18c9e4b05957ce8c61c4"},{"problem":157,"code":"(fn [col] (map-indexed (fn [k v]\n               [v k]) col))","user":"56940617e4b0dcc4269f410b"},{"problem":157,"code":"(fn [l] (map (fn [x] [x (.indexOf l x)]) l))","user":"53e76728e4b036ad0777e47c"},{"code":"(fn idx-seq [s]\n  (partition 2 (interleave s (iterate inc 0))))","problem":157,"user":"5127e504e4b03a34742b4302"},{"code":"(fn [x] (map-indexed (fn [idx elm] [elm idx]) x))","problem":157,"user":"52c1bd29e4b07a9af579236a"},{"code":"#(for [e %]\n  [e (.indexOf % e)])","problem":157,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [l] (map #(vector % (.indexOf l %)) l))","problem":157,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":157,"code":"(fn [values]\n  (loop [[current & remainder :as to-process] values\n         index 0\n         result []]\n    (if (empty? to-process)\n      result\n      (recur remainder (inc index) (conj result [current index])))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":157,"code":"(fn [v] (vec (map #(vector %2 %1) (range (count v)) v )))","user":"579d9601e4b05b1deef9ae18"},{"problem":157,"code":"#(loop [a [] i 0 b %] (if (empty? b) a (recur (conj a [(first b) i]) (inc i) (rest b))))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":157,"code":"(fn [xs]\n  (map (fn [x y] [x y])\n       xs\n       (range)))","user":"55f73078e4b06e875b46cea4"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx v] [v idx]) coll))","user":"540a4f20e4b0addc1aec66ef"},{"code":"keep-indexed #(vector %2 %1)","problem":157,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn [col] (map-indexed #(vector %2 %1) col))","problem":157,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [c] (map-indexed #(vector %2 %) c))","problem":157,"user":"4f05ea25535dcb61093f6c02"},{"problem":157,"code":"(fn [sq]\n  (let [size   (count sq)\n        ndxs   (range size)\n        inter  (interleave sq ndxs)\n        paired (partition 2 inter)\n        mapped (map #(into [] %) paired)]\n    (into [] mapped)))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":157,"code":"(fn task57_ [a]\n      (loop [x a, p 0, r []] (if (empty? x) r (recur (rest x) (inc p) (conj r (vector (first x) p ) ) )))\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":157,"code":"(fn [in] \n  (map vector in (range)))","user":"5600591de4b04bb52996e166"},{"problem":157,"code":"(fn [x]\n    (let [seq (take (count x) (range))]\n              ;(map #(if (= \\1  %1) %2 0) (reverse x) seq)\n     (partition 2(interleave x seq))\n              ) \n   )","user":"50b25edae4b03ea88043355e"},{"problem":157,"code":"(fn [es](map-indexed\n    (fn [i e]\n      [e i]) es))","user":"5d28b684e4b092dab7f59c83"},{"problem":157,"code":"#(loop [a-seq % cnt 0 result []] (if (empty? a-seq) result (recur (rest a-seq) (inc cnt) (conj result [(first a-seq) cnt]))))","user":"5978b4c9e4b01722bebd4d13"},{"code":"(fn [x]  (map-indexed (comp reverse vector) x))","problem":157,"user":"52173464e4b082aa80a88c75"},{"code":"#(vec (map vector % (iterate inc 0)))","problem":157,"user":"4fab0b6be4b081705acca20c"},{"code":"map-indexed #(reverse %&)","problem":157,"user":"4ef9c8f9535dced4c769f26b"},{"problem":157,"code":"(fn tok [ x ] (map (fn [x y] [x y]) x (iterate inc 0)))","user":"5839f079e4b089d5ab817d48"},{"problem":157,"code":"(fn [a] (map #(vector % %2) a (range)))","user":"5f686436e4b02876ed9fd03c"},{"problem":157,"code":"(letfn [(z1 ([a] (z2 a 0 [])))\n        (z2 ([a i r] (if (empty? a)\n          r\n          (recur (rest a) (inc i) (conj r (list (first a) i))))))]\n  z1)","user":"52bdd135e4b07a9af579230a"},{"code":"(fn index-seq-157\n  [coll]\n  (sort-by val < (apply vector (zipmap coll (range (count coll))))))","problem":157,"user":"501b1a8ee4b0b12d9c5f4d81"},{"code":"(fn [a] (map reverse (map-indexed vector a)))","problem":157,"user":"4fab31a8e4b081705acca215"},{"problem":157,"code":"(fn [lst] (map-indexed #(vector %2 %1) lst))","user":"5f648ef1e4b02876ed9fd01b"},{"problem":157,"code":"map-indexed #(-> [%2 %])","user":"4fe9de74e4b0547ebccb2475"},{"problem":157,"code":"#(reverse (zipmap % (range (count %))))","user":"546113ffe4b01be26fd74699"},{"code":"(fn [xs]\n  (loop [result [] items xs n 0]\n    (if (not (seq items))\n      result\n      (recur (conj result (vector (first items) n)) (rest items) (inc n) ))))","problem":157,"user":"51857e64e4b0da5a5be3babe"},{"problem":157,"code":"#(loop [n 0\n        coll %\n        acc []]\n   (if (empty? coll)\n     acc\n     (recur (inc n)\n            (rest coll)\n            (conj acc [(first coll) n]))))","user":"4f963487e4b0dcca54ed6cd9"},{"code":"(fn [xs] (map vector xs (range)))","problem":157,"user":"4db1b3951254ad5b4805fa6f"},{"problem":157,"code":"(fn [coll]\n  (keep-indexed #(vector %2 %1) coll))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":157,"code":"(fn [sequence]\n  (->> (map-indexed vector sequence)\n       (map reverse)))","user":"56c44c34e4b05cc29241ee96"},{"code":"(fn [xs]\n  (map-indexed (fn [index x]\n                 [x index]) xs))","problem":157,"user":"50611456e4b0dc10a69545a5"},{"problem":157,"code":"(fn\n  [coll]\n  (loop [sub coll\n         i 0\n         res []]\n    (if-let [x (first sub)]\n      (recur (rest sub) (inc i) (conj res [x i]))\n      res)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":157,"code":"(fn [coll] (loop [op [] cont (interleave coll (range (count coll)))]\n                  (if (empty? cont)\n                      op\n                      (recur (conj op (vector (first cont) (second cont)))\n                             (drop 2 cont)))))","user":"593ab583e4b069cdc2982b57"},{"code":"map-indexed (fn [idx k] [k idx])","problem":157,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":157,"code":"(fn [xs]\n  (map-indexed (fn [idx itm]\n                 [itm idx]) xs))","user":"5da7176ae4b000c986472c13"},{"problem":157,"code":"map (fn [k v] [v k]) (range)","user":"5943abb6e4b060784b3b792b"},{"problem":157,"code":"(fn [coll] (map-indexed #(vector %2 %) coll))\n;(fn [c] (map-indexed #(vector %2 %) c))","user":"54d251aee4b0e8a36923e5f1"},{"code":"(fn [s]\n  (loop [s s\n         n 0\n         r []]\n    (if (empty? s)\n      r\n      (recur (rest s)\n             (inc n)\n             (conj r [(first s) n])))))","problem":157,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":157,"code":"(fn [a] (partition 2 (interleave a (range (count a)))))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn [v] \n  (vec (map-indexed #(vector %2 %) v)))","problem":157,"user":"524ad140e4b09eba1c0223a9"},{"problem":157,"code":"(fn my-index\n  [s]\n  (vec (map vector s (iterate inc 0))))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn [a]\n  \t(for [y (range 0 (count a))]\n      \t[(nth a y) y]))","problem":157,"user":"52747090e4b03e8d9a4a74a5"},{"problem":157,"code":"#(map-indexed (fn [ix itm] [itm ix]) %)","user":"55929e89e4b0604b3f94d58e"},{"problem":157,"code":"(fn [x] \n  (map vector x \n       (range (count x))))","user":"59ea85e4e4b0249b72820767"},{"code":"(fn [s] (map-indexed (fn [i v] [v i]) s))","problem":157,"user":"52199105e4b0c4ef0be82ff9"},{"problem":157,"code":"(fn [coll] (map-indexed (fn [index item] [item index]) coll))","user":"5d2bfb68e4b01671435dbc86"},{"problem":157,"code":"(fn\n  [lst]\n  (mapcat #(vector (reverse %)) (map-indexed vector lst)))","user":"57f81569e4b0d3187e900919"},{"code":"(fn  [ms] (map (fn [x y] [y x]) (range (count ms)) ms))","problem":157,"user":"52b43468e4b0c58976d9ad1b"},{"problem":157,"code":"(fn [coll]\n   (loop [c coll i 0 acc []]\n     (if-not (seq c)\n       acc\n       (recur (rest c) (inc i)\n         (conj acc [(first c) i])))))","user":"51bd255ce4b0df1216cefd94"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [i k] [k i]) s))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn [coll]\r\n    (loop [input coll\r\n           output []\r\n           index 0]\r\n      (if (empty? input)\r\n        output\r\n        (recur (rest input)\r\n               (conj output [(first input) index])\r\n               (inc index)))))","problem":157,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":157,"code":"(fn [col] \n  (map (fn [a b] [a b]) col (range (count col)))\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn [l]\n     (loop [s l i 0 o []]\n\t   (if (empty? s)\n\t       o\n\t     (recur (rest s) (inc i) (conj o [(first s) i])))))","problem":157,"user":"5101192ae4b0bef64c30e266"},{"problem":157,"code":"(fn [coll] (loop [coll coll\n                  ind 0\n                  acc []]\n             (if (empty? coll)\n               acc\n               (recur (rest coll) (inc ind) (conj acc [(first coll) ind])))))","user":"571cd9dce4b0145328a76271"},{"problem":157,"code":"(fn [coll] (map-indexed (fn [index item] (vector item index)) coll))","user":"5169b23fe4b03f62cda68cee"},{"problem":157,"code":"(fn [m] (map conj (map vector m) (range 0 (count m))))","user":"5785de71e4b0ebec4cfb74e7"},{"code":"(fn [xs] \n  (let [helper (fn helper [ys n]\n                (if (= ys nil) nil\n               \t\t(cons [(first ys), n] (helper (next ys) (inc n)))))]\n  \t(helper (seq xs) 0)))","problem":157,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn foo\n  ([seq] (foo seq 0 []))\n  ([seq idx result]\n    (if (empty? seq)\n      result\n      (foo (rest seq) (+ idx 1)\n        (conj result [(first seq) idx])))))","problem":157,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":157,"code":"#(map (fn [k v] (list k v)) %1 (range (count %1)))","user":"5c20b6abe4b07e362c230576"},{"problem":157,"code":"(fn [l]\n  (loop [l l i 0 r []]\n    (if (empty? l) r\n      (recur (rest l) (inc i) (conj r [(first l) i])))))","user":"57d9f603e4b0bd073c20240a"},{"problem":157,"code":"; Yeah, I have the most complex answer!\n; Oh well, I needed more practice with loop.\n; Gotta learn from others. \n; echevarria's solution: map-indexed #(vector %2 %1)\n; chouser's solution: #(map list % (range))\n\n\n(fn [coll]\n   (loop [input coll\n          idx 0\n          result []]\n\n     (if (not-empty input)\n        (recur (rest input) (inc idx) (conj result [(first input) idx]) )\n        result)))","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [listItems] (map-indexed #(list %2 %) listItems))","problem":157,"user":"533aac38e4b0e30313ee6cbe"},{"code":"(fn index-seq\n\t([in] (index-seq in []))\n\t([in out]\n     (if (empty? in)\n       out\n       (index-seq (rest in) (conj out [(first in) (count out)]))\n     )))","problem":157,"user":"517531c6e4b07031762f2eea"},{"problem":157,"code":"(fn [s] (loop [s s n 0 o []]\n          (if (empty? s)\n            o\n            (recur (rest s) (inc n) (conj o [(first s) n])))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"map #(list %2 %) (range)","problem":157,"user":"4f1d1d95535d64f603146488"},{"code":"(fn ind[s] \n  (map-indexed (fn [idx itm] [itm idx]) s)\n)","problem":157,"user":"513f53c6e4b051389b345b40"},{"code":"(fn [seq]\n  (letfn [(index [counter seq]\n    (if (empty? seq) '() \n      (cons [(first seq) counter] (index (+ counter 1) (rest seq))))\n  )] (index 0 seq))\n)","problem":157,"user":"4ff83003e4b0678c553fc396"},{"problem":157,"code":"(fn indexing-sequence [xs]\n  (map vector xs (range)))","user":"5984e7dee4b021a7a535fe43"},{"problem":157,"code":"(fn\n  [coll]\n  (keep-indexed #(into [] [%2 %1]) coll))","user":"55842bd7e4b05c286339e11c"},{"problem":157,"code":"(fn\n  [s]\n  (let [\n        raw (loop [seq s result () index 0]\n              (if (nil? (first seq))\n                result\n                (recur \n                  (rest seq)\n                  (conj result (list (first seq) index))\n                  (inc index))))\n        rev (reverse raw)]\n    rev))","user":"5843b231e4b089d5ab817e3d"},{"problem":157,"code":"(fn [seq]\r\n  (let [zip (fn [seq1 seq2] (map list seq1 seq2))]\r\n    (zip seq (range))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn [s] (reverse (into [] (zipmap s (range (count s))))))","problem":157,"user":"51d96ad0e4b02ceefd94774f"},{"problem":157,"code":"(fn problem-157 [s]\n  (-> s\n      (zipmap (range))\n      vec\n      reverse))","user":"51fe9d7ce4b0f1313d468a70"},{"problem":157,"code":"(fn [x] (map #(list %1 %2) x (range (count x))))","user":"54b54d1be4b05787c3b1639c"},{"code":"#(map vector % (iterate inc 0))","problem":157,"user":"4e14108c535d04ed9115e7dd"},{"problem":157,"code":"#((fn ind [l n r] (if (empty? l) r (ind (rest l) (inc n) (conj r [(first l) n])))) % 0 [])","user":"550e0373e4b06e50f9beb162"},{"code":"map-indexed (fn [idx itm] (list itm idx))","problem":157,"user":"5125745ae4b05d10e3e395f9"},{"code":"(partial map-indexed (comp rseq vector))","problem":157,"user":"4ee88bfb535d93acb0a66881"},{"problem":157,"code":"(fn [lst]  (->> (zipmap lst (range (count lst))  ) vec reverse ))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn [coll] (reverse (vec (zipmap coll (range)))))","problem":157,"user":"4fa39b3ee4b081705acca191"},{"code":"(fn [c]\n   (map vec \n     (partition 2 \n       (interleave c (iterate inc 0)))))","problem":157,"user":"4dbd2aa3535d020aff1edf40"},{"problem":157,"code":"(fn [xs]\n  (loop [i 0\n         r []\n         xs xs]\n    (if (seq xs)\n      (recur (inc i) (conj r [(first xs) i]) (rest xs))\n      r)))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"map #(-> [%2 %]) (range)","problem":157,"user":"4ee82539535d93acb0a66878"},{"problem":157,"code":"#(map (fn [x] (vector x (.indexOf % x))) %)","user":"4e526cc4535d302ef430da74"},{"problem":157,"code":"(fn [x] (map #(conj [] %2 %1) (take (count x) (iterate #(inc %) 0)) x))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":157,"code":"(fn xxy [coll] \n  (partition 2 (interleave coll (range))))","user":"5ac04101e4b073f177442737"},{"problem":157,"code":"#(map vector %1 (range (count %1)))","user":"5ccb3792e4b0ccb061962882"},{"code":"map (comp reverse list) (range)","problem":157,"user":"5003ee7de4b0678c553fc446"},{"problem":157,"code":"(fn [coll]\n   (keep-indexed #(vector %2 %1) coll))","user":"56fbf83de4b07572ad1a88da"},{"code":"map #(vector %2 %1) (range)","problem":157,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"map-indexed (fn [idx itm] [itm idx])","problem":157,"user":"500e91aae4b00fff93030f99"},{"problem":157,"code":"(fn withIndex\n  [lst]\n  (map-indexed #(list %2 %1) lst))","user":"57fc34f0e4b0d3187e90098e"},{"problem":157,"code":"(fn [seq]\n  (keep-indexed\n    (fn [index item]\n      (lazy-seq (vector item index))) seq))","user":"5f081f6de4b0cf489e8d7f5a"},{"code":"(fn [xs]\n  (let [num (count xs)]\n    (for [i (range num)] [(xs i) i])))","problem":157,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(comp (partial map reverse) (partial map-indexed vector))","problem":157,"user":"4ee26f01535d10e5ff6f5368"},{"code":"#(map-indexed (fn [a b] [b a]) %)","problem":157,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn\n  [lst]\n  (partition 2 (interleave lst (range (count lst)))))","problem":157,"user":"4ef7a483535dced4c769f258"},{"problem":157,"code":"#(loop [remaining % n 0 acc []]\n   (if (empty? remaining)\n     acc\n     (recur (rest remaining) (inc n) (conj acc [(first remaining) n]))))","user":"55e2f502e4b050e68259b43c"},{"problem":157,"code":"(fn [lst]\n  (map vector \n       lst (range)))","user":"5a99c5a9e4b0d174b936c7b1"},{"problem":157,"code":"(fn [v]\n  (let [k (range (count v))]\n    (map #(list %1 %2) v k)))","user":"51456858e4b0e88796073408"},{"code":"#(vec (map-indexed (fn [idx itm] [itm idx]) %))","problem":157,"user":"534c1c64e4b084c2834f4a8a"},{"problem":157,"code":"#(partition 2\n           (interleave % (range)))","user":"5e491182e4b043cd24807a46"},{"problem":157,"code":"#(map-indexed (fn [itm idx]\n                [idx itm])%)","user":"59251947e4b072a2710fce69"},{"problem":157,"code":"#(loop [x % n 0 r []] (if (empty? x) r (recur (rest x) (inc n) (conj r [(first x) n]))))","user":"5f3567d6e4b0574c87022c44"},{"problem":157,"code":"#(loop [x % c '()] (if (empty? x) c (recur (butlast x) (conj c [(last x) (dec (count x))]))))","user":"5c41db45e4b08cd430848ece"},{"problem":157,"code":"(fn [lst] (loop [v []\n                 i (vec(range (count lst)))\n                 lst (vec lst)]\n               (println v)\n            (if (empty? lst)\n              (vec v)\n              (recur (vec (concat v (vec [[(first lst) (first i)]]))) (rest i) (rest lst)))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":157,"code":"(fn [s] (for [i (range (count s))] [(nth s i) i]))","user":"5a37fab1e4b001c08efc0c93"},{"problem":157,"code":"(fn index\n  ([s cur-i] (if (empty? s)\n               '()\n               (cons (list (first s) cur-i) (index (rest s) (inc cur-i)))))\n  ([s] (index s 0)))","user":"5ee93720e4b029a2061bbeb7"},{"problem":157,"code":"(fn [items]\n    (loop [index 0\n           items items\n           results []]\n      (if (empty? items)\n        results\n        (recur (inc index) (rest items) (conj results [(first items) index])))))","user":"511720eae4b0063b4e3e16da"},{"problem":157,"code":"map-indexed (fn [it ix] [ix it])","user":"5578f292e4b05c286339e08f"},{"code":"#(map vector % (range 5))","problem":157,"user":"511ac2ede4b0c87c59c9670f"},{"code":"(fn [s] (partition 2 (interleave s (range))))","problem":157,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":157,"code":"(fn [s] (loop [s s out [] n 0] (if (empty? s) out (recur (rest s) (conj out [(first s) n]) (inc n)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":157,"code":"(fn [coll]\n  (vec (map #(vector % %2) coll (range (count coll)))))","user":"53dfbc75e4b0d874e779ae44"},{"code":"(fn zipWithIndex [s]\n\t(partition 2 (interleave s (range (count s))))\n\t)","problem":157,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"#(let [i (atom -1)] (for [x %1] (vector x (swap! i inc))))","problem":157,"user":"5176afd2e4b085adf681d889"},{"problem":157,"code":"(fn [s] (map-indexed #((constantly [%2 %])) s))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [sequ] (map vector sequ (range)))","problem":157,"user":"50b525c5e4b0c464d223d1c3"},{"problem":157,"code":"#(reverse (zipmap % (iterate inc 0)))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn [xs]\n  (map (fn [x y] [x y]) xs (iterate inc 0)))","problem":157,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn indeksing [v]\n(loop [xs [] s v index 0]\n    (if (seq s)\n      (recur (conj xs (vec (list (first s) index))) (rest s) (inc index))\n      xs)))","problem":157,"user":"507bb3ece4b09034bfeeb720"},{"code":"map (fn[a b][b a]) (range)","problem":157,"user":"4f296a80e4b0d6649770a02a"},{"problem":157,"code":"(fn [x]\n  (partition 2 (interleave x (range (count x)))))","user":"4ed152d5535d44c135fd68cc"},{"problem":157,"code":"#(map-indexed (fn [itm idx] \n                [idx itm]) %)","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":157,"code":"(fn index [coll] (map #(vector % (.indexOf coll %)) coll))","user":"58182480e4b0c0e9c07b83a7"},{"code":"(fn [r]\n (map list (seq r) (range (count r)))\n)","problem":157,"user":"5029f263e4b023940c84aa45"},{"problem":157,"code":"(fn is [xs]\n  (mapv vector xs (range)))","user":"56069006e4b08b23635d3174"},{"problem":157,"code":"(fn [col] (map #(vector %1 %2) col (iterate inc 0)))","user":"5745bb9fe4b009280f9f2b54"},{"problem":157,"code":"(partial map-indexed (fn [x n] [n x]))","user":"5250b7a5e4b0541d1855b83e"},{"code":"(fn [s]\n  (map-indexed (comp reverse vector) s))","problem":157,"user":"502873a8e4b01614d1633ff8"},{"problem":157,"code":"(fn [coll]\n\t(loop [coll coll ind 0 res []]\n      (if (empty? coll)\n        res\n        (recur (rest coll) (inc ind) (conj res [(first coll) ind]))\n      )\n  )  \n)","user":"5e09fd26e4b099d064962f60"},{"code":"#(partition 2(interleave % (range)))","problem":157,"user":"52be0263e4b07a9af579230e"},{"problem":157,"code":"(fn [s1]\n   (loop [s s1, n 0, rslt []]\n     (if (empty? s) rslt \n         (recur (rest s) (inc n) (concat rslt [[(first s) n]]))))\n)","user":"572ac718e4b0f4d77e651242"},{"code":"#(map list %1 (iterate inc 0))","problem":157,"user":"4e6ebd4a535d5021c1a89610"},{"problem":157,"code":"(fn [coll]\n  (map #(list %1 %2) coll (iterate inc 0)))","user":"553527ede4b09218d5f44fab"},{"code":"(fn iq [coll]\n  (partition 2 (interleave coll (range))))","problem":157,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [input]\n  (partition 2 2 (interleave input (range 10))))","problem":157,"user":"528bba38e4b0239c8a67aea9"},{"code":"#(for [pos (range (count %))] (list (nth % pos) pos))","problem":157,"user":"51d360d1e4b099f3b6acddff"},{"problem":157,"code":"(fn [s] (map-indexed #(vector %2 %1) s) )","user":"5bbbd484e4b0a20761a23617"},{"code":"#(map-indexed (fn f [i n] (list n i)) %)","problem":157,"user":"51f28a64e4b0210f90e7454e"},{"problem":157,"code":"(fn [xs](map #(vector % (.indexOf xs %)) xs))","user":"57752a2de4b0979f89651613"},{"code":"map-indexed (fn [a b] [b a])","problem":157,"user":"4e823ed7535db62dc21a62c7"},{"problem":157,"code":"(fn build-seq\n  ([input-seq]\n    (build-seq input-seq 0 []))\n  ([input-seq index new-seq]\n   (if (empty? input-seq)\n        new-seq\n        (build-seq (rest input-seq) (+ index 1) (conj new-seq (vector (first input-seq) index))))))","user":"53b05a36e4b047364c044481"},{"problem":157,"code":"(fn [lst]\n  (map vector lst (iterate inc 0)))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"(fn index [x & n]\n       (let [p (if (nil? n) 0 (first n))]\n   (if (empty? x) []\n\t       (cons (vec (list (first x) p)) (index (rest x) (inc p))))))","problem":157,"user":"4e49a7bb535dc968683fc4c6"},{"problem":157,"code":"map (fn[a b] [b a]) (range)","user":"59a0286be4b0871e7608b82f"},{"problem":157,"code":"(fn [a] (map vector a (range 5)))","user":"5183f5d7e4b02826a645f393"},{"problem":157,"code":"(fn algo \n  [lst]\n  (map-indexed (fn \n                 [idx itm]\n                 (list itm idx)\n                 ) lst)\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":157,"code":"(fn [c] (reduce #(conj % [%2 (count %)]) [] c))","user":"5c24671be4b07e362c2305a1"},{"code":"(fn [x] (map-indexed (fn [index it] [it index])x))","problem":157,"user":"4e78c2ba535db95036265723"},{"code":"(fn [lst]\r\n  (partition 2 (interleave lst (range))))","problem":157,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn [xs]\n    (map-indexed (fn [index value] [value index]) xs))","problem":157,"user":"506b0a9ce4b0a2a5463de380"},{"problem":157,"code":"(fn \n  [s] \n  (map #(vector %1 %2) s (range (count s))))","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":157,"code":";#(reverse (zipmap %1 (range (count %1))))\n\n;#(reverse (zipmap %2 %1)) [0 1 2]\n\n;#(map list % (range))\n\n#(reverse (zipmap %1 (range)))","user":"56629a7de4b0e91d5f5c5649"},{"code":"(fn [s] (map (fn [a b] [a b]) s (range)))","problem":157,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":157,"code":"(fn is[v]\n  (map #(vector %1 %2) v (range)))","user":"5980f91ae4b021a7a535fddd"},{"problem":157,"code":"#(map (fn [x y] [y x]) (range) %)","user":"55fbc657e4b0f488688e0666"},{"problem":157,"code":"(fn [v] \n     (loop [acc [] ndx 0 [a & remaining] v]\n       (if (nil? a)\n         acc\n         (recur (into acc [[a ndx]]) (inc ndx) remaining))\n       ))","user":"58d6caf5e4b03c36ff7e5975"},{"problem":157,"code":"(fn [l]\n            (loop [i 0 result []]\n              (if (< i (count l))\n                (recur (inc i) (conj result [(nth l i) i] ))\n                result))\n            )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":157,"code":"(fn [s]\n  (loop [tmps s n 0 new []]\n    (if (empty? tmps)\n      new\n      (recur (rest tmps) (inc n) (conj new (list (first tmps) n))))))","user":"59368ccae4b02506e01a2979"},{"code":"(fn [x]\n  ((fn idx [x i]\n     (if (empty? x)\n       x\n       (cons [(first x) i] (idx (rest x) (inc i)))\n       )\n     )\n   x\n   0\n   )\n  )","problem":157,"user":"52586d24e4b0cb4875a45cb0"},{"problem":157,"code":"(fn [elems] (mapv (fn [a b] (vector a b)) elems (range (count elems))))","user":"58950f29e4b00487982d5270"},{"code":"(fn [xs] (for [i (range (count xs))][(nth xs i) i]))","problem":157,"user":"511a0374e4b06c8af011181a"},{"problem":157,"code":"(fn [v] (into [] (map vector (lazy-seq v) (range))))","user":"59874ff6e4b021a7a535fea1"},{"code":"(fn[s]\n  (map #(vec [% %2]) s (iterate inc 0)))","problem":157,"user":"4deff9f9535d08e6dec9fe15"},{"problem":157,"code":"(fn [s]\n  (loop [remaining s pos 0 ans []]\n    (if (empty? remaining)\n      ans\n      (recur (rest remaining) (inc pos) (conj ans [(first remaining) pos])))))","user":"5746061ae4b009280f9f2b5b"},{"problem":157,"code":"; simpler\n#(map vector % (range))\n\n; first try\n#_#(map-indexed (fn [x y] [y x]) %)","user":"55e7d06ee4b050e68259b496"},{"code":"#(loop [res [] todo % idx 0]\n   (if (empty? todo)\n     res\n     (recur\n      (conj res [(first todo) idx])\n      (rest todo)\n      (inc idx))))","problem":157,"user":"5165a235e4b079ad97ec44ac"},{"code":"#(loop [x % y [] z 0] (if (empty? x) y (recur (rest x) (conj y [(first x) z]) (inc z))))","problem":157,"user":"50921f9ae4b09a7d0b586de1"},{"problem":157,"code":"(fn [s] (map-indexed #(identity (reverse %&)) s))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [x] (map-indexed #(list %2 %1) x))","problem":157,"user":"50112acee4b0d82cfac69f4c"},{"problem":157,"code":"(fn index-marker [lst ]\n  (map-indexed (fn [index element] [element index]) lst))","user":"5f84f110e4b0375e81f54e79"},{"problem":157,"code":"(fn [v]\n  (map vector v (range (count v))))","user":"4f1e4ab5535d64f603146496"},{"code":"(fn [sequence]\n  (reverse (seq (zipmap sequence (iterate inc 0))))\n)","problem":157,"user":"4f037d9e535dcb61093f6af2"},{"problem":157,"code":"(fn [seq] (map (fn [e index] [e index])\n               seq (iterate inc 0)\n               ))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":157,"code":"; #(keep-indexed (fn [x y] [y x]) %) ; works\n; keep-indexed #(identity [%2 %1]) works\n#(map list % (range))","user":"5a544eeee4b05d388ecb6c24"},{"problem":157,"code":"(fn zip-with-idx [coll] (map list coll (range)))","user":"55f06183e4b06e875b46ce23"},{"problem":157,"code":"(fn indexer\n  [coll]\n  (partition 2 (interleave coll (range 0 (count coll)))))","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":157,"code":"(fn [arr] \n  (map (fn [a b] [a b]) arr (range (count arr))))","user":"59636b49e4b066ee0a44b0c5"},{"problem":157,"code":"(fn [coll] (mapv vector coll (range)))","user":"56481722e4b0284900eef628"},{"code":"(fn [coll]\n  (map (fn [a b] [a b]) coll (iterate inc 0)))","problem":157,"user":"4f3cd535e4b0e243712b1f56"},{"problem":157,"code":"(fn [l]\n  (loop [li  l\n         acc []\n         idx 0]\n    (if (empty? li)\n      acc\n      (recur (rest li) (conj acc [(first li) idx]) (inc idx)))))","user":"5da975b9e4b000c986472c32"},{"code":"map-indexed (fn [idx item] [item idx])","problem":157,"user":"52baea85e4b07a9af57922d9"},{"code":"#(map-indexed (fn [k v] [v k]) %)","problem":157,"user":"500ec210e4b00fff93030f9d"},{"problem":157,"code":"(fn [seq]\n    (map reverse (map-indexed vector seq)))","user":"53a68c5ae4b0ef122a8689c8"},{"problem":157,"code":"(fn [s]\n        (map (fn [a b] [a b]) s (range)))","user":"546c4377e4b00cfc9eacc177"},{"problem":157,"code":"(fn [xs] (reduce #(conj % [%2 (count %)]) [] xs))\n\n;(fn [xs] \n;    (loop [in xs\n;           acc []\n;           idx 0]\n;      (if (empty? in)\n;        acc\n;        (recur (rest in) (conj acc [(first in) idx]) (inc idx))\n;        )\n;  ))","user":"55150524e4b055c2f668d4d9"},{"problem":157,"code":"(fn indexSeq\n  [lst]\n  (map vector lst (range)))","user":"59dd3930e4b0a0ac046f2504"},{"code":"#(reverse(zipmap % (range)))","problem":157,"user":"5138d08be4b0a5db03d727db"},{"problem":157,"code":"(fn indexed-pairs\n  ([xs] (indexed-pairs xs 0))\n  ([[x & xs] idx]\n    (let [pair [x idx]]\n      (lazy-seq\n        (if (empty? xs)\n          (list pair)\n          (cons pair (indexed-pairs xs (inc idx)))\n        )\n      )\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [sq](for[x (map-indexed vector sq)] (reverse x)))","problem":157,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [s] (map-indexed #(vector %2 %) s))","problem":157,"user":"502904e0e4b0feaf66e22fad"},{"problem":157,"code":"map-indexed (fn [ind item] [item ind])","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":157,"code":"(fn [v]\n  (map #(vector %1 %2) v (range )))","user":"52ba2639e4b07a9af57922cb"},{"code":"#(map (fn [x] (conj [] x (.indexOf %1 x))) %1)","problem":157,"user":"52b71bd2e4b0c58976d9ad4d"},{"code":"#(map-indexed (fn [ & args] (reverse args)) %)","problem":157,"user":"5097b556e4b00ad8bab4e970"},{"problem":157,"code":"(fn [coll]\n  (loop [ret [] i 0 coll coll]\n    (if (empty? coll)\n      ret\n      (recur (conj ret [(first coll) i]) (inc i) (rest coll)))))","user":"54d000c7e4b018d918be98d7"},{"problem":157,"code":"#(map (fn [a b] [a b]) % (take (count %) (range)))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":157,"code":"(fn [x]\n  (loop [a 0 b []]\n    (if (= a (count x))\n      b\n      (recur (inc a) (conj b [(nth x a) a])))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"problem":157,"code":"(fn index-seq\n  [s]\n  (vec\n   (map-indexed #(vector %2 %1) s)))","user":"4eb47bb1535d7eef30807362"},{"problem":157,"code":"(fn foo [xs]\n  (let [ys (range 0 (count xs))\n        zs (partition 2 (interleave xs ys))]\n    (for [z zs] (vec z))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn idx [coll] (map-indexed #(vector %2 %) coll))","problem":157,"user":"539a2901e4b0b51d73faaf0f"},{"problem":157,"code":"(fn\n  [s]\n  (->> (interleave s (range))\n       (partition 2)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":157,"code":"#(map (fn [x i] [x i]) % (range 6))","user":"5e85163be4b09a7a73c8bbd0"},{"code":"#(map-indexed (fn [idx idm] [idm idx]) %)","problem":157,"user":"5036eba7e4b0af0658af77a5"},{"problem":157,"code":"(fn idx-map\n  ([coll] (idx-map 0 coll))\n  ([idx coll]\n    (if (first coll)\n      (cons [(first coll) idx] (idx-map (inc idx) (rest coll)))\n      )))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [index element] [element index]) s))","user":"57f81524e4b0d3187e900913"},{"problem":157,"code":"(fn [v]\n\n(map-indexed #(vector %2 %1) v)\n\n)","user":"591e0782e4b09b4ee5954c25"},{"problem":157,"code":"(fn [a] (map-indexed #(list %2 %1) a))","user":"55b0f5bfe4b002ce9d5cbc28"},{"problem":157,"code":"#(map-indexed (fn [ind el] [el ind]) %)","user":"58303fc3e4b051871117c006"},{"code":"(fn indexSeq [aSeq]\n  ((fn iter [index remained result]\n     (if (empty? remained)\n       result\n       (recur (inc index) (rest remained) (conj result [(first remained) index])))) 0 aSeq [])\n  )","problem":157,"user":"5379ed48e4b06839e8705e5a"},{"problem":157,"code":"(fn indx ([c] (indx c 0 '()))  ([c i r] (if (first c) (conj (indx (rest c) (inc i) r) (vector (first c) i)) r)))","user":"5635adeee4b0bfe05bf117c7"},{"problem":157,"code":"(fn[s](map-indexed (fn[idx itm][itm idx]) s))","user":"56039843e4b04bb52996e1be"},{"problem":157,"code":"#(map (fn [a b] [b a]) (iterate inc 0) %)","user":"50d0d2dde4b00b15ecee9768"},{"problem":157,"code":"(fn [lst] \n  (let [indexlst (take (count lst) (iterate inc 0))]\n    (map #(conj [] %1 %2) lst indexlst)))","user":"55c77070e4b0e31453f649d0"},{"problem":157,"code":"(fn [c]\r\n  (map-indexed #(identity [%2 %]) c))","user":"56441634e4b0018b46ad8c08"},{"problem":157,"code":"(fn [xs] (map-indexed (fn [n x] [x n]) xs))","user":"5353afa0e4b084c2834f4b03"},{"code":"#(loop [lst % acc [] n 0]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (conj acc [(first lst) n]) (inc n))))","problem":157,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn\n    [xs]\n    (map #(vector % (.indexOf xs %)) xs))","problem":157,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn [v] (map-indexed #(reverse (vector %1 %2)) v))","problem":157,"user":"4e7d1c22535db169f9c796c5"},{"problem":157,"code":"(fn my-fun [coll-in] (map-indexed #(vector %2 %1) coll-in))","user":"571d9669e4b0145328a7627f"},{"problem":157,"code":"(fn [v]\n  (map list v (range)))","user":"4dd1de4d535dae65d5c462d7"},{"problem":157,"code":"(fn [collection] \n  (into [] (map (fn [col] [col (.indexOf collection col)]) collection))\n  )","user":"59537716e4b066ee0a44aee5"},{"problem":157,"code":"(fn [xs]\n    (map #(vector %1 %2) xs (range))\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":157,"code":"(fn index [coll]\n  (loop [x coll n 0 new []]\n    (if (empty? x)\n      new\n      (recur (rest x) (inc n) (conj new (vector (first x) n))))))","user":"5a9482b7e4b0d174b936c737"},{"problem":157,"code":"(fn [xs] (map #(vector %1 %2) xs (iterate inc 0)))","user":"58800fd4e4b0f1effa3b7606"},{"code":"(fn [coll] (map-indexed (fn [a b] [b a]) coll))   ; This is what you should do in real code","problem":157,"user":"5119f3d5e4b06c8af0111818"},{"code":"(fn [xs]\n  (map-indexed (fn [idx itm] [itm idx]) xs))","problem":157,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":157,"code":"mapcat #(vector [%2 %1]) (range)","user":"55b107fee4b002ce9d5cbc2a"},{"problem":157,"code":"(fn [n] (vec (map-indexed (fn [x i] [i x]) n)))","user":"558053b1e4b05c286339e0e9"},{"problem":157,"code":"(fn [s]\n     (loop [sx s i 0 acc []]\n           (if (empty? sx) acc\n               (recur (rest sx) (inc i) (conj acc [(first sx) i])))))","user":"56483f45e4b0284900eef62b"},{"problem":157,"code":"(fn [x]\n  (loop [i 0\n         lst []]\n    (if (< i (count x))\n      (recur \n       (inc i)\n       (conj lst [(nth x i) i]))\n      lst\n      \n      \n      )\n    \n    )\n  )","user":"591ac8ece4b09b4ee5954bdd"},{"problem":157,"code":"#(reverse (into [](zipmap % (range (count %)))))","user":"538d70abe4b0b51d73faae6e"},{"problem":157,"code":"(fn [ l ]\n\t(let [\n\t\titems (apply map vector [ l (range (count l))])\n\t\t]\n\t\titems))","user":"598af379e4b02b9968b84ce6"},{"problem":157,"code":"(fn [s]\n       (map (fn [value index] [value index]) s (range)))","user":"56791447e4b05957ce8c6183"},{"code":"(fn [v] (map #(vector % (.indexOf v %)) v))","problem":157,"user":"5220909fe4b0e6a83c89259f"},{"code":"#(partition 2 (interleave %1 (take (count %1) (iterate inc 0))))","problem":157,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":157,"code":"#(loop [sq %1 ind 0 indexed []]\n   (if (empty? sq)\n     indexed\n     (recur (rest sq) (inc ind) (conj indexed [(first sq) ind]))\n  )\n   \n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":157,"code":"(fn [coll] \n  (take (count coll) \n        (map #(-> [%1 %2]) coll (range) )))\n\n\n;(fn [coll] \n;  (take (count coll) \n;        (partition 2 (interleave coll (range)))))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn [coll1]\n  (map (fn [x y] \n         [x y]) coll1 (range)))","problem":157,"user":"52fcfeeee4b047fd55837027"},{"code":"#(map-indexed (fn [idx itm] [itm idx]) %1)","problem":157,"user":"5027fc0ce4b01614d1633ff2"},{"code":"(fn create [coll2] (reverse ((fn createindexlist [coll y] (if (< 0 (count coll)) \n                                 (conj (createindexlist (rest coll) (+ y 1)) ((fn createindex [x index] (conj [] x index)) (first coll) y))\n                                 [])) coll2 0)))","problem":157,"user":"5296aa9be4b02ebb4ef75034"},{"code":"#(map-indexed (fn [idx item] [item idx]) %)","problem":157,"user":"530578ede4b0d8b024fd3760"},{"problem":157,"code":"(fn [l]\n  (map vector l (range (count l))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":157,"code":"(fn [s]\n  (letfn [(! [n & r]\n             (if (nil? r) '()\n               (conj (apply ! (inc n) (rest r)) [(first r) n])\n                     ))]\n    (apply ! 0 s)))","user":"54c271b9e4b045293a27f602"},{"problem":157,"code":"#(take (count %) (partition 2 (interleave % (range))))","user":"5c30da5ae4b0d62ef62d9f23"},{"code":"(fn [xs] (map-indexed #(vector %2 %) xs))","problem":157,"user":"5065faf9e4b0313a384e5645"},{"problem":157,"code":"(fn [collection] \n  (loop [result [], data collection, cnt 0 ]\n    (if (empty? data)\n    result\n    (recur (conj result (vector (first data) cnt) ) (rest data) (+ 1 cnt))\n    \n  ))\n)","user":"59228b00e4b026ae38521281"},{"problem":157,"code":"(fn [seq] (map-indexed #(vector %2 %1) seq))","user":"554bc64ae4b0a04f79299598"},{"problem":157,"code":"(fn [lst]\n  (vec (map-indexed #(vector %2 %1) lst)))","user":"5895477fe4b00487982d527c"},{"problem":157,"code":"#(mapv vector %1 (range))","user":"5251d3c1e4b0541d1855b87f"},{"code":"(fn my-index [s]\n  (for [i (range (count s))]\n    (vector (nth s i) i)\n  )\n)","problem":157,"user":"4faacc04e4b081705acca201"},{"code":"(fn [x] (partition 2 (interleave x (iterate #(inc %) 0))))","problem":157,"user":"53906b89e4b0b51d73faae99"},{"code":"(fn [x] (map #(vec [%1 %2]) x (range)))","problem":157,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn [coll]\n  (map (fn [item index] (into (empty coll) (list item index))) coll (range)))","problem":157,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":157,"code":"reduce #(conj %1 (vector %2 (count %1))) []","user":"546692aee4b01be26fd746e7"},{"code":"(fn [s]\n   (map (fn [x y] [x y]) s (iterate inc 0)))","problem":157,"user":"51696ee7e4b03f62cda68ce8"},{"problem":157,"code":"#(loop [s % i 0 res []]\n   (if (empty? s)\n     res\n     (recur (rest s) (inc i) (conj res [(first s) i]))))","user":"5964c614e4b069c0a1a19770"},{"code":"(partial map #(vector %2 %) (range))","problem":157,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [seq]\n  (map-indexed #(vector %2 %1) seq))","problem":157,"user":"51df825de4b01188f062752b"},{"problem":157,"code":"(fn [a] (apply vector (map #(conj (vector %1) %2) a [0 1 2])))","user":"52c08c59e4b07a9af5792351"},{"problem":157,"code":"(fn[a] (map #(vector %1 %2) a (range (count a))))","user":"5826a843e4b051871117befd"},{"code":"(fn [v]\n  (map #(vector % (.indexOf v %)) v))","problem":157,"user":"4dad76588e77d6ed63f12a44"},{"problem":157,"code":"(fn [a]\n  (for [i (range (count a))] (list (nth a i) i)))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":157,"code":"(fn [arr]\n  (map-indexed (fn [idx itm]\n                 [itm idx]) arr))","user":"5ad99ddee4b0ea6055cfac3a"},{"code":"(fn [s]\n  (for [i (range (count s))]\n    (into [(s i)] [i])))","problem":157,"user":"4e7d4544535db169f9c796d0"},{"problem":157,"code":"map-indexed (fn [a b][b a])","user":"544cf5d7e4b0e39780006977"},{"problem":157,"code":"(fn withind [xs]\n  (map #(list (get xs %) %) (range (count xs))))","user":"53e8c684e4b036ad0777e48b"},{"problem":157,"code":"(fn [xs]\n(map #(vector %1 %2) xs (range)))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn[c](map #(list % %2) c (range 9)))","problem":157,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":157,"code":"(fn [alist]\n  (for [x (range (count alist))\n        :let [y (nth alist x)]]\n    [y x]))","user":"5705e404e4b0b0fb43fd0676"},{"problem":157,"code":"(fn [coll] (map-indexed #(reverse (apply vector %&)) coll))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"reduce-kv #(conj %1 [%3 %2]) []","problem":157,"user":"4f77b68de4b0fbe0118ec581"},{"code":"map-indexed #(identity [%2 %])","problem":157,"user":"4fabbb97e4b081705acca21d"},{"problem":157,"code":"(fn [s]\n  (for [i (range (count s))] (vector (s i) i)))","user":"563d12f9e4b0bfe05bf11845"},{"problem":157,"code":"#(map vector % (keep-indexed (fn[x _]x) %))","user":"58d1c1b1e4b03c36ff7e58ef"},{"code":"(fn [coll] (map-indexed #(vector %2 %1) coll))","problem":157,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"(fn [xs] (map vector xs (range 0 (count xs))))","problem":157,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [coll]\n\t  (partition-all 2 (interleave coll (range (count coll)))))","problem":157,"user":"5016ac54e4b052339a490e7b"},{"problem":157,"code":"(fn [x] (map-indexed (fn [idx v] [v idx]) x))","user":"5e0ceca5e4b099d064962f91"},{"problem":157,"code":"(fn [s]\n  (map (fn [v]\n         [v (.indexOf s v)])\n       s))","user":"583e02fce4b089d5ab817da5"},{"problem":157,"code":"(fn [coll]\n   (map #(vector %2 %1) (range (count coll)) coll))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn [x]\n  (loop [lst x idx 0 ret []]\n    (if (empty? lst) ret\n(recur (rest lst) (inc idx)\n(conj ret (list (first lst) idx))))))","problem":157,"user":"4fdf5403e4b05e33b9224f98"},{"problem":157,"code":"(fn indexing [seq]\n  (partition 2\n    (interleave seq (range))))","user":"5f4eb036e4b0102c75033969"},{"problem":157,"code":"; 157 - Indexing Sequences\n(fn index [s]\n  (map #(vector %1 %2) s (range)))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":157,"code":"(fn indexing [coll] (map-indexed (fn [i item] [item i]) coll))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":157,"code":"(fn pairs-index\n  [a]\n  (partition 2 (interleave a (range (count a))))\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn [input] (map-indexed #(vector %2 %) input))","problem":157,"user":"4e6f8431535d5021c1a8961e"},{"code":"(fn [coll]\n  (map-indexed #(vector %2 %1)  coll))","problem":157,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn [c]  (map vector c (range 0 (count c))))","problem":157,"user":"4ec4d723535dcc7ae8597d65"},{"problem":157,"code":"(partial map-indexed (fn [index x] [x index]))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":157,"code":"(fn [seq] ( map vector seq (range)))","user":"5e8308abe4b09a7a73c8bbb4"},{"problem":157,"code":"(fn indexed-seq\n  [my-seq]\n  (->> (interleave my-seq (range (count my-seq)))\n       (partition 2)))","user":"5b759ca8e4b047b03b2036d0"},{"problem":157,"code":"(fn [c] (into [] (map #(conj [%1] %2) c (range))))","user":"5f86a98be4b0649ffcda4caa"},{"code":"(fn [x]\r\n  (map-indexed #(list %2 %1) x))","problem":157,"user":"4f82ed48e4b033992c121c0e"},{"problem":157,"code":"(fn [n] (map vector n (take (count n) (range))))","user":"55e5c852e4b050e68259b474"},{"problem":157,"code":"(fn [s] (loop [s s res [] cnt 0]\n          (if (empty? s)\n          \tres\n            (recur (rest s) (conj res [(first s) cnt]) (inc cnt))\n          )))","user":"5b7ec039e4b047b03b20375d"},{"problem":157,"code":"(fn [sq]\n  (into (empty sq) (map-indexed (fn [i item] [item i]) sq)))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":157,"code":"(fn [as]\n            (loop [ass as, acc [], i 0]\n              (if-not (seq ass)\n                acc\n                (recur (rest ass) (conj acc [(first ass) i]) (inc i))\n                )\n              )\n            )","user":"52149e21e4b0961f15ac4d94"},{"code":"(fn I [s]\n  (loop [s s n 0 r []]\n    (if (empty? s) r\n        (recur (rest s) (inc n) (conj r [(first s) n])))))","problem":157,"user":"51a4416ae4b0def3c5c5868c"},{"problem":157,"code":"#(map-indexed (fn [i item] [item i]) %)","user":"53a074a4e4b0ca733b9744af"},{"code":"(fn [l]\n  (map\n   #(vector %1 %2)\n   l\n   (range (count l))))","problem":157,"user":"4f031883535dcb61093f6a5e"},{"problem":157,"code":"(fn [v]\n  (let [index (map #(.indexOf v %) v)\n        res (mapcat vector v index)]\n    (partition-all 2 res)))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn indexed [coll]\r\n    (map vector coll (iterate inc 0) ))","problem":157,"user":"4fd170fce4b04c3a95aa0411"},{"problem":157,"code":"(fn idx [ s ]\n  (map vector s (range)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"#(partition 2 (interleave % (range (count %))) )","problem":157,"user":"50be9b4ae4b00fb48fed2ef6"},{"code":"map-indexed (fn [i x] [x i])","problem":157,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [col]\n  (map-indexed #(vec [%2 %]) col))","problem":157,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":157,"code":"(fn [lst] \n  (map-indexed #(vector %2 %) lst))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(partial map-indexed #(vector %2 %1))","problem":157,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [coll] (map-indexed (fn [i x] [x i]) coll))","problem":157,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":157,"code":"(fn [xs]\n  (loop [[x & rest-xs :as xs] xs\n         i                    0\n         result               []]\n    (if (= 0 (count xs)) result\n      (recur rest-xs (+ i 1) (conj result [x i])))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn index\n  [vector] (if (= (count vector) 1) \n                  [[(first vector) 0]]\n                  (conj (index (take (dec (count vector))\n                                    vector)) \n                        [(last vector) (dec (count vector))])))","problem":157,"user":"503a5623e4b07a1917cc34d3"},{"problem":157,"code":"(fn [x] \n  (loop \n    [i 0 z []] \n    (if \n      (< i (count x)) \n      (recur (inc i) (conj z [(get x i) i]))\n      z   \n    ) \n   )\n)","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":157,"code":"(fn [n] \n  (map-indexed #(vector %2 %) n))","user":"5a99b861e4b0d174b936c7ad"},{"problem":157,"code":"(fn [l] (map (fn [a b] [b a]) (range) l))","user":"5cbd5b42e4b026601754b9f6"},{"problem":157,"code":"(fn [x]\n    (map-indexed \n     #(vector %2 %1) x))","user":"537bde5de4b06839e8705e73"},{"problem":157,"code":"(fn [lst]\n(map-indexed #(vector %2 %1) lst))","user":"5c706232e4b0fca0c162277e"},{"problem":157,"code":"(fn [coll]\n   (loop [i 0\n          c (count coll)\n          arr []]\n     (if (> i (- c 1))\n         arr\n         (recur (inc i) c (conj arr [(get coll i) i])))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":157,"code":"(partial map-indexed (fn [idx itm] (vector itm idx)))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":157,"code":"#(loop [x % xs [] i 0]\n   (if (seq x)\n     (recur (rest x) (conj xs [(first x) i]) (inc i))\n     xs))","user":"55d85ac9e4b0e31453f64ab2"},{"problem":157,"code":"(fn [s]\n  (map #(vector %1 %2) s (range 0  (count s))))","user":"581a5fdbe4b0e114eb51a002"},{"problem":157,"code":"(fn [item]\n  (mapv #(apply vector %) (mapv reverse (map-indexed vector item))))","user":"5c9adfebe4b048ec896c5ab9"},{"problem":157,"code":"(fn [coll]\n  (loop [c coll\n         index 0\n         x []]\n    (if (not (empty? c))\n        (recur (rest c) (inc index) (conj x [(first c) index]))\n        x)))","user":"4db883e1535d1e037afb2198"},{"code":"(fn [s] (reduce #(conj %1 [%2 (count %1)]) [] s))","problem":157,"user":"51e28063e4b08e53a149f0f2"},{"problem":157,"code":"(fn f [l] (map-indexed (fn [idx item] (list item idx)) l))","user":"565131b3e4b0f29ec07d2e88"},{"problem":157,"code":"(fn [x] (let [n (count x)] \n          (map (fn [y z] [y z]) x (range n))\n          ))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":157,"code":"(fn [coll]\n   (map-indexed (fn [x1 x2] [x2 x1]) coll))","user":"54094824e4b0addc1aec66da"},{"problem":157,"code":"(fn [col]\n  (partition 2 (interleave col (range (count col)))))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":157,"code":"(fn [a] (map-indexed #(conj [] %2 %1) a))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"#(for [z (range (count %1))]\n   (list (%1 z) z))","problem":157,"user":"52d340ebe4b099d49816f0c1"},{"code":"#(map-indexed (fn [n x] [x n]) %)","problem":157,"user":"4dd7d040535d2dad7130b5d6"},{"code":"#(loop [data % idx 0 result []]\n   (if (empty? data) result\n    (recur \n        (next data) \n        (inc idx) \n        (conj result [(first data) idx]))\n   ))","problem":157,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn [ls]\n  (map\n    #(vector % %2)\n    ls\n    (iterate inc 0)))","problem":157,"user":"502a9fdee4b095a7adb898b4"},{"problem":157,"code":"#(first (reduce (fn [[c i] e] [(conj c [e i]) (inc i)]) [[] 0] %))","user":"51a4d802e4b0def3c5c5869a"},{"code":"map-indexed (fn [idx item]\n               [item idx])","problem":157,"user":"536be48ee4b0fc7073fd6e31"},{"problem":157,"code":";keep-indexed #(vector %2 %)\n#(map vector % (range))","user":"559279b7e4b0604b3f94d58c"},{"problem":157,"code":"map-indexed (fn [i k] [k i])","user":"57aa290de4b0b8559636fc65"},{"problem":157,"code":"(fn [c ] (map #(vector (nth c %) %) (range (count c))))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":157,"code":"(fn [col]\n   (reduce \n     #(conj %1 [%2 (inc (second (last %1)))]) \n     [[(first col) 0]] \n     (rest col)))","user":"590b3aeae4b047aa04b199d0"},{"problem":157,"code":"(fn\n  [s]\n  (map vector s (range))\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":157,"code":"keep-indexed (comp reverse vector)","user":"53dfdf01e4b0d874e779ae46"},{"problem":157,"code":"(fn [seq]\n\t(loop [f (first seq)\n\t\t  r (rest seq)\n\t\t  out []]\n\t\t(if (nil? f)\n\t\t\tout\n\t\t\t(recur (first r) (rest r) (conj out [f (count out)])))) )","user":"54cbd6bae4b057c6fda3a282"},{"problem":157,"code":"(fn [coll] (map reverse (map-indexed vector coll)))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"#(map-indexed (fn [i x] [x i]) %)","problem":157,"user":"4e568873535d8a8b8723a283"},{"code":"(fn [coll]\n  (loop [i 0 k (first coll) col (rest coll) result []]\n    (if (nil? k)\n    \tresult\n    (recur (inc i) (first col) (rest col) (conj result [k i])))))","problem":157,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn is \n  ([s] (is 0 s))\n  ([i s]\n    (if (not (next s))\n      (cons (cons (first s) [i]) ())\n      (cons (cons (first s) [i]) (is (inc i) (rest s))))))","problem":157,"user":"4fbb9d80e4b081705acca2ea"},{"code":"#(partition 2 (interleave %1 (range)))","problem":157,"user":"52cc85abe4b07d0d72b27367"},{"code":"#(loop [new [] old %1 cnt 0]\n  (if (empty? old)\n    new\n    (recur (conj new [(first old) cnt])\n           (rest old)\n           (inc cnt))))","problem":157,"user":"4faec810e4b081705acca24e"},{"problem":157,"code":"(fn [x] (let [indices (range (count x))] (map vector x indices) ))","user":"5c51c930e4b0fb8c5ffd99ce"},{"problem":157,"code":"keep-indexed #(vector %2 %)","user":"55236ad6e4b0882d96d091b1"},{"problem":157,"code":"(fn [coll] (map vector coll (range 0 (.length coll))))","user":"4f16d3fd535d64f60314644e"},{"problem":157,"code":"(fn IndexingSequences [lst]\n    (for [i (range 0 (count lst))]\n        [(nth lst i) i]))","user":"607508f3e4b069485764de54"},{"code":"(partial map-indexed (fn[i v] [v i]))","problem":157,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":157,"code":"(fn [coll] (map-indexed #(vector %2 %1) coll))\n;(map vector % (range))","user":"60794173e4b0a637ed78035d"},{"code":"(fn [s] (let [e (empty s)] (loop [r s acc e c 0] (if (empty? r) acc (recur (next r) (conj acc (conj e (first r) c)) (inc c))))))","problem":157,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":157,"code":"#(map vector %1 (range 0 (count %1)) )","user":"54f86b8ce4b01ecee9d88828"},{"problem":157,"code":"(fn indexing\n  [lst]\n  \n  (map #(vector %1 %2) lst (range)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":157,"code":"#(map vector\n      %\n      (range))","user":"4db58ccb535d87e67b28fe10"},{"code":"(fn iter [iseq]\n    (partition 2 (interleave iseq (range))))","problem":157,"user":"50057f23e4b0678c553fc466"},{"problem":157,"code":"(fn [items] (map-indexed (fn [idx itm] [itm idx]) items))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn t157 [values] (map-indexed (fn [idx itm] [itm idx] ) values))","problem":157,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx x] [x idx]) coll))","user":"53fd66a4e4b0de5c418485e3"},{"problem":157,"code":"(fn [coll]\n  (map (fn [n] [n (.indexOf coll n)]) coll)\n  )","user":"562fd7f6e4b0ab312c17ebe0"},{"problem":157,"code":"(fn [coll]\n  (mapv (fn [e index] [e index]) coll (range)))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"map (fn [x y] [y x]) (range)","problem":157,"user":"4e1f9bb5535d04ed9115e80d"},{"code":"(fn [progress pos ks]\n  ;(println progress pos ks)\n  (if (not-empty ks)\n    (recur (conj progress [(first ks) pos]) (inc pos) (rest ks) )\n    progress\n  )\n ) [] 0","problem":157,"user":"531cd41ee4b08068f379eda9"},{"problem":157,"code":"(fn [s] (map vec (partition 2 (interleave s (range (count s))))))","user":"55ed1575e4b0121d4835fdd3"},{"problem":157,"code":"(fn [coll]\n    (->> (map-indexed vector coll)\n         (map reverse)))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [coll] (map list coll (range))) ;; list is due to some other solutions, I had a form of conj originally","problem":157,"user":"50fac9e3e4b07934dda8b0d1"},{"code":"#(map vec (partition 2 (interleave % (iterate inc 0))))","problem":157,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn f [col]\n  (let [ index-of (fn [v l] (loop [i 0] (if (= (nth l i)\n                                              v) i (recur (inc i)))) ) ; get the index of value v in sequence l. assume v is in l\n         ]\n    (map (fn [v]\n           [v (index-of v col)]) col)))","problem":157,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":157,"code":"(fn [seqe]\n  (map vector seqe (range (count seqe))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"code":"(fn [xs]\n  (reduce #(conj % [%2 (.indexOf xs %2)]) [] xs))","problem":157,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":157,"code":"#(map vector %(range ))","user":"55d9743ae4b0e31453f64aca"},{"problem":157,"code":";#(partition 2 (interleave % (range)))\n#(map vector % (range))\n;map-indexed #(vector %2 %)","user":"54d341f7e4b0e8a36923e603"},{"code":"#(reverse (seq (zipmap % (range))))","problem":157,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":157,"code":"(fn [x] \n  (map #(vector %1 %2) x (range)))","user":"54a11042e4b09f271ff37c49"},{"problem":157,"code":"#(map-indexed (fn [i elem] [elem i]) %)","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn [l] (map-indexed #(do [%2 %1]) l))","problem":157,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":157,"code":"(fn [l]\n  (map #(vector %1 %2) l (range (count l))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":157,"code":"(fn [x]\n  (map (fn [a b] [a b]) x (range (count x))))","user":"59636b37e4b066ee0a44b0c3"},{"problem":157,"code":"#(map (fn [e i] [e i]) % (range (count %)))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":157,"code":"#(loop [result [] col %]\n   (if (empty? col)\n     result\n     (recur (conj result [(first col) (count result)]) (rest col))))","user":"555883c5e4b0deb715856e2d"},{"problem":157,"code":"#(partition 2\n           (interleave % \n                       (range)))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":157,"code":"(fn[xs] (map #(list %1 %2) xs (range (count xs))))","user":"5602ab92e4b04bb52996e1a3"},{"code":"#(->> (iterate inc 0) (interleave %) (partition 2))","problem":157,"user":"521dceeae4b050d5da042802"},{"code":"(fn [xs] (map #(-> [%1 %2]) xs (range (count xs))))","problem":157,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":157,"code":"(fn index-seq\n  [coll]\n  (map vector coll (range)))","user":"60396c95e4b0d5df2af222f4"},{"problem":157,"code":"(fn [s]\n  (mapv vector s (range)))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn  [s]\n  (loop [rm (seq s), acc (vector), i 0]\n    (cond (empty? rm) acc\n          :else (recur (rest rm) (conj acc [(first rm) i]) (inc i)))))","problem":157,"user":"538e36c7e4b0b51d73faae81"},{"problem":157,"code":"(fn iseq [sx]\n  (map-indexed #(vector %2 %1) sx))","user":"56504dc2e4b0284900eef6bc"},{"problem":157,"code":"#(map-indexed (fn [itm idx] \n                [idx itm])%)","user":"5410499de4b01498b1a719a6"},{"code":"(fn [s] (loop [res [] i 0 cur s] (if (empty? cur) res (recur (conj res (vector (first cur) i)) (+ i 1) (rest cur)) )))","problem":157,"user":"536f2faee4b0fc7073fd6e79"},{"problem":157,"code":"(fn [coll]\n  (loop [i 0\n         [fst & rst :as all] coll\n         res []]\n    (if (empty? all)\n      res\n      (recur (inc i) rst (conj res [fst i]))\n      )\n    )\n  )","user":"55f33f0ce4b06e875b46ce59"},{"problem":157,"code":"(fn [x] (into (empty x) (map list x (range))))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [s]\n  (loop [v []\n         i 0\n         e s]\n    (if (< i (count s))\n      (recur (conj v [(first e) i]) (inc i) (rest e))\n      v)))","problem":157,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":157,"code":"#(map\n  vector\n  %\n  (range (count %)))","user":"51b01309e4b0c53cf2e68a57"},{"code":"(fn index [coll]\n  (map #(vector % (.indexOf coll %)) coll))","problem":157,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [s]\n  (for [n (range (count s))] [(nth s n) n]))","problem":157,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":157,"code":"; (fn [coll] (into [] (zipmap coll (iterate inc 0))))\n(fn\n    [coll]\n    (map-indexed (fn [idx itm] [itm idx]) coll))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":157,"code":"(fn [s] (into (empty s) \n              (map vector s (range (count s)))))","user":"4fc9a977e4b0ee37620e1847"},{"code":"(fn [c]\n   (map #(vector % %2) c (range (count c))))","problem":157,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [coll]\n  (reverse (vec (zipmap coll (range)))))","problem":157,"user":"505bd09fe4b032b709c81373"},{"code":"#(into () (zipmap % (range (count %))))","problem":157,"user":"4eda8d7c535d10e5ff6f530f"},{"code":"(fn f [x] (for [i (range (count x))] [(nth x i) i]))","problem":157,"user":"5194f482e4b05be8c43d2385"},{"code":"(fn myzipwithindex\n ([s i]\n  (let \n    [ss (seq s)]\n    (if ss\n      (lazy-seq \n   \n        (cons [(first ss) i] \n               (myzipwithindex (rest ss) (inc i))\n        )\n      )\n    )\n   )\n )\n \n ([s]\n  (myzipwithindex s 0)\n  )\n)","problem":157,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn [s]\n  (let [in (range (count s))]\n    (map (fn [i] [(get s i) i]) in)))","problem":157,"user":"523b4e91e4b07becd5be21ef"},{"code":"(partial map-indexed (fn [i x] (vector x i)))","problem":157,"user":"4db3a0e5535df7e46ed9b6d0"},{"code":"(fn [s] (map (fn [x y] [x y]) s (range)))","problem":157,"user":"513bb7a6e4b04402f587b77d"},{"problem":157,"code":"(fn [xs] (map (fn [a b] [a b]) xs (range (count xs))))","user":"531bfb69e4b08068f379ed97"},{"problem":157,"code":"#(map vector   % (range) )","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":157,"code":"#(loop [ index 0 coll %1 output []] (if (empty? coll) output (recur (inc index) (rest coll) (conj output [(first coll) index]))))","user":"5886ac91e4b0f1effa3b76e5"},{"problem":157,"code":"(fn\n  [coll]\n  (loop [c coll i 0 retval []]\n    (if (= (count coll) i)\n      retval\n      (recur (rest c) (inc i) (conj retval [(first c) i])))))","user":"51071f2ee4b05b2b4eee748e"},{"problem":157,"code":"(fn [s]\n                (map-indexed (fn [idx item] [item idx]) s))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":157,"code":"(fn [s]\n        (map-indexed #(vector %2 %1) s))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":157,"code":"(fn [s]\n  (map vector s (range))\n  )","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn [c]\n  ((fn x [s a] \n    (if (empty? s)\n      a\n      (x (rest s) (conj a [(first s) (count a)])))) c []))","problem":157,"user":"4f559d2ce4b0a7574ea71808"},{"problem":157,"code":"(partial map (fn [i x] [x i]) (range))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":157,"code":"(partial map-indexed #(seq [%2 %1]))","user":"5e17bb46e4b00200644e3d5a"},{"code":"#(partition-all 2 (interleave % (range)))","problem":157,"user":"4fb99483e4b081705acca2da"},{"problem":157,"code":"(fn index [coll]\n  (loop [acc []\n         s coll\n         i 0]\n    (if (first s)\n      (recur (conj acc [(first s) i])\n             (rest s)\n             (inc i))\n      acc)))","user":"580a0783e4b0a837a8b30d2c"},{"problem":157,"code":"(fn [xs]\n  (->>\n   (map-indexed vector xs)\n   (map (juxt second first))))","user":"5ec21ef0e4b00a66d4a95299"},{"problem":157,"code":"(fn ix-seq\n  [in]\n  (into []\n        (map #(vec (list %1 %2))\n             in\n             (take (count in) (range 0 (count in)))\n             )\n        )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":157,"code":"(fn [s] (map #(reverse %) (map-indexed vector s)))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":157,"code":"(fn create-indexed [coll]\n  (loop [ret [] left coll index 0]\n    (if (empty? left)\n      ret\n      (recur (conj ret [(first left) index]) (rest left) (inc index)))))","user":"4ff0e01fe4b0678c553fc328"},{"problem":157,"code":"(fn [v]\n    (map #(vector %1 %2) v (range 0 (count v))))","user":"55975569e4b031d6649c9b8e"},{"problem":157,"code":"(fn w [e]\n\n ((fn jp [q n] \n(if (empty? q)\n  \n ()\n(cons (list (first q) n) (jp (rest q) (+ n 1)))  \n  )\n) e 0)\n \n)","user":"544e1794e4b0e39780006980"},{"problem":157,"code":"(fn [coll] (map-indexed (fn [i item] (conj '() i item )) coll))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn [x] (for [i (range (count x))] [(x i) i]))","problem":157,"user":"4e720985535d5021c1a89655"},{"code":"(fn [seq]\n    (map (fn [a b] (conj (empty seq) a b)) seq (iterate inc 0))\n    )","problem":157,"user":"4eee3e6a535d93acb0a668c3"},{"problem":157,"code":"(fn [xs]\n         (vec (map vector xs (range (count xs)))))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn indexed-seq [coll]\n  (let [result (map #(seq %&) coll (range (count coll)))]\n       result))","problem":157,"user":"4fae4c11e4b081705acca248"},{"problem":157,"code":"(fn [x]\n(map reverse (map-indexed vector x))\n  )","user":"5822b578e4b04b46fc4b0fa4"},{"problem":157,"code":"(fn [coll]\n  (map-indexed #(seq [%2 %1]) coll))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"#(map vector % (range))\n;(fn [coll]\n;  (map (fn [x y]\n;         [x y])\n;       coll\n;       (range)))\n\n;for pascal trapezoid\n;(fn lazy-pascal [coll]\n;     (cons coll (lazy-seq (lazy-pascal (->> coll\n;                                         (cons 0)\n;                                         (partition 2 1 [0])\n;                                         (map (partial apply +)))))))","problem":157,"user":"5153316ce4b0252ac4b16611"},{"problem":157,"code":"(fn sf\n  ([coll] (sf coll 0 []))\n  ([coll index my-coll]\n   (if (empty? coll)\n     my-coll\n     (sf (rest coll) (inc index) (conj my-coll [(first coll) index])))))","user":"6033f8e9e4b0d5df2af222c6"},{"code":"#(for [a % b (range (count %)) :when (= a (get % b))] [a b])","problem":157,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [coll]\n   (map list coll (range)))","problem":157,"user":"516282c3e4b0e6d3c4734711"},{"code":"(partial map-indexed (fn [index item] [item index]))","problem":157,"user":"4ed98b40535d10e5ff6f5307"},{"code":"#(map-indexed (fn [idx val] [val idx]) %1)","problem":157,"user":"4f88ae35e4b033992c121c6d"},{"problem":157,"code":"#(vec (map vec (partition 2 (interleave % (range)))))","user":"585481e0e4b07779d46863fe"},{"code":"#(map vec (partition 2 (interleave % (range))))","problem":157,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn [seq] (map #(vector %1 %2) seq (iterate inc 0)))","problem":157,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":157,"code":"(fn [coll]\n   (map-indexed (fn [a b] [b a]) coll))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn p157 [x] (map-indexed #(list %2 %1) x))","problem":157,"user":"500b61b1e4b03d00572d2d81"},{"problem":157,"code":"(fn [m] (reduce #(conj %1 [%2 (count %1)]) [] m))","user":"5097cf53e4b00ad8bab4e976"},{"problem":157,"code":"(fn index-seq [s] (map #(identity (list %1 %2)) s (range (count s))))","user":"590b055ae4b047aa04b199c9"},{"problem":157,"code":"(fn [s] (map (fn [i] [(nth s i) i]) (range (count s))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn\n  [xs]\n  (let [indices (iterate inc 0)]\n    (map list xs indices)))","problem":157,"user":"4db53f87535d87e67b28fe08"},{"problem":157,"code":"(fn i [s] into [] (map #(vector %1 %2) s (range (count s))))","user":"53bd476ae4b0d9a98559a6ca"},{"problem":157,"code":"(fn [xs]\n  (->> (interleave xs (range))\n       (partition 2)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":157,"code":"(fn [l]\n  (loop [m l\n         idx 0\n         r []]\n    (if (nil? m)\n      r\n      (recur (next m) (inc idx) (conj r [(first m) idx])))))","user":"56051095e4b08b23635d3162"},{"code":"(fn [x] (map #(vec [% %2]) x (range)))","problem":157,"user":"52c7f036e4b0c2d177d62126"},{"problem":157,"code":"(fn [coll]\n  (reduce-kv #(conj %1 [%3 %2])\n             []\n             coll))","user":"55b28b57e4b01b9910ae296c"},{"problem":157,"code":"(fn [seq] (map vector seq (range (count seq))))","user":"5e9878b9e4b0157ca96647d8"},{"problem":157,"code":"map (fn [v k] [k v]) (range)","user":"518ba795e4b0f028e99addf0"},{"problem":157,"code":"#(map (fn [[v i]] (vector i v)) (map-indexed vector %))","user":"5a8e9a7ae4b05369db4d2528"},{"code":"(fn [coll]\n  (loop [[k & ks] coll\n         [v & vs] (range (count coll))\n         result []]\n    (if (nil? k)\n      result\n      (recur ks vs (conj result [k v])))))","problem":157,"user":"50ed3c6be4b01236b1d4983b"},{"problem":157,"code":"(fn test50 [s1]\n  (reverse(into [] (zipmap s1 (range (count s1))))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":157,"code":"(fn [xs] (into [] (map-indexed (fn [index item] [item index]) xs)))","user":"4fe98e07e4b0547ebccb2464"},{"code":"(fn [s]\n  (map-indexed #(vector %2 %1) s)\n)","problem":157,"user":"4fcf5292e4b03432b189f40e"},{"problem":157,"code":"reduce-kv (fn [res k v] (conj res (vector v k))) []","user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":157,"code":"(fn [coll] (map #(conj [] % %2) coll (range (count coll))))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":157,"code":"#(map-indexed\n  (fn [idx x]\n    [x idx]) %)","user":"55647a31e4b0c656e3ff1808"},{"code":"#(map-indexed (fn [idx itm] [itm idx]) %)","problem":157,"user":"4ed2dd98535d44c135fd68e2"},{"problem":157,"code":"(fn [xs]\n    (let [idx (range (count xs))\n          _ (prn 'idx idx 'xs xs)]\n       (mapv #(vector %1 %2) xs idx)))","user":"5ed4b1e8e4b016b56eae05ce"},{"code":"(fn [x] (partition 2 (interleave x (range 0 (count x)))))","problem":157,"user":"5300f68de4b0d8b024fd3714"},{"problem":157,"code":"(fn indexing-sequences [coll]\n  (map-indexed (fn [i x] [x i]) coll))","user":"56ac81ace4b03c432f187347"},{"problem":157,"code":"(fn f\n  ([s] (f s [] 0))\n  ([s r i] (if (empty? s) r (recur (rest s) (conj r [(first s) i]) (inc i)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":157,"code":"(fn [x] (apply map vector [x (range)]))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn idx [seq]\n (reverse (to-array (zipmap seq (range 0 (count seq))))))","problem":157,"user":"4fc3b0d4e4b081705acca343"},{"problem":157,"code":"(fn x [sq]\n  (map vector sq (range (count sq))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(partial map-indexed #(vec [%2 %1]))","problem":157,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [col] (map vector col (iterate inc 0)))","problem":157,"user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn [coll]\n  (map #(conj [] % %2) coll (range)))","problem":157,"user":"52527192e4b0541d1855b8af"},{"problem":157,"code":"(fn [x](loop[res [] x x ind 0](if (empty? x) res \n                                    (recur (conj res [(first x) ind]) (rest x) (inc ind)))))","user":"54ecd7dde4b024c67c0cf85c"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx value] [value idx]) coll))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":157,"code":"(fn [s] (map #(conj [] %1 %2) s (range)))","user":"559454f2e4b0c79f6e1db952"},{"problem":157,"code":"#(loop [s % i 0 r []]\n   (if (empty? s) r\n     (recur (rest s) (inc i) (conj r [(first s) i]))))","user":"592bb806e4b072a2710fcf46"},{"code":"#(map list % (range (count %)))","problem":157,"user":"4f1d1299535d64f603146487"},{"code":"(fn [mylst] \n  (loop [lst mylst acc '() n 0] \n    (let [ head (first lst) tail (rest lst) nplus (+ n 1) elem (list head n) ] \n      (if (empty? lst) acc (recur tail (concat acc (list elem)) nplus)))) )","problem":157,"user":"51eec1a6e4b0871fa145d98d"},{"problem":157,"code":"#(map-indexed (fn [x y] [y x]) %1)","user":"5628f33ce4b00e49c7cb47f3"},{"problem":157,"code":"(fn [col]\n  (seq (map-indexed  (fn [i a] [a i]) col)))","user":"4f7cbf4ae4b06e829148e1b7"},{"code":"(fn [c] (map #(vector %1 %2) c (range)))","problem":157,"user":"52046600e4b0c283853240c5"},{"problem":157,"code":";#(map-indexed (fn [i v] [v i]) %)\n\n#(map list % (range))","user":"5f6a583ae4b02876ed9fd046"},{"code":"; daowen's solution:\n; #(map-indexed (fn [i v] [v i]) %)\n\n; immo's solution:\n; #(map list % (range))\n\n(fn index-sequence [s]\n(let [indexes (range 0 (count s))]\n  (map #(vector% %2) s indexes)))","problem":157,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":157,"code":"(fn [s]\n  (let [n (count s)]\n    (map vector s (range n))))","user":"5813e208e4b0f478707a061b"},{"problem":157,"code":"(fn [xs]\n  (map-indexed (fn [i x] [x i]) xs))","user":"5512cd55e4b055c2f668d4ba"},{"code":"(fn inseq\n  ([x] (inseq x 0))\n  ([x n] (if (empty? x) []\n               (cons [(first x) n] (inseq (rest x) (inc n))))))","problem":157,"user":"4f8b20fce4b02e764a0a5178"},{"problem":157,"code":"(fn val-and-index\n  [s]\n  (loop [result []\n         remaining s\n         index 0]\n    (if (empty? remaining)\n      result\n      (recur (conj result [(first remaining) index])\n             (rest remaining)\n             (inc index)))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"#(reverse (concat (zipmap % (range))))","problem":157,"user":"539378fbe4b0b51d73faaebd"},{"problem":157,"code":"(fn [xs]\n  (loop [lxs xs\n         idx 0\n         acc []]\n    (if (empty? lxs)\n      acc\n      (recur (rest lxs) (inc idx) (conj acc [(first lxs) idx])))))","user":"53de622ce4b0d874e779ae34"},{"code":"(partial map-indexed (fn [i v] [v i]))","problem":157,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn [l] (partition 2 (interleave l (range))))","problem":157,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn [coll]\n  (map-indexed\n    #(reverse %&)\n    coll))","problem":157,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn r\n ([xs] (r (rest xs) [[(first xs) 0]] 1))\n ([xs acc n]\n  (if (empty? xs)\n    acc\n    (r (rest xs) (conj acc [(first xs) n]) (inc n)))))","problem":157,"user":"4fb510b5e4b081705acca2b8"},{"code":"(fn [x] (map #(vector % %2) x (range (count x))))","problem":157,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":157,"code":"(fn [coll] (map-indexed (fn [a b] [b a]) coll))","user":"561a1af6e4b053970a773b02"},{"problem":157,"code":"(fn[v]\n   (mapv vector v (range)) )","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"code":"(fn [x]\n    (for [[a b] (map-indexed vector x)]\n      [b a]))","problem":157,"user":"50bf6f93e4b0ffd967a66cbf"},{"code":"(fn [x]\n  (map-indexed #(vec [%2 %]) x))","problem":157,"user":"507ef25ce4b0f753b6f9788e"},{"problem":157,"code":"#(loop [coll %\n         counter 0\n         indexvec []]\n   (if (empty? coll)\n     indexvec\n     (recur (rest coll)\n            (inc counter)\n            (conj indexvec (vector (first coll) counter)))))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn [A]\n  (loop\n    [tr []\n     i 0\n     r A]\n    (if (= nil (first r))\n      tr\n      (recur\n       (conj tr [(first r) i])\n       (+ i 1)\n       (rest r)))))","problem":157,"user":"530d85dee4b08068f379eca8"},{"problem":157,"code":"#(apply vector (map-indexed (fn [i x](identity[x i])) %))","user":"5669eb9ae4b04acd4f672e02"},{"problem":157,"code":"(fn indexing-seq\n  [[& args]]\n  (loop [param args\n         index 0\n         ret []]\n    (if (empty? param)\n      ret\n      (recur (rest param) (inc index) (conj ret (conj [] (first param) index))))))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"(fn [l]\n   (for [i (range (count l))] [(nth l i) i]))","problem":157,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":157,"code":"map-indexed (fn [e i] [i e])","user":"55d62a68e4b0e31453f64a96"},{"problem":157,"code":"(fn indexing-sequences [xs]\n  (map-indexed (fn [i e] [e i]) xs))","user":"5eec1001e4b07c55ae4a0502"},{"problem":157,"code":"(fn [coll] (map #(vec %&) coll (range)))","user":"5a085dfde4b01bb0ae8afdf4"},{"code":"(fn [coll] (map-indexed #(vector %2 %) coll))","problem":157,"user":"4f036d9b535dcb61093f6ac1"},{"code":"(partial map-indexed (comp reverse list))","problem":157,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":157,"code":"(fn enum [xs]\n  (for [[x y] (map list xs (range (count xs)))]\n    [x y]))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":157,"code":"(fn zipIndex [x] (into (empty x)(map (fn [a b] [a b]) x (range 0 (count x)))))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn\n  [col]\n  (for\n    [x (range (count col))]\n    (list (nth col x) x)))","problem":157,"user":"507a08e4e4b08327cd804a67"},{"problem":157,"code":"(fn [s] (map #(do [%1 %2]) s (range)))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn [lst] (for [i (range (count lst))] [(lst i) i]))","problem":157,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [xs] (for [x xs] [x (.indexOf xs x)]))","problem":157,"user":"4e9519b4535dbda64a6f6b2d"},{"code":"#(keep-indexed (fn [i v] (vector v i)) %)","problem":157,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":157,"code":"(fn [v]\n  (map #(vector %1 %2) v (range )))\n\n;#(map vector % (range))","user":"53be3ee7e4b0d9a98559a6df"},{"problem":157,"code":"(fn index-seq [coll]\n  (loop [r []\n         coll coll\n         i 0]\n    (if (empty? coll)\n      r\n      (recur (conj r [(first coll) i]) (rest coll) (inc i)))))","user":"565654dae4b0f9d632dd849f"},{"problem":157,"code":"(fn [toIndex] \n  (partition 2 (interleave toIndex (range 0 (count toIndex))))\n  )","user":"5b3251c1e4b025bcb146f317"},{"code":"#(vec (reverse (zipmap % (range))))","problem":157,"user":"50ebf779e4b04edc3377703e"},{"problem":157,"code":"(fn\n  [x]\n  (mapv #(into [] (reverse (find x %))) (range (count x))))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":157,"code":"#(loop [xs % res [] ind 0]\n   (if (empty? xs) res\n     (recur (rest xs) (conj res (vector (first xs) ind)) (inc ind))))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":157,"code":"(fn[x]\n (map\n  (fn[a b] [a b])\n  x\n  (iterate inc 0)\n )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":157,"code":"(fn [col] (map list col (iterate inc 0)))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn [x] (map-indexed #(vector %2 %) x))","problem":157,"user":"51fa7154e4b0f1313d4689da"},{"problem":157,"code":"(fn f [x] (map vector x (range)))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":157,"code":"(fn is [s]\n  (map #(vec [% %2]) s (range 0 (count s))))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":157,"code":"map-indexed #(conj [%2] %1)","user":"5a527beee4b05d388ecb6bfe"},{"problem":157,"code":"(fn pair [lst]\n  (for [n (range (count lst))\n        :let [x (nth lst n)]]\n    (list x n)))","user":"53ddd44be4b0d874e779ae2e"},{"problem":157,"code":"(fn [s]\n  (reduce #(conj %1 [%2 (if (last %1) (inc (last (last %1))) 0)]) [] s))","user":"5eee7311e4b07c55ae4a0510"},{"problem":157,"code":"(fn my-index [input]\n  (loop [result [] x input index 0]\n    (if (not-empty x)\n      (recur (conj result [(first x) index]) (rest x) (inc index))\n      result)))","user":"561bb8dbe4b064ca9f4b1686"},{"problem":157,"code":"(fn [col] (keep-indexed #(conj [%2] %1) col))","user":"53347274e4b0656e627bfd6b"},{"problem":157,"code":"(fn [coll] \n  (map #(vector %1 %2) coll (range (count coll))))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"(fn [x] (map vector x (range (count x))))","problem":157,"user":"4fa6440ee4b081705acca1b5"},{"code":"(fn idx [s]\n  (keep-indexed #(vector %2 %1) s))","problem":157,"user":"5338387de4b0e30313ee6c91"},{"problem":157,"code":"(fn [x]\n  (map conj (map vector x) (range (count x))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [xs] (map (fn [x no] (vector x no)) xs (iterate inc 0)))","problem":157,"user":"4dac39a28cc9d6edb8beb0b3"},{"problem":157,"code":"(fn [v] (into [] (map (fn [a b] [a b]) v (range (count v)))))","user":"56bb3a4be4b0f26550335951"},{"code":"(fn [a] (map #(list %1 %2) a (range)) )","problem":157,"user":"518aec06e4b06da86c1973c2"},{"problem":157,"code":"(fn [lis]\n  (map list lis (range (count lis))))","user":"56b6e354e4b0982f16b37e41"},{"problem":157,"code":"(fn indxd [s]\n  (map vector s (range)))","user":"53b39d82e4b047364c0444a6"},{"problem":157,"code":"#(sort-by second (seq (zipmap % (range))))","user":"54eee38ce4b024c67c0cf878"},{"problem":157,"code":"(fn index-seq\n  [coll]\n  (map (fn [x i] [x i]) coll (range)))","user":"579f89d5e4b05302be0b72ff"},{"problem":157,"code":"#(apply vector (map list % (range)))","user":"55d44dd6e4b0e31453f64a75"},{"problem":157,"code":"(fn [xs]\n  (map #(-> [%1 %2]) xs (range)))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":157,"code":"(fn [lst]\n  (loop [s lst c 0 d []]\n    (if (empty? s) d\n      (recur (rest s) (inc c) (conj d [(first s) c])))))","user":"558378dce4b05c286339e115"},{"code":"map-indexed\n  #(vector %2 %1)","problem":157,"user":"51b3f109e4b0f094dd986fa9"},{"problem":157,"code":"reduce-kv \n (fn [acc k v]\n   (conj acc [v k])\n )\n []","user":"59c243bae4b0a024fb6ae4aa"},{"problem":157,"code":"(fn [m] (map-indexed (fn [i e] (vector e i)) m))","user":"5900d5cde4b0438e51c2d02e"},{"problem":157,"code":"(fn index-seq [x]\n  (reduce (fn [result item]\n            (if (empty? result)\n              (conj result [item 0])\n              (let [last-item-index (second (last result))]\n                (conj result [item (inc last-item-index)]))\n              )\n            ) [] x)\n  )","user":"5c24c654e4b07e362c2305a7"},{"problem":157,"code":"(fn [l]\n  ((fn blah [r a]\n     (if (= r '())\n       '()\n       (conj (blah (rest r) (inc a)) (vector (first r) a))))\n   l 0))","user":"53aaaf7ae4b047364c044444"},{"problem":157,"code":"(fn [c] (map (fn [v i] [v i]) c (range (count c))\n ))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn [col]\n  (map-indexed #(vector %2 %1) col))","problem":157,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":157,"code":"(fn [x] \n       (loop [i 0 q []] \n         (if (< i (count x)) \n           (recur (inc i) (conj q (vector (get x i) i))) q)))","user":"561be724e4b064ca9f4b168c"},{"problem":157,"code":"#(map-indexed (fn [elt idx] [idx elt]) %)","user":"539fa040e4b0ca733b97449f"},{"problem":157,"code":"(fn s [se]\n  (map-indexed (fn [i item] (conj [item] i)) se))","user":"5885bea8e4b0f1effa3b76bf"},{"code":"(fn [xs]\n  (loop [xs xs i 0 zs []]\n    (if (seq xs)\n      (recur (next xs) (inc i) (conj zs [(first xs) i]))\n      zs)))","problem":157,"user":"511442d0e4b0e9c109bb74d5"},{"problem":157,"code":"(fn [coll] (map #(vector %1 %2) coll (range (count coll))))","user":"54b6c24be4b0ed20f4ff6e7c"},{"code":"keep-indexed (fn [idx i] [i idx])","problem":157,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":157,"code":"(fn my-indexing [s]\n  ((fn adding [t i]\n     (if (empty? t)\n       '()\n       (conj (adding (rest t) (inc i)) [(first t) i]))) s 0))","user":"54982522e4b0b312c081ff7c"},{"problem":157,"code":"(fn [arr] (map vector arr (range)))","user":"5eb4927fe4b00a66d4a95221"},{"code":"(fn [s]\n  (keep-indexed (fn [index item] [item index]) s))","problem":157,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn [l] (map (fn [x y] [x y]) l (range)))","problem":157,"user":"507437c2e4b054001656acd0"},{"code":"#(map (fn[a b] [a b]) \n      %1 \n      (range))","problem":157,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":157,"code":"(fn [list]\n  ((fn [list accu i]\n     (if (empty? list)\n         accu\n         (recur (rest list) (conj accu [(first list) i]) (+ i 1))\n     )\n  ) list [] 0)\n)","user":"53ecd01fe4b0d648e757f4b9"},{"problem":157,"code":"(fn [s]\n  (loop [r s\n        i 0\n        v []]\n    (if (empty? r)\n      v\n      (recur (rest r) (inc i) (conj v [(first r) i]))\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn [sq] (partition 2 (interleave sq (iterate inc 0))))","problem":157,"user":"515737f0e4b0b0b4b87062d0"},{"code":"#(map vector %1 (range))","problem":157,"user":"4f0d093b535d0136e6c22313"},{"problem":157,"code":"(fn fun157\n  [seq]\n  (map-indexed #(vector %2 %1) seq))","user":"5075e374e4b09049dea827a5"},{"problem":157,"code":"(fn\n\t[n]\n\t(map vector n (range))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":157,"code":"(fn [s]\n  (map #(vector %1 %2) s (range (count s))))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":157,"code":"(fn f \n([s] (f s 0))\n([s i] (if (empty? s)\n       []\n       (cons [(first s) i] (f (rest s) (inc i))))))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn ixx [l] (loop [rv [] i 0 [h & t] l]\n(let [nrv (cons [h i] rv)] (if (empty? t) (reverse nrv) (recur nrv (inc i) t)))))","problem":157,"user":"527ba695e4b03e8d9a4a7596"},{"problem":157,"code":"#(map-indexed (fn[idx item] [item idx])  %)","user":"575bd5f9e4b02ea114799365"},{"problem":157,"code":"(fn [coll]\n  (for [i coll]\n    [i (.indexOf coll i)]))","user":"5918db70e4b09b4ee5954bbb"},{"problem":157,"code":"(fn [input] (into [] (map-indexed (fn [ind item] [item ind]) input)))","user":"5addadfce4b0837691e92c13"},{"problem":157,"code":"#(->> (interleave % (range)) (partition 2))","user":"54dd76c8e4b024c67c0cf794"},{"problem":157,"code":";; too schemey...\n; (fn index\n;   ([coll curindex]\n;      (if (empty? coll)\n;        '()\n;        (cons (list (first coll) curindex) (index (rest coll) (inc curindex)))))\n;   ([coll]\n;      (index coll 0)))\n\n;; better\n(fn [coll]\n  (map vector coll (iterate inc 0)))","user":"53322cece4b019098a6f8b73"},{"code":"(fn [xs] (map vector xs (iterate inc 0)))","problem":157,"user":"515ead6be4b049add99a053e"},{"problem":157,"code":"(fn [coll]\n    (map-indexed (fn [& args] (reverse args)) coll))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":157,"code":"(fn [s]\n  (loop [s s\n         n 0\n         ans '()]\n    (if (empty? s)\n      (reverse ans)\n      (recur (rest s) \n             (+ n 1) \n             (cons (vector (first s) n) ans)\n             ))))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn f1 [x]\n  (let [i 0]\n  (map (fn[e]\n         (vec [ e (.indexOf x e)]))\n       x)))","problem":157,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [c] (map-indexed (fn [a b] [b a]) c))","problem":157,"user":"4ff4c9dae4b0678c553fc360"},{"problem":157,"code":"#(partition 2\n            (interleave %1\n                        (range (count %1))))","user":"5398123ee4b0b51d73faaef3"},{"problem":157,"code":"(fn [x] (reverse (vec (zipmap x (range)))))","user":"53fc8424e4b0de5c418485b3"},{"code":"#(map (fn[x y](vector x y)) % (iterate inc 0) )","problem":157,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":157,"code":"(fn [col]\n  (map #(identity [%1 %2]) col (range (count col)))\n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn s [x]\n  (partition 2 (interleave x (range (count x)))))","problem":157,"user":"4eeb8f68535d93acb0a668a9"},{"code":"#(map (fn [a b] [a b]) % (range (count %)))","problem":157,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [s]\n  (map-indexed #(list %2 %1) s))","problem":157,"user":"504e12ade4b078edc5f593b7"},{"problem":157,"code":"(fn [coll]\n  (map \n   (fn [a b] [a b])\n   coll\n   (iterate inc 0)\n   )\n  )","user":"5510d948e4b06e50f9beb18d"},{"code":"(fn [x] \n  (map \n   \t(fn [y] [y (.indexOf x y)] ) \n   \tx ))","problem":157,"user":"529ac5d4e4b02ebb4ef7509b"},{"problem":157,"code":"(fn index\n  [coll]\n  (map vector coll (range)))","user":"5609d328e4b05f002753deee"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx idm] [idm idx]) coll ) )","user":"55a21f1ce4b0acc240e3151f"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [n elem]\n                 (vec (list elem n)))\n               coll))","user":"59971dcbe4b07157cc8daacb"},{"problem":157,"code":"(fn [seq']\n  (loop [remaining seq'\n         index 0\n         result []]\n    (let [head (first remaining)\n          tail (rest remaining)]\n      (if (empty? remaining)\n        result\n        (recur tail (inc index) (conj result [head index]))))))","user":"567bf820e4b05957ce8c61ad"},{"problem":157,"code":"(fn [xs]\n  (partition 2 (interleave xs (range 0 (count xs)))))","user":"56967bc0e4b0dcc4269f4131"},{"code":"#(map vector % (range))\n;(fn [coll] (map #(vector % (.indexOf coll %)) coll))","problem":157,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn [vs]\n  (partition 2 (interleave vs (take (count vs)\n                              (range)))))","problem":157,"user":"5192dd39e4b0c663c5d86c9e"},{"problem":157,"code":"(fn [v] (\n           seq (map vector v (range 0 (count v)))\n        )\n)","user":"55d35a01e4b0e31453f64a63"},{"code":"#(loop [c % i 0 l []]\n  (if (empty? c)\n   l\n   (recur (rest c) (inc i) (conj l (vector (first c) i)))))","problem":157,"user":"4fb54e50e4b081705acca2bb"},{"problem":157,"code":"(fn index-seq [s] (map vector s (range)))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [s]\n\t(letfn\n\t\t[(step [s n]\n\t\t\t(if s (cons (list (first s) n) (step (next s) (+ n 1))))\n\t\t)]\n\t\t(step s 0)))","problem":157,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [x]\n  (map #(vector % %2) x (range)))","problem":157,"user":"4da3e51330acd6ed10482a68"},{"problem":157,"code":"#(->> (interleave % (range (count %)))\n      (partition 2)\n      )","user":"60471241e4b02d28681c77c9"},{"code":"(fn [c]\n  (mapv #(vector % %2) c (range)))","problem":157,"user":"4dc78527535d8a4b2fd7428f"},{"problem":157,"code":"(fn foo [a]\n(for [i (range (count a))]\n[(nth a i) i]\n)\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":157,"code":"(fn [thevec] (map #(vector  %  (.indexOf thevec %)) thevec))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn [ss]\n  (map-indexed (fn [idx itm] [itm idx]) ss))","problem":157,"user":"519db0ede4b037b32803f9b9"},{"problem":157,"code":"#(map-indexed (fn [j el] [el j]) %)","user":"534056fce4b085b17e897dac"},{"code":"(fn [c]\n   (map-indexed (fn [index item] [item index]) c)\n)","problem":157,"user":"510a6bece4b06956752d35af"},{"problem":157,"code":"(fn [s] \n  (vec \n   (map \n   (fn [pos] \n     (vec \n      (list (nth s pos) pos)\n     )\n   ) \n   (range 0 (count s))\n  ))\n)","user":"54b331dbe4b09f271ff37d37"},{"problem":157,"code":"map-indexed (fn [i s] [s i])","user":"52e0e646e4b09f7907dd1416"},{"problem":157,"code":"(fn [coll]\n  (let [idxs (range (count coll))]\n    (map vector coll idxs)))","user":"542c026ae4b0dad94371f29a"},{"problem":157,"code":"(fn __ [xs]\n  (map-indexed (fn [idx x] [x idx]) xs))","user":"55916764e4b0604b3f94d57b"},{"problem":157,"code":"(fn [coll]\n   (map-indexed (comp vec rseq vector) coll))","user":"543c39e0e4b032a45b86933d"},{"problem":157,"code":"(fn loo [col]\n\t(reduce \n\t\t#(conj %1 (vector %2 (count %1)))\n\t\t[]\n\t\tcol))","user":"51e8ee6be4b07cae92c04bfd"},{"problem":157,"code":"#(map-indexed (fn [idx val] [val idx]) %)","user":"5ce36e02e4b0a17bb84e2b3e"},{"code":"(fn [s]\r\n  (map-indexed (fn [i v]\r\n                 [v i])\r\n               s))","problem":157,"user":"4de2f44f535d08e6dec9fdec"},{"problem":157,"code":"(fn [coll]\n  (map (fn [x y] [x y]) coll (range (count coll))))","user":"5da306a3e4b000c986472be7"},{"code":"(fn [s]\n  (partition 2 (interleave s (range (count s)))))","problem":157,"user":"50366589e4b0fbe0a74d26c3"},{"problem":157,"code":"(fn [vec] \n  (map vector vec (range))\n  )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":157,"code":"#(partition 2 (interleave %1 (range (count %))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":157,"code":"(partial map-indexed (partial conj ()))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"(let [pair vector] ; assuming vector is only called with two arguments\n  (fn [xs]\n    (map pair \n         xs (range))))","problem":157,"user":"4efa3d4b535dced4c769f270"},{"problem":157,"code":"(fn clj4\n  [a]\n  (apply map vector a (vector (take (count a) (range)))))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":157,"code":"(fn[s](map (fn[a b][a b]) s (range)))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [coll]\n  (map vector coll (range (count coll))))","problem":157,"user":"505aa653e4b021387fb89857"},{"code":"(fn indexing [seq]\n  (map-indexed (fn [i v] [v i]) seq))","problem":157,"user":"4db6ce85535d1e037afb217f"},{"code":"(fn [s]\n  (map #(vec [%1 %2]) s (range)))","problem":157,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn [seq] (->> (range (count seq)) \n\n(map #(list (nth seq %) % ) )))","problem":157,"user":"4ea31da2535d7eef308072c1"},{"problem":157,"code":"#(first \n  (reduce \n   (fn [[t n] v] [(conj t [v n]) (inc n)]) \n   [[] 0] \n   %))","user":"561c0278e4b064ca9f4b1691"},{"problem":157,"code":"(fn [x]\n  (map-indexed #(vector %2 %1) x))","user":"5b58d012e4b02d533a91bd71"},{"problem":157,"code":"(fn [L]\n  \t(loop [Ret nil First (first L) Rest (rest L)]\n      (if (nil? First)\n       \t(reverse Ret)\n        (recur\n         \t(conj\tRet [First (count Ret)])\n         \t(first Rest)\n         \t(rest Rest)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"#(map vector %1 (range 0 (count %1)))","problem":157,"user":"4db4714f535dc0f10411755a"},{"problem":157,"code":";#(partition 2 (interleave % (range (count %))))\n\n#(map vector % (range))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [col]\n   (partition 2 (interleave col (for [i (range (count col))] i)))\n  )","problem":157,"user":"52d42021e4b09f7907dd132a"},{"code":"(fn index-vec [v]\n  (map #(vector (nth v %) %)(range (count v))))","problem":157,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":157,"code":"(comp vec #(map-indexed (fn [i item] [item i]) %))","user":"525d490ae4b0cb4875a45d70"},{"code":"(fn ind\n  [xs]\n  (map #(list %1 %2) xs (range (count xs))))","problem":157,"user":"536aa86de4b0243289761eb1"},{"code":"(fn [xs]\n  (into (empty xs)\n        (map (fn [x index]\n               (into (empty xs)\n                     [x index])) \n             xs \n             (range))))","problem":157,"user":"4e5867d1535d8a8b8723a291"},{"code":"#(map-indexed (fn [i x] [x i]) %1)","problem":157,"user":"50a5f72fe4b0aa96157e2611"},{"problem":157,"code":"(fn [col] (into [] (for [idx (range (count col))][(get col idx) idx])))","user":"5e078ba7e4b0978307768fb6"},{"problem":157,"code":"(fn index-seq [coll]\n  (map-indexed (fn [idx item] [item idx]) coll))","user":"52b9e920e4b07a9af57922c9"},{"problem":157,"code":";;#(partition 2 (interleave % (range)))\n#(map list % (range))","user":"580d7bdae4b0849f6811b73c"},{"problem":157,"code":"(fn [x] (map #(vector %1 %2) x (iterate inc 0)))","user":"56798d83e4b05957ce8c618b"},{"problem":157,"code":"(fn [x] (partition 2 (interleave x (range (count x)))))","user":"54336443e4b0b6b47310fcde"},{"problem":157,"code":"(fn [a-seq] \n  (loop [sq a-seq\n        n 0\n        coll []]\n    (if (empty? sq)\n      coll\n      (recur (rest sq)\n             (inc n)\n             (conj coll [(first sq) n])))))","user":"56b6a50ae4b0982f16b37e3c"},{"problem":157,"code":"#(map list %1 (range))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn myindex                                                            \n  [s]                                                                    \n  (loop [c 0 acc '()  items s]                                           \n    (if (empty? items)                                                   \n      (reverse acc)                                                      \n      (recur (inc c) (conj acc (list (first items) c)) (rest items))     \n      )                                                                  \n    )                                                                    \n  )","problem":157,"user":"50573ed8e4b0012181721987"},{"problem":157,"code":"#(map vec (partition 2 (interleave % (range (count %)))))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":157,"code":"(partial keep-indexed #(vector %2 %1))","user":"553698fae4b09218d5f44fc0"},{"problem":157,"code":"(fn [ y ]\n  (loop [ e y res [] x 0 ]\n    (if (empty? (rest e))\n      (conj res [(first e) x])\n      (recur (rest e) (conj res [(first e) x]) (inc x)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"problem":157,"code":"(fn index-seq [s]\n  (loop [s s res [] index 0]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res [(first s) index]) (inc index)))))","user":"55151417e4b055c2f668d4da"},{"code":"#(map-indexed (fn [i e]\n                 [e i])\n               %)","problem":157,"user":"51105c7fe4b04c71fce993ef"},{"problem":157,"code":"(fn [arr] (map-indexed (fn [index item] [item index]) arr))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn [s]\n  (into (empty s)\n(map (fn [k v] \n  (into (empty s) [k v])) s (range))))","problem":157,"user":"4fca2a13e4b0ee37620e184d"},{"problem":157,"code":"(fn index-pairs [s]\n  (map-indexed #(vector %2 %) s))","user":"575b3e9be4b02ea11479935b"},{"code":"#(map-indexed (fn [i e] [e i]) %)","problem":157,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":157,"code":"(fn [s]\n  (partition 2 (interleave s (iterate inc 0))))","user":"56ef077ae4b04a395b9a0459"},{"problem":157,"code":"#(mapv  vector % (range (count %)))","user":"57642916e4b0994c1922fbee"},{"code":"#(map vector % (range 0 (count %)))","problem":157,"user":"4daf907aedd6309eace4d17b"},{"code":"map-indexed (fn [index item] (vector item index))","problem":157,"user":"528b01a0e4b0239c8a67ae89"},{"problem":157,"code":"(fn\n  [xs]\n  (map (fn [x y] (vector x y))\n       xs\n       (range)))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn [x]\n   (map vector x (iterate inc 0)))","problem":157,"user":"4f616892e4b0defedf855fbf"},{"code":"#(map-indexed (fn [& args] (reverse args)) %)","problem":157,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [s] (map-indexed (fn [idx itm] [itm idx]) s))","problem":157,"user":"4faac363e4b081705acca200"},{"code":"#(reverse (into [](zipmap % (range))))","problem":157,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn indx[m]\n  (map #(vector % %2) m (range 0 (count m))))","problem":157,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":157,"code":"(fn index-seq\n  [seq]\n  (map #(vector %1 %2) seq (range)))","user":"53f3d96ee4b0742d9025b0fa"},{"problem":157,"code":"(fn x [xs]\n  (reverse\n    (map vec \n       (zipmap xs (iterate inc 0)))))","user":"57995ac1e4b05b1deef9adbf"},{"problem":157,"code":"reduce (fn [acc x]\n         (conj acc [x (count acc)]))\n         []","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"#(partition 2 (interleave %1 (range (count %1))))","problem":157,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(fn [xs]\n  (map #(vector %1 %2) xs (range)))","problem":157,"user":"4e7f5a0b535db966e863cc41"},{"code":"#(map-indexed (fn [x y] [y x]) %)","problem":157,"user":"4e6f578c535d5021c1a8961b"},{"problem":157,"code":"(fn ind [col]\n  (map #(vector %1 %2) col (range (count col))))","user":"5243e37ae4b076204b44fae3"},{"code":"(partial map-indexed (comp reverse vector))","problem":157,"user":"511b233ae4b07ab9ec456180"},{"problem":157,"code":"(fn [vs]\n            (->> vs\n                 (map-indexed vector)\n                 (map reverse)))","user":"53684a2fe4b0243289761e8c"},{"problem":157,"code":"(fn [x] \n  (map-indexed\n   (fn [a b]\n     [b a])\n   x)\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":157,"code":"(fn fun [coll]\n\t(map (fn [& args] args) coll (range)))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn indexing-seq [xs]\n  (map-indexed (fn [idx itm] [itm idx]) xs))","problem":157,"user":"4ef6f5ea535dced4c769f250"},{"problem":157,"code":"(partial map-indexed (fn [k v] [v k]))","user":"608910a8e4b0ae75613dceed"},{"problem":157,"code":"(fn [col] (into [] (map vector col (range (count col)))))","user":"6065755ee4b069485764ddcc"},{"problem":157,"code":"#(map vector % [0 1 2 3])","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [x] (partition 2 (interleave x '(0 1 2 3 4))))","problem":157,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn [l] (map-indexed #(list %2 %1) l) )","problem":157,"user":"514b66f4e4b0bd81940b86cb"},{"problem":157,"code":"(fn [seq]\n   (map vector seq (range)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn idx\n  [a]\n  (reduce #(conj %1 [(get a %2) %2]) [] (range (count a))))","problem":157,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"#(reduce (fn[acc i](conj acc [i (count acc)])) [] %1)","problem":157,"user":"52bc6cb2e4b07a9af57922f5"},{"problem":157,"code":"(fn [s]\n  (map-indexed #(identity [%2 %1]) s))","user":"576a972ce4b0a07e8fc1811a"},{"problem":157,"code":"(fn [c] (loop [v c i 0 r []] (if (empty? v) r (recur (rest v) (inc i) (conj r [(first v) i])))))","user":"57addbcce4b0b8559636fca3"},{"problem":157,"code":"(fn [coll] (into [] (for [k coll] [k (.indexOf coll k)])))","user":"545bbaa4e4b01be26fd74656"},{"problem":157,"code":"(fn [x] (map-indexed (fn [i e] [e i]) x))","user":"5e08c3dde4b0978307768fc8"},{"code":"#(partition 2 (interleave % (range (count %))))","problem":157,"user":"4f725201e4b07046d9f4f02f"},{"code":"(partial map #(vector %2 %) (iterate inc 0))","problem":157,"user":"50ed4626e4b01236b1d4983c"},{"code":"(fn [t]\n  (partition 2 (interleave t (range))))","problem":157,"user":"510b704ee4b078ea71921100"},{"code":"#(reverse (zipmap % (range)))","problem":157,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":157,"code":"(fn\n    [s]\n    (loop\n        [i 0 r '[]]\n        (if (= i (count s))\n            r\n            (recur (inc i) (conj r [(nth s i) i]))\n        )\n    )\n    )","user":"6074f5ede4b069485764de52"},{"problem":157,"code":"(fn [coll]\n  (partition 2 (interleave coll (range))))","user":"53c126fce4b00fb29b22125b"},{"problem":157,"code":"(fn [s] (into [] (map vector s (range (count s)))))","user":"573c813be4b0cd1946bd10c5"},{"problem":157,"code":"(fn getlist [xs] (reverse (reduce  #(conj %1 (list (nth xs %2) %2) ) '() (range (count xs)))))","user":"5e46dd71e4b043cd24807a25"},{"problem":157,"code":"(fn [l] (map-indexed #(vector %2 %1) l))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [coll]\n  (map-indexed\n    (fn [a b] [b a])\n    coll))","problem":157,"user":"5014754de4b094324338f8e5"},{"code":"#(partition 2 (interleave % (range)))","problem":157,"user":"4e9fd521535d7eef3080729a"},{"problem":157,"code":"(fn [v]\n  (map #(vector %1 %2) v (range)))","user":"531571ece4b08068f379ed27"},{"problem":157,"code":"#(reverse (vec (zipmap % (range (count %)))))","user":"55c3f19de4b0e31453f64991"},{"code":"(fn [l]\n  ((fn f [l c]\n     (if (empty? l)\n       nil\n     (cons [(first l) c] (f (rest l) (inc c)))))\n   l 0))","problem":157,"user":"52091d57e4b0e152394d76f0"},{"problem":157,"code":"(fn f\n  ([coll] (f coll []))\n  ([coll result]\n   (if (empty? coll)\n     result\n     (let [index        (count result)\n           [seq & seqs] coll]\n       (f seqs (conj result [seq index]))))\n   ))","user":"524a9556e4b05ef8e38e64b1"},{"problem":157,"code":"(fn iddx [arg]\n  (map\n    (fn [el1 el2]\n      (list el1 el2)\n    )\n    arg\n    (range)))","user":"52d6d490e4b09f7907dd1369"},{"problem":157,"code":"(fn [i] (map-indexed \n         (fn [value ke]\n                [ke value])i))","user":"59e62655e4b08badc2a0c568"},{"problem":157,"code":"#(loop [s %\n        res []\n        n 0]\n   (if (empty? s)\n     res\n     (recur (rest s) (conj res (vector (first s) n)) (+ n 1))))","user":"5bb5cd43e4b0a20761a23575"},{"problem":157,"code":"(fn [m] (map-indexed (fn [i v] [v i]) m))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":157,"code":"(fn [coll]\n   (map-indexed\n    (fn [i x]\n      [x i])\n    coll))","user":"5808ee16e4b0a837a8b30d16"},{"code":"#(map reverse (map-indexed list %))","problem":157,"user":"536c7470e4b0fc7073fd6e3e"},{"problem":157,"code":"(fn [xs]\n  (map-indexed (fn [i k] [k i]) xs))","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn index [s]\n  (map #(list %1 %2) s (range 0 (count s))))","problem":157,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [coll]\n       (map #(list %1 %2) coll (range)))","problem":157,"user":"4e89e939535d3e98b8023287"},{"problem":157,"code":"(fn indexer [s]\n  (into [] (map vector s (range))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [el] (map #(vector % (.indexOf el %)) el))","problem":157,"user":"4fa1aabee4b0dcca54ed6d61"},{"code":"(fn [coll] (map (fn [x y] [x y]) coll (range)))","problem":157,"user":"4f13047d535d64f60314642c"},{"problem":157,"code":"(fn [v]\n  (vec\n   (map (fn [a b] [a b]) v (iterate inc 0))))","user":"52860baae4b0239c8a67ae09"},{"problem":157,"code":"(fn [xs] (let [r (range (count xs))]\n           (partition 2 (interleave xs r))\n           ))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":157,"code":"(fn [coll]\n  (reduce\n    (fn [acc k] (conj acc [k (count acc)]))\n    [] coll))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":157,"code":"(fn\n  [lst]\n  (map-indexed (fn [index item] [item index]) lst))","user":"56df6498e4b0ca2494a095f8"},{"problem":157,"code":"(fn [coll] (for [x (range (count coll))] (list (nth coll x) x)))","user":"54a7d707e4b09f271ff37c9b"},{"problem":157,"code":"(fn [lst] \n  (map-indexed (fn [index item]\n                 (vector item index)\n                 ) lst)\n  )","user":"57f81045e4b0d3187e90090f"},{"problem":157,"code":"(fn index-sequence\n  [s]\n  (map-indexed (fn [index item] [item index]) s))","user":"5f3103aee4b0574c87022c24"},{"problem":157,"code":"#(loop [i % o [] c 0]\n  (if (empty? i)\n    o\n    (recur (rest i) (conj o [(first i) c]) (inc c))))","user":"5aa8f753e4b0d174b936c8d9"},{"problem":157,"code":"(fn [col]\n  (for [i (range (count col))]\n    (vector (nth col i) i)))","user":"558bb38fe4b0277789237631"},{"problem":157,"code":"reduce\n  \n  (fn [lis val]\n    (conj lis [val (count lis)])\n    \n    \n    )\n  []","user":"5f468d26e4b0955706451fc1"},{"problem":157,"code":"#(partition 2 (interleave % (range) ))","user":"4e44358f535dc968683fc4a8"},{"problem":157,"code":"(fn [x] (map-indexed #(reverse (list %1 %2)) x))","user":"4e8a170c535d3e98b802328f"},{"problem":157,"code":"(fn indexing\n  [seq]\n  (map-indexed (fn [index item] [item index]) seq))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [l] (keep-indexed #(do [%2 %1]) l))","problem":157,"user":"5392b849e4b0b51d73faaeb1"},{"problem":157,"code":"#(map vector%(range))","user":"6085edade4b0736b099e42fc"},{"code":"(fn [x] (partition 2 (interleave x (range 0 (count x))) ) )","problem":157,"user":"50cf2267e4b0e61f11ddcd8c"},{"code":"map-indexed #(list %2 %)","problem":157,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":157,"code":"(fn [v]\n(map #(vector %1 %2) v (range )))","user":"59dfb8dbe4b08badc2a0c4da"},{"problem":157,"code":"(fn [s] \n  (map-indexed #(list %2 %1) s)\n  )","user":"5ec3cdf7e4b08d0ec38692bc"},{"problem":157,"code":"(fn [x]\n  (map reverse (map-indexed vector x)))","user":"52cf1e25e4b07d0d72b2739c"},{"code":"(fn [X]\n  (vec\n  (for [n (range (count X))]\n    [(get X n) n])))","problem":157,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":157,"code":"(fn [arg] (map #(vector %1 %2) arg (range)))","user":"57011eb3e4b08d47c97781d1"},{"problem":157,"code":"(fn [e] (map #(vector %1 %2) e (range (count e))))","user":"54da9621e4b024c67c0cf756"},{"problem":157,"code":"(fn [x] ( map #( vector %1 %2) x (iterate inc 0)))","user":"53d63e6ce4b0e771c3025454"},{"code":"(fn [coll] (partition 2 (interleave coll (range))))","problem":157,"user":"50f0ec9ce4b0d527ce5b30df"},{"problem":157,"code":"(fn [lst]\n  (map\n   vector\n   lst\n   (range (count lst))\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":157,"code":"(fn [x]\n  (if (= (type (first x)) Long)\n    (map list x (iterate inc 0))\n    (vec (map vector x (iterate inc 0)))    \n    ))","user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":157,"code":"(fn indexing-sequences [seq1] ( map (fn [a b](vector a b)) seq1 (range (count seq1))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":157,"code":"(fn [xs] (for [[i x] (map vector (range) xs)]\n           [x i]))","user":"4ea03f70535d7eef308072a1"},{"problem":157,"code":"(fn\n  [s]\n  (map #( concat [%1] [%2] ) s (range (count s))))","user":"56019662e4b04bb52996e190"},{"problem":157,"code":"(fn [xs] (map-indexed #(list %2 %1) xs))","user":"5590ebb1e4b0277789237677"},{"problem":157,"code":"(fn indx\n\t[sq]\n\t(for [\tx (range (count sq))]\n\t\t[(nth sq x) x])\n\t)","user":"5545477fe4b0a04f79299531"},{"problem":157,"code":"(fn [col] (map-indexed (fn [x y] [y x]) col))","user":"5be96111e4b0f319e2d7ec70"},{"code":"(fn [xs]\n   (loop [acc []\n          s xs\n          idx 0]\n     (if (empty? s)\n       acc\n       (recur (conj acc [(first s) idx]) (rest s) (inc idx)))))","problem":157,"user":"50868795e4b004985b776e5e"},{"problem":157,"code":"(fn index-seq [coll] \n  (map-indexed (fn [i x] [x i]) coll))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":157,"code":"(fn index-seq [coll]\n  (map (fn [x y] [x y]) coll (range)))","user":"541096bde4b01498b1a719b2"},{"problem":157,"code":"(fn [vals]\n    (partition 2 (interleave vals (iterate inc 0))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":157,"code":"(fn [ls]\n  (map vector\n       ls\n       (range (count ls))))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":157,"code":"(fn [xs]\n  (map (fn [x i] [x i])\n       xs\n       (range)))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":157,"code":"(fn [x] (map #(vector %1 %2) x (range)))","user":"55205564e4b08d5046aa8a60"},{"problem":157,"code":"(fn [s]\n  (loop [s s id 0 res []]\n    (if-let [elm (first s)]\n    (recur (rest s) (inc id) (conj res [elm id]))\n      res)))","user":"5a75da49e4b0512ff01cdacf"},{"problem":157,"code":"(fn index-sequence [s]\n  (map vector s (range (count s))))","user":"57f6e666e4b0d3187e9008f2"},{"problem":157,"code":"(fn [x] (reduce #(into %1 [[%2 (count %1)]]) [] x))","user":"542baf7ce4b0dad94371f291"},{"problem":157,"code":"#(map-indexed (fn [index, item] [item index]) %)","user":"587ee260e4b052da650a6353"},{"problem":157,"code":"(fn [s] \n  (map-indexed #(vector %2 %) s))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn [s] (map vector s (range)))","problem":157,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [keys] (map-indexed (fn [a b] [b a]) keys))","problem":157,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn [coll] (reduce-kv #(conj %1 [%3 %2]) [] coll))","problem":157,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn index-seq [s]\n  (partition 2 (interleave s (range (count s)))))","problem":157,"user":"4ff355a1e4b0678c553fc34d"},{"problem":157,"code":"(fn [xs]\n    (map vector xs (range)))","user":"53c3397be4b00fb29b221279"},{"problem":157,"code":"(fn [xs]\n  (map (fn [x] [(nth xs x) x]) \n       (range (count xs))))","user":"54133900e4b01498b1a719de"},{"code":"map-indexed (fn [i el] [el i])","problem":157,"user":"51473a70e4b0d520409ed394"},{"code":"(fn [coll]\n   (map #(vec ( reverse %)) (map-indexed  vector coll)))","problem":157,"user":"51d9eb05e4b02ceefd947755"},{"code":"(fn [arg]\n(map vector arg (range (count arg))))","problem":157,"user":"50a173e4e4b08df8156e9e68"},{"problem":157,"code":"#(for [i (range 0 (count %))] [(% i) i])","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn [seq]\n  (map-indexed (fn [id val] (vector val id)) seq))","problem":157,"user":"4ecd1143535d23f036227702"},{"problem":157,"code":"(fn enumerate\n  [s]\n  (map (fn [a b] [a b]) s (range (+ (count s) 1))))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn [x] (partition 2 (interleave x (range))))","problem":157,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":157,"code":"#(->> \n      (interleave % (range))\n      (partition 2))","user":"5f548678e4b0a0bc16850a7e"},{"problem":157,"code":"(fn [my-vec]\n\t(map-indexed (fn [i v] [v i]) my-vec))","user":"5db98f39e4b010eb3c36cd53"},{"problem":157,"code":"(fn [seq]\n    (map (fn [item idx] [item idx]) seq (range)))","user":"554a75c9e4b0a04f79299575"},{"problem":157,"code":"(fn indexing [coll] (partition 2 (interleave coll (range (count coll)))))","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn [a] (map vector a (range)))","problem":157,"user":"4e74e119535d7a570dd295bc"},{"problem":157,"code":"(fn [sq] (loop [res [] \n                i 0\n                in sq\n                ]\n           (if (empty? in)\n             res\n             (recur (conj res [(first in) i]) (inc i) (rest in)))))","user":"4eadc217535d7eef30807321"},{"code":"(fn [xs] (partition 2 (interleave xs (range))))","problem":157,"user":"4f8c6bf6e4b02e764a0a519b"},{"code":"(fn [coll] (for [i (range (count coll))] [(nth coll i) i]))","problem":157,"user":"50d86fe2e4b01f0871336e67"},{"problem":157,"code":"#(loop [a %, r []] (if-not (empty? a) (recur (rest a) (conj r [(first a) (count r)])) r))","user":"5ae246b1e4b0837691e92c5d"},{"problem":157,"code":"(fn [coll]\n  (map #(vector %1 %2) coll (take (count coll) (range))))","user":"59b554cee4b05c620303ca0f"},{"code":"map-indexed (fn [n x] [x n])","problem":157,"user":"4ea41fc2535d7eef308072cb"},{"problem":157,"code":"(fn [l] ((fn id-seq [l n acc] (if (empty? l) acc (id-seq (rest l) (inc n) (conj acc [(first l) n])))) l 0 []))","user":"60109997e4b074f607df66b3"},{"problem":157,"code":"(fn [items]\n  (loop [remaining items\n         result []\n         index 0]\n    (if (empty? remaining)\n      result\n      (let [nxt (first remaining)\n            todo (rest remaining)]\n        (recur todo (conj result [nxt index]) (inc index))))))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn [l] (map-indexed #( list %2 %) l))","problem":157,"user":"50ef3e5de4b0a78662fa2652"},{"problem":157,"code":"(fn [coll]\n  (println (type coll))\n  (map vector coll (range 0 (- (count coll) 0))))","user":"536673a8e4b0243289761e76"},{"problem":157,"code":"(fn [xs] (map #(vector %2 %1) (iterate inc 0) xs))","user":"4f085a31535dcb61093f6c35"},{"code":"map-indexed #(vector %2 %)","problem":157,"user":"4f0c4518535d0136e6c2230b"},{"problem":157,"code":"(fn [coll] (map-indexed #(do [%2 %1]) coll))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":157,"code":"(fn[lst] (map-indexed (fn[i x] (list x i)) lst))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":157,"code":"(fn my-indexed\n  [s]\n  (map-indexed (comp reverse vector) s))","user":"59f44189e4b0966464fe6aab"},{"problem":157,"code":"(fn [coll]\n (map vector coll (range)))","user":"53bf9cfbe4b0c98a41f5cca4"},{"problem":157,"code":"(fn[coll]\n  (-> (map (fn [a b] [a b]) coll (range))\n      ))","user":"58dc5ceae4b0a4d5acaab69b"},{"problem":157,"code":"(fn [seq]\n\t(for [index (range (count seq))]\n    \t[(nth seq index) index]\n    )  \n)","user":"5991d2fae4b0866487ed0d68"},{"problem":157,"code":"(fn index-sequence [l] \n  (loop\n    [result nil\n     index 0\n     input l]\n    (if \n      (empty? input)\n      (reverse result)\n      (recur (conj result [(first input) index]) (inc index) (rest input))\n      \n     )\n    )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":157,"code":"(fn [col]\n\n  (map vector col (range))\n\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"code":"(fn[x]\n  (if(= x [:a :b :c]) [[:a 0] [:b 1] [:c 2]]\n  (if(= x [0 1 3]) '((0 0) (1 1) (3 2))\n  [[[:foo] 0] [{:bar :baz} 1]]\n)))","problem":157,"user":"4fe1279fe4b0dd6cd5ce3630"},{"problem":157,"code":"(fn\n  [x]\n  (loop [x x\n         ini 0\n         result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (inc ini) (conj result [(first x) ini])))))","user":"55b3c03ee4b01b9910ae2975"},{"code":"(fn [s]\n  (map-indexed (fn [idx e]\n                 [e idx])\n                  s))","problem":157,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":157,"code":"(fn [l] (map #(vector %1 %2) l (range)))","user":"542db41be4b0dad94371f2bb"},{"problem":157,"code":"(fn indexing\n  [coll]\n  (map vector coll (range)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [coll]\n  (let [calc-index (partial - (dec (count coll)))]\n    (loop [s coll\n           res ()]\n      (if (empty? s)\n        (reverse res)\n        (let [new-s (rest s)\n              value (first s)\n              index (calc-index (count new-s))]\n          (recur new-s (conj res (list value index))))))))","problem":157,"user":"5361a4f2e4b0243289761e47"},{"code":"#(map-indexed (fn [i n] [n i]) %)","problem":157,"user":"5106bc8ae4b01150e115ebec"},{"code":"(fn foo [lst]\n  (if (= 1 (count lst))\n      (list (list (first lst) 0))\n      (concat (foo (butlast lst))\n        (list \n          (list (last lst) (- (count lst) 1)))\n      )\n    )\n  )","problem":157,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":157,"code":"(fn [xs]\n  (map #(vector % %2) xs (take (count xs) (range))))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn [s]\n  (map #(vector (second %) (first %)) (map-indexed vector s)))","problem":157,"user":"51508905e4b098b221effc2d"},{"code":"(fn [s]\n  (->> (interleave s (range (count s)))\n       (partition 2)))","problem":157,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"#(reverse (into [] (zipmap %1 (range))))","problem":157,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":157,"code":"(fn [lst] (partition 2 (interleave lst (iterate inc 0))))","user":"50b19a91e4b03ea880433552"},{"problem":157,"code":"(fn idx [coll]\n  (mapv vector coll (range)))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn\r\n  [s]\r\n  (map (fn [e i] [e i]) s (range (count s)))\r\n  )","problem":157,"user":"4fee04a0e4b0678c553fc308"},{"problem":157,"code":"(fn index-seq\n  [coll]\n  (map #(vector %1 %2) coll (range)))","user":"4e586949535d8a8b8723a292"},{"problem":157,"code":"#(into '() (zipmap % (iterate inc 0)))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn [s]\n    (loop [s1 s ret [] index 0]\n      (if (empty? s1)\n        ret\n        (recur (rest s1) (conj ret [(first s1) index]) (inc index)))))","problem":157,"user":"51622fb8e4b009fba0926e3f"},{"code":"(fn number-this [x] (map vector x (range 0 (count x))))","problem":157,"user":"53388e2de4b0e30313ee6c9c"},{"code":"#(map list %1 (range (count %1)))","problem":157,"user":"51284226e4b03a34742b4308"},{"code":"(fn [v] (map #(vector %1 %2) v (range)))","problem":157,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn f [s]\n  (map #(vector %1 %2) s (iterate inc 0)))","problem":157,"user":"501b1efee4b0b12d9c5f4d82"},{"problem":157,"code":"(fn index-seq\n  [seq]\n  (loop [[h & t] seq\n         i 0\n         accum []]\n    (let [new-accum (conj accum [h i])]\n      (if (nil? t)\n          new-accum\n          (recur t (+ 1 i) new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":157,"code":"(fn [coll]\n  (into [] (reverse (zipmap coll (range (count coll))))))","user":"4daeff24edd6309eace4d16e"},{"problem":157,"code":"(fn [c]\n  (map-indexed #(conj (empty c) %2 %) c))","user":"5405885ee4b0addc1aec6668"},{"problem":157,"code":"(fn [items]\n  (reduce (fn [l x]\n            (conj l [x (count l)])) [] items))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":157,"code":"(fn [xs]\n  (map-indexed (fn [a b] [b a]) xs))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":157,"code":"(fn mapi [a]\n  (map-indexed (fn [idx item] [item idx]) a))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn [x] (map #(list %1 %2) x (iterate inc 0)))","problem":157,"user":"4dcc5aff535d5973398f9293"},{"problem":157,"code":"(fn [col] (map #(list %1 %2) col (range (count col))))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":157,"code":"(fn [s]\n   (partition 2 (interleave s (range))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":157,"code":"(fn [x] (map vector x\n     (range)))","user":"5e70c16de4b085ba37836dae"},{"problem":157,"code":"keep-indexed #(identity [%2 %1])","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn index-seq [s]\r\n  (map-indexed #(vector %2 %) s))","problem":157,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":157,"code":"(fn [coll]\n  (partition 2 (interleave\n                 coll\n                 (range))))","user":"5cfabf53e4b0cc9c91588148"},{"problem":157,"code":"#(loop [res [] i 0 size (count %1) s %1]\n             (if (= size i)\n               res\n               (recur (conj res [(nth s i) i]) (inc i) size s)))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":157,"code":"(fn [input] (map-indexed (fn [idx i] [i idx]) input))","user":"54f09599e4b024c67c0cf89d"},{"problem":157,"code":"(fn [xs] (map list xs (range (count xs))))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(let\n  [zip (fn zip [xs ys]\n         (if (or (empty? xs) (empty? ys))\n           []\n           (cons [(first xs) (first ys)] (zip (rest xs) (rest ys)))))\n   ]\n  (fn [xs] (zip xs (range (count xs)))))","problem":157,"user":"52d660eae4b09f7907dd1356"},{"problem":157,"code":"(fn indexing-seq [xs]\n    (into (empty xs) (map #(into (empty xs) [%1 %2]) xs (iterate inc 0))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"#(map (fn [x y] [x y]) % (range (count %)))","problem":157,"user":"519291c1e4b08962174cf74b"},{"problem":157,"code":"(fn indexing-seqs\n  [sq]\n  (map #(vector % (.indexOf sq %)) sq))","user":"5398d042e4b0b51d73faaf00"},{"problem":157,"code":"(fn indexSeq\n  [lista]\n    (map-indexed #(vector %2 %1) lista))\n;(fn a [lst]\n;  (loop [r lst b 0 res ()]\n;    (if (empty? r) (reverse res)\n;      (recur (rest r) (inc b) (cons (vector (first r) b) res)))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":157,"code":"(fn fun [coll]\n  (partition 2 (interleave coll (range)))\n)","user":"5da20e73e4b000c986472be1"},{"problem":157,"code":"(fn [s] (loop [s s i 0 result []] (if (empty? s) result (recur (rest s) (inc i) (conj result [(first s) i])))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":157,"code":"(fn index-seq \n  ([a-seq] (index-seq a-seq 0 []))\n  ([a-seq idx new-seq]\n   (if (empty? a-seq)\n     new-seq\n     (recur (rest a-seq) (inc idx) (conj new-seq [(first a-seq) idx])))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [xs]\n  (reduce \n    #(conj %1 [%2 (count %1)]) \n    []\n    xs))","problem":157,"user":"4dbe19fe535d020aff1edf59"},{"code":"map-indexed #(do [%2 %])","problem":157,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":157,"code":"(fn indexing\n  [coll]\n  (loop [idx 0\n         r coll\n         out []]\n    (if (seq r)\n      (recur (inc idx) (rest r) (conj out [(first r) idx]))\n      out)))","user":"5c411df3e4b08cd430848ebf"},{"problem":157,"code":"(fn [s]\n  (loop [i 0\n         indexed-seq []]\n    (if (= i (count s))\n      indexed-seq\n      (recur (inc i) (conj indexed-seq [(nth s i) i])))))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn [s]\n  (map-indexed (fn [idx e] [e idx]) s))","problem":157,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":157,"code":"(fn indexing [s] (\n  map #(vector %1 %2) s (range (count s)) ))","user":"558bdcefe4b0277789237633"},{"code":"(fn [x] ( partition 2 (interleave x (range) )))","problem":157,"user":"5296008fe4b02ebb4ef7502a"},{"problem":157,"code":"(fn [col] (map vector col (range)))","user":"56877fcbe4b0dcc4269f405e"},{"problem":157,"code":"#(map-indexed (fn [index element] [element index])%)","user":"505d1b01e4b0e6aca564be04"},{"problem":157,"code":"#(map vector  %1 (range (count %1)) )","user":"5da98129e4b000c986472c33"},{"code":"(fn [x] (map #(identity %&) x (range)))","problem":157,"user":"4ff6aea8e4b0678c553fc381"},{"problem":157,"code":"(fn[v](map vector v (range)))","user":"6001460ce4b074f607df6611"},{"code":"(fn [l] (map #(vector % %2) l (range)))","problem":157,"user":"4ec07699535dfed6da9c6da2"},{"problem":157,"code":"(fn [ip]\n  (map reverse (map-indexed vector ip)))","user":"5d8c8175e4b0915913b1d3e1"},{"code":"(fn [s]\n  (map-indexed #(vector %2 %1) s))","problem":157,"user":"4facd2fae4b081705acca22f"},{"problem":157,"code":"(fn [hashes]\n  (let [c (count hashes)] \n  (for [k hashes \n        :let [i (.indexOf hashes k)] \n        :while (> c i) ] \n    [k i])\n  ))","user":"560d4994e4b05f002753df3c"},{"code":"#(map (fn [i] [(% i) i]) (range (count %)))","problem":157,"user":"502940a9e4b061fd216be4b8"},{"problem":157,"code":"(fn [s]\n      (partition 2 (interleave s (range (count s))) ))","user":"52bf0116e4b07a9af5792328"},{"code":"(fn [s]\n  (loop [l s i 0 ans []]\n    (if (empty? l)\n      ans\n      (recur (rest l) (inc i) (concat ans [[(first l) i]])))))","problem":157,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn [s]\n  (map #(vector %1 %2) s (range)))","problem":157,"user":"53527551e4b084c2834f4af0"},{"problem":157,"code":"(fn my-index[lst1]\n  (vec (map-indexed #(vector %2 %) lst1)))","user":"59dd387be4b0a0ac046f2502"},{"problem":157,"code":"#(loop [v %\n        i 0\n        s []]\n   (if (empty? v) s\n     (recur (rest v) (inc i) (conj s [(first v) i]))))","user":"55e732c5e4b050e68259b492"},{"code":"(fn [xs]\n  (map vector xs (range (count xs))))","problem":157,"user":"538c3424e4b0b51d73faae58"},{"problem":157,"code":"(partial map \n         (comp reverse vector) \n         (range))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":157,"code":"(fn im [seq]\n  (partition 2 (interleave seq (range (count seq)))))","user":"57af41bce4b0fbc9809a2731"},{"code":"reduce #(conj %1 [%2 (count %1)]) []","problem":157,"user":"4fff289ae4b0678c553fc3fd"},{"problem":157,"code":"(fn [s] (vec (map (fn [[k v]] (vector v k)) (map-indexed vector s))))","user":"5a66f358e4b0512ff01cd9d5"},{"problem":157,"code":"#(->> %\n     (map-indexed vector)\n     (map reverse))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [c] (for [ i (range (count c))] [(nth c i ) i]))","problem":157,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [data] (loop [d data\n                  i 0\n                  x []]\n             (if (empty? d)\n               x\n               (recur (rest d) (inc i) (conj x [(first d) i])))))","problem":157,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":157,"code":"#(keep-indexed (fn [ix el] [el ix]) %)","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn [as] (map-indexed #(vector %2 %) as))","problem":157,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn index-e\n  [x]\n  (map #(list % (.indexOf x %)) x))","problem":157,"user":"52084f75e4b01ce6bbf31dde"},{"code":"map-indexed #(vec [%2 %])","problem":157,"user":"4daeabf6edd6309eace4d15c"},{"problem":157,"code":"(fn [coll]\n  (for [x coll]\n    [x (.indexOf coll x)]))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":157,"code":"map-indexed (fn [idx x] [x idx])","user":"5286a2a9e4b0239c8a67ae1e"},{"problem":157,"code":"(fn indexing-sequences [xs] \n  (map vector xs (range (count xs))))","user":"52616198e4b03e8d9a4a705e"},{"problem":157,"code":"(fn [coll]\n        (second (reduce (fn [[i c] n] [(inc i) (conj c [n i])]) [0 []] coll)))","user":"5c8005cee4b0c8042a70ce0a"},{"problem":157,"code":"#(reduce (fn [a x] (conj a [x (count a)])) [] %)","user":"55495318e4b0a04f79299566"},{"problem":157,"code":"(fn index-seq\n  [xs]\n  (map #(list % %2) xs (take (count xs) (range))))","user":"5e7dc2d8e4b085ba37836e2f"},{"code":"(fn indexed [s] \n  (map-indexed (fn [i x] [x i]) s))","problem":157,"user":"5201ff99e4b0b2e020a18f26"},{"problem":157,"code":"(fn [xs]\n  (map #(vector %1 %2) xs (iterate inc 0)))","user":"4eb0a757535d7eef3080733d"},{"problem":157,"code":"(fn [s]\n    (map (fn [val index] [val index]) s (range))\n    \n    \n    \n    )","user":"55ba70f9e4b01b9910ae29d4"},{"problem":157,"code":"(fn [v] \n   (reduce (fn [p e] \n             (conj p [(nth v e) e])) \n           [] \n           (range (count v))))","user":"58a9e872e4b01a0c0b232973"},{"problem":157,"code":"#(map vector % (range))\n\n  \n\n;;; para cada elemento que enncontramos, vamos a añadir el elemento y su numero en el range","user":"6075c214e4b069485764de5b"},{"problem":157,"code":"(fn [sq]\n   (loop [sq sq index 0 result []]\n     (if (empty? sq)\n       result\n       (recur (rest sq) (inc index) (conj result (conj [] (first sq) index))))))","user":"602b90c1e4b0d5df2af22266"},{"problem":157,"code":"#(map-indexed (fn[index item] [item index]) %)","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":157,"code":"(fn [lst]\n  (map reverse (map-indexed vector lst)))","user":"55ede35ce4b0121d4835fde1"},{"problem":157,"code":"(fn tt [coll] (map (fn [a b] [a b]) coll (range))) \n;; noisesmiths is better with map-indexed","user":"599342efe4b0b211ea3aaab0"},{"code":"#(partition 2(interleave % (iterate inc 0)))","problem":157,"user":"520cb8c4e4b0b022ef140c9a"},{"problem":157,"code":"(fn seqs-1 [coll]\n  (let [one #(vector %1 %2)\n        two (map one\n                 \n                 \n                 coll (range))]\n    two))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [coll] (map #(vector % (.indexOf coll %)) coll))","problem":157,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [s]\n  (partition 2 2 (interleave s (range))))","problem":157,"user":"50435689e4b034ff00315d21"},{"code":"#(for [c (range 0 (count %))]\n             [(get % c) c])","problem":157,"user":"511b810ce4b07ab9ec456182"},{"problem":157,"code":"(fn [x] (map (fn [a b] [a b]) x (range)))","user":"5374adc3e4b06d7f452d9e27"},{"problem":157,"code":"#(map (fn[x y] [x y]) % (range (count %)))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":157,"code":"(fn [xs] (into [] (map reverse (map-indexed vector xs))))","user":"5fab003de4b08cb800c85ad1"},{"problem":157,"code":"(fn [coll] (for [c coll] [c (.indexOf coll c)]))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":157,"code":"#(vec (map vector % (range 10)))","user":"58173722e4b0c0e9c07b838a"},{"code":"map-indexed (comp reverse list)","problem":157,"user":"4eb298c1535d7eef3080734b"},{"problem":157,"code":"(fn [a] (map-indexed #(identity [%2 %]) a))","user":"541ddadbe4b01498b1a71a84"},{"problem":157,"code":"(fn index-vec [coll]\n  (let [element-count (count coll)\n        index-range (range 0 element-count)]\n    (map vector coll index-range)))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [ks]\n  \n  (reduce #(conj %1 [(nth ks %2) %2]) [] (range (count ks)))\n  )","problem":157,"user":"51eca2ace4b069f463c22cd0"},{"problem":157,"code":"(fn [coll]\n   (map #(vector %1 %2) coll (range (count coll))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":157,"code":";#(for [c (range(count %))] \n ;    [(nth % c) c])\n \n#(map vector % (range))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":157,"code":"#(loop [c 0 a % o []]\n   (if (empty? a) o\n     (recur (inc c) (rest a) (conj o [(first a) c]))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn [s1]\n  (map (fn [a b] [a b]) s1 (range)))","problem":157,"user":"52c81954e4b0c2d177d6212e"},{"code":"#(loop [xs % ys (range) r []]\n   (if (empty? xs)\n     r\n     (recur (rest xs) (rest ys) (conj r [(first xs) (first ys)]))))","problem":157,"user":"53244c9de4b09d4e7a9b54db"},{"problem":157,"code":"(fn [y]\n  (map (fn [key item] [item key]) (range (count y)) y)\n)","user":"56152a26e4b05f002753dfc1"},{"problem":157,"code":"(fn index-seqs [l]\n  (loop [c 0\n         l l\n         resp []]\n    (if (= l [])\n      resp\n      (recur (inc c) (rest l) (conj resp [(first l) c])))))","user":"574f1c24e4b02ea114799255"},{"problem":157,"code":"(fn [x] (map #(list % %2) x (range)))","user":"5562f08ae4b0c656e3ff17df"},{"problem":157,"code":"(partial map-indexed (fn [a b] [b a]))","user":"53d78b64e4b0e771c3025466"},{"code":"#(reverse (vec (zipmap % (range))))","problem":157,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":157,"code":"#(map list % '(0 1 2))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":157,"code":"(fn foo\n\n  [list]\n  (for [x  list\n        y (range (count list))\n        :when (= x (get list y))]\n    [x y] )\n  )","user":"598d0dc3e4b02b9968b84d18"},{"problem":157,"code":"(fn [n]\n  (map #(vector %1 %2) n (range)))","user":"5a99b87ee4b0d174b936c7af"},{"code":"#(sort-by last (clojure.set/map-invert (map-indexed vector %)))","problem":157,"user":"532c9dc9e4b019098a6f8b30"},{"problem":157,"code":"(fn [s] \n  (loop [acc [] c 0 s s]\n    (if-not (empty? s)\n      (recur (cons [(first s) c] acc) (inc c) (rest s))\n      (reverse acc))))","user":"5385e633e4b06839e8705f08"},{"code":"(fn [s] (map #(seq [%1 %2]) s (range)))","problem":157,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(fn [xs]\n  (map list xs (range (count xs))))","problem":157,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":157,"code":"(fn [v] (into [] (map vector v (iterate inc 0))))","user":"54c9571ee4b045293a27f66b"},{"problem":157,"code":"(fn sol [l] (map-indexed (fn [idx itm] [itm idx]) l))","user":"54857657e4b0e286459a11ac"},{"code":"(partial map #(vector %2 %1) (range))","problem":157,"user":"4e6fa38b535d5021c1a89622"},{"code":"#(for [i (range (count %))]\n   [(nth % i) i])","problem":157,"user":"5102489de4b00c483ae176f6"},{"problem":157,"code":"#(map vector % (range))\n;;(defn add [x] (loop [i 0 acc []]\n ;;               (if (> i (- (count x) 1))\n              ;;    acc\n                 ;; (recur (inc i) (conj acc (conj (vec (list (get x i))) i))))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":157,"code":"(fn [coll] (map vector coll (range (count coll))))","user":"5227eacee4b0186687e23a5e"},{"problem":157,"code":"(fn [lst]\n  (vec (map #(vec (reverse %)) (map-indexed vector lst))))","user":"57f81549e4b0d3187e900918"},{"problem":157,"code":"(fn [x]\n  (loop [i 0 s []]\n    (if (= i (count x))\n      s\n      (recur (inc i) (conj s [(nth x i) i])))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":157,"code":"#(map\n(fn [v i] (vector v i))\n%\n(range))","user":"56f53c61e4b046a417f9206d"},{"problem":157,"code":"(fn [items] (loop [index 0 result []] (if (= index (count items)) result (recur (inc index) (conj result [(nth items index) index])))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn [vc] (map vector vc (iterate inc 0)))","problem":157,"user":"531541a0e4b08068f379ed25"},{"code":"(fn[l]\n   (map vector l (range)))","problem":157,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":157,"code":"(fn [s]\n   (map-indexed #(reverse %&) s))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":157,"code":"#(->> (interleave % (range (count %))) (partition 2))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":157,"code":"#(map vector % (range(count %)))","user":"587294f0e4b01531a375ea1e"},{"problem":157,"code":"(fn in-seq [s]\n  (map-indexed (fn [index element] [element index]) s))","user":"607dd962e4b03d835a6eaed2"},{"code":"(fn [lst]\n  (map vector lst (range (count lst))))","problem":157,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn[s] (map-indexed #(vector %2 %1) s))","problem":157,"user":"4ec64981535d6d7199dd36c7"},{"problem":157,"code":"(fn [xs]\n  (drop 1\n    (reductions (fn [[prev idx] v] [v (inc idx)]) [nil -1] xs)))","user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn indexing-sequences [s]\n  (map vector s (range)))","problem":157,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":157,"code":"(fn [a] (reduce #(conj %1 (vector %2 (.size %1))) [] a))","user":"54908cc1e4b0b312c081ff32"},{"problem":157,"code":"(fn [c] (map #(vector %1 %2) c (take (count c) (range)) ))","user":"51bf0ccee4b013aa0d74b811"},{"code":"(fn [coll]\n  (map (fn [x]\n         (vec (reverse x))) (map-indexed vector coll)))","problem":157,"user":"4ff505c8e4b0678c553fc364"},{"code":"(fn [c]\n  (partition 2 (interleave c (range (count c)))))","problem":157,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn [s]\n           (reverse (vec (zipmap s (range (count s))))))","problem":157,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [xs]\n  (partition 2 (interleave xs (range))))","problem":157,"user":"4f2e0369e4b0d6649770a064"},{"problem":157,"code":"(fn [se] (map-indexed (fn [ind elm] [elm ind]) se))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":157,"code":"(fn [l]\n  (map-indexed\n   (fn [i e]\n     [e i])\n   l))","user":"5881d1c2e4b0f1effa3b7644"},{"code":"#(->> (range) (interleave %) (partition 2))","problem":157,"user":"4fc93728e4b0ee37620e1844"},{"problem":157,"code":"(fn [s]\n  (map #(vector %1 %2)\n       s\n       (take (count s) (iterate inc 0))))","user":"5829d588e4b051871117bf4a"},{"problem":157,"code":"(fn test-2 [s]\n  (map-indexed (fn [i v] [v i]) s))","user":"5fb68f09e4b08cb800c85b58"},{"problem":157,"code":"map-indexed (fn [ind el] [el ind])","user":"5703a557e4b08d47c97781f4"},{"problem":157,"code":"(fn index-seq\n  [data]\n  (loop [result [] i 0 d data]\n    (if (empty? d)\n      result\n      (recur (conj result [(first d) i]) (inc i) (rest d)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":157,"code":"(fn [xs]\n   (reduce (fn [ys x]\n             (conj ys [x (count ys)]))\n           []\n           xs))","user":"52281e1ee4b0186687e23a69"},{"problem":157,"code":"#(for [ix (iterate inc 0)\n       :let [x (get % ix)]\n       :while x]\n   [x ix])","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [coll] (map-indexed #(list %2 %) coll))","problem":157,"user":"519b7d76e4b02a926d9a436e"},{"problem":157,"code":"(fn idxpair [lst]\n  (loop [idx 0\n         acc []\n         lst lst]\n    (if (empty? lst)\n      acc\n      (recur (inc idx) (conj acc (vector (first lst) idx)) (rest lst))\n     )\n   )\n )","user":"57cf03c0e4b00451144b04f9"},{"code":"(fn p157 [coll]\n  (map vector coll (range)))","problem":157,"user":"4daec9dcedd6309eace4d15f"},{"problem":157,"code":"(fn [coll]\n  (loop [result [] count 0 coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj result [(first coll) count])\n              (inc count)\n              (rest coll)))))","user":"5896735fe4b00487982d529d"},{"problem":157,"code":"#(into [] (map vec (partition 2  (interleave %1 (range (count %1))))))","user":"4e7e241a535db169f9c79705"},{"problem":157,"code":"(fn [xs]\n  (reduce #(conj %1 [%2 (count %1)]) [] xs))","user":"570794d8e4b0b0fb43fd068b"},{"problem":157,"code":"(fn [m]\n  (map-indexed #(list %2 %1) m))","user":"534bfc71e4b084c2834f4a88"},{"problem":157,"code":"#(map (fn [& a] a) % (range))","user":"540d0087e4b0addc1aec670b"},{"code":"(fn [lat] (reduce (fn [la a] (conj la [a (count la)])) [] lat))","problem":157,"user":"5125029de4b0ce9225d2ed3e"},{"problem":157,"code":"(fn [coll] (map-indexed (fn [id item] [item id]) coll))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":157,"code":"(fn [x] (map list x (range)))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [coll]\n  (map #(vector (nth coll %) %) (range (count coll))))","problem":157,"user":"52a55adee4b0c58976d9abe7"},{"problem":157,"code":"(fn [col]\n        (map #(conj [] %1 %2)  col (iterate inc 0)))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn [ind]\n  (map list ind (range)))","problem":157,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":157,"code":"(fn idx-seq [coll]\n  (map (fn [a b] [a b]) \n       coll \n       (iterate inc 0)))","user":"558ffb4be4b0277789237667"},{"problem":157,"code":"(fn [arg1]\n(cond\n(and (= arg1 [:a :b :c])) [[:a 0] [:b 1] [:c 2]]\n(and (= arg1 [0 1 3])) (quote ((0 0) (1 1) (3 2)))\n(and (= arg1 [[:foo] {:bar :baz}])) [[[:foo] 0] [{:bar :baz} 1]]\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":157,"code":"(fn\n  [a]\n  (let [l (map-indexed vector a)\n        index (map #(first %1) l)\n        data (map #(second %1) l)]\n    (map vector data index)))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":157,"code":"map-indexed (fn [idx elt] [elt idx])","user":"52fe31d5e4b047fd55837038"},{"problem":157,"code":"(fn [a] (into (empty a) (map-indexed #(vector %2 %1) a)))","user":"56ebe773e4b04a395b9a042a"},{"code":"(fn [a]\n  (reduce #(assoc  % (.indexOf a %2) (vector %2 (.indexOf a %2)))\n           [] a  ))","problem":157,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":157,"code":"(fn [sq]\n  (map #(vector %1 %2) sq (range (count sq))))","user":"58ca613de4b021aa9917edb7"},{"code":"#(loop [sequence %\n         index 0\n         indexed-seq []]\n    (if (empty? sequence)\n      indexed-seq\n      (recur (rest sequence) (inc index) (conj indexed-seq [(first sequence) index]))))","problem":157,"user":"523288fee4b035af41902a88"},{"problem":157,"code":"(fn index\n  [s]\n  (map vector s (range)))","user":"57f81534e4b0d3187e900915"},{"code":"(fn n [m]\n  (map #(conj [] %1 %2) m (range (count m))))","problem":157,"user":"4fe97adde4b0547ebccb245e"},{"code":"map-indexed (fn [idx elem] [elem idx])","problem":157,"user":"4fa2fa5ee4b081705acca186"},{"problem":157,"code":"map-indexed  #(vector %2 %1)","user":"57fc5e42e4b0d3187e900997"},{"problem":157,"code":"(fn [coll]\n  (map (fn [x y] [x y]) coll (iterate inc 0)))","user":"53ae0c50e4b047364c044471"},{"problem":157,"code":"(fn [coll]\n  (apply map vector [coll (range (count coll))] ))","user":"57344edbe4b0cd1946bd1008"},{"code":"(fn app\n  ([s] (app (rest s) [[(first s) 0]] ))\n  ([s m]  (if (> (count s) 0)\n    (app (rest s) (conj m [(first s) (count m)]))\n    m\n  ))\n)","problem":157,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn [coll]\n  (map-indexed\n    (fn [i x]\n      [x i]) coll))","problem":157,"user":"51d08d67e4b067c365486351"},{"code":"map-indexed\n (comp reverse list)","problem":157,"user":"51f9527fe4b09be9c177e549"},{"problem":157,"code":"(fn make-index [s]\n  (map vector s (range (count s))))","user":"557e56aae4b05c286339e0d5"},{"problem":157,"code":"(let [ do-idx* (fn do-idx* [acc idx items] (let [[head & tail] items] (if (nil? head) acc\n                                                           (cons [head idx] (do-idx* acc (inc idx) tail))\n                                                           )))\n     do-idx (fn do-idx [items] (do-idx* [] 0 items))]\n     do-idx)","user":"5f763c78e4b02876ed9fd0b0"},{"code":"(fn [a] (map vector a (iterate inc 0)))","problem":157,"user":"4dd0e8f7535da60f04a96e57"},{"problem":157,"code":";(fn [x]\n;  (let [n (count x)\n;        indx (range n)]\n;    (partition 2 (interleave x indx))))\n;Elegant solution\n#(map vector % (range))","user":"5835bc73e4b089d5ab817ce9"},{"problem":157,"code":"(fn \n    [lst]\n  (for [ i (map-indexed vector lst)] (reverse i)))","user":"59deba46e4b01968742fed7f"},{"code":"(fn __ [s]\n  (map-indexed (fn [idx itm] [itm idx]) s))","problem":157,"user":"4ec9549d535d6d7199dd36fe"},{"problem":157,"code":"(fn\n  [coll]\n  (map list coll (range 0 (count coll))))","user":"5ac35d00e4b0e27600da7712"},{"problem":157,"code":"#(for [i (range (count %))] (conj [(nth % i)] i))","user":"59692530e4b069c0a1a197e4"},{"problem":157,"code":"#(loop [i 0 c % r '()]\n   (if (empty? c)\n     (into (empty %) (reverse r))\n     (recur (inc i) (rest c) (cons [(first c) i] r))))","user":"57b39fbee4b0fbc9809a2783"},{"problem":157,"code":"(fn [vals] (map (fn [a b] [a b]) vals (range)))","user":"50f53694e4b057d4c52de881"},{"problem":157,"code":"reduce #(conj % (vector %2 (count %))) []","user":"5da4fc6be4b000c986472bff"},{"problem":157,"code":"(fn [lst]\n  (map list lst (iterate #(inc %) 0)))","user":"525cc912e4b0cb4875a45d48"},{"problem":157,"code":"#(map-indexed (fn [k v] (list v k)) %)","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn [s]\n   (map #(list %1 %2) s (range (count s))))","problem":157,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":157,"code":"(fn [s]\n           (map #(vec %&) s (range)))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"#(map-indexed (comp reverse vector) % )","problem":157,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [coll]\n  (keep-indexed (fn [idx val] [val idx]) coll))","problem":157,"user":"4e949d18535dbda64a6f6b15"},{"problem":157,"code":"(fn [xs]\n  (map-indexed (fn [index x] [x index]) xs)\n)","user":"51f09f3de4b0274c496158d7"},{"problem":157,"code":"(fn [x]\n  (map #(vector %1 %2) x (range (count x))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn [x]\n  (apply map vector [x (range)]))","problem":157,"user":"5294c95fe4b02ebb4ef75013"},{"problem":157,"code":"#(map vector\n      %1 (range (count %1)))","user":"55079e55e4b021ccfedb96aa"},{"code":"(fn [v] (map #(conj [] % %2) v (range 0 (count v))))","problem":157,"user":"505d4b21e4b0e6aca564be07"},{"problem":157,"code":";#(map list % (iterate inc 0))\n\nmap-indexed #(list %2 %1)","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":157,"code":"(fn [xs] (first (reduce #(conj [] (conj (first %) (conj [] %2 (last %))) (inc (last %))) [[] 0] xs)))","user":"54ab502fe4b09f271ff37cc4"},{"problem":157,"code":"(fn\n    [xs]\n    (map\n      (fn [x i]\n        [x i]\n      )\n      xs\n      (range (count xs))\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":157,"code":"(fn [c] (map vector c (range)))","user":"5bb25684e4b0a20761a2350d"},{"problem":157,"code":"(fn [s]\n    (for [i (range (count s))]\n      [(nth s i) i]))","user":"5501a1e1e4b07d26eda61d75"},{"problem":157,"code":"(fn [l]\n  (map (fn [x y] [x y]) l (range)) \n)","user":"562add6de4b00e49c7cb4834"},{"problem":157,"code":"#(map-indexed (fn [idx item] [item idx]) %1)","user":"5ec82b11e4b08d0ec38692e6"},{"code":"(fn [c] (reduce-kv (fn [a i x] (conj a [x i])) [] c))","problem":157,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [s] (map-indexed (fn [i e] [e i]) s))","problem":157,"user":"52bc6f5ee4b07a9af57922f6"},{"code":"map-indexed #(identity [%2 %1])","problem":157,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":157,"code":"(fn [col]\n    (map-indexed (fn [idx itm] [itm idx]) col ))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":157,"code":"#(map vector %1 '(0 1 2))","user":"580d7e53e4b0849f6811b73e"},{"problem":157,"code":"(fn [s]\n  (loop [s s\n         i 0\n         acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc i) (conj acc (list (first s) i)))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":157,"code":"(partial  map-indexed (fn [i k] [k i]))","user":"55afe57ae4b002ce9d5cbc1c"},{"problem":157,"code":"(fn [coll]\n  (let [indexes (range 0 (count coll))]\n    (map (fn [[a b]] (vector a b))\n         (partition-all 2 (interleave coll indexes))\n         )\n    )\n  )","user":"60752ef6e4b069485764de55"},{"problem":157,"code":"(fn [col]\n  (map-indexed (fn [idx itm] [itm idx]) col)\n  \n  )","user":"58bc6a88e4b0888cdc949d16"},{"problem":157,"code":"(fn [s]\n  (for [x (range (count s))]\n    (list (nth s x) x)))","user":"54651faee4b01be26fd746d6"},{"code":"(fn [s] (map vector s (iterate inc 0)))","problem":157,"user":"53070615e4b02e821686979e"},{"problem":157,"code":"(fn idx [items]\n  ((fn iter [remain index] \n     (if (empty? remain) \n       nil \n       (cons [(first remain) index] (iter (rest remain) (+ index 1))))) items 0))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":157,"code":"(fn [n]\n  (let [cnt (count n)]\n    (map vector n (range cnt))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":157,"code":"(fn a [lst](map #(vector %1 %2) lst (range 0 (count lst))))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":157,"code":"(fn ind[coll](loop[coll coll\n                     ret []\n                     n 0]\n                 (cond\n                   (empty? coll) ret\n                   :else (recur (rest coll)\n                                (conj ret [(first coll) n])\n                                (inc n)\n                                ))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":157,"code":"(fn indexseq [pseq]\n  (map-indexed #(vector %2 %1) pseq))","user":"60606490e4b03746e80ebf67"},{"problem":157,"code":"map-indexed (partial conj ())","user":"5e2549c8e4b05b4b0151615f"},{"problem":157,"code":"(fn [v] (map-indexed (fn [idx itm] (vector itm idx)) v))","user":"55934bebe4b0c79f6e1db93b"},{"code":"(fn [xs]\r\n             (map-indexed (fn [b a] [a b]) xs))","problem":157,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":157,"code":"(fn [inp]\n\n  (loop [inp inp\n         curInd 0\n         output []]\n    (if (empty? inp)\n      output\n      (recur (rest inp)\n             (inc curInd)\n             \n             (conj output  (conj [(first inp)] curInd))) \n      )\n    )\n  )","user":"56b7c32ee4b0982f16b37e48"},{"code":"(fn [xs] (map-indexed #(-> [%2 %1]) xs))","problem":157,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":157,"code":"(fn [coll]\n  (into () (zipmap coll (iterate inc 0))))","user":"564583f0e4b0284900eef607"},{"code":"(fn [v] (partition 2 (interleave v (range (count v)))))","problem":157,"user":"4e7ada51535db169f9c796ae"},{"problem":157,"code":"(fn f [s]\n  (->> (range (count s))\n       (map #(vector (s %) %))))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn index-sequence [s]\n  (loop [pairs []\n         left s\n         n 0]\n     (if (empty? left) pairs\n      (recur (conj pairs [(first left) n])\n             (rest left)\n             (inc n)))))","problem":157,"user":"4f036fb3535dcb61093f6ac8"},{"problem":157,"code":"map-indexed (fn [idx ivl] (vector ivl idx))","user":"52457931e4b08ba239308107"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn[idx itm] [itm idx]) coll))","user":"5ab276f2e4b073f1774425e6"},{"code":"#(vec (map vec (partition 2 (interleave % (range (count %))))))","problem":157,"user":"50733b31e4b0e3170b5a869a"},{"code":"#((fn topair [se n]\n  (if (empty? se)\n    []\n    (cons [(first se) n] (topair (rest se) (inc n))))) % 0)","problem":157,"user":"529ce629e4b04e0c58e87b6e"},{"problem":157,"code":"(fn [collection] (map-indexed #(vector %2 %1) collection))","user":"573102bbe4b0cd1946bd0fbb"},{"problem":157,"code":"#(->> (range (count %))\n      (map (fn [item] [(% item) item])))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":157,"code":"#(->> (interleave % (range 3)) (partition 2))","user":"4ed45563535d10e5ff6f52c9"},{"problem":157,"code":"(fn sk-fan-index [l]\n  (map-indexed\n    (fn [index item] [item index])\n    l))","user":"5884f377e4b0f1effa3b76a8"},{"problem":157,"code":"#(map (fn[v k][v k]) % (range (count %)))","user":"555c6344e4b0b056612e224c"},{"problem":157,"code":"#(map-indexed (fn [idx i] [i idx]) %)","user":"5ea970d1e4b00a66d4a951c6"},{"code":"#(keep-indexed (fn [index item] (vector item index)) %)","problem":157,"user":"4e964f4a535dbda64a6f6b42"},{"problem":157,"code":"(fn index-seq [coll]\n  (partition 2 (interleave coll (range 0 (count coll)))))","user":"54c3747de4b045293a27f60e"},{"code":"#(keep-indexed (fn [x y] [y x]) %)","problem":157,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [v]\n  (map #(vector %2 %1) (iterate inc 0) v))","problem":157,"user":"5028bce0e4b01614d1633ffb"},{"code":"#(map-indexed (fn [i x] (list x i)) %)","problem":157,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [vector]\n   (loop [v vector\n          res '()\n          i 0]\n     (cond\n      (empty? v) (reverse res)\n      :else (recur (rest v)\n                   (conj res (list (first v) i))\n                   (inc i)))))","problem":157,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":157,"code":"(fn enumerate [xs]\n  (partition 2 (interleave xs (range (count xs)))))","user":"54c8d4a8e4b045293a27f654"},{"problem":157,"code":"(fn [xs]\n    (map vector xs (iterate inc 0)))","user":"551a21ece4b091ff45eda993"},{"problem":157,"code":"(fn [coll]\n   (for [item coll\n         :let [index (.indexOf coll item)]]\n     [item index]))","user":"510a3cd4e4b06956752d35ad"},{"problem":157,"code":"#(map-indexed (fn [v i] [i v]) %)","user":"5657fed1e4b0f9d632dd84ae"},{"problem":157,"code":"map-indexed (fn [item idx] [idx item])","user":"51430fb2e4b0c172af7558ce"},{"problem":157,"code":"(fn\n  [s]\n  (reverse\n   (reduce #(conj %1 [%2 (count %1)])\n           nil\n           (seq s))))","user":"562fb774e4b0ab312c17ebd9"},{"problem":157,"code":"#(map (fn[x y](list x y)) % (range))","user":"4f32135ae4b0d6649770a08e"},{"problem":157,"code":"(fn [c] (map #(vector %1 %2) c (range (count c))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":157,"code":"(fn [a]\n (map-indexed (fn [k v] [v k]) a))","user":"5935151ee4b072a2710fd084"},{"code":"(fn [s] (map-indexed #(list %2 %1) s))","problem":157,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":157,"code":"(fn [s] (map-indexed (fn [i v] (vector v i)) s))","user":"58fb381ae4b0438e51c2cf71"},{"problem":157,"code":"(fn [s]\n  (loop [s1 [] n 0 s2 s]\n    (if (empty? s2)\n      s1\n      (recur (conj s1 [(first s2) n]) (inc n) (rest s2)))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [l]\n  (letfn \n    [(process \n      [l n]\n      (if (empty? l) []\n    \t(concat [[(first l) n]] (process (rest l) (+ n 1)))))]\n    (process l 0)))","problem":157,"user":"52faec2ee4b047fd55837004"},{"code":"map #(list %2 %1) (range)","problem":157,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":157,"code":"(fn [coll]\n  (map (fn [[a b]] [b a]) (map-indexed vector coll)))","user":"5e12327ee4b099d064962fe5"},{"code":"#(map-indexed (fn [i x] (conj [x] i)) %)","problem":157,"user":"534e4a29e4b084c2834f4ab0"},{"problem":157,"code":"(fn p157-indexing [s]\n  (map #(vector % %2) s (range)))","user":"543b12cce4b032a45b86932a"},{"problem":157,"code":"(fn[seq1](map-indexed (fn[idx itm] [itm idx]) seq1))","user":"55757e81e4b05c286339e063"},{"problem":157,"code":"(fn [coll]\n  (map-indexed\n   (fn [i x]\n     [x i])\n   coll))","user":"554bd33ce4b0a04f7929959a"},{"problem":157,"code":"(fn [x] \n   (map-indexed (fn [i item] [item i]) x)\n   )","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":157,"code":"(fn [coll] (map #(vector %1 %2) coll (range (count coll)) ))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":157,"code":"(fn [coll]\n         (partition 2 (interleave coll (range (count coll))))\n         )","user":"552d9013e4b076ab5578f7ea"},{"problem":157,"code":"(fn [x]\n  (map-indexed (fn [idx itm] [itm idx]) x))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":157,"code":"(fn m [l]\n    (map #(vector %1 %2) l (range (count l))))","user":"603ae21de4b0d5df2af222fb"},{"problem":157,"code":"#(sort-by second (vec (zipmap % (range))))","user":"57644395e4b0994c1922fbf2"},{"problem":157,"code":"(fn [s]\n    (map (fn [val index] [val index]) s (range)))","user":"550c55d0e4b06e50f9beb14d"},{"problem":157,"code":"(fn [coll]\n   (let [c (range (count coll))]\n     (map (fn[x i] [x i]) coll c)))","user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [l] (map (comp vec list) l (iterate inc 0)))","problem":157,"user":"4fd8544be4b0dab7d829f390"},{"code":"reduce (fn [f1 f2] (conj f1 [f2 (inc (or (last (last f1)) -1))])) []","problem":157,"user":"4dbbdf86535d3f4042261ece"},{"problem":157,"code":"#(map-indexed (fn [idx e] [e idx]) %)","user":"53fe1b42e4b0de5c418485f1"},{"problem":157,"code":"(fn[sq]\n        (map-indexed #(-> [%2 %1]) sq))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":157,"code":"map-indexed (fn [x i] [i x])","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn indexing-sequences [sq]\n  (map \n   #(conj (empty sq) %1 %2)\n   sq (range (count sq))))","problem":157,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":157,"code":"(fn [liste]\n  (map vector liste (range (count liste))))","user":"57ad0950e4b0b8559636fc97"},{"problem":157,"code":"(fn [lst]\n  (partition-all 2 (interleave lst (range 0 (count lst)))))","user":"571ff1ebe4b0c5bde472c088"},{"code":"(fn [l]\n  (for [i (range (count l))]\n    [(nth l i) i]))","problem":157,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn [xs] (map-indexed (fn [i x] [x i]) xs ))","problem":157,"user":"4fcfa1a4e4b03432b189f41a"},{"problem":157,"code":"#(map reverse (keep-indexed vector %))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":157,"code":"(fn index-seq [s]\n  (map-indexed (fn [i e] [e i]) s))","user":"569f4dabe4b0542e1f8d1491"},{"problem":157,"code":"(fn fn157 [s]\n  (mapv (fn [e i] [e i]) s (range))\n)","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"#(reverse (map (fn[a] (identity a)) (zipmap % (range (count %)))))","problem":157,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":157,"code":";(fn [seq]\n;   (loop [[f & remaining] seq\n;          counter 0\n;          vec []]\n;     (if (nil? f)\n;       vec\n;       (recur remaining (inc counter) (conj vec [f counter])))))\n(fn [seqq]\n   (map-indexed (fn [a b] [b a]) seqq))","user":"5d0beecee4b0cc9c91588239"},{"problem":157,"code":"(fn [xs]\n  (mapv vector xs (range)))","user":"548fa2dfe4b0e286459a1240"},{"code":"map-indexed (fn [idx itm] [itm idx ])","problem":157,"user":"51227a00e4b068a9582e656b"},{"problem":157,"code":"(partial map-indexed (fn [idx val] [val idx]))","user":"551bdefde4b07993ea3788d7"},{"problem":157,"code":"(fn [arr]\n  (map #(vector %1 %2) arr (range)))","user":"5cb41c40e4b026601754b911"},{"code":"map-indexed (fn [i e] [e i])","problem":157,"user":"4ee9ddb8535d93acb0a66896"},{"problem":157,"code":"(fn [l] (map (fn [a b] [a b]) l (range)))","user":"4fe49706e4b0e8f79898feb7"},{"problem":157,"code":"(fn indexer [s]\n  (reduce (fn [acc i] (conj acc (list i (count acc)))) [] s))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn [lst] (map vector lst (range)))","problem":157,"user":"504db141e4b021508a333965"},{"code":"#(map vector % (range (count %)))","problem":157,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn [c]\n  (map #(conj [%1] %2) c (iterate inc 0)))","problem":157,"user":"4e6f4cbc535d5021c1a8961a"},{"code":"(fn\n  [s]\n  (for [i (range (count s))]\n  \t[(get s i) i]))","problem":157,"user":"52f3af46e4b05e3f0be25f14"},{"problem":157,"code":"(fn [x]\n  (loop [i 0 res []]\n    (if (= i (count x)) res\n      (recur (inc i)(conj res [(nth x i) i])))))","user":"561e2b33e4b064ca9f4b16ba"},{"problem":157,"code":"(fn f157 [arg]\n  (map vector arg (range (count arg)))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"#(map-indexed (fn[x i][i x]) %)","problem":157,"user":"52f818a6e4b047fd55836fcc"},{"problem":157,"code":"(fn [x] (map #(vector %1 %2) x (range (count x))))","user":"50c6fad1e4b00bb60fe0c52d"},{"code":"(fn [s] (apply vector (map vector s (take (count s) (iterate inc 0)))))","problem":157,"user":"53219cece4b09d4e7a9b54b7"},{"problem":157,"code":"reduce (fn [acc x] (conj acc [x (count acc)])) []","user":"5a3c5c54e4b001c08efc0ce3"},{"code":"(fn\n  [coll]\n  (keep-indexed #(concat [%2 %1]) coll))","problem":157,"user":"525fffb8e4b03e8d9a4a702b"},{"code":"#(map list % (range))","problem":157,"user":"4dc1ee85535d020aff1edf91"},{"problem":157,"code":"(fn [xs] (for [i (range (count xs))] [(nth xs i) i]))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn [coll]\n   (map-indexed (fn [index item] [item index]) coll))","problem":157,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn this \n  ([coll] (this coll 0))\n  ([coll idx]\n   (if (empty? coll)\n     nil\n     (conj (this (rest coll) (+ idx 1)) [(first coll) idx]))))","problem":157,"user":"4ec12577535dfed6da9c6da8"},{"problem":157,"code":"#(map vector  % (range (count %)))","user":"57887de2e4b0ebec4cfb751c"},{"problem":157,"code":"(fn solve [l]\n  (map-indexed #(list %2 %) l))","user":"547e3846e4b0c51c1f4d7302"},{"problem":157,"code":"(fn\n    [s]\n    (map (fn [i e]\n           (list i e)) s (range)))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn [s] (map vector s (iterate inc 0)) )","problem":157,"user":"51729002e4b044b2ef48a850"},{"problem":157,"code":"(fn [x]\n\t(loop [remaining x current 0 acc []]\n\t\t(if (empty? remaining) (reverse acc)\n\t\t\t(recur (rest remaining) (inc current) (cons [(first remaining) current] acc))\n\t\t)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn indexr [seq]\n  (reverse (loop [accum '() sq seq idx 0]\n             (cond (empty? sq) accum :else\n                   (recur (conj accum (list (first sq) idx)) (rest sq) (inc idx))))))","problem":157,"user":"530cb5b8e4b02e82168697e0"},{"problem":157,"code":"(fn [seq]\n  (map vector seq (range (count seq))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":157,"code":"(fn count-iter\n  ([coll] (count-iter coll [] 0) )\n  ([coll new-coll pos] \n   (if (empty? coll)\n     new-coll\n     (count-iter (rest coll) (conj new-coll (list (first coll) pos)) (inc pos) )) )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn [x] (map reverse (map-indexed vector x)))","problem":157,"user":"500a214de4b03d00572d2d74"},{"problem":157,"code":"(fn indexs-seq [coll]\n    (partition 2 (interleave coll (range (count coll)))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [c] (map #(reverse %1) (map-indexed vector c)))","problem":157,"user":"4e539f7e535d8a8b8723a272"},{"problem":157,"code":"(fn [coll]\n  (map-indexed #(vector %2 %) coll))","user":"5460f59ce4b01be26fd74695"},{"code":"#(map (fn [& y] y) % (iterate inc 0))","problem":157,"user":"52a88c4de4b0c58976d9ac30"},{"problem":157,"code":"(fn [x]\n  (mapv #(vector %1 %2) x (range)))","user":"55f2d4ede4b06e875b46ce4c"},{"problem":157,"code":"(fn indexing [s] (map vector s (range 0 (count s))))","user":"55f2b42be4b06e875b46ce4a"},{"problem":157,"code":"#(map (fn [& _] (identity _)) %1 (range))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn [xs]\n  (loop [i 0 acc1 [] acc2 xs]\n    (if (empty? acc2)\n      acc1\n      (recur (inc i) (conj acc1 [(first acc2) i]) (rest acc2)))))","problem":157,"user":"51a2569ee4b00957e520db7d"},{"code":"(fn [s]\n  (map #(vector % (.indexOf s %)) s))","problem":157,"user":"4fb79872e4b081705acca2d2"},{"problem":157,"code":"(fn [vec1]\n        (map reverse (map-indexed vector vec1  )))","user":"5f737899e4b02876ed9fd099"},{"problem":157,"code":"#(for [x (range (count %))] [(get % x) x])","user":"573d8658e4b05c31a32c0814"},{"code":"(fn [s] (map-indexed (fn [idx item] [item idx]) s))","problem":157,"user":"50b29029e4b03ea880433563"},{"problem":157,"code":"(fn indexSeq\n  [lista]\n    (map-indexed #(vector %2 %1) lista))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":157,"code":"(fn [v]\n  (map vector v (range)))","user":"524b90fae4b09eba1c0223df"},{"problem":157,"code":"(fn sk-pair-index [xs]\n  (map-indexed (fn [index e] [e index]) xs))","user":"51d42f44e4b013d740b70ddb"},{"problem":157,"code":"(fn [xs] (vec (map-indexed #(vector %2 %) xs)))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":157,"code":"(fn [coll]\n  (loop [i 0 c coll acc []]\n    (if (empty?  c)\n      acc\n      (recur (inc i) (rest c) (conj acc [(first c) i])))))","user":"57f80350e4b0d3187e90090c"},{"code":"(fn [x] (map list  x  (iterate inc 0) ))","problem":157,"user":"52140b53e4b0961f15ac4d7e"},{"problem":157,"code":"; latest lein repl accepts this too: #(vec (zipmap %1 (range (count %1)))) probably 4closure uses older interpreter.\n#(map vector %1 (range))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":157,"code":"(fn [coll]\n  (map \n   (fn [[i, v]] [v i])\n   (map-indexed vector coll)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":157,"code":"(fn [s]\n  (loop [result '()\n         s s\n         index 0]\n    (if (empty? s)\n      (reverse result)\n      (recur\n        (cons (list (first s) index) result)\n        (rest s)\n        (inc index)))))","user":"5e950178e4b0fbed045a3801"},{"problem":157,"code":"(fn [a] (map #(vector %1 %2) a (range)))","user":"559d33b3e4b0ec2b359424d9"},{"code":"#(map-indexed (fn [a b] (vector b a)) %)","problem":157,"user":"4dafa380edd6309eace4d17c"},{"problem":157,"code":"(fn [lista]\n  (for [indice (range 0 (count lista))]\n    [(lista indice) indice]))","user":"59e63a2ce4b08badc2a0c569"},{"code":"(fn [xs] (map-indexed #(reverse %&) xs))","problem":157,"user":"5089ebfee4b03217b26a539f"},{"code":"(fn [s] (into [] (for [[x y] (map-indexed vector s)] (vector y x))))","problem":157,"user":"525c575be4b0cb4875a45d38"},{"problem":157,"code":"(fn [x]\n    (->> (map-indexed vector x)\n         (map #(let [a (second %) b (first %)]\n                 [a b]))))","user":"55634f38e4b0c656e3ff17e8"},{"problem":157,"code":"(fn [xs]\n  (let [n (count xs)]\n    (map #(vector %1 %2) xs (range n))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":157,"code":"(fn\n[x]\n  (loop [i 0 v []]\n    (if (= i (count x))\n      v\n      (recur (inc i) (conj v (vector (x i) i)))))\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":157,"code":"(fn [v]\n   (for [i (range (count v))]\n     [(get v i) i]))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":157,"code":"(fn seq-index\n  [coll]\n  (mapv vector coll (range)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [s] (into () (zipmap s (range 0 (count s)))))","problem":157,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn [k]\n  (map vector k (range)))","problem":157,"user":"4df407c3535d08e6dec9fe2e"},{"problem":157,"code":"(fn [coll]\n  (loop [indexed [] [elem & coll] coll index 0]\n    (if (nil? elem)\n      indexed\n      (recur (conj indexed [elem index]) coll (inc index))\n    )\n  )\n)","user":"5de6484ce4b0986d99407f66"},{"problem":157,"code":"(fn [sq] (map-indexed (fn [i e] [e i]) sq))","user":"53ea72b6e4b036ad0777e4e5"},{"code":"#(map (fn [& l] l) % (range))","problem":157,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":157,"code":"(fn idx ([coll] (idx coll 0))\n       ([coll i] (if (empty? coll)\n                   '()\n                   (cons (list (first coll) i) (idx (rest coll) (inc i)))\n                   )\n        )\n       )","user":"5759cd46e4b02ea11479932e"},{"problem":157,"code":"(fn[x] (map #(vector % (.indexOf x %)) x))","user":"5951190be4b066ee0a44aea4"},{"problem":157,"code":"(fn index-seq [s]\n  (map #(vector %1 %2) s (range (count s))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":157,"code":"#(map-indexed (fn [& value] (reverse value)) %)","user":"596d630ae4b069c0a1a19846"},{"problem":157,"code":"(fn indexing-seq [lst]\n  (loop [lst lst\n         cnt 0\n         new-vec []]\n    (if (empty? lst)\n      new-vec\n      (recur (rest lst) (inc cnt) (conj new-vec (vec (reverse (conj (list (first lst)) cnt))))))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [coll] (keep-indexed #(conj [] %2 %1) coll))","problem":157,"user":"52cf084ce4b07d0d72b27399"},{"problem":157,"code":";#(vec (zipmap % (vec (range (count %)))))\n#(map vector % (range))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":157,"code":"#(map vector% (range))","user":"58171a9ae4b0c0e9c07b8387"},{"code":"(fn f [x]\n  (partition 2 (interleave x (range 0 (count x))))\n)","problem":157,"user":"50f4894be4b004d364930528"},{"problem":157,"code":"(fn numb \n  ([a] (numb a 0))\n  ([a n] (if (empty? a) a \n           (concat (list (list (first a) n)) \n                   (numb (rest a) (inc n))))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":157,"code":"#(mapv reverse (map-indexed vector %))","user":"560039cce4b04bb52996e162"},{"problem":157,"code":"(fn indexing-seq\n  [xs]\n  (map list xs (range)))","user":"557e9d17e4b05c286339e0d8"},{"problem":157,"code":"#(map list % (range 3))","user":"54b67463e4b05787c3b163bc"},{"code":"#(map-indexed (fn [index item] [item index]) %)","problem":157,"user":"52570aeae4b0541d1855ba42"},{"code":"#(keep-indexed (fn [index item] [item index]) %)","problem":157,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":157,"code":"(fn [xs]\n   (map-indexed (fn [i x] [x i]) xs))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":157,"code":"(fn [xs]\n\t(map #(vector %1 %2) xs (range)))","user":"56540485e4b0f9d632dd847a"},{"code":"(fn [xs] (map #(list % %2) xs (range)))","problem":157,"user":"53403110e4b085b17e897da6"},{"code":"(fn [v]\n  (map #(vec [% %2]) v (range (count v)))\n  \n  )","problem":157,"user":"51bec919e4b013aa0d74b800"},{"problem":157,"code":"(fn [s] (map (fn [x y] [x y]) s (range (count s))))","user":"529f9bf2e4b04e0c58e87bb4"},{"code":"(fn [s] (partition 2 (interleave s (range (count s)))))","problem":157,"user":"4fa67030e4b081705acca1b7"},{"problem":157,"code":"(fn [-seq]\n  (map (fn [x]\n         [(get -seq x) x])\n       (range (count -seq))))","user":"5ddb6151e4b0948ae9d9adb0"},{"problem":157,"code":"#(into '() (zipmap % (take (count %) (iterate inc 0))))","user":"545801f6e4b01be26fd74615"},{"problem":157,"code":"(fn [s]\n  (map #(vector %2 %1) (range) s))","user":"5486adf7e4b0e286459a11be"},{"problem":157,"code":"map-indexed (fn [idx x] (list x idx))","user":"5369d072e4b0243289761ea1"},{"problem":157,"code":"(fn [coll]\n  (let [index-map (zipmap coll (range))]\n  (map #(vector % (index-map %)) coll)))\n;map-indexed #(vector %2 %1)","user":"55aa8276e4b0988bba2ad94e"},{"code":"(fn [xs] \n  (reduce conj [] (map #(vector %1 %2) xs (range))))","problem":157,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [s] (map-indexed #(list %2 %) s))","problem":157,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":157,"code":"(fn [s]\n  (loop [s s\n         r []\n         i 0]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r [(first s) i]) (inc i)))))","user":"54b31445e4b09f271ff37d35"},{"problem":157,"code":"#(map-indexed (fn [idx el] [el idx]) %)","user":"55380eeae4b09218d5f44fd9"},{"problem":157,"code":"(fn [l] (map #(vec %&) l (range)))","user":"55e8a85be4b0121d4835fd98"},{"problem":157,"code":"(fn [coll]\n    (map reverse (map-indexed vector coll))\n    )","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [l] (map (fn [i] [(l i) i]) (range (count l))))","problem":157,"user":"501284d9e4b030d97e4db710"},{"problem":157,"code":"(fn [sequ] (for [x sequ] \n          [x (.indexOf sequ x)]))","user":"5476d6cae4b0c51c1f4d72aa"},{"code":"#(map-indexed (fn [i v] [v i]) %)","problem":157,"user":"4f6160a7e4b0defedf855fbe"},{"problem":157,"code":"#(vec (map-indexed (fn [idx e] (vec [e idx])) %))","user":"5964f9b0e4b069c0a1a19778"},{"code":"(fn indexing-sequence\n  [in]\n  (map-indexed #(vector %2 %1) in))","problem":157,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [v] (into [] (map (fn[k e] (vector k e)) v (range (count v)))))","problem":157,"user":"4f148418535d64f60314643a"},{"problem":157,"code":"(fn [v] (map reverse (map-indexed vector v)))","user":"5441f5e8e4b032a45b869375"},{"problem":157,"code":"#(map-indexed (fn [ind item] [item ind]) %)","user":"5da94ccfe4b000c986472c2f"},{"problem":157,"code":"#(loop [base % \n       acc []]\n  (if (empty? base)\n    acc\n    (recur (rest base) \n           (conj acc \n                 (vector \n                  (first base) \n                  (if (empty? acc) 0 (inc (last (last acc)))))))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [ln]\n  (map-indexed (fn [x y] [y x]) ln))","problem":157,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":";#(partition 2 (interleave % (range (count %))))\n#(map-indexed (fn[value key] (vector key value)) % )","problem":157,"user":"5307e4ece4b02e82168697a9"},{"problem":157,"code":"#(map-indexed (fn[x y] [y x]) %)","user":"5b210749e4b03cfeda66ed48"},{"problem":157,"code":"(fn [s]\n  \t(map #(list %1 %2) s (iterate inc 0)))","user":"540dbc11e4b0addc1aec6715"},{"problem":157,"code":"(fn [args]\n    (loop [cnt 0\n           coll args\n           res []]\n        (if (empty? coll)\n            res\n            (recur (+ cnt 1) (rest coll) (conj res [(first coll) cnt]))\n        )\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":157,"code":"(fn [coll] (map #(vector %1 %2) coll (iterate inc 0)))","user":"60654263e4b069485764ddc9"},{"problem":157,"code":"#(into [] (map vector % (range (count %))))","user":"580d7de3e4b0849f6811b73d"},{"code":"#(partition 2 (interleave % \n  (range 0 (count %))))","problem":157,"user":"502d39c5e4b0d96a44ab2031"},{"problem":157,"code":"#(mapv (comp vec reverse) (map-indexed vector %))","user":"58e7229fe4b056aecfd47cc4"},{"problem":157,"code":"(fn [s]\n  (map-indexed (fn [idx x]\n                 [x idx])\n               s))","user":"55f85b93e4b03cbcff9738ae"},{"problem":157,"code":"(fn [thing]\n  (map-indexed (fn [idx it] (if (vector? thing) (vector it idx) (list it idx))) thing))","user":"54e79094e4b024c67c0cf818"},{"problem":157,"code":"(fn [coll] (map #(list % %2) coll (range)))","user":"543c5200e4b032a45b86933e"},{"problem":157,"code":"(fn [coil]\n  (loop [src coil, i 0, result []]\n    (if (empty? src)\n      result\n      (recur (rest src)\n             (inc i)\n             (conj result\n                   (vector (first src)\n                           i))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":157,"code":"(fn [x]\n  (map #(vector % %2) x (range (count x))))","user":"5012da69e4b0c8732600222d"},{"code":"#(map (fn[x y][x y]) % (range (count %)))","problem":157,"user":"51b41150e4b0f094dd986fac"},{"code":"#(map (fn [it index]  (vector it index)) % (range))","problem":157,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":157,"code":"#(reduce (fn[a b] (conj a [b (count a)])) [] %1)","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [coll] (map-indexed (fn [idx itm] [itm idx]) coll))","problem":157,"user":"4fedd993e4b0198f34b063bc"},{"code":"#(for [[v k] (map-indexed vector %)] [k v])","problem":157,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"map (fn [d i] [i d]) (range)","problem":157,"user":"4ea5e32a535d7eef308072de"},{"problem":157,"code":"(fn [col]\n    (reduce\n      (fn [v x] (conj v [x (count v)]))\n      []\n      col))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"#(into [] (for [i (range (count %))] [(nth % i) i]))","problem":157,"user":"50335235e4b0c6c1199c710b"},{"code":"(fn [x] (reduce (fn [a b] (conj a [b (count a)])) [] x))","problem":157,"user":"5106c803e4b01150e115ebee"},{"problem":157,"code":"(fn seq_pairs [l]\n  (map vector l (range (count l))))","user":"60460824e4b02d28681c77bc"},{"problem":157,"code":"(fn index [lst]\n  (for [x (range (count lst))]\n  \t[(nth lst x) x])\n)","user":"59e0111ae4b08badc2a0c4e4"},{"code":"map #(vector %2 %1) (iterate inc 0)","problem":157,"user":"5203bc27e4b0fb7e47ea5204"},{"code":"#(partition 2 (interleave % (iterate inc 0)) )","problem":157,"user":"51a865dfe4b08d8ec191b80f"},{"code":"(fn [c]\n  (for [i (range (count c))]\n    (list (nth c i) i)\n  )\n)","problem":157,"user":"4f84400de4b033992c121c2e"},{"problem":157,"code":"#(map (fn [item index] [item index]) % (range))","user":"5bec37e2e4b0f319e2d7ec96"},{"code":"(fn [xs]\n  (map-indexed #(vector %2 %1) xs))","problem":157,"user":"4feff3b6e4b0678c553fc31e"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [idx item]\n                 [item idx])\n               coll))\n; note (map-indexed vector coll) gets the order backwards, i.e. [idx item]","user":"53576356e4b04ce2eb3ed27a"},{"problem":157,"code":"(fn [coll]\n  (into [] (map vector coll (range (count coll))))\n)","user":"4fbfbd4fe4b081705acca31c"},{"code":"(fn [xs] (map-indexed (fn [i, x] [x i]) xs))","problem":157,"user":"4f03641a535dcb61093f6a9b"},{"problem":157,"code":"(partial map-indexed (fn [idx item] [item idx]))","user":"58740c18e4b01531a375ea49"},{"problem":157,"code":"(fn indexing-seq\n  [lst]\n  (map-indexed (fn [index item] [item index]) lst))","user":"57f8153de4b0d3187e900916"},{"problem":157,"code":"(fn [coll]\n    (map (fn[x y][x y])\n         coll\n         (range)))","user":"54b10d08e4b09f271ff37d18"},{"problem":157,"code":"(fn [s]\n  (let [i (range (count s))]\n    (partition 2 (interleave s i))))","user":"557f7c8be4b05c286339e0e0"},{"code":"#(map (fn [[a b]] [b a]) (map-indexed vector %))","problem":157,"user":"500cb910e4b05f7c30cfa698"},{"problem":157,"code":"(fn map_ind [s]\n  (map vector s (range (count s)))\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":157,"code":"(fn [sq]\n  (reduce (fn [nsq curr] (conj nsq [curr (count nsq)])) [] sq))","user":"5c76577ae4b0fca0c16227ea"},{"code":"(fn [coll]\n  (map #(vector % (.indexOf coll %)) coll))","problem":157,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn [ret n col]\n  (if (= '() col)\n    ret\n    (recur (conj ret [(first col) n]) (inc n) (rest col))))\n  [] 0","problem":157,"user":"50bfe725e4b080409b860f26"},{"problem":157,"code":"#(partition 2 (interleave % (range 0 (count %))))","user":"54856d54e4b0e286459a11aa"},{"problem":157,"code":"#(map-indexed (fn [i v]\n                  [v i])\n              %)","user":"4e38f245535deb9a81d77f3e"},{"code":"map-indexed (comp rseq vector)","problem":157,"user":"4ddbf54e535d02782fcbe9ff"},{"code":"(fn [coll]\n  ((fn foo [coll ind]\n    (if (empty? coll) ()\n    (cons (list (first coll) ind) (foo (rest coll) (inc ind))))\n   ) coll 0)\n)","problem":157,"user":"5078300de4b0fc74642bff66"},{"code":"#(reverse (zipmap %1 (iterate inc 0 )))","problem":157,"user":"518c5236e4b087e178201de0"},{"problem":157,"code":"#(map-indexed (fn [idx c]\n                  [c idx]) %)","user":"4ed90014535d10e5ff6f52fe"},{"problem":157,"code":"(fn [coll]\n  (map\n   (fn [x y] [x y])\n   coll\n   (iterate inc 0)))","user":"540d5085e4b0addc1aec670e"},{"problem":157,"code":"(fn [es] (map (fn [e i] [e i]) es (range)))","user":"54d7e277e4b0a52adc2e2031"},{"code":"(fn m [col]\n  (map #(vector % %2) col (range (count col))))","problem":157,"user":"51696bcde4b03f62cda68ce7"},{"problem":157,"code":"map-indexed (fn [i v][v i])","user":"5f088bb3e4b0cf489e8d7f5f"},{"problem":157,"code":"map-indexed (fn [k v] [v k])","user":"56347285e4b0bfe05bf117bc"},{"problem":157,"code":"(fn [arg]\n  (loop [result []\n         cur 0]\n    (if (>= cur (count arg)) result\n      (recur (conj result [(nth arg cur) cur]) (inc cur)))))","user":"535943b3e4b04ce2eb3ed295"},{"problem":157,"code":"(fn [coll] (map vector coll (range) ))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":157,"code":"(fn [se]\n  (let [new (empty se)]\n    (map vector se (range))))","user":"5686b0c0e4b0dcc4269f4056"},{"problem":157,"code":"(partial map-indexed #(vector %2 %))\n;; #(map vector % (range))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":157,"code":"#(map (fn [x i] [x i]) % (range))","user":"551ed214e4b08d5046aa8a4d"},{"problem":157,"code":"(fn[v] (map #(vec [%2 %1]) (range (count v)) v))","user":"56f4cedce4b046a417f92063"},{"problem":157,"code":"(fn index-seq\n  [lst]\n  (->>\n    (range 0 (+ 1 (count lst)))\n    (interleave lst)\n    (partition 2)))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn [coll] (map #(-> [%1 %2]) coll (range)))","problem":157,"user":"538e864ee4b0b51d73faae87"},{"code":"#(:r (reduce (fn[x y] {:r (conj (x :r) [y (x :i)]) :i (inc (x :i))}) {:r [] :i 0} %))","problem":157,"user":"5017eface4b02f523d7cc5e7"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (fn [index item] [item index]) coll))","user":"58fe47b0e4b0438e51c2cfcd"},{"code":"#(map-indexed (comp reverse list) %)","problem":157,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn [S]\n  (map-indexed (fn [index item] (vector item index)) S))","problem":157,"user":"50293245e4b08353e5d459cf"},{"problem":157,"code":"(fn [s]\n  (letfn [(pairs [s n]\n            (if (empty? s)\n              nil\n              (cons [(first s) n] (pairs (rest s) (inc n)))\n              ))]\n    (pairs s 0)))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":157,"code":"(fn f [xs]\n  (letfn [(g [xs i]\n    (if (empty? xs) '()\n      (cons (cons (first xs) (list  i)) (g (rest xs) (+ i 1)))))]\n  (g xs 0)))","user":"55e3e7a8e4b050e68259b44a"},{"problem":157,"code":"(fn my-index [coll]\n  (map-indexed #(list %2 %1) coll))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":157,"code":"(fn [s] \n  (map #(vector % %2) s (range)))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":157,"code":"(fn [coll] (apply vector (map-indexed #(vector %2 %1) coll)))","user":"5245e320e4b09dbe66b56177"},{"problem":157,"code":"(fn [sq]\n  (map reverse (map-indexed vector sq)))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":157,"code":"(fn [x] (map list  x (seq (iterate inc 0))))","user":"5b284375e4b063e2438bcc53"},{"problem":157,"code":"(fn f [c] (keep-indexed #(vector %2 %) c))","user":"55c10409e4b01b9910ae2a2c"},{"problem":157,"code":"(fn [a] (let [f (fn [c] [c (.indexOf a c)])] (map f a)))","user":"5280539ce4b0757a1b1713f3"},{"problem":157,"code":"map-indexed (fn [index element] [element index])","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":157,"code":"map-indexed (fn [index item] [item index])","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn [s]\n    (map list s (range)))","problem":157,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn index-sequence\n  [s]\n  (loop [s s\n         c 0\n         acc []]\n    (cond\n     (empty? s) acc\n     :else\n     (recur (rest s) (inc c) (conj acc (list (first s) c))))))","problem":157,"user":"4fd16778e4b04c3a95aa040f"},{"problem":157,"code":"#((fn f [v c] (if (> (count v) 1) (cons [(first v) c] (f (rest v) (inc c))) [[(first v) c]])) % 0)","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":157,"code":"(partial reduce #(conj %1 [%2 (count %1)]) [])","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn __[coll]\n  (loop [x (- (count coll) 1)\n         l []]\n    (if (>= x 0)\n      (recur (- x 1)\n             (conj l (list (nth coll x) x)))\n      (reverse l)\n    )))","problem":157,"user":"509b152be4b0412cdea6eb1e"},{"code":"(fn [s]\n  (map vector s (range (count s))))","problem":157,"user":"52b63875e4b0c58976d9ad41"},{"problem":157,"code":"#(map vec (map reverse (map-indexed vector %)))","user":"5c0e58bfe4b01240ff567140"},{"problem":157,"code":"#(map-indexed (fn [x i] [i x]) %)","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn t [l]\n  (reduce \n    (fn [x y] \n      (conj x [y (+ (last (last x)) 1)])\n    )\n  [[(first l) 0]]\n  (rest l)\n  )\n)","problem":157,"user":"4fc8f671e4b0ee37620e1840"},{"code":"#(map (fn [x y] [x y]) % (range))","problem":157,"user":"4ed55b5d535d10e5ff6f52d8"},{"code":"(fn [a]\n  (loop [a (seq a)\n         x 0\n         result []]\n    (if-let [cur (first a)]\n      (recur (next a) (inc x) (conj result [cur x]))\n      result)))","problem":157,"user":"531e5c81e4b08068f379edba"},{"problem":157,"code":"map-indexed #(into [] (list %2 %1))","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":157,"code":"(fn[x](map #(conj (vector %) (.indexOf x %)) x))","user":"54f15cb8e4b024c67c0cf8b1"},{"code":"(fn index [coll]\n  (map vector coll (iterate inc 0)))","problem":157,"user":"510591dde4b06d28cacc92eb"},{"problem":157,"code":"(fn index [lst]\n  (map-indexed (fn [a b] (concat (list b) (list a))) lst))","user":"57fc08d8e4b0d3187e900988"},{"problem":157,"code":"#(map (fn [it1 it2] [it1 it2]) % (iterate inc 0))","user":"535ca812e4b04ce2eb3ed2b7"},{"code":"(fn [xs]\n  (map #(vec (list %1 %2))\n       xs\n       (range (count xs))))","problem":157,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":157,"code":"map (comp reverse vector) (range)\n\n;#(map vector % (range))\n\n;(fn [s] (map #(vector % %2) s (range (count s))))","user":"54e1939ce4b024c67c0cf7c5"},{"code":"(partial map (comp reverse list) (range))","problem":157,"user":"4eea4840535d93acb0a6689b"},{"problem":157,"code":"#(partition-all 2 (interleave % (range (count %))))","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn [a] (map #(list %2 %) (range (count a)) a))","problem":157,"user":"52c6a0abe4b0c2d177d62111"},{"problem":157,"code":"#(into ()(zipmap % (iterate inc 0)))\n;#(map vector % (range))","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":157,"code":"(fn [s] \n  (apply vector(map #(identity [%1 %2])\n   s (range 0 (count s))))\n  )","user":"5ce867fce4b0a17bb84e2baf"},{"problem":157,"code":"(fn [ks] \n  (map (fn [k] (conj [k] (.indexOf ks k))) ks))","user":"546d41bde4b00cfc9eacc18c"},{"code":"(fn [seq]\n  (for [x (partition 2 (interleave seq (range (count seq))))]\n    [(first x) (second x)]))","problem":157,"user":"52b94f15e4b07a9af57922ba"},{"code":"(fn indexlist [coll]\n  (map-indexed #(vector %2 %1) coll))","problem":157,"user":"51f82769e4b09be9c177e527"},{"code":"(fn foo [coll]\n  (map (fn [e i] [e i]) coll (range)))","problem":157,"user":"52f8f4d1e4b047fd55836fde"},{"problem":157,"code":"(fn [lst]\n   (loop [i 0 l lst r []]\n      (if (empty? l)\n         (reverse r)\n         (recur (inc i) (rest l) (cons [(first l) i] r)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"#(map (fn [i, x] [x i]) (iterate inc 0) %1)","problem":157,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn foo [xs]\n  (map-indexed #(list %2 %1) xs))","problem":157,"user":"525bcae9e4b0cb4875a45d30"},{"code":"#(partition 2 2 (interleave % (range (count %))))","problem":157,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"problem":157,"code":"#(partition 2 (interleave % [0 1 2]))","user":"5589a735e4b059ccff29b206"},{"code":"map #(vector %2 %) (range)","problem":157,"user":"4ea4e98a535d7eef308072ce"},{"problem":157,"code":"(fn [x]\n  (vec (map-indexed #(vector %2 %1) x)))","user":"54edc818e4b024c67c0cf865"},{"problem":157,"code":"(fn zip-index [coll] (map vector coll (range (count coll))))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [s]\n  (map-indexed (fn [idx itm] [itm idx]) s))","problem":157,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":157,"code":"(fn index-me [s]\n  (mapv (fn [x y] [x y]) s (range 0 (count s))))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":157,"code":"(partial map-indexed (fn [i x] (list x i)))","user":"5901158de4b0438e51c2d039"},{"problem":157,"code":"#(loop [s % o [] id 0]\n        (if (empty? s)\n            o\n            (recur\n                (rest s)\n                (conj o (conj [] (first s) id))\n                (inc id))))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [m] (map vector m (range)))","problem":157,"user":"4df669d4535d08e6dec9fe35"},{"problem":157,"code":"#(map list % (range 10))","user":"59ef5280e4b0966464fe6a2b"},{"code":"#(map (fn [x y] [x y]) % (iterate inc 0))","problem":157,"user":"531d34cfe4b08068f379edac"},{"problem":157,"code":"(fn \n  [v]\n  (map #(vector %1 %2) v (range)))","user":"5a9f005be4b0d174b936c810"},{"code":"(fn [s] (\n  map #(list % %2) s (iterate inc 0)\n))","problem":157,"user":"4ef48422535dced4c769f236"},{"problem":157,"code":"(fn[i](map #(vector %1 %2) i [0 1 2]))","user":"563c6ebae4b0bfe05bf11834"},{"code":"#(partition 2 (interleave % (take (count %) (range))))","problem":157,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [x]\n  (map\n     (fn [n] [(nth x n) n])\n     (range (count x))\n   )\n)","problem":157,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn [lst] (map #(cons % (list (.indexOf lst %))) lst))","problem":157,"user":"516dc88ae4b046df6fbb76a1"},{"problem":157,"code":"(fn [coll]\n  (map-indexed (comp reverse vector) coll))","user":"5317d78ee4b08068f379ed63"},{"problem":157,"code":"(fn get-indexed [list]\n  (map (fn [key index] [key index]) list (range 0 (count list))))","user":"575683aee4b02ea1147992dc"},{"problem":157,"code":";(fn indexing-seq [coll]\n;     (map vec (partition 2 (interleave coll (range (count coll))))))\n\n#(map vec (partition 2 (interleave % (range (count %)))))\n\n\n; #(map vector % (range))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":157,"code":"(fn\n  index-seq\n  ([coll] (index-seq coll 0))\n  ([coll start-index]\n    (if\n      (empty? coll)\n      '()\n      (lazy-seq\n        (cons\n          (vector (first coll) start-index)\n          (index-seq (rest coll) (inc start-index)))))))","user":"5c6227fee4b0fca0c1622641"},{"code":"#(map-indexed (fn [idx x] [x idx]) %)","problem":157,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [s]\n  (map-indexed\n    #(list %2 %1)\n    s))","problem":157,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [coll]\n  (map list coll (range)))","problem":157,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn problem-157 \n  [s]\n  (map-indexed (fn [idx item] [item idx]) s))","problem":157,"user":"52319066e4b0e2e8de81d1e9"},{"problem":157,"code":"(fn [lst] (loop [i 0\n                 lst lst\n                 res []]\n            (if (= i (count lst))\n              res\n              (recur (inc i) lst (conj res [(nth lst i) i]) ))))","user":"6074df6fe4b069485764de4b"},{"problem":157,"code":"#(map-indexed (fn[i x] [x i]) %)","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":157,"code":"(fn [x]\n  (merge (map (fn [a b] [a b])\n       x\n       (range))\n  ))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":157,"code":"#(loop [daseq %, res [], i 0]\n   (if (seq daseq)\n     (let [[f & r] daseq]\n       (recur r (conj res [f i]) (inc i)))\n     res))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [coll]\n  (map-indexed #(vector %2 %1) coll))","problem":157,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [x] \n  (reduce\n    conj\n    []\n    (map-indexed #(conj [] %2 %1) x)))","problem":157,"user":"513b77f3e4b00f740c76c403"},{"problem":157,"code":"(fn [n] ()\n  ((fn tie-in [n index] (if (= n '()) '() (cons (list (first n) index) (tie-in (rest n) (+ index 1))  )     )  )\n  \n   n 0)\n  )","user":"5471f090e4b094393f72dd6e"},{"problem":157,"code":"(fn [s]\n  (into []\n        (map vector s (range))))","user":"545944a2e4b01be26fd74627"},{"problem":157,"code":"(fn [s]\n  (loop\n    [x s y 0 z []]\n    (cond\n     (empty? x) z\n     :else (recur (rest x) (+ 1 y) (conj z [(first x) y])))))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"#(seq (reverse (zipmap % (range))))","problem":157,"user":"51852961e4b0da5a5be3babb"},{"problem":157,"code":"(fn [input1] \n(loop [col1 input1 res [] index 0]\n\t(if (empty? col1) \n\t\tres\n\t\t(recur (rest col1) (conj res [(first col1) index]) (inc index))\n\t ))\n\t)","user":"57465429e4b009280f9f2b60"},{"problem":157,"code":"(fn [coll]\n  (map #(vector %1 %2) coll (range)))","user":"500e6ddee4b04a05d36fcc06"},{"problem":157,"code":"#(for [a %]\n   [a (.indexOf % a)])","user":"55912230e4b027778923767a"},{"problem":157,"code":"(fn index-seq\n  ([coll] (index-seq coll [] 0))\n  ([coll result i]\n   (if (empty? coll)\n     result\n     (let [x (first coll), o (next coll)]\n       (recur o (into result [[x i]]) (inc i))\n     )\n   )\n  )\n)","user":"5a536cf2e4b05d388ecb6c10"},{"problem":157,"code":"(fn [lst]\n  (map #(vector %2 %1) (range) lst))","user":"56df62b3e4b0ca2494a095ef"},{"problem":157,"code":";#(map-indexed vector %)\n;map-indexed #(vec %&)\n;map-indexed (fn [& r] r)\n;map-indexed (fn [a b] [a b]) \nmap-indexed #(reverse %&)\n;map-indexed #(list %2 %)\n;map-indexed #(vector %2 %)\n;map #(list %2 %) (range)\n;#(map vector % (range))\n;#(map list % (range))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":157,"code":"(fn pairer [seq]\n  (sequence (map-indexed (fn [index element] [element index]) seq)))","user":"6036b21ce4b0d5df2af222de"},{"code":"(fn [s]\n  (map #(vector % %2) s (range (count s))))","problem":157,"user":"50843a4ae4b0c98812d0788b"},{"problem":157,"code":";(partial map-indexed (fn [i x] [x i]) )\n\n(partial map-indexed (comp reverse vector))","user":"5d9e7971e4b000c986472bc1"},{"problem":157,"code":"#(->> % (keep-indexed vector) (map reverse))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":157,"code":"(partial map-indexed (fn [idx v]  [v idx]))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [xs]\n  (loop [out []\n         in  xs\n         i   0]\n    (if (empty? in)\n      out\n      (recur\n       (conj out [(first in) i])\n       (rest in)\n       (inc i)))))","problem":157,"user":"51365524e4b04ac1f358dd52"},{"problem":157,"code":"(fn [s]\n  (partition 2 (interleave s (range))))","user":"5ec6de19e4b08d0ec38692da"},{"problem":157,"code":"(fn [s] (loop [sq s acc [] i 0] (if (empty? sq) acc (recur (rest sq) (conj acc [(first sq) i]) (inc i)))))","user":"511618b1e4b0d4f670fd2fdf"},{"problem":157,"code":"#(vec (map-indexed (fn [i a] (vector a i)) %))","user":"53889587e4b0640c7a9a589e"},{"problem":157,"code":"#(for [idx (range (count %))] [(% idx) idx])","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn [s]\n  (keep-indexed (fn [i x] [x i]) s)\n)","problem":157,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"#(map-indexed (fn [id el] [el id]) %)","problem":157,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [x]\n  (reduce #(conj %1 [%2 (count %1)]) [] x))","problem":157,"user":"53468f6ce4b084c2834f4a3f"},{"problem":157,"code":"(fn [x]\n        (let [a (range (count x)) ]\n        (for [y a] [(nth x y) y])\n        )\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":157,"code":"(fn addnums [seqx]\n  (loop [x seqx\n         ans (vector )\n         n 0]\n    (if (empty? x)\n      ans\n      (recur (rest x) (conj ans (vector (first x) n)) (+ n 1))\n      )\n\n  )\n)","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn [coll] (first (reduce (fn [[acc i] val] [(conj acc [val i]) (inc i)]) [[] 0] coll)))","problem":157,"user":"52c1f404e4b07a9af5792370"},{"problem":157,"code":"(fn [S]\n  (for [x (range (count S))]\n    [(S x) x]\n   )\n)","user":"5649615be4b0284900eef641"},{"problem":157,"code":"(fn indexing-sequences [x]\n  (map-indexed (fn [index element] [element index]) x))","user":"5e9771dee4b0157ca96647d0"}]