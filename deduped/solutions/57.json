[{"code":"[5 4  3 2 1]","problem":57,"user":"5030f16fe4b05b7df5a0b84b"},{"problem":57,"code":"'(5  4 3 2 1)","user":"55bc5280e4b01b9910ae29f1"},{"problem":57,"code":"((fn [n]   (loop [stop n\n                  acc []]\n             (if (= 0 stop)\n               acc\n               (recur (dec stop) (conj acc stop))))) 5)","user":"5f274aeee4b0857314092c92"},{"code":"'(5 4 3 2 1)\n\n;; (class (conj nil 1))\n; clojure.lang.PersistentList","problem":57,"user":"503f4759e4b00d1a725ff2a9"},{"problem":57,"code":"(reverse (rest (take 6 (range))))","user":"594c1baae4b07ddc2dafae59"},{"problem":57,"code":"((fn v [s x] (if (= x 0) s (recur (conj s x) (dec x)))) [] 5)","user":"5ff3aca3e4b05ac5b16ea205"},{"code":"'(5,4 3,2,1)","problem":57,"user":"4f67f97ee4b07046d9f4ef6f"},{"problem":57,"code":"[5 4 3 2 1\n]","user":"5aad79d9e4b073f177442578"},{"code":"[5 4 3 2 1]\n'(5 4 3 2 1)","problem":57,"user":"4e9dd9ab535dbda64a6f6b8d"},{"problem":57,"code":"[5 4 3 2 1\t]","user":"5524120fe4b0882d96d091b7"},{"problem":57,"code":"(loop [iteration 5,\r\n       result [iteration]]\r\n  (if (> iteration 1)\r\n    (let [iteration-2 (dec iteration),\r\n          result-2 (conj result iteration-2)]\r\n      (recur iteration-2\r\n             result-2))\r\n    result))","user":"55e90724e4b0121d4835fd9a"},{"code":"(reverse (map inc (range 5)))","problem":57,"user":"5216f8dce4b082aa80a88c67"},{"code":"((fn dc [x]\n   (when (> x 0)\n     (conj (dc (dec x)) x)\n      )) 5)","problem":57,"user":"51a0dae0e4b0b292b01ee3fa"},{"code":"((fn foo [x]\n   (loop [cnt x acc []]\n     (if (zero? cnt)\n       acc\n       (recur (dec cnt) (conj acc cnt))))) 5)","problem":57,"user":"4ec1619b535dfed6da9c6dab"},{"code":"((fn [x]\n  (reverse\n    (loop [y x coll '()]\n        (if (= y 0)\n            coll\n            (recur (dec y) (cons y coll))\n        )))) 5)","problem":57,"user":"4ebc64db535dfed6da9c6d82"},{"problem":57,"code":"(reverse (rest (range 6)))","user":"533b1611e4b0e30313ee6cc6"},{"code":"((fn [x] (loop [cnt x res nil] (if (> cnt 0) (recur (dec cnt) (conj res cnt)) (reverse res)))) 5)","problem":57,"user":"52bb7f3de4b07a9af57922e7"},{"code":"(list  5 4 3 2 1 )","problem":57,"user":"50505206e4b0a02f9cffdeba"},{"problem":57,"code":"(range  5 0 -1)","user":"5628cb07e4b00e49c7cb47ef"},{"problem":57,"code":"((fn [x & args] x args) 5 5 4 3 2 1)","user":"5e83a273e4b09a7a73c8bbbb"},{"problem":57,"code":"; functie foo met input x\n; als x groter is dan 0, https://clojuredocs.org/clojure.core/conj conjoin\n; https://clojuredocs.org/clojure.core/dec dec input - 1\n[5 4 3 2 1]","user":"5637bd38e4b0bfe05bf117de"},{"problem":57,"code":"[5  4 3 2 1]","user":"58f9fde7e4b0438e51c2cf56"},{"code":"'(5 4 3 2 1 )","problem":57,"user":"4de6f806535d08e6dec9fdf7"},{"problem":57,"code":"((fn foo [x]\n   (when (> x 0)\n     (conj (foo (dec x)) x)))\n 5)","user":"57006957e4b08d47c97781c8"},{"problem":57,"code":"[5 4 3  2 1]","user":"54a42372e4b09f271ff37c6c"},{"problem":57,"code":"(reverse '[1 2 3 4 5])","user":"55c251c0e4b0e31453f64979"},{"code":"[5,4,3,2,1]","problem":57,"user":"4e58c019535d8a8b8723a297"},{"code":"(range 5 0 -1)","problem":57,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(reverse [1 2 3 4 5])","problem":57,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(map #(- 5 %) (range 5))","problem":57,"user":"52271ffee4b04e78ff2e19a9"},{"code":"(quote (5 4 3 2 1))","problem":57,"user":"5250777fe4b0541d1855b82e"},{"code":"((fn foo [x] (\n  when (> x 0) (conj (foo (dec x)) x)\n)) 5)","problem":57,"user":"4f29b9cae4b0d6649770a030"},{"problem":57,"code":"' (5 4 3 2 1)","user":"59b809c0e4b05c620303ca4c"},{"problem":57,"code":"(vector 5 4 3 2 1)","user":"5600d4ece4b04bb52996e173"},{"problem":57,"code":"(list 5,4,3,2,1)","user":"58c66990e4b021aa9917ed53"},{"problem":57,"code":"((fn [n]\n  (loop [x n\n         acc '()]\n    (if (> x 0)\n      (recur (dec x) (conj acc x))\n      (reverse acc)))\n  ) 5)","user":"5e3121e5e4b05b4b01516221"},{"code":"(reverse (take 5 (iterate inc 1)))","problem":57,"user":"4fc0f5b8e4b081705acca329"},{"code":"( list 5 4 3 2 1 )","problem":57,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":57,"code":"(loop [x 5 rev []]\n  (if (<= x 0) rev (recur (dec x) (conj rev x)))\n \n )","user":"588fd085e4b00487982d51c0"},{"code":"((fn foo [x] (when (> x 0)\r\n             (conj (foo (dec x)) x))) 5)","problem":57,"user":"4db883e1535d1e037afb2198"},{"code":"'(5 4  3 2 1)","problem":57,"user":"507e8128e4b0fc854042f247"},{"problem":57,"code":"(sequence [5 4 3 2 1])","user":"590260cde4b0438e51c2d057"},{"code":"(#(if (= % 0)\n  (reverse %2)\n  (recur (dec %) (conj %2 %))) 5 ())","problem":57,"user":"4f137034535d64f603146430"},{"code":"'( 5 4 3 2 1 )","problem":57,"user":"4f75eb33e4b0fbe0118ec565"},{"code":"((fn [x]\n  \"A recursive function that counts down from integer x to zero\"\n  (loop [i x coll '()]\n    (if (zero? i)\n      (into () coll)\n      (recur (dec i) (cons i coll))))) 5)","problem":57,"user":"50481532e4b0ec70b3ef8d96"},{"problem":57,"code":"((comp reverse range) 1 6)","user":"5fc3850de4b0db0e95a5f3fd"},{"code":"(loop [x 5 lst []] (if (> x 0) (recur (dec x) (conj lst x)) lst))","problem":57,"user":"4e6a3930535d8ccf87e9feb0"},{"code":"((fn foo [x] \n  \t(when (> x 0)\n      \t(conj (foo (dec x)) x)))\n\n5)","problem":57,"user":"52caee52e4b071a8d36bd3e9"},{"code":"`(5 4 3 2 1)","problem":57,"user":"4eb698ad535d7eef3080736d"},{"problem":57,"code":"'(5 4 3 2  1)","user":"528b3f5ae4b0239c8a67ae93"},{"code":"'(5 4 3 2 1)\n((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5)\n(reverse ((fn foo [x] (when (> x 0) (conj (vec (foo (dec x))) x))) 5))\n(conj (conj (conj (conj (conj nil 1) 2) 3) 4) 5)\n(conj nil 1 2 3 4 5)","problem":57,"user":"500ae2ade4b03d00572d2d7d"},{"problem":57,"code":"((fn [x] (loop [cnt 1 res (list)] (if (> cnt x) res (recur (inc cnt)(cons cnt res))))) 5)","user":"584f5133e4b0b7285a6f4e61"},{"problem":57,"code":"[5 (dec 5) 3 2 1]","user":"582c8950e4b051871117bf90"},{"code":"(reverse '(1 2 3 4 5))","problem":57,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":57,"code":";; My first solution (list 5 4 3 2 1)\n;; apparently clojurists love vectors\n[5 4 3 2 1]","user":"5586cbeae4b059ccff29b1d8"},{"problem":57,"code":"(let [x 5, foo (fn foo [x] (when (> x 0) (conj (foo (dec x)) x)))] (foo 5))","user":"5f9effc3e4b0715f5002d838"},{"code":"(loop [result [] x 5]\n  (if (> x 0)\n    ((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5)\n    result\n    ))","problem":57,"user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"(->> (range 5)\r\n     (map (partial + 1))\r\n     (reverse))","problem":57,"user":"4f034e81535dcb61093f6a87"},{"code":";; base case returns nil which is equivalent to ()\n'(5 4 3 2 1)","problem":57,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"(seq [5 4 3 2 1])","problem":57,"user":"50e88080e4b0ebbe794eb7ea"},{"code":"'(5, 4, 3, 2,1)","problem":57,"user":"4f044e44535dcb61093f6bb9"},{"code":"'(5  4 3 2 1 )","problem":57,"user":"52a9406de4b0c58976d9ac43"},{"problem":57,"code":"(map dec[6 5 4 3 2])","user":"52296df4e4b04c906c9c6a72"},{"problem":57,"code":"'( 5 4 3  2 1 )","user":"5d2f5ba5e4b01671435dbcbf"},{"problem":57,"code":"(reverse (rest(range 6)))","user":"5d465adae4b07c84aa5ae6a9"},{"problem":57,"code":"'(5 4 3 2 1)\n\n; clojurecademy 에선 last","user":"5939e726e4b069cdc2982b45"},{"problem":57,"code":"(loop [n 1 acc '()]\n  (if (= n 6)\n    acc\n    (recur (+ n 1) (conj acc n))))","user":"570b421ee4b0b0fb43fd06be"},{"code":"[5 4 3 2 1]\n; '(5 4 3 2 1)","problem":57,"user":"516e3cb1e4b0284f4b26df82"},{"problem":57,"code":"[5 4 3 2 1]\n\n; (fn foo [x]\n;   (when (> x 0)\n;     (conj (foo (dec x)) x))) 5)","user":"590b8607e4b047aa04b199db"},{"code":"((fn [l] (loop [n l res []] (if (> n 0) (recur (dec n) (conj res n)) res))) 5)","problem":57,"user":"50e87252e4b0ebbe794eb7e7"},{"code":"[5, 4, 3, 2 , 1]","problem":57,"user":"50c51827e4b08ad5e08ded0a"},{"code":"`(5 4 3 2 1 )","problem":57,"user":"5372c830e4b06d7f452d9dff"},{"problem":57,"code":"'(5 4 3  2  1)","user":"5ca7b5bbe4b048ec896c5c04"},{"code":"[5, 4, 3, 2, 1]","problem":57,"user":"4e80b856535db62dc21a62b4"},{"code":"[ 5 4 3 2 1]","problem":57,"user":"4e14b925535d04ed9115e7df"},{"problem":57,"code":"[5 4 3 2 1]\n; important note conj adds to the end of vectors \n; and to the beginning of list","user":"53cdbad1e4b00fb29b2212e6"},{"code":"((fn mia [x] (if (> x 0) (conj (mia (- x 1)) x) nil)) 5)","problem":57,"user":"5112f1a1e4b0350614f07a82"},{"code":"'( 5 4 3 2 1)","problem":57,"user":"4f1e5ce5535d64f603146497"},{"problem":57,"code":"(conj '(4 3 2 1 ) 5)","user":"58c7b921e4b021aa9917ed7c"},{"problem":57,"code":"(take 5 (iterate dec 5))","user":"53cacdb5e4b00fb29b2212cb"},{"problem":57,"code":"((fn dg [numb] \n  (if (> numb 0)\n    (conj (dg (dec numb)) numb)))\n5)","user":"5473d5e5e4b0c51c1f4d7284"},{"problem":57,"code":"((fn sean [x] (if (> x 0) (conj (sean (- x 1)) x))) 5)\n'(5 4 3 2 1)","user":"54d2c4c5e4b0e8a36923e5fa"},{"problem":57,"code":"((fn foo [x] \n   (when (> x 0) \n     (conj (foo (dec x)) x)\n     )) 5)","user":"5ac04101e4b073f177442737"},{"problem":57,"code":"((fn foo [x] (if (> x 0) (conj (foo (dec x)) x))) 5)","user":"553d86cfe4b0a04f792994e2"},{"problem":57,"code":"(->> (range 5)\n     (reduce conj [])\n     (map inc)\n     reverse\n     vec)","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":57,"code":"(rseq (vec (range 1 6)))","user":"562fd603e4b0ab312c17ebdd"},{"problem":57,"code":"'[ 5 4 3 2 1]","user":"5c7409b3e4b0fca0c16227c1"},{"problem":57,"code":"((fn [y] (loop [res [] x y] (if (zero? x) res (recur (conj res x) (dec x))))) 5)","user":"5417bc50e4b01498b1a71a0f"},{"code":"((comp reverse rest range inc) 5)","problem":57,"user":"527188cee4b03e8d9a4a73f6"},{"problem":57,"code":"((fn [x]\n  (loop [ y x ys nil]\n    (cond\n      (<= y 0) (reverse ys)\n      true (recur (dec y) (conj ys y)))\n  )) 5)","user":"581f82e2e4b04b46fc4b0f41"},{"problem":57,"code":"; (conj (conj (conj (conj (conj nil 1) 2) 3) 4) 5)\n'(5 4 3 2 1)","user":"56255e2de4b00a550fc90297"},{"problem":57,"code":"((fn [x]\n  (loop [re []\n         cur x\n         nextv (dec x)]\n    (if (= cur 0)\n      re\n      (recur (conj re cur) nextv (dec nextv))))) 5)","user":"59b9e669e4b0a024fb6ae3db"},{"problem":57,"code":"(reverse '( 1 2 3 4 5))","user":"5602842de4b04bb52996e1a1"},{"code":"(reverse (range 1 6))","problem":57,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(apply range (reverse (sort (map dec (cons (reduce * []) (range (reduce + []) (inc (inc (inc (apply + (filter number? (vals *clojure-version*)))))) (- (inc (inc (inc (apply + (filter number? (vals *clojure-version*)))))) (reduce * []))))))))","problem":57,"user":"4ee85476535d93acb0a6687c"},{"problem":57,"code":"((fn [n] (loop [cn n ol []] (if (= cn 0) ol (recur (dec cn) (conj ol cn))))) 5)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":57,"code":";;dec는 lisp의 1-와 같다.\n'(5 4 3 2 1)","user":"54916976e4b0b312c081ff39"},{"problem":57,"code":"(reverse(range 1 6))","user":"5547b201e4b0a04f7929954f"},{"problem":57,"code":"'( 5 4 3  2 1)","user":"5ec3d042e4b08d0ec38692bd"},{"code":"((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5)","problem":57,"user":"4e080562535d04ed9115e7aa"},{"code":"[ 5 4 3 2 1 ]","problem":57,"user":"4e6dc95a535d5021c1a895f1"},{"problem":57,"code":"'(5 4 3 2 1)\n; when condition will return \"nil\" if the condition is false. \n; conj on \"nil\" will return an empty list (). \n; conj on a List will add to the front (List always adds to front).","user":"5d42d394e4b05dd059a5437f"},{"problem":57,"code":";1:\n;((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5)\n\n;2:\n(lazy-seq '(5 4 3 2 1))\n\n;3: (this also works because by the way (= xxx yyy) works\n;(5 4 3 2 1)","user":"55ed1575e4b0121d4835fdd3"},{"code":"[5 4 3 2 1]","problem":57,"user":"4dd66da7535d2dad7130b5c8"},{"problem":57,"code":"((fn [x]\n  (loop [x x, res []]\n    (if (> x 0)\n      (recur (dec x) (conj res x))\n      res))) 5)","user":"5a481e05e4b05d388ecb6b64"},{"problem":57,"code":"'(5 4 3 2     1)","user":"566a0845e4b04acd4f672e05"},{"problem":57,"code":";this is (conj (conj (conj (conj (conj nil 1) 2) 3) 4) 5)\n'(5 4 3 2 1)","user":"57533bc1e4b02ea1147992a6"},{"problem":57,"code":"'(5 4  3  2 1)","user":"55685aa3e4b0c656e3ff1851"},{"problem":57,"code":"`(5, 4, 3, 2, 1)","user":"5b03227be4b0cc2b61a3bd5d"},{"problem":57,"code":"(reverse (range 1 6 ))","user":"5f73000ce4b02876ed9fd094"},{"code":"(seq '(5 4 3 2 1))","problem":57,"user":"506b40ade4b0eda3100c0905"},{"code":"[5 4 3 2 1]\n;'(5 4 3 2 1)","problem":57,"user":"4e8b742a535d65386fec2123"},{"code":"[5 4 3 2 1 ]","problem":57,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":57,"code":"'(5 4 3 2 1\n    )","user":"5c06f813e4b0bdcf453d16bc"},{"code":"[5 4  3 2 1]\n  (list 5 4 3 2 1)\n(seq '(5 4 3 2 1))\n(vec '(5 4 3 2 1))","problem":57,"user":"5036dea0e4b0af0658af77a4"},{"code":"(into [] '(5 4 3 2 1))","problem":57,"user":"504f9ae1e4b0a02f9cffde9c"},{"code":"(list  5 4 3 2 1)","problem":57,"user":"507437c2e4b054001656acd0"},{"code":"(->> (range 5)\n     (map (partial + 1))\n     (reverse))","problem":57,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(->> 6 range next reverse)","problem":57,"user":"4ddcabcb535d6ebe9be03f52"},{"code":"((fn foo [x] (when (< 0 x) (conj (foo (dec x)) x))) 5)","problem":57,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":57,"code":"(conj (conj (conj (conj (conj nil 1) 2) 3) 4) 5)","user":"551d8796e4b07993ea3788ec"},{"problem":57,"code":"'(5 4 3 2 1\t\t)","user":"54508859e4b0e397800069a3"},{"code":"(conj (conj (conj (conj (conj nil 1) 2) 3) 4) 5)\n'(5 4 3 2 1)","problem":57,"user":"5032548ee4b0e78df07b092a"},{"problem":57,"code":"(apply list ((fn [x] (loop [y x z []] (if (> y 0) (recur (dec y) (conj z y)) z))) 5))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":57,"code":"[5, 4 ,3 ,2, 1]","user":"594a7ed1e4b07ddc2dafae02"},{"code":"'(5, 4, 3, 2, 1)","problem":57,"user":"4eb92051535dfed6da9c6d4c"},{"problem":57,"code":";;(conj nil 1) \n;;==> (1)\n\n'(5 4 3 2 1)","user":"57ba55c1e4b0fbc9809a2801"},{"code":"(conj nil 1 2 3 4 5) ; '(5 4 3 2 1)","problem":57,"user":"4fceda40e4b03432b189f407"},{"code":"(sort > ((fn foo [x] (when (< x 6) (conj (foo (inc x)) x))) 1))","problem":57,"user":"4ef2d6c5535dced4c769f222"},{"problem":57,"code":"(reduce (fn [l r] (conj l r)) () (range 1 6))","user":"57481f1fe4b009280f9f2b82"},{"code":"(list 5 4 3 2 1 )","problem":57,"user":"5111575ae4b0253d64f0559f"},{"code":"(reverse (list 1 2 3 4 5))","problem":57,"user":"4df407c3535d08e6dec9fe2e"},{"code":"'(5 4 3  2 1)","problem":57,"user":"4f2a3b8de4b0d6649770a03b"},{"problem":57,"code":"((fn foo [x] (when (> x 0) (conj (foo (- x 1)) x))) 5)","user":"5eb94f6fe4b00a66d4a9524b"},{"problem":57,"code":"(seq (reverse '(1 2 3 4 5)))","user":"57fd085ce4b0d3187e9009a9"},{"code":"(doall (range 5 0 -1))","problem":57,"user":"50b1d166e4b03ea880433554"},{"code":"(list 5 4 3 2 1)","problem":57,"user":"4dfd7ecf535d04ed9115e783"},{"code":"'[5 4 3 2 1]","problem":57,"user":"4ed578d1535d10e5ff6f52d9"},{"problem":57,"code":"(range 5 0 -1)\n\n;'(5 4 3 2 1)","user":"55c387e4e4b0e31453f6498b"},{"problem":57,"code":"'[ 5 4 3 2 1 ]","user":"52658b29e4b03e8d9a4a710c"},{"code":"((fn bla [x] (when (> x 0) (conj (bla (dec x)) x))) 5)","problem":57,"user":"4eca7a87535d6d7199dd3705"},{"code":"'(5 4 3 2 1)","problem":57,"user":"4dd62278535d2dad7130b5c7"},{"problem":57,"code":"(take 5 (reverse (range 1 6)))","user":"5d18d327e4b0902706380dff"},{"problem":57,"code":"'(5 4 3 2 1)\n\n;((fn foo [x] \n;   (when (> x 0) (conj (foo (dec x)) x) )\n; ) 5)","user":"55adf4d7e4b03311e7b732af"},{"code":"`( 5 4 3 2 1)","problem":57,"user":"534eb269e4b084c2834f4aba"},{"code":"'(5,4,3,2,1)","problem":57,"user":"4dee4a9c535d08e6dec9fe11"},{"code":"(conj () 1 2 3 4 5)","problem":57,"user":"4f3bfce2e4b0e243712b1f38"},{"problem":57,"code":"((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5)\n'(5 4 3 2 1)","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":57,"code":"((fn foo1 [x] (when (> x 0) (conj (foo1 (- x 1)) x))) 5)","user":"54ab502fe4b09f271ff37cc4"},{"problem":57,"code":";; conj[oin]. Returns a new collection with the xs 'added'.\n;; therefore, when x > 0, return collection containing x, and call 'foo' with x decremented. Starter for x is 5.\n[ 5 4 3 2 1 ]","user":"5399629fe4b0b51d73faaf05"},{"code":"[5 4 3 2  1]","problem":57,"user":"518aec06e4b06da86c1973c2"},{"problem":57,"code":"`(5, 4 ,3 ,2 ,1)","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"(reverse (range 1 (inc 5)))","problem":57,"user":"4e7dec83535db169f9c796f3"}]