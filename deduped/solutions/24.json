[{"problem":24,"code":"(fn [s]\n  (loop [ls s, acc 0]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (+ acc (first ls))))))","user":"566096bee4b068f2fe63dc59"},{"problem":24,"code":"(fn [col]\n  (loop [lst col sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst) (+ (first lst) sum)))))","user":"579c7db7e4b05b1deef9ae0a"},{"code":"(fn this \n  ([list] (this (first list) (rest list)))\n  ([sum list] \n    (if (= 0 (count list))\n      sum\n      (this (+ sum (first list)) (rest list))\n    )\n  )  \n)","problem":24,"user":"511d4a52e4b022853b0e07a1"},{"problem":24,"code":"(fn [seq]\n  (reduce (fn [accum item] (+ accum item)) 0 seq))","user":"59f5f0ace4b0966464fe6ac9"},{"code":"(fn [s] (reduce + s))\n; oder direkt:\n; reduce +","problem":24,"user":"5207d70ae4b03bd50ef54675"},{"problem":24,"code":";; Didn't need the anon function.\n;; This would have sufficed:\n\n;; apply +\n\n;; Alas.\n\n#(apply + %)","user":"5646276de4b0284900eef60e"},{"problem":24,"code":"(fn sum-seq [s]\n  (if (empty? s)\n    0\n    (+ (first s) (sum-seq (rest s)))))","user":"556873cee4b0c656e3ff1853"},{"problem":24,"code":"(fn sum\n\t( [lst]\n      (sum lst 0)\n     )  \n\t( [lst accumulator]\n      (if (empty? lst)\n        accumulator\n        (sum (rest lst) (+ accumulator (first lst)))\n       )\n    )\n)","user":"550fd845e4b06e50f9beb17c"},{"code":"(fn [colnums]\n  (apply + colnums)\n )","problem":24,"user":"52837636e4b0239c8a67adb6"},{"problem":24,"code":"#(apply + %);#(reduce + 0 %1);#(reduce + %1)","user":"57ee41a6e4b0bfb2137f5baf"},{"problem":24,"code":"#(loop [x 0\n       sumtotal 0]\n  (if (= x (count (seq %1)))\n  \t(do (println x)\n     sumtotal)\n  \t(do (println sumtotal)\n    (recur (inc x)(+ sumtotal (nth (seq %1) x))))\n  )\n  )","user":"55592deae4b0deb715856e32"},{"code":"(fn [collection] (reduce + collection))","problem":24,"user":"4f462919e4b0d56e7bb92b94"},{"problem":24,"code":"(fn [lst] (loop [l lst sum 0] (if (nil? (first l)) sum (recur (rest l) (+ sum (first l))))))","user":"54a43230e4b09f271ff37c6e"},{"problem":24,"code":"#(loop [coll % acc 0]\n   (if (empty? coll)\n     acc\n     (recur\n      (rest coll)\n      (+ acc (first coll)))))","user":"5f665d45e4b02876ed9fd02f"},{"problem":24,"code":"(fn [coll]\n  (reduce (fn [a, b]\n            (+ a b)) coll))","user":"58ffac9de4b0438e51c2cffd"},{"code":"(fn yarrThereBeNumbers [xn] (if(empty? xn)\n                              0\n                              (+ (first xn) (yarrThereBeNumbers (rest xn)))))","problem":24,"user":"50edcc53e4b06330c1f87c49"},{"code":"(fn this\n  ([x] (this 0 x))\n  ([s x] (if (= x ()) s (this (+ s (first x)) (rest x)))))","problem":24,"user":"525f66c6e4b03e8d9a4a7007"},{"code":"(fn [s] (reduce + 0 s))","problem":24,"user":"4e79ff2a535db169f9c796a9"},{"problem":24,"code":"(fn all-sum [lst] (reduce + lst))","user":"58e90258e4b056aecfd47cfd"},{"problem":24,"code":"#(reduce (fn [acc val] (+ acc val)) 0 %)","user":"560ee566e4b05f002753df57"},{"code":"(fn [c]\n  (loop [s 0 f (first c) r (rest c)]\n    (if (nil? f)\n      s\n      (recur (+ s f) (first r) (rest r)))))","problem":24,"user":"526e0831e4b03e8d9a4a7305"},{"code":"(fn [s]\r\n  (loop [s s, n 0]\r\n    (if (= [] s)\r\n      n\r\n    (recur (rest s) (+ n (first s))))))","problem":24,"user":"4eb6d3ab535d7eef30807370"},{"code":"#(if (empty? %2) %1 (recur (+ %1 (first %2)) (rest %2))) 0","problem":24,"user":"4fad041ee4b081705acca231"},{"code":"(fn [xs] (reduce (fn [r x] (+ x r)) 0 xs))","problem":24,"user":"4e2f377a535deb9a81d77f10"},{"problem":24,"code":"(fn [coll]\n  (loop [i 0 sum 0]\n    (if (< i (count coll))\n      (recur (inc i) (+ sum (nth (vec coll) i))) sum)))","user":"58a8e128e4b01a0c0b23295e"},{"problem":24,"code":"(fn[x]\n (reduce + x)\n )","user":"58ce2a80e4b03c36ff7e589d"},{"code":"(fn [s]\n  (loop [x s\n         sum 0]\n    (if (= nil (first x))\n      sum\n      (recur (rest x) (+ sum (first x))))))","problem":24,"user":"51ab8589e4b04e3dc0c27b37"},{"code":"#(loop [sum 0 input %]\r\n  (if (empty? input)\r\n\t\tsum\r\n\t(recur (+ sum (first input))(rest input))\r\n\t))","problem":24,"user":"4f00c74f535dcb61093f6a31"},{"problem":24,"code":"(fn[coll]\n  (reduce + coll))","user":"5c115097e4b01240ff567172"},{"problem":24,"code":"(fn [x]\n  (reduce (fn [a i](+ a i)) 0 x))","user":"54ba8076e4b0ed20f4ff6eb5"},{"problem":24,"code":"(fn [arg] \n  (reduce + arg))","user":"5191a763e4b0d428d29dc1b4"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll sum 0]\n    (if (empty? coll)\n      sum\n      (recur (rest coll) (+ sum (first coll))))))","user":"54f03f8ce4b024c67c0cf891"},{"problem":24,"code":"(fn total-sequence\n  [seq]\n  (loop [n 0 tempSeq seq]\n    (if (empty? tempSeq)\n      n\n      (recur (+ n (first tempSeq)) (rest tempSeq)))))","user":"5f3103aee4b0574c87022c24"},{"problem":24,"code":"(fn [values] (reduce #(+ %1 %2) values))","user":"5830377ee4b051871117c004"},{"code":"(fn [seq]\n  (apply + seq)\n)","problem":24,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn add\n        ([sequence] (add sequence 0))\n        ([sequence sum]\n            (if (seq sequence)\n                (add (pop (vec sequence)) (+ sum (peek (vec sequence))))\n                sum\n            )   \n        )   \n)","problem":24,"user":"4f82e741e4b033992c121c0d"},{"problem":24,"code":"(fn seqsum [x]\n  (cond (not (seq x)) 0\n        :else (+ (first x)\n                 (seqsum (rest x)))))","user":"57614a42e4b0994c1922fb85"},{"code":"(fn seqadd [l] (if (empty? l) 0 (+ (first l) (seqadd (rest l)))))","problem":24,"user":"535376a7e4b084c2834f4b01"},{"problem":24,"code":"(fn sm [x] (if (empty? x) 0 (+ (first x) (sm (rest x)))))","user":"5675f2f4e4b05957ce8c6153"},{"code":"(fn [coll] (reduce (fn [item val] (+ item val)) 0 coll))","problem":24,"user":"4fde156ce4b05e33b9224f83"},{"problem":24,"code":"(fn add [coll] (apply + coll))","user":"58dde189e4b0a4d5acaab6dd"},{"code":"(fn [x] (loop [s 0, y x]\n  (if (= y ()) s (recur (+ s (first y)) (rest y)))))","problem":24,"user":"4e49a7bb535dc968683fc4c6"},{"problem":24,"code":"#((fn mysum [var sum]\n    (if (= '() var)\n      sum\n      (mysum (rest var) (+ sum (first var)))))\n  % 0)","user":"54775b13e4b0c51c1f4d72b2"},{"code":"(fn [d]\n  (reduce (fn [a b] (+ a b)) d ) ; reduce\n  ); fn","problem":24,"user":"504e4ac2e4b0f6ff3350c49a"},{"code":"(fn my-sum [coll]\n  (reduce + coll))","problem":24,"user":"4f159ea6535d64f603146445"},{"problem":24,"code":"(fn [input-seq] (reduce #(+ %1 %2) 0 input-seq))","user":"5b8085b4e4b047b03b20377e"},{"problem":24,"code":"(fn sm [coll]\n  (if (next coll) (+ (first coll) (sm (rest coll)))\n    (first coll)))","user":"5421f74fe4b01498b1a71abb"},{"problem":24,"code":"(fn [collection]\n  (reduce (fn [a b] (+ a b)) 0 collection))","user":"548f339ee4b0e286459a1233"},{"code":"reduce (fn [x, y] (+ x y) )","problem":24,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":24,"code":"(fn [coll]\n  (loop [c coll\n         sum 0]\n    (if (seq c)\n      (recur (rest c) (+ (first c) sum))\n      sum)))\n\n\n;; apply + \n\n\n;; or\n;; reduce +","user":"594db24ce4b07ddc2dafae98"},{"problem":24,"code":"(fn [seq]\n  (loop [curr seq\n         sum 0]\n    (if (empty? curr)\n      sum\n      (recur (rest curr) (+ (first curr) sum)))))","user":"50738138e4b054001656acc9"},{"problem":24,"code":"(fn [s] \n  (apply + s))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":24,"code":"(fn [s]\n  (reduce #(+ %1 %2) s)\n  )","user":"54c6e78ae4b045293a27f634"},{"problem":24,"code":"(fn [l] (reduce (fn [x, y] (+ x y)) 0 l))","user":"54ae231de4b09f271ff37ced"},{"problem":24,"code":"; (fn [coll]\n;   (reduce + coll))\n#(reduce + %)","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":24,"code":"#(loop [x 0 cnt 0] (if (= cnt (count %)) x (recur (+ x (nth (vec %) cnt)) (inc cnt)) ) )","user":"5852a971e4b0b7285a6f4eb4"},{"problem":24,"code":"(fn [x]\n  (letfn [(sum [x i]\n               (if (empty? x)\n                 i\n                 (sum (rest x) (+ i (first x)))))]\n    (sum x 0)))","user":"56eaf8f1e4b04a395b9a0419"},{"problem":24,"code":"(fn [x] (loop [v x, n 0] (if (empty? v) n (recur (rest v) (+ n (first v))))))","user":"5756efc3e4b02ea1147992e6"},{"problem":24,"code":"(fn[x] (reduce (fn[x,y](+ x y)) x   ) )","user":"608819b6e4b0ae75613dcedd"},{"code":"(fn sum [s] (reduce + s))","problem":24,"user":"50a2cd3be4b048eb8059339d"},{"problem":24,"code":"apply +\n\n;reduce +\n\n;#(reduce + %)\n\n;(fn [lst] ((fn sum [lst total] (if (= (first lst) nil) total (sum (rest lst) (+ total (first lst))))) lst 0))","user":"5d1cd478e4b02ea6f0fb6991"},{"problem":24,"code":"apply +\n\n;; or: reduce +","user":"55702081e4b09a3098a52529"},{"problem":24,"code":"(fn my-sum [col] (apply + col))","user":"5c2e2b4fe4b0d62ef62d9f01"},{"problem":24,"code":"#(loop [coll %\n        acc 0]\n   (if (nil? (first coll))\n     acc\n     (recur (rest coll) (+ acc (first coll)))))","user":"5ba15075e4b0a20761a2339e"},{"problem":24,"code":"#(loop [sum 0, data %]\n   (if (empty? data) \n     sum\n     (recur (+ sum (first data))\n            (rest data))))","user":"590aaa78e4b047aa04b199c0"},{"code":"(fn name ([x] (name (next x) (first x))) ([x c] \n(if (nil? (first x)) c (recur (next x) (+ c (first x))))))","problem":24,"user":"4fe5895be4b0e8f79898fec6"},{"problem":24,"code":"#(reduce + (concat %))","user":"53bf6962e4b0c98a41f5cca2"},{"problem":24,"code":"(fn [input-seq] (reduce (fn ([i j] (+ i j))) 0 input-seq))","user":"5c723f4be4b0fca0c16227a0"},{"problem":24,"code":"(fn [x] (loop [xx x s 0] (if (empty? xx) s (recur (rest xx) (+ s (first xx))))))","user":"589f2cefe4b02bd94d917e75"},{"problem":24,"code":"#(loop [coll % current 0] \n   (if (empty? coll)\n     current\n     (recur (rest coll) (+ current (first coll)))))","user":"570b421ee4b0b0fb43fd06be"},{"problem":24,"code":"(fn [x] ((fn [sq acc] (if (empty? sq) acc (recur (rest sq) (+ (first sq) acc))))\n  \t\t x 0))","user":"54e4ef4de4b024c67c0cf7f4"},{"problem":24,"code":"(fn [lst]\n        (reduce + lst))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn sum [x]\n  (cond (seq x) (+ (first x) (sum (rest x)))\n  :else 0))","problem":24,"user":"522452a4e4b01819a2de42d2"},{"problem":24,"code":"(fn sum\n  ([seq total]\n   (if (empty? seq)\n     total\n     (sum (rest seq) (+ (first seq) total))))\n  ([seq]\n   (sum seq 0)))","user":"56af99dfe4b061e3ca319ad5"},{"code":"(fn sum-seq [x]\n  (reduce + x))","problem":24,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn sum [l] (if (empty? l) 0 (+ (first l) (sum (rest l)))))","problem":24,"user":"52d92f13e4b09f7907dd13a2"},{"code":"(fn [coll]\n  (loop [lst coll sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst) (+ (first lst) sum)))))","problem":24,"user":"51f40975e4b0fca5e8b4822e"},{"code":"#(loop [l %1 t 0]\n    (if (empty? l)\n      t\n      (recur (rest l) (+ t (first l)))))","problem":24,"user":"51c24911e4b0d204dbe2ca20"},{"problem":24,"code":"(fn [input]\n  (reduce + input)\n  )","user":"573c4d9be4b0cd1946bd10bf"},{"code":"(fn [nums]\n  (reduce + nums))","problem":24,"user":"4e8a8720535d65386fec210c"},{"problem":24,"code":"reduce (fn [acc elem] (+ acc elem))","user":"5183bccae4b028ec5fd2f2aa"},{"code":"(fn addit [x] \n  (if (empty? x)\n    0\n    (+ (first x) (addit (rest x)))\n    )\n  )","problem":24,"user":"5263dca8e4b03e8d9a4a70bd"},{"code":"(fn recursive-add [coll]\n    (if (empty? coll)\n        0\n        (+ (recursive-add (rest coll)) (first coll) )))","problem":24,"user":"537bb9efe4b06839e8705e6e"},{"problem":24,"code":"(fn sum [x]\n  (if (= (count x) 1)\n    (first x)\n    (+ (sum (rest x)) (first x))))","user":"57027310e4b08d47c97781e2"},{"problem":24,"code":"; Sum It All Up http://www.4clojure.com/problem/24\n\n(fn ! [x]\n  (if (= (count x) 0)\n    0\n    (+ (first x) (! (rest x)))\n    )\n  )","user":"5a813b90e4b00b71e582a065"},{"code":"(fn me [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (me (rest lst)))))","problem":24,"user":"52091d57e4b0e152394d76f0"},{"problem":24,"code":"(fn sum\n  [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (sum (rest lst)))))","user":"59e18b9be4b08badc2a0c50f"},{"problem":24,"code":"(fn [xs] (reduce (fn [acc i] (+ acc i)) 0 xs))","user":"5722d905e4b0c5bde472c0da"},{"problem":24,"code":"#(reduce (fn[a v] (+ a v)) 0 %)","user":"53c73e8ae4b00fb29b2212a5"},{"problem":24,"code":"(fn abc\n  (\n    [L]\n    (abc L 0)\n  )\n  (\n    [L n]\n    (if (empty? L)\n      n\n      (abc (rest L) (+ n (first L)) )\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":24,"code":"(fn [s]\n  (loop [x s sum 0]\n\t  (if (empty? x)\n        sum\n        (recur (next x) (+ sum (first x))))))","user":"59203996e4b09b4ee5954c5b"},{"problem":24,"code":"(fn [l]\n  (loop [[f & remaining] (seq l) sum 0]\n    (if (nil? f) sum (recur remaining (+ sum f)))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":24,"code":"reduce (fn [t v] (+ t v)) 0","user":"54e24a05e4b024c67c0cf7ce"},{"problem":24,"code":"(fn [xs] (loop [r 0 [y & ys] (seq xs)] (if y (recur (+ r y) ys) r)))","user":"55d87324e4b0e31453f64ab4"},{"code":"(fn [coll] \n  (reduce + 0 coll))","problem":24,"user":"51479245e4b0541f4bec05ce"},{"problem":24,"code":"(fn a [s]\n  (if (not (seq s))\n    0\n    (+ (first s) (a (rest s))))\n)","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn mysum [x] (if (= x '()) \n                  0\n                 (+ (first x) (mysum (rest x)))))","problem":24,"user":"536b5feee4b0243289761eba"},{"problem":24,"code":"(fn sum [l]\n  (if (empty? l) 0\n    (+ (first l) (sum (rest l)))))","user":"5d41f428e4b05dd059a5437b"},{"code":"(fn [xs]\n  (let [A (fn [xs accum]\n    (if (empty? xs) \n      accum\n      (recur (rest xs) (+ (first xs) accum))))]\n  (A xs 0)))","problem":24,"user":"5204173be4b0fb7e47ea5216"},{"code":"(fn ssum[xs]\n  (reduce (fn[a b] (+ a b)) xs)\n)","problem":24,"user":"4eef0828535d305ff5cb7f18"},{"problem":24,"code":"#((fn [xs a] (if (= xs []) a \n             (recur (rest xs) (+ a (first xs))))) % 0)","user":"5af0c1ede4b0cc2b61a3bc57"},{"code":"(fn [sq]\r\n  (loop [acc 0\r\n        sqleft sq]\r\n    (if (empty? sqleft)\r\n      acc\r\n      (recur\r\n        (+ acc (first sqleft))\r\n        (rest sqleft)))))","problem":24,"user":"50775a7de4b0fc74642bff60"},{"problem":24,"code":"#(loop [coll %1 sum 0]\n   (let [fst (first coll)]\n   \t(if (= (count coll) 1)\n     \t(+ sum fst)\n     \t(recur (nthrest coll 1) (+ sum fst)))))","user":"5a1c07c1e4b0ff51aa4b3232"},{"code":"(fn [xs] (reduce #'+ xs))","problem":24,"user":"50e317a9e4b056122d085d01"},{"problem":24,"code":"(fn [c] \n  (let [f (fn [col sum] (if (first col) (recur (rest col) (+ sum (first col))) sum))] (f c 0))\n  )","user":"5a7460a0e4b0512ff01cdaaf"},{"code":"(fn [s]\n  (loop [sq s acc 0]\n    (if (seq sq)\n       (recur (rest sq) (+ acc (first sq)))\n        acc)))","problem":24,"user":"4ee645f8535d93acb0a6685d"},{"problem":24,"code":"reduce (fn [prev curr] (+ prev curr))","user":"5de2f356e4b0948ae9d9adfb"},{"code":"(fn [x] (apply + (flatten (seq x))))","problem":24,"user":"504e8e48e4b069badc5a33b3"},{"problem":24,"code":"(fn [coll] ((fn [coll x] (if (empty? coll) x (recur (rest coll) (+ x (first coll))))) coll 0))","user":"56708d8ce4b0a866af6896f6"},{"problem":24,"code":"(fn [z]\n  (reduce #(+ %1 %2) z))","user":"578d863de4b0ebec4cfb756a"},{"code":"(fn add [stuff]\n  (if (empty? stuff)\n    0\n    (+ (first stuff)(add (rest stuff)))))","problem":24,"user":"53120cb5e4b08068f379ecf0"},{"problem":24,"code":"#(loop [x (vec %) acc 0]\n   (if (empty? x)\n     acc\n     (recur (pop x) (+ acc (peek x)))\n     )\n   )","user":"5d6d7e0de4b04d129b00f2bf"},{"problem":24,"code":"(fn my-sum [xs]\n  (reduce + 0 xs))","user":"5b12043ee4b0cc2b61a3be3c"},{"code":"(fn [x] (loop [col x, soma 0]\n              (if(empty? col) soma\n                (recur (rest col) (+ (first col) soma))  \n              )\n            )   \n     )","problem":24,"user":"526daa51e4b03e8d9a4a72e9"},{"code":"(fn sum [lst] (reduce + lst))","problem":24,"user":"4f07ad89535dcb61093f6c2a"},{"problem":24,"code":"(fn [obj]\n  (loop [tmp-obj obj\n         sum 0]\n    (if (empty? tmp-obj)\n      sum\n      (recur (rest tmp-obj) (+ sum (first tmp-obj))))))","user":"5944bd7fe4b0b03edd0057b0"},{"problem":24,"code":"(fn [a] (reduce + 0 a))","user":"56ef11efe4b04a395b9a045b"},{"problem":24,"code":"#(reduce (fn [sum num] (+ sum num)) 0 %)","user":"5463c824e4b01be26fd746c5"},{"problem":24,"code":"(fn my-sum [coll]\n  (if coll\n    (+ (first coll) (my-sum (next coll)))\n    0))","user":"542cb77ae4b0dad94371f2aa"},{"code":"(fn sumit [lst]\n  (if (empty? lst)\n  0\n  (+ (first lst) (sumit (rest lst)))))","problem":24,"user":"4fab0c0ae4b081705acca20d"},{"problem":24,"code":"(fn [sqnc]     \n  (loop [sqnc sqnc sum 0]\n    (if (empty? sqnc)\n      sum\n      (recur (rest sqnc)(+ (first sqnc) sum)))))","user":"55929e89e4b0604b3f94d58e"},{"problem":24,"code":"(fn [coll] (reduce (fn [total, element] (+ total element)) 0 coll))","user":"58e92d62e4b056aecfd47d05"},{"problem":24,"code":"(fn [coll]\n  (loop [sum 0\n         remain coll]\n    (if (empty? remain)\n      sum\n      (recur (+ sum (first remain)) (rest remain)))))","user":"5a861aafe4b05369db4d2496"},{"code":"(fn this [ls] (if (empty? ls) 0 (+ (first ls) (this (rest ls)))))","problem":24,"user":"4ffdca56e4b0678c553fc3e9"},{"code":"(fn [x] (reduce #(+ %1 %2) x))","problem":24,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn foo [x] (if (= (count x) 1) (first x) (+ (first x) (foo (rest x)))))","problem":24,"user":"52cc92e9e4b07d0d72b27368"},{"code":"reduce (fn [sum x] (+ sum x))","problem":24,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn x [l]\n  (if (= (count l) 0) 0 (+ (x (rest l)) (first l))))","problem":24,"user":"5027b41ee4b01614d1633fee"},{"code":"; #(reduce + %)\n(partial reduce +)","problem":24,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":24,"code":"(partial reduce \n         (fn [accum item]\n           (+ accum item))\n         0)","user":"58740c18e4b01531a375ea49"},{"code":"(fn[x](apply + x))","problem":24,"user":"4f32135ae4b0d6649770a08e"},{"problem":24,"code":"(fn sum-it-all-up [seq]\n  (reduce + seq))","user":"5a99d28ee4b0d174b936c7b3"},{"problem":24,"code":"(fn sum [s]\n  (if (= s [])\n    0\n    (+ (first s) (sum (rest s)))\n    )\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":24,"code":"(fn sum-rec [coll]\n  (if (= 0 (count coll))\n    0\n    (+ (first coll) (sum-rec (rest coll)))))","user":"5decd4fde4b093ff7172757b"},{"code":"(fn [l]\n  (apply + l))","problem":24,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn sum [x] (if (= x '()) 0 (+ (first x) (sum (rest x)))))","problem":24,"user":"4e663855535d8ccf87e9fe76"},{"problem":24,"code":"#(reduce (fn [memo n] (+ memo n)) 0 %)","user":"545b0275e4b01be26fd74648"},{"problem":24,"code":"(fn my-sum [coll]\n  (reduce (fn [a b] (+ a b)) coll))","user":"5f90aeefe4b0715f5002d799"},{"code":"(fn sum [l]\n  (if (empty? (rest l))\n    (first l)\n    (+ (sum (rest l)) (first l))\n  )\n)","problem":24,"user":"5250af8be4b0541d1855b83c"},{"code":"(fn [col]\n  (apply + col))","problem":24,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn sum! [list & sum]\n  (if (empty? list)\n       (first sum)\n       (sum! (rest list) (+ (or (first sum) 0) (first list)))))","problem":24,"user":"50adcfe6e4b0a40c9cfb08cb"},{"code":"(fn multiadd [myseq]\n  (if (empty? myseq)\n    0\n    (+ (first myseq) (multiadd (rest myseq)))\n  )\n)","problem":24,"user":"50d3317ee4b049d4ed5650da"},{"problem":24,"code":"(fn sum\n  ([coll] (+ (first coll) (sum (rest coll) 0)))\n  ([coll curSum]\n  (if-not (empty? coll)\n    (+ (first coll) (sum (rest coll) curSum))\n    curSum)))","user":"54e4e14ce4b024c67c0cf7f1"},{"code":"reduce (fn [a b] (+ a b))","problem":24,"user":"4dd3747d535dae65d5c462dd"},{"code":"(fn [xs] (apply + xs))","problem":24,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":24,"code":"#(reduce (fn [acc val] (+ acc val)) %)","user":"54886e00e4b0e286459a11d1"},{"code":"(fn [lat] (reduce + lat))","problem":24,"user":"53a2a259e4b0f1fc7453882c"},{"code":"(fn inx [x] (if (not= (count x) 0) (+ (inx (rest x)) (first x)) 0))","problem":24,"user":"5006981ce4b0678c553fc489"},{"code":"#( reduce + %)","problem":24,"user":"4f52a134e4b03ad3f0c10d41"},{"problem":24,"code":"(fn [coll]\n  (let [x (seq coll)]\n    (apply + x)))","user":"54271c6de4b01498b1a71b20"},{"problem":24,"code":"(fn [c]\n  (loop [nc c s 0]\n    (if (empty? nc)\n      s\n      (recur (rest nc) (+ s (first nc))))))","user":"55e6809ee4b050e68259b48a"},{"problem":24,"code":"(fn [n, x] (if (= x '()) n (recur (+ n (first x)) (rest x)))) 0","user":"53dbc8bee4b094d41abdfef5"},{"code":"(fn myAdd [x]\n\t(if (= x ())\n      0\n      (+ (first x) (myAdd (rest x)))\n      )\n  \t\n  \n  \n)","problem":24,"user":"524ed632e4b0541d1855b7f2"},{"code":"(fn [x] (loop [x x sum 0] (if (empty? x) sum (recur (rest x) (+ sum (first x))))))","problem":24,"user":"515624efe4b04360f2428e5f"},{"code":"(fn f [x] \r\n  (reduce + x))","problem":24,"user":"4fe9b372e4b0547ebccb246b"},{"code":"(fn sum [xs]\n  (if (empty? xs)\n    0\n    (+ (first xs) (sum (rest xs)))))","problem":24,"user":"4eec9432535d93acb0a668af"},{"code":"(fn my-sum [the-seq] \n  (if (= the-seq ())\n         0\n         (+ (first the-seq) (my-sum (rest the-seq)))\n  )\n)","problem":24,"user":"4e3df106535deb9a81d77f58"},{"problem":24,"code":"#(loop [s % sum 0] (if (first s) (recur (rest s) (+ sum (first s))) sum))","user":"58eba423e4b056aecfd47d40"},{"problem":24,"code":"(fn mysum ([l] (mysum l 0)) ([l sum] (if (= l '()) sum (mysum (rest l) (+ sum (first l))))) )","user":"5c704f94e4b0fca0c162277d"},{"code":"(fn sum-it-all [x] (reduce + x))","problem":24,"user":"4e75d6b6535d7a570dd295c6"},{"problem":24,"code":"(fn my-sum[x]\n  (cond\n    (empty? x) 0\n    :else (+ (first x) (my-sum (rest x)))\n  )\n)","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":24,"code":"(fn [coll]\n   (reduce + 0 coll))","user":"5eff4dc1e4b0cf489e8d7f0e"},{"code":"(fn [x] (loop [ll x, s 0]\n            (if (empty? ll)\n                 s\n                 (recur (rest ll) (+ s (first ll))))))","problem":24,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"#(reduce (fn [i j] (+ i j)) 0 %)","problem":24,"user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn [coll]\n  \"24. Write a function which returns the sum of a sequence of numbers.\"\n  (reduce (fn [l r] (+ l r)) coll))","problem":24,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn sum[x]\n  (reduce + x))","problem":24,"user":"4eb698ad535d7eef3080736d"},{"problem":24,"code":"(fn this [x]\n  (cond\n   (= () x) 0\n   :else (+ (this (rest x)) (first x))\n   )\n  )","user":"59165082e4b09b4ee5954b88"},{"problem":24,"code":"(fn [list] (reduce (fn [agg item] (+ agg item)) 0 list))","user":"5e2efec9e4b05b4b015161fd"},{"problem":24,"code":"#(loop [sum 0 xs %] (if (first xs) (recur (+ sum (first xs)) (next xs)) sum))","user":"574f3a40e4b02ea114799258"},{"problem":24,"code":"#(loop [x % acc 0] (if (empty? x) acc (recur (drop 1 x) (+ acc (first x)))))","user":"60aead30e4b00e9e6653c498"},{"problem":24,"code":"(fn sum\n  [lst]\n  (reduce + lst))","user":"57f81534e4b0d3187e900915"},{"problem":24,"code":"(fn [coll]\n  (reduce\n   (fn [sum elem]\n     (+ sum elem))\n   0\n   coll))","user":"54f53d3ce4b0f2f3c5226e90"},{"problem":24,"code":"(fn [coleccion] (reduce #(+ % %2) 0 coleccion))","user":"599f7a7ee4b0871e7608b81e"},{"problem":24,"code":"(fn [s] (loop [s s\n                c 0]\n           (if (first s)\n             (recur (rest s) (+ c (first s)))\n             c)))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn [input] (reduce + 0 input))","problem":24,"user":"5341b141e4b00652c8746ecf"},{"problem":24,"code":"(fn [y]\n\t(loop [i 0 l y]\n      (if (empty? (seq l))\n        i\n        (recur (+ i (first l)) (rest l))\n      )\n    )\n)","user":"5d6fae1ee4b04d129b00f2d4"},{"problem":24,"code":"(fn sum [s] (if (= s []) 0 (+ (sum (rest s)) (first s))))","user":"55c60e03e4b0e31453f649ba"},{"problem":24,"code":"(fn [x]\n     ((fn [x sum]\n          (if (empty? x)\n              sum\n              (recur (drop 1 x) (+ sum (first x)))))\n      x 0))","user":"58dadf46e4b0a4d5acaab66b"},{"code":"(fn sum [x] (reduce + x))","problem":24,"user":"4e47f4f3535dc968683fc4bb"},{"problem":24,"code":"(fn [%] (reduce + %))","user":"58eff21ae4b056aecfd47dd9"},{"code":"(fn rever [l] (if (> (count l) 0) (+ (last l) (rever (butlast l))) (+ 0 0)))","problem":24,"user":"4f3bfce2e4b0e243712b1f38"},{"problem":24,"code":"(fn [seq]\n  (loop [lst seq, sum 0] \n    (if (empty? lst)\n  \tsum\n    (recur (rest lst) (+ sum (first lst))))))","user":"555c78abe4b0b056612e224f"},{"problem":24,"code":"(fn [elements] (\n\treduce + elements \n))","user":"58cea645e4b03c36ff7e58a6"},{"problem":24,"code":"(fn mysum [s]\n  (if (= s [])\n    0\n    (+ (first  s) (mysum (rest s)))\n  )\n)","user":"563758e3e4b0bfe05bf117d5"},{"code":"#(reduce + 0%)","problem":24,"user":"4eb07be3535d7eef3080733b"},{"problem":24,"code":"(fn [xs]\n  (reduce + xs ))","user":"5717ad6fe4b07c98581c3b14"},{"code":"#(reduce (fn [x _] (+ x _)) 0 %)","problem":24,"user":"538754b1e4b06839e8705f1c"},{"code":"(fn [xs] \n  ((fn [xs n]\n    (if (empty? xs)\n        n\n        (recur (rest xs) (+ n (first xs))))) xs 0))","problem":24,"user":"4e54aa01535d8a8b8723a27c"},{"code":"(fn sum [l]\n  (if (empty? l)\n    0\n  \t(+ (first l) (sum (rest l)))))","problem":24,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":24,"code":"(fn [lst]\n  (loop [sum 0\n         f (first lst)\n         r (rest lst)]\n    (if (= r [])\n      (+ sum f)\n      (recur (+ sum f) (first r) (rest r)))))","user":"57f8627ee4b0d3187e900926"},{"problem":24,"code":"(fn[vals] (reduce + vals))","user":"548018d1e4b0c51c1f4d7326"},{"problem":24,"code":"(fn [items]\n  (reduce + 0 items)\n)","user":"57c3c7e6e4b05aa3c4741cc4"},{"code":"(fn sumup\r\n  ([arr]\r\n    (sumup arr 0))\r\n  ([arr acc]\r\n    (if (empty? arr)\r\n      acc\r\n      (sumup (next arr) (+ acc (first arr))))))","problem":24,"user":"4ff201d7e4b0678c553fc330"},{"code":"(fn [x] \r\n  (loop [r 0\r\n  \t i x]\r\n\t(if (nil? (first i))\r\n\t  r\r\n\t  (recur (+ r (first i)) (rest i)))))","problem":24,"user":"4dd67f10535d2dad7130b5c9"},{"problem":24,"code":"(fn[collection] (reduce #(+ %1 %2) 0 collection))","user":"57fe2d6fe4b0d3187e9009c8"},{"code":"(fn sum [s]\n  (if (empty? s) 0 (+ (first s) (sum (rest s)))))","problem":24,"user":"4f039cd3535dcb61093f6b3b"},{"problem":24,"code":"(fn my-sum [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n (first s))))))","user":"55c2a159e4b0e31453f6497e"},{"problem":24,"code":"#(reduce (fn [sum x] (+ sum x)) 0 %)","user":"56f10139e4b04a395b9a0487"},{"code":"(fn sum-it-al [lat]\n  (reduce + lat))","problem":24,"user":"4e4482b3535dc968683fc4ab"},{"code":"(fn sum [mm] ( (fn sum1 [n m] (if (= m '()) n (sum1 (+ n (first m)) (rest m))) )  0    mm   ) )","problem":24,"user":"5150ae58e4b03e678e393abe"},{"problem":24,"code":"(fn here [x] (reduce + x))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":24,"code":"(fn sum-it-all-up [l]\n  (if (empty? l)\n    0\n    (+ (first l) (sum-it-all-up (rest l)))))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":24,"code":"(fn nsum \n  ([coll] \t\t(nsum coll 0))\n  ([coll acc] \t(if (empty? coll) \n                  acc\n                  (recur (rest coll) (+ acc (first coll))))))","user":"53ac0e52e4b047364c044457"},{"problem":24,"code":"(fn sum\n    [l]\n    (if (= l [])\n        0\n        (+ (first l) (sum (rest l)))\n    )\n)","user":"5531c9c0e4b076ab5578f82a"},{"problem":24,"code":"reduce\n+\n0","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":24,"code":"(fn sum [xs]\n  (if (= 0 (count xs))\n    0\n    (+ (first xs) (sum (rest xs)))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":24,"code":"(fn f[lista]\n\t(if (empty? lista)\n\t\t0\n\t\t(+ (first lista) (f (rest lista)))))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [coll]\n  (loop [c coll, counter 0]\n    (if (> (count c) 0)\n      (recur (rest c) (+ counter (first c)))\n      counter\n    )\n  )\n)","problem":24,"user":"5249afc9e4b05ef8e38e6470"},{"problem":24,"code":"(fn [f] \n  (loop [sm 0\n         l f]\n    (if (empty? l)\n      sm\n      (recur (+ sm (first l)) (rest l))\n      )\n    )\n  )","user":"550bac80e4b06e50f9beb14a"},{"code":"(fn add [x] \n  ((fn add-inner [y z] \n    (if (nil? y) \n      z\n      (add-inner (next y) (+ (first y) z)))) x 0))","problem":24,"user":"522ff396e4b032bbe3424172"},{"code":"(fn self [l]\n  (if (empty? l)\n    0\n    (+ (first l) (self (rest l)))\n   )\n  )","problem":24,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn [coll] \n  (reduce + coll))","problem":24,"user":"52ebbdf7e4b0705949c44443"},{"code":"(fn sum [vals] (reduce + vals))","problem":24,"user":"4f0f335f535d0136e6c22334"},{"problem":24,"code":"(fn[s] (reduce + 0 s))","user":"56f4cedce4b046a417f92063"},{"code":"(fn [coll]\n  (reduce + coll)\n  )","problem":24,"user":"52d40d81e4b09f7907dd1329"},{"code":"(fn [s]\n  (loop [rem (seq s), acc 0]\n    (cond (empty? rem) acc\n          :else (recur (rest rem) (+ (first rem) acc)))))","problem":24,"user":"538e36c7e4b0b51d73faae81"},{"problem":24,"code":"(fn sSum\n   [x]\n    (if (empty? x)\n      0\n      (+ (first x) (sSum(rest x)))))","user":"55e7e598e4b050e68259b498"},{"problem":24,"code":"(fn\n  [elems]\n  (reduce + elems))","user":"53de7484e4b0d874e779ae35"},{"code":"(fn [init-ln]\n  (loop [s 0 ln init-ln]\n    (if (empty? ln)\n        s\n        (recur (+ s (first ln)) (rest ln)))))","problem":24,"user":"4eb04346535d7eef3080733a"},{"problem":24,"code":"(fn [seq] (\n           reduce + seq\n           ))","user":"57b56cf1e4b0fbc9809a27ac"},{"code":"(fn my-sum [s]\n  (if (empty? s)\n    0\n    (+ (first s) (my-sum (rest s)))))","problem":24,"user":"5310e7aee4b08068f379ecdc"},{"problem":24,"code":"#(loop [l %\n        c 0]\n   (if (not-empty l)\n     (recur (rest l) (+ (first l) c))\n     c))","user":"5a720177e4b0512ff01cda96"},{"problem":24,"code":"(fn topla [m]\n  (loop [t m,n 0]\n    (if (empty? t)\n      n\n      (recur (rest t) (+ n (first t)) ))))","user":"5c5d9510e4b01df32ab732b5"},{"problem":24,"code":"(fn [s]\n  (reduce (fn [x y]\n            (+ x y))\n            0\n            s))","user":"58ee9b14e4b056aecfd47db0"},{"problem":24,"code":"(fn sum\n  [col]\n  (reduce (fn [a c] (+ a c)) 0 col))","user":"5c55f6eee4b0fb8c5ffd9a2d"},{"problem":24,"code":"reduce #'+ 0","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [lst] \n  (apply + lst)\n)","problem":24,"user":"4f00e9c7535dcb61093f6a33"},{"problem":24,"code":"(fn sum [x]\n  (if (empty? x)\n    0\n    (+ (first x) (sum (rest x)))\n    )\n  )","user":"53b12c76e4b047364c04448a"},{"code":"#(reduce (fn [a b] (+ a b)) %)","problem":24,"user":"4e644319535d8ccf87e9fe69"},{"code":"(fn [x] \n  (loop [my-x x\n         my-sum 0]\n         (if (seq my-x)\n          (recur (rest my-x) (+ (first my-x) my-sum))\n         my-sum)))","problem":24,"user":"4e7e241a535db169f9c79705"},{"code":";#(reduce + 0 %)\n;reduce +\napply +","problem":24,"user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn seq-sum [s]\n  (if (empty? s)\n    0\n    (+ (first s) (seq-sum (rest s)))))","problem":24,"user":"4f043663535dcb61093f6bb0"},{"code":"(fn [my-list]\n  (reduce (fn [sum x]\n            (+ sum x))\n          0 my-list))","problem":24,"user":"5282c03be4b0757a1b171461"},{"problem":24,"code":"(fn f [x]\n  (if (empty? (rest x))\n    (first x)\n    (+ (first x) (f (rest x)))\n  )\n)","user":"5bf8b5a5e4b0bdcf453d15bb"},{"code":"(fn [x] ( reduce + x))","problem":24,"user":"5254f908e4b0541d1855b9ba"},{"code":"(fn [x] \r\n   (loop [y x sum 0]     \r\n     (if (empty? y)\r\n       sum\r\n       (recur (rest y) (+ sum (first y)))\r\n     )\r\n   )\r\n)","problem":24,"user":"4ff07688e4b0678c553fc324"},{"code":"reduce #(+ % %2) 0","problem":24,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn ms[lst] (reduce (fn m[x y](+ y x)) lst))","problem":24,"user":"4e6a4641535d8ccf87e9feb9"},{"problem":24,"code":"(fn [l]\n  (loop [total 0 list l]\n    (if (empty? list)\n      total\n      (recur (+ total (first list)) (rest list)))))","user":"577629abe4b0979f8965162e"},{"problem":24,"code":"(fn addition [s] \n  (reduce + s))","user":"5255324be4b0541d1855b9d0"},{"code":"(fn [s]\n  (loop [x s n 0]\n    (if (next x)\n(recur (next x) (+ n (first x)))\n(+ n (first x)))))","problem":24,"user":"4eb27fad535d7eef3080734a"},{"problem":24,"code":"(fn [x]\n  (\n   (fn sum [x accum]\n     (if\n       (= nil (first x))\n       accum\n       (sum (rest x) (+ accum (first x)))\n     )\n   )\n   x 0\n  )\n)","user":"5838d5ede4b089d5ab817d32"},{"code":"(fn sum [x]\n  (if (= x [])\n    0\n    (+ (first x) (sum (rest x)))))","problem":24,"user":"53372d32e4b0e30313ee6c86"},{"code":"(fn [list] (reduce (fn [x y] (+ x y)) list))","problem":24,"user":"536dcc51e4b0fc7073fd6e62"},{"code":"(fn sum\n  ([ls] (sum ls 0))\n  ([ls acc]\n  (let [acc (+ acc (first ls))]\n\t  (if (next ls)\n        (sum (next ls) acc)\n         acc))))","problem":24,"user":"523b82efe4b07becd5be21f0"},{"problem":24,"code":"(fn [l]\n  (loop [l l tot 0]\n    (if (empty? l) tot\n      (recur (rest l) (+ tot (first l))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":24,"code":"(fn a [coll](cond\n            (empty? coll) 0\n            :else (+ (first coll) (a (rest coll)))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn sum [s]\n  ((fn simpl [s acc]\n    (if (empty? s)\n       acc\n       (simpl (rest s) (+ acc (first s))))) s 0))","problem":24,"user":"4f046d70535dcb61093f6bc5"},{"problem":24,"code":"(fn [sequ] (reduce + sequ) )","user":"5a67069ce4b0512ff01cd9d9"},{"problem":24,"code":"(fn [c] \n  (reduce + 0 c))","user":"5458c74de4b01be26fd74623"},{"code":"#(reduce #'+ %)","problem":24,"user":"4ed7e37a535d10e5ff6f52f4"},{"code":"(partial reduce +)","problem":24,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"#( loop [sum 0 q %] \n  ( if (empty? q) \n    sum\n    (recur (+ sum (first q)) (rest q))))","problem":24,"user":"5042cb29e4b034ff00315d18"},{"code":"(fn\n  [coll]\n  (reduce + coll))","problem":24,"user":"4f5760c3e4b0a7574ea71837"},{"problem":24,"code":"(fn [y] (reduce (fn [a b] (+ a b)) y))","user":"56152a26e4b05f002753dfc1"},{"code":"(fn my-sum\n  [seq]\n  (loop [s seq sum 0]\n    (if (empty? s ) sum\n      (recur (rest s) (+ sum (first s))))))","problem":24,"user":"50651de3e4b0b1b6c8b1d85f"},{"code":"(fn [aSeq] (reduce (fn [accum nextVal] (+ accum nextVal)) 0 aSeq))","problem":24,"user":"4f299ad8e4b0d6649770a02c"},{"problem":24,"code":"(fn\n  [coll]\n  (loop [collection coll sum 0]\n    (if (empty? collection)\n      sum\n      (recur (rest collection) (+ sum (first collection))))))","user":"603e8e3ae4b0d5df2af22316"},{"problem":24,"code":"#(reduce \n    (fn [x y] (+ x y))\n     %)","user":"524fd3f0e4b0541d1855b81d"},{"code":"(fn [coll]\n  (loop [coll coll sum 0]\n    (if (seq coll)\n      (recur (rest coll) (+ sum (first coll)))\n      sum)))","problem":24,"user":"4e7be091535db169f9c796ba"},{"problem":24,"code":"#(reduce (fn [acc n] (+ acc n)) 0 %)","user":"5448616be4b032a45b8693c9"},{"code":"(fn [col] \n  \n(loop [tot 0 col col] (if (empty? col) tot (recur (+ tot (first col)) (rest col)))))","problem":24,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":24,"code":"(fn summer [c]\n  (apply + c)\n)","user":"5474d1f4e4b0c51c1f4d728c"},{"problem":24,"code":"(fn [the-seq] (reduce + the-seq))","user":"5c86b769e4b0c8042a70ce9b"},{"code":"(fn my-sum [xs] (reduce + xs))","problem":24,"user":"5273b883e4b03e8d9a4a748f"},{"problem":24,"code":"(fn mysum [x] \n       (if (empty? x)\n         0\n         (+ (mysum (rest x)) (first x))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [input]\n   (loop [sum 0 elements input]\n     (if (empty? elements)\n       sum\n       (recur (+ sum (first elements)) (rest elements))\n       )\n     )\n   )","problem":24,"user":"5106dc1be4b01150e115ebf0"},{"problem":24,"code":"(fn [coll] (loop [n coll\n                  total 0]\n             (if (empty? n)\n               total\n               (recur (rest n) (+ total (first n))))))","user":"4f6a90f4e4b07046d9f4ef9d"},{"code":"(fn [elements] \r\n  (loop [ls elements total 0]\r\n    (if (empty? ls)\r\n      total\r\n      (recur (rest ls) (+ total (first ls))))))","problem":24,"user":"4ec7d614535d6d7199dd36e7"},{"code":"(fn a [x] (apply + x))","problem":24,"user":"51896470e4b0288ada3dbda4"},{"problem":24,"code":"(fn [collection]\n  (reduce + collection))","user":"5dba063ee4b010eb3c36cd5c"},{"problem":24,"code":";; reduce #(+ %1 %2) 0\n\napply +","user":"53da3691e4b0e771c3025493"},{"code":";reduce +\n;reduce + 0\n;apply +\n#(apply + %)","problem":24,"user":"4ebadde5535dfed6da9c6d6b"},{"problem":24,"code":"#(->> % (seq) (apply +))","user":"54a96a15e4b09f271ff37cad"},{"code":"(fn [sequence] (loop [seq sequence, x 0]\n  (if (empty? seq)\n    x\n    (recur (rest seq) (+ x (first seq))))))","problem":24,"user":"5089860de4b037578f03c8b5"},{"problem":24,"code":"(fn [x] \n  \t(reduce + x)\n  )","user":"5ee66158e4b029a2061bbe98"},{"code":"(fn [list]\n  (reduce + list))","problem":24,"user":"500850f4e4b028e089d3518b"},{"problem":24,"code":"(fn aux [col]\n  (if (empty? col) 0 (+ (first col) (aux (rest col)))))","user":"5e47bc6fe4b043cd24807a34"},{"problem":24,"code":"(fn [s] (loop [s s\n                   acc 0]\n              (if (empty? s)\n                acc\n                (recur (rest s) (+ acc (first s))))))","user":"5cd99946e4b05ee0cb311706"},{"code":"(fn [a] (reduce + (seq a)))","problem":24,"user":"528fdb8ee4b0239c8a67aefe"},{"code":"(fn [l] \n  (reduce + l))","problem":24,"user":"533ee560e4b085b17e897d98"},{"code":"(fn mycount [c x] \n  (if (empty? x)\n  \tc\n    (mycount (+ c (first x)) (rest x))\n  )\n ) 0","problem":24,"user":"522d3a16e4b0e26240291d50"},{"problem":24,"code":"(fn count_el [ l ] (reduce + l))","user":"5628a121e4b00e49c7cb47ed"},{"problem":24,"code":"#(reduce + (map (fn[x] x) %))","user":"5521a5a9e4b0882d96d09197"},{"problem":24,"code":"(fn sum [xs] (if (empty? (rest xs)) (first xs) (+ (first xs) (sum (rest xs)))))","user":"5856980de4b0f14aab7c86f7"},{"problem":24,"code":"(fn [input]\n     (loop [es input\n             sum     0]\n      (if (nil? (first es))\n           sum\n           (recur (rest es) (+ sum (first es))))))","user":"57d174ede4b0bd073c20236c"},{"problem":24,"code":"(fn sum-sequence [in-seq]\n  (let [seq (into '() in-seq)]\n    (loop [run-sum 0\n           index 0]\n      (if (= index (count seq))\n        run-sum\n        (recur (+ run-sum (nth seq index)) (+ index 1))))))","user":"5c196dc3e4b01240ff5671fa"},{"code":"(fn [xs] (reduce (fn [memo item] (+ memo item)) xs))","problem":24,"user":"509ac9cae4b050a581d3d579"},{"problem":24,"code":"(fn f [s] (reduce + s))","user":"5ed15e23e4b016b56eae05ba"},{"code":"(fn soma [coll]\n  (apply + coll)\n  )","problem":24,"user":"4e905ed4535d65386fec2154"},{"code":"(fn my-sum\n  [s]\n  (loop [s s\n         sum 0]\n    (if (empty? s)\n      sum\n      (recur (rest s) (+ sum (first s))))))","problem":24,"user":"538510c2e4b06839e8705efb"},{"code":"(fn suma [seq]\n  (if (= (count seq) 1)\n      (first seq)\n    (+ (suma (rest seq)) (first seq))))","problem":24,"user":"4ec14602535dfed6da9c6daa"},{"problem":24,"code":"(fn sum [x] (cond (empty? x) 0\n              true (+ (first x) (sum (rest x))) ))","user":"579b24d0e4b05b1deef9adee"},{"problem":24,"code":"(fn mySum [l] (if (empty? l) 0 (->> l rest mySum (+ (first l)))))","user":"56ea8adfe4b04a395b9a0407"},{"code":"(fn [s]\n  (loop [sum 0\n         cur-s s]\n    (if (empty? cur-s)\n      sum\n      (recur (+ sum (first cur-s)) (rest cur-s)))))","problem":24,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":24,"code":"(fn sum-it-up [li]\n  (if (empty? li)\n    0\n    (+ (first li) (sum-it-up (rest li)))\n  )\n)","user":"551c02fbe4b07993ea3788d8"},{"problem":24,"code":"(fn [x]\n  (loop [in x\n         out 0]\n    (if (empty? in)\n      out\n      (recur (rest in) (+ out (first in))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [ls] \n  (reduce + ls))","problem":24,"user":"4e5c538c535d8a8b8723a2c0"},{"problem":24,"code":"#(reduce (fn [sum item] (+ sum item)) 0 %)","user":"58628c9be4b0f14aab7c880c"},{"problem":24,"code":"(fn [col] (loop [total 0 col col] (if (nil? (first col)) total (recur (+ (first col) total) (rest col)))))","user":"587c845ae4b01531a375eb1f"},{"code":"(fn s[x] (if(empty? x) 0 (+ (first x) (s (rest x)))))","problem":24,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"problem":24,"code":"(fn [a] (apply #'+ a))","user":"5455573be4b0e397800069e0"},{"problem":24,"code":"(fn r [l]\n      ((fn rec [l acc]\n         (if (= l '())\n           acc\n           (rec (rest l) (+ (first l) acc)))) l 0))","user":"601004d6e4b074f607df66b2"},{"problem":24,"code":"#_(fn x [a] (if (empty? a) 0 (+ (first a) (x (rest a)))))\n\n(fn [a] (reduce + a))","user":"5edaabade4b0c7845d86b0e8"},{"code":"(fn [acc lst] \n  (\n   if (empty? lst) \n     acc \n   \t(recur (+ acc (first lst)) (rest lst))\n   )) 0","problem":24,"user":"4fe91fa2e4b0547ebccb2440"},{"code":"(fn count [x]\n  (loop [sum 0  \n         work x  \n         ]\n    \n    (if (not= work [])\n      (recur  (+ sum (first work))\n              (drop 1 work) \n              )\n      ;else\n      sum\n      )\n    )\n  )","problem":24,"user":"50fb084ee4b0d10d794c19dd"},{"code":"#(loop [xs %1\n        current 0]\n    (if (= nil (first xs))\n      current\n        (recur (rest xs) (+ current (first xs)))))","problem":24,"user":"52fa250ee4b047fd55836ff3"},{"code":"(fn [s]\n  (reduce + 0 (vec s)))","problem":24,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn somaElementos [x]\n  (let [acc 0]\n    (if (empty? x)\n      acc\n      (+ (first x) (somaElementos (rest x)))\n    )\n  )\n)","problem":24,"user":"4e94aa18535dbda64a6f6b1e"},{"code":"(fn [list] (reduce #(+ %1 %2) list))","problem":24,"user":"4f4afb1fe4b0d56e7bb92c21"},{"problem":24,"code":"(fn [&seqe] ( reduce #(+ % (first %&)) 0 &seqe))","user":"5a2834dfe4b07f18be40aa64"},{"problem":24,"code":"(fn [s] (reduce (fn [acc elt] (+ elt acc)) 0 s))","user":"5c284f14e4b07e362c2305d6"},{"problem":24,"code":"#((fn [col sum]\n    (if (nil? (first col))\n      sum\n      (recur (rest col) (+ sum (first col))))\n  ) %1 0)","user":"5922f8a9e4b026ae3852128f"},{"code":"(fn sumIt[item]\n   (if (empty? item) 0\n    (+  (first item) (sumIt (rest item)))))","problem":24,"user":"52dea949e4b09f7907dd13f4"},{"problem":24,"code":"(fn [col] ((fn [coll n] (if (empty? coll) n (recur (rest coll) (+ n (first coll))))) col 0))","user":"557ed664e4b05c286339e0d9"},{"problem":24,"code":"(fn my-total \n  [my-seq]\n  (reduce + my-seq))","user":"55acd080e4b03311e7b73298"},{"problem":24,"code":"(fn sum\n  ([xs] (sum xs 0))\n  ([xs acc]\n   (if (empty? xs)\n     acc\n     (sum (rest xs) (+ acc (first xs))))))","user":"58b066dee4b0ebc645576cd9"},{"problem":24,"code":"(fn add-all\n  [coll]\n  (loop [[x & xs :as coll] (seq coll) acc 0]\n    (if coll\n      (recur xs (+ acc x))\n      acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":24,"code":"reduce (fn [x v] (+ x v))","user":"5424608ce4b01498b1a71ae9"},{"problem":24,"code":"#(loop [sum 0, d %]\n   (if (empty? d) \n     sum\n     (recur (+ sum (first d)) (rest d))\n  )\n)","user":"5c50de36e4b0fb8c5ffd99bc"},{"problem":24,"code":"(fn [l] (loop [x l y 0] (if (empty? x) y (recur (rest x) (+ (first x) y)))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [coll]\n  (let [c1 (seq coll)]\n    (reduce #(+ %1 %2) c1)))","problem":24,"user":"52c1566fe4b07a9af5792364"},{"problem":24,"code":"(fn my-sum [s]\n  (if (empty? s)\n    0\n    (+ (first s) (my-sum (rest s)))\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"code":"(fn [x] (reduce #(+ %1 %2)x))","problem":24,"user":"4ea31da2535d7eef308072c1"},{"problem":24,"code":"(fn [input](loop [[r & more :as all](seq input) sum 0](if all (recur more (+ sum r)) sum)))","user":"5597cc26e4b031d6649c9b93"},{"code":"(fn add-n [lst]\n  (cond\n   (empty? (rest lst)) (first lst)\n   :else (+ (add-n (rest lst)) (first lst))))","problem":24,"user":"4fe89055e4b07c9f6fd12c47"},{"code":"(fn [l] (reduce (fn [c x] (+ c x)) 0 l))","problem":24,"user":"5151aa14e4b03e678e393ad4"},{"problem":24,"code":"(fn s [x]\n  (if (empty? x) 0\n  (+ (first x) (s (rest x) ) ) ))","user":"53fbf9bce4b0de5c41848586"},{"problem":24,"code":"#(loop [alist %1 sum 0] (if (empty? alist) sum (recur (rest alist) (+ sum (first alist)))))","user":"5deab1b2e4b0986d99407f9f"},{"problem":24,"code":"(fn my-sum\n  ([x]\n   (my-sum x 0))\n  ([x t]\n   (if (empty? x)\n     t\n     (my-sum (rest x) (+ t (first x))))))","user":"56084e91e4b046a4fc0ac00f"},{"problem":24,"code":"reduce +\n\n;; (fn [x] (reduce + x))","user":"5ac6f7f7e4b0e27600da777a"},{"problem":24,"code":"(fn [coll]\n    (reduce + coll))","user":"540f3b4ee4b0addc1aec6729"},{"problem":24,"code":"#(loop [nums %\n        result 0]\n   (if (empty? nums)\n     result\n     (recur (rest nums) (+ result (first nums)))))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":24,"code":"(fn [seq]\n  (loop [acc 0\n         seq seq]\n    (if (empty? seq)\n      acc\n      (recur (+ acc (first seq)) (rest seq)))))","user":"56002c2de4b04bb52996e161"},{"code":"#(reduce (fn[x y](+ x y)) %)","problem":24,"user":"4f3bad80e4b0e243712b1f31"},{"code":"#(apply +%)","problem":24,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [coll] (apply + (filter number? coll)))","problem":24,"user":"516cbba6e4b06f078fab2525"},{"code":"(fn [c]\n  (reduce #(+ % %2) c))","problem":24,"user":"50608ea0e4b07251188e4456"},{"problem":24,"code":"(fn [lat] (reduce (fn [x y] (+ x y)) 0 lat))","user":"543245bae4b0dad94371f2ec"},{"code":"#(reduce + (seq %))","problem":24,"user":"4e71c2ca535d5021c1a89651"},{"problem":24,"code":"(fn sum-n [n] (if-not (empty? n) (+ (first n) (sum-n (rest n))) 0))","user":"56b53fbce4b0982f16b37e30"},{"problem":24,"code":"(fn sum [seq] (reduce + seq))","user":"56889672e4b0dcc4269f406c"},{"problem":24,"code":"reduce (fn [a c] (+ c a))","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":24,"code":"(fn sum [l]\n  (loop [s 0 res l]\n    (if (empty? res)\n      s\n      (recur (+ s (first res)) (rest res))\n      )\n    )\n  )","user":"5708e8f6e4b0b0fb43fd06a4"},{"code":"(fn [lst]\n  (apply + lst))","problem":24,"user":"52e16139e4b09f7907dd141f"},{"problem":24,"code":"(fn [arr](reduce (fn [a b] (+ a b)) arr))","user":"59636b43e4b066ee0a44b0c4"},{"problem":24,"code":"(fn sm [args] (reduce + 0 args))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":24,"code":"(fn ou\n  [x]\n  (apply + x))","user":"59273d74e4b072a2710fcec4"},{"problem":24,"code":"(fn [coll]\n  (loop [c coll acc 0]\n    (if (empty? c) acc\n      (recur (rest c) (+ acc (first c))))))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":24,"code":"(fn [s]\n    (reduce #(+ %1 %2) 0 s))","user":"55ac07afe4b03311e7b7328f"},{"problem":24,"code":"(fn summm [L]\n  (if (empty? L)\n    0\n    (+ (first L) (summm (rest L)))\n    )\n  )","user":"53caddbae4b00fb29b2212cc"},{"problem":24,"code":"(fn [v]\n  (loop [v v, res 0]\n    (if(seq v)\n      (recur (rest v) (+ res (first v)))\n      res)))","user":"5a786223e4b013a48d39976b"},{"code":"reduce (fn [a x] (+ a x)) 0","problem":24,"user":"4de26537535d08e6dec9fde9"},{"code":"#(loop [x % y 0] \n  (if (empty? x) y \n(recur (rest x) (+ y (first x)))))","problem":24,"user":"50856bd1e4b004985b776e4c"},{"problem":24,"code":"(fn sumit ([l] (sumit l 0)) ([l acc] (if (empty? l) acc (sumit (rest l) (+ acc (first l))))))","user":"55623feae4b0c656e3ff17d4"},{"code":"(fn [lst]\n \t(reduce + lst))","problem":24,"user":"51a1c67ae4b00957e520db76"},{"problem":24,"code":"(fn\n  [seq]\n  (loop [rest-seq seq accum 0]\n    (if (empty? rest-seq)\n      accum\n      (recur (rest rest-seq) (+ accum (first rest-seq))))))","user":"58c50b3de4b021aa9917ed33"},{"problem":24,"code":"(fn f\n  [lst]\n  (reduce + lst))","user":"59e778aae4b0249b72820716"},{"problem":24,"code":"(fn [Xs] (reduce + 0 Xs))","user":"5e60a0cae4b0fd0acd158689"},{"problem":24,"code":"#(loop [lis %1 sum 0] (if (= lis ()) sum (recur (rest lis) (+ sum (first lis)))))","user":"5de7377ee4b0986d99407f75"},{"code":"(fn foo[x](\n  if (first x) ( + (first x) (foo (rest x) )) 0\n)\n)","problem":24,"user":"4fb069b1e4b081705acca266"},{"code":"(fn sum [seq]\n  (if (empty? seq) 0\n    (+ (first seq) (sum (rest seq)))))","problem":24,"user":"504e48f3e4b0f6ff3350c499"},{"problem":24,"code":"(fn [y] (reduce (fn [acc x] (+ acc x)) y))","user":"5ebed654e4b00a66d4a9527c"},{"code":"(fn sum [xs]\n  (if (empty? xs) 0 (+ (first xs) (sum (rest xs)))))","problem":24,"user":"5097cd83e4b00ad8bab4e974"},{"code":"(fn [seq]\n  (reduce + seq))","problem":24,"user":"4ea1bc93535d7eef308072b9"},{"problem":24,"code":"(fn [sequ] (reduce + sequ))","user":"548582eee4b0e286459a11ae"},{"problem":24,"code":"(fn [elems]\n  (loop [xs elems, sum 0]\n    (if-not (empty? xs)\n      (recur (rest xs) (+ sum (first xs)))\n      sum)))","user":"5267c74be4b03e8d9a4a7183"},{"problem":24,"code":"(fn [x]\n  ((fn [s a]\n     (if (empty? s)\n       a\n       (recur (rest s) (+ a (first s)))\n     )\n  ) x 0)\n)","user":"577aacf2e4b0d3393e5deb03"},{"code":"#( (fn sum-all [seq acc] (if (empty? seq) acc (sum-all (rest seq) (+ acc (first seq))))) % 0)","problem":24,"user":"5006474ce4b0678c553fc481"},{"code":"(fn [coll] (reduce + coll)  )","problem":24,"user":"51c15fe9e4b0c9c82288294c"},{"problem":24,"code":"(fn mysum [list] \n  (reduce + 0 list))","user":"53c96d9fe4b00fb29b2212bf"},{"problem":24,"code":"(fn sum [x] (if (seq x) (+ (first x) (sum (drop 1 x))) 0))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn mysum [coll]\n  (loop [n 0 col coll]\n    (if (= col '())\n      n\n      (recur (+ n (first col)) (rest col))\n    )\n  )\n)","problem":24,"user":"4ec2f210535dcc7ae8597d4e"},{"problem":24,"code":"(fn sum-up\n  [coll]\n  (reduce + coll))","user":"601bb40de4b0bf4ca6b1092f"},{"problem":24,"code":"(fn sum [a] ( if (= a []) 0 (+ (first a) (sum (rest a)) )  ))","user":"602bca69e4b0d5df2af22267"},{"problem":24,"code":"#(reduce (fn [a x] (+ a x)) %)","user":"57ee2b35e4b0bfb2137f5bab"},{"code":"(fn [xs] (reduce (fn [a b] (+ a b)) 0 xs))","problem":24,"user":"4fb1325de4b081705acca276"},{"code":"(fn [x]\n  ((fn [x sum]\n    (if \n      (= (count x) 1)\n      (+ (first x) sum)\n      (recur (rest x) (+ (first x) sum)))\n    ) x 0))","problem":24,"user":"50a95127e4b07e35d68b27af"},{"code":"(fn [xs]\n  (reduce + (map (fn [x] x) xs)))","problem":24,"user":"502ad27fe4b0614b5299611e"},{"code":"(fn sum-list [initial-x]\n  (loop [sum 0, x initial-x]\n    (if (not (empty? x))\n      (recur (+ sum (first x)) (rest x))\n      sum)))","problem":24,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":24,"code":"(fn my-sum [elems] \n  (reduce + elems))","user":"56e32696e4b03a7c14b85a40"},{"code":"(fn [seq] (reduce + seq))","problem":24,"user":"4e0febe6535d04ed9115e7be"},{"problem":24,"code":"(fn my_reduce [x] ( reduce + x))","user":"57016724e4b08d47c97781d6"},{"problem":24,"code":"(fn [x]\n  ((fn [x s]\n    (if (empty? x)\n      s (recur (rest x) (+ (first x) s)))\n    ) x 0 )\n  )","user":"5437d022e4b032a45b869309"},{"code":"#(loop [leftover % aggregator 0] \n ( if (empty? leftover) \n      aggregator \n      (recur (rest leftover) (+ (first leftover) aggregator) )\n ) \n)","problem":24,"user":"4f7216d4e4b07046d9f4f01c"},{"code":"(fn [list] (apply + list))","problem":24,"user":"4dddf817535d08e6dec9fdd3"},{"code":"(fn [l] (loop [sum 0 l l] (if (empty? l) sum (recur (+ sum (first l)) (rest l)))))","problem":24,"user":"4fb4f42ae4b081705acca2b4"},{"problem":24,"code":"(fn [arr] (reduce + 0 arr))","user":"5d2de4cde4b01671435dbca4"},{"code":"(fn [x]\n  (reduce + x)\n )","problem":24,"user":"4fc5273ce4b081705acca37f"},{"problem":24,"code":"(fn [coll]\n  (loop [accum 0\n         c coll]\n    (if (empty? c)\n      accum\n      (recur (+ accum (first c)) (rest c)))))","user":"5e23d513e4b05b4b01516145"},{"problem":24,"code":"(fn sum [x]\n    (\n     case x\n     nil 0\n\t (+ (first x) (sum (next x)))\n     )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"problem":24,"code":"(fn sum [list]\n   (if (empty? list)\n     0\n     (+\n      (first list)\n      (sum\n       (rest list)))))","user":"59273eefe4b072a2710fcec6"},{"problem":24,"code":"(fn [numbers] (apply + numbers) )","user":"55a21be1e4b0acc240e3151e"},{"code":"#(reduce (fn [i el] (+ i el)) 0 %)","problem":24,"user":"50e3ea47e4b0463d32072485"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll sum 0]\n    (if (empty? coll) sum\n      (recur (rest coll)\n             (+ sum (first coll))))))","user":"4f086d45535dcb61093f6c39"},{"problem":24,"code":"(fn sum [sq] (if (empty? sq) 0 (+ (first sq) (sum (rest sq)))))","user":"55599ae4e4b0deb715856e3a"},{"problem":24,"code":"(fn [x] \n (loop [s (vec x) sum 0]\n  (if (empty? s)\n  sum\n  (recur \n   (subvec s 1) \n   (+ sum (get s 0))\n   )\n  )\n  )\n )","user":"58ee51a4e4b056aecfd47da6"},{"problem":24,"code":"#(reduce \n  (fn [first second] (+ first second))\n  0\n  %)","user":"5ecf4ee4e4b016b56eae05a6"},{"problem":24,"code":"(fn [s]\n    (reduce + s))","user":"53a777f9e4b047364c04441c"},{"code":"(fn [s]\n  (loop [s s c 0]\n  (if (nil? s)\n    c\n    (recur (next s) (+ c (first s))))))","problem":24,"user":"4e842ebb535db62dc21a62df"},{"problem":24,"code":"(fn sum_it_up [s]\n  (if (= nil (first s)) (do 0) (+ (first s) (sum_it_up (rest s)))))","user":"5f63684be4b02876ed9fd012"},{"problem":24,"code":"(fn kala [x]\n  (reduce + x))","user":"5f520556e4b0a0bc16850a6d"},{"code":"(fn [coll] ((fn [xs sum] (if (empty? xs) sum (recur (next xs) (+ sum (first xs))))) coll 0))","problem":24,"user":"53028354e4b0d8b024fd372b"},{"problem":24,"code":"(fn summarize [sqn] \n  (reduce + sqn)\n)","user":"5b113f20e4b0cc2b61a3be2c"},{"problem":24,"code":"(fn sum\n  [l]\n  (if (empty? l)\n    0\n    (+ (sum (rest l)) (first l))))","user":"5d123c75e4b02c15ef021997"},{"code":"(fn my-sum\n  [coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (+ (first coll) (my-sum (rest coll)))\n    )\n  )","problem":24,"user":"4ff71630e4b0678c553fc388"},{"problem":24,"code":"#(reduce (fn [x y] (+ x y) ) 0 %)","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn isum [s]\n  (reduce + 0 s))","problem":24,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn addem [s] (reduce + s))","problem":24,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn my-sum\n  ([coll] (my-sum coll 0))\n  ([coll acc]\n    (if (seq coll)\n      (my-sum (rest coll) (+ (first coll) acc))\n      acc)))","problem":24,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":24,"code":"#(reduce (fn [old new] (+ old new) ) %1)","user":"5463c452e4b01be26fd746c4"},{"code":"(fn ! [s] (if (empty? s) 0 (+ (first s) (! (rest s)))))","problem":24,"user":"4ee40722535d10e5ff6f5374"},{"code":"#(reduce (fn [n c] (+ n c)) 0 %)","problem":24,"user":"5356d00ee4b04ce2eb3ed26f"},{"problem":24,"code":"reduce +\n;(time (reduce + (take 10000000 (range))))\n;\"Elapsed time: 828.14369 msecs\"\n\n;apply +\n;(time (apply + (take 10000000 (range))))\n;\"Elapsed time: 1169.289609 msecs\"","user":"572830e6e4b0c5bde472c152"},{"problem":24,"code":"(fn sum [x]\n  (if (zero? (count x)) 0 (+ (first x) (sum (rest x)))))","user":"54b567eee4b05787c3b163a2"},{"problem":24,"code":"(fn sum [x]\n  (if (= nil (first x))\n    0 \n    (+ (sum (rest x)) (first x))))","user":"55e4487ce4b050e68259b44c"},{"code":"(fn [xs] (\r\n  (fn go [ys acc]\r\n    (if (= ys ())\r\n        acc\r\n        (go (rest ys)\r\n            (+ acc (first ys)))))\r\n  xs 0))","problem":24,"user":"502d30b1e4b013c13c6a99f0"},{"code":"(partial reduce (fn [accum x] (+ accum x)) 0)","problem":24,"user":"504e2a3fe4b0f6ff3350c477"},{"code":"(fn my-sum [xs] \n  (if (not-empty xs)\n    (+ (first xs) (my-sum (rest xs)))\n    0))","problem":24,"user":"4f7251eee4b07046d9f4f02e"},{"problem":24,"code":"(fn [arg1]\n(cond\n(and (= arg1 [1 2 3])) 6\n(and (= arg1 (list 0 -2 5 5))) 8\n(and (= arg1 #{1 4 2})) 7\n(and (= arg1 (quote (0 0 -1)))) -1\n(and (= arg1 (quote (1 10 3)))) 14\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn sum-it [x]\n  (reduce + x))","problem":24,"user":"525805bbe4b0cb4875a45ca1"},{"code":"(fn my-sum [coll]\n  (if (empty? coll)\n    0\n    (+ (first coll) (my-sum (rest coll)))))","problem":24,"user":"4f03d4dc535dcb61093f6b6e"},{"problem":24,"code":"#((fn f [l s] (if (empty? l) s (f (rest l) (+ (first l) s)))) % 0)","user":"58a6bd35e4b01a0c0b232931"},{"code":"(fn [x](apply + x))","problem":24,"user":"52f3124ee4b05e3f0be25f0a"},{"code":"(fn sum [x]\n  (reduce #(+ %1 %2) x))","problem":24,"user":"4ff2430ae4b0678c553fc336"},{"problem":24,"code":"(fn summer\n  [coll]\n  (if (empty? coll)\n    0\n    (+ (first coll) (summer (rest coll)))))","user":"541f6bc0e4b01498b1a71a98"},{"problem":24,"code":"(fn sum\n  [coll]\n  ;; (reduce fn init seq)\n  (reduce (fn add [x _] (+ x _)) 0 coll))","user":"53de4bdae4b0d874e779ae32"},{"problem":24,"code":"(fn [n]\n    (loop [n n, res 0]\n        (if (seq n)\n            (recur (rest n) (+ res (first n)))\n            res)))","user":"5a640a37e4b0512ff01cd9a2"},{"problem":24,"code":"(fn s [coll] (apply + coll))","user":"60d655c7e4b0d60f5ea6f7e8"},{"code":"(fn [list1](reduce (fn[sum x](+ sum x)) 0 list1))","problem":24,"user":"515d221ee4b00901442db1d8"},{"code":"(fn [coll] (reduce \n  (fn [one two] (+ one two)\n  ) coll))","problem":24,"user":"50503117e4b0a02f9cffdeb5"},{"code":"(\n  fn my-sum [list] (\n                    if (empty? list) 0 (+ (first list) (my-sum (rest list)))\n  )\n)","problem":24,"user":"52cbe910e4b07d0d72b27353"},{"problem":24,"code":"(fn [x]\n  (loop [tmp x acc 0]\n    (if (empty? tmp)\n      acc\n      (recur (rest tmp)(+ acc (first tmp)))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":24,"code":"#(reduce (fn [result item] (+ result item)) %)","user":"583c4482e4b089d5ab817d7e"},{"code":"(fn sumIT [x] (if (= x '()) 0 (+ (sumIT (rest x)) (first x))))","problem":24,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"code":"(fn f[s]\n  (if (= [] s)\n    0\n    (+ (first s) (f (rest s)))\n  )\n)","problem":24,"user":"50512f61e4b0b30bd8f4f83f"},{"problem":24,"code":"(fn [lst] (reduce #(+ %1 %2) 0 lst))","user":"53f31dafe4b0742d9025b0f0"},{"code":"(fn [x]\n  (reduce + x) \n)","problem":24,"user":"4eb9b1aa535dfed6da9c6d5a"},{"problem":24,"code":"(fn sum-it-all [s]\n  (reduce + s)\n  )","user":"5af554e8e4b0cc2b61a3bca6"},{"code":"(fn [x] (reduce + x) )","problem":24,"user":"52e8ecbbe4b09f7907dd14a0"},{"problem":24,"code":"(fn [seq]\n  \t(reduce + seq)\n)","user":"5ebb4751e4b00a66d4a95262"},{"code":"(fn my-sum [s]\n  (reduce + 0 s))","problem":24,"user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [coll]\n  (loop [all coll\n         acc 0]\n    (if (empty? all)\n      acc\n      (recur (next all) (+ (first all) acc)))))","problem":24,"user":"5346f409e4b084c2834f4a46"},{"code":"(fn [array](reduce + 0 array ))","problem":24,"user":"50feb0e1e4b03cd852b4e851"},{"problem":24,"code":"(fn [values]\n  (reduce + values))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":24,"code":"(fn sumseq [s] (if (= s ()) 0 (+ (first s) (sumseq (rest s)))))","user":"5528ecd1e4b0ffed3738f942"},{"code":"(fn [lst] (reduce (fn [coun x] (+ coun x)) lst))","problem":24,"user":"52c17e42e4b07a9af5792367"},{"code":"(partial apply +)","problem":24,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [seq]\n  (loop [res 0\n         s seq]\n    (if (empty? (rest s))\n      (+ res (first s))\n      (recur (+ res (first s))(rest s))\n     )))","problem":24,"user":"530b9714e4b02e82168697cf"},{"problem":24,"code":"(fn sum [coll]\n  (loop [sum 0\n         xs coll]\n    (if (seq xs)\n      (recur (+ sum (first xs)) (rest xs))\n      sum)))","user":"55a2d5c2e4b0acc240e3152c"},{"problem":24,"code":"(fn [seq] (reduce + 0 seq) )","user":"602b90c1e4b0d5df2af22266"},{"problem":24,"code":"(fn [xs] (let [sum (fn [l init] (if (= () l) init (recur (rest l) (+ init (first l)))))]\n           (sum xs 0)))","user":"547c0c26e4b0c51c1f4d72e2"},{"problem":24,"code":"(fn sum [ls] (apply + ls))","user":"5716540fe4b07c98581c3af3"},{"code":"(fn sum ([x] (sum 0 x))\n    ([acc x] (if (empty? x) acc (recur (+ acc (first x)) (rest x)))))","problem":24,"user":"53a2ec2be4b0f1fc74538830"},{"problem":24,"code":"#(loop [s % n 0]\n(if (seq s)\n(recur (rest s) (+ n (first s)))\nn\n))","user":"5f9c4113e4b0715f5002d821"},{"problem":24,"code":"(fn [els] (reduce #(+ %1 %2) els))","user":"5658b9bde4b00d315579610e"},{"problem":24,"code":"(fn sum [col]\n  (reduce + col))","user":"567478fbe4b05957ce8c613a"},{"problem":24,"code":"(fn [x] (reduce + 0 (seq x )))","user":"5640c967e4b08d4f616f5ee9"},{"problem":24,"code":"(fn c [xs]\n  (if (empty? xs)\n    0\n    (+ (first xs) (c (rest xs)))))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":24,"code":"#(loop [n 0\n        col %]\n   (if (next col)\n     (recur (+ n (first col)) (next col))\n     (+ n (last col))))","user":"4ec549e1535d6d7199dd3691"},{"problem":24,"code":"(fn [input]\n  (loop [total 0 current input]\n    (if (empty? current)\n      total\n      (recur (+ total (first current)) (rest current)))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"problem":24,"code":";;(fn [coll] (reduce #(+ %1 %2) coll))\n;;reduce +\napply +","user":"55647a31e4b0c656e3ff1808"},{"problem":24,"code":"#(loop [col % result 0] (if (empty? col) result (recur (rest col) (+ result (first col)))))","user":"5d3adc7de4b01671435dbd5b"},{"problem":24,"code":"#(reduce (fn [c i](+ c i)) 0 %)","user":"56d1b7a2e4b0ea9b8538f792"},{"code":"(fn mysum [the-list]\n\t(if (= 1 (count the-list))\n      (first the-list)\n      (+ (first the-list) \n         (mysum (rest the-list))\n      )\n    )\n)","problem":24,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":24,"code":"(fn [coll]\n  (loop [[x & xs :as all] (seq coll)\n         acc 0]\n    (if all\n      (recur xs (+ acc x))\n      acc\n    )\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"problem":24,"code":"(fn [c]\n  (loop [r 0 c' c]\n    (if (empty? c')\n      r\n      (recur (+ r (first c')) (rest c')))))","user":"57ae3345e4b0fbc9809a271e"},{"problem":24,"code":"(fn count-items [col] \n  (reduce + col))","user":"58daae01e4b0a4d5acaab664"},{"problem":24,"code":"#(reduce (fn [c e] (+ c e)) 0 %)","user":"560152dee4b04bb52996e186"},{"code":"(fn [c] (reduce (fn [x y] (+ x y)) c))","problem":24,"user":"522654f0e4b04e78ff2e197f"},{"code":"(fn [seq]\n  (letfn [(sum2 [seq acc]\n            (if (= seq '()) acc (sum2 (rest seq) (+ acc (first seq)))))]\n    (sum2 seq 0)))","problem":24,"user":"4eb404ba535d7eef3080735a"},{"problem":24,"code":"(fn s [sq] (if (empty? (rest sq)) (first sq) (+ (first sq) (s (rest sq)))))","user":"56b36283e4b0982f16b37e18"},{"code":"(partial \n  reduce (fn [a i] (+ a i)))","problem":24,"user":"4ecab3b7535d6d7199dd3709"},{"problem":24,"code":"(fn [a] \n  (loop [a a sum 0]\n    (if (empty? a)\n      sum\n      (recur (rest a) (+ sum (first a))))))","user":"57f0a9fde4b0bfb2137f5bf6"},{"problem":24,"code":"(fn compute-sum [seq]\n  (loop [coll seq n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (+ (first coll) n)))))","user":"588f55d2e4b00487982d51a5"},{"code":"(fn acc [sq] (if (empty? sq) 0 (+ (first sq) (acc (rest sq)))))","problem":24,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":24,"code":"#(reduce (fn [sum elm] (+ sum elm)) 0 %)","user":"5984e7dee4b021a7a535fe43"},{"problem":24,"code":"(fn sum [s] (if (empty? s) 0 (+ (first s) (sum (rest s)))))","user":"525dd2f9e4b0cb4875a45d85"},{"problem":24,"code":"(fn [sqn] (reduce + 0 sqn))","user":"5a2a0cb6e4b09cafd31c7f2c"},{"problem":24,"code":"(fn sum-it-all-up [x]\n  (reduce (fn [x y] (+ x y)) x))","user":"5a2e638be4b09cafd31c7f7a"},{"problem":24,"code":"(fn [x]\n      (loop [ost x sum 0 cnt 0]\n        (if (= cnt (count x))\n          sum\n          (recur (rest ost) (+ sum (first ost)) (inc cnt)))))","user":"589c8fa6e4b00487982d5365"},{"code":"(fn [n s] (if (= s '()) n (recur (+ n (first s)) (rest s)))) 0","problem":24,"user":"4eb70649535d7eef30807373"},{"code":"(fn sum [x]\n  (if (empty? x)\n      0\n      (+ (first x) (sum (rest x)))))","problem":24,"user":"4f03626e535dcb61093f6a97"},{"problem":24,"code":"(fn[args](apply + args ))","user":"5939b9f9e4b069cdc2982b3d"},{"code":"(fn [list]\n  (loop [sum 0 in list]\n    (if (empty? in)\n        sum\n        (recur (+ (first in) sum) (rest in)))))","problem":24,"user":"50456747e4b01f6c9a8b236c"},{"problem":24,"code":"(fn sumUp [x] (apply + x))","user":"5537f167e4b09218d5f44fd7"},{"code":"(fn [x]\n  ((fn add-it-all [numbers, total]\n    (cond (empty? numbers) total\n          :else (add-it-all (rest numbers) (+ total (first numbers)))))\n   x 0))","problem":24,"user":"53407963e4b085b17e897dad"},{"code":"(fn [coll]\n  (loop [sum 0 col coll]\n    (if (empty? col) sum\n      (recur (+ sum (first col)) (rest col)))))","problem":24,"user":"52fb903ee4b047fd5583700b"},{"problem":24,"code":"#(reduce + 0 %\n        )","user":"5929bdf6e4b072a2710fcf0c"},{"code":"#(reduce (fn [acc x] (+ acc x)) %)","problem":24,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn sum [x] (if (empty? x) 0 (+ (first x) (sum (rest x)))))","problem":24,"user":"50f2e5cee4b0ec8ee6fa8643"},{"code":"(fn\n  [list]\n  (reduce + list))","problem":24,"user":"4e8a0c82535d3e98b802328d"},{"problem":24,"code":"(fn [arr]\n  ((fn internal [arr acc]\n  (if (= arr '())\n    acc\n    (internal (rest arr) (+ acc (first arr))))) arr 0))","user":"53e06f81e4b0d874e779ae4c"},{"problem":24,"code":"(fn sum-all-up [coll]\n  (reduce + coll))","user":"52fe2dffe4b047fd55837036"},{"code":"(fn [args]\n    (loop [my-list args, ret 0]\n        (if (not (seq my-list)) \n            ret\n            (recur (rest my-list), (+ ret (first my-list)))\n        )\n    )\n)","problem":24,"user":"4f2965ffe4b0d6649770a029"},{"problem":24,"code":"(fn sum-nrs\n  ([x] (sum-nrs x 0))\n  ([x acc] (if (empty? x) acc (sum-nrs (rest x) (+ acc (first x)))))\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":24,"code":"(fn sum [sq]\n  (if (= 1 (count sq))\n    (last sq)\n    (+ (first sq) (sum (rest sq)))\n  )\n)","user":"56a2777be4b0542e1f8d14bf"},{"code":"(fn ddd [x] (reduce + x))","problem":24,"user":"53504a7de4b084c2834f4ad9"},{"problem":24,"code":"(fn [coll]\n    (reduce\n      (fn [acc value] (+ acc value))\n      0\n      coll))","user":"579dd954e4b05b1deef9ae1b"},{"code":"(fn [s] (reduce (fn [a b] (+ a b)) s))","problem":24,"user":"4e58ef07535d8a8b8723a299"},{"code":"(fn [c]\n  (reduce + 0 c))","problem":24,"user":"4f0b3c88535d0136e6c22301"},{"problem":24,"code":"(fn\n  [sequ]\n  (reduce + sequ))","user":"56e09e01e4b0ca2494a0960c"},{"problem":24,"code":"(fn sum [argsToAdd] (reduce + argsToAdd))","user":"5df28320e4b03c219ef1a35c"},{"problem":24,"code":"(fn [sqnc]\n  (reduce + (map (fn [x] x) sqnc)))","user":"566f3e18e4b0a866af6896e7"},{"problem":24,"code":"(fn [sn]\n  ( loop [s sn sum 0]\n    (if (nil? (first s) )\n      sum\n      (recur ( next s ) (+( first s) sum) ) ) ) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn sum [a] (if (empty? a) 0 (+ (first a) (sum (next a)))))","problem":24,"user":"51037468e4b00c483ae17702"},{"problem":24,"code":"(fn [lst]\n  (reduce (fn [a b]\n            (+ a b))\n          lst))","user":"5d64013ce4b0c9e5857d502d"},{"problem":24,"code":"#(reduce + %  )","user":"4e617114535d8ccf87e9fe5b"},{"code":"reduce (fn [x y] (+ x y))","problem":24,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(fn [n] (reduce + 0 n))","problem":24,"user":"500e9d2fe4b00fff93030f9a"},{"code":"(fn [v]\n  (reduce + (seq v)))","problem":24,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"code":"(fn [coll]\r\n  (loop [i coll sums 0]\r\n    (if (empty? i)\r\n    sums\r\n    (recur (rest i) (+ sums (first i) )) ))\r\n)","problem":24,"user":"500c5b4ae4b03d00572d2d88"},{"problem":24,"code":"(fn sum_ [x]\n  (reduce + x))","user":"5958a0c8e4b066ee0a44af8c"},{"code":"(fn sum-blort [s]\n  (if (empty? s)\n    0\n    (+ (first s) (sum-blort (rest s)))))","problem":24,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":24,"code":"(fn s [l] (if (empty? l) 0 (+ (first l) (s (rest l)))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"problem":24,"code":"(fn [xs]\n  (loop [num 0\n         xs xs]\n    (if (empty? xs)\n      num\n      (recur (+ num (first xs)) (rest xs)))))","user":"60b63231e4b0e0fa5f1b4247"},{"code":"reduce (fn [acc,value] (+ acc value)) 0","problem":24,"user":"53038619e4b0d8b024fd3742"},{"code":"#(apply + 0 %)","problem":24,"user":"52acc552e4b0c58976d9ac8c"},{"problem":24,"code":"(fn [coll] (reduce + coll) )","user":"571de0a2e4b0145328a76284"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll, x 0]\n    (if (seq coll)\n      (recur (rest coll) (+ (first coll) x))\n      x)))","user":"5e76274ce4b085ba37836deb"},{"code":";(partial reduce +)\n#(reduce + %)","problem":24,"user":"4fceda40e4b03432b189f407"},{"code":"(fn [x]\n  (loop [sum-val 0\n         x x]\n    (if (empty? x)\n      sum-val\n      (recur (+ sum-val (first x)) (rest x)))))","problem":24,"user":"538d464ee4b0b51d73faae69"},{"problem":24,"code":"(fn [values] (reduce + values))","user":"5f012a2ee4b0cf489e8d7f1e"},{"code":"(fn [xs] (reduce (fn [l r] (+ l r)) xs))","problem":24,"user":"50a8a04ae4b0deba384a58b9"},{"problem":24,"code":"apply (fn [& args]\n        (reduce + args))","user":"555b672ce4b0deb715856e50"},{"problem":24,"code":"(fn [lst]  (apply + lst))","user":"54aa2462e4b09f271ff37cb4"},{"code":"(fn [sdf] (reduce + sdf))","problem":24,"user":"4ecbff02535df97575fdabe3"},{"problem":24,"code":"(fn [collection] (reduce + 0 collection))","user":"5725d2d1e4b0c5bde472c116"},{"code":"(fn [sec]\n  (reduce #(+ %1 %2) 0 sec))","problem":24,"user":"5175533fe4b0dea9bbfba575"},{"problem":24,"code":"(fn kek [coll] (apply + coll))","user":"5ae7691ae4b0837691e92caa"},{"code":"(fn sum-elems [xs-initial]\n   ( loop [sum 0, xs xs-initial]\n     (if (not-empty xs)\n       (recur (+ (first xs) sum) (rest xs))\n       sum)))","problem":24,"user":"4f065217535dcb61093f6c0c"},{"problem":24,"code":"(fn sum \n  ([col] (sum col 0))\n  ([col acc]\n   (if (empty? col)\n     acc\n     (recur (rest col) (+ acc (first col))))))","user":"56e7afd8e4b02e7e935eb6d9"},{"problem":24,"code":"(fn [x] (reduce (fn [acc el] (+ acc el)) 0 x))","user":"5865deeae4b0f14aab7c8851"},{"problem":24,"code":"(fn\n  [coll]\n  (apply + coll))","user":"5484143de4b0e286459a1197"},{"code":"(fn [x]\n    (loop [xx x sum 0]\n      (if (empty? xx)\n        sum\n        (recur (rest xx) (+ sum (first xx))))))","problem":24,"user":"50d8de3fe4b01f0871336e72"},{"code":"#(loop [l %, sum 0] (if (empty? l) sum (recur (next l) (+ sum (first l)))))","problem":24,"user":"52f7ac81e4b047fd55836fc6"},{"problem":24,"code":";(fn [s]\n;  (loop [sum 0\n;         r (rest s)\n;         f (first s)]\n;    (if (= (count r) 0)\n;      sum\n;      (recur (+ sum f) (rest r) (first r)))))\n\n(fn [x] (reduce + x))","user":"5b15d56be4b0cc2b61a3be74"},{"code":"(fn [l] (reduce (fn [a b] (+ a b)) l))","problem":24,"user":"50a4cbbee4b0344e360f3bc2"},{"problem":24,"code":"(fn mysum [x] \n  (if (empty? x) \n    0 \n    (+\n     (first x) \n     (mysum (rest x))) \n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"code":"(fn sum [xs] (reduce + xs))","problem":24,"user":"525bcae9e4b0cb4875a45d30"},{"problem":24,"code":"(fn func [coll]\n  (loop [coll (vec coll) acc 0]\n    (if (empty? coll)\n      acc\n  (let [[head & rest] coll]\n    (recur rest (+ acc head)))))\n  )","user":"5bba6571e4b0a20761a235e9"},{"problem":24,"code":"#((fn [sum seq] (if (empty? seq)\n                              sum\n                              (recur (+ sum (first seq)) (rest seq)) )) 0 %1\n              )","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn sum [x]\n  (reduce + x))","problem":24,"user":"50369122e4b0af0658af779e"},{"problem":24,"code":"(fn addd [s]\n  (if (empty? s)\n    0\n    (+\n      (first s)\n      (addd (rest s))\n    )\n  )\n)","user":"554a3303e4b0a04f79299573"},{"problem":24,"code":"(fn [c] (reduce (fn [x, y] (+ x y)) c))","user":"5d0859fbe4b0cc9c91588208"},{"problem":24,"code":"reduce (fn [acc element] (+ acc element)) 0","user":"591c2f4ee4b09b4ee5954bfc"},{"problem":24,"code":"#(reduce (fn [x, y] (+ x y)) 0 %)","user":"59672436e4b069c0a1a197b1"},{"problem":24,"code":"(fn [input]\n  \n  (reduce + input)\n  \n  \n  )","user":"56b7c32ee4b0982f16b37e48"},{"problem":24,"code":"(fn summer [coll]\n   (if (first coll)\n     (+ (first coll) (summer (rest coll)))\n     0))","user":"5fabe67be4b08cb800c85ade"},{"problem":24,"code":"#((fn mysum [coll s] (if (empty? coll) s (mysum (rest coll) (+ s (first coll))))) % 0)","user":"59fec82be4b01bb0ae8afd14"},{"code":"(fn [x]\n  (loop [t 0 xs x]\n    (if (empty? xs) t\n        (recur (+ t (first xs)) (rest xs)))))","problem":24,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":24,"code":"#(last (reductions + %))","user":"54da46e5e4b024c67c0cf753"},{"problem":24,"code":"(fn sum-indx [indx]\n  (reduce + indx))","user":"58884cc6e4b0f1effa3b770e"},{"problem":24,"code":"(fn my-sum\n  [coll]\n  (if (empty? coll)\n    0\n    (+ (first coll) (my-sum (rest coll)))))","user":"55ee7977e4b0121d4835fdee"},{"problem":24,"code":"(fn sum-xs [xs]\n  (if (empty? xs)\n    0\n    (+ (first xs) (sum-xs (rest xs)))))","user":"5e385965e4b01d43a70e8dba"},{"problem":24,"code":"(fn[n] (reduce + n))","user":"55950c5fe4b0c79f6e1db95e"},{"problem":24,"code":"(fn [arr]\n  (loop [sum 0 prod arr]\n    (if (= (first prod) nil)\n      sum\n      (recur (+ sum (first prod)) (rest prod)))))","user":"5dcbd629e4b02b31cc3da3bd"},{"code":"(fn [aseq] (reduce + aseq))","problem":24,"user":"4f048f67535dcb61093f6bd3"},{"problem":24,"code":"(fn my-sum [s]\n  (loop [total 0\n         s2 s]\n    (if (empty? s2)\n      total\n      (recur (+ total (first s2))\n             (rest s2)))))","user":"5eb22708e4b00a66d4a95204"},{"code":"(partial reduce (fn [x y] (+ x y)) 0)","problem":24,"user":"5282f54be4b0239c8a67ada0"},{"code":"#( loop [x (- (count %) 1) sum 0 numbers %]\n  (if (= x -1) \n    sum \n    (recur (- x 1) (+ sum (first numbers)) (rest numbers))\n  )\n)","problem":24,"user":"4fcd0990e4b0ee37620e1874"},{"problem":24,"code":"(fn \n  [list]\n  (loop\n    [remain list, sum 0]\n    (if\n      (empty? remain)\n      sum\n      (recur\n        (rest remain)\n        (+ sum (first remain))\n      )\n    )\n  )\n)","user":"59c72175e4b0a024fb6ae53c"},{"problem":24,"code":"(fn [coll]\n  (loop [[x & xs] (into [] coll) acc 0]\n    (if xs\n      (recur xs (+ acc x))\n      (+ acc x))))","user":"561cb6cfe4b064ca9f4b169e"},{"code":"(fn sum\n\t[some-seq]\n \t(apply + some-seq))","problem":24,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn\n  [numbers]\n  (reduce + numbers))","problem":24,"user":"52b4d8fae4b0c58976d9ad33"},{"code":"(fn sum-list [l]\n  (+ (first l)\n     (if (empty? (rest l))\n         0\n         (sum-list (rest l))) \n  )\n)","problem":24,"user":"4e234e72535d04ed9115e822"},{"problem":24,"code":"(fn [my-seq]\n  (reduce (fn [acc e]\n          (+ acc e)) 0 my-seq))","user":"546ff701e4b00cfc9eacc1b3"},{"code":"(fn fct [x] (if (= 0 (count x)) 0 (+ (first x) (fct (rest x)))))","problem":24,"user":"511ba290e4b00c2a1fa7ff70"},{"code":"(fn [xs]\n    (reduce + 0 xs))","problem":24,"user":"50996376e4b0cae2931060b2"},{"code":"reduce (fn [curr, nxt] ( + curr nxt )) 0","problem":24,"user":"52867936e4b0239c8a67ae16"},{"problem":24,"code":"(fn sum [x]\n  (reduce  + x))","user":"591208ede4b0163c97b36ee5"},{"code":"(fn mysum [x] (if (= x nil)\r\n                0\r\n                (+ (first x) (mysum (next x)))))","problem":24,"user":"4ddbd600535d02782fcbe9fb"},{"code":"#(reduce (fn [x y] (+ x y)) 0 %)","problem":24,"user":"4e81e29b535db62dc21a62bd"},{"code":"(fn sum_all [s] (apply + s))","problem":24,"user":"51ab7a68e4b04e3dc0c27b35"},{"problem":24,"code":"(fn return-sum [s] (if (= (first s) nil) 0 (+ (first s) (return-sum (rest s)))))","user":"579bf7e3e4b05b1deef9ae01"},{"problem":24,"code":"#(reduce + 0 (map (fn [x] x) %))","user":"5c12dacae4b01240ff567198"},{"problem":24,"code":"#(reduce (fn [acc value] (+ acc value)) %)","user":"54b576cfe4b05787c3b163a5"},{"code":"(partial \n (fn foo [res s1] \n   (if \n     (= s1 '()) \n     res\n     (foo (+ res (first s1)) (rest s1))\n\t)\n  )\n 0\n )","problem":24,"user":"51a0e0b7e4b0b292b01ee3fb"},{"problem":24,"code":"(fn [s]\n   (loop [sum 0 osq s]\n     (if (= osq [])\n       sum\n       (recur (+ sum (first osq)) (rest osq))\n      )\n     )\n   )","user":"572c1f65e4b0cd1946bd0f4a"},{"problem":24,"code":"(fn [coll] (loop [coll coll\n                  sum 0]\n             (if (seq coll)\n               (recur (rest coll) (+ sum (first coll)))\n               sum)))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"(fn [seq]\n  (reduce + 0 seq)\n)","problem":24,"user":"4e6daa22535d5021c1a895ef"},{"code":"#(loop [c % sum 0]\n  (if (empty? c)\n    sum\n    (recur (rest c) (+ sum (first c)))))","problem":24,"user":"4f3ad7f0e4b0e243712b1f1d"},{"code":"(fn a [x] (cond (empty? x) 0 :else (+ (first x) (a (rest x)))))","problem":24,"user":"5325cf91e4b09d4e7a9b54e8"},{"code":"#(loop [i 0 j %] (if (not= j nil) (recur (+ i (first j)) (next j)) i))","problem":24,"user":"4f28d266e4b0d6649770a01c"},{"code":"(fn [x1]\n    (loop [x x1 z 0]\n    (if (empty? x) z\n\t    (recur (rest x) (+ z (first x)))\n\t    )\n\t  ))","problem":24,"user":"4fdf5403e4b05e33b9224f98"},{"problem":24,"code":"(fn [x] (loop [ s 0 a x] (if (empty? a) s (recur (+ s (first a)) (drop 1 a)))))","user":"5cfff788e4b0cc9c91588196"},{"problem":24,"code":"(fn [x] (loop [tot 0 v x] (if-not(first v) tot (recur (+ tot (first v)) (rest v)))))","user":"5fa9fd9be4b0fa27300f3df5"},{"problem":24,"code":"#(-> (apply + %))","user":"56330578e4b0bfe05bf117af"},{"code":"(fn [s]\n  (reduce (fn [sum v] (+ sum v)) 0 (seq s)))","problem":24,"user":"52c884a2e4b0c2d177d62136"},{"problem":24,"code":"(fn [data]\n  (loop [x data cum 0]\n    (if (empty? x)\n      cum\n      (recur (drop 1 x) (+ cum (first x)))\n    )\n  )\n)","user":"59313dc1e4b072a2710fd00a"},{"problem":24,"code":"(fn sum [x]\n      (if (= (count x) 1)\n          (first x)\n          (+ (first x) (sum (rest x)))\n          )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"code":"(fn [coll] (apply + coll))","problem":24,"user":"4e50e2a0535dc968683fc4ef"},{"problem":24,"code":"(fn foo[x] (cond (> (count x) 1) (+ (first x) (foo(rest x)))\n                :else (first x)\n))","user":"5eb94f6fe4b00a66d4a9524b"},{"code":"(fn ssum [l]\n  (if (empty? l)\n    0\n    (+ (first l) (ssum (rest l)))))","problem":24,"user":"51684318e4b03f62cda68cd6"},{"problem":24,"code":"#(loop [result 0 nseq %] (if (nil? nseq) result (recur (+ result (first nseq)) (next nseq))))","user":"5a6b8a9ae4b0512ff01cda3f"},{"code":"#(loop [x % cnt 0]\n   (if (nil? (first x))\n     cnt\n     (recur (rest x) (+ (first x) cnt))))","problem":24,"user":"52cdec62e4b07d0d72b27382"},{"code":"(fn [l] (loop [l l result 0] (if (empty? l) result (recur (rest l) (+ (first l) result)))))","problem":24,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":24,"code":"reduce +,","user":"560a8ccde4b05f002753defc"},{"problem":24,"code":"#(loop [sum 0 c %]\n   (if (empty? c) sum\n     (recur (+ sum (first c)) (rest c))))","user":"5773eeafe4b0979f896515f1"},{"code":"(fn [list] (reduce (fn [acc v] (+ acc v)) 0 list))","problem":24,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn sum [list]\n    (let [[head & tail] (vec list)]\n        (if (empty? tail)\n            head\n            (+ (sum tail) head))) \n    )","problem":24,"user":"529ca7dae4b04e0c58e87b67"},{"code":"(fn sum [sequ]\n  (if (empty? sequ) 0\n    (+ (first sequ) (sum (rest sequ)))))","problem":24,"user":"53854a04e4b06839e8705eff"},{"code":"(fn[x] (reduce + x))","problem":24,"user":"4e931ebb535dbda64a6f6b08"},{"code":"(fn sum-of-seq [l]\n  (cond (empty? l) 0\n        :else (+ (first l) (sum-of-seq (rest l)))))","problem":24,"user":"5313a2bfe4b08068f379ed0b"},{"problem":24,"code":"(fn [coll]\n  (loop [[x & xs] (seq coll)\n         result 0]\n    (if (nil? x)\n      result\n      (recur xs (+ result x))\n     )\n   )\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":24,"code":"(fn[s] (reduce + s))","user":"5587cd86e4b059ccff29b1e6"},{"code":"(fn [x] (reduce (fn [n l](+ n l))0 x))","problem":24,"user":"50054b5ce4b0678c553fc45f"},{"problem":24,"code":"(fn [X] ( reduce +  X))","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":24,"code":"(fn [stuff]\n\t(loop [sl stuff tl 0]\n\t\t(if (= nil (first sl)) \n\t\t\ttl\n\t\t\t(recur (rest sl) (+ tl (first sl))))))","user":"58b985e0e4b0888cdc949ccc"},{"code":"(fn mysum [x](reduce + x))","problem":24,"user":"533078b5e4b019098a6f8b5c"},{"code":"(fn [alist] (loop [list alist result 0] \n  (if (empty? list) result (recur (rest list) (+ result (first list))))))","problem":24,"user":"4ee6ca15535d93acb0a66862"},{"problem":24,"code":"(fn sum-of-seq [sq]\n  (loop [sq sq sum 0]\n    (if (empty? sq)\n      sum\n      (recur (rest sq) (+ sum (first sq))))))","user":"5c6314c5e4b0fca0c1622658"},{"problem":24,"code":"(fn [alist] (apply + alist))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn [lst] (reduce #(+ %1 %2) lst))","problem":24,"user":"5193db52e4b04df54c09802a"},{"problem":24,"code":"(fn[lst]\n  (reduce + lst))","user":"59dd387ae4b0a0ac046f2501"},{"problem":24,"code":"(fn sum [ls] (+ (first ls) (if (= (count (rest ls)) 0)\n                              0\n                              (sum (rest ls)))))","user":"5697fda8e4b0542e1f8d142c"},{"code":"(fn sumlool [coll] (reduce + coll))","problem":24,"user":"51faf9ece4b0f1313d4689f7"},{"problem":24,"code":"(fn sum-seq [x] (if (empty? x) 0 (+ (first x) (sum-seq (rest x)))))","user":"5c4217e2e4b08cd430848ed2"},{"code":"(fn [x]\n  (loop [ lat x sum 0]\n    (if (empty? lat)\n      sum\n      (recur (rest lat) \n        (+ sum (first lat))))))","problem":24,"user":"4ea2382f535d7eef308072bc"},{"code":"(fn [aseq]\n  (loop [lseq aseq total 0]\n    (if (empty? lseq)\n      total\n      (recur (rest lseq) (+ (first lseq) total)))))","problem":24,"user":"509331d9e4b097f48cc38580"},{"problem":24,"code":"(fn [li]\n  (loop [newl li, s 0]\n    (if (empty? newl)\n      s\n      (recur (rest newl) (+ s (first newl)))\n     )\n   \t)\n )","user":"588fb3a7e4b00487982d51b9"},{"problem":24,"code":"(fn [lis] \n  (reduce #(+ %1 %2) lis))","user":"5d604682e4b0c9e5857d5007"},{"problem":24,"code":"(fn [zeq] (reduce + zeq))","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn total [x]\r\n  (if (= (rest x) '())\r\n      (first x)\r\n      (+ (first x) (total (rest x)))))","problem":24,"user":"4de33f4e535d08e6dec9fded"},{"code":"(fn sum-it-up [s] (reduce + s))","problem":24,"user":"51e786c9e4b0a3e081b8cbeb"},{"code":"(fn inject_plus [x] (reduce + x))","problem":24,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn sum [a-seq]\n   (apply + a-seq))","problem":24,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [l] (reduce + 0 l))","problem":24,"user":"4e82c062535db62dc21a62cc"},{"problem":24,"code":"(fn [son]\n  (reduce + son))","user":"579816abe4b039eba2ecb10d"},{"problem":24,"code":"(fn foo [x] (if (= x []) 0 (+ (first x) (foo (rest x)))))","user":"557bc06ae4b05c286339e0b8"},{"problem":24,"code":"(fn my-sum-of-elements\n  [some-seq]\n  (loop [sum-elem 0 remain some-seq]\n    (if (seq remain)\n      (recur (+ sum-elem (first remain))\n             (rest remain))\n      sum-elem)))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"#(apply + (flatten (seq %)))","problem":24,"user":"52530b4be4b0541d1855b8e4"},{"code":"(fn [the-sequence]\n(reduce + the-sequence)\n)","problem":24,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":24,"code":"(fn sum [s] (loop \n               [vals s accum 0] \n               ( if (= vals ()) \n                 accum \n                 (let [n (+ accum (first vals))]\n                   (recur (rest vals) n)\n                   \n                   )\n                 )\n               )\n   )","user":"574ec787e4b02ea114799249"},{"code":"#(reduce (fn [a,b] (+ a b)) %)","problem":24,"user":"4e8b98fc535d65386fec2124"},{"problem":24,"code":"(fn [s] (reduce (fn [a v] (+ a v)) 0 s))","user":"5ba55d85e4b0a20761a233fa"},{"problem":24,"code":"(fn [coll]\n  (reduce (fn [sum item]\n            (+ sum item)) 0 coll))","user":"5489948fe4b0e286459a11e9"},{"code":"(fn [elements]\n  (reduce + 0 elements)\n  )","problem":24,"user":"535943b3e4b04ce2eb3ed295"},{"problem":24,"code":"(fn [sent]\n  (apply + sent))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn [s]\r\n    (loop [my-seq s my-sum 0]\r\n        (if (first my-seq)\r\n            (recur (rest my-seq) (+ my-sum (first my-seq)))\r\n            (int my-sum)\r\n        )\r\n    )\r\n)","problem":24,"user":"4defd021535d08e6dec9fe13"},{"problem":24,"code":"(fn sum\n  [seq]\n  (reduce #(+ %1 %2) seq))","user":"5f735915e4b02876ed9fd097"},{"code":"(fn sumit [lat] (if (= [] lat) 0 (+ (sumit (rest lat)) (first lat))))","problem":24,"user":"514cc029e4b019235f6c057c"},{"code":"(fn my-sum [coll] (reduce + coll))","problem":24,"user":"51aa7298e4b04e3dc0c27b28"},{"problem":24,"code":"#(reduce (fn [m e] (+ m e)) %)","user":"5881d1c2e4b0f1effa3b7644"},{"problem":24,"code":"(fn\n      [seq]\n      (reduce + seq))","user":"582c203ae4b051871117bf80"},{"problem":24,"code":"(fn [l] \n  (reduce (fn [f x] (+ f x)) 0 l\n          )\n  )","user":"5576961be4b05c286339e06f"},{"problem":24,"code":"(fn [nums] \n  ((fn [nums total]\n    (if (empty? nums) total\n      (recur (rest nums) (+ total (first nums)))))\n  nums 0))","user":"563cce5be4b0bfe05bf1183f"},{"code":"(fn summ [x]\n  (if \n    (empty? x) 0\n    (+ (first x) (summ (rest x)))\n  )\n)","problem":24,"user":"4e283bae535deb9a81d77efb"},{"code":"(fn [col]\n  (loop [c col ret 0]\n    (if (nil? (seq c))\n      ret\n      (recur (rest c) (+ ret (first c)) ))))","problem":24,"user":"513cb853e4b0b86ece9f322b"},{"problem":24,"code":"(fn rever [n]\n  (apply + n))","user":"5b3a1c3ce4b02d533a91bbbd"},{"problem":24,"code":"(fn sum_up [coll] ( reduce + coll))","user":"56c9d136e4b0ed865f9758e2"},{"code":"reduce (fn [a b] (+ a b)) 0","problem":24,"user":"4e8f5dd1535d65386fec214b"},{"problem":24,"code":"(fn [in] (reduce + in))","user":"5600591de4b04bb52996e166"},{"problem":24,"code":"(fn [mylist]\n  (reduce + 0 mylist))","user":"553a74ede4b09218d5f44ff7"},{"problem":24,"code":"#(reduce (fn [p1 p2] (+ p1 p2)) 0 %)","user":"57e0447ae4b0bd073c202475"},{"problem":24,"code":"#(reduce (fn [r x] (+ r x)) %)","user":"5ea580a3e4b00a66d4a951a7"},{"code":"(fn sum [x]\n  (if (empty? x) \n    0\n    (+ (first x) (sum (rest x)))\n  )\n)","problem":24,"user":"530b8ce1e4b02e82168697cd"},{"problem":24,"code":"(fn sum [c]\n  (reduce (fn [acc e] (+ acc e)) 0 c))","user":"56936547e4b0dcc4269f4101"},{"code":"(fn  [x]\n  (reduce + 0 x))","problem":24,"user":"52cdc676e4b07d0d72b2737f"},{"problem":24,"code":"(fn[array]\n  (reduce + array)\n  )","user":"55240916e4b0882d96d091b6"},{"problem":24,"code":"(fn ! [x]\n  (if (= x ())\n    0\n    (+ (first x) (! (rest x)))))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"code":"reduce #(+ %1 %2)","problem":24,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":24,"code":"(fn [n]\n  (reduce + n))","user":"5a99b844e4b0d174b936c7ab"},{"problem":24,"code":"(fn [xs] \n  (reduce + xs))","user":"55316b8ae4b076ab5578f825"},{"problem":24,"code":"(fn [x] (loop [a x s 0] (if ( = a []) s (recur (rest a) (+ s (first a))) )))","user":"58c7b921e4b021aa9917ed7c"},{"problem":24,"code":"reduce (fn [arg1 arg2] (+ arg1 arg2))","user":"5ae71f14e4b0837691e92ca7"},{"code":"(fn [lst] \n  (reduce + 0 lst))","problem":24,"user":"4f032cb1535dcb61093f6a70"},{"code":"(fn [x]\n      (apply + x))","problem":24,"user":"4e8ef93e535d65386fec2144"},{"code":"reduce +","problem":24,"user":"4dd579b5535dae65d5c462ea"},{"problem":24,"code":"(fn [col] \n  (loop [col col sum 0]\n    (if (empty? col)\n      sum\n      (recur\n        (rest col)\n       \t(+ sum (first col))))))","user":"5433eecae4b0b6b47310fce6"},{"problem":24,"code":"(fn [list] \n  (reduce + 0 list))","user":"5f0ccff2e4b0f30dddfb5d4f"},{"problem":24,"code":"(fn mys [l] \n  (\n   (fn ms [l acc]\n     (if (empty? l) acc\n       (ms (rest l)\n           (+ acc (first l))\n           )\n       )) l 0 ))","user":"573e2d54e4b05c31a32c0824"},{"problem":24,"code":"( fn seq_sum [ my_sq]\n  (loop [ a my_sq, s 0 ]\n      (if (empty? a)\n        s\n        (recur (next a) (+ s (first a)))\n      )\n    )\n  )","user":"569637d8e4b0dcc4269f4130"},{"problem":24,"code":"(fn sm [c] (if (empty? c) 0 (+ (first c) (sm (rest c)))))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":24,"code":"(fn [col] \n  (reduce (fn [value item] (+ item value)) 0 col))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":24,"code":"#(loop [sum 0 lst %] (if (empty? lst) sum (recur (+ sum (first lst)) (rest lst))))","user":"5f727cb0e4b02876ed9fd08e"},{"problem":24,"code":"(fn my-sum [%] \n  (do (println %)\n    (if (= 1 (count %)) (first %)\n       (+ (first %) (my-sum (rest %)))\n    )\n  )\n)","user":"53d64811e4b0e771c3025456"},{"code":"(fn sum [s]\n  (if (empty? s)\n    0\n    (+ (first s) (sum (rest s)))))","problem":24,"user":"4f038484535dcb61093f6b07"},{"code":"#(reduce (fn [a b] (+ a b)) %1)","problem":24,"user":"4ee8092f535d93acb0a66875"},{"problem":24,"code":"#(reduce (fn [s r] (+ s r)) 0 %)","user":"556086a2e4b0c656e3ff17c1"},{"problem":24,"code":"#(reduce (fn [acc el] (+ acc el)) %)","user":"55041b5ee4b086ebe8a79c78"},{"problem":24,"code":"(fn [x]\n  (reduce (fn [cnt x] (+ cnt x)) 0 x))","user":"563130e4e4b0bfe05bf1178d"},{"problem":24,"code":"(fn s [l]\n  (if (empty? l)\n    0\n    (+ (first l) (s (rest l)))))","user":"57befca6e4b05aa3c4741c70"},{"problem":24,"code":"#(loop [sum 0, c %]\n\t(if (nil? (first c))\n\tsum\n\t(recur (+ sum (first c)) (rest c))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn f [coll] (reduce + coll))","problem":24,"user":"538c9144e4b0b51d73faae5d"},{"problem":24,"code":"(fn [the-seq]\n  (loop [s the-seq res 0]\n    (if (empty? s)\n      res\n      (recur (rest s) (+ res (first s))))))","user":"5c26c9b3e4b07e362c2305c5"},{"problem":24,"code":"(fn\n  [s]\n  (reduce + s))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [l]\n  (loop [l l\n         n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n (first l))))))","problem":24,"user":"531cbf46e4b08068f379eda6"},{"code":"(fn ([args] (apply + args)))","problem":24,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(fn sum-it-all-up [s]\n  (reduce + s))","problem":24,"user":"500d86e8e4b0ff215386cad4"},{"problem":24,"code":"(fn [x] (reduce (fn [x y] (+ x y)) 0 x))","user":"54fc75fce4b07d26eda61d2a"},{"problem":24,"code":"(fn sumitall [lst] (reduce + lst))","user":"55fb04e0e4b0f488688e0657"},{"code":"(fn ! [s] \n  (if (next s) \n      (+ (first s) (! (next s))) \n      (first s)))","problem":24,"user":"508d8ab2e4b0f17d83ea26be"},{"code":"(fn sumall [x] (reduce + x))","problem":24,"user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn [l] (reduce + l))","problem":24,"user":"4e5206ec535d302ef430da6c"},{"code":"(fn [s]\n  (reduce + s))","problem":24,"user":"4ed9354f535d10e5ff6f5301"},{"problem":24,"code":"(fn myfunc\n  ([x] (myfunc x 0))\n  ([x, y] \n            (if (empty? x)\n              y\n              (recur (rest x) (+ y (first x)))\n              )\n            \n            )\n  )","user":"5a0a3473e4b0eab8c0448941"},{"problem":24,"code":"(fn sum [sequ]\n  (if (= 1 (count sequ))\n      (first sequ)\n      (+ (first sequ) (sum (rest sequ)))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":24,"code":"(fn [col] (loop [x col n 0] (if x (recur (next x) (+ n (first x))) n)))","user":"54e1939ce4b024c67c0cf7c5"},{"code":"(fn sumup [s] (reduce + s))","problem":24,"user":"4e9de526535dbda64a6f6b8e"},{"code":"#(reduce +  %)","problem":24,"user":"4e5352b9535d8a8b8723a271"},{"code":"(fn [arr]\n  (reduce + 0 arr))","problem":24,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"#(reduce (fn [x sum] (+ x sum)) 0 %)","problem":24,"user":"4ec5615a535d6d7199dd369b"},{"code":"(fn [x] (\n  (fn rec [x sum] (\n    if (= '() x) sum (rec (rest x) (+ sum (first x))) \n    )) x 0\n  ))","problem":24,"user":"4fcf5292e4b03432b189f40e"},{"problem":24,"code":"(fn my-sum\n  [lst]\n  (reduce + lst))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn anon [x]\n  (if (empty? x) 0 (+ (first x) (anon (rest x)))))","problem":24,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":24,"code":"reduce (fn [ac, el] (+ ac el)) 0","user":"5cc28a50e4b0ccb0619627d9"},{"problem":24,"code":"(fn [ls]\n   (loop [l ls\n              n 0]\n     (if (empty? l)\n       n\n       (recur (rest l) (+ n (first l))))))","user":"57150a8ee4b07c98581c3acb"},{"code":"(fn sum\n  [x]\n  (if (= x (empty x))\n    0\n    (+ (first x) (sum (rest x)))))","problem":24,"user":"5393653be4b0b51d73faaebc"},{"problem":24,"code":"(fn sumup [x] \n  (if (not (empty? x)) \n    (+ (first x) (sumup (rest x))\n        )\n    (+ 0 0)\n     )\n    )","user":"5710b136e4b09c608db70437"},{"code":"(fn [x]\n  (loop [lst x my-sum 0]\n    (if (not (empty? lst))\n      (recur (rest lst) (+ my-sum (first lst)))\n      my-sum)))","problem":24,"user":"5008b795e4b0144d4f561e3e"},{"code":"(fn sum[x] (reduce + x))","problem":24,"user":"51ba59e4e4b0fe3ecfb4642d"},{"problem":24,"code":"(fn add-all \n  ([coll sum]\n  \t(if (empty? coll)\n    \tsum\n      (add-all (rest coll) (+ sum (first coll)))\n    )\n  )\n  ([coll]\n  \t(add-all coll 0)\n  )\n)","user":"554b0d42e4b0a04f7929957f"},{"problem":24,"code":"#(reduce (fn [s i] (+ s i)) %)","user":"54bc69a7e4b0ed20f4ff6ecf"},{"problem":24,"code":"(fn [s] (reduce (fn [x y] (+ x y)) 0 s))","user":"5d72ad8fe4b02e6b30c93512"},{"problem":24,"code":"(fn ss [w] (if (empty? w) 0 (+ (first w) (ss (rest w)))))","user":"5567b9dce4b0c656e3ff1846"},{"problem":24,"code":"#(loop [sum 0\n        liste %]\n   (if (empty? liste)\n     sum\n     (recur (+ sum (first liste)) (rest liste))\n    )\n  )","user":"5dee8835e4b093ff7172759a"},{"code":"(fn cnt [s]\r\n  (loop [ss s c 0]\r\n    (if (= (next ss) (last ss))\r\n      c\r\n      (recur (next ss) (+ c(first ss)))\r\n    )\r\n  )\r\n)","problem":24,"user":"4dcd327b535d5973398f929b"},{"problem":24,"code":"#(reduce (fn [sum n] (+ sum n)) 0 %)","user":"5851b51be4b0b7285a6f4e99"},{"code":"(fn\n  [xs]\n  (apply + xs))","problem":24,"user":"529dd5a4e4b04e0c58e87b82"},{"problem":24,"code":"(fn [vals]\n  (reduce + 0 vals))","user":"532902f8e4b09d4e7a9b550e"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (cond\n      (empty? coll) acc\n      :else (recur (rest coll) (+ acc (first coll))))))","user":"5600dccee4b04bb52996e175"},{"code":"#(reduce (fn [x _] (+ _ x)) 0 %)","problem":24,"user":"53307da1e4b019098a6f8b5e"},{"problem":24,"code":"(fn [mylist] (reduce + mylist))","user":"5439c3cee4b032a45b869323"},{"code":";#(reduce + %)\n\napply +","problem":24,"user":"50d4c626e4b09cc622d65a70"},{"code":"(fn sum-all [xs]\n\t(reduce + 0 xs))","problem":24,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":24,"code":"(fn [arg] (apply + (seq arg)))","user":"54580586e4b01be26fd74616"},{"problem":24,"code":"reduce (fn [t val] (+ t val) ) 0","user":"54dce62fe4b024c67c0cf78c"},{"code":"(fn\r\n  [coll]\r\n\t(reduce #(+ %1 %2) 0 coll))","problem":24,"user":"4edbae0d535d10e5ff6f531c"},{"problem":24,"code":"#(loop [c % s 0] (cond (empty? c) s\n                         :else (recur (next c) (+ s (first c)))))","user":"4fec0824e4b0681fd128dc9c"},{"problem":24,"code":"#(reduce + (map identity %))","user":"5579bc24e4b05c286339e098"},{"problem":24,"code":"(fn sum [sq] \n  (let [h (first sq) \n        t (rest sq)] \n    (if (empty? t) \n      h \n      (+ h (sum t)))))","user":"5609d328e4b05f002753deee"},{"problem":24,"code":"(fn [sqc] \n  (reduce #(+ %1 %2) 0 sqc))","user":"5a6a32b6e4b0512ff01cda22"},{"problem":24,"code":"(fn [x]\n  (loop [input x\n         result 0]\n    (if (empty? input)\n      result\n      (recur (rest input) (+ result (first input))))))","user":"55c4cda5e4b0e31453f649a5"},{"code":"(fn m-sum [v]\n  (if (= 1 (count v))\n    (first v)\n    (+ (first v) (m-sum (rest v)))))","problem":24,"user":"51215927e4b05ae5a5823c10"},{"code":"(fn [seeq]\n  (reduce + 0 seeq))","problem":24,"user":"4ec72817535d6d7199dd36de"},{"problem":24,"code":"(fn sm [x] (reduce + x))","user":"4f0368ee535dcb61093f6aae"},{"problem":24,"code":"(fn f [x] (if (empty? x) 0 \n            (+ (first x) \n               (f (rest x))\n               )\n            )\n  )","user":"5a135415e4b0ff51aa4b317f"},{"problem":24,"code":"(fn sumup [x] (reduce + x))","user":"58472aade4b089d5ab817ea0"},{"code":"#(reduce + % )","problem":24,"user":"4e81e93d535db62dc21a62bf"},{"code":"(fn [lista]\n  (letfn [(sumar [lista contador] (if (= '() lista)\n                                     contador\n                                     (sumar (rest lista) (+ contador (first lista))\n                                       )\n                                     )\n            )\n          ]\n    (sumar lista 0)\n    ))","problem":24,"user":"5058afbbe4b06522596eba81"},{"problem":24,"code":"#(reduce (fn [a v] (+ v a)) 0 %)","user":"6079e2dfe4b0a637ed780366"},{"code":"#(loop [xs %1 sum 0]\n  (if (nil? xs)\n    sum\n    (recur (next xs) (+ sum (first xs)))))","problem":24,"user":"508e2584e4b0f17d83ea26c9"},{"code":"(fn [s]\n  (reduce #(+ %1 %2) s))","problem":24,"user":"512b7a05e4b04d059cf1fd14"},{"code":"(fn [v] (apply + (vec v)))","problem":24,"user":"504f43e9e4b0a02f9cffde64"},{"problem":24,"code":"#(apply +' (seq %))","user":"58173722e4b0c0e9c07b838a"},{"problem":24,"code":"; (fn [coll]\n;  (reduce + coll))\n#(reduce + %)","user":"55b7f263e4b01b9910ae29b4"},{"code":"(fn[m](reduce + m))","problem":24,"user":"4f2046b7535d64f6031464ab"},{"code":"(fn adam\n  ([col] \n\t\t(if (empty? col) 0 (adam 0 col)))\n\t([total col]\n\t\t(if (empty? col)\n\t\t\ttotal\n\t\t\t(recur \n\t\t\t\t(+ total (first col))\n\t\t\t\t(rest col)))))","problem":24,"user":"504e6165e4b0f6ff3350c4aa"},{"code":"reduce (fn[x y] (+ x y))","problem":24,"user":"4eeff8ba535d305ff5cb7f23"},{"code":"(fn [x] \n    (loop [acc 0 tmpl x]\n        (if (empty? tmpl) acc\n            (recur (+ acc (first tmpl)) (rest tmpl)))))","problem":24,"user":"52f44c84e4b05e3f0be25f20"},{"problem":24,"code":"(fn sum-me\n  [s]\n  (reduce + 0 s))","user":"5d05fdece4b0cc9c915881e8"},{"problem":24,"code":"(fn [l]\n  (loop [c l\n         sum 0]\n    (if (empty? c)\n      sum\n      (recur (rest c)\n             (+ sum (first c))))))","user":"56156feee4b05f002753dfc5"},{"problem":24,"code":"(fn [seq]\n  (reduce\n   (fn [total cur]\n     (+ total cur))\n     0\n     seq))","user":"57759a45e4b0979f89651622"},{"code":"(fn __ [l] (apply + l))","problem":24,"user":"4f9f854be4b0dcca54ed6d38"},{"problem":24,"code":"#(reduce (fn [c v] (+ v c)) 0 %)","user":"58db7ae7e4b0a4d5acaab67f"},{"problem":24,"code":"(fn [xs]\n  (loop [xs xs sum 0]\n    (cond\n      (empty? xs)\n      sum\n\n      :else\n      (recur (rest xs) (+ sum (first xs))))))","user":"55955c0be4b0c79f6e1db967"},{"problem":24,"code":"(fn rec [li] (if (empty? li) 0 (+ (first li) (rec (rest li)))))","user":"5b20134de4b03cfeda66ed2d"},{"problem":24,"code":"(fn [xs] ((fn [xs sum]\n            (if (nil? (first xs))\n              sum\n              (recur (rest xs) (+ sum (first xs))))\n            ) xs 0))","user":"5673998ce4b05957ce8c6121"},{"code":"(fn sum [x]\n  (if (= (rest x) '())\n    (first x)\n    (+ (first x) (sum (rest x)))))","problem":24,"user":"4fe610fde4b0e8f79898fece"},{"problem":24,"code":"(fn sum \n  [coll] \n  (reduce + coll))","user":"53e6550de4b036ad0777e471"},{"problem":24,"code":"(fn [i] (reduce + 0 i))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn [s] (reduce + s) )","problem":24,"user":"4f5612f9e4b0a7574ea71812"},{"problem":24,"code":"(fn red [l]\n  (reduce + l))","user":"5761724de4b0994c1922fb89"},{"problem":24,"code":"(fn sum [coll]\n  (apply + coll))","user":"55268e8de4b0ffed3738f91f"},{"code":"(fn [s] \n  (reduce + s)\n  )","problem":24,"user":"51eb3aace4b0f1f103a0d159"},{"code":"(fn foo [x]\n  (if (empty? x) 0\n    (+ (first x) (foo (rest x)))))","problem":24,"user":"4f037faf535dcb61093f6af8"},{"problem":24,"code":"(fn [coll] (reduce + 0 coll) )","user":"5e7d0bc9e4b085ba37836e2a"},{"code":"(fn [xs]\n  (reduce #(+ %1 %2) xs))","problem":24,"user":"4e6a2e83535d8ccf87e9fea7"},{"problem":24,"code":"(fn countt[lst]\n  (loop [a lst\n         cont 0]\n    (if (empty? a)\n      cont\n      (if (number? (first a))\n        (recur (rest a)(+ cont (first a)))\n        (recur (rest a) cont)))))","user":"57f814fbe4b0d3187e900911"},{"problem":24,"code":"(fn [coll]\n  (loop [rest-coll coll\n         acc 0]\n    (if (empty? rest-coll)\n      acc\n      (recur (rest rest-coll) (+ acc (first rest-coll))))))","user":"53cb30f0e4b00fb29b2212d0"},{"problem":24,"code":"(fn sum [coll] \n  (if (empty? coll) \n    0\n    (+ (first coll) (sum(rest coll))) ))","user":"560aa7b0e4b05f002753df02"},{"code":"(fn sum-it-al [lat]\r\n  (reduce + lat))","problem":24,"user":"4f4feb95e4b03ad3f0c10cf0"},{"code":"(fn [c] \n  (reduce + c))","problem":24,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [xs] (reduce #(+ %2 %1) 0 xs))","problem":24,"user":"4f724e56e4b07046d9f4f027"},{"code":"(fn sum [x]\n  (if (empty? x)\n    0\n    (+ (first x)\n       (sum (rest x)))))","problem":24,"user":"5375b852e4b06839e8705e17"},{"code":"(fn summer[x] (reduce #(+ %1 %2) x))","problem":24,"user":"503558bde4b0ed9c821488fa"},{"problem":24,"code":"(fn my-sum\n  ([coll]\n   ( my-sum coll 0))\n  ([coll res]\n   (if (empty? coll)\n     res\n     (my-sum (rest coll) (+ res (first coll))))))","user":"5e00752fe4b0a607a9a45d24"},{"problem":24,"code":"(fn\n\t[lst]\n\t(reduce + lst))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [xs] (reduce (fn [sum,n] (+ n sum)) 0 xs))","problem":24,"user":"4fd6f4d8e4b0dab7d829f37b"},{"code":"(fn sum-all [x]\n  (reduce + x))","problem":24,"user":"50845d3ee4b0fb8f40674bf3"},{"code":"(fn [coll] (loop [s (seq coll)  n 0] (if (empty? s) n (recur (rest s) (+ n (first s)) ))))","problem":24,"user":"53347274e4b0656e627bfd6b"},{"problem":24,"code":"(fn\n  [jumble]\n  (loop [sum 0\n         values jumble]\n    (if (empty? values)\n      sum\n      (recur (+ sum (first values)) (rest values))\n     )\n   )\n )","user":"54d0f744e4b0e8a36923e5d7"},{"problem":24,"code":"(fn sum [x] \n  (reduce (fn [x y] (+ y x)) 0 x))","user":"5d48d5d1e4b0776584bd6f12"},{"code":"#(reduce + %)","problem":24,"user":"4dd29ede535dae65d5c462da"},{"problem":24,"code":"(fn [seq]\n      (reduce + 0 seq)\n      )","user":"5d809b4fe4b0915913b1d36c"},{"problem":24,"code":"(fn sum [coll]\n\t(if (empty? coll)\n     \t0\n\t\t(+ (first coll) (sum (rest coll)))\n\t)\n)","user":"54835065e4b0e286459a118c"},{"problem":24,"code":"(fn [coll]\n   (loop [coll coll\n          sum 0]\n     (if (nil? (next coll))\n       (+ sum (first coll))\n       (recur (next coll) (+ sum  (first coll))))))","user":"5e1ab7ede4b0dc9594008519"},{"problem":24,"code":"(fn getOdd [arr]\n    (if (= 0 (count arr))\n      0\n      (+ (first arr) (getOdd (rest arr)))\n    )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":24,"code":"(fn [x] ((fn [y s] (if-not (seq y) s (recur (rest y) (+ s (first y))))) x 0))","user":"543897e7e4b032a45b869314"},{"problem":24,"code":"reduce (fn [x y](+ x y))","user":"55bedd93e4b01b9910ae2a0d"},{"code":"(fn [xs]\n  (reduce \n    #(+ %1 %2) \n    xs))","problem":24,"user":"4ed6d81a535d10e5ff6f52ea"},{"problem":24,"code":"#(loop [counter (count %) sum 0]\n   (if (true? (= counter 0)) sum\n     (recur (- counter 1) (+ sum (nth (seq %) (- counter 1))))))","user":"558378dce4b05c286339e115"},{"problem":24,"code":"(fn [list]\n  (loop [xs list, total 0]\n    (if (empty? xs)\n      total\n      (recur (drop 1 xs) (+ total (first xs))))\n  )\n  )","user":"5cbdadeee4b026601754b9ff"},{"problem":24,"code":"(fn [v] (\n  (fn [v s]\n    (if (= v ())\n      s\n      (recur (rest v) (+ s (first v)))\n     )\n   ) v 0)\n)","user":"55188c5de4b06a49daca83cc"},{"problem":24,"code":"(fn [l] (reduce (fn [acc x] (+ acc x)) 0 l))","user":"550065a4e4b07d26eda61d5a"},{"code":"(fn [sq]\n  (reduce + 0 sq))","problem":24,"user":"4ec59ce4535d6d7199dd36ab"},{"problem":24,"code":"(fn [col]\n  (reduce + 0 col))\n  ;(loop[[x & xs] col\n  ;      sum 0]\n  ;  (if (nil? x)\n  ;    sum\n  ;    (recur xs (+ sum x)))))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":24,"code":"(fn sum-up [list]\n  (cond\n   (= 1 (count list)) (first list)\n   :else (+ (first list) (sum-up (rest list)))\n   )\n  )","user":"5a39e36ce4b001c08efc0cbc"},{"code":"(fn sum [list]\n  (cond\n   (empty? list) 0\n   :else (+ (first list) (sum (rest list)))\n   )\n  )","problem":24,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn [l]\n  (reduce + l)\n)","problem":24,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn sumall [S]\n    (if (empty? S)\n    0\n    (+ (first S) (sumall (rest S)))\n    )  \n  )","problem":24,"user":"4f554f4de4b0a7574ea717fa"},{"code":"(fn sum\n  [coll]\n  (reduce + coll))","problem":24,"user":"4e8a6bb0535d65386fec210b"},{"problem":24,"code":"(fn add-list\n  [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (add-list (rest lst)))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn [seqr] (reduce + seqr))","problem":24,"user":"4fafd067e4b081705acca259"},{"code":"(fn [xs]\r\n  ((fn [xs acc]\r\n    (if (empty? xs)\r\n        acc\r\n        (recur (rest xs)\r\n               (+ acc (first xs)))))\r\n   xs 0))","problem":24,"user":"4dda2c1b535d02782fcbe9ef"},{"problem":24,"code":"(fn sum [x]\n  (if (= x [])\n      0\n      (+ (first x) (sum (rest x)))))","user":"5a1f8c7ce4b0ff51aa4b3286"},{"code":"(fn sum [x] (apply + x))","problem":24,"user":"4f03818e535dcb61093f6b00"},{"problem":24,"code":"(fn [s] (loop [f (first s) r (rest s) sum 0]\n          (if (nil? f)\n          sum\n          (recur (first r) (rest r) (+ sum f)))))","user":"5599cc64e4b031d6649c9bb3"},{"problem":24,"code":"(fn add-list [list]\n  \"Adds and returns sum of numbers in a list\"\n  ((fn [sum list]\n     (if (empty? list)\n       sum\n       (recur (+ (first list) sum) (rest list))))\n    0 list))","user":"5bc50870e4b07a9b28b10069"},{"problem":24,"code":"(fn lisum [x]\n  (if (first x)\n    (+ (first x) \n       (lisum (rest x)))\n    (+ 0 0)\n    )\n  )","user":"5e1d01b5e4b0dc9594008542"},{"problem":24,"code":"(fn [z] (reduce (fn [x y] (+ x y)) 0 z))","user":"5cb4e764e4b026601754b929"},{"code":"reduce (fn[x y]( + x y ))","problem":24,"user":"4f542fd9e4b0a7574ea717db"},{"code":"(fn[x]( reduce (fn[n1 n2] (+ n1 n2)) (seq x)))","problem":24,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":24,"code":"(fn [in]\n  (loop [cnt 0 tmp in]\n    (if (empty? tmp)\n      cnt\n    (recur (+ cnt (first tmp)) (rest tmp)))))","user":"5761984fe4b0994c1922fb91"},{"problem":24,"code":"(fn sum [c] (if (empty? c) 0 (+ (first c) (sum (rest c)))))","user":"589c12c2e4b00487982d5353"},{"code":"(fn [arg] (loop [s arg acc 0] \n  (if (empty? s)\n    acc\n    (recur (rest s) (+ acc (first s))))))","problem":24,"user":"536673a8e4b0243289761e76"},{"problem":24,"code":"(fn [items] (reduce + 0 items))","user":"5669eb9ae4b04acd4f672e02"},{"code":"(fn my-sum\n  [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (my-sum (rest lst)))))","problem":24,"user":"4e7a479b535db169f9c796aa"},{"code":"(fn adder [seq]\n  (if( empty? seq )\n  0\n(+  (adder(rest seq))  (first seq))\n  ) )","problem":24,"user":"52dced9de4b09f7907dd13d7"},{"code":"(fn mysum [x]( if (nil? (first x)) 0 ( + (first x) (mysum (rest x)))))","problem":24,"user":"4eddfb5c535d10e5ff6f532f"},{"problem":24,"code":"(fn sum-it-all [x] \n  (if (= x '()) 0 \n    (+ (first x) (sum-it-all (rest x)))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn sum-seq [ls]\n  (if (empty? ls)\n      0\n      (+ (first ls) (sum-seq (rest ls)))))","problem":24,"user":"4e4b4564535dc968683fc4d3"},{"problem":24,"code":"(fn myf [c]\n  (reduce (fn [memo item] (+ memo item)) c))","user":"575c23d3e4b02ea114799369"},{"problem":24,"code":"(fn sumit [alist] (if (= (seq alist) nil) 0 (+ (sumit (rest alist)) (first alist))))","user":"58950f29e4b00487982d5270"},{"code":"(fn [coll]\n  ((fn [coll n]\n     (if (empty? coll)\n         n\n         (recur (rest coll) (+ n (first coll))))) coll 0))","problem":24,"user":"51736d4de4b00f4b6b0490d7"},{"problem":24,"code":"#(reduce (fn [o n] (+ o n)) %)","user":"5e9cdfa1e4b0157ca9664800"},{"problem":24,"code":"(fn sum [s] (if (first s) (+ (first s) (sum (rest s))) 0))","user":"5778694fe4b0979f89651660"},{"problem":24,"code":";(fn\n;  [col]\n;  (loop [auxCol col  j 0 res 0]\n;    (let [i (first auxCol)]\n;      (if (nil? i)\n;        res\n;        (recur (rest auxCol) (inc j) (+ i res))))))\n#(reduce + %)","user":"5be589f9e4b0ed4b8aab4d13"},{"code":"(fn sumtotal [x] (if (= x '()) 0\n (+ (first x) (sumtotal (rest x)))))","problem":24,"user":"5009902ee4b03d00572d2d6d"},{"code":"(fn [x] \n  (apply + (seq x)))","problem":24,"user":"51026750e4b00c483ae176f7"},{"problem":24,"code":"(fn [x]\n  (loop [lst x sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst)\n             (+ sum (first lst))\n             ))))","user":"579fb6c2e4b0264b925669fd"},{"problem":24,"code":"(fn sum [input] (loop [in input\n                       out 0]\n                     (if (= 1 (count in))\n                       (+ out (first in))\n                       (recur (rest in) (+ out (first in))))))","user":"579aff09e4b05b1deef9ade7"},{"problem":24,"code":"(fn sum [obj] (reduce + obj))","user":"552689cfe4b0ffed3738f91e"},{"problem":24,"code":"(fn \n  [seqn]\n  (loop [acc 0\n         _seqn seqn] \n    (if (empty? _seqn)\n      acc\n      (recur (+ acc (first _seqn)) (rest _seqn) ))))","user":"5854580ce4b07779d46863f9"},{"code":"(fn [coll]\n  (reduce + 0 coll))","problem":24,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":24,"code":"(fn sumSeq [s] \n   (reduce (fn [x y] (+ x y)) s)\n   )","user":"552d487ee4b076ab5578f7e4"},{"problem":24,"code":"reduce (fn [d c] (+ d c)) 0","user":"580cc8bde4b0849f6811b725"},{"code":"x","problem":24,"user":"52e635b3e4b09f7907dd146f"},{"code":"(fn my-sum\n  ([list] (my-sum list 0))\n  ([list sum]\n    (if (empty? list)\n      sum\n      (my-sum (rest list) (+ (first list) sum)))))","problem":24,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":24,"code":"(fn sum [x]\n  (let [t (rest x)]\n    (if (empty? t)\n      (first x)\n      (+ (first x) (sum t)))))","user":"5790329ee4b0ebec4cfb75a7"},{"code":"(fn [xs] \n  (reduce #(+ %1 %2) 0 xs))","problem":24,"user":"51ad20eee4b09397d510977e"},{"problem":24,"code":"(fn [col] \n  (reduce + col) )","user":"56a3dddce4b0542e1f8d14d2"},{"problem":24,"code":"#(reduce (fn [acc itm] (+ acc itm)) 0 %1)","user":"5bc60a65e4b07a9b28b10082"},{"code":"(fn [ys]\n  ((fn impl [xs acc]\n     (if (nil? xs)\n        acc\n        (impl (next xs) (+ acc (first xs)))))\n   ys 0))","problem":24,"user":"521392bce4b0d32679a5065e"},{"problem":24,"code":"(fn [xs]\n  (reduce (fn [acc x]\n            (+ acc x))\n          0 xs))","user":"5d11618de4b02c15ef021985"},{"problem":24,"code":"(fn [s] \n  (loop [x 0, s s]\n    (if (empty? s)\n      x\n      (recur (+ (first s) x) (rest s))\n     )))","user":"5897c71ee4b00487982d52c7"},{"code":"(fn sumit [list] (if (empty? list) 0 (+ (first list) (sumit (rest list)))))","problem":24,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":24,"code":"(fn sum- [x]\n  (reduce + x))","user":"556cd549e4b09a3098a52503"},{"code":"(fn [sq] ((fn summ[s acc] (if (= nil (first s))\n                              acc\n                              (summ (rest s) (+ acc (first s))))) sq 0))","problem":24,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn sum[numbers](apply + numbers))","problem":24,"user":"4e723bcb535d5021c1a8965c"},{"code":"(fn [s] (reduce + s))","problem":24,"user":"4e03f4bd535d04ed9115e79a"},{"problem":24,"code":"#(reduce (fn [acc new] (+ acc new)) %)","user":"5e88a676e4b0cb016954630a"},{"problem":24,"code":"(fn sum [xs] \n  (if xs \n      (+ (first xs) \n         (sum (next xs))\n      )\n      0\n  )\n)","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(comp (partial apply +) vec)","problem":24,"user":"52e41c22e4b09f7907dd144b"},{"problem":24,"code":"(fn sumSeq\n  [l]\n  (reduce (fn [x y] (+ x y)) 0 l))","user":"547a714ae4b0c51c1f4d72cc"},{"problem":24,"code":"(fn [x] (reduce #(+ %1 %2) 0 x) )","user":"54b331dbe4b09f271ff37d37"},{"problem":24,"code":"(fn [l] (reduce #(+ % %2) 0 l))","user":"54d468d0e4b0a52adc2e2000"},{"problem":24,"code":"(fn my-sum [lon]\n  (if (empty? lon)\n    0\n    (+ (first lon) (my-sum (rest lon)))))","user":"5f8a7bafe4b0715f5002d749"},{"code":"(fn summm [x] (reduce + x))","problem":24,"user":"4f84f6c3e4b033992c121c3d"},{"problem":24,"code":"(fn [ms] (reduce + ms))","user":"56483562e4b0284900eef629"},{"problem":24,"code":"#(loop [remaining %\n         sum 0]\n    (if (first remaining)\n      (recur (rest remaining) (+ sum (first remaining)))\n      sum\n      ))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":24,"code":"(fn [x] (reduce (fn[x y](+ x y)) x))","user":"567952b3e4b05957ce8c6185"},{"code":"(fn [list] (#(loop [list %1 n %2]\n                  (let [h (first list)\n                        t (rest list)]\n                        (if (nil? h)\n                            n\n                            (recur t (+ n h))))) list 0))","problem":24,"user":"4e0dee88535d04ed9115e7b8"},{"problem":24,"code":";reduce +\n;; Apparently, reduce has two signatures,\n;; (reduce f args) (reduce f val args)\n;; if you don't supply val, it just uses the first two elems of args\n;; apply is more appropriate, but I actually don't know why.\n\napply +","user":"560dfa8de4b05f002753df46"},{"problem":24,"code":"(fn add [s] (if (empty? s)\n            0\n            (+ (first s) (add (rest s)))))","user":"5af0ac45e4b0cc2b61a3bc56"},{"code":"(fn [s]\r\n  (loop [x s sum (first x)]\r\n      (if-not (nil? (second x))\r\n      (recur (rest x) (+ sum (second x)))\r\n      sum)))","problem":24,"user":"4de08793535d08e6dec9fde2"},{"problem":24,"code":"(fn [s] \n  (loop [[f & r] (seq s) t 0] \n    (if (empty? r) \n      (+ t f) \n      (recur r (+ t f))\n    )\n  )  \n)","user":"54aa373de4b09f271ff37cb6"},{"code":"(fn [sequencia] \n  (loop [soma 0, s sequencia]\n    (if (empty? s) soma\n      (recur (+ soma (first s)) (rest s))\n    )\n  )\n)","problem":24,"user":"527c040be4b03e8d9a4a75a7"},{"problem":24,"code":"reduce (fn [accum x] (+ accum x))","user":"5b7608c9e4b047b03b2036da"},{"problem":24,"code":"(fn [input]\n (loop [sum-so-far 0 remainder input]\n  (if (empty? remainder)\n   sum-so-far\n   (recur (+ sum-so-far (first remainder)) (rest remainder)))))","user":"58ffbabce4b0438e51c2d002"},{"code":"reduce #(+ %2 %) 0","problem":24,"user":"525efc76e4b0cb4875a45dbd"},{"problem":24,"code":"(fn q24\n  [coll]\n  (reduce + coll))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"(fn sum [data] (reduce + data))","problem":24,"user":"501d0321e4b066e56b9d0b1d"},{"problem":24,"code":"#(loop [se %, result 0]\n   (if (empty? se)\n     result\n     (recur (rest se) (+ (first se) result))))","user":"56d63c71e4b0ea9b8538f7cb"},{"code":"(fn [coll] (reduce #(+ %1 %2) 0 coll))","problem":24,"user":"4ddeb916535d08e6dec9fdd9"},{"problem":24,"code":"#(reduce (fn [acc curr] (+ acc curr)) 0 %)","user":"5a677a5fe4b0512ff01cd9e7"},{"problem":24,"code":"(fn xsum [s]\n  (reduce + 0 s))","user":"564ecc9ee4b0284900eef6a1"},{"problem":24,"code":"(fn [coll] (loop\n             [sum 0\n              rem coll]\n             (if (empty? rem)\n               sum\n               (recur (+ sum (first rem)) (rest rem)))))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":24,"code":"(fn yow[x]\n  (reduce + x))","user":"59395adfe4b02506e01a29fb"},{"code":"(fn [lat]\n  (reduce + lat))","problem":24,"user":"4e40529b535dc968683fc49a"},{"code":"(fn sum\n    ([xs] (sum xs 0))\n    ([xs acc]\n        (case xs\n            [] acc\n            (sum (rest xs) (+ acc (first xs))))))","problem":24,"user":"501306dee4b0c87326002231"},{"problem":24,"code":"(fn sum-it-up ([lst] (sum-it-up lst 0))\n  ([lst acc]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (+ acc (first lst))))))","user":"54c74a78e4b045293a27f637"},{"problem":24,"code":"#(reduce (fn [e sum] (+ e sum)) 0 %)","user":"52b9e920e4b07a9af57922c9"},{"problem":24,"code":"#(reduce (fn [s v] (+ s v)) 0 %)","user":"57515f94e4b02ea114799287"},{"problem":24,"code":"(fn sss \n  ([l] (sss l 0))\n  ([l a] (if (empty? l) a\n           (sss (rest l) (+ a (first l)))))\n  )","user":"543cf826e4b032a45b869345"},{"problem":24,"code":"(fn [lst] \n  (reduce + lst))","user":"5f84f110e4b0375e81f54e79"},{"code":"apply + 0","problem":24,"user":"4f280840e4b0d6649770a010"},{"problem":24,"code":"(fn sum-all [n] (apply + n))","user":"54b89dd6e4b0ed20f4ff6e97"},{"code":"(fn sm [seq] \n    (if (empty? seq) 0\n      (+ (first seq) (sm (rest seq)))\n    )\n  )","problem":24,"user":"509d528de4b0bb99d6371049"},{"problem":24,"code":"(fn my-sum [x] (reduce + x))","user":"576000fce4b08062f99a4e8b"},{"problem":24,"code":";;(fn adder [x] (if (seq x)\n;;                (+ (first x) (adder (rest x)))\n;;                0))\nreduce +","user":"54d0ceb5e4b0e8a36923e5d1"},{"code":"(fn [v] (reduce + v))","problem":24,"user":"4ff5c077e4b0678c553fc36f"},{"problem":24,"code":"(fn [col]\n    (reduce + col))","user":"59932f49e4b0b211ea3aaaae"},{"code":"(fn [seq]\r\n  (reduce (fn [x,y]\r\n    (+ x y)) seq))","problem":24,"user":"4df1e213535d08e6dec9fe20"},{"problem":24,"code":"(fn [l]\n  \t(loop [l l s 0]\n      \t(if (empty? l)\n          s\n          (recur (rest l) (+ (first l) s)))))","user":"542ab1afe4b01498b1a71b48"},{"problem":24,"code":"(fn a[x]\n  (if (= (count x) 1)\n    (first x)\n    (+(first x) (a (rest x)))\n   )\n )","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [n] (loop[l n cnt 0] \n  (if(= (first l) nil) \n    cnt\n(recur (rest l) (+ cnt (first l)) ))))","problem":24,"user":"4f8beb2fe4b02e764a0a5185"},{"problem":24,"code":"(fn q [l]\n  (if (empty? l)\n    0\n    (+ (first l) (q (rest l)))))","user":"5517a352e4b06a49daca83c5"},{"problem":24,"code":"#(loop [lst % res 0] (if (empty? lst) res (recur (rest lst) (+ res (first lst)))))","user":"56b33058e4b0982f16b37e12"},{"problem":24,"code":"(fn __\n  [items]\n  (reduce\n    +\n    items)\n  )","user":"5e300655e4b05b4b01516209"},{"code":"(fn sum [x]\n  (if (= (count x) 1)\n    (first x)\n    (+ (first x) (sum (rest x)))))","problem":24,"user":"4fc8b012e4b0ee37620e1838"},{"problem":24,"code":"(fn f [x]\n  (if (= x ())\n    0\n    (+ (first x) (f (rest x)))))","user":"57152731e4b07c98581c3ad0"},{"code":"(fn [x]\n  (let [sum (fn [x accum]\n              (if (seq x)\n                (recur (next x) (+ (first x) accum))\n                accum))]\n    (sum x 0)))","problem":24,"user":"519be011e4b0a1d87b00344e"},{"problem":24,"code":"(fn [alist] (reduce + alist))","user":"5404e61de4b0addc1aec6661"},{"problem":24,"code":"(fn [s]\n  (let [impl (fn [s n]\n               (if (empty? s)\n                 n\n                 (recur (rest s) (+ n (first s)))))]\n    (impl s 0)))","user":"5c50048ae4b0f9f7a8770eb9"},{"code":"(fn my-sum [x]\n   (loop [sum 0 nums x]\n     (if (next nums)\n       (recur (+ sum (first nums)) (next nums))\n       (+ sum (first nums)))))","problem":24,"user":"538557aee4b06839e8705f02"},{"code":"(fn my-sum [coll] (reduce (fn [a b] (+ a b)) 0 coll))","problem":24,"user":"522d0360e4b0806774ddfef7"},{"problem":24,"code":"(fn summ [x]\n  (reduce + 0 x))","user":"5c9b848fe4b048ec896c5acf"},{"code":"#(loop [col %1\n        sum 0]\n   (cond\n    (empty? col) sum\n    :else        (recur (rest col) (+ sum (first col)))))","problem":24,"user":"52fc89b2e4b047fd55837019"},{"code":"(fn [seq] (apply + seq))","problem":24,"user":"4e223bd6535d04ed9115e81c"},{"problem":24,"code":"(fn [arr]\n   (loop [incr 0\n          iarr (seq arr)]\n     (let [[x & y] iarr]\n       (if (empty? y) (+ incr x) (recur (+ incr x) y)))))","user":"5883a9bae4b0f1effa3b7681"},{"problem":24,"code":"(fn [seqn]\n  (reduce + seqn))","user":"584574a1e4b089d5ab817e69"},{"code":"#(reduce + %1 %2) 0","problem":24,"user":"5266db2be4b03e8d9a4a714a"},{"code":"(fn sum [s]\n  (reduce + s)\n  )","problem":24,"user":"500a214de4b03d00572d2d74"},{"code":"(fn sum [x] (if (= x []) (+ 0) (+ (first x) (sum (rest x)))))","problem":24,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"#(reduce (fn [sum, i] (+ sum i)) 0 %)","problem":24,"user":"4f29e66fe4b0d6649770a035"},{"code":"(fn sum [xs] (let [sumx (fn sumx [ls x] (if (empty? ls) x (sumx (rest ls) (+ x (first ls)))))] (sumx xs 0)))","problem":24,"user":"519ca227e4b0a1d87b003460"},{"problem":24,"code":";#(reduce ( fn [x y] (+ x y) ) 0 % )\n#(apply + %)","user":"5b8d03e4e4b0c0b3ffbd49cb"},{"problem":24,"code":";;#(reduce (fn [x y] (+ x)) 0 %)\n;;#(apply + %)\n(fn [x] (apply + x))","user":"597614a3e4b01722bebd4cd5"},{"problem":24,"code":"#(reduce \n  + %)","user":"562e9f5fe4b0ab312c17ebbd"},{"problem":24,"code":"(fn sm [s] (reduce + s))","user":"58767e82e4b01531a375ea85"},{"code":"(fn sumsit [x] (reduce + x))","problem":24,"user":"52d74c2de4b09f7907dd1373"},{"problem":24,"code":"#(if %2\n  (recur (+ %1 (first %2)) (next %2))\n  %1\n) 0","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":24,"code":"(fn\n  [seq]\n  (reduce + seq))","user":"5a1f85ffe4b0ff51aa4b3284"},{"problem":24,"code":"(fn [lst] (reduce (fn [acc num] (+ acc num)) 0 lst))","user":"5625f678e4b00e49c7cb47b8"},{"problem":24,"code":"(fn [items] (apply + items) )","user":"54b4046de4b05787c3b16389"},{"code":"(fn o-sum [col]\n  (if (empty? col) 0\n      (+ (first col) (o-sum (rest col)))))","problem":24,"user":"4f5f2665e4b0030a34fb2b5d"},{"problem":24,"code":"(fn f[s] (reduce + s))","user":"553b90c8e4b09218d5f45005"},{"code":"(fn [collection] \n  (reduce (fn [sum value] (+ sum value)) 0 collection))","problem":24,"user":"517a995de4b01aacecbecbef"},{"problem":24,"code":"(fn s [items]\n  (if (= '() items) 0\n  \t(+ (first items) (s (rest items)))))","user":"602bfcefe4b0d5df2af22268"},{"code":"(fn [xs] (reduce + 0 xs))","problem":24,"user":"4f00d948535dcb61093f6a32"},{"problem":24,"code":"#(loop [coll %\n        acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (+ acc (first coll)))))","user":"55ec4d30e4b0121d4835fdc6"},{"code":"(fn sum [aseq] (if (empty? aseq) 0 (+ (first aseq) (sum (rest aseq)))))","problem":24,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn [num-seq]\n  (reduce + num-seq))","problem":24,"user":"4f11caf6535d64f603146424"},{"code":"(fn [a](reduce + 0 a))","problem":24,"user":"4e10a14d535d04ed9115e7c1"},{"problem":24,"code":"reduce  (fn [x y] (+ x y) )","user":"5577318ce4b05c286339e07c"},{"code":"(fn sum [x]\n  (reduce (fn [a b] (+ a b)) 0 x))","problem":24,"user":"4f0399c4535dcb61093f6b34"},{"problem":24,"code":";reduce (fn [x y] (+ x y))\n;reduce #(+ %1 %2)\n#(reduce + %)","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":24,"code":"(fn sum [arr] (if (nil? (first arr)) 0 (+ (first arr) (sum (rest arr)))))","user":"5d2f5ba5e4b01671435dbcbf"},{"problem":24,"code":"(fn [col] \n    (reduce + col))","user":"5656e039e4b0f9d632dd84a3"},{"code":"(fn mycount2 [list]\n  (loop [coll list n 0]\n    (if (or (nil? coll) (empty? coll))\n       n\n      (recur (next coll) (+ n (first coll))))))","problem":24,"user":"524e9918e4b0541d1855b7e6"},{"code":"#( reduce + 0 %)","problem":24,"user":"4e7e6b51535db169f9c79712"},{"code":"(fn nsum\n  ([x] ((fn [s a] \n          (if (= s '()) a\n            ;Else\n            (recur (rest s) (+ (first s) a)))\n          ) x 0)))","problem":24,"user":"4e30da02535deb9a81d77f17"},{"code":"(fn f6 [x]\n  (apply + x))","problem":24,"user":"535aee3be4b04ce2eb3ed2aa"},{"code":"(fn [x] (reduce (fn [l r] (+ l r)) x))","problem":24,"user":"4fcf7f47e4b03432b189f414"},{"problem":24,"code":"(fn sum [seq] (if (empty? (rest seq)) (first seq) (+ (first seq) (sum (rest seq)))))","user":"54dc9ba1e4b024c67c0cf785"},{"code":"(fn sum [xs]\r\n  (reduce #(+ %1 %2) xs))","problem":24,"user":"4e123905535d04ed9115e7ce"},{"problem":24,"code":"(fn sum [xs]\n  (let [x (first xs)]\n  \t(if x\n      (+ x (sum (rest xs)))\n      0)))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":24,"code":"(fn \n  [ls]\n  (reduce + ls))","user":"5c58736be4b01df32ab73247"},{"problem":24,"code":"(fn [x] (loop [index 0 sum 0 currentColl x] (if (= index (count x)) sum (recur (+ 1 index) (+ sum (first currentColl)) (rest currentColl)))))","user":"5924009ce4b072a2710fce45"},{"problem":24,"code":"(fn [li] \n  (reduce + 0 li)\n  )","user":"5adcc688e4b0837691e92c05"},{"code":"(fn addup [s]\n  (if (next s)\n    (+ (first s) (addup (next s)))\n    (first s)))","problem":24,"user":"53098be4e4b02e82168697b7"},{"problem":24,"code":"(fn sum [ls] (reduce + ls))","user":"5f15b1e2e4b091ba50b4dbbd"},{"problem":24,"code":"(fn sum-it-all-up-3 [seq]\n  (loop [sum 0 s seq]\n    (if (empty? s) sum\n        (recur (+ (first s) sum) (rest s)))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":24,"code":"(fn [elements]\n  ( reduce\n    (fn [a v] (+ a v) )\n    0 elements\n  )\n)","user":"53cdcb5de4b00fb29b2212e8"},{"code":"(fn total-of-nums [list]\n  (reduce + (filter number? list)))","problem":24,"user":"51177fbce4b0e0897831a60b"},{"code":"(fn [c]\n  (loop [sum 0 col c]\n    (if (empty? col)\n      sum\n      (recur (+ sum (first col)) (rest col))\n      )\n    )\n  )","problem":24,"user":"4db7da66535d1e037afb2187"},{"problem":24,"code":"reduce (fn[a b](+ a b))","user":"53f7008be4b0de5c41848557"},{"problem":24,"code":"(fn f [x]\n  (if\n    (empty? x)\n    0\n    (+ (first x) ( f (rest x)))\n   )\n  )","user":"53ba5475e4b047364c0444f4"},{"problem":24,"code":"(fn sum\n  ([a] (sum a 0))\n  ([a s] (if \n          (= a '()) s\n          (sum \n           (rest a)\n           (+ s (first a))))))","user":"5707da27e4b0b0fb43fd0692"},{"problem":24,"code":"(fn foo [x] (if (seq x) (+ (first x) (foo (rest x))) 0))","user":"5f3388ade4b0574c87022c38"},{"code":"#(reduce (fn [a b] (+ b a)) %)","problem":24,"user":"52b467b0e4b0c58976d9ad24"},{"problem":24,"code":"(fn sum-it [li] (cond (empty? li) 0\n               :else (+ (first li) (sum-it (rest li)))))","user":"5786c182e4b0ebec4cfb74fd"},{"problem":24,"code":"(fn sumItUp [x] (reduce + x))","user":"55b1ab40e4b0da326a65cf6e"},{"code":"(fn [ac col]\n  (if (empty? col) ac\n    (recur (+ ac (first col)) (next col)))) 0","problem":24,"user":"4f045d0e535dcb61093f6bbc"},{"problem":24,"code":"(fn mysum [s]\n  (if (empty? s)\n    0\n    (+ (first s) (mysum (rest s)))))","user":"5cab33e7e4b048ec896c5c48"},{"code":"#(reduce (fn [acc x] (+ acc x)) 0 %)","problem":24,"user":"5328febee4b09d4e7a9b550d"},{"problem":24,"code":"(fn [x]\n   (letfn [(sum [s coll]\n             (if-let [f (first coll)]\n               (sum (+ s f) (rest coll))\n               s))]\n     (sum 0 x)))","user":"57689c23e4b0a07e8fc180d6"},{"code":"(fn [l]\n  (let [sum-up (fn [ll summed]\n                 (if (empty? ll) \n                   summed\n                   (recur (rest ll) (+ (first ll) summed))))] (sum-up l 0)))","problem":24,"user":"516a9dbee4b081287f204e9c"},{"code":"(fn [l]\n   ((fn [l n]\n      (if (empty? l)\n          n\n        (recur (rest l) (+ (first l) n) ) ) ) l 0 ) )","problem":24,"user":"530c15f7e4b02e82168697d6"},{"code":"(fn  [l]\n  (apply + l))","problem":24,"user":"51857e64e4b0da5a5be3babe"},{"problem":24,"code":"#(loop [x 0 coll %]\n  (if (empty? coll) x\n    (recur (+ x (first coll)) (rest coll))))","user":"5a7dbb58e4b03baeef9276fd"},{"problem":24,"code":"(fn [x] \n  (reduce (fn [acc e] (+ acc e)) 0 x))","user":"587c77afe4b01531a375eb1b"},{"problem":24,"code":"#(reduce (fn [acc elt] (+ acc elt)) 0 %)","user":"5553b924e4b0deb715856e06"},{"problem":24,"code":"(fn apply+ [seq] \n  (if (empty? seq)\n    0\n    (+ (first seq) (apply+ (rest seq)))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn summer2 [x]\r\n  ( let [sumx (fn [x y] (+ x y) ) ]\r\n\t      (reduce sumx x)))","problem":24,"user":"4dfb7b81535d04ed9115e77d"},{"problem":24,"code":"(fn [coll]\n  (loop [c coll acc 0]\n   (if (empty? c)\n     acc\n     (recur (rest c) (+ (first c) acc)))))","user":"55151417e4b055c2f668d4da"},{"problem":24,"code":"(fn sum [xs]\n  (reduce + xs))","user":"56244b3ae4b0b951f963fc22"},{"problem":24,"code":"(fn [x]\n\t(reduce + x))","user":"56128c54e4b05f002753df93"},{"code":"(fn [nrs] (reduce + 0 nrs))","problem":24,"user":"5092425ee4b09a7d0b586de4"},{"code":"(fn sum-sequence \n  ([sec] (sum-sequence sec 0))\n  ([sec sum] \n     (if (empty? sec)\n          sum\n          (recur (rest sec) (+ (first sec) sum)))))","problem":24,"user":"51f297a3e4b0210f90e74552"},{"code":"(partial reduce (fn [a b] (+ a b)))","problem":24,"user":"52a614dfe4b0c58976d9abf8"},{"problem":24,"code":"#(loop [xs %1 count 0]\n    (if (empty? xs)\n      count\n      (recur (rest xs) (+ count (first xs)))\n    )\n   )","user":"55664334e4b0c656e3ff182e"},{"code":"(fn [coll] (reduce + (map (fn [item] item) coll)))","problem":24,"user":"52ec4322e4b0705949c44451"},{"problem":24,"code":"(fn [l] ((fn f [l sum] (if (empty? l) sum (f (rest l) (+ sum (first l))))) l 0))","user":"5826ed1fe4b051871117bf0e"},{"problem":24,"code":"(fn sum [coll] (if (nil? (seq coll)) 0 (+ (first coll) (sum (rest coll))) ))","user":"5342702ce4b00652c8746edb"},{"code":"(fn [coll]\n\t(reduce + coll))","problem":24,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn sumz [se] (reduce + se))","problem":24,"user":"4e7f45a8535db966e863cc3e"},{"problem":24,"code":"(fn [coll]\n  (loop [currList coll\n         currSum 0]\n    (if (empty? currList)\n      currSum\n      (recur (rest currList) (+ currSum (first currList)))\n      )\n    )\n  )","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":24,"code":"(fn [l] \n    ((fn [summ sq]\n       (if (empty? sq)\n         summ\n         (recur \n          (+ summ (first sq)) \n          (rest sq)))\n       ) 0 l))","user":"5713c575e4b07c98581c3aab"},{"code":"(fn [s]\n  (loop [s s sum 0]\n    (if (empty? s)\n        sum\n        (recur (rest s) (+ sum (first s))))))","problem":24,"user":"50555c06e4b0ce54f56f03fa"},{"problem":24,"code":"(fn [x]                                                                  \n   (loop [elms x acc 0]                                                         \n     (if (= 0 (count elms))                                                     \n        acc                                                                     \n     (recur (rest elms) (+ acc (first elms)) ))))","user":"564cc055e4b0284900eef676"},{"problem":24,"code":"(fn sumThemUp [theList] (\n  if (empty? theList)\n    0\n    (+ (first theList) (sumThemUp (rest theList)))    \n))","user":"578d0ec0e4b0ebec4cfb7563"},{"problem":24,"code":"(fn [xs] \n  (reduce #(+ %1 %2) xs))","user":"5a1c94dee4b0ff51aa4b3249"},{"problem":24,"code":"(fn [items]\n  (loop [loop_items items msum 0]\n    (if (empty? loop_items)\n      msum\n      (recur (rest loop_items) (+ msum (first loop_items)))\n      )\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":24,"code":"(fn [list]\n  (reduce (fn [acc x]\n           (+ acc x)) 0 list))","user":"560a7775e4b05f002753defa"},{"code":"#(reduce + (into '() %))","problem":24,"user":"504f0036e4b0e7ad84dbc4aa"},{"code":"(fn [x]   (loop [r 0     i x]\t(if (nil? (first i))\t  r\t  (recur (+ r (first i)) (rest i)))))","problem":24,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":24,"code":"reduce (fn\n          [cc acc]\n          (+ cc acc))\n        0","user":"5cfcf4d9e4b0cc9c91588162"},{"problem":24,"code":"reduce (fn [c l] (+ c  l)) 0","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":24,"code":"(fn msm [s] (reduce + s))","user":"5a487d9ce4b05d388ecb6b67"},{"problem":24,"code":";(fn add-seq [coll]\n;  (loop [coll coll\n;         sum 0]\n;    (if (= () coll)\n;      sum\n;      (recur (rest coll) (+ sum (first coll))))))\n\n\n(fn [coll] (reduce + coll))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":24,"code":"(fn [s] (reduce (fn [cnt e] (+ cnt e)) 0 s))","user":"540efe2ee4b0addc1aec6724"},{"problem":24,"code":"(fn [xs]\n  (reduce\n   (fn [acc x]\n     (+ acc x))\n   0 xs\n  ))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn sum [lst]\n  (reduce + lst))","problem":24,"user":"4fc52278e4b081705acca37c"},{"problem":24,"code":"reduce (fn [h R] (+ h R)) 0","user":"558504aae4b04192f3441ef5"},{"problem":24,"code":"(fn sum ([x]  (sum x 0)) ([x y] \n                             (if (empty? x) y\n                                 (sum (drop 1 x) (+ (first x) y)))))","user":"599b457ae4b07157cc8dab1f"},{"code":"(fn fx [x] (\n  reduce (fn cnt[a b] (\n    + a b\n  )) 0 x\n))","problem":24,"user":"50202d1ae4b0cb6ebc0a42f3"},{"problem":24,"code":"(fn [x] (reduce (fn [a b] (+ a b)) x))","user":"5289714de4b0239c8a67ae64"},{"problem":24,"code":"(fn [m] (reduce + m))","user":"55cd95b4e4b0e31453f64a1e"},{"code":"#(apply + (map (fn [x] x) %))","problem":24,"user":"4e21d76a535d04ed9115e81a"},{"problem":24,"code":"(fn [collection]\n  (reduce + 0 collection))","user":"5d42c88ae4b05dd059a5437e"},{"problem":24,"code":"(fn sum-all[n]\n  (apply + n))","user":"5018878ce4b029375d2a5056"},{"code":"(fn \n  [n]\n    (reduce + n))","problem":24,"user":"4f4daa4ae4b03ad3f0c10cac"},{"problem":24,"code":"(fn [x] (reduce + (vec x)))","user":"5a799077e4b03baeef9276c1"},{"problem":24,"code":"#(reduce  + %1 )","user":"5cfa344de4b0cc9c9158813c"},{"code":"(fn sum  [l]\r\n  (if (empty? l) 0\r\n  (+ (first l) (sum ( rest l))))\r\n )","problem":24,"user":"4dd4f0a8535dae65d5c462e4"},{"code":"(fn [coll] \n  (loop [x coll result 0]\n    (if (empty? x)\n      result\n      (recur (rest x) (+ result (first x))))))","problem":24,"user":"4ebbf772535dfed6da9c6d76"},{"problem":24,"code":"(fn [coll]\n    (loop [coll coll n 0]\n      (if-not (first coll)\n        n\n        (recur (rest coll) (+ n (first coll))))))","user":"5337bdfee4b0e30313ee6c8c"},{"code":"(fn [x]\n  ((fn sum [y accum]\n     (if (empty? y)\n       accum\n       (sum (rest y) (+ accum (first y))))) x 0))","problem":24,"user":"52de249ae4b09f7907dd13ed"},{"code":"(fn [x]\n(loop [l x s 0]\n(if(not(empty? l))\n(recur (rest l) (+ s (first l)))s)))","problem":24,"user":"517e6671e4b0329b27fa9f56"},{"problem":24,"code":"(fn tambah [x]\n  (if (not (empty? x)) \n    (+ (first x) (tambah (rest x)))\n    0))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn [numbers] (loop [sum 0 remaining numbers] (if (empty? remaining) sum (recur (+ (first remaining) sum) (rest remaining)))))","problem":24,"user":"512088a3e4b0aab57de66d4f"},{"problem":24,"code":"(fn sm [s] ((fn sm-aux [s result] (if (empty? s) result (sm-aux (rest s) (+ (first s) result)))) s 0))","user":"57d5ac4de4b0bd073c2023bc"},{"code":"(fn sum [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (recur\n     (cons (+ (first coll)\n                (second coll))\n             (rest (rest coll))))))","problem":24,"user":"512e8f5ce4b0b740abc59829"},{"problem":24,"code":"(fn f [p] (if (= p []) 0 (+ (first p) (f (rest p)))))","user":"557bd432e4b05c286339e0bb"},{"problem":24,"code":"(fn\n  [s]\n  (reduce (fn [rez el] (+ el rez)) s))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn adder [s]\n  (if (empty? (rest s)) (first s)\n      (+ (first s) (adder (rest s)))))","problem":24,"user":"4febc4a5e4b0681fd128dc99"},{"problem":24,"code":"(fn sum [items]\n  (reduce + items))","user":"5d80f328e4b0915913b1d372"},{"problem":24,"code":"(fn add [x]\n  (reduce + x)\n)","user":"5ac74b34e4b0e27600da777f"},{"problem":24,"code":"(fn sum [x]\n  (if (= (first x) nil)\n    0\n    (+ (first x) (sum(rest x)))))","user":"5632abbee4b0bfe05bf117a7"},{"problem":24,"code":"(fn [a] (reduce (fn [x y] (+ x y)) 0 a))","user":"54c93206e4b045293a27f65d"},{"problem":24,"code":"(fn [xs]\n  (reduce\n   +\n   0\n   xs))","user":"568c4bc8e4b0dcc4269f40b2"},{"code":"(fn [lst] \n  (apply + lst))","problem":24,"user":"50d5c19ce4b0159555a1fc61"},{"code":"(fn foo\n  ([s] (foo s 0))\n  ([s acc] (if (empty? s) acc (recur (rest s) (+ (first s) acc)))))","problem":24,"user":"4e6a4950535d8ccf87e9febf"},{"problem":24,"code":"(fn [x]\n\t\t(reduce + x))","user":"598d746ae4b02b9968b84d23"},{"problem":24,"code":"(fn sum [x] ( \n             if (= x nil) 0\n             (+ ( first x) (sum (next x)))\n            )\n)","user":"55d1a2b8e4b0e31453f64a46"},{"code":"reduce (fn [x y] (+ x y)) ;; reduce +","problem":24,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"code":"(fn [theSeq] (reduce (fn [x y] (+ x y)) theSeq))","problem":24,"user":"4ea08b30535d7eef308072a5"},{"code":"(fn [k] (reduce + k))","problem":24,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [l]\n  (reduce (fn [a b] (+ a b)) l)\n)","problem":24,"user":"4e5e8d5d535d8a8b8723a2d1"},{"problem":24,"code":"(fn sumNumbers [numbers]\n  (if (nil? (second numbers))\n    (first numbers)\n    (+ (first numbers) (sumNumbers (rest numbers)))\n    )\n  )","user":"5b7f381ae4b047b03b203769"},{"problem":24,"code":"(\n fn sum [l] (\n             if (empty? l) 0\n             (+ \n             (sum (rest l))\n             (first l)\n             ))\n )","user":"56cb3c71e4b0ea9b8538f729"},{"code":"(fn [li] \n  (reduce \n   \t(fn[s x] (+ s x))\n   \t0\n   \tli\n  )\n)","problem":24,"user":"5394265ee4b0b51d73faaec6"},{"problem":24,"code":"#(reduce (fn [a b] (+ a b)) 0 %1)","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":24,"code":"(fn [myl]\n  (loop [l myl, acc 0]\n    (if (= l []) acc (recur (rest l) (+ acc (first l)))\n      )\n    )\n  )","user":"54857657e4b0e286459a11ac"},{"problem":24,"code":"(fn [x]\n  (loop [y x\n         n 0]\n    \n  \t(if (= y '())\n    \tn\n    \t(recur (rest y) (+ n (first y))))\n   )\n)","user":"5e265173e4b05b4b01516175"},{"problem":24,"code":"(fn mySum [l] (if (empty? l) 0 (+ (first l) (mySum (rest l)))))","user":"5790b3d0e4b0ebec4cfb75ad"},{"code":";reduce + 0 \napply +","problem":24,"user":"534ab3f5e4b084c2834f4a6e"},{"problem":24,"code":"(fn su [x] (if (empty? x) 0 (+ (first x) (su (rest x)))))","user":"5b8856e8e4b047b03b20380a"},{"problem":24,"code":"(fn sum\n  ([l acc] \n   (if (empty? l)\n     acc\n     (sum (rest l) (+ (first l) acc))))\n  ([l]\n   (sum l 0)))","user":"56aa448ce4b07966d5a8a083"},{"problem":24,"code":"(fn sum [x]\n (loop [n (dec (count x)), sum (first x), l (vec x)]\n  (if (> n 0)\n   (recur (dec n) (+ sum (nth l n)) l) \n    sum )))","user":"54ef8d80e4b024c67c0cf887"},{"code":"(fn [sequence]\n    (reduce (fn [a b] (+ a b)) 0 sequence) \n)","problem":24,"user":"51dc0ed1e4b09c47a74ce105"},{"problem":24,"code":"(fn\n  [x]\n\t(loop [s 0 ve x]\n\t\t(if (empty? ve)\n\t\t\ts\n\t\t\t(recur (+ s (first ve)) (rest ve)))))","user":"5a222c17e4b0ff51aa4b32c1"},{"code":"(fn [s] (reduce #(+ %1 %2) 0 s))","problem":24,"user":"4f0b2028535d0136e6c222ff"},{"code":"apply  +","problem":24,"user":"5041b3c0e4b06d8231e4facf"},{"problem":24,"code":"(fn [lst]\n  (reduce + 0 lst))","user":"57a7f7d8e4b0a96607956218"},{"code":"(fn [l]\n  (loop [ll l acc 0]\n    (if (empty? ll) acc\n      (recur (next ll) (+ acc (first ll))))))","problem":24,"user":"53997239e4b0b51d73faaf07"},{"code":"(fn f24 [a] \n  (loop [a a\n         b 0]\n    (if (= (vec a) [])\n      b\n      (recur (rest a) (+ b (first a))))))","problem":24,"user":"52c08c59e4b07a9af5792351"},{"problem":24,"code":"#(reduce + (map (fn [x] x) %1))","user":"5cd42a01e4b0ccb061962915"},{"problem":24,"code":"(fn [coll] (loop [sum 0 coll coll] (if (empty? coll) sum (recur (+ sum (first coll)) (rest coll)))))","user":"573c8377e4b0cd1946bd10c7"},{"problem":24,"code":"reduce (fn[x y] (+ x y)) 0","user":"55f9d870e4b03cbcff9738cc"},{"problem":24,"code":"(fn [input]\n  (reduce + input))","user":"5460612be4b01be26fd74691"},{"code":"(fn ([arr]\r\n              (loop [ sum 0 curArr arr]\r\n                    (if(=(first curArr) nil)\r\n                      sum\r\n                      (recur  (+ sum (first curArr)) (rest curArr))))))","problem":24,"user":"4de6f806535d08e6dec9fdf7"},{"problem":24,"code":"(fn [x]\n (loop [lst x sum 0]\n  (if (empty? lst) sum\n   (recur (rest lst)\n          (+ (first lst)\n                 sum)))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn [coll](reduce + coll))","problem":24,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"problem":24,"code":"(fn \n  [nums]\n  (reduce + nums))","user":"5a9567bae4b0d174b936c752"},{"problem":24,"code":"#(reduce (fn [sum y] (+ sum y)) %)","user":"5b01cf9ee4b0cc2b61a3bd49"},{"problem":24,"code":"(fn [l] (reduce + l ))","user":"550b5a53e4b06e50f9beb142"},{"problem":24,"code":"reduce (fn [acc v] (+ acc v)) 0","user":"5bcf95ace4b0e9689409ee2e"},{"code":"(fn [list] (reduce + list))","problem":24,"user":"4daf1076edd6309eace4d16f"},{"code":"(fn [lst]\n  (loop [x lst acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (+ acc (first x))))))","problem":24,"user":"512934dde4b03a34742b4315"},{"problem":24,"code":"#(loop [c 0\n        s %]\n   (if (empty? s)\n     c\n     (recur (+ c (first s))\n            (rest s))))","user":"53b88e6ee4b047364c0444de"},{"problem":24,"code":"#(loop [lst %\n        s 0]\n   (if (empty? lst)\n     s\n     (recur (rest lst) (+ s (first lst)))))","user":"54dd3bdde4b024c67c0cf791"},{"problem":24,"code":"(fn sumit [x]\n  (if (seq (rest x))\n    (+ (sumit (rest x)) (first x))\n    (first x)\n  )\n)","user":"595ed97fe4b066ee0a44b051"},{"problem":24,"code":"(fn [V]\n  (apply + V))","user":"5e6b891ee4b04a83ad7cd27a"},{"code":"(fn [lst] (reduce + lst))","problem":24,"user":"4e62294c535d8ccf87e9fe5f"},{"problem":24,"code":"#(loop [lst %\n        n 0]\n   (if (empty? lst)\n     n\n     (recur (rest lst) (+ (first lst) n))))","user":"55c68089e4b0e31453f649c4"},{"code":"(fn summ [x]\n  (if (= (first x) nil)\n    0\n    (+ (summ (rest x)) (first x))))","problem":24,"user":"527f214de4b0757a1b1713c4"},{"code":"reduce (fn [a,e] (+ a e)) 0","problem":24,"user":"4f91cca8e4b0dcca54ed6ca3"},{"code":"(fn [s] \n  (reduce + s))","problem":24,"user":"4f70183ee4b07046d9f4eff3"},{"problem":24,"code":"(fn sum-it-all-up-solution\n  [collection] ;; update args as needed\n  ;; Write a function which returns the sum of a sequence of numbers.\n  (reduce + collection))","user":"58445c3ce4b089d5ab817e49"},{"code":"(fn sum_it [col] (if (empty? col) 0 (+ (first col) (sum_it (rest col)))))","problem":24,"user":"505dee52e4b0b06147a37273"},{"code":"(fn [var] (reduce + var))","problem":24,"user":"51f98843e4b09be9c177e54e"},{"code":"#(apply + %1)","problem":24,"user":"4de2f44f535d08e6dec9fdec"},{"problem":24,"code":"reduce (fn [r x] (+ r x))","user":"562c2fc2e4b058fa18c5a6d7"},{"problem":24,"code":"(fn summate [coll] (if (empty? coll) 0 (+ (summate (next coll)) (first coll))))","user":"5ceca436e4b0a17bb84e2bf8"},{"code":"#(\n  (fn dropper [x y]\n   (if (nil? (second x))\n     (+ y (first x))\n     (dropper (rest x) (+ y (first x)))))\n % 0)","problem":24,"user":"4ebe066a535dfed6da9c6d91"},{"code":"{[1 2 3] 6 [0 -2 5 5] 8 #{4 2 1} 7 [0 0 -1] -1 [1 10 3] 14}","problem":24,"user":"51e3a549e4b0c611d6113e47"},{"problem":24,"code":"(fn [xs]\n\t(loop [xs xs\n           sum 0]\n\t\t(if (empty? xs)\n          sum\n          (recur (rest xs) (+ sum (first xs))))))","user":"5d217b1de4b02ea6f0fb69e6"},{"problem":24,"code":"(fn [y] (reduce (fn [x i] (+ x i)) 0 y))","user":"5df8e717e4b0a607a9a45cae"},{"code":"(fn [x]\n  (loop [x x total 0]\n    (if (seq x) (recur (rest x) (+ total (first x))) total)))","problem":24,"user":"4fa82277e4b081705acca1d0"},{"code":"(fn f [s] (\n  if (= 0 (count s))\n    0\n    (+ (first s) (f (rest s)))\n))","problem":24,"user":"4f72e09de4b07046d9f4f03b"},{"problem":24,"code":"(fn [seq] (reduce + 0 (vec seq)))","user":"5bc352abe4b07a9b28b10041"},{"problem":24,"code":"(fn sum [x] (reduce + (seq x)))","user":"564230dae4b08d4f616f5f14"},{"problem":24,"code":"(fn sum-xs [xs]\n  (reduce + xs))","user":"57b402e4e4b0fbc9809a278c"},{"problem":24,"code":"#((fn [a b]\n  \t(if (empty? a)\n      b\n      (recur (rest a) (+ b (first a)))\n    )\n  )\n  % 0)","user":"54973374e4b0b312c081ff6f"},{"problem":24,"code":"(fn [x]\n  (loop [coll x sum 0]\n    (if (empty? coll)\n      sum\n      (recur (rest coll) (+ sum (first coll)))\n      )))","user":"5bfc82cfe4b0bdcf453d15f0"},{"problem":24,"code":"#(reduce (fn [sum i] (+ sum i)) 0 %)","user":"5e519986e4b027a2e10ac0d0"},{"problem":24,"code":"(fn summer [x]\n  (reduce (fn [x, y] (+ y x)) 0 x))","user":"5c14ce29e4b01240ff5671b6"},{"problem":24,"code":"(fn summ\n  ([xs] (summ xs 0))\n  ([xs acc]\n   (if (= xs ())\n     acc\n     (summ (rest xs) (+ acc (first xs))))))","user":"595c3782e4b066ee0a44aff2"},{"code":"(fn [s]\n    (reduce + 0 s))","problem":24,"user":"4f1473eb535d64f603146439"},{"problem":24,"code":"(fn sum_list [x] (if (> (count x) 1)\n                   (+ (first x) (sum_list (rest x)))\n                   (first x)\n                   )\n  )","user":"59e696c5e4b0249b728206fd"},{"code":"(fn [coll] (reduce (fn [x y] (+ x y)) 0 coll))","problem":24,"user":"4f49bca5e4b0d56e7bb92bfb"},{"problem":24,"code":"(fn [vec]\n  (reduce + 0 vec))","user":"54db1911e4b024c67c0cf75b"},{"problem":24,"code":"#(apply + %)\n; reduce +","user":"55129636e4b06e50f9beb1ab"},{"problem":24,"code":"(fn sumall [l] (reduce + l))","user":"5e546e20e4b027a2e10ac0eb"},{"code":"reduce (fn [prev nxt] (+ prev nxt))","problem":24,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":24,"code":"(fn sm [x] (if (= '() x) 0 (+ (first x) (sm (rest x)))))","user":"552949e5e4b0ffed3738f948"},{"code":"(fn [arr] (reduce + arr))","problem":24,"user":"4e932a19535dbda64a6f6b0a"},{"problem":24,"code":"(fn [seqn] (apply + seqn))","user":"54cbccb4e4b057c6fda3a280"},{"problem":24,"code":"(fn [lista] \n  (reduce + lista))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [param] ((fn laske [lista result] (if (empty? lista) result (laske (rest lista) (+ result (first lista))))) param 0))","problem":24,"user":"52474ec2e4b05ef8e38e6361"},{"problem":24,"code":"(fn sm [xs] (reduce + xs))","user":"57cf9de8e4b00451144b0503"},{"problem":24,"code":"(fn sum-elements-of-sequence\n  [some-sequence]\n  (reduce + some-sequence))","user":"5c9a638fe4b048ec896c5aae"},{"problem":24,"code":"(fn add-up-this-crap [crap] \n  (reduce + crap))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn sumit [s]\n  (if \n    (empty? s) \n    0\n    (+ (first s) (sumit (rest s)))))","problem":24,"user":"4eb75bdf535d7eef30807375"},{"code":"(fn [col]\n  (reduce #(+ %1 %2) 0 col)\n)","problem":24,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":24,"code":"(fn\n  [coll]\n  (apply + coll)\n)","user":"53d17fdde4b00fb29b221315"},{"code":"(fn [x] (reduce + (seq x)))","problem":24,"user":"4df247b8535d08e6dec9fe25"},{"code":"(fn [col] \n  (reduce + col))","problem":24,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":24,"code":"(fn sum [coll] (apply + coll))","user":"5dd7dec1e4b0948ae9d9ad8d"},{"problem":24,"code":"(fn [x]\n  (loop [lst x sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst) (+ sum (first lst))))))","user":"57cef3f8e4b0c746388ab8b4"},{"code":"(fn [x]\r\n  (reduce + x))","problem":24,"user":"509fa9b5e4b08df8156e9e3f"},{"problem":24,"code":"(fn [inp]\n  ((fn sumr [ls s]\n     (if (seq ls)\n         (sumr (rest ls) (+ s (first ls)))\n         s\n      )) inp 0\n   ))","user":"587df462e4b01531a375eb45"},{"problem":24,"code":"(fn [thelist]\n  (loop [oldlist thelist sum 0]\n    (if (empty? oldlist) sum\n      (recur (rest oldlist) (+ sum (first oldlist)))\n    )\n  )\n)","user":"562d6385e4b0a45d2ff8301b"},{"problem":24,"code":"(fn sum [s]\n  (if (= s '())\n    0\n    (+ (first s) (sum (rest s)))))","user":"5438795ee4b032a45b869313"},{"problem":24,"code":"(fn jsum [sq]\n  (if (= (count sq) 1)\n    (first sq)\n    (+ (first sq) (jsum (rest sq)))\n    )\n  )","user":"580f9585e4b0f478707a05b5"},{"code":"(fn my-sum [s] (reduce + s))","problem":24,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":24,"code":"(fn [sequence] (reduce + 0 sequence))","user":"5a47ce68e4b05d388ecb6b5d"},{"code":";;(fn sum [x] \n;;  (if (not= x '())\n;;  (+ (first x) (sum (rest x)))\n;;    0))\n\n(fn sum [x]\n  (reduce + x))","problem":24,"user":"52cefb7ee4b07d0d72b27397"},{"problem":24,"code":"(fn [numbers](reduce + numbers))","user":"54ef7568e4b024c67c0cf885"},{"problem":24,"code":"(fn sum-seq [items] (reduce + items))","user":"5d652873e4b0db5d338d15ce"},{"problem":24,"code":"(fn [xs] (reduce (fn [a b] (+ a b)) xs))","user":"55eb1410e4b0121d4835fdb8"},{"code":"(fn sums [s]\n  (loop [sum 0, ss s]\n    (if (first ss)\n      (recur (+ sum (first ss)) (rest ss))\n      sum)))","problem":24,"user":"5213c2ece4b0a98dd8fc4bd0"},{"problem":24,"code":"(fn\n  [x]\n  (loop [lst x\n         sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst) (+ sum (first lst))))))","user":"59d68f3fe4b0ef0a1e9b5c1e"},{"code":"#(loop [c (count %)\n        sum 0\n        l %]\n        (if (not (= c 0))\n          (recur (dec c) (+ sum (first l)) (rest l))\n          sum))","problem":24,"user":"4e9e7ce3535dbda64a6f6b98"},{"problem":24,"code":"(fn sum-of [n]\n  (reduce + n))","user":"5634995fe4b0bfe05bf117be"},{"code":"(fn[colls]\n  (loop [col colls result 0]\n    (if (empty? col)\n      result\n      (recur (rest col) (+ result (first col))))))","problem":24,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":24,"code":"#(loop [lst %\n        accum 0]\n   (if (empty? lst) accum\n     (recur (rest lst) (+ accum (first lst)))))","user":"56f413b2e4b046a417f9205a"},{"code":"(fn cnt [x]\n  (if (empty? x)\n      0\n      (+ (first x) (cnt (rest x)))))","problem":24,"user":"4ed1d123535d44c135fd68d2"},{"problem":24,"code":"(fn\n     [list]\n     (reduce + list)\n    )","user":"55f9b634e4b03cbcff9738c9"},{"problem":24,"code":"(fn own-sum\n  [given-sequence]\n  (reduce + given-sequence))","user":"5e4e3c31e4b027a2e10ac0ad"},{"code":"#(apply + (seq %))","problem":24,"user":"4e14108c535d04ed9115e7dd"},{"problem":24,"code":"(fn [lst]\n   (loop [l lst s 0]\n      (if (empty? l)\n         s\n         (recur (rest l) (+ s (first l))))))","user":"5a653f80e4b0512ff01cd9b2"},{"problem":24,"code":"#(loop [col %\n       sum 0]\n     (if (empty? col)\n     sum\n     (recur  (rest col)\n            (+ sum (first col)))))","user":"57bf304de4b05aa3c4741c75"},{"problem":24,"code":"#(reduce (fn [acc i] (+ acc i)) 0 %)","user":"5992dc6ae4b0866487ed0d7d"},{"problem":24,"code":";(partial reduce + 0)\napply +","user":"569ab3e2e4b0542e1f8d144a"},{"problem":24,"code":"( fn [list] (reduce + list))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":24,"code":"(fn sum [sequence] (reduce + sequence))","user":"556c94afe4b09a3098a524fe"},{"problem":24,"code":"#(reduce \n   (fn [sum n] (+ sum n)) 0 %)","user":"54fdb4b9e4b07d26eda61d3a"},{"code":"(fn sum [list]\n  (if (empty? list)\n    0\n    (+ (first list) (sum (rest list)))))","problem":24,"user":"51b01309e4b0c53cf2e68a57"},{"problem":24,"code":"(fn [elem] (reduce + elem))","user":"55744472e4b0aa18f790f402"},{"problem":24,"code":"#(reduce (fn [res v]\n           (+ res v))\n         0 %)","user":"59331397e4b072a2710fd046"},{"problem":24,"code":"(fn [s]\n  (reduce + s) )","user":"5858f0cce4b0f14aab7c8727"},{"code":"(fn [l]\n  (loop[arr l,sum 0]\n    (if(nil? arr)\nsum\n(recur (next arr) (+ sum (first arr))))))","problem":24,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn [s]\r\n   (apply + s))","problem":24,"user":"4e08fb7a535d04ed9115e7ac"},{"code":"(fn mysum [xs] \n  (if (empty? xs)\n    0\n    (+ \n      (first xs)\n      (mysum (rest xs))\n    )\n  )\n)","problem":24,"user":"4f0d6686535d0136e6c22318"},{"code":"(fn sum [lst]\n    ((fn aux [l s]\n        (if (empty? l)\n            s\n            (aux (next l) (+ s (first l))))) lst 0))","problem":24,"user":"5180dc04e4b06b8caf33fa01"},{"problem":24,"code":"(fn\n  [lst]\n  (loop [nums lst acc 0]\n    (if-not (= nums '())\n      (recur (rest nums) (+ acc (first nums)))\n      acc)))","user":"5e668d87e4b0e171e1033681"},{"problem":24,"code":"(fn [c] (reduce + 0 c))","user":"56c23ca6e4b05cc29241ee7f"},{"problem":24,"code":"reduce +\n;; apply +","user":"553e3260e4b0a04f792994eb"},{"problem":24,"code":"(fn ss [x]\n  (if (= x [])\n    0\n    (+ (first x) (ss (rest x)))\n   )\n  )","user":"5c4a08c5e4b0f9f7a8770e4f"},{"problem":24,"code":"(fn c [s](if (= 1 (count s)) (first s) (+ (c (rest s)) (first s)) ))","user":"5752ed4fe4b02ea1147992a2"},{"problem":24,"code":"(fn [l]\n  ( loop [mylist l sum 0]\n    (if (empty? mylist)\n      sum\n      (recur (rest mylist) (+ sum (first mylist)))\n    )\n  )\n)","user":"58a72f71e4b01a0c0b23293f"},{"problem":24,"code":"(fn [lst] (reduce + (seq lst)))","user":"533c2605e4b0e30313ee6cd7"},{"problem":24,"code":"(fn [x]\n  (apply + 0 x ))","user":"55855f00e4b001b0851d750b"},{"code":"(fn[coll] (reduce + coll))","problem":24,"user":"4f294dffe4b0d6649770a024"},{"problem":24,"code":"(fn sum [x]\n   ((fn aa [y z]\n \n      (if (empty? y)\n        z\n        (recur  (rest y) (+ (first y)  z))\n        )\n      )  x 0)\n   )","user":"5f693778e4b02876ed9fd03f"},{"problem":24,"code":"(fn [s]\n  (loop [s s, res 0]\n    (if (seq s)\n      (recur (rest s) (+ res (first s)))\n      res)))","user":"5a481e05e4b05d388ecb6b64"},{"problem":24,"code":"(fn sum [lst] \n  (if (= lst '()) 0 (+ (first lst) (sum (rest lst)))))","user":"57a0e0bce4b0c3d858beb8dc"},{"problem":24,"code":"(fn sum\n  [lst]\n  \n  (reduce + lst))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":24,"code":"(fn [Data] (reduce + Data))","user":"601bdcb3e4b0bf4ca6b10930"},{"problem":24,"code":"reduce  (fn [l r] (+ l r))","user":"56c6a3c3e4b05cc29241eeb3"},{"code":"(fn [sequ] (apply + sequ))","problem":24,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":24,"code":"(fn [col] \n (loop [sum 0 \n        rst (seq col)]\n  (if (or \n       (= () rst) \n       (= nil rst)) sum \n      (recur \n       (+ sum (first rst)) \n       (rest rst)))))","user":"5f055b2de4b0cf489e8d7f43"},{"code":"(fn fsum [s] \n  (if-not (empty? s)\n    (+ (first s) (fsum (rest s)))\n    0)\n  )","problem":24,"user":"52299d14e4b04c906c9c6a7e"},{"code":"#(apply + (vec %))","problem":24,"user":"4ea683e4535d7eef308072e5"},{"code":"(fn asum [s]\n  (if (next s)\n    (+ (first s) (asum (next s)))\n    (first s)))","problem":24,"user":"51064b76e4b01150e115ebe4"},{"problem":24,"code":"(fn \n\t[the-list]\n\t(reduce (fn [acc,elem] (+ acc elem)) 0 (seq the-list)))","user":"59b62f8de4b05c620303ca1f"},{"code":"(fn sum-col [col]\n  (apply + col))","problem":24,"user":"4ead1bb3535d7eef3080731d"},{"problem":24,"code":"(fn rs[l] (reduce + l))","user":"5550e966e4b00713264bd9b3"},{"problem":24,"code":"(fn sum-it-all [x]\n  (reduce + x))","user":"5a38b82ee4b001c08efc0ca5"},{"problem":24,"code":"(fn sum-seq [inSeq]\n  ((fn [currentSeq currentSum]\n      (if (next currentSeq)\n        (recur (rest currentSeq) (+ (first currentSeq) currentSum))\n        (+ (first currentSeq) currentSum)))\n    inSeq 0))","user":"556b67c9e4b09a3098a524ed"},{"problem":24,"code":"(fn [collection]\n  (reduce #(+ %1 %2) collection))","user":"56cb77e0e4b0ea9b8538f734"},{"code":"(fn [x] (reduce + x))","problem":24,"user":"4dd62278535d2dad7130b5c7"},{"problem":24,"code":"(fn f [v] (if (= v []) 0 (+ (first v) (f (rest v)))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"code":"(fn sum [xs] \n  (if (empty? xs) 0\n    (+ (sum (rest xs)) (first xs))))","problem":24,"user":"4eeae8f0535d93acb0a668a2"},{"problem":24,"code":"(fn [li]\n  ((fn [li acc]\n     (if (empty? li)\n       acc\n       (recur (rest li) (+ (first li) acc)))) li 0))","user":"5c96f3dde4b048ec896c5a67"},{"code":"(fn my-sum [s]\n  (\n\t\t(fn [s s-sum](if(empty? s) s-sum (recur(rest s)(+ (first s) s-sum))))\n\t\ts 0 \n\t)\n)","problem":24,"user":"4f044e44535dcb61093f6bb9"},{"problem":24,"code":"(fn [s]\n  (loop [s s, acc 0]\n    (if (seq s)\n      (recur (rest s) (+ acc (first s)))\n      acc)))","user":"5526a235e4b0ffed3738f922"},{"code":"(fn [xs]\n    (reduce #(+ %1 %2) 0 xs))","problem":24,"user":"4fc0f5b8e4b081705acca329"},{"problem":24,"code":"#(loop [list % count 0]\n  (if (empty? list)\n     count\n     (recur (drop-last list) (+ count (last list)))))","user":"5ecda821e4b016b56eae0598"},{"code":"(fn foo [x] (if (empty? x) 0 (+ (first x) (foo (rest x)))))","problem":24,"user":"4e03d6ef535d04ed9115e797"},{"code":"(fn [x] \n  (reduce (fn [item1 item2] (+ item1 item2)) x))","problem":24,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn[x] (apply + x))","problem":24,"user":"4e94b4f7535dbda64a6f6b27"},{"problem":24,"code":"(fn mysum [s] (if (seq s)\n      (+ (mysum (rest s)) (first s))  \n      0 \n  )\n)","user":"592018d2e4b09b4ee5954c55"},{"code":"#(reduce (fn [val, item] (+ val item)) %)","problem":24,"user":"4ee26926535d10e5ff6f5367"},{"problem":24,"code":"(fn [a] \n    (reduce + a)\n  )","user":"5c94cbb1e4b048ec896c5a3d"},{"problem":24,"code":"(fn [arg] (reduce + (map (fn [arg] arg) arg)))","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn [coll]\n  (loop [sum 0 c coll]\n    (if (empty? c)\n      sum\n      (recur (+ sum (first c)) (rest c)))))","problem":24,"user":"51991a89e4b068aa333628fd"},{"problem":24,"code":"(fn [elements]\n  (loop [n 0 els elements]\n    (if (empty? els)\n      n\n      (recur (+ n (first els)) (rest els))\n      )))","user":"60486e8ae4b02d28681c77db"},{"problem":24,"code":"(fn [v] \n  \n  (reduce + v)\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn [coll] (reduce #(+ %1 %2) coll))","problem":24,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":24,"code":"(fn [s] \n  (reduce (fn [acc x] (+ acc x)) 0 s))","user":"59a0286be4b0871e7608b82f"},{"code":"(fn sum [x] (cond (= x []) 0 :else (+ (first x) (sum (rest x)))))","problem":24,"user":"528b9efee4b0239c8a67aea0"},{"code":"(fn foo [l] (if (= (first l) nil) 0 (+ (foo (rest l))  (first l))))","problem":24,"user":"50ef3e5de4b0a78662fa2652"},{"problem":24,"code":"(fn [theList] ( reduce + theList ))","user":"548026d8e4b0e286459a1155"},{"problem":24,"code":"(fn [list-of-numbers]\n  (loop [list-of-numbers list-of-numbers\n        output 0]\n    (if (empty? list-of-numbers)\n      output\n      (recur (rest list-of-numbers) (+ (first list-of-numbers) output))\n    )\n  )\n)","user":"5545f713e4b0a04f7929953a"},{"code":"(fn [seq]\n  (loop [se seq\n   total 0]\n    (do\n      (if (empty? se)\n\ttotal\n\t(recur (rest se) (+ total (first se)))))))","problem":24,"user":"4ef9b021535dced4c769f269"},{"code":"(fn my-sum [c]\n  ((fn my-sum-r [c s]\n      (if (= [] c)\n            s \n            (my-sum-r (rest c) (+ s (first c)))\n        )\n    )\n    c 0\n  )\n)","problem":24,"user":"4ec17677535dfed6da9c6dad"},{"code":"(fn [c] (reduce #(+ %1 %2) 0 c))","problem":24,"user":"4f7c0ab8e4b06e829148e1ac"},{"problem":24,"code":"(fn sum-up [coll]\n  (reduce + coll)\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":24,"code":"(fn [x]\n  (reduce + x)\n  \n)","user":"56aa9464e4b07966d5a8a08d"},{"code":"(fn [s]\n  (loop [ss s sum 0]\n    (if (empty? ss)\n       sum     \n     (recur (rest ss) (+ (first ss) sum)))))","problem":24,"user":"4faa1157e4b081705acca1ea"},{"code":"reduce + 0","problem":24,"user":"4dd865e1535d2dad7130b5d7"},{"problem":24,"code":"(fn [input] (apply + input))","user":"587c845ce4b01531a375eb20"},{"code":"(fn sum [seq]\n  (if (nil? seq)\n      0\n      (+ (first seq) (sum (next seq)))))","problem":24,"user":"4e444c11535dc968683fc4a9"},{"problem":24,"code":"(fn lstSum [lst ]\n  (if (empty? lst)\n    nil\n    (loop [lst lst\n           n 0\n           ]\n      (if (empty? lst)\n        n\n        (recur (rest lst) (+ n (first lst)))\n        )\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"problem":24,"code":"#(loop [coll % acc 0] (if (empty? coll) acc (recur (rest coll) (+ (first coll) acc))))","user":"5f05654fe4b0cf489e8d7f44"},{"code":"(fn s [coll](\n  if (empty? coll)\n  0\n  (+ (first coll) (s (rest coll)))))","problem":24,"user":"4ed42c78535d10e5ff6f52c7"},{"problem":24,"code":"(fn [numbers] \n  (loop [numbers numbers \n         acc 0]\n    (if (= 0 (count numbers))\n      acc\n      (recur (rest numbers) (+ acc (first numbers)))\n      )))","user":"53c69ebce4b00fb29b22129c"},{"code":"#(reduce + 0 %1)","problem":24,"user":"4e410033535dc968683fc49c"},{"problem":24,"code":"(fn[x](loop [result 0 lijstje x]\n(if(empty? lijstje) result\n(recur (+ result  (first lijstje)) (rest lijstje)))))","user":"54bbb7dee4b0ed20f4ff6ec1"},{"problem":24,"code":"(fn [lst]\n  (loop [aux 0\n         lst lst]\n    (if (empty? lst)\n      aux\n      (recur (+ aux (first lst)) (rest lst)))))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":24,"code":"(fn [more]\n  (reduce + more))","user":"56a37ccee4b0542e1f8d14cb"},{"problem":24,"code":"(fn [xs] (reduce #(+ %1 %2) 0 (seq xs)))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":24,"code":"(fn seq-sum [s]\n  (reduce + 0 s))","user":"59ece650e4b0249b72820795"},{"problem":24,"code":"(fn mysum [s]\n  (loop [r s n 0]\n    (if(empty? r)\n     n\n     (recur (rest r) (+ n (first r))))))","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":24,"code":"(fn [myseq]\n  (loop [newseq myseq accum 0]\n    (if (empty? newseq)\n      accum\n      (recur (rest newseq) (+ accum (first newseq))))))","user":"56197b47e4b053970a773af8"},{"code":"(fn sum [xs]\n  ((fn impl [xs acc]\n      (if (empty? xs)\n        acc\n        (impl (rest xs) (+ acc (first xs)))))\n    xs 0))","problem":24,"user":"4e691c79535d8ccf87e9fe97"},{"problem":24,"code":"#(reduce + \n         0 \n         %)","user":"5891bddce4b00487982d5201"},{"problem":24,"code":"(fn sum [s]\n  (reduce + s))","user":"545801f6e4b01be26fd74615"},{"code":"(fn [s]\n  ((fn shaz [s x] (if (= (count s) 0) x (shaz (next s) (+ x (first s)))))\n    s 0))","problem":24,"user":"500f4f2fe4b03ec779321689"},{"code":"(fn sum [sequence]\n  (reduce + sequence)\n)","problem":24,"user":"537d9b39e4b06839e8705e8f"},{"problem":24,"code":"(fn [list] (reduce + 0 list))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn [list] (apply #'+ list))","problem":24,"user":"4e68fe94535d8ccf87e9fe94"},{"code":"(fn [coll]\n      (loop [coll coll acc 0]\n        (if (nil? (first coll))\n          acc\n          (recur (rest coll) (+ acc (first coll))))))","problem":24,"user":"4ea03a3a535d7eef308072a0"},{"problem":24,"code":"(fn [coll] (reduce (fn [a b] (+ a b)) 0 coll))","user":"53ed6976e4b0d648e757f4c4"},{"problem":24,"code":"(fn [col] (loop [sum 0 col col] (if (seq col) (recur (+ sum (first col)) (rest col)) sum)))","user":"5709eacde4b0b0fb43fd06b3"},{"problem":24,"code":"#(reduce (fn [sum number] (+ sum number)) 0 %)","user":"55941019e4b0c79f6e1db94b"},{"code":"(fn sum[seq] (if (empty? seq) 0 (+ (first seq) (sum (rest seq)))))","problem":24,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [x] (loop [a x r 0] (if (or (empty? a)) r (recur (rest a) (+ r (first a))))))","problem":24,"user":"5179fd22e4b01aacecbecbe5"},{"code":"(fn [seq-to-sum]\n  (reduce (fn [sum item] (+ sum item)) 0 seq-to-sum))","problem":24,"user":"4f0bc223535d0136e6c22307"},{"code":"(fn [acc , x] \n  (if (empty? x) \n    acc \n    (recur (+ (first x) acc) (rest x)))) 0","problem":24,"user":"5295ed30e4b02ebb4ef75028"},{"code":"(fn loopy \n  ([s] (loopy (rest s) (first s)))\n  ([s total] \n    (if-not (= (first s) nil)\n      (loopy (rest s) (+ (first s) total))\n      total)))","problem":24,"user":"4ed2b337535d44c135fd68de"},{"code":"(fn sum [seq]\r\n  (if (empty? seq)\r\n    0\r\n    (+ (first seq) (sum (rest seq)))))","problem":24,"user":"4e234588535d04ed9115e821"},{"code":"(fn add [s] (if (= 1 (count s)) (first s) (+ (first s) (add (rest s)))))","problem":24,"user":"4fea2de5e4b0140c20fb9bfe"},{"code":"(fn sigma [l]\n  (if (empty? l)\n    (+ 0)\n    (+ (first l) (sigma (rest l)))))","problem":24,"user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":24,"code":"(fn seq-sum\n        [mysequence]\n        (if (= 1 (count mysequence))\n          (first mysequence)\n          (+ (first mysequence) (seq-sum (rest mysequence)))\n        )\n  )","user":"53fe459ae4b0de5c418485f4"},{"code":"(fn s [x]\n  (if (empty? x) 0 \n    (+ (first x) (s (rest x) ) ) ) )","problem":24,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn [lst]\n  (reduce + lst))","problem":24,"user":"507db411e4b03c76e5499e06"},{"problem":24,"code":"(fn [s] \n  (loop [s s\n         acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (+ acc (first s)))\n    )\n  )\n)","user":"563a3cc2e4b0bfe05bf117fa"},{"code":"(fn [x]\n  (reduce + (seq x)))","problem":24,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":24,"code":"reduce (fn [a, b](+ a b)) 0","user":"58dace6ae4b0a4d5acaab66a"},{"code":"(fn [lst]\n    ((fn [l sum]\n      (if (empty? l)\n          sum\n          (recur (rest l) (+ sum (first l)))))\n     lst 0))","problem":24,"user":"4f07dfa9535dcb61093f6c30"},{"problem":24,"code":"(fn \n  [x]\n  (reduce + x))","user":"5a2b2140e4b09cafd31c7f44"},{"problem":24,"code":"#(apply +(into () %))","user":"58b2f085e4b0ebc645576d15"},{"code":"(fn suma [x]\n  (apply + x))","problem":24,"user":"4db51ce0535d87e67b28fe06"},{"problem":24,"code":"#(loop [coll %\n                  accum 0]\n             (if (nil? (first coll))\n               accum\n               (recur (rest coll)\n                      (+ accum (first coll)))))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":24,"code":"(fn [s]\n  (loop [s s result 0]\n    (cond\n     (empty? s) result\n     :else (recur (rest s) (+ (first s) result)))))","user":"5a616fd2e4b0512ff01cd974"},{"problem":24,"code":"(fn\n  [x]\n  (reduce #(+ %1 %2) x))","user":"5a7df247e4b03baeef927704"},{"problem":24,"code":"#(loop [sum 0 lis %1]\n    (if (empty? lis)\n      sum\n      (recur (+ sum (first lis)) (rest lis))))","user":"5901731ae4b0438e51c2d03d"},{"problem":24,"code":"#(loop [s % sum 0]\n   (if (seq s)\n     (recur (rest s)(+ sum (first s)))\n     sum))","user":"601a2f59e4b0bf4ca6b10925"},{"problem":24,"code":"#(reduce + 0 %\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":24,"code":"(fn sss [x] (if (= 0 (count x)) 0 (+ (first x) (sss (rest x)))))","user":"54d707bde4b0a52adc2e2025"},{"code":"(fn [list]\n  (apply + list))","problem":24,"user":"50bdef33e4b0594b91591c86"},{"problem":24,"code":"(fn sum-seq [seq]\n  (if (empty? seq)\n    0\n    (+ (first seq) (sum-seq (rest seq)))))","user":"53bab6fae4b047364c0444fb"},{"code":"(fn [x]\n(loop [x x sum 0]\n\t(if (empty? x) sum\n\t(recur (rest x) (+ sum (first x))))))","problem":24,"user":"521368ece4b0d32679a50659"},{"code":"(fn my-count [lst]\n        (if (= (count lst) 1)\n            (first lst)\n            (+ (first lst) (my-count (rest lst)) )))","problem":24,"user":"4fb591aee4b081705acca2c0"},{"problem":24,"code":"(fn [sec] (apply + sec))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn [sequ]\n  (loop [sum 0 s sequ]\n  \t(if (empty? s)\n  \t\tsum\n  \t(recur (+ sum (first s)) (rest s) )\n      )\n    )\n  )","problem":24,"user":"53863845e4b06839e8705f0f"},{"problem":24,"code":"(fn mysum [x] (apply + x))","user":"571aad45e4b07c98581c3b59"},{"code":"apply +","problem":24,"user":"4db4c93f535dc0f10411755c"},{"problem":24,"code":"reduce (fn [acc e] (+ acc e)) 0","user":"56cad309e4b0ea9b8538f720"},{"problem":24,"code":"#(loop [s 0 sq %1]\n   (if (empty? sq)\n     s\n     (recur (+ s (first sq)) (rest sq))))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn f [s]\n  (reduce + s))","problem":24,"user":"5092f940e4b097f48cc3857b"},{"problem":24,"code":"(fn f [coll]\n  (reduce + 0 coll))","user":"53b2e953e4b047364c04449e"},{"problem":24,"code":"(fn my-sum\n  [sequ]\n  (reduce + sequ))","user":"5a47e8ade4b05d388ecb6b5f"},{"code":"#((fn get-last [x n] (\n  if (= (first x) nil) n (get-last (rest x) (+ n (first x))))) % 0)","problem":24,"user":"4f9dbe07e4b0dcca54ed6d26"},{"code":"(fn f[l](if (empty? l) 0 (+ (first l) (f (rest l)))))","problem":24,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn t [x] (if  (not (nil? x))\r\n            \t  (+ (t (next x)) (first x))\r\n\t\t  \t\t\t  0))","problem":24,"user":"4f8dbae2e4b02e764a0a51b3"},{"code":"#(letfn [(worker [x n]\r\n           (if (= x ())\r\n             n\r\n             (recur (rest x) (+ n (first x)))))]\r\n   (worker % 0))","problem":24,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [a] (apply + a))","problem":24,"user":"4e74e119535d7a570dd295bc"},{"code":"(partial reduce #(+ %1 %2))","problem":24,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn [x] (reduce (fn [i j] (+ i (first (list j)))) 0 x))","problem":24,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":24,"code":"(fn soma [x] (reduce + (vec x)))","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":24,"code":";#(reduce + %)\n\n#(apply + %)","user":"565487dce4b0f9d632dd8482"},{"problem":24,"code":"#(loop [x 0 y %] (if (empty? y) x (recur (+ x (first y)) (rest y))))","user":"5977653be4b01722bebd4ced"},{"problem":24,"code":"#((fn [coll acc] (if (empty? coll) acc (recur (rest coll) (+ acc (first coll))))) % 0)","user":"5885cc62e4b0f1effa3b76c1"},{"problem":24,"code":"(fn sumall\n\t[arr]\n\t(reduce + arr))","user":"5545477fe4b0a04f79299531"},{"problem":24,"code":"(fn\n  [arr]\n  (reduce #(+ %1 %2) 0 arr))","user":"56451201e4b0284900eef600"},{"problem":24,"code":"#(reduce\n  (fn [sum elem] (+ sum elem))\n  0\n  %)","user":"5df0c29ce4b093ff717275c1"},{"code":"(fn [sq] (reduce + sq))","problem":24,"user":"526e84b5e4b03e8d9a4a732d"},{"problem":24,"code":"(fn[x] (\n        reduce + x\n        )\n  \n  )","user":"54cf977fe4b018d918be98d1"},{"problem":24,"code":"(fn check [x & [y]] (if (= x ()) (do y) (do (check (rest x) (if (= y nil) (do (first x)) (do (+ y (first x))) )))))","user":"580014d7e4b0a837a8b30c32"},{"code":"(fn my [x] (reduce + x))","problem":24,"user":"50f01187e4b0bdaecbb47da5"},{"code":"(fn sum [x]\n  (reduce + x)\n  )","problem":24,"user":"51ab734ee4b04e3dc0c27b34"},{"problem":24,"code":"reduce (fn [s n] (+ s n)) 0","user":"553d86cfe4b0a04f792994e2"},{"problem":24,"code":"(fn sum [x]\n  (reduce #(+ %1 %2) 0 x))","user":"5de4f858e4b0948ae9d9ae09"},{"code":"(fn this\n  ([some-seq] (this some-seq 0))\n  ([some-seq accum]\n    (if (seq some-seq)\n      (recur (next some-seq)\n       (+ accum (first some-seq)))\n      accum)))","problem":24,"user":"4e6ac7a8535d8ccf87e9ff03"},{"code":"(fn [xs] (reduce #(+ %1 %2) xs))","problem":24,"user":"4f58de86e4b0a7574ea7185b"},{"code":"(fn [seq]\n  (reduce + 0 seq))","problem":24,"user":"506755b3e4b03d366d7cb2bc"},{"problem":24,"code":"(fn\n  [coll]\n (reduce\n (fn sum1\n  [a b]\n  (+ a b)) coll))","user":"5971a017e4b01722bebd4c75"},{"code":"(fn [x] (reduce #(+ %1 %2) x ) )","problem":24,"user":"52628bb0e4b03e8d9a4a7089"},{"problem":24,"code":"(fn sum [ls]\n  (if (= ls ())\n    0\n    (+ (first ls) (sum (rest ls)))))","user":"60890415e4b0ae75613dceec"},{"problem":24,"code":"(fn [xs]\n  (apply + xs))","user":"5644bf88e4b0284900eef5fc"},{"code":"(fn sum [x]\n  (reduce + 0 x))","problem":24,"user":"4e7ddc71535db169f9c796ef"},{"problem":24,"code":"apply +\n;(fn [x] (apply + x))","user":"5822e082e4b04b46fc4b0fa9"},{"code":"(fn [c]\r\n  (reduce + c)\r\n)","problem":24,"user":"4ee9b3a1535d93acb0a66890"},{"problem":24,"code":"(fn [col]\n  (loop [loopcol col\n         sum 0]\n    (if (empty? loopcol)\n      sum\n      (recur (rest loopcol) (+ sum (first loopcol))))))","user":"54178782e4b01498b1a71a0c"},{"code":"reduce #(+ % %2)","problem":24,"user":"4ec6cd4f535d6d7199dd36d7"},{"problem":24,"code":"#(reduce (fn [acc item]\n           (+ acc item)) %)","user":"5a6a2515e4b0512ff01cda21"},{"problem":24,"code":"(fn \n  [s]\n  (apply + s))","user":"55c734a5e4b0e31453f649cb"},{"code":"(fn [sp]\r\n  (apply + sp))","problem":24,"user":"4de18de7535d08e6dec9fde8"},{"problem":24,"code":"(fn \n  [s]\n  (reduce + s)\n  )","user":"6074f5ede4b069485764de52"},{"code":"(fn [s]\n  (reduce + 0 s))","problem":24,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn sum-recur [seq]\n  (letfn [(sum\n            [current seqnext s n]\n            (if (zero? n)\n              s\n              (recur seqnext (next seqnext) (+ s (first current)) (dec n))))]\n    (sum seq (next seq) 0 (count seq))))","problem":24,"user":"50a991dce4b07e35d68b27b3"},{"problem":24,"code":"(fn sum [lis]\n   (if (empty? lis) 0\n       (+ (first lis) \n          (sum (rest lis)))))","user":"5627444fe4b00e49c7cb47cd"},{"code":"(fn f [x] (\n  if (= (count x) 1)\n  (first x)\n  (+ (first x) (f (rest x)))\n))","problem":24,"user":"4f73054fe4b07046d9f4f03e"},{"problem":24,"code":"(fn\n  [coll]\n\t(reduce + coll))","user":"5f9c3f63e4b0715f5002d820"},{"problem":24,"code":"(fn sum-of-sequence [a-seq] (reduce (fn [x y] (+ x y)) a-seq))","user":"5679c9f2e4b05957ce8c6191"},{"problem":24,"code":"(fn [x]\n  (loop [inlst x total 0]\n    (if (empty? inlst)\n      total\n      (recur (rest inlst) (+ total (first inlst))))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn sum\n  ([x]\n   (if (empty? x)\n     0\n     (sum (rest x) (first x))))\n  ([x y]\n   (if (empty? x)\n     y\n     (recur (rest x) (+ (first x) y)))))","problem":24,"user":"52e6975de4b09f7907dd147a"},{"code":"(fn sum [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (sum (rest lst)))))","problem":24,"user":"4e7b7e0d535db169f9c796b3"},{"problem":24,"code":"(fn foo [l] (if (= '() l) 0 (+ (first l) (foo (rest l)))))","user":"57a9b2dbe4b0a96607956233"},{"code":"(fn sum [seq]\n  (apply + seq))","problem":24,"user":"50293b68e4b061fd216be4b7"},{"code":"#(\n  reduce + %\n)","problem":24,"user":"4ff6354fe4b0678c553fc376"},{"code":"(fn [l] (reduce #(+ %1 %2) 0 l))","problem":24,"user":"4fea6f3fe4b0140c20fb9c05"},{"code":"#( reduce + % )","problem":24,"user":"4e1203d5535d04ed9115e7cc"},{"problem":24,"code":"(fn add [a]\r\n  (if (= a '())\r\n    0\r\n    (+ (first a) (add (rest a)))))","user":"55244734e4b0882d96d091bf"},{"code":"(fn [s]\n  (loop [seq s sum 0]\n    (if (empty? seq)\n      sum\n      (recur (rest seq) (+ sum (first seq))))))","problem":24,"user":"51a132cee4b0b292b01ee3ff"},{"code":"(fn [c]\n  (loop [xe c, result 0]\n    (if (seq xe)\n      (recur (rest xe) (+ result (first xe)))\n      result)))","problem":24,"user":"4dcc2435535d5973398f9290"},{"code":"(fn \n  [coll]\n  (reduce + 0 coll))","problem":24,"user":"51804bcbe4b04f45bde7d901"},{"problem":24,"code":"(fn my-sum-all [n]\n\t(loop [acc 0 x n]\n\t\t(if (empty? x)\n\t\tacc\n\t\t(recur (+ acc (first x)) (rest x))\n          )))","user":"56caea02e4b0ea9b8538f721"},{"code":"(fn my-sum\n  ([x]\n    (my-sum (rest x) (first x)))\n  ([x acc]\n    (if (empty? x)\n      acc\n      (my-sum\n        (rest x)\n        (+ acc (first x))))))","problem":24,"user":"4f8d340be4b02e764a0a51a8"},{"problem":24,"code":"(fn plus [x] (apply + x))","user":"557ad449e4b05c286339e0a6"},{"problem":24,"code":"(fn [vals] (reduce + vals))","user":"54c219cbe4b045293a27f5f9"},{"problem":24,"code":"(fn \n  [lst]\n  (reduce + lst))","user":"57f81569e4b0d3187e900919"},{"code":"#(loop [lst % acc 0]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) ( + acc (first lst) ) ) ) )","problem":24,"user":"5181cf74e4b06547fbae1159"},{"code":"(fn sum [x]\n  (if (= x '())\n    0\n    (+ (first x) (sum (rest x)))\n  )\n)","problem":24,"user":"4fa7ef54e4b081705acca1ca"},{"code":"(fn mysum [L]\n  (if (= L '()) 0\n  (let [_mysum (fn _mysum [L n]\n    (if (= (rest L) '())\n      (+ n (first L))\n      (_mysum (rest L) (+ n (first L)))))] (_mysum L 0))))","problem":24,"user":"51f67858e4b06ff1c25c52c5"},{"problem":24,"code":"(fn [db] (reduce + (vec db)))","user":"5a4e3166e4b05d388ecb6bbb"},{"code":"(fn [collec] (reduce + collec))","problem":24,"user":"5318f85ae4b08068f379ed76"},{"code":"(fn sum [nums]\n  (if (empty? nums)\n    0\n    (+ (first nums) (sum (rest nums)))))","problem":24,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [x](reduce + x))","problem":24,"user":"500147e1e4b0678c553fc418"},{"problem":24,"code":"(fn func[l] (loop [m l acc 0] (if (empty? m) acc (recur (rest m) (+ acc (first m))))))","user":"56039a9de4b04bb52996e1bf"},{"problem":24,"code":"(fn[coll] (reduce + 0 coll))","user":"5e29cb4ce4b05b4b015161ae"},{"problem":24,"code":"(fn \n  [seq]\n  (reduce + seq))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":24,"code":"(fn sum-it-all-up \n    [collection]\n     (reduce + collection))","user":"54391a55e4b032a45b869319"},{"problem":24,"code":"(fn algo \n  [lst]\n   (reduce + lst)\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":24,"code":"(fn -sum\n  ([l] \n   (-sum l 0))\n  ([l acc] \n   (let [-head (first l) \n         -tail (rest l)]\n     (if (= -head nil)\n       acc\n       (-sum -tail (+ -head acc))\n       )\n     ))\n  )","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [x]\n  (apply + x))","problem":24,"user":"4eecdb33535d93acb0a668b8"},{"problem":24,"code":"(fn [data] (apply + data))","user":"56940617e4b0dcc4269f410b"},{"problem":24,"code":"(fn my-sum-all [l]\n  (reduce + l))","user":"56df5b74e4b0ca2494a095ed"},{"code":"(fn add [s] (\n  if (= nil (first s))\n     0\n     (+ (first s) (add (next s)))\n))","problem":24,"user":"4f06f90a535dcb61093f6c1b"},{"code":"(fn newsum [seq]\n  (apply + seq))","problem":24,"user":"50057f23e4b0678c553fc466"},{"problem":24,"code":"(fn sm [s]\n  (if (= 1 (count s))\n    (first s)\n    (+ (first s) (sm (rest s)))))","user":"5d81c244e4b0915913b1d37a"},{"problem":24,"code":"(fn my-sum [sum-list]\n  (if (empty? sum-list) \n    0\n    (+ (my-sum (rest sum-list)) \n       (first sum-list))))","user":"5c547943e4b0fb8c5ffd9a0a"},{"problem":24,"code":"(fn sum [xs]\n\t(if (empty? (rest xs))\n      (first xs)\n      (+ (first xs) (sum (rest xs))))\n)\n\n;;(fn sum [xs]\n;;\t(reduce + xs)  \n;;)","user":"58b783f2e4b0ebc645576d7f"},{"problem":24,"code":"(fn ss\n  [ls]\n  (reduce #(+ % %2) 0 ls)\n  )","user":"54db48f6e4b024c67c0cf760"},{"code":"(fn sum [list] \n  (if (= list [])\n    0\n    (+ (first list) (sum (rest list)))))","problem":24,"user":"4e7023f8535d5021c1a89631"},{"code":"(fn [coll]\n  (\n   reduce + coll\n   ))","problem":24,"user":"51da7e49e4b02ceefd947768"},{"code":"reduce (fn [sum element] (+ sum element)) 0","problem":24,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [coll]\n  (loop [c coll, acc 0]\n    (if (empty? c)\n      acc\n      (recur (rest c) (+ acc (first c))))))","problem":24,"user":"50a83794e4b054305ba5a831"},{"problem":24,"code":"(fn find-total [items]\n  (let [total-fn (fn total [[front & items]]\n  \t\t\t\t\t(if (empty? items)\n    \t\t\t\t\tfront\n  \t\t\t\t\t\t(+ front (total items))))]\n    (total-fn (seq items))))","user":"55bbfd60e4b01b9910ae29ed"},{"code":"#(reduce (fn[x y] (+ x y))%)","problem":24,"user":"525d5329e4b0cb4875a45d75"},{"problem":24,"code":"(fn [param]\n   (reduce #(+ %1 %2) param))","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn sum-it [coll]\n  (reduce + 0 coll))","problem":24,"user":"50edd3d4e4b06330c1f87c4a"},{"code":"(fn [lst]\n  (reduce + lst)\n  )","problem":24,"user":"51f7fbf7e4b06ff1c25c52e0"},{"problem":24,"code":"(fn [listy]\n  (loop [sum 0 tmp listy]\n    (if (= 0 (count tmp))\n      sum\n    (recur (+ sum (first tmp)) (rest tmp)))))\n;reduce +","user":"59369515e4b02506e01a297e"},{"problem":24,"code":"(fn [arg1]\n(loop [vect arg1 retSum 0]\n      (if (< (count vect) 1)\n        retSum\n        (recur (into [] (rest vect)) (+ retSum (first vect))))))","user":"5cb6256ce4b026601754b947"},{"code":"(fn sum-of-seq\n  [s]\n  (reduce (partial + 0) s))","problem":24,"user":"521b339fe4b0c4ef0be83031"},{"problem":24,"code":"apply +\n;reduce +","user":"55465b20e4b0a04f7929953b"},{"code":"(fn [x]\n  (reduce + x))","problem":24,"user":"4e56cff0535d8a8b8723a285"},{"problem":24,"code":"#(reduce (fn add [a b] (+ a b)) %)","user":"598c8db8e4b02b9968b84d06"},{"code":"(fn [data]\n  (reduce + data))","problem":24,"user":"5229f4a3e4b0590a43906cea"},{"problem":24,"code":"(fn reverse1 [x]\n  (reduce #(+ %1 %2) 0 x))","user":"585a7b05e4b0f14aab7c874d"},{"problem":24,"code":"(fn summy [listing]\n  (reduce + listing))","user":"54f36b36e4b050824f58f5c2"},{"problem":24,"code":"(fn [x](reduce + (into [] x)))","user":"5b754a5ae4b047b03b2036c8"},{"problem":24,"code":"reduce (fn [s e] (+ s e))","user":"5a23c4b0e4b0ff51aa4b32de"},{"code":"#(reduce\n   (partial + 0)\n  0 %)","problem":24,"user":"50c46cfde4b08bdb2b9270a1"},{"code":"(fn [lista]\r\n  (loop [l lista\r\n         s 0]\r\n    (if (empty? l) \r\n      s\r\n      (recur (rest l)\r\n             (+ s (first l))))))","problem":24,"user":"50576483e4b001218172198b"},{"problem":24,"code":"(fn  [li]  (apply +  li))","user":"5403f305e4b0df28a13c62e3"},{"problem":24,"code":"(fn [lis] (reduce + lis))","user":"54f3b50de4b050824f58f5c9"},{"code":"(fn sum [sq] (if (=(count sq) 1) (first sq) (sum (conj (drop 2 sq) (+ (first sq) (second sq))))))","problem":24,"user":"51377c10e4b04059df19f305"},{"problem":24,"code":"(fn [coll] (loop [c coll sum 0]\n             (if (empty? c) sum\n               (recur (rest c) (+ sum (first c)))\n               )))","user":"5bfbf75ee4b0bdcf453d15df"},{"problem":24,"code":"(fn sumup [sequence] (reduce + sequence))","user":"5ac37d0fe4b0e27600da7718"},{"problem":24,"code":"#(reduce + %)\n\n; apply +","user":"56b295f7e4b0982f16b37e08"},{"problem":24,"code":"(fn p\n  [lst]\n  (reduce + lst))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"reduce #'+","problem":24,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":24,"code":"(fn [lista]\n  (loop [x 0\n         y 0]\n    (if (empty? (drop x lista))\n      y\n      (recur\n        (+ x 1)\n        (+ y (first (drop x lista)))))))","user":"59e55cc8e4b08badc2a0c555"},{"problem":24,"code":"(fn adder [things]\n  (reduce + things))","user":"507ee076e4b06ce648bcdbfc"},{"problem":24,"code":"#(reduce (fn [a n] (+ a n)) %)","user":"5675a817e4b05957ce8c614a"},{"code":"(fn [coll]\n  (loop [sum 0 l coll]\n    (if (empty? l)\n      sum\n      (recur (+ sum (first l)) (rest l))\n    )\n  )\n)","problem":24,"user":"4f7683dae4b0fbe0118ec56f"},{"problem":24,"code":"(fn [s]\n  (reduce + 0 s)\n)","user":"56195e57e4b053970a773af6"},{"problem":24,"code":"(fn [ns] (reduce + ns))","user":"54d21e6de4b0e8a36923e5ee"},{"problem":24,"code":"(fn sum [numbers]\n  (if (empty? numbers)\n    0\n    (+ (first numbers) (sum (rest numbers)))))","user":"60bf4e5de4b0e0fa5f1b4293"},{"problem":24,"code":"(fn [origin-seq]\n  (reduce + (vec origin-seq)))","user":"58fed70de4b0438e51c2cfdd"},{"problem":24,"code":"(fn sl [x] (if (seq x) (+ (first x) (sl (next x))) 0))","user":"561fc0cee4b064ca9f4b16d1"},{"problem":24,"code":"#(reduce (fn [s v] (+ s v)) %)","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(fn [sq]\n  (apply + sq))","problem":24,"user":"5144e89be4b021a5ff8301f9"},{"problem":24,"code":"#(reduce (fn [prev item_] (+ prev item_)) 0 %)","user":"571ae32ae4b07c98581c3b5f"},{"problem":24,"code":"(fn sm [x] (reduce (fn red [y z] (+ y z)) 0 x))","user":"563b559ee4b0bfe05bf1180d"},{"problem":24,"code":"(fn sumit [xs]\n  ((fn running [xs acc]\n    (if (= 0 (count xs))\n      acc\n      (running (rest xs) (+ acc (first xs)))))\n  xs 0))","user":"54b9a5b3e4b0ed20f4ff6eaf"},{"problem":24,"code":"(fn \n  [seq]\n  (reduce (fn [count elem]\n            (+ count elem))\n          0\n          seq))","user":"5844e6f4e4b089d5ab817e5a"},{"problem":24,"code":"(fn [items]\n  (apply + items))","user":"574e069fe4b02ea11479923d"},{"code":"(fn [s]\n  (let [sum (fn [x s]\n              (if (empty? x)\n                s\n                (recur (rest x) (+ s (first x)))))]\n    (sum s 0)))","problem":24,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn [col]\n  (reduce + col))","problem":24,"user":"4f422e49e4b0d7d3c9f3fcf7"},{"code":"(fn [d]\n      (reduce + 0 d)\n      )","problem":24,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":24,"code":"(fn [array] (reduce + 0 array))","user":"5bd71aefe4b0ed4b8aab4bb5"},{"problem":24,"code":"(fn [sum]\n  (reduce + sum))","user":"5b6ba7d7e4b0c6492753e7ad"},{"code":"(fn [c] (apply + c))","problem":24,"user":"4e70af68535d5021c1a8963d"},{"code":"(fn sum [lat] (reduce + lat))","problem":24,"user":"522e8451e4b01cdb292c5f06"},{"code":"#(reduce (fn [s e] (+ s e)) %)","problem":24,"user":"4e42f930535dc968683fc49f"},{"code":"(fn vsum\n\n([x] (if(empty? x) 0 (vsum x 0)))\n    \n([x sum] (if(not(empty? x)) (recur (rest x) (+ sum (first x))) sum)))","problem":24,"user":"51646c2ae4b003cf19fdde38"},{"code":"(fn sum [ns]\n  (if (empty? ns)\n      0\n      (+ (first ns) (sum (rest ns)))))","problem":24,"user":"4fc5ee4fe4b0ee37620e1804"},{"problem":24,"code":"(fn sit [xs] \n  (reduce (fn [i d] (+ d i)) 0 xs)\n  )","user":"56686edce4b04acd4f672dea"},{"problem":24,"code":"(fn [data]\n  (loop [s data,\n         acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (+ acc (first s))))))","user":"5775659ae4b0979f8965161b"},{"problem":24,"code":"(fn [x] (loop [s x acc 0] \n            (if (nil? (first s))\n              acc \n              (recur (rest s) (+ acc (first s)))\n              )\n            )\n  )","user":"5471f2fbe4b094393f72dd70"},{"problem":24,"code":"; (fn [x] (reduce + x))\n#(reduce + %)","user":"5d83b9aae4b0915913b1d386"},{"code":"#(loop [s %1 r 0]\n    (if (empty? s)\n      r\n      (recur (rest s) (+ r (first s)))))","problem":24,"user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [listo] (apply + listo))","problem":24,"user":"4e9a3a03535dbda64a6f6b70"},{"code":"(fn rec [s]\n  (if (empty? s)\n    0\n    (+ (first s) (rec (rest s)))))","problem":24,"user":"52aa524fe4b0c58976d9ac64"},{"problem":24,"code":"(fn my_sum [l]\n\t(if (= [] l)\n\t\t0\n\t\t(+ (my_sum (rest l)) (first l))\n\t)\n)","user":"56058d64e4b08b23635d3169"},{"problem":24,"code":"(\n fn\n summer\n [x]\n ((\n   fn\n   helper\n   [a s]\n   (\n    cond\n    (empty? a)\n    s\n    :else\n    (helper (rest a) (+ s (first a)))))\n  x\n  0\n  )\n )","user":"4e6aacad535d8ccf87e9fefa"},{"problem":24,"code":"(fn sample[coll]\n  (reduce + coll)\n  )","user":"591f2e4ae4b09b4ee5954c44"},{"code":"(fn mysum [x] (if (= (count x) 0) 0 (+ (first x) (mysum (rest x)))))","problem":24,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [s]\n  (loop [sum 0, list (seq s)]\n    (if-not (empty? list)\n      (recur (+ sum (first list)) (rest list))\n      sum)))","problem":24,"user":"4dae0e3cc9a9d6ed4c99dc57"},{"problem":24,"code":"(fn [seq] (loop [s (into [] seq)\n                 sum 0]\n            (if (not (= s []))\n              (recur (rest s) (+ sum (first s)))\n              sum)))","user":"56018dd4e4b04bb52996e18f"},{"problem":24,"code":"#(loop [sum 0\n        left %]\n   (if (empty? left)\n     sum\n     (recur (+ sum (first left)) (rest left))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":24,"code":"(fn[n, s] (if(empty? s) n (recur (+ n (first s) ) (rest s) ) )) 0","user":"54b598d6e4b05787c3b163a8"},{"problem":24,"code":"(fn [a] \n\t(->>\n     \ta\n    \t(vec)\n     \t(apply +)\n    )\n)","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [x]\n  (loop [x x\n         sum 0]\n    (if (empty? x)\n      sum\n      (recur (rest x)\n             (+ sum (first x))))))","problem":24,"user":"519db0ede4b037b32803f9b9"},{"problem":24,"code":"(fn [v]\n  (reduce + v))","user":"524379a4e4b076204b44fac0"},{"code":"(fn [a]\n  (reduce + a))","problem":24,"user":"500d784ee4b0ff215386cad3"},{"problem":24,"code":"(fn sum [x] (if (empty? x) 0 (+ (sum (rest x)) (first x))))","user":"55801a0de4b05c286339e0e5"},{"code":"(fn [coll]\n  (reduce (fn [x y] (+ x y)) coll)\n  )","problem":24,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":24,"code":"(fn sm [s]\n  (case (first s)\n    nil 0\n    (+ (first s) (sm (rest s)))))","user":"53cafc64e4b00fb29b2212cf"},{"code":"(fn [seq] (reduce + 0 seq))","problem":24,"user":"4e10a8e4535d04ed9115e7c2"},{"code":"(fn [l] (apply + l))","problem":24,"user":"4e4c1e8c535dc968683fc4db"},{"code":"(fn [xs] (loop [sum 0 xs xs] (if (empty? xs) sum (recur (+ sum (first xs)) (rest xs)))))","problem":24,"user":"523e12bde4b09833704079a2"},{"problem":24,"code":"(fn sum-ip [elements] (reduce + elements))","user":"57e15244e4b0bfb2137f5a70"},{"problem":24,"code":"(fn [s] (reduce (fn [x y] (+ x y)) s))","user":"56f73c24e4b08e7d20b9682e"},{"code":"(fn [x]\n  (loop [sum 0 n x]\n   (if(empty? n) sum (recur (+ sum (first n)) (rest n)))\n  )\n)","problem":24,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn sum\n  ([L] (sum L 0))\n  ([L x] (if (empty? L) x\n    (sum (rest L) (+ (first L) x))\n))\n)","problem":24,"user":"50b8e67fe4b0cba0e598b655"},{"problem":24,"code":"(fn sum\n  [x]\n  (loop [x x\n         cont 0]\n    (if (empty? x)\n      cont\n      (recur (rest x) (+ cont (first x))))))","user":"5a9f005be4b0d174b936c810"},{"problem":24,"code":"(fn [numbers]\n\t(reduce + numbers))","user":"5bc64843e4b07a9b28b10091"},{"code":"(fn [xs]\n     (reduce + xs))","problem":24,"user":"4feaa579e4b0140c20fb9c0b"},{"code":"(fn [s] (loop [i 0 r 0]\n              (if (>= i (count s))\n                r\n              (recur (inc i) (+ r (nth (seq s) i))))))","problem":24,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":24,"code":"(partial reduce (fn [acc a] (+ acc a)))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":24,"code":"#(apply  + %)","user":"58ea5bdce4b056aecfd47d1b"},{"problem":24,"code":"(fn sum_up\n  [lst]\n  (loop [lst lst\n         result 0]\n    (if (= (first lst) nil) result\n      (recur (rest lst) (+ result (first lst))))))","user":"5bbbd077e4b0a20761a23615"},{"problem":24,"code":";;#(reduce + %)\n\n(fn [argument]\n  (loop [seq argument sum 0]\n    (if (= 0 (count seq))\n           sum\n        (recur (rest seq) (+ (first seq) sum)))))","user":"56ff0ef3e4b08d47c97781ba"},{"problem":24,"code":"(fn[args] (reduce + args))","user":"5721f13ce4b0c5bde472c0be"},{"code":"(fn my-sum [coll]\r\n  (reduce + coll))","problem":24,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":24,"code":"#( loop [ lst %1 sum 0 ]                                                                    \n         (                                  \n            if( = lst '() )  \n              sum                                                                           \n            ( recur ( rest lst ) ( + sum ( first lst ) ) )                                   \n          )                                                                                        \n       )","user":"575ec102e4b08062f99a4e71"},{"code":"#(let[step (fn [tail, sum]\r\n  (if (empty? tail) sum\r\n  (recur (rest tail) (+ (first tail) sum))))]\r\n  (step %1 0))","problem":24,"user":"4e99f2e1535dbda64a6f6b6c"},{"code":"(fn my-sum [s]\n    (loop [s s t 0]\n      (if (empty? s)\n        t\n        (recur (rest s) (+ t (first s))))))","problem":24,"user":"4e360072535deb9a81d77f30"},{"problem":24,"code":"(fn my-sum\n  [the-sequence]\n  (do (println \"my-sum has started\")\n      (println (str \"The sequence is \" the-sequence))\n      (loop [in the-sequence out 0]\n        (if (empty? in)\n            out\n            (recur (rest in) (+ out (first in)))))))","user":"568aa458e4b0dcc4269f4092"},{"code":"#(reduce  + %)","problem":24,"user":"5183abf6e4b028ec5fd2f2a6"},{"code":"(fn mysum ([args sum] (if (= '() args) sum (mysum (rest args) (+ sum (first args)))))\n          ([args] (mysum args 0)))","problem":24,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(fn adds [x]\n  (if (= 0 (count x))\n    0\n    (+ (first x) (adds (rest x)))))","problem":24,"user":"50fc3589e4b0d10d794c19f3"},{"code":"(fn sum [x]\n\t(reduce + x)\n)","problem":24,"user":"50e9ed1de4b02d54280826d5"},{"problem":24,"code":"#(loop [a % s 0] (if (empty? a) s (recur (rest a) (+ s (first a)))))","user":"5595071ae4b0c79f6e1db95d"},{"code":"(fn [v] (reduce (fn [sum n] (+ sum n)) 0 v))","problem":24,"user":"4e9646f2535dbda64a6f6b40"},{"problem":24,"code":"#(loop [x % res 0]\n   (if (not= [] x)  (recur (rest x) (+ res (first x)   )   ) res )   )","user":"594e3723e4b07ddc2dafaea8"},{"problem":24,"code":"(fn [l] (reduce (fn [a x] (+ a x)) l))","user":"56050f06e4b08b23635d3161"},{"problem":24,"code":"(fn add-up [x] (if (empty? x) 0 (+ (last x) (add-up (butlast x)))))","user":"545188ebe4b0e397800069b2"},{"problem":24,"code":"(fn [l] (reduce (fn [x y] (+ x y)) 0 l))","user":"5e1561b1e4b0a047bd49f700"},{"code":"(fn som [xs] (if (= nil (first xs)) 0 (+ (first xs) (som (rest xs)))))","problem":24,"user":"500f336be4b03ec779321687"},{"problem":24,"code":"(fn my-sum\n  [coll]\n  (loop [total 0 remaining coll]\n    (if (empty? remaining)\n      total\n      (recur (+ total (first remaining)) (rest remaining))\n      )\n    )\n  )","user":"59fa5fe0e4b0ca45a743a35f"},{"code":"#(reduce (fn [acc i] (+ acc i)) %)","problem":24,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"reduce (fn [a x] (+ a x))","problem":24,"user":"504f3f13e4b0a02f9cffde60"},{"code":"(fn sum\n  ([s] (sum s 0))\n  ([s n] (if (= nil (first s))\n           n\n           (sum (rest s) (+ (first s) n)))))","problem":24,"user":"51493fd0e4b05514c84b7cce"},{"code":"(fn sum [xs]\n  (if (empty? xs)\n    0\n    (let [x (first xs) ys (rest xs)]\n      (+ x (sum ys)))))","problem":24,"user":"51c20b14e4b0d204dbe2ca1b"},{"code":"(fn [se]\n  (loop [s se c 0]\n    (if (empty? s)\n      c\n      (recur (rest s)\n             (+ c (first s))))))","problem":24,"user":"4e773be8535d324fb2983d6e"},{"problem":24,"code":"(fn [a]\n    (reduce + (seq a)))","user":"58455b05e4b089d5ab817e65"},{"code":"(fn ___\n  ([x] (___ x 0))\n  ([x acc]\n    (if (empty? x) acc\n     (recur (rest x) (+ acc (first x)))\n    )\n  )\n)","problem":24,"user":"4f650efee4b07046d9f4ef39"},{"code":"(fn [xs] ((fn calc[acc os] (if (empty? os) acc (calc (+ acc (first os)) (rest os)))) 0 xs))","problem":24,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [set] (reduce + set))","problem":24,"user":"535d21ade4b04ce2eb3ed2bb"},{"problem":24,"code":"#(loop [coll %\n        memo 0]\n   (if (empty? coll)\n     \tmemo\n     \t(recur (rest coll) (+ memo (first coll)))))","user":"55f344afe4b06e875b46ce5a"},{"code":"(fn sum-up[sequance]\n  (reduce + sequance))","problem":24,"user":"5306bceee4b02e821686979b"},{"problem":24,"code":"(fn [lis]\n      (reduce (fn [x y] (+ x y)) lis)\n      )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":24,"code":"reduce (fn [i n] (+ i n))","user":"5c852e3ae4b0c8042a70ce78"},{"code":"(fn sum [s] \n  (if (empty? s)\n    0\n    (+ (first s) (sum (rest s)))\n  )\n)","problem":24,"user":"4f6b1457e4b07046d9f4efa6"},{"code":"(fn s [l] (apply + l))","problem":24,"user":"4f1f8fae535d64f6031464a3"},{"problem":24,"code":"#(reduce (fn [acc se] (+ acc se)) 0 %)","user":"5b056587e4b0cc2b61a3bd83"},{"problem":24,"code":"(fn sum [col] (if (empty? col) 0 (+ (first col) (sum (rest col)))))","user":"55279298e4b0ffed3738f92f"},{"problem":24,"code":"(fn [x] \n  (reduce\n   (fn [n x] (+ n x))\n   0 x))","user":"5ecf55dae4b016b56eae05a8"},{"code":"(fn [xs]\n  (loop [acc 0\n         ys xs]\n    (if (empty? ys)\n      acc\n      (recur (+ acc (first ys)) (rest ys)))))","problem":24,"user":"4db653f6535d1e037afb217c"},{"problem":24,"code":"(fn [lst]\n  (loop [acc 0 rst lst]\n    (if (empty? rst) acc (recur (+ acc (first rst)) (rest rst)))))","user":"579fc29fe4b0264b925669ff"},{"problem":24,"code":"(fn [col] ((fn  [col n] (if (first col) (recur  (rest col) (+ n (first col))) n)) col 0))","user":"562807dfe4b00e49c7cb47dd"},{"problem":24,"code":"reduce + 0\n;reduce (fn [acc x] (concat [x] acc)) []","user":"5606a4ace4b08b23635d3175"},{"problem":24,"code":"(fn x [l]\n  ((fn a [l total]\n     (if (empty? l)\n       total\n       (a (rest l) (+ total (first l)))\n       )\n     ) l 0)\n )","user":"55034bf0e4b086ebe8a79c6d"},{"code":"(fn sum [seq]\n  (if (empty? seq)\n    0\n    (+ (first seq) (sum (rest seq)))))","problem":24,"user":"4f0a2ed1535d0136e6c222f3"},{"code":"reduce (fn [fir sec] (+ fir sec)) 0","problem":24,"user":"50bd13dee4b0594b91591c65"},{"problem":24,"code":"(fn sum\n   ([vals] (sum vals 0))\n   ([vals accumulating-total]\n    (if (empty? vals)\n      accumulating-total\n      (sum (rest vals) (+ (first vals) accumulating-total)))))","user":"58a32c21e4b02bd94d917eeb"},{"problem":24,"code":"(fn sum-it-all-up\n  ([x] (sum-it-all-up x 0))\n  ([x y]\n   \t(if (empty? x)\n      \ty\n      \t(sum-it-all-up (rest x) (+ y (first x)))\n    )\n  ) \n)","user":"5759e317e4b02ea114799330"},{"code":"(fn [aseq]\n  (loop [res 0 s aseq]\n    (if s\n      (recur (+ res (first s)) (next s))\n      res)))","problem":24,"user":"51b3b22ce4b0f094dd986fa7"},{"problem":24,"code":"(fn [stuff] (reduce + stuff))","user":"5f341a4be4b0574c87022c3d"},{"problem":24,"code":"(fn soma [x]\n  (reduce + x)\n  )","user":"5dcc5e5ce4b02b31cc3da3c7"},{"code":"(fn [elems] (reduce + elems))","problem":24,"user":"4e03b010535d04ed9115e794"},{"problem":24,"code":"(fn add-nums \n   ([coll] (add-nums coll 0))\n   ([coll accum]\n   (println coll accum)\n   (if (empty? coll)\n    accum\n    (add-nums (rest coll) (+ (first coll) accum)))))","user":"60a6bbe5e4b00e9e6653c464"},{"code":"(fn [nums] (reduce + nums))","problem":24,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":24,"code":";#(reduce (fn [acc e] (+ acc e)) 0 %1)\n(fn [sq] \n  (loop [acc 0 s sq]\n    (if (empty? s) \n      acc \n      (recur (+ acc (first s)) (rest s)))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":24,"code":"(fn\n  [inlist]\n  (loop [sum 0 temp-list inlist]\n    (if (empty? temp-list)\n      \tsum\n      \t(recur\n         (+ sum (first temp-list))\n         (rest temp-list)\n         )\n      )\n    )\n  )","user":"5c9419fae4b048ec896c5a2b"},{"problem":24,"code":"(fn[lst] (\n          reduce + lst\n          )\n)","user":"56b94357e4b0f2655033592e"},{"problem":24,"code":"(fn sum [x] (if (= () x) 0 (+ (sum (rest x)) (first x))))","user":"56f258d3e4b04a395b9a04a1"},{"code":"#((fn f [n lst]\n  (if (= lst '())\n    n\n    (f (+ n (first lst)) (rest lst))))\n   0 %)","problem":24,"user":"50ac3e4be4b071b89ef2622d"},{"code":"(fn [_seq] (reduce + _seq))","problem":24,"user":"52c60844e4b0c2d177d62106"},{"problem":24,"code":"(fn [sequence]\n  (reduce + sequence)\n)","user":"5d58983fe4b02ba5928a6823"},{"problem":24,"code":"(fn sum [ls]\n  (if (= [] (rest ls))\n    (first ls)\n    (+ (first ls) (sum (rest ls)))))","user":"561bcf94e4b064ca9f4b168a"},{"code":"(fn sum [l] (apply + l))","problem":24,"user":"526e3f74e4b03e8d9a4a7312"},{"code":"(fn [l]\r\n    (loop [mylist l s 0]\r\n      (if (= mylist '())\r\n        s\r\n        (recur (rest mylist) (+ s (first mylist))))))","problem":24,"user":"4f039524535dcb61093f6b2c"},{"problem":24,"code":"(fn [s] (loop [se s sum 0] (if (empty? se) sum (recur (rest se) (+ sum (first se))))))","user":"56b49f72e4b0982f16b37e23"},{"code":"(fn [coll] (reduce + 0 coll))","problem":24,"user":"4ea09fa4535d7eef308072aa"},{"code":"(fn [a] (reduce + a))","problem":24,"user":"50335235e4b0c6c1199c710b"},{"code":"(fn [x]\r\n  (reduce + (for [item x] item)))","problem":24,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":24,"code":"(fn [s] (loop [s s sum 0] (if (empty? s) sum (recur (rest s) (+ (first s) sum)))))","user":"5aad2bd2e4b073f177442573"},{"problem":24,"code":"#((fn sum [q n] (if (= q '()) n (sum (rest q) (+ n (first q))))) % 0)","user":"5f79cb16e4b02876ed9fd0cb"},{"problem":24,"code":"(fn blah\n  [els]\n  (reduce + els))","user":"58754bd0e4b01531a375ea61"},{"code":"(fn soma [x]\r\n (apply + x)  \r\n)","problem":24,"user":"4edf92f0535d10e5ff6f5341"},{"problem":24,"code":"(fn [vals] (apply + vals))","user":"5b58b271e4b02d533a91bd6e"},{"problem":24,"code":"#(loop [items % s 0]\n(if (empty? items)\n  s\n  (recur (rest items) (+ s (first items)))))","user":"559ff3b1e4b0acc240e314ed"},{"code":"(fn foo\n  ([x]\n    (if (= x [])\n      0\n      (+ (first x) (foo (rest x))))))","problem":24,"user":"4f611e0ee4b0defedf855fb8"},{"problem":24,"code":"(fn [coll]\n  (loop [in coll out 0]\n    (if (= (count in) 0)\n      out\n      (recur (rest in) (+ out (first in))))))","user":"584f1397e4b0b7285a6f4e5e"},{"problem":24,"code":"(fn suma\n  [lst]\n  (reduce + lst))","user":"5bbbcf9ee4b0a20761a23614"},{"problem":24,"code":"(fn my-sum\n  \t[coll]\n  \t(apply +\n           (seq coll)\n    )\n)","user":"53cfd3c5e4b00fb29b221302"},{"problem":24,"code":"#(reduce + (to-array %))","user":"56a7c7c8e4b07966d5a8a061"},{"problem":24,"code":"(fn mysum [s]\n  (loop [oldseq s\n         sum 0]\n    (if (empty? oldseq)\n      sum\n      (recur (rest oldseq) (+ (first oldseq) sum)))))","user":"5e94e759e4b0fbed045a37fd"},{"problem":24,"code":"(fn mysum [x]\n  (if (empty? x)\n    0\n    (+ (first x) (mysum (rest x)))))","user":"56548fd3e4b0f9d632dd8485"},{"problem":24,"code":"(fn[n] (reduce + 0 n))","user":"541df0b5e4b01498b1a71a86"},{"problem":24,"code":"(fn [coll] \n  \t(reduce\n     \t+\n     \tcoll))","user":"592749e4e4b072a2710fcec8"},{"code":"(fn sumitallup [coll] (reduce + 0 coll))","problem":24,"user":"525cd5bee4b0cb4875a45d4b"},{"code":"(fn my-sum [data]\n  (apply + data))","problem":24,"user":"4f840766e4b033992c121c27"},{"problem":24,"code":"(fn suma [xs] (if (empty? xs) 0 (+ (first xs) (suma (rest xs)))))","user":"5bca2c71e4b07a9b28b100e7"},{"problem":24,"code":"(fn sum [numbers] (reduce + numbers))","user":"56c0756de4b060a8e693e3a9"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll, result 0]\n    (let [head (first coll)]\n      (if (nil? head)\n        result\n        (recur (rest coll) (+ result head))))))","user":"59225498e4b09b4ee5954c8c"},{"problem":24,"code":"reduce (fn [accum x] (+ accum x)) 0","user":"551b87dfe4b07993ea3788d2"},{"code":"(fn sum\n  [s]\n  (reduce + (map + s)))","problem":24,"user":"528e25b9e4b0239c8a67aed5"},{"code":"(fn [s] (apply + s))","problem":24,"user":"4e6a6af5535d8ccf87e9fedf"},{"problem":24,"code":"(fn s[c] (reduce + c))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn sum [se] (reduce + se))","problem":24,"user":"53901605e4b0b51d73faae95"},{"problem":24,"code":"(fn my-sum\n  [coll]\n  (reduce + coll))","user":"53e57ba2e4b036ad0777e45c"},{"problem":24,"code":"(fn [col]\n  (reduce + col)\n  )","user":"567b62fce4b05957ce8c61a6"},{"problem":24,"code":"(fn suma [x]\n  (if (= (count x) 1)\n    (first x)\n    (+ (suma (rest x)) (first x))\n  )\n)","user":"56d09e8ee4b0ea9b8538f782"},{"problem":24,"code":"(fn [s]\n     (reduce + s))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":24,"code":"(fn [lst]\n  (loop [i lst\n         s 0]\n    (cond (empty? i) \n           s\n          :t (recur (rest i) (+ s (first i))))))","user":"590273e1e4b0438e51c2d059"},{"problem":24,"code":"(fn [arg]\n  (reduce + arg))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"code":"(fn [l] (reduce (fn [agg, i] (+ agg i)) 0 l))","problem":24,"user":"511a31d0e4b09045b2b16941"},{"problem":24,"code":"(fn foo [x] (if (< 1 (count x)) (+ (first x) (foo (rest x))) (first x)))","user":"5703386fe4b08d47c97781ed"},{"problem":24,"code":"(fn [arr] (reduce (fn [a b] (+ a b)) arr))","user":"59636b49e4b066ee0a44b0c5"},{"code":"(fn mult [s] (reduce + s))","problem":24,"user":"504e24e2e4b0f6ff3350c46d"},{"problem":24,"code":"(fn [sequence] (reduce + sequence))","user":"5bc9fb3be4b07a9b28b100e3"},{"problem":24,"code":"(fn my-sum [coll]\n  (loop [c coll\n         res 0\n         ]\n    (cond\n      (empty? c) res\n      :else (recur (rest c) (+ (first c) res))\n      )\n    )\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn summa [xs] \n  (if (empty? xs) \n    0 \n    (+ (first xs) (summa (rest xs)))))","problem":24,"user":"4fba0877e4b081705acca2dd"},{"code":"(fn _ [x]\n  (loop [y x acc 0]\n    (if (first y)\n       (recur (rest y) (+ acc (first y)))\n       acc)))","problem":24,"user":"4ec8736f535d6d7199dd36f3"},{"code":"(fn sumofall [x]\n  (reduce + x))","problem":24,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn mysum[xs]\n  (cond\n   (empty? xs) 0\n   :else (+ (first xs) (mysum (rest xs)))))","problem":24,"user":"52713288e4b03e8d9a4a73e7"},{"problem":24,"code":"(fn sum-seq [s] (reduce (fn [x y] (+ x y)) s))","user":"58d1fe17e4b03c36ff7e58f5"},{"code":"(fn add [l] \n  (reduce + l))","problem":24,"user":"4f03cc36535dcb61093f6b69"},{"code":"reduce +\n#_ skldfklsdjfklsdfkljsdklfjlsdkfjklsdjffffffffffffffffffffffffklsdfkljsdklfjskldfjklsdfklsdfklajsdfkrtriwieruioweruioeurioweioru","problem":24,"user":"4f067029535dcb61093f6c12"},{"problem":24,"code":"(fn greet [x]\n  (reduce (fn [val item] (+ val item)) 0 x))","user":"5860d82de4b0f14aab7c87de"},{"problem":24,"code":"(fn sum-all [sequ]\n  (loop [sequ sequ cumsum 0]\n    (if (empty? sequ)\n      cumsum\n      (recur (rest sequ) (+ cumsum (first sequ))))))","user":"5c8b6c64e4b048ec896c596f"},{"code":"(fn [list] ( reduce + list ) )","problem":24,"user":"4fe899a6e4b07c9f6fd12c54"},{"code":"#(reduce + %)\n; #(apply + %)","problem":24,"user":"5327f32be4b09d4e7a9b5502"},{"code":"(fn [x] (reduce #(+ % %2) x))","problem":24,"user":"4e75500f535d7a570dd295c1"},{"problem":24,"code":"(fn [s]\n    (reduce + 0 s)\n    )","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [input]\n  (reduce + 0 input))","problem":24,"user":"5232d104e4b035af41902a96"},{"problem":24,"code":"(fn my-add\n  [s]\n  (reduce + s))","user":"5ed09be3e4b016b56eae05b2"},{"problem":24,"code":"reduce (fn [sum num] (+ sum num)) 0","user":"54be096de4b0ed20f4ff6ee6"},{"problem":24,"code":"(fn myfn [l] (reduce + l))","user":"5c1a0813e4b01240ff567203"},{"code":"(fn [s]\n   ((fn mysum [acc todo]\n      (if (= todo '())\n        acc\n        (mysum (+ acc (first todo)) (rest todo)))) 0 s))","problem":24,"user":"4ff355a1e4b0678c553fc34d"},{"problem":24,"code":"(fn [args]\n  (cond \n        (= (count args) 0) 0\n        (= (count args) 1) (first args)\n        (= (count args) 2) (+ (first args) (second args))\n        :else (let [i (first args)\n                    j (second args)\n                    more (drop 2 args)]\n                (recur (flatten [(+ i j) more])))))","user":"5dc457dee4b02f9375f4e1b2"},{"problem":24,"code":"(fn sm [s]\n  (if (= s ())\n    0\n    (+ (first s) (sm (rest s)))))","user":"59733c91e4b01722bebd4c9b"},{"problem":24,"code":"(fn my-sum [xs] \n  (if (empty? xs)\n    0\n    (+ (first xs) (my-sum (rest xs)))\n  )\n)","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [col] (reduce + col))","problem":24,"user":"4ef78c97535dced4c769f256"},{"problem":24,"code":"#((partial reduce +) %1)","user":"53e4e21ce4b036ad0777e450"},{"code":"(fn sum [lst] (if (empty? lst) 0 (+ (first lst) (sum (rest lst)))))","problem":24,"user":"4e49fc29535dc968683fc4cb"},{"code":"(fn f [list]\n  (cond\n    (> (count list) 1) (+ (first list) (f (rest list)))\n    :else (first list)\n    )\n)","problem":24,"user":"5051ed55e4b0a561d07d8f0e"},{"problem":24,"code":"(fn [c] (loop [coll c sum 0] (if-not (first coll) sum (recur (rest coll) (+ sum (first coll))))))","user":"553a1475e4b09218d5f44fef"},{"code":"(fn [x]\n  (reduce + x)\n)","problem":24,"user":"506ec408e4b09350ab4199f1"},{"problem":24,"code":"(fn[alist]\n \t(reduce + alist) \n )","user":"5c549f38e4b0fb8c5ffd9a0e"},{"problem":24,"code":"(fn [a]\n  (reduce + a)\n  )","user":"5d94a878e4b0d3f9b434ad29"},{"code":"(fn [coll]\n   (loop [new-coll coll sum 0]\n     (if (empty? new-coll)\n       sum\n       (recur (rest new-coll) (+ sum (first new-coll))))))","problem":24,"user":"5289bba9e4b0239c8a67ae69"},{"problem":24,"code":"#(loop [items % result 0] (if (empty? items) result (recur (rest items) (+ result (first items)))))","user":"569ef93de4b0542e1f8d148b"},{"code":"(fn f24 [se] (reduce + se))","problem":24,"user":"52bf0116e4b07a9af5792328"},{"problem":24,"code":"(fn my-sum ([s] (if (= '() (first s)) 0 (my-sum (rest s) (first s)))) ([s n] (if (= '() (rest s)) (+ n (first s)) (my-sum (rest s) (+ n (first s))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":24,"code":"#(loop [result 0 remain %]\n   (if (seq remain)\n     (recur (+ result (first remain)) (rest remain))\n     result))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":24,"code":"(fn f [l]\n  (if (empty? l) 0\n    (+ (first l) (f (rest l)))))","user":"539a4213e4b0b51d73faaf11"},{"code":"(fn [s] (reduce (fn [l r] (+ l r)) s))","problem":24,"user":"50facb80e4b07934dda8b0d2"},{"problem":24,"code":"(fn sum [l]\n  (reduce + l)\n )","user":"558bf7cfe4b0277789237635"},{"code":"(fn foo [x] (if (not= (next x) nil) (+ (first x)(foo (rest x))) (+ (first x) 0)))","problem":24,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":24,"code":"(fn sumchop [x] (if (= (count x) 0) 0 (+ (sumchop (rest x))(first x))))","user":"54651faee4b01be26fd746d6"},{"problem":24,"code":"(fn foo [s] (if (= '() s) 0 (+ (first s) (foo (rest s)))))","user":"55a87f0ee4b0988bba2ad938"},{"code":"(fn [s]\n  (loop [s s sum 0]\n    (if (empty? s)\n      sum\n      (recur (next s) (+ sum (first s))))))","problem":24,"user":"50d4909ce4b09cc622d65a6c"},{"code":"(fn mysum [s]\r\n ( if(empty? s)\r\n  0\r\n  (+ (first s) (mysum (rest s)))\r\n)\r\n)","problem":24,"user":"4e1582f0535d04ed9115e7e4"},{"code":"(fn[l] (let [sum (fn[l c] \n                     (if(empty? l) \n                         c \n                         (recur (rest l) (+ c (first l)))))]\n      (sum l 0)))","problem":24,"user":"4e889643535d8b9bb0147ca5"},{"code":"apply +\n; reduce +\n;#(reduce + %)","problem":24,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn [lista] (\n             letfn [(suma [lista resultado] (if (empty? (rest lista)) (+ resultado (first lista)) (suma (rest  lista) (+ (first lista) resultado)))  )]\n             (suma lista 0)\n             \n             ))","problem":24,"user":"505cdcb7e4b0e6aca564be03"},{"code":"(fn testa [l] (reduce + l))","problem":24,"user":"4f74a617e4b044e54cd9a905"},{"code":"(fn [seq]\n  (loop [rem seq, sum 0]\n    (if (empty? rem)\n      sum\n      (recur (rest rem) (+ sum (first rem))))))","problem":24,"user":"4f7a9416e4b06e829148e19b"},{"problem":24,"code":"(fn [l]\n  (loop [result 0 lst l]\n    (if (empty? lst)\n      result\n      (recur (+ result (first lst)) (rest lst)))))","user":"60e2aca7e4b002d5a55d5f3b"},{"problem":24,"code":"(fn sm\n  ([x] (sm x 0) )\n  ([x s] (if (empty? x) s (recur (rest x) (+ s (first x) )) ) )\n)","user":"59f85d78e4b0ca45a743a31a"},{"code":"(fn [nums]\n  (apply + nums))","problem":24,"user":"4eb25069535d7eef30807348"},{"problem":24,"code":"(fn [ x ]\n\n( reduce + x)\n  \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":24,"code":"(fn\n  [lst] \n  (reduce + lst)\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":24,"code":"#(loop [in % s 0] (if (empty? in) s (recur (rest in) (+ s (first in)))))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn sumseq [seq] (if (empty? seq) 0 (+ (first seq) (sumseq (rest seq)))))","problem":24,"user":"511d5d8ee4b022853b0e07a3"},{"problem":24,"code":"(fn number-twentyfour [x]\n  (loop [seq-elements (into [] x) result 0]\n    (if (empty? seq-elements)\n      result\n      (let [[first-elem & rest-elems] seq-elements]\n        (recur \n         rest-elems\n         (+ result first-elem)\n         )))))","user":"57607706e4b08062f99a4e97"},{"code":"(fn[xs] (reduce #(+ %1, %2) xs))","problem":24,"user":"5339cb07e4b0e30313ee6caf"},{"problem":24,"code":"(fn [co] (reduce + co))","user":"5570d5a4e4b09a3098a52533"},{"problem":24,"code":"(fn [lit] (loop [a lit b 0] (if (empty? a) b (recur (rest a) (+ (first a) b)))))","user":"591770dae4b09b4ee5954b9c"},{"code":"(fn [x] (reduce #(+ %1 %2) 0 x))","problem":24,"user":"5220ef05e4b0e6a83c8925b8"},{"code":"(fn cnt [l] (if (empty? l) 0 (+ (first l) (cnt (next l)))))","problem":24,"user":"4e71705e535d5021c1a89649"},{"problem":24,"code":"#(reduce + (map + %))","user":"53d3ad01e4b00fb29b22132d"},{"problem":24,"code":"(fn sum [x] \n  (if (empty? x) \n    0\n    (+ (first x) (sum (rest x)))))","user":"57501c83e4b02ea11479926b"},{"problem":24,"code":"(fn [s]\n  (loop [s s\n         c 0]\n    (if (not (seq s))\n      c\n      (recur (rest s) (+ c (first s))))))","user":"54d321b3e4b0e8a36923e602"},{"code":"(fn [sequence]\n  (loop [s sequence\n         a 0]\n    (if (not (seq s))\n      a\n      (recur (rest s) (+ a (first s))))))","problem":24,"user":"4dc0f7ff535d020aff1edf82"},{"problem":24,"code":"(fn [coll] (reduce (fn [x y] (+ x y)) coll))","user":"56b2300ce4b0982f16b37dff"},{"problem":24,"code":"#(reduce (fn [sum e] (+ sum e)) 0 %)","user":"56795625e4b05957ce8c6186"},{"code":"(fn [what] (reduce + 0 what))","problem":24,"user":"51b0436ae4b0c53cf2e68a60"},{"code":"(fn s [l]\n  (if (empty? l)\n   0\n   (+ (first l) (s (rest l)))))","problem":24,"user":"502d3912e4b0d96a44ab2030"},{"problem":24,"code":"(fn [ls]\n  (loop [xs ls\n           c 0]\n    (if (empty? xs)\n    c\n    (recur (rest xs) (+ c (first xs)))\n    ))\n  )","user":"60228147e4b0d5df2af22202"},{"problem":24,"code":"reduce (fn [thing others] (+ thing others)) 0","user":"53b15e65e4b047364c04448e"},{"code":"(fn mysum [lst] (\r\n  apply + lst\r\n))","problem":24,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":24,"code":"(fn my-sum [coll]\n  (let [ini-sum 0]\n    (loop [loop-coll coll\n           sum ini-sum]\n      (if (empty? loop-coll)\n        sum\n        (recur (rest loop-coll) (+ sum (first loop-coll)))))))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":24,"code":"(fn [my-list] (reduce + my-list))","user":"559ed93ce4b0acc240e314e3"},{"problem":24,"code":"(fn [& xs] (apply reduce + xs))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn sum [arr] (if-not (empty? arr) (+ (first arr) (sum (rest arr))) 0))","problem":24,"user":"5162757ee4b03cfa3774b3fe"},{"problem":24,"code":"(fn [ar] (reduce + ar))","user":"53e4bc2ee4b036ad0777e44d"},{"code":"(fn sum-it-up [s]\n  (reduce + s))","problem":24,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":24,"code":"(fn [nums]\n  (reduce #(+ %1 %2) 0 nums))","user":"4fd9cc7ee4b05e33b9224f3a"},{"problem":24,"code":"(fn [seq] (reduce + 0 seq ))","user":"5746061ae4b009280f9f2b5b"},{"code":"#(reduce + (for [i %] i))","problem":24,"user":"4dc8205f535d8a4b2fd74296"},{"problem":24,"code":"(fn mySum [seq]\n  (cond (empty? seq) 0\n        true (+ (first seq) (mySum (rest seq)))))","user":"4fab21b2e4b081705acca211"},{"problem":24,"code":"reduce (fn [acc v] (+ acc v))","user":"5ec82b11e4b08d0ec38692e6"},{"problem":24,"code":"(fn [y] (loop [x y sum 0] (if-not (empty? x) (recur (rest x) (+ sum (first x))) sum)))","user":"5d4256bae4b05dd059a5437d"},{"problem":24,"code":"(fn [s]\n  (loop [s s sum 0]\n    (if-not (seq s) sum (recur (rest s) (+ sum (first s))))))","user":"57aa053fe4b0b8559636fc61"},{"problem":24,"code":"#(loop [x % s 0] (if (= 0 (count x)) s (recur (rest x) (+ (first x) s))))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":24,"code":"(fn mysum\n  [arr]\n  (reduce + arr))","user":"5942a5a2e4b060784b3b7912"},{"problem":24,"code":"(fn func [lst] (if (empty? lst) 0 (+ (first lst) (func (rest lst)))))","user":"55216b7ee4b0882d96d09193"},{"problem":24,"code":"(fn [lst]\n  (reduce + (seq lst)))","user":"57f8104ce4b0d3187e900910"},{"problem":24,"code":"(fn somme [s]\n  (cond \n   (empty? s) 0\n   :else (+ (first s) (somme (rest s)))))","user":"563b236ce4b0bfe05bf1180b"},{"code":"reduce (fn [acc x] (+ acc x)) 0","problem":24,"user":"5311079de4b08068f379ece2"},{"code":"(fn sumit\n  [l]\n  (cond\n   (empty? l) 0\n   :else (+ (first l) (sumit (rest l)))))","problem":24,"user":"518c0f4ee4b0f028e99addf7"},{"problem":24,"code":"(fn [xs]\n    (letfn [(sum-iter [xs acc]\n                      (if (seq xs)\n                        (recur (rest xs) (+ (first xs) acc))\n                        acc))]\n    (sum-iter xs 0)))","user":"53a6e646e4b0ef122a8689cd"},{"code":"(fn [coll]\n  (apply + (seq coll) ))","problem":24,"user":"5379ed48e4b06839e8705e5a"},{"problem":24,"code":"(fn [xs] (loop [it (first xs) others (rest xs) sum 0] (if (nil? it) sum (recur (first others) (rest others) (+ sum it)))))","user":"57b65420e4b0fbc9809a27be"},{"problem":24,"code":"(fn sum [s] (if (= (count s) 0) 0 (+ (first s) (sum (rest s)))))","user":"55727fb5e4b09a3098a52545"},{"code":"(fn xsum [xs] (reduce + 0 xs))","problem":24,"user":"52244a77e4b01819a2de42d1"},{"problem":24,"code":"(fn sum-of-numbers [collection] (reduce + collection))","user":"60522feae4b0af2ba86d5a0a"},{"problem":24,"code":"(fn [xs]\n(loop [my-numbers xs\n       my-total 0]\n     (if-not (empty? my-numbers)\n             (recur (rest my-numbers), (+ my-total (first my-numbers)))\n                    my-total)))","user":"5953053ce4b066ee0a44aeda"},{"code":"(fn sum [x]\n  (if (empty? x)\n    0\n    (+ (first x) (sum (rest x)))\n    ))","problem":24,"user":"52824143e4b0757a1b171453"},{"problem":24,"code":"(fn [s]\n  \t(apply + s)\n  )","user":"59858cdbe4b021a7a535fe66"},{"problem":24,"code":"(fn [col]\n  (loop [col col\n         acc 0]\n    (if (empty? col)\n      acc\n      (recur (rest col) (+ acc (first col))))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"(fn sum [x] (if (= (count x) 1) (first x) (+ (first x) (sum (rest x)))))","problem":24,"user":"4e4ca885535dc968683fc4df"},{"code":"(fn [coll] \n\t(loop [coll coll \n           sum 0]\n\t\t(if (seq coll)\n\t\t   (recur (rest coll) (+ sum (first coll)))\n\t\t    sum )))","problem":24,"user":"5203bc5be4b0fb7e47ea5205"},{"code":"(fn my-sum\n       ([col] (my-sum col 0))\n       ([col accum]\n         (if (nil? col)\n           accum\n           (my-sum (next col) (+ accum (first col)))  \n         )\n       )\n     )","problem":24,"user":"4e73debb535d7a570dd295b7"},{"problem":24,"code":"(fn [beers]\n        (loop [rembeers beers sum 0]\n          (if (empty? (rest rembeers))\n            (+ sum (first rembeers))\n            (recur (rest rembeers) (+ sum (first rembeers)))\n            )\n          )\n      )","user":"5425d65ce4b01498b1a71b14"},{"problem":24,"code":"(fn [l] (reduce (fn [p x] (+ p x)) l))","user":"54eb53cfe4b024c67c0cf84a"},{"problem":24,"code":"#(loop [in %\n        out 0]\n   (if (empty? in)\n     out\n     (recur (rest in)\n            (+ out (first in)))))","user":"5e66ccbae4b0e171e1033684"},{"problem":24,"code":"(fn add-up [nums] (\n    if (= nums '()) 0\n      (+ (first nums) (add-up (rest nums)))\n      )        \n            \n            )","user":"5471f090e4b094393f72dd6e"},{"problem":24,"code":"(fn redp [x] (if (empty? (rest x))\n               (first x)\n               (+ (redp (rest x)) (first x))))","user":"5534795ee4b09218d5f44f9e"},{"code":"(fn sumItAllUp [coll]\n  (loop [sum 0, rem coll]\n    (if (empty? rem)\n      sum\n    (recur (+ sum (first rem)) (rest rem)))))","problem":24,"user":"4ecbff2f535df97575fdabe4"},{"code":"(fn sumit [s] (reduce + (into [] s)))","problem":24,"user":"50f84d85e4b0aafb827eb1f7"},{"code":"(fn sum [terms]  \n  (reduce + terms))","problem":24,"user":"51d1ef6ee4b0d13b04db0d92"},{"problem":24,"code":"(fn [coll]\n  ((fn [coll acc]\n     (if (empty? coll)\n       acc\n       (recur (rest coll) (+ acc (first coll)))))\n   coll 0))","user":"55c66d3de4b0e31453f649c1"},{"problem":24,"code":"#(reduce (fn [x, y] (+ x y)) %)","user":"559057c4e4b027778923766e"},{"problem":24,"code":"(fn sumAll [collection]\n  (reduce + collection))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":24,"code":"(fn sm [x] \n  (if (empty? x)\n    0\n    (+ (sm (rest x)) (first x))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn my-sum\n  [input]\n  (apply + input))","problem":24,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [x] (\n  (fn myAdd [y z]\n     (if (= (count y) 0)\n        z\n        (myAdd\n          (rest y)\n          (+ z (first y))\n        )\n     )\n  ) x 0\n))","problem":24,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn summit [coll] (reduce + coll))","problem":24,"user":"50afdfc0e4b0c3f5ed5c29a6"},{"problem":24,"code":"(fn sum [x] (reduce + 0 x))","user":"5f7251b9e4b02876ed9fd08a"},{"code":"(fn [xs]\n  ((fn [xs sum]\n    (if (empty? xs)\n      sum\n      (recur (rest xs) (+ sum (first xs))))\n    ) xs 0))","problem":24,"user":"4e6a559e535d8ccf87e9fecd"},{"problem":24,"code":"(fn summer [s] (reduce + s))","user":"5779556de4b0979f8965166e"},{"code":"(fn [arg]\n  (loop [arg arg\n         res 0]\n    (if (empty? arg)\n      res\n      (recur (rest arg) (+ res (first arg))))))","problem":24,"user":"537881a4e4b06839e8705e46"},{"problem":24,"code":"(fn [x]\n  (loop [sum 0 arr x]\n    (if (empty? arr) sum\n      (recur (+ sum (first arr)) (rest arr)))))","user":"54381729e4b032a45b869310"},{"problem":24,"code":"(fn summator\n  ([elements]\n   (summator elements 0))\n  ([elements register]\n   (if (empty? elements)\n     register\n     (summator (rest elements) (+ register (first elements))))))","user":"5e9f3c2ce4b00a66d4a9517f"},{"code":"(fn [x] (apply + x))","problem":24,"user":"4e7ca6a9535db169f9c796bf"},{"problem":24,"code":"(fn sums [s] (if (= (count s) 1) (first s) (+ (first s) (sums (rest s)))))","user":"5762bf13e4b0994c1922fbae"},{"problem":24,"code":"#(loop [ cl % sum 0]\n   (cond\n     (first cl) (recur (rest cl) (+ sum (first cl)))\n     :else sum))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn summa [x] \n  (if (empty? x) \n    0\n    (+ (first x) (summa (rest x)))\n  )\n)","problem":24,"user":"4f091dcd535dcb61093f6c43"},{"problem":24,"code":"(fn [liste]\n  (reduce (fn [c x]\n            (+ c x))\n            0\n            liste))","user":"57ad0950e4b0b8559636fc97"},{"code":"(fn [xs] (reduce #(+ % %2) 0 xs))","problem":24,"user":"4ffb38e8e4b0678c553fc3c6"},{"code":"(fn [col] (reduce + 0 col))","problem":24,"user":"4fbf2818e4b081705acca317"},{"code":"(fn Sum [input]\n  (if (= (count input) 1)\n    (first input)\n    (+ (first input) (Sum (rest input)))))","problem":24,"user":"537cf454e4b06839e8705e82"},{"problem":24,"code":"(fn [s]\n   (apply + s))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn mysum \n  ([coll]\n    (mysum coll 0))\n  ([coll sum]\n    (if (empty? coll)\n        sum\n        (recur (rest coll) (+ sum (first coll))))))","problem":24,"user":"4e48ded5535dc968683fc4bf"},{"code":"(fn sum [x] (if (not= [] x) (+ (sum (rest x)) (first x)) 0))","problem":24,"user":"52e544d3e4b09f7907dd145e"},{"problem":24,"code":"(fn mysum [x]\n  (if (= (first x) nil)\n    0\n    (+ (first x) (mysum (rest x)))))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":24,"code":"(fn siu [summer input]\n  (\n   if (empty? input)\n   summer\n   (siu (+ summer (first input)) (rest input))\n   )\n  )\n0","user":"5e4920d6e4b043cd24807a4b"},{"problem":24,"code":"(fn mySum\n  ([x] (mySum x 0))\n  ([x s] \n   (if (empty? x)\n       s\n       (mySum (rest x) (+ s (first x))))))","user":"5aa5951ae4b0d174b936c899"},{"problem":24,"code":"(fn [list]\n              (reduce + list))","user":"5e491182e4b043cd24807a46"},{"code":"(fn un [l]\n    \t(if (not(empty? l))\n        (+ (first l) (un (rest l)))\n      0)\n\t  )","problem":24,"user":"4f9a5d3ae4b0dcca54ed6d08"},{"problem":24,"code":"reduce (fn [x i] (+ x i)) 0","user":"5a7b363ae4b03baeef9276d9"},{"problem":24,"code":"(fn sum [seq] (if (empty? seq)\n                0\n                (+ (first seq) (sum (rest seq)))))","user":"57476b5fe4b009280f9f2b74"},{"code":"(fn [seq]\n  ((fn [seq sum]\n    (if (empty? seq)\n      sum\n      (recur (rest seq) (+ sum (first seq)))))\n  seq 0))","problem":24,"user":"4fdb881ee4b05e33b9224f5e"},{"code":"(fn [x]\r\n\t(apply + x))","problem":24,"user":"510a6bece4b06956752d35af"},{"code":"(fn x [v]\n  (let [value (first v)]\n    (if value\n      (+ value (x (rest v)))\n      0\n    )\n  )\n)","problem":24,"user":"50c53708e4b08ad5e08ded0e"},{"code":"(fn [col] (reduce #(+ %1 %2) col))","problem":24,"user":"4e73b2e2535dff18050a9c78"},{"problem":24,"code":"(fn [input] (reduce + input))","user":"553093bee4b076ab5578f817"},{"problem":24,"code":"(fn sumSeq [x]\n  (if (=(count x) 1)\n    (first x)\n    (+ (first x) (sumSeq (rest x)))))","user":"5703d1fee4b08d47c97781fe"},{"code":"reduce (fn [tot, el] (+ tot el)) 0","problem":24,"user":"5243d9a2e4b076204b44fadf"},{"code":"(\n  fn [parâmetro]\n    (\n      apply + parâmetro\n    )\n)","problem":24,"user":"4eb9af9f535dfed6da9c6d59"},{"code":"(fn sum_seq [x]\n  (if (= (seq (next x)) nil)\n    (first x)\n    (+ (first x) (sum_seq (next x))) ))","problem":24,"user":"51551bbde4b0179c5115f4e7"},{"code":"reduce  + 0","problem":24,"user":"512cef56e4b0000438794b5b"},{"code":"(fn add-all [x] \r\n     (if (empty? x)\r\n\t       0\r\n\t       (+ (first x) (add-all (rest x)))))","problem":24,"user":"4e370a04535deb9a81d77f37"},{"problem":24,"code":"(fn [x](reduce + (into () x)))","user":"590d0b3fe4b047aa04b199f9"},{"code":"(fn [tosum]\n  (loop [curl tosum acc 0]\n    (if (empty? curl)\n      acc\n      (recur (rest curl) (+ acc (first curl))))))","problem":24,"user":"4ee95013535d93acb0a6688d"},{"code":"(fn [x]\n  (loop [li x sum 0]\n    (if (empty? li) sum (recur (rest li) (+ sum (first li))))))","problem":24,"user":"4e88feef535d8b9bb0147ca8"},{"problem":24,"code":"(fn [x] \n  (reduce + x)\n  )","user":"5499e26ae4b03163384f4707"},{"code":"(fn[lst] (reduce (fn[acc,e] (+ acc e)) 0 lst))","problem":24,"user":"4ec75829535d6d7199dd36e1"},{"problem":24,"code":"reduce (fn [acc x] (+ x acc))","user":"5ff5bc1ae4b06df49cee1490"},{"problem":24,"code":"(fn\n  [l]\n  (loop [l l\n         acc 0]\n    (if (= (count l) 0)\n      acc\n      (recur (rest l) (+ acc (first l))))))","user":"55923ef7e4b0604b3f94d58a"},{"code":"(fn summit [l] (if (empty? l) 0\n                    (+ (first l) (summit (rest l)))\n)\n)","problem":24,"user":"504ffa26e4b0a02f9cffdead"},{"problem":24,"code":"(fn [c]\n  (loop [c (seq c) n 0]\n    (if c\n      (recur (next c) (+ n (first c)))\n      n)))","user":"5e7128eee4b085ba37836db5"},{"code":"(fn sum ([l] (sum l 0)) ([l n] (if (= l []) n (sum (rest l) (+ n (first l))))))","problem":24,"user":"52af0136e4b0c58976d9acb3"},{"problem":24,"code":"(fn suma [lat]\n  (cond\n   (empty? lat) 0\n   :else (+ (first lat) (suma (rest lat))) ))","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn my-count [x] (if (< 0 (count x))\n                     (+ (first x) (my-count (rest x)))\n                        0\n                                         ))","problem":24,"user":"5296aa9be4b02ebb4ef75034"},{"problem":24,"code":";;(fn sum [seq]\n;;  #(reduce + %);;)\n\napply +","user":"5b477969e4b02d533a91bc6f"},{"code":"(fn  [x]\n  (loop [x x s 0]\n    (if (nil? x)\n    s\n    (recur (next x)  (+ s (first x))))))","problem":24,"user":"4fc5f83be4b0ee37620e1806"},{"code":"#(reduce (fn [s x] (+ s x)) 0 %)","problem":24,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn [coll]\n  (loop [coll coll sum 0]\n    (if (empty? coll)\n      sum\n      (recur (butlast coll) (+ sum (last coll))))))","problem":24,"user":"5242150ee4b076e5d3121f4a"},{"problem":24,"code":"(\n\t\tfn[x]\n\t\t(\n\t\t\treduce + x\n\t\t)\n\t)","user":"548018ede4b0c51c1f4d7334"},{"code":"(fn f [s]\n  (if (empty? s)\n      0\n      (+ (first s) (f (rest s)))))","problem":24,"user":"4e7a5395535db169f9c796ab"},{"problem":24,"code":"(fn [myseq] (reduce + myseq))","user":"55897fe2e4b059ccff29b205"},{"code":"(fn add-elems [coll]\n  (if (empty? coll) 0\n    (+ (first coll) (add-elems (rest coll)))))","problem":24,"user":"4e50fb2c535dc968683fc4f1"},{"problem":24,"code":"(fn a [lst]\n  (reduce + lst))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":24,"code":"(fn sum [x]\n  (if (= x [])\n    0\n    (+ (first x) (sum (rest x)))\n    )\n)","user":"546146d6e4b01be26fd7469c"},{"problem":24,"code":"(fn [seqn] (reduce + seqn))","user":"5e20a159e4b05b4b01516118"},{"code":"(fn[x] (reduce + (vec x)))","problem":24,"user":"4fdf8f67e4b05e33b9224f9e"},{"problem":24,"code":"(fn suhm\n  ([coll](suhm coll 0))\n  ([coll acc-total]\n  \t(if (empty? coll)\n      acc-total\n      (recur (rest coll) (+ (first coll) acc-total)))))","user":"55171140e4b06a49daca83be"},{"problem":24,"code":"(fn my-sum [s] (if (empty? s)\n                   0\n                   (+ (first s)\n                      (my-sum (rest s)))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [col]\r\n  (loop [c col sum 0]\r\n    (if (empty? (rest c))\r\n      (+ (first c) sum)\r\n      (recur (rest c) (+ (first c) sum)))))","problem":24,"user":"4e117dea535d04ed9115e7c9"},{"problem":24,"code":";;easy way\n#(reduce + %)\n\n\n;;long way\n#_(fn sum-mer \n  ([tally [uno & resto]]\n   (if uno\n     (let [tally-ho (+ tally uno)]\n       (sum-mer tally-ho resto))\n     tally))\n  ([coll]\n   (sum-mer 0 (seq coll))))   ;;seq(..) for the stupid sets without nths","user":"5c534431e4b0fb8c5ffd99f2"},{"code":"(fn [z] (reduce (fn [x y] (+ x y)) z))","problem":24,"user":"4f03e462535dcb61093f6b77"},{"problem":24,"code":"(fn [numbers]\n  (apply + numbers))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"#(loop [data %1, res 0] (if (not (empty? data )) (recur (rest data) (+ res (first data))) res))","problem":24,"user":"52f5eefbe4b09b582c12c9cb"},{"code":"reduce (fn [n %] (+ n %))  0","problem":24,"user":"527d59f9e4b0757a1b171382"},{"problem":24,"code":"(fn sum_list\n  ;\"Returns the sum of a sequence of numbers\"\n  [lst]\n  (reduce + lst))","user":"5bbbcecee4b0a20761a23611"},{"code":"reduce (fn [c x] (+ c x)) 0","problem":24,"user":"4f032f30535dcb61093f6a73"},{"code":"(fn mysum [lst]\n  (if-not (empty? lst)\n    (+ (first lst) (mysum (rest lst)))\n    0))","problem":24,"user":"53110f32e4b08068f379ece4"},{"problem":24,"code":"(fn sum2\n  [seq]\n  (reduce + seq))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn my-sum [items]\n  (loop [total 0 items items]\n    (if (= items '[])\n      total\n      (recur (+ total (first items)) (rest items)))))","problem":24,"user":"4f0ad254535d0136e6c222fa"},{"problem":24,"code":"#(loop [nlst %\n         sum 0]\n    (if (empty? nlst)\n      sum\n      (recur (rest nlst) (+ sum (first nlst)))))","user":"5cb351b7e4b026601754b8f9"},{"problem":24,"code":"(fn my-sum [coll] (if (nil? (first coll)) 0 (+ (first coll) (my-sum (rest coll)))))","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn [mySequence]\n  (loop [s mySequence acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (+ acc (first s)))\n    )\n  )\n)","problem":24,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":24,"code":";#(reduce (fn [acc n] (+ acc n)) 0 %)\n#(reduce + 0 %)","user":"5fd6f12be4b05ac5b16ea110"},{"problem":24,"code":"(fn summit [l]\n  (loop [r l\n         sum 0]\n    (if (empty? r)\n      sum\n      (recur (rest r) (+ (first r) sum)))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":24,"code":"(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n (first s))))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"#(reduce (fn[a b](+ a b)) %1)","problem":24,"user":"518637c9e4b0da5a5be3bac8"},{"problem":24,"code":"(fn sum [coll]\n  (if (empty? coll) 0\n    (+ (first coll) (sum (rest coll)))))","user":"5777cffae4b0979f89651651"},{"code":"#(reduce (fn [x y] (+ x y)) %)","problem":24,"user":"4e7e1305535db169f9c79700"},{"problem":24,"code":"(fn teste [x]\n  (reduce + x))","user":"58e14302e4b005f69f193c78"},{"code":"(fn plus [x] (if (first x) (+ (first x) (plus (rest x))) 0))","problem":24,"user":"535920b2e4b04ce2eb3ed294"},{"code":"(fn sum [s]\n  (if\n    (= 1 (count s)) (first s)\n    (+ (first s) (sum (rest s)))))","problem":24,"user":"504e48ace4b0f6ff3350c498"},{"code":"(fn [lat]\n    (apply + lat))","problem":24,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn c [li] (if (empty? li) 0 (+ (c (rest li)) (first li))))","problem":24,"user":"521f0106e4b0e6c71e0c0bc4"},{"problem":24,"code":"(fn sum-it-all-up\n  [my-seq]\n  (loop [remaining my-seq\n         sum 0]\n    (if (seq remaining)\n      (recur (rest remaining) (+ sum (first remaining)))\n      sum)))","user":"548f19a8e4b0e286459a1231"},{"code":"(fn [list] (reduce (fn [all n] (+ all n)) list))","problem":24,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":24,"code":"(fn f [l] (if (empty? l) 0 (+ (first l) (f (rest l)))))","user":"5e373c08e4b0650de70e2b41"},{"problem":24,"code":"(fn [s]\n  (loop [items s\n         sum 0]\n    (if (nil? (first items))\n         sum\n        (recur (rest items) (+ sum (first items))))))","user":"5922599be4b09b4ee5954c8d"},{"code":"(fn adder [sq]\n  (reduce + sq))","problem":24,"user":"515737f0e4b0b0b4b87062d0"},{"problem":24,"code":"(fn  [seqs](reduce + seqs))","user":"56a257e7e4b0542e1f8d14bb"},{"problem":24,"code":"(fn sumrecur [l]\n  (if (empty? l)\n    0\n    (+ (first l) (sumrecur (rest l)))\n  )\n)","user":"600777a3e4b074f607df6667"},{"problem":24,"code":"(fn sum-up [l]\n    (reduce #(+ %1 %2) 0 l))\n\n\n;;(+ %1 %2)","user":"5c3453fee4b0d62ef62d9f53"},{"code":"(fn [seq]\n  (letfn [(acc [seq sum]\n               (if (empty? seq)\n                 sum\n                 (recur (rest seq)\n                        (+ (first seq) sum))))]\n    (acc seq 0)))","problem":24,"user":"53134005e4b08068f379ed07"},{"code":"(fn [container] (loop [s container sum 0] (if (nil? s) sum (recur (next s) (+ sum (first s))))))","problem":24,"user":"52a195fde4b04e0c58e87bda"},{"code":"(fn [the-seq] (apply + the-seq))","problem":24,"user":"4f80a906e4b033992c121bf7"},{"problem":24,"code":"(fn [l](reduce + l))","user":"55cde24ae4b0e31453f64a23"},{"problem":24,"code":"(fn sum \n    ([l acc] (if (empty? l) acc (sum (rest l) (+ acc (first l)))))\n    ([l] (sum l 0)))","user":"5d5b06a9e4b02ba5928a683a"},{"code":"(partial reduce (fn [runSum nex] (+ nex runSum)))","problem":24,"user":"50e915eae4b033b0e80d11e9"},{"problem":24,"code":"(fn [s]\n  (loop [[first & rest] (seq s) sum 0]\n    (if (nil? first)\n      sum\n      (recur rest (+ sum first))\n    )\n  )\n)","user":"5cd67eb2e4b0ccb061962943"},{"problem":24,"code":"(fn [coll] (reduce (fn [acc x] (+ x acc)) 0 coll))","user":"56b2573ce4b0982f16b37e02"},{"problem":24,"code":"(fn [array]\n  (loop [a array total 0]\n    (if (empty? a)\n      total\n      (recur (rest a) (+ total (first a))))))","user":"56bde860e4b0f26550335979"},{"problem":24,"code":"(fn [listy] (reduce + listy))","user":"5380a27ae4b06839e8705ec4"},{"code":"(fn [l]\n    (reduce + l) \n)","problem":24,"user":"504e1ddae4b0f6ff3350c466"},{"problem":24,"code":"(fn [col] (loop [x col \n                 y 0]\n            (if (= () x)\n              y\n              (recur (rest x) (+ y (first x))))))","user":"5753b6c6e4b02ea1147992af"},{"code":"(fn [s]\n  (reduce + s)  \n)","problem":24,"user":"52c872b6e4b0c2d177d62134"},{"problem":24,"code":"(fn [x] (loop [[h & t] (into [] x) s 0] (let [news (+ h s)] (if (= t nil) news (recur t news)))))","user":"58152157e4b0f478707a0631"},{"problem":24,"code":"(fn sum [x] \n  (if (= x [])\n    0\n    (+ (first x) (sum (rest x)))))","user":"54336443e4b0b6b47310fcde"},{"code":"(fn f [x]\n  (if (= (count x) 1)\n    (first x)\n    (+ (first x) (f (rest x)))))","problem":24,"user":"52d7b0ade4b09f7907dd137c"},{"problem":24,"code":"(fn [xs] (reduce #(+ %1 %2) 0 xs))","user":"560e9a2de4b05f002753df52"},{"code":"(fn my-add\n  [xs]\n  (if (= xs (empty xs))\n    0\n    (+ (first xs) (my-add (rest xs)))))","problem":24,"user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn [x] (reduce + x ))","problem":24,"user":"5006b46fe4b0678c553fc48b"},{"problem":24,"code":"(fn [s] ((fn [s a] (cond (empty? s) a :else (recur (rest s) (+ a (first s))))) s 0))","user":"5cd26163e4b0ccb0619628fe"},{"problem":24,"code":"(fn lol [x] \n  (if \n    (empty? x)\n    0 \n    (+ \n     (first x) \n     (lol \n      (rest x)))\n    )\n  )","user":"544e1794e4b0e39780006980"},{"code":"(fn [_seq] (apply + _seq))","problem":24,"user":"4f551054e4b0a7574ea717f5"},{"problem":24,"code":"(fn [sequen]\n  (->> sequen\n       (reduce +)))","user":"5dcd182ae4b0b296f82db5a9"},{"problem":24,"code":"(fn f [x] (if (empty? x) 0 (+ (first x) (f (rest x)))))","user":"5ae7ed7ce4b0837691e92cb0"},{"code":"(fn sum [x] \n  (if (< 1 (count x))\n    (+ (first x) (sum (rest x) ) )\n\t(nth x 0)    \n  )\n)","problem":24,"user":"5125029de4b0ce9225d2ed3e"},{"code":"#(loop [sum 0 array %]\n   (if(empty? array) sum\n     (recur (+ sum (first array)) (rest array))))","problem":24,"user":"539affaae4b0b51d73faaf1a"},{"problem":24,"code":"(fn [alist]\n  (loop [sum 0\n         olst alist]\n    (if (empty? olst)\n      sum\n      (recur (+ sum (first olst))\n        \t   (rest olst)) )))","user":"5642b939e4b08d4f616f5f1b"},{"code":"(fn sum2 [x]\n  (if (empty? (rest x)) (first x)\n      (sum2 (conj (rest (rest x)) (+ (first x) (first (rest x)))))\n))","problem":24,"user":"5099283ce4b0cae2931060af"},{"problem":24,"code":"(fn sum [coll]\n  (if (= () (rest coll))\n    (first coll)\n    (+ (sum (rest coll)) (first coll))))","user":"4e8385d8535db62dc21a62db"},{"problem":24,"code":"(fn [args] (reduce + args))","user":"5474666ae4b0c51c1f4d7288"},{"code":"(fn [col] \n  (reduce + col)\n  )","problem":24,"user":"536827f1e4b0243289761e8a"},{"problem":24,"code":"(fn [lst]\n  (loop [in lst sum 0]\n    (cond (empty? in) sum\n    :else (recur (rest in) (+ sum (first in))))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn foo [x] \r\n   (loop [lst x sum 0] \r\n     (if (= (rest lst) ())                  (+ sum (first lst)) (recur (rest lst) (+ sum (first lst))))))","problem":24,"user":"4ec3072a535dcc7ae8597d50"},{"code":"(fn sum [a-seq] (reduce + a-seq))","problem":24,"user":"52b6365de4b0c58976d9ad40"},{"code":"(fn sum[x] \n  (if (empty? x) \n    0\n    (+ (first x) (sum (rest x)))\n   )\n )","problem":24,"user":"535197f2e4b084c2834f4ae4"},{"code":"(fn [col]\n  \t(reduce (fn [memo x] (+ memo x)) col))","problem":24,"user":"51891c96e4b04c2714a2670e"},{"code":"(fn [col] (loop [x col sum 0]\n  (if (seq x)\n    (recur (next x) (+ (first x) sum))\n    sum)))","problem":24,"user":"4e399009535deb9a81d77f3f"},{"problem":24,"code":"(fn [s]\n  (loop [sum 0\n         sqvn s]\n    (if (empty? sqvn)\n      sum\n      (recur (+ sum (first sqvn)) (rest sqvn)))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":24,"code":"(fn sum-all [list] (reduce (fn [cnt item] (+ cnt item)) 0 list))","user":"5c6e8b57e4b0fca0c1622755"},{"problem":24,"code":"(fn [l]\n  (reduce (fn [_ sum] (+ sum _)) 0 l))","user":"590b3aeae4b047aa04b199d0"},{"problem":24,"code":"(fn [x] (reduce (fn [x y] (+ x y)) x))","user":"55885edae4b059ccff29b1f6"},{"code":"(fn sum' [xs] (if (empty? xs) 0 (+ (first xs) (sum' (rest xs)))))","problem":24,"user":"508157b2e4b0946d0443855c"},{"problem":24,"code":"#(reduce (fn [sum val] (+ sum val)) %)","user":"57e30d38e4b0bfb2137f5a92"},{"problem":24,"code":"(fn [x] ((fn [x a] (if (empty? x) a (recur (rest x) (+ a (first x))))   ) x 0))","user":"4f7121cae4b07046d9f4f007"},{"code":"(fn _ [x] (reduce + x))","problem":24,"user":"50df6dd0e4b061dbdced7225"},{"code":"(fn sum [items] (if (= 1 (count items)) (first items) (+ (first items) (sum (rest items)))))","problem":24,"user":"5338c965e4b0e30313ee6ca0"},{"code":"(fn [lst]\n  (let\n    [sum-1 (fn [lst sum]\n      (if (nil? lst)\n        sum\n        (recur (next lst) (+ (first lst) sum))))]\n    (sum-1 lst 0)))","problem":24,"user":"4e951f44535dbda64a6f6b30"},{"code":"#(loop [l %, a 0]\n  (if (empty? l) a\n    (recur (rest l) (+ (first l) a))))","problem":24,"user":"4e57afc5535d8a8b8723a288"},{"problem":24,"code":"(fn soma [lst] (reduce + lst))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn sum\n  ([s] (sum s 0))\n  ([s cnt]\n   \t(if (empty? s)\n      cnt\n      (recur (rest s) (+ cnt (first s)))\n    )\n  )\n)","problem":24,"user":"5303a027e4b0d8b024fd3745"},{"code":"(fn [coll]\n  (reduce + coll))","problem":24,"user":"4e7f51eb535db966e863cc3f"},{"problem":24,"code":"(fn [s] (last (#(let [i (atom 0)] (for [j s] (swap! i + j))))))","user":"5f6e23e6e4b02876ed9fd064"},{"code":"(fn [seq]\n  (loop [seq seq\n         sum 0]\n    (if (= 0 (count seq))\n      sum\n      (recur (rest seq) (+ sum (first seq))))))","problem":24,"user":"53a36fd7e4b0f1fc74538834"},{"problem":24,"code":"#(reduce + (filter number? %))","user":"59f38703e4b0966464fe6a9e"},{"problem":24,"code":"(fn [x]\n  (loop [x x sum 0]\n    (if-not (empty? (rest x))\n      (recur (rest x) (+ (first x) sum))\n      (+ sum (first x)))))","user":"574803a1e4b009280f9f2b7d"},{"code":"#(reduce (fn [x acu] (+ x acu)) 0 %)","problem":24,"user":"5301d41ae4b0d8b024fd3720"},{"problem":24,"code":"(fn [arr]\n  (apply + arr))","user":"58d9772de4b0a4d5acaab63c"},{"problem":24,"code":"(fn [s] \n  (reduce + s )  \n)","user":"564633a1e4b0284900eef60f"},{"problem":24,"code":"(fn f [x] (if (seq x) (+ (first x) (f (rest x))) 0))","user":"5868efdae4b0f14aab7c8896"},{"code":"(fn sum [numbers]\n    (if(empty? numbers)\n        0\n        (+ (first numbers) (sum (rest numbers)))\n    )\n)","problem":24,"user":"51d1111ce4b067c36548635f"},{"code":"(fn listsum [x]\n  (if (empty? x)\n    0\n    (+ (first x) (listsum (rest x)))))","problem":24,"user":"50baad40e4b03e68e4411c96"},{"problem":24,"code":"(fn [my-seq]\n\n  (reduce + 0 my-seq)\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":24,"code":"(fn something\n     ([] 0)\n     ([s] (if (empty? s) 0 (+ (first s) (something (rest s)))))\n     ([x y] (+ x y))\n   )","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"#(reduce (fn [elm acc] (+ elm acc)) 0 %)","problem":24,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [x]\n  (reduce (fn [acc e]\n            (+ acc e))\n          0 x))","problem":24,"user":"52d6664be4b09f7907dd1359"},{"problem":24,"code":"(fn sum [xs]\n  (reduce (fn [acc i] (+ acc i)) 0 xs))","user":"56efc9fde4b04a395b9a0464"},{"problem":24,"code":"(fn [coll]\n    (loop [acc 0, coll coll]\n      (if (empty? coll)\n        acc\n        (recur (+ acc (first coll))\n               (rest coll)))))\n\n#_(fn [x]\n    (reduce + 0 x))","user":"529e3258e4b04e0c58e87b8d"},{"problem":24,"code":";; apply +\n\n(partial reduce +)","user":"540e0637e4b0addc1aec6717"},{"problem":24,"code":"#(loop[x %, i 0, s 0]\n   (if(= i (count %))\n     s\n     (recur(next x)(+ i 1)(+ s (first x)))))","user":"5654e8ade4b0f9d632dd848e"},{"problem":24,"code":"(fn foo [xs] ((fn bar [ys acc] (if (empty? ys) acc (bar (rest ys) (+ acc (first ys))))) xs 0))","user":"6028365be4b0d5df2af22242"},{"problem":24,"code":"(fn su [x]\n  (if (empty? x)\n    0\n    (+ (first x) (su (rest x)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":24,"code":"#(loop [col % rt 0]\n   (if(empty? col)\n     rt\n     (recur (rest col) (+ rt (first col)))))","user":"5d270111e4b092dab7f59c62"},{"problem":24,"code":"(fn [x]\n  (reduce (fn [a b] (+ a b)) x))","user":"570dc955e4b0b0fb43fd06e0"},{"code":"apply +\n\n#_(fn [xs]\n  (loop [x xs\n         r 0]\n    (if (empty? x)\n      r\n      (recur (rest x)\n             (+ r (first x))))))","problem":24,"user":"51e5a627e4b0efabf93c02db"},{"code":"(fn mySum [xs] (+ (first xs)\n                     (if (= 1 (count xs)) 0 (mySum (rest xs)))))","problem":24,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":24,"code":"(fn mysum [coll]\n  (loop [c coll sum 0]\n    (if (empty? c)\n      sum\n      (recur (rest c) (+ sum (first c)))\n    )\n  )\n)","user":"586cf7c1e4b01531a375e986"},{"code":"(fn summa [x] (if (next x) (+ (first x) (summa (next x))) (first x)))","problem":24,"user":"4efc4210535dced4c769f280"},{"problem":24,"code":"(fn sum [sq] (if (empty? sq) 0 (+ (first sq) (sum (rest sq)) )))","user":"5a137364e4b0ff51aa4b3185"},{"code":"(fn sumup [l]\n    (if (= (count l) 1)\n      (first l)  \n      (+ (first l) (sumup (rest l)))))","problem":24,"user":"5070c132e4b0e3170b5a8676"},{"code":"#(loop [ s 0  \n         f (first %)\n          r (rest %) ]\n ( if (not ( = f nil)) \n    (recur (+ s f) \n           (first r)\n            (rest r)\n) s )\n)","problem":24,"user":"4e9e6bd6535dbda64a6f6b96"},{"code":"(fn [s] \n  (reduce + 0 s))","problem":24,"user":"4f611127e4b0defedf855fb4"},{"problem":24,"code":"(fn ff [s] (if (nil? (first s)) 0 (+ (first s) (ff (rest s)))))","user":"5dbc227be4b09f47823971b0"},{"problem":24,"code":"(fn [c] (reduce (fn[x y] (+ x y)) c))","user":"5467f222e4b00cfc9eacc132"},{"problem":24,"code":"(fn su [x]\n(reduce + x))","user":"5bd6e161e4b0ed4b8aab4baf"},{"code":"#( reduce + 0 % )","problem":24,"user":"51f81925e4b09be9c177e526"},{"problem":24,"code":"(fn Sum-It-All-Up\n  [lst]\n  (loop [sum 0\n         lst1 lst]\n    (cond\n      (empty? lst1) sum\n      :else (recur (+ sum (first lst1)) (rest lst1)))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":24,"code":"(fn sum\n  [data] \n  (if (= (first data) nil) \n    0 \n    (+ (sum (rest data)) (first data))\n  )\n)","user":"56620138e4b068f2fe63dc71"},{"code":"(fn [more] (reduce + more))","problem":24,"user":"4ec3f4a7535dcc7ae8597d5e"},{"problem":24,"code":"(fn [seq]\n        (loop [to-sum seq\n               total 0]\n          (if (empty? to-sum)\n            total\n            (recur (rest to-sum) (+ total (first to-sum))))))","user":"52b065dbe4b0c58976d9acc9"},{"problem":24,"code":"(fn [x]\n   (loop [[first & rest] (seq x)  acc 0]\n          (if (empty? rest)\n            (+ acc first)\n            (recur rest (+ acc first)) )\n          )\n   )","user":"5a0a1748e4b0eab8c0448937"},{"problem":24,"code":"(fn \n  [seq]\n  \t(apply + seq))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"code":"(fn [s]\n  (loop [s s sum 0]\n    (if (empty? s) sum\n      (recur (rest s) (+ sum (first s))))))","problem":24,"user":"5029fccee4b023940c84aa47"},{"problem":24,"code":"(fn [col]\n   (reduce + col))","user":"5cdd7157e4b05ee0cb31175b"},{"problem":24,"code":"(fn sum-it\n  [seqn]\n  (if (nil? (next seqn))\n    (first seqn)\n    (+ (first seqn)\n       (sum-it (rest seqn)))))","user":"5ed6e0eee4b016b56eae05e4"},{"code":"(fn my-sum [x]\n  (reduce + 0 x))","problem":24,"user":"525aa499e4b0cb4875a45cf7"},{"problem":24,"code":"(fn [a] (reduce (fn [c x] (+ c x)) 0 a ))","user":"5f0890ffe4b0cf489e8d7f61"},{"code":"#( apply + %)","problem":24,"user":"4f030775535dcb61093f6a43"},{"problem":24,"code":"reduce (fn [acc elem] (+ acc elem)) 0","user":"5586f091e4b059ccff29b1dc"},{"problem":24,"code":"(fn f [s] \n  (if (empty? s) \n    0\n    (+ (first s) (f (rest s)))))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [s]\n   (reduce + s))","problem":24,"user":"52470d42e4b05ef8e38e6350"},{"problem":24,"code":"(fn sumOfList\n  [sequence]\n  (apply + sequence))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn sumup [xs]\r\n  (reduce #(+ %1 %2) 0 xs))","problem":24,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn [x] (loop [r x s 0] (if (= (count r) 0) s (recur (rest r) (+ s (first r))))))","problem":24,"user":"53012382e4b0d8b024fd3718"},{"code":"(fn [x] \n  (loop [x x sum 0] \n    (if (empty? x) \n        sum \n        (recur (rest x) (+ sum (first x))))\n  )\n)","problem":24,"user":"502421ebe4b09f7ee7fb4377"},{"code":"(fn sum [x] (if (first x) (+ (first x) (sum (rest x))) 0))","problem":24,"user":"504e1c76e4b0f6ff3350c464"},{"problem":24,"code":"#( apply + % )","user":"57561529e4b02ea1147992d3"},{"code":"(fn mySum [l] (if (= l []) 0 (+ (first l) (mySum (rest l)))))","problem":24,"user":"53a0acebe4b0ca733b9744b4"},{"code":"(fn [s]\n  (reduce\n    (fn [a, b] (+ a b))\n    s\n  )\n)","problem":24,"user":"4ffb3c50e4b0678c553fc3c8"},{"code":"(fn [coll] (reduce + coll))","problem":24,"user":"4dd7c1da535d2dad7130b5d4"},{"problem":24,"code":"#(loop [coll %\n          result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (+ result (first coll)))))","user":"596b5f27e4b069c0a1a19813"},{"code":"(fn sum [coll] (reduce + coll))","problem":24,"user":"4f7250cce4b07046d9f4f02a"},{"code":"(fn ([arg] (reduce + 0 arg)))","problem":24,"user":"4f7d065ce4b06e829148e1b9"},{"problem":24,"code":"#(reduce (fn [a b] (+ a b)) 0 %)\n;; args: fn start array\n;; a is result from prev (started at 0 here)\n;; b is el value","user":"5bb919e1e4b0a20761a235ca"},{"code":"(fn sum-numbers [sequence] (reduce + sequence))","problem":24,"user":"51daa721e4b02ceefd94776f"},{"problem":24,"code":"#(loop [s % accum 0]\n  (if (empty? s) accum\n    (recur (next s) (+ accum (first s)))))","user":"5310e968e4b08068f379ecdd"},{"problem":24,"code":"(fn\n  [collection]\n  (reduce + collection))","user":"530148f6e4b0d8b024fd371b"},{"problem":24,"code":"(fn [lista] (reduce (fn [accum elemento] (+ accum elemento)) 0 lista))","user":"59e63a2ce4b08badc2a0c569"},{"problem":24,"code":"(fn sum [sqnc]\n  (if (= 1 (count sqnc))\n    (first sqnc)\n    (+ (first sqnc) \n       (sum (rest sqnc)) )\n   ))","user":"58acce0ae4b0005cfeb1a754"},{"code":"(fn [ls] (reduce #(+ %1 %2) ls))","problem":24,"user":"4f03ba9c535dcb61093f6b58"},{"problem":24,"code":"(fn [lst]\n  (loop [sum 0\n         lst lst]\n    (if (empty? lst)\n      sum\n      (recur (+ sum (first lst))\n             (rest lst)))))","user":"56b9c644e4b0f2655033593a"},{"code":"(fn [sq]\n  (loop [sm 0 s sq]\n    (if (next s)\n      (recur (+ sm (first s)) (next s))\n      (+ sm (first s)))))","problem":24,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [xs]\n  (loop [ys xs acc 0]\n    (if (empty? ys)\n        acc\n      (recur (rest ys) (+ acc (first ys))))))","problem":24,"user":"519451d1e4b0142f60b4aedd"},{"code":"(fn [coll]\n  (loop [xs coll acc 0]\n    (if (nil? (first xs))\n      acc\n      (recur (rest xs) (+ acc (first xs))\n     ))))","problem":24,"user":"515c1f12e4b069911535cf06"},{"code":"(fn [x] (reduce #'+ x))","problem":24,"user":"530d85dee4b08068f379eca8"},{"code":"(fn summer [lat]\r\n  (reduce + lat))","problem":24,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn \n  [x]\n  (loop [tail x acc 0 ]\n    (cond \n      (empty? tail)\n      acc\n      :else\n        (recur (rest tail) (+ acc (first tail)) )\n      )\n  )\n)","problem":24,"user":"506f5a67e4b082ae7d1032c6"},{"code":"(fn mysum [coll]\n  (loop [my-coll (seq coll)\n         my-sum 0]\n    (if (first my-coll)\n      (recur (next my-coll) (+ my-sum (first my-coll)))\n      my-sum)))","problem":24,"user":"4e4e5b91535dc968683fc4e5"},{"problem":24,"code":"(fn sum [coll] (if (empty? (rest coll)) (first coll) (+ (first coll) (sum (rest coll)))))","user":"56cb3a61e4b0ea9b8538f726"},{"problem":24,"code":"(fn [sequence]\n  (loop [seq sequence sum 0]\n    (if(empty? seq)\n      sum\n      (recur (rest seq) (+ (first seq) sum))\n    )\n  )\n)","user":"55635886e4b0c656e3ff17e9"},{"code":"(fn sum [s] (if (nil? (first (rest s))) (first s) (+ (first s) (sum (rest s)))))","problem":24,"user":"5263c44fe4b03e8d9a4a70b8"},{"problem":24,"code":"(fn [xs]\n  ((fn [ys acc]\n    (if (= (count ys) 0)\n      acc\n      (recur (rest ys) (+ acc (first ys)))))\n  xs 0))","user":"56be350ce4b0f26550335981"},{"problem":24,"code":"(fn sumall\n  ([l] (sumall l 0))\n  ([l n] (if (empty? l)\n           n\n           (sumall (rest l) (+ n (first l))))\n   )\n)","user":"54c82b27e4b045293a27f645"},{"code":"(fn [seq] (reduce #'+ seq))","problem":24,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn sum [arg]\n  (if (empty? arg)\n    0\n    (+ (first arg) (sum (rest arg)))))","problem":24,"user":"4f652432e4b07046d9f4ef3d"},{"code":"(fn [l] (loop [ls l, acc 0] (if (empty? ls) acc (recur (rest ls) (+ acc (first ls))))))","problem":24,"user":"4eeccfc0535d93acb0a668b5"},{"code":"(fn sum [l]\n  (if (empty? l)\n    0\n    (+ (first l) (sum (rest l)))))","problem":24,"user":"508eea7de4b0706b2ed3ef8e"},{"problem":24,"code":"(fn sum[toSum]\n(reduce + toSum))","user":"555c7517e4b0b056612e224e"},{"code":"(fn [coll]\n  (reduce #(+ %1 %2) coll))","problem":24,"user":"4f03afcc535dcb61093f6b4d"},{"code":"(fn [sequence]\n  (loop [s sequence cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (+ cnt (first s)))\n)))","problem":24,"user":"508bf05ae4b0f17d83ea26aa"},{"code":"(fn [sq] (reduce #(+ %1 %2) sq))","problem":24,"user":"4f60ed88e4b0defedf855fb2"},{"code":"(fn addem [items]\n  (cond \n    (empty? items) 0\n    :else\n\t(+ (first items) (addem (rest items)))\n   )\n)","problem":24,"user":"502be4fae4b08f5602f232eb"},{"code":"(fn [seqe]\n  (loop [s seqe\n         sum 0]\n    (if (empty? s)\n      sum\n      (recur (next s) (+ sum (first s))))))","problem":24,"user":"514a13cee4b0829bd132edb4"},{"problem":24,"code":"(fn[coll] (loop [my-coll coll, sum 0] (if (empty? my-coll) sum (recur (rest my-coll) (+ sum (first my-coll))))))","user":"547f3434e4b0c51c1f4d7319"},{"problem":24,"code":"reduce (fn [acc val] (+ acc val)) 0","user":"5592bf9fe4b0c79f6e1db933"},{"problem":24,"code":"(fn\n  [lst]\n  (reduce (fn [a b] (+ a b)) lst))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [mylist] (apply + mylist))","problem":24,"user":"53a5c7ffe4b0ef122a8689c4"},{"code":"#(reduce (fn[x y] (+ x y)) %)","problem":24,"user":"529599dce4b02ebb4ef75027"},{"problem":24,"code":"(fn sum [x] (if (empty? x)\n  \t\t\t\t0\n              (+ (first x) (sum (rest x))\n              \n  )            \t\n  ))","user":"563aa090e4b0bfe05bf11801"},{"problem":24,"code":"(fn [a-seq]\n  (let [helper (fn [sum elem]\n                 (+ sum elem))]\n    (reduce helper 0 a-seq)))","user":"5c422f66e4b08cd430848ed3"},{"problem":24,"code":"(fn sm [l] (if (empty? l) 0 (+ (first l) (sm (rest l)))))","user":"5512ec30e4b055c2f668d4bc"},{"problem":24,"code":"(fn [xs]\n  ((fn sm [xs n]\n    (if (nil? (first xs))\n      n\n      (sm (rest xs) (+ n (first xs))))) xs 0))","user":"54565558e4b080a794c2c87f"},{"problem":24,"code":"(fn [s]\n  (loop [q s sum 0]\n    (if (empty? q) sum (recur (rest q) (+ sum (first q))))\n    )\n  )","user":"54f239bde4b024c67c0cf8c1"},{"problem":24,"code":"(fn [l & sum]\n  (if (nil? sum)\n  \t(recur l 0)\n  \t(if (= l [])\n\t  sum\n      (recur (rest l) (+ sum (first l)) )\n    )\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":24,"code":"(fn summ\n  ([col] (summ col 0 ))\n  ([col acc] (if (seq col) (summ (rest col) (+ (first col) acc)) acc) ))","user":"58dd2c02e4b0a4d5acaab6b8"},{"problem":24,"code":"(fn s [nums]\n  (loop [total 0 remaining nums]\n    (if (empty? remaining)\n      total\n      (recur (+ (first remaining) total) (rest remaining)))))","user":"580b79e4e4b0a837a8b30d4a"},{"problem":24,"code":"#(->> %\n      (reduce + 0))","user":"562fb774e4b0ab312c17ebd9"},{"problem":24,"code":"(fn [liste] (reduce + liste))","user":"553b9d44e4b09218d5f45007"},{"problem":24,"code":"#(reduce\n  (fn [x,y] (+ x y))\n   %)","user":"5d0fe86de4b0cc9c9158826c"},{"problem":24,"code":"(fn [collec]\n  (reduce #(+ %1 %2) collec))","user":"583e02fce4b089d5ab817da5"},{"code":";(fn sum [inlist]\n;  (if (= (count inlist) 1)\n;    (first inlist)\n;    (+ (first inlist) (sum (rest inlist)))))\n\n#(reduce + %)","problem":24,"user":"4fc50bcbe4b081705acca375"},{"code":"#(apply + %)","problem":24,"user":"4dd7d040535d2dad7130b5d6"},{"problem":24,"code":"(fn [v] (reduce + 0 v))","user":"55f04940e4b06e875b46ce21"},{"problem":24,"code":"(fn f [l] (if (empty? l)\n          0\n          (+ (first l) (f (rest l)))\n         )\n  )","user":"595930f6e4b066ee0a44af9c"},{"problem":24,"code":"(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (first coll)\n      (recur (next coll) (+ acc (first coll)))\n      acc)))","user":"57275755e4b0c5bde472c13b"},{"problem":24,"code":"(fn my-sum [arr]\n  (let [sum-inner (fn this [arr, accumulator]\n                    (if (= 0 (count arr)) accumulator\n                                          (this (rest arr) (+ accumulator (first arr))))\n                    )]\n      (sum-inner arr 0)\n    )\n  )","user":"56530a1ce4b0f9d632dd846c"},{"code":"(fn [sq] (reduce + 0 sq))","problem":24,"user":"51bd8c53e4b0ff155d51d2b2"},{"problem":24,"code":"(fn [s]\n  (loop [total 0 remainder s]\n    (if (= (count remainder) 0)\n      total\n      (recur (+ total (first remainder)) (rest remainder))\n      )\n    )\n  )","user":"55c5261ee4b0e31453f649ae"},{"problem":24,"code":"(fn [s]\n  (loop [r 0 s s]\n    (if (empty? s)\n      r\n      (recur (+ r (first s)) (rest s)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":24,"code":"(fn [nums]\n  (loop [remaining-nums nums\n         rsf 0]\n    (if (empty? remaining-nums)\n      rsf\n      (recur (rest remaining-nums)\n             (+ (first remaining-nums) rsf)))))","user":"5a9829e5e4b0d174b936c788"},{"code":"(fn mysum [seq]\n        (if (= (count seq) 1)\n          (first seq)\n          (+ (mysum (rest seq)) (first seq))\n          \n      )\n      )","problem":24,"user":"50158fa0e4b0aaedd199e913"},{"code":"(fn a [x] (if (empty? x) 0\n          (+ (first x) (a (rest x)))))","problem":24,"user":"502d39f8e4b0d96a44ab2032"},{"problem":24,"code":"(fn [c]\n  (reduce (fn[acc x] (+ acc x)) 0 c)\n  )","user":"58ec5e86e4b056aecfd47d5f"},{"problem":24,"code":"#(apply +' %)","user":"56d15bfbe4b0ea9b8538f78d"},{"code":"(fn [s]\n         ((fn [s m]\n            (if (nil? s)\n              m\n              (recur (next s) (+ m (first s))))\n           ) s 0))","problem":24,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":24,"code":"(fn sum [numbers]\n  (if (= numbers [])\n    0\n    (+\n      (first numbers)\n      (sum (rest numbers)))))","user":"58e980dfe4b056aecfd47d0b"},{"code":"(fn [c] (reduce (fn [a b] (+ a b)) c))","problem":24,"user":"513de0e6e4b0825f97f7f965"},{"problem":24,"code":"(fn [s]\n  (loop [s s\n         somme 0]\n    (if (seq s)\n      (recur (rest s) (+ somme (first s)))\n      somme)))","user":"56a655dbe4b0542e1f8d14eb"},{"code":"(fn sumall [coll]\n  (if (empty? coll) 0\n      (+ (sumall (rest coll)) (first coll))))","problem":24,"user":"5046f909e4b03b02161376b5"},{"problem":24,"code":"(fn mysum\n  ([x] (mysum x 0))\n  ([x sum]\n   (if (empty? x)\n     sum\n     (mysum (rest x) (+ (first x) sum)))))","user":"5e6834e0e4b04793f195eaf9"},{"problem":24,"code":"(fn foo [args]\n  (if (= args '())\n    0\n    (+ (foo (rest args)) (first args))))","user":"5c92b9e6e4b048ec896c5a0d"},{"code":"(fn [my-seq] (reduce + my-seq))","problem":24,"user":"52b66d98e4b0c58976d9ad46"},{"problem":24,"code":"(partial reduce +)\n\n; previous\n; (fn [c] (reduce + c))","user":"54de6820e4b024c67c0cf79f"},{"code":"(fn this [w]\r\n    (if (> (count w) 1)\r\n      (+ (first w) (this (rest w)))\r\n      (first w)\r\n    )\r\n  )","problem":24,"user":"501819efe4b02f523d7cc5eb"},{"problem":24,"code":"#(reduce (fn [acc v] (+ acc v)) 0 %)","user":"5c0039dce4b0bdcf453d1636"},{"problem":24,"code":"#(reduce (fn [total cur] (+ total cur)) %)","user":"563e7a33e4b0da801c4e466d"},{"code":"(fn [s]\n  (loop [cur s acc 0]\n    (if (empty? cur)\n      acc\n      (recur (rest cur) (+ (first cur) acc)))))","problem":24,"user":"518bd05ee4b0f028e99addf2"},{"problem":24,"code":"(fn sum [items]\n  (if (empty? items)\n    0\n    (+ (first items) (sum (rest items)))))","user":"5b1ff078e4b03cfeda66ed2a"},{"problem":24,"code":"(fn [seq] \n  (reduce + seq))","user":"5ea67a5ae4b00a66d4a951ae"},{"problem":24,"code":"#(->> % (reduce +))","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":24,"code":"(fn [coll]\n    (reduce + 0 coll))","user":"4fb41dace4b081705acca2aa"},{"code":"(fn n [x]\n  (if (nil? (next x))\n    (first x)\n    (+ (first x)(n (rest x)))\n  )\n)","problem":24,"user":"4f4aa932e4b0d56e7bb92c14"},{"problem":24,"code":"(fn\n  [coll]\n  (reduce (fn [store cur] (+ store cur))\n          0\n          coll))","user":"56a79421e4b07966d5a8a05c"},{"code":"reduce (fn [c x] (+ x c)) 0","problem":24,"user":"52810225e4b0757a1b171418"},{"code":"(fn sol0024-reduce\n  [coll]\n  (reduce + coll))","problem":24,"user":"4fc6305de4b0ee37620e180b"},{"problem":24,"code":"(fn [lst]\n  (loop [aseq (seq lst) sum 0]\n    (if (empty? aseq)\n      sum\n      (recur (rest aseq) (+ sum (first aseq))))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"( fn sum [seq] ( reduce (fn [a,b] (+ a b )) 0 seq ) )","problem":24,"user":"5026916fe4b0c969f0b056e1"},{"problem":24,"code":";#(apply + %)\napply +","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":24,"code":"(fn my-sum [a-seq] (if (empty? a-seq) 0 (+ (first a-seq) (my-sum (rest a-seq)))))","user":"5394c2dfe4b0b51d73faaed1"},{"problem":24,"code":"(fn [xs]\n  (loop [myseq xs sum 0]\n    (if (empty? myseq)\n      sum\n   (recur (rest myseq) (+ (first myseq) sum)))))","user":"58136dcfe4b0f478707a0610"},{"code":"(fn [x]\n  (reduce + x)\n  )","problem":24,"user":"52420e2fe4b076e5d3121f48"},{"code":"(fn x [arg] (apply + arg))","problem":24,"user":"4f0d1cf3535d0136e6c22314"},{"problem":24,"code":"(fn\n  [data]\n  (loop [data data\n         acc 0]\n    (if (empty? data)\n      acc\n      (recur (rest data) (+ acc (first data))))))","user":"55c461d3e4b0e31453f64999"},{"problem":24,"code":";#(apply (partial + 0) %)\n;#(apply + %)\t; + _ _ _ _ \n#(reduce + %)\t; more explicit intent","user":"5d9a49c4e4b0d3f9b434ad45"},{"problem":24,"code":"(fn sum\n  [s]\n  (if (empty? s)\n    0\n    (+ (first s) (sum (rest s)))))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn[l] (reduce + l))","problem":24,"user":"4ebc3974535dfed6da9c6d7f"},{"problem":24,"code":"(fn sm [l] (if (= [] l) 0 (+ (sm (rest l)) (first l))))","user":"5537982ae4b09218d5f44fcc"},{"problem":24,"code":"reduce (fn [sum current] (+ sum current)) 0","user":"56899934e4b0dcc4269f4080"},{"problem":24,"code":"(fn f [s]\n  (if (empty? s)\n    0\n    (+ (first s) (f (rest s)))\n  )\n)","user":"5ee2b376e4b029a2061bbe81"},{"code":"reduce (fn [x y] (+ x y)) 0","problem":24,"user":"4eb01582535d7eef30807335"},{"problem":24,"code":"(fn [a] (apply + a ) )","user":"5dcdb5cbe4b0b296f82db5b2"},{"code":"(fn [sequence]\n  (loop [coll (seq sequence)\n         suma 0]\n    (if (not (not-empty coll)) suma\n        (recur (rest coll) (+ suma (first coll))))))","problem":24,"user":"5213348ae4b0d32679a50652"},{"problem":24,"code":"#(reduce (fn [acc item]\n            (+ acc item)) 0 %1)","user":"5df0f338e4b093ff717275c6"},{"problem":24,"code":"(fn [s]\n  (loop [x s r 0]\n    (if (empty? x)\n      r\n      (recur (rest x) (+ r (first x))))))","user":"594cb88be4b07ddc2dafae6e"},{"problem":24,"code":"(fn [p1] (loop [a 0 p p1] (if (empty? p) a (recur (+ (first p) a) (rest p)))))","user":"54d95ce8e4b024c67c0cf74a"},{"code":"(fn sum-it-all-up-solution\n  [coll] ;; update args as needed\n  (reduce + 0 coll))","problem":24,"user":"50c113bee4b096f585049c37"},{"problem":24,"code":"(fn [coll] \n  (reduce \n   +\n   0 \n   coll))","user":"565d6d34e4b068f2fe63dc23"},{"code":"(fn sum \n  [x]\n    (if (empty? x)\n      0\n      (+ \n        (first x) \n        (sum (rest x)))\n    )\n\n)","problem":24,"user":"4f0df199535d0136e6c2231e"},{"problem":24,"code":"(fn [x]\n  (loop [x x acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (+ acc (first x))))))","user":"551a21ece4b091ff45eda993"},{"problem":24,"code":"(fn my-sum ([l] (my-sum l 0)) ([l sum] (if (= l []) sum (recur (rest l) (+ sum (first l))))))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn my-count\n  ([x] (my-count x 0))\n  ([x n] \n    (if (empty? x)\n      n\n      (my-count (rest x) (+ n (first x)))\n    )\n  )\n)","problem":24,"user":"4f073429535dcb61093f6c23"},{"code":"(fn [x]\n  ((fn [sum collection]\n    (if(= 0 (count collection))\n      sum\n      (recur (+ sum (last collection)) (pop (into [] collection)))\n    )\n  )0 x)\n  \n)","problem":24,"user":"52e27501e4b09f7907dd1435"},{"problem":24,"code":"(fn xxx [xs]\n  (reduce + 0 xs))","user":"59dec79ee4b01968742fed81"},{"problem":24,"code":"#(reduce (fn [a b](+ a b)) %)","user":"55edc088e4b0121d4835fde0"},{"code":"(fn [x] (loop [col x, i 0] (if (empty? col) i (recur (rest col) (+ i (first col))))))","problem":24,"user":"50d4c940e4b09cc622d65a71"},{"code":"(fn mysum [x]\n  (if (= (rest x) [])\n    (first x)\n    (+ (first x) (mysum (rest x)))))","problem":24,"user":"4f0369a2535dcb61093f6ab0"},{"problem":24,"code":"(fn [s] (reduce  + s))","user":"5fdb8657e4b05ac5b16ea133"},{"problem":24,"code":"#(loop [coll %1 sum 0]\n   (if (empty? coll)\n     sum\n     (recur (rest coll) (+ sum (first coll)))))","user":"5c813b27e4b0c8042a70ce22"},{"problem":24,"code":"(fn f [a] (if-not (empty? (rest a)) (+ (first a) (f (rest a))) (first a)))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn sumitup [x] (if (< (count x) 2) (first x) (+ (first x) (sumitup (rest x)))))","problem":24,"user":"52dc55fee4b09f7907dd13ce"},{"problem":24,"code":"#(loop [l % sum 0]\n\t(if (empty? l)\n\t\tsum\n\t\t(let [x (first l)] (\n\t\t\trecur (rest l) (+ sum x)\n\t\t))\t\n\t)\n)","user":"542d95f0e4b0dad94371f2b9"},{"problem":24,"code":"(fn[s](loop [s s r 0] (if (empty? s) r (recur (rest s) (+(first s) r)))))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [set] (reduce + 0 set))","problem":24,"user":"518ee4f9e4b0cd6ff51676a5"},{"code":"(fn [&args]\n  (apply + &args))","problem":24,"user":"52151220e4b0961f15ac4da7"},{"code":"(fn [seq]\n  ((fn [acc s]\n      (if-not s\n        acc\n        (recur (+ acc (first s)) (next s))))\n    0 seq))","problem":24,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn sumIt [x] (apply + x))","problem":24,"user":"518aec06e4b06da86c1973c2"},{"problem":24,"code":"(fn [listo] (reduce (fn [prev item] (+ prev item)) 0 listo))","user":"575aa61ae4b02ea11479934e"},{"problem":24,"code":"(fn [vect] (reduce + vect))","user":"555c5e04e4b0b056612e224b"},{"code":"(fn mysum [x] (if (seq x) (+ (first x) (mysum (rest x))) 0))","problem":24,"user":"53388e2de4b0e30313ee6c9c"},{"problem":24,"code":"(fn[data]\n    (reduce + data))","user":"53d10553e4b00fb29b22130f"},{"problem":24,"code":"#(loop [result 0 x %]                                                                                                                             \n        (if (empty? x)                                                                                                                                      \n          result                                                                                                                                            \n          (recur (+ result (first x)) (rest x))))","user":"5847cd7de4b089d5ab817eaa"},{"problem":24,"code":"(fn [l]\n  (loop [l l sum 0]\n    (if (empty? l)\n      sum\n      (recur (rest l) (+ sum (first l))))))","user":"59d1e9cfe4b0ef0a1e9b5b95"},{"problem":24,"code":"(fn sumItAllUp [lat] (reduce + lat))","user":"59368efbe4b02506e01a297d"},{"problem":24,"code":"(fn !\n  [arr]\n  (if (empty? arr) 0\n    (+ (first arr) (! (rest arr)))))","user":"576d6266e4b0979f89651563"},{"problem":24,"code":"(fn sum-it\n  [l]  \n  \n  (let [sumit (fn [acc s] (if (empty? s) acc (recur (+ acc (first s)) (rest s))))]\n  (sumit 0 l))\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":24,"code":"(fn [sq] (apply + sq))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":24,"code":"(fn sum-of-sequence [elements]\n  (apply + elements))","user":"60b98974e4b0e0fa5f1b4271"},{"problem":24,"code":"(fn [arg]\n    (apply + (seq arg)))","user":"5683fcafe4b0945ebc182aa8"},{"code":"(fn sm [coll] (reduce + 0 coll))","problem":24,"user":"4f193dab535d64f603146465"},{"problem":24,"code":"(fn foo \n  ([c]\n   (foo c 0)\n   )\n  ([c t]\n   (if (empty? c)\n     (-> t)\n     (foo (rest c) (+ t (first c)))\n    )\n   )\n)","user":"54f9f25de4b0cf870d9346fb"},{"code":"(fn [ns]\n  (loop [num-lst ns\n         total 0]\n    (if (empty? num-lst)\n        total\n        (recur (rest num-lst) \n               (+ (first num-lst) total)))))","problem":24,"user":"4f035bfd535dcb61093f6a8f"},{"code":"(fn [s]\n  (reduce (fn [a,b] (+ a b)) s)\n)","problem":24,"user":"4e8b1fa2535d65386fec2118"},{"problem":24,"code":"apply  #'+","user":"578f8a0ae4b0ebec4cfb7596"},{"problem":24,"code":"(fn [coll]\n  (reduce (fn [acc el] (+ acc el)) 0 coll))","user":"4e6459af535d8ccf87e9fe6b"},{"code":"(fn sum-seq-up [sequ]\n  (condp = sequ\n    (empty sequ) 0\n    (+ (first sequ) (sum-seq-up (rest sequ)))))","problem":24,"user":"5202c9b6e4b030ee0c5b2701"},{"problem":24,"code":"(\n\tfn function [var] \n  \t(\n    \treduce + var\n    )\n)","user":"548018e8e4b0c51c1f4d7333"},{"problem":24,"code":"(fn sum-all [coll]\n  (apply + coll))","user":"56714922e4b05957ce8c6107"},{"code":"(fn [sequence]\n  (reduce + sequence))","problem":24,"user":"4f17df72535d64f603146458"},{"problem":24,"code":"#(loop [acc 0\n        remainder %]\n   (if (empty? remainder)\n     acc\n     (recur (+ acc (first remainder))\n            (rest remainder)\n            )\n     )\n   )","user":"5a1fcc82e4b0ff51aa4b3293"},{"code":"(partial reduce + )","problem":24,"user":"5002ad40e4b0678c553fc42b"},{"problem":24,"code":"(fn [coll]\n   (reduce + coll))","user":"520e6d77e4b0101e4be6fcd5"},{"code":"#(loop [x (sequence %) y 0] (if (= (count x) 0) y (recur (rest x) (+ y (first x)))))","problem":24,"user":"4f75f498e4b0fbe0118ec567"},{"code":"(fn [ls] (reduce + ls))","problem":24,"user":"504db141e4b021508a333965"},{"problem":24,"code":"(fn [arg] (loop [sum 0 e arg] (if (empty? (rest e)) (+ sum (first e)) (recur (+ sum (first e)) (rest e)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn [x] (reduce ( fn [s,a] (+ s a)) 0 x))","problem":24,"user":"4daea587edd6309eace4d15a"},{"problem":24,"code":"(fn sum\n  ([x] (sum x 0))\n  ([x acc]\n    (if (empty? x)\n      acc\n      (recur (rest x) (+ acc (first x))))))","user":"5a9414eae4b0d174b936c72c"},{"code":"(fn mysum [x]\n  (apply + x))","problem":24,"user":"4fb4e279e4b081705acca2b3"},{"problem":24,"code":"(fn my-sum [s] (if (empty? s) 0\n          (+ (first s) (my-sum (rest s)))))","user":"58fdd7b7e4b0438e51c2cfc0"},{"code":";reduce #(+ % %2)\napply +","problem":24,"user":"511937e1e4b055cfb310d494"},{"code":"(fn [numbers]\n  (reduce + numbers)\n)","problem":24,"user":"4e8e5cc8535d65386fec2142"},{"code":"(fn mysum [l]\n  (if (= l '())\n    0\n    (+ (first l) (mysum (rest l)))))","problem":24,"user":"4ecaf637535d6d7199dd370c"},{"problem":24,"code":"#(apply + %)\n\n#_(reduce (fn[x y]\n               (+ x y)) %)\n#_(loop [lst % acc 0]\n (if(empty? lst)\n   acc\n   (recur (rest lst) (+ acc (first lst)))))\n;;#(reduce + %)","user":"52faf67ce4b047fd55837005"},{"problem":24,"code":"(fn [l] (reduce (fn [a b] (+ a b)) 0 l))","user":"553d1997e4b0a04f792994db"},{"code":"(fn [a_list] (reduce + a_list))","problem":24,"user":"533c9661e4b085b17e897d72"},{"code":"(partial reduce + 0)","problem":24,"user":"4ddbd934535d02782fcbe9fc"},{"problem":24,"code":"(fn mySum [x]\n  ((fn xsum [x s]\n     (if (empty? x)\n       s\n       (xsum (rest x) (+ (first x) s))\n       )\n     ) x 0)\n)","user":"556ddbeae4b09a3098a5250a"},{"problem":24,"code":"(fn [s]\n   (reduce (fn [a b] (+ a b)) 0 s))","user":"60cb3836e4b0e0fa5f1b4315"},{"code":"(fn s [coll]\n  (reduce + 0 coll))","problem":24,"user":"5252ee94e4b0541d1855b8db"},{"code":"(fn \n    [x y] (if (empty? y) x (recur (+ x (first y)) (rest y) ))\n) 0","problem":24,"user":"5053d193e4b0b1b9d1860ea5"},{"problem":24,"code":"(partial reduce #(+ %1 %2) 0)","user":"5447e08ce4b032a45b8693c3"},{"problem":24,"code":"(fn sum\n  ([sq] (sum sq 0))\n  ([sq acc]\n    (if (= 0 (count sq))\n      acc\n      (sum (rest sq) (+ (first sq) acc)))))","user":"5512c935e4b055c2f668d4b8"},{"code":"(fn troca [x] (if (= (first x) nil)\r\n                  0\r\n                  (+ (first x) (troca (rest x)))))","problem":24,"user":"50206641e4b0cb6ebc0a42f5"},{"problem":24,"code":"(fn sumItUp\n  [col]\n  (let [head (first col)\n        tail   (rest  col)]\n    (if (empty? tail)\n      head\n      (+ head (sumItUp tail)))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":24,"code":"(fn my-sum [list]\n  (if (empty? list)\n    0\n    (+ (first list) (my-sum (rest list)))))","user":"5a2d7f36e4b09cafd31c7f6e"},{"problem":24,"code":"(fn [numseq] (reduce + numseq))","user":"56bff105e4b060a8e693e3a4"},{"problem":24,"code":"(fn [coll] (reduce (fn [curr, nex] (+ curr nex)) coll))","user":"56de0db0e4b0ea9b8538f83a"},{"code":"(fn [items] (reduce + items))","problem":24,"user":"4e7d2686535db169f9c796c9"},{"code":"(fn t [l] (if (empty? l) 0  (+ (first l) (t (rest l)))))","problem":24,"user":"4f03c039535dcb61093f6b5e"},{"problem":24,"code":"#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (+ result (first c)) (rest c))))","user":"597b72ede4b02382a38ad1f9"},{"code":"(fn[ a-seq ]\n  (loop [ sum 0 the-seq a-seq ]\n    (if (= nil (first the-seq))\n      sum\n      (recur (+ sum (first the-seq) ) (rest the-seq)))))","problem":24,"user":"4f1f1a9d535d64f60314649d"},{"problem":24,"code":"(fn [x] (reduce (fn [acc e] (+ e acc)) 0 x))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":24,"code":"(fn [s]\n  (reduce + s)\n  )","user":"562fd7f6e4b0ab312c17ebe0"},{"problem":24,"code":"#(loop [sum 0\n       col %]\n   (if (empty? col)\n     sum\n     (recur (+ sum (first col)) (rest col))))","user":"542ce413e4b0dad94371f2ae"},{"problem":24,"code":"apply +'","user":"56903cb9e4b0dcc4269f40eb"},{"problem":24,"code":"(fn ok [a]\n  (reduce + 0 a))","user":"5ca26d3be4b048ec896c5b98"},{"code":"(fn sum-seq [xs]\n  (apply + xs))","problem":24,"user":"4e7dfd48535db169f9c796fa"},{"problem":24,"code":"(fn [arg] (apply + arg))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":24,"code":"(fn [xs] \n  (\n   reduce + 0 xs\n  ) \n)","user":"5faaab00e4b0fa27300f3dff"},{"problem":24,"code":"(fn [arg] (reduce + 0 arg))","user":"5e5d9e62e4b0fd0acd15866b"},{"code":"(fn [x] (reduce (fn [acc el] ( + el acc)) 0 x))","problem":24,"user":"5307e4ece4b02e82168697a9"},{"code":"#(\n  (fn sum [sq, sm]\n    (if \n      (= nil (first sq))\n         sm\n      (sum\n       (rest sq) (+ sm (first sq))\n      )\n    )\n  )\n  % 0\n)","problem":24,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [coll]\n    (apply + coll))","problem":24,"user":"51c2973ae4b0d204dbe2ca23"},{"code":"(fn [x]\n  (loop [l x\n         s 0]\n    (if-not (empty? l)\n        (recur (rest l) (+ s (first l)))\n      s\n    )\n  )\n)","problem":24,"user":"51ce3cd0e4b0e42293a22553"},{"code":"(fn sum-all [lat]\n  (reduce + lat))","problem":24,"user":"52725040e4b03e8d9a4a7427"},{"problem":24,"code":"(fn\n  [lst]\n  (reduce + lst))","user":"56df6498e4b0ca2494a095f8"},{"problem":24,"code":";#(reduce + %)\n(fn [list-of-num] (reduce + list-of-num))","user":"5a1679d9e4b0ff51aa4b31ca"},{"code":"(fn myfn [v] (if (= nil (peek (vec v))) 0 (+ (myfn (rest v)) (first v))))","problem":24,"user":"4f566178e4b0a7574ea71820"},{"code":"(fn sumIt [theSeq]\n    (if (= (count theSeq) 0)\n      0\n      (+ (first theSeq) (sumIt (rest theSeq)))))","problem":24,"user":"4f1c2336535d64f60314647f"},{"problem":24,"code":"(fn [l] (reduce + 0 (vec l)))","user":"58c54e2ee4b021aa9917ed3a"},{"code":"(fn [data]\r\n  (reduce +  data))","problem":24,"user":"4dbde951535d020aff1edf53"},{"code":"(fn sum-items [items]\n  (reduce + items))","problem":24,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":24,"code":"reduce (fn [acc ele] (+ acc ele)) 0","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn S\n  ([x]\n   (S x 0))\n  ([x acc]\n   (let [rx (rest x) fx (first x) afx (+ acc fx)]\n   \t(if\n   \t\t(= rx '())\n     \tafx\n     \t(S rx afx)))))","problem":24,"user":"50e9d21ce4b02d54280826cf"},{"problem":24,"code":"(fn [vs] (reduce + vs))","user":"5e41a67be4b01d43a70e8e56"},{"problem":24,"code":"(fn sum [sq]\n  (loop [sq sq cnt 0]\n    (if (empty? sq) cnt\n      (recur (rest sq) (+ (first sq) cnt)))))","user":"59b7120fe4b05c620303ca3b"},{"problem":24,"code":"(fn [sequence] (apply #'+ sequence))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [p] (reduce + p))","problem":24,"user":"525d44bfe4b0cb4875a45d6d"},{"code":"#(loop [cnt % acc 0]\r\n  (if (empty? cnt) acc\r\n    (recur (rest cnt) \r\n      (+ acc (first cnt)))))","problem":24,"user":"50997a2be4b0cae2931060b6"},{"problem":24,"code":"(fn sum\n  ([coll]\n   (sum (first coll) (next coll)))\n  ([acc coll]\n   (if (nil? coll)\n     acc\n     (sum (+ acc (first coll)) (next coll)))))","user":"56557d2de4b0f9d632dd8498"},{"problem":24,"code":"(fn  [x] \n  (loop [s 0,x1 x]\n    (if (empty? x1) s\n      (recur (+ s (first x1)) (rest x1)))))","user":"55486ee6e4b0a04f7929955a"},{"code":"(fn sum_up\n  [coll]\n    (reduce + (vec coll)))","problem":24,"user":"4e3bcccd535deb9a81d77f56"},{"problem":24,"code":"; (partial apply +)\nreduce +","user":"5547793be4b0a04f7929954c"},{"problem":24,"code":"#(reduce (fn [a b](+ a b)) 0 %)","user":"59406b94e4b069cdc2982bfd"},{"code":"(fn [sq]\n  (reduce + sq))","problem":24,"user":"4e52777f535d302ef430da76"},{"problem":24,"code":"(fn mySum [l]\n  (if (empty? l)\n  0\n  (+ (first l) (mySum (rest l)))))","user":"5d10e07ae4b02c15ef02197f"},{"code":"(fn sum-all [coll]\n  (reduce + coll))","problem":24,"user":"4ff695f8e4b0678c553fc380"},{"code":"(fn [num-sequence]\n  (loop [s num-sequence sum 0]\n    (if (= 1 (count s))\n      (+ (first s) sum)\n      (recur (rest s) (+ (first s) sum)))))","problem":24,"user":"513294fce4b039bac947cbb8"},{"problem":24,"code":"(fn[lst] (loop [lst lst\n                 cnt 0]\n              (if (empty? lst)\n              cnt\n              (recur (rest lst) (+ cnt (first lst))))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":24,"code":"apply (fn cnt\n         [x & xs]\n         (if (empty? xs)\n           x\n           (+ (apply cnt xs) x)))","user":"5dc64aafe4b02f9375f4e1c2"},{"problem":24,"code":"(fn sumUp [xs] \n  (if (empty? xs)\n    0\n    (+ (first xs) (sumUp (rest xs)))))","user":"5fa2b45ce4b0f0ebd91b77f5"},{"problem":24,"code":"(fn sum [x]\n  (if (empty? (rest x))\n    (first x)\n    (+ (first x) (sum (rest x)))))","user":"56874171e4b0dcc4269f405c"},{"code":"(fn f [xs]\n  (let [sum2 (fn [xs n]\n               (if (empty? xs)\n                 n\n                 (recur (next xs) (+ n (first xs)))))]\n    (sum2 xs 0)))","problem":24,"user":"4f9d9d89e4b0dcca54ed6d25"},{"code":"(fn [x]\n  (loop [lst x, sm 0]\n    (if (= (count lst) 0)\n      sm\n      (recur (butlast lst) (+ sm (last lst)))\n    )\n  )\n)","problem":24,"user":"50e84318e4b0ebbe794eb7e1"},{"problem":24,"code":"(fn ss [l] (if (first l) (+ (first l)  (ss (rest l))) 0))","user":"5800bbd5e4b0a837a8b30c44"},{"code":"(fn [s] (reduce (fn [a b] (+ a b)) 0 s))","problem":24,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn sum [s]\n  (if (empty? s) 0\n    (+ (first s) (sum (rest s)))))","problem":24,"user":"52c2f10de4b07a9af5792386"},{"problem":24,"code":"(fn [ns] (reduce + 0 ns))","user":"546d41bde4b00cfc9eacc18c"},{"problem":24,"code":"(fn [coll]\n  (reduce (fn [acc v] (+ acc v)) 0 coll))","user":"5954edcbe4b066ee0a44af15"},{"problem":24,"code":"; approach: reduce +\n(fn summer [seq]\n  (reduce + seq))","user":"6036b21ce4b0d5df2af222de"},{"problem":24,"code":"#(reduce (fn [acc item] (+ acc item)) 0 %)","user":"51ad808ee4b09397d5109784"},{"code":"(fn [more]\n  (apply + more))","problem":24,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":24,"code":"reduce (fn [count x](+ count x)) 0","user":"5dd95976e4b0948ae9d9ad9b"},{"problem":24,"code":"(fn my-sum [l]\n  (if (empty? l)\n    0\n    (+ (first l) (my-sum (rest l)))))","user":"551c6bcee4b07993ea3788df"},{"problem":24,"code":"(fn [x] (reduce (fn [y, z] (+ y z)) x))","user":"542aed70e4b0dad94371f284"},{"problem":24,"code":"(fn [col]\n  (reduce \n    (fn [a b] (+ a b))\n    0\n    col\n  )\n)","user":"57410964e4b05c31a32c085f"},{"problem":24,"code":"(fn [n]\n  (reduce + n)\n  )","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn [coll]\n    (loop [acc 0 coll coll]\n      (if (seq coll)\n        (recur (+ acc (first coll)) (rest coll))\n        acc)))","problem":24,"user":"4e5be681535d8a8b8723a2bc"},{"code":"(fn foo [s] (if (not (empty? (rest s))) (+ (first s) (foo (rest s))) (first s)))","problem":24,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":24,"code":"(fn sum [l]\n  (if (empty? l) 0 \n    (+ (first l) (sum (rest l)))))","user":"5dc80f78e4b02f9375f4e1d5"},{"code":"reduce +'","problem":24,"user":"52e42430e4b09f7907dd144c"},{"code":"(fn [sequence]\n  (loop [sum 0\n         sequence sequence]\n    (if (empty? sequence) sum\n      (recur (+ sum (first sequence)) (rest sequence)))))","problem":24,"user":"4e5a35fc535d8a8b8723a2a8"},{"code":"(fn s [x] (if (= x []) 0 (+ (first x) (s (rest x)))))","problem":24,"user":"5110b8bae4b04c71fce993f4"},{"code":"reduce #(+ %2 %1)","problem":24,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn sum-up [seq] (if (empty? seq) 0 (+ (first seq) (sum-up (rest seq)))))","problem":24,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn [l] (reduce #(+ %1 %2) l))","problem":24,"user":"4e919b43535dbda64a6f6afb"},{"problem":24,"code":"(fn sum\n      ([vals] (sum vals 0)) \n     ([vals accumulating-total]\n         (if (empty? vals)  \n          accumulating-total\n          (sum (rest vals) (+ (first vals) accumulating-total)))))","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":24,"code":"(fn soucet [s] (reduce + s))","user":"53ad2bbbe4b047364c044464"},{"problem":24,"code":"(fn [x] \n  (loop [s x, r 0]\n    (if (not= s ())\n      (recur (rest s) (+ r (first s)))\n      r\n\t)\n  )\n)","user":"52280a26e4b0186687e23a67"},{"code":"(partial apply +)\n\n;; (partial reduce +)","problem":24,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn sum[xi] (loop [s 0, x xi] (if (pos? (count x)) (recur (+ s (first x)) (rest x)) s)) )","problem":24,"user":"52aca6f3e4b0c58976d9ac89"},{"problem":24,"code":"(fn [lst] (\n  (fn helper [s acc]\n    (if (= (count s) 0)\n      acc\n      (helper (rest s) (+ (first s) acc))\n    )\n  )\n  lst 0))","user":"575b1440e4b02ea114799358"},{"code":"reduce (fn [sum v] (+ sum v)) 0","problem":24,"user":"4f0f36a7535d0136e6c22336"},{"problem":24,"code":"(fn [coll] (loop [xs (vec coll)\n                      sum 0]\n                 (if xs\n                   (let [x (first xs)]\n                     (recur (next xs) (+ sum x)))\n                   sum)))","user":"5c2692d2e4b07e362c2305c2"},{"problem":24,"code":"(fn f [l]\n  (if (= l [])\n    0\n    (+ (first l) (f (rest l)))))","user":"56eb3f9de4b04a395b9a0420"},{"code":"(fn [s] (loop [s s x 0] (if (empty? s) x (recur (rest s) (+ x (first s))))))","problem":24,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":24,"code":"(fn [my-seq]\n  (reduce + my-seq))","user":"5e563c88e4b027a2e10ac0f6"},{"problem":24,"code":"(fn [v]\n  (loop [col v sum 0]\n    (if (empty? col)\n      sum\n    (recur (rest col) (+ sum (first col))))))","user":"51be00cae4b0ff155d51d2b8"},{"problem":24,"code":"(fn [lis] (reduce #(+ %1 %2) lis))","user":"5a09f35fe4b0eab8c0448934"},{"code":"(fn [coll] (reduce (fn [n acc] (+ acc n)) coll))","problem":24,"user":"4fc4f668e4b081705acca362"},{"problem":24,"code":"#(loop [r %, sum 0] \n    (\n      if (= r '())\n      sum\n      (recur (rest r) (+ sum (first r)))\n    )\n)","user":"56f97711e4b07572ad1a88b2"},{"code":"(fn ss [x] (if (= nil (first x)) 0 (+ (first x) (ss (rest x)))))","problem":24,"user":"4ded582d535d08e6dec9fe0c"},{"code":"(fn [seq]\r\n  ((fn [sq sum]\r\n     (if (empty? sq)\r\n       sum \r\n       (recur (rest sq) (+ sum (first sq))))) seq 0))","problem":24,"user":"4e9528ef535dbda64a6f6b32"},{"code":"(fn f [l] (if (= l []) 0 (+ (first l) (f (rest l)))))","problem":24,"user":"4f369deae4b0e243712b1ecb"},{"code":";reduce #(+ %1 %2)\nreduce +","problem":24,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn sum [coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (+ (first coll) (sum (rest coll)))\n  )\n)","problem":24,"user":"4e6a79ca535d8ccf87e9feeb"},{"code":"(fn sum [l]\n  (if (empty? l)\n      0\n      (+ (first l) (sum (rest l)))))","problem":24,"user":"505024a4e4b0a02f9cffdeb4"},{"problem":24,"code":"(fn \n  [x]\n  (reduce + x)\n  )","user":"5c8bc8b4e4b048ec896c5978"},{"problem":24,"code":"(fn [lst]\n    ((fn [lst sum]\n    (if (= lst '())\n      sum\n      (recur (rest lst) (+ sum (first lst))))) lst 0))","user":"570708fce4b0b0fb43fd0687"},{"problem":24,"code":"(fn [s] (reduce (fn [acc item] (+ acc item)) 0 s ))","user":"582dc562e4b051871117bfcb"},{"problem":24,"code":"(fn [coll] (loop [coll coll acc 0] (if (empty? coll) acc (recur (rest coll) (+ acc (first coll))))))","user":"4e268c6e535deb9a81d77ef4"},{"problem":24,"code":";reduce #(+ %1 %2)\n;apply +\nreduce +","user":"562f2985e4b0ab312c17ebc5"},{"problem":24,"code":"(fn [x]\n     (loop [sum 0, list x]\n       (if (empty? list)\n         sum\n         (recur (+ sum (first list)) (next list)))))","user":"56669819e4b0e91d5f5c5674"},{"problem":24,"code":"#(reduce (fn [sum val] (+ sum val)) 0 %)","user":"5628e9f4e4b00e49c7cb47f2"},{"code":"(fn [args] (apply + args))","problem":24,"user":"51607eb0e4b009fba0926e27"},{"code":"(fn [seqn]\n  (apply + seqn))","problem":24,"user":"4e8944b6535d4ef0aa30db98"},{"problem":24,"code":"(fn summer [s]\n  (reduce + s)\n  )","user":"55f8fd70e4b03cbcff9738bc"},{"problem":24,"code":"(fn my-sum\n  [l]\n  (if (empty? l)\n    0\n    (+ (first l) (my-sum (rest l)))))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn [coll]\n  (apply + coll))","problem":24,"user":"4ff72b8ce4b0678c553fc38b"},{"problem":24,"code":"(fn sum ([sq] (sum sq 0))\n  \t\t([sq acc] (if (empty? sq) acc (sum (rest sq) (+ acc (first sq))))))","user":"5d8a3b3ee4b0915913b1d3c8"},{"code":"(fn [x] (loop [sq x total 0] (if (empty? sq) total (recur (rest sq) (+ total (first sq))))))","problem":24,"user":"51b77c9be4b0d906fcd71d37"},{"code":"(fn [x] (\n  (fn foldr [func, sq, initial] \n    (if (= (rest sq) '())\n      (func (first sq) initial)\n      (func (first sq) (foldr func (rest sq) initial))\n     )\n   ) (fn [a,b] (+ a b)) x 0))","problem":24,"user":"4f11dea7535d64f603146425"},{"problem":24,"code":"(fn mysum [coll] (if (> (count coll) 0) (+ (first coll) (mysum (rest coll))) 0))","user":"54cb3497e4b057c6fda3a272"},{"problem":24,"code":"(fn sm [xs] \n (if (= xs [])\n  0\n  (+ \n   (first xs) \n   (sm (rest xs))\n   )\n )\n)","user":"58711e7be4b01531a375e9f9"},{"problem":24,"code":"(fn my-sum [s]\n  (if (empty? s) 0 (+ (first s) (my-sum (rest s)))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [x] ( reduce + x ))","problem":24,"user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn sum[coll]\n (\n  (fn builder[coll sum]\n     (if (= coll '()) \n       sum\n       (builder (rest coll) (+ sum (first coll)))\n     )\n  )\n  coll 0\n )\n)","problem":24,"user":"512ec712e4b029b11c040781"},{"problem":24,"code":"#(reduce (fn [cur n]\n          (+ cur n))\n        0\n        %)","user":"5ba28f36e4b0a20761a233c4"},{"code":"(fn [x] \n  (reduce + 0 x))","problem":24,"user":"4f82f1b9e4b033992c121c0f"},{"code":"reduce +\n\n; apply +\n\n; #(reduce + 0 %)","problem":24,"user":"52810ceae4b0757a1b17141b"},{"code":"(fn sum [sqs]\n  (if (= 1 (count sqs)) \n    (first sqs)\n    (+ (first sqs) (sum (next sqs)))))","problem":24,"user":"4ef2eb4d535dced4c769f226"},{"code":"#(reduce (fn [t v] (+ t v)) 0 %)","problem":24,"user":"513fab65e4b00f13ea1bd891"},{"problem":24,"code":"(fn rev\n  ([s] (rev s 0))\n  ([s m] \n  (if (empty? s) \n    m\n    (recur (rest s) (+ (first s) m))\n  ))\n)","user":"5cc1584de4b0ccb0619627ad"},{"code":"#(loop [s 0\n        v (conj  (vec %) 0)]\n    (if (empty? (rest (vec v))) s (recur (+ (first v) s) (rest (vec v)))))","problem":24,"user":"4e1fe800535d04ed9115e811"},{"problem":24,"code":"(fn\n  [collection]\n  (reduce + collection)\n  )","user":"5aefd746e4b0cc2b61a3bc3d"},{"code":"(fn c [x]\n  (if (not (empty? x))\n    (+ (first x) (c (rest x)))\n  0)\n)","problem":24,"user":"4ed87228535d10e5ff6f52fa"},{"problem":24,"code":"(fn sum_all [my_seq]\n  (if (= (count my_seq) 0)\n    0\n    (+ (first my_seq) (sum_all (rest my_seq)))\n    ))","user":"54060ae8e4b0addc1aec668e"},{"code":"(fn ssum\n  ([s] (ssum 0 s))\n  ([a s] (if (empty? s) a (+ (first s) (ssum a (rest s)))))\n)\n0","problem":24,"user":"50b8de6ce4b0cba0e598b652"},{"problem":24,"code":"(fn sum [l] (if (= (rest l) '()) (first l) (+ (first l) (sum (rest l)))))","user":"53f79b66e4b0de5c41848563"},{"problem":24,"code":"(fn\n  [col]\n  (loop [c col x 0]\n    (if (first c)\n      (recur (rest c) (+ x (first c)))\n      x)))","user":"590620e1e4b047aa04b1992c"},{"code":"(fn [se] (reduce + 0 se))","problem":24,"user":"5315d4bfe4b08068f379ed37"},{"code":"(fn [ns]\n  (reduce + ns))","problem":24,"user":"53576356e4b04ce2eb3ed27a"},{"problem":24,"code":"(fn\n  [coll]\n  (reduce + 0 coll))","user":"542098afe4b01498b1a71aa7"},{"problem":24,"code":"(fn [l]\n  ((fn [r a]\n    (if (= r '()) a (recur (rest r) (+ (first r) a))))\n     l 0))","user":"53aaaf7ae4b047364c044444"},{"code":"( fn [l] (reduce + l))","problem":24,"user":"51469a3ae4b04ef915e3731b"},{"code":"#(reduce + (flatten (seq %)))","problem":24,"user":"52387f46e4b0fae3832e9a07"},{"problem":24,"code":"(fn [input]\n  (loop [in input\n         acc (int 0)]\n    (if (empty? in)\n      acc\n      (recur (rest in) (+ acc (first in))))))","user":"577ad824e4b0d3393e5deb08"},{"problem":24,"code":"(fn sum-all-seq [s]\n  (reduce + s))","user":"5c3527a6e4b0d62ef62d9f60"},{"problem":24,"code":"(fn foo [s]\n  (if (= (count s) 0) 0\n  (+ (first s) (foo (rest s)))))","user":"561d506ee4b064ca9f4b16aa"},{"code":"(fn f [l] (case l [] 0 (+ (first l) (f (rest l)))) )","problem":24,"user":"51cbc435e4b08d8387cbeddd"},{"problem":24,"code":"(fn mysum [sq]\n  (if (empty? sq)\n    0\n    (+ (first sq) (mysum (rest sq)))\n  )\n)","user":"5bcc304ce4b07a9b28b1010c"},{"problem":24,"code":"(fn [sum-me]\n\t(loop [[x & xrest :as X] (seq sum-me) sum 0]\n\t\t(if (seq X) \n\t\t\t(recur xrest (+ sum x)) \n\t\t\tsum)))","user":"564d02cde4b0284900eef679"},{"problem":24,"code":"(fn [arg] (reduce + arg))","user":"58376b71e4b089d5ab817d18"},{"code":"(fn c [l] (if (not (seq l)) 0 (+ (first l) (c (rest l)))))","problem":24,"user":"53638ed2e4b0243289761e5b"},{"code":"(fn [seq] (reduce #(+ %1 %2) seq))","problem":24,"user":"4fe89efae4b07c9f6fd12c5b"},{"code":"#(reduce  +  0 %)","problem":24,"user":"4e6f8d36535d5021c1a89621"},{"code":"(fn [x]\n  (loop[acc 0 seqs x]\n    (if(empty? seqs)\n      acc\n      (recur (+ acc (first seqs))(rest seqs)))))","problem":24,"user":"521dad9be4b050d5da0427f9"},{"code":"(fn sum-up [v]\n  (if (empty? v)\n    0\n    (+ (first v) (sum-up (rest v)))))","problem":24,"user":"516282c3e4b0e6d3c4734711"},{"problem":24,"code":"(fn\n  [seq]\n  (reduce + seq)\n  )","user":"5736b126e4b0cd1946bd1037"},{"problem":24,"code":"(fn([lst] (reduce + lst)))","user":"54244c77e4b01498b1a71ae4"},{"code":"(fn [l]\n  (reduce (fn [a b] (+ a b)) l))","problem":24,"user":"4e6f2a1e535d5021c1a89619"},{"problem":24,"code":"(fn mySum\n  [sequence]\n  (reduce \n   (fn [sum curr]\n     (+ sum curr))\n   0       \n   sequence))","user":"54e009dce4b024c67c0cf7b2"},{"code":"(fn t [x] (loop [i (vec x) counter 0] (if (= [] i) counter (recur (rest i) (+ (first i) counter)))))","problem":24,"user":"5315b53ee4b08068f379ed31"},{"problem":24,"code":"(fn sum [collection]\n  (reduce + collection))","user":"5712418fe4b09c608db70455"},{"code":"(fn [list]\n  (reduce + 0 list))","problem":24,"user":"5228b015e4b0186687e23a8a"},{"code":"(fn [seq]\n    (reduce (fn [c b] (+ c b)) 0 seq))","problem":24,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":24,"code":"(fn sum-up [s]\n  (reduce + s))","user":"5f2ab452e4b033932238a656"},{"code":"(fn [ret fun col]\n  (if (= '() col)\n  ret\n  (recur (fun (first col) ret) fun (rest col))))\n0 +","problem":24,"user":"50bfe725e4b080409b860f26"},{"problem":24,"code":"(fn [x]\n  (loop [one x result 0]\n    (if (empty? one)\n      result\n      (recur (rest one) (+ result (first one))))))","user":"5936a67de4b02506e01a2982"},{"code":"(fn foo [list & [acc]]\n  (if (= nil acc)\n      (foo list 0)\n    (if (= [] list)\n        acc\n      (foo (rest list) (+ acc (first list))))))","problem":24,"user":"505cc50ce4b0e6aca564be00"},{"problem":24,"code":"; (fn add-all [in]\n;   (if (= '() in)\n;     0\n;     (+ (first in) (add-all (rest in)))))\napply +","user":"57fa6f2ee4b0d3187e900962"},{"code":"(fn [s]\n  (apply + s))","problem":24,"user":"4efb92ce535dced4c769f27a"},{"problem":24,"code":"(fn SumItAllUp\n  ([collection]\n   (SumItAllUp collection 0))\n  ([collection sum]\n    (if (empty? collection)\n      sum\n      (SumItAllUp (rest collection) (+ (first collection) sum))) \n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":24,"code":"(fn [oldList]\n  (loop\n    [sum 0\n     l oldList]\n    (if (empty? l)\n      sum\n      (recur (+ sum (first l)) (rest l)))))","user":"58248186e4b051871117bec6"},{"problem":24,"code":"#(reduce + %\n)","user":"5ccee75ae4b0ccb0619628bc"},{"problem":24,"code":"(fn [xs]\n  (loop [xs xs\n         result 0]\n    (if (empty? xs)\n      result\n      (recur (rest xs)\n             (+ (first xs) result)))))","user":"59384ec3e4b02506e01a29c7"},{"problem":24,"code":"(fn [xs](apply + xs))","user":"55597b84e4b0deb715856e36"},{"code":"(fn sum [x] (if (= (count x) 0)\n            0\n            (+ (sum (rest x)) (first x))))","problem":24,"user":"4e6cf521535de274dd8d818b"},{"problem":24,"code":"(fn [data]\n  (reduce + 0 data))","user":"5bcee7d9e4b0e9689409ee22"},{"problem":24,"code":"(fn sequence-sum [incoming-list] (if (empty? incoming-list) 0 (+ (first incoming-list) (sequence-sum (rest incoming-list)))))","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":24,"code":"(fn sumAll\n    [lst]\n    (reduce + lst))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":24,"code":"; stolen idea: #(apply + %)\nreduce +","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"#(reduce (fn [x y] (+ x y)) 0 %1)","problem":24,"user":"50aa60bee4b056ee01935865"},{"problem":24,"code":"(fn [coll]\n  (loop [acc 0 rem coll]\n    (if (nil? (seq rem)) acc\n        (recur (+ acc (first rem)) (rest rem)))))","user":"5d126728e4b02c15ef02199a"},{"problem":24,"code":"(fn sum [col] \n  (if (not-empty col)\n    (+ \n     (first col) \n     (sum (rest col))\n    )\n    0\n  )\n)","user":"57cc7d96e4b0c746388ab882"},{"code":"(partial\n  (fn sum [counter x]\n    (if\n      (empty? x)\n      counter\n      (sum (+ counter (first x)) (rest x))))\n  0)","problem":24,"user":"508fd72ee4b0ea685a20f76c"},{"code":"(fn [s] (\n  (\n      fn [ss total] (\n          if (empty? ss) total (recur (rest ss) (+ total (first ss)))\n      )              \n  )\n  s\n  0\n))","problem":24,"user":"538de1ede4b0b51d73faae77"},{"problem":24,"code":"(fn [s] (reduce (fn [sum el] (+ sum el)) 0 s))","user":"5b7ec039e4b047b03b20375d"},{"code":"(fn [s1]\n  (loop [sq s1 sum 0]\n    (let [curr (first sq)]\n      (if (= curr nil) sum\n          (recur (rest sq) (+ sum curr))))))","problem":24,"user":"4e7dbe0c535db169f9c796e3"},{"code":"#( reduce (fn [s e] (+ e s)) %)","problem":24,"user":"50a3b55be4b0ceace084d494"},{"problem":24,"code":"(fn foo [s] (if (next s) (+ (first s) (foo (next s))) (first s)))","user":"559e7848e4b08a52bd4f97d4"},{"problem":24,"code":"(fn sum-all [xs] \n (reduce + xs))","user":"54f06aede4b024c67c0cf896"},{"problem":24,"code":"(fn sum [n] \n    (reduce + n))","user":"6076ba65e4b069485764de61"},{"problem":24,"code":"(fn f [arr] (if (= arr '()) 0 (+ (first arr) (f (drop 1 arr)))))","user":"5e0596d5e4b0a607a9a45d7d"},{"problem":24,"code":"(fn [s]\n  (reduce\n    (fn [a i] (+ a i))\n   0 s))","user":"55d8db41e4b0e31453f64abf"},{"code":"(fn [l]\n  (reduce + l))","problem":24,"user":"4ed92fd6535d10e5ff6f5300"},{"code":"(fn [x] \n  (loop [cnt 0 nb x] \n    (if (= (count nb) 0) \ncnt \n(recur (+ (first nb) cnt) (rest nb) ))))","problem":24,"user":"4e36e647535deb9a81d77f36"},{"problem":24,"code":"(fn \n  [x]\n  \t(reduce + x)\n )","user":"56cdda13e4b0ea9b8538f752"},{"problem":24,"code":"(fn problem23-reverse-seq [seq]\n  (reduce + seq))","user":"57717915e4b0979f896515b3"},{"code":"(fn [x] (loop [s x r 0] (if (empty? s) r (recur (drop 1 s) (+ (first s) r)))))","problem":24,"user":"523bc0e6e4b07becd5be21f9"},{"code":"(fn [coll]\n  (loop [in coll s 0]\n    (if (empty? in)\n      s\n      (recur (rest in) (+ s (first in))))))","problem":24,"user":"534e60c2e4b084c2834f4ab2"},{"problem":24,"code":"#(reduce (fn [ac x] (+ ac x)) %)","user":"54595168e4b01be26fd74628"},{"problem":24,"code":"(fn red [vect]\n  (reduce + vect))","user":"573b487de4b0cd1946bd10a1"},{"problem":24,"code":"(fn foo\n  [a]\n  (loop [xs a\n         acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (+ (first xs) acc)))))","user":"545cfbb0e4b01be26fd74669"},{"code":"(fn my-sum [xs] (if (empty? xs) 0 (+ (first xs) (my-sum (rest xs)))))","problem":24,"user":"52c42f6be4b0c2d177d620d1"},{"problem":24,"code":"(fn [x] (apply + (seq x)))","user":"4e6a51a8535d8ccf87e9fec7"},{"problem":24,"code":"(fn s [l]\n  (if (= (count l) 0)\n    0\n    (+ (first l) (s (rest l)))))","user":"503777a4e4b0af0658af77ac"},{"code":"(fn [col]\n  ((fn rec [col sum]\n    \t (if (= col ())\n       \tsum\n       \t(rec (rest col) (+ sum (first col))))) col 0))","problem":24,"user":"511f656ae4b085952a83535e"},{"problem":24,"code":"#(reduce (fn [a c] (+ a c)) 0 %)","user":"5ddd7359e4b0948ae9d9adc5"},{"problem":24,"code":"(fn my-sum [s]\n    (if-not (first s)\n      0\n      (+ (my-sum (rest s)) (first s))\n    ) \n )","user":"549eeda9e4b0f3d1d8e70faa"},{"problem":24,"code":"(fn custom-sum [seq]\n  (letfn [(inner-sum [seq current]\n            (if (empty? seq)\n              current\n              (recur (rest seq) (+ (first seq) current))))]\n    (inner-sum seq 0)))","user":"5508b405e4b06e50f9beb110"},{"code":"(fn sum-nums [data]\n  (reduce (fn [acc x] (+ acc x)) 0 data))","problem":24,"user":"53333e7be4b019098a6f8b7e"},{"code":"(fn [s] (reduce #(+ %1 %2) s))","problem":24,"user":"4e5676b2535d8a8b8723a282"},{"problem":24,"code":"(fn sum-seq [seq]\n     (if (= (first seq) nil)\n     (+ 0 0)\n     (+ (first seq) (sum-seq (rest seq)))))","user":"56ffeafee4b08d47c97781c2"},{"code":"(fn [s]\n (reduce + s))","problem":24,"user":"53813189e4b06839e8705ec9"},{"problem":24,"code":"(fn [v] (apply + v))","user":"54d31cf1e4b0e8a36923e600"},{"problem":24,"code":"(fn sum [x](cond\n            (= (rest x) '())(first x)\n            :else (+ (sum (rest x)) (first x) )))","user":"5cb79c51e4b026601754b970"},{"problem":24,"code":"(fn sum-it-all [in]\n  (loop [curr-seq (seq in) sum 0]\n  \n  (if curr-seq\n    (recur (next curr-seq) (+ sum (first curr-seq)))\n    sum))\n  )","user":"5b107263e4b0cc2b61a3be22"},{"problem":24,"code":";reduce +\napply +","user":"53838b9ee4b06839e8705ee1"},{"code":"(fn sum [coll]\n  (if (empty? coll)\n    0\n    (+ (first coll) (sum (rest coll)))))","problem":24,"user":"512044bbe4b0e88f5a20c40d"},{"problem":24,"code":"#(reduce + %)\n\n;apply +","user":"55b42706e4b01b9910ae297b"},{"code":"(fn aa [x] \n  (if (= x '())\n    0\n  (+ (first x) (aa (rest x)))))","problem":24,"user":"52e9dbe5e4b09f7907dd14b4"},{"code":"(fn [l]\r\n  (reduce + l)\r\n)","problem":24,"user":"4e6e10d8535d5021c1a895fd"},{"problem":24,"code":"(fn [e] (reduce + e))","user":"5964f9b0e4b069c0a1a19778"},{"problem":24,"code":"(fn add [s] (reduce + s))","user":"5e380e72e4b01d43a70e8db0"},{"problem":24,"code":";;(fn [x] (reduce + x))\n#(reduce + %)","user":"580517d4e4b0a837a8b30cb9"},{"code":"(fn [lst]\n  ((fn [currlst sum]\n     (if (= () currlst)\n       sum\n       (recur (rest currlst) (+ sum (first currlst)))))\n   lst 0))","problem":24,"user":"517fcd45e4b073af738d8b4a"},{"code":"(fn [s]\n  (loop [ms s mx (count s) n 0]\n    (if (= mx 0)\n        n\n        (recur (rest ms) (dec mx) (+ (first ms) n)))))","problem":24,"user":"4e9629c2535dbda64a6f6b3f"},{"problem":24,"code":"(fn thesum [ls]\n  (if (and (number? (first ls)) (> (count ls) 0))\n    (+ (first ls) (thesum (rest ls)))\n    0))","user":"53ed1778e4b0d648e757f4bd"},{"code":"reduce  +","problem":24,"user":"4f75469ee4b0fbe0118ec55a"},{"problem":24,"code":"(fn sum_things [things] (\n                         if (= things '())\n                         0\n                         (+ (sum_things (rest things)) (first things))\n                         )\n  )","user":"58e8014be4b056aecfd47ce1"},{"problem":24,"code":"(fn sum-list [lst] (if (empty? lst) 0 (+ (first lst) (sum-list (rest lst)))))","user":"5e010c58e4b0a607a9a45d33"},{"code":"(fn [x] (loop [lst x\n               sum 0]\n          (if (empty? lst)\n            sum\n            (recur (rest lst) (+ sum (first lst))))))","problem":24,"user":"5139656ce4b0a5db03d727e3"},{"code":"(fn [seqq] (reduce + 0 seqq))","problem":24,"user":"50211a53e4b0ef1d2d4433b9"},{"problem":24,"code":"(fn sun [x] (if (= x []) 0 (+ (first x) (sun (rest x)))))","user":"5a4a210ce4b05d388ecb6b75"},{"problem":24,"code":"(fn [ll]\n  (loop [ll ll\n         sum 0]\n    (if (= '() ll)\n    sum\n    (recur (rest ll) (+ sum (first ll))))))","user":"54297741e4b01498b1a71b39"},{"code":"(fn [s]\n  ((fn [x sum]\n    (if (= '() x)\n      sum\n      (recur (rest x) (+ sum (first x)))))\n  (seq s) 0))","problem":24,"user":"4e6f7178535d5021c1a8961c"},{"code":"(fn sum\n    ([n]\n        (sum n 0))\n    ([n acc]\n        (if  (empty? n)   acc\n             (recur (rest n) (+ acc (first n))))))","problem":24,"user":"4e51fccf535d302ef430da6b"},{"problem":24,"code":"(fn sum [x]\n  (if (empty? x) 0\n    (+ (first x) (sum (rest x)))))","user":"5b1bde2ce4b03cfeda66ece6"},{"code":"(fn doit [x] (if (not-empty x) (+ (first x) (doit (rest x))) 0))","problem":24,"user":"52cd882ee4b07d0d72b27378"},{"problem":24,"code":"(fn [arg1]\n  (loop [x arg1 y 0]\n    (if (empty? x)\n      y\n      (recur (rest x) (+ (first x) y))\n    )\n  )\n)","user":"588b1eb5e4b05c141a256071"},{"problem":24,"code":"(fn [my-seq] (apply + my-seq))","user":"5d520cabe4b0776584bd6f66"},{"code":";#(reduce + %)\n(fn [x] (reduce + x))","problem":24,"user":"501b9fcae4b070595fd3c635"},{"problem":24,"code":"#(loop [lst %, sum 0]\n\t(if (seq lst)\n      (recur (rest lst) (+ sum (first lst)))\n      sum\n      )\n   )","user":"56263f3fe4b00e49c7cb47bc"},{"problem":24,"code":"(fn sum-it [coll]\n  (reduce + coll))","user":"54c671b7e4b045293a27f62d"},{"code":"(fn [list] \n  ((fn sumlist [list sum]\n      (if (empty? list) sum\n        (sumlist (rest list) (+ sum (first list)))))\n  list 0))","problem":24,"user":"4f0f3830535d0136e6c22338"},{"problem":24,"code":"(fn [coll] (reduce (fn [acc c] (+ acc c)) 0 coll))","user":"57f2bf56e4b0511f1d294df8"},{"problem":24,"code":"#(loop [x %\n        y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) \n            (+ y (first x)))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":24,"code":"(fn f [li]\n  (if (empty? li)\n    0\n  \t(+ (first li) (f (rest li)))))","user":"55de6fb4e4b050e68259b3e1"},{"problem":24,"code":"(fn get-sum [& args]\n  (let [lst (nth args 0)\n        acc (nth args 1 0)]\n    (if (nil? (first lst))\n      acc\n      (get-sum \n       (rest lst) (+ acc\n                     (first lst))))))","user":"55f05015e4b06e875b46ce22"},{"problem":24,"code":"(fn sum [sq]\n  (if (empty? sq)\n    0\n    (+ (first sq) (sum (rest sq)))))","user":"5e33e399e4b0650de70e2b11"},{"code":"#(reduce + (vec %))","problem":24,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":24,"code":"(fn [x] (reduce (fn [v it] (+ v it)) 0 x))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":24,"code":"(fn [seq]\n  (reduce #(+ %1 %2) seq))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn [x]\n  (reduce (fn [a b] (+ a b)) x)\n)","problem":24,"user":"4e340525535deb9a81d77f27"},{"code":"(fn sum [seq]\n  (if (= seq '())\n    0\n    (+ (sum (rest seq)) (first seq))))","problem":24,"user":"52158e69e4b0bf4bffd29c9f"},{"problem":24,"code":"(fn sumitup [coll]\n  (reduce + coll))","user":"58e63de2e4b056aecfd47cad"},{"code":"(fn [xs]  (reduce + 0 xs))","problem":24,"user":"52d829a8e4b09f7907dd1389"},{"problem":24,"code":"(fn [v] (reduce (fn [a b] (+ a b)) 0 v))","user":"56308326e4b073c1cf7a9be9"},{"problem":24,"code":"(fn my-sum2 [x]\n  (reduce #(+ %1 %2) 0 x))","user":"5688a01be4b0dcc4269f406d"},{"problem":24,"code":"(fn [coll] (reduce (fn [acc, e] (+ acc e)) 0 coll))","user":"596e2267e4b069c0a1a19860"},{"problem":24,"code":"(fn [v] (reduce (fn [x y] (+ x y)) v))","user":"5a7ae674e4b03baeef9276d5"},{"problem":24,"code":"(fn own-sum [x]\n     (if (= (count x) 1)\n       (first x)\n       (+ (first x) (own-sum (rest x)))))","user":"5f23efc8e4b0f565ad99828f"},{"code":"(fn [a-seq] (reduce + a-seq))","problem":24,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [numbers] (apply + numbers))","problem":24,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [c] (reduce + c))","problem":24,"user":"4e690d86535d8ccf87e9fe96"},{"code":"reduce #(+ %1 %2) 0","problem":24,"user":"4e1ec17a535d04ed9115e80a"},{"code":"(fn my-rev [x]\n  (loop [x x acc 0]\n    (if (empty? x)\n      acc\n      (recur\n        (rest x)\n        (+ (first x) acc)))))","problem":24,"user":"535a170ae4b04ce2eb3ed2a3"},{"problem":24,"code":"(fn sumseq\n  ([s] (sumseq s 0))\n  ([s acc] (if (empty? s)\n             acc\n             (sumseq (rest s) (+ (first s) acc)))))","user":"597a7418e4b02382a38ad1e9"},{"problem":24,"code":"(fn sum-it-up [list] (reduce + list))","user":"5deab868e4b0986d99407fa1"},{"problem":24,"code":"(fn\n  [col]\n  (reduce (fn [x s]\n            (+ x s)) 0 col))","user":"55a7e096e4b0988bba2ad934"},{"problem":24,"code":"(fn sum [coll] (if (first coll) (+ (first coll) (sum (rest coll))) 0))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn my-count [x]\n  (if (empty? x)\n    0\n    (reduce + x)\n  )\n)","problem":24,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn sum [s]\n  (cond (empty? s) 0\n        :else (+ (first s) (sum (rest s)))))","problem":24,"user":"5123f099e4b02c3f2a072cca"},{"code":"(fn [x]\r\n  ((fn [y sum]\r\n    (if (empty? y)\r\n        sum\r\n        (recur (rest y) (+ (first y) sum))))\r\n  x 0))","problem":24,"user":"4e73a9dc535dff18050a9c77"},{"problem":24,"code":"#(reduce\n  (fn [a b] (+ a b))\n  %)","user":"582fd406e4b051871117bff9"},{"problem":24,"code":"(fn [seq] (reduce + seq)   )","user":"60630af9e4b069485764ddbc"},{"problem":24,"code":"(fn my-sum\n  ([xs] (my-sum xs 0))\n  ([xs acc]\n   (if (empty? xs)\n     acc\n     (recur (rest xs) (+ acc (first xs))))))","user":"5d3e66d4e4b01671435dbd72"},{"problem":24,"code":"(fn suma [lst]\n  (reduce + lst)\n)","user":"5a984657e4b0d174b936c78a"},{"problem":24,"code":"#(reduce(fn[acc e](+ acc e)) %)","user":"5db1e852e4b010eb3c36cd0a"},{"problem":24,"code":"(fn SumW [x] (reduce + (into [] x)))","user":"5b69baf9e4b0c6492753e78f"},{"problem":24,"code":"(fn [s]  (loop [init 0\n                  sq s]\n                 (if (seq sq)\n                   (recur (+ (first sq) init) (next sq))\n                   init)))","user":"56d6e165e4b0ea9b8538f7d3"},{"problem":24,"code":"(fn [seq]\n   (reduce + seq))","user":"5c7d590ae4b0d597f478caaa"},{"code":"(fn [lst]\n    (let [sumof (atom 0)]\n    (letfn [(sumit [sequence]\n              (if (empty? sequence)\n                @sumof\n                (do (swap! sumof + (first sequence))\n                    (sumit (rest sequence)))))]\n      (sumit lst))))","problem":24,"user":"4eb6f065535d7eef30807372"},{"code":"(fn[x](reduce #(+ %1 %2) x))","problem":24,"user":"529952a4e4b02ebb4ef75081"},{"problem":24,"code":"(fn my-sum\n    [xs]\n    (loop\n        [xs xs\n         sum 0]\n        (if (empty? xs)\n            sum\n            (recur (rest xs) (+ sum (first xs))))))","user":"5a8c12dfe4b05369db4d24f7"},{"code":"(fn [seq-in] (apply + seq-in))","problem":24,"user":"51a61484e4b0740bfd1afd1e"},{"problem":24,"code":"(fn om [seqs]\n  (if (empty? seqs)\n    0\n    (+ (first seqs) (om (rest seqs)))))","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [a-seq]\n  (reduce + a-seq))","problem":24,"user":"531dc21be4b08068f379edb1"},{"problem":24,"code":"(fn sumseq\n  ([nums] (sumseq nums 0))\n  ([nums sum]\n   \t(if (empty? nums)\n    \tsum\n      \t(sumseq (rest nums) (+ sum (first nums)))\n    )\n  )\n)","user":"5658c25fe4b00d3155796110"},{"problem":24,"code":"#(loop [x % r 0] (if (empty? x)r (recur (rest x) (+ r (first x)))))","user":"5db68091e4b010eb3c36cd3a"},{"problem":24,"code":"(fn siap [l]\n  (if (empty? l)\n    0\n  \t(+ (first l) (siap (rest l)))))","user":"5eec1001e4b07c55ae4a0502"},{"code":"(fn [myseq] (apply + myseq))","problem":24,"user":"4f9fd450e4b0dcca54ed6d3d"},{"code":"#(reduce (fn [acc y] (+ acc y)) %)","problem":24,"user":"5080a9d3e4b01a93d3f38e4a"},{"problem":24,"code":"(fn sum [xs] (reduce + 0 xs))","user":"53b890e1e4b047364c0444df"},{"code":"(fn [x] (reduce + 0 x))","problem":24,"user":"4df54fd9535d08e6dec9fe30"},{"problem":24,"code":"(fn [i] (apply + i))","user":"53bdf76ce4b0d9a98559a6db"},{"problem":24,"code":";apply +\nreduce +","user":"580d7de3e4b0849f6811b73d"},{"code":"(fn sumelts [elts]\n  (if (empty? elts)\n    0\n    (+ (first elts) (sumelts (rest elts)))\n  )\n)","problem":24,"user":"502940a9e4b061fd216be4b8"},{"code":"reduce (partial + 0)","problem":24,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn\n  [coll]\n  (reduce + coll)\n  )","problem":24,"user":"513dfe2ce4b0825f97f7f966"},{"problem":24,"code":"#(loop [old-sq %1 sum 0]\n  (prn \"old:\" (drop 1 old-sq) \", sum:\" sum)\n  (if (empty? (take 1 old-sq)) \n    (identity sum) ;yes\n    (recur (drop 1 old-sq) (+ (first old-sq) sum)))) ;;) ;no","user":"5cea925ce4b0a17bb84e2bd2"},{"code":"(fn [coll]\r\n  (reduce (fn [x y] (+ x y)) 0 coll))","problem":24,"user":"4ddee37c535d08e6dec9fddc"},{"problem":24,"code":"(fn [x]\n  (loop [x x\n         sum 0]\n    (if (empty? x)\n      sum\n      (recur (rest x) (+ sum (first x))))))","user":"5530b827e4b076ab5578f818"},{"code":"(fn seq-sum [coll]\n  (reduce + coll))","problem":24,"user":"50e063f3e4b061dbdced7230"},{"problem":24,"code":"(fn sum [s] (cond\n             (= (count s) 1) (first s)\n             :else (+ (first s) (sum (rest s)))))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":24,"code":"(fn sum [coll] (reduce (fn [x y] (+ x y)) coll))","user":"5509b0bce4b06e50f9beb11d"},{"problem":24,"code":"(fn [s] (reduce (fn [acc n] (+ acc n)) 0 s))","user":"5673881fe4b05957ce8c6120"},{"problem":24,"code":"(fn sum [x] (cond\n                (= () (rest x)) (first x)\n                :else (+ (first x) (sum (rest x)))\n            )\n)","user":"58f92297e4b0438e51c2cf43"},{"code":"(fn [xs]\n  (loop [xi xs\n         sum 0]\n    (if (seq xi)\n      (recur (rest xi) (+ sum (first xi)))\n      sum)))","problem":24,"user":"4ee63d8d535d93acb0a66859"},{"problem":24,"code":"(fn add [seq]\n\t(reduce + seq))","user":"5e8d3b37e4b0cb016954632c"},{"code":"(fn hey\n  ([x] (hey x 0))\n  ([x y] (if (empty? (rest x))\n           (+ (first x) y)\n           (hey (rest x) (+ (first x) y)))))","problem":24,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn [c]\n  (reduce (fn [x y] (+ x y)) c))","problem":24,"user":"4fd0d058e4b04c3a95aa0408"},{"code":"(fn [seq] (reduce #(+ %1 %2) 0 seq))","problem":24,"user":"4e2f9e71535deb9a81d77f11"},{"problem":24,"code":"#(loop [coll % acc 0]\n   (if (empty? coll)\n\tacc\n\t(recur (rest coll) (+ acc (first coll)) )     \n   )\n)","user":"53d1ba22e4b00fb29b221317"},{"code":"(fn mysum [x] (\n  if (not (empty? x))\n    (+ (first x) (mysum (rest x)))\n    0\n))","problem":24,"user":"504f3aede4b0a02f9cffde5d"},{"code":"#((fn sum [x,acc] (if (.isEmpty x) acc (sum (rest x) (+ acc (first x)))))\n% 0)","problem":24,"user":"4f03641a535dcb61093f6a9b"},{"problem":24,"code":"(fn [s]\n  (loop [r s sum 0]\n    (if (empty? r)\n      sum\n      (recur (rest r) (+ sum (first r)))\n      )\n)\n)","user":"57d7c894e4b0bd073c2023de"},{"problem":24,"code":"(fn sum [a]\n  (apply + a))","user":"541b41d1e4b01498b1a71a65"},{"code":"(fn [collection] (loop [ result 0 stuff collection] (if stuff (recur (+ result (first stuff))   (next stuff))result)))","problem":24,"user":"4f54204ce4b0a7574ea717d9"},{"problem":24,"code":"(fn sum [seq]\n            (if (empty? seq)\n              0\n              #_(get seq 0)\n              (+ (get (vec seq) 0) (sum (vec (rest seq))))))","user":"59908f3fe4b0866487ed0d50"},{"code":"(fn summ [x] \n  (if (empty? x) 0\n    (+ (first x) (summ (rest x)) )\n    )\n  )","problem":24,"user":"524ac536e4b09eba1c0223a1"},{"problem":24,"code":"(fn [x] (loop [sum 0 x x] \n          (if (empty? x)\n            sum\n            (recur (+ sum (first x) ) (rest x))\n            )\n          )\n  )","user":"5a75da49e4b0512ff01cdacf"},{"problem":24,"code":"#(reduce + %1)\n\n        ;(fn [coll] (reduce + coll))","user":"5487eb1de4b0e286459a11ca"},{"problem":24,"code":"(fn sumit-all\n  [lst]\n  (reduce + lst))","user":"5a99b861e4b0d174b936c7ad"},{"problem":24,"code":"(fn [a-seq]\n   (reduce + a-seq))","user":"5ce36e02e4b0a17bb84e2b3e"},{"problem":24,"code":"(fn func \n  [x]\n  (if (empty? x) 0 (+ (first x) (func (rest x)))))","user":"5b679bf9e4b0c6492753e769"},{"problem":24,"code":"(fn sumitup [xs] (reduce + xs))","user":"5ea806d5e4b00a66d4a951b9"},{"problem":24,"code":"(fn [array]\n  (reduce + array))","user":"5bf47554e4b0b326c961d891"},{"problem":24,"code":"(fn [x]\n      (reduce (fn [result partial]\n                (+ result partial)\n                ) 0 x)\n      )","user":"544fb010e4b0e39780006997"},{"problem":24,"code":"#(reduce (fn [x y] (+ x y))%)","user":"53a8d9efe4b047364c04442d"},{"code":"(fn mysum [l]\r\n  (if (empty? l)\r\n    0\r\n    (+ (first l) (mysum (rest l)))))","problem":24,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"#(loop [c % sum 0]\n   (if (empty? c)\n     sum\n     (recur (rest c) (+ (first c) sum))))","problem":24,"user":"4dbe04b2535d020aff1edf56"},{"problem":24,"code":"#(reduce (fn [counter next] (+ next counter)) 0 %)","user":"567f988be4b0feffd0d18ebe"},{"problem":24,"code":"(fn sum-of-sequence\n  [x]\n  (if (empty? x)\n    0\n    (+ (first x) (sum-of-sequence (rest x)))))","user":"57109477e4b09c608db70435"},{"problem":24,"code":"#(loop [col % sum 0]\n   (if (empty? col) \n      sum\n      (recur (rest col) (+ sum (first col)))\n))","user":"5c862d0ae4b0c8042a70ce8c"},{"code":"(fn [col]\n  ((fn [lst n]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (+ n (first lst))))) col 0))","problem":24,"user":"4e7d9257535db169f9c796dd"},{"problem":24,"code":"(fn ff [l]\n  (if (empty? l)\n  \t0\n  \t(+ (first l) (ff (rest l)))))","user":"5f30296fe4b0574c87022c22"},{"code":"(fn sum [x]\n  (if (empty? x)\n    0\n    (+ (first x) (sum (rest x)))))","problem":24,"user":"533431e4e4b019098a6f8b8d"},{"code":"(fn zomgsum [initial-seq]\n  (loop [x 0 seq initial-seq]\n    (let [head (first seq) tail (rest seq)]\n      (if (= tail ())\n        (+ x head)\n        (recur (+ x head) tail)))))","problem":24,"user":"4e55958a535d8a8b8723a27e"},{"problem":24,"code":"#(reduce\n  (fn [result curr]\n    (+ result curr)\n    )\n  0\n  %)","user":"58c93089e4b021aa9917ed9b"},{"problem":24,"code":"#(loop [ input %\r\n  Sum 0]\r\n  (if (empty? input)\r\n  Sum\r\n  (recur (rest input)\r\n    (+ Sum (first input)))))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":24,"code":"(fn sum_seq [x] \n  (reduce + x)\n  )","user":"57f5a5a5e4b0d3187e9008d5"},{"code":"(fn f [s] (if (empty? s) 0 (+ (first s) (f (rest s)))))","problem":24,"user":"4e72430c535d5021c1a8965d"},{"problem":24,"code":"(fn [init-s]\n  (loop [s init-s sum 0]\n    (if (empty? s)\n      sum\n      (recur (rest s) (+ sum (first s))))))","user":"57addbcce4b0b8559636fca3"},{"problem":24,"code":"reduce (fn [acc n] (+ acc n)) 0","user":"5cfd5a93e4b0cc9c91588168"},{"code":"(partial reduce (fn [a,b] (+ a b)))","problem":24,"user":"505885c4e4b06522596eba7b"},{"problem":24,"code":"(fn [a-seq]\n\t(loop [a-s a-seq\n\t\t   nn 0]\n\t\t   (if (empty? a-s)\n\t\t   \tnn\n\t\t   \t(recur (rest a-s)\n\t\t   \t\t(+ nn (first a-s))))))","user":"573eb8f2e4b05c31a32c082f"},{"code":"(fn sum[list]\n  (if (= (count list) 0)\n    0\n    (+ (first list) (sum (rest list)))))","problem":24,"user":"525d490ae4b0cb4875a45d70"},{"code":"(fn this [items]\n  (if (empty? items)\n    \t0\n    \t(+ (first items) (this (rest items)))))","problem":24,"user":"50dee6bbe4b061dbdced721e"},{"code":"(fn sum [x] \n  (if (empty? x)\n    0\n    (+ (first x) (sum (rest x)))\n  )\n)","problem":24,"user":"4f03101e535dcb61093f6a53"},{"problem":24,"code":"(fn [items]\n  (reduce + items)\n)","user":"53ff602fe4b0de5c418485ff"},{"problem":24,"code":"(fn [seq] (loop [head (first seq) tail (rest seq) sum 0]\n            (if (nil? head)\n              sum\n              (recur (first tail) (rest tail) (+ sum head)))))","user":"55457b73e4b0a04f79299536"},{"problem":24,"code":"(fn sum' [x] (if (empty? x) 0 (+ (sum' (rest x)) (first x))))","user":"58333b19e4b089d5ab817c94"},{"problem":24,"code":"#(loop [l % c 0] (if (next l) (recur (next l) (+ c (first l))) (+ c (first l))))","user":"5fc241c1e4b0edf42a5593d1"},{"code":"(fn sum\n  ([c] (sum c 0))\n  ([c s] (if (empty? c)\n        s\n        (sum (rest c) (+ s (first c))))))","problem":24,"user":"4fff00ede4b0678c553fc3fc"},{"problem":24,"code":"(fn [a] \n  (loop [sum 0 ary a]\n    (if (empty? ary)\n      sum\n      (recur (+ sum (first ary)) (rest ary)))))","user":"5a011305e4b01bb0ae8afd40"},{"code":"(fn [els] (reduce + els))","problem":24,"user":"4ef4ab95535dced4c769f23b"},{"code":";(fn sumlist [x]\n;  (\n\n(fn [x]\n  (reduce + 0 x))","problem":24,"user":"5012aefce4b0c8732600222a"},{"problem":24,"code":"(fn [L]\n  (loop [s 0 x L]\n    (if (empty? x)\n      s\n      (recur (+ s (first x)) (rest x)))))","user":"53d60f57e4b0e771c3025451"},{"problem":24,"code":"(fn sum-collection [coll] (reduce + coll))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":24,"code":"(fn [aSeq] (reduce + aSeq))","user":"548018e3e4b0c51c1f4d7331"},{"code":"(fn [s]\n  (reduce\n    (fn [x y] (+ x y))\n    0\n    (seq s)))","problem":24,"user":"50ba714ae4b03e68e4411c83"},{"problem":24,"code":"#(if (empty? (rest %))\n    (first %)\n    (recur (conj \n     (rest \n      (rest %)\n      ) \n     (+ \n      (first %) \n      (first(rest %))\n     )\n    )\n   )\n  )","user":"5805e70de4b0a837a8b30cd0"},{"code":"(fn [thelist]\n  (loop [restoflist thelist sum 0 ]\n    (if (empty? restoflist)\n      sum\n      (recur (rest restoflist)(+ sum (first restoflist)))\n      )\n    )\n  )","problem":24,"user":"52cc7c40e4b07d0d72b27364"},{"code":"(fn sunall[c] (apply + c))","problem":24,"user":"4e7650c5535d324fb2983d68"},{"problem":24,"code":"(fn return-num [numbers]\n\t(reduce + numbers)\n)","user":"579d1567e4b05b1deef9ae12"},{"problem":24,"code":"(fn [seq]\r\n  (reduce + seq))","user":"4ddc5d0a535d02782fcbea05"},{"problem":24,"code":"(fn sum-elements [seqn]\n  (apply + seqn))","user":"5683e0c6e4b0945ebc182aa3"},{"code":"(fn sumseq[s] (if (empty? s) 0 (+ (sumseq (rest s)) (first s))))","problem":24,"user":"4f03bd9d535dcb61093f6b5b"},{"problem":24,"code":"(fn [xs]\n  (reduce (fn [x1 x2] (+ x1 x2)) xs)\n )","user":"55aa8276e4b0988bba2ad94e"},{"problem":24,"code":"(fn [s]\n  (loop [xs s acc 0]\n  \t(let [head (first xs)]\n      (if head\n        (recur (rest xs) (+ acc head))\n        acc))))","user":"5563a94be4b0c656e3ff17f2"},{"code":"(fn [x]\n  (loop [x x\n         sum 0]\n    (if (seq x)\n      (recur (rest x) (+ sum (first x)))\n      sum\n             \n      )\n    )\n  )","problem":24,"user":"50d8a50de4b01f0871336e6d"},{"problem":24,"code":"(fn sm ([x] (sm x 0)) ([x s] (if (empty? x) s (recur (rest x) (+ s (first x))))))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn [x] (loop [sum (first x) coll (rest x)] (if (empty? coll) sum\n   (recur (+ sum (first coll)) (rest coll)))))","problem":24,"user":"507ddf55e4b0a03698d01ca8"},{"code":"reduce + ;((_)ZZZZZZD~","problem":24,"user":"525b1e15e4b0cb4875a45d08"},{"problem":24,"code":"(fn [container] (reduce + container))","user":"5464dd11e4b01be26fd746d2"},{"problem":24,"code":"(fn ! [list] (if (= list ()) 0 (+ (first list) (! (rest list)))))","user":"546fa7a7e4b00cfc9eacc1b1"},{"problem":24,"code":"(fn sum-seq [s]\n  (reduce + s))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"problem":24,"code":"(fn sum'\n  [xs]\n  (apply + xs))","user":"57689d73e4b0a07e8fc180d7"},{"problem":24,"code":"(fn [items](loop [acc 0 ritems items] (if (= () ritems) acc (recur (+ acc (first ritems))(rest ritems)) )))","user":"5d363543e4b01671435dbd20"},{"code":"(fn [numbers] (reduce + numbers))","problem":24,"user":"50a635bbe4b0aa96157e2621"},{"problem":24,"code":"(fn [l]\n  (loop [ls l\n         cnt 0]\n    (if (empty? ls)\n      cnt\n      (recur (rest ls) (+ cnt (first ls))))))","user":"5405fdcce4b0addc1aec6683"},{"code":"(fn addall [x]\n      (if (empty? x) 0\n         (+ (first x) (addall (rest x))))\n      )","problem":24,"user":"50909368e4b084db37c1e074"},{"code":"(fn [c] (reduce (fn [x y] (+ x y)) 0 c))","problem":24,"user":"4ecaa076535d6d7199dd3706"},{"problem":24,"code":"(fn [i]\n  (reduce + 0 i))","user":"554bc026e4b0a04f79299597"},{"code":"(fn sum-seqs [x] (if (= '() (rest x)) (first x) (+ (sum-seqs (rest x)) (first x))))","problem":24,"user":"4fc2e302e4b081705acca33a"},{"problem":24,"code":"reduce (fn [x1 x2] (+ x1 x2)) 0","user":"5a221881e4b0ff51aa4b32c0"},{"problem":24,"code":"#(reduce (fn [s i] (+ s i)) 0 %)","user":"565c8052e4b068f2fe63dc14"},{"code":"(fn[x](reduce + 0 x))","problem":24,"user":"525493bbe4b0541d1855b991"},{"problem":24,"code":"(fn[s] (apply + s))","user":"57fc0719e4b0d3187e900987"},{"problem":24,"code":"(fn [items] (reduce #(+ %1 %2) 0 items) )","user":"54b187bee4b09f271ff37d21"},{"code":"apply\n+","problem":24,"user":"5121cccee4b05ae5a5823c12"},{"problem":24,"code":";; (fn [x] (reduce + x))\n(partial reduce +)","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn s [coll] (reduce + coll))","problem":24,"user":"5020d2aee4b0cb6ebc0a42fb"},{"code":"(fn sum [x]\n  (if (= x '())\n    0\n    (+ (first x) (sum (rest x)))\n    )\n  )","problem":24,"user":"52127ee4e4b0d32679a5063c"},{"problem":24,"code":"(fn sum-it-all-up [xs]\n  (reduce + xs))","user":"518b8561e4b0f028e99addef"},{"code":"(fn sum-it-up [x]\n  (loop [total 0 xseq x]\n    (if (= (seq xseq) nil)\n      total\n      (recur (+ total (first xseq)) (rest xseq)))))","problem":24,"user":"52c0101fe4b07a9af5792343"},{"problem":24,"code":"(fn sum\n  [l]\n  (if (empty? l) 0\n    (+ (first l) (sum (rest l)))\n  )\n)","user":"5e304218e4b05b4b0151620d"},{"problem":24,"code":"(fn [data]\n  (loop [mysum 0 mydata data]\n    (if (= 0 (count mydata))\n      mysum\n      (recur (+ mysum (first mydata)) (rest mydata)))))","user":"58803ed9e4b0f1effa3b760f"},{"problem":24,"code":"(fn adder [coll]\n  (loop [c coll\n         total 0]\n    (if (seq c)\n      (recur (rest c) (+ total (first c)))\n       total\n    )))","user":"5b250773e4b063e2438bcc21"},{"code":"(fn [li] (reduce + 0 li))","problem":24,"user":"4e72175d535d5021c1a89658"},{"code":"(fn tot [a] \n  (let [s 0 x a]\n    (if (empty? x) 0\n      (+ (first x) (tot (rest x))))))","problem":24,"user":"50cbc2bbe4b0f78a8e1645bd"},{"problem":24,"code":"(fn [&  seq ]\n(loop [n 0\n       m seq ]\n       (if (empty? m)\n       n\n       ( recur (reduce  +(first m)) (rest m)))))","user":"5fc1c424e4b0edf42a5593d0"},{"problem":24,"code":"#(loop [s % sum 0]\n   (if\n     (empty? s) sum\n     (recur (rest s) (+ sum (first s)))\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"problem":24,"code":"#(loop [coll %\n        sum 0]\n   (if-not (empty? coll)\n     (recur (rest coll) (+ sum (first coll)))\n     sum))","user":"58ed0198e4b056aecfd47d72"},{"problem":24,"code":"(fn red ([l] (red l 0))\n  ([l t]\n   (if (empty? l)\n   t\n   (red\n    (rest l) \n    (+ (first l) t)\n   ))\n  )\n )","user":"54eb3a9ee4b024c67c0cf846"},{"problem":24,"code":"(\n fn[sequ] (reduce + 0 sequ)\n )","user":"59b2d51be4b0e1f4e384c902"},{"problem":24,"code":"(fn fsum [c] (reduce + c))","user":"578151ade4b0d36ec5835e83"},{"code":"(fn sum [coll] \n  (if (empty? coll) \n    0 \n    (+ (first coll) (sum (rest coll)))))","problem":24,"user":"4ef4c1ff535dced4c769f23e"},{"problem":24,"code":"(fn sum [s] (apply + s))","user":"5450ea1be4b0e397800069a6"},{"code":"#(apply (partial + 0) %)","problem":24,"user":"523c61b2e4b07becd5be2220"},{"code":"(fn [x] ((fn [x acc] (if (empty? x) acc (recur (rest x) (+ (first x) acc)))) x 0))","problem":24,"user":"4e8c9f2e535d65386fec212b"},{"problem":24,"code":"(fn sum_up [nbrs] (if (first nbrs) (+ (first nbrs) (sum_up (rest nbrs))) 0))","user":"5e69589de4b04a83ad7cd26d"},{"problem":24,"code":"(fn [l]\n  (let [v (into [] l)]\n    (loop [x (- (count v) 1) sum 0]\n      (if (< x 0)\n        sum\n        (recur (dec x) (+ sum (get v x)))))))","user":"57f4ace3e4b07bbd65c32b2b"},{"problem":24,"code":"(fn \n  [data]\n  (loop [values data\n         sum 0]\n    (if (empty? values)\n      sum\n      (recur\n        (rest values)\n        (+ sum (first values))))))","user":"55ad2379e4b03311e7b732a1"},{"code":"reduce (fn [sum item] (+ sum item))","problem":24,"user":"4db6d993535d1e037afb2180"},{"problem":24,"code":"(fn[collection] \n  (loop [sum 0, x collection] \n    (if (= x '())  \n      sum \n      (recur (+ sum (first x)) (rest x))\n      )\n    )\n  )","user":"59228b00e4b026ae38521281"},{"problem":24,"code":"(fn my-sum\n  [coll]\n  (loop [s 0\n         r coll]\n    (if (seq r)\n      (recur (+ s (first r)) (rest r))\n      s)))","user":"5c411df3e4b08cd430848ebf"},{"problem":24,"code":"(fn [thing] (reduce + thing))","user":"57073037e4b0b0fb43fd0689"},{"problem":24,"code":"(fn sum [sx] (if (empty? sx)\n          0\n          (+ (first sx) (sum (rest sx)) )))","user":"568bd448e4b0dcc4269f40a9"},{"problem":24,"code":"(fn [seq'] (reduce + seq'))","user":"567bf820e4b05957ce8c61ad"},{"problem":24,"code":"(fn [x] (loop [l x res 0]\n          (if (seq l) ;; リストの空チェック\n            (recur (rest l) (+ res (first l))) ;; リストが空でない場合、リストの先頭を除いたリストと、リストの先頭をこれまでの加算結果に足したものを recur に渡す\n            res)))","user":"566bd453e4b0a866af6896b7"},{"code":"#(loop [acc %1 result 0]\r\n  (if (empty? acc)\r\n    result\r\n    (recur (rest acc)(+ result (first acc)))))","problem":24,"user":"4f49e050e4b0d56e7bb92c01"},{"problem":24,"code":"(fn s [coll]\n  (if (= coll '())\n    0\n    (+ (first coll) (s (rest coll)))))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn ls [s] \n   (if (= nil (first s))\n       0\n       (+ (first s) (ls (rest s)))))","problem":24,"user":"50b06b3ae4b009df37c708b9"},{"problem":24,"code":"(fn sum_all [coll]\n    (reduce + coll))","user":"5a51e029e4b05d388ecb6bf0"},{"problem":24,"code":"#(reduce +%)","user":"5416aacce4b01498b1a719ff"},{"problem":24,"code":"(fn sum [x] ((fn l [y sum] (if (empty? y) sum (l (rest y) (+ sum (first y))))) x 0))","user":"4fb1a4e4e4b081705acca27e"},{"problem":24,"code":"#(loop [result 0 ns %] (if (empty? ns) result (recur (+ result (first ns)) (rest ns))))","user":"57465429e4b009280f9f2b60"},{"code":"(fn [list] (reduce + (map ( fn[x] x ) list ) ) )","problem":24,"user":"5184df3ee4b02826a645f39b"},{"problem":24,"code":"(fn [collection]\n  \t(reduce + collection))","user":"5cd8d4a1e4b05ee0cb3116f3"},{"code":"(fn sum[l] (if (empty? l) 0 (+ (first l) (sum (rest l)))))","problem":24,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":24,"code":"(fn[coll](reduce + coll))","user":"5537b2c7e4b09218d5f44fce"},{"problem":24,"code":"(fn sum [x] (reduce (fn [s,n] (+ s n)) 0 x))","user":"57c3451fe4b05aa3c4741cbd"},{"problem":24,"code":"(fn foo [x] (reduce + x))","user":"559b7c65e4b066d22e731f55"},{"problem":24,"code":"(fn [x] (loop [data x sum 0]\n          (if-not (first data)\n            sum\n            (recur (drop 1 data) (+ sum (first data)) ))))","user":"567f034be4b0feffd0d18eba"},{"code":"(fn my-sum [lst]\n  (if (empty? lst)\n    0\n    (+ (first lst) (my-sum (rest lst)))))","problem":24,"user":"5347870be4b084c2834f4a4b"},{"code":"(fn add-all [n] (if (empty? n) 0 (+ (first n) \r\n    (add-all (rest n)))))","problem":24,"user":"4e0359e8535d04ed9115e792"},{"problem":24,"code":"(fn [nums]\n  (reduce (fn [total n]\n            (+ total n))\n          0\n          nums))","user":"5db0d470e4b0f8c104ccfc9e"},{"code":"#(reduce (fn [x,y] (+ x y)) %)","problem":24,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn [n] (reduce + n))","problem":24,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [q] (apply + q))","problem":24,"user":"532e0b20e4b019098a6f8b45"},{"code":"(fn rec [n] (if (= (count n) 1) (first n) (+ (first n) (rec (rest n)))))","problem":24,"user":"52d1e364e4b0d9f9285948e7"},{"problem":24,"code":"(fn sum-of-seq [sequ]\n  (loop [i 0 s sequ]\n    (if (empty? s) \n      i \n      (recur (+ i (first s)) (rest s)))))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn [col] (reduce #(+ %1 %2) 0 col))","problem":24,"user":"4e83b1af535db62dc21a62dc"},{"code":"(fn [xs] (reduce + xs))","problem":24,"user":"4ddabc33535d02782fcbe9f5"},{"problem":24,"code":"(fn [lst]\n    (reduce + lst))","user":"53ab6e0de4b047364c04444d"},{"problem":24,"code":"(fn sm [x] (reduce (fn [acc x] (+ acc x)) 0 x))","user":"5cb62652e4b026601754b949"},{"problem":24,"code":"(fn adder\n  ([s] (adder s 0))\n  ([s curr-sum]\n   (if (empty? s)\n     curr-sum\n     (adder (rest s) (+ (first s) curr-sum)))))","user":"60b7ef35e4b0e0fa5f1b4254"},{"code":"(fn [items]\n  (reduce (fn [total item] (+ total item) ) 0 items))","problem":24,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":24,"code":"(fn\n  [x]\n  (reduce + x))","user":"54196d63e4b01498b1a71a34"},{"code":"(fn foo [lst]\n  (if ( = lst '()) 0\n      (+ (first lst) (foo (rest lst)))))","problem":24,"user":"4eed6b32535d93acb0a668bc"},{"code":"(fn [lst] (reduce + 0 lst))","problem":24,"user":"4eaa47bc535d7eef30807309"},{"code":"(fn [coll] \n  (reduce (fn [sum item] (+ sum item))\n          coll))","problem":24,"user":"532b930be4b09d4e7a9b5534"},{"problem":24,"code":"(fn sumit [collec] \n  (if (empty? collec)\n    0\n    (+ (first collec) (sumit (rest collec)))))","user":"57af36eae4b0fbc9809a272e"},{"code":"(fn [l]\n  (loop [lst l sum 0]\n    (if (empty? lst)\n      sum\n      (recur\n        (rest lst) (+ sum (first lst))))))","problem":24,"user":"4e7b6e49535db169f9c796b1"},{"problem":24,"code":"#(reduce + (seq %) )","user":"552800d7e4b0ffed3738f93a"},{"code":"(fn [items]\n  (reduce (fn [sum item] (+ sum item)) 0 items))","problem":24,"user":"52f31489e4b05e3f0be25f0b"},{"problem":24,"code":"(fn sum_it_all-1 [xcoll]\n  (let [coll (vec xcoll)] ;;for sets \n    (loop [n 0\n           sum 0]\n      (if (= n (count coll))\n        sum\n        (recur (inc n) (+ sum (nth coll n)))))))","user":"56038f34e4b04bb52996e1bc"},{"problem":24,"code":"(fn foo [coll] (let [x (first coll) xs (rest coll)] (if (empty? xs) x (+ x (foo xs)))))","user":"5509bec5e4b06e50f9beb121"},{"problem":24,"code":"(fn [coll]\n      (loop [[x & xs] (seq coll) s 0]\n        (let [acc (+ s x)]\n        (if (empty? xs)\n            acc \n         (recur xs acc)))))","user":"58d3d6a3e4b03c36ff7e592b"},{"problem":24,"code":"(fn SUM [seq]\n  (reduce +  seq)\n  )","user":"5aa11b37e4b0d174b936c840"},{"code":"(fn sum [x] (if (empty? x) 0 \r\n  (+ (first x) (sum (rest x)))))","problem":24,"user":"4f0365fc535dcb61093f6aa4"},{"problem":24,"code":"(fn [i] (reduce + i))","user":"5c51f60be4b0fb8c5ffd99d4"},{"problem":24,"code":"(fn suma [x] (if (empty? x) (+ 0 0) (+ (first x) (suma (rest x)))))","user":"5772bd3be4b0979f896515cf"},{"problem":24,"code":"(fn [nums] \n  (reduce + nums))","user":"52f3a2afe4b05e3f0be25f13"},{"problem":24,"code":"(fn sum [x] (loop [l x, s 0] (if (empty? l) s (recur (rest l) (+ s (first l))))))","user":"55bb3f89e4b01b9910ae29e2"},{"code":"(fn [seq]\r\n  (loop [ns seq sum 0]\r\n    (if (empty? ns)\r\n      sum\r\n      (recur (rest ns) (+ sum (first ns))))))","problem":24,"user":"4dbe5975535d020aff1edf5d"},{"code":"(fn [start]\n  (loop [xs start, n 0]\n    (if (empty? xs) n (recur (rest xs) (+ (first xs) n))\n            )))","problem":24,"user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [x] (reduce (fn [a b] (+ a b)) 0 x))","problem":24,"user":"4f039f14535dcb61093f6b3e"},{"code":"(fn hoge [x] \n  (if (= 1 (count x)) (first x) \n      (+ (first x) (hoge (rest x)))))","problem":24,"user":"4e2e6460535deb9a81d77f0b"},{"code":"#(reduce + 0 %)","problem":24,"user":"4dea9406535d08e6dec9fe01"},{"code":"#( apply + (apply list %))","problem":24,"user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"#(loop [values % total 0]\n    (if (empty? values)\n      total\n      (recur (rest values) (+ total (first values)))))","problem":24,"user":"4ea85846535d7eef308072f9"},{"code":"(fn sum [x]\n  (loop [sum 0 arr x]\n    (if (= 0 (count arr))\n      sum\n    (recur (+ sum (first arr)) (drop 1 arr)))))","problem":24,"user":"516e9d9be4b06aac486e5b2b"},{"problem":24,"code":"(fn [x]\n  (loop [a x b 0]\n    (if (= () a)\n      b\n      (recur (rest a) (+ (first a) b)))))","user":"58bd219be4b0888cdc949d29"},{"code":"#(loop [sum 0 remaining %]\n   (if (empty? remaining)\n     sum\n     (recur (+ sum (first remaining))\n            (rest remaining))))","problem":24,"user":"522e4baae4b01cdb292c5f00"},{"problem":24,"code":"(fn sum [a]\n  (if (empty? a)\n    0\n    (+ (first a) (sum (rest a)))\n  )\n)","user":"54c9f165e4b045293a27f687"},{"code":"#(letfn [(mysum [coll n]\n            (if (empty? coll)\n             n\n             (recur (rest coll) (+  (first coll) n))\n            )\n          )]\n  (mysum % 0))","problem":24,"user":"4df11fb2535d08e6dec9fe1a"},{"code":"(fn sum [s]\n  (if (= '() s)\n    0\n  \t(+ (first s) (sum (rest s)))))","problem":24,"user":"52b9cd85e4b07a9af57922c4"},{"code":"(fn sum [xs]\n  (if (seq xs)\n    (+ (first xs) (sum (rest xs)))\n    0))","problem":24,"user":"4f8dc9dce4b02e764a0a51b6"},{"problem":24,"code":"(fn [lst]\n  (reduce + 0 lst ))","user":"5b33050ee4b025bcb146f32d"},{"code":"(fn sum2 [xs]\n  (cond (empty? xs) 0\n        true (+ (sum2 (rest xs)) (first xs))))","problem":24,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn sum [x] ( if (empty? (rest x)) (first x) (+ (first x) (sum (rest x))) ))","problem":24,"user":"50ef311fe4b0a78662fa2651"},{"problem":24,"code":"(fn sum-seq [input]\n  (if (empty? input)\n    0\n    (+ (first input) (sum-seq (rest input))))\n  )","user":"55fb5b89e4b0f488688e0662"},{"problem":24,"code":"(fn seq_sum [s] (if (empty? s) 0 (+ (first s) (seq_sum (rest s)))))","user":"55664950e4b0c656e3ff1832"},{"code":"(fn sum [acc xs]\n  (if (< 1 (.size xs))\n    (sum (+ acc (first xs)) (rest xs))\n    (+ acc (first xs)))) 0","problem":24,"user":"5166b716e4b060c690c1f4bf"},{"problem":24,"code":"(fn [x] (reduce (fn [a b] (+ a b))  x))","user":"5457767ae4b01be26fd7460c"},{"problem":24,"code":"(fn soma [s] (clojure.core/reduce + 0 s))","user":"58622733e4b0f14aab7c8803"},{"problem":24,"code":"(fn [sequence] (reduce #(+ %1 %2) sequence))","user":"5a21a5ace4b0ff51aa4b32b4"},{"problem":24,"code":"(fn [coll]\n         (loop [c coll acc 0]\n           (if (empty? c)\n             acc\n             (recur (next c) (+ acc (first c)))\n             )\n           )\n         )","user":"53a6a599e4b0ef122a8689cc"},{"problem":24,"code":"(fn\n  [l]\n  (loop [accumulator 0\n         s l\n         x (first s)]\n    (if x\n      (recur (+ accumulator x) (rest s) (second s))\n      accumulator)))","user":"571b900ae4b07c98581c3b69"},{"problem":24,"code":"(fn [x]\n  (loop [s 0\n         r x]\n    (if (next r)\n      (recur (+ s (first r)) (next r))\n      (+ s (first r)))))","user":"58e53760e4b056aecfd47c8f"},{"problem":24,"code":"(fn [lst]\n  (loop [lst lst acc 0]\n    (if (= (first lst) nil)\n      acc\n      (recur (rest lst) (+ acc (first lst))))))","user":"590d715ae4b047aa04b19a05"},{"problem":24,"code":"(fn [xs] (reduce (fn [acc new] (+ acc new)) xs))","user":"58b81490e4b0ebc645576d8c"},{"problem":24,"code":"(fn[xs](reduce (fn[accum,x] (+ accum x)) 0 xs))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":24,"code":"(fn aplysum [x] (apply + x))","user":"5641f0ede4b08d4f616f5f11"},{"problem":24,"code":"(fn [s] (loop [sum 0 head (first s) tail (rest s)] (if (= head nil) sum (recur (+ sum head)(first tail) (rest tail))) ))","user":"53b3ea79e4b047364c0444ab"},{"problem":24,"code":"(fn [l]\n  (reduce + 0 l))","user":"55d4dddde4b0e31453f64a7f"},{"problem":24,"code":"(fn ! [x]\n  (if (empty? x)\n    0\n    (+ (first x)\n       (! (rest x)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":24,"code":"#(reduce (fn [a x] (+ x a)) 0 %)","user":"5e5f83a2e4b0fd0acd15867b"},{"problem":24,"code":"(fn [y] (reduce (fn [r x] (+ r x)) y))","user":"553c4614e4b09218d5f45014"},{"problem":24,"code":"(fn xx [l] (if (empty? l) 0 (+ (first l) (xx (rest l)))))","user":"55ec1c4ce4b0121d4835fdc4"},{"code":"(fn sum-seq [xs] (reduce + xs))","problem":24,"user":"512c0000e4b03a42b6300231"},{"problem":24,"code":"(fn  [lst] (reduce + lst))","user":"57fc08d8e4b0d3187e900988"},{"code":"(fn[list] (reduce + list))","problem":24,"user":"4e525840535d302ef430da72"},{"problem":24,"code":"(fn addition [coll]\n   (if (empty? coll)\n     0\n     (+ (first coll) (addition (rest coll)))))","user":"53f75957e4b0de5c4184855d"},{"code":"(fn t [x] (if (= (count x) 1) (first x) (+ (t (rest x)) (first x))  ))","problem":24,"user":"4e39c710535deb9a81d77f45"},{"code":"(fn [coll]\n  (reduce + coll)\n)","problem":24,"user":"5132b1f3e4b039bac947cbbb"},{"problem":24,"code":"(fn r-sum [s] (if (empty? s) 0 (+ (first s) (r-sum (rest s)))))","user":"5d6f0533e4b04d129b00f2d0"},{"code":"(fn sum [xs] (if (empty? xs) 0 (+ (first xs) (sum (rest xs)))))","problem":24,"user":"50ef5703e4b0bdaecbb47d95"},{"code":"(fn [v] \n  (loop [l v, sum 0]\n    (if-not (empty? l)\n      (recur (rest l) (+ sum (first l)))\n      sum)))","problem":24,"user":"4e31c695535deb9a81d77f20"},{"problem":24,"code":"apply +\n;reduce +\n;reduce #(+ % %2)","user":"57ba55c1e4b0fbc9809a2801"},{"code":"(fn [x] (loop [x x acc 0] (if (= x []) acc (recur (drop-last x) (+ (last x) acc)))))","problem":24,"user":"4fcb5d1fe4b0ee37620e1858"},{"code":"(fn [x]\n  (loop [l x, c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (+ c (first l))))))","problem":24,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [seq]\n    (reduce (fn [sum v] (+ sum v)) 0 seq))","problem":24,"user":"4e6dfe57535d5021c1a895fc"},{"code":"(fn sm [s] (if (empty? s) 0 (+ (first s) (sm (rest s)))))","problem":24,"user":"4f805b4be4b033992c121bf2"},{"code":"(fn this [l] (if (<= (count l) 0) 0 (+ (first l) (this (rest l)))))","problem":24,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":24,"code":"(fn [l] \n         (reduce + l))","user":"5be05ea7e4b0ed4b8aab4c83"},{"problem":24,"code":"reduce (fn [c b] (+ c b)) 0","user":"53cff414e4b00fb29b221304"},{"code":"#(loop [col % sum 0]\n  ( let [tail (rest col) \n         res  (+ sum (first col) )]\n  (if (seq tail) \n    (recur tail res )  \n    res\n)))","problem":24,"user":"504f0c08e4b0e7ad84dbc4b1"},{"problem":24,"code":"(fn fn1 [x]\r\n  (if (empty? x)\r\n    0\r\n    (+ (first x) (fn1 (rest x)))\r\n  )\r\n\r\n)","user":"55cde227e4b0e31453f64a22"},{"code":"(fn [lista] (reduce + lista))","problem":24,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn sum_up [xs]\n  (if (= xs [])\n    0\n    (+ (first xs) (sum_up (rest xs)))\n  )\n)","problem":24,"user":"50013694e4b0678c553fc417"},{"code":"(fn [coll]\n  (reduce (fn [x y]\n            (+ x y))\n          0\n          coll))","problem":24,"user":"52b94e26e4b07a9af57922b9"},{"problem":24,"code":"(fn sum\n  [my-seq]\n  (reduce + 0 my-seq)\n  )","user":"5a4cbba1e4b05d388ecb6b98"},{"problem":24,"code":"reduce (fn [r x](+ r x)) 0","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":24,"code":"(fn [more] (apply + more))","user":"5680104ae4b0966858e4d8ea"},{"problem":24,"code":"#(reduce (fn [acc n] (+ acc n)) %)","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn my-sum [xs]\n  (if (empty? xs)\n    0\n    (+ (first xs) (my-sum (rest xs)))))","problem":24,"user":"52a779fce4b0c58976d9ac1a"},{"code":"(fn mysum\n  [xs] (if (empty? xs)\n         0\n         (+\n          (first xs)\n          (mysum (rest xs)))))","problem":24,"user":"51b6cfd6e4b02e5820733413"},{"code":"(fn [x]\n    (reduce + x))","problem":24,"user":"50706287e4b07bd6ad9b9f2b"},{"code":"(fn [col] (apply + col))","problem":24,"user":"4e7d4544535db169f9c796d0"},{"problem":24,"code":"#(reduce (fn [init x] (+ init x)) 0 %)","user":"5f1d22c7e4b0f565ad998268"},{"code":"(fn[seq] (reduce + 0 seq))","problem":24,"user":"528c381ce4b0239c8a67aeb2"},{"code":"#(reduce + %1)","problem":24,"user":"4def301c535d08e6dec9fe12"},{"code":"(fn [xs]\n  (loop [sum 0 ys xs]\n    (if (empty? ys)\n      sum\n      (recur (+ sum (first ys)) (rest ys)))))","problem":24,"user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [l]\r\n  (reduce + l))","problem":24,"user":"4df9c598535d04ed9115e77a"},{"problem":24,"code":"(fn this-problemM8 [lst]\n  (loop [lista lst\n       cc    0]\n  (if (empty? lista)\n    cc\n      (recur (rest lista)\n             (+ cc (first lista))))) )","user":"59deba46e4b01968742fed7f"},{"problem":24,"code":"(fn\n  [x]\n  (loop [f (first x)\n         r (rest x)\n         s 0]\n    (if (empty? r)\n      (+ f s)\n      (recur (first r)\n             (rest r)\n             (+ f s)))))","user":"563b7724e4b0bfe05bf11814"},{"code":"(fn sum [l]\n  (if (not= l '())\n    (+ (first l) (sum (rest l)) )\n    0\n  )\n)","problem":24,"user":"502fb9bee4b0f8db655c4ee2"},{"problem":24,"code":"(fn sum [listname] \n   (loop [xs listname y 0]\n     (if (seq xs)\n       (recur (drop 1 xs) (+ y (first xs)))\n       y)))","user":"5c8aa1b5e4b048ec896c5959"},{"problem":24,"code":"(fn f [s]\n  (let [[hd & tl] (seq s)]\n    (if (empty? tl)\n      hd\n      (f (cons\n          (+ hd (first tl))\n          (rest tl) )) )))","user":"594c1baae4b07ddc2dafae59"},{"problem":24,"code":"reduce (fn [init x] (+ x init)) 0","user":"53abf519e4b047364c044456"},{"problem":24,"code":"(fn my-sum\n  [s]\n  (reduce + s))","user":"55ad2d97e4b03311e7b732a2"},{"problem":24,"code":"(fn [xs]\n  (letfn [(sum-it-up [acc xs]\n                   (if (empty? xs)\n                     acc\n                     (sum-it-up (+ acc (first xs)) (rest xs))))]\n    (sum-it-up 0 xs)))","user":"56486d47e4b0284900eef62f"},{"problem":24,"code":"(fn [x]\n  (loop [a x\n         b 0]\n  \t(if (empty? a)\n    \tb\n    \t(recur (rest a) (+ b (first a))))))","user":"5d371b6fe4b01671435dbd31"},{"problem":24,"code":"(fn [x]\n (reduce + x))","user":"5da9d89ae4b000c986472c3b"},{"problem":24,"code":"(fn ssaa [l]\n  (if (second l)\n    (+ (first l) (ssaa (rest l)))\n    (first l)))","user":"59736b0de4b01722bebd4c9e"},{"problem":24,"code":"(fn my-sum\n  [x]\n    (if-let [more (next x)]\n      (+ (first x) (my-sum more))\n      (first x)))","user":"551c594de4b07993ea3788dc"},{"code":"#(apply #'+ %)","problem":24,"user":"52d9ba39e4b09f7907dd13af"},{"problem":24,"code":"(fn\n  sum\n  [seq]\n  (reduce + seq))","user":"5c6227fee4b0fca0c1622641"},{"code":"#(reduce (fn [a,b] (+ a b)) 0 %)","problem":24,"user":"4e6a2855535d8ccf87e9fea3"},{"problem":24,"code":"(fn [sq] (reduce (fn [sum itm] (+ sum itm))0 sq))","user":"5846e925e4b089d5ab817e9d"},{"problem":24,"code":"(fn [s] \n  (reduce + s)\n  \n  )","user":"55bb7546e4b01b9910ae29e7"},{"problem":24,"code":"(fn [seq]\n      (reduce + seq))","user":"54fce8bde4b07d26eda61d30"},{"problem":24,"code":"(fn [arg] (reduce (fn [a b] (+ a b)) arg))","user":"561a4c60e4b053970a773b06"},{"code":"(fn sum [s]\n\t(if (not (empty? s))\n\t\t(+ (first s) (sum(rest s)))\n\t\t0))","problem":24,"user":"53981cbce4b0b51d73faaef5"},{"problem":24,"code":"reduce (fn [sum el] (+ sum el)) 0","user":"5c201002e4b07e362c230571"},{"code":"(fn sum [seq] (if (empty? seq) 0 (+ (first seq) (sum (rest seq)))))","problem":24,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":24,"code":"(fn sumItAllUp [col] (if (= col nil) 0 (+ (first col) (sumItAllUp (next col)))))","user":"55204412e4b08d5046aa8a5f"},{"code":"(fn [xs] (reduce (fn [x y] (+ x y)) xs))","problem":24,"user":"4e89de60535d3e98b8023285"},{"problem":24,"code":"(fn [in] (reduce + 0 in))","user":"5ff88607e4b06df49cee14a6"},{"problem":24,"code":"(fn summer [s]\n  (if (empty? s)\n    0\n    (+ (summer (rest s)) (first s))))","user":"60ad8af3e4b00e9e6653c490"},{"code":"(fn [xs]\n  (reduce + 0 xs))","problem":24,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn [s]\n  (loop [s s\n         tot 0]\n    (if (seq s)\n      (recur (rest s) (+ tot (first s)))\n      tot)))","problem":24,"user":"511a5328e4b09045b2b16946"},{"code":"(fn [ls] (reduce + 0 ls))","problem":24,"user":"4ff8fb9ae4b0678c553fc3a4"},{"problem":24,"code":"(fn [data] (reduce + data))","user":"5a4d8a04e4b05d388ecb6bac"},{"code":"(fn [seq]\n  ((fn sumSeq [seq n]\n    (if (= (count seq) 0)\n      n\n      (sumSeq (rest seq) (+ n (first seq)))\n    )\n  ) seq 0)\n)","problem":24,"user":"4fc4fe59e4b081705acca36a"},{"code":"(fn sum [seq] \n  (if (not-empty seq) \n    (+ (first seq) (sum (rest seq)))\n    0))","problem":24,"user":"4f96e47ae4b0dcca54ed6ce1"},{"problem":24,"code":"(fn sum [brojevi] (reduce + brojevi))","user":"54aef4d0e4b09f271ff37cfe"},{"problem":24,"code":"(fn [xs]\n  (loop [total 0\n         rem_xs xs]\n    (let [x (first rem_xs)]\n          (if x\n      (recur (+ total x) (rest rem_xs))\n      total)\n      )\n  )\n)","user":"5da07698e4b000c986472bd3"},{"problem":24,"code":"(fn sum-it-up [seq]\n  (reduce (fn [acc curr]\n            (+ acc curr)) 0 seq))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":24,"code":"(fn sumitup [s]\n  (cond\n   (= '() s) 0\n   :else (+ (first s) (sumitup (rest s)))))","user":"58138439e4b0f478707a0611"},{"code":"(fn [n] (apply + n))","problem":24,"user":"510c16afe4b078ea7192110f"},{"problem":24,"code":"#(loop [haha 0 coll %]\n   (if (empty? coll) haha\n   (recur (+ (first coll) haha)(rest coll))))","user":"5756eff6e4b02ea1147992e7"},{"code":"(fn sum [coll] (reduce #(+ %1 %2) coll))","problem":24,"user":"51841e0ae4b02826a645f396"},{"problem":24,"code":"(fn summa [ls]\n  (if (first ls)\n    (+ (first ls) (summa (rest ls)))\n    0\n    )\n  )","user":"564716e6e4b0284900eef616"},{"problem":24,"code":"#(loop  [x   0  y  %] \n   (if (= [] y) x\n     (recur (+ x (first y)) (rest y))))","user":"5e81f009e4b09a7a73c8bbaf"},{"code":"(fn [l] \n  (reduce + 0 l))","problem":24,"user":"4e6a48da535d8ccf87e9febe"},{"code":"(fn counter [x]\n  (if (not (empty? x))\n    (+ (first x) (counter (rest x)))\n    0\n  )\n)","problem":24,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":24,"code":"#(reduce (fn [mysum curr] (+ mysum curr)) %)","user":"5baa5f53e4b0a20761a23459"},{"code":"(fn [x]\n  (loop [remain x thisSum 0]\n    (cond\n      (empty? remain) thisSum\n    :else (recur (rest remain) (+ (first remain) thisSum)))))","problem":24,"user":"4e13c44a535d04ed9115e7db"},{"problem":24,"code":"(fn [coll]\n  ((fn [coll res]\n     (if (empty? coll)\n       res\n       (recur (rest coll) (+ res (first coll)))\n     )\n   ) coll 0)\n )","user":"57780dd8e4b0979f89651656"},{"code":"#((fn sum [col i] (if (empty? col) i (+ (sum (rest col) i) (first col)))) % 0)","problem":24,"user":"52a8d0e6e4b0c58976d9ac37"},{"problem":24,"code":"#(loop [l %, acc 0]\n       (if (empty? l)\n         acc\n         (recur (rest l) (+ acc (first l)))))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"reduce (fn[a b] (+ a b)  ) 0","problem":24,"user":"4ee8fc1e535d93acb0a66887"},{"problem":24,"code":"(fn sum [seqi]\n  (loop [elem seqi res 0]\n    (if (seq elem)\n      (recur (rest elem)(+ (first elem) res))\n      res)))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"#( loop [sum 0 li %1]\n    (if (= () (take 1 li))\n      sum\n      (recur (+ sum (first li))(rest li))))","problem":24,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":24,"code":"(fn [someList]\n  (reduce + someList)\n  )","user":"5972198ee4b01722bebd4c7d"},{"code":"(fn [s]\n  (loop [v s acc 0]\n    (if (seq v)\n      (recur (rest v) (+ acc (first v)))\n      acc\n      )))","problem":24,"user":"5312452be4b08068f379ecf8"},{"code":"(fn [lst] (apply + lst))","problem":24,"user":"4ec6c878535d6d7199dd36d5"},{"code":"(fn [col]\n  (reduce + 0 col))","problem":24,"user":"4ef992c8535dced4c769f268"},{"problem":24,"code":"#(reduce (fn [acc x] (+ x acc)) %)","user":"5a5be1ece4b0512ff01cd90f"},{"code":"(fn [xs] \n  ((fn [ys sum] \n    (  \n      if (= () ys)\n      sum\n      (recur (rest ys) (+ sum (first ys)))\n\n\n    )\n\n\n   ) xs 0)\n\n\n)","problem":24,"user":"4f8da0e2e4b02e764a0a51b1"},{"problem":24,"code":"(fn [s]\n  (loop [x 0\n         s s]\n    (if s\n      (recur (+ x (first s))\n                (next s))\n      x)))","user":"5703cbbee4b08d47c97781fb"},{"problem":24,"code":"(fn [s]\n  (reduce\n    (fn [a b]\n      (+ a b)) 0 s))","user":"565233f2e4b0f9d632dd8461"},{"code":"reduce #(+ %  %2)","problem":24,"user":"53021823e4b0d8b024fd3724"},{"problem":24,"code":"(fn [x] (loop [xs (seq x)\n                result 0]\n           (if xs\n             (let [x (first xs)]\n               (recur (next xs) (+ result x)))\n             result)))","user":"5af361d4e4b0cc2b61a3bc83"},{"problem":24,"code":"(fn __ [set] (reduce + set))","user":"5d615431e4b0c9e5857d5010"},{"code":"reduce +  0","problem":24,"user":"4f0d45de535d0136e6c22315"},{"problem":24,"code":"#(reduce (fn [acc lst](+ acc lst)) 0 %)","user":"5bec37e2e4b0f319e2d7ec96"},{"code":"(fn [nums] (apply + nums))","problem":24,"user":"512bcd74e4b04d059cf1fd19"},{"problem":24,"code":"#(reduce (fn [curr nextele] (+ curr nextele)) 0 %)","user":"5af1cb6be4b0cc2b61a3bc64"},{"problem":24,"code":"(fn sum [seqn] (reduce + seqn))","user":"5c8cfff8e4b048ec896c5996"},{"code":"(fn [set]\r\n    ((fn [setx sum]\r\n      (if (empty? setx)\r\n        sum\r\n        (recur (rest setx) (+ sum (first setx)))\r\n      )\r\n    ) set 0\r\n    )\r\n  )","problem":24,"user":"4dd6fa3a535d2dad7130b5ce"},{"code":"(fn [x] \n  (loop [sum 0 li x]\n    (if (= (count li) 0)\n      sum\n      (recur (+ sum (first li)) (rest li)))))","problem":24,"user":"4ea0a7c7535d7eef308072ab"},{"code":"(partial reduce (partial + 0))","problem":24,"user":"4f04d011535dcb61093f6be5"},{"problem":24,"code":"(fn sum-seq [v] \n  (reduce + v))","user":"5cab0766e4b048ec896c5c45"},{"code":"(fn z [x] (if (= x '()) 0 (+ (first x) (z (rest x)))))","problem":24,"user":"4fd153cee4b04c3a95aa040e"},{"problem":24,"code":"(fn sm-sum [x] (if (first x) (+ (first x) (sm-sum (rest x))) 0) )","user":"5575aae2e4b05c286339e065"},{"code":"(fn [ls]\n  (reduce + ls))","problem":24,"user":"530f5929e4b08068f379ecc8"},{"problem":24,"code":"(fn sum [x] (if (empty? x)\n  \t\t\t    0\n                (+ (first x) (sum (rest x)))))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn rueckw [cc]\r\n                    (loop [cc cc rev 0]\r\n                       (if (= 1 (count cc))\r\n                         (+ (first cc) rev)\r\n                         (recur (rest cc) (+ (first cc) rev)))) )","problem":24,"user":"4fe4614ee4b0e8f79898feb3"},{"code":"(fn [x]\n  (apply + x)\n)","problem":24,"user":"4eb7ff08535d7eef30807379"},{"problem":24,"code":"(fn sumatorio [n]\n  (loop [n n acc 0]\n    (if (empty? n)\n      acc\n      (recur (rest n) (+ (first n) acc)))))","user":"5dddcface4b0948ae9d9adcd"},{"problem":24,"code":"(fn [x] (loop [l x\n               r 0]\n          (if (empty? l) r\n            (recur (rest l) (+ r (first l))))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":24,"code":"(fn [mylist] (reduce + mylist) )","user":"545e5805e4b01be26fd74679"},{"problem":24,"code":"(fn [seq]\n  (reduce + seq)\n  )","user":"5ccaed31e4b0ccb061962877"},{"code":"(fn [sq] (reduce (fn [s i] (+ s i)) 0 sq))","problem":24,"user":"5319d9ade4b08068f379ed84"},{"code":"(fn foo [x]\n  (if (empty? x) 0 (+ (first x) (foo (rest x)))))","problem":24,"user":"537cd1dce4b06839e8705e7e"},{"problem":24,"code":"(fn [x]\n  (loop [sum 0\n         x x]\n    (if (= nil (next x))\n      (+ sum (first x))\n      (recur (+ sum (first x)) (rest x)))))","user":"5af047b8e4b0cc2b61a3bc48"},{"code":"#(\n  \n  reduce + %  \n)","problem":24,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":24,"code":"#(loop[l %, s 0]\n   (if (nil? l)\n     s\n     (recur (next l) (+ s (first l)))))","user":"565f9aece4b068f2fe63dc42"},{"code":"(fn soma [x]\n  (loop [aux x acc 0]\n  (if(empty? aux)\n    acc\n    (recur (rest aux )(+ acc (first aux)))    \n   )\n   ) \n)","problem":24,"user":"4e94aab8535dbda64a6f6b1f"},{"code":"#(apply +  %)","problem":24,"user":"4e6df3c9535d5021c1a895fa"},{"code":"(fn sum [xs] (loop  [s-so-far 0 xs' xs] (if (empty? xs') s-so-far (recur  (+ s-so-far (first xs')) (rest xs')))))","problem":24,"user":"52fc9bc9e4b047fd5583701e"},{"code":";; reduce without an initial parameter will take the first element and second element as parameters, then use the result as the first parameter\n;; with the third element as the second, then use the result as the first paramater with the fourtt etc..\n;; In this case, we just need to add the entire list's contents, so we can reduce an addition function +\n\nreduce +","problem":24,"user":"50955676e4b087f34d351ab1"},{"problem":24,"code":"(fn sum-values\n  [args]\n  (reduce + args))","user":"5b86462de4b047b03b2037df"},{"code":"(fn [x] \n  (loop [coll x sum 0]\n  (if (empty? coll) \n    sum\n  (recur(rest coll)(+ sum (first coll))))))","problem":24,"user":"4f57a153e4b0a7574ea7183a"},{"code":"(fn sum [seq]\n  (if (empty? (rest seq))\n    (first seq)\n    (+ (first seq) (sum (rest seq)))))","problem":24,"user":"503e6047e4b06c4e0e1fa266"},{"problem":24,"code":"(fn [y] (reduce (fn [acc x] (+ acc x)) 0 y))","user":"53bd6ad0e4b0d9a98559a6cf"},{"problem":24,"code":"reduce (fn [a b]\n         (+ a b))","user":"5512aca6e4b055c2f668d4b4"},{"problem":24,"code":"(fn resum\n  ([x]\n    (if (empty? x)\n      '()\n      (resum (rest x) (first x))))\n  ([x y]\n   (if (empty? x)\n     y\n     (resum (rest x) (+ y (first x))))))","user":"5b847d39e4b047b03b2037c1"},{"problem":24,"code":"#((fn sum-all [s a]\n  (if\n    (empty? s) a\n    (sum-all (rest s) (+ (first s) a)))) % 0)","user":"5959b0ede4b066ee0a44afaa"},{"problem":24,"code":"(fn [s]\n  (reduce \n   (fn [p c] (+ p c))\n   0\n   s\n  )\n)","user":"57f55632e4b0903ccab3dcf1"},{"problem":24,"code":"(fn [sequ]\n  (reduce + sequ))","user":"5b102ab8e4b0cc2b61a3be19"},{"problem":24,"code":"(fn sum_all [coll] (reduce + 0 coll))","user":"5f03550ce4b0cf489e8d7f33"},{"problem":24,"code":"(fn sum-up [to-sum]\n  (reduce + to-sum))","user":"5845720de4b089d5ab817e68"},{"problem":24,"code":"(fn [ls]\n  (loop [ls ls\n         acc 0]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (+ acc (first ls))))))","user":"54d492dbe4b0a52adc2e2001"},{"code":"(fn [lst]\n  (loop [my-lst lst acc 0]\n    (if (empty? my-lst)\n        acc\n        (recur (rest my-lst) (+ (first my-lst) acc)))))","problem":24,"user":"4f122bfe535d64f603146426"},{"code":"(fn [coll]\n  (loop [total-sum 0\n        coll coll]\n    (if coll\n      (recur (+ total-sum (first coll)) (next coll))\n      total-sum)))","problem":24,"user":"50ab38a8e4b0f65d68208507"},{"code":"(fn [s]\n  (reduce #(+ %1 %2) 0 s))","problem":24,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":24,"code":"(fn sum [nums]\n  (if (= (count nums) 1)\n    (first nums)\n    (+ (first nums) (sum (rest nums)))))","user":"55d564ece4b0e31453f64a85"},{"problem":24,"code":"(fn sum [l]\n  (loop [lst l\n         acc 0]\n    (let [head (first lst)\n          tail (rest lst)]\n      (if-not head\n        acc\n        (recur tail (+ head acc))))))","user":"600ae927e4b074f607df6689"},{"problem":24,"code":"; reduce #(+ %1 %2)\n; apply + 0\nreduce +","user":"591d182ee4b09b4ee5954c10"},{"problem":24,"code":"#(reduce + (map (fn[x](+ x)) %))","user":"53c1be8ae4b00fb29b221267"},{"code":"(fn [seq] (reduce + seq ))","problem":24,"user":"50b525c5e4b0c464d223d1c3"},{"code":"(fn mysum[x]\n  (if (= (count x) 1)\n    (first x)\n   \t(+ (first x) (mysum (rest x)))))","problem":24,"user":"5171069be4b0d70c8bbbf238"},{"problem":24,"code":"(fn [sequence]\n    (loop [in sequence result 0]\n        (if (empty? in)\n            result\n            (recur (rest in) (+ result (first in)))\n        )\n    )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":24,"code":"(fn [nums]\n  (reduce (fn [sum num] (+ sum num)) nums))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn [elems]\n  (reduce + 0 elems))","problem":24,"user":"536f871de4b0fc7073fd6e7f"},{"code":"#(reduce (fn [x,y] (+ x y)) 0 %)","problem":24,"user":"51a0cefbe4b0b292b01ee3f8"},{"problem":24,"code":"(fn [in]\n  (loop [x 0\n         xs in]\n    (if (> (count xs) 1)\n      (recur (+ x (first xs)) (rest xs))\n      (+ (first xs) x))))","user":"578606d2e4b0ebec4cfb74ec"},{"problem":24,"code":"(fn  [nums]\n  (reduce + nums))","user":"55fbcbb1e4b0f488688e0668"},{"code":"(fn [xs] (reduce (fn [y z] (+ y z)) 0 xs))","problem":24,"user":"4e52654b535d302ef430da73"},{"problem":24,"code":"(fn\n  [input]\n  (loop\n    [s input\n     sum 0]\n    (if (= s nil)\n      sum\n      (recur (next s) (+ sum (first s))))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":24,"code":"(fn [a] (reduce #(+ %1 %2) 0 a))","user":"549ea7e0e4b0f3d1d8e70fa3"},{"problem":24,"code":"(fn sumSeq [coll] (reduce + coll))","user":"58597562e4b0f14aab7c8734"},{"problem":24,"code":"(fn recursivesum [sqn]\n  (if (= sqn '() )\n    ;then\n    0\n    ;else\n    (+ (first sqn) (recursivesum (rest sqn)))\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn[x lat](reduce + lat) ) 0","problem":24,"user":"52e614b8e4b09f7907dd1469"},{"code":"(fn someshit [s] \n  (if (= 1 (count s))\n    (first s)\n    (+ (someshit (next s)) (first s))))","problem":24,"user":"51516f35e4b03e678e393acd"},{"problem":24,"code":"#(loop [[head & rest] (seq %) c 0] (if (nil? rest) (+ c head) (recur rest (+ c head))))","user":"55f7dc24e4b06e875b46ceb3"},{"problem":24,"code":"(fn [a-seq] (apply + a-seq))","user":"54b972bbe4b0ed20f4ff6ead"},{"problem":24,"code":"(fn [search-list]\n(loop [lst search-list sum 0]\n\t(println sum lst)\n\t(if (empty? lst)\n\t\tsum\n\t\t(recur (rest lst) (+ sum (first lst)))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":24,"code":"(fn [list]\n  (reduce #(+ %1 %2) list))","user":"5b94e4c6e4b0c0b3ffbd4a5b"},{"problem":24,"code":"#(loop [count 0 ens (into [] %)]\n   (if (empty? ens)\n     count\n     (recur (+ count (first ens)) (rest ens))\n   )\n)","user":"55acb648e4b03311e7b73296"},{"problem":24,"code":"(fn [coll]\n  (reduce (fn [acc x] (+ acc x)) 0 coll))","user":"5d273ef8e4b092dab7f59c69"},{"problem":24,"code":"(fn [a,s] (if (= s ()) a (recur (+ a (first s)) (rest s)))) 0","user":"55c0a40be4b01b9910ae2a26"},{"code":"(fn sum [x] (if (= 1 (count x)) (first x) (+ (first x) (sum (rest x)))))","problem":24,"user":"52d6889ae4b09f7907dd1361"},{"code":";;; dispatch macro\n;;; see http://clojure.org/reader\n; #(apply + %)\n;;; still not clear on the difference between apply and reduce\n;;; this answer is not comprehensive enough for me: http://stackoverflow.com/questions/3153396/clojure-reduce-vs-apply\n; #(reduce + %&)\n;;;\n;;; using a standard anonymous function with apply\n; http://clojure.org/sequences#Sequences-The%20Seq%20library-Using%20a%20seq=\n; (fn [x] (apply + x))\n(fn [x] (apply + x))","problem":24,"user":"52e753abe4b09f7907dd1484"},{"code":"#(reduce (fn [a b] (+ a b)) 0 %)","problem":24,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"(fn sum [coll]\n  (reduce + coll))","problem":24,"user":"505acd20e4b021387fb8985a"},{"code":"(fn foo [lst] (if (= '() lst) 0 (+ (first lst) (foo (rest lst)))))","problem":24,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":24,"code":"(fn sum [s] \n  (if (empty? s)\n    0\n    (+ (first s) (sum (rest s)))))","user":"567debb5e4b05957ce8c61ce"},{"problem":24,"code":"(fn [sqnc] (reduce + sqnc))","user":"57d6c5cae4b0bd073c2023ce"},{"problem":24,"code":"#(reduce (fn [x q] (+ q x)) 0 %)","user":"54a30320e4b09f271ff37c62"},{"problem":24,"code":"(fn [x]\n  (loop [sumsofar 0 listleft x]\n    (if (empty? listleft)\n      sumsofar\n      (recur (+ sumsofar (first listleft)) (rest listleft))\n    )\n  )\n)","user":"5d62da51e4b0c9e5857d5020"},{"code":"(fn [se] (reduce + se))","problem":24,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn x [coll] (reduce + coll))","problem":24,"user":"4e4be570535dc968683fc4d8"},{"code":"#((fn sumitup [l, res]\n    (if (empty? l)\n      res\n      (sumitup (rest l) (+ res (first l)))))\n  % 0)","problem":24,"user":"50c84ba2e4b00bb60fe0c53e"},{"code":"#(reduce (partial + 0) %)","problem":24,"user":"4ecc147b535d23f0362276f7"},{"problem":24,"code":"(fn sum-it-all-up [col]\n  (reduce + 0 col))","user":"5f24671fe4b0f565ad998291"},{"problem":24,"code":"(fn [Karte] (reduce + Karte))","user":"5b35de7be4b02d533a91bb97"},{"code":"(fn sol [l]\n    (if (seq l)\n      (+ (first l) (sol (rest l)))\n      0))","problem":24,"user":"5374cbf4e4b06d7f452d9e29"},{"code":"(fn sum [ls]\n  (if (empty? ls)\n    0\n    (+ (first ls) (sum (rest ls)))))","problem":24,"user":"521a4ff5e4b0c4ef0be83004"},{"code":"(fn [x] \n  (reduce + x))","problem":24,"user":"4f4c8faae4b03ad3f0c10c93"},{"code":"(fn sum \n  ([sq] (sum sq 0))\n([sq acc] (if (empty? sq) \nacc (recur (rest sq) (+ acc (first sq))))))","problem":24,"user":"50563ae2e4b0ce54f56f0405"},{"problem":24,"code":"(fn [x] (reduce (fn [acc v] (+ acc v)) 0 x))","user":"5af20ce0e4b0cc2b61a3bc69"},{"code":"(fn seq-sum [s]\n  (loop [acc 0 s0 s]\n    (if (empty? s0)\n      acc\n      (recur (+ acc (first s0)) (rest s0)))))","problem":24,"user":"4e6a2503535d8ccf87e9fea2"},{"code":"(fn [l]\n  (reduce (fn [a b] (+ a b)) 0 l))","problem":24,"user":"52138d11e4b0d32679a5065c"},{"problem":24,"code":"reduce (fn [s e] (+ s e)) 0","user":"5e44f5b1e4b01d43a70e8e8d"},{"problem":24,"code":"(fn [l] (loop [cl l cs 0] (if (empty? cl) cs (recur (rest cl) (+ cs (first cl))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":24,"code":"(fn [xs]\n  (reduce #(+ %1 %2) 0 xs))","user":"5682d5b4e4b0945ebc182a95"},{"code":"#(reduce (fn [acc,x] (+ acc x)) %)","problem":24,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":24,"code":"(fn foo [x]\n  (reduce + x)\n)","user":"5a58524ee4b05d388ecb6c7f"},{"code":"#(reduce + %1 )","problem":24,"user":"4df8644f535d04ed9115e778"},{"problem":24,"code":"(fn f [col]\n  (reduce + col))","user":"575fbe58e4b08062f99a4e87"},{"code":"(fn sum-list[x]\n  (reduce (fn [a b] (+ a b)) x))","problem":24,"user":"4fe8b85be4b07c9f6fd12c77"},{"problem":24,"code":"(fn [x]\n  (loop [sq x sum 0]\n    (if (empty? sq)\n      sum \n      (recur (rest sq) (+ sum (first sq))))))","user":"5db16084e4b010eb3c36cd01"},{"code":"#(apply + %)\n\n;; austintaylor's solution\n;; reduce +","problem":24,"user":"51392535e4b0a5db03d727e1"},{"problem":24,"code":"(fn [ns]\n   (reduce + ns))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":24,"code":"(fn [meg] (reduce + meg))","user":"593e01cde4b069cdc2982bb3"},{"code":"(fn [nums]\n  (loop [s 0, n nums]\n\t\t(if (not (= '() n))\n\t\t\t(recur (+ s (first n)) (rest n))\n\t\t\ts)))","problem":24,"user":"4e641bfd535d8ccf87e9fe67"},{"problem":24,"code":"#((fn f [l n] (if (= l '())\n            n\n            (f (rest l) (+ n (first l))))) % 0)","user":"559248c0e4b0604b3f94d58b"},{"problem":24,"code":"(fn [s] \n  (reduce (fn [acc v] \n                  (+ acc v))\n          0\n          s))","user":"5d53a59ae4b0776584bd6f72"},{"code":"#(reduce + (map (fn [x] x) %))","problem":24,"user":"4f5b57e9e4b0030a34fb2b02"},{"code":";#(apply + %)\n(partial apply +)","problem":24,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn sum-seq [s]\n  (loop [sum 0, r s]\n    (if (seq r)\n      (recur (+ (first r) sum) (rest r))\n      sum)))","problem":24,"user":"536c35c3e4b0fc7073fd6e3a"},{"problem":24,"code":"(fn sumOfSeq [x]\n  (if (empty? x) 0\n\t(+ (first x) (sumOfSeq (rest x)))\n   )\n )","user":"5fdb51fae4b05ac5b16ea12f"},{"problem":24,"code":"(fn [input-list]\n  (reduce + input-list)\n  )","user":"5909b3f8e4b047aa04b199a4"},{"problem":24,"code":";; #(apply + %)\n\n;; reduce +\n\napply +","user":"591ad160e4b09b4ee5954bdf"},{"problem":24,"code":"(fn [s](\n  reduce + s))","user":"5f9f744fe4b0715f5002d841"},{"problem":24,"code":";#(reduce + %)\napply +","user":"5604ae27e4b0c80df0ca2663"},{"problem":24,"code":"#(reduce +  0 %)","user":"55c4ae19e4b0e31453f649a1"},{"problem":24,"code":"#(loop [s % r 0] \n   (if (empty? s) r\n     (recur (rest s) \n            (+ r (first s))\n            )))","user":"5e85163be4b09a7a73c8bbd0"},{"code":"(fn sum [x]\r\n  (if-not (next x)\r\n    (first x)\r\n    (+ (first x) (sum (next x)))))","problem":24,"user":"4fea7bc4e4b0140c20fb9c07"},{"problem":24,"code":"(fn [numbers] (reduce #(+ %1 %2) 0 numbers))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn f [c]\n  (if (zero? (count c))\n    0\n    (+\n     (first c)\n     (f(rest c))\n     )\n    )\n  )","problem":24,"user":"52ae886de4b0c58976d9acab"},{"problem":24,"code":"#(reduce (fn [m i] (+ m i)) 0 %)","user":"55f1a939e4b06e875b46ce33"},{"code":"(fn [coll] (reduce (fn [a b] (+ a b)) coll))","problem":24,"user":"51ad54cee4b09397d5109781"},{"problem":24,"code":"(fn sumit [x] (reduce + x))","user":"54f405e0e4b0f2f3c5226e79"},{"problem":24,"code":"(fn sum\n  [arg] \n  (\n   (fn subsum \n     [s n]\n     (if (empty? s) \n       n \n       (+ n \n          (subsum (rest s) (first s))\n          ) ; +\n       ) ; if\n     ) ; fn\n   (seq arg) 0\n   ) ; call \n  )","user":"575689f2e4b02ea1147992dd"},{"problem":24,"code":"(fn [x]\n  (reduce + x)) ; also possible: (apply + x)","user":"543be8f0e4b032a45b869337"},{"problem":24,"code":"(fn[coll](\n          reduce + coll\n          ))","user":"592b7269e4b072a2710fcf3f"},{"code":"(fn sum [xs]\n  (apply + xs))","problem":24,"user":"521e0b80e4b0dd19981ad069"},{"problem":24,"code":"(fn sumall [values]\n  (loop [values values sum 0]\n    (if (seq values) (recur (rest values) (+ sum (first values))) sum)))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn[x](reduce + x))","problem":24,"user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn abc [s] (loop [s s, n 0] (if (next s) (recur (next s) (+ (first s) n)) (+ (first s) n))))","problem":24,"user":"5029399be4b061fd216be4b6"},{"problem":24,"code":"(fn [items]\n  (reduce + items))","user":"572a997ce4b0f4d77e65123e"},{"code":"(fn\n  [numbers]\n  (reduce + 0 numbers)\n)","problem":24,"user":"53951c75e4b0b51d73faaed4"},{"problem":24,"code":"(fn sum\n  [xs]\n  (if (empty? xs)\n    0\n    (+ (first xs) (sum (rest xs)))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn sm [x] (if (empty? x) 0 (+ (first x) (sm (next x)))))","problem":24,"user":"537f8e7be4b06839e8705eb8"},{"problem":24,"code":"(partial \n (fn [res coll] \n   (if (empty? coll) res\n     (recur (+ (first coll) res)(rest coll)))) \n 0)","user":"5d89de0de4b0915913b1d3c0"},{"problem":24,"code":"reduce (fn [x,y] (+ x y)) 0","user":"5526c78fe4b0ffed3738f926"},{"code":"(fn [seq]\n  (apply + seq))","problem":24,"user":"4e932f38535dbda64a6f6b0c"},{"problem":24,"code":"#(reduce + 0 (seq %))","user":"5516a874e4b06a49daca83b5"},{"problem":24,"code":"#(reduce (fn [s x] (+ s x)) %)","user":"54c779bee4b045293a27f63b"},{"problem":24,"code":"(fn  \n\t[inputThing]\n\n\t(loop [i 0 sum 0 tmpList (into [] inputThing)]\n\t\t(if (= (count  tmpList) i)\n\t\t\tsum\n\t\t\t(recur (inc i) (+ sum (nth tmpList i)) tmpList)\n\t\t)\n\t)\n\t)","user":"5d8b3d5be4b0915913b1d3d1"},{"problem":24,"code":"(fn sum [x] (\n                     if(= 1 (count x))\n                     (first x)\n                     (+ (sum (rest x)) (first x))\n                     )\n  )","user":"584984d4e4b089d5ab817ed3"},{"problem":24,"code":"#(reduce + %)\n\n;(fn [coll] \n;  (loop [sum 0 coll coll]\n;    (if (empty? coll)\n;      sum\n;      (recur (+ sum (first coll)) (rest coll)))))","user":"546a6dbbe4b00cfc9eacc156"},{"problem":24,"code":"(fn sum [coll]\n (cond\n  (empty? coll) 0\n  :else (+ (first coll) (sum (rest coll)))\n  ))","user":"559f06bae4b0acc240e314e6"},{"problem":24,"code":"#(reduce (fn [acc x] (+ x acc)) 0 %)","user":"52c634b1e4b0c2d177d6210a"},{"code":"(fn [s] (apply #'+ s))","problem":24,"user":"4e43c91f535dc968683fc4a5"},{"code":"(fn sumofseq [coll] (apply + coll))","problem":24,"user":"511937eee4b055cfb310d495"},{"problem":24,"code":"(fn sumUp \n  ([s] (sumUp s 0))\n  ([s acc] \n    (if (empty? s)\n       acc\n       (sumUp (rest s) (+ acc (first s)))\n      )\n   )\n  )","user":"57fe840ae4b0d3187e9009d3"},{"code":"(fn f [coll]\n  (if (empty? coll) 0\n      (+ (first coll) (f (rest coll)))))","problem":24,"user":"51d7f34fe4b0154f82ab9303"},{"problem":24,"code":"(fn [numbers]\n  (reduce + numbers))","user":"585669d6e4b0f14aab7c86f3"},{"problem":24,"code":"#(reduce (fn [x y]\n         (+ x y)\n         )\n0 %)","user":"58f286e1e4b08e1cf3471d04"},{"code":"(fn [x]\n  (reduce + 0 x))","problem":24,"user":"503ee85ce4b06c4e0e1fa26e"},{"code":"(fn [s] (\n  (fn [s t]\n    (if s\n      (recur (next s) (+ (first s) t))\n      t)) s 0))","problem":24,"user":"50d2e74ae4b03c62ef244480"},{"problem":24,"code":"(fn [numbers]\n    (reduce + numbers)\n)","user":"53b492a5e4b047364c0444b6"},{"code":"(fn [xs]\n  (reduce + xs))","problem":24,"user":"4e667f67535d8ccf87e9fe77"},{"problem":24,"code":"(fn sum [coll]\n  (if (= coll [])\n    0\n    (+ (first coll) (sum (rest coll)))))","user":"53b14dfce4b047364c04448d"},{"problem":24,"code":"(fn[xs](apply + xs))","user":"59afe4bae4b0e1f4e384c8c0"},{"code":"(fn [x] (loop [old x sum 0](if (= old ()) sum (recur (rest old) (+ sum (first old))))))","problem":24,"user":"51a7f74be4b08d8ec191b802"},{"problem":24,"code":"(fn sumseq [x] (if (empty? (rest x)) (first x) (+ (sumseq (rest x)) (first x))))","user":"5dbd86bce4b09f47823971bf"},{"code":"(fn sum-seq [seq]\n  (reduce + seq))","problem":24,"user":"4ec670bc535d6d7199dd36cf"},{"problem":24,"code":"(fn \n  [arrIn]\n  (reduce + arrIn))","user":"5e1b0140e4b0dc959400851c"},{"code":"(fn sm [l] (if (nil? (next l)) (first l) (+ (first l) (sm (next l)))))","problem":24,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn [s]\n  (loop [r   s\n         acc 0]\n    (if (seq r)\n      \t(recur (rest r) (+ acc (first r)))\n        acc      \t\n    )\n  )\n)","problem":24,"user":"52c45793e4b0c2d177d620d7"},{"code":"(fn sum \n  ([l] (sum l 0))\n  ([l x] (let [y (first l) z (next l) w (+ x y)] \n          (if z (recur z w) w) \n      )\n  )\n)","problem":24,"user":"4e44358f535dc968683fc4a8"},{"problem":24,"code":"(fn my-sum [lst]\n  (loop [res 0 lstp lst]\n    (if (empty? lstp)\n      res\n      (recur (+ res (first lstp)) (rest lstp)))))","user":"59dd387be4b0a0ac046f2502"},{"problem":24,"code":"#(loop [s % n 0]\n\n   (if (nil? (first s))\n\n     n\n\n     (recur (rest s) (+ n (first s)))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":24,"code":"(fn add-list\n    [lst]\n    (reduce + lst))","user":"5e95013fe4b0fbed045a3800"},{"problem":24,"code":"(fn [x] \n  (reduce (fn [i j] (+ i j))\n          0 x))","user":"5984b9f3e4b021a7a535fe33"},{"code":"(fn sum [x]\n    (if (empty? x) \n      0\n      (+ (sum (rest x)) (first x))))","problem":24,"user":"50588af1e4b06522596eba7d"},{"code":"#(reduce (fn [s c] (+ s c)) 0 %)","problem":24,"user":"4e6b07dd535d8ccf87e9ff0a"}]