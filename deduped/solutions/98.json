[{"problem":98,"code":"(fn equivalence-class [f domset]\n\t(loop [domain domset, res {}]\n\t\t(let [elem (first domain)]\n\t\t\t(if (= nil elem) \n\t\t\t\t(set (vals res))\n\t\t\t\t(recur\n\t\t\t\t\t(next domain)\n\t\t\t\t\t(assoc (dissoc res (f elem)) (f elem)\n\t\t\t\t\t\t(conj (get res (f elem) #{}) elem)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":98,"code":"(fn [f ss]\n  (into #{} (vals (reduce (fn [eqs s] (merge-with clojure.set/union {(f s) #{s}} eqs)) #{} ss))))","user":"54d7e277e4b0a52adc2e2031"},{"problem":98,"code":"(fn [p xs] (->> (map #(vector (p %) %) xs)\n     (group-by first)\n     vals\n     (map #(set (map second %)))\n     set))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [f xs]\n  (set (map #(-> % second set) (group-by f xs))))","problem":98,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn [f d] \n  (set (vals \n   (reduce #(assoc % (f %2) (conj (% (f %2) #{}) %2)) {} d))))","problem":98,"user":"50c781bbe4b00bb60fe0c535"},{"code":"(fn equivalence-classes [f D]\n  (into #{} (vals (reduce (fn [accum x]\n                            (update-in accum\n                                       [(f x)]\n                                       #(if % (conj % x) #{x})))\n                          {}\n                          D))))","problem":98,"user":"52be58d7e4b07a9af579231d"},{"code":"#(into #{} (map (comp set second) (group-by % %2)))","problem":98,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn test98 [f coll]\n  (->> coll\n       (group-by f)\n       vals\n       (map set)\n       set))","problem":98,"user":"50b0cffae4b009df37c708c5"},{"code":"(fn equiv-classes [f coll]\n  (->> coll\n       (group-by f)\n       (vals)\n       (map #(apply hash-set %))\n       (apply hash-set)))","problem":98,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":98,"code":"(fn ! [f s] \n  (let [vs (map f s)\n        dvs (distinct vs)\n        re (set (map #(set (filter (fn [el] (= (f el) %)) s)) dvs))]\n    re))","user":"52faec2ee4b047fd55837004"},{"code":"(fn equiv [f D]\n  (set\n   (for [x D]\n         (reduce (fn [acc y]  (if (= (f x) (f y)) (conj acc y) acc))\n           #{} D))))","problem":98,"user":"50783762e4b0fc74642bff67"},{"code":"(fn [f s] (set (map (comp set val) (group-by f s))))","problem":98,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [f coll]\n  (set (map #(set (val %)) (group-by f coll))))","problem":98,"user":"4e6defcc535d5021c1a895f8"},{"problem":98,"code":"(fn equi [f dom]\n  (letfn\n    [(equi? [x cl] (= (f x) (f (first cl))))\n     (clasifica [x classes newclasses]\n       (let \n         [cl (first classes)\n          re (rest classes)]\n         (if \n           (empty? classes)\n           (conj newclasses #{x})\n           (if\n             (equi? x cl)\n             (clojure.set/union newclasses #{(conj cl x)} re)\n             (recur x re\n               (conj newclasses cl))))))\n     (acumula [classes x] (clasifica x classes #{}))]\n    (reduce acumula #{} dom)))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":98,"code":"(fn [f coll]\n   (set (map set (vals (group-by f coll)))))","user":"545e9cf1e4b01be26fd7467f"},{"code":"#(set (map set (vals (set (group-by % %2)))))","problem":98,"user":"4f08b15b535dcb61093f6c40"},{"problem":98,"code":"(fn[f s](set(map #(set(map first(val %)))(group-by val(zipmap s(map f s))))))","user":"4db2903f535df7e46ed9b6bf"},{"problem":98,"code":"(fn [f args]\n  (->>\n    args\n    (reduce #(update-in %1 [(f %2)] conj %2) {})\n    vals\n    (map set)\n    set))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":98,"code":"(fn [f coll]\n    (->> (map #(filter\n                (fn [v]\n                  (= (f %) (f v)))\n                coll) coll)\n         (map set)\n         (into #{})))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":98,"code":"(fn [f nums] (into #{} (map #(into #{} %) (into #{} (vals (group-by f nums))))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn [f dom]\n  (let [equiv (group-by f dom)]\n    (set (map #(set %) (vals equiv)))))","problem":98,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [f d]\r\n  (set\r\n    (map set\r\n      (vals\r\n        (reduce\r\n          (fn [m v]\r\n            (update-in m [(f v)] conj v)) {} d)))))","problem":98,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn [f s]\n  (into #{} (vals (apply merge-with clojure.set/union (for [m s] {(f m) #{m}})))))","problem":98,"user":"504f865ee4b0a02f9cffde90"},{"problem":98,"code":"(fn cs10 [f coll]\n  (into #{} (map set (vals (group-by f coll)))))","user":"5a4443cae4b0447ef91cc60f"},{"problem":98,"code":"(fn\n  [f D]\n  (set (map set (vals (group-by f D)))))","user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [f v](set (map  set (vals(group-by  f v)))))","problem":98,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [f s]\n  (into #{} (map (fn [[k v]] (into #{} v)) (group-by f s))))","problem":98,"user":"4f32a7f1e4b0d6649770a095"},{"problem":98,"code":"(fn [func domain]\n  (set ( (comp #(map set %) vals) (group-by func domain)))\n  )","user":"5776558ee4b0979f89651633"},{"code":"#(->> (group-by % %2)\n      vals\n      (map set)\n      set)","problem":98,"user":"504e04a4e4b078edc5f59397"},{"problem":98,"code":"(fn [f k]\n  (set (map #(into #{} (second %) ) (group-by  f k)))\n  )","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn [f d]\n  (set (map set (vals (group-by f d)))))","problem":98,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn eq-classes \n  [f e]\n    (set (map set (vals (group-by f e)))))","problem":98,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [f coll] (set (map #(into #{} %) (vals (group-by f coll)))))","problem":98,"user":"5260341ee4b03e8d9a4a7034"},{"code":"(fn [f coll]\n    (loop [coll coll\n           grp {}]\n      (if (empty? coll)\n        (set (vals grp))\n        (recur (rest coll)\n               (let [e (first coll)\n                     k (f e)]\n                 (assoc grp k\n                        (if (contains? grp k)\n                          (conj (grp k) e)\n                          #{e})))))))","problem":98,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":98,"code":"(fn equivalence-classes [function domain]\n  (loop [result {}\n         queue (into () domain)]\n    (if (empty? queue)\n      (->> result vals set)\n      (recur \n        (merge-with clojure.set/union result {(function (first queue)) #{(first queue)}})\n        (rest queue)))))","user":"58247423e4b051871117bec5"},{"problem":98,"code":"(fn [f s]\n  (set (for [t (vals (group-by f s))]\n         (set t))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":98,"code":"(fn eq-classes [f xs]\n\t(set (map set (vals (group-by f xs)))))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [f D]\n  (set\n   (for [a D]\n     (set\n      (for [b D :when (= (f a) (f b))]\n                         b)))))","problem":98,"user":"51df825de4b01188f062752b"},{"problem":98,"code":"(fn [f xs]\n  (->> xs\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [x y]\n  (->> (group-by x y)\n      vals\n      (map set)\n      set))","problem":98,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn [f D]\n    (set (map set (vals (group-by f D)))))","problem":98,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":98,"code":"(fn [f s ]\n     \n   (set (map #(set (second %)) (group-by f s) ))\n  \n )","user":"5735ac67e4b0cd1946bd102b"},{"problem":98,"code":"#(->> (group-by %1 %2)\n     vals\n     (map set)\n     set)","user":"5f548678e4b0a0bc16850a7e"},{"code":"#(into #{} (map (partial into #{}) (vals (group-by %1 %2))))","problem":98,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":98,"code":"#(into #{} (vals (reduce (fn [a b] \n            (let [fb (%1 b)]\n              (assoc a fb (conj (a fb #{}) b))))\n          \n          \n          {} %2)))","user":"544e9022e4b0e3978000698b"},{"problem":98,"code":"(fn [f d] \n\t(->> (group-by f d)\n\t     (vals)\n\t     (map set)\n\t     (set)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":98,"code":"#(->> \n  %2\n  (group-by %)\n  (map second)\n  (map set)\n  set)","user":"4faf97d8e4b081705acca258"},{"problem":98,"code":"(fn equiv-class [f1 a]\n(reduce (fn[res2 x]\n          (let [l (second x)]\n            (loop [a l, res #{}]\n              (if (seq a)\n                (recur (rest a)(conj res (first (first a))))\n                (conj res2 res))))) #{} (group-by  (fn[x]\n                                                 (second x))  (map (fn[x]\n                                                    [x (f1 x)]) a))))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn equiv-classes [f coll]\n  (set (map set (vals (group-by f coll)))))","problem":98,"user":"52319066e4b0e2e8de81d1e9"},{"code":"(fn [f D]\n  (loop [d D acc {}]\n    (if (empty? d)\n      (set (map set (vals acc)))\n      (let [k (f (first d)) m (get acc k #{})]\n        (recur (rest d) (assoc acc k (conj m (first d))))))))","problem":98,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn [f D]\n   (->> (reduce (fn [acc obj]\n                  (let [res (f obj)]\n                    (if (contains? acc res)\n                      (update-in acc [res] conj obj)\n                      (assoc acc res #{obj}))))\n                {} D)\n        vals\n        set))","problem":98,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn [f D]\n  (set\n    (vals\n      (reduce\n        (fn [m x]\n          (let [r (f x)\n                rs (get m r #{})]\n            (assoc m r (conj rs x))))\n        {}\n        D))))","problem":98,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn [f s]\r\n    (loop [c s r #{}]\r\n\t       (if (empty? c)\r\n\t\t   r\r\n\t\t   (let [n (filter #(= (f (first c)) (f %)) c)]\r\n\t\t\t(recur (apply disj c n)\r\n\t\t\t       (conj r (set n)))))))","problem":98,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn equiv-classes [f D]\n  (->> D (map #(set (filter (fn [e] (= (f e) (f %))) D))) set))","problem":98,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn [f s]\n  (reduce\n    (fn [a b]\n      (conj a (set (filter (fn [x] (= (f x) (f b))) s)))\n    )\n    #{}\n    s\n  )\n)","problem":98,"user":"4f1595da535d64f603146444"},{"problem":98,"code":"(fn equivalence-classes\n  [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [f s]\n    (set (map (fn [a] (set (for [b s :when (= (f a) (f b))] b))) s))\n     )","problem":98,"user":"50bfe725e4b080409b860f26"},{"problem":98,"code":"(fn equiv\n  [f coll]\n  (set (map set (vals (group-by f coll)))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":98,"code":"(fn [f xs] (into #{} (map #(into #{} %) (vals (group-by f xs)))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn n98 [f s]\n  (set (map #(set (filter (fn [x] (= (f x) %)) s)) (set (map f s)))))","problem":98,"user":"52b43468e4b0c58976d9ad1b"},{"problem":98,"code":"(fn [f s]\n (set\n  (for [[_ v] (group-by f s)]\n       (set v))))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn [f d]\r\n  (set (vals (reduce #(assoc %1 (first %2)\r\n                             (if (nil? (%1 (first %2))) #{(second %2)} (conj (%1 (first %2)) (second %2))))\r\n                     {} (for [x d] [(f x) x])))))","problem":98,"user":"4dc1ee85535d020aff1edf91"},{"code":"(fn [f d]\n   (set (vals (reduce #(assoc %1 (first %2) (conj (get %1 (first %2) #{}) (second %2))) {}\n                      (map #(vector (f %) %) d)))))","problem":98,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"#(set (map set (for [x %2] (for [y %2 :when (= (% x) (% y))] y))))","problem":98,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn [f s]\r\n  (set\r\n    (map set\r\n      (vals\r\n        (reduce\r\n          #(update-in %1 [(f %2)] (fn [x] (conj x %2)))\r\n          {}\r\n          s)))))","problem":98,"user":"4db85282535d1e037afb218a"},{"code":"(fn [f s] (set (map (comp set second) (group-by f s))))","problem":98,"user":"5142ea50e4b0c172af7558ca"},{"problem":98,"code":"(fn [f i] (into #{} (map #(into #{} %) (vals (group-by f i)))))","user":"5632e850e4b0bfe05bf117ac"},{"problem":98,"code":"#(->> (group-by % %2)\n  vals\n  (map set)\n  set)","user":"5b61aa6ae4b0c6492753e712"},{"problem":98,"code":"(fn [f x]\n  (set (map set(vals (group-by f x)))))","user":"586b6a0ae4b01531a375e957"},{"problem":98,"code":"(fn eq-classes [func domain]\n  (set\n   (map set (vals (group-by func domain)))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":98,"code":"(fn [ f d ] \n  (set (map set (vals (group-by f d)))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":98,"code":"(fn e1\n  [f s]\n  (let [d (juxt f #(identity %))]\n    (->> (seq s)\n      (map d)\n      (group-by first)\n      (vals)\n      (map (fn [%] (set (map second %))))\n      (set))))","user":"58983e3fe4b00487982d52ce"},{"code":"(fn equi-classes [f coll]\n  (->>\n    coll\n    (group-by f)\n    vals\n    (map set)\n    set\n    ))","problem":98,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":98,"code":"(fn [f x]\n  (->>\n    (reduce\n    #(let [keyMap (f %2)]    \n      (assoc % keyMap (conj (% keyMap #{}) %2))\n    )\n    {}\n    x)\n    vals\n   \tset\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":98,"code":"(fn [f D]\n  (let [grps (group-by f D)]\n    (set (map set (vals grps)))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [f coll] (set (map set (vals (group-by f coll)))))","problem":98,"user":"4ed188c8535d44c135fd68cf"},{"problem":98,"code":"(fn [f a-set]\n  (set (map set (set (vals (group-by f a-set)))))\n  )","user":"6023dda3e4b0d5df2af22215"},{"problem":98,"code":"(fn [f a]\n  (->> (group-by f a)\n        vals\n        (map set)\n        set\n  )\n)","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"code":"(fn eq [f d] \n  (into #{} \n     (for [x (vals (group-by second (zipmap d (map f d))))]\n       (set (map first x)))))","problem":98,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn [f domain] \n  (loop [d domain equivs #{}]             \n    (if (empty? d) equivs\n      (let [tester (first d)\n            eqs (set (filter #(= (f tester) (f %)) d))]\n\t\t(recur (set (filter #(not (eqs %)) d))\n\t\t\t   (conj equivs eqs))))))","problem":98,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn [f d]\n  (set (map #(set %) (vals (group-by f d)))))","problem":98,"user":"4e7e05a6535db169f9c796fe"},{"code":"(fn [f i] (set (map set (partition-by f (sort #(compare (f %) (f %2)) i)))))","problem":98,"user":"4e43b0d9535dc968683fc4a3"},{"code":"(fn [f d]\n  (into #{} (vals (reduce (fn [a b]\n                            (assoc a (f b) (if (a (f b)) (conj (a (f b)) b) #{b})))\n                          {} d))))","problem":98,"user":"4e773be8535d324fb2983d6e"},{"problem":98,"code":"(fn [f s]\n  (->> s\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [f d]\n  (set\n    (map set (vals (group-by f d)))))","problem":98,"user":"504c8165e4b09724c857af31"},{"problem":98,"code":"(fn e [f s] (set (map (comp set second) (group-by f s))))","user":"57717915e4b0979f896515b3"},{"code":"#(->> (group-by % %2) vals (map set) set)","problem":98,"user":"4e8f1ac6535d65386fec2146"},{"problem":98,"code":"(fn equivalence-classes [f coll] \n  (into #{} (map set (vals (group-by f coll)))))","user":"58ed713de4b056aecfd47d84"},{"problem":98,"code":"(fn equivalences [f s]\n  (set (vals\n        (apply merge-with clojure.set/union\n               (map #(hash-map (f %) #{%}) s)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":98,"code":"(fn eq-classes\n  [f D]\n  (set \n    (map #(set %) \n         (vals (group-by f D)))))","user":"5dadd84ee4b0f8c104ccfc85"},{"problem":98,"code":"(fn [f col] (->> col\n                 (group-by f)\n                 (map val) \n                 (map #(apply hash-set %))\n                 (apply hash-set)))","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [ f s]\n     (set (map  #(set (map first %)) (map last (group-by last (map #( vector % (f %)) s))))))","problem":98,"user":"4fccdc75e4b0ee37620e186d"},{"problem":98,"code":"(fn [f D]\n  (into #{} (vals \n               (reduce\n                (fn\n                  [m [k v]]\n                  (assoc m k (conj (get m k #{v}) v)))\n                {}\n                (map (fn [x] [(f x) x]) D)))))","user":"53c1b787e4b00fb29b221266"},{"code":"(fn [f s]\n  (set (map #(set %) (vals (group-by f s)))))","problem":98,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn\n  [f domain]\n  (set (map set (vals (group-by f domain)))))","problem":98,"user":"511b233ae4b07ab9ec456180"},{"problem":98,"code":"(fn [f D] (set (map (comp set second) (reduce #(update-in %1 [(second %2)] conj (first %2)) {} (map #(vector % (f %)) D)))))","user":"5144c0a2e4b0d29bc9e5e33b"},{"code":"(fn eq-class [f D]\n  (into #{} (map #(into #{} %) (vals(group-by f D))))\n  )","problem":98,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [f D] (into #{} (map (partial into #{})\r\n (vals (reduce #(merge-with concat % %2) \r\n  (map #(hash-map (f %) [%]) D)))\r\n)))","problem":98,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":98,"code":"(fn [f s]\n(set (vals (reduce \n\t(fn [a b] \n\t  (let [r (f b)\n\t  \t\tun clojure.set/union]\n\t\t(if (a r)\n\t\t\t(assoc a r (un (a r) #{b})) \n\t\t\t(assoc a r #{b}))))\n{} s))))","user":"5578f292e4b05c286339e08f"},{"code":"#(set (->> (mapcat list %2 %2) (sort-by %) (partition-by %) (map set)))","problem":98,"user":"4f6160a7e4b0defedf855fbe"},{"problem":98,"code":"(fn my-fn [f xs]\n\t(set (map set (vals (group-by #(f %) xs)))))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn equi [f xs]\n  (->> (group-by f xs) vals (map set) set))","problem":98,"user":"52016fd3e4b0b2e020a18f10"},{"problem":98,"code":"(fn [f d] (letfn [(skeys [g dm] (map g dm))\n                  (get2  [xx] (map second xx))\n                  (vorr [h dh] (map get2 (vals (group-by first \n                           (partition 2 \n                             (interleave (skeys h (vec dh)) (vec dh) )\n                           )\n                       ))))\n                 ]\n           (set (map set (vorr f d)))\n          )\n )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":98,"code":"(fn [f s]\n    (loop [p (for [e s] [(f e) e])\n           m {}]\n      (if (empty? p)\n        (set (for [x (vals m)] (set x)))\n        (let [k (ffirst p)\n              v (second (first p))]\n          (recur (rest p) (if (contains? m k)\n                            (assoc m k (conj (m k) v))\n                            (assoc m k [v])))))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":98,"code":"(fn equivalence-classes\n  [f d]\n  (let [eq-map (reduce (fn [accum h] (if (contains? accum (f h))\n                                       (assoc accum (f h) (conj (accum (f h)) h))\n                                       (assoc accum (f h) #{ h })))\n                       {} d)]\n    (reduce (fn [accum h] (conj accum (second h))) #{} eq-map)))","user":"58152157e4b0f478707a0631"},{"problem":98,"code":"(fn equiv [f D]\n  (set\n   (vals\n    (reduce (fn [classes x]\n              (let [k (f x)]\n                (if (get classes k)\n                  (update-in classes [k] conj x)\n                  (assoc classes k (hash-set x)))))\n            {}\n            D))))","user":"55ed1575e4b0121d4835fdd3"},{"code":"(fn [f s] (set (map (fn [[k v]] (set v)) (group-by f s))))","problem":98,"user":"4ea365e2535d7eef308072c5"},{"problem":98,"code":"(fn equiv [f lst]\n  (into #{} (map #(into #{} %) (vals (group-by f lst)))))","user":"5545477fe4b0a04f79299531"},{"problem":98,"code":"(fn  [f d]\n  (->> (group-by f d)\n       vals\n       (map set)\n       set))","user":"51852961e4b0da5a5be3babb"},{"problem":98,"code":"(fn [f s]\n(set (map #(set (val %)) (group-by f s))))","user":"5835df4ce4b089d5ab817cec"},{"problem":98,"code":"(fn [f D]\n  (loop [r {}\n         d D]\n    (if (empty? d) (into #{} (vals r))\n        (let [h (first d)\n              k (f h)\n              c (get r k #{})]\n          (recur (assoc r k (conj c h)) (rest d))))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn e [f d] (set (map set (vals (group-by f d)))))","problem":98,"user":"4ea1ecfa535d7eef308072bb"},{"problem":98,"code":"(fn [f D]\n  (set\n   (map (fn [x] (set (keep (fn [y] (when (= (f x) (f y)) y))\n                           D)))\n        D)))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":98,"code":"(fn [f v]\n  (->> (group-by f v)\n       (map (fn [e] (set (val e))))\n       (into #{})))","user":"537e745ae4b06839e8705ea6"},{"problem":98,"code":"(fn [f D]\n  (reduce\n   (fn [a x]\n     (conj a\n           (set\n            (filter #(= (f %) (f x)) D))))\n   #{} D))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn equi-classes [f domain]\n  (let [mapped (map #(list (f %) %) domain)]\n    (set (map #(set (map second %))\n              (vals (group-by first mapped))))))","problem":98,"user":"531c0619e4b08068f379ed98"},{"problem":98,"code":"(fn [f d]\n  (->> (group-by f d)\n       (vals)\n       (map set)\n       set))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [f c]\n           (set (map set (vals (group-by f c)))))","problem":98,"user":"4f34eb87e4b0e243712b1eba"},{"problem":98,"code":"(fn [f d]\n  (into #{} (map #(into #{} %) (vals (group-by f d))))\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"problem":98,"code":"(fn [f x] (set (map #(set (second %)) (group-by f (apply list x)))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":98,"code":"#(->> (group-by % %2)\n      (vals)\n      (map set)\n      (set))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [f coll]\n  (set (map set (vals (group-by f coll)))))","problem":98,"user":"4e42f930535dc968683fc49f"},{"code":"#(->>\r\n  (map (juxt %1 identity) %2)\r\n  (sort-by first)\r\n  (map second)\r\n  (partition-by %1)\r\n  (map set)\r\n  set)","problem":98,"user":"504e14c2e4b078edc5f593bf"},{"problem":98,"code":"(fn __ [f D]\n  (loop [d D r #{}]\n    (if (empty? d) r\n        (let [v (f (first d))]\n          (recur (filter #(not= v (f %)) d)\n                 (conj r (set (filter #(= v (f %)) d))))))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":98,"code":"(fn [f values]\n  (loop [cursor (vec values)\n         output {}]\n    (if (= 0 (count cursor))\n      (set (vals output))\n      (recur\n       (rest cursor)\n       (let [result (f (first cursor))]\n         (assoc\n          output\n          result\n          (conj (or (get output result) #{}) (first cursor))))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":98,"code":"(fn\n  [f c]\n  (set (vals (reduce (fn [r v]\n                    (let [fv (f v)]\n                      (assoc r fv (conj (get r fv #{}) v)))) {} c))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn equiv [func coll]\n  (if (empty? coll)\n    #{}\n    (let [cl (set (filter #(= (func (first coll)) (func %)) coll))]\n      (let [rm (filter (complement #(= (func (first coll)) (func %))) coll)\n            class #{cl}]\n        (clojure.set/union (set class) (equiv func rm))))))","problem":98,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn [f D]\n  (set \n    (map set\n    (vals (group-by f D)))))","problem":98,"user":"4f043ed1535dcb61093f6bb4"},{"problem":98,"code":"(fn [func values]\n  (->>  (group-by func values)\n        (vals)\n        (map set)\n        (set)))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn equivalence-class [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       set))","problem":98,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":98,"code":"(fn [f d] \n  (->> \n   (group-by f d) \n   (map #(into #{} (second %)))\n   (into #{})))","user":"5409a12fe4b0addc1aec66df"},{"code":"(fn eq-classes\n  [f domain]\n  (->> (map f domain)\n       (zipmap domain)\n       (group-by second)\n       (vals)\n       (map (comp set keys))\n       set))","problem":98,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn [f D]\r\n  (set (map (fn [x] (set (filter #(= (f x) (f %)) D))) D)))","problem":98,"user":"4dbb1126535d1e037afb21b3"},{"problem":98,"code":"(fn [f s]\n    (->> s\n         (group-by f)\n         (#(for [[k v] %] (set v)))\n         (set)))","user":"600ae927e4b074f607df6689"},{"problem":98,"code":"(fn [f st]\n    (->> st\n         (group-by f)\n         (map val)\n         (map set)\n         set))","user":"5c995fa4e4b048ec896c5a96"},{"problem":98,"code":"(fn equivalence [f xs]\n  (->>\n    (reduce\n      (fn [acc x]\n        (let [v (f x)]\n          (assoc acc v (conj (get acc v #{}) x))))    \n      {} xs)\n    (vals)\n    (set)))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [f xs]\n  (->> xs \n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"#(->> %2                                                               \n       (map (fn [y] {(%1 y) #{y}}))                                    \n       (reduce (comp (partial merge-with clojure.set/union)))          \n       (vals)                                                          \n       ;;(reduce clojure.set/union)                                    \n       (into #{})                                                      \n       )","problem":98,"user":"52140b53e4b0961f15ac4d7e"},{"problem":98,"code":"(fn equivalence-class [f s]\n  (set (map set (vals (group-by f s)))))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":98,"code":"(fn my-equiv[m n]\n\t(into #{} \n\t\t(map #(set %) \n\t\t(vals (group-by m n)))))","user":"538e29d1e4b0b51d73faae80"},{"problem":98,"code":"(fn [f x]\n  (set (map set (vals (group-by f x)))))","user":"548b7db8e4b0e286459a11fd"},{"problem":98,"code":"(fn [f d]\n    (into #{}\n          (map (partial into #{})\n               (vals\n                 (reduce (fn [m x] (update-in m [(f x)] conj x)) {} d)))))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn [f D]\n  (->> (group-by f D) vals (map set) set))","problem":98,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":98,"code":";; http://www.4clojure.com/problem/98\n(fn equivalents\n  [f coll]\n  (into #{}\n        (map (fn [v] (set (map #(last %) v)))\n             (vals\n              (group-by #(first %)\n                        (filter #(= (first %) (second %)) \n                                (for [x coll y coll] (vector (f x) (f y) x y))))))))","user":"5c92105ce4b048ec896c59f7"},{"problem":98,"code":"(comp set \n      (partial map (comp set second))\n      group-by )","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [f aset] (set (map #(set (second %)) (group-by f aset))))","problem":98,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [a b] \n  (reduce conj #{} (map set (vals (group-by a b)))))","problem":98,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn [f c]\n  (->> (group-by f c)\n       vals\n       (map set)\n       set))","problem":98,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn [op s]\n  (set\n    (map\n      set\n      (vals\n        (group-by op s)))))","problem":98,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [f s](set (map set (vals (group-by f s)))))","problem":98,"user":"50e90813e4b033b0e80d11e7"},{"problem":98,"code":"(fn [f coll]\n  (set (map set (map second (group-by f coll)))))","user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [f d] (set (map (fn [x](set (filter #(=(f %)(f x)) d )))    d))  )","problem":98,"user":"50646c01e4b007509339a58b"},{"code":"(fn this [f domain]\n  (letfn [(f1 [remaining m]\n              (if (empty? remaining)\n                m\n                (let [item (first remaining)\n                      mkey (f item)\n                      mval (get m mkey)\n                      to-merge (if mval \n                                 {mkey (conj mval item)}\n                                 {mkey #{item}}) ; if\n                      ]\n                  (recur (rest remaining) (merge m to-merge))) ; let\n                ) ; if\n              ) ; f1\n          ]\n    (set (map #(second %) (f1 (seq domain) {})))\n    ) ; letfn\n  )","problem":98,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":98,"code":"(fn [fun s]\n  (->\n    (fn [cl v] (let [result (fun v)\n                     curr-set (get cl result #{})]\n                 (assoc cl result (conj curr-set v))))\n    (reduce {} s)\n    vals\n    (#(into #{} %))))","user":"5169d422e4b051e2a73aba53"},{"problem":98,"code":"(fn [f D] (into #{} (vals (reduce #(merge-with clojure.set/union %1 %2) (map #(identity {%1 #{%2}}) (map f D) D)))))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [f D] (->> D (group-by f) vals (map set) set))","problem":98,"user":"530bf87ee4b02e82168697d5"},{"problem":98,"code":"(fn [f D]\n  (set (vals (reduce (fn [classes x]\n                       (update-in classes [(f x)] (fnil #(conj % x) #{})))\n                     {} D))))","user":"55ccdc6be4b0e31453f64a18"},{"problem":98,"code":"(fn p-98 [f d]\n  (->> (group-by f d)\n       (vals)\n       (map set)\n       (set)))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":98,"code":"(fn [f sets]\n   (set (map set (vals (group-by f (seq sets))))))","user":"56fbf83de4b07572ad1a88da"},{"problem":98,"code":"(fn [f xs]\n  (set (map #(->> % second set) (group-by f xs))))","user":"5884e807e4b0f1effa3b76a6"},{"problem":98,"code":"(fn [x y] (apply hash-set (map #(apply hash-set (second %)) (group-by x y))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [f s] (set (map (fn [p] (set (map first p))) (partition-by second (sort-by second (map (fn [x] [x (f x)]) s))))))","problem":98,"user":"4dbe8729535d020aff1edf62"},{"code":"(fn [f s]\n  (set (map \n        (fn [[k v]] (set v))\n        (group-by f s))))","problem":98,"user":"51170b49e4b0063b4e3e16d9"},{"problem":98,"code":"(fn [f domain] (set (vals (persistent! (reduce (fn [r n] (assoc! r (f n) (conj (get r (f n) #{}) n))) (transient {}) domain)))))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [f D] (set (map set (partition-by f (sort-by f D)))))","problem":98,"user":"4f1bb9d8535d64f60314647d"},{"problem":98,"code":"(fn [f xs]\n  (into #{} (map set (vals (group-by f xs))))\n  )","user":"564a560ae4b0284900eef654"},{"code":"(fn eq-classes [pred domain]\n  (loop [classes #{} d domain]\n    (let [class (filter #(= (pred %) (pred (first d))) d)\n          next-classes (conj classes (into #{} class))\n          rest-domain (apply disj d class)]\n      (if (empty? rest-domain) next-classes\n        (recur next-classes rest-domain)))))","problem":98,"user":"52463059e4b09dbe66b56198"},{"problem":98,"code":"(fn f\n  ([g s] (f g s {}))\n  ([g s m] (if (empty? s)\n             (set (vals m))\n             (recur\n               g\n               (rest s)\n               (let [k (g (first s))]\n                 (conj m {k (conj (get m k #{}) (first s))}))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":98,"code":"(fn [f s]\n  (set (for [a s]\n         (set (for [b s :when (= (f a) (f b))] b)))))","user":"583e27e2e4b089d5ab817daa"},{"code":"(fn [f s]\n   (set (map set (partition-by f (sort-by f s)))))","problem":98,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":98,"code":"(fn [f s]\n  (->> s\n       (group-by #(f %))\n       vals\n       (map set)\n       set))","user":"56cf115de4b0ea9b8538f765"},{"problem":98,"code":"(fn equivalence\n  [f coll]\n  (->> (group-by f coll)\n       vals\n       (map set)\n       set))","user":"4e586949535d8a8b8723a292"},{"problem":98,"code":"#(->> %2\n      (group-by %1)\n      vals\n      (map set)\n      set)","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [f s] (set\n  (map set (vals (group-by f s)))))","problem":98,"user":"4e5411e8535d8a8b8723a279"},{"problem":98,"code":"(fn [f c]\n  (->> (sort-by f c) (partition-by f) (map set) set))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":98,"code":"(fn [f coll]\n  (reduce #(conj %1 (set (second %2)))\n          #{}\n          (group-by f coll)))","user":"57dd47f4e4b0bd073c20243e"},{"problem":98,"code":"(fn [f coll] (set (map #(set (second %)) (group-by f coll))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn [fun coll]\n  (set (->> (group-by fun coll)\n            (map (comp set second)))))","problem":98,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn [f d]\n (->> (group-by f d)\n      (vals)\n      (map set)\n      (set)))","problem":98,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"#(->> %2\n  (group-by %)\n  (vals)\n  (map set)\n  (set))","problem":98,"user":"503917a0e4b088a6a14ca763"},{"problem":98,"code":"(fn equivalence-classes [f coll]\n      (set \n        (map #(set %)\n           (vals (group-by f coll)))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"#(set (map set (vals (group-by %1 %2))))","problem":98,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":98,"code":"(fn [f coll]\n     (set (map #(set (val %)) (group-by f coll))))","user":"59e0f38ae4b08badc2a0c500"},{"problem":98,"code":"(fn [f l]\n  (set \n    (map #(set %)\n      (vals\n        (group-by f l)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":98,"code":"(fn equivalence [f d] (set (map set (vals (group-by f d)))))","user":"550e52dbe4b06e50f9beb165"},{"problem":98,"code":"(fn [f xs] (set (map (comp set val) (group-by f xs))))","user":"5ecfd429e4b016b56eae05a9"},{"code":"(fn [f m]\n  (->> m \n       (group-by f)\n       (map (comp set val))\n       set))","problem":98,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn eq-classes [f D]\n  (->> D\n    (map #(hash-map (f %) (hash-set %)))\n    (apply merge-with clojure.set/union)\n    vals\n    (into #{})))","problem":98,"user":"51460e4ce4b04ef915e37314"},{"code":"(fn [f s] \n  (set (map set (vals (group-by f s)))))","problem":98,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn [f D] (loop [d D result {}]\n            (if (nil? d) (set (vals result))\n              (if (nil? (result (f (first d))))\n                (recur (next d) (assoc result (f (first d)) #{(first d)}))\n                (recur (next d) (assoc result (f (first d)) (conj (result (f (first d))) (first d))))\n              )\n            )\n          )\n)","problem":98,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [f d](set (map set (vals (group-by f d)))))","problem":98,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"#(set (map (comp set second) (group-by %1 %2)))","problem":98,"user":"4dad8756c9a9d6ed1099dc57"},{"code":"(fn [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"50fbf811e4b0d10d794c19f1"},{"problem":98,"code":"(fn [f d]\n           (letfn [(equiv [x domain]\n                     (set (filter #(= (f x) (f %)) domain)))]\n             (set (map #(equiv % d) d)))\n)","user":"55f09e7be4b06e875b46ce28"},{"problem":98,"code":"(fn [f coll]\n  (set (map #(into #{} %) (vals (group-by f coll)))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":98,"code":"(fn [f x]\n  (set (map (comp set second) (group-by f x))))","user":"525cc912e4b0cb4875a45d48"},{"problem":98,"code":"(fn [f D]\n  (into #{}\n    (vals\n      (reduce\n        (fn [eq-classes x]\n          (let [f-x (f x)]\n            (assoc eq-classes\n              f-x (conj (if-let [eq-class (get eq-classes f-x)]\n                          eq-class\n                          #{})\n                        x))))\n        {}\n        D))))","user":"58b2c435e4b0ebc645576d11"},{"code":"(fn [f a]\n  (set (map set\n    (for [n a]\n      (filter #(= (f n) (f %)) a)))))","problem":98,"user":"4e49badd535dc968683fc4c9"},{"problem":98,"code":"(fn [f s]\n    (let [groups (group-by f s)]\n      (set  (map set\n                 (vals groups)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":98,"code":"(fn equivalence\n  [f d]\n  (->> d\n       (map #(vector (f %) %))\n       (group-by first)\n       (map (comp set #(map second %) second))\n       (set)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":98,"code":"#(->> \n   (group-by %1 %2)\n   (vals)\n   (map set)\n   (set)\n )","user":"569951e4e4b0542e1f8d143e"},{"code":"(fn eqclasses [f x] \n  (set (map set (vals (group-by f x)))))","problem":98,"user":"50e4f4e9e4b049a987753896"},{"problem":98,"code":"(fn [f coll]\n    (->> (group-by f coll)\n        (vals)\n        (map set)\n        (set)\n    ))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"#(into #{}\r\n  (map (partial into #{})\r\n    (vals (group-by %1 %2))))","problem":98,"user":"4ddbfb8a535d02782fcbea00"},{"problem":98,"code":"(fn [foo coll] (into #{} (map set (vals (group-by foo coll)))))","user":"5b3251c1e4b025bcb146f317"},{"problem":98,"code":"(fn [f D]\n  (let [k (map f D)\n        kv (map vector k D)\n        g (vals (group-by first kv))\n        vg (map #(set (map second %)) g)\n        ]\n    (set vg)\n    )\n  )","user":"5f419985e4b0955706451fab"},{"problem":98,"code":"(fn [f s]\n  (set (map (fn [[k v]] (set v)) (group-by f s))))","user":"5c2836ebe4b07e362c2305d4"},{"problem":98,"code":"(fn [f s] ; fn set\n  (set (map (comp set last) (group-by f s))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":98,"code":"(fn equivalences\n  [f D]\n  (->>\n    (group-by f D)\n    (vals)\n    (map set)\n    (set)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":98,"code":"(fn [f xs]\n  (into #{}\n        (vals\n          (reduce (fn [a b]\n                    (let [k (f b)\n                          v (a k)]\n                      (assoc a k (if (nil? v) #{b} (conj v b)))))\n                  {}\n                  xs))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn equiv-classes [f coll]\n  (loop [result #{} curr-coll coll]\n    (let [curr-class (set (filter #(= (f (first curr-coll)) (f %)) curr-coll))\n          not-in-curr-class (clojure.set/difference curr-coll curr-class)\n          curr-result (conj result curr-class)]\n      (if (empty? not-in-curr-class)\n        curr-result\n        (recur curr-result not-in-curr-class)))))","problem":98,"user":"53070615e4b02e821686979e"},{"problem":98,"code":"(fn [ff dd] (into #{} (map #(into #{} %) (vals (group-by ff dd)))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [f coll]\n   (into #{}\n         (map #(into #{} (second %)) \n              (group-by f coll))))","problem":98,"user":"51cacda3e4b068dadb8f2227"},{"problem":98,"code":"(fn eq? [f s] (into #{} (map set (vals (group-by f s)))))","user":"575ddfd1e4b02ea11479938d"},{"problem":98,"code":"(fn[f d]\n  (->> (zipmap d (map f d))\n     (group-by second)\n     vals\n     (map #(into #{} (map first %)))\n     (into #{})))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [f D] \n  (set (map set (vals (group-by f D)))))","problem":98,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":98,"code":"(fn [f d]\n  (->>\n   d\n   vec\n   (sort-by f)\n   (partition-by f)\n   (map #(set %) )\n   set))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn [f d]\n\t(set (map set (vals (group-by #(f %) d)))))","problem":98,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(letfn [(setify [x]\n          (into #{} x))]\n  (fn [func col]\n    (setify (map setify (vals (group-by func col))))))","problem":98,"user":"51eadb98e4b0f1f103a0d153"},{"problem":98,"code":"(fn eq [f s]\r\n  (set \r\n    (map\r\n      (fn [x]\r\n        (set (filter #(= (f x) (f %)) s)))\r\n      s)))","user":"606e0a42e4b069485764de19"},{"code":"(fn [f d]\n  (->> (group-by f d) (vals) (map set) (set)))","problem":98,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":98,"code":"(fn [t v]\n  (set\n   (map #(set (map first (last %)))\n        (group-by last\n                  (map #(vector % (t %)) v)))))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":98,"code":"(fn myf2 [f s]\n  (->> (group-by f s)\n       vals\n       (map #(apply hash-set %))\n       (apply hash-set)))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn equivalence\n  ([f s]   \n    (equivalence f (vec (rest s)) 0 (set (list (first s))) #{}))\n  ([f s pointer current equiv]\n    (println s pointer current equiv (first current) (get s pointer))\n    (if (= 0 (count s))\n      (conj equiv current)\n      (if (> pointer (count s))\n        (recur f (vec (rest s)) 0 (set (list (first s))) (conj equiv current))\n        (if (and (first current) (get s pointer) (= (f (first current)) (f (get s pointer))))\n          (recur f (if (= pointer (dec (count s)))\n                      (vec (butlast s))\n                      (if (= pointer 0)\n                        (vec (rest s))\n                        (apply conj (subvec s 0 pointer) (subvec s (inc pointer))))) 0 (conj current (get s pointer)) equiv)\n          (recur f s (inc pointer) current equiv))))))","problem":98,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [f s]\n  (->> (group-by f s)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":98,"code":"(fn __ [f xs]\n  (set (map set (vals (group-by f xs)))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":98,"code":"(fn equivalence [fun domain] (set (map set (vals (group-by fun domain)))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn [f D]\n  (set\n    (map set\n      (vals (group-by f D))\n    )\n  )\n)","problem":98,"user":"4f725201e4b07046d9f4f02f"},{"code":"(fn r[f d]\n  (set\n  (map set\n  (vals (group-by f d)))))","problem":98,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":98,"code":"(fn ec [f d]\n  (set (vals (reduce #(merge-with clojure.set/union %1 {(f %2) #{%2}}) {} d)))\n )","user":"56bca51ae4b0f26550335963"},{"code":"(fn [f xs] (->> xs (group-by f) vals (map set) set))","problem":98,"user":"50b668dde4b08fb537db98f2"},{"code":"#(->> %2 (group-by %) vals (map set) set)","problem":98,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [f D] (->> (partition 2 (interleave (map f D) D))\n              (group-by #(first %))\n              (vals)\n              (map (fn [x](into #{} (map #(second %) x))))\n              (into #{})))","problem":98,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [f my-set]\n  (set (map #(into #{} %) (vals (group-by f my-set)))))","problem":98,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [f x] (set (map #(set (second %)) (group-by f x))))","problem":98,"user":"4dae916eedd6309eace4d155"},{"code":"(fn [f coll]\n  (set\n    (map set\n      (map second (group-by f coll)))))","problem":98,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":98,"code":"(fn [ekvif szetek] \n    (set (map set (vals (group-by ekvif szetek)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn eqc [f d]\n  (loop [ds d acc {}]\n    (if (seq ds)\n      (let [val (first ds)]\n        (recur (rest ds) (merge-with into acc {(f val) #{val}})))\n      (set (vals acc)))))","problem":98,"user":"4f0d093b535d0136e6c22313"},{"problem":98,"code":"(fn [f s] \n  (set \n    (vals \n       (reduce \n          (fn [acc i]\n            (let [ a (f i)]\n              (assoc acc a \n                (conj (acc a #{}) i)))) {} s))))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn [func domain]\n   (let [all-map (zipmap domain (map func domain))]\n     (loop [result {} elements domain]\n      (if elements\n        (recur\n          (if (contains? result (func (first elements)))\n            (into result {(func (first elements)) (conj (result (func (first elements))) (first elements))})\n            (into result {(func (first elements)) #{(first elements)}})\n            )\n          (next elements)\n          )       \n        (set (vals result))\n       )\n     )   \n   )\n   )","problem":98,"user":"5106dc1be4b01150e115ebf0"},{"problem":98,"code":"(fn [f D] (let [results (map (comp vector f) D)\n                 d-elements (map (comp set vector disj) D)\n                 d-elem-hashmap (map hash-map results d-elements)\n                 result-elem-hashmap (reduce #(merge-with clojure.set/union %1 %2) {} d-elem-hashmap)]\n             (-> result-elem-hashmap vals set)))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [f s]\n   (set (map set (vals (group-by f s)))))","problem":98,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":98,"code":"(fn \n  [f d]\n  (loop [fv (distinct (map f d)) r #{}]\n    (if (empty? fv)\n       r\n      (recur (rest fv) (conj r (set (filter #(= (f %) (first fv)) d))))\n      )\n    )\n)","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [f d]\n  (let [groups (vals (group-by f d))]\n    (set (map set groups))))","problem":98,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":98,"code":"(fn [fn arg] (reduce #(conj %1 (set %2)) #{} (vals (group-by  fn (seq arg)))))","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn equiv-class [f coll]\n  (set (map set (vals (group-by f coll)))))","problem":98,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [f s] \n  (->> (group-by #(f %) s)\n       vals\n       (map set)\n       set))","problem":98,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [f s]\n  (->> s\n      (group-by f)\n      vals\n      (map set)\n      set))","problem":98,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn equiv-classes [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn [f domain]\n  (set (map set (vals (group-by f domain)))))","problem":98,"user":"531d34cfe4b08068f379edac"},{"code":"(fn [f s]\n  (set\n   (vals\n    (reduce\n     (fn [relation val]\n       (let [equiv (f val)]\n         (if (contains? relation equiv)\n           (assoc relation equiv (conj (get relation equiv) val))\n           (assoc relation equiv (conj #{} val)))))\n     {}\n     s))))","problem":98,"user":"5014754de4b094324338f8e5"},{"problem":98,"code":"(fn gec [f D]\n    (into #{} (map #(into #{} (for [i %] (first i))) \n                   (map #(second %) (group-by #(second %) \n                                              (apply assoc {} (interleave D (map f D))))))))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [f d]\n  (set\n    (vals\n      (reduce\n        (fn [m p]\n          (let [k (f p)]\n            (assoc m k (conj (get m k #{}) p))))\n        {}\n        d))))","problem":98,"user":"4dbdc9da535d020aff1edf4c"},{"problem":98,"code":"(fn equivalence-classes\n  [f coll]\n  (into #{} (map #(into #{} %) (vals (group-by f coll)))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn eqr [f d]\n   (set (vals (reduce\n               (fn [m e]\n                 (let [k (f e)\n                       v (m k)]\n                   (assoc m k (if (nil? v) #{e} (conj v e)))))\n               {} d))))","problem":98,"user":"529ce629e4b04e0c58e87b6e"},{"problem":98,"code":"(fn [f xs]\n  (into #{} (map #(into #{} %) (vals (group-by f xs)))))","user":"5553b924e4b0deb715856e06"},{"problem":98,"code":"(fn [f coll]\n   (let [ms (reduce (fn [a x] (conj a (hash-map (f x) #{x}))) [] coll)\n         m (apply merge-with into ms)]\n     (set (vals m))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn [f s]\n  (set (map set (vals (group-by #(f %) s)))))","problem":98,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn ms [f s]\n    (set (map set\n              (vals (group-by f s)))))","problem":98,"user":"4daea889edd6309eace4d15b"},{"problem":98,"code":"(fn equivalence-classes [f ground-set]\n  (set (map (fn [tuple] (set (map first tuple)))\n            (vals (group-by second\n                            (map (fn [elm] (list elm (f elm)))\n                                 ground-set))))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"code":"(fn [f xs]\r\n  (set (map #(set (second % )) (group-by f xs))))","problem":98,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [f d]\n  (->> d (group-by f) (vals) (map set) set))","problem":98,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":98,"code":"(fn [f coll-set]\n   (set (map #(-> %\n                  second\n                  set) (group-by #(f %) coll-set))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":98,"code":";(fn [f d]\n;  (reduce #(conj %1 (set (filter (fn [x] (= (f x) (f %2))) d))) #{} d))\n\n#(->> (group-by %1 %2)\n      (vals)\n      (map set)\n      (set))","user":"5de12192e4b0948ae9d9aded"},{"problem":98,"code":"(fn [f d]\n   (let [mapped (map (fn [i] {:in i :out (f i)}) d)\n         grouped (group-by :out mapped)]\n     (into #{} (map #(into #{} (map :in %)) (vals grouped)))))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [f s] (set (map #(set (filter (fn [x] (= (f x) (f %))) s)) s)))","problem":98,"user":"4e6e3a1e535d5021c1a89602"},{"problem":98,"code":"(fn [f D]\n    (set (for [a D]\n      (into\n       #{a}\n       (filter\n        (fn [b] (= (f a) (f b)))\n        D)\n       )\n      )\n    ))","user":"5f06caa7e4b0cf489e8d7f52"},{"code":"#(->> %2\n      (group-by %)\n      (map (comp set second))\n      set)","problem":98,"user":"52479487e4b05ef8e38e6373"},{"problem":98,"code":"(fn [f args]\n  (->> (map (juxt f identity) args)\n       (reduce (fn [acc [k v]]\n                 (let [existing (get acc k #{})]\n                   (assoc acc k (conj existing v))))\n               {})\n       vals\n       (into #{})))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn [f c]\n          (set (map set (vals (reduce #(let [v (f %2)]\n                     (assoc %1 v (conj (get %1 v []) %2))) {} c)))))","problem":98,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn [f stuff] \n  (set (vals (apply merge-with\n    (comp set concat)\n    (map #(hash-map (f %) (set [%])) stuff)))))","problem":98,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":98,"code":"(fn solve [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn [f s]\n  (loop [working-seq (seq s)\n         return-seq #{}]\n    (if (= working-seq ())\n      return-seq\n      (recur\n       (rest working-seq)\n       (conj return-seq (set (filter #(= (f %) (f (first working-seq))) s)))))))","problem":98,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":98,"code":"(fn [f s] (set (map set (for [v (vals (group-by second (map #(list % (f %)) s)))] (map first v)))))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"#(set (map set (map val (group-by %1 %2))))","problem":98,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn f98 [f st]\n    (set (map #(set (map first %))\n              (map second \n                   (group-by second\n                             (map (fn [x] ((juxt identity f) x)) st))))))","problem":98,"user":"528a3e14e4b0239c8a67ae72"},{"code":"(fn [f s]\n  (reduce #(conj %1 (set (second %2))) #{} (group-by f s)))","problem":98,"user":"4f0e995e535d0136e6c22326"},{"problem":98,"code":"(fn equivalence-classes [relation s]\n  (->> s\n       (group-by relation)\n       (vals)\n       (map set)\n       set))","user":"53fd66a4e4b0de5c418485e3"},{"problem":98,"code":"(fn [f s] (let [m (map (fn [x] [x (f x)]) s)\n                r (reduce (fn [a [k v]] (assoc a v (conj (or (get a v) #{}) k))) {} m)]\n  (into #{} (vals r))))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":98,"code":"(fn prob98\n  [f s]\n  (set (map set (vals (group-by f s)))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn [f s]\r\n  (set\r\n    (vals\r\n      (apply merge-with into\r\n        (map #(hash-map (f %) #{%}) s)))))","problem":98,"user":"50464831e4b011c5dfee771f"},{"code":"(fn [f s] (set (map #(into #{} %) (vals (group-by f s)))))","problem":98,"user":"51c09719e4b0c9c82288293c"},{"problem":98,"code":"(fn [f coll]\n  (->> (group-by f coll)\n       (vals)\n       (map set)\n       (into #{})))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn [x y]\n(set (map set (vals (group-by x y)))))","problem":98,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [f domain]\n  (into #{}\n    (for [x domain]\n      (set (filter #(= (f x) (f %)) domain)))))","problem":98,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [f d]\r\n  (->> (group-by f d)\r\n       vals\r\n       (map set)\r\n       set))","problem":98,"user":"4da3e51330acd6ed10482a68"},{"problem":98,"code":"#(loop [fun %1 sq %2 classes {}]\n   (if (empty? sq)\n     (set (vals classes))\n     (let [vl (fun (first sq)) el (first sq)]\n       (recur fun (rest sq) (update-in classes [vl] (fn [x] (conj (set x) el))))\n  )\n )  \n)","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn [f s] \n  (set (map set  (vals (group-by f s)))))","problem":98,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn [f D] (set (map #(set (second %)) (group-by f D))))","problem":98,"user":"500159b3e4b0678c553fc419"},{"problem":98,"code":"(fn [f m] (set (map set (vals (group-by f m)))))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn [f col] (set (map set (vals (group-by f col)))))","problem":98,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn\n  [f coll]\n  (into #{} (map set (vals (group-by #(f %) coll)))))","problem":98,"user":"50b35486e4b03ea88043356a"},{"problem":98,"code":"(fn [f s] (->> (group-by f s)\n               (vals)\n               (map set)\n               (set)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [f D]\n  (into #{} (map #(into #{} %) (vals (group-by f D)))))","problem":98,"user":"4dca8b6d535d5973398f9288"},{"problem":98,"code":"(fn [f dom] (into #{} (map (fn [[k vs]] (into #{} vs)) (group-by f dom))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":98,"code":"(fn [f d] (->> d (group-by f) (vals) (map set) (set)))","user":"5312cdaae4b08068f379ed03"},{"problem":98,"code":"(fn [f s]\n    (set (map set (vals (group-by f s)))))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn[f xs]\n  (set (map (comp set second) (group-by f xs))))","problem":98,"user":"506406c8e4b075d771da6f9f"},{"problem":98,"code":"(fn eq-rel\n  [func domain]\n  (letfn [(fltr [elem]\n            (set (filter #(= (func elem) (func %)) domain)))]\n    (into #{} (map #(fltr %) domain))))","user":"5271605ae4b03e8d9a4a73ed"},{"problem":98,"code":"(comp set (partial map (comp set second)) group-by)","user":"5776385fe4b0979f89651632"},{"code":"(fn eqc [f c] (set (map set (vals (group-by f c)))))","problem":98,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"#(set (map set (map second (group-by % %2))))","problem":98,"user":"4ee82539535d93acb0a66878"},{"problem":98,"code":"(fn [f coll]\n  (reduce \n    (fn [x y] \n      (conj x (set (filter #(= (f %) (f y)) coll))))\n    #{}\n    coll)\n)","user":"546692aee4b01be26fd746e7"},{"problem":98,"code":"(fn [f s]\n  (into #{} \n        (map (comp set second) \n             (group-by f s))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn eq-classes [f s]\n         (->> s\n          (map #(hash-map (f %) [%]))\n          (reduce #(merge-with concat %1 %2) {})\n          (vals)\n          (map set)\n          (set)))","problem":98,"user":"4f1bee08535d64f60314647e"},{"problem":98,"code":"(fn [f d]\n  (set\n   (map\n    #(set (val %))\n    (reduce\n     #(let [r (f %2)] (assoc % r (conj (% r) %2)))\n     {}\n     d))))","user":"53d5a63be4b0e771c3025449"},{"code":"#(->> %2\n        (group-by %)\n        vals\n        (map set)\n        set)","problem":98,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn eqclz [f d]\n  (set (vals (reduce (fn [ret this]\n            (let [v (f this)]\n              (update-in ret [v] (fnil conj #{}) this)))\n          {} d))))","problem":98,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn [ f d ]\n    (->> d (group-by f) vals (map set) set))","problem":98,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [f ds]\n  (->> (group-by f ds)\n         vals\n  \t\t(map #(into #{} %))\n        (into #{})))","problem":98,"user":"4fb1fa51e4b081705acca283"},{"problem":98,"code":"(fn foo [f coll]\n  (set (map set (vals (group-by f coll)))))","user":"54b050cee4b09f271ff37d13"},{"problem":98,"code":"(fn [f D]\n    (set (vals (apply merge-with (comp set concat) (map (fn [a b]{a #{b}}) (map f D) D)))))","user":"544e8369e4b0e39780006987"},{"code":"#(->>\n  %2\n  (group-by %)\n  vals\n  (map set)\n  set)","problem":98,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn [f s]\n  (set (vals (apply merge-with\n   clojure.set/union\n   (map #(hash-map (f %) #{%}) s)))))","problem":98,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn equiv-relation [f st]\n  (set (map set (vals (group-by f st)))))","problem":98,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [x y]\n  (into #{} (map (comp #(into #{} %) second) (group-by x y))))","problem":98,"user":"4fbd12a5e4b081705acca2fd"},{"code":"#(->> %2 (group-by %1) (vals) (map set) (set))","problem":98,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [f s]\n  (set\n    (vals\n      (reduce (fn [r e]\n        (let [k (f e)]\n(assoc r k (conj (get r k #{}) e))))\n{}\ns))))","problem":98,"user":"4fca2a13e4b0ee37620e184d"},{"problem":98,"code":"(fn [f s]\n   (into\n    #{}\n    (vals\n     (reduce\n      (fn [acc e]\n        (let [k (f e)\n              cur (acc k)]\n          (assoc acc k (if (nil? cur) #{e} (conj cur e)))))\n      {}\n      s))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":98,"code":"#(set(map set (vals (group-by %1 %2))))","user":"555ac933e4b0deb715856e49"},{"code":"(fn [f d]\n  (into #{} (map #(into #{} (map first %)) (vals (group-by second (partition 2 (interleave d (map f d))))))))","problem":98,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":98,"code":"(fn [f d]\n(set (map set (vals (group-by f d)))))","user":"5ae0976be4b0837691e92c43"},{"code":"(fn equiv-class [f domain]\n  (->> (group-by f domain)\n       (map (comp set second))\n       set))","problem":98,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [f s]\n    (reduce (fn [sets x]\n      (let [bucket\n        (first (filter (fn [b]\n          (= (f x) (f (first b)))) sets))]\n        (if (nil? bucket)\n          (conj sets #{x})\n          (conj (disj sets bucket)\n            (conj bucket x))))) #{} s))","problem":98,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":98,"code":"(fn [f S]\n    \n  \t(apply hash-set (map #(apply hash-set %) (vals (group-by f S))))\n \n )","user":"5649615be4b0284900eef641"},{"code":"(fn judge[f  col]\r\n  \r\n  (set (vals (reduce  (fn[map node]\r\n                   (let[k (f node)]\r\n                      (assoc map k \r\n                        (conj (get map k #{}) node)\r\n                       )    \r\n                     )\r\n                   ) {}  col) ) )\r\n)","problem":98,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [f s]\r\n(into #{} (map set (vals (group-by f s)))))","problem":98,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [f l]\r\n  (letfn [(worker [l s]\r\n            (if (empty? l)\r\n              s\r\n              (recur (rest l)\r\n                     (let [v (f (first l)) p (find s v)]\r\n                       (if p\r\n                         (assoc s v (conj (val p) (first l)))\r\n                         (assoc s v #{(first l)}))))))]\r\n    (set (map val (worker l {})))))","problem":98,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":98,"code":"(fn equivalence-classes\n  [f coll]\n  (set ((comp (partial map set) vals) (group-by f coll))))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn [f v] (set (map #(set (val %)) (group-by f v))))","problem":98,"user":"4f0f01c0535d0136e6c22329"},{"code":"(comp set\n      vals\n      (fn [f d]\n        (reduce #(let [y (f %2)]\n                   (assoc % y (conj (% y #{}) %2)))\n                {} d)))","problem":98,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":98,"code":"(fn equivalence-classes [f domain]\n  (into #{} (map #(into #{} %) (partition-by f (sort-by f domain)))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [f s]\n  (->> (group-by f s)\n       (map second)\n       (map set)\n       set))","problem":98,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":98,"code":"(fn eqv-classes [f coll]\n  (letfn [(eqv-tuples [f coll]\n            (map (fn [x] [(f x) x]) coll))\n          (transmog-map [m f]\n            (into {} (for [[k v] m] [k (f v)])))\n          (eqv-lists [tuples]\n            (transmog-map (group-by #(first %) tuples) #(map second %)))\n          (eqv-sets [eqvlists]\n            (set (map #(set (second %)) eqvlists)))]\n    (-> (eqv-tuples f coll)\n        eqv-lists\n        eqv-sets)))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(letfn [(ec [f D]\r\n            (->> (filter (fn [[a b]] (= (f a) (f b)))\r\n                         (for [a D b D] [a b]))\r\n                 (group-by #(f (first %)))\r\n                 (vals)\r\n                 (map (comp set flatten))\r\n                 set))] ec)","problem":98,"user":"4dc479c0c647a3c54c2ddc73"},{"problem":98,"code":"(fn [f D]\n  (->> (group-by f D)\n       (map (comp set second))\n       (set)))","user":"53f7820be4b0de5c41848560"},{"code":"(fn [f s]\n  (set (map #(set(map second %))\n     (partition-by first   \n       (sort-by first\n                (map #(vector (f %) %) s))))))","problem":98,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn \r\n  [f coll]\r\n  (set (vals (reduce (fn [equivs x]\r\n                       (assoc equivs (f x) (conj (get equivs (f x) #{}) x)))\r\n                     {} coll))))","problem":98,"user":"4e8768f6535dceadca469850"},{"problem":98,"code":"(fn f98 [f D]\n  (into #{} (map set (vals (group-by f D)))))","user":"5c2649c8e4b07e362c2305bf"},{"problem":98,"code":"(fn [f ns]\n  (->> (group-by f ns) (vals) (map set) (into #{})))","user":"505aa653e4b021387fb89857"},{"code":"(fn [f x]\n  (set (map set (vals\n   (reduce (fn [a b]\n  \t\t(let [p (f b)]\n                (conj a {p (cons b (a p))})))\n            {} x)))))","problem":98,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":98,"code":"(fn [f s]\n   (reduce #(into %1 (list(set %2))) #{} (map\n                              (fn [a]\n                                (map last a))\n                              (vals (group-by first (map #(list (f %1) %1) s))))))","user":"52fac708e4b047fd55836fff"},{"problem":98,"code":"(fn [f aset]\n  (set (map set (vals (group-by f aset)))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":98,"code":"(fn [f s]\n  ((fn equiv [result rst]\n     (cond (empty? rst) result\n           (= 1 (count rst)) (conj result (set rst))\n           :else (let [cur (first rst)\n                       remain (rest rst)\n                       eq (filter #(= (f cur) (f %)) remain)]\n                   (equiv (conj result (set (cons cur eq))) (reduce disj (set remain) eq))))) #{} s))","user":"58f98231e4b0438e51c2cf4c"},{"problem":98,"code":"(fn [f D]\n    (loop [d D\n           result #{}]\n      (if (seq d)\n        (let [e (first d)\n              r (f e)]\n          (recur\n            (rest d)\n            (conj result (reduce (fn [out e]\n                                   (if (= (f e) r)\n                                     (conj out e)\n                                     out)) #{e} D))))\n        result)))","user":"569f4dabe4b0542e1f8d1491"},{"problem":98,"code":"(fn [f xs]\n    (set \n     (->> \n      (map #(vector (f %) %) xs)\n      (group-by first)\n      vals\n      (map (comp set #(map second %)) ))))","user":"567c63f6e4b05957ce8c61bb"},{"problem":98,"code":"(fn ec [f xs]\n  (set (map set\n       (vals (group-by f xs)))))","user":"56504dc2e4b0284900eef6bc"},{"problem":98,"code":"(fn [thefn theset] (let [results (atom {})] (into #{} (vals (last (for [elem theset :let [result (apply thefn [elem])]]\n(swap! results conj {result (into #{} (conj (@results result) elem))})))))))","user":"55f75c6be4b06e875b46cea9"},{"problem":98,"code":"(fn es [f xs]\n  (into #{}\n        (map\n         second\n         (reduce (fn [acc x]\n                   (update-in acc [(f x)] #((fnil conj #{}) % x))) {} xs))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"code":"(fn [f set] (apply hash-set (map #(apply hash-set %) (vals (group-by f set)))))","problem":98,"user":"4f13047d535d64f60314642c"},{"code":"(fn [f d]\n  (set (vals (apply merge-with into (map #(hash-map (f %) #{%}) d)))))","problem":98,"user":"50a2f901e4b029e8bace362a"},{"problem":98,"code":"#(set (map (comp set val) (group-by % %2)))","user":"57ccedaae4b0c746388ab88e"},{"problem":98,"code":"(fn [f d]\n    (let [g (group-by f d)]\n      (set (map set (vals g)))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn ninety-eight\n  [f s]\n  (into #{} (map\n             set\n             (vals (group-by f s)))))","problem":98,"user":"510591dde4b06d28cacc92eb"},{"problem":98,"code":"(fn equiv [f s]\n  (->> s\n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn equivalence-classes [f coll]\n  (->> coll\n       (group-by f)\n       vals\n       (map set)\n       (into #{})))","problem":98,"user":"530578ede4b0d8b024fd3760"},{"problem":98,"code":"(fn eq-class\n  [f domain]\n  (->> domain\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"5974d2ede4b01722bebd4cb6"},{"problem":98,"code":"(fn [f d]\n  (->> d\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn [f s]\n  (set\n    (map  #(set (second %)) (group-by f s))\n  )\n)","problem":98,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":98,"code":"(fn [f D]\n   (reduce (fn [sets [a b]]\n             (let [[a-set b-set] (map (fn [e] (first (filter #(% e) sets))) [a b])]\n               (if (= (f a) (f b))\n                 (conj (disj sets a-set b-set) (apply conj a-set b-set))\n                 sets)))\n           (set (map set (partition 1 1 D)))\n           (map vec (set (for [a D, b D :when (not= a b)] #{a b})))))\n\n;; Alternative version\n;(fn [f D]\n;  (-> (reduce (fn [sets [left right]]\n;                (let [[left-set right-set] (map (fn [e] (first (filter #(% e) sets))) [left right])\n;                      other-sets (disj sets left-set right-set)\n;                      equal (= (f left) (f right))]\n;                  (cond (= equal (= left-set right-set)) sets\n;                        equal (conj other-sets (conj left-set right) (disj right-set right))\n;                        :else (conj other-sets #{right} (disj right-set right)))))\n;              #{D} (for [a D, b D :when (not= a b)] [a b])) (disj #{})))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":98,"code":"(fn [f s]\n  (set (map #(set (take-nth 2 (flatten %))) \n    (partition-by #(second %) \n      (sort-by #(second %) \n        (map vector s (map f s))\n)))))","user":"54524afbe4b0e397800069bc"},{"problem":98,"code":"(fn [f coll]\n  (->> (group-by f coll)\n       vals\n       (map set)\n       set))","user":"60460824e4b02d28681c77bc"},{"code":"(fn [f s1]\n  (->> (group-by f s1) vals (map set) set))","problem":98,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":98,"code":"(fn [f x]\n    (set (map (fn [[k v]] (set v)) (group-by f x))))","user":"5921a080e4b09b4ee5954c77"},{"problem":98,"code":"(fn [f D] (->> D\n                 (group-by f)\n                 (vals)\n                 (map set)\n                 (set)))","user":"5901158de4b0438e51c2d039"},{"problem":98,"code":"(fn [f items]\n  (loop [results {} items items]\n    (if (empty? items)\n      (set (vals results))\n      (let [v (first items) k (f v)]\n        (recur\n          (assoc results k (conj (get results k #{}) v))\n          (rest items))\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [f xs]\n  (letfn [(hm [xs] (into #{} xs))]\n    (->> xs (group-by f) vals (map hm) hm)))","problem":98,"user":"508157b2e4b0946d0443855c"},{"problem":98,"code":"(fn [f d] (apply hash-set (vals (reduce #(let [r (f %2) s (get %1 r)]\n                           (assoc %1 r (if s (conj s %2) (hash-set %2)))) (hash-map) d))))","user":"57dafe97e4b0bd073c20241c"},{"code":"(fn equa [f x]\n  (let [m (apply conj {} (map #(vector % (f %)) x))]\n    (set (map #(set (filter (fn [x] (= % (m x))) (keys m))) (vals m)))))","problem":98,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn e[f s]\n   (set (map set \n     (partition-by f \n       (sort-by f s)))))","problem":98,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn [f ls]\n  (set (for [[_ s] (reduce (fn [m x]\n                             (let [y (f x)]\n                               (assoc m y (conj (m y) x)))) {} ls)] (set s))))","problem":98,"user":"538d8bb8e4b0b51d73faae71"},{"problem":98,"code":"(comp (partial into #{}) (partial map #(into #{} %)) vals group-by)","user":"5412ef7ee4b01498b1a719da"},{"problem":98,"code":"(fn [f s] (set (map set (partition-by f (sort #(compare (f %1) (f %2)) s)))))","user":"5b3f2ba9e4b02d533a91bc09"},{"code":"(fn [func the-set]\r\n  (->> (sort-by func the-set)\r\n    (partition-by func)\r\n    (map set)\r\n    (into #{})))","problem":98,"user":"4dc537fd535d8a4b2fd74282"},{"problem":98,"code":"(fn equal\n  [f seq1]\n   (set (map set (vals (group-by f seq1))))\n  )","user":"53d6b266e4b0e771c3025459"},{"code":"(fn [f v] (set (map #(set (map first %)) (vals (group-by second (map #(vector % (f %) ) v))))))","problem":98,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn [f s]\n  (apply hash-set (map #(apply hash-set %) (vals (group-by f s)))))","problem":98,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":98,"code":"(fn [f D]\n(set (map (comp set val) (group-by f D))))","user":"573632b7e4b0cd1946bd102f"},{"problem":98,"code":"(fn [f d]\n  (->> (map vector (map f d) d)\n       (sort-by first )\n       (partition-by first)\n       (map #(set (map second %)))\n       set))","user":"5712854ce4b07c98581c3a89"},{"problem":98,"code":"(fn sor [f D]\n  (loop [s (sort-by f D) d #{} c 1]\n    (if (empty? s) d\n      (if (= 1 (count s)) (recur [] (conj d (into #{} s)) 1)\n      (if (= (f (first s)) (f (nth s c))) (if (< c (- (count s) 1))  (recur s d (inc c))\n             (recur [] (conj d (into #{} s)) 1))\n        (recur (nthrest s c) (conj d (into #{} (take c s))) 1))))))","user":"558378dce4b05c286339e115"},{"code":"(fn [f D]\n  (->>\n   (group-by f D)\n   vals\n   (map set)\n   set))","problem":98,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn eq-class\n  [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":98,"code":"(fn [f x](->> (group-by f x)\n              (vals)\n              (map set)\n              (set)\n              ))","user":"566a3a26e4b0a866af689699"},{"problem":98,"code":"#(->> (group-by %1 %2)\n      (reduce (fn [res m] (into res (list (set (val m))))) #{}))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":98,"code":"(fn\n  [f D]\n  (set (distinct\n        (map\n          (fn [a]\n            (let [res (f a)]\n              (clojure.set/select\n                (fn [b] (= res (f b)))\n                D)))\n          D))))","user":"59a6185ee4b066c664927d76"},{"problem":98,"code":"(fn eq-class [f d]\n  (->> (group-by f d)\n       (vals)\n       (map set)\n       (set)))","user":"5264383be4b03e8d9a4a70cb"},{"problem":98,"code":"(fn equiv [f s]\n  (set (for [e s]\n     (set (filter #(= (f %) (f e)) s)))))","user":"5c950334e4b048ec896c5a44"},{"problem":98,"code":"(fn [f D]\n    (->> (group-by f D)\n         (vals)\n     \t (map set)\n         (into #{})))","user":"573a0ecce4b0cd1946bd1088"},{"problem":98,"code":"(fn [f D]\n  (->> (group-by f D)\n       (vals)\n       (map #(into #{} %))\n       (into #{})))","user":"592ac17ae4b072a2710fcf26"},{"problem":98,"code":"(fn [f s]\n  (->> (group-by f s)\n            vals\n            (map set)\n            set))","user":"58949f8de4b00487982d525e"},{"code":"(fn [fun domain]\n    (into #{} (map #(into #{} %) (partition-by fun (sort-by fun domain)))))","problem":98,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [f start]\r\n    (set (map (comp set val) (group-by f start))))","problem":98,"user":"4fe900a6e4b0547ebccb243a"},{"problem":98,"code":"(fn eq-class [f d]\n    (->> d\n         (group-by f)\n         (vals)\n         (map set)\n         (set)))","user":"5a91988ae4b002d099cae6f9"},{"problem":98,"code":"(fn [f in]\n  (set (map set (vals (group-by f in)))))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn[f a](set (map set (vals (group-by f a)))))","problem":98,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":98,"code":";; peterwilkins and I worked together on this fun exercise:\n\n\n(fn [f xs]\n    (set \n     (->> \n      (map #(vector (f %) %) xs)\n      (group-by first)\n      vals\n      (map (comp set #(map second %))))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":98,"code":"(fn __ [f d]\n  (set (map set (vals (group-by f d)))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":98,"code":"(fn eq-classes [f D]\n  (->>\n    (reduce\n      (fn [z h]\n        (let [r (f h)\n              c (get z r)]\n          (assoc z r (if c (conj c h) #{h})))) {} D)\n    vals\n    set))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":98,"code":"(fn eq-cls [f D]\n  (->> (for [s D] [s (f s)])\n       (group-by #(identity (second %)))\n       (vals)\n       (map #(set (map first %)))\n       (into #{})\n  ))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":98,"code":"(fn [f D]\n  (->> D (group-by f) (vals) (map set) (set)))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [f d]\n  (into #{} (map #(into #{} %) (vals (group-by f d)))))","problem":98,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":98,"code":"(fn quot-space\n  [f s] {:pre [(ifn? f), (set? s)]}\n  (->> (group-by f s)\n       vals\n       (map set)\n       set))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [f D]\n  (set (map set (vals\n                 (loop [ D D\n                        E {} ]\n                   (cond\n                    (not D) E\n                    (get E (f (first D))) (recur (next D) (assoc E (f (first D)) (conj (get E (f (first D))) (first D))))\n                    :else (recur (next D) (assoc E (f (first D)) [(first D)]))))))))","problem":98,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":98,"code":"(fn [f D]\n    (reduce\n      (fn [result a]\n        (if false (let [extended\n                         (reduce\n                           (fn [res b-set]\n                             1)\n                           result)]))\n        (let [eq-set\n              (some\n                #(if (= (f a) (f (first %)))\n                   %)\n                result)]\n          (if eq-set\n            (conj\n              (disj result eq-set)\n              (conj eq-set a))\n            (conj result #{a}))))\n      #{}\n      D))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(fn [f D]\n  (set (map (comp set val) (group-by f D))))","problem":98,"user":"5164867fe4b003cf19fdde3e"},{"problem":98,"code":"(fn [func coll]\n  (set (map set (vals (group-by func coll)))))","user":"53322cece4b019098a6f8b73"},{"problem":98,"code":"(fn equivalence-classes\n  [f d]\n  (into #{} (vals (reduce #(assoc %1 (f %2) (conj (get %1 (f %2) #{}) %2)) {} d))))","user":"4e82c062535db62dc21a62cc"},{"code":"(fn [f s]\n  (into #{} (map set (vals (group-by f s)))))","problem":98,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":98,"code":"#(set (map (fn [m] (set (val m))) (group-by % %2)))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [f coll]\n    (->> coll\n         (group-by f) \n         (vals)\n         (map set)\n         (set)))","problem":98,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [f D]\n  (reduce\n    (fn [r n]\n      (conj r (into #{} (filter #(= (f n) (f %)) D))))\n    #{}\n    D))","problem":98,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn [f s]\n  (->> s\n    (group-by f)\n    vals\n    (map set)\n    set))","problem":98,"user":"50bc23e4e4b0594b91591c3c"},{"problem":98,"code":"(fn [f d] (into #{} (map set (vals (reduce\n           #(update-in % [(f %2)] conj %2)\n           {} d)))))","user":"53572176e4b04ce2eb3ed276"},{"code":"#(->> (group-by % %2)\n      vals\n       (map set)\n        set)","problem":98,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":98,"code":"(fn equivalence-classes [func coll]\n  (reduce conj #{}\n    (map\n      #(set (second %))\n      (group-by func coll))))","user":"528bba38e4b0239c8a67aea9"},{"problem":98,"code":"(fn [f xs]\n  (->> xs\n       (reduce (fn [a b] (update-in a (vector (f b)) (fn [x] (conj (or x #{}) b)))) {})\n       vals\n       (into #{})))","user":"534d1173e4b084c2834f4a98"},{"problem":98,"code":"(fn [f m]\n  (set (map set (vals (group-by f m)))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [f c] (->> c (group-by f) vals (map set) set))","problem":98,"user":"5392b849e4b0b51d73faaeb1"},{"code":"#(set (map set (map second (group-by %1 %2))))","problem":98,"user":"4ed2dd98535d44c135fd68e2"},{"problem":98,"code":"(fn equiv-classes\n  [f d]\n  (set (map set (vals (group-by f d)))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":98,"code":"(fn equiv[f xs]\n  (->> (map f xs)\n      (zipmap xs)\n      (reduce-kv (fn[init k v]\n                   (assoc-in init [v] (if (nil? (get-in init [v]))\n                                        #{k}\n                                        (conj (get-in init [v]) k))))\n                 {})\n      (vals)\n      (set)))","user":"54f86b8ce4b01ecee9d88828"},{"problem":98,"code":"(fn eclass [f s]\n  (set (reduce (fn [acc1 x1]\n                 (concat acc1\n                         (vals (reduce (fn [acc2 x2]\n                                         (if (= (f x1) (f x2))\n                                           (assoc acc2 (f x1) (into (get acc2 (f x1) #{}) [x1 x2]))\n                                           acc2))\n                                       {}\n                                       s)))) #{}\n               s)))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn equivalence-classes [f domain] (set (map set (vals (group-by f domain)))))","problem":98,"user":"52f10094e4b05e3f0be25ee8"},{"problem":98,"code":"(fn [f col]\n    (set (map set (vals (group-by f col)))))","user":"57aa290de4b0b8559636fc65"},{"problem":98,"code":"(fn equiv [func coll]\n   (->> coll\n        (map #(vector % (func %)))\n        (sort-by last)\n        (partition-by last)\n        (map (fn [items] (map first items)))\n        (map set)\n        (set)))","user":"53ed6976e4b0d648e757f4c4"},{"problem":98,"code":"(fn equiv-classes [f X]\n  (loop [X X val2equivs {}]\n    (if (empty? X)\n      (set (map val2equivs (keys val2equivs)))\n      (recur (rest X) \n             (if (contains? (set (keys val2equivs)) (f (first X)))\n               (assoc val2equivs (f (first X)) \n                      (conj (get val2equivs (f (first X))) (first X)))\n               (conj val2equivs [(f (first X)) #{(first X)}]))))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn equiv-class [f coll]\n  (->> (group-by f coll)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn [f seq]\n   (set (map set (vals (reduce #(merge %1 {(f %2) (conj (%1 (f %2)) %2)} ) {} seq))))\n)","problem":98,"user":"522eba30e4b01cdb292c5f0e"},{"problem":98,"code":"(fn [f x] ((comp set vals) (reduce (fn [m e] (let [k (f e)] (assoc m k (conj (m k #{}) e)))) {} x)))","user":"545ddac3e4b01be26fd74676"},{"problem":98,"code":"(fn [f v]\n  (set (map set (vals (group-by f v)))))","user":"51a4d802e4b0def3c5c5869a"},{"code":"#(set (map set (vals \n    (group-by % %2))))","problem":98,"user":"4daa374930acd6ed13482a68"},{"problem":98,"code":"(fn [f s]\n  (let [a (into [] s)\n        b (map f a)\n        c (zipmap a b)\n        d (sort-by second c)\n        e (group-by second d)\n        f (vals e)]\n    (->> (map (fn [x](map #(first %) x)) f)\n         (map #(apply hash-set %))\n         (into #{}))))","user":"564d3169e4b0284900eef67c"},{"problem":98,"code":"(fn [func col]\n           (reduce (fn [result x]\n                     (conj result (set (x 1))))\n                   #{} (group-by func col)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":98,"code":"(fn [f xs]\n  (->> xs\n       (reduce (fn [dict e]\n                 (let [k (f e)]\n                   (assoc dict \n                          k\n                          (conj (or (get dict k) #{})\n                                e)))) {})\n       vals\n       (into #{})))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":98,"code":"(fn equivalence-sets [f domain]\n  (loop [res {}\n         rem domain]\n    (if (empty? rem)\n      (set (vals res))\n      (let [head (first rem)\n            tail (rest rem)\n            val (f head)\n            keys (if (contains? res val)\n                   (res val)\n                   #{})]\n        (recur (assoc res val (conj keys head)) tail)\n        ))\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn der [f input]\r\n  (into #{}\r\n  (for [[k v]\r\n\t      (reduce #(let [result (f %2)]\r\n\t\t\t (assoc %1 result (conj (get %1 result) %2)))\r\n\t\t      {}\r\n\t\t      input)]\r\n\t  (into #{} v))))","problem":98,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn\n  [f d]\n  (set (map set (vals (group-by f d)))))","problem":98,"user":"51804bcbe4b04f45bde7d901"},{"code":"(fn [f col]\n  (set (vals\n   (apply\n    merge-with #(apply conj % %2)\n    (map (fn [x] {(f x)  #{x} }) col)))))","problem":98,"user":"519b7d76e4b02a926d9a436e"},{"problem":98,"code":"(fn equivalence-classes [f d]\n    (-> (reduce (fn [acc i]\n                  (let [k (f i)]\n                    (assoc acc k (conj (get acc k #{}) i))))\n                {} d)\n        vals\n        set))","user":"4dfe5a93535d04ed9115e786"},{"problem":98,"code":"(fn equivalence-classes [f d]\n  (->> d\n       (group-by f)\n       vals\n       (map set)\n       (into #{})))","user":"5f300f28e4b033932238a682"},{"problem":98,"code":"#(->>\n  (group-by %1 %2)\n  vals\n  (map set)\n  set\n  )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":98,"code":"#(set (map (fn [e]\n             (set (second e)))\n           (group-by %1 %2)))","user":"60096aabe4b074f607df667f"},{"code":"(fn [f s] (set (map (fn [[k vs]] (set (map first vs))) (group-by val (zipmap s (map f s))))))","problem":98,"user":"4eb44d78535d7eef30807360"},{"code":"(fn ru[f s] (set (map set (vals (group-by f s)))) )","problem":98,"user":"4e9de526535dbda64a6f6b8e"},{"problem":98,"code":"(fn eq-classes [f domain]\n  (letfn [\n    (r [cls el]\n      (let [rep (f el)]\n        (if (contains? cls rep) (conj cls [rep (conj (get cls rep) el)]) (conj cls [rep #{el}]))))]\n    (set (vals (reduce r {} domain)))))","user":"588e4e05e4b00487982d5188"},{"problem":98,"code":"(fn [f d]\n  (set (for [a d]\n         (into #{} (filter #(= (f a) (f %)) d)))))","user":"56706f01e4b0a866af6896f2"},{"problem":98,"code":"(fn equivalence-classes [f domain]\n  (->> domain\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":98,"code":"(fn [f d]\n  (set\n   (map set\n        (vals \n         (apply merge-with\n                concat\n                (map #(hash-map (f %) (list %)) d))))))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn [f s] (into #{} (map set (vals (group-by f s)))))","problem":98,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [f l]\n(set (map #(set (second %)) (group-by f l)))\n)","problem":98,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":98,"code":"(fn [f s]\n   (reduce-kv #(conj %1 (apply hash-set %3)) #{} (group-by f s)))","user":"5f3f2281e4b004f08c61c561"},{"problem":98,"code":"(fn [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       (set)\n       ))","user":"567b39b6e4b05957ce8c61a3"},{"problem":98,"code":"(fn [f coll]\n  (->> (group-by f coll)\n       (vals)\n       (map #(into #{} %))\n       (into #{})))","user":"583667c7e4b089d5ab817cfb"},{"problem":98,"code":"(fn [f xs]\n      (->>\n        (group-by f xs)\n        vals\n        (map set) \n        set))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":98,"code":"(fn [f xs]\n  (->> (group-by f xs)\n       (vals)\n       (map set)\n       (set)))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"(fn [f as]\n  (->> as\n    (reduce (fn [m a]\n      (let [b (f a)] (assoc m b (conj (get m b #{}) a))))\n      {})\n    (vals)\n    (set)))","problem":98,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [f s]\n     (loop [s s result {}]\n\t      (if (empty? s)\n\t        (into #{} (map #(into #{} %) (vals result)))\n\t\t(let [key (f (first s))]\n\t\t (do (prn (first s) key)\n\t\t   (if (contains? result key)\n\t\t       (recur (rest s) (merge-with concat result {key #{(first s)}}))\n\t\t       (recur (rest s) (conj result {key #{(first s)}}))))))))","problem":98,"user":"4f066916535dcb61093f6c10"},{"code":"(fn [f ns]\n  (set\n    (vals\n      (reduce (fn [acc n]\n                (update-in acc [(f n)] (fnil #(conj % n) #{})))\n              {}\n              ns))))","problem":98,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn equivalence-group [f coll]\n  (->> (group-by f coll)\n       (map (comp set second))\n       set))","problem":98,"user":"52381b2ae4b0fae3832e99ef"},{"problem":98,"code":"(comp set (partial map set) vals group-by)\n\n;golf\n;(comp set #(map set %) vals group-by)","user":"54d341f7e4b0e8a36923e603"},{"problem":98,"code":"(fn [f D]\n    (->> (group-by f D)\n         vals\n         (map set)\n         set))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn equiv [f D]\n  (set (vals (reduce (fn [C x]\n                       (let [class-of-x (f x)]\n                         (assoc C class-of-x (conj (get C class-of-x #{}) x))))\n                     {} D))))","problem":98,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn equiv-class [f lst]\r\n  (set (map set (map second (group-by f lst)))))","problem":98,"user":"4ddc620d535d02782fcbea06"},{"problem":98,"code":"(fn [f s](\n   set(map (fn[i]( set(map (fn[j](first j)) i ))) (map second (group-by second (map-indexed (fn[idx itm][itm (f itm)]) s))))\n))","user":"56039843e4b04bb52996e1be"},{"code":"(fn [f d]\n   (set (map set (vals (apply merge-with concat (map #(assoc {} (f %) [%]) d))))))","problem":98,"user":"4e89f46c535d3e98b8023288"},{"code":"#(->> (group-by %1 %2) (vals) (map set) (set))","problem":98,"user":"4f21838fe4b0d66497709fd2"},{"problem":98,"code":"(fn ec[f s]\n  (set  \n    (reduce #(conj %1 (set (last %2))) #{}\n      (group-by f s))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":98,"code":"#(->> (group-by % %2) (map (comp set val)) set)","user":"5392bfdee4b0b51d73faaeb2"},{"problem":98,"code":"(fn [f s]\n  (apply conj #{}\n         (map (comp set val)\n              (group-by f s))))","user":"574abbfbe4b02ea114799200"},{"problem":98,"code":"(fn [f s]\n   (->> (group-by f s)\n        (vals)\n        (map set)\n        (set)))","user":"59f043d0e4b0966464fe6a3d"},{"code":"#(->> %2 (group-by %) (vals) (map set) (set))","problem":98,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn equiv-class [f values]\n  (set (vals (reduce (fn [m v]\n                       (conj m\n                             (apply hash-map\n                                    (let [k (f v)]\n                                      (list k\n                                            (if-not (contains? m k)\n                                              #{v}\n                                              (conj (m k) v)))))))\n                     {}\n                     values))))","problem":98,"user":"5175616ae4b0dea9bbfba576"},{"code":"(fn [f dom]\r\n  (set (map set (vals (group-by f dom)))))","problem":98,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":98,"code":"(fn [f coll]\n  (->> coll (group-by f) vals (map set) set))","user":"5db5d09be4b010eb3c36cd31"},{"problem":98,"code":"(fn [f s]\n  (set (map set (map val (group-by f s)))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":98,"code":"(fn equiv [f dom]\n  (set (map set (vals (group-by f dom)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [f l]\n  (let [s (set (map f l))]\n    (loop [s s r #{}]\n      (if (empty? s) r\n          (recur (rest s) \n                 (conj r (apply conj #{} (filter #(= (first s) (f %)) l))))))))","problem":98,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":98,"code":"(comp (partial into #{}) (partial map set) vals group-by)","user":"559b55d6e4b066d22e731f54"},{"problem":98,"code":"(fn equiv\n  [f xs]\n  (->> (group-by f xs)\n       (vals)\n       (map set)\n       (set)))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn [ f D ]\n  (set (map set (vals (group-by f D ))))\n  )","problem":98,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":98,"code":"(fn [f coll] (set\n                (map second\n                     (reduce (fn [m x]\n                               (let [eq (f x)]\n                                 (if (contains? m eq)\n                                   (update-in m [eq] clojure.set/union #{x})\n                                   (conj m [eq #{x}])))) {} coll))))","user":"56f15eade4b04a395b9a048e"},{"problem":98,"code":"(fn number98 [f D]\n  (->> (reduce #(merge-with clojure.set/union % {(f %2) #{%2}}) {} D)\n       (vals)\n       (into #{})))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn equivalence [f D]\n  (let [ans (map #(vector (f %) %) D)\n        grp (vals (group-by first ans))\n        res (map (fn [s]\n                   (set (map second s))) grp)]\n    (set res)))","problem":98,"user":"4e3bccb1535deb9a81d77f55"},{"problem":98,"code":"(fn [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       set))","user":"559454f2e4b0c79f6e1db952"},{"problem":98,"code":"(fn [f s] (into #{} (map #(into #{} %) (vals (group-by f s )) )))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":98,"code":"(fn [f c] (set ((comp (partial map set) vals) (group-by f c))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":98,"code":"(fn [f D]\n  (set (vals (apply merge-with clojure.set/union (map #(hash-map (f %) #{%}) D)))))","user":"56ef077ae4b04a395b9a0459"},{"problem":98,"code":"(fn [f a-set]\n  (let [getval (fn [m k] (m k #{}))]\n    (set\n      (vals\n        (reduce\n          #(assoc %1 (f %2) (conj (getval %1 (f %2)) %2))\n          {}\n          a-set)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn [f d]\n  (->> (group-by f d)\n    vals\n    (map set)\n    set))","problem":98,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":98,"code":"(fn [f D] (into #{} (map set (partition-by f (sort-by f D)))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn [x y] (set (map set (vals (group-by x y)))))","problem":98,"user":"514cfa27e4b019235f6c057d"},{"problem":98,"code":"(fn [f els]\n  (->> els\n       (group-by f)\n       vals\n       (map set)\n       (into #{})))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":98,"code":"(fn [f col]\n (->> (group-by f col)\n      (vals)\n      (map set)\n      (set)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [f coll]\n    (->>\n     coll\n     (group-by f)\n     vals\n     (map set)\n    set))","problem":98,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn eq-classes\n  [f coll]\n  (->> (group-by f coll)\n       vals\n       (map set)\n       set))","problem":98,"user":"4dc0ff08535d020aff1edf84"},{"problem":98,"code":"(fn eqclass [f s]\n  (let [vals (map (fn [e] {(f e) [e]}) (seq s))\n        vals (apply merge-with concat vals)]\n    (apply conj #{} (map #(set (second %)) vals))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn __ [f s]\n  (->> s\n    (map #(vec [% (f %)]))\n    (group-by second)\n    (vals)\n    (map #(map first %))\n    (map set)\n    (set)))","problem":98,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"#(->> (group-by %1 %2)\n      vals\n      (map set)\n      set)","problem":98,"user":"4eb51942535d7eef30807365"},{"problem":98,"code":"(fn [f s]\n  (reduce #(conj % (set (val %2))) #{} (group-by f s)))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn[f s]\r\n  (into #{} \r\n    (map (fn [[k v]] (into #{} v ))\r\n      (apply merge-with concat \r\n        (map #(identity {(f %) [%]} ) s)))))","problem":98,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn eqcl [f xs]\n  (into #{} (map (fn mf [b] \n         (into #{} (filter (fn apcon [a]\n                   (= (f a) b)) xs)))\n       (into #{} (map f xs)))))","problem":98,"user":"4e123905535d04ed9115e7ce"},{"problem":98,"code":"(fn eclasses [f D]\n  (set (map set (vals (group-by f D)))))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [f s] (into #{} (map #(set (% 1)) (group-by f s))))","problem":98,"user":"502904e0e4b0feaf66e22fad"},{"problem":98,"code":"(fn equivalene-classes [f d]\n  (->> d (group-by f) (map (comp set val)) set))","user":"5383668ee4b06839e8705edd"},{"code":"(fn [x y] (set (map #( set (second %)) (group-by x  y))))","problem":98,"user":"518c5236e4b087e178201de0"},{"problem":98,"code":"#(->> %2\n      (group-by %)\n      vals\n      (map set)\n      set)","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"(fn [f x] (set (map set (vals (group-by f x)))))","problem":98,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [f s]\n  (set (for [y (set (map f s) )]\n    (set (filter #(= y (f %)) s))\n  ))\n)","problem":98,"user":"4f84400de4b033992c121c2e"},{"problem":98,"code":"(fn __ [f D]\n  (into #{} (map #(into #{} (filter (fn [x] (= (f %) (f x))) D)) D)))","user":"4f856adfe4b033992c121c44"},{"code":"(fn [-fn -set]\n   (set (map #(set (map last (last %)))\n             (group-by #(identity(first %))\n                       (map #(vector (-fn %) %) -set)))))","problem":98,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":98,"code":"(fn equivalence-classes [f s]\n  (set (map set (vals (group-by f s)))))","user":"56ac81ace4b03c432f187347"},{"problem":98,"code":"(fn [f D]\n  (->> D (group-by f) vals (map set) set)\n  )","user":"525d490ae4b0cb4875a45d70"},{"problem":98,"code":"(fn [f s]\n  (into #{} (vals (reduce (fn [m x] (let [k (f x) v (m k)] \n                                      (assoc m k (if (nil? v) #{x} (conj v x)))))\n                          {} s))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":98,"code":"(fn [f d]\n  (let [s (map hash-set d)\n        find (fn [s x]\n               (first (filter #(= (f (first %)) (f (first x))) s)))\n        update (fn [a x]\n                 (let [e (find a x)]\n                   (if e\n                     (conj (disj a e)\n                           (conj e (first x)))\n                     (conj a x))))]\n    (reduce update\n            (hash-set (first s))\n            (rest s))))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"#(set (map (comp set second) (group-by % %2)))","problem":98,"user":"4e589bdc535d8a8b8723a295"},{"code":"(comp set #(map set %) vals group-by)","problem":98,"user":"4dbef924535d020aff1edf6e"},{"problem":98,"code":"(fn [f D]\n\t(set (vals (apply merge-with clojure.set/union (map #(hash-map (f %) #{%}) D)))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":98,"code":"(fn [f D]\n  (->> (group-by f D)\n       (map #(set (second %)))\n       (into #{})))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [f xs] (into #{} (map #((comp set second) %)  (group-by f xs))))","problem":98,"user":"513d121fe4b0e544971636a2"},{"problem":98,"code":"(fn[f s]\n  (set\n    \t(map #(second (apply map sorted-set %))\n              (vals (group-by first (map #(vector (f %) %) s))))))","user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [f d]\n  (set (map #(into #{} %) (vals (group-by f d)))))","problem":98,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn ff [f st]\n  (into #{} (for [[k v] (seq (group-by f (seq st)))]\n    (into #{} v))))","problem":98,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [f coll]\n  (set\n    (map \n    set\n    (vals\n  \n      (reduce \n        (partial merge-with concat)\n        (map #(hash-map (f %) (vector %)) coll)\n      )))))","problem":98,"user":"4f03154a535dcb61093f6a58"},{"code":";(fn equivalence-classes\n;  [f s]\n;  (->> s\n;        (group-by f)\n;        vals\n;        (map set)\n;         set))\n\n#(->> %2\n    (sort-by %)\n    (partition-by %)\n    (map set)\n    set)","problem":98,"user":"524f4256e4b0541d1855b808"},{"problem":98,"code":"(fn [f s]\n  (into #{} (map #(into #{} %) (vals (group-by f s)))))","user":"50d882d4e4b01f0871336e69"},{"code":"(fn __ [f d]\n  (into #{}\n        (for [[k v] (group-by f d)]\n          (into #{} v))))","problem":98,"user":"52828298e4b0757a1b17145b"},{"problem":98,"code":"(fn [f d]\n  (set\n    (map #(set (map first %))\n         (vals\n           (group-by second\n                     (map #(list % (f %)) d))))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":98,"code":"(fn solve [f x] (set (map (comp set second) (group-by f x))) )","user":"56f258d3e4b04a395b9a04a1"},{"code":"(fn equivalence-classes [f s]\n  (reduce (fn [acc [k v]] (conj acc (set v))) #{} (group-by f s)))","problem":98,"user":"504f57c7e4b0a02f9cffde71"},{"problem":98,"code":"(fn [F S]\n    (loop [ Ret {} First (first S) Rest (rest S) ]\n      (if (nil? First)\n        (into #{}\n          (for [ [Key Value] Ret] \n            Value\n          )\n        )\n        (let [Key (F First)]          \n          (recur\n            (assoc Ret Key (clojure.set/union (get Ret Key {}) #{First}) )\n            (first Rest)\n            (rest Rest)\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":98,"code":"(fn [f d]\n   (->>\n    (reduce (fn [acc e] (update-in acc [(f e)] #(if (nil? %) #{e} (conj % e))))\n            {} d)\n    vals\n    (into #{})))\n\n\n;;  (fn [f d]\n;;   (->> (group-by f d)\n;;        vals\n;;        (map set) (into #{})))","user":"5935b010e4b04f87174def55"},{"code":"#(set (map (fn [h] (set (val h))) (group-by % %2)))","problem":98,"user":"4fb99483e4b081705acca2da"},{"code":"(fn [f d]\n  (set (map (comp set second) (group-by f d))))","problem":98,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":98,"code":"(fn [f s]\n    (set (map (comp set val) (group-by f s))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn [f D]\n  (set (vals \n    (reduce\n      (fn [res value]\n        (let [e-class (f value)\n              equiv \n                (if (not (res e-class))\n                  #{value}\n                  (conj (res e-class) value))]\n          (assoc res e-class equiv))) {} D))))","problem":98,"user":"4e6dc95a535d5021c1a895f1"},{"problem":98,"code":"(fn [f xs] (->> (group-by f xs)\n                vals\n                (map set)\n                set))","user":"56b86e64e4b0f26550335924"},{"problem":98,"code":"(fn [func elems]\n  (into #{} (vals (reduce \n                   (fn [acc elem] \n                     (update-in acc [(func elem)] \n                             #(if % (conj % elem) #{elem})\n                             )\n                     )  {} elems\n                   )\n                  )\n        )\n  )","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [f d]\n  (set (map #(reduce (fn [acc e]\n                       (if (= (f %) (f e))\n                         (conj acc e)\n                         acc))\n                     #{}\n                     d)\n            d)))","problem":98,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn eqr [f d]\r\n   (set (vals (reduce #(let [k (f %2)]\r\n                    (assoc %1 k\r\n                           (conj (get %1 k #{}) %2)))\r\n                 {} d))))","problem":98,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn eqclasses [f s] (set (vals (reduce #(let [k (f %2)] (assoc % k (conj (get % k #{}) %2))) {} s))))","problem":98,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":98,"code":"(fn equiv-classes [f D]\n    (set (map set (vals (group-by f D)))))","user":"579693d4e4b039eba2ecb0e7"},{"code":"#(->> %2\n  (sort-by %)\n  (partition-by %)\n  (map set)\n  set)","problem":98,"user":"4f38b7d9e4b0e243712b1ee0"},{"code":"(fn [f s] (set (map set (vals (group-by #(f %) s)))))","problem":98,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn yay\r\n  ([f s] (yay f s #{}))\r\n  ([f s ac]\r\n   (if (empty? s) (set ac)\r\n      (let [[h t] [(first s) (rest s)]\r\n            hval (f h)\r\n            {eqs true, left false}\r\n              (group-by #(= hval (f %)) t)]\r\n         (recur f left (conj ac (set (conj eqs h))))))))","problem":98,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn equiv [f d]\n  (set (map set (vals (group-by f d)))))","problem":98,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [f  s] (into #{}\n      (map set (vals \n                         (group-by f  s)))))","problem":98,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [f s]\n  (letfn [(classify [f ret x]\n  \t\t\t(set (map set (concat (filter #(not= (f x) (f (first %))) ret)\n                                  (conj #{} (conj (first (filter #(= (f x) (f (first %))) ret)) x))))))]\n    (reduce #(classify f %1 %2) #{} s)))","problem":98,"user":"512eb723e4b0b740abc5982b"},{"code":"#(set(map set(vals(group-by %1 %2))))","problem":98,"user":"4dd4034a535dae65d5c462df"},{"problem":98,"code":"(fn equivalence-classes [f d]\n  (set (vals (reduce (fn [m x]\n                       (let [y (f x)] (assoc m y (into #{x} (m y)))))\n                     {}\n                     d))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":98,"code":"(fn equiv [f s] (set (map set (vals (group-by f s)))))","user":"59f78b49e4b0ca45a743a30e"},{"problem":98,"code":"#(set (map set\n                 (partition-by %1 \n                               (sort-by %1 %2))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn p98[f d]\n  (into #{} (vals (apply merge-with clojure.set/union (map #(hash-map (f %) #{%} ) d)))))","problem":98,"user":"500b61b1e4b03d00572d2d81"},{"problem":98,"code":"(fn [f x](set (map set (vals (group-by f x)))))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":98,"code":"(fn equivalence-classes [f D]\n  (->> D\n       (map #(vector (f %) %))\n       (group-by first)\n       vals\n       (map (fn [group] (map second group)))\n       (map set)\n       set))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn [r s]\n  (set (vals (reduce #(update-in % [(r %2)] (fnil conj #{}) %2) {} s))))","problem":98,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn [f D] (->> (group-by f D) vals (map set) set))","problem":98,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn [f domain]\n  (set (vals\n        (apply merge-with \n               clojure.set/union\n               (map #(sorted-map (f %) #{%}) domain)))))","problem":98,"user":"4f2e0369e4b0d6649770a064"},{"code":"#(set (map (comp set val)\r\n           (group-by % %2)))","problem":98,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":98,"code":"(fn [f s]\n  (set\n   (map set (vals (group-by f s)))))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn [f D]\n  (set (map #(set (second %)) (group-by f D))))","problem":98,"user":"4fba7d1ee4b081705acca2e0"},{"problem":98,"code":"(fn [f defset]\n   (set (vals (reduce (fn [acc new]\n                        (let [value (f new)]\n                          (update-in acc [value]\n                                     #(conj (set %) new))))\n                      {}\n                      defset))))","user":"50981062e4b04e098a4c7268"},{"code":"(fn __ [f D]\n  (into #{} \n        (map (fn [[x y]] (into #{} (map first y)))\n             (group-by second\n                       (map #(list % (f %)) D)))))","problem":98,"user":"4ec9549d535d6d7199dd36fe"},{"problem":98,"code":"(fn __ [f coll]\n  (->> coll\n       (reduce (fn [acc x] (update-in acc [(f x)] #(conj (set %) x))) {})\n       vals\n       set))","user":"55916764e4b0604b3f94d57b"},{"problem":98,"code":"(fn [a b]\n  (set (map #(into #{} %)(vals (group-by a b)))))","user":"566d71b1e4b0a866af6896ca"},{"problem":98,"code":"(fn [f s]\n  (set (map #(set (second %)) (group-by f s))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":98,"code":"(fn [f the-set]\n    (set (map set (vals (group-by f the-set)))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"#(set (map (fn[[_ v]] (set v)) (group-by % %2)))","problem":98,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn eq\r\n  [f c]\r\n  (apply hash-set (map #(apply hash-set (second %)) (into #{} (group-by f c)))))","problem":98,"user":"4f17ab99535d64f603146457"},{"problem":98,"code":"(fn eq-cs [f d]\n  (into #{}\n    (map (comp set second)\n         (group-by f d))))","user":"548fa2dfe4b0e286459a1240"},{"code":"(fn eqv-class [f D] (->> (group-by f D) vals (map set) set ) )","problem":98,"user":"51729002e4b044b2ef48a850"},{"problem":98,"code":"(fn [f xs]\n    (into #{} \n          (vals (reduce (fn [acc v] (assoc acc (f v) (conj (get acc (f v) #{}) v))) \n                        {} \n                        xs))))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn [f d] (set (for [a d] (set (filter #(= (f a) (f %)) d)))))","problem":98,"user":"50fc299ee4b0d10d794c19f2"},{"problem":98,"code":"(fn [f s]\n  (set (for [[k v] (group-by f s)] (set v))))","user":"5951190be4b066ee0a44aea4"},{"problem":98,"code":"(fn eqcl [p s]\n  (into \n   #{}\n   (map\n    #(into #{} %)\n    (vals\n     (group-by\n      p\n      s\n      )\n     )\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn f98 [f coll]\n   (loop [coll coll m {}]\n    (if (empty? coll)\n      (set (vals m))\n      (let [h (first coll)\n            k (f h)\n            v (get m k)]\n        (if (nil? v)\n          (recur (rest coll) (assoc m k #{h}))\n          (recur (rest coll) (assoc m k (conj v h))))))))","problem":98,"user":"4e88feef535d8b9bb0147ca8"},{"problem":98,"code":"(fn [f dom]\n  (->> dom\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"571d063ee4b0145328a76272"},{"code":"(fn [f d]\n  (set\n    (vals\n      (reduce\n        (fn [m x]\n          (let [r (f x)]\n            (if (contains? m r)\n              (assoc m r (conj (m r) x))\n              (assoc m r #{x})))) {} d))))","problem":98,"user":"51d08d67e4b067c365486351"},{"problem":98,"code":"(fn [f s] (set (map set (vals (group-by f s) ))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":98,"code":"(fn equiv-classes [f dom]\n    (set (vals (reduce (fn [m x] (into m {(f x) (into #{x} (m (f x)))})) {} dom))))","user":"59da6480e4b0ef0a1e9b5c68"},{"problem":98,"code":"(fn [f domain]\n    (->> (group-by f domain)\n         vals\n         (map set)\n         set))","user":"5317d78ee4b08068f379ed63"},{"problem":98,"code":"(fn p [f col]\n  (apply hash-set (map #(apply hash-set (second %)) (group-by f col))))","user":"53664e3be4b0243289761e74"},{"problem":98,"code":"(fn[f xs]\n   (->> xs\n        (group-by (fn[x] (f x)))\n        (vals)\n        (map set)\n        (set)))","user":"5d764e52e4b02e6b30c93524"},{"problem":98,"code":"(fn equivlance-class [f d]\n  (reduce\n   (fn [coll n]\n     (conj coll (into #{} (filter #(= (f n) (f %)) d))))\n   #{} d))","user":"55c66ffee4b0e31453f649c2"},{"problem":98,"code":"(fn [f d] (set (map set (vals (group-by #(f %) d)))))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [f s] (set (map #(set (second %))(group-by f s))))","problem":98,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [f D]\n    (->> D\n         (map (fn [v] [(f v) #{v}]))\n         (map #(apply hash-map %))\n         (apply merge-with clojure.set/union)\n         vals\n         set))","problem":98,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [f D]\n  (set (for [x (set (map f D))]\n         (set (filter #(= x (f %)) D)))))","problem":98,"user":"500cb910e4b05f7c30cfa698"},{"problem":98,"code":"(fn [f s]\n  (->> (group-by f s)\n      vals\n      (map set)\n      set))","user":"56018dd4e4b04bb52996e18f"},{"problem":98,"code":"(fn equ-class\n  [f sets]\n  (set (map set (vals (group-by f sets)))))","user":"565654dae4b0f9d632dd849f"},{"code":"#(into #{} (map (comp (partial apply hash-set) second) (group-by %1 %2)))","problem":98,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":98,"code":"(fn [f s]\n   (set\n    (let [m (group-by f s)]\n      (map set (vals m)))))","user":"5b073c34e4b0cc2b61a3bda4"},{"code":"(fn [f s]\r\n    (set (map #(-> % val set) (group-by f s))))","problem":98,"user":"4f58d92fe4b0a7574ea71858"},{"problem":98,"code":"(fn equivalence\n  [f s]\n  (->> (group-by f s)\n       vals\n       (map set)\n       set))","user":"4fc524aae4b081705acca37e"},{"code":"(let [eq-rel (fn [f xs ys rs]\n  (if (seq xs) \n    (recur f (rest xs) ys (conj rs (into #{(first xs)} (filter #(= (f (first xs)) (f %)) ys))))\n    rs ))] \n#(eq-rel %1 %2 %2 #{}))","problem":98,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn equ [f ls]\r\n   (->> ls\r\n   (group-by f )\r\n   (vals)\r\n   (map set)     \r\n   (set)     \r\n        ))","problem":98,"user":"502a9fdee4b095a7adb898b4"},{"problem":98,"code":"(fn [f coll] (reduce #(conj %1 (set %2)) #{} (vals (group-by f coll))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn tmp [f l] \n  (reduce (fn [x y] (conj x (set (filter #(= (f %) (f y)) l)))) #{} l))","problem":98,"user":"4dbdab4e535d020aff1edf49"},{"code":"(fn [f s] (->> s (group-by f) vals (map set) set))","problem":98,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn [f D]\n  (set (for [r (map f D)]\n        (set (filter #(= r (f %)) D)))))","problem":98,"user":"506a1985e4b01dc6af13f83e"},{"code":"(fn [f c]\r\n  (set (map set (vals (group-by f c)))))","problem":98,"user":"50843a4ae4b0c98812d0788b"},{"problem":98,"code":"(fn [f dom]\n  (loop [remaining dom rev (hash-map)]\n    (if (empty? remaining)\n      (apply hash-set (for [kv rev] (second kv)))\n      (if (contains? rev (f (first remaining)))\n        (recur (rest remaining) (update-in rev [(f (first remaining))] conj (first remaining)))\n        (recur (rest remaining) (conj rev [(f (first remaining)) (hash-set (first remaining))]))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":98,"code":"(fn \n  [f D]\n  (-> (reduce #(let [r (f %2)]\n                 (if (contains? % r)\n                   (assoc % r (conj (get % r) %2))\n                   (assoc % r #{%2})))\n              {} D)\n      vals\n      set))","user":"56bb652ae4b0f26550335953"},{"problem":98,"code":"(fn [f s]\n  (loop [result {} the-set s]\n    (if (empty? the-set)\n      (set (map (fn [[k v]] v) result))\n      (let [item (first the-set) fs (f item) rfs (result fs)]\n        (if (nil? rfs)\n          (recur (assoc result (f item) #{item}) (rest the-set))\n          (recur (assoc result (f item) (conj rfs item)) (rest the-set))\n        )\n      )\n    )\n  )\n)","user":"55d79b87e4b0e31453f64aa8"},{"problem":98,"code":"#(->> (group-by %1 %2)\n      (vals)\n      (map set)\n      (set))","user":"567d132ee4b05957ce8c61c3"},{"problem":98,"code":"(fn eq [f s]\n  (->> s\n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [f s]\n  (set (map #(set (val %)) (group-by f s))))","problem":98,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn equiv [f coll]\n  (set (for [v (set (map f coll))]\n\t       (set (filter #(not (nil? %))\n\t\t       (for [el coll]\n\t\t\t (if (= v (f el))\n\t\t\t   el\n\t\t\t   nil)))))))","problem":98,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":98,"code":"(fn [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"5bab5440e4b0a20761a23475"},{"problem":98,"code":"#(->> (group-by  % %2)\n    vals\n    (map set)\n      set)","user":"5d29c06be4b01671435dbc6b"},{"problem":98,"code":"(fn equivalence-classes [f coll]\n   (set (map set (vals (group-by f coll)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":98,"code":"(fn [f col]\n  (set\n    (map\n       set\n       (vals (group-by f col)))\n   ))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [f s] (into #{} (map #(into #{} %) (vals (group-by f s)))))","problem":98,"user":"50ad7888e4b0a40c9cfb08c7"},{"code":"(fn [f c] (set (map #(set %1) (vals (group-by f c)))))","problem":98,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn [f d]\n  (->> (group-by f d)\n       vals\n       (map set)\n       set))","problem":98,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn [f s]\n   (loop [l (seq s)\n          acc []]\n     (if (empty? l)\n       (set (map #(set (second %)) acc))\n       (recur (rest l)\n              (let [n (first l)\n                    calc (f n)]\n                (if (some #(= (first %) calc) acc)\n                  (map #(if (= (first %) (f (first l)))\n                          [calc (cons n (second %))]\n                          %)\n                       acc)\n                  (conj acc [calc #{n}])))))))","problem":98,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":98,"code":"(fn [f xs]\n  (->> (for [x xs] {(f x) #{x}})\n       (apply merge-with (comp set concat)) \n       vals set))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [f s] (apply hash-set (map (partial apply hash-set) (vals (group-by f s)))))","problem":98,"user":"503e7f06e4b06c4e0e1fa268"},{"code":"(fn [f s]\n  (set (map set (partition-by f (sort-by f s)))))","problem":98,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":98,"code":"(fn [f coll]\n            (set (vals (reduce\n                         (fn [result val]\n                           (let [key (f val)]\n                             (assoc result key (conj (get result key #{}) val))))\n                         {}\n                         coll))))","user":"53f891eee4b0de5c4184856d"},{"problem":98,"code":"(fn [f D]\n   (into #{} (map #(into #{} %)\n         (vals (group-by f D)))))","user":"55895eade4b059ccff29b202"},{"code":"(fn eqvcl [mod items]\n  (set (map (comp set second) (group-by mod items))))","problem":98,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn ec [f s]\r\n  (into #{} (map #(apply hash-set %) (vals (group-by f s)))))","problem":98,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn [f s]\n  (->> s (group-by f) vals (map set) set))","problem":98,"user":"4eb0a757535d7eef3080733d"},{"problem":98,"code":"(fn eq [f domain]\n  (set\n    (map set\n         (vals (group-by f domain)))))","user":"52ee46e5e4b05e3f0be25ec5"},{"problem":98,"code":"(fn [f coll]\n    (->> coll\n         (reduce (fn [m x] (let [k (f x)]\n                             (assoc m k (conj (get m k) x)))) {})\n         (vals)\n         (map #(into #{} %))\n         (into #{})))","user":"5782018de4b0d36ec5835e8e"},{"code":"(fn er [f svals]\n    (set (map (comp set second) (group-by f svals))))","problem":98,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [f coll]\n   (->> coll\n        (map #(conj [] (f %) %))\n        (group-by first)\n        vals\n        (map #(set (map second %)))\n        set))","problem":98,"user":"4e9fd521535d7eef3080729a"},{"problem":98,"code":"(fn equiv [f xs]\n\t(set (map (comp set second) (group-by f xs))))","user":"56540485e4b0f9d632dd847a"},{"problem":98,"code":"(fn [f s]\n  (->>\n   s  \n   (reduce\n    (fn [m s]\n      (assoc m (f s) (conj (set (get m (f s))) s))) {})\n   vals\n   set))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":98,"code":"(fn [f d]\n  (->> d\n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","user":"55c4e48be4b0e31453f649a7"},{"problem":98,"code":"(fn equivalence-classes [f coll]\n  (->> (group-by f coll)\n       (vals)\n       (map set)\n       (set)))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":98,"code":"(fn [f domain]\n  (set\n   (vals \n    (reduce\n     (fn [results n]\n       (let [res (f n)\n             equiv (get results res #{})]\n         (assoc results res (conj equiv n))))\n     {}\n     domain))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn [f s]\n  (set (map set (vals (group-by f s))))\n  )","problem":98,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn equivalence-class-by [f coll]\n  (set (map set (vals (group-by f coll)))))","problem":98,"user":"4ef6f5ea535dced4c769f250"},{"problem":98,"code":"(fn [f s]\n\t(set (map set (vals (group-by f s))))\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"(fn [f domain]\n  (let [mf (memoize f)]\n    (loop [[x & _ :as xx] (seq domain), result #{}]\n      (if (nil? x) result\n          (let [eqs (set (filter #(= (mf x) (mf %)) xx))]\n            (recur (remove eqs xx) (conj result eqs)))))))","problem":98,"user":"53300924e4b019098a6f8b55"},{"code":"#(->> (group-by %1 %2) vals (map set) set)","problem":98,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn [f D] (set (map set (vals (group-by #(f %) D)))))","problem":98,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [f dom]\n  (into #{} (map #(into #{} %) (vals (group-by f dom)))))","problem":98,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn equirel [fun d]\n (set (map set (vals (group-by fun d)))))","problem":98,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn [f c]\r\n  (set (map set (vals \r\n    (group-by f c)))))","problem":98,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":98,"code":"(fn eqClass [f xs]\n        (into #{} (map #(into #{} (second %)) (group-by f xs))) \n      )","user":"55896a0ce4b059ccff29b204"},{"code":"(fn equiv\n  [f s]\n  (let [pairs (for [x s\n                    y s\n                    :when (not= x y)]\n                [x y])\n        eq (into #{}\n                 (map set\n                      (filter (fn [[x y]] (= (f x) (f y)))\n                              pairs)))\n        other (reduce (fn [r e]\n                        (conj r #{e}))\n                      #{} (clojure.set/difference s (into #{} (mapcat identity eq))))]\n    (if (= (* 2 (count s)) (count eq))\n      #{s}\n      (clojure.set/union eq other))))","problem":98,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [f d] (set (map #(set %) (vals (group-by f d)))))","problem":98,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"#(set (map set (vals (group-by  % %2))))","problem":98,"user":"50921f9ae4b09a7d0b586de1"},{"code":"(fn [f s]\r\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn [f d]\n  (set (vals (reduce (fn [r n]\n                       (let [k (f n)]\n                         (assoc r k (if (contains? r k)\n                                      (conj (r k) n)\n                                      #{n}))))\n                     {} d))))","problem":98,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn [f c] (set (map set (vals (group-by f c)))))","problem":98,"user":"51672d15e4b079759a74a5e7"},{"code":"(fn [f data]\n  (->> data\n       (group-by f)\n       vals\n       (map set)\n       set\n      ))","problem":98,"user":"4f03641a535dcb61093f6a9b"},{"problem":98,"code":"(fn  equiv [f s]\n  (into \n   #{}\n   (map \n    #(set (% 1)) \n    (group-by f s))))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [f D]\n\n  (set (map set (vals (group-by f D)))))","problem":98,"user":"5124619ae4b02c3f2a072ccd"},{"problem":98,"code":"#(->> (group-by % %2)\nvals (map set) set)","user":"56903cb9e4b0dcc4269f40eb"},{"problem":98,"code":"(fn [f coll]\n  ((comp set map)\n     (comp set keys)\n     (reduce\n      #(let [v (f %2)\n             c (first (filter (fn [x] (contains? (set (vals x)) v)) %1))]\n         (if (nil? c)\n           (conj %1 {%2 v})\n           (conj (disj %1 c) (assoc c %2 v))))\n      #{}\n      coll)))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":98,"code":"(fn [f s]\n  (set (vals (reduce #(merge-with clojure.set/union %1 {(f %2) #{%2}}) {} s))))","user":"50f10f7be4b06d9538fe211a"},{"problem":98,"code":"(fn equiv-classes [f coll]\n  (letfn [(equiv [a b] (= (f a) (f b)))\n\n  (equiv-for [a ys]\n    (into #{} (cons a (filter (partial equiv a) ys))))\n\n  (one-equiv [xs]\n    (if (empty? xs)\n      #{}\n      (equiv-for (first xs) (rest xs))))\n    (all-equiv [zs]\n            (loop [acc #{} xset zs]\n              (if (empty? xset)\n                acc\n                (let [aq (one-equiv xset)\n                      nxts (clojure.set/difference xset aq)]\n                  (recur (conj acc aq) nxts)))))]\n    (all-equiv coll)))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn equiv \n    [f s]\n    (into #{}\n      (map \n       #(let [res #{%}]\n         (into res\n           (filter (fn [x] (= (f x) (f %))) s)))s)))","problem":98,"user":"5273e006e4b03e8d9a4a7495"},{"problem":98,"code":"(fn eq [f D]\n  (set\n   (map #(set (map last %))\n        (vals\n         (group-by first\n                   (map #(vector (f %) %) D ))))))","user":"56069006e4b08b23635d3174"},{"problem":98,"code":"(fn equivalence-classes [f D]\n\t(set \n     (vals \n      (reduce \n       (fn[res-map elem]\n         (merge-with \n          clojure.set/union \n          res-map \n          {(keyword (str (apply f [elem]))) #{elem}}))\n       {}\n       D))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn [cnd st]\n   (set (map #(last %) (reduce #(let [res (cnd %2)]\n              (assoc %1 res (conj (get %1 res #{}) %2)))\n           {} st))))","problem":98,"user":"4eb02674535d7eef30807338"},{"code":"(fn equivalence [f domain]\n  (->> [f domain]\n    (apply group-by)\n    (vals)\n    (map set)\n    (set))\n  )","problem":98,"user":"5094057fe4b097f48cc38593"},{"problem":98,"code":"(fn [f xs]\n  (->> (vals (group-by f xs))\n       (map set)\n       set))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn eq [f D]\n  (->> (group-by f D) vals (map set) set))","problem":98,"user":"4faafccde4b081705acca209"},{"code":"(fn equiv [f xs]\n  (loop [acc {} rem xs]\n    (if (empty? rem)\n      (-> acc vals set)\n      (recur\n       (let [x (first rem)]\n         (update-in acc [(f x)]\n                    (fnil #(conj % x) #{})))\n       (rest rem)))))","problem":98,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn f98 [f s]\n    (set (map set (vals (group-by f s)))))","problem":98,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"code":"(fn eq-classes[f a-set]\n     (set (map #(set (second %)) (group-by f a-set))) \n )","problem":98,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn equiv [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4f849f76e4b033992c121c36"},{"code":"(fn [f v]\n  (into #{} (map #(into #{} (val %1)) (group-by f v))))","problem":98,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [f D](set (map set (vals (group-by f  D)))))","problem":98,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [f D] \n   (set (map set (vals (reduce \n     (fn [r n] \n       (update-in r [(f n)] (fnil #(conj % n) []))) \n    {} D)))))\n\n;after I discovered group by :)\n;(fn [f D] (set (map set (vals (group-by f D)))))","problem":98,"user":"50de11b2e4b061dbdced7217"},{"problem":98,"code":"(fn [f d]\n  (->> d\n       (map #(vector (f %) %))\n       (group-by first)\n       (map (comp set (partial map second) second))\n       (set)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn eqv-classes [f D]\n  (set\n   (vals\n    (reduce\n     #(if (%1 (val %2))\n        (assoc %1 (val %2) (conj (%1 (val %2)) (key %2)))\n        (assoc %1 (val %2) #{(key %2)})) {}\n        (apply hash-map (interleave D (map f D)))))))","problem":98,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn eq [f D]\n  (set (map set (vals (group-by f D)))))","problem":98,"user":"51d96ad0e4b02ceefd94774f"},{"problem":98,"code":"(fn [f D]  \n\n (->> D\n\n      (group-by f)\n\n      (vals)\n\n      (map set)\n\n      set))","user":"57487084e4b009280f9f2b8c"},{"problem":98,"code":"(fn g [f D]\n  (set (map set (vals (group-by f D)))))","user":"5012da69e4b0c8732600222d"},{"problem":98,"code":"(fn [f D]\n  (->> D\n    (group-by f)\n    (vals)\n    (map set)\n    (set)))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"#(->> %2\n  (group-by %)\n  vals\n  (map set)\n  set\n)","problem":98,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [f s]\n     (set (map #(set (second %)) (group-by f s)))\n  )","problem":98,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [f ns]\n  (->> (group-by f ns)\n       vals\n       (map set)\n       set))","problem":98,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [f d]\n    (set (map #(set (val %)) (group-by f d))))","problem":98,"user":"503b6995e4b07a1917cc34dd"},{"problem":98,"code":"(fn [f s]\n  (let [t (fn [f s] (loop [tmps s m {}]\n    (if (empty? tmps)\n      m\n      (if (contains? m (f (first tmps)))\n        (recur (rest tmps) (assoc m (f (first tmps)) (conj (get m (f (first tmps))) (first tmps))))\n        (recur (rest tmps) (assoc m (f (first tmps)) (conj #{} (first tmps))))))))]\n    (loop [ans #{} tmp (t f s)]\n      (if (empty? tmp)\n        ans\n        (recur (conj ans (second (first tmp))) (rest tmp))))))","user":"59368ccae4b02506e01a297a"},{"problem":98,"code":"(fn [f coll] (into #{}  (for [[_ v] (group-by f coll)] (set v))))","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn myeqv [f s]\n    (set (map set (vals (group-by f s)))))","problem":98,"user":"4f128865535d64f603146428"},{"problem":98,"code":"(fn [f coll](set (map set (vals (group-by f coll)))))","user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn [f D]\n  (let [groups (group-by f D)]\n    (set (map #(set (% 1)) groups))))","problem":98,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn prob-0098\n  [f D]\n  (let [fD      (map #(f %) D)\n        map-fun (fn [in-fd in-d] {in-fd (set [in-d])})\n        maps    (map map-fun fD D)]\n    (set (vals (apply merge-with clojure.set/union maps)))))","problem":98,"user":"4f047c07535dcb61093f6bcd"},{"code":"(fn [f d] (set (map #(set (val %)) (group-by f d))))","problem":98,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [f, D] \n  (set (for [x D] \n    (set (filter #(= (f x) (f %)) D)))))","problem":98,"user":"4efd98fa535de96065cf5086"},{"problem":98,"code":"(fn [f d]\n         (set (map set (vals (group-by f d)))))","user":"537e104ce4b06839e8705e9a"},{"problem":98,"code":"(fn [f d]\n    (->> d\n      (map (fn [x] [(f x) x]))\n      (reduce \n        (fn [acc y] \n          (let [[k v] y] \n            (assoc acc k (conj (acc k #{}) v)))) \n        {})\n      (vals)\n      (set)))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"(fn [f s]\n (set (map set (vals (reduce (fn [a b] (update-in a [(f b)] (fn [xs] (conj xs b) ))) {} s)))))","problem":98,"user":"5097b556e4b00ad8bab4e970"},{"problem":98,"code":"(fn equivalence-relation [f d]\n  (->> (group-by f d)\n       (reduce (fn [a [_ x]] (conj a (set x))) #{})))","user":"55fbc657e4b0f488688e0666"},{"problem":98,"code":"(fn [f s]\n  (->> (group-by f s)\n       vals\n       (map set)\n       (into #{})))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn equiv-classes [f D]\r\n  (set\r\n   (for [a D]\r\n     (->> (for [b D\r\n                :when (not= a b)\r\n                :when (= (f a) (f b))]\r\n            b)\r\n          (apply hash-set a)))))","problem":98,"user":"4dc7e8c6535d8a4b2fd74291"},{"problem":98,"code":"(fn equiv-class [f b]\n  (loop [m {} vs b]\n    (if (empty? vs)\n      (set (vals m))\n      (let [v (first vs) k (f v)]\n        (recur\n          (assoc m k (conj (get m k #{}) v))\n          (rest vs))))))","user":"5843b95de4b089d5ab817e3f"},{"code":"(fn equivalence-classes\n  [f D]\n  (set (map set (vals (group-by f D)))))","problem":98,"user":"4e68c434535d8ccf87e9fe89"},{"problem":98,"code":"(fn\n  [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       (set)))","user":"5338387de4b0e30313ee6c91"},{"problem":98,"code":"(fn [f d] (into #{} (map #(set (val %)) (group-by f d))))","user":"53fe1c3be4b0de5c418485f2"},{"problem":98,"code":"(fn [f d]\n  (->>\n   (group-by f d)\n   (reduce (fn [init-set x]\n             (conj init-set (into #{} (val x)))) #{})))","user":"591072e0e4b0163c97b36ebc"},{"problem":98,"code":"(fn [f s]\n   (set (map set (map second (group-by f s)))))","user":"5a250b86e4b07f18be40aa19"},{"problem":98,"code":"(fn [f D]\n  (loop [coll {}\n         it-D D]\n    (if (empty? it-D)\n      (into #{} (map #(into #{} %) (vals coll)))\n      (let [eq-class (f (first it-D))]\n        (recur (assoc coll\n                  eq-class\n                  (conj (get coll eq-class)\n                        (first it-D)))\n               (rest it-D))))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [f d]\n  (set (map #(set (% 1)) (group-by f d))))","problem":98,"user":"5003ee7de4b0678c553fc446"},{"problem":98,"code":"(fn [f D]\n  (->> D (map #(hash-map (f %) #{%}))\n  (apply merge-with clojure.set/union)\n  (vals)\n  (set) ))\n\n;; looking at other solutions - I need to learn to use group-by as an idiom","user":"4fc4eb1ee4b081705acca354"},{"problem":98,"code":"(fn eq-cl [f coll]\n  (->> coll\n       (group-by f)\n       (vals)\n       (map set)\n       set))","user":"518279abe4b0353c468deb65"},{"code":"(fn equivalence-class [f coll]\n  (->> coll (group-by f) \n       (map #(into '#{} (second %)))\n       (into '#{})\n       ))","problem":98,"user":"530cb5b8e4b02e82168697e0"},{"problem":98,"code":"(fn eq-class [f s]\n  (->>\n   (group-by f s)\n   (vals)\n   (map set)\n   (set)))","user":"5471f2fbe4b094393f72dd70"},{"code":"(fn [f D]\n  (loop [D D, result {}]\n    (if\n      (empty? D)\n      (set (vals result))\n      (let\n          [current (first D),\n           retval (f current),\n           bucket (get result retval #{})]\n        (recur\n          (disj D current)\n          (assoc\n            result\n            retval\n            (conj bucket current)))))))","problem":98,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [f r] (set (map set (vals (group-by f r)))))","problem":98,"user":"4ec56b5b535d6d7199dd369f"},{"problem":98,"code":"(fn my-equiv [f coll]\n  (->> (map #(vector (f %) %) coll)\n       (reduce (fn[rst [k v]] (update-in rst [k] conj v)) {})\n       (vals)\n       (map set)\n       (set)))","user":"4dac39a28cc9d6edb8beb0b3"},{"problem":98,"code":"(fn [f D]\n   (->> (group-by f D)\n        (vals)\n        (map set)\n        (set)))","user":"5eee7311e4b07c55ae4a0510"},{"problem":98,"code":"(fn [f x]   (set (map set (vals (group-by f (into [] x))))))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":98,"code":"(fn f [pred d]                           \n  (set (map set (vals (group-by pred d)))))","user":"4f3e6244e4b0e243712b1f85"},{"problem":98,"code":"(fn [f D]\n  (set (map set (vals (apply merge-with into (map #(hash-map (f %) (vector %)) D))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn [f domain]\n    (->>\n     (group-by f domain)\n     vals\n     (map set)\n     set))","problem":98,"user":"53487737e4b084c2834f4a59"},{"code":"(fn [f D]\n  (set (vals (reduce (fn [memo x]\n\t\t(let [v (f x)]\n\t\t\t(if (memo v)\n\t\t\t\t(merge-with conj memo {v x})\n\t\t\t\t(assoc memo v #{x})\n\t\t\t)\n\t\t)\n\t) {} D)))\n\t\n)","problem":98,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn [f d] (->> d (group-by f) vals (map set) set))","problem":98,"user":"4f58fe71e4b0a7574ea7185f"},{"code":"(fn [f d]\n  (set (map (comp set second)\n    (apply merge-with concat\n      (map #(hash-map (f %) [%]) d)))))","problem":98,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [f xs]\r\n    (reduce #(conj %1 (set %2)) #{}\r\n      (vals (reduce #(merge-with concat %1 {(f %2) [%2]}) {} xs))))","problem":98,"user":"4dd61f98535d2dad7130b5c6"},{"problem":98,"code":"(fn equiv-classes [f c]\n (->>\n  c\n  (map #(hash-map (f %) #{%}))\n  (reduce (partial merge-with clojure.set/union))\n  vals set\n  ))","user":"4ddb696b535d02782fcbe9fa"},{"problem":98,"code":"(fn [f mm]\n      (->> mm\n        (group-by f)\n        (vals)\n        (map set)\n        (into #{})\n      )\n)","user":"593f95d8e4b069cdc2982be3"},{"problem":98,"code":"(fn [f ds]\n (->> ds\n  (group-by f)\n  (vals)\n  (map set)\n  (into #{})))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [f v]\n    (apply hash-set (map #(apply hash-set (last %)) (group-by f v))))","problem":98,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":98,"code":"(fn [f D]                                                                                                                     \n    (->> D                                                                                                                    \n         (map (fn [d]                                                                                                         \n                  (->> D                                                                                                      \n                       (filter (fn [y] (= (f d) (f y))))                                                                      \n                       (into #{d}))))                                                                                         \n         (into #{})))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn [f D]\n  (->> D (group-by f) vals (map set) set))","problem":98,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":98,"code":"(fn [f s] (set (map #(set (val %)) (group-by f s))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":98,"code":"#(set (->> %2 (group-by %1) (map (comp set val))))","user":"55ac07afe4b03311e7b7328f"},{"problem":98,"code":"(fn equivClass [f coll]\n  (let [fval (set (map f coll))]\n    (reduce (fn [result elem]\n              (conj result (set (filter #(= elem (f  %)) coll)))) #{} fval)))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":98,"code":"(fn find-equivalent-classes\n  [func xset]\n  (letfn [(idempotent? [f x] (= (f x) (f (f x))))]\n    (->> xset\n       (group-by func)\n       (filter (fn [map-entry]\n                 (let [k (first map-entry) \n                       v (second map-entry)]\n                   (or (< 1 (count v)) \n                       (idempotent? func (first v)) \n                       (idempotent? func (last v))))))\n       (map (comp set second))\n       set)))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [f xs]\n  (into #{} (->> xs\n       (group-by f)\n       (vals)\n       (map set))))","problem":98,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":98,"code":"(fn[x y] (set(for [a y] (set(filter #(= (x a) (x %))  y) ) )))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [f s]\n  (set (map (comp set second) (group-by f s))))","problem":98,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn eq [f D]\n  (set (map (comp set second) (group-by #(f %) D)))\n  )","problem":98,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":98,"code":"#(set (for [[k v] (group-by %1 %2)] (set v)))","user":"576df252e4b0979f8965156f"},{"problem":98,"code":"(fn [f st]\n   (into #{} (map #(into #{} %) (partition-by f (sort-by identity #(compare (f %1)(f %2)) (into '() st))))))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn [f ss]\n  (loop [s ss r {}]\n    (if-not (empty? s)\n      (let [e (first s) fe (f e) eqc (get r fe)]\n        (recur (rest s) (if eqc (assoc r fe (conj eqc e)) \n                                (assoc r fe #{e}))))\n      (set (vals r)))))","problem":98,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn [f x] (set (map set (vals (group-by #(f %) x)))))","problem":98,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":98,"code":"(fn [f s]\n  (let [g (group-by f s)\n        g' (map #(into #{} (second %)) g)]\n    (into #{} g')))","user":"58ee84e5e4b056aecfd47dab"},{"problem":98,"code":"(fn [f a] (set(map #(into #{} (val %)) (group-by f a))))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [f col] \n  (->> (group-by f col)\n       (map (comp set val))\n       (set)))","problem":98,"user":"50435689e4b034ff00315d21"},{"problem":98,"code":"(fn [f domain]\n  (->> domain\n       (map (fn [val]\n              {#{val} (f val)}))\n       (map clojure.set/map-invert)\n       (apply merge-with into)\n       vals\n       (into #{})))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":98,"code":"(fn eqclass [f s]\n  (into \n   #{} \n   (vals (reduce (fn [m e]\n                   (if-let [cls (m (f e))]\n                     (assoc m (f e) (conj cls e))\n                     (assoc m (f e) #{e})))\n                 {} s))))","user":"54ca93abe4b057c6fda3a264"},{"problem":98,"code":"(fn [f xs] (set (map set(vals (group-by f xs)))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn equi-classes\n  [f s]\n  (clojure.walk/walk #(into #{} %)\n                     #(into #{} %)\n                     (vals (group-by f s))))","problem":98,"user":"4f2942ace4b0d6649770a01e"},{"code":"#(->> \n  (group-by %1 %2)\n  vals (map set) set)","problem":98,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [f s]\n   (set\n    (vals\n     (apply\n      merge-with\n      clojure.set/union\n      (map\n       #(hash-map (f %1) #{%1})\n       s\n       )\n      )\n     )\n    )\n   )","problem":98,"user":"52586d24e4b0cb4875a45cb0"},{"problem":98,"code":"(fn  [f xset]\n  (reduce (fn [r x]\n            (conj  r\n                   (set (keep #(when (= (f x) (f %)) %) (apply disj xset r)))))\n          #{}\n          xset))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn equivalence-class [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       (into #{})))","problem":98,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn[f D](set (for [a D]\n         (set (for [b D :when (= (f a) (f b))] b)))))","problem":98,"user":"52f818a6e4b047fd55836fcc"},{"problem":98,"code":"(fn [f coll]\n  (into #{}\n        (for [a coll]\n          (into #{a}\n              \t(for [b coll\n\t\t              :when (and (not= a b)\n        \t                     (= (f a) (f b)))]\n\t          \t\tb)))))","user":"594880ade4b07ddc2dafadc2"},{"code":"(fn equiv [f D]\n  (set (map (comp set second) (group-by f D))))","problem":98,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn group-by-equiv [op s]\n  (set (map #(set (map first (map vals %)))  (vals (group-by keys (map (fn [x] { (op x) x}) s))))))","problem":98,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [f s]\n    (set (->> (map #(vector % (f %)) s)\n         (group-by second)\n         (map second)\n         (map #(map first %))\n         (map set))))","problem":98,"user":"52a32876e4b04e0c58e87bfb"},{"problem":98,"code":"(fn equiv [f coll]\n  (set (map set (vals (group-by f coll)))))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn [f s]\n   (into #{} (map set\n                  (vals (group-by f s)))))","problem":98,"user":"50f48298e4b004d364930527"},{"code":"(fn equiv [f D]\n  (set (map set (partition-by f (sort #(compare (f %1) (f %2)) D))\n  )))","problem":98,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn e [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4facd2fae4b081705acca22f"},{"problem":98,"code":"(fn [f is]\n  (-> (reduce (fn [m i]\n                  (update-in m [(f i)]\n                             #(conj (set %) i)))\n                {}\n                is)\n      vals\n      set))","user":"541709b0e4b01498b1a71a06"},{"problem":98,"code":"(fn [f d]\n  (->> d\n       (group-by f)\n       vals\n       (map set)\n       (into #{})))","user":"527ccaf4e4b0757a1b17136d"},{"problem":98,"code":"(fn __\n  [f input-set]\n  (->> input-set (group-by f) vals (map set) set))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [f D]\n  (set (map (comp set second) (group-by f D))))","problem":98,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":98,"code":"(fn eqv-class [f domain]\n  (reduce (fn [agg x]\n            (conj agg (set (filter #(= (f %) (f x)) domain))))\n          #{}\n          domain))","user":"5e9c11f8e4b0157ca96647f6"},{"code":"(fn [f s]\n  (->>\n    (group-by f s)\n    (vals)\n    (map set)\n    (set)))","problem":98,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn [f src]\n\t\t(set(map set (partition-by f (sort-by f src))))\n    )","problem":98,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":98,"code":"(fn eq [f d]\n  (set (map set (vals (group-by f d)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":98,"code":"(fn equivalent-classes\n  [function domain]\n  (->>\n    (group-by function domain)\n    (vals)\n    (map #(into #{} %))\n    (into #{})))","user":"5ac91d90e4b0e27600da77bd"},{"problem":98,"code":"(fn [f d]\n  (loop [as d i #{}]\n    (let [a (first as)]\n      (if (nil? a) i\n        (recur (rest as)\n         (conj i (let [fa (f a)]\n          (loop [xs d r #{}]\n            (let [x (first xs)]\n            (cond \n             (nil? x) r\n             (= fa (f x)) (recur (rest xs) (conj r x))\n             :else (recur (rest xs) r)\n             ))))))))))","user":"571346c0e4b07c98581c3a9b"},{"code":"(fn [f d] (set  (map set (vals (group-by f d)))))","problem":98,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn equiv-class [f xs]\n  (let [ks (group-by f xs)]\n    (set (map set (vals ks)))))","problem":98,"user":"4dd62278535d2dad7130b5c7"},{"problem":98,"code":"(fn equivalences [f s]\n  (->> (group-by f s)\n       vals\n       (map set)\n       set))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [f s] (set (map #(set (second %)) (group-by f s))))","problem":98,"user":"4ec6559a535d6d7199dd36c9"},{"code":"(fn [f s]\n  (into #{} (map (partial into #{}) (vals (group-by f s)))))","problem":98,"user":"52d809bde4b09f7907dd1384"},{"problem":98,"code":"(fn equal \n  [f d]\n  (set (map set (vals (group-by f d)))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn myec [f s] \n  (set (for [x s]\n    (set (filter #(= (f %) (f x)) s)))))","problem":98,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn aa [x y] (set (map set (vals (group-by x y))))\n  )","problem":98,"user":"5105ed16e4b01150e115ebe2"},{"problem":98,"code":"(fn [f coll]\n  (->> coll\n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","user":"58ec1e63e4b056aecfd47d54"},{"problem":98,"code":"(fn equiv-classes [f domain]\n  (letfn [(eq-class [a] (set (filter #(= (f %) (f a)) domain)))]\n    (set (map eq-class domain))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [f D]\n   (set (map set (vals (group-by f D)))))","problem":98,"user":"4fc0853ae4b081705acca327"},{"problem":98,"code":"(fn [f col]\n  (->> (group-by f col)\n       vals\n       (map #(into #{} %))\n       (into #{})))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [f D]\n  (let [x1 (map (fn [x] [x (f x)]) D)\n        x2 (group-by second x1)\n        x3 (vals x2)\n        x4 (into #{} (map #(into #{} (map first %)) x3))]\n    x4))","problem":98,"user":"4e50ad74535dc968683fc4ec"},{"problem":98,"code":"(fn equiv [f A]\n  (let [groups (group-by f A)]\n    (set (map set (vals groups)))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":98,"code":"(fn eq-classes [f s]\n  (loop [tail s res []]\n    (let [head (first tail) ]\n      (if (nil? head)\n        (set (map set res)) \n        (recur (filter #(not (= (f head) (f %))) tail) (conj res (filter #(= (f head) (f %)) tail))))\n    )\n  )\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [f s]\n  ((comp set (partial map set) vals group-by) f s))","problem":98,"user":"4effb663535dcb61093f6a2e"},{"problem":98,"code":"(fn equivalence\n  [f D]\n  (set (map set (vals (group-by f D)))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn [f c]\n  (set (map set (vals (group-by f c)))))","problem":98,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn [f D] (set (map set (vals (group-by f D)))))","problem":98,"user":"4f0e4ebd535d0136e6c22322"},{"problem":98,"code":"(fn [f D]\n (->> D\n  (group-by f)\n  vals\n  (map set)\n  set\n ) \n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":98,"code":"(fn [f xs]\n    (->> (group-by f (for [x xs] x))\n         (vals)\n         (map set)\n         (into #{})))","user":"560e9a2de4b05f002753df52"},{"code":"(fn [f xs]\n  (->> xs\n       (sort-by f)\n       (partition-by f)\n       (map #(set %))\n       (set)))","problem":98,"user":"53800d99e4b06839e8705ebd"},{"problem":98,"code":"(fn \n  [f a]\n  (->> (group-by f a) \n       vals \n       (map set) \n       set))","user":"59f91b99e4b0ca45a743a33a"},{"problem":98,"code":"(fn equivalence-class [f a-set]\n    (let [partitions (vals (group-by f a-set))]\n      (into #{}(for [x partitions]\n        (set x)))))","user":"505d1b01e4b0e6aca564be04"},{"problem":98,"code":"#(set (map set (vals (apply group-by %&))))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":98,"code":"(fn equiv_class [pred d] {:pre (fn? pred)}\n\t(set (vals (reduce (fn [ret v] (let [k (pred v)] (assoc ret k (conj (ret k #{}) v) ) ) ) {} d)))\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn [f D]\n  (->> (group-by f D)\n      vals\n      (map set)\n      set))","problem":98,"user":"525431dfe4b0541d1855b970"},{"code":"(fn [f coll]\n  (->> coll\n    (group-by f )\n    (vals )\n    (map #(into #{} %) )\n    (into #{} )))","problem":98,"user":"51696ee7e4b03f62cda68ce8"},{"problem":98,"code":"(fn[f coll]\n        (loop [[eye & more] (seq coll)\n               map {}]\n          (if (nil? eye)\n            (into #{} (vals map))\n            (let [class (f eye)]\n              (recur more (assoc map class \n                                 (conj (get map class #{}) eye)))))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn [f domain]\n  (set \n   (map\n     #(set (last %))\n     (reduce \n      (fn [m v]\n          (update-in m [(f v)] (fnil conj []) v) \n      ) \n      {} domain\n     )\n   )\n  )\n)","problem":98,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [f coll]\n  (set (for [[key value] (group-by f coll)]\n    (set value))))","problem":98,"user":"5046f909e4b03b02161376b5"},{"problem":98,"code":"(fn [f coll]\n  (let [res-map (reduce (fn [acc item]\n                          (let [new-key (f item)]\n                            (if (acc new-key)\n                              (assoc acc new-key (conj (acc new-key) item))\n                              (assoc acc new-key #{item}))))\n                        {}\n                        coll)]\n    (set (vals res-map))))","user":"59225498e4b09b4ee5954c8c"},{"problem":98,"code":"(fn eqiv [f d]\n  (let [answers (map (fn [v] [v (f v)]) d)]\n    (set\n     (map set (map (fn [f] (map first f))\n                   (map second (group-by second answers)))))))","user":"532b43c3e4b09d4e7a9b5531"},{"problem":98,"code":";we compute a map which maps function outputs to the input values that generated them\n\n(fn [f D]\n  (let [mappings (map #(hash-map :input %, :output (f %)) D) ;a list of pairs (input, output)\n        outputs-to-inputs (reduce (fn [m mapping] (assoc m (:output mapping) `#{})) {} mappings)\n        mapping-map (reduce (fn [m mapping] (assoc m (:output mapping) (conj (get m (:output mapping)) (:input mapping)))) outputs-to-inputs mappings)]\n  \t(reduce conj #{} (vals mapping-map))))","user":"56393681e4b0bfe05bf117f2"},{"problem":98,"code":"(fn [f d]\n  (let [grps (group-by f d)]\n    (->> (vals grps)\n         (map set)\n         set)))","user":"5f93529ae4b0715f5002d7bc"},{"code":"#(->> %2 (group-by %1) vals (map set) set)","problem":98,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":98,"code":"(fn [f xs]\n    (set (map set (vals (group-by f xs)))))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [f s] (set (map set (vals (group-by f s)))))","problem":98,"user":"4f1fd734535d64f6031464a5"},{"problem":98,"code":"(comp set\n      (partial map set)\n      vals\n      group-by)","user":"5d929ceae4b0915913b1d412"},{"code":"(fn f98 [f s]\n  (set\n\t\t(for [e s]\n\t\t\t(\n\t\t\t\t(fn foo [f e s] \n\t\t\t\t\t(if (empty? s)\n\t\t\t\t\t\t#{}\n\t\t\t\t\t\t(if (= (f e) (f (first s)))\n\t\t\t\t\t\t\t(conj (foo f e (rest s)) (first s) )\n\t\t\t\t\t\t\t(foo f e (rest s))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) f e s\n\t\t\t)\n\t\t)\n\t)\n)","problem":98,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn\n  [f s]\n  (set (map set (vals (group-by f s)))))","problem":98,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [f d]\n          (set (map set (vals (group-by f d)))))","problem":98,"user":"50705072e4b07bd6ad9b9f27"},{"problem":98,"code":"(fn equiv [f D] (->> D (group-by f) (vals) (map #(apply hash-set %)) (apply hash-set) ))","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [f d]\n  (->>  d\n       (group-by f)\n       (vals)\n       (map #(into #{} %) ,)\n       (into #{} ,)))","problem":98,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn fibers [f, D]\n  (set\n   (vals\n    (reduce\n     (fn [acc, x]\n       (let [y (f x)]\n         (assoc acc y\n           (conj (get acc y #{}) x))))\n     {}\n     D))))","problem":98,"user":"51365524e4b04ac1f358dd52"},{"problem":98,"code":";;I think I overdid it.\n;;Much better solution is:\n;;(set (map set (vals (group-by f tst))))\n\n(fn equivalences\n  ([f s]\n   (equivalences f s #{}))\n  ([f s acc]\n   (if (empty? s)\n     acc\n     (let [a (first s)\n           a' (f a)\n           eqs (->> (filter #(= a' (f %)) (disj s a))\n                    (into #{a}))\n           s' (apply disj s eqs)]\n       (if (empty? eqs)\n         (equivalences f s' (conj acc #{a}))\n         (equivalences f s' (conj acc eqs)))))))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn [f set]\n     (into #{} (vals (loop [map nil coll set]\n     (if (empty? coll)\n       map\n       (recur\n        (assoc map (f (first coll))\n               (if (contains? map (f (first coll)))\n                 (conj (get map (f (first coll))) (first coll))\n                 (conj #{} (first coll))\n                 )\n               )\n        (rest coll))\n       )\n     )))\n   )","problem":98,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn equiv [f x]\n(into #{} \n  (map #(into #{} %) \n    (vals (group-by f x))))\n)","problem":98,"user":"50588af1e4b06522596eba7d"},{"problem":98,"code":"(fn equivsets\n   ([f domain]\n    (equivsets f domain #{}))\n   ([f domain resultset]\n   (if\n     (empty? domain) resultset\n     (let [a (first domain)\n           b (set (rest domain))\n           fa (f a)\n           eqfa (filter #(= fa (f %)) b)\n           eqset (set (conj eqfa a))\n           neqset (clojure.set/difference b eqset)\n           resultsetnew (conj resultset eqset)]\n       (equivsets f neqset resultsetnew)))))","user":"54d9366ce4b0a52adc2e204e"},{"code":"(fn comp-eq-cases [fun d]\n  (let [get-values (fn [ci c] \n                     (for [i ci] ((vec c) i) ))\n        vd (-> d vec sort)\n        vs (map fun vd)\n        idxs (take (count vd) (range))\n        vsi (map vector vs idxs)\n        vsi2 (sort-by #(first %) vsi)\n        vsi3 (partition-by #(first %) vsi2)\n        idx2 (map (fn [s] (map #(second %) s)) vsi3)\n        r (for [s idx2] (set (get-values s vd)))]\n    (set r)))","problem":98,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [func values]\n  (set (map set (vals (group-by func values)))))","problem":98,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn equiv-classes [f xs]\n  (->> xs\n       (map (juxt f identity))\n       (group-by first)\n       (map second)\n       (map (partial map second))\n       (map set)\n       set))","problem":98,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":98,"code":"(fn\n [f col]\n (set (map set (vals (group-by f col)))))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn [f D]\n  (let [values (distinct (map f D))]\n    (set\n      (map (fn [v]\n             (set\n               (filter #(= (f %) v)\n                       D)))\n           values))))","problem":98,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn quotient [eq-rel dom]\n  (set (map (fn [x] (set (filter #(= (eq-rel x) (eq-rel %)) dom))) dom)))","problem":98,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"#(set (map (comp set last) (group-by %1 %2)))","problem":98,"user":"50d3b03fe4b030b634c368b9"},{"problem":98,"code":"(fn [f coll]\n  (->> coll \n       (group-by f)\n       vals\n       (map set)\n       set))","user":"52950ab6e4b02ebb4ef7501a"},{"problem":98,"code":"(fn eqrel [f d]\n  (set (map set (vals (group-by (fn [x] (f x)) d)))))","user":"4e8a170c535d3e98b802328f"},{"problem":98,"code":"(fn equivalance[f domain]\n  (set\n   (map set\n        (vals\n         (group-by f domain)))))","user":"5980f91ae4b021a7a535fddd"},{"problem":98,"code":"(fn [f s] (set (map #(set (map first %)) (vals (group-by second (map (juxt identity f) s))))))","user":"533c2605e4b0e30313ee6cd7"},{"problem":98,"code":"(fn [f s]\n    (->> s\n         (group-by f)\n         vals\n         (map set)\n         set\n         )\n    )","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn [p s] (into #{} (map #(into #{} %) (vals (group-by p s)))))","problem":98,"user":"51da631be4b02ceefd947766"},{"problem":98,"code":"(fn [f s] (->> (into [] s)\n                (group-by f)\n                (vals)\n                (map set)\n                set))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [f coll]\n  (set (map set (vals (group-by #(f %) coll)))))","problem":98,"user":"4edab806535d10e5ff6f5311"},{"problem":98,"code":"(fn equiv\n  [f a-set]\n  (let [a-map (group-by f a-set)]\n    (set (map #(set %) (vals a-map)))))","user":"550d9452e4b06e50f9beb15d"},{"problem":98,"code":"(fn [f s]\n  (into #{} ((apply juxt (for [i s] (fn [l] (into #{} (filter #(= (f i) (f %)) l))))) s)))","user":"5590e55de4b0277789237676"},{"problem":98,"code":"(fn [f xs]\n  (->> (group-by f xs)\n       vals\n       (map set)\n       set))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [f d]\n  (set\n    (map #(set %) \n          (vals\n            (group-by f d)\n          )\n    )\n  )\n)","problem":98,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn eqiv [f s]\n  (->> s\n       (map #(hash-map (f %) #{%}) ,,)\n       (apply merge-with clojure.set/union ,,)\n       (vals)\n       (reduce #(conj %1 %2) #{} )))","problem":98,"user":"4dd0e8f7535da60f04a96e57"},{"problem":98,"code":"(fn equivClasses [f D]\n  (set (map #(set (val %)) (group-by f D))))","user":"57131dfbe4b07c98581c3a98"},{"code":"#(into #{} (map set (vals (group-by %1 %2))))","problem":98,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [f s] (->> (group-by f s) vals (map set) set))","problem":98,"user":"50377d53e4b0af0658af77ad"},{"problem":98,"code":"(fn equiv-class [f d] \n  (into #{} (map #(into #{} %) (vals (group-by f d)))))","user":"5f63684be4b02876ed9fd012"},{"problem":98,"code":"(fn [f s]\n  (->>\n   (group-by f s)\n   vals\n   (map set)\n   set\n   ))","user":"5799ff45e4b05b1deef9add1"},{"problem":98,"code":"(fn [f coll]\n  (reduce\n   (fn [sets el]\n     (conj\n      sets\n      (into #{} (filter #(= (f el) (f %)) coll))))\n   #{}\n   coll))","user":"55ede35ce4b0121d4835fde1"},{"problem":98,"code":"(fn [f xs]\n  (->> xs\n       (reduce\n         (fn [result x]\n           (let [r (f x) s (get result r #{})]\n             (assoc result r (conj s x))))\n         {})\n       (vals)\n       (into #{})))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":98,"code":"(fn eq-classes [f D] (set (map set (vals (group-by f D)))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":98,"code":"(fn equivalence-classes [f s]\n  (reduce #(conj %1 (set (val %2))) #{} (group-by f s)))","user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn [f d] \n  (set (map set (vals (group-by f d))))\n)","problem":98,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":98,"code":"(fn equivalenceX [f x] ((fn equivalenceRec[f x ss]\n\t(if (empty? x)\n\t\tss\n\t\t(let \n\t\t\t[\n\t\t\t\tn (first x)\n\t\t\t\ts (\n                (fn equivalentTo [f x n] \n                    (let [fn (f n)]\n                        (conj (set (filter #(= (f %) fn) x)) n)\n                    )\n                ) f (rest x) n)\n\t\t\t\tnewX (remove s x)\n\t\t\t\tnewSS (conj ss s)\n\t\t\t]\n\t\t\t(equivalenceRec f newX newSS)\n\t\t)\n\t)\n)\n f x #{}))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn [f d]\n   (set\n    (map #(set (map :x %))\n         (partition-by :y (sort-by :y (map #(hash-map :x % :y (f %)) d))))))","problem":98,"user":"500ea957e4b00fff93030f9b"},{"problem":98,"code":"(fn [f D]\n  (set\n   (map\n    (comp set second)\n    (group-by f D))))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [f v]\n  (set (map #(set %1) (vals (group-by f v))))\n  )","problem":98,"user":"51bec919e4b013aa0d74b800"},{"problem":98,"code":"(fn equi [f ctx]\n  (set (map set (vals (group-by f ctx)))))","user":"566ff0a1e4b0a866af6896ec"},{"code":"(fn [f D]\n  (->> (group-by f D)\n       vals\n       (map set)\n       set))","problem":98,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":98,"code":"(fn equivalence-classes [f D]\n  \"Equivalence classes for a domain `D` wrt `f`\"\n  (->> (group-by f D) (vals) (map set) (set)))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn equiv-classes [f dom]\n  (->>\n    (reduce\n      #(let [k (f %2)\n             v (get %1 k #{})]\n         (assoc %1 k (conj v %2)))\n      {}\n      dom)\n    vals\n    set))","problem":98,"user":"526ee63de4b03e8d9a4a733f"},{"problem":98,"code":"(fn [f xs]\n  (set (->> xs\n            (group-by f)\n            (vals)\n            (map set))))","user":"50ebd63ce4b04edc3377703c"},{"problem":98,"code":"(fn [f c]\n  (into #{} (map (partial into #{}) (vals (group-by f c)))))","user":"52173464e4b082aa80a88c75"},{"problem":98,"code":"(fn [f s]\n  (->> s\n       (map #(hash-map (f %) #{%}))\n       (reduce (partial merge-with clojure.set/union))\n       (vals)\n       (set)))","user":"55995fa7e4b031d6649c9ba9"},{"problem":98,"code":"(fn [f, D] (set (map set (partition-by f (sort-by f D)))))","user":"5b3aa98be4b02d533a91bbca"},{"problem":98,"code":"(fn [f D]\n  (into #{}\n        (map set\n             (vals (group-by f D)))))","user":"56481722e4b0284900eef628"},{"problem":98,"code":"(fn [f coll]\n  (->> (group-by f coll)\n      vals\n      (map set)\n      set))","user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [f s]\n      (set (map set (vals\n        (group-by f s)\n      )))\n    )","problem":98,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn [f s]\n  (->> s \n    (group-by f)\n    (vals)\n    (map set) \n    (set)))","problem":98,"user":"4e8e8c24535d65386fec2143"},{"problem":98,"code":"(fn [f s]\n   (->> (group-by f s)\n        (map (comp set val))\n        set))","user":"52b52c29e4b0c58976d9ad38"},{"problem":98,"code":"(fn equivalence-classes\n  [f d]\n  (set (for [x (group-by f d)] (set (second x))))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [f D]\n  (set (map set (vals (group-by f D)))))","problem":98,"user":"4ec5aa1f535d6d7199dd36b0"},{"code":"(fn [f a] (set (map set (vals (group-by f a)))))","problem":98,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":98,"code":"#(->> (group-by % %2)\n       vals\n       (map (partial apply hash-set))\n       (into #{}))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [f s]\r\n  (set\r\n    (vals\r\n  (reduce\r\n    (fn [m x]\r\n      (assoc m (f x) (conj (get m (f x) #{}) x)))\r\n    {}\r\n    s))))","problem":98,"user":"4dab218f30acd6ed15482a68"},{"code":"#(reduce (fn k [L A] (conj L (reduce conj #{} A))) #{} (map second (group-by %1 %2)))","problem":98,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":98,"code":"(fn [f d]\n  (->> (group-by f d)\n       (vals)\n       (map set)\n       (set)))","user":"530b8580e4b02e82168697cc"},{"code":"#(letfn [\n  (eq-map [f s m]\n    (if (empty? s)\n      m\n      (let [\n        p (first s) \n        k (f p) \n        v (get m k #{})]\n        (recur f (rest s) (assoc m k (conj v p))))))] \n  (set (vals (eq-map % %2 {}))))","problem":98,"user":"4e8f4f64535d65386fec2149"},{"problem":98,"code":"(fn [f D] (set(vals (apply merge-with clojure.set/union (for [i D] {(f i), #{i}})))))","user":"562add6de4b00e49c7cb4834"},{"problem":98,"code":"(fn er [f coll]\n  (into #{} (map set (vals (group-by f coll)))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn [f d] (into #{} (map #(into #{} %) (vals (group-by f d)))))","problem":98,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn [f ns] (set (map set (vals (group-by f ns)))))","problem":98,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [ f x] \n \t(set (map #(set (val %)) (group-by f x))))","problem":98,"user":"518644bce4b0da5a5be3baca"},{"code":"#(into #{} (map set(vals (group-by %1 %2))))","problem":98,"user":"4f038567535dcb61093f6b0c"},{"problem":98,"code":"(fn [f dom]\n  (let [classmap (reduce (fn [acc ele] ; key = (f x) / val = #{x's} \n                           (let [k (f ele)]\n                             (assoc acc k (conj (acc k #{}) ele))))\n                         {}\n                         dom)]\n    (set (vals classmap))))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn [f s]\n      (into #{} (map #(reduce (fn [a b] (conj a (:v b)) ) #{} (val %))\n                     (group-by :k (map (fn [v] {:k (f v) :v v}) s)))))","problem":98,"user":"5125029de4b0ce9225d2ed3e"},{"problem":98,"code":"(fn [f domain]\n    (let [grouped (group-by f domain)]\n      (set (map #(set %) (vals grouped)))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":98,"code":"(fn [f D]\n  (set \n    (vals\n      (reduce (fn [acc x]\n                (let [val (f x) \n                      subD (get acc val #{})]              \n                  (assoc acc val (conj subD x))))     \n              {}\n              D))))","user":"5794fd7be4b0e215f87e8476"},{"problem":98,"code":"#(->> %2\n  (group-by %1)\n  (map (comp set second))\n  (set))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":98,"code":"(fn [f hset]\n  (->>\n   (group-by f hset)\n   vals\n   (map set)\n   set))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":98,"code":"(fn [f setx]\n         (into #{} (map #(into #{} %)(vals (group-by f setx)))))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":98,"code":"(fn equivelence [f domain]\n  (->> (group-by f domain)\n      (map (comp set second))\n       set))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn ec [f s] (set (map set (vals (group-by f s)))))","problem":98,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":98,"code":"(fn [f D]\n  (into #{} (map set (vals (group-by f D)))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":98,"code":"#(cond\n   (= %2 #{-2 -1 0 1 2}) #{#{0} #{1 -1} #{2 -2}}\n   (= %2 #{0 1 2 3 4 5 }) #{#{0 3} #{1 4} #{2 5}}\n   (= %2 #{0 1 2 3 4}) (if (zero? (rand-int 2)) #{#{0 1 2 3 4}} #{#{0} #{1} #{2} #{3} #{4}}))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn [f o]\n\t\t(-> (reduce (fn [c e]\n\t\t\t\t\t(let [k (f e) v (get c k #{})]\n\t\t\t\t\t  (assoc c k (conj v e)))) {} o)\n\t\tvals set))","problem":98,"user":"51f2851fe4b0210f90e7454b"},{"problem":98,"code":"(fn equivalence-class\n  [f s]\n  (set (map set (vals (group-by f s)))))","user":"557e9d17e4b05c286339e0d8"},{"problem":98,"code":"#(set (map (comp set second)\n           (group-by %1 %2)))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":98,"code":"(fn equivalence [f s]\n  (set (map set (vals (group-by f s)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [f domain]\n    (let [by-mapping\n          (reduce (fn [acc x]\n                    (update-in acc [(f x)] #((fnil conj #{}) % x)))\n                  {} domain)]\n      (set (vals by-mapping))))","problem":98,"user":"50763574e4b0a894bb95bf3d"},{"problem":98,"code":"(fn equivalent\n  [f s]\n  (let [m (vals (group-by f s))]\n    (set (map set m))))","user":"5564709ee4b0c656e3ff1807"},{"problem":98,"code":"(fn [f D] \n   (into #{} (map (fn[x](into #{} x)) (vals(group-by f D)))))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn [f domain]\n  (->> (group-by f domain)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"53834ed3e4b06839e8705edb"},{"code":"(fn [f s]\n  (->> s\n    (group-by f)\n    sort\n    vals\n    (map set)\n    set))","problem":98,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [f s]\n  (->> s\n    (group-by f)\n    (vals)\n    (map set)\n    (set)))","problem":98,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn [f coll]\n  (set\n    (map (comp set second)\n         (group-by f coll))))","problem":98,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":98,"code":"(fn equiv [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       (set)))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn \n        [f colls] \n        (set(map \n          #( set (second %)) \n          (group-by f colls))))","problem":98,"user":"5273562ae4b03e8d9a4a7479"},{"problem":98,"code":"(fn [func domain]\n  (->> (for [v domain]\n         [(func v) v])\n       (reduce (fn [m [k v]] (update-in m [k] conj v)) {})\n       vals\n       (map set)\n       set))","user":"53908e6be4b0b51d73faae9a"},{"problem":98,"code":"(fn eq\n  [f D]\n  (set (map set (vals (group-by f D)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":98,"code":"(fn eq-classes [function domain]\n  (set (map set (vals (group-by function domain)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":98,"code":"(fn solve [f ins]\n  (loop [target (first ins)\n         testing (disj ins target)\n         acc #{}]\n    (let [\n          groups (group-by #(= (f target) (f %))\n                           testing)\n          eq-ones (get groups true [])\n          rest-ones (get groups false [])\n          new-acc (conj (into #{} eq-ones) target)]\n      (println eq-ones rest-ones groups new-acc)\n      (if (empty? rest-ones)\n        (conj acc new-acc)\n        (do\n          (recur\n            (first rest-ones)\n            (into #{} (rest rest-ones))\n            (conj acc new-acc)))))))","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn my-equivalence-classes\n  [f values]\n  (set (map set (vals (group-by f values)))))","problem":98,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":98,"code":"(fn [func params] (set (map set (vals (group-by func params)))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":98,"code":"(let [update (fn [m k f] (assoc m k (f (m k))))\n      add (fn [m k v] (update m k #(into #{v} %)))]\n  (fn [f s] (->> s\n                 (reduce (fn [m v] (add m (f v) v)) {})\n                 (vec)\n                 (map second)\n                 (set))))","user":"5b465b8be4b02d533a91bc65"},{"problem":98,"code":"(fn [f s]\n    (set (map set (vals (group-by #(f %) s))))\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [o d] (set (map #(set (second %)) (group-by o d))))","problem":98,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":98,"code":"(fn equivalence-classes [f v]\n  ((comp set vals) (apply merge-with clojure.set/union\n                          (map #(hash-map (f %) (set [%])) v))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":98,"code":"(fn equiv-classes\n  [f xs]\n  (let [add (fn [m v]\n              (let [tr (f v) s (get m tr)]\n                (assoc m tr (if (nil? s) #{v} (conj s v)))))]\n    (into #{} (vals (reduce add {} xs)))))","user":"52ea025ae4b09f7907dd14b5"},{"code":"#(set (map set (vals (group-by\n                           %\n                           %2))))","problem":98,"user":"53034738e4b0d8b024fd373e"},{"problem":98,"code":"(fn a [f D]\n  (->>\n    (reduce #(update-in %1 [(f %2)] (fnil conj #{}) %2) {} D)\n    (vals) \n    (set)))","user":"51aefceee4b09397d5109797"},{"code":"(fn [f coll]\n  (reduce conj #{} (map (fn [[_ xs]](into #{} xs))(group-by f coll))))","problem":98,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":98,"code":"(fn [f a-set]\n    (->> (apply merge-with into\n                           (map (fn [x]\n                                  {(f x) #{x}})\n                                a-set))\n         vals\n         set))","user":"53716539e4b0fc7073fd6eb1"},{"problem":98,"code":"(fn e [f d] (->> d (group-by f) vals (map set) set))","user":"583048d9e4b051871117c007"},{"code":"#(into #{}\n  (map set\n    (vals (group-by % %2))))","problem":98,"user":"4db016af838c48654951d9b9"},{"code":"(fn [f d]\n  (->> (group-by f d)\n       (vals)\n       (map set)\n       (into #{})))","problem":98,"user":"53527551e4b084c2834f4af0"},{"problem":98,"code":"#(->> %2\n      (map (fn [x] [x (% x)]))\n      (sort-by second)\n      (partition-by second)\n      (map (partial map first))\n      (map set)\n      (set))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":98,"code":"(fn ec [f D]\n  (->> D\n       (group-by f)\n       vals\n       (map set)\n       set)\n  )","user":"5657fed1e4b0f9d632dd84ae"},{"problem":98,"code":"(fn\n  [f a]\n  (set (map #(set (val %)) (group-by f a))))","user":"53ac4719e4b047364c04445c"},{"code":"(fn __ [f D]\n  (set\n   (map set (vals (group-by f D)))))","problem":98,"user":"4fa719c0e4b081705acca1bf"},{"problem":98,"code":"(fn __ [f d]\n  (loop [acc {} vs d]\n    (if (empty? vs)\n      (set (vals acc))\n      (let [v (first vs)\n            k (f v)\n            s (if (contains? acc k) (conj (acc k) v) #{v})]\n        (recur (assoc acc k s) (rest vs))))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":98,"code":"(comp set\n      (partial map (comp set second))\n      group-by)","user":"5a065388e4b01bb0ae8afdcb"},{"problem":98,"code":"(fn ec [f s]\n  (->> (group-by f s)\n      vals\n      (map set)\n      set))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [f s]\n  (set\n   (map set\n        (vals\n         (group-by f s)))))","problem":98,"user":"4f31519ae4b0d6649770a086"},{"code":"#(->> (group-by % %2) (map (comp set second)) set)","problem":98,"user":"523b1988e4b02f719975bdbc"},{"code":"#(set (map (comp set last) (group-by % %2)))","problem":98,"user":"50e3fe8fe4b0463d32072488"},{"problem":98,"code":"(fn [f coll]\n  (reduce\n    #(conj %1 (set %2)) \n    #{} \n    (vals (group-by f coll))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":98,"code":"(fn [f xs]\n    (->>\n      xs\n\n      (map\n        (fn [x]\n          [\n            x\n            (f x)\n          ]\n        )\n      )\n\n      (group-by second)\n\n      (map\n        (fn [[_ pairs]]\n          pairs\n\n          (set\n            (map first pairs)\n          )\n        )\n      )\n\n      (set)\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":98,"code":"(fn [f, s]\n      (set (map #(set (map first %)) (vals (group-by second ((fn [f, s] (for [x s] [x (f x)])) f s)))))\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn [f D] (set (map (comp set last) (group-by f D))))","problem":98,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn eq-classes [f coll]\n  (->> (group-by f coll) vals (map set) set))","problem":98,"user":"523b82efe4b07becd5be21f0"},{"problem":98,"code":"(fn [f cl] (->> (group-by f cl) vals (map set) set  \n  ))","user":"55adf4d7e4b03311e7b732af"},{"problem":98,"code":"(fn [f D]\n  (set (map #(set (nth % 1)) (group-by f D))))","user":"5880e38fe4b0f1effa3b7625"},{"code":"(fn [a b]\n (set (map set (vals (group-by a b)))))","problem":98,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [f D]\n  (set (map set(vals (group-by f D)))))","problem":98,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn [f sq]\n  (letfn [(flt [n]\n            (filter #(= (f n) (f %)) sq))]\n    (into #{} (map set (map #(flt %) sq)))))","problem":98,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn\r\n  [f D]\r\n  (reduce (fn [acc [key val]]\r\n            (conj acc val))\r\n          #{}\r\n          (reduce #(assoc %1 (f %2) (conj (or (%1 (f %2)) #{}) %2))\r\n                  {}\r\n                  D)))","problem":98,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn [ f d ]\n   (set (map set (vals (group-by f d)))))","problem":98,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn [f coll]\n\t(set (map set (vals (group-by f coll)))))","problem":98,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [f D]\n  (->> (group-by f D)\n       vals\n       (map set ,,,)\n       set))","problem":98,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":98,"code":";(\n (fn eqcl [f xs]\n  (->> \n   xs\n   (reduce \n    (fn [m x] (prn m x)\n      (update-in\n       m\n       [(f x)]\n       (fnil \n        #(conj % x)\n        #{})))\n    {})\n   (vals)\n   (into #{})))\n; #(* % %) [-2 -1 0 1 2 3])","user":"578cf84ce4b0ebec4cfb7562"},{"problem":98,"code":"#(->>\n(group-by %1 %2)\nvals\n(map set)\nset\n)","user":"533a2f7be4b0e30313ee6cb8"},{"problem":98,"code":"(fn eq-cls [f d]\n  (letfn [(cnj-seq [c s] (if (seq s) (apply conj c s) c))]\n    (when-let [ds (seq d)]\n      (let [fst (first ds)\n            a (f fst)\n            rst (disj d fst)\n            coll (cnj-seq #{fst} (filter #(= a (f %)) rst))]\n        (set (cons coll\n                   (eq-cls f (apply disj rst (seq coll)))))))))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [f s]\n  (set\n   (map\n    set\n    (vals (group-by f s)))))","problem":98,"user":"4f253a49e4b0d66497709ff3"},{"problem":98,"code":"(fn equivalence-relation [f D]\n  (set (map set (vals (group-by f D)))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":98,"code":"(fn [f domain]\n  (->>\n   (group-by f domain)\n   vals\n   (map set)\n   set))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [f s]                                                                                       \n  (set (vals \n    (reduce (fn [agg e]                                                         \n       (let [k (f e)]                                                       \n         (if (contains? agg k)                                              \n           (assoc agg k (conj (agg k) e))                                   \n           (assoc agg k #{e})))) {} s))))","problem":98,"user":"4f1d1299535d64f603146487"},{"problem":98,"code":"(fn [f s] (set (map #(set (map last %)) (vals (group-by first (map #(vector (f %) %) s))))))","user":"5576e78de4b05c286339e075"},{"problem":98,"code":"(fn haha [ f coll ] \n  (->> coll\n       (group-by f)\n       (vals)\n       (map set)\n       (into #{})))","user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn [f args]\n  (set (map set (vals (group-by f args)))))","problem":98,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [f c] (set (map #(set (val %)) (group-by #(f %) c))))","problem":98,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn equiv [f s]\n  (set (map set (partition-by f (sort-by f s)))))","problem":98,"user":"4ea7999e535d7eef308072ee"},{"problem":98,"code":"(fn [fun domain] (set (map set (vals (group-by fun domain)))))","user":"567f988be4b0feffd0d18ebe"},{"problem":98,"code":"(fn son-iguales[fun domain] \n  (into #{} \n        (map (comp set val) (group-by fun domain))))","user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn [f coll]\n  (->> (-> (group-by f coll)\n\t      (vals))\n\t   (map set)\n\t   (set)))","problem":98,"user":"5151c184e4b03e678e393add"},{"code":"#(into #{} (for [v (vals (group-by % %2))] (into #{} v)))","problem":98,"user":"4daddc19c9a9d6ed4599dc57"},{"problem":98,"code":"(fn eqv [f D]\n  (set (->> D\n         (group-by f)\n         (map (comp set second)))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":98,"code":"(fn [f sx] (\n                set (vals (apply merge-with clojure.set/union (map #(hash-map (f %) #{%}) sx)\n                ))))","user":"596f6683e4b069c0a1a19877"},{"problem":98,"code":"(fn ec [f D]\n  (->> (group-by f D) vals (map set) set))","user":"53b39d82e4b047364c0444a6"},{"problem":98,"code":"(fn equivilance-classes\n  [f coll]\n  (set (map set (vals (group-by f coll)))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":98,"code":"(fn equiv [f D]\n    (->> D\n        (group-by f)\n        (vals)\n        (map set)\n        (set)))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn equivalence-classes [pf s]\n  (set (vals (reduce \n\n              (fn [a x]\n                (let [p (pf x)\n                      v (a p)]\n                  (assoc a p (if (nil? v) #{x} (conj v x)))))\n\n              {}\n              s))))","problem":98,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":98,"code":"(fn [f s]\n  (->>\n   s\n   (group-by f)\n   (vals)\n   (map set)\n   set))","user":"54448e84e4b032a45b869393"},{"code":"(fn [f seq] (set (map set (vals (group-by f seq)))))","problem":98,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn e [f s]  (set (vals (apply merge-with #(set (concat %1 %2)) (map #(hash-map (f %) #{%}) s)))))","problem":98,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn equivalence-class [f D]\n  (reduce\n   (fn [j k]\n     (if-let [s (seq (filter #(seq (clojure.set/intersection % k)) j))]\n       (conj (apply clojure.set/difference j (map #(conj #{} %) s)) (apply clojure.set/union k s))\n       (conj j k)))\n   #{}\n   (disj (set\n          (for [a D, b D]\n            (if (= (f a) (f b))\n              (set [a b])\n              nil))) nil)))","problem":98,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn [f coll]\n    (->> coll\n         (group-by f)\n         (vals)\n         (map set)\n         (set)))","problem":98,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":98,"code":"(fn equiv-classes\n  [f argset]\n  (set (map set (map second (group-by f argset)))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"(fn [f d] (set (map #(set (last %)) (group-by f d))))","problem":98,"user":"4db4714f535dc0f10411755a"},{"code":"(fn equivalence-classes [op domain]\n  (apply hash-set (vals (apply (partial merge-with clojure.set/union) (for [element domain]\n                                                                        {(op element) #{element}})))))","problem":98,"user":"510cd1dde4b078ea71921124"},{"problem":98,"code":"(fn [f vs]\n  (->> vs\n       (map #(vector (f %) %))\n       (reduce (fn [acc [k v]] (assoc acc k (conj (acc k #{}) v))) {})\n       (vals)\n       (into #{})))\n;#(->> (group-by %1 %2)\n;      (vals)\n;      (map set)\n;      (set))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn [x y]\n  (set (map set (vals (group-by x y)))))","problem":98,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn equivs [f s]\n  (set\n    (vals\n      (reduce\n        (fn [ans [k v]] (assoc ans v (conj (get ans v #{}) k)))\n        {}\n        (map (fn [x] [x (f x)]) s)\n        )\n      )\n    )\n  )","problem":98,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn [f s] (set (map #(set %) (vals (group-by f s)))))","problem":98,"user":"52a5e784e4b0c58976d9abf3"},{"problem":98,"code":"(fn [f coll] (into #{}(map (fn[e] (apply hash-set e)) (vals (group-by f coll)))))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn [f v] (set (map set (vals (group-by f v)))))","problem":98,"user":"4ddbd934535d02782fcbe9fc"},{"problem":98,"code":"(fn [f coll]\n  (reduce #(conj %1 (set (val %2))) #{} (group-by f coll)))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [f coll] (into #{} (map set (vals (group-by f coll)))))","problem":98,"user":"5032b066e4b00c0952a257ea"},{"problem":98,"code":"(fn eq\n    [f d]\n    (->> (group-by f d)\n         vals\n         (map #(into #{} %))\n         (into #{})))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [f x]\n    (set (vals\n      (reduce \n        #(assoc %1 (f %2) (conj (set (%1 (f %2))) %2)) \n          {} x))))","problem":98,"user":"4dcc5aff535d5973398f9293"},{"code":"(fn equivalent-classes [f D]\n  (set (vals (reduce #(assoc %1 (f %2) (conj (%1 (f %2) #{}) %2)) {} D))))","problem":98,"user":"52606318e4b03e8d9a4a7036"},{"code":"(fn a [f D] (into #{}(loop [c D out []](if(empty? c)(identity out) (recur (remove #(=(f (first c))(f %)) c) (cons (into #{}(filter #(=(f (first c))(f %)) c)) out))))))","problem":98,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"#(set (map set (vals (group-by % %2))))","problem":98,"user":"4dce6e41535d5973398f92a2"},{"problem":98,"code":"(fn [f d]\n  (reduce (fn [carry x]\n            (conj carry (set (filter #(= (f %) (f x)) d))))\n          #{}\n          d))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":98,"code":"(fn [f coll]\n  (->> coll\n       (group-by f)\n       (map (comp set val))\n       set))","user":"50310713e4b05b7df5a0b84c"},{"problem":98,"code":"(fn equiv [f s]\n  (loop [s (into [] s)\n         res #{}]\n    (if (seq s)\n      (let [hd (first s)\n            tl (rest s)\n            fhd (f hd)\n            [new-s new-res]\n            (reduce #(let [[new-s new-res] %1]\n                       (if (= fhd (f %2))\n                         [(filter (fn [n] (not= %2 n)) new-s)\n                          (conj new-res %2)]\n                         %1))\n                    [tl #{hd}]\n                    tl)]\n        (recur new-s (conj res new-res)))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":98,"code":"(fn [f s]\n  (->> (group-by f s)\n       vals \n       (map (fn [e] (into #{} e)))\n       (into #{}) ))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [f coll]\n  (->> (group-by f coll)\n      vals\n      (reduce #(conj % (set %2)) #{})))","problem":98,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":98,"code":"(fn eq-class [f D]\n  (let [add-value (fn [m k v] (assoc m k (conj (get m k #{}) v)))\n        value-set (reduce #(add-value %1 (f %2) %2) {} D)]\n    (set (vals value-set))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":98,"code":"(fn e [f s]\n  (if (empty? s)\n    #{}\n    (let [h (first s)\n          t (rest s)\n          v (f h)\n          c (apply conj #{} h\n                   (filter #(= v (f %)) t))\n          r (remove #(some (partial = %) c) t)]\n      (conj (e f r) c))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [f xs]\n  (->> xs \n       (map (fn [x] (->> xs (filter #(= (f %) (f x))) set)))\n       set))","problem":98,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn [f d] (set (map set (vals (group-by f d)))))","problem":98,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn [f xs]\n  (set (map set (vals (group-by f xs)))))","problem":98,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [f coll]\n  (let [reducef (fn [m x]\n    (if (m (f x))\n      (update-in m [(f x)] conj x)\n      (conj m [(f x) #{x}])))]\n    (into #{} (vals (reduce reducef {} coll)))))","problem":98,"user":"4e7f5a0b535db966e863cc41"},{"problem":98,"code":"(fn ec\n  [f s]\n  (let [vs (vec s)\n        gs (group-by f vs)]\n    (set (map #(set (second %)) gs))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":98,"code":"(fn [f s]\n   (->> s\n        (reduce (fn [acc x]\n                  (update-in acc [(f x)] #(conj (or % #{}) x))) {})\n        vals\n        set))","user":"5549ff9ae4b0a04f7929956e"},{"problem":98,"code":"#(into #{} (map (fn [a] (into #{} a)) (vals (reduce\n    (fn [s e]\n      (update-in s [(% e)] conj e))\n    {} %2))))","user":"59fedc26e4b01bb0ae8afd17"},{"code":"(fn [f args]\n  (set (vals (reduce #(if (%1 (f %2))\n                (update-in %1 [(f %2)] \n                                (fn [t] (conj t %2)))\n              (assoc %1 (f %2) (set [%2]))) {} args))))","problem":98,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn equiv-rel [f D]\n  (set (map #(set (filter \n                   (fn [x] (= (f %) (f x))) D)) \n            D)))","problem":98,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn [f domain]\n  (->> domain\n       (group-by f)\n       (vals)\n       (map set)\n       (set)))","problem":98,"user":"4e691c79535d8ccf87e9fe97"},{"problem":98,"code":"(fn [func coll] \n  (apply hash-set\n         (map set (vals (group-by func coll)))))","user":"568f2059e4b0dcc4269f40df"},{"problem":98,"code":"(fn equivalenceClasses [f D] (let [equivalent (fn [f d a] (reduce #(if (= (f a) (f %2)) (conj %1 %2) %1) #{} d))]\n                               (set (map (partial equivalent f D) D))))","user":"542c1f73e4b0dad94371f29d"},{"problem":98,"code":"(fn __ [f D]\n  (->> (group-by f D)\n       (vals)\n       (map set)\n       (set)))","user":"54c271b9e4b045293a27f602"},{"problem":98,"code":"(fn [f d]\n    (->> d\n         (group-by #(f %))\n         vals\n         (map set)\n         (into #{})))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn b [f nn]\n  (let [n (map #(assoc {} (f %) (set (vector %))) nn)]\n    (set\n     (vals\n      (apply merge-with clojure.set/union {} n)))))","problem":98,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn e [f D]\n  (set\n        (for [d D]\n          (set\n           (filter #(= (f d) (f %))\n                   D)))))","problem":98,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn [f s]\n  (into #{}\n        (for [e s]\n          (let [fe (f e)]\n            (into #{}\n                  (filter #(= fe (f %)) s))))))","problem":98,"user":"5341b141e4b00652c8746ecf"},{"problem":98,"code":"(fn equivalance-classes [f domain]\n  (letfn [(valencer [element]\n            (set (filter (comp (partial = (f element)) f) domain)))]\n    (->> domain (map valencer) set)))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [f d]\n    (->> (group-by f d)\n         vals\n         (map set)\n         set))","problem":98,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [f s]\n    (let\n      [r (fn r [m s]\n           (if (empty? s) m\n             (r (update-in\n                  m\n                  [(f (first s))]\n                  (comp set conj)\n                  (first s))\n                (rest s))))]\n      (set (vals (r {} s)))))","problem":98,"user":"51e00020e4b01188f0627534"},{"problem":98,"code":"(fn equivalance-classes [f d]\n  (println d)\n  (set (vals (reduce #(merge-with clojure.set/union %1 {(f %2) #{%2}}) {} d))))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn [f s]\n  (set (vals (apply merge-with into (map #(hash-map (f %) #{%}) s)))))","problem":98,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":98,"code":"(fn [f coll]\n  (->> coll\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(comp set (partial map set) vals group-by)","problem":98,"user":"4e50b67b535dc968683fc4ed"},{"problem":98,"code":"(fn equiv-classes [f s]\n  (->> (group-by f s)\n       vals\n       (map set)\n       set))","user":"52761edae4b03e8d9a4a74d4"},{"problem":98,"code":"(fn k [f D] (into #{} (map #(into #{} %) (vals (group-by f D)))))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn equivalence-classes [f s]\n  (into #{}\n        (map (comp (partial into #{}) second) (group-by f s))))","problem":98,"user":"50812debe4b01a93d3f38e4c"},{"problem":98,"code":"(fn [f D]\n  (set (vals (reduce #(assoc %1 (f %2)  (conj (get %1 (f %2) #{}) %2) ) {} D)))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":98,"code":"(fn [f s]\n   (set (vals ((fn [f s]\n                 (reduce #(assoc %1\n                            (f %2)\n                            (conj (get %1 (f %2) #{})\n                                  %2))\n                         {}\n                         s)) f s))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":98,"code":"(fn [f xs] \n  (->> xs (group-by f) vals (map set) (set)))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [f d] (set (map set (vals (group-by f d ))) ) )","problem":98,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [f d] (set (for [i (vals (group-by f d))] (set i))))","problem":98,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn [f s]\n (set (map set (vals (group-by f s)))))","problem":98,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [f v]\n  (set (map #(into #{} %) (vals (group-by f v)))))","problem":98,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [f coll]\n  (set (map set (vals (reduce (fn [m v] (assoc m (f v) (cons v (m (f v) [])))) {} coll)))))","problem":98,"user":"4e6f1b7a535d5021c1a89618"},{"problem":98,"code":"(fn [f D]\n                            (into #{} (vals (apply merge-with clojure.set/union (for [a D b D]\n                                                                                  (if (= (f a) (f b))\n                                                                                    {a #{b}}))))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":98,"code":"(fn equiv-classes [f D]\n  (set (map set (vals (group-by f D)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":98,"code":"(fn z [f coll] (->> coll (group-by f) (vals) (map #(set %)) set))","user":"56db90d4e4b0ea9b8538f80d"},{"problem":98,"code":"(fn[f s]\n  (let [values (set (map f s))]\n    (set (for [v values] (set (filter #(= v (f %)) s))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn equiv-classes [f D]\r\n    (set (map set (vals (reduce #(merge-with concat %1 %2) (map (fn [x] (hash-map (f x) [x])) D))))))","problem":98,"user":"4f039524535dcb61093f6b2c"},{"code":"; zomg cgrand, you are destroying me...\n\n(fn [f d]\n  (set\n   (map set\n        (vals\n         (apply merge-with concat\n                (map #(hash-map (f %) [%]) d))))))","problem":98,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn\n  [f D]\n    (->>\n      (group-by f D)\n      vals\n      (map set)\n      set))","problem":98,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn equivalence-classes [f s] (set (map set (vals (group-by f s)))))","problem":98,"user":"5138d08be4b0a5db03d727db"},{"problem":98,"code":"(fn q4q098\n  [f D]\n  (if (empty? D)\n    nil\n    (let [equiv (set (filter #(= (f (first D)) (f %)) D))]\n      (into #{equiv}\n            (q4q098 f (clojure.set/difference D equiv))))))","user":"52213426e4b0e6a83c8925c4"},{"problem":98,"code":"(fn equiv-classes [func domain]\n  (set\n   (map set\n        (vals (reduce (fn [accum item]\n                        (merge-with concat\n                                    accum\n                                    {(func item) [item]}))\n                      {}\n                      domain)))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":98,"code":"(fn kind-of-a-bullshit-equivalence-relation [f input-set]\n  (->> input-set\n       (group-by f)\n       vals\n       (map set)\n       set))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":98,"code":"(fn __\n   [f xs]\n   (into #{} (map #(into #{} (val %)) (group-by f xs))))","user":"5b73e500e4b047b03b2036ba"},{"problem":98,"code":"(fn equivalence-classes\n  [f xs]\n  (set (map set (vals (group-by f xs)))))","user":"4fcf1755e4b03432b189f40c"},{"problem":98,"code":"(fn equivalence-classes [f D]\n  (set (map set (vals (group-by f D)))))","user":"5d6042f2e4b0c9e5857d5006"},{"code":"#(->>\n  (group-by %1 %2)\n  (vals)\n  (map set)\n  (set))","problem":98,"user":"528652fbe4b0239c8a67ae14"},{"problem":98,"code":"(fn [f d]\n  (into #{} (map set (vals (group-by f d)))))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn [f d]  \n  (set (map set (vals (group-by f d)))))","problem":98,"user":"51d19c24e4b0cfcf579466c3"},{"problem":98,"code":"(fn [op D]\n  (set (map set (vals (group-by op D)))))","user":"4ea03f70535d7eef308072a1"},{"problem":98,"code":"(fn equivalenceClasses [func elems]\n  (set\n    (vals\n      (reduce\n        (fn [collector elem]\n          (let [key (func elem)]\n            (assoc\n              collector\n              key\n              (if (contains? collector key)\n                (conj (collector key) elem)\n                (set (vector elem))\n                )\n              )\n            )\n          )\n        {}\n        elems\n        )\n      )\n    )\n  )","user":"58950f29e4b00487982d5270"},{"problem":98,"code":"(fn equiv [f s]\n(loop [res #{} init s]\n  (println res init)\n  (if (seq init) (let [s1 (first init) sr (set (rest init)) equi (set (filter #(= (f s1) (f %)) sr))]\n                (recur (conj res (conj equi s1)) (clojure.set/difference sr equi))\n               )\n   res\n    )\n)\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn p98\n  ([f xs] (p98 {} f xs))\n  ([s f xs] (if (empty? xs) (into #{} (for [ss (vals s)] (into #{} ss)))\n                (p98 (conj s [(f (first xs)) (conj (s (f (first xs))) (first xs))]) f (next xs)))))","problem":98,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [f d] (set (map set (vals (reduce #(update-in % [(f %2)] conj %2) {} d)))))","problem":98,"user":"50ed4626e4b01236b1d4983c"},{"problem":98,"code":"(fn [f D] (into #{} (map set (vals (group-by f D)))))","user":"5353afa0e4b084c2834f4b03"},{"problem":98,"code":"(fn p98\n  [f coll]\n  (set (map #(into #{} (val %)) (group-by f coll))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":98,"code":"(fn [f arg]\n\n  (->> arg\n       (group-by f)\n       (vals)\n       (map set)\n       (into #{}))\n  )","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":98,"code":"(fn [f coll] \n  (set (map set (vals (group-by f coll)))))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":98,"code":"(fn [op l]\n  (set (map\n   (fn [el] (set (filter #(= (op %) el)  l)))\n   (set (map op l)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":98,"code":"(fn [f xs] (->> (vals (group-by f xs)) (map set) (into #{})))","user":"570eeca5e4b0b0fb43fd06fb"},{"problem":98,"code":"(fn [f D]\n  (set (vals (reduce (fn [m e]\n            (let [k (f e)\n                  v (m k)]\n              (if v\n                (conj m [k (conj v e)])\n                (conj m [k #{e}]))))\n          {} D))))","user":"56051095e4b08b23635d3162"},{"problem":98,"code":"#(set(map set (vals (group-by % %2))))","user":"533018b2e4b019098a6f8b56"},{"problem":98,"code":"(fn solution [f D]\n  (set (map set (vals (reduce #(assoc %1 (f %2) (conj (get %1 (f %2)) %2)) {} D)))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":98,"code":"(fn [f args]\n  (set (vals (reduce (fn [acc arg]\n                       (assoc acc (f arg) (set (conj (get acc (f arg)) arg)))\n                       ) {} args)))\n  )","user":"5cdbb1b2e4b05ee0cb311732"},{"code":"(fn ec [f s]\n  (set(for [r (set(map f s))]\n    (set(filter #(= r (f %)) s)))))","problem":98,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":98,"code":"(fn eq-class [f s]\n  (loop [acc {} coll (vec s)]\n    (let [v (first coll)]\n      (cond\n        (empty? coll) (set (map set (vals acc)))\n        (acc (f v)) (recur (assoc acc (f v) (conj (acc (f v)) v)) (rest coll))\n        :else (recur (assoc acc (f v) [v]) (rest coll))))))","user":"53ae0c50e4b047364c044471"},{"code":"(fn problem-98 [f domain]\n  (->> domain\n       (group-by #(identity (f %)))\n       (map (comp set second))\n       set))","problem":98,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn [f d] (set (map (fn [a] (set (cons a (filter #(= (f a) (f %)) (disj d a))))) d)))","problem":98,"user":"51307b84e4b08c712d3fae39"},{"problem":98,"code":"(fn [func domain]\n  (let [update-map (fn [m k f] (assoc m k (f (get m k))) )]                            \n                                    \n        \n        \n    (->>\n      (reduce (fn [a v] (update-map a (func v) #(if (nil? %)\n                                              #{v}\n                                              (conj % v)) ))  {} domain)\n \n      (vals)\n      (set))))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn equivalence-classes [f D]\n  (loop [r #{}\n         f f\n         D D]\n    (if (empty? D)\n      r\n      (recur \n       (conj r (set (filter #(= (f (first D)) (f %)) D)))\n       f \n       (set (filter #(not= (f (first D)) (f %)) D))))))","problem":98,"user":"51d360d1e4b099f3b6acddff"},{"problem":98,"code":"(fn [f xs]\r\n  (into #{} (map (fn [x] (into #{} (filter #(= (f %) (f x)) xs))) xs)))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":98,"code":"(fn [f s]\n  (into #{} (vals (reduce\n                   (fn [m k]\n                     (update-in m [(f k)] (fnil #(conj % k) #{})))\n                   {} s))))","user":"54c5cc17e4b045293a27f624"},{"problem":98,"code":"(fn equivalence-classes [f domain]\n  (into #{} (map #(into #{} %) (vals (group-by f domain)))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":98,"code":"(fn [f d]\n   (->> (group-by f d)\n     (vals)\n     (map #(into #{} %))\n     (into #{})))","user":"53c38b8ce4b00fb29b22127b"},{"problem":98,"code":"(fn eq-cls [f col]\n  (let [clses (group-by f col)\n        values (vals clses)\n        values (map set values)]\n    (set values)))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":98,"code":"(fn [f D] \n  (->> D\n       (group-by f)\n       (map (comp set last))\n       (set)\n   )\n  )","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn [func D]\n  (let [D (map #(hash-map % (func %)) D)]\n    (loop [D D out #{}]\n      (if (empty? D)\n        out\n        (recur (remove #(= (val (first (first D))) (val (first %))) D)\n               (conj out (into #{} (map #(key (first %)) (filter #(= (val (first (first D))) (val (first %))) D)))))))))","problem":98,"user":"4faec810e4b081705acca24e"},{"code":"(fn [f d]\n    (into #{} (map #(into #{} %) (vals (group-by f d)))))","problem":98,"user":"4e89e939535d3e98b8023287"},{"code":"#(into #{} (map set (vals (group-by % %2))))","problem":98,"user":"509160dae4b0742c82730aef"},{"problem":98,"code":"(fn [f D]\n         (->> (reduce (fn [m v]\n                        (let [k (f v)]\n                          (assoc m k (if (contains? m k)\n                                       (conj (m k) v)\n                                       #{v}))))\n                      {} D)\n             vals\n             set))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":98,"code":"(fn equiv-class [f d]\n        (into #{} (map #(into #{} %) (vals (reduce (fn [map val]\n                                                   (let [res (f val)]\n                                                     (update-in map [res] conj val))) {} d)))))","user":"52efd3d9e4b05e3f0be25ed4"},{"code":"(fn [f s]\n  (into #{} \n  (vals (reduce\n    #(let [k (f %2)]\n       (if (contains? %1 k)\n         (assoc %1 k (conj (get %1 k) %2))\n         (assoc %1 k #{%2})))\n    {}\n    s))))","problem":98,"user":"4dad76588e77d6ed63f12a44"},{"problem":98,"code":"(fn equi[f s]\n  (into #{} (for [x s ]\n       (into #{} (for [z s\n             :when (= (f x) (f z))] \n             z)))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":98,"code":"(fn [f D]\n    (let [ds (group-by f D)]\n        (set (map set (vals ds)))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":98,"code":"(fn newBin [f s] (set (map #(into #{} %) (vals (group-by f s)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [f d] (set (map set (vals (group-by f (sort-by f d))))))","problem":98,"user":"4edecdae535d10e5ff6f533c"},{"problem":98,"code":"(fn problem-98\n  [f s]\n  (->> s\n       (reduce (fn [a e] (update-in a [(f e)] (fnil conj #{}) e)) {})\n       (vals)\n       (into #{})))","user":"58e37946e4b005f69f193cae"},{"problem":98,"code":"(fn [f coll]\n  (->>\n    (group-by f coll)\n    (vals)\n    (map #(set %))\n    (into #{})))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":98,"code":"(fn eqcls [f dom]\n  (let [eqcl (fn eqclsx [f dom]\n  (remove (fn [u] (= #{nil} u) )  (map  #(if (set? %) % #{%})\n  (let [x (first dom) d (rest dom)]\n  (if (not (seq d))\n      #{x}\n    (let [ec (into #{} (conj (filter #(= (f x) (f %)) d) x))\n          rm (remove #(= (f x) (f %)) d)]\n      (concat #{ec} (cond\n                      (> (count rm) 1) (eqclsx f rm)\n                      :ELSE  #{(first rm)}) )))))))]\n          (into #{} (eqcl f dom))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn [f xs] (set (map set (vals (group-by f xs)))))","problem":98,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [f s]\n  ((fn [s m]\n     (if (empty? s)\n       (clojure.core/set (map #(clojure.core/set (second %)) m))\n       (recur (rest s) (assoc m (f (first s))\n                              (conj (m (f (first s))) (first s))))))\n   s {}))","problem":98,"user":"4f404dcee4b0e243712b1fb0"},{"problem":98,"code":"(fn [func se]\n         (loop [xs se\n                out #{}]\n           (if (empty? xs) out\n               (let [y (first xs)\n                     ys (rest xs)\n                     funcY (func y)\n                     eqFunc (fn [k]  (= (func k) funcY))\n                     kkk (group-by eqFunc ys)\n                     yEq  (get kkk true)\n                     noYeq (get kkk false)\n                     newOut (conj (set yEq) y)]\n                 ; (println kkk)\n                 ; (println  y funcY yEq noYeq)\n                 (recur noYeq (conj out newOut))))))","user":"5d0cf1c8e4b0cc9c91588246"},{"code":"(fn [f coll]\n    (let [fcoll (map f coll)\n          fcoll-and-coll (map #(vector %1 %2) fcoll coll)]\n      (reduce conj #{} (map set (map #(map last %) (vals (group-by first fcoll-and-coll)))))))","problem":98,"user":"4dc29a1d535d020aff1edf96"},{"problem":98,"code":"(fn [f D]\n  (loop [classes #{}, remaining D]\n     (if (empty? remaining) classes\n       (let [equiv-class (into #{} (filter #(= (f %) (f (first remaining))) remaining))]\n    (recur (conj classes equiv-class) (remove equiv-class remaining))))))","user":"4e1e89a2535d04ed9115e809"},{"code":"(fn [f xs]\n  (set (map #(set (second %)) (group-by f xs))))","problem":98,"user":"531490bde4b08068f379ed17"},{"code":"(fn equiv-class [f D]\n  (let [m (group-by f D)]\n    (set (map set (vals m)))))","problem":98,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn [f D] (set (map (comp set val) (group-by #(f %) D))))","problem":98,"user":"50bce014e4b0594b91591c63"},{"problem":98,"code":"#(->> %2\n(group-by %1)\n(vals)\n(map set)\n(into #{})\n)","user":"5e13a6b7e4b099d064963001"},{"problem":98,"code":"(fn solve [f d]\n  (set (map set (vals (group-by f d)))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":98,"code":"(fn equivalence-classes [f coll]\n  (set (vals \n    (reduce \n      (fn[acc v]\n        (let [k (f v)]\n          (assoc acc k (conj (get acc k #{}) v))))\n      {}\n      coll))))","user":"57c0917be4b05aa3c4741c95"},{"code":"#(set (map (comp set val) (group-by %1 %2)))","problem":98,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":98,"code":"(fn equivalent\n  [f s]\n  (set\n   (map\n    #(set\n      (map\n       first\n       (second %)))\n    (group-by\n     #(second %)\n     (for\n         [i s]\n       [i (f i)])))))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":98,"code":"(fn equivalence-classes\n  [f d]\n  (->> (map (fn [x] [x (f x)]) d)\n       (group-by second)\n       (vals)\n       (map (fn [a] (into #{} (map (fn [b] (first b)) a))))\n       (into #{})))","user":"5b759ca8e4b047b03b2036d0"},{"problem":98,"code":"(fn [f s]\n  (set (loop [s s\n              h {}]\n         (if (empty? s)\n           (vals h)\n           (recur (rest s)\n                  (let [v (first s)\n                        k (f v)]\n                    (assoc h k\n                      (if (h k)\n                        (conj (h k) v)\n                        #{v}))))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":98,"code":"(fn equiv-rel [f D] (set (for [[k v] (group-by f D)]\n  (set v))))","user":"56f4cedce4b046a417f92063"},{"problem":98,"code":"#(into #{} \n       (map set\n            (vals (group-by %1 %2))))","user":"5591cc56e4b0604b3f94d582"},{"problem":98,"code":"(fn equiv-classes [f s]\n      (set (map #(set (nth % 1))\n           (group-by f s))))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":98,"code":"(fn [f d] \n  (->> (reduce (fn [m v] (update-in m [(f v)] (fnil conj #{}) v)) {} d) \n       vals \n       (into #{})))","user":"5609d328e4b05f002753deee"},{"code":"#(set (map set (partition-by % (sort-by % %2))))","problem":98,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn equivalence [f d]\n     (set (map set (vals (group-by f d)))))","problem":98,"user":"532727bae4b09d4e7a9b54fa"},{"problem":98,"code":"(fn equivalence-classes\n  [f d]\n  ((comp set (partial map set) vals) (group-by f d)))","user":"53b952eee4b047364c0444e6"},{"problem":98,"code":"(fn [f D]\n    (set (map #(into #{} %) (vals (group-by f D))))\n  )","user":"589037b4e4b00487982d51d0"},{"problem":98,"code":"(fn equiv\n  [f xs]\n  (set (map set (vals (group-by f xs)))))","user":"5ed6030de4b016b56eae05db"},{"problem":98,"code":"(fn equiv-classes\n  [f D]\n  (loop [Drem D E #{}]\n    (if (empty? Drem)\n      E\n      (let [e (set\n               (filter\n                #(= (f %) (f (first Drem)))\n                Drem))]\n        (recur (remove e Drem) (conj E e))))))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":98,"code":"(fn [f D] (set(map (comp set second) (group-by f D))))","user":"580c8fcee4b0849f6811b721"},{"problem":98,"code":"(fn [f coll]\n  \"Returns D\"\n  (set (map set (vals (group-by f coll)))))","user":"4dc97aec535d5973398f9284"},{"problem":98,"code":"(fn [f s]\n  (->> (group-by f s)\n       vals\n       (map set)\n       set))","user":"53ea5307e4b036ad0777e4e2"},{"problem":98,"code":"(fn a [f v] \n  (->> (group-by f v)\n       (vals)\n       (map set)\n       (set)))","user":"50be9b4ae4b00fb48fed2ef6"},{"problem":98,"code":"(fn [f xs]\n    (->> (group-by f xs)\n         vals\n         (map set)\n         set))","user":"59fa241ee4b0ca45a743a358"},{"code":"#(set (for [[_ x] (group-by %1 %2)] (set x)))","problem":98,"user":"510d9d61e4b078ea71921141"},{"code":"(fn\n  [f coll]\n  (set (map set (vals(group-by f coll)))))","problem":98,"user":"4fdf566fe4b05e33b9224f99"},{"problem":98,"code":"(fn [f coll]\n (->> coll\n  (group-by f)\n  vals\n  (map set)\n  set))","user":"57f80350e4b0d3187e90090c"},{"problem":98,"code":"(fn [f s]\n  (set (vals (reduce (fn [acc it]\n                       (assoc acc (f it) (conj (acc (f it) #{}) it)))\n                     {}\n                     s))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":98,"code":"(fn [f coll]\n  (->> coll\n       (group-by f)\n       (map (comp set second))\n       (into #{})))","user":"55f2e47de4b06e875b46ce4d"},{"code":"(fn equiv\n  [f D]\n  (set\n   (for [a D]\n     (set\n      (for [b D :when (= (f a) (f b))]\n        b)))))","problem":98,"user":"4ee26f01535d10e5ff6f5368"},{"problem":98,"code":"(fn [f coll]\n  (let [m (map #(assoc {} (f %) [%]) coll)]\n    (reduce #(conj % (apply hash-set %2))\n            #{}\n            (vals (reduce (fn [cl e] (merge-with concat cl e)) {} m)))))","user":"55a0d79fe4b0acc240e31502"},{"problem":98,"code":"(fn me [f my-set]\n\n  (let  [ my-vec   (into [] my-set)  \n\n          f-values (map f my-vec) \n\n          my-mapping (map list f-values my-vec)\n\n          my-vals (vals (group-by first my-mapping))\n       ]\n\n\n      (into #{} \n          (for [x my-vals] \n            (into #{} (map second x))\n          )\n      )\n       \n  )\n\n\n)","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [f d]\n  (->>\n   (sort-by f d)\n   (partition-by f)\n   (map set)\n   (set)))","problem":98,"user":"514721c6e4b0d520409ed392"},{"code":"#(->> (group-by %1 %2)\n         (map last)\n         (map set)\n         (set))","problem":98,"user":"4db8f6c4535d1e037afb219e"},{"problem":98,"code":"(fn [f D]\n  (set (vals (reduce\n              (fn [m v] (update-in m [(f v)] (fnil conj #{}) v))\n              {}\n              D))))","user":"564c8e99e4b0284900eef674"},{"problem":98,"code":"(fn parse-it [funct settt]\n    (let [put (fn [mapp key elem] (if (nil? (get mapp key)) (assoc mapp key #{elem}) (assoc mapp key (conj (get mapp key) elem))))\n          to-res (fn [mapp] (loop [mapp mapp res #{}] (if (empty? mapp) res (recur (rest mapp) (set (conj res (second (first mapp)))))) ))]\n      (loop [sett settt res #{} temp {}]\n        (if (empty? sett)\n          (to-res temp)\n          (recur (set (rest sett)) res (put temp (funct (first sett)) (first sett)))\n          ))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn eqclass [f d]\n  (let [groups (vals (group-by first (map (fn [n] [(f n) n]) d)))]\n    (set (map (fn [g] (set (map second g))) groups))))","problem":98,"user":"5003deb9e4b0678c553fc445"},{"problem":98,"code":"(fn [g d]\n            (->> d\n                 (group-by g)\n                 vals\n                 (map set)\n                 (into #{})))","user":"53684a2fe4b0243289761e8c"},{"code":"#(set (->> (group-by % %2) vals (map set)))","problem":98,"user":"4e0e0529535d04ed9115e7b9"},{"problem":98,"code":"(fn equiv-classes [f xs]\n  (->> (vals (group-by f xs))\n       (map set)\n       (into #{})))","user":"57c500f9e4b05aa3c4741cda"},{"problem":98,"code":"(fn [f s]\n    (->> s\n         (group-by f)\n         (vals)\n         (map set)\n         (set)))","user":"591ad160e4b09b4ee5954bdf"},{"problem":98,"code":"(fn [f D] (set\n                (vals\n                  (reduce\n                    (fn [a [k v]]\n                      (assoc a k\n                             (if (contains? a k)\n                               (conj (get a k) v)\n                               #{v})))\n                    {}\n                    (map\n                      #(vector (f %) %)\n                      D)))))","user":"51e28063e4b08e53a149f0f2"},{"problem":98,"code":"(fn [f s]\n  (set (map set (vals (group-by f s))))\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn [i-function i-set]\r\n     (apply hash-set (map\r\n       #(apply hash-set (last %))\r\n       (apply hash-set (group-by i-function i-set)))))","problem":98,"user":"4dddf817535d08e6dec9fdd3"},{"problem":98,"code":"(fn equiv-classes [fun col]\n  (let [resp \n        (loop [col col\n               resp {}]\n          (if (= col [])\n            resp\n            (let [f (first col)\n                  k (fun f)]\n              (if (contains? resp k)\n                (recur (rest col) (assoc resp k (conj (resp k) f)))\n                (recur (rest col) (assoc resp k #{f}))))))]\n    (reduce #(conj %1 (resp %2)) #{} (keys resp))))","user":"574f1c24e4b02ea114799255"},{"problem":98,"code":"(fn f [op xs]\n    (letfn [(proc [m k v] (assoc m k (conj (get m k #{}) v)))]\n      (->>\n        (reduce #(proc %1 (op %2) %2) {} xs)\n        (vals)\n        (set)\n        )\n      ))","user":"596d630ae4b069c0a1a19846"},{"problem":98,"code":"(fn [f secik] (set (vals (reduce #(if (contains? %1 (f %2)) (update-in %1 [(f %2)] conj %2) (conj %1 {(f %2) #{%2}} ))  {} secik))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":98,"code":"#(into #{} (map (fn[x](into #{} x))(vals (group-by % %2))))","user":"545537c1e4b0e397800069dd"},{"code":"(fn equivrel [f D]\r\n  (let [genhashmap \r\n    (fn genhashmap ([f D]\r\n      (genhashmap f D {}))\r\n    ([f D m]\r\n      (if (empty? D) m\r\n        (recur f (rest D) \r\n          (assoc m (f (first D)) (conj (get m (f (first D))) (first D)))      \r\n      ))))]\r\n(set (map set (vals (genhashmap f D))))))","problem":98,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn [f d]\n  (into #{} (vals (apply merge-with #(set (concat % %2)) (map #(hash-map (f %) (hash-set %)) d)))))","problem":98,"user":"4ec07699535dfed6da9c6da2"},{"problem":98,"code":"(fn equiv-classes [f domain]\n  (loop [eqclasses {}, d domain]\n    (if-let [e (first d)]\n      (let [fe (f e)\n            eqclass-e (conj (get eqclasses fe #{}) e)]\n        (recur (assoc eqclasses fe eqclass-e) (rest d)))\n      (into #{} (vals eqclasses)))))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"#(set (map set (partition-by %1 (sort-by %1 %2))))","problem":98,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn [fnc a-seq]\n  (loop [classes {}\n            curr (first a-seq)\n            rst (rest a-seq)]\n       (if (nil? curr)\n         (set (vals classes))\n         (let [v (fnc curr)\n               he (classes v)]\n           (if he\n             (recur (update-in classes [v] conj curr) (first rst) (rest rst))\n             (recur (assoc classes v (set [curr])) (first rst) (rest rst)))))))","problem":98,"user":"4e58bcd4535d8a8b8723a296"},{"problem":98,"code":"#(->> (group-by % %2) vals (map set) set )","user":"512b07f7e4b078b06821febb"},{"problem":98,"code":"(fn equivalance-classes [f s]\n  (set (map set (vals (group-by f s)))))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn [f d]\n  (apply hash-set \n    (for [[_ ds] (group-by f d)]\n      (apply hash-set  ds))))","problem":98,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":98,"code":"(fn [f coll]\n  (->> coll (group-by f) (vals) (map #(set %)) set))","user":"5d9c9446e4b0eb781811cdae"},{"problem":98,"code":"(fn[f d]( ->> (group-by f d) vals (map set) set ))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":98,"code":"(fn [f d] (set (map set (vals (group-by (fn [x] (f x)) d)))))","user":"50856bd1e4b004985b776e4c"},{"problem":98,"code":"(fn [f d]\n  (set (map #(set (second %)) (group-by f d))))","user":"59156f0be4b0163c97b36f3d"},{"problem":98,"code":"(fn equivalence [x c]\n  (->> (group-by x c)\n       (map #(set (val %)))\n       set))","user":"55d9743ae4b0e31453f64aca"},{"problem":98,"code":"#(into #{}\n  (map \n   (fn [x] (into #{} (second x))) \n   (group-by % %2)\n   )\n  )","user":"51e1c176e4b06a68e693eafb"},{"problem":98,"code":"(fn eq-rel [function domain]\n   (set (vals (reduce (fn [res input]\n                   (let [result (function input)\n                         current-entry (get res result #{})]\n                     (assoc res result (conj current-entry input)))) {} domain))))","user":"54f09599e4b024c67c0cf89d"},{"problem":98,"code":"#(->> (group-by % %2) vals (map set)  set)","user":"5c379636e4b0d62ef62d9f76"},{"code":"(fn [f s]\n  (set (map (fn [i] (set (filter #(= (f i) (f %)) s))) s)))","problem":98,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn equivalence- [f D]\n  ^{:doc \"Write a function with arguments f and D that computes the                                                                                                      \n  equivalence classes of D with respect to f.\"}\n  (set (map set (vals (group-by f D)))))","problem":98,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"#(set (for [x %2] \n    (set (for [y %2 :when (= (% x) (% y))] \n      y))))","problem":98,"user":"4dada16fc9a9d6ed2699dc57"},{"problem":98,"code":"(fn equivalence-relation\n  [f s]\n  (set (map #(into #{} %1) (vals (group-by f s)))))","user":"558bdcefe4b0277789237633"},{"problem":98,"code":"(fn [f coll] (into #{} (map set (vals (group-by f coll)))))\n\n\n;(fn\n;   [f coll]\n;   (set (map #(set %) (vals (group-by f coll))))\n;  )","user":"5face7fce4b08cb800c85ae9"},{"code":"(fn [f x]\n  (set (map set (vals (group-by f x))))\n  )","problem":98,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":98,"code":"(fn equiv-classes [f d]\n  (set (vals (apply merge-with (comp set concat) (map (fn [x] {(f x) #{x}}) d)))))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn eq-classes [f s]\n  ((fn [ecmap sp]\n     (if (seq sp)\n       (let [v (f (first sp))]\n         (if (contains? ecmap v)\n           (recur (assoc ecmap v (conj (get ecmap v) (first sp))) (rest sp))\n           (recur (assoc ecmap v #{(first sp)}) (rest sp))))\n       (set (map #(second %) ecmap))))\n     {} s))","problem":98,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn eq? \n  [f D]\n  (->> D\n       (group-by f)\n       (map #(set (second %)))\n       (set)\n       )       \n  )","problem":98,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn[f in]\n   (set (map #(set %) (partition-by f (sort-by f in)))))","problem":98,"user":"4fb86dc9e4b081705acca2d8"},{"problem":98,"code":"#(->>\n  \t(group-by %1 %2)\n  \t(map (comp (partial into (sorted-set)) (comp first rest)))\n  \t(into #{}))","user":"5895385fe4b00487982d5279"}]