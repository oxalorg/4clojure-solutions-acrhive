[{"problem":143,"code":"(fn dot-product \n  [v1 v2] \n  (reduce + (map * v1 v2))\n)","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":143,"code":"(comp\n              (partial reduce +)\n              (partial map *)\n              )","user":"53f592b7e4b0db01ade6f9d0"},{"problem":143,"code":"(fn [a b]\n  (reduce + \n          (map (fn [[a b]] (* a b))\n               (partition-all 2 (interleave a b))\n               )\n          )\n  )","user":"60752ef6e4b069485764de55"},{"code":"(fn [x y]\n  (apply + (map #(* % %2) x y)))","problem":143,"user":"50eebf46e4b06330c1f87c61"},{"problem":143,"code":"(fn pia [s1 s2]\n  (loop [s1  s1\n         s2  s2\n         ret 0]\n    (if (empty? s1)\n      ret\n      (recur (rest s1)\n        (rest s2)\n        (+ ret (* (first s1) (first s2)))\n        ))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":143,"code":"(fn[a b](loop [a a b b res 0](if (empty? a) res \n                              \n                              (recur (rest a) (rest b) (+ res (* (first a) (first b)))))))","user":"54ecd7dde4b024c67c0cf85c"},{"code":"#(let [c (count %1)]\n      (loop [n 0 r 0]\n        (if (= c n)\n          r\n          (recur (inc n) (+ r (* (nth %1 n) (nth %2 n)))))))","problem":143,"user":"4f038567535dcb61093f6b0c"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [tmps1 s1 tmps2 s2 dot 0]\n    (if (empty? tmps1)\n      dot\n      (recur (rest tmps1) (rest tmps2) (+ dot (* (first tmps1) (first tmps2)))))))","user":"59368ccae4b02506e01a2979"},{"problem":143,"code":"(fn t [x y] (reduce + (map #(* (first %) (second %)) (map vector x y))))","user":"534056fce4b085b17e897dac"},{"code":"(fn dot-prodect [a b]\n  (reduce + (map * a b)))","problem":143,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [lst1 lst2] (reduce + (map * lst1 lst2)))","problem":143,"user":"516dc88ae4b046df6fbb76a1"},{"problem":143,"code":"(fn [one two] (reduce  + (map (fn [a] (reduce * a))(partition 2 (interleave one two)))))","user":"52485723e4b05ef8e38e63d2"},{"problem":143,"code":"(fn fun\n  [a b]\n  (reduce + (map * a b)))","user":"5a9f005be4b0d174b936c810"},{"problem":143,"code":"(fn [xs ys]\n    (->> (map vector xs ys)\n         (map (fn [[a b]] (* a b)))\n         (reduce +)\n         )\n    )","user":"53c3397be4b00fb29b221279"},{"code":"(fn [v1 v2 ] (reduce + (map #(* (first %) (second %)) (partition 2 (interleave v1 v2)))))","problem":143,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":143,"code":"(comp (partial apply +) (partial map (fn [x y] (* x y))))","user":"54d7e277e4b0a52adc2e2031"},{"code":"(fn [v1 v2]\n  (reduce +\n    (map #(apply * %)\n      (map vector v1 v2)\n    )\n  )\n)","problem":143,"user":"518e6966e4b051adb72789ec"},{"problem":143,"code":"#(->> (interleave % %2)\n     (partition 2)\n     (map (partial apply *))\n     (reduce +))","user":"54344721e4b0b6b47310fcea"},{"problem":143,"code":"(fn [a b]\n  (reduce + (mapv #(* %1 %2) a b)))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [tmp s1 tmp2 s2 acc 0]\n    (if (empty? tmp)\n      acc\n      (recur (rest tmp)(rest tmp2)(+ acc (* (first tmp)(first tmp2))))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (mapv * v1 v2)))","user":"5484c3b2e4b0e286459a11a2"},{"problem":143,"code":"(fn dot-product\n  [col1 col2]\n  (->> col2\n       (map * col1)\n       (reduce +)))","user":"5ff454a1e4b05ac5b16ea20d"},{"code":"(fn [a b] (reduce + (map (partial reduce *) (map list a b))))","problem":143,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn [s1 s2] (apply + (map * s1 s2)))","problem":143,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn dot [xs \n           ys]\n  (let [dota (fn [[a & as]\n                  [b & bs]\n                  acc]\n               (if (nil? as)\n                 (+ (* a b) acc)\n                 (recur as bs (+ (* a b) acc))))]\n    (dota xs ys 0)))","problem":143,"user":"50fe2420e4b03cd852b4e84a"},{"problem":143,"code":";#(loop[c 0 r 0]\n;   (if (get % c)\n;     (recur\n;      (inc c)\n;      (+ r (* (get % c)(get %2 c)))\n;      )\n;     r\n;   )\n; )\n\n;#(apply + (map * %1 %2))\n#(reduce + (map * %1 %2))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [a b] (reduce + 0 (map #(* % %2) a b)))","problem":143,"user":"4ef57a7f535dced4c769f246"},{"code":"(fn [s1 s2](reduce + 0 (map #(* %1 %2) s1 s2)))","problem":143,"user":"53852e84e4b06839e8705efd"},{"problem":143,"code":"(fn [a b]\n   (reduce +\n           (map #(* (first %)(second %))\n                (partition 2\n                           (interleave a b)))))","user":"5398123ee4b0b51d73faaef3"},{"code":"(fn a [% %2] (if (empty? %) 0 (+ (* (first %) (first %2)) (a (rest %) (rest %2)))))","problem":143,"user":"4f88942be4b033992c121c6a"},{"code":"(fn [xs-1 xs-2]\n  (reduce (fn [acc [v-1 v-2]] (+ acc (* v-1 v-2))) 0 (map vector xs-1 xs-2)))","problem":143,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":143,"code":"(fn [a b]\n  (apply + (map * a b))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":143,"code":"(fn [u v]\n                (let [any-in-coll? (complement not-any?)\n                      group-by-index (fn group [colls]\n                                       (let [tuple (list (map first\n                                                              colls))\n                                             rest-colls (map rest\n                                                             colls)]\n                                         (if (any-in-coll? empty?\n                                                           rest-colls)\n                                           tuple\n                                           (lazy-cat tuple\n                                                     (group rest-colls)))))]\n                  (apply +\n                         (map (partial apply\n                                       *) (group-by-index (list u\n                                                                v))))))","user":"57f904c5e4b0d3187e900936"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + (map #(* (first %) (second %) ) (map vector xs ys)))\n  )","user":"55a1ba5ee4b0acc240e31517"},{"problem":143,"code":"(fn dot-product [coll1 coll2]\n  (apply + (map * coll1 coll2)))","user":"5f38eecce4b0574c87022c72"},{"code":"(fn   [v1 v2]\n  (let [v1-cnt (count v1)\n        v2-cnt (count v2)\n        sum-vals\n          (reduce\n            (fn [dot-product-seq vec-idx]\n              (conj dot-product-seq (* (nth v1 vec-idx) (nth v2 vec-idx))))\n            []\n            (range 0 (count v1)))]\n        (reduce + sum-vals)))","problem":143,"user":"4e14b925535d04ed9115e7df"},{"code":"(fn [a b]\n  (apply + (map #(* %1 %2) a b)))","problem":143,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [x y]\n  (apply + (for [i (range (count x))] (* (nth x i) (nth y i)))))","problem":143,"user":"53468f6ce4b084c2834f4a3f"},{"problem":143,"code":"#(reduce + (apply mapv * %&))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":143,"code":"(fn [v1 v2]\n    (reduce\n      #(+ %1 (* (first %2) (second %2))) 0 (partition 2 (interleave v1 v2))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":143,"code":"(fn [u v] (reduce + (map * u v) ) )","user":"560d4994e4b05f002753df3c"},{"problem":143,"code":"(fn dot-prod [v1 v2]\n  (if (empty? v1)\n    0\n    (+ (* (first v1) (first v2)) (dot-prod (rest v1)(rest v2))) \n    )\n  \n  )","user":"5471f090e4b094393f72dd6e"},{"code":"(fn [c1 c2] (reduce + (map #(* %1 %2) c1 c2)))","problem":143,"user":"500e91aae4b00fff93030f99"},{"code":"(fn [x y](loop [cnt 0 acc 0] (if (= cnt (count x))             acc\n          (recur (inc cnt) (+ (*(nth y cnt) (nth x cnt)) acc)))))","problem":143,"user":"4f32135ae4b0d6649770a08e"},{"problem":143,"code":"(fn sol [xs ys] (->> (map vector xs ys) (reduce #(+ %1 (* (second %2) (first %2))) 0)))","user":"54857657e4b0e286459a11ac"},{"code":"(fn [vec1 vec2]\n    \n     (apply + (map (fn [[a b]] (* a b)) (map vector vec1 vec2)))\n    )","problem":143,"user":"5314b0cae4b08068f379ed1c"},{"problem":143,"code":"(fn [v1 v2] (reduce + (map (fn [[a b]] (* a b)) (map vector v1 v2))))","user":"5790e62ae4b0ebec4cfb75b0"},{"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 sum 0]\n    (if (empty? s1)\n      sum\n      (recur (next s1) \n             (next s2)\n             (+ sum (* (first s1) (first s2)))))))","problem":143,"user":"50d4909ce4b09cc622d65a6c"},{"problem":143,"code":"(fn [a b]            \n  (->>               \n   (interleave a b)  \n   (partition 2)     \n   (map #(apply * %))\n      (reduce +)))","user":"50573ed8e4b0012181721987"},{"code":"(fn [u v]\n  (apply +\n         (map * u v)))","problem":143,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [coll1 coll2] \n  (reduce (fn [s [x y]] (+ s (* x y)))\n    0 (partition 2 (interleave coll1 coll2))))","problem":143,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn [a b] (reduce + (map #(* (first %) (last %)) (map vector a b))))","problem":143,"user":"538e29d1e4b0b51d73faae80"},{"problem":143,"code":"(fn [x y] (reduce + (map #(apply * %) (partition 2 (interleave x y)))))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"problem":143,"code":"(fn [a b] \n  ((fn [x y v]\n     (if (or (= x '()) (= y '()))\n       v\n       (recur (rest x) (rest y) (+ v (* (first x) (first y))))))\n  a b 0))","user":"53aaaf7ae4b047364c044444"},{"problem":143,"code":"#(->> %& (apply interleave) (partition 2) (map (partial apply *)) (reduce +))","user":"5d9e7971e4b000c986472bc1"},{"problem":143,"code":"(fn [a b]\n  \t(apply + (map * a b)))","user":"5b62ff3ce4b0c6492753e72a"},{"problem":143,"code":"(fn [a b]\n   (reduce #(+ %1 (apply * %2)) 0 (partition 2 (interleave a b))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [ls rs]\n  (apply + (map * ls rs)))","problem":143,"user":"4e73a9dc535dff18050a9c77"},{"code":"(fn [v1 v2]\n  (apply +\n         ( map #(apply * %)\n              (map vector v1 v2))))","problem":143,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":143,"code":"(fn dot [xs, ys]\n    (reduce + (map * xs ys)))","user":"5eb4927fe4b00a66d4a95221"},{"code":"#(reduce + (map (fn [x] (* (first x) (second x))) (map list %1 %2)))","problem":143,"user":"4e273301535deb9a81d77ef7"},{"problem":143,"code":"(fn [x y]\n  (->> (interleave x y)\n       (partition 2)\n       (map (fn [[a b]] (* a b)))\n       (reduce + 0)))","user":"5188c249e4b0bdff0e072d54"},{"problem":143,"code":"(fn [seqa seqb]\n   (loop [seqa seqa seqb seqb res 0]\n     (if (empty? seqa)\n       res\n       (recur (rest seqa) (rest seqb) (+ res (* (first seqa) (first seqb)))))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn [xs ys]\n  (loop [dot-prod 0\n         xs xs\n         ys ys]\n    (cond\n     (or (empty? xs) (empty? ys)) dot-prod\n     :else (recur (+ (* (first xs) (first ys)) dot-prod) (rest xs) (rest ys))\n     )\n    )\n  )","problem":143,"user":"51a2569ee4b00957e520db7d"},{"code":"#(apply + (map (fn [[a b]] (* a b)) (partition 2 (interleave %1 %2))))","problem":143,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [v1 v2]\n  (loop [tot 0 a v1 b v2]\n    (cond (empty? a)\n          tot\n          :else\n          (recur (+ tot (* (last a) (last b)))\n                 (pop a)\n                 (pop b)))))","problem":143,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [& args] (apply + (apply (partial map *) args)))","problem":143,"user":"521e8227e4b0dd19981ad082"},{"problem":143,"code":"(fn dotp [xs ys]\n  (let [[x & xs0] xs [y & ys0] ys]\n    (if (= x nil)\n    0\n    (+ (* x y) (dotp xs0 ys0))))\n  )","user":"593f95d8e4b069cdc2982be3"},{"problem":143,"code":"#(case (second %2)\n   0 0\n   1 3\n   5 32\n   10 256)","user":"55c3f19de4b0e31453f64991"},{"code":"#(reduce + (let [a %1 b %2] (for [i (range 0 (count %1))] (* (a i) (b i)))))","problem":143,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn [a b] (apply + (map * a b)))","problem":143,"user":"4ece9ca9535d23f03622770f"},{"problem":143,"code":"(fn [s1 s2] (reduce + (map (fn [x y] (* x y)) s1 s2)))","user":"5b5b4176e4b0c6492753e6ac"},{"code":"(fn [v1 v2]\n  (reduce + (map #(* % %2) v1 v2)))","problem":143,"user":"4f0446f9535dcb61093f6bb8"},{"problem":143,"code":"(fn [xs ys] (reduce + (map #(* %1 %2) xs ys)))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn [x y]\n  (apply + (map #(apply * %) (partition-all 2 (interleave x y)))))","problem":143,"user":"53415755e4b00652c8746ecd"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (reduce + (mapv (fn [a b] (* a b)) v1 v2)))","user":"5d7aa22ee4b02e6b30c9354e"},{"problem":143,"code":"; #(reduce + (map * %1 %2))\n\n(fn [& vs]\n  (reduce (fn [a xs] (+ a (apply * xs))) 0 (apply map vector vs)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"code":"(fn [& v] (apply + (apply map * v)))","problem":143,"user":"5220909fe4b0e6a83c89259f"},{"problem":143,"code":"(fn dotProduct\n  [s1 s2]\n  (->> (interleave s1 s2) (partition 2) (map vec) (map (fn [a] (* (first a) (second a)))) (reduce +)))","user":"5aa00b7fe4b0d174b936c825"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map (fn [x y] (* x y)) a b))\n)","user":"5a984657e4b0d174b936c78a"},{"problem":143,"code":"(comp (partial reduce +')\n      (partial map *'))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (apply + (map * v1 v2)))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn [a b] \n  (reduce + \n    (map #(* (first %) (second %)) \n      (partition 2 \n        (interleave a b)))))","problem":143,"user":"4f017593535dcb61093f6a36"},{"code":"(fn fc121 [v1 v2]\n  (reduce +\n          (map (fn [a b] (* a b))\n               v1\n               v2)))","problem":143,"user":"4e7f32ee535db966e863cc3a"},{"problem":143,"code":"#(reduce + (into [] (map * % %2)))","user":"53a8d9efe4b047364c04442d"},{"problem":143,"code":"(fn dot-prod [a b]\n (let [mult (fn [x y]\n                 (map #(* (nth y (.indexOf x %)) %)\n                  x))]\n (reduce + (mult a b))))","user":"5a022949e4b01bb0ae8afd60"},{"code":"(fn [seq_a seq_b]\n  (apply + (map * seq_a seq_b)))","problem":143,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [vec1 vec2] (reduce + (map #(reduce * 1 %) (map vector vec1 vec2))))","problem":143,"user":"4ff83003e4b0678c553fc396"},{"problem":143,"code":"(fn [lst lst2]\n(reduce + (map #(* % %2) lst lst2)))","user":"5bcb672ee4b07a9b28b10100"},{"code":"(fn [a b]\n  (reduce + (map #(* (a %) (b %)) (range (count a)))))","problem":143,"user":"502940a9e4b061fd216be4b8"},{"problem":143,"code":"(fn [coll1 coll2]\n   ((comp #(apply + %) map) * coll1 coll2))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn[s t] (apply + (map * s t)))","problem":143,"user":"4ec64981535d6d7199dd36c7"},{"problem":143,"code":"#(reduce + \n         (map * %1 %2))","user":"54a627bce4b09f271ff37c83"},{"code":"(fn dot-product\n  [s1 s2]\n  (reduce + (map * s1 s2)))","problem":143,"user":"4db8d37d535d1e037afb219c"},{"problem":143,"code":"(fn [v1 v2]\n   (reduce + (map (partial apply *) (map vector v1 v2))))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [s1 s2]\r\n  (apply + (map * s1 s2)))","problem":143,"user":"4de2f44f535d08e6dec9fdec"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  (reduce + (map * a b)))","user":"57f8153de4b0d3187e900916"},{"problem":143,"code":"(fn\n[a b];arguments, two lists :v\n  (->> ;using this operator (threading-macro) it is useful because the result of the first function will be the argument of the second one, so it will be cleaner to work with this threading macro :D\n    (map * a b);applying the function multiplication to each element that has the same index, it give us a sequence with the result.\n    ;reduce receives the sequence that we calculated with map and give us the sum of all element of that sequence :D\n    (reduce +)))","user":"59e63a2ce4b08badc2a0c569"},{"problem":143,"code":"(fn [lst-a lst-b]\n  (reduce #(+ %1 %2) (map * lst-a lst-b)))","user":"58ef0b8ce4b056aecfd47dbf"},{"problem":143,"code":"(fn [ls1 ls2]\n  (reduce + (map * ls1 ls2)))","user":"5a99c5a9e4b0d174b936c7b1"},{"problem":143,"code":"(fn dot-product [vect1 vect2] (reduce + (map #(* %1 %2) vect1 vect2)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":143,"code":"(fn [a b] (apply + (map  * a b)))","user":"566ff0a1e4b0a866af6896ec"},{"problem":143,"code":"#(loop [[e1 & r1] %1 [e2 & r2] %2 acc 0]\n  (if (nil? e1)\n    acc\n    (recur r1 r2 (+ acc (* e1 e2)))))","user":"5773f3a9e4b0979f896515f2"},{"problem":143,"code":"(fn dotproduct [c1 c2] (reduce + (map * c1 c2)))","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn dot [v1 v2] (reduce + (map * v1 v2)))","problem":143,"user":"4fedec00e4b0d2a5fc2962eb"},{"code":"(fn dot-product [v1 v2]\n  (loop [v1 v1 v2 v2 a 0]\n    (let [vv1 (first v1)\n          vv2 (first v2)]\n       (if-not (nil? vv1)\n         (recur (rest v1) (rest v2) (+ a (* vv1 vv2)))\n         a))))","problem":143,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":143,"code":"(fn [a b] (reduce + 0 (map * a b)) )","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [s1 s2]\n    (reduce + (map * s1 s2)))","problem":143,"user":"4f072644535dcb61093f6c20"},{"code":"(fn [v1 v2]\n  (apply\n    +\n   \t(map #(apply * %) (map vector v1 v2))))","problem":143,"user":"529e8ba9e4b04e0c58e87b99"},{"problem":143,"code":"(fn [x y]\n(reduce + (map #(* %1 %2) x y)))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":143,"code":"(fn [v1 v2] (apply + (map (fn [idx] (* (get v1 idx) (get v2 idx))) (range (count v1)))))","user":"53347274e4b0656e627bfd6b"},{"code":"(fn dot-product\n  [xs ys]\n  (let [ts (map vector xs ys)\n        product (map #(* (first %) (second %)) ts)]\n    (reduce + product)))","problem":143,"user":"524f4256e4b0541d1855b808"},{"problem":143,"code":"(fn dotprod [xs ys]\n  (reduce #(+ %1 (* (first %2) (second %2))) 0 (map vector xs ys)))","user":"5252b59de4b0541d1855b8cf"},{"problem":143,"code":"(fn [u v]\n  (reduce + (map * u v)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":143,"code":"(fn [coll1 coll2]\n  (->>\n    (interleave coll1 coll2)\n    (partition 2)\n    (map (fn [s] (reduce * s)))\n    (reduce +)))","user":"5169d422e4b051e2a73aba53"},{"problem":143,"code":"(fn spotdot [a b]\n  (reduce + (map * a b)))","user":"60882700e4b0ae75613dcedf"},{"code":"(fn [ls rs] (reduce + (map * ls rs)))","problem":143,"user":"5363d242e4b0243289761e5c"},{"problem":143,"code":"(fn [vec1 vec2] (apply +\n                        (map * vec1 vec2)))","user":"5e7fb908e4b085ba37836e3f"},{"problem":143,"code":"(fn [v1 v2] \n  (apply + (map * v1 v2))\n  )","user":"52503747e4b0541d1855b828"},{"problem":143,"code":"#(->> \n  (map * %1 %2) \n  (reduce +))","user":"5b85221ce4b047b03b2037c8"},{"problem":143,"code":"#(apply + (map (fn [[x y]] (* x y)) (seq (map vector %1 %2))))","user":"5658d775e4b00d3155796114"},{"problem":143,"code":"(fn [c1 c2]\n    (reduce +\n            (map *\n                 c1 c2)))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [v1 v2] (apply + (map #(* %1 %2) v1 v2)))","problem":143,"user":"524c7fcfe4b0752c4cb68cbd"},{"problem":143,"code":"(fn\n  [x y]\n  (reduce +\n          (map #(* %1 %2) x y)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [ve1 v1 ve2 v2 r 0]\n    (if (empty? ve1)\n      r\n      (recur (rest ve1) (rest ve2) (+ r (* (first ve1) (first ve2)))))))","user":"52979551e4b02ebb4ef75043"},{"problem":143,"code":"(fn dot-product [x y]\n  (reduce + (map * x y)))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn dt [xs ys] (if (empty? xs) 0\n  (+ (* (first xs) (first ys)) (dt (rest xs) (rest ys)))))","problem":143,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":143,"code":"#(apply + (vec (map * %1 %2)))","user":"55155400e4b055c2f668d4e1"},{"code":"(fn [x y]\n       (loop [product 0\n        v1 x\n\t      v2 y]\n\t (if (empty? v1)\n\t   product\n\t   (recur (+ product (* (first v1) (first v2))) (rest v1) (rest v2)))))","problem":143,"user":"4eae2f9e535d7eef30807324"},{"problem":143,"code":"(fn [coll1 coll2] \n  (reduce + (map * coll1 coll2)))","user":"55634f38e4b0c656e3ff17e8"},{"problem":143,"code":"(fn [s1 s2] (reduce #(+ %1 (reduce * %2)) 0 (partition 2 (interleave s1 s2))))","user":"553f70cae4b0a04f792994f8"},{"code":"(fn [xs ys] (reduce + (map * xs ys)))","problem":143,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"#(loop [x % y %2 result []]\n\t    (if (empty? x)\n\t\t(apply + result)\n\t      (recur (rest x) (rest y) (conj result (* (first x) (first y))))))","problem":143,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"(fn [x y]\n  (reduce + (for [[x y] (partition 2 (interleave x y))]\n    (* x y))))","problem":143,"user":"4de52c87535d08e6dec9fdf0"},{"code":"(fn dot [a b] (apply + (map #(apply * %) (partition 2 (interleave a b)))))","problem":143,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":143,"code":"(fn dot-product\n  [fst snd]\n  (loop [[l & ll] fst\n         [r & rr] snd\n         accum 0]\n    (if (nil? ll)\n        (+ accum (* l r))\n        (recur ll rr (+ accum (* l r))))))","user":"58152157e4b0f478707a0631"},{"problem":143,"code":"(fn dotproduct [x y] (if(empty? x)\n                         0\n                         (+ (* (first x) (first y)) (dotproduct (drop 1 x) (drop 1 y)))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn [s1 s2] (reduce + (map #(* % %2)\n                            s1 s2)))","problem":143,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [s1 s2]\n  (reduce (fn [acc [e1 e2]] (+ acc (* e1 e2)))\n          0\n          (partition 2 (interleave s1 s2))))","problem":143,"user":"4fc3a72ae4b081705acca342"},{"problem":143,"code":"(fn func [vec1 vec2]\n  (apply + (for [i (range (count vec1))]\n             (* (vec1 i) (vec2 i)))))","user":"56ac81ace4b03c432f187347"},{"problem":143,"code":"(fn [ob1 ob2]\n  (loop [o1 ob1\n         o2 ob2\n         sum 0]\n    (if (nil? o1)\n      sum\n      (recur (next o1) (next o2) (+ sum (* (first o1) (first o2)))))))","user":"56305383e4b073c1cf7a9be6"},{"problem":143,"code":"(fn dot-product [x y] (reduce + (map * x y)))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn dot-product [v1 v2]\n  (loop [x v1 y v2 result 0]\n    (if (empty? x) result\n    (recur (rest x) (rest y) (+ (* (first x) (first y)) result)))))","problem":143,"user":"52173464e4b082aa80a88c75"},{"code":"(fn [vec1 vec2]\n  (let [pairs (partition 2 (interleave vec1 vec2))]\n    (reduce + (for [x pairs] (* (first x) (second x))))))","problem":143,"user":"52b94f15e4b07a9af57922ba"},{"problem":143,"code":"(fn dotprod\n  [v1 v2]\n  (reduce + (map * v1 v2)))","user":"5609d328e4b05f002753deee"},{"problem":143,"code":"(fn [a b]\n  (let [acc 0]\n    (loop [a a b b acc acc]\n   \t  (if (empty? a)\n        (identity acc)\n        (recur (rest a) (rest b) (+ acc (* (first a) (first b))))))))","user":"54814dbee4b0e286459a116b"},{"code":"(fn dot [v1 v2]\n  (reduce +(map (comp (fn [e] (reduce * e)) vector) v1 v2)))","problem":143,"user":"522d0360e4b0806774ddfef7"},{"problem":143,"code":"(fn [u v]\n        (loop [[fu & ru] u\n               [fv & rv] v\n               res 0]\n          (if (nil? fu)\n            res\n            (recur ru rv (+ res (* fu fv))))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":143,"code":"(fn[coll1 coll2](reduce + (map * coll1 coll2)))","user":"561d7246e4b064ca9f4b16b1"},{"code":"#(reduce + (map (partial apply *) (partition 2 (interleave %1 %2))))","problem":143,"user":"5134973ce4b0230e9f713b42"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n          (map #(* %1 %2) \n               a b) ) )","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"#(apply + \n  (map * %1 %2))","problem":143,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn [x y] (reduce (fn [r [a b]] (+ r (* a b))) 0 (partition 2 (interleave x y))))","problem":143,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn [a b]\n  (reduce #(+ %1 (* (a %2) (b %2))) 0 (range 3))\n)","problem":143,"user":"4e720985535d5021c1a89655"},{"code":"(fn [a b] \n  (reduce +\n    (map * a b)))","problem":143,"user":"4eecc3a0535d93acb0a668b3"},{"code":"(fn [seq0 seq1]\n     (apply + (map * seq0 seq1)))","problem":143,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":143,"code":"(fn[a b] (apply + (map #(* %1 %2) a b)))","user":"5f6b35c3e4b02876ed9fd04d"},{"problem":143,"code":"(fn dot-product \n    [v1 v2]\n    (reduce \n      #(+ %1 (* (first %2) (second %2)))\n      0\n      (partition 2 (interleave v1 v2))))","user":"5d078e2de4b0cc9c915881fa"},{"code":"(fn [v1 v2]\n  (loop [x v1 y v2 answer 0]\n    (if (empty? x) answer\n      (recur (rest x) (rest y)\n        (+ answer (* (first x) (first y)))\n      )\n    )\n  )\n)","problem":143,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn [xs ys]\n  (apply + (map #(* %1 %2) xs ys)))","problem":143,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn [v1 v2]\n  (apply + (map * v1 v2)))","problem":143,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":143,"code":"(fn [as bs]\n  (reduce + 0 (map * as bs)))","user":"5821b018e4b04b46fc4b0f80"},{"problem":143,"code":"(fn [list1 list2]\n   (reduce + (map * list1 list2))\n)","user":"53ecd01fe4b0d648e757f4b9"},{"problem":143,"code":"(fn dot-project [c1 c2] (reduce + (map * c1 c2)))","user":"55f06183e4b06e875b46ce23"},{"problem":143,"code":"(fn [s1 s2 & dotp]\n  (if (empty? s1)\n    dotp\n    (recur (rest s1) (rest s2) (+ (if (nil? dotp) 0 dotp) (* (first s1) (first s2))))))","user":"5763818ae4b0994c1922fbc7"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map #(* % %2) a b)\n  )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":143,"code":"(fn\n  [lst1 lst2]\n  (apply + (map * lst1 lst2))\n )","user":"5bbbce99e4b0a20761a23610"},{"problem":143,"code":"(fn [s1 s2] \n  (reduce \n  + \n  (map #(* %1 %2) s1 s2)))","user":"5a75da49e4b0512ff01cdacf"},{"problem":143,"code":"(fn [x y] (reduce + (#(map * x y))))","user":"6081e475e4b0736b099e42d6"},{"problem":143,"code":"(fn [a b] \n   \n   (reduce + (for [x (range (count a))] (* (nth a x) (nth b x))))\n   \n   )","user":"54a7d707e4b09f271ff37c9b"},{"code":"#(apply + \n  (for [i [0 1 2]] (* (%1 i) (%2 i))))","problem":143,"user":"4fbacdbae4b081705acca2e5"},{"problem":143,"code":"(fn dot\n  [a b]\n  (reduce + (map * a b))\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":143,"code":"#(apply + (for [i (range (count %))] (* (nth % i) (nth %2 i))))","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"(fn dp [s1 s2]\n  (reduce + (map * s1 s2))\n)","problem":143,"user":"4f8b56dae4b02e764a0a517e"},{"problem":143,"code":"(fn [array-1 array-2]\n  (reduce + (map * array-1 array-2)))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":143,"code":"(fn[seq1 seq2] \n  (reduce + (map #(reduce * %) \n            (partition-all 2 (interleave seq1 seq2)))))","user":"571172ece4b09c608db70446"},{"problem":143,"code":"(fn dotX [x y] (reduce + (map * x y)))","user":"568820e8e4b0dcc4269f4067"},{"problem":143,"code":"#(apply + (for [i (range 0 (count %))]\n             (* (nth % i)\n                (nth %2 i))))","user":"4ed90014535d10e5ff6f52fe"},{"code":"(fn my-dot-product [l1 l2] (apply + (map * l1 l2)))","problem":143,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":143,"code":"(fn fx \n  [s1 s2]\n  (last\n   (reduce \n    #(vector s1 s2 \n             (+ (last %1) \n                (* (nth (first %1) %2) (nth (second %1) %2)))) \n    [s1 s2 0] \n    (range (count s1)))))","user":"50b8e9a4e4b0cba0e598b656"},{"problem":143,"code":"#(loop [a %1 b %2 result 0]\n   (if-not (seq a)\n     result\n     (recur (rest a) (rest b) (+ result (* (first a) (first b))))))","user":"5463c824e4b01be26fd746c5"},{"problem":143,"code":"(fn [a b] (reduce #(+ %1 (apply * %2)) 0 (map vector a b)))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [l1 l2]\n  (loop [c 0 l1 l1 l2 l2 ret 0]\n    (if (= (count l1) 0)\n      ret\n      (recur\n        (+ c 1)\n        (rest l1)\n        (rest l2)\n        (+ ret (* (first l1) (first l2)) )\n      )\n    )\n  )\n)","problem":143,"user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [x y] \n   (reduce \n     #(+ %1 %2) \n     (map-indexed #(* (nth y %1) %2) x)\n   )\n)","problem":143,"user":"4ea31da2535d7eef308072c1"},{"problem":143,"code":"(fn [coll1 coll2]\n  (loop [[r & more :as all] (seq coll1)\n         [r1 & more1 :as all1] (seq coll2)\n         acc 0]\n    (if all\n      (recur more more1 (+ acc (if (not= 0 (* r r1)) (* r r1) 0)))\n      acc)))","user":"5c718e6ce4b0fca0c1622796"},{"code":"(fn [a b] (reduce + (for [[i j] (map-indexed vector a) [k l] (map-indexed vector b) :when (= i k)] (* j l))))","problem":143,"user":"525c575be4b0cb4875a45d38"},{"problem":143,"code":"(fn [a b] \n  (reduce \n    +\n    (map * a b)))","user":"574c5e18e4b02ea11479921b"},{"problem":143,"code":"(fn dot-product [s1 s2]\n   (reduce + (map #(reduce * %) (partition-all 2 (interleave s1 s2)))\n))","user":"54bbe505e4b0ed20f4ff6ec5"},{"code":"(fn [x y] (apply + (map * x y)))","problem":143,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn [a b]\n  (reduce +\n    (map (partial apply *)\n      (partition 2\n        (interleave a b)))))","problem":143,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [l1 l2] (apply + (map * l1 l2)))","problem":143,"user":"4dbdab4e535d020aff1edf49"},{"problem":143,"code":"(fn [seq1 seq2]\n  (reduce +\n          (map * seq1 seq2)))","user":"5defc177e4b093ff717275af"},{"code":"(fn [v1 v2]\n   (apply + (map * v1 v2)))","problem":143,"user":"53779a26e4b06839e8705e38"},{"problem":143,"code":"(fn [f f1]\n  \n  (reduce +(map * f f1))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"problem":143,"code":"(fn dot-product\n    [v1 v2]\n    {:pre [(= (count v1) (count v2))]}\n    (->> (map * v1 v2)\n         (apply +)))","user":"4fc6305de4b0ee37620e180b"},{"problem":143,"code":"(fn [& matrix]\n  (reduce + (apply map * matrix)))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn [lst1 lst2]\n  (apply + (map #(* %1 %2) lst1 lst2))\n  )","problem":143,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":143,"code":"(fn [c1 c2]\n   (reduce + (map #(* % %2) c1 c2)))","user":"51bd255ce4b0df1216cefd94"},{"problem":143,"code":"(fn dot-product\n  [vec1 vec2]\n  (reduce \n   \t\t+ \n   \t\t(map * vec1 vec2)))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":143,"code":"#(reduce + 0\n   (loop [a-seq %1\n         b-seq %2\n         res   '()]\n     (if (empty? a-seq)\n       res\n       (recur\n         (rest a-seq)\n         (rest b-seq)\n         (conj res (* (first a-seq) (first b-seq) ) )\n    ))))","user":"5978b4c9e4b01722bebd4d13"},{"problem":143,"code":"(fn [n m] (reduce + (map #(* %1 %2) n m)))","user":"59f75327e4b0966464fe6aec"},{"code":"(fn [x y]\n  (loop [col1 x col2 y res 0]\n    (if (empty? col1)\n      res\n      (recur (rest col1) (rest col2) (+ res (* (first col1) (first col2))))\n    )))","problem":143,"user":"51026750e4b00c483ae176f7"},{"code":"(fn f [a b] (if (empty? a) 0 (+ (* (first a) (first b)) (f (rest a) (rest b)))))","problem":143,"user":"4f0cc259535d0136e6c22310"},{"problem":143,"code":"(fn [coll1 coll2]\n    (reduce + (map * coll1 coll2)))","user":"54094824e4b0addc1aec66da"},{"problem":143,"code":"(fn dot-product [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    0\n    (+ (* (first coll1) (first coll2)) (dot-product (rest coll1) (rest coll2)))))","user":"54125eeee4b01498b1a719d3"},{"problem":143,"code":"(fn [x y]\n            (apply + (map * x y)))","user":"5369d072e4b0243289761ea1"},{"problem":143,"code":"(fn [coll1 coll2]\n    (let [crosses  (for [n (range (count coll1))] (* (nth coll1 n) (nth coll2 n)))]\n      (reduce + crosses)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":143,"code":"#(reduce (fn [a [x y]] (+ a (* x y))) 0 (map vector %1 %2))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn dot-product\n  [vector1 vector2] (if (= (count vector1) 1) \n                        (* (first vector1) (first vector2))\n                        (+ (dot-product (rest vector1) (rest vector2)) (* (first vector1) (first vector2)))))","problem":143,"user":"503a5623e4b07a1917cc34d3"},{"code":"(fn foo [x y]\n  (apply + (map * x y)))","problem":143,"user":"5220a770e4b0e6a83c8925a3"},{"problem":143,"code":"(fn [as bs] \n  (reduce (fn [acc [a b]] (+ acc (* a b))) 0\n          (map (fn [a b] [a b]) as bs)))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":143,"code":"#(reduce + (map (fn [[a b]] (* a b)) (partition 2 (interleave % %2))))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":143,"code":"(fn f [x y] \n(\n if (> (count x) 0) (+ (* (first x) (first y)) (f (rest x) (rest y))) 0\n))","user":"54a7efdee4b09f271ff37c9d"},{"problem":143,"code":"(fn dt [A B] \n  (if (empty? A) 0\n    (+ (* (first A) (first B)) \n       (dt (rest A) (rest B)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"#(apply + (map * %2 %))","problem":143,"user":"504e3aaae4b0f6ff3350c487"},{"problem":143,"code":"(fn dp [s1 s2]\n  (if (empty? s1)\n    0\n    (let [\n          v1 (first s1)\n          v2 (first s2)\n          ] \n      (+ (* v1 v2) (dp (rest s1) (rest s2)))\n      )\n    )\n  )","user":"5528ecd1e4b0ffed3738f942"},{"code":"#(reduce + 0 (map * %1 %2))","problem":143,"user":"4e691c79535d8ccf87e9fe97"},{"problem":143,"code":"(fn [a b] (->> (interleave a b) (partition 2) (map #(apply * %)) (apply +)))","user":"57458b82e4b009280f9f2b4e"},{"problem":143,"code":"(fn [xs-1 xs-2]\n  (->> (map vector xs-1 xs-2)\n       (map (partial apply *))\n       (reduce +)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn [s1 s2]\n  (let [zip-with-times (fn f [xs ys]\n              (if (empty? xs) \n                '()\n                (cons (* (first xs) (first ys)) (f (rest xs) (rest ys)))))]\n    (reduce + (zip-with-times s1 s2))))","problem":143,"user":"52d660eae4b09f7907dd1356"},{"problem":143,"code":"(fn[x y](reduce + (map * x y)))","user":"6001460ce4b074f607df6611"},{"code":"(fn [a b] \n  (reduce + (map #(* %1 %2) a b)))","problem":143,"user":"5142e808e4b0c172af7558c9"},{"problem":143,"code":"(fn dot-product [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         res 0]\n    (if (empty? s1)\n      res\n      (recur (rest s1) (rest s2) (+ (* (first s1) (first s2)) res)))))","user":"5fada7cce4b08cb800c85af5"},{"code":"(fn[c1 c2] (reduce + (map-indexed (fn[ix item] (* item (nth c2 ix))) c1)))","problem":143,"user":"50503117e4b0a02f9cffdeb5"},{"problem":143,"code":"(fn cross-prod [v1 v2]\n  (let [[x1 y1 z1] v1\n        [x2 y2 z2] v2]\n    (+ (* x1 x2) (* y1 y2) (* z1 z2))))","user":"52ba2639e4b07a9af57922cb"},{"code":"(fn [x y] (loop[s1 x s2 y res 0] (if (= () s1) res (recur (rest s1)(rest s2)(+ res (* (first s1) (first s2)))))))","problem":143,"user":"51a7f74be4b08d8ec191b802"},{"problem":143,"code":"#(reduce + (apply map (comp (partial apply *) vector) %&))","user":"564b1ff8e4b0284900eef663"},{"problem":143,"code":";(fn [v1 v2]  (apply + (reduce (fn[r x] (conj r (apply * x))) [] (map vector v1 v2))))\n#(reduce  + (map * %1 %2))","user":"5be589f9e4b0ed4b8aab4d13"},{"problem":143,"code":"(fn [a b] (reduce-kv #(+ %1 (* %3 (nth b %2))) 0 a))","user":"5cbdc591e4b026601754ba00"},{"problem":143,"code":"#(reduce + \n         (map (fn [[m n]]\n                (* m n))\n              (partition 2\n                         (interleave %1 %2))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":143,"code":"(fn dot [a b] (reduce + (map #(reduce * %) (map vector a b))))","user":"55f2b42be4b06e875b46ce4a"},{"problem":143,"code":"(fn [a b] (reduce + (map  * a b)))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + (map (fn [n] (* (nth xs n) (nth ys n))) (range (count xs)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn[xs ys] (reduce + (map * xs ys)))","problem":143,"user":"4eeccfc0535d93acb0a668b5"},{"code":"(fn dot-prod\n  [xs ys]\n  (reduce + (map * xs ys)))","problem":143,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":143,"code":";(fn dot-product\n;  [[x & xs] [y & ys]]\n;  (if x\n;    (+ (* x y) (dot-product xs ys))\n;    0))\n\n(fn [v1 v2]\n  (apply + (map * v1 v2)))","user":"550d9452e4b06e50f9beb15d"},{"code":"(fn dot-product [x y]\n    (apply + (map #(* %1 %2) x y))\n)","problem":143,"user":"52763696e4b03e8d9a4a74d7"},{"code":"#(reduce (fn[a b] (+ a b)) (map (fn[a b] (* a b)) %1 %2))","problem":143,"user":"4ee8092f535d93acb0a66875"},{"problem":143,"code":"(fn [as bs]\n  (loop [acc 0\n         [a & more-as :as all] as\n         [b & more-bs] bs]\n    (if all\n      (recur (+ acc (* a b)) more-as more-bs)\n      acc\n    )\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"problem":143,"code":"(fn [left right]\n  (reduce + (map * left right)))","user":"5412ef7ee4b01498b1a719da"},{"problem":143,"code":"(fn solution [A B]\n  (reduce + (map * A B)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn __ [a b]\n  (reduce + (map #(* % %2) a b)))","problem":143,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn dp \n  [x y] (reduce + (map * x y))\n)","problem":143,"user":"4eeb8f68535d93acb0a668a9"},{"code":"#(apply + (for [i (range (count %1))] (* (%1 i) (%2 i))))","problem":143,"user":"4e823ed7535db62dc21a62c7"},{"problem":143,"code":"(fn [a b] (let [number-pairs (map vector a b)\n                products (map #(apply * %) number-pairs)]\n            (reduce + products)))","user":"5d3ae729e4b01671435dbd5d"},{"problem":143,"code":"#(->> % (map * %2) (reduce +))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":143,"code":"(fn [l1 l2] (reduce + (map * l1 l2)))","user":"553ea4e8e4b0a04f792994ee"},{"problem":143,"code":"(fn [xs ys]\n  (reduce #(+ %1 (* (nth xs %2) (nth ys %2))) 0 (range (count xs))))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn [a b]\n  (reduce + 0 (map * a b)))","problem":143,"user":"51df825de4b01188f062752b"},{"code":"(fn dot-product\n  [xs ys]\n  (apply + (map * xs ys)))","problem":143,"user":"511720eae4b0063b4e3e16da"},{"problem":143,"code":"(fn [a b]\n (->> (interleave a b)\n  (partition 2)\n  (map #(* (first %) (last %)))\n  (reduce +)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn dp [v1 v2] \n  (reduce + (map #(reduce * %) (map vector v1 v2))))","problem":143,"user":"51d96ad0e4b02ceefd94774f"},{"problem":143,"code":"(fn [x y]\n ((fn [acc x y]\n    (if (empty? x)\n      acc\n      (recur (+ acc (* (first x) (first y))) (rest x) (rest y))))\n  0 x y))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn [s1 s2]\n  (loop [result 0, v1 s1, v2 s2]\n    (if\n      (empty? v1)\n      result\n      (recur (+ result (* (first v1) (first v2))) (rest v1) (rest v2)))))","problem":143,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [& l] (apply + (apply map * l)))","problem":143,"user":"53712c03e4b0fc7073fd6ea9"},{"code":"#(reduce + (apply map * %&))","problem":143,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":143,"code":"(fn dot [x y]\n  (apply + (map\n    #(* %1 %2)\n    x y)))","user":"5a66f358e4b0512ff01cd9d5"},{"code":"(fn[a b] (reduce + (map * a b)) )","problem":143,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":143,"code":"(fn [a b]\n  \n  (reduce + \n          (map * a b)\n  )\n  \n  )","user":"55897fe2e4b059ccff29b205"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce + 0 (map * s1 s2)))","user":"57f7c74ee4b0d3187e900902"},{"problem":143,"code":"(fn [v w] (apply + (map * v w)))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [s1 s2] (reduce + (map * s1 s2)))","problem":143,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":143,"code":"(fn [s z] (reduce + (map * s z)))","user":"562326cbe4b03f08ee9a9230"},{"problem":143,"code":"(fn [v1 v2] (reduce + ( map * v1 v2)))","user":"53d63e6ce4b0e771c3025454"},{"code":"(fn \n\t[xs ys] (apply + (map #(* % %2) xs ys))\n)","problem":143,"user":"4f047542535dcb61093f6bc7"},{"code":"(fn [A B]\n  (reduce #'+\n          (loop\n            [a A\n             b B\n             tr '()]\n            (if (= nil (first a))\n              tr\n              (recur\n               (rest a)\n               (rest b)\n               (conj tr (* (first a) (first b))))))))","problem":143,"user":"530d85dee4b08068f379eca8"},{"code":"#(loop [v1 % v2 %2 result 0]\n       (if (empty? v1)\n         result\n         (recur (rest v1) (rest v2) (+ result (* (first v1) (first v2))))))","problem":143,"user":"4dbdc898535d020aff1edf4a"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  (if (or (empty? a) (empty? b))\n    0\n    (reduce + (map * a b))))","user":"59e778aae4b0249b72820716"},{"problem":143,"code":"(fn [coll1 coll2] (reduce + (map * coll1 coll2)))","user":"5afa3590e4b0cc2b61a3bcea"},{"code":"(fn foo [acc a b]\n  (if (or (empty? a) (empty? b))\n    acc\n    (let [c (* (first a) (first b))]\n      (foo (+ acc c) (rest a) (rest b)))))\n0","problem":143,"user":"51eec1a6e4b0871fa145d98d"},{"problem":143,"code":"(fn [a b](apply + (map * a b)))","user":"55597b84e4b0deb715856e36"},{"problem":143,"code":"(fn [c1 c2]\n\t(reduce + (map #(* %1 %2) c1 c2)))","user":"56540485e4b0f9d632dd847a"},{"problem":143,"code":"(fn dot [v1 v2]\n  (reduce + (map #(* %1 %2) v1 v2)))","user":"54651faee4b01be26fd746d6"},{"problem":143,"code":"(fn dtp [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         r 0]\n    (if (empty? v1)\n      r\n      (recur (rest v1) (rest v2) (+ r (* (first v1) (first v2)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         res 0]\n    (if (seq v1)\n      (recur (rest v1) (rest v2) (+ res (* (first v1) (first v2))))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":143,"code":"(fn dot-product\n  [xs1 xs2]\n  (->> (interleave xs1 xs2)\n       (partition-all 2)\n       (map #(apply * %))\n       (apply +)))","user":"5f37263de4b0574c87022c4e"},{"problem":143,"code":"#_(fn \n  [first-vector second-vector]\n   (reduce + (map * first-vector second-vector))\n  )\n\n#(reduce + (map * % %2))","user":"5cd16529e4b0ccb0619628e7"},{"problem":143,"code":"(fn f\n  [coll1 coll2]\n  (let [[v1 & vs1] coll1\n        [v2 & vs2] coll2]\n    (if (nil? v1)\n      0\n      (+ (* v1 v2) (f vs1 vs2)))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":143,"code":"(fn [A B] (->> (map * A B) (apply +)))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":143,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 r 0]\n    (if (empty? s1)\n      r\n      (recur (rest s1) (rest s2) (+ r (* (first s1) (first s2)))))))","user":"57462a4de4b009280f9f2b5d"},{"problem":143,"code":"#(apply + (take-nth (inc (count %1)) \n                    (into [] (for [a %1\n                                   b %2]\n                               (* a b)))))","user":"58b80ec1e4b0ebc645576d89"},{"problem":143,"code":"(fn dotp\n  ([a b]   (dotp a b 0))\n  ([a b n] (if (empty? a)\n             n\n             (dotp (rest a) (rest b) (+ n (* (first a) (first b)))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":143,"code":"#(->> (interleave %1 %2)\n           (partition 2)\n           (map (partial apply *))\n           (apply +))","user":"58db362be4b0a4d5acaab675"},{"code":"(fn [xs ys] \n  (reduce + (map #(* %1 %2) xs ys)))","problem":143,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":143,"code":"#(apply + (map (partial apply *) ((comp (partial partition 2) interleave) %1 %2)))","user":"5b6473eee4b0c6492753e73f"},{"problem":143,"code":"(fn [& xs]\n  (apply + (apply (partial map *) xs)))","user":"5492164ee4b0b312c081ff3e"},{"problem":143,"code":"(fn [nums1 nums2] (apply + (map-indexed #(* %2 (nums2 %1)) nums1)))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn [a b] (reduce #(+ %1 %2) 0 (map #(* %1 %2) a b)))","problem":143,"user":"4ef0a39b535dced4c769f20d"},{"problem":143,"code":"#(->> (map * % %2)\n      (apply +))","user":"56a44067e4b0542e1f8d14da"},{"code":"(fn [xs ys]\n  (reduce (fn [acc pair] (+ acc (apply * pair))) \n     0 \n     (partition 2 (interleave xs ys))))","problem":143,"user":"4f0f36a7535d0136e6c22336"},{"code":"(fn [s1 s2]\n  (apply + (map * s1 s2)))","problem":143,"user":"4f03154a535dcb61093f6a58"},{"problem":143,"code":"(fn[x y] \n  (apply + (map * x y)))","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":143,"code":"(fn dot-product [xs ys] \n  (->> (map vector xs ys)\n       (map #(reduce * %))\n       (reduce +)))","user":"52616198e4b03e8d9a4a705e"},{"code":"(fn [v1 v2]\n  (reduce + (map * v1 v2)))","problem":143,"user":"4f29eb2ae4b0d6649770a037"},{"problem":143,"code":"(fn [a b] (reduce + (map-indexed (fn [idx v] (* v (get b idx))) a)))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"#(reduce + ( map * %1 %2 ))","problem":143,"user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [a b]\n  (reduce +\n    (loop [x a y b z []]\n      (if (empty? x)\n        z\n        (recur (rest x) (rest y) (conj z (* (first x) (first y) )))\n      )\n    )\n  )\n)","problem":143,"user":"4eeb2b3c535d93acb0a668a7"},{"problem":143,"code":"(fn [c1 c2] (reduce + (map #(apply * %) (partition-all 2 (interleave c1 c2)))))","user":"55a74d46e4b09e57187da2a3"},{"problem":143,"code":"(fn [as bs]\n  (loop [xs as\n         ys bs\n         result 0]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (rest ys) (+ result (* (first xs) (* (first ys))))))))","user":"5524120fe4b0882d96d091b7"},{"problem":143,"code":"(fn dot-product [a b] (reduce + (map #(* (first %) (second %)) (map vector a b))))","user":"578e535de4b0ebec4cfb7580"},{"code":"#(apply + (map  * %1 %2))","problem":143,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn [v1 v2] \n   (reduce +\n     (map #(reduce * %)\n       (partition 2 \n         (interleave v1 v2)))))","problem":143,"user":"516933ece4b03f62cda68ce4"},{"problem":143,"code":"(fn [a b]\n  (loop [x a y b z []]\n    (if (not (seq x))\n      (reduce + z)\n      (recur (rest x) (rest y) (conj z (* (first x) (first y)))))))","user":"582c526ae4b051871117bf88"},{"problem":143,"code":"(fn [seq1 seq2]\n      (reduce + 0 (map * seq1 seq2)))","user":"58d3d6a3e4b03c36ff7e592b"},{"code":"(fn [s1 s2]\n  (reduce + (map * s1 s2)))","problem":143,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":143,"code":"(fn\n  [x y]  \n  (reduce + (map * y x)))","user":"55db03c6e4b0e31453f64adf"},{"problem":143,"code":"(fn dot-product [lsta lstb]\n  (reduce + (map * lsta lstb)))","user":"57201f14e4b0c5bde472c08e"},{"problem":143,"code":"(fn [xs ys]\n  (let [zipped (map vector xs ys)\n        multiply #(* (first %) (second %))\n        nums (map multiply zipped)]\n    (apply + nums)))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [x y] (loop [acc 0 s1 x s2 y] (if (empty? s1) acc (recur (+ (* (first s1) (first s2)) acc) (next s1) (next s2)))))","problem":143,"user":"52319066e4b0e2e8de81d1e9"},{"problem":143,"code":"(fn [v1 v2] (reduce + (for[x (range (count v1))] (* (nth v2 x) (nth v1 x)))))","user":"59135c11e4b0163c97b36f02"},{"problem":143,"code":"(fn[l1 l2]\n  (apply + (map * l1 l2))\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn [xs ys]\n  (let [n (count xs)]\n  \t(loop [i 0\n    \t   sum 0]\n    \t(if (< i n)\n          (recur (inc i) (+ sum (* (xs i) (ys i))))\n          sum))))","problem":143,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn[a b]\n  (reduce + (map #(* %1 %2) a b)))","problem":143,"user":"52196842e4b0890f2f822bfa"},{"problem":143,"code":"(fn [vec1 vec2] \n  (->> (map vector vec1 vec2)\n \t   (map #(reduce * %))\n       (reduce +)))","user":"56c44c34e4b05cc29241ee96"},{"code":"(fn dot-product [[x1 x2 x3] [y1 y2 y3]]\n    (+ (* x1 y1) (* x2 y2) (* x3 y3)))","problem":143,"user":"4f128865535d64f603146428"},{"code":"(fn [xs ys]\n  (apply +\n    (map * xs ys)))","problem":143,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [s1 s2] (loop [s1 s1 s2 s2 d 0] (if (seq s1) (recur (rest s1) (rest s2) (+ d (* (first s1) (first s2)))) d)))","problem":143,"user":"4efd98fa535de96065cf5086"},{"problem":143,"code":"(fn[x y] (reduce +(map * x y)))","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"problem":143,"code":"(fn [x y]\n  (loop [x x, y y, res 0]\n    (if (seq x)\n      (recur (rest x) (rest y) (+ res (* (first x) (first y))))\n      res)))","user":"5a7ae674e4b03baeef9276d5"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce + 0 (map * s1 s2) ))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":143,"code":"(fn [& args]\n  (reduce + (apply map * args)))","user":"5c664b87e4b0fca0c16226a5"},{"problem":143,"code":"(fn[x y](reduce + (map #(* %1 %2) x y)))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":143,"code":"(fn\n  [v1 v2]\n  (reduce + (map * v1 v2)))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":143,"code":"(fn dot-product\n  [lst1 lst2]\n  (reduce + (map * lst1 lst2)))","user":"57f81569e4b0d3187e900919"},{"problem":143,"code":"(fn [x y]\n  (reduce #(+ %1 (* (first %2) (second %2)))\n          0\n          (map vector x y)))","user":"525cc912e4b0cb4875a45d48"},{"problem":143,"code":"(fn [x y] ((partial reduce +) (map #(* %1 %2) x y)))","user":"5742d82ae4b05c31a32c0881"},{"code":"(fn dot-product[xs1 xs2]\n    (reduce + (map * xs1 xs2)))","problem":143,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn dotp [s1 s2]\n  (reduce + (map #(* (first %) (second %)) (partition 2 (interleave s1 s2))))\n  )","problem":143,"user":"4e9de526535dbda64a6f6b8e"},{"code":"#(reduce + (map (fn [v] (* (first v) (second v))) (map vector %1 %2)))","problem":143,"user":"51f28a64e4b0210f90e7454e"},{"problem":143,"code":"(fn [col1 col2]\n  (apply + (map * col1 col2)))","user":"5243e37ae4b076204b44fae3"},{"problem":143,"code":"(fn [as bs] (->> (map * as bs) (reduce +)))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":143,"code":"(fn dotProduct [c1 c2]\n  (reduce + 0\n    (map * c1 c2)))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":143,"code":"(fn dotp [v1 v2]\n  (reduce + (map * v1 v2)))","user":"575b3e9be4b02ea11479935b"},{"problem":143,"code":"(fn [& x] \n  (->> \n   (apply map * x)\n   (reduce +)))","user":"559067ace4b0277789237670"},{"problem":143,"code":"(fn [coll1 coll2] (apply + (map * coll1 coll2)))","user":"518ba795e4b0f028e99addf0"},{"problem":143,"code":"(fn [v1 v2]\n    (reduce + (map * v1 v2)))","user":"5245e320e4b09dbe66b56177"},{"problem":143,"code":"(fn \n  [u v] (reduce + (map * u v)))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":143,"code":"#(reduce (fn [x y] (+ x y)) ((fn [xs ys] (map (fn [x y] (* x y)) xs ys)) %1 %2))","user":"5485bc1be4b0e286459a11b1"},{"code":"#(->> %&\n  (apply map *)\n  (apply +))","problem":143,"user":"50657775e4b0deb876850599"},{"code":"(fn dot-product [v1 v2]\n  (apply + (map #(* %1 %2) v1 v2)))","problem":143,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn [s1 s2]\n  (->> (map vector s1 s2)\n       (map (partial apply *))\n       (apply +)))","problem":143,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":143,"code":"(fn [arg1 arg2] (reduce #(+ %1 %2) (map #(* %1 %2) arg1 arg2)))","user":"571d9669e4b0145328a7627f"},{"problem":143,"code":"(fn dotp [a b]\n  (apply + (map * a b)))","user":"54b54d1be4b05787c3b1639c"},{"code":"#(letfn [\n        (mnoz [l1 l2 wynik] \n              (if (nil? l1) wynik (recur (next l1) (next l2) (+ wynik (* (first l1) (first l2))))))\n        ]\n  (mnoz %1 %2 0))","problem":143,"user":"53342a1ce4b019098a6f8b8b"},{"problem":143,"code":"(fn [x y] (loop [total 0 v1 x v2 y] (if (= 0 (count v1)) total (recur (+ total (* (first v2) (first v1))) (rest v1) (rest v2)))))","user":"5441f5e8e4b032a45b869375"},{"problem":143,"code":"(fn dot-product [vec-a vec-b]\n  (reduce + (map-indexed\n    (fn [idx item] (* item (vec-b idx))) vec-a)))","user":"5d0859fbe4b0cc9c91588208"},{"problem":143,"code":"#(loop [a % b %2 result 0]\n   (if (< (count a) 1)\n     result\n     (recur (rest a) (rest b) (+ result (* (first a) (first b))))))","user":"5c4c74efe4b0f9f7a8770e76"},{"problem":143,"code":"(fn [l-one l-two]\n  (reduce + (map * l-one l-two)))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":143,"code":"(fn [x y] (reduce #(+ %1 (* (first %2) (last %2))) 0 (partition 2 (interleave x y))))","user":"5292feb4e4b0239c8a67af39"},{"problem":143,"code":"(comp (partial reduce +)(partial map *))","user":"542fa0dde4b0dad94371f2d2"},{"code":"(fn [vec1 vec2]\n  (apply + (map * vec1 vec2)))","problem":143,"user":"51ae350fe4b09397d5109790"},{"code":"(comp #(reduce + %) (partial map *))","problem":143,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn dot-product [ x y] (reduce + (map * x y) ))","problem":143,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":143,"code":"(fn [x y]\n  (let [n (count x)]\n    (loop [k 0\n           dot 0]\n      (if (= k n)\n        dot\n        (recur (inc k) (+ dot (* (get x k) (get y k))))))))","user":"545944a2e4b01be26fd74627"},{"problem":143,"code":"(fn [l r] (reduce + (map * l r)))","user":"5f86a98be4b0649ffcda4caa"},{"problem":143,"code":"(fn dot [x y] \n  (apply +\n         ((fn prod [x y] \n            (if (= (count x) 0) \n              '() \n              (conj (prod (rest x) (rest y)) (* (first x) (first y))))) \n              x y)))","user":"584d99c5e4b0b7285a6f4e42"},{"code":"#(reduce + (map (fn [[x1 x2]] (* x1 x2)) (partition 2 (interleave % %2))))","problem":143,"user":"523b10dfe4b02f719975bdb8"},{"problem":143,"code":"(fn\n [a b]\n (reduce +\n   (for [x (range (count a))]\n        (* (nth a x) (nth b x)))))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn dot-product\n  [v1 v2]\n  (apply + (map * v1 v2)))","problem":143,"user":"525d490ae4b0cb4875a45d70"},{"problem":143,"code":"(fn [f s] (apply +(map * f s)))","user":"5cc7692ce4b0ccb061962837"},{"problem":143,"code":"#( reduce + ( map * %1 %2) )","user":"516d227fe4b06f078fab252d"},{"code":"(fn [seqA seqB]\n  (apply + (map * seqA seqB)))","problem":143,"user":"4f551054e4b0a7574ea717f5"},{"code":"(fn m [a b]\n  (apply + (map * a b)))","problem":143,"user":"52828298e4b0757a1b17145b"},{"problem":143,"code":"(fn [a b] (reduce + (map (fn [x] (* (nth a x) (nth b x))) (range (count a)))))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn dot-product\n  [a b]\n  (if (or (empty? a) (empty? b)) 0\n    (+ (* (first a) (first b)) (dot-product (rest a) (rest b)))))","problem":143,"user":"52084f75e4b01ce6bbf31dde"},{"problem":143,"code":"#(apply +'(map * %1 %2))","user":"580d7de3e4b0849f6811b73d"},{"code":"(fn z [x y] (if (empty? x) 0 (+ (* (first x) (first y)) (z (rest x) (rest y)))))","problem":143,"user":"50ef3e5de4b0a78662fa2652"},{"problem":143,"code":"(fn [coll1 coll2]\n  (loop [c3 []\n         c1 coll1\n         c2 coll2]\n    (if (empty? c1)\n      (reduce + c3)\n      (recur (conj c3 (* (first c1) (first c2)))\n           (drop 1 c1)\n           (drop 1 c2)))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":143,"code":"(fn [arr1 arr2] (reduce + (map #(* %1 %2) arr1 arr2)))","user":"536829c8e4b0243289761e8b"},{"problem":143,"code":"(fn dot-pro\n\t[sq1 sq2]\n\t(apply + (map * sq1 sq2)))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [a b]\n  (reduce\n    (fn [result [e1 e2]]\n        (+ result (* e1 e2)))\n    0 (map vector a b)))","problem":143,"user":"53070615e4b02e821686979e"},{"problem":143,"code":"(fn [a b] \n  (let [len (count a)]\n    (reduce + (for [x (range len)] (* (a x) (b x))))))","user":"53d86564e4b0e771c302546b"},{"problem":143,"code":"(fn [c1 c2]\n   (apply + (map #(* %1 %2) c1 c2)))","user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":143,"code":"(fn sol143\n  [c1 c2]\n  (reduce + (map * c1 c2)))","user":"5e9e642ce4b00a66d4a95174"},{"problem":143,"code":"(fn p143 [list1 list2]\n  (reduce + (map * list1 list2)))","user":"5400e918e4b0de5c41848619"},{"code":"(fn [a b]\n  (reduce +\n    (map (partial apply *)\n      (map vector a b))))","problem":143,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":143,"code":"(fn [xs1 xs2]\n    (apply + (map #(* %1 %2) xs1 xs2)))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn dotprod [a b]  (if (empty? a) 0 (+ (* (first a) (first b)) (dotprod (rest a) (rest b)))))","problem":143,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":143,"code":"(fn [x y]\n  (->> (map vector x y)\n       (map #(reduce * %))\n       (reduce +)))","user":"5b58d012e4b02d533a91bd71"},{"code":"(fn [xs ys] \n  (reduce (fn [acc [x y]]\n            (+ acc (* x y)))\n    0\n    (map vector xs ys)))","problem":143,"user":"4e7f5a0b535db966e863cc41"},{"problem":143,"code":"(fn [& xss] (->> xss (apply map *) (reduce +)))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":143,"code":"(comp (partial apply +)\n      (partial mapv *))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn [v1 v2] \n  (loop [xs v1 ys v2 acc 0]\n  (if (empty? xs) \n    acc\n    (recur (rest xs) (rest ys) (+ acc (* (first xs) (first ys))))\n  )\n  )\n)","problem":143,"user":"51897709e4b0288ada3dbdaa"},{"problem":143,"code":"#(->> (map * %1 %2)\n      (reduce + 0))","user":"51dafedee4b09f6bc204eee2"},{"problem":143,"code":"(fn my-dot [a b] (if (empty? a) 0 (+ (* (first a) (first b)) (my-dot (rest a) (rest b) ))))","user":"56ff7ffee4b08d47c97781be"},{"problem":143,"code":"(fn [s1 s2]\n  \n  (loop [tail1 s1 tail2 s2 products []]\n    \n    (let [head1 (first tail1) head2 (first tail2)]\n      \n      (if (nil? head1)\n        (apply + products)\n        (recur (rest tail1) (rest tail2) (conj products (* head1 head2)))\n        )\n      \n      )\n    \n    )\n  \n  )","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [a b]\n  ((fn dotty [v1 v2 accum]\n    (if (empty? v1)\n      accum\n      (dotty (rest v1) (rest v2) (+ accum (* (first v1) (first v2)))))\n  ) a b 0)\n)","problem":143,"user":"4f16d6ed535d64f60314644f"},{"problem":143,"code":"(fn dotprod [v1 v2] (apply + (map #(apply * %) (map vector v1 v2))))","user":"554bc64ae4b0a04f79299598"},{"problem":143,"code":"(fn dotProduct [lst1 lst2]\n  (apply + (for [x (range 3)]\n           (* (nth lst1 x) (nth lst2 x))))\n)","user":"59e0111ae4b08badc2a0c4e4"},{"problem":143,"code":"(fn [x y]\n    (apply +\n      (map #(* %1 %2) x y)))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":143,"code":"(fn [c1 c2]\n  (apply + (map #(* (first %) (second %)) (partition 2 (interleave c1 c2)))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"(fn [s1 s2]\n   (reduce + (map (partial apply *) (partition 2 (interleave s1 s2)))))","problem":143,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [s1 s2]\n  (reduce + (map #(apply * %) (map vector s1 s2)))\n  )","problem":143,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn [l1 l2] (loop [acc 0 s1 l1 s2 l2] \n                      (if (empty? s1)\n                        acc\n                        (recur (+ acc (* (first s1) (first s2))) (rest s1) (rest s2)))))","problem":143,"user":"50956c2be4b087f34d351ab2"},{"problem":143,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 [1 0 0])) 0\n(and true (= arg2 [1 1 1])) 3\n(and true (= arg2 [4 5 6])) 32\n(and true (= arg2 [100 10 1])) 256\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":143,"code":"(fn [coll-a coll-b]\n  (reduce +\n  \t(map * coll-a coll-b)))","user":"58ebd10de4b056aecfd47d49"},{"problem":143,"code":"(fn [a b]\n(->>\n(interleave a b)\n(partition 2)\n(map #(apply * %))\n(reduce +)\n))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn[lsA lsB] (reduce + (map * lsA lsB)))","problem":143,"user":"5301157ae4b0d8b024fd3717"},{"problem":143,"code":"(fn [c1 c2] (reduce + (map #(* %1 %2) c1 c2 \n )))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn dot-product [a b]\n  (->> (map * a b) (reduce +)))","problem":143,"user":"4feff3b6e4b0678c553fc31e"},{"code":"(fn [a b] \n  (+ \n    (* (first a) (first b)) \n    (* (second a) (second b)) \n    (* (nth a 2) (nth b 2))\n))","problem":143,"user":"4faf6f1ae4b081705acca255"},{"problem":143,"code":"(fn [coll-1 coll-2]\n  (let [size (count coll-1)]\n     (apply +\n            (for [index (range size)]\n              (* (get coll-1 index) (get coll-2 index))))))","user":"510a3cd4e4b06956752d35ad"},{"code":"(fn [lista1 lista2]\n  (reduce +\n        (map * lista1 lista2)))","problem":143,"user":"50576483e4b001218172198b"},{"problem":143,"code":"(fn dot_product [a b]\n  (let [aa (map vector a b)]\n    (reduce + (for [[x y] aa]\n      (* x y)))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn my-dot [s1 s2]\r\n  (loop [result 0\r\n\t\t\ts1p s1\r\n\t\t\ts2p s2]\r\n\t\t(if (empty? s1p)\r\n\t\t\tresult\r\n\t\t\t(recur (+ result (* (first s1p) (first s2p))) (next s1p) (next s2p)))))","problem":143,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn [a b] (->> b count range (map #(* (nth a %) (nth b %))) (reduce +)))","problem":143,"user":"52c1f404e4b07a9af5792370"},{"problem":143,"code":"#(reduce + (map (fn [x y] (* x y)) % %2))","user":"593dfe60e4b069cdc2982bb1"},{"problem":143,"code":"(fn [coll0 coll1]\n  (reduce + 0 (map * coll0 coll1)))","user":"55e206f3e4b050e68259b429"},{"problem":143,"code":"#(apply + (map (partial apply *) (map list %1 %2)))","user":"57642916e4b0994c1922fbee"},{"code":"(fn [v1 v2]\n  (reduce #(+ %1 (apply * %2)) 0 (map list v1 v2)))","problem":143,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":143,"code":"(fn [xs ys](reduce + (map * xs ys)))","user":"5505ceb3e4b086ebe8a79c8b"},{"problem":143,"code":"#(apply + (\n          (fn f [a b r] (if (empty? a) r (f (rest a) (rest b) (conj r (* (first a) (first b))))))\n           %1\n           %2\n           []))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [& vs] (apply + (apply map (cons * vs))))","problem":143,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn [l r] (apply + (map * l r)))","problem":143,"user":"515737f0e4b0b0b4b87062d0"},{"problem":143,"code":"(fn dot [a b]\n  (reduce + (map * a b)))","user":"55d68726e4b0e31453f64a99"},{"problem":143,"code":"#(apply + (map * %1 %2 ) )","user":"5a534241e4b05d388ecb6c0a"},{"problem":143,"code":"(fn dotproduct [s1 s2]\n  (reduce + (map * s1 s2)))","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn dot-product [coll1 coll2]\r\n  (reduce + (map (partial reduce *)\r\n                 (partition 2\r\n                   (interleave\r\n                     coll1\r\n                     coll2)))))","problem":143,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":143,"code":"(fn \n  [a b]\n  (reduce + (map * a b)))","user":"583166c1e4b051871117c025"},{"code":"(fn [a b]\n  (reduce\n    +\n    (map\n      (fn [i]\n        (* (nth a i) (nth b i)))\n        (range 0 (count a)))))","problem":143,"user":"501284d9e4b030d97e4db710"},{"code":"(fn [l r] (apply + (map #(* %1 %2) l r)))","problem":143,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":143,"code":"(fn dotprod\n  [s1 s2]\n  (apply + (map * s1 s2)))","user":"5461dc79e4b01be26fd746a8"},{"problem":143,"code":"(fn [& l] (reduce + (apply map * l)))","user":"4e513fef535dc968683fc4f7"},{"code":"(fn dotprod [a b]\n  (reduce + (map #(* (first %) (second %)) (partition-all 2 (interleave a b)))))","problem":143,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":143,"code":"#_#(apply + (map * %1 %2))\n\n(comp (partial apply +) (partial map *))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn [mat1 mat2]\n\t(->> [mat1 mat2]\n         (apply interleave)\n         (partition 2)\n         (map #(reduce * %1))\n         (reduce +)))","problem":143,"user":"4f80a906e4b033992c121bf7"},{"code":"(fn [xs ys]\n  (reduce \n   #(+ %1 (* (first %2) (second %2))) \n   0 \n   (map vector xs ys)))","problem":143,"user":"4e58ef07535d8a8b8723a299"},{"code":"(comp (partial reduce +)\n      (partial map *))","problem":143,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [a b]\n  (reduce +\n    (->> (interleave a b)\n         (partition 2)\n         (map #(reduce * %)))))","problem":143,"user":"4f85a75ce4b033992c121c48"},{"problem":143,"code":"(fn dot_prod [v1 v2]\n  (if (= (count v1) 0) (do 0)\n  (+ (* (first v1) (first v2)) (dot_prod (rest v1) (rest v2)))))","user":"5f63684be4b02876ed9fd012"},{"code":"#(loop [res 0 xs % ys %2]\n   (if (empty? xs)\n     res\n     (recur (+ res (* (first xs) (first ys))) (rest xs) (rest ys))))","problem":143,"user":"4e71a12c535d5021c1a8964f"},{"problem":143,"code":"(fn [lstA lstB] (reduce + (map * lstA lstB)))","user":"5bbbce0ee4b0a20761a2360d"},{"code":"#(apply +\n    (map * % %2))","problem":143,"user":"4fa5406fe4b081705acca1ac"},{"problem":143,"code":"#((fn[elcol](reduce + (map (fn[sublst](reduce * sublst)) elcol))) (map vector %1 %2))","user":"59692530e4b069c0a1a197e4"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce + (map (fn [[v1 v2]] (* v1 v2)) (partition 2 (interleave s1 s2)))))","user":"53c1ce3ee4b00fb29b221268"},{"problem":143,"code":"#(reduce + (map (fn [a b] (* a b)) %1 %2))","user":"5f468d26e4b0955706451fc1"},{"problem":143,"code":"(fn [a b]\r\n  (let [zip (fn [seq1 seq2] (map list seq1 seq2))]\r\n    (reduce + (map #(apply * %) (zip a b)))))","user":"555bd27ae4b0b056612e2244"},{"code":"(comp (partial apply +) (partial map *))\n;#(apply + (map * %1 %2))","problem":143,"user":"4ff01fa9e4b0678c553fc321"},{"problem":143,"code":"(fn\n  [x y]\n  (reduce + (map * x y))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":143,"code":"(fn dotprod [& seqs] (apply + (map #(apply * %) (partition (count seqs) (apply interleave seqs)))))","user":"561814bae4b06b1bb2182a1a"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce +\n  (#(map (fn [x y] (* x y)) % v1)v2)))","user":"505d1b01e4b0e6aca564be04"},{"problem":143,"code":"(fn [xs ys]\n    (loop [xs xs ys ys acc 0]\n      (if (or (empty? xs) (empty? ys))\n        acc\n        (recur (rest xs) (rest ys) (+ acc (* (first xs) (first ys)))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [a b]\n  (loop [c a, d b, r []]\n    (if (empty? c)\n      (apply + r)\n        (recur\n          (rest c)\n          (rest d)\n          (conj r (* (first c) (first d)))))))","problem":143,"user":"50a83794e4b054305ba5a831"},{"problem":143,"code":"(fn\n  [a b]\n  (reduce + (map (fn [i] (* (get a i) (get b i))) (range 3))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":143,"code":"(fn [a b]\n  (->> (map * a b)\n       (apply +)))","user":"5bab5440e4b0a20761a23475"},{"problem":143,"code":"(fn [x y]\n\t(reduce + (map * x y)))","user":"5592c56ee4b0c79f6e1db934"},{"problem":143,"code":"(fn dot-product143\n  [v1 v2]\n  (if (not= (count v1) (count v2))\n    nil\n    (reduce + (map #(* (first %) (second %))\n                   (partition 2 (interleave v1 v2))))))","user":"5398d042e4b0b51d73faaf00"},{"code":"(fn [seq1 seq2]\n  (reduce + (map (partial apply *) (partition 2 (interleave seq1 seq2)))))","problem":143,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn dot\n  [& colls]\n  (reduce + (apply map * colls)))","problem":143,"user":"510591dde4b06d28cacc92eb"},{"problem":143,"code":"(fn [a b]\n  (apply + (map (fn [f s] (* f s)) a b)))","user":"5964f9b0e4b069c0a1a19778"},{"code":"(fn m [a b]\n  (let [r (next a)]\n    (+ (* (first a) (first b)) (if (nil? r) 0 (m r (rest b))))))","problem":143,"user":"4e8a880b535d65386fec210d"},{"problem":143,"code":"(fn [& xs]\n  (->> (apply interleave xs)\n       (partition 2)\n       (map (partial apply *))\n       (reduce +)))","user":"579fc29fe4b0264b925669ff"},{"problem":143,"code":"(fn skalar [w v] (if (or (empty? w) (empty? v)) 0 (+ (* (first w) (first v)) (skalar (rest w) (rest v)))))","user":"544e1794e4b0e39780006980"},{"problem":143,"code":"(fn [a b] ( reduce + (map * a b      ) ))","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":143,"code":"(fn test [a b] (reduce + (map * a b)))","user":"52c1cc8be4b07a9af579236b"},{"problem":143,"code":"(fn dot [a b]\n  (reduce + (map #(* %1 %2) a b)))","user":"5895477fe4b00487982d527c"},{"problem":143,"code":"(fn [ x y]\n    \n  (reduce + 0 (map #(* %1 %2  ) x y   ) )\n    \n    );END:fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":143,"code":"(fn [& sets]\n  (reduce +\n    (apply map * sets)))","user":"58247423e4b051871117bec5"},{"problem":143,"code":"#(->> %& (apply map *) (apply +))","user":"5f665d45e4b02876ed9fd02f"},{"code":"(fn [[a b c] [d e f]]\n   (+ (* a d) (* b e) (* c f))\n   )","problem":143,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":143,"code":"(fn [v1 v2]\n (reduce + (map * v1 v2)))","user":"534bfc71e4b084c2834f4a88"},{"code":"(fn [xs ys]\n  (apply + (map * xs ys)))","problem":143,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [s1 s2]\n  (apply +\n    (map #(apply * %)\n      (partition 2\n        (interleave s1 s2)))))","problem":143,"user":"4e42f930535dc968683fc49f"},{"problem":143,"code":"#(apply +(map *% %2))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"code":"(fn __ [c1 c2]\n  (reduce + (map * c1 c2)))","problem":143,"user":"52463059e4b09dbe66b56198"},{"problem":143,"code":"(fn peu [x y] (if (empty? x) 0 (+ (* (first x) (first y)) (peu (rest x) (rest y)))))","user":"53fc8424e4b0de5c418485b3"},{"problem":143,"code":"(fn [a b]\n        (reduce + (map * a b)))","user":"546c4377e4b00cfc9eacc177"},{"problem":143,"code":"(fn [c1 c2]\n  (loop [loput (rest c1), loput2 (rest c2), tulos (* (first c1) (first c2))]\n    (if (empty? loput)\n      tulos\n      (recur (rest loput) (rest loput2) (+ tulos (* (first loput) (first loput2)))))))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn [l r]\n  (reduce + (map * l r)))","problem":143,"user":"5027fc0ce4b01614d1633ff2"},{"code":"(fn [l1 l2]\n  (reduce + (map (partial apply *)\n                 (partition 2 (interleave l1 l2)))))","problem":143,"user":"4f04f847535dcb61093f6beb"},{"code":"#(reduce + (map * % %2 ))","problem":143,"user":"523b1a65e4b02f719975bdbd"},{"code":"(fn [s1 s2]\n  (->> (map * s1 s2)\n       (apply +)))","problem":143,"user":"536f871de4b0fc7073fd6e7f"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n          (for [x (range (count a))]\n            (* (get a x) (get b x)))))","user":"52213426e4b0e6a83c8925c4"},{"code":"#(reduce + (map (fn [x y] (* x y)) %1 %2))","problem":143,"user":"51c9fe91e4b09ce160bef5b6"},{"code":"(fn dp [x y]\n  (reduce + (map * x y)))","problem":143,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [s t]\n  (reduce + (map * s t)))","problem":143,"user":"4f569218e4b0a7574ea71826"},{"problem":143,"code":"(fn [inA inB] \n  (loop [a inA b inB out 0]\n    (if (empty? a)\n      out\n      (recur (rest a) (rest b) (+ out (* (first a) (first b)))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":143,"code":"(fn f143 [x y]\n  (reduce + (map #(apply * %)(partition 2 (interleave x y))))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"problem":143,"code":";;(fn [c1 c2]\n;;    (reduce + (map * c1 c2)))\n;;#(apply + (map * % %2))\n(fn [x y] (apply +(map * x y)))","user":"56cba075e4b0ea9b8538f737"},{"code":"(fn b [m mm] (loop [n m nn mm i 0] \n                 (if (empty? n)\n                   i\n                   (recur (next n) (next nn) (+ i (* (first n) (first nn)))))))","problem":143,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn [x y] (reduce + 0 (map #(* %1 %2) x y)))","problem":143,"user":"51e38568e4b0c611d6113e43"},{"code":"(fn [coll1 coll2] (apply + (map #(* (first %) (second %)) (partition-all 2 (interleave coll1 coll2)))))","problem":143,"user":"4fb99483e4b081705acca2da"},{"code":"(fn [c1 c2] (apply + (map #(apply * %) (partition 2 (interleave c1 c2)))))","problem":143,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn [x y] (apply + (map-indexed (fn [i v] (* v (y i)))\n              x)))","problem":143,"user":"521dceeae4b050d5da042802"},{"code":"(fn [as bs] (apply + (map (partial reduce *) (partition 2 (interleave as bs)))))","problem":143,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":143,"code":"(fn [v w] (reduce + (map #(* (v %) (w %)) (range 0 (count v)))))","user":"5d81b40ce4b0915913b1d379"},{"problem":143,"code":"(fn [x y]\n  (loop [result 0 s1 x s2 y]\n    (if (empty? s1)\n      (do result)\n      (do (recur (+ result (* (first s1) (first s2))) (rest s1) (rest s2))))))","user":"571a31e3e4b07c98581c3b47"},{"problem":143,"code":"(fn [coll1 coll2] (reduce + (map #(reduce * %) (partition 2 (interleave coll1 coll2)))))","user":"53f2370ee4b0742d9025b0e7"},{"code":"#(reduce +\n           (map\n            (fn [c] (reduce * c))\n            (partition 2\n                       (interleave %1 %2))))","problem":143,"user":"4ec6357a535d6d7199dd36c5"},{"code":"(fn [x y]\n   (apply + (map * x y)))","problem":143,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn [a b] \n  (+ \n    (* (first a) (first b))\n    (* \n      (first (rest a)) \n      (first (rest b)))\n    (* (last a) (last b))\n  )\n)","problem":143,"user":"4f7d91e6e4b06e829148e1c3"},{"code":"#(loop [x 0 y 0]\n  (if (= y (count %1)) x\n    (recur (+ x (* (nth %1 y) (nth %2 y))) (inc y))))","problem":143,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":143,"code":"(fn dot-prod\n  ([v1 v2]\n   (dot-prod v1 v2 0)\n   )\n  ([[v1-elem & v1-rest] [v2-elem & v2-rest] result]\n   (if (or (empty? v1-rest) (empty? v2-rest))\n     (+ result (* v1-elem v2-elem))\n     (recur v1-rest v2-rest (+ result (* v1-elem v2-elem))))\n))","user":"56f8055ee4b08e7d20b96835"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce +\n          (map\n           (fn [x] (apply * x))\n           (partition 2 (interleave coll1 coll2)))))","user":"54a80855e4b09f271ff37c9e"},{"code":"#(reduce + (map (fn [x] (* (first x) (second x))) (partition 2 (interleave % %2))))","problem":143,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":143,"code":"(fn [s1 s2]\n   (loop [result 0 vec1 s1 vec2 s2]\n     (if (empty? vec1)\n       result\n       (recur (+ result (* (first vec1) (first vec2))) (rest vec1) (rest vec2)))))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  (apply + (map * a b)))","user":"5f3103aee4b0574c87022c24"},{"problem":143,"code":"(fn\n  [lst lst2]\n  (reduce + (map * lst lst2)))","user":"59deba46e4b01968742fed7f"},{"code":"(fn [a b] (reduce + (map (fn[[x y]] (* x y)) (map vector a b))))","problem":143,"user":"5158bba4e4b059418b97f0ab"},{"code":"(fn product\n  ([r l] (product (rest r) (rest l) (* (first r) (first l) )))\n  ([r l sum] (if (> (count r) 0)\n    (+ sum (product (rest r) (rest l) (* (first r) (first l) )))\n    sum\n  )\n))","problem":143,"user":"4dd579b5535dae65d5c462ea"},{"problem":143,"code":"(fn dot1 [v1 v2] \n    (cond \n      (= [] v1) 0    \n      true (+ \n        (* (first v1) (first v2))\n        (dot1 (rest v1) (rest v2))\n      )\n    )\n)","user":"5aba34c5e4b073f1774426a3"},{"problem":143,"code":"(fn l [a b]\n  (reduce + (for [x (range (count a))] (* (nth a x) (nth b x)))))","user":"5e42b688e4b01d43a70e8e6b"},{"code":"(fn [coll1 coll2] (reduce + (map #(* %1 %2) coll1 coll2) )  )","problem":143,"user":"4fcba3f9e4b0ee37620e185b"},{"problem":143,"code":"(fn [x y] (apply + (map (fn [[x y]] (* x y)) (apply map vector [x y]))))","user":"54012b48e4b0de5c41848620"},{"problem":143,"code":"(fn [col1 col2]\n    (reduce +\n            (map *\n                 col1\n                 col2)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":143,"code":"(fn [xs ys]\n   (reduce + (map (comp #(apply * %) vector) xs ys)))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":143,"code":"(fn dot-product [s1 s2] \n(apply + (map #(* %1 %2 ) s1 s2)))","user":"56ede653e4b04a395b9a0449"},{"problem":143,"code":"(fn dot-product [s1 s2]\n  (reduce + (map * s1 s2)))","user":"54c3747de4b045293a27f60e"},{"problem":143,"code":"#( loop [ a %1 b %2 res 0 ] ( if (empty? a) res ( recur (rest a) (rest b) (+ res (* (first a) (first b) ) ) ) )  )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [col1 col2] (apply + (map * col1 col2)))","problem":143,"user":"510967aae4b07c05fdf6dc0f"},{"code":"(fn [coll-1 coll-2]\n  (->> (map * coll-1 coll-2) (apply +)))","problem":143,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":143,"code":"(fn dot-product [a b] (reduce + (map * a b)))","user":"5383668ee4b06839e8705edd"},{"problem":143,"code":"(fn dot-product\n  ( [s1 s2] (dot-product (interleave s1 s2)))\n  ( [s]\n    (if (empty? s) 0\n      (+ (reduce * (take 2 s)) (dot-product (drop 2 s))))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"#(reduce + (map (fn [x1 x2] (* x1 x2)) %1 %2))","problem":143,"user":"4ed98b40535d10e5ff6f5307"},{"problem":143,"code":"(fn dot\n  [a b]\n  (loop[a a\n        b b\n        c 0]\n    (if (empty? a)\n      c\n      (recur (rest a)(rest b)(+ c (* (first a)(first b)))))))","user":"57f814fbe4b0d3187e900911"},{"problem":143,"code":"(fn[seq1 seq2] (reduce + (map * seq1 seq2)))","user":"566efb2be4b0a866af6896e2"},{"code":"(fn [as bs] (apply + (map * as bs)))","problem":143,"user":"532b9075e4b09d4e7a9b5533"},{"problem":143,"code":"(fn [& x] (apply + (apply map * x)))","user":"553e0b70e4b0a04f792994e8"},{"problem":143,"code":"(fn [xs ys]\n  (loop [[x & xs] xs\n         [y & ys] ys\n         r 0]\n    (if (or (nil? x) (nil? y))\n      r\n      (recur xs ys (+ r (* x y))))))","user":"58bb218be4b0888cdc949cf4"},{"problem":143,"code":"#(reduce (fn [acc x] (+ acc (* (first x) (second x)))) 0 (map vector %1 %2))","user":"552b6ddbe4b0ffed3738f965"},{"problem":143,"code":"(fn dot- [a b]\n  (if (or (empty? a) (empty? b))\n    0\n    (+ (* (first a) (first b)) (dot- (rest a) (rest b)))))","user":"55058a4fe4b086ebe8a79c89"},{"code":"(fn dotp [a b]\n    (reduce + 0 (map #(* %1 %2) a b)))","problem":143,"user":"4ff4c9dae4b0678c553fc360"},{"problem":143,"code":"(fn rot\n  [llist1 llist2]\n  (if-not (or (empty? llist1) (empty? llist2))\n    (+ (* (first llist1) (first llist2)) (rot (drop 1 llist1) (drop 1 llist2)))\n    0))","user":"595bc925e4b066ee0a44afe2"},{"problem":143,"code":"(fn [[x1 x2 x3] [y1 y2 y3]] (+ (* x1 y1) (* x2 y2) (* x3 y3)))","user":"571346c0e4b07c98581c3a9b"},{"problem":143,"code":"(fn dotproduct [s1 s2]\n  (apply + (map * s1 s2)))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [m1 m2]\n  (apply + (map * m1 m2)))","problem":143,"user":"52a55adee4b0c58976d9abe7"},{"problem":143,"code":"#(reduce + (map (fn [a b ] (* a b)) % %2))","user":"57131dfbe4b07c98581c3a98"},{"problem":143,"code":"#(apply + (for [x (range (count %1))] (* (nth %1 x) (nth %2 x))))","user":"53968a70e4b0b51d73faaee0"},{"problem":143,"code":"(fn no143 [x y]\n  (reduce + (map * x y)))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (cond (and (not (empty? v1)) (not (empty? v2)))\n        (let [[x & xs] v1\n              [y & ys] v2]\n          (+ (* x y) (dot-product xs ys)))\n        :else 0))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn dp [l r]\n  (reduce + (map * l r)))","problem":143,"user":"4ee868be535d93acb0a6687d"},{"problem":143,"code":"(fn [list1 list2]\n  (reduce + (map * list1 list2))\n  )","user":"5ae71f14e4b0837691e92ca7"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (map #(* (first %) (second %)) (partition 2 (interleave v1 v2)))))","user":"5a99b863e4b0d174b936c7ae"},{"code":"(fn [v1 v2]\n    (apply + (map #(* %1 %2) v1 v2)))","problem":143,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [one two] (loop [x one\n                     y two\n                     p []]\n                (if (and (empty? x) (empty? y))\n                  (apply + p)\n                  (recur (rest x) (rest y) (conj p (* (first x) (first y)))))))","problem":143,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"(fn f [c1 c2]\n  (reduce + (map * c1 c2)))","problem":143,"user":"50436470e4b034ff00315d23"},{"problem":143,"code":"(fn [v1 v2]\n   (reduce + (map #(* %1 %2) v1 v2)))","user":"56f4cedce4b046a417f92063"},{"code":"(fn [a b]\n  (reduce +\n    (map #(apply * %1) \n      (partition 2 (interleave a b)))))","problem":143,"user":"4fa67030e4b081705acca1b7"},{"problem":143,"code":"(fn [v w]\n  (apply + (map * v w)))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":143,"code":"(fn [xs ys]\n   (loop [akk 0\n          xs xs\n          ys ys]\n     (if (seq xs)\n       (let [[x & xrest] xs\n             [y & yrest] ys]\n         (recur (+ akk (* x y))\n                xrest\n                yrest))\n       akk)))","user":"5591b61ee4b0604b3f94d580"},{"problem":143,"code":"(fn dot-prod[s1 s2]\n  (reduce (fn[res x]\n            (+ res (* (get s1 x) (get s2 x)))) 0 (range 0 (count s1))))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":143,"code":"(fn dot [xs ys]\n  (apply + (map (fn [x y] (* x y)) xs ys)))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn [xs ys]\n  (apply + (map #(* (% 0) (% 1)) (map vector xs ys))))","problem":143,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn [a b]\n  (reduce + (map #(* %1 %2) a b)))","problem":143,"user":"4f12ab23535d64f603146429"},{"problem":143,"code":"(fn [ax bx]\n  (reduce + (map * ax bx)))","user":"5c62979fe4b0fca0c162264c"},{"problem":143,"code":"#(->> (apply map * %&)\n      (reduce +))","user":"59ef6cfae4b0966464fe6a32"},{"problem":143,"code":"(fn [x y]\n  (reduce +\n  (loop [rst [] a x b y]\n    (if (or (= 0 (count a)) (= 0 (count b))) rst\n      (recur (conj rst (* (first a) (first b))) (rest a) (rest b))))))","user":"54381729e4b032a45b869310"},{"code":"#(loop [in1 %1 in2 %2 sum 0]\n  (if (empty? in1)\n    (int sum)\n    (recur (rest in1) (rest in2) (+ sum (* (first in1) (first in2))))))","problem":143,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":143,"code":"(fn [coll1 coll2]\n  (loop [[elem1 & coll1] coll1 [elem2 & coll2] coll2 prod 0]\n    (if (nil? elem1)\n      prod\n      (recur coll1 coll2 (+ prod (* elem1 elem2)))\n   )\n )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":143,"code":"(fn [x y]\n  (reduce + (for [i (range (count x))]\n              (* (nth x i) (nth y i)))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":143,"code":"#(reduce (fn [p xy] (+ p (apply * xy))) 0 (map vector %1 %2))","user":"55c20bd0e4b0e31453f64972"},{"problem":143,"code":"(fn [v1 v2]\n  (apply +\n    (map (partial * 1) v1 v2)))","user":"51427a8be4b0b50abeb46b37"},{"code":"(fn [xs ys]\r\n    (loop [xs xs ys ys res 0]\r\n      (if (and xs ys)\r\n        (recur (next xs) (next ys) (+ res (* (first xs) (first ys))))\r\n        res)))","problem":143,"user":"4f1fd734535d64f6031464a5"},{"problem":143,"code":"(fn [a b]\n\t\t(->>\n\t\t\t(map * a b)\n\t\t\t(reduce +)\n\t\t)\n\t)","user":"5bbbd484e4b0a20761a23617"},{"problem":143,"code":"(fn [a b] (reduce + (map (partial apply *) (partition 2 (interleave a b)))))","user":"5ab564f8e4b073f177442639"},{"code":"(fn [x1 x2]\n  (reduce #(+ %1 (apply * %2)) 0 (partition 2 (interleave x1 x2))))","problem":143,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":143,"code":"(fn [x y]\n  (loop [x x\n         y y\n         acc 0]\n    (if (or (= 0 (count x)) (= 0 (count y)))\n      acc\n      (recur (rest x) (rest y) (+ acc (* (first x) (first y)))))))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"problem":143,"code":"(fn [c1 c2]\n  (reduce #(+ %1 (reduce * %2)) 0 (map #(vector %1 %2) c1 c2)))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce \n   + \n   (map\n    (fn [v]\n      (* (first v) (second v))\n      )\n    (map vector s1 s2)\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":143,"code":"(fn [lst1 lst2](reduce + (map * lst1 lst2)))","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn dotprod [xs ys]\n  (reduce + 0 (map (fn [x y] (* x y)) xs ys)))","problem":143,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn dp [a b]\n  (if (first a)\n    (+ (* (first a) (first b)) (dp (rest a) (rest b)))\n    0\n    )\n  )","problem":143,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":143,"code":"(fn prod [seq1 seq2]\n  (reduce + (map * seq1 seq2))\n  )","user":"5e0d948fe4b099d064962f98"},{"problem":143,"code":"(fn [x y]\n\t(apply + (map #(* %1 %2) x y)))","user":"5ebff55de4b00a66d4a95286"},{"problem":143,"code":"(fn\n  [& ls]\n  (reduce + (apply map * ls)))","user":"542d2385e4b0dad94371f2b2"},{"code":"(fn [s1 s2] (reduce + 0 (map * s1 s2)))","problem":143,"user":"4f13047d535d64f60314642c"},{"problem":143,"code":"(fn [a b]\n  (loop [acc 0\n        xs a\n        ys b]\n  (if (empty? xs) acc\n    (recur (+ acc \n              (* (first xs)\n                 (first ys)))\n           (rest xs)\n           (rest ys)))))","user":"56fee4c0e4b08d47c97781b5"},{"code":"(fn [a b]\n  (reduce #(+ %1 (* (first %2) (second %2))) 0 (partition 2 (interleave a b))))","problem":143,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn [a b]\n  (loop [t 0\n         [x & xs] a\n         [y & ys] b]\n    (if (nil? x)\n      t\n      (recur (+ t (* x y)) xs ys))))","problem":143,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [v1 v2]\n  (loop [x v1 y v2 acc 0]\n    (if \n      (empty? x)\n      acc\n      (recur \n       (rest x) \n       (rest y) \n       (+ acc (* (first x) (first y)))))))","problem":143,"user":"4e920f44535dbda64a6f6afd"},{"problem":143,"code":"(fn [vec-1 vec-2] (reduce + (map * vec-1 vec-2)))","user":"5ca1c45ae4b048ec896c5b85"},{"code":"(fn [s1 s2] \n  (reduce + (map * s1 s2)))","problem":143,"user":"512eb1e7e4b0b740abc5982a"},{"code":"(fn [left right]\n        (loop [res 0 l left r right]\n            (if (empty? l)\n                res\n                (recur (+ res (* (first l) (first r))) (rest l) (rest r))\n            )\n        )\n    )","problem":143,"user":"52573608e4b0cb4875a45c76"},{"problem":143,"code":"(fn\n  [x y]\n  (reduce + (map * x y)))","user":"5e1c24f4e4b0dc959400852d"},{"problem":143,"code":"(fn [a b] (loop [answer 0 left a right b ]\n                   (if (empty? left)\n                     answer\n                     (recur (+ answer (* (first left) (first right))) (drop 1 left) (drop 1 right))\n                     )\n))","user":"542baf7ce4b0dad94371f291"},{"code":"(fn dot-prod [xs ys]\n  (reduce + (map * xs ys)))","problem":143,"user":"50763574e4b0a894bb95bf3d"},{"problem":143,"code":"(fn [col1 col2]\n   (apply + (loop [i 0\n                   arr []]\n              (let [a1 (get col1 i)\n                    b1 (get col2 i)\n                    _ (println \"i\" i \"arr:\" arr)\n                    _ (println \"a1\" a1 \"b1:\" b1)]\n               (if (> i (- (count col1) 1))\n                 arr\n                 (recur (inc i) (conj arr (* a1 b1))))))))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn[a b] (reduce #(+ % (apply * %2)) 0 (partition 2 (interleave a b))))","problem":143,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn [a b]\n  (reduce +\n    (map #(* %1 %2) a b)))","problem":143,"user":"5014754de4b094324338f8e5"},{"problem":143,"code":"(fn [& matrix]\n  {:pre [(apply == (map count matrix))]}\n  (apply + (apply map * matrix)))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":143,"code":"#( apply + (map * %1 %2) )","user":"57487084e4b009280f9f2b8c"},{"problem":143,"code":"(fn [x y] (reduce (fn [acc next] (+ acc (* (first next) (second next)))) 0 (partition 2 (interleave x y))))","user":"5589e88ae4b0277789237610"},{"problem":143,"code":"(fn [s t] (apply + (map * s t)))","user":"5ecc0831e4b016b56eae058c"},{"problem":143,"code":"(fn dot-product\n  [lst1\n   lst2]\n  (reduce + (map * lst1 lst2)))","user":"59e12c94e4b08badc2a0c509"},{"problem":143,"code":"(fn dotProd\n  [m n]\n  (loop [m (seq m)\n         n (seq n)\n         total (count m)\n         i 0\n         resul()]\n    (if (= total i)\n      (loop [sum resul\n             r 0]\n        (if (empty? sum)\n          r\n          (recur (rest sum) (+ r (first sum)))\n          )\n        )\n      (recur m n total (inc i) (conj resul (* (nth m i) (nth n i))))\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"problem":143,"code":"(fn dotProduct [a b] (reduce + (map #(* %1 %2) a b)))","user":"5f6adf5ee4b02876ed9fd049"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + \n          (map #(let [[k v] %] (* k v))\n               (map vector xs ys))))","user":"4daeff24edd6309eace4d16e"},{"problem":143,"code":"(fn [a b] (apply + (map #(apply * %) (map vector a b))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":143,"code":"(fn [l i] (apply + (map * l i)))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":143,"code":"(fn dot [v1 v2]\n  (apply + (map (fn [i1 i2] (* i1 i2)) v1 v2)))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":143,"code":"(fn dot-prod [x y]\n  (->> (interleave x y)\n       (partition 2)\n       (map (partial apply *))\n       (reduce + 0)))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn [s1 s2]\n     (reduce + (map (fn [a b] (* a b)) s1 s2))\n     )","problem":143,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [x y]\n     (reduce #(+ % (* (first %2) (last %2))) 0 (partition 2 (interleave x y ))))","problem":143,"user":"51e28063e4b08e53a149f0f2"},{"problem":143,"code":"(fn [x y] (apply + (map #(apply * %) (partition 2 (interleave x y)))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":143,"code":"(fn dp\n  ([x y]\n  (dp x y 0))\n  ([x y a]\n   (if (or (empty? x) (empty? y))\n     a\n     (recur (rest x) (rest y) (+ a (* (first x) (first y)))))))","user":"5ac741d6e4b0e27600da777d"},{"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 result 0]\n    (if-not (and (seq coll1) (seq coll2))\n      result\n      (recur (rest coll1) (rest coll2) (+ result (* (first coll1) (first coll2))))\n      )))","problem":143,"user":"52fcfeeee4b047fd55837027"},{"code":"(partial \n #(if (empty? %2) %1 \n    (recur (+ (* (first %2) (first %3)) %1) (rest %2) (rest %3)))0)","problem":143,"user":"5273e006e4b03e8d9a4a7495"},{"problem":143,"code":"(fn dot-prod\n  [a b]\n  (reduce + (map #(* %1 %2) a b)))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [v1 v2]\n     (let [zm (map vector v1 v2)]\n           (reduce (fn [a pair] (+ a (apply * pair))) 0 zm)))","problem":143,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn [x y]\n  (let [z (partition 2 (interleave x y))]\n    (reduce + (map #(reduce * %) z))))","problem":143,"user":"52474133e4b05ef8e38e635e"},{"code":"(fn [x y]\n  (loop [acc 0\n         rx x\n         ry y]\n    (if (empty? rx)\n      acc\n      (recur (+ acc (* (first rx) (first ry))) (rest rx) (rest ry)))))","problem":143,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":143,"code":"(fn [a b]\n  (loop [x a y b z 0]\n    (cond\n     (empty? x) z\n     (empty? y) z\n     :else (recur (rest x) (rest y) (+ z (* (first x) (first y)))))))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"(fn ! [x y]\n  (if (empty? x) 0\n    (+ (* (first x) (first y)) (! (rest x) (rest y)))))","problem":143,"user":"52faec2ee4b047fd55837004"},{"code":"(fn [v-one v-two]\n  (reduce \n   +\n   (for [n (range (count v-one))]\n     (* (v-one n) (v-two n)))))","problem":143,"user":"51fbd9ece4b0f1313d468a13"},{"problem":143,"code":"#(reduce + (for [i (range (count %1))\n                 :let [a (get %1 i)\n                       b (get %2 i)]] (* a b)))","user":"590253e3e4b0438e51c2d055"},{"code":"(fn [c1 c2] (reduce + (map * c1 c2)))","problem":143,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [x y]\n  (loop [tail-x x tail-y y acc 0]\n  \t(if (empty? tail-x)\n  \t\tacc\n    \t(recur (rest tail-x) (rest tail-y) (+ (* (first tail-x) (first tail-y)) acc))\n    )))","problem":143,"user":"532db3e7e4b019098a6f8b3d"},{"code":"(fn [x y]\n  (let [total (count x)]\n    (loop [n  1\n           re []\n           x1 x\n           y1 y]\n      (if (> n total)\n        (apply + re)\n        (recur (inc n) (into re (vector (* (first x1) (first y1)))) (rest x1) (rest y1) )))))","problem":143,"user":"531016d0e4b08068f379ecd1"},{"code":"#(loop [col1 %1 col2 %2 result 0]\n   (if (empty? col1) result\n     (recur (rest col1) (rest col2) (+ result (* (first col1) (first col2)))))\n   )","problem":143,"user":"510d3dc6e4b078ea71921132"},{"problem":143,"code":"#(->> (map * %1 %2)\n  (reduce +))","user":"53c38b8ce4b00fb29b22127b"},{"problem":143,"code":"#(loop [s1 %1 s2 %2 r 0]\n   (if (empty? s1) r (recur (rest s1) (rest s2) (+ r (* (first s1) (first s2))))))","user":"592bb806e4b072a2710fcf46"},{"problem":143,"code":"#(loop [i 0 product 0]\n       (if (= i (count %1))\n           product\n           (recur (inc i) (+ product (* (nth %1 i) (nth %2 i))))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":143,"code":"(fn\n  [first-vec second-vec]\n  (apply +\n         (map\n          (fn [current-pair] (* (first current-pair) (last current-pair)))\n          (partition 2 (interleave first-vec second-vec)))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":143,"code":"(fn [[v1x v1y v1z] [v2x v2y v2z]]\n  (+ (* v1x v2x)\n     (* v1y v2y)\n     (* v1z v2z)))","user":"587f8393e4b0f1effa3b75f2"},{"problem":143,"code":"(fn [a b] (reduce + (map #(* (get a %) (get b %)) (range 0 (count a)))))","user":"592334c7e4b0a390037439ee"},{"code":"(fn [& vecs]\n  (apply + (apply map * vecs)))","problem":143,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn [v1 v2]\n  (reduce + (for [x (range(count v1))] (* (nth v1 x)(nth v2 x)))))","problem":143,"user":"504e12ade4b078edc5f593b7"},{"problem":143,"code":";;(fn [seq1 seq2]\n;;\t(reduce +\n;;    (map * seq1 seq2)\n;;  )\n;;)\n\n\n#(reduce + (map * %1 %2))","user":"5595c60ee4b0c79f6e1db96f"},{"problem":143,"code":"(fn d [s v1 v2]\n  (if (empty? v1)\n    s\n    (d \n      (+ s \n         (* \n          (first v1) \n          (first v2)\n         )\n      )\n      (rest v1)\n      (rest v2)\n    ) \n )\n) 0","user":"55f6c0e2e4b06e875b46ce99"},{"problem":143,"code":"(fn [ [a b c] [x y z] ]\n  (+\n    (* a x)\n    (* b y)\n    (* c z)\n   )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":143,"code":"(fn dot-product1\n  [xs ys]\n  (apply + (map * xs ys)))","user":"557e9d17e4b05c286339e0d8"},{"problem":143,"code":"(fn dot-product [x y]\n  (->>\n    (map (fn [u] (* (nth x u) (nth y u)))\n         (range (count x)))\n       (reduce +)))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":143,"code":"(fn [set1 set2]\n   (reduce + (map #(* %1 %2) set1 set2))\n )","user":"556f2009e4b09a3098a52519"},{"code":"(fn [& colls]\n  (reduce + (apply map * colls)))","problem":143,"user":"4f92884de4b0dcca54ed6caf"},{"problem":143,"code":"(fn dot-product\n   [s1, s2]\n   (apply + (map * s1 s2))\n   )","user":"545e9cf1e4b01be26fd7467f"},{"problem":143,"code":"(fn dot-product[a b]\n      (reduce + (map (fn  [a]\n                       (reduce * a)) (partition 2 (interleave a b)))))","user":"57fc08d8e4b0d3187e900988"},{"problem":143,"code":"(comp #(apply + %) #(mapv * %1 %2))","user":"573ce277e4b05c31a32c080b"},{"code":"#( apply + (map * % %2))","problem":143,"user":"533aac38e4b0e30313ee6cbe"},{"problem":143,"code":";; Clojure DOCS\n;; In this example, 'f' = 'map', 'args' = 'vector', and argseq = '[:a :b] [:c :d]',\n;; making the above code equivalent to\n;; (map vector [:a :b] [:c :d])\n;;=> ([:a :c] [:b :d]) ;Same answer as above\n\n;; It might help to think of 'map' and 'vector' as \"slipping inside\" the argument\n;; list ( '[[:a :b] [:c :d]]' ) to give '[map vector [:a :b] [:c :d]]' , which \n;; then becomes the executable form '(map vector [:a :b] [:c :d])' .\n\n;; Alternative solution\n;; (fn [& vectors] (reduce + 0 (apply map * vectors)))\n\n(fn [x y] (reduce + (map #(reduce * %) (map vector x y))))","user":"5ccb3792e4b0ccb061962882"},{"problem":143,"code":"(fn [l1 l2 ] (reduce + (map #(* %1 %2) l1 l2 )))","user":"5ab23a78e4b073f1774425e1"},{"code":"(fn [coll-a coll-b]\n\t(reduce + (map * coll-a coll-b)))","problem":143,"user":"514d7e29e4b019235f6c0587"},{"problem":143,"code":"(fn [c1 c2]\n    (reduce + (map * c1 c2)) )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":143,"code":"(fn\n  [a b]\n  (loop [total 0\n        a a\n        b b]\n    (if (= (count a) 0)\n      total\n      (recur (+ total (* (first a) (first b))) (rest a) (rest b)))))","user":"53ac4719e4b047364c04445c"},{"problem":143,"code":"(fn dot-prod\n  [x y]\n  (reduce + (map * x y)))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"(fn [l m] (apply + (map * l m)))","problem":143,"user":"50e135f4e4b084616e11c667"},{"code":"(fn d[s1 s2]\n  (if (empty? s1)\n  0\n  (+ (* (first s1) (first s2)) (d (rest s1) (rest s2)))\n  ))","problem":143,"user":"513f53c6e4b051389b345b40"},{"code":"(fn [seq1 seq2] (apply + (map * seq1 seq2)))","problem":143,"user":"52f10094e4b05e3f0be25ee8"},{"problem":143,"code":"(fn\n  [a b]\n  \t(reduce + (map * a b)))","user":"5843b231e4b089d5ab817e3d"},{"problem":143,"code":"(fn dot [coll1 coll2]\n  (reduce + (map * coll1 coll2)))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":143,"code":"(letfn [(f [[x & xs :as xss] [y & ys :as yss]]\n           (if (seq xss)\n             (+ (* x y) (f xs ys))\n             0))]\n  f)","user":"540470dae4b0addc1aec6658"},{"problem":143,"code":"(fn [a b]\n  (let [count (count a)]\n    (loop [idx 0\n           acc 0]\n      (if (= idx count)\n        acc\n        (recur (inc idx) \n               (+ acc (* (get a idx)\n                         (get b idx))))))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":143,"code":"(fn my-dot-product [v1 v2]\n  (reduce + (mapv * v1 v2)))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn dot [& matrix] (apply + (apply map * matrix)))","problem":143,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [a b]\n  (apply\n    +\n    (map * a b)))","problem":143,"user":"5201ada5e4b0b2e020a18f14"},{"problem":143,"code":"(fn [A B]\n  (apply + (map * A B)))","user":"589f37e0e4b02bd94d917e79"},{"problem":143,"code":"(fn [x y]\n  (loop [v x\n         w y\n         p 0]\n    (if (empty? v) p\n      (recur (rest v) (rest w) (+ (* (first v) (first w)) p)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [a b]\n  (reduce (fn [accu value] (+ accu value)) 0 (map (fn [a b] (* a b)) a b)))","problem":143,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn [xs ys]\n    (reduce + (map * xs ys)))","problem":143,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn dotProduct[v1 v2]\n  (reduce + (map #(* (nth v1 %) (nth v2 %)) (range 0 (count v1))))\n)","problem":143,"user":"52d42021e4b09f7907dd132a"},{"problem":143,"code":"(fn f143 [coll-1 coll-2]\n  (->> (mapv #(* %1 %2) coll-1 coll-2)\n       (reduce +)))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"(fn [& xs] (reduce + (apply map * xs)))","problem":143,"user":"52487654e4b05ef8e38e63dc"},{"problem":143,"code":"(fn [ seq1 seq2 ] (reduce + (map * seq1 seq2)))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn [xs ys]\n  (apply + (for [i (range (min (count xs) (count ys)))] (* (nth xs i) (nth ys i)) )))","problem":143,"user":"5272669de4b03e8d9a4a742e"},{"code":"#(reduce\n  (fn [acc [a b]] (+ acc (* a b)))\n  0 (map vector % %2))","problem":143,"user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [x y] (reduce + (map (fn [a b] (* a b)) x y)))","problem":143,"user":"4ea09441535d7eef308072a7"},{"code":"(fn [x y]\n  (loop [x x\n         y y\n         result 0]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (+ result (* (first x) (first y)))))))","problem":143,"user":"538d464ee4b0b51d73faae69"},{"problem":143,"code":"(fn [& vecs]\n  (->> vecs\n       (apply (partial map *))\n       (reduce +)))","user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn [a b] (reduce + (for [[x y] (map list a b)\n                          :let [p (* x y)]]\n                      p)))","problem":143,"user":"536673a8e4b0243289761e76"},{"code":"(fn dot-product [c1 c2]\n    (reduce + (map * c1 c2)))","problem":143,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [col1 col2]\n (apply + (map * col1 col2) ) \n  \n)","problem":143,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":143,"code":"#(reduce \n  (fn [a b] \n    (+ a (* (first b) \n            (last b)))) \n  0 \n  (apply map vector [%1 %2]))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":143,"code":"(fn dot-product' [s1 s2]\n  (->>\n    s2\n    (map * s1)\n    (reduce +)))","user":"5d0eed51e4b0cc9c91588262"},{"code":"(fn [x y] (reduce + 0 (for [a (range (count x))] (* (nth x a) (nth y a)))))","problem":143,"user":"53874820e4b06839e8705f1b"},{"problem":143,"code":"#(reduce (fn [a b] (+ a (* (first b) (nth b 1) ))) 0 (partition 2 (interleave %1 %2)))","user":"59a0262ee4b0871e7608b82d"},{"problem":143,"code":"#(apply + (map (fn [v] (apply * v)) (partition 2 (interleave % %2))))","user":"5c20b6abe4b07e362c230576"},{"problem":143,"code":"(fn [a b]\n  (->> (interleave a b) (partition 2) (map #(apply * %)) (reduce +)))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn dotp [a b]\n  (reduce + \n    (map (partial apply *) \n      (partition 2 (interleave a b)))))","problem":143,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":143,"code":"(fn dot-product [as bs]\n  (->> (map * as bs)\n       (reduce +)))","user":"543c39e0e4b032a45b86933d"},{"problem":143,"code":"(fn[a b](reduce +(mapv * a b)))","user":"56039843e4b04bb52996e1be"},{"problem":143,"code":"(fn [s1 s2]\n  (->> (map * s1 s2)\n       (reduce +)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":143,"code":"(fn dp [x y](reduce + (map #(* %1 %2) x y)))","user":"57752a2de4b0979f89651613"},{"problem":143,"code":"(fn [xs ys]\n    (apply + (map * xs ys)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn dot-product [s1 s2]\n  (reduce + (map #(* %1 %2) s1 s2)))","problem":143,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(\n  fn pro [ a b ](\n    if( zero? ( count a ) ) \n      0\n      ( + ( * (first a ) (first b ) )  (pro (rest a ) (rest b )))\n    \n  )\n)","problem":143,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":143,"code":"(fn dot-prod\n  [v1 v2]\n  (apply + (map * v1 v2)))","user":"563f1493e4b08d4f616f5ecf"},{"code":"#(->> (interleave % %2) (partition 2) (map (partial apply *)) (reduce +))","problem":143,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":143,"code":"(fn [a b]\n    (reduce + (map #(* %1 %2 ) a b)))","user":"554a75c9e4b0a04f79299575"},{"problem":143,"code":"(fn [as bs]\n  (loop [prods []\n         as as\n         bs bs]\n    (if (empty? as)\n      (reduce + prods)\n      (recur (conj prods (* (first as) (first bs)))\n             (rest as)\n             (rest bs)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n   (map #(* %1 %2) a b)))","user":"4df1e213535d08e6dec9fe20"},{"code":"(fn [a b] (\n  reduce + (map #(* % %2) a b)\n))","problem":143,"user":"4ef48422535dced4c769f236"},{"code":"(fn dot [seq1 seq2]\n  (reduce + (map #(* %1 %2) seq1 seq2)))","problem":143,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":143,"code":"#(apply +\n        (for [i (range (count %))]\n          (* (nth %1 i) (nth %2 i))))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn [a,b] ( reduce + (map #( * (first %) (second %) ) (partition 2 (interleave a b)))))","problem":143,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":143,"code":"(fn [x y]\n  {:pre [(= (count x) (count y))]}\n  (reduce + (map * x y)))","user":"5785de4ce4b0ebec4cfb74e6"},{"code":"(fn [a b]\n       (reduce + (map * a b)))","problem":143,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":143,"code":"(fn dot-product [vec1 vec2]\n  (let [vynasob (fn [x] (* (first x) (second x)))]\n    (reduce + (map vynasob (map vector vec1 vec2)))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":143,"code":"(fn [c1 c2]\n  (reduce +\n          (map * c1 c2)))","user":"554bd33ce4b0a04f7929959a"},{"problem":143,"code":"#(reduce +  (map (fn [x y] (* x y)) %1 %2))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [v1 v2]\n  (loop [i (dec (count v1)) \n         result 0]\n    (if (= i -1) result\n      (recur (dec i) (+ result (* (get v1 i) (get v2 i)))))))","problem":143,"user":"523bc0e6e4b07becd5be21f9"},{"problem":143,"code":"#(loop [sum 0\n                i 0\n                size (count %1)]\n           (if (= i size)\n             sum\n             (recur (+ sum (* (nth %1 i) (nth %2 i))) (inc i) size)))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (for [i (range (count v1))] (* (nth v1 i) (nth v2 i)))))","user":"558bb38fe4b0277789237631"},{"code":"(fn [v1 v2] (reduce + (map (fn [a b] (* a b)) v1 v2)))","problem":143,"user":"4e2164ff535d04ed9115e815"},{"problem":143,"code":"#(apply + (for [idx (range (count %1))] (* (%1 idx) (%2 idx))))","user":"5956c6dae4b066ee0a44af61"},{"problem":143,"code":"(fn [a b]\n  (reduce + (for [i (range (count a))]\n    (* (a i) (b i)))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn dot-product\n  [v1 v2]\n  (reduce + (map #(* % %2) v1 v2)))","problem":143,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [m1 m2]\n    (apply + (map (partial apply *) (map vector m1 m2))))","problem":143,"user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn f [x y] (\n  if (= 0 (count x))\n0\n  (+ (* (first x) (first y)) (f (rest x) (rest y)))\n  \n  ))","problem":143,"user":"506b437de4b0eda3100c0906"},{"problem":143,"code":"(fn f [l r]\n  (reduce #(+ %1 %2) 0 (map #(* %1 %2) l r)))","user":"5933b736e4b072a2710fd05d"},{"problem":143,"code":"(fn [f s] (reduce + (map * f s)))","user":"52c49401e4b0c2d177d620de"},{"problem":143,"code":"(fn aaa\n  [c1 c2]\n  (reduce + (map * c1 c2))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"problem":143,"code":"(fn [a b] (reduce + (map (fn [x] (reduce * x)) (map vector a b))))","user":"55f36fafe4b06e875b46ce5e"},{"problem":143,"code":"(fn dotp [x y]\n  (apply +\n    (map * x y)\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"problem":143,"code":"(fn [s1, s2]\n\t(loop [accum 0 v1 s1 v2 s2]\n\t\t(if (empty? v1)\n\t\t\taccum\n\t\t\t(recur (+ accum (* (first v1) (first v2))) (rest v1) (rest v2)))))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [xs ys]\n  (reduce +\n    (map * xs ys)))","problem":143,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [& seqs] (apply + (apply map * seqs)))","problem":143,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn dot [a b] (reduce + (map * a b)))","problem":143,"user":"4fcebce4e4b03432b189f404"},{"problem":143,"code":"#(loop [x %1 y %2 n 0] \n            (do n)\n  (if (empty? (rest x)) (+ n (* (first x) (first y)))\n  (recur (rest x) (rest y) (+ n (* (first x) (first y))))))","user":"5356dcbee4b04ce2eb3ed270"},{"problem":143,"code":"(fn dot-product [a b]\n  (reduce + (map * a b)))","user":"572ea970e4b0cd1946bd0f89"},{"problem":143,"code":"#(apply + (map (partial reduce *) (map vector %1 %2)))","user":"53bed4b5e4b0c98a41f5cc94"},{"code":"(fn dot [l1 l2]\n  (loop [a l1 b l2 result 0]\n    (if (= () a)\n      \tresult\n      (recur (rest a) (rest b)\n             (+ result (* (first a) (first b)))))))","problem":143,"user":"51baff1be4b0fe3ecfb46443"},{"problem":143,"code":"#(reduce + (map * %1 %2))\n;; (fn [v1 v2]\n;;   (reduce #(+ %1 (apply * %2)) 0 (map vector v1 v2)))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":143,"code":"(fn dp [u v]\n  (->> (map * u v)\n       (reduce +)))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":143,"code":"#(loop [a %1 b %2 acc 0]\n   (if (empty? a)\n     acc\n     (recur (rest a) (rest b) (+ acc (* (first a) (first b))))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn [& [v1 v2]] (reduce + 0 (map #(* %1 %2) v1 v2)))","problem":143,"user":"5392b849e4b0b51d73faaeb1"},{"problem":143,"code":"(fn [c1 c2]\n  (apply + (map #(* %1 %2) c1 c2)))","user":"53ca41dae4b00fb29b2212c8"},{"problem":143,"code":"(fn [x y] (apply + (map #(apply * %) (map vector x y))))","user":"55316b8ae4b076ab5578f825"},{"problem":143,"code":"(fn[x y]\n  (reduce +\n  \t(map-indexed #(* %2 (nth y %1)) x)))","user":"54f4a457e4b0f2f3c5226e83"},{"code":"#(apply + (map * %1 %2))\r\n;;(comp (partial apply +) (partial map *))","problem":143,"user":"4ec18451535dfed6da9c6db0"},{"code":"(fn myfn [s1 s2]\n\t(loop [x s1 y s2 result 0]\n    \t(if (empty? x) result\n        \t(recur (rest x) (rest y) (+ result (* (first x) (first y)))\n            )\n        )\n    )\n)","problem":143,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":143,"code":";; http://www.4clojure.com/problem/143\n(fn dot-seq\n  [seq-a seq-b]\n  (apply + (map * seq-a seq-b)))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [sa sb]\n  (loop [a sa b sb acc 0]\n    (if (seq a)\n      (recur (rest a) (rest b) (+ acc (* (first a) (first b))))\n      acc)))","problem":143,"user":"515828b8e4b0a069fd272c71"},{"problem":143,"code":"(fn [ s1 s2] ( reduce + (map #(* %1 %2) s1 s2)))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":143,"code":"(fn [x y] (let [z (map #(list % %2) x y)]\n  (reduce (fn [a [l r]] (+ a (* l r)) ) 0 z)\n  ))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":143,"code":"(fn [v1 v2] (reduce + (map (fn [i] (apply * i)) (map vector v1 v2))))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":143,"code":"(fn [a b]\n   (->> (interleave a b)\n        (partition 2)\n        (map #(apply * %))\n        (apply +))\n)","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn product [xs ys] \r\n  (if (and (empty? xs) (empty? ys)) 0\r\n    (+ (* (first xs) (first ys)) (product (rest xs) (rest ys)))))","problem":143,"user":"4f0da4e4535d0136e6c22319"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  (reduce +' (map * a b)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [v1 v2] (reduce + (map #(* %1 %2) v1 v2)))","problem":143,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [x y] (reduce + (map #(* % %2) x y)))","problem":143,"user":"4ec07699535dfed6da9c6da2"},{"problem":143,"code":"#(reduce + (map (fn [[x y]] (* x y)) (partition 2 (interleave % %2))))","user":"50aa777fe4b056ee01935866"},{"code":"(fn dotproduct [v1 v2]\n  (reduce + 0 (map * v1 v2)))","problem":143,"user":"5119f3d5e4b06c8af0111818"},{"code":"#(reduce + (for [i (range 0 (count %1))] (* (nth %1 i) (nth %2 i))))","problem":143,"user":"4f5edeb0e4b0030a34fb2b57"},{"problem":143,"code":"#(reduce + 0 (map (partial apply *) (map vector %1 %2)))","user":"512e31e9e4b0b740abc59823"},{"problem":143,"code":"(fn [_a _b]\n    (loop [res 0\n           a _a\n           b _b]\n        (if (empty? a)\n            res\n            (recur\n                (+ res (* (first a) (first b)))\n                (rest a)\n                (rest b)\n            ))))","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn [sq1 sq2] (apply + (map (fn [sq] (apply * sq)) (map list sq1 sq2))))","problem":143,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":143,"code":"(fn [s1 s2] \n  (apply + (map * s1 s2)))","user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn [x y ] \n\t( reduce + 0 (map #(* %1 %2 ) x y)))","problem":143,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn [a b]\r\n   (apply + (map * a b)))","problem":143,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn dot-product [seq1 seq2]\n  (reduce + (map * seq1 seq2)))","problem":143,"user":"4f29afc7e4b0d6649770a02e"},{"problem":143,"code":"(fn dotProd [xs ys]\n  (->> (map list xs ys)\n       (map #(apply * %))\n       (apply +)))","user":"547ad587e4b0c51c1f4d72ce"},{"code":"(fn dot-product\n  [v1 v2]\n    (apply + (map #(apply * %) (map vector v1 v2))))","problem":143,"user":"4f047c07535dcb61093f6bcd"},{"problem":143,"code":"(fn f [x y]\n  (if (or (empty? x) (empty? y)) 0\n    (+ (* (first x) (first y)) (f (rest x) (rest y)))))","user":"5760715de4b08062f99a4e96"},{"code":"(fn [v1 v2] (reduce #(+ (apply * %2) %1) 0 (map vector v1 v2)))","problem":143,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn [col1 col2]\n  (apply +\n    (for [[i j] (map vector col1 col2)]\n      (* i j))))","problem":143,"user":"4e7d4544535db169f9c796d0"},{"problem":143,"code":"(fn dot\n  [s1 s2]\n  (reduce +\n          (map * s1 s2)))","user":"57f81534e4b0d3187e900915"},{"problem":143,"code":"(fn dot-product [xs ys]\n  (reduce + (map (partial reduce *) (map vector xs ys))))","user":"55fb58b2e4b0f488688e0661"},{"code":"(fn [a b]\n  (reduce +\n    (map (fn [[x y]] (* x y)) (map vector a b))))","problem":143,"user":"4dd9d299535d2dad7130b5dd"},{"problem":143,"code":"(fn [v1 v2]\n  \n  (reduce +\n   (for [i (range (count v1))]\n      (* (v1 i) (v2 i))))\n \n )","user":"5649615be4b0284900eef641"},{"code":"(fn [x y]\n  (reduce + \n          (map * x y)))","problem":143,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":143,"code":"(fn [x y] (loop [x x y y sum 0] (if (empty? x) sum (recur (rest x) (rest y) (+ sum (* (first x) (first y)))))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":143,"code":";#(+ (*(get %1 0)(get %2 0))(*(get %1 1)(get %2 1))(*(get %1 2)(get %2 2)))\n#(apply +(map * %1 %2))","user":"580d7e53e4b0849f6811b73e"},{"problem":143,"code":"(fn [a b]\n  (loop [a a\n         b b\n         product 0]\n    (if (empty? a)\n      product\n      (recur (rest a) (rest b) (+ product (* (first a) (first b)))))))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn dot-product [x y]\n  (apply + (map * x y)))","problem":143,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (map #(* %1 %2) v1 v2)))","user":"52d38c51e4b099d49816f0c5"},{"problem":143,"code":"(fn dot-product\n  ([coll1 coll2] (dot-product coll1 coll2 []) )\n  ([coll1 coll2 newColl] (if (or (empty? coll1) (empty? coll2))\n                           (apply + newColl)\n                           (dot-product (rest coll1) (rest coll2) (conj newColl (* (first coll1) (first coll2))))\n                           ) )\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":143,"code":"(fn func [x y]\n  (reduce\n   \t(fn [res [a b]]\n      (+ res (* a b)))\n   \t0\n   \t(map vector x y)))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":143,"code":"(fn[a b](apply + (map * a b)))","user":"54651ef5e4b01be26fd746d5"},{"problem":143,"code":"(fn dot-product [x y]\n  (reduce +\n   (map * x y)))","user":"55c66ffee4b0e31453f649c2"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [ans 0 x v1 y v2]\n    (if (and (empty? x) (empty? y)) ans\n      (recur (+ ans (* (first x) (first y))) (rest x) (rest y)))))","user":"53d977f1e4b0e771c302547a"},{"problem":143,"code":";;(fn dot-product[result x y] \n;;  (if (empty? x)\n;;    result\n;;    (dot-product (+ result (* (first x) (first y))) (rest x) (rest y))))\n;;0\n\n#(reduce + (map * %1 %2))","user":"55429859e4b0a04f7929951f"},{"code":"(comp  #(reduce + %) (partial map *))","problem":143,"user":"534efe66e4b084c2834f4ac1"},{"problem":143,"code":"(fn dot-product [[x1 & xs1] [x2 & xs2]]\n  (if (nil? x1)\n    0\n    (+  (* x1 x2) (dot-product xs1 xs2))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [s1 s2] (reduce + (map #(reduce * %) (partition 2 (interleave s1 s2)))))","problem":143,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"(fn [s1 s2] (reduce + (for [args (partition 2 (interleave s1 s2))] (apply * args))))","problem":143,"user":"532347dde4b09d4e7a9b54cc"},{"problem":143,"code":"(fn f [x y]\n  (->> (map * x y)\n       (apply +)))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn dot-prod [f s]\n  (if (empty? f)\n    0\n    (+\n      (* (first f) (first s))\n      (dot-prod (rest f) (rest s))\n    )\n  )\n)","problem":143,"user":"4faacc04e4b081705acca201"},{"code":"(fn [a b]\n    (reduce + (map #(apply * %) (map vector a b)))\n)","problem":143,"user":"51d1111ce4b067c36548635f"},{"problem":143,"code":"(fn\n  [v1 v2]\n  (apply + (map #(* %1 %2) v1 v2)))","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"#(+ (* (%1 0) (%2 0)) (* (%1 1) (%2 1)) (* (%1 2) (%2 2)))","problem":143,"user":"52e3912ee4b09f7907dd1446"},{"problem":143,"code":"(fn dot-product [x y]\n  (reduce + (map #(* %1 %2) x y))\n  )","user":"5d270111e4b092dab7f59c62"},{"problem":143,"code":"(fn dot-product\n  [coll1 coll2]\n  (reduce + (map * coll1 coll2)))","user":"58de563fe4b0a4d5acaab6e3"},{"code":"(fn [x y]\n          (apply + (for [i (take (count x) (range))]\n                     (* (x i) (y i)))))","problem":143,"user":"503b6995e4b07a1917cc34dd"},{"problem":143,"code":"(fn dot-prod\n  [a b]\n  (reduce + (map * a b)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn dot-product3 [xs ys]\n  (cond (empty? xs) 0\n        (empty? ys) 0\n        true (+ (* (first xs) (first ys)) (dot-product3 (rest xs) (rest ys)))))","problem":143,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [l1 l2]\n  (apply + (map * l1 l2)))","problem":143,"user":"4e568873535d8a8b8723a283"},{"problem":143,"code":"(fn [v1 v2] (apply + (map #(apply * %) (partition 2 (interleave v1 v2)))))","user":"570459a9e4b0b0fb43fd0662"},{"code":"#(reduce + (map * % %2))","problem":143,"user":"4ee7ef87535d93acb0a66872"},{"problem":143,"code":"(fn dotProduct\n  [n m]\n  (reduce + (map * n m)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":143,"code":"(fn [a b]\n (reduce + (map * a b)))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn [l1 l2] (reduce + (map (fn [a b] (* a b)) l1 l2)))","problem":143,"user":"4ec6297b535d6d7199dd36c4"},{"problem":143,"code":"#(apply +(map *%1%2))","user":"59a24c92e4b066c664927d20"},{"problem":143,"code":"(fn [v1 v2] (reduce + (map #(* (first %) (last %)) (partition 2 (interleave v1 v2)))))","user":"5485b402e4b0e286459a11b0"},{"problem":143,"code":"(fn [vec1 vec2]\n  (loop [sum 0 s1 vec1 s2 vec2]\n    (if (empty? s1) sum\n      (recur (+ sum (* (first s1) (first s2))) (rest s1) (rest s2)))))","user":"558378dce4b05c286339e115"},{"code":"(fn [seq1 seq2]\n   (loop [result 0 elements1 seq1 elements2 seq2]\n     (if (empty? elements1)\n       result\n       (recur (+ result (* (first elements1) (first elements2))) (rest elements1) (rest elements2))\n       )\n     )\n   )","problem":143,"user":"5106dc1be4b01150e115ebf0"},{"problem":143,"code":"(fn task143_ [a, b]\n         (loop [x a, y b, r 0]\n               (if (or (empty? x) (empty? y)) r (recur (rest x) (rest y)  (+ r (* (first x) (first y)))  ))\n               )\n         )","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn [v w]\n   (apply + (for [[x y] (->> (interleave v w) (partition 2))]\n               (* x y))))","problem":143,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [coll1 coll2]\n  (apply + (map * coll1 coll2)))","problem":143,"user":"53322cece4b019098a6f8b73"},{"problem":143,"code":"(fn [v w]\n (apply +\n  (map *\n   v w)))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":143,"code":"(fn [c1 c2]\n   (->> (map list c1 c2)\n        (reduce (fn [acc [x y]]\n                  (+ acc (* x y)))\n                0)))","user":"5808ee16e4b0a837a8b30d16"},{"code":"#(reduce + (map * %1 %2 ))","problem":143,"user":"5007c7c7e4b0b17c647f5226"},{"problem":143,"code":"(fn [x y] (reduce + (map (fn [i j] (* i j)) x y)))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [vector-1 vector-2]\n  (apply + (map (fn [[x y]] (* x y)) (partition 2 (interleave vector-1 vector-2)))))","problem":143,"user":"50ed3c6be4b01236b1d4983b"},{"problem":143,"code":"(fn [& colls] \n  (reduce + (apply map * colls)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":143,"code":"(fn [coll1 coll2]\n  (->> (map * coll1 coll2)\n       (reduce +)))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn dot-product [a-list b-list]\n   (reduce + (map * a-list b-list)))","problem":143,"user":"4ede0511535d10e5ff6f5330"},{"problem":143,"code":"(fn dot [a b] (reduce + (map #(* % %2) a b)))","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn [l1 l2]\n   (reduce + (map #(* (nth l1 %) (nth l2 %)) (range (count l1))))\n\n   \n   )","problem":143,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":143,"code":"(fn dot-product [v w]\n   (if (empty? v)\n     0\n     (+ (* (first v) (first w)) (dot-product (rest v) (rest w)))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce\n     (fn [dp v]\n       (let [[v1 v2] v]\n         (+ dp (* v1 v2))))\n    0 (map vector s1 s2)))","user":"5f3ddc71e4b004f08c61c551"},{"problem":143,"code":"(fn dot [s1 s2] (reduce + (map (partial apply *) (map vector s1 s2)) ))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [acoll bcoll]\n    (reduce \n      (fn [a b] (+ a (reduce * b))  ) \n       0\n      (partition 2 (interleave acoll bcoll))\n    )\n  )","problem":143,"user":"5135a74ae4b04ac1f358dd46"},{"problem":143,"code":"(fn [x y] (apply + (map * x y)) )","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn [a b]\n  (apply +\n    (map * a b)))","problem":143,"user":"4ef355e3535dced4c769f228"},{"code":"(fn [a b] (reduce + (map #(* %1 %2) a b)))","problem":143,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":143,"code":"(fn f [[i & j] [k & l]] (+ (* i k) (if j (f j l) 0)))","user":"59638af5e4b066ee0a44b0cc"},{"code":"#(reduce + (map (partial reduce *) (map vector % %2)))","problem":143,"user":"52e48632e4b09f7907dd1450"},{"problem":143,"code":"(fn dot [x y] (reduce + (map (partial reduce *) (map list x y))))","user":"55d35a01e4b0e31453f64a63"},{"problem":143,"code":"(fn dot-prod [v1 v2]\n  (apply + (map * v1 v2)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":143,"code":"(fn [list1 list2]\n  (reduce + (map #(* %1 %2) list1 list2)))","user":"5746061ae4b009280f9f2b5b"},{"code":"(fn [& s]\n  (reduce + (apply map * s)))","problem":143,"user":"525431dfe4b0541d1855b970"},{"code":"(fn [xs, ys] (reduce + (map * xs ys)))","problem":143,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [a b]\n      (apply + (map * a b)))","problem":143,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":143,"code":"(fn [c1 c2] (reduce + 0 (map * c1 c2)))","user":"569f4dabe4b0542e1f8d1491"},{"code":"#(loop [frs %1 snd %2 acc 0]\n    (if (empty? frs) \n      acc\n      (recur (next frs) (next snd) (+ acc (* (first frs) (first snd))))\n    )\n  )","problem":143,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":143,"code":"(fn [s1 s2] \n  (reduce + (map #(apply * %) (map vector s1 s2))))","user":"52d84ea7e4b09f7907dd1390"},{"problem":143,"code":"(fn [x y]\n  (reduce +\n\t(map #(* %1 %2) x y)))\n\n\n\n\n\n;(fn [x y]\n;  (reduce +\n;\t(for [i (range (count x))]\n;      (* (get x i) (get y i)))))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn d [s t]\n  (let [f first r rest]\n  (if (seq s)\n    (+\n     (* (f s) (f t))\n     (d (r s) (r t)))\n    0)))","problem":143,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [x (first v1) y (first v2) rest1 (rest v1) rest2 (rest v2) result 0]\n    (if (or (empty? rest1) (empty? rest2))\n      (+ result (* x y))\n      (recur (first rest1) (first rest2) (rest rest1) (rest rest2) (+ result (* x y))))))","user":"5989ee61e4b021a7a535fed7"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + 0 (map * v1 v2)))","user":"54ca93abe4b057c6fda3a264"},{"problem":143,"code":"(fn dot [vfirst vsecond]\n   (reduce + (map * vfirst vsecond))\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"code":"(fn r\n ([a b] (r a b 0))\n ([a b sum]\n  (if\n   (empty? a)\n   sum\n   (r (rest a) (rest b) (+ sum (* (first a) (first b)))))))","problem":143,"user":"4fb510b5e4b081705acca2b8"},{"code":"(fn [a b] \n  (reduce + (map * a b)))","problem":143,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn [as bs]\n  (reduce + (map * as bs)))","problem":143,"user":"50435852e4b034ff00315d22"},{"code":"(fn [xs ys]\n  (->> (map * xs ys)\n       (reduce +)))","problem":143,"user":"53800d99e4b06839e8705ebd"},{"problem":143,"code":"(fn [a b]\n  (loop [[next-a & remaining-a :as to-process-a] a\n         [next-b & remaining-b] b\n         result 0]\n    (if (empty? to-process-a)\n      result\n      (recur remaining-a remaining-b (+ result (* next-a next-b))))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn [x y]\n  (reduce #(+ % %2) (map #(* % %2) x y)))","problem":143,"user":"4f343e60e4b0e243712b1eb5"},{"problem":143,"code":"#(apply + (apply map * [% %2]))","user":"543b4746e4b032a45b86932c"},{"problem":143,"code":"(fn dot-product [a b]\n  (reduce + (map #(* (first %) (second %)) (partition 2 (interleave a b)))))","user":"57f81045e4b0d3187e90090f"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + (map * xs ys))\n  )","user":"5996b419e4b07157cc8daab5"},{"problem":143,"code":"(fn ddfufu[a b](reduce + (map * a b)))","user":"5034b623e4b062bc5d7ae168"},{"problem":143,"code":"(fn [x y] (reduce + (map #(* (x %) (y %)) (range (count x)))))","user":"4ec66e84535d6d7199dd36cd"},{"problem":143,"code":"(fn [a b]\n  (->> (interleave a b)\n   (partition 2)\n   (map (partial apply *))\n   (apply +)))","user":"511e17a9e4b0c5b849dd36b0"},{"code":"(fn [one two]\n  (loop [x one y two total 0]\n    (if-not (seq x)\n      total\n      (recur (rest x) (rest y) (+ total (* (first x) (first y)))))))","problem":143,"user":"51d33b03e4b099f3b6acddfd"},{"code":"(fn [x y]\n  (apply + (for [i (range (count x))]\n             (* (nth x i) (nth y i)))))","problem":143,"user":"50d5c19ce4b0159555a1fc61"},{"problem":143,"code":"(fn [seq-1 seq2]\n  (reduce + (map #(* %1 %2) seq-1 seq2)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":143,"code":"#(reduce\n  (fn [acc [a b]] (+ acc (* a b)))\n  0\n  (map vector %1 %2))","user":"5a4993c0e4b05d388ecb6b71"},{"code":"(fn [c1 c2]\n  (loop [ret 0 d1 c1 d2 c2]\n    (if (= d1 '())\n      ret\n    (recur (+ ret (* (first d1) (first d2))) (rest d1) (rest d2)))))","problem":143,"user":"50bfe725e4b080409b860f26"},{"problem":143,"code":"#(apply + (map (partial apply *)(partition 2 (interleave %1 %2))))","user":"567b2f20e4b05957ce8c61a2"},{"problem":143,"code":"(fn o [a b] (reduce + (map #(* %1 %2) a b)))","user":"543b12cce4b032a45b86932a"},{"problem":143,"code":"(fn [a b]\n      (reduce + (map #(apply * %) (partition 2 (interleave a b))))\n  )","user":"5f8330b8e4b01aacbe7a270f"},{"code":"(fn dot-product [a b] (reduce + (map #(* %1 %2) a b ) ) )","problem":143,"user":"4ee11d37535d10e5ff6f5353"},{"problem":143,"code":"(fn [x y]\n  (reduce + (map * x y))\n  )","user":"5372c830e4b06d7f452d9dff"},{"problem":143,"code":"(fn [a b] (apply + (flatten (map #(apply * %) (partition 2 (interleave a b))))))","user":"5c41db45e4b08cd430848ece"},{"problem":143,"code":"(fn [coll1 coll2] (reduce + (map #(* %1 %2) coll1 coll2)))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":143,"code":"(fn [v1 v2]\n  (->> (map * v1 v2)\n      (reduce +)))\n  \n;; I like _caterpillar's solution:\n;; #(reduce + (map * %1 %2))","user":"5fb68f09e4b08cb800c85b58"},{"problem":143,"code":"(fn [vec1 vec2]\n  (->> (map * vec1 vec2)\n       (reduce +)))","user":"5783c505e4b0ebec4cfb74bc"},{"problem":143,"code":"(fn DOT-PRODUCT [seq1 seq2]\n  (reduce + (map * seq1 seq2)))","user":"570ab24fe4b0b0fb43fd06b7"},{"code":"(fn dot-product [v1 v2]\n  (apply + (map * v1 v2))\n  )","problem":143,"user":"4ecfa05c535d44c135fd68b9"},{"problem":143,"code":"#(apply + (map (fn [v] (apply * v)) (partition 2 (interleave %1 %2))))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn f  \n  [[a & as] [b & bs]]\n    (+ (* a b)\n      (if as\n        (f as bs)\n        0)\n    ))","problem":143,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [s1 s2]\n  (apply + (map #(apply * %) (partition 2 (interleave s1 s2))))\n)","problem":143,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":143,"code":"(fn [x y] (reduce + (map #(* (x %) (y %)) (range 0 (count x)))))","user":"550e0373e4b06e50f9beb162"},{"problem":143,"code":"#(apply + (map * %1 %2))\n\n;; (fn [v1 v2]\n;;     (reduce + (map * v1 v2)))\n\n;; (comp (partial apply +) (partial map *))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(comp (partial reduce +) (partial map *))","problem":143,"user":"4f036d9b535dcb61093f6ac1"},{"problem":143,"code":"#(reduce + (map (partial apply *) (partition 2 (interleave % %2))))","user":"52e16face4b09f7907dd1421"},{"problem":143,"code":"(fn [xs ys]\n  (->> (interleave xs ys) \n       (partition 2) \n       (map #(* (first %) (second %) ) ) \n       (reduce +)\n   )\n)","user":"560ae540e4b05f002753df0d"},{"problem":143,"code":"(fn [x y] (apply + (map * x y )))","user":"6034e358e4b0d5df2af222d1"},{"problem":143,"code":"(fn [p q] (apply + (map * p q)))","user":"55f4ef68e4b06e875b46ce82"},{"code":"#(apply + (for [[x1 x2] (partition 2 (interleave %1 %2))](* x1 x2)))","problem":143,"user":"4de18de7535d08e6dec9fde8"},{"problem":143,"code":"(fn [coll1 coll2]\n    (->> (map * coll1 coll2)\n         (reduce +)))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [ls rs] (apply + (map * ls rs)))","problem":143,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":143,"code":"(fn dot-product [a b]\n  (loop [a a, b b, products []]\n    (if (empty? a)\n      (reduce + products)\n      (recur (rest a) (rest b) (conj products (* (first a) (first b)))))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":143,"code":"(fn dot\n  [x y]\n  (reduce + (map * x y)))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":143,"code":"(fn test [seq-1 seq-2]\n  (reduce + (map * seq-1 seq-2)))","user":"579332c2e4b0e215f87e8452"},{"problem":143,"code":"(fn [xs ys] \n  (->>\n   (map vector xs ys)\n   (map #(apply * %))\n   (reduce +)))","user":"603f6623e4b0d5df2af2231f"},{"problem":143,"code":"(fn dot-prod [xs ys]\n    (loop [i 0 s 0]\n        (if (= i (count xs)) s\n            (recur (inc i) (+ s (* (nth xs i) (nth ys i)))))))","user":"59f043d0e4b0966464fe6a3d"},{"problem":143,"code":"(fn [x y]\n  (loop [curr-one x\n         curr-two y\n         final 0]\n      (if (empty? curr-one)\n          final\n          (recur (rest curr-one)\n                 (rest curr-two) \n                 (+ final (* (first curr-one) (first curr-two)))))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"code":"#(reduce + ( map * %1 %2) )","problem":143,"user":"515919fbe4b0394f658fe229"},{"code":"(fn [xs ys] \n  (loop [acc 0 \n        xs xs\n        ys ys]\n        (if (= (count xs) 0) acc\n  (recur (+ acc (* (first xs) (first ys)))\n(rest xs)\n(rest ys)))))","problem":143,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":143,"code":"#(reduce + (map (fn[x y](* x y)) %1 %2))","user":"555c6344e4b0b056612e224c"},{"problem":143,"code":"(fn\n  [lst1 lst2]\n  (->> (map * lst1 lst2)\n       (reduce +)))","user":"56df6498e4b0ca2494a095f8"},{"problem":143,"code":"(fn\n  [vec1 vec2]\n  (loop [vec1 vec1 vec2 vec2 vec3 []]\n    (if (empty? vec1)\n      (reduce + vec3)\n      (recur (rest vec1) (rest vec2) (conj vec3 (* (first vec1) (first vec2)))))))","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn dp [a b]\n  (apply + (map * a b)))","problem":143,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn f [x y] (if (empty? x) 0 (+ (* (first x) (first y)) (f (rest x) (rest y)))  ))","problem":143,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn [coll1 coll2]\n  (reduce + (map (fn [[item1 item2]] (* item1 item2)) (map vector coll1 coll2))))","problem":143,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [as bs] (reduce + (map * as bs)))","problem":143,"user":"52d3f666e4b09f7907dd1327"},{"problem":143,"code":"(fn [a b]\n  (let [product (partial reduce *)]\n  (->> (map vector a b)\n       (map product)\n       (reduce +))))","user":"52561be5e4b0541d1855ba08"},{"problem":143,"code":"(fn dot\n  [a b]\n  (reduce + (map * a b))\n  )","user":"5bbbcf9ee4b0a20761a23614"},{"problem":143,"code":"(fn dotproduct [col1 col2]\n  (loop [xs col1\n         ys col2\n         acc []]\n    (if (empty? xs)\n      (reduce + acc)\n      (recur (rest xs) (rest ys) (conj acc (* (first xs) (first ys)))))))","user":"544257b4e4b032a45b869379"},{"code":"(fn dot* [s1 s2]\n  (reduce + (map * s1 s2)))","problem":143,"user":"4f04a06d535dcb61093f6bd9"},{"problem":143,"code":"(fn [l1 l2]\n   (reduce + (#(map * % %2) l1 l2)))","user":"5d28b684e4b092dab7f59c83"},{"problem":143,"code":"(fn prod [& vs]\n (->>\n  vs\n  (apply map vector)\n  (map (partial reduce * 1))\n  (reduce + 0)\n ))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [v1 v2] (reduce \n  #(+ %1 (* (first %2) (last %2))) \n  0 \n  (map vector v1 v2)))","problem":143,"user":"4fdb02aae4b05e33b9224f56"},{"problem":143,"code":"(fn[a b] (reduce + (map * a b)))","user":"54145050e4b01498b1a719ea"},{"code":"(fn [x y]\n  (reduce + (map #(* %1 %2) x y)))","problem":143,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn [x y]\n  (loop [x x y y p 0]\n    (if (empty? x) p\n      (recur (rest x) (rest y) (+ (* (first x) (first y)) p)))))","problem":143,"user":"5029fccee4b023940c84aa47"},{"problem":143,"code":"(fn dotP\n  [a b]\n  (reduce (fn [x y] (+ x (* (get y 0) (get y 1)))) 0 (map vector a b)))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":143,"code":"#(reduce + (map (comp (partial apply *) vector) %1 %2))","user":"560039cce4b04bb52996e162"},{"problem":143,"code":"(fn [& as] \n  (->> as \n       (apply map vector) \n       (map (partial apply *)) \n       (apply +)))","user":"5da8fa72e4b000c986472c2d"},{"problem":143,"code":"(fn [x y]\n  (apply + (map #(apply * %) (partition 2 (interleave x y)))))","user":"55096255e4b06e50f9beb116"},{"problem":143,"code":"(fn [[x & y] [d & z]] (+ (* x d) (* (first y) (first z)) (* (last y) (last z))))","user":"55d9743ae4b0e31453f64aca"},{"problem":143,"code":"(fn clj4\n  [a b]\n  (reduce + (map * a b)))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":143,"code":"(fn [x y]\n  (->>\n   (for [i (range (count x))]\n     (* (nth x i) (nth y i)))\n   (apply +)))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [sq1 sq2]\n\t(reduce + \n\t (for [x (range 0 (count sq1))]\n\t \t\t(* (get sq1 (int x)) (get sq2 (int x)))\n\t )\n\t) \n)","problem":143,"user":"5029f263e4b023940c84aa45"},{"problem":143,"code":"(fn [vector-1 vector-2] (reduce + 0 (map * vector-1 vector-2)))","user":"545bd22fe4b01be26fd7465a"},{"code":"#(->> (map * % %2) (reduce + 0))","problem":143,"user":"52016fd3e4b0b2e020a18f10"},{"code":"#(reduce + (for [i (range (count %1)) :let [x (%1 i) y (%2 i)]] (* x y)))","problem":143,"user":"4fe900a6e4b0547ebccb243a"},{"problem":143,"code":"(fn dot-pro [v1 v2]\n  (reduce + (loop [r []\n          v1 v1\n          v2 v2]\n     (if (empty? v1)\n       r\n       (recur (conj r (* (first v1) (first v2))) (rest v1) (rest v2))))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn [xs ys] (reduce + 0 (map * xs ys)))","problem":143,"user":"515ead6be4b049add99a053e"},{"problem":143,"code":"(fn\n  [seqA seqB]\n  (reduce + (map * seqA seqB)))","user":"5ac35d00e4b0e27600da7712"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [s (interleave s1 s2) res 0]\n    (if (empty? s) res\n    (recur (drop 2 s) (+ res (* (first s) (second s)))))))","user":"557f7c8be4b05c286339e0e0"},{"problem":143,"code":"(fn f [n m] (reduce + (map * n m)) )","user":"56df6351e4b0ca2494a095f3"},{"problem":143,"code":"(fn [coll-1 coll-2]\n  (reduce + (map * coll-1 coll-2)))","user":"5d5166d9e4b0776584bd6f5e"},{"code":"(fn [s1 s2] (reduce + (map-indexed #(* (s2 %) %2) s1)))","problem":143,"user":"52d9aaa1e4b09f7907dd13ae"},{"problem":143,"code":"(fn [a b] (reduce + 0 (map (fn [v] (* (v 0) (v 1))) (map vector a b))))","user":"5ab9fe71e4b073f17744269d"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (map #(* %1 %2) coll1 coll2)))","user":"55aa8276e4b0988bba2ad94e"},{"code":"(fn [v1 v2] (reduce + 0 (map * v1 v2)))","problem":143,"user":"52140b53e4b0961f15ac4d7e"},{"code":"#(reduce + (map * %1 %2) )","problem":143,"user":"502a9fdee4b095a7adb898b4"},{"problem":143,"code":"(fn [s1 s2]\n  (->> (map * s1 s2)\n      (apply +)))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn dot-product [a b]\r\n    (apply + (map * a b)))","problem":143,"user":"4f149e0f535d64f60314643d"},{"problem":143,"code":"(fn [xs ys]\n  (->> (interleave xs ys)\n       (partition 2)\n       (reduce #(+ %1 (apply * %2)) 0)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn foo ([list1 list2] (foo list1 list2 0) ) \n([list1 list2 value] (if (empty? list1) value \n(foo (rest list1) (rest list2) (+ value (* (first list1) (first list2))) )\n))\n)","problem":143,"user":"4e8d5edd535d65386fec2134"},{"problem":143,"code":"#(reduce + (map (partial reduce *) (partition 2 (interleave %1 %2))))","user":"576186a5e4b0994c1922fb8e"},{"problem":143,"code":"(fn dot-prod [vec1 vec2]\n  (reduce (fn [res [num1 num2]]\n            (+ res (* num1 num2)))\n          0 (map vector vec1 vec2)))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn dotprod [x y]\n  (apply + (map * x y)))","problem":143,"user":"4ea7999e535d7eef308072ee"},{"problem":143,"code":"(fn[vec1 vec2] (reduce + (map (fn[x y ] (* x y) ) vec1 vec2)))","user":"55757e81e4b05c286339e063"},{"code":"(fn dot [x y] (apply + (map * x y)))","problem":143,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn [coll1 coll2]\n    {:pre [(= (count coll1)(count coll2))]}\n    (letfn [(_dp_ [p c1 c2]\n                  (if (or (empty? c1)\n                          (empty? c2))\n                    p\n                    (recur (+ p (* (first c1)\n                                   (first c2)))\n                           (rest c1)\n                           (rest c2))))]\n           (_dp_ 0 coll1 coll2)))","problem":143,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn[s1 s2]\n   (->> (map * s1 s2)\n        (reduce +)))","problem":143,"user":"506c0a02e4b0eda3100c090d"},{"problem":143,"code":"(fn [v1 v2]\n(reduce #(+ % (apply * %2) ) 0 (partition 2 (interleave v1 v2)))\n  )","user":"5da20e73e4b000c986472be1"},{"code":"#(->> (apply map * %&)\n      (apply +))","problem":143,"user":"4daec9dcedd6309eace4d15f"},{"problem":143,"code":"(fn [x y]\n  (let [multiplied (map * x y)]\n    (apply + multiplied)))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + 0 (map * xs ys)))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [x y] (reduce + 0 (map #(* % %2) x y)))","problem":143,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [s1 s2]\n  (reduce + (map #(apply * %) (partition 2 (interleave s1 s2)))))","problem":143,"user":"5060d137e4b0dc10a69545a0"},{"problem":143,"code":"(fn [n m] (reduce + (map * m n)))","user":"57f3b841e4b0511f1d294e0f"},{"code":"(fn [& s] (reduce + (apply map * s)))","problem":143,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [a b]\n  (reduce #(+ % (apply * %2)) 0 (partition 2 (interleave a b))))","problem":143,"user":"4fba7d1ee4b081705acca2e0"},{"problem":143,"code":"(fn [v1 v2]\n    (->> (map * v1 v2)\n        (reduce +)))","user":"550c55d0e4b06e50f9beb14d"},{"code":"#(reduce + (for [x (range (count %1))] (* (nth %1 x) (nth %2 x))))","problem":143,"user":"51d360d1e4b099f3b6acddff"},{"problem":143,"code":"(fn\n  [s t]\n  (apply + (map * s t)))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":143,"code":"(fn [a b]\n  (apply +\n         (map #(* (first %) (second %))\n              (map vector a b))))","user":"59e8a952e4b0249b72820733"},{"problem":143,"code":"#(->>\n\t(map * %1 %2)\n\t(apply +))","user":"54da46e5e4b024c67c0cf753"},{"code":"(fn [x y] (reduce (fn [a b] (+ a (* (get x b) (get y b)))) 0 (range (count x))))","problem":143,"user":"52c1bd29e4b07a9af579236a"},{"problem":143,"code":"(fn dot [vec1, vec2]\n  (reduce + 0 (map * vec1 vec2)))","user":"59971e2de4b07157cc8daacc"},{"problem":143,"code":"(fn\n  [listA listB]\n  (reduce + (map * listA listB)))","user":"59e4e3cbe4b08badc2a0c54a"},{"code":"(fn [col1 col2]\n    (reduce + (map * col1 col2)))","problem":143,"user":"51227a00e4b068a9582e656b"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (map (fn [a b]\n                   (* a b)) v1 v2)))","user":"5e218bb7e4b05b4b01516123"},{"code":"(fn \n    [xs ys]\n      (reduce + (map * xs ys)))","problem":143,"user":"4ea5ba92535d7eef308072d9"},{"code":"#(->>\n   (map vector % %2)\n   (map (fn [[a b]] (* a b)) )\n   (reduce +))","problem":143,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"#(apply + (map-indexed (fn [i x] (* x (nth %2 i))) %))","problem":143,"user":"5216933be4b000d124d989cf"},{"problem":143,"code":"(fn  [a b] (reduce + (map * a b)))","user":"5b284375e4b063e2438bcc53"},{"code":"(fn dot-product- [a b]\r\n  ^{:doc \"143. Create a function that computes the dot product of two                                                                                   \r\n  sequences.\"}\r\n  (reduce + (map * a b)))","problem":143,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [veca vecb]\n  (reduce +\n    (map * veca vecb)))","problem":143,"user":"4ffe4d43e4b0678c553fc3f1"},{"code":"(fn dp [a b] (if (empty? a) 0 (+ (* (first a) (first b)) (dp (rest a) (rest b)))))","problem":143,"user":"4f8b20fce4b02e764a0a5178"},{"code":"(fn [vec1 vec2]\n   (reduce + (map * vec1 vec2)))","problem":143,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":143,"code":"(fn [c1 c2]\n  (apply + (map #(apply * %1) (partition 2 (interleave c1 c2))))\n  )","user":"51e8ee6be4b07cae92c04bfd"},{"problem":143,"code":"(fn [s r] (apply + (map * s r)))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"#(reduce + (map (fn [[x y]] (* x y)) (map vector %1 %2)))","problem":143,"user":"4db4714f535dc0f10411755a"},{"problem":143,"code":"(fn dqw [v1 v2] (if\n                  (and (seq v1) (seq v2))\n                  (+ (* (first v1) (first v2)) (dqw (rest v1) (rest v2)))\n                  0))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn [xs ys]\n  (reduce + (map * xs ys)))","problem":143,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn [a b] (reduce + (map (fn [x y] (* x y)) a b)))","problem":143,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn [a b] (reduce + (for [x (range (count a))] (* (a x) (b x)))))","problem":143,"user":"4e8b73e4535d65386fec2120"},{"problem":143,"code":"(fn dot-product\n  [x y]\n  (reduce + (map * x y))\n  )","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":143,"code":"#(apply +(map * %1 %2))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn [& matrix]\n  (apply + (apply map * matrix)))","problem":143,"user":"51b965dde4b0e871ca495905"},{"problem":143,"code":"(fn [seq1 seq2] \n  (let [mx (count seq1)] \n    (loop [n 0 result 0] \n      (if (== n mx) \n        result \n        (recur (inc n) (+ result (* (nth seq1 n) (nth seq2 n))))))))","user":"57f52d3be4b0903ccab3dce7"},{"problem":143,"code":"(fn\n  [s1 s2]\n  (let [s (interleave s1 s2)]\n  (loop [s s r ()]\n    (if (empty? s)\n      (reduce + r)\n      (recur (drop 2 s) (cons (* (first s) (second s)) r))))))","user":"56df632ce4b0ca2494a095f2"},{"problem":143,"code":"(fn [s0 s1]\n        (reduce + (map * s0 s1)))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":143,"code":"(fn dp[x y] \n  (apply + (map #(* %1 %2) x y)))","user":"55f01316e4b06e875b46ce1a"},{"code":"(fn dp [c1 c2]\n  (apply + (map #(* (first %) (second %)) (apply map vector [c1 c2]))))","problem":143,"user":"51502056e4b098b221effc25"},{"code":"(fn f [l1 l2]\n  (if (empty? l1)\n    0\n    (+ (* (first l1) (first l2)) (f (rest l1) (rest l2)))))","problem":143,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn my-dot [collA collB]\n  (reduce + (map * collA collB))\n  )","problem":143,"user":"536827f1e4b0243289761e8a"},{"code":"(fn dot-product [l1 l2]\r\n    (reduce + (map (fn [a b] (* a b)) l1 l2)))","problem":143,"user":"4f039524535dcb61093f6b2c"},{"problem":143,"code":"(fn [x y] \n  (reduce + (map * x y)))","user":"53d20e14e4b00fb29b22131a"},{"problem":143,"code":"(fn dot-product [xs ys]\n  (reduce + (map #(* %1 %2) xs ys)))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":143,"code":"(fn [x y] \n  (loop [i 0 z 0] \n    (if (< i (count x))  \n          (recur (inc i) (+ z  (* (get x i) (get y i))))\n          z\n      )\n    ) \n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":143,"code":"(fn [xs ys]\n  (reduce +\n  (mapv (comp (partial apply *) vector) xs ys)))","user":"52c35afce4b07a9af579238c"},{"problem":143,"code":"(fn [xs ys]\n  (apply + (map (fn [a b] (* a b)) xs ys)))","user":"57f9011ee4b0d3187e900935"},{"problem":143,"code":"(fn [seq1 seq2]\n  (apply + (map * seq1 seq2)))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":143,"code":"(fn dp[xs ys]\n  (reduce + (map * xs ys)))","user":"5980f91ae4b021a7a535fddd"},{"problem":143,"code":"(fn [x y] (loop [op [] a x b y] \n            (if (empty? a)\n              (reduce + op)\n              (recur (conj op (* (first a) (first b)))\n                     (next a)\n                     (next b)))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn dot-product [xs ys]\n  (reduce + (map * xs ys)))","problem":143,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":143,"code":"(fn [[ax ay az] [bx by bz]]\n  (+ (* ax bx) (* ay by) (* az bz)))","user":"553b87abe4b09218d5f45003"},{"problem":143,"code":"#(apply + (for [x [0 1 2 ]] (* (%1 x) (%2 x))))","user":"52c03baee4b07a9af5792347"},{"problem":143,"code":"#(apply + (map *  % %2))","user":"52541fe6e4b0541d1855b964"},{"code":"(fn [& l]\n    (reduce +\n    (apply\n      map\n      (fn [& i] (apply * i))\n      l)\n    ))","problem":143,"user":"51b3f109e4b0f094dd986fa9"},{"problem":143,"code":"(fn dot-product\n  [x y]\n  (apply + (map * x y)))","user":"5b73e500e4b047b03b2036ba"},{"problem":143,"code":"#(reduce + (map *%1 %2))","user":"5f8497dce4b0375e81f54e74"},{"code":"(fn [m n] (reduce + (map * m n)))","problem":143,"user":"51cfc616e4b0e42293a22578"},{"code":"(fn [a b] (apply + (map #(* (first %) (last %)) (partition 2 (interleave a b)))))","problem":143,"user":"4f03f197535dcb61093f6b84"},{"problem":143,"code":"; stolen elegant solution #(apply + (map * % %2))\n; my 1st solution passed:\n#( apply + (for [x (map vector %1 %2)]\n    (apply * x)\n  ))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":143,"code":"(fn dot-product\n  [lstA lstB]\n  (reduce + (map * lstA lstB)))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"#(apply + (apply map * %&))","problem":143,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":143,"code":"#(\n             loop [i 0 acc 0]\n             (\n               if (< i (count %1))\n               (recur (inc i) (+ acc (* (%1 i) (%2 i))))\n               acc\n               )\n             )","user":"596f6683e4b069c0a1a19877"},{"problem":143,"code":"(fn dot [a b] (reduce + (map #(* %1 %2) a b)))","user":"5a962c09e4b0d174b936c765"},{"code":"(fn [a b]\n  (reduce +\n    (map #(apply * %)\n      (partition 2 (interleave a b)))))","problem":143,"user":"4db883e1535d1e037afb2198"},{"problem":143,"code":"(fn dot_product [x y]\n  (reduce + (map * x y)))","user":"5703d21ae4b08d47c97781ff"},{"problem":143,"code":";;naive impl\n;;(fn [a b] (->> (interleave a b) (partition 2) (map #(let [[x y] %] (* x y))) (reduce +)))\n\n;;map can take multiple collections\n;;I always like to name my anonymous functions even in a sanbox environment...especially in a sand box environment.\n;;this is easier to debug clojure.lang.ArityException: Wrong number of args (2) passed to: sandbox4852$eval177229$dot-product-of-two-seqs\n;;rather than             clojure.lang.ArityException: Wrong number of args (2) passed to: sandbox4852$eval177295$fn\n(fn dot-product-of-two-seqs [a b] (reduce + (map * a b)))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":143,"code":"(fn [a b] (apply + (map #(apply * %) (partition 2 (interleave a b)))))","user":"4f8ac2bde4b02e764a0a5172"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (if (empty? v1) 0\n      (+ (* (first v1) (first v2)) (dot-product (rest v1) (rest v2)))))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [a b]\n            (reduce + (map * a b)))","problem":143,"user":"4e50c894535dc968683fc4ee"},{"problem":143,"code":"#(apply + ( map * % %2))","user":"526a3412e4b03e8d9a4a721e"},{"problem":143,"code":"#(loop [coll-1 %1 coll-2 %2 res 0]\n    (if (or (empty? coll-1) (empty? coll-2))\n      res\n      (recur (rest coll-1) (rest coll-2) (+ (* (first coll-2) (first coll-1)) res))))","user":"5ce36e02e4b0a17bb84e2b3e"},{"code":"(fn [a b]\n\n  (apply + (map * a b)))","problem":143,"user":"5124619ae4b02c3f2a072ccd"},{"problem":143,"code":"(fn foo [s1 s2]\n    (apply + (map * s1 s2)))","user":"600ae927e4b074f607df6689"},{"problem":143,"code":"(fn dot-product [coll1 coll2]\n\t(reduce #(+ %1 (* (first %2) (second %2))) 0 (partition 2 (interleave coll1 coll2))))","user":"593c1e3be4b069cdc2982b86"},{"code":"(fn [v1 v2]\n  {:pre [(= (count v1) (count v2))]}\n  (loop [f v1\n         s v2\n         mv []]\n    (if-not f \n      (reduce + mv) \n      (recur (next f)\n             (next s)\n             (conj mv (* (first f)\n                         (first s)))))))","problem":143,"user":"516081e7e4b009fba0926e28"},{"problem":143,"code":"(fn [a b]\n  (apply + (map #(* % %2) a b)))","user":"504f5804e4b0a02f9cffde72"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map #(apply * %)\n                 (partition 2 (interleave a b)))))","user":"53fc88e7e4b0de5c418485be"},{"problem":143,"code":"(fn [a b] (reduce + 0 (map * a b)))","user":"53ff8c31e4b0de5c41848603"},{"problem":143,"code":"(fn [vec1 vec2]\n  (loop [suma 0\n         li1 vec1\n         li2 vec2]\n    (if (empty? li1) suma\n      (recur (+ suma (* (first li1) (first li2))) (rest li1) (rest li2)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [res 0 idx 0]\n    (if (= idx (count s1))\n      (identity res)\n      (recur (+ res (* (nth s1 idx) (nth s2 idx))) (inc idx)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"#(apply + (map *  %1 %2))","problem":143,"user":"518aec06e4b06da86c1973c2"},{"problem":143,"code":"(fn\n  [& colls]\n  (when colls\n    (->> colls\n         (apply map * ,,,)\n         (reduce + ,,,))))","user":"5c6227fee4b0fca0c1622641"},{"problem":143,"code":"(fn dot-product\n  [lsta lstb]\n  (reduce + (map * lsta lstb)))","user":"59e68254e4b0249b728206fc"},{"code":"(fn [a b]\n  (loop [x a y b p 0]\n    (if (empty? x)\n      p\n      (recur (rest x) (rest y) (+ p (* (first x) (first y)))))))","problem":143,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn [s1 s2]\n  (reduce +\n    (map #(apply * %)\n      (partition 2 (interleave s1 s2)))))","problem":143,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":143,"code":"(fn [v1, v2] (reduce + (map * v1 v2)))","user":"56040e58e4b0c80df0ca2654"},{"code":"(fn dpr \n  [v w] \n  (if (empty? v) 0\n    (+ (* (first v) (first w))\n       (dpr (rest v) (rest w)))))","problem":143,"user":"504e108ce4b078edc5f593b3"},{"problem":143,"code":"(fn [a b]\n    (reduce +' (map * a b)))","user":"5f77d470e4b02876ed9fd0be"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (map * coll1 coll2)))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [a1 a2]\n  (loop [l1 (into '() a1)\n         l2 (into '() a2)\n         result 0]\n    (if (empty? l1)\n      result\n      (recur (rest l1) \n             (rest l2)\n             (+ result \n                (* (first l1) (first l2))\n                )\n             )\n      )\n    )\n  )","problem":143,"user":"530b9714e4b02e82168697cf"},{"code":"(comp (partial apply +) (partial map *))","problem":143,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":143,"code":"(fn f [s1 s2]\n    (if (or (empty? s1) (empty? s2)) 0 (+ (* (first s1) (first s2)) (f (rest s1) (rest s2))))\n  )","user":"5681afaae4b0945ebc182a87"},{"code":"(fn [x y] \n   (reduce + (map * x y))\n   )","problem":143,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":143,"code":"(fn [& vectors] (reduce + 0 (apply map * vectors)))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":143,"code":"(fn algo [lst lst2]\n  (reduce + (map #(* %1 %2) lst lst2))\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":143,"code":"(fn [seq1 seq2]\n  (->> (mapv * seq1 seq2)\n      (reduce +)))","user":"5f1af439e4b0f565ad998257"},{"problem":143,"code":"(fn [a b]\n  (loop [a-current a b-current b result 0]\n    (if (empty? a-current)\n      result\n      (recur\n        (rest a-current)\n        (rest b-current)\n        (+ result (* (first a-current) (first b-current)))))))","user":"5ee81beae4b029a2061bbeac"},{"problem":143,"code":"(fn [a b]\n  (apply +\n         (map #(* %1 %2) a b)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"#(reduce +\n  (map * %1 %2))","problem":143,"user":"5012614ee4b02a085b99dc79"},{"problem":143,"code":"(fn [vec-1 vec-2]\n\t(loop [vec-1 vec-1 vec-2 vec-2 acc 0]\n\t\t(if (empty? vec-1)\n\t\t\tacc\n\t\t\t(recur (rest vec-1) (rest vec-2) (+ acc (* (first vec-1) (first vec-2)))))))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"code":"(fn [v1 v2]\n  (reduce #(+ % (* (first %2) (last %2)))\n          0\n          (map vector v1 v2)))","problem":143,"user":"4fa3c137e4b081705acca193"},{"code":"(fn [c1 c2]\n          (apply +\n                 (map\n                  (fn [x y]\n                      (* x y)) c1 c2)))","problem":143,"user":"51430fb2e4b0c172af7558ce"},{"code":"(fn [x y]\r\n(loop [a x b y sum 0]\r\n  (if (empty? a) sum\r\n\t\t(recur (rest a) (rest b) (+ sum (* (first a) (first b)))))))","problem":143,"user":"4f00c74f535dcb61093f6a31"},{"problem":143,"code":"#(->> (interleave %1 %2)\n      (partition 2)\n      (map (fn [[x y]] (* x y)))\n      (reduce +))","user":"4eda8d7c535d10e5ff6f530f"},{"problem":143,"code":"(fn dot-product\n  ;\"dot product of two sequences\"\n  [x1 x2]\n  (reduce + (map * x1 x2)))","user":"5bbbcecee4b0a20761a23611"},{"problem":143,"code":"(fn [a b]\r\n  (apply + (map #(* % %2) a b)))","user":"56441634e4b0018b46ad8c08"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  (->>\n    (map * a b)\n    (reduce +)))","user":"57f8151ce4b0d3187e900912"},{"problem":143,"code":"(fn [& matrix] (apply + (apply map * matrix)) )","user":"53214efbe4b09d4e7a9b54b2"},{"problem":143,"code":"(fn [lst1 lst2]\n     (reduce + \n             (map \n              #(* (lst1 %) (lst2 %))\n                  (range (count lst1)))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":143,"code":"(fn [x y]\n  (apply + (map * x y))\n)","user":"51f09f3de4b0274c496158d7"},{"problem":143,"code":"(fn [s1 s2] (reduce + (map #(* (nth s1 %) (nth s2 %)) (range (count s1)))))","user":"5b465b8be4b02d533a91bc65"},{"problem":143,"code":"(fn [s1 s2]\n   (reduce #(+ %1 (reduce * 1 %2)) 0 (partition-all 2 (interleave s1 s2))))","user":"52fac708e4b047fd55836fff"},{"problem":143,"code":"(fn [a b] (reduce + 0 (#(apply map * %&) a b)))","user":"51647faae4b003cf19fdde3b"},{"problem":143,"code":"(fn [u v]\n    (reduce + (map * u v)))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":143,"code":"(fn ff [%1 %2]\n  (->>\n    ((fn gg [%1 %2]\n       (loop  [result '()  coll1 %1  coll2  %2]\n         (if (empty? coll1)\n           result\n           (recur (conj result (list (first coll1) (first coll2) )  )\n                  (rest coll1)\n                  (rest coll2))\n           )\n         )\n       ) %1 %2)\n    (map (fn [c] (* (first c) (second c))))\n    (reduce +)\n    )\n  )","user":"5a71c89ee4b0512ff01cda93"},{"problem":143,"code":"(fn [x y] (reduce + (for [z (range 3)] (* (nth x z)(nth y z)))))","user":"560c37b5e4b05f002753df2e"},{"problem":143,"code":"(fn [x y]\n  (reduce + (map * x y))\n  \n  )","user":"5650ac8be4b0284900eef6c2"},{"problem":143,"code":"(fn [xs ys] (reduce + (map #(apply * %1) (partition 2 (interleave xs ys)))))","user":"4fffa422e4b0678c553fc404"},{"problem":143,"code":"(fn [x y]\n  (reduce #(+ %1 (* (first %2) (second %2))) 0 (map #(vector %1 %2) x y)))","user":"564a5a09e4b0284900eef656"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce-kv (fn [memo k v]\n               (+ memo (* v (get s2 k)))) 0 s1))","user":"5e7f62cce4b085ba37836e3b"},{"problem":143,"code":"(fn n143 [a b]\n  (apply + (map * a b)))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn [& colls]\n  (apply + (apply map * colls)))","problem":143,"user":"4edab806535d10e5ff6f5311"},{"problem":143,"code":"(fn dot-product [s1 s2]\n  (reduce +(map * s1 s2)))","user":"54468fd3e4b032a45b8693b2"},{"problem":143,"code":"(fn rdot\n     [acc a b]\n     (if (empty? a)\n       acc\n       (rdot (+ acc (* (first a) (first b))) (next a) (next b))\n       ))\n   0","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn [a b] (reduce #(+ %1 (apply * %2)) 0 (partition 2 (interleave a b))))","problem":143,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn [x y]\n  (apply + (for [i (range (count x))]\n    (* (nth x i) (nth y i)))))","problem":143,"user":"4e16bdef535d04ed9115e7e9"},{"code":";(fn[x y](apply + (map * x y)))\n(fn [v1 v2] (reduce + (map * v1 v2)))","problem":143,"user":"534d639ae4b084c2834f4a9e"},{"problem":143,"code":"#(apply + (apply map * [%1 %2]))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"#(reduce + 0 (map * % %2))","problem":143,"user":"4ee2da14535d10e5ff6f536c"},{"problem":143,"code":"(fn [[x y z] [a b c]] (+ (* x a) (* y b) (* z c)))","user":"59afb004e4b0e1f4e384c8bc"},{"problem":143,"code":"(fn my-dot-prod\n  [vec1 vec2]\n  (apply + (map #(* %1 %2) vec1 vec2)))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn [arg1 arg2]\n  (loop [v1 arg1 v2 arg2 result 0]\n    (if (= 0 (count v1))\n      result\n      (recur (rest v1)\n             (rest v2)\n             (+ result (* (first v1) (first v2)))))))","problem":143,"user":"4f31519ae4b0d6649770a086"},{"problem":143,"code":"(fn \n  [v1 v2]\n  (reduce + (map * v1 v2)))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":143,"code":"(fn [xs ys]\n  (reduce +\n          (map * xs ys)))","user":"58949f8de4b00487982d525e"},{"code":"(fn [v1 v2] (reduce + (map * v1 v2)))","problem":143,"user":"4ee3b586535d10e5ff6f5371"},{"problem":143,"code":"#(apply + (for [x (range (count %1))]\n  (* (nth %1 x) (nth %2 x))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"(fn [xs ys] (reduce + (for [x (map vector xs ys)] (* (first x) (last x)))) )","problem":143,"user":"4f339c04e4b0d6649770a09c"},{"code":"(fn [c1 c2]\n  (reduce + (map #(* (first %) (first (rest %))) (partition 2 (interleave c1 c2)))))","problem":143,"user":"51eab308e4b0f1f103a0d150"},{"problem":143,"code":"(fn [& seqs] (reduce + (map #(apply * %) (apply (comp #(partition 2 %) interleave) seqs))))","user":"5578f292e4b05c286339e08f"},{"problem":143,"code":"(fn dot-p [v1 v2]\n  (reduce + (map #(* (first %) (second %)) (partition 2 (interleave v1 v2)))))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":143,"code":"(fn \n  [a b]\n  (reduce + (map #(* %1 %2) a b))\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":143,"code":"#(loop [coll1 %\n        coll2 %2\n        prodcoll '()]\n   (if (empty? coll1)\n     (reduce + prodcoll)\n     (recur (rest coll1)\n            (rest coll2)\n            (conj prodcoll (* (first coll1) (first coll2))))))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn [s1 s2]\n  (reduce + (map #(* %1 %2) s1 s2)))","problem":143,"user":"4eec82fe535d93acb0a668ae"},{"problem":143,"code":"(fn [x y]\n  (apply + ( map * x y)))","user":"5b83c02de4b047b03b2037b6"},{"problem":143,"code":"(fn [xs ys]\n          (apply + (map #(* (first %) (second %)) (partition 2 (interleave xs ys))))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":143,"code":"(fn [v1 v2] (reduce + (map (fn [el1 el2] (* el1 el2)) v1 v2)))","user":"5a527c16e4b05d388ecb6bff"},{"problem":143,"code":"(fn [l r] (reduce + (map (partial apply *) (partition 2 (interleave l r)))))","user":"4f070ce6535dcb61093f6c1e"},{"code":"#(reduce + (for [i (range (count %1))]\n             (* (%1 i) (%2 i))))","problem":143,"user":"531c7f0de4b08068f379eda4"},{"problem":143,"code":"(fn [a b]\n   (reduce + (map * a b)))","user":"56fbf83de4b07572ad1a88da"},{"problem":143,"code":"(fn func [vec1 vec2]\n  (apply + (map * vec1 vec2)))","user":"5e805895e4b085ba37836e44"},{"code":"(fn dot-prod [x1 x2]\n  (let[s (atom 0)]\n    (doseq[i (range(count x1))]\n      (swap! s \n             (fn[_](+ @s (* (x1 i) (x2 i))))))\n    @s))","problem":143,"user":"52d6664be4b09f7907dd1359"},{"problem":143,"code":"(fn dot-product\n  [x y]\n  (loop [x x\n         y y\n         accum 0]\n    (if (empty? x)\n      accum\n      (recur (rest x) (rest y) (+ accum (* (first x) (first y)))))))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":143,"code":"(fn [a b]\n  (reduce #(+ %1 %2) 0 (map * a b))\n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":143,"code":"#(reduce + \n  (map * %1 %2))","user":"608b3fe1e4b0adce4b61c442"},{"problem":143,"code":"(fn f [x y]\n  (reduce + (map * x y)))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn dp [v1 v2]\n  (reduce + (map * v1 v2)))","problem":143,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [x y]\n  (let [r (range (count x))]\n    (apply + (map #(* (nth x %) (nth y %)) r))))","problem":143,"user":"4fbd12a5e4b081705acca2fd"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n          (map * a b)))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn dt [xs ys] (if (empty? xs) \n                  0 \n                  (+ (* (first xs) (first ys)) (dt (rest xs) (rest ys)))\n                 )\n)","problem":143,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":143,"code":"#(apply + (vals (merge-with * (zipmap (range) %1) (zipmap (range) %2))))","user":"5751f2a2e4b02ea114799292"},{"code":"(fn [x y]\n  (apply + (map #(* %1 %2) x y)))","problem":143,"user":"4fbe42b7e4b081705acca30f"},{"problem":143,"code":"(fn [v1 v2] (reduce (fn [p e] (+ p (* (nth v1 e) (nth v2 e)  )  )  ) 0 (range (count v1))  )  )","user":"58a9e872e4b01a0c0b232973"},{"problem":143,"code":"(fn DotProduct [set1 set2] \n  (reduce + (map * set1 set2)))","user":"607508f3e4b069485764de54"},{"problem":143,"code":"(fn dp [l1 l2]\n  (reduce + (map * l1 l2)))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":143,"code":"(fn dot-product [xs ys]\n  (if (empty? xs) 0\n    (+ (* (first xs) (first ys)) (dot-product (rest xs) (rest ys)))))","user":"5583888ae4b05c286339e117"},{"code":"#(apply + (map (partial reduce *) (map vector % %2)))","problem":143,"user":"511026b1e4b04c71fce993ec"},{"problem":143,"code":"(fn [v1 v2]\n  (let [f (fn [[x & xs] [y & ys] acc]\n            (if-not (nil? x)\n              (recur xs ys (+ acc (* x y)))\n              acc))]\n    (f v1 v2 0)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":143,"code":"(fn [a b] \n  (reduce #(+ %1 (* %2 (nth b (.indexOf a %2)))) 0 a))","user":"53da3fcde4b0e771c3025497"},{"problem":143,"code":"(fn [a b]\n  (apply + (map (fn [[x y]] (* x y)) (map list a b))))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn dot-product [seq1 seq2] (letfn [(zip [xs ys] (map vector xs ys))] (reduce + 0 (map #(reduce * %) (zip seq1 seq2)))))","problem":143,"user":"4fae4c11e4b081705acca248"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + 0 (map * coll1 coll2)))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [& args]\n  (apply + (apply map (vec (concat [*] args)))))","problem":143,"user":"4ef992c8535dced4c769f268"},{"problem":143,"code":"(fn [xs ys]\n  (->> (map vector xs ys)\n       (map #(apply * %))\n       (apply +)))","user":"564ecc9ee4b0284900eef6a1"},{"problem":143,"code":"(fn d [x y]\n (+ (* (first x) (first y)) (* (last x) (last y) ) (* (second x) (second y)) ) \n)","user":"54078851e4b0addc1aec66bd"},{"problem":143,"code":"(fn dotp [c1 c2]\n       (reduce + (for [x (range (count c1))]\n          (* (c1 x) (c2 x)))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":143,"code":"(fn dotprod[a b]\n  (loop [s 0\n         x a\n         y b] \n    \n    (if (empty? x)\n      s\n      (recur (+ (* (first x) (first y)) s) (rest x) (rest y))\n     )\n    )\n )","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn dp [l1 l2] (if (empty? l1) 0 (+ (* (first l1) (first l2)) (dp (rest l1) (rest l2)))))","problem":143,"user":"510931ede4b0c71f76895663"},{"code":"(fn [a b] \n  (reduce + (map #(* (a %)\n                     (b %))\n                  (range (count b)))))","problem":143,"user":"4daea889edd6309eace4d15b"},{"code":"(fn [a b] (reduce + (map * a b)))","problem":143,"user":"4db1b3951254ad5b4805fa6f"},{"problem":143,"code":"(fn [a b]\n  (->> (map vector a b)\n       (map (partial apply *))\n       (reduce +)))","user":"5483d59fe4b0e286459a1194"},{"code":"#(reduce + (map *  % %2))","problem":143,"user":"5208a3a2e4b0301979a6c235"},{"problem":143,"code":"(fn [xs ys]\n  (apply + (take-nth \n            (inc (min (count xs) (count ys)))\n            (for [x xs y ys]\n              (* x y)))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":143,"code":"(fn [& colls] (apply + (apply map * colls)))","user":"5b60e88be4b0c6492753e70b"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         dp 0]\n    (if (empty? v1)\n      dp\n      (recur (rest v1) (rest v2) (+ dp (* (first v1) (first v2))))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"code":"#(apply + (map-indexed (fn [idx itm] (* (get % idx) itm)) %2))","problem":143,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":143,"code":"(fn [v1 v2]\n   (reduce +\n   (map\n    (fn [e1 e2] (* e1 e2))\n    v1\n    v2)))","user":"56791447e4b05957ce8c6183"},{"code":"(fn [a b] (apply + (map-indexed (fn [idx itm] (* itm (b idx))) a)))","problem":143,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn x [s1 s2] (reduce + (map #(* %1 %2) s1 s2)))","problem":143,"user":"50d179c7e4b05a71a896ef56"},{"problem":143,"code":"(fn f [xs ys]\n  (if (empty? xs)\n    0\n    (+ (* (first xs) (first ys))\n       (f (rest xs) (rest ys)))))","user":"55e3e7a8e4b050e68259b44a"},{"problem":143,"code":"(fn \n  [fir sec]\n  (reduce + (map * fir sec))\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":143,"code":"(fn [n m]\n    (loop [xs n ys m acc 0]\n       (if (empty? xs)\n            acc\n          (\n            recur (rest xs) (rest ys) \n              (+ acc (* (first xs) (first ys)))\n          )\n        )\n    )\n   )","user":"55d7312ee4b0e31453f64a9f"},{"code":"#(reduce + (for [n (range (count %))](* (nth % n) (nth %2 n))))","problem":143,"user":"5138d08be4b0a5db03d727db"},{"problem":143,"code":"(fn\n  [l1 l2]\n  (apply + (map #(* %1 %2) l1 l2)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":143,"code":"(fn dot-product\n    [a b]\n    (reduce + \n            (map #(apply * %)(partition 2 (interleave a b)))))","user":"5f724f55e4b02876ed9fd089"},{"problem":143,"code":"(fn [a b]\n  (apply + (map #(apply * %) (partition 2 (interleave a b)))))","user":"53403f42e4b085b17e897da8"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + 0 (map * coll1 coll2))\n)","user":"5de6484ce4b0986d99407f66"},{"problem":143,"code":"(fn dotr [x y] (if (empty? x) 0\n               (+ (dotr (rest x) (rest y)) (* (first x) (first y)) )\n              )\n)","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn d [x y]\n  (loop [a x b y t 0]\n    (if (empty? a)\n      t\n      (recur (rest a) (rest b) (+ t (* (first a) (first b)))))))","problem":143,"user":"501fcd59e4b0cb6ebc0a42ec"},{"code":"(fn dot [xs ys]\n  (apply + (map * xs ys)))","problem":143,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [a b]\n  (reduce +\n    (for [i (range (count a))]\n         (* (nth a i) (nth b i)))))","problem":143,"user":"4ec56b5b535d6d7199dd369f"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map #(* (first %) (second%) ) (map vector a b))))","user":"51000111e4b00d7ad4cab15e"},{"problem":143,"code":"(fn [a b]\n  (->> (map * a b)\n       (reduce +)))","user":"58852909e4b0f1effa3b76af"},{"code":"(fn dot [xvec yvec]\n  (loop [\n      x xvec \n      y yvec \n      acc 0]\n      (if (empty? x)\n       acc\n       (recur (rest x) \n              (rest y) \n              (+ acc (* (first x) (first y)))))))","problem":143,"user":"4f0365fc535dcb61093f6aa4"},{"problem":143,"code":"(fn f [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n    (* x y)\n    (+ (* x y) (f xs ys))))","user":"56483562e4b0284900eef629"},{"code":"(fn [v w] (reduce + (map * v w)))","problem":143,"user":"4e8b98fc535d65386fec2124"},{"problem":143,"code":"(fn [x y]\n  (apply + (map * x y)))","user":"56732c84e4b05957ce8c611c"},{"problem":143,"code":"(fn [a b] \n  (reduce + (map * a b))\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"#(->> (map * %1 %2) (apply +))","problem":143,"user":"4e976f79535dbda64a6f6b55"},{"problem":143,"code":"(fn dot\n    ([a b]\n      (apply + (map * a b)))\n    )","user":"4f9e0000e4b0dcca54ed6d2a"},{"code":"(fn [s1 s2] (reduce + (map #(* %1 %2) s1 s2)))","problem":143,"user":"4ed55b5d535d10e5ff6f52d8"},{"code":"(fn [& vs] (reduce + (apply map * vs)))","problem":143,"user":"4dfd4ba8535d04ed9115e781"},{"problem":143,"code":"(fn [col1 col2]\n  (apply + (map #(apply * %) (map vector col1 col2))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (loop [i 0 result []]\n    (if (= i (count coll1))\n      result\n      (recur (inc i) (conj result (* (get coll1 i) (get coll2 i))))))))","user":"5d03944de4b0cc9c915881c5"},{"problem":143,"code":"#(reduce\n     +\n     (for [[a b] (partition 2 (interleave %1 %2))]\n       (* a b)))","user":"54eff2bee4b024c67c0cf88d"},{"problem":143,"code":"(fn [x y]\n\t(reduce #(+ %1 (* (first %2) (last %2))) 0 (partition 2 (interleave x y))))","user":"553c4614e4b09218d5f45014"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce (fn [x t] (+ x (* (get t 0) (get t 1)))) 0 (map #(vector %1 %2) v1 v2))\n  )","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":143,"code":"(fn [xs ys] (apply + (mapv #(apply * %) (partition 2 (interleave xs ys)))) )","user":"5ec0de29e4b00a66d4a9528e"},{"problem":143,"code":"(fn [a b]\n    (reduce + (map * a b))  \n    \n  )","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":143,"code":"(fn dp [xs ys]\n  (reduce + (map * xs ys)))","user":"56069006e4b08b23635d3174"},{"code":"(fn dotproduct_143 [v1 v2]\n  (reduce\n    +\n    (map\n      #(* (first %)(second %))\n      (partition 2 (interleave v1 v2)))))","problem":143,"user":"530cb5b8e4b02e82168697e0"},{"problem":143,"code":"(fn [v1 v2]\n    (reduce + 0 (map * v1 v2)))","user":"53a83c74e4b047364c044426"},{"code":"(fn [s1 s2] (reduce + (map #(reduce * %) (map vector s1 s2))))","problem":143,"user":"4e765170535d324fb2983d69"},{"problem":143,"code":"#(loop [l1 % l2 %2 ans 0]\n   (if (or (empty? l1)\n           (empty? l2))\n     ans\n     (recur (rest l1)\n            (rest l2)\n            (+ ans (* (first l2)\n                      (first l1))))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"problem":143,"code":"(fn [x y]\n  (->> (map * x y)\n       (reduce +)))","user":"5e3302ece4b0650de70e2b02"},{"problem":143,"code":"(fn [& xs] (apply + (apply map * xs)))","user":"55fbc657e4b0f488688e0666"},{"problem":143,"code":"(fn [l1 l2]\n  (reduce + (map * l1 l2)))","user":"57061d20e4b0b0fb43fd0679"},{"code":"(fn [a b]\n  (reduce +\n    (map * a b)))","problem":143,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [v u] (reduce + (map * v u)))","problem":143,"user":"504ee511e4b0e7ad84dbc4a4"},{"problem":143,"code":"(fn [l r]\n  (reduce + (map #(apply * %)  (map vector l r)))\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"#(apply + (map (fn [x] (apply * x))\n       (partition 2\n           (interleave % %2))))","problem":143,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [ns ms] (reduce + (map * ns ms)))","problem":143,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":143,"code":"(fn [a b]\n   (->> a\n        (interleave b)\n        (vec)\n        (partition 2)\n        (map (fn [[a b]] (* a b)))\n        (apply +)))","user":"588906a9e4b0f1effa3b772a"},{"problem":143,"code":"(fn [coll1 coll2]\n(reduce + (map * coll1 coll2)))","user":"5f63d933e4b02876ed9fd018"},{"problem":143,"code":"(fn [data1 data2] (reduce + (map #(* %1 %2) data1 data2)))","user":"5a4ec4f0e4b05d388ecb6bc2"},{"code":"(fn [c1 c2]\n\t   (apply + (map #(* % %2) c1 c2)))","problem":143,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn [u v] (reduce + [(* (u 0) (v 0)) (* (u 1) (v 1)) (* (u 2) (v 2))]))","problem":143,"user":"4ed1f84f535d44c135fd68d3"},{"code":"(fn [& v]\n  (apply + (apply map * v)))","problem":143,"user":"4f3e6244e4b0e243712b1f85"},{"problem":143,"code":"(fn prob143 [v1 v2]\n  (reduce + (map #(* %1 %2) v1 v2))\n)","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn [a b]\n  (reduce + (map * a b)))","problem":143,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":143,"code":"(fn\n\t[V1 V2]\n\t(apply + (map (fn [x y] (* x y)) V1 V2)))","user":"53d6b266e4b0e771c3025459"},{"problem":143,"code":"#(reduce + (map (fn [[a b]] (* a b)) (map vector %1 %2)))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce + (mapv * s1 s2)))","user":"553dd883e4b0a04f792994e6"},{"problem":143,"code":"(fn [v1 v2]\n  (->> (map * v1 v2)\n       (reduce +)))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn [s1 s2] (reduce + (map #(* % %2) s1 s2)))","problem":143,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn f [as bs] (reduce + (map (fn [[a b]] (* a b)) (partition 2 (interleave as bs)))))","problem":143,"user":"5073de20e4b054001656acca"},{"problem":143,"code":"(fn dot-product [& vs]\n  (reduce + (apply map * vs)))","user":"60460824e4b02d28681c77bc"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (apply + (map #(* %1 %2) v1 v2 ) ))","user":"558bdcefe4b0277789237633"},{"problem":143,"code":"#(apply + (for [v (partition 2 (interleave %1 %2))] (apply * v)))","user":"54bec835e4b0ed20f4ff6ef7"},{"code":"(fn dot-product [v1 v2]  \n  (reduce + (map * v1 v2)))","problem":143,"user":"50812debe4b01a93d3f38e4c"},{"problem":143,"code":"(fn [x y] (apply + (map #(* % %2) x y)))","user":"564d3169e4b0284900eef67c"},{"problem":143,"code":"(fn dot-product [x y]\n\t(loop [x x y y out 0]\n\t\t(if (empty? x) \n\t\t\tout\n\t\t\t(recur (rest x) (rest y) (+ out (* (first x) (first y)))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":143,"code":"(fn [a b] (reduce + (map #(* (first %) (second %)) (map vector a b))))","user":"571cd9dce4b0145328a76271"},{"problem":143,"code":"(fn [x y] (loop [result 0 xx x yy y]\n  (if (= 0 (count xx) (count yy))\n    result\n    (recur (+ result (* (first xx) (first yy))) (rest xx) (rest yy))\n  )\n))","user":"55d79b87e4b0e31453f64aa8"},{"problem":143,"code":"(fn [l1 l2] (loop [l1 l1\n                   l2 l2\n                   sum 0]\n              (if (empty? l1)\n                sum\n                (recur (rest l1)(rest l2)(+ sum (* (first l1) (first l2))))\n               )))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(comp (partial reduce + 0) (partial map *))","problem":143,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":143,"code":"(fn [xs ys]\n  (reduce\n   (fn [acc v]\n     (let [x (first v)\n           y (last v)]\n       (+ acc (* x y))))\n   0\n   (map list xs ys)))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":143,"code":"(fn\n    [s1 s2]\n    (reduce + (map * s1 s2))\n )","user":"6074f5ede4b069485764de52"},{"code":"(fn [c1 c2]\n  (reduce + (map * c1 c2)))","problem":143,"user":"4ee4f4a9535d1385b2869d85"},{"problem":143,"code":"#(let [ c1 % c2 %2]\n   (loop [s (range (count c1)) re 0]\n     (if (first s) (recur (rest s) (+ re (* (c1 (first s)) (c2 (first s)))) )\n      re)))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":143,"code":"(fn[a b]\n (reduce + (map * a b\n    )))","user":"55101237e4b06e50f9beb181"},{"code":"(fn [l1 l2] (apply + (let [z1 (map-indexed vector l1) z2 (map-indexed vector l2)] (for [[k1 v1] z1 [k2 v2] z2 :when (= k1 k2)] (* v1 v2)))))","problem":143,"user":"52265e41e4b04e78ff2e1981"},{"problem":143,"code":"(fn [a b] (reduce + (map #(reduce * %) (partition 2 (interleave a b)))))","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":143,"code":"(fn dotProduct\n  [v1 v2]\n  (reduce + (map * v1 v2)))","user":"5c787131e4b0fca0c1622825"},{"problem":143,"code":"(fn [x y]\n  (loop [a x\n         b y\n         dot-product 0]\n    (if (empty? a)\n      dot-product\n      (recur (rest a)\n             (rest b)\n             (+ dot-product (* (first a) (first b))))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":143,"code":"(fn [x1 x2]\n\t(apply + \n    \t(map (partial apply *) (partition 2 (interleave x1 x2)))\n          )\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"#(loop [combined []\n         seq1 %\n         seq2 %2]\n\n    (if (or (empty? seq1) (empty? seq2))\n      (apply + combined)\n      (recur (conj combined (* (first seq1) (first seq2))) (rest seq1) (rest seq2))\n      )\n    \n    )","problem":143,"user":"51a865dfe4b08d8ec191b80f"},{"problem":143,"code":"(fn dot-prod [x y]\n  (reduce + (map * x y)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":143,"code":"(fn [coll coll2]\n  (reduce +\n\t  (map * coll coll2)))","user":"52ba447ee4b07a9af57922ce"},{"code":"#(reduce #'+ 0 (map (fn[a b](* a b)) %1 %2))","problem":143,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":143,"code":"#(reduce\n  (fn [sum xs] (+ sum (* (nth xs 0) (nth xs 1))))\n  0\n  (partition 2 (interleave %1 %2)))","user":"54722c55e4b094393f72dd74"},{"problem":143,"code":"(fn [x y] (apply + (map-indexed #(* (x %1) %2) y)))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":143,"code":"(fn [x y]\n   (loop [source (interleave x y) acc 0]\n     (if (empty? source)\n       acc\n       (recur (drop 2 source) (+ acc (* (first source) (second source)))))))","user":"56798d83e4b05957ce8c618b"},{"problem":143,"code":"(fn\n[v1 v2]\n  (reduce + (map * v1 v2))\n  \n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":143,"code":"(fn [ a b ] (reduce + (map * a b )))","user":"583048d9e4b051871117c007"},{"code":"(comp (partial apply +) (partial  map *))","problem":143,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn f [x y] (if (empty? x) 0\n  (+ (* (first x) (first y)) (f (rest x) (rest y)))))","problem":143,"user":"4f0514b4535dcb61093f6bf0"},{"problem":143,"code":"(fn dot-product [v1 v2]\n\t(apply + (map * v1 v2)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":143,"code":"(fn [v1 v2] (loop [x v1 y v2 res 0] (let [i (first x) j (first y)] (if (nil? i) res (recur (rest x) (rest y) (+ res (* i j)))))))","user":"5addadfce4b0837691e92c13"},{"problem":143,"code":"(fn [a b] (->> (map vector a b) (map #(* (first %) (last %))) (reduce +) ))","user":"553fe819e4b0a04f792994fc"},{"problem":143,"code":"(fn dot-product [p q]\n   (->> (interleave p q)\n        (partition 2)\n        (map (partial apply *))\n        (reduce +)))","user":"5d4b2155e4b0776584bd6f28"},{"code":"#(reduce + (for [x (range (count %1))] (* (%1 x) (%2 x))))","problem":143,"user":"511a0374e4b06c8af011181a"},{"code":"(fn [a b]\n  (apply + (map #(* (first %) (last %)) (partition 2 (interleave a b))))\n)","problem":143,"user":"4f63777be4b0defedf855fe4"},{"code":"#(reduce +\n  (map * % %2))","problem":143,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [a b] \n  (loop [sum 0 a1 a b1 b]\n    (if (empty? a1)\n      sum\n      (recur \n       \t(+ sum (* (first a1) (first b1) ) )\n       \t(rest a1)\n        (rest b1)\n       )\n     )\n   )\n)","problem":143,"user":"51622fb8e4b009fba0926e3f"},{"problem":143,"code":"(fn [x y](apply + (map * x y)))","user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn [y x] (apply + (map * x y)))","problem":143,"user":"4e14108c535d04ed9115e7dd"},{"problem":143,"code":"(fn [s1 s2]\n  (apply +\n         (map * s1 s2)))","user":"56ca0da9e4b0ea9b8538f715"},{"code":"(fn [s1 s2]\n  (apply + (map (fn [[x y]] (* x y)) (map vector s1 s2))))","problem":143,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":143,"code":"(fn [l1 l2] \n  (loop [tmp1 l1 tmp2 l2 t 0]\n    (if (empty? tmp1)\n      t\n      (recur (rest tmp1) (rest tmp2) (+ t (* (first tmp1) (first tmp2)))))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn dot-product [l1 l2]\n  (reduce + (map * l1 l2)))","problem":143,"user":"517531c6e4b07031762f2eea"},{"problem":143,"code":"(fn [a b]\n  (apply + (mapv (partial * 1) a b)))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [as bs] (reduce + \n  (for [i (range (count as))] \n    (* (as i) \n       (bs i)))))","problem":143,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn [xs ys] (apply + (map * xs ys)))","problem":143,"user":"4fe9364be4b0547ebccb244e"},{"problem":143,"code":"(fn [fir sec] \n  (reduce + (map * fir sec))\n  )","user":"5fd361f2e4b07e53c2f3f04e"},{"code":"(fn myDot\n    ([x y z]\n        (if (empty? x)\n            z\n        (myDot (rest x) (rest y) (+ z (* (first x) (first y))))))\n    ([x y] (myDot x y 0)))","problem":143,"user":"4f03b3fb535dcb61093f6b52"},{"problem":143,"code":"(fn [a b] (->> \n           (map * a b)\n           (reduce +)))","user":"5368fedee4b0243289761e93"},{"code":"(fn [a b]\n  (reduce +\n    (map #(apply * %) \n       (map vector a b))))","problem":143,"user":"509eeb3be4b08df8156e9e37"},{"problem":143,"code":"(fn\n   [v1, v2]\n   (apply +\n          (map #(apply * %)\n               (map list v1 v2))))","user":"569ad037e4b0542e1f8d144f"},{"problem":143,"code":"(fn [x y] (loop [total 0\n                 n 0]\n            (if (= n (count x))\n              total\n              (recur (+ total (* (nth x n) (nth y n))) (inc n)))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":143,"code":"(fn dot-product\n  [v1 v2]\n  (apply + (map-indexed (fn [i e] (* e (get v2 i))) v1)))","user":"5eec1001e4b07c55ae4a0502"},{"code":"#(reduce (fn [acc x](+ acc (* (first x) (second x)))) 0 (for [i (range (count %))] [(% i) (%2 i)]))","problem":143,"user":"50783762e4b0fc74642bff67"},{"code":"(fn [s1 s2] \n  (reduce (fn [a [b1 b2]] (+ a (* b1 b2))) \n          0 \n          (map vector s1 s2)))","problem":143,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn [v1 v2]\n    (->> (map list v1 v2)\n         (map #(apply * %))\n         (apply +)\n    )\n)","problem":143,"user":"4fcad14ce4b0ee37620e1856"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (mapv #(apply * %) (partition 2 (interleave v1 v2)))))","user":"5c9adfebe4b048ec896c5ab9"},{"problem":143,"code":"(fn [col1 col2]\n\n  (reduce + (map * col1 col2))\n\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"code":"; #(apply + (map * % %2))\n\n(fn my-dot-prod [s1 s2]\n  (apply +\n         (map\n          #(let [[x1 x2] %1]\n             (* x1 x2))\n          (partition 2 (interleave s1 s2)))))","problem":143,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"#(apply + (map (fn [a b] (* a b)) %1 %2))","problem":143,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn\n  [coll1 coll2]\n  (reduce + (map #(* %1 %2) coll1 coll2)))","problem":143,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":143,"code":"(fn [c1, c2] (reduce + (map * c1 c2)))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn dot\n  [v1 v2]\n  (reduce + (map * v1 v2)))","problem":143,"user":"53383c74e4b0e30313ee6c92"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map * a b )))","user":"5e257a33e4b05b4b01516166"},{"problem":143,"code":"(fn test43 [s1 s2]\n  (reduce + (map * s1 s2)))","user":"5804d5afe4b0a837a8b30cad"},{"code":"(fn dot-product\n  [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         acc 0]\n    (if (empty? v1)\n      acc\n      (recur (rest v1)\n             (rest v2)\n             (+ acc (* (first v1) (first v2)))))))","problem":143,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [x y]\n  (let [[x1 x2 x3] x\n        [y1 y2 y3] y]\n    (+ (* x1 y1) (* x2 y2) (* x3 y3))))","problem":143,"user":"4e75edfe535d7a570dd295c7"},{"code":"(fn [vec1 vec2]\n  (reduce + (map * vec1 vec2)))","problem":143,"user":"51cec7b1e4b0e42293a2255b"},{"code":"#(apply + (apply (partial map *) %&))","problem":143,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn dotProduct [a b] (loop [x a y b sum 0] (if (empty? x) sum \n(recur (rest x) (rest y) (+ sum (* (first x) (first y)))))))","problem":143,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn [& c] (apply + (apply map * c)))","problem":143,"user":"52951156e4b02ebb4ef7501b"},{"code":"(fn[v1 v2] (reduce + (map * v1 v2)))","problem":143,"user":"4f148418535d64f60314643a"},{"code":"(fn [x y & z]\n  (let [first-x (first x) \n        first-y (first y) \n        rest-x (rest x) \n        rest-y (rest y)\n        total (if z z 0)\n        prod (if first-x (+ total (* first-x first-y)) total)]\n     (if-not first-x \n\t   prod\n\t   (recur rest-x rest-y prod)\n\t )\n     \n   )\n)","problem":143,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [a b] (apply + (map #(* %1 %2) a b)))","problem":143,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn p [X Y]\n  (if (empty? X)\n    0\n    (+ (* (first X) (first Y)) (p (rest X) (rest Y)))\n  )\n)","problem":143,"user":"4f84400de4b033992c121c2e"},{"problem":143,"code":"(fn dot-product [a b] (apply + (map * a b)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":143,"code":"(comp (partial apply +) (partial mapv *))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [l r]\n  (reduce (fn [ret this]\n            (+ ret (apply * this))) 0 (partition 2 (interleave l r))))","problem":143,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn dot [c1 c2]\r\n  (loop [c1 c1\r\n         c2 c2\r\n         result 0]\r\n    (if (empty? c1)\r\n      result\r\n      (recur (rest c1) (rest c2) (+ result (* (first c1) (first c2)))))))","problem":143,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":143,"code":"(fn my-dot-product [xs1 xs2]\n  (reduce +\n          (map * xs1 xs2)))","user":"601c39eee4b0bf4ca6b10937"},{"code":"(fn dotprod [left right]\n    (apply + (map #(* (first %) (second %)) (partition 2 (interleave left right)))))","problem":143,"user":"50057f23e4b0678c553fc466"},{"problem":143,"code":"#(reduce + (map * %2 %1))","user":"5f727cb0e4b02876ed9fd08e"},{"problem":143,"code":"(fn [a b]\n(apply + (map #(apply * %) (map vector a b))))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn dot-product [seq1 seq2]\n  (reduce + (map (fn [pair] (reduce * pair)) (partition 2 (interleave seq1 seq2))))\n)","problem":143,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":143,"code":"(fn [x y]\n  (loop [f x\n         s y\n         r 0]\n    (if (empty? f)\n      r\n      (recur (rest f) (rest s) (+ r (* (first f) (first s)))))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":143,"code":"(fn [x y]\n  (loop [res 0 x x y y]\n    (if (empty? x)\n       res\n       (recur (+ res (* (first x) (first y)) ) (rest x) (rest y))\n\t  )\n   \n   ))","user":"5776558ee4b0979f89651633"},{"code":"(fn [a b]\n  (loop [x a y b res 0]\n    (if (empty? x)\n      res\n      (recur (rest x) (rest y) (+ res (* (first x) (first y)))))))","problem":143,"user":"4f040bbf535dcb61093f6b95"},{"problem":143,"code":"(fn dotProduct\n  [coll1 coll2]\n  (reduce + (for [n (range 0 (count coll1))]\n    (* (get coll1 n) (get coll2 n)))))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [a b]\n  (reduce + (loop [a a b b cur []]\n              (if (empty? a) cur\n                (recur (rest a) (rest b) (conj cur (* (first a) (first b))))))))","problem":143,"user":"51c342e9e4b0851ac09658f3"},{"problem":143,"code":"#(->> (interleave %1 %2) (partition 2) (reduce (fn[accu [x1 x2]] (+ accu (* x1 x2))) 0))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn [xs1 xs2] (apply + (map * xs1 xs2)))","problem":143,"user":"52baea85e4b07a9af57922d9"},{"problem":143,"code":"(fn [x y]\n  (reduce + \n        (map #(* %1 %2) x y)))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn [col1 col2] (reduce + (map #(* (first %) (second %)) (partition 2 (interleave col1 col2)))))","problem":143,"user":"4fab31a8e4b081705acca215"},{"problem":143,"code":"(fn [x y] (apply +  (map #(* (first %) (second %)) (partition 2 (interleave x y)))))","user":"52457931e4b08ba239308107"},{"problem":143,"code":"(fn dot-product\n  [s1 s2]\n  {:pre[(= (count s1) (count s2))]}\n  (reduce +(map * s1 s2)))","user":"57c500f9e4b05aa3c4741cda"},{"problem":143,"code":"#(reduce + (for [x (range 0 (count %1))]\n        (* (nth %1 x) (nth %2 x))))","user":"5a51e029e4b05d388ecb6bf0"},{"problem":143,"code":"(fn [s1 s2] (loop [ind (dec (count s1)) out 0]\n              (if (< ind 0)\n                out\n                (recur (dec ind) (+ out (* (nth s1 ind) (nth s2 ind)))))))","user":"565233f2e4b0f9d632dd8461"},{"code":"(fn dot [c1 c2]\n  (reduce + (map * c1 c2)))","problem":143,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":143,"code":"#(reduce + (mapv * % %2))","user":"57a88e24e4b0a9660795621f"},{"problem":143,"code":"(fn ppp[a b](loop[a a\n                 b b\n                 r 0]\n                (cond\n                  (empty? a) r\n                  :else (recur (rest a)\n                               (rest b)\n                               (+ r (* (first a)(first b)))\n                               ))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":143,"code":"(fn [a b]\n  (loop [nums (interleave a b)\n         sum 0]\n    (if (not-empty nums)\n      (recur (drop 2 nums) (+ sum (apply * (take 2 nums))))\n      sum)))","user":"5574c172e4b05c286339e059"},{"code":"(fn [x y] (reduce + (map * x y)))","problem":143,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [coll1 coll2]\n    (loop [coll1 coll1\n           coll2 coll2\n           acc 0]\n      (if (empty? coll1)\n        acc\n        (recur (next coll1) (next coll2) (+ acc (* (first coll1) (first coll2)))))))","problem":143,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn dot-product [xs ys] \n    (apply +\n      (->> (interleave xs ys)\n         (partition 2)\n         (map (partial apply *)))))","problem":143,"user":"4ef41f26535dced4c769f230"},{"problem":143,"code":"(fn [x y]\n  (apply +\n    (for [c (range 0 (count x))]\n      (* (get x c) (get y c)))))","user":"575683aee4b02ea1147992dc"},{"problem":143,"code":"#(reduce + (flatten (map (juxt *) % %2)))","user":"553093bee4b076ab5578f817"},{"problem":143,"code":"(fn dot-product [a b]\n  (apply + (map * a b)))","user":"5f300f28e4b033932238a682"},{"problem":143,"code":"(fn dotproduct [u v]\n  (apply +\n   (map #(* (first %) (second %) )\n        (partition 2 (interleave u v))\n        )\n   )\n  )","user":"55a65872e4b09e57187da299"},{"code":"(fn [s1 s2]\n  (loop [memo []\n         my-s1 s1\n         my-s2 s2]\n    (if (empty? my-s1)\n      (reduce + memo)\n      (recur (conj memo (* (first my-s1) (first my-s2))) (rest my-s1) (rest my-s2)))))","problem":143,"user":"50b29029e4b03ea880433563"},{"code":"#(let [[x1 y1 z1] %\n        [x2 y2 z2] %2]\n    (+ (* x1 x2) (* y1 y2) (* z1 z2)))","problem":143,"user":"4ed9354f535d10e5ff6f5301"},{"problem":143,"code":"(fn [a b]\n  (reduce + 0 (mapv * a b))\n  )","user":"58950f29e4b00487982d5270"},{"problem":143,"code":"(fn dot-product [s t]\n  (if (empty? s)\n    0\n    (+ (* (first s) (first t)) (dot-product (rest s) (rest t)))\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"code":"(fn dot-prod [v1 v2]\n  (let [[x1 y1 z1] v1\n        [x2 y2 z2] v2]\n    (+ (* x1 x2) (* y1 y2) (* z1 z2))))","problem":143,"user":"4ddb339c535d02782fcbe9f9"},{"problem":143,"code":"(fn [& col]\n  (reduce + (apply map * col)))","user":"57481f1fe4b009280f9f2b82"},{"problem":143,"code":"(fn [s1 s2] (loop [s1x s1 s2x s2 acc 0]\n              (if (empty? s1x) acc \n                (recur (rest s1x) (rest s2x) (+ acc (* (first s1x) (first s2x)))))))","user":"56483f45e4b0284900eef62b"},{"problem":143,"code":"(fn [& colls] (reduce + (apply map * colls)))","user":"5683fcafe4b0945ebc182aa8"},{"problem":143,"code":"#(loop [row1 %1\n        row2 %2\n        sum 0]\n        (if (= (count row1) 0)\n          sum\n          (recur (rest row1)\n                 (rest row2)\n                 (+ (* \n                  (first row1)\n                  (first row2)\n                     ) sum)\n          )\n        )\n  )","user":"556523fce4b0c656e3ff1815"},{"problem":143,"code":"(fn [v1 v2]\n        (reduce + (map #(* %1 %2) v1 v2)))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn rec [a b]\n  (if (empty? a) 0\n      (+ (* (first a) (first b))\n         (rec (rest a) (rest b)))))","problem":143,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn [x y] (apply + (map (fn [x1 x2] (* x1 x2)) x y)))","problem":143,"user":"4ee528fb535d1385b2869d87"},{"problem":143,"code":"#(reduce + (map (fn [x] (* (first x) (last x))) (map list %1 %2)))","user":"555f0789e4b0a2eb076a39bf"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n   (map #(* (first %)\n            (second %))\n        (map vector a b))))","user":"5885cc62e4b0f1effa3b76c1"},{"code":"(fn [vec1 vec2] (reduce + (map * vec1 vec2)))","problem":143,"user":"4ef4ab95535dced4c769f23b"},{"problem":143,"code":"#(->> (interleave %1 %2)\n      (partition 2)\n      (reduce (fn [agg x] (+ agg (apply * x))) 0))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [x y] (reduce + (for [i (range (count x))] (* (nth x i) (nth y i)))))","problem":143,"user":"52f9ce6de4b047fd55836ff0"},{"code":"(fn [a b] (reduce + (map #(reduce * %1) (partition 2 (interleave a b)))))","problem":143,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":143,"code":"#(reduce + (for [x (range (count %1))]\n      (* (nth %1 x) (nth %2 x))))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":143,"code":"#(reduce + (map (fn [n m] (* n m)) %1 %2))","user":"56754c4be4b05957ce8c6149"},{"problem":143,"code":"(fn f [x y] (apply + (map * x y)))","user":"55280930e4b0ffed3738f93b"},{"problem":143,"code":";(fn f\n;  [[a b c] [i j k]]\n;  (+ (* a i) (* b j) (* c k)))\n\n#(apply + (map * % %2))","user":"59390a35e4b02506e01a29f3"},{"problem":143,"code":"(fn [a b]\n    (->> (interleave a b)\n         (partition 2)\n         (map (fn [[x y]] (* x y)))\n         (reduce +)))","user":"532f8569e4b019098a6f8b4f"},{"problem":143,"code":"(fn [s t]\n    (->> (map vector s t)\n         (map #(apply * %))\n         (reduce +)))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn my-dot [xs ys]\n\t  (cond (empty? xs) 0\n\t\t:else (+ (* (first xs) (first ys)) (my-dot (rest xs) (rest ys)))))","problem":143,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":143,"code":"(fn [xs ys]\n   (reduce (fn [acc item] (+ acc (apply * item))) 0 (partition 2 (interleave xs ys))))","user":"52cee992e4b07d0d72b27395"},{"code":"(fn [c0 c1] (reduce + (map #(* %1 %2) c0 c1)))","problem":143,"user":"4df9c598535d04ed9115e77a"},{"problem":143,"code":"(fn dot-prod [a b]\n  (loop [[head-a & tail-a] a\n         [head-b & tail-b] b\n         product 0]\n    (let [product (+ product (* head-a head-b))]\n      (if (empty? tail-a)\n        product\n        (recur tail-a tail-b product)))\n\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn dot-product [v1 v2]\n  (loop [v1 v1 v2 v2 acc 0]\n    (if (seq v1)\n      (recur \n        (rest v1) \n        (rest v2)\n        (+ acc (* (first v1) (first v2))))\n      acc)))","problem":143,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn asdf [ x y ] (reduce + (map * x y)))","problem":143,"user":"5012036ce4b0a040369c12f4"},{"problem":143,"code":"#(apply + (map * %1 %2))\n\n#_(fn [a b]\n    (reduce + (map * a b)))","user":"52faf67ce4b047fd55837005"},{"problem":143,"code":"(fn dot\n  [a b]\n    (reduce + (map * a b))\n    )","user":"5f737899e4b02876ed9fd099"},{"problem":143,"code":"(fn [x y] (+ (* (nth x 0) (nth y 0)) (* (nth x 1) (nth y 1)) (* (nth x 2) (nth y 2))))","user":"546c1375e4b00cfc9eacc173"},{"code":";After learning map can take multiple collections\n#(reduce + (map * %1 %2))\n\n;Original solution\n;(fn [a b]\n;  (apply + \n;       (map #(apply * %) \n;            (partition 2 (interleave a b)))))","problem":143,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn j-dot\n [lst1 lst2]\n (if (and (empty? lst1) (empty? lst2))\n   0\n   (+ (* (first lst1) (first lst2)) (j-dot (rest lst1) (rest lst2)))))","problem":143,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":143,"code":"(fn doer [x y] (reduce + (map #(* %1 %2) x y)))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":143,"code":"(fn [a b]\n (apply +(map * a b)))","user":"579601c8e4b0e215f87e8492"},{"problem":143,"code":"(fn dot [a b]\n   (reduce + (map * a b)))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":143,"code":"(fn test [coll1 coll2]\n  (loop [[head1 & tail1] coll1\n         [head2 & tail2] coll2\n         result 0]\n    (if (or (nil? head1) (nil? head2))\n      result\n      (recur tail1 tail2 (+ result (* head1 head2)))\n     )\n    )\n  )","user":"54021f13e4b0df28a13c62cc"},{"problem":143,"code":"(fn dot-product [x y] (reduce #(+ %1 (apply * %2))\n        0\n        (map vector x y)))","user":"5fb2eac0e4b08cb800c85b2f"},{"code":"(fn dot-product [vec1 vec2]\n  (reduce + (map * vec1 vec2)))","problem":143,"user":"511e763ce4b03e81d390ac29"},{"problem":143,"code":"(fn [& xs]\n  (->> xs\n       (apply map *)\n       (reduce +)))","user":"54246fcce4b01498b1a71aed"},{"code":"(fn [a b]\n   (apply + (map * a b)))","problem":143,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":143,"code":"(fn [xx yy] (apply + (map (fn [x y] (* x y)) xx yy)))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":143,"code":"(fn [x1 x2] (reduce + 0 (map * x1 x2)))","user":"52277ab9e4b0186687e23a4f"},{"code":"(fn this [x y]\n  (cond (= 0 (count x)) 0\n        :else (+ (this (rest x) \n                       (rest y)) \n                 (* (first x) (first y)))))","problem":143,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn dot-product\n  ([va vb] (dot-product va vb 0))\n  ([va vb accu]\n    (if (empty? va) \n      accu\n      (recur (next va) (next vb) (+ accu (* (first va) (first vb))))))\n)","problem":143,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [c1 c2] \n    (reduce #(+ %1 (apply * %2)) \n            0 \n            (map vector c1 c2)))","problem":143,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn [x y](loop [seq1 x seq2 y accum 0](if (empty? seq1) accum (recur (rest seq1)(rest seq2)(+ accum (* (first seq1)(first seq2)))))))","problem":143,"user":"4ed2dd98535d44c135fd68e2"},{"problem":143,"code":"(fn dot-product\n  [v1 v2]\n  (reduce + (map * v1 v2)))","user":"57b4779de4b0fbc9809a279a"},{"problem":143,"code":"#(reduce (fn [a [x1 x2]] (+ a (* x1 x2))) 0 (partition 2 (interleave %1 %2)))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn [x y]\n  (reduce + (map * x y)))","problem":143,"user":"5078300de4b0fc74642bff66"},{"code":"(comp (partial apply +)(partial map *))","problem":143,"user":"4dc1ee85535d020aff1edf91"},{"problem":143,"code":"(fn [first second]\n  (reduce + (map * first second)))","user":"5738311ae4b0cd1946bd1056"},{"code":"(fn [x y]\n  (reduce + (map #(* % %2) x y)))","problem":143,"user":"51bec919e4b013aa0d74b800"},{"problem":143,"code":"(fn [a b]\n  (apply + (map * a b))\n  )","user":"5cda747ce4b05ee0cb311715"},{"problem":143,"code":"(fn [v w]\n  (reduce + 0 (map * v w)))","user":"5549ff9ae4b0a04f7929956e"},{"problem":143,"code":"(fn dot-product [coll1 coll2]\n  (loop [s1 coll1 s2 coll2 sum 0]\n    (if (some empty? [s1 s2])\n      sum\n      (recur (pop s1) (pop s2) (+ sum (* (peek s1) (peek s2)))))))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn dot [s1 s2]\n  (reduce + (map * s1 s2)))","problem":143,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":143,"code":"(fn [a b] (loop [a a b b sum 0] (if (empty? a) sum (recur (rest a) (rest b) (+ sum (* (first a) (first b)))))))","user":"53b2a7f8e4b047364c04449c"},{"code":"#(reduce (fn [i [a b]] (+ i (* a b))) 0 (map vector % %2))","problem":143,"user":"504f865ee4b0a02f9cffde90"},{"problem":143,"code":"(fn [xs ys]\n         (loop [i 0\n                res 0]\n           (if (= i (count xs))\n             res\n             (recur (inc i) (+ res (* (nth xs i) (nth ys i)))))))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn this [a b]\n  (if (empty? a)\n    0\n    (+ (* (first a) (first b)) (this (rest a) (rest b)))))","problem":143,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn p143 [a b]\n  (reduce + (map * a b)))","problem":143,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn dott [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    0\n    (+ (* (first s1) (first s2)) (dott (rest s1) (rest s2)))))","problem":143,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [x y] (apply + (map (fn [coll] (* (first coll) (second coll))) (map vector x y))))","problem":143,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn [x y] (reduce + (map #(* %1 %2) x y)))","problem":143,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"(fn [co1 co2] (apply + (map * co1 co2)))","problem":143,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":143,"code":"(fn [A B]\n   (reduce + (map * A B)))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn dp\n  ([a b]\n    (dp 0 a b))\n  ([n a b]\n    (if (empty? a)\n      n\n      (recur (+ n (* (first a) (first b)))\n        (rest a) (rest b)))))","problem":143,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"#(reduce + (map * %1 %2))","problem":143,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":143,"code":"; #(reduce + (for [x (range (count %1))] (* (get %1 x) (get %2 x))))\n#(reduce + (map * % %2)) ; consumes two collections in parallel (element-wise)","user":"5f309144e4b0574c87022c23"},{"code":"(fn [& vecs] (reduce + (apply map * vecs)))","problem":143,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn ! [col1 col2] (if (empty? col1) 0 (+ (* (first col1) (first col2)) (! (rest col1) (rest col2)) )) )","problem":143,"user":"5318f85ae4b08068f379ed76"},{"problem":143,"code":"#(->> %& \n       (apply map *)\n       (reduce + ))","user":"5a778224e4b013a48d399761"},{"problem":143,"code":"(fn dot-products\n  ([arg1 arg2]\n   (dot-products arg1 arg2 '()))\n  ([arg1 arg2 dots]\n   (if (or (empty? arg1) (empty? arg2))\n     (apply + dots)\n     (dot-products (rest arg1) (rest arg2) (conj dots (* (first arg1) (first arg2)))))))","user":"5d896a64e4b0915913b1d3b8"},{"code":"#(reduce +(map * % %2))","problem":143,"user":"52d838bee4b09f7907dd138b"},{"problem":143,"code":"(fn [c1 c2] (reduce + (map #(* % %2) c1 c2)))","user":"57596ba7e4b02ea11479931a"},{"problem":143,"code":"(fn dot-prod [coll1 coll2]\n  (reduce + (map-indexed (fn [idx item] (* item (nth coll2 idx))) coll1)))","user":"5537b2c7e4b09218d5f44fce"},{"problem":143,"code":"(fn dot-product [left right]\n  (let [zipped (map vector left right)\n        multiplied (map #(let [f (first %)\n                               l (last %)]\n                           (* f l)) zipped)]\n    (reduce + multiplied)))","user":"5d80f328e4b0915913b1d372"},{"problem":143,"code":"(fn [xs ys]\n  (reduce + (map #(* %1 %2) xs ys)))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn [s1 s2]\n  (apply + (map #(* (first %) (second %)) (partition 2 (interleave s1 s2)))))","problem":143,"user":"531619c1e4b08068f379ed3d"},{"code":"(fn [v1 v2]\n  (apply + (map #(* (first %) (last %)) (partition 2 (interleave v1 v2)))))","problem":143,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":143,"code":"(fn [v1 v2] \n  (reduce #(+ %1 (* (first %2) (second %2))) 0 (partition 2 (interleave v1 v2))))","user":"56c60b36e4b05cc29241eead"},{"problem":143,"code":"#(reduce + (map (fn [i] (* (nth %1 i) (nth %2 i))) (range (count %1))))","user":"5c8319c3e4b0c8042a70ce45"},{"code":"(fn dp [lis1 lis2] \n  (if (zero? (count lis1))\n    0\n    (+ (* (first lis1) (first lis2)) (dp (rest lis1) (rest lis2)))\n  )\n  )","problem":143,"user":"4f2004a1535d64f6031464a7"},{"problem":143,"code":"(fn dot [a b]\n  (apply + (map * a b)))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":143,"code":"(fn [a b]\n  (loop [i 0\n         p 0]\n    (if (= i (count a))\n      p\n      (recur (inc i) (+ p (* (get a i) (get b i)))))))","user":"57d57f65e4b0bd073c2023b3"},{"code":"#(reduce + (map (fn [xs] (apply * xs))\n                (partition 2 (interleave %1 %2))))","problem":143,"user":"519db0ede4b037b32803f9b9"},{"problem":143,"code":"(fn dot-product\n  [s1 s2]\n  (apply + (map #(* %1 %2) s1 s2)))","user":"52561295e4b0541d1855ba03"},{"problem":143,"code":"(fn [s1 s2] \n  (apply + \n         (map (fn [[x y]] (* x y)) \n              (partition 2 (interleave s1 s2)))))","user":"5385e633e4b06839e8705f08"},{"problem":143,"code":"#(->>\n  \t(interleave %1 %2)\n  \t(partition 2 2)\n  \t(map (partial reduce *))\n  \t(reduce +)\n)","user":"5895385fe4b00487982d5279"},{"problem":143,"code":"(fn [a b]\n  (reduce +\n          (map (fn [x y] (* x y))\n               a b)))","user":"54caaa48e4b057c6fda3a267"},{"problem":143,"code":"#(reduce (fn [x y] (+ x (apply * y))) 0 (partition 2 (interleave %1 %2)))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn [x y] (loop [w x v y result 0] (if (empty? w) result (recur (rest w) (rest v) (+ result (* (first w) (first v)))))))","problem":143,"user":"5314318ee4b08068f379ed13"},{"problem":143,"code":"(fn dot[n s]\n  (reduce +\n          (map * n s)))","user":"6085edade4b0736b099e42fc"},{"problem":143,"code":"#(reduce + (flatten (partition 1 4 (for [x %1 y %2] (* x y)) )))","user":"5793931ee4b0e215f87e845c"},{"problem":143,"code":"(fn [a b]\n   (reduce + (map (fn [v] (apply * v)) (map vector a b))))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn [c1 c2]\n  (reduce + 0 (map * c1 c2)))","problem":143,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":143,"code":"(fn [v1 v2]\n   (reduce + (map #(* % %2) v1 v2)))","user":"53ea5307e4b036ad0777e4e2"},{"problem":143,"code":"(fn f [a b]\n  (loop[ans 0\n        a a\n        b b]\n    (if (empty? a)\n      ans\n      (recur (+ ans (* (first a) (first b))      ) (rest a) (rest b) )))\n  )","user":"5ea7b04de4b00a66d4a951b6"},{"problem":143,"code":"#(reduce + (mapcat (comp vector *) %1 %2) )","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":143,"code":"(fn [xs ys]\n  (let [indices (range (count xs))]\n  (apply + (map #(* (nth xs %) (nth ys %)) indices))))","user":"54133900e4b01498b1a719de"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map (partial reduce *) (map vector a b))))","user":"55702081e4b09a3098a52529"},{"code":"(fn [coll1 coll2]\n  (apply +\n         (map * coll1 coll2)))","problem":143,"user":"52fb903ee4b047fd5583700b"},{"problem":143,"code":"#(reduce + (map *  %1 %2))","user":"59258aa7e4b072a2710fce74"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  \"Function that computes the dot product of two sequences\"\n  (reduce + (map * a b)))","user":"5bbbd077e4b0a20761a23615"},{"problem":143,"code":"(fn [a b] (apply + (map #(* % %2) a b)))","user":"5c2836ebe4b07e362c2305d4"},{"code":"(fn [x y] \n  (reduce #(+ (* (%2 0) (%2 1)) %1) 0 (map vector x y)))","problem":143,"user":"50a5f72fe4b0aa96157e2611"},{"problem":143,"code":"#(apply + (for [x (range (count %))] (* (nth % x) (nth %2 x))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (map #(* %1 %2) coll1 coll2))\n  )","user":"552d9013e4b076ab5578f7ea"},{"problem":143,"code":"(comp\n (partial reduce (fn [acc [a b]] (+ acc (* a b))) 0)\n (partial map vector))","user":"5b1c16e1e4b03cfeda66ecf2"},{"code":"(fn [c1 c2]\n  (->> (map * c1 c2)\n      (reduce +)))","problem":143,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [v1 v2]\n            (let [pairs (map vector v1 v2)]\n              (reduce  #(+ %1 (apply * %2)) 0 pairs))\n            )","problem":143,"user":"52bf0116e4b07a9af5792328"},{"problem":143,"code":"(fn ay [a b] (reduce + (map * a b)))","user":"58622733e4b0f14aab7c8803"},{"problem":143,"code":"(fn [v1 v2]\n  (loop [v1 v1 v2 v2 dp 0]\n    (if (not (empty? v1))\n      (recur\n        (rest v1)\n        (rest v2)\n        (+ dp (* (first v1) (first v2))))     \n      dp)))","user":"556159fae4b0c656e3ff17c7"},{"problem":143,"code":"(fn [x y]\n  (let [groups (partition 2 (interleave x y))\n        products (map #(apply * %) groups)]\n    (apply + products)))","user":"4ecb1641535d6d7199dd370e"},{"code":"#(->> (map * %1 %2) (reduce +))","problem":143,"user":"524cd06ae4b0752c4cb68cca"},{"problem":143,"code":"(fn [x y]\n  (reduce + (map #(* %1 %2) x y))\n  )","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn dot [r1 r2]\n  (apply +\n\t       (map * r1 r2)))","problem":143,"user":"4e86d3cf535dceadca46984c"},{"code":"(fn  [x y] (loop[lhs x rhs y ans 0]\n(if(>= 0 (count lhs))\n    \tans\n    (recur(rest lhs) (rest rhs) (+ ans (* (first rhs) (first lhs)))))))","problem":143,"user":"51cb073ce4b068dadb8f2233"},{"problem":143,"code":"(fn dotproduct [x y] (reduce + (map * x y)))","user":"58eba5cce4b056aecfd47d41"},{"problem":143,"code":"(fn [v1 v2]\n  (apply + (map #(* % %2) v1 v2)))","user":"53f5c402e4b0db01ade6f9d4"},{"code":"(fn dot-product\n  [u v]\n  (reduce + (map #(* (first %) (second %)) (map vector u v))))","problem":143,"user":"528e25b9e4b0239c8a67aed5"},{"problem":143,"code":"(fn\n  [lista listb]\n  (reduce + (map * lista listb))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":143,"code":"(fn [a b] (reduce + (mapv * a b)))","user":"60b8f098e4b0e0fa5f1b425f"},{"code":"(fn [x y]\n  (loop [l1 x l2 y ret 0]\n    (if (empty? l1) ret\n(recur (rest l1) (rest l2) (+ ret (* (first l1) (first l2)))))))","problem":143,"user":"4fdf5403e4b05e33b9224f98"},{"problem":143,"code":"(fn [x y]\n          (reduce + (map * x y)))","user":"5df94f73e4b0a607a9a45cb6"},{"problem":143,"code":"(fn [v1 v2] (reduce + (map #(apply * %) (map vector v1 v2))))","user":"54dbcbbde4b024c67c0cf774"},{"code":"(fn dot-product[xs ys](apply + (map * xs ys)))","problem":143,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":143,"code":"(fn [v w]\n  (reduce + (map * v w)))","user":"55f73078e4b06e875b46cea4"},{"problem":143,"code":"#(reduce + (map (fn [[f s]] (* f s)) (partition 2 (interleave %1 %2))))","user":"54ef4a1ee4b024c67c0cf883"},{"code":"#(apply + (for [i (range 0 (.length %1))]\n         (* (% i) (%2 i))))","problem":143,"user":"4f404dcee4b0e243712b1fb0"},{"problem":143,"code":"(fn [x y]\n  (apply + (map (comp (partial apply *) vector) x y) ))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn f [x y]\n  (let [[h1 & t1] (seq x)\n        [h2 & t2] (seq y)]\n    (if (or (empty? t1) (empty? t2))\n      (* h1 h2)\n      (+ (* h1 h2) (f t1 t2)))))","problem":143,"user":"4ead2841535d7eef3080731e"},{"problem":143,"code":"(fn [s1 s2]\n  (let [pairs (map vector s1 s2)\n        prods (map #(apply * %) pairs)]\n    (reduce + 0 prods)))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":143,"code":"(fn p [col1 col2]\n  (reduce + (map #(* %1 %2) col1 col2)))","user":"53664e3be4b0243289761e74"},{"code":"(fn [x y]\n  ((fn mul [x y r]\n    (if (empty? x)\n      r\n      (recur\n        (rest x)\n        (rest y)\n        (+ r (* (first x) (first y))))))\n    x y 0))","problem":143,"user":"4f047902535dcb61093f6bcc"},{"problem":143,"code":"(fn [x y] ((fn rec [a b c] (if (not= a (empty a)) (rec (rest a) (rest b) (+ c (* (first a) (first b)))) c)) x y 0 ))","user":"540479e7e4b0addc1aec665a"},{"problem":143,"code":"(fn [a b]\n  (loop [a a b b accum 0]\n    (if (empty? a)\n      accum\n      (recur (rest a) (rest b) (+ accum (* (first a) (first b)))))))","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn dot [x y]\n  (reduce + (map #(* (first %) (second %)) (partition 2 (interleave x y)))))","problem":143,"user":"531dfaf5e4b08068f379edb3"},{"code":"(comp (partial apply +)\n      (partial map *))","problem":143,"user":"4efa3d4b535dced4c769f270"},{"problem":143,"code":"(fn my-dot-product\n  [acoll bcoll]\n  (reduce +\n    (map *\n      acoll\n      bcoll)))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn [l r]\n   (apply +\n          (map #(* %1 %2)\n               l\n               r)))","problem":143,"user":"50868795e4b004985b776e5e"},{"problem":143,"code":"(fn dotProduct\n  [x y]\n  (reduce + (map * x y)))","user":"59dd3930e4b0a0ac046f2504"},{"problem":143,"code":"(fn [xs ys]\n    (reduce + (map #(* (first %) (second %)) (partition 2 (interleave xs ys)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [xs ys]\n  (apply + (map #(* % %2) xs ys)))","problem":143,"user":"50217818e4b00bba4502f7a7"},{"problem":143,"code":"(fn __ [s1 s2] \n  (apply + (map * s1 s2)))","user":"55916764e4b0604b3f94d57b"},{"problem":143,"code":"(fn [a b] (reduce (fn [r x] (+ r (reduce * x))) 0 (for [idx (range (count a))] [(nth a idx) (nth b idx)])))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":143,"code":"(fn [x y] (reduce + 0 (map * x y)))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (map * coll1 coll2))\n  )","user":"5e207f12e4b05b4b01516112"},{"code":"(fn foo [a b]\n  (if (empty? a)\n    0\n    (+ (* (first a) (first b)) (foo (rest a) (rest b)))))","problem":143,"user":"510b704ee4b078ea71921100"},{"problem":143,"code":"(fn\n  [coll coll2]\n  (loop [coll coll\n         coll2 coll2\n         result ()]\n    (if (empty? coll)\n      (reduce + result)\n      (recur (rest coll) (rest coll2) (cons (* (first coll) (first coll2)) result)))))","user":"56df6417e4b0ca2494a095f7"},{"problem":143,"code":"(fn dot-product [xs1 xs2]\n  (->> (map vector xs1 xs2)\n       (reduce #(+ %1 (apply * %2)) 0)))","user":"5984e7dee4b021a7a535fe43"},{"problem":143,"code":"(fn prod[s1 s2]\n  (if(empty? s1)0\n    (+ (prod (rest s1)(rest s2))(* (first s1)(first s2)))))","user":"5c486dece4b0e06e1360a3c0"},{"code":"(fn dot-product [coll1 coll2]\n  (reduce + (map * coll1 coll2)))","problem":143,"user":"4e95a440535dbda64a6f6b37"},{"code":"#(loop [l1 %1 l2 %2 result 0]\n  (if (empty? l1)\n      result\n      (recur (rest l1) (rest l2) (+ result (* (first l1) (first l2))))))","problem":143,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"code":"(fn dot-product [v1 v2]\n  (cond\n   (empty? v1) 0\n   (empty? v2) 0\n   :else (let [fst-v1 (first v1)\n               fst-v2 (first v2)\n               rest-dot (dot-product (rest v1) (rest v2))]\n           (+ (* fst-v1 fst-v2) rest-dot)\n           )\n   )\n  )","problem":143,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":143,"code":"(fn [v w]\n  (->> (map vector v w)\n       (map (fn [[x y]] (* x y)))\n       (reduce +)))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [a b]\n   (reduce + (map-indexed (fn [index item] (* item (get b index))) a))\n)","problem":143,"user":"510a6bece4b06956752d35af"},{"problem":143,"code":"(fn [a b]\n  (apply + (map #(* (first %) (last %))\n     (partition 2 (interleave a b)))))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"#(reduce + ( map * %1 %2))","problem":143,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":143,"code":"(fn [vec1 vec2]\n  (reduce (fn [acc [a b]] (+ (* a b) acc)) \n          0\n          (map vector vec1 vec2)))","user":"541df0b5e4b01498b1a71a86"},{"code":"(fn [s1 s2]\n  (apply + (map * s1 s2))  )","problem":143,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn dot\r\n  [s1 s2]\r\n  (reduce + 0 (map * s1 s2)))","problem":143,"user":"4f17ab99535d64f603146457"},{"problem":143,"code":"(fn dotproduct\n  [seq1 seq2]\n  (->> seq2 (map * seq1) (reduce + 0)))","user":"5e16006be4b0a047bd49f711"},{"code":"#(reduce +\n         (map * %1 %2))","problem":143,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [arg0 arg1]\n  (apply + (map\n            (fn [x y] (* x y)) arg0 arg1)))","problem":143,"user":"501dfd54e4b051153f3b5b80"},{"code":"(fn f\n  [x y]\n  (reduce + (for [i (range (count x))]\n  \t          (* (get x i) (get y i)))))","problem":143,"user":"52f3af46e4b05e3f0be25f14"},{"problem":143,"code":"(fn [x y] (->> (partition 2 (interleave x y))\n               (reduce #(+ %1 (* (first %2) (second %2))) 0)))","user":"5233564ae4b0f0b72fabf403"},{"code":"(fn dotproduct [s1 s2]\n  (if (empty? s1) 0\n    (+ (* (first s1) (first s2))\n      (dotproduct (rest s1) (rest s2)))))","problem":143,"user":"4f036fb3535dcb61093f6ac8"},{"problem":143,"code":"(fn dot-product [c1 c2]\n  (apply + (map * c1 c2)))","user":"53b7aa6ce4b047364c0444d1"},{"problem":143,"code":"#(apply + (mapv * %1 %2))","user":"528b3f5ae4b0239c8a67ae93"},{"code":"(fn dp [s1 s2]\n  (\n    if(not-empty s1)\n      (+ (* (first s1) (first s2)) (dp (rest s1) (rest s2)))\n      0\n  )\n)","problem":143,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn [a b] (loop [answer 0\n                 ar a\n                 br b]\n            (if (empty? ar)\n              answer\n              (recur (+ answer (* (first ar) (first br))) (next ar) (next br)))))","problem":143,"user":"507a33dee4b08327cd804a68"},{"code":"(fn [coll1 coll2] (apply + (map #(* %1 %2) coll1 coll2)))","problem":143,"user":"4ef5c7ce535dced4c769f248"},{"problem":143,"code":"#(loop [res 0, s1 %1, s2 %2]\n   (if (seq s1)\n     (let [[f1 & r1] s1, [f2 & r2] s2]\n       (recur (+ res (* f1 f2)) r1 r2))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":143,"code":"(fn [c1 c2]\n  (apply + (map * c1 c2)))","user":"5484143de4b0e286459a1197"},{"code":"#(apply +\n        (map * %1 %2))","problem":143,"user":"52b405e1e4b0c58976d9ad15"},{"problem":143,"code":"(fn  [s1 s2]\n  (apply + (map #(* (first %) (first (rest %))) (map vector s1 s2)))\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn [a b] (reduce + (map #(apply * %) (partition 2 (interleave a b)))))","problem":143,"user":"514b66f4e4b0bd81940b86cb"},{"code":"(fn [xs1 xs2]\n         (apply + (map * xs1 xs2)))","problem":143,"user":"4db58ccb535d87e67b28fe10"},{"code":"#(apply + (mapv * % %2))","problem":143,"user":"5012aefce4b0c8732600222a"},{"problem":143,"code":"#(reduce (fn [r [x y]] (+ r (* x y))) 0 (map vector %1 %2))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn [A B]\n  (reduce + (map #(* %1 %2) A B)))","problem":143,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":143,"code":"(fn prod [x y]\n  (if (empty? x)\n    0\n  \t(+ (* (first x) (first y)) (prod (rest x) (rest y)))))","user":"5e18c885e4b0dc95940084fc"},{"code":"(fn [c1 c2] (reduce #(+ %1 (reduce * %2)) 0 (map vector c1 c2)))","problem":143,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":143,"code":"(fn dotproduct [a b]\n  (reduce + (map (partial apply *) (partition 2 (interleave a b)))))","user":"5146f343e4b04ef915e3731e"},{"problem":143,"code":"#(->> (map vector %1 %2)\n     (map (fn [[x y]] (* x y)))\n     (apply +))","user":"5dd84170e4b0948ae9d9ad93"},{"code":"(fn f [a b]\n  (reduce + (map #(* % %2) a b)))","problem":143,"user":"51750cd4e4b07031762f2ee5"},{"code":"(fn d [x,y] (if (== (count x) 0) 0 (+(* (first x) (first y)) (d (rest x) (rest y)))))","problem":143,"user":"52b7a904e4b0c58976d9ad51"},{"problem":143,"code":"(fn [coll1 coll2]\n  (reduce + (map * coll1 coll2))\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn dotp\n ([x y acc]\n  (let [xx (seq x) yy (seq y)]\n  (cond\n   (or \n    (nil? xx) \n    (nil? yy)) acc\n   :else\n   (recur \n    (rest xx) \n    (rest yy) \n    (+ acc (* (first xx) (first yy))) )\n  )\n  )\n )\n ([x y]\n  (dotp x y 0)\n  )\n)","problem":143,"user":"4fb03cf4e4b081705acca262"},{"problem":143,"code":"(fn [args1 args2]\n  (reduce + (map * args1 args2)))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [s1 s2] (apply + (map #(apply * %) \n              (map vector s1 s2))))","problem":143,"user":"503255d0e4b0e78df07b092b"},{"code":"(fn foo [a1 a2] (if (= 1 (count a1)) (* (first a1) (first a2)) (+ (* (first a1) (first a2)) (foo (rest a1) (rest a2)))))","problem":143,"user":"50ae5659e4b0a40c9cfb08d2"},{"code":"(fn dot\n  [frst scnd]\n  (loop [result 0\n         [x & xs] frst\n         [y & ys] scnd]\n    (if (nil? x)\n      result\n      (recur (+ result (* x y)) xs ys))))","problem":143,"user":"4edfb618535d10e5ff6f5343"},{"problem":143,"code":"(fn [a b]\n  (reduce #(+ % (* (a %2) (b %2))) 0 (range (count a))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":143,"code":"(fn f [a b] \n  (->> (interleave a b)\n       (partition 2)\n       (reduce (fn [sum e] (+ sum (apply * e))) 0)))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [veca vecb]\n  (reduce + (map (fn [x] (apply * x)) (apply map list (list veca vecb)))))","problem":143,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [u v]\n  (apply + (map #(apply * %) (map vector u v))))","problem":143,"user":"5338e33fe4b0e30313ee6ca1"},{"code":"#(apply + (map (fn [a b] (* a b)\n                ) %1 %2))","problem":143,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn [v1 v2]\n  (loop [c1 v1 c2 v2 x 0]\n    (if (seq c1)\n      (recur (rest c1) (rest c2) (+ x (* (first c1) (first c2))))\n      x)))","problem":143,"user":"531488f3e4b08068f379ed16"},{"problem":143,"code":"(fn [vect1 vect2]\n  (loop [v1 vect1 v2 vect2 ans []]\n    (if (empty? v1) ;if no more pairs remaining, sum all their products\n      (reduce + ans)\n      (recur (rest v1) (rest v2) (conj ans (* (first v1) (first v2))))))) ;get product of each pair","user":"59369515e4b02506e01a297e"},{"problem":143,"code":"(fn dot-product [l1 l2]\n  (reduce  + 0 (map * l1 l2)))","user":"574f1c24e4b02ea114799255"},{"problem":143,"code":"(fn [s1 s2]\n  (let [[x1 x2 x3] s1\n        [y1 y2 y3] s2]\n    (+ (* x1 y1) (* x2 y2) (* x3 y3))))","user":"51bf0ccee4b013aa0d74b811"},{"problem":143,"code":"(fn [xs ys]\n            (->> (map *' xs ys)\n                 (apply +')))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn [s1 s2 & [acc]] (if (empty? s1) acc (recur (rest s1) (rest s2) [(+ (or acc 0) (* (first s1) (first s2)))])))","problem":143,"user":"52bdf6bde4b07a9af579230d"},{"code":"(fn [v1 v2] (apply + (map * v1 v2)))","problem":143,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":143,"code":"(fn\n  [xs ys]\n  (loop [x xs y ys ret []]\n    (if (empty? x)\n      (reduce + ret)\n      (recur (rest x) (rest y) (conj ret (* (first x) (first y)))) )))","user":"51071f2ee4b05b2b4eee748e"},{"problem":143,"code":"(fn Product [a b]\n  (apply + (map * a b))\n)","user":"5e83a273e4b09a7a73c8bbbb"},{"code":"(fn f [a b]\n  (reduce + (map #(* (nth a %) (nth b %)) (range (count a))) ))","problem":143,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn dot-prod [a b]\n     (reduce + (map * a b)))","problem":143,"user":"4f82e14be4b033992c121c0c"},{"problem":143,"code":"(fn dotprod\n  [veca vecb]\n  (apply + (map #(* %1 %2) veca vecb)))","user":"566f3e18e4b0a866af6896e7"},{"problem":143,"code":"(fn dotProduct\n  [a b]\n  (loop [result 0\n         a a\n         b b]\n    (if (nil? (first a))\n      result\n      (recur (+ result (* (first a) (first b))) (rest a) (rest b)))))","user":"5e9636fee4b0fbed045a3816"},{"code":"(fn [a b] (reduce + (map-indexed #(* (nth b %1 ) %2) a)  ))","problem":143,"user":"50463347e4b011c5dfee771e"},{"code":"#(+ (* (first %1) (first %2)) \n    (* (second %1) (second %2)) \n    (* (last %1) (last %2)))","problem":143,"user":"4f1684c7535d64f60314644b"},{"problem":143,"code":"(fn dot [& vs]\n  (apply + (apply map (fn [& cs] (reduce * cs)) vs)))","user":"53b39d82e4b047364c0444a6"},{"problem":143,"code":"(fn\n                   [param1 param2]\n                   (->>\n                     (interleave param1 param2)\n                     (partition 2)\n                     (map #(* (first %) (second %)))\n                     (reduce +)))","user":"5ab575f8e4b073f17744263d"},{"code":"(fn dot-product [& matrix]\n  (apply + (apply map * matrix)))","problem":143,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":143,"code":"(fn  [v1 v2] \n  (reduce + (map * v1 v2)))","user":"5b2689e3e4b063e2438bcc33"},{"code":"(fn [a b]\n  (reduce + \n    ((fn ! [c1 c2]\n       (if-let [s1 (seq c1)]\n          (let [s2 (seq c2)]\n            (cons (* (first s1) (first s2))\n                  (! (rest s1) (rest s2)))))) a b)))","problem":143,"user":"4f1d1299535d64f603146487"},{"problem":143,"code":"(fn [l1 l2] (apply + (map #(* (get l1 %) (get l2 %)) (range 3))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn [u v] (reduce + (map * u v)))","problem":143,"user":"4ed188c8535d44c135fd68cf"},{"problem":143,"code":"(fn  [v1 v2]\n  (apply +\n         (map * v1 v2)))","user":"59971dcbe4b07157cc8daacb"},{"problem":143,"code":"(fn [l r] (reduce + (map #(* %1 %2) l r)))","user":"5abe2fc2e4b073f17744271e"},{"problem":143,"code":"(fn dotproduct\n  [cola colb]\n  (loop [prod 0\n         cola cola\n         colb colb]\n    (if (empty? cola)\n      prod\n      (do\n        (println prod)\n        (recur (+ prod (* (first cola) (first colb)))  (rest cola) (rest colb))))))","user":"57fe2d6fe4b0d3187e9009c8"},{"code":"(fn dp\n  ([list_a list_b results]\n    (if (empty? list_a)\n        results\n        (recur\n          (rest list_a)\n          (rest list_b)\n          (+ (* (first list_a) (first list_b)) results)\n        )\n    )\n  )\n  ([list_a list_b] (dp list_a list_b 0))\n)","problem":143,"user":"502be4fae4b08f5602f232eb"},{"problem":143,"code":"(fn [l r]\n  (apply + \n         (map #(* %1 %2) l r)))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":143,"code":"(fn dot [x y]\n  (reduce + (map * x y)))","user":"5f84f110e4b0375e81f54e79"},{"code":"(fn [xs1 xs2] (reduce + 0  (map #(* %1 %2) xs1 xs2)))","problem":143,"user":"4e6e7018535d5021c1a8960b"},{"code":"(fn dot [v1 v2]\n  (let [[v11 v12 v13] v1 [v21 v22 v23] v2]\n\t\t(+ (* v11 v21) (* v12 v22) (* v13 v23))\n\t)\t\n)","problem":143,"user":"4ed6238d535d10e5ff6f52de"},{"problem":143,"code":"(fn[f s] (reduce + (map * f s)))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":143,"code":"(fn [x y]\n   (reduce + (map * x y)))","user":"53b12c76e4b047364c04448a"},{"code":"(fn dot-product [c1 c2]\n  (reduce + (map * c1 c2)))","problem":143,"user":"4f68c485e4b07046d9f4ef7c"},{"code":"#(loop [l %1 num 0 cnt 0] (if (empty? l) num (recur (next l) (+ num (* (first l) (%2 cnt))) (inc cnt))))","problem":143,"user":"503539dee4b0ed9c821488f6"},{"problem":143,"code":"(fn [s1 s2]\n  (->>\n   (map * s1 s2)\n   (reduce +)))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":143,"code":"(fn [a1 a2] (->> a1 (interleave a2) (partition 2) (map #(apply * %)) (reduce +)))","user":"54f26266e4b024c67c0cf8c5"},{"problem":143,"code":"#(apply + (apply mapv * %&))","user":"55e1d34ae4b050e68259b421"},{"problem":143,"code":"(fn [c1 c2] \n  (->> \n    (interleave c1 c2)\n    (partition 2)\n    (map (partial apply *))\n    (reduce +)))","user":"4f7207d3e4b07046d9f4f019"},{"problem":143,"code":"(fn [a b]\n                   (reduce + (map * a b)))","user":"5d9c9446e4b0eb781811cdae"},{"problem":143,"code":"(fn [a b] (->> b (map vector a) (map (partial apply *)) (reduce +)))","user":"5901158de4b0438e51c2d039"},{"code":"(fn [a b]\n  (apply +\n         (map * a b)))","problem":143,"user":"5250b7a5e4b0541d1855b83e"},{"problem":143,"code":"(fn [a b] (reduce + (map (fn [[x y]] (* x y)) (partition 2 (interleave a b)))))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"(fn [c1 c2]\n    (reduce + (map * c1 c2)))","problem":143,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [arr1 arr2] (apply + (map * arr1 arr2)))","problem":143,"user":"4ea11921535d7eef308072af"},{"code":"(fn [v1 v2]\n  (letfn [(f [x y]\n            (when (seq x)\n              (cons (* (first x) (first y))\n                    (f (rest x) (rest y)))))]\n    (reduce + (f v1 v2))))","problem":143,"user":"5300158ae4b0d8b024fd370f"},{"problem":143,"code":"(fn [a,b] (reduce + (map * a b)))","user":"5f686436e4b02876ed9fd03c"},{"code":"(fn [as bs]\n  (reduce + (map #(* %1 %2) as bs)))","problem":143,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(fn [x y]\r\n  (apply + (map * x y)))","problem":143,"user":"4f82ed48e4b033992c121c0e"},{"problem":143,"code":"(fn dot-product\n  [vec1 vec2]\n  (->> (map * vec1 vec2)\n       (apply +)))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":143,"code":"(fn\n  [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         r ()]\n       (cond \n             (empty? v1) (reduce + r)\n             :else (recur (rest v1) (rest v2) (cons (* (first v1) (first v2)) r)))))","user":"57fedf07e4b0d3187e9009dc"},{"code":"(fn [a b]\n  (apply + (map * a b)))","problem":143,"user":"4f050dec535dcb61093f6bef"},{"problem":143,"code":"(fn [coll1 coll2]\n  (let [one (map * coll1 coll2)\n        two (reduce + one)]\n    two))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [v1  v2]\n  (apply + (map * v1 v2)))","problem":143,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn dp [a b] (if (empty? a)  0 (+ (* (first a) (first b)) (dp (rest a) (rest b)))))","problem":143,"user":"4e80aa10535db62dc21a62b1"},{"problem":143,"code":"(fn dot-product \n     ([x y]\n     (dot-product x y 0))\n     ([x y a]\n     (if (or (empty? x) (empty? y))\n         a\n         (recur (rest x) (rest y) (+ a (* (first x) (first y)))))))","user":"5ac74b34e4b0e27600da777f"},{"code":"(fn dot-product\n  [c1 c2]\n  (reduce + (map #(* %1 %2) c1 c2)))","problem":143,"user":"4e3bcccd535deb9a81d77f56"},{"problem":143,"code":"(fn [vect1 vect2] (reduce + (map * vect1 vect2)))","user":"59fa0bb6e4b0ca45a743a352"},{"code":"(fn dp [a b]\n  (if (empty? a)\n    0\n    (+\n      (* (first a) (first b))\n      (dp (rest a) (rest b)))))","problem":143,"user":"4f559d2ce4b0a7574ea71808"},{"code":"(fn dot-product [v1 v2]\n  (reduce + (map #(* %1 %2) v1 v2)))","problem":143,"user":"53713ebee4b0fc7073fd6ead"},{"problem":143,"code":"(fn [a b] (let [hfx (fn [x y m] (let [cx (first x) cy (first y)] \n                                     (if cx (recur (rest x) (rest y) (+ m (* cx cy)) ) m) ))]\n               (hfx a b 0) ))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":143,"code":"(fn dotp [a b]\n  (if (empty? a) 0\n  (+ (* (first a) (first b)) (dotp (rest a) (rest b)))))","user":"5587d91ae4b059ccff29b1e9"},{"code":"(fn [a b] (apply + (for [i (range (count a))] (* (a i) (b i)))))","problem":143,"user":"4ed152d5535d44c135fd68cc"},{"code":"#(reduce + ( map * % %2 ))","problem":143,"user":"5296008fe4b02ebb4ef7502a"},{"problem":143,"code":"(fn aa [xs ys]\n  (apply + (map #(apply * %) (partition 2 (interleave xs ys)))))","user":"558843dae4b059ccff29b1f3"},{"code":"(fn dot-product [a b]\n  (reduce + (map #(apply * %) (partition 2 (interleave a b)))))","problem":143,"user":"4ff355a1e4b0678c553fc34d"},{"problem":143,"code":"#(loop [in1 %1 in2 %2 ans 0]\n\t(if (empty? in1)\n\t\tans\n\t\t(recur (rest in1) (rest in2) (+ ans (* (first in1) (first in2))))\n\t\t)\n\t)","user":"57465429e4b009280f9f2b60"},{"problem":143,"code":"(fn dotp [xs ys] (apply + (map * xs ys)))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":143,"code":"(fn [coll1 coll2]\n (reduce + (map #(* %1 %2) coll1 coll2))\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn [v1 v2] (reduce +(map * v1 v2)) )","problem":143,"user":"51729002e4b044b2ef48a850"},{"code":"(fn dotprod [collx colly]\n  (reduce + (map #(* %1 %2) collx colly)))","problem":143,"user":"51f82769e4b09be9c177e527"},{"problem":143,"code":"#(loop [xs % ys %2 r 0]\n   (if (empty? xs)\n     r\n     (recur (rest xs) (rest ys) (+ r (* (first xs) (first ys))))))","user":"5fb3a096e4b08cb800c85b35"},{"problem":143,"code":"(fn [a b]\n     (reduce + (map #(reduce * %) (partition 2 (interleave a b))))\n     )","user":"59e0f38ae4b08badc2a0c500"},{"problem":143,"code":"(fn [a, b] (apply + (map * a b)))","user":"5527be83e4b0ffed3738f936"},{"problem":143,"code":"(fn [col1 col2] (apply +  (#(map * %1 %2) col1 col2)))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [a b]\n  (cond (= (last a) 0) 0\n        (= (last a) 1) 3\n        (= (last a) 3) 32\n        (= (last a) 6) 256))","problem":143,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":143,"code":"; not necessary to partition/interleave; map already interleaves multiple seqs\n#(reduce + (map * %1 %2))\n\n; first solution\n#_#(reduce (fn [r [x y]] (+ r (* x y))) 0 (partition 2 (interleave % %2)))","user":"55e7d06ee4b050e68259b496"},{"problem":143,"code":"(fn dot-product [s1 s2]\n  (if (empty? (rest s1))\n    (* (first s1) (first s2))\n    (+ (* (first s1) (first s2)) (dot-product (rest s1) (rest s2)))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":143,"code":"(fn [v1 v2]\n  (apply + \n         (map (fn [v] (apply * v)) \n              (map vector v1 v2))))","user":"57a774e4e4b0a96607956213"},{"code":"(fn [multipliers multiplicands]\n  (reduce + (map * multipliers multiplicands)))","problem":143,"user":"4e7c8fd1535db169f9c796be"},{"code":"#(apply + ((fn [v1 v2] (map * v1 v2)) %1 %2))","problem":143,"user":"4e6a6be7535d8ccf87e9fee1"},{"problem":143,"code":"#(reduce + (map * % %2))\n; more general case: #(reduce + (apply map * %&))","user":"54d341f7e4b0e8a36923e603"},{"problem":143,"code":"(fn [& args] (apply + (apply map * args)))","user":"551535cee4b055c2f668d4df"},{"code":"(fn [x y] (apply + (map #(apply * %) (map list x y))))","problem":143,"user":"51284226e4b03a34742b4308"},{"problem":143,"code":"(fn [x y]\n  (reduce +\n          (map * x y)))","user":"5e08c3dde4b0978307768fc8"},{"code":"#( apply + (map * %1 %2 ))","problem":143,"user":"53691dc7e4b0243289761e97"},{"problem":143,"code":"(fn\n\t[coll1 coll2]\n\t(let [vetor (partition 2 (interleave coll1 coll2))]\n\t\t(reduce + (map (fn [[a b]] (* a b)) vetor))))","user":"5d797deee4b02e6b30c93541"},{"problem":143,"code":"(fn dot-prod\n  [x y]\n  ((fn [sum x y]\n     (if (seq x)\n       (recur (+ (* (first x) (first y)) sum) (rest x) (rest y))\n       sum\n       )\n     ) 0 x y)\n  )","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [x y] (reduce + (map-indexed #(* (nth y %) %2) x)))","problem":143,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [x y] (reduce + (map (fn[[a b]] (* a b)) (map vector x y))))","problem":143,"user":"501c1492e4b086d93747d180"},{"problem":143,"code":"#( reduce + ( map * %1 %2 ) )","user":"57561529e4b02ea1147992d3"},{"problem":143,"code":"#(reduce + ((fn [a b]\n(for [i (range (count a))]\n(* (nth a i) (nth b i))\n)\n) %1 %2))","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":143,"code":"(fn [s1 s2] (reduce (fn [result currentV] (+ result (* currentV (get s2 (.indexOf s1 currentV))))) 0 s1))","user":"5d662fb5e4b0db5d338d15e1"},{"problem":143,"code":"#(apply + (map (fn [coll] (apply * coll)) (partition 2 (interleave %1 %2))))","user":"573940e3e4b0cd1946bd106b"},{"problem":143,"code":"(fn dotm\n  [a b]\n  (if (empty? a ) 0\n      (+ (* (first a) (first b)) (dotm (rest a) (rest b)))))","user":"55a21f1ce4b0acc240e3151f"},{"problem":143,"code":"(fn [sum a b]\n    (if (or (empty? a) (empty? b))\n      sum\n      (recur (+ sum (* (first a) (first b))) (rest a) (rest b)))) 0","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"(fn [vec1 vec2]\n  (apply + (map * vec1 vec2))\n)","problem":143,"user":"508fd6bae4b0ea685a20f76b"},{"problem":143,"code":"(fn [x y] (->> (interleave x y) (partition 2 ) (map #(apply * %)) (apply +)))","user":"55aa1637e4b0988bba2ad949"},{"problem":143,"code":"(fn [m1 m2] (reduce + (map * m1 m2)))","user":"5e17bb46e4b00200644e3d5a"},{"problem":143,"code":"(fn [[x y z] [a b c]]\n  (+ (* x a) (* y b) (* z c)))","user":"54e79094e4b024c67c0cf818"},{"problem":143,"code":"(fn [l r]\n   (reduce + (map #(let [[x y] %] (* x y)) (partition 2 (interleave l r)))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"#(reduce + \n  (map (fn [[a b]] (* a b))\n    (partition 2 (interleave %1 %2))))","problem":143,"user":"508c3d42e4b0f17d83ea26b2"},{"code":"(fn a [col1 col2] (loop [c1 col1 c2 col2 s 0] (if(or(nil? c1)(nil? c2)) (identity s) (recur (next c1) (next c2) (+ s (* (first c1) (first c2))) ))))","problem":143,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":143,"code":"(fn dotp [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    0\n    ( + (* (first s1) (first s2)) (dotp (rest s1) (rest s2)))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [x y] (reduce (fn [a [k v]] (+ a (* k v))) 0 (mapv #(vector %1 %2) x y)))","problem":143,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"#(apply + (map (fn [x] (apply * x)) (map list % %2)))","problem":143,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":143,"code":"(fn[coll1 coll2]\n  (reduce + (map * coll1 coll2)))","user":"53e241a6e4b036ad0777e3f0"},{"problem":143,"code":"(comp #(reduce + %) #(map * %1 %2))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map * a b))\n  )","user":"56eb16d8e4b04a395b9a041d"},{"problem":143,"code":"(fn\n  [a b]\n  (reduce  + (map #(* %1 %2) a b)))","user":"58976bfde4b00487982d52bc"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map #(reduce * %)(map vector a b))))","user":"55ede35ce4b0121d4835fde1"},{"problem":143,"code":"(fn [xs ys]\n  (reduce \n   #(+ %1 (apply * %2))\n   0\n   (map vector xs ys)))","user":"56098ccbe4b0053d1b86c7e4"},{"code":"(fn f [seq1 seq2] \n      (loop [s1 seq1 s2 seq2 c 0] \n        (if (zero? (count s1)) \n          c\n          (recur (rest s1) (rest s2) \n                 (+ c (* (first s1) (first s2)))))))","problem":143,"user":"4f036c50535dcb61093f6aba"},{"code":"#(reduce + (map (partial reduce *) (map vector %1 %2)))","problem":143,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn [xs ys]\n   (reduce (fn [sum index]\n             (let [x (xs index)\n                   y (ys index)\n                   product (* x y)]\n               (+ sum product))) 0 (range (count xs))))","problem":143,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":143,"code":"#(loop [sq1 %1 sq2 %2 prod 0]\n   (if (or (empty? sq1) (empty? sq2))\n     prod\n     (recur (rest sq1) (rest sq2) (+ prod (* (first sq1) (first sq2))))\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn [a b]\n  (loop [i 0 s 0]\n    (if (< i (count a))\n      (recur (inc i) (+ s (* (a i) (b i))))\n      s)))","problem":143,"user":"50bce014e4b0594b91591c63"},{"problem":143,"code":"(fn [s1 s2]\n  (apply +\n   (for [idx [0 1 2]]\n     (* (nth s1 idx) (nth s2 idx)))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":143,"code":"#(reduce + (map (fn [x y](* x y))%1 %2))","user":"58ffaddee4b0438e51c2cffe"},{"problem":143,"code":"(fn [x y]\n  (reduce + (map (fn [[a b]] (* a b)) (map vector x y))))","user":"53cbe808e4b00fb29b2212d4"},{"problem":143,"code":"(fn [a b] (loop [a a b b res 0]\n            (if-not (first a)\n              res\n              (recur (rest a) (rest b)\n                     (+ res (* (first a) (first b)))))))","user":"5b7ec039e4b047b03b20375d"},{"problem":143,"code":"(fn\n    [l1 l2]\n\n    (apply +\n      (map\n        (fn [a b]\n          (* a b)\n        )\n        l1\n        l2\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":143,"code":"(fn dot-product [vec1 vec2]\n  (reduce + (map #(* (first %) (second %)) (map vector vec1 vec2))) )","user":"4fbfbd4fe4b081705acca31c"},{"code":"#(reduce (fn [acc i] (+ acc i)) (map * %1 %2))","problem":143,"user":"511ac026e4b0c87c59c9670e"},{"problem":143,"code":"(fn [veca vecb] \n   \n   (reduce + (map-indexed (fn [idx itm] (* itm (nth vecb idx))) veca)) \n   )","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn P143 [ c1 c2 ]\n  (loop [ c1 c1 c2 c2 result []]\n    (if (empty? c1)\n      (apply + result)\n      (recur (rest c1) (rest c2) (conj result (* (first c1) (first c2)))))))","problem":143,"user":"5046f909e4b03b02161376b5"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce #(+ %1 (* (first %2) (second %2))) 0 (partition 2 (interleave v1 v2))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn [x y]\r\n  (loop [a x\r\n         b y\r\n         c []]\r\n    (if (empty? a)\r\n      (apply + c)\r\n      (recur (rest a) (rest b) (conj c (* (first a) (first b)))))))","problem":143,"user":"4e570b60535d8a8b8723a286"},{"problem":143,"code":"(fn dotp [a b]\n  (reduce + (map * a b)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [coll1 coll2]\n  (apply + (map #(* %1 %2) coll1 coll2)))","problem":143,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":143,"code":"(fn [a b]\n   (reduce +\n           (map (fn [[a b]] (* a b)) (partition 2 (interleave a b)))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":143,"code":"(fn dot-problem [a b]\n  (apply + (map #(* %1 %2) a b)))","user":"605a876be4b000d535e6f53c"},{"problem":143,"code":"(fn [v1 v2]\n   (apply + (map #(* %1 %2) v1 v2)))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn [c1 c2] (apply + (map #(* %1 %2) c1 c2)))","problem":143,"user":"4effb663535dcb61093f6a2e"},{"problem":143,"code":"#(\n         loop [arr1 %1 arr2 %2 sum 0 i 0]\n         (\n           if (< i (count arr1))\n           (\n             recur arr1 arr2 (+ sum (* (arr1 i) (arr2 i))) (+ i 1)\n             )\n           sum\n           )\n         )","user":"5eee9352e4b07c55ae4a0512"},{"problem":143,"code":"(fn [v1 v2]\n     (->> (interleave v1 v2)\n          (partition 2)\n          (map #(reduce * %))\n          (reduce +)))","user":"5ed6030de4b016b56eae05db"},{"problem":143,"code":"(fn dot [v w]\n  (reduce + (map * v w)))","user":"559d33b3e4b0ec2b359424d9"},{"problem":143,"code":"(fn [a b] (reduce + (map-indexed #(* (get b %1) %2) a)))","user":"587294f0e4b01531a375ea1e"},{"problem":143,"code":"(fn [v1 v2]\n   (reduce + (map * v1 v2)))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":143,"code":"(fn dot-product [a b]\n  (->> (map vector a b)\n       (reduce #(+ %1 (* (%2 0) (%2 1))) 0)))","user":"5c196e7be4b01240ff5671fb"},{"code":"(fn dot-product\n  [seq1 seq2]\n  (reduce + (map * seq1 seq2)))","problem":143,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [s1 s2]\n  (apply + (map #(apply * %) (partition 2 (interleave s1 s2)))))","problem":143,"user":"5348cab4e4b084c2834f4a5e"},{"problem":143,"code":"(fn [la lb]\n  (reduce + (map * la lb)))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [a b] (reduce + 0 (map #(* %1 %2) a b)))","problem":143,"user":"50981062e4b04e098a4c7268"},{"problem":143,"code":"(fn [s1 s2]\n  (->>\n   (interleave s1 s2)\n   (partition 2)\n   (map #(reduce * %))\n   (reduce +)))","user":"4ec3650f535dcc7ae8597d56"},{"code":"(fn [vector1 vector2]\n   (let [multval (fn [a b] (* (first a) (first b)))]\n     (loop [res 0\n            v1 vector1\n            v2 vector2]\n       (cond\n        (empty? v1) res\n        :else (recur (+ res (multval v1 v2))\n                     (rest v1)\n                     (rest v2))))))","problem":143,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":143,"code":"(fn [& ss]\n  (apply + (apply map * ss)))","user":"5424c523e4b01498b1a71b03"},{"code":"#(loop [values (map vector %1 %2) result 0]\n     (if (empty? values)\n\t       result\n\t       (let [v0 (first (first values)) v1 (last (first values))]\n\t       (recur (rest values) (+ result (* v0 v1))))))","problem":143,"user":"4f066916535dcb61093f6c10"},{"problem":143,"code":"(fn [v1 v2]\n  (reduce + (map #(apply * %) (apply map list [v1 v2]))))","user":"5501a1e1e4b07d26eda61d75"},{"problem":143,"code":"#(->> (for [x (range (count %))] (* (get % x) (get %2 x)))\n      (apply +)\n      )","user":"60471241e4b02d28681c77c9"},{"problem":143,"code":"(fn [a b] (last (reduce (fn [[x d] y]\n                    [(rest x) (+ d (* (first x) y))]) [a 0] b)))","user":"59075e3be4b047aa04b19955"},{"problem":143,"code":"(fn dotx [v0 v1]\n  (+ (* (first v0) (first v1)) (if (= (count v0) 1) 0 (dotx (rest v0) (rest v1)))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":143,"code":"(fn [l1 l2]\n    (loop [rl1 l1, rl2 l2, res 0]\n      (if (or (empty? rl1) (empty? rl2))\n        res\n        (recur \n          (rest rl1) \n          (rest rl2) \n          (+ (* (first rl1) (first rl2)) res)\n          ))))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn dotproduct [x y]\n     (if (empty? (pop x))\n       (* (peek x) (peek y))\n       (+ (* (peek x) (peek y)) (dotproduct (pop x) (pop y)))))","problem":143,"user":"532727bae4b09d4e7a9b54fa"},{"problem":143,"code":"(fn dot-product\n  [lst1 lst2]\n  (->>\n    (interleave lst1 lst2)\n    (partition 2)\n    (map (fn [x] (* (first x) (second x))))\n    (reduce +)))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn dot-product [v1 v2]\n  (reduce + (map * v1 v2)))","problem":143,"user":"5151d574e4b03e678e393ae0"},{"problem":143,"code":"#(apply +(map * % %2))","user":"4db2903f535df7e46ed9b6bf"},{"problem":143,"code":"(fn [x y]\n\t(reduce + (map * x y))\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":143,"code":"(fn dp [v1 v2]\n  (if (> (count v1) 0) \n    (+ (* (first v1) (first v2)) (dp (rest v1) (rest v2)))\n    0\n    \n    )\n  \n  )","user":"51fc44c5e4b0f1313d468a1b"},{"problem":143,"code":"#(apply + \n   (map * %1 %2))","user":"56f881e0e4b08e7d20b96839"},{"code":"(fn dot-product [v1 v2]\n  (reduce + 0 (map * v1 v2)))","problem":143,"user":"516282c3e4b0e6d3c4734711"},{"problem":143,"code":"#(apply + (map (fn [x y] (* x y)) %1 %2))","user":"53e4fa2ce4b036ad0777e454"},{"problem":143,"code":"(fn [vec-a vec-b]\n  (apply + (map * vec-a vec-b)))","user":"56e48302e4b03a7c14b85a4e"},{"problem":143,"code":"(fn dot-product2 [x y]\n (->> (interleave x y)\n      (partition 2 2)\n      (map #(apply * %))\n      (reduce +)))","user":"60777335e4b0a637ed78034f"},{"problem":143,"code":"(fn [x y]\n  (reduce + (map #(* %1 %2) x y)))\n\n;(fn [x y]\n;  (apply + (map #(* %1 %2) x y)))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn [vs ws]\n  (reduce + (map * vs ws)))","problem":143,"user":"50ef96a1e4b0bdaecbb47d9d"},{"problem":143,"code":"(fn [v1 v2]\n   (loop [v1 v1 v2 v2 result 0]\n     (if (empty? v1)\n       result\n       (recur (rest v1) (rest v2) (+ result (* (first v1) (first v2))))\n       )))","user":"602b90c1e4b0d5df2af22266"},{"problem":143,"code":"#(->> (map * %1 %2)\n     (reduce +))","user":"5579bc24e4b05c286339e098"},{"code":"(fn [vec1 vec2]\n (apply + (map * vec1 vec2)))","problem":143,"user":"50621cbde4b0341461c88951"},{"code":"(fn\n  [v1 v2]\n  (reduce + 0 (map * v1 v2)))","problem":143,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [c1 c2]\n  (reduce + (map #(* %1 %2) c1 c2)))","problem":143,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":143,"code":"(fn [v1 v2] \n  (apply +\n         (map * v1 v2)))","user":"5ce867fce4b0a17bb84e2baf"},{"code":"(fn dot-product [f s]\n  (reduce + (map #(* %1 %2) f s)))","problem":143,"user":"4f251302e4b0d66497709ff0"},{"problem":143,"code":"(fn dot-product [x y]\n  (reduce + (map #(* (first %) (last %)) (partition 2 (interleave x y)))))","user":"561bb8dbe4b064ca9f4b1686"},{"problem":143,"code":"(fn [x y] \n   (reduce + (map #(* %1 %2) x y)) \n   )","user":"50b25edae4b03ea88043355e"},{"code":"(fn [coll1 coll2] (reduce + (map-indexed #(* %2 (coll2 %1)) coll1)))","problem":143,"user":"4fb65f2fe4b081705acca2c7"},{"problem":143,"code":"(fn [sa sb]\n    (apply + (map * sa sb)))","user":"56eaad95e4b04a395b9a040f"},{"problem":143,"code":"(fn [seq1 seq2]\n  (if (not (= (count seq1) (count seq2)))\n    nil\n    (loop [src1 seq1 src2 seq2 result 0]\n      (if (empty? src1)\n        result\n        (recur (rest src1)\n               (rest src2)\n               (+ result\n                  (* (first src1)\n                     (first src2))))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":143,"code":"(fn [xs ys]\n   (reduce + (map * xs ys)))","user":"5c387c51e4b0d62ef62d9f83"},{"code":"#(reduce + (map (fn f [x] (reduce * x)) (partition 2 (interleave %1 %2))))","problem":143,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":143,"code":"(fn [vec_1 vec_2] (reduce + (map (fn [it_1 it_2] (* it_1 it_2)) vec_1 vec_2)))","user":"588f500ae4b00487982d51a4"},{"problem":143,"code":"(fn ans-143 [arr1 arr2]\n  (reduce + (map-indexed\n             (fn [index item]\n               (* item (nth arr2 index)))\n             arr1)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":143,"code":";#((fn [x y result]\n;    (if (= nil x y)\n;      result\n;      (recur (next x) (next y) (+ result (* (first x) (first y))))\n;      )\n;    )\n;  %1 %2 0\n;  )\n#(apply + (map * %1 %2))","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn dot-product [a b]\n  (reduce +\n          (map #(* %1 %2)\n               a b)))","problem":143,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":143,"code":"(fn rec [v1 v2]\n  (if (empty? v1)\n    0\n    (+ (rec (rest v1) (rest v2)) (* (first v1) (first v2)))))","user":"5d64013ce4b0c9e5857d502d"},{"code":"(fn [x y]\n  (loop [a x b y res 0]\n    (if (empty? a)\n      res\n      (recur (rest a) (rest b) (+ res (* (first a) (first b)))))))","problem":143,"user":"51e595a6e4b0efabf93c02d8"},{"code":"(fn [xs ys]\n  (loop [dot 0\n         xs xs\n         ys ys]\n    (if (and (seq xs) (seq ys))\n      (recur (+ dot (* (first xs) (first ys))) (rest xs) (rest ys))\n      dot)))","problem":143,"user":"511442d0e4b0e9c109bb74d5"},{"problem":143,"code":"(fn [vec1 vec2]\n  (reduce\n    (fn [sum [x y]] (+ sum (* x y)))\n    0\n    (partition 2 (interleave vec1 vec2))))","user":"54c8d4a8e4b045293a27f654"},{"code":"(fn [x y]\n  (reduce +\n    (map \n      #(* (first %1) (last %1)) (partition 2 (interleave x y)))))","problem":143,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":143,"code":"(fn [v1 v2]\n        (reduce + (for [i (range (count v1))]\n           (* (v1 i) (v2 i)))))","user":"53f891eee4b0de5c4184856d"},{"problem":143,"code":"#(apply + (map (fn dot [n1 n2] (* n1 n2)) %1 %2))","user":"5e380e72e4b01d43a70e8db0"},{"problem":143,"code":"(fn [ac bc] (reduce + (map * ac bc)))","user":"55632016e4b0c656e3ff17e4"},{"code":"(fn [f s] (apply + (map * f s)))","problem":143,"user":"51f7dd27e4b06ff1c25c52dc"},{"code":"(fn [x y]\n   (apply + (map * x y))\n   )","problem":143,"user":"528ce039e4b0239c8a67aebc"},{"problem":143,"code":"(fn [a b] (->> (interleave a b) (partition 2) (map #(apply * %)) (reduce +)))","user":"4eadc217535d7eef30807321"},{"problem":143,"code":"(fn [a b]\n  \t(->> (interleave a b)\n       \t (partition 2)\n       \t (reduce #(+ %1 (apply * %2)) 0)))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":143,"code":"(fn [c1 c2]\n  (->> (map * c1 c2)\n       (reduce +))\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":143,"code":"(fn my-dot-product\n  [a b]\n  (apply + (map #(* %1 %2) a b)))","user":"59f44189e4b0966464fe6aab"},{"problem":143,"code":"(fn dot [x y] (reduce + (map #(apply * %) (partition 2 (interleave x y)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn [a b] (reduce + (map #(* % %2) a b)))","problem":143,"user":"4e57d1e2535d8a8b8723a289"},{"problem":143,"code":"(fn dp [x y]\n  (apply + (map * x y)))","user":"53d64811e4b0e771c3025456"},{"problem":143,"code":"(fn dot-product [v1 v2]\n  (reduce + (map #(reduce * %) (partition 2 (interleave v1 v2)))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [x y]\n      (reduce + \n\t      (map #(* (nth x %) (nth y %)) (range (count x)))))","problem":143,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":143,"code":"(fn dp [a b]\n  (reduce + (map * a b)))","user":"607dd962e4b03d835a6eaed2"},{"problem":143,"code":"(fn x \n  ([a b] (x a b 0))   \n  ([[a & tail-a] [b & tail-b] sum]\n   (if (nil? a) \n     sum\n  \t (recur tail-a tail-b (+ sum (* a b))))))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn [a b] (reduce + (map (fn [[a b]] (* a b)) (map vector a b))))","problem":143,"user":"4f030a38535dcb61093f6a47"},{"code":"(fn product [x y]\n  (if (empty? x)\n    0\n    (+ (* (first x) (first y)) (product (rest x) (rest y)))))","problem":143,"user":"52e17e66e4b09f7907dd1423"},{"problem":143,"code":"(fn [l r]\n  (loop [ll l\n         rl r\n         sum 0]\n    (if (nil? ll)\n      sum\n      (recur (next ll) (next rl) (+ sum (* (first ll) (first rl)))))))","user":"56051095e4b08b23635d3162"},{"problem":143,"code":"(fn dot-product [xs ys]\n  (reduce +\n          (map * xs ys)))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [c1 c2]\n  (apply +  (map * c1 c2)))","problem":143,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn [s1 s2] \n  (reduce #(+ %1 %2) \n           0 \n           (map * s1 s2)))","problem":143,"user":"523a9fc9e4b081681ca7adca"},{"problem":143,"code":"(fn [x y] (reduce + (map #(apply * %) (partition 2 2 (interleave x y)))))","user":"529c722de4b04e0c58e87b63"},{"code":"(fn [a b]\n    (reduce + (map * a b)))","problem":143,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn [x y] \n              (reduce + (map #(* %1 %2) x y)))","problem":143,"user":"4fa85ae4e4b081705acca1d3"},{"problem":143,"code":"(fn [a b] (let [pairs (partition 2 (interleave a b))\n                  products (map (partial reduce *) pairs)\n                  ]\n              (reduce + products)\n    ))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":143,"code":"(fn dot-product\n  [c1 c2]\n  (->> (map #(* %1 %2) c1 c2)\n       (reduce +)))","user":"4e586949535d8a8b8723a292"},{"problem":143,"code":"(fn dot [A B]\n\t(reduce + 0 (map #(* %1 %2) A B))\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [v1 v2] (reduce + (map (partial apply *) (partition 2 (interleave v1 v2)))))","problem":143,"user":"516db4f6e4b046df6fbb76a0"},{"problem":143,"code":"(fn [seq1 seq2]\n  (reduce + (map * seq1 seq2)))","user":"58ee5371e4b056aecfd47da8"},{"problem":143,"code":"(fn dotp [v1 v2] (reduce + (map * v1 v2)))","user":"55306f9de4b076ab5578f814"},{"problem":143,"code":"(fn [vec1 vec2]\n  (reduce +\n          (map #(* %1 %2) vec1 vec2)))","user":"567bf820e4b05957ce8c61ad"},{"problem":143,"code":"(fn [& s] (->>\n           (apply map vector s)\n           (map (partial reduce * 1))\n           (reduce +)))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":143,"code":"(fn function-143\n\n  [seq1 seq2]\n  (apply + (for [i (range (count seq1)) :let [x (get seq1 i)] :let [y (get seq2 i)] :let [r (* x y)]] r)))","user":"598d0dc3e4b02b9968b84d18"},{"problem":143,"code":"(fn [a b] \n  (+ \n   (* (first a) (first b))\n   (* (second a) (second b))\n   (* (last a) (last b))))","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn [a b] (reduce (fn [s [x y]] (+ s (* x y)))\n                  0\n                  (partition 2\n                             (interleave a b))))","problem":143,"user":"50f53694e4b057d4c52de881"},{"code":"(fn t [x1 x2]\n  (loop [x x1 y x2 sum 0]\n    (if (empty? x)\n        sum\n        (recur (rest x) (rest y) (+ sum (* (first x) (first y))))\n    )\n  )\n)","problem":143,"user":"4fcf5292e4b03432b189f40e"},{"problem":143,"code":"(fn dot [xs ys]\n  (reduce + (map * xs ys)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":143,"code":"#(loop[v1 %1, v2 %2 r 0   ]\n  (cond\n    (nil? v1) r\n    (nil? v2) r\n    :else (recur (next v1) (next v2 ) (+ r (* (first v1) (first v2))))\n    )\n  )","user":"5c4ab449e4b0f9f7a8770e57"},{"problem":143,"code":"(fn dotProduct\n  [colla collb]\n  (if (empty? colla)\n    0\n    (+ (* (first colla) (first collb)) (dotProduct (rest colla) (rest collb)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"#(loop [x %1 y %2 res 0]\n   (if (empty? x)\n     res\n     (recur (rest x) (rest y) (+ res (* (first x) (first y))))))","problem":143,"user":"5180a93fe4b0e3fc13e244e8"},{"code":"(fn dotp [x y] \n  ((fn dotp0 [xs ys acc]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) \n             (rest ys) \n             (+ acc \n               (* \n                (first xs) \n                (first ys)))))) \n  x y 0))","problem":143,"user":"5334d4f2e4b0656e627bfd71"},{"problem":143,"code":"(fn f [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    0\n    (+ (* (first xs) (first ys)) (f (rest xs) (rest ys)))))","user":"58731176e4b01531a375ea2a"},{"problem":143,"code":"(fn [s1 s2]\n  (reduce + (map (fn [x y] (* x y)) s1 s2)))","user":"577629abe4b0979f8965162e"},{"code":"(fn anton\n   ([x y] (anton x y 0))\n   ([x y z] \n    (if \n      (= [] x) \n      z \n      (anton (rest x) (rest y) (+ z (* (first x) (first y)))))))","problem":143,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [xs1 xs2]\n  (reduce + (map (fn [x1 x2]\n                   (* x1 x2)) xs1 xs2)))","problem":143,"user":"4ff505c8e4b0678c553fc364"},{"problem":143,"code":"(fn [col1 col2]\n    (reduce +\n            (map * col1 col2)))","user":"591f5124e4b09b4ee5954c45"},{"problem":143,"code":"(fn [a b] (apply +\n                 (map (fn [[x y]] (* x y))\n                      (map #(vector %1 %2) a b))))","user":"5992dc6ae4b0866487ed0d7d"},{"code":"#(reduce +(map * %1 %2))","problem":143,"user":"5017eface4b02f523d7cc5e7"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 n 0]\n    (if (empty? s1)\n      n\n      (recur (rest s1)\n             (rest s2)\n             (+ n (* (first s1) (first s2)))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn [x y]\n  (apply +\n         (map * x y)))","problem":143,"user":"5094057fe4b097f48cc38593"},{"problem":143,"code":"(fn\n [[x y z] [a b c]]\n (+ (* x a) (* y b) (* z c)))","user":"55e732c5e4b050e68259b492"},{"code":"(fn [a b] \n   (reduce (fn [a b] (+ a (* (first b) (second b)))) 0 (map vector a b)))","problem":143,"user":"534d1173e4b084c2834f4a98"},{"problem":143,"code":"(fn [x y]\n  (loop [n x m y res 0]\n    (if (empty? n)\n      res\n      (recur (rest n) (rest m) (+ res (* (first n) (first m)))))))","user":"5a9482b7e4b0d174b936c737"},{"problem":143,"code":"(fn [vector1 vector2]\n  (loop [dotprod 0\n         v1 vector1\n         v2 vector2]\n    (if (seq v1)\n      (let [[h1 & rest1] v1\n            [h2 & rest2] v2]\n        (recur (+ dotprod (* h1 h2)) rest1 rest2 ))\n      dotprod )))\n;; DAMNNN, I made this way more complicated than I should have!\n;; Look how easy this actually is:\n;; => #(reduce + (map * %1 %2))","user":"59c76402e4b0a024fb6ae542"},{"code":"(fn [v1 v2]\n    (reduce + (map (fn [[a b]] (* a b)) (map vector v1 v2))))","problem":143,"user":"506755b3e4b03d366d7cb2bc"},{"problem":143,"code":"(fn dot-product\n  [a b]\n  \n  (reduce + (map * a b)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":143,"code":"#(reduce + (mapv * %1 %2))","user":"56f15eade4b04a395b9a048e"},{"problem":143,"code":"(fn f [v1 v2] (->> (range (count v1))\n                     (map #(* (v1 % ) (v2 %)))\n                     (apply +)))","user":"5493d908e4b0b312c081ff52"},{"problem":143,"code":"#(reduce +\n        (map * %1 %2))","user":"5640eb50e4b08d4f616f5eec"},{"problem":143,"code":"#(loop [x 0, res 0](\n        if (< x (count %1))\n        (recur (inc x) (+ res (* (%1 x) (%2 x)))) \n        res )\n    )","user":"5e85d0bde4b09a7a73c8bbd6"},{"problem":143,"code":"(fn [a b]\n   (reduce + (mapv * a b)))","user":"55ba70f9e4b01b9910ae29d4"},{"code":"(fn [c d]\n  (let [z (map vector c d)]\n    (reduce (fn [r [x y]] (+ r (* x y))) 0 z)))","problem":143,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn [lst0 lst1] (apply + (map * lst0 lst1)))","problem":143,"user":"4ef7a483535dced4c769f258"},{"code":"(fn [s1 s2]\n  (->> (map #(vector % %2) s1 s2)\n       (map #(* (first %) (second %)))\n       (reduce + 0)))","problem":143,"user":"523bd9c0e4b07becd5be2201"},{"problem":143,"code":"(fn dot [a b]\n    (reduce + (map #(apply * %) (partition 2 (interleave a b)))))","user":"581a703de4b0e114eb51a005"},{"code":"(fn [v w] (reduce + (map #(* % %2) v w)))","problem":143,"user":"4dc1bd76535d020aff1edf8d"},{"problem":143,"code":"(fn dot1\n     [[x & xs] [y & ys]]\n       (if (nil? xs)\n         (* x y)\n         (+ (* x  y) (dot1 xs ys))))","user":"5cd4c3dae4b0ccb061962925"},{"problem":143,"code":"(fn dot [v1 v2]\n  (->> [v1 v2]\n       (apply interleave)\n       (partition 2)\n       (map (fn [[a b]] (* a b)))\n       (reduce +)))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":143,"code":"(fn dot-product [v w] (if (empty? v) 0 (+ (* (first v) (first w)) (dot-product (rest v) (rest w)))))","user":"57d0fce5e4b0bd073c202364"},{"code":";(fn [s1 &s2] (clojure.walk/walk #(* % %) #(apply + %) s1 s2))\n\n;#(Math/dot %)\n\n#( apply + (map * % %2))","problem":143,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":143,"code":"(fn dot-prod [vec-a vec-b]\n  (reduce + (map * vec-a vec-b)))","user":"5227eacee4b0186687e23a5e"},{"problem":143,"code":"(fn [x y] (\n\t\t+\n\t\t(* (x 0) (y 0))\n\t\t(* (x 1) (y 1))\n\t\t(* (x 2) (y 2))\n\t\t)\n\t)","user":"54dd167be4b024c67c0cf78f"},{"code":"(comp\n  (partial reduce +)\n  (partial map *))","problem":143,"user":"4dc0ff08535d020aff1edf84"},{"problem":143,"code":"(fn [vec1 vec2]\n  (loop [v1 vec1\n         v2 vec2\n         lst ()]\n    (if (empty? v1)\n      (reduce + lst)\n      (recur (rest v1) (rest v2) (cons (* (first v1) (first v2)) lst)))))","user":"57f81549e4b0d3187e900918"},{"problem":143,"code":"(fn calc\n  ([arr1 arr2] (calc arr1 arr2 0))\n  ([arr1 arr2 acc] (if (= (count arr1) 0) acc (calc (rest arr1) (rest arr2) (+ acc (* (first arr1) (first arr2)))))))","user":"5e88a676e4b0cb016954630a"},{"problem":143,"code":"(fn [n1 n2]\n  (reduce + (map * n1 n2))\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":143,"code":"(fn dot-product [vec1 vec2] \n (->>\n  (map vector vec1 vec2)\n  (map #(* (first %)  (second %)))\n  (reduce +)\n ))","user":"58182480e4b0c0e9c07b83a7"},{"problem":143,"code":"(fn a [n b c]\n\t(if (and (< n (count b)) (< n (count c))) \n\t\t(+ (* (get b n) (get c n)) (a (+ n 1) b c))\n\t\t0\n\t)\n) 0","user":"5710e574e4b09c608db7043b"},{"code":"(fn mydot [a b]\n  (if (empty? a)\n    0\n    (+ (* (first a) (first b)) (mydot (rest a) (rest b)))\n  )\n)","problem":143,"user":"4f725201e4b07046d9f4f02f"},{"problem":143,"code":"#(reduce + (loop [x % y %2 res []]\n             (if (empty? x)\n               res\n               (recur (rest x) (rest y) (conj res (* (first x) (first y)))))))","user":"5964c614e4b069c0a1a19770"},{"code":"(fn [c1 c2]\n  (reduce +\n          (map #(* %1 %2) c1 c2)))","problem":143,"user":"51592b81e4b0394f658fe22c"},{"problem":143,"code":"(fn [c1 c2] (reduce + (map #(reduce * %) (partition 2 (interleave c1 c2)))))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"(fn [x y]\n  (reduce +\n    (map \n      (partial apply *)\n      (partition 2 (interleave x y)))))","problem":143,"user":"4f2e0369e4b0d6649770a064"},{"problem":143,"code":"(fn [a b]\n  (reduce + (map #(let [[x y] %] (* x y)) (partition 2 (interleave a b)))))","user":"5756f7d7e4b02ea1147992e9"},{"problem":143,"code":"(fn dotprod\n  [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         res 0]\n    (if (seq c1)\n      (let [x (first c1)\n            y (first c2)]\n      \t(recur (rest c1) (rest c2) (+ res (* x y))))\n      res)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":143,"code":"(fn [as bs]\n            (loop [ass as, bss bs, acc 0]\n              (if-not (and (seq ass) (seq bss))\n                acc\n                (recur (rest ass) (rest bss) (+ acc (* (first ass) (first bss))))\n                )\n              )\n            )","user":"52149e21e4b0961f15ac4d94"},{"code":"(fn [c1 c2]\n    (reduce + (map #(* %1 %2) c1 c2)))","problem":143,"user":"4dc29a1d535d020aff1edf96"},{"problem":143,"code":"(fn [lst_1 lst_2]\n  (reduce + (map * lst_1 lst_2)))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"(fn [s t]\n  (apply + (map * s t)))","problem":143,"user":"51a4416ae4b0def3c5c5868c"},{"problem":143,"code":"(fn my-dotprod\n  ([xs ys] (my-dotprod xs ys 0))\n  ([[x & xs] [y & ys] out]\n    (let [out  (+ out (* x y))\n          stop (or (empty? xs) (empty? ys))]\n      (if stop\n        out\n        (recur xs ys out)\n      )\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"code":"#(reduce + (map (partial apply *) (map vector % %2)))","problem":143,"user":"539a2901e4b0b51d73faaf0f"},{"problem":143,"code":"(fn [a, b] (reduce + (map * a b)))","user":"54336443e4b0b6b47310fcde"},{"problem":143,"code":"(fn [coll1 coll2]\n  (->> (map vector coll1 coll2)\n       (map #(apply * %))\n       (reduce + 0)))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"(comp (partial apply +) (partial map #(* %1 %2)))","problem":143,"user":"51f59607e4b0abb92f97f9d5"},{"problem":143,"code":"(fn dot-product\n  [l-1 l-2]\n  (reduce + (map-indexed #(* %2 (get l-2 %1)) l-1))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"problem":143,"code":"#(apply + (map * %1 %2 ))","user":"568c2d96e4b0dcc4269f40af"},{"problem":143,"code":"(fn[a b]\n(reduce + (map * a b)))","user":"5a99b844e4b0d174b936c7ab"},{"problem":143,"code":"(fn p143[x y]\n  (loop [rx x ry y accum 0]\n    (if (empty? rx)\n      accum\n      (recur (rest rx) (rest ry) \n             (+ accum (* (first rx) (first ry)))))\n  ))","user":"52ab61f5e4b0c58976d9ac75"},{"problem":143,"code":"#(reduce + 0 (map (partial apply *) (partition 2 (interleave %1 %2))))","user":"571dd145e4b0145328a76283"},{"problem":143,"code":"(fn [s1 s2]\n  (loop [sum 0 fs s1 sc s2]\n    (if (and (empty? fs) (empty? sc))\n      sum\n      (recur\n        (+ sum (* (first fs) (first sc)))\n        (rest fs)\n        (rest sc)))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"#(->> (map * %1 %2)\n      (reduce +))","problem":143,"user":"5117c31ee4b0e0897831a60c"},{"problem":143,"code":"(fn [[a b c] [x y z]] (+ (* a x) (* b y) (* c z)))","user":"54a6baaee4b09f271ff37c8a"},{"code":"(fn [a b] (reduce + (map-indexed (fn [i e] (* e(nth b i))) a)))","problem":143,"user":"51307b84e4b08c712d3fae39"},{"problem":143,"code":"(fn dp [coll1 coll2] (apply + (map #(apply * %) (map vector coll1 coll2))))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [x y] \n  (apply + (map #(* %1 %2) x y)))","problem":143,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [[a b c][x y z]] (+ (* a x) (* b y) (* c z)))","problem":143,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [x y] (reduce #(+ (* (first %2) (second %2)) %1) 0 (map vector x y)))","problem":143,"user":"53403110e4b085b17e897da6"},{"problem":143,"code":"(fn rz-dot-product [x y]\n  (reduce + (map * x y)))","user":"5c24c654e4b07e362c2305a7"},{"problem":143,"code":"(fn donna [a b] (reduce + (map #(* %1 %2) a b)))","user":"56278266e4b00e49c7cb47d3"},{"problem":143,"code":"(fn [x y]\n            (reduce + (map * x y)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":143,"code":"; longwinded\n\n(fn [a1 a2]\n  (loop [i (dec (count a1))\n         res 0]\n    (if (< i 0)\n      res\n      (recur (dec i) (+ res (* (nth a1 i) (nth a2 i)))))\n  )\n)","user":"56f2611fe4b04a395b9a04a2"},{"problem":143,"code":"(fn [c1 c2]\n  (apply + (map #(* %1 %2) c1 c2))\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":143,"code":"(fn [b a]\n  (loop [n (dec (count b)) sum 0]\n    (if (< n 0)\n      sum\n      (recur (dec n) (+ sum (* (get a n) (get b n))))\n    )\n  )\n)","user":"5ce44ee2e4b0a17bb84e2b57"},{"code":"(fn [x y] (apply + (map #(* %1 %2) x y)))","problem":143,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn [& seqs] (reduce + (apply map * seqs)))","problem":143,"user":"4eecc9ad535d93acb0a668b4"},{"code":"(fn [v1 v2]\n  (->> [v1 v2]\n       (apply interleave)\n       (partition 2)\n       (map #(apply * %))\n       (reduce +)))","problem":143,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":143,"code":"(fn dot\n  [c1 c2]\n  {:pre [(= (count c1) (count c2))]}\n  (reduce + (map * c1 c2)))","user":"592518e8e4b072a2710fce67"},{"problem":143,"code":"(fn dot-prod [s1 s2]\n  (->> (map * s1 s2) (reduce + 0))\n)","user":"60335b35e4b0d5df2af222bf"},{"problem":143,"code":"(fn [coll coll2] (reduce + (map * coll coll2)))","user":"4e526cc4535d302ef430da74"},{"problem":143,"code":"(fn [a b] (apply +  (map #(apply * %)  (map vector a b))))","user":"564a560ae4b0284900eef654"},{"problem":143,"code":"#(reduce + (map (fn [x y] (* x  y))  %1 %2))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn [xs ys]\n  (reduce + 0 (map * xs ys))\n  )","problem":143,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":143,"code":"#(apply + (map * % %2 )\n       )","user":"59dfb8dbe4b08badc2a0c4da"},{"problem":143,"code":"#(apply + (map (partial apply *) (partition 2 (interleave %1 %2))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [x y]\n  (reduce \n    #(+ % %2)\n    (map * x y)))","problem":143,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn dot-product-143\n  [c1 c2]\n  (reduce + (map #(reduce * %) (partition 2 (interleave c1 c2)))))","problem":143,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":143,"code":"#(apply + (map (partial apply *) (map vector %1 %2)))","user":"5df08767e4b093ff717275bf"},{"code":"(fn calc [[first1 & rest1] [first2 & rest2]] \n  (+ (* first1 first2) (if rest1 (calc rest1 rest2) 0)))","problem":143,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"(fn dot-product [fx ss]\r\n  (loop [result 0\r\n         xs (seq fx)\r\n         ys (seq ss)]\r\n    (if (and xs ys)\r\n      (recur (+ result (* (first xs) (first ys)))\r\n             (next xs)\r\n             (next ys))\r\n      result)))","problem":143,"user":"4e707714535d5021c1a89638"},{"problem":143,"code":"(fn [v1 v2] (reduce (fn [a b] (+ a (* (nth v1 b) (nth v2 b)))) 0 (range 0 (count v1))))","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [firstSeq secondSeq] (loop [x firstSeq\n                                y secondSeq\n                                res 0]\n                                (if (seq x)\n                                  (recur\n                                     (rest x)\n                                     (rest y)\n                                     (+ res (* (first x) (first y)))\n                                  )\n                                  res\n                                )))","problem":143,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn [a b](reduce + (map * a b)))","problem":143,"user":"4fb86dc9e4b081705acca2d8"},{"problem":143,"code":"#(->> (map (juxt *) %1 %2)\n       (flatten)\n       (reduce +))","user":"51456858e4b0e88796073408"},{"problem":143,"code":"(fn my-dotP [lst1 lst2]\n  (reduce + (map * lst1 lst2)))","user":"59dd387be4b0a0ac046f2502"},{"problem":143,"code":"(fn [x y]\n    (loop [a_x x a_y y p 0]\n          (if (empty? a_x)\n              p\n              (recur (rest a_x) (rest a_y) (+ p (* (first a_x) (first a_y)))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"#(apply + (map * % %2))","problem":143,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn [x y](reduce + (map (fn [x] (* (first x) (last x)))\n     (partition 2 (interleave x y)))))","problem":143,"user":"4e9ff8d0535d7eef3080729c"},{"problem":143,"code":"(fn [a b]\n  (reduce\n   +\n   (map * a b)))","user":"552456e3e4b0882d96d091c2"},{"problem":143,"code":"(fn [a b]\n  (letfn [(dot-product [seq1 seq2]\n  (if (= (count seq1) 0)\n    0\n    (+ (* (first seq1) (first seq2)) (dot-product (rest seq1) (rest seq2)))\n    ))]\n    (dot-product a b))\n  )","user":"50f89404e4b0aafb827eb204"},{"code":"#((fn mydot [a b acc]\n  (if (< 0 (count a))\n    (mydot (pop a) (pop b) (+ acc (* (peek a) (peek b))))\n  acc)) %1 %2 0)","problem":143,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn dotProduct [x , y]\n   (if (= 0 (count x) ) 0\n     (+ (* (first x) (first y)) ( dotProduct (rest x) (rest y) ) )\n     )\n   )","problem":143,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":143,"code":"(fn dot\n  [v1 v2]\n  (reduce #(+ % (apply * %2)) 0 (map vector v1 v2)))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn dot-product [vec1 vec2]\n  (+ (* (vec1 0) (vec2 0)) (* (vec1 1) (vec2 1)) (* (vec1 2) (vec2 2))))","problem":143,"user":"4e9a3a03535dbda64a6f6b70"},{"code":"(fn f [a b]\n  (apply + (map * a b))\n)","problem":143,"user":"50f4894be4b004d364930528"},{"problem":143,"code":"#(->>\n   (map * %1 %2)\n   (apply +))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn [y z]\n  (loop [a y b z sum 0]\n   (if (empty? a)\n      sum\n      (recur (next a) (next b) (+ sum (* (first a) (first b)))))))","problem":143,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn [a b] (reduce + (map #(* (first %) (second %)) (partition 2 (interleave a b)))))","problem":143,"user":"5150a7d7e4b03e678e393abb"},{"code":"(fn [v1 v2]\n  (reduce +\n          (map\n           #(* (nth v1 %1) (nth v2 %1))\n           (range (count v1))\n           )\n          )\n  )","problem":143,"user":"4f031883535dcb61093f6a5e"},{"problem":143,"code":"#(->> (map * %1 %2)\n       (reduce +))","user":"54074fc5e4b0addc1aec66b6"},{"code":"#(apply + (map * %1 %2))","problem":143,"user":"4ee82539535d93acb0a66878"},{"code":"#(reduce + (map (fn [a b] (* a b)) % %2))","problem":143,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn dot [v1 v2]\n  (reduce + (vec (map * v1 v2))))","problem":143,"user":"4faafccde4b081705acca209"},{"problem":143,"code":"(fn dot_product [a b]\n  (if (empty? (rest a))\n    (* (first a) (first b))\n    (+ (* (first a) (first b)) (dot_product (rest a) (rest b)))))","user":"57a17145e4b0c3d858beb8eb"},{"problem":143,"code":"(fn mydot [x y]\n        (if (> (count x) 0)\n        (+ (* (first x) (first y))\n           (mydot (rest x) (rest y)))\n        0))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":143,"code":"(fn dot-product\n  [s1 s2]\n  (loop [product 0\n         i 0]\n    (if (= i (count s1))\n      product\n      (recur (+ product (* (nth s1 i) (nth s2 i)))\n             (inc i)))))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":143,"code":"(fn [vec1 vec2] (reduce + (map #(* %1 %2) vec1 vec2)))","user":"53844970e4b06839e8705eef"},{"problem":143,"code":"(fn dot-product [xs ys]\n  (reduce + (map #(* % %2) xs ys)))\n\n;; we can always lay-down to the recursion option\n#_(fn dot-product\n  ([xs ys] (apply + (dot-product xs ys [])))\n  ([[head1 & tail1] [head2 & tail2] acc]\n  (if (or (nil? head1) (nil? head2))\n      acc\n      (dot-product tail1 tail2 (conj acc (* head1 head2))))))","user":"5553b729e4b0deb715856e05"},{"problem":143,"code":"(fn [s t] (reduce + (map * s t)))","user":"548f5086e4b0e286459a1239"},{"code":"(fn [as bs]\n  (apply + (map * as bs)))","problem":143,"user":"50f48298e4b004d364930527"},{"problem":143,"code":"(fn foo [one two] \n    (loop [one one\n            two two\n            res 0\n            ]\n        (if (empty? one) res\n            (recur (rest one) (rest two) \n                (+ res (* (first one ) (first two))))\n        )\n    )\n            \n)","user":"6038b6b4e4b0d5df2af222ef"},{"problem":143,"code":"#(reduce + (map * % %2) )","user":"5707abfce4b0b0fb43fd068d"},{"problem":143,"code":"(fn [x y]\n  (->> (map #(* %1 %2) x y) (reduce +)))","user":"543496e1e4b0b6b47310fcf2"},{"code":"(fn [& args]\n  (reduce (fn [acc [a b]] (+ acc (* a b)))\n          0\n          (apply map vector args)))","problem":143,"user":"5298cc88e4b02ebb4ef75065"}]