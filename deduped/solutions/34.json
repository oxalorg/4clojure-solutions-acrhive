[{"code":"(fn [lower upper]\n  (loop [i lower acc []]\n    (if (= i upper)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"50cfcad6e4b00b15ecee9752"},{"problem":34,"code":"#(loop [f () s %1 e %2]\n   (if (= s e)\n     f\n     (recur (concat f [s]) (inc s) e)\n   ))","user":"571ac0b8e4b07c98581c3b5b"},{"code":"(fn rng [a z] \n  (loop [a a z z acc '()] (if (> z a) (recur a (dec z) (cons (dec z) acc)) acc)))","problem":34,"user":"5156e767e4b04360f2428e6b"},{"problem":34,"code":"(fn func [start end]\n  (loop [n start res []]\n    (if (>= n end) res (recur (inc n) (conj res n)))))","user":"55f95782e4b03cbcff9738bf"},{"problem":34,"code":"(fn range2 [start end]\n\t(if (= start end)\n\t\t'()\n\t\t(cons start (range2 (inc start) end)))\n\t)","user":"5a025edde4b01bb0ae8afd64"},{"code":"#(loop [ x %1   a [] ]\n(if (= x %2) a (recur (inc x) (conj a x))))","problem":34,"user":"4fbd292fe4b081705acca300"},{"problem":34,"code":"#(loop [b (dec %1) e (dec %2) s nil]\n   (if (= b e) s (recur b (dec e) (cons e s))))","user":"592bb806e4b072a2710fcf46"},{"problem":34,"code":"(fn [a b] (take (- b a) (clojure.core/iterate inc a)))","user":"5aa1e0f1e4b0d174b936c84e"},{"problem":34,"code":"#(take\n  (- %2 %1)\n  (iterate inc %1))","user":"550f1c99e4b06e50f9beb171"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (if (= a b)\n    '()\n    (conj (my-range (+ a 1) b) a)))","user":"545d881de4b01be26fd7466f"},{"code":"(fn build [curr mx]\n  (if (>= curr mx)\n      []\n      (cons curr (build (inc curr) mx))))","problem":34,"user":"4e7a5395535db169f9c796ab"},{"code":"(fn m-range [a b]\n  (if (= a b)\n    '()\n    (conj (m-range (inc a) b) a)))","problem":34,"user":"4eeae8f0535d93acb0a668a2"},{"code":"(fn [b e]\n  (loop [c b rang []]\n    (if (>= c e)\n      rang\n      (recur (inc c) (concat rang [c]))\n      )\n    )\n  )","problem":34,"user":"512339fce4b03b44edbed434"},{"code":"(fn [start end] \n  (take (- end start) (iterate inc start)))","problem":34,"user":"537e59ffe4b06839e8705ea3"},{"problem":34,"code":"(fn [start end]\n  (loop [i start, acc []]\n    (if (= i end)\n      acc\n      (recur (inc i) (conj acc i)))\n    )\n  )","user":"5ab5f60be4b073f177442643"},{"problem":34,"code":"(fn my-range\n  [x y]\n  (loop [final-list (list x)\n         limit y]\n    (if (= (last final-list) (dec limit))\n      (sort final-list)\n      (recur (reverse (conj final-list (inc (last final-list)))) limit))))","user":"5d9c8a85e4b0eb781811cdad"},{"problem":34,"code":"(fn [from to] (reverse (loop [coll () cnt from] (if (= cnt to) coll  (recur (conj  coll cnt) (inc cnt))))) )","user":"5cf53196e4b087f62be35a94"},{"code":"(fn [n1 n2]\n\t(take (- n2 n1) (iterate inc n1))\n)","problem":34,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"#(loop [start %1 stop %2 acc '()]\n  (if (= start stop)\n      acc\n      (recur (+ 1 start) stop (concat acc (list start)))))","problem":34,"user":"4f039bbe535dcb61093f6b39"},{"code":"(fn [a b] (reverse(loop [result '() i a] (if (= i b) result (recur (cons i result) (inc i))))))","problem":34,"user":"4e8aef69535d65386fec2114"},{"code":"(fn [min max] (loop [i min\n                     rt [i]] \n                      (let [inc-i (inc i)] \n                      (if (< (+ (last rt) 1) max)\n                        (recur  inc-i\n                                (conj rt inc-i))\n                      rt))))","problem":34,"user":"4ef0a39b535dced4c769f20d"},{"problem":34,"code":"(fn [start stop]\n  (take-while\n   (partial >= (- stop 1))\n   (iterate inc start)))","user":"53bc10f5e4b047364c04450d"},{"code":"(fn [f,t] (reverse (loop [i f xs []]\r\n       (if (= i t)\r\n\t       xs\r\n\t       (recur (+ i 1) (cons i xs))))))","problem":34,"user":"4ddc620d535d02782fcbea06"},{"problem":34,"code":"(fn [start finish] \n  (loop [i start\n        xList '()]\n    (if (< i finish)\n      (recur (inc i) (conj xList i))\n      (reverse xList)\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":34,"code":"#(loop [i %1\n            v []]\n          (if (= %2 i)\n              (reverse v)\n              (recur (inc i) (cons i v))))","user":"56fd058be4b08d47c97781a1"},{"code":"(fn [x,y](filter #(and (>= % x) (< % y)) (take-while #(< % 10) (iterate #(+ % 1) -2))))","problem":34,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn [s e] (take (- e s) (iterate inc s)))","problem":34,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":34,"code":"#(loop [n %1 r []] (if (= n %2) r (recur (inc n) (conj r n))))","user":"544673c0e4b032a45b8693b0"},{"problem":34,"code":"(fn rg [a b]\n  (take (- b a) (iterate inc a))\n  )","user":"5820924ee4b04b46fc4b0f58"},{"problem":34,"code":"#(loop [a %2 aux '()]\n  (cond \n    (= a %1) aux\n    :else (recur (- a 1) (conj aux (- a 1)))\n  )\n   \n)","user":"5e7aba9fe4b085ba37836e0c"},{"problem":34,"code":"#(take (- %2 %1) ((fn r [s]\n    (lazy-seq (cons s (r (inc s))))) %1))","user":"56c6490de4b05cc29241eeaf"},{"code":"(fn [a m] (reductions + a (repeat (- m a 1) 1)))","problem":34,"user":"515cf9b5e4b00901442db1d4"},{"problem":34,"code":"(fn [start stop]\n  (loop [current start\n         result []]\n    (if (< current stop)\n      (recur (inc current) (conj result current))\n      result)))","user":"5189bf9ee4b0288ada3dbdaf"},{"code":"(fn r [x, y]\n  (if (= x y) nil\n  (cons x (r (+ 1 x) y))))","problem":34,"user":"4ea0c284535d7eef308072ad"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (loop [r [] \n         x a \n         y b]\n    (if (< x y)\n      (recur (conj r x) (inc x) y)\n      r)))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [s e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"4e2f377a535deb9a81d77f10"},{"problem":34,"code":"#(loop [r [] n %1]\n  (if (= n %2) r\n    (recur (conj r n) (inc n))\n  ))","user":"5f9c4113e4b0715f5002d821"},{"code":"(fn rng [s e]\n  (when (< s e)\n    (lazy-seq (conj (rng (inc s) e) s))))","problem":34,"user":"4e80aa10535db62dc21a62b1"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %1 ) )","user":"5bc611e3e4b07a9b28b10083"},{"problem":34,"code":"(fn r [x y]\n  (if (== x y)\n    '()\n    (conj (r (inc x) y) x)\n  )\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":34,"code":"(fn new-range [lbound ubound]\n (let [internal (fn [x] (+ 1 x))]\n (take (- ubound lbound ) (iterate internal lbound))))","user":"58ffbabce4b0438e51c2d002"},{"problem":34,"code":"(fn f [a b]\n  (if (< a b)\n    (cons a (f (inc a) b))))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":34,"code":"(fn rng [r s d]\n  (if (< s d)\n    (recur (conj r s) (inc s) d)\n    r\n  )\n)[]","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":34,"code":"(fn [from to]\n  (for [i (iterate inc from) :while (< i to)] i))","user":"562268dce4b03f08ee9a9224"},{"problem":34,"code":"(fn[x & y] ( loop [z () n x] (if ( <  n (first y)) (recur (conj z n) (+ n 1)) (reverse z)) ))","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [start end]\n        (take-while #(< % end) (iterate inc start)))","problem":34,"user":"534e9ed4e4b084c2834f4ab8"},{"problem":34,"code":"(fn \n  [start end]\n  (take (- end start) (iterate inc start)))","user":"566f7749e4b0a866af6896e9"},{"code":"(fn rng [s e]\n  (loop [x s result []]\n    (if (not= x e)\n      (recur (inc x) (conj result x))\n      result)))","problem":34,"user":"5244a10de4b0d8acf9ed6ab3"},{"problem":34,"code":"(fn [lst cur end]\n  (if (= cur end)\n    lst\n    (recur (conj lst cur) (inc cur) end))) []","user":"5d323149e4b01671435dbce9"},{"problem":34,"code":"(fn f [frm to]\n (let [elms (- to frm)]\n   (take elms\n    (iterate inc frm))))\n\n;(defn f [frm to]\n ;(->>\n  ;frm\n  ;(iterate inc)\n  ;(take (- to frm))))","user":"510608ebe4b01150e115ebe3"},{"problem":34,"code":"(fn [from to]\n\t(loop [i (dec to)\n    \t   s '()]\n  \t\t(if (= i from)\n    \t\t(cons i s)\n    \t\t(recur (dec i) (cons i s)))))","user":"55729a78e4b09a3098a52547"},{"code":"(fn [beg end]\n  (take (- end beg) (iterate #(inc %) beg)))","problem":34,"user":"52dfe1d2e4b09f7907dd1406"},{"problem":34,"code":"#((fn my-range [min-val max-val res] (if (= min-val max-val) res (my-range (inc min-val) max-val (into res [min-val])))) %1 %2 [])","user":"578e535de4b0ebec4cfb7580"},{"code":"(fn [start end]\n    (take (- end start) ((fn ls [x]\n      (lazy-seq\n       (cons x (ls (inc x))))) start )))","problem":34,"user":"52c61564e4b0c2d177d62109"},{"code":"(fn rango [x y]\n  (if (>= x y)\n    ()\n    (cons x (rango (+ x 1) y))))","problem":34,"user":"4db51ce0535d87e67b28fe06"},{"problem":34,"code":"(fn [a b]\n  (loop [\n         n (- b 1)\n         fin (list (- b 1))]\n    (if (= (first fin) a)\n      fin\n      (recur (- n 1) (conj fin (- n 1))))))","user":"5e453725e4b01d43a70e8e93"},{"problem":34,"code":"(fn [start end] \n  (loop \n    [k end\n     acc nil] \n    (if\n      (= k start)\n      acc\n      (recur (dec k) (cons (dec k) acc))\n    )\n   )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn r [s m] (if (= s m) '() (cons s (r (inc s) m))))","problem":34,"user":"510931ede4b0c71f76895663"},{"problem":34,"code":"#(loop[result (list %1) n (inc %1)] (if (>= n %2) result (recur (concat result (list n)) (inc n))))","user":"57b59d77e4b0fbc9809a27ae"},{"problem":34,"code":"#(loop [result [] x %1 y %2]\n   (if (< x y)\n     (recur (conj result x) (inc x) y)\n     result))","user":"513f1f18e4b051389b345b3d"},{"problem":34,"code":"(fn [low high] \n  (loop [i low, res []]\n    (if (= i high)\n      res\n      (recur (inc i) (conj res i)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"code":"(fn rg [l, mn, mx]\n\t  (println (last l))\n\t\t  (println (count l))\n\t  (cond \n\t   (zero? (count l)) (rg (list mn) mn mx)\n\t   (= (count l) (- mx mn)) l\n\t   :else (rg (concat l [(inc (last l))]) mn mx))) ()","problem":34,"user":"50d3b03fe4b030b634c368b9"},{"problem":34,"code":"#(loop [i %1 r ()] (if (= i %2) (reverse r) (recur (+ i 1), (conj r i))))","user":"537b1083e4b06839e8705e64"},{"code":"#(loop [x % result []] (if (>= x %2) result (recur (inc x) (conj result x))))","problem":34,"user":"5047782ce4b0371827a27bc2"},{"problem":34,"code":"(fn [start end]\n  ((fn [acc]\n     (let [n (inc (last acc))]       \n       (if (= end n)\n         acc\n         (recur (concat acc (list n))))))\n   (list start)))","user":"54d87b54e4b0a52adc2e2038"},{"problem":34,"code":"(fn rng [frst lst]\n  (distinct (loop [final []\n                   value frst]\n              (if (= value lst)\n                final\n                (recur (into final [value])\n                       (inc value))))))","user":"56f57481e4b046a417f92072"},{"code":"(fn increment [x y]\n  (if (not= x y)\n    (concat\n      [x]\n      (increment (inc x) y))))","problem":34,"user":"503efe01e4b06c4e0e1fa26f"},{"problem":34,"code":"(fn rng\n  ([s e]\n   (rng s (- e 1) `()))\n  ([s e l]\n   (if (= s e)\n     (conj l s)\n     (rng s (- e 1) (conj l e))\n     )\n    )\n  )","user":"57a89ae9e4b0a96607956221"},{"code":"(fn f [a b] (if (< a b) (cons a (f (inc a) b)) ()))","problem":34,"user":"4e7e0bdc535db169f9c796ff"},{"code":"(fn rng [ a b ]\n  (if (= a b ) '()\n    (cons a (rng (inc a) b))))","problem":34,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [s e] (reduce (fn [res _] (conj res (inc (last res))) ) [s] (repeat (- e s 1) 1)))","problem":34,"user":"511b9e81e4b00c2a1fa7ff6e"},{"problem":34,"code":"(fn [start end]\n  (loop [iter start\n         acc  []]\n    (if (> iter (- end 1))\n      acc\n      (recur (inc iter) (merge acc iter)))))","user":"5bbd1876e4b07a9b28b0ff96"},{"code":"#(loop [i %1 res '()] \n\t(if (<= %2 i) res\n\t\t(recur (inc i) (concat res (list i)))))","problem":34,"user":"53300924e4b019098a6f8b55"},{"problem":34,"code":"(fn rng2 [from, to]\n  (take (- to from) (iterate inc from))\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"code":"(fn [a b]\n  (take-while (partial > b) (iterate inc a)))","problem":34,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"code":"(fn [start end]\n\t((fn [start end acc]\n\t\t(if (= start end)\n\t\t\tacc\n\t\t\t(recur (inc start) end (conj acc start)))) start end []))","problem":34,"user":"539378fbe4b0b51d73faaebd"},{"problem":34,"code":"#(loop [x %1 v []] (if (= x %2) (seq v) (recur (inc x) (conj v x))))","user":"57a14414e4b0c3d858beb8e4"},{"code":"(fn myrg [x y] (cond (< x y) (cons x (myrg (+ 1 x) y))\n                     :else []))","problem":34,"user":"504ffa26e4b0a02f9cffdead"},{"problem":34,"code":"(fn [x y]\n  (loop [s x\n         r '()]\n    (if (= s y)\n      (sort r)\n      (recur (inc s) (cons s r))\n    )\n  )\n)","user":"55252392e4b0882d96d091cc"},{"problem":34,"code":"(fn rg [s e]\n  (if (= s e) nil\n    (cons s (rg (inc s) e))))","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn [n m]\n  (loop [i    n\n         end  m\n         coll []]\n    (if (= i end)\n      coll\n      (recur (inc i)\n             m\n             (conj coll i)))))","problem":34,"user":"4f5c68c6e4b0030a34fb2b23"},{"problem":34,"code":"(fn [start end] (let [num-elems (- end start)]\n    (take num-elems (iterate inc start))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":34,"code":"(fn r [x y] (when (< x y) (conj (r (inc x) y) x)))","user":"54dbcbbde4b024c67c0cf774"},{"problem":34,"code":"(fn [a b]\n  (let [xs (repeat (- b a) a)]\n    (map-indexed #(+ % %2) xs)))","user":"540ff039e4b01498b1a7199b"},{"problem":34,"code":"#((fn [acc cur end] (if (>= cur end) acc (recur (conj acc cur) (inc cur) end))) [] %1 %2)","user":"59021fede4b0438e51c2d04d"},{"problem":34,"code":"(fn my-range\n  ([s e] (my-range [] s (dec e)))\n  ([col s e]\n   (if (> s e)\n     col\n     (my-range (cons e col) s (dec e)))))","user":"53b05a75e4b047364c044482"},{"problem":34,"code":"(fn [start, end] (loop [x start, out []]\n                   (if (= x end) out (recur (+ 1 x) (conj out x)))))","user":"5e65bfe4e4b0fd0acd1586b9"},{"problem":34,"code":"(fn [x y]\n  (loop [j ()\n         start x\n         end y]\n    (if (= start y) j\n                (recur (concat j [start]) (inc start) end))\n  ))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":34,"code":"(fn [st end] ((fn rng [acc st end] \n               (if (= st end)\n                 acc\n                 (recur (conj acc st) (inc st) end))) [] st end) )","user":"54ccf9d5e4b057c6fda3a295"},{"problem":34,"code":"(fn _range [n1 n2]\n  (when (< n1 n2) (lazy-seq (cons n1 (_range (inc n1) n2)))))","user":"582e0afde4b051871117bfd5"},{"problem":34,"code":"(fn ranger [x y] (if (< x y) (cons x (ranger (inc x) y)) '()))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"#(let [to (dec %2)]\n  (loop [r [%]]\n    (if (< (last r) to)\n      (recur (conj r (inc (last r))))\n      r)))","problem":34,"user":"51f55bdae4b0abb92f97f9d0"},{"problem":34,"code":"(fn [start upto]\n  (loop [pos start result '()]\n    (if (= pos upto) (reverse result)\n        (recur (inc pos) (conj result pos)))))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn [start stop]\n  (loop[i start\n        retval '()]\n    (if (= i stop)\n        (reverse retval)\n        (recur (inc i) (cons i retval)))))","problem":34,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":34,"code":"(fn [s e] (loop [curr (dec e) result '()] (if (>= curr s) (recur (dec curr) (conj result curr))  result)))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":34,"code":"(fn [start end]\n  \t(loop [current start out []]\n      (if (< current end)\n             (recur (inc current) (conj out current))\n             out)))","user":"532ae82be4b09d4e7a9b552b"},{"code":"(fn [low high] (loop [i low nums []] (if (< i high) (recur (inc i) (conj nums i)) nums)))","problem":34,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn [start end]\n  (reverse ((fn [c ret]\n      (if (= c end)\n          ret\n          (recur (inc c) (conj ret c)))) start ())))","problem":34,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [a n] (take (- n a) (iterate #(inc %) a)))","problem":34,"user":"4e218464535d04ed9115e816"},{"problem":34,"code":"(fn implement-range\n  [a b]\n  (take (- b a) (iterate #(+ % 1) a)))","user":"56df636ae4b0ca2494a095f4"},{"code":"#(reverse (loop [from %1 to %2 acc ()]\r\n           (if (< from to)\r\n             (recur (inc from) to (conj acc from))\r\n             acc)))","problem":34,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":34,"code":"#(\n   take (- %2 %1) (iterate inc %1)\n\n   )","user":"54ef4a1ee4b024c67c0cf883"},{"problem":34,"code":"(fn range' [m n] (if (< m n)  (cons m (lazy-seq (range' (+ m 1) n))) ()))","user":"585e7c60e4b0f14aab7c87b3"},{"problem":34,"code":"(fn [x y]\n    (let [iter (fn [n seq] (if (= n y) seq (recur (inc n) (conj seq n))))]\n      (reverse (iter x '()))))","user":"55d29fb6e4b0e31453f64a59"},{"problem":34,"code":"(fn find-range [start end]\n  (take (- end start) (iterate inc start)))","user":"54973374e4b0b312c081ff6f"},{"problem":34,"code":"#(take (- %2 %1) \n       (iterate inc %1))","user":"5bfada5ee4b0bdcf453d15d2"},{"problem":34,"code":"(fn [pos top & {:keys [xs] :or {xs []}}]\n  (if (>= pos top) xs\n    (recur (inc pos) top {:xs (conj xs pos)})))","user":"58c66990e4b021aa9917ed53"},{"code":"(fn rg [n m] (if (= n m) '() (conj (rg (inc n) m) n)))","problem":34,"user":"52c804dee4b0c2d177d6212b"},{"problem":34,"code":"(fn [start end]\n  (loop [i start res []]\n    (if (= i end)\n      res\n      (recur (+ i 1)(conj res i))\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn xrange [start stop]\n  (lazy-seq\n    (if (> stop start)\n      (cons start (xrange (inc start) stop)))))","problem":34,"user":"4f61be97e4b0defedf855fc5"},{"problem":34,"code":"(fn [start end]\n  (let [t (- end start)]\n  \t(loop [arr [] c 0]\n    \t(if (= c t)\n          arr\n          (recur (conj arr (+ start c)) (inc c))))))","user":"534e60c2e4b084c2834f4ab2"},{"code":"(fn [s e] (reduce (fn [coll _] (conj coll (+ s (count coll)))) [] (replicate (- e s) 0)))","problem":34,"user":"5320bc6ae4b09d4e7a9b54a7"},{"problem":34,"code":"(fn [start end]\n  \n  (take (- end start) (iterate inc start))\n  )","user":"5785de43e4b0ebec4cfb74e5"},{"problem":34,"code":"(fn create-integers\n  [start end]\n  (loop [output []\n         i start]\n    (if (= i end)\n      output\n      (recur (conj output i) (+ i 1))\n      )\n    )\n  )","user":"5944bd7fe4b0b03edd0057b0"},{"problem":34,"code":"(fn [a b]\n   (loop [index a result []]\n     (if (= index b)\n       result\n       (recur (inc index) (conj result index)))))","user":"602b90c1e4b0d5df2af22266"},{"problem":34,"code":"(fn f\n   ([s e] (f s e []))\n   ([s e acc] \n    (if (< s e) \n      (recur (inc s) e (conj acc s))\n      acc ))\n   )","user":"5e44c804e4b01d43a70e8e89"},{"problem":34,"code":"(fn r\n  ([low high]\n   (r low high (if (> high low) 1 -1)))\n  ([low high step]\n   (when (not= low high)\n     (lazy-seq (cons low (r (+ low step) high))))))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn f34 [l h] (take (- h l) (iterate inc l)))","problem":34,"user":"52bf0116e4b07a9af5792328"},{"code":"(fn [x y]\n    ( take (- y x) (iterate inc x)))","problem":34,"user":"52812b9fe4b0757a1b171423"},{"problem":34,"code":"(fn [start end]\n  (loop [i start res (transient [])]\n    (if (= i end)\n      (persistent! res)\n      (recur (inc i) (conj! res i)))))","user":"5426a59ee4b01498b1a71b1b"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         end end\n         result []]\n    (if (>= start end)\n      result\n      (recur (inc start)\n             end\n             (conj result start)))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn my-range [start end]\n  (when (< start end)\n    (cons start (my-range (inc start) end))))","problem":34,"user":"5264383be4b03e8d9a4a70cb"},{"problem":34,"code":"(fn [a b]\n  (loop [a a\n         nuevo ()]\n    (if (= a b)\n      \t(reverse nuevo)\n      \t(recur (inc a)\n               (cons a nuevo)))))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn [start end]\n  (loop [n start\n         result []]\n    (if (= end n)\n      result\n      (recur (inc n) (conj result n)))))","problem":34,"user":"538d464ee4b0b51d73faae69"},{"code":"(fn r [l h] (if (= (inc l) h) [l] (cons l (r (+ l 1) h))))","problem":34,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [lower upper]\n  (loop [x lower s []]\n    (if (= x upper)\n      s\n      (recur (inc x) (conj s x)))))","problem":34,"user":"51ce1320e4b0e42293a22551"},{"problem":34,"code":"(fn ranger\n[start, end]\n  (loop [i start ys []]\n    (if (= i end)\n    ys\n    (recur (inc i) (conj ys i)))))","user":"53de4bdae4b0d874e779ae32"},{"problem":34,"code":"(fn [x y]\n  (letfn [(r [x]\n            (if (= x y)\n              []\n              (cons x (r (inc x)))))]\n    (r x)))","user":"5c1bee41e4b01240ff567218"},{"problem":34,"code":"(fn w [a b]\n  (if (>= a b) ()\n    (conj (w (+ a 1) b) a)))","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":34,"code":"#(letfn [(my-range [start]\n            (lazy-seq (cons start (my-range (inc start)))))]\n    (take-while (fn [x] (< x %2))  (my-range %1)))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [min, max]\n   ( (fn [m, n, acc] (if (= m n) acc (recur (inc m) n (conj acc m)))) min max []) )","problem":34,"user":"4eb0a757535d7eef3080733d"},{"problem":34,"code":"(fn [low high]\n  (loop [l low\n        h high\n        coll '()]\n    (println l h coll)\n    (if (< l h)\n      (recur (inc l) h (cons l coll))\n      (reverse coll))\n  )\n)","user":"5df75fd8e4b0a607a9a45c92"},{"problem":34,"code":"(fn primer [from to]\n  (\n    (fn ranged [from to coll]\n    (if (= from to)\n      coll\n      (ranged (inc from) to (concat coll [from] ))\n    )\n  )\n  from to [] )\n)","user":"5dcc651de4b02b31cc3da3c8"},{"problem":34,"code":"(fn rge [s f]\n  (if (= s f)\n    '()\n    (cons s (rge (+ s 1) f))))","user":"55fbf6cae4b0f488688e066c"},{"code":"(fn [a b] (map #(+ a %) (take (- b a) '(0 1 2 3 4 5 6))))","problem":34,"user":"5137fb22e4b0a5db03d727d3"},{"problem":34,"code":"(fn [start end]\n\t(take (- end start) (iterate inc start))\n)","user":"55ec1048e4b0121d4835fdc3"},{"code":"(fn [start end]\n  (loop [n start acc '()]\n    (if (>= n end)\n      (reverse acc)\n      (recur (inc n) (cons n acc)))))","problem":34,"user":"4e7f5a0b535db966e863cc41"},{"problem":34,"code":"#(loop [result '() \n        top (- %2 1)]\n   (if (< top %1)\n     result\n     (recur (conj result top) (dec top))\n     )\n   )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":34,"code":"(fn [s d & rs]\n    (if (= s d) (reverse rs)\n   \t\t(recur (inc s) d (conj rs s))))","user":"54468fd3e4b032a45b8693b2"},{"problem":34,"code":"(fn [x y]\n   (loop [acc [] start x]\n     (if (< start y)\n       (recur (conj acc start) (inc start))\n       acc)))","user":"55fb41a6e4b0f488688e065f"},{"problem":34,"code":"(fn l [n,m] (if (>= n m) '() (conj (l (inc n) m) n)))","user":"587c59d1e4b01531a375eb17"},{"code":"#(loop [a %1 o []]\n  (if (= a %2) (seq o)\n    (recur (inc a) (conj o a))))","problem":34,"user":"4f0ce26c535d0136e6c22312"},{"code":"(fn [x y]\n  (butlast(reverse\n    ((fn shaz [s c] (if (= c 0) s (shaz (conj s (+ (first s) 1)) (- c 1))))\n    (conj '() x)\n    (- y x))\n  ))\n)","problem":34,"user":"500f4f2fe4b03ec779321689"},{"code":"(fn [start end]\n  (take (- end start)\n        (iterate \n          (fn [n]\n            (+ 1 n))\n        start)))","problem":34,"user":"4e0febe6535d04ed9115e7be"},{"code":"#(loop [n (dec %2) rv ()]\n   (if (= n %1)\n     (conj rv n)\n     (recur (dec n) (conj rv n))))","problem":34,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn myrange\n  [start end]\n  (map (partial + start) (take (- end start) (iterate inc 0))))","problem":34,"user":"510591dde4b06d28cacc92eb"},{"problem":34,"code":"(fn [start end]\n  (loop [curr (dec end) acc nil]\n    (if (< curr start)\n      acc\n      (recur (dec curr) (cons curr acc)))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn rng \r\n  ([a b] (rng a b '()))\r\n  ([a b c]\r\n    (if (= a b)\r\n       c\r\n       (rng a (dec b) (cons (dec b) c))\r\n    )\r\n  )\r\n)","problem":34,"user":"4ff8aa3fe4b0678c553fc39e"},{"problem":34,"code":"(fn[a b]\n  (take (- b a) (iterate inc a)))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn [s e]\n  (reverse\n    (loop [s s e e l '()]\n      (if (= s e)\n        l\n        (recur (inc s) e (conj l s))))))","problem":34,"user":"4f038bcd535dcb61093f6b1d"},{"code":"(fn [mn n] (reverse ((fn nxt [a seqq] (if (= a n) seqq (nxt (+ a 1) (conj seqq a)))) mn (list))))","problem":34,"user":"506f5d68e4b082ae7d1032c7"},{"problem":34,"code":"(fn [start n]\n  (->>\n   \t(iterate inc start)\n    (take-while #(< % n))))","user":"5b2c1f60e4b025bcb146f2b1"},{"problem":34,"code":"(fn predi\n  [i f]\n  (loop [i i\n         f f\n         result ()]\n    (if (= i f)\n      (reverse result)\n      (recur (inc i) f (cons i result)))))","user":"5a9f005be4b0d174b936c810"},{"code":"(fn mrange [f t & res]\n  (if (< f t)\n    (mrange (inc f) t (conj res f))\n    (-> res flatten reverse))\n  )","problem":34,"user":"50053d6ce4b0678c553fc45e"},{"code":"(fn [x y]\n     (take (- y x) (iterate inc x)))","problem":34,"user":"5262efade4b03e8d9a4a709f"},{"problem":34,"code":"#(loop [s [] n %] \n               (if (= n %2) \n\t\t\t     s\n\t\t\t\t (recur (conj s n) (inc n))\n\t\t\t   )\n  )","user":"549a176ce4b0f3d1d8e70f69"},{"problem":34,"code":"(fn [start end]\n  (loop [at (dec end)\n         res '()]\n    (if\n      (< at start)\n      res\n      (recur (dec at) (cons at res)))))","user":"5a584ca2e4b05d388ecb6c7d"},{"code":"(fn self [x1 x2]\n  (if (< x1 x2)\n    (concat [x1] (self (inc x1) x2))\n    []))","problem":34,"user":"524b90fae4b09eba1c0223df"},{"problem":34,"code":"(fn [start end]\n  (loop [s start\n         e end\n         res []]\n    (if (< s e)\n      (recur (inc s) e (conj res s))\n      res)))","user":"5922a36ce4b026ae38521285"},{"code":"(fn rng [x y] (when (< x y) \n              (cons x (rng (inc x) y))))","problem":34,"user":"4e6cf521535de274dd8d818b"},{"problem":34,"code":"#(loop [i %1 n %2 result '()]\n   (if (= i n)\n     (reverse result)\n     (recur (inc i) n (conj result i))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":34,"code":"(fn [x1 x2]\n  (take (- x2 x1) (iterate #(inc %) x1)))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":34,"code":"#(seq (loop [x %1 res[]] (if (= x %2) res (recur (inc x) (conj res x)))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":34,"code":"(fn [x y]\n  (take (- y x)\n        (iterate #(+ % 1) x)))","user":"609c1db9e4b00e9e6653c416"},{"code":"(fn myfun [a c]\n  (cond\n     (= 0 (- c a)) '()\n     :else (conj (myfun (inc a) c) a)\n  )\n)","problem":34,"user":"531902b1e4b08068f379ed77"},{"code":"#(take (- %2 %1) (reductions + (cons %1 (repeat 1))))","problem":34,"user":"4eebc5da535d93acb0a668aa"},{"code":"(fn [x y]\n  (for [z (iterate inc x) :while (< z y)] z))","problem":34,"user":"51f82769e4b09be9c177e527"},{"code":"(fn\n  [start stop]\n  (loop [curr start\n         acc []]\n    (if (= curr stop)\n      acc\n      (recur (inc curr) (conj acc curr)))))","problem":34,"user":"528b01a0e4b0239c8a67ae89"},{"problem":34,"code":"(fn\n    [start end]\n    (take-while #(< % end) (iterate inc start))\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":34,"code":"#(loop [i %1 z [%1]] (let [n (inc i)] (if (< n %2) (recur n (conj z n)) z)))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [& args] \n  (let \n    [mn (apply min args)\n     mx (apply max args)] \n    (take (- mx mn) (iterate inc mn))))","problem":34,"user":"531308c1e4b08068f379ed04"},{"code":"(fn [lo hi]\n  (take (- hi lo) (iterate inc lo)))","problem":34,"user":"4ead6418535d7eef3080731f"},{"problem":34,"code":"(fn makerange [a b]\n  (loop [k (- b 1)\n         ans (list )]\n    (if (< k a)\n      ans\n      (recur (- k 1) (conj ans k))\n      )\n    )\n\n  )","user":"57cc14aae4b05aa3c4741d4a"},{"problem":34,"code":"(fn f [x y]\n  (if (sequential? x)\n    (if (= (first x)\n           (dec y))\n      (reverse x)\n      (f (cons (inc (first x)) x) y))\n    (f (list x) y)))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":34,"code":"(fn myfunc [a b] \n  \n  (when (< a b)\n    (do\n     (conj (seq (myfunc (+ a 1) b)) a)\n    )\n  )\n)","user":"53f12b77e4b0742d9025b0da"},{"code":"(fn notrange [b e]\n  (if (< b e)\n(cons b (notrange (+ b 1) e))\n()))","problem":34,"user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn lazy-xrange [start stop]\n    (if (= start stop)\n        ()\n        (lazy-seq\n            (cons start (lazy-xrange (+ start 1) stop)))))","problem":34,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":34,"code":"#(letfn [(myrange [result start end]\n   (if (= start end)\n     result\n     (recur (conj result start) (inc start) end)))]\n   (myrange [] %1 %2))","user":"54b2ec84e4b09f271ff37d33"},{"problem":34,"code":"(fn my-range\n  \t([start end]\n  \t (my-range start (dec end) '()))\n\t([start end result]\n     (if (> start end)\n       result\n       (my-range start (dec end) (cons end result)))))","user":"591e1dc7e4b09b4ee5954c2a"},{"problem":34,"code":"(fn myRange [start end]\n  (loop [se []\n         s  start]\n    (if (< s end)\n      (recur\n        (conj se s) (inc s))\n      se)))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":34,"code":"(fn [x1 x2]\n    (loop [i x1 result []]\n      (if (< i x2)\n(recur (inc i) \n        (conj result i)\n  );END: recur\nresult\n        );END:if\n      );END: loop\n \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn my-range [lower upper]\r\n    (loop [cnt lower l '[]]\r\n      (if (= cnt upper)\r\n        l\r\n        (recur (inc cnt) (conj l cnt)))))","problem":34,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn my-range\n    ([start-val end-val] (my-range (inc start-val) end-val (conj '() start-val)))\n    ([start-val end-val ocoll]\n     (cond \n      (= (inc (first ocoll)) end-val) (reverse ocoll)\n      :else (recur (inc start-val) end-val (conj ocoll start-val))\n)))","problem":34,"user":"4eee3e6a535d93acb0a668c3"},{"problem":34,"code":"(fn [a b]\n  (loop [a a b b r []]\n    (if (< a b)\n      (recur (inc a) b (conj r a))\n      r)))","user":"557c6ca6e4b05c286339e0c4"},{"problem":34,"code":"(fn [a b] (take-while #(< % b) (iterate #(inc %) a)))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn rng [b e]\r\n      (if (<= e b)\r\n        (list)\r\n        (conj (rng (+ b 1) e) b)\r\n        )\r\n      )","problem":34,"user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":34,"code":"(fn aaa[ x y ]\n (flatten (if (< x y)\n   (conj [] x (aaa (+ x 1) y)) [] )))","user":"598588f2e4b021a7a535fe65"},{"problem":34,"code":"(fn [start end]\n  (loop [r [] curr start]\n    (if (>= curr end)\n      r\n      (recur (conj r curr) (inc curr)))))","user":"60cb3836e4b0e0fa5f1b4315"},{"code":"(fn my-range [low high] (when (> high low) (cons low (my-range (inc low) high))))","problem":34,"user":"4dc4c869535d8a4b2fd74280"},{"problem":34,"code":"#(loop [r [] a %1 b %2]\n   (if (= a b)\n     r\n     (recur (conj r a) (+ 1 a) b)\n     ))","user":"554c0adde4b0a04f7929959e"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (conj (my-range (inc start) end) start)\n    '()\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"code":"(fn [m mx]\n  ((fn [n x result]\n    (if (>= n x)\n        (reverse result)\n        (recur (inc n) x (conj result n))))\n    m mx '()))","problem":34,"user":"4e73a9dc535dff18050a9c77"},{"problem":34,"code":"(fn lst ([start stop]\n     \t\t(lst start stop '()))\n  \t\t([start stop list-build]\n         (if (< start stop)\n           (lst (inc start) stop (cons start list-build))\n           (reverse list-build))))","user":"5691ef12e4b0dcc4269f40f8"},{"problem":34,"code":"(fn [st en]\n          (take (- en st)(iterate #(+ % 1) st)))","user":"5c5d2e90e4b01df32ab732af"},{"problem":34,"code":"(fn [start end]\n   (take-while #(< % end) (iterate inc start)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":34,"code":"(fn [min max] \n  (loop [i min r []]\n    (if (< i max)\n      (recur (inc i) (conj r i))\n      r)))","user":"56b965d9e4b0f26550335931"},{"problem":34,"code":"(fn my_range\n    ([begin end]\n        (my_range [] begin end))\n    ([r_seq begin end]\n        (if (< begin end)\n            (my_range (conj r_seq begin) (+ begin 1) end)\n            r_seq)))","user":"56058d64e4b08b23635d3169"},{"problem":34,"code":"(fn [start end]\n  (letfn [(step [start end]\n                (if\n                  (< start end)\n                  (cons\n                   start\n                   (step (+ start 1) end))))]\n    (step start end)))","user":"55a1683ce4b0acc240e31513"},{"problem":34,"code":"(fn rng [s e]\n  (when-not (== s e)\n    (lazy-seq (cons s (rng (inc s) e)))))","user":"5f300f28e4b033932238a682"},{"code":"(fn my-range [start end]\n  (loop [result () c (dec end)]\n    (if (>= c start)\n      (recur (conj result c) (dec c))\n      result)))","problem":34,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":34,"code":"(fn [minn maxx] (loop [act minn, rng []] (if (>= act maxx) rng (recur (inc act) (conj  rng act)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":34,"code":"#(take (- %2 %) (iterate inc %)) ; % = %1, #(take (- %2 %1) (iterate inc %))","user":"53da059be4b0e771c302547e"},{"code":"(letfn [(r [from to]\n           (if (not= from to)\n             (cons from (r (inc from) to))))]\n           r)","problem":34,"user":"5092f940e4b097f48cc3857b"},{"problem":34,"code":"(fn rang [a b]\n  (take (- b a) (iterate #(+ % 1) a)))","user":"5498c4cfe4b0b312c081ff85"},{"code":"#(loop [i %1 l []]\n  (if (>= i %2)\n    l\n    (recur (inc i) (conj l i))))","problem":34,"user":"4fb54e50e4b081705acca2bb"},{"problem":34,"code":"(fn[x,y]\n    ( loop [current (dec y), lista ()] \n      (if (< current x) \n        lista\n        (recur (- current 1) (conj lista current) )))  \n\n      )","user":"575bd5f9e4b02ea114799365"},{"problem":34,"code":"(fn [start limit]\n  (loop [coll (list start)\n         elmt start]\n    (if (= elmt (- limit 1))\n      (reverse coll)\n      (recur (conj coll (+ elmt 1)) (+ elmt 1)))))","user":"53d40508e4b00fb29b221332"},{"problem":34,"code":"(fn [x y] (loop [x1 x res []] (if (= x1 y) res (recur (inc x1) (conj res x1)))))","user":"55f3802be4b06e875b46ce5f"},{"problem":34,"code":"(fn rng [beg end]\n  ((fn rngInt [x]\n    (if (= (dec end) (last x))\n      (seq x)\n      (rngInt (conj (vec x) (inc (last x))))))\n  (list beg)))","user":"595ed97fe4b066ee0a44b051"},{"problem":34,"code":"#(letfn [(f [x y] (if (< x y)\n                 (cons x (f (inc x) y))\n                 nil))]\n      (f %1 %2))","user":"57d93437e4b0bd073c2023f9"},{"code":"(fn iter-count\n\t[begin end & result]\n\t(if (= begin end)\n\t  result\n\t  (recur begin (dec end) (conj result (dec end)))))","problem":34,"user":"5339af7de4b0e30313ee6cab"},{"code":"(fn r [b e]\n  (when (< b e)\n    (cons b (r (inc b) e))))","problem":34,"user":"512700c4e4b083bb8f88cf14"},{"problem":34,"code":"(fn my-range [start end]\n  (let [delta (if (< start end) 1 -1)]\n    (loop [i start res ()]\n      (if (or (and (< i end)\n                   (< start end))\n              (and (> i end)\n                   (> start end)))\n        (recur (+ i delta) (conj res i))\n        (reverse res)))))","user":"5711ca24e4b09c608db7044b"},{"problem":34,"code":"(fn my-range [from to] (\n             if (= from to) \n                        \t'()\n                        (cons from (my-range (inc from) to))\n               \n               ))","user":"5471f090e4b094393f72dd6e"},{"problem":34,"code":"(fn [start end]\n  (take-while #(< % end)\n        (iterate inc start)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"code":"(fn [st ed]\n  (loop [i st res []]\n    (if (>= i ed)\n      res\n      (recur (+ 1 i) (conj res i)))))","problem":34,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [l e] \n    (loop [l l e e acc []]\n      (if (= l e)\n        (seq acc)\n        (recur (inc l) e (conj acc l)))))","problem":34,"user":"511dada0e4b0a5c68a34840c"},{"problem":34,"code":"(fn rangeit [start end]\n  (if (= start end)\n    '()\n    (conj (rangeit (inc start) end) start)))","user":"51a0370ae4b0b292b01ee3ef"},{"problem":34,"code":"#(loop [ r [] sta %1 fin %2  ]\n(cond\n(= fin sta) r  \n:else (recur  (conj r sta) (inc sta) fin  ) \n)\n)","user":"5c4ab449e4b0f9f7a8770e57"},{"code":"(fn [low high]\n           (let [cnt (- high low)]\n           ((fn [low cnt z]\n              (if (= 0 cnt)\n                z\n                (recur (inc low) (dec cnt) (concat z (list low))))) low cnt '())))","problem":34,"user":"4ec6688d535d6d7199dd36cc"},{"code":"(fn [start end]\n  (loop [ curr (- end 1) rez '()]\n(if (> curr start)\n  (recur (- curr 1) (conj rez curr))\n  (conj rez curr))))","problem":34,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":34,"code":"(fn [l h]\n  (loop [i l r []]\n    (if (= i h)\n      r\n      (recur (+ i 1) (conj r i)))))","user":"54864662e4b0e286459a11b8"},{"problem":34,"code":"(fn [n-min n-max]\n (take (- n-max n-min) \n       ((fn counter [x]\n         (cons x (lazy-seq (counter (inc x))))) n-min)))","user":"53a5c7ffe4b0ef122a8689c4"},{"code":"(fn [x n] (map #(+ % x -1) (reductions + (repeat (- n x) 1))))","problem":34,"user":"4ec812d9535d6d7199dd36f0"},{"problem":34,"code":"(fn [f t]\n  (loop [lst [] f f t t]\n    (if (>= f t) lst\n     (recur (conj lst f) (inc f) t))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn ran [seed n]\n\t(if (= seed n)\n\t\t'()\n\t\t(concat [seed] (ran (inc seed) n))))","problem":34,"user":"534bfa81e4b084c2834f4a87"},{"problem":34,"code":"(fn [low high]\n  (loop [x low xs []]\n    (if (= x high)\n      xs\n      (recur (inc x) (conj xs x)))))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn [start end]\n  (take (- end start)\n        (iterate inc start)))","problem":34,"user":"5173726be4b098276e74652c"},{"problem":34,"code":"(fn rng [i f] \n (loop [ s [i] n i]\n  (if ( < n f)\n       (recur (conj s (inc (last s) )) (inc n))\n          \n       (butlast s)))\n)","user":"556880dae4b0c656e3ff1856"},{"code":"(fn rang [s e] (if (= s (- e 1)) (list s) (concat (list s) (rang (+ s 1) e))))","problem":34,"user":"4f84f6c3e4b033992c121c3d"},{"code":"(fn frange [start end]\n  (if (= start (- end 1))\n    (list start)\n    (concat (list start) (frange (+ start 1) end))))","problem":34,"user":"4fad1b2be4b081705acca233"},{"problem":34,"code":"(fn implement_range [a b]\n\"Function which creates a list of all integers in a given range\"\n(take (- b a) (iterate inc a)))","user":"5bbbd077e4b0a20761a23615"},{"problem":34,"code":"(fn my-range [start end] (if (>= start end) () (cons start (my-range (inc start) end))))","user":"555a5731e4b0deb715856e44"},{"code":"(fn f [x n] (if (= x n) [] (concat [x] (f (+ 1 x) n))))","problem":34,"user":"514def61e4b019235f6c0591"},{"problem":34,"code":";#(take (- %2 %1) (iterate inc %1))    iterate\n(fn [x y] (take (- y x) (iterate inc x)))","user":"5822e082e4b04b46fc4b0fa9"},{"code":"(fn rng [start end]\n    (if (= start (dec end)) (list (dec end)) (cons start (rng (inc start)  end)))    \n    )","problem":34,"user":"5256c8c7e4b0541d1855ba37"},{"problem":34,"code":"#(loop [x (- %2 1) rez '()]\n  (if (< x %1)\n    rez\n    (recur (dec x) (conj rez x))))","user":"59135c11e4b0163c97b36f02"},{"code":"(fn my-repeat [f l]\n  (take\n  \t(let [n (- l f)]\n      (if (pos? n) n (* n -1)))\n    (repeatedly ((fn incr [f]\n  \t  (let [x (atom f)]\n        #(swap! x inc))) (dec f)))))","problem":34,"user":"51197750e4b057cba170bc99"},{"problem":34,"code":"(fn [a b]\n  (take (- b a)\n        ((fn f [x]\n           (lazy-seq (cons x (f (inc x)))))a)))","user":"59636b49e4b066ee0a44b0c5"},{"problem":34,"code":"(fn [x y] (loop [x1 x y1 y new []]\n            (if (= x1 y1)\n              new\n            (recur (inc x1) y1 (conj new x1))\n              )))","user":"59368ccae4b02506e01a2979"},{"code":"#(take (- %2 %1)\n       (iterate inc %1))","problem":34,"user":"5302b580e4b0d8b024fd3732"},{"code":"(fn r [mn mx]\n  (loop [mn mn mx mx acc []]\n    (if (< mn mx)\n      (recur (inc mn) mx (conj acc mn))\n      acc)))","problem":34,"user":"52d83c2ce4b09f7907dd138d"},{"problem":34,"code":"(fn\n  this\n  [lower upper]\n  (if (<= upper lower)\n    ()\n    (cons lower (this (+ 1 lower) upper))))","user":"52f8b86de4b047fd55836fdb"},{"problem":34,"code":"(fn [s e](take-while #(< % e)(iterate inc s)))","user":"538d70abe4b0b51d73faae6e"},{"code":"#(loop [s %1,r ()] (if (= s %2) (reverse r) (recur (inc s) (cons s r))))","problem":34,"user":"4fc0221ce4b081705acca322"},{"problem":34,"code":"#(take (- %2 %1)\n         (iterate inc %))","user":"589560d8e4b00487982d5281"},{"code":"(fn myrange [from to]\n  (if (< from to)\n    (cons from (lazy-seq (myrange (+ 1 from) to)))\n    nil))","problem":34,"user":"53695439e4b0243289761e9a"},{"problem":34,"code":"(fn mkrange\n  ([start stop] (mkrange start stop []))\n  ([start stop acc]\n   (if (>= start stop)\n     acc\n     (recur (inc start) stop (conj acc start)))))","user":"5ce6f93be4b0a17bb84e2b99"},{"code":"(fn [beg end] (take-while #(< % end) (iterate inc beg)))","problem":34,"user":"51281b25e4b03a34742b4304"},{"code":"(fn rng [start stop] (if (= start stop) '() (cons start (rng (inc start) stop))))","problem":34,"user":"52990271e4b02ebb4ef7506d"},{"problem":34,"code":"(fn rage [a b] (take (- b a) (map-indexed (fn [i _] (+ i a)) (repeat (- b a) :production-ready))))","user":"5c1c08cde4b01240ff567219"},{"problem":34,"code":"(fn  [x y]\n  (loop [x x y y res []]\n    (if (< x y)\n      (recur (inc x) y (conj res x))\n      res)\n    )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"code":"(fn [a b]\n           (loop [x a c []]\n              (if (= x b)\n               c\n               (recur (inc x) (conj c x)))))","problem":34,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn myrange [x y]\n (if (= 1 (- y x))\n    [x]\n    (cons x (myrange (inc x) y))))","problem":34,"user":"4f036fad535dcb61093f6ac7"},{"problem":34,"code":"#(loop [i (dec (max %1 %2)) l (min %1 %2) r '()] (if (< i l) r (recur (dec i) l (conj r i))))","user":"556a3243e4b09a3098a524de"},{"problem":34,"code":"(fn incy [x n]\n  (if (= x (- n 1))\n    x\n    (flatten (conj '() (incy (inc x) n) x ))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [l h]\n  (take-while (partial > h)\n    (reductions + l (repeat 1))))","problem":34,"user":"502ac96de4b0614b5299611b"},{"problem":34,"code":"(fn [s e] (reduce (fn [s e] \n                    (conj s (+ (last s) 1)))\n                  [s]\n                  (take (dec (- e s)) (repeat 1) )))","user":"5e4beca9e4b0889a8790a560"},{"code":"(fn [start end]\n  (loop [curr start coll []]\n    (if (<= end curr)\n      coll\n      (recur (inc curr) (conj coll curr)))))","problem":34,"user":"4ff6aea8e4b0678c553fc381"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (if (< a b)\n    (conj (my-range (inc a) b) a)))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":34,"code":"(fn [from to]\n   (loop [s [] i from]\n      (if (< i to)\n      \t(recur (conj s i) (inc i))  \n        s\n      ) \n   )\n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"code":"(fn rang [l h]\n  (if (= l (- h 1))\n    (cons l nil)\n    (cons l (rang (+ l 1) h))))","problem":34,"user":"503e6047e4b06c4e0e1fa266"},{"problem":34,"code":"(fn foo [x y]\n\t\t\t\t(if (>= x y)\n\t\t\t\t\t\t\t\tnil\n\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t\t\t\t\t(foo (inc x) y)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n)","user":"575dda55e4b02ea11479938c"},{"problem":34,"code":"(fn myrange [x y]\n  (cond\n    (>= x y) ()\n    (= (+ x 1) y) `(~x)\n    :else (concat `(~x) (myrange (+ 1 x) y))))","user":"5515649fe4b055c2f668d4e3"},{"code":"#(loop [x %1 limit %2 list []]\n    (if (= x limit)\n      list\n      (recur (inc x) limit (conj list x))))","problem":34,"user":"53838742e4b06839e8705ee0"},{"problem":34,"code":"(fn ranging\n  [x y]\n  (when (< x y)\n    (conj (ranging (inc x) y) x)))","user":"5ac4d1f6e4b0e27600da7735"},{"code":"#(if (>= %1 %2)\r\n    ()\r\n    (if (= (inc %1) %2)\r\n      (list %1)\r\n      (loop [result (list (dec %2))]\r\n        (if (= %1 (first result))\r\n          result\r\n          (recur (cons (dec (first result)) result))))))","problem":34,"user":"508b95a0e4b0be79e5b189c6"},{"code":"(fn ran\r\n  ([x y] (ran x y []))\r\n  ([x y r](\r\n          if (= x y) r (recur (inc x) y (conj r x))\r\n            ))\r\n  )","problem":34,"user":"4e44358f535dc968683fc4a8"},{"problem":34,"code":"(fn [start end]\n  (loop [x start res []]\n    (if \n     (< x end)\n      (recur (+ 1 x) (conj res x))\n      res)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"code":"(fn [start end]\n   (take-while #(< %1 end) (iterate inc start)))","problem":34,"user":"4fe9ea87e4b0547ebccb2476"},{"problem":34,"code":"(fn [start end] (take-while #(< % end) (iterate #(inc %) start)))","user":"5f1d22c7e4b0f565ad998268"},{"problem":34,"code":"(fn r [a b] (cond\n  (= a b) (list)\n  (> a b) (conj (r (dec a) b) a)\n  (< a b) (conj (r (inc a) b) a)\n))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":34,"code":"(fn [a z]\n  (loop [r []\n        n a]\n   (if (< n z)\n     (recur (conj r n) (inc n))\n     r\n     )\n   )\n  )","user":"577ab41fe4b0d3393e5deb05"},{"code":"(fn [start end]\n    (take\n      (- end start)\n      (iterate inc start)))","problem":34,"user":"4f253a49e4b0d66497709ff3"},{"problem":34,"code":"(fn ranger [a b]\n  (loop [ind a\n         acc '()]\n    (if (= ind b)\n      (reverse acc)\n      (recur (inc ind)\n             (conj acc ind)))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":34,"code":"(fn my-range [lower upper]\n  (loop [item lower\n         count 0\n         accumulator '()]\n    (if (= count (- upper lower))\n          (reverse accumulator)\n          (recur (inc item) (inc count) (conj accumulator item)))))","user":"58daae01e4b0a4d5acaab664"},{"problem":34,"code":"(fn my-range [beg end]\n  (when (< beg end)\n    (concat [beg] (my-range (inc beg) end))))","user":"501948b3e4b0b6630b101db5"},{"code":"(fn [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"4e21c0c7535d04ed9115e818"},{"problem":34,"code":"(fn my-range\n  [lower upper]\n  (if (= lower upper)\n    '()\n    (conj (my-range (+ lower 1) upper) lower)))","user":"55ee7977e4b0121d4835fdee"},{"problem":34,"code":"(fn myrange [start end]\n\t(loop [i start aggr []]\n\t\t(if (>= i end) aggr\n\t\t(let [n (inc i)]\n\t\t\t(recur n (conj aggr i))))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn my-range [start end]\n  (loop [n 0 result []]\n    (if (= n (- end start))\n      result\n      (recur\n        (inc n)\n        (conj result (+ start n))))))","problem":34,"user":"4e360072535deb9a81d77f30"},{"code":"#(loop [start %1 stop (dec %2) result '()]\n  (if (= (dec start) stop)\n    result\n    (recur start (dec stop) (cons stop result))))","problem":34,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn rng [start stop]\n  (if (= start stop) '()\n      (cons start (rng (inc start) stop))))","problem":34,"user":"4f70afb8e4b07046d9f4effb"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (if (= start end)\n    '()\n    (conj (my-range (inc start) end) start)))","user":"5599abc9e4b031d6649c9bb0"},{"problem":34,"code":"(fn erange [start stop] (take (- stop start) (iterate inc start)))","user":"5137e11ce4b0a5db03d727d0"},{"code":"(fn [start end]\n   (loop [result [start]]\n     (if (= (- end 1) (last result))\n       result\n       (recur (conj result (inc (last result))))\n       )\n     )\n  )","problem":34,"user":"5106dc1be4b01150e115ebf0"},{"problem":34,"code":"(fn ra [start stop]\n  (loop\t[l (list start)]\n    (cond (= (last l) (- stop 1)) l\n    :else (recur (concat l (list (+ 1 (last l))))))\n  )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"problem":34,"code":"(fn [from to]\n  (loop [current from\n         res []]\n    (if (= current to)\n      res\n      (recur (inc current) (conj res current)))))","user":"5ef8e9e0e4b09b61f08553cb"},{"code":"(fn [x, y] \n  (loop [number x, max y, list []]\n    (if (= number max) \n      list \n      (recur (inc number) max (conj list number)))))","problem":34,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn myrange [low high]\n  (take (- high low) (iterate inc low)))","problem":34,"user":"4fc50bcbe4b081705acca375"},{"code":"#(loop [xs nil e (dec %2)] (if (<= % e) (recur (cons e xs) (dec e)) xs))","problem":34,"user":"4ef4e5fa535dced4c769f242"},{"code":"#(loop [s '() x %1]\n   (if (= x %2)\n     (reverse s)\n     (recur (conj s x) (inc x))))","problem":34,"user":"52277ab9e4b0186687e23a4f"},{"problem":34,"code":"(fn myrange\n  [lower upper]\n  (loop [c lower result '()]\n    (if (= (count result) (- upper lower)) (reverse result)\n                                           (recur (inc c) (conj result c)))\n    )\n  )","user":"5a4cbba1e4b05d388ecb6b98"},{"problem":34,"code":"(fn\n  [a b]\n  (loop [res ()\n         n a]\n    (if (= n b)\n      (reverse res)\n      (recur (cons n res) (inc n)))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":34,"code":"(fn [x y] \n  ((fn iterr [start array end]\n    (if (= start end)\n      (sort array)\n      (iterr (+ start 1) (conj array start) end))) x () y))","user":"5b2238d1e4b03cfeda66ed5e"},{"problem":34,"code":"(fn g [x y] (if (= x y) (list) (conj (g(inc x) y)  x)))","user":"553bc237e4b09218d5f4500a"},{"code":"(letfn [(rangex [a b] \n     (if (= a b)\n       ()\n       (cons a (rangex (inc a) b))\n       )\n  )] #(rangex %1 %2))","problem":34,"user":"5356d00ee4b04ce2eb3ed26f"},{"code":"(fn [low hi] (take (- hi low) (iterate #(+ 1 %) low)))","problem":34,"user":"524feb3fe4b0541d1855b81f"},{"code":"(fn [a b] \n  (loop [next a \n         coll []]\n    (if (= next b) \n      coll\n      (recur (inc next) (conj coll next)))))","problem":34,"user":"4ea09fa4535d7eef308072aa"},{"problem":34,"code":"(fn [startNumberInclusive endNumberExclusive]\n  (let [numberToTake (- endNumberExclusive startNumberInclusive)]\n    (take numberToTake (iterate inc startNumberInclusive))))","user":"548f339ee4b0e286459a1233"},{"problem":34,"code":"(fn [start stop] (take-while #(> stop %) (iterate inc start)))","user":"60b61b40e4b0e0fa5f1b4244"},{"code":"(fn Range [start end] (cons start (lazy-seq (when (not= (inc start) end) (Range (inc start) end)))))","problem":34,"user":"51df825de4b01188f062752b"},{"code":"(fn [start end] \n   (reduce\n     (fn [acc _] \n       (let [x (+ start (count acc))]\n         (concat acc (list x))))\n     '()\n     (repeat (- end start) start)))","problem":34,"user":"52e55e16e4b09f7907dd1460"},{"code":"#(loop [a %1 b (- %2 %1) s []] (if (= 0 b) s (recur (inc a) (dec b) (conj s a))))","problem":34,"user":"52a5f1e6e4b0c58976d9abf4"},{"code":"(fn range2 [from to] (\n                      when (< from to)\n                (conj (range2 (inc from) to) from)\n                ))","problem":34,"user":"53981cbce4b0b51d73faaef5"},{"problem":34,"code":"(fn [start bound]\n\t(loop [i start upperBound bound acc (list)]\n\t\t(if (>= i upperBound)\n\t\t\tacc\n\t\t\t(recur (+ i 1) upperBound (concat acc (list i))))))","user":"598af379e4b02b9968b84ce6"},{"code":"(fn [s e]\n  (loop [ss s ee e lst []]\n  (if (= ss ee)\n    lst\n    (recur (inc ss) ee (conj lst ss))\n    )))","problem":34,"user":"4eadc217535d7eef30807321"},{"problem":34,"code":"#(loop [x %1 result []]\n  (if (>= x %2)\n  \tresult\n    (recur (inc x) (conj result x))))","user":"53f5f740e4b0db01ade6f9d8"},{"problem":34,"code":"(fn _range\n  [from to]\n  (lazy-seq\n   (if (>= from to)\n     ()\n     (cons from (_range (inc from) to)))))","user":"5c15537ae4b01240ff5671bf"},{"problem":34,"code":"(fn [mini maxi]\n  (let [n (- maxi mini)]\n    (take n\n          (iterate inc mini))))","user":"58b12635e4b0ebc645576cf4"},{"problem":34,"code":"(fn f [a b]\n  (loop[dif a\n        xs []\n        ]\n    (if(< dif b)\n      (recur (inc dif) (conj xs dif))\n      xs\n      ) \n    )\n  )","user":"5ea7b04de4b00a66d4a951b6"},{"problem":34,"code":"(fn [a b] (take(- b a) (iterate inc a)))","user":"56efef12e4b04a395b9a0467"},{"code":"(fn my-range [n m] (if (>= n m) '() (conj (my-range (inc n) m) n)))","problem":34,"user":"53629381e4b0243289761e54"},{"code":"(fn cr [s e] \n  (reverse (loop [a s, result ()]\n    (if (= a e)\n      result\n      (recur (inc a) (conj result a))))))","problem":34,"user":"52cf084ce4b07d0d72b27399"},{"problem":34,"code":"(fn my-range [start end]\n   (if (= start end)\n     nil\n     (cons start (my-range (inc start) end))))","user":"5db35f85e4b010eb3c36cd22"},{"problem":34,"code":"#(take (- %2 %1)  (iterate inc %))","user":"54aa665fe4b09f271ff37cb8"},{"problem":34,"code":"(fn [st ed] ((fn nxt [s e result] (if (= s e) (reverse result) (nxt (inc s) e (cons s result)))) st ed '()))","user":"54413696e4b032a45b86936b"},{"problem":34,"code":"(fn f [n1 n2] (if (< n1 n2)\n               (conj (f (inc n1) n2) n1 )\n               nil))","user":"548cd813e4b0e286459a1211"},{"problem":34,"code":"(fn  [a b]\n  (loop [acc [a]]\n    (if (= (inc (last acc)) b)\n      acc\n      (recur (conj acc (inc (last acc)))))))","user":"5f38eecce4b0574c87022c72"},{"problem":34,"code":"(fn [a b]\n  (reduce \n    (fn [c d] \n      (concat c (list (inc (last c)))))\n    (list a)\n    (repeat (- b a 1) a)))","user":"5797d3d2e4b039eba2ecb106"},{"code":"(fn [start end]\n  (loop [curr (dec end), result '()]\n    (if (= curr (dec start))\n      result\n      (recur (dec curr) (cons curr result)))))","problem":34,"user":"53070615e4b02e821686979e"},{"problem":34,"code":"(fn [start end]\n                       (loop [i start\n                               out []]\n                          (if (= i end)\n                            (apply list out)\n                            (recur (inc i)\n                                   (conj out i)))))","user":"5bf5ddfde4b0bdcf453d159e"},{"code":"(fn jrange [s e]\n  (if (= s e) []\n    (cons s (jrange (+ s 1) e))))","problem":34,"user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn rg [x y] \n  (if (= x y) nil (cons x (rg (+ x 1) y))))","problem":34,"user":"4fad20cfe4b081705acca235"},{"problem":34,"code":"#(take (- %2 %) (reductions + %1 (repeat 1)))","user":"5122925ae4b068a9582e656d"},{"problem":34,"code":"(fn [start limit]\n  (loop [item start\n         res []]\n    (if (< item limit)\n      (recur (inc item) (conj res item))\n      res)))","user":"5675cdf1e4b05957ce8c614d"},{"problem":34,"code":"(fn my-range [from to]\n  (let [no-items (- to from)]\n    (take no-items (iterate inc from))))","user":"53f891eee4b0de5c4184856d"},{"problem":34,"code":"(fn [x y]\n  (loop [i x l ()]\n    (if (= i y)\n      (reverse l)\n      (recur (inc i) (conj l i)))))","user":"55228c3ce4b0882d96d091a2"},{"problem":34,"code":"(fn myrange\n  [start end]\n  (loop [result []\n         index start]\n    (if (= end index)\n      result\n      (recur (conj result index) (inc index)))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"problem":34,"code":"#(->> ((fn [%1 %2]\n        (loop [start %1 end %2 result '()]\n          (if (= start end)\n            result\n            (recur (inc start) end (conj result start)))))\n       %1 %2)\n     (reverse))","user":"5a71c89ee4b0512ff01cda93"},{"problem":34,"code":"(fn [l r]\n  (loop [i l\n         res []]\n    (if (< i r)\n      (recur (inc i) (conj res i))\n      res)))","user":"5169d422e4b051e2a73aba53"},{"problem":34,"code":"(fn [in qt] (take (Math/abs (- in qt)) (iterate #(+ 1 %) in)))","user":"5b611666e4b0c6492753e70d"},{"code":"(fn rng [l h]\n  (when (< l h)\n    (cons l (rng (inc l) h))))","problem":34,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn my-range [start-inc end-exc]\n  (loop [start-inc start-inc result []]\n    (if (= start-inc end-exc)\n      (seq result)\n      (recur (inc start-inc) (conj result start-inc)))))","problem":34,"user":"4fae4c11e4b081705acca248"},{"problem":34,"code":"(fn [s e] ( let [tk (- e s)] (take tk (iterate inc s))))","user":"5463c452e4b01be26fd746c4"},{"problem":34,"code":"(fn myrange [lo hi]\n  (take (- hi lo) (iterate inc lo)))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn [s e]\n  (loop [i s, coll []]\n    (if (< (- e i) 1)\n      \tcoll\n        (recur (inc i) (conj coll i)))))","problem":34,"user":"527dc2aee4b0757a1b17138d"},{"problem":34,"code":"(fn x [u v]\n  (let [ l (fn l[start stop acc]\n  (if (>= (inc start) stop)\n    (cons start  acc)\n    (l (inc start) stop (cons start acc))))]\n    (reverse (l u v []))))","user":"5897dda4e4b00487982d52c8"},{"problem":34,"code":"(fn [a b] (apply list (loop [x b\n                              y (vector a)]\n                         (if (= (last y) (dec b))\n                           y\n                           (recur (dec x) (conj y (inc (last y))))))))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":34,"code":"(fn r [a b] (lazy-seq (if (< a b) (cons a (r (inc a) b)) nil)))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":34,"code":"(fn [a b]\n  (loop [tmp a\n         result (list)]\n    (if (< tmp b)\n      (recur (inc tmp) (concat result (list tmp)))\n      result\n      )))","user":"54530382e4b0e397800069cc"},{"code":"(fn [x y]\n  (take (Math/abs (- x y)) (iterate inc x)))","problem":34,"user":"5098f5d6e4b0cae2931060a4"},{"problem":34,"code":"#(loop [nb %1\n            acc '()]  \n       (if (= nb %2)\n         (reverse acc)\n         (recur (inc nb) (conj acc nb))))","user":"52658b67e4b03e8d9a4a710d"},{"code":"#((fn [x y z] \n  (if (= z x)\n    (cons z y)\n    (recur x (cons z y) (dec z))\n  ))\n  % '() (dec %2))","problem":34,"user":"4eebfd03535d93acb0a668ab"},{"problem":34,"code":"(fn\n   [start end]\n   (take (- end start) (iterate inc start)))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":34,"code":"(fn [mi ma]\n  (loop [c (- ma 1) res '()]\n    (if (< c mi)\n      res\n      (recur (dec c) (conj res c)))))","user":"541c1e46e4b01498b1a71a70"},{"code":"(fn foo [x y]\n  (if (>= x y)\n    '()\n    (cons x (foo (inc x) y))))","problem":34,"user":"5236cd89e4b0e010857b4e45"},{"problem":34,"code":"(fn [start end] (take-while #(not= end %) (iterate inc start)))","user":"5eebbf9ee4b029a2061bbed2"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [i start\n         result '()]\n    (if (= i end)\n      (reverse result)\n      (recur (inc i) (cons i result)))\n    )\n  )","user":"59ea07c9e4b0249b72820756"},{"code":"(fn rrange [xs s e] (if (>= s e) xs (rrange (conj xs s) (inc s) e))) []","problem":34,"user":"5211d195e4b07aea8afc4f76"},{"problem":34,"code":"(fn\n  [mn mx]\n  (loop [x mn\n         res []]\n    (if (< x mx)  \n      (recur (inc x) (conj res x))\n      res)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":34,"code":"(fn [a b]\n  (loop [l '()\n         x a\n         y b]\n    (if (>= x y)\n      l\n      (recur (conj l (dec y)) x (dec y)))))","user":"59f75327e4b0966464fe6aec"},{"problem":34,"code":"(fn fib [from to]\n  (take (- to from) (iterate inc from)))","user":"5b7292b3e4b047b03b2036a4"},{"code":"(fn [x y] (\n  (fn d [x y se] (\n    if (< y x) \n      se\n      (d x (dec y) (conj se y)))\n  ) x (dec y) '() )\n)","problem":34,"user":"4fcf5292e4b03432b189f40e"},{"problem":34,"code":"(fn r [f e] (if (= f e) '() (conj (r (inc f) e) f)))","user":"563dfc02e4b0da801c4e4662"},{"problem":34,"code":"(fn range1 [a b]\n  (loop [result []\n         n a]\n    (if (< n b)\n      (recur (conj result n)\n                  (inc n))\n      result)))","user":"60460824e4b02d28681c77bc"},{"problem":34,"code":"(fn [start stop]\n  (loop [i start\n         r []]\n    (if (= (count r) (- stop start))\n      r\n      (recur (inc i) (conj r i)))\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"code":"(fn [v s e] \n  (if (= e s) v\n    (recur (conj v s) (inc s) e))) []","problem":34,"user":"4eb9c82d535dfed6da9c6d5c"},{"code":"(fn [s e]\r\n  (loop [c s r []]\r\n    (if (= c e) r\r\n      (recur (inc c) (conj r c)))))","problem":34,"user":"4f29cdc8e4b0d6649770a033"},{"problem":34,"code":"(fn [x y]\n  ((fn rng [a b c]\n    (if (= a b)\n      c\n      (cons a (rng (inc a) b c)))) x y '())\n   )","user":"5f06d26ae4b0cf489e8d7f53"},{"code":"(fn [f t]\n  (loop [i (dec t), r '()]\n    (if (< i f) \n      r\n      (recur (dec i) (conj r i)))))","problem":34,"user":"4e46e4d0535dc968683fc4b8"},{"problem":34,"code":"(fn rng [start end]\n   (if (= start end)\n     []\n     (into [start] (rng (inc start) end))))","user":"54393c3fe4b032a45b86931a"},{"code":"(fn __ [start end]\n  (if (= start (dec end))\n    start\n    (flatten [start (__ (inc start) end)])))","problem":34,"user":"53415755e4b00652c8746ecd"},{"problem":34,"code":"(fn [f t] \n   (loop [n f\n          a []] \n     (if (= n t) a \n       (recur (+ n 1) (conj a n)\n              ))))","user":"55a31c66e4b0acc240e31530"},{"code":"(fn my-range\n  ([lower upper]\n     (my-range [lower] (inc lower) upper))\n  ([coll lower upper]\n     (if (= lower upper)\n       coll\n       (recur (conj coll lower)  (inc lower) upper))))","problem":34,"user":"4fa27e18e4b0dcca54ed6d68"},{"code":"(fn rng [low high]\n  (cond\n    (>= low high) ()\n    :else (cons low (rng (inc low) high))))","problem":34,"user":"4ed2a92b535d44c135fd68dc"},{"code":"(fn [start end]\n   (take (- end start) (iterate inc start)))","problem":34,"user":"53528cd3e4b084c2834f4af2"},{"problem":34,"code":"(fn thirtyfour [min max]\n  (let [size (- max min)\n        h (repeat size min)]\n    (reduce\n     (fn [a b]\n       (conj a (inc (last a))))\n     [(first h)]\n     (rest h))))","user":"5dbf6016e4b0e59a23173d79"},{"code":"(fn my-range [n m]\n  (if (< n m)\n      (lazy-seq (cons n (my-range (+ n 1) m)))\n      '()))","problem":34,"user":"4e860e85535db62dc21a62f1"},{"code":"#(loop [i %2 x ()]\n       (if (= i %)\n         x\n        (recur (- i 1) (conj x (- i 1)))\n))","problem":34,"user":"4e43b0d9535dc968683fc4a3"},{"code":"(fn [start end] (take-while (partial > end) (iterate inc start)))","problem":34,"user":"518ec633e4b0cd6ff516769e"},{"problem":34,"code":"#((fn [& {l :l r :r s :s res :res :or {s 1 res []}}] \n   (if (< l r)\n     (recur {:l (+ l s) :r r :s s :res (conj res l)})\n   res)) :l %1 :r %2)","user":"58b84c28e4b0ebc645576d94"},{"problem":34,"code":"(fn [lo hi]\n   (loop [n lo\n          result []]\n     (if (<= hi n)\n       result\n       (recur (inc n) (conj result n)))))","user":"5954108ae4b066ee0a44aef4"},{"code":"(fn[x y]  (take (- y x) (iterate inc x )))","problem":34,"user":"52810225e4b0757a1b171418"},{"problem":34,"code":"(fn [b e]\n  (loop [s [] n b]\n    (if (= n e)\n      s\n      (recur (conj s n) (inc n)))))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":34,"code":"(fn [x y] (take (- y x) (map inc (iterate inc (dec x)))))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"code":"(fn [start stop] \n\t(let [l (- stop start)]\n      (take l (iterate inc start))))","problem":34,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [start\n     end]\n  (loop [index start\n         result []]\n    (if (= index end)\n      result\n      (recur (inc index) (conj result index)))))","problem":34,"user":"51508efce4b0c51f0585bbb4"},{"problem":34,"code":"#(loop [n % m %2 l []] (if (>= n m) l (recur (inc n) m (conj l n))))","user":"527bd988e4b03e8d9a4a759d"},{"problem":34,"code":"(fn\n\t[inicio fim]\n\t(\n     (fn\n\t[coll fim]\n\t(let [ultimo-valor (last coll)]\n\t\t(if (= (inc ultimo-valor) fim)\n\t\t\tcoll\n\t\t\t(recur (conj coll (inc ultimo-valor)) fim))\n\t\t)\n\t)\n     (conj [] inicio) fim)\n\t)","user":"5d797deee4b02e6b30c93541"},{"code":"(fn [beg end]\n  (let [len (- end beg)]\n    (take len (iterate inc beg))))","problem":34,"user":"4f39c08ae4b0e243712b1efb"},{"problem":34,"code":"(fn new-range\n   [a b]\n   (if (not= a b)\n     (cons a (new-range (inc a) b))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":34,"code":"(fn[s e]\n  (take (- e s) (iterate inc s)))","user":"5594f8aee4b0c79f6e1db95c"},{"problem":34,"code":"#(loop [agg '() low %1 high %2]\n   (if (= low high)\n     agg\n     (recur (concat agg [low]) (inc low) high)\n   )\n)","user":"583dacc2e4b089d5ab817d9f"},{"problem":34,"code":"#(loop [a   (dec %2)\n        acc '()]\n   (if (= %1 a)\n       (cons a acc)\n       (recur (dec a) (cons a acc))))","user":"55c49394e4b0e31453f6499e"},{"problem":34,"code":"(fn [s e]\n  (loop [s s r []]\n    (if (= s e)\n      r\n      (recur (inc s) \n             (conj r s)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":34,"code":"(fn [x y]\n  (loop [i x xs []]\n    (if (= i y)\n      xs\n      (recur (inc i) (conj xs i)))))","user":"5188c249e4b0bdff0e072d54"},{"problem":34,"code":"#(for [n (iterate inc %1) :while (< n %2)] n)","user":"555ac933e4b0deb715856e49"},{"code":"(fn [start end]\n  (loop [current start coll []]\n    (if (= end current)\n      (seq coll)\n      (recur (inc current) (conj coll current)))))","problem":34,"user":"4e46e48b535dc968683fc4b7"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [coll [] cnt start]\n    (if (< cnt end)\n      (recur\n        (conj coll cnt)\n        (inc cnt))\n      coll)))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"#(loop [i %1 acc ()]\n   (if (= i %2) \n     (reverse acc)\n     (recur (inc i) (cons i acc))))","problem":34,"user":"52974f66e4b02ebb4ef75040"},{"code":"(fn my-range [start finish]\n  (loop [x start result []]\n    (if (< x finish)\n      (recur (inc x) (conj result x))\n      result)))","problem":34,"user":"51baff1be4b0fe3ecfb46443"},{"problem":34,"code":"(fn \n ([start end]\n         (loop [c start\n                ran []]\n           (if (>= c end)\n             ran\n             (recur (inc c) (conj ran c))))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":34,"code":"#(loop [start %1 end %2 x ()]\n    (if (= start end)\n      (reverse x)\n      (recur (inc start) end (conj x start))\n    )\n  )","user":"54d4ec31e4b0a52adc2e2007"},{"problem":34,"code":"(fn r [min max]\n  (if (< min max)\n    (lazy-seq (cons min (r (inc min) max)))\n    ()))","user":"5069d8c5e4b01dc6af13f838"},{"problem":34,"code":"(fn [f l] \n  (loop [i f \n         r '()] \n    (if (= i l) \n      (reverse r) \n      (recur (inc i) (conj r i)))))","user":"561047eae4b05f002753df6d"},{"code":"(fn [start end]\n  (loop [i start r []]\n    (if (= i end) r\n        (recur (inc i) (conj r i)))))","problem":34,"user":"4ea1bc93535d7eef308072b9"},{"code":"(fn [from to] \n  (loop [x from out '()] \n    (if (>= x to) (reverse out) (recur (inc x) (cons x out)))))","problem":34,"user":"4df0524e535d08e6dec9fe17"},{"problem":34,"code":"#(loop\n   [i %1\n    l ()]\n   (if(< i %2)\n     (recur (inc i) (conj l i))\n     (reverse l)))","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn [start end] (loop [s start a []] (if (or (= s end) (> s end)) a (recur (inc s) (conj a s)))))","problem":34,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [from to]\n  (take (- to from) (iterate inc from)))","problem":34,"user":"4e5bff2b535d8a8b8723a2bd"},{"code":"(fn [a b] \n   (loop [a a\n          b b\n          nsq []]\n     (if (= a b)\n       nsq\n       (recur (inc a) b (conj nsq a)))))","problem":34,"user":"50618c62e4b0a30dc9a35d33"},{"problem":34,"code":"(fn [start end]\n    (loop [value start results []]\n      (if (= value end)\n        results\n        (recur (inc value) \n          (conj results value))))\n  )","user":"5f331015e4b0574c87022c37"},{"problem":34,"code":"#(loop [x %1 \n        y %2 \n        r []]\n    (if (= y x)\n      (seq r)\n      (recur (inc x) y (conj r x))))","user":"586f1aa7e4b01531a375e9ba"},{"problem":34,"code":"(fn [s e]\n  (loop [c s\n         r []]\n    (if (= c e)\n      r\n      (recur (+ 1 c) (conj r c)))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":34,"code":"(fn new-range [lower-b higher-b]\n  (if (= (inc lower-b) higher-b)\n    [lower-b]\n  \t(cons lower-b (new-range (inc lower-b) higher-b))))","user":"5a514e68e4b05d388ecb6be5"},{"problem":34,"code":"(fn rang [x y]\n  (if (> (- y 1) x)\n  \t(cons x (rang (+ x 1) y))\n    [x]\n  )\n)","user":"548018e3e4b0c51c1f4d7330"},{"problem":34,"code":"(fn myRange\n  [start end]\n  (if (= start end)\n    []\n    (cons start (myRange (inc start) end))\n    ))","user":"5a9567bae4b0d174b936c752"},{"problem":34,"code":"#(loop [index (- %1 1)\n         to (- %2 1)\n         col []]\n    (if (< index to)\n      (recur (inc index) to (conj col (inc index)))\n      col)\n    )","user":"565b371fe4b068f2fe63dbff"},{"code":"(fn f [s e & ret] (if (and (not (nil? ret)) (>= (first (first ret)) e)) (reverse (rest (first ret))) (f (inc s) e (cons s (first ret)))))","problem":34,"user":"4e059278535d04ed9115e7a5"},{"code":"(fn custom-range [start end]\n  (loop [v start acc []]\n    (if (= v end)\n      (seq acc)\n      (recur (+ v 1) (conj acc v)))))","problem":34,"user":"4f046d70535dcb61093f6bc5"},{"code":"(fn [s l] (map-indexed (fn [i x] (+ i s)) (repeat (- l s) 0)))","problem":34,"user":"4e61bb60535d8ccf87e9fe5c"},{"code":"(fn r [x y] (if (>= x y) '() (cons x (r (+ x 1) y))))","problem":34,"user":"53638ed2e4b0243289761e5b"},{"problem":34,"code":"(fn [start end]\n  (loop [n start l []]\n    (if (>= n end)\n      l\n      (recur (inc n) (conj l n)))))","user":"5fa8424ce4b0fa27300f3de5"},{"code":"(fn [b e]\n  (loop [n (inc b) s [b]]\n    (if (= n e)\n      s\n      (recur (inc n) (conj s n)))))","problem":34,"user":"504c8165e4b09724c857af31"},{"problem":34,"code":"#(loop [s %1 e %2 lst []]\n   (if (< s e)\n     (recur (inc s) e (conj lst s))\n     lst))","user":"5688d6a8e4b0dcc4269f4071"},{"problem":34,"code":"(fn [n x] (take (- x n) (iterate inc n)))","user":"57f2bf56e4b0511f1d294df8"},{"code":"(fn [a b]\n  (loop [a a s []]\n    (if (= a b) s\n      (recur (inc a) (conj s a)))))","problem":34,"user":"4e7e3cc4535db169f9c7970a"},{"problem":34,"code":"(fn [start end] \n  (loop [answer [] current_pos start]\n  \t(if (= (- end 1) (last answer))\n     answer\n     (recur (conj answer current_pos) (+ current_pos 1) ))\n  ))","user":"542baf7ce4b0dad94371f291"},{"problem":34,"code":"(fn [start end]\n (take (- end start) (iterate inc start)))","user":"59d631d4e4b0ef0a1e9b5c09"},{"problem":34,"code":"(fn my-range[from to]\n  (take (- to from) (iterate inc from)))","user":"4dd76bf9535d2dad7130b5d1"},{"code":"#(reverse\n  (loop [i %1\n         col '()]\n     (if (= i %2)\n       col\t     \n      (recur (inc i)\n             (cons i col)))))","problem":34,"user":"517cc671e4b0bbbf1f12af0a"},{"code":"(fn [a b]\n  (loop [i a acc '()]\n    (if (= i b)\n      (reverse acc)\n      (recur (inc i) (cons i acc)))))","problem":34,"user":"5341b141e4b00652c8746ecf"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [result [start]\n         last-value start]\n    (if (= (inc last-value) end)\n      (seq result)\n      (recur (conj result (inc last-value)) (inc last-value)))))","user":"600d9808e4b074f607df669c"},{"code":"(fn rng [beg end]\n  (loop [beg beg end end acc []]\n    (if (not= beg end)\n      (recur (inc beg) end (conj acc beg))\n      acc)))","problem":34,"user":"51750cd4e4b07031762f2ee5"},{"code":"#(loop [i %1 sq []]\n   (if (= %2 i)\n     sq\n     (recur (inc i) (conj sq i))))","problem":34,"user":"52efd3d9e4b05e3f0be25ed4"},{"code":"#(reduce (fn [x y] (conj x (+ 1 (last x)))) [%] (repeat (- %2 % 1) %))","problem":34,"user":"50223ee2e4b0846bc458ae48"},{"code":"(fn [start stop]\n\t\t(take (- stop start) (iterate inc start)))","problem":34,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn [min max]\n  (let [f (fn this [num arr]\n    (if (>= num max) arr\n        (this (inc num) (conj arr num))))]\n    (f min [])))","problem":34,"user":"4f74fe77e4b0fbe0118ec552"},{"problem":34,"code":"(fn my-range2 [low high]\n  (take-while\n    (partial > high)\n    (iterate inc low)))","user":"54cf54b1e4b018d918be98cc"},{"code":"(fn\n   [x y]\n   (take\n     ((fn [input]\n        (if (neg? input)\n          (+ y (* -1 input)) input))\n          (- y x))\n     (iterate inc x)))","problem":34,"user":"4ea95e56535d7eef30807302"},{"problem":34,"code":"(fn[n m]\n  \t(loop[i m l '()]\n      \t(if (= i n)\n          \t l\n          \t(recur (dec i) (conj l (dec i))))))","user":"56483f45e4b0284900eef62b"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [in start out []]\n    (if (= in end) out\n      (recur (+ in 1) (conj out in)))))","user":"52420e2fe4b076e5d3121f48"},{"problem":34,"code":"(fn prob34 [x y]\n  (take (- y x) (iterate inc x)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":34,"code":"(fn [x y] \n  (loop [y (- y 1)\n         acc ()]\n    (if (<  y  x )\n      acc\n      (recur (dec y) (conj acc y))\n     )\n  )\n )","user":"5650ac8be4b0284900eef6c2"},{"problem":34,"code":"(fn [start end] \n  (loop [end (- end 1)\n         res ()]\n    (cond \n     (= start end) (cons start res)\n     :else (recur (dec end) (cons end res)))))","user":"59e8cd8be4b0249b72820739"},{"code":"(fn my-range\n  [from to]\n  (loop [iter from, acc []]\n    (if (< iter to)\n      (recur (inc iter) (conj acc iter))\n      acc)))","problem":34,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn [a b]\n  (loop [i a r []]\n    (if (< i b) (recur (inc i) (conj r i)) r)))","problem":34,"user":"5207d70ae4b03bd50ef54675"},{"problem":34,"code":"(fn [lb ub] (take-while #(< % ub) (iterate inc lb)))","user":"5501a1e1e4b07d26eda61d75"},{"problem":34,"code":"(fn my-range\n  ([start end]\n\t(my-range [] start end))\n  ([result start end]\n   \t(if (= start end)\n      result\n      (my-range (conj result start) (inc start) end))))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":34,"code":"#(loop [col [] x %1 max %2] (if (> (inc x) max) col (recur (conj col x) (inc x) max)))","user":"5d083205e4b0cc9c91588203"},{"problem":34,"code":"#(loop [i % out []] (if (< i %2) (recur (inc i) (conj out i)) out) )","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":34,"code":"(fn [ini mx] (take (- mx ini) (iterate inc ini)))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":34,"code":"#(loop [x %1\n       acc []]\n   (if (= x %2)\n     acc\n     (recur (inc x) (conj acc x))))","user":"5432df22e4b0dad94371f2f5"},{"problem":34,"code":"(fn myrange [start end]\n  (if (>= start end)\n    '()\n    (lazy-seq (cons start (myrange (inc start) end)))))","user":"55d354e0e4b0e31453f64a62"},{"problem":34,"code":"(fn impRange \n  [n x]\n  (take (- x n) (iterate inc n)))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn [x y]\n  (reverse (loop [cnt x\n         acc '()]\n    (if (= cnt y)\n      acc\n      (recur (+ cnt 1) (cons cnt acc))))))","problem":34,"user":"5139ff96e4b067e25a345ec1"},{"problem":34,"code":"(fn rng [start end]\n (seq (reduce #(conj %1 (+ %2 (last %1)))\n        [start]\n        (repeat (- end start 1) 1))))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"#(loop [i %1 r []]\n   (if (= i %2)\n     r\n     (recur (inc i) (conj r i))))","problem":34,"user":"5103807fe4b00c483ae17703"},{"code":"(fn [x y]\r\n  (letfn [(mr [a b lst]\r\n    (if (< a b)\r\n       (recur (inc a) b (concat lst (list a)))\r\n       lst))]\r\n    (mr x y '())))","problem":34,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [n m]\n  ((fn iter [l n m]\n    (if (= n m)\n      l\n      (iter (conj l n) (+ n 1) m))) [] n m))","problem":34,"user":"517531c6e4b07031762f2eea"},{"code":"(fn [ret cur end]\n  (if (= end cur) (reverse ret)\n    (recur (cons cur ret) (inc cur) end))) ()","problem":34,"user":"51592b81e4b0394f658fe22c"},{"code":"(fn [x y]\n  (take (- y x)\n    (iterate inc x)))","problem":34,"user":"5160195ae4b0e2be8aa20be3"},{"problem":34,"code":"#((fn [p q r] (if (= p q)\n  \t              r\n              \t  (recur (inc p) q (conj r p)))) %1 %2 [])","user":"53fa3524e4b0de5c41848578"},{"problem":34,"code":"(fn r [lo up & [c]]\n  (if (= lo up)\n    (reverse c)\n    (r (+ lo 1) up (if (nil? c)\n                   (conj '() lo)\n                   (conj c lo)))))","user":"5540fe42e4b0a04f7929950a"},{"problem":34,"code":"(fn my-range [start end] (lazy-seq (if (>= start end)\n                                       '()\n                                       (cons start\n                                             (my-range (inc start)\n                                                       end\n                                             )\n                                       )\n                                   )\n                         )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"problem":34,"code":"#(loop [x %1, y %2, r []]\n   (if (>= x y)\n     r\n     (recur (inc x) y (conj r x))))","user":"568cea39e4b0dcc4269f40bc"},{"problem":34,"code":"(fn rec [start end]\n  (if (< start end)\n    \t(lazy-seq (cons start (rec (inc start) end)))))","user":"59fa0bb6e4b0ca45a743a352"},{"problem":34,"code":"(fn rnge [start end]\n  (if (= start (dec end))\n    (list start)\n    (concat\n     (list start)\n     (rnge (inc start) end))))","user":"54c9e00be4b045293a27f683"},{"code":"(fn my-range\n  ([start end]\n     (my-range start end (list)))\n  ([start end output]\n     (if (= start end)\n       (reverse output)\n       (recur (+ 1 start) end (cons start output)))))","problem":34,"user":"511720eae4b0063b4e3e16da"},{"problem":34,"code":"(fn [a b]\n  (loop [lista []\n         pocetak a]\n    (if (= pocetak b) lista (recur (conj lista pocetak) (+ pocetak 1)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":34,"code":"#_(fn fun [x n]\n  (cons x\n        (if (< (inc x) n)\n          (fun (inc x) n)\n          '()\n          )\n        )\n  )\n\n(fn fun [x n]\n  (cons x (when (< (inc x) n)  (fun (inc x) n))))","user":"58aa8083e4b01a0c0b232985"},{"problem":34,"code":"#(loop [idx %1 r []]\n   (if (= idx %2)\n     r\n     (recur (inc idx) (conj r idx))))","user":"56815e2fe4b0945ebc182a84"},{"problem":34,"code":";(\n(fn [start end] \n  (loop [current start\n         coll []]\n    (if (< current end)\n      (recur (inc current) (conj coll current))\n      coll)))\n;1 4)","user":"5f757c1ce4b02876ed9fd0aa"},{"problem":34,"code":"#_(fn [start end]\n  (loop [result []\n         n start]\n    (if (= n end)\n      result\n      (recur (conj result n) (inc n)))))\n\n(fn my-range [start end]\n  (if (= start end)\n    []\n    (cons start (my-range (inc start) end))))","user":"5d6f063de4b04d129b00f2d1"},{"problem":34,"code":"(fn [start-at end-before] (reverse ((fn rng [index newC] (if (= index end-before) newC (rng (+ index 1) (cons index newC)))) start-at '())))","user":"5d1cd478e4b02ea6f0fb6991"},{"problem":34,"code":"#(take (- (+ 10 %2) (+ 10 %)) (iterate inc %))","user":"56c560ede4b05cc29241eea6"},{"problem":34,"code":";#(take (- %2 %1) (iterate inc %1))\n\n;(fn f [s e]\n;  (loop [x s acc []]\n;    (if (< x e)\n;      (recur (inc x) (conj acc x))\n;      acc)))\n\n(fn [from to]\n  (take-while #(< % to)\n              (iterate inc from)))","user":"58299e03e4b051871117bf46"},{"problem":34,"code":"#( loop [ i %1 \n            end %2 \n            acc []] \n      (if (= i end)\n         acc\n      (recur (+ i 1) (identity end) (conj acc i))))","user":"53da8fede4b0e771c30254a3"},{"problem":34,"code":"(fn mrange [start end]\n  (loop [e (dec end)\n        coll '()]\n    (if (< e start) coll\n        (recur (dec e) (cons e coll)))))","user":"6022429be4b0d5df2af22200"},{"problem":34,"code":"(fn myrange\n  [a b]\n  (take (- b a) (iterate #(+ % 1) a)))","user":"57fc34f0e4b0d3187e90098e"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc' %1))","user":"57122b20e4b09c608db70451"},{"code":"(fn [a b]\n    (loop [a a dst []]\n        (if (< a b)\n            (recur (+ a 1) (conj dst a))\n            dst\n            )\n        ))","problem":34,"user":"539755d9e4b0b51d73faaee8"},{"code":"#(loop [i (dec %2) v ()]\n  (if (>= i %)\n    (recur (dec i) (conj v i))\n    v))","problem":34,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn rangex [s f]\n  (lazy-seq\n    (when (< s f)\n      (cons s (rangex (inc s) f)))))","problem":34,"user":"4f58d92fe4b0a7574ea71858"},{"problem":34,"code":"#(loop [res []\n        i %1]\n   (if (< i %2)\n     (recur (conj res i) (inc i))\n     res\n     ))","user":"60096aabe4b074f607df667f"},{"problem":34,"code":"(fn [N M]\n\t(let [func (fn iter [n seq]\n\t\t(if (= n M)\n\t\t\tseq\n\t\t\t(iter (inc n) (conj seq n))))]\n\t(reverse (func N '()))))","user":"5583888ae4b05c286339e117"},{"problem":34,"code":"#(take (- %2 %1) ((fn pp ([n] (lazy-seq (cons n (pp (inc n)))))) %1))","user":"5934a43ce4b072a2710fd07e"},{"problem":34,"code":"(fn rng \n  ([a b] \n   (rng \n    a\n    (- b a) \n    [])) \n  ([a c res] \n   (if (> c 0) \n     (rng \n      (inc a) \n      (dec c) \n      (conj res a)) \n     (apply list res)\n     )\n   )\n  )","user":"5810b899e4b0f478707a05d8"},{"problem":34,"code":"(fn [a b] ( take  (- b a) (iterate inc a )))","user":"59a9e517e4b08cbb53654d79"},{"problem":34,"code":"(fn [start end]\n  (loop [c start\n         res []]\n    (if (< c end)\n      (recur (inc c) (conj res c))\n      res)))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn create-range [s e]\n\t(take (- e s) ((fn add-recur [a] (cons a (lazy-seq (add-recur (+ a 1))))) s)))","problem":34,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":34,"code":"(fn [s e]\n  (loop [acc s\n         n   []]\n    (if (>= acc e)\n      n\n      (recur (inc acc) (conj n acc)))))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":34,"code":"(fn lstRange\n  [a\n   b]\n  (loop [i (- b a)\n         j 0\n         a a\n         resul ()\n         ]\n    (if (= j i)\n      (reverse resul)\n      (recur i (+ j 1) a (conj resul (+ a j)))\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"code":"(fn [s e] (loop [cnt s result []]\n            (if (= cnt e)\n              (reverse result)\n              (recur (+ cnt 1) (cons cnt result)))))","problem":34,"user":"52f304b4e4b05e3f0be25f07"},{"problem":34,"code":"(fn [arg1 arg2]\n      (take ( - arg2 arg1) (iterate inc arg1)))","user":"5cb6256ce4b026601754b947"},{"code":"(fn [s e](loop [r [] i s] (if (> (inc i) e) r (recur (conj r i) (inc i)))))","problem":34,"user":"52105865e4b080a8d9b9d639"},{"code":"#( take (- %2 % ) (iterate inc %) )","problem":34,"user":"4f83ee95e4b033992c121c26"},{"code":"#(loop [a %1 r []]\n  (if (>= a %2)\n    r\n    (recur (inc a) (conj r a))))","problem":34,"user":"50a5f72fe4b0aa96157e2611"},{"code":"(fn [x y]\n\t(take (- y x) (iterate #(inc %1) x)))","problem":34,"user":"50ed5d1be4b06330c1f87c37"},{"problem":34,"code":"(fn rng [st end]\n  (if (>= st end) \n    '()\n    (lazy-seq (cons st (rng (inc st) end)))))","user":"594bc16be4b07ddc2dafae39"},{"code":"#(loop [vec []  start %1  end %2]\n  (if (<= end start)\n\t\tvec\n\t\t(recur (conj vec start) (inc start) end)\n\t)\n)","problem":34,"user":"50b51c06e4b0c464d223d1c1"},{"code":"(fn [a b]\n  (letfn [(r [c res]\n             (if (< c a)\n               res\n               (recur (dec c) (cons c res))))]\n    (r (dec b) '())))","problem":34,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":34,"code":"(fn [s e]\n  (take-while (partial > e) (iterate inc s)))","user":"53dfbc75e4b0d874e779ae44"},{"code":"(fn [s f]\n   (loop [s s e f r []]\n     (if (= s f)\n       r\n       (recur (inc s) f (conj r s)))))","problem":34,"user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":34,"code":"(fn count-to\n  ([from to] (count-to from to '()))\n  ([from to acc]\n   (println from to acc)\n\n   (if (= from to)\n     (reverse acc)\n     (count-to (inc from) to (conj acc from))\n   )\n   )\n  )","user":"5a663a32e4b0512ff01cd9c2"},{"problem":34,"code":"(fn [i m ] (loop [init i, max m, result '()] \n                (if (< init max)\n                  (recur (inc init), max, (concat result [init]))\n                  result)))","user":"5cf5775ce4b087f62be35a98"},{"code":"(fn\n  [start stop]\n  (take (- stop start) (iterate (partial + 1) start)))","problem":34,"user":"4f6bab49e4b07046d9f4efb1"},{"problem":34,"code":"#(loop\n   [acc []\n    n %1]\n   (if (= n %2)\n     acc\n     (recur (conj acc n) (inc n))))","user":"5daa1fc8e4b000c986472c3e"},{"problem":34,"code":"(fn my-range [min max]\n  (loop [i (dec max)\n         a '()]\n    (if (= i (dec min))\n      a\n      (recur (dec i) (conj a i)))))","user":"5fada7cce4b08cb800c85af5"},{"problem":34,"code":"#(loop [n %1 z []]\n   (if (= n %2)\n     (seq z)\n     (recur (+ n 1) (conj z n))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":34,"code":"#(loop [i %1 acc ()] (if (= i %2) (reverse acc) (recur (inc i) (conj acc i))))","user":"5315ba94e4b08068f379ed34"},{"code":"(fn [b e] \n  (reverse \n   (loop [res () v (dec b)] \n     (if (= (count res) \n            (- e b)) \n       res \n       (recur (conj res (inc v)) (inc v))))))","problem":34,"user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":34,"code":"#(loop [a %1 b %2 c ()]\n\t(if (= a b)\n\t\tc\n\t\t(recur (inc a) b (concat c (list a)))\n\t)\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"code":"(fn [lo hi]\n   (take-while #(< % hi) (iterate inc lo)))","problem":34,"user":"4f616892e4b0defedf855fbf"},{"code":"#((fn f[from to col] (if (= from to) col (f (inc from) to (conj col from)))) %1 %2 [])","problem":34,"user":"5311b367e4b08068f379eced"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start\n         stop stop\n         acc '()]\n    (if (= start stop)\n      acc\n      (let [new-elem (- stop 1)]\n        (recur start new-elem (conj acc new-elem))))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":34,"code":"(fn [start end]\n     (reduce (fn [a [index value]]\n          (conj a (+ value index)))\n        []\n        (map-indexed vector (repeat (* -1 (- start end)) start))))","user":"5eb1e42ae4b00a66d4a95202"},{"code":"(fn my-range [x y]\n  (if (= x y) '() (conj (my-range (+ 1 x) y) x)))","problem":34,"user":"52f5f8b4e4b09b582c12c9cc"},{"problem":34,"code":"#(loop [current (dec %2) stop %1 res '()]\n   (if (< current stop)\n     res\n     (recur (dec current) stop (cons current res))))","user":"59d4a160e4b0ef0a1e9b5be7"},{"problem":34,"code":"(fn range-to-list [start end]\n  (loop [result '()\n         s start]\n    (if (>= s end)\n      result\n      (recur (concat result (list s)) (inc s))\n      )\n    )\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":34,"code":"(fn [start end]\n  (loop [running-number start coll []]\n    (if (< running-number end)\n      (recur (inc running-number) (conj coll running-number))\n      (seq coll))))","user":"4fc77f5ae4b0ee37620e1821"},{"code":"(fn my-range [start end]\n   (if (< start end)\n     (lazy-seq \n         (cons start (my-range (inc start) end))\n      )\n      (list)\n   )\n )","problem":34,"user":"52763696e4b03e8d9a4a74d7"},{"problem":34,"code":"(fn [start end]\n    (->> (iterate inc start)\n         (take (- end start))))","user":"53613db8e4b0243289761e41"},{"problem":34,"code":"#(loop [x %1 y %2  res []] (if  (< x y)   (recur  (inc x) y (conj res x)  )  res ))","user":"594e3723e4b07ddc2dafaea8"},{"code":"(fn my-range [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"517a025ce4b01aacecbecbe6"},{"problem":34,"code":"(fn [s e]\n  (loop [coll []\n         n s]\n    (if (= n e)\n      coll\n      (recur (conj coll n)\n             (inc n)))))","user":"52506e4ce4b0541d1855b82d"},{"code":"(fn rng [a b]\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4ef57a7f535dced4c769f246"},{"problem":34,"code":"(fn [start, end]\n  (take (- end start)(iterate inc start)))","user":"57c7258ee4b05aa3c4741cfe"},{"code":"(fn [s e]\n  (loop [lst () start s end e]\n  (if (= start (dec end))\n    (reverse (cons start lst))\n    (recur (cons start lst) (inc start) end))\n  )\n)","problem":34,"user":"4ff743fde4b0678c553fc38d"},{"problem":34,"code":"(fn my-range\n   [start end]\n   (if (= start end)\n     ()\n     (cons start (my-range (inc start) end))))","user":"5dc9d4ede4b03836ba07d823"},{"code":"(fn r [a b]\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4ff3e771e4b0678c553fc356"},{"problem":34,"code":"(fn [l h]\n    (loop [coll [] lo l]\n      (if (< lo h)\n        (recur\n          (conj coll lo)\n          (inc lo))\n        coll)))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":34,"code":"(fn [min max] (take (- max min) (iterate #(+ % 1) min)))","user":"56e9555fe4b04a395b9a03f7"},{"code":"(fn [start end]\n  (loop [acc []\n         n start]\n    (if (= n end)\n      acc\n      (recur (conj acc n) (inc n)))))","problem":34,"user":"5374ad7de4b06d7f452d9e26"},{"problem":34,"code":"#(reduce\n    (fn [accum i] (seq (conj (vec accum) (if (nil? (last accum)) i (inc (last accum))))))\n    '()\n    (take (- %2 %1) (repeat %1)))","user":"5eedfc62e4b07c55ae4a050e"},{"code":"(partial (fn f [acc l r]\n  (if (>= l r) acc\n    (f (conj acc l) (inc l) r))) [])","problem":34,"user":"50c9ece0e4b0a409464667d8"},{"code":"(fn a [x lim] (if (= x lim) (list) (concat (list x) (a (inc x) lim))))","problem":34,"user":"50166470e4b052339a490e76"},{"problem":34,"code":"(fn rang [start end] (if (= start end)\n                          `()\n                          (cons start (rang (inc start) end))))","user":"5759cd46e4b02ea11479932e"},{"problem":34,"code":"#(loop [i %1 a []] (if (< i %2) (recur (+ i 1) (conj a i)) a))","user":"5547b72be4b0a04f79299550"},{"code":"(fn [x y] (take (- y x)(iterate inc x)))","problem":34,"user":"53350264e4b0656e627bfd73"},{"problem":34,"code":"(fn r [i l] (if (>= i l) '() (cons i (r (+ i 1) l))))","user":"54d95ce8e4b024c67c0cf74a"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         end end\n         results '()]\n    (if (= start end)\n      (reverse results)\n      (recur (inc start) end (cons start results)))))","user":"55f344afe4b06e875b46ce5a"},{"code":"(fn [a b]\n(take (- b a) (iterate inc a))\n  )","problem":34,"user":"50f4894be4b004d364930528"},{"problem":34,"code":"(fn [start end]\n  (loop [s start \n         e (dec end) \n         r '()]\n    (if (< e s)\n      r\n      (recur s (dec e) (cons e r)))))","user":"55da1ebce4b0e31453f64ad2"},{"problem":34,"code":"#(loop [a (list %) e %2] (if (< (first a) (dec e)) (recur (conj a (inc (first a))) e) (reverse a)))","user":"4e587e78535d8a8b8723a293"},{"problem":34,"code":"#(take (- %2 %1) (seque (iterate inc %1)))","user":"5bed84b1e4b0a6d31fed2120"},{"code":"(fn [a b]\n  (loop [x a result []]\n    (if (>= x b) result\n      (recur (inc x) (conj result x)))))","problem":34,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":34,"code":"(fn\n  [x y]\n  (loop [i x final '()]\n    (if (= i y)\n      (reverse final)\n      (recur (inc i)\n             (into final [i])))))","user":"58f7dfe6e4b0438e51c2cf1f"},{"code":"(fn [l u] \n  (loop [result [] i l]\n    (if (= i u ) result (recur (conj result i ) (inc i)))))","problem":34,"user":"4ebd4448535dfed6da9c6d8f"},{"code":"(fn __ [m n]\n (reverse (take (- n m) (iterate dec (dec n))))\n)","problem":34,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn [low high] \n  (loop [a (dec high) xs '()]\n    (if (< a low)\n      xs\n      (recur (dec a) (conj xs a)))))","problem":34,"user":"4e71920f535d5021c1a8964e"},{"code":"#(loop [start %1 end %2 at %1 output ()]\n    (if (= at end)\n      (reverse output)\n      (recur start end (+ at 1) (conj output at))))","problem":34,"user":"4e6a368e535d8ccf87e9feae"},{"problem":34,"code":"(fn [min max] \n   (take-while #(< % max) (iterate inc min))\n   )","user":"556f443be4b09a3098a5251e"},{"code":"(fn [l u] (loop [i l s []] (if (>= i u) s (recur (inc i) (conj s i)))))","problem":34,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn myrange [start0 end0]\n  (loop [res [] start start0 end end0]\n    (if (= start end) res\n      (recur (concat res [start]) (inc start) end))))","problem":34,"user":"531bad96e4b08068f379ed93"},{"problem":34,"code":"#(loop [ret [%1], n (- %2 %1)]\n   \t(if (> n 1)\n   \t  (recur (conj ret (+ 1 (last ret))) (- n 1))\n   \t  ret\n   \t ))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn rng [f t]\r\n  (if (= f t)\r\n    nil\r\n    (cons f (rng (inc f) t))))","problem":34,"user":"4dfd4ba8535d04ed9115e781"},{"problem":34,"code":"(fn kek [x y]\n  (if (= x y)\n    '()\n    (conj (kek (+ x 1) y) x)))","user":"5911aa1de4b0163c97b36ed8"},{"code":"(fn [a b] (take-while (partial > b ) (iterate inc a)) )","problem":34,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn a [lst from to](if (= from to) lst\n                     (a (conj lst from) (inc from) to))) []","problem":34,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn my-range [a b]\n  (lazy-seq\n    (when (< a b)\n          (cons a (my-range (inc a) b)))))","problem":34,"user":"53779a26e4b06839e8705e38"},{"problem":34,"code":"(fn [startn stopn]\n  (loop [n startn outlist '()]\n    (if (= n stopn)\n      (reverse outlist)\n      (recur (inc n) (conj outlist n)))))","user":"56197b47e4b053970a773af8"},{"code":"(fn foo[ x y](\n              when (< x y)\n              (conj (foo (inc x) y) x)\n             )\n)","problem":34,"user":"523ed743e4b057c4b7cd0a79"},{"problem":34,"code":"(fn [start end]\n  \t(loop [c start\n           acc '()]\n      (if (= c end)\n        (reverse acc)\n        (recur (inc c)\n               (cons c acc)))))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":34,"code":"(fn [start end]\n  (loop [x (- end 1)\n         result '[]]\n      (if (< x start)\n            (into '() result)\n            (recur (dec x) (conj result x)))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"code":"(fn [l h] (take (- h l) (iterate inc l)))","problem":34,"user":"4eb2e6ca535d7eef3080734f"},{"code":"#(for [s (iterate inc %1)\n          :while (< s %2)]\n      s)","problem":34,"user":"524d90c0e4b0a16e35cf6ded"},{"code":"(fn my-range [start end]\n  (reverse (loop [current start result ()]\n    (if (= current end)\n      result\n      (recur (inc current) (conj result current))))))","problem":34,"user":"4f0f40d3535d0136e6c2233b"},{"problem":34,"code":"(fn my-range [start end]\n  (letfn [(my-range-inner [result]\n                          (if (= (count result) (- end start))\n                            (reverse result)\n                            (my-range-inner (conj result (+ 1 (first result))))))]\n    (my-range-inner (list start))))","user":"576000fce4b08062f99a4e8b"},{"problem":34,"code":"(let [-create-range\n      (fn [xs n]\n        (if (= n 1) xs\n            (let [next (inc (first xs))]\n              (recur (conj xs next) (dec n)))))\n      create-range (fn [a b]\n                     (reverse (-create-range (list a) (- b a))))]\n  create-range)","user":"55158345e4b055c2f668d4e8"},{"problem":34,"code":"(fn [min max]\n  (loop [min min accum []]\n    (if (= min max) accum\n          (recur (+ min 1) (conj accum min)))))","user":"554dff83e4b00713264bd98d"},{"problem":34,"code":"(fn [a b] (\n           take \n           (- b a)\n           (iterate inc a)))","user":"58b1f51de4b0ebc645576d05"},{"code":"(fn myrange [x y]\n  (take (- y x) (iterate inc x))\n  )","problem":34,"user":"500a214de4b03d00572d2d74"},{"problem":34,"code":"(fn myrange [start end] (take-while #(not= end %) (iterate inc start)))","user":"562eeba2e4b0ab312c17ebc1"},{"problem":34,"code":"#(loop [n % s []] (if (= n %2) s (recur (inc n) (conj s n))))","user":"59c734e3e4b0a024fb6ae53f"},{"code":"#(loop [bgn %1 i (dec %2) ret '()]\n   (if (< i bgn)\n     ret\n     (recur bgn (dec i) (conj ret i))))","problem":34,"user":"51000111e4b00d7ad4cab15e"},{"problem":34,"code":"(fn [x limit]\n((fn [out x]\n  (if (>= x limit)\n    out\n    (recur (conj out x) (inc x)))\n  )\n[] x))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn [x y]\n  (loop [x x y (dec y) rng (list x)]\n    (if (== x y)\n      (sort rng)\n      (recur (inc x) y (conj rng (inc x))) )) )","problem":34,"user":"51071f2ee4b05b2b4eee748e"},{"problem":34,"code":"(fn bar [x y] (when (> y x) (conj (bar (inc x) y) x)))","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [start end]\n  (for [num (iterate inc start)\n        :while (< num end)]\n    num))","problem":34,"user":"536f871de4b0fc7073fd6e7f"},{"problem":34,"code":"#(loop [cnt %1 rng []]\n  (if (= cnt %2)\n    rng\n    (recur (inc cnt) (conj rng cnt))\n  )\n)","user":"5c0d0537e4b0bdcf453d173d"},{"problem":34,"code":"(fn my-range [arg1 arg2]\n  (let [x (atom 1)\n        y (atom (into [] (repeat (- arg2 arg1) arg1)))]\n    (while ((fn [r] (< r (count @y))) @x)\n      (swap! y update-in [@x] (fn [a] (+ a @x)))\n      (swap! x inc))\n    @y))","user":"5dab11cde4b000c986472c45"},{"code":"#(seq (loop [n (- %2 %1) a ()]\n        (if (= n 0)\n          a\n          (recur (dec n) (conj a (+ %1 (dec n)))))))","problem":34,"user":"5185e17ee4b0da5a5be3bac5"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [a] (+ 1 a)) %1))","user":"5ce44ee2e4b0a17bb84e2b57"},{"problem":34,"code":"(fn [n1 n2] \n    (loop [f n1 r []]\n        (if (= f n2)\n            (seq r)\n            (recur (inc f) (conj r f)))))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn ran [s e]\r\n  (if (= s e)\r\n    '()\r\n    (cons s (ran (+ s 1) e))\r\n  )\r\n)","problem":34,"user":"50013694e4b0678c553fc417"},{"code":"(fn [x y]\n  (loop [curr x acc []]\n    (if (= curr y)\n      acc\n      (recur (inc curr) (conj acc curr)))))","problem":34,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":34,"code":"(fn [l, r]\n  ((fn [l, xs] (if (= l r) xs (recur (inc l) (conj xs l)))) \n   l, []))","user":"57006957e4b08d47c97781c8"},{"problem":34,"code":"(fn [s e] (take (- e s) ((fn nums [n] (lazy-seq (cons n (nums (inc n))))) s)))","user":"5b329773e4b025bcb146f322"},{"problem":34,"code":"(fn my-range [start end]\n  (if (>= start end) '()\n    (cons start (lazy-seq (my-range (+ start 1) end)))))","user":"4fe98ddae4b0547ebccb2463"},{"problem":34,"code":"(fn my-range [a b]\n  (if (< a b)\n    (into [a] (my-range (inc a) b))\n    nil\n  )\n)","user":"567b9ff7e4b05957ce8c61a9"},{"problem":34,"code":"(fn [start end]\n  (loop [current start\n         the-list []]\n    (if (= current end)\n      (seq the-list)\n      (recur (inc current) (conj the-list current)))))","user":"557e2eafe4b05c286339e0d2"},{"problem":34,"code":"(fn test [low high]\n  (if (= low high)\n    '()\n    (cons low (test (+ low 1)\n                    high))))","user":"579332c2e4b0e215f87e8452"},{"problem":34,"code":"(fn [a b]\n\t(take (- b a)\n          (iterate inc a)))","user":"54be792ee4b0ed20f4ff6eeb"},{"code":"(fn [start end]\n  (#(loop [i %1 xs []]\n     (if (= i end)\n       xs\n       (recur (inc i) (conj xs i)))) start))","problem":34,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn rng [s e] \n  (take (- e s) \n        (cons s \n              (lazy-seq \n               (rng (inc s) e)))))","problem":34,"user":"5231d8fae4b0e2e8de81d1fb"},{"code":"(fn [x y] (let [i (min x y) m (max x y)] (loop [c x result '()] (if (>= c y) (reverse result) (recur (inc c) (conj result c))))))","problem":34,"user":"4e9ff8d0535d7eef3080729c"},{"problem":34,"code":"(fn [a b] \n  (loop [i (dec b)\n         res '()]\n    (if (< i a)\n      res\n      (recur (dec i) (cons i res)))))","user":"6074df6fe4b069485764de4b"},{"problem":34,"code":"(fn [von, bis] (take (- bis von) (iterate inc von)))","user":"5be182eae4b0ed4b8aab4c9d"},{"problem":34,"code":"( fn [ a1 a2 ] ( loop [x a1  r []] ( if ( < x a2 ) (recur (inc x) (conj r x)) r)))","user":"569637d8e4b0dcc4269f4130"},{"code":"(fn [a b] (take (- b a) (iterate inc a)))","problem":34,"user":"4de85c5d535d08e6dec9fdfc"},{"code":"#(loop [start %1 acc []]\n  (if (= start %2) acc\n      (recur (inc start) (conj acc start))))","problem":34,"user":"4fa6d532e4b081705acca1be"},{"problem":34,"code":"(fn [n m]\n  (loop [b n e m coll ()]\n    (if (> e b)\n      (recur b (dec e) (cons (dec e) coll))\n      coll)))","user":"55164856e4b06a49daca83b3"},{"problem":34,"code":"(fn [down up]\n  (loop [current down coll (list)]\n    (if (= current up)\n      (reverse coll)\n      (recur (inc current) (cons current coll)))))","user":"55842c7ee4b05c286339e11d"},{"problem":34,"code":"(fn rang[start end]\n  (loop [a [] s start]\n    (if (= s end)\n      a\n      (recur (conj a s) (inc s)))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":34,"code":"(fn [start end]\n  (loop [cur start l '()]\n    (if (= cur end)\n      (reverse l)\n      (recur (inc cur) (conj l cur)))))","user":"5f2c94b4e4b033932238a669"},{"problem":34,"code":"(fn my-range [begin end]\n  (if (= (- end begin) 0)\n    ()\n    (cons begin (my-range \n                  (+ begin 1) \n                  end))))","user":"5887518ae4b0f1effa3b76f5"},{"code":"(fn [x y] \n  (loop [a [x]]\n    (if (= (inc (last a)) y)\n      (seq a)\n      (recur (conj a (inc (last a)))))))","problem":34,"user":"4f040bbf535dcb61093f6b95"},{"code":"(fn [start end]\n  (loop [n start\n         coll []]\n    (if (= n end)\n      coll\n      (recur (inc n) (conj coll n)))))","problem":34,"user":"505bd09fe4b032b709c81373"},{"problem":34,"code":"(fn my-range [lower-bound-inclusive upper-bound-exclusive]\n  (take\n   (- upper-bound-exclusive lower-bound-inclusive)\n   (iterate inc lower-bound-inclusive)))","user":"60948c3ae4b00e9e6653c3e7"},{"problem":34,"code":"(fn rng[c a b](\n               if (= a b ) (reverse c)\n               \t  (rng (cons a c) (inc a ) b )))[]","user":"548f3ed8e4b0e286459a1236"},{"problem":34,"code":"(fn [n1 n2]\n    ((fn f [a c] (if (= a n2)\n                   c\n                  (recur (inc a) (concat c [a])) \n                  )) \n  n1 `()))","user":"53c0bc5fe4b00fb29b221257"},{"problem":34,"code":"(fn ranger\n  [start end]\n  (loop [min-val start\n         max-val  (- end 1)\n         my-range '()]\n    (if (>= max-val min-val)\n      (recur min-val (dec max-val) (conj my-range max-val) )\n      my-range)))","user":"5665ef78e4b0e91d5f5c5664"},{"code":"(fn my-range [x y]\n  (if (>= x y) nil (cons x (lazy-seq (my-range (inc x) y)))))","problem":34,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [a b] (reverse (loop [x a y b lst ()]\n\t\t\t(if (>= x  y) \n\t\t\t\tlst \n\t\t\t\t(recur (inc x) y (cons x lst))))))","problem":34,"user":"51558136e4b06c5f6a1490a8"},{"problem":34,"code":"(fn [i k] (loop [ii i ss []] \n            (if (= ii k) \n              (seq ss) \n              (recur (inc ii) (conj ss ii)))))","user":"56102f50e4b05f002753df6b"},{"code":"(fn [start end]\n  (loop [x start ret []]\n    (if (== x end)\n      ret\n      (recur (inc x) (conj ret x)))))","problem":34,"user":"4e9c3648535dbda64a6f6b7d"},{"code":"(fn [start stop] (take (- stop start) (iterate #(+ 1 %) start)))","problem":34,"user":"515e38ace4b049add99a0538"},{"problem":34,"code":"(fn [start stop]\n  (loop [s start\n       st stop\n       acc []]\n    (if (<= st s)\n      acc\n      (recur (inc s) st (conj acc s)))))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":34,"code":"(fn rango [m n] (if (= m (- n 1)) (list m)\n                        (concat (list m) (rango (+ m 1) n))))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":34,"code":"(fn [start-number exclusive-end-number] (take-while #(< % exclusive-end-number) (iterate inc start-number)))","user":"566639f4e4b0e91d5f5c566b"},{"problem":34,"code":"(fn my-range [from to]\n  (when (< from to)\n    (concat [from] (my-range (inc from) to))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":34,"code":"(fn [a b]\n  (loop [i a\n         c []]\n    (if (>= i b)\n        c\n        (recur (inc i) (conj c i)))))","user":"574c3a7ce4b02ea114799219"},{"problem":34,"code":"(fn [start n]\n   (loop [a   start\n          acc []]\n     (if (= a n)\n       acc\n       (recur (inc a)\n              (conj acc a)))))","user":"5b59c2bde4b02d533a91bd80"},{"problem":34,"code":"(fn [from to]\n  (loop [i from\n         acc []]\n    (if (== i to)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"56795625e4b05957ce8c6186"},{"code":"(fn [start finish]\n  (loop [i start, result nil]\n    (if (< i finish) (recur (inc i) (conj result i))\n        (reverse result))))","problem":34,"user":"4e4c1e8c535dc968683fc4db"},{"problem":34,"code":"(fn r [b e]\n  (if (= b e)\n    '()\n    (cons b (r (inc b) e))))","user":"5408ec4de4b0addc1aec66d0"},{"problem":34,"code":";#(loop [acc (conj '() %1)]\n;   (if (= %2 (inc (first acc)))\n;     (reverse acc)\n;     (recur (conj acc (inc (first acc))))))\n\n#(take (- %2 %) (iterate inc %))","user":"5f6a583ae4b02876ed9fd046"},{"code":"(fn [from to]\n  (take-while (partial > to) (iterate inc from)))","problem":34,"user":"4e720985535d5021c1a89655"},{"problem":34,"code":"(fn [start end]\n  (loop [s start e end acc []]\n    (if (<= e s)\n      acc\n      (recur (inc s) e (conj acc s)))))","user":"54a96a15e4b09f271ff37cad"},{"code":"(fn foo [start end] \n  (cond \n    (< start end) (cons start (lazy-cat (foo (inc start) end)))\n    :else ()))","problem":34,"user":"523a9fc9e4b081681ca7adca"},{"problem":34,"code":"(fn [x, y] (loop [new-list []\n                  start x] \n             (if (= start y)\n               new-list \n               (recur (conj new-list start) (inc start))\n               )))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn [m n] (take (- n m) (iterate #(+ 1 %) m)))","problem":34,"user":"5203bc27e4b0fb7e47ea5204"},{"problem":34,"code":"(fn [x y]\n  (map (partial reduce +) (map-indexed vector (take (- y x) (repeat x)))))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":34,"code":"(fn rn [beg end]\n  (when (< beg end)\n    (cons beg \n          (rn (inc beg) end))))","user":"57df2722e4b0bd073c20245e"},{"problem":34,"code":"(fn [start stop & tot]\n  (let [total (or tot '())]\n    (if (= (dec stop) (first total))\n      (reverse total)\n      (recur (inc start) stop (cons start total)))))","user":"55fc838be4b0f488688e0674"},{"problem":34,"code":"(fn [start end] (loop [i (dec end) result (list i)] (let [di (dec i)] (if (<= i start) result (recur di  (conj result di))))))","user":"5bb36a9ce4b0a20761a23523"},{"problem":34,"code":"(fn my-range\n  [from to]\n  (loop [bottom from acc []]\n    (if (>= bottom to)\n      (seq acc)\n      (recur (inc bottom) (conj acc bottom)))))","user":"5e3a8929e4b01d43a70e8de3"},{"code":"(fn [s f] (let [myrange (fn myrange [x s f] (if (>= s f)\n                                              x\n                                              (myrange (cons (- f 1) x) s (- f 1))\n                                              )\n                          )\n                ]\n            (myrange '() s f)\n            )\n  )","problem":34,"user":"537a620be4b06839e8705e5f"},{"code":"(fn [s e]\n  (loop [li '() st s et e]\n    (if (< st et)\n      (recur (cons st li) (inc st) et)\n    (reverse li))))","problem":34,"user":"4f62ef0ce4b0defedf855fdc"},{"code":"#(take (- %2 %1) ((fn xrange [x] (cons x (lazy-seq (xrange (inc x))))) %1))","problem":34,"user":"51c330a9e4b0851ac09658f2"},{"code":"#(loop [s %1 c (- %2 1) l '()]\n  (if (< c s)\n    l\n    (recur s (- c 1) (conj l c))))","problem":34,"user":"4f031639535dcb61093f6a59"},{"code":"(fn [range-min range-max]\n  (let [extent    (- range-max range-min)\n        range-min (dec range-min)]\n    (map #(+ % range-min) (take extent (iterate inc 1)))))","problem":34,"user":"51b965dde4b0e871ca495905"},{"problem":34,"code":"(fn [from to] \n  (loop [idx from result []] \n    (if (< idx to) (recur (inc idx) (conj result idx)) result)))","user":"59aeed59e4b0e1f4e384c8ab"},{"code":"(fn [a b] \n  (take \n    (- b a)\n    (iterate #(+ 1 %) a)))","problem":34,"user":"4f7d91e6e4b06e829148e1c3"},{"problem":34,"code":"#(loop [x (- %2 1)\n          result '( )]\n    (if (< x %1) \n      result\n      (recur (dec x) (conj result x))))","user":"5e790f6be4b085ba37836e01"},{"code":"(fn [x n] (take (- n x) (iterate inc x)))","problem":34,"user":"4e6a6b83535d8ccf87e9fee0"},{"code":"(fn [low upper] (loop [arr [] l low] (if (< l upper) (recur (conj arr l) (inc l)) arr)))","problem":34,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":34,"code":"#(loop [n (dec %2) acc '()] (if (< n %1) acc (recur (dec n) (conj acc n))))","user":"5531e445e4b09218d5f44f76"},{"code":"#(reverse\n  (loop [from %1\n         acc  ()]\n    (if (= from %2) acc\n        (recur (inc from) (conj acc from)))))","problem":34,"user":"52c25645e4b07a9af579237d"},{"problem":34,"code":"(fn f [min max]\n  (take (- max min) (iterate #(inc %) min) ))","user":"53d64811e4b0e771c3025456"},{"code":"(fn [ret x y]\n  (if (< x y)\n    (recur (conj ret x) (inc x) y)\n    ret)) []","problem":34,"user":"50bfe725e4b080409b860f26"},{"code":"(fn implement-range [s e] (take (- e s) (iterate inc s)))","problem":34,"user":"52c00e4fe4b07a9af5792342"},{"code":"(fn f [s e] (when (< s e) (cons s (f (inc s) e))))","problem":34,"user":"4e8516d0535db62dc21a62e8"},{"problem":34,"code":"(fn [start end]\n  (let [diff (- end start)]\n    (take diff (iterate inc start))))","user":"553b0d95e4b09218d5f44fff"},{"code":"(fn [s e] \n  (loop [r '(),i (- e 1)]\n    (if (>= i s)\n     (recur (conj r i) (- i 1))\n     r)))","problem":34,"user":"4fda016ae4b05e33b9224f42"},{"code":"(fn muh-r\n  [start end]\n  (if (>= start end)\n    '()\n    (cons start (muh-r (inc start) end))))","problem":34,"user":"51f2a491e4b0210f90e74553"},{"code":"(fn [a b]\n  (take (- b a) (iterate #(+ 1 %) a)))","problem":34,"user":"51e0198ee4b01188f0627539"},{"code":"( fn foo[x y] (if (= x y) nil (cons x (foo (+ x 1) y))))","problem":34,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn f [a b] (if (= a b) () (cons a (f (inc a) b))))","problem":34,"user":"52f882c4e4b047fd55836fd1"},{"problem":34,"code":"#(loop [start %1, end %2, irange []] (if (< start end) (recur (inc start) end (conj irange start)) irange))","user":"591326f2e4b0163c97b36efc"},{"code":"(fn [a b]\n  (reverse\n  (loop[s a result ()]\n    (if (= s b)\n      result\n    (recur (inc s)(conj result s))))))","problem":34,"user":"4f57a153e4b0a7574ea7183a"},{"problem":34,"code":"(fn [start stop]\n  (loop [x start acc []]\n    (if (= x stop)\n      acc\n      (recur (inc x) (conj acc x)))))","user":"53f77b6ae4b0de5c4184855f"},{"problem":34,"code":"(fn myrange [from to]\n  (if (>= from to)\n    nil\n    (cons from (myrange (inc from) to))))","user":"587fb546e4b0f1effa3b75f9"},{"problem":34,"code":"(fn[from to]\n   (seq (loop [result []\n         val from]\n    (if (= val to)\n      result\n      (recur (conj result val) (inc val))))))","user":"53d10553e4b00fb29b22130f"},{"problem":34,"code":"(fn [s e]\n(loop [first (dec e)\n      last s\n      acc []\n      ]\n(if (< first last) acc\n (recur (dec first) last (cons first acc))\n)\n))","user":"54227fc6e4b01498b1a71ac0"},{"problem":34,"code":"#(loop [temp %1, ret ()]\n    (if (= temp %2)\n      (reverse ret)\n      (recur (inc temp) (conj ret temp))\n      )\n    )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":34,"code":"(fn my-range [first last] (if (< first last) (cons first (lazy-seq (my-range (inc first) last))) '()))","user":"54f5fb57e4b0f2f3c5226e9f"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [n1 n1\n         acc '()]\n    (if (< n1 n2)\n      (recur (inc n1) (cons n1 acc))\n      (reverse acc))))","user":"5f755d0be4b02876ed9fd0a9"},{"problem":34,"code":"(fn [b e]\n  (loop [out [] i b]\n    (if (= i e)\n      out\n      (recur (conj out i) (inc i)))))","user":"583a360de4b089d5ab817d4f"},{"code":"(fn [lower upper]\n  (loop [u upper, r '()]\n    (if (= u lower)\n      r\n      (recur (dec u) (conj r (dec u))))))","problem":34,"user":"4f856adfe4b033992c121c44"},{"code":"(fn\n  [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":34,"code":"(fn [a b]\n  (loop [a a\n         b b\n         acc '()]\n    (if (>= a b)\n      (reverse acc)\n      (recur (inc a) b (conj acc a)))))","user":"571d063ee4b0145328a76272"},{"code":"(fn [b e]\n  (loop [b b\n         e e\n         acc []]\n    (if (= b e)\n      acc\n      (recur (inc b) e (conj acc b)))))","problem":34,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn [x y]\n    (loop [c []\n          i x]\n      (if (>= i y)\n          c\n          (recur (conj c i) (inc i)))))","problem":34,"user":"4dc1e1e4535d020aff1edf90"},{"code":"(fn [a e] (take (- e a) (iterate #(+ 1 %) a)))","problem":34,"user":"5035503de4b0ed9c821488f8"},{"code":"(fn [start end]\n  (loop [i start acc ()]\n    (if (= i end)\n        (reverse acc)\n        (recur (+ i 1) (cons i acc)))))","problem":34,"user":"4ee3b586535d10e5ff6f5371"},{"code":"#(loop [counter (- %2 %1) xs []]\n  (if (= counter 0)\n      xs\n      (recur (- counter 1) (conj xs (- %2 counter)))))","problem":34,"user":"5097ea89e4b087ccf61a7af4"},{"problem":34,"code":"(fn [m n]\n\t(loop [i m xs []]\n      (if (>= i n)\n        xs\n        (recur (inc i) (conj xs i))\n        )\n      )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"problem":34,"code":"(fn [begin end]\n  (take-while \n  #(< % end)\n  \n (iterate inc begin)\n   )\n  )","user":"52c911dde4b0c2d177d6213a"},{"code":"#(reverse (loop [s %1 e %2 xs ()] (if (not (< s e)) xs (recur (inc s) e (conj xs s)))))","problem":34,"user":"52f89125e4b047fd55836fd4"},{"problem":34,"code":"(fn [start finish]\n  (loop [s start\n         f finish\n         r '()]\n    (if (= s f)\n      (reverse r)\n      (recur (inc s)\n             f\n             (conj r s)))))","user":"5a29ee57e4b09cafd31c7f2b"},{"code":"(fn [start end]\n  (loop [current start last end seq ()]\n    (if (= current last) seq\n      (recur (+ 1 current) last (concat seq (list current))))))","problem":34,"user":"4f0f3830535d0136e6c22338"},{"problem":34,"code":"(fn [from to]\n  (loop [vals (vector from)]\n    (if (= (last vals) (dec to))\n      vals\n      (recur (conj vals (inc (last vals)))))))","user":"54b5ce67e4b05787c3b163ac"},{"code":"(fn [beg end] \n  (loop [i beg res '()] \n    (if (= i end)\n        (reverse res)\n        (recur (inc i) (cons i res)))))","problem":34,"user":"4ee528fb535d1385b2869d87"},{"problem":34,"code":"(fn [a b]\n  (loop [i (- b 1)\n         ls '()]\n    (if (< i a)\n      ls\n      (recur (- i 1) (conj ls i)))))","user":"606aafcfe4b069485764ddf6"},{"problem":34,"code":"(fn [start end]\n  (loop [coll [] insert start]\n    (if (< insert end)\n      (recur (conj coll insert) (inc insert))\n      coll)\n    )\n  )","user":"57a13745e4b0c3d858beb8e3"},{"problem":34,"code":"(fn [from to]\n  (loop [i (dec to)\n         res nil]\n    (if (>= i from)\n      (recur (dec i) (conj res i))\n      res)))","user":"56ba1406e4b0f2655033593c"},{"problem":34,"code":"#(loop [n %1, max %2, acc ()] (cond (= n max) (reverse acc) :else (recur (inc n) max (conj acc n))))","user":"554ba1d3e4b0a04f79299595"},{"problem":34,"code":"(fn range-impl [lower upper]\n  (take (- upper lower) (iterate inc lower)))","user":"5c196dc3e4b01240ff5671fa"},{"code":"(fn [a b]\n   (loop [x a acc []]\n     (if (< x b)\n       (recur (inc x) (conj acc x))\n       acc\n       )))","problem":34,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [b e] (take-while #(< % e) (iterate inc b)))","problem":34,"user":"4e599577535d8a8b8723a29f"},{"code":"#(loop [x %1 acc []]\n   (if (= x %2)\n     acc\n     (recur (inc x) (conj acc x))))","problem":34,"user":"533018b2e4b019098a6f8b56"},{"code":"(fn [start end] (reverse (loop [s start acc ()] (if (= s end) acc (recur (+ s 1) (cons s acc))))))","problem":34,"user":"51430fb2e4b0c172af7558ce"},{"code":"(fn [start end] (take-while #(> end %1) (iterate inc start)))","problem":34,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":34,"code":"(fn rng [x y & [z]]\n   (if z\n     (if (= x y)\n       z\n       (rng (inc x) y (conj z x))\n       )\n     (rng x y [])\n     )\n   )","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn ran [x y](when (< x y) (cons x (ran (inc x) y))))","problem":34,"user":"4eb2f89a535d7eef30807353"},{"problem":34,"code":"(fn [a b]\n  (loop [a a acc []]\n    (if (= a b)\n      acc\n      (recur (inc a) (conj acc a)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":34,"code":"#(loop [n (dec %2) res()] (if (< n %1) res (recur (dec n) (conj res n))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"code":"(fn [start end]\n      ((fn [rs start end]\n         (if (== start end) rs\n             (recur (conj rs start) (inc start) end)\n             )\n         )[] start end))","problem":34,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":34,"code":"(fn r [a b]\n  (if (>= a b)\n    []\n    (cons a (r (inc a) b))))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn [x y] \n  (loop [i x r []] \n    (if (= i y) \n      r \n      (recur (inc i) (conj r i)))))","problem":34,"user":"513e8141e4b02b2a3d8235c1"},{"problem":34,"code":"(fn [begin end]\n  (loop [counter begin\n         coll []]\n    (if (= counter end)\n      coll\n      (recur (inc counter) (conj coll counter)))))","user":"60a42199e4b00e9e6653c454"},{"code":"(fn [start end]\n  (loop [a start v (transient [])]\n    (if (< a end)\n      (recur (inc a) (conj! v a))\n      (persistent! v))))","problem":34,"user":"51181009e4b0e0897831a60f"},{"code":"(fn _\n  [a b]\n  (when (< a b)\n    (cons a (_ (inc a) b))))","problem":34,"user":"4dda44f2535d02782fcbe9f1"},{"problem":34,"code":"(fn [from to]\n           (let [aux\n                 (fn [from to acc]\n                   (cond \n                    (= from to)\n                    acc\n\n                    :else\n                    (recur (inc from) to (conj acc from))))]\n             (aux from to [])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":34,"code":"#(loop [agg '() num %1]     \n   (if (= num %2)\n    agg\n    (recur (concat agg [num]) (inc num))))","user":"51f38193e4b0fca5e8b48226"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         result []]\n    (if (< i end)\n      (recur (inc i) (conj result i))\n      result)))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":34,"code":"(fn [start end]\n  (loop [n start\n         end end\n         output (transient [])]\n    (if (= n end)\n      (persistent! output)\n      (recur (inc n) end (conj! output n)))))","user":"5b6002c2e4b0c6492753e6fb"},{"code":"#(take  (- %2 %) (iterate inc %))","problem":34,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [l r] (take-while #(> r %) (iterate inc l)))","problem":34,"user":"536b9d8ae4b0243289761ebe"},{"problem":34,"code":"(fn range-c [x y]\n  (if (= x y) \n    '()\n    (cons x (range-c (inc x) y))))","user":"5e18c885e4b0dc95940084fc"},{"problem":34,"code":"#(loop [iteration %1 result []]\n  (if (= iteration %2) result\n    (recur (inc iteration) \n           (conj result iteration))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":34,"code":"(fn [from to] ((fn iter [from to res] (if (= from to) res (iter from (dec to) (conj res (dec to))))) from to ()))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [min max] \n  (loop [x min result []]\n    (if (< x max)\n       (recur (inc x) (conj result x))\n        result)))","problem":34,"user":"4eaa66eb535d7eef3080730b"},{"code":"(fn my-range\n  [from to]\n  (take (- to from) (iterate inc from)))","problem":34,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [from to]\n  (loop [n (- to 1) acc nil]\n    (cond (< n from) acc\n          :else      (recur (- n 1) (cons n acc)))))","problem":34,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn [a b]\n  (loop [i a result []]\n    (if (< i b)\n      (recur (inc i) (conj result i))\n      result)))","problem":34,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":34,"code":"(fn range2 [start end]\n (if (= start (dec end))\n  (list start)\n  (conj (range2 (+ 1 start) end) start)))","user":"5cc7342be4b0ccb061962830"},{"code":"(fn [x n]\n  (loop [i x acc []] \n    (if (= i n) \n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"5042de0de4b034ff00315d1b"},{"code":"#(let [f (fn [from to self] \n  (if (>= from to) '() \n    (conj (self (inc from) to self) from)))]\n  (f % %2 f))","problem":34,"user":"4eaf08ce535d7eef3080732d"},{"code":"(fn [start end]\n  (loop [result []\n         n start]\n    (if (< n end)\n      (recur (conj result n) (inc n))\n      result)))","problem":34,"user":"50294c28e4b0b33e9bf6fdef"},{"problem":34,"code":"(fn myRange\n  [inicio\n   fin]\n  (loop [i   inicio\n         f   (inc i)\n         result  ()]\n    (if (> f fin)\n      (reverse result)\n      (recur f\n             (inc f)\n             (cons i result)))))","user":"5c74b043e4b0fca0c16227ce"},{"problem":34,"code":"(fn [start end] (loop [i start\n                       accu '() ]\n                  (if(< i end)\n                     (recur (inc i) (cons i accu))\n                     (reverse accu))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":34,"code":"(fn int-range [start end]\n  (loop [i start, acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc)))","user":"58800fd4e4b0f1effa3b7606"},{"problem":34,"code":"(fn myRange [x y]\n  ((fn [l x y]\n     (if\n       (= x y)\n       l\n       (recur (concat l (list x)) (+ x 1) y))) (list) x y))","user":"53daca15e4b0e771c30254a9"},{"code":"#(map-indexed (fn [i _] (+ %1 i)) (repeat (- %2 %1) 1))","problem":34,"user":"51307b84e4b08c712d3fae39"},{"problem":34,"code":"(fn rng [a b]\n  (cond (= a b) nil\n        :else (conj (rng (+ a 1) b)\n                    a)))","user":"57614a42e4b0994c1922fb85"},{"problem":34,"code":"(fn f [start end]\n    (if (< start end)\n      (cons start\n            (f (inc start)\n               end))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [x xn]\n  (loop [xs '() xn (dec xn)]\n    (if (= xn (dec x))\n      xs\n      (recur (list* xn xs) (dec xn)))))","problem":34,"user":"4dbe04b2535d020aff1edf56"},{"code":"(fn [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":34,"code":"(fn [from to]\n   (loop [n from xs []]\n     (if (>= n to)\n       xs \n       (recur (+ 1 n) (conj xs n)))))","user":"59279a89e4b072a2710fced3"},{"problem":34,"code":"(fn myrange [l u]\n  (if (= l u)\n    '()\n  \t(cons l (myrange (inc l) u))\n  )\n)","user":"54b050cee4b09f271ff37d13"},{"code":"(fn r [x y]\n  (if (= x y)\n    '()\n    (cons x (r (inc x) y))))","problem":34,"user":"4f0f174c535d0136e6c22330"},{"code":"(fn [start stop]\n  (#(if (= %1 stop) %2 (recur (inc %1) (conj %2 %1))) start []))","problem":34,"user":"52e4cc2ee4b09f7907dd1455"},{"problem":34,"code":"(fn my-range\n  [low-bound high-bound]\n  (take (- high-bound low-bound) (iterate inc low-bound)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn range' [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"51736d4de4b00f4b6b0490d7"},{"problem":34,"code":"#(take (- %2 %)\n           (iterate inc %))","user":"53940b5ee4b0b51d73faaec4"},{"code":"(fn [lower upper]\n  (loop [cnt lower acc []]\n    (if (= cnt upper)\n      acc\n      (recur (inc cnt) (conj acc cnt)))))","problem":34,"user":"509c2c55e4b085ae113522ab"},{"code":"#(loop [a %1, b %2, rng []]\n   (if (= a b)\n     rng\n     (recur (inc a) b (conj rng a))\n     )\n   )","problem":34,"user":"5136f659e4b04059df19f2fd"},{"code":"(fn r [r1 r2]\n  (if (< r1 r2) \n    (concat [r1] (r (inc r1) r2))\n    []\n  )\n)","problem":34,"user":"4e6ed7e4535d5021c1a89613"},{"problem":34,"code":"#(loop [a %1\n                x '()]\n           (if (< a %2)\n             (recur (inc a) (concat x [a]))\n             x)\n           )","user":"4f03e60d535dcb61093f6b7a"},{"code":"(fn [a b]\n  (take (- b a) (iterate (partial + 1) a)))","problem":34,"user":"4ec70f26535d6d7199dd36dd"},{"code":"(fn rng [start end]\n  (loop [i (inc start) \n         result [start]]\n    (if (= i end)\n      result\n      (recur (inc i) (conj result i)))))","problem":34,"user":"50e4f4e9e4b049a987753896"},{"problem":34,"code":"#(map-indexed (fn [i j] (+ i j)) (repeat (- %2 %1) %1))","user":"5bb23cf1e4b0a20761a2350a"},{"problem":34,"code":"(fn [x y]\n  (loop [out '()\n         x    x\n         y    y]\n    (if (< x y)\n        (recur (conj out (dec y)) x (dec y))\n        out)))","user":"60b66033e4b0e0fa5f1b4248"},{"problem":34,"code":"(fn rng [s, e]\n  (lazy-seq (when (< s e) (cons s (rng (inc s) e)))))","user":"54ba9ee8e4b0ed20f4ff6eb7"},{"problem":34,"code":"#(map-indexed (fn [idx x] (+ idx x)) (repeat (- %2 %1) %1))","user":"5ce78776e4b0a17bb84e2ba2"},{"problem":34,"code":"(fn [n1 n2] (take (- n2 n1) (iterate inc n1)))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":34,"code":"(fn [begin end]\n  (seq\n    (loop [index 0 coll [] value begin]\n      (if (>= index (- end begin)) coll (recur (inc index) (conj coll value) (inc value))))\n    ))","user":"5002c798e4b0678c553fc42d"},{"problem":34,"code":"(fn [low high]\n  (loop [a low\n        temp []]\n    (if (= a high)\n      (seq temp)\n      (recur (inc a) (conj temp a))\n      )\n    )\n  )","user":"5909b3f8e4b047aa04b199a4"},{"problem":34,"code":"(fn \n  [from to]\n  (loop\n    [f from\n     \n     a []]\n    \n    (if (>= f to)\n      a\n      (recur (inc f) (conj a f)))))","user":"54903056e4b0b312c081ff2e"},{"problem":34,"code":"(fn [x y]\n     (take \n      (- y x) \n      (iterate inc x)))","user":"5f737899e4b02876ed9fd099"},{"problem":34,"code":"(fn get-range [start end]\n  (concat [start] (if (not= start (- end 1))\n                  (get-range (+ start 1) end))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn rng [b e]\n  (if (< b e)\n    (cons b (rng (inc b) e))\n    nil))","problem":34,"user":"4f2b0951e4b0d6649770a045"},{"code":"(fn myfunc [x y] \n  (if \n    (= x y) \n    [] \n    (conj (myfunc x (- y 1) ) (- y 1))\n  )\n)","problem":34,"user":"506b437de4b0eda3100c0906"},{"problem":34,"code":"(fn [start end] \n  (loop [i start \n         result []]\n    (if (= i end)\n      result\n     (recur (inc i) (conj result i) ))))","user":"556358c6e4b0c656e3ff17ea"},{"code":"(fn my-range [x y] (if (= x y) '() (conj (my-range (inc x) y) x)))","problem":34,"user":"4fe2501ae4b0dd6cd5ce3644"},{"problem":34,"code":"(fn [x y]\n  (loop\n    [i (- y 1) ic ()]\n    (if (> x i)\n      ic\n      (recur (dec i)\n             (conj ic i)))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":34,"code":"(fn [s e]\n  (loop [start s\n         end e\n         numbers []]\n    (if (= start end)\n      numbers\n      (recur (inc start) end (conj numbers start)))))","user":"5c0eb93ce4b01240ff567146"},{"problem":34,"code":"(fn[inicio fin](\n                take (- fin inicio)(iterate inc inicio)\n                ))","user":"592b7269e4b072a2710fcf3f"},{"problem":34,"code":"(fn myrange [min max]\n\t(take\n\t\t(- max min)\n\t\t((fn myseq [n] (lazy-seq (cons n (myseq (inc n))))) min)))","user":"57ccedaae4b0c746388ab88e"},{"problem":34,"code":"(fn recursive-reverse [a b]\n  (if (>= a b)\n    []\n    (conj  (recursive-reverse a (dec b)) (dec b))))","user":"5f8d76c3e4b0715f5002d758"},{"problem":34,"code":"(fn my-range [init end]\n   (if (<= (inc init) end)\n     (lazy-seq (cons init (my-range (inc init) end)))))","user":"5db98f39e4b010eb3c36cd53"},{"problem":34,"code":"(fn [s e]\n  (reverse (loop [curlist '() curnum s]\n  \t(if (= curnum e) \n      curlist\n      (recur (cons curnum curlist) (+ curnum 1))\n    )  \n  )) \n)","user":"55b60518e4b01b9910ae298e"},{"code":"(fn my-range [x y]\n        (if (>= x y)\n            []\n          (vec (cons x (my-range (inc x) y)))))","problem":34,"user":"5145c116e4b099c3fbe2884a"},{"problem":34,"code":"(fn [lwr upr]\n  (let [item-cnt (- upr lwr)\n        iter (iterate inc lwr)]\n    (take item-cnt iter)))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (if (< start end) (cons start (lazy-seq (my-range (inc start) end)))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [x y](take (- y x)(iterate inc x)))","problem":34,"user":"4ff10e08e4b0678c553fc32b"},{"problem":34,"code":"(fn _range [a b]\n  (when (< a b)\n    (cons a (lazy-seq (_range (inc a) b)))))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [n n1 c []] (if (< n n2) (recur (inc n) (conj c n)) c)))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [a b] (take-while #(< % b) (iterate #(+ 1 %) a)))","problem":34,"user":"4ecab3b7535d6d7199dd3709"},{"problem":34,"code":"#(take\n  (- %2 %1)\n  (iterate\n   inc %1))","user":"56aed78fe4b03c432f187363"},{"problem":34,"code":"#(loop [itr %1 arr []]\n         (if (= itr %2)\n             (apply list arr)\n             (recur (inc itr) (conj arr itr))))","user":"58dadf46e4b0a4d5acaab66b"},{"code":"#(loop [from %1 to %2 c ()]\r\n    (if (= from to)\r\n      (reverse c)\r\n      (recur (inc from) to (conj c from))))","problem":34,"user":"4db6ce85535d1e037afb217f"},{"problem":34,"code":"(fn xxx [b e] (if (>= b e) [] (lazy-seq (cons b (xxx (+ b 1) e)))))","user":"54d104a5e4b0e8a36923e5d9"},{"code":"(fn [first end] (take (- end first) (iterate #(inc %) first)))","problem":34,"user":"50bc4e73e4b0594b91591c3d"},{"problem":34,"code":"(fn [a b]\n    (loop [a a\n           b b\n           aux ()]\n        (if (= a b)\n            (reverse  aux )\n            (recur (inc a) b (conj aux a )))))","user":"56e9a56ae4b04a395b9a03fc"},{"code":"(fn rng [s f]\n  (if (< s f) (concat (list s) (rng (+ s 1) f)) ())\n)","problem":34,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn [x y] \n  (let [r (atom (dec x))] \n    (repeatedly (- y x) #(swap! r inc))))","problem":34,"user":"4db016af838c48654951d9b9"},{"problem":34,"code":"(fn range1 [start end]\n  (if (>= start end)\n    '()\n    (conj (range1 (inc start) end) start)))","user":"54fd93bbe4b07d26eda61d36"},{"problem":34,"code":"(fn [start end]\n  (loop [start start acc []]\n    (if (= start end) \n      acc\n      (recur (inc start) (conj acc start)))))","user":"54dce62be4b024c67c0cf78b"},{"code":"(fn [low high]\n  (loop [curr low, result []]\n    (if (= curr high)\n      result\n      (recur (inc curr) (conj result curr)))))","problem":34,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn [start end]\n    (loop [ret [] start start end end]\n      (if (= start end)\n        (seq ret)\n        (recur (conj ret start) (inc start) end))))","problem":34,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn my-range [b e]\n  (if (= b e)\n    '()\n    (conj (my-range (inc b) e) b)))","problem":34,"user":"50aab057e4b056ee0193586b"},{"code":"(fn myrange [start stop] \n  (if (= start (- stop 1)) \n     (list (- stop 1)) \n     (conj (myrange (+ start 1) stop) start )\n   )\n )","problem":34,"user":"50d3317ee4b049d4ed5650da"},{"problem":34,"code":"(fn rg [a b]\n  (if (>= a b)\n    ()\n    (conj (rg (inc a) b) a))\n  )","user":"5cd4c3dae4b0ccb061962925"},{"problem":34,"code":"#(loop [a %1 s []] (if (< a %2) (recur (inc a) (conj s a)) s))","user":"4f1ef6a0535d64f60314649b"},{"problem":34,"code":"(fn f [start end]\n        (if (= start (dec end))\n          [start]\n          (lazy-cat [start] (f (inc start) end))))","user":"546c4377e4b00cfc9eacc177"},{"problem":34,"code":"(fn [l u] (reverse (loop [s '() i l] (if (>= i u) s (recur (conj s i) (inc i))))))","user":"5d6fae1ee4b04d129b00f2d4"},{"code":"(fn [from to] (loop [f from t to res []] (if (< f t) (recur (+ 1 f) t (conj res f)) res)))","problem":34,"user":"50e87252e4b0ebbe794eb7e7"},{"problem":34,"code":"(fn [begin end]\r\n  (map (fn [[a _]] (+ begin a))\r\n    (map-indexed list (repeat (- end begin) nil))))","user":"555bd27ae4b0b056612e2244"},{"problem":34,"code":"#(loop [a %1 c []]\n   (if (>= a %2)\n     c\n     (recur (+ a 1) (conj c a) )))","user":"54db8ddae4b024c67c0cf767"},{"problem":34,"code":"#(loop [ret (atom '())\n         ins %1]\n    (if (= ins %2)\n      (reverse @ret) \n      (do\n        (swap! ret conj ins)\n        (recur ret (inc ins)))))","user":"57af3bace4b0fbc9809a2730"},{"code":"(fn [begin end]\n  (loop [a begin lst []]\n    (if (not= a end)\n      (recur (inc a) (conj lst a)\n) (flatten lst))))","problem":34,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn range' [a b]\n  (if (= a (dec b))\n    (list a)\n    (cons a (range' (inc a) b))\n  )\n)","problem":34,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn [min max]\r\n   (letfn [(myrange [l min max]\r\n                    (if (= min max)\r\n                      l\r\n                      (cons min (myrange l (inc min) max))))]\r\n          (myrange '() min max)))","problem":34,"user":"4fc8b012e4b0ee37620e1838"},{"code":"(fn [a b](loop [v [] i a] (if (< i b) (recur (conj v i) (inc i)) (seq v))))","problem":34,"user":"50e008d1e4b061dbdced722a"},{"problem":34,"code":"( fn rge [s e] (if (= s e) () (cons s (rge (+ s 1) e))))","user":"56686edce4b04acd4f672dea"},{"problem":34,"code":"(fn [x y]\n  (loop [i x acc []]\n    (if (= i y) acc\n        (recur (inc i) (conj acc i)))))","user":"50a8bb65e4b0deba384a58bd"},{"problem":34,"code":"(fn [start end]\n  (loop [from start nums '()]\n    (if (zero? (- end from))\n      nums\n      (recur (inc from) (concat nums (list from))))))","user":"5de48f92e4b0948ae9d9ae07"},{"problem":34,"code":"(fn rng [low high]\n  (concat (if (> (dec high) low) (rng low (dec high)) []) [(dec high)]))","user":"587294f0e4b01531a375ea1e"},{"problem":34,"code":"(fn [s e]\n  (take (- e s)\n        (iterate inc s)))","user":"54497569e4b032a45b8693d2"},{"problem":34,"code":"(fn SeqFromTo [a b]\n   (loop [result [] i a]\n     (if (< i b)\n       (recur (conj result i) (inc i))\n       result\n       )\n     )\n   )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn myrange [start end]\n  (if (= start end)\n    ()\n    (lazy-seq (conj (myrange (+ start 1) end) start))))","problem":34,"user":"4f03396d535dcb61093f6a7b"},{"code":"(fn [f t]\n  (loop [from f, to t, result []]\n    (if (not= from to)\n      (recur\n        (+ from 1)\n        t\n        (conj result from))\n      result)))","problem":34,"user":"50b29029e4b03ea880433563"},{"code":"(fn [s e] (take-while (partial > e) (iterate inc s)))","problem":34,"user":"4f6f777de4b07046d9f4efe5"},{"problem":34,"code":"#(loop [start %1 end %2 result []]\n   (if (= start end)\n     result\n     (recur (inc start) end (conj result start))))","user":"569ef93de4b0542e1f8d148b"},{"code":";(fn [h t]\n;   (loop [res [], c h, lm t]\n;     (if (< c lm) \n;       (recur (conj res c) (inc c) lm)\n;       res\n;     )\n;   )\n; )\n\n(fn [f l] (reduce (fn[a b] (conj a (dec (first a)))) (list (dec l)) (repeat (- (dec l) f) 0)))","problem":34,"user":"533ea7e8e4b085b17e897d94"},{"problem":34,"code":"(fn [a b]\n  (loop [a a\n         acc nil]\n    (if (= a b)\n      (reverse acc)\n      (recur (inc a) (cons a acc)))))","user":"5b673832e4b0c6492753e760"},{"problem":34,"code":"(fn [x y] (map #(+ % x) (take (- y x) (iterate inc 0))))","user":"5680fff3e4b0966858e4d8f6"},{"code":"(fn [a b]\n  (reduce \n     (fn [u i]\n       (conj u (inc (last u)))\n       )\n    [a]\n    (repeat (- b a 1) 1)\n   )\n  )","problem":34,"user":"51980f7ce4b068aa333628f7"},{"code":"(fn [start limit]\n  (take (- limit start)\n    (iterate (fn [n] (inc n)) start)))\n\n;; Who has two thumbs and wrote that in one shot?\n;; This guy.","problem":34,"user":"4e42f930535dc968683fc49f"},{"code":"(fn [start end] (take (- end start ) (iterate #(inc %) start)))","problem":34,"user":"5183abf6e4b028ec5fd2f2a6"},{"code":"(fn [x y] (loop [n x num (- y x) result []] (if (= num 0) result (recur (+ n 1) (- num 1) (conj result n )))))","problem":34,"user":"4eb0afed535d7eef3080733e"},{"problem":34,"code":"(fn [coll lb ub]\n  (let [coll_ (concat coll (list lb))]\n    (if (= (inc lb) ub)\n      coll_\n      (recur coll_ (inc lb) ub)))) '()","user":"58b26da4e4b0ebc645576d0a"},{"problem":34,"code":"(fn ran[f l] ( if (< f l) ( conj (ran (inc f) l) f) '() ))","user":"5515b68de4b055c2f668d4ef"},{"code":"(fn r [low high]\n  (if (< low high)\n     (cons low (r (inc low) high))))","problem":34,"user":"505f55d3e4b08f2a82ad10b0"},{"problem":34,"code":"(fn range'\n  [a b]\n  (if (= a b)\n   '()\n    (cons a (range' (+ a 1) b))))","user":"56e8ef93e4b04a395b9a03f4"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [x] (+ x 1)) %1) )","user":"5de7e7cae4b0986d99407f7a"},{"code":"(fn range2 [i limit] (when (< i limit) (cons i (range2 (inc i) limit))))","problem":34,"user":"5250779ee4b0541d1855b82f"},{"problem":34,"code":"(fn [x y]\n  (take-while (fn [z](if(< z y)\n                       true\n                       false)) (iterate inc x)))","user":"59637028e4b066ee0a44b0ca"},{"code":"(fn [x y] \n  (take (- y x) (iterate inc x)))","problem":34,"user":"4ff78679e4b0678c553fc392"},{"code":"(fn range1 [a b]\n  (if (= a b)\n    []\n    (cons a (range1 (inc a) b))))","problem":34,"user":"536254a5e4b0243289761e50"},{"problem":34,"code":"(fn myrange [b e]\n\t(if (>= b e)\n\t\t'()\n\t\t(cons b (myrange (inc b) e))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [from to]\n  (take (- to from)\n  (iterate inc from)))","problem":34,"user":"4f8dc9dce4b02e764a0a51b6"},{"problem":34,"code":"(fn [min max]\n   (take (- max min) (iterate inc min)))","user":"5d0beecee4b0cc9c91588239"},{"problem":34,"code":"(fn range* [start end]\n  (take \n   (- end start) \n   (iterate (partial + 1) start)))","user":"5392500ae4b0b51d73faaeaf"},{"problem":34,"code":"(fn my-range [min max]\n  (if (= max min)\n       '()\n       (cons min (my-range (+ min 1) max))\n     ))","user":"551c6bcee4b07993ea3788df"},{"code":"(fn [b e] (loop [b b a []] (if (= b e) a (recur (inc b) (conj a b)))))","problem":34,"user":"4eb5750a535d7eef30807366"},{"problem":34,"code":"(fn [l r]\n  (let [x (fn [c m]\n           (if (> l c)\n             m\n             (recur (dec c) (conj m c))))]\n    (x (dec r) '())))","user":"5703cb87e4b08d47c97781f9"},{"code":"(fn asdf \n   ([x y] (asdf (inc x) y (conj '() x)))\n   ([x y z] (if (= x y) (reverse z) (asdf (inc x) y (cons x z))))\n   )","problem":34,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn [x y] (reverse (loop [a x b ()] (if (= a y) b (recur (inc a) (conj b a))))))","problem":34,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":34,"code":"#(loop [start %1\n        end (dec %2)\n        results []]\n   (if (< end start) results\n     (recur start (dec end) (cons end results))))","user":"560039cce4b04bb52996e162"},{"problem":34,"code":"(fn myrange [a b] (let [mgen (fn [ x y ] (if (< x y) x))] \n                         (let [c (mgen a b)] (if c (cons c ( myrange (+ a 1) b))))\n                               ))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":34,"code":"(fn [start end]\n  (loop [e end\n         r '()]\n    (if (= start e)\n      r\n      (recur (dec e) (conj r (dec e))))))","user":"56171eade4b06b1bb2182a0c"},{"problem":34,"code":"(fn generate-range [low, high] (if (not= low high) (concat [low] (generate-range (+ low 1) high)) '()))","user":"53e92821e4b036ad0777e499"},{"problem":34,"code":"(fn [low high]\n  (take-while #(< % high)\n              (iterate inc low)))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn [x y] (take (- y x) (iterate  inc x)))","problem":34,"user":"52f9ce6de4b047fd55836ff0"},{"problem":34,"code":"(fn [s e]\n  (loop [ss s\n         ee e\n         r []]\n    (if (not= ss ee)\n      (recur (inc ss) ee (conj r ss))\n      r))\n  )","user":"5ec21ef0e4b00a66d4a95299"},{"problem":34,"code":"(fn my-range [start end]\n      (if (= start end)\n        '()\n        (conj (my-range (inc start) end) start)))","user":"572af688e4b0f4d77e651249"},{"problem":34,"code":"(fn my-range [x y]\n    (if (>= x y)\n      ()\n      (cons x (my-range (inc x) y))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":34,"code":"#(loop [x %1 r []] (if-not (= x %2) (recur (+ x 1) (conj r x)) r))","user":"55ac16a0e4b03311e7b73291"},{"problem":34,"code":"(fn foo\n  [start end]\n  (when (not= start end)\n    (cons start (foo (inc start) end))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":34,"code":"(fn foo [from to]\n  (take-while #(< % to) (iterate inc from)))","user":"5461dc79e4b01be26fd746a8"},{"problem":34,"code":"(fn my-range\n [i j]\n (loop [res [] tmp i]\n   (if (< tmp j)\n     (recur (conj res tmp) (inc tmp))\n     res\n     )\n   )\n  )","user":"5959c72ae4b066ee0a44afac"},{"code":"#(loop [s %, acc '()]\n  (if (= s %2)\n     (reverse acc)\n     (recur (inc s) (cons s acc))))","problem":34,"user":"5089ebfee4b03217b26a539f"},{"problem":34,"code":"(fn [s e]\n      (loop [start s\n             end (- e 1)\n             res '()]\n        (if (<= start end)\n          (recur start (dec end) (conj res end))\n          res)))","user":"54b67463e4b05787c3b163bc"},{"code":"(fn [l u] (butlast (map (partial + l) (reductions + 0 (repeat (- u l) 1)))))","problem":34,"user":"51efd397e4b0249c592fbdeb"},{"problem":34,"code":"(fn [from to]\n                 (let [max (- to from)]\n                   (take max (iterate inc from))))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn myRange [from to]\n  (loop [i (- to 1) r '()]\n    (if (< i from)\n      r\n      (recur (dec i) (conj r i))\n    )\n  )\n)","problem":34,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":34,"code":"#(loop [s %1 \n        m %2\n        r []]\n   (if (< s m)\n     (recur (+ s 1) m (conj r s))\n     r))","user":"54213a8fe4b01498b1a71aaf"},{"code":"(fn [a b] (take (- b a) (iterate #(+ % 1) a) ))","problem":34,"user":"50868795e4b004985b776e5e"},{"problem":34,"code":"(fn r [from to]\n  (if (< from (- to 1))\n    (flatten [from (r (+ from 1) to)])\n    (- to 1))  \n)","user":"52824143e4b0757a1b171453"},{"problem":34,"code":"(fn my-range [start end] (if (= start end) () (conj (my-range (inc start) end) start)))","user":"5dc40814e4b02f9375f4e1ae"},{"problem":34,"code":"(fn [low high]\n  (loop [n low r []]\n    (if (< n high)\n      (recur (inc n) (conj r n))\n      r)))","user":"5b7ef8e6e4b047b03b203765"},{"code":"(fn rng [start end]\n  (if (= start end) \n      '()\n      (cons start (rng (+ start 1) end))))","problem":34,"user":"4f13047d535d64f60314642c"},{"problem":34,"code":"#(loop [acc [] x %1 y %2] \n  (if (= x y)\n    acc\n    (recur (conj acc x) (inc x) y)\n    ))","user":"5de65feee4b0986d99407f68"},{"code":"(fn my-range [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn [s n]\n  (take (- n s) (iterate (fn [x] (inc x)) s)))","problem":34,"user":"4f3ca5a6e4b0e243712b1f53"},{"problem":34,"code":"(fn my-range [a b] (loop [x a\n                           result []]\n                      (if (< x b)\n                        (recur\n                          (inc x)\n                          (conj result x)) result)) )","user":"5b69baf9e4b0c6492753e78f"},{"code":"(fn z [a b]\n  (if (= a b)\n        '()\n        (conj (z (inc a) b) a)))","problem":34,"user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [a b] (map #(+ % a) (take (- b a) (iterate inc 0))))","problem":34,"user":"51dd55dae4b0c33a4e1da404"},{"problem":34,"code":"(fn [min max] \n\n  ((fn [a b l]\n\n    (if ( < a b)\n\n      (recur a (dec b) (conj l (dec b)))\n\n      l )) min max '()))","user":"5794fd7be4b0e215f87e8476"},{"problem":34,"code":"(fn\n  [from to]\n  (take-while (partial > to) (iterate inc from)))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn[x, y] (take (- y x) (iterate inc x)))","problem":34,"user":"51b9dc12e4b0e871ca49590c"},{"problem":34,"code":"(fn [a0 b0] \n  (loop [a a0 s []]\n    (if (= a b0)\n      s\n      (recur (inc a) (conj s a))\n)))","user":"54524afbe4b0e397800069bc"},{"code":"(fn my-range [start end]                                                      \n  (if (< start end)                                                             \n    (lazy-seq (cons start (my-range (inc start) end)))))","problem":34,"user":"4ec75077535d6d7199dd36e0"},{"problem":34,"code":"(fn [start end]\n  (loop [li []\n         i start]\n    (if (= i end)\n      li\n      (recur (conj li i) (inc i)))))","user":"557a1e18e4b05c286339e09e"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (take (- end start) (iterate inc start)))","user":"56ebfb93e4b04a395b9a042e"},{"code":"(fn [s e]\n    (take  (Math/abs (- s e)) (iterate inc s))\n  )","problem":34,"user":"531843c1e4b08068f379ed6c"},{"problem":34,"code":"(fn f \n  ([start end] (f [] start end))\n  ([nums n end]\n    (if (>= n end)\n      nums\n      (f (conj nums n) (+ n 1) end))))","user":"5a9181c5e4b002d099cae6f6"},{"code":"(fn[a b]\n  (loop [res [] a a]\n    (if (= a b)\n      res\n      (recur (conj res a) (inc a)))))","problem":34,"user":"4ec64981535d6d7199dd36c7"},{"problem":34,"code":"(fn [from to]\n  (loop [n (dec to)\n         r '()]\n    (if (< n from)\n      r\n      (recur (dec n) (conj r n)))))","user":"50eb4c32e4b0346a3e988cbf"},{"problem":34,"code":"(fn [start end]\n\n  (loop [n start result []]\n\n    (if (= n end)\n\n      result\n\n      (recur (inc n) (conj result n)))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":34,"code":"(fn foo [x y] (if (= x y) [] (cons x (foo (inc x) y))))","user":"5520974be4b08d5046aa8a63"},{"problem":34,"code":"(fn [x y] (let [[min max] (sort-by > [x y])](loop [my-range '(), int min](if-not (>= int max)(recur (conj my-range int) (inc int)) (reverse my-range)))))","user":"59f26fb7e4b0966464fe6a7e"},{"problem":34,"code":"(fn [x y]\n\t((fn [current acc]\n      (if (= current y)\n        acc\n        (recur (inc current) (conj acc current))\n      )) x [])\n  )","user":"544a049de4b0e39780006953"},{"problem":34,"code":"#(reverse ((fn [start end] (loop [result () start start] (if (= start end) result (recur (conj result start) (inc start))) )) %1 %2))","user":"56747b46e4b05957ce8c613b"},{"problem":34,"code":"(fn [x y]\n  (loop [out [x] i (- y x 1)]\n    (if (= i 0)\n      out\n      (recur (conj out (inc (last out))) (dec i)))))","user":"560d4994e4b05f002753df3c"},{"problem":34,"code":"(fn [x0 x1] (map-indexed (fn [idx itm] \n                         (+ itm idx) )\n                         (repeat (- x1 x0) x0)\n                         ))","user":"59129074e4b0163c97b36ef1"},{"problem":34,"code":"(fn new-range [head tail]\n  (cond\n   \t(< head tail) (concat [head] (new-range (+ head 1) tail))\n    (= head tail) []))","user":"568f2059e4b0dcc4269f40df"},{"problem":34,"code":"(fn [b e]\n  (letfn [(infn [b e rv] \n                  (if (< b e)\n                    (cons b (infn (inc b) e rv))\n                    rv))]\n    (infn b e [])))","user":"52fa250ee4b047fd55836ff3"},{"problem":34,"code":"(fn my-range [min max]\n    (loop [iter min\n           acc  []]\n      (if (> max iter)\n        (recur (inc iter)\n               (conj acc iter))\n        acc)))","user":"5c6448d6e4b0fca0c1622674"},{"problem":34,"code":"(fn temp [s e] (reduce #(if (empty? %1) (conj %1 %2) (conj %1 (+ (last %1) 1))) [] (repeat (- e s) s)))","user":"5eac6a63e4b00a66d4a951e0"},{"code":"(fn [a b]\n  (loop [out '() a a b b]\n    (if (= a b)\n      (reverse out)\n      (recur (cons a out) (inc a) b))))","problem":34,"user":"51757af0e4b085adf681d873"},{"code":"(fn [x, y]\n  (loop [x x res []]\n    (if (< x y)\n      (recur (inc x) (conj res x))\n      (seq res)\n    )\n  )\n)","problem":34,"user":"4f031883535dcb61093f6a5e"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [start n1\n         end n2\n         ret []]\n    (if (= start end)\n      ret\n      (recur (inc start) end (conj ret start)))))","user":"5883584ae4b0f1effa3b7674"},{"code":"(fn [a b](take (- b a) (iterate inc a)))","problem":34,"user":"4eeccfc0535d93acb0a668b5"},{"problem":34,"code":"(fn range* [x y]\n  (if (>= x y)\n    ()\n    (cons x (range* (inc x) y))))","user":"5974b12be4b01722bebd4cb1"},{"code":"(fn [s e] (take-while #(< % e) (iterate inc s)))","problem":34,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn rang [a b] \n  (if\n    (= a b) nil\n    (conj (rang (inc a) b) a)))","problem":34,"user":"525aa499e4b0cb4875a45cf7"},{"problem":34,"code":"#(loop [l []\n         n %1]\n          (if (< n %2)\n            (recur (conj l n) (inc n))\n            l))","user":"591e0782e4b09b4ee5954c25"},{"code":"(fn rng [x n]\n    (\n      if(< x n)\n        (cons x (rng (inc x) n))\n    )\n)","problem":34,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn rng [a b]\n  (if (< a b)  (cons a (rng (+ a 1) b))))","problem":34,"user":"4ff4c9dae4b0678c553fc360"},{"problem":34,"code":"(fn [a b]\n  (loop [x a col []]\n    (if (< x b)\n      (recur (inc x) (conj col x))\n      col)))","user":"5da8e170e4b000c986472c29"},{"code":"(fn rrange [start end]\n  (if (= start end)\n    '()\n    (conj (rrange (inc start) end) start)))","problem":34,"user":"51684318e4b03f62cda68cd6"},{"problem":34,"code":"(fn [start end] \n  (loop [i start\n   end end \n   vec []]\n  (if (= i end)\n    vec\n    (recur (inc i) end (conj vec i))))\n)","user":"5c886a89e4b048ec896c592b"},{"problem":34,"code":"(fn [a b]\n  (loop [x a\n         r (list)]\n    (if (= x b)\n      (reverse r)\n      (recur (inc x) (conj r x)))))","user":"57dda21be4b0bd073c202445"},{"code":"(fn r [b e]\n  (if (= b e)\n    '()\n    (cons b\n          (lazy-seq (r (+ b 1) e)))))","problem":34,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(fn interval [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":34,"code":"(fn [a b] (reduce (fn [res x] (if (last res) (conj res (inc (last res))) (conj res x))) [] (repeat (- b a) a)))","user":"58c2df0ae4b021aa9917ed17"},{"problem":34,"code":"(fn [start end]\n  (loop [i start acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc\n      )\n    )\n  )","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn f [a b]\n  (if (< a b)\n    (lazy-seq \n      (cons a (f (inc a) b)))))","problem":34,"user":"5219e575e4b0c4ef0be82ffd"},{"code":"(fn [lower upper]\n   (loop [counter lower\n          acc []]\n     (if\n      (= counter upper) acc\n\t  (recur (inc counter) (conj acc counter)))\n    ))","problem":34,"user":"52d5bee0e4b09f7907dd1344"},{"code":"(fn tst\n  ([start end]\n   (tst start end '()))\n  ([start end accum]\n     (if (= start end) accum (tst start (dec end) (conj accum (dec end))))))","problem":34,"user":"52727d52e4b03e8d9a4a7439"},{"code":"(fn [left right] (loop [current left result (list)] (if (= current  right ) (reverse result) (recur (inc current) (conj result current)))))","problem":34,"user":"5314318ee4b08068f379ed13"},{"problem":34,"code":"#(loop [x %1\n        ls '()]\n    (if (>= x %2)\n      ls\n      (recur (+ x 1) (concat ls (list x)))))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":34,"code":"(fn [from to]\n\t(loop [curr from lst '()]\n  \t\t(if (< curr to)\n      \t\t(recur (inc curr)(conj lst curr))\n        \t(reverse lst)\n       \t)\n \t)\n )","user":"551d5cb9e4b07993ea3788e9"},{"problem":34,"code":"(fn [st en] \n   (let [num (- en st)]\n     (take num (iterate #(inc %) st))))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":34,"code":"(fn range'\n  [start end]\n  (loop [n start\n             acc []]\n    (if (< n end)\n      (recur (inc n) (conj acc n))\n      acc)))","user":"5bab49bbe4b0a20761a23474"},{"problem":34,"code":"(fn range2\n  [start end]\n  (loop [index start\n         result []]\n    (if (< index end)\n      (recur (inc index) (conj result index))\n      result)))","user":"5e47e1eee4b043cd24807a35"},{"problem":34,"code":"#(loop [i %1 out '()]\n    (if (= i %2)\n      (reverse out)\n      (recur (inc i) (cons i out))))","user":"5470cb10e4b094393f72dd65"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         current (- end 1)\n         acc (list)]\n    (if (< current start)\n      acc \n      (recur start (- current 1) (conj acc current)))))","user":"60704214e4b069485764de24"},{"problem":34,"code":"(fn [from until]\n  (loop [i (- until 1) ans nil]\n    (if (= i (- from 1))\n      ans\n      (recur (dec i) (conj ans i)))))","user":"52526161e4b0541d1855b8a6"},{"code":"(fn my-rng [a b] (if (< a b) (conj (my-rng (+ 1 a) b) a)))","problem":34,"user":"53388e2de4b0e30313ee6c9c"},{"problem":34,"code":"(fn [from to]\n  (loop [res []\n         ix from]\n    (if (< ix to)\n      (recur (conj res ix) (inc ix))\n      res)))","user":"560794bde4b08b23635d3182"},{"code":"(fn [st end] \n  (loop [coll '() curr end]\n    (if (<= curr st)\n      coll\n      (recur (cons (dec curr) coll) (dec curr)))))","problem":34,"user":"4fcba3f9e4b0ee37620e185b"},{"code":"(fn [start end]\n  (loop [res [] s start]\n    (if (>= s end)\n      res\n      (recur (conj res s) (inc s)))))","problem":34,"user":"5031eb3be4b000fc67a99a84"},{"problem":34,"code":"#(loop [ff %,ll %2,rr '()]\n   (if (= ff ll)\n     rr\n     (recur ff (dec ll) (conj rr (dec ll)))\n    ))","user":"56c50599e4b05cc29241ee9e"},{"problem":34,"code":"(fn ra [a b] (if (= a b) () (cons a (ra (+ a 1) b))))","user":"5776b47ce4b0979f8965163d"},{"code":"(fn [a b & rng]\n  (if (= a b) (reverse rng)\n    (recur (inc a) b (cons a rng))))","problem":34,"user":"5306e4b4e4b02e821686979d"},{"problem":34,"code":"(fn [a b] (reverse (loop [lst '() cnt a] (if (<= b cnt) lst (recur (conj lst cnt) (inc cnt))))))","user":"5f558a76e4b0a0bc16850a84"},{"problem":34,"code":"(fn [start, end]\n  (loop [cnt start\n         rge []]\n    (if (= cnt end)\n      rge\n      (recur (inc cnt), (conj rge cnt))\n      )\n    )\n  )","user":"5a9ac061e4b0d174b936c7c1"},{"problem":34,"code":"(fn f\n  [a b]\n  (if (= a b)\n    '()\n    (cons a (f (inc a) b))))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(\n fn my-range [min max] \n     (if (= max min) ()\n       (cons min (my-range (inc min) max))))","problem":34,"user":"514cc029e4b019235f6c057c"},{"problem":34,"code":"(fn rang [a b]\n  (if (= a b) '()\n    (conj (rang (+ a 1) b) a)))","user":"5d2ca236e4b01671435dbc94"},{"problem":34,"code":"(fn [x y] (loop [a x b y xs '[]]\n            (if (= a b) xs\n              (recur (inc a) b (conj xs a)))))","user":"551ad0c8e4b07993ea3788c6"},{"code":"(fn [x y]\n  (loop [start x finish y result []]\n    (if (= start finish) (seq result)\n      (recur (inc start) finish (conj result start)))))","problem":34,"user":"531541a0e4b08068f379ed25"},{"code":"(fn [a b] \n  ((fn [a b cur] \n    (if (= a b) cur \n      (recur (inc a) b (conj cur a)))) a b []))","problem":34,"user":"5093bc30e4b097f48cc38584"},{"problem":34,"code":"(fn [from to] \n  (letfn [(helper [acc n m] \n          (if (= n m) acc \n            (helper (conj acc n) (inc n) m)\n          ))] \n    (helper [] from to)\n  )\n)","user":"552a672de4b0ffed3738f954"},{"problem":34,"code":"#(loop [min %1\n        max %2\n        new []]\n   (if (= min max)\n     (seq new)\n     (recur (inc min) max (conj new min))))","user":"59061cc8e4b047aa04b1992b"},{"problem":34,"code":"(fn [i f] \n  (loop [re [] ini i]\n    (if (= ini (dec f))\n      (conj re ini)\n      (recur (conj re ini) (inc ini)))))","user":"54caaa48e4b057c6fda3a267"},{"problem":34,"code":"(fn [bottom top]\n  (loop [acc [bottom] last-added bottom]\n    (if (= last-added (- top 1))\n      acc\n      (recur (conj acc (+ 1 last-added)) (+ 1 last-added))\n      )\n    )\n  )","user":"52a803cee4b0c58976d9ac26"},{"problem":34,"code":"(fn [from to]\n  (loop [acc [] current from]\n    (if (= current to)\n      acc\n      (recur (conj acc current) (inc current)))))","user":"5adcc688e4b0837691e92c05"},{"code":"(fn [low high]\n  (loop [low low acc []]\n    (if (= low high)\n        acc\n        (recur (inc low) (conj acc low))\n)))","problem":34,"user":"4e51c67a535d302ef430da6a"},{"problem":34,"code":"(fn [start limit] (take (- limit start) (iterate inc start)))","user":"56481722e4b0284900eef628"},{"problem":34,"code":"(fn [x y] ( let [count (- y x)] ( take count (iterate inc x) )) )","user":"57016724e4b08d47c97781d6"},{"problem":34,"code":"#(loop [end %2\n        res [%1]]\n   (let [next (inc (last res))]\n     (if (= end next)\n       res\n       (recur end (conj res next)))))","user":"5fbb010ae4b03f550f448233"},{"code":"(fn this [w z]\n;(println \"(this\" w z \")\")\n;(let [ret\n;     (let [w 5 z 8]\n;       (println \"(take\" (- z w))\n       (take (- z w)\n         (for [x [0 1 2 3 4 5 6 7 8]]\n             (+ x w)\n         )\n       )\n;     )\n;       (fn clr [li x]\n;         (println \"li: \" li)\n;         (println \"    li: \" li \", x: \" x)\n;         (println \"li: \" li \", prev: \" prev)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n;       )\n;       w\n;       z\n;     )\n;] (println \"    ret: \" ret) ret)\n  )","problem":34,"user":"501819efe4b02f523d7cc5eb"},{"problem":34,"code":"(fn r [start end]\n  (loop [index start\n         times 0\n         acc []]\n    (if (= index end)\n      acc\n      (recur (inc index) (inc times) (conj acc index)))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":34,"code":"(fn my-range [start, stop]\n  (loop [rangee '()\n         x (dec stop)]\n    (if (= x start)\n      (cons x rangee)\n      (recur (cons x rangee)\n             (dec x)))))","user":"59971e2de4b07157cc8daacc"},{"problem":34,"code":"(fn [a b] (loop [i a o []] (if (< i b) (recur (inc i) (conj o i)) o)))","user":"55660248e4b0c656e3ff1824"},{"code":"(fn f [a b] (when (< a b) (cons a (f (inc a) b))))","problem":34,"user":"4e82f85d535db62dc21a62ce"},{"problem":34,"code":"(fn [min max] (take (java.lang.Math/abs (- max min)) (iterate inc min)))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":34,"code":"(fn ranz [s e]\n        (take-while #(> e %) (iterate inc s)))","user":"534b57bbe4b084c2834f4a78"},{"problem":34,"code":"(fn rng\n  [b e]\n  (if (= b e)\n    ()\n    (conj (rng (inc b) e) b)))","user":"5cf863c4e4b0b71b1d808a80"},{"code":"#( for [ x ( iterate inc %1 )  :while ( < x %2 ) ] x )","problem":34,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":34,"code":"(fn [inicio final]    \n(->>\n     (iterate #(+ % 1) inicio)\n     (take-while #(< % final))\n     (concat)))","user":"57210e8ee4b0c5bde472c0a8"},{"code":"(fn [a b]\r\n  (loop [a a ret []]\r\n    (if (< a b)\r\n    (recur (inc a) (conj ret a)) \r\n    ret\r\n    )\r\n  )\r\n)","problem":34,"user":"513caa36e4b0b86ece9f3229"},{"code":"(fn [start end] (loop [o [] i start] (if (< i end) (recur (conj o i) (inc i)) o)))","problem":34,"user":"50b24a2fe4b03ea88043355c"},{"problem":34,"code":"(fn my-range[x y] (if (>= x y) nil (cons x (my-range (inc x) y))))","user":"548485f5e4b0e286459a119f"},{"code":"(fn myRange \n  [x y] \n  (take (- y x) (iterate inc x)))","problem":34,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":34,"code":"(fn [begin end]\n  (loop [current begin result []]\n    (if (= current end)\n      result\n      (recur (inc current) (conj result current)))))","user":"5ee81beae4b029a2061bbeac"},{"code":"(fn [x y] (loop [x1 x, acc []] (if (= x1 y) acc (recur (inc x1) (conj acc x1)))))","problem":34,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn bob [from to]\n  (conj (if (= (dec to) from) '() (bob (inc from) to)) from))","problem":34,"user":"516f06dce4b06aac486e5b39"},{"problem":34,"code":"(fn [s e] (loop [s s r []]\n            (if (>= s e)\n              r\n              (recur (inc s) (conj r s)))))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [s e]\r\n   (take (- e s) (iterate inc s)))","problem":34,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn range- [start end]\n  (if (= start end)\n      '()\n      (cons start (range- (+ 1 start) end))))","problem":34,"user":"5027f37be4b01614d1633ff1"},{"problem":34,"code":"(fn myrange\n   [from to]\n   (if (= from to)\n     []\n     (conj (myrange from (- to 1)) (- to 1))\n     )\n   )","user":"53fe459ae4b0de5c418485f4"},{"code":"(fn [from to]\r\n  (loop [t to xs nil]\r\n    (if (= t from)\r\n      xs\r\n      (recur (dec t) (conj xs (dec t))))))","problem":34,"user":"50478418e4b0371827a27bc3"},{"code":";(fn myr [l u]\n;  (if (< l u)\n;    (cons l (myr (inc l) u))))\n(fn [l u]\n  (take (- u l) (iterate inc l)))","problem":34,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn rn [a b]\n  (if (= a b)\n    '()\n    (cons a (rn (inc a) b))))","problem":34,"user":"4fc50441e4b081705acca36f"},{"problem":34,"code":"(fn rpt2 [s e] (if (= s e) '() (conj (rpt2 (inc s) e) s)))","user":"55a02d8ae4b0acc240e314f2"},{"problem":34,"code":"(fn [start end] (loop [current start finalList []]\n\t\t\t\t(if(= current end)\n\t\t\t\t\t(reverse finalList)\n\t\t\t\t\t(recur (inc current) (cons current finalList))\n\t\t\t\t)\n\t\t\t\t)\n)","user":"51fea7d7e4b0f1313d468a74"},{"problem":34,"code":"(fn [start end]\n  (loop [i start , ret []]\n    (if (>= i end)\n      (if (seq ret) (seq ret) ())\n      (recur (inc i) (conj ret i)))))","user":"5fa2b45ce4b0f0ebd91b77f5"},{"problem":34,"code":"#(take-while (fn [x] (not= x %2)) (iterate inc %1))","user":"545c2d07e4b01be26fd7465c"},{"problem":34,"code":"(fn [s e]\n  (loop [cnt (- e s) acc []]\n    (if (> cnt 0)\n       (recur (dec cnt) (conj acc (- e cnt)))\n       acc)       \n  )\n)","user":"53765e1ae4b06839e8705e23"},{"problem":34,"code":"(fn [n1 n2] (\n             loop [n1 n1\n                   n2 n2\n                   result ()]\n             (if (= n1 n2)\n               (reverse result)\n               (recur (inc n1)\n                      n2\n                      (conj result n1)))))","user":"5c75a830e4b0fca0c16227e0"},{"problem":34,"code":"(fn my-range\n   [from to]\n   (if (< from to)\n     (cons from (my-range (inc from) to))))","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn [a b] (loop [x a A '()] \n            (if (< x b) \n              (recur (inc x) (conj A x)) \n              (reverse A))))","problem":34,"user":"4f8b27b3e4b02e764a0a5179"},{"code":"(fn [x y]\n  (loop [i x j y xs ()]\n    (if (= i j)\n      xs\n      (recur i (dec j) (conj xs (dec j))))))","problem":34,"user":"51897709e4b0288ada3dbdaa"},{"problem":34,"code":"(fn [x y]\n  (let [fx (fn fx [l x' y']\n             (if (<= (inc x') y')\n               (fx (conj l x') (inc x') y')\n               l))]\n    (reverse (fx '() x y))))","user":"5afc34b4e4b0cc2b61a3bd07"},{"problem":34,"code":"(fn r [s e]\n  (lazy-seq\n   (when (< s e)\n     (cons s\n          (r (inc s) e)))))","user":"5aea2d21e4b0cc2b61a3bbe2"},{"problem":34,"code":"#(->> (iterate inc %1)\n      (take (- %2 %1)))","user":"5bc8e91ee4b07a9b28b100ce"},{"problem":34,"code":"(fn implement-range-solution\n  [start stop]\n  (if (< start stop)\n  (cons start (implement-range-solution (inc start) stop))))","user":"54534c83e4b0e397800069cd"},{"problem":34,"code":"(fn[low hi]\n  (loop [cur low out []]\n    (cond (= cur hi) out\n          :else (recur (inc cur) (conj out cur)))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn [start end]\n  (take-while (partial > end) \n(iterate inc start)))","problem":34,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":34,"code":"(fn [start end]\n  (loop [result (list start)]\n    (if (= (first result) (- end 1))\n      (reverse (flatten result))\n      (recur (concat [(inc (first result))] [result])))))","user":"5dcd182ae4b0b296f82db5a9"},{"problem":34,"code":"#(seq (loop [start %1, result []] (if (>= start %2) result (recur (inc start) (conj result start)))))","user":"55fc07d3e4b0f488688e066e"},{"problem":34,"code":"(fn rng [bottom top] (if (= top (+ bottom 1)) [bottom] (cons bottom (rng (+ bottom 1) top))))","user":"5520af03e4b08d5046aa8a64"},{"problem":34,"code":"(fn pilrange [i f & [{acc :acc, :or {acc []}}]]\n  (if (>= i f) acc\n    (lazy-seq (pilrange (inc i) f {:acc (conj acc i)}))))","user":"5605b5e9e4b08b23635d316e"},{"problem":34,"code":"(fn findElements [start end] (take (- end start) (iterate inc start)))","user":"592518e8e4b072a2710fce67"},{"problem":34,"code":"(fn\n   [s e]\n   (loop [s s acc '()]\n     (if (= s e)\n       (reverse acc)\n       (recur (inc s) (conj acc s)))))","user":"551a21ece4b091ff45eda993"},{"problem":34,"code":"#(loop [i %\n       e %2\n       result []]\n  (if (= i e)\n    result\n    (recur (inc i) e (conj result i))\n    )\n  )","user":"5e0e836fe4b099d064962fa8"},{"code":"; (fn f [m n] (if (< m n) (cons m (f (inc m) n)) ()))\n#(take (- %2 %) (iterate inc %))","problem":34,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":34,"code":"(fn my-range\n  [L U]\n  (loop\n    [acc []\n     i L]\n    (if (>= i U)\n      acc\n      (recur (conj acc i) (inc i)))))","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn [start end]\n     (take (- end start) (iterate #(inc %) start)))","problem":34,"user":"4e8dc25f535d65386fec213a"},{"problem":34,"code":"(fn r [s e]\n      (if (= s e)\n        '()\n        (conj (r (inc s) e) s)))","user":"542a7c9be4b01498b1a71b41"},{"problem":34,"code":"(fn [x y]\n    (apply list (loop [i x v []]\n      (if (< i y)\n        (recur (inc i) (conj v i))\n        v)))\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn myrange [start stop]\n  (loop [from start to stop acc []]\n    (if (>= from to)\n      acc\n      (recur (inc from) to (conj acc from)))))","problem":34,"user":"509e8da7e4b08df8156e9e2f"},{"problem":34,"code":"#(loop [x %1 coll '()]\n      (if (= x %2)\n          (reverse coll)\n          (recur (inc x) (cons x coll))))","user":"56163cc1e4b06b1bb21829ff"},{"code":"(fn [m x]\n  (loop [i m res []]\n    (if (< i x)\n      (recur (inc i) (concat [i] res)) \n      (reverse res)\n      )\n    )\n  )","problem":34,"user":"524fafb3e4b0541d1855b817"},{"problem":34,"code":"(fn rng [start end]\n  (if (>= start end)\n    nil\n    (lazy-seq (cons start (rng (inc start) end)))\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"code":"(fn myrange [low high]\n    (take (- high low) (iterate  inc low)))","problem":34,"user":"50057f23e4b0678c553fc466"},{"problem":34,"code":"(fn [beg end]\n  (loop [beg beg end end s '()]\n    (if (= end beg) s\n      (recur beg (dec end) (cons (dec end) s)))))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":34,"code":"(fn [lo hi]\n  (reverse (loop [i lo x '()]\n    (if (= i hi)\n      x\n      (recur (inc i) (conj x i))))))","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn [s e] (list* (reduce #(if (= %2 (last %1))\n                     \t%1\n                     \t(conj %1 (+ (last %1) 1)))\n                     [s] (repeat (- (- e 1) s) [(- e 1)])\n                     \n            \t))\n  )","problem":34,"user":"5340ee60e4b00652c8746ec9"},{"problem":34,"code":"(fn r [l u]\n\t(when (< l u)\n\t  (cons l (r (inc l) u))))","user":"530bae80e4b02e82168697d0"},{"code":"(fn my-range [lower, upper]\n  (if (>= lower upper)\n    '()\n    (conj (my-range (+ lower 1) upper) lower)))","problem":34,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":34,"code":"#(loop [from %1\n        to %2\n        acc []]\n   (if (= from to)\n     acc\n     (recur (inc from) to (conj acc from))\n   )\n )","user":"53f7820be4b0de5c41848560"},{"problem":34,"code":"(fn [start end]\n  (take-while #(not= % end)\n    (iterate inc start))\n)","user":"5fe876ade4b05ac5b16ea195"},{"code":"(fn [start end]\n  (loop [i start coll []]\n    (if (< i end)\n      (recur (inc i) (conj coll i))\n      coll)))","problem":34,"user":"53806e5be4b06839e8705ec1"},{"problem":34,"code":"(fn ok [s f]\n  (if (= s f)\n    nil\n    (conj (ok (inc s) f) s)))","user":"5cc092d1e4b0ccb061962790"},{"code":"(fn [x y] \n  (loop [i x rng '()]\n    (if (= i y)\n      (reverse rng)\n      (recur (inc i) (cons i rng)))))","problem":34,"user":"51a2569ee4b00957e520db7d"},{"code":"(fn [b e] (loop [l b o nil](if (= l e) (reverse o) (recur (inc l) (cons l o)))))","problem":34,"user":"4dbf0cd2535d020aff1edf72"},{"problem":34,"code":";#(loop [from (dec %2) to %1 r '()]\n;   (if (< from to)\n;     r\n;     (recur (dec from) to (cons from r))))\n\n\n#(take (- %2 %1) (iterate inc %1))","user":"588e6a17e4b00487982d518c"},{"problem":34,"code":"(fn [low high]\n  (loop [cur low\n         high high\n         col []]\n    (if-not (= cur high)\n      (recur (inc cur) high (conj col cur))\n      col)))\n; much nicer:\n;#(take (- %2 %1) (iterate inc %1))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn rng [l h]\n  (if (= l h)\n    '()\n    (cons l (rng (inc l) h))))","problem":34,"user":"4eac5bc1535d7eef3080731b"},{"problem":34,"code":"(fn my-range [start stop]\n  (if (= start stop) nil\n      (lazy-seq\n       (cons start (my-range (inc start) stop)))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":34,"code":"(fn [x y] (for [k (iterate inc x) :while (< k y)] k))","user":"563ddefee4b0bfe05bf11857"},{"code":"(fn r\n  [n1 n2]\n  (cond\n   (= n1 n2) '()\n   :else (cons n1 (r (+ n1 1) n2))))","problem":34,"user":"518c0f4ee4b0f028e99addf7"},{"code":"(fn main ([from to] (main from to nil)) ([from to result] (if (= from to) result (recur from (- to 1) (cons (- to 1) result)))))","problem":34,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn rng [a b] (if (>= a b) () (conj (rng (inc a) b) a)))","problem":34,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"problem":34,"code":"(fn [a, b] (loop [x a y b r []] (if(= x y) r (recur (+ x 1) y (conj r x)))))","user":"560d2b53e4b05f002753df37"},{"problem":34,"code":"#(loop [n %1 acc nil]\n   (if (= n %2)\n     (reverse acc)\n     (recur (inc n) (cons n acc))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn r [l u] \n  (if (= l (- u 1))\n    [l]\n    (cons l (r (+ l 1) u))))","problem":34,"user":"52318843e4b0e2e8de81d1e8"},{"problem":34,"code":"(fn [start end] \n  (take (- end start) \n        (iterate inc start)))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [start end] \n  (loop [s start all '()]\n   (if (= s end) \n       (reverse all)\n       (recur (+ 1 s) (conj all s)))))","problem":34,"user":"4e7dbe0c535db169f9c796e3"},{"code":"(fn[cnt end]\n  (loop [result '() cnt cnt end end]\n    (if(= cnt end)\n      (reverse result)\n    (recur (conj result cnt)(inc cnt) end)\n    )))","problem":34,"user":"4ef87ea7535dced4c769f25f"},{"problem":34,"code":"(fn [minny maxxy ]((fn [current the-max the-list]\n  (if (< current the-max)\n    (recur (inc current) the-max (conj the-list current))\n    (reverse the-list))\n  ) minny maxxy '()))","user":"5312807fe4b08068f379ecfc"},{"problem":34,"code":"(fn MyRange [first last] \n  (loop [i first\n         result nil]\n    (if (= i last)\n      result\n      (recur (+ i 1)\n             (concat result (list i))))))","user":"53b88e6ee4b047364c0444de"},{"code":"(fn [x1 x2] (take (- x2 x1) (iterate inc x1)))","problem":34,"user":"4e86d3cf535dceadca46984c"},{"problem":34,"code":"#(loop [x %1\n       coll []]\n  (if (< x %2)\n    (recur (inc x) (conj coll x)) coll))","user":"5687fe58e4b0dcc4269f4065"},{"problem":34,"code":"(fn [a b]\n    (take (- b a)\n          (iterate inc a))  \n    \n)","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         y end\n         lst '()]\n    (if (= x y)\n      (reverse lst)\n      (recur (inc x) y (cons x lst)))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":34,"code":"(fn [min max]\n  (take (- max min) \n        ((fn numbers [n] (lazy-seq (cons n (numbers (inc n))))) min)))","user":"5e805895e4b085ba37836e44"},{"code":"(fn [start stop]\n  (loop [coll []\n         start start]\n    (if (< start stop)\n      (recur (conj coll start) (+ start 1))\n      coll)))","problem":34,"user":"52a55adee4b0c58976d9abe7"},{"problem":34,"code":"(fn r [a b]\n    (when (< a b)\n      (lazy-seq (cons a (r (inc a) b)))))","user":"581a703de4b0e114eb51a005"},{"code":"(fn [start end] \n  (take \n    (- end start) \n    (iterate #(inc %1) start)))","problem":34,"user":"4ec5569f535d6d7199dd3695"},{"problem":34,"code":"(fn\n  [a b]\n  (let [i (iterate inc a)]\n    (take-while #(< % b) i)\n  )\n)","user":"5e9b6471e4b0157ca96647f0"},{"problem":34,"code":"#( take (- %2 %1 ) (iterate inc %))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn  [start end]\n  (loop [i start, acc (vector)]\n    (cond (= i end) (seq acc)\n          :else (recur (inc i) (conj acc i)))))","problem":34,"user":"538e36c7e4b0b51d73faae81"},{"problem":34,"code":"(fn [x y] (loop [res [] n x] (if (< n y) (recur (conj res n) (inc n)) res)))","user":"56887bcbe4b0dcc4269f406a"},{"code":"(fn r [start end] (if (< start end) (concat [start] (r (inc start) end))))","problem":34,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"#(loop [a % b %2 r '()]\n  (if (= a b)\n    r\n    (recur a (dec b) (conj r (- b 1)))))","problem":34,"user":"50afc0f9e4b0c3f5ed5c29a3"},{"code":"#( take (- %2 %1 ) (iterate inc %1))","problem":34,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":34,"code":"(fn my-range [a b] (if (= a b) '() (concat [a] (my-range (inc a) b) )))","user":"5d4c83b7e4b0776584bd6f34"},{"problem":34,"code":"(fn [ini fin] \n  (loop [lst ()\n         numb ini]\n    (if (= (first lst) fin)\n      (reverse (rest lst))\n      (if (empty? lst)\n        (recur (cons ini lst) (inc numb))\n        (recur (cons numb lst) (inc numb))))))","user":"57f8104ce4b0d3187e900910"},{"problem":34,"code":"(fn [from to] (take-while (partial > to) (iterate inc from)))","user":"55996253e4b031d6649c9baa"},{"code":"(fn myrange [start end]\n\t(seq\n\t (loop [start start\n\t\tend end\n\t\tret []]\n\t   (if (< start end)\n\t     (recur (inc start) end (conj ret start))\n\t     ret))))","problem":34,"user":"4f05872b535dcb61093f6bf8"},{"problem":34,"code":"(fn [a b]\n (loop [result []\n        s a]\n   (if (< s b)\n   (recur (conj result s) (inc s))\n     result\n          )\n   ))","user":"5d917ef0e4b0915913b1d402"},{"code":"(fn foo [x y]\n  (when (< x y)\n    (cons x (foo (inc x) y))))","problem":34,"user":"5009fd0ae4b03d00572d2d70"},{"problem":34,"code":"(fn my-range [lower upper]\n  (if (= lower upper)\n    ()\n    (cons lower (lazy-seq (my-range (inc lower) upper)))))","user":"5641296de4b08d4f616f5ef4"},{"code":"(fn rng [start end]\n  (cond (= start end) []\n        (< start end) (cons start (rng (inc start) end))))","problem":34,"user":"5013141de4b0f26a0e3320a9"},{"code":"(fn [lower upper]\n  (take-while #(< % upper)\n    (iterate inc lower)))","problem":34,"user":"4e5411e8535d8a8b8723a279"},{"problem":34,"code":"(fn [lower upper]\n  (loop [p (- upper 1), result '()]\n    (if (< p lower)\n      result\n      (recur (- p 1) (cons p result)))))","user":"59225498e4b09b4ee5954c8c"},{"problem":34,"code":"#(loop [s %1\n        e %2\n        c ()]\n   (if (= s e)\n     (reverse c)\n     (recur (inc s) e (conj c s))))","user":"57291a39e4b0c6e51e0d2b14"},{"code":"(fn my-range [start end]\n  (cond\n   (< start end) (conj (my-range (+ start 1) end) start)\n   :else '()\n  )\n)","problem":34,"user":"51365524e4b04ac1f358dd52"},{"problem":34,"code":"(fn newRange [a b]\n  (loop [result '()\n            toAdd a]\n    (if (= b toAdd)\n      (reverse result)\n      (recur (conj result toAdd)\n             (inc toAdd)))))","user":"54eea988e4b024c67c0cf875"},{"problem":34,"code":"(fn my-range [gte lt]\n  (loop [acc [gte]]\n    (if (= (dec lt) (last acc))\n      acc\n      (recur (conj acc (inc (last acc)))))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":34,"code":"(fn [start n]\n  (take-while #(< % n) \n    (iterate inc start) ))","user":"58acce0ae4b0005cfeb1a754"},{"code":"(let [make-range (fn [item limit r]\n                    (if (>= item limit)\n                      r\n                      (recur (+ 1 item) limit (conj r item))))]\n  (fn [from to] (make-range from to [])))","problem":34,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":34,"code":"#(last (take (- %2 %1) \n      (iterate   (fn [x] (conj  x  (dec (first x) ) )  ) (list (- %2 1))  )    \n)\n       ;(fn [s e] (take-while #(< % e) (iterate inc s)))\n      )","user":"5ed30cb6e4b016b56eae05c2"},{"code":"#(take (- %2 %1) ((fn ints [s] (lazy-cat (list s) (ints (inc s)))) %1))\n;(fn [s e] (reduce #(conj %1 (+ s (count %1) %2)) [] (replicate (- e s) 0)))","problem":34,"user":"533b9cace4b0e30313ee6cd1"},{"problem":34,"code":"(fn [start stop]\n  (loop [b start e stop l []]\n    (if (= b e)\n      l\n      (recur (inc b) e (conj l b))\n    )\n  )\n)","user":"5d5e2efee4b0c9e5857d4ff0"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         result []]\n    (if (>= x end)\n      result\n      (recur (inc x) (conj result x)))))","user":"51d46747e4b013d740b70de3"},{"problem":34,"code":"(fn my-range [low high] (loop [acc [] curr low] (if (= curr high) acc (recur (conj acc curr) (inc curr)))))","user":"5700f1f0e4b08d47c97781ce"},{"code":"(fn my-range [from to] (if (>= from to) [] (conj (my-range from (dec to)) (dec to))))","problem":34,"user":"5002b6e5e4b0678c553fc42c"},{"problem":34,"code":"(fn my-range \n  [start end]\n  (loop [s start e end result []]\n    (if (= s e) \n      result\n      (recur (inc s) end (conj result s)))))","user":"5f003099e4b0cf489e8d7f17"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         acc []]\n    (if (= i end)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"556a6137e4b09a3098a524e0"},{"problem":34,"code":"(fn [start end] \n  (take-while (partial > end) \n              (iterate inc start)))","user":"520d3129e4b0b022ef140ca5"},{"code":"(fn r [s e]\n  (if (< s e)\n    (conj (r (inc s) e) s)\n    ()))","problem":34,"user":"4ec5d40d535d6d7199dd36b9"},{"code":"(fn [from to] \n   (take-while (partial > to) (iterate inc from))\n  \n  )","problem":34,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":34,"code":"#(loop [i %1 r []] (if (>= i %2) r (recur (inc i) (conj r i))))","user":"5a536cf2e4b05d388ecb6c10"},{"code":"(fn f34 [a b] (loop [ret '() x a]                                                                                                                           \n                  (if (= b x)                                                                                                                                 \n                    (reverse ret)                                                                                                                             \n                    (recur (conj ret x) (inc x))                                                                                                              \n                    )                                                                                                                                         \n                  )                                                                                                                                           \n)","problem":34,"user":"4eea1a41535d93acb0a66899"},{"problem":34,"code":"(fn range1 [s e]\n  (letfn [(inc1 [n] (lazy-seq (cons n (inc1 (inc n)))))]\n    (take-while #(< % e) (inc1 s))))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn myrange [fr to]\n  (if (= fr to)\n    '()\n    (cons fr (myrange (inc fr) to))))","problem":34,"user":"521a4ff5e4b0c4ef0be83004"},{"problem":34,"code":"(fn [start stop]\n  (loop [it start\n         sq-it '()]\n    (if (= it stop)\n      sq-it\n      (recur (inc it)\n             (concat sq-it (list it))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":34,"code":"(fn [ mn mx]\n  (reverse (loop [ v mn, ret '()]\n             (if (>= v mx)\n               ret\n               (recur (inc v) (conj ret v))))))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn [start end]\n  (loop [x start\n         res []]\n    (if (< x end)\n      (recur (inc x) (conj res x))\n      res)))","problem":34,"user":"4ed98b40535d10e5ff6f5307"},{"problem":34,"code":"#(take-while (fn [el] (< el %2)) (iterate inc %))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn [start stop]\n  (loop [index start, result []]\n    (if (< index stop)\n      (recur (inc index) (conj result index))\n      result)))","problem":34,"user":"4ea348ad535d7eef308072c4"},{"problem":34,"code":"(fn r [s e]\n  (if (< s e)\n    (lazy-cat (cons s (r (inc s) e)))\n    nil))","user":"5454bb07e4b0e397800069da"},{"code":"#(take (- %2 %1) (iterate inc %))","problem":34,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"#(loop [start %1\n        end   %2\n        acc   []]\n   (cond \n    (= start end) acc\n    :else (recur (+ start 1) end (conj acc start))))","problem":34,"user":"52fc89b2e4b047fd55837019"},{"code":"(fn myrange [lo hi]\n  (if (= lo hi)\n    nil\n    (concat (list lo) (myrange (+ lo 1) hi))))","problem":34,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"(fn [b t]\r\n  (loop [n b xs []]\r\n    (if (= n t)\r\n        xs\r\n        (recur (inc n) (conj xs n)))))","problem":34,"user":"5063b9a0e4b075d771da6f9d"},{"problem":34,"code":"(fn my-range [low hi]\n  (let [next (inc low)]\n    (if (< next hi)\n      (cons low (my-range next hi))\n      [low])))","user":"5b107263e4b0cc2b61a3be22"},{"code":"(fn [x y] (loop [l x v '()]\n (if (= l y) (sort v) (recur (inc l) (conj v l)))))","problem":34,"user":"4e1fe800535d04ed9115e811"},{"code":"(fn [s e]\n  (map-indexed\n   #(+ % %2)\n   (repeat (- e s) s)))","problem":34,"user":"52cf5450e4b07d0d72b273a4"},{"problem":34,"code":"(fn range2 [lb, ub] (if (= lb ub) () (cons lb (range2 (inc lb) ub))))","user":"5509a23ee4b06e50f9beb11a"},{"code":"(fn my-range [start limit]\n  (if (= start limit)\n    nil\n    (cons start (my-range (inc start) limit))))","problem":34,"user":"5215661be4b02f6d8ea676c7"},{"problem":34,"code":"(fn f [x y] (if (= x y) '() (conj (f (inc x) y) x)))","user":"54ff2342e4b07d26eda61d49"},{"problem":34,"code":"(fn my-range [imin imax]\n  (if (>= imin imax)\n    ()\n    (cons imin (my-range (inc imin) imax))))","user":"57ae3345e4b0fbc9809a271e"},{"code":"(fn my-range [start end]\n  (if (>= start end)\n    '()\n    (cons start (my-range (inc start) end))))","problem":34,"user":"5310e7aee4b08068f379ecdc"},{"problem":34,"code":"#(loop [s %1 e %2 o []]\n   (cond\n    (= s e)\n    o\n    :else\n    (recur (inc s)\n           e\n           (conj o s))))","user":"56a9d4bbe4b07966d5a8a07b"},{"code":"(fn [s e]\n          (take (- e s)\n                (iterate inc s)))","problem":34,"user":"4e6ea1f5535d5021c1a8960e"},{"problem":34,"code":"(fn [start end]\n  (loop [i start k end result []]\n    (if-not (< i k)\n      result\n      (recur (inc i) k (conj result i)))))","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":34,"code":"#(loop [start %1 return []]\n   (if (= start %2)\n     return\n     (recur (inc start) (conj return start))))","user":"568e450fe4b0dcc4269f40d0"},{"code":"(fn [from to] (take (- to from) (iterate inc from)))","problem":34,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [b e]\n    (take (- e b) (iterate inc b)))","problem":34,"user":"500ea957e4b00fff93030f9b"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start stop stop result '()]\n    (if (= start stop)\n      (reverse result)\n      (recur (inc start) stop (conj result start))\n      )\n    )\n  )","user":"550fb0bfe4b06e50f9beb17b"},{"problem":34,"code":"#((fn [b t l] (if (>= b t) l (recur (inc b) t (conj l b) ) )) %1 %2 [])","user":"567798afe4b05957ce8c6169"},{"problem":34,"code":"(fn f [a b] (if (< a b) \n            (cons a (f (inc a) b))\n            nil))","user":"54d1b6ffe4b0e8a36923e5e6"},{"code":"(fn [x y]\n    (take (- y x) (iterate inc x))\n    )","problem":34,"user":"4f2004a1535d64f6031464a7"},{"code":"#(take-while (partial > %2 )(iterate inc %))","problem":34,"user":"4ea5e794535d7eef308072df"},{"problem":34,"code":"(fn [start end] (take (- end start) (iterate inc' start)))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn my-range [lo hi]\n  (loop [l lo h hi acc '()]\n    (if (= l h) (reverse (flatten acc))\n      (recur (inc l) h (cons l acc)))))","problem":34,"user":"53287dace4b09d4e7a9b5507"},{"problem":34,"code":"(fn [start n] (take-while (partial > n) (iterate inc start)))","user":"564faadce4b0284900eef6b2"},{"code":"(fn userrange [x y]\n  (loop [a (dec y)\n         out '()]\n    (if (< a x)\n      out\n      (recur (dec a) (conj out a)))))","problem":34,"user":"52dad8bde4b09f7907dd13be"},{"problem":34,"code":"#(reverse (loop [st %, ed %2, res ()]\n   (if (= st ed)\n     res\n     (recur (inc st)\n            ed\n            (conj res st)))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"problem":34,"code":"(fn [start end] (loop [counter start nums []] (if (= counter end) nums (recur (inc counter) (conj nums counter)))))","user":"5e1cc888e4b0dc959400853d"},{"problem":34,"code":"(fn [bb ee] (take-while #(< % ee) (iterate inc bb)))","user":"57aa053fe4b0b8559636fc61"},{"code":"(fn\n  [int-min\n   int-max]\n  (let\n      [end int-max\n       ret (atom ())]\n    (loop\n        [start int-min]\n      (if (= start end)\n        (reverse @ret)\n        (do\n          (swap! ret conj start)\n          (recur (inc start)))))))","problem":34,"user":"4f601623e4b0defedf855fa3"},{"problem":34,"code":"(fn my-range [a b]\n  (letfn [(iter [a b l] (if (> b a) (iter a (- b 1) (conj l (- b 1))) l))]\n    (iter a b (list))))","user":"5843b95de4b089d5ab817e3f"},{"problem":34,"code":"( fn [a x]    \n    (loop[srt a end x sze ()]\n      (if (= (- x a) (count sze))\n       (reverse sze)\n     (recur a x (conj sze (if (empty? sze) a (inc (first sze))))))))","user":"57b35772e4b0fbc9809a277c"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         y y\n         r '()]\n    (if (>= x y) (reverse r)\n      (recur (inc x) y (conj r x)))))","user":"590253e3e4b0438e51c2d055"},{"problem":34,"code":"(fn f [a b] (if (< a b) (cons a (f (inc a) b))))","user":"55f6fe09e4b06e875b46cea2"},{"problem":34,"code":"#(loop [a %1\n         b %2\n         result (list)]\n    (if (= a b)\n      (reverse result)\n      (recur (inc a)\n             b\n             (conj result a))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn f [u v] \n  (take (- v u) (iterate inc u)))","problem":34,"user":"4e6a4038535d8ccf87e9feb5"},{"problem":34,"code":"(fn [start end]\n  (loop [curr start result []]\n    (if (= curr end)\n      (reverse result)\n    (recur (+ curr 1) (cons curr result)))))","user":"5907a736e4b047aa04b1995e"},{"problem":34,"code":"(fn [s e]\n  (loop [idx s rl '()]\n    (if (>= idx e)\n      (reverse rl)\n      (recur (inc idx) (conj rl idx)))))","user":"58969420e4b00487982d52a4"},{"problem":34,"code":"(fn [start end]\n  (loop [res [] n start]\n    (if (= n end)\n      res\n      (recur (conj res n) (inc n)))))","user":"5d73fb31e4b02e6b30c93516"},{"problem":34,"code":"(fn [start stop]\n  (take (- stop start) (iterate (fn [x] (+ x 1)) start)))","user":"532902f8e4b09d4e7a9b550e"},{"problem":34,"code":"(fn Implement-range\n  [a b]\n  (loop [i a\n         f b\n         lst ()]\n    (cond\n      (= i f) lst\n      :else (recur (inc i) f (concat lst (list i))))))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn rn [a b] (if (>= a b) '() (cons a (rn (+ a 1) b))))","problem":34,"user":"5334d4f2e4b0656e627bfd71"},{"problem":34,"code":"(fn my_range [low high]\n  (loop [i low, lst []]\n    (if (= i high)\n      lst\n      (recur (inc i) (conj lst i)))))","user":"5733e4aee4b0cd1946bd0ffe"},{"problem":34,"code":"( fn my-range\n  [ start end ]\n  ( take ( - end start )\n         ( ( fn my-countup [ x ]\n           ( cons x ( lazy-seq ( my-countup ( + 1 x ) ) ) )\n         ) start )\n  )\n)","user":"57561529e4b02ea1147992d3"},{"code":"(fn [x y] (take (- y x) (iterate (partial + 1) x)))","problem":34,"user":"4e721857535d5021c1a8965a"},{"problem":34,"code":"#(for [i (iterate inc %) :while (< i %2)]\n   i)","user":"5d7d17ece4b02e6b30c93558"},{"problem":34,"code":"(fn gen-seq [f t]\n  (lazy-seq \n   (if (= f t) []\n     (cons f (gen-seq (inc f) t)))))","user":"57aa290de4b0b8559636fc65"},{"code":"(fn rng [l h]\n  (loop [n (- (dec h) l)\n         acc (list l)]\n    (if (zero? n)\n      (reverse acc)\n      (recur (dec n) (cons (inc (first acc)) acc)))))","problem":34,"user":"4fea24e0e4b0547ebccb248d"},{"code":"(fn [a b]\n  (take (- b a) (iterate inc a) ))","problem":34,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":34,"code":"(fn [from until]\n   (loop [result [], cnt from]\n    (if (=  cnt until)\n      result\n   \t\t(recur (conj result cnt) (inc cnt))\n     )\n    \n    )\n  )","user":"59228b00e4b026ae38521281"},{"code":"(fn foo [start end]\n    (if (= start (dec end))\n      [start]\n      (cons start (foo (inc start) end))))","problem":34,"user":"52cdc676e4b07d0d72b2737f"},{"code":"(fn [start end]\n  (loop [start start s []]\n    (if (= start end)\n      s\n      (recur (inc start) (conj s start)))))","problem":34,"user":"4ee88269535d93acb0a6687f"},{"problem":34,"code":"(fn [x y]\n        (take (- y x) (iterate #(+ 1 %) x)))","user":"541f89a5e4b01498b1a71a99"},{"problem":34,"code":"(fn range-recur [x y] (if (== x (- y 1)) (conj () x) (when (< x (- y 1)) (conj (range-recur (+ x 1) y) x))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":34,"code":"(fn rangee [from to]\n  (let [max (dec to)]\n    (loop [curr from\n           res ()]\n      (if (= curr max)\n        (reverse (conj res curr))\n        (recur (inc curr) (conj res curr))))))","user":"56785234e4b05957ce8c6177"},{"problem":34,"code":"(fn [i r]\n  (loop [x i\n         s '()]\n    (if (= x r)\n      (reverse s)\n      (recur (inc x) (conj s x)))))","user":"51a4d802e4b0def3c5c5869a"},{"code":"(fn r [x y] (repeatedly (- y x) (let [tick (atom (dec x))] #(swap! tick inc))))","problem":34,"user":"510cba32e4b078ea71921121"},{"problem":34,"code":"(fn [x y]\n   (seq (reduce (fn [acc, cur] (conj acc (inc (last acc)))) [x] (repeat (dec (Math/abs (- y x))) 0))))","user":"603f6623e4b0d5df2af2231f"},{"problem":34,"code":"(letfn [(f [acc lo hi]\n           (if (< lo hi)\n             (recur (conj acc lo) (inc lo) hi)\n             acc))]\n  (partial f []))","user":"554b9c3ee4b0a04f79299594"},{"problem":34,"code":"(fn [s e]\n  (loop [startn s result []]\n    (if (= startn e)\n      result\n      (recur (+ startn 1) (conj result startn)))))","user":"5668aad0e4b04acd4f672df5"},{"problem":34,"code":"(fn [start end]\n  (loop [result [] counter start end end]\n    (if (= counter end)\n      result\n      (recur\n        (conj result counter)\n        (inc counter)\n        end))))","user":"54c8d4a8e4b045293a27f654"},{"code":"#(take (- %2 %1) (iterate (fn [x](+ 1 x)) %1))","problem":34,"user":"4ed2dd98535d44c135fd68e2"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= (inc start) end) (list start)\n  \t(conj (my-range (inc start) end) start)))","user":"5eec1001e4b07c55ae4a0502"},{"problem":34,"code":"(fn  [start end]\n  (reverse\n   (loop [r '()\n          n start]\n     (if (= n end)\n       r\n       (recur (conj r n) (inc n))))))","user":"59971dcbe4b07157cc8daacb"},{"problem":34,"code":"(fn [from to]\n  (loop [x from\n        acc []]\n    (if (= x to)\n      acc\n      (recur (inc x) (conj acc x))\n    )))","user":"5b6f27dce4b0c6492753e7d9"},{"problem":34,"code":"(fn myrange [start max]\n  (take (- max start) (iterate inc start))\n  )","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":34,"code":"(fn eh [l h]\n  (if (= l h)\n    '()\n    (cons l (eh (+ l 1) h))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":34,"code":"(fn [s e] (loop [rcoll [] i s]\n             (if (< i e)\n               (recur (conj rcoll i) (inc i))\n               rcoll)))","user":"5d363543e4b01671435dbd20"},{"code":"(fn r [a b]\n  (if (>= a b) [] (cons a (r (inc a) b))))","problem":34,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":34,"code":"(fn [start end] (loop [n start x end s []] (if (>= n end) s (recur (inc n) x (conj s n)))))","user":"540b4c4de4b0addc1aec66f6"},{"problem":34,"code":"(fn myrange\n  [low hi]\n  (loop [cur low new []]\n    (if (= cur hi)\n      new\n      (recur (inc cur) (conj new cur))\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn ranger\n  ([lower upper range_list]\n    (println range_list)\n    (cond\n      (= lower upper) (concat range_list (list lower))\n      :else\n      (recur (+ lower 1) upper (concat range_list (list lower) ))\n      )\n    )\n  ([lower upper] (ranger lower (- upper 1) '()))\n)","problem":34,"user":"502be4fae4b08f5602f232eb"},{"problem":34,"code":"(fn [start end] (loop [res []\n                      curr start]\n                 (if (= curr end)\n                   res\n                   (recur (into res [curr]) (inc curr)))))","user":"5b445421e4b02d533a91bc40"},{"code":"(fn [x y]\n  (loop [i x, r []]\n    (if (not= i y)\n      (recur (inc i) (conj r i))\n      r)))","problem":34,"user":"4e7dcdb5535db169f9c796e9"},{"code":"(fn my-range[a b]\n  (take (- b a) (iterate #(+ 1 %) a)))","problem":34,"user":"52a144b0e4b04e0c58e87bd6"},{"code":"(fn r [x y]\n  (if (< x y)\n    (cons x (r (+ 1 x) y))\n    nil))","problem":34,"user":"52091d57e4b0e152394d76f0"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (->> (iterate inc start)\n       (take (- end start))))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":34,"code":"(fn my-range [low high]\n  (let [iter\n        (fn [acc n]\n          (if (= n high)\n            acc\n            (recur (conj acc n) (inc n))))]\n        (iter [] low)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":34,"code":"(fn my-range [from to]\n  (cons from (when (< (inc from) to) (my-range (inc from) to))))","user":"500e6ddee4b04a05d36fcc06"},{"problem":34,"code":"(fn[f t](take (- t f) (iterate inc f)))","user":"53e9681de4b036ad0777e4a4"},{"code":"#(loop [x (dec %2) min (dec %1) ret ()]\n   (if (= x min) ret (recur (dec x) min (cons x ret))))","problem":34,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":34,"code":"(fn [start end] (loop [cur start final []] (if (>= cur end) final (recur (inc cur) (conj final cur) ) )) )","user":"542edb4ae4b0dad94371f2c8"},{"code":"(fn r [lo hi] (when (< lo hi) (cons lo (r (inc lo) hi))))","problem":34,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn my\r\n  [beg end]\r\n\t(loop [res [] cnt beg]\r\n\t\t(if (< cnt end)\r\n\t\t\t(recur (conj res cnt) (inc cnt))\r\n\t\t\tres)))","problem":34,"user":"4edbae0d535d10e5ff6f531c"},{"code":"(fn f\n  ([x y] (f x y []))\n  ([x y a]\n    (if (= x y)\n      a\n      (f (inc x) y (conj a x)))))","problem":34,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":34,"code":"(fn [from to]\n    (take-while #(< % to) (iterate inc from)))","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         ls []]\n       (if (< x end)\n        (recur (inc x) (conj ls x))\n        ls)))","user":"59ef5280e4b0966464fe6a2b"},{"problem":34,"code":"(fn f [a b] (if (>= a b) nil (cons a (f (inc a) b))))","user":"5a4de614e4b05d388ecb6bb1"},{"code":"(fn [from to]\n  (loop [curr from\n         collected (list)]\n    (if (< curr to)\n      (recur (+ curr 1) (cons curr collected))\n      ;else\n      (reverse collected))))","problem":34,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":34,"code":"(fn my-range\n  [from to]\n  (loop [current from\n         output []]\n    (if (= current to)\n      output\n      (recur (inc current) (conj output current)))))","user":"5b82eec6e4b047b03b2037a4"},{"problem":34,"code":"(fn rng [st en]\n  (if (= (+ st 1) en)\n  \t(list st)\n   \t(cons st (rng (+ st 1) en))))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn rng [a b] (if (< a b) (cons a (rng (inc a) b)) ()))","problem":34,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":34,"code":"#(loop [cur %1\n       fin %2\n       res '()]\n  (if (not= cur fin) (recur (inc cur) fin (cons cur res)) (reverse res)))","user":"57ac7710e4b0b8559636fc88"},{"problem":34,"code":"(fn [low high]\n  (let [f (fn [l h xs] \n           (if (= l h)\n            xs\n            (recur (+ 1 l) h (conj xs l))))]\n    (f low high [])))","user":"59bdf0eae4b0a024fb6ae42e"},{"problem":34,"code":"(fn [x y]\n  (loop [acc [x]]\n    (if (= (last acc) (dec y))\n      acc\n      (recur (conj acc (inc (last acc)))))))","user":"5a3e0e44e4b0447ef91cc5ad"},{"problem":34,"code":"(fn [start end]\n  (loop [current (dec end)\n         acc '()]\n    (if (= current start)\n      (conj acc current)\n      (recur (dec current) (conj acc current)))))","user":"50a00725e4b08df8156e9e46"},{"code":"(fn from-to [start stop]\n  (take (- stop start)\n        (iterate inc start)))","problem":34,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"#(loop [i %1 out []] (if (< i %2) (recur (inc i) (conj out i) ) out ))","problem":34,"user":"5176afd2e4b085adf681d889"},{"problem":34,"code":"#(loop [acc [] b %1 e %2]\n   (if (= b e)\n     acc\n     (recur (conj acc b) (inc b) e)))","user":"4df247b8535d08e6dec9fe25"},{"problem":34,"code":"(fn [start end] (loop [cur start r []] (if (= cur end) r (recur (+ cur 1) (conj r cur)))))","user":"5526ecc4e4b0ffed3738f928"},{"code":"(fn main [start end] ((fn helper [start end acc] \n  (if (> start end) acc \n  (helper start (- end 1) (conj acc end)))) start (- end 1) '()))","problem":34,"user":"50a8a04ae4b0deba384a58b9"},{"code":"(fn [s t] (reductions + (merge (repeat (dec (- t s)) 1) s)))","problem":34,"user":"51cbdee1e4b08d8387cbede1"},{"problem":34,"code":"(fn jj [l h]\n  (loop [n l\n         m []]\n    (if (< n h)\n      (recur (inc n) (conj m n))\n      m\n)))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn  \n  [start end]\n    (reverse\n    (loop [s start e end acc '()]\n      (cond\n        (= s e) acc\n        :else (recur (inc s) e (cons s acc))))))","problem":34,"user":"4fd16778e4b04c3a95aa040f"},{"problem":34,"code":"(fn [start end-ex] \n  (take-while #(< % end-ex) (iterate inc start)))","user":"540e17c3e4b0addc1aec6719"},{"problem":34,"code":"#(take(- %2 %1) (iterate inc %1))","user":"53e8cefde4b036ad0777e48d"},{"problem":34,"code":"(fn [x, y] (loop [f x res '()] (if (< f y) (recur (inc f) (conj res f)) (reverse res))))","user":"54a1d643e4b09f271ff37c50"},{"problem":34,"code":"(fn[x y]\n(take (- y x) (iterate inc x)))","user":"539f9f79e4b0ca733b97449e"},{"problem":34,"code":"(fn my-range [x y]\n  (if (= x y) []\n    (concat [x] (my-range (+ x 1) y) )))","user":"565b818ce4b068f2fe63dc05"},{"code":"(fn n [x y]\n  (if (= x y) nil\n    (cons x (n (+ x 1) y))))","problem":34,"user":"4ffb59f6e4b0678c553fc3cf"},{"problem":34,"code":"(fn [min max]\n  (loop [r []\n         v min]\n    (if (< v max)\n      (recur (conj r v) (inc v))\n      r)))","user":"53de7484e4b0d874e779ae35"},{"problem":34,"code":"(fn [b e]\n  (loop [i b, r []]\n    (if (= i e) r\n      (recur (inc i) (conj r i)))))","user":"55b0cc57e4b002ce9d5cbc25"},{"problem":34,"code":"(fn [a b] \n  (loop [acc [] \n         i   a] \n    (if (= i b) \n      acc \n      (recur (conj acc i) (inc i)))))","user":"5360578ee4b0243289761e35"},{"problem":34,"code":"(fn [f t]\n  (loop [start f\n         to t\n         result []]\n    (if (>= start to)                                                                                                   result\n      (recur (inc start) to (conj result start)))))","user":"54a6645be4b09f271ff37c87"},{"code":"(fn helper [min-n max-n]\n    (if (= min-n max-n)\n      '()\n      (cons min-n (helper (inc min-n) max-n))))","problem":34,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":34,"code":"(fn [a b]\n  (loop [rg [a]]\n    (if (= (last rg) (dec b))\n     \trg\n\t\t(recur (conj rg (inc (last rg)))))))","user":"5398d042e4b0b51d73faaf00"},{"problem":34,"code":"(fn [s e]\n          (take-while #(< % e)\n                      (iterate inc s)))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn [from to]\n  (loop [i from, the-seq []]\n    (if (= i to)\n      the-seq\n      (recur (inc i) (conj the-seq i)))))","problem":34,"user":"4f80a906e4b033992c121bf7"},{"code":"(fn [s end]\n  (reverse \n    ((fn [s end acc]\n      (if (= s end) acc\n          (recur (inc s) end (conj acc s))))\n    s end '())))","problem":34,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":34,"code":"(fn rng [a b] (if (= a b) '() (conj (rng (inc a) b) a)))","user":"56800ba1e4b0966858e4d8e8"},{"problem":34,"code":"(fn [min max]\n  (loop [n (- max 1) acc '()]\n    (if (< n min)\n      acc\n      (recur (dec n) (cons n acc)))))","user":"5883920ee4b0f1effa3b767e"},{"problem":34,"code":"(fn [v1 v2]\n  (loop [i v1\n        r []]\n    (if (= i v2)\n      (apply list r)\n      (recur\n        (inc i)\n        (conj r i)\n      )\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn [start end]\n   (loop [c start\n          l '()]\n    (if (= c end)\n      (reverse l)\n      (recur (inc c)\n             (conj l c)))))","problem":34,"user":"4f942227e4b0dcca54ed6cbe"},{"code":"(fn r [from to]\n  (if (= from to)\n    nil\n    (lazy-seq (cons from (r(inc from) to)))))","problem":34,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":34,"code":"#(loop [in %1\n        max_ %2\n        out ()]\n   (if (< in max_)\n     (recur (inc in) max_ (conj out in))\n     (sort out)))","user":"51456858e4b0e88796073408"},{"problem":34,"code":"(fn [from to]\n   (seq\n      (reduce (fn [v i] (conj v (+ (last v) 1))) [from]\n          (repeat (- to from 1) from))))","user":"5f97eff1e4b0715f5002d7f9"},{"problem":34,"code":"(fn [start end]\n  (loop [ curr start\n          end end\n          res []]\n    (if (= curr end)\n      (seq res)\n      (recur (inc curr) end (conj res curr))\n     \n     )\n ) \n \n )","user":"5e207f12e4b05b4b01516112"},{"problem":34,"code":"(fn [x y] (loop [start x end y z []] (if (= start end)\n                z\n                (recur (inc start) end (conj z start)))))","user":"575d5831e4b02ea114799381"},{"code":"#(loop [r '()\n        end (dec %2)]\n   (cond (> %1 end) '()\n    (= %1 end) (cons end r)\n    :else (recur (cons end r) (dec end))))","problem":34,"user":"50e35b2de4b094329ae7f4bb"},{"problem":34,"code":"(fn [m n]\n  (loop [x (dec n) r nil]\n    (if (< x m)\n      r\n      (recur (dec x) (cons x r)))))","user":"55d87324e4b0e31453f64ab4"},{"problem":34,"code":"(fn [a b] (loop [i a res []] (if (< i b) (recur (+ i 1) (conj res i)) res)))","user":"538d7e2ee4b0b51d73faae70"},{"problem":34,"code":"#(loop [index (dec %2)\n        lst '()]\n   (if (< index %1)\n   lst\n   (recur (dec index) (cons index lst))))","user":"6074e278e4b069485764de51"},{"problem":34,"code":"#(loop [iter (dec %2) result '()]\n    (if (< iter %1)\n      result\n      (recur (dec iter) (conj result iter))))","user":"5e16fd78e4b0a047bd49f726"},{"code":"(fn [l h]\r\n   (loop [l l acc '()]\r\n     (if (= l h)\r\n       (reverse acc)\r\n       (recur (inc l) (conj acc l)))))","problem":34,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn [start stop]\n  (loop [acc [start]]\n    (let [x (last acc)]\n      (if (= x (dec stop))\n          acc\n        (recur (conj acc (inc x)))))))","problem":34,"user":"521e4f22e4b0dd19981ad079"},{"problem":34,"code":"(fn myrange [s e]\n  (take (- e s) (iterate (partial + 1) s)))","user":"53e241a6e4b036ad0777e3f0"},{"problem":34,"code":"(fn [start end]\n  (->> (loop [i start lst '()]\n        (if (> i (- end 1))\n              lst\n              (recur (inc i) (conj lst i))))\n        reverse))","user":"559468cbe4b0c79f6e1db954"},{"code":"(fn [a b]\n  (loop [i a\n         acc []]\n    (if (>= i b)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"4fbd24d2e4b081705acca2ff"},{"problem":34,"code":"(fn [x-min x-max]\n   (take-while #(< % x-max)\n               ((fn range* [n] (cons n (lazy-seq (range* (inc n))))) x-min)))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn range-it [x y]\n  (take (- y x)\n  (iterate #(inc %) x)))","problem":34,"user":"4e4bd94b535dc968683fc4d7"},{"code":"(fn r [l h] \n  (if (< l h)\n    (cons l (r (inc l) h))\n    '()))","problem":34,"user":"4e86a443535dc036d0eaab83"},{"problem":34,"code":"(fn f\n  [a b]\n  (if (= a b)\n    ()\n    (cons a (f (inc a) b))))","user":"56df632ce4b0ca2494a095f2"},{"problem":34,"code":"(fn [lower upper]\n  (loop [lst [] x lower]\n    (if (= x upper)\n      lst\n      (recur (conj lst x) (inc x)))))","user":"5b58d012e4b02d533a91bd71"},{"problem":34,"code":"#(loop [rng [] start % end %2]\n  (let [rng (conj rng start) start (inc start)]\n    (if (= start end)\n      rng\n      (do\n        (recur rng start end)))))","user":"5414dccbe4b01498b1a719f1"},{"problem":34,"code":"(fn [x y]\n  (loop [n x coll '()]\n    (if (= n y)\n      (reverse coll)\n      (recur (inc n) (conj coll n)))))","user":"593dde1be4b069cdc2982baf"},{"problem":34,"code":"#(loop [start %1, end %2, result []]\n   (if (= start end)\n     result\n     (recur (inc start) end (conj result start))\n     )\n   )","user":"567e418fe4b0feffd0d18eb1"},{"problem":34,"code":"(fn [from to]\n  (seq (loop [cur from\n              result []]\n         (if (< cur to)\n           (recur (inc cur) (conj result cur))\n           result))))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":34,"code":"(fn enumerate\n         ([start end] (enumerate start end []))\n         ([start end coll]\n          (if (= start end)\n            coll\n            (recur (inc start) end (conj coll start)))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":34,"code":"#(loop [sp %1 ep %2 l []] (if (= sp ep) l (recur (+ 1 sp) ep (conj l sp))))","user":"55c66ffee4b0e31453f649c2"},{"problem":34,"code":"(fn customRange\n  [start finish]\n  (loop [x start values []]\n    (if (< x finish) \n      (recur (inc x) (conj values x)) \n      values)\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":34,"code":"(fn rrange [start fin]\n  (if (= start fin)\n    ()\n    (cons start (rrange (+ 1 start) fin))))","user":"60890415e4b0ae75613dceec"},{"problem":34,"code":"(fn f\n  ([a b] (f a b []))\n  ([a b out]\n    (if-not (= a b)\n      (f (inc a) b (conj out a))\n      out)))","user":"57e20474e4b0bfb2137f5a82"},{"problem":34,"code":"(fn rng [x y] (if (< x y) (concat [x] (rng (inc x) y)) []))","user":"5b465b8be4b02d533a91bc65"},{"problem":34,"code":"(fn mrange2 \n  [lower upper]\n  (loop [lower lower result []]\n    (if (>= lower upper)\n      (reverse result)\n      (recur (inc lower) (cons lower result))))\n   )","user":"540efe2ee4b0addc1aec6724"},{"problem":34,"code":"(fn [start-range end-range] (take (- end-range start-range) (iterate inc start-range)))","user":"55df1985e4b050e68259b3eb"},{"problem":34,"code":"#(loop [x %1 acc []] (if (< x %2) (recur (inc x) (conj acc x)) acc))","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"(fn r [a b]\n  (if (= a b)\n      nil\n      (cons a (r (inc a) b))))","problem":34,"user":"504e3afae4b0f6ff3350c488"},{"code":"(fn rng [b e]\n  (if (< b e)\n  \t(cons b (rng (inc b) e))\n  \t[]))","problem":34,"user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [start endp1] \n  (take (- endp1 start) (iterate inc start))\n  )","problem":34,"user":"5135a74ae4b04ac1f358dd46"},{"problem":34,"code":"(fn rng [x, y] (if (= x y) () (conj (rng (+ x 1) y) x)))","user":"56f258d3e4b04a395b9a04a1"},{"problem":34,"code":"(fn peu [x y] (if (= x y) '() (conj (peu (+ x 1) y) x)))","user":"53fc8424e4b0de5c418485b3"},{"problem":34,"code":"#(loop [x %1\n       lst []]\n  (if (< x %2)\n    (recur (inc x) (conj lst x))\n    lst))","user":"56e1122fe4b03a7c14b85a20"},{"problem":34,"code":"#(loop [f % res []]\n   (if (= f %2)\n     res\n     (recur (inc f) (conj res f))))","user":"5964c614e4b069c0a1a19770"},{"problem":34,"code":"(fn [s1 f]\n  (loop [s s1 ret []]\n    (if (= s f) ret (recur (inc s) (conj ret s)))   \n  )        \n)","user":"54aa373de4b09f271ff37cb6"},{"problem":34,"code":"(fn \n  [s e]\n  (loop [rs [] cur s]\n    (if (< cur e)\n      (recur (conj rs cur) (inc cur))\n      rs)))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn new-range [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"5167cf82e4b0c5a4140a3095"},{"code":"(fn foo [min max] (if (= max min) '() (cons min (foo (+ 1 min) max))))","problem":34,"user":"50ae5659e4b0a40c9cfb08d2"},{"code":"#(reverse (loop [start %1 end %2 ret '()] (if (not (< start end )) ret (recur (inc start) end (conj ret start))  )  ))","problem":34,"user":"50463347e4b011c5dfee771e"},{"code":"(fn f [n m] (if (>= n m) () (conj (f (inc n) m) n)))","problem":34,"user":"526bc746e4b03e8d9a4a7271"},{"problem":34,"code":"(fn [a b]\n  (loop [from a\n         to b \n         lst []]\n      (if (>= from to)\n        (reverse lst)\n        (recur (inc from) to (cons from lst)))))","user":"55527251e4b0deb715856df3"},{"code":"(fn rane [n upto]\n  (if (= n upto)\n    '()\n    (cons n (rane (+ 1 n) upto))))","problem":34,"user":"5020692be4b0cb6ebc0a42f6"},{"code":"(fn [a b]\n  (loop [i a res []]\n    (if (= i b) res (recur (inc i) (conj res i)))))","problem":34,"user":"5027b41ee4b01614d1633fee"},{"problem":34,"code":"(fn [start finish] \n  (loop [current start\n         output []]\n    (if (= current finish)\n      output\n      (recur (inc current) (conj output current)))))","user":"54336443e4b0b6b47310fcde"},{"problem":34,"code":"(fn [start end]\n  (loop [start start, end end, lst []]\n    (if (= start end)\n      lst\n      (recur (+ start 1) end (conj lst start)))))","user":"5d9475e4e4b0d3f9b434ad25"},{"problem":34,"code":"(fn [b e]\n  (seq\n   (loop [n b result []]\n     (if (>= n e) result\n       (recur (inc n) (conj result n))))))","user":"52a0f9c4e4b04e0c58e87bd0"},{"problem":34,"code":"(fn [a e]\n   (loop [s []\n          i a]\n     (if (< i e)\n       (recur (conj s i) (inc i))\n       s)))","user":"5571d6e5e4b09a3098a5253f"},{"problem":34,"code":"(fn [s e]\n    (->>\n      (repeat 1)\n      (take (- e s 1))\n      (reduce (fn [coll v] (conj coll (inc (last coll)))) [s])\n    )\n  )","user":"5bc28638e4b07a9b28b10033"},{"problem":34,"code":"(fn rnge [start n] (take (- n start) (iterate inc start)))","user":"56742817e4b05957ce8c612d"},{"code":"(fn [start end]\n  (take-while #(< % end) (iterate inc start)))","problem":34,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn [min max]   \n   (take (- max min) (iterate inc min))  \n)","problem":34,"user":"5254f908e4b0541d1855b9ba"},{"problem":34,"code":"#(if-not (<= %1 %2) '() (take (- %2 %1) (iterate inc %1)))","user":"560843dee4b046a4fc0ac00e"},{"code":"(fn rng [start end] \n   (loop [x start acc []] \n      (if (< x end) (recur (inc x) (conj acc x)) acc)))","problem":34,"user":"529d4f4be4b04e0c58e87b79"},{"problem":34,"code":"(fn my-range [start end]\n  (let [length (- end start)]\n    (take length (iterate inc start))))","user":"55d204abe4b0e31453f64a4f"},{"code":"(fn [start, stop]\n  (loop [i (dec stop)\n         coll ()]\n    (if (< i start)\n      coll\n      (recur (dec i) \n             (cons i coll)))))","problem":34,"user":"520612a7e4b0bf4f1882c81c"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (if (= start end)\n    '()\n    (cons start (my-range (inc start) end))))","user":"517e9526e4b09104ecebe7e2"},{"problem":34,"code":"#(take (- %2 %) (iterate inc %))\n;(fn my-range [start end] (loop [r [] x start] (if (= x end) r (recur (conj r x) (inc x)))))","user":"546a6e9fe4b00cfc9eacc157"},{"problem":34,"code":"(fn rng [from to]\n  (if (>= from to)\n    '()\n    (cons from (rng (+ from 1) to))))","user":"5bcf0b1be4b0e9689409ee24"},{"code":"(fn [start stop]\n      (loop [r []\n            from start\n            to stop]\n  \t     (if (= from to)\n\t\t       r\n\t\t       (recur (conj r from) (inc from) to)))\n      )","problem":34,"user":"4f3e6244e4b0e243712b1f85"},{"problem":34,"code":"(fn [start end]\n   (loop [current-item start result []]\n       (if (= end current-item) result\n         (recur (inc current-item) (conj result current-item))   \n     )\n     )\n)","user":"55d44af5e4b0e31453f64a74"},{"problem":34,"code":"(fn [init final]\n  (take (- final init) (iterate inc init)))","user":"57d0679ee4b0bd073c202359"},{"code":"(fn [start end]\r\n  (take (- end start) (iterate #(+ 1 %) start))\r\n  )","problem":34,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":34,"code":"#(take (- %2 %1)  (iterate inc %1))","user":"5462ce20e4b01be26fd746b8"},{"problem":34,"code":"(fn [start end]\n  (loop [s start c []]\n    (if (> end s)\n      (recur (inc s) (conj c s))\n      c)))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [n m] ((fn foo [n m lst] (if (>= n m) lst (foo (inc n) m (concat lst [n])) ) ) n m ()))","problem":34,"user":"516733fce4b079759a74a5e9"},{"code":"(fn [x y]\n  (loop [x x r []]\n    (if (= x y) r\n    (recur (inc x) (conj r x)))))","problem":34,"user":"5030f16fe4b05b7df5a0b84b"},{"code":"(fn [acc b e]\n  (if (= b e)\n    (seq acc)\n    (recur (conj acc b) (inc b) e))) []","problem":34,"user":"4ed292ac535d44c135fd68d9"},{"problem":34,"code":"(fn rang [start stop]\n  (loop [i (dec stop) s '()]\n    (if (< i start)\n      s\n      (recur (dec i) (conj s i)))))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn [minn maxx]\r\n  (take (- maxx minn) (iterate inc minn)))","problem":34,"user":"4e14090d535d04ed9115e7dc"},{"problem":34,"code":"(fn ra [n1 n2] (if (= n1 n2) nil (conj (ra (+ n1 1) n2) n1)))","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn r [x y]\n    (if (number? x) (r (vec (list x (+ x 1))) y)\n      (if (= (last x) (- y 1)) \n          (lazy-seq x)\n          (r (conj x (+ 1 (last x))) y))))","problem":34,"user":"50588af1e4b06522596eba7d"},{"problem":34,"code":"(fn f[a b]\n  (if (= a b)\n    '()\n    (conj (f (inc a) b) a)))","user":"5978305be4b01722bebd4d03"},{"code":"#(letfn [(myrange [a b]\r\n   (if (= a b)\r\n\t\t  []\r\n\t\t  (cons a (myrange (inc a) b))))]\r\n  (myrange %1 %2))","problem":34,"user":"4e273301535deb9a81d77ef7"},{"code":"(fn x-range [start end]\n  (loop [coll [] i start]\n    (if (< i end)\n      (recur \n        (conj coll i)\n        (inc i))\n      coll)))","problem":34,"user":"4eccb190535d23f0362276fe"},{"problem":34,"code":"(fn my-range [nmin nmax]\n  (loop [rslt () numb nmin]\n    (if (>= numb nmax) (reverse rslt) (recur (cons numb rslt) (inc numb)))\n    ))","user":"59dd387be4b0a0ac046f2502"},{"problem":34,"code":"(fn [s e] (loop [r [] c s] (if (= c e) r (recur (conj r c) (inc c)))))","user":"55eeb37ae4b0121d4835fdf3"},{"problem":34,"code":"#(loop [start % end %2 coll []]\n   (if (< start end)\n     (recur (inc start) end (conj coll start))\n     coll))","user":"56677192e4b04acd4f672dd5"},{"code":"(fn my-range\n  [begin end]\n  (if (< begin end)\n    (cons begin (my-range (inc begin) end))\n    nil))","problem":34,"user":"4f7b3d53e4b06e829148e1a0"},{"code":"#(take (- %2 %1) (iterate (fn [a](inc a)) %1))","problem":34,"user":"4fd15334e4b04c3a95aa040d"},{"code":"(fn rng [start end]\n    (loop [acc [] cnt start]\n        (if (= end cnt)\n            acc\n            (recur (conj acc cnt) (inc cnt))))\n)","problem":34,"user":"52c17e42e4b07a9af5792367"},{"code":"(fn ra[ a b] (if (= a b) nil (cons a (ra (inc a) b))) )","problem":34,"user":"4e6279e3535d8ccf87e9fe60"},{"problem":34,"code":"(fn r [s e]\n  (take (- e s) (iterate inc s)))","user":"597a4277e4b02382a38ad1e2"},{"problem":34,"code":"(fn\n  [f t]\n  (loop [x    f\n         res  '()]\n    (if (>= x t)\n      (reverse res)\n      (recur (inc x) (conj res x)))))","user":"56bf78dae4b0f26550335989"},{"code":"(fn [a b]  (take (- b a)  (iterate inc a) ))","problem":34,"user":"51e05dfae4b01188f0627543"},{"code":"(fn [s e]\n    (loop [n s\n           s []]\n      (if (= n e)\n        s\n        (recur (+ 1 n) (conj s n)))))","problem":34,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":34,"code":"(fn rng [s e] (take (- e s) (iterate inc s)))","user":"53b39d82e4b047364c0444a6"},{"problem":34,"code":"(fn [x n] (take-while #(< % n) (iterate inc x)))","user":"552356fae4b0882d96d091af"},{"problem":34,"code":"(fn rng\n  [first last]\n  (take (- last first) (iterate #(+ % 1) first))\n  )","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [x y] (take-while (partial > y) (iterate inc x)))","problem":34,"user":"4f26c487e4b0d6649770a006"},{"problem":34,"code":"(fn [start stop]\n  (loop [i start\n         result []]\n    (if (= i stop)\n      result\n      (recur (inc i) (conj result i)))))","user":"56e6d049e4b02e7e935eb6cd"},{"code":"(fn range0 [n1,n2]\n  (if(= n1 n2) '()\n    (conj (range0 (+ n1 1) n2) n1)))","problem":34,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn r [a b]\n  (if (= a (- b 1))\n    [a]\n    (if (> a (- b 1))\n    []\n    (cons a (r (+ a 1) b)))))","problem":34,"user":"5110b8bae4b04c71fce993f4"},{"problem":34,"code":"(fn p\n  [x y]\n    (cond\n     (= x y) ()\n     :else (cons x (p (inc x) y))))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"#(loop [z [] a %]\n              (if (>= a %2)\n                z\n                (recur (conj z a) (inc a))))","problem":34,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":34,"code":"#(seq (reduce (fn [l x] (conj l (inc (last l)))) [%1] (repeat (- %2 %1 1) 0)))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":34,"code":"(fn my_range [b e]\n    (loop [x b\n           res []]\n      (if (< x e)\n        (recur (inc x) (conj res x))\n        (seq res))))","user":"5686640ae4b0dcc4269f4050"},{"code":"(fn [start end]\n  (loop [current start coll []]\n    (if (= current end)\n      coll\n      (recur (inc current) (conj coll current)))))","problem":34,"user":"5225271fe4b01819a2de42f9"},{"problem":34,"code":"(fn [start end]\n  (loop [n start\n         r '()]\n    (if (= n end)\n      r\n      (recur (inc n) (concat r (list n))))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":34,"code":"(fn [l h]\n  (loop [l l\n         acc []]\n    (if (< l h)\n      (recur (inc l) (conj acc l))\n      acc)))","user":"5535d34be4b09218d5f44fb0"},{"problem":34,"code":"(fn  [start stop]\n  (loop [value start result []]\n    (if (= value stop)\n      result\n      (recur (inc value) (conj result value)))))","user":"57c176abe4b05aa3c4741ca2"},{"problem":34,"code":"(fn rangeCore [start end]\n  (loop [result (vector) start start end end]\n    (if (=  start end) \n      result\n      (recur (conj result start) (+ 1 start) end))))","user":"57465526e4b009280f9f2b61"},{"problem":34,"code":"(fn [start end]\n \t(loop [coll [] p start]\n      (if (>= p end)\n        (apply list coll)\n        (recur (conj coll p) (inc p))\n     )\n   ) \n )","user":"5de6484ce4b0986d99407f66"},{"problem":34,"code":"(fn [start finish]\n  (loop [n start coll []]\n    (if (= n finish) coll (recur (inc n) (conj coll n)) )\n    )\n)","user":"5da975b9e4b000c986472c32"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         y y\n         rg []]\n   (if (< x y)\n     (recur (inc x) y (conj rg x))\n     rg)))","user":"56491d05e4b0284900eef63a"},{"code":"(fn foo [x y]\n     (let [col nil ind x]\n       (if (= ind y)\n         nil\n         (conj (foo (+ x 1) y) ind))))","problem":34,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn [min-value max-value]\n   (loop [min min-value max (- max-value 1) acc '()]\n     (if (> min max)\n       acc\n       (recur min (- max 1) (cons max acc)))))","problem":34,"user":"4ede0511535d10e5ff6f5330"},{"problem":34,"code":"#(loop [i %1 v []]\n  (if (= i %2) v\n    (recur (inc i) (conj v i))))","user":"56c60b36e4b05cc29241eead"},{"problem":34,"code":"(fn [a b] (let [n (- b a)]\n  (take n (iterate inc a))\n))","user":"5a424954e4b0447ef91cc5f0"},{"code":"(fn rng [a b]\n    (when (< a b)\n        (cons a (rng (inc a) b))))","problem":34,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn my-range [b e]\n  (loop [b b, acc []]\n    (if (= b e) acc\n      (recur (inc b) (conj acc b)))))","problem":34,"user":"4f07bc41535dcb61093f6c2c"},{"problem":34,"code":"#(loop [from   %1\n        to     %2\n        target []]\n   (if (= from to)\n     target\n     (recur (inc from) to (conj target from))))","user":"5d2c779be4b01671435dbc8d"},{"code":"(fn rg [a b] (if (< a b) (cons a (lazy-seq (rg (inc a) b))) ()))","problem":34,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn rng [start end]\n  (if (= start end)\n    '()\n    (cons start (lazy-seq (rng (inc start) end)))))","problem":34,"user":"50fe2b87e4b03cd852b4e84b"},{"code":"(fn [s e]\n      (loop [x 0 start s end e listx []]\n        (if (= x 0)\n          (recur (+ x 1) start end (conj listx start))\n          (if (< start end)\n            (recur (+ x 1) (+ start 1) end (conj listx (+ start 1)))\n            (drop-last listx)))))","problem":34,"user":"4e028764535d04ed9115e790"},{"problem":34,"code":"#(loop[s %2 e %1 res ()]\n   (if (> s e)\n     (recur (dec s) e (conj res (dec s)))\n     res))","user":"541619e8e4b01498b1a719f9"},{"code":"#(loop [start %1 stop %2 xs '()]\n  (if (< start stop)\n      (recur start (dec stop) (cons (dec stop) xs))\n      xs))","problem":34,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"(fn [start end] (loop [final []\n                       i start]\n                  (if (= i end)\n                    (seq final)\n                    (recur (conj final i) (inc i)))))","problem":34,"user":"507a33dee4b08327cd804a68"},{"problem":34,"code":"(fn [c d]\n  (loop [x c\n         y d\n         new-list (list x)]\n    (if (= (inc x) y)\n      (reverse new-list)\n      (recur (inc x) y (conj new-list (inc x))))))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn [a b] (take (Math/abs (- a b)) (iterate inc a)))","problem":34,"user":"511623cbe4b0d4f670fd2fe1"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         result ()]\n    (if (>= x end)\n      (into () result)\n      (recur (inc x) (conj result x)))))","user":"57ab41dde4b0b8559636fc79"},{"problem":34,"code":"(fn ran [z x y]\n   (if (< x y)\n     (ran (conj z x) (inc x) y)\n     (reverse z)\n     )\n   ) '()","user":"5f082d9ee4b0cf489e8d7f5c"},{"code":"(fn rang ([curr end nums]\n  (if (= curr end)\n    nums\n    (cons curr (rang (+ curr 1) end nums))\n    ))\n  ([curr end] (rang curr end '())))","problem":34,"user":"5239caa6e4b0d705d026ef27"},{"problem":34,"code":"(fn [start end]\n         (loop [res []\n                current start]\n           (if (>= current end)\n             res\n             (recur (conj res current) (inc current)))))","user":"525523e3e4b0541d1855b9cc"},{"problem":34,"code":"(fn r\n  [s m]\n  (take (- m s) (iterate #(inc %) s)))","user":"56084e91e4b046a4fc0ac00f"},{"code":"(fn\n  [s e]\n    ((fn [limit acc coll]\n       (if (= limit acc) \n           coll\n           (recur limit (inc acc) \n             (conj coll acc)))) e s []))","problem":34,"user":"509eeb3be4b08df8156e9e37"},{"problem":34,"code":"(fn gx\n  ([start end]\n   (gx start end [])\n   )\n  ([start end tar]\n   (if (= start end)\n     tar\n     (gx (inc start) end (conj tar start)))\n   )\n  )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":34,"code":"(fn q34 [n m]\n  (when (< n m)\n    (conj (q34 (inc n) m) n)))","user":"57131a8ee4b07c98581c3a97"},{"problem":34,"code":"(fn foo ([x y] (foo x y []))\n  ([x y z]\n    (cond (= x y) z\n          :else (foo (inc x) y (conj z x)))))","user":"5839f079e4b089d5ab817d48"},{"problem":34,"code":"(fn answer [start end]\n  (take (- end start) (iterate inc start))\n)","user":"5524f21fe4b0882d96d091c7"},{"code":"(fn [x y]\n  (loop [i x r []]\n    (if (>= i y)\n      r\n      (recur (inc i) (conj r i)))))","problem":34,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [l u](take (- u l) (iterate #(inc %) l)))","problem":34,"user":"4efcac3a535de96065cf507e"},{"code":"(fn rng [x y] ( if (= x y) '() (cons x (rng (inc x) y)) ))","problem":34,"user":"50ef311fe4b0a78662fa2651"},{"problem":34,"code":"(fn [from to] (loop [iteration from output []] (if (= iteration to) output (recur (inc iteration) (conj output iteration)))))","user":"5c723f4be4b0fca0c16227a0"},{"code":"#(loop [n %1 acc ()]\n   (if (= n %2)\n     (reverse acc)\n     (recur (inc n) (cons n acc))))","problem":34,"user":"4f4e978ae4b03ad3f0c10ccb"},{"problem":34,"code":"(fn my-range \n  [a b]\n  (loop [s [] i a]\n    (if (< i b)\n        (recur (conj s i) (inc i))\n        s\n    )\n  )\n)","user":"55acd080e4b03311e7b73298"},{"code":"(fn [x e]\r\n   (loop [lista '() inicio x]\r\n     (if (= inicio e)\r\n       lista\r\n       (recur (concat lista (list inicio)) (inc inicio) )\r\n     )\r\n   )\r\n)","problem":34,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":34,"code":"(fn [start end]\n(take-while\n  (fn [n]\n    (not= 0 (- end n)))\n  (iterate inc start)))","user":"5d06499ae4b0cc9c915881ec"},{"problem":34,"code":"(fn rgn [a b]\n  (if (= a b) '() (cons a (rgn (inc a) b))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":34,"code":"(fn [start end]\n  (loop [res []\n         i start]\n    (if (>= i end)\n      res\n      (recur (conj res i) (inc i)))))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (cons start (my-range (inc start) end))\n    ()))","user":"5776e21de4b0979f89651642"},{"problem":34,"code":"#(loop[result (cons %1 '())]\n   (if (= (first result) (- %2 1)) (reverse result)\n     (recur (cons (+ (first result) 1) result))))\n\n\n;(fn [start end] (take (- end start) (iterate inc start)))","user":"59c77511e4b0a024fb6ae545"},{"problem":34,"code":"(fn aba [a b]\n  (loop [col [] curr a]\n   (if (= curr b)\n     col\n     (recur (conj col curr) (inc curr))))\n  )","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [low high]\n  (take (- high low) (iterate inc low)))","problem":34,"user":"4f7250cce4b07046d9f4f02a"},{"code":"(fn [from to] \n                            (loop [i from out []]\n                        \n                               (if (< i to)\n                                   (recur (inc i) (conj out i))\n                                   out)))","problem":34,"user":"4f608f0ee4b0defedf855faa"},{"code":"#(loop [l %1 r %2 seq []] (if (= l r) seq (recur (inc l) r (conj seq l))))","problem":34,"user":"4faec810e4b081705acca24e"},{"problem":34,"code":"(fn [a b]\n  (loop [i a result ()]\n    (if (<= b i)\n      (reverse result)\n      (recur (inc i) (conj result i)))))","user":"579dd954e4b05b1deef9ae1b"},{"code":"(fn rng [low hi]\n  (if (= low hi)\n    []\n    (concat [low] (rng (inc low) hi))))","problem":34,"user":"5353afa0e4b084c2834f4b03"},{"problem":34,"code":"#(loop [start %1 rng []]\n   (if (>= start %2)\n     rng\n     (recur (inc start) (conj rng start) )))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":34,"code":"(fn [start_at end_at]\n  (loop [result (list) initial start_at]\n    (if (>= initial end_at)\n      (reverse result)\n      (recur (conj result initial) (inc initial)))))","user":"55a0d79fe4b0acc240e31502"},{"problem":34,"code":"(fn [m n] (take-while #(< % n) (iterate inc m)))","user":"5db1969be4b010eb3c36cd06"},{"code":"(fn range2 [start end] (if (= start end) [] (cons start (range2 (inc start) end))))","problem":34,"user":"50723bbae4b0e3170b5a868b"},{"problem":34,"code":"(fn [s e]\n  (loop [s s,\n         e e,\n         l []]\n    (if (= s e)\n      l\n      (recur (inc s) e (conj l s)))))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [fro to] \n  ((fn [this-val res-list]\n     (if (= this-val to)\n       (apply list res-list)\n       (recur (inc this-val) (conj res-list this-val)))\n     )\n   fro [])\n  )","problem":34,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn hop [lo hi]\n  (when (< lo hi)\n    (lazy-seq\n      (cons lo (hop (inc lo) hi)))))","problem":34,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":34,"code":"(fn fun \n  ([x y]\n   (fun (inc x) y (list x)))\n  ([x y lista]\n   (if (< x y)\n     (fun (inc x) y (cons x lista))\n     (reverse lista))))","user":"560ff632e4b05f002753df66"},{"problem":34,"code":"(fn rang [l h]\n  (lazy-seq\n   (if (>= l h)\n     ()\n     (cons l (rang (inc l) h)))))","user":"5d9515a9e4b0d3f9b434ad2c"},{"code":"(fn [x y]\r\n  (loop [lo x hi y r '()]\r\n      (if (= lo hi)\r\n        (reverse r)\r\n        (recur (inc lo) hi (conj r lo))))\r\n  )","problem":34,"user":"4fa719c0e4b081705acca1bf"},{"problem":34,"code":"(fn rng [m n] (if (< m n) (cons m (rng (inc m) n)) '()))","user":"59e8c89de4b0249b72820737"},{"problem":34,"code":"(fn [min_ max_] (take (- max_ min_) (iterate inc min_)))","user":"60654263e4b069485764ddc9"},{"problem":34,"code":"(fn [f t]\n (reverse\n  (reduce\n   (fn [acc e]\n     (conj \n      acc \n      (inc (or (first acc) e))))  \n   nil\n   (repeat (- t f) (- f 1)))))","user":"5b38d2f3e4b02d533a91bbaf"},{"problem":34,"code":"(fn [b e]\n   (loop [i b xs []]\n     (if (< i e)\n       (recur (inc i) (conj xs i))\n       xs)))","user":"57a5da5ee4b0a966079561fe"},{"code":"(fn [x y]\n  (map #(+ x %) (take (- y x) (iterate inc 0))))","problem":34,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %1))\n\n;(fn [lb ub] (map-indexed #(+ %1 %2) (repeat (- ub lb) lb)))","user":"51319a53e4b06942423563c8"},{"code":"(fn [beg end]\n  (loop [acc [] cur beg]\n    (if (= cur end)\n      acc\n      (recur (conj acc cur) (inc cur)))))","problem":34,"user":"51bdebece4b0ff155d51d2b7"},{"problem":34,"code":"(fn [start end] (letfn [(make-list [st en lis] (if (= st en)\n                                                    lis\n                                                    (recur (+ st 1) en (conj lis st))))] \n                 (make-list start end [])))","user":"544f732fe4b0e39780006994"},{"code":"(fn [from to]\n  (loop [next (- to 1)\n         acc '()]\n    (if (>= next from)\n      (recur (dec next) (cons next acc))\n      acc)))","problem":34,"user":"4ee624f8535d93acb0a66855"},{"problem":34,"code":"(fn \n  [start end]\n  (loop [start start\n         end end\n         solution  [] ]\n    (if  (= start end)\n      solution\n      (recur (inc start) end (conj solution start)))))","user":"560d7863e4b05f002753df40"},{"problem":34,"code":"(fn [a b]\n  (loop [r '(), x a]\n    (if (>= x b)\n      r\n      (recur (concat r (list x)) (inc x)))))","user":"5a4caa20e4b05d388ecb6b94"},{"problem":34,"code":"(fn [low-n high-n] (loop [iter low-n result []]\n                     (if (= iter high-n)\n                       result\n                       (recur (inc iter) (conj result iter)))))","user":"606d75f5e4b069485764de13"},{"problem":34,"code":"(fn [de fi] \n  ((fn [f l r]\n    (if (= l f)\n      r\n      (recur (inc f) l (conj r f))\n    )\n  ) de fi [])\n)","user":"57dfe173e4b0bd073c20246b"},{"code":"(fn range2 [x y]\n  (cond \n    (= x y) '()\n    :else (cons x (range2 (inc x) y))))","problem":34,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn [x y]\n  (let [diff (- y x)]\n(loop [ls '()\n       c (- diff 1)]\n       (if (>= c 0)\n(recur (cons (+ c x) ls) (dec c))\nls))))","problem":34,"user":"4fab2859e4b081705acca213"},{"problem":34,"code":"(fn\n  [start end]\n  (let [runtimes (- end start)]\n    (take runtimes (iterate inc start))))","user":"58a413b5e4b02bd94d917f07"},{"code":"(fn [from to] \n  (loop [current (- to 1) res '()]\n               (if (< current from)\n                 res \n                 (recur (- current 1) (conj res current)))))","problem":34,"user":"5255b719e4b0541d1855b9ef"},{"problem":34,"code":"(fn [x y]\n  (loop [cntr x\n         lst []]\n    (if (< cntr y)\n      (recur (inc cntr) (conj lst cntr))\n      lst)))","user":"57f253a3e4b0511f1d294dea"},{"code":"#(take (- %2 %) ((fn rng [a] (lazy-seq (cons a (rng (inc a))))) %))","problem":34,"user":"523b10dfe4b02f719975bdb8"},{"problem":34,"code":"(fn [s e] \n  (loop \n   [o '() \n    l (dec e)]\n       (if (= l s)\n          (conj o l)\n         (recur (conj o l)\n                (dec l)\n              )\n               \n            )))","user":"5e85163be4b09a7a73c8bbd0"},{"problem":34,"code":"(fn [b e]\n  (loop [r (- e b)\n         acc []]\n    (if-not (<= r 0)\n            (recur (dec r)\n                   (conj acc (- e r)))\n            acc)))","user":"51316a63e4b0431ba07e7feb"},{"code":"#(take (-%2%1) (iterate inc %1))","problem":34,"user":"4e232f34535d04ed9115e81f"},{"code":"(fn r [a b]\n     (if (= a b) '()\n         (conj (r (inc a) b) a)))","problem":34,"user":"4eb01df4535d7eef30807337"},{"code":"(partial #(if (>= %2 %3)\n            %1\n            (recur (cons (dec %3) %1) %2 (dec %3)))\n         nil)","problem":34,"user":"51364acfe4b04ac1f358dd51"},{"code":"(fn [from to]\n          (loop [counter from\n                 acc '()]\n            (if (>= counter to)\n              (reverse acc)\n              (recur (inc counter) (conj acc counter)))))","problem":34,"user":"4eaa47bc535d7eef30807309"},{"problem":34,"code":"(fn range-test [m n]  (if (>= m  n) '() (conj (range-test (inc m) n) m)))","user":"551e2cade4b030e6a24d00e4"},{"problem":34,"code":"(fn [lower upper] \n  (reduce (fn [acc elt] (cons (- (first acc) 1) acc)) \n          (list (- upper 1))\n          (take (- upper lower 1) (repeat true))))","user":"5553b924e4b0deb715856e06"},{"problem":34,"code":"(fn [b e]\n  (loop [i b\n         result []]\n    (if (= i e) \n      result\n      (recur (inc i) (conj result i)))))","user":"55aa8276e4b0988bba2ad94e"},{"problem":34,"code":"(fn [_first _last]\n  (loop [f _first\n         r _last\n         li []]\n    (if (= f r)\n      li\n      (recur (inc f) r (conj li f)))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":34,"code":"(fn [fst lst] (take (- lst fst) (iterate inc fst)) )","user":"55fcaccfe4b0f488688e0679"},{"code":"(fn [start end]\n  (apply list(loop [current start r []]\n    (if (= current end) r \n    (recur (inc current) (conj r current))))))","problem":34,"user":"4f0348b4535dcb61093f6a84"},{"code":"(fn [x y]\n  (reverse (loop [x x rs nil]\n              (if (= x y) \n                rs\n                (recur (inc x) (cons x rs))))))","problem":34,"user":"4e7c4290535db169f9c796bc"},{"problem":34,"code":"(fn [l r]\n  (take-while #(> r %1) (iterate inc l)))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":34,"code":"(fn my-range\n  ([]\n   (iterate inc 0))\n  ([end]\n   (my-range 0 end))\n  ([start end]\n   (if (= start end)\n     nil\n     (lazy-seq (cons start (my-range (inc start) end))))))","user":"594783bee4b07ddc2dafada1"},{"code":"(fn [start end]\n   (let [total (- end start) result []]\n    (loop [total total result []]\n     (if (pos? total)\n      (recur (dec total) \n             (conj result \n                   (+ start (count result))\n             )\n      )\n      result)\n     )\n   )\n  )","problem":34,"user":"4e8b6f4d535d65386fec211e"},{"problem":34,"code":"(fn [minimum maximum]\n  (loop [x minimum\n         res []]\n    (if (< x maximum)\n      (recur (inc x) (conj res x))\n      res)))","user":"5ff61113e4b06df49cee1492"},{"code":"(fn asdf [s e]\n  (if (>= s e)\n      '()\n      (lazy-seq (conj (asdf (inc s) e) s))))","problem":34,"user":"4eca5391535d6d7199dd3704"},{"problem":34,"code":"(fn rnge [start stop] (if (= start stop) nil (cons start (rnge (+ start 1) stop))))","user":"564716e6e4b0284900eef616"},{"problem":34,"code":"(fn\n   [start end]\n   (let [diff (- end start)]\n        (take diff (iterate inc start))))","user":"59e48db0e4b08badc2a0c53e"},{"code":"(fn [start end]\n  (take-while #(> end %) (iterate inc start)))","problem":34,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"(fn [x y] (loop [start x\n       end y\n       result []]\n    (if (= start end)\n        result\n        (recur (inc start) end (conj result start)))))","problem":34,"user":"4daedd1eedd6309eace4d164"},{"problem":34,"code":"(fn r [start stop]\n  (if (< start stop)\n    (cons start (r (inc start) stop))))","user":"542789efe4b01498b1a71b25"},{"problem":34,"code":"(fn my-range [b e]\n  (loop [r []\n         i b]\n    (if (< i e)\n      (recur (conj r i) (inc i))\n      (seq r))))","user":"57addbcce4b0b8559636fca3"},{"problem":34,"code":"#(loop [xs [] x %1]\n   (if (>= x %2)\n     xs\n     (recur (conj xs x) (inc x))))","user":"560a7b46e4b05f002753defb"},{"code":"(fn [start stop] (take (java.lang.Math/abs (- start stop)) (iterate inc start)))","problem":34,"user":"50ccf729e4b0f7a459302aac"},{"code":"#(loop [i %1 acc []] (if (= %2 i) (seq acc) (recur (inc i) (conj acc i))))","problem":34,"user":"4ddbf54e535d02782fcbe9ff"},{"problem":34,"code":"(fn ints-between [x y]\n  (if (= x y)\n    []\n    (conj (ints-between x (dec y)) (dec y))))","user":"5fc61b45e4b06010e5ea651a"},{"problem":34,"code":"(fn r [x y] (if (>= x y) '() (conj (r (inc x) y) x)))","user":"55478ce2e4b0a04f7929954e"},{"code":"(fn [a b]\n (reverse\n (loop [start a,end b,col '()]\n   (if (= start end)\n        col\n        (recur (inc start) end (cons start col) )\n   )\n )\n )\n)","problem":34,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":34,"code":"(fn [x y]\n   (loop [x x\n          y y\n          xs '()]\n     (if (= x y)\n       (reverse xs)\n       (recur (+ x 1) y (conj xs x)))))","user":"5a8bc2a1e4b05369db4d24ef"},{"code":"#(take-while (fn [x] (< x %2)) (iterate inc %1))","problem":34,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":34,"code":"(fn [a b]                                                                                                                                                     \n  (loop [aa a                                                                                                                                                 \n         sum []]                                                                                                                                              \n    (cond                                                                                                                                                     \n      (>= aa b) sum                                                                                                                                           \n      (< aa b) (recur (inc aa) (conj sum aa)))))","user":"52a3c66ce4b04e0c58e87c04"},{"problem":34,"code":"(fn rango\n  [start end]\n  (loop [a start\n         b end\n         c ()]\n    (if (= b a)\n      (reverse c)\n      (recur (inc a) b (cons a c)))))","user":"57f814fbe4b0d3187e900911"},{"problem":34,"code":"(fn [a b]\n  (loop [l [], s a]\n    (if (< s b)\n      (recur (conj l s) (inc s))\n      l)))","user":"55e87696e4b0121d4835fd93"},{"problem":34,"code":"(fn [s e]\n  (loop [mlist []\n         mnext s]\n    (if (= mnext e) mlist (recur (conj mlist mnext) (inc mnext)))))","user":"5866b999e4b0f14aab7c886b"},{"problem":34,"code":"(fn [start end] \n  (let [times (- end start)]\n        (seq \n         (take times \n               (iterate inc start)))))","user":"555d4421e4b0a2eb076a39a8"},{"code":"(fn r [a b] (when (not= a b) (cons a (r (inc a) b))))","problem":34,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn [from to] \r\n       (take (- to from) (iterate inc from)))","problem":34,"user":"4deb529a535d08e6dec9fe04"},{"problem":34,"code":"(fn [start end]\n  (loop [n start\n         acc '()]\n    (if (= n end)\n      (reverse acc)\n      (recur (inc n) (conj acc n)))))","user":"58d4f44ee4b03c36ff7e594f"},{"problem":34,"code":"(fn [a x y] (if (= x y) a (recur (conj a x) (inc x) y))) []","user":"555b5ae4e4b0deb715856e4f"},{"problem":34,"code":"(fn ranger [s e]\n  (flatten\n  (if (> e s)\n    (conj (list (dec e)) (ranger s (dec e))))))","user":"52d885afe4b09f7907dd1398"},{"problem":34,"code":"(fn rir [acc a b] (if (< a b)\n                    (rir (conj acc a) (inc a) b)\n                    acc\n           )) []","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn [s f] (take (- f s) ((fn gen [i] ( cons i (lazy-seq(gen (inc i)))\n                                    )\n            ) s )\n          )\n)","problem":34,"user":"51cec7b1e4b0e42293a2255b"},{"code":"(fn [x1 x2]\n    (take (- x2 x1) (iterate inc x1)))","problem":34,"user":"5272ccf1e4b03e8d9a4a7450"},{"problem":34,"code":"(fn [l r] (take (- r l)\n           (iterate inc l)))","user":"57a9e274e4b0b8559636fc5d"},{"code":"(fn r [x y]\r\n  (when (< x y)\r\n    (cons x (r (inc x) y))))","problem":34,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":34,"code":"(fn myrange [a b]\n  (take (- b a) (iterate inc a)))","user":"5d929ceae4b0915913b1d412"},{"problem":34,"code":"(fn [from to]\n(take (- to from) (iterate inc from)))","user":"5e7d0bc9e4b085ba37836e2a"},{"problem":34,"code":"(fn my-range [l u]\n  ((fn go [a]\n     (when (< a u)\n       (cons a (go (inc a)))))\n   l))","user":"5488872ee4b0e286459a11d3"},{"code":"(fn myrange [low high]\n  (if (= low (- high 1))\n    (conj '() low)\n    (conj (myrange (+ 1 low) high) low)))","problem":34,"user":"52d6889ae4b09f7907dd1361"},{"problem":34,"code":"(fn my-range \n  ([s e] (my-range s e '())) \n  ([s e col] (cond \n    (<= e s) col\n    :else (let [x (dec e)] (my-range s x (cons x col)))\n  ))\n)","user":"6065755ee4b069485764ddcc"},{"code":"(fn r [a b] (when (< a b) (lazy-seq (cons a (r (inc a) b)))))","problem":34,"user":"509b89b3e4b03049c49bd678"},{"code":"#(loop [i (dec %2), ret ()] (if (< i %1) ret \n  (recur (dec i) (conj ret i) ) )\n )","problem":34,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [m n & acc]\n  (if (>= m n)\n    acc\n    (recur (inc m) n (concat acc (list m)))))","problem":34,"user":"5189a51ae4b0288ada3dbdad"},{"code":"(fn [start end] (for [x (iterate inc start) :while (< x end)] x))","problem":34,"user":"505345d9e4b0517ede0d0a06"},{"code":"#(for [a (iterate inc %1) :while (< a %2)] a)","problem":34,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn range2 [low high]\n  (if (= low high)\n    '()\n    (cons low (range2 (+ low 1) high))))","problem":34,"user":"4f559d2ce4b0a7574ea71808"},{"problem":34,"code":"#(loop [x %1 l []] (if (and (< x %2) (>= x %1)) (recur (+ x 1) (conj l x)) l))","user":"53f4c3d6e4b0db01ade6f9c5"},{"problem":34,"code":"#(loop [a %2 c '()]\n    (if (<= a %1)\n      c\n      (recur (- a 1) (conj c (- a 1)))))","user":"5b4a0ce3e4b02d533a91bc92"},{"problem":34,"code":"(fn getrange [from to] (take (- to from) (iterate inc from ) ) )","user":"5437eca1e4b032a45b86930d"},{"problem":34,"code":"(fn [f l]\n  (let [t (- l f)]\n  (take t (iterate inc f))))","user":"604a3daee4b02d28681c77f2"},{"code":"(fn myRange \n    ([x y z]\n        (if (= x y)\n            z\n        (myRange (inc x) y (concat z [x]))))\n    ([x y] (myRange x y [])))","problem":34,"user":"4f03b3fb535dcb61093f6b52"},{"code":"(fn [curr end & rng]\r\n  (let [rng (if (nil? rng) () (first rng))]\r\n    (if (= curr end)\r\n      (reverse rng)\r\n      (recur (inc curr) end (list (cons curr rng))))))","problem":34,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":34,"code":"(fn my-range\n  [lower upper]\n  (if (= lower (- upper 1))\n    (list lower)\n    (conj (my-range (inc lower) upper) lower)))","user":"55dfac5fe4b050e68259b3f9"},{"problem":34,"code":"#(loop [res [] from %1 to %2](if(= from to) res (recur (conj res from) (+ from 1) to)))","user":"5565d5e4e4b0c656e3ff181f"},{"code":"#(take-while (fn [x] (< x %2))\n             (iterate inc %))","problem":34,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn [x y]\n  (loop [i x l '[]]\n    (if (= i y)\n      l\n      (recur (inc i) (conj l i)))))","problem":34,"user":"4e6cf61a535de274dd8d818c"},{"code":"(fn myrange [from to]\n  (if (= from to)\n    nil\n    (cons from (lazy-seq (myrange (inc from) to)))))","problem":34,"user":"52cc582ae4b07d0d72b27362"},{"code":"(fn [a b]\n  (loop [xs '() n (dec b)]\n    (if (< n a)\n      xs\n      (recur (conj xs n) (dec n)))))","problem":34,"user":"4f3a979de4b0e243712b1f10"},{"problem":34,"code":"(fn my-range [x y] (if (= x (- y 1))\n                     (list x)\n                     (conj (my-range (+ x 1) y) x)))","user":"5606ea56e4b08b23635d317b"},{"problem":34,"code":"(fn  [min max] (loop [index min max (dec max) therange ()]\n                          (if (> index max) (reverse therange)\n                              (recur (inc index) max (conj therange index)))))","user":"554bc64ae4b0a04f79299598"},{"problem":34,"code":"(fn [x y]\n  (loop [a x\n         b y\n         acc []]\n    (if (= a b)\n      acc\n      (recur (inc a) b (conj acc a)))))","user":"5eb6561fe4b00a66d4a95233"},{"problem":34,"code":"(fn to-range [start end]\n  (loop [current (dec end), sequence '()]\n    (if (>= current start)\n      (recur (dec current) (conj sequence current))\n      sequence\n      )\n    )\n  )","user":"5aada061e4b073f17744257a"},{"problem":34,"code":"(fn [min max]\n  (loop [n min r ()]\n    (if (= n max)\n      (sort r)\n      (recur (inc n) (conj r n)))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [a b]\n  (loop [r [] n a]\n    (if (= n b) r (recur (conj r n) (inc n)))))","problem":34,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":34,"code":"(fn\n  [x y]\n  (loop [a x b y c []]\n         (if (= a b)\n           c\n           (recur (inc a) b (conj c a)))\n         ))","user":"59a9c22ae4b08cbb53654d75"},{"code":"(fn [start end] (loop [seq () st start ed end]\n  (if(= st ed)\n    (reverse seq)\n    (recur (cons st seq) (inc st) ed)\n  )\n  ))","problem":34,"user":"5003bb77e4b0678c553fc442"},{"problem":34,"code":"(fn [inizio fine] (loop [i inizio f fine acc []] (if (>= i f) acc (recur (inc i) f (conj acc i)))))","user":"54886239e4b0e286459a11d0"},{"problem":34,"code":"(fn [start end]\n  (loop [res '() n start]\n    (if (= n end)\n      res\n      (recur (concat res (list n)) (inc n)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn my-range [start end] (take (- end start) (cons start (lazy-seq (my-range (inc start) end)))))","problem":34,"user":"50b79c5fe4b0cf3e51c3046c"},{"code":"(fn mickey [start end]\n  (if (= start end)\n    []\n    (cons start (mickey (inc start) end))))","problem":34,"user":"5112bbdde4b0350614f07a7c"},{"code":"(fn [start end]\n  (for [x (iterate inc start)\n        :while (< x end)]\n    x))","problem":34,"user":"528b08efe4b0239c8a67ae8a"},{"code":"(fn rng [n m]\n    (cond\n        (>= n (dec m)) (list n)\n        :else\n            (cons n (rng (inc n) m))\n    ))","problem":34,"user":"4fbdcb87e4b081705acca30a"},{"problem":34,"code":"(fn my-range [b e] (if (< b e) (cons b (my-range (+ b 1) e))))","user":"554d48d3e4b00713264bd988"},{"problem":34,"code":"(fn [n m]\n  (loop [o (dec m) xs '()]\n    (if (< o n) xs\n      (recur \n       (dec o)\n       (cons o xs)\n      )\n    )\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":34,"code":"(fn [low high]\n  (loop [n (- high 1)\n         xs '()]\n    (if (< n low) xs \n        (recur (- n 1) (conj xs n)))))","user":"53d032ace4b00fb29b221306"},{"problem":34,"code":"(fn [s e] (loop [acc (list (dec e))]\n            (let [c (first acc)]\n              (if (<= c s)\n                acc\n                (recur (conj acc (dec c)))))))","user":"5406776fe4b0addc1aec66a0"},{"problem":34,"code":"(fn [s e]\n  (reverse (loop [i s l '()]\n             (if (>= i e)\n               l\n               (recur (inc i) (conj l i))))))","user":"5b85221ce4b047b03b2037c8"},{"code":"#(loop [number % ret []](if (= number %2) ret (recur (inc number)(conj ret number))))","problem":34,"user":"52dbfe84e4b09f7907dd13c9"},{"problem":34,"code":"(fn myRange [start end]\n   (if (= start end)\n     '()\n     (cons start (myRange (inc start) end)))\n   )","user":"58775496e4b01531a375ea9a"},{"problem":34,"code":"(fn [a b]\n  (loop [a1 a b1 b ls '() ]\n    (if (= a1 b1) (reverse ls) (recur (inc a1) b1 (cons a1 ls)))))","user":"57fc08d8e4b0d3187e900988"},{"code":"(fn [x y]\r\n  (loop [r [x], c (+ 1 x)]\r\n    (if (>= c y) r\r\n      (recur (conj r c) (+ 1 c)))))","problem":34,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":34,"code":"(fn [x, y] ((fn range-mine [start, end, container]\n              (\n                if (= start end)\n                (seq container)\n                (range-mine (inc start) end (conj container start))\n                )\n              ) x y []))","user":"5be909bae4b0f319e2d7ec6d"},{"code":"#(loop [x % z []] (if (< x %2) (recur (inc x) (conj z x)) z))","problem":34,"user":"5145832be4b0e8879607340a"},{"problem":34,"code":"(fn create-range [start end]\n    (if (>= start end)\n        '()\n        (cons start (create-range (+ start 1) end))))","user":"601004d6e4b074f607df66b2"},{"code":"(fn [from to]\n  (loop [curr from tmp []]\n    (if (= curr to)\n      (seq tmp)\n      (recur (inc curr) (conj tmp curr)))))","problem":34,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn qr [l h]\n  (if (= l (dec h)) l (flatten [l (qr (inc l) h)])))","problem":34,"user":"4f7e3b40e4b06e829148e1cc"},{"code":"#(loop [l [%1] i %1 j %2]\n  (if-not (> (dec j) (last l))\n      (seq l)\n     (recur (conj l (inc i)) (inc i) j)\n     )\n )","problem":34,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"#(loop [result [] start %1 end %2]\n    (if (= start end)\n        result\n        (recur (conj result start) (inc start) end)))","problem":34,"user":"4e4870d1535dc968683fc4bc"},{"problem":34,"code":"#(loop [acc '()\n        n (dec %2)]\n   (if (< n %1)\n     acc\n     (recur (cons n acc) (dec n))))","user":"5592dc6be4b0c79f6e1db935"},{"code":"#(take (- %2 %1) (iterate (fn [v] (inc v)) %1))","problem":34,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":34,"code":"(fn [a b] (for [x (iterate #(+ 1 %) a) :while (< x b)] x))","user":"5e2549c8e4b05b4b0151615f"},{"problem":34,"code":"(fn [s, e]\n  ((fn rng [sq, start, end]\n     (if (= start end)\n       sq\n       (rng (conj sq start) (inc start) end))) [] s e))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn r [a b]\n  (if (< a b) (cons a (lazy-seq (r (inc a) b)))))","problem":34,"user":"5013193ae4b0f26a0e3320ab"},{"code":"(fn r [i j]\n  (if (< i j)\n    (conj (r (+ i 1) j) i)))","problem":34,"user":"4ed6ac40535d10e5ff6f52e4"},{"code":"#(take (- %2 %1)  (iterate (partial + 1) %1))","problem":34,"user":"4ec53cef535d6d7199dd3686"},{"problem":34,"code":"(fn [s e]\n (take-while #(< % e) (iterate inc s)))","user":"5ebff55de4b00a66d4a95286"},{"problem":34,"code":"(fn range2\n  ([lb ub] (range2 lb ub lb '()))\n  ([lb ub counter result]\n   (if (= counter ub)\n     (reverse result)\n     (recur lb ub (+ counter 1) (conj result counter)))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":34,"code":"(fn [p q] (loop [i p r nil] (if (< i q) (recur (inc i) (cons i r)) (reverse r))))","user":"5385e633e4b06839e8705f08"},{"code":"(fn rng [x y] (loop [i x\n                       acc '()] (if (>= i y)\n                  (reverse acc)\n                  (recur (inc i) (conj acc i)))))","problem":34,"user":"4edfb618535d10e5ff6f5343"},{"problem":34,"code":"#(loop [a [] i %] (if (< i %2) (recur (conj a i) (inc i)) a))","user":"59638af5e4b066ee0a44b0cc"},{"code":"(fn rng [s f] (if (< s f) (cons s (rng (inc s) f)) '()))","problem":34,"user":"4dcc3281535d5973398f9291"},{"problem":34,"code":"#(loop [x %1 sq (list %1)]\n   (if (= x (- %2 1))\n       (reverse sq)\n       (recur (inc x)\n              (conj sq (+ x 1)))))","user":"55dfada4e4b050e68259b3fd"},{"problem":34,"code":"(fn[from to] (loop [result '() i from] (if (= i to) (into '() result) (recur (conj result i) (inc i)))))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":34,"code":"(fn [begin end]\n  (seq (loop [it  begin\n              res []]\n         (if (< it end)\n           (recur (inc it) (conj res it))\n           res))))","user":"543a8256e4b032a45b869327"},{"problem":34,"code":"(fn\n   [start end]\n   (loop [start start\n          end end\n          result []]\n     (if (>= start end)\n       result\n       (recur (inc start) end (conj result start)))))","user":"60631c2ee4b069485764ddbd"},{"problem":34,"code":"(fn f [lo hi]\n   (if (<= hi lo) '()\n     (cons lo (f (inc lo) hi)))\n   )","user":"60486e8ae4b02d28681c77db"},{"problem":34,"code":"#(loop [x %2\n         res '()]\n    (if (= x %1)\n      res\n      (recur (dec x) (cons (dec x) res))))","user":"5b2be9b1e4b025bcb146f2b0"},{"code":"(fn [lower upper]\n  (take-while #(< % upper) (iterate inc lower)))","problem":34,"user":"4eeaf88f535d93acb0a668a3"},{"problem":34,"code":"#(loop [x %1 l []] \n   (if (= x %2) \n     l \n     (recur (inc x) (conj l x))))","user":"5d84f5e6e4b0915913b1d38f"},{"code":"(fn [begin end]\n  (loop [accum []\n         c begin]\n         (if (= c end)\n             accum\n             (recur (conj accum c) (+ c 1)))))","problem":34,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [x y]\n  (take (- y x) (iterate #(+ % 1) x))\n)","problem":34,"user":"4e39c710535deb9a81d77f45"},{"code":"#(take (- %2 %1) (map first (iterate (fn [[cr mx]] (if (= cr mx) nil [(inc cr) mx])) [%1 %2])))","problem":34,"user":"4f826548e4b033992c121c08"},{"code":"(fn[x y] (loop [n x result []]\n    (if (< n y)\n      (recur (inc n) (conj result n))\n      result)))","problem":34,"user":"51d10b1fe4b067c36548635e"},{"code":"(fn [start end]\n  (take (- end start) (iterate inc start))\n  )","problem":34,"user":"5029f263e4b023940c84aa45"},{"problem":34,"code":"(fn [begin end]\n  (loop [i begin\n         xs []] \n    (if (< i end)\n      (recur (inc i) (conj xs i))\n      xs\n      )\n    )\n  )","user":"56fe665be4b08d47c97781af"},{"code":"#(take(- %2 %)(iterate inc %))","problem":34,"user":"4e6e3aac535d5021c1a89603"},{"problem":34,"code":"(fn [s e](take (- e s) (iterate inc s)))","user":"537bca8be4b06839e8705e71"},{"problem":34,"code":";(fn [start limit]\n;  (loop [result []\n;         current start]\n;    (if (< current limit)\n;      (recur (conj result current) (inc current))\n;      result)))\n\n(fn [start limit]\n  (take-while #(< % limit) (iterate inc start)))","user":"53838b9ee4b06839e8705ee1"},{"code":"(fn [a b]\n  (loop\n    [e (- b 1)\n     s '()]\n    (if (< e a)\n      s\n      (recur\n       (- e 1)\n       (conj s e)))))","problem":34,"user":"530d85dee4b08068f379eca8"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    ()\n    (cons start (my-range (inc start) end))))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"#(take (- %2 %)((fn nat[a] (cons a(lazy-seq(nat(inc a))))) %))","problem":34,"user":"531576b4e4b08068f379ed29"},{"problem":34,"code":"(fn [from to]\n  (loop [from from\n         to to\n         output []]\n    (if (= from to)\n      output\n      (recur (inc from) to (conj output from)))))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"#(loop [current %1 end %2 acc []]\n  (if (= current end)\n    acc\n    (recur (inc current) end (conj acc current))\n  )\n)","problem":34,"user":"4ec6c878535d6d7199dd36d5"},{"problem":34,"code":"(fn rng\n  [min max]\n  (loop [i min out []]\n    (if (< i max) (recur (+ i 1) (conj out i))\n      out)))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn x [i j]\r\n     (take (- j i) (iterate inc i)))","problem":34,"user":"4e9fde3c535d7eef3080729b"},{"code":"#(for [n (iterate inc %) :while (< n %2)] n)","problem":34,"user":"521679e9e4b0bf4bffd29cca"},{"problem":34,"code":"(fn [s e] (for [s (iterate inc s) :while (< s e)] s))","user":"4e72a717535d5021c1a89665"},{"problem":34,"code":"(fn [s e]\n  (loop [i s \n         a []]\n    (if (= i e) \n      a\n    \t(recur (inc i) (conj a i ))\n      )))","user":"583048d9e4b051871117c007"},{"code":"(fn build-range [mn mx] \n     (if (= mn mx)\n       '()\n       (lazy-seq\n         (cons mn (build-range (inc mn) mx)))))","problem":34,"user":"502ade49e4b0614b52996120"},{"code":"#(loop [minv %1 maxv %2 ret-list '()]\n  (if (= minv maxv) \n    ret-list\n    (recur (+ minv 1) maxv (concat ret-list [minv]))))","problem":34,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":34,"code":"(fn [lower upper]\n  (loop [acc '()\n         cur (dec upper)]\n    (if (<= lower cur)\n      (recur (conj acc cur)\n             (dec cur))\n      acc)))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":34,"code":"(fn [li re]\n  (loop [cur li\n         res []]\n    (if (= cur re)\n      res\n      (recur (+ cur 1) (conj res cur)))))","user":"52860baae4b0239c8a67ae09"},{"problem":34,"code":"(fn [left right]\n  (loop [l left ans nil]\n         (if (>= l right)\n           (reverse ans)\n           (recur (inc l) (conj ans l)))))","user":"5a962c09e4b0d174b936c765"},{"problem":34,"code":"#(loop [i %1\n        res []]\n   (if (< i %2)\n     (recur (inc i) (conj res i))\n     res))","user":"5527be83e4b0ffed3738f936"},{"problem":34,"code":"(fn [x1 x2] (loop [new [], i x1]\n                  (if (= i x2)\n                      new\n                    (recur (conj new i) (inc i)))))","user":"55c3c1b0e4b0e31453f6498c"},{"code":"(fn myrng [a b]\r\n  (loop [n a myseq nil]\r\n    (if (= n b)\r\n      (reverse myseq)\r\n      (recur (inc n) (cons n myseq)))))","problem":34,"user":"4fe1597fe4b0dd6cd5ce3633"},{"code":"(fn[s e]\n\t(loop [ls '() n s]\n\t\t(if(< n e)\n\t\t\t(recur (concat ls (list n)) (inc n))ls)))","problem":34,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [a b] \n  (loop [x a r []] \n    (if (< x b) \n      (recur (inc x) (conj r x))\n      r)))","problem":34,"user":"50fbf811e4b0d10d794c19f1"},{"problem":34,"code":"(fn r [from to]\n   (loop [current [] current-from from]\n    (if (>= current-from to)\n      current\n      (recur (conj current current-from) (inc current-from))\n    )\n   )\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn my-range [low high] \n  (if (= low high)\n    []\n    (cons low (my-range (inc low) high))))","problem":34,"user":"4f70183ee4b07046d9f4eff3"},{"problem":34,"code":"#(take-while \n  (partial > %2)\n  (iterate inc %1) \n )","user":"57c4e8dce4b05aa3c4741cd7"},{"problem":34,"code":"(fn solution\n  ([p r]\n   (solution p r []))\n  ([p r vec]\n   (if (>= p r)\n     vec\n     (recur (inc p) r (conj vec p) ))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"; #(loop [x %1 y %2 r []] \n;   (if (< x y)\n;     (recur (inc x) y (conj r x))\n;     r\n;   )\n; )\n\n#(take (- %2 %1) (iterate inc %1))","problem":34,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":34,"code":"#(take \n  (- %2 %1) \n  (iterate inc %1))","user":"55fe5dfae4b00f4cabc57650"},{"code":"(fn rng [start stop]\n  (cond\n   (= start stop) ()\n   :else (cons start (rng (inc start) stop))\n  )\n)","problem":34,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [i j] (map #(+ % (dec i))(reductions + (repeat (- j i) 1))))","problem":34,"user":"52394c03e4b0d705d026ef09"},{"problem":34,"code":"(fn [start limit]\n  (take (- limit start) (iterate inc start)))","user":"59644d2ae4b069c0a1a19764"},{"code":"(fn [start end]\n  (loop [n start\n         r []]\n    (if (= n end)\n      (seq r)\n      (recur (inc n) (conj r n)))))","problem":34,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn f [a b]\r\n  ((fn [a b s]\r\n    (if (= a b) \r\n      s\r\n      (recur (+ a 1) b (conj s a))\r\n    )\r\n   ) a b [])\r\n)","problem":34,"user":"4f245d77e4b0d66497709feb"},{"problem":34,"code":"(fn [s e]\n  (loop [i s rs []]\n    (if (>= i e)\n      rs\n      (recur (inc i) (concat rs [i]))\n    )))","user":"55316b8ae4b076ab5578f825"},{"problem":34,"code":"(fn ranges [a b]\n (take (- b a) (iterate inc a)))","user":"5d1cf523e4b02ea6f0fb6994"},{"code":"(fn rng [s e]\n  (when (< s e)\n    (conj (rng (+ 1 s) e) s)))","problem":34,"user":"502ed81ee4b06efe12e8cc7b"},{"problem":34,"code":"#(loop [res '(), i %1, start %1, end %2]\n   (if (= i end)\n     (reverse res)\n     (recur (cons i res) (inc i) start end)\n   )\n )","user":"5d73530ce4b02e6b30c93514"},{"problem":34,"code":"(fn range_ [start end]\n  (if (not= start end)\n    (cons start (range_ (+ start 1) end))))","user":"58e980dfe4b056aecfd47d0b"},{"problem":34,"code":"(fn [min-int max-int] (loop [accList '()\n                              accNum (dec max-int)]\n                        (if (< accNum min-int)\n                          accList\n                          (recur (cons accNum accList) (dec accNum)))))","user":"595fd77ce4b066ee0a44b06f"},{"problem":34,"code":"#(loop [a %1 b[]] (if (< a %2) (recur (inc a)(conj b a)) b))","user":"6045e761e4b02d28681c77bb"},{"problem":34,"code":"; Get the range size by just subtracting the inputs, then just inc from the first that many times.\n; iterate and take make this very simple. \n\n#(take (- %2 %1) (iterate inc %1))","user":"56092852e4b0053d1b86c7d9"},{"problem":34,"code":"#(loop [n1 %1 n2 %2 acc '()]\n   (if (= n1 n2)\n     acc\n     (recur (inc n1) n2 (concat acc (list n1)))))","user":"5dcbd629e4b02b31cc3da3bd"},{"problem":34,"code":"#(reverse \n  (loop [counter %1 res '()] \n    (if (= counter %2) \n      res \n      (recur (inc counter) (conj res counter))\n    )\n  )\n)","user":"57ea79d9e4b0bfb2137f5b4f"},{"problem":34,"code":"(fn my-range\n  [from to]\n  ((fn [from to so-far]\n     (if (>= from to)\n       so-far\n       (recur from (dec to) (cons (dec to) so-far))))\n   from to '()))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn rag [start end]\n  (loop [s start \n         result '()]\n  (if (= s end)\n    (reverse result)\n    (recur (inc s) (conj result s))\n    ))\n  )","problem":34,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":34,"code":"(fn [a b] (loop [a a acc []] (if (>= a b) acc (recur (+ a 1) (conj acc a)))))","user":"5601a32ee4b04bb52996e193"},{"problem":34,"code":"(fn my-range [start stop]\n  (loop [i start\n         coll (vector)]\n    (if (< i stop)\n      (recur (inc i) (conj coll i))\n      coll)))","user":"55b42706e4b01b9910ae297b"},{"code":"(fn create-list [x y]\n  (when (< x y)\n    (cons x (create-list (inc x) y)))\n)","problem":34,"user":"4e8a6bb0535d65386fec210b"},{"problem":34,"code":"(fn rejngigi [p z]\n  (if (< p z) (conj (rejngigi (inc p) z) p) '()))","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn my-range [beg end]\n  (if (= beg end)\n    '()\n    (conj (my-range (inc beg) end) beg)))","problem":34,"user":"529a73bde4b02ebb4ef75096"},{"problem":34,"code":"(fn [lo hi]\n\t(loop [c lo cur '()]\n\t\t(if (= c hi)\n\t\t\t(reverse cur)\n\t\t\t(recur (inc c)  (conj cur c)))))","user":"5522a795e4b0882d96d091a7"},{"code":"(fn [x y]\n  (reverse\n    (loop [a x b y lst '()]\n      (if (= a b)\n        lst\n        (recur (inc a) b (conj lst a))))))","problem":34,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn c-range [f l]\n  (if (= f l)\n    []\n    (cons f (c-range (inc f) l))))","problem":34,"user":"51ac6360e4b09397d510976c"},{"problem":34,"code":"(fn ra [x n]\n  (loop [res '()\n         in x]\n    (if (= in n)\n      (reverse res)\n      (recur (cons in res)(inc in)))))","user":"5c9d0a0be4b048ec896c5afc"},{"problem":34,"code":"(fn [start end] \n  (loop [start start\n    \tacc []]\n    (if (= start end)\n      (seq acc)\n      (recur (inc start) (conj acc start)))))","user":"4ea00469535d7eef3080729d"},{"problem":34,"code":"(fn r [b e]\n  (lazy-seq\n   (when (< b e)\n     (cons b (r (inc b) e)))))","user":"53ea5307e4b036ad0777e4e2"},{"problem":34,"code":"(fn[x y] (loop[res '()\n                cnt x]\n              (if (= cnt y)\n                  (reverse res)\n                  (recur (cons cnt res) (inc cnt)))))","user":"5f727d2fe4b02876ed9fd08f"},{"code":"(fn [start end]\n  (loop [member start rng []]\n    (if (< member end)\n      (recur (inc member) (conj rng member))\n      rng)))","problem":34,"user":"525a643be4b0cb4875a45cf1"},{"problem":34,"code":"(fn [x y]\n   (loop [i x\n          result []]\n     (if (= i y)\n       result\n       (recur\n         (inc i)\n         (conj result i)))))","user":"56d3bc2de4b0ea9b8538f7b0"},{"code":"(fn [l r] (take-while #(< % r) (iterate #(+ % 1) l)))","problem":34,"user":"4e0e0529535d04ed9115e7b9"},{"problem":34,"code":"(fn r [lo hi]\n  (if (= lo hi)\n    nil\n    (cons lo (r (inc lo) hi))))","user":"54485749e4b032a45b8693c7"},{"code":"(fn [l u]\n  (take-while\n    #(< % u)\n    (iterate inc l)))","problem":34,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":34,"code":"(fn   \n  [b e]\n  (loop [st b, res '()]\n   \t(if (= st e) \n      res\n      (recur (inc st) (concat res (list st))))))","user":"5e79fcb9e4b085ba37836e08"},{"problem":34,"code":"(fn [a b]\n  (loop [x a\n         xs []]\n    (if-not (< x b)\n      xs\n      (recur (inc x) (conj xs x)))))","user":"5adf5f9be4b0837691e92c33"},{"code":"(fn [beg stp]\n      (loop [lst '() cnt beg]\n          (if (< cnt stp)\n              (recur (concat lst [cnt]) (inc cnt))\n              (do (println beg stp cnt)\n                  lst))))","problem":34,"user":"4ef5c847535dced4c769f249"},{"problem":34,"code":"(fn [a b]\n  (loop [i 0 l '()]\n    (if (= i (- b a))\n      (reverse l)\n      (recur (inc i) (into l (list (+ a i))))))\n  \n  )","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":34,"code":"#(loop [lst []\n        start %1\n        end %2]\n   (if (< start end) \n     (recur (conj lst start) (inc start) end)\n     lst))","user":"5c3cd80fe4b0d62ef62d9faa"},{"code":"(fn t[begin end](\n    if (= begin (- end 1))\n    (list begin)\n    (cons begin (t (+ begin 1) end))\n))","problem":34,"user":"4f03c039535dcb61093f6b5e"},{"problem":34,"code":"(fn h [s e]\n  (loop [xx e\n         acc (list)]\n    (if (< (dec xx) s)\n      acc\n      (recur (dec xx) (conj acc (dec xx))))))","user":"605b49b7e4b079a07f8593f8"},{"problem":34,"code":"(fn foo [n m ] (when (< n m) (cons n (foo (+ n 1) m))))","user":"5457e5f1e4b01be26fd74613"},{"problem":34,"code":"(fn [mi ma]\n  (loop [x mi\n         y ma\n         res []]\n    (if (= x y)\n      res\n      (recur (inc x)\n             y\n             (into res (vector x))))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn [from to]\n  (last\n    (take (- to from)\n          (iterate\n            (fn [s]\n              (conj s (dec (first s))))\n            (list (dec to))))))","problem":34,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn [a b] \n  (loop [l [] c (dec b)]\n    (if (< c a)\n      l\n      (recur (cons c l) (dec c)))))","problem":34,"user":"50112acee4b0d82cfac69f4c"},{"code":"#(loop [f %1 t %2 r []] (if (< f t) (recur (inc f) t (conj r f)) r))","problem":34,"user":"5262d2d0e4b03e8d9a4a709a"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [i start\n         result []]\n    \t(if (>= i end)\n    \t\tresult\n    \t\t(recur (inc i) (conj result i))))\n  )","user":"54021f13e4b0df28a13c62cc"},{"problem":34,"code":"(fn my_range [from to]\n  (loop [coll '() prev to]\n    (let [n (dec prev)]\n      (if (< n from)\n        coll\n        (recur (conj coll n) n)))))","user":"591610d4e4b09b4ee5954b7e"},{"problem":34,"code":"(fn foo [start end]\n  (when (< start end)\n    (cons start (foo (inc start) end))))","user":"58fe460de4b0438e51c2cfcc"},{"problem":34,"code":"(fn [a b]\n  (loop [curr (inc a), result [a]]\n    (if-not (< curr b)\n      result\n      (recur (inc curr) (conj result curr))\n      )\n    ))","user":"50523848e4b0a561d07d8f1a"},{"code":"(fn [start stop]\n    (take (- stop start) (iterate inc start)))","problem":34,"user":"4e89e939535d3e98b8023287"},{"problem":34,"code":"(fn [f r] (take (- r f) (iterate inc f)))","user":"54f773bfe4b01ecee9d8881f"},{"problem":34,"code":"#(loop [current %1\n        end %2\n        output []]\n   (if (= current end)\n     output\n     (recur (inc current) end (conj output current))))","user":"5130c26fe4b08c712d3fae3a"},{"problem":34,"code":"(fn [first last]\n  (loop [fval first rseq []]\n    (if (>= fval last) rseq\n      (recur (inc fval) (conj rseq fval)))))","user":"56fbcc1fe4b07572ad1a88d5"},{"problem":34,"code":"(fn int-range [x,y] (if (= x y) [] (concat [x] (int-range (inc x) y))))","user":"55204412e4b08d5046aa8a5f"},{"code":"(fn [l h]\n  (loop [a [] l l]\n    (if (= l h) a (recur (conj a l) (inc l)))))","problem":34,"user":"503a234de4b088a6a14ca76d"},{"problem":34,"code":"(fn [lower upper]\n  (loop [current lower lst []]\n    (if (= current upper)\n      lst\n      (recur (inc current) (conj lst current)))))","user":"4ec7e048535d6d7199dd36ea"},{"problem":34,"code":"#(loop [start %1\n        result []]\n   (if (>= start %2)\n     result\n     (recur (inc start) (into result [start]))))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":34,"code":"(fn[n m] (take (- m n) (iterate inc n)))","user":"55950c5fe4b0c79f6e1db95e"},{"code":"(fn f [from, to]\r\n  (if (= from to)\r\n    '()\r\n    (cons from (f (inc from) to))\r\n  )\r\n)","problem":34,"user":"5043a536e4b034ff00315d24"},{"code":"(fn rng [x y]\n  (if (= x y) \n    '()\n    (conj (rng (+ x 1) y) x)\n  )\n)","problem":34,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [low high]\n  (loop [high (- high 1)\n         acc '()]\n    (if (> low high) acc\n      (recur (- high 1) (cons high acc)))))","problem":34,"user":"50b19a91e4b03ea880433552"},{"problem":34,"code":"(fn range' [from to]\n  (if (= from to)\n    '()\n    (cons from (range' (inc from) to))))","user":"5d0e9931e4b0cc9c91588258"},{"problem":34,"code":"(fn rang [min max]\n    (->> (loop [x   min\n                acc []]\n           (if (< x max)\n             (recur (inc x) (conj acc x))\n             acc))\n        (into '())\n        reverse))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":34,"code":"(fn [start end]\n  (loop [acc [], v start]\n    (if (= v end)\n      acc\n      (recur (conj acc v) (+ 1 v)))))","user":"5a6bf911e4b0512ff01cda4c"},{"problem":34,"code":"(fn range-1 [m n]\n  (if (= m n) ()\n  (cons m (range-1 (+ m 1) n))))","user":"58edaa3be4b056aecfd47d89"},{"code":"(fn [x y]\n  (loop [cur x stop y acc '()]\n    (if \n      (= cur stop) (reverse acc)\n      (recur (inc cur) stop (cons cur acc)))))","problem":34,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":34,"code":"(fn [start end]\n    (loop [start start end (- end 1) vect []]\n      (if-not (< end start)\n        (recur start (- end 1) (cons end vect))\n        vect\n      )\n    )\n  )","user":"5726adf8e4b0c5bde472c12b"},{"problem":34,"code":"(fn [start end] (loop [i start acc []] (if (< i end)(recur (inc i) (conj acc i)) (list* acc)) ))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":34,"code":"(fn [start end]\n  (loop [acc (dec end)  \n         result '()]\n    (if (< acc start)\n      result               \n      (recur (dec acc) (conj result acc)))))","user":"4f0f7339535d0136e6c2233e"},{"code":"(fn [start end]\n  \n  (loop [start start end end col []]\n    (if (= start end)\n      col\n      (recur (inc start) end (conj col start)))))","problem":34,"user":"518d1b5be4b070277754617b"},{"problem":34,"code":"(fn _range_\n  [start end]\n  (if (< end start)\n    '()\n    (loop [acc [] n start]\n      (if (< n end)\n        (recur (conj acc n) (inc n))\n        acc))))","user":"5e7af7ffe4b085ba37836e0f"},{"code":"(fn [begin end]\n  (take (- end begin) (iterate #(inc %1) begin)))","problem":34,"user":"4e40529b535dc968683fc49a"},{"code":"(fn [a b]\n  (reduce \n   (fn [x y] \n     (conj x (inc (last x)))) [a]\n   (take (dec (- b a)) (repeat a))))","problem":34,"user":"4ff9a200e4b0678c553fc3ab"},{"problem":34,"code":"(fn \n  [a b]\n  (loop [start a\n         end b\n         acc '()]\n    (if (= start end)\n      acc\n      (recur (inc start) end (concat acc (vector start))))))","user":"5391ab43e4b0b51d73faaea6"},{"code":"(fn [from to] (let [my-range #(reduce (fn [as a] (conj as (+ (last as) 1))) [0] (take % (repeat 0)))] (map #(+ from %) (my-range (- (- to 1) from))) ))","problem":34,"user":"50d8f4b6e4b01f0871336e74"},{"code":"#(loop [st %1 end %2 crt %1 out()]\n    (if (= crt end)\n      (reverse out)\n      (recur st end (inc crt) (conj out crt))))","problem":34,"user":"4fb5033ce4b081705acca2b5"},{"code":"#(take (- %2 %) (reductions + % (repeat 1)))","problem":34,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":34,"code":"(fn my-range [start end]\n  (let [ct (- end start)]\n    (take ct (iterate inc start))))","user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn [i j]\n  (take (- j i) (iterate inc i)))","problem":34,"user":"507db411e4b03c76e5499e06"},{"code":"#(take (- %2 %1) (iterate (fn [a] (inc a)) %1))","problem":34,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":34,"code":"(fn [start end]\n  (loop [curr start result []]\n    (if (= curr end)\n      result\n      (recur (inc curr) (conj result curr)))))","user":"56351709e4b0bfe05bf117c2"},{"code":"(fn [a b]\n  (->> (iterate inc a)\n       (take-while #(< % b))))","problem":34,"user":"4e8ccd16535d65386fec212e"},{"code":"(fn r [n e]\r\n  (when (< n e)\r\n        (cons n (r (inc n) e))))","problem":34,"user":"4f3543eee4b0e243712b1ebd"},{"problem":34,"code":"(fn [fst, snd] (take (- snd fst) (iterate inc fst)))","user":"591cc30be4b09b4ee5954c0a"},{"code":"(fn [x y] (  reverse (loop [cnt x acc []] (if (= cnt  y)             acc\n          (recur (inc cnt) (cons cnt acc))))))","problem":34,"user":"4f32135ae4b0d6649770a08e"},{"problem":34,"code":"(fn my-range [begin end]\n    (loop [i begin seq []]\n      (if (< i end)\n        (recur (inc i) (conj seq i))\n        seq)))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn [from to]\n    (loop\n        [seq []\n         i from]\n      (if (= i to)\n        seq\n        (recur (conj seq i) (+ i 1)))\n      ))","problem":34,"user":"4e6dfe57535d5021c1a895fc"},{"problem":34,"code":"(fn r [s e] (when (> e s) (cons s (r (inc s) e))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":34,"code":"(fn [start endPlusOne] (take (- endPlusOne start) (iterate inc start)))","user":"5227eacee4b0186687e23a5e"},{"problem":34,"code":"(fn me [start end]\n  (if (= end start)\n    '()\n    (cons start (me (+ start 1) end))\n    ))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [s e] (take (- e s) (iterate #(inc %) s)))","problem":34,"user":"4ed0d65f535d44c135fd68c6"},{"problem":34,"code":"(fn [a b]\n  (take (- b a) (iterate inc a)) )","user":"551ee974e4b08d5046aa8a50"},{"problem":34,"code":"(fn [x1 x2]\n\t(loop [x x1 v []]\n\t\t(if (>= x x2)\n\t\t\t(seq v)\n\t\t\t(recur (inc x) (conj v x)))))","user":"5ca04cc3e4b048ec896c5b69"},{"code":"(fn [s e]\n  (let [f (fn [s e r]\n            (if (>= s e)\n                r\n                (recur (inc s) e (conj r s))))]\n    (f s e [])))","problem":34,"user":"5063fe48e4b075d771da6f9e"},{"problem":34,"code":"(fn my-range\n  ([a b] (my-range a (dec b) nil))\n  ([a b acc] (if (> a b) acc (recur a (dec b) (cons b acc)))))","user":"5bc09ebae4b07a9b28b10005"},{"code":"(fn rng [from to]\n  (if (= from to)\n  '()\n  (cons from (rng (+ from 1) to))))","problem":34,"user":"4f04256d535dcb61093f6ba7"},{"problem":34,"code":"(fn myRange[l, u]\n            (if (= (- u l) 1)\n              (list l)\n              (cons l (myRange (inc l), u))\n              )\n            )","user":"5fc241c1e4b0edf42a5593d1"},{"problem":34,"code":"#((fn rng [s n r]\n    (if (< s n)\n      (rng (inc s) n (conj r s))\n      r)) %1 %2 [])","user":"57de5f0ee4b0bd073c202450"},{"problem":34,"code":"(fn [start finish]\n  (take (- finish start) (iterate inc start)))","user":"5a932f63e4b0d174b936c71b"},{"code":"(fn[a b] \n      (if (>= a b) \n        '() \n        (let[diff (- b a)] \n          (take diff \n                ((fn _nx_[i] (lazy-seq (cons i (_nx_ (inc i))))) a)))))","problem":34,"user":"52e68e61e4b09f7907dd1479"},{"problem":34,"code":"#(loop [ x %2 y '()] (if (= x %1) y (recur (dec x) (conj y (dec x)) ) ) )","user":"5da98129e4b000c986472c33"},{"problem":34,"code":"(fn [begin end]\n  (loop [acc '()\n         cnt (dec end)]\n    (if (< cnt begin)\n      acc\n      (recur (conj acc cnt) (dec cnt)))))","user":"58aa3f02e4b01a0c0b23297d"},{"code":"(fn r[x y] (if (< x y) (conj (r x (dec y)) (dec y)) []))","problem":34,"user":"4f1fd734535d64f6031464a5"},{"problem":34,"code":"#(loop [idx % rs '()]\n   (if (= idx %2)\n     (sort rs)\n     (recur (inc idx) (conj rs idx) )\n   )\n   )","user":"56cefadee4b0ea9b8538f763"},{"code":"(fn ran [s e] (if (= s (- e 1)) [s] (cons s (ran (+ s 1) e))))","problem":34,"user":"505dcfc8e4b0e6aca564be0d"},{"code":"(fn r [a b]\n  (if (= a b)\n    []\n    (cons a (r (inc a) b))))","problem":34,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn [n l]\n    (take (- l n)\n      ((fn lazy-fib [a]\n        (cons a\n          (lazy-seq\n            (lazy-fib (+ a 1)))))\n      n)))","problem":34,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [s e] (loop [n s, a []]\n            (if (< n e)\n              (recur (inc n) (conj a n))\n              a\n            )))","problem":34,"user":"50d3ec8be4b030b634c368bb"},{"code":"#(take (- %2 %) \n       (iterate inc %))","problem":34,"user":"514afd1be4b0bd81940b86c6"},{"problem":34,"code":"(fn [a b] (loop [i a, res []] (if (>= i b) res (recur (inc i) (conj res i)))))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn myrange [n0 n1]\n  (cond (>= n0 n1) '()\n        true (cons n0 (myrange (+ n0 1) n1))))","problem":34,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [start end]\n  (reverse\n   (loop [i start result nil]\n     (if (>= i end) result\n         (recur (inc i) (conj result i))))))","problem":34,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":34,"code":"(fn [start end]\n  (loop [pos start\n         acc []]\n    (if (= pos end)\n      acc\n      (recur (inc pos) (conj acc pos)))))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":34,"code":";; #(take (- %2 %1) ((fn my-range [start] (cons start (lazy-seq (my-range (inc start))))) %1))\n(fn [start end] \n    (take (- end start) (iterate inc start)))","user":"56014f55e4b04bb52996e184"},{"problem":34,"code":"(fn [start end] (loop [accum () counter start] \n                  (if (= end counter ) (reverse accum) \n                    (recur (conj  accum counter ) (inc counter)))))","user":"52fdbf3ae4b047fd55837032"},{"code":"(fn rng [s e]\n  (if (= s e) '() \n    (cons s (rng (inc s) e))\n  )\n)","problem":34,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn\n  [min max]\n  (take (- max min) (iterate inc min)))","problem":34,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn [a b] \n  (loop [acc '() \n         y (dec b)]\n    (if (< y a)\n      acc\n      (recur (conj acc y) (dec y)))))","problem":34,"user":"531792d9e4b08068f379ed5e"},{"problem":34,"code":"(fn range* [start end]\n  (when (< start end)\n    (cons start (range* (inc start) end))))","user":"58896e5ce4b0f1effa3b773e"},{"problem":34,"code":"(fn [min max] (apply list (take (- max min) (iterate inc min))))","user":"5ce867fce4b0a17bb84e2baf"},{"problem":34,"code":"(fn [x y]\n  (loop [result [], i x]\n    (if (= i y)\n      result\n      (recur (conj result i) (inc i)))))","user":"54e3bd3fe4b024c67c0cf7e0"},{"code":"(fn [from to] (loop [fr from acc []] (if (= fr to) acc (recur (inc fr) (conj acc fr)))))","problem":34,"user":"52319066e4b0e2e8de81d1e9"},{"problem":34,"code":"#(loop [c %1 a []] (if (< c %2) (recur (inc c) (conj a c)) a))","user":"55fc8f1fe4b0f488688e0675"},{"problem":34,"code":"(fn [start stop] (loop [i start acc []] (if (= i stop) acc (recur (inc i) (conj acc i)))))","user":"5f2e6d97e4b033932238a677"},{"problem":34,"code":"#(loop [start %\n       end %2\n       l []]\n   (if (= start end)\n     (reverse l)\n  (recur (inc start) end (cons start l))))","user":"58248186e4b051871117bec6"},{"code":"( fn rng[c a b](\n              if (= a b) (reverse c) \n                (rng (cons a c) (inc a) b))) []","problem":34,"user":"52f426fce4b05e3f0be25f1e"},{"problem":34,"code":"#((fn [coll end]\n    (let [cur (first coll)]\n      (if (= cur end)\n        coll\n        (recur (cons (dec cur) coll) end))))\n  (list (dec %2))\n  %1)","user":"5a4993c0e4b05d388ecb6b71"},{"problem":34,"code":"#(take-while (partial > %2) \n             (iterate inc %1))","user":"5617a540e4b06b1bb2182a12"},{"problem":34,"code":"(fn [start end]\n  (letfn [(nums\n            ([] (nums start))\n            ([n] (lazy-cat [n] (nums (inc n)))))]\n    (take (- end start) (nums))))","user":"5ad4c3d2e4b0ea6055cfabe1"},{"code":"(fn my-range [x y] (if (= x y) [] (concat [x] (my-range (inc x) y))))","problem":34,"user":"5141bc82e4b02fd87f5064c5"},{"code":"(fn [a b]\n  (loop [ret [] x a]\n    (if (= x b)\n      ret\n      (recur (conj ret x) (inc x)))))","problem":34,"user":"4fb4f42ae4b081705acca2b4"},{"problem":34,"code":"(fn ran [x y] (take (- y x) (iterate inc x)))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":34,"code":"#(loop [a %1 b %2 s []]\n   (if (>= a b)\n     s\n     (recur (inc a) b (conj s a))\n    ))","user":"602abb59e4b0d5df2af2225e"},{"problem":34,"code":"(fn [start end]\n    (take (- end start)\n      (iterate inc start)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":34,"code":"#(loop[x %1 cl []] ( if(< x %2) (recur (inc x) (conj cl x)) cl))","user":"55129667e4b06e50f9beb1ac"},{"code":"(fn [i n] (take-while #(> n %) (iterate inc i)))","problem":34,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [x y] (loop [r [] s x] (if (< s y)(recur (conj r s) (inc s)) r)))","problem":34,"user":"50a4cbbee4b0344e360f3bc2"},{"problem":34,"code":"(fn my-range [start end]\n (take (- end start) (iterate inc start)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"#(take (- %2 %1) (iterate (fn [x] (+ x 1)) %1))","problem":34,"user":"503354c3e4b0c6c1199c710c"},{"problem":34,"code":"(fn [lo hi]\n  (loop [current (dec hi)\n         acc nil]\n    (if (= current (dec lo))\n      acc\n      (recur (dec current) (cons current acc)))))","user":"55d4dddde4b0e31453f64a7f"},{"code":"(fn [low hi]\n  (loop [n (dec hi)\n         result ()]\n    (if (<= low n)\n    \t(recur (dec n) (cons n result))\n      \tresult)))","problem":34,"user":"519b231ee4b0ac1b7dced6a2"},{"problem":34,"code":"(fn r\n  [a b]\n  (if (< a b)\n    (cons a (r (inc a) b))\n    '()))","user":"5576fee3e4b05c286339e078"},{"problem":34,"code":"(fn ImplementRange\n  ([leftRange rightRange]\n  (ImplementRange leftRange rightRange []))\n  ([leftRange rightRange collection]\n   (if (< leftRange rightRange)\n     (ImplementRange (inc leftRange) \n                     rightRange \n                     (conj collection leftRange))\n     (apply list collection))))","user":"5e16b820e4b0a047bd49f71f"},{"code":"(fn [start end]\n  (loop [st start en end acc []]\n    (if (= st en)\n      acc\n      (recur (inc st) en (conj acc st)))))","problem":34,"user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn [start stop] \r\n  (loop[v (list start)] \r\n    (if (< (last v) (dec stop))\r\n       (recur (concat  v  (list (inc (last v)))))\r\n    v)))","problem":34,"user":"4e8da0bf535d65386fec2138"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (cons start (my-range (+ 1 start) end))\n    '()))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn r [start stop] \n  (loop [cur start\n         result []]\n    (if (= cur stop) \n        result\n        (recur (inc cur) (conj result cur)))))","problem":34,"user":"50959df3e4b087f34d351ab4"},{"code":"(fn r [s e]\n  (if (= s e)\n    '()\n   (conj (r (+ s 1) e) s)))","problem":34,"user":"52d92f13e4b09f7907dd13a2"},{"problem":34,"code":"(fn [start end]\n\t(loop [x [start]]\n  \t\t(if (= (last x) (dec end))\n    \t\tx\n    \t\t(recur (conj x (inc (last x) ))))\n\t))","user":"54c74a78e4b045293a27f637"},{"code":"(fn [min max] \n      (loop [current (- max 1) result '()]\n      (if (< current min)\n        result\n        (recur (- current 1) \n               (conj result current)))))","problem":34,"user":"520f46f9e4b0101e4be6fcee"},{"problem":34,"code":"#(take (- %2 %) (iterate inc %)\n  \n  )","user":"5458474ce4b01be26fd7461b"},{"problem":34,"code":"#(loop [current-element %1\n        stop %2\n        built-list []]\n   (if (= current-element stop)\n     built-list\n     (recur \n      (inc current-element)\n      stop\n\t  (conj built-list current-element))))","user":"52dc55e2e4b09f7907dd13cd"},{"code":"(fn [s-init e] \n  (loop [s s-init, sofar []]\n    (if (= s e)\n      (seq sofar)\n      (recur (+ s 1) (conj sofar s))\n    )\n  )\n)","problem":34,"user":"4e89ddf9535d3e98b8023284"},{"code":"(fn [op ed] (loop [i (- ed 1)\n                    re '()]\n             (if (>= i op) (recur (dec i) (conj re i)) re)))","problem":34,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn r [from to] (take (- to from) (iterate inc from)))","problem":34,"user":"52d3f666e4b09f7907dd1327"},{"problem":34,"code":"(fn range2 [a b]\n  (let [n (- b a)]\n    (loop [x (dec b)\n           i 1\n           rez '()]\n      (if (> i n)\n          rez\n          (recur (dec x) (inc i) (cons x rez))))))","user":"5776903ee4b0979f8965163b"},{"problem":34,"code":"(fn [from to]\n  (let [mrange_t (fn [f t s]\n                   (if (= f t)\n                     (conj s t)\n                     (recur f (dec t) (conj s t))))]\n    (mrange_t from (dec to) (seq ()))))","user":"56019662e4b04bb52996e190"},{"code":"(fn [a b]\n  (reverse (loop [n a res '()]\n    (if (>= n b)\n        res\n        (recur (inc n) (conj res n))))))","problem":34,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn [a b]\n  (loop [x a r []]\n    (if (< x b)\n      (recur (inc x) (conj r x))\n      r)))","problem":34,"user":"51899891e4b0288ada3dbdab"},{"problem":34,"code":"(fn\n  [x y]\n  (loop [result '() i x ]\n    (if (< i y)\n      (recur (conj result i)(inc i))\n      (reverse result)\n    )\n  )\n)","user":"592dbbd5e4b072a2710fcf7f"},{"problem":34,"code":"(fn makerange [int1 int2]\n  (loop [index int1\n         result '()]\n    (if (= index int2)\n      (reverse result)\n      (recur (inc index) (conj result index)))))","user":"5761724de4b0994c1922fb89"},{"problem":34,"code":"(fn\n  [start end]\n  (seq (loop [acc [] count start]\n         (if (<= end count)\n           acc\n           (recur (conj acc count) (inc count))))))","user":"53a511aae4b0b62ce3005735"},{"problem":34,"code":"(fn [lo hi] \n  (take (- hi lo) (iterate inc lo)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":34,"code":"(fn [start end]\n  (loop [target-seq [start]\n         origin-count (- end start 1)]\n    (if (= origin-count 0)\n      (concat '() target-seq)\n      (recur (->> target-seq\n                  last\n                  inc\n                  (conj target-seq))\n             (dec origin-count)))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn r [m n]\n  (if (= m n) ()\n      (cons m (r (+ m 1) n))))","problem":34,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"(fn [a b] \n   (into '()\n   (loop [n a acc []]\n     (if (= n b) \n       acc\n       (recur (inc n) (cons n acc))))))","problem":34,"user":"4fff289ae4b0678c553fc3fd"},{"problem":34,"code":"(fn [start stop]\n  (loop [acc [start]]\n    (if (= (last acc) (dec stop))\n      (seq acc)\n      (recur (conj acc (inc (last acc)))))))","user":"55469eede4b0a04f79299542"},{"code":"(fn [start maxval] (take-while (partial > maxval) (iterate inc start)))","problem":34,"user":"52b2c9e9e4b0c58976d9acf7"},{"problem":34,"code":"(fn implement-range [a b]\n  (if (= a b)\n    '()\n    (cons a (implement-range (inc a) b))))","user":"58a58c50e4b01a0c0b232914"},{"problem":34,"code":"(fn [a b]\n (take (- b a) (iterate inc a)))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":34,"code":"#(map-indexed (fn [idx el] (+ el idx)) (repeat (- %2 %1) %1))","user":"57b1b8c8e4b0fbc9809a2756"},{"code":"(fn make-range [n1 n2]\n  (when (< n1 n2) ;only go when the minimum range is stricly less than the maximum range\n    (conj (make-range (inc n1) n2) n1))) ;do recursion on the two ranges when the minimum range is one higher, and then conj that together with the minimum range","problem":34,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn rang [a b]\n            (if-not (>= a b)\n              (conj (rang (inc a) b) a)))","problem":34,"user":"5284b506e4b0239c8a67addc"},{"problem":34,"code":"#((fn [lower curr rng]\n   (if (= curr lower)\n     (cons curr rng)\n     (recur lower (dec curr) (cons curr rng)))) %1 (dec %2) '())","user":"5579bc24e4b05c286339e098"},{"problem":34,"code":"(fn rang [from to]\n  (take (- to from) (iterate inc from)))","user":"53d70f3be4b0e771c302545f"},{"problem":34,"code":"(fn [start end] (loop [n start acc []]\n      (if (= n end )\n         acc\n      (recur (inc n) (conj acc n)))))","user":"52c03baee4b07a9af5792347"},{"problem":34,"code":"#(loop [x (- %2 1) acc '()]\n    (if (< x %1)\n      acc\n      (recur (dec x) (conj acc x))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn f [a b]\n   (if (= a b) '()\n     (cons a (f (inc a) b))))","problem":34,"user":"51ad0ab8e4b09397d510977b"},{"code":"(fn rng [start end]\n  (if (>= start end) '()\n    (cons start (rng (+ 1 start) end))))","problem":34,"user":"4e2d84bf535deb9a81d77f09"},{"code":"#(take (- %2 %) (iterate inc %))","problem":34,"user":"4dce6e41535d5973398f92a2"},{"problem":34,"code":"(fn  algo [mmin mmax]\n  (loop [\n         mmin mmin\n         mmax mmax\n         c (- mmin 1)\n         lst ()\n         ]\n\n\n    (if (> mmin c)\n      (recur mmin mmax (inc c) lst)\n      (if (>= c mmax)\n        (reverse lst)\n        (recur mmin mmax (inc c) (cons c lst))\n        )\n      )\n    )\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":34,"code":"(fn [x y] \n  (loop [z x li '()]\n    (if (< z y)\n      (recur (inc z) (conj li z))\n      (reverse li))))","user":"5d68fc2fe4b0db5d338d1606"},{"problem":34,"code":"(fn [x y]\n  (loop [n x\n         res []]\n    (if (= n y)\n      res\n      (recur (inc n) (conj res n)))\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn this\n  ([lo hi] (this lo hi []))\n  ([lo hi acc]\n    (if (= lo hi)\n      acc\n      (recur (inc lo) hi (conj acc lo)))))","problem":34,"user":"4f2e0369e4b0d6649770a064"},{"problem":34,"code":"#(loop [res [] at %1 stop %2]\n   (if (= at stop)\n     res\n     (recur (conj res at) (inc at) stop)))","user":"55d332f5e4b0e31453f64a5f"},{"code":"(fn [r1 r2]\n  (loop [r r1 s '()]\n    (if (= r r2)\n      s\n      (recur (inc r) (concat s (list r))))))","problem":34,"user":"506b18c8e4b0a2a5463de383"},{"problem":34,"code":"#(take-while (partial > %2) (iterate inc %) )","user":"57a8eba2e4b0a96607956225"},{"problem":34,"code":"#(->> %1 (iterate inc) (take (- %2 %1)))","user":"4f387c2ee4b0e243712b1edd"},{"problem":34,"code":"(fn r \n  [s e]\n  (if (= s (dec e))\n    (cons s '())\n    (cons s (r (inc s) e))\n    )\n  )","user":"589714cbe4b00487982d52b1"},{"problem":34,"code":"#(letfn [(f [n] (lazy-seq (cons n (f (inc n)))))] (take (Math/abs (- %1 %2)) (f %1)))","user":"5b59d176e4b02d533a91bd86"},{"code":"(fn ran [a b]\n  (if (= a b) \n    '()\n    (conj (ran (inc a) b) a)))","problem":34,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn sillyrange [prod start stop]\n  (if (= start stop)\n    prod\n    (recur (conj prod start) (inc start) stop))) []","problem":34,"user":"523605d1e4b05f3be1c7c8e2"},{"problem":34,"code":"(fn [start end] \n  (take-while \n   (partial > end)\n   (iterate inc start)))","user":"4df73d64535d04ed9115e775"},{"problem":34,"code":"(fn[low high]\n  (loop [low low, ret []]\n    (if (>= low high)\n      (if (seq ret) (seq ret) ())\n      (recur (inc low) (conj ret low)))))","user":"5e978fe5e4b0157ca96647d1"},{"code":"(fn rang[low high] \n  (if (= low high)\n    ()\n    (cons low (rang (+ low 1) high))))","problem":34,"user":"52f10094e4b05e3f0be25ee8"},{"problem":34,"code":"(fn [from to ]\n   (loop [s from c []]\n     (if (< s to)\n       (recur (inc s) (conj c s))\n       c)))","user":"54764cf1e4b0c51c1f4d72a4"},{"problem":34,"code":"(fn [lower upper]\n  (loop [l lower u upper rng []]\n    (if (< l u)\n      (recur (inc l) u (conj rng l))\n      rng)))","user":"58408643e4b089d5ab817deb"},{"code":"(fn r [begin end]\n  (if (>= begin end)\n    (list)\n  \t(conj (r (+ begin 1) end) begin)))","problem":34,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":34,"code":"(fn raynge [start end]\n  (lazy-seq\n    (if (= start (dec end))\n      [start]\n      (cons start (raynge (inc start) end)))))","user":"56f9982ce4b07572ad1a88b8"},{"code":"(fn rn [x y] (if (< x y) (cons x (rn (+ x 1) y)) []))","problem":34,"user":"535920b2e4b04ce2eb3ed294"},{"code":"#(take (- %2 %1) (iterate inc  %1))","problem":34,"user":"5376f0d0e4b06839e8705e2c"},{"code":"(fn [x y]\n  (loop [x x z '()]\n    (if (= x y)\n      z\n      (recur (inc x)\n             (concat z (list x))))))","problem":34,"user":"53664e3be4b0243289761e74"},{"problem":34,"code":"#(loop [coll [] from %1 to %2]\n   (if (>= from to)\n   \tcoll\n   \t(recur (conj coll from) (inc from) to)))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":34,"code":"(fn [x y]\n  (loop [i x\n         s '()]\n    (if (< i y)\n      (recur (inc i) (cons i s))\n      (reverse s))))","user":"5e066185e4b0978307768fa4"},{"code":"#(take (- %2 %1)(iterate inc %1))","problem":34,"user":"4f92709de4b0dcca54ed6cad"},{"problem":34,"code":"(fn f [x y] \n  (loop [current x, result '()]\n    (if (>= current y) \n      (reverse result)\n      (recur (inc current) (conj result current)))))","user":"5493d908e4b0b312c081ff52"},{"problem":34,"code":"#(loop [x % y %2 z []]\n   (if (< x y)\n     (recur (inc x) %2 (conj z x))\n     z))","user":"5b552e2ee4b02d533a91bd2e"},{"problem":34,"code":"(fn [start end] \n  (loop [start start acc []]\n    (if (< start end)\n      (recur (inc start) (conj acc start))\n      acc)))","user":"58a822e4e4b01a0c0b232950"},{"problem":34,"code":"(fn my-range [i f]\n  (loop [x i y f coll []]\n    (if (< x y)\n      (recur (inc x) y (conj coll x))\n      (apply list coll))))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":34,"code":"#(loop [it %1 final []]\n  (if (>= it %2)\n    final\n    (recur (inc it)\n           (conj final it))))","user":"57e929c0e4b0bfb2137f5b21"},{"code":"(fn own-range [start end] \n      (take (- end start) (iterate inc start)))","problem":34,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":34,"code":"(fn rng [start end]\n  (if (= start (dec end))\n    [start]\n    (concat [start] (rng (inc start) end))))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn [x y]               \n  (loop [n x                       \n         res []]                   \n    (if (< n y)                    \n      (recur (inc n) (conj res n)) \n      res)))","problem":34,"user":"52fff1a8e4b0d8b024fd370d"},{"problem":34,"code":"(fn [s f]\n  (take (- f s) (iterate inc s)))","user":"5a99b688e4b0d174b936c7a6"},{"code":"(fn [a b]\r\n  (sort\r\n    (loop [num1 a num2 b arr (list) ]\r\n      (if (= num1 num2)\r\n        arr\r\n        (recur (+ 1 num1) num2 (conj arr num1))))))","problem":34,"user":"4ef2d6c5535dced4c769f222"},{"problem":34,"code":"(fn ran\n  ([a b] (ran a b '()))\n  ([a b lst]\n  \t(if (= a b)\n      lst\n      (recur (inc a) b (concat lst (list a))))))","user":"5e6ff368e4b04a83ad7cd2a8"},{"problem":34,"code":"#((fn [agg] (if (= (inc (last agg)) %2) agg (recur (conj agg (inc (last agg)))))) [%1])","user":"55c13e73e4b01b9910ae2a2f"},{"problem":34,"code":"(fn rangey [low high]\n  (take (- high low) \n        (iterate inc low)))","user":"5a58bfd0e4b05d388ecb6c84"},{"code":"(fn [a b]\n  (loop [start a\n         end b\n         result ()]\n    (if (< start end)\n      (recur (inc start) end (conj result start))\n      (reverse result))))","problem":34,"user":"531e5c81e4b08068f379edba"},{"code":"(fn myrange [from to]\n  (lazy-seq\n    (if (< from to)\n       (conj (myrange (inc from) to) from)\n       nil\n    )\n  )\n)","problem":34,"user":"4f03154a535dcb61093f6a58"},{"problem":34,"code":"(fn\n  [fst lst]\n  (loop [result '()\n         curr fst]\n    (if (>= curr lst)\n      (reverse result)\n     (recur (conj result curr) (inc curr)))))","user":"5a6f2942e4b0512ff01cda78"},{"code":"(fn rng [lo hi]\n  (if (= lo hi) '()\n    (cons lo (rng (+ lo 1) hi))))","problem":34,"user":"504e48ace4b0f6ff3350c498"},{"code":"(fn [start end]\n  (loop [x start\n         newlist '()]\n    (if (= x end)\n      (reverse newlist)\n      (recur (inc x) (cons x newlist)))))","problem":34,"user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn\r\n  [start end]\r\n  (loop [x start result []]\r\n    (if (= x end)\r\n      (into () result)\r\n      (recur (inc x) (cons x result)))))","problem":34,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn my-range\n  ([end]\n     (my-range 0 end))\n  ([start end]\n     (when (< start end)\n       (cons start (lazy-seq (my-range (inc start) end))))))","problem":34,"user":"51937eb3e4b04df54c098022"},{"code":"(fn my-range [min max]\n  (loop [min min res []]\n    (if (>= min max)\n      (apply list res)\n      (recur (inc min) (conj res min)))))","problem":34,"user":"4fd769a1e4b0dab7d829f382"},{"problem":34,"code":"(fn my-range\n  [from to]\n  (if (< from (dec to))\n    (concat\n     [from]\n     (my-range (inc from) to))\n    (concat [from] [])))","user":"53d0c837e4b00fb29b22130b"},{"problem":34,"code":"(fn [start end]\n  (loop [acc [], x start]\n    (if-not (= x end)\n      (recur (conj acc x) (inc x))\n      acc)))","user":"56e5e4aee4b02e7e935eb6c0"},{"problem":34,"code":"(fn [min max]\n                 (loop [current min\n                        col '()]\n                   (if (>= current max)\n                     (reverse col)\n                     (recur (inc current) (cons current col) )))\n                 )","user":"5535e822e4b09218d5f44fb2"},{"problem":34,"code":"(fn\n  [start end]\n  (take (- end start) (iterate (partial + 1) start)))","user":"5a90395ce4b05369db4d254a"},{"code":"(fn rng[x y] (if (= x (- y 1)) (list x) (concat (list x) (rng (inc x) y))))","problem":34,"user":"53307a23e4b019098a6f8b5d"},{"code":"(fn [start end]\n  (loop [cur start list []]\n    (if (< cur end)\n      (recur (inc cur) (conj list cur))\n      list\n    )\n  )\n)","problem":34,"user":"4f039a8b535dcb61093f6b36"},{"code":"(fn [from to]\n  ((fn [from to acc]\n    (if (= from to)\n      acc\n      (recur (inc from) to (conj acc from))))\n   from to []))","problem":34,"user":"50119c07e4b028e9d38b393f"},{"problem":34,"code":"(fn iterate-range\n  [min max]\n  (take-while #(< % max) (iterate inc min))\n  )","user":"5f29837ee4b033932238a64f"},{"code":"(fn [start end]\n  (loop [result []\n         i start]\n    (if (= i end)\n      result\n      (recur (conj result i) (inc i)))))","problem":34,"user":"52be0263e4b07a9af579230e"},{"problem":34,"code":"#(for [x [-2 -1 0 1 2 3 4 5 6 7 8 ] :when (and (< x %2) (> x (- %1 1)))] x)","user":"56405959e4b08d4f616f5ee1"},{"problem":34,"code":"(fn [s e]\n  (loop [r []\n         i s]\n    (if (= e i)\n      r\n      (recur (conj r i)\n             (inc i)))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn rng [a b]\n  (if (= a b)\n    ()\n  \t(conj (rng (inc a) b) a)))","problem":34,"user":"5225a0f5e4b01819a2de430e"},{"problem":34,"code":"(fn [st end]\n  (loop [acc [] val st]\n    (if (= val end) acc\n      (recur (conj acc val) (inc val)))))","user":"52d38c51e4b099d49816f0c5"},{"problem":34,"code":"#(loop [current %1 result '()]\n   (if (< current %2)\n     (recur (inc current) (conj result current))\n     (reverse result)))","user":"5989ee61e4b021a7a535fed7"},{"code":";#(loop [start % end %2 acc []] (if (= start end) acc (recur (inc start) end (conj acc start))))\n\n#(take (- %2 %) (iterate inc %))","problem":34,"user":"50783762e4b0fc74642bff67"},{"problem":34,"code":"(fn range-s [min max]\n                            (loop [res '()  idx (dec max)]\n                              (if (< idx min)\n                                res\n                                (recur (conj res idx) (dec idx))))\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":34,"code":"(fn f [from upto]\n              {:pre (<= from upto)}\n              (loop [n from, acc []]\n                (if (< n upto)\n                  (recur (inc n) (conj acc n))\n                  acc)))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn new-range [a b]\r\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4ddb339c535d02782fcbe9f9"},{"problem":34,"code":"(fn [from to]\n  (loop [crnt from\n         res []]\n    (cond\n     (< crnt to) (recur (inc crnt) (conj res crnt))\n     :else res)))","user":"57a775bbe4b0a96607956214"},{"code":"(fn myrange [x y] (take (- y x) (iterate inc x)))","problem":34,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [start end]\n  (loop [a start\n         result []]\n    (if (< a end) (recur (inc a) (conj result a))\n      result)))","problem":34,"user":"4e80d71b535db62dc21a62b7"},{"problem":34,"code":"(fn [x y] (take (- (max y (- y)) x) (iterate inc x)))","user":"5785de31e4b0ebec4cfb74e4"},{"problem":34,"code":"#(loop [a %1\n        b []]\n   (if (= a %2)\n     b\n     (recur (inc a) (conj b a))))","user":"5f0a65dae4b09a3f05b71806"},{"problem":34,"code":"(fn my-range [from to]\n   ((fn help [current]\n     (if (= current to)\n       '()\n       (cons current\n             (help (+ current 1)))))\n    from))","user":"54d26316e4b0e8a36923e5f2"},{"problem":34,"code":"(fn [begin end]\n  ((fn inner [result current end]\n     (if (< current end)\n       (inner (conj result current)\n              (inc current)\n              end)\n       (reverse result)))\n   '() begin end))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn mk\n  ([x y] (mk [] x y))\n  ([xs x y]\n   (if (= x y)\n     xs\n     (mk (conj xs x) (inc x) y))))","problem":34,"user":"5140c505e4b049dea086df40"},{"code":"#(reductions + %1 (repeat (dec (- %2 %1)) 1))","problem":34,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn r [start end]\r\n  (if (>= start end)\r\n      '()\r\n      (cons start (r (+ start 1) end))))","problem":34,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":34,"code":"(fn [start upper]\n  (loop [i start out []]\n    (if (= i upper)\n      out\n      (recur (inc i) (conj out i)))))","user":"5604bcf7e4b08b23635d315a"},{"code":"(fn [start end]\n(loop [cur start\n       counter (- end start)\n       result '()]\n(if (zero? counter)\n  (reverse result)\n  (recur (inc cur) (dec counter) (cons cur result)))))","problem":34,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":34,"code":"(fn [mnm mxm]\n  (loop [res (list mnm) mn (+ 1 mnm)]\n    (if (= mn mxm)\n      res\n      (recur (concat res [mn]) (+ 1 mn)))))","user":"553b87abe4b09218d5f45003"},{"problem":34,"code":"(fn imprange [start end]\n  (loop [start start lst (list)]\n    (if (= start end)\n      (reverse lst)\n      (recur (inc start) (conj lst start))\n      )))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":34,"code":"#(loop [v %1 result []]\n   (if (< v %2)\n     (recur (inc v) (conj result v))\n     result))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn ir [a b]\n  (if (= a b) ()\n    (concat (list a) (ir (inc a) b))))","problem":34,"user":"526143b7e4b03e8d9a4a705a"},{"code":"(fn f [c a b] (if (< a (- b 1)) (f (conj c a) (+ a 1) b) (conj c a))) []","problem":34,"user":"51aeb1f4e4b09397d5109794"},{"problem":34,"code":"(fn [st ed]\n  (if (<= ed st)\n    '()\n    (loop [st st result (conj nil (dec ed))]\n      (if (= st (first result))\n        result\n        (recur st (conj result (dec (first result))))))))","user":"566a6e38e4b0a866af68969b"},{"problem":34,"code":"( fn [a b] (take-while #(< %1 b) (iterate inc a)  ))","user":"53d63e6ce4b0e771c3025454"},{"problem":34,"code":"(fn rnge [a b]\n  (cond\n   (< a b) (conj (rnge (inc a) b) a)\n   :else '()))","user":"59075e3be4b047aa04b19955"},{"problem":34,"code":"(fn [x y] (take (max (- x y) (- y x)) (iterate inc x)))","user":"5f32f69ae4b0574c87022c35"},{"code":"(fn mr [lower upper] (cond\n   (= lower upper) nil\n   :else (conj (mr (+ 1 lower) upper) lower)                    \n))","problem":34,"user":"53979a87e4b0b51d73faaef0"},{"code":"(fn [start, end] (map-indexed (fn [idx, it] (+ idx it))(repeat (- end start) start)))","problem":34,"user":"52485723e4b05ef8e38e63d2"},{"problem":34,"code":"(fn\n  [x y]\n  (loop\n    [a x\n     b y\n     c []]\n    (if ( = a b)\n      c\n      (recur (+ 1 a) b (conj c a))\n      )\n    )\n  )","user":"5e197f93e4b0dc9594008508"},{"code":"(fn foo \n  ([i c] (foo i c []))\n  ([i c r] (if (= i c) r (foo (+ 1 i) c (conj r i)))))","problem":34,"user":"4dbecb06535d020aff1edf6a"},{"problem":34,"code":"#(loop [i %1 coll []]\n          (if (< i %2)\n            (recur (inc i) (conj coll i))\n            coll\n            )\n          )","user":"5e259d05e4b05b4b01516169"},{"problem":34,"code":"#(loop [start %1\n        end %2\n        current start\n        integers []]\n   (if (= current end)\n     integers\n     (recur start\n            end\n            (inc current)\n            (conj integers current))))","user":"53c69ebce4b00fb29b22129c"},{"problem":34,"code":"(fn __ [s e] \n                (if (= s e)\n                  []\n                  (cons s (__ (inc s) e))\n                  ))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn [start upto]\n  (reverse (loop [result [] x start]\n    (if (= x upto)\n      result\n      (recur (cons x result) (inc x) )\n    ))))","problem":34,"user":"532db3e7e4b019098a6f8b3d"},{"code":"(fn [from to]\n  (loop [n from\n         xs []]\n    (if (< n to)\n      (recur (inc n) (conj xs n))\n      xs)))","problem":34,"user":"511442d0e4b0e9c109bb74d5"},{"problem":34,"code":"(fn my-range [start end]\n  (take (Math/abs (- start end)) (iterate inc start)))","user":"5f663bc0e4b02876ed9fd02d"},{"code":"(fn [a b]\n   (take (- b a)\n         (iterate inc a)))","problem":34,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn myrange                                   \n  [start stop]                                  \n  (if (= start stop)                            \n    '()                                         \n    (conj (myrange (inc start) stop) start)     \n    )                                           \n  )","problem":34,"user":"50573ed8e4b0012181721987"},{"problem":34,"code":"(fn\n  [a b]\n  (take (- b a) (iterate inc a)))","user":"5484143de4b0e286459a1197"},{"code":"#(for [x (iterate inc %1) :while (< x %2)] x)","problem":34,"user":"4f037bb5535dcb61093f6aec"},{"problem":34,"code":"(fn [n m]\n  (loop [n n, res []]\n    (if (= n m)\n      res\n      (recur (inc n) (conj res n)))))","user":"5a481e05e4b05d388ecb6b64"},{"problem":34,"code":"(fn [start end]\n  (loop [lst []\n         i start]\n    (if (= i end)\n      lst\n      (recur (conj lst i) (inc i))\n      )\n    )\n  )","user":"5f84f110e4b0375e81f54e79"},{"problem":34,"code":"(fn [start end]\n  (loop [x []\n         cur start]\n    (cond \n     (= cur end) x\n     :else (recur (conj x cur) (inc cur)))))","user":"602d5eade4b0d5df2af22279"},{"code":"(fn foo [x y] \n  (if (= x y) '()\n    (concat (list x) (foo (inc x) y))) )","problem":34,"user":"5078300de4b0fc74642bff66"},{"problem":34,"code":"(fn [x y]\n  (loop [c x r '()]\n    (if (= c y)\n      (reverse r)\n      (recur (inc c) (cons c r)))))","user":"566d71b1e4b0a866af6896ca"},{"code":"#((fn r [start end agg] \n    (if (= start end) \n      agg \n      (cons start (r (inc start) end agg))))\n        % %2 '())","problem":34,"user":"4f30896ce4b0d6649770a07b"},{"problem":34,"code":"(fn  [x1 x2]\n  (loop [x x1\n         final '()]\n    (if (= x x2)\n      (reverse final)\n      (recur (inc x) (conj final x)))))","user":"5de4f858e4b0948ae9d9ae09"},{"code":"(fn [x y]\n  (let [range' (fn [a b as]\n                 (if (= a b)\n                   as\n                   (recur (inc a) b (conj as a))))]\n    (range' x y [])))","problem":34,"user":"50ec4ed7e4b04edc33777046"},{"code":"(fn rng [s e] (when (< s e) (cons s (rng (inc s) e))))","problem":34,"user":"5197f674e4b068aa333628f6"},{"code":"(fn [from till]\n  (take-while #(< % till) (iterate inc from)))","problem":34,"user":"50901b2ee4b0ea685a20f774"},{"problem":34,"code":"(fn [start stop] (take (- stop start) (iterate #(inc %1) start)))","user":"5a9db513e4b0d174b936c7f0"},{"problem":34,"code":"(fn range* [start stop]\n  (apply list\n   (loop [acc []\n          i   start]\n     (if (>= i stop)\n       acc\n       (recur (conj acc i) (inc i))))))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":34,"code":"(fn [start end]\n  ((fn rng [start end ys]\n     (if (= start end)\n       (reverse ys)\n\n       (rng (inc start) end (conj ys start)))) start end '()))","user":"5e394c33e4b01d43a70e8dd1"},{"code":"(fn rng [a b]\n      (loop [a a b b acc []]\n        (if (>= a b)\n          acc\n          (recur (inc a) b (conj acc a)))\n        )\n      )","problem":34,"user":"51f81925e4b09be9c177e526"},{"problem":34,"code":"(fn myrange [fst snd](( fn inner [l f] (if (< (count l) (- snd fst)) (inner (conj l f) (+ f 1) ) l ) ) [] fst) )","user":"58622733e4b0f14aab7c8803"},{"problem":34,"code":"(fn implement-range [a b]\n  (take (- b a) (iterate inc a)))","user":"58171a9ae4b0c0e9c07b8387"},{"problem":34,"code":"(fn r [x y] (lazy-seq (cons x (if (< x (dec y)) (r (inc x) y)))))","user":"56baa68ce4b0f26550335947"},{"problem":34,"code":"(fn range* [a b]\n  (if (>= a b)\n    '()\n    (cons a\n          (range* (inc a)\n                  b))))","user":"5895477fe4b00487982d527c"},{"problem":34,"code":"(fn my-range [n1 n2]\n  (when (< n1 n2)\n    (lazy-seq (cons n1 (my-range (inc n1) n2)))))","user":"55f9c245e4b03cbcff9738ca"},{"problem":34,"code":"(fn [start end]\n  (loop [current (dec end)\n         res '()]\n    (if (< current start)\n      res\n      (recur (dec current) (conj res current)))))","user":"56c2c342e4b05cc29241ee85"},{"problem":34,"code":"(fn do-range [coll min max]\n  (if (< min max)\n    (do-range (conj coll min) (inc min) max)\n    coll)) []","user":"54d0cedde4b0e8a36923e5d2"},{"problem":34,"code":"#(loop [n (- %2 %1)\n        x %1\n        res []]\n   (if (zero? n)\n     res\n     (recur (dec n)\n            (inc x)\n            (conj res x))))","user":"52fe31d5e4b047fd55837038"},{"problem":34,"code":"#(loop [i %1 end %2 res []] (if (= i end) res (recur (inc i) end (conj res i)) ))","user":"52a90056e4b0c58976d9ac39"},{"code":"(fn [a b & c]\n  (if (= a b)\n    c\n    (recur (inc a) b (concat c (list a)))))","problem":34,"user":"4f03193e535dcb61093f6a61"},{"problem":34,"code":"(fn newRange [low high] (if (= low high) '() (concat (list low) (newRange (inc low) high))))","user":"573c813be4b0cd1946bd10c5"},{"problem":34,"code":"#(loop [n % c []]\n   (if (>= n %2)\n     c\n     (recur (inc n) (conj c n))))","user":"5562f08ae4b0c656e3ff17df"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [x] (inc x)) %1 ))","user":"55dd91c9e4b050e68259b3ca"},{"code":"#(loop [x % xs []] (if (< x %2) (recur (+ x 1) (conj xs x)) xs))","problem":34,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn genrng [start end] (if (= start end) '() (cons start (genrng (+ 1 start) end))))","problem":34,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":34,"code":"(fn [min max] (loop [result [] current min] \n                      (if (= max current)\n                        result\n                        (recur (conj result current)\n                               (inc current)\n                        )\n                      )\n                      \n                    )\n  )","user":"5480cce5e4b0e286459a115f"},{"code":"(fn [d f] (take (- f d) (iterate inc d)))","problem":34,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn [x y]\n  (loop [cur x new-seq []]\n    (if (< cur y)\n      (recur (+ 1 cur) (conj new-seq cur))\n      new-seq)))","problem":34,"user":"4ddabc33535d02782fcbe9f5"},{"code":"#(loop [j %1 l []] \r\n       (if (< j %2) \r\n             (recur (inc j) (conj l j) ) \r\n             l     \r\n       ) \r\n   )","problem":34,"user":"4f28d266e4b0d6649770a01c"},{"code":"(fn range2 [s e]\n  (when (< s e)\n    (conj (range2 (inc s) e) s)\n    )\n)","problem":34,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [start stop] (take-while #(< % stop) (iterate inc start)))","problem":34,"user":"4ec4ac86535dcc7ae8597d64"},{"code":"(fn \n  [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"51804bcbe4b04f45bde7d901"},{"code":"(fn myRange [x,y]\n  (if (= (inc x) y)\n      (list x)\n      (cons x (myRange (inc x) y))\n    )\n)","problem":34,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":34,"code":"(fn myrange [start end]\n  (if (>= start end)\n    (list)\n    (cons start (myrange (inc start) end))))","user":"5bcc304ce4b07a9b28b1010c"},{"problem":34,"code":"(fn [start end]\n  (map\n   (partial + start)\n   \n   (reduce\n  \t(fn [coll n]\n      (if (= (last coll) nil)\n        (list 0)\n    \t(concat coll (list (inc (last coll))))\n      )          \n    )\n    '()\n   \t(repeat (- end start) 1)\n   )\n  )\n)","user":"55f014ebe4b06e875b46ce1b"},{"problem":34,"code":"(fn implement-range \n  [inicio fin]\n  (take (- fin inicio) (iterate inc inicio)))","user":"57f8153de4b0d3187e900916"},{"problem":34,"code":"(fn [x1 y1] (loop [x x1 y y1 result []]\n    (if (< x y)\n      (recur (inc x) y (conj result x))\n      result)))","user":"5f45211ae4b0955706451fbc"},{"problem":34,"code":"(fn f [start end]\n  (loop [curr start\n         res []]\n    (if (<= end curr) res (recur (inc curr) (conj res curr)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn rng [start end] (if (= start end) '() (conj (rng (inc start) end) start)))","problem":34,"user":"4f036d6e535dcb61093f6ac0"},{"problem":34,"code":"(fn r [start stop]\n  (if (< start stop)\n\t(cons start\n          (lazy-seq (r (+ start 1) stop)))\n    '()))","user":"56521a26e4b0f9d632dd845f"},{"problem":34,"code":"(fn [a b] \n  (loop [lower a upper b col ()]\n  \t(if (= lower upper)\n      (reverse col)\n      (recur (inc lower) upper (conj col lower)))))","user":"608335a4e4b0736b099e42e3"},{"code":"(fn range' [begin end]\n  (loop [acc () n (dec end)]\n    (if (< n begin)\n      acc\n      (recur (conj acc n) (dec n))\n    )))","problem":34,"user":"50392c7ee4b088a6a14ca765"},{"problem":34,"code":"(fn r [a b]\n  (if (< a b)\n    (concat \n      (list a)\n      (r (+ a 1) b)\n    )\n  )\n \n)","user":"55bb7546e4b01b9910ae29e7"},{"code":"(fn [from to]\n  (loop [lst [] i from]\n    (if (< i to)\n      (recur (conj lst i) (inc i))\n      lst)))","problem":34,"user":"52c884a2e4b0c2d177d62136"},{"problem":34,"code":"(fn range-seq [x n]\n  (loop [i x\n         res []]\n    (if (= i n)\n        res\n        (recur (inc i) (conj res i)))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"problem":34,"code":"#(map + (repeat (- %2 %) (- % 1)) (iterate inc 1))","user":"55092319e4b06e50f9beb113"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (reduce\n   (fn [accum x] (concat accum (list (+ 1 (last accum)))))\n   (list a)\n   (repeat (- b a 1) 1)))","user":"5c222b7de4b07e362c230588"},{"problem":34,"code":"(fn [mn mx]\n   (loop [nw-seq [mn]\n          i (+ mn 1)]\n     (println \"i:\" i \", \" nw-seq)\n     (if-not (< i mx)\n       nw-seq\n       (recur (conj nw-seq i) (+ i 1)))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":34,"code":"(\n fn f [a b]\n (\n  cond (= a (dec b))\n   [a]\n  :else (concat [a] (f (inc a) b))\n )\n )","user":"5743e316e4b0c285004e8ab3"},{"code":"#(loop [n %1 result []]\r\n     (if (= n %2)\r\n       result\r\n       (recur (inc n) (concat result [n]))))","problem":34,"user":"4e70ed07535d5021c1a89643"},{"problem":34,"code":"(fn rng\n  \t[gte lt]\n\t(if (< gte lt)\n      \t(concat [gte] (rng (+ gte 1) lt))\n      \t[]))","user":"591addcee4b09b4ee5954be1"},{"problem":34,"code":"(fn boo [from to] (if (= from to) '() (cons from (boo (+ from 1) to))))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn ! [x y] (if (< x y)\n              (cons x (! (+ 1 x) y))\n              '()))","problem":34,"user":"5020d033e4b0cb6ebc0a42fa"},{"code":"(fn genRange [s e]\n   (cons s (when (< (+ 1 s) e) (lazy-seq (genRange (+ 1 s) e)))))","problem":34,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [start end]\n\t(loop [l '()\n\t\t     index start]\n\t\t(if (= index end) (sort l)\n\t\t  (recur \n\t\t\t  (conj l index)\n\t\t\t  (inc index)))))","problem":34,"user":"531dc21be4b08068f379edb1"},{"problem":34,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 4)) (quote (1 2 3))\n(and true (= arg2 2)) (quote (-2 -1 0 1))\n(and true (= arg2 8)) (quote (5 6 7))\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [n n1, result ()]\n    (if (< n n2)\n      (recur (inc n) (conj result n))\n      (reverse result))))","user":"56ae7589e4b03c432f187360"},{"problem":34,"code":"(fn [low high]\n      ((fn rnge\n         [lo hi result]\n        (if (= lo hi)  (reverse result)\n          (rnge (+ 1 lo) hi (conj result lo)))) low high '()))","user":"54cf1932e4b018d918be98c9"},{"problem":34,"code":"(fn r\n  ([e]\n   (r 0 e))\n  ([s e]\n   (loop [res [] x s]\n     (if (< x e)\n       (recur (conj res x) (inc x))\n       (apply list res)))))","user":"54055aa9e4b0addc1aec6665"},{"problem":34,"code":"(fn [start end]\n  (->> start\n    (iterate inc)\n    (take (- end start))))","user":"5a065388e4b01bb0ae8afdcb"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [res '()\n         i end]\n    (if (= i start) res\n      (recur (cons (dec i) res)\n             (dec i)))))","user":"5f2d6bc4e4b033932238a66e"},{"code":"(fn rng [start end]\n  (if (= start end)\n    ()\n    (conj (rng (+ start 1) end) start)))","problem":34,"user":"504ed350e4b069badc5a33d1"},{"code":"(fn [x y] (let [r (- y x)] (take r (iterate #(inc %) x))))","problem":34,"user":"4ff76effe4b0678c553fc390"},{"problem":34,"code":"(fn [f l]\n  (loop [n (- l 1) retval '()]\n    (if (= n (- f 1))\n      retval\n      (recur (dec n) (conj retval n)))))","user":"586d2f5be4b01531a375e98c"},{"problem":34,"code":"(fn [sx f]\n      (loop [cur (- f 1)\n             acc '()]\n        (if (> sx cur)\n          acc\n          (recur (- cur 1) (cons cur acc)))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":34,"code":"#(loop [l '()  i (- %2 1)] \n   (if (>= i %1) \n     (recur (conj l i) (dec i)) \n     l\n   )\n)","user":"56b3146ae4b0982f16b37e0f"},{"problem":34,"code":"(fn [start end]\n   (loop [current (dec end)\n          s '()]\n     (if (< current start)\n       s\n       (recur\n        (dec current)\n        (cons current s)))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn rng [a b]\n  (loop [i a, s []]\n    (if (< i b)\n      (recur (inc i) (conj s i))\n      s\n      )\n    )\n  )","problem":34,"user":"5228f870e4b0186687e23a98"},{"problem":34,"code":"(fn [start until]\n  (take-while #(< % until)\n              (iterate inc start)))","user":"5ff93da9e4b06df49cee14af"},{"code":"(fn [i j]\n  (loop [init (- j 1), s '()]\n    (if (> i init) s\n      (recur (dec init) (cons init s)))))","problem":34,"user":"527c036ee4b03e8d9a4a75a5"},{"code":"(fn myrange [start end] (loop [cur start acc '()] (if (= cur end) (reverse acc)\n                                                  (recur (inc cur) (conj acc cur)))))","problem":34,"user":"51c214bce4b0d204dbe2ca1c"},{"code":"(fn [lower upper]\n  (loop [l lower\n         acc []]\n    (if (= l upper) \n      (seq acc)\n      (recur (inc l) (conj acc l)))))","problem":34,"user":"515efd01e4b02c55805ea238"},{"code":"#(reductions (partial + 1) %1 (take (dec (- %2 %1)) (repeat 0)))","problem":34,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn range-it \n  ([start end] (range-it start end (vector start)))\n  ([start end s]\n  (if (= end (inc (last s)))\n    (seq s)\n\t(range-it start end (conj s (inc (last s)))))))","problem":34,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":34,"code":"(fn [low high] \n  (reverse (loop [l low h high out '()]\n    (if (= l h)\n      out\n      (recur (inc l) h (conj out l))))))","user":"58b997afe4b0888cdc949cd1"},{"code":"(fn [start end]\n  (loop [x start coll '()]\n    (if (>= x end)\n      (reverse coll)\n      (recur (inc x)(conj coll x)))))","problem":34,"user":"52d2f457e4b099d49816f0ba"},{"code":"(fn [i j]\n  (loop [x (- j 1) l '()]\n    (if (>= x i)\n      (recur (- x 1) (conj l x))\n      l))\n)","problem":34,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"code":"#(if (= %3 %2) %1 (\n  recur (cons (dec %3) %1) %2 (dec %3)\n)) '()","problem":34,"user":"50aca31fe4b071b89ef26230"},{"code":"(fn ranch[start end] \n     (loop[l [] n (dec end)]  \n       (if (>= n start)\n           (recur (cons n l) (dec n)) \n           l\n       )\n     )\n)","problem":34,"user":"4ebc3974535dfed6da9c6d7f"},{"problem":34,"code":"#(loop [result []\n        v %1]\n    (if (< v %2)\n      (recur (conj result v) (inc v))\n      result))","user":"502ea967e4b06efe12e8cc76"},{"problem":34,"code":"(fn[b e]\n  (loop [x b\n         xs []]\n    (if (< x e)\n      (recur (inc x) (conj xs x))\n      xs)))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [start start\n         end end\n         acc ()]\n    (if (= start end)\n      (reverse acc)\n      (recur (inc start) end (conj acc start)))))","user":"5a346d73e4b0ddc586f153c8"},{"problem":34,"code":"(fn [a b]\n\t  \t(loop [i a l []]\n\t  \t\t(println l)\n\t    \t(if (< i b)\n\t      \t\t(recur (inc i) (conj l i))\n\t      \t\tl\n\t      \t)\n\t    )\n\t)","user":"548018dbe4b0c51c1f4d732a"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %1))\n;#(reduce (fn [a b] (conj a (inc (last a)))) [%1] (repeat (dec (- %2 %1)) 1))","user":"5cfee28de4b0cc9c91588185"},{"problem":34,"code":"(fn my-range [start end]\n  (if (<= end start)\n    ()\n    (lazy-seq (cons start (my-range (inc' start) end)))))\n;; Also see https://stackoverflow.com/questions/35916193","user":"5aa4f7dae4b0d174b936c88c"},{"problem":34,"code":"(fn Re \n  [a b]\n  (if (= a b)\n    []\n    (cons a (Re (inc a) b))))","user":"55634f38e4b0c656e3ff17e8"},{"problem":34,"code":"(fn  ran [a b] \n  (if (= a (dec b))\n    (list a)\n    (conj (ran (inc a) b) a)))","user":"53e91473e4b036ad0777e495"},{"problem":34,"code":"(fn [start-number end-number]\n(loop [current-number start-number output []]\n  (println current-number output)\n  (if (= current-number end-number)\n    output\n    (recur (inc current-number) (conj output current-number))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":34,"code":"(fn [start end]\n  (take (- end start)(iterate inc start)))","user":"53ae0c50e4b047364c044471"},{"code":"(fn r [low high]\n  (lazy-seq\n    (when (< low high)\n      (cons low (r (inc low) high)))))","problem":34,"user":"4f28c979e4b0d6649770a01a"},{"code":"#(loop [start %1\n\t    coll nil]\n\t  (if (= start %2)\n\t    (reverse coll)\n\t    (recur (inc start) (conj coll start))))","problem":34,"user":"536c99c5e4b0fc7073fd6e46"},{"problem":34,"code":"(fn [x y] (loop [accum [] i x] (if (= i y) accum (recur (conj accum i) (inc i)))))","user":"53ce8cb5e4b00fb29b2212f2"},{"problem":34,"code":"(fn [from, to]\n   (take-while #(< % to) (iterate inc from)))","user":"5f81de6ce4b0c071e6c840f5"},{"problem":34,"code":"(fn all-integers [x y]\n  (take (- y x) (iterate inc x)))","user":"5634995fe4b0bfe05bf117be"},{"code":"(fn [start end] (take-while #(< % end) (iterate inc start)))","problem":34,"user":"4e739e13535dff18050a9c76"},{"problem":34,"code":"(fn [lower higher]\n  (take (- higher lower) (iterate inc lower)) )","user":"5b55b15ae4b02d533a91bd35"},{"problem":34,"code":"#(loop [y %2 coll nil]\n   (if (= y %1)\n     coll\n     (recur (dec y) (conj coll (dec y)))))","user":"53968a70e4b0b51d73faaee0"},{"problem":34,"code":"(fn [start end]\n  (loop [acc [] x start]\n    (if (= x end)\n      acc\n      (recur (conj acc x) (inc x)))))","user":"5e4471e1e4b01d43a70e8e85"},{"code":";#(loop [i %1\n;        result []]\n;   (if (= i %2)\n;     result\n;     (recur (+ 1 i) (conj result i))))\n\n#(take (- %2 %1) (iterate inc %1))","problem":34,"user":"527b8881e4b03e8d9a4a758e"},{"problem":34,"code":"(fn my-range [from to] \n                   (lazy-seq (if (< from (dec to))\n                                (cons from\n                                      (my-range (inc from)\n                                                to))\n                                (list from))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn m-range\n  ([beg end] (let [col []]\n               (m-range beg end col)))\n  ([beg end col] (if (= beg end)\n                   (seq col)\n                   (m-range (inc beg) end (conj col beg)))))","problem":34,"user":"4f6e7073e4b07046d9f4efd8"},{"code":"(fn [start end] \n  (loop [i start acc []] \n    (if (= i end) \n      acc \n      (recur (inc i) \n             (conj acc i)))))","problem":34,"user":"50e3cf55e4b01912b3285c45"},{"problem":34,"code":"(fn [start end] (loop [i (dec end) accum '()] (if (= i (dec start)) accum (recur (dec i) (conj accum i)))))","user":"59ac757fe4b00adcf69795d3"},{"code":"(fn [s e]\n  (loop [r []\n         i s]\n    (if (>= i e)\n      r\n      (recur (conj r i)\n             (inc i)))))","problem":34,"user":"512eb723e4b0b740abc5982b"},{"problem":34,"code":"#(loop [start % stop %2 s []]\n  (if (< start stop)\n    (recur (inc start) stop (conj s start))\n    s))","user":"52ade380e4b0c58976d9ac9b"},{"problem":34,"code":"(fn [x y]\n   (loop [a (- y 1) res ()]\n     (if (> a (- x 1))\n       (recur (dec a) (conj res a))\n       res)))","user":"5df886d8e4b0a607a9a45ca9"},{"code":"(fn rng [from to] (lazy-seq (take (- to from) (iterate inc from))))","problem":34,"user":"4fc34787e4b081705acca33e"},{"problem":34,"code":"(fn my-range\n  [n m]\n  \n\t(take (- m n) (iterate inc n)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":34,"code":"(fn [a b]\n  (loop [s a\n         \n         res []]\n    (if (= s b)\n      res\n      (recur (inc s) (conj res s)))) )","user":"56646a7fe4b0e91d5f5c5657"},{"problem":34,"code":"(fn cRange\n     ([st end]\n      (cRange st end []))\n     ([st end acc]\n      (cond\n        (= st end) acc\n        :else (cRange (inc st) end (conj acc st)))))","user":"582cbf48e4b051871117bfa6"},{"problem":34,"code":"(fn [start limit]\n  (loop [start start limit limit result []]\n    (if (= start limit)\n      (reverse result)\n      (recur (inc start) limit (cons start result)))\n    )\n  )","user":"5e078ba7e4b0978307768fb6"},{"problem":34,"code":"(fn [n1 n2]\n  (take (- n2 n1) (iterate #(+ % 1) n1)))","user":"545944a2e4b01be26fd74627"},{"code":"(fn [a z]\n  (take (Math/abs (- z a)) (iterate inc a)))","problem":34,"user":"51909ee5e4b0af8891cc8d37"},{"problem":34,"code":"(fn [begin end] (take-while #(not (= % end)) (iterate inc begin)))","user":"5a9829e5e4b0d174b936c788"},{"problem":34,"code":"(fn [value1 value2]\n  (take (- value2 value1)\n        (iterate inc value1)))","user":"60504383e4b056659d6341fa"},{"problem":34,"code":";(fn [start end]\n;  (loop [acc [start]\n;         times (- (dec end) start)]\n;    (if (zero? times)\n;      acc\n;      (recur (conj acc (inc (last acc))) (dec times)))))\n; the mark of a terrible clojurist\n\n(fn [start end]\n  (let [length (- end start)]\n    (take length (iterate inc start))))","user":"560dfa8de4b05f002753df46"},{"code":"(fn my-range [start end]\n  (if (< start end)\n    (concat [start] (my-range (inc start) end))\n    []))","problem":34,"user":"50e4ff72e4b049a987753897"},{"problem":34,"code":"(fn [l u]\n  (loop [r []\n         curr l]\n    (if (= curr u)\n      r\n      (recur (conj r curr) (+ curr 1)))))","user":"56308326e4b073c1cf7a9be9"},{"code":"x","problem":34,"user":"52e635b3e4b09f7907dd146f"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc  %1) )","user":"5ea2e6bfe4b00a66d4a95197"},{"code":"#(loop[n % res []] \n         (if (>= n %2) res \n             (recur (inc n) (conj res n))))","problem":34,"user":"4ee6166e535d93acb0a66854"},{"code":"(fn ranger \n    ([end] \n        (ranger 0 end))\n    ([start end]\n        (if (= start end)\n            nil\n            (cons start (ranger (inc start) end)))))","problem":34,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":34,"code":"(fn implement-range\n  [start end]\n  (loop [result []\n         s start\n         e end]\n    (if (= s e)\n      (seq result)\n      (recur (conj result s)\n             (inc s)\n             e))))","user":"57d174ede4b0bd073c20236c"},{"problem":34,"code":"(fn r [x y] (if (< 0 (- y x)) (cons x (r (inc x) y))))","user":"56946d43e4b0dcc4269f411e"},{"problem":34,"code":"(fn [s n]\n  (loop [l []\n         ss s\n         nn n]\n    (if (< ss nn)\n      (recur (conj l ss) (inc ss) nn)\n      l)))","user":"53b22df6e4b047364c044497"},{"code":"#(loop [result [] x %] \n   (if (= x %2) result (recur (conj result x) (inc x)))\n   )","problem":34,"user":"52253004e4b01819a2de42fa"},{"code":"(fn t [s e]\n  (cond\n   (< s e) (cons s (t (+ 1 s) e))\n   :else '()))","problem":34,"user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn f [x y] (if (= x y) [] (concat [x] (f (+ x 1) y))))","problem":34,"user":"5017f840e4b02f523d7cc5e8"},{"problem":34,"code":"(fn [start end] (apply vector (take (- end start) (iterate #(+ 1 %) start))))","user":"5f009162e4b0cf489e8d7f1a"},{"problem":34,"code":"(fn [start end]\n   (loop [result []\n          current start]\n     (if (= current end)\n       result\n       (recur (conj result current) (+ current 1)))))","user":"55ad2379e4b03311e7b732a1"},{"problem":34,"code":"#(loop [s %1 e %2 l ()]\n   (if (= s e)\n     l\n     (recur s (dec e) (cons (dec e) l) )\n     )\n   )","user":"5512b15ae4b055c2f668d4b5"},{"code":"(fn [lower upper]\n  (loop [current lower result []]\n    (if (= current upper)\n      result\n      (recur (inc current) (conj result current)))))","problem":34,"user":"4e117dea535d04ed9115e7c9"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (loop [ix start\n         out nil]\n    (if (>= ix end)\n      (reverse  out)\n      (recur (inc ix) (cons ix out))\n      )))","user":"5c92105ce4b048ec896c59f7"},{"problem":34,"code":"(fn [beg end]\n  (let [appender (fn [coll]\n                   (if (= (inc (last coll)) end)\n                     coll\n                     (recur (conj coll (inc (last coll))))))]\n    (concat '() (appender [beg]))))","user":"59908f3fe4b0866487ed0d50"},{"code":"(fn range-e [low high]\n  (if (<= high low) '()\n    (conj (range-e (inc low) high) low)\n))","problem":34,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn [start end]\n  (take (- end start)\n        (iterate #(inc %) start)))","problem":34,"user":"5298c83de4b02ebb4ef75064"},{"problem":34,"code":"(fn [a b] (for [n (iterate inc a) :while (< n b)] n))","user":"55568a7de4b0deb715856e1c"},{"problem":34,"code":"(fn [s, e] (\n            loop [x s result []]\n\t\t    (\n             if (= x e) \n             result\n             (recur (inc x) (conj result x))\n             )\n            )\n  )","user":"57762befe4b0979f8965162f"},{"problem":34,"code":"(fn dd [x y] (if (= x y) () (cons x (dd (+ x 1) y))))","user":"544e1794e4b0e39780006980"},{"code":"(fn [i1 i2] (map-indexed + (repeat (- i2 i1) i1)))","problem":34,"user":"525de512e4b0cb4875a45d8a"},{"problem":34,"code":"(fn myRange [x y] (take (- y x) (iterate inc x)))","user":"542c1f73e4b0dad94371f29d"},{"problem":34,"code":"(fn me [n m]\n  (if (< n m)\n    (cons n (me (+ n 1) m))))","user":"58a5a099e4b01a0c0b232918"},{"problem":34,"code":"(fn  [n1 n2]\n   (take-while #(> n2 %) (iterate inc n1)))","user":"5bec37e2e4b0f319e2d7ec96"},{"code":"(fn f [x y] (if (< x y) (conj (f (inc x) y) x) '()))","problem":34,"user":"50bfd849e4b042992946c649"},{"problem":34,"code":"(fn [from, n] (take (- n from) (iterate inc from)))","user":"5b684a0de4b0c6492753e774"},{"problem":34,"code":"(fn my-range2\n  ([a b] (my-range2 a b []))\n  ([x y z]\n   (if (= x y)\n     z\n    (if(< x y)\n      (recur (inc x) y (conj z x))\n      )\n    )\n   )\n  )","user":"58f90aa2e4b0438e51c2cf41"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (loop [a a\n         b b\n         res ()]\n    (if (= a b)\n      (reverse res)\n      (recur (inc a) b (cons a res)))))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":34,"code":"(fn [start end]\n   (loop [var start sofar []]\n     (if (= end var)\n       sofar\n       (recur (inc var) (conj sofar var)))))","user":"54159032e4b01498b1a719f5"},{"problem":34,"code":"(fn\n  [first last]\n  (take (- last first) (iterate inc first)))","user":"58dfce9fe4b0a4d5acaab723"},{"problem":34,"code":"(fn [l r] (map-indexed (fn [x e] (+ x e)) (repeat (- r l) l)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":34,"code":"(fn foo [s e]\n  \t(if (= s (dec e))\n      (list s)\n      (concat (list s) (foo (inc s) e))))","user":"588ce4aee4b05c141a2560a1"},{"problem":34,"code":"(fn mrange [start end]\n  (if (= start end)\n    '()\n    (conj (mrange (inc start) end) start)))","user":"589c2e3fe4b00487982d5357"},{"problem":34,"code":"#(loop [t '() e %2] (if (> %1 e) (drop-last t) (recur (cons e t) (dec e))))","user":"54464734e4b032a45b8693ab"},{"problem":34,"code":"(fn [start end]\n   (loop [acc []\n          prev start]\n     (if (< prev end)\n       (recur (conj acc prev) (inc prev))\n       acc)))","user":"58791973e4b01531a375eac5"},{"problem":34,"code":"(fn [start stop] (loop [memo [] current start end start] (if (= stop end) memo (recur (conj memo current) (inc current) (inc end)))))","user":"4f0f3725535d0136e6c22337"},{"problem":34,"code":"#(loop [i %\n        result []]\n   (if (< i %2)\n     (recur (inc i) (conj result i))\n     (apply list result)))","user":"5d3f50d7e4b09d9322bc20a6"},{"code":"(fn [from, to]\n  (loop [cur from\n         acc []]\n    (if (= cur to)\n      (apply list acc)\n      (recur (inc cur) (conj acc cur)))))","problem":34,"user":"514a13cee4b0829bd132edb4"},{"code":"(fn [start end]\n  ((fn [l n end]\n     (if (= n end)\n       l\n       (recur (concat l [n]) (+ n 1) end)))\n   [start] (+ start 1) end))","problem":34,"user":"50a95127e4b07e35d68b27af"},{"problem":34,"code":"(fn nbers [mn mx] ( cons mn ( if ( < mn (dec mx)\n                                   ) (nbers (inc mn) mx))))","user":"5953949be4b066ee0a44aeea"},{"problem":34,"code":"(fn [i j] (take (- j i) (iterate inc i)) )","user":"564633a1e4b0284900eef60f"},{"code":"#(loop [x %1 y []] (if (= %2 x) y (recur (inc x) (conj y x))))","problem":34,"user":"4e79a143535db169f9c796a2"},{"code":"(fn [start end] \n   (take-while #(< % end) (iterate inc start))\n )","problem":34,"user":"5094057fe4b097f48cc38593"},{"problem":34,"code":"(fn problem-34 [start end]\n  (cond\n    (>= start end) '()\n    :else (cons start (problem-34 (inc start) end))))","user":"5a786f6be4b013a48d39976e"},{"code":"(fn f [n m]\n  (if (< n m)\n    (cons n\n      (lazy-seq (f (inc n) m)))))","problem":34,"user":"50427899e4b0add3005c0fc2"},{"problem":34,"code":"(fn [m n] (take (- n m) (iterate inc m\n                      )))","user":"54e345a1e4b024c67c0cf7db"},{"problem":34,"code":"(fn interval[a b]\n  (if (= a b)\n    ()\n    (cons a (interval (inc a) b))))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn\n  [start stop]\n  (loop [x (dec stop)\n         results '()]\n    (if (>= x start)\n      (recur (dec x) (cons x results))\n      results)))","problem":34,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":34,"code":"#(take (Math/abs  (- %1 %2))  (iterate inc %1))","user":"592883f1e4b072a2710fceea"},{"code":"(fn [inizio fine]\n  (loop [i inizio\n         acc '()]\n    (if (= i fine)\n      (reverse acc)\n      (recur (inc i)\n             (conj acc i)))))","problem":34,"user":"525947f1e4b0cb4875a45cd8"},{"code":"(fn r [s, f]\n  (cond\n    (= s f) []\n    :else (flatten (conj (list (- f 1)) (r s (- f 1))))))","problem":34,"user":"522a1248e4b0590a43906cf3"},{"code":"(fn [min max]\n  (take (- max min) (iterate inc min)))","problem":34,"user":"4edeac6b535d10e5ff6f533a"},{"problem":34,"code":"(fn [a b]\n  (loop [x a y b acc []]\n    (if (= x y)\n     (lazy-seq acc)\n    (recur (inc x) y (conj acc x)))))","user":"59250d2be4b072a2710fce64"},{"problem":34,"code":"(fn my-range[start end]\n  (loop [i (- end 1) s '()]\n    (if (< i start)\n      s\n      (recur (- i 1) (conj s i)))))","user":"556405e5e4b0c656e3ff17fb"},{"code":"(fn [start end]\n  (loop [s start e end acc []]\n    (if (= s e)\n      acc\n      (recur (inc s) e (conj acc s)))))","problem":34,"user":"5163a7bbe4b055933a9ca02f"},{"code":"(fn [x y]\n  (loop [myrange () counter x]\n    (if (< counter y)\n      (recur (conj myrange counter) (inc counter)\n             )\n      (reverse myrange)\n      )\n    )\n  )","problem":34,"user":"52cc7c40e4b07d0d72b27364"},{"problem":34,"code":"(fn [a b] (loop [n a res []]\n            (if (>= n b)\n              res\n              (recur (inc n) (conj res n)))))","user":"5b7ec039e4b047b03b20375d"},{"problem":34,"code":"#(loop [a %1 acc []]\n   (if (< a %2)\n     (recur (+ a 1) (conj acc a))\n     acc))","user":"58a31ecee4b02bd94d917ee7"},{"code":"#(loop [n %1, acc '()]\n    (if (= n %2)\n      acc\n      (recur (inc n) (concat acc (list n)))))","problem":34,"user":"4f038567535dcb61093f6b0c"},{"problem":34,"code":"(fn my-range \n  ([a b]\n   (my-range a b []))\n  ([a b cur] \n   (if (< a b) \n     (recur (inc a) b (conj cur a))\n     cur)))","user":"556238bce4b0c656e3ff17d3"},{"problem":34,"code":"(fn [start end] (map + (repeat (- end start) start) (iterate inc 0)))","user":"5784ec65e4b0ebec4cfb74d1"},{"code":"(fn [start end]\n  ((fn [x end acc]\n    (if (= x end)\n\t (reverse acc)\n     (recur (inc x) end (cons x acc))\n     ))\n    start end '()\n    ))","problem":34,"user":"51b8e0dce4b050a1176cd69f"},{"code":"(fn [start finish]\r\n  (loop [s '() i start]\r\n    (if (= i finish)\r\n      (reverse s)\r\n      (recur (conj s i) (inc i)))))","problem":34,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":34,"code":"(fn rg [x y]\n  (loop [xs '() x x]\n    (if (= x y)\n      (reverse xs)\n      (recur (cons x xs) (inc x)))))","user":"580fbaade4b0f478707a05c0"},{"problem":34,"code":"(fn range2\n  [a b]\n  ((fn step\n     [n b]\n     (if (= n b)\n       '()\n       (conj (step (+ n 1) b)\n             n)))\n   a b))","user":"5438795ee4b032a45b869313"},{"problem":34,"code":"(fn [x y]\n  (loop [init x result []]\n    (if (< init y)\n      (recur (inc init) (conj result init))\n      result)))","user":"5c596d6ce4b01df32ab73257"},{"code":"(fn myrange [a b]\n  (loop [v a acc []]\n    (if (< v b)\n      (recur (inc v) (conj acc v))\n      acc)))","problem":34,"user":"535526a2e4b04ce2eb3ed259"},{"problem":34,"code":"(fn rng [start finish]\n    (loop [myseq []\n            cnt start]\n        (if (= cnt finish)\n            myseq\n            (recur (conj myseq cnt) (inc cnt)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":34,"code":"(fn my-range [start end]\n  (if (>= start end) nil\n    (cons start (my-range (inc start) end))))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [i x] (map-indexed + (repeat (- x i) i)))","problem":34,"user":"504f6adfe4b0a02f9cffde81"},{"code":"(fn[x y]  (take (- y x) (iterate inc x)))","problem":34,"user":"4e080562535d04ed9115e7aa"},{"problem":34,"code":"(fn rng [n m]\n  (cond (= n m) nil\n        (< n m) (reverse (cons (dec m) (reverse (rng n (dec m)))))))","user":"4e246abe535d04ed9115e827"},{"code":"(fn rang ([a b] (rang [] a b))\n  \t\t ([xs a b] (if (= a b) \n                       xs\n                       (recur (conj xs a) (inc a) b)\n                   )\n        )\n )","problem":34,"user":"52bf8e35e4b07a9af579233a"},{"problem":34,"code":"(fn [low hi]\n  (take-while #(< % hi)(iterate inc low)))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":34,"code":"#( take (- %2 %1 ) (iterate inc %1) )","user":"5b28cf92e4b063e2438bcc56"},{"problem":34,"code":"(fn [f f1]\n\t\n  (loop [i f r[]]\n    \n    (if (> i (- f1 1))\n      r\n      (recur (inc i)(conj r i)))))","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [start cnt]\n   (take (- cnt start) (iterate inc start) ) )","problem":34,"user":"530c15f7e4b02e82168697d6"},{"problem":34,"code":"(fn [s1 s2]\n  (loop [counter s1 s []]\n    (if (= counter s2)\n      s\n      (recur (inc counter) (conj s counter)))))","user":"53bbae20e4b047364c044509"},{"code":"(fn [l h] \n  (loop [i l\n         coll []]\n  \t(if (= i h)\n      coll\n      (recur (inc i) (conj coll i))\n      )\n  \t)\n  )","problem":34,"user":"51e24a04e4b01e5198146430"},{"code":"#(loop \n  [s %1\n  L '()]\n  (if (= s %2) (reverse L) (let [new-L (conj L s)] \n                  (recur (inc s) new-L))))","problem":34,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"(fn [start, end]\n  (loop [col [], n start]\n    (if (< n end)\n       (recur \n         (conj col n) \n         (+ n 1))\n       col)))","problem":34,"user":"4f7cbf4ae4b06e829148e1b7"},{"problem":34,"code":"#(loop [s %1 m %2 res []] (if (= s m) res (recur (inc s) m (conj res s))))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":34,"code":"(fn [a b]\n  (loop [number a coll ()]\n    (if (= number b)\n      (reverse coll)\n      (recur (inc number) (cons number coll)))))","user":"559bdf16e4b066d22e731f5a"},{"problem":34,"code":"(fn [start end]\n  (loop [current start\n         acc []]\n    (if (= current end)\n      acc\n      (recur (inc current) (conj acc current)))))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn [start end]\n  (for [x (iterate inc start) :while (< x end)] x))","problem":34,"user":"52b94e26e4b07a9af57922b9"},{"problem":34,"code":"(fn my-range [start stop]\n  (loop [x start y []]\n    (if (= x stop)\n      y\n      (recur (+ x 1) (conj y x)))))","user":"59881937e4b021a7a535feaf"},{"code":"(fn [init n] (map #(- (+ % init) 1)\n                  ((fn [] (reductions + (repeat (- n init) 1))))))","problem":34,"user":"53498f88e4b084c2834f4a64"},{"code":"(fn mrange [start finish]\n  (loop [x start ret []]\n    (if (< x finish) (recur (inc x) (cons x ret))\n      (sort ret)\n      )\n    )\n  )","problem":34,"user":"4ec4d723535dcc7ae8597d65"},{"code":"(fn [b e]\n  (loop [i b acc []]\n    (if (>= i e)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"52ed22ffe4b0a18b0f5dd9e8"},{"problem":34,"code":"#(loop [current %1 end %2 result[]] (if (= current end) result (recur (inc current) end (conj result current))))","user":"57d588a5e4b0bd073c2023b6"},{"problem":34,"code":"(fn [m n] (loop [i m result []]\n    (if (< i n)\n      (recur (inc i) (conj result i))\n       result)))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":34,"code":"(fn rec [x y]\n  (if (= x y)\n    ()\n    (conj (rec (+ x 1) y) x)))","user":"539a38dae4b0b51d73faaf10"},{"code":"(fn [start end] (take (- end start) (iterate (partial + 1) start)))","problem":34,"user":"5256cd77e4b0541d1855ba39"},{"problem":34,"code":"(fn rangge [n1 n2]\n  (if (>= n1 n2)\n    '()\n    (cons n1 (rangge (inc n1) n2))))","user":"55e4487ce4b050e68259b44c"},{"problem":34,"code":"#(loop [v %1, acc []] (if (== v %2) acc (recur (+ v 1) (conj acc v))))","user":"55c20bd0e4b0e31453f64972"},{"problem":34,"code":"(fn \n  [from to] \n  (loop [x from\n         res []]\n    (if (< x to)\n      (recur (inc x) (conj res x))\n      res\n      )\n    )\n  )","user":"55f33f0ce4b06e875b46ce59"},{"problem":34,"code":"(fn [a b] (take (- b a) (iterate inc a)))\n\n;;; tomamos el numero que dice (4 -1 = 3)","user":"6075c214e4b069485764de5b"},{"problem":34,"code":"(fn [bottom top] \n  (loop [b bottom t top r []] \n    (if (= b t) \n      r \n      (recur (inc b) t (conj r b)))))\n\n;best alternative\n; #(take (- %2 %1) (iterate inc %1))","user":"55e01f4ee4b050e68259b406"},{"code":"(fn rng [x y]\n  (if (== x y)\n    '()\n    (cons x (rng (+ x 1) y))))","problem":34,"user":"522ff396e4b032bbe3424172"},{"problem":34,"code":"(fn [a b]\n  (loop [i a r []]\n    (if (= i b) r\n      (recur (inc i) (conj r i)))))","user":"56e9db9be4b04a395b9a03ff"},{"problem":34,"code":"(fn foo [init end] (when (< init end) (conj (foo (inc init) end) init)))","user":"5697fda8e4b0542e1f8d142c"},{"problem":34,"code":"(fn [l r] (take (- r l) (iterate #(inc %) l)))","user":"5d88a22de4b0915913b1d3ab"},{"problem":34,"code":"(fn [start stop]\n    (loop [result (conj '() start) i start]\n          (if (< (inc i) stop)\n            (recur\n              (conj result (inc i))\n              (inc i))\n            (reverse result))))","user":"56cc34aee4b0ea9b8538f73c"},{"problem":34,"code":"(fn [m n]\n  (loop [c m\n         l []]\n    (if (= c n)\n      l\n      (recur (inc c) (conj l c)))))","user":"56051095e4b08b23635d3162"},{"problem":34,"code":"(fn impl_range [a b]\n  \"Creates a list of all integers in a given range\"\n  (take (- b a) (iterate inc a)))","user":"5bbbcecee4b0a20761a23611"},{"code":"#(loop [start %1\n        end %2\n        ret []]\n   (if (= start end)\n     ret\n     (recur (inc start) end (conj ret start))))","problem":34,"user":"539f4e9ee4b0ca733b974498"},{"code":"(fn myrange [low high]\n    (take (- high low) (iterate inc low))\n)","problem":34,"user":"51d1111ce4b067c36548635f"},{"code":"(fn [ x y ] (loop [di x now (- y 1) se ()] (if (< now di) se (recur di (- now 1) (conj se now)))))","problem":34,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [start end]\n  (loop [num start\n         result []]\n    (if (< num end)\n      (recur (inc num) (conj result num))\n      result)))","problem":34,"user":"52777dc3e4b03e8d9a4a7508"},{"code":"(partial (fn [x a b]\n         (loop [a a x x]\n           (cond\n          (= a b) x\n          :else\n          (recur (inc a) (conj x a))))) [])","problem":34,"user":"520332f7e4b030ee0c5b2714"},{"code":"(fn rangenum [a b]\n  (if (= a b) nil\n  (cons a (rangenum (inc a) b))))","problem":34,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":34,"code":"(fn my-range [low high] (if (>= low high) [] (into [low] (my-range (inc low) high))))","user":"54750ca3e4b0c51c1f4d7294"},{"problem":34,"code":"(fn [start end] \n  (take-while #(< % end) (iterate inc start)))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":34,"code":"#(let [mi % mx %2]\n   (loop [i mi r []]\n     (if (>= i mx)\n       r\n       (recur (inc i) (conj r i)))))","user":"565f9aece4b068f2fe63dc42"},{"problem":34,"code":"(fn\n    [a b]\n    (take (- b a) ((fn nums\n            ([] (nums a))\n            ([x] (lazy-seq (cons x (nums (+ x 1)))))\n          ))))","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":34,"code":"(fn [nmin nmax] (loop [nmin nmin\n            acc []]\n  (if (= nmin (- nmax 1))\n    (conj acc nmin)\n    (recur (inc nmin) (conj acc nmin)))))","user":"57c0393be4b05aa3c4741c90"},{"problem":34,"code":"(fn ranges [a b]\n  (take (- b a) (iterate inc a)))","user":"5cfabf53e4b0cc9c91588148"},{"code":"(fn rangE [a b]\n  (if (< a b)\n    (cons a (rangE (inc a) b))))","problem":34,"user":"51ccc179e4b02254fc794879"},{"code":"(fn r [start end]\n  (loop [res '()\n         i start]\n    (if (>= i end)\n      res\n      (recur (concat res (list i)) (inc i)))))","problem":34,"user":"529f5a23e4b04e0c58e87baa"},{"problem":34,"code":"#(take (- %2 %1) ((fn nat [n] (lazy-seq (cons n (nat (inc n))))) %1))","user":"5517f5c5e4b06a49daca83c7"},{"code":"(fn [a b]\n    (loop [l '() a a b (- b 1)]\n      (if (<= a b)\n          (recur (cons b l) a (- b 1))\n          l)))","problem":34,"user":"50657775e4b0deb876850599"},{"problem":34,"code":"(fn range2 [sofar start end] \n  (if (= start end)\n    sofar\n    (range2 (conj sofar start) (+ start 1) end))) []","user":"5f3adcf4e4b004f08c61c531"},{"code":"(fn rang\n  ([from to] (rang [] from to))\n  ([seq from to] \n    (cond\n      (= from to) seq\n      :else (recur (concat seq (list from)) (inc from) to))))","problem":34,"user":"4e7f3891535db966e863cc3b"},{"code":"#(loop [i %1 ans []]\n  (if (>= i %2)\n    ans\n    (recur (inc i) (conj ans i))\n  )\n)","problem":34,"user":"51f09f3de4b0274c496158d7"},{"problem":34,"code":"(fn reihe [a b] \n  (if (< a b) (concat (list a) (reihe (+ a 1) b)) '()))","user":"57d1d6c8e4b0bd073c202370"},{"problem":34,"code":"(fn f [from to] (if (= from to)\n                   '()\n                   (cons from (f (inc from) to))))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":34,"code":"(fn [a b]\n  (loop [x a\n         acc '()]\n    (if (< x b)\n      (recur (+ x 1) (conj acc x))\n      (reverse acc))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":34,"code":"(fn [start, end]\n  (reduce \n  \t\t(fn [items, const] (concat items [(+ (last items) 1)]))\n  \t\t(list start)\n  \t\t(rest (repeat (- end start) start)))\n)","user":"559057c4e4b027778923766e"},{"code":"(fn [a b](take (- b a) ((fn after[a](cons \n                                    \ta \n                                    \t(lazy-seq (after (inc a)))\n                                    )\n                          ) a)\n          )\n)","problem":34,"user":"526a3412e4b03e8d9a4a721e"},{"problem":34,"code":"(fn go [s x y] (if (= x y) s (go (conj s x) (inc x) y))) []","user":"53f035c2e4b0742d9025b0d2"},{"code":"(fn ran [a b]\n  (if (>= a b)\n    ()\n    (cons a (ran (+ a 1) b))))","problem":34,"user":"4e4c238f535dc968683fc4dc"},{"problem":34,"code":"(fn [xi xf] \n  (loop [xs [] n xi]\n    (if (= n xf)\n       xs\n       (recur \n        (conj xs n)\n        (inc n)))))","user":"55b4fa46e4b01b9910ae2983"},{"problem":34,"code":"(fn [begin end] (loop [i (dec end) acc '()] (if (< i begin) acc (recur (dec i) (conj acc i)))))","user":"4e268c6e535deb9a81d77ef4"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         acc '()]\n    (if (>= x end)\n     (reverse acc)\n     (recur (inc x) (cons x acc))\n    )\n  )\n)","user":"4ff24a1ae4b0678c553fc337"},{"problem":34,"code":"(fn rng \n  ([] (rng 0 Double/POSITIVE_INFINITY 1))\n  ([end] (rng 0 end 1))\n  ([start end] (rng start end 1))\n  ([start end step]\n   (lazy-seq\n    (let [b (chunk-buffer 32)\n          comp (if (pos? step) < >)]\n      (loop [i start]\n        (if (and (< (count b) 32)\n                 (comp i end))\n          (do\n            (chunk-append b i)\n            (recur (+ i step)))\n          (chunk-cons (chunk b) \n                      (when (comp i end) \n(rng i end step)))))))))","user":"59ab8beee4b08cbb53654d9e"},{"problem":34,"code":"(\n\t\tfn giveRange[x y] \n\t\t(\n\t\t\tif(< x y)\n\t\t\t(cons x (giveRange (+ x 1) y))\n\t\t)\n\t)","user":"548018ede4b0c51c1f4d7334"},{"code":"(fn [start stop]\n  (take (- stop start) (iterate inc start)))","problem":34,"user":"4daee8e9edd6309eace4d166"},{"problem":34,"code":"(fn range1 [s e]\n  (loop [result [] current s end e]\n    (if (= current end)\n      result\n      (recur (conj result current) (inc current) end))))","user":"524a7c1ae4b05ef8e38e64ac"},{"problem":34,"code":"(fn [x y]\n   (loop [z x output []]\n     (if (= z y)\n       output\n       (recur (inc z) (conj output z))\n       )))","user":"54ef7568e4b024c67c0cf885"},{"problem":34,"code":"(fn f [i x] (if (< i x) (into (f i (dec x)) [(dec x)]) []))","user":"5b5e7953e4b0c6492753e6d9"},{"code":"(fn [start end] (loop [curr start rng []] (if (= curr end) rng (recur (+ curr 1) (conj rng curr)))))","problem":34,"user":"4f4afb1fe4b0d56e7bb92c21"},{"problem":34,"code":"(fn myrange [begin end]\n  (if (= begin end)\n    []\n    (concat [begin] (myrange (+ begin 1) end))))","user":"5b5d255de4b0c6492753e6c8"},{"problem":34,"code":"(fn my-range [start end]\n                (if (= start end)\n                  '()\n                  (cons start (my-range (inc start) end))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn my-range [x y] (cons x (lazy-seq (if (< (inc x) y) (my-range (inc x) y) ))))","problem":34,"user":"52eaba10e4b09f7907dd14c2"},{"problem":34,"code":"(fn myrange [low high] (if (>= low high) [] (cons low (myrange (+ 1 low) high))))","user":"589c7c8ce4b00487982d5361"},{"code":"(fn *range                                                                                                                                                  \n  [start end]                                                                                                                                                 \n  (loop [lst '() m start]                                                                                                                                     \n    (if (= m end)                                                                                                                                             \n      (reverse lst)                                                                                                                                           \n      (recur (conj lst m) (inc m)))))","problem":34,"user":"4e3bcccd535deb9a81d77f56"},{"problem":34,"code":"(fn ranger\n  [a b]\n  (if (< a b)\n    (into [a] (ranger (inc a) b))\n    []))","user":"542725fce4b01498b1a71b22"},{"problem":34,"code":"(fn [a b] (loop [i a acc []] (if (= i b) acc (recur (inc i) (conj acc i)))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":34,"code":"(fn gen-set-thing [small-num big-num] (take (- big-num small-num) (iterate #(+ 1 %) small-num)))","user":"545188ebe4b0e397800069b2"},{"code":"(fn startRange [start end]\n  (let [count (- end (inc start))]\n    (map\n     #(+ start %)\n     (reverse ((fn collRange\n                 [count]\n                 (when (>= count 0)\n                   (conj\n                    (collRange\n                     (dec count))\n                    count))) count)))))","problem":34,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":34,"code":"(fn my-range ([a b acc] (if (>= a b) acc (my-range (inc a) b (conj acc a)))) ([a b] (my-range a b [])))","user":"561223e5e4b05f002753df8b"},{"problem":34,"code":"(fn [x y] (loop [a x r []] (if (< a y) (recur (inc a) (conj r a)) r)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"#(loop [n % r []]\n  (if (>= n %2)\n    r\n    (recur (inc n) (conj r n))))","problem":34,"user":"4ef355e3535dced4c769f228"},{"problem":34,"code":"#((fn x [from to lst] \n  (if \n    (< from to) \n    (x (inc from) to (cons from lst)) \n    (reverse lst)))\n      %1 %2 '())","user":"54d22860e4b0e8a36923e5ef"},{"problem":34,"code":"(fn [b e]\n  (take-while #(< % e) (iterate inc b)))","user":"57acb156e4b0b8559636fc8d"},{"problem":34,"code":"(fn [a b] (take (- b a)(iterate inc a)))","user":"54d2159fe4b0e8a36923e5ed"},{"code":"(fn rng [i j]\n  (if (seq? j)\n    (if (= i (first j))\n      j\n      (rng i (conj j (dec (first j))))\n    )\n    (rng i (list (dec j)))\n  )\n)","problem":34,"user":"532103abe4b09d4e7a9b54ab"},{"problem":34,"code":"#(loop [start %1 end %2 final []]\n  (if (= start end)\n        final\n        (recur (inc start) end (conj final start))\n    )\n  )","user":"594bc7d6e4b07ddc2dafae3d"},{"problem":34,"code":"(fn [f t] \n  (loop [acc '[]\n         i f]\n    (if (< i t)\n      (recur (conj acc i) (inc i))\n      acc)))","user":"5581747fe4b05c286339e0fa"},{"code":"(fn aa [start end]\n    (let [b (chunk-buffer 32)\n\n          comp (if (pos? 1) < >)]\n\n      (loop [i start]\n\n        (if (and (< (count b) 32)\n\n                 (comp i end))\n\n          (do\n\n            (chunk-append b i)\n\n            (recur (+ i 1)))\n\n          (chunk-cons (chunk b)\n\n                      (when (comp i end)\n\n                        (aa i end)))))))","problem":34,"user":"50361b6be4b0fbe0a74d26be"},{"problem":34,"code":"(fn [mini maxi] (loop [acc [] i mini] (if (= i maxi) acc (recur (conj acc i) (inc i)))))","user":"5ce56455e4b0a17bb84e2b71"},{"code":"#( take (- %2 %1) (iterate inc %1) )","problem":34,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn [start stop]\n  (loop [x start res []]\n    (if (= x stop) res (recur (inc x) (conj res x)))\n))","problem":34,"user":"4f12ab23535d64f603146429"},{"problem":34,"code":"(fn ran [l r] (cond (= l r) '() \n                    :else (conj (ran (inc l) r) l)\n                    ))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [a b] \n  (take (- b a) (iterate inc a)))","problem":34,"user":"4f74a4fbe4b044e54cd9a901"},{"problem":34,"code":"(fn myrange\n    [start stop] \n    (loop [x start \n           lst []]\n        (if (< x stop)\n            (recur (inc x) (conj lst x))\n            lst\n        )\n    )\n)","user":"5d0aab50e4b0cc9c91588220"},{"code":"(fn [x y]\n  (take (- y x) (iterate (partial + 1) x )) \n)","problem":34,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [start end] (reverse (loop [x start result ()] (if (>= x end) result (recur (+ x 1) (cons x result))))))","problem":34,"user":"4f122bfe535d64f603146426"},{"code":"(fn [x y]\n      (letfn [(generate [x y coll]\n                (if (= x y)\n                    (seq coll)\n                    (recur (+ x 1) y (conj coll x))))]\n      (generate x y [])))","problem":34,"user":"52000564e4b023d2eb508ca8"},{"problem":34,"code":"(fn [s e] (take (- e s) (#(iterate inc %) s )))","user":"5253de67e4b0541d1855b939"},{"problem":34,"code":"(fn[s r](take (- r s) (iterate inc s)))","user":"60195030e4b0bf4ca6b10920"},{"problem":34,"code":"(fn [x y]\n  (loop [c x\n        l []]\n    (if (and (>= c x) (< c y))\n      (recur (inc c) (concat l (list c)))\n      l)))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"#(loop [a %1 b %2 r []] (if (< a b) (recur (inc a) b (conj r a)) (seq r)))","problem":34,"user":"52df232fe4b09f7907dd13fc"},{"problem":34,"code":"(fn [x y]\n  (loop [i x result []]\n    (if (= i y) result\n      (recur (inc i) (conj result i)))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":34,"code":"(fn[lo hi](take-while #(< % hi) (iterate inc lo)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":34,"code":"(fn interval [start stop] \n  (if (= start stop)\n    '()\n    (lazy-seq (cons start (interval (inc start) stop)))))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [a b]\r\n   (loop [lst [a]\r\n          i (inc a)\r\n          ]\r\n     (if (>= i b) lst\r\n         (recur (conj lst i) (inc i)))))","problem":34,"user":"4daef21cedd6309eace4d169"},{"code":"(fn [s e]\n(for [x (iterate inc s)\n      :let [y e]\n      :while (< x y)]\n  x))","problem":34,"user":"50f17c0de4b06d9538fe2123"},{"code":"(fn [mn mx] (take (- mx mn) (iterate inc mn)))","problem":34,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn f [start end]\n  (when (< start end)\n    (cons start (f (+ start 1) end))))","problem":34,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":34,"code":"(fn [a b]\n   (let [rng (fn [a b acc]\n               (if (= a b) (reverse acc)\n                 (recur (inc a) b (cons a acc))))]\n     (rng a b '())))","user":"57780e4fe4b0979f89651657"},{"problem":34,"code":"(fn [x y](take (- y x) (iterate #(inc %1) x)))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn f [x y] (if (= x y) nil (cons x (f (inc x) y))))","problem":34,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn fromto [from to]\n  (take (- to from) (iterate inc from))\n)","problem":34,"user":"518e6966e4b051adb72789ec"},{"code":"(fn [x y] ((fn [x y coll] (if (= x y) coll (recur (inc x) y (conj coll x)))) x y []))","problem":34,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn [x y]\r\n  (loop [initial x l '()]\r\n\t\t(if (= initial y) (reverse l) \r\n\t\t\t(recur (inc initial) (cons initial l))\r\n\t\t)\r\n\t)\r\n)","problem":34,"user":"50503117e4b0a02f9cffdeb5"},{"problem":34,"code":"(fn [a b] (take (- b a) (iterate #(+ 1 %)a)))","user":"5e01addee4b0a607a9a45d3f"},{"code":"(fn [lower upper]\n  (loop [out [] curr lower]\n    (if (= curr upper) out\n      (recur (conj out curr) (inc curr)))))","problem":34,"user":"51c342e9e4b0851ac09658f3"},{"problem":34,"code":"#(loop [iter %1\n        acc []]\n  (if (= iter %2) acc\n                  (recur (inc iter) (conj acc iter))))","user":"57c815ade4b05aa3c4741d14"},{"code":"(fn new-range\n  [start stop]\n  (loop [cur start coll []]\n    (if (= cur stop)\n      coll\n      (recur (inc cur) (conj coll cur)))))","problem":34,"user":"52f32c24e4b05e3f0be25f0d"},{"problem":34,"code":"(fn fff [a,b] (if (>= a b) \n            [] \n            (cons a (fff (inc a) b))\n            )\n  )","user":"55f5625de4b06e875b46ce86"},{"code":"(fn my-range [start end]\n  (take-while (fn [i] (< i end)) (iterate inc start)))","problem":34,"user":"4f16d3fd535d64f60314644e"},{"code":"(fn rng \n  ([start stop] (rng start stop []))\n  ([curr stop target] (println curr stop target)\n    (if (= curr stop) \n      target\n      (rng (inc curr) stop (conj target curr)))))","problem":34,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(fn my-range [from to] (if (= from to) () (cons from (my-range (+ from 1) to))))","problem":34,"user":"5315a4f0e4b08068f379ed2e"},{"problem":34,"code":"(fn mrange [start stop]\n  (if (sequential? start)\n    (if (= (inc (last start)) stop)\n      start\n      (recur (concat start\n                     [(inc (last start))])\n             stop))\n    (recur [start] stop)))","user":"56a2777be4b0542e1f8d14bf"},{"problem":34,"code":"(fn [start end]\n  (loop [start start output []]\n    (if (>= start end)\n      output\n      (recur (inc start) (conj output start)))))","user":"5cf62ecce4b087f62be35aa7"},{"problem":34,"code":"(fn [firs las]\n  (let [builder (fn [f l acc]\n                  (if (= f l)\n                    (conj acc l)\n                    (recur f (- l 1) (conj acc l))))]\n    \n    \n    (builder firs (- las 1) '())\n  \n  \n  \n  ))","user":"53b0750fe4b047364c044483"},{"problem":34,"code":"(fn [x y]\n  (loop [start x\n         result []]\n    (if (= start y)\n      result\n      (recur (inc start) (conj result start)))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":34,"code":"(fn [f t] (take-while #(< % t) (iterate #(+ 1 %) f)))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":34,"code":"(fn f [a b]\n  (if (= a b) nil\n    (cons a (f (inc a) b))))","user":"5488537be4b0e286459a11cf"},{"code":"(fn rng\n  ([start end] (rng start end []))\n  ([start end acc]\n    (if (= start end)\n      acc\n      (recur (inc start) end (conj acc start)))))","problem":34,"user":"5245fbbbe4b09dbe66b56183"},{"problem":34,"code":"(fn gen-range [start end]\n  (take (- end start) (iterate inc start)))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":34,"code":"#(loop [result [],init %1, end %2]\n    (if\n      (= init end) result\n      (recur (conj result init) (+ init 1) end)))","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn myrange [x y]\n  (cond\n   (= x y) '()\n   :else (cons x (myrange (inc x) y))))","problem":34,"user":"505d1b01e4b0e6aca564be04"},{"problem":34,"code":"(fn [b e]\n  (loop [cur (dec e) acc '()]\n    (if (<= b cur)\n      (recur (dec cur) (cons cur acc))\n      acc\n      )\n    ))","user":"5c408a61e4b08cd430848eb2"},{"code":"(fn [m M] \n  (loop [a [] m m]\n    (if (< m M)\n        (recur (conj a m) (inc m))\n        a)))","problem":34,"user":"50668a06e4b03d366d7cb2b2"},{"problem":34,"code":"#(loop [a %1 z (dec %2) result '()]\n   (if (> a z)\n     result\n     (recur a (dec z) (conj result z))))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn order [a b]\n  (if (< a b)\n    (concat (list a) (order (+ a 1) b))\n    '()))","problem":34,"user":"4f0381db535dcb61093f6b02"},{"problem":34,"code":"(fn [lo hi]\n   (loop [n lo\n          cum '()]\n     (if (>= n hi)\n       (reverse cum)\n       (recur (inc n)(cons n cum)))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":34,"code":"(fn [start finish]\n  (for [i (iterate inc start) :while (< i finish)] i))","user":"541cf6dfe4b01498b1a71a7a"},{"problem":34,"code":"(fn r [s e] (if (< s e) (cons s (lazy-seq (r (inc s) e))) nil))","user":"52e16face4b09f7907dd1421"},{"problem":34,"code":"(fn gen-range [start end]\n    (take\n        (- end start)\n        ((fn gen-seq [i] (lazy-seq (cons i (gen-seq (inc i))))) start)))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":34,"code":"(fn xrange [l h]\n  (if (< l h)\n    (cons l (xrange (+ 1 l) h))\n    nil))","user":"55f47f54e4b06e875b46ce78"},{"problem":34,"code":"(fn [a b]\n  (loop [i a acc '()]\n    (if (= i b) acc\n      (recur (inc i) (concat acc (list i))))\n    )\n  )","user":"5996b419e4b07157cc8daab5"},{"problem":34,"code":"#( take (- %2 %1) (iterate (fn [x] (+ x 1)) %1))","user":"5651654be4b0f9d632dd845a"},{"problem":34,"code":"(fn rng\n  [a b]\n  (if (= a b)\n    []\n    (cons a (rng (+ a 1) b))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn rng [s e]\n  (if (= s e)\n    '()\n    (cons s (rng (inc s) e))))","problem":34,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn range-2 [start end]\r\n  (let [abs (fn [x]\r\n        (if (neg? x)\r\n\t\t(- x)\r\n\t\tx))]\r\n    (take (abs (- end start)) (iterate (if (neg? (- end start))\r\n\t\t\t\t\t dec\r\n\t\t\t\t\t inc)\r\n\t\t\t\t       start))))","problem":34,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"(fn [a b] \r\n  (take-while #(< % b) (iterate inc a)))","problem":34,"user":"4f71ba6ee4b07046d9f4f012"},{"problem":34,"code":";(fn rng [acc start end]\n;  (if (= start end) \n;    acc\n;    (recur (conj acc start) \n;           ((if (< start end) inc dec) start) \n;           end))) []\n\n(fn rng [start end]\n  (let [m (if (< start end) inc dec)]\n    (loop [acc [] \n           s start \n           e end]\n      (if (= s e) \n        acc\n        (recur (conj acc s) \n               (m s) \n               e)))))","user":"57a4bb65e4b0a966079561eb"},{"problem":34,"code":"(fn [from to]\n  (loop [i from seq []]\n    (if (>= i to)\n      seq\n      (recur (inc i) (conj seq i)))))","user":"58f00639e4b056aecfd47ddc"},{"code":"(fn [x y]\n  (loop [s x\n         e y\n         r ()]\n    (if (= s e)\n      (reverse r)\n      (recur (inc s) e (conj r s)))))","problem":34,"user":"532df9c5e4b019098a6f8b42"},{"problem":34,"code":"(fn [a b]\n  (loop [x       a\n         y b\n         rtn-vec []]\n\n    (if (>= x y )\n      (apply list rtn-vec)\n      (recur (inc x) (identity y) (conj rtn-vec x)\n        ))))","user":"5b97c521e4b0c0b3ffbd4a9a"},{"problem":34,"code":"(fn [from to]\n  (loop [f from r nil]\n    (if (= f to)\n      (reverse r)\n      (recur (inc f) (conj r f)))))","user":"54a80855e4b09f271ff37c9e"},{"problem":34,"code":";; range is a \"lazy sequence\"\n;;(fn my-range\n;;  ([n] (concat [n] (lazy-seq (my-range (inc n)))))\n;;  ([start stop] (take-while #(< % stop) (my-range start)))\n;;  )\n\n;; todo: research the usage of `take` and `iterate`\n#(take (- %2 %1) (iterate inc %1))","user":"5fb68f09e4b08cb800c85b58"},{"problem":34,"code":"(fn my-range [lo hi] (if (= lo hi)\n                    '()\n                    (cons lo (my-range (inc lo) hi))))","user":"5ee93720e4b029a2061bbeb7"},{"code":"#(loop [acc []\n        s %1]\n   (if (= s %2) acc\n     (recur (conj acc s) (inc s))))","problem":34,"user":"537e745ae4b06839e8705ea6"},{"problem":34,"code":"(fn rang [l r]\n  (if (= l r)\n    '()\n    (conj (rang (+ l 1) r) l)))","user":"5ac91d90e4b0e27600da77bd"},{"problem":34,"code":"(fn myrange\n  ([start end]\n   (myrange start (dec end) '()))\n  ([start end output]\n   (if (> start end) \n     output\n     (myrange start (dec end) (conj output end)))))","user":"5bc4f266e4b07a9b28b10066"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [idx start\n         res []]\n    (if (= idx end)\n      res\n      (recur (inc idx) (conj res idx)))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"problem":34,"code":"(fn [x y]\n  (loop [b x\n         s []]\n    (if (< b y)\n      (recur (inc b) (conj s b))\n      s)))","user":"5776f39de4b0979f89651643"},{"problem":34,"code":"(fn my-range\n      ([x y] (my-range (+ x 1) y [x]))\n      ([x y lista]\n       (if (= x y)\n         (seq lista)\n         (my-range (+ x 1) y (conj lista x)))))","user":"540271aee4b0df28a13c62d0"},{"problem":34,"code":"(fn [from til]\n  (loop [acc []\n         n from]\n    (if (= n til)\n      acc\n      (recur (conj acc n) (inc n)))))","user":"5e0b6375e4b099d064962f7b"},{"problem":34,"code":"(fn ff [s e] (if (< s e) (conj  (ff (inc s) e) s) '()\n             )\n  \n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":34,"code":"(fn [start end]\n  (loop [n start output []]\n    (if (= n end)\n      output\n      (recur (inc n) (conj output n))))\n  )","user":"53beacf9e4b0d9a98559a6e3"},{"problem":34,"code":"#_\n(fn [beg end]\n    (reverse\n     (loop [count beg acc '()]\n       (if (= count end)\n         acc\n         (recur (inc count) (conj acc count))))))\n\n(fn [beg end]\n    (take (- end beg) (iterate inc beg)))","user":"529e3258e4b04e0c58e87b8d"},{"code":"(fn [from to]\n  (loop [acc (vector from)]\n    (if (< (last acc) (dec to))\n      (recur (conj acc (inc (last acc))))\n      acc)))","problem":34,"user":"4f0388e8535dcb61093f6b17"},{"problem":34,"code":"(fn rng [l h] (if (= l h) '() (conj (rng (inc l) h) l)))","user":"57539e04e4b02ea1147992ab"},{"problem":34,"code":"(fn [x y] (reverse (loop [x x y y\n                          r '()]\n                     (if (= x y)\n                       r\n                       (recur (inc x) y (conj r x))))))","user":"5169b23fe4b03f62cda68cee"},{"code":"(fn [x y] (let [n (- y x)] (take n (iterate inc x))))","problem":34,"user":"5093a80be4b097f48cc38583"},{"problem":34,"code":"(fn myrange [start stop] (take (- stop start) (iterate inc start)))","user":"5601bb7ee4b04bb52996e195"},{"code":"(fn myrange [start end]\n    (loop [i (- end 1) out ()]\n    (if (< i start)\n        out\n        (recur (dec i)\n         (conj out i)))))","problem":34,"user":"4fc2e302e4b081705acca33a"},{"problem":34,"code":"(fn my-range [f l]\n  (if (>= f l)\n    '()\n    (cons f (my-range (inc f) l))))","user":"5869a49fe4b0f14aab7c88a9"},{"code":"#(loop [res [%1]\n         total (- %2 %1 1)]\n    (if (> total 0)\n      (recur (conj res (inc (last res)))\n             (dec total))\n      res))","problem":34,"user":"5336ca32e4b0e30313ee6c80"},{"problem":34,"code":"#(let [a (atom %1)\n        result (atom [])]\n    (while (< @a %2)\n      (do\n        (swap! result conj @a)\n        (println @result)\n        (swap! a inc)))\n    (deref result))","user":"59b714dbe4b05c620303ca3c"},{"problem":34,"code":"(fn toll [start end]\n\t(take (- end start) (iterate inc start))\n  )","user":"569f8736e4b0542e1f8d1495"},{"problem":34,"code":"(fn[s e](take(- e s)(iterate inc s)))","user":"52e087dde4b09f7907dd1412"},{"problem":34,"code":"(fn [init up-to]\n  (loop [s []\n         value init]\n    (if (= value up-to) s\n    (recur (conj s value) (inc value)))))","user":"5c09e555e4b0bdcf453d16fd"},{"code":"(fn [begin end]\n  ((fn myRange [b e result]\n    (if (= b e)\n      result\n      (myRange\n        (inc b)\n        e\n        (conj result b)\n      )\n    )\n  ) begin end [])\n)","problem":34,"user":"4f16d6ed535d64f60314644f"},{"problem":34,"code":"(fn [start end] \n  (reverse (letfn [(est-inner [x1 result]\n    (if (= x1 end) \n    result\n    (recur (+ 1 x1) (conj result x1))))] (est-inner start '()))))","user":"5576961be4b05c286339e06f"},{"code":"(fn [start end]\n  (loop [i (dec end) res '()]\n    (if (< i start)\n      res\n      (recur (dec i) (cons i res)))))","problem":34,"user":"4fbfbd4fe4b081705acca31c"},{"problem":34,"code":"(fn[a b](loop [iter a acc  []]\n\n           (if (= iter b)\n\n             acc\n\n             (recur (inc iter)(conj acc iter)))))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":34,"code":"(fn get-range [lower upper] \n  (if-not (< lower upper)\n    '()\n    (conj (get-range (inc lower) upper) lower)\n  )\n )","user":"55c387e4e4b0e31453f6498b"},{"problem":34,"code":"#(loop [i % r [] ]\n   (if (< i %2)\n       (recur (inc i) (conj r i)) \n     r\n     )\n   )","user":"5d5b2678e4b06a698e928ee2"},{"problem":34,"code":"(fn [start end]\n  (let [c (- end start)]\n    (take c (iterate inc start))))","user":"52d9e126e4b09f7907dd13b1"},{"code":"(fn my-range [from to]\n  (take (- to from) (iterate inc from)))","problem":34,"user":"5180dc04e4b06b8caf33fa01"},{"problem":34,"code":"(fn [start end]\n  (loop [items []\n         counter start]\n    (if (= counter end)\n      items\n      (recur (concat items [counter]) (inc counter)))))","user":"572722c4e4b0c5bde472c134"},{"code":"(fn ran [a b]\n  (if (< a b)\n    (concat [a] (ran (inc a) b))\n     []))","problem":34,"user":"4e5676b2535d8a8b8723a282"},{"problem":34,"code":"(fn [s e]\n  (loop [c 0 res []]\n    (if (= (+ s c) e)\n      res\n      (recur (inc c) (conj res (+ s c))))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn [b a]\n  (loop [r [] x b]\n    (if\n      (< x a)\n      (recur (conj r x) (inc x))\n      r\n    )\n  )\n)","problem":34,"user":"4ffb3c50e4b0678c553fc3c8"},{"code":"(fn r [low high]\n  (loop [series '(), current low]\n    (if (< current high)\n      (recur (cons current series) (inc current))\n      (reverse series))))","problem":34,"user":"4ff31e13e4b0678c553fc346"},{"code":"#(take (- %2 %) (iterate inc %) )","problem":34,"user":"535bd464e4b04ce2eb3ed2ad"},{"code":"(fn [start finish]\n  \t(take (- finish start) (iterate inc start))\n  )","problem":34,"user":"51ab734ee4b04e3dc0c27b34"},{"problem":34,"code":"(fn [x y]\n  (map #(+ % x)\n       (take (- y x) (iterate inc 0))\n       ))","user":"54448e84e4b032a45b869393"},{"code":"(fn new-range [start end]\n   (cond\n    (= start end) ()\n    :else (conj (new-range (inc start) end) start)))","problem":34,"user":"51177fbce4b0e0897831a60b"},{"problem":34,"code":"#(take (- %2 %1) ((fn rang [x] (lazy-seq (cons x (rang (inc x))))) %1))","user":"5576e78de4b05c286339e075"},{"code":"(fn [start end] (take (- end start)  (iterate #(+ % 1) start)))","problem":34,"user":"4f030af7535dcb61093f6a49"},{"problem":34,"code":"(fn [l h] (loop [l l ret '()] (if (< l h) (recur (+ l 1) (conj ret l)) (reverse ret))))","user":"53d86564e4b0e771c302546b"},{"problem":34,"code":"(fn [x y] (take(- y x)(iterate (partial + 1) x)))","user":"583d669ee4b089d5ab817d9a"},{"problem":34,"code":"(fn f\n    ([s e] (reverse  (f s (- e 1) [])))\n    ([s e r]\n     (cond\n      (<= s e) (recur (inc s) e (cons s r))\n      :else r)))","user":"5455a6d3e4b0e397800069e2"},{"problem":34,"code":"(fn r [start end] \n  (if (= start end) \n    [] \n    (conj (r start (dec end)) (dec end))))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"(fn [from to] (if (>= from to) () (take (- to from) (iterate inc from))))","problem":34,"user":"4ea092f4535d7eef308072a6"},{"problem":34,"code":";;(fn m ([x y] (m x y '()))\n;;      ([x y v] (if (= x y) (reverse v) (recur (inc x) y (cons x v)))))\n\n; #(repeat (- %2 %1) \n#(take (- %2 %1) (iterate inc %1))","user":"591d182ee4b09b4ee5954c10"},{"problem":34,"code":"#(loop [a %1 col []]\n   (if (>= a %2)\n     col\n     (recur (inc a) (conj col a))))","user":"56795deae4b05957ce8c6187"},{"problem":34,"code":"(fn ran [lo hi]\n  (if (= lo hi)\n      '()\n      (cons lo (ran (+ lo 1) hi))))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [lower upper] (take (- upper lower) (iterate inc lower)))","problem":34,"user":"4e976f79535dbda64a6f6b55"},{"problem":34,"code":"#(map-indexed (fn [one, i] (+ one %1)) (take (- %2 %1) (repeat 1)))","user":"552621d0e4b0ffed3738f914"},{"code":"(fn [n m]\n  (loop [n n m m result []]\n    (if (>= n m) result\n      (recur (inc n) m (conj result n)))))","problem":34,"user":"51a4416ae4b0def3c5c5868c"},{"problem":34,"code":"(fn my-not [start end]\n    (when (< start end)\n      (cons start (my-not (inc start) end))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":34,"code":"#(loop [begin %1 end %2 lst '()]\n\t(if (= begin end) lst\n      \t(recur begin (dec end) (cons (dec end) lst))))","user":"59fea630e4b01bb0ae8afd10"},{"code":"(fn [l u]\n  (let [dif (inc (- u l))]\n    (loop [n 1, result [], i l]\n      (if (= n dif)\n        result\n        (recur (inc n) (conj result i) (inc i))))))","problem":34,"user":"4dcc2435535d5973398f9290"},{"problem":34,"code":"(fn [a b]\n   (loop [start a end b l (list a)]\n     (if (< (first l) (- end 1))\n       (recur (inc start) end (conj l (inc start)))\n       (reverse l) )))","user":"57752a2de4b0979f89651613"},{"problem":34,"code":"(fn my-range [x y]\n  (reductions + x (repeat (dec (- y x)) 1)))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [a b]\n  (let [n (- b a)]\n    (take n (iterate inc a))))","problem":34,"user":"52127ee4e4b0d32679a5063c"},{"problem":34,"code":"(fn [start finish]\n  (let [endpoint (dec start)]\n  (loop [j (dec finish) out ()]\n    (if (= j endpoint)\n      out\n      (recur (dec j) (conj out j))))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn my-range [n, m]\n  (take (- m n) (iterate inc n))\n)","problem":34,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":34,"code":"(fn rng [start end]\n  (loop [x start data []]\n    (if (= x end)\n      data\n      (recur (inc x) (conj data x)))))","user":"5cbb0436e4b026601754b9cc"},{"code":"(fn [x1 x2] \n  (loop [x (dec x2) rg '()] \n    (if (= x (dec x1)) \n      rg \n      (recur (dec x) (cons x rg)))))","problem":34,"user":"5111330de4b09ff0d31c7ca8"},{"problem":34,"code":"#(loop [acc '() y (- %2 1)] (if (< y %1) acc (recur (cons y acc) (- y 1))))","user":"56d439d4e4b0ea9b8538f7b6"},{"problem":34,"code":"(fn [from to]\n  (reverse\n    (loop [x from\n           r '()]\n      (if (< x to)\n        (recur (inc x)\n               (cons x r))\n        r))))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":34,"code":"#(loop [b %1\n        e %2\n        r []]\n   (if (< b e)\n   \t (recur (inc b) e (conj r b))\n     r))","user":"5a720177e4b0512ff01cda96"},{"code":"(fn mrange [x y] (if (= x y) '() (cons x (mrange (inc x) y))))","problem":34,"user":"5006474ce4b0678c553fc481"},{"problem":34,"code":"(fn counter [x y] \n      (if (coll? x)\n        (if (= (inc (last x)) y)\n          x\n          (counter (conj x (inc (last x))) y) \n          )\n        (counter (conj [] x) y)\n        ))","user":"5400e918e4b0de5c41848619"},{"problem":34,"code":"(fn [from to]\n    (take (- to from) (iterate inc from))\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [idx start\n         result '()]\n    (if (= idx end)\n      result\n      (recur (+ idx 1) (concat result [idx])))))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":34,"code":"(fn my-range\n  [min-val max-val]\n  (if (< min-val max-val)\n    (cons min-val (my-range (inc min-val) max-val))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":34,"code":"(fn myRange [low high]\n  (if (>= low high)\n      '()\n       (conj (myRange (+ low 1) high) low)))","user":"5aa5951ae4b0d174b936c899"},{"problem":34,"code":"(fn [mi ma] (loop [end ma ml '()]                                   \n              (if (= end mi) ml (recur (dec end) (cons (dec end) ml) ))))","user":"5804b491e4b0a837a8b30cac"},{"problem":34,"code":"#(loop[l %2 w '()](if (= %1 l) w (recur (dec l) (conj w (dec l)))))","user":"5638d2d1e4b0bfe05bf117eb"},{"code":"(fn rnge [z,a] \n  (reduce \n   (fn a [x, y]\n     (if (> 1 (count x))\n       (conj x y)\n       (conj x (+ (last x) 1))))\n   []\n   (take (- a z) (repeat z))))","problem":34,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn[l,u](take (- u l) (iterate inc l)))","problem":34,"user":"52d66ca0e4b09f7907dd135c"},{"problem":34,"code":"(fn [lower upper] (loop [lst '() limit lower]\n                        (if (>= limit upper)\n                          (reverse lst)\n                          (recur (conj lst limit) (+ 1 limit)))))","user":"55d1aa33e4b0e31453f64a48"},{"code":"(fn [x1 x2]\n  (take (- x2 x1) (iterate inc x1) ))","problem":34,"user":"5360f043e4b0243289761e3c"},{"code":"(fn get-range \n  ([start end] (get-range 0 (- end (+ start 1)) (list (- end 1))))  \n  ([pointless number output]    \n    (if (> number 0)\n      (get-range 0 (- number 1) (conj output (- (first output) 1)))\n      output)))","problem":34,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":34,"code":"(fn [a b]\n\t(loop [rang [] current a finish b]\n\t\t(if (= current finish)\n\t\t\trang\n\t\t\t(recur (conj rang current) (inc current) finish)\n\t\t)))","user":"58b985e0e4b0888cdc949ccc"},{"problem":34,"code":"(fn [start stop]\n    (reductions\n      (fn [acc v] (inc acc))\n      start\n      (repeat (- stop start 1) 0)))","user":"56eaad95e4b04a395b9a040f"},{"problem":34,"code":"(fn [start end]\n  (take (- end start) (iterate inc start))\n)","user":"543bb568e4b032a45b869334"},{"problem":34,"code":"(fn myrange [x y] (if (= x y) '() (conj (myrange (inc x) y) x)))","user":"546692aee4b01be26fd746e7"},{"problem":34,"code":"(fn my-range \n  [s n]\n  (let [l (- n s)] \n    (take l (iterate inc s))))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":34,"code":"(fn my-range [a b]\n  (if (= a (dec b))\n    [a]\n    (concat [a] (my-range (inc a) b))))","user":"5c8cfff8e4b048ec896c5996"},{"code":"#(take (- %2 %) (iterate inc %1))","problem":34,"user":"4e8510e7535db62dc21a62e7"},{"problem":34,"code":"(fn [low high]\n  (take-while #(< % high) (iterate inc low)))","user":"58ec1e63e4b056aecfd47d54"},{"problem":34,"code":"(fn r2 [a b]\n    (if (= a b) \n        '()\n        (cons a (r2 (inc a) b))))","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"(fn rang [s e]\n  (reduce (fn [n m] (concat n [(inc (last n))]))\n          [s]\n          (repeat (- (dec e) s) 0)))","problem":34,"user":"4faac363e4b081705acca200"},{"problem":34,"code":"(fn my-range [s n]\n\t(if (= s n) '()\n\t\t(cons s (my-range (inc s) n)))\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":34,"code":"(fn my-range [start stop] \n  (if (>= start stop)\n    '()\n    (cons start (my-range (inc start) stop))))","user":"5c6e7cc1e4b0fca0c1622752"},{"code":"(fn a ([from to] (a from to [])) \n      ([from to result] (if (= from to) \n                            result \n                            (recur (inc from) to (conj result from)))))","problem":34,"user":"50992197e4b0cae2931060ae"},{"problem":34,"code":"(fn r [start end] (if (= start end) [] (concat [start] (r (inc start) end))))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn [low end] \n  (take (- end low) (iterate #(+ % 1) low \n   ))\n  )","problem":34,"user":"53852e84e4b06839e8705efd"},{"problem":34,"code":"(fn rng [x y]\n  (if (= x y) nil\n    (cons x (rng (inc x) y))\n    ))","user":"6045582fe4b02d28681c77b6"},{"problem":34,"code":"#(loop [i % x []] (if (= i %2) x (recur (inc i) (conj x i))))","user":"55c3f19de4b0e31453f64991"},{"code":"(fn a [s e] (if (= s e) () (cons s (a (inc s) e))))","problem":34,"user":"4f88942be4b033992c121c6a"},{"problem":34,"code":"(fn rnge \n   [low high] \n   (if (= low high)\n     '() \n     (conj (rnge (inc low) high) low)))","user":"535558b9e4b04ce2eb3ed25a"},{"problem":34,"code":"(fn ranger\n([x y] (ranger x y (list x)))\n([x y s]\n (if (= (dec y) (last s))\n   s\n   (ranger x y (concat s (list (inc (last s))))))))","user":"60b7ef35e4b0e0fa5f1b4254"},{"code":"(fn [start end]\n  (loop [xs [start]]\n    (let [i (+ 1 (last xs))]\n      (if (< i end)\n        (recur (conj xs i))\n        xs))))","problem":34,"user":"52ba6d0be4b07a9af57922d2"},{"code":"#(letfn [(myrange [x y] (if (<= y x) (list) (conj (myrange (inc x) y) x)))]\n  (myrange %1 %2))","problem":34,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn ranges\n  ([start end] (ranges start end []))\n  ([start end list]\n      (if (= start end) \n        list \n        (ranges (inc start) end (conj list start))\n      )\n  )\n)","problem":34,"user":"4f542fd9e4b0a7574ea717db"},{"code":"(fn [x y]\n  (take-while #(< % y) (iterate inc x)))","problem":34,"user":"4f8aa2f9e4b02e764a0a516f"},{"code":"#(loop [n %1\n        res []]\n   (if (< n %2)\n     (recur (inc n) (conj res n))\n     res))","problem":34,"user":"4dc21233535d020aff1edf92"},{"code":"(fn [start end] \r\n  (loop [result (list (dec end)) start start]\r\n    (if (= (first result) start)\r\n      result\r\n      (recur (cons (dec (first result)) result) start))))","problem":34,"user":"4dadc6f2c9a9d6ed4099dc57"},{"problem":34,"code":"(fn [x y] (take (- y x) (iterate inc x)) )","user":"58eba5cce4b056aecfd47d41"},{"code":"(fn[a b] \n (take (- b a) (iterate inc a)))","problem":34,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":34,"code":"#(take (- %2 %1) ((fn f [x] (lazy-seq (cons x (f (inc x))))) %1))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":34,"code":"(fn my-range [from to]\n    (if (>= from to)\n        nil\n        (cons from (my-range (inc from) to))))","user":"546c1f73e4b00cfc9eacc175"},{"problem":34,"code":"(fn [lo hi]\n  (loop [x lo\n         res []]\n    (if (= x hi)\n      res\n      (recur (inc x) (conj res x))\n      )\n    )        \n  )","user":"55fd0d19e4b0f488688e067a"},{"code":"(fn ran [lo hi]\n  (if (< lo hi)\n  (cons\n    lo\n    (lazy-seq (ran (inc lo) hi)))\n  nil))","problem":34,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"#(loop [start %1, end %2, res []] (cond (= start end) res\n                                        :else (recur (+ start 1) end (conj res start))))","problem":34,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":34,"code":"(fn [from to]\n  (loop [curr from\n         acc []]\n    (if (= curr to)\n      acc\n      (recur (inc curr) (conj acc curr)))))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":34,"code":"(fn [start stop]\n  (loop [i start out []]\n    (if (= i stop)\n      out\n      (recur (inc i) (conj out i)))))","user":"55c68089e4b0e31453f649c4"},{"problem":34,"code":"(fn vasya ([x y] (vasya x y '()))\n  \t\t  ([x y z] (if (>= x y)\n                       z\n                       (recur x (dec y) (cons (dec y) z)))))","user":"55cf0d0ee4b0e31453f64a2b"},{"problem":34,"code":"(fn my-range\n  ([start end] (my-range start end '()))\n  ([num end result]\n   (if (>= num end)\n     (reverse result)\n     (my-range (inc num) end (conj result num)))))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn my-range [start finish]\n  (take (- finish start)\n        (iterate inc start)))","problem":34,"user":"4f82e14be4b033992c121c0c"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (take-while (partial > end) (iterate inc start)))","user":"548f19a8e4b0e286459a1231"},{"code":"#((fn my-range [beg end ls] (if (= beg end)\n                     ls\n                     (flatten (list beg (my-range (inc beg) end ls))))) %1 %2 '())","problem":34,"user":"5328e449e4b09d4e7a9b550c"},{"code":"(fn myrange[start end & {:keys [arr] :or {arr ()}}]\n  (if (>= start end)\n    arr\n    (myrange (inc start) end :arr (concat arr [start])))\n  )","problem":34,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"(fn [alpha omega] (take (- omega alpha) (iterate inc alpha)))","problem":34,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":34,"code":"(fn my-range\n  ([start stop]\n   (my-range start stop '()))\n  ([start stop coll]\n   (if (>= start stop)\n     (reverse coll)\n     (recur (inc start) stop (conj coll start)))))","user":"579f89d5e4b05302be0b72ff"},{"problem":34,"code":"(fn [lower upper]\n  (loop [x lower result []]\n    (if (>= x upper)\n      result\n      (recur (inc x) (conj result x)))))","user":"5d0b210ee4b0cc9c9158822b"},{"problem":34,"code":"(fn  [start stop]\n  (into '() (reverse\n             (loop [xs [] start start stop stop]\n               (if (>= start stop)\n                 xs\n                 (recur (conj xs start ) (inc start) stop))))))","user":"557c647ce4b05c286339e0c3"},{"code":"(fn ! [x y]\n  (if (= x y)\n    (list )\n    (concat (list x) (! (+ x 1) y))))","problem":34,"user":"523361d8e4b0f0b72fabf405"},{"problem":34,"code":";; (fn rg [start end]\n;;   (loop [result []\n;;          n start]\n;;     (if (= n end)\n;;       result\n;;       (recur (conj result n) (inc n)))))\n(fn rng [start end]\n  (take-while #(< % end) (iterate inc start)))","user":"553e3260e4b0a04f792994eb"},{"code":"(fn rang ([] (rang 0 Double/POSITIVE_INFINITY 1))\r\n  ([end] (rang 0 end 1))\r\n  ([start end] (rang start end 1))\r\n  ([start end step]\r\n   (lazy-seq\r\n    (let [b (chunk-buffer 32)\r\n          comp (if (pos? step) < >)]\r\n      (loop [i start]\r\n        (if (and (< (count b) 32)\r\n                 (comp i end))\r\n          (do\r\n            (chunk-append b i)\r\n            (recur (+ i step)))\r\n          (chunk-cons (chunk b) \r\n                      (when (comp i end) \r\n                        (rang i end step)))))))))","problem":34,"user":"4dbe8f7f535d020aff1edf64"},{"code":"(fn [lo hi] \n  (loop [lo lo acc []]\n    (if (>= lo hi) acc\n      (recur (inc lo) (conj acc lo)))))","problem":34,"user":"4ed188c8535d44c135fd68cf"},{"code":"#(loop[x %1 y[]](if(= %2 x)y(recur (inc x)(conj y x))))","problem":34,"user":"52ce4c32e4b07d0d72b2738d"},{"problem":34,"code":"(fn [bl el]\n        (loop [acc [] ne bl]\n          (if (< ne el)\n            (recur (conj acc ne) (inc ne))\n            acc)))","user":"5679a4d0e4b05957ce8c618d"},{"problem":34,"code":"(fn [b e]\n  (loop [current b\n         result []]\n    (if (>= current e)\n      result\n      (recur (inc current) (conj result current)))))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":34,"code":"(fn my-range\n  [x y]\n  (if (= x y)\n    []\n    (cons x (my-range (inc x) y))))","user":"5574c172e4b05c286339e059"},{"code":"#(reduce\n  (fn [n m]\n    (conj n (- (first n) 1))\n  )\n  (list (- %2 1))\n  (repeat (- (- %2 %1) 1) 1)\n )","problem":34,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":34,"code":"(fn [from to] (take (- to from) ((partial iterate inc) from)))","user":"5a634ff0e4b0512ff01cd995"},{"problem":34,"code":"(fn [i e]\n  (loop [r (vector) i i]\n    (if (> i (- e 1))\n      r\n      (recur (conj r i) (inc i)))))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":34,"code":"(fn abc\n  [start end]\n  (if (= start end)\n    ()\n    (concat (list start) (abc (inc start) end))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"code":"(fn [start finish]\n  (loop [res (list start) ]\n    (if (= finish  (inc (first res)))\n      (reverse res)\n      (recur (conj res (inc (first res)))) \n      )\n    )\n  )","problem":34,"user":"4fc18846e4b081705acca331"},{"code":"(fn my-range [a b]\n  (if (= a b) (list) (cons a (my-range (+ 1 a) b))))","problem":34,"user":"4ff2430ae4b0678c553fc336"},{"problem":34,"code":"(fn my-range\n  [low high]\n  (if-not (> (- high low) 0)\n    '()\n    (conj (my-range (inc low) high) low)))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn myrange\r\n  ([start end] (myrange start end []))\r\n  ([start end memo] \r\n    (if (= start end) \r\n      memo\r\n      (myrange (inc start) end (conj memo start))\r\n    )))","problem":34,"user":"4db135081254ad5b4805fa67"},{"problem":34,"code":"(fn f34\n  [a b]\n  (let [n (- b a)]\n    (if (> n 0) \n      (take n (iterate inc a)))))","user":"5bd75870e4b0ed4b8aab4bc0"},{"code":"(fn [x y] (take (- y x)  (iterate inc x)))","problem":34,"user":"535943b3e4b04ce2eb3ed295"},{"problem":34,"code":"(fn r [a b] \n  (if (>= a b) \n    '() \n    (conj (r (inc a) b) a)))","user":"5e18bd30e4b0dc95940084fa"},{"problem":34,"code":"#(reverse (loop [add %1 this? %2 result '()]\n   (if (= add this?)\n     result\n     (recur (inc add) this? (conj result add)))))","user":"5c813b27e4b0c8042a70ce22"},{"code":"(fn [s e]\n  (take (- e s)\n    (iterate #(inc %) s)))","problem":34,"user":"4fba0877e4b081705acca2dd"},{"code":"(fn [start end] (loop [result [] s start ]\n        (if (= s end) result\n           (recur (conj result s) (inc s) ))))","problem":34,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [from to]\n  (loop [rv [] n from]\n    (if (< n to)\n      (recur (conj rv n) (inc n))\n      rv\n      )))","problem":34,"user":"527ba695e4b03e8d9a4a7596"},{"problem":34,"code":"(fn my-range\n    [start end]\n    (loop [i start coll []]\n      (if (>= i end)\n        coll\n        (recur (inc i) (conj coll i))\n        )\n      )\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"problem":34,"code":"(fn [x y] (loop [a x b y arr []] (if (< a b) (recur (inc a) b (conj arr a)) (seq arr))))","user":"551535cee4b055c2f668d4df"},{"problem":34,"code":"(fn [lower upper]\n      (take-while #(< % upper)\n        (iterate inc lower)))","user":"532f7e12e4b019098a6f8b4e"},{"problem":34,"code":"#(loop [n %1 s []]\n   (if (= n %2) (seq s)\n     (recur (inc n)(concat s [n]))))","user":"5a95e50be4b0d174b936c760"},{"code":"(fn myRange[min max]\n  (if (<= (- max min) 0)\n    '()\n    (cons min (myRange (inc min) max))))","problem":34,"user":"525d490ae4b0cb4875a45d70"},{"code":"(fn my-range [x y]\n\t(take-while #(< % y) (iterate inc x)))","problem":34,"user":"52e657e4e4b09f7907dd1472"},{"problem":34,"code":"#(loop [x % y %2 result [] ] (if (< x y) (recur  (inc x) y (conj result x)) result))","user":"546f926fe4b00cfc9eacc1af"},{"problem":34,"code":"(fn \n  [s e]\n  (take (- e s)\n        (iterate inc s)))","user":"5cb71f35e4b026601754b961"},{"code":"(fn f ([x y] \n  (if (< x y) (cons x (f (+ 1 x) y)) '())))","problem":34,"user":"50729f67e4b0e3170b5a868e"},{"code":"(fn [l h]\n  ((fn [res n]\n     (if (< n l) res\n       (recur (conj res n) (- n 1))))\n   '() (- h 1)))","problem":34,"user":"51da631be4b02ceefd947766"},{"problem":34,"code":"(fn [start end]\n  (loop [s start e end c start acc '()]\n    (if (= c e)\n      (reverse acc)\n      (recur (inc s) e (inc c) (cons s acc)))))","user":"554884d4e4b0a04f7929955c"},{"code":"(fn myrange [x y] (reverse (take (- y x) (iterate dec (dec y)))))","problem":34,"user":"4ee01905535d10e5ff6f534c"},{"code":"#(let [f (fn f [x] (cons x (lazy-seq (f (inc x)))))] (take-while (partial > %2) (f %)))","problem":34,"user":"511d11d7e4b022853b0e079f"},{"problem":34,"code":"(fn [start end]\n  (loop [acc [] n start]\n    (if (== n end)\n      acc\n      (recur (conj acc n) (inc n)))))","user":"55e70e8de4b050e68259b490"},{"problem":34,"code":"(fn f\n  ([a b](f a b '()))\n  ([a b acc](\n             if (>= a b)\n             \tacc\n             \t(recur a (dec b) (conj acc (dec b)) )\n             )\n  ) \n)","user":"56ae4c21e4b03c432f18735c"},{"problem":34,"code":"(fn num-range [start end]\n  (when (< start end)\n    (lazy-seq (cons start (num-range (inc start) end)))))","user":"5c219c0fe4b07e362c230581"},{"code":"#(loop [acc [] curr %1 end %2 ]\n   (if (= curr end)\n     acc\n     (recur (conj acc curr) (inc curr) end)))","problem":34,"user":"5131d817e4b06942423563ca"},{"problem":34,"code":"(fn mrange [n1 n2]\n  (cond\n    (= n1 n2) '()\n    :else (cons n1 (mrange (inc n1) n2))\n    )\n  )","user":"51ad808ee4b09397d5109784"},{"problem":34,"code":"(fn [low high]\n  (loop [i (dec high) ret '()]\n    (if (< i low)\n      ret\n      (recur (dec i) (cons i ret)))))","user":"5151d574e4b03e678e393ae0"},{"code":"(fn se [s e] (for [x (iterate inc s) :while (< x e)] x))","problem":34,"user":"52e980b3e4b09f7907dd14af"},{"problem":34,"code":"(fn [low high]\n  (loop [i low\n         coll []]\n    (if (>= i high)\n      coll\n      (recur (inc i) (conj coll i)))))","user":"58b0bbc5e4b0ebc645576ce6"},{"problem":34,"code":"#(loop\n   [start %1\n    end %2\n    result []]\n   (if (= start end) \n     result \n     (recur (inc start) end (conj result start))\n     )\n   )","user":"5510d948e4b06e50f9beb18d"},{"code":"(fn r [s e] (if (< s e) (cons s (r (inc s) e))))","problem":34,"user":"510fe537e4b04c71fce993dd"},{"code":"(fn r [start end]\n            (let [rng (list start)]\n                 (if (>= start (dec end))\n                     (flatten rng)\n                     (flatten (cons rng (r (inc start) end))))))","problem":34,"user":"500854c4e4b028e089d3518c"},{"problem":34,"code":"(fn\n  ([a b]\n   (take (- b a)\n         (iterate inc a))))","user":"5976da27e4b01722bebd4ce3"},{"code":"#(loop [s %1\n        e %2\n        acc '()]\n     (cond\n      (= s e) acc\n      :else (recur s (dec e) (conj acc (dec e)))\n    )\n   )","problem":34,"user":"51d67516e4b0154f82ab92f0"},{"problem":34,"code":"(fn [start end] \n  (loop [xstart start xlist ()]\n    (if (= xstart end) (reverse xlist)\n    \t(recur (inc xstart) (conj xlist xstart)))))","user":"56e53d2fe4b02e7e935eb6bc"},{"code":"(fn [start end] \r\n   (loop [elem start acc ()]\r\n      (if (= elem end) \r\n        (reverse acc) \r\n        (recur (inc elem) (cons elem acc)))))","problem":34,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":34,"code":"(fn [a b] (loop [x a y b res []] (if (< x y) (recur (inc x) y (conj res x)) res)))","user":"4f035fbe535dcb61093f6a92"},{"problem":34,"code":"(fn [f c]\n  (loop [coll '()\n         x (dec c)]\n    (if (< x f)\n      coll\n      (recur (conj coll x) (dec x)))))","user":"5a47423be4b05d388ecb6b52"},{"code":"(fn [x y]\n  (loop [l '()\n         n x]\n    (if (= n y)\n      (reverse l)\n      (recur (conj l n)\n             (inc n)))))","problem":34,"user":"4fecd35fe4b0681fd128dcab"},{"code":"(fn ab [n m]\n  (if (= m n)\n      []\n      (cons n (ab (inc n) m))))","problem":34,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [f t]\n  (loop [res '() i f]\n    (if (= i t)\n      (reverse res)\n      (recur (conj res i) (inc i)))))","problem":34,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn [i j]\n  (loop [res [] i i]\n   (if (= i j)\n     (seq res)\n     (recur (conj res i) (inc i)))))","problem":34,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn myrange [x y] \n  (if (= x y) () \n              (cons x (myrange (inc x) y))))","problem":34,"user":"4f048f67535dcb61093f6bd3"},{"problem":34,"code":"(fn [st en]\n   (loop[x st r `()]\n     (if (> x (- en 1))\n        (sort r)\n\t(recur (inc x) (conj r x)))\n       ))","user":"5cee4bc9e4b0aaa82f1129dc"},{"problem":34,"code":"(fn [x y]\n  (reverse (loop [i x acc '()]\n    (if (= i y)\n      acc\n      (recur (+ i 1) (conj acc i))))))","user":"560ac5cae4b05f002753df09"},{"problem":34,"code":"(fn [a b] (loop [result [] x a y b] (if (< x y) (recur (conj result x) (inc x) y) result)))","user":"569c40cee4b0542e1f8d1462"},{"code":"#(take-while (fn [x] (false? (= x %2))) (iterate inc %1))","problem":34,"user":"5186571de4b0da5a5be3bad1"},{"code":"#(loop [beg %1 end %2 ra '()]\n  (if (= beg end)\n    ra\n    (recur beg (dec end) (cons (dec end) ra))))","problem":34,"user":"505a2f3be4b03d2efce48c5b"},{"code":"(fn f [a b]\r\n  (if (< a b)\r\n    (cons a (f (inc a) b))))","problem":34,"user":"4f047177535dcb61093f6bc6"},{"problem":34,"code":"(fn [a b]\n  (letfn [(rcr [acc x] (if (>= x b) acc (recur (cons x acc) (inc x))))]\n    (reverse (rcr [] a))))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [f l]\n  (loop [c f res ()]\n    (if (= c l) (reverse res)\n      (recur (inc c) (cons c res)))))","problem":34,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [s e] (take (- e s)(iterate inc s)))","problem":34,"user":"52614bc1e4b03e8d9a4a705c"},{"code":"(fn [n m]\n  (take (- m n) (iterate inc n)))","problem":34,"user":"4ec5a6ee535d6d7199dd36ae"},{"code":"#(loop [from %1 coll []]\n    (if (= from %2)\n      coll\n      (recur (inc from) (conj coll from))\n    )\n  )","problem":34,"user":"4fe8d1b5e4b0547ebccb2425"},{"problem":34,"code":"(fn myrange [start finish]\n  (lazy-seq (loop [end (- finish 1) l '()]\n              (if (< end start) \n                l\n                (recur (dec end) (cons end l))))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":34,"code":"(fn my-range [lo hi] (if (= lo hi) '()\n                       (cons lo (my-range (inc lo) hi))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"code":"(fn implement-range-solution [b e]\n  (if  (= b e)\n    nil\n    (cons b (implement-range-solution (inc b) e))))","problem":34,"user":"4ec3650f535dcc7ae8597d56"},{"problem":34,"code":"(fn rango\n  [nI nF]\n  (loop [i nI\n         result ()]\n    (if (= i nF) (reverse result)\n      (recur (inc i)\n             (cons i result)))))","user":"59e4e3cbe4b08badc2a0c54a"},{"code":"(fn my-range [a b] \n  (if (< a b)\n    (conj (my-range (inc a) b) a)\n    '()))","problem":34,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":34,"code":"(fn [l h] \n    (loop [x l y nil]\n          (if (= x h)\n              (reverse y)\n              (recur (+ x 1) (cons x y)))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":34,"code":"(fn [start stop]\n  (loop [result []\n         n start]\n    (if (> stop n)\n      (do (println n) (recur (conj result n) (inc n)))\n      result)))","user":"53acca34e4b047364c044460"},{"problem":34,"code":"(fn [a b] (->> a (iterate inc) (take (- b a))))","user":"604a30c6e4b02d28681c77f0"},{"code":"(fn [f t] (loop [r [] i f] (if (= i t) r\n  \t\t\t      (recur (conj r i) (inc i)))))","problem":34,"user":"4ea4e98a535d7eef308072ce"},{"problem":34,"code":"(fn [start stop] (loop [rst []\n                                x start]\n                           (if (>= x stop)\n                             rst\n                             (recur (conj rst x) (inc x)))))","user":"5da5a1eee4b000c986472c04"},{"problem":34,"code":"(fn altRange\n  [start end]\n  (loop [result []\n         n start]\n    (if (< n end)\n      (recur (conj result n) (inc n))\n      result)))","user":"5e9636fee4b0fbed045a3816"},{"code":"(fn f\n   [x y]\n   (if (< x y)\n     (cons x (f (inc x) y))))","problem":34,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn funkkari [a b] (if (< a b) (conj (funkkari (inc a) b) a) '()))","problem":34,"user":"52e54040e4b09f7907dd145c"},{"problem":34,"code":"(fn [s e]\n  (loop [x s\n         res []]\n    (if (= x e)\n      res\n      (recur (inc x)\n             (conj res x)))))","user":"5d6042f2e4b0c9e5857d5006"},{"problem":34,"code":"(fn [a, b] (take (-  b a) (iterate inc a)))","user":"6034e358e4b0d5df2af222d1"},{"problem":34,"code":"#(loop [s % e %2 coll []]\n   (if (< s e)\n     (recur (inc s) e (conj coll s))\n     coll))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"(fn rng [lower upper]\n  (if (= lower upper) ()\n        (concat (list lower) (rng (inc lower) upper))))","problem":34,"user":"5159849ce4b0394f658fe236"},{"problem":34,"code":"(fn my-range [fromIncl toExcl]\n  (if (>= fromIncl toExcl)\n    ()\n    (lazy-seq (cons fromIncl (my-range (inc fromIncl) toExcl)))))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"(fn [init until]\n  (take-while #(< %1 until) (iterate inc init)))","problem":34,"user":"51f66891e4b06ff1c25c52c1"},{"code":"#(take (- %2  %1) (iterate inc %1))","problem":34,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"problem":34,"code":"(fn myrange\n  ([x y]\n   (myrange x y []))\n([x y acc] \n  (if (= y x) \n    acc \n    (myrange (inc x) y (conj acc x)))))","user":"529c722de4b04e0c58e87b63"},{"problem":34,"code":"(fn [n m]\n  (let [rec\n        (fn [n a]\n    (if (= n m)\n      (reverse a)\n      (recur (+ n 1) (cons n a))))]\n  (rec n '())))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn [start end]\n  (loop [index start result []]\n    (if (= index end)\n        result\n        (recur (inc index) (conj result index)))))","problem":34,"user":"5057242fe4b0012181721986"},{"code":"(fn [s f]\n      (take (- f s) (iterate inc s)))","problem":34,"user":"50f48298e4b004d364930527"},{"code":"(fn [a, b] (take (- b a) (iterate #(+ 1 %) a)))","problem":34,"user":"5220ef05e4b0e6a83c8925b8"},{"code":"(fn [start end]\n  ((fn range-helper [current max]\n    (let [cur-max (last current)]\n      (if (< cur-max max)\n        (range-helper (conj current (inc cur-max)) max)\n        current))) \n  [start] (dec end)))","problem":34,"user":"4e93600b535dbda64a6f6b0e"},{"code":"(fn [start end]\n  (loop [i start acc []]\n    (if (= i end)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"51a768e0e4b0da5f497bde84"},{"problem":34,"code":"(fn [x,y]\n  (loop [acc []\n         i x]\n    (if (< i y)\n      (recur (conj acc i) (+ i 1))\n      acc)))","user":"57597fade4b02ea11479931d"},{"code":"(fn brains\n  [lo hi]\n  (println lo)\n  (if (= lo (dec hi))\n    (list lo)\n    (conj\n      (brains\n        (inc lo)\n        hi)\n      lo)))","problem":34,"user":"504e12ade4b078edc5f593b7"},{"code":"#(loop [x %1 acc '[]]\n   (if (= x %2)\n     acc\n     (recur (+ x 1) (conj acc x))))","problem":34,"user":"50f3bd98e4b041536e2eca3a"},{"problem":34,"code":"(fn range-implementation\n  ([first-index second-index]\n   (range-implementation first-index second-index []))\n  ([first-index second-index my-coll]\n   (if (= first-index second-index)\n      my-coll\n      (range-implementation\n        (inc first-index)\n        second-index\n        (conj my-coll first-index)))))","user":"6033f8e9e4b0d5df2af222c6"},{"problem":34,"code":"(fn [initial-value bound]\n  (take-while #(< % bound) (iterate (partial + 1) initial-value)))","user":"5d35f997e4b01671435dbd1a"},{"problem":34,"code":"(fn _ [start end]\n              (if (< start end)\n                (cons start (_ (inc start) end))\n                []\n                )\n              )","user":"5433a07be4b0b6b47310fce0"},{"problem":34,"code":"(fn my-range [start end]\n  (take-while #(< % end) (iterate inc start)))","user":"608256d7e4b0736b099e42da"},{"problem":34,"code":"(fn [start end]\n    (loop [i start\n           r []]\n      (if (< i end)\n        (recur (inc i)\n               (conj r i))\n        r)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn [ini fim]\r\n  (take (- fim ini) \r\n        (iterate inc ini)))","problem":34,"user":"50576483e4b001218172198b"},{"problem":34,"code":"(fn my-range\n  ([s f] (my-range s f []))\n  ([s f seq]\n   (if (= s f)\n     seq\n     (lazy-seq (my-range (inc s) f (conj seq s)))\n     )\n   )\n  )","user":"5e77ece9e4b085ba37836df3"},{"code":"(fn f [from to]\r\n  (take (- to from) (iterate inc from)))","problem":34,"user":"502ac868e4b0614b5299611a"},{"code":"(fn  [s e]\n  (loop [result [] from s to e]\n    (if (= from  to)\n       result\n      (recur (conj result from) (inc from) to))\n    ))","problem":34,"user":"50e90813e4b033b0e80d11e7"},{"code":"(fn rng\n\t([n end] (rng n [] end))\n\t([n numbers end]\n\t(if (= n end) numbers (cons n (rng (inc n) numbers end)))))","problem":34,"user":"51a89081e4b08d8ec191b814"},{"code":"(fn range2 [ss ee]\n  ((fn iter [s e res]\n    (if (>= s e)\n      res\n      (do\n      (iter (inc s) e (concat res (list s))))))\n      ss ee '()))","problem":34,"user":"4ff2ee54e4b0678c553fc340"},{"problem":34,"code":"(fn [low hi]\n  (take-while #(< % hi)\n              (iterate inc low)))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":34,"code":"(fn my-range [from to]\n  (loop [remains to \n         res '()] \n       (if (=  remains from)\n          res\n          (recur (- remains 1) (conj res (- remains 1)) )\n        )\n  )\n)","user":"59b0e877e4b0e1f4e384c8d3"},{"code":"(fn [low high] (take-while (partial > high) (iterate inc low)))","problem":34,"user":"4f4ff836e4b03ad3f0c10cf4"},{"code":"(fn _range [x y] (if(< x y) (cons x (_range (inc x) y))))","problem":34,"user":"537a1012e4b06839e8705e5c"},{"code":"#(loop [coll [ ]     n  %1]\n    (if  (= n  %2)\n          coll\n        (recur (conj coll n) (inc n)\n)))","problem":34,"user":"517945dce4b0684c1c981a43"},{"code":"(fn ! [a b] (if (= a b) nil (conj (! (inc a) b) a)))","problem":34,"user":"51780bfce4b0f89a8f53839c"},{"problem":34,"code":"(fn x [a b] \n  (if (< a b) \n    (conj (x (+ a 1) b) a)  \n    '()))","user":"5fdc6ad4e4b05ac5b16ea13a"},{"problem":34,"code":"#(loop [lst '[] i %1 j %2]\n   (if (= i j) lst \n     (recur (conj lst i) (inc i) j)))","user":"5f727cb0e4b02876ed9fd08e"},{"problem":34,"code":"(fn my-range\n  ([] (my-range 1))\n  ([n] (concat [n] (lazy-seq (my-range (inc n)))))\n  ([n0 n1] (take (- n1 n0) (my-range n0))))","user":"55ad2d97e4b03311e7b732a2"},{"problem":34,"code":"(fn\n  [lower upper]\n    (loop [l lower, u upper, seq ()]\n    (if (= l (- u 1))\n      (flatten (conj (lazy-seq [l]) seq))\n      (recur (inc l) upper (conj (lazy-seq [l]) seq)))))","user":"55a5e2f7e4b0acc240e31550"},{"problem":34,"code":"(fn [start end]\n  (letfn [(r [s e] \n             (if (< s e) \n               (cons s (lazy-seq (r (inc s) e)))))]\n    (r start end)))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn f [a b]\n  (if (= a b)\n      '()\n      (cons a (f (inc a) b))))","problem":34,"user":"50555c06e4b0ce54f56f03fa"},{"code":"(fn [start end]\n  (loop [xs []\n         v start]\n    (if (< v end)\n      (recur (conj xs v) (inc v))\n      xs)))","problem":34,"user":"4fc3a72ae4b081705acca342"},{"problem":34,"code":"(fn range* [start end]\n  (let [n (inc start)]\n    (cond\n   \t (>= start end) nil\n     :else (concat (list start) (range* n end)))))","user":"579e15a6e4b05b1deef9ae20"},{"code":"#(take (- %2 %) (iterate (partial + 1) %))","problem":34,"user":"4e9b230c535dbda64a6f6b75"},{"problem":34,"code":"(fn [start end]\n    (take (- end start)\n          (iterate inc start)))","user":"540c6a8ae4b0addc1aec6702"},{"problem":34,"code":"(fn my-range-iterate [s e]\n  (take (- e s) (iterate #(inc %) s)))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":34,"code":"(fn rng [begin end]\n  (when (< begin end)\n    (conj (rng (inc begin) end) begin)))","user":"55d1f231e4b0e31453f64a4e"},{"problem":34,"code":"#(loop [max %2\n       seq (list %1)\n       i (inc %1)\n       ]\n  (if (= i max)\n    (reverse seq)\n    (recur max (conj seq i) (inc i))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"(fn [s1 s2]\n  (take (- s2 s1) (iterate inc s1)))","problem":34,"user":"518a8c4be4b0df82f5685903"},{"problem":34,"code":"(fn range'\n  [x y]\n  (if (= x y)\n    '()\n    (conj (range' (inc x) y) x )))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":34,"code":"#(loop [start %1 acc []] (if (< start %2) (recur (inc start) (conj acc start)) acc))","user":"59497f51e4b07ddc2dafaddd"},{"code":"(fn my-range [start end]\n    (if (<= end start) ()\n     (cons start (my-range (inc start) end))))","problem":34,"user":"53487737e4b084c2834f4a59"},{"problem":34,"code":"(let [iteration (fn [lower-bound upper-bound acc]\n                  (if (= lower-bound upper-bound)\n                    (reverse acc)\n                    (recur (inc lower-bound) upper-bound (conj acc lower-bound))))]\n  (fn [lower-bound upper-bound] (iteration lower-bound upper-bound (list))))","user":"587100d6e4b01531a375e9f0"},{"code":"(letfn\n[\n(f [a] \n  (cons a (lazy-seq (f (inc a))))\n)(g [n m] (take (- m n) (f n)))]\ng\n)","problem":34,"user":"504efb61e4b0e7ad84dbc4a8"},{"problem":34,"code":"#((fn foo [i max]\r\n      (if (< i max)\r\n        (conj (foo (inc i) max) i)\r\n        '())) %1 %2)","user":"57a9b2dbe4b0a96607956233"},{"problem":34,"code":"#(loop [i (dec %2)\n        res nil]\n  (cond\n    (< i %1) res\n    :default\n      (recur\n        (dec i)\n        (cons i res))\n\n  )\n)","user":"5bb905dce4b0a20761a235c7"},{"problem":34,"code":"(fn [start end]\n (loop [n (dec end)\n        res '()]\n   (if (< n start)\n     res\n     (recur (dec n)\n            (cons n res)))))","user":"5defc177e4b093ff717275af"},{"problem":34,"code":"(fn rng\n  [start end]\n  (loop [sq ()\n         pos (- end 1)]\n    (if (>= pos start)\n      (recur (cons pos sq) (dec pos))\n      sq)))","user":"588e4e05e4b00487982d5188"},{"problem":34,"code":"#(loop [cur %1 end %2 l []]\n   (if (>= cur end)\n     l\n     (recur (inc cur) end (conj l cur )) \n   )\n   )","user":"52503747e4b0541d1855b828"},{"code":"#(letfn[( r [a b coll]\n            (if (= a b)\n              coll\n              (recur (inc a) b (cons a coll))))]\n  (reverse (r %1 %2 '())))","problem":34,"user":"4e31a101535deb9a81d77f1d"},{"code":"(fn [x y]\n  (take\n    (- y x)\n    (iterate inc x)\n  )\n)","problem":34,"user":"4f6fe5e4e4b07046d9f4efef"},{"problem":34,"code":"(fn [start stop]\n              (take (- stop start)\n                    (iterate #(inc %) start)))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn [& s] (take-while (partial > (last s)) (iterate inc (first s))))","problem":34,"user":"4e1b8106535d04ed9115e801"},{"code":"(fn x\n  ([s e] (x [(- e 1)] s (- e 2)))\n  ([a s e] (if (< e s) a (x (cons e a) s (- e 1)))))","problem":34,"user":"503de5aae4b06c4e0e1fa259"},{"code":"(fn [l h]\r\n  (take (- h l) (iterate inc l)))","problem":34,"user":"4f6a36eee4b07046d9f4ef99"},{"code":"(fn rang\n  ([start end]\n    (rang start end []))\n  ([start end sofar]\n    (cond (< start end) (rang (inc start) end (conj sofar start))\n          true sofar))\n)","problem":34,"user":"50e3ec87e4b0463d32072486"},{"problem":34,"code":"(fn f [x y] (if (= x y) '() (cons x (f (inc x) y))))","user":"56992162e4b0542e1f8d143c"},{"code":"(fn rng [x y] (lazy-seq (if (< x y) (cons x (rng (inc x) y)))))","problem":34,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn [m n]\r\n  (loop [x (dec n) result nil]\r\n    (if (>= x m)\r\n      (recur (dec x) (cons x result))\r\n      result)))","problem":34,"user":"4dd59d8b535dae65d5c462eb"},{"problem":34,"code":"(fn[minimum maximum]                                              \n  (loop [n minimum l []]\n    (if (= n maximum)\n      (apply list l) \n      (recur (+ n 1) (conj l n))\n      )      \n    ) \n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":34,"code":"#(loop [cur %1\n        target %2\n        result []]\n   (if (= cur target)\n     result\n     (recur (inc cur) target (conj result cur))))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn my-range\n  ([start stop]\n    (my-range start stop 1))\n  ([start stop step]\n    (if (>= start stop)\n        '()\n        (cons start (my-range (+ start step) stop)))))","problem":34,"user":"4e4b4564535dc968683fc4d3"},{"code":"(fn f [x y]\n   (if (< x y)\n    (cons x \n      (-> x\n       inc\n       (f y)))\n   ) \n )","problem":34,"user":"5191045ee4b0f8ef0be96bf3"},{"code":"(fn foo [start end]\r\n  (if (= start end)\r\n    []\r\n    (cons start (foo (inc start) end))))","problem":34,"user":"4e113a81535d04ed9115e7c5"},{"problem":34,"code":"#(loop [c %1\n        o []]\n   (if (= c %2) o\n     (recur (inc c) (conj o c))))","user":"59ddae03e4b01968742fed65"},{"problem":34,"code":"(fn implement-range [x y]\n  (take (- y x) (iterate inc x)))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [from to]\n  (let [count (- to from)]\n    (take count (iterate inc from))))","problem":34,"user":"525078b6e4b0541d1855b832"},{"code":"(fn r [a,s,e] (if (= s e) a (r (conj a s) (+ s 1) e))) '[]","problem":34,"user":"50ba5113e4b03e68e4411c7d"},{"problem":34,"code":"(fn [n x] (map-indexed (fn [i x] (+ x i)) (repeat (- x n) n)))","user":"5141e978e4b0b50abeb46b20"},{"problem":34,"code":"(fn [mn mx]\n  (take (- mx mn) (iterate inc mn)))","user":"54d2892fe4b0e8a36923e5f7"},{"problem":34,"code":"(fn  [from to]\n  (loop\n    [crs from\n     result ()]\n    (cond\n      (= crs to) (reverse result)\n      :else (recur (inc crs) (conj result crs))\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"code":"(fn [start stop]\n  (take (- stop start) (iterate #(+ % 1) start)))","problem":34,"user":"4eca7a87535d6d7199dd3705"},{"problem":34,"code":"(fn [start end]\n  (loop [i (dec end) result nil]\n    (if (= (inc i) start)\n      \tresult\n      \t(recur (dec i) (cons i result)))))","user":"5df175bce4b03c219ef1a34d"},{"problem":34,"code":"(fn \n   [start fin]\n   (reverse (loop [s start f (dec fin) r '()] \n     (if (= s f)\n       (conj r s)\n       (recur (inc s) f (conj r s))))))","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn [a b]\n  (loop [x a, r []]\n    (if (< x b) (recur (inc x) (conj r x)) r)))","problem":34,"user":"5161c6a7e4b009fba0926e38"},{"problem":34,"code":"(fn helper [initial limit]\n    (if (< initial limit)\n      (lazy-seq (cons initial (helper (inc initial) limit)))))","user":"5c3a896be4b0d62ef62d9f94"},{"code":"#(loop [x %1 y %2 n []]\n   (if (= x y)\n   n\n   (recur (inc x) y (conj n x))))","problem":34,"user":"5356dcbee4b04ce2eb3ed270"},{"code":"(fn rage [min max] (if (= min max) () (conj (rage (inc min) max) min)))","problem":34,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":34,"code":"(fn [start end]\n    (loop [x [start]]\n         (if (= (last x) (dec end))\n           x\n           (recur (conj x (inc (last x) ))))\n    ))","user":"50a3e2eae4b0ceace084d49a"},{"problem":34,"code":"#(loop [f %1 s '()]\n   (if (< f %2)\n     (recur (inc f) (conj s f))\n     (reverse s)))","user":"54de16cae4b024c67c0cf79c"},{"problem":34,"code":"(fn [begin end]\n(loop [n begin acc []] \n  (if (= n end)\n    acc\n    (recur (inc n) (conj acc n)))))","user":"57147cd9e4b07c98581c3abf"},{"problem":34,"code":"(fn [start end]\n  (loop [index start\n         result []]\n  \t(if-not (= end index)\n   \t\t(recur (inc index) (conj result index) )\n    \tresult\n  \t)\n  )\n)","user":"53b9bb15e4b047364c0444ed"},{"code":"(fn r [a b]\n  (when (< a b)\n    (cons a (r (+ a 1) b))))","problem":34,"user":"52bacfa8e4b07a9af57922d6"},{"problem":34,"code":"(fn my-range [lower-bound upper-bound]\n  (if (= lower-bound upper-bound)\n    '()\n    (cons lower-bound (my-range (inc lower-bound) upper-bound))))","user":"59fa7fb0e4b0ca45a743a366"},{"code":"(fn func[s e]\n  (when (< s e)\n    (cons s (func (inc s) e))))","problem":34,"user":"4e50c894535dc968683fc4ee"},{"code":"#(loop [i %1 j %2 lili []]\n  (if (< i j)\n    (recur (+ i 1) j (conj lili i))\n    lili))","problem":34,"user":"4f8db862e4b02e764a0a51b2"},{"code":"(fn [lo hi]\n    (loop [lst '()\n           cur lo\n           end hi]\n      (if (= cur end) (reverse lst)\n        (recur (cons cur lst) (inc cur) end))))","problem":34,"user":"4f038b62535dcb61093f6b1c"},{"code":"(fn [start end]\n  (loop [cur start\n         list []]\n    (if (= cur end)\n      list\n      (recur (inc cur) (conj list cur))))\n  )","problem":34,"user":"4e70a7c1535d5021c1a8963c"},{"code":"(fn [f t] \n  (reductions \n\t\t#(+ %2 %)\n\t\tf\n\t\t((partial repeat (- (- t f) 1)) 1)\n\t)\n)","problem":34,"user":"50bf74c7e4b0ffd967a66cc0"},{"code":"(fn [x-min x-max] \n  (loop [res (), value x-min]\n    (if (>= value x-max) (reverse res)\n        (recur (conj res value) (inc value)))))","problem":34,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn myrange [_min _max]\r\n\r\n(loop [bottom _min top _max out []]\r\n  (if (= bottom top) out\r\n    (recur (inc bottom) top (conj out bottom))))\r\n)","problem":34,"user":"50a85af1e4b054305ba5a833"},{"code":"(fn [x y]\n  (loop [a x ret []]\n    (if (>= a y)\n      ret\n      (recur (inc a) (conj ret a)))))","problem":34,"user":"4e74e119535d7a570dd295bc"},{"problem":34,"code":"(fn my-range [min max]\n  (if (>= min max)\n    '()\n    (cons min (my-range (inc min) max))))","user":"5ed875abe4b016b56eae05f2"},{"problem":34,"code":"(fn [x y]\n  (loop [a x c '()]\n    (if (= a y)\n      (reverse c)\n      (recur (inc a) (conj c a)))))","user":"548392fce4b0e286459a1191"},{"problem":34,"code":"(fn range' [begin end]\n  (if-not (= begin end) (cons begin (range' (inc begin)  end))))","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":34,"code":"(fn range2\n  ([start stop] (range2 start stop []))\n  ([start stop lst] (if (= start stop) (reverse (into () lst))\n                      (range2 (+ 1 start) stop (conj lst start)))))","user":"548efcb6e4b0e286459a122a"},{"code":"(fn [lower upper]\n  (take (- upper lower) (iterate inc lower)))","problem":34,"user":"4e2ef93d535deb9a81d77f0f"},{"code":"(fn my-range [a b]\n      (cond\n        (>= a b)      []\n        :else         (concat [a] (my-range (+ a 1) b))))","problem":34,"user":"5186134ce4b0da5a5be3bac7"},{"problem":34,"code":"(fn foo [a b] (if (>=  a b) '() (conj (foo (+ a 1) b) a)))","user":"57b8b008e4b0fbc9809a27e6"},{"code":"(fn r [from to] \n  (if (= from to) \n    '() \n    (cons from (r (inc from) to))))","problem":34,"user":"53480973e4b084c2834f4a52"},{"problem":34,"code":"(fn [x y] \n  (take (- y x) (iterate (partial + 1) x)))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":34,"code":"(fn ra [f l] \n  (if (== f l) \n    '()\n    (conj (ra (+ 1 f) l) f)))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn [x y]\r\n   (loop [a x\r\n          b y\r\n          r ()]\r\n     (if (>= a b)\r\n       (reverse r)\r\n       (recur (+ 1 a)\r\n              b\r\n              (conj r a)))))","problem":34,"user":"4ff07688e4b0678c553fc324"},{"code":"#(loop [x %1 y %2 z []] (if (>= x y) z (recur (inc x) y (conj z x))))","problem":34,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":34,"code":"(fn [param1 param2]\n  (loop [iter param1 bound param2 result '()]\n    (if (= iter bound)\n      (reverse result)\n      (recur\n        (inc iter)\n        bound\n        (cons iter result)\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":34,"code":"(fn [a b]\n  (loop [i a\n         v []]\n    (if (< i b)\n      (recur (inc i) (conj v i))\n      v)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":34,"code":"(fn [a b]\n  (loop [i a r []]\n    (if (< i b)\n      (recur\n        (inc i)\n        (conj r i)\n      )\n      r\n    )\n  )\n)","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn rng [f t]\n  (if (= f t)\n    '()\n    (conj (rng (inc f) t) f)))","problem":34,"user":"4ed7b617535d10e5ff6f52f3"},{"code":"(fn [start end] \n  (loop [i start l '()] \n    (if (< i end)  \n      (recur (inc i) (concat l (list i))) \n      l)))","problem":34,"user":"5301a13ae4b0d8b024fd371e"},{"code":"(fn [f t] (take-while #(< % t) (iterate inc f)))","problem":34,"user":"50c9e5e3e4b0a409464667d7"},{"problem":34,"code":"(fn [s e]\n  (loop [index s v []]\n    (if (= index e) \n      v\n      (recur (inc index) (conj v index)))))","user":"56936547e4b0dcc4269f4101"},{"problem":34,"code":"(fn myrange [min max]\n   (if (< min (- max 1)) (cons min (myrange (+ min 1) max)) [min]))","user":"5429986ce4b01498b1a71b3b"},{"problem":34,"code":"(fn f [start end]\n                (if (< start end)\n                  (cons start (f (inc start) end))\n                  ()))","user":"55274467e4b0ffed3738f92b"},{"problem":34,"code":"#(loop [current %1\n        end %2\n        result-sequence []]\n   (if (= current end)\n     result-sequence\n     (recur (inc current) end (conj result-sequence current))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn [lower upper]\n  (loop [i lower my-seq '()]\n    (if (= i upper)\n      (reverse my-seq)\n      (recur (+ i 1) (cons i my-seq)))))","problem":34,"user":"51991a89e4b068aa333628fd"},{"problem":34,"code":"(fn rng [a b]\n  (if (= a b)\n    '()\n    (conj (rng (+ a 1) b) a)))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"problem":34,"code":"(fn\n  [lo hi]\n  (->> (map inc (iterate inc (- lo 1)))\n       (take-while (partial > hi))))","user":"595ebf46e4b066ee0a44b04f"},{"code":"#(take (- %2 %1) (iterate inc %1) )","problem":34,"user":"4ee7d177535d93acb0a6686f"},{"problem":34,"code":"(fn [x y]\n  (loop [x1 x\n         y1 y\n         res []\n         count x]\n    (if (>= count y)\n      (reverse res)\n      (recur x1 y1 (cons count res) (inc count)))))","user":"56b619e7e4b0982f16b37e39"},{"problem":34,"code":"(fn range2 [start end]\n  (loop [rng [],\n         next start]\n    (if (= next end)\n      rng\n      (recur (conj rng next) (inc next)))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"(fn [start end] (take (- end start) (iterate #(inc %) start)))","problem":34,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":34,"code":"(fn [low high]\n  (loop [i low rng []]\n    (if (>= i high)\n      rng\n      (recur (inc i)\n             (conj rng i)))))","user":"59946856e4b0b211ea3aaac7"},{"problem":34,"code":"(partial (fn [c l u] (if (>= l u) c (recur (conj c l) (inc l) u))) [])","user":"54f2fe9fe4b050824f58f5b8"},{"problem":34,"code":"(fn [low hi]  (loop [x low s []] (if (>= x hi) s (recur ( inc x ) (conj s x)))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":34,"code":"(fn [x y]\n   (loop [i 0\n          acc []]\n     (if (>= i (- y x))\n       acc\n       (recur (inc i)(conj acc (+ x i))))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":34,"code":"(fn [x y]\n  (loop [s [x]]\n    (if (< (last s) (dec y))\n        (recur (conj s (inc (last s))))\n        (seq s))))","user":"5d078e2de4b0cc9c915881fa"},{"code":"(fn rrr [i j] \n(take (- j i) (iterate inc i)))","problem":34,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":34,"code":"#(loop [returnMe [%1] lastAdd %1]\n  (if (= lastAdd (dec %2)) returnMe\n    (recur (conj returnMe (inc lastAdd)) (inc lastAdd))))","user":"54cbd97ae4b057c6fda3a283"},{"problem":34,"code":"(fn [start end] \n  (loop [coll [] n start]\n    (if (= n end)\n      coll\n      (recur (conj coll n) (inc n)))))","user":"5ef5ee81e4b07c55ae4a054a"},{"code":"(fn get-range [start end]\n  (cond\n    (>= start end) '()\n    :else (cons start (get-range (inc start) end))))","problem":34,"user":"4e6f578c535d5021c1a8961b"},{"code":"#(take (- %2 %1) (iterate (partial + 1) %1) )","problem":34,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":34,"code":"(fn my-range [b e]\n  (loop [i b x '()]\n  (if (= i e)\n    x\n    (recur (inc i)\n           (concat x [i])))))","user":"5018878ce4b029375d2a5056"},{"problem":34,"code":"(fn r \n   ([f t] (r f t [])) \n   ([f t s] (if (< f t) (lazy-seq (r (inc f) t (conj s f))) s)))","user":"57023e92e4b08d47c97781da"},{"code":"(fn [f t]\n  (take-while\n    #(< % t)\n    (iterate inc f)))","problem":34,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":34,"code":"(fn myRange [a b]\n  ;looks like we never have to count backwards, so that's nice.\n  (if (>= a b)\n    '()\n    (conj (myRange (inc a) b) a)\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn r [s t] \n  (lazy-seq\n   (when (< s t)\n     (cons s (r (inc s) t)))))","problem":34,"user":"51b793d3e4b0d906fcd71d38"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         n start]\n    (if (= n end) result\n      (recur (conj result n) (+ n 1)))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"problem":34,"code":"(fn [start end]\n  (loop [result [] i start]\n    (if (= i end)\n      result\n      (recur (conj result i) (inc i)))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":34,"code":"#(reverse\n   (loop [count %1\n          result '()]\n     (if (>= count %2)\n       result\n       (recur (inc count)\n              (conj result count)))))","user":"54588070e4b01be26fd74620"},{"code":"#(loop [l []\n        start %1\n        end %2]\n      (if-not (= start end)\n        (recur (conj l start) (inc start) end)\n        l))","problem":34,"user":"4e9e7ce3535dbda64a6f6b98"},{"problem":34,"code":"(fn [ini end] (loop [elem ini ret '()] (if (< elem end) (recur (inc elem) (cons elem ret)) (reverse ret))))","user":"52457931e4b08ba239308107"},{"problem":34,"code":"(fn [lo hi]\n  (loop [r [] n lo]\n    (if (>= n hi)\n      r\n      (recur (conj r n) (inc n)))))","user":"5995f8ade4b0b211ea3aaae9"},{"code":"#(loop[i %1 l []] (if (= i %2) l (recur (inc i) (conj l i))))","problem":34,"user":"5339cb07e4b0e30313ee6caf"},{"problem":34,"code":"(fn my-range [start end] (loop [current start result []] (if (< current end) (recur (inc current) (conj result current)) result)))","user":"57086931e4b0b0fb43fd069e"},{"problem":34,"code":"(fn rang [n end]\n        (if (= n end)\n          []\n          (cons n (rang (inc n) end ))))","user":"54a6baaee4b09f271ff37c8a"},{"problem":34,"code":"(fn mrange [start end]\n   (take (- end start) (iterate\n                        inc start)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"#(take (- %2 %1)\n        (iterate inc %1))","problem":34,"user":"51642237e4b003cf19fdde31"},{"problem":34,"code":"(fn r [s m] (if (>= s m) [] (cons s (r (inc s) m))))","user":"5066003ee4b0313a384e5647"},{"code":"(fn [a b]\n  (loop [l (dec b)\n         result '()]\n    (if (< l a)\n      result\n      (recur (dec l)\n             (cons l result)))))","problem":34,"user":"506f1e12e4b09350ab4199f9"},{"problem":34,"code":"(fn [a b] (loop [low a ret[]] (if (= low b) (seq ret) (recur (inc low) (conj ret low)))))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":34,"code":"(fn [a b]\n  (take-while #(< % b)\n              (iterate inc a)))","user":"54848141e4b0e286459a119e"},{"code":"(fn [s e] (loop [result [], i s] (if (= i e) result (recur (conj result i) (inc i))) ) )","problem":34,"user":"4e794004535db169f9c796a1"},{"problem":34,"code":"(fn [a b]\n  (loop [m a result []]\n    (if(= m b)\n      result\n      (recur (inc m) (conj result m)))))","user":"5191a763e4b0d428d29dc1b4"},{"code":"(fn [s e] (loop [s s e e coll []] (if (= s e) (seq coll) (recur (+ 1 s) e (conj coll s)))))","problem":34,"user":"52eb2ec9e4b0705949c44439"},{"problem":34,"code":"(fn [x y]\n  (loop [x x acc []]\n    (if (= x y) acc (recur (inc x) (conj acc x)))))","user":"526e5159e4b03e8d9a4a7316"},{"problem":34,"code":"(fn [mn mx] (loop [ret [] e mn] (if (= e mx) ret (recur (conj ret e) (+ e 1)))))","user":"59468de7e4b07ddc2dafad88"},{"code":"(fn [start,end] (take (- end start) (iterate inc start)))","problem":34,"user":"5394162be4b0b51d73faaec5"},{"problem":34,"code":"(fn [x y] (take-while #(< % y) (iterate (fn [z] (inc z)) x)))","user":"52cda980e4b07d0d72b2737b"},{"code":"(fn rng [i n]  (if (< i n) (cons i (rng (inc i) n)) nil))","problem":34,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":34,"code":"(fn [x z] \n  (loop [r [] st x ]\n    (if (< st z)\n      (recur (conj r st) (inc st))\n      r)))","user":"5f73000ce4b02876ed9fd094"},{"problem":34,"code":"(fn [x y] (take (Math/abs (- y x)) (iterate inc x)))","user":"54012b48e4b0de5c41848620"},{"code":"(fn foo\n  [current end]\n  (if (= current end)\n    '() \n    (conj (foo (inc current) end) current)))","problem":34,"user":"50f53694e4b057d4c52de881"},{"problem":34,"code":"(fn f [x y] \n  (loop [ans [] st x]\n    (if (not= st y)\n      (recur (conj ans st) (inc st))\n      ans\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":34,"code":"(fn\n  ran [from to] (if (= from to) [] (concat [from] (ran (inc from) to))))","user":"5537982ae4b09218d5f44fcc"},{"code":"(fn blah [start end]\n  (if (>= start end)\n     '()\n     (conj (blah (inc start) end) start)))","problem":34,"user":"4fab0c0ae4b081705acca20d"},{"problem":34,"code":"(fn [s t]\n  (loop [a (+ s 1)\n          y (list s)]\n    (if (< a t)\n      (recur (+ a 1) (concat y [a]) )\n      y\n     )\n   )\n )","user":"5e265173e4b05b4b01516175"},{"problem":34,"code":"(fn [min max]\n  (loop [current min results []]\n    (if (= current max) (seq results)\n      (recur (inc current) (conj results current)))))","user":"53c545ede4b00fb29b22128c"},{"problem":34,"code":"(fn rangeTo [from to]\n  (flatten (if (= from to)\n    '()\n    (conj '() (rangeTo (inc from) to) from)\n    )))","user":"552689cfe4b0ffed3738f91e"},{"code":"(fn [s e] (take (- e s) (iterate #(inc %1) s)))","problem":34,"user":"4fabb1dce4b081705acca21a"},{"problem":34,"code":"#(take  (- %2 %1) (iterate inc %1))","user":"55465b20e4b0a04f7929953b"},{"problem":34,"code":"(fn rng ([start end] (rng start end [])) ([start end coll] (if (not= start end) ( rng (inc start) end (conj coll start)) coll )))","user":"581fe550e4b04b46fc4b0f4c"},{"problem":34,"code":"(fn rg [from to] ;;(let [r '()] (prn :from from :to to :>= (>= from to) :inc (inc from ))\n                     ;;(let [result '()]\n                     ;;(if (>= from to)  (conj r from)  (do (rg (inc from) to) (conj r from)) )\n                     ;;(while (< from to) (conj r from))\n                     (loop [f from t to res ()]\n                       (prn :f f :t t :res res)\n                       (if-not (< f t) (reverse res) (recur (inc f) t (conj res f)))))","user":"5972fcf6e4b01722bebd4c92"},{"problem":34,"code":"(fn custom-range [start end]\n    (loop [result '()\n          e (dec end)]\n          (if (< e start)\n            result\n            (recur (conj result e) (dec e)))))","user":"55f330dde4b06e875b46ce56"},{"problem":34,"code":"(fn range' \n  [lo hi]\n  (if (>= lo hi)\n    '()\n    (cons lo (range' (+ lo 1) hi))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":34,"code":"(fn my-range [i n] (\n                    if (= i n)\n                    ()\n                    (conj (my-range (inc i) n) i)\n                    ))","user":"56912f93e4b0dcc4269f40ef"},{"problem":34,"code":"(fn my-range [start end] (when-not (= start end) (conj (my-range (inc start) end) start)))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn [a b]\n  (reverse\n    (loop [a a\n           b b\n           result '()]\n      (if (= a b)\n        result\n        (recur (inc a) b (cons a result))))))","problem":34,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"code":"(fn [s e]\n  (if (< s e)\n    (loop [x s r [s]]\n      (if (< (inc x) e) \n        (recur (inc x) (conj r (inc x)))\n        r))\n    []))","problem":34,"user":"52a04f0ee4b04e0c58e87bc1"},{"code":"(fn [n0 n1] (take-while #(< % n1) (iterate #(+ 1 %) n0)))","problem":34,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn [s e] (reduce #(conj %1 (+ s (count %1) %2)) [] (replicate (- e s) 0)))","problem":34,"user":"50bd13dee4b0594b91591c65"},{"problem":34,"code":"(fn [& x] \n  (let [start (first x) end (last x)]\n    (loop [curr start ret ()]\n    \t(if (= curr end)\n          (reverse ret)\n          (recur (inc curr) (conj ret curr))))))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":34,"code":"(fn [x, y] \n  (take (- y x) (iterate inc x)))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":34,"code":"#(loop [result [%1]\n           cur %1]\n      (if (= %2 (+ (last result) 1))\n        result\n        (recur (conj result (+ cur 1)) (+ cur 1))))","user":"5840c068e4b089d5ab817df8"},{"code":"(fn [f t] (take (- t f) (iterate inc f)))","problem":34,"user":"4faa8de0e4b081705acca1f8"},{"problem":34,"code":"(fn my-range [b e]\n    (when (< b e)\n      (cons b (my-range (inc b) e))))","user":"58fff18be4b0438e51c2d00c"},{"code":"(fn [a b] (loop [result [] n a] (if (>= n b) result (recur (conj result n) (inc n)))))","problem":34,"user":"4ea57300535d7eef308072d5"},{"problem":34,"code":"(fn [x y] (loop [e (dec y) xs nil] (if (>= e x) (recur (dec e) (conj xs e)) xs)))","user":"53e23ab7e4b036ad0777e3ef"},{"problem":34,"code":"(fn rang [from to]\n  (loop [f from \n         t to \n         nums []]\n    (if (= f t)\n      nums\n      (recur (inc f) t (conj nums f)))))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [f t]\n  (take (- t f)\n    (iterate inc f)))","problem":34,"user":"4e6dd51b535d5021c1a895f6"},{"problem":34,"code":"(fn \n  [a b]\n  (take (- b a) (iterate inc a))\n  )","user":"57f81532e4b0d3187e900914"},{"code":"(fn [s e] (loop [r [] n s]\n                 (if (= n e) r (recur (conj r n) (+ 1 n)))))","problem":34,"user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn [x y] (loop [z '() num1 x num2 (- y 1)] (if (< num2 num1) (seq z) (recur (conj z num2) num1 (dec num2)))))","problem":34,"user":"4f10234c535d64f603146413"},{"problem":34,"code":"(fn r [lo,hi] (if (>= lo hi) `() (conj (r (+ lo 1) hi) lo) ))\n\n;; #(take (- %2 %1) (iterate inc %1))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end) \n    nil\n    (conj (my-range (inc start) end) start)))","user":"5889dc13e4b0f1effa3b774a"},{"problem":34,"code":"(fn [begin end]\n    (loop [col []\n           i begin]\n      (if (< i end)\n        (recur (conj col i) (+ i 1))\n        col)))","user":"59932f49e4b0b211ea3aaaae"},{"problem":34,"code":"(fn my-range [x y]\n    (loop [i x range-ret '()]\n      (if (= i y) (reverse range-ret)\n           (recur (inc i) (cons i range-ret ))))\n  )","user":"573940e3e4b0cd1946bd106b"},{"problem":34,"code":"(fn my-range [a b]\n  (if (>= a b)\n    '()\n    (conj (my-range (+ a 1) b) a)))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":34,"code":"(fn my-range [lo hi]\n  (if-not (< lo hi)\n    '()\n    (lazy-seq (cons lo (my-range (inc lo) hi)))\n  )\n)","user":"59a2ba97e4b066c664927d2c"},{"code":"(fn rec [start end]\n  (if (= start end) ()\n    (conj (rec (inc start) end) start)))","problem":34,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":34,"code":"(fn  [s e] (take (- e s) (iterate inc s)))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn rrange [a b]\n  (take (- b a)\n        (lazy-seq (cons a (rrange (+ a 1) b)))))","problem":34,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn [start end]\n  (reverse\n    (last\n      (take-while #(< (first %) end)\n                  (iterate #(conj % (inc (first %)))\n                           (list start))))))","problem":34,"user":"5014754de4b094324338f8e5"},{"problem":34,"code":"#(loop [col [] cur %1]\n    (if (= cur %2)\n      col\n      (recur (conj col cur) (inc cur)))\n    )","user":"555883c5e4b0deb715856e2d"},{"code":"(fn [start end]\n  (loop [end end xs nil]\n    (if (= start end) xs\n      (recur (dec end) (conj xs (dec end))))))","problem":34,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":34,"code":"#(loop [l %1\n        h %2\n        r []]\n   (if (>= l h)\n     r\n     (recur (inc l) h (conj r l))))","user":"572ad0fde4b0f4d77e651244"},{"problem":34,"code":"#(\n  loop [result-coll [%1]]\n  (if\n    (>= (last result-coll) (dec %2))\n    result-coll\n    (recur (conj result-coll (inc (last result-coll))))\n  )\n)","user":"5a285a38e4b07f18be40aa67"},{"code":"(fn a ([i n] (a i n '()))([i n b] (if (> n i) (a (inc i) n (conj b i)) (reverse b))))","problem":34,"user":"4fe97adde4b0547ebccb245e"},{"problem":34,"code":"(fn tmp [a b] (if (= a b) nil (lazy-seq (cons a (tmp (inc a) b)))))","user":"5addadfce4b0837691e92c13"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         i start]\n    (if (>= i end) \n      result\n      (recur (conj result i) (inc i)))))","user":"5d439775e4b07c84aa5ae696"},{"problem":34,"code":"(fn fc34 [a b]\n  (if (= a b) '()\n    (cons a (fc34 (+ a 1) b))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":34,"code":"(fn [begin end]\n  (let [my-range (fn [my-list maximum]\n                   (if (= (first my-list) (dec maximum))\n                     my-list\n                     (recur (conj my-list (inc (first my-list))) maximum)\n                   )\n                 )\n       ]\n    (reverse (my-range (list begin) end))   \n  )\n)","user":"5d7faa52e4b0915913b1d365"},{"code":"(fn [a b] (reductions + a (take (- (- b a) 1) (repeat 1))))","problem":34,"user":"53653538e4b0243289761e6a"},{"problem":34,"code":"(fn joy [r x y] (if (< x y)\n                  (joy (concat r (list x)) (inc x) y)\n                  r)) '()","user":"5a24735fe4b07f18be40aa11"},{"problem":34,"code":"(fn rng [f l]\n\t(if (< f l)\n\t\t(cons f (rng (inc f) l))\n\t\t'()\n\t)\n)","user":"598d746ae4b02b9968b84d23"},{"code":"(fn myrange [x y] (if (= x y) \n            y\n            (take (- y x) \n                  (iterate #(+ 1 %) x ))))","problem":34,"user":"4e2164ff535d04ed9115e815"},{"code":"(fn [from to]\n    ((fn [item current-list]\n      (if (< item from)\n        current-list\n        (recur (- item 1) (conj current-list item))))\n       (- to 1) '()))","problem":34,"user":"4ee9c8d0535d93acb0a66892"},{"problem":34,"code":"(fn [low high]\n  (take-while\n    (partial > high)\n    (iterate inc low)))","user":"5916412ee4b09b4ee5954b87"},{"code":"(fn [a b]\n  (loop [current (dec b) result '()]\n    (if (= current a) \n      (conj result current)\n      (recur (dec current) (conj result current)))))","problem":34,"user":"4f0b2028535d0136e6c222ff"},{"code":"(fn [st en]\n  (loop [i st\n         res '()]\n    (if (= i en)\n      (reverse res)\n      (recur (inc i) (cons i res)))))","problem":34,"user":"4e8a8720535d65386fec210c"},{"problem":34,"code":"(fn  [x y]\n    (if (seq? x) \n  (if (>= (first x) (dec y)) (reverse x)\n      (recur (conj  x (inc (first x))) y)\n   )\n      (recur (conj '()  x (inc x)) y)\n    )\n\n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":34,"code":"(fn\n  [start end]\n  (take-while #(< % end) (iterate #(inc %) start)))","user":"56df6498e4b0ca2494a095f8"},{"problem":34,"code":"(fn [start end]\n  (loop [output (empty list) cur end]\n    (if (= (first output) start)\n      output\n      (recur (cons (dec cur) output) (dec cur)))))","user":"58e45a2ce4b056aecfd47c69"},{"problem":34,"code":"(fn problem-34 [f t]\n  (let [helper (fn [res ff]\n                 (cond\n                  (>= ff t) res\n                  :else (recur (conj res ff) (inc ff))))]\n    (reverse (helper '() f))))","user":"51d26b0ae4b0d13b04db0d97"},{"code":"#(loop [start % stop %2 res '()]\n   (if (= start stop)\n     res\n     (let [i (dec stop)] (recur start i (cons i res)))))","problem":34,"user":"50f01f44e4b0bdaecbb47daf"},{"code":"(fn z [b e] (take (- e b) (iterate inc b)))","problem":34,"user":"531f0a26e4b08068f379edbf"},{"code":"(fn [a b]\n  (loop [a a\n         v []]\n    \t(if (< a b) (recur (inc a) (conj v a))\n          v)))","problem":34,"user":"5081566ce4b0946d0443855b"},{"code":"(fn ! [x y]\n  (if (= x y)\n    '()\n    (concat [x] (! (inc x) y))))","problem":34,"user":"52faec2ee4b047fd55837004"},{"problem":34,"code":"(fn my-range [a b]\n  (if (= a b) [] (conj (my-range a (dec b)) (dec b))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":34,"code":"(fn [a b]\n  (loop [c a\n         res []]\n    (if (< c b)\n      (recur (inc c) (conj res c))\n      res)))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"#(loop [a %1 b %2 acc []]\n  (if (= a b)\n    acc\n    (recur (inc a) b (conj acc a))))","problem":34,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":34,"code":"(fn ! [a b]\n  (if (>= a b) '()\n  \t(cons a (! (inc a) b))))","user":"54c271b9e4b045293a27f602"},{"problem":34,"code":"(fn sk-range [start but-end]\n  (take (- but-end start) (iterate inc start)))","user":"51d42f44e4b013d740b70ddb"},{"problem":34,"code":"(fn ran [n m] (if (= n m) nil (cons n (ran (inc n) m))))","user":"542d2385e4b0dad94371f2b2"},{"code":"#(take-while (fn [a] (< a %2)) (iterate inc %1))","problem":34,"user":"4e25176e535d04ed9115e829"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [i start my-vec []]\n    (if (< i end)\n      (recur (inc i) (conj my-vec i))\n      my-vec)))","user":"55048182e4b086ebe8a79c7c"},{"code":"(fn rng [start end]\n  (if (< start end)\n    (cons start (rng (inc start) end))))","problem":34,"user":"51b89503e4b050a1176cd69a"},{"code":"(fn [from to]\n  (take (- to from)\n    (iterate inc from)))","problem":34,"user":"4f4a17ffe4b0d56e7bb92c05"},{"problem":34,"code":"(fn rng [& args] (let [a (first args) b (second args)]\n  (if (>= a b) nil (cons a (rng (inc a) b)))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":34,"code":"(fn [a b] (loop [l [a]]\n            (if (= (last l) (dec b))\n              l\n              (recur (conj l (inc (last l)))))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":34,"code":"(fn [start limit]\n  (loop [result [start]\n         n (inc start)]\n    (if (= n limit)\n      result\n      (recur (conj result n) (inc n)))))","user":"546c4c5fe4b00cfc9eacc178"},{"problem":34,"code":"(fn ranger [low high]\n  (if (< low high)\n    (conj (ranger (inc low) high) low)\n    '()))","user":"571cd9dce4b0145328a76271"},{"problem":34,"code":"(fn [x y]\n  (loop [i (dec y), res '()]\n    (if (< i x)\n      res\n      (recur (dec i) (conj res i)))))","user":"549ffeade4b0f3d1d8e70fb2"},{"code":"(fn [start end]\n  (loop [i start\n         accum '[]]\n      (if (>= i end)\n         accum\n      (recur (+ i 1) (conj accum i)))))","problem":34,"user":"4e657c05535d8ccf87e9fe72"},{"code":"(fn this [start stop]\n  (if (>= start stop)\n    '()\n    (cons start (this (+ start 1) stop))))","problem":34,"user":"5390952be4b0b51d73faae9c"},{"problem":34,"code":"(fn [x0 x1]\n  (loop [res []\n         x x0]\n    (if (>= x x1)\n      res\n      (recur (conj res x)\n             (inc x)))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn [x1 x2]\r\n  (take (- x2 x1)\r\n  (iterate inc x1)\r\n  )\r\n)","problem":34,"user":"4eb7ff08535d7eef30807379"},{"code":"(fn myf [x y] (reverse (into () (  \r\n                 (fn myf2 [z x y] \r\n                 (if (=  x y)  z   \r\n                   (myf2 (conj z x) (inc x) y ) )) \r\n                                  [] x y))))","problem":34,"user":"50646c01e4b007509339a58b"},{"problem":34,"code":"(fn [a b]\n  (letfn [(rng [a b]\n               (if (= a b)\n                 '()\n                 (cons a (rng (+ a 1) b))))]\n    (rng a b)))","user":"5f5e7158e4b02876ed9fcff0"},{"problem":34,"code":"(fn [s1 s2]\n   (take-while #(> s2 %) (iterate inc s1)))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [mn,mx]\n    (map (fn [x] (+ mn x))\n        (take (- mx mn) (iterate #(+ 1 %) 0))))","problem":34,"user":"4f85ef29e4b033992c121c4d"},{"code":"(fn [f l] (take (- l f) (iterate inc f)))","problem":34,"user":"522404d8e4b01819a2de42c0"},{"problem":34,"code":"(fn [a b]\n  (loop [current a\n        end b\n        new-coll '()]\n  (if (= current end)\n    (sort new-coll)\n    (recur (inc current) end (conj new-coll current)))))","user":"5990bab4e4b0866487ed0d55"},{"code":"(fn [x y] (take-while #(< %1 y) (iterate inc x)))","problem":34,"user":"5183f5d7e4b02826a645f393"},{"code":"#(take-while (partial > %2) (((fn ii [n] (fn ss ([] (ss n)) ([m] (cons m (lazy-seq (ss (inc m))))))) %1)))","problem":34,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn [x y] \n  (loop [x1 x result []]\n    (if (= x1 y)\n      result\n      (recur (inc x1) (conj result x1)))))","problem":34,"user":"4f032f30535dcb61093f6a73"},{"problem":34,"code":"(fn f [start end] (if (< start end) (cons start (f (inc start) end))))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":34,"code":"(fn[s e] (loop [i s r []] (if (= i e) (seq r) (recur (inc i) (conj r i) ))))","user":"54b331dbe4b09f271ff37d37"},{"problem":34,"code":"(fn [x y]\n   (map-indexed (fn [c i]\n                  (+ c i))\n         (repeat (- y x) x)))","user":"5d9475e9e4b0d3f9b434ad26"},{"code":"(fn [start end] (take (- end start) (iterate inc start)))","problem":34,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn [s f] \r\n  (loop [x s xs '()]\r\n    (if (= x f)\r\n      (reverse xs)\r\n      (recur (+ x 1) (cons x xs)))))","problem":34,"user":"4ddc1c89535d02782fcbea01"},{"problem":34,"code":"(fn [start end]\n  (take-while\n    (partial > end)\n    (iterate inc start)))","user":"56d2a103e4b0ea9b8538f7a3"},{"code":"#(take (- (max %1 %2) (min %1 %2)) (iterate inc %1))","problem":34,"user":"53736ffce4b06d7f452d9e11"},{"code":"(fn [begin end]\n  (take (- end begin) (iterate inc begin)))","problem":34,"user":"4e5d0e96535d8a8b8723a2c8"},{"code":"(fn my-range [start end]\r\n    (if (= start end)\r\n      '()\r\n      (cons start (my-range (inc start) end))))","problem":34,"user":"4f149e0f535d64f60314643d"},{"problem":34,"code":"#(take (- %2 %1)   (iterate inc %))","user":"56743413e4b05957ce8c612e"},{"problem":34,"code":"(fn [x y]\n  (loop [output [] i x]\n    (if (= i y) output\n      (recur (into [] (conj output i)) (inc i)))))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn [start stop]\n  (let [step (if (>= stop start) 1 -1)]\n    (loop [i start c []]\n      (if (= i stop)\n        c\n        (recur (+ i step) (conj c i))))))","problem":34,"user":"50ef56dfe4b0bdaecbb47d94"},{"code":"(fn[a b](take-while #(<% b)(iterate #(+% 1)a))\r\n)","problem":34,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn my-range [x y]\n  (if (= x y)\n    '()\n    (cons x (my-range (+ x 1) y))))","problem":34,"user":"4eb2c45e535d7eef3080734d"},{"code":"(fn [s e]\n  (loop [coll [] n s]\n    (if (= n e)\n        coll\n        (recur (conj coll n)\n               (inc n)))))","problem":34,"user":"4f3cd535e4b0e243712b1f56"},{"problem":34,"code":"(fn [start end]\n  (take (- end start) (iterate inc start)))\n;利用take取得总共有多少个value start-end 然后iterate 迭代增加从start开始。。。","user":"57c500f9e4b05aa3c4741cda"},{"code":"(letfn\n  [(my-range [lo hi]\n             (if (= lo hi) '() (cons lo (my-range (inc lo) hi))))] my-range)","problem":34,"user":"52b8af15e4b07a9af57922b5"},{"problem":34,"code":"(fn [min max]\n\n   (loop [counter min vector []]\n\n     (if (= max counter)\n       (reverse (into () vector))\n       (recur (+ counter 1) (conj vector counter))\n\n       )\n\n     )\n\n   )","user":"57aa103be4b0b8559636fc64"},{"code":"#(take (- %2 %1) (iterate \n           (partial + 1) \n           %1)\n       )","problem":34,"user":"5259a16ee4b0cb4875a45ce1"},{"code":"(fn create-range [start1 end1]\n  (loop [r [] s start1 e end1]\n    (if (= s e) r\n    (recur  (conj r s) (inc s) e))))","problem":34,"user":"524a74b3e4b05ef8e38e64a7"},{"problem":34,"code":"(fn myrange [start end]\n  (if (< start end)\n    (conj (myrange (inc start) end) start)\n    ()))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn mr [st ed]\n  (if (>= st ed) nil\n    (cons st (mr (inc st) ed))))","problem":34,"user":"5272669de4b03e8d9a4a742e"},{"problem":34,"code":"(fn [from to]\n  (loop [f from output []]\n    (if (>= f to)\n      output\n      (recur (inc f) (conj output f)))))","user":"60c4e5dfe4b0e0fa5f1b42cd"},{"problem":34,"code":"(fn ran [from to]\n  (if (= from to) []\n      (let [x (dec to)] (concat (ran from x) [x]))))","user":"54b07c1ee4b09f271ff37d16"},{"problem":34,"code":"(fn [start end]\n(letfn [(step [start end] (if (< start end) (cons start (step (+ start 1) end))))]\n(step start end)))","user":"55306b8ae4b076ab5578f812"},{"code":"(fn [start end] \n   (take (- end start) (iterate inc start)))","problem":34,"user":"5008d149e4b0144d4f561e41"},{"problem":34,"code":"(fn [x y] (take-while #(< % y)(iterate inc x)))","user":"571e6d73e4b0145328a76292"},{"problem":34,"code":"(fn [min max]\n  (loop [n (dec max)\n         memo '()]\n    (if (<= min n)\n      (recur (dec n) (conj memo n))\n      memo)\n  ))","user":"52d6d490e4b09f7907dd1369"},{"problem":34,"code":"(fn [lower upper] (take-while #(< % upper) (iterate inc lower)))","user":"543f854fe4b032a45b86935b"},{"code":"(fn[s e] (take (- e s) (iterate inc s)))","problem":34,"user":"4e6a4641535d8ccf87e9feb9"},{"problem":34,"code":"(fn [from up-to]\n  (let [until (fn [x] (> up-to x))]\n    (take-while until (iterate inc from))))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn f [s e]\n  (loop [x s acc []]\n    (if (< x e)\n      (recur (inc x) (conj acc x))\n      acc)))","problem":34,"user":"51d662fce4b0154f82ab92ef"},{"problem":34,"code":"(fn [from to] (loop [res []\n                     cur from]\n                (if (= cur to) res\n                    (recur (conj res cur) (inc cur)))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":34,"code":"(fn rng [start end]\n  (if (= start end)\n      []\n      (concat [start] (rng (inc start) end))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn r [a b] (if (< a b) (cons a (r (inc a) b))))","problem":34,"user":"4f3fdf11e4b0e243712b1fa1"},{"problem":34,"code":"(fn my-range [start finish]\n    (cond \n        (= start finish) ()\n        :else (cons start\n                    (my-range (inc start)\n                              finish))))\n\n;#(take (- %2 %1) (iterate inc %1))","user":"59cd351ee4b0ef0a1e9b5b35"},{"code":"(fn [lower upper] \n  (loop [c lower\n         res '()]\n    (if (>= c upper) res\n    \t(recur (+ c 1) (concat res [c])))))","problem":34,"user":"533ee560e4b085b17e897d98"},{"problem":34,"code":"(fn r [i j] (\n             if (>= i j) '() (\n                             cons i (r (inc i) j))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":34,"code":"(fn [from to]\n  (letfn [(impl [from to result]\n                (if (>= from to)\n                  result\n                  (recur (+ from 1) to (conj result from))))]\n    (impl from to [])))","user":"5c50048ae4b0f9f7a8770eb9"},{"problem":34,"code":"(fn [num1 num2]\n   (loop [list [num1]]\n     (let [elem (last list)]\n       (if (= elem num2)\n         (drop-last list)\n         (recur (conj list (inc elem)))))))","user":"58a34442e4b02bd94d917ef2"},{"problem":34,"code":"(fn [f ub] \n  (loop [col [f] ]\n    (let [nxt (inc (peek col))]\n      (if (< nxt ub)\n        (recur (conj col nxt))\n        col))))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn r\n  [a b]\n  (if (> a (dec b))\n    '()\n    (cons a (r (inc a) b))))","problem":34,"user":"52c45ac8e4b0c2d177d620d9"},{"problem":34,"code":"(fn [l, u]\n  (loop [lst '() acc l]\n    (if (= acc u)\n      (reverse lst)\n      (recur (conj lst acc) (inc acc)))))","user":"57cef3f8e4b0c746388ab8b4"},{"problem":34,"code":"(fn r [s g]\n  (if (= (+ s 1) g)\n    (list s)\n    (conj (r (+ s 1) g) s)))","user":"57befca6e4b05aa3c4741c70"},{"code":"(fn myrange\n  [start max]\n  (loop [n start col [] ]\n    (if (>= n max) col (recur (inc n) (conj col n) ))))","problem":34,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":34,"code":"(fn [start end]\n  (loop [s start result []]\n    (if (= (count result) (- end start))\n      result\n      (recur (inc s) (conj result s)))))","user":"57344edbe4b0cd1946bd1008"},{"problem":34,"code":"(fn range2 [n m] \n  (cond \n    (= n m) []\n    :else (cons n (range2 (inc n) m))\n    )\n)","user":"5b6f72ede4b0c6492753e7dc"},{"code":"(fn [first last]\n  (loop [first first\n         last last\n         res []]\n    (if (< first last)\n      (recur (inc first) last (conj res first))\n      res)))","problem":34,"user":"5165a235e4b079ad97ec44ac"},{"problem":34,"code":"(fn rng\n  ([start end]        (rng start end '()))\n  ([start end result] (if (= start end)\n                        result\n                        (rng (inc start) end (concat result (list start))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":34,"code":"(fn my-range [s e] (cond (= s e) '() :else (conj (my-range (+ s 1) e) s)))","user":"5d9d10d5e4b0eb781811cdb4"},{"code":"(fn\n  [start end]\n  (loop [p start\n         l []]\n    (if (= p end)\n      l\n      (recur (inc p) (conj l p)))))","problem":34,"user":"50657858e4b0deb87685059a"},{"code":"(fn [n m] (take-while #(> m %) (iterate inc n)))","problem":34,"user":"511c44fde4b00c2a1fa7ff77"},{"code":"#( take-while (partial > %2) (iterate inc %1))","problem":34,"user":"53691dc7e4b0243289761e97"},{"code":"(fn [i j]\n  (loop [s `(~i) t (inc i)]\n    (if (= t j)\n      (reverse s)\n      (recur (cons t s) (inc t)))))","problem":34,"user":"4fdbc075e4b05e33b9224f61"},{"problem":34,"code":"#(loop [n (dec %2) coll '()]\n   (if (= n %)\n     (cons n coll)\n     (recur (dec n) (cons n coll))\n     )\n   )","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn[a,b] (take (- b a) (iterate #(inc %) a)))","problem":34,"user":"4daea587edd6309eace4d15a"},{"problem":34,"code":"#(loop [start %1 end %2 so-far []]\n   (if(= start end) so-far\n   (recur (inc start) end (conj so-far start))))","user":"5885cc62e4b0f1effa3b76c1"},{"code":"#(loop [a %\n         b %2\n         s ()]\n    (if (== a b)\n      s\n      (recur a (dec b) (cons (dec b) s))))","problem":34,"user":"5028cd0fe4b01614d1633ffc"},{"problem":34,"code":"#(loop [pos (dec %2)\n         result '()]\n    (if (< pos %1)\n      result\n      (recur (dec pos) (conj result pos))))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"(fn\n          [start end]\n          (letfn [(step [start end]\n                    (if\n                      (< start end)\n                      (cons\n                        start\n                        (step (+ start 1) end))))]\n            (step start end)))","problem":34,"user":"514d7e29e4b019235f6c0587"},{"problem":34,"code":"#(loop [x % y %2 z []]\n   (if (= x y)\n     z\n     (recur (inc x) y (conj z x))))","user":"583f23dce4b089d5ab817dc9"},{"code":"(fn crange [start end]\n  (if (= start end)\n    (list)\n    (conj (crange (inc start) end) start)))","problem":34,"user":"50d4dde8e4b09cc622d65a72"},{"problem":34,"code":"(fn [x y]\n  (loop [counter x\n         limit y\n         output-list []]\n    (if (= counter limit)\n      output-list\n      (recur (inc counter) limit (concat output-list [counter])))))","user":"5550dad4e4b00713264bd9b0"},{"code":"(fn [a b]\n    (loop [sq [] cnt a]\n      (if (= cnt b)\n          sq\n      (recur (conj sq cnt) (inc cnt)))))","problem":34,"user":"4edb314d535d10e5ff6f5317"},{"problem":34,"code":"(fn range2 [n1 n2]\n  (loop [current n1 out []]\n    (if (= current n2)\n      (seq out)\n      (recur (inc current) (conj out current)))))","user":"54a70484e4b09f271ff37c91"},{"problem":34,"code":"(fn [s e] (take \n                 (- e s) \n                 (iterate #(+ % 1) s)\n                 )\n  )","user":"54e84d1ee4b024c67c0cf822"},{"problem":34,"code":"(fn [l h] (loop [m (dec h) acc '()] (if (< m l) acc (recur (dec m) (conj acc m)))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"problem":34,"code":"(fn [start end]\n  (reduce (fn [a b] (conj a (or (and (last a) (inc (last a))) b)))\n\t\t\t []\n\t\t\t (take (- end start) (repeatedly (constantly start)))))","user":"54c15722e4b0ed20f4ff6f22"},{"code":"(fn [f t]\n   ((fn ! [c f t]\n      (if (= f t)\n        c\n        (! (conj c f) (inc f) t)))\n     [] f t))","problem":34,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":34,"code":"(fn range-own\n  ([x y] (range-own x y (cons (dec y) '())))\n  ([unten oben a] (if (<= (first a) unten)\n                    a\n                    (range-own unten oben (cons (dec (first a)) a)))))","user":"578f5122e4b0ebec4cfb7592"},{"problem":34,"code":"(fn [x y] (loop [c x p '()]\n            (if (= c y)\n              (reverse p)\n              (recur (inc c)\n                     (conj p c))\n              )\n            )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"code":"(fn ran [x y] ( if (= x y) '() \n                (cons x (ran (inc x) y))))\n  ;cond ((= x y) '())\n   ;         ((< x y) (cons x (ran (dec x) y)))))","problem":34,"user":"5009902ee4b03d00572d2d6d"},{"code":"(fn [a b]\n\t(reverse \n\t\t(loop [l [] n (dec b)]\n\t\t\t(if (= n a)\n\t\t\t\t(conj l n)\n\t\t\t\t(recur (conj l n) (dec n))))))","problem":34,"user":"50c4baa6e4b0210b849018b0"},{"problem":34,"code":"(fn [x y ](->> (iterate inc x)(take (- y x))))","user":"549ac3cde4b0f3d1d8e70f71"},{"code":"(fn [start end]\n  (loop [curr (dec end) result '()]\n    (if (< curr start)\n      result\n      (recur (dec curr) (cons curr result)))))","problem":34,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"#_(letfn [(rang [start end]\n  (if (>= start end)\n    '()\n    (conj\n     (rang (inc start) end)\n     start)\n    )\n  )] (rang %1 %2))\n\n#(take (- %2 %1) (iterate inc %1))","problem":34,"user":"533d51d4e4b085b17e897d7c"},{"problem":34,"code":"#(loop [rang '()\n        i %1]\n   (if (>= i %2)\n     rang\n     (recur \n      (concat rang [i]) \n      (inc i))))","user":"54194782e4b01498b1a71a29"},{"code":"(fn ran [min max]\n  (if (= min max)\n    '()\n    (concat (list min) (ran (+ min 1) max))))","problem":34,"user":"5100d7dbe4b04f1d96d946df"},{"code":"(fn [start max]\n   (loop [i start result []]\n     (if (not (= i max))\n       (recur (inc i) (conj result i))\n       result)))","problem":34,"user":"52e0e646e4b09f7907dd1416"},{"code":"(fn\n  [l r]\n  (take (- r l) (iterate #(inc %) l)))","problem":34,"user":"5289bba9e4b0239c8a67ae69"},{"problem":34,"code":"(fn [lb ub] (take (- ub lb) (iterate inc lb)))","user":"57e070fde4b0bd073c202478"},{"problem":34,"code":"#(map-indexed (fn [idx itm] (+ idx itm)) (repeat (- %2 %1) %1))","user":"54d9366ce4b0a52adc2e204e"},{"problem":34,"code":";(fn [x n]\n;  (let [tick (atom (dec x))]\n;    (take (- n x) (repeatedly #(swap! tick inc)))))\n\n;(fn [x n]\n;  (take (- n x) (iterate inc x))\n\n#(take (- %2 %1) (iterate inc %))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":34,"code":"(fn solve\n  (\n   [start end] \n   (solve [] start end)\n  )\n  (\n   [acc i end] \n   (\n    if (< i end)\n    (solve (conj acc i) (inc i) end)\n    acc \n   )\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"problem":34,"code":"(fn rg [x y] \"Returns a range between x and y\"\n   (loop [idx x rng ()]\n     (if (= idx y)\n       rng\n       (cons idx (rg (inc idx) y)))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":34,"code":"(fn [st en]\n    (letfn [(rng' [st' en' lst]\n              (if (> st' en')\n                lst\n                (recur st' (dec en') (cons en' lst))))]\n      (rng' st (dec en) '())))","user":"550e0951e4b06e50f9beb163"},{"problem":34,"code":"#(loop [x %2 res ()] (if (<= x %1) res (recur (dec x) (cons (dec x) res))))","user":"544285dde4b032a45b869380"},{"problem":34,"code":"(fn [x y]\n  (loop [a x\n         lst ()]\n    (if (= a y)\n      (reverse lst)\n      (recur (inc a) (cons a lst)))))","user":"57f81549e4b0d3187e900918"},{"problem":34,"code":"(fn \n  [start end]\n  (loop [cur start\n         res []]                                                                                                                                   \n    (if (>= cur end)\n      res\n      (recur (inc cur) (conj res cur))\n      )\n    ))","user":"571b900ae4b07c98581c3b69"},{"problem":34,"code":"(fn [f t] (loop [r (list f)\n                 i (inc f)]\n            (if (< i t)\n              (recur (concat r (list i))\n                      (inc i))\n              r)))","user":"52f23d85e4b05e3f0be25ef6"},{"code":"(fn my-range [b e]\r\n  (loop [i b\r\n         result []]\r\n    (if (= i e)\r\n      result\r\n      (recur (inc i) (conj result i)))))","problem":34,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":34,"code":"(fn [a b] (take (- b a)  (iterate inc a)))","user":"5c94cbb1e4b048ec896c5a3d"},{"code":"(fn [x y]\n  (take (- y x)\n        (iterate inc x)))","problem":34,"user":"4f8ac2bde4b02e764a0a5172"},{"problem":34,"code":"(fn [start end]\n  (if (>= start end)\n    '()\n    (loop [st start acc []]\n      (if (>= st end)\n        (seq acc)\n        (recur (inc st) (conj acc st))))))","user":"59a31c55e4b066c664927d34"},{"code":"(fn [lo hi]\n  (loop [r []\n         l lo]\n     (if (>= l hi) r\n        (recur (conj r l) (inc l)))))","problem":34,"user":"4f036fb3535dcb61093f6ac8"},{"problem":34,"code":"(fn [s e] (take (- e s) (iterate inc s)) )","user":"580558cde4b0a837a8b30cc4"},{"problem":34,"code":"(fn [start end]\n  (loop [start' start\n         list' []]\n    (if (>= start' end)\n      list'\n      (recur (inc start') (conj list' start')))))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn [stt end] \n  (take (- end stt) \n        (iterate inc stt)))","problem":34,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"(fn my-range [lower, upper]\n  (cond\n    (< lower (dec upper)) (cons lower (my-range (inc lower) upper))\n    (= lower (dec upper)) [lower]\n    true (throw (IllegalArgumentException. \"lower boundrary mst be equal or smaller to upper\"))\n   ))","problem":34,"user":"4ee259a1535d10e5ff6f5366"},{"code":"#(loop [x %1 y []] (if (not= x %2)\n                    (recur (inc x) (conj y x))\n                     y\n                     ))","problem":34,"user":"5105ed16e4b01150e115ebe2"},{"problem":34,"code":"(fn [low high]\n  (loop [low low\n         ret []]\n    (if (>= low high)\n      \t(seq ret)\n      \t(recur (inc low) (conj ret low)))))","user":"5b333626e4b025bcb146f32f"},{"code":"(fn my-range [x y] (if (= x (- y 1)) [x] (concat [x] (my-range (inc x) y))))","problem":34,"user":"525fea5ae4b03e8d9a4a7026"},{"code":"(fn f [a b] (lazy-seq (if (= a b) () (cons a (f (inc a) b)))))","problem":34,"user":"5166b491e4b060c690c1f4be"},{"problem":34,"code":"(fn [start stop]\n  (lazy-seq\n    (loop [i start accu []]\n      (if-not (< i stop)\n        accu\n        (recur (inc i) (conj accu i))))))","user":"53ce0a29e4b00fb29b2212eb"},{"problem":34,"code":"#(loop [start %1 stop %2 rtn '()] (if (= start stop) (sort rtn) (recur (+ 1 start) stop (cons start rtn))))","user":"580b79e4e4b0a837a8b30d4a"},{"problem":34,"code":"#(loop [s %1 e %2 r []]\n  (if (= s e)\n    r\n    (recur (inc s) e (conj r s))))","user":"5640b135e4b08d4f616f5ee8"},{"problem":34,"code":"(fn myrange\n\t([from to] (myrange from to [] ))\n  ([cnt to res]\n\t\t(if (= cnt to)\t\n\t\t\tres\n\t\t\t(recur (inc cnt) to (conj res cnt))\n\t\t)\n  )\n)","user":"5bb4baace4b0a20761a23552"},{"problem":34,"code":"(fn lol [x y]\n   (if (< x y)\n     (lazy-seq (cons x (lol (inc x) y)))))","user":"5f468d26e4b0955706451fc1"},{"problem":34,"code":"(fn rang\n   [from to]\n   (if (< from to) (cons from (rang (inc from) to))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [s e] (reverse (loop [ acc () cur s ]\n            (if (= cur e) acc (recur (conj acc cur ) (inc cur))))))","problem":34,"user":"50956c2be4b087f34d351ab2"},{"problem":34,"code":"#(let [begin_args %1, end_args %2]\n   (loop [x begin_args, result '()]\n     (if (>= x end_args)\n       (reverse result)\n       (recur (inc x) (conj result x)))))","user":"57ecc16fe4b0bfb2137f5b83"},{"code":";; iterate wil take a function and return a lazy infinite sequence starting at element and applying fn to each new element\n;; (iterate inc 1) will return (1 2 3 4 5 6... infinity)\n;; So we just need to take the first n where n is %2 - %\n;; in this case 4 - 1 = 3 so take 3\n\n#(take (- %2 %) (iterate inc %))","problem":34,"user":"50955676e4b087f34d351ab1"},{"code":"(fn  [from to]\n  (loop [f from\n         result (list )]\n    (if (>= f to)\n      (reverse result)\n      (recur (inc f) (cons f result)))))","problem":34,"user":"4fea1f9ee4b0547ebccb248b"},{"code":"(fn r [a b]\r\n  (if (= a b) nil\r\n      (conj (r (inc a) b) a)))","problem":34,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn [l u] (take-while #(< % u) (iterate inc l)))","problem":34,"user":"4fc67081e4b0ee37620e1813"},{"problem":34,"code":"(fn [min max]\n  (when (< min max)\n      (let  [upper (dec max)]\n        (loop [acc [min]]\n          (if (= (last acc) upper)\n            acc\n            (recur (conj acc (inc (last acc)))))))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":34,"code":"(fn [from to] \n  (loop [curr from \n         acc []] \n    (if (< curr to) \n      (recur (inc curr) \n             (conj acc curr)) \n      acc)))","user":"57a774e4e4b0a96607956213"},{"problem":34,"code":"(fn _mr [acc s e] (if (= s e) acc (_mr (concat acc [s]\n                                               ) (inc s) e))) '()","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn foo [l h]\n  (if (> h l) (concat (list l) (foo (inc l) h)) '()))","problem":34,"user":"4f8b20fce4b02e764a0a5178"},{"problem":34,"code":"(fn [init end]\n  (take (- end init) (iterate inc init)))","user":"5adbbf89e4b0837691e92bf4"},{"problem":34,"code":"(fn [%1 %2] \n    (if (and (integer? %1) (integer? %2)) \n      (if (< %1 %2) \n        (let [times (- %2 %1)](take times (iterate inc %1))))))","user":"58b2fe10e4b0ebc645576d17"},{"problem":34,"code":"(fn [from to]\n  ((fn iter [from to res]\n     (if (= from to)\n       res\n       (iter from (dec to) (conj res (dec to))))) from to ()))","user":"591072e0e4b0163c97b36ebc"},{"problem":34,"code":"#(loop [sq [] f %1 l %2]\n   (if (= f l)\n     sq\n     (recur (conj sq f) (inc f) l)))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":34,"code":"(fn rng\n\t[start end]\n\t(loop [st start final []]\n\t\t(if (= st end)\n\t\t\tfinal\n\t\t\t(recur (inc st) (conj final st)))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn my-range [x y] (take (- y x) (iterate inc x)))","problem":34,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":34,"code":"(fn [a b] (loop [i a\n                 xs []]\n           (if (= i b)\n             xs\n             (recur (inc i) (conj xs i)))))","user":"5283a919e4b0239c8a67adbe"},{"problem":34,"code":"#(loop [r [%]] \n    (if (= (dec %2) (last r)) (seq r)\n    (recur (conj r (inc (last r))))))","user":"56066e82e4b08b23635d3173"},{"problem":34,"code":"(fn rec [i t] (if (= i t) nil (cons i (rec (inc i) t))))","user":"5b20134de4b03cfeda66ed2d"},{"problem":34,"code":"(fn [i t](\n          loop [res nil\n\t\t\t\ti i]\n          (if (= i t)\n           (reverse res)\n            (recur (conj res i) (inc i)))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn rang [from to]\n      (if(< from to)\n      (cons from (rang (inc from) to))\n      '()\n      ))","problem":34,"user":"5368fedee4b0243289761e93"},{"code":"(fn [a b]\n    (take (- b a) (iterate inc a)))","problem":34,"user":"4fba7d1ee4b081705acca2e0"},{"problem":34,"code":"(fn [lo hi] \n  (loop [low lo\n         high hi\n         result []]\n    (if (<= high low)\n      result\n      (recur (inc low) high (conj result low)))))","user":"554b8572e4b0a04f79299589"},{"code":"(fn [i j] (take (- j i) (iterate inc i) ))","problem":34,"user":"5307e4ece4b02e82168697a9"},{"problem":34,"code":"(fn [start end] (loop [i start, result []] (if (= i end) result (recur (inc i) (conj result i)))))","user":"56e6ef89e4b02e7e935eb6d0"},{"problem":34,"code":"(fn [start end] (loop [acc [start] end end] (if (= (last acc) (- end 1)) acc (recur (conj acc (+ 1 (last acc))) end))))","user":"5f6cb2a5e4b02876ed9fd057"},{"code":"#(let [x (- %2 %1)]\n   (take x (iterate inc %1)))","problem":34,"user":"531a3914e4b08068f379ed88"},{"code":"(fn my-range [a b] (take (- b a) (iterate inc a)))","problem":34,"user":"530e9729e4b08068f379ecbc"},{"problem":34,"code":"(fn myfunc ([x y z]\n              (if (= x  y )\n                (reverse z )\n                (myfunc (inc x) y (cons x z))\n                )\n              )\n  ([x y] (myfunc x y '()))\n)","user":"53d5d43ce4b0e771c302544d"},{"problem":34,"code":"(fn [start stop]\n  (loop [output [] current start]\n    (if (= current stop)\n      output\n      (recur (conj output current) (inc current)))))","user":"54a1d047e4b09f271ff37c4f"},{"problem":34,"code":"(fn [l r]\n  (take (- r l) (iterate inc l)))","user":"597d0e43e4b0dbe32238d095"},{"problem":34,"code":"(fn r\n  [start end]\n  (if (< start end)\n    (concat (list start) (r (inc start) end))\n    '()))","user":"50ec409ce4b04edc33777045"},{"problem":34,"code":"(fn f [a b]\n    (if (< a b)\n      (cons a (f (inc a) b))\n      '()))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":34,"code":"(fn [x y] (loop [start x \n                 stop y \n                 output []] \n            (if (>= start stop) \n              output \n              (recur (inc start) \n                     stop \n                     (conj output start)))))","user":"56f5e6d5e4b046a417f92079"},{"problem":34,"code":"#(loop [min %1\n        max %2\n        coll []]\n   (if (< min max)\n   (do (conj coll min)\n   (recur (inc min) max (conj coll min)))\n     coll))","user":"5911c8e1e4b0163c97b36edc"},{"code":"(fn f [a b]\r\n  (if (< a b)\r\n    (cons a (f (inc a) b))\r\n    ()))","problem":34,"user":"4fea08a9e4b0547ebccb2484"},{"problem":34,"code":"(fn f [l h] (when (< l h) (cons l (f (inc l) h))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":34,"code":"(fn [start end]\n   (loop [current start\n          values []]\n     (if (= current end)\n       values\n       (recur (inc current) (conj values current)))))","user":"5376190de4b06839e8705e1c"},{"code":"(fn [begin end]\n        (take (- end begin) (iterate inc begin)))","problem":34,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":34,"code":"#(loop [n %1 out []]\n   (if (= %2 n)\n     out\n     (recur (inc n) (into out (list n)))))\n\n\n;#(take (- %2 %1) (iterate inc %))","user":"5b819312e4b047b03b20378d"},{"code":"(fn [a b] (loop [accu '() b (- b 1)] (if (< b a) accu (recur (cons b accu) (- b 1)))))","problem":34,"user":"4e82c062535db62dc21a62cc"},{"problem":34,"code":"(fn myrange [from to] \n  \t(if (= from to) \n      \t'()\n      \t(conj (myrange (inc from) to) from)))","user":"55f04526e4b06e875b46ce20"},{"problem":34,"code":"(fn myrange [f l]\n  (loop [out []\n         curr f]\n    (if (< curr l)\n      (recur (conj out curr) (inc curr))\n      out)\n    )\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn [b e] (take (- e b) (iterate #(if (< % e) (+ 1 %) nil) b)))","problem":34,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn rnge [start stop]\n  (if (= start stop)\n    '()\n    (cons start (rnge (+ start 1) stop))))","problem":34,"user":"529e2383e4b04e0c58e87b8b"},{"problem":34,"code":"(fn [start end]\n         (take (- end start) (iterate #(inc %) start)))","user":"54f1e004e4b024c67c0cf8b9"},{"problem":34,"code":"(fn implement-range [start end]\n (loop [index start\n        computed-range []]\n   (if (= index end)\n     computed-range\n     (recur (+ 1 index) (concat computed-range (vector index)))\n     )\n )\n)","user":"53ac1992e4b047364c04445a"},{"problem":34,"code":"(fn [from to]\n  (take (- to from)(iterate inc from)))","user":"58e5e585e4b056aecfd47ca2"},{"problem":34,"code":"(fn [l u]\n  (loop [i (dec u)\n           s (list)]\n    (if (< i l)\n      s\n      (recur (dec i) (cons i s)))))","user":"5637557ce4b0bfe05bf117d4"},{"code":"(fn rang [x y]\n  (if (= x y)\n    '()\n    (conj (rang (inc x) y) x ) ))","problem":34,"user":"53120cb5e4b08068f379ecf0"},{"code":"(fn [x y]\n (take (- y x) (iterate inc x)))","problem":34,"user":"507e5cf8e4b085af06e3afd1"},{"problem":34,"code":"(fn [s e]\n  (loop [current s end e result '()]\n    (if (>= current end)\n      result\n      (recur (inc current) end (concat result (list current)))\n\n      ))\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":34,"code":"(fn rng[s e]\n  (loop [n s d[]]\n    (if (= n e) d\n      (recur (inc n) (concat d [n])))))","user":"558378dce4b05c286339e115"},{"code":"(fn [a b]\n  (reverse\n   (loop [acc '() start a end b]\n     (if (= start end)\n       acc\n       (recur (conj acc start) (inc start) end)))))","problem":34,"user":"4f6c6d69e4b07046d9f4efba"},{"problem":34,"code":"(fn  [a b]\n  (loop[a a\n        ret []]\n    (if(= a b)\n      (seq ret)\n      (recur (inc a) (concat ret [a])))))","user":"59636ec9e4b066ee0a44b0c8"},{"problem":34,"code":"#(loop [i %1 end %2 acc []] (if (>= i end) acc (recur (+ i 1) end (conj acc i))))","user":"5dd44256e4b0948ae9d9ad69"},{"code":"(fn my-range\n  ([a b]      (my-range a b '()))\n  ([a b coll] (if (<= b a) coll\n                          (my-range a (dec b) (cons (dec b) coll)))))","problem":34,"user":"50df6dd0e4b061dbdced7225"},{"problem":34,"code":"(fn rng \n    [start, end] \n    (let [base (repeat (- end start) start)]\n      (map-indexed + base)))","user":"55893b09e4b059ccff29b1fe"},{"code":"(fn rng [a b]\n  (when (< a b)\n\t(cons a (lazy-seq (rng (inc a) b)))))","problem":34,"user":"539a2901e4b0b51d73faaf0f"},{"problem":34,"code":"(fn myRange [start end]\n        (if (<= 0 (- start end))\n          '()\n          (conj (myRange (inc start) end) start)))","user":"573c57ace4b0cd1946bd10c0"},{"problem":34,"code":"(fn my-range [l u] (if (= l u) '() (conj (my-range (+ l 1) u) l) ))","user":"5280a1ece4b0757a1b171407"},{"problem":34,"code":"(fn [min max]\n                 (loop [current min, max max, acc []]\n                   (if (>= current max)\n                     acc\n                     (recur (inc current) max (conj acc current)))))","user":"5eccbce6e4b016b56eae058e"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [iterator start list '()]\n    (if (< iterator end)\n      (recur (inc iterator) (conj list iterator))\n      (reverse list))\n    )\n  )","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [a o] \n  (loop [n a acc ()] \n    (if (= n o) \n      (reverse acc) \n      (recur (inc n) (conj acc n)))))","problem":34,"user":"4f40f055e4b0e243712b1fc2"},{"problem":34,"code":"(fn [-min -max]\n  (loop [x -min result []]\n    (if (= x -max)\n      result\n      (recur (+ x 1) (conj result x)))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"code":"(fn rnge [from to] (cond (= from to) []\n                         :else `[~from ~@(rnge (inc from) to)]))","problem":34,"user":"52153bdde4b0961f15ac4daa"},{"problem":34,"code":"(fn f [x y] (if (= x (- y 1)) (list x) (concat (list x) (f (+ x 1) y))))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"problem":34,"code":"(fn [x y] (take (- y x) (iterate inc x) ) )","user":"55c5820be4b0e31453f649b0"},{"problem":34,"code":"(fn\n  [lower-value higher-value]\n  (loop [cnt lower-value ans []]\n    (if (= cnt higher-value)\n      ans\n      (recur (inc cnt) (conj ans cnt))\n      )\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":34,"code":"(fn my-range [start end] \n  (loop [lst (list (dec end)) ctr (dec (- end start))]\n    (println lst ctr)\n    (if (= ctr 0)\n      lst\n      (recur (conj lst (dec (first lst))) (dec ctr)))))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn rng \n  ([start stop] (rng start stop '()))\n  ([start stop accum]\n   (if (< start stop)\n     (rng (inc start) stop (concat accum (list start)))\n     accum)))","problem":34,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn rneg [bottom top] (\n  if (= bottom top)  \n  '()\n  (conj (rneg (+ 1 bottom) top)  bottom)\n)\n)","problem":34,"user":"4f8da0e2e4b02e764a0a51b1"},{"code":"(fn[s e](take-while #(> e  %) (iterate inc s)))","problem":34,"user":"4fb23582e4b081705acca28a"},{"code":"(fn rang [b e] (if (== b e) '() (cons b (rang (+ 1 b) e))))","problem":34,"user":"51bf4560e4b013aa0d74b817"},{"problem":34,"code":"(fn x [m n]\n  (if (= m n)\n  ()\n  (conj (x (+ 1 m) n) m)))","user":"57a497e8e4b0a966079561e4"},{"code":";(fn [b e] (take (- e b) (iterate inc b) ))\n(fn f [b e] (if (= b e) () (cons b (f (inc b) e))))","problem":34,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":34,"code":"(fn [x y] (take (- y x) (#(iterate inc %) x)))","user":"54c46381e4b045293a27f61a"},{"code":"(fn [s e]\n  (loop [i s, res []]\n    (if (< i e)\n      (recur (inc i) (conj res i))\n      res)))","problem":34,"user":"4e89f9e5535d3e98b8023289"},{"problem":34,"code":"(fn createRange [a b] \n  (take (- b a) ((fn helper [start] (lazy-seq (cons start (helper (inc start))))) a)))","user":"57131dfbe4b07c98581c3a98"},{"code":"#(loop [x %1 results []]\n  (if (= x %2)\n    results\n    (recur (+ x 1) (conj results x))))","problem":34,"user":"51e6a311e4b0ab43cc26c21e"},{"code":"(fn rang [a b]\r\n  (if (< a b)\r\n    (cons a (rang (inc a) b))))","problem":34,"user":"500159b3e4b0678c553fc419"},{"code":"(fn [l h]\n  (loop [l l s []]\n    (if (>= l h)\n      s\n      (recur (inc l) (conj s l)))))","problem":34,"user":"50843a4ae4b0c98812d0788b"},{"problem":34,"code":"(fn [a b] \n  (loop\n   [a' a\n    acc '()]\n   (if\n    (< a' b)\n    (recur (inc a') (cons a' acc))\n    (reverse acc))))","user":"56050f06e4b08b23635d3161"},{"problem":34,"code":"(fn[x y]\n(loop [cur (dec y) acc '()]\n       (if (< cur x)\n            acc\n          (recur (dec cur) (conj acc cur)))))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [x] (inc x))  %1))","user":"59089229e4b047aa04b1997c"},{"problem":34,"code":"(fn rango [start end]\n  (loop [acc '()\n         cur end]\n    (if (= cur start)\n      acc\n      (recur (conj acc (dec cur)) (dec cur)))))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":34,"code":"#(loop [a (dec %2) r '()] (if (< a %1) r (recur (dec a) (conj r a))))","user":"507eed82e4b06ce648bcdbfe"},{"code":"(fn [start end] (take-while #(< % end) (iterate #(+ 1 %) start)))","problem":34,"user":"534bde26e4b084c2834f4a81"},{"code":"(fn [min max]\n(\n  loop [i min coll []]\n  (\n\t\tif (>= i max)\n\t\t\tcoll\n      (recur (inc i) (conj coll i))\n  )\n))","problem":34,"user":"4ff2f0a9e4b0678c553fc341"},{"problem":34,"code":"#(loop [cur %1 stop %2 acc []]\n   (if (< cur stop)\n       (recur (inc cur) stop (conj acc cur))\n        acc))","user":"548af5b5e4b0e286459a11f8"},{"problem":34,"code":"(fn [a b] (loop [c a o '()] (if (>= c b) o (recur (inc c) (concat o [c])))))","user":"543b4746e4b032a45b86932c"},{"code":"#(loop [res [] i %1] (if (< i %2) (recur (conj res i) (inc i)) res))","problem":34,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":34,"code":"(fn foo [i j] (when (< i j) (cons i (foo (inc i) j))))","user":"58740c18e4b01531a375ea49"},{"code":"(fn rng [start end]\n  (loop [cnt start acc ()]\n    (if (= cnt end)\n      (reverse acc)\n      (recur (inc cnt) (cons cnt acc)))))","problem":34,"user":"4f030cff535dcb61093f6a4d"},{"problem":34,"code":"(fn [start end]\n  (take \n    (- end start)\n    (iterate inc start)))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn [x y]\n  (loop [acc () curr x]\n    (if (= curr y)\n      (reverse acc)\n      (recur (cons curr acc) (inc curr)))))","problem":34,"user":"4f604bdee4b0defedf855fa7"},{"code":"(fn mkrange[n1 n2] (let [f (fn [n1a n2a acc] \n                             (cond\n                    \t\t\t(= n1a n2a) acc\n                    \t\t\t:default (recur (+ n1a 1) n2a (doall (concat  acc (list n1a))))\n                              )\n                             )\n                         ]\n                     \t\t(f n1 n2 (list))\n                    )\n  )","problem":34,"user":"4fb03cf4e4b081705acca262"},{"problem":34,"code":"#(loop [x %1, res []]\n    (if (< x %2) (recur (inc x) (conj res x)) res)\n    )","user":"5e85d0bde4b09a7a73c8bbd6"},{"code":"#(loop [a %1 b %2 acc []] (if (>= a b) acc (recur (inc a) b (conj acc a))))","problem":34,"user":"51b6f4f9e4b04fc00976d479"},{"code":"(fn [x y]\n   (take (- y x)(iterate inc x))\n   )","problem":34,"user":"528ce039e4b0239c8a67aebc"},{"code":"#(take (- %2 %1 ) (iterate inc %1))","problem":34,"user":"5045ac21e4b01f6c9a8b2371"},{"problem":34,"code":"(fn [acc start end]\n    (loop [acc acc start start end end]\n      (if (= start (- end 1))\n        (concat acc (conj '() start))\n        (recur (concat acc (conj '() start)) (inc start) end)))) '()","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn ranger [f l]\n  (letfn [ (helper [n acc] \n                   (if (= n l)\n                     acc\n                     (recur (inc n) (conj acc n))))]\n    (helper f [] ) ))","problem":34,"user":"5349da55e4b084c2834f4a68"},{"problem":34,"code":"(fn [i l]\n  (loop [i i out []]\n    (if (>= i l)\n      out\n      (recur (inc i) (conj out i)))))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn [start end]\n    (letfn [(f [acc x]\n              (if (= x end)\n                acc\n                (f (cons x acc) (+ x 1))))]\n      (reverse (f () start))))","problem":34,"user":"5141abf1e4b02fd87f5064c3"},{"problem":34,"code":"(fn [start end]\n  (take-while #(> end % ) (iterate inc start)))","user":"5719465fe4b07c98581c3b36"},{"code":"(fn my-range [from to]\n  (if (>= from to)\n    nil\n    (lazy-seq\n     (cons from\n           (my-range (inc from) to)))))","problem":34,"user":"4ee8b9c9535d93acb0a66884"},{"code":"#(loop [from %1 to %2 c ()]\n(if (= from to)\n(reverse c)\n(recur (inc from) to (conj c from))))","problem":34,"user":"4f035c39535dcb61093f6a90"},{"problem":34,"code":"(fn p34 [start stop]\n    (let [f (fn my-range\n              ([] (my-range start))\n              ([n] (concat [n] (lazy-seq (my-range (inc n))))))]\n      (take-while #(< % stop) (f))))","user":"550c55d0e4b06e50f9beb14d"},{"problem":34,"code":"(fn [a z]\n    (take (- z a) (iterate inc a)))","user":"56c23ca6e4b05cc29241ee7f"},{"code":"(fn myrange \r\n     ([begin end] (myrange begin end []))\r\n     ([curr end coll] \r\n       (if (= curr end)\r\n         coll\r\n         (recur (inc curr) end (conj coll curr)))))","problem":34,"user":"4dddff47535d08e6dec9fdd4"},{"problem":34,"code":"; (fn [a b] (take (- b a) (iterate inc a)))\n\n;#(take (- %2 %1) (iterate inc %1))\n\n;#(take (dec %2) (iterate inc %))\n\n#(take (- %2 %) (iterate inc %))","user":"565487dce4b0f9d632dd8482"},{"problem":34,"code":"(fn [start end]\n  (loop [vectr []\n         i start]\n    (if (= i end)\n      (seq vectr)\n      (recur (conj vectr i) (inc i)))))","user":"55f73078e4b06e875b46cea4"},{"problem":34,"code":"(fn create-range\n  [start end] \n  (loop [rng [] \n         current start \n         upper end]\n    (if (= current end)\n      rng\n      (recur (conj rng current) (inc current) end))))","user":"563e022be4b0da801c4e4664"},{"code":"(fn f [start end]\n  (\n  when (< start end)  (conj (f (inc start) end) start)\n    ))","problem":34,"user":"516e2246e4b092a6408c5bc5"},{"problem":34,"code":"(fn makeRange[curRange fin]\n    ; (println (into [] start))\n    (if (number? curRange)\n        (makeRange [curRange] fin)\n        \n    \n        (if \n            (= (last curRange) (- fin 1))\n            curRange\n            (makeRange (conj curRange (+ (last curRange) 1 ) ) fin)\n        )\n    )\n)","user":"5e23ca7fe4b05b4b01516144"},{"problem":34,"code":"#(loop [x %1 y %2 col [] i x] (if (< i y) (recur x y (conj col i) (inc i)) col))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":34,"code":"(fn intervall [start end]\n  (lazy-seq (if (< start end)\n              (cons start\n                    (intervall (inc start) end))\n              nil)))","user":"580bd81ee4b0849f6811b711"},{"problem":34,"code":"(fn [a b]\n  (loop [i a\n         acc []]\n    (if (< i b)\n      (recur (inc i) (conj acc i))\n      acc)))","user":"55dab408e4b0e31453f64ad9"},{"code":"(fn range2 [from to]\n  (loop [f from\n         x []]\n    (if (= f to)\n      x\n      (recur (inc f) (conj x f)))))","problem":34,"user":"4fc93728e4b0ee37620e1844"},{"problem":34,"code":"#(loop [curr %1 myseq []] \n   (if(< curr %2)\n \t  \t(recur (inc curr) (conj myseq curr))\n   \t\tmyseq\n    )\n  )","user":"593db05ae4b069cdc2982bab"},{"problem":34,"code":"(fn range* [a b]\n  (take (- b a) (iterate inc a)))","user":"56bca51ae4b0f26550335963"},{"code":"(fn [beg end & r]\n  (if (= beg end)\n    (reverse r)\n    (recur (inc beg) end (conj r beg))))","problem":34,"user":"539c64cde4b0b51d73faaf2a"},{"code":"(fn ranger\n    ([a b]\n        (ranger a b '()))\n    ([a b acc]\n        (if  (<= b a)   acc\n             (recur  a (- b 1) (conj acc (- b 1))))))","problem":34,"user":"4e51fccf535d302ef430da6b"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         y y\n         rng '()]\n    (if (= x y)\n      (reverse rng)\n      (recur (inc x) y (cons x rng)))))","user":"55b7f263e4b01b9910ae29b4"},{"problem":34,"code":"(fn [start stop]\n  (loop [i start lst []]\n    (if (>= i stop)\n      (seq lst)\n      (recur (inc i) (conj lst i)))))","user":"5990a9fde4b0866487ed0d54"},{"problem":34,"code":"(fn rangy [i n]\n  (assert (<= i n))\n  (letfn [(next-integer [i]\n            (cons i\n                  (lazy-seq (next-integer (inc i)))))]\n    (take (- n i) (next-integer i))))","user":"56c33ceae4b05cc29241ee89"},{"code":"#(loop [f %1 s %2 r []]\n  (if (= f s)\n      r\n      (recur (inc f) s (conj r f))))","problem":34,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"code":"(fn build [start end]\n  (if (< start end)\n    (cons start (build (inc start) end))\n    '()\n  )\n)","problem":34,"user":"4fe610fde4b0e8f79898fece"},{"code":"#(take-while (fn [n] (< n %2)) (iterate inc %1))","problem":34,"user":"4fe8da4de4b0547ebccb2429"},{"problem":34,"code":"(fn myrange[s,e]\n  (if (= s e)\n    '()\n    (conj (myrange (inc s) e) s )  ))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [st en]\n   (let [n (- en st)]\n     (take n (iterate #(+ 1 %) st))))","problem":34,"user":"539b6c78e4b0b51d73faaf20"},{"code":"(fn [from to]\n  (letfn [(counter [n] (cons n (lazy-seq (counter (inc n)))))]\n    (take-while (partial > to) (counter from))))","problem":34,"user":"515ead6be4b049add99a053e"},{"problem":34,"code":"(fn rng [x y] (take (- y x) (iterate inc x)) )","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn[l h] (reduce #(conj % (+ (count %) %2 )) [] (repeat (- h l) l)))","problem":34,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [a b]\r\n  (loop [ret [] n a]\r\n    (if (= n b)\r\n      ret\r\n      (recur (concat ret (list n)) (inc n)))))","problem":34,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":34,"code":"#(loop [arg1 % arg2 (dec %2) sq '()] (if (>= arg2 arg1)  (recur  arg1 (dec arg2) (conj sq arg2)) sq))","user":"5720ba36e4b0c5bde472c09c"},{"problem":34,"code":"(fn [start end]\n (loop [ret []\n        s start\n        u end]\n   (if-not (< s u)\n     ret\n     (recur (conj ret s) (inc s) u))))","user":"57481f1fe4b009280f9f2b82"},{"code":"(fn ringe [minimo supext]\n           (loop  [c minimo r []]\n             (println c r)\n    \t(if (= c supext)\n      \t\t(seq r)\n      \t\t(recur (inc c) (conj r c)))))","problem":34,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn my-range [n1 n2]\n  (reductions + n1 (repeat (- n2 n1 1) 1)))","problem":34,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":34,"code":"(fn [init max]\n  (take (- max init) (iterate inc init)))","user":"5ff82adae4b06df49cee14a4"},{"code":"(fn [x y] (take (- y x) ((fn twixt [z] (cons z (lazy-seq (twixt (inc z))))) x)))","problem":34,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn [a e] (take (- e a) (iterate inc a)))","problem":34,"user":"505b9084e4b032b709c81371"},{"problem":34,"code":"(fn [a b]\n  (take-while\n   #(< % b)\n   (iterate inc a)))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":34,"code":"(fn [start end] \n  (loop [current start result []]\n        (if (< current end)\n            (recur (inc current) (conj result current))\n            result\n        )\n    )\n  )","user":"5df54584e4b03c219ef1a38f"},{"problem":34,"code":"(fn [a b]\n  \"returns all integers in half-open range [a, b)\"\n  (loop [x '()\n         y (dec b)]\n    (if (<= a y)\n      (recur (conj x y) (dec y))\n      x))\n  (take (- b a) (iterate inc a)))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":34,"code":"(fn rg\n   ([a b v]\n   (if (= a b) v\n     (recur (inc a) b (into v [a]))))\n   ([a b] (rg a b [])))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn [x y] (loop [n x acc []] (if (= n y) acc (recur (inc n) (conj acc n)))))","problem":34,"user":"5302b580e4b0d8b024fd3733"},{"problem":34,"code":"(fn [x y]\n     (loop [x x\n            y y\n            acc '()]\n         (println x)\n         (if (= x y)\n           (reverse acc)\n           (recur (inc x) y (conj acc x))\n         )\n      )\n)","user":"5e9e8648e4b00a66d4a95178"},{"problem":34,"code":"(fn rng \n  ([a z] (rng a (Math/abs (- z a)) ()))\n  ([a z accum] (if (<= z 0) (reverse accum) (rng (inc a) (dec z) (conj accum a)))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":34,"code":"(fn my-range [n1 n2]\n  (when (< n1 n2)\n    (cons n1 (my-range (inc n1) n2))))","user":"5e218bb7e4b05b4b01516123"},{"code":"(fn range-iter\n  ([]    (iterate inc 0))\n  ([n]   (range-iter 0 n))\n  ([m n] (take-while (partial > n) (iterate inc m))))","problem":34,"user":"4fc6305de4b0ee37620e180b"},{"problem":34,"code":"(fn\n   [b e]\n   (loop [be b\n          en e\n          li []]\n     (if (= be en)\n       li\n       (recur (inc be) en (conj li be)))))","user":"589e22fae4b02bd94d917e56"},{"problem":34,"code":"(fn [from until]\n  (take-while #(< % until) (iterate inc from)))","user":"50e09f60e4b061dbdced7237"},{"problem":34,"code":"(fn [f l] (loop [c f r []] (if (>= c l) r (recur (inc c) (conj r c)))))","user":"53320dd1e4b019098a6f8b71"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (cond\n   (>= start end) '()\n   :else (conj (my-range (inc start) end) start)))","user":"5cf938a5e4b0b71b1d808a90"},{"code":"(fn [x1 x2] (take-while #(not= x2 %) (iterate inc x1)))","problem":34,"user":"525d95b1e4b0cb4875a45d81"},{"problem":34,"code":"(fn [from to]\n  (loop [f from\n         t (dec to)\n         acc '()]\n    (if (> f t)\n      acc\n      (recur f (dec t) (cons t acc)))))","user":"5c1edf23e4b0efcb0b05b25d"},{"code":"#(loop [from %1 to %2 output []]\n  (if (= from to)\n    output\n    (recur (inc from) to (conj output from))))","problem":34,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":34,"code":"(fn [start, stop ](take (- stop start)(#(iterate inc %) start)))","user":"5856cdd6e4b0f14aab7c86fa"},{"code":"(fn rang\n  [low high]\n  (loop [result ()\n         current low]\n    (if (= current high)\n      (reverse result)\n      (recur (conj result current) (inc current)))))","problem":34,"user":"53383c74e4b0e30313ee6c92"},{"code":"(fn [start, end]\n(loop [current start built '()]\n  (if (= current end)\n    (reverse built)\n    (recur (inc current) (cons current built)))))","problem":34,"user":"52a32876e4b04e0c58e87bfb"},{"problem":34,"code":"(fn [s e]\n  (loop [i s acc []]\n    (if (>= i e)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"579816abe4b039eba2ecb10d"},{"problem":34,"code":"(fn [start end] \n  (loop [numbers (list)\n         current start]\n    (if (< current end)\n      (recur (concat numbers (list current))\n             (inc current))\n      numbers)))","user":"57a4f5cae4b0a966079561f0"},{"problem":34,"code":"(fn [start end]\n  ((fn [start end col]\n\t  (if (>= start end)\n    \tcol\n\t    (recur (inc start) end (conj col start)))) start end []))","user":"5821160de4b04b46fc4b0f6c"},{"code":"#(loop [x % r []] (if (< x %2) (recur (inc x) (conj r x)) r))","problem":34,"user":"520c9489e4b0b022ef140c98"},{"problem":34,"code":"(fn [a b] (take (- b a ) (iterate inc a)))","user":"6059f25de4b07e92fa001ad1"},{"problem":34,"code":"(fn me\n  ([start end] (me start end []))\n  ([start end acc]\n    (if (= start end)\n      acc\n      (recur (inc start) end (conj acc start)))))","user":"5461c402e4b01be26fd746a6"},{"code":"(fn [a b]\n  (loop [s [] i a]\n    (if (= i b)\n      s\n      (recur (conj s i) (inc i))\n      )\n    )\n  )","problem":34,"user":"504e90bae4b069badc5a33b8"},{"problem":34,"code":"#(reduce (fn [a,i] (conj a (+ 1 (last a))) ) [%1]  (take (- %2 %1 1) (repeat 1)))","user":"585d40afe4b0f14aab7c8798"},{"problem":34,"code":"(fn myrange [from to]\n  (take (- to from) (iterate inc from)))","user":"563b5dc9e4b0bfe05bf1180f"},{"problem":34,"code":"(fn r [v n l] (if (< n l) (r (conj v n) (inc n) l) v)) []","user":"595a4fb8e4b066ee0a44afba"},{"problem":34,"code":";#(take(- %2 %1)(iterate inc %1))\n(fn [x y](take(- y x)(iterate inc x)))","user":"580d7e53e4b0849f6811b73e"},{"problem":34,"code":"(fn [start end]\n   (loop [begin start\n          limit end\n          result []]\n     (if (< begin limit)\n       (recur (inc begin) limit (conj result begin))\n       result)))","user":"5915a0a5e4b09b4ee5954b73"},{"problem":34,"code":";(fn my-range [i j]\n;  (loop [current i acc nil]\n;    (if (>= current j)\n;      acc\n;      (recur (inc current) (conj (vec acc) current)))))\n(fn [i j]\n  (take-while #(< % j) (iterate inc i)))","user":"56255e2de4b00a550fc90297"},{"problem":34,"code":"(fn range' [start end]\n  (let [r (- end start)]\n    (take r (iterate inc start))))","user":"5d0eed51e4b0cc9c91588262"},{"problem":34,"code":"(fn [s e] \n   (take (- e s) (iterate inc s)))","user":"6086abade4b0736b099e42ff"},{"problem":34,"code":"(fn [x y]\n    (take (- y x) (iterate inc x))\n)","user":"57513f88e4b02ea114799283"},{"code":"(fn[i j]((fn f [x] (if (= x j) '() (cons x (f (+ x 1))))) i))","problem":34,"user":"52f818a6e4b047fd55836fcc"},{"problem":34,"code":"(fn [a b]\n  ((fn [ys x y]\n    (if (= x y)\n      (reverse ys)\n      (recur (cons x ys) (inc x) y))) '() a b))","user":"55b25970e4b0da326a65cf7e"},{"problem":34,"code":"(fn [n1 n2]\n    (->> (repeat (- n2 n1) n1)\n        (reductions (fn [k1 k2] (inc k1)))\n        ) \n    )","user":"577829f9e4b0979f8965165a"},{"code":"(fn [x,y] (take-while #(< % y) (iterate inc x)))","problem":34,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn my-range [start end]\n  (reverse\n   (loop [x (- end 1) acc []] \n    (if (< x start)\n      acc\n      (recur (dec x) (conj acc x))))))","problem":34,"user":"522d0360e4b0806774ddfef7"},{"problem":34,"code":"(fn [start end]\n  (loop [curr start\n         nums []]\n    (if (= curr end)\n        nums\n        (recur (+ 1 curr) (conj nums curr)))))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":34,"code":"(fn [x y]\n    (take (- y x)\n         (iterate inc x)))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":34,"code":"(fn [a b]\n  (loop [r [] v a]\n    (if (>= v b) r\n    \t(recur (conj r v) (inc v)))))","user":"57dfab73e4b0bd073c202468"},{"problem":34,"code":"(fn [min max]\n  (loop [min min\n         max max\n         acc '()]\n    (if (= min max)\n      (reverse acc)\n      (recur (inc min) max (cons min acc)))))","user":"58f3c18ee4b0438e51c2cead"},{"problem":34,"code":"(fn a [& args]\n\t((fn c \n\t\t[d](if (< d (get (into [] args) 1)) (into [] (cons d (c (+ d 1)))) [])\n\t) (get (into [] args) 0))\n)","user":"5710e574e4b09c608db7043b"},{"code":"(fn range2 [a b] (take (- b a) (iterate inc a)))","problem":34,"user":"4f0ef874535d0136e6c22328"},{"problem":34,"code":"(fn [x z]\n  (reverse\n  (loop [in x\n         out '()]\n    (if (< in z)\n      (recur (inc in) (cons in out))\n      out))))","user":"594bd637e4b07ddc2dafae41"},{"problem":34,"code":"(fn reng[s e]\n  (if (= (inc s) e)\n    [s]\n    (cons s (reng (inc s) e))))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn _range [start stop]\n  (if (>= start stop)\n    '()\n    (cons start (_range (inc start) stop))))","problem":34,"user":"4fdb881ee4b05e33b9224f5e"},{"code":"(fn myRange [a b]\n   (if (= a b)\n     '()\n     (concat (list a) (myRange (inc a) b))))","problem":34,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn[a b]\n   (loop [result [] x a  y b]\n     (if (= x y)\n       result\n       (recur (conj result x)(inc x) y)))\n   \n   )","problem":34,"user":"52342722e4b07e3ee2be83c0"},{"problem":34,"code":"(fn [f t]\n  (take (- t f)\n          (iterate inc f)))","user":"57d4f225e4b0bd073c2023a6"},{"problem":34,"code":"(fn myrange [start end]\n  (if (>= start end) '()\n      (conj (myrange (inc start) end) start)\n      )\n)","user":"55a65872e4b09e57187da299"},{"problem":34,"code":";(fn [a b]\n;  (loop [result []\n;         n a]\n;    (if (>= n b)\n;      result\n;      (recur (conj result n) (inc n)))))\n\n;#(reduce (fn [result n] (conj result (inc (last result)))) [%1] (repeat (dec (- %2 %1)) 0))\n\n#(take (- %2 %1) (iterate inc %1))","user":"59837909e4b021a7a535fe16"},{"problem":34,"code":"(fn [n m]\n  (loop [n n res []]\n    (if (< n m)\n      (recur (inc n) (conj res n))\n      res)))","user":"589771f9e4b00487982d52bd"},{"problem":34,"code":"(fn [start end]\n  (loop [s start\n         to-return []]\n    (if (< s end)\n      (recur (+ s 1) (conj to-return s))\n      to-return)))","user":"59595f85e4b066ee0a44afa1"},{"problem":34,"code":"#(loop [x %1 res '()](if (>= x %2) (reverse res)  (recur (inc x) (conj  res x) ) ))","user":"52c7c40be4b0c2d177d62125"},{"code":"(fn [from to] \n  (take (- to from) (iterate inc from)))","problem":34,"user":"5012ec0ae4b0c87326002230"},{"problem":34,"code":"(fn [l h & a]\n  (if (< l h)\n    (recur (inc l) h (conj a l))\n    (reverse a)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":34,"code":"#(loop [lst [] curr %1 end %2] (if (< curr end) (recur (conj lst curr) (inc curr) end) lst))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [start end]\n  (loop [x start result []]\n    (if (< x end)\n      (recur (+ x 1) (conj result x))\n      result)))","problem":34,"user":"534815bde4b084c2834f4a53"},{"code":"(fn rng [a b] (if (= a b) () (cons a (rng (inc a) b))))","problem":34,"user":"4f2de7e9e4b0d6649770a061"},{"problem":34,"code":"(fn rn [a b] (if (< a b) (cons a (rn (inc a) b)) nil))","user":"56c26880e4b05cc29241ee81"},{"code":"(fn [n m] (take (- m n) (iterate inc n)))","problem":34,"user":"507a08e4e4b08327cd804a67"},{"code":"(fn [start end]\n  (loop [i start, result []]\n    (if (< i end)\n      (recur (inc i) (conj result i))\n      result)))","problem":34,"user":"4fa820fde4b081705acca1ce"},{"problem":34,"code":"(fn [start end]\n  (loop [my-range '(), idx start]\n    (if (< idx end)\n      (recur (concat my-range [idx]) (inc idx))\n      my-range)))","user":"55fe7e15e4b00f4cabc57651"},{"problem":34,"code":"(fn my-range\n  ([start end] (my-range start end []))\n  ([start end accum]\n    (if (>= start end)\n      accum\n      (recur (inc start) end (conj accum start)))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":34,"code":"(fn my-range [from to]\n  (if (= from to)\n    '()\n    (conj (my-range (+ 1 from) to) from)))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":34,"code":"(fn [l u]\n   (loop [s [] ln (- u l) inc-by 0]\n     (if (= ln (count s))\n       s\n       (recur (conj s (+ l inc-by)) ln (inc inc-by)))))","user":"59826556e4b021a7a535fdfe"},{"code":"#(loop [i %1 e %2 xs []] (if (= i e)\n                           xs\n                           (recur (inc i) e (conj xs i))))","problem":34,"user":"4fb4303fe4b081705acca2ac"},{"problem":34,"code":"(fn range' [s t]\n  (let [step\n        (fn [s t]\n          (if (< s t)\n            (cons s (range' (inc s) t))\n            ()))]\n    (lazy-seq (step s t))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":34,"code":"(fn [s e]\n  (take-while #(< % e) (iterate inc s))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":34,"code":"(fn [x y] (loop [ul '()\n                                fx x\n                                fy y]\n                           (if (>= fx fy) (reverse ul) (recur (conj ul fx) (inc fx) fy))))","user":"5e7bb000e4b085ba37836e1d"},{"code":"(fn [& coll] \n  (loop [firstnum (first coll) lastnum (last coll) result []] \n    (if (= firstnum lastnum) result \n      (recur (inc firstnum) lastnum (conj result firstnum)))))","problem":34,"user":"50621cbde4b0341461c88951"},{"problem":34,"code":"(fn myrange [a b]\n    (if (< a b) (conj (myrange (inc a) b) a) '())\n  )","user":"603ae21de4b0d5df2af222fb"},{"code":"#(take (Math/abs (- %1 %2)) (iterate inc %1))","problem":34,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [start end]\n  (reverse \n   (loop [x start\n          y end\n          coll '()]\n    (if (< x y)\n      (recur (+ x 1) y (conj coll x)) coll))))","problem":34,"user":"50dcb2f4e4b02e6ac9592c91"},{"problem":34,"code":"(fn f [x y]\n  (when (> y x)\n    (concat (list x) (f (inc x) y))))","user":"575fbe58e4b08062f99a4e87"},{"problem":34,"code":"#(loop [a %1 c []] (if (>= a %2) c (recur (inc a) (conj c a))))","user":"5c41db45e4b08cd430848ece"},{"problem":34,"code":"(fn [a b] (loop [x a,coll []] (if (= x b) \n                                     coll\n                                     (recur (inc x) (conj coll x))\n                                     )  ))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":34,"code":"(fn [a b] (loop [x a, r []] (if (< x b) (recur (+ x 1) (conj r x)) r)))","user":"57442c96e4b009280f9f2b33"},{"code":"(fn [n m] (take-while #(< % m) (iterate inc n)))","problem":34,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"(fn myrange [a b] (if (< a b)\n                      (conj (myrange (+ a 1) b)\n                            a)))","problem":34,"user":"508c33ece4b0f17d83ea26b1"},{"problem":34,"code":"(fn [start end]\n  (->> start\n       (iterate inc)\n       (take-while #(< % end))))","user":"5422c959e4b01498b1a71ac7"},{"problem":34,"code":"(fn [First Last]\n  (loop [x First Ret '()]\n    (if (= x Last)\n      (reverse Ret)\n      (recur (inc x) (conj Ret x))\n    )  \n  )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn my-range [low high]\n  (if (>= low high)\n    '()\n    (cons low (my-range (inc low) high))))","problem":34,"user":"53322cece4b019098a6f8b73"},{"code":"(fn [s e] (map (partial + (- s 1)) (take (- e s) (iterate inc 1))))","problem":34,"user":"536673a8e4b0243289761e76"},{"code":"(fn [from to]\n  (take-while #(< % to)\n              (iterate inc from)))","problem":34,"user":"4f1b92d1535d64f60314647b"},{"problem":34,"code":"(fn f [n1 n2]\n   (if (= n1 n2)\n     '()\n     (conj (f (inc n1) n2) n1)))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn [s e]                                                                                                                                                \n           (lazy-seq                                                                                                                                            \n             (loop [i s r []]                                                                                                                                   \n                (if (< i e)                                                                                                                                     \n                    (recur (inc i) (conj r i))                                                                                                                  \n                    r))))","problem":34,"user":"4e4be570535dc968683fc4d8"},{"problem":34,"code":"(fn rng [start end] (take (- end start) (iterate inc start )))","user":"600b385ce4b074f607df668d"},{"code":"(fn [a b] (take-while #(distinct? b %) (iterate inc a)))","problem":34,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn [b t] (take (- t b) (iterate inc b)))","problem":34,"user":"4ec34578535dcc7ae8597d51"},{"code":"(fn [f e]\n  ((fn impl [f e rs]\n     (if (= (last rs) (dec e))\n       rs\n       (impl (inc f) e (conj rs f))))\n   f e []))","problem":34,"user":"521392bce4b0d32679a5065e"},{"problem":34,"code":"(fn range-impl\n      [start end]\n      (take (- end start) (iterate inc start)))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":34,"code":"(fn r [start end]\n  (seq (loop [start start acc []]\n    (if (= start end)\n      acc\n      (recur (inc start) (conj acc start))))))","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn myrange [l h]\n  (\n   (fn dorange [c acc]\n    (if\n      (< c l)\n      acc\n      (dorange (- c 1) (cons c acc))\n      ))\n   (- h 1) '()))","problem":34,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":34,"code":"(fn [start stop]\n  (loop [current start interval []]\n    (if (< current stop)\n      (recur (inc current) (conj interval current))\n      interval)))","user":"5ab8037ae4b073f177442678"},{"code":"(fn f [a b]\n  (when (< a b)\n  (cons a (f (+ a 1) b))))","problem":34,"user":"4e55ea0c535d8a8b8723a281"},{"problem":34,"code":"#(loop [lower %1 upper %2 answer []]\n   (if (= lower upper)\n     answer\n     (recur (inc lower) upper (conj answer lower))\n   )\n)","user":"560fe558e4b05f002753df63"},{"problem":34,"code":"(fn [start limit]\n  (loop [i start\n         new-list []]\n    (if (= i limit)\n      new-list\n      (recur (inc i) (conj new-list i)))))","user":"56b18445e4b0982f16b37dee"},{"code":"(fn [s e]\n   (loop [s s e e result '()]\n     (if (>= s e)\n       result\n       (recur (+ s 1) e (concat result (list s))))))","problem":34,"user":"52fac708e4b047fd55836fff"},{"code":"(fn [x y](take (- y x) (iterate inc x)))","problem":34,"user":"4e9c0552535dbda64a6f6b7b"},{"problem":34,"code":"(fn [start end]\n   (loop [accum '()  x start]\n     (if (> end x)\n       (recur (conj accum x) (inc x))\n       (reverse accum)\n       )\n     ))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn [start end] (loop [current start r '()]\n  (if (= end current)\n      (reverse r)\n      (recur (+ current 1) (conj r current)))))","problem":34,"user":"4e951f2c535dbda64a6f6b2f"},{"code":"(fn lazy-range\n  [low high]\n  (lazy-seq (when (< low high) (cons low (lazy-range (inc low) high)))))","problem":34,"user":"53028354e4b0d8b024fd372b"},{"code":"#(take (- %2 %)\n  (iterate inc %))","problem":34,"user":"4dcd327b535d5973398f929b"},{"problem":34,"code":"(fn my-range [from exclusive-to]\n  (loop [range-list [] counter from]\n    (if (< counter exclusive-to)\n      (recur (conj range-list counter) (inc counter))\n      range-list)))","user":"5852801ee4b0b7285a6f4eb1"},{"code":"#(loop [start %1 end %2 coll []]\n   (if (< start end)\n     (recur (inc start) end (conj coll start))\n     coll))","problem":34,"user":"51460e4ce4b04ef915e37314"},{"problem":34,"code":"(fn [from-inclusive to-exclusive]\n              (take (- to-exclusive from-inclusive) (iterate inc from-inclusive))\n              )","user":"5e491182e4b043cd24807a46"},{"problem":34,"code":"(fn my-range [lb ub]\n  (take (- ub lb) (iterate inc lb))\n)","user":"569e3175e4b0542e1f8d1484"},{"code":"(fn [start stop]\r\n  (letfn [(rng [start stop]\r\n      (if (< start stop)\r\n        (lazy-seq (cons start (rng (inc start) stop)))\r\n        nil))]\r\n  (rng start stop)))","problem":34,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":34,"code":"(fn my-range\n  ([mn mx] (my-range mn mx mn))\n  ([mn mx n]\n   (if (>= n mx)\n     '()\n     (lazy-seq (cons n (my-range mn mx (inc n)))))))","user":"58d48df8e4b03c36ff7e5941"},{"problem":34,"code":"#(:nums \n  (reduce \n   (fn [data x] \n     { :last (inc (:last data)) \n       :nums (conj (:nums data) (:last data))\n     })\n   { :last %1 :nums [] }\n   (repeat (- %2 %1) %1)))","user":"5d123457e4b02c15ef021996"},{"problem":34,"code":"(fn this [x y]\n  (cond\n  (= x y) ()\n  :else (conj (this (+ x 1) y) x)\n  ))","user":"59165082e4b09b4ee5954b88"},{"code":"(fn rng [start end]\n  (if (>= start end)\n    '()\n    (conj (rng (inc start) end) start)))","problem":34,"user":"52aa4a67e4b0c58976d9ac62"},{"code":"(fn rng\n  ([s f] (rng s f []))\n  ([s f acc]\n    (if (= s f)\n      acc\n      (rng (inc s) f (conj acc s))\n    )\n  )\n)","problem":34,"user":"4fff00ede4b0678c553fc3fc"},{"problem":34,"code":"#(loop [min %1 max %2 nrs []]\n   (if (= (dec max) (last nrs))\n     nrs\n     (recur (inc min) max (conj nrs min))))","user":"5a071cb2e4b01bb0ae8afdd8"},{"problem":34,"code":"(fn [s e]\n  (reduce\n   (fn [c x] (conj c (inc (last c))))\n   [s]\n   (repeat (dec(- e s)) 0)))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn rng [from to]\n  (if (= from to)\n    '()\n    (cons from (rng (inc from) to))))","problem":34,"user":"532b9075e4b09d4e7a9b5533"},{"problem":34,"code":"(fn [start end] (take (- end start) (iterate #(+ % 1) start)))","user":"556cb481e4b09a3098a52501"},{"problem":34,"code":"(fn [low high]\n   (take-while\n    (partial > high)\n    (iterate inc low)))","user":"596fb563e4b01722bebd4c55"},{"problem":34,"code":"(fn [from to]\n   (loop [current to result '()]\n     (if (= from current)\n      result\n       (recur (dec current) (conj result (dec current))))))","user":"6090e617e4b03bd49d9f36ce"},{"problem":34,"code":"(fn r [s e] (reverse ((fn rge [start end xs] (if (>= start end) xs (rge (inc start) end (cons start xs)))) s e '())))","user":"5888f271e4b0f1effa3b7726"},{"problem":34,"code":"(fn my-range [st ed]\n  (loop [st (dec st), ed (dec ed), ls nil]\n    (if (= st ed)\n      ls\n      (recur st (dec ed) (cons ed ls)))))","user":"598601f9e4b021a7a535fe79"},{"problem":34,"code":"(fn range-int [start end]\n  (take (- end start) (iterate inc start)))","user":"5ef9ea69e4b09b61f08553d1"},{"problem":34,"code":"(fn [a b] \n(take (- b a) (iterate inc a)))","user":"5c46bdbde4b0e06e1360a3a4"},{"problem":34,"code":"(fn [begin end] (loop [res []\n                       cur begin]\n                  (if (>= cur end)\n                    res\n                    (recur (conj res cur) (inc cur)))))","user":"5c05cae7e4b0bdcf453d16a3"},{"problem":34,"code":"(fn [x y]\n  (let [z (- y x)]\n  \t(take z (iterate inc x))))","user":"55f7ebeae4b06e875b46ceb7"},{"problem":34,"code":"(fn implement-range \n  [start end]\n  (if (>= start end)\n    '()\n  (conj (implement-range(inc start) end) start)))","user":"5ac35d00e4b0e27600da7712"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         end end\n         result '()]\n    (if (= end start) result\n      (recur start (dec end) (cons (dec end) result)))\n   )\n  )","user":"54fa60dfe4b0cf870d934704"},{"code":"(fn [f l]\n  (take (- l f) (iterate inc f)))","problem":34,"user":"4e570f47535d8a8b8723a287"},{"code":"(fn my-range\n  \n  [lower-limit higher-limit]\n  \n  (vec (butlast (loop [result [lower-limit]]\n     (let [last-one (last result)]\n     (if (= last-one higher-limit)\n       result\n       (recur (conj result (inc last-one)))\n                \n       ))))))","problem":34,"user":"53951c75e4b0b51d73faaed4"},{"code":"(fn [a b]\n  (take-while #(< % b) (iterate inc a)))","problem":34,"user":"4e7e4d5c535db169f9c7970f"},{"problem":34,"code":"(fn [lb ub] (loop [cur lb\n                   r []]\n              (if (>= cur ub) r (recur (inc cur) (conj r cur)))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":34,"code":"(fn [_s _e]\n   (loop [s _s\n          e _e\n          return []]\n     (if (< s e)\n       (recur (inc s) e (conj return s))\n       return)))","user":"55b2505be4b0da326a65cf7d"},{"code":"(fn [start end]\n   (loop [current (+ start 1) accumulated [start]]\n     (if-not (= current end)\n       (recur (+ current 1) (conj accumulated current))\n       accumulated)))","problem":34,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"(fn [start end]\n  (loop [s [] i start]\n    (if (< i end)\n      (recur (conj s i) (inc i))\n      s)))","problem":34,"user":"4faccddae4b081705acca22e"},{"problem":34,"code":"(fn [from to] (take-while #(< % to) (iterate inc from)))\n\n;#(take (- %2 %1) (iterate inc %1))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn rng [a b] \n  (if (= a (dec b)) \n    [a] \n    (concat [a] (rng (inc a) b))))","problem":34,"user":"4f0f01c0535d0136e6c22329"},{"code":"#(loop [result []\n        item %1]\n  (if (= item %2)\n    result\n    (recur (conj result item) (inc item))))","problem":34,"user":"531d34cfe4b08068f379edac"},{"problem":34,"code":"(fn [x y] (let [n (- y x) r (take n (iterate #(inc %) x))] r))","user":"53d8da61e4b0e771c3025471"},{"code":"(fn [start end]\n  (loop [s start e (- end 1) l (list)]\n    (if (> e s)\n      (recur s (- e 1) (conj l e))\n      (conj l e))))","problem":34,"user":"4f284e7ce4b0d6649770a015"},{"code":"(fn fx[min max] (if (>= min max) () (cons min (fx (+ min 1) max) )))","problem":34,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":34,"code":"(fn [start end]\n  (loop [j start result []]\n    (if (= j end)\n      result\n      (recur (inc j) (conj result j) ))))","user":"53dfe311e4b0d874e779ae47"},{"problem":34,"code":"(fn [start end]\n  (loop [coll () index start]\n    (if (= index end)\n      coll\n      (recur (concat coll (list index))\n             (inc index)))))","user":"567ea403e4b0feffd0d18eb5"},{"problem":34,"code":";;(fn [start end]\n\t#(loop [x %1 new-list []]\n    \t\t(if (< x %2)\n\t\t\t\t;; true\n      \t\t\t(recur \n\t\t\t\t\t(inc x) \n\t\t\t\t\t(conj new-list x)\n\t\t\t\t)\n\t\t\t\t;; false\n      \t\t\tnew-list\n\t\t)\n\t)\n;;)","user":"5595c60ee4b0c79f6e1db96f"},{"problem":34,"code":"(fn iter [bottom top]\n\t(if (= bottom top)\n\t\t[]\n\t\t(cons bottom (iter (inc bottom) top))\n\t)\n)","user":"52edc72de4b05e3f0be25ebb"},{"problem":34,"code":"(fn myrange [start end]\n  (when (< start end)\n    (cons start\n          (lazy-seq (myrange (inc start) end)))))","user":"554d386ee4b0a04f792995b8"},{"problem":34,"code":"#(loop [cnt %1 coll []] (if (< cnt %2) (recur (inc cnt) (concat coll [cnt])) coll))","user":"5b2e6b02e4b025bcb146f2d3"},{"problem":34,"code":"(fn [min max]\n  (loop [cnt min\n  \t\tres []]\n  \t(if (= cnt max)\n  \t\tres\n  \t\t(recur (inc cnt)\n  \t\t\t   (conj res cnt)))))","user":"5d125d63e4b02c15ef021999"},{"problem":34,"code":"(fn [start end] \n  (loop [x start coll []] \n    (if (< x end) \n      (recur (inc x) (conj coll x))\n      (reverse (into '() coll)))))","user":"59b2b093e4b0e1f4e384c8fd"},{"problem":34,"code":"#(loop [acc () a %] \n    (if (>= a %2) \n      (reverse acc) \n      (recur (conj acc a) (inc a))))","user":"5d7a748ce4b02e6b30c93547"},{"problem":34,"code":"(fn _range [a b] \n  (if \n    (= a b) \n    '() \n    (conj (_range (+ a 1) b) a)))","user":"58a82659e4b01a0c0b232951"},{"code":"(fn [start end]\n  (loop [cur start acc []]\n    (if (= cur end)\n      acc\n      (recur (inc cur) (conj acc cur)))))","problem":34,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn [a b]\n  (take-while (partial not= b) (iterate inc a)))","problem":34,"user":"4eb3fcba535d7eef30807359"},{"problem":34,"code":"#(reduce (fn [acc x] (if (= acc []) [x] (conj acc (+ (last acc) 1)))) [] (repeat (- %2 %1) %1))","user":"5a3c5c54e4b001c08efc0ce3"},{"code":"(fn bafrange [min max]\n  (if (= min max) '()\n    (conj (bafrange (inc min) max) min)\n  )\n)","problem":34,"user":"5127ca90e4b03a34742b42ff"},{"code":"(fn [f t]\n  (loop [cu f c []]\n    (if (< cu t)\n      (recur (inc cu) (conj c cu))\n      c)))","problem":34,"user":"4e6dc5f5535d5021c1a895f0"},{"code":"#(take (- %2 %1) (iterate (fn [n] (+ 1 n)) %1))","problem":34,"user":"4fe9231ce4b0547ebccb2445"},{"problem":34,"code":"(fn[lowerLimit upperLimit] (take-while (partial > upperLimit) (iterate inc lowerLimit)))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":34,"code":"(fn [a b]\n   (reduce (fn [acc _]\n             (conj acc (inc (peek acc))))\n           [a] (repeat (- b a 1) nil)))","user":"5ade6bafe4b0837691e92c23"},{"problem":34,"code":"(fn [arg1 arg2]\n  (loop [x arg1\n         x_list ()]\n    (if (> x (- arg2 1))\n      (reverse x_list)\n      (recur (inc x) (conj x_list x))\n      )\n    )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"code":"#(take (- %2 %) (iterate inc %))\n\n;(fn rec [s e]\n;  (if (< s e)\n;    (conj (rec (inc s) e) s)\n;    '()))","problem":34,"user":"4fcc103fe4b0ee37620e185f"},{"problem":34,"code":"(fn\n  [lower upper]\n  (take\n    (- upper lower)\n    (iterate inc lower)\n  )\n)","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":34,"code":"(fn f [s e]\n  (loop [x s l []]\n    (if (< x e)\n      (recur (inc x) (conj l x))\n      l)))","user":"5facfb48e4b08cb800c85aea"},{"problem":34,"code":"#(loop [i %1 r '()] (if (< i %2) (recur (inc i) (conj r i)) (reverse r)))","user":"511036c5e4b04c71fce993ee"},{"problem":34,"code":"(fn rng [frm to] (if (= frm to) [] (concat [frm] (rng (inc frm) to))))","user":"5f8e865fe4b0715f5002d76d"},{"problem":34,"code":"(fn myrange \n  ([start end] (myrange [] start end))\n  ([coll start end]\n    (if (< start end)\n      (myrange (conj coll start) (inc start) end)\n      coll)))","user":"54165291e4b01498b1a719fb"},{"code":"(fn [start end]\r\n  (take (- end start) (iterate inc start)))","problem":34,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"(fn [lo hi] (loop [l lo r '()]\n                            (if (= l hi)\n                              (reverse r) \n                              (recur (inc l) (conj r l)))))","problem":34,"user":"4eef1164535d305ff5cb7f19"},{"code":"(fn [start stop]\n  (loop [out [] n start]\n    (if (>= n stop)\n      out\n      (recur (conj out n) (inc n)))))","problem":34,"user":"4dd9d299535d2dad7130b5dd"},{"problem":34,"code":"(fn make-range [left right]\n  (if (= left right)\n    '()\n    (conj (make-range (inc left) right) left)))","user":"56339e23e4b0bfe05bf117b1"},{"problem":34,"code":"(fn [l u]\n  (loop [c l\n         r []]\n    (if (< c u)\n      (recur (inc c) (conj r c))\n      r)))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":34,"code":"(fn [a b]\n  (loop [i a result []]\n    (if (>= i b) result (recur (inc i) (conj result i)))))","user":"553e0b70e4b0a04f792994e8"},{"problem":34,"code":"(fn\n  [start stop]\n  (->> (take (- stop start) (repeat start))\n       (reduce (fn [acc x] (conj acc (+ x (count acc)))) nil)\n       reverse))","user":"562fb774e4b0ab312c17ebd9"},{"problem":34,"code":"(fn print-range\n  [start end]\n  (take (- end start) (iterate inc start)))","user":"5d42c88ae4b05dd059a5437e"},{"problem":34,"code":"(fn my-range [start end]\n        (if (>= start end)\n          '()\n          (lazy-seq (cons start (my-range (inc start) end)))\n        )\n        )","user":"57ca95f2e4b05aa3c4741d3b"},{"problem":34,"code":"(fn new-range [start end] (let [v []]  \n                              ((fn accumulate [k,start,end] (if (= (+ start 1) end) \n                                                              (conj k start) \n                                                              (accumulate (conj k start) (+ start 1) end))) v start end)))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":34,"code":"(fn [start end] (take-while #(< % end) (iterate (partial + 1) start)))","user":"57155980e4b07c98581c3ad7"},{"code":"(fn [start end]\n  (reverse\n  \t(loop [acc '() n start]\n    \t(if (= n end) acc (recur (cons n acc) (inc n))))))","problem":34,"user":"52199105e4b0c4ef0be82ff9"},{"code":"(fn\n  [begin end]\n  (loop [x begin, y end, coll '()]\n    (if (>= x y)\n      (reverse coll)\n      (recur (+ 1 x) y (cons x coll)))))","problem":34,"user":"512c0f84e4b03a42b6300232"},{"code":"(fn [mn mx] (take-while #(> mx %) (iterate inc mn)))","problem":34,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn my-range [x n]\n   (take (- n x) (iterate inc x)))","problem":34,"user":"4fc8ce6ce4b0ee37620e183c"},{"problem":34,"code":"(fn [s e]\n    (if (< e s) '()\n      (reverse\n        (loop [res  '()\n               s    s\n               e    e]\n          (if (= s e) res\n            (recur (cons s res) (inc s) e))))))","user":"56a94562e4b07966d5a8a074"},{"code":"(fn [l,h] (take-while #(> h %) (iterate inc l)))","problem":34,"user":"4fadbb17e4b081705acca23e"},{"problem":34,"code":"#(take-while (fn [t] (< t %2)) (iterate inc %1))","user":"5282f54be4b0239c8a67ada0"},{"problem":34,"code":"(fn spotrange [start end]\n  (if (>= start end)\n    '()\n    (cons start (spotrange (inc start) end))))","user":"60882700e4b0ae75613dcedf"},{"code":"#(take (- %2 %)(iterate inc %))","problem":34,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":34,"code":"(fn [b e]\n  (loop [c b ret []]\n    (if (= c e)\n      ret\n      (recur (inc c) (conj ret c)))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":34,"code":"(fn rang\n  ([s e] (rang s e '()))\n  ([s e acc] (if (< s e)\n    (rang (+ 1 s) e (conj acc s))\n    (reverse acc))))","user":"58dd2c02e4b0a4d5acaab6b8"},{"problem":34,"code":"(fn [& x](let[a (first x) b (first(rest x))]\n                  (loop[z a y b result []]\n                  (if (= z y) (seq result)\n                     (recur z (dec y) (cons (dec y) result))))))","user":"54ecd7dde4b024c67c0cf85c"},{"problem":34,"code":"(fn r [start stop]\n  (if (>= start stop)\n    nil\n    (cons start (r (inc start) stop))))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"code":"(fn [x y]\n  (loop [current x\n         out []]\n    (if (= current y)\n      out\n      (recur (inc current) (conj out current)))))","problem":34,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn [a b]\n  (loop [i a s '[]]\n    (if (>= i b)\n      s\n      (recur (inc i) (conj s i)))))","problem":34,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn [s e] (let [n (- e s) f (fn g [m] (cons m (lazy-seq (g (inc m)))))] (take n (f s))))","problem":34,"user":"52ccc2bde4b07d0d72b27371"},{"code":"(fn fake\n  [start end]\n  (take-while #(< % end) (iterate inc start)))","problem":34,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":34,"code":"#(loop [result [] x %1 y %2]\n   (if (= x y)\n     result\n     (recur (conj result x) (inc x) y)))","user":"57908d94e4b0ebec4cfb75ac"},{"problem":34,"code":"(fn [a b] (loop [curr a v []] (if (= curr b) v (recur (inc curr) (conj v curr)))))","user":"5f3ddc71e4b004f08c61c551"},{"problem":34,"code":"(fn [x y]\n  (loop [i x\n         xs []]\n    (if (< i y)\n     (recur (inc i) (conj xs i))\n     xs)))","user":"5b62764ae4b0c6492753e725"},{"problem":34,"code":"(fn [x y] (if (<= y x) [] (loop [st x ed y acc []] (if (= st ed) acc (recur (inc st) ed (conj acc st))))))","user":"57a22c85e4b0c3d858beb8f6"},{"code":"(fn [from to]\n  (loop [i from ret []]\n    (if (= i to)\n      ret\n      (recur (inc i) (conj ret i)))))","problem":34,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":34,"code":"(fn r [a z]\n  (if (= a z)\n    []\n    (cons a (r (inc a) z))))","user":"55ed1575e4b0121d4835fdd3"},{"code":"(fn [lower upper]\n  (loop [n (dec upper) r '()]\n    (if (= n (dec lower))\n      r\n      (recur (dec n) (conj r n)))))","problem":34,"user":"4f7e29dde4b06e829148e1ca"},{"problem":34,"code":"(fn [low high]\n  (loop [r [] l low h high]\n    (if (= l h)\n      r\n    (recur (conj r l) (inc l) h))))","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":34,"code":"(fn [lo hi] (loop [ coll [ ] cntr lo  ] ( if (= cntr hi) (seq coll) (recur (conj coll cntr) (inc cntr) )        )  ) )","user":"5ddbd202e4b0948ae9d9adb4"},{"code":"(fn [first last]\n  (let [count (- last first)]\n    (take count\n          (iterate inc first))))","problem":34,"user":"51da565ae4b02ceefd947765"},{"problem":34,"code":"(fn [start, finish] \n  (loop [current-val start current-list []]\n    (if (= finish current-val)\n  \t\tcurrent-list\n      \t(recur (inc current-val) (conj current-list current-val))\n     )\n   )\n )","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":34,"code":"(fn\n  [init n]\n  (take-while #(< % n) (iterate #(+ % 1) init))\n)","user":"550b5a53e4b06e50f9beb142"},{"code":"(fn [beg end] (take (- end beg) (iterate inc beg)))","problem":34,"user":"52561be5e4b0541d1855ba08"},{"problem":34,"code":"(fn range2 [lowerBound upperBound] (take (- upperBound lowerBound) (iterate inc lowerBound)))","user":"5a99d28ee4b0d174b936c7b3"},{"problem":34,"code":"(fn myrange\n  [start end]\n  (loop [start start end end acc []]\n    (if-not (>= start end)\n      (recur (+ start 1) end (conj acc start))\n      acc)))","user":"55640c62e4b0c656e3ff17fd"},{"problem":34,"code":"(fn check [x y & [z]]\n   \n   (if (> y x)\n     (do (check x (- y 1) (conj z (- y 1))))\n     (do z)\n   )\n\n )","user":"580014d7e4b0a837a8b30c32"},{"problem":34,"code":"(fn \n  [minValue maxValue]\n  (loop [outSeq []\n         currValue minValue]\n    (if (< currValue maxValue)\n      (recur (conj outSeq currValue) (inc currValue))\n      outSeq)))","user":"5b69bf95e4b0c6492753e790"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    '()\n    (conj (my-range (inc start) end) start)))","user":"5483d59fe4b0e286459a1194"},{"code":"#(loop [s %1, e %2, l []]\n     (if (= s e) \n       l \n       (recur (inc s) e (conj l s)  )  ))","problem":34,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"(fn [x y] (loop [i x resul []] (if (< i y) (recur (inc i) (conj resul i))resul)))","problem":34,"user":"4eb8979b535dfed6da9c6d4a"},{"problem":34,"code":"#(loop [c %1 r []]\n   (if (= c %2)\n     r\n     (recur (+ 1 c) (conj r c))))","user":"58844d43e4b0f1effa3b7696"},{"problem":34,"code":"(fn[a b] (take-while #(> b %) (iterate inc a)))","user":"596e4c5be4b069c0a1a19864"},{"problem":34,"code":"#(take \n  (- %2 %1)\n  (iterate inc %1))","user":"58809253e4b0f1effa3b7618"},{"code":"(fn [begin end]\n    (let [num (- end begin)]\n      (take num (iterate inc begin))))","problem":34,"user":"5317d78ee4b08068f379ed63"},{"problem":34,"code":"#(loop [curr %1 accum []]\n   (if (>= curr %2)\n     accum\n     (recur (inc curr) (conj accum curr))\n   )\n)","user":"59073e0fe4b047aa04b19950"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start\n         stop stop\n         acc '()]\n    (if (= start stop)\n      (reverse acc)\n      (recur (inc start) stop (conj acc start)))))","user":"54638c8fe4b01be26fd746c2"},{"code":"(fn [x y]\n   (take (- y x) (iterate inc x)))","problem":34,"user":"504e2333e4b0f6ff3350c46c"},{"problem":34,"code":"(fn my-range [start end]\n  (if (> start end)\n    ;; throw exception\n    nil)\n  (loop [counter start\n         acc '()]\n    (if (= counter end)\n      (reverse acc)\n      (recur (inc counter)\n             (cons counter acc)))))","user":"54084784e4b0addc1aec66c9"},{"code":"(fn [s e]\r\n  (take (- e s) (iterate #(inc %) s)))","problem":34,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":34,"code":"(fn [from to]\n   (loop [from from\n          to   to\n          coll []]\n     (if (= from to)\n       coll\n       (recur (inc from) to (conj coll from)))))","user":"5f122f93e4b091ba50b4dbae"},{"problem":34,"code":"(fn r [b e] (if (< b e) (cons b (r (inc b) e)) '()))","user":"58cfb517e4b03c36ff7e58b9"},{"problem":34,"code":"(fn my-range [a b]\n  (when (< a b)\n    (cons a (lazy-seq (my-range (inc a) b)))))","user":"51e24905e4b01e519814642e"},{"problem":34,"code":"(fn [n x]\n  (loop[n n\n        z []]\n    (if (= n x)\n      z\n      (recur (inc n) (conj z n))\n    )\n  )\n)","user":"58224c53e4b04b46fc4b0f92"},{"problem":34,"code":"(fn [l h]\n  (let [rec\n        (fn [l h acc]\n          (if (= l h)\n            (cons l acc)\n            (recur l (dec h) (cons h acc))))]\n    (rec l (dec h) nil)))","user":"578df8fee4b0ebec4cfb7574"},{"problem":34,"code":"(fn [start end]\n  (loop [res []\n         start start]\n    (if-not (< start end)\n      res\n      (recur (conj res start) (inc start)))))","user":"541df619e4b01498b1a71a87"},{"problem":34,"code":"(fn [b e] (loop [x () c 0] (if (= c (- e b)) (sort x) (recur (conj x (+ b c)) (inc c)))))","user":"56bdda49e4b0f26550335977"},{"problem":34,"code":"(fn [x y]\n  (loop [i x\n         j y\n         rng []]\n    (if (= i j) rng (recur (inc i) j (conj rng i)))))","user":"593c1e3be4b069cdc2982b86"},{"problem":34,"code":"#(reverse (let [n %2] (loop [s %1 col '()] (if (> n s) (recur (inc s) (conj col s)) col))))","user":"55afa977e4b002ce9d5cbc15"},{"problem":34,"code":"(fn f [from to]\n  (if (= to from)\n    '()\n    (apply list from (f (+ 1 from) to))))","user":"5195fadee4b04c0af7ff3c11"},{"code":"(fn [a b]\n  (loop [res []\n         e a]\n    (cond\n     (= e b) res\n     :else (recur (conj res e) (inc e)))))","problem":34,"user":"4f230dfbe4b0d66497709fe0"},{"problem":34,"code":"(fn yee [start end]\n(cond\n  (< start end) (into [start] (yee (inc start) end))\n  :else [])\n)","user":"5da71a00e4b000c986472c14"},{"problem":34,"code":"(fn [n m] \n  (take (- m n) (iterate inc n)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":34,"code":"(fn [from to]\n  (reduce \n   (fn [acc n] (conj acc (+ (last acc) n)))\n   [from] \n   (repeat (- to from 1) 1)))","user":"56f9392ae4b07572ad1a88ac"},{"problem":34,"code":"(fn\n    [from to]\n    (first\n      (reduce\n        (fn [[acc cur] h]\n          [(conj acc cur) (+ cur 1)])\n        [[] from]\n        (repeat (- to from) 0))))","user":"5984e7dee4b021a7a535fe43"},{"problem":34,"code":"(fn [start end]\n  (loop [acc () i start]\n    (if (>= i end)\n      (reverse acc)\n      (recur (cons i acc) (inc i)))))","user":"5b799354e4b047b03b203706"},{"code":"(fn [a b] (for [x (iterate inc a) :while (< x b)] x))","problem":34,"user":"5095f761e4b0ba05ca7aebfd"},{"code":"(fn r [min max]\n  (if (> (dec max) min) (conj (r (inc min) max) min)\n\t\t(list min)))","problem":34,"user":"4f566178e4b0a7574ea71820"},{"problem":34,"code":"(fn wat [x n]\n  (if (= x n)\n    ()\n    (cons x (wat (inc x) n))))","user":"54dcbc6ee4b024c67c0cf787"},{"problem":34,"code":"#(\n   take-while (partial > %2) (iterate inc %1)\n)","user":"5ac92dc3e4b0e27600da77bf"},{"problem":34,"code":"(fn [beg, end]\n  (loop [next-elt beg\n         output []]\n    (if (= next-elt end)\n      (seq output)\n      (recur (inc next-elt) (conj output next-elt)))))","user":"5739fa01e4b0cd1946bd1082"},{"code":"#(map (fn [n] (+ n (dec %1))) (reductions + (take (- %2 %1) (repeat 1))))","problem":34,"user":"524f4256e4b0541d1855b808"},{"problem":34,"code":"#(loop [rng '()\n        idx (dec %2)] \n\t(if (< idx %1) \n         rng \n         (recur (conj rng idx) (dec idx))))","user":"55ca4273e4b0e31453f649f9"},{"code":"(fn my-range [start end]\n  (if (= start end)\n    nil\n    (cons start (my-range (inc start)\n                          end))))","problem":34,"user":"52890634e4b0239c8a67ae5e"},{"problem":34,"code":"(fn [a n]\n  (take (- n a)\n        ((fn incr [a]\n            (lazy-seq (cons a (incr (inc a)))))a)))","user":"59636b43e4b066ee0a44b0c4"},{"problem":34,"code":"(fn [n m] \n  (letfn [(rng [n m ]\n               (lazy-seq (when (< n m) \n                           (cons n\n                                 (rng (inc n) m)))))]\n         (rng n m)))","user":"5519a6dde4b00ace28fe6e2f"},{"problem":34,"code":"(fn [start ende]\n  (take (- ende start) (iterate inc start)))","user":"5800ab1ee4b0a837a8b30c41"},{"code":"(fn gen [x y]\n  (if (= x y)\n    '()\n    (conj (gen (+ x 1) y) x)))","problem":34,"user":"5151a6bee4b03e678e393ad3"},{"code":"(fn range2 [s e]\n  (if (>= s e)\n    ()\n    (cons s (range2 (inc s) e))))","problem":34,"user":"50015be1e4b0678c553fc41a"},{"problem":34,"code":"(fn [s e]\n  (loop [start s, end e, acc ()]\n  (if (= start end) (reverse acc)\n    (recur (inc start) end (conj acc start)))))","user":"55916764e4b0604b3f94d57b"},{"problem":34,"code":"(fn [l r] \n  (loop [i l result []]\n    (if (= i r)\n    \tresult\n    \t(recur (inc i) (conj result i)))))","user":"577d3feee4b0c8d87281f6d2"},{"problem":34,"code":"(fn rng\n  ([x y]  (rng x y #{}))\n  ([x y acc]\n     (if (= x y)\n\t    (reverse acc)   \n\t\t(recur  (inc x) y (cons x acc)))))","user":"581a5fdbe4b0e114eb51a002"},{"problem":34,"code":"(fn rng [start end]\n  (if (= start end) ()\n  (cons start (rng (+ 1 start) end))))","user":"599d49a7e4b0871e7608b7f4"},{"problem":34,"code":"(fn [s e]\n  (take (- e s) \n        (iterate inc s)))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn [a b] (loop [x a acc []] (if (= x b) acc (recur (inc x) (conj acc x)))))","problem":34,"user":"50982cc7e4b04e098a4c726c"},{"code":"(fn r [x y]\n  (when (< x y)\n    (lazy-seq (cons x (r (inc x) y)))))","problem":34,"user":"4f50cadce4b03ad3f0c10d0f"},{"code":";(fn [start end]\n;  (loop [n start\n;         xs '()]\n;    (if (= n end)\n;      xs\n;      (recur (inc n) (concat xs (list n))))))\n\n(fn [start end] (take (- end start) (iterate inc start)))","problem":34,"user":"5312cdaae4b08068f379ed03"},{"problem":34,"code":"(fn my-range [from to]\n  (if (= (inc from) to)\n    from\n    (flatten (conj (vector from) (my-range (inc from) to)))))","user":"574e84e0e4b02ea114799243"},{"problem":34,"code":"(fn r [a b] (if (= a b) nil (conj (r (inc a) b) a)))","user":"560c31b4e4b05f002753df2d"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    nil\n\t(lazy-seq (cons start (my-range (inc start) end)))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (loop [s start\n         coll []]\n    (if (>= s end)\n      coll\n      (recur (inc s)\n             (conj coll s)))))","user":"58ef93ece4b056aecfd47dca"},{"problem":34,"code":"(fn neu-range [start finish]\n  (if (= (+ 1 start) finish)\n    (list start)\n    (conj (neu-range (inc start) finish) start)))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn my-range [start end]\n  (if (= start end) \n    '()\n    (cons start (my-range (inc start) end))))","problem":34,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn myrange [start end]\n  (when (< start end) \n    (cons start\n      (lazy-seq (myrange (inc start) end)))))","problem":34,"user":"4fb2101ce4b081705acca284"},{"code":"(fn [start stop]\n  (loop [cnt start acc ()]\n    (if (= stop cnt)\n\t\t    (reverse acc)\n        (recur (+ 1 cnt) \n\t\t\t         (conj acc cnt)))))","problem":34,"user":"50a6b5e8e4b0aa96157e262a"},{"code":"(fn [x y]\n  (loop [from x\n         to y\n         ranseq ()]\n    (if (= from to)\n      (reverse ranseq)\n        (recur (inc from) to (cons from ranseq)))))","problem":34,"user":"525d5327e4b0cb4875a45d74"},{"problem":34,"code":"#(loop [now %1 tgt %2 acc []]\n   (if (= now tgt)\n       acc\n       (recur (inc now) tgt (conj acc now))))","user":"56be8649e4b0f26550335983"},{"code":"(fn [l h]\n  (let [diff (- h l)]\n    (take diff (iterate inc l))))","problem":34,"user":"5116e176e4b0063b4e3e16d7"},{"problem":34,"code":"(fn [a b]\n  (->> a\n    (iterate inc)\n    (take (- b a))))","user":"5be5c805e4b0ed4b8aab4d18"},{"code":"(fn r [start end]\n    (if (= start end)\n        '()\n        (cons start (r (+ start 1) end))))","problem":34,"user":"4fb4099be4b081705acca2a9"},{"problem":34,"code":"(fn [s e] (loop [coll []\n                 i s]\n            (if (>= i e)\n              coll\n              (recur (conj coll i)\n                     (+ i 1)))))","user":"53ed6befe4b0d648e757f4c5"},{"code":"(fn myrange [x,y]\n  (if (< x y) \n    (conj (myrange (+ x 1) y) x)\n    (list )))","problem":34,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         coll '()]\n    (if (>= i end)\n      (reverse coll)\n      (recur (inc i) (conj coll i)))))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":34,"code":"(fn rang [x y] (if (= x y) (list) (cons x (rang (+ x 1) y))))","user":"53b12c76e4b047364c04448a"},{"code":"(fn \n  [start end]\n  (loop [i start\n         res []]\n    (if (= i end)\n      res\n      (recur (inc i) (conj res i)))))","problem":34,"user":"5234870ee4b05e80434a505c"},{"code":"(fn [a b]\n  (loop [current a coll []]\n    (if (= current b)\n      coll\n      (recur (inc current) (conj coll current)))))","problem":34,"user":"4fe8fda4e4b0547ebccb2438"},{"problem":34,"code":"(fn [start end]\n  (reverse\n    (loop [l '()\n           current start]\n      (if (>= current end)\n        l\n        (recur (conj l current) (inc current))))))","user":"550b1c2ce4b06e50f9beb13b"},{"code":"(fn ran[x, y](if (= x y) [] (cons x (ran (inc x) y) )))","problem":34,"user":"50054b5ce4b0678c553fc45f"},{"problem":34,"code":"(fn [s e]\n  (loop [n s\n         acc []]\n    (if (<= e n)\n      acc\n      (recur (inc n) (conj acc n)))))","user":"60b57acee4b0e0fa5f1b4238"},{"problem":34,"code":"(fn rng [a b]\n  (take (- b a)\n        (iterate inc a)))","user":"5454bd9be4b0e397800069db"},{"code":"(fn r [low high]\n  (if (= low high) \n    '()\n    (concat (list low) (r (inc low) high))\n  )\n)","problem":34,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":34,"code":"#(loop [curr %1\n        acc []]\n   (if (< curr %2)\n     (recur (inc curr) (conj acc curr))\n     acc))","user":"5e62c405e4b0fd0acd15869b"},{"problem":34,"code":"#(reductions + %1 (map inc (seq (make-array Integer/TYPE (- (dec %2) %1)))))","user":"5ff19fe0e4b05ac5b16ea1f4"},{"code":"(fn [sm bg] (\n    loop [i sm res []]\n        (if-not (< i bg) \n            res\n            (recur (inc i) (conj res i))\n\n))\n)","problem":34,"user":"4e78dc98535db95036265724"},{"problem":34,"code":"#(\n  let [from %1\n       until %2]\n   (loop [coll []\n          n from]\n     (if (= n until)\n       coll\n       (recur (conj coll n) (+ n 1))\n       ))\n  )","user":"570577bbe4b0b0fb43fd0672"},{"code":"#(reductions +\n             (conj (repeat (dec (- %2 %1))\n                           1)\n                   %1))","problem":34,"user":"53121863e4b08068f379ecf3"},{"problem":34,"code":"(fn rng [x y]\n  (if (= x y)\n    []\n    (concat [x] (rng (+ 1 x) y))))","user":"5bcddaeee4b0e9689409ee07"},{"code":"(fn [start end]\n  (take (- end start)\n    (iterate inc start)))","problem":34,"user":"4fc8f1fee4b0ee37620e183f"},{"problem":34,"code":"(fn imRange [a b] (reverse (loop [cur a output '()] (if (>= cur b) output (recur (+ 1 cur) (list* cur output))))))","user":"5924009ce4b072a2710fce45"},{"code":"(fn [x y]\n  (loop [x x acc '()]\n    (if (= x y)\n      (reverse acc)\n      (recur (inc x) (conj acc  x)))))","problem":34,"user":"511060fae4b04c71fce993f1"},{"problem":34,"code":"(fn myrange [start stop]\n  (cond\n    (=  stop start) nil\n    :else (cons start (myrange (inc start) stop))))","user":"534f8c9ae4b084c2834f4acd"},{"code":"(fn [a b]\n  (loop [i a, r []]\n    (if (= i b) r\n      (recur (inc i) (conj r i)))))","problem":34,"user":"53597288e4b04ce2eb3ed29c"},{"code":"(fn r [s e] (if (< s e) (cons s (r (inc s) e)) ()))","problem":34,"user":"4e8a880b535d65386fec210d"},{"code":"(fn ran2\n    [s e]\n    (loop [n s\n           result []]\n          (if (< n e)\n              (recur (inc n)\n                     (conj result n))\n              result)))","problem":34,"user":"5140b7bae4b076604f1aa55b"},{"problem":34,"code":"(fn myrange [start stop]\n  (take (- stop start) (iterate inc start)))","user":"553abb28e4b09218d5f44ffb"},{"problem":34,"code":"(fn [a b] (loop [x a out []] (if (= x b) out (recur (inc x) (concat out (list x))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start\n         acc []]\n    (if (= stop start)\n      acc\n      (recur (inc start) (conj acc start)))))","user":"539f45dce4b0ca733b974497"},{"problem":34,"code":"(fn r [n m] (if (>= n m) nil (cons n (r (+ n 1) m))))","user":"556766c1e4b0c656e3ff1840"},{"code":"(fn f [x y]\n  (if (= x y)\n    ()\n    (conj (f (+ x 1) y) x)\n  )\n)","problem":34,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [s e] (map #(+ s %) (take (- e s) (iterate inc 0))))","problem":34,"user":"4e58dd23535d8a8b8723a298"},{"code":"(fn [a b] (loop [r [] a a] (if (== a b) r (recur (conj r a) (inc a)))))","problem":34,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn [start end]\n  (take-while (partial > end) (iterate (partial + 1) start)))","problem":34,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"(fn [x y] (reverse ( #( if (= %1 %2) %3 (recur (+ 1 %1) %2 (conj %3 %1))) x y '())))","problem":34,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [lo hi]\n  (loop [lo (dec lo) hi (dec hi) acc '()]\n    (if (< lo hi)\n      (recur lo (dec hi) (cons hi acc))\n      acc\n      )\n    )\n  )","problem":34,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":34,"code":"(fn [a b]\n\t             (loop [res [a]]\n               (if (= (last res) (- b 1))\n                 res\n                 (recur (conj res (+ (last res) 1))))))","user":"569d095fe4b0542e1f8d1470"},{"problem":34,"code":"(fn test [x,y]  (take (- y x) (iterate #(inc %) x)   ) )","user":"5a075e73e4b01bb0ae8afdd9"},{"problem":34,"code":"(fn rng [x y] (lazy-seq (if (< x y) (cons x (rng (inc x) y)) nil)))","user":"4fc04d75e4b081705acca324"},{"code":"(fn [f l] \n  (loop [n f s []]\n    (if (= n l)\n      (apply list s)\n      (recur (inc n) (conj s n))\n    )))","problem":34,"user":"53069e16e4b02e8216869798"},{"problem":34,"code":"(fn [start end]\n  ((fn [res n]\n     (if (= n end)\n       (reverse res)\n       (recur (conj res n) (inc n)))) '() start))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [first last] (loop [current first result ()] (if (= current last) result (recur (inc current) (concat result (list current))))))","problem":34,"user":"53733312e4b06d7f452d9e0a"},{"problem":34,"code":"(fn [start end]\n  (loop [current start\n         result '()]\n    (if (= current end)\n      (reverse result)\n      (recur (inc current) (conj result current)))))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":34,"code":"(fn [start end]\n  (loop [i start,\n         target end,\n         new-range '()]\n    (if (< i target)\n      (recur (inc i)\n             target\n             (cons i new-range))\n      (reverse new-range))))","user":"557775a3e4b05c286339e084"},{"code":"(fn [l r]                                                           \n            (loop [i (- r 1)                                                    \n                   lst '()]                                                     \n               (if (= i (- l 1))                                                \n                   lst                                                          \n                   (recur                                                       \n                    (dec i) (cons i lst)))))","problem":34,"user":"4eed6b32535d93acb0a668bc"},{"problem":34,"code":"(fn list-range [start stop]\n  (let [rng (- stop start)]\n  (take rng (iterate inc start))))","user":"5f2ab452e4b033932238a656"},{"problem":34,"code":"(fn [min max]\n  (let [f (fn [min max result]\n    (if (not (< min max))\n      (reverse result)\n      (recur (inc min) max (conj result min))))]\n    (f min max '())))","user":"54dc9ba1e4b024c67c0cf785"},{"problem":34,"code":"(fn [start end]\n  (loop [i start e end res (list)]\n    (if (= i e)\n      (reverse res)\n      (recur (inc i) e (cons  i res)))))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":34,"code":"(fn  [start end]\n  (->(loop [i start\n         l '()]\n    (if (< i end)\n      (recur (inc i) (cons i l))\n      l))\n       reverse))","user":"55e246c2e4b050e68259b431"},{"problem":34,"code":"(fn [x y] (reverse (loop [a '()\n                     z x]\n              (if (> y z) \n                (recur (conj a z) (+ 1 z))\n                a)\n                )))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":34,"code":"(fn my-range\n  ([i f] (my-range (inc i) f [i]))\n  ([i f resp]\n   (if (>= i f)\n     resp\n     (my-range (inc i) f (conj resp i)))))","user":"574f1c24e4b02ea114799255"},{"problem":34,"code":"(fn [x y] (loop [current x res []] (if (= current y) res (recur (inc current) (conj res current)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [x y] \n  (loop [coll '() index x end y] \n    (if (= index end) coll (recur (concat coll [index]) (inc index) end))))","problem":34,"user":"4ea11921535d7eef308072af"},{"code":"(fn our-range [from til]\n  (if (= from til)\n    nil\n    (lazy-seq\n      (cons from (our-range (+ 1 from) til)))))","problem":34,"user":"50435852e4b034ff00315d22"},{"problem":34,"code":"(fn [st mx] (take-while #(< % mx) (iterate inc st)))","user":"4fa5c8dde4b081705acca1af"},{"code":"#(loop [i % j %2 r []] (if(< i j) (recur (inc i) j (conj r i)) r))","problem":34,"user":"4efb87f7535dced4c769f279"},{"code":"(fn rnge [l h]\n  (if (= l h)\n  \t'()\n   (cons l (rnge (+ 1 l) h))\n )\n  )","problem":34,"user":"51d1db6ce4b0d13b04db0d90"},{"code":"(fn rng [start end]\n  (if (not= start end)\n    (conj (rng (inc start) end) start)))","problem":34,"user":"50ed1ce7e4b01236b1d49839"},{"problem":34,"code":"(fn myrange [list beg end]\n   (if (< beg end)\n     (myrange (conj list beg) (inc beg) end)\n     list)) []","user":"5508102ee4b021ccfedb96b0"},{"problem":34,"code":"(fn [l u] \n  (for [x (iterate inc l) :while (< x u)] x))","user":"598229d6e4b021a7a535fdfb"},{"code":"(fn rng [v c]\n  (if (= v c) nil\n    (cons v (rng (inc v) c))))","problem":34,"user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn ran [s e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"523b82efe4b07becd5be21f0"},{"code":"(fn [a b]\n  (loop [s [] a a]\n    (if (= a b)\n        s\n        (recur (conj s a) (inc a)))))","problem":34,"user":"50435689e4b034ff00315d21"},{"problem":34,"code":"#(loop [i %1 coll []]\n   (if (< i %2)\n     (recur (inc i) (conj coll i))\n     coll))","user":"58dcae01e4b0a4d5acaab6a4"},{"code":"(fn my-range [begin end]\n  (take (- end begin)\n        (iterate (fn [x]\n                   (inc x))\n                 begin)))","problem":34,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":34,"code":"(fn my-range [start, end] \n  (map-indexed \n   (fn [index, value]\n     (+ value index))\n   (repeatedly (- end start) #(identity start))))","user":"5dfb267ee4b0a607a9a45cd4"},{"problem":34,"code":"(fn [s e]\n  (loop [c [], s s]\n    (if (= s e) c\n      (recur (conj c s), (inc s)))))","user":"5492164ee4b0b312c081ff3e"},{"problem":34,"code":"(fn rang [n m] (if (= n m)\n                 ()\n                 (cons n (rang (+ n 1) m))))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [x y]\n  (loop [b x r []]\n    (if (= b y)\n      r\n      (recur (+ b 1) (conj r b)))))","problem":34,"user":"52b9c62ce4b07a9af57922c3"},{"problem":34,"code":"(fn [a b]\n  (loop [r [] n a]\n    (if (<= b n)\n      r\n      (recur (conj r n) (inc n)))))","user":"58dc81d1e4b0a4d5acaab69e"},{"problem":34,"code":"(fn r[i e] \n  (when (< i e) \n    (conj (r (inc i) e) i)))","user":"561c0278e4b064ca9f4b1691"},{"problem":34,"code":"(fn __\n  ([b e] (__ b e []))\n  ([b e c] (if (= b e) c (__ (inc b) e (conj c b)))))","user":"55e206f3e4b050e68259b429"},{"problem":34,"code":";(fn [l h] (for [n (iterate inc l) :while (< n h)] n))\n(fn [l h] (take (- h l) (iterate inc l)))","user":"564b495de4b0284900eef667"},{"code":"(fn [first last] (take (- last first) (iterate inc first)))","problem":34,"user":"526bd542e4b03e8d9a4a7274"},{"problem":34,"code":"#(loop [start %1  col [] ]\n    (if (= start %2)\n      col\n      (recur (inc start) (conj col start)))\n    )","user":"5f0a4904e4b09a3f05b71805"},{"problem":34,"code":"(fn [from to] \n  (loop [result []\n         i from]\n    (if (= i to) \n      result\n      (recur (conj result i) (inc i)))\n    ))","user":"5739fb92e4b0cd1946bd1083"},{"code":"(fn [start end]\n  (loop [s start, xs []]\n    (if (< s end)\n      (recur (inc s) (conj xs s))\n      xs)))","problem":34,"user":"4e6a2e83535d8ccf87e9fea7"},{"code":"#(loop [s % r []] (if (= %2 s) r (recur (inc s) (conj r s))))","problem":34,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":34,"code":"(fn [s e] \n  (loop [i s\n         r '()]\n    (cond \n     \t(= e i)(reverse r)\n     \t:else (recur (inc i) (cons i r)))))","user":"5ef4fca7e4b07c55ae4a0546"},{"problem":34,"code":"(fn [from to]\n  (reverse\n    (loop [cur from\n           res '()]\n      (if (= cur to)\n        res\n        (recur (inc cur) (conj res cur))))))","user":"553698fae4b09218d5f44fc0"},{"problem":34,"code":"(fn myrange [start stop]\n  (let [n (atom (- start 1))]\n    (repeatedly (Math/abs (- start stop)) #(swap! n inc))))","user":"60606490e4b03746e80ebf67"},{"problem":34,"code":"(fn [& args]\n      (loop [x (first args) acc [] ]    \n        (if (= x (last args)) acc\n            (recur (+ x 1) (conj acc x)))))","user":"57c3df67e4b05aa3c4741cc5"},{"code":"(fn [s e]\r\n  (let [r (fn r [start end]\r\n  \r\n    (if (= start end) \r\n        `()\r\n        (concat [start] (r (+ 1 start) end))))]\r\n(r s e)))","problem":34,"user":"5052ab7ee4b0a561d07d8f20"},{"problem":34,"code":"#(loop [start %1 col []] (if (= start %2) col (recur (inc start) (conj col start))))","user":"55154abce4b055c2f668d4e0"},{"problem":34,"code":"#(reductions (fn [sum num] (inc sum)) %1 (repeat (- %2 %1 1) 0))\n\n;\n; Hahaha I am a dope\n;\n; #(take (- %2 %) (iterate inc %))\n;\n;","user":"594266cfe4b060784b3b790b"},{"problem":34,"code":"(fn [lower upper]\n  (loop [l lower r '()]\n    (if (= l upper)\n      (reverse r)\n      (recur (inc l) (cons l r)))))","user":"580e2941e4b0849f6811b74e"},{"code":"(fn [min max]\n  (loop [i min result '()]\n    (if (<= max i)\n      (reverse result)\n      (recur (inc i) (conj result i)))))","problem":34,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":34,"code":"(fn [x y]\n    (\n      loop [rez []\n            cnt x]\n      (if (= cnt y)\n        rez\n        (recur (conj rez cnt) (inc cnt))\n        )\n      )\n    )","user":"5d301c95e4b01671435dbcca"},{"problem":34,"code":"(fn [from to] \n  (let [element-count (- to from)]\n    (map-indexed + (vec (repeat element-count from)))))","user":"59a5b3f4e4b066c664927d69"},{"code":"(fn [x y]\r\n\r\n(loop [z []\r\n       i x]\r\n(if (<  i y)\r\n    (recur\r\n      (conj z i)\r\n    (inc i))\r\n    (seq z))))","problem":34,"user":"4ea09441535d7eef308072a7"},{"problem":34,"code":"(fn [fir las]\n  (loop [coll '() a fir b las]  \n    (if (= a b)\n      (reverse coll)\n      (recur (conj coll a) (inc a) b))))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn [a b] (loop [c a result []] (if (< c b) (recur (inc c) (conj result c)) result)))","problem":34,"user":"5256a1d4e4b0541d1855ba29"},{"problem":34,"code":"(fn [i f]\n  (loop [x i\n         result []]\n    (if (>= x f)\n      result\n      (recur (inc x) (conj result x)))))","user":"57a7f7d8e4b0a96607956218"},{"code":"(fn [start stop]\n    (loop [current start therange '()]\n          (if (= current stop)\n          therange\n          (recur\n            (+ current 1)\n            (concat therange (cons current nil))))))","problem":34,"user":"4f35e662e4b0e243712b1ec6"},{"problem":34,"code":"(fn[s e](take-while #(< % e) (iterate #(inc %) s)) )","user":"555c6344e4b0b056612e224c"},{"problem":34,"code":"#(loop [begin %1\n       end %2\n       res []]\n  (if (< begin end)\n    (recur (inc begin) end (conj res begin))\n    res))","user":"579fa28fe4b0264b925669fb"},{"problem":34,"code":"(fn [bgn end] (take (- end bgn) (iterate inc bgn)))","user":"573b664ce4b0cd1946bd10a7"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (when (< start end) \n    (conj (my-range (inc start) end) start)))","user":"5a6a32b6e4b0512ff01cda22"},{"problem":34,"code":"(fn [initial final]\n   (loop [ini initial\n          final-sequence '()]\n     (prn final-sequence)\n     (if (= ini final)\n       (reverse final-sequence)\n       (recur (inc ini) (cons ini final-sequence)))))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [m n] \n  (take (- n m) (iterate inc m)))","problem":34,"user":"4e6a3985535d8ccf87e9feb1"},{"problem":34,"code":"(fn [x y]\n  (loop [z (dec y) acc ()]\n    (if (< z x) acc\n      (recur (dec z) (cons z acc)))))","user":"5a03652ae4b01bb0ae8afd83"},{"problem":34,"code":"(fn [x y] (loop [acc [x] n x]\n                    (let [n (inc n)]\n                      (if (= n y)\n                        acc\n                        (recur (conj acc n) n)))))","user":"53fc63dce4b0de5c4184859f"},{"code":"(fn [start end]\n  (take (- end start) (iterate inc start)\n        )\n\n  )","problem":34,"user":"4edf95a8535d10e5ff6f5342"},{"problem":34,"code":"(fn [from to]\n  (loop [result ()\n         i from]\n    (if (= i to)\n      result\n      (recur (concat result (list i)) (inc i)))))","user":"554f817ce4b00713264bd9a2"},{"problem":34,"code":"(fn [start end]\n  (loop [xs () my-start start]\n    (if (< my-start end)\n          (recur (conj xs my-start) (inc my-start))\n          (reverse xs))))","user":"540d7dd1e4b0addc1aec6713"},{"code":"(fn [l u] (take (- u l) (iterate #(+ 1 %) l)))","problem":34,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":34,"code":"(fn [b e] (loop [c b a '()] (if (not (< c e)) a (recur (inc c) (concat a [c])))))","user":"55e6809ee4b050e68259b48a"},{"code":"(fn it\n  [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"501b1a8ee4b0b12d9c5f4d81"},{"code":"(fn [start end]\n  (loop [index start result []]\n    (if (>= index end)\n      result\n      (recur (inc index) (conj result index)))))","problem":34,"user":"521b481de4b0c4ef0be83037"},{"problem":34,"code":"(fn [a b]            ; (fn [a b] ((fn [a b acc]\n  (take-while        ;              (if (>= b a) (recur a (- b 1) (conj acc b)) acc)) \n    #(< % b)         ;           a (- b 1) '()))\n    (iterate inc a)))","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":34,"code":"(fn [start end]\n    (loop [i start v (vec nil)]\n        (if (< i end) \n                (recur (inc i) (conj v i))\n            v)))","user":"54fdaeace4b07d26eda61d39"},{"code":"(fn [a b] \n      (let [x (fn [a b l] \n                   (if (= a b) l (recur (+ a 1) b (conj l a))))]\n        (x a b [])))","problem":34,"user":"4f62b29ce4b0defedf855fd9"},{"problem":34,"code":"(fn [mi ma]\n  (loop [nums '()\n         min mi\n         max (- ma 1)]\n    (if (> min max)\n      nums\n      (recur (cons max nums) min (- max 1)))))","user":"5235493ee4b05e80434a5064"},{"code":"(fn range2 [a b] \n  (if (= a b) \n    nil\n    (concat [a] \n            (range2 (+ a 1) b)) \n  )\n  \n)","problem":34,"user":"501c2dfce4b0539218e73b39"},{"problem":34,"code":"(fn ranger [start end] \n  (last (take (- end start) \n        (iterate \n         (fn [list] (cons (- (first list) 1) list)) \n         [(- end 1)]))))","user":"53c99f60e4b00fb29b2212c1"},{"code":"(fn rng \n  ([start end]\n    (rng start (dec end) '()))\n  ([start end acc]\n    (if (= start end)\n      (conj acc end)\n      (recur start (dec end) (conj acc end)))))","problem":34,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (cons start (my-range (inc start) end))))","user":"577f635be4b0d36ec5835e64"},{"code":"(fn r [min max &[res]]\n  (if (= min max) res\n    (cons min (r (+ 1 min) max (or res '())))))","problem":34,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [x y]\n  (take-while #(< %1 y) (iterate inc x)))","problem":34,"user":"4dd29ede535dae65d5c462da"},{"problem":34,"code":"(fn [x y]\n  (loop [start x end y col []]\n    (if (= start end)\n      col\n      (recur (inc start) end (conj col start)))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":34,"code":"(fn [start end]\n  (take\n   (- end start)\n   (iterate inc start)))","user":"5dd45bb8e4b0948ae9d9ad6b"},{"problem":34,"code":"(fn m [f t] (flatten (if (= f t) nil [f (m (+ f 1) t)])))","user":"4f598c87e4b0030a34fb2ada"},{"problem":34,"code":"(fn [min max]\n   (take (- max min) (iterate #'inc min)))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [start end] (seq (loop [a start o []] (if (= a end) o (recur (inc a) (conj o a))))))","problem":34,"user":"508a2c2fe4b016a2107004a1"},{"problem":34,"code":"(fn [x y]\n  ((fn l [a b ys] \n    (if (= a b) \n      ys \n      (l a (- b 1) (cons (- b 1) ys))\n    )\n ) x y '())\n )","user":"5c3de434e4b0d62ef62d9fb8"},{"problem":34,"code":"(fn rng [lo hi] (if (= lo hi) '() (cons lo (rng (+ lo 1) hi))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"(fn [start stop]\n  (loop [i start\n         nums []]\n    (if (= i stop)\n      nums\n      (recur (inc i) (conj nums i)))))","problem":34,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":34,"code":"(fn [i x] (seq (reduce #(conj %1 (+ (count %1) %2)) [] (repeat (- x i) i))))","user":"5b66faa7e4b0c6492753e75a"},{"problem":34,"code":"(fn [from to]\n  (loop [a from b to result []]\n    (if (= a b)\n      result\n      (recur (inc a) b (conj result a) ))))","user":"57b55290e4b0fbc9809a27a9"},{"code":"(fn my-range [start end]\n  (cond\n   (= start end) '()\n   :else (cons start (my-range (inc start) end))))","problem":34,"user":"5170643ee4b004f79986ad89"},{"problem":34,"code":"(fn [a b] (map-indexed \n  (fn [x _] (+ x a))\n  (repeat (- b a ) a)))","user":"5dde0b71e4b0948ae9d9add0"},{"code":"(fn myRange [start, end]\n   (if\n     (= start end)\n     ()\n     (cons\n      start\n      (myRange\n       (+ start 1)\n       end))))","problem":34,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":34,"code":"(fn [from to] (take (- to from) (map-indexed (fn [idx it] (+ from idx)) (repeat 0))))","user":"5901158de4b0438e51c2d039"},{"code":"(fn [start end]\n  (loop [s start c []]\n    (if (= end s) c (recur (inc s) (conj c s)))))","problem":34,"user":"4e6e7018535d5021c1a8960b"},{"problem":34,"code":"(fn [include, exclude] \n  (loop [s include, result []]\n    (if (= s exclude)\n      result\n      (recur (inc s) (conj result s)))))","user":"5a7ff79ce4b00b71e582a046"},{"code":"(fn [x y] (take (int (- y x)) (iterate inc (int x))))","problem":34,"user":"4eff81ca535dcb61093f6a2d"},{"problem":34,"code":"(letfn [(rng [start end]\n          (if (= start end)\n            ()\n            (cons start (rng (+ start 1) end))))]\n  rng)","user":"573d27b4e4b05c31a32c080f"},{"code":"(fn [s* e*] (reverse (loop [s s* l '()] (if (= s e*) l (recur (inc s) (conj l s))))))","problem":34,"user":"50e0d5a3e4b061dbdced723d"},{"problem":34,"code":"#(loop [start %1 stop %2 rng []]\n   (if (>= start stop)\n     rng\n     (recur (inc start) stop (conj rng start))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":34,"code":"(fn my-range [min max]\n   (loop [i min res []]\n      (if (< i max)\n         (recur (inc i) (conj res i))\n         res)))","user":"5e595637e4b027a2e10ac10e"},{"code":"#(loop [res []\n        curr %1\n        end %2]\n        (if (= curr end)\n            res\n            (recur (conj res curr) (inc curr) end)))","problem":34,"user":"4e3bccb1535deb9a81d77f55"},{"problem":34,"code":"(fn\n  [i n]\n  (loop [i i\n         r ()]\n    (if (= n i)\n      (reverse r)\n      (recur (inc i) (cons i r)))))","user":"5a99b81be4b0d174b936c7a9"},{"code":"(fn myrange ([pmin pmax] (myrange pmin pmax '())) \n    ([pmin pmax l] \n      (if (= pmin pmax) \n          l \n          (conj (myrange (+ 1 pmin) pmax l) pmin))))","problem":34,"user":"4f03bd9d535dcb61093f6b5b"},{"problem":34,"code":"(fn [start, end]\n  (loop [i start, acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc)))","user":"56e02c1ce4b0ca2494a09602"},{"problem":34,"code":"#((fn r [a c]\n  (if (== a %2)\n    c\n    (r (inc a) (conj c a)))) %1 [])","user":"52281e1ee4b0186687e23a69"},{"problem":34,"code":"(fn my-range [low high]\n  (lazy-seq\n    (if (>= low high) () (cons low (my-range (inc low) high)))))","user":"5b8d01d7e4b0c0b3ffbd49ca"},{"problem":34,"code":"(fn [start stop] (loop [x start acc []] (if (= x stop) acc (recur (inc x) (conj acc x)))))","user":"5ea970d1e4b00a66d4a951c6"},{"problem":34,"code":"(fn [front back]\n  (loop [lst () fro front ba back]\n    (if (= fro ba) (reverse lst)\n      (recur (conj lst fro) (inc fro) ba))))","user":"563130e4e4b0bfe05bf1178d"},{"problem":34,"code":"(fn my-range [a b] (when (< a b) (cons a (lazy-seq (my-range (inc a) b)))))","user":"575b3e9be4b02ea11479935b"},{"problem":34,"code":"(fn rg [s e]\n  (take (- e s) (iterate inc s))\n )","user":"5475d755e4b0c51c1f4d72a0"},{"code":"(fn [left right]\n  (loop [result [], current left, final right]\n    (if (= current final)\n      result\n      (recur (conj result current) (+ current 1) final))))","problem":34,"user":"502940a9e4b061fd216be4b8"},{"problem":34,"code":"(fn rec [start end]\n  (if (= start end)\n    '()\n    (conj (rec (inc start) end) start)))","user":"5d64013ce4b0c9e5857d502d"},{"problem":34,"code":"#(reverse (loop [x %1, result '()] (let [i (conj result x)] (if-not (< x %2) result (recur (inc x) i)))))","user":"57b45257e4b0fbc9809a2796"},{"problem":34,"code":"(fn ran [a b] (if (= a (dec b)) (list a) (concat (list a) (ran (inc a) b))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"#(loop [rlt '(), idx %1] \n   (if (= idx %2)\n     (sort rlt)\n     (recur (conj rlt idx) (inc idx)))\n   )","problem":34,"user":"4fa7de4ce4b081705acca1c9"},{"code":"(fn f [x y]\n  (when-not (= x y)\n    (cons x (f (+ x 1) y))))","problem":34,"user":"51256b40e4b05d10e3e395f8"},{"code":"#(loop [rng '() idx %1 end %2] \n  (if (= idx end)\n    (reverse rng)\n    (recur (conj rng idx) (inc idx) end)\n  )  \n )","problem":34,"user":"4ddc56e1535d02782fcbea04"},{"code":"(fn [start end]\n  (map-indexed + (repeat (- end start) start)))","problem":34,"user":"50630247e4b05ac47bc68d6b"},{"problem":34,"code":"(fn ranger\n  ([s e] (ranger s e []))\n  ([s e acc] \n   (if (not (< s e))\n     acc\n     (recur (inc s) e (conj acc s)))))","user":"5c987160e4b048ec896c5a82"},{"problem":34,"code":"(fn [f l]  \n  (loop [x f\n         result []]\n    (if (= x l) \n      result \n      (recur (inc x) (conj result x)))))","user":"577e42dee4b0c8d87281f6e4"},{"problem":34,"code":"(fn [a b] (take (- b a) ((fn nums [n] (cons n (lazy-seq (nums (inc n))))) a)))","user":"562b1a7be4b058fa18c5a6cb"},{"problem":34,"code":"(fn ran [s f]\n  (if (= s f)\n    '()\n    (cons s (ran (+ 1 s) f))))","user":"55a35ef4e4b0acc240e31535"},{"problem":34,"code":"(fn my-range [l u] (if (< l u) (cons l (my-range (+ l 1) u)) ()))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn rn [x y]\n  (if (== x y)\n    '()\n     (cons x (rn (+ x 1) y))\n  )\n)","problem":34,"user":"50edcc53e4b06330c1f87c49"},{"problem":34,"code":"(fn [s e] (loop [v s\n                            res []]\n                       (if (= v e)\n                         res\n                         (recur (inc v)\n                                (conj res v)))))","user":"52c2e900e4b07a9af5792384"},{"problem":34,"code":"(fn rng\n  [x y]\n  (if (= x y) '()\n    (cons x (rng (inc x) y))))","user":"5b679bf9e4b0c6492753e769"},{"problem":34,"code":"(fn [begin end]\n  (loop [begin begin acc []]\n    (if (= begin end) (reverse acc)\n      (recur (inc begin) (cons begin acc)))))","user":"5409f8eae4b0addc1aec66e6"},{"problem":34,"code":"(fn myrange [start end] \n       (if (< start end)\n         (conj (myrange (inc start) end) start)\n         nil))","user":"560d24a2e4b05f002753df34"},{"problem":34,"code":"(fn my-seq [ x y ] (if (< x y) (conj (my-seq (inc x) y) x) '()))","user":"56ff7ffee4b08d47c97781be"},{"problem":34,"code":"(fn b [min max]\n  (let [r (+ (Math/abs min) (Math/abs max))]\n    (->> (repeat r min)\n         (map-indexed +)\n         (filter #(< % max)))))","user":"5e486cb0e4b043cd24807a3e"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (lazy-seq\n           (when (< a b)\n             (cons a (my-range (inc a) b)))))","user":"583166c1e4b051871117c025"},{"problem":34,"code":"(fn [start finish] (take-while #(< % finish) (iterate (partial + 1) start)))","user":"5a5be1ece4b0512ff01cd90f"},{"problem":34,"code":"(fn [l h]\n  (loop [l l xs []]\n    (if (>= l h)\n      (seq xs)\n      (recur (inc l) (conj xs l)))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn [x y]\n         (loop [s x\n               e y\n               result '()]\n               (if (> e s)\n                 (recur (inc s) e (conj result s))\n                 (reverse result))))","problem":34,"user":"4e7e241a535db169f9c79705"},{"problem":34,"code":"(fn [from to] (\n                 loop [x (dec to) res ()]\n                 (if (>= x from)\n                   (recur (dec x) (conj res x))\n                   res)))","user":"56e93576e4b04a395b9a03f6"},{"problem":34,"code":"(fn [begin end]\n  (loop [v begin, ac []]\n    (if (< v (dec end))\n    (recur (inc v) (conj ac v))\n    (seq (conj ac v)))))","user":"537e4432e4b06839e8705e9f"},{"problem":34,"code":"#(loop [seql [%1] ]\n   (if (>= (inc (last seql)) %2)\n     seql\n     (recur (conj seql (inc (last seql)))))\n   )","user":"5c0a87e6e4b0bdcf453d1707"},{"code":"#(loop [x %\n        r []]\n   (if (= x %2) r (recur (inc x) (conj r x))))","problem":34,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn [start, end]\n  (loop [idx start\n         result []]\n    (if (= end idx)\n      result\n      (recur (inc idx) (conj result idx)))))","problem":34,"user":"52d9aaa1e4b09f7907dd13ae"},{"code":"(fn rnge [x y] (if (= x y) '() (cons x (rnge (inc x) y))))","problem":34,"user":"4e4b911f535dc968683fc4d6"},{"problem":34,"code":"(fn [s e]\n  (loop [a s\n         r []]\n    (if (= a e)\n      r\n      (recur (inc a) (conj r a)))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn nrange \n  [ini fin]\n  (loop [counter ini result []]\n    (if (= counter fin)\n      result\n      (recur (inc counter) (conj result counter)))))","problem":34,"user":"5046f909e4b03b02161376b5"},{"code":"(fn [a b]\n  (loop [x a res []]\n    (if (< x b)\n      (recur (inc x) (concat res [x]))\n      res\n    )\n  )\n)","problem":34,"user":"51c9a705e4b09ce160bef5ab"},{"code":"#(loop [s %1 e %2 result []]\n  (if (= s e)\n    result\n    (recur (inc s) e (conj result s))\n))","problem":34,"user":"5070e31ee4b0e3170b5a8678"},{"code":"(fn [start end]\n  (loop [a start b end acc '()]\n    (if (>= a b)\n      (reverse acc)\n      (recur (inc a) b (cons a acc)))))","problem":34,"user":"4f038499535dcb61093f6b09"},{"problem":34,"code":"#(take  (- %2 %1)  (iterate inc %1))","user":"552800d7e4b0ffed3738f93a"},{"problem":34,"code":"#(loop [start %1 coll []]\n  (if (= start %2)\n    coll\n    (recur (inc start) (conj coll start))))","user":"565fe49ee4b068f2fe63dc46"},{"problem":34,"code":"(fn [start end] \n  (loop [num start \n         results []]\n    (if (= num end)\n      results\n      (recur  (inc num) (conj results num)))))","user":"56499a5de4b0284900eef644"},{"code":"#(take-while (fn [v] (< v %2)) (iterate inc %1))","problem":34,"user":"53908e6be4b0b51d73faae9a"},{"problem":34,"code":"#(loop [n %1 r []] (if (>= n %2) r (recur (+ 1 n) (conj r n))))","user":"571aad45e4b07c98581c3b59"},{"problem":34,"code":"(fn [f l]\n  (take (- l f)\n    (iterate inc f)))","user":"5db19599e4b010eb3c36cd05"},{"problem":34,"code":"(fn range*\n  ([n] (range* 0 n 1))\n  ([low high] (range* low high 1))\n  ([low high step]\n   (lazy-seq\n    (cond\n     (>= low high) ()\n     (< step 0) ()\n     :else\n       (cons low\n             (range* (+ low step) high step))))))","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn foo [low high]\n  (if (= low high)\n    '()\n    (conj (foo (+ low 1) high) low)))","problem":34,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":34,"code":"(fn[low high] \n  (take-while #(< % high)\n  \t(iterate inc low)))","user":"5a534241e4b05d388ecb6c0a"},{"code":"(fn [from to]\n  ((fn iter [s to]\n    (if (>= (last s) to)\n      s\n      (iter (conj s (+ (last s) 1)) to)))\n  [from] (- to 1)))","problem":34,"user":"4fe8e771e4b0547ebccb2431"},{"problem":34,"code":"(fn _range [n end]\n  (if (= n end)\n    ()\n    (cons n (_range (inc n) end))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":34,"code":"(fn [x y]\n   (loop [acc [x]]\n     (if (= (count acc) (- y x))\n       acc\n       (recur (conj acc (inc (last acc)))))))","user":"58447708e4b089d5ab817e4b"},{"code":"#(loop [n % s '()] (if (< n %2) (recur (inc n) (cons n s)) (reverse s)))","problem":34,"user":"511618b1e4b0d4f670fd2fdf"},{"problem":34,"code":"#(loop [i %1 result []]\n  (if (< i %2)\n    (recur (inc i) (conj result i))\n    result))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":34,"code":"(fn range-builder\n  ([from to] (range-builder from to []))\n  ([from to my-range] (if (< from to)\n    (recur (inc from) to (conj my-range from))\n    my-range)))","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"(fn range_ [start end]\n  (loop [i start acc []]\n    (if (>= i end)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"51df505be4b01188f062752a"},{"problem":34,"code":";Nicer solution\n#(take (- %2 %1) (iterate inc %1))","user":"5835bc73e4b089d5ab817ce9"},{"problem":34,"code":"(fn rg [b e] (if (< b e)\n              (cons b (rg (inc b) e))\n              '()\n             ))","user":"6087cb25e4b0ae75613dced8"},{"problem":34,"code":"(fn myrange [s e]\n  (when (< s e)\n    (cons s (myrange (inc s) e))))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(fn myrange\n  [start end]\n  (loop [start start\n         end end\n         r []]\n    (if (not (= start end))\n      (recur (+ 1 start)\n             end\n             (conj r start))\n      r)))","problem":34,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":34,"code":"#(loop [result [] start %1 end %2]\n     (if (= start end) result\n     (recur (conj result start) (inc start) end)))","user":"5582dfb6e4b05c286339e10d"},{"code":"(fn [s e]\n\t((fn  [l s e]\n\t\t(if (= s (- e 1))\n\t\t\t(conj l s)\n\t\t\t(recur (conj l (- e 1)) s (- e 1)) \n\t\t)\n\t)\n\t() s e) \n)","problem":34,"user":"4e6cf2be535de274dd8d818a"},{"problem":34,"code":"#(loop [counter %\n       coll '()]\n  (if (= counter %2)\n    (reverse coll)\n    (recur (inc counter)\n           (conj coll counter)\n           )))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":34,"code":"(fn foo [x y] (take (- y x) (iterate inc x)))","user":"5f3388ade4b0574c87022c38"},{"problem":34,"code":"(fn [start end] \n  (reverse (loop [x start y end r '()]\n    (if (>= x y)\n      r\n      (recur (inc x) y (conj r x))\n      )\n    )\n           )\n  )","user":"55ce2b6de4b0e31453f64a26"},{"code":"(fn rng [from below]\n  (loop [n from, acc nil]\n    (if (= n below) \n      (reverse acc)\n      (recur (inc n) (cons n acc)))))","problem":34,"user":"504f57c7e4b0a02f9cffde71"},{"problem":34,"code":"(fn [start end]\n  (loop [x start acc '()]\n    (if (= x end) (reverse acc) (recur (inc x) (conj acc x))))\n  )","user":"5471f2fbe4b094393f72dd70"},{"problem":34,"code":"(fn [start end]\n  (loop [start start end end res '()]\n    (if (> end start)\n      (recur start (dec end) (conj res (dec end)))\n      res)))","user":"5600591de4b04bb52996e166"},{"code":"(fn [a b]\n  (loop [i a\n         r []]\n    (if (< i b)\n      (recur (inc i)\n             (conj r i))\n      r)))","problem":34,"user":"527818f7e4b03e8d9a4a7519"},{"code":"(fn rng [start stop]\n  (take-while #(< % stop) (iterate inc start)))","problem":34,"user":"4e584256535d8a8b8723a28e"},{"code":"(fn foo [x y] (if (= x y) '() (cons x (foo (+ x 1) y))))","problem":34,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":34,"code":"(fn temp\n  [f l]\n  (if (= f l) nil (cons f (temp (inc f) l))))","user":"5e88a676e4b0cb016954630a"},{"problem":34,"code":"(fn [s e] (loop [v [s]] (if (= e (+ (last v) 1)) v (recur (conj v (+ (last v) 1))))))","user":"5ae9b23fe4b0cc2b61a3bbd8"},{"problem":34,"code":"(fn range* [s e]\n  (take-while #(< % e) (iterate inc s))\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         nextnum start]\n    (if (= nextnum end)\n      result\n      (recur (conj result nextnum) (+ nextnum 1)))))","user":"60726211e4b069485764de36"},{"problem":34,"code":"(fn d[a b] (if(= a b) [] (cons a (d (inc a) b))))","user":"59e8bb43e4b0249b72820735"},{"code":"#(loop [a %1 acc ()] (if (< a %2) (recur (+ a 1) (conj acc a)) (reverse acc)))","problem":34,"user":"515828b8e4b0a069fd272c71"},{"code":"(fn [a b] (loop [a a b b s '()]                         \n            (if (= a b) s                         \n              (recur a (dec b) (conj s (dec b))))))","problem":34,"user":"4f592f83e4b0030a34fb2ad2"},{"code":"(fn [from to]\n  (loop [i (dec to) lst '()]\n    (if (< i from) lst\n      (recur (dec i) (conj lst i)))))","problem":34,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [b e]\n    (loop [i b l (list)]\n    (if (= i e)\n\t      l\n\t    (recur (inc i) (concat l [i])))))","problem":34,"user":"4e7d2448535db169f9c796c8"},{"problem":34,"code":"#(loop [r [] c %1]\n   (if (>= c %2 )\n     r\n     (recur (conj r c) (inc c))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":34,"code":"#(loop [x %1, results []]\n  (if (< x %2)\n    (recur (inc x) (conj results x))\n    results))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":34,"code":"(fn [a b] (take-while #(not= b %) (iterate inc a)))","user":"4f2858ece4b0d6649770a016"},{"problem":34,"code":"(fn my-range [s e] (take (- e s) (iterate inc s)))","user":"554a270fe4b0a04f79299570"},{"code":"#(take-while (partial > %2 ) (iterate inc %1))","problem":34,"user":"4ed00953535d44c135fd68c2"},{"code":"(fn [i j]\n  (loop [j (- j 1) l '()]\n    (if (> i j)\n      l\n      (recur (- j 1) (conj l j)))))","problem":34,"user":"53527ce8e4b084c2834f4af1"},{"code":"#((fn myrange [x y z xs] (if (< x y)(recur (+ x z) y z (cons x xs)) (reverse xs))) % %2 1 '())","problem":34,"user":"4ffb61a1e4b0678c553fc3d1"},{"problem":34,"code":"(fn rng[s e] \n  (loop [location s\n         end e\n         dir (if (> e s) 1 -1)\n         list []]\n  (if (= location end)\n    list\n    (do \n      (recur (+ dir location) e dir (conj list location))\n))))","user":"4fc57c4ce4b0ee37620e17f6"},{"problem":34,"code":"(fn [begin end]\n  (if (> begin end)\n    nil\n    (loop [in begin result '()]\n      (if (= in end)\n        (reverse result)\n        (recur (inc in) (conj result in))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":34,"code":"(fn [beg end]\n  (take (- end beg) (iterate inc beg)))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn [x y]\n  (loop [x1 x y1 y li []]\n    (if (= y1 x1)\n      (seq li)\n      (recur (inc x1) y1 (conj li x1))))\n  )","problem":34,"user":"52c1566fe4b07a9af5792364"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [f [] n start]\n    (if (< n end) \n        (recur (conj f n) (inc n))\n      f)))","user":"561bb8dbe4b064ca9f4b1686"},{"problem":34,"code":"#(loop [a %1  result []]\n   (if (>= a %2)\n     result\n     (recur (inc a) (conj result a))))","user":"546f81e3e4b00cfc9eacc1ae"},{"problem":34,"code":"(fn [beg end]\n  (loop [curr beg\n         end end\n         acc []]\n    (if (= curr end)\n      acc\n      (recur (inc curr) end (conj acc curr)))))","user":"4feded14e4b0d2a5fc2962ec"},{"problem":34,"code":"(fn [f l]\n   (let [n (- l f)]\n     (take n (iterate inc f))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn [a b]\r\n  (let [r (- b a)]\r\n    (reductions +\r\n      (cons a (replicate (dec r) 1)))))","problem":34,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn [m n]\n  (loop [x m out []]\n    (if (>= x n)\n      out\n      (recur (inc x) (conj out x)))))","problem":34,"user":"534efe66e4b084c2834f4ac1"},{"problem":34,"code":"#(loop\n    [num %1 acc []]\n    (if (< num %2)\n      (recur (inc num) (conj acc num))\n      (seq acc)))","user":"5e67ab18e4b0e171e103368a"},{"problem":34,"code":"(fn [min max]\n        (loop [l '() m min]\n            (if (< m max)\n                (recur\n                    (conj l m)\n                    (inc m))\n                (reverse l))))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":34,"code":"(fn [inital final] \n  (loop [x inital final-seq []] \n    (if (< x final)\n      (recur (inc x) (conj final-seq x))\n      final-seq)))","user":"57eb2576e4b0bfb2137f5b5c"},{"problem":34,"code":"(fn rng [b t]\n  (if (>= b t) (list)\n               (concat (list b) (rng (inc b) t))))","user":"56fa2905e4b07572ad1a88be"},{"problem":34,"code":"(fn [s e] (loop [x s res []] (if (= x e) res (recur (inc x) (conj res x)))\n           \n           ))","user":"5cf4094be4b0aaa82f112a35"},{"code":"(fn my-range [start end]\n  (if (= start end)\n    '()\n    (cons start (my-range (inc start) end))))","problem":34,"user":"5347870be4b084c2834f4a4b"},{"code":"#(map-indexed + (repeat (- %2 %) %))","problem":34,"user":"519b7d76e4b02a926d9a436e"},{"problem":34,"code":"(fn [l r]\n  (loop [i l ret []]\n    (if (< i r)\n      (recur (inc i) (conj ret i))\n      ret)))","user":"55058a4fe4b086ebe8a79c89"},{"problem":34,"code":"(fn rang[a b]\n  (take (- b a) (iterate inc a)))","user":"5c891afde4b048ec896c5935"},{"problem":34,"code":"(fn my-range [x y]\n  (if (= x y)\n    '()\n    (cons x \n          (my-range (inc x) y))))","user":"5e471203e4b043cd24807a2a"},{"problem":34,"code":"(fn [start stop]\n  (loop [n start, coll '()]\n    (if\n      (< n stop)\n      (recur (inc n) (conj coll n))\n      (reverse coll)\n    )))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn sol [s e]\n  (let [rng (fn f [s e r]\n    (if (= s e) r\n    (f (+ s 1) e (concat r (list s)))))]\n  (rng s e '())))","problem":34,"user":"504ec46de4b069badc5a33c8"},{"problem":34,"code":";;(fn [a b] (take (- b a) (iterate inc a)))\n#(take (- %2 %) (iterate inc %))","user":"55150524e4b055c2f668d4d9"},{"problem":34,"code":"(fn my-range\n  [a b]\n  (if (= a b)\n    nil\n    (lazy-seq (cons a (my-range (inc a) b)))))","user":"5899c54de4b00487982d52fa"},{"problem":34,"code":"#(loop\n\t[i %1 seq '()]\n   \t(if (< i %2)\n      (recur (inc i) (conj seq i))\n      (reverse seq)))","user":"594be2cae4b07ddc2dafae48"},{"problem":34,"code":"#(loop [i %\n         r []]\n    (if (< i %2)\n    (recur (inc i) (conj r i))\n    (seq r)))","user":"58c04ca5e4b021aa9917ece6"},{"code":"(fn my-range [step limit]\n  (cond\n    (= limit step) '()\n    :else (cons step (my-range (+ step 1) limit))))","problem":34,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":34,"code":"(fn [x y]\n  (loop [a []\n         c x ]\n    (if (< c y)\n        (recur (conj a c) (inc c))\n        a)))","user":"548fa2dfe4b0e286459a1240"},{"code":"(fn [low high & result]\n  (if (>= low high)\n    (reverse result)\n    (recur (inc low) high (conj result low))))","problem":34,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":34,"code":"(fn [min max]\n  (loop [i min out-vec []]\n    (if (= i max)\n      out-vec\n      (recur (inc i) (conj out-vec i)))))","user":"5f15a50fe4b091ba50b4dbbc"},{"code":"#(list* %1 (take (- %2 %1 1) (iterate inc (inc %1))))","problem":34,"user":"4faa7185e4b081705acca1f3"},{"code":"(fn ra\n   ([x y]\n      (if (= x y)\n          '()\n        (cons x (ra (inc x) y)))\n   )\n)","problem":34,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":34,"code":"(fn [start end] (reverse (loop [i start res '()] (if (>= i end) res (recur (inc i) (cons i res))))))","user":"5530baa5e4b076ab5578f81a"},{"code":"(fn [start end] \n  (loop [acc []\n         curr start] \n         (if (= curr end)\n            acc\n            (recur (conj acc curr) (inc curr)))))","problem":34,"user":"4f0f36a7535d0136e6c22336"},{"problem":34,"code":"#(loop [r [] i %1]\n  (if (= i %2)\n    r\n    (recur (conj r i) (inc i))))","user":"5b774e66e4b047b03b2036ec"},{"problem":34,"code":"(fn [x y]\n   (loop [from x coll []]\n     (if (< from y)\n       (recur (inc from) (conj coll from))\n       coll\n       )\n     )\n   )","user":"55c3149de4b0e31453f64987"},{"code":"#(take (- %2 %1)  ((fn se [x](cons x (lazy-seq (se (inc x))) ))%1 ))","problem":34,"user":"5300aa1de4b0d8b024fd3710"},{"problem":34,"code":"(fn my-range [from to] (if (= (inc from) to) [from] (cons from (my-range (inc from) to))))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"#(for [i (iterate inc %) :while (< i %2)] i)","problem":34,"user":"4db3393e535df7e46ed9b6cc"},{"problem":34,"code":"(fn [start, end]\n\t(loop [istart start result []]\n\t\t(if (= istart end)\n\t\t\tresult\n\t\t\t(recur (inc istart) (conj result istart)))))","user":"57644395e4b0994c1922fbf2"},{"problem":34,"code":"(fn pb34\n  [a b]\n  (if (= a b)\n    '()\n    (conj (pb34 (inc a) b) a)))","user":"608135c8e4b0736b099e42d1"},{"code":"(fn [start finish]\n  (take (- finish start) (iterate inc start))\n  )","problem":34,"user":"5204f2b1e4b0bf4f1882c7f5"},{"problem":34,"code":"(fn my-range [s e]\n\t(if (= e s) \n\t\t'()\n\t\t(concat (list s)  (my-range (inc s) e))\n\t)\n)","user":"57a9db97e4b0b8559636fc5b"},{"problem":34,"code":"(fn [a b]\n  (loop [a a b b acc []]\n    (if (= a b)\n      acc\n      (recur (inc a) b (conj acc a)))))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [x, y] (loop [n x result []]\n  (if (= n y)\n    result\n    (recur (inc n) (concat result [n])))))","problem":34,"user":"4eb59464535d7eef30807369"},{"code":"(fn meu-range [inicio fim]\n  (if (= inicio fim)\n    nil\n    (cons inicio (meu-range (inc inicio) fim))))","problem":34,"user":"52c8758be4b0c2d177d62135"},{"problem":34,"code":"#(loop [cur %1 acc []]\n   (if (>= cur %2)\n     acc\n     (recur (inc cur) (conj acc cur))))","user":"4f037faf535dcb61093f6af8"},{"problem":34,"code":"#(loop [curr %1\n        end %2\n        ret '()]\n   (if (= curr end)\n     (reverse ret)\n     (recur (inc curr)\n            end\n            (conj ret curr))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn range* [beg end]\n  (if (< beg end)\n    (cons beg (range* (inc beg) end))))","problem":34,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":34,"code":"(fn [n t]\n  (loop [n n\n       \t t t\n         r []]\n  (if (< n t)\n    (recur (inc n) t (conj r n))\n    r)))","user":"5e3d183fe4b01d43a70e8e11"},{"code":"#(take (- %2 %1) (iterate inc %1))","problem":34,"user":"4dd6fa35535d2dad7130b5cd"},{"code":"(fn [from to]\r\n  (take (- to from) (iterate inc from)))","problem":34,"user":"4f32ef71e4b0d6649770a098"},{"problem":34,"code":"(fn mrange [s e]\r\n  (loop [i s\r\n         res []]\r\n    (if (= i e)\r\n      res\r\n      (recur (inc i) (conj res i)))))","user":"546e1142e4b00cfc9eacc199"},{"code":"(fn [a b]\n  (loop [i a v []]\n    (if (= i b)\n      v\n      (recur (inc i) (conj v i)))))","problem":34,"user":"532a111ee4b09d4e7a9b5520"},{"problem":34,"code":"(fn f[x y] (if (= x y) [] (conj (f x (- y 1)) (- y 1)) ))","user":"5be79b5be4b0f319e2d7ec5a"},{"code":"(fn my-range [a b]\n  (if (= a b)\n    nil\n    (conj (my-range (inc a) b) a)))","problem":34,"user":"52e41c22e4b09f7907dd144b"},{"problem":34,"code":"(fn ranger [from to]\n  (if (= from to) '() (conj (ranger (inc from) to) from)))","user":"59708e38e4b01722bebd4c65"},{"problem":34,"code":"(fn[mn mx] (loop[i mn coll []] (if (>= i mx) coll (recur (+ 1 i) (conj coll i)))))","user":"5e29cb4ce4b05b4b015161ae"},{"problem":34,"code":"(fn\n  [beg end]\n  (take (- end beg) (iterate inc beg)))","user":"53e3f7a8e4b036ad0777e408"},{"code":"(fn [start end] (if (< start end) (  take (- end start) (iterate inc start)  ) (  take (- end start) (iterate dec start)  )))","problem":34,"user":"51eab308e4b0f1f103a0d150"},{"problem":34,"code":"(fn [l u]\n  (loop [n l\n         z []]\n    (if (< n u)\n      (recur (inc n) (conj z n))\n      z)))","user":"5bd93897e4b0ed4b8aab4bee"},{"code":"(fn [a b]\n  (loop [n a l []]\n    (if (= n b)\n      l\n      (recur (inc n) (conj l n)))))","problem":34,"user":"538be6afe4b0640c7a9a58c9"},{"problem":34,"code":"(fn my-range\n  ([s e] (my-range s e ()))\n  ([s e a]\n   (if (= (first a) (dec e))\n     (reverse a)\n     (recur (inc s) e (conj a s)))))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":34,"code":"(fn [from till] (take (- till from) (iterate inc from)))","user":"56b97792e4b0f26550335932"},{"code":"(fn [s e]\n     (take (- e s)(iterate (partial + 1) s)))","problem":34,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":34,"code":"(fn [start, end] (take (- end start) (iterate #(+ 1 %) start)))","user":"569bfc43e4b0542e1f8d145c"},{"code":"#(loop [current %1\n         end %2\n         range-list []]\n    (if (>= current end)\n      range-list\n      (recur (+ current 1) end (conj range-list current))))","problem":34,"user":"523288fee4b035af41902a88"},{"problem":34,"code":"(fn my-range [b e]\n  (take (- e b) (iterate inc b)))","user":"55a3d7c7e4b0acc240e3153d"},{"problem":34,"code":"(fn rng [start end]\n  (letfn [(abs [a] (if (< a 0) (- a) a))]\n  \t(take (abs (- end start)) (iterate (if (> end start) inc dec) start))\n  )\n)","user":"55702247e4b09a3098a5252a"},{"code":"(fn m-range [start end]\n  (when (< start end)\n    (cons start (m-range (inc start) end))))","problem":34,"user":"4f81fcbfe4b033992c121c03"},{"code":"(fn rng [& args]\n  (let [left  (first args)\n        right  (last args)]\n    (loop [res []\n           l left]\n      (if (< l right)\n        (recur (conj res l)\n               (inc l))\n        res))))","problem":34,"user":"53710c09e4b0fc7073fd6ea5"},{"code":"(fn rng [s e] (if (< s e) (cons s (rng (inc s) e)) () ))","problem":34,"user":"503c02e5e4b0fc0f99c2e54e"},{"code":"(fn [x y]\n  (loop [x x\n         y y \n         out []] \n    (if (= x y)\n      out \n      (recur (+ x 1) y (conj out x)) \n      )   \n    )   \n  )","problem":34,"user":"4ee88f29535d93acb0a66882"},{"problem":34,"code":"#(map-indexed + (vec (repeat (- %2 %) %)))","user":"54b5b3cce4b05787c3b163ab"},{"problem":34,"code":"#(loop [top %2, result '(), i %1] (if (= i top) (reverse result) (recur %2 (conj result i) (inc i))))","user":"542c56aae4b0dad94371f2a4"},{"code":"(fn range-([x y](let [a '()](if (= x y)a(range- (inc x) y (concat a [x])))))([x y a](if (= x y)a(recur (inc x) y (concat a [x])))))","problem":34,"user":"52e6975de4b09f7907dd147a"},{"problem":34,"code":"(fn [start stop]\n  (loop [index  start\n         res    []]\n    (if (= index stop)\n      res\n      (recur\n        (inc index)\n        (conj res index)))))","user":"58ba8e7ce4b0888cdc949ce8"},{"problem":34,"code":"(fn [start end]\n    (loop [x start\n           result []]\n      (if (> end x)\n        (recur (inc x) (conj result x))\n               result)))","user":"5e348945e4b0650de70e2b1d"},{"problem":34,"code":"(fn [x y]\n  (loop [start (- x 1) end y accum ()]\n      (if (= start (- end 1))\n        (reverse accum)\n        (recur (inc start) y (conj accum (inc start))))))","user":"53275758e4b09d4e7a9b54fc"},{"problem":34,"code":"(fn [x y]\n  (loop [index x end y out []]\n    (cond (= index end) out\n          :else (recur (inc index) end (conj out index)))))","user":"57acee37e4b0b8559636fc94"},{"problem":34,"code":"(fn [low high]\n  (take (- high low) (iterate #(+ 1 %) low)))","user":"53e543efe4b036ad0777e457"},{"problem":34,"code":"(fn [start end]\n    (take (java.lang.Math/abs (- end start)) (iterate inc start)))","user":"5ac6ef9be4b0e27600da7779"},{"problem":34,"code":"(fn\n  [a b]\n  (loop [x (- b 1)\n         rang ()]\n    (if (< x a)\n      rang\n      (recur (dec x) (conj rang x))\n      )\n    )\n  )","user":"5c6cb3bfe4b0fca0c1622730"},{"problem":34,"code":"(fn [a b]\n  ((fn f [a b coll]\n    (let [x (- b (count coll))]\n      (if (< a x)\n        (f a b (conj coll (dec x)))\n        coll))) a b '()))","user":"56c792ace4b0ed865f9758c4"},{"code":"(fn [n1 n2] (take-while #(< % n2) (iterate inc n1)))","problem":34,"user":"51a8b576e4b08d8ec191b81a"},{"code":"(fn dd [ from to]\n     (loop [i from\n            result []]\n       (if (>= i to)\n         result\n         (recur (inc i) (conj result i)))))","problem":34,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":34,"code":"(fn implement-range\n    ([n1 n2] (implement-range n1 n2 n1 []))\n    \n    ([n1 n2 i y]\n        (cond\n            (< i n2) (implement-range n1 n2 (inc i) (conj y i))\n            :else (apply list y)\n        )\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":34,"code":"(fn r [from to]\n  (if (< from to)\n    (cons from (r (inc from) to))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":34,"code":"#(loop [x %1 res '()]\n  (if (= x %2) (reverse res)\n      (recur (inc x) (conj res x))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":34,"code":"(fn range-impl [start end]\n  (loop [xs '() x (dec end)]\n    (if (> start x)\n      xs\n      (recur (cons x xs) (dec x)))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":34,"code":"(fn [a b]\n    (take (- b a) (iterate inc a))\n    )","user":"5143a51be4b0b4fb4ace5f39"},{"problem":34,"code":"(fn [start end] (take (Math/abs (- end start)) (iterate inc start)))","user":"5adf63a7e4b0837691e92c34"},{"code":"(fn f [a b]\n  (if (= a b)\n    []\n    (cons a (f (+ 1 a) b))))","problem":34,"user":"4ee82539535d93acb0a66878"},{"problem":34,"code":"#(loop [x %1\n       result []]\n  (if (< x %2)\n    (recur (inc x)(conj result x))\n    result))","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":34,"code":"(fn [min max] (loop [x (dec max) res '()] (if (< x min) res (recur (dec x) (conj res x)))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn foo [min max]\n  (if (= min max)\n    '()\n    (cons min (foo (+ min 1) max))))","problem":34,"user":"4eb66737535d7eef3080736b"},{"code":"(fn f34 [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"535aee3be4b04ce2eb3ed2aa"},{"code":"(fn [start end] (take-while (fn [n] (< n end)) (iterate (fn [x] (+ 1 x)) start)))","problem":34,"user":"4f2893d0e4b0d6649770a019"},{"problem":34,"code":"(fn range*\n  [b e]\n  (reverse (loop [s [b] i b]\n    (if (= i (dec e)) s\n        (recur (cons (inc i) s) (inc i))))))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":34,"code":"(fn my-range [x y]\n  (if (= y x)\n    nil\n    (cons x (my-range (inc x) y))))","user":"566e3af2e4b0a866af6896d5"},{"problem":34,"code":"#(loop [i (- %2 1), s '()] (if (< i %1) s (recur (- i 1) (cons i s))))","user":"55280930e4b0ffed3738f93b"},{"problem":34,"code":"(fn rangulon\n    [start end]\n    (loop [start (dec start) end (dec end) acc []]\n      (if (< start end)\n        (recur start (dec end) (cons end acc))\n        acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":34,"code":"#(loop [a %1 b %2 r []]\n   (if (= a b)\n     (seq r)\n     (recur (inc a) b (conj r a))))","user":"57b5dc52e4b0fbc9809a27b3"},{"code":"(fn rng [a b]\r\n  (when (< a b) (cons a (rng (inc a) b))))","problem":34,"user":"4ec18451535dfed6da9c6db0"},{"code":"#(reverse ( (fn rn [min max result]\n    (if (= min max) \n        result \n        (rn (inc min) max (cons min result))\n  )\n) %1 %2 () ))","problem":34,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":34,"code":"(fn my-range\n      ([n1 n2] (my-range (inc n1) n2 [n1]))\n      ([n1 n2 lst]\n       (if (= n1 n2)\n         lst\n         (my-range (inc n1) n2 (conj lst n1)))))","user":"5938bca5e4b02506e01a29eb"},{"problem":34,"code":"(fn crea\n  [ini fin]\n  (if (= fin (+ ini 1))\n    (list ini)\n    (conj (crea (+ ini 1) fin) ini)))","user":"595bc925e4b066ee0a44afe2"},{"problem":34,"code":"(fn my-range [floor ceil]\n    (loop [floor floor, res []]\n         (if-not (= ceil floor)\n              (recur (inc floor) (conj res floor))\n               res)))","user":"587bead1e4b01531a375eb0d"},{"problem":34,"code":"(fn [low high] \n  (take (- high low) (iterate inc low)))","user":"554707bae4b0a04f79299544"},{"problem":34,"code":"#_(fn [start finish]\n  (loop [state (dec finish)\n         coll '()]\n    (if (>= state start)\n  \t  (recur (dec state) \n       \t\t (cons state coll))\n      coll)))\n\n(fn [beg end]\n  (take-while #(< % end)\n              (iterate inc beg)))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [a b] \n   (loop [x a\n          result []]\n     (if (>= x b)\n       result\n       (recur (inc x) (conj result x)))))","problem":34,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":34,"code":"(fn rng [res i n] \n  (if (< i n)\n    (rng (conj res i) (inc i) n)\n    res)\n  ) []","user":"56366f73e4b0bfe05bf117cc"},{"problem":34,"code":"#(loop [i %1\n        result []]\n        (if (= i %2)\n        \tresult\n          \t(recur (inc i) (conj result i))))","user":"5a23cabce4b0ff51aa4b32df"},{"problem":34,"code":"(fn [s e] (take-while #(> e %) (iterate inc s)))","user":"56561119e4b0f9d632dd849d"},{"code":"#(loop [i %1 s []]\n    (if (= i %2)\n      s\n      (recur (inc i) (conj s i))\n    )\n   )","problem":34,"user":"514f6679e4b0b449e54b8df5"},{"code":"(fn [min max]\n  (loop [current min\n   item-seq '()]\n    (do\n      (if (= current max)\n\t(reverse item-seq)\n\t(recur (inc current)\n\t       (conj item-seq current))))))","problem":34,"user":"4ef9b021535dced4c769f269"},{"code":"(fn my-range\n  [x y]\n  (if (= x y) []\n   (concat [x] (my-range (+ x 1) y))\n  )\n)","problem":34,"user":"51f549c4e4b0abb92f97f9cb"},{"code":"(fn[low high]\n  (take (- high low) (\n                      iterate inc low)\n        )\n  )","problem":34,"user":"53863845e4b06839e8705f0f"},{"problem":34,"code":"#(loop [cur %1 end %2 ls []]\n   (if (= cur end)\n     ls\n     (recur (inc cur) end (conj ls cur))))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":34,"code":"(fn [a b]\n        (reverse (loop [el a res '()]\n            (if (= el b)\n                res\n                (recur (inc el) (cons el res))))))","user":"58354124e4b089d5ab817cd6"},{"problem":34,"code":"(fn myRange [minR maxR]\n  (loop [final '()\n         element minR]\n    (if (= element maxR)\n      (reverse final)\n      (recur (conj final element) (inc element))\n      )))","user":"5f8330b8e4b01aacbe7a270f"},{"code":"(fn[l,h] \n  (take (- h l) (iterate #(+ 1 %) l))\n)","problem":34,"user":"4e6e10d8535d5021c1a895fd"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         ls []]\n    (if (= i end)\n      ls\n      (recur (inc i) (conj ls i)))))","user":"53d87449e4b0e771c302546d"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [x] (+ 1 x)) %1))","user":"55129632e4b06e50f9beb1aa"},{"problem":34,"code":"(fn implement-range-better\n  [first last]\n  (take (- last first) (iterate inc first)))","user":"57c731ede4b05aa3c4741d00"},{"problem":34,"code":"(fn [s e] (loop [i s res '() ] \n                            (cond (= i e) (reverse res)\n                                  :else (recur (+ 1 i) (cons i res)))))","user":"56011393e4b04bb52996e178"},{"problem":34,"code":"#(loop [i %1 res []]\n   (if (= i %2) res (recur (inc i) (conj res i))))","user":"58247423e4b051871117bec5"},{"problem":34,"code":"(fn implement-range' [x y]\n  (apply list (take (- y x) (iterate inc x))))","user":"605a876be4b000d535e6f53c"},{"code":"(fn my_range[x y] \n  (loop [start x end y nums []]\n    (if (= start end)\n      nums\n      (recur (inc start) end (conj nums start)))))","problem":34,"user":"53791ab7e4b06839e8705e4d"},{"problem":34,"code":"(fn [s e] (loop [n (dec e) acc '()]\n            (if (< n s)\n              acc\n              (recur (dec n) (conj acc n)))))","user":"557dbc9de4b05c286339e0cd"},{"problem":34,"code":"(fn [s e] (\n\t\t\ttake (- e s) (iterate inc s)         \n           ))","user":"5d6523ace4b0db5d338d15cd"},{"problem":34,"code":"(fn [start end]\n   (take-while\n     #(< %1 end)\n     (iterate inc start)))","user":"5b86462de4b047b03b2037df"},{"code":"(fn rang [start end]\n\t(if (= start end)\n\t\t'()\n\t\t(cons start (rang (inc start) end))))","problem":34,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn [s t]\n   (loop [x s\n          xs []]\n     (condp = x\n       t xs\n       (recur (inc x) (conj xs x)))))","problem":34,"user":"5327c591e4b09d4e7a9b54ff"},{"problem":34,"code":"(fn [a b] \n  (loop \n    [x a l '()] \n    (if \n      (>= x b) \n      (reverse l) \n      (recur \n       (+ 1 x) \n       (conj l x)))))","user":"5e6e6537e4b04a83ad7cd29a"},{"problem":34,"code":"#(loop [x %1, y %2, c []]\n   (if (= x y)\n     c\n     (recur (inc x) y (conj c x) )\n     ))","user":"5532a04ee4b09218d5f44f82"},{"code":"(fn my-range \n    ([n m] (my-range n m nil))\n    ([n m s] (cond (= n m) (reverse s)\n    :default (recur (inc n) m (cons n s)))))","problem":34,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [x y]\n  ((fn im [x y z]\n     (if (< x y)\n      (cons x (im (inc x) y z))\n       z\n     )\n    ) x y []\n   )\n  )","problem":34,"user":"51bec919e4b013aa0d74b800"},{"code":"#(if (= %2 %3) %1\n    (recur (conj %1 %2) (+ 1 %2) %3)) []","problem":34,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn my-range [start end] (if (< start end) (cons start (my-range (+ 1 start) end))))","problem":34,"user":"50cf94bde4b0abc485cb9bb2"},{"problem":34,"code":"(fn [begin end]\n  (loop [coll [begin]\n         counter 1]\n    (if (<(+ begin counter) end)\n      (recur (conj coll (+ begin counter)) (inc counter))\n      coll)))","user":"5f6e576ae4b02876ed9fd066"},{"problem":34,"code":"#(\n     loop [start %1\n           end %2\n           listAcc ()]\n     (if (= start end)\n       listAcc\n       (let [decEnd (dec end)] \n         (recur start decEnd (cons decEnd listAcc)))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":34,"code":"#(loop [rs '[]\n        stride %1\n        end (- %2 %1)]\n   (if (= end 0)\n     (apply list rs)\n     (recur (conj rs stride) (inc stride) (dec end))))","user":"4ec549e1535d6d7199dd3691"},{"problem":34,"code":"(fn myrange\n  [x y]\n  (if (>= x y)\n    '()\n    (conj (myrange (inc x) y) x)))","user":"559d3d22e4b0ec2b359424da"},{"problem":34,"code":"(fn [a z]\n  (loop [i a\n         acc []]\n    (if (= i z)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn rng [st fin] (take (- fin st) (iterate inc st)))","problem":34,"user":"51d381b5e4b099f3b6acde01"},{"problem":34,"code":"#(loop [idx %1\n        res []]\n   (if (< idx %2)\n     (recur (inc idx) (conj res idx))\n     res))","user":"56442758e4b0018b46ad8c0a"},{"problem":34,"code":"#(loop [x %1 y %2 res []]\n  (if (= x y)\n    (seq res)\n    (recur (inc x) y (conj res x))))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn r [start end] (if (>= start end) () (cons start (r (+ 1 start) end))))","problem":34,"user":"51e60210e4b0efabf93c02df"},{"problem":34,"code":"(fn [start end]\n  (loop [cnt start acc []]\n    (if (= cnt end) \n      acc\n      (recur (inc cnt) (conj acc cnt))\n      )\n   )\n  \n)","user":"560768a0e4b08b23635d317f"},{"code":"(fn [mn mx] (take-while #(< % mx) (iterate inc mn)))","problem":34,"user":"50377d53e4b0af0658af77ad"},{"code":"#(letfn \n  [(this []\n    (map + (repeat 1) (lazy-cat [0] (this))))]\n  (take (- %2 %) (map (partial + (dec %)) (this))))","problem":34,"user":"4e80e0f2535db62dc21a62b8"},{"code":"#(let [rang\n(fn [fra til] \n  (loop [ nedre fra\n          sekvens []]\n    (if (= nedre til)\n      sekvens\n      (recur (inc nedre) (conj sekvens nedre) )))) ]\n(seq (rang %1 %2))\n)","problem":34,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [counter start\n         result '()]\n    (if (= counter end) \n( reverse result)\n      (recur (inc counter) (conj result counter)))))","user":"606ff56ce4b069485764de21"},{"problem":34,"code":"(fn [from to] \n    (let [acc `() \n          curr from\n          target to]\n      (loop [acc '() curr from]\n        (if (= curr target)\n          (reverse acc)\n          (recur (conj acc curr) (inc curr)))\n        )))","user":"56cbb352e4b0ea9b8538f738"},{"problem":34,"code":";(fn [start end] (take (- end start) (iterate inc start)))\n(fn [start end] (take-while #(< % end) (iterate inc start)))","user":"60794173e4b0a637ed78035d"},{"code":"#(loop [r [] x %1] (if (= %2 x) r (recur (conj r x)(inc x))))","problem":34,"user":"5007c7c7e4b0b17c647f5226"},{"problem":34,"code":"(fn myrg [a b] (if (>= a b) '() (conj (myrg (+ a 1) b) a)))","user":"543d89dfe4b032a45b869350"},{"problem":34,"code":"(fn r [a b] (\n             if (= a b ) \n             '[]\n             (conj (r a (dec b)) (dec b)\n                              ))\n             )","user":"55a21f1ce4b0acc240e3151f"},{"problem":34,"code":"#(reverse ((fn [acc curr end] (if (= curr end) acc (recur (cons curr acc) (inc curr) end))) '() %1 %2))","user":"5ddcf10ae4b0948ae9d9adbe"},{"code":"(fn foo [from to]\n  (if (< (inc from) to)\n    (conj (foo (inc from) to) from)\n    (list from)))","problem":34,"user":"521d2564e4b01d5d410d8da8"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [start start\n         lst ()]\n    (if (= start end)\n      (reverse lst)\n      (recur (inc start) (conj lst start)))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn my-range [f t]\n  (loop [f f\n         t t\n         out []]\n    (if (= f t)\n      out \n      (recur (inc f) t (conj out f)))))","problem":34,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":34,"code":"(fn [start stop]\n  (loop [i start items []]\n    (if (= i stop)\n        items\n        (recur (inc i) (conj items i)))))","user":"53ff602fe4b0de5c418485ff"},{"code":"(fn my-range [& limits]\r\n  (let [[start stop] limits]\r\n    (loop [current start acc ()]\r\n      (if (= current stop)\r\n        (reverse acc)\r\n        (recur (inc current) (conj acc current))))))","problem":34,"user":"4f629697e4b0defedf855fd6"},{"problem":34,"code":"(fn f [s e] (if (>= s e) '() (cons s (f (+ s 1) e))))","user":"513f86dde4b00f13ea1bd88d"},{"code":"(fn create-list [f t]\n  (if (= -1 (- f t))\n    (list f)\n    (cons f (create-list (inc f) t))\n    )\n  )","problem":34,"user":"5360d41fe4b0243289761e39"},{"code":"(fn [x y] \r\n  (loop [cx x cy (- y x) coll []]\r\n    (if (> cy 0)\r\n      (recur (inc cx) (dec cy) (conj coll cx))\r\n      coll\r\n    )\r\n  )\r\n)","problem":34,"user":"4fedd993e4b0198f34b063bc"},{"problem":34,"code":"(fn w [a b] (if (= a b) () (cons a (w (inc a) b))))","user":"55af7e21e4b03311e7b732cc"},{"problem":34,"code":"(fn [l h ]\n  (take (- h l) (iterate inc l)))","user":"534da51fe4b084c2834f4aa4"},{"code":"(fn\n  [start-inc end-exc]\n  (loop [v start-inc vs []]\n    (if (< v end-exc)\n      (recur (inc v) (conj vs v))\n      vs)))","problem":34,"user":"525fffb8e4b03e8d9a4a702b"},{"code":"(fn r [i s]\n((fn rangio [inf sup]\n \n  (if (= inf sup)\n    (list inf)\n    (concat (rangio inf (dec sup)) (list sup))))\ni (dec s)))","problem":34,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":34,"code":"(fn [a b]\n  (loop\n   [min a max b c '()]\n   (if (< min max)\n     (recur min (dec max) (cons (dec max) c)) c)))","user":"574eb3b1e4b02ea114799247"},{"problem":34,"code":"(fn [A B] \n  (take (- B A) (\n                 iterate inc A)))","user":"58e51bc5e4b056aecfd47c86"},{"problem":34,"code":"(fn [minVal maxVal]\n   (loop [ resList '()\n           curVal minVal]\n     (if (= curVal maxVal)\n       (reverse resList)\n       (recur (conj resList curVal) (inc curVal))\n     )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":34,"code":"(fn [x y] \n  (loop [x x\n         coll nil]\n    (if (= x y)\n      (reverse coll)\n      (recur (inc x) (cons x coll)))))","user":"58bfa57ae4b021aa9917ecd8"},{"code":"(fn r [start end] (if (>= start end)\n                    nil\n                    (cons start (r (inc start) end))))","problem":34,"user":"52bf936ee4b07a9af579233b"},{"problem":34,"code":"(fn bla\n  ([start end] (bla start start end))\n  ([start index end]\n  \t(if (= index end) []\n      (flatten (conj [index] (bla start (+ index 1) end))))))","user":"5be15f4de4b0ed4b8aab4c9b"},{"problem":34,"code":"(fn [mn mx]\n   (take-while #(> mx %) (iterate inc mn)))","user":"5c896f46e4b048ec896c5940"},{"problem":34,"code":"(fn [start end]\n  (loop [c start res []]\n    (if (< c end)\n      (recur (inc c) (conj res c))\n      res)))","user":"58949f8de4b00487982d525e"},{"problem":34,"code":"#(loop [cur %1, result []]\n   (if (= cur %2)\n     result\n     (recur (+ cur 1) (conj result cur))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn my-range [from to]\n          (lazy-seq (if (>= from to) nil (cons from (my-range (inc from) to)))))","problem":34,"user":"52bc6f5ee4b07a9af57922f6"},{"code":"(fn rng\n  [a b]\n  (letfn [(inf [i]\n               (cons i (lazy-seq (inf (inc i)))))]\n    (take (- b a) (inf a))))","problem":34,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":34,"code":"(fn [a b]\n   (loop [x [] y a]\n     (if (< y b)\n       (recur (conj x y) (inc y))\n       x)))","user":"5aba04dce4b073f17744269e"},{"problem":34,"code":"(fn rng [s e] (when (not= s e) (cons s (rng (inc s) e))))","user":"53cd4920e4b00fb29b2212de"},{"problem":34,"code":"(fn [start end] (loop [n start result '()]\n        (if (< n end)\n            (recur (inc n) (cons n result))\n        (reverse result)\n)))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn ran [sta end] \n  (if (= sta (- end 1)) [(- end 1)] \n    (conj  (ran  sta (- end 1) )  (- end 1))))","problem":34,"user":"518644bce4b0da5a5be3baca"},{"problem":34,"code":"(fn my-range\n  [lower upper]\n  (if (= lower (dec upper))\n    [(dec upper)]\n    (lazy-seq (cons lower (my-range (inc lower) upper)))))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"(fn [begin end]\n     (loop [lst [] x begin]\n       (if (= x end)\n         lst\n         (recur (conj lst x)(inc x)))))","problem":34,"user":"4eb6f065535d7eef30807372"},{"problem":34,"code":"(fn [x y] \n  (loop [lst []\n         x x\n         length (- y x)]\n    (if (> length 0)\n      (recur \n       (conj lst x)\n       (inc x)\n       (dec length)\n       )\n      lst\n      )))","user":"591ac8ece4b09b4ee5954bdd"},{"problem":34,"code":"(fn rng [lb, ub]\n  (if (= lb ub)\n    (list)\n    (if (< lb ub)\n      (cons lb (rng (+ lb 1) ub))\n      (cons lb (rng (- lb 1) ub)))))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn [start end]\n  (loop [i start\n         r ()]\n    (if (= i end)\n      (reverse r)\n      (recur (inc i) (conj r i)))))","problem":34,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":34,"code":"(fn rank [from to]\n  (if (< from to)\n    (conj (rank (inc from) to) from)\n    '()))","user":"587cbebbe4b01531a375eb24"},{"problem":34,"code":"(fn [start stop]\n  (take-while #(< % stop)\n              (iterate inc start)))","user":"575cbe44e4b02ea114799374"},{"problem":34,"code":"(fn newRange [x y]\n  (loop [cnt x end y seqe '()]\n  (if (= cnt (- end 0))\n  (reverse seqe)\n  (recur (inc cnt) end (conj seqe cnt))\n  \n  )))","user":"55b1ab40e4b0da326a65cf6e"},{"code":"(fn rng ([lower upper] (rng lower (dec upper) '()))\n          ([lower upper l]\n            (if (<= lower upper) (recur lower (dec upper) (conj l upper))\n                                  l)))","problem":34,"user":"51eadb98e4b0f1f103a0d153"},{"problem":34,"code":"#(loop[n %2\n        res '()]\n    (if (= n %1)\n      res\n      (recur (dec n) (cons (dec n) res))))","user":"56acfee5e4b03c432f18734f"},{"code":"(fn myrange\n  ([l h] (myrange l (dec h) ()))\n  ([l h result]\n    (if (> l h)\n      result\n      (recur l (dec h) (cons h result)))))","problem":34,"user":"4fbb9d80e4b081705acca2ea"},{"problem":34,"code":"(fn [start end]\n  (loop [x start s '()]\n    (if (>= x end)\n      (reverse s)\n      (recur (inc x) (conj s x)))))","user":"508f4343e4b0ea685a20f767"},{"code":"(fn rango [x y] (take (- y x) (iterate inc x)))","problem":34,"user":"52767b2ce4b03e8d9a4a74e4"},{"code":"(fn rangei [i f]\n  (if (> f i) (cons i (rangei (inc i) f)) nil))","problem":34,"user":"5074b3ece4b054001656acd5"},{"code":"(fn fq [x y]  (cons x (if (<= (- y x) 1) '() (fq (inc x) y))))","problem":34,"user":"50ef3e5de4b0a78662fa2652"},{"problem":34,"code":"(fn rng [s, e] (if (< s e) (conj (rng (inc s) e) s) (empty '(1))))","user":"5ed4482be4b016b56eae05ca"},{"problem":34,"code":"(fn [a b] (take (- b a) (iterate #(+ 1 %) a)))","user":"55f25ae6e4b06e875b46ce43"},{"problem":34,"code":"(fn [start end]\n  (loop [i start result []]\n    (if (= i end)\n      (seq result)\n      (recur (inc i) (conj result i)))))","user":"5d03944de4b0cc9c915881c5"},{"problem":34,"code":"(fn my-range\n  [start-range end-range]\n  (loop [current start-range \n         end end-range\n         coll []]\n    (if (< current end)\n      (recur (inc current) end (conj coll current))\n      coll)\n    )\n  )","user":"602f56c5e4b0d5df2af22297"},{"code":"(fn range' [lower higher]\n  (if (>= lower higher) '()\n    (cons lower (range' (inc lower) higher))))","problem":34,"user":"508157b2e4b0946d0443855c"},{"code":"(fn my-range [low, hi]\n  (loop [num low, ret []]\n    (if (= num hi)\n      (reverse ret)\n      (recur (inc num) (cons num ret)))))","problem":34,"user":"4ee251e9535d10e5ff6f5365"},{"problem":34,"code":"#(loop [nm %1 ranged []]\n   (if (>= nm %2)\n     ranged\n     (recur (inc nm) (conj ranged nm))\n  )\n)","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn [from until]\n  (loop [f from, u until, acc []]\n    (if (= f u)\n      acc\n      (recur (inc f) u (conj acc f)))))","problem":34,"user":"50a83794e4b054305ba5a831"},{"code":"(fn zange [start end]\n  (loop [out [start] cur start]\n    (if (= cur (- end 1))\n      (seq out)\n      (recur (conj out (+ cur 1)) (+ cur 1))\n    )\n  )\n)","problem":34,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":34,"code":"(fn [start end]\n  (loop [x start y end new '()]\n    (if (= x y)\n      (sort new)\n      (recur (inc x) y (conj new x)))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn R [s n] (if(< (+ s 1) n)  (cons s (R (+ s 1) n)) [s] ))","problem":34,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"(fn this [a b]\n  (when (< a b)\n    (cons a (this (inc a) b))))","problem":34,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn [begin end]\r\n  ((fn [cur res]\r\n     (if (< cur begin)\r\n       res\r\n       (recur (dec cur) (cons cur res)))) (dec end) nil))","problem":34,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn [x y]\n  ((fn range_recur[start end items]\n    (if\n      (= start end)\n      items\n      (range_recur (+ 1 start) end (concat items [start]))\n    )\n  ) x y (list))\n)","problem":34,"user":"52624348e4b03e8d9a4a707e"},{"code":"(fn [lo hi]\n  (loop [x (dec hi)\n         c '()]\n    (if (> lo x)\n      c\n      (recur (dec x) (cons x c)))))","problem":34,"user":"50afdf00e4b0c3f5ed5c29a5"},{"problem":34,"code":"(fn rng [x y] (if (< x (- y 1)) (conj (rng (+ x 1) y) x) (list x)))","user":"557954aae4b05c286339e092"},{"problem":34,"code":"(fn [start end]\n   (letfn [(inner-fn [s current end]\n             (if (< current end)\n               (inner-fn (conj s current) (+ 1 current) end)\n               s))]\n     (seq (inner-fn [] start end))))","user":"57689c23e4b0a07e8fc180d6"},{"problem":34,"code":"(fn ranges ([a b] ( ranges a b [] )) ([a b v] ( if (= a b) v (ranges (inc a) b (conj v a)  ))))","user":"55d35a01e4b0e31453f64a63"},{"code":"(fn anon [s e]\n  (cond\n    (= s e) []\n    true (cons s (anon (inc s) e))))","problem":34,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":34,"code":"(fn penis [f c]\n  (take (- c f) (iterate inc f)))","user":"5755e66ee4b02ea1147992cf"},{"problem":34,"code":"(fn r [f t]\n  (loop [n f\n         res []]\n    (if (< n t)\n      (recur (inc n) (conj res n))\n      (apply list res))))","user":"51a3cc45e4b0e77c4ca60bfb"},{"problem":34,"code":"(fn [a b]\n  (loop [acc [] \n         curval a]\n    (if (= curval b) acc\n      (recur (conj acc curval)\n             (inc curval)))))","user":"55a1ba5ee4b0acc240e31517"},{"problem":34,"code":"(fn [start end] (\n                      loop [s start e end agg []] (if (> e s)\n                                                     \n                                                     (recur (inc s) e (conj agg s))\n                                                     agg)\n                                                   ))","user":"5e566668e4b027a2e10ac0f9"},{"code":"(fn _4 [i, j]\n  (loop [current i vector []]\n    (if (= current j)\n      vector\n      (recur (inc current) (conj vector current))\n      )\n    )\n  )","problem":34,"user":"4f082ad1535dcb61093f6c32"},{"problem":34,"code":"#(take(- %2 %1) (iterate inc %))","user":"573ddfc2e4b05c31a32c081b"},{"problem":34,"code":"(fn rg\n  [x y]\n  (cond\n   (= x y) '()\n   :else (cons x (rg (inc x) y))))","user":"5f317ae4e4b0574c87022c2a"},{"code":"(fn r ([a b] (when (< a b) (cons a (r (inc a) b)))))","problem":34,"user":"4ff889f2e4b0678c553fc399"},{"problem":34,"code":"(fn rec-range\n  ([start end]\n   (rec-range (list start) (inc start)  end))\n  ([result start end]\n   (if (= start end)\n     result\n     (recur (concat result (list start)) (inc start) end))))","user":"580d2788e4b0849f6811b730"},{"code":"(fn [low high]\n  (take (- high low)\n        (iterate inc low)))","problem":34,"user":"4ee2da14535d10e5ff6f536c"},{"code":"#(loop [x %1\n        res '()]\n   (if (>= x %2)\n     res\n     (recur (inc x) (concat res (list x)))))","problem":34,"user":"51d360d1e4b099f3b6acddff"},{"problem":34,"code":"(fn [low high] (->> (iterate inc low) (take-while #(< % high))))","user":"5f0e8312e4b0f30dddfb5d5b"},{"problem":34,"code":"(fn [num1 num2] \n  (take (- num2 num1) (iterate \n                       inc num1)))","user":"58631579e4b0f14aab7c8817"},{"problem":34,"code":"#(loop [i (- %2 1) lst ()]\n   (if (= i (- % 1))\n     lst\n     (recur (dec i) (conj lst i))))","user":"5495b2dee4b0b312c081ff5f"},{"problem":34,"code":"(fn rnge\n  [start end]\n  (when (< start end)\n    (cons start (lazy-seq (rnge (inc start) end)))))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn [a b] (loop [n a r []]\n  (if (= n b) r (recur (+ 1 n) (conj r n)))))","problem":34,"user":"4f038017535dcb61093f6afa"},{"problem":34,"code":"(fn f [s e]\n  (loop [x s acc []]\n    (if (< x e)\n      (recur (inc x) (conj acc x))\nacc)))","user":"5ae0976be4b0837691e92c43"},{"problem":34,"code":"(fn [f l] (loop [a [] i f] (cond\n                           (= i l) a\n                           :else (recur (conj a i) (+ i 1)))))","user":"56af842de4b061e3ca319ad2"},{"problem":34,"code":"(fn [from to] \n\t(loop \n\t\t\t[fromval from toval to result []] \n\t\t(println (str \"from: \" fromval)) \n\t\t(if (= toval fromval) \n\t\t\tresult\n\t\t\t(recur (inc fromval) toval (conj result fromval)))))","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn f [a b]\n          (if (= a b) '()\n          (conj (f (+ a 1) b) a)))","problem":34,"user":"52c7f036e4b0c2d177d62126"},{"code":"#(loop [current-number %1\n        builded-range []]\n   (if (zero? (- %2 current-number))\n     builded-range\n     (recur (inc current-number) \n            (conj builded-range\n                  current-number))))","problem":34,"user":"531c7f0de4b08068f379eda4"},{"problem":34,"code":"(fn [i l]\n  (loop [my-range '()\n         iter i]\n    (if (< iter l)\n      (recur (conj my-range iter) (inc iter))\n      (sort my-range))\n    )\n  )","user":"5c374db6e4b0d62ef62d9f73"},{"code":"#( reductions + %1 (repeat (- %2 %1 1 ) 1))","problem":34,"user":"4f030775535dcb61093f6a43"},{"code":"(fn impl-range [start end]\n  (loop [i start result []]\n    (if (= i end)\n      (list* result)\n      (recur (inc i) (conj result i)))))","problem":34,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":34,"code":"(fn [from to]\n   (loop [next (+ 1 from) result (list from)]\n     (if (= next to)\n       (reverse result)\n       (recur (+ next 1) (cons next result)))))","user":"54f26266e4b024c67c0cf8c5"},{"code":"#(loop [acc '() curr (dec %2)]\n   (if (< curr %1)\n     acc\n     (recur (conj acc curr) (dec curr))))","problem":34,"user":"531ba143e4b08068f379ed91"},{"problem":34,"code":"(fn [s e]\n  (loop [x s coll []]\n    (if (= x e)\n      coll\n      (recur (inc x) (conj coll x)))))","user":"5db6cc4ae4b010eb3c36cd3b"},{"problem":34,"code":"(fn [start, end]\n  (take (- end start) (iterate inc start)))\n\n;#(take (- %2 %1) (iterate inc %1))","user":"583ff3afe4b089d5ab817dda"},{"code":"(fn\n          [x y]\n          (loop [coll [x]]\n            (let [i (inc (last coll))]\n              (if (= i y)\n                coll\n                (recur (conj coll i))))))","problem":34,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":34,"code":"#(take (- %2 %1)\n((fn gen-range [n]\n(lazy-cat [n (inc n)]\n(map inc (rest (gen-range n)))))%1))","user":"57ee41eae4b0bfb2137f5bb0"},{"problem":34,"code":"(fn [start stop]\n\t  (take (- stop start) (iterate inc start)))","user":"5d1609f9e4b0902706380dd9"},{"code":"(fn rang [n m] (if (= n m) '() (conj (rang (inc n) m) n)))","problem":34,"user":"52474ec2e4b05ef8e38e6361"},{"problem":34,"code":"#(take (- %2 %1) (map (partial + %1) (iterate inc 0)))","user":"5639e878e4b0bfe05bf117f7"},{"code":"(fn [x y] \r\n  (take-while\r\n    (partial > y)(iterate inc x)))","problem":34,"user":"504f3fa3e4b0a02f9cffde62"},{"code":"(fn jrange\n  [strt stp]\n  (if (= strt stp)\n    '()\n    (conj (jrange (+ strt 1) stp) strt)))","problem":34,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [a b] (loop [x a, v []] (if (< x b) (recur (inc x) (conj v x)) v)))","problem":34,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [s f]\n  (let [l (- f (inc s))]\n    (reduce\n      (fn [c n]\n        (conj c (inc (last c))))\n    [s]\n    (take l (repeat s)))))","problem":34,"user":"51aee76ce4b09397d5109796"},{"code":"(fn r [a b]\n  (if (< a b)\n    (flatten (conj [a] (r (+ a 1) b)))\n    []))","problem":34,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn rge [a b]\n  (if (< a b)\n    (cons a (rge (+ a 1) b))\n    '()))","problem":34,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [a b] (loop [cntr a darng []] (if (>= cntr b) darng (recur (inc cntr) (conj darng cntr)))))","problem":34,"user":"51ecb0fee4b0bb5070431583"},{"code":"#(->> (iterate inc %1)\n     (take (- %2 %1) ,))","problem":34,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn upto [from to]\n  (if (>= from to) \n      '()\n       (cons from (upto (+ 1 from) to))))","problem":34,"user":"4fc863a9e4b0ee37620e1831"},{"code":"#(map (fn [x] (- x (- 1 %1))) (take (- %2 %1) (iterate inc 1)))","problem":34,"user":"51f2b8f1e4b0210f90e74556"},{"problem":34,"code":"(fn [a b]\n  (loop [a a l '()]\n    (if (>= a b)\n      (reverse l)\n      (recur (inc a) (conj l a)))))","user":"55507a1ae4b00713264bd9a7"},{"code":"(fn f[s e](if(= s e)()(conj(f(+ s 1)e)s)))","problem":34,"user":"4eb07be3535d7eef3080733b"},{"code":"(fn [a b] (loop \n            [a a b (- b 1) acc '()] \n            \t(if (= a b)\n                (conj acc b)\n            \t(recur a (- b 1) (conj acc b))\n                )\n            ))","problem":34,"user":"5314b0cae4b08068f379ed1c"},{"problem":34,"code":"(fn [v t]\n  (loop [from v\n         res []]\n    (if (= from t)\n      (seq res)\n      (recur (inc from) \n             (conj res from)))))","user":"55912230e4b027778923767a"},{"code":"#(take (- %2 %1) (letfn[(incx [x] (lazy-seq(cons x (incx (inc x)))))] (incx %1)))","problem":34,"user":"4fba77fae4b081705acca2df"},{"problem":34,"code":"(fn \n  [a b]\n  (let [cnt (- b a)]\n    (take cnt (iterate inc a))))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":34,"code":"(fn my-range\n\t[from to]\n\t(if (= from to)\n      (list)\n      (conj (my-range (inc from) to) from)))","user":"554b425ce4b0a04f79299581"},{"problem":34,"code":"#(loop [acc '() c %]\n   (if (= c %2) (reverse acc)\n     (recur (conj acc c) (inc c))))","user":"5310e968e4b08068f379ecdd"},{"problem":34,"code":"(fn rng [s e]\n  (take (- e s) (iterate inc s)))","user":"5d28d935e4b092dab7f59c88"},{"code":"(fn [s e]\n   (take (- e s) (iterate inc s)))","problem":34,"user":"4f4be1cae4b03ad3f0c10c81"},{"code":"(fn [i j] (take-while #(< %1 j) (iterate #(+ 1 %) i)))","problem":34,"user":"505d70e8e4b0e6aca564be09"},{"problem":34,"code":"(fn [x y] (reduce (fn [res _] (conj res (+ 1 (last res)))) (vector x) (repeat (- y x 1) 0)))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":34,"code":"(fn [min max]\n  (loop [i min\n         r []]\n    (if (= i max)\n      (identity r)\n      (recur (inc i) (conj r i) ); loop i will take this value\n      )))","user":"5ee4b2e6e4b029a2061bbe90"},{"code":"(fn ran [l h] (if (not= l h) (conj (ran (inc l) h) l)))","problem":34,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":34,"code":"( fn lst [from to] (take (- to from) (cons from (lazy-seq (lst (+ from 1) to)))))","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [st en]\n  (take (- en st) (iterate inc st)))","problem":34,"user":"4f52ae00e4b03ad3f0c10d42"},{"problem":34,"code":"(fn [lo hi]\n  (loop [n lo\n         coll []]\n    (if (>= n hi)\n      coll\n      (recur (inc n) (conj coll n)))))","user":"58e2e11ce4b005f69f193ca0"},{"problem":34,"code":"(fn [start end] (take-while #(> end %) (iterate inc start)))","user":"5658d775e4b00d3155796114"},{"code":"(fn rg [s e] (if (= s e)\n               (list)\n               (concat (list s) (rg (inc s) e))))","problem":34,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":34,"code":"(fn f\n  [start end]\n  (take (- end start) (iterate inc start))\n  )","user":"5d9aeae5e4b0d3f9b434ad4a"},{"problem":34,"code":"(fn [s e]\n  (loop [start s end e result []]\n    (if (= start end)\n      result\n      (recur (inc start) end (conj result start)))))","user":"59c3a7e9e4b0a024fb6ae4df"},{"problem":34,"code":"#(loop [out [%1]]\n  (if (= %2 (inc (last out)))\n    out\n    (recur (conj out (inc (last out))))))","user":"5aa8f753e4b0d174b936c8d9"},{"problem":34,"code":"(fn [l r]\n  (loop [cur l, rng []]\n    (if (= cur r)\n      rng\n      (recur (inc cur) (conj rng cur)))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"(fn [f l] (map-indexed #(+ %1 %2 f) (repeat (- l f) 0)))","problem":34,"user":"5230d9bde4b0035e815da397"},{"code":"(fn [from to]  (map #(+ from % -1) (reductions + (repeat (- to from) 1))))","problem":34,"user":"51c1d159e4b0d204dbe2ca18"},{"code":"(fn [m n]\n  (take (- n m) (iterate inc m)))","problem":34,"user":"50acbd15e4b071b89ef26234"},{"problem":34,"code":"(fn [a b] (take (- b a) ((fn aaa [a](cons a \n                                     (lazy-seq \n                                      (aaa\n                                       (inc a))))) a )))","user":"5d6c2aace4b04d129b00f2ad"},{"code":"(fn [inicio cantidad]\n  (take (+ cantidad (- inicio)) (iterate inc inicio)))","problem":34,"user":"4dfd7ecf535d04ed9115e783"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start (dec end))\n    (list start)\n    (concat (list start) (my-range (inc start) end))))","user":"58a953dae4b01a0c0b232968"},{"problem":34,"code":"(fn [x y] (take-while (partial >\n                               y) (iterate inc x)))","user":"58681907e4b0f14aab7c8889"},{"problem":34,"code":"#(loop [cur % col []] (if (= (last col) (dec %2)) col (recur (inc cur) (conj col cur))))","user":"609beb06e4b00e9e6653c412"},{"code":"(fn f [s e] (if (= s e) () (cons s (f (+ s 1) e))))","problem":34,"user":"51422945e4b0b50abeb46b2e"},{"problem":34,"code":"(fn [s1 s2] (loop [x (vector s1), y s2] (if (>= (last x) y) (butlast x) (recur (conj x (inc (last x))) y))))","user":"5457e502e4b01be26fd74612"},{"problem":34,"code":"(fn [start stop]\n  (loop [l [start]\n         cnt start]\n    (if (= cnt (- stop 1)) l\n      (recur (conj l (inc (last l)))\n              (inc cnt)))))","user":"576186a5e4b0994c1922fb8e"},{"problem":34,"code":"(fn x [start end] (reduce (fn [a b] (conj a (inc (last a)))) [start] (repeat (- end start 1) 0)))","user":"5cb39440e4b026601754b903"},{"problem":34,"code":"(fn [x y] (loop [numA x numC y numB '()]\n          (if (< numA numC)\n            (do (println numB)\n              (recur (inc numA) numC (conj numB numA)))\n            (reverse numB))))","user":"5b754a5ae4b047b03b2036c8"},{"code":"(fn [l h] (loop [low l high h result []]\n            (if (= high low) result\n            \t(recur (inc low) high (conj result low)))))","problem":34,"user":"50fac9e3e4b07934dda8b0d1"},{"code":"(fn self-range [ans a b]\n  (if (< a b)\n    (recur (conj ans a) (+ 1 a) b)\n    ans)) []","problem":34,"user":"5322d364e4b09d4e7a9b54c6"},{"problem":34,"code":"(fn [mn mx]\n  (loop [x (dec mx)\n         xs ()]\n    (if (< x mn)\n      xs\n      (recur (dec x) (cons x xs)))))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":34,"code":"(fn f [start end]\n  (if (= start end)\n    '()\n    (cons start (f (inc start) end))))","user":"50d5c19ce4b0159555a1fc61"},{"code":"(fn [from to] (take-while #(< % to) (iterate inc from)))","problem":34,"user":"4f97d8f3e4b0dcca54ed6ced"},{"code":"(fn [a b] (loop [a a\n                 coll []]\n            (if (= a b)\n              coll\n              (recur (inc a) (conj coll a)))))","problem":34,"user":"536d260be4b0fc7073fd6e55"},{"problem":34,"code":"(fn my-range [start end]  \n   (lazy-seq (when (not (= start end)) (cons start (my-range (if (< start end) (inc start) (dec start)) end)))))","user":"5bb25684e4b0a20761a2350d"},{"problem":34,"code":"(fn[lower, upper]\n  (take (- upper lower) (iterate inc lower))\n  )","user":"55240916e4b0882d96d091b6"},{"code":"(fn[from to]\n   (reverse (loop [init from almacen '()]\n      (if (= init to)\n        almacen\n        (recur (inc init) (conj almacen init))\n        )\n      ))\n   )","problem":34,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"( fn [start end] (take (- end start) (iterate inc start)))","problem":34,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn [x y] (let [number-of-ints (- y x)]\n            (take number-of-ints (iterate inc x))))","problem":34,"user":"52029e5de4b030ee0c5b26fc"},{"problem":34,"code":"#(seq\n    (loop [i %1 n %2 r '[]]\n      (if (= i n)\n        r\n        (recur (+ i 1) n (conj r i)))))","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn myrange [l u]\r\n  (if (>= l u) nil\r\n      (conj (myrange (inc l) u) l)))","problem":34,"user":"4e14108c535d04ed9115e7dd"},{"problem":34,"code":"#(loop[len (- %2 %1) r (list %1)]\n   (if (= len 1) (reverse r)\n     (recur (dec len) (conj r (+ 1 (first r))))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn rang [a b]\n  (if (< a  b) (cons a (rang (+ a 1) b))\n    '()))","problem":34,"user":"502d39f8e4b0d96a44ab2032"},{"code":"(fn r [start finish] (if (< start finish) (cons start (r (inc start) finish)) '()))","problem":34,"user":"532c0507e4b09d4e7a9b553c"},{"problem":34,"code":"(fn [start end]\n  (loop [current-index start result []]\n    (if (= current-index end)\n      result\n      (recur (inc current-index) (conj result current-index)))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [curr (dec end)\n         values ()]\n    (if (< curr start)\n      values\n      (recur (dec curr) (conj values curr)))))","user":"58543a59e4b07779d46863f5"},{"problem":34,"code":"(fn [a b]\n    (take-while #(< % b)\n                (iterate inc a)))","user":"563a79e5e4b0bfe05bf117fe"},{"problem":34,"code":"(fn [start end]\n  (loop [i start acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc)))","user":"5e668d87e4b0e171e1033681"},{"code":"#(map-indexed (fn [a b] (+ a %1)) (repeat (- %2 %1) %1))","problem":34,"user":"52f07ccee4b05e3f0be25edf"},{"code":"#(loop [n %1 r []] (if (< n %2) (recur (+ n 1) (conj r n)) r))","problem":34,"user":"537943c0e4b06839e8705e52"},{"code":"(fn range*                                                                                                                                        \n    [from to]                                                                                                                                      \n    (when (not (= from to))                                                                                                                        \n      (cons from (range* (+ from 1) to))))","problem":34,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn solution [a b]\n  (take (- b a) (iterate inc a))\n)","problem":34,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":34,"code":"(fn [start stop]\n            (loop [list-in-progress '()\n                   cur (dec stop)]\n              (if (>= cur start)\n                (recur (conj list-in-progress cur) (dec cur))\n                list-in-progress)))","user":"54e79094e4b024c67c0cf818"},{"code":"#(loop [n %1 result []]\n  (if (= n %2)\n      result\n      (recur (inc n) (conj result n))))","problem":34,"user":"4f017b4e535dcb61093f6a37"},{"code":"(fn [a b]\n  (loop [i a\n         res '()]\n    (cond\n     (= i b) (reverse res)\n     :else (recur (+ i 1)\n                  (conj res i)))))","problem":34,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn [start end] \n  (loop [s start coll []]\n    (if (= s end)\n      coll\n      (recur (inc s) (conj coll s)))))","problem":34,"user":"5007f751e4b0b17c647f522b"},{"problem":34,"code":"#(reverse (loop [n %1 c '()] (if (>= n %2) c (recur (inc n) (cons n c)))))","user":"54722c55e4b094393f72dd74"},{"code":"(fn [ start end ] (take (java.lang.Math/abs (- end start)) (iterate inc start)))","problem":34,"user":"52286b19e4b0186687e23a7e"},{"code":"(fn my-range [start end]\n  (if (= start end) \n    nil\n    (cons start (my-range (+ 1 start) end))))","problem":34,"user":"4dca56b6535d5973398f9287"},{"problem":34,"code":"(fn [from to]\n  (loop [current from\n         result '()]\n    (if (= current to)\n      (reverse result)\n      (recur (inc current)\n             (conj result current)))))","user":"54d321b3e4b0e8a36923e602"},{"problem":34,"code":"(fn f [b e] (if (= b e) '() (cons b (f (+ 1 b) e))))","user":"6078afb9e4b0a637ed780359"},{"problem":34,"code":"(fn\n  [start stop]\n  (loop\n    [curr start\n     coll '()]\n    (if (= curr stop)\n      (reverse coll)\n      (recur (inc curr) (conj coll curr)))))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":34,"code":"(fn [min max] \n  (take (- max min) (iterate inc min)))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":34,"code":"(fn [i j] ( take (- j i) (iterate inc i)))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":34,"code":"(fn [from to]\n  (loop [current from\n         res []]\n    (if (= current to)\n      res\n      (recur\n       (inc current)\n       (conj res current)))))","user":"592334c7e4b0a390037439ee"},{"code":"(fn [min max]\n  (loop [i min, out []]\n    (if (= i max)\n      out\n      (recur (inc i) (conj out i)))))","problem":34,"user":"4edd9d79535d10e5ff6f532b"},{"code":"(fn [start stop]\n  (loop [n start rng '()]\n    (if (= n stop)\n      (reverse rng)\n      (recur (inc n) (conj rng n)))))","problem":34,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn rang [ss cc]\n  (if (>= ss cc)\n     ()\n     (cons ss (rang (inc ss) cc))\n    )\n  )","problem":34,"user":"4eaa96e1535d7eef3080730d"},{"problem":34,"code":"(fn [from to]\n   (loop [from from\n          to to\n          result []]\n     (if (= to from)\n       result\n       (recur (inc from) to (conj result from)))))","user":"6040e6dbe4b0d5df2af2232a"},{"problem":34,"code":"#(loop [x (dec %2) res '()] (if (>= x %1) (recur (dec x) (conj res x)) res))","user":"5713f693e4b07c98581c3ab0"},{"problem":34,"code":"(fn [s e] (loop [r [s]] (if (= (last r)(- e 1)) (apply list r) (recur (conj r (inc (last r)))))))","user":"562326cbe4b03f08ee9a9230"},{"problem":34,"code":"(fn [start end]\n  (loop [s start\n         e end\n         col []]\n    (if (< s e)\n      (recur (inc s) e (conj col s))\n      col)))","user":"5793931ee4b0e215f87e845c"},{"problem":34,"code":"(fn [f s] (loop[fi f l s r ()]\n            (if (>= fi l) (reverse r) (recur (inc fi) l (cons fi r)))) )","user":"53b3ea79e4b047364c0444ab"},{"code":"(fn my-range [s f]\n  (if (< s f)\n    (conj (my-range (inc s) f) s)))","problem":34,"user":"5118b4e0e4b046de85f62a4c"},{"problem":34,"code":"(fn [f t]\n  (loop [x t l '()]\n    (if (= x f)\n      l\n      (recur (dec x) (conj l (dec x))))))","user":"510c01bae4b078ea7192110a"},{"code":"(fn my-range [l h] \n   (let [ o ((fn my-range2 [a b c] \n                  (if (= a (- b 1))\n                     (cons a c)\n                     (my-range2 (+ a 1) b (cons a c))\n                  )) l h [])\n        ]\n     (reverse o)\n   ) \n)","problem":34,"user":"4ec17677535dfed6da9c6dad"},{"code":"(fn rng\n  [start end]\n    (if (= start end)\n      '()\n      (cons start (rng (inc start) end))))","problem":34,"user":"4e6ac7a8535d8ccf87e9ff03"},{"problem":34,"code":"(fn [myvec start end]\n  (if (>= start end)\n    myvec\n    (recur (conj myvec start) (inc start) end  ) ) ) []","user":"5c38422ae4b0d62ef62d9f7f"},{"problem":34,"code":"(fn rng [start stop]\n  (loop [ans nil n stop]\n    (if (= n start)\n      ans\n      (recur\n       (conj ans (- n 1))\n       (- n 1)\n      )\n    )\n  )\n)","user":"56b36283e4b0982f16b37e18"},{"problem":34,"code":"(fn f [x y] \n  (if (< x y) \n    (cons x (f (inc x) y))\n    '()\n    )\n  )","user":"57c99a45e4b05aa3c4741d31"},{"problem":34,"code":"(fn [mini maxi] \n  (let [arr (repeat (- maxi mini) mini)]\n    (reduce (fn [c v] (conj c (inc (last c)))) [(first arr)] (drop 1 arr))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":34,"code":"(fn [start end]\n  (loop [current (dec end)\n        list-so-far '()]\n    (if (< current start)\n      list-so-far\n      (recur (dec current) (conj list-so-far current)))))","user":"54aec099e4b09f271ff37cf5"},{"code":"(fn ran [p q] (if (= p q) ()\r\n                (cons p (ran (inc p) q))))","problem":34,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":34,"code":"(fn [f t]\n  (loop [c f r '()]\n    (if (= c t)\n      (reverse r)\n      (recur (inc c) (conj r c)))))","user":"5700ec08e4b08d47c97781cd"},{"code":"(fn [lower upper]\n  (loop [coll []\n         x lower]\n    (if (= x upper)\n      coll\n      (recur (conj coll x) (inc x)))))","problem":34,"user":"50ed3c6be4b01236b1d4983b"},{"code":"#(->> % (iterate inc) (take-while (partial >= %2)) drop-last)","problem":34,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn [a b]\n  (loop [a a b (dec b) acc '()]\n    (if (= a b)\n      (conj acc b)\n      (recur a (dec b) (conj acc b)))))","problem":34,"user":"4f3656d1e4b0e243712b1ec9"},{"code":"(fn r [lower upper]\n  (into '()\n   ((fn r2 [curr upper built]\n    (if (< curr upper)\n      (r2 (inc curr) upper (conj built curr))\n      built))\n    lower upper '())))","problem":34,"user":"523b4e91e4b07becd5be21ef"},{"problem":34,"code":"(fn filler [start, exclusive-end]\n  (loop [current start, result []]\n    (if (>= current exclusive-end)\n      result\n      (recur (inc current) (conj result current)))))","user":"5d0859fbe4b0cc9c91588208"},{"problem":34,"code":"(fn [a b] (loop [n1 a out []] (if (= n1 b) out (recur (inc n1)(conj out n1)))))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":34,"code":"(fn [start end]\n  (loop [acc   (list)\n         start start\n         end   end]\n    (if (= start end)\n      (reverse acc)\n      (recur (cons start acc) (inc start) end))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn f ([l r]\n      (f l r []))\n      ([l r t]\n        (if (= l r)\n            t\n          (f (inc l) r (conj t l)))))","problem":34,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn sub[b e]\n (reverse    \n ((fn [b e l]\n      (if (= b e)\n           l\n          (recur (inc b) e (conj l b))\n      )\n   ) b e ()\n  )\n )\n)","problem":34,"user":"4e7650c5535d324fb2983d68"},{"problem":34,"code":"(fn ra [n x]\n  (if (>= n x) nil\n    (concat (list n) (ra (+ 1 n) x))))","user":"589f4387e4b02bd94d917e7b"},{"code":"(fn [a b]\n  (loop [x a acc '()]\n    (if (< x b)\n        (recur (inc x) (conj acc x))\n        (reverse acc))))","problem":34,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":34,"code":"(fn [start end]\n  (loop [xs '()\n         x (dec end)]\n    (if (> start x)\n      xs\n      (recur (conj xs x) (dec x)))))","user":"5ab16992e4b073f1774425c4"},{"problem":34,"code":"(fn [start end]\n  (loop [current start\n         new-range '()]\n    (if (= current end)\n      new-range\n      (recur (inc current) (concat new-range (cons current '()))))))","user":"5c3f6322e4b08cd430848e97"},{"code":"(fn range* [i j]\n  (take (- j i) (iterate inc i)))","problem":34,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn f [a b]\n  (if (= a b) '()\n    (cons a (f (inc a) b))))","problem":34,"user":"4ff07229e4b0678c553fc323"},{"problem":34,"code":";; this took me a while, but not small enough\n; (fn [x y]\n;  (loop [x x y y rng []]\n;    (cond\n;      (= x y) rng\n;      :else (recur (inc x) y (conj rng x)))))\n\n; more eloquent\n(fn [x y] (take-while #(< % y) (iterate inc x)))","user":"554bced1e4b0a04f79299599"},{"problem":34,"code":"(fn [from to]\n    (take (- to from)(iterate inc from)))","user":"567c63f6e4b05957ce8c61bb"},{"problem":34,"code":"(fn [a o] (loop [end o\n                 cnt a\n                 col []]\n            (if (= end cnt)\n              col\n              (recur end (+ 1 cnt) (conj col cnt)))))","user":"5753b6c6e4b02ea1147992af"},{"code":"#(loop [start %1 stop %2 res '()]\n    (if (= start stop)\n      (reverse res)\n      (recur (inc start) stop (conj res start))\n    )\n  )","problem":34,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":34,"code":"(fn [start end]\n  (loop [n (- end start)\n         result []]\n        (if (= n 0)\n            result\n            (recur (dec n) (conj result (- end n))))))","user":"58fc52cee4b0438e51c2cf95"},{"problem":34,"code":"#(loop [a %1 b %2 acc []]\n           (if (< a b)\n             (recur (inc a) b (conj acc a))\n             acc))","user":"5910a43de4b0163c97b36ebf"},{"code":"#(loop [rst '() starts %1 ends %2]\n  (if (= starts ends)\n      (reverse rst)\n      (recur (cons starts rst) (inc starts) ends)))","problem":34,"user":"50399468e4b088a6a14ca768"},{"problem":34,"code":"(fn range-int [start end]\n  (into () (rseq\n  (loop [res [start] ind start]\n    (if (= (+ ind 1) end)\n      res\n      (recur (conj res (inc ind)) (inc ind)))))))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":34,"code":"#(loop [start %1 end %2 xs []] (if (< start end) (recur (+ start 1) end (conj xs start)) xs))","user":"5c228b51e4b07e362c23058c"},{"code":"#(loop [from %1 to %2 sequence '()]\n  (if (= from to)\n    (reverse sequence)\n    (recur (+ 1 from) to (cons from sequence))))","problem":34,"user":"4e6daa22535d5021c1a895ef"},{"problem":34,"code":"(fn [min max] \n            (loop [i min, acc '()]\n              (if (< i max)\n              (recur (inc i) (conj acc i))\n              (reverse acc))\n            )\n         )","user":"52149e21e4b0961f15ac4d94"},{"code":"(fn xrange [x y] (if (< x y) (conj (xrange (+ 1 x) y) x) ()))","problem":34,"user":"52c54c84e4b0c2d177d620f0"},{"code":"#(loop [n %1 s []] (if (< n %2) (recur (inc n) (conj s n)) s))","problem":34,"user":"53244c9de4b09d4e7a9b54db"},{"problem":34,"code":"#(reduce (fn [a b] (let [a (if (seq? a) a (list a))] (concat a (list (inc (last a)))))) (repeat (- %2 %1) %1))","user":"586e47dee4b01531a375e9a9"},{"code":"(fn [start end]\n  (loop [curr (dec end)\n    acc nil]\n    (if (= curr start)\n      (cons curr acc)\n      (recur (dec curr) (cons curr acc)))))","problem":34,"user":"4f7c7ed7e4b06e829148e1b4"},{"code":"(fn [from to]\n  ((fn r [i acc]\n    (if (>= i to) \n        acc\n        (r (+ i 1) (conj acc i))))\n    from []))","problem":34,"user":"4f8320e9e4b033992c121c18"},{"problem":34,"code":"#(loop [start %1 end %2 accum []]\n  (if (< start end)\n    (recur (inc start) end (conj accum start))\n    (seq accum)))","user":"5f838122e4b01aacbe7a2715"},{"problem":34,"code":"(fn [bottom top]\n  (loop [i bottom acc '()]\n    (if (= i top) (reverse acc)\n        (recur (inc i) (cons i acc)))))","user":"5d126728e4b02c15ef02199a"},{"code":"(fn r [l h]\n   (if (< l h)\n     (cons l (r (+ 1 l) h))))","problem":34,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn implement-range [start end]\n  (take (- end start) (iterate inc start))\n  )","problem":34,"user":"510a3cd4e4b06956752d35ad"},{"code":"#(loop [start %1 sol []]\n  (if (= start %2)\nsol\n(recur (inc start) (conj sol start))))","problem":34,"user":"5012614ee4b02a085b99dc79"},{"code":"(fn [f t]\n (take (- t f) ((fn this [g]\n  (lazy-seq (cons g (this (inc g))))) f)))","problem":34,"user":"519291c1e4b08962174cf74b"},{"code":"(fn r [lower upper]\n  (if (= lower upper)\n    nil\n    (cons lower (r (inc lower) upper))))","problem":34,"user":"52deb735e4b09f7907dd13f7"},{"problem":34,"code":"(fn [start end] (take (- end start) (iterate inc  start)))","user":"5a09a6f7e4b01bb0ae8afe14"},{"code":"(fn f\n  [start end]\n  (if (= start end)\n    ()\n    (conj (f (inc start) end) start)))","problem":34,"user":"4f541874e4b0a7574ea717d8"},{"code":"(fn foo [x y] (when (< x y) (conj (foo (inc x) y) x)))","problem":34,"user":"4fe0d08de4b0dd6cd5ce362d"},{"problem":34,"code":"(fn foo [start end] \n  (take (- end start) (iterate inc start)))","user":"5b3251c1e4b025bcb146f317"},{"problem":34,"code":"(fn rr [start end] \n  (loop [curr start\n         result []]\n    (if (= curr end) result\n      (recur (inc curr) (conj result curr)))\n    )\n\n  )","user":"5a2834dfe4b07f18be40aa64"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [n] (inc n)) %1))","user":"5510aa92e4b06e50f9beb188"},{"problem":34,"code":"#(loop [r '()\n        i %1]\n   (if (>= i %2)\n     (sort r)\n     (recur (into (list i) r)\n            (inc i))))","user":"56ab80f1e4b03c432f18733e"},{"code":"(fn r [a b]\n  (if (= a b) '()\n      (cons a (r (+ a 1) b))))","problem":34,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":34,"code":"(fn [l,u] (take (- u l) ((fn f ([] (f l)) \n  ([n] (lazy-seq (cons n (f (inc n)))))))))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn foo [a b]\r\n  (if (= a b)\r\n    nil\r\n    (cons a (foo (inc a) b))))","problem":34,"user":"4ddbfb8a535d02782fcbea00"},{"code":"#(reductions + % (repeat (- %2 % 1) 1))","problem":34,"user":"4db85bdd535d1e037afb218d"},{"problem":34,"code":"(fn my-rnge\n  ([x y]\n   (my-rnge x y '()))\n  ([x y seq]\n   (if (< x y)\n     (recur (inc x) y (conj seq x))\n     (reverse seq))))","user":"5bb5cd43e4b0a20761a23575"},{"problem":34,"code":"(fn laenge [anfang ende] (loop [x anfang acc []] (if (< x ende) (recur (inc x) (conj acc x)) acc)))","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"code":"(fn myran [from to]\n  (let [delta (if (< from to) 1 -1)]\n    (loop [n from\n           res []]\n      (if (= n to)\n        res\n        (recur (inc n)\n               (conj res n))))))","problem":34,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":34,"code":"(fn \n  [s f]\n  (reverse\n  (loop \n      [c s\n       res '()]\n    (if (= c f)\n      res\n      (recur (inc c) (conj res c))))))","user":"60046db8e4b074f607df6642"},{"code":"#(take (- %2 %1) (iterate (fn [x] (inc x)) %1))","problem":34,"user":"51ae350fe4b09397d5109790"},{"code":"(fn [lo hi]\n  (loop [cur (dec hi)  lst ()]\n    (if (< cur lo)\n      lst\n    (recur (dec cur) (conj lst cur)))))","problem":34,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":34,"code":"#(loop [from %1 to %2 result '()]\n\t(if (= from to)\n    \t(reverse result)\n        (recur (inc from) to (conj result from))))","user":"5707e579e4b0b0fb43fd0694"},{"problem":34,"code":"(fn\n  [a b]\n  (loop [result ()\n         x a]\n    (if(> x b)\n      (reverse (rest result))\n      (if(<= a x b)\n        (recur (cons x result) (inc x))))))","user":"56df6417e4b0ca2494a095f7"},{"code":"#(loop [start %1\n        stop  %2\n        coll  []]\n   (let [lst (if (nil? (last coll)) (dec start) (last coll))]\n     (if (= (dec stop) lst)\n       coll\n       (recur start stop (concat coll [(inc lst)])))))","problem":34,"user":"539f3397e4b0ca733b974496"},{"code":"(fn [a b]\r\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn [begin end] \n  (loop [x begin l '()]\n    (if (< x end)\n      (recur (inc x) (conj l x))\n      (reverse l))))","problem":34,"user":"4eae2f9e535d7eef30807324"},{"problem":34,"code":"(fn myrange\n  [start finish]\n  ((fn moveup\n    [xs new]\n    (if\n      (= new finish)\n      xs\n      (moveup (conj xs new) (inc new)))) [] start))","user":"54d267e0e4b0e8a36923e5f3"},{"problem":34,"code":"(fn fake-range-v2\n  [begin end]\n  (reverse (into () (loop [idx begin\n        new-seq []]\n      (if (= end idx)\n          new-seq\n          (recur (inc idx) (conj new-seq idx)))))))","user":"5a35d515e4b0ddc586f153e1"},{"problem":34,"code":"(fn[x y](take (- y x)(iterate inc x)))","user":"5826a843e4b051871117befd"},{"problem":34,"code":"(fn [start end]\n  (loop [acc '()\n         curr (dec end)]\n    (if (< curr start)\n      acc\n      (recur (cons curr acc) (dec curr)))))","user":"541df0b5e4b01498b1a71a86"},{"code":"(fn [beginning end]\n  (let [step (if (>= end beginning) 1 -1)]\n    (loop [i beginning acc []]\n      (if (= i end)\n        acc\n        (recur (+ i step) (conj acc i))))))","problem":34,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn [from till]\n  (loop [x from y till ls []]\n    (if (< x y)\n      (recur (inc x) y (conj ls x))\n      ls)))","problem":34,"user":"51026750e4b00c483ae176f7"},{"problem":34,"code":"(fn x [a b] (if (= a b) [] (concat [a] (x (+ a 1) b)) ))","user":"57395f32e4b0cd1946bd1070"},{"code":"(fn [from to] ((fn [x to r] (if (= x to) r (recur (+ x 1) to (conj r x)))) from to [])  )","problem":34,"user":"4eb02674535d7eef30807338"},{"problem":34,"code":"(fn newRange\n  [start end]\n  (loop [start start end end lista ()]\n    (if (= start end)\n        (reverse lista)\n        (recur (+ 1 start) end (cons start lista)))))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [a b]\n  (loop [thelist '()\n         cur (dec b)]\n    (if (>= cur a) (recur (cons cur thelist) (dec cur))\n      thelist)))","problem":34,"user":"5102ef6be4b00c483ae176fc"},{"code":"(fn [left right] (loop [a left b right result [] ]\n                  (if (= a b) \n                    result\n                    (recur (inc a) b (conj result a)))))","problem":34,"user":"4f2aff4de4b0d6649770a044"},{"problem":34,"code":"(fn doon [start end]\n  (loop [start start end end cur start\n         acc '()]\n    (if (< cur end) (recur start end (inc cur) (conj acc cur)) (reverse acc))\n    )\n)","user":"5fdb8657e4b05ac5b16ea133"},{"problem":34,"code":"(fn [s e]\n    (loop [i s acc []]\n        (if (< i e)\n            (recur (inc i) (conj acc i))\n            acc)))","user":"5bc488bde4b07a9b28b10053"},{"problem":34,"code":"(fn f [x y]\n  (if (== y x)\n    '()\n    (cons x (f (inc x) y))))","user":"56eb3f9de4b04a395b9a0420"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (lazy-seq (cons start (my-range (+ start 1) end)))))","user":"6062e1bde4b03746e80ebf75"},{"problem":34,"code":"#(->>(iterate inc %1)(take (- %2 %1)))","user":"57a99d3fe4b0a96607956231"},{"problem":34,"code":"(fn rep [x y] (take (- y x) (iterate inc x)) )","user":"58e5f995e4b056aecfd47ca5"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    '()\n    (lazy-seq (cons start (my-range (inc start) end)))))","user":"6020365ae4b0bf4ca6b10960"},{"code":"(fn rng [x y]\n\t  (cond (= x y) ()\n    \t    :else (cons x (rng (inc x) y))))","problem":34,"user":"52fe3a9de4b047fd55837039"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    nil\n    (concat (list start)\n            (my-range (+ start 1) end))))","user":"59f7f55de4b0ca45a743a313"},{"problem":34,"code":"(fn\n  [from to]\n  (take (- to from) (iterate inc from)))","user":"54f39cd6e4b050824f58f5c6"},{"problem":34,"code":"(fn [a b]\n        (let [range-x (- b a)]\n          (take range-x (iterate inc a))))","user":"5489dd4de4b0e286459a11ef"},{"problem":34,"code":"(fn [start end]\n  (loop [index (dec end) result '()]\n    (if (< index start)\n      result\n      (recur (dec index) (conj result index))\n    )\n  )\n)","user":"54e85a7fe4b024c67c0cf823"},{"problem":34,"code":"(fn [start end] (reduce (fn [coll nxt] (conj coll (-> coll last inc))) [start] (repeat (dec (- end start)) 1)))","user":"5dcfdf23e4b0948ae9d9ad43"},{"problem":34,"code":"(fn [start end] (loop [i start, acc []] (if (= i end) acc (recur (inc i) (conj acc i)))))","user":"5ea8bed8e4b00a66d4a951c2"},{"problem":34,"code":"(fn\n  [min-limit max-limit]\n  (take-while #(< %1 max-limit) ((fn seqn\n                                  [n]\n                                  (lazy-seq (cons n (seqn (inc n)))))\n                                 min-limit)))","user":"566ca8d6e4b0a866af6896bf"},{"problem":34,"code":"(fn [a b]\n    (take (- b a)(iterate inc a)))","user":"5f6580e7e4b02876ed9fd023"},{"code":"(fn [start end] \n  (take-while #(< % end) \n    (iterate (partial + 1) start)))","problem":34,"user":"52cc4fd6e4b07d0d72b27360"},{"code":"#(loop [x [] y %1] (if (< y %2) (recur (conj x y ) (inc y)) (seq x) ))","problem":34,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [st en]\r\n  (for [i (iterate inc st) :while (< i en)] i))","problem":34,"user":"4dd7d040535d2dad7130b5d6"},{"problem":34,"code":"#(let [srt %1\n      cnt (- (- %2 %1) 1)]\n  (reductions + srt (repeat cnt 1))\n  )","user":"57c33eeae4b05aa3c4741cbc"},{"problem":34,"code":"(fn r [from to]\n  (when (< from to)\n    (cons from (r (inc from) to))))","user":"5b073c34e4b0cc2b61a3bda4"},{"code":"(fn f [x y] (when (< x y) (conj (f (+ x 1) y) x)))","problem":34,"user":"53500869e4b084c2834f4ad3"},{"code":"#(loop [lo %1 hi %2 newseq[]]\n  (if (= lo hi) newseq\n    (recur (inc lo) hi (conj newseq lo))))","problem":34,"user":"4ea9b80c535d7eef30807306"},{"problem":34,"code":"; in stappen, loop het aantal keer van (input2 - input1) en verhoog input2 met 1 bij elke stap\n; bij het zoeken naar een optel functie (increment) ook take tegengekomen https://clojuredocs.org/clojure.core/iterate\n; user=> (take 5 (iterate inc 5))\n; (5 6 7 8 9)\n#(take (- %2 %1) (iterate inc %1))","user":"5637bd38e4b0bfe05bf117de"},{"problem":34,"code":"(fn [a b]\n  ((fn [x res]\n     (if (= x b)\n       (sort res)\n       (recur (inc x) (conj res x)))) a '()))","user":"5713c575e4b07c98581c3aab"},{"problem":34,"code":"(fn [x y]\n  (loop [lis [] cnt x]\n    (if (= cnt y) (seq lis)\n      (recur (conj lis cnt) (+ cnt 1)))))","user":"562d869be4b0a45d2ff8301f"},{"code":"; lazy da iterate und take auch lazy sind\n(fn [from to] \n  (take \n    (- to from) \n    (iterate inc from)))","problem":34,"user":"4e131443535d04ed9115e7d3"},{"problem":34,"code":"(fn rng [x y]\n  (loop [start x\n         end (dec y)\n         output '()]\n    (if (= start end)\n      (reverse (conj output start))\n      (recur (inc start) end (conj output start))\n      )\n    )\n  )","user":"53b685e0e4b047364c0444c7"},{"problem":34,"code":"(fn [n m] \n  (for [x (iterate #(inc %) n)\n        :while (< x m)]\n     x))","user":"56c44c34e4b05cc29241ee96"},{"code":"(fn [n m]\r\n  (reverse\r\n   (loop [n n\r\n          r '()]\r\n     (if (>= n m)\r\n       r\r\n       (recur (+ n 1) (conj r n))))))","problem":34,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn [x y]\n  (loop [i x n y L []]\n    (if (= i n) L\n      (if (< i n)\n        (recur (inc i) n (conj L i))\n        (recur (dec i) n (conj L i))))))","problem":34,"user":"4fb069b1e4b081705acca266"},{"problem":34,"code":"(fn [start end]\n  (loop [acc (list start)]\n    (if (= (first acc) (- end 1))\n      (reverse acc)\n      (recur (conj acc (inc (first acc)))))))","user":"53e30fcae4b036ad0777e3fc"},{"code":"(fn [r num] (take-while #(> num %) (iterate inc r)))","problem":34,"user":"4e7e33a3535db169f9c79708"},{"problem":34,"code":";;#(loop [i %1 out []] (if (>= i %2) out (recur (inc i) (conj out i))) )\n(fn [start stop] (take-while #(< %1 stop) (iterate inc start)))","user":"55647a31e4b0c656e3ff1808"},{"problem":34,"code":"(fn [x y] \n  (if (not= x y)\n    (take (- y x) (iterate inc x))))","user":"5ce52271e4b0a17bb84e2b69"},{"problem":34,"code":"(fn [a b]\n  (loop [n a\n         acc []]\n    (cond\n     (= n b) acc\n     :else (recur (inc n) (conj acc n)))))","user":"51c116d4e4b0c9c822882942"},{"code":"#(reverse ((fn rec [a b c] (if (< a b) (rec (inc a) b (cons a c) ) c)) %1 %2 '()))","problem":34,"user":"4f017593535dcb61093f6a36"},{"code":"(fn [start end]\n  (loop [e (dec end)\n         e-coll nil]\n    (if (< e start)\n      e-coll\n      (recur (dec e) (cons e e-coll)))))","problem":34,"user":"5346f409e4b084c2834f4a46"},{"code":"(fn one-more [current aim] (if (= current aim) nil (conj (one-more (+ 1 current) aim) current)))","problem":34,"user":"5133af1de4b0d7a043de8cf2"},{"problem":34,"code":"(fn [left right]\n  (map #(+ left %) (loop [init-range [0]]\n    (if (= (count init-range) (- right left))\n      init-range\n      (recur (conj init-range (inc (last init-range))))))))","user":"5486e317e4b0e286459a11c0"},{"problem":34,"code":"(fn [inf sup] (take (- sup inf) (iterate inc inf)))","user":"595d2041e4b066ee0a44b014"},{"problem":34,"code":"(fn [b e]\n  (let [f (fn s\n            [n]\n            (lazy-seq (cons n (-> n inc s))))]\n    (take (- e b) (f b))\n    ))","user":"54d412e2e4b0a52adc2e1ffe"},{"code":"(fn [l g] \n  (loop [s '(), x l]\n    (if (< x g)\n      (recur (concat s (list x)) (inc x))\n      s\n    )\n  )\n)","problem":34,"user":"4e6df3c9535d5021c1a895fa"},{"problem":34,"code":"(fn [x y]\n  (loop [nextVal x nums '()]\n    (if (= (- y 1) (last nums))\n      nums\n      (recur (inc nextVal) (concat nums [nextVal] )) )))","user":"6040f595e4b0d5df2af2232f"},{"problem":34,"code":"(fn r [s e] (if (= s e) () (conj (r (inc s) e) s)))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn [x y] \n    (take (- y x) (iterate #(inc %) x)))","problem":34,"user":"4eb955da535dfed6da9c6d50"},{"problem":34,"code":"(fn r [f u] (if (< f u) (cons f (r (inc f) u))))","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"(fn my-range\n     ([start end] (my-range start end [])) \n     ([start end list] \n      (if (== start end)\n        list\n        (my-range (+ 1 start) end (conj list start)))))","problem":34,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":34,"code":"(fn [col a b] (if (< a b) (recur (conj col a) (+ a 1) b) (reverse col))) '()","user":"56d6c18ee4b0ea9b8538f7d1"},{"code":"(fn my-range [b e]\n  (loop [cnt (- e b) coll (list b)]\n    (if \n      (<= cnt 1)\n      coll \n      (recur (dec cnt) (concat coll (list (inc (last coll))))))))","problem":34,"user":"4faafccde4b081705acca209"},{"problem":34,"code":"(fn f1 [start end]\n\t(take (- end start) (iterate inc start))\n\t\t)","user":"54ff6084e4b07d26eda61d50"},{"problem":34,"code":"(fn\n  [a b]\n  (loop\n    [x a\n     lst []]\n  (if (= b x) \n    lst\n    (recur (inc x) (conj lst x)))))","user":"51b01309e4b0c53cf2e68a57"},{"problem":34,"code":"(fn l [a b]\n  (if (= a b) '()\n    (cons a (l (inc a) b))))","user":"54df2609e4b024c67c0cf7a9"},{"problem":34,"code":"#(take(-%2 %1)(iterate inc %1))","user":"5b6962c1e4b0c6492753e787"},{"problem":34,"code":"(fn rng [strt end] (loop [idx (dec end)\n                          res '()]\n                     (if (< idx strt)\n                       res\n                       (recur (dec idx) (conj res idx)))))","user":"55e59b67e4b050e68259b46f"},{"code":"(fn [low high] (take (- high low) (iterate inc low)))","problem":34,"user":"51131da8e4b0350614f07a83"},{"code":"(fn [inicio final]\n    (letfn [\n            (rango [final contador lista]\n                     (\n                      if  (= contador final)\n                          (reverse lista)\n                          (rango final (inc contador) (conj lista contador))\n                       )\n              )\n           ]\n           (rango final inicio '())\n      )\n  )","problem":34,"user":"5058afbbe4b06522596eba81"},{"problem":34,"code":"(fn [start end]\n  (loop [next start\n         outy ()]\n    (if (= next end)\n      outy\n      (recur (inc next)\n             (concat outy (list next))))))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"(fn [n m]\n  (loop [m (dec m) acc '()]\n    (if (= n m) (conj acc m)\n        (recur (dec m) (conj acc m)))))","problem":34,"user":"4e5ecd65535d8a8b8723a2d6"},{"code":"(fn [i n]\n  (take (- n i) (iterate inc i)))","problem":34,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn [lower upper]\n  (loop [current lower out []]\n    (if (= current upper)\n      out\n      (recur (inc current) (conj out current)))))","problem":34,"user":"4ed19e90535d44c135fd68d0"},{"problem":34,"code":"#(take (- %2 %1)(iterate inc %))","user":"54e19a26e4b024c67c0cf7c6"},{"problem":34,"code":"(fn [x y] \n  (loop [set1 '() x1 x]\n    (if (= x1 y) \n      (reverse set1)\n      (recur (conj set1 x1) (inc x1)))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn [x y]\r\n(let [left x right y num (- right left)] (take num (iterate #(inc %) left))))","problem":34,"user":"4f00c74f535dcb61093f6a31"},{"code":"(fn [start end]\n  (loop [res '() s start]\n    (if (= s end)\n      (reverse res)\n      (recur (cons s res) (inc s)))))","problem":34,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn my-range [a b]\n  (loop [x a result []]\n    (if (= x b)\n      result\n      (recur (inc x) (conj result x)))))","problem":34,"user":"4e95a440535dbda64a6f6b37"},{"problem":34,"code":"#(loop [s %1\n        e %2\n        l []]\n   (if (= s e)\n     l\n     (recur (inc s) e (conj l s))))","user":"5801eed1e4b0a837a8b30c63"},{"code":"(fn [x y]\n  (take-while #(< % y)\n              (iterate inc x)))","problem":34,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn [s n] (take (- n s) (iterate inc s)))","problem":34,"user":"51e1c176e4b06a68e693eafb"},{"problem":34,"code":"(fn [x y] (reductions (fn [acc _] (+ acc 1)) (repeat (- y x) x)))","user":"504f9ae1e4b0a02f9cffde9c"},{"code":"(fn rang [a b]\n  (if (= a b)\n    ()\n    (cons a (rang (+ a 1) b))))","problem":34,"user":"509f3bc9e4b08df8156e9e39"},{"problem":34,"code":"(fn given-range [x y]\n  (take (- y x) (iterate inc x)))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn [from to]\n  (loop [i from r []]\n    (if (>= i to)\n      r\n      (recur (inc i) (conj r i)))))","problem":34,"user":"51583ee4e4b0a069fd272c72"},{"code":"(fn my-range [a b]\n  (take-while #(< % b) (iterate inc a)))","problem":34,"user":"4f0660ee535dcb61093f6c0d"},{"code":"(fn [a b]\n  (loop [r [] cur a]\n    (if (= cur b)\n      r\n      (recur (conj r cur) (inc cur)))))","problem":34,"user":"5097b556e4b00ad8bab4e970"},{"problem":34,"code":"(fn [start end]\n   (loop [s start\n          c (cons start '())]\n     (if (< s (dec end))\n       (recur (inc s) (cons (inc s) c))\n       (reverse c))))","user":"5d41de31e4b05dd059a54379"},{"problem":34,"code":"(fn [startnum endnum] (take (- endnum startnum) (iterate inc startnum)))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn range1\n  ([] (range1 0 Double/POSITIVE_INFINITY 1))\n  ([end] (range1 0 end 1))\n  ([start end] (range1 start end 1))\n  ([start end step]\n   (lazy-seq\n    (let [b (chunk-buffer 32)\n          comp (if (pos? step) < >)]\n      (loop [i start]\n        (if (and (< (count b) 32)\n                 (comp i end))\n          (do\n            (chunk-append b i)\n            (recur (+ i step)))\n          (chunk-cons (chunk b) \n                      (when (comp i end) \n                        (range1 i end step)))))))))","problem":34,"user":"50ab44b2e4b0f65d68208509"},{"problem":34,"code":"(fn [start end]\n  (loop [c start\n         r []]\n    (if (>= c end)\n      r\n      (recur (inc c) (conj r c))\n    )))","user":"574e7be7e4b02ea114799242"},{"code":"(fn f [n m]\n  (if (< n m)\n    (conj (f (inc n) m) n)\n    ()\n  )\n  )","problem":34,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn r [s e] (if (= s (dec e)) (vec [(dec e)]) (cons s (r (inc s) e))))","problem":34,"user":"52d66152e4b09f7907dd1357"},{"problem":34,"code":"#(take-while (fn [p] (< p %2)) (iterate inc %1))","user":"55496eeae4b0a04f79299569"},{"problem":34,"code":"(fn [x y] (map-indexed #(+ % %2) (repeat (- y x) x)))","user":"6078ce29e4b0a637ed78035a"},{"problem":34,"code":"(fn [left right] (take (- right left) (iterate inc left)))","user":"5c50154be4b0f9f7a8770ebc"},{"problem":34,"code":"(fn [startLimit stopLimit] (take (- stopLimit startLimit) (iterate inc startLimit)))","user":"5a6170fde4b0512ff01cd975"},{"code":"(fn[x y](take (- y x) (iterate inc x)))","problem":34,"user":"529952a4e4b02ebb4ef75081"},{"problem":34,"code":"(fn bla\n  ([start finish] (bla start finish []))\n  ([start finish acc]\n     (if (= start finish)\n         acc\n         (bla (inc start) finish (conj acc start)))))","user":"59f90e6ae4b0ca45a743a337"},{"problem":34,"code":"(fn [x y]\n  (loop [x (conj '() x)]\n    (let [next (+ (first x) 1)]\n      (if (= next y)\n        (reverse x)\n        (recur (conj x next))))))","user":"58a216e8e4b02bd94d917ed1"},{"problem":34,"code":"(fn [a,b] \n\t(loop [i a end b res []]\n\t\t(if (< i b)\n\t\t  (recur (inc i) end (conj res i))\n\t\t  res)))","user":"583c4482e4b089d5ab817d7e"},{"problem":34,"code":"#(loop [result [%]]\n   (if (= (last result) (- %2 1))\n     (seq result)\n     (recur (conj result (inc (last result))))))","user":"571077e8e4b09c608db70434"},{"problem":34,"code":"(fn [begin end]\n  (take (- end begin) (iterate #(inc %) begin)))","user":"587c77afe4b01531a375eb1b"},{"problem":34,"code":"#(loop [acc [] begin %1 end %2]\n   (if (>= begin end) acc\n     (recur (conj acc begin) (inc begin) end)))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":34,"code":"(fn rng[a b]\n  (let  [diff (- b a)]\n    (map\n      +\n      (repeat diff (- a 1))\n      (reductions + (repeat diff 1)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":34,"code":"(fn [start stop] (loop [res [] val start] (if (= val stop) res (recur (conj res val) (inc val)))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":34,"code":"(fn s [i limit]\n    (when (< i limit)\n      (cons i (s (inc i) limit))))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":34,"code":"(fn ranger [x y]\n                     (reverse\n                      (loop [l (list x)]\n                        (if (< (first l) y)\n                          (recur (conj l (inc (first l))))\n                          (rest l)))))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":34,"code":"(fn f\n  ([x y li]\n   (if (< x y) (f (inc x) y (conj li x)) li))\n  ([x y] (f x y [])))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":34,"code":"(fn [low high]\n  (loop [low low, ret []]\n    \n    (if (>= low high)\n      ret\n      (recur (inc low) (conj ret low)))))","user":"57297fb2e4b0c6e51e0d2b1c"},{"problem":34,"code":"(fn [x y] (take (- y x) ((fn rang [z]\n (lazy-seq (cons z (rang (inc z))))) x)))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":34,"code":"(fn getrange [initial-start initial-end]\n  (loop [xs ()\n         start initial-start\n         end initial-end]\n    (if (= start end)\n        xs\n        (recur (cons (dec end) xs) start (dec end)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"#(loop [x %, c []]\n   (if (< x %2)\n     (recur (inc x)\n            (conj c x))\n     c))","problem":34,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn ran [a b]\n  (loop [start a o () ]\n    (if (= start b)\n      (reverse o)\n      (recur (inc start) ( conj o start  ) ) )))","problem":34,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn [a b] (take (- b a) ((fn f [a b] (lazy-seq (cons a (f (inc a) b)))) a b)))","problem":34,"user":"52097551e4b0e152394d76f3"},{"problem":34,"code":"(fn my-range [s f]\n  (if (<= f s) '()\n    (cons s (my-range (inc s) f))))","user":"54e6762be4b024c67c0cf809"},{"problem":34,"code":"(fn myrange [start stop]\n  (loop [acc []\n         x start]\n    (if (= x stop)\n      acc\n      (recur (conj acc x) (inc x)))))","user":"5da4fc6be4b000c986472bff"},{"problem":34,"code":"(fn [a b]\n  (loop [cur a\n         res '()]\n    (if (= cur b)\n      (reverse res)\n      (recur (inc cur) (conj res cur)))))","user":"5be9ad9be4b0f319e2d7ec76"},{"code":"(fn [a b]\n  (loop [result '() x b]\n    (if (= x a)\n      result\n      (recur (conj result (dec x)) (dec x)))))","problem":34,"user":"517d1018e4b0f5e87c18f25e"},{"code":"(fn rang [x y]  (take (- y x) (iterate inc x)) )","problem":34,"user":"5245d29ae4b09dbe66b56174"},{"problem":34,"code":"#(take  (- %2 %1) (iterate inc %))","user":"56d05ba2e4b0ea9b8538f77d"},{"problem":34,"code":"(fn [bg ed]\n            (loop [i bg n ed res []]\n              (if (< i n)\n                (recur (inc i) n (conj res i))\n                (seq res))))","user":"56669819e4b0e91d5f5c5674"},{"problem":34,"code":"(fn rangex [a b]\n  (if (= a b)\n    (list)\n    (conj (rangex (inc a) b) a)\n    )\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"code":"#(loop [i % res []] (if (< i %2)\n  (recur (inc i) (conj res i)) res))","problem":34,"user":"4ebf45c3535dfed6da9c6d9d"},{"code":"(fn r [start end]\n  (if (< start end) (lazy-seq (cons start (r (inc start) end)))))","problem":34,"user":"4f25fc7ee4b0d66497709ffe"},{"problem":34,"code":"(fn ra [a b]\n  (if (= a b)\n    []\n    (conj (ra a (dec b)) (dec b))))","user":"56327168e4b0bfe05bf117a5"},{"code":"(fn rng [a b]\n  (if (>= a b)\n    ()\n    (cons a (rng (inc a) b))))","problem":34,"user":"4e8c1d97535d65386fec2127"},{"code":"#(take (Math/abs (- %2 %1)) ((fn _range [x]\n        (cons x (lazy-seq (_range (inc x))))) %1))","problem":34,"user":"5256c4c1e4b0541d1855ba36"},{"problem":34,"code":"(fn [s e]\n  (loop [acc () c (dec e)]\n    (if (= (dec s) c)\n      acc\n      (recur (cons c acc) (dec c))\n    )\n  )\n)","user":"5720fc08e4b0c5bde472c0a3"},{"problem":34,"code":"(fn rng [a b] (if (< a b) (cons a (rng (inc a) b)) nil))","user":"54995298e4b0b312c081ff8b"},{"problem":34,"code":"(fn rangex [ start end ]\n  \t\t\t\t  (if (< start end)\n   \t\t\t\t   (cons start (lazy-seq (rangex (inc start) end)))))","user":"5610d39de4b05f002753df75"},{"code":"(fn [s e]\n    (loop [lst '() n (dec e)]\n      (if (< n s)\n        lst\n        (recur\n          (conj lst n)\n          (dec n)\n        )\n      )\n    )\n  )","problem":34,"user":"533b36c0e4b0e30313ee6ccb"},{"code":"(fn [from to]\n  (loop [s [from]]\n    (if (= (last s) (dec to))\n        (seq s)\n        (recur(conj s (inc (last s)))))))","problem":34,"user":"5188c487e4b0bdff0e072d55"},{"problem":34,"code":"(fn f\n  ([lo hi] (f lo hi []))\n  ([lo hi accum]\n   (if (>= lo hi)\n     accum\n     (recur (inc lo) hi (conj accum lo)))))","user":"58b06b7ce4b0ebc645576cdc"},{"problem":34,"code":"(fn my-range [start stop]\n  (if (< start stop)\n    (cons start (lazy-seq (my-range (inc start) stop)))))","user":"5eecd339e4b07c55ae4a0507"},{"code":"(fn [start end] \n      (loop [s start e end acc '()]\n        (if (= s e)\n          (reverse acc)\n          (recur (inc s) e (cons s acc)))))","problem":34,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn _range [start stop]\n  (if (= start stop)\n    '()\n    (cons start (_range (+ 1 start) stop))))","problem":34,"user":"510cd1dde4b078ea71921124"},{"problem":34,"code":"#(loop [x %1\n       y %2\n       result nil]\n  (if (>= x y)\n    result\n    (recur x (dec y) (conj result (dec y)))))","user":"561a4769e4b053970a773b05"},{"problem":34,"code":"(fn my-range [start end]\n (loop [n start\n        v []]\n   (if (< n end)\n     (recur (inc n)\n            (conj v n))\n     v)))","user":"587ca6cce4b01531a375eb22"},{"code":"(fn [first last] (\n  take (- last first) (iterate inc first)))","problem":34,"user":"528e1f30e4b0239c8a67aed4"},{"problem":34,"code":"(fn\n  [first last]\n  (loop [current (list first)\n         new (+ 1 first)]\n    (if (= new last)\n      (reverse current)\n      (recur (into current (list new)) (+ new 1)))))","user":"57b6cc7ce4b0fbc9809a27c4"},{"problem":34,"code":"(fn ran [l x maxX] (if (< x maxX)\n                   (ran (conj l x) (inc x) maxX)\n                   l)) []","user":"559e25fde4b08a52bd4f97d0"},{"code":"(fn [from to]\n  (loop [f from t to retVal []]\n    (if (= f t) \n      retVal \n      (recur (inc f) t (conj retVal f)))))","problem":34,"user":"4f849f76e4b033992c121c36"},{"code":"#(loop [x %1 r []] (if (<  x %2 ) (recur (inc x) (conj r x)) r))","problem":34,"user":"4e5a3891535d8a8b8723a2aa"},{"problem":34,"code":"(fn [b e]\n  (loop [begin b end e acc []]\n    (if (= begin end)\n      acc\n      (recur (+ begin 1) end (conj acc begin)))))","user":"501b1efee4b0b12d9c5f4d82"},{"problem":34,"code":"#(map-indexed (fn [i _] (+ i %1)) (vec (replicate (- %2 %1) 0)))","user":"5b03063de4b0cc2b61a3bd5b"},{"code":"#(flatten (loop [r () s %1] (if (= s %2) r (recur (conj (list s) r) (inc s)))))","problem":34,"user":"5192ce1de4b0024e2d75f7d2"},{"code":"(fn myrange [low high] (if (= low (- high 1)) (list low) (concat (list low) (myrange (+ low 1) high))))","problem":34,"user":"4e836a16535db62dc21a62d6"},{"code":"(fn my-range [start end]\n  (if (< start end)\n    (cons start (my-range (inc start) end))\n    nil))","problem":34,"user":"51b24defe4b02f8f128bb963"},{"problem":34,"code":"(fn [x y]\n  (take (- y x) (iterate inc x)))\n  \n  \n  ;;(conj (list x) (inc x))","user":"5ac6f7f7e4b0e27600da777a"},{"problem":34,"code":"(fn tits [start end] (cond\n  (= start end) []\n  :else (concat [start] (tits (+ start 1) end))\n                      ))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn rng [first last]\n  (cond\n   (= first last) '()\n   :else (cons first (rng (inc first) last))\n   )\n  )","problem":34,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn myrange [i j]\n  (if (= i j)\n    '()\n    (cons i (lazy-seq (myrange (inc i) j)))))","problem":34,"user":"4f215350e4b0d66497709fd0"},{"problem":34,"code":"(fn [a b]\n                    (loop [lst '()\n                           i (dec b)]\n                      (if (< i a) lst (recur (conj lst i) (dec i)))))","user":"5935b010e4b04f87174def55"},{"code":"(fn [x y] \n  (loop [col [x] end x] \n        (if (= end (dec y))\n            col\n            (recur (conj col (+ end 1) )  (inc end) ))))","problem":34,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":34,"code":"#(loop [x1 %1 x2 %2 idx %1 result []] (if (and (>= idx x1) (< idx x2)) (recur x1 x2 (inc idx) (conj result idx)) result))","user":"5db68091e4b010eb3c36cd3a"},{"code":"(fn [x y] (loop [ret '[] current x] (if (= current y) ret (recur (conj ret current) (inc current)))))","problem":34,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":34,"code":"(fn grange \n  [a b]\n  (loop [a a b b res []]\n    (if (< a b)\n      (recur (inc a) b (conj res a))\n      res)\n    ))","user":"54070647e4b0addc1aec66b2"},{"problem":34,"code":"(fn r [l h] (if (= l h) nil (cons l (r (+ l 1) h))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [from to]\n(take (- to from)\n      (iterate inc from)))","problem":34,"user":"4ec57e4a535d6d7199dd36a4"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %) )","user":"5b227f5ae4b03cfeda66ed63"},{"problem":34,"code":"(fn [start limit]\n  (take-while (partial > limit) (iterate inc start)))","user":"5f665d45e4b02876ed9fd02f"},{"problem":34,"code":"#(loop [a %1\n        b %2\n        c nil]\n   (if (= 0 (- b a))\n     (reverse c)\n     (recur (inc a) b (conj c a))))\n\n;#(take (- %2 %1) (iterate inc %))","user":"545cfbb0e4b01be26fd74669"},{"code":"(fn newrange [m n]\n     \"Creates a vector of integers from m to n, including m, excluding n.\"\n     (loop [counter m, result []]\n       (if (< counter n)\n         (recur (inc counter) (conj result counter))\n         result)))","problem":34,"user":"532727bae4b09d4e7a9b54fa"},{"problem":34,"code":"(fn [mn mx]\n  (letfn [(aux [n] (if (>= n mx)\n                     nil\n                     (cons n (aux (inc n)))))]\n               (aux mn)))","user":"57f7c74ee4b0d3187e900902"},{"code":"(fn [lo hi] (let [n (- hi lo) ns (iterate inc lo)] (->> ns (take n))))","problem":34,"user":"4f724e56e4b07046d9f4f027"},{"problem":34,"code":"(fn myRange [a b]\n  (if (< a b) (cons a (lazy-seq (myRange (inc a) b)))))","user":"56195e57e4b053970a773af6"},{"problem":34,"code":"(fn [start end]\n  (loop [i (dec end) sofar '()]\n    (if (< i start)\n      sofar\n      (recur (dec i) (cons i sofar)))))","user":"57afd36de4b0fbc9809a273c"},{"problem":34,"code":"(fn myrange\n\t[start end]\n\t(loop\n\t\t[cnt (- (dec end) start) mynext (dec end) res nil]\n\t\t(if (= cnt 0)\n\t\t\t(cons  start res)\n\t\t\t(recur (dec cnt) (dec mynext) (cons mynext res))\n\t\t\t)))","user":"55897fe2e4b059ccff29b205"},{"problem":34,"code":"(fn [incl excl]\n   (loop [resu '()\n          right excl]\n     (if (>= incl right)\n       resu\n       (recur (conj resu (dec right)) (dec right)))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":34,"code":"(fn my-range                        \n  [a b]                             \n  (cons a                             \n  (if (> b (inc a))                   \n    (my-range (inc a) b)              \n    ())))","user":"58840023e4b0f1effa3b768b"},{"problem":34,"code":"(fn fuck-me ([start end] (fuck-me (inc start) end [start]))\n            ([current end acc] \n             (if (>= current end)\n               (seq acc)\n               (recur (inc current) end (conj acc current)))))","user":"5655e056e4b0f9d632dd849b"},{"code":"(fn [s e]\n  (loop [result []\n         value s\n         cnt (- e s)]\n    (if (< cnt 2)\n      (conj result value)\n      (recur (conj result value) (inc value) (dec cnt)))))","problem":34,"user":"512474ede4b02c3f2a072cce"},{"problem":34,"code":"#(loop [beg %1 end %2 res '()]\n          (if (= beg end)\n            (reverse res)\n            (recur (inc beg) end (cons beg res))))","user":"58731176e4b01531a375ea2a"},{"code":"(fn [min max] (loop [cur min \n                     result ()]\n                (if (>= cur max)\n                  (reverse result)\n                  (recur (inc cur) (cons cur result)))))","problem":34,"user":"4f528bcde4b03ad3f0c10d3e"},{"code":"(fn ra [l h]\n  (if (= l h)\n()\n(conj (ra (+ l 1) h) l)\n))","problem":34,"user":"4fcebce4e4b03432b189f404"},{"problem":34,"code":"(fn f [l h]\n  (loop [x (inc l)\n         result [l]]\n    (if (= x h)\n      result\n      (recur (inc x) (conj result x)))))","user":"5ac67b47e4b0e27600da776e"},{"problem":34,"code":"#(take (- %2 %1)\n         ((fn gen-range [n]\n            (lazy-cat [n (inc n)]\n                      (map inc (rest (gen-range n)))))\n          %1))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":34,"code":"(fn [s c] \n  (take (- c s) (iterate inc s)))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":34,"code":"(fn [a b] \n  (->> (iterate inc a)\n       (take (- b a))))","user":"4db1b3951254ad5b4805fa6f"},{"problem":34,"code":"(fn [i l] (take (- l i) (iterate inc i)))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn implrange[s f](take (- f s) ((fn integers [a] (cons a (lazy-seq (integers (+ 1 a))))) s)))","problem":34,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":34,"code":"(fn [start end] (lazy-seq (take (- end start) (iterate #(+ 1 %) start))))","user":"542c2de0e4b0dad94371f29f"},{"problem":34,"code":"(fn [begin end]\n    (take (- end begin) (iterate inc begin)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn [x y] (loop [i x result [] ] (if\n                                  (= (count result) (- y x)) result\n                                  (recur  (+ i 1) (conj result i))) ))","problem":34,"user":"519e70d5e4b0acf32bc6a42c"},{"problem":34,"code":"(fn my-range [s e]\n  (lazy-seq\n   (if (< s e)\n     (cons s (my-range (inc s) e))\n     ())))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":34,"code":"(fn my-range [init term]\n  (if (= init term)\n    []\n    (cons init (my-range (inc init) term))))","user":"5b47874be4b02d533a91bc70"},{"problem":34,"code":"(fn [m M]\n  (take (- M m) (iterate inc m))\n  )","user":"589f37e0e4b02bd94d917e79"},{"problem":34,"code":"(fn my-range [s e] (loop [s s e e col []]\n (if (= s e) col (recur (inc s) e (conj col s ) )) ))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":34,"code":"(fn [a b]\n  (loop [l '() i a](if (= i b) (reverse l) \n                     (recur (conj l i) (inc i)  )  \n                    )\n  )\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":34,"code":"(fn my-range\n  ([end]\n   (my-range 1 end))\n  ([start end]\n   (when (< start end)\n     (lazy-seq (cons start (my-range (inc' start) end))))))","user":"5619b22ee4b053970a773afe"},{"code":"(fn myrange [start end]\r\n       (if (= start end)\r\n         (list)\r\n           (cons start\r\n                 (myrange (inc start) end))))","problem":34,"user":"4e7dfd48535db169f9c796fa"},{"code":"(fn my-range [s e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"50651de3e4b0b1b6c8b1d85f"},{"code":"(fn f [s e]\n  (if (= s e)\n    nil\n    (cons s (f (+ s 1) e))))","problem":34,"user":"4fc52278e4b081705acca37c"},{"code":"(fn [from to] (loop [xs '() i (- to 1)] (if (< i from) xs (recur (cons i xs) (- i 1)))))","problem":34,"user":"4ef8d47c535dced4c769f261"},{"problem":34,"code":"(fn my-range [low high]\n  (loop [c low, acc []]\n    (if (= c high)\n      acc\n      (recur (inc c) (conj acc c)))))","user":"5812eb8fe4b0f478707a0602"},{"problem":34,"code":"(fn [start end]\n  (loop [res-range []\n         curr start]\n    (if (= curr (dec end))\n      (conj res-range curr)\n      (recur (conj res-range curr)\n             (inc curr))) ))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn [from to]\n  (loop [frm from rng []]\n    (if (= frm to)\n      rng\n      (recur (inc frm) (conj rng frm)))))","problem":34,"user":"5079fd71e4b08327cd804a66"},{"code":"(fn rnge [l h] (cond (= l h) []\n                     :else (cons l (rnge (+ l 1) h))))","problem":34,"user":"50dfb660e4b061dbdced7228"},{"problem":34,"code":"(fn [min max]\n  (take\n    (- max min)\n    (iterate inc min)))","user":"5b99554ae4b0c0b3ffbd4ace"},{"problem":34,"code":"(fn eee [from to]\n  (if (>= from to) []\n    (cons from (eee (inc from) to)\n    )\n  )\n  \n  \n)","user":"55b3e8aee4b01b9910ae2977"},{"code":"(fn [s e]\n  (take (- e s) (iterate (partial + 1) s)))","problem":34,"user":"4f8592e6e4b033992c121c47"},{"problem":34,"code":"(fn foo [begin, end]\n    (loop [i (dec end), result '()]\n      (if (< i begin)\n        result\n        (recur (dec i) (conj result i)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":34,"code":"(fn [n m] (take (- m n)(iterate inc n)))","user":"57f3b841e4b0511f1d294e0f"},{"problem":34,"code":"(fn [a b]\n  (loop [r '[]\n         a a\n         b b]\n    (if (= a b) r\n    \t(recur (conj r a) (inc a) b))))","user":"56372798e4b0bfe05bf117d0"},{"problem":34,"code":"(fn ran [next end]\n  (if (< next end)\n    (cons next (ran (inc next) end))\n    '()))","user":"56557d2de4b0f9d632dd8498"},{"problem":34,"code":"(fn [l r]\n  (loop [rng [l] x (inc l)]\n    (if (= x r) rng\n      (recur (conj rng x) (inc x)))))","user":"552a793ee4b0ffed3738f955"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n    '()\n    (cons start (my-range (+ 1 start) end))))","user":"5ec0de29e4b00a66d4a9528e"},{"code":"(fn [start end] \n  (take-while #(< % end) \n              (iterate inc start)))","problem":34,"user":"4fb01e53e4b081705acca260"},{"problem":34,"code":"(fn [f t]\n  (loop [from f, to t, res []]\n    (if (= from to)\n      res\n      (recur (inc from) to (conj res from)))))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":34,"code":"#_#(loop [n %1\n         result (list)]\n    (if (>= n %2)\n      (reverse result)\n      (recur (inc n) (cons n result))))\n#(take (- %2 %1) (iterate inc %1))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":34,"code":"(fn [lower upper] \n  (letfn [(my-lazy-seq-range [start] \n                 (lazy-seq (cons start (my-lazy-seq-range (inc start)))))] \n    (take (- upper lower) (my-lazy-seq-range lower))\n    ))","user":"53f35c34e4b0742d9025b0f4"},{"code":"(fn [start end]\n  (loop [result '()\n         curnum end]\n    (if (= curnum start) result\n      (recur (cons (dec curnum) result)\n        (dec curnum)))))","problem":34,"user":"4e4bf20e535dc968683fc4d9"},{"problem":34,"code":"#(loop [i %\n        acc (vector)]\n   (if (< i %2)\n     (recur (inc i) (conj acc i))\n     acc))","user":"5a8aa992e4b05369db4d24d8"},{"code":"(fn [t f] (for [x (iterate inc t) :while (< x f)] x))","problem":34,"user":"5073de20e4b054001656acca"},{"code":"(fn my-range \n  ([start, end] (my-range start end []))\n  ([cur, end, res]\n    (if (= cur end)\n      res\n      (my-range (inc cur) end (conj res cur))\n      ))\n  )","problem":34,"user":"4f21838fe4b0d66497709fd2"},{"problem":34,"code":"(fn my-range [a b]\n  \n  (if (= a b) \n    '() \n    \n    (conj (my-range (inc a) b) a)\n  )\n)","user":"5b3189e5e4b025bcb146f308"},{"code":"(fn f [c x y] \n   (if (< x y) \n     (f (conj c x) (+ x 1) y)\n     (reverse c)))\n()","problem":34,"user":"524e6b68e4b0541d1855b7db"},{"code":"(fn foobar [start end]\n  (if (= start end)\n    '()\n    (cons start (foobar (inc start) end))))","problem":34,"user":"4ef4c1ff535dced4c769f23e"},{"problem":34,"code":"#(loop [start %1 end %2 c []] (if (= start end) c (recur (+ start 1) end (conj c start))))","user":"55f7dc24e4b06e875b46ceb3"},{"problem":34,"code":"(fn ranger [m n]\n  (loop [m m n n out '()]\n    (if (= m n)\n      (reverse out)\n      (recur (+ 1 m) n (cons m out)))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [start end]\n  (loop [e1 start lisst []]\n    (if-not (= e1 end)\n      (recur (inc e1) (conj lisst e1))\n      (list* lisst)\n      )\n    )\n  )","problem":34,"user":"52c42bc2e4b0c2d177d620d0"},{"problem":34,"code":"(fn dup [a b]\n  (cond (== a b) []\n   :else (cons a (dup (inc a) b))\n  )\n  )","user":"60228147e4b0d5df2af22202"},{"code":"(fn [x y] \n  (take (- y x) \n(iterate (partial + 1) x)))","problem":34,"user":"4f00e9c7535dcb61093f6a33"},{"problem":34,"code":"(fn [s e]\n  (loop [start s\n         coll []]\n    (if (= start e)\n      coll\n      (recur (inc start)\n             (conj coll start)))))","user":"543f1765e4b032a45b86935a"},{"code":"(fn [start end]\n  (loop [i start\n         result '()]\n    (if (= i end)\n      (reverse result)\n      (recur (inc i) \n             \t(conj result i)))))","problem":34,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":34,"code":"(fn [b e]\n   (loop [wb b rs []]\n     (if (>= wb e)\n       rs\n       (recur (inc wb) (conj rs wb)))))","user":"4fffa422e4b0678c553fc404"},{"problem":34,"code":";(fn [a b] (for [x (iterate #(inc %) a)\n;                :while (< x b)]\n;            x))\n#(take (- %2 %) (iterate inc %))","user":"54d1cf2ee4b0e8a36923e5eb"},{"code":"#( take (- %2 %)(iterate inc %) )","problem":34,"user":"5360e12ce4b0243289761e3a"},{"problem":34,"code":"#(loop [acc []\n        i   %1]\n   (if (= i %2)\n     acc\n     (recur (conj acc i) (inc i))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":34,"code":"#(loop [r () i %2] (if (= i %) r (recur (conj r (dec i)) (dec i))))","user":"52541fe6e4b0541d1855b964"},{"problem":34,"code":"#(loop [i %1 result []] (if (>= i %2) result (recur (inc i)(conj result i))))","user":"55e5c852e4b050e68259b474"},{"problem":34,"code":"(fn [start end]\n  (loop [i start acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i)) acc)))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":34,"code":"(fn [start end]\n      (loop [ranges [] n start]\n            (let [r ranges x n]\n            (if (=(- end n) 1)\n                (conj r n) \n                (recur (conj r n) (inc n))))))","user":"58d3d6a3e4b03c36ff7e592b"},{"problem":34,"code":"#(loop [i (- %2 1) res `()] (if(> i (- %1 1)) (recur (dec i) (conj res i)) res))","user":"5971763fe4b01722bebd4c72"},{"problem":34,"code":"( fn([f t] (take (- t f) (iterate inc f))))","user":"56c85700e4b0ed865f9758d0"},{"code":"(fn [from to] \n  (loop [c [] i from]\n    (if (= i to)\n        c\n        (recur (conj c i) (inc i)))))","problem":34,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [n x] (loop [a n, r nil]\n  (if (>= a x)\n      r\n      (recur (inc a) (concat r (list a))))))","problem":34,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":34,"code":"(fn [s0 s1]\n  (take (- s1 s0) (iterate inc s0)))","user":"5a624129e4b0512ff01cd987"},{"problem":34,"code":"(fn range'\n  [start end-minus-1]\n  (if (< start end-minus-1)\n    (cons start (lazy-seq (range' (inc start) end-minus-1)))))","user":"4f0366b0535dcb61093f6aa9"},{"problem":34,"code":"(fn [start end]\n  (loop [initial (dec start) res []]\n    (if (< initial (dec end))\n      (recur (inc initial) (conj res (inc initial)))\n      res\n      )\n    )\n  )","user":"5a47ce68e4b05d388ecb6b5d"},{"problem":34,"code":"(fn [fr to]\n  (loop [n fr xs []]\n    (if (= to n)\n      xs\n      (recur (inc n) (conj xs n)))))","user":"57f85b36e4b0d3187e900924"},{"code":"#(loop [v [] x %1]\n  (if (= x %2) v (recur (conj v x) (inc x))))","problem":34,"user":"4f06dcad535dcb61093f6c16"},{"problem":34,"code":"(fn [first last]\n  (loop [ix first lst []]\n    (if (= ix last)  lst\n      (recur (inc ix) (conj lst ix)))))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":34,"code":"(fn my-range [x y] (if (< x y) (cons x (my-range (inc x) y))))","user":"559647ebe4b0c79f6e1db977"},{"code":"(fn r [start end]\n  (if (not (< start end))\n    '()\n    (cons start (r (inc start) end))))","problem":34,"user":"4e84f77c535db62dc21a62e5"},{"problem":34,"code":"(fn [start end]\n  (loop [l [start]]\n    (if (>= (inc (last l)) end)\n      l\n      (recur (conj l (inc (last l)))))))","user":"5ea444b7e4b00a66d4a951a0"},{"problem":34,"code":"(fn [start end] \n  (loop [i start s []]\n    (if (>= i end)\n      (seq s)\n      (recur (inc i) (conj s i))\n      )\n    )\n  )","user":"58e0a760e4b005f69f193c69"},{"problem":34,"code":"(fn newrange [a b] \n  (loop [coll [a]]\n\t(if (= (inc (last coll)) b) \n\t\tcoll\n\t\t(recur (concat coll [(inc (last coll))])))))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [x y]\n  (loop [ini x fim y lista []]\n   (if (= ini fim)\n    lista\n    (recur (inc ini) fim (conj lista ini))\n  )\n )\n)","problem":34,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn [start end]\n  (loop [l '() i (dec end)]\n  (if (< i start)\n    l\n    (recur (conj l i) (dec i)))))","problem":34,"user":"4e5f034b535d8a8b8723a2d9"},{"code":"#(take-while (partial > %2) (iterate inc %))\n;; below will work, but is inelegant!\n;(fn ran [start end]\n;  (let [b (chunk-buffer 32)\n;          comp (if (pos? 1) < >)]\n;      (loop [i start]\n;        (if (and (< (count b) 32)\n;                 (comp i end))\n;          (do\n;            (chunk-append b i)\n;            (recur (+ i 1)))\n;          (chunk-cons (chunk b) \n;                      (when (comp i end) \n;                        (ran i end)))))))","problem":34,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":34,"code":"(fn r [s m]\n  (if (<= m s) '()\n    (conj (r (inc s) m) s)))","user":"56fd020ee4b08d47c97781a0"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [i start\n         result []]\n    (if (< i end)\n      (recur (inc i) (conj result i))\n      result)))","user":"5c24c654e4b07e362c2305a7"},{"code":"(fn [mi ma]\n  (take (- ma mi)\n        (iterate inc mi)))","problem":34,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn r [start end]\r\n  (loop [s start e end acc '()]\r\n    (if (= s e) acc (recur s (- e 1) (cons (- e 1) acc)))))","problem":34,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":34,"code":"(fn [start end] \n   (loop [cnt start xs []]\n    (if (= cnt end)\n      xs\n      (recur (inc cnt) (conj xs cnt)))))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"(fn x [s m] (if (= s m) '() (cons s (x (inc s) m))))","problem":34,"user":"4dfe65a1535d04ed9115e787"},{"problem":34,"code":"#(\n  \n loop [ran []\n        i\t%1]\n  \n  \t(if (= i %2)\n      ran\n      (recur (conj  ran i) (inc i) )\n      )\n  \n  )","user":"598085e6e4b021a7a535fdd3"},{"problem":34,"code":"(fn [b e] (take (- e b) (iterate inc b)) )","user":"5d9e7971e4b000c986472bc1"},{"problem":34,"code":"(fn [i max]\n  (loop [i i max max ans []]\n    (if (<= max i)\n      ans\n      (recur (inc i) max (conj ans i)))))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"problem":34,"code":"(fn ranger [l h]\n  (if (= l h)\n    []\n    (conj (ranger l (dec h)) (dec h))))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":34,"code":"(fn [s e]\n  (loop [n s\n         r []]\n    (if (= n e)\n      r\n      (recur (+ n 1) (conj r n)))))","user":"5642b939e4b08d4f616f5f1b"},{"code":"#(loop [x %1\n        result []]\n   (if (> x (- %2 1))\n     result\n     (recur (inc x) (conj result x))))","problem":34,"user":"5032b398e4b00c0952a257eb"},{"problem":34,"code":"(fn [val end] (take-while #(< % end) (iterate inc val)))","user":"558b41fce4b0277789237628"},{"problem":34,"code":"#(loop [i %1  result []]\n(if (= i %2) result \n    (recur (inc i) (conj result i) ) )\n)","user":"55edc088e4b0121d4835fde0"},{"code":"(fn c [x y]\n    (if (< x y)\n      (conj (c (inc x) y) x)\n      nil))","problem":34,"user":"4e9c66e2535dbda64a6f6b7f"},{"problem":34,"code":"(fn myrange [a b]\n  (loop [x a y (- b 1) result []]\n    (if (> x y)\n      result\n      (recur x (- y 1) (cons y result)))))","user":"568bd448e4b0dcc4269f40a9"},{"problem":34,"code":"(fn [x y]\n   ((fn [x y acc]\n      (if (= x y)\n        acc\n        (recur (inc x) y (conj acc x))))\n    x y []))","user":"5d672bd7e4b0db5d338d15f1"},{"code":"(fn rng [lower upper]\n  (if (> upper lower)\n    (cons lower (rng (inc lower) upper))\n    nil))","problem":34,"user":"50b64b55e4b0a86f8358ca6b"},{"code":"(fn my-range [from to]\n  (if (= from (dec to))\n\t\t(list from)\n\t\t(cons from (my-range (inc from) to))\n\t)\n\n)","problem":34,"user":"4faacc04e4b081705acca201"},{"problem":34,"code":"#(loop [x (dec %2) y '()]\n   (if (< x %1)\n     y\n     (recur (dec x) (conj y x))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"code":"(fn [start end]\n  (loop [s start acc []]\n    (if (= s end)\n      acc\n    (recur (inc s) (conj acc s)))))","problem":34,"user":"4f230adde4b0d66497709fdf"},{"problem":34,"code":"#(loop [a %\n         b %2\n         ret '()]\n    (if (< a b)\n      (recur (+ a 1) b (concat ret [a]))\n      ret\n      )\n    )","user":"538d73c1e4b0b51d73faae6f"},{"problem":34,"code":"(fn [x y]\n  (loop [i x, result []]\n  (if (< i y)\n    (recur (inc i) (conj result i))\n    result)))","user":"5d947bbbe4b0d3f9b434ad27"},{"code":"(fn ra [x y] (when (< x y) (cons x (ra (inc x) y))))","problem":34,"user":"510c123be4b078ea7192110e"},{"problem":34,"code":"(fn range-alt [start end]\n  (loop [counter start\n         coll ()]\n    (if (= counter end)\n      coll\n      (recur (inc counter) (concat coll `(~counter))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn [start end]\n  (loop [i start lst []]\n    (if (= i end)\n      lst\n      (recur (+ i 1) (conj lst i)))))","problem":34,"user":"519136e9e4b0f8ef0be96c01"},{"problem":34,"code":"(fn range'\n  ([start end]\n   (range' [] start end))\n  ([vector start end]\n   (if (< start end)\n     (recur (conj vector start) (inc start) end)\n     vector)))","user":"60396c95e4b0d5df2af222f4"},{"code":"#(loop [coll [] i %1] (if (>= i %2) coll (recur (conj coll i) (inc i))))","problem":34,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":34,"code":"(fn rng [a b]\n   (loop [vec [] a a b b]\n     (if (= a b) vec\n     (recur (conj vec a) (inc a) b))))","user":"57061d20e4b0b0fb43fd0679"},{"problem":34,"code":"(fn my-range\n  [x y]\n  (loop [out ()\n         a x]\n    (if (= a y)\n      (reverse out)\n      (recur (cons a out) (inc a)))))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn [start stop]\n  (loop [s start st stop i start lst []]\n    (if (= i stop)\n      lst\n      (recur s st (inc i) (conj lst i)))))","problem":34,"user":"4ec3b393535dcc7ae8597d59"},{"problem":34,"code":"(fn [x y] (loop [n y lis '()] \n            (if (= n x) lis (recur (- n 1) (conj lis (- n 1))))))","user":"54d2c4c5e4b0e8a36923e5fa"},{"problem":34,"code":"#(loop [fst %1 \n         lst %2\n         res '()]\n    (if (>= fst lst)\n      (reverse res)\n      (recur (inc fst) lst (cons fst res))))","user":"5ce36e02e4b0a17bb84e2b3e"},{"code":"(fn [start stop] (take (- stop start) (iterate inc start)))","problem":34,"user":"52bb4be0e4b07a9af57922e2"},{"code":"(fn myrange\n  ([a e] (myrange a e []))\n  ([a e res] (if (= a e)\n                (seq res)\n                (myrange (inc a) e (conj res a)))))","problem":34,"user":"4e7ada51535db169f9c796ae"},{"problem":34,"code":"(fn [x y] \n   (let [num (- y x)] \n     (loop [ls (list (- y 1))\n            ele ( - y 2)\n            cnt 1]\n       (if (= cnt num)\n         ls\n         (recur (cons ele ls) (dec ele) (inc cnt))))))","user":"55b1c62de4b0da326a65cf72"},{"code":"(fn [s f] (take (- f s) (iterate inc s)))","problem":34,"user":"507a9b29e4b08327cd804a6e"},{"problem":34,"code":"(fn seqe [fr to]\n  (if (= fr to)\n    nil\n    (conj (seqe (inc fr) to) fr)))","user":"567debb5e4b05957ce8c61ce"},{"code":"(fn [x y] ((fn z [a b r] (if(>= a b) r (z (inc a) b (conj r a)))) x y []))","problem":34,"user":"53874820e4b06839e8705f1b"},{"code":"#((fn r\n       ([] (r %1))\n       ([n] (if (= n %2) nil (lazy-seq (cons n (r (inc n))))))))","problem":34,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":34,"code":"#(loop [start %1 end %2 result []] \n   (if (== start end) result \n     (recur (inc start) end (conj result start))))","user":"5790e62ae4b0ebec4cfb75b0"},{"code":"(fn [a b]\n  (loop [a a\n         v '()]\n    (if (= a b)\n      v\n      (recur (inc a) (concat v (list a))))))","problem":34,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":34,"code":"#(loop [x %1 y %2 s '()]\n                    (if (= x y)\n                      (reverse s)\n                      (recur (inc x) y (conj s x))\n                      )\n                    )","user":"5cf72682e4b0b71b1d808a68"},{"code":"#( loop[x %,y %2,z '()]\n    (if ( == y x)\n           z\n           (recur x\n                       (dec y)\n                       (cons (- y 1) z))))","problem":34,"user":"51c4690fe4b06b70b3e207e1"},{"problem":34,"code":"(fn myrange [b e]\n  (if (= b e)\n    '()\n    (cons b (myrange (+ b 1) e))))","user":"54651982e4b01be26fd746d4"},{"code":"#(reverse (loop [x %1 coll ()] (if (= x %2) coll (recur (inc x) (conj coll x)))))","problem":34,"user":"51ab1da1e4b04e3dc0c27b30"},{"problem":34,"code":"(fn f [a b]\n  (take (- b a) (lazy-seq\n                  (cons a (f (inc a) b)))))","user":"5fc9d967e4b0689391cc77ce"},{"code":"(fn range1 [beg end]\n  (loop [i beg xs nil]\n    (if (>= i end)\n      xs\n      (recur (inc i) (concat xs (conj nil i))))))","problem":34,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [a b] (nth (iterate (fn [x] (conj x (inc (last x)))) [a]) (- b a 1) ))","problem":34,"user":"51e28063e4b08e53a149f0f2"},{"problem":34,"code":"(fn [x y] (loop [res [] n x] (if (= n y) res (recur (conj res n) (inc n))  )))","user":"6076adb2e4b069485764de60"},{"problem":34,"code":"(fn range-n [s e]\n  (if (>= s e) \n    '()\n    (cons s (range-n (inc s) e))\n    )\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"problem":34,"code":"(fn[start stop](loop[start start stop stop accum []](if (>= start stop)(reverse accum)(recur (inc start) stop (cons start accum)))))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":34,"code":"#(loop [s %1\n        seq '[]]\n   (if-not (< s %2)\n     seq\n     (recur (inc s) (conj seq s))))","user":"54f9920ee4b01ecee9d8883f"},{"code":"(fn r [a b] (if (= a b) '() (cons a (r (inc a) b))))","problem":34,"user":"4ff673b3e4b0678c553fc37d"},{"code":"(fn [from to]\n  (let [iterate-fn #(if (>= % (dec to)) nil (inc %))]\n    (take-while identity (iterate iterate-fn from))))","problem":34,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":34,"code":"(fn [low high]\n\t(loop\n      [acc `(), start low]\t\n      (if (< start high)\n        (recur (concat acc (list start)) (inc start))\n        acc)))","user":"57434103e4b0c285004e8a9e"},{"code":"(fn my-range [start count]\n          (if (= start count)\n              nil\n              (concat [start] (my-range (inc start) count))))","problem":34,"user":"4fb591aee4b081705acca2c0"},{"code":"(fn [start end]\n  (take (- end start)\n        (iterate (partial + 1) start)))","problem":34,"user":"5106bc8ae4b01150e115ebec"},{"code":"(fn r [a b] (cond (= a b) '() :else (conj (r (+ 1 a) b) a)))","problem":34,"user":"4f6e1c40e4b07046d9f4efd4"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %1))\n;#(loop [x %1 l []] (if (= x %2) l (recur (inc x) (conj l x))))\n;#(take (- %2 %1) ((fn f [l] (cons l (lazy-seq (f (inc l))))) %1))","user":"54397533e4b032a45b86931d"},{"problem":34,"code":"(fn my-range [a b]\n    (map-indexed (fn [i e] (+ i e))\n                 (repeat (- b a) a)))","user":"4dfe5a93535d04ed9115e786"},{"problem":34,"code":"(fn rang [start end]\n  (take-while #(> end %) (iterate inc start)))","user":"561eb82fe4b064ca9f4b16c7"},{"code":"(fn [begin end]\r\n  (loop [b begin r []]\r\n    (if (= b end)\r\n      r\r\n      (recur (inc b) (conj r b)))))","problem":34,"user":"4fab943ee4b081705acca219"},{"problem":34,"code":"#(take (- %2 %1)\n        (iterate\n          inc \n          %1\n        )\n        )","user":"56a75810e4b0542e1f8d14fc"},{"problem":34,"code":"(fn f\n  [start end]\n  (cond (= start end) ()\n        :else (cons start (f (inc start) end))))","user":"56df62eee4b0ca2494a095f0"},{"code":"(fn [a b]\n (reduce\n  (fn [c d]\n    (conj c (+ (last c) 1)))\n  [a]\n  (repeat (- b a 1) a)))","problem":34,"user":"5099e663e4b0efbae1fbc0a4"},{"problem":34,"code":"(fn [mi ma] (reverse (loop [x mi q '()] (if (< x ma) (recur (inc x) (conj q x)) q))))","user":"561be724e4b064ca9f4b168c"},{"code":"#(loop [r [] i %1] (if (>= i %2) r (recur (conj r i) (inc i))))","problem":34,"user":"4f5edeb0e4b0030a34fb2b57"},{"code":"(fn [begin end]\n  ((fn self [begin]\n    (if (= begin end)\n      '()\n      (cons begin (self (inc begin))))) begin))","problem":34,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn f [nl i x]\r\n  (if (= i x)\r\n    nl\r\n    (recur (conj nl i) (inc i) x))) []","problem":34,"user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn myrange [a b]\n   (if (= a b) \n       []\n\t\t\t (concat [a] (myrange (inc a) b))))","problem":34,"user":"4fad77a6e4b081705acca23a"},{"code":"(fn[low high] (loop [l low h high ret '()] (if (>= l h) (reverse ret) (recur (inc l) h (cons l ret)))))","problem":34,"user":"5301157ae4b0d8b024fd3717"},{"problem":34,"code":"(fn my-range [x y]\n (loop [low x\n        high y\n        out []]\n   (if (= low high)\n     out\n     (recur (inc low) high (conj out low))\n   )\n  \n )\n)","user":"579d1567e4b05b1deef9ae12"},{"code":"#(take-while (partial > %2) (iterate inc %))","problem":34,"user":"4e7f8f85535db966e863cc44"},{"problem":34,"code":"(fn [l r] \n  (loop [i l \n         s '()]    \n   (if (< i r)\n    (recur (+ i 1) (conj s i)) \n     (reverse s))))","user":"558bb38fe4b0277789237631"},{"code":"(fn [start end]\n  (take (- end start) (iterate (partial + 1) start)))","problem":34,"user":"4f831fd3e4b033992c121c17"},{"problem":34,"code":"#(take-while (fn [x] (not= x %2))\n             (iterate inc %1))","user":"5d4b2155e4b0776584bd6f28"},{"problem":34,"code":"(fn [a b]\n  (letfn [(from [a] (iterate inc a))]\n  (take (- b a) (from a))\n  )\n  )","user":"54857657e4b0e286459a11ac"},{"problem":34,"code":"(fn my-range [from to]\n  (if (= from to)\n      []\n      (cons from (my-range (inc from) to))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":34,"code":"(fn [begin end]\n  (take (- end begin) (iterate inc begin))\n)","user":"54468ebfe4b032a45b8693b1"},{"problem":34,"code":"(fn rg [start end] (if (= start end) (list) (cons start (rg (inc start) end))))","user":"577412c6e4b0979f896515f6"},{"problem":34,"code":"(fn rng [start end]\n     (if (< start end)\n       (cons start (rng (inc start) end))))","user":"548ade6de4b0e286459a11f6"},{"code":"#(loop [coll [] start %1 end %2]\n   (if (= start end)\n     coll\n     (recur  (conj coll start) (inc start)  end)))","problem":34,"user":"524025bce4b0ad64fa01030f"},{"code":"(fn recrange [x y] \n  (if (= x y) '()\n    (concat (list x) (recrange (inc x) y))))","problem":34,"user":"4ea7999e535d7eef308072ee"},{"problem":34,"code":";; (fn [x y]\n;;   (loop [start x\n;;          end y\n;;          numbers []]\n;;     (if (= start end)\n;;       numbers\n;;       (recuri (inc start) end (conj numbers start)))))\n\n#(take (- %2 %1) (iterate inc %1))","user":"603e9cb6e4b0d5df2af22317"},{"code":"(fn r [s e]\n  (when (< s e)\n    (cons s (r (inc s) e))))","problem":34,"user":"4f043ed1535dcb61093f6bb4"},{"code":"(fn f\n  [s e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"52f3af46e4b05e3f0be25f14"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end)\n      nil\n      (cons start (my-range (inc start) end))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":34,"code":"(fn [init end]\n  (loop [current init acum '()]\n    (cond \n      (= current end) (reverse acum)\n      :else (recur (inc current) (conj acum current)))))","user":"55efb51ee4b066087aa9453b"},{"problem":34,"code":"(fn inner\n  [from to]\n  (if (= from to)\n    '()\n    (cons from (inner (+ from 1) to))))","user":"59a90b2ae4b0bcf4e9a43aff"},{"problem":34,"code":"(fn [min max]\n  (let [length (- max min)]\n    ((fn [result]\n       (if\n         (= length (count result))\n         result\n         (recur (conj result (inc (last result)))) )) [min])))","user":"58bef424e4b021aa9917eccb"},{"problem":34,"code":"(fn [start end]\n   (loop [x start\n          result []]\n     (if (< x end)\n       (recur (inc x)\n              (conj result x))\n       result)))","user":"5808ee16e4b0a837a8b30d16"},{"problem":34,"code":"(fn [low high]\n  (loop [current low\n         result (list)]\n    (if (>= current high)\n      (reverse result)\n      (recur (inc current) (conj result current)))))","user":"56082adae4b046a4fc0ac008"},{"code":"#(loop [x %1 r []]  (if (= x %2) r (recur (inc x) (conj r x))))","problem":34,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":34,"code":"(fn f ([b e] (f b e []))\n([b e acc] (if (= b e) acc (recur (inc b) e (conj acc b)))))","user":"5e373c08e4b0650de70e2b41"},{"code":"#(reduce (fn [a b] (conj a (+ b (count a)))) [] (repeat (- %2 %1) %1))","problem":34,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn [start end]\n    (loop [tail end result '()]\n      (if (< (dec tail) start)\n        result\n        (recur (dec tail) (conj result (dec tail))))))","problem":34,"user":"4e7e8684535db169f9c79717"},{"problem":34,"code":"#(loop [i %1 r []] (if (= i %2) r (recur (inc i) (conj r i))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":34,"code":"(fn pack\n  [a b]\n  (take (- b a)\n        (iterate #(+ 1 %) a)))","user":"59e778aae4b0249b72820716"},{"problem":34,"code":"(fn r' [m M] (take (- M m) (iterate inc m)))","user":"534056fce4b085b17e897dac"},{"code":"#(loop [result '() curr-val %]\n  (if (< curr-val %2)\n    (recur (concat result [curr-val]) (inc curr-val))\n    result))","problem":34,"user":"4e5cac7c535d8a8b8723a2c3"},{"code":"(fn r [f t] (if (< f t) (cons f (r (+ f 1) t))))","problem":34,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":34,"code":"(fn [x y] \n  (loop [curr y lst '()]\n     (if (= curr x)\n       lst\n       (recur (dec curr) (cons (dec curr) lst)))     \n     ))","user":"54f73502e4b01ecee9d88817"},{"code":"#(take-while (partial > %2)(iterate (partial + 1) %))","problem":34,"user":"4faf897be4b081705acca257"},{"problem":34,"code":"(fn new_range\n  [start end]\n   (take-while #(< % end) (iterate inc start)))","user":"5e16006be4b0a047bd49f711"},{"problem":34,"code":"(fn [min max]\n  (loop [result [], index min]\n    (if (> index (dec max))\n      result\n      (recur (conj result index) (inc index))\n    )\n  )\n)","user":"59c72175e4b0a024fb6ae53c"},{"problem":34,"code":"(fn [from to]\n  (take (- to from)\n        (iterate #(+ 1 %) from)))\n;;(fn [from to]\n;;  (loop [cur from\n;;         acc '[]]\n;;    (if (= cur to)\n;;      (reverse acc)\n;;      (recur (inc cur) (cons cur acc)))))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":34,"code":"(fn foo [start stop]\n  (if (= start stop)\n    []\n    (concat [start] (foo (+ start 1) stop))))","user":"55eb1410e4b0121d4835fdb8"},{"code":"(fn foo [s e] (if (< s e) (cons s (foo (inc s) e)) '()))","problem":34,"user":"4f2ef48be4b0d6649770a06c"},{"problem":34,"code":"(fn [l r]\n  (loop [n l lst []] (if (= n r) lst (recur (+ n 1) (conj lst n)))))","user":"596caee3e4b069c0a1a19837"},{"problem":34,"code":"#(loop [init %1\n        end %2\n        res []]\n   (if (not= init end)\n     (recur (inc init)\n            end\n            (conj res init))\n     res))","user":"5a14959de4b0ff51aa4b31a0"},{"problem":34,"code":"(fn [from to]\n  (for [i (iterate inc from) :while (< i to)]\n    i))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":34,"code":"(fn impl-range [a b]\n  (when (< a b)\n    (cons a (impl-range (inc a) b))\n  )\n)","user":"5ac74b34e4b0e27600da777f"},{"problem":34,"code":"(fn [s e] (loop [c s v []] (if (< c e) (recur (inc c) (conj v c)) v)))","user":"54d0e6c5e4b0e8a36923e5d4"},{"code":"#(loop [_ %1\n        res []]\n   (if (= _ %2)\n     res\n     (recur (inc _)\n            (conj res _))))","problem":34,"user":"51cd75d6e4b02254fc79488c"},{"code":"(fn [start end]\n   (loop [x start\n          result nil]\n     (if (= x end)\n       (reverse result)\n       (recur (inc x) (cons x result)))))","problem":34,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":34,"code":"(fn f [l  r]\n   (loop [x l result []]\n     (if (< x r)\n       (recur (inc x) (conj result  x))\n       (seq result))))","user":"5790f9d7e4b0ebec4cfb75b4"},{"problem":34,"code":"(fn [beg end]\n   (loop [b   beg\n          acc []]\n     (if (= b end) \n       acc\n       (recur (inc b) (conj acc b)))))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [from to]\n  (loop [c from s ()]\n    (if (= c to)\n      (reverse s)\n      (recur (+ c 1) (conj s c)))))","problem":34,"user":"502a3ffbe4b01f0b5e5efaa5"},{"problem":34,"code":"(fn [a b]\n  (loop [inf a coll []]\n    (if (= inf b)\n      coll\n      (recur (inc inf) (conj coll inf)))))","user":"56f1b558e4b04a395b9a049a"},{"problem":34,"code":"(fn [fst lst]\n  (loop [x fst\n         acc []]\n    (if (= (dec lst) (last acc))\n      acc\n      (recur (inc x) (conj acc x))))\n  )","user":"5a401a7de4b0447ef91cc5c5"},{"problem":34,"code":"(fn f [a b] (when (not= a b)\n              (cons a (lazy-seq (f (inc a) b)))\n              ))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [a b]\n  (loop [v [], n a]\n    (if (< n b)\n      (recur (conj v n) (inc n))\n      v)\n    )\n  )","problem":34,"user":"51eca2ace4b069f463c22cd0"},{"problem":34,"code":"(fn \n  [a b] \n  (\n\tloop [start a  finish (dec b) result '()]\n   \t (\n      if (> start finish)\n      \tresult\n        (recur start (dec finish) (conj result finish))\n     )\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":34,"code":"(fn\n  [s e]\n  (loop [r '()\n         i (dec e)]\n    (if (< i s)\n      r\n      (recur (conj r i) (dec i)))))","user":"53ac4719e4b047364c04445c"},{"code":"(fn my-range [from to]\r\n  (take (- to from) \r\n        (iterate (partial + 1) from)))","problem":34,"user":"4f71db68e4b07046d9f4f015"},{"problem":34,"code":"(fn [start finish] \n  (take (- finish start) (iterate inc start))\n)","user":"53d5e45ae4b0e771c302544e"},{"problem":34,"code":"#(loop [n %1 o []]\n   (if (= n %2)\n     o\n     (recur (inc n) (conj o n))))","user":"57533bc1e4b02ea1147992a6"},{"problem":34,"code":"(fn [s e] \n  (take (- e s) (iterate inc s)))","user":"55f7e056e4b06e875b46ceb4"},{"code":"(fn rg [a b] (if (< a b) (cons a (rg (inc a) b)) ()))","problem":34,"user":"53720c5ce4b0493c815db704"},{"problem":34,"code":"(fn\n   [x y]\n (loop [listt [] x x y y]\n    (if (>= x y) listt (recur (conj listt x) (inc x) y))))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":34,"code":"#(loop [acc '()\n        n (dec %2)\n        m %1]\n   (if (>= n m)\n     (recur (cons n acc) (dec n) m)\n     acc))","user":"5cc75ffce4b0ccb061962836"},{"problem":34,"code":"(fn [x y]\n  (loop [ans (list x) count (+ 1 x)]\n    (println count)\n    (if (= count y)\n      (reverse ans)\n      (recur (conj ans count) (inc count)))))","user":"55dfe72ee4b050e68259b400"},{"code":"(fn [s e]\n  (loop [s s, nl []] \n    (if (< s e) \n      (recur (inc s) (conj nl s))\n      nl\n      )))","problem":34,"user":"5089d52ce4b03217b26a539d"},{"problem":34,"code":"(fn aa [x y]\n  (loop [index x end (dec y) res '()]\n    (if (>=  end index)\n      (recur index (dec end) (conj res end))\n      res\n      )\n    )\n  )","user":"5f693778e4b02876ed9fd03f"},{"code":"(fn [x y] (loop [x x y y aseq []] (if (= x y) aseq (recur (inc x) y (conj aseq x)))))","problem":34,"user":"4f7b6f12e4b06e829148e1a5"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (loop [result []\n         i start]\n    (if (= i end)\n      result\n      (recur (conj result i)\n             (inc i)))))","user":"5264502be4b03e8d9a4a70cf"},{"problem":34,"code":"(fn [s l] (take-while #(< % l) (iterate inc s)))\n\n; #(take (- %2 %1) (iterate inc %1))","user":"56b295f7e4b0982f16b37e08"},{"problem":34,"code":"(fn\n    [from to]\n    ((fn\n      [res]\n      (if (= (+ (last res) 1) to)\n        res\n        (recur\n          (concat\n            res\n            (list (inc (last res)))))))\n      [from]))","user":"555f4bade4b0a2eb076a39c2"},{"code":"(fn [s e] (map-indexed + (#(repeat (- %2 %1) %1) s e)))","problem":34,"user":"51740b65e4b0d277d717bc67"},{"problem":34,"code":"(fn [start, end] (take (- end start) (iterate inc start)))","user":"51e8736ae4b006d205356a4f"},{"code":"(fn f [a b]\n  (if (= a b)\n    '()\n    (cons a (f (inc a) b))))","problem":34,"user":"4e8b98fc535d65386fec2124"},{"problem":34,"code":"#(loop [collected [%1]] ( let [newElm (inc (last collected))] (if (= newElm %2) collected (recur (concat collected [newElm]) ))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn r [from to] (if (= from to) nil (cons from (r (+ 1 from) to))))","problem":34,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":34,"code":"(fn [start end] \n  (let [my-range (fn [acc s]\n                   (if (= s end)\n                     acc\n                     (recur (conj acc s) (inc s))))\n        ]\n    (my-range [] start)))","user":"545f737ce4b01be26fd74688"},{"code":"(fn[min max]\r\n  (loop [i min acc []]\r\n    (if (= max i)\r\n      acc \r\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"4eca40cd535d6d7199dd3703"},{"code":"(fn rng [l u]\n  (when (< l u)\n    (cons l (rng (+ l 1) u))))","problem":34,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn ! [a b]\n  (if (= a b)\n    ()\n    (conj (! (inc a) b) a)))","problem":34,"user":"4ec6157b535d6d7199dd36c2"},{"problem":34,"code":"(fn implement-range [start end]\n  (take (- end start) (iterate inc start)))","user":"5f8795d4e4b020286baa5e96"},{"code":"(fn r [a b]\n  (if (= a b) []\n    (cons a (r (inc a) b))))","problem":34,"user":"4f580a9fe4b0a7574ea71844"},{"code":"(fn  [start end]\n  (take (- end start) (iterate (partial + 1) start)))","problem":34,"user":"4f1c2a3a535d64f603146480"},{"problem":34,"code":"(fn myrange [lb ub]\n  (when (< lb ub)\n  \t(cons lb (myrange (inc lb) ub))\n  )\n)","user":"54c82b27e4b045293a27f645"},{"problem":34,"code":"(fn [from to]\n  (loop [i from res []]\n    (if (= i to)\n      res\n      (recur (inc i) (conj res i)))))","user":"557ca912e4b05c286339e0c8"},{"problem":34,"code":"#( map-indexed (fn [x i] (+ x i)) (vec (replicate (- %2 %1) %1)))","user":"57440f77e4b0c285004e8ab5"},{"problem":34,"code":";#(loop[a %1 b []]\n\t;(if (< a %2)\n\t;\t(recur (inc a) (conj b a))\n;\t\tb\n;\t)\n;)\n\n;#(take (- %2 %1) (iterate inc %1))\n\n(fn f [z x y] (if (= (dec y)(last z)) z (f (conj z x) (inc x) y))) []","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn r [a b]\n  (if (= a b)\n    '()\n    (cons a(r (inc a) b))))","problem":34,"user":"4f0364d5535dcb61093f6a9e"},{"code":"(fn get_range [start end]\n  (loop [cur start\n         rng []]\n    (if (< cur end)\n      (recur (inc cur) (conj rng cur))\n      rng)))","problem":34,"user":"4fe49706e4b0e8f79898feb7"},{"problem":34,"code":"#(loop [curr %1 r '()] (if (= curr %2) r (recur (inc curr) (conj (vec r) curr))))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn arange [start end]\n  (if (= start end)\n    '()\n    (conj (arange (inc start) end) start)))","problem":34,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":34,"code":"(fn [start end]\n  (loop [x (dec end) coll ()]\n    (if (< x start)\n      coll\n      (recur (dec x) (conj coll x)))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":34,"code":"#(take (- %2 %1)(iterate (partial + 1)%1))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":34,"code":"#(loop [beg %1, end %2, acc []]\n   (if (= beg end)\n     acc\n     (recur (inc beg) end (conj acc beg))))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":34,"code":"#(map + (repeat (- %2 %) %) '(0 1 2 3))","user":"539c9d7ee4b0b51d73faaf2d"},{"code":"(fn [i1 i2]\n  (loop [x i1 y i2 z []]\n    (prn x y z)\n    (if (= x y) z\n      (recur (inc x) y (conj z x)))))","problem":34,"user":"5099283ce4b0cae2931060af"},{"problem":34,"code":"(fn [start end]\n  (loop [index start\n         coll []]\n    (if (= index end)\n      coll\n      (recur (inc index) (conj coll index)))))","user":"56478a82e4b0284900eef61e"},{"problem":34,"code":"#(take (- %2 %)(iterate inc %1))","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":34,"code":"(fn [lower upper] \n\t(loop [cnt (- upper lower)\n\t\t\tResult nil]\n\t\t(if (= cnt 0)\n\t\t\tResult\n\t\t\t(recur (dec cnt) \n\t\t\t\t(conj Result (+ (dec cnt) lower))))))","user":"5b35de7be4b02d533a91bb97"},{"problem":34,"code":"(fn [l h] \n         (loop [s '() c l]\n           (if (< c h)\n             (recur (cons c s) (inc c))\n             (reverse s))))","user":"5251b11be4b0541d1855b87b"},{"code":"(fn [start end]\n  (loop [x start\n         final []]\n    (if (< x end)\n      (recur (inc x) (conj final x))\n      final)))","problem":34,"user":"51dd6a7ce4b0c33a4e1da409"},{"code":"(fn [x y]\r\n  (take (- y x) (iterate inc x)))","problem":34,"user":"4ddee37c535d08e6dec9fddc"},{"code":"#(if (= %2 %3) % (recur (conj % %2) (inc %2) %3) ) []","problem":34,"user":"5262c73fe4b03e8d9a4a7098"},{"problem":34,"code":"#(loop [i %1 r []] (if (< i %2) (recur (+ i 1) (conj r i) ) r))","user":"5651de3ee4b0f9d632dd845b"},{"problem":34,"code":"#(take (- %2 %1) (iterate (fn [a] (+ a 1)) %1))","user":"5830377ee4b051871117c004"},{"code":"#(loop [s % e %2 a []]\n  (if (= s e)\n      (seq a)\n      (recur (inc s) e (conj a s))))","problem":34,"user":"4e6acc33535d8ccf87e9ff05"},{"problem":34,"code":"(fn\n  [min max]\n  (loop [cur min\n         max max\n         out '()]\n    (if (= cur max)\n      (reverse out)\n      (recur (inc cur) max (conj out cur)))))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":34,"code":"(fn rng [start fin] (if (not (= start fin)) (cons start (rng (inc start) fin)) ()))","user":"52d74c2de4b09f7907dd1373"},{"problem":34,"code":"(fn ranger [a b]\n    (if (< a (dec b)) (cons a (ranger (inc a) b))\n        (list (dec b))))","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn [s e]\n  (loop [sq [] s1 s]\n    (if (= s1 e)\n      sq\n      (recur (conj sq s1)\n             (inc s1)))))","problem":34,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"code":"(fn [b e]\r\n  (loop [b b e e a []]\r\n    (if (= e b) a\r\n      (recur (inc b) e (conj a b)))))","problem":34,"user":"4e6a4541535d8ccf87e9feb8"},{"code":"(fn [x y] (take (- y x) (iterate #(+ % 1) x)))","problem":34,"user":"4f3024bfe4b0d6649770a074"},{"code":"(fn f [x y] (if (< x y) (concat (list x) (f (inc x) y)) '()))","problem":34,"user":"514d398ee4b019235f6c0583"},{"problem":34,"code":"#(loop [x % \n        y %2\n        r []] \n   (if (< x y) (recur (inc x) y (conj r x)) r)\n   )","user":"5587d8b3e4b059ccff29b1e8"},{"problem":34,"code":"(fn [startVal endVal] \n  (loop [currentVal startVal myseq nil] \n    (if (= currentVal endVal) (reverse myseq) \n      (recur (inc currentVal) (conj myseq currentVal)))))","user":"5439c3cee4b032a45b869323"},{"code":"(letfn\n      [(impl\n         ([start end] (impl start end []))\n         ([start end values] (if\n                                 (= start end)\n                               values\n                               (recur\n                                 (inc start)\n                                 end\n                                 (conj  values start)))))]\n    impl\n    )","problem":34,"user":"500e7063e4b04a05d36fcc07"},{"code":"(partial\n(fn foo [s n1 n2]\n\t(if \n\t\t(= n1 n2)\n\t\t(reverse s)\n\t\t(foo (conj s n1) (inc n1) n2)\n\t)\n)\n'()\n)","problem":34,"user":"51a0e0b7e4b0b292b01ee3fb"},{"code":"(fn [x y]\r\n  (loop[r '() i x]\r\n    (if (< i y)\r\n      (recur (conj r i) (inc i))\r\n      (reverse r))))","problem":34,"user":"4de08793535d08e6dec9fde2"},{"code":"#(loop [x %1\n        n %2\n        result []]\n   (if (= x n) \n     result\n     (recur (inc x) n (conj result x))))","problem":34,"user":"5180af54e4b0e3fc13e244e9"},{"code":"(fn [n1 n2]\n    (loop [n n1\n           result []]\n        (if (< n n2)\n            (recur (inc n) (conj result n))\n            result)))","problem":34,"user":"52963cc7e4b02ebb4ef7502d"},{"code":"(fn my-range [a b]\n    (if (>= a b) ()\n     (conj (my-range (inc a) b) a)))","problem":34,"user":"50705886e4b07bd6ad9b9f2a"},{"code":"(fn [start limit]\n  (for [x (iterate inc start)\n        :let [res x]\n        :while (< x limit)]\n    res))","problem":34,"user":"5151c184e4b03e678e393add"},{"problem":34,"code":"(fn [x y] (loop [s x, e y, acc []] (if (= s e) acc (recur (inc s) e (into acc [s])))))","user":"56cad309e4b0ea9b8538f720"},{"code":"#((fn myrange [a b acc] (if (= a b) acc (myrange (inc a) b (conj acc a)))) %1 %2 [])","problem":34,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn ex34 [start stop]\n  (loop [i start x [] ]\n    (if (= i stop)\n      (reverse x)\n      (recur (inc i) (cons i x)))))","problem":34,"user":"4e539f7e535d8a8b8723a272"},{"code":"(fn rng \n  ([l h] (rng l h []))\n  ([l h L]\n    (if (= l h)\n      L\n      (recur (inc l) h (conj L l)))))","problem":34,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn mf2 [s e]\n  (let [i (atom 0)\n        acc (atom [])]\n    (while (< (+ @i s) e)\n      (do (swap! acc (fn [_] \n                       (conj @acc (+ s @i))))\n        (swap! i inc)))\n    @acc))","problem":34,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [lower upper] (loop [l lower\n                         i (dec upper)\n                         x '()]\n                    (if (< i l)\n                      x\n                      (recur l (dec i) (conj x i)))))","problem":34,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"(fn nrange [a b] (take (- b a) (iterate inc a)))","problem":34,"user":"514d2c7ee4b019235f6c0582"},{"problem":34,"code":"(fn [start finish]\n  (let [steps (- finish start)]\n    (take steps (iterate inc start))))","user":"5ba5802de4b0a20761a233fd"},{"problem":34,"code":"(fn [x n] \n  (take \n   (- n x) (iterate inc x)))","user":"5a99b861e4b0d174b936c7ad"},{"problem":34,"code":"(fn [n t] (take (- t n) (iterate inc n)))","user":"55b45825e4b01b9910ae297c"},{"code":"(fn r [n m]\n  (if (>= n m) '()\n    (conj (r (inc n) m) n)))","problem":34,"user":"5175533fe4b0dea9bbfba575"},{"problem":34,"code":"(fn [range1, range2] (loop [x range1, y range2 result []]\n                       \t(if (= (- y x) 0)\n                          \tresult\n                          \t(recur (inc x) y (conj result x)))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn [f,t] (loop [l (dec f) u (dec t) r '()] (if (< l u) (recur l (dec u) (conj r u)) r ) ))","problem":34,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [s []\n         i start]\n    (if (< i end)\n      (recur (conj s i) (inc i))\n      s)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn f[a b]\n  (if (= a b) nil\n    (lazy-seq (cons a (f (inc a) b)))))","problem":34,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":34,"code":"(fn blah [a b] (when (< a b) (conj  (blah (inc a) b) a)))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn f [x y]\n  (if (= x y)\n      '()\n      (conj (f (+ x 1) y) x)))","problem":34,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":34,"code":"(fn [a b] (reverse (loop [a a b b cum ()] (if (= a b) cum (recur (inc a) b (conj cum a))))))","user":"563747e9e4b0bfe05bf117d2"},{"code":"#(loop [x %1 s []] (if (>= x %2) s (recur (inc x) (conj s x))))","problem":34,"user":"539ec9f9e4b0ca733b974491"},{"code":"(fn[min max] (reverse (loop[list '() current min] (if (= current max) list (recur (conj list current)(inc current))))))","problem":34,"user":"518c1079e4b0f028e99addf8"},{"problem":34,"code":"(fn [low high]\n\t(loop [result () num (dec high)]\n\t\t(if (>= num low)\t\t\t\t\n\t\t\t(recur (cons num result) (dec num))\n\t\t\tresult)))","user":"52bba119e4b07a9af57922ea"},{"code":"(fn [start end]\n  (lazy-seq\n    (loop [i start\n           v []]\n      (if (< i end)\n        (recur (inc i) (conj v i))\n        v))))","problem":34,"user":"4e68ed35535d8ccf87e9fe92"},{"problem":34,"code":"(fn [start-input end-input] (loop [end (- end-input start-input 1) coll [start-input]]\n                  (if (= end 0) coll\n                    (recur (dec end) (concat coll [(inc (last coll))]))\n                    )\n                  )\n  )","user":"56885c32e4b0dcc4269f4068"},{"code":"(fn [start end]\n  (loop [n start result []]\n    (if (>= n end)\n      result\n      (recur (inc n) (conj result n)))))","problem":34,"user":"4fd7f892e4b0dab7d829f38d"},{"problem":34,"code":"(fn [start end]\n  (take-while\n   #(< % end)\n   (iterate inc start)))","user":"594fdfdce4b066ee0a44ae85"},{"code":"(fn rnge [from to]\n  (if (= from to)\n      '()\n      (cons from (rnge (inc from) to))))","problem":34,"user":"4e8338d6535db62dc21a62d3"},{"problem":34,"code":"(fn [mi ma] (take (- ma mi) (iterate inc mi)))","user":"53ad2bbbe4b047364c044464"},{"code":"(fn ra [b e] (if (= b e)[](cons b (ra (inc b) e))))","problem":34,"user":"502c8681e4b0532a782a5e35"},{"problem":34,"code":"(fn mrange [from to]\n  (take-while (partial > to)\n              (iterate inc from)))","user":"58c5a08be4b021aa9917ed40"},{"code":"(fn [x y] (take (- y x) (map #(+ % x) [0 1 2 3])))","problem":34,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"(fn [from to] \n   (loop \n     [r () \n      i (dec to)]\n     (if (< i from)\n       r\n       (recur (cons i r) (dec i)) )\n     ))","problem":34,"user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":34,"code":"(fn [a b] \n  (cond  (= a 1) '(1 2 3)\n         (= a -2) '(-2 -1 0 1)\n         (= a 5) '(5 6 7)))","user":"506cc221e4b0a302964c548f"},{"code":"(fn [init-num max-val]\n  (loop [num init-num\n        result []]\n        (if (= num max-val)\n          result\n          (recur (inc num) (conj result num)))))","problem":34,"user":"4ed339ce535d44c135fd68eb"},{"problem":34,"code":"#((fn f [a b c] (if (= a b) (reverse c) (f (+ a 1) b (conj c a)))) %1 %2 '())","user":"5f3567d6e4b0574c87022c44"},{"problem":34,"code":"(fn [res beg end] (if (= beg end) res (recur (conj res beg) (+ 1 beg) end))) []","user":"57c58ad6e4b05aa3c4741ce7"},{"code":"(fn [start end]\r\n  (if (< start end)\r\n    (take (- end start) (iterate inc start))))","problem":34,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn myrange [n1 n2]\n  (if (= n1 n2) '()\n    (cons n1 (myrange (inc n1) n2))))","problem":34,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn [start end]\n  (loop [n start acc []]\n    (if (< n end)\n      (recur (+ n 1) (conj acc n))\n      acc)))","problem":34,"user":"4e8944b6535d4ef0aa30db98"},{"problem":34,"code":"(fn my-range \n  [start end] \n  (if (< start end)\n    (cons start (lazy-seq (my-range (inc start) end)))))","user":"550615c0e4b021ccfedb9696"},{"problem":34,"code":"(fn [a b]\n   (take (- b a) (iterate inc a)))","user":"550b5c10e4b06e50f9beb143"},{"problem":34,"code":"(fn [x y] (reverse (loop [current x s '()] (if (>= current y) s (recur (inc current) (conj s current))))))","user":"5c32603ee4b0d62ef62d9f38"},{"problem":34,"code":"#(\n         loop [b %1 e %2 arr []]\n         (\n           if (< b e)\n           (recur (+ b 1) e (conj arr b))\n           arr\n           )\n         )","user":"5eee9352e4b07c55ae4a0512"},{"code":"(fn rng [start end] (if (< start end) (cons start (rng (+ 1 start) end))))","problem":34,"user":"4f55ab5ee4b0a7574ea71809"},{"problem":34,"code":"(fn [bot top ]\n  (loop [arr [] bt bot ] \n    (if (= bt top)\n      arr\n      (recur (conj  arr bt ) (inc bt) ) \n      ) \n    )\n  )","user":"57bffed6e4b05aa3c4741c89"},{"problem":34,"code":"(fn range-1 [s e]\n  (when (< s e)\n    (cons s (range-1 (inc s) e))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [low-bound high-bound]\n  (loop [x low-bound\n         acc ()]\n    (if (= x high-bound) (reverse acc)\n      (recur (inc x) (conj acc x)))))","problem":34,"user":"5269c150e4b03e8d9a4a71f8"},{"code":"(fn my-range [s e]\n  (loop [counter s, end e, acc []]\n    (if (= counter end)\n      (seq acc)\n      (recur (inc counter) end (conj acc counter)))))","problem":34,"user":"4f159ea6535d64f603146445"},{"code":"(fn myrange [x1 x2]\n  (take (- x2 x1) (iterate inc x1)))","problem":34,"user":"4fb804f7e4b081705acca2d6"},{"problem":34,"code":"(fn [from to] (take (- to from) (iterate #(+ 1 %) from)))","user":"5bfa3e02e4b0bdcf453d15ca"},{"code":"(fn [p q]\n  (let [x (- q p)] (take x (iterate inc p))))","problem":34,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn rango [a b] (if (= a b) [] (cons a (rango (+ a 1) b))))","problem":34,"user":"50f9776be4b0e7c80cb15a4e"},{"code":"(fn my-range [start end]\n  (if (= end (inc start))\n    (list start)\n    (cons start (my-range (inc start) end))\n    )\n  )","problem":34,"user":"4fcad14ce4b0ee37620e1856"},{"problem":34,"code":"#(take-while (partial not= %2) ((fn up [a] (lazy-seq (cons a (up (inc a))))) %1))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn [x y] ((fn [x y z] (if (not= x y) (recur (inc x) y (concat z (list x))) z)) x y ()))","problem":34,"user":"50d480a0e4b09cc622d65a6b"},{"problem":34,"code":"#(loop [a %1 b %2 r []] (if-not (= a b) (recur (inc a) b (conj r a)) r))","user":"595131bee4b066ee0a44aea9"},{"problem":34,"code":"(fn [beg end]\n    (letfn [(rng [n result]\n              (if (= n end)\n                result\n                (recur (inc n) (conj result n))))]\n      (rng beg [])))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn [x, y]\n  (loop [s x res []]\n    (if (>= s y)\n      res\n      (recur (inc s) (conj res s)))))","problem":34,"user":"4ff201d7e4b0678c553fc330"},{"problem":34,"code":"#(loop [x [] y %1]\n                (let [z 1] (\n                              if (>= y %2)\n                             x\n                             \n                              (recur (conj x y) (inc y)))\n                  )\n                )","user":"592518cde4b072a2710fce66"},{"problem":34,"code":"(fn [beg end]\n  (loop [i (- end beg)\n         res '()]\n    ;; (println \"i \" i \"res \" res)\n    (if (> i 0)\n      (recur (- i 1) (conj res (- (+ beg i) 1)))\n      res)))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":34,"code":"(fn [x y] (loop [result [] i x]\n              (if (= i y)\n\n                result\n                (recur (conj result i) (inc i)))))","user":"54eca495e4b024c67c0cf855"},{"code":"(fn [s e] (take (- e s) (iterate inc s )))","problem":34,"user":"4e6dd0f5535d5021c1a895f3"},{"code":"#(loop [start %1, limit %2, out []]\n    (if (>= start limit)\n      out\n      (recur (inc start) limit (conj out start)) ))","problem":34,"user":"4ec5c81f535d6d7199dd36b6"},{"problem":34,"code":"#(reverse ((fn lo [c l] (if (>= c %2) l (lo (+ c 1) (cons c l)))) %1 ()))","user":"55bedd93e4b01b9910ae2a0d"},{"code":"(fn [x y] \n  (reverse\n  (loop [i x l '()]\n    (cond\n      (= i y) l\n      (< i y) (recur (inc i) (cons i l))))))","problem":34,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn my-range [min max]\n  ((fn inner [max lst]\n    (let [max-next (- max 1)]\n      (if (<= min max-next)\n          (inner max-next\n                 (cons max-next lst))\n          lst))) max '()))","problem":34,"user":"4f03818e535dcb61093f6b00"},{"problem":34,"code":"(fn [l u]\n (take (- u l) (iterate inc l)))","user":"5829d588e4b051871117bf4a"},{"code":"(fn my-range [start end]\n  (if (= start end)\n    []\n    (cons start (my-range (inc start) end))))","problem":34,"user":"4f2acb29e4b0d6649770a040"},{"code":"(fn range'\n  [start end]\n  (if (< start end)\n    (cons start (range' (inc start) end))\n    '()))","problem":34,"user":"5131104ae4b09e21d785bdfe"},{"problem":34,"code":"(fn [a b] (\n    map-indexed (fn [idx itm](+ idx itm)) (repeat (- b a) a)\n    )\n  )","user":"56039843e4b04bb52996e1be"},{"problem":34,"code":"(fn rng [a b] \n  (take-while #(< % b)\n  (iterate inc a)))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn r [s e] (if (>= s e) nil (cons s (r (+ 1 s) e))))","problem":34,"user":"4ebc829e535dfed6da9c6d86"},{"problem":34,"code":"(fn my-range [x b]\n  (if (= x (dec b)) [x] (concat [x] (my-range (inc x) b))))","user":"5600da07e4b04bb52996e174"},{"code":"(fn [start end]\n  (loop [acc '()\n         i (- end 1)]\n    (if (>= i start)\n      (recur (conj acc i) (dec i))\n      acc)))","problem":34,"user":"50f0ec9ce4b0d527ce5b30df"},{"code":"(fn [s f] (take(- f s) (iterate inc s)))","problem":34,"user":"513e9aa0e4b02b2a3d8235c4"},{"code":"(fn self [coll in1 in2]\n    (if (>= in1 in2)\n        coll\n        (self (conj coll (dec in2)) in1 (dec in2)))) '()","problem":34,"user":"528f0106e4b0239c8a67aeeb"},{"problem":34,"code":"(fn __\n  ([min max] (__ min max '()))\n  ([min max l] (if (>= min max) l (__ min (- max 1) (conj l (- max 1))))))","user":"5b3f2ba9e4b02d533a91bc09"},{"code":"(fn [x y]\n  (loop [n x lst []]\n    (if (= n y) lst\n      (recur (inc n) (conj lst n)))))","problem":34,"user":"51b66b31e4b02e5820733406"},{"code":"(fn [head tail]\n  (loop [result '() pos head]\n    (if (= pos tail)\n      result\n      (recur (concat result (list pos)) (inc pos)))))","problem":34,"user":"51da7e49e4b02ceefd947768"},{"problem":34,"code":"#(loop [x %1\n          l (vector)]\n         (if (< x %2)\n            (recur (inc x) (conj l x))\n             l))","user":"5957cc41e4b066ee0a44af76"},{"problem":34,"code":"#(loop [s %1 e %2 r []]\n   (if (= s e)\n     r\n     (recur (inc s) e (conj r s))))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"(fn [m1 m2] \n  (loop [s [] i m1] \n    (if (< i m2) \n      (recur (conj s i) (inc i)) \n      s )))","problem":34,"user":"5022292ee4b0846bc458ae46"},{"problem":34,"code":"(fn rng [st en] (loop [i st  _rng []]\n                    (if (< i en)\n                      (recur (inc i) (concat _rng [i] ))\n                      _rng)))","user":"561814bae4b06b1bb2182a1a"},{"problem":34,"code":"(fn [s e] \n  (loop [sn s\n         seed []]\n    (if (= sn e)\n      seed\n      (recur (inc sn) (conj seed sn)))))","user":"559e7848e4b08a52bd4f97d4"},{"code":"(fn r [from to] (if (>= from to) '() (cons from (r (+ from 1) to))))","problem":34,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"#(take-while (partial > %2)\n             (iterate inc %))","problem":34,"user":"537f4652e4b06839e8705eb1"},{"problem":34,"code":"(fn [f t] (loop [from f to t acc [] ] (if (= from to) acc (recur (inc from) to (conj acc from)))))","user":"559ff9eee4b0acc240e314ee"},{"code":"#(loop [x %2 y % res '()] (if (= x y) res \n(recur (dec x) y (conj res (dec x)))))","problem":34,"user":"50856bd1e4b004985b776e4c"},{"problem":34,"code":"(fn [x y] (loop [i x res []] (if (= i y) res (recur (inc i) (conj res i)) )) )","user":"5666c2dbe4b04acd4f672dc3"},{"problem":34,"code":"(fn [inicio finalExclusivo] \n   (take (- finalExclusivo inicio) (iterate inc inicio)))","user":"59e63a2ce4b08badc2a0c569"},{"problem":34,"code":"(fn [start stop](loop [current [start]] (if (= (last current) (dec stop)) current (recur (conj current (inc (last current)))))))","user":"564348e1e4b08d4f616f5f26"},{"problem":34,"code":"(fn my-range\n  [s max]\n  (->> s\n       (iterate inc)\n       (take-while #(< % max))))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":34,"code":"(fn hlp [start end]\n    (if (= start end) '()\n      (cons start (hlp (inc start) end))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn rng [start end]\n  (if (< start end)\n    (cons start (lazy-seq (rng (inc start) end)))))","problem":34,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"(fn rng [x y]\n    (if (< x (dec y))\n      (lazy-seq (cons x (rng (inc x) y)))\n      [x]))","problem":34,"user":"4ebe766d535dfed6da9c6d94"},{"problem":34,"code":"(fn [start end]\n  (loop [i start e end res []]\n    (if (= i end)\n      res\n      (recur (inc i) e (conj res i)))))","user":"5bf0b940e4b0a6d31fed215c"},{"problem":34,"code":"(fn [lower upper]\n  (take (- upper lower) (iterate #(+ 1 %) lower)))","user":"5f238a59e4b0f565ad99828d"},{"problem":34,"code":"(fn [start end]\n  (let [n (- end start)]\n    (take n (iterate inc start))))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"(fn myrange [start end]\n  (if (= start end)\n    '()\n    (cons start (myrange (+ 1 start) end))))","problem":34,"user":"4f03d4dc535dcb61093f6b6e"},{"code":"(fn [low high] (take-while #(< % high) (iterate inc low)))","problem":34,"user":"4ec79cac535d6d7199dd36e3"},{"code":"(fn f [x y]\n  (if (or (> x y) (= x y))\n    '()\n    (conj (f (+ x 1) y) x)))","problem":34,"user":"52d7b0ade4b09f7907dd137c"},{"problem":34,"code":"(fn\n  [s r]\n  (take (- r s) \n        (iterate inc s)))","user":"526c669be4b03e8d9a4a728f"},{"code":"#(take (- %2 %1) ((fn inc-numbers\n                      [x] (lazy-seq (cons x (inc-numbers (inc x)))))\n                    %1))","problem":34,"user":"4f29afc7e4b0d6649770a02e"},{"problem":34,"code":"(fn [s e] \n  (loop [c s\n         r []]\n    (if (< c e)\n      (recur (inc c) (conj r c))\n      r)))","user":"523578efe4b0a643f2dcb74c"},{"problem":34,"code":"(fn [start end]\n  (loop [s start \n         e end \n         res []]\n    (if (>= s e)\n      res\n      (recur (inc s) \n             e \n             (conj res s)))))","user":"57c7fa03e4b05aa3c4741d12"},{"code":"#(\n  (fn x [r a b]\n    (if (= a b) r (recur (reverse (conj (reverse r) a)) (inc a) b))\n)\n\n\n'() %1 %2)","problem":34,"user":"500ec210e4b00fff93030f9d"},{"problem":34,"code":"(fn [l u]\n  (loop [low l out '()]\n    (if (= low u)\n      (reverse out)\n      (recur (inc low) (conj out low)))))","user":"567a3112e4b05957ce8c6196"},{"problem":34,"code":"(fn [l h] (reverse (#(if (= h %2) %1 (recur (conj %1 %2) (+ 1 %2))) (list l) (+ 1 l))))","user":"55a2ef1ae4b0acc240e3152d"},{"code":"(fn rng [a b] \n\n          (take (- b a) (iterate inc a))\n\n          )","problem":34,"user":"4e78c208535db95036265722"},{"problem":34,"code":"(fn [lo hi] (loop [v lo\n                   r []]\n                    (if (>= v hi)\n                     (apply list r)\n                     (recur (inc v) (conj r v)))))","user":"548f5086e4b0e286459a1239"},{"problem":34,"code":"(fn [s e]\n  (loop [i s x []]\n    (if (>= i e)\n      x\n      (recur (inc i) (conj x i)))))","user":"56aad332e4b03c432f187337"},{"problem":34,"code":"(fn [start stop] (for [i (iterate inc start) :while (< i stop)] i))","user":"55ab07e0e4b0988bba2ad953"},{"problem":34,"code":"(fn [start end] (take (- end start) ((fn range-numbers \n                                              ([n] (lazy-seq (cons n (range-numbers (inc n)))))) start )))","user":"58a9e872e4b01a0c0b232973"},{"problem":34,"code":"(fn my-range\n  [n end]\n  (if (< n end)\n    (cons n (my-range (+ n 1) end))\n    '()))","user":"59141e70e4b0163c97b36f1a"},{"code":"(fn impl-range [x y]\n  (if (= x y)\n    []\n    (concat (list x) (impl-range (+ x 1) y))))","problem":34,"user":"52e17e66e4b09f7907dd1423"},{"problem":34,"code":"(fn [start end]\n  (loop [i      start\n        result  '()] \n    (cond (> (inc i) end)\n      (reverse result)\n    :else\n    (recur (+ i 1) (conj result i)))\n  )\n  )","user":"4e6e1756535d5021c1a895fe"},{"code":"(fn [start end]\n  (loop [s start r []]\n    (if (= s end)\n      r\n      (recur (inc s) (conj r s)))))","problem":34,"user":"522454f4e4b01819a2de42d3"},{"code":"(fn [i j] \n  (take (- j i) (iterate #(inc %) i)))","problem":34,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":34,"code":"(fn my-range\n  ([low high] (my-range low high []))\n  ([low high col] \n  (if (= low high)\n    col\n    (recur (inc low) high (conj col low)))))","user":"56bb660be4b0f26550335954"},{"problem":34,"code":"(fn [start end]\n  (take (- end start) (iterate #(inc %) start)))","user":"56d8a63fe4b0ea9b8538f7e8"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [index start result []]\n    (if (= index end)\n      result\n      (recur (inc index) (conj result index))\n      )))","user":"5f6e5c58e4b02876ed9fd067"},{"code":"#(take-while (partial > %2) (iterate inc %1))","problem":34,"user":"4def301c535d08e6dec9fe12"},{"problem":34,"code":"(fn [x y]\n  (loop [i x ret []]\n    (if (>= i y) ret\n      (recur (inc i) (conj ret i)))))","user":"5a16da30e4b0ff51aa4b31cc"},{"code":"(fn [start end]\n  (for [x (iterate inc start)\n          :while (< x end)] x))","problem":34,"user":"4fccb31be4b0ee37620e1868"},{"problem":34,"code":"#(loop [n %1 l []]\n   (if \n     (= n %2) l\n     (recur (inc n) (conj l n))))","user":"55ff2f89e4b00f4cabc5765e"},{"problem":34,"code":"(fn tel \n  ([s m] (tel s [] m))        \n  ([s l m] (\t\t\n               \tif (< s m)(\n                \t\t\ttel (+ s 1) (conj l s) m\n                           )\n            l\n         )\n  )\n )","user":"597780c7e4b01722bebd4cf1"},{"problem":34,"code":"#(loop [x %1 y %2 acc '()]\n  (if (= y x)\n    acc\n    (recur x (dec y) (conj acc (dec y)))))","user":"568c2d96e4b0dcc4269f40af"},{"problem":34,"code":"(fn [x y]\n  (loop [x1 x\n         y1 y\n         coll '()]\n    (if (< x1 y1)\n      (recur (inc x1) y1 (conj coll x1))\n      (reverse coll))))","user":"5aa15ec0e4b0d174b936c848"},{"code":"(fn [st en]\n  (loop [res [] cnt st]\n  \t(if (>= cnt en) res\n      (recur (conj res cnt) (inc cnt)))))","problem":34,"user":"51721aefe4b0d70c8bbbf24a"},{"code":"#(reduce\n  (fn [xs _]\n    (conj xs (inc (peek xs)))) [%] (repeat (- (dec %2) %) 1))","problem":34,"user":"5222000ce4b0e6a83c8925ea"},{"problem":34,"code":"(fn [lower upper]\n  (loop [i lower acc '()]\n    (if (>= i upper)\n      acc\n      (recur (+ i 1) (concat acc (list i))))))","user":"53bab6fae4b047364c0444fb"},{"problem":34,"code":"(fn [start end]\n       (reduce (fn [c e] (conj c (+ start (count c))))\n               []\n               (repeat (- end start) 0)))","user":"551e6526e4b030e6a24d00e8"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         ;y y\n         res []]\n    (cond (= x y) res\n          :else (recur (inc x) #_y (conj res x))\n          )))","user":"5c3f29d4e4b08cd430848e8f"},{"problem":34,"code":"(fn [l u] (loop [x l re []] (if (= x u) re (recur (+ x 1)  (conj re x)))))","user":"5593619ae4b0c79f6e1db93c"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [x n1\n         acc '()]\n    (if (< x n2)\n      (recur (inc x) (cons x acc))\n      (reverse acc))))","user":"5e3121e5e4b05b4b01516221"},{"code":"(fn[x y]\n  (loop [start x end y result ()]\n    (if (= start end) result \n      (recur  start (dec end) (conj result (dec end))))))","problem":34,"user":"52d36f60e4b099d49816f0c2"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         y y\n         acc []]\n    (if (= (last acc) (dec y))\n      acc\n      (recur (inc x) y (conj acc x)))))","user":"5e5fa1ffe4b0fd0acd15867d"},{"problem":34,"code":"(fn [to from]\n  (take (- from to) (iterate inc to)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn [a b] (take-while (partial > b) (iterate #(inc %) a)))","problem":34,"user":"51d9eb05e4b02ceefd947755"},{"code":"(fn mr\n  [s e]\n  (if (< s  e)\n    (cons s (mr (inc s) e))))","problem":34,"user":"51852961e4b0da5a5be3babb"},{"problem":34,"code":"(fn range2 [start end]\n             (if (= start end)\n                 '()\n                 (cons start (range2 (inc start)  end))))","user":"5ebb4751e4b00a66d4a95262"},{"problem":34,"code":"(fn [x y] (reverse (loop [i x k nil] (if (>= i y) k (recur (inc i) (conj k i))))))","user":"55b0ecb7e4b002ce9d5cbc27"},{"problem":34,"code":"(fn [s e] \n  (loop [x s acc []]\n    (if (< x e)\n    \t(recur (inc x) (conj acc x))\n        acc)))","user":"5b23f306e4b08b1df1c36769"},{"code":"(fn [start max]\n  (loop [s start, m max, vals ()]\n    (if (and (seq vals) (= (- m 1) (first vals)))\n      (reverse vals)\n      (recur s m (cons (+ s (count vals)) vals)))))","problem":34,"user":"4f0f03ce535d0136e6c2232a"},{"problem":34,"code":"(fn [start end]\n   (loop [v start res []]\n     (if (< v end)\n       (recur (inc v) (conj res v))\n       res\n       )))","user":"606e0e95e4b069485764de1a"},{"problem":34,"code":"(fn [mn mx] (for [x (iterate #(+ 1 %) mn) :while (< x mx)] x))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [start end]\n  (loop [e (dec end) \n         v '()]\n    (if (< e start)\n      v\n      (recur (dec e) (cons e v)))))","problem":34,"user":"502cff22e4b0b2ab8d5c7e72"},{"problem":34,"code":"(fn [start,end]\n  (loop [res [], st start]\n    (if (= st end) res\n      (recur (concat res [st]) (+ 1 st)))))","user":"55486ee6e4b0a04f7929955a"},{"problem":34,"code":"(fn in-range [x y]\n  (if (= x (- y 1))\n    (list x)\n    (conj (in-range (inc x) y) x)))","user":"5b1674a3e4b038aa55420d55"},{"code":"(fn hoge [x y]\n  (if (= x y) '()\n      (cons x (hoge (+ x 1) y))))","problem":34,"user":"4e2e6460535deb9a81d77f0b"},{"problem":34,"code":"(fn [x y] (->> (iterate inc x) (take (- y x))))","user":"5a8e9fb5e4b05369db4d2529"},{"problem":34,"code":"(fn my-range\n  [start stop]\n  (loop [result [] current start]\n    (if (>= current stop)\n      result\n      (recur (conj result current) (+ current 1)))))","user":"578bbd3ee4b0ebec4cfb754e"},{"code":";;(fn [start end] (take-while #(< % end ) (iterate inc start)))\n#(take-while (partial > %2) (iterate inc %1))","problem":34,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn [str below] (take-while #(< % below) (iterate inc str)))","problem":34,"user":"4ef60a02535dced4c769f24b"},{"code":"(fn rng [start end]\n  (loop [curr start acc []]\n    (if (= curr end)\n        acc\n        (recur (inc curr) (conj acc curr)))))","problem":34,"user":"516385cee4b055933a9ca02d"},{"problem":34,"code":"(fn myrange\n  [start stop]\n  (let [x start]\n    (take-while (partial > stop) (iterate inc x) )\n  )\n)","user":"5351fca5e4b084c2834f4aec"},{"code":"(fn [a b]\n  (take (- b a) (iterate inc a))\n  )","problem":34,"user":"52d42021e4b09f7907dd132a"},{"problem":34,"code":"(fn rng \n  ([x y] (rng x y (list x)))\n  ([x y z] (if (= (inc x) y) \n             (reverse z)\n             (rng (inc x) y (conj z (inc x)))\n             )\n   )\n  )","user":"54ab46fee4b09f271ff37cc3"},{"code":"(fn rng [start end] (when (< start end) (list* start (rng (+ start 1) end))))","problem":34,"user":"5241fe85e4b076e5d3121f42"},{"code":"(fn [a b] (take (- b a) (iterate #(inc %) a)))","problem":34,"user":"4e6093c9535d8ccf87e9fe54"},{"code":"(fn [from to]\r\n  (loop [pos from\r\n   ret-vec []]\r\n    (if (< pos to)\r\n      (recur (inc pos) (conj ret-vec pos))\r\n      (seq ret-vec)\r\n      )))","problem":34,"user":"4f044285535dcb61093f6bb5"},{"problem":34,"code":"(fn f ([start end] \n     \t(f start end []))\n  \t([start end coll] \n     \t(if (= start end)\n          \tcoll\n        \t(f (inc start) end (conj coll start)))))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":34,"code":"(fn [start end] \n  (loop [cur start\n         end end\n         lst []]\n  (if (= cur end)\n    lst\n    (recur (inc cur) end (conj lst cur)))))","user":"545bc5a8e4b01be26fd74658"},{"problem":34,"code":"(fn [a b]\n  (loop [l []\n         x a]\n    (if (< x b)\n      (recur\n       (conj l x)\n       (inc x))\n      l)))","user":"4f213e2ee4b0d66497709fcf"},{"code":"#(loop [x %1 r []] (if (= x %2) r (recur (inc x) (conj r x))))","problem":34,"user":"50921f9ae4b09a7d0b586de1"},{"problem":34,"code":"(fn myrange [initial final] \n  (if (not= initial final) \n    (lazy-seq (cons initial (myrange (inc initial) final))))\n  )","user":"583f1533e4b089d5ab817dc8"},{"problem":34,"code":"(fn m\n  ([a b]\n   (m () a b))\n  ([r a b]\n   (if (> b a)\n     (m (cons (dec b) r) a (dec b))\n     (identity r))))","user":"5829bc55e4b051871117bf49"},{"problem":34,"code":"(fn [i f]\n  (loop [x (- f i 1)\n         r (list (- f 1))]\n    (if (= 0 x)\n      r\n      (recur (dec x) (conj r (-> r \n             \t\t \t    (first)\n                \t\t\t (dec)))))))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"code":"(fn [m n] (take  (- n m) (iterate inc m)))","problem":34,"user":"52e276d9e4b09f7907dd1436"},{"problem":34,"code":"(fn\n  [a b]\n(loop [i a\n       lst ()]\n  (if (= i b)\n    (reverse lst)\n    (recur (inc i)\n           (cons i lst)))))","user":"59deba46e4b01968742fed7f"},{"code":"#(loop [s %1 e %2, cnt s, r '()]\n  (if (= cnt e)\n  (reverse r) \n(recur s e (inc cnt) (cons cnt r))))","problem":34,"user":"4eabb245535d7eef30807319"},{"code":"(fn my-range [start end]\n  ( (fn inc-range [place end]\n      (if (> place (dec end))\n        '()\n        (conj (inc-range (inc place) end) place)\n        ))\n    start end\n    ))","problem":34,"user":"511d4a52e4b022853b0e07a1"},{"problem":34,"code":"(fn myrange [start end] (if (< start end) (conj (myrange (inc start) end) start) '()))","user":"54f3d6c7e4b050824f58f5cb"},{"code":"(fn [mn mx]\n  (loop [l [mn]]\n    (if (= (inc (last l)) mx)\n      l\n      (recur (conj l (inc (last l)))))))","problem":34,"user":"4eaa5c51535d7eef3080730a"},{"code":"(fn f [n m]\n  (when (< n m)\n    (cons n (f (inc n) m))))","problem":34,"user":"5213d7aae4b0961f15ac4d72"},{"problem":34,"code":"(fn [start end]\n  ((fn myrange [m s e]\n    (if (= s e)\n    m\n    (myrange (concat m [s]) (inc s) e)))\n   [] start end)\n)","user":"5881d1c2e4b0f1effa3b7644"},{"problem":34,"code":"(fn [start limit] \n  (loop [e start, limit limit, res []]\n    (if (= e limit)\n      res\n      (recur (inc e) limit (conj res e)))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":34,"code":"#(loop [low %1 high %2 ret []] (if (< low high) (recur (inc low) high (conj ret low)) ret))","user":"53bfd8c4e4b0c98a41f5cca8"},{"code":"(partial \n (fn [acc i j] \n   (if (= i j) (reverse acc) \n     (recur (conj acc i) (inc i) j)))'())","problem":34,"user":"5273e006e4b03e8d9a4a7495"},{"problem":34,"code":"#(loop [x %1\n        xs []]\n   (if (= x %2)\n     xs\n     (recur (inc x) (conj xs x))))","user":"5d29c06be4b01671435dbc6b"},{"problem":34,"code":"(fn [from to] \n  (loop [n from l []]\n         (if \n           (< n to) \n            \n           (recur (inc n) (conj l n))\n           l\n           )))","user":"5468a110e4b00cfc9eacc13d"},{"problem":34,"code":"(fn [l r]\n   (take (- r l) (iterate inc l)))","user":"55b54ecbe4b01b9910ae2987"},{"code":"(fn myrange [low high]\r\n  (if (= low high)\r\n    ()\r\n    (conj (myrange (inc low) high) low)))","problem":34,"user":"4dd023dd535d5973398f92ad"},{"code":"#(loop [acc () cur %1] (if (= cur %2) acc (recur (concat acc (list cur)) (inc cur))))","problem":34,"user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn [start stop]\n  (loop [i start\n        results '()]\n    (if (= i stop)\n      (reverse results)\n      (recur (inc i) (conj results i)))))","problem":34,"user":"4efb92ce535dced4c769f27a"},{"problem":34,"code":"(fn my-range [low high] (if (>= low high) () (cons low (my-range (inc low) high))))","user":"55667715e4b0c656e3ff1834"},{"code":"#(loop [i %1 b %2 acc '()]\n    (if (= i b)\n      (reverse acc)\n      (recur (inc i) b (cons i acc))))","problem":34,"user":"4f9b3532e4b0dcca54ed6d13"},{"code":"#(\n take ( - %2 %1 ) ( iterate inc %1 ) \n)","problem":34,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn rng [start max]\n  (if (= start (dec max))\n    (conj nil start)\n    (concat (conj nil start) (rng (inc start) max))))","problem":34,"user":"50ca2faee4b0a409464667dc"},{"problem":34,"code":"(fn [a b] (loop [x a xs ()] (if (< x b) (recur (inc x) (cons x xs)) (reverse xs))))","user":"589a4aece4b00487982d530b"},{"problem":34,"code":"(fn [start end] (take (- end start) (iterate inc start) ) )","user":"558bdcefe4b0277789237633"},{"problem":34,"code":"(fn rng [a b]\n  (if (< a b)\n    (cons a (rng (+ a 1) b))\n    []\n  )\n)","user":"5bca2c71e4b07a9b28b100e7"},{"code":"#( take (- %2 %1) (iterate inc %1))","problem":34,"user":"52cdec6ce4b07d0d72b27383"},{"code":"#(apply list (loop [v %1 r []]\n               (if (= v %2) r\n                 (recur (inc v) (conj r v)))))","problem":34,"user":"5196568fe4b04c0af7ff3c1c"},{"code":"(fn f\n  ([l h] (f l (dec h) nil))\n  ([l h r]\n  \t(if (= l h)\n  \t  (cons  h r)\n  \t  (cons l (f (inc l) h r)))))","problem":34,"user":"5012da69e4b0c8732600222d"},{"problem":34,"code":"(let\n  [\n     buildRange (fn x [lowerBound upperBound builder]\n                  (if (> lowerBound upperBound)\n                    builder\n                    (x lowerBound (- upperBound 1) (cons upperBound builder))))\n  ]\n  (fn [lowerBound upperBound] (buildRange lowerBound (- upperBound 1) '()))\n)","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":34,"code":"(fn [a b]\n    (loop [res []\n           n a]\n      (if (< n b)\n        (recur (conj res n) \n               (inc n))\n        res)))","user":"4ff9ea75e4b0678c553fc3b3"},{"code":"#(loop [mi %1 ma %2 li nil]\n  (if (= mi ma)\n    li\n    (recur mi (dec ma) (conj li (dec ma)))))","problem":34,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(new clojure.core$range)","problem":34,"user":"4e3b6bff535deb9a81d77f52"},{"problem":34,"code":"(fn [s e]\n     (take (- e s) (iterate inc s)))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":34,"code":"#(\n  (fn [fst lst acc]\n    (if (= lst fst)\n      acc\n      (recur fst (dec lst) (conj acc (dec lst)))\n    )\n  ) %1 %2 '()\n)","user":"53342a1ce4b019098a6f8b8b"},{"problem":34,"code":"(fn rnge [min max]\n  (loop [current (- min 1)\n         m (- max 1)\n         data '()]\n    (if (>= current m)\n      (reverse data)\n      (let [i (inc current)]\n        (recur i m (conj data i))))))","user":"4ef08bd6535dced4c769f20a"},{"code":"(fn rang [a b]\n  (if (>= a b) \n      ()\n      (cons a (rang (inc a) b))\n  ))","problem":34,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":34,"code":"(fn problem34\n  [start stop]\n  (let [f (fn my-range\n           ([] (my-range start))\n           ([n] (concat [n] (lazy-seq (my-range (inc n))))))]\n    (take-while #(< % stop) (f))))","user":"567c7fefe4b05957ce8c61bc"},{"problem":34,"code":"(fn [begin end]\n  (loop [curr (dec end)\n         accum ()]\n    (if (>= curr begin)\n      (recur (dec curr) (cons curr accum))\n      accum)))","user":"53d20e14e4b00fb29b22131a"},{"problem":34,"code":"(fn [x y]\n  (loop [a x xs []]\n    (if (= a y)\n      xs\n      (recur (inc a) (conj xs a)))))","user":"5c87c79be4b048ec896c591b"},{"problem":34,"code":"#(loop [item (dec %2), result '()] (if (< item %1) result (recur (dec item) (conj result item))))","user":"5a2185c6e4b0ff51aa4b32b1"},{"problem":34,"code":"(fn [start end]\n      (loop [n start acc []] (if (< n end) (recur (+ n 1) (conj acc n)) acc)))","user":"5a062e07e4b01bb0ae8afdc5"},{"code":"(fn [s l]\n  (take (- l s) (iterate inc s)))","problem":34,"user":"51ea4e35e4b0f1f103a0d148"},{"code":"(fn [start end] (loop [n (dec end) coll '()] (if (< n start) coll (recur (dec n) (conj coll n)))))","problem":34,"user":"507330e6e4b0e3170b5a8698"},{"problem":34,"code":"(fn\n  [n1 n2]\n  (loop [c n1\n         s '()]\n        (if (= c n2)\n          (reverse s)\n          (recur (inc c) (cons c s) ))\n\n    )\n  )","user":"5683b67ce4b0945ebc182a9f"},{"code":"(fn [l h] \n   (loop [result '() x (dec h)]\n    (if (= x l) (cons x result)\n      (recur (cons x result) (dec x))\n    )\n  )\n)","problem":34,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":34,"code":"(fn rang\n  ([start stop] (rang start stop []))\n  ([start stop acc] (if (= start stop) acc  (rang (inc start) stop (conj acc start)) ))\n  )","user":"595fe942e4b066ee0a44b075"},{"problem":34,"code":"(fn temp\n  [start end]\n  (loop [c start\n         res '()]\n    (if (= c end)\n      (reverse res)\n      (recur (inc c) (cons c res)))))","user":"5a3b5cfde4b001c08efc0cd4"},{"problem":34,"code":"(fn [a b] (loop [acc '()\n                 n a]\n            (if (>= n b)\n              (reverse acc)\n              (recur (cons n acc) (inc n)))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":34,"code":"(fn [s e] (loop [ran [s]]\n     (let [curr (last ran)]\n     (if (= curr e)\n       (drop-last ran)\n       (recur (conj ran (inc curr)))))))","user":"52cfb277e4b07d0d72b273ac"},{"code":"(fn range' [s e]\n  (let [stepper (fn foo [n] (cons n (lazy-seq (foo (inc n)))))]\n    (take (- e s) (stepper s))))","problem":34,"user":"51f2ab8be4b0210f90e74554"},{"problem":34,"code":"(fn p34 [start stop]\n\n  (let [f\n          (fn my-range\n            ([] (my-range start))\n            ([n] (concat [n] (lazy-seq (my-range(inc n)))))\n            )\n        ]\n  (take-while #(< % stop) (f))\n  ))","user":"5c31517de4b0d62ef62d9f28"},{"problem":34,"code":"(fn ccc[a b](apply list((fn z[a b n ret](cond\n                                     (= n b) ret\n                                       :else (z a b (inc n)(conj ret n))))\n                a b a [])))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":34,"code":"(fn range2\n  [a b]\n  (loop [i   a\n         res ()]\n    (if (= i b)\n      (reverse res)\n      (recur (inc i)\n             (cons i res)))))","user":"5c7dad57e4b0d597f478caba"},{"problem":34,"code":"(fn get-range [start end]\n  (loop [r '()\n         s start\n         e (dec end)]\n    (if (< e s)\n      r\n      (recur (conj r e) s (dec e)))))","user":"5e2f3be2e4b05b4b01516200"},{"code":"#(loop [acc [], start %1, bound %2]\n  (if (>= start bound)\n    acc\n    (recur (conj acc start) (inc start) bound)))","problem":34,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":34,"code":"(fn [s e]\n    ((fn [s e acc]\n      (if (< s e)\n        (recur s (dec e) (conj acc (dec e)))\n        acc)) s e '()))","user":"55dc2ad1e4b050e68259b3ac"},{"problem":34,"code":"(fn foo [fir rang]\n        (if (< fir rang)\n          (conj (foo (inc fir) rang) fir)\n          nil)\n        )","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn my-range [start end]\n  (if (= start end)\n    nil\n    (cons start (my-range (inc start) end))))","problem":34,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn [from to]\r\n  (loop [i from values '()]\r\n    (if (< i to)\r\n      (recur (+ i 1) (cons i values))\r\n      (reverse values))))","problem":34,"user":"4e75edfe535d7a570dd295c7"},{"problem":34,"code":"(fn my-range [a e]\n  (loop [xs '() i (dec e)]\n    (if (>= i a)\n      (recur (conj xs i) (dec i))\n      xs)))","user":"5745f616e4b009280f9f2b58"},{"problem":34,"code":"(fn [start end]\n  \t(loop [acc [] start start end end]\n      \t(if (= start end)\n          \tacc\n          \t(recur (conj acc start) (inc start) end))\n      \t)\n \t)","user":"5703a557e4b08d47c97781f4"},{"problem":34,"code":"(fn [begin end]\n  (take (- end begin)\n        (iterate inc begin)))","user":"59e8a952e4b0249b72820733"},{"code":"(fn [x y] (take (- y x) (iterate inc x)))","problem":34,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":34,"code":"#(loop [i %1 res []] (if (= i %2) res (recur (inc i) (conj res i))))","user":"59874ff6e4b021a7a535fea1"},{"code":"(partial\n(fn [result s e]\n  (if (= s e)\n    result\n    (recur (conj result s) (+ 1 s) e)))\n[])","problem":34,"user":"4ec12577535dfed6da9c6da8"},{"problem":34,"code":"(fn my-range\n  ([start stop] (my-range start stop start))\n  ([start stop current]\n        (cond\n         (= current stop) '()\n         :else (cons current (my-range start stop (inc current))))))","user":"5a342188e4b0ddc586f153bd"},{"code":"(fn r [lo hi]\n  (when (< lo hi) (cons lo (r (inc lo) hi)))\n)","problem":34,"user":"4f8b56dae4b02e764a0a517e"},{"problem":34,"code":"(fn f1 [x y]\n  (if (= x (dec y))\n    [x]\n    (reduce conj [x] (f1 (inc x) y))\n    )\n  )","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn my-range [from to]\n    (if (>= from to) ()\n      (cons from \n        (lazy-seq (my-range (inc from) to)))))","problem":34,"user":"533e45a7e4b085b17e897d8c"},{"problem":34,"code":"(fn [start end] \n  (loop [i start \n         result []] \n    (let [result (conj result i)]\n    (if (= i (dec end)) \n      result \n      (recur (inc i) result)))))","user":"55d4273de4b0e31453f64a70"},{"code":"(fn f [s e & r]\n  (let [d (dec e)\n        r (first r)]\n    (if (= e s) r (f s d (cons d r)))))","problem":34,"user":"52b0323ee4b0c58976d9acc6"},{"problem":34,"code":"(fn myrange [low hi]\n  (if (< low hi)\n      (conj (myrange (+ 1 low) hi) low)\n      ()))","user":"54f06aede4b024c67c0cf896"},{"problem":34,"code":"(fn my-range [start stop]\n  (loop [x start\n         result ()]\n    (if (>= x stop)\n      result\n      (recur (inc x) (concat result (list x))))))","user":"5688a01be4b0dcc4269f406d"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [s start e (dec end) l '()]\n    (if (< s e)\n      (recur s (dec e) (conj l e))\n      (conj l s))))","user":"548c8115e4b0e286459a120c"},{"code":"(fn rng\n\t([l u] (rng l u [(- u 1)]))\n\t([l u s]\n\t\t(if\n\t\t\t(> (first s) l)\n\t\t\t(rng l u (cons (- (first s) 1) s))\n\t\t\ts)))","problem":34,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":34,"code":"(fn [s f]\n    (loop [current s\n           result []]\n      (if (< current f)\n        (recur (inc current) (concat result [current]))\n        result)))","user":"586b6753e4b01531a375e956"},{"code":"(fn range2[fst lst] (if (= fst lst)\n                '()\n                (concat [fst] (range2 (inc fst) lst))))","problem":34,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn [f t]\n  ((fn [c r]\n     (if (= c t)\n       r\n       (recur (inc c)\n              (concat r [c]))))\n   f []))","problem":34,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":34,"code":"(fn [lo hi] (reverse (first (drop (- hi lo) (cons nil (iterate #(cons (inc (first %)) %) (list lo)))))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":34,"code":"(fn [a b]\n  (take (- b a) (iterate inc a))\n)","user":"5a984657e4b0d174b936c78a"},{"code":"(fn [x y] \n  (loop [end (- y 1) start x coll '()]\n    (if (> start end)\n      coll\n      (recur (- end 1) start (cons end coll)))))","problem":34,"user":"4edbca52535d10e5ff6f531e"},{"problem":34,"code":"(fn number34 [l u]\n  (take (- u l) (iterate inc l)))","user":"54074fc5e4b0addc1aec66b6"},{"problem":34,"code":"(fn ranger [a b]\n  (take-while #(< % b)\n              (iterate inc a)))","user":"5d47fa13e4b07c84aa5ae6b6"},{"code":"#(take-while (partial not= %2) (iterate inc %1))","problem":34,"user":"4fa11204e4b0dcca54ed6d56"},{"problem":34,"code":"(fn rr [x y] \n(loop [cnt x  result []] \n (if (= cnt y) result\n   (recur (inc cnt) (conj result cnt)))))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn rng [start end] \n   (if (= start (dec end)) \n     (conj '() start)\n     (conj (rng (inc start) end) start)))","problem":34,"user":"4fecebe1e4b0681fd128dcac"},{"code":"#(take-while (fn [a] (< a %2)) (iterate inc %))","problem":34,"user":"4e9660ec535dbda64a6f6b44"},{"problem":34,"code":"#(take (- %2 %)\n         (iterate inc %))","user":"5466aabbe4b01be26fd746e8"},{"problem":34,"code":"(fn range* [from to]\n  (let [s (repeat (Math/abs (- to from)) from)\n        f (first s)\n        w (rest s)]\n    (reduce (fn [acc _] (concat acc (list (inc (last acc))))) [f] w)))","user":"5a591d04e4b05d388ecb6c90"},{"problem":34,"code":"(fn rng [lo hi]\n  (if (>= lo hi) \n    '()\n    (conj (rng (inc lo) hi) lo)))","user":"59a0286be4b0871e7608b82f"},{"problem":34,"code":"(fn [a b]\n   (loop [y (dec b)\n          result (conj () y)]\n     ;(println y result)\n     (if (> y a)\n      (let [y (dec y)]\n      (recur y (conj result y)))\n      result\n    )\n  ))","user":"58d6caf5e4b03c36ff7e5975"},{"problem":34,"code":"(fn myrange [a b]\n                          (loop [c a\n                                 d ()]\n                            (if\n                             (= c  b)\n                              (reverse d)\n                              (recur (inc c) (conj d  c) ))))","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":34,"code":"(fn [s e] (loop [r []\n                 i s]\n            (if (< i e)\n              (recur (conj r i) (inc i))\n              r)))","user":"5918db70e4b09b4ee5954bbb"},{"problem":34,"code":"(fn listify\n  ([x y]\n    (listify x (dec y) '()))\n  ([x y l]\n    (if (>= y x)\n      (recur x (dec y) (conj l y))\n      l)))","user":"56e4991fe4b03a7c14b85a4f"},{"problem":34,"code":"(fn rang [a b]\n   (if (or (= b (inc a)) (= a b))\n     [a]\n     (cons a (rang (inc a) b)  \n          )))","user":"579601c8e4b0e215f87e8492"},{"problem":34,"code":"(fn r [start end]\n  (if (>= start end) () (cons start (r (inc start) end))))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn rep [f t]\r\n  (if (= f t) '() (cons f (rep (inc f) t))))","problem":34,"user":"4e111538535d04ed9115e7c3"},{"code":"(fn [a, b] (take (- b a) (iterate inc a)))","problem":34,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn d [xstart xend]\n  (if (= xstart xend)\n    '()\n    (conj (d (+ xstart 1) xend) xstart)))","problem":34,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":34,"code":"(fn [b e]\n   (loop [i b\n          r []]\n     (if (< i e) \n       (recur (inc i) (conj r i))\n       r)))","user":"55deeface4b050e68259b3ea"},{"code":"(fn r [s l]\n  (when (< s l)\n    (cons s (r (inc s) l))))","problem":34,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"code":"(fn [x y]\r\n  (loop [n x, acc []]\r\n    (if (>= n y) (seq acc)\r\n      (recur (inc n) (conj acc n)))))","problem":34,"user":"4dea9406535d08e6dec9fe01"},{"problem":34,"code":"#(reverse (loop [c %1 a ()] (if (< c %2) (recur (inc c) (conj a c)) a)))","user":"58cba946e4b03c36ff7e584f"},{"code":"(fn my-range [a b] \n   (if (< a b) (cons a (my-range (inc a) b)) '()))","problem":34,"user":"508d8ab2e4b0f17d83ea26be"},{"code":"(fn [a b]\n  (loop [x (dec b) s nil]\n    (if (< x a)\n      s\n      (recur (dec x) (cons x s)))))","problem":34,"user":"4fa982fae4b081705acca1e0"},{"problem":34,"code":"#(loop [a %1 b %2 x []] (if (< a b) (recur (inc a) b (conj x a)) x ))","user":"586631a2e4b0f14aab7c885a"},{"problem":34,"code":"#(take (- %2 %) (iterate                       inc %))","user":"4fa436dce4b081705acca19b"},{"problem":34,"code":"#(loop [cnt (dec %2) result '()] (if (< cnt %1) result (recur (dec cnt) (cons cnt result))))","user":"5978b4c9e4b01722bebd4d13"},{"code":"(fn [from to]\r\n  (loop [coll []\r\n   n from]\r\n    (if-not (> to n)\r\n      (seq coll)\r\n      (recur (conj coll n) (inc n)))))","problem":34,"user":"4fdc067fe4b05e33b9224f69"},{"code":"(fn ran [l h] (if (>= l h)\n            '()\n            (conj (ran (inc l) h) l)))","problem":34,"user":"52437703e4b076204b44fabf"},{"problem":34,"code":"(fn [start rnge] (loop [i start acc []]\n  (if (= i rnge)\n    acc\n    (recur (inc i) (conj acc i)))))","user":"54aa2462e4b09f271ff37cb4"},{"code":"#(loop [x %1 y %2 result []] (if (= x y) result (recur (+ x 1) y (conj result x)) ))","problem":34,"user":"52d4acc8e4b09f7907dd1333"},{"problem":34,"code":"(fn myrange \n  [start end]\n  (when (< start end)\n    (lazy-seq (cons start (myrange (inc' start) end)))))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":34,"code":"(fn rang [s f] (take (- f s) (iterate inc s)))","user":"57db2369e4b0bd073c20241f"},{"problem":34,"code":"(fn [a b]\n  (loop [l [] i a]\n    (if (< i b) (recur (conj l i) (inc i)) l)\n  )\n)","user":"5cbdc591e4b026601754ba00"},{"code":"(fn rng [a b] (if (>= a b) '() (cons a (rng (+ a 1) b))))","problem":34,"user":"4ded582d535d08e6dec9fe0c"},{"problem":34,"code":"(fn [x y]\n  (take(- y x) (iterate inc x)))","user":"591f5124e4b09b4ee5954c45"},{"code":"(fn [a b] (loop [result []\n                 i a]\n            (if (= i b)\n                result\n                (recur (conj result i) (inc i)))))","problem":34,"user":"4daf36c2edd6309eace4d175"},{"problem":34,"code":"(fn ran [s n]\n  (if (<= (dec n) s) (list s)\n    (conj (ran (inc s) n) s)))","user":"51647faae4b003cf19fdde3b"},{"problem":34,"code":"(fn [fr t]\n    (loop [o [] a fr b t]\n          (if (< a b)\n               (recur (conj o a) (+ a 1) b)\n          o)))","user":"535c2d21e4b04ce2eb3ed2b2"},{"code":"#(take (- %2 %1) ( iterate inc %1))","problem":34,"user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn [x y]\n    (take (- y x) (iterate (partial + 1) x)))","problem":34,"user":"4e7e032b535db169f9c796fc"},{"problem":34,"code":"#(loop [result []\n        i %1]\n   (if (= i %2)\n     result\n     (recur (conj result i) (inc i))))","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn s [f t] (if (< f t) (cons f (lazy-seq (s (inc f) t))) '()))","problem":34,"user":"525b0b51e4b0cb4875a45d01"},{"code":"(fn [start stop]\n  (take-while #(< % stop) (iterate inc start)))","problem":34,"user":"4daea889edd6309eace4d15b"},{"code":"(fn ! [b e] (if (= b e) (list) (cons b (! (inc b) e))))","problem":34,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":34,"code":"(fn [a b]\n (take (- (max a b) (min a b)) (iterate inc (min a b))))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [a b]\n  (loop [accum []\n\t\t   i a]\n\t    (if (= i b)\n\t    \taccum\n\t    \t(recur (conj accum i) (inc i)))))","problem":34,"user":"4fb57e06e4b081705acca2bf"},{"problem":34,"code":"(fn my-range [low hi]\n  (reverse\n   (loop [counter low\n          range-list '()]\n     (if (= counter hi)\n       range-list\n       (recur (+ counter 1) (conj range-list counter))))))","user":"5578c67fe4b05c286339e08d"},{"problem":34,"code":"#((fn [v i n] (if (< i n) (recur (conj v i) (inc i) n) v)) [] %1 %2)","user":"5abe2fc2e4b073f17744271e"},{"problem":34,"code":"(fn nx ([s e l] (if (<= e s) l (nx s (dec e) (conj l (dec e))))) ([s e] (nx s e '())))","user":"56c6a3c3e4b05cc29241eeb3"},{"code":"(fn my-range [start stop]\n  (let [diff (- stop start)]\n    (if (<= diff 0)\n      '()\n      (conj (my-range (inc start) stop) start))))","problem":34,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":34,"code":"(fn new-range\n   ([start end] (new-range start end []))\n   ([start end acc]\n    (if (>= start end)\n      acc\n      (recur (inc start) end (conj acc start))))\n   )","user":"58ffc6cfe4b0438e51c2d008"},{"code":"(fn rang [m n]\n  (cond\n    (= m (dec n)) (list m)\n    :else (cons m (rang (inc m) n))\n    )\n  )","problem":34,"user":"4ecfa05c535d44c135fd68b9"},{"problem":34,"code":"(fn rng [a b]\n  (if (= a b)\n    '()\n    (lazy-seq (cons a \n                    (rng (+ a 1) b)))))","user":"5800edaae4b0a837a8b30c48"},{"code":"#(loop [x %1, y %2, acc '()] (if (= x y) acc (recur (inc x) y (concat acc [x]))))","problem":34,"user":"52f7ac81e4b047fd55836fc6"},{"problem":34,"code":"(fn [s e] (loop [x (- e s) coll []] (if (pos? x) (recur (dec x) (conj coll (- e x))) coll)))","user":"5659679ae4b068f2fe63dbeb"},{"problem":34,"code":"(fn [start stop]\n  (for [x (iterate inc start)\n        :while (< x stop)]\n    x))","user":"5724a4dae4b0c5bde472c0fe"},{"problem":34,"code":"(fn alt-range [begin end]\n  (loop [start begin res []]\n    (if (< start end)\n      (recur (inc start) (into res (list start)))\n      (seq res))))","user":"588f500ae4b00487982d51a4"},{"problem":34,"code":"(fn [s e]\n    (loop [s s, xs []]\n      (if (< s e)\n        (recur (inc s) (conj xs s))\n        xs)))","user":"6026d2cae4b0d5df2af22232"},{"problem":34,"code":"(fn my-range [mn mx] \n  (take (- mx mn) (iterate inc mn)))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn[x y]\n  (loop [z x\n        r ()] \n    (if (< z y)\n       (recur (inc z) (cons z r))\n       (reverse r))))","problem":34,"user":"504f0036e4b0e7ad84dbc4aa"},{"code":"(fn [x y] (take (- y x) (iterate #(inc %) x)))","problem":34,"user":"4f065217535dcb61093f6c0c"},{"code":"(fn rng [lb ub]\n  (if (< lb ub)\n    (list* lb (rng (inc lb) ub))\n    nil))","problem":34,"user":"4f6fd95fe4b07046d9f4efee"},{"problem":34,"code":"#(loop [low %1 res []]\n  (if (>= low %2)\n    (reverse res)\n    (recur (inc low) (cons low res))))","user":"56d902c3e4b0ea9b8538f7ed"},{"problem":34,"code":"(fn f [x y]\n  (if (= x y) \n    '()\n    (cons x (f (+ x 1) y))))","user":"55e3e7a8e4b050e68259b44a"},{"problem":34,"code":"(fn [lower upper]\n  (loop [lst '() my-next lower]\n    (if (= my-next upper) lst (recur (concat lst [my-next]) (+ my-next 1)))))","user":"575ddfd1e4b02ea11479938d"},{"problem":34,"code":"(fn my-rng \n  ([num1 num2] (my-rng num1 num2 []))\n  ([num1 num2 rng] (if (= num2 num1) \n                     rng (my-rng (inc num1) num2 (conj rng num1)))))\n\n\n\n;;(defn sum\n;;➊   ([vals] (sum vals 0)) \n ;; ([vals accumulating-total]\n;;➋      (if (empty? vals)  \n ;;      accumulating-total\n  ;;     (sum (rest vals) (+ (first vals) accumulating-total)))))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"problem":34,"code":"#(loop [result [] x %1 m %2] (let [result (conj result x), x (inc x)] (if (= x m) result (recur result x m)) ))","user":"56f5d0efe4b046a417f92078"},{"code":"(fn rg [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"5315ec83e4b08068f379ed39"},{"code":"(fn [s e]\n  (loop [acc '()\n         num s\n         total (- e s)]\n    (if (= 0 total)\n       (reverse acc)\n       (recur (cons num acc) (inc num) (dec total)))))","problem":34,"user":"523bd9c0e4b07becd5be2201"},{"problem":34,"code":"(fn myRange [lower upper]\n  (loop [counter lower\n         result []]\n    (if (= counter upper)\n      result\n      (recur (inc counter) (conj result counter)))))","user":"5f7251b9e4b02876ed9fd08a"},{"problem":34,"code":"#(-> (take (- %2 %1) (iterate inc %1)))","user":"5832be57e4b089d5ab817c86"},{"problem":34,"code":"(fn [start end]\n    (loop [result []\n           n start]\n      (if (= n end)\n        result\n        (recur (conj result n) (inc n)))))","user":"602aa5f1e4b0d5df2af2225d"},{"problem":34,"code":"(fn rang [from to]\n  (if (= from to) \n   nil\n   (cons \n     from\n     (rang (inc from) to))))","user":"57501de0e4b02ea11479926c"},{"problem":34,"code":"(fn myrange \n  ([x y] (myrange x y 1))\n  ([x y z]\n   (seq \n    (loop [a x b y s z r []]\n     (if (< a b)\n       (recur (inc a) b s  (conj r a))\n       r)))))","user":"5fb3a096e4b08cb800c85b35"},{"code":"(fn rang [l h] \n  (if (= l h) \n    '()\n    (cons l (rang (+ l 1) h))\n    )\n  )","problem":34,"user":"525cc137e4b0cb4875a45d46"},{"problem":34,"code":"(fn my-range\n  [s e]\n  (take (- e s) (iterate inc s)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":34,"code":"(fn [f t]\n  (loop [_ (dec t) r '()]\n    (if (not (< _ f))\n      (recur (dec _) (conj r _))\n      r\n      )\n    )\n  )","user":"58f3a2d4e4b0438e51c2ceac"},{"problem":34,"code":"(fn [acc x y] (if (= x y) acc (recur (cons (dec y) acc) x (dec y)))) '()","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [min max]\n  (loop [s min f (- max 1) ret '()]\n    (if (> s f)\n      ret\n      (recur\n        s\n        (- f 1)\n        (cons f ret)\n      )\n    )\n  )\n)","problem":34,"user":"4fc8f671e4b0ee37620e1840"},{"problem":34,"code":"#(loop [s %1\n       e %2\n       f []]\n  (if (= s (dec e))\n      (conj f s)\n      (recur (inc s) e (conj f s))))","user":"4e38f245535deb9a81d77f3e"},{"problem":34,"code":"(fn [x y]\n  (loop [lis [] cur x] \n    (if (= cur y) lis \n      (recur (conj lis cur) (inc cur)))))","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":34,"code":"(fn [a b]\n  (loop [a    a\n         coll '()]\n  (if (>= a b)\n    (reverse coll)\n    (recur (inc a) (cons a coll)))))","user":"55074092e4b021ccfedb96a4"},{"problem":34,"code":"(fn [low high] (take-while #(> high %) (iterate inc low)))","user":"576d398be4b0979f8965155d"},{"problem":34,"code":"(fn [first last] (reverse (loop [n first result '()] (if (= n last) result (recur (inc n) (conj result n))))))","user":"5d662fb5e4b0db5d338d15e1"},{"problem":34,"code":"(fn -myrange [b e]\n  ((fn ranger [acc begin end]\n    (cond\n      (= end begin) (concat acc [end])  \n      (> end begin) (concat (ranger (concat acc [begin]) (+ begin 1) end))\n    )\n  ) [] b (- e 1))\n)","user":"546113ffe4b01be26fd74699"},{"code":"(fn [f e]\n  (reverse (loop [i f ret '()]\n(if (< i e)\n(recur (inc i) (conj ret i))\nret))))","problem":34,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn [a b] (map #(+ (- a 1) %) (reductions + (repeat (- b a) 1))))","problem":34,"user":"52aad30ce4b0c58976d9ac6d"},{"problem":34,"code":"(fn [mn mx]\n  (loop [cnt mn\n         result '()]\n    (if (= cnt mx)\n      result\n      (recur (inc cnt) (concat result (list cnt))))))","user":"53e0001be4b0d874e779ae48"},{"problem":34,"code":"(fn p34 [start stop]\n  (let [f (fn my-range\n            ([] (my-range start))\n            ([n] (concat [n](lazy-seq (my-range (inc n)\n                                                )))))]\n    (take-while #(< % stop) (f))))","user":"582a5174e4b051871117bf59"},{"problem":34,"code":"(fn f [x y]\n  (if (= x y)\n    '()\n    (conj (f (+ x 1) y) x)))","user":"57501c83e4b02ea11479926b"},{"problem":34,"code":"(fn\n  [l h]\n  (loop [n l\n         xs []]\n    (if (= n h)\n      xs\n      (recur (+ n 1) (conj xs n)))))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn [start end]\n    (take-while #(< % end)\n          ((fn r [n] (lazy-seq (cons n (r (+ n 1))))) start)\n          ))","problem":34,"user":"506b0a9ce4b0a2a5463de380"},{"problem":34,"code":"(fn my-range [start end]\n  (if (>= start end)\n    nil\n    (cons start (my-range (inc start) end))))","user":"54125eeee4b01498b1a719d3"},{"code":"#(take (- %2 %1) (iterate inc %1 ))","problem":34,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":34,"code":"(fn [x y]\n  (loop [a x b y result []]\n    (if (= a b) result  (recur (inc a) b  (conj result a)))))","user":"5c9da580e4b048ec896c5b12"},{"code":"(fn f [l u]\n    (if (< l u)\n      (cons l (f (inc l) u))))","problem":34,"user":"500d3160e4b05f7c30cfa6a1"},{"problem":34,"code":"(fn [start end] \n   (letfn [(f [x] (if (< x end) (cons x (lazy-seq (f (inc x))))))]\n     (f start)))","user":"523630eee4b05f3be1c7c8e8"},{"problem":34,"code":"(fn i [f l](when (< f l) (lazy-seq (cons f (i (inc f) l)))))","user":"55597b84e4b0deb715856e36"},{"problem":34,"code":"(fn[start end]\n  (take (- end start) (iterate inc start)))","user":"5bc50870e4b07a9b28b10069"},{"problem":34,"code":"(fn ran [b e]\n  (loop [b b\n         res ()]\n    (if\n     (= b e) (reverse res)\n      (recur (inc b)(cons b res)))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn my-range [x y] \n  (if (< x y)\n    (cons x (my-range (inc x) y))\n    '()))","problem":34,"user":"4e967c4a535dbda64a6f6b47"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start\n         stop stop\n         acc []]\n    (if (= start stop)\n      acc\n      (recur (inc start) stop (conj acc start)))))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":34,"code":"(fn [from to]\n    (loop [counter to\n           l '()]\n        (if  (= counter from) \n            l\n            (recur (dec counter) (conj l (dec counter)))\n        )\n        )\n)","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn r [start end]\n        (reverse (loop [acc ()\n                     i start]\n                (if (= i end)\n                    acc\n                  (recur (cons i acc)\n                         (+ 1 i))))))","problem":34,"user":"52aa524fe4b0c58976d9ac64"},{"problem":34,"code":"(fn ran\n  ([start end] (ran start end []))\n  ([start end result] (if (= start end)\n                        result\n                        (recur (inc start) end (conj result start)))))","user":"53ecd01fe4b0d648e757f4b9"},{"problem":34,"code":"(fn [min max]\n    (loop [i min acc []]\n      (if (= i max)\n        acc\n        (recur (inc i) (conj acc i)))))","user":"5f56c0cae4b0a0bc16850a8c"},{"code":"(fn [start, end]\n   (take (- end start) (iterate inc start)))","problem":34,"user":"51469a3ae4b04ef915e3731b"},{"problem":34,"code":"#(loop[x %1\n       \t\ty %2\n       \t\ts '()]\n\t\t\t(if (= x y) (reverse s)\n              (recur (inc x) y (conj s x))\n              )\n  )","user":"5804d5afe4b0a837a8b30cad"},{"code":"(fn [f t]\r\n  (take-while #(< % t) (iterate inc f)))","problem":34,"user":"507437c2e4b054001656acd0"},{"code":"(fn myrange\n  [lo hi]\n  (when-not (= lo hi)\n    (cons lo (lazy-seq (myrange (inc lo) hi)))))","problem":34,"user":"50fc48dde4b0d10d794c19f6"},{"problem":34,"code":"(fn it [s e]\n  (take (- e s) (iterate inc s)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [l h] (take-while #(< % h) (iterate inc l)))","problem":34,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(fn [low high]\n    (take (- high low)\n          (iterate inc low)))","problem":34,"user":"4eed26af535d93acb0a668bb"},{"code":"(fn rng [from to]\n  (cond\n    (>= from to) '()\n    true\n      (cons\n        from\n        (rng (inc from) to))))","problem":34,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn [min max]\n  (take \n    (- max min)\n    (iterate inc min)))","problem":34,"user":"51377c10e4b04059df19f305"},{"problem":34,"code":"(fn [startVal endVal]\n                        (take (- endVal startVal) (iterate inc startVal))\n                         )","user":"60057cd4e4b074f607df664a"},{"code":"(fn r [a b]\n  (let [n (inc a)]\n    (if (< a b)\n      (cons a (r n b))\n      ())))","problem":34,"user":"4e39fb68535deb9a81d77f47"},{"problem":34,"code":"(fn [x hi]\n    (loop [acc []  lo x ]\n       (if (= lo hi)\n          (seq acc)\n          (recur (conj acc lo) (inc lo)))))","user":"52d24f60e4b099d49816f0a8"},{"problem":34,"code":"#(loop [x %1 res []]\n   (if (>= x %2)\n     res\n     (recur (inc x) (conj res x))))","user":"55e26417e4b050e68259b433"},{"problem":34,"code":"(fn [a b] (loop [s [] x (min a b) r (max a b)] (if (= x r) s (recur (conj s x) (+ x 1) r))))","user":"5ab564f8e4b073f177442639"},{"problem":34,"code":"(fn [start end]\n  (loop [pos start\n         result []]\n    (if(>= pos end)\n    \tresult\n      (recur (inc pos) (conj result pos)))))","user":"53f50c03e4b0db01ade6f9ca"},{"problem":34,"code":"(fn [a b] (take (- b, a) (iterate inc a)))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn [x y](take (- y x) (iterate #(+ 1 %) x)))","problem":34,"user":"503539dee4b0ed9c821488f6"},{"code":"#((fn rec [l x n]\n    (if (>= x n) l (rec (conj l x) (+ 1 x) n))) [] %1 %2)","problem":34,"user":"52d1e364e4b0d9f9285948e7"},{"problem":34,"code":"#_(fn rng [from to]\n  (if (zero? (- to from))\n    (list)\n    (conj (rng (inc from) to)\n          from)))\n\n(fn rng [from to]\n  (->> (iterate inc from)\n       (take (- to from))))\n\n;; nicer solution would have been:\n;; (fn [from to] (take (- to from) (iterate inc from)))","user":"59a080e3e4b0871e7608b837"},{"problem":34,"code":"(fn [begin end] (take (- end begin) (iterate inc begin)))","user":"582dc562e4b051871117bfcb"},{"code":"(fn [x y]\n  (loop [current y result '()]\n    (if (>= x current)\n        result\n        (recur (dec current) \n               (conj result (dec current))))))","problem":34,"user":"4e74ff6d535d7a570dd295bd"},{"code":"(fn [lower upper] (take-while (fn [n] (< n upper)) (iterate inc lower)))","problem":34,"user":"4dad76588e77d6ed63f12a44"},{"code":"#(loop [s %1 e (- %2 1) c ()]\n  (if (> s e)\n    c\n  (recur s (dec e) (cons e c))))","problem":34,"user":"4e410033535dc968683fc49c"},{"code":"(fn [start finish]\n  (loop [x start r []]\n    (if (= x finish) r\n      (recur (inc x) (conj r x)))))","problem":34,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn [start end]\n  (loop [cur start, end end, out []]\n    (if (>= cur end)\n      out\n      (recur (inc cur) end (conj out cur)))))","problem":34,"user":"4e7d4544535db169f9c796d0"},{"code":"(fn [min max] (take (- max min) (iterate #(+ 1 %) min)))","problem":34,"user":"5194f482e4b05be8c43d2385"},{"code":"#(loop [from %1 to %2 c ()]\n    (if (= from to)\n      (reverse c)\n      (recur (inc from) to (conj c from))))","problem":34,"user":"4fcf763de4b03432b189f413"},{"problem":34,"code":"(fn app [acc start end] \n  (if\n    (= start end)\n    acc\n    (app (conj acc start) (inc start) end))) []","user":"53da3fcde4b0e771c3025497"},{"code":"(fn t34 [start end] (if (< start end) (conj (t34 (+ start 1) end) start) (list)))","problem":34,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":34,"code":"(fn [start stop] (loop [i start\n         res []]\n    (if (= i stop)\n      res\n      (recur (inc i) (conj res i)))))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":34,"code":"(fn [x y]\n  (loop [st x out []]\n    (if (= st y)\n      out\n      (recur (inc st) (concat out [st])))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":34,"code":"(fn [from to]\n  (loop [n1 from\n       n2 to\n       acc []]\n  (if (= n1 n2)\n    acc\n    (recur (inc n1) n2 (conj acc n1))))\n  )","user":"5619a4d0e4b053970a773afd"},{"problem":34,"code":"(fn f\n  ([x y] (f x y []))\n  ([x y coll]\n   (if (= x y) \n     coll\n     (f \n      (+ x 1) \n      y \n      (conj coll x)))))","user":"5537cbaee4b09218d5f44fd3"},{"code":"(fn [low high] (take (- high low) (iterate #(inc %) low)))","problem":34,"user":"53906b89e4b0b51d73faae99"},{"problem":34,"code":"(fn [a b]\n  (reverse ((fn [i accum]\n     (if (= i b)\n       accum\n       (recur (inc i) (cons i accum))\n       )) a '())))","user":"5b0fe3f4e4b0cc2b61a3be14"},{"code":"(fn f [s t]\n  (cond\n   (= s t) ()\n   :else (cons s (f (inc s) t))))","problem":34,"user":"520242bae4b030ee0c5b26e3"},{"problem":34,"code":"#(loop [n %1 \n        acc []]\n   (if (>= n %2)\n     acc\n     (recur (inc n) (conj acc n))))","user":"5680104ae4b0966858e4d8ea"},{"problem":34,"code":"(fn [start end]\n  (loop [range-in-progress [start]]\n    (if (< (last range-in-progress) (- end 1))\n      (recur (conj range-in-progress\n                   (+ 1 (last range-in-progress))))\n      range-in-progress)))","user":"57280b92e4b0c5bde472c14e"},{"code":"(fn ran\n  ([x y] (ran x y []))\n  ([x y z] (if (not= x y) (ran (+ x 1) y (conj z x)) z)))","problem":34,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [start end]\n  (let [f (fn [s e coll]\n    (if (= s e)\n      (cons e coll)\n      (recur s (- e 1) (cons e coll))))]\n    (f start (- end 1) ())))","problem":34,"user":"4f036c4b535dcb61093f6ab9"},{"code":"#(loop [x %1\n        z []] (if (= x %2) \n                z\n                (recur (inc x)\n                        (conj z x)\n                       )))","problem":34,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":34,"code":"(fn r [a b]\n  (if (= a b)\n    nil\n    (conj (r (inc a) b) a)))","user":"5396c94be4b0b51d73faaee3"},{"problem":34,"code":"(fn [m M](take (- M m) (iterate inc m)))","user":"506af7d8e4b0a2a5463de37d"},{"problem":34,"code":"(fn \n [st en]\n (take \n  (- en st) \n  (iterate inc st)))","user":"54c94376e4b045293a27f665"},{"problem":34,"code":"#(loop [start %1\n        end (dec %2)\n        ret (list)]\n   (if (>= end start)\n     (recur start (dec end) (conj ret end)\n            )\n     ret)\n   )","user":"58730484e4b01531a375ea26"},{"code":"(fn [min max]\n  (loop [counter (- max 1)\n         seq '()]\n    (if (< counter min)\n      seq\n      (recur (- counter 1) (cons counter seq)))))","problem":34,"user":"4ff83003e4b0678c553fc396"},{"problem":34,"code":"#(loop [b %1\n        e %2\n        acc []]\n   (if (= b e) \n     acc\n     (recur (inc b) e (conj acc b))\n     ))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":34,"code":"(fn p34 [start stop]\n  (let [f (fn my-range\n            ([] (my-range start))\n            ([n] (concat [n]\n                   (lazy-seq\n                    (my-range (inc n))))))]\n            (take-while #(< % stop) (f))))","user":"55ee62dde4b0121d4835fdeb"},{"code":"(fn [number y]\n(loop [n number result '()] \n      (if (<= y n) \n      \t  (reverse result )\n\t  (recur (+ n 1) (cons n result)))))","problem":34,"user":"4f1c2336535d64f60314647f"},{"problem":34,"code":"(fn [minimum maximum]\n  (loop [current (dec maximum)\n         acc '()]\n    (if (< minimum current)\n      (recur (dec current) (cons current acc))\n      (cons current acc))))","user":"5509bd6ee4b06e50f9beb120"},{"problem":34,"code":"(fn my-range [lower upper]\n  (if (= lower upper)\n    nil\n    (concat [lower] (my-range (+ lower 1)\n                               upper))))","user":"5906b1e8e4b047aa04b19938"},{"code":"(fn [a b]\n  (loop [i b\n         lst '()]\n    (if (= i a)\n      lst\n      (recur (dec i) (cons (dec i) lst)))))","problem":34,"user":"4e5c3612535d8a8b8723a2be"},{"problem":34,"code":"(fn [mn mx]\n  (loop [n (- mx 1) coll '()]\n    (if (< n mn)\n      coll\n      (recur (dec n) (conj coll n))\n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":34,"code":"(fn [start stop]\n   (loop [start start\n          stop  stop\n          list  `()]\n     (if (>= start stop)\n       (reverse list)\n       (recur (inc start)\n              stop\n              (conj list start)))))","user":"5eb7b41ee4b00a66d4a9523c"},{"code":"(fn [a b] (loop [l [] aa a]\n            (cond \n             (= aa b) l\n             (< aa b) (recur (conj l aa) (+ aa 1))\n             (> aa b) (recur (conj l aa) (- aa 1)))))","problem":34,"user":"52eee533e4b05e3f0be25ecb"},{"problem":34,"code":"(fn [min max](take-while #(< % max)(iterate inc min)))","user":"5760682ee4b08062f99a4e94"},{"problem":34,"code":"#(loop [cur %1 maxV %2 result []] (if (= cur maxV) result (recur (+ cur 1) maxV (conj result cur))))","user":"5deab1b2e4b0986d99407f9f"},{"problem":34,"code":"(fn build\n  [a b & [res]]\n  (let [b (dec b)]\n    (if (< b a)\n      res\n      (build a b (cons b res)))))","user":"56582025e4b0f9d632dd84b1"},{"problem":34,"code":"#(loop [k (- %2 %1 1)\n        out ()]\n    (println k)\n        (if (< k 0)\n          out\n          (recur (dec k) (conj out (+ %1 k)))))","user":"56f51879e4b046a417f92069"},{"problem":34,"code":"(fn my-range\n  [current end]\n  (loop [current current end end res ()]\n    (if (= current end)\n      (reverse res)\n      (recur (inc current) end (conj res current)))))","user":"5ddd3cbee4b0948ae9d9adc3"},{"problem":34,"code":"#(loop [start %1\n        stop %2\n        out '()]\n   (if (= start stop)\n     (reverse out)\n     (recur (inc start) stop (conj out start))))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":34,"code":"(fn [s e]\n  (loop [i s r []]\n    (if (= i e)\n      r\n      (recur (inc i) (conj r i)))))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn [begin end]\n   (loop [i begin\n          result ()]\n     (if (>= i end)\n       result\n       (recur (inc i) (concat result (list i))))))","problem":34,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn myrange [min max]\n  (loop [s (list (- max 1))]\n    (if (= (first s) min)\n        s\n        (recur (conj s (- (first s) 1))))))","problem":34,"user":"50127fbfe4b030d97e4db70f"},{"problem":34,"code":"(fn r [a b]\n  (if (= a b)\n    ()\n    (conj (r (inc a) b) a)))","user":"4f5eda39e4b0030a34fb2b56"},{"code":";;(fn [x y] (loop [x x y y acc '()]\n;;(if (= y x)\n;;(reverse acc)\n;;(recur (inc x) y (conj acc x)))))\n\n#(take (- %2 %) (iterate inc %))","problem":34,"user":"4dbf7a31535d020aff1edf75"},{"code":"#(take (- %2 %) (iterate inc  %))","problem":34,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn rang [a b]\n  (if (>= a  b) '()\n    (cons a (rang (inc a) b))))","problem":34,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [s e]\n  (loop [c s r []]\n    (if (= c e)\n      r\n      (recur (inc c) (conj r c)))))","problem":34,"user":"4dbdc9da535d020aff1edf4c"},{"problem":34,"code":"(fn rng [from to]\n   (loop [acc []\n          i from]\n     (if (< i to)\n       (recur (conj acc i) (inc i))\n       acc)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":34,"code":"(fn myr [x y]\n  (take (- y x) (lazy-seq (cons x (myr (inc x) y)))))","user":"56b280e3e4b0982f16b37e06"},{"code":"(fn r [low high] \n  (if (< low high)\n    (cons low (r (inc low) high))\n  )\n)","problem":34,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn r [s e] (if (== s (dec e))\n  [s]\n  (cons s (r (inc s) e))\n))","problem":34,"user":"508c64bee4b0f17d83ea26b5"},{"code":"(fn my-range [start end]\n        (loop [col []\n               i start]\n          (if (= (count col) (- end start))\n            col\n            (recur (conj col i) (inc i)))))","problem":34,"user":"5369d072e4b0243289761ea1"},{"problem":34,"code":"(fn rng [start end]\n  (if (> end start)\n    (cons start (rng (inc start) end))\n    '()))","user":"520e37cfe4b066f3ea161c96"},{"code":"#(take\n   (- %2 %1)\n   (iterate\n    (fn [x] (+ x 1))\n    %1))","problem":34,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":34,"code":"(fn f\n  ([start end] (f start end 1))\n  ([start end step]\n   (lazy-seq\n    (let [b (chunk-buffer 32)\n          comp (if (pos? step) < >)]\n      (loop [i start]\n        (if (and (< (count b) 32)\n                 (comp i end))\n          (do\n            (chunk-append b i)\n            (recur (+ i step)))\n          (chunk-cons (chunk b) \n                      (when (comp i end) \n                        (f i end step)))))))))","user":"566bd453e4b0a866af6896b7"},{"problem":34,"code":"(fn [x thr]\n  (loop [s [x]]\n    (if (< (last s) (- thr 1))\n      (recur (conj s (+ (last s) 1)))\n      s)))","user":"54381729e4b032a45b869310"},{"code":"(fn [l h]\n  (loop [r '() i (dec h)]\n    (if (< i l)\n        r\n        (recur (conj r i) (dec i)))))","problem":34,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(fn [a b]\n  (letfn [(helper [n acc]\n                  (if (< n b)\n                    (helper (+ n 1) (cons n acc))\n                    acc))]\n    (reverse (helper a nil))))","problem":34,"user":"523c6451e4b07becd5be2222"},{"problem":34,"code":"(fn [start end]\n      (loop [x [] a start b end]\n        (if (= a b)\n          (seq x)\n          (recur (conj x a) (inc a) b)\n          )\n        )\n      )","user":"561bf12ce4b064ca9f4b168e"},{"code":"(fn myrange [a b]\n  {:pre [<= a b]}\n  (if (= a b)\n    '()\n    (cons a (myrange (inc a) b))))","problem":34,"user":"52664945e4b03e8d9a4a712f"},{"problem":34,"code":"(fn [start end]\n  (loop [i start result []]\n    (if (= i end)\n      result\n      (recur (inc i) (conj result i)))))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":34,"code":"(fn   ([a b] (take (- b a) (iterate inc a))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":34,"code":"(fn f[s,e] \n  (if (= s e) \n    ()\n    (cons s (f (inc s) e))\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":34,"code":"(fn [x y]\n    (loop [x x\n           y y\n           z []]\n      (if (= y x)\n        (seq z)\n        (recur (inc x) y (conj z x)))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":34,"code":"(fn my-range [start end] (if (< start end)\n                             (conj (my-range (inc start) end) start)\n                             ()))","user":"58cf8f97e4b03c36ff7e58b7"},{"code":"(fn [start end]\n  (take-while #(< % end) \n    (iterate inc start)))","problem":34,"user":"4fd65b2be4b0d4de60cee37e"},{"problem":34,"code":"#(loop [start %1\n        out '()]\n   (if (< start %2)\n     (recur (inc start) (conj out start))\n     (reverse out)))","user":"5530b827e4b076ab5578f818"},{"code":"#(loop [i %1 j %2 ac []] (if (< i j) (recur (inc i) j (conj ac i))ac ))","problem":34,"user":"4e8768f6535dceadca469850"},{"code":"(fn rng [s m]\n  (if (< s (- m 1))\n    (apply list s (rng (inc s) m))\n    (list s)))","problem":34,"user":"50270618e4b01614d1633feb"},{"problem":34,"code":"(fn my-range\n  ([x y]\n   (my-range x y x '()))\n  ([x y i acc]\n   (if (< i y)\n     (recur x y (inc i) (cons i acc))\n     (reverse acc))))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn rang [from to] \n  (if (= from to) () (cons from (rang (inc from) to)))\n  )","problem":34,"user":"5226f9b8e4b04e78ff2e199b"},{"problem":34,"code":"(fn my-range [a b]\n  (lazy-seq\n   (when (< a b)\n     (cons a (my-range (inc a) b)))))","user":"4f6543cae4b07046d9f4ef41"},{"code":"(fn [s e] (take (- e s) (iterate #(+ % 1) s)))","problem":34,"user":"4e4a94a9535dc968683fc4cd"},{"problem":34,"code":"(fn [x y]\n (loop [x x y y s '()]\n    (let [next-y (- y 1)]\n        (if (= x next-y)\n            (conj s next-y)\n            (recur x next-y (conj s next-y))))))","user":"500e3238e4b068062f6e8d8f"},{"code":"(fn [s e]\n  (take (- e s)\n    (iterate #(+ % 1) s)))","problem":34,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn my-range\n\t([start end]\n\t (my-range start end start))\n\t([start end current]\n\t (when-not (= current end)\n\t\t   (lazy-seq\n\t\t    (cons current (my-range start end (inc current)))))))","problem":34,"user":"52381b2ae4b0fae3832e99ef"},{"problem":34,"code":"#(loop [a %1\n        b %2\n        acc '()]\n   (if (< a b)\n      (recur (+ 1 a) b (concat acc (list a)))\n     acc\n     )\n   )","user":"5245e320e4b09dbe66b56177"},{"code":"(fn new-range [a b]\n  (take (- b a) (iterate inc a)))","problem":34,"user":"51ba59e4e4b0fe3ecfb4642d"},{"problem":34,"code":"(fn [a z]\n  (loop [a a\n         col []]\n    (if (= a z)\n      col\n      (recur (inc a) (conj col a)))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":34,"code":"(fn rg [x y] (when (< x y) (conj (rg (inc x) y) x)))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":34,"code":"#(->> (iterate inc %1) (take (- %2 %1)))","user":"5367bc60e4b0243289761e81"},{"problem":34,"code":"(fn [x c] (take (- c x) (iterate inc x)))","user":"58a0fd0be4b02bd94d917ea4"},{"code":"(fn me [beg end]\n  (if (= beg end)\n    nil\n    (cons beg (me (inc beg) end))))","problem":34,"user":"51ef66a7e4b0871fa145d9a5"},{"code":"(fn [a b] (take (- b a) (iterate (partial + 1) a)))","problem":34,"user":"4f15de56535d64f603146448"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         out '()]\n    (if (< i end)\n      (recur (inc i) (conj out i))\n      (reverse out))))","user":"5c24671be4b07e362c2305a1"},{"problem":34,"code":"(fn [a b]\n  (#(let [n (inc (last %))\n         new (concat % [n])]\n    (if (= n b)\n      %\n      (recur new))) [a])\n  )","user":"5b7f2d75e4b047b03b203768"},{"problem":34,"code":"(fn this [x y] (if (< x y) (apply list x (this (inc x) y)) []))","user":"5a04e923e4b01bb0ae8afda9"},{"code":"(fn my-range [begin end] (if (>= begin end) nil (conj (my-range (inc begin) end) begin)))","problem":34,"user":"518df0f0e4b0c929d50502e1"},{"problem":34,"code":"#(let [lower %1 \n      upper %2]\n    (loop [current lower \n           ret-seq []]\n           (if (= current upper)\n                ret-seq\n                (recur (inc current) (conj ret-seq current))\n           )\n    )\n)","user":"5d8b3d5be4b0915913b1d3d1"},{"code":"(fn [x1 x2]\r\n  (loop [rez [] cur x1]\r\n    (if (< cur x2)\r\n      (recur (conj rez cur) (inc cur))\r\n      rez)))","problem":34,"user":"508453abe4b0c98812d07891"},{"code":"(fn [x y] \n   \n         (take (- y x) (iterate #(inc %) x)))","problem":34,"user":"529223cbe4b0239c8a67af26"},{"problem":34,"code":"#(reduce (fn [c x] (conj c (+ 1 (last c)))) [%1] (repeat (- %2 %1 1) %1))","user":"5c1aadcde4b01240ff567209"},{"code":"#((fn rng [s acc]\n     (if (= s %2)\n       (reverse acc)\n       (rng (+ s 1) (cons s acc)))) %1 '())","problem":34,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn [a b] (loop [low a acc []] (if (= low b) acc (recur (inc low) (conj acc low)))))","problem":34,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":34,"code":"(fn s [i1 i2]\n  (if (= i2 i1)\n    '()\n    (conj (s (inc i1) i2)\n          i1)))","user":"5649542fe4b0284900eef63f"},{"code":"(fn r[s x]\n  (if (< s x)\n    (cons s\n          (r (inc s) x))))","problem":34,"user":"501284d9e4b030d97e4db710"},{"code":"#( (fn [cu  ma cul] (if (= cu ma) cul (recur (inc cu) ma (conj cul cu)))) %1 %2 [] )","problem":34,"user":"4f7d75a2e4b06e829148e1c2"},{"code":"#(loop [cur (dec %2), acc '()]\n   (if (< cur %1)\n     acc\n     (recur (dec cur) (conj acc cur))))","problem":34,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [start end]\n  (loop [s start li ()]\n    (if (= s end)\n      (reverse li)\n      (recur (+ s 1)(into li (list s)))\n      )\n    )\n  )","problem":34,"user":"4db7da66535d1e037afb2187"},{"problem":34,"code":"(fn  [b e]\n  (take (- e b) (iterate inc b)))","user":"58e14302e4b005f69f193c78"},{"problem":34,"code":"(fn my-range \n  [inicio final]\n  (take (- final inicio) (iterate inc inicio)))","user":"59e68254e4b0249b728206fc"},{"problem":34,"code":"(fn [s, e]\n  (loop [i s r []]\n    (if (< i e)\n      (recur (inc i) (conj r i))\n      r)))","user":"5590e55de4b0277789237676"},{"problem":34,"code":"#(loop [init %1 end %2 res []]\n             (if (>= init end)\n               res\n               (recur (inc init) end (conj res init))))","user":"55989c25e4b031d6649c9b9b"},{"code":"(fn [min max]\n  (loop [r [] min min max max]\n    (if (= min max) r\n      (recur (conj r min) (inc min) max))))","problem":34,"user":"50232eeae4b0b5d8b1bd2397"},{"problem":34,"code":"(fn [start end]\n  (loop [st start acc []]\n    \n    (if (< st end)\n      (recur (inc st) (conj acc st))\n      acc)))","user":"53f2370ee4b0742d9025b0e7"},{"code":"(letfn [(rng [m n] (if (>= m n) '() (lazy-seq (cons m (rng (inc m) n))))  )] rng)","problem":34,"user":"51729002e4b044b2ef48a850"},{"problem":34,"code":"(fn [start stop]\n  (if (pos? (- stop start))\n    (take (- stop start) (iterate inc start))))","user":"597af3f7e4b02382a38ad1f0"},{"problem":34,"code":"(fn myrange [start end]\n  (if (>= start end)\n    '()\n    (conj (myrange (inc start) end) start))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":34,"code":"(fn my-range\n\t[inicio fin]\n\t(loop [lst '()\n\t\t\ta inicio\n\t\t\tb fin\n\t\t\taux inicio]\n\t(cond\n\n\t\t(= b 0) lst\n\t\t(= aux b) (reverse lst)\n\t\t:else (recur (cons aux lst ) a b (inc aux)))))","user":"57f81544e4b0d3187e900917"},{"code":"#(loop [i %1 col []]\n    (if (= %2 i)\n           col\n           (recur (inc i) (conj col i))))","problem":34,"user":"515bed3be4b0388ca8ca1525"},{"code":"#(loop [ n %1 s '() ] (if (>= n %2) (reverse s) (recur (+ 1 n) (cons n s))))","problem":34,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":34,"code":"(fn [f t]\n  (loop [i f lst []]\n    (if (>= i t)\n      lst\n      (recur (inc i) (conj lst i)))))","user":"5c72c2b9e4b0fca0c16227ab"},{"problem":34,"code":"(fn my-range [from to & {:keys [coll] :or {coll '()}}]\n  (if (= from to)\n    coll\n    (my-range (+ from 1)\n              to\n              :coll (concat coll\n                            `(~from)))))","user":"554bc026e4b0a04f79299597"},{"code":"(fn [low high] (apply list (loop [x low y high ax []] (if (= x y) ax (recur (inc x) y (conj ax x))))))","problem":34,"user":"4f88f57ae4b033992c121c73"},{"problem":34,"code":"(fn func [x y] (if (= x y) nil (cons x (func (inc x) y))))","user":"56cef5e8e4b0ea9b8538f762"},{"problem":34,"code":"(fn f\n  ([s e] (f s e []))\n  ([s e sq] (if (< s e)\n              (recur (inc s) e (concat sq [s]))\n              sq)))","user":"60537cd1e4b04c8f2157d152"},{"problem":34,"code":"(fn [x y]\n            (loop [index x result ()]\n              (if (>= index y) (reverse result) (recur (inc index) (conj result index)))\n              ))","user":"5272645de4b03e8d9a4a742c"},{"problem":34,"code":"(fn my-range [from to]\n  (loop [c from\n         r []]\n    (if (= c to)\n      r\n      (recur (inc c) (conj r c)))))","user":"5c411df3e4b08cd430848ebf"},{"code":"(fn foo [b e]\n   (if (< b e )\n     (cons b (foo (inc b) e))\n   )\n )","problem":34,"user":"52f4fae4e4b05e3f0be25f27"},{"code":"(fn f [start end]\n  (if (< start end)\n    (conj (f (inc start) end) start)\n    nil))","problem":34,"user":"5344fe13e4b084c2834f4a32"},{"code":"(fn rng [x y]\n  (take (- y x) (iterate inc x)))","problem":34,"user":"5012aefce4b0c8732600222a"},{"problem":34,"code":"#(loop [x %1 res []]\n   (if (< x %2)\n     (recur (inc x) (conj res x))\n     res\n     )\n   )","user":"5a18488ee4b0ff51aa4b31e5"},{"code":"(fn myrange [x y]\n  (if (>= x y)\n    '()\n    (cons x (myrange (+ 1 x) y))))","problem":34,"user":"4ec07699535dfed6da9c6da2"},{"problem":34,"code":"(fn [start end]\n  (take (- end start) (iterate inc start) )\n  )","user":"54c97cb3e4b045293a27f677"},{"code":"(fn [l u]\n   (take (- u l) (iterate inc l)))","problem":34,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn r [a b] \n  (if(= a (- b 1))\n    (list a)\n    (conj (r (+ a 1) b) a)\n  )\n)","problem":34,"user":"4f84400de4b033992c121c2e"},{"problem":34,"code":"(fn my-range [s e]\n  (when (< s e)\n    (lazy-seq (cons s (my-range (inc s) e)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn ranger [x y z] (if (< y z) (ranger (conj x y) (inc y) z) x)) []","problem":34,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":34,"code":"#(loop [current %1\n         end %2\n         result []]\n    (if (< current end)\n      (recur (inc current) end (concat result (list current)))\n      result))","user":"5db861bce4b010eb3c36cd4b"},{"problem":34,"code":"(fn [start finish]\n  (loop [acc '[]\n         current start]\n    (if (= current finish)\n      (seq acc)\n      (recur (conj acc current) (inc current)))))","user":"5fb082cfe4b08cb800c85b14"},{"code":"#(take (- %2 %)\n       (iterate inc %))","problem":34,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn myrange [b e]\n  (if (= b e) '()\n      (conj (myrange (+ b 1) e) b)))","problem":34,"user":"4e444c11535dc968683fc4a9"},{"problem":34,"code":"(fn myrange [start end]\n  \"creates list of all integers in given range\"\n  (if (> start (dec end)) () (cons start (myrange (inc start) end)))\n)","user":"5d828b7ee4b0915913b1d382"},{"problem":34,"code":";(fn [left right]\n;\t(loop [l left xs '()]\n;\t\t(if (< l right)\n;\t\t\t(recur (inc l) (conj xs l))\n;\t\t\t(reverse xs))))\n\n\n(fn [from to]\n\t(take-while #(< %1 to) (iterate inc from)))","user":"55b8c339e4b01b9910ae29b9"},{"problem":34,"code":"(fn zrange\n  ([begin end]\n   (zrange begin end []))\n\n  ([begin end result]\n   (if (= begin end)\n     result\n     (zrange (inc begin) end (conj result begin)))))","user":"59a80652e4b0bcf4e9a43aeb"},{"code":"(fn [from to]\n    (loop [curElem from, ret []]\n        (if (= curElem to)\n            ret\n            (recur (inc curElem) (conj ret curElem) ))) )","problem":34,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn [a b] (take-while (partial > b) (iterate inc a)))","problem":34,"user":"52a00651e4b04e0c58e87bbb"},{"problem":34,"code":"(fn rng [s e] (if (= s e) nil (cons s (rng (inc s) e))))","user":"5600f8c7e4b04bb52996e176"},{"problem":34,"code":"(fn [left right] (take (- right left) (iterate #(inc %) left)))","user":"5e950178e4b0fbed045a3801"},{"problem":34,"code":"(fn rango [b e]\n  (if (< b e)\n    (conj (rango (+ b 1) e) b)\n    '()\n  )\n)","user":"602bca69e4b0d5df2af22267"},{"problem":34,"code":"(fn my-range [x y]\n (loop [start x\n        end y\n        accum []]\n   (if (= start end) accum\n       (recur (inc start) end (conj accum start)))))","user":"554b8b78e4b0a04f7929958d"},{"code":"#(let [nAndUp (fn nAndUp [n](lazy-seq (cons n (nAndUp (inc n)))))]\n   (for [i (nAndUp %1) :while (< i %2)]\n      i))","problem":34,"user":"50a83315e4b054305ba5a830"},{"problem":34,"code":"(fn [start end]\n  (loop [s start\n         r []]\n    (if (= s end)\n      r\n      (recur (inc s) (conj r s)))))","user":"551a64cde4b091ff45eda996"},{"code":"(fn [start end]\n    (loop [res [] i start]\n      (if (= i end) res (recur (conj res i) (inc i)))))","problem":34,"user":"50588ff1e4b06522596eba7e"},{"problem":34,"code":"(fn rng [from to] (if (>= from to) () (cons from (rng (inc from) to))))","user":"5646dff3e4b0284900eef615"},{"problem":34,"code":"(fn my-range [n1 n2]\n  (if (< n1 n2)\n    (cons n1 (my-range (inc n1) n2))\n    '()))","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":34,"code":"#(loop [a %1\n        b []]\n   (if (< a %2)\n     (recur (inc a) (conj b a))\n     b))","user":"595a3b41e4b066ee0a44afb7"},{"problem":34,"code":"#(reverse (loop [start %1, end %2 result '()]\n            (if (> end start)\n              (recur (inc start) end (conj result start))\n              result)))","user":"57f8ba80e4b0d3187e90092f"},{"problem":34,"code":"(fn [st en] (loop [i st sq []] (if (< i en) (recur (+ i 1) (conj sq i)) sq)))","user":"5a527c16e4b05d388ecb6bff"},{"code":"(fn rng [a b] (if (< a b) (cons a (rng (+ a 1) b)) []))","problem":34,"user":"51da111de4b02ceefd94775a"},{"problem":34,"code":"(fn [low high] (take (- high low ) (iterate inc low) ) )","user":"575ef4b6e4b08062f99a4e78"},{"problem":34,"code":"(fn range2 [s e]\n  (if (= s e)\n      ()\n      (conj (range2 (inc s) e) s)\n  )\n)","user":"5716d585e4b07c98581c3b03"},{"code":"(fn [x y]\n    (loop [r []\n           x x\n           y y]\n      (if (= x y)\n        r\n        (recur (conj r x) (inc x) y))))","problem":34,"user":"4e5be681535d8a8b8723a2bc"},{"problem":34,"code":"(fn [start end]\n    (loop [res []\n           c start]\n      (if (= c end)\n        res\n        (recur \n          (conj res c)\n          (+ c 1)  \n        )\n      )\n    )\n  )","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":34,"code":"#(loop [coll ()\n        from %\n        to %2]\n   (if (= from to)\n     coll\n     (recur (concat coll [from]) (inc from) to)))","user":"5491bebbe4b0b312c081ff3c"},{"code":"(fn [s e] (reverse (loop [i s r '()] (prn i r e s) (if (= e i) r (recur (inc i) (conj r i))))))","problem":34,"user":"50366589e4b0fbe0a74d26c3"},{"problem":34,"code":"(fn t [n z] (if (< n z) (cons n (lazy-seq (t (inc n) z)))))","user":"5509b434e4b06e50f9beb11e"},{"problem":34,"code":"(fn [n1 n2]\n  (loop [n1 n1\n         acc '()]\n    (if (< n1 n2)\n    (recur (inc n1) (cons n1 acc))\n      (reverse acc))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":34,"code":"(fn [start end]\n  (take (- end start)\n    (iterate inc start)\n    ))","user":"53e15371e4b0d874e779ae54"},{"problem":34,"code":"#(seq (take (- %2 %1) (iterate inc %1)))","user":"52a229e0e4b04e0c58e87be9"},{"code":"(fn [from to]\n  (take-while #(< % to) (iterate inc from)))","problem":34,"user":"53889587e4b0640c7a9a589e"},{"problem":34,"code":"#((fn [l h c] (if (= l h) c\n                (recur (+ l 1) \n                \th \n                \t(conj c l)\n                ))) %1 %2 [])","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn [s e]\n  (loop [i s\n         res []]\n    (if-not (< i e)\n      res\n      (recur (inc i) (conj res i)))))","problem":34,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":34,"code":"#(loop [lower %1 upper (dec %2) result '()] \n      (if (> lower upper)\n        result\n        (recur lower (dec upper) (cons upper result))\n      )\n    )","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn [x y]\n  (take (- y x)\n    (iterate #(+ % 1) x)))","problem":34,"user":"4e9be708535dbda64a6f6b79"},{"code":"(fn [start stop]\n (take-while #(< % stop) (iterate inc start)))","problem":34,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":34,"code":"#(loop [n %1, out []] (if (< n %2) (recur (inc n) (conj out n)) out))","user":"60622c6ee4b03746e80ebf72"},{"code":"#(take (Math/abs (- %2 %1)) (iterate inc %1))","problem":34,"user":"4ec601ff535d6d7199dd36be"},{"code":"(fn myrange [from to]\n  (cond (= from to) []\n        :else (cons from (myrange (+ 1 from) to))))","problem":34,"user":"4dad8d4bc9a9d6ed1799dc57"},{"code":"(fn rg [l u] (take (- u l) (iterate inc l)))","problem":34,"user":"504f2efae4b0e7ad84dbc4c9"},{"problem":34,"code":"(fn r [b e] (->> (repeat (- e b 1) 1)(reductions #(+ %1 %2) b)))","user":"51d55795e4b01da06753aa8f"},{"code":"(fn [beg end]\n  (reverse ((fn rec[v a b]\n     (if (< a b)\n       (rec (conj v a) (inc a) b)\n       v\n      ))\n   '() beg end)))","problem":34,"user":"520aaac2e4b01da9d47a99e6"},{"code":"(fn [start end] (take-while #(< % end)\n                            (iterate inc start)\n                            )\n  )","problem":34,"user":"4fa340b4e4b081705acca18c"},{"problem":34,"code":"#(->> % (iterate (partial + 1)) (take (- %2 %)))","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [coll []\n         index start]\n    (if (= index end) coll\n      (recur (conj coll index) (+ 1 index)))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":34,"code":"(fn [a b]\n  (take (- b a)  (iterate #(+ 1 %) a)))","user":"573d8658e4b05c31a32c0814"},{"problem":34,"code":"(fn [lower upper]\n (loop [l lower accum []]\n  (if (>= l upper)\n      accum\n      (recur (inc l) (conj accum l))\n  )))","user":"54299d4be4b01498b1a71b3d"},{"problem":34,"code":"#(loop [from %1 to %2 result []]\n                 (if (= from to)\n                   result\n                   (recur (inc from) to (conj result from)))\n                   )","user":"560c37b5e4b05f002753df2e"},{"problem":34,"code":"(fn frange [start end]\n    (if (= start end)\n        []\n        (cons start (frange (+ start 1) end))))","user":"53882352e4b0640c7a9a5898"},{"problem":34,"code":"(fn my-range [start end]\n  (drop-last (reductions + start (repeat (- end start) 1))))","user":"58327a08e4b089d5ab817c7c"},{"problem":34,"code":"(fn range* [lower-bound higher-bound]\n  (loop [x lower-bound\n         acc []]\n    (if (= x higher-bound)\n      acc\n      (recur (inc x) (conj acc x))\n      )))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":34,"code":"(fn [from to]\n      (take (- to from) (iterate inc from)))","user":"5cc6b681e4b0ccb061962828"},{"code":"(fn [x n]\n  (take (- n x) (iterate inc x)))","problem":34,"user":"500b61b1e4b03d00572d2d81"},{"problem":34,"code":"(fn [a b]\n  (loop [start a end b r [] ]\n    (if (= start end) r\n        (recur start (dec end) (cons (dec end) r)))))","user":"5e12327ee4b099d064962fe5"},{"problem":34,"code":"(fn [sm bg]\n  (loop [v sm acc []]\n    (if (< v bg)\n      (recur (inc v) (conj acc v))\n      acc)))","user":"5954edcbe4b066ee0a44af15"},{"problem":34,"code":"(fn [start end]\n  (loop [s start l '()]\n    (if (= s end)\n      (reverse l)\n      (recur (inc s) (conj l s)))))","user":"59369515e4b02506e01a297e"},{"code":"(fn rng\n  ([a b]\n   (rng a b []))\n  ([a b coll]\n   (if (= (count coll) (- b a))\n     coll\n     (rng a b (conj coll (+ a (count coll)))))))","problem":34,"user":"53377725e4b0e30313ee6c89"},{"code":"#(for [i (iterate inc %1) :while (< i %2)] i)","problem":34,"user":"4f1595da535d64f603146444"},{"problem":34,"code":"#(loop [i %1 acc []] (if (>= i %2) acc (recur (inc i) (conj acc i))))","user":"5ed03b7fe4b016b56eae05ae"},{"code":"(fn listRange [x y] (if (= x y) '() (cons x (listRange (+ x 1) y))))","problem":34,"user":"51f687c2e4b06ff1c25c52cb"},{"code":"(fn [from to]\n  (loop [c from acc []]\n    (if (= c to)\n      acc\n      (recur (inc c) (conj acc c)))))","problem":34,"user":"4e568873535d8a8b8723a283"},{"problem":34,"code":"(fn [a b]\n\t(take \n\t\t(- b a)\n\t\t((fn foo [n] \n\t\t\t(cons n (lazy-seq (foo (inc n))))\n\t\t) a)\n\t)\n)","user":"53a94b63e4b047364c044434"},{"problem":34,"code":"(fn my-range2 [from to]\n (reverse (loop [result '() x from]\n   (if (= x to) result (recur (cons x result) (inc x)))\n   ))\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":34,"code":"(fn a [c d]\n  (loop [inicial c final d res ()]\n    (if (= inicial final) (reverse res)\n      (recur (inc inicial) final (cons inicial res)))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":34,"code":"(fn [a b]\n  (loop [low a top b new '()]\n    (if (= low top) new\n      (recur (inc low) top (concat new (list low))))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn [x y]( reverse ( flatten\n  (let [maxv (- y x)]\n    (loop [v x acc []]\n      (if (= v y) \n        acc\n        (recur (inc v) (conj [v] acc))))\n  ))))","problem":34,"user":"52fe869be4b047fd5583703f"},{"code":"#(keep-indexed (fn [i x] (+ i x)) (repeat (- %2 %1) %1))","problem":34,"user":"52a8ca0fe4b0c58976d9ac36"},{"problem":34,"code":"(fn rng [a b]\n\t\t(cond\n\t\t\t(= a b) nil\n\t\t\t:else (concat\n\t\t\t\t(list a)\n\t\t\t\t(rng (+ a 1) b)\n\t\t\t\t)\n\t\t)\n\t)","user":"5e1d01b5e4b0dc9594008542"},{"code":"(fn foo ([x y] (if (< x y) (cons x (foo (+ x 1) y)) nil)))","problem":34,"user":"4f611e0ee4b0defedf855fb8"},{"problem":34,"code":"#(loop\n   [low %\n    high %2\n    acc []]\n   (if (> high low)\n     (recur (inc low) high (conj acc low))\n     acc))","user":"57485efee4b009280f9f2b8a"},{"code":"(fn [x y]\n  (loop [z x c '()]\n    (if (= z y)\n      c\n      (recur (inc z) (concat c (list z)))\n    )\n  )\n)","problem":34,"user":"4e8b73f1535d65386fec2121"},{"problem":34,"code":"(fn [x y]\n  (loop \n    [i x\n     y y\n     n []]\n    (if (= i y)\n    (reverse (into (list) n))\n     \n      (recur (inc i) y (conj n i)))))","user":"593744abe4b02506e01a299b"},{"problem":34,"code":"(fn my-range[start end](if(= start end) nil (cons start (my-range (inc start) end))))","user":"561d7246e4b064ca9f4b16b1"},{"problem":34,"code":"(fn getrange [n1 n2]\n  (loop [m1 n1, m2 n2, out nil]\n    (if (>= m1 m2)\n      out\n      (recur\n        (+ m1 1)\n        m2\n        (concat out [m1])        \n      )\n    )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"code":"(fn [from to] (take (- to from) (iterate #(+ % 1) from)))","problem":34,"user":"51f7dd27e4b06ff1c25c52dc"},{"problem":34,"code":"(fn [start end] (reduce (fn [acc x] (concat acc [(+ (or (last acc) (- start 1)) 1)])) [] (repeat (- end start) start)))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":34,"code":"(fn my-range\n  ([from before]\n   (my-range from before '()))\n  ([from before coll]\n   (if (< from before)\n     (my-range (inc from) before (conj coll from))\n     (reverse coll))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":34,"code":"(fn my-range [begin end]\n    (if (>= begin end)\n      '()\n      (cons begin (my-range (inc begin) end))))","user":"5549ff9ae4b0a04f7929956e"},{"problem":34,"code":";(fn [start end] \n;  (take (- end start) (\n;     (fn myrange[n] (cons n (lazy-seq (myrange (inc n))))) start)))\n\n(fn [start end] \n  (take (- end start) (iterate inc start)))","user":"5465febde4b01be26fd746e1"},{"problem":34,"code":"(fn [f e]\n  (take (- e f) (iterate inc f)))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [a b] (reductions + a (take (- b (+ a 1)) (cycle [1]))))","problem":34,"user":"4ed1f84f535d44c135fd68d3"},{"code":"(fn [l u] (take (- u l) (iterate inc l)))","problem":34,"user":"4f0514b4535dcb61093f6bf0"},{"problem":34,"code":"(fn my-range\n  ([coll current end]\n   (if (= current end)\n     coll\n     (my-range (conj coll current) (+ current 1) end)))\n  ([start end]\n   (my-range [] start end)))","user":"56822f37e4b0945ebc182a8d"},{"problem":34,"code":"(fn my-range\n  ([from to arr]\n   (if (= from to)\n     arr\n     (my-range (inc from) to (conj arr from))))\n  ([from to] (my-range from to [])))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":34,"code":"(fn rang [a b]\n  (if (< a b)\n    (cons a (rang (inc a) b))))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn [x y]\n  (loop [ms '() mx x my y]\n    (if (= mx my) (reverse ms)\n        (recur (conj ms mx) (inc mx) my))))","problem":34,"user":"4e9629c2535dbda64a6f6b3f"},{"code":"(fn [start end]\n  (let [size (- end start)]\n    (take size (iterate inc start))))","problem":34,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn F [l r]\n   (if (>= l r)\n    '()\n    (cons l (F (inc l) r))\n   )\n)","problem":34,"user":"4fc7b079e4b0ee37620e1827"},{"problem":34,"code":"(fn [start end]\n  (#(let [l (last %)]\n     (if (<= (dec end) l)\n      %\n      (recur (conj % (inc l)))))\n    [start]))","user":"5ed52854e4b016b56eae05d2"},{"code":"(fn mrange [b e]\n  (take-while #(< % e) (iterate inc b)))","problem":34,"user":"4f03fb59535dcb61093f6b89"},{"problem":34,"code":"(fn my-range [start stop]\n  (if (< start stop)\n    (conj (my-range (inc start) stop) start)\n    ()))","user":"59a24c92e4b066c664927d20"},{"code":"(fn [from to] (loop [n from r []] (if (< n to) (recur (inc n) (conj r n)) r)))","problem":34,"user":"5138d08be4b0a5db03d727db"},{"problem":34,"code":"(fn [start stop]\n  (letfn [(my-loop [n]\n            (lazy-seq\n             (if (= n stop)\n               '()\n               (cons n (my-loop (inc n))))))]\n    (my-loop start)))","user":"5d90190ce4b0915913b1d3f7"},{"code":"(fn my-range [start end]\n  ((fn rec [list]\n    (if (= (last list) (- end 1))\n      list\n      (rec (conj list (+ (last list) 1))))) [start]))","problem":34,"user":"50ba3acae4b03e68e4411c78"},{"code":"(fn [from max]\n  (loop [f from, s []]\n    (if (>= f max)\n      s\n      (recur (inc f) (conj s f)))))","problem":34,"user":"4f128865535d64f603146428"},{"code":"(fn [x y]\n  (loop [n   x\n         num (- y x)\n         col []]\n    (if (= num 0)\n      col\n      (recur (inc n) (dec num) (into col (vector n))))))","problem":34,"user":"531016d0e4b08068f379ecd1"},{"problem":34,"code":"#(take-while (partial > %2) (iterate inc %1) )","user":"561a060ee4b053970a773b01"},{"code":"(fn [l h] (loop [i l vals []] (if (< i h)\n                              (recur (+ i 1) (cons i vals))\n                              (reverse vals))))","problem":34,"user":"4ec63613535d6d7199dd36c6"},{"code":"(fn f [min max]\n  (take (- max min) (iterate inc min)))","problem":34,"user":"51af978fe4b0c53cf2e68a50"},{"problem":34,"code":"(fn [a b]\n  (loop [x a result '()]\n    (if (= x b)\n      (reverse result)\n      (recur (inc x) (conj result x)))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn r [s e] \r\n  (if (< s e) (conj (r (inc s) e) s)))","problem":34,"user":"4ec65213535d6d7199dd36c8"},{"code":"(fn ran [x y]\n  (if (= x y)\n    '()\n    (cons x (ran (inc x) y))))","problem":34,"user":"534941d1e4b084c2834f4a60"},{"problem":34,"code":"(fn foo\n  ([a b] (foo a b []))\n  ([a b r] \n   (if (= a b) r (foo (inc a) b (conj r a)))))","user":"554edb85e4b00713264bd99a"},{"problem":34,"code":"#(take (- %2 %1) ((fn my-range [x] (cons x (lazy-seq (my-range (inc x))))) %1))","user":"54357066e4b0b6b47310fcfd"},{"code":"(fn [a b]\n  (reverse\n    (loop [i a, accum nil]\n      (if (= i b)\n          accum\n          (recur (inc i) (cons i accum))))))","problem":34,"user":"4f5030a9e4b03ad3f0c10cfd"},{"problem":34,"code":"(fn [s e]\n  (loop [s s sq '()]\n    (if (>= s e)\n      sq\n      (recur (inc s) (concat sq [s])))\n  )\n)","user":"53ea72b6e4b036ad0777e4e5"},{"code":"(fn [a b] (take (- b a)  (iterate inc a) ))","problem":34,"user":"5124619ae4b02c3f2a072ccd"},{"problem":34,"code":"(fn [from to]\n  (loop [f from a []]\n    (if (= f to) (apply list a) (recur (inc f) (conj a f)))))","user":"5762bf13e4b0994c1922fbae"},{"code":"(fn [start end]\n  ((fn rng [acc curr end]\n    (if (= curr end)\n      acc\n      (rng (conj acc curr) (+ curr 1) end)\n    )\n  ) [] start end)\n)","problem":34,"user":"5303a027e4b0d8b024fd3745"},{"problem":34,"code":"(fn [start end]\n  (take (+ end (if neg? \n                 (- start) \n                 start)) (iterate inc start)))","user":"59331397e4b072a2710fd046"},{"problem":34,"code":"(fn [f t]\n  (take-while \n   #(< % t)\n   (iterate inc f)))","user":"58db3c5ae4b0a4d5acaab677"},{"code":"(fn [s e]\n  (take (- e s) (iterate #(+ 1 %) s)))","problem":34,"user":"504e9011e4b069badc5a33b7"},{"problem":34,"code":"#(take-while (fn [a] (< a %2)) (map-indexed + (repeat %1)))","user":"5674f874e4b05957ce8c6144"},{"code":"(fn [from to] (sort (loop [at from result '()]\n                (if (< at to)\n                  (recur (+ at 1) (conj result at))\n                  result))))","problem":34,"user":"5125029de4b0ce9225d2ed3e"},{"problem":34,"code":"(fn [start end-exclusive] (take (- end-exclusive start) (iterate inc start)))","user":"595c02a9e4b066ee0a44afeb"},{"problem":34,"code":"(fn myrange [left right] (take-while (partial > right) (iterate inc left)))","user":"59804b60e4b021a7a535fdcf"},{"problem":34,"code":"(fn [s e] (reductions (fn [x y] (+ 1 x)) (repeat (- e s) s)))","user":"5509a176e4b06e50f9beb119"},{"problem":34,"code":"(fn myrange [start end]\n  (loop [value  start\n         result '()]\n    (if (= value end)\n      (reverse result)\n      (recur (inc value) (conj result value)))))","user":"544257b4e4b032a45b869379"},{"problem":34,"code":"#(loop [l %1 u %2 r []]\n   (if (= l u)\n     r\n     (recur (inc l) u (conj r l)))\n   )","user":"594263cbe4b060784b3b790a"},{"code":"#(\n  loop [current % vals '()]\n  (if(= current %2)\n    (reverse vals)\n    (recur (inc current) (cons current vals))))","problem":34,"user":"50ee68fce4b06330c1f87c59"},{"code":"(fn [x y]\n    (take (- y x) (iterate inc x)))","problem":34,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":34,"code":"#(take-while (fn [num] (< num %2)) (iterate inc %1))","user":"52ec2b9ae4b0705949c4444f"},{"problem":34,"code":"(fn [start end]\r\n   (loop [index start\r\n          ret []]\r\n     (if (>= index end)\r\n       ret\r\n       (recur (inc index) (conj ret index)))))","user":"542b764ae4b0dad94371f28d"},{"problem":34,"code":"(fn [x y] (loop[a x v []] (if (= a y) v (recur (inc a) (conj v a)))))","user":"53ad28ede4b047364c044462"},{"problem":34,"code":"(fn custom-range\n  [begin end-exclusive]\n  (let [difference (- end-exclusive begin)\n        template-list (repeat difference 0)]\n    (map-indexed (fn [idx item] (+ idx begin)) template-list)))","user":"4fc524aae4b081705acca37e"},{"problem":34,"code":"(fn\n  [start stop]\n  (loop [n start acc []]\n    (if (= n stop)\n      (seq acc)\n      (recur (inc n) (conj acc n)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":34,"code":"#(loop [cr %1 se '()]\n  (if (= cr %2)\n    (reverse se)\n    (recur (+ cr 1) (conj se cr))\n    )\n  )","user":"5992de05e4b0866487ed0d7e"},{"problem":34,"code":"(fn [start end]\n  (loop [out [start]]\n    (if (>= (+ 1 (last out)) end)\n      out\n      (recur (concat out (list (inc (last out))))))))","user":"57a310b4e4b0c3d858beb90c"},{"problem":34,"code":"(fn [i r]\n  (loop [x i\n         s '()]\n    (if (= x r)\n      (reverse s)\n      (recur (inc x)(conj s x)))))","user":"53b182a5e4b047364c044491"},{"code":"(fn rrange\n  ([l u] (rrange '() l u))\n  ([a l u] (if (= (count a) (Math/abs (- l u)))\n    a\n    (rrange (concat a (cons (+ (count a) l) '())) l u)\n    )\n  )\n)","problem":34,"user":"50b8de6ce4b0cba0e598b652"},{"problem":34,"code":"(fn [start stop]\n (loop [l () c (- stop 1)]\n  (if (< c start)\n   l\n   (recur (conj l c) (- c 1))\n  )\n )\n)","user":"55e8a85be4b0121d4835fd98"},{"code":"(fn range_ [i o]\n  (if (= (+ i 1) o)\n    (cons i '())\n    (cons i\n          (range_ (+ i 1)\n                  o)\n          )))","problem":34,"user":"5294c95fe4b02ebb4ef75013"},{"problem":34,"code":"(fn r [from to]\n\t(if (= from to)\n\t\t'()\n\t\t(conj (r (inc from) to) from)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":34,"code":"(fn my-range [a b]\n  (if (= (+ 1 a) (- b 1))\n    (list a (- b 1))\n    (cons a (my-range (+ 1 a) b))\n  ))","user":"582835cbe4b051871117bf30"},{"problem":34,"code":"#(loop [s []\n        n %]\n   (if (= n %2)\n     s\n     (recur (conj s n) (inc n))))","user":"5746d767e4b009280f9f2b6b"},{"problem":34,"code":"(fn [min max] \n  (loop [l []\n         x min]\n    (if (= x max)\n      l\n      (recur (conj l x) (inc x)))))","user":"5560f60ee4b0c656e3ff17c3"},{"code":"(fn f [x y]\n      (loop [y (- y 1) l '()]\n\t       (if (> x y) l (recur (- y 1) (conj l y)))))","problem":34,"user":"4f16213f535d64f603146449"},{"problem":34,"code":"(fn r [from to] (when (< from to) (cons from (lazy-seq (r (+ from 1) to)))))","user":"53d28800e4b00fb29b22131e"},{"problem":34,"code":"(fn myrange\n  ([current end] (myrange current end '()))\n  ([current end acc] \n   (let [final_value (dec end)\n         head (first acc)]\n     (if (= head final_value) (reverse acc)\n         (recur (inc current) end (cons current acc))))))","user":"5b632851e4b0c6492753e72d"},{"problem":34,"code":"(fn [x y] (loop [result [] root x]\n  (if (= root y)\n    result\n    (recur (conj result root) (inc root)))))","user":"5d517784e4b0776584bd6f60"},{"problem":34,"code":"(fn\n  [i f]\n  (loop \n    [x i r '()]\n    (if (= x f) \n      (reverse r)\n      (recur (inc x) (cons x r))\n      )\n ))","user":"6074f5ede4b069485764de52"},{"problem":34,"code":"(fn [a b]\n   (loop [res [] start a end b]\n     (if (= start end)\n       (seq res)\n       (recur (conj res start) (inc start) end))))","user":"5ddd134ae4b0948ae9d9adc0"},{"problem":34,"code":"(fn my-range [start end]\n        (loop [n start acc []]\n            (if (>= n end) acc\n                (recur (inc n) (conj acc n)))))","user":"5f82cfcce4b0c071e6c840fb"},{"problem":34,"code":"(fn my-range [a b]\n  (if (< a b) \n    (lazy-seq (cons a (my-range (inc a) b))) \n    nil))","user":"5b236e55e4b08b1df1c36759"},{"code":"(fn [start end] \n  (loop [x (dec end)\n         l ()]\n    (if (<= x start)\n      (conj l x)\n      (recur (dec x) (conj l x))\n      )\n    )\n  )","problem":34,"user":"52a9406de4b0c58976d9ac43"},{"problem":34,"code":"(fn range-ish [n m]\n  (if (< n m)\n      (cons n (range-ish (inc n) m))))","user":"561a9380e4b053970a773b07"},{"code":"(fn rng [begin end]\n    (loop [lst []\n           current begin]\n        (if (< current end)\n            (recur (conj lst current) (inc current))\n            lst)))","problem":34,"user":"51ec9114e4b069f463c22ccd"},{"problem":34,"code":"(fn [f l]\n  (take (- l f) (iterate inc f))\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":34,"code":"(fn [small big]\n  (loop [i small sum []]\n    (if (< i big)\n      (recur (inc i) (conj sum i))\n      sum)))","user":"56040e58e4b0c80df0ca2654"},{"problem":34,"code":"#(loop [start (dec %1) end (dec %2) rng '()]\n   (if (= start end)\n     (reverse rng)\n     (recur (inc start) end (conj rng (inc start))\n      )\n     )\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":34,"code":"(fn [start end] (reduce (fn [done todo] (conj done (- (first done) 1))) (list (- end 1)) (repeat (- end (+ start 1)) 1) ))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [b e]\n  (take (- e b) (iterate inc b)))","problem":34,"user":"50ef4e2be4b0a78662fa2653"},{"code":"(fn rng\n[x1 x2]\n    (loop [cnt (dec x2) acc '()]\n    (if (< cnt x1)\n        acc\n        (recur (dec cnt) (cons cnt acc))\n        \n    )\n    )\n)","problem":34,"user":"4f0df199535d0136e6c2231e"},{"code":"(fn rng [left right]\n  (if (< left right)\n    (cons left (rng (inc left) right))\n    ()))","problem":34,"user":"52271a85e4b04e78ff2e19a7"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         r ()]\n    (cond \n     (= x y) (reverse r)\n     :else (recur (inc x) (cons x r)))))","user":"57fedf07e4b0d3187e9009dc"},{"problem":34,"code":"#((fn grow [l to]\n    (let [n (inc (last l))]\n      (if (< n to) (grow (conj l n) to) l))) [%1] %2)","user":"596a66cde4b069c0a1a19803"},{"problem":34,"code":"(fn\n   [begin end]\n   (loop [cur begin\n          limit end\n          result []]\n     (if (>= cur limit)\n       result\n       (recur (inc cur) limit (conj result cur))))\n   )","user":"53c6a2fde4b00fb29b22129d"},{"code":"(fn[x y] (filter #(and (>= % x ) (< % y)) [-2 -1 0 1 2 3 4 5 6 7 8]))","problem":34,"user":"52271ffee4b04e78ff2e19a9"},{"code":"(fn [x i]\n  (take (- i x) (iterate inc x)))","problem":34,"user":"51eb3aace4b0f1f103a0d159"},{"problem":34,"code":"(fn [start stop] (loop [i start li '()]\n                   (if (>= i stop)\n                     (reverse li)\n                     (recur (inc i) (conj li i)))))","user":"55009d17e4b07d26eda61d5d"},{"problem":34,"code":"(fn [st end]\n  (take (- end st)\n        (iterate inc st))\n  )","user":"60436423e4b02d28681c77a3"},{"problem":34,"code":"(fn\n  [start stop]\n  (loop [n start\n         coll []]\n    (if (>= n stop)\n      coll\n      (recur (inc n) (conj coll n)))))","user":"55af3e6be4b03311e7b732c7"},{"code":"#(loop [lb %1 result []] (if (> %2 lb) (recur (inc lb) (conj result lb)) result))","problem":34,"user":"4e975bce535dbda64a6f6b53"},{"problem":34,"code":"(fn [from to] (letfn [(numbers\n                         [n] (lazy-seq (cons n (numbers (inc n)))))]\n                 (take (- to from) (numbers from))))","user":"5ed4b1e8e4b016b56eae05ce"},{"problem":34,"code":"(fn impl-range [x y]\n  (loop [result [] \n         x x\n         y y]\n    (if(>= x y)\n       result \n      (recur (conj result x) (inc x) y))))","user":"59301509e4b072a2710fcfd6"},{"code":"#(loop [start [%1] end %2]\n   (if (not (= (last start) (dec end)))\n     (recur (conj start (inc (last start))) end)\n     start))","problem":34,"user":"512d3304e4b040332b905b2d"},{"problem":34,"code":"(fn derek [a b] (take (- b a) (iterate inc a)))","user":"55e0038ee4b050e68259b404"},{"code":"#((fn [x y z] (if (< x y) (recur (inc x) y (conj z x)) z)) % %2 [])","problem":34,"user":"51fa1375e4b0f1313d4689c9"},{"problem":34,"code":"(fn [a b] (loop [d () c b] (if (<= c a) d (recur (cons (dec c) d) (dec c)))))","user":"5466199ce4b01be26fd746e2"},{"code":"(fn [lower upper] (take (- upper lower) (iterate #(+ 1 %) lower)))","problem":34,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn [start n]\n  (take-while (partial > n) (iterate inc start)))","problem":34,"user":"504db141e4b021508a333965"},{"problem":34,"code":"(fn [& xs] (loop [ls [] n (first xs) l (last xs)] (if (< n l) (recur (conj ls n) (inc n) l) ls)))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (take (- end start) (iterate inc start))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"problem":34,"code":"(fn [b e]\n  (reverse (loop [c b result '()]\n\t(if (= c e)\n      result\n\t  (recur (inc c) (cons c result))))))","user":"546176e7e4b01be26fd746a2"},{"code":"#(reverse (\n             (fn [start end acc] (\n                                   if (= start end)\n                                  \tacc\n                                   (recur (inc start) end (conj acc start))\n                                   )\n               )\n             %1 %2 '()\n             ))","problem":34,"user":"528f82d8e4b0239c8a67aef4"},{"problem":34,"code":"#(loop [ns [] n %1]\n  (if (= n %2)\n    ns\n    (recur (conj ns n) (inc n))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":34,"code":"(fn [start until] \n  (take-while #(< % until) (iterate inc start))\n)","user":"55dd0aebe4b050e68259b3bf"},{"code":"(fn r [start end] (if (= start end) () (cons start (r (inc start) end))))","problem":34,"user":"51f04e89e4b0274c496158cd"},{"problem":34,"code":"(fn range-imple [low high]\n    (if (>= low high) \n      () \n      (cons low (range-imple (inc low) high))))","user":"608c270ae4b03bd49d9f36b3"},{"problem":34,"code":"#(for [n (iterate inc %1) \n              :while (< n %2)]\n          n)","user":"58765038e4b01531a375ea7e"},{"problem":34,"code":"(fn [from to]\n  (loop [result '()\n         i (dec to)]\n    (if (< i from)\n      result\n      (recur (conj result i)\n             (dec i)))))","user":"537cb3ade4b06839e8705e7d"},{"problem":34,"code":"(fn [lower upper]\n  (loop [max (- upper 1)\n         min lower\n         build-list ()]\n    (if (< max min) \n      \t build-list\n      \t(recur (- max 1) min (conj build-list max)))))","user":"53b05a36e4b047364c044481"},{"problem":34,"code":"(fn [a b]\n  (loop [a a b b r ()]\n    (if (= a b) r (recur a (dec b) (cons (dec b) r)))))","user":"5e178fbee4b00200644e3d57"},{"code":"(fn myrange [min max] (if (= min max) () (conj (myrange (inc min) max) min)))","problem":34,"user":"50f2e5cee4b0ec8ee6fa8643"},{"code":"#(loop [i % v []]\n   (if (< i %2)\n     (recur (inc i) (conj v i))\n     v))","problem":34,"user":"5394265ee4b0b51d73faaec6"},{"code":"(fn [a b]\n  (loop [i a r []]\n    (if (< i b)\n      (recur (inc i) (conj r i))\n      r)))","problem":34,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [x y] (take-while #(< % y) (iterate inc x)))","problem":34,"user":"4e50b67b535dc968683fc4ed"},{"problem":34,"code":"(fn [n m]\n  (if (> n m)\n    (println \"Error: the first input has to be the same or smaller than the second\")\n    (loop [current n return-val [] ]\n      (if (= current m)\n        return-val\n        (recur (inc current) (conj return-val current)))))\n  )","user":"60759e51e4b069485764de5a"},{"code":"(fn [a b] (loop [arr [] cnt a] \n  (if (= cnt b) arr (recur (conj arr cnt) (inc cnt)))))","problem":34,"user":"5036eba7e4b0af0658af77a5"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [current start\n         accum ()]\n    (if (= current end)\n        (reverse accum)\n        (recur (+ current 1) (conj accum current)))))","user":"58152157e4b0f478707a0631"},{"problem":34,"code":"(fn [x y] (loop [v []\n                 x x\n                 ]\n            (cond (< x y) (recur (conj v x) (inc x)) \n             :else v)\n            ))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn [start end]\n  (letfn [(rev [s e]\n            (if (= s e)\n              '()\n              (cons s (rev (+ s 1) e))))]\n    (rev start end)))","problem":34,"user":"4e667f67535d8ccf87e9fe77"},{"code":"(fn rng[a b]\n  (if (< a b) (cons a (rng (+ 1 a) b))))","problem":34,"user":"4daf4d2fedd6309eace4d178"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (cond\n   (= start end) '()\n   :else (cons start (my-range (inc start) end))\n   ))","user":"595d0897e4b066ee0a44b00f"},{"code":"(fn rng [l u] (if (= (+ l 1) u) (list l) (conj (rng (+ l 1) u) l)))","problem":34,"user":"536de1c3e4b0fc7073fd6e64"},{"problem":34,"code":"(fn my-range\n  [x y]\n  (loop [n x, z '()]\n    (if-not (= n y)\n      (recur (inc n) (conj z n))\n      (reverse z))))","user":"551c594de4b07993ea3788dc"},{"code":"(fn[n1,n2] \r\n  (loop[lis (list n1)]\r\n\t(if ( = (last lis) ( - n2 1)) \r\n\t\tlis\r\n\t\t(recur (concat lis (list(inc (last lis)))))\r\n\t)\r\n\t)\r\n)","problem":34,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":34,"code":"(fn [a b]\n   (loop [r () i a]\n      (if (= i b)\n         (reverse r)\n         (recur (cons i r) (inc i)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn rng [a b]\n  (if (< a b)\n    (cons a (lazy-seq (rng (inc a) b)))))","problem":34,"user":"4f6236abe4b0defedf855fcd"},{"code":"(fn [start end] (loop [strt start lst nil] (if (= strt end) (reverse lst) (recur (inc strt) (conj lst strt)))))","problem":34,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":34,"code":"(fn [x y] (loop [ y y result ()] (if (> y x) (recur (dec y) (conj result (- y 1))) result)))","user":"5afdca89e4b0cc2b61a3bd20"},{"problem":34,"code":"(fn [res a b] (if (= a b) res (recur (conj res (dec b)) a (dec b)))) nil","user":"5b5f2566e4b0c6492753e6e9"},{"code":"( fn [a b] ( take (- b a) (iterate #(inc %) a) ) )","problem":34,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"#(loop [l %, r (dec %2), acc ()]\r\n  (if (< r l)\r\n      acc\r\n      (recur l (dec r) (cons r acc))))","problem":34,"user":"4e1772b1535d04ed9115e7ee"},{"problem":34,"code":"(fn [l u] (take-while #(<= l % (dec u)) (iterate inc l)))","user":"5b772ad7e4b047b03b2036e8"},{"problem":34,"code":"(fn new-range \n  [a b] \n  (if (= a (dec b)) [a] (cons a (new-range (inc a) b))))","user":"550d9452e4b06e50f9beb15d"},{"problem":34,"code":"(fn problem34-range\n  [x y]\n  (loop [counter x,\n         agg []]\n    (if (= counter y)\n      agg\n      (recur (inc counter) (conj agg counter)))))","user":"57717915e4b0979f896515b3"},{"problem":34,"code":"(fn rng [min, max] (loop [r [] i min] (if (= i max) (seq r) (recur (conj r i) (inc i)))))","user":"525636dfe4b0541d1855ba0d"},{"code":"(fn [start end]\n  (letfn [(do-rng [res start end]\n                  (if (= start end)\n                    res\n                    (recur (conj res start) (+ start 1) end)))]\n    (reverse (do-rng () start end))))","problem":34,"user":"51f8e057e4b09be9c177e53d"},{"problem":34,"code":"#(let [upper %2]\n  (loop [lower %1\n         l []]\n    (cond\n     (< lower upper) (recur (inc lower)\n                            (conj l lower))\n     :else l)))","user":"53b1db8ee4b047364c044495"},{"problem":34,"code":"(fn[f t] (loop [i f rv []] (if (< i t) (recur (inc i) (conj rv i)) rv)))","user":"55809cb9e4b05c286339e0ef"},{"problem":34,"code":"(fn me\n  [s e]\n  (if (< s e)\n    (cons s (me (inc s) e))))","user":"5da7176ae4b000c986472c13"},{"problem":34,"code":"(fn create-list-from-range [minimum maximum]\n  (sort\n    (loop [coll '() n minimum]\n      (if (= n maximum)\n        coll\n        (recur (conj coll n) (inc n))))))","user":"5aa2b5dbe4b0d174b936c85b"},{"problem":34,"code":"(fn rng [start end] (when (< start end) (cons start (rng (inc start) end))))","user":"53e9a15be4b036ad0777e4ae"},{"problem":34,"code":"(fn [a b]\n  (loop [a a r []]\n    (if (< a b)\n      (recur (inc a) (conj r a))\n      r)))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":34,"code":"; second\n#(take (- %2 %) (iterate inc %))\n\n; first\n#_(fn [lo hi]\n  (loop [r []\n         x lo]\n    (if (= x hi)\n      r\n      (recur (conj r x) (inc x)))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [ x y] \n  (loop [col [] n x]\n  (if (= n y)\n   col\n  (recur (conj col n) (inc n)))))","problem":34,"user":"4e1248b1535d04ed9115e7cf"},{"problem":34,"code":"(fn rng [start end]\n  (if (< start end)\n    (cons start (rng (inc start) end))\n    '()\n    )\n  )","user":"5d641841e4b0c9e5857d502e"},{"code":"#((fn a [x y]\n         (when (< x y)\n           (cons x (a (inc x) y)))) %1 %2)","problem":34,"user":"4e68be01535d8ccf87e9fe88"},{"problem":34,"code":"(fn\n [from to]\n (loop [n from\n        result []]\n   (if (= n to)\n     result\n     (recur (inc n) (conj result n)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":34,"code":"(fn range1 [from to]\n  (take-while (partial > to) (iterate inc from))\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":34,"code":"(fn [l h]\n  (loop [ns []\n         n  l]\n    (if (= n h)\n      ns\n      (recur (conj ns n) (inc n)))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn my-range [start end]\n  (if (>= start end)\n      ()\n      (lazy-seq (cons start (my-range (inc start) end)))))","problem":34,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn ran [start end]\n  (take-while #(< % end) (iterate inc start)))","problem":34,"user":"4fedd2cae4b0198f34b063ba"},{"problem":34,"code":"(fn [i1 i2]\n    ((fn [c acc]\n      (if (< c i1) acc (recur (dec c) (cons c acc)))\n    ) (dec i2) '()))","user":"5681afaae4b0945ebc182a87"},{"problem":34,"code":";; 4 - 1 = 3 = number of elements\n\n#(take (- %2 %1) (iterate inc %1))","user":"5668dcc6e4b04acd4f672df8"},{"problem":34,"code":"(fn rng [from to]\n          (when(not= from to)\n          (lazy-seq (cons from (rng (inc from) to)))))","user":"553900d4e4b09218d5f44fe5"},{"code":"(fn [s e]\n  (loop [cur s\n         res '()]\n    (if-not (= cur e)\n      (recur (inc cur) (conj res cur))\n      (reverse res))))","problem":34,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":34,"code":"#(let [max %2] (loop [res [] count %1] (if (= count max) res (recur (conj res count) (inc count)))))","user":"5675f2f4e4b05957ce8c6153"},{"code":"(fn [a b]\n  (loop [sofar [] curr a]\n\t   (if (>= curr b)\n\t       sofar\n\t       (recur (conj sofar curr) (inc curr)))))","problem":34,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":34,"code":"(fn [a b] (loop [beg a end b acc []] (if (= beg end) acc (recur (inc beg) end (conj acc beg)))))","user":"553fe819e4b0a04f792994fc"},{"problem":34,"code":"(fn imp-range [start end]\n  (loop [s start e (dec end) r []]\n    (if (= s e)\n      (conj r s)\n      (recur (inc s) e (conj r s)))))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"(fn [form to]\n  (loop [r [] item form]\n    (if (< item to)\n      (recur (conj r item) (inc item))\n      r)))","problem":34,"user":"52479487e4b05ef8e38e6373"},{"problem":34,"code":"(fn [begin end] (take-while (partial > end) (iterate inc begin)))","user":"52e5f810e4b09f7907dd1468"},{"problem":34,"code":"(fn [start end] (take (- end start) (map #(+ (- start 1) %) (iterate inc 1))))","user":"597e128ee4b0dbe32238d0a4"},{"code":"(fn my-range [start end]\n  (loop [acc []\n         index start]\n    (if (= index end)\n      acc\n      (recur (conj acc index) (inc index)))))","problem":34,"user":"52ee46e5e4b05e3f0be25ec5"},{"code":"(fn [mini maxi]\n  (let [len (- maxi mini)]\n    (take len (iterate inc mini))))","problem":34,"user":"4ec9549d535d6d7199dd36fe"},{"problem":34,"code":"(fn rng1 [fro to] (reduce (fn [a _] (conj a (inc (last a)))) [fro] (repeat (- to fro 1) fro)))","user":"53ef78bee4b0742d9025b0cd"},{"problem":34,"code":"(fn [x y]\n     (loop [number x out []]\n           (if (>= number y)\n             out\n             (recur (+ number 1) (conj out number)))))","user":"5c81c933e4b0c8042a70ce2d"},{"code":"(fn rng [a b] (reverse\n  (loop [p a, lst '()]\n    (if (= p b)\n      lst\n      (recur (+ p 1) (conj lst p))))))","problem":34,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [l u]\n  (loop [i (dec u) s ()]\n    (if (< i l) \n        s\n        (recur (dec i) (conj s i)))))","problem":34,"user":"4e6e3a1e535d5021c1a89602"},{"problem":34,"code":"(fn x-range [start end]\n    (if (= end start)\n\t'()\n      (conj (x-range (+ start 1) end) start)))","user":"5a250b86e4b07f18be40aa19"},{"problem":34,"code":"(fn [a b] \n (loop [coll []\n        x a]\n  (if (< x b)\n    (recur (conj coll x)\n           (inc x))\n    coll)\n))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":34,"code":"(fn [low high] (take-while\n                (partial > high)\n                (iterate inc low)))","user":"53623eaee4b0243289761e4f"},{"problem":34,"code":"(fn foo [cur end] \n  (when \n    (< cur end) \n    (conj (foo (inc cur) end) cur) \n  )\n)","user":"55dd7f72e4b050e68259b3c4"},{"problem":34,"code":"(fn [lo hi] (loop [res [] x lo]\n              (if (= x hi) res (recur (conj res x) (+ x 1)))))","user":"5dee144ae4b093ff71727591"},{"problem":34,"code":"(fn [start end]\n  (loop [iter start, result []]\n    (if (= iter end) result\n        (recur (inc iter) (conj result iter)))))","user":"589037b4e4b00487982d51d0"},{"problem":34,"code":"(fn [low high]\n  (take (- high low) (iterate inc low))\n  )","user":"5630fd6fe4b0bfe05bf1178b"},{"problem":34,"code":"(fn myrang\n  ([lo hi] (myrang lo hi []))\n  ([lo hi ls]\n   \t(if (= lo hi)\n   \t\tls\n      \t(myrang (inc lo) hi (conj ls lo) ))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn new-range [ini end] \n           (loop [i ini sequ [] ]\n             (if\n               (< i end)\n               (recur (inc i) (conj sequ i))\n               sequ\n             )\n           )\n         )","problem":34,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn [x y] (take (- y x) ((fn ints [n] (cons n (lazy-seq (ints (inc n))))) x)))","problem":34,"user":"5242d5c3e4b076204b44fa95"},{"problem":34,"code":"(fn get-range\n  ([start end] (get-range start end [] ) )\n  ([curr end coll] \n   (if (= curr end)\n     coll\n     (get-range (inc curr) end (conj coll curr))) \n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn f1 [a b c] (if (< b c) (f1 (conj a b) (inc b) c) (reverse a))) '()","problem":34,"user":"51a417dde4b0def3c5c58688"},{"problem":34,"code":"(fn my-range [from to]\n  (loop [i from\n         result []]\n    (if (< i to)\n      (recur (inc i) (conj result i))\n      (seq result))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":34,"code":"(fn [low high]\n   ((fn helper [low high]\n      (if (< low high)\n        (conj (helper (inc low) high)\n              low))\n      ) low high)\n   )","user":"5ee75f8be4b029a2061bbea5"},{"problem":34,"code":"(fn rng [from to]\n  (loop [acc [from]]\n    (if (= (inc (last acc)) to)\n      acc\n      (recur (conj acc (inc (last acc)))))))","user":"59032c0fe4b022d14a2aaf9f"},{"code":"(fn [from to]\n  (loop [n (- to 1) acc nil]\n    (if (< n from) acc\n      (recur (- n 1) (conj acc n)))))","problem":34,"user":"4e7f7e48535db966e863cc42"},{"code":"(fn [n m]\n  (loop [acc [] c n]\n    (if (= c m)\n      acc\n      (recur (conj acc c) (inc c)))))","problem":34,"user":"4ef0a38e535dced4c769f20b"},{"problem":34,"code":"(fn [start end]\n  (loop [i start out `()]\n    (if (= i end)\n      out\n      (recur (inc i) (concat out [i])))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":34,"code":"(fn [s e] (map-indexed #(+ %1 %2) (repeat (- e s) s)))","user":"55380eeae4b09218d5f44fd9"},{"code":"(fn [bottom top]\n    (loop [acc [] b bottom t top]\n    (if (>= b t)\n    acc\n      (recur (conj acc b) (+ b 1) t)\n    )))","problem":34,"user":"4fe89db2e4b07c9f6fd12c59"},{"code":"(fn my-range [a b]\n      (let [c (+ 0 (- b a))]\n        (take c (iterate inc a))\n        )\n      )","problem":34,"user":"536827f1e4b0243289761e8a"},{"code":"(fn cc [x y]\n   (loop [i x]\n     (when (< i y)\n       (cons i (cc (+ i 1) y))\n     )))","problem":34,"user":"523eb110e4b057c4b7cd0a67"},{"problem":34,"code":"(fn [a b]\n  (loop [i (inc a) coll [a]]\n    (if (< i b)\n      (recur (inc i) (conj coll i))\n      coll)))","user":"54df7922e4b024c67c0cf7ad"},{"problem":34,"code":"(fn f [x end]\n  (if (= x end)\n    (list)\n    (cons x (f (inc x) end))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":34,"code":"(fn create-range [from to]\n  (take (- to from) (iterate inc from)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"#(take (-%2 %) (iterate inc %))","problem":34,"user":"51b90b88e4b050a1176cd6a2"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end) '() (cons start (my-range (+ start 1) end))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn [i j] (take (- j i) (iterate inc i)))","problem":34,"user":"4f9acea6e4b0dcca54ed6d10"},{"problem":34,"code":"(fn [start end]\n  (letfn [(g\n    [start end acc]\n      (if (>= start end) acc\n        (g start (dec end) (conj acc (dec end)))))]\n  (g start end ())))","user":"53cbe808e4b00fb29b2212d4"},{"code":"(fn rng [a b] (cond (= a b) nil :else (cons a (rng (+ a 1) b))))","problem":34,"user":"528b9efee4b0239c8a67aea0"},{"problem":34,"code":"#(for [x (iterate inc %1) \n       :while (< x %2)\n       ] x)","user":"55f6c0e2e4b06e875b46ce99"},{"problem":34,"code":"(fn [start end] (loop [cnt start acc '()]\n                                 (if (>= cnt end)\n                                     (reverse acc)\n                                     (recur (inc cnt) (conj acc cnt)))))","user":"565233f2e4b0f9d632dd8461"},{"problem":34,"code":"(fn [a b] ( loop [ x [] i a ] ( if ( < i b )  ( recur (conj x i) (inc i) ) x ) ))","user":"5b3aa98be4b02d533a91bbca"},{"problem":34,"code":"(fn myrange\n  [a b]  \n    (cond\n      (= a b) nil\n      :else (lazy-seq (cons a (myrange (inc a) b)))))","user":"54145050e4b01498b1a719ea"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [acc []\n         current start\n         end end]\n    (if (= current end)\n      acc\n      (recur (conj acc current) (inc current) end))))","user":"51bd78c3e4b0ff155d51d2b0"},{"code":"(fn [start end]\n  (loop [the_start start\n         res '()]\n    (if (= the_start end)\n      res\n      (recur (inc the_start) (concat res [the_start])))))","problem":34,"user":"537881a4e4b06839e8705e46"},{"problem":34,"code":"(fn r [start end]\n  (loop [i start, result []]\n    (if (< i end)\n      (recur (inc i) (conj result i))\n      result)))","user":"58409e47e4b089d5ab817dee"},{"problem":34,"code":"(fn [begin end]\n  (loop [build []\n         begin begin\n         end end]\n    (if (= begin end)\n      build\n      (recur (conj build begin) (inc begin) end))))","user":"598e7998e4b02b9968b84d34"},{"problem":34,"code":"(fn [begin end]\n  (loop [curr begin\n         coll []]\n    (if (< curr end)\n      (recur (inc curr) (conj coll curr))\n      coll)))","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":34,"code":"(fn [x y] (reverse \n  \n  (loop [start x\n         rng ()]\n    \n    (println start rng)\n    \n    (if (> start (- y 1))\n      rng\n      (recur (inc start) (conj rng start))\n    )\n  \n  \n  )))","user":"54a7d707e4b09f271ff37c9b"},{"problem":34,"code":"(fn [i j]\n  (for [x (iterate inc i) :while (< x j)] x))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":34,"code":"(fn [f s] (take (- s f) (iterate inc f)))","user":"55cc6c35e4b0e31453f64a10"},{"problem":34,"code":"(fn [start end]\n  (loop [s start,\n         acc []]\n    (if (= s end)\n      acc\n      (recur (+ s 1)\n             (conj acc s)))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"#(loop [result [] nexti %] (if (< nexti %2) (recur (conj result nexti) (inc nexti)) result))","problem":34,"user":"50a8cc97e4b0a9a42786e8db"},{"code":"(fn my-range [a b]\r\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4e7e4a1f535db169f9c7970c"},{"problem":34,"code":"(fn [bot top]\n  (loop [current bot\n         coll []]\n    (if (= top current)\n      (seq coll)\n      (recur (inc current) (conj coll current)))))","user":"54df838de4b024c67c0cf7ae"},{"code":"#(loop [i %1 result []] (if (= i %2) result (recur (inc i) (conj result i))))","problem":34,"user":"4eb13d60535d7eef3080733f"},{"problem":34,"code":"(fn my-range[num1 num2]\n   (if (= num1 num2)\n     '()\n     (cons num1 (my-range (inc num1) num2))))","user":"5bbbce70e4b0a20761a2360f"},{"problem":34,"code":"(fn [s t]\n  (take (- t s)\n        ((fn start-from [n]\n           (lazy-seq (cons n (start-from (inc n)))))\n         s)))","user":"5721dfc3e4b0c5bde472c0bb"},{"code":"(fn f [a b]\n             (if (< a b)\n               (conj (f (inc a) b) a)\n               '()\n             )\n           )","problem":34,"user":"5149c2f1e4b0829bd132edb0"},{"problem":34,"code":"(fn [x y]\n  (loop [acc []\n         c x]\n    (if (> y c)\n      (recur (conj acc c) (inc c))\n      (seq acc))))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":34,"code":"(fn my-range\n  ([start end] (my-range start end []))\n  ([start end l] (if (= start end)\n                   l\n                   (recur (inc start) end (conj l start)))))","user":"60ade833e4b00e9e6653c494"},{"problem":34,"code":"(fn myrange [l u] (if (< l u)\n                    (cons l (lazy-seq (myrange (inc l) u)))\n                    ))","user":"5511fd7ee4b06e50f9beb19e"},{"problem":34,"code":"(fn my-range\n  ([start end]\n   (my-range start end []))\n  ([start end rang]\n   (if (= (dec end) (last rang))\n     rang\n     (my-range (inc start) end (conj rang start)))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":34,"code":"(fn [from to]\n  (loop [from from to to ret []]\n    (if (< from to)\n      (recur (+ 1 from) to (conj ret from))\n      ret)))","user":"53f053ebe4b0742d9025b0d3"},{"problem":34,"code":"(fn [x y]\n     (loop [i x\n              f []]\n           (if (= i y)\n             f\n             (recur (inc i) (conj f i)))))","user":"4f867b25e4b033992c121c51"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [counter (dec end) result []]\n    (if (> counter start)\n      (recur (dec counter) (cons counter result))\n     (cons counter result))))","user":"577629abe4b0979f8965162e"},{"code":"(fn [start stop]\n  (loop [result nil current (dec stop)]\n    (if (< current start)\n      result\n      (recur (conj result current) (dec current)))))","problem":34,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [s e] \n  (let [rng (fn r [c acc] (if (< c e) (r (+ c 1) (cons c acc)) acc))] (reverse (rng s '()))))","problem":34,"user":"535197f2e4b084c2834f4ae4"},{"problem":34,"code":"(fn _range [i j]\n  (if (= i j)\n    []\n    (conj (_range i (dec j)) (dec j))))","user":"57008afae4b08d47c97781ca"},{"problem":34,"code":"(fn r [lo hi] (when (< lo hi) \n                (cons lo (r (inc lo) hi))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [start numitems] \n  (take-while #(< % numitems) (iterate inc start)))","problem":34,"user":"52430d3ce4b076204b44faa5"},{"code":"(fn rng\n  [start end]\n  (if (< start end)\n    (cons start (rng (inc start) end))))","problem":34,"user":"4fab1ea1e4b081705acca210"},{"problem":34,"code":"(fn [low up]\n  (loop [num up acc ()]\n    (if (= num low)\n      acc\n      (recur (dec num) (conj acc (- num 1))))))","user":"5685e9fde4b04eec3ec5cfd1"},{"problem":34,"code":";;(fn rng [a b] (if (>= a b) nil (cons a (rng (inc a) b))))\n\n(fn rng [a b]\n  (if (>= a b)\n    nil\n    (lazy-seq\n     (cons a\n           (rng (inc a) b)))))","user":"540e0637e4b0addc1aec6717"},{"code":"(fn [a b]\n  (loop [i a xs []]\n    (if (< i b)\n      (recur (inc i) (conj xs i)) xs)))","problem":34,"user":"4f1427f8535d64f603146435"},{"problem":34,"code":"(fn [x y] (take-while (fn [n] (not= n y)) (iterate inc x)))","user":"551c66dae4b07993ea3788de"},{"problem":34,"code":"(fn [beg end]\n  (take (- end beg)\n     (iterate inc beg)))","user":"5c6da283e4b0fca0c162273e"},{"problem":34,"code":"(fn [a b]\n   (map-indexed #(+ %1 %2) (repeat (- b a) a)))","user":"5a80b934e4b00b71e582a05b"},{"problem":34,"code":"(fn rangeX [a b] (take (- b a) (iterate inc a)))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn rng ([a b] (if (= a b) [] (concat [a] (rng (inc a) b)))))","problem":34,"user":"4ee868be535d93acb0a6687d"},{"code":"(fn [a b]\n  (reverse (loop [x a ans '()]\n    (if (= x b)\n        ans \n        (recur (inc x) (conj ans x))))))","problem":34,"user":"52196842e4b0890f2f822bfa"},{"code":"#(take (- %2 %1)\n  (iterate inc %1))","problem":34,"user":"4ff5744ae4b0678c553fc36a"},{"problem":34,"code":"(fn my-range [min max]\n  (let [integers (fn integers [start] (lazy-seq (cons start (integers (inc start)))))]\n    (take (- max min) (integers min))))","user":"58db097fe4b0a4d5acaab66f"},{"problem":34,"code":"(fn [m n]\n  (take-while #(< % n) (iterate inc m)))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":34,"code":"(fn my-range\n  [small big]\n  (if(< small big)\n    (conj (my-range (inc small) big)  small)\n    ))","user":"5c486dece4b0e06e1360a3c0"},{"problem":34,"code":"(fn [x y]\n    (letfn [(g [a x y]\n              (if (= x y)\n                a\n                (recur (conj a x) (inc x) y)))]\n      (reverse (g () x y))))","user":"5578ba3ae4b05c286339e08c"},{"problem":34,"code":"(fn f [s e]\n  (loop [i s acc []]\n    (if (< i e)\n      (recur (inc i) (conj acc i))\n      acc)\n    ))","user":"574a546ee4b02ea1147991f6"},{"code":"(fn [start end]\n  (let [x (- start end)]\n  (take (if (>= x 0)\n                x\n          \t\t(- 0 x))\n        (iterate inc start))))","problem":34,"user":"53a068cbe4b0ca733b9744ae"},{"code":"(fn my-range[start end]\n  (if (= start end)\n    nil\n    (conj (my-range (inc start) end) start)))","problem":34,"user":"523f1245e4b01c266ffa7f95"},{"problem":34,"code":"(fn [start end]\n  (loop [coll [start]\n         f start]\n    (let [val (inc f)]\n      (if (< val end)\n        (recur (conj coll val) val)\n        coll))))","user":"545b0275e4b01be26fd74648"},{"code":"(fn [start end]\n  (reverse (loop [current start collected '()]\n    (if (= current end) collected\n        (recur (+ current 1) (conj collected current))))))","problem":34,"user":"5146df5ae4b04ef915e3731d"},{"problem":34,"code":"#(loop [start %1 end %2 rt []]\n   (if(>= start end)\n     rt\n     (recur (inc start) end (conj rt start))\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"problem":34,"code":"(fn [s f] \n    (reverse ((fn r [x acc] \n          (cond \n            (= x f) acc\n            :else (r (inc x) (conj acc x)))) s '())))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn rng [a b]\n  (if \n    (= (inc a) b)\n    (list a)\n    (conj (rng (inc a) b) a)))","problem":34,"user":"4e89f46c535d3e98b8023288"},{"problem":34,"code":"(fn [l h] ((fn rng [s n] (if (= n h) s (rng (conj s n) (inc n)))) [] l))","user":"5c7ef3f3e4b0d597f478cad7"},{"code":"(fn my-range [i n]\n  (take-while #(< % n) (iterate inc i)))","problem":34,"user":"527ccaf4e4b0757a1b17136d"},{"problem":34,"code":"(fn my-range [res cur end] (if (= cur end) res (my-range (conj res cur) (inc cur) end))) []","user":"55df5feae4b050e68259b3f1"},{"problem":34,"code":"(fn [a b]\n  (loop [r [] i a]\n    (if (= i b)\n      r\n      (recur (conj r i) (inc i)))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":34,"code":"(fn myrange\n  ([out cur fin]\n   (if (= cur fin)\n     out\n     (myrange (conj out (inc cur)) (inc cur) fin)))\n  ([cur fin]\n   (myrange [cur] cur (- fin 1)))\n)","user":"54b2e881e4b09f271ff37d32"},{"problem":34,"code":"(fn [from to] (take (- to from) (iterate #(inc %) from)))","user":"563e7a33e4b0da801c4e466d"},{"problem":34,"code":"(fn f [l h] (if (< l h) (cons l (f (inc l) h)) '()))","user":"50ef77a4e4b0bdaecbb47d99"},{"code":"(fn [a b] (loop [curr a\n                 result []]\n            (if (= curr b)\n              result\n              (recur (inc curr) (conj result curr))\n            )\n          )\n)","problem":34,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":34,"code":"(fn [start end]\n  (loop [n start\n          acc nil]\n  (if (= n end)\n    acc\n    (recur (inc n) (concat acc [n])))))","user":"5ca7b5bbe4b048ec896c5c04"},{"problem":34,"code":"(fn[start n](take (- n start) (iterate inc start)))","user":"5a80ad4be4b00b71e582a058"},{"problem":34,"code":"#(loop [x %1 cum () ]\n   (if (>= x %2)\n     (into () cum)\n     (recur (inc x) (conj cum x))\n   )\n )","user":"5663cccee4b0e91d5f5c5655"},{"code":"(fn [a b]\n  (reverse \n    (into '() (take (- b a) (iterate inc a)))))","problem":34,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"code":"(fn [o i]\n  (map #(+ (dec o) %) (take (- i o) (reductions + (repeat 1))))\n)","problem":34,"user":"4e3456f9535deb9a81d77f2a"},{"problem":34,"code":"(fn [a b]\n  (loop [coll (list (dec b))]\n    (let [n (first coll)]\n      (if (> n a)\n        (recur (conj coll (dec n)))\n        coll))))","user":"50310713e4b05b7df5a0b84c"},{"problem":34,"code":"(fn foo [a b]\r\n  (if (= a b)\r\n    (list)\r\n    (cons a (foo (inc a) b))))","user":"606e0a42e4b069485764de19"},{"code":"(fn [init end] (take (- end init) (iterate inc init)))","problem":34,"user":"50e135f4e4b084616e11c667"},{"problem":34,"code":"(fn xrng [start end]\n  (loop [i start out []]\n    (if (< i end) \n      (recur (inc i) (conj out i))\n      out)))","user":"564d02cde4b0284900eef679"},{"problem":34,"code":"(fn [f l] (for [x (iterate inc f) :while (< x l)] x))","user":"57995ac1e4b05b1deef9adbf"},{"problem":34,"code":"(fn [i j]\n  \n  (loop [lst '()\n         i i]\n    \n    \t(if (> j i) \n          (recur (concat lst (list i)) (inc i))\n          lst)\n    \n    )\n  \n  )","user":"54c779bee4b045293a27f63b"},{"problem":34,"code":"(fn f [l h] (if (< l h) (cons l (f (inc l) h)) nil))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn my-range [f t]\n  (loop [from f retval [from]]\n    (if ( < (last retval) (dec t)) \n      (recur (inc from) (conj retval (inc from)))\n      retval)))","problem":34,"user":"50e448bae4b0463d3207248d"},{"problem":34,"code":"(fn [start end] \n  (loop [s start\n         res []]\n    (if (< s end)\n      (recur (inc s) (conj res s))\n      res)))","user":"567abc97e4b05957ce8c619d"},{"problem":34,"code":"(fn [a b]\n  (loop [x a, y b, z []]\n    (if (= x y)\n      z\n      (recur (+ x 1) y (conj z x)))))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":34,"code":"(fn [x y]\n  (let [start (iterate inc x)\n        counter (Math/abs (- x y))]\n    (take counter start)))","user":"5e84b48ee4b09a7a73c8bbc8"},{"problem":34,"code":"#(loop [x %1 result []] (if (= x %2) result (recur (inc x) (conj result x))))","user":"575e71a2e4b0846ea39baf26"},{"code":"(fn r [a b]\n  (if (= a b)\n    []\n    (cons a (r (inc a) b))\n  )\n)","problem":34,"user":"4ebbffbd535dfed6da9c6d79"},{"code":"(fn x [a b c] (if (= b c) a (conj (x a (inc b) c) b))) '()","problem":34,"user":"51efa6a6e4b0249c592fbde8"},{"code":"(fn [start end] (loop [s start e end l '()] (if (= s e) l (recur s (dec e) (conj l (dec e))))))","problem":34,"user":"534eecaee4b084c2834f4abf"},{"problem":34,"code":"(fn [x y]\n  (take (- y x) (iterate inc x))\n  )","user":"59e0f839e4b08badc2a0c502"},{"problem":34,"code":"(fn [a b]\n  (loop [x []\n         n a]\n    (if (< n b)\n      (recur (conj x n) (inc n))\n      x)))","user":"5032748ae4b0e78df07b092f"},{"code":"(fn [s e]\r\n  (loop [c (- e 1) r '()]\r\n    (if (< c s) r\r\n      (recur (- c 1) (conj r c)))))","problem":34,"user":"4dee4a9c535d08e6dec9fe11"},{"problem":34,"code":"(fn rangi[a b]\n   (loop [i a res '()]\n    (if (< i b)\n    \t(recur (inc i) (cons i res))\n    (reverse res))))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":34,"code":"(fn rng [start end] (if (= start end) \n                      '() \n                      (cons \n                       \tstart \n                       (rng (inc start) end) \n                       )\n                      )\n  )","user":"5c59b1d3e4b01df32ab73261"},{"code":"(fn [start count]\r\n  (take (- count start) (iterate inc start)))","problem":34,"user":"4f60ed88e4b0defedf855fb2"},{"problem":34,"code":"(\n      fn [a b]\n      (let [r (atom [])]\n        (dotimes [n (- b a)]\n          (swap! r #(conj % (+ a n))))\n        @r))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [initial last] \n  (loop [x (dec last) xs '()]\n      (if (< x initial) xs (recur (dec x) (conj xs x)))))","problem":34,"user":"4f659386e4b07046d9f4ef44"},{"problem":34,"code":"(fn [bottom top] ((fn [bottom top c] (cond\n                    (= bottom top) c\n                    :else (recur bottom (- top 1) (conj c (- top 1))))) bottom top nil))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":34,"code":"(fn [start stop]\n  (loop [cur start\n         acc ()]\n    (if (= cur stop)\n      (reverse acc)\n      (recur (inc cur) (conj acc cur))))\n  )","user":"56958a16e4b0dcc4269f4129"},{"code":"(fn [x y] (loop [prom (- y 1) acc '()] (if (= prom (dec x)) acc (recur (dec prom) (conj acc prom)))))","problem":34,"user":"5106c803e4b01150e115ebee"},{"problem":34,"code":"#(loop [start %1\n        end %2\n        lst []]\n   (if (= start end)\n     lst\n     (recur (inc start) end (conj lst start))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":34,"code":"(fn [s e] (loop [lst () x s] (if (>= x e) (reverse lst) (recur (conj lst x) (inc x)))))","user":"543823f1e4b032a45b869311"},{"problem":34,"code":"(fn foo [min max]\n  (if (= (inc min) max)\n    (list min)\n    (concat [min] (foo (inc min) max))))","user":"571e5c9ee4b0145328a76290"},{"code":"(fn !\n  [s e]\n  (if (= s e) '()\n    (conj (! (inc s) e) s)))","problem":34,"user":"5164d97ee4b003cf19fdde43"},{"code":"(fn [start end]\n  (let [length (- end start)]\n    (take length (iterate inc start))))","problem":34,"user":"52d51535e4b09f7907dd133a"},{"problem":34,"code":"(fn rng [low high]\n  (loop [l low acc []]\n    (if (= l high)\n      acc\n      (recur (inc l) (conj acc l))\n      )\n    )\n  )","user":"56252effe4b00a550fc90294"},{"problem":34,"code":"(fn rang [x y]\n    (loop [new [] v x]\n      (if (= y (last new))\n        (drop-last new)\n        (recur (conj new v) (inc v))\n        )))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(fn my-range [l u]\n    (if (= l u) ()\n        (cons l (my-range (inc l) u))))","problem":34,"user":"51b76227e4b0d906fcd71d35"},{"problem":34,"code":"(fn my-range [l u] (cond (<= u l) '() :else (concat (list l) (my-range (+ l 1) u))))","user":"5716540fe4b07c98581c3af3"},{"problem":34,"code":"(fn _range [a z] ((fn [s n] (if (>= n a) (recur (conj s n) (dec n)) s)) '() (dec z)))","user":"55fb58b2e4b0f488688e0661"},{"code":"(fn [start end]\n  (loop [return (list start)]\n    (if (= end (last return))\n      (reverse (rest (reverse (flatten return))))\n      (recur (conj\n               (list (inc (last return)))\n               return)))))","problem":34,"user":"50d8de3fe4b01f0871336e72"},{"code":"(fn[start finish] (take (- finish start) (iterate inc start)))","problem":34,"user":"4fd0b0bde4b04c3a95aa0406"},{"problem":34,"code":"(fn new-range [a b](take (- b a) (iterate inc a)))","user":"58d1fe17e4b03c36ff7e58f5"},{"code":"(fn [x y]\n  (loop [acc '() ind x limit y]\n    (if (< ind limit)\n      (recur (conj acc ind) (inc ind) limit)\n      (reverse acc))))","problem":34,"user":"50b11fbce4b009df37c708cb"},{"problem":34,"code":"(fn [sval eva] \n  (loop [iter 0 cval sval result []]\n    (if (= cval eva)\n      result\n      (recur (inc iter)(inc cval)(conj result cval))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":34,"code":"(fn [x y] \n  (loop [index x \n         result []] \n    (if (> index (- y 1)) \n      result \n      (recur (inc index) \n             (conj result index)))))","user":"55b24240e4b0da326a65cf7b"},{"code":"(fn [start slutt] (\n     take (- slutt start) (iterate inc start)))","problem":34,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":34,"code":"(fn [lo hi] (take-while #(< % hi) (iterate inc lo)))","user":"585c5b21e4b0f14aab7c8786"},{"problem":34,"code":"(fn [a b]\n  (loop [result [] i a]\n    (if (= i b)\n      result\n      (recur (conj result i) (inc i))\n      )\n)\n)","user":"57d7c894e4b0bd073c2023de"},{"problem":34,"code":"(fn [start end]\n         (reverse (loop [current start result '()]\n            (if (= current end)\n              result\n              (recur (inc current) (cons current result))))))","user":"4dbd7107535d020aff1edf42"},{"problem":34,"code":"(fn [start end] (loop [result '()\n                       i (- end 1)]\n                  (if (< i start)\n                    result\n                    (recur (cons i result) (- i 1)))))","user":"540c288ae4b0addc1aec66ff"},{"problem":34,"code":"(fn [x y]\n   (loop [n x r[]]\n     (if (= n y)\n       r\n       (recur (inc n)\n              (conj r n)))))","user":"568242bfe4b0945ebc182a8f"},{"code":"(fn rng [min max](\n  if (= min max)\n    '()\n    (conj (rng (inc min) max) min)))","problem":34,"user":"4ed42c78535d10e5ff6f52c7"},{"code":"(fn [a b]\n  (loop [acc '(), start a, end (dec b)]\n    (if (> start end)\n      acc\n      (recur (cons end acc) start (dec end))\n    )))","problem":34,"user":"4f043bbd535dcb61093f6bb2"},{"problem":34,"code":"(fn nums\n  ([end] (nums 1 end))\n  ([start end]\n   (loop [accum []\n          i \tstart]\n     (if (= i end)\n       accum\n       (recur (conj accum i) (inc i))))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn r [lower, upper]\n  (if (= lower upper)\n    ()\n    (cons lower (r (+ 1 lower) upper))))","problem":34,"user":"4f294c48e4b0d6649770a023"},{"problem":34,"code":"#(loop [i % x []]\n   (if (= i %2) x \n     (recur (inc i) (conj x i))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":34,"code":"(fn [start stop] (take-while #(< % stop) (iterate #(inc %) start)))","user":"586bc870e4b01531a375e964"},{"code":"(fn [low high]\n  ((fn willsrange [x]\n     (if\n       (= x high) '()\n       (conj (willsrange (+ x 1)) x))) low))","problem":34,"user":"5221c0cae4b0e6a83c8925e1"},{"problem":34,"code":"(fn [b e] (loop [i (dec e) s '()] (if (>= i b) (recur (dec i) (cons i s)) s)))","user":"5c092334e4b0bdcf453d16ea"},{"problem":34,"code":"#(loop [mini %1 maxi %2 acc []] (if (= mini maxi)\n                                  acc\n                                  (recur (inc mini) maxi (conj acc mini))\n                                  ))","user":"589dd2cce4b02bd94d917e48"},{"problem":34,"code":"#(take-while\n    (partial >= (dec %2))\n    (iterate inc %1))","user":"55998d0ce4b031d6649c9bac"},{"problem":34,"code":"(fn [from to]\n  (loop [result []\n         n from]\n    (if (= n to)\n      result\n      (recur\n       (conj result n)\n       (inc n)))))","user":"56403765e4b08d4f616f5edc"},{"problem":34,"code":"#(loop [a %1\n            b %2\n            coll []]\n       (if (>= a b)\n         coll\n         (recur (inc a) b (conj coll a))))","user":"5386f784e4b06839e8705f17"},{"problem":34,"code":"(fn [lower upper]\n  (loop [next lower\n         so-far []]\n    (if (>= next upper)\n      so-far\n      (recur (inc next) (conj so-far next)))))","user":"53fb5256e4b0de5c4184857f"},{"problem":34,"code":"#(reduce (fn [a b]  (if (empty? a) (conj a b) (conj a (+ (last a) 1)) )) [%] (repeat (- %2 % 1) %))","user":"54187e84e4b01498b1a71a1b"},{"code":"#(loop [value %1 bound %2 result[]]\n     (if (= value bound)\n\t       result\n\t       (recur (inc value) bound (conj result value))))","problem":34,"user":"4f066916535dcb61093f6c10"},{"code":"(fn f [s d] (when-not (= s d) (cons s (f (inc s) d))))","problem":34,"user":"52f381f3e4b05e3f0be25f10"},{"problem":34,"code":"(fn [start end] (loop [n start xs []] (if (= n end) xs (recur (inc n) (conj  xs n)))))","user":"564a560ae4b0284900eef654"},{"problem":34,"code":"(fn [start end]\n  (loop [iter (inc start)\n         final [start]]\n    (if (= iter end)\n      final\n      (recur (inc iter) (conj final iter)))))","user":"5b2a559be4b063e2438bcc74"},{"problem":34,"code":"(fn [from to]\n  (take (- to from)\n              (iterate inc from)))","user":"552f6e8ee4b076ab5578f802"},{"code":"(fn r [from to] (if (= from to)\n                    '()\n                    (concat (list from) (r (+ from 1) to))))","problem":34,"user":"4f039f14535dcb61093f6b3e"},{"problem":34,"code":"(fn [init fin]\n  (loop [n (- fin 1) acc ()]\n    (if (< n init)\n      acc\n      (recur (- n 1) (conj acc n)))))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn r [s e]\n  (cond\n    (= s e) nil\n    (> s e) (cons s (r (- s 1) e))\n    :else (cons s (r (+ s 1) e))))","problem":34,"user":"5368a275e4b0243289761e8f"},{"code":"(fn rnge [x y] ( if (< x y) (conj (rnge (+ x 1)  y ) x ) '()  ))","problem":34,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn get-range [a b]\n  (if (= a b)\n    '()\n    (cons a (get-range (inc a) b))))","problem":34,"user":"52ec1dfbe4b0705949c4444b"},{"problem":34,"code":"(fn my-range[list-range a b] \n  (if (= a b)\n    list-range\n    (my-range (conj list-range a) (inc a) b)))\n\n(vector)","user":"55429859e4b0a04f7929951f"},{"problem":34,"code":"(fn [start stop]\n                     (loop [n start\n                            out []]\n                       (if (< n stop)\n                         (recur (inc n) (conj out n))\n                         out)))","user":"5eb22708e4b00a66d4a95204"},{"problem":34,"code":"(fn intlist [begin end] (if (= begin end) '() (cons begin (intlist (+ begin 1) end))))","user":"53504a7de4b084c2834f4ad9"},{"problem":34,"code":"(fn gen-range [l h]\n  (if (= l h)\n    '()\n    (cons l (gen-range (inc l) h))))","user":"542cb77ae4b0dad94371f2aa"},{"problem":34,"code":"#((fn [ans minval maxval]\n   (if (< minval maxval)\n     (recur (concat ans (list minval)) (+ 1 minval) maxval)\n     ans)) '() %1 %2)","user":"5a7cee73e4b03baeef9276f2"},{"code":"(fn rng [b e] (if (= b e) (list) (cons b (lazy-seq (rng (inc b) e)))))","problem":34,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":34,"code":"(fn [start end]\n  (loop [coll []\n         n start]\n    (if (= n end)\n      coll\n      (recur (conj coll n) (inc n)))))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":34,"code":"(fn [a b]\n  (loop [iteration a ret []]\n    (if (= iteration (dec b))\n      (conj ret iteration)\n        (recur (inc iteration) (conj ret iteration))\n   \n  )\n      )\n  )","user":"54975e99e4b0b312c081ff72"},{"code":"(fn r [a b]\n  (if (= a b)\n    '()\n    (conj (r (inc a) b) a)))","problem":34,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":34,"code":"(fn ran [x y]\n    (if (= x y)\n      '()\n      (cons x (ran (inc x) y)))\n  )","user":"567e6d24e4b0feffd0d18eb4"},{"problem":34,"code":"(fn [bottom top] (loop [acc [] iter bottom]\n                   (if (= iter top)\n                     acc\n                     (recur (conj acc iter) (inc iter)))))","user":"55ddb3f4e4b050e68259b3cd"},{"code":"(fn [s e]\n   (letfn [(myrange [acc curr tailpos]\n             (if (= curr tailpos) acc\n               (recur (cons  curr acc)  (+ 1 curr) tailpos))\n             )]\n     (reverse (myrange (list ) s e))))","problem":34,"user":"4df9c598535d04ed9115e77a"},{"problem":34,"code":"(fn f\n    ([beg cnt] (f beg cnt ()))\n    ([beg cnt res]\n     (if (= beg cnt)\n       (reverse res)\n       (recur (inc beg) cnt (conj res beg)))))","user":"584917a1e4b089d5ab817ec9"},{"problem":34,"code":"(fn [a b]\n  (loop [x a sum []]\n    (if (= x b)\n      sum\n      (recur (inc x) (conj sum x)))))","user":"58273e82e4b051871117bf1b"},{"code":"(fn range' [start end]\n  (if (>= start end)\n    ()\n    (cons start (range' (inc start) end))))","problem":34,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"(fn a [s e]\n (take (- e s) (iterate inc s))\n)","problem":34,"user":"502fb9bee4b0f8db655c4ee2"},{"problem":34,"code":"(fn r [s e]\n  (if (= s e)\n    '()\n    (conj (r (inc s) e) s)))","user":"598ab445e4b02b9968b84ce0"},{"problem":34,"code":"(fn f [x y]\n  (loop [val [] i x]\n     (if (< i y)\n       (recur (conj val i) (inc i))\n       val\n     )\n  )\n)","user":"5f631e11e4b02876ed9fd011"},{"problem":34,"code":"(fn rg [min max]\n  (if (= min max) '() (cons min (rg (inc min) max))))","user":"582a2d4fe4b051871117bf55"},{"problem":34,"code":"#(loop [i %1, acc []] \n   (if (= i %2)\n     acc\n     (recur (inc i)\n            (conj acc i))))","user":"5c9c79a6e4b048ec896c5ae8"},{"problem":34,"code":"(fn [a b]\n  (loop [counter a\n         acc []]\n    (if (= counter b)\n      acc\n      (recur (inc counter) (conj acc counter))\n    )\n  )     \n)","user":"5877e40ee4b01531a375eaab"},{"code":"#(loop [a [] n %1]\n  (if (= n %2) a\n      (recur\n        (conj a n) (inc n))))","problem":34,"user":"4da8dd6e30acd6ed12482a68"},{"problem":34,"code":"#(take  (- %2 %1) (iterate inc %1 ))","user":"54708efce4b00cfc9eacc1b9"},{"problem":34,"code":"(fn [begin end]\n  (loop [k begin\n         r []]\n    (if (< k end)\n      (recur (inc k) (conj r k ))\n      r)))","user":"5701f886e4b08d47c97781d9"},{"problem":34,"code":"#(loop [i %1 v []]\n   (if (< i %2)\n     (recur (inc i) (conj v i))\n     v))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":34,"code":"(fn r [i j]\n  (if (< i j)\n    (cons i (r (inc i) j))\n    ()))","user":"5643a11ee4b0018b46ad8bfb"},{"problem":34,"code":"(fn [a b]\n  (loop [acc '() c a]\n    (if (>= c b)\n      (reverse acc)\n      (recur (conj acc c) (inc c)))))","user":"579c7db7e4b05b1deef9ae0a"},{"code":"(fn f\n  ([min max] (f min max []))\n  ([min max a]\n    (if (< min max)\n      (recur (inc min) max (conj a min))\n      a)))","problem":34,"user":"4ed06ea6535d44c135fd68c4"},{"code":"(fn mkrange [a b]\n  (if (< a b) \n      (cons a (mkrange (inc a) b))\n      ()))","problem":34,"user":"4e83bb61535db62dc21a62dd"},{"code":"(fn [min max]\n  (loop [i min saida []]\n    (if (= i max)\n      saida\n      (recur (inc i) (conj saida i)))))","problem":34,"user":"4e94a8b5535dbda64a6f6b16"},{"code":"(fn [min max] \n  (loop [n min r []]\n    (if (>= n max)\n      r\n      (recur (inc n) (conj r n)))))","problem":34,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":34,"code":"(fn my-range [a b]\n  (if (>= a b) nil\n    (cons a (lazy-seq (my-range (inc a) b)))))","user":"543b12cce4b032a45b86932a"},{"code":"(fn my-range[start end]\n  (cond \n    (>= start end) nil\n    (<  start end)\n          (cons start (my-range (inc start) end))))","problem":34,"user":"4e53bf5e535d8a8b8723a275"},{"problem":34,"code":"(fn my-range\n  ([low high] (my-range low high low))\n  ([low high current]\n   (if (>= current high) (list)\n   \t(cons current (my-range low high (inc current)))\n   )\n  )\n  )","user":"56393681e4b0bfe05bf117f2"},{"code":"#(reductions + (cons %1 (repeat (dec (- %2 %1)) 1)))","problem":34,"user":"530caf86e4b02e82168697df"},{"problem":34,"code":"(fn [from to]\n  (loop [f from t to res []]\n    (if (>= f t)\n      res\n      (recur (inc f) t (conj res f))\n      )\n    ))","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [start end]\r\n    (loop [i (dec end) result '()]\r\n\t       (if (= i start)\r\n\t\t  (conj result i)\r\n\t\t  (recur (dec i) (conj result i)))))","problem":34,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn vrange2 [x y]\r\n  (loop [i 0 v (transient [])]\r\n    (if (< i (- y x))\r\n      (recur (inc i) (conj! v (+ i x)))\r\n      (persistent! v))))","problem":34,"user":"4fa58500e4b081705acca1ae"},{"problem":34,"code":"(fn [s e] ( take (- e s) (iterate inc s)))","user":"60845eb8e4b0736b099e42ef"},{"problem":34,"code":"(fn my-range [low high]\n    (if (>= low high) \n      () \n      (cons low (my-range (inc low) high))))","user":"5e4b8fe8e4b0889a8790a555"},{"code":"(fn [s e] (take (- e s) (iterate #(+ 1 %) s)))","problem":34,"user":"511ac2ede4b0c87c59c9670f"},{"problem":34,"code":"(fn [bgn end]\n    (take (- end bgn) (iterate #(+ % 1) bgn)))","user":"57e3f709e4b0bfb2137f5aaf"},{"code":"(fn [from to] (loop [cur (dec to) res '()] (if (< cur from) res (recur (dec cur) (conj res cur)) ) )  )","problem":34,"user":"52bf6946e4b07a9af5792334"},{"problem":34,"code":"(fn [a b]\n  (let [i (atom a)\n        r (atom [])]\n    (while (< @i b)\n      (do\n        (swap! r conj @i)\n        (swap! i inc)))\n    @r))","user":"59639142e4b066ee0a44b0ce"},{"problem":34,"code":"(fn [start end] \n  (loop [res [start], counter start] \n    (let [nxt (inc counter), with-next (conj res nxt)] \n      (if (= nxt end) \n        res \n        (recur with-next nxt)))))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn r [start finish]\r\n  (if (not= start finish)\r\n    (conj (r (inc start) finish) start)))","problem":34,"user":"4de623ef535d08e6dec9fdf4"},{"problem":34,"code":"(fn [a b]\n   (loop [acc [] i a]\n     (if (< i b)\n       (recur (conj acc i) (inc i))\n       acc)))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":34,"code":"(fn range-seq [a b]\n  (if\n    (= a b)\n    ()\n    (conj (range-seq (+ a 1) b) a)))","user":"5bd52eabe4b0ed4b8aab4b97"},{"code":"#(loop [ newlist [], i %1 ]\n    (if (= (count newlist) (- %2 %1 ))\n      (seq newlist)\n      (recur (conj newlist i) (inc i))))","problem":34,"user":"4ec5b713535d6d7199dd36b2"},{"code":"(fn [start end]\n   (reverse (loop [current start coll '()]\n              (if (< current end)\n                (recur (inc current) (conj coll current))\n                coll))))","problem":34,"user":"52090567e4b0e152394d76ed"},{"code":"(fn [s f]\r\n  (take-while #(< % f) (iterate inc s)))","problem":34,"user":"4fb37882e4b081705acca2a0"},{"problem":34,"code":"(fn [x y]\n  (take (- y x) \n     (iterate inc x)))","user":"4f8490fae4b033992c121c34"},{"code":"#(loop [c (dec %2) r ()]\n           (if (>= c %1)\n             (recur (dec c) (cons c r))\n             r))","problem":34,"user":"4f1bee08535d64f60314647e"},{"problem":34,"code":"(fn myfun [start end]\n  (if (< start end)\n    (cons start (myfun (inc start) end))\n    '()))","user":"589ac5a2e4b00487982d5318"},{"problem":34,"code":"(fn [start stop]\n    (let [f (fn my-range\n              ([] (my-range start))\n              ([n](concat [n] (lazy-seq (my-range (inc n))))))]\n      (take-while #(< % stop) (f))))","user":"5141a8f2e4b02fd87f5064c1"},{"code":"(fn [x y]\n  (loop [start x, stop y, lst '()]\n    (if (= start stop)\n        (reverse lst)\n         (recur (inc start) stop (cons start lst)))))","problem":34,"user":"5032e6c8e4b0e4096af89718"},{"code":"(fn raeng [s e] (when (< s e) (conj (raeng (inc s) e) s)))","problem":34,"user":"500f336be4b03ec779321687"},{"code":"#(take (- (+ %2) %) (iterate inc %))","problem":34,"user":"51a91ac2e4b08d8ec191b822"},{"code":"(fn [start end]\n  (loop [result '()\n         end (dec end)]\n    (if (> start end)\n      result\n      (recur (cons end result ) (dec end)))))","problem":34,"user":"51f297a3e4b0210f90e74552"},{"problem":34,"code":"(fn ran [x y] (if (>= x y) \n                nil\n                (concat (list x) (ran (inc x) y))))","user":"59663e77e4b069c0a1a1979f"},{"code":"(fn myf [x y] (loop [i (- y 1), li ()] (if (= i (- x 1)) li (recur (dec i) (conj li i)))))","problem":34,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn my-range [s e]\n  (loop [c s a []]\n    (if (>= c e)\n      a\n      (recur (inc c) (conj a c)))))","problem":34,"user":"4f03ebf7535dcb61093f6b7f"},{"problem":34,"code":"#(loop [start %1\n         end %2\n         coll '()]\n    (if (= start end)\n      (reverse coll)\n      (recur (inc start) end (conj coll start))))","user":"5d965c73e4b0d3f9b434ad33"},{"code":"(fn self [a b]\n  (if (= a b) '()\n  (conj (self (inc a) b) a)))","problem":34,"user":"50b35486e4b03ea88043356a"},{"code":"(fn [b e]\n  (\n    (fn [b e a]\n        (if (= b e)\n            (cons e a)\n            (recur b (dec e) (cons e a))\n        )\n    )\n    b (dec e) []))","problem":34,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn r [start end]\n  (loop [s start e end l []]\n    (if (= s e)\n      l\n      (recur s (dec e) (cons (dec e) l)))))","problem":34,"user":"4f7c4eb7e4b06e829148e1af"},{"code":"(fn my-range [start stop]\n  (if (>= start stop) '()\n    (cons start (my-range (inc start) stop))))","problem":34,"user":"5119f3d5e4b06c8af0111818"},{"problem":34,"code":"(fn [min max]\n  (loop [x min\n         max max\n         coll []]\n    (if (>= x max)\n      coll\n      (recur (inc x) max (conj coll x)))))","user":"54b31445e4b09f271ff37d35"},{"problem":34,"code":"(fn f [a b] (when (not= a b) (cons a (f (inc a) b))))","user":"573d58c8e4b05c31a32c0811"},{"problem":34,"code":"#(loop [acc []\n        cur %]\n   (if (= cur %2)\n     acc\n     (recur (conj acc cur)\n            (inc cur))))","user":"56b6a50ae4b0982f16b37e3c"},{"code":"(fn f[x y] (if (= x y) '() (conj (f (+ x 1) y) x) ))","problem":34,"user":"5349ac2be4b084c2834f4a67"},{"problem":34,"code":"(fn -range\n  [start end]\n  (if (>= start end) nil\n   (cons start (-range (inc start) end))))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":34,"code":"(fn my_range [a b]\n  (if (= a b) [] (conj (my_range a (dec b)) (dec b))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn my-range[x y] \n\t(loop [curr x rng []]\n\t\t(if(>= curr y) rng\n\t\t(recur (inc curr) (conj rng curr)) )\n\t)\n)","problem":34,"user":"50b25f2ce4b03ea88043355f"},{"problem":34,"code":"#(reduce (fn [r e] (conj r (inc (last r)))) [%1] (repeat (- (- %2 %1) 1) true))","user":"57bc50c7e4b05aa3c4741c40"},{"problem":34,"code":"(fn construct-range [start end] \n  (if (>= start end)\n    (seq [])\n    (if (>= start (- end 1))\n      (seq [start])\n      (conj (construct-range (+ 1 start) end) start)\n    )\n  )\n)","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":34,"code":"(fn [from until]\n  (take (- until from)\n    (iterate inc from)))","user":"598debf0e4b02b9968b84d2e"},{"code":"(fn z[ a b]\n           (if (< a b)\n               (cons a( z (inc a) b))))","problem":34,"user":"4e463703535dc968683fc4b2"},{"problem":34,"code":"(fn [start-num end-num]\n  (loop [curr-num start-num accum []]\n    (if (= curr-num end-num)\n      accum\n      (recur (inc curr-num) (conj accum curr-num))\n    )\n  )\n )","user":"52229374e4b0e6a83c892600"},{"code":"#(loop [x % y %2 z []] (if (= x y) z (recur (+ x 1) y (conj z x))))","problem":34,"user":"52e48632e4b09f7907dd1450"},{"problem":34,"code":"(fn [start stop]\n    (loop [res (vector)\n           next start]\n      (if (<= stop next)\n        res\n        (recur (conj res next) (inc next)))))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn [start end]\n  (loop [curr start, result []]\n    (if\n      (= curr end)\n      result\n      (recur\n        (inc curr)\n        (conj result curr)))))","problem":34,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":34,"code":"(fn urut-min1 [x y]\n  (if (= x y)\n    []\n    (concat [x] (urut-min1 (+ x 1) y))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":34,"code":"(fn  my_range [x y] (loop [lb x ub y res '()] \n                          (if (= lb ub) res (recur lb (dec ub) (conj res (dec ub))))))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"#(take (- %2 %1) \n       ((fn ! [x] \n          (lazy-seq (cons x (! (inc x))))) %1))","problem":34,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":34,"code":"( fn [start end]\n   (let [end (- end 1)]\n     (loop [i end c '()]\n       (if (= start i)\n         (conj c i)\n         (recur (dec i) (conj c i))))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":34,"code":"(fn [lower upper]\n    (loop [cnt (- upper lower)\n           rvec [lower]]\n      (if (= 1 cnt)\n        rvec\n        (recur (dec cnt) (conj rvec  (inc (last rvec)))))))","user":"592ac17ae4b072a2710fcf26"},{"problem":34,"code":"(fn s [lower upper]\n    (loop [result (), current lower]\n      (if (>= current upper)\n        (reverse result)\n        (recur (conj result current) (inc current)))))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":34,"code":";; iterate is a lazy iterator that returns a sequence\n#(take (- %2 %1) (iterate inc %1))","user":"5d0eda66e4b0cc9c9158825f"},{"problem":34,"code":"(fn [start end]\n(take (- end start) (iterate inc start)))","user":"5f3a8493e4b004f08c61c527"},{"problem":34,"code":"(fn [b e] \n  (take (- e b) (iterate #(+ 1 %) b)))","user":"566888e4e4b04acd4f672ded"},{"problem":34,"code":"#(loop [s %1\n        f %2\n        r []]\n   (if (= s f) r\n     (recur (inc s) f (conj r s))))","user":"5595ffabe4b0c79f6e1db972"},{"problem":34,"code":"(fn [b e] (take (- e b) (iterate #(inc %) b)))","user":"5e3071abe4b05b4b01516213"},{"problem":34,"code":"(\n    fn [a, b]\n    (\n      loop [a a, b b, result []]\n      (\n        if (= a b) result\n        (recur (inc a) b (conj result a))\n        )\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":34,"code":"(fn com [s e]\n  (let [be (- e 1)]\n    (if (> s be)\n      []\n      (conj (com s be) be)\n    )\n  )\n)","user":"593f88dce4b069cdc2982be2"},{"problem":34,"code":"#(->> \n  [%1 ()]\n  (iterate (fn [[x res]] [(inc x) (cons x res)]))\n  (drop (- %2 %1))\n  first\n  second\n  reverse\n)","user":"5bbbce0ee4b0a20761a2360d"},{"code":"(fn r [s e] (lazy-seq (when (< s e) (cons s (r (inc s) e)))))","problem":34,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn [x y]\r\n  (loop [from x\r\n         to y\r\n         ranseq ()]\r\n    (if (= from to)\r\n      (reverse ranseq)\r\n      (recur (inc from) to (cons from ranseq)))))","problem":34,"user":"4e570b60535d8a8b8723a286"},{"problem":34,"code":"(fn [start stop]\n     (loop [a start  z stop  accum '() ]\n           (if (>= a stop)\n             (reverse accum)\n             (recur (inc a) stop (conj accum a)))\n           ))","user":"56020b3fe4b04bb52996e19b"},{"problem":34,"code":"(fn ff [f t] \n  (if (>= f t) ()\n              (cons f (ff (inc f) t))))","user":"55815973e4b05c286339e0f6"},{"problem":34,"code":"#(take \n     (- %2 %1)\n     (iterate inc %1))","user":"53a83c74e4b047364c044426"},{"problem":34,"code":"#(loop [ens [] cnt 0]\n   (if (= (count ens) (- %2 %1))\n     (into () (into () ens))\n     (recur (conj ens (+ %1 cnt)) (inc cnt))\n   )\n)","user":"55acb648e4b03311e7b73296"},{"problem":34,"code":"(fn [x y]\n  (loop [i x\n         result '()]\n    (if (= i y)\n      (reverse result)\n      (recur (inc i) (conj result i))\n      )\n    )\n  )","user":"547adcb0e4b0c51c1f4d72cf"},{"problem":34,"code":"(fn [x y] (loop [i (- y 1) l '()] (if (< i x) l (recur (- i 1) (conj l i)))))","user":"56662275e4b0e91d5f5c566a"},{"code":"#(loop [counter %1, result []]\n       (if (= counter %2)\n         result\n         (recur (inc counter) \n                (conj result counter \n                      ))\n         ))","problem":34,"user":"53a26cede4b0f1fc7453882a"},{"problem":34,"code":"(fn [s e]\n  (loop [r () s s]\n    (if (= s e)\n      (reverse r)\n      (recur (conj r s) (inc s)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [a b] (nth (iterate #(conj % (inc (last %))) [a]) (- b a 1)))","problem":34,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":34,"code":"#(loop [i %1\n        acc (vector)]\n   (if (= i %2)\n     acc\n     (recur (inc i) (conj acc i))))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"(fn [b e] \n  (take-while #(< % e) (iterate inc b)))","problem":34,"user":"4ef2da4f535dced4c769f224"},{"code":"(fn [lo up]\n  (take-while #(< % up) (iterate inc lo)))","problem":34,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":34,"code":"(fn [a b]\n  (loop [s [] a a]\n    (if (< a b) (recur (conj s a) (inc a)) s)))","user":"6023a3abe4b0d5df2af22212"},{"code":"(fn [start end] (loop [res [] current start] (if (= current end) res (recur (conj res current) (inc current)))))","problem":34,"user":"4e79ff2a535db169f9c796a9"},{"problem":34,"code":"(fn[lower upper]\n(take (- upper lower) (iterate inc lower)))","user":"5da05bcce4b000c986472bd0"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         end end\n         acc []]\n    (if (= start end)\n      acc\n      (recur (inc start) end (conj acc start)))))","user":"516c3472e4b06f078fab251c"},{"problem":34,"code":"(fn [start end]\n  (take (- end start)\n        ((fn nums\n           ([] (nums start))\n           ([n] (lazy-seq (cons n (nums (inc n)))))\n        ))\n  )\n)","user":"5ee7b49de4b029a2061bbea6"},{"problem":34,"code":"(fn [a b]\n  (loop [vs nil\n         i  a]\n    (if (>= i b)\n      (reverse vs)\n      (recur (conj vs i) (inc i)))))","user":"559a9a3de4b066d22e731f45"},{"problem":34,"code":"(fn rng\n  ([start from](rng start from []))\n  ([start from curr] (if (= start from)\n                       curr\n                       (rng (+ 1 start) from (conj curr start))\n                      ))\n  )","user":"57ffe094e4b0a837a8b30c2c"},{"problem":34,"code":"(fn k-range [a b]\n  \t(let [d (- b a)]\n      \t(loop [n 1 r '()]\n          (if (> n d) r\n            (recur (inc n) (cons (- b n) r))))))","user":"5f6b61ece4b02876ed9fd051"},{"code":"(fn [start,stop]\n  (take (- stop start)\n    (iterate inc start)))","problem":34,"user":"4df1e213535d08e6dec9fe20"},{"problem":34,"code":"(fn [a b]\n  (take (- b a)\n              (iterate inc a)))","user":"554f7ef2e4b00713264bd9a1"},{"code":"(fn [x y]\n  (let [f (fn [x y xs]\n         (if (< x y)\n           (recur (+ x 1) y (conj xs x))\n           xs))]\n    (f x y [])))","problem":34,"user":"501c76eae4b01d3bc87c0201"},{"problem":34,"code":"(fn foo [m n]\n  (if (>= m n)\n    ()\n    (conj (foo (+ m 1) n) m)))","user":"600ae927e4b074f607df6689"},{"problem":34,"code":"(fn\n  [a b]\n  (loop [xs '()\n         i (dec b)]\n    (if (> a i)\n      xs\n      (recur (conj xs i)\n             (dec i)))))","user":"531bf76fe4b08068f379ed96"},{"problem":34,"code":"(fn [x y] (loop [result [], start x, end y] (if (= start end) result (recur (cons (- end 1) result) start (- end 1)))))","user":"55357ab5e4b09218d5f44faf"},{"code":"(fn rng [start end]\n  (if (= start end)\n    nil\n    (conj (rng (inc start) end) start)\n   )\n )","problem":34,"user":"52382d91e4b0fae3832e99f0"},{"code":"(fn [x y]\n   (loop [i x acc []]\n   (if (= i y)\n     acc\n     (recur (inc i) (conj acc i))\n   )))","problem":34,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn p [x y]\n  (if (= x y)\n      nil\n      (cons x (p (inc x) y))))","problem":34,"user":"4f7fc9a1e4b033992c121bee"},{"code":"(fn [x end] \r\n  (loop [coll '() val x] \r\n    (if (= val end) \r\n       (reverse coll) \r\n    (recur (conj coll val) (inc val)))))\r\n\r\n;(fn [x y]   \r\n;  (loop [coll '() val x end y] \r\n;    (if (= val end) \r\n;       (reverse coll) \r\n;    (recur (conj coll val) (inc val) y))))","problem":34,"user":"4de27757535d08e6dec9fdea"},{"problem":34,"code":"(fn rrange\n  [res start end]\n  (if (< start end)\n    (rrange (conj res start) (inc start) end)\n    res)) []","user":"5dc318cde4b02f700ae81835"},{"code":"(fn rg[a b]\n  (if (>= a b)\n    '()\n    (cons a (rg (+ a 1) b))))","problem":34,"user":"504e24e2e4b0f6ff3350c46d"},{"code":"(fn my-range\n           ([start end] (my-range start end [start]))\n           ([start end coll]\n            (if (< (inc (first coll)) end)\n                (my-range start end (cons (inc (first coll)) coll))\n              (reverse coll))))","problem":34,"user":"503be880e4b0fc0f99c2e54a"},{"code":"(fn [a b] (let [e (- b a)]\n            (take e (iterate inc a))))","problem":34,"user":"51f98843e4b09be9c177e54e"},{"code":"(fn [smallest largest]\n  (loop [current (dec largest) range-ints ()]\n    (if (<= smallest current)\n      (recur (dec current) (conj range-ints current))\n      range-ints\n      )\n    )\n  )","problem":34,"user":"52be23dbe4b07a9af5792316"},{"code":"(fn [x y]\n\t(loop [start x result (list x)]\n\t\t(if (= start (dec y))\n\t\t\t(reverse result)\n\t\t\t(recur (inc start) (cons (inc start) result))\n\t\t)\n\t)\n)","problem":34,"user":"53153466e4b08068f379ed23"},{"problem":34,"code":"(fn my-range \n\t\t([a b] (my-range a b (list)))\n\t\t([a b curr-list]\n\t\t\t(if (= a b)\n\t\t\t\tcurr-list\n\t\t\t\t(my-range (inc a) b (concat curr-list [a]))\n\t\t\t)\n\t\t)\n\t\t)","user":"53d382d8e4b00fb29b22132a"},{"code":"(fn [start end]\n  (loop [s start e end acc '()]\n    (if (= s e)\n      (reverse acc)\n      (recur (inc s) e (conj acc s)))))","problem":34,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn my-range [n m]\n    (when (< n m)\n      (cons n (lazy-seq (my-range (inc n) m)))))","problem":34,"user":"527ba29de4b03e8d9a4a7594"},{"code":"(fn [mn mx]\n\t(loop [x mn\n           r '()]\n      (if (= x mx)\n        (reverse r)\n        (recur (inc x) (conj r x)))))","problem":34,"user":"51eff50fe4b0249c592fbdf0"},{"code":"#(loop [current %1\n        end %2\n        myrange '()]\n   (if (= current end)\n     myrange\n     (recur (inc current) end (concat myrange (list current)))))","problem":34,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         result '()]\n    (if (= end x)\n      (reverse result)\n      (recur (inc x) (cons x result)))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":34,"code":"#(loop [counter %1\n         result []]\n    (if (= counter %2)\n      (apply list result)\n      (recur (inc counter) (conj result counter))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":34,"code":"(fn my-range [a b]\n  (if (= a b)\n    ()\n    (lazy-seq\n     (cons a (my-range (inc a) b)))))","user":"5446c89ce4b032a45b8693b5"},{"code":"(fn [start end]\n  (loop [curr start acc '[]]\n    (if (= curr end)\n      acc\n      (recur (inc curr) (conj acc curr)))))","problem":34,"user":"5226f8e9e4b04e78ff2e199a"},{"problem":34,"code":"(fn [s e]\n  (loop [list []\n         i s]\n    (if (< i e)\n      (recur (conj list i) (inc i))\n      list)))","user":"55ff562fe4b00f4cabc57660"},{"problem":34,"code":"(fn f32\n\t[a b]\n\t(take (- b a) (iterate inc a)))","user":"52c08c59e4b07a9af5792351"},{"code":"(fn [x y] (reverse (loop [x x l ()]\n   (if (= x y) l\n       (recur (inc x) (conj l x))))))","problem":34,"user":"4f04165d535dcb61093f6b9c"},{"code":"(fn rg [ini end]\n   (if (= ini end)\n     []\n     (cons ini (rg (+ 1 ini) end))))","problem":34,"user":"5131c922e4b06942423563c9"},{"code":"(fn [lo hi]\n  (loop [lo lo\n         seq []]\n    (if (< lo hi)\n      (recur (inc lo)\n             (conj seq lo))\n      seq)))","problem":34,"user":"516ff477e4b034fe8eaf70f3"},{"code":"(fn my-range [start end]\n  (if (>= start end)\n      []\n      (cons start (lazy-seq (my-range (inc start) end)))))","problem":34,"user":"50310b8be4b05b7df5a0b84d"},{"code":"#(loop [start %1 end %2 xs []]\n   (if (= start end)\n     (reverse xs)\n     (recur (inc start) end (cons start xs))\n     )\n   )","problem":34,"user":"4f99ae4ae4b0dcca54ed6d00"},{"code":"(fn [s e]\n  (loop [n s r ()]\n    (if (= n e)\n      (reverse r)\n      (recur (inc n) (cons n r)))))","problem":34,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [start end] \n  (take (- end start) (iterate #(inc %) start)))","problem":34,"user":"52616198e4b03e8d9a4a705e"},{"code":"(fn range!\n  [x y]\n    (if (< x y)\n(cons x\n  (range! (+ x 1) y))\n'()))","problem":34,"user":"50adcfe6e4b0a40c9cfb08cb"},{"problem":34,"code":"(fn [x y]\n  (loop [min x new []]\n    (if (not (= min y))\n      (recur (+ 1 min) (conj new min))\n      new)))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"code":"(fn [start stop] (loop [result [] n start] (if (>= n stop) result (recur (conj result n) (inc n)))))","problem":34,"user":"4f77b68de4b0fbe0118ec581"},{"problem":34,"code":"(fn r [i l]\n   (if (< i l)\n     (lazy-seq\n       (cons i (r (inc i) l))\n       )\n     )\n   )","user":"5ed8a12fe4b0c7845d86b0d7"},{"problem":34,"code":"(fn sex [f b] \n  \n  (if (= f (- b 1))\n    [f]\n    (  into [f] (sex (inc f) b ) )))","user":"5ec3f557e4b08d0ec38692c0"},{"code":"(fn[start stop]\n    (loop [results [start]]\n      (if (= (last results) (- stop 1))\n        results\n        (recur (conj results (+ (last results) 1))))))","problem":34,"user":"4ee52c44535d1385b2869d88"},{"problem":34,"code":"(fn [min max]\n  (loop [cnt min coll []]\n    (if (= cnt max)\n      coll\n      (recur (inc cnt) (conj coll cnt)))))","user":"57f55632e4b0903ccab3dcf1"},{"problem":34,"code":"(fn rng [start stop]\n  (let [c (- stop start)]\n    (take c (iterate inc start))\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"code":"(fn my-range [lst a b] (cond (= a b) (reverse lst) :else (my-range (conj lst a) (inc a) b) )) '()","problem":34,"user":"4f339c04e4b0d6649770a09c"},{"problem":34,"code":"(fn [from to]\n  (loop [x from ran '()]\n    (if (= x to)\n      (reverse ran)\n      (recur (inc x) (conj ran x)))))","user":"5da306a3e4b000c986472be7"},{"problem":34,"code":"(fn [st ed]\n  (loop [st st result []]\n    (if (= st ed)\n      result\n      (recur (inc st) (conj result st)))))","user":"5f3ab5ece4b004f08c61c52a"},{"problem":34,"code":"(fn [x y] (loop [start x rng []] (if (= start y) rng (recur (inc start) (conj rng start)))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":34,"code":"(fn [from to]\n\t(let [nums (Math/abs (- to from))]\n\t\t(take nums (iterate inc from))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn [start end] \r\n  (loop [start start end end result ()] \r\n    (if (< start end)\r\n      (recur (+ start 1) end (conj result start))\r\n      (reverse result))))","problem":34,"user":"4de8fb73535d08e6dec9fdff"},{"problem":34,"code":"(fn f [s e] (if (= s e) '() (conj (f (+ s 1) e) s)))","user":"56e227a8e4b03a7c14b85a31"},{"code":"(fn [start end]\n  \"Write a function which creates a list of all integers in a given range.\"\n  (loop [i (dec end) coll '()]\n    (if (< i start)\n      coll\n      (recur (dec i) (list* i coll)))))","problem":34,"user":"50481532e4b0ec70b3ef8d96"},{"problem":34,"code":"#(->> (iterate inc %1) \n       (take (- %2 %1)))","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":34,"code":"(fn [s e]\n  (loop [s s e e acc '()] \n    (if (<= e s) \n      (reverse acc) \n      (recur (inc s) e (conj acc s)))))","user":"55bb6a19e4b01b9910ae29e5"},{"problem":34,"code":"#(for [x (iterate inc %1)\n       :let [y x]\n       :while (< x %2)]\n   y)","user":"55ba70f9e4b01b9910ae29d4"},{"problem":34,"code":"(fn rng [from to] (if (>= from to) '() (cons from (rng (+ from 1) to))))","user":"546d41bde4b00cfc9eacc18c"},{"code":"(fn rng[start end] \n  (if (= start (dec end))\n  (conj nil start)\n  (conj (rng (inc start) end) start))\n)","problem":34,"user":"4ee8092f535d93acb0a66875"},{"code":"(fn [x y]\n  (take (- y x) (iterate (fn [n] (inc n)) x)))","problem":34,"user":"4e6e97ca535d5021c1a8960c"},{"code":"(fn [start stop] (take (- stop start) (iterate (partial + 1) start)))","problem":34,"user":"4e6ec58c535d5021c1a89611"},{"problem":34,"code":"(fn [x y] (loop [start (- y 1) rs '()]\n            (if (< start x)\n              rs\n              (recur (dec start) (conj rs start))))\n  )","user":"53e150e5e4b0d874e779ae53"},{"problem":34,"code":"(fn [start end]\n    (loop [curr start\n           acc []]\n      (if (>= curr end)\n        acc\n        (recur (inc curr)\n               (conj acc curr)))))","user":"54508859e4b0e397800069a3"},{"problem":34,"code":"(fn [a b]\n  (loop [acc []\n         _a a]\n    (if (= _a b)\n      acc\n      (recur (conj acc _a) (inc _a))\n      )\n    ))","user":"5854580ce4b07779d46863f9"},{"problem":34,"code":"(fn my-fun [init end] (loop [val init vec-add []] (if (= val end) vec-add (recur (inc val) (conj vec-add val)))))","user":"571d9669e4b0145328a7627f"},{"problem":34,"code":"(fn [begin end]\n  (loop [x begin result []]\n    (if (= x end)\n      result\n      (recur (inc x) (conj result x))\n      )\n    )\n  )","user":"5ee66158e4b029a2061bbe98"},{"code":"(fn [m n] (loop [x m y n toGive []] (if (= x y) toGive (recur (inc x) y (conj \ntoGive x)))))","problem":34,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":34,"code":"(fn[n m]\n  (take (- m n) (iterate inc n)))","user":"5a99b844e4b0d174b936c7ab"},{"problem":34,"code":"(fn [lower upper]\n  ((fn [current-num accumulator]\n     (if (= current-num upper)\n       accumulator\n       (recur (inc current-num) (conj accumulator current-num)))\n     )\n\n     lower []))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn my-range [bottom top]\n  (loop [i bottom coll []]\n    (if (= i top)\n      (reverse coll)\n      (recur (inc i) (cons i coll)))\n  ))","problem":34,"user":"4ebc64db535dfed6da9c6d82"},{"problem":34,"code":"(fn myrange \n  [start end]\n  (loop [s start r []]\n    (if (>= s end)\n       r\n       (recur (inc s) (conj r s)))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"problem":34,"code":"#(loop [from %1 to %2 res []]\n    (if (= from (dec to))\n      (conj res from)\n      (recur (inc from) to (conj res from))))","user":"5b199fd4e4b03cfeda66ecbd"},{"problem":34,"code":"(fn f\n  [start stop]\n  (if (< start stop)\n    (cons start (f (inc start) stop))\n    )\n  )","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn myrange [start end]\n  (if (= start end)\n    ()\n    (cons start (myrange (+ 1 start) end))\n    )\n  )","problem":34,"user":"5349a39de4b084c2834f4a65"},{"problem":34,"code":"(fn rng [start stop]\n  (if (= start stop)\n    '()\n    (conj (rng (+ start 1) stop) start)))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":34,"code":"(fn [a b]\n  (reverse\n   (loop [result '() i a]\n     (if (>= i b)\n       result\n       (recur (cons i result) (+ i 1))))))","user":"571107b3e4b09c608db7043f"},{"code":"(fn my-range [start end]\n    (if (= start (dec end))\n        (list start)\n        (cons start (my-range (inc start) end))))","problem":34,"user":"53940789e4b0b51d73faaec3"},{"code":"(fn [a b] \n  (loop [x1 a x2 b s ()] \n    (if (> x2 x1) (recur x1 (dec x2) (conj s (dec x2))) s)))","problem":34,"user":"4f31ad57e4b0d6649770a089"},{"problem":34,"code":"(fn [from to]\n  (loop [i from\n         acc []]\n    (if (>= i to)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"(fn ran [a b] (if (= a b) '() (conj (ran (+ a 1) b) a)))","problem":34,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn myrange \n        ([from to] \n           (if (> from to)\n             (list);empty list\n             (myrange [from] (inc from) to)))\n        ([acc from to]\n           (if (>= from to)\n             acc\n             (myrange (conj acc from) (inc from) to))))","problem":34,"user":"52c58561e4b0c2d177d620f8"},{"code":"#(loop [a %1 b %2 ys []]\n   (if (= a b) ys (recur (inc a) b (conj ys a)))\n )","problem":34,"user":"516ea313e4b06aac486e5b2c"},{"problem":34,"code":"(fn[start end] (let [inner-f (fn inner-f [counter acc]\n                               (if (> start counter) \n                               acc\n                               (recur (dec counter) (cons counter acc))\n                               ))\n                     ]\n                  (inner-f (dec end) ())\n                 ))","user":"53e1040be4b0d874e779ae4e"},{"code":"(fn r [a b]\n  (if (= a b) '() (conj (r (inc a) b) a)))","problem":34,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [a b]\n  (letfn [(irange [n m]\n                  (if (= n m) \n                    '()\n                    (conj (irange (inc n) m) n)))]\n    (irange a b)))","problem":34,"user":"5374adc3e4b06d7f452d9e27"},{"problem":34,"code":"(fn [start end]\n  (loop [res [] cur start]\n    (if (>= cur end)\n      res\n      (recur (conj res cur) (inc cur) )\n    )\n   )\n  )","user":"53f152bce4b0742d9025b0dc"},{"problem":34,"code":"(fn [lo hi] (loop [curr lo res '()] (if (= curr hi) res (recur (inc curr) (concat res [curr])))))","user":"5751fda4e4b02ea114799295"},{"problem":34,"code":"(fn [from to]\n  (loop [f from\n         acc []]\n    (if (= f to) acc (recur (+ f 1) (conj acc f)))\n))","user":"5b4ff637e4b02d533a91bce0"},{"problem":34,"code":"(fn my-range [a b]\n  (if (>= a b)\n    ()\n    (cons a (my-range (inc a) b))))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn [start end]\n  (loop [i (inc start) x [start]]\n    (if (>= i end) x\n      (recur (inc i) (conj x i)))))","problem":34,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":34,"code":"(fn [start end]\n   (loop [result (list start)]\n     (let [last_result (last result)\n           adding      (inc last_result)]\n       (if (= end adding)\n         result\n         (recur (concat result (list adding)))))))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":34,"code":"(fn\n  [a b]\n  (loop [result () x a]\n    (if(> x b)\n      (reverse (rest result))\n      (if(<= a x b)\n        (recur (cons x result) (inc x))))))","user":"59dd3930e4b0a0ac046f2504"},{"problem":34,"code":"(fn [x z] (loop [x x z z i x result []] (if (= i z) result (recur x z (+ i 1) (conj result i)))))","user":"5448616be4b032a45b8693c9"},{"problem":34,"code":"(fn r [mn mx]\n  (if (>= mn mx)\n    '()\n    (cons mn (r (inc mn) mx))))","user":"4f2861eee4b0d6649770a017"},{"code":"(fn rng [theMin theMax]\r\n  ((fn helper [theVal hMax hSeq]\r\n    (if (= theVal hMax)\r\n      hSeq\r\n      (recur (inc theVal) hMax (conj hSeq theVal))))\r\n  theMin theMax [])\r\n)","problem":34,"user":"4fa313bbe4b081705acca188"},{"code":"(fn [a b] (take-while #(> b %) (iterate inc a)))","problem":34,"user":"4df7278a535d04ed9115e774"},{"problem":34,"code":"(fn implement-range [start end]\n  (loop [_start start arr [start]]\n    (let [_next (inc _start)]\n      (if (< _next end)\n        (recur _next (conj arr _next))\n          arr))))","user":"605714ffe4b069ae89ce6ae1"},{"code":"(fn [s e]\n  (take-while #(< % e) (iterate inc s)))","problem":34,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":34,"code":"(fn my-range [s e]\n                (if (= s e)\n                  nil\n                  (cons s (lazy-seq (my-range (inc s) e)))))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":34,"code":"#(loop [i (- %2 %1) n %1 acc []]\n   (if (> i 0)\n     (recur (dec i) (inc n) (conj acc n))\n     acc ))","user":"558b50d5e4b027778923762b"},{"code":"(fn f [l u]\n  (if (= l u)\n    ()\n    (cons l (f (+ 1 l) u))))","problem":34,"user":"50ad7888e4b0a40c9cfb08c7"},{"code":"#(take (- %2 %1) (iterate (partial + 1) %1))","problem":34,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":34,"code":"(fn [b e] (loop [x b res []] (if (= x e) res (recur (inc x) (conj res x)))))","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn[one two](take(- two one) (iterate inc one)))","problem":34,"user":"52840004e4b0239c8a67adc1"},{"code":"#(take (- %2 %1)\n       (iterate inc %1))\n#_(fn [a b]\n  (loop [x (dec b)\n         acc '()]\n    (if (< x a)\n      acc\n      (recur (dec x)\n             (cons x acc)))))","problem":34,"user":"51e5a627e4b0efabf93c02db"},{"problem":34,"code":"#(loop [x % y %2 l []] (if (= x y) l (recur (inc x) y (conj l x))))","user":"5c308385e4b0d62ef62d9f1c"},{"code":"#(loop [rg '()\n        lower %1]\n   (if (< lower %2)\n     (recur (cons lower rg)\n            (inc lower))\n     (reverse rg)))","problem":34,"user":"52e161e8e4b09f7907dd1420"},{"problem":34,"code":"(fn range-mine [x y]\n    (if (= x y)\n      '()\n      (concat (list x) (range-mine (+ 1 x) y))))","user":"551760a5e4b06a49daca83c3"},{"problem":34,"code":"(fn [l r]\n  (take-while (complement nil?)\n              (iterate\n                #(if (nil? %) nil\n                              (if (< % (dec r)) (inc %) nil))\n                l)))","user":"56b1ab17e4b0982f16b37df1"},{"code":"(fn [x y]\n  (take-while #(< % y)\n    (iterate inc x)))","problem":34,"user":"4e5a5ecb535d8a8b8723a2ac"},{"problem":34,"code":"(fn [start end] \n  (loop [current (- end 1) result '()] \n      (cond \n        (= start current) (cons current result)\n        true (recur (dec current) (cons current result))\n    )\n  )\n)","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn [min max] \n  (take-while #(> max %)\n    (iterate inc min)))","problem":34,"user":"4ed152d5535d44c135fd68cc"},{"problem":34,"code":"(fn [start end]\n  (take-while #(< % end)\n              (iterate inc start)))","user":"545281bce4b0e397800069c3"},{"code":"(fn -range [lo hi]\n  ((fn [n acc]\n    (if (< n lo)\n        acc\n        (recur (dec n)\n               (cons n acc))))\n   (dec hi) nil))","problem":34,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [a b] (loop [xs [] a a] (if (= a b) xs (recur (conj xs a) (inc a)))))","problem":34,"user":"4fac1d77e4b081705acca223"},{"problem":34,"code":"#((fn [x y z] (if (< x y) (recur (inc x) y (conj z x)) z)) %1 %2 [])","user":"57011eb3e4b08d47c97781d1"},{"problem":34,"code":"(fn [start end]\n  (loop [cur start ret []]\n    (if (= cur end)\n      ret\n      (recur (inc cur) (conj ret cur)))))","user":"501fe6fae4b0cb6ebc0a42ef"},{"problem":34,"code":"(fn [f b & r]\n  (if (= f b)\n    r\n    (recur (inc f) b (conj (vec r) f))))","user":"5572fdd7e4b0aa18f790f3f1"},{"problem":34,"code":"(fn my-range\n  (\n    [start end]\n    (my-range start end [])\n    )\n  (\n    [start end col]\n    (if (= start end)\n      col\n      (my-range (inc start) end (conj col start)))\n    )\n  )","user":"5c48757fe4b0e06e1360a3c3"},{"problem":34,"code":"(fn temp [x y] \n  (if (= x y)\n    '()\n    (cons x (temp (+ x 1) y))\n   )\n  )","user":"5372c830e4b06d7f452d9dff"},{"code":"(fn rnge [start end] (if (not= start end) (concat (list start) (rnge (inc start) end))))","problem":34,"user":"4ff50604e4b0678c553fc365"},{"problem":34,"code":"(fn [start end] (loop [n start result '[]] (if\n                                             (= n end) result\n                                             (recur (+ n 1) (conj result n)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [f l]\n  (seq\n    (loop [r [] x f]\n      (if (>= x l)\n        r\n        (recur (conj r x) (inc x))))))","problem":34,"user":"531488f3e4b08068f379ed16"},{"code":"#(take(- %2 %1)(iterate inc %1))","problem":34,"user":"5017eface4b02f523d7cc5e7"},{"problem":34,"code":"(fn [a b] \n  (loop [i a\n         arr []]\n\t(if (< i b) (recur (inc i) (conj arr i)) arr))  \n  )","user":"5744723ae4b009280f9f2b3a"},{"problem":34,"code":"(fn [a b]\n  (reduce\n   (fn [c d]\n     (conj c (-> c last inc)))\n   [a] (repeat (- b a 1) 0)))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"#(map (partial + (dec %)) (reductions + (repeat (- %2 %) 1)))","problem":34,"user":"5080d6e3e4b01a93d3f38e4b"},{"problem":34,"code":"(fn fun [fr to] \n  (if (= fr to) \n    nil \n    (cons fr \n          (fun (+ 1 fr) to)\n    )\n  )\n)","user":"518ba795e4b0f028e99addf0"},{"code":"(fn [st end]\n  (let [x  (- end st)]\n    (take x (iterate inc st))))","problem":34,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [low high]\n  (loop [xs (list (dec high)) cur (- high 2)]\n    (if (> low cur)\n      xs\n      (recur (conj xs cur) (dec cur))\n      )\n    )\n  )","problem":34,"user":"522f483ce4b032bbe342415a"},{"code":"(fn [x y] (seq (take (- y x)(iterate inc x))))","problem":34,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":34,"code":"(fn [x y] \n  (loop [n x \n         result []]\n    (if (= n y)\n      result\n      (recur (inc n) (conj result n)))))","user":"541c2ae0e4b01498b1a71a71"},{"code":"#(loop [start % acc []] (if (= start %2) acc (recur (inc start) (conj acc start))))","problem":34,"user":"5287f34ee4b0239c8a67ae43"},{"problem":34,"code":"(fn f ([s e] (if (= s e) '() (cons s (f (inc s) e)))))","user":"59da6480e4b0ef0a1e9b5c68"},{"problem":34,"code":"(fn myrange [x y]\n  (cond\n   (= x y) ()\n   :else\n   (conj (myrange (+ x 1) y) x)))","user":"602049b8e4b0bf4ca6b10961"},{"problem":34,"code":"(fn [uno finito]\n  (take (- finito uno)\n        (iterate inc uno)))","user":"57607706e4b08062f99a4e97"},{"code":"(fn [a b]\n       (take (- b a) (iterate inc a)))","problem":34,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn r [s e] \n  (if (< s e) \n    (cons s (r (inc s) e))))","problem":34,"user":"4edd038c535d10e5ff6f5327"},{"code":"(fn r [x y] (if (< x y) (cons x (r (inc x) y)) []))","problem":34,"user":"4eb298c1535d7eef3080734b"},{"code":"(fn rng [a b]\n                  (if (> b a)\n                    (cons a (rng (inc a) b))))","problem":34,"user":"4e71705e535d5021c1a89649"},{"code":"(fn foo [x y] (if (= x y) nil (cons x (foo (inc x) y))))","problem":34,"user":"4dea9fae535d08e6dec9fe02"},{"problem":34,"code":"(fn [x1 x2] \n  (take-while #(> x2 %) (iterate #(+ 1 %) x1)))","user":"54f904c2e4b01ecee9d88832"},{"problem":34,"code":"(fn [from to]\n  (loop [n (- to 1)\n         l '()]\n    (if (< n from)\n      l\n      (recur (- n 1) (conj l n)))))","user":"5609866ee4b0053d1b86c7e3"},{"problem":34,"code":"(fn rng [from to]\n  (loop [acc (list)\n         cur from]\n    (if (= cur to)\n      (reverse acc)\n      (recur (conj acc cur) (inc cur)))))","user":"542db41be4b0dad94371f2bb"},{"problem":34,"code":"(fn myfn\n  ([from to]\n  \t(myfn from to '())\n  ) \n  ([from to l]\n   \t(if (= to from)\n      l\n      (myfn from (dec to) (conj l (dec to)))\n    )\n  )\n)","user":"558843dae4b059ccff29b1f3"},{"problem":34,"code":"(fn [start end] (take-while #(< % end)(iterate inc start)))","user":"5ab3db13e4b073f177442609"},{"code":"(fn [st end]\n    (reverse\n     (loop [accumulator (list)\n            current st]\n       (cond (= current end) accumulator\n             :else (recur (cons current accumulator) (inc current))))))","problem":34,"user":"4f4a8707e4b0d56e7bb92c12"},{"problem":34,"code":"(fn [a b] (take (- b a) (iterate inc a)) )","user":"5fa2735de4b0f0ebd91b77ee"},{"code":"(fn r [a b] (if (< a b) (conj (r (inc a) b) a)))","problem":34,"user":"4df20dda535d08e6dec9fe23"},{"code":"(fn [a b]\n  (loop [r [] i a]\n    (if (= i b) r (recur (conj r i) (+ i 1)))))","problem":34,"user":"4ed2b168535d44c135fd68dd"},{"code":"(fn [x y] (take-while #(> y %) (iterate inc x)))","problem":34,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn a [x y] (if (>= x y) nil (conj (a (inc x) y) x)))","problem":34,"user":"4e85cda3535db62dc21a62f0"},{"problem":34,"code":"(fn [a b]\n  (loop [ret [a] a a b b]\n    (if (< (last ret) (dec b))\n      (recur (conj ret (inc (last ret))) a b)\n      ret)))","user":"54d000c7e4b018d918be98d7"},{"problem":34,"code":"#(loop [i (dec %2) s (list i)]\n   (if (> i %1)\n     (recur (dec i) (cons (dec i) s))\n     s))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":34,"code":"(fn [l u] \n  (loop [r [] e l]\n    (if (= e u)\n      (seq r)\n      (recur (conj r e) (inc e)) \n      )\n    )\n  )","user":"54a677a9e4b09f271ff37c88"},{"code":"(fn [mini maxi] (take (- maxi mini) (iterate #(inc %) mini)))","problem":34,"user":"4ef89fb0535dced4c769f260"},{"code":"; original cheating solution\n; (fn [s e] (filter #(and (>= % s) (< % e)) [-2 -1 0 1 2 3 4 5 6 7 8]))\n\n(fn [s e] (take-while #(< % e) (iterate inc s)))","problem":34,"user":"4f5155a3e4b03ad3f0c10d1b"},{"problem":34,"code":"(fn range' [from to]\n  (if (> (- to from) 0)\n    (conj (range' (inc from) to) from)\n    '()))","user":"579563ffe4b0e215f87e847e"},{"code":"(fn [n m]\n  (loop [i n out []]\n    (if (== i m)\n      out\n      (recur (inc i) (conj out i)))))","problem":34,"user":"4e955b95535dbda64a6f6b33"},{"code":"#(loop [ l '() cur %1]\n   (if (< cur %2)\n     (recur (concat l [cur]) (inc cur))\n     l))","problem":34,"user":"51c9fe91e4b09ce160bef5b6"},{"code":"(fn [x y]\n  (loop [res [] cnt x]\n    (if (< cnt y)\n      (recur (conj res cnt) (inc cnt))\n      res)))","problem":34,"user":"4eb7b049535d7eef30807377"},{"problem":34,"code":"(fn f [s e] (if (not= s e) (cons s (f (inc s) e))))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"(fn[a b](take-while #(< % b) (iterate inc a)))","problem":34,"user":"516ab8c2e4b081287f204e9e"},{"code":"(fn rn [x1 x2] \n   (if (< x1 x2) (concat (list x1) (rn (inc x1) x2)) [])\n   )","problem":34,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":34,"code":"(fn rng [a b]\n  (if (>= a b) \n    '()\n    (cons a (rng (inc a) b))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":34,"code":"(fn ra [start end]\n  (if (= start end) \n    '()\n  \t(cons start (ra (+ start 1) end))\n    ))","user":"56c9970ce4b0ed865f9758de"},{"problem":34,"code":"#(loop[i %1\n        rtn []]\n    (if(>= i %2) rtn\n      (recur(inc i)\n            (conj rtn i))))","user":"54a11042e4b09f271ff37c49"},{"problem":34,"code":"(fn rangef [a b]\n  (if (= a b)\n    '()\n    (conj\n     (rangef (inc a) b)\n     a)))","user":"57fd085ce4b0d3187e9009a9"},{"code":"#(loop [x % acc []]\n\t(if (= x %2)\n      acc\n      (recur (+ 1 x) (conj acc x))))","problem":34,"user":"4ed45563535d10e5ff6f52c9"},{"problem":34,"code":"(fn [start end]\n  (loop [i start, acc []]\n    (if (>= i end)\n      acc\n      (recur (inc i) (conj acc i)))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":34,"code":"(fn [s e]\n   (loop [v []\n          s s\n          e e]\n     (if (>= s e)\n       v\n       (recur (conj v s) (inc s) e ))))","user":"58455b05e4b089d5ab817e65"},{"problem":34,"code":"(fn r [f t]\n   (if (= f t)\n     '()\n     (cons f (r (+ f 1) t))))","user":"5742ec91e4b05c31a32c0883"},{"problem":34,"code":"(fn [start end]\n  (loop [result [] current start]\n    (if (>= current end)\n      result\n      (recur (conj result current) (inc current) )\n      )\n    )\n  )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":34,"code":"(fn rng [from until]\n    (loop [f from r '()]\n        (if (< f until)\n            (recur (inc f) (concat r [f]))\n            r\n        )\n    )\n)","user":"54996971e4b0b312c081ff8d"},{"problem":34,"code":"(fn [start end]\n    (loop [out [start]]\n      (if (= (peek out) end)\n        (butlast out)\n        ;; else\n        (recur (conj out (inc (peek out))))\n        )\n      )\n    )","user":"5683fcafe4b0945ebc182aa8"},{"problem":34,"code":"(fn r [a b] (if (< a b) (conj (r (inc a) b) a) '()))","user":"553c05b7e4b09218d5f45011"},{"problem":34,"code":"(fn\n  [min max]\n  (loop [counter (dec max) result '()]\n    (if (= counter min)\n      (conj result counter)\n      (recur (dec counter) (conj result counter))))\n  )","user":"603e8e3ae4b0d5df2af22316"},{"problem":34,"code":"(fn my-range [start end]\n  (take (- end start) (iterate #(+ 1 %) start)))","user":"5638b88de4b0bfe05bf117e9"},{"problem":34,"code":"(fn f [l r]\n    (lazy-seq\n      (if (-> l (>= r))\n        '()\n        (cons l (f (inc l) r)))))","user":"56bcc2b2e4b0f26550335965"},{"code":"(fn fn34 [a b]\n  (concat\n   (when (< a b)\n     (cons a (fn34 (inc a) b))\n     )))","problem":34,"user":"5042bb9ae4b034ff00315d16"},{"problem":34,"code":"(fn my-range\n  [min-val max-val]\n  (loop [x min-val result '()]\n    (if (>= x max-val)\n      (reverse result)\n      (recur (inc x) (conj result x)))))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn [fst lst]\n  (loop [f fst\n         acc []]\n    (if (not (= f lst))\n      (recur (inc f) (concat acc [f]))\n      acc)))","problem":34,"user":"4fad33e8e4b081705acca236"},{"problem":34,"code":"(fn sm-range [x y]\n (if (= x y)\n   '()\n   (concat (sm-range x (- y 1)) (list (- y 1)))\n  )\n  \n  \n)","user":"5575aae2e4b05c286339e065"},{"code":"(fn [start end]\n    (take (- end start) (iterate inc start)))","problem":34,"user":"53489329e4b084c2834f4a5b"},{"problem":34,"code":"(fn rep [f t] (if (= (- t 1) f) (list f) (concat (list f) (rep (inc f) t))))","user":"5686e652e4b0dcc4269f4059"},{"problem":34,"code":";(fn foo [a b]\n;  (if (>= a b) '()\n;    \t\t\t(cons a (foo (+ 1 a) b))))\n\n(fn [a b]\n  (loop [lo a res []]\n    (if (>= lo b) res\n      \t\t\t (recur (+ 1 lo) (conj res lo)))))","user":"59156f0be4b0163c97b36f3d"},{"problem":34,"code":"(fn [from to] (loop [i from s []] (if (= i to) s (recur (inc i) (conj s i)))))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn [start end]\n  (seq\n   (loop [i start vals []]\n     (if (= i end)\n       vals\n       (recur (inc i) (conj vals i))))))","problem":34,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn implRange[x y]( take(- y x)(iterate inc x)))","problem":34,"user":"534d639ae4b084c2834f4a9e"},{"code":"(fn [s e]\n  (loop [acc [] i s]\n    (if (< i e)\n          (recur (conj acc i) (inc i))\n        acc)))","problem":34,"user":"4f51b9f3e4b03ad3f0c10d2b"},{"problem":34,"code":"(fn [start end]\n  (loop [n start acc []]\n    (if (>= n end)\n      acc\n      (recur (inc n) (conj acc n)))))","user":"58ca613de4b021aa9917edb7"},{"code":"#(take-while (fn [n] (< n %2)) (iterate inc %))","problem":34,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn [i_start i_end]\r\n    (reduce\r\n        (fn [current next]\r\n            (let [value (if (zero? (count current)) (- i_start 1) (last current))]\r\n                (conj current (inc value))))\r\n        [],\r\n        (repeat (- i_end i_start) nil)))","problem":34,"user":"4dddf817535d08e6dec9fdd3"},{"problem":34,"code":"(fn rng [s e]\n  (if (>= s e)\n    nil\n    (conj (rng (inc s) e) s)))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":34,"code":";(defn range-2 [start stop]\n;  (butlast (take stop (iterate inc start)))\n;  )\n\n(fn [a b] (take (- b a) (iterate inc a)))","user":"5face7fce4b08cb800c85ae9"},{"code":"(fn [s e]\n  ((fn [l start end]\n      (if (>= start end)\n        l\n        (recur (conj l start) (inc start) end)\n      )\n  ) [] s e)\n)","problem":34,"user":"506ec408e4b09350ab4199f1"},{"problem":34,"code":"(fn my-range\n  ([st end] (my-range st end ()))\n  ([st end acc] \n    (if (= st end)\n      acc\n      (my-range st (dec end) (conj acc (dec end))))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [a b] (loop [s (dec b) l '()] (if (< s a) l (do (recur (dec s) (cons s l))))))","problem":34,"user":"52d7a930e4b09f7907dd1379"},{"code":"(fn f [s e] (when (< s e) (conj (f (inc s) e) s)))","problem":34,"user":"4f0664bd535dcb61093f6c0f"},{"problem":34,"code":"#(loop [x %1 c '()] (if (< x %2) (recur (inc x) (conj c x)) (reverse  c)) )","user":"551daeb9e4b030e6a24d00df"},{"problem":34,"code":"(fn [start stop]\n  (let [diff (- stop start)\n        num-of-items (if (neg? diff) (* -1 diff) diff)]\n    (map-indexed (fn [i x] (+ x i)) (take num-of-items (repeat start)))\n    )\n  )","user":"53d2afede4b00fb29b221321"},{"problem":34,"code":"(fn myseq [a,b]\n  (if (< a b)\n    (conj (myseq (inc a) b) a)\n    '()))","user":"56ca2f25e4b0ea9b8538f716"},{"code":"(fn [a b] \n  (take (- b a)\n        (iterate inc a)\n  )\n)","problem":34,"user":"4e749e84535d7a570dd295b9"},{"code":"#(loop [a %1 b %2 r []] (if (= a b) r (recur (inc a) b (conj r a))))","problem":34,"user":"50d179c7e4b05a71a896ef56"},{"problem":34,"code":"(fn [f t] \n  (loop [i f\n         acc []]\n   (if (< i t)\n     (recur (inc i)\n            (conj acc i))\n     acc)))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":34,"code":"(fn foo\n  [a b]\n  (if (= a b)\n    []\n    (concat (vector a) (foo (inc a) b))))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn rng [beg max]\n  (if (< beg max)\n    (lazy-seq\n     (cons beg (rng (+ 1 beg) max)))\n    nil))","problem":34,"user":"4fa3c137e4b081705acca193"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         current start]\n    (if (= current end)\n      result\n      (recur (conj result current) (inc current)))))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn [a b] ((fn self [x y r] (if (< x y) (self x (- y 1) (cons (- y 1) r)) r)) a b []))","problem":34,"user":"50a2e3fbe4b029e8bace3629"},{"code":"(fn f [s e]\n    (if (= s e)\n      nil\n      (cons s (lazy-seq (f (inc s) e)))))","problem":34,"user":"538fe131e4b0b51d73faae91"},{"code":"(fn f [x y]\n  (if (< x y)\n    (cons x (f (inc x) y))\n    ()))","problem":34,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":34,"code":"(fn rng [a b] (if (< a b) (conj (rng (inc a) b) a) ()))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn [low high] \r\n  (take (- high low) (iterate inc low)))","problem":34,"user":"4fabbb97e4b081705acca21d"},{"problem":34,"code":"#(loop [x %1\n       result []]\n  (if (< x %2)\n    (recur\n      (inc x)\n      (conj result x)) result))","user":"5600bed5e4b04bb52996e170"},{"code":"(fn [start finish] (take (- finish start) (iterate inc start)))","problem":34,"user":"51195e77e4b055cfb310d499"},{"problem":34,"code":"(fn rang\n  ([mini maxi] (rang mini maxi []))\n  ([mini maxi coll] (if (= mini maxi)\n                      coll\n                      (recur (inc mini) maxi (conj coll mini)))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"code":"(fn [start stop & lst]\n    (if (< start stop)\n      (recur (inc start) stop (cons start lst))\n      (reverse lst)))","problem":34,"user":"504e96f0e4b069badc5a33ba"},{"problem":34,"code":"(fn rng [l u] (if (>= l u) [] (cons l (rng (inc l) u))))","user":"5703eda3e4b08d47c9778200"},{"code":"(fn asdf [start end] \n           (if (< start end)\n             (cons start (asdf (inc start) end))\n             nil))","problem":34,"user":"50b09833e4b009df37c708bd"},{"problem":34,"code":"(fn [a b]\n  (letfn [(rg [k]\n            (cons k (lazy-seq (rg (inc k)))))]\n    (take (- b a) (rg a))))","user":"5576f299e4b05c286339e077"},{"problem":34,"code":"(fn rng [b e] (if (= b e) nil (conj (rng (inc b) e) b)))","user":"53dcf474e4b0d874e779ae25"},{"problem":34,"code":"(fn myrange [start end]\n  (loop [start start\n         end end\n         sq []]\n    (if (zero? (- end start))\n      sq\n      (recur (inc start) end (conj sq start)))))","user":"55f7c873e4b06e875b46ceb0"},{"problem":34,"code":"(fn [start end] (loop [n start\n                       acc []]\n                  (if (= n end) acc\n                       (recur (+ 1 n) (conj acc n))\n                      ) ))","user":"5f419985e4b0955706451fab"},{"code":"(fn [i s] (loop [c i res []] (if (< c s) (recur (inc c) (conj res c)) res)))","problem":34,"user":"5318594ee4b08068f379ed6d"},{"code":"(fn [a b]\r\n   (letfn [(posn\r\n\t\t([n] (cons n (lazy-seq (posn (inc n))))))]\r\n     (take (- b a) (posn a))\r\n\t)\r\n )","problem":34,"user":"510a6bece4b06956752d35af"},{"problem":34,"code":"#(reductions + %1 (repeat (Math/abs (- %1 (dec %2))) 1))","user":"5a4f11e5e4b05d388ecb6bc6"},{"problem":34,"code":"(fn f [p q] (take (- q p) (iterate inc p)))","user":"557bd432e4b05c286339e0bb"},{"problem":34,"code":"(fn [a b]\n   (loop [i a r []]\n     (if (= i b)\n       r\n       (recur (+ i 1) (conj r i))\n      )\n    )\n )","user":"5c272f82e4b07e362c2305cb"},{"code":"(fn [begin end]\n  ( take ( - end begin ) (iterate inc begin ) ) )","problem":34,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn [start end]\n  (loop [coll [] point start]\n    (if (= point end) coll (recur (conj coll point) (inc point)))))","problem":34,"user":"5038381ce4b0803468ea2c6b"},{"code":"(fn rn [start end]\n  (take-while (partial > end) (iterate inc start)))","problem":34,"user":"4f1f8fae535d64f6031464a3"},{"code":"(fn f [s e] (take (- e s) (iterate inc s)))","problem":34,"user":"4e50e2a0535dc968683fc4ef"},{"code":"#(map-indexed (fn [z,a] (+ z %)) (repeat (- %2 %) []))","problem":34,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":34,"code":"(fn r [start end] (if (< start end) (cons start (r (inc start) end)) '()))","user":"5eee7311e4b07c55ae4a0510"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [x start xs []]\n    (if (= x end)\n     xs\n     (recur (inc x) (conj xs x)))))","user":"54a31fdae4b09f271ff37c64"},{"code":"(fn [b e] (take (- e b) (iterate inc b) ))","problem":34,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":34,"code":"(fn [startpoint endpoint]\n\t(if (= startpoint endpoint) \n\t(seq [startpoint])\n\t(loop [new-start startpoint values []] (if (< new-start endpoint) (recur (inc new-start) (conj values new-start)) (seq values)))))","user":"5b43cbb0e4b02d533a91bc3a"},{"code":"(fn [start, until]\n  (loop [all [], curr start]\n    (if (= curr until)\n      all\n      (recur (conj all curr) (inc curr)))))","problem":34,"user":"4ecbff2f535df97575fdabe4"},{"code":"(fn [x y] (take (- y x) (iterate #(+ 1 %) x)))","problem":34,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn [begin end] \n  (take (- end begin) (iterate inc begin)))","problem":34,"user":"4f17df72535d64f603146458"},{"code":"(fn [start end]\n  (loop [acc [] cur start]\n    (if (< cur end)\n      (recur (conj acc cur) (inc cur))\n      acc)))","problem":34,"user":"4e99819a535dbda64a6f6b66"},{"problem":34,"code":"(fn [s e]\n  (take (- e s)(iterate inc s)))","user":"5585f088e4b001b0851d7513"},{"problem":34,"code":"(fn [min1 max1] (map-indexed (fn [idx itm] (+ idx min1)) (repeat (- max1 min1) 1)))","user":"55a0e139e4b0acc240e31504"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         result []]\n    (if (>= x end)\n      (seq result)\n      (recur (+ x 1) \n             (conj result x)))))","user":"567874f3e4b05957ce8c617c"},{"problem":34,"code":"(fn [x y]\n   (loop [step  x\n          end   y\n          acc  []]\n     (if (< step end)\n         (recur (inc step) end (conj acc step))\n       acc)))","user":"5991eec7e4b0866487ed0d6e"},{"problem":34,"code":"#(take-while (partial > %2) (reductions + %1 (repeat 1)))","user":"58f5689de4b0438e51c2ced7"},{"code":"(fn [f t] (let [stepfunc (if (> t f) inc dec)] (loop [val f result ()] (if (not= val t) (recur (stepfunc val) (conj result val)) (reverse result)))))","problem":34,"user":"4f16ef8a535d64f603146451"},{"problem":34,"code":"(fn [from to]\n  (loop [out '()\n         v from]\n    (if (= v to)\n      out\n      (recur (concat out (list v)) (inc v)))))","user":"578d459ee4b0ebec4cfb7567"},{"problem":34,"code":"(fn [fst lst]\n  (loop [results []\n         el fst\n         mx lst]\n    (if (= el mx)\n      results\n      (recur (conj results el) (inc el) mx))))","user":"5294a49be4b02ebb4ef7500f"},{"code":"#(take-while (fn[x] (< x %2)) (iterate inc %))","problem":34,"user":"5141fafbe4b0b50abeb46b28"},{"problem":34,"code":"#(take (- %2 %1) (iterate inc %))\n\n;;#(take (- %2 %1) (iterate inc %))","user":"56ff0ef3e4b08d47c97781ba"},{"problem":34,"code":"(fn myrange \n  ([to from] \n   (myrange to from '()))\n  ([to from result]\n  \t(if (= from to) result\n     \t(recur to (dec from) (cons (dec from) result))))\n  \n)","user":"542b0592e4b0dad94371f286"},{"problem":34,"code":"(fn [start end]\n   (loop [i start, res `()]\n     (if (>= i end)\n       (reverse res)\n       (recur (inc i) (conj res i)))\n     ))","user":"590b3aeae4b047aa04b199d0"},{"problem":34,"code":"(fn range-within [lower higher] (take (- higher lower) (iterate inc lower)))","user":"5553b729e4b0deb715856e05"},{"problem":34,"code":"(fn foo [n omega] \n  (lazy-seq \n   (if (< n omega)\n    (cons n (foo (inc n) omega))  \n)))","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":34,"code":"(fn [z x y ]\n    (loop [i x j z]\n      (if (< i y)\n        (recur (inc i) (conj j i))\n        j\n        ))) []","user":"53abf519e4b047364c044456"},{"problem":34,"code":"(fn rng [start end]\n  (reverse\n    (loop [x start acc ()]\n      (if\n        (= x end)\n        acc\n        (recur (inc x) (conj acc x))))))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":34,"code":"(fn [beg end]\n  (loop [s (list (dec end))]\n    (let [x (dec (first s))]\n      (if (< x beg)\n        s\n        (recur (conj s x))))))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":34,"code":"(fn [x y]\n    (loop [x x y y res ()]\n      (if (>= x y)\n        (reverse res)\n        (recur (inc x) y (cons x res)))))","user":"5a9f2c53e4b0d174b936c812"},{"code":"(fn [x y] \n  (loop [c x r []] \n    (if (= c y) r\n      (recur (inc c) (conj r c))\n    )        \n  )\n)","problem":34,"user":"52fba50ce4b047fd5583700d"},{"problem":34,"code":"(fn [l r]\n  (loop [i l result []]\n    (if-not (< i r)\n      result\n      (recur (+ i 1) (conj result i)))\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":34,"code":"(fn rnge [from to]\n  (println from)\n  (println to)\n  (loop [s [],\n         i from]\n    (println i)\n    (if (< i to)\n      (recur (conj s i),(inc i))\n      s\n      )\n    )\n  )","user":"558ee1c9e4b0277789237659"},{"problem":34,"code":"(fn [a b]\n    (loop [i a\n           r []]\n        (if (>= i b)\n            r\n            (recur (inc i) (conj r i)))))","user":"5fafa44ee4b08cb800c85b0e"},{"problem":34,"code":"(fn [i n] (loop [lst []\n                 i\ti\n                 n \tn]\n            (if (= i n)\n              lst\n              (recur (conj lst i) (inc i) n))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":34,"code":"(fn rng \n  ([x y] (rng x y [])) \n  ([x y acc] \n   (if (>= x y) acc \n     (rng (+ x 1) y (conj acc x)))))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":34,"code":"(fn clj34\n  ([start end] (clj34 start end '()))\n  ([start end list] \n    (if (= start end)\n      (reverse list)\n      (recur (inc start) end (conj list start)))))","user":"5673881fe4b05957ce8c6120"},{"problem":34,"code":"(fn ranger \n  ([a b] (ranger a b []))\n  ([a b l]\n    (if (< a b)\n      (recur (+ a 1) b (conj l a))\n      l)))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":34,"code":"(fn rec [start end] (if (< start end)\n                      (cons start (rec (inc start) end))\n                      nil))","user":"55adcc8fe4b03311e7b732ab"},{"problem":34,"code":"(fn ranger [a b]\n  (if (= a b) nil\n    (cons a (ranger (+ a 1) b))))","user":"54f4e286e4b0f2f3c5226e8c"},{"problem":34,"code":"(fn [i0 i1]\n   (loop [i (dec i1) l '()]\n     (if (< i i0) l (recur (dec i) (conj l i)))))","user":"57f80350e4b0d3187e90090c"},{"code":"(fn [l h] (loop [l (dec l) h (dec h) acc []] (if (= l h) acc (recur l (dec h) (cons h acc)))))","problem":34,"user":"515ef58be4b02c55805ea237"},{"problem":34,"code":"(fn myr [start end]                                                            \n  (take                                                                          \n    (- end start)                                                                \n    (cons start (lazy-seq (myr (inc start) end)))))","user":"58ebd10de4b056aecfd47d49"},{"problem":34,"code":"(fn \n  [lower upper]\n  (loop [lst [lower]]\n    (let [next-entry (-> lst last inc)]\n      (if (= next-entry upper)\n        lst\n    \t(recur (conj lst next-entry))))))","user":"5761513fe4b0994c1922fb87"},{"code":"(fn [start end]\n  (loop [current start current-rng []]\n    (if (= current end)\n      current-rng\n      (recur (inc current) (conj current-rng current)))))","problem":34,"user":"52b94f15e4b07a9af57922ba"},{"problem":34,"code":"(fn rng[x y] (loop [a x b y result []]  (if (< a b) (recur (inc a) b (conj result a)) result)))","user":"56fde58ae4b08d47c97781aa"},{"problem":34,"code":"(fn [start end]\n  (loop [s start\n         result []]\n    (if (< s end)\n      (recur (inc s) (conj result s))\n      result)))","user":"5ab490f4e4b073f17744261d"},{"code":"(fn\n  [first last]\n  (loop [results [], i first]\n    (if (= i last)\n      results\n      (recur (conj results i) (inc i)))))","problem":34,"user":"50a01937e4b08df8156e9e47"},{"problem":34,"code":"(fn [start end]\n (loop [start start result ()]\n (if (>= start end)\n   (reverse result)\n   (recur (inc start) (conj result start)))))","user":"598ff38ce4b0fcebec4de869"},{"code":"(fn [start end]\n  (loop [x start, r '[]]\n    (if (< x end)\n      (recur (inc x) (conj r x))\n      (seq r))))","problem":34,"user":"50bc23e4e4b0594b91591c3c"},{"problem":34,"code":"(fn myrange [x n] \n(loop [i n col '()]\n  (if (= x i)\n   col\n   (recur (dec i) \n     (cons (dec i) col)\n))))","user":"57073037e4b0b0fb43fd0689"},{"problem":34,"code":"(fn my-range [x y]\n  (loop [a x b []]\n    (if (= a y) b\n      (recur (inc a) (concat b [a]))\n                )\n    )\n  )","user":"55f95de6e4b03cbcff9738c1"},{"problem":34,"code":"(fn [from to]\n    (loop [n from acc []]\n      (if (= n to) acc\n          (recur (inc n) (conj acc n)))))","user":"595bbab7e4b066ee0a44afe0"},{"problem":34,"code":"(fn [start finish]\n  (take-while #(> finish %) (iterate inc start)))","user":"540a4f20e4b0addc1aec66ef"},{"problem":34,"code":"(fn [start stop] (take-while (partial > stop) (iterate inc start)))","user":"552d9b31e4b076ab5578f7eb"},{"problem":34,"code":"(fn rg \n  ([b e] (rg b e nil))\n  ([b e a] \n      (if \n       (= b e) \n       (reverse a)\n       (rg (inc b) e (conj a b)))))","user":"57ed8315e4b0bfb2137f5b9a"},{"code":"(fn range2[from to]\n  (loop [a from b (dec to) res '()]\n    (if (= a b) (conj res a)\n      (recur a (dec b) (conj res b)))))","problem":34,"user":"4ea365e2535d7eef308072c5"},{"problem":34,"code":"(fn [start end]\n  (loop [i      start\n         result []]\n    (if (>= i end)\n      result\n      (recur (inc i) (conj result i)))))","user":"5aa5043ee4b0d174b936c88e"},{"code":"(fn f [x y] (take (- y x) (lazy-cat (iterate inc x))))","problem":34,"user":"505dd5c4e4b0e6aca564be0e"},{"problem":34,"code":"(fn custom-range [b e]\n  (if (>= b e)\n    []\n    (cons b (custom-range (+ b 1) e))\n    )\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":34,"code":"(fn p34 [s e]\n  (if (= s e)\n    nil\n    (cons s (p34 (inc s) e))))","user":"57fe836ee4b0d3187e9009d2"},{"problem":34,"code":"(fn f [s e]\n(take (- e s)\n( (fn my-number-seq [s]\n  (lazy-seq (cons s (my-number-seq (inc s)) ))\n) s )))","user":"5bc2df19e4b07a9b28b10038"},{"problem":34,"code":"(fn [start end]\n  (loop [p (dec end)\n         result '()]\n    (if (< p start) result\n      (recur (dec p) (conj result p)))))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn my-range [s,e]\n  (if (= s e)\n     ()\n     (cons s (my-range (inc s) e))))","problem":34,"user":"52fafd5ce4b047fd55837006"},{"problem":34,"code":"(fn rang-e [start end]\n    (cond (= start (dec end)) (list start)\n        :else (cons start (rang-e (inc start) end))))","user":"5786c182e4b0ebec4cfb74fd"},{"code":"#(loop [i %1 ret []]\n   (if (< i %2)\n     (recur (inc i) (conj ret i))\n     ret))","problem":34,"user":"51064b76e4b01150e115ebe4"},{"code":"(fn my-range [lo hi]\n  (take-while #(< % hi)\n              (iterate inc lo)))","problem":34,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn [s e]\r\n        (take (- e s) (iterate inc s)))","problem":34,"user":"4f68a9bbe4b07046d9f4ef79"},{"code":"(fn rrr[a b] (reduce (fn [l x] (concat l `(~(+ (last l) 1)))) `(~a) (repeat (- b a 1) 1)))","problem":34,"user":"531490bde4b08068f379ed17"},{"problem":34,"code":"(fn ans-34 [start, end]\n (loop [i start\n        result []]\n   (if (>= i end) result (recur (inc i) (conj result i)))))","user":"608fac60e4b03bd49d9f36c7"},{"code":"#(loop [x % \n        y %2 \n        result '()]\n  (if (= x y)\n    (reverse result)\n    (recur (inc x) y (cons x result))))","problem":34,"user":"511026b1e4b04c71fce993ec"},{"problem":34,"code":"(fn [a b]\n  (loop [ys [] a a]\n    (if (>= a b)\n      ys\n      (recur (conj ys a) (inc a)))))","user":"558ea13be4b0277789237654"},{"problem":34,"code":"#(loop [x (- %2 %)\n        result [%]]\n   (if (> x 1)\n     (recur (dec x) (conj result (inc (last result))))\n     result))","user":"549def9ce4b0f3d1d8e70f99"},{"problem":34,"code":"(fn _range [start end]\n  (loop [acc '()\n         i start]\n    (if (>= i end)\n      acc\n      (recur (concat acc (list i)) (inc i))))\n  )","user":"564066dee4b08d4f616f5ee2"},{"problem":34,"code":"(fn my-range [min max]\n  (if (< min (- max 1))\n    (conj (my-range (inc min) max) min)\n    (list min)))","user":"547e3846e4b0c51c1f4d7302"},{"problem":34,"code":"(fn my-range[start end]\n  (take (- end start) (iterate inc start)))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn foo [x y] (if (= x y) '() (concat (list x) (foo (+ x 1) y))))","problem":34,"user":"52cc92e9e4b07d0d72b27368"},{"code":"(fn my-loop [start end]\n    \n    (if (>= start end)\n      nil\n      \n      (cons start (my-loop (inc start) end))  \n    )\n  )","problem":34,"user":"535aba96e4b04ce2eb3ed2a8"},{"problem":34,"code":"#(loop [res []\n        cur %]\n   (if (= cur %2)\n     res\n     (recur (conj res cur) (inc cur))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":34,"code":"#(loop [min %1, max %2, res []]\n    (if (= min max)\n      (seq res)\n      (recur (inc min) max (conj res min))))","user":"55ed37ebe4b0121d4835fdd6"},{"code":"(fn [a b] (take (- b a)  (iterate #(+ 1 %) a)))","problem":34,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn myrange [ a b ] (loop [coll [] x  a] (if (== x b) coll (recur (conj coll x) (inc x)))))","problem":34,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"(fn list-em\n  ([start stop]\n    (list-em start stop '()))\n  ([start stop accum]\n    (if (= start stop)\n      (reverse accum)\n      (recur (inc start) stop (conj accum start)))))","problem":34,"user":"51622fb8e4b009fba0926e3f"},{"problem":34,"code":"#(take (- %2 %1) (keep-indexed (fn [i x] (+ i x)) (repeat %1)))","user":"5dc9d5c3e4b03836ba07d824"},{"problem":34,"code":"(fn [i j]\n     (loop [x i\n            res []]\n     (if (< x j)\n        (recur (inc x) (conj res x))\n        res)))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"(fn [low high] (take (- high low) (iterate #(+ % 1) low)))","problem":34,"user":"4fde156ce4b05e33b9224f83"},{"problem":34,"code":"(fn int-range [i end & prevs] \n  (let [values (or (first prevs) [])]\n    (if (< i end) \n      (int-range (inc i) end (conj values i))\n      values)))","user":"568d4742e4b0dcc4269f40c2"},{"code":"(fn f [start cap]\n  (if (< start cap)\n(cons start (f (inc start) cap))\n[]))","problem":34,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":34,"code":"(fn [start end]\n  (loop [i   start\n         acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc)))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":34,"code":"(fn [s e]\n  (loop [s s, e e, r []]\n    (if (= s e) r\n      (recur (+ s 1) e (conj r s)))))","user":"59ef6cfae4b0966464fe6a32"},{"problem":34,"code":"(fn [lower-bound, upper-bound]\n  (loop [i (dec upper-bound) lst '()]\n    (if (>= i lower-bound)\n      (recur (dec i) (conj lst i))\n      lst)))","user":"580beb40e4b0849f6811b713"},{"problem":34,"code":"(fn thirty-four [x y]\n     (if (< x (dec y))\n       (cons x (lazy-seq (thirty-four (inc x) y)))\n       (list (dec y))))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":34,"code":"(fn [int1 int2]\n  ((fn [int1 int2 acc]\n    (if (>= int1 int2)\n      (seq acc)\n      (recur (+ 1 int1) int2 (conj acc int1))))\n   int1 int2 [])\n  )","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn [l r]\n   ((fn ran [i res]\n      (if (< i r) (ran (inc i) (conj res i)) res)\n      \n   ) l [])\n)","problem":34,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":34,"code":"(fn [s e]\n  (loop [l (conj '() s)]\n    (if (not (> e (first l)))\n      (reverse (rest l))\n      (recur (conj l (inc (first l)))))))","user":"52979551e4b02ebb4ef75043"},{"problem":34,"code":"(fn [from to] \n  (loop [acc []\n         val from]\n    (if (< val to)\n      (recur (conj acc val) (inc val))\n      acc)))","user":"53161a56e4b08068f379ed3e"},{"problem":34,"code":"(fn [start end]\n  (loop [s (- start 1)\n         r []]\n    (if (= s (- end 1)) (reverse (into '() r))\n      (recur (+ 1 s) (conj r (+ 1 s))))))","user":"562c2fc2e4b058fa18c5a6d7"},{"problem":34,"code":"(fn [low high]\n    (take-while\n    (partial > high)\n    (iterate inc low)))","user":"5a07fefee4b01bb0ae8afde5"},{"problem":34,"code":"(fn [a b]\n  (loop [out [a] n (inc a)]\n    (if (>= n b) out (recur (conj out n) (inc n)))))","user":"564a5a09e4b0284900eef656"},{"problem":34,"code":"(fn my-range [start end]\n  (lazy-seq\n   (if (>= start end)\n     nil\n     (cons start (my-range (inc start) end)))))","user":"54926752e4b0b312c081ff44"},{"code":"(fn [a z] (take-while #(< % z) (iterate inc a)))","problem":34,"user":"4daf907aedd6309eace4d17b"},{"code":"(fn [from to]\n  (loop [x from c []]\n    (if (< x to)      \n      (recur (inc x) (conj c x))\n      c)))","problem":34,"user":"50eebf46e4b06330c1f87c61"},{"problem":34,"code":"(fn [s e]\n  (take-while #(< %1 e) (iterate inc s)))","user":"53e745a1e4b036ad0777e479"},{"problem":34,"code":"(fn [from to]                                                                                                                                                                                               \n  (loop [r [from]                                                                                                                                                                                                \n         i from]                                                                                                                                                                                                 \n    (let [n (inc i)]                                                                                                                                                                                             \n      (if (= n to)                                                                                                                                                                                               \n        r                                                                                                                                                                                                        \n        (recur (conj r n) n)))))","user":"53403f42e4b085b17e897da8"},{"code":"(fn f [s e]\n  (if (< s e)\n    (cons s (f (inc s) e))\n    ()))","problem":34,"user":"4fda8f57e4b05e33b9224f4e"},{"problem":34,"code":"#(take-while (fn f[x] (< x %2)) (iterate inc %1))","user":"5416aacce4b01498b1a719ff"},{"problem":34,"code":"(fn [s-index, l-index] \n  (loop [i s-index c []] \n    (if (= i l-index) c \n      (recur (+ i 1) (conj c i)))))","user":"514992d2e4b0b64cbeae1848"},{"code":"(fn my-range [min max] \n  (if (>= min max)\n    '()\n  \t(conj (my-range (+ min 1) max) min)))","problem":34,"user":"538c3424e4b0b51d73faae58"},{"problem":34,"code":"(fn [lo up]\n  (loop [x lo result []]\n    (if (= x up)\n      result\n      (recur (inc x) (conj result x)))))","user":"57763002e4b0979f89651631"},{"code":"(fn [start end] \n  ( loop [my-range '()\n          pos start]\n    (if (>= pos end)\n      (reverse my-range)\n      (recur (cons pos my-range)  (inc pos)  ))))","problem":34,"user":"5213348ae4b0d32679a50652"},{"code":"(fn [a b] (take-while #(< % b) (iterate inc a)))","problem":34,"user":"4e513ecf535dc968683fc4f6"},{"problem":34,"code":"(letfn [(f [a' b'] \n           (if (>= a' b') \n             '() \n             (conj (f (inc a') b') a')))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"(fn range2 [lower upper] \n  (if (= lower upper)\n    '()\n    (lazy-seq (cons lower (range2 (inc lower) upper)))))","problem":34,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn myrange [a b]\n  (if (= a b)\n    '()\n    (conj (myrange (inc a) b)\n          a)))","problem":34,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":34,"code":"(fn [x y]\n  (loop [counter x thing []]\n    (if (> counter (- y 1))\n      (apply list thing)\n      (recur (inc counter) (conj thing counter)))))","user":"5b6ba7d7e4b0c6492753e7ad"},{"problem":34,"code":"#(->>(iterate inc %1)\n     (take (- %2 %1)))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":34,"code":"( fn rge [ start end ]\n  (seq (reduce\n   (\n    fn redp [ res a ]\n    ( conj res ( inc ( last res ) ) )\n   )\n   [ start ]\n   (\n    repeat ( - ( - end start ) 1 ) 1\n   )\n  )\n ) )","user":"5d5c6675e4b09db18d4482ec"},{"problem":34,"code":"(fn [f l]\n  (->> (iterate inc f) (take (- l f))))","user":"57126104e4b09c608db70458"},{"problem":34,"code":"#(loop [v %1 r []]\n   (if (< v %2)\n     (recur (inc v) (conj r v))\n     r))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn my-range [min max]\n  (if (< min max)\n      (cons min (my-range (+ min 1) max))\n      '()))","problem":34,"user":"4e342671535deb9a81d77f29"},{"code":"(fn\n   [a b]\n   (take (- b a) (iterate inc a)))","problem":34,"user":"52d39acce4b099d49816f0c7"},{"problem":34,"code":"(fn [start end]\n   (loop [x start\n          coll []]\n     (if (= (last coll) (- end 1))\n       coll\n       (recur (inc x) (conj coll x)))))","user":"5a61bf79e4b0512ff01cd97b"},{"code":"(fn rr [a b] (when (< a b) (conj (rr (inc a) b) a)))","problem":34,"user":"4fc4eadee4b081705acca353"},{"problem":34,"code":"(fn [x y]  (seq ((fn [x y z] (if (>= x y) z (recur (inc x) y (conj z x)))) x y [])) )","user":"55818b0ee4b05c286339e0fb"},{"problem":34,"code":"(fn[r1 r2] (loop[r1 r1\n                 s '()]\n             (if (< r1 r2)\n               (recur (inc r1) (conj s r1))\n               (reverse s))))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn [start end]\n    (take (- end start) (iterate #(+ 1 %) start)))","problem":34,"user":"50981062e4b04e098a4c7268"},{"problem":34,"code":"(fn [lower upper]\n   (loop [lower lower custom-list []]\n     (if (= lower upper)\n       custom-list\n       (recur\n       (inc lower)\n       (conj custom-list lower)\n       )\n     )\n   )\n  )","user":"5d8c8175e4b0915913b1d3e1"},{"problem":34,"code":"(fn [lower upper] (loop [i lower r '()]\n                     (if (= i upper) (reverse r) (recur (inc i) (conj r i)))))","user":"55c1eb52e4b0e31453f64970"},{"problem":34,"code":"(fn [x y]\n  (loop [n x l []]\n    (if (= n y)\n      l (recur (inc n) (conj l n)))))","user":"51febd40e4b0f1313d468a76"},{"code":"(fn a [mi ma] (take (- ma mi) (iterate inc mi)))","problem":34,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn rng [start end]\r\n  (if (= start end)\r\n    (list)\r\n    (conj (rng (inc start) end) start)))","problem":34,"user":"4facff22e4b081705acca230"},{"code":"(fn [ n m ]  \n    (loop [answer ()\n              this-one  n] \n        (if (= this-one  m)\n            (reverse answer)\n            (recur  (conj answer this-one ) (inc this-one) ) ) \n    )  )","problem":34,"user":"4fdf750be4b05e33b9224f9c"},{"problem":34,"code":"(fn myrange \n  [x y]\n  (take (- y x) (iterate inc x))\n)","user":"5554f886e4b0deb715856e10"},{"problem":34,"code":"(fn\n  [lo hi]\n  (loop [out (list (- hi 1))\n         remain (- hi lo)]\n    (if (= 1 remain)\n      out\n      (recur (cons (- (first out) 1) out) (- remain 1)))))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn [x y] ((fn [a x y] \n    (if (= (first a) x) \n  \t\ta \n  \t\t(recur (cons (- (first a) 1) a) x y)\n  \t)) (list (- y 1)) x y))","problem":34,"user":"504f3f13e4b0a02f9cffde60"},{"problem":34,"code":"(fn interval-da-parada\n  [initial last]\n  (loop [i initial\n         items []]\n    (if (= i last)\n      items\n      (recur (inc i) (conj items i)))))","user":"5df0f338e4b093ff717275c6"},{"problem":34,"code":"#(reverse (loop [i %1 result '()]\n   (if (= i %2)\n     result\n     (recur (inc i) (conj result i))\n     )))","user":"54696e4ce4b00cfc9eacc147"},{"problem":34,"code":"#(loop [x %1 r []]\n   (if (< x %2)\n     (recur (inc x) (conj r x))\n     r))","user":"59b554cee4b05c620303ca0f"},{"problem":34,"code":"(fn [start stop]\n  (loop [acc [] v start]\n    (if (< v stop)\n      (recur (conj acc v) (inc v))\n      acc)))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":34,"code":"(fn my-range [start end]\n  (when (< start end)\n    (conj (my-range (inc start) end) start)))","user":"5412ef7ee4b01498b1a719da"},{"problem":34,"code":"(fn [mn mx]\n   (loop [e mx\n          curr [mn]]\n     (if (= (inc (last curr)) e)\n       curr\n       (recur e (concat curr [(inc (last curr))])\n              )\n       )\n     ))","user":"54bbba99e4b0ed20f4ff6ec2"},{"code":"(fn [x y]\r\n    (take (- y x) (iterate inc x)))","problem":34,"user":"4e370a04535deb9a81d77f37"},{"problem":34,"code":"(fn [s e]\n  (loop [l (list) c s]\n    (if (= c e)\n      (reverse l)\n      (recur (conj l c) (+ c 1)))))","user":"565b941ce4b068f2fe63dc07"},{"problem":34,"code":"(fn [start stop] \n  (loop [current start\n         acc     []   ]\n    (if (= current stop)\n      (do acc)\n      (recur (inc current)\n             (conj acc current)))))","user":"5cb3a8c3e4b026601754b904"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         res []]\n    (if (= i end)\n      res\n      (recur (inc i) (conj res i)))))","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         elem start]\n    (if (>= elem end)\n      result\n      (recur (conj result elem) (inc elem)))))","user":"54f03f8ce4b024c67c0cf891"},{"problem":34,"code":";(fn [start num] (take (- num start) (iterate #(+ 1 %) start)))\n(fn [from to] (take-while #(> to %) (iterate inc from)))","user":"55b1b67ce4b0da326a65cf6f"},{"code":"(fn custom-range [begin end]\n  (loop [begin begin, end end, range-list []]\n    (if (= begin end)\n        range-list\n      (recur (inc begin) end (conj range-list begin)))))","problem":34,"user":"52463059e4b09dbe66b56198"},{"problem":34,"code":"(fn my-range\n  ([start end]\n   (my-range [] start end))\n  ([coll start end]\n   (if (= start end)\n     coll\n     (recur (conj coll start) (inc start) end))))","user":"60c43b20e4b0e0fa5f1b42c9"},{"problem":34,"code":"(fn a \n  ([from to]\n   (when (< from to)\n     (cons from (a (inc from) to)))))","user":"53ea5851e4b036ad0777e4e4"},{"problem":34,"code":"(fn lol [x y]\n  (loop [l '() i (dec y)]\n    (if (<= x i)\n      (recur (cons i l) (dec i))\n      l)))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn create-range [a b]\r\n  (if (= a b)\r\n    nil\r\n    (lazy-seq (cons a (create-range (inc a) b)))))","problem":34,"user":"4fd170fce4b04c3a95aa0411"},{"code":"#(loop [sq '() i %1 upto %2]\n  (if (>= i upto)\n\t\t(reverse sq)\n\t\t(recur (conj  sq i) (inc i) upto)))","problem":34,"user":"4f73536ee4b07046d9f4f044"},{"problem":34,"code":"(fn [x y] (loop [curr x limit y buf []] (if (< curr y) (recur (inc curr) limit (conj buf curr)) buf)))","user":"5c7f7889e4b0d597f478cae0"},{"code":"(fn r [f t] (when (< f t) (cons f (r (inc f) t))))","problem":34,"user":"5392b849e4b0b51d73faaeb1"},{"problem":34,"code":"(fn [a b] (reductions + a (repeat (- (- b a) 1) 1)))","user":"53ced9fee4b00fb29b2212f8"},{"code":"(fn [s, e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"4edffe54535d10e5ff6f5347"},{"problem":34,"code":"(fn my-range [from to]\n  (loop [result '()\n         current from]\n    (if (= current to)\n      result\n      (recur (concat result (list current)) (inc current)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn [lo hi] (loop [a lo, b hi, result nil]\n              (if (= a b)\n                   result\n                  (recur (+ a 1) b (concat result (list a))))))","problem":34,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"#(loop [coll [] x %1]\n   (if (= x %2)\n     coll\n     (recur (conj coll x) (inc x))))","problem":34,"user":"50dade7be4b02e6ac9592c70"},{"problem":34,"code":"(fn [mini maxi]\n  (loop [mi mini ma maxi acc ()]\n    (if (= mi ma)\n      (reverse acc)\n      (recur (+ 1 mi) ma (conj acc mi)))))","user":"56d03a08e4b0ea9b8538f77a"},{"code":"(fn [start stop] \n  (take-while (partial > stop) (iterate (partial + 1) start)))","problem":34,"user":"516abecae4b081287f204e9f"},{"code":"(fn [b e]\n  (loop [b b e e result nil]\n    (if (= b e)\n      result\n      (recur b (dec e) (cons (dec e) result)))))","problem":34,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":34,"code":"#(loop [s %1\n        e %2 \n        a []\n        ]\n   (if (>= s e)\n     a\n     (recur (inc s) e (conj a s))\n     )\n   )","user":"5e5f83a2e4b0fd0acd15867b"},{"code":"(fn myseq [x end]\n  (cons \n   x\n   (if (= (inc x) end)\n     nil\n     (myseq (inc x) end))))","problem":34,"user":"50c13f77e4b096f585049c3b"},{"code":"(fn [low hi]\n  (loop [i low stop (- hi 1) result []]\n          (if (> i stop)\n             result\n             (recur (+ i 1) stop (conj result i)))))","problem":34,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         coll []]\n    (if (< i end)\n      (recur (+ i 1) (conj coll i))\n      coll)))","user":"5b500215e4b02d533a91bce2"},{"problem":34,"code":"(fn [lb ub]\n  (loop [lb lb\n         ub ub\n         acc []]\n    (if (>= lb ub)\n      acc\n      (recur (inc lb) ub (conj acc lb)))))","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":34,"code":"(fn [start end] (loop [array [] current start] (if (= current end) array (recur (conj array current) (inc current)))))","user":"57c2d66ae4b05aa3c4741cb9"},{"code":"(fn ran [a b]\n    (if (= a b)\n      ()\n      (cons a (ran (inc a) b))))","problem":34,"user":"4ed15f60535d44c135fd68cd"},{"code":"(fn [a b]\n  (loop [a a b b r '()]\n    (if (= a b) (reverse r)\n      (recur (inc a) b (conj r a)))))","problem":34,"user":"5029fccee4b023940c84aa47"},{"problem":34,"code":"(fn [x y] (loop [s x ls []] (if (= s y) ls (recur (inc s) (conj ls s)))))","user":"5b552117e4b02d533a91bd2c"},{"problem":34,"code":"(fn x\n   [beg end]\n   (loop [res ()\n          cur end]\n     (if (= cur beg)\n       res\n       (recur (conj res (dec cur)) (dec cur)))))","user":"55ee84c0e4b0121d4835fdf0"},{"code":"(fn [start end] \n  (loop [start start _range '()]\n    (if (= start end)\n      (reverse _range)\n      (recur (inc start) (conj _range start))\n    )\n  )\n)","problem":34,"user":"4fc5273ce4b081705acca37f"},{"problem":34,"code":"(fn range' [m n]\n  (cond (= m n) nil\n        :otherwise (cons m (range' (inc m) n))))","user":"5717ad6fe4b07c98581c3b14"},{"problem":34,"code":"(fn [minNum maxNum]\n             (loop [ret () mi minNum ma maxNum]\n               (if (= mi ma)\n                 (reverse ret)\n                 (recur (conj ret mi) (+ mi 1) ma))))","user":"56305383e4b073c1cf7a9be6"},{"problem":34,"code":";;#(take (- %2 %1) (iterate inc %1))\n(fn [x y] (take (- y x) (iterate inc x)))","user":"580d7bdae4b0849f6811b73c"},{"problem":34,"code":"(fn my-range\n  ([to] (my-range 0 to))\n  ([from to] (my-range from to '()))\n  ([from to acc]\n   (if (= from to)\n    acc\n\t(my-range (inc from) to (concat acc [from])))))","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn rng ([bot top] (if (= bot top) '() (cons bot (rng (+ bot 1) top)))))","problem":34,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn fart [m n]\n  (cond \n   (< m n) \n   (concat (list m) (fart (+ m 1) n))\n  :else \n   '()))","problem":34,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":34,"code":"(fn rang [lb ub]\n  (take (- ub lb) (cons lb (lazy-seq (rang (inc lb) ub)))))","user":"541709b0e4b01498b1a71a06"},{"problem":34,"code":"(fn me [a b]\n   (cond\n      (= a b) []\n      (= (inc a) b) [a]\n      :else (concat \n       \t\t\t(me a (dec b))\n            \t(me (dec b) b))))","user":"561d506ee4b064ca9f4b16aa"},{"problem":34,"code":"(fn [open close] (take (- close open) (iterate #(+ 1 %) open)))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":34,"code":"(fn foo [x y] (if (>= x y) () (cons x (foo (+ x 1) y))))","user":"5509bec5e4b06e50f9beb121"},{"problem":34,"code":"(fn [s e] \n  \t(loop [i s b []]\n      (if (= i e)\n        b\n        (recur (+ i 1) (conj b i)))))","user":"58b54852e4b0ebc645576d52"},{"problem":34,"code":"(fn [range-x range-y] \n  (take (- range-y range-x) \n        (iterate (fn [x] (+ x 1)) range-x)))","user":"521af66be4b0c4ef0be8301b"},{"problem":34,"code":"(fn [a b]\n  (loop [i a\n         res []]\n    (if (= i b)\n      res\n      (recur (inc i) (conj res i)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":34,"code":"(fn implement-range-solution\n  ([start end] (implement-range-solution start end start))\n  ([start end n]\n   (when (< n end)\n     (cons n (lazy-seq (implement-range-solution start end (inc n)))))))","user":"50c113bee4b096f585049c37"},{"problem":34,"code":"(fn[lower upper] (take (- upper lower) (iterate inc lower)))","user":"5954eef0e4b066ee0a44af17"},{"problem":34,"code":"(fn [s f] (seq (loop [s s f f col []] (if (= s f) col (recur (inc s) f (conj col s))))))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn  [from to](\r\n                                   take (- to from) (iterate inc from)\r\n                                   ))","problem":34,"user":"4de6f806535d08e6dec9fdf7"},{"code":"(fn [start endi] \n  (loop [     cnt start \n              coll []]\n    (if (>= cnt endi)\n      coll\n      (recur  (inc cnt) \n              (conj coll cnt)))))","problem":34,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn range_ [start stop]\n  (loop [i start items '()]\n    (if\n      (== i stop)\n      (reverse items)\n      (recur (inc i) (cons i items)))))","problem":34,"user":"4fa5406fe4b081705acca1ac"},{"problem":34,"code":"(fn [frst lst]\n  \t\t(take-while #(< % lst) (iterate inc frst))\n)","user":"5649615be4b0284900eef641"},{"code":"(fn [x y] (take (- y x) ((fn nums[x] (cons x (lazy-seq (nums (inc x))))) x)))","problem":34,"user":"525cc912e4b0cb4875a45d48"},{"problem":34,"code":"(fn ra [in fin]\n  (loop [i in\n         res '()]\n    (if (= i fin) (reverse res)\n      (recur (inc i) (cons i res)))))","user":"5c7d5463e4b0d597f478caa9"},{"problem":34,"code":"(fn [start stop]\n  (loop [current start stop stop acc []]\n  (if (< current stop)\n    (recur (inc current) stop (conj acc current))\n    acc\n    ))\n  )\n\n;; better answer #(take (- %2 %1) (iterate inc %1))","user":"6004c750e4b074f607df6645"},{"code":"(fn [start stop]\n  (take (. Math abs (- stop start)) (iterate inc start)))","problem":34,"user":"50799992e4b08327cd804a62"},{"code":"(fn [x y] (loop [cnt x acc '()]\n  (if (< cnt y)\n    (recur (inc cnt) (conj acc cnt)) (reverse acc))))","problem":34,"user":"4e8d5911535d65386fec2133"},{"code":"(fn [ start end ]\n  (loop [ x (dec end) rng () ]\n    (if (< x start)\n      rng\n    (recur (dec x) (conj rng x)))))","problem":34,"user":"5068c203e4b0c0169921a8e4"},{"code":"(fn r [n m] \r\n    (if (= n m) \r\n      '() \r\n      (cons n (r (+ n 1) m))\r\n    ))","problem":34,"user":"5071e520e4b0e3170b5a8683"},{"problem":34,"code":"(fn [start end] (map-indexed (fn [idx item] (+ idx item)) (repeat (- end start) start)))","user":"515310b4e4b0d6806ecd26fb"},{"problem":34,"code":"#(loop [idx %1 till %2 res (list)] (if (>= idx till) (reverse res) (recur (inc idx) till (cons idx res))))","user":"58d1c1b1e4b03c36ff7e58ef"},{"problem":34,"code":"(fn [start end]\n           (loop [x start\n                  res []]\n             (if (= x end)\n               res\n               (recur (inc x) (conj res x)))))","user":"544e8369e4b0e39780006987"},{"problem":34,"code":"(fn [start end] \n\t(reverse \n\t\t(loop \n\t\t\t[i start \n\t\t\tend end\n\t\t\tcoll ()] \n\t\t\t(if (< i end) \n\t\t\t\t(recur (inc i) end (conj coll i))   \n\t\t\t\tcoll )\n\t\t\t)) \n\t)","user":"5ac04101e4b073f177442737"},{"code":"(fn rng [start stop]\n    (if (= start stop)\n      []\n      (conj (rng start (dec stop)) (dec stop))))","problem":34,"user":"4fd8544be4b0dab7d829f390"},{"problem":34,"code":"(fn rng\n  ([s e l] (cond (< s e) (recur (inc s) e (conj l s))\n                 :else (seq l)))\n  ([s e]\n   (rng s e [])))","user":"58a3ba31e4b02bd94d917eff"},{"problem":34,"code":"(fn [s t]\n  (loop [i s r '()]\n    (cond \n     (< i t) (recur (inc i) (cons i r))\n     :else (reverse r))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":34,"code":"(fn q34\n  ([start end result]\n   (cond\n     (>= start end) result\n     true (recur (inc start) end (conj result start))))\n  ([start end] (q34 start end [])))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":34,"code":"(fn rng \n  ([start end] \n   (rng start end '())\n  )   \n  ([start end lst]\n  \t(if (= start end)\n       \tlst\n       \t(rng (inc start) end (concat lst [start]) ) \n    )\n  )\n)","user":"550fd845e4b06e50f9beb17c"},{"problem":34,"code":"(fn rng [l u] \n  (if (= l u)\n    '()\n    (cons l (rng (inc l) u))))","user":"53acaf1fe4b047364c04445f"},{"problem":34,"code":"#(map (fn [i] (+ i %2)) (take (- %3 %2) %1)) '(0 1 2 3)","user":"55b22c33e4b0da326a65cf79"},{"problem":34,"code":"(fn my-range [start end]\n  (if (= start end) '()\n    (conj (my-range (inc start) end) start)))","user":"56889672e4b0dcc4269f406c"},{"problem":34,"code":"(fn generate-range [a b] (if (= a b) '() (cons a (lazy-seq (generate-range (inc a) b)))))","user":"5654e024e4b0f9d632dd848d"},{"problem":34,"code":"#(loop [a % ret []]\n   (if (= a %2)\n     ret\n     (recur (inc a) (conj ret a))))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn [from to]\n  (letfn [(count-up [start] (cons start (lazy-seq (count-up (inc start)))))]\n    (take-while #(< % to) (count-up from))))","problem":34,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn [s e] (loop [xs [] c s] (if (< c e) (recur (conj xs c) (inc c)) xs)))","problem":34,"user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn rng [l r]\r\n  (cond\r\n    (= l r) ()\r\n    (< l r) (cons l (rng (inc l) r))))","problem":34,"user":"4dd52e29535dae65d5c462e5"},{"problem":34,"code":"(fn [start stop] \n  (take (- stop start) (iterate inc start))\n  )","user":"58047205e4b0a837a8b30ca9"},{"code":"(fn [mn mx]\r\n  ((fn [cmin acc]\r\n\t    (if (= cmin mx)\r\n\t      acc\r\n\t      (recur (inc cmin) (conj acc cmin))\r\n\t    )) \r\n   mn []))","problem":34,"user":"4e9528ef535dbda64a6f6b32"},{"code":"#(take (- %2 %1) (iterate inc %1))\n\n;(fn [min max]\n;  (loop [total-range []\n;         current-min min]\n;    (if (= current-min max)\n;      total-range\n;      (recur (conj total-range current-min) (inc current-min)))))\n\n;; #(take-while (partial > %2) (iterate inc %))\n;; #(take (- %2 %1) (iterate inc %1))","problem":34,"user":"503f4759e4b00d1a725ff2a9"},{"problem":34,"code":"(fn func [init stop]\n   (loop [itt init\n          result []]\n  (if (< itt stop )\n   (recur (inc itt) (conj result itt))\n   result)))","user":"55c2367ee4b0e31453f64978"},{"code":"#(take-while (partial >= (dec %2)) (iterate inc %1))","problem":34,"user":"50052d38e4b0678c553fc45c"},{"problem":34,"code":"(fn range' [a b] (if (< a b) (cons a (range' (inc a) b)) '()))","user":"55041b5ee4b086ebe8a79c78"},{"code":"(fn my-range [current maximum]\r\n  (if (= current maximum)\r\n    []\r\n    (cons current \r\n      (my-range (inc current) maximum))))","problem":34,"user":"4f20c040e4b0d66497709fcb"},{"problem":34,"code":"(fn my-range [x end]\n  (loop [index x result[]]\n    (if (< index end)\n        (recur (inc index) (conj result index))\n        result)))","user":"5546704be4b0a04f7929953d"},{"code":"(fn [st ed] (take (- ed st) (iterate inc st)))","problem":34,"user":"509fe759e4b08df8156e9e43"},{"code":"(fn [l r]\n  (reductions + (conj (repeat (- (dec r) l) 1) l)))","problem":34,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn [x y] (loop [i x result ()] (if (= i y) (sort result) (recur (inc i) (conj result i)))))","problem":34,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn f [x y] \n  (if (= x y)\n    []\n    (conj (f x (dec y)) (dec y))))","problem":34,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [start end]\n (let [my-range (fn rec[num] (cons num (lazy-seq (rec (inc num)))))\n \t   total    (- end start)]\n (take total (my-range start))\n )\n)","problem":34,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":34,"code":"(fn mr\n   ([s e]\n    (mr s e '()))\n   ([s e c]\n    (if (= s e) c\n        (mr (inc s) e (concat c [s])))))","user":"54fce8bde4b07d26eda61d30"},{"code":"(fn [coll low high]\n  (if (= low high)\n    coll\n    (recur (conj coll low)\n           (inc low)\n           high))) []","problem":34,"user":"53862316e4b06839e8705f0e"},{"problem":34,"code":"#(for [element (iterate inc %1) :while (< element %2)] element)","user":"56cccd99e4b0ea9b8538f743"},{"problem":34,"code":"(fn my-rng [from ulim] (take-while #(< % ulim) (iterate inc from)))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"(fn rng\n  ([s] (cons s (lazy-seq (rng (inc s)))))\n  ([s m] \n   (take (- m s) (rng s))))","problem":34,"user":"4e77c1db535d324fb2983d72"},{"code":"#(reductions + % \n  (repeat (- %2 % 1) 1))","problem":34,"user":"50090fc7e4b0144d4f561e44"},{"problem":34,"code":"#(reverse (loop [n %1 ret ()] (if (>= n %2) ret (recur (inc n) (conj ret n)))))","user":"550345fee4b086ebe8a79c6c"},{"problem":34,"code":"(fn [start end]\n  (loop [position start\n         acc []]\n  (if (== position end)\n    acc\n    (recur (inc position) (conj acc position)))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":34,"code":"(fn [one two]\n(loop [x one y two total '()]\n  (if (< x y)\n    (recur (inc x) y (conj total x))\n    (reverse total))))","user":"54cbd6bae4b057c6fda3a282"},{"problem":34,"code":"(fn[x y]   \n(take  (- y x) (iterate inc x))\n  \n  )","user":"540e33dde4b0addc1aec671a"},{"code":"(fn [begin, end] \n  (take (- end begin) (iterate inc begin)))","problem":34,"user":"4f1abbfb535d64f60314646e"},{"problem":34,"code":"(fn [f t] (loop [f f t t s []] (if (= f t) s (recur (inc f) t (conj s f)))))","user":"4f0d6686535d0136e6c22318"},{"problem":34,"code":"(fn cr [x, y] (if (= x y) '() (concat [x] (cr (+ x 1) y))))","user":"54a7efdee4b09f271ff37c9d"},{"problem":34,"code":"(fn c[a,b] (map-indexed #(+ a %1 %2) (repeat (- b a) 0)))","user":"54e32090e4b024c67c0cf7d9"},{"problem":34,"code":"#(loop [in %1\n        out []]\n   (if (= in %2)\n     (seq out)\n     (recur (inc in) (conj out in))))","user":"5895385fe4b00487982d5279"},{"problem":34,"code":"(fn f [a b] (if (= a b) '() (conj (f (inc a) b) a)))","user":"53da70a4e4b0e771c302549d"},{"code":"(fn [i y] (loop [head [] tail (replicate (- y i) i)] \n            (if (empty? tail) \n              (concat head tail) \n              (recur (conj head (first tail)) \n                     (map inc (rest tail))))))","problem":34,"user":"513d121fe4b0e544971636a2"},{"code":"(fn myrange [start end]\n  (if (= start (- end 1))\n    (list start)\n    (cons start (myrange (inc start) end))\n    )\n  )","problem":34,"user":"5348236ee4b084c2834f4a54"},{"problem":34,"code":"(fn a[x y]\n  (if ( = x y )\n   \t'()\n    (cons x (a (+ x 1) y))))","user":"53e06f81e4b0d874e779ae4c"},{"problem":34,"code":"(fn f [x y]\n    (->>\n     (iterate #(+ % 1) x)\n     \t(take-while #(< % y))\n     \t\t(concat)))","user":"5a99b87ee4b0d174b936c7af"},{"code":"(fn [start end]\n   (loop [s start c ()]\n     (if (= s end)\n       (reverse c)\n       (recur (inc s) (conj c s)))))","problem":34,"user":"51fa90aae4b0f1313d4689e0"},{"problem":34,"code":"(fn [start end]\n  (loop [r []\n         i start]\n    (if (= i end)\n      r\n      (recur (conj r i) (inc i)))))","user":"576a972ce4b0a07e8fc1811a"},{"problem":34,"code":"#(->> (iterate inc %) (take (- %2 %)))","user":"55b39523e4b01b9910ae2973"},{"problem":34,"code":"(fn [a b]\n   (take (- b a) (iterate inc a))\n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":34,"code":"(fn r [x y] (if (>= x y) () (cons x (r (inc x) y))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":34,"code":"(fn xrange [b, e]\n  (loop [ i b acc '() ]\n\t(if (= e i)\n\t  ;; then\n\t  acc\n\t  ;; else\n\t  (recur (+ i 1)\n             (concat acc (list i))\n\t\t))))","user":"564cc055e4b0284900eef676"},{"problem":34,"code":"(fn [a b]\n    (loop [a a\n           acc '()]\n      (cond\n        (= a b) (reverse acc)\n        (< a b) (recur (inc a) (cons a acc)))))","user":"5600dccee4b04bb52996e175"},{"problem":34,"code":"(fn my-range [start end] (take (- end start) (iterate #(inc %) start)))","user":"54f2a1b8e4b024c67c0cf8cb"},{"code":"(fn [low high]\n  (let [range-1 (fn [c r]\n      (if (< c low) r (recur (dec c) (cons c r))))]\n    (range-1 (dec high) nil)))","problem":34,"user":"4e951f44535dbda64a6f6b30"},{"problem":34,"code":"(fn my-range\n  [start end]\n    (if (= end start)\n      '()\n      (cons start (my-range (inc start) end))))","user":"52ca7711e4b071a8d36bd3e3"},{"problem":34,"code":"#(take (Math/abs (- %2 %1))\n        (iterate inc %1))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [st end]\n   (take  (- end st ) (iterate inc st)))","problem":34,"user":"5273562ae4b03e8d9a4a7479"},{"problem":34,"code":"(fn [start end] (reduce (fn [coll _] (conj coll (+ start (count coll)))) [] (repeat (- end start) 1)))","user":"54094824e4b0addc1aec66da"},{"code":"(fn [m x]\n  (loop [i m a []]\n    (if (>= i x)\n      a\n      (recur (inc i) (conj a i)))))","problem":34,"user":"4e765170535d324fb2983d69"},{"code":"(fn !\n  ([s e]\n    (! [] s e))\n  ([c-l s e]\n   \n   (cond\n    \n    (= s e)\n    c-l\n    \n    :else\n    (! (conj c-l s) (+ 1 s) e)\n    \n    )))","problem":34,"user":"5323f4c6e4b09d4e7a9b54d4"},{"problem":34,"code":"(fn rng [a b]\n  (if (< a b)\n    (cons a (rng (inc a) b))\n    '()))","user":"53e6120de4b036ad0777e46c"},{"problem":34,"code":"(fn r [min max]\n  (when (not= min max)\n    (cons min (r (inc min) max))))","user":"5878fb4ee4b01531a375eac1"},{"problem":34,"code":"(fn rng [f t]\n  (if (< f t)\n    (cons f (rng (inc f) t))\n    `()\n    )\n  )","user":"55c4e30be4b0e31453f649a6"},{"problem":34,"code":"(fn range' [start stop] (if (= start stop) [] (cons start (range' (inc start) stop))))","user":"54d7ed8de4b0a52adc2e2034"},{"problem":34,"code":"(fn [start_at end_at]\n  (loop [coll [start_at]]\n    (if (= (last coll) (dec end_at))\n      coll\n      (recur (conj coll (inc (last coll))))\n)))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":34,"code":"(fn collapse \n  ([min max] \n     (collapse min max []))\n  ([min max, seq] \n    (if (= min (- max 1)) \n      [(- max 1)]\n      (cons min (collapse (+ 1 min) max seq)))))","user":"578fc3d2e4b0ebec4cfb759b"},{"problem":34,"code":"#(reverse (loop [a () m % n %2] (if (>= m n) a (recur (conj a m) (inc m) n))))","user":"52d9ba39e4b09f7907dd13af"},{"problem":34,"code":"(fn [start finish] \n  (loop [ans '() s start]\n    (if (= s finish)\n      (reverse ans)\n      (recur (conj ans s) (inc s)))))","user":"59368ccae4b02506e01a297a"},{"problem":34,"code":"(fn rng [start end]\n         (when (< start end)\n           (cons start (rng (inc start) end))))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [start finish]\n  (letfn\n  [\n    ( myRange[start finish resultSeq]\n      (\n        if\n        (= start finish)\n        resultSeq\n        (\n           myRange \n           (inc start) \n           finish\n           (conj resultSeq start)\n        ) \n      )\n    )\n  ]\n  (\n     myRange start finish []\n  )\n  )\n)","problem":34,"user":"51899ad2e4b0288ada3dbdac"},{"code":"(fn [start end]\n  (loop [result (vector start)]\n    (if (< (last result) (- end 1))\n      (recur (conj result (inc (last result))))\n      result)))","problem":34,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [mn mx] (let [range-recur (fn [n mx items]\n                                (if (= n mx)\n                                    items\n                                    (recur (inc n) \n                                           mx \n                                           (conj items n))))]\n                 (range-recur mn mx [])))","problem":34,"user":"504ee511e4b0e7ad84dbc4a4"},{"problem":34,"code":"(fn [x y]\n  (loop [start x\n         result ()]\n    (if (= y start)\n      (reverse result)\n      (recur (inc start)\n             (cons start result)))))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":34,"code":"(fn f [x y]\n    (if (= x y)\n      '()\n      (conj (f (inc x) y) x)\n    )\n  )","user":"5ab1665de4b073f1774425c0"},{"problem":34,"code":"(fn my-range [low high]\n  (letfn [(gen-range [current]\n            (lazy-seq (cons current (gen-range (inc current)))))]\n    (when (< low high)\n      (take-while #(not= % high) (gen-range low)))))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":34,"code":"(fn myrange\n  [start end]\n  (loop [traite '(), dernier start]\n    (if (>= dernier end)\n      (reverse traite)\n      (recur (conj traite dernier) (inc dernier))\n      )\n    )\n  )","user":"54410a71e4b032a45b869367"},{"code":"(fn ran\r\n  [r1 r2]\r\n  (if (>= r1 r2)\r\n    '()\r\n    (cons r1 (ran (inc r1) r2))))","problem":34,"user":"4f17ab99535d64f603146457"},{"problem":34,"code":"(fn [a b]\n  (loop [x a l '()]\n    (if (== x b) (reverse l)\n        (recur (inc x) (cons x l)))))","user":"5c950334e4b048ec896c5a44"},{"problem":34,"code":"(fn range-alt [start end]\n  (loop [s start\n         e end\n         a []]\n    (if (not= s e)\n      (recur (inc s) end (conj a s))\n      a\n      ))\n  )","user":"5b250773e4b063e2438bcc21"},{"problem":34,"code":"#(take (let [amount (- %1 %2)] (if (> amount 0) amount (* -1 amount))) (iterate inc %1))","user":"60ac91c5e4b00e9e6653c485"},{"problem":34,"code":"(fn [s e]\n  (letfn [(r [next remaining]\n            (if (<= remaining 0)\n              nil\n              (lazy-seq (cons next (r (inc next) (dec remaining))))))]\n    (r s (- e s))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":34,"code":"(fn [a b]\n  (loop [high (- b 1) l []]\n    (if (< high a)\n      l\n      (recur (dec high) (cons high l)))))","user":"53db43aae4b0e771c30254b1"},{"problem":34,"code":"(fn [start stop]\n  (loop [start start\n         coll-acc []]\n    (if (= start stop)\n      (seq coll-acc)\n      (recur (inc start) (conj coll-acc start)))))","user":"5e724492e4b085ba37836dc7"},{"problem":34,"code":"(fn [x y]\n    (loop [a x ret []]\n        (if (= a y)\n            ret\n            (recur (inc a) (conj ret a)))))","user":"561a1af6e4b053970a773b02"},{"problem":34,"code":"(fn [start end]\n  (loop [the-range [] position start]\n    (if (= position end)\n      the-range\n      (recur (conj the-range position) (inc position)))))","user":"5784ff88e4b0ebec4cfb74d4"},{"problem":34,"code":"(fn makeList [start end] (if (< start end) (conj (makeList (+ start 1) end) start) '() ))","user":"58669dd0e4b0f14aab7c8867"},{"code":"(fn [start end]\n  (loop [coll []\n       start start\n       end end]\n  (if (= end start)\n    (seq coll)\n    (recur (conj coll start) (inc start) end))))","problem":34,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"code":"(fn [n m]\r\n    (reverse (loop [cnt n result '()]\r\n       (if (= cnt m)\r\n  \t\tresult\r\n\t\t\t(recur (+ 1 cnt)\r\n\t\t\t\t(conj result cnt))\r\n\t\t)\r\n\t)))","problem":34,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn rng [a b]\n  (if (= a b)\n    nil\n    (cons a (rng (inc a) b))))","problem":34,"user":"524ad140e4b09eba1c0223a9"},{"problem":34,"code":"(fn [start end]\n  (loop [i start a '()]\n    (if (= i end)\n      a\n      (recur (+ 1 i) (concat a (list i))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":34,"code":"(fn  [x y]                                                                          \n        (loop [begin x                                                                             \n               lst []]                                                                             \n          (if (< begin y)                                                                          \n            (recur (inc begin) (conj lst begin))                                                   \n            lst)))","user":"5423dc6ae4b01498b1a71ad5"},{"problem":34,"code":"(fn [start end]\n  (loop [x start acc '()]\n    (cond\n     (= x end) (reverse acc)\n     :else (recur (inc x) (cons x acc)))))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn [l h]\n  (loop [c l r []]\n    (if (>= c h) r\n        (recur (inc c) (conj r c)))))","problem":34,"user":"4fae258de4b081705acca246"},{"problem":34,"code":"(fn [s f]\n  (loop [acc [] start s]\n    (if (< start f)\n      (recur (conj acc start) (inc start))\n      acc\n      )\n    \n    )\n  \n  )","user":"55f8fd70e4b03cbcff9738bc"},{"code":"#(loop [curr %\n         l []]\n    (if (= curr %2)\n      l\n      (recur (inc curr) (conj l curr))))","problem":34,"user":"52d6120ee4b09f7907dd134c"},{"problem":34,"code":"(fn [a b]\n  (loop [x a acc []]\n    (if (< x b)\n      (recur (inc x)(conj acc x))\n      acc)))","user":"5db658ebe4b010eb3c36cd39"},{"code":"#(loop [a %1 b %2 s []]\n     (if (>= a b)\n         s\n         (recur (inc a) b (conj s a))))","problem":34,"user":"501fa1aee4b0cb6ebc0a42eb"},{"problem":34,"code":"(fn r [a b]\n  (if (> b a)\n    (lazy-seq \n     (cons a\n        (r (inc a) b)\n      )\n    )\n   )\n )","user":"5bc833a5e4b07a9b28b100bb"},{"problem":34,"code":"(fn [x y]\n         (loop [x x\n                r []]\n           (if (= x y)\n             (seq r) \n             (recur (inc x) (conj r x)))))","user":"4dcc024e535d5973398f928f"},{"problem":34,"code":"(fn my-range\n  ([start end] (my-range start end []))\n  ([start end xs]\n   (if (>= start end)\n     xs\n     (my-range (inc start) end (conj xs start)))))","user":"5a37b6dbe4b001c08efc0c88"},{"code":"(fn myrange [x y]\n  (if (>= x y)\n    nil\n    (cons x (myrange (inc x) y))))","problem":34,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"(fn [start stop] \r\n          (loop [x start\r\n                 coll []]\r\n            (if-not (< x stop)\r\n              coll\r\n              (recur (inc x) (conj coll x)))))","problem":34,"user":"4f07ad89535dcb61093f6c2a"},{"problem":34,"code":"(fn foo[x y]\n    \n    (take  (- y x) (iterate #(+ 1 %) x))\n    \n)","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"(fn [f n]\n  (loop [current f lst ()]\n    (if (= current n)\n       (into '() lst)\n      (recur (+ current 1) (cons current lst))))\n  \n  )","problem":34,"user":"516eb196e4b06aac486e5b2e"},{"code":"(fn [ns nf] (take (- nf ns) (iterate inc ns)))","problem":34,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":34,"code":"(fn rng [s e] (if (= s e) () (cons s (rng (inc s) e))))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [low high]\n  (loop [acc []\n         n low]\n    (if (= n high)\n      acc\n      (recur (conj acc n) (inc n)))))","problem":34,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn range2 [begin end]\r\n  (loop [i begin\r\n         lst '()]\r\n    (if (= i end)\r\n      (reverse lst)\r\n      (recur (inc i) (conj lst i)))))","problem":34,"user":"4dcbb035535d5973398f928d"},{"problem":34,"code":"(fn range-list [start end]\n  (take (- end start) (iterate inc start)))","user":"58e965b3e4b056aecfd47d08"},{"code":"(fn [a b]\n  ((fn [x y aux]\n    (cond  \n      (= x y) aux              \n      :else (recur (inc x) y (conj aux x)))) a b []))","problem":34,"user":"52606318e4b03e8d9a4a7036"},{"code":"(fn my-range[start finish]\n   (when (< start finish)\n   \t(cons start (lazy-seq (my-range (inc start) finish)))))","problem":34,"user":"51843616e4b02826a645f398"},{"problem":34,"code":"(fn [a b] \n  \t(take (- b a)\n    \t(iterate inc a)))","user":"58c4492be4b021aa9917ed27"},{"problem":34,"code":"(fn [from to]\n  ((fn iter [from to res]\n    (if (= from to) res (iter from (dec to) (conj res (dec to))))\n    ) from to ())\n  )","user":"60471241e4b02d28681c77c9"},{"problem":34,"code":"(fn [a b]\n  (let [current (atom a) res (atom [])]\n    (\n      while (< @current b)\n      (\n        do\n\n          (reset! res (conj @res @current))\n          (reset! current (inc @current))\n\n        )\n      )\n    @res\n    )\n  )","user":"5c1229d5e4b01240ff567188"},{"code":"(fn myrange [a b]\n  (if (< a b)\n    (cons a (myrange (inc a) b))\n    nil))","problem":34,"user":"4fa4ef2ee4b081705acca1a9"},{"problem":34,"code":"(fn rr\n  ([to] (rr 0 to))\n  ([from to]\n   (loop [f from\n          acc []]\n     (if (== f to)\n       (seq acc)\n       (recur (inc f) (conj acc f))))\n   )\n  )","user":"5f65bdfde4b02876ed9fd025"},{"code":"(fn f [x y]\n  (let [z x]\n  \t(when (and (>= z x) (< z y))\n      (conj (f (+ 1 z) y) z))))","problem":34,"user":"51b74a33e4b0d906fcd71d34"},{"problem":34,"code":"(fn [x y]\n  (loop [i x result []]\n    (cond \n     (= i y) result\n     :else (recur (inc i) (conj result i)))))","user":"5f6c331ae4b02876ed9fd054"},{"problem":34,"code":"(fn [a b] (loop [coll    []\n                 current a\n                 end     b] \n            (if (= current end)\n              coll\n              (recur (conj coll current) (inc current) end))))","user":"5f6796d2e4b02876ed9fd036"},{"problem":34,"code":"(fn [a b]\n  (reverse\n   (loop [i a res '()]\n     (if (= i b)\n       res\n       (recur (+ i 1) (cons i res))))))","user":"577a74f7e4b0d3393e5deafa"},{"problem":34,"code":"(fn [from to]\n                                (loop [f from acc '()]\n                                  (if (= f to)\n                                    (reverse acc)\n                                    (recur (inc f) (conj acc f)))))","user":"5f86a98be4b0649ffcda4caa"},{"code":"#(loop [a %1\n         acc '()]\n    (if (= a %2)\n      (reverse acc)\n      (recur (inc a) (cons a acc))))","problem":34,"user":"533d2ea5e4b085b17e897d7a"},{"problem":34,"code":"(fn [s e]\n  (loop [c (dec e)\n         res '()]\n    (if (< c s)\n      res\n      (recur (dec c) (conj res c)))))","user":"553f70cae4b0a04f792994f8"},{"problem":34,"code":"(fn [start end]\n  (map #(+ start %) (take (- end start) (iterate inc 0))))","user":"5a84cf8de4b00b71e582a095"},{"problem":34,"code":"(fn [x, y]\n  (loop [x x, y y, res '()]\n    (if (= x y)\n      (reverse res)\n      (recur (inc x) y (conj res x)))))","user":"593d6793e4b069cdc2982ba6"},{"code":"(fn new-range [lower upper]\n  (if (= lower upper)\n    (empty [])\n    (cons lower (new-range (inc lower) upper))))","problem":34,"user":"4f0324d2535dcb61093f6a69"},{"problem":34,"code":"(fn [a b]\n  (loop [aa a\n         ret []]\n    (if (= aa b)\n      ret\n      (recur (inc aa)\n             (conj ret aa)))))","user":"58d9772de4b0a4d5acaab63c"},{"code":"(fn [f s]\n  (let [d (if (< f s) 1 -1)] \n    (loop [next (+ f d)\n           acc (list f)]\n      (if (= next s)\n        (reverse acc)\n        (recur (+ next d) (conj acc next))))))","problem":34,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn rng [lo hi] (if (= lo hi) () (cons lo (rng (+ lo 1) hi))))","problem":34,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn [a b]\n  (loop [s [a]]\n    (let [i (inc (peek s))]\n    (if (< i b)\n      (recur (conj s i))\n      s))))","problem":34,"user":"511c91ace4b00c2a1fa7ff7a"},{"problem":34,"code":"(fn [low hi] (loop [x low o []]\n               (if (= x hi)\n                 o\n                 (recur (inc x) (conj o x)))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn f [x y] (if (< x y) (conj  (f (inc x) y) x)))","problem":34,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [fro til]\n  ((fn foo [s cur til]\n    (if (< cur til)\n      (foo (conj s cur) (inc cur) til)\n      s)) [] fro til))","problem":34,"user":"524ab5f2e4b09eba1c02239d"},{"code":"(fn [start end]\n  (take (- end start) (iterate (fn [x] (+ 1 x)) start)))","problem":34,"user":"532b930be4b09d4e7a9b5534"},{"problem":34,"code":"(fn my-range\n  ([from to] (my-range from to '()))\n  ([from to out]\n  \t(cond\n      (= from to)\tout\n   \t  true\t\t    (recur (inc from) to (concat out [from]))\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":34,"code":"(fn [start stop]\n  (loop [iter start\n         acc []]\n    (if (= iter stop)\n      acc\n      (recur (inc iter) (conj acc iter)))))","user":"5e7fb908e4b085ba37836e3f"},{"problem":34,"code":"(fn [i j] (take (- j i) (iterate #(+ 1 %) i)))","user":"58334d18e4b089d5ab817c97"},{"problem":34,"code":"(fn rng\n  [start end]\n  (take (- end start) (iterate inc start)))","user":"5609d328e4b05f002753deee"},{"code":"(fn list-maker [strt nd] (if (= strt nd) nil (concat [strt] (list-maker (inc strt) nd))))","problem":34,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":34,"code":"(fn [s e]\n  (loop [x [s]]\n    (if-not (< (last x) (- e 1)) x \n      (recur (conj x (+ (last x) 1))) ) ))","user":"514504c2e4b021a5ff8301fc"},{"problem":34,"code":"(fn [start end]\n   (loop [current start result '()]\n     (if (>= current end)\n       (reverse result)\n       (recur (inc current) (conj result current)))))","user":"57958dace4b0e215f87e8484"},{"code":"(fn [start end] (loop\n                   [result []\n                    i start\n                    ]\n                   (if (>= i end) result\n                     (recur (conj result i) (inc i))\n                     )\n                   ))","problem":34,"user":"534d1173e4b084c2834f4a98"},{"code":"(fn range* [lower upper] \n  (when (< lower upper)\n    (lazy-seq (cons lower (range* (inc lower) upper)))))","problem":34,"user":"52d0902ee4b07d0d72b273bd"},{"code":"(fn r [a z] (if (>= a z) () (conj (r (+ a 1) z) a)))","problem":34,"user":"50d242c0e4b06ad58337ed0f"},{"code":"(fn [start stop] (let [n (java.lang.Math/abs (- start stop))] (take n (iterate inc start))))","problem":34,"user":"506929ffe4b01dc6af13f82b"},{"code":"(fn [start stop]\n  (reverse (reduce (fn [a x] (conj a (inc (first a))))\n          (list start)\n          (take (dec (- stop start)) (repeat start)))))","problem":34,"user":"5175616ae4b0dea9bbfba576"},{"code":"#((fn rang [a b]\n  (if (= (inc a) b)\n\t\t(list a)\n\t\t(cons a (rang (inc a) b)))) %1 %2)","problem":34,"user":"4ee91d00535d93acb0a6688b"},{"code":"(fn [m n]\n  (loop [current m \n         coll '()]\n  \t(if (= current n)\n      (reverse coll)\n      (recur (inc current) (cons current coll)))))","problem":34,"user":"50da34e4e4b0f31830755b3c"},{"problem":34,"code":"(fn rng\n  [a b]\n  (loop [start a\n         lst '()]\n    (if (= start b)\n      (reverse lst)\n      (recur (inc start) (cons start lst)))))","user":"57f81534e4b0d3187e900915"},{"problem":34,"code":"(fn range' [x y] (if (< x y) (apply list x (range' (+ 1 x) y)) '()))","user":"54d03026e4b018d918be98de"},{"code":"#(loop [n %1 acc ()]\n  (if (= n %2)\n    (reverse acc)\n    (recur (inc n) (cons n acc))))","problem":34,"user":"4f58de86e4b0a7574ea7185b"},{"problem":34,"code":"(fn [start end]\n  (loop [start start end end result []]\n      (if (>= start end)\n        result\n        (recur (inc start) end (conj result start)))))","user":"57606cfde4b08062f99a4e95"},{"problem":34,"code":"(fn myrange [x y]\n  (if (= x y)\n    '()\n    (conj (myrange (inc x) y) x)))","user":"5757ba87e4b02ea1147992f9"},{"code":"(fn [a b]\n  (loop [coll []\n         x a]\n    (if (>= x b)\n      coll\n      (recur (conj coll x) (inc x)))))","problem":34,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":34,"code":"(fn rang [x y]\n  (if (= x y)\n    ()\n    (concat (list x)\n            (rang (inc x) y))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"(fn fun11 [x k]\n(let [t (take (- k x) (iterate inc 1))]\n  (for [i t] (+ x (- i 1))\n  )\n)\n)","problem":34,"user":"52132f8de4b0d32679a50651"},{"code":"(fn [x y]\r\n     (loop [a x, c []]\r\n\t      (if (< a y)\r\n    \t\t  (recur (+ a 1) (conj c a))\r\n\t\t      (seq c))))","problem":34,"user":"4db342d7535df7e46ed9b6cd"},{"problem":34,"code":"(fn [lb ub]\n  (take (- ub lb) (iterate inc lb)))","user":"5faece16e4b08cb800c85b02"},{"problem":34,"code":"(fn [start end]\n  (loop [i start, coll []]\n    (if (< i end)\n        (recur (inc i) (conj coll i))\n        coll)))","user":"567695c2e4b05957ce8c6157"},{"problem":34,"code":"(fn [s f] (\n  loop [x (dec f) acc '()]\n    (if (>= x s) \n      (recur (dec x) (conj acc x))\n      acc )\n))","user":"57ec8d1de4b0bfb2137f5b7f"},{"problem":34,"code":"(fn [& s] \n(loop [r [] f (first s) l (last s)]\n(if (< f l) \n(recur (conj r f) (inc f) l) \nr\n)\n))","user":"560331dee4b04bb52996e1b5"},{"problem":34,"code":"(fn [start end]\n  (loop [start start end end acc []]\n    (if (>= start end)\n      acc\n      (recur (inc start) end (conj acc start))\n    )\n  )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn my-range [a b]\n  (if (>= a b)\n    '()\n    (cons a (my-range (inc a) b))))","problem":34,"user":"530bf87ee4b02e82168697d5"},{"problem":34,"code":"(fn rang\n  ([n end] (rang n end []))\n  ([n end accum]\n   (if-not (= n end)\n     (rang (inc n) end (conj accum n))\n     (identity accum))))","user":"56f9890be4b07572ad1a88b5"},{"code":"(fn my-range [x y] (if (> y x)\n                          (conj (my-range (+ x 1) y) x)\n                          '()\n                          ))","problem":34,"user":"5296aa9be4b02ebb4ef75034"},{"problem":34,"code":"(fn myrange [start stop] \n  (let [f \n        (fn fun \n          ([] (fun start)) \n          ([n] (concat [n] (lazy-seq (fun (inc n)))))\n          )] (take-while #(< % stop) (f))))","user":"54de7948e4b024c67c0cf7a4"},{"problem":34,"code":"(fn [a b]\n  (loop [a   a\n         acc []]\n    (if (= a b)\n      acc\n      (recur (inc a) (conj acc a)))))","user":"596b5f27e4b069c0a1a19813"},{"code":"(fn ranger\n  ([start end] (ranger start end '()))\n  ([current end result]\n    (if (= current end)\n      result\n      (conj (ranger (inc current) end result) current))))","problem":34,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":34,"code":"(fn ran [s e] (if (< s e) (cons s (ran (inc s) e))))","user":"5bc20634e4b07a9b28b10022"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (if (= start end)\n    []\n    (cons start (my-range (inc start) end))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":34,"code":"(fn [x y] (loop [x x, y y, s []] (if (< x y) (recur (inc x) y (conj s x)) s)))","user":"5453b522e4b0e397800069d0"},{"code":"(fn [start end]\n  (let [\n        delta (- end start)\n        incs (repeat (- delta 1) 1)\n        add-inc (fn [lst d] (conj lst (+ d (last lst))))\n        ]\n    (reduce\n     add-inc\n     [start] incs)))","problem":34,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [a b]\n  (letfn [(-range [a b]\n                 (lazy-seq\n                  (if (= a b)\n                    nil\n                    (cons a (-range (inc a) b)))))]\n    (-range a b)))","problem":34,"user":"529f71aae4b04e0c58e87bac"},{"code":"(fn [start end]\n  (loop [res () i start]\n    (if (>= i end) (sort res)\n    (recur (cons i res) (inc i)))\n   )\n  )","problem":34,"user":"5167e4a2e4b0c5a4140a3099"},{"code":"(fn [lo hi] (loop [a [], i lo]\n  (if (>= i hi)\n    a\n    (recur (conj a i) (inc i)))))","problem":34,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":34,"code":"(fn [start stop] \n  (loop [i start lst []]\n    (if (< i stop) (recur (inc i) (conj lst i)) lst)))","user":"52bc0dade4b07a9af57922f1"},{"problem":34,"code":"(fn rg [init end]\n  (if (= init (- end 1)) (list init)\n    (cons init (rg (+ 1 init) end))))","user":"58681bf0e4b0f14aab7c888a"},{"problem":34,"code":"(fn [from to]\n           (loop [fr from\n                  res []]\n             (if (< fr to)\n               (recur (inc fr) (conj res fr))\n               res)))","user":"5ab575f8e4b073f17744263d"},{"code":"(fn rr[strt, stp] \n  (if (= strt stp) '() (cons strt (rr (+ strt 1) stp))))","problem":34,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":34,"code":"(fn [n m]\n        (take (- m n) (iterate inc n)))","user":"56df6351e4b0ca2494a095f3"},{"problem":34,"code":"#(loop [x % result []]\n\t(if (= x %2)\n\t\tresult\n\t\t(recur (inc x) (conj result x))))","user":"528d6b10e4b0239c8a67aec3"},{"code":"(fn r [a b]\n  (cons a (when (< a (dec b))\n            (r (inc a) b))))","problem":34,"user":"52ce2aace4b07d0d72b2738b"},{"problem":34,"code":"(fn [a b]\n  (let [y (atom -1)]\n    (for [x (repeat (- b a) a), :let [y (swap! y inc)]] (+ x y) )))","user":"54344721e4b0b6b47310fcea"},{"problem":34,"code":"(fn [from to]\n     (let [diff (- from to)\n           n (max diff (- diff))]\n       (take n (iterate inc from))))","user":"5d89427ae4b0915913b1d3b5"},{"problem":34,"code":"(fn _range [start end]\n   ((fn build_range [_series _start _end]     \n     (condp  = _start\n       _end _series\n       (build_range (conj _series _start) (inc _start) _end))\n     ) [] start end))","user":"60a7c55be4b00e9e6653c468"},{"problem":34,"code":"(fn\n  [s e]\n  (loop [ss s\n         v []] \n    (if (> e ss) \n      (recur (inc ss) (conj v ss))\n      v)))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":34,"code":"(fn [s e] (reduce #(conj %1 (+ (last %1) %2)) [s] (repeat (- e s 1) 1)))","user":"549c3e0ce4b0f3d1d8e70f87"},{"problem":34,"code":"(fn r [a b]\n\t(if (= a b)\n    \t[]\n    \t(concat [a] (r (inc a) b))\n    )\n)","user":"5a214798e4b0ff51aa4b32aa"},{"code":"(fn my-range [lo hi]\n  (if (= lo hi) ()\n      (conj (my-range (inc lo) hi) lo)))","problem":34,"user":"4fe8d862e4b0547ebccb2428"},{"code":"#(take (- %2 %1) ( iterate inc %1 ))","problem":34,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":34,"code":"(fn [x y]\n  (loop [res []\n         x x\n         y y]\n    (if (>= x y)\n      res\n      (recur (conj res x) (inc x) y))))","user":"5c8005cee4b0c8042a70ce0a"},{"problem":34,"code":"(fn line\n      ([from to]\n      (line (+ from 1) to (list from)))\n     ( [from to n]\n      (if (= from to) (reverse n) (line (+ from 1) to (conj n from)))))","user":"5c73a944e4b0fca0c16227b8"},{"code":"#(loop [a % b %2 c []]\n  (if (= a b)\n      c\n      (recur (inc a) b (conj c a))))","problem":34,"user":"4dfd018c535d04ed9115e77f"},{"problem":34,"code":"#(loop [r [] i %1] (if (= i  %2) r (recur (conj r i) (inc i))))","user":"5505d137e4b086ebe8a79c8c"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [s start e end result []]\n    (if (= s e)\n      result\n      (recur (inc s) e (conj result s)))))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [start start\n         end end\n         acc []]\n    (if-not (<= start end)\n      (butlast acc )\n      (recur (inc start) end (conj acc start)))) )","user":"59f44189e4b0966464fe6aab"},{"problem":34,"code":"(fn range' [low high]\n  (if (= low (dec high))\n    (list low)\n    (cons low (range' (inc low) high))))","user":"53217912e4b09d4e7a9b54b3"},{"problem":34,"code":"(fn rng [start stop]\n  (if (>= start stop)\n    '()\n    (cons start (rng (inc start) stop))\n    )\n  \n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":34,"code":"(fn [i n] (take (- n i) (iterate inc i)))","user":"556f2009e4b09a3098a52519"},{"problem":34,"code":"(fn make-range [start end]\n  (loop [coll '() s start]\n    (if (>= s end)\n      (reverse coll)\n      (let [coll (conj coll s)]\n        (recur coll (inc s))))))","user":"4fb85651e4b081705acca2d7"},{"code":"(fn [min max] (take (- max min) (iterate inc min)))","problem":34,"user":"4ec79f99535d6d7199dd36e4"},{"problem":34,"code":"(fn rng [m n]\n  (if (= m n)\n    nil\n    (cons m (rng (+ 1 m) n))))","user":"545801f6e4b01be26fd74615"},{"code":"(fn [min max]\n  (take-while #(< % max) (iterate inc min)))","problem":34,"user":"4dad8a6dc9a9d6ed1399dc57"},{"code":"(fn myrange [a b]\n  (loop [i (dec b) l '()]\n    (if (< i a) l (recur (dec i) (cons i l)))))","problem":34,"user":"4ecaaa25535d6d7199dd3708"},{"problem":34,"code":"(fn [a, b]\n (loop [n (dec b), r '()]\n  (if (< n a) r (recur (dec n) (conj r n)))\n))","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn  [inicio fin]\n  (loop [res() ini inicio]\n(if (< ini fin)\n(let [dato ini ](recur (conj res dato  ) (inc ini)) )\n(sort res)) ))","problem":34,"user":"50255bafe4b0b0b8afb15aa8"},{"code":"(fn rec [a b]\r\n  (lazy-seq\r\n    (if (>= a b)\r\n      ()\r\n      (cons a (rec (inc a) b)))))","problem":34,"user":"4dd62278535d2dad7130b5c7"},{"problem":34,"code":"(fn my-range                                                                     \n  ([x y] (reverse (my-range x '() y)))                                                             \n  ([x l y] (if (= x y) l (my-range (inc x) (conj l x) y))))","user":"534aa5d3e4b084c2834f4a6b"},{"problem":34,"code":"(fn [f t]\n  (loop [f f t t result '()]\n    (if (< f t)\n      (recur (inc f) t (cons f result))\n      (reverse result)\n    )\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"problem":34,"code":"(fn [start end]\n  (loop [result [] start start end end]\n    (if (< start end)\n      (recur (conj result start) (+ start 1) end)\n      result)))","user":"58a6806ee4b01a0c0b23292f"},{"problem":34,"code":"(fn [start end]\n  (loop [xs '()\n         x (dec end)]\n    (if (< x start)\n      xs\n      (recur (conj xs x) (dec x)))))","user":"5b64370ae4b0c6492753e73c"},{"problem":34,"code":"(fn [acc from to]\n  (if (= from to)\n    acc\n    (recur (conj acc (dec to)) from (dec to)))) '()","user":"59a72effe4b066c664927d94"},{"code":"(fn [x y]\n  (loop [i x, r []]\n    (if (= i y)\n      r \n      (recur (inc i) (conj r i)))))","problem":34,"user":"4fd1fa71e4b04c3a95aa0418"},{"code":"(fn [x y ] (take (- y x) (iterate inc x)))","problem":34,"user":"52ca9513e4b071a8d36bd3e4"},{"problem":34,"code":"(fn my-range [start, end]\n  (if (= start end) '()\n    (cons start (my-range (inc start) end))))","user":"6096d37be4b00e9e6653c3f0"},{"code":"(fn rng[a b](if (= b a) () (cons a (rng (+ 1 a) b))))","problem":34,"user":"4dbed096535d020aff1edf6b"},{"problem":34,"code":"(fn [mi ma]\n  (loop [x mi ma ma res '()]\n    (if (< x ma)\n      (recur (inc x) ma (concat res (list x)))\n      res\n      )\n    )\n  )","user":"56f188e9e4b04a395b9a0494"},{"code":"(fn range* [from to]\n  (if (<= to from)\n    '()\n    (cons from (range* (+ 1 from) to))))","problem":34,"user":"4e691c79535d8ccf87e9fe97"},{"code":"#(loop [l '() cnt (- %2 1)]\n      (if (= cnt (- %1 1))\n        l\n      (recur (conj l cnt) (dec cnt))))","problem":34,"user":"524da51ee4b0a16e35cf6df4"},{"code":"(fn [x y]\n   (loop [start x  rs '()]\n      (if (= start y)\n         (reverse rs)\n         (recur (inc start) (conj rs start)))))","problem":34,"user":"51cacda3e4b068dadb8f2227"},{"code":"(fn my-range [x y]\n  (loop [my-range '() x x]\n    (cond (= x y) (reverse my-range)\n    (> x y) '()\n      :else\n      (recur (cons x my-range) (inc x )))))","problem":34,"user":"504f5804e4b0a02f9cffde72"},{"problem":34,"code":"(fn [f e]\n     ((fn [coll x]\n          (if (>= x e)\n            coll\n            (recur (conj coll x) (inc x)))) [] f))","user":"5971a017e4b01722bebd4c75"},{"code":"(fn[a b] \n  (take (- b a) (iterate inc a)))","problem":34,"user":"52161028e4b0bf4bffd29cb4"},{"problem":34,"code":"(fn [initial stop]\n  (loop [result [] e initial]\n    (if (= e stop)\n      result\n      (recur (conj result e) (inc e)))))","user":"5f597522e4b0a0bc16850a9e"},{"code":"(fn [l r] (map-indexed #(+ %1 %2) (repeat (- r l) l)))","problem":34,"user":"4ecc147b535d23f0362276f7"},{"problem":34,"code":"#(loop [low %1, result []]\n  (if (>= low %2)\n   (seq result)\n   (recur (inc low) (conj result low))))","user":"5ecf4ee4e4b016b56eae05a6"},{"problem":34,"code":"#(loop [end (dec %2) acc ()]\n    (if (> %1 end) \n        acc\n        (recur (dec end) (cons end acc))))","user":"556f35fee4b09a3098a5251a"},{"code":"(fn [start end]\n  (take-while (partial > end) (iterate inc start)))","problem":34,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn[a b] (take (- b a) (iterate inc a)))","problem":34,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":34,"code":"(fn [low hi]\n  (loop [low low\n         out []]\n    (if (= low hi) \n      (seq out)\n      (recur (+ low 1) (conj out low)))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn [x y]\n  (take (- y x)(iterate inc x)))","problem":34,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":34,"code":"(fn f [x y] (if (= x y) '() (conj (f (+ x 1) y) x)))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn[a b](filter #(and (<= a %) (< % b)) (take 10 (iterate inc -2))))","problem":34,"user":"5093ca51e4b097f48cc38585"},{"code":"#(loop [cur %1 list []]\n   (if (= cur %2)\n     list\n     (recur (inc cur) (conj list cur))))","problem":34,"user":"522f988be4b032bbe3424168"},{"code":"(fn [start end]\n        (take (- end start) (iterate inc start)))","problem":34,"user":"537f6df1e4b06839e8705eb5"},{"problem":34,"code":"(fn [x y & rlist]\n  (cond\n    (= x y) rlist\n    (nil? rlist) (recur (+ x 1) y [x])\n    :else (recur (+ x 1) y (concat rlist [x]))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":34,"code":"(fn [start end]\n  (loop [xs nil\n         current start]\n    (if (= current end) (reverse xs)\n        (recur (cons current xs) (inc current)))))","user":"5146f343e4b04ef915e3731e"},{"code":"(fn [l h](take (- h l) (iterate inc l)))","problem":34,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":34,"code":"(fn [st,fn] (take (- fn st) (iterate inc st)))","user":"57eb7a97e4b0bfb2137f5b62"},{"code":"(fn [lo hi] (take (- hi lo) (iterate inc lo)))","problem":34,"user":"506ba58be4b0eda3100c090b"},{"problem":34,"code":"#(loop[i %1, r '()]\n   (if(= i %2)\n     (sort r)\n     (recur(inc i)(cons i r))))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn [start end] (loop [i start acc '()]\n\t  (if (= i end)      \n      acc      \n\t    (recur (inc i) (concat acc [i]))\n      \n    )\n))","problem":34,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":34,"code":"(fn\n   [beg end]\n   (loop [sofar []\n          x beg\n          y end]\n     (if (= x y)\n       sofar\n       (recur (conj sofar x) (inc x) y))))","user":"53d6b266e4b0e771c3025459"},{"problem":34,"code":"#(loop [i %1 r []] (if (< i %2) (recur (inc i) (conj r i)) r))","user":"5628cb07e4b00e49c7cb47ef"},{"problem":34,"code":"#((fn myRange [lb ub res] (if (>= lb ub) res (myRange (inc lb) ub (conj res lb)))) %1 %2 [])","user":"56ffeafee4b08d47c97781c2"},{"problem":34,"code":"(fn f [x y] (if (not= x y) (cons x (f (inc x) y))))","user":"5405ae2be4b0addc1aec6671"},{"problem":34,"code":"(fn [first last]\n    (loop [i first lst '()]\n        (if (= i last)\n            (reverse lst)\n            (recur (inc i) (cons i lst)))))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"(fn [start end] (take-while #(not (= % end)) (iterate inc start)))","problem":34,"user":"526397f1e4b03e8d9a4a70b6"},{"code":"(fn yeah [x y] (if (< x y) (cons x (yeah (inc x) y)) []))","problem":34,"user":"4e1e7f88535d04ed9115e808"},{"code":"(fn [m n]\n  (let [a (atom (dec m))]\n    (repeatedly (- n m) #(swap! a inc))))","problem":34,"user":"52cb6bb0e4b07d0d72b2734c"},{"problem":34,"code":"(fn [start end] (loop [x start\n                       acc []]\n                  (if (= x end)\n                    acc\n                    (recur (inc x) (conj acc x)))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":34,"code":"(fn hi [num1 num2]\n  (cond (= num1 num2) '()\n        :else (cons num1 (hi (+ num1 1) num2))))","user":"5e663073e4b0fd0acd1586bc"},{"code":"(fn my-range\n  ([low high] (my-range low high []))\n  ([low high result]\n    (if (= low high)\n      result\n      (my-range (inc low) high (conj result low)))))","problem":34,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":34,"code":"(fn mrange ([ss sn] (loop [xs '() s ss n sn] (if (= n s) (reverse xs) (recur (cons s xs) (inc s) n)))))","user":"5900d5cde4b0438e51c2d02e"},{"code":"#(loop [x %1 a []]\n   (if (= x %2)\n     a\n     (recur (inc x) (conj a x))))","problem":34,"user":"4f32a7f1e4b0d6649770a095"},{"problem":34,"code":"(fn my-range [x y]\n  (if (< x y)\n    (cons x (my-range (inc x) y))))","user":"5b61279ce4b0c6492753e70e"},{"code":"(fn a[l h](when (< l h) (cons l (a (inc l) h))))","problem":34,"user":"525493bbe4b0541d1855b991"},{"problem":34,"code":"(fn [start end]\n  (loop [xs\t\t[]\n         index\tstart]\n    (if (>= index end)\n      xs\n      (recur (conj xs index) (+ index 1)))))","user":"5468033ee4b00cfc9eacc133"},{"problem":34,"code":"#(let [start %1] \n   (loop [end (dec %2)\n          result '()] \n     (if (not (> start end)) (recur (dec end) (conj result end)) result)\n   ))","user":"5c481764e4b0e06e1360a3ba"},{"code":"(fn r [x y]\n  (if (< x y) (conj (r (+ 1 x) y) x) '()))","problem":34,"user":"4f74271ae4b044e54cd9a8f6"},{"problem":34,"code":"#(loop [inici %1 final %2 result '()]\n   (if (= inici final)\n     result\n     (recur inici (dec final) (cons (dec final) result))))","user":"5745b884e4b009280f9f2b53"},{"problem":34,"code":"#(take (- %2 %1)(iterate (partial + 1) %1))","user":"54f86b8ce4b01ecee9d88828"},{"problem":34,"code":"#(take\n  (-%2%1)\n  (iterate inc %1))","user":"6085edade4b0736b099e42fc"},{"problem":34,"code":"#(let [x %1 y %2] (take (- y x) (iterate inc x)))","user":"550851cde4b021ccfedb96b7"},{"code":"(fn  [from to]\n   (loop [start from\n           accum [] ]\n      (if (= to start)\n         accum\n        ( recur (inc start)(conj accum start))\n      )\n    )\n  )","problem":34,"user":"52dced9de4b09f7907dd13d7"},{"problem":34,"code":"#(loop [i %1\n        result []]\n   (if (>= i %2)\n     result\n     (recur (inc i)\n            (conj result i))))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":34,"code":"#(loop [ l '()\n          c (dec %2)]\n    (if (>= c %1)\n      (recur (cons c l) (dec c))\n      l)\n    )","user":"522724bde4b04e78ff2e19aa"},{"problem":34,"code":"(fn ranger [start end]\n   (if (< start end)\n     (cons start (ranger (inc start) end))\n     ()))","user":"582625d3e4b051871117bef2"},{"code":"#(loop [x %1 y %2 l ()]  (if (= x y) (reverse l)  (recur (inc x) y (into l (list x)))))","problem":34,"user":"537d6d44e4b06839e8705e8c"},{"code":"(fn [x y]\n  (loop [cnt x ret []]\n    (if (= cnt y) ret\n(recur (inc cnt) (conj ret cnt)))))","problem":34,"user":"4fdf5403e4b05e33b9224f98"},{"code":"(fn my-range [low high]\n  (if (<= high low)\n    ()\n    (cons low (my-range (inc low) high))))","problem":34,"user":"4eecc9ad535d93acb0a668b4"},{"code":"(fn myrange [s-init e]\r\n  (loop [xs [], s s-init]\r\n    (if (= s e)\r\n      xs\r\n      (recur (conj xs s) (inc s)))))","problem":34,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [beg end] (loop [a beg, b end, l []]\n                (if (< a b)\n                  (recur (inc a) b (conj l a))\n                  (seq l))))","problem":34,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn [ low high ]\n  (loop[i low v []]\n    (if (< i high)\n      (recur (inc i) (conj v i))\n      v )))","problem":34,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":34,"code":";(fn rng [%1 %2]\n; (if (= %1 %2) '()\n;   (cons %1 (rng (inc %1) %2))))\n\n#(take (- %2 %1) (iterate inc %1))","user":"55e1fc42e4b050e68259b424"},{"problem":34,"code":"(fn [low high]\n  (loop [curr low\n         res []]\n  \t(if (>= curr high)\n      (seq res)\n      (recur (inc curr) (conj res curr))\n    )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":34,"code":"#(map-indexed + ((fn [a b] (repeat (- b a) a)) %1 %2))","user":"53a2be95e4b0f1fc7453882d"},{"code":"(fn my-range [actual max]\n  (if (< actual max)\n    (cons actual (my-range (inc actual) max) )))","problem":34,"user":"4f038ed6535dcb61093f6b24"},{"problem":34,"code":"(fn myr [start end] \n    (if (< start end)\n      (concat (list start) (myr (+ start 1) end))      \n      (list)\n      )\n    )","user":"54cb3497e4b057c6fda3a272"},{"problem":34,"code":"(fn [low high]\n  (loop [l low h high r []]\n    (if (< l h)\n      (recur (inc l) h (conj r l))\n      r\n    )\n    ))","user":"5fe75ecfe4b05ac5b16ea18d"},{"code":"(fn r [a b]\n  (if (< a b)\n    (cons a (r (inc a) b))\n    []))","problem":34,"user":"4e2b1d48535deb9a81d77f03"},{"problem":34,"code":"(fn[a b](loop [iter a acc  []]\n           (if (= iter b)\n             acc\n             (recur (inc iter)(conj acc iter)))))","user":"53ada652e4b047364c04446d"},{"problem":34,"code":"(fn [start top] (take (- top start) (iterate inc start)))","user":"540459bfe4b0addc1aec6656"},{"code":"(fn [start, finish]\n  (take (- finish start) (iterate inc start)))","problem":34,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [start stop]\n  (take-while #(< %1 stop) (iterate inc start)))","problem":34,"user":"52950ab6e4b02ebb4ef7501a"},{"problem":34,"code":"#(reverse (loop [mr ()\n                  val %1]\n             (if (= val %2)\n               mr\n               (recur (conj mr val) (inc val)))))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":34,"code":"(fn [s e]\n   (loop [rng (- e s) \n          res [s]]\n     (if (= rng 1)\n       res\n       (recur (- rng 1) (conj res (+ (last res) 1))))))","user":"586b1482e4b0f14aab7c88cf"},{"problem":34,"code":"(fn [x y] (loop [coll '() n x] (if (= (count coll) (- y x)) (reverse coll) (recur (cons n coll) (inc n)))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn f \n  [x y]\n  (loop [i x coll []]\n    (if (< i y)\n      (recur \n        (inc i)\n        (conj coll i))\n      coll)))","problem":34,"user":"50aa60bee4b056ee01935865"},{"code":"(fn [s e]\n((fn [i acc]\n  (if (= i e) acc (recur (+ i 1) (conj acc i)))) s []))","problem":34,"user":"4fa1183fe4b0dcca54ed6d57"},{"code":"(fn [a b]\n  (loop [t (dec b) s ()]\n    (if (< t a)\n      s\n      (recur (dec t) (cons t s)))))","problem":34,"user":"50b9d991e4b04934c218a4a9"},{"problem":34,"code":"#((fn [a b c] \n    (if (= a b)\n      c\n      (recur (inc a) b (conj c a))))\n       %1 %2 [])","user":"5c13ce5ee4b01240ff5671a4"},{"code":"#(loop [result () h %1 circle (- %2 %1)] \n   (if (= circle 0) (reverse result)\n     (recur (conj result h) (inc h) (dec circle)) \n     ))","problem":34,"user":"510d3dc6e4b078ea71921132"},{"problem":34,"code":"(fn m_range [start finish]\n  (loop [curr start\n         ls '()]\n    (if (= curr finish)\n      (reverse ls)\n      (recur (inc curr) (conj ls curr)))))","user":"55a12cb1e4b0acc240e3150d"},{"problem":34,"code":"(fn [low high]\n  (loop [x low res []]\n     (if (= x high) \n       res\n       (recur (inc x) (conj res x)))))","user":"5a40eb64e4b0447ef91cc5d8"},{"problem":34,"code":"(fn [start end] \n  (loop [x start acc []] \n  (if (= x end) \n    acc \n  (recur (inc x) (conj acc x)))))","user":"5182de5ce4b0353c468deb74"},{"problem":34,"code":"(fn \n \n rng ([s f acc]\n    (if (> f s) \n        (recur (inc s) f (conj acc s))\n        acc\n     )\n )\n\n([s f] \n  (seq(rng s f []))\n)\n\n )","user":"5beebdb7e4b0a6d31fed2132"},{"code":"(fn rng [lower upper] (when (< lower upper)\n                         (conj (rng (inc lower) upper) lower)))","problem":34,"user":"532ecd44e4b019098a6f8b49"},{"problem":34,"code":"(fn rangelist [begin end]\n  (loop [i begin res '[]]\n        (if (= i end)\n          (seq res)\n          (recur (+ i 1) (conj res i)))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(fn r [a b]\n  (when (< a b)\n    (cons a (lazy-seq (r (inc a) b)))))","problem":34,"user":"52cd093fe4b07d0d72b27376"},{"code":"#(loop [a % b (dec %2) c '()] (\r\n if (> a b) c\r\n  (recur a (dec b) (conj c b))\r\n))","problem":34,"user":"4ed845a8535d10e5ff6f52f8"},{"problem":34,"code":"(fn [start end]\n   (take (- end start) (iterate inc start))\n   )","user":"546b24a0e4b00cfc9eacc166"},{"problem":34,"code":"(fn \n  [start end] \n  (take (- end start) \n        (iterate inc start)))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn [a z] (take (- z a) (iterate (partial + 1) a)))","problem":34,"user":"4f5694cae4b0a7574ea71827"},{"problem":34,"code":"(fn [start end]\n    (loop [curr-step start\n           coll '()]\n      (if (= curr-step end)\n        coll\n        (recur (+ curr-step 1) (concat coll (list curr-step))))))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn rng [a b]\n  (if (<= b a)\n    nil\n    (cons a (lazy-seq (rng (inc a) b)))))","problem":34,"user":"538e864ee4b0b51d73faae87"},{"problem":34,"code":"(fn ranje [a b] (if (= a b) '() (cons a (ranje (inc a) b))))","user":"5d887d27e4b0915913b1d3a8"},{"problem":34,"code":"(fn rng [x y]\n  (if \n    (< x y)\n    (conj (rng (+ x 1) y) x)\n    '()\n    )\n  )","user":"5efcee8fe4b0cf489e8d7efd"},{"problem":34,"code":"#(loop [start %1\n         result '()]\n       (if (= start %2)\n           (reverse result)\n           (recur (inc start)\n                  (conj result start))))","user":"57bf304de4b05aa3c4741c75"},{"code":"(fn rg [start stop]\n  (if (not= start stop)\n    (cons start (rg (inc start) stop))))","problem":34,"user":"4f0a4e7e535d0136e6c222f4"},{"code":"#(reverse(\n            loop [i %1 result '() ]\n            (if (= %2 i)\n              result\n              (recur (inc i) (conj result i ))\n            )\n            \n         ))","problem":34,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn ny-range [x y]\r\n  (loop [y (dec y)\r\n         xs '()]\r\n    (if (< y x)\r\n      xs\r\n      (recur (dec y) (cons y xs)))))","problem":34,"user":"4f07c8c3535dcb61093f6c2d"},{"code":"(fn [f t]\n  (loop [x f acc []]\n     (if (= x t)\n          acc\n         (recur (inc x) (conj acc x)))))","problem":34,"user":"4ee63d8d535d93acb0a66859"},{"problem":34,"code":"(fn [from to]\n  (loop [f from t to res ()]\n    (if (<= t f)\n      res\n      (recur f (dec t) (conj res (dec t))))))","user":"5658acabe4b0f9d632dd84b7"},{"problem":34,"code":"(fn [mi ma] \n  (loop [t mi result nil]\n   (if (= t ma) \n     result\n     (recur (inc t) (concat result [t]))\n    )\n  ) \n)","user":"58186016e4b0c0e9c07b83ad"},{"problem":34,"code":"#(loop [s %1\n         acc []]\n    (if(= s  %2)\n      acc\n      (recur (inc s) (conj acc s))))","user":"558053b1e4b05c286339e0e9"},{"problem":34,"code":"#(take\n  (- %2 %)\n  (iterate inc %))","user":"594c1baae4b07ddc2dafae59"},{"problem":34,"code":"(fn rng \n  ([start end] (rng (inc start) end (list start)))\n  ([curr end full] (if (>= curr end) (reverse full) (recur (inc curr) end (conj full curr)))))","user":"54a634abe4b09f271ff37c84"},{"problem":34,"code":"(fn range1\n  [start end]\n  (loop [i start j end result []]\n    (if (= i j)\n      (seq result)\n      (recur (inc i) j (conj result i)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":34,"code":"(fn my-range1\n  [m n]\n  (letfn [(my-range1' [m n]\n            (print n)\n            (when (>= n m)\n              (conj (my-range1' m (dec n)) n)))]\n    (reverse (my-range1' m  (dec n)))))","user":"557e9d17e4b05c286339e0d8"},{"problem":34,"code":"(fn myr\n  ([a b] \n   (myr '() a b)\n   )\n  ([s a b] \n   (if (= a b) \n     s\n    (recur (conj s (dec b)) a (dec b))\n    )\n   )\n  )","user":"553b90c8e4b09218d5f45005"},{"problem":34,"code":"(fn [start limit]\n  (loop [x start y limit output []]\n    (if (< x y)\n      (recur (inc x) y (conj output x))\n      output)))","user":"5843b231e4b089d5ab817e3d"},{"problem":34,"code":"(fn [x end]\n  (take (- end x) (iterate inc x)))\n    \n;#(take (- %2 %1) (iterate inc %1))","user":"5487eb1de4b0e286459a11ca"},{"problem":34,"code":"(fn \n\t[start end] \n\t(reduce \n\t\t(fn \n\t\t\t[result doesntmatter] \n\t\t\t(conj result (dec (first result)))\n\t\t) \n\t\t(list (dec end)) \n\t\t(repeat (- (dec end) start) nil))\n)","user":"56449e4de4b0284900eef5f9"},{"code":"(fn [start end]\n        (loop [i start\n               result []]\n          (if (= i end)\n            result\n            (recur (inc i) (conj result i)))))","problem":34,"user":"536581e4e4b0243289761e6d"},{"code":"(fn m-range \n  [start end]\n    (cons start (if (= 1 (- end start)) \n                  '() \n                  (m-range (inc start) end))))","problem":34,"user":"500cc693e4b05f7c30cfa69a"},{"problem":34,"code":"(fn [start end] \n\t(loop [ls '() x start] \n      (if (= (first ls) (- end 1))\n        (reverse ls)\n        (recur (cons x ls) (inc x)))))","user":"56db8fbde4b0ea9b8538f80c"},{"problem":34,"code":"(fn [from to] (take (- to from) (iterate (partial + 1) from)))","user":"580b216fe4b0a837a8b30d45"},{"problem":34,"code":"(fn [start, end]\n  (#(if (= %2 end) %1 (recur (conj %1 %2) (inc %2))) [] start))","user":"54f1b4e7e4b024c67c0cf8b5"},{"code":"(fn [x y] (drop-while #(< % x) (take-while #(< % y) (iterate inc x))))","problem":34,"user":"4e837808535db62dc21a62d9"},{"problem":34,"code":"(fn [start end]\n            (take (- end start) (iterate inc start)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn my-range [start end]\n  (if (= start end) \n    ()\n    (cons start (my-range (inc start) end))\n  )\n)","problem":34,"user":"4fb710f4e4b081705acca2cd"},{"problem":34,"code":"(fn [& [min max]]\n  (loop [curr min\n         result []]\n    (if (> max curr)\n      (recur (inc curr) (conj result curr))\n      (seq result))))","user":"59199cc3e4b09b4ee5954bc8"},{"problem":34,"code":"#(loop\n   [start %1\n    end %2\n    x []]\n   (if (= start end)\n     x\n     (recur (+ start 1)\n            end\n            (conj x start))))","user":"52a45a7be4b0c58976d9abd8"},{"problem":34,"code":"(fn [from to]\n  (loop [current from result []]\n    (if (= current to)\n      result\n      (recur (inc current) (conj result current)))))","user":"57d9bca1e4b0bd073c202405"},{"code":"#(for [x (iterate inc %) :while (< x %2)] x)","problem":34,"user":"4dbe5390535d020aff1edf5c"},{"code":"(fn [x y] (reverse (loop [x x arr '()] (if (>= x y) arr \n                                          (recur (inc x) (conj arr x))))))","problem":34,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn [x y]\n  (loop [result () start x]\n(if (>= start y)\n(reverse result)\n(recur (conj result start) (inc start)))))","problem":34,"user":"4e697e41535d8ccf87e9fe9c"},{"problem":34,"code":"(fn [s f]\n  (seq\n    (loop [i s\n           acc []]\n      (if (== i f) acc\n        (recur (inc i) (conj acc i)))\n      )))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":34,"code":"(fn [start end]\n  (loop [res [start]]\n    (if (= (dec end) (last res))\n      res\n      (recur (conj res (inc (last res)))))))","user":"5139ec21e4b067e25a345ebe"},{"problem":34,"code":"(fn fin [st en] \n  (if (< st en)\n  (cons st\n       (fin (+ 1 st) en))\n    ())\n  )","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":34,"code":"(fn [start end]\n   (loop [i start\n          acc []]\n     (if (< i end)\n       (recur (inc i) (conj acc i))\n       acc)))","user":"55fbc657e4b0f488688e0666"},{"problem":34,"code":"(fn f\n([a b] (f a b '()))\n([a b l] (if (= a b)\n          (reverse l)\n          (f (+ a 1) b (cons a l))))\n)","user":"5b8b326de4b0c0b3ffbd49b8"},{"problem":34,"code":"(fn r [x y]\n   (if (= x y) '()\n       (conj (r (inc x) y) x)))","user":"505223fae4b0a561d07d8f17"},{"code":"#(for [x (iterate inc %)\n       :while (< x %2)]\n   x)","problem":34,"user":"51057b2be4b06d28cacc92e8"},{"problem":34,"code":"(fn range2 [x y]\n    (when (not= x y) (cons x (range2 (inc x) y))))","user":"5dd84170e4b0948ae9d9ad93"},{"problem":34,"code":"(fn\n  [beg end]\n  (loop [res (list (- end 1))]\n    (if (< beg (first res))\n      (recur (conj res (- (first res) 1)))\n      res)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":34,"code":"(fn [start end]\n  (let [times (- end start)]\n    (take times (iterate inc start))\n    )\n  )","user":"60752ef6e4b069485764de55"},{"code":"(fn [s e] ((fn f [s] (if (= s e) '() (cons s (f (inc s))))) s))","problem":34,"user":"51cfc616e4b0e42293a22578"},{"code":"#(loop [x0 %1\n         result ()]\n    (if (< x0 %2)\n      (recur (inc x0) (conj result x0))\n      (reverse result)))","problem":34,"user":"50b0cffae4b009df37c708c5"},{"problem":34,"code":"#(sort (loop [st     %1\n              result '()]\n         (if (= st %2)\n           result\n           (recur (inc st)\n                  (conj result st)))))","user":"573de63fe4b05c31a32c081c"},{"code":"(fn r[a b]\n  (if (= a b)\n    ()\n    (concat (list a) (r (inc a) b))))","problem":34,"user":"4e842ebb535db62dc21a62df"},{"problem":34,"code":"#(loop [x %1 result []]\n   (if (< x %2)\n     (recur (inc x) (conj result x))\n     result))","user":"5d63b06be4b0c9e5857d5025"},{"problem":34,"code":"( fn \n  [ start end ]\n  ( loop [ it (- end start ) result (list start) ]\n     (if ( = it 1 ) (reverse result ) \n    ( recur (dec it) ( cons  ( inc (first result) )  result)))))","user":"516d227fe4b06f078fab252d"},{"problem":34,"code":"(fn [fInp sInp]\n  \n  (loop [fInp fInp\n         sInp sInp\n         output []]\n    (if (= fInp sInp)\n      output\n      \n      (recur (inc fInp)\n             sInp\n             (conj output fInp ))\n      )\n    )\n  \n  )","user":"56b7c32ee4b0982f16b37e48"},{"problem":34,"code":"(fn [i j] (reduce #(concat %1 (list (+ (count %1) %2))) () (repeat (- j i) i)))","user":"4ecf5ee1535d44c135fd68b7"},{"problem":34,"code":"(fn implement_range \n  [n m]\n  (take (- m n) (iterate inc n)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":34,"code":"(fn my-range [start end]\n  (if\n    (= start end) []\n    (concat [start] (my-range (inc start) end))))","user":"56069006e4b08b23635d3174"},{"code":"(fn myFunc [start finish]\n  (cond \n   (= start finish)  []\n   :else (conj  (myFunc start (- finish 1) ) (- finish 1 )) \n   )\n  )","problem":34,"user":"51427a8be4b0b50abeb46b37"},{"problem":34,"code":"(fn r [s f]\n  (loop [s s l []]\n    (if (= s f)\n      l\n      (recur (inc s) (conj l s)))))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":34,"code":"#(loop [n %1 ret []] (if (= n %2) ret (recur (inc n) (conj ret n))))","user":"5e2ead6ae4b05b4b015161f5"},{"code":"(fn [s e] (loop [r () i (dec e)] (if (<= i s) (cons i r) (recur (cons i r) (dec i)))))","problem":34,"user":"4f148418535d64f60314643a"},{"problem":34,"code":"(fn [start end]\n  (loop [iter start\n         acc []]\n    (if (>= iter end)\n      acc\n      (recur (inc iter) (conj acc iter)))))","user":"574c3d4ee4b02ea11479921a"},{"problem":34,"code":"(fn [from to]\n  (loop [cursor from\n         rge []]\n    (if (>= cursor to)\n      rge\n      (recur (inc cursor) (conj rge cursor)))))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn my-range [start end] (take-while #(< % end) (iterate inc start)))","problem":34,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":34,"code":"(fn r2 [b e]\n  (loop [b b e e acc '()]\n  (if (= b e)\n  acc\n  (recur b  (dec e) (conj acc (dec e))))))","user":"58eadeafe4b056aecfd47d28"},{"problem":34,"code":"(fn rng [l h]\n  (loop [produced-range (list l) current-num (+ l 1)]\n    (cond\n      (>= current-num h) produced-range\n      :else (recur (concat produced-range [current-num]) (+ current-num 1)))))","user":"5831846ae4b051871117c02c"},{"problem":34,"code":"(fn [lower, upper]\n  (loop [l lower, u upper, acc '()]\n    (if (= l u)\n      (reverse acc)\n      (recur (inc l) upper (cons l acc))\n     )\n   )\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":34,"code":"(fn hup [x y & z] (if (< x y) (hup (+ x 1) y (conj (first z) x)) (reverse  (first z))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn x[start end]\n    (if (< start end)\n      (cons start (x (inc start) end))\n      []))","problem":34,"user":"502f6c56e4b0842eb223d8bb"},{"problem":34,"code":"(fn range* [start end]\n  (when (< start end)\n    (lazy-seq \n     (cons start (range* (inc start) end)))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn ranger [x y] (if (< (+ 1 x) y) (concat [x] (ranger (+ x 1) y)) [x] ))","problem":34,"user":"51fc44c5e4b0f1313d468a1b"},{"code":"(fn irange [a b]\r\n  (loop [i a coll '()]\r\n\t\t(if (= i b)\r\n\t\t\t(reverse coll)\r\n\t(recur (+ i 1) (cons i coll)))))","problem":34,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"(fn [a b]\n  (map-indexed + (repeat (- b a) a)))","problem":34,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":34,"code":"(fn myrange [a b] (if (= b a) [] (cons a (myrange (inc a) b))))","user":"59258aa7e4b072a2710fce74"},{"code":"(fn [start end] \r\n  (loop [x (dec end) li '()]\r\n\t\t(if (< (dec start) x) \r\n\t\t\t(recur (dec x) (conj li x))\r\n\t\t\tli)))","problem":34,"user":"4feddf2ee4b0198f34b063be"},{"problem":34,"code":"(fn range-inc-excl \n  [m n]\n  (if (< m n)\n    ((fn gen [current result] ;;current - number to add, result = resulting vector\n      (if (>= current n) ;;if we reached the end\n        (vec result) ;;return the current\n        (gen (+ 1 current) (conj result current))  \n        )) (+ 1 m) [m])\n    []))","user":"59863a26e4b021a7a535fe87"},{"code":"(fn [strt end] (map-indexed #(+ %1 %2) (repeat (- end strt) strt)))","problem":34,"user":"4f03ba9c535dcb61093f6b58"},{"problem":34,"code":"(fn rg [x,y]\n\t (if (not= y x )\n\t   (concat (list x) (rg (inc x) y))\n\t   )\n\t )","user":"54fae43ae4b0cf870d934708"},{"code":"(fn me [start end]\n   (if (= start end)\n     []\n     (cons start (me (+ 1 start) end))))","problem":34,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":34,"code":"(fn rn [s e] (if (= s e) nil (cons s (rn (inc s) e))))","user":"5cebafbbe4b0a17bb84e2be6"},{"code":"(fn [x y]\n  (loop [connected () curr x]\n    (if (= curr y)\n      (reverse connected)\n      (recur (conj connected curr) \n              (inc curr)))))","problem":34,"user":"50052fd0e4b0678c553fc45d"},{"problem":34,"code":"(fn [start end]\n  (loop [col [] i start]\n    (if (= i end)\n      col\n      (recur (conj col i) (inc i))\n      )\n    )\n)","user":"5581a6dae4b05c286339e0fe"},{"code":"(fn [start end]\n  (loop [cur start rang []]\n    (if (= cur end)\n      rang\n      (recur (inc cur) (conj rang cur)))))","problem":34,"user":"4e7d1c22535db169f9c796c5"},{"problem":34,"code":"(fn [d p]\n            ((fn [r]\n               (if (= (last r) p)\n                 (take (dec (count r)) r)\n                 (recur (concat r (list (inc (last r))))))) (list d)))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn f [x y]\n  (if (= x y)\n    '()\n    (conj (f (inc x) y) x)))","problem":34,"user":"4fd2789ee4b04c3a95aa0422"},{"problem":34,"code":"(fn\n  [min max]\n  \t(loop [result [], i min]\n      (if (= i max)\n        (apply list result)\n      \t(recur (conj result i) (inc i)))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":34,"code":"(fn step [a b]\n   (cons a (when (not= (inc a) b) (step (inc a) b))))","user":"57635e2de4b0994c1922fbbf"},{"problem":34,"code":"(fn f [x y]\n  (loop  [x x\n          y y\n          z ()]\n      (if (= x y)\n        (reverse z)\n        (recur (inc x) y (cons x z)))))","user":"56df63e1e4b0ca2494a095f6"},{"problem":34,"code":"(fn [start stop] (loop [r [] i start]\n(if (>= i stop)\nr\n(recur (conj r i) (inc i) ))))","user":"59a0262ee4b0871e7608b82d"},{"problem":34,"code":"(fn [start end] (loop [seq [] iteration start]\n  (if (> iteration (- end 1))\n    seq\n    (recur (conj seq iteration) (inc iteration)))))","user":"553024c3e4b076ab5578f80d"},{"code":"(fn my-range \r\n  ([x y] (if (= (- y x) 1)\r\n              (list x)\r\n              (conj (my-range (inc x)  y) x))))","problem":34,"user":"503a5623e4b07a1917cc34d3"},{"code":"(fn rng [start end]\n  (letfn [(rng2 [start end current result]\n            (if (>= current end)\n              result\n              (rng2 start end (inc current) (concat result (list current)))))]\n    (rng2 start end start '())))","problem":34,"user":"4ea01955535d7eef3080729f"},{"problem":34,"code":"(fn f ([i j] (f i j []))\n  ([i j v]\n   (if (= i j)\n     v\n     (recur (+ i 1) j (conj v i)))))","user":"5875daaee4b01531a375ea74"},{"problem":34,"code":"#(  take (- %2 %1) (iterate inc %1) )","user":"54ca9311e4b057c6fda3a263"},{"problem":34,"code":"(fn [ini end]\n    (loop [r [], i ini]\n      (if (< i end)\n        (recur (conj r i) (inc i))\n        r)))","user":"5ae246b1e4b0837691e92c5d"},{"problem":34,"code":"(fn rng [s e] \n  (if (= s e) ()\n    (conj (rng (+ 1 s) e) s)))","user":"5421f74fe4b01498b1a71abb"},{"problem":34,"code":"(fn [f end]\n  (loop [col [] start f]\n   (if (= start end)\n     (seq col)\n     (recur (conj col start) (inc start)))))","user":"568384b4e4b0945ebc182a9a"},{"code":"(fn rangit [s e]\n  (take (- e s) (iterate inc s)))","problem":34,"user":"50c7431ae4b00bb60fe0c531"},{"problem":34,"code":"(fn [start end]\n  (loop [rng [] current start]\n  (if (= current end)\n    rng\n    (recur (conj rng current) (inc current))\n    )\n  )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn [start end] (loop [x start r ()] (if (>= x end) (reverse r) (recur (inc x) (conj r x)))))","problem":34,"user":"5179fd22e4b01aacecbecbe5"},{"problem":34,"code":"(fn [start end] (loop [r [] prev start] (if (= end prev) (reverse (into () r)) (recur (conj r prev) (inc prev)))))","user":"571172ece4b09c608db70446"},{"code":"(fn r [b e]\r\n  (letfn [(h [start end l]\r\n                (if (> start end)\r\n                    l\r\n                    (h start (- end 1) (cons end l))))]\r\n          (h b (- e 1) '())))","problem":34,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(fn r [from to] (if (< from (dec to)) (conj (r (inc from) to) from) (list from)))","problem":34,"user":"512b9e59e4b04d059cf1fd17"},{"problem":34,"code":"(fn rng [fel lel] \n  (take \n   (- lel fel) \n   ((fn endlesslazyrange [st] \n      (cons st (lazy-seq \n                (endlesslazyrange (inc st)))))\n    fel )))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [from to]\n  (let [helper (fn [coll from to]\n                 (if (= from to)\n                   coll\n                   (recur (conj coll from) (inc from) to)))]\n    (helper [] from to)))","problem":34,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn [b e] (take (- e b) (iterate #(+ 1 %) b)))","problem":34,"user":"4fa069c3e4b0dcca54ed6d4a"},{"problem":34,"code":"(fn my-repeat [from to]\n   (loop [coll (list)\n          last-val (dec to)]\n     (if (< last-val from)\n       coll\n       (recur (cons last-val coll)\n              (dec last-val)))))","user":"5515b138e4b055c2f668d4ed"},{"problem":34,"code":";; #34\n(fn [from to]\n  (loop [n from\n         r '()]\n    (if (= n to)\n      (reverse r)\n      (recur (inc n) (conj r n)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [first last]\n    (take (- last first) (iterate inc first)))","problem":34,"user":"526302eee4b03e8d9a4a70a2"},{"problem":34,"code":"#(loop [a %1 res []] (if (< a %2) (recur (inc a) (conj res a)) res))","user":"5485b402e4b0e286459a11b0"},{"problem":34,"code":"#(reverse (nth (iterate (fn [[f & _ :as l]] (cons (inc f) l)) [%1]) (- %2 %1 1)))","user":"5454b84ce4b0e397800069d9"},{"problem":34,"code":"(fn [a b] (loop [i (dec b) l '()] (if (< i a) l (recur (dec i) (conj l i)))))","user":"56f09bf4e4b04a395b9a047f"},{"code":"(fn rng [start stop]\n  (loop [i start r []]\n\t\t(if (= i stop)\n\t\t\tr\n\t\t\t(recur (+ i 1) (conj r i )))))","problem":34,"user":"4fdfe6a5e4b05e33b9224fa6"},{"problem":34,"code":"(fn [strt n] (loop [x strt ret '()] (cond (< x n) (do (recur (inc x) (cons x ret) )) :else (reverse ret) )))","user":"58ac513fe4b0005cfeb1a746"},{"problem":34,"code":"(fn [a b]\n  (loop [i a r []]\n    (if (= i b)\n      (apply list r)\n      (recur (inc i) (conj r i)))))","user":"57458b82e4b009280f9f2b4e"},{"problem":34,"code":"(fn [f s]\n   (take-while #(< % s) (iterate inc f)))","user":"5ab23c99e4b073f1774425e2"},{"code":"#(loop [a %1 b %2 c []] \n\t(if (= a b) c\n\t\t(recur (+ a 1) b (conj c a))))","problem":34,"user":"52b79d8ee4b0c58976d9ad50"},{"problem":34,"code":"(fn f [s e]\n      (loop [x s acc []]\n        (if (< x e)\n          (recur (inc x) (conj acc x))\n          acc)))","user":"5d4c4de9e4b0776584bd6f2f"},{"code":"(fn myrange [x y] \n  (when (not= x y)\n    (conj (myrange (+ x 1) y) x)\n  )\n)","problem":34,"user":"4fb3fec7e4b081705acca2a7"},{"problem":34,"code":"(fn ran [l r] (if (< l r)\n                 (cons l (ran (inc l) r))\n                 '()))","user":"55993deee4b031d6649c9ba5"},{"code":"(fn [start upper-bound]\n  (letfn\n    [(start-with [x]\n      (lazy-seq (cons x (start-with (inc x)))))]\n    (take-while #(< % upper-bound) (start-with start))))","problem":34,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn x [a b]\n  (if (< a b)\n    (conj (x (inc a) b) a)\n    ()))","problem":34,"user":"4fd153cee4b04c3a95aa040e"},{"problem":34,"code":"(fn [s e]\n  (loop [cur s res []]\n    (if (= cur e)\n      res\n      (recur (inc cur) (conj res cur))\n      )))","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [a b]\n  (loop [start a\n         lst []]\n    (if (= start b)\n      (into '() lst)\n      (recur (inc start) (cons start lst)))))","problem":34,"user":"4f2a7174e4b0d6649770a03e"},{"problem":34,"code":"(fn t [x y]\n  (take (- y x) (iterate #(+ 1 %) x)))","user":"5926c254e4b072a2710fceb8"},{"code":"(fn mrange [l u]\n  (if (= l u)\n    []\n    (cons l (mrange (inc l) u))))","problem":34,"user":"50c2fbebe4b00e537d00253c"},{"code":"#(loop [s %1 res []] (if (>= s %2) res (recur (inc s) (conj res s))))","problem":34,"user":"5208a3a2e4b0301979a6c235"},{"problem":34,"code":"(let [arr (atom [])]\n  (fn [from to]\n    (dotimes [itt (- to from)]\n      (swap! arr conj (+ from itt)))\n    @arr))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":34,"code":"(fn [x y]\n  (let [largest (max x y)\n        smallest (min x y)]\n    (loop [i smallest\n           s []]\n      (if (= i largest)\n        s\n        (recur (inc i) (conj s i))))))","user":"55664950e4b0c656e3ff1832"},{"code":"(fn [start end] \n  (if (< end start) '())\n  (loop [i (dec end) acc '()]\n    (cond\n     (< i start) acc\n     :else (recur (dec i) (conj acc i))\n     )))","problem":34,"user":"52f69565e4b047fd55836fb9"},{"code":"#(map-indexed (fn [i x] (+ %1 i)) (repeat (- %2 %1) :a))","problem":34,"user":"4ecbb249535df97575fdabdf"},{"problem":34,"code":"(fn [i j]\n  \"create a list of integers using the given range\"\n  (for [x (iterate #(+ 1 %) i)\n        :let [z x]\n        :while (< x j)]\n    z))","user":"56fc9a2de4b08d47c977819b"},{"problem":34,"code":"(fn [start end] \n  (reverse ((fn [start end acc] (if (= start end)\n                                  acc                        \n                                  (recur (inc start) end (cons start acc)))) start end '())))","user":"5a135573e4b0ff51aa4b3180"},{"problem":34,"code":"(fn [s e] (take-while #(< % e) (iterate #(+ % 1) s)))","user":"563536f8e4b0bfe05bf117c5"},{"problem":34,"code":"#(reverse\n   (loop [coll ()\n          start %1\n          end %2]\n     (if (< start end)\n       (recur (conj coll start) (inc start) end)\n       coll)))","user":"55a372f1e4b0acc240e31537"},{"problem":34,"code":"(fn r [start end] \n  (loop [l '() s start] \n    (if (= end s) \n      (reverse l) \n      (recur (conj l s) (inc s)))))","user":"55f2b42be4b06e875b46ce4a"},{"problem":34,"code":"(fn [from to]\n  (map-indexed + (repeat (- to from) from)))","user":"55f43228e4b06e875b46ce67"},{"problem":34,"code":"(fn [a b] \n  (take-while #(< % b) (iterate inc a)))","user":"553beff9e4b09218d5f4500d"},{"code":"(fn [l h] (for [x (iterate inc l) :while (< x h)] x))","problem":34,"user":"5050b107e4b063148f524126"},{"problem":34,"code":"#(take (- %2 %1) \n    ((fn pn [n]\n           (lazy-seq (cons n (pn (+ n 1)))))\n     %1))","user":"564f51a0e4b0284900eef6ab"},{"problem":34,"code":"(fn rang [l h]\n  (if (= l h)\n    '()\n    (cons l (rang (inc l) h))))","user":"55670a05e4b0c656e3ff1838"},{"problem":34,"code":"(fn [beg end]\n    (loop [cur beg out '()]\n      (if (< cur end)\n        (recur (+ 1 cur) (conj out cur))\n        (reverse out)\n\n        )\n          ))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":34,"code":"(fn rng [x y] (\n  if (= x y) '() (concat [x] (rng (+ x 1) y))             \n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":34,"code":"(fn [beg end] ((fn doit [a b res] (if (< a b) (doit (inc a) b (conj res a)) res)) beg end []))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":34,"code":"(fn [a b]\n  (loop [x a res []]\n    (if (>= x b) res (recur (inc x) (conj res x)))))","user":"59abd1d8e4b08cbb53654da4"},{"problem":34,"code":"(fn gets [a b] (concat [a] (if (< (+ a 1) b) (gets (+ a 1) b))))","user":"55e2d527e4b050e68259b43a"},{"problem":34,"code":"(fn range-seq [start finish & coll]\n  (if (= start finish)\n    (reverse coll) ;; We're using cons is faster than concat, but we get reversed\n    (recur (inc start) finish (cons start coll))))","user":"55b69e37e4b01b9910ae2999"},{"problem":34,"code":"(fn [from, to ] \n  (loop [f from result []]\n    (if (< f to)\n      (recur (+ f 1) (conj result f))\n      (seq result)\n    )))","user":"544b4807e4b0e39780006962"},{"problem":34,"code":"(fn range* [s e]\n  (if (= (inc s) e)\n    [s]\n    (concat [s] (range* (inc s) e))))","user":"56451201e4b0284900eef600"},{"problem":34,"code":"(fn my-range [s e]\n  (loop [acc () n (- e 1)]\n    (if (< n s) \n      acc\n      (recur (conj acc n) (- n 1)))))","user":"5f5b624de4b05ea7b9adc42f"},{"code":"(fn myrange [lower upper]\n  (if (= lower upper) '() (cons lower (myrange (+ lower 1) upper))))","problem":34,"user":"511937eee4b055cfb310d495"},{"code":"(fn \n  [start finish]\n  (take (- finish start) (iterate #(inc %) start)))","problem":34,"user":"4e8a0c82535d3e98b802328d"},{"problem":34,"code":"(fn  [my-seq x1 x2]\n  (if (= x1 x2)\n    my-seq\n    (recur (flatten (list my-seq x1)) (inc x1) x2))) []","user":"57a1478ae4b0c3d858beb8e5"},{"code":"(fn [a b]\n  (map-indexed + (repeat (- b a) a))\n  )","problem":34,"user":"4f7683dae4b0fbe0118ec56f"},{"problem":34,"code":"(fn [start end]\n (loop [i start coll '()]\n  (if (< i end)\n   (recur (inc i) (conj coll i))\n   (reverse coll))))","user":"5da9d89ae4b000c986472c3b"},{"problem":34,"code":"(fn foo [x y] (when (< x y) (conj (foo (+ x 1) y) x)))","user":"52f8b2a2e4b047fd55836fda"},{"code":"(fn [x y] \n  (loop [coll []\n         x x\n         y y]\n    (if (< x y)\n      (recur (conj coll x)\n             (+ x 1)\n        \t y)\n      coll)))","problem":34,"user":"50ab38a8e4b0f65d68208507"},{"problem":34,"code":"(fn [a b] \n   ((fn rec [a b l] \n     (if (= a b) \n       l\n       (conj (rec (inc a) b l) a))) a b '()))","user":"5550bcece4b00713264bd9ae"},{"problem":34,"code":"(fn f [x y]\n           (when (< x y)\n             (cons x (f (+ x 1) y))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":34,"code":"(fn f [acc a b] (if (= a b) acc (f (conj acc a) (+ 1 a) b) )) []","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"(fn [s e] (map-indexed #(+ %1 %2) (repeat (+ e (- 0 s)) s)))","problem":34,"user":"53307da1e4b019098a6f8b5e"},{"problem":34,"code":"(fn\n  [i j]\n  (loop [r (list i)]\n    (if (= (count r) (- j i))\n      (reverse r)\n      (recur (conj r (inc (first r)))))))","user":"5ec02e20e4b00a66d4a95288"},{"problem":34,"code":"(fn f [start finish] \n  (if (= start finish) \n    '()\n    (cons start (f (inc start) finish))\n                    ))","user":"4faf97d8e4b081705acca258"},{"problem":34,"code":"(fn p34 [beg end]\n  (take (- end beg) (iterate inc beg)))","user":"5f968f4ee4b0715f5002d7d2"},{"code":"(fn rng [s e]\n  (take-while (partial > e) (iterate inc s)))","problem":34,"user":"51672d15e4b079759a74a5e7"},{"problem":34,"code":"(fn [start end]\n  (loop [result [start]]\n    (if (= (- end 1) (peek result))\n      result\n      (recur (conj result (+ (peek result) 1)))\n)))","user":"55d79b87e4b0e31453f64aa8"},{"problem":34,"code":"(fn\n  [start end]\n  (take-while (partial > end) (iterate inc start)))","user":"592af6eee4b072a2710fcf2c"},{"problem":34,"code":"#(take (- %2 %1) (map-indexed (fn [i x] (+ i %1)) (repeat 0)))","user":"548f1604e4b0e286459a1230"},{"problem":34,"code":"(fn my-range [f t]\n  (if (< f t)\n    (cons f (my-range (inc f) t))\n    ()))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn rng [a b] (for [x (iterate inc a) :while (< x b)] x))","problem":34,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn my-range [from to]\n  (when (< from to)\n    (conj (my-range (inc from) to) from)))","problem":34,"user":"506a1985e4b01dc6af13f83e"},{"code":"#(loop [current %1\n        my-range '()]\n    (if (< current %2)\n      (recur (inc current) (concat my-range [current]))\n      my-range))","problem":34,"user":"52cb19abe4b07d0d72b27348"},{"code":"#(take (- %2 %1)\n    (iterate inc %1))","problem":34,"user":"4daa374930acd6ed13482a68"},{"code":"#(take (-%2 %1) (iterate inc %1))","problem":34,"user":"4e6f8431535d5021c1a8961e"},{"code":"#(loop [s %1\n        e %2\n        c []]\n   (if (>= s e)\n     c\n     (recur (inc s) e (conj c s))))","problem":34,"user":"514b83b4e4b0bd81940b86ce"},{"problem":34,"code":"(fn f [l h]\n  (if (= l h) '()\n  (conj (f (inc l) h) l)))","user":"598a4ff7e4b02b9968b84cda"},{"code":"(fn [f t]\n  (take (- t f) (iterate inc f)))","problem":34,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":34,"code":"(fn range-finder [x y]\n  (loop [x x acc []]\n    (if (< x y)\n      (recur (inc x) (conj acc x))\n      acc)))","user":"583f2e4de4b089d5ab817dcb"},{"problem":34,"code":"#(loop [v % l []] (if (= v %2) l (recur (inc v) (conj l v))))","user":"59f78761e4b0966464fe6af5"},{"problem":34,"code":"(fn my_range\n\t[a b]\n\t(when\n\t\t(> b a)\n\t\t(lazy-seq (cons a (my_range (inc a) b)))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":34,"code":"(fn [a b]\n  (loop [n a\n         final []]\n    (if (>= n b)\n      final\n      (recur (inc n) (conj final n))\n      ))\n  )","user":"5c1d9f05e4b0efcb0b05b24c"},{"code":"(fn [i0 n]\n  (take-while #(< % n) (iterate inc i0)))","problem":34,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn [s e]\n  (take-while #(< % e)\n    (iterate inc s)))","problem":34,"user":"50af3393e4b0a40c9cfb08d7"},{"code":"(fn rng [start end] \n  (reverse \n   ((fn nex [s e xs] \n      (if (= s e)\n        xs\n        (nex (inc s) e (cons s xs))))\n    start end '())))\n\n\n;; (fn [start end]\n;;  (take (- end start) (iterate inc start)))","problem":34,"user":"53504436e4b084c2834f4ad7"},{"problem":34,"code":"(fn [low high]\n  (loop [cur low\n         result []]\n    (if (>= cur high)\n      result\n      (recur (+ cur 1) (conj result cur)))))","user":"566f3e18e4b0a866af6896e7"},{"problem":34,"code":"(fn [x, y] (take-while #(< % y) (iterate #(inc %) x)))","user":"569ad037e4b0542e1f8d144f"},{"problem":34,"code":"#(loop [next-val % col []]\n   (if (< next-val %2)\n     (recur (inc next-val)\n            (conj col next-val))\n     col))","user":"53571732e4b04ce2eb3ed275"},{"code":"(fn [start end]\n  (loop [i start s '()]\n    (if (= i end)\n      (reverse s)\n      (recur (+ i 1) (cons i s)))))","problem":34,"user":"4f036d18535dcb61093f6abe"},{"problem":34,"code":"(fn [n x] \n  (take (- x n) (iterate inc n)))","user":"571edeeae4b0145328a7629b"},{"problem":34,"code":"(fn [x y]\n  (take (- y x) (iterate inc x) ))","user":"564045a8e4b08d4f616f5edd"},{"problem":34,"code":"(fn sperange \n  ([l u]\n   (sperange [] l u))\n  ([c l u]\n   (if (< l u)\n     (sperange (conj c l) (inc l) u)\n     c)))","user":"56fa972be4b07572ad1a88c2"},{"problem":34,"code":"(fn [x y] (loop [z x  c []] (if (= z y) c (recur (inc z) (conj c z)))))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":34,"code":"#(loop [acc (list %1) n %1] \n                       (if (< (inc n) %2) \n                         (recur (conj acc (inc n)) (inc n))\n                         (reverse acc)))","user":"5075e374e4b09049dea827a5"},{"problem":34,"code":"(fn my-range\n  ([in en]\n   (if (<= (inc in) en)\n     (lazy-seq (cons in (my-range (inc in) en))))))","user":"57985f98e4b039eba2ecb114"},{"code":"(fn srange [x y]\n  (if (not= x y)\n    (cons x (srange (inc x) y))\n    )\n  )","problem":34,"user":"5195b8cce4b04c0af7ff3c08"},{"problem":34,"code":"(fn rg [a b] (\n                loop [bot a ret []]\n                 ( if (< bot b)\n                   (recur (inc bot) (conj ret bot))\n                   ret\n                   )\n))","user":"52c70127e4b0c2d177d6211a"},{"problem":34,"code":"(fn rng [i j]\n  (loop [j (dec j) res '()]\n    (if (= (dec i) j)\n      res\n      (recur (dec j) (conj res j))\n      )\n    )\n  )","user":"5a75da49e4b0512ff01cdacf"},{"problem":34,"code":"#(loop [out [] i %1 j %2] (if (= i j) out (recur (conj out i) (inc i) j)))","user":"57f9e0bce4b0d3187e900956"},{"problem":34,"code":"(fn [x y] \n   (loop [final [] counter1 x counter2 y] \n     (if (= counter1 counter2) final\n      (recur (conj final counter1) (inc counter1) counter2))))","user":"55e20059e4b050e68259b427"},{"problem":34,"code":"(fn [start end]\n   (loop [start start\n          end end\n          s []]\n      (if (< start end)\n         (recur (inc start) end (conj s start))\n         (seq s))))","user":"57e10705e4b0bfb2137f5a6a"},{"code":"(fn rng [a b]\n  (if (>= a b)\n    '()\n    (cons a (rng (+ a 1) b))\n    )\n  )","problem":34,"user":"52586d24e4b0cb4875a45cb0"},{"problem":34,"code":"(fn [from to]\n  (take (- to from)\n        (iterate inc from)))","user":"554bd33ce4b0a04f7929959a"},{"problem":34,"code":"(fn blo [xd yd]\n\n  (loop [counter xd res '()]\n\n    (if (= counter yd)\n\n      res\n\n      (recur (inc counter) (concat res (list counter))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":34,"code":"(fn [start end]\n  (loop [index start acc []] \n    (if (> end index) (recur (inc index) (conj acc index)) acc )\n    \n    )\n  \n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn range1 [start end]\n  (loop  [cur start col []]\n    (if (= cur end)\n      col\n      (recur (inc cur) (conj col cur)))))","problem":34,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":34,"code":"(fn [fst lst] (loop [nxt fst res []] (if (>= nxt lst) res (recur (inc nxt) (conj res nxt) ))))","user":"5c51c930e4b0fb8c5ffd99ce"},{"code":"(fn [b e]\n  (loop [ lb b\n          le e\n          c '() ]\n    (if (= lb le)\n      c\n      (recur lb (dec le) (conj c (dec le)))\n    )))","problem":34,"user":"4e6f8d36535d5021c1a89621"},{"problem":34,"code":"(fn [start end]\n  (loop [curr start\n         ans []]\n    (if (= curr end)\n      ans\n      (recur (inc curr) (conj ans curr)))))","user":"5a1149ace4b04bbd27e6da26"},{"code":"(fn range2 [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"5383668ee4b06839e8705edd"},{"problem":34,"code":"(fn [res n] (loop [res (list res)]\n    (let [nex (last res)]\n    (if (= (dec n) nex)\n      (flatten res)\n      (recur (conj (list (inc nex)) res))))))","user":"51412b0ae4b0694e2952b79d"},{"code":"; original\n;(fn rnge [l h] (if (< l h) (conj (rnge (inc l) h) l) '()))\n\n; w/ iterate, based on the example of many:\n#(take (- %2 %) (iterate inc %))","problem":34,"user":"50d4c626e4b09cc622d65a70"},{"code":"#(letfn [(r [x y]\n  (if (>= x y)\n      '()\n      (cons x (r (inc x) y))))]\n (r %1 %2))","problem":34,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn rng [sofar lbound ubound]\n  (if (= lbound ubound)\n    sofar\n    (recur\n         (conj sofar (dec ubound))\n         lbound\n         (dec ubound)\n     )\n  )\n) '()","problem":34,"user":"531cd41ee4b08068f379eda9"},{"code":"(fn [a n]\n  (take (- n a) (iterate inc a)))","problem":34,"user":"510fd798e4b04c71fce993dc"},{"problem":34,"code":"#(loop [f %1 ret []]\n   (if (< f %2)\n     (recur (inc f) (conj ret f))\n     (apply list ret)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [sx ex]\n  (loop [result [] start sx end ex]\n    (if (= start end)\n      result\n      (recur (conj result start) (inc start) end))))","problem":34,"user":"4f036894535dcb61093f6aad"},{"problem":34,"code":"#(loop [x %1 y []] (if (= (last y) (- %2 1)) (seq y) (recur (inc x) (conj y x))))","user":"552712e7e4b0ffed3738f92a"},{"code":"(fn blah [start end] (if (= start end) '() (cons start (blah (inc start) end))))","problem":34,"user":"4f17aa97535d64f603146456"},{"code":"(fn [a b]\n  (loop [c a\n         r []]\n           (if (= c b)\nr\n(recur (inc c) (conj r c)))))","problem":34,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn [start-incl end-excl] (loop [cur start-incl, acc []] (if (< cur end-excl) (recur (inc cur) (conj acc cur)) acc)))","problem":34,"user":"51ba4482e4b0fe3ecfb4642b"},{"code":"(fn [start end]\n  (let [f (fn [cur acc]\n            (if (< cur end)\n              (recur (inc cur) (conj acc cur))\n              acc))]\n    (f start [])))","problem":34,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn rg [a b]\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4f611127e4b0defedf855fb4"},{"problem":34,"code":"#_(fn f [a b]\n  (when (< a b)\n    (cons a (f (inc a) b))))\n\n(fn f [a b]\n  (lazy-seq\n   (when (< a b)\n     (cons a (f (inc a) b)))))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":34,"code":"(fn my-range [start end] (if (== start end) [] (cons start (my-range (inc start) end))))","user":"5877a553e4b01531a375eaa5"},{"code":"(fn rng [s e] (if (= s e)\n                  '()\n                  (conj (rng (inc s) e) s)\n                )\n  )","problem":34,"user":"51448607e4b0d29bc9e5e336"},{"problem":34,"code":"(fn rang [a b]\n  (loop [current a lis []]\n    (if (= current b)\n      lis\n      (recur (inc current)\n             (conj lis current)\n       )\n     )\n   )\n )","user":"58b48db1e4b0ebc645576d3e"},{"problem":34,"code":"(fn ran [start end]\n  (if (< start end)\n    (concat [start] (ran (inc start) end))\n    '()))","user":"5a144fd8e4b0ff51aa4b319a"},{"code":"(fn myRange [start end]\n  (if (= start end)\n    '()\n    (cons start (myRange (+ start 1) end))))","problem":34,"user":"4f0365fc535dcb61093f6aa4"},{"problem":34,"code":"(fn myr [s, e]\n  (if (= (- e s) 0)\n    (list)\n    (conj (myr (+ s 1) e) s)\n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"problem":34,"code":"(fn my-range [s e]\n    (if (= s e)\n      '()\n      (cons s (my-range (inc s) e))))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":34,"code":"(fn r\n  ([from until]\n   (r from until '()))\n  ([from until lst]\n   (if (< from until)\n     (recur (inc from) until (cons from lst))\n     (reverse lst))))","user":"53f31dafe4b0742d9025b0f0"},{"code":"(fn [a b]\n    (let [c (- b a)]\n      (take c (iterate inc a))))","problem":34,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn [x y] (loop [a [] b x]\n             (if (>= b (dec y))\n               (conj a b)\n               (recur (conj a b) (inc b)))))","problem":34,"user":"52166e50e4b0bf4bffd29cc6"},{"problem":34,"code":"(fn ranger [start stop] (if (= start stop) nil (cons start (ranger (inc start) stop))))","user":"59078134e4b047aa04b1995c"},{"problem":34,"code":"(fn [start finish] \n  (take (- finish start) (iterate #(+ 1 %) start)))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":34,"code":"(fn my-range [a b]\n  (if (>= a b) '()\n      (cons a (my-range (inc a) b))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":34,"code":"(fn fff[xp yp] \n  (apply (fn ddd[x y acc]\n  (if (>= x y)\n    acc\n    (let [x2 (inc x)]\n      (recur x2 y (conj acc x))))) [xp yp []]))","user":"55f01316e4b06e875b46ce1a"},{"problem":34,"code":"(fn !\n  [first second]\n  (if (< first second)\n   (cons first (! (inc first) second))\n    []))","user":"576d6266e4b0979f89651563"},{"problem":34,"code":"(fn [start end]\n  (loop [n start\n         acc []]\n    (if (= n end)\n      acc\n      (recur (inc n) (conj acc n)))))","user":"5498e155e4b0b312c081ff86"},{"problem":34,"code":"(fn [x y]\n  (take (- y x) (iterate #(+ % 1) x)))","user":"5f837b30e4b01aacbe7a2714"},{"problem":34,"code":"#(loop [end (dec %2)\n           l '()]\n      (if (<= %1 end)\n        (recur (dec end)\n               (conj l end))\n        l))","user":"5383c054e4b06839e8705ee8"},{"code":"#(loop [n    (- %2 1)\n        nmin %1\n        ret  '()]\n   (if (< n nmin)\n     ret\n     (recur (dec n) nmin (cons n ret))))","problem":34,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [l r] (take (- r l) (iterate inc l)))","problem":34,"user":"4ec53831535d6d7199dd3684"},{"problem":34,"code":"(fn [m n]\n   (take-while #(< % n) (iterate inc m)))","user":"53c0f4dee4b00fb29b221259"},{"problem":34,"code":"(fn [initial n]\n   (loop [initial initial\n         top n\n         result '()]\n     (if (= initial top)\n       result\n       (recur (inc initial) top (concat result [initial]))\n       )))","user":"55a31e3fe4b0acc240e31531"},{"code":"(fn [a b]\r\n    (loop [cnt a acc []]\r\n       (if (>= cnt b)\r\n            acc\r\n          (recur (inc cnt) (conj acc cnt)))))","problem":34,"user":"4ef0f1a1535dced4c769f212"},{"problem":34,"code":"(fn range' [a b]\n  (take (- b a) (iterate inc a)))","user":"5e976fa8e4b0157ca96647cf"},{"code":"(fn [s e]\n  (loop [i s ret '()]\n    (if (< i e)\n      (recur (inc i) (conj ret i))\n      (reverse ret))))","problem":34,"user":"51ef31dfe4b0871fa145d9a0"},{"problem":34,"code":"#(loop [start %1\n       end %2\n       acc '()]\n  (if (>= start end)\n    acc\n    (recur (inc start) end (concat acc (list start)))))","user":"5daa0d56e4b000c986472c3c"},{"problem":34,"code":"(fn [st fin] \n  (loop [value st res []]\n  (if (= value fin)\n    res\n    (recur (inc value) (conj res value)))))","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":34,"code":"(fn [x, y] (loop [start x, end (- y x), result ()]\n            (if (zero? end)\n              (reverse result)\n              (recur (inc start) (dec end) (conj result start)))))","user":"57d60d83e4b0bd073c2023c2"},{"code":"#(loop [from %1 to %2 c ()]\n  (if (= from to)\n    (reverse c)\n    (recur (inc from) to (conj c from))))","problem":34,"user":"4ea76541535d7eef308072eb"},{"problem":34,"code":"(fn [start end]\n  (loop [start start result '()]\n    (if (< start end)\n      (recur (inc start) (concat result [start]))\n      result)))","user":"550aeddae4b06e50f9beb135"},{"problem":34,"code":"(fn mkList [down up] \n  ( loop [iteration down _list '()]\n    (if (= iteration up)\n      _list\n      (recur (inc iteration) (concat _list [iteration]))\n      ) ) )","user":"5b7d1dc1e4b047b03b20373f"},{"problem":34,"code":"(fn [min-val max-val] (take (- max-val min-val) (iterate inc min-val)))","user":"5461873de4b01be26fd746a3"},{"problem":34,"code":"(fn r\n  [i n]\n  (if (< i n)\n    (cons i (r (inc i) n))\n    (seq [])))","user":"56488119e4b0284900eef632"},{"problem":34,"code":"(fn [x y] \n  (reduce #(conj %1 (+ (count %1) %2)) [x] (repeat (- y x 1) x)))","user":"5b9263ece4b0c0b3ffbd4a37"},{"problem":34,"code":"(fn do-range\n  [a b]\n  (loop [n (dec (Math/abs (- a b))) result [a]]\n    (if (= 0 n)\n      result\n      (recur (dec n) (conj result (inc (last result)))))))","user":"59b62f8de4b05c620303ca1f"},{"problem":34,"code":"(fn fake-range [lo hi]\n   (if (= lo hi)\n     '()\n     (cons\n      lo\n      (fake-range\n       (+ lo 1)\n       hi))))","user":"59273eefe4b072a2710fcec6"},{"problem":34,"code":"#(take (-%2 %) (iterate inc %1))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":34,"code":"(fn [a b]\n  (loop [acc [a]]\n    (let [nxt (inc (last acc))]\n      (if (= nxt b) acc (recur (conj acc nxt))))))","user":"541ad1c1e4b01498b1a71a5c"},{"code":"(fn [begin end]\n  (let [diff (- end begin)]\n    (loop [d diff\n           res []\n           cur-val begin]\n      (if (zero? d) res (recur (dec d)\n                               (conj res cur-val)\n                               (inc cur-val))))))","problem":34,"user":"516081e7e4b009fba0926e28"},{"code":"(fn f [x y]\r\n  (take-while #(< % y) (iterate #(+ 1 %) x)))","problem":34,"user":"4eaed3a7535d7eef30807328"},{"problem":34,"code":"#(take-while (fn [x] (< x %2)) (iterate (partial + 1) %1))","user":"5694a50fe4b0dcc4269f4121"},{"code":"(fn [b e] (take (- e b) (iterate inc b)))","problem":34,"user":"4e833184535db62dc21a62d2"},{"code":"(fn [mn lim]\n  (loop [i,mn res,[]]\n    (if (= i lim)\n      res\n      (recur (inc i) (conj res i)))))","problem":34,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":34,"code":"(fn my-range [a b]\n  (loop [i a\n         res '()]\n    (if (= i b)\n      (reverse res)\n      (recur (inc i) (cons i res)))))","user":"57a6ad79e4b0a9660795620b"},{"code":"(fn custom-range [start end]\n  (if (= start end)\n    []\n    (conj (custom-range start (- end 1)) (- end 1))))","problem":34,"user":"5264b4a9e4b03e8d9a4a70e0"},{"problem":34,"code":"(fn my-range' [a b]\n   (if (>= a b)\n     []\n     (cons a (my-range' (inc a) b))))","user":"54dc84ede4b024c67c0cf784"},{"code":"(fn [l u] \n  (loop [x (dec u) r '()]\n    (if (< x l)\n        r\n        (recur (dec x) (conj r x)))))","problem":34,"user":"503e7f06e4b06c4e0e1fa268"},{"code":"(fn[x y] (take (- y x) (iterate inc x)))","problem":34,"user":"4fe1279fe4b0dd6cd5ce3630"},{"problem":34,"code":"(fn [start end] \n  (take (- end start) (iterate (fn [x] (+ 1 x)) start))\n)","user":"57f904c5e4b0d3187e900936"},{"problem":34,"code":"#(->>\n   (iterate inc %1)\n   (take (- %2 %1))\n   )","user":"5b118b7be4b0cc2b61a3be34"},{"code":"(fn [b c]\r\n  (loop [s b e c a ()]\r\n    (if (= s e)\r\n      a\r\n      (recur s (dec e) (cons (dec e) a)))))","problem":34,"user":"4e814706535db62dc21a62bb"},{"problem":34,"code":"(fn my-range [start end]\n  (when (< start end)\n    (lazy-seq \n      (cons start (my-range (inc start) end)))))","user":"4e7be091535db169f9c796ba"},{"problem":34,"code":"(fn\n  [start end]\n  (keep-indexed #(+ %1 %2) (repeat (- end start) start)))","user":"5c9a638fe4b048ec896c5aae"},{"code":"(fn [from to]\r\n    (take-while (complement #(= % to)) (iterate inc from)))","problem":34,"user":"4dd61f98535d2dad7130b5c6"},{"problem":34,"code":"#(loop [i %1 \n        result []]\n   (if (= i %2)\n     result\n     (recur (inc i) (conj result i))))","user":"546a6dbbe4b00cfc9eacc156"},{"problem":34,"code":"#(map-indexed (fn [x i] (+ x i)) (repeat (- %2 %1) %1))","user":"54af220ce4b09f271ff37d02"},{"problem":34,"code":"(fn my-range\n  [s e]\n    (if (>= s e)\n      '()\n      (cons s (my-range (inc s) e))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"code":"(fn f[a b] (if (= a b) (list) (cons a (f (inc a) b))))","problem":34,"user":"4ec1b090535dfed6da9c6db5"},{"code":"#(for [i (iterate (fn [i] (inc i)) %) :while (< i %2)] i)","problem":34,"user":"526c2340e4b03e8d9a4a7281"},{"code":"(fn [a b]\n  (loop [a a b b ret []]\n  (if (= a b)\n    ret\n    (recur (inc a) b (conj ret a)))))","problem":34,"user":"50d4909ce4b09cc622d65a6c"},{"problem":34,"code":"#(letfn [(rangex\n  [from to]\n  (if (< from to)\n    (cons from (rangex (+ from 1) to))))] (rangex %1 %2))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":34,"code":"(fn [low high]\n  (->> low\n       (iterate inc)\n       (take-while (partial > high))))","user":"5a95c639e4b0d174b936c75e"},{"problem":34,"code":"(fn myrange [start end]\n  (loop [s start\n        e end\n        acc []]\n    (if (= (last acc) (- e 1))\n      acc\n      (recur (inc s) e (conj acc s) ))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn [a b]\r\n    (loop [i (dec b) end a out '()]\r\n        (if (< i end)\r\n            out \r\n            (recur\r\n                (dec i)\r\n                a   \r\n                (conj out i)\r\n            )   \r\n        )   \r\n    )   \r\n)","problem":34,"user":"4f85a75ce4b033992c121c48"},{"problem":34,"code":"(fn [& inp]((fn rnge [buffer lst l](if (= l (+ 1 (last buffer))) buffer (rnge (conj buffer (+ 1 (last buffer ))) lst l))) [(first inp)] inp (last inp)))","user":"59406b94e4b069cdc2982bfd"},{"code":"(fn [ s e ]\n  ( #(if (= %2 e) %1 (recur (concat %1 (list %2)) (inc %2))) '() s))","problem":34,"user":"4fc43a8ee4b081705acca346"},{"code":"(fn ! [a b]\n  (if (< a b)\n    (cons a (! (inc a) b))\n    nil\n  )\n)","problem":34,"user":"51db8244e4b0e067a9bbadc7"},{"problem":34,"code":"(fn my-range[start end]\n  (loop [result [] x start]\n    (if (= x end)\n      result\n      (recur (conj result x) (inc x)))))","user":"578f8a0ae4b0ebec4cfb7596"},{"problem":34,"code":"(fn rng [x y]\n  (cond\n   \t(= x y) nil\n   \t:else (conj (rng (inc x) y) x)\n  )\n)","user":"56433d34e4b08d4f616f5f23"},{"problem":34,"code":"(fn gen-until [agg v upper_bound]\n  (if (< v upper_bound)\n    (gen-until (conj agg v) (inc v) upper_bound)\n    agg)) []","user":"5dde6251e4b0948ae9d9add3"},{"code":"#(loop [i % col '()] (if (= i %2) (reverse col) (recur (inc i) (conj col i))))","problem":34,"user":"52570aeae4b0541d1855ba42"},{"problem":34,"code":";; (fn f\n;;    ([st ed] (f st ed []))\n;;    ([st ed rst]\n;;     (if (= st ed)\n;;       rst\n;;       (f (inc st) ed (conj rst st)))))\n\n;; #(take (- %2 %1) (iterate inc %1))\n\n;; (fn [from to]\n;;     (take-while #(< % to)\n;;                 (iterate inc from)))\n\n;; (fn [a b]\n;;     (map-indexed + (repeat (- b a) a)))\n\n;; #(reductions + %1 (repeat (- %2 %1 1) 1))\n\n\n(fn [st ed]\n    (letfn [(get-rst [st ed rst]\n              (if (= st ed)\n                rst\n                (recur (inc st) ed (conj rst st))))]\n      (get-rst st ed [])))","user":"591ad160e4b09b4ee5954bdf"},{"problem":34,"code":"(fn [low high]\n  (loop [coll '()\n         low low\n         high (dec high)]\n    (if (< high low) \n      coll\n      (recur (conj coll high) low (dec high))\n )))","user":"5566463ee4b0c656e3ff1831"},{"problem":34,"code":"(fn [start end]\n  (letfn [(new-range-combined-helper [storage start end]\n    (if (= start end)\n      storage\n      (new-range-combined-helper (conj storage (- end 1)) start (- end 1)))\n    )]\n  (new-range-combined-helper '() start end)))","user":"50f89404e4b0aafb827eb204"},{"code":"#(loop [x (dec %2) xs ()] (if (< x %1) xs (recur (dec x) (cons x xs))))","problem":34,"user":"501688f7e4b052339a490e7a"},{"problem":34,"code":"(fn [start stop]\n    (letfn [(nested [v acc]\n            (if (= v stop)\n              acc\n              (nested (+ v 1) (conj acc v))))]\n    (reverse (nested start ()))))","user":"55f1f0d1e4b06e875b46ce3b"},{"problem":34,"code":"(fn [lo hi]\n    (loop [i lo, out [] ]\n        (if (< i hi) (recur (inc i) (conj out i)) out)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [i j] (for [n (iterate inc i) :while (< n j)] n))","problem":34,"user":"4ffb529be4b0678c553fc3cd"},{"code":"(fn myrange [lower upper]\n  (if (= lower upper)\n    '()\n    (cons lower (myrange (inc lower) upper))))","problem":34,"user":"4ecaf637535d6d7199dd370c"},{"problem":34,"code":"(fn bla [min max]\n    (if (= min max)\n      '()\n      (cons min (bla (inc min) max))))","user":"4fb41dace4b081705acca2aa"},{"problem":34,"code":"(fn myrange [start end] \n  (if (< start end) (conj (myrange (inc start) end) start) '()))","user":"572a3d77e4b0f4d77e651230"},{"problem":34,"code":"(fn rangelist [x y] \n    (loop [i (- y 1)\n           acc ()]\n      (if (< i x)\n        acc\n        (recur (dec i) (conj acc i)))))","user":"594e6b8ce4b07ddc2dafaeac"},{"problem":34,"code":"(fn my-range\n  ([x y]\n   (my-range (conj [] x) (inc x) y))\n  ([coll x y]\n   (if (= x y)\n     coll\n     (my-range (conj coll x) (inc x ) y))))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":34,"code":"(fn [a b]\n  (loop [i a\n         res []]\n    (if (>= i b)\n      res\n      (recur (inc i) (conj res i)))))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":34,"code":"(fn my-range [from until]\n  (if (>= from until)\n    '()\n    (conj (my-range (+ 1 from) until) from)))","user":"5ef381a3e4b07c55ae4a053c"},{"code":"(fn range2 [s e]\n  (if (= s e)\n    '()\n    (cons s (range2 (inc s) e))))","problem":34,"user":"52090654e4b0e152394d76ee"},{"problem":34,"code":"(fn ran [n1 n2]\n  (if (>= n1 n2)\n    nil\n    (cons n1 (ran (inc n1) n2)))\n  )","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn ! [a b] (if (< a b) (concat [a] (! (+ a 1) b) )))","problem":34,"user":"4f1d1299535d64f603146487"},{"code":"(fn f [x y] (flatten ((fn g [x y acc] (if (= x y) acc (conj (conj acc (g (inc x) y acc)) x))) x y '())))","problem":34,"user":"4fb510b5e4b081705acca2b8"},{"code":"#(loop [a (dec %1) b (dec %2) c ()]\n  (if (>= a b)\n      c\n      (recur a (dec b) (conj c b))))","problem":34,"user":"4ffe8193e4b0678c553fc3f4"},{"code":"(fn [low high]\n  (loop [return-value '()\n         counter (dec high)]\n    (if (< counter low)\n      return-value\n      (recur (cons counter return-value)\n             (dec counter)))))","problem":34,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [x y]\n  (loop [cnt x acc []]\n    (if (>= cnt y)\n      acc\n      (recur (inc cnt) (conj acc cnt)))))","problem":34,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [start end]\n  (loop [i (dec end) r '()]\n    (if (> start i)\n      r\n      (recur (dec i) (conj r i)))))","problem":34,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":34,"code":"(fn [lo hi]\n  (loop [i lo res []]\n    (if (= i hi)\n      res\n      (recur (inc i) (conj res i)))))","user":"55eaca20e4b0121d4835fdb4"},{"problem":34,"code":"(fn [start end]\n    (loop [result '()\n           pos (dec end)]\n      (if (< pos start)\n        result \n        (recur (conj result pos) (dec pos)))))","user":"556ff203e4b09a3098a52526"},{"code":"(fn m [a b]\n  (if (< a b)\n      (cons a (m (+ a 1) b))\n      '()))","problem":34,"user":"4eb2d0ae535d7eef3080734e"},{"problem":34,"code":"(fn ! [a b] (if (>= a b) '() (cons a (! (inc a) b))))","user":"560aed59e4b05f002753df11"},{"problem":34,"code":"(fn my-range [start end]\n  (if (< start end)\n    (conj (my-range (inc start) end) start)\n    '()))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":34,"code":"(fn [n m]\n  (take (- m n)\n        (iterate inc n)))","user":"521d064fe4b0c4ef0be830a8"},{"code":"(fn [x y]\n  (loop [f []\n         c x]\n    (if (= c y)\n      f\n      (recur (conj f c) (inc c)))))","problem":34,"user":"52bdd135e4b07a9af579230a"},{"code":"(fn [x y] (map (partial + (dec x))  (take (max (- x y) (- y x)) (reductions + (repeat 1)))))","problem":34,"user":"4fa6a491e4b081705acca1bc"},{"problem":34,"code":"(fn func\n  [x y]\n  (if (= 1 (- y x))\n    (vector x)\n    (conj (func x (- y 1)) (- y 1))\n    )\n  )","user":"56de78fde4b0ea9b8538f83c"},{"problem":34,"code":"(fn f\n  ([a b] (f a b '()))\n  ([a b xs] (if (= a b) xs\n              (f a (dec b) (cons (dec b) xs)))))","user":"53f74528e4b0de5c4184855c"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (take-while (partial > end)\n              (iterate inc start)))","user":"56180d83e4b06b1bb2182a18"},{"problem":34,"code":"(fn [n1 n2] (let [diff (- n2 n1)]\n                  (loop [x n1\n                         y 0\n                         result `()]\n                    (cond (not= y diff)\n                          (recur (inc x) (inc y) (conj result x))\n                          (= y diff)\n                          (reverse result)))))","user":"56940617e4b0dcc4269f410b"},{"problem":34,"code":"(letfn [(myrange [start end] (if (= start end) nil (cons start (myrange (inc start) end))))] myrange)","user":"5d98f616e4b0d3f9b434ad3c"},{"problem":34,"code":"(fn mr [start end]\n  (cons start (lazy-seq\n               (let [n (inc start)]\n                 (if (< n end)\n                   (mr n end))))))","user":"52d95491e4b09f7907dd13a4"},{"problem":34,"code":"(fn f [low up] \n  (loop [result '()\n         low low \n          up  (dec up)]\n     (cond \n       (< up low) result\n        :otherwise (recur (conj result up) low (dec up)))))","user":"524b827ce4b09eba1c0223d7"},{"code":"(fn [l h] (let [f (fn ff [n] (if (< n h) (list* n (ff (inc n))) '()))] (f l)))","problem":34,"user":"52dfc89be4b09f7907dd1405"},{"problem":34,"code":"#(loop [begin %1 end %2 res '()]\n   (if (= begin end)\n     res\n     (recur begin (dec end) (conj res (dec end)))))","user":"5a78cd9ee4b013a48d399777"},{"problem":34,"code":"(fn range'\n  [first last]\n  (if (= first last) \n    '()\n    (conj (range' (inc first) last) first)))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":34,"code":"#(->> %1\n       (iterate inc)\n       (take-while (fn [n] (< n %2))))","user":"60849bd6e4b0736b099e42f2"},{"code":"(fn [x y] (loop[myNL '() cD x](if(< cD y)\n                               (recur\n                                (conj myNL cD)\n                                (+ cD 1)\n                                )\n                               (reverse myNL)\n                               )\n           )\n  )","problem":34,"user":"5177cacde4b0261ae665b877"},{"problem":34,"code":"#(loop [val %1\n       end %2\n       coll []]\n  (if (= val end)\n    coll \n    (recur (inc val) end (conj coll val))))","user":"5f0c8b0de4b0f30dddfb5d4c"},{"code":"(fn [low high]\r\n    (loop [curr low acc []]\r\n        (if (>= curr high) acc\r\n                        (recur (inc curr) (conj acc curr)))\r\n        ))","problem":34,"user":"523dd963e4b06956f8342ca1"},{"code":"(fn [f l & acc]\n  (let [last-el (last acc)]\n    (cond (nil? acc) (recur f l [f])\n          (= (dec l) last-el) acc\n          :else (recur f l (conj acc (inc last-el))))))","problem":34,"user":"4f343e60e4b0e243712b1eb5"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [result [] n start]\n    (if (= n end) result\n                  (recur (conj result n) (inc n)))))","user":"5c36d110e4b0d62ef62d9f6a"},{"code":"#(loop [curr %  out []]\n  (if (= curr %2)\n \t(seq out) \n    (recur (inc curr) (conj out curr))))","problem":34,"user":"4e5af45e535d8a8b8723a2b1"},{"code":"(fn\n   ([x y & lst]\n      (if (< x y)\n        (recur (inc x) y (cons x lst))\n        (reverse lst))))","problem":34,"user":"4fca4c37e4b0ee37620e184f"},{"problem":34,"code":"(fn rang\n  [from to]\n  (loop [i from, result []]\n    (cond\n     (>= i to) result\n     :else (recur (inc i), (conj result i)))))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":34,"code":"#(loop [i0   %1\n        i1   %2\n        acc '()\n       ] \n  (if (= i1 i0)\n    acc\n    (recur i0 (dec i1) (conj acc (dec i1)))))","user":"54e606c3e4b024c67c0cf803"},{"problem":34,"code":"(fn [x y] (loop [acc []\n                 n x]\n            (if (= n y)\n              (seq acc)\n              (recur (conj acc n) (inc n)))))","user":"56e4427ce4b03a7c14b85a4c"},{"code":"(fn [s e] \n  (loop [s s e e acc []]\n    (if (= s e)\n      acc\n      (recur (inc s) e (conj acc s)))))","problem":34,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn rng [a b] (when (< a b) (cons a (rng (inc a) b))))","problem":34,"user":"507a396be4b08327cd804a69"},{"problem":34,"code":"(fn [from to]\n  (loop [t (dec to)\n         res '()]\n    (if (= from t)\n      (conj res t)\n      (recur (dec t) (conj res t)))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":34,"code":"(fn [from to] (->> from (iterate inc) (take (- to from))))","user":"59f8b925e4b0ca45a743a327"},{"problem":34,"code":"(fn [l r] (take-while #(< % r) (iterate inc l)))","user":"4f1ff504535d64f6031464a6"},{"code":"(fn\n  [start end]\n  (loop [next start\n         end end\n         s []]\n    (if (= next end)\n      s\n      (recur (inc next) end (conj s next)))))","problem":34,"user":"4eb9d8f8535dfed6da9c6d61"},{"problem":34,"code":"#(loop [i %1 out '()]\n   (if (= i %2)\n     (reverse out)\n     (recur (inc i) (conj out i))))","user":"5596af34e4b04c1e5c31d758"},{"problem":34,"code":"(fn\n  [from to]\n  (loop [li '[]\n         prev from]\n    (if\n      (>= prev to)\n      li\n      (recur \n       (conj li prev) \n       (+ 1 prev)))))","user":"586a657de4b0f14aab7c88bd"},{"problem":34,"code":"(fn [start end]\n  (reverse\n    (loop [result '()\n           current start]\n      (if (= current end)\n        result\n        (recur (conj result current) (inc current))))))","user":"56e87a9ce4b04a395b9a03f0"},{"code":"(fn bob [min max]\n  (if (>= min max) \n    nil\n    (cons min (bob (inc min) max)\n    )\n  )\n)","problem":34,"user":"50217818e4b00bba4502f7a7"},{"code":"(fn rang [lbound rbound] \n   (if (< lbound rbound)\n      (cons lbound (rang (inc lbound) rbound))\n      [] ))","problem":34,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":34,"code":"(fn [start end]\n  (loop [acum []\n         st start\n         en end]\n    (if (= st end)\n      acum\n      (recur (conj acum st) (inc st) en))\n    ))","user":"53ecaf1ce4b0d648e757f4b4"},{"code":"(fn my-range [start end]\n  (when (not= start end)\n    (cons start (my-range (inc start) end))))","problem":34,"user":"515c9f14e4b069911535cf16"},{"code":"(fn [a b]\n  (apply list (take (- b a) (iterate inc a))) )","problem":34,"user":"4e95c771535dbda64a6f6b39"},{"problem":34,"code":"#(loop [a %1 b %2 ss []]\n   (if (not= a b)\n     (recur (inc a) b (conj ss a))\n     ss\n     )\n   \n   )","user":"54897284e4b0e286459a11e6"},{"code":"(fn rng [b e]\n  (if \n    (= b e)\n    (list)\n    (cons b (rng (+ 1 b) e))))","problem":34,"user":"5364697ce4b0243289761e62"},{"code":"(fn foo [from to] (when (< from to) (conj (foo (inc from) to) from)))","problem":34,"user":"5196b573e4b04c0af7ff3c24"},{"code":"(fn fromto\n  [s f]\n  (cond\n   (>= s f) '()\n   :else (conj (fromto (inc s) f) s)))","problem":34,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn [start stop] \n  (take-while #(< % stop) \n              (iterate #(+ % 1) start)))","problem":34,"user":"4e52777f535d302ef430da76"},{"problem":34,"code":"(fn urutan [x y] (take (- y x) (iterate inc x)))","user":"593910eae4b02506e01a29f4"},{"problem":34,"code":"(fn rng [lower upper] (if (< lower upper) (cons lower (rng (inc lower) upper))))","user":"550772cee4b021ccfedb96a8"},{"problem":34,"code":"#(loop [res [] from %1]\n      (if (>= from %2)\n        res\n        (recur (conj res from) (inc from))))","user":"57762e67e4b0979f89651630"},{"problem":34,"code":"(fn [min max]\n    (take-while #(< % max) (iterate inc min)))","user":"53c3397be4b00fb29b221279"},{"problem":34,"code":"(fn ra [a b] (if (= a b)\n                nil\n            \t(conj (ra (+ a 1) b) a)))","user":"551ebcd7e4b08d5046aa8a4a"},{"problem":34,"code":"(fn [start end] \n  (take-while #(< % end)\n              (iterate inc start))\n      )","user":"565b4d7fe4b068f2fe63dc01"},{"code":"( fn [l h]\n  (reverse ( (fn myrange[a acc]\n     (if (= a h)\n           acc\n           (myrange (inc a) (conj acc a) ) \n     ) ) l '() ) ) )","problem":34,"user":"4e333091535deb9a81d77f25"},{"code":"(fn [t f] (for [x (take (- f t) (iterate inc t)) :when (and (>= x t) (< x f))] x))","problem":34,"user":"4ed60c9c535d10e5ff6f52dd"},{"problem":34,"code":"(fn range_ [from to] (when (< from to) (cons from (range_ (inc from) to))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":34,"code":"(fn [start end]\n  (loop [x start\n         acc '()]\n    (if (= x end)\n      acc\n      (recur (inc x) (concat acc [x])))))","user":"5b21ad60e4b03cfeda66ed54"},{"code":"(fn myrange [start end]\n  (if (>= start end) \n    ()\n    (cons start (myrange (+ start 1) end))))","problem":34,"user":"536234a5e4b0243289761e4d"},{"code":"(fn [d f]\n    (loop [x [], e d]\n      (if (== e f)\n      (reverse x)\n      (recur (cons e x) (inc e)))))","problem":34,"user":"501fcd59e4b0cb6ebc0a42ec"},{"problem":34,"code":"(fn rang [a b]\n  (if (< a b)\n    (cons a (rang (+ 1 a) b))\n    []))","user":"5d2e5065e4b01671435dbcae"},{"problem":34,"code":"(fn [x y] (loop [y (dec y)\n                 c '()]\n            (if (> x y)\n              c\n              (recur (dec y) (conj c y)))))","user":"509ecefde4b08df8156e9e35"},{"problem":34,"code":"(fn my-range [from to]\n  (reverse\n  (loop [result nil\n         curr from]\n    (if (= curr to)\n      result\n      (recur (cons curr result) (inc curr))\n      )\n    )\n  )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":34,"code":"(fn sk-range [start end]\n  (take (- end start) (iterate inc start))\n  )","user":"5884f377e4b0f1effa3b76a8"},{"code":"#( if (< %2 %3) (recur (cons %2 %) (inc %2) %3) (reverse %)) '()","problem":34,"user":"4fa9da14e4b081705acca1e7"},{"problem":34,"code":"#(loop [entry %1 acc []] (if (= %2 entry) acc (recur (inc entry)(conj acc entry))))","user":"56b2652ae4b0982f16b37e04"},{"problem":34,"code":"#(loop [start %1 end %2 result []] (if (= start end) result (recur (inc start) end (conj result start))))","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"(fn\n    [n1 n2]\n    (take (java.lang.Math/abs (- n1 n2)) (iterate inc n1)))","problem":34,"user":"52a7634ae4b0c58976d9ac16"},{"code":"#(loop [start % max %2 all '()] (if (= start max) (reverse all) (recur (inc start) max (conj all start))))","problem":34,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":34,"code":"#(loop [a %1 b %2 res[]] \n  (if (= a b)\n      res\n      (recur a (dec b) (cons (dec b) res))))","user":"5979cd36e4b02382a38ad1d8"},{"problem":34,"code":"(fn f [a b] (if (= a b) nil (cons a (f (inc a) b))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn [a b]\r\n  (loop [cnt a xs []]\r\n    (if (>= cnt b)\r\n      (list* xs)\r\n      (recur (inc cnt) (conj xs cnt)))))","problem":34,"user":"4fd9f5dbe4b05e33b9224f41"},{"code":"(fn rang[a b]\n  (if (= a b) \n    '()\n    (cons a (rang (inc a) b))\n))","problem":34,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn [start end]\n  (loop [integers (list (dec end))]\n    (if\n      (= start (first integers))\n      integers\n      (recur (cons (dec (first integers)) integers)))))","problem":34,"user":"50e19748e4b0ec0e353386e5"},{"problem":34,"code":"(fn [s f]\n  (loop [c s res []]\n    (if (= c f)\n      res\n      (recur (inc c) (conj res c)))))","user":"56719c3ce4b05957ce8c610c"},{"problem":34,"code":"(fn [x y]\n  (letfn [(my-range [x y]\n    (if (< x y)\n\t  (lazy-seq (cons x (my-range (inc x) y)))\n      '()))]\n  (my-range x y)))","user":"5a7ae674e4b03baeef9276d5"},{"code":"#(loop [n %1 result []]\n  (if (= n %2)\n    result\n    (recur (inc n) (concat result [n]))))","problem":34,"user":"4e726914535d5021c1a89661"},{"problem":34,"code":"(fn ran [start end]\n  (take (- end start) (iterate inc start)))","user":"56205609e4b064ca9f4b16df"},{"problem":34,"code":"(fn my-range [a b] (if (< a b) (conj (my-range (inc a) b) a) '()))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":34,"code":"(fn range' [x y]\n  (lazy-seq\n   (when (< x y)\n   \t(cons x (range' (inc x) y)))))","user":"6066266de4b069485764ddd2"},{"problem":34,"code":"(fn \n  ([min max & r]\n    (if (= min max)\n      (reverse r)\n      (recur (+ min 1) max (conj r min))\n    )\n  )       \n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":34,"code":"(fn [lower upper]\n  (loop [iter lower \n         values []]\n    (if (= iter upper)\n      (seq values)\n      (recur (inc iter) (conj values iter)))))","user":"5cf8864be4b0b71b1d808a84"},{"problem":34,"code":"(fn [start end]\n  (loop [iteration start\n         target end\n         accumulator '()]\n    (if (= iteration target)\n      (reverse accumulator)\n      (recur (inc iteration) target (cons iteration accumulator)))))","user":"52561295e4b0541d1855ba03"},{"problem":34,"code":"#(loop [start %1 end []] (if (= start %2) end (recur (inc start) (conj end start) )))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn [x y]\n  (loop [curr x lim (- y 1) ret []]\n    (if (< curr lim)\n      (recur (+ 1 curr) y (conj ret curr))\n      (seq ret))))","problem":34,"user":"4e7e8485535db169f9c79716"},{"code":"(fn [x y]\n  (loop [acc () current x]\n    (if (= current y)\n      (reverse acc)\n      (recur (conj acc current) (inc current)))))","problem":34,"user":"506b8242e4b0eda3100c090a"},{"problem":34,"code":"(fn [x1 x2] (take (- x2 x1)(iterate #(inc %) x1)))","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn [low hi] (take (- hi low) (iterate inc low)))","problem":34,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":34,"code":"(fn f[begin end]\n  (loop [curr begin\n         target '()]\n    (if (= curr end)\n      target\n      (recur (inc curr) (concat target [curr]))\n    )\n  )\n)","user":"5c337305e4b0d62ef62d9f48"},{"problem":34,"code":"(fn myfn\n  ([s e] (myfn s e ()))\n  ([s e res]\n   (if (= s e)\n     (reverse res)\n     (recur (+ s 1) e (cons s res)))))","user":"5ec03772e4b00a66d4a95289"},{"problem":34,"code":"(fn[deb fin](take (- fin deb) (iterate inc deb)))","user":"55757e81e4b05c286339e063"},{"problem":34,"code":"#(loop [start %1 end %2 result []]\n   (if (< start end)\n     (recur (inc start) end (conj result start))\n     result))","user":"5712854ce4b07c98581c3a89"},{"code":"(fn [start end]\n  (loop [x start\n         accum []]\n   (if (< x end)\n     (recur (inc x) (conj accum x))\n     accum)))","problem":34,"user":"4ef41f26535dced4c769f230"},{"problem":34,"code":"(fn upto [start end]\r\n  (loop [here start\r\n         there []]\r\n    (if (= here end)\r\n      there\r\n      (recur (inc here) (conj there here)))))","user":"4ddc5d0a535d02782fcbea05"},{"problem":34,"code":"(fn sss [a b] (if (= a b) nil (conj (sss (+ a 1) b) a )))","user":"5a8d55a8e4b05369db4d2514"},{"code":"#(\n  loop [a (- %2 1) c ()]\n    (if (= a (- %1 1))\n\t    c\n\t    (recur (- a 1) (conj c a))))","problem":34,"user":"4e46ac46535dc968683fc4b5"},{"problem":34,"code":"( fn my-range [ current-val max-val ] \n  ( if ( = ( inc current-val ) max-val ) \n    [ current-val ]\n    ( concat [ current-val ] ( my-range ( inc current-val ) max-val))))","user":"4fbb7010e4b081705acca2e7"},{"problem":34,"code":"(fn myrange\n\t[x y]\n\t(if (= x y)\n\t\tnil\n\t\t(lazy-seq\n\t\t\t(conj (myrange (inc x) y) x)\n\t\t)\n\t)\n)","user":"55e46caae4b050e68259b451"},{"problem":34,"code":"(fn r [mn mx]\n  (if (= mn mx)\n    []\n    (cons mn (r (inc mn) mx) )\n  )\n)","user":"570d0548e4b0b0fb43fd06d2"},{"code":"#(loop [start %1 n %2 c '()] (if(= n start) c (recur start (dec n) (conj c (dec n)))))","problem":34,"user":"52117ea7e4b07aea8afc4f70"},{"problem":34,"code":"(fn [a b] (take-while #(< %1 b) (iterate inc a)))","user":"55306f9de4b076ab5578f814"},{"problem":34,"code":"(fn foo1\n  [begin end]\n  (loop\n    [x begin coll []]\n    (if (= x end)\n      (reverse coll)\n      (recur\n        (inc x )\n        (cons x coll))\n      )))","user":"598d0dc3e4b02b9968b84d18"},{"problem":34,"code":"(fn my-range [s e]\n  (if (= (+ s 1) e)\n    (list s)\n    (cons s (my-range (+ s 1) e))))","user":"562e05e0e4b0a45d2ff83023"},{"problem":34,"code":"(fn rg [a b]\n  (if (= a b)\n    '()\n    (concat (list a) \n            (rg (+ a 1) b)\n            )\n    )\n  )","user":"541ef7e2e4b01498b1a71a92"},{"problem":34,"code":"(fn range* [a b]\n    (loop [x a\n           y []\n           ]\n      (if (= x b)\n        y\n        (recur (inc x) (conj y x)))))\n        \n; Like this solution\n;\n; #(take (- %2 %1) (iterate inc %1))","user":"5eccc5c2e4b016b56eae058f"},{"problem":34,"code":"(fn [x y] (loop [end (dec y)  elem '()] (if( > x end)  elem (recur (dec end)  (conj  elem end)))))","user":"5510ed89e4b06e50f9beb18e"},{"problem":34,"code":"(fn [a b]\n  (take (- b a)\n        (iterate inc a)))","user":"5c387c51e4b0d62ef62d9f83"},{"problem":34,"code":"(fn get-range [lower upper]\n  (if (= lower (dec upper))\n    (list lower)\n    (concat (list lower) (get-range (inc lower) upper))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":34,"code":"(fn [from to]\n  ((fn myRange [from to result]\n     (if (< from to)\n       (myRange (inc from) to (conj result from))\n       result))\n   from to []))","user":"578fc072e4b0ebec4cfb759a"},{"code":"(fn ! [a n]\n     (cond\n      (> n (+ a 1)) (into [a] (! (+ a 1) n))\n      (= n (+ a 1)) [a]\n      )\n     )","problem":34,"user":"50d6d7eee4b0159555a1fc76"},{"problem":34,"code":"(fn makeRange [lo hi] (if (>= lo hi) '() (concat (list lo) (makeRange (+ 1 lo) hi))))","user":"58950f29e4b00487982d5270"},{"problem":34,"code":"#(let [counter (atom %)\n       accum (atom  [])]\n   (while (< @counter %2)\n     (swap! accum conj @counter)\n     (swap! counter inc)\n     )\n   (seq  @accum)\n   )","user":"5d3e8c3de4b01671435dbd73"},{"problem":34,"code":"(fn this [x y]\n  (if (= x y) '()\n    (conj (this (+ x 1) y) x)))","user":"542da97ae4b0dad94371f2ba"},{"problem":34,"code":"(fn [a b]\n       (\n         (fn iter [acc n]\n           (if (< n a)\n             acc\n             (iter (cons n acc) (- n 1))\n             )\n           )\n         []\n         (- b 1)\n         )\n       )","user":"5a55114ae4b05d388ecb6c37"},{"problem":34,"code":"#(take (- %2 %1)\n      (iterate inc %1))","user":"54302691e4b0dad94371f2d7"},{"problem":34,"code":"(fn [from to]\n    (loop [xs [] n from]\n      (if (= n to)\n        xs\n        (recur (concat xs [n]) (inc n))\n        )\n      )\n    )","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn rng [lower upper]\n  (loop [acc [], x lower]\n    (if (= x upper)\n      acc\n      (recur (conj acc x) (inc x)))))","problem":34,"user":"4f0f9df7535d0136e6c22342"},{"problem":34,"code":"(fn my-range [start end]\n  (loop [col []\n         index start]\n    (if (= index end)\n      col\n      (recur (conj col index) (inc index)))))","user":"5d80f328e4b0915913b1d372"},{"problem":34,"code":"(fn ir[a b] \n  (take (- b a) (iterate inc a)))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":34,"code":"(fn [start end]\n    (loop [result [] count 0 num start]\n        (if (= count (- end start))\n            result\n            (recur (conj result num) (inc count) (inc num) ))))","user":"5896735fe4b00487982d529d"},{"code":"(fn [x y] (loop [result [] a x b y] (\n           if (= a b)  result \n           \t(recur (conj result a) (inc a) b))))","problem":34,"user":"51623490e4b009fba0926e42"},{"code":"(fn rnge[a b] (if (= a b) \n            []\n            (lazy-seq (cons a (rnge (+ a 1) b)))))","problem":34,"user":"524740e7e4b05ef8e38e635d"},{"problem":34,"code":"#(let [n (- %2 %1)\n       coll (repeat n %1)\n       ]\n   (map-indexed (fn [x, i] (+ x i)) coll)\n   )","user":"5eb0878ae4b00a66d4a951f5"},{"problem":34,"code":"(fn [x y]\n  (if (> x 0)\n    (drop (dec x) (take (dec y) (iterate inc 1)))\n\t(if (> y 0)\n      (concat (reverse (drop 1 (take (+ 2 (- 0 x)) (iterate dec 1)))) \n              (take (dec y) (iterate inc 1)))\n      (reverse (drop (inc (- 0 x)) (take (+ 2 (- 0 y)) (iterate dec 1)))))))","user":"5e78e8d3e4b085ba37836dfd"},{"problem":34,"code":"(fn [x y]\n  (loop [x x\n         y (dec y)\n         z ()]\n    (if (< y x) z\n      (recur x (dec y) (conj z y)))))","user":"5e07cf97e4b0978307768fb9"},{"problem":34,"code":"(fn [start end] \n  (loop [i start my-seq []]\n    (if (< i end)\n      (recur (inc i) (conj my-seq i))\n        (seq my-seq)\n       )\n    )\n  )","user":"5fa2792ae4b0f0ebd91b77ef"},{"problem":34,"code":"(fn [low high]\n  (loop [ret [], i low]\n    (if (= i high)\n      ret\n      (recur (conj ret i) (inc i)))))","user":"59ee6801e4b0966464fe6a1f"},{"problem":34,"code":"#(loop [count %1 max %2 rang []]\n   (if(= count max)\n     rang\n     (recur (inc count) max (conj rang count))\n     ))","user":"5841872be4b089d5ab817e06"},{"problem":34,"code":"(fn [x y] (loop [srange () i (- y 1) j (- x 1)] (if (= j  i) srange (recur (conj srange i)  (dec  i) j))))","user":"54f6f00fe4b01ecee9d88814"},{"problem":34,"code":"(fn [start end]\n  (loop [start start list []]\n    (if (= start end)\n      list\n      (recur (inc start) (conj list start)))))","user":"5756e218e4b02ea1147992e5"},{"code":"(fn [l h]\n  (take (- h l) (iterate inc l)))","problem":34,"user":"50928ecfe4b097f48cc38570"},{"code":"(fn [d u]\r\n  (take (- u d) (iterate inc d)))","problem":34,"user":"4de18de7535d08e6dec9fde8"},{"problem":34,"code":"(fn [begin end]\n  (loop [myvector [] begin begin end end]\n  \t  (if (= begin end)\n      \t  myvector\n          (recur (conj myvector begin) (inc begin) end)\n      )\n  )\n)","user":"579be21fe4b05b1deef9adff"},{"problem":34,"code":"(fn fib \n   ([s e] (fib s e []))\n   ([s e result]\n     (if (>= s e) \n       result\n       (recur (inc s) e (conj result s)))\n   ))","user":"559b55d6e4b066d22e731f54"},{"problem":34,"code":"(fn ran [a b] (take (- b a) (iterate inc a)))","user":"5fb8fe30e4b03f550f448223"},{"problem":34,"code":"(fn [start end]\n  (loop [start start\n         r []]\n    (if (>= start end)\n      r\n      (recur (inc start) (conj r start)))))","user":"565654dae4b0f9d632dd849f"},{"problem":34,"code":"#(loop [x %1, y %2, result '()] \n   (if (>= x y) \n     (reverse result) \n     (recur (inc x) \n            y \n            (conj result x))))","user":"590aaa78e4b047aa04b199c0"},{"code":"(fn [a b]\n(loop [rs '() A a]\n(if (= A b) (reverse rs)\n(recur (merge rs A) (inc A))\n)\n))","problem":34,"user":"518aec06e4b06da86c1973c2"},{"problem":34,"code":"(fn my-range [x y]\n  (if (= x y)\n    '()\n    (cons x (my-range (inc x) y))))","user":"595a885be4b066ee0a44afc4"},{"code":"(fn rng [start end]\n  (loop [ran '() y (- end 1)]\n    (cond\n     (< y start) ran\n     (= y start) (conj ran y)\n     :else (recur (conj ran y) (dec y))\n    )\n   )\n )","problem":34,"user":"516e9d9be4b06aac486e5b2b"},{"code":"(fn f [l u]\n    (lazy-seq\n      (if (< l u)\n        (cons l (f (inc l) u)))))","problem":34,"user":"4fdc3065e4b05e33b9224f6b"},{"code":"#(map-indexed + (repeat (- %2 %1) %1))","problem":34,"user":"4f713878e4b07046d9f4f00a"},{"code":"(fn create-range [start end]\n  (loop [i start\n         acc []]\n    (prn acc)\n    (if (>= i end)\n      acc\n      (recur (inc i) (conj acc i)))))","problem":34,"user":"52a6ed15e4b0c58976d9ac0a"},{"code":"(fn [st en] (reverse (loop [st st en en result '()] (if (= st en) result (recur (inc st) en (conj result st))))))","problem":34,"user":"52e25beee4b09f7907dd1433"},{"code":"(fn my-range [a b]\n    (if (= a b)\n      '()\n      (flatten (list a (my-range (inc a) b)))))","problem":34,"user":"511e763ce4b03e81d390ac29"},{"problem":34,"code":"(fn [start end] \n  (take \n   (- end start) \n   (iterate inc start)))","user":"58c5ad55e4b021aa9917ed42"},{"code":"(fn my-range [begin end]\n  (if (>= begin end) \n    ()\n    (lazy-seq\n     \t(cons\n         \tbegin\n         \t(my-range (inc begin) end)))))","problem":34,"user":"53800d99e4b06839e8705ebd"},{"problem":34,"code":"(fn vrange\n  ([beg end]\n   (loop [x beg\n          y nil]\n     (if (< x end)\n       (recur (inc x) (cons x y))\n       (sort y)))))","user":"57942207e4b0e215f87e8469"},{"problem":34,"code":"(fn [a b]\n   (loop [a a\n          b b\n          aux ()]\n     (if (= a b)\n       (reverse  aux )\n       (recur (inc a) b (conj aux a )))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn [a b]\n  (loop [acc '(), i (dec b)]\n    (if (< i a)\n      acc\n      (recur (conj acc i) (dec i)))))","problem":34,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [n m]\n  (rest (reductions + (dec n) (repeat (- m n) 1))))","problem":34,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"#(loop [res [] i %1]\n   (if (= %2 i)\n     res\n     (recur (conj res i) (inc i))))","problem":34,"user":"53820087e4b06839e8705ecf"},{"problem":34,"code":"(fn f [x y] (if (>= x y) '() (conj (f (+ x 1) y) x)))","user":"54f97e22e4b01ecee9d8883a"},{"problem":34,"code":"(fn range2 [start stop]\n  (let [f (fn my-range\n            ([] (my-range start))\n            ([n] (concat [n] (lazy-seq (my-range (inc n))))))]\n            (take-while #(< % stop) (f))))","user":"5703ce0fe4b08d47c97781fd"},{"problem":34,"code":"(fn my-range [x y] (if (= x (dec y))\n                   (list x)\n                   (cons x (my-range (inc x) y))))","user":"6093cc08e4b00e9e6653c3e1"},{"problem":34,"code":"(fn ran\n  [from to]\n  (cond\n   (< (- to from) -1) (cons from (ran (- 1 from) to))\n   (> (- to from) 1) (cons from (ran (+ 1 from) to))\n   :else (list from)\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":34,"code":"(fn [from to] (seq ((fn [_seq _curr _end] (if (= _end _curr) _seq (recur (conj _seq _curr) (+ _curr 1) _end))) [] from to)))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":34,"code":"(fn rn [l h]\n  (if (< l h) (cons l (rn (inc l) h))\n      '()))","user":"57af41bce4b0fbc9809a2731"},{"problem":34,"code":"(fn [start end]\n  (loop [cnt end\n         col '()]\n    (let [decd (dec cnt)]\n      (if (< decd start)\n        col\n        (recur decd (conj col decd))))))","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn rr [l r]\n  (if (= l r)\n    '()\n    (cons l (rr (+ 1 l) r))))","problem":34,"user":"516282c3e4b0e6d3c4734711"},{"code":"(fn ranger [from to]\n  (take (- to from) (iterate inc from)))","problem":34,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":34,"code":"(fn [a b] \n  (loop [i a \n         r []]\n    (if (< i b)\n      (recur (+ i 1)\n         (conj r i))\n      r))\n  )","user":"561e8b11e4b064ca9f4b16c0"},{"problem":34,"code":"(fn [start end] \n\t(letfn [(range-helper [start end lst]\n      (if (= start end)\n        lst\n        (range-helper (inc start) end (conj lst start))))]\n\t(range-helper start end [])))","user":"5893c64ce4b00487982d524b"},{"problem":34,"code":"#(loop [i %, r []] (if (< i %2) (recur (inc i) (conj r i)) r))","user":"51a88e7fe4b08d8ec191b813"},{"problem":34,"code":"(fn [start end]\n  (loop [number start,\n         end end,\n         result []]\n     (if (= end number)\n       result\n       (recur (inc number) end (conj result number)))))","user":"53b0765ae4b047364c044484"},{"problem":34,"code":"(fn my-range [frst lst]\n  (let [i (atom (- frst 1))\n        dist (- lst frst)]\n    (repeatedly dist #(swap! i inc))))","user":"5537f30fe4b09218d5f44fd8"},{"code":"(fn[lower upper]\n    (take-while #(< % upper)\n      (iterate inc lower)))","problem":34,"user":"4e58bcd4535d8a8b8723a296"},{"problem":34,"code":"(fn range2 [start end]\n    (if (= start end)\n      '()\n      (cons start (range2 (inc start) end))))","user":"57027310e4b08d47c97781e2"},{"problem":34,"code":"#(loop [start %1 end %2 result '()]\n   (if (= start end)\n     (sort result)\n     (recur (inc start) end (conj result start))))","user":"546be022e4b00cfc9eacc171"},{"problem":34,"code":"(fn [low high] \n  (take-while (partial > high) (reductions + low (repeat 1))))","user":"54d6f22de4b0a52adc2e2023"},{"code":"(fn [ lo hi]\n\t( loop [x hi, acc '() ]\n    \t(if ( > x lo) \n        \t( recur (dec x) (conj acc (dec x))  )\n            acc\n        )\n    )\n)","problem":34,"user":"51e23b80e4b01e519814642b"},{"problem":34,"code":"(fn [low high]\n  (loop [l low ret []]\n    (if (>= l high)\n      ret\n      (recur (inc l) (conj ret l)))))","user":"59a512b7e4b066c664927d5e"},{"problem":34,"code":"(fn my-range [start end]\n  (reverse ((fn [start end acc]\n    (if (= start end)\n      acc\n      (recur (inc start) end (conj acc start)))) start end '())))","user":"5645a7f9e4b0284900eef609"},{"problem":34,"code":"(fn foo [a b]\n  (if (= a b) nil\n    (conj (foo (inc a) b) a)))","user":"5760715de4b08062f99a4e96"},{"problem":34,"code":"(partial (fn [output start end] \n           (if (= start end)\n             (into '() output)\n             (recur (cons start output) (inc start) end))) '())","user":"58db362be4b0a4d5acaab675"},{"problem":34,"code":"#( (fn f [it,limit,col] (if (= it limit) col (f (inc it) limit (concat col (list it))))) %1 %2 (list))","user":"53f9fe41e4b0de5c41848575"},{"problem":34,"code":"(fn homehome [start end] (if (= start end) () (cons start (homehome (inc start) end))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [x y] (loop [i x j y acc []] (if (= i j) acc (recur (inc i) j (conj acc i)))))","problem":34,"user":"4fcb5d1fe4b0ee37620e1858"},{"code":"(fn my-range [x y]\n  (cond\n    (= x y) '()\n    :else (cons x (my-range (inc x) y))))","problem":34,"user":"50456731e4b01f6c9a8b236b"},{"problem":34,"code":"#(loop [s %1 e %2 l []]\n   (if (= s e) l (recur (inc s) e (conj l s))))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":34,"code":"(fn mrange [x y]\n   (cond\n    (= x y) '()\n    :else (cons x (mrange (+ 1 x) y))))","user":"529a3c37e4b02ebb4ef75094"},{"problem":34,"code":"(fn rg [a b]\n  (if (= a b) nil\n  (cons a (rg (inc a) b))))","user":"50e09313e4b061dbdced7233"},{"code":"(fn foo [x y] \n   (loop [n x stop y lst ()]\n  \t(if (= n stop)\n\t\t\t(reverse lst)\n\t\t\t(recur (inc n) stop (conj lst n))\n\t\t)\n\t)\n)","problem":34,"user":"4ec3072a535dcc7ae8597d50"},{"problem":34,"code":"(fn [f t]\n    (take \n      (- t f)\n      ((fn r\n\t      ([] (r f))\n\t      ([n] (lazy-seq (cons n (r (inc n)))))))))","user":"54ca35c6e4b057c6fda3a254"},{"problem":34,"code":"(fn [i u] (loop [li '() x i]\n             (if (= x u)\n               (reverse li)\n               (recur (conj li x) (inc x)))))","user":"5f6b35c3e4b02876ed9fd04d"},{"code":"#(loop [i %1 n []]\n   (if (< i %2)\n     (recur (inc i) (conj n i))\n     n))","problem":34,"user":"50bce014e4b0594b91591c63"},{"problem":34,"code":"(fn r [s e] (if (>= s e) nil (conj (r (inc s) e) s)))","user":"5c53127ee4b0fb8c5ffd99ef"},{"code":"(fn [low high]\n  \"34. Write a function which creates a list of all integers in a given range.\"\n  (loop [n low\n         acc (list)]\n    (if (>= n high)\n      (reverse acc)\n      (recur (inc n) (conj acc n)))))","problem":34,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":34,"code":"(fn [fr to]\n  (map #(+ (first %) fr) (map-indexed vector\n   (take (- to fr) (repeat 0)))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn [a b]\n  (loop\n    [x a\n      da-stuff []]\n        (if (< x b)\n          (recur (inc x) (conj da-stuff x)) da-stuff)))","problem":34,"user":"50989786e4b04e098a4c7274"},{"code":"(fn my_range[start stop]\n  (if (= start (dec stop))\n    (list start)\n    (concat (list start) (my_range (inc start) stop))\n    )\n  )","problem":34,"user":"513f53c6e4b051389b345b40"},{"code":"(fn \r\n [from to]\r\n (loop [f from acc [] ] \r\n  (if (= f to) acc \r\n   (recur (inc f) (conj acc f)  ) ) ) )","problem":34,"user":"4e6ff01e535d5021c1a8962b"},{"code":"(fn [start end] (take (- end start) (iterate #(+ 1 %) start)))","problem":34,"user":"500e6c4ee4b04a05d36fcc05"},{"problem":34,"code":"#(loop [x %1, xs ()]\n       (if (< x %2)\n         (recur (inc x) (cons x xs))\n         (reverse xs)))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"#(take (- %2 %1) (iterate inc (+ (- %1 1) 1)))","problem":34,"user":"4fc3b0d4e4b081705acca343"},{"problem":34,"code":"(fn [min max] \n  (loop [i min\n         acc []]\n    (if (= i max)\n      acc\n      (recur (inc i) (conj acc i))\n    )\n  )  \n)","user":"5822b578e4b04b46fc4b0fa4"},{"code":"(fn [x y] \n  (loop [n x\n         se ()]\n      (if (= n y)\n         se\n         (recur (inc n) (concat se (list n))))))","problem":34,"user":"4f891abde4b033992c121c77"},{"code":"(fn[a b]\n  (loop [r () i (dec b)]\n    (if (< i a) r (recur (conj r i) (dec i)))))","problem":34,"user":"4e7bc07c535db169f9c796b9"},{"problem":34,"code":"(fn [a b] (loop [coll [] i a] (if (< i b) (recur (conj coll i)(inc i)) coll)))","user":"561e2b33e4b064ca9f4b16ba"},{"problem":34,"code":"(fn [start end]\n  (take-while #(< % end)\n   (iterate inc start)))","user":"57275898e4b0c5bde472c13e"},{"problem":34,"code":"(fn [low up]\n    (loop [i low\n           result ()]\n            (cond \n                (< i up)\n                (recur (inc i) (conj result i))\n                \n                :else\n                (reverse result))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":34,"code":"(fn make-range [from to]\n        (take (- to from) (iterate inc from)))","user":"54ecd716e4b024c67c0cf85a"},{"problem":34,"code":"#(loop [x (list %1) y %2 z (- %2 %1)]\n   (if (= z 1)\n     (sort x)\n     (recur (conj x (dec y)) (dec y) (dec z) )))","user":"582c526ae4b051871117bf88"},{"problem":34,"code":"(fn [a b] \n  (reduce (fn [buf item]\n            (conj buf (inc (last buf)))\n           )\n           [a]\n          (repeat (- b a 1) 1)\n  ))","user":"57ce3fede4b0c746388ab8a6"},{"problem":34,"code":"(fn [x1 y1]\n  (loop [x x1, ans []]\n    (if (< x y1)\n      (recur (inc x) (conj ans x))\n      ans)))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [lo hi]\n     (loop [n0 lo n1 hi res []]\n       (if (< n0 (- n1 1))\n         (recur (+ n0 1) n1 (conj res n0))\n         (conj res n0)\n         )\n       )\n     )","problem":34,"user":"52ae886de4b0c58976d9acab"},{"problem":34,"code":"(fn my-range [low high]\n(if (= low high)\n'()\n(conj (my-range (inc low) high) low)))","user":"5db5d09be4b010eb3c36cd31"},{"problem":34,"code":"#(loop [start %1 acc []]\n    (if (= start %2)\n      (seq acc)\n      (recur (inc start) (conj acc start))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":34,"code":"(fn [a b]\n  (let [n (- b a 1)\n        f (fn f [r v]\n            (if (= r 0)\n              v\n              (f (- r 1) (conj v (+ 1 (last v))))))]\n    (f n [a])))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [x y] (loop [n x c '()] (if (= y n) (reverse c) (recur (+ n 1) (cons n c)))))","problem":34,"user":"4f4003d9e4b0e243712b1fa5"},{"problem":34,"code":"(fn range' [x y] (if (>= x y) () (conj (range' (inc x) y) x)))","user":"5a08f951e4b01bb0ae8afdfd"},{"problem":34,"code":"(partial (fn [result least most]\n  (if (>= least most)\n    result\n    (recur (conj result (dec most)) least (dec most)))) '())","user":"5455510fe4b0e397800069df"},{"code":"#(loop [x [%1]] \n   (if (= (last x) (dec %2)) \n     x \n     (recur (into x [(+ 1 (last x))]))))","problem":34,"user":"5186448fe4b0da5a5be3bac9"},{"code":"(fn a [x y] (if (= x y) '() (cons x (a (inc x) y))))","problem":34,"user":"50f07b21e4b0bdaecbb47dc2"},{"code":"(fn rng [start stop] \n\t(let [s (transient [])] \n\t\t(loop [i start]\n\t\t\t(if (> stop i) \n\t\t\t\t(do (conj! s i) (recur (+ i 1)))\n\t\t\t\t(persistent! s)\n\t\t\t)\n\t\t)\n\t)\n)","problem":34,"user":"5151aa14e4b03e678e393ad4"},{"problem":34,"code":"(fn f3 [start end] (loop [x start\n                            v []] \n                       (if (>= x end) \n                         v \n                         (recur (inc x) (conj v x)))))","user":"58b2f085e4b0ebc645576d15"},{"problem":34,"code":"(fn[a b]\n  ((fn [r i]\n    (if (< i b)\n      (recur (conj r i) \n              (inc i))\n      r\n      )\n    ) [] a)\n  )","user":"554b2151e4b0a04f79299580"},{"code":"(fn [s e]\n  (reverse (loop\n    [\n      xs '()\n      x s]\n    (if (< x e)\n      (recur (conj xs x) (inc x))\n      xs))))","problem":34,"user":"4fb1325de4b081705acca276"},{"code":"(fn [start end]\n  (loop [s start e end acc ()]\n    (if (>= s e) (reverse acc) (recur (inc s) e (cons s acc)))))","problem":34,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"#(loop [nums [] x %] (if (<= %2 x) nums (recur (conj nums x) (inc x))))","problem":34,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":34,"code":"(fn [fst lst]\n    (loop [fst fst\n           lst lst\n           acc []]\n      (if (= fst lst)\n        acc\n        (recur (inc fst) lst (conj acc fst)))))","user":"560e9a2de4b05f002753df52"},{"code":"(fn f [a b]\n  (if (= a b)\n    nil\n    (cons a (f (inc a) b))))","problem":34,"user":"4e9e6bd6535dbda64a6f6b96"},{"problem":34,"code":"(fn rng [from to]\n  (if (= from to)\n    nil\n    (conj (rng (inc from) to) from)))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"(fn [s e]\n  (loop [i s r '()]\n    (if (= i e) r\n      (recur (inc i) (concat r (list i))))))","problem":34,"user":"523bc0e6e4b07becd5be21f9"},{"problem":34,"code":"(fn [a b]\n  (loop [_list () x a]\n    (if (= x b)\n      (sort _list)\n      (recur (cons x _list) (inc x)))))","user":"590d0bc8e4b047aa04b199fa"},{"code":"(fn [start end]\n  (loop [i start\n         acc []]\n    (if (< i end)\n      (recur (inc i) (conj acc i))\n      acc)))","problem":34,"user":"4f045946535dcb61093f6bba"},{"code":"(fn rng [acc a b]\n  (if (= a b)\n    acc\n    (rng (conj acc a) (inc a) b)))\n[]","problem":34,"user":"517adc6ce4b0925c997201c4"},{"code":"(fn\n  [start end]\n  (take-while #(< % end) (iterate inc start)))","problem":34,"user":"52e44a22e4b09f7907dd144e"},{"code":"(fn myrange [s e]\n  (if (< s e)\n      (cons s (myrange (inc s) e))\n      []))","problem":34,"user":"500900dee4b0144d4f561e42"},{"code":"(fn [x y]\n  (loop [x x\n         res []]\n    (if (< x y) (recur (inc x) (cons x res))\n      (reverse res))))","problem":34,"user":"527236d4e4b03e8d9a4a741f"},{"problem":34,"code":"(fn [start end] (reduce (fn [r v] (concat r (list (inc (last r))))) (list start) (take (- end start 1) (repeat 1))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":34,"code":"(fn rng\n  ([l u r] (if (= l u) r (rng (inc l) u (conj r l) ) ))\n  ([l u] (rng l u []))\n)","user":"54257124e4b01498b1a71b09"},{"code":"#(loop [start %1 end %2 r '()]\n    (if(>= start end)\n      (reverse  r)\n      (recur (inc start) end (cons start r))\n      )\n    )","problem":34,"user":"4ea85846535d7eef308072f9"},{"problem":34,"code":"(fn bar [start end]\n    (if (= end start) [] \n      (cons start (bar (inc start) end))))","user":"54133900e4b01498b1a719de"},{"code":"(fn [a b] (loop [a a b b acum []] (if (= a b) (seq acum) (recur (+ a 1) b (conj acum a)))))","problem":34,"user":"511a0374e4b06c8af011181a"},{"problem":34,"code":"#(loop [s %1 e %2 c '()] \n   (if (= s e) c (recur s (dec e) (cons (dec e) c ))))","user":"55632016e4b0c656e3ff17e4"},{"problem":34,"code":"(fn [start stop] (loop [cur start acc []] (if (= cur stop) acc (recur (inc cur) (conj acc cur)))))","user":"5c527129e4b0fb8c5ffd99de"},{"problem":34,"code":"(fn ff [x y]\n  (if (>= x y) \n    '()\n    (cons x \n          (ff (inc x) y)\n     )\n   )\n )","user":"5710140fe4b09c608db7042e"},{"problem":34,"code":"(fn [x y] (reverse (reduce \n(fn [a b] (conj a (+ (or (first a) 1) b)))\n(list x) \n(repeat (- y x 1) 1))))","user":"5d84545ee4b0915913b1d38b"},{"code":"(fn rng [l h](if (>= l h)'()(cons l (rng (inc l) h))))","problem":34,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn myrange [mn mx]\r\n    (letfn [(myrangec [n acc]\r\n  \t      (if (= n mx) acc (myrangec (+ n 1) (cons n acc))))]\r\n\t   (reverse (myrangec mn '()))))","problem":34,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":34,"code":"#(loop [i %1 a []] (if (<= %2 i) a (recur (inc i) (conj a i))))","user":"4fc4e9b5e4b081705acca352"},{"code":"(fn [n1 n2] (loop [x n1 y n2 result '()] (if (= x y) (reverse result) (recur (inc x) y (conj result x)))))","problem":34,"user":"4f1684c7535d64f60314644b"},{"problem":34,"code":"(fn\n  [a b]\n  (let [inner (fn\n                [acc n]\n                (if (> (- b 1) (last acc))\n                  (recur (conj acc n) (inc n))\n                  acc))]\n    (rest (inner [a] a))))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn rng [x y]\n  (if (< x y)\n    (cons x (rng (inc x) y))))","problem":34,"user":"50d46d53e4b09cc622d65a69"},{"code":"(fn rng [start end]\n    (loop [s [], i start]\n      (if (< i end) (recur (conj s i) (inc i)) s)\n    ))","problem":34,"user":"52e295fae4b09f7907dd1437"},{"problem":34,"code":"(fn [b e]\n  (loop [b b r []]\n    (if (>= b e)\n      r\n      (recur (inc b) (conj r b)))))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn my-range [from until]\n  (let [diff (- until from)\n        step (if (pos? diff) inc dec)]\n    (take diff (iterate step from))))","problem":34,"user":"4efa3d4b535dced4c769f270"},{"problem":34,"code":"(fn[from to](take (- to from) (iterate inc from)))","user":"575ab695e4b02ea114799350"},{"problem":34,"code":"(fn my-range [start end]\n  (let [diff (- end start)]\n    (take diff (iterate inc start))))","user":"601c39eee4b0bf4ca6b10937"},{"problem":34,"code":"(fn ran [s e]\n  (if (= s e)\n    '()\n    (concat [s] (ran (inc s) e))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [start end]\n        (let [res (loop [res [] x start]\n              (if (>= x end)\n                  res\n                (recur (into res [x]) (+ x 1))))]\n             (seq res)))","problem":34,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [start end]\n  (loop [curr start\n         coll (list start)]\n    (if (= curr (- end 1))\n      (reverse coll)\n      (recur (inc curr) (conj coll (inc curr))))))","problem":34,"user":"5361a4f2e4b0243289761e47"},{"code":"(partial (fn ran [l a b] (if (< a b)\n                          (recur (cons a l) (inc a) b)\n                          (reverse l)\n                          ) \n          ) \n() )","problem":34,"user":"4f706cc3e4b07046d9f4eff7"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         current start]\n  (if (= current end)\n    result\n    (recur (conj result current) (inc current)))\n  )\n)","user":"5f3ee0d9e4b004f08c61c55c"},{"code":"(fn f [a b]\n  (if (< a b)\n    (cons a (lazy-seq (f (inc a) b)))\n    '()))","problem":34,"user":"504f865ee4b0a02f9cffde90"},{"problem":34,"code":"(fn rng [s e]\n  (if (= s e)\n    '() (conj (rng (inc s) e) s)))","user":"524d91eae4b0a16e35cf6dee"},{"code":"#(take(-%2%1)(iterate inc%1))","problem":34,"user":"4e7eff9e535db966e863cc38"},{"code":"(fn [a b]\n  (take (- b a) (iterate inc a)))","problem":34,"user":"4ea67906535d7eef308072e4"},{"code":"(fn my-range\n  [first last]\n  (take (- last first) (iterate (partial + 1) first)))","problem":34,"user":"5073e7fde4b054001656accb"},{"problem":34,"code":"(fn [s e] (loop [x s col ()] (if (< x e) (recur (inc x) (concat col (list x))) col)))","user":"56b49f72e4b0982f16b37e23"},{"code":"(fn myrange\n  [begin end]\n  (if (>= begin end)\n    '()\n    (cons begin\n          (myrange (inc begin) end))))","problem":34,"user":"520693e1e4b0bf4f1882c829"},{"problem":34,"code":"(fn [a b]\n  (loop [b b\n          acc nil]\n       (if (>= a b)\n         acc\n         (recur\n           (dec b)\n           (conj acc (dec b))))))","user":"4e435681535dc968683fc4a1"},{"problem":34,"code":"(fn [a b]\n  (loop [r [a]]\n    (if (= (last r) (dec b))\n      r\n      (recur (conj r (inc (last r)))))\n    ))","user":"5d35fb9be4b01671435dbd1c"},{"problem":34,"code":"(fn [start end]\n  (for [numb (take (- end start) (iterate inc start))\n        :while (< numb end)] numb))","user":"5c9419fae4b048ec896c5a2b"},{"problem":34,"code":"(fn [s e]\n  (loop [x s acc []]\n    (if (< x e)\n      (recur (inc x) (conj acc x))\n      acc)))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":34,"code":"#(loop [output '() start %1]\n   (if (= start %2)\n     (reverse output)\n     (recur (cons start output) (inc start))))","user":"51671557e4b013fc800656c4"},{"code":"(fn [start end]\n  (loop [cur start, o []]\n    (if (>= cur end)\n      o\n      (recur (inc cur) (conj o cur)))))","problem":34,"user":"4eb6d3ab535d7eef30807370"},{"code":"(fn [s e]\r\n  (take (- e s) (iterate inc s)))","problem":34,"user":"4df168bd535d08e6dec9fe1d"},{"code":"(fn ranger\n  [s e]\n  (when (< s e)\n    (concat [s] (ranger (inc s) e))))","problem":34,"user":"52527192e4b0541d1855b8af"},{"problem":34,"code":"(fn rng\n  ([st sp] (rng st sp []))\n  ([st sp lst]\n   (if (< st sp)\n       (rng (+ 1 st) sp (conj lst st))\n     lst)))","user":"5d5eb086e4b0c9e5857d4ff7"},{"code":"(fn [from to] \n  (loop [to to res nil]\n    (if (= to from)\n      res \n      (recur (dec to) (conj res (dec to))))))","problem":34,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn myrange [s e]\n  (if (< s (dec e))\n    (conj (myrange (inc s) e) s)\n    (list s))\n)","problem":34,"user":"4f82f1b9e4b033992c121c0f"},{"code":";; this call to iterate makes a lazy sequence from start to infinity!\n(fn my-range [start end]\n  (take (- end start) (iterate inc start)))","problem":34,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn z [ s e ] \n  (if (= s e)\n    ()\n    (conj (z (+ s 1) e) s)))","problem":34,"user":"52bb27fee4b07a9af57922df"},{"code":"(fn [lower upper]\n  (loop [curr (dec upper), acc ()]\n    (if (< curr lower)\n      acc\n      (recur (dec curr) (conj acc curr)))))","problem":34,"user":"4ea4fe1f535d7eef308072cf"},{"code":"#(loop [i [%1] I %2] (if (>= (inc (last i)) I) i (recur (conj i (inc (last i))) I)))","problem":34,"user":"4fa1289de4b0dcca54ed6d58"},{"problem":34,"code":"(fn \n  [start end]\n  (for [x (iterate inc start)\n    :while (< x end)]\n    x))","user":"548db64ce4b0e286459a121c"},{"code":"#(reductions + %1 (repeat (- %2 %1 1) 1))","problem":34,"user":"4f280840e4b0d6649770a010"},{"code":"(fn [a b]\n\t(take  (- b a) (iterate inc a)))","problem":34,"user":"537d4a69e4b06839e8705e8a"},{"problem":34,"code":"(fn [a b]\n  (loop [n a\n         acc []]\n    (if (= n b)\n      acc\n      (recur (inc n) (conj acc n)))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":34,"code":"(fn [a b]\n  (loop [res []\n         n a]\n    (if (>= (inc (or (last res) a)) b)\n      res\n      (recur (conj res n)\n             (inc n)))))","user":"512e31e9e4b0b740abc59823"},{"code":"(fn my-range [n m]\n  (cond\n    (= n m) '() \n    :else (cons n (my-range (inc n) m))))","problem":34,"user":"50d2f044e4b03c62ef244483"},{"problem":34,"code":"(fn f [b t]\n  (if (= b t)\n    []\n    (into [b] (f (+ 1 b) t))))","user":"56483562e4b0284900eef629"},{"code":"(fn [a b]\n  (loop [curr a\n         coll nil]\n    (if (< curr b)\n      (recur (inc curr) (conj coll curr))\n      (reverse coll))))","problem":34,"user":"4e89dbce535d3e98b8023283"},{"code":"(fn [l u]\n  (take (- u l)\n    (iterate inc l)))","problem":34,"user":"4f107e0e535d64f60314641c"},{"problem":34,"code":"(fn [a b]\n  (loop [start a\n         end   b\n         res   []]\n    (if (>= start end)\n      res\n      (recur (inc start) end (conj res start))\n      )\n    ))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [start stop]\n  (take (- stop start) (iterate inc start))\n  )","problem":34,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":34,"code":"(fn [s e] (loop [v s, rc []]\n\t(if (>= v e) rc\n    (recur (inc v) (conj rc v)) )\n))","user":"55adf4d7e4b03311e7b732af"},{"problem":34,"code":"(fn [a b]\n    (loop [x (dec b)\n           result ()]\n      (if (= x a)\n        (conj result x)\n        (recur (dec x) (conj result x))\n        )))\n\n; Best solution I've seen: #(take (- %2 %) (iterate inc %))","user":"54889b50e4b0e286459a11d4"},{"problem":34,"code":"(fn [n end]\n    (loop [cnt n, tmp-list []]\n      (if (>= cnt end)\n          (if (seq tmp-list) (seq tmp-list) ())\n        (recur (inc cnt) (conj tmp-list cnt)))))","user":"5c852e3ae4b0c8042a70ce78"},{"code":"(fn[a,b](take (- b a) (iterate (partial + 1) a)))","problem":34,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":34,"code":"(fn [x y] (take(- y x) (iterate inc x)) )","user":"53d3856fe4b00fb29b22132b"},{"problem":34,"code":"(fn __ [from to]\n    (if (< from to)\n        (cons from (__ (inc from) to))))","user":"55c9ff22e4b0e31453f649f3"},{"problem":34,"code":"(fn [s e]\n  (loop [r '()\n         c s]\n    (if (>= c e)\n      r\n      (recur (concat r [c]) (inc c)))))","user":"56504dc2e4b0284900eef6bc"},{"problem":34,"code":"#(loop[x %1 y %2 z []] (if(> x (dec y)) z (recur (inc x) y (conj z x))))","user":"54dce6dbe4b024c67c0cf78d"},{"code":"#(loop [a % result []] (if (< a %2) (recur (inc a) (conj result a)) result))","problem":34,"user":"4fb1d7ace4b081705acca281"},{"code":"(fn r [start stop]\n  (take (- stop start)\n        (cons start (lazy-seq (r (inc start) stop)))))","problem":34,"user":"528e7433e4b0239c8a67aedf"},{"problem":34,"code":"(fn rn [st en]\n  (when\n   (> en st)\n   (cons st (rn (+ st 1) en))\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":34,"code":"(fn [s t ] (reverse (reduce #(conj %1 (+ (first %1) (do (identity %2) (identity 1)))) (list s) (repeat (- t s 1) s))))","user":"54edcf96e4b024c67c0cf866"},{"problem":34,"code":"(fn [x y] \n  (take (- y x) (iterate inc x) ) )","user":"570306cae4b08d47c97781ec"},{"problem":34,"code":"(fn [low high]\n  (loop [result []\n         current low]\n    (if (< current high)\n      (recur (conj result current) (inc current))\n      result)))","user":"56c427bbe4b05cc29241ee94"},{"code":"#(loop [x %1 l []] (if (< x %2) (recur (inc x) (conj l x)) l))","problem":34,"user":"4daec4a0edd6309eace4d15e"},{"problem":34,"code":"(fn a [b c] (when (< b c) (cons b (a (+ b 1) c))))","user":"5644149de4b0018b46ad8c07"},{"problem":34,"code":"(fn [x y]\n  (loop [x x acc []]\n    (if (= x y)\n      acc\n      (recur (inc x) (conj acc x)))))","user":"565e0934e4b068f2fe63dc30"},{"problem":34,"code":";#(loop [s %,l %2,r '()]\n;   (if (>= s l) r\n;     (recur s (dec l) (conj r (dec l)))))\n\n#(take (- %2 %) (iterate inc %))","user":"555e9dbfe4b0a2eb076a39bc"},{"code":"(fn [x y]\n  (loop [x x\n         result '()]\n    (if (= x y)\n      result\n      (recur (inc x)\n             (concat result (list x))))))","problem":34,"user":"504dffe2e4b078edc5f5938b"},{"problem":34,"code":"(fn custom-range [from to]\n  (take (- to from) (iterate inc from)))","user":"58ee9b14e4b056aecfd47db0"},{"problem":34,"code":"#(loop [x %1 y []]\n    (if (= x %2)\n      y\n      (recur (inc x) (conj y x))))","user":"57f17cb5e4b0bfb2137f5c0b"},{"code":"#(reverse (loop [x %1, coll ()] (if (= x %2) coll (recur (inc x) (conj coll x)))))","problem":34,"user":"517dc49be4b0fcc7c5d37d38"},{"problem":34,"code":"(fn [from to] ((fn rec [col next] (if (= next to) col (rec (conj col next) (inc next)))) [] from))","user":"5c6e8b57e4b0fca0c1622755"},{"problem":34,"code":"(fn [x y]\n  (loop [lst ()\n         i x]\n    (if (= i y)\n      (reverse lst)\n      (recur (cons i lst)\n             (inc i)))))","user":"59e55cc8e4b08badc2a0c555"},{"code":"#((fn r [a b] (if (< a b) (cons a (r (+ a 1) b)) '())) %1 %2)","problem":34,"user":"4dda5d07535d02782fcbe9f2"},{"code":"(fn [a b]\n    \t(take (- b  a) (iterate inc a)))","problem":34,"user":"4f4daa4ae4b03ad3f0c10cac"},{"problem":34,"code":"(fn [s e] (loop [n s res '()] (if (= n e) (reverse res) (recur (inc n) (conj res n)))))","user":"5292feb4e4b0239c8a67af39"},{"code":"#(loop [b (dec %2)\n          c '()]\n     (if (= (first c) %)\n       c\n       (recur (dec b) (cons b c))))","problem":34,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":34,"code":"(fn [l r]\n  (loop [i l\n         ret []]\n    (if (= i r)\n      ret\n      (recur (inc i)\n             (conj ret i)))))","user":"607b04e5e4b0a637ed780373"},{"problem":34,"code":"(fn [start end]\n  (take-while (partial > end)\n              (iterate inc start)))","user":"56eab346e4b04a395b9a0410"},{"problem":34,"code":"(fn [start end]\n  (->>  start\n   (iterate inc)\n   (take-while #(< %1 end))))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [x y] (take (- y x) ((fn num [z] (cons z (lazy-seq (num (inc z))))) x)))","problem":34,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [lower upper]\n  (loop [temp (dec upper)\n         result '()]\n    (if (< temp lower)\n      \tresult\n      \t(recur (dec temp) (cons temp result)))))","problem":34,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn r [a b] \n  (if (= a (- b 1)) \n\t\t[(- b 1)] \n\t\t(cons a (r (+ a 1) b))))","problem":34,"user":"500ec491e4b00fff93030f9e"},{"problem":34,"code":"#(reverse (into () ((fn [start end]\n    (loop [st start\n         result []]\n     (if (>= st end)\n       result\n       (recur (inc st) (conj result st))))) %1 %2)))","user":"54411506e4b032a45b869369"},{"code":"#(map-indexed (fn [x y] (+ y x)) (take (- %2 %1) (repeat %1)))","problem":34,"user":"53562d00e4b04ce2eb3ed263"},{"problem":34,"code":"(fn [lower upper]  (loop [res [], l lower] (if (< l upper) (recur (conj res l) (inc l)) res)))","user":"55b77c7ce4b01b9910ae29a3"},{"problem":34,"code":"(fn [start end]\n  (loop [result []\n         count start]\n    (if (= count end)\n      result\n      (recur (conj result count) (inc count)))))","user":"5d9e8e40e4b000c986472bc2"},{"code":"(fn [x, y]\n  (loop [cnt x\n         result []]\n    (if (< cnt y)\n      (recur (inc cnt) (conj result cnt))\n      ;else\n      result\n      )\n    )\n  )","problem":34,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn [start end]\n  (loop [s start e end v []]\n    (if (< s e)\n        (recur (inc s) e (conj v s))\n        v)))","problem":34,"user":"5060d137e4b0dc10a69545a0"},{"problem":34,"code":"#(let [start %1 end %2]\n  (loop [n %1 data []]\n   (if (>= n end)\n     data\n     (recur (inc n) (conj data n)))))","user":"58ea39c6e4b056aecfd47d19"},{"problem":34,"code":"(fn [low high]\n  (loop [n (dec high)\n         result '()]\n    (if (= low n)\n      (conj result n)\n      (recur (dec n) (conj result n)))))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"#(loop [n %1, res '()] (if (= n %2) (reverse res) (recur (inc n) (cons n res))))","problem":34,"user":"51bdc609e4b0ff155d51d2b3"},{"code":"#(take (- %2 %) ((fn in [a] (lazy-seq (cons a (in (+ 1 a))))) %))","problem":34,"user":"4f6cf933e4b07046d9f4efc2"},{"problem":34,"code":"(fn my-range [start end]\n  \t (take(- end start) (iterate inc start)))","user":"5db1e852e4b010eb3c36cd0a"},{"problem":34,"code":"#(loop [acc [] f %1]\n  (if (< f %2)\n    (recur (conj acc f) (inc f))\n    acc\n    )\n  )","user":"58d28c70e4b03c36ff7e5901"},{"code":"(fn [x y]\n   (loop [ans [x]\n          x (inc x)]\n     (if (< (first ans) (dec y))\n       (recur (cons x ans) (inc x))\n       (reverse ans))))","problem":34,"user":"52fa4f48e4b047fd55836ff7"},{"problem":34,"code":"(fn [i n]\n  (loop [index i, accum []]\n    (if (= index n)\n      accum\n      (recur (inc index) (conj accum index))\n      )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"problem":34,"code":"#(loop [start %1\n        accum []]\n   (if (>= start %2)\n     \taccum\n     \t(recur (inc start) (conj accum start))))","user":"5764cc01e4b0994c1922fc05"},{"problem":34,"code":"(fn [start end]\n  (loop [x start ans []]\n    (if (= x end)\n      ans\n      (recur (inc x) (conj ans x)))))","user":"5746061ae4b009280f9f2b5b"},{"problem":34,"code":"(fn my-range [lower upper]\n  (loop [int-range '()\n         current upper]\n    (if (<= current lower)\n      int-range\n      (recur (cons (dec current) int-range) (dec current)))))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn r [a b]\n  (sort (loop [x a ys '()]\n          (if (= x (- b 0)) (concat ys) (recur (+ x 1) (cons x ys) ) )\n          ))\n)","problem":34,"user":"52d829a8e4b09f7907dd1389"},{"code":"(fn [b e] (take-while (partial > e) (iterate inc b)))","problem":34,"user":"51f59607e4b0abb92f97f9d5"},{"problem":34,"code":"(fn [a b]\n  (loop [reca a recs '()]\n    (if (= reca b)\n      recs\n      (recur (inc reca) (concat recs (repeat 1 reca)))\n    )\n  )\n)","user":"554756b8e4b0a04f79299549"},{"code":"(fn [start end]\n  (loop [i start, xs []]\n    (if (= i end)\n      xs\n      (recur (inc i) (conj xs i)))))","problem":34,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":34,"code":"(fn [x, y]\n  (take (- y x) (iterate inc x)))","user":"56990b68e4b0542e1f8d143a"},{"code":"(fn [x y] (loop [acc '() i x]\r\n  (if (= y i) (reverse acc)\r\n              (recur (cons i acc) (inc i)))))","problem":34,"user":"4ddbd934535d02782fcbe9fc"},{"problem":34,"code":"(\n  letfn [(make-range [curr end acc]\n                     (if (= curr end)\n                       (reverse acc)\n                       (make-range (+ curr 1) end (cons curr acc))\n                     )\n        )]\n  (fn [start end] (make-range start end '()))\n )","user":"53bd6ad0e4b0d9a98559a6cf"},{"problem":34,"code":"(fn [low high]\n   (loop [low low, ret []]\n     (if (>= low high)\n       (if (seq ret)\n         (seq ret)\n         ())\n       (recur (inc low) (conj ret low)))))","user":"5c2dfca3e4b0d62ef62d9efc"},{"problem":34,"code":"#(take-while (fn [n] (> %2 n)) (iterate inc %1))","user":"532dbd3ce4b019098a6f8b40"},{"code":"(fn prange [x y] (if (= x y) () (cons x (prange (+ x 1) y))))","problem":34,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":34,"code":"(fn ImplementRange [n1 n2] \n  (if (= n1 n2) \n    (list) \n    (cons n1 (ImplementRange (inc n1) n2))))","user":"607508f3e4b069485764de54"},{"problem":34,"code":"(fn my-range\n  [start end]\n  (if (= end start)\n    []\n  \t(conj (my-range start (dec end)) (dec end))))","user":"53e57ba2e4b036ad0777e45c"},{"code":"(fn [n1 n2] (take (- n2 n1) (iterate #(inc %) n1)))","problem":34,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn f [x y] (when (< x y) (cons x (f (inc x) y)) ))","problem":34,"user":"52d2e54ae4b099d49816f0b9"},{"code":"(fn [l h] (reverse\n  (loop [x {}\n         low l\n         high h]\n         (if (= low high)\n            x\n            (recur (cons low x) (inc low) high)))))","problem":34,"user":"4ebbc2dd535dfed6da9c6d73"},{"code":"#(loop [ end (dec %2) result () ] (if (< end %1) result (recur (dec end) (conj result end))))","problem":34,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn [start stop] \n  (take-while #(not (= % stop)) (iterate inc start)))","problem":34,"user":"4ef667c4535dced4c769f24c"},{"code":"(fn [start end]\n  (loop [lst [], nxt start]\n    (if-not (< nxt end)\n      lst\n      (recur (conj lst nxt) (+ nxt 1))\n    )\n  )\n)","problem":34,"user":"4defd021535d08e6dec9fe13"},{"code":"(fn [s n] \n  (loop [i s l []] \n    (cond \n     (>= i n) l\n     :else (recur (+ i 1) (conj l i)))))","problem":34,"user":"5128554ee4b03a34742b430a"},{"problem":34,"code":"(fn [a b]                                                                                                     \n  (loop [acc []                                                                                               \n         a a]                                                                                                 \n    (if (= a b)                                                                                               \n      acc                                                                                                     \n      (recur (conj acc a) (inc a)))))","user":"541b41d1e4b01498b1a71a65"},{"code":"#(loop [i %1, j %2, z []]\n   (if (= i j) z\n     (recur (inc i) j (conj z i))))","problem":34,"user":"50d4c940e4b09cc622d65a71"},{"code":"(fn [x y]\n  \t(take (- y x) (iterate inc x)))","problem":34,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn myrange [a b]\n   (cond (>= a b) '()\n         :else (conj (myrange (+ a 1) b) a)))","problem":34,"user":"5313a2bfe4b08068f379ed0b"},{"problem":34,"code":"(fn [s l]  \n  ((fn rr [s h acc]\n    (if (> h s) \n      (rr s (dec h) (conj acc (dec h)))\n      acc)) s l '()))","user":"55ad59cde4b03311e7b732a7"},{"problem":34,"code":"(fn [s e]\n  (loop [start s\n         lst '()]\n    (if (< start e)\n      (recur (inc start) (conj lst start))\n      (reverse lst))))","user":"560a7775e4b05f002753defa"},{"problem":34,"code":"(fn rng [a b] (when (< a b) (cons a (lazy-seq (rng (inc a) b)))))","user":"54c23252e4b045293a27f5fc"},{"problem":34,"code":"#(take (Math/abs (- %1 %2)) (iterate inc %))","user":"5ce97826e4b0a17bb84e2bc0"},{"code":"(fn [lo hi]\n  ((fn nrhelp [l h s]\n    (if (= l h)\n      s\n      (cons l (nrhelp (inc l) h s))))\n  lo hi '()))","problem":34,"user":"504e1fdde4b0f6ff3350c468"},{"problem":34,"code":"#(loop [end %2 result (list)]\n  (if (> end %1)\n    (recur (dec end) (conj result (dec end)))\n    result))","user":"56272be6e4b00e49c7cb47c9"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         res []]\n        (if (= i end)\n            res\n            (recur (inc i) (conj res i)))))","user":"5cbc9dace4b026601754b9eb"},{"code":"#(loop [i (dec %2) v '()]\n   (if (< i %1)\n     v\n     (recur (dec i) (cons i v))))","problem":34,"user":"52a3a7ebe4b04e0c58e87c02"},{"code":"(fn rn [start end] (if (= (inc start) end) (list start) (concat (list start) (rn (inc start) end))))","problem":34,"user":"52bdf6bde4b07a9af579230d"},{"problem":34,"code":"#(loop [x %1 result []] (if (< x %2) (recur (inc x) (conj result x)) result))","user":"597fa3fbe4b021a7a535fdbf"},{"code":"(fn [f t]\n  ((fn [acc]\n     (if (< (last acc) (- t 1))\n       (recur (conj acc (inc (last acc)) ))\n       acc)\n     ) [f])\n  )","problem":34,"user":"50a173e4e4b08df8156e9e68"},{"problem":34,"code":"(fn\r\n  [start end]\r\n  (loop [coll (conj '() (dec end))\r\n         stop start\r\n         head (dec end)]\r\n    (if (= head stop)\r\n      coll\r\n      (recur (cons (dec (first coll)) coll) stop (dec (first coll))))))","user":"60c8e662e4b0e0fa5f1b4300"},{"code":"(fn [x, y]\n   (take (- y x) (iterate inc x)))","problem":34,"user":"51227a00e4b068a9582e656b"},{"code":"(fn [x y] \n  (loop [num1 x num2 y result []] \n    (if (= num2 num1) result (recur (inc num1) num2 (conj result num1) ) ) ) )","problem":34,"user":"50fec710e4b0219f3bc8bd97"},{"code":"#((fn [coll start end]\n  (if (= start end)\n    coll\n    (recur (conj coll start) (inc start) end)))\n   [] %1 %2)","problem":34,"user":"5125745ae4b05d10e3e395f9"},{"problem":34,"code":"(fn\n  [a b]\n  (take (- b a) (iterate inc a))\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":34,"code":"(fn [x y] (reductions + (concat (list x) (repeat (- y x 1) 1))))","user":"53fdc4b8e4b0de5c418485ea"},{"code":"(fn [a z] (take (- z a) (iterate inc a)))","problem":34,"user":"5078dedae4b08327cd804a5d"},{"problem":34,"code":"(fn myRange [n m]\n  (if (>= n m)\n   '()\n    (cons n (myRange (+ n 1) m))))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":34,"code":"(fn f [start end] \n  (when (< start end) \n    (cons start \n          (f (+ 1 start) end))))","user":"539118b2e4b0b51d73faaea1"},{"problem":34,"code":"(fn r\n  [a b] (if (< a b) (cons a (r (inc a) b)) (list)))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":34,"code":"(fn [s e]\n  (take (- e s) (iterate inc s))\n  )","user":"563c0d4ce4b0bfe05bf11831"},{"problem":34,"code":"(fn [lower upper] (take (- upper lower ) (iterate inc lower)))","user":"56367c51e4b0bfe05bf117cd"},{"problem":34,"code":"(fn k-range [a b]\n\t   (let [d (- b a)]\n\t\t(loop [n 1 r '()]\n\t\t   (if (> n d) r\n\t\t       (recur (inc n) (cons (- b n) r))))));","user":"5e0f9884e4b099d064962fc0"},{"problem":34,"code":"#( take ( - %2 %1 ) ( iterate inc %1) )","user":"54fc7d89e4b07d26eda61d2b"},{"problem":34,"code":"(fn [start end] (loop [coll (list start), x start, end end]\n                            (if (= x (- end 1))\n                              (reverse coll)\n                              (recur (conj coll (inc x)) (inc x) end))))","user":"563afd5ae4b0bfe05bf11809"},{"problem":34,"code":"(fn [start finish]\n    (take (- finish start) (iterate inc start)))","user":"54180369e4b01498b1a71a13"},{"code":"(fn rr [a b]\n  (if (= a b)\n    '()\n    (conj (rr (+ a 1) b) a)\n  )\n)","problem":34,"user":"4f2a6169e4b0d6649770a03d"},{"problem":34,"code":"(fn [s e]\n  (loop [i s r []]\n    (if (< i e)\n      (recur (inc i) (conj r i))\n      r)))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":34,"code":"(fn [a b] (loop [curr b res '()]\n            (if (= curr a) \n              res\n              (let [n (dec curr)] (recur n (conj res n)))\n                )))","user":"5e0d1947e4b099d064962f92"},{"problem":34,"code":"(fn [start end]\n  (loop [i start\n         c []]\n    (if (= i end)\n      c\n      (recur (inc i) (conj c i)))))","user":"51441ce7e4b0b4fb4ace5f41"},{"code":"(fn [i0 in+1]\n  (loop [i (- in+1 1)\n         xs '()]\n    (if (< i i0)\n      xs\n      (recur (- i 1) (cons i xs)))))","problem":34,"user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":34,"code":"(fn myr [low high] (if (= low high) [] (conj (myr low (dec high)) (dec high))))","user":"54c11fdae4b0ed20f4ff6f1b"},{"problem":34,"code":"(fn\n  my-range\n  ([] (my-range 0 Double/POSITIVE_INFINITY +1))\n  ([upper] (my-range 0 upper +1))\n  ([lower upper] (my-range lower upper +1))\n  (\n    [lower upper step]\n    (if\n      (\n        (cond\n          (pos? step) <\n          (neg? step) >\n          :else not=\n        )\n        lower\n        upper\n      )\n      (lazy-seq (cons lower (my-range (+ lower step) upper step)))\n      '())))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn [a b]\n  (for\n    [x (iterate inc a) :while (< x b)]\n    x))","problem":34,"user":"4f047902535dcb61093f6bcc"},{"code":"(fn r[i j]\n  (take (- j i) (iterate (partial + 1) i))\n)","problem":34,"user":"4eef0828535d305ff5cb7f18"},{"code":"#((fn [x y ret]\n  (if (= x y)\n    ret\n    (recur (inc x) y (conj ret x)))) % %2 [])","problem":34,"user":"4faa5735e4b081705acca1ee"},{"problem":34,"code":"(letfn [(*range-tc-helper [l h acc]\n          (if (= l h)\n            acc\n            (recur (inc l) h (cons l acc))))\n\n        ]\n  (fn *range-tc [l h]\n          (reverse  (*range-tc-helper l h nil))))","user":"53bd476ae4b0d9a98559a6ca"},{"problem":34,"code":"(fn [lo hi] (loop [l lo h hi acc '()] (if (= l h) (reverse acc) (recur (inc l) h (conj acc l)))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"#(loop [l []\n        i %1]\n        (if (= i %2)\n          l\n          (recur (conj l i) (+ i 1))))","problem":34,"user":"508c3d42e4b0f17d83ea26b2"},{"code":"(fn\n[start end]\n  (take (- end start) (iterate inc start))\n)","problem":34,"user":"530c462ae4b02e82168697d9"},{"code":"#(letfn \n  [(f [a] \n    (lazy-seq \n      (cons \n        (+ a (dec %1)) \n        (f (+ a 1)))))] \n  (take \n    (- %2 %1) \n    (f 1)))","problem":34,"user":"4e8d86d5535d65386fec2136"},{"problem":34,"code":"(fn [x y]\n  (loop [i x\n         r []]\n    (if (= i y)\n      r\n      (recur (inc i) (conj r i)))))","user":"55495318e4b0a04f79299566"},{"problem":34,"code":"(do\n  #(loop [x %1\n          xs []]\n     (if (< x %2)\n       (recur (inc x) (conj xs x))\n       xs))\n\n  (fn f [n m]\n    (when (< n m)\n      (lazy-seq\n       (cons n\n             (f (inc n) m)))))\n  \n  (fn [start end]\n    (take (- end start)\n          (iterate inc start))))","user":"5829d9f8e4b051871117bf4d"},{"code":"(fn [from to]\n    ((fn h [res min max]\n      (if\n        (= min max)\n        res\n  (cons min (h res (+ 1 min) max))\n      )) '() from to))","problem":34,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":34,"code":"(fn [x y]\n  (loop [current x goal y result []]\n    (if (= current goal)\n      (seq result)\n      (recur (inc current) goal (conj result current)))))","user":"5f1eebcee4b0f565ad998273"},{"problem":34,"code":"(fn [start stop]\n (let [my-start (atom start)\n       response (atom [])]\n  (while (< @my-start stop) \n    (do \n      (swap! response conj @my-start)\n      (swap! my-start inc)))\n  @response\n))","user":"5e2efec9e4b05b4b015161fd"},{"problem":34,"code":"(fn [start stop]\n  (if (>= start stop) \n  [] \n  (loop [acc [] current start]\n    (if (< current stop)\n      (recur (conj acc current) (inc current))\n       acc))))","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn [x y] (loop [s x e y r []] (if-not (< s e) r (recur (inc s) e (conj r s)))))","problem":34,"user":"53512b55e4b084c2834f4ae0"},{"code":"(fn foo [hey hi] \n  (if (= hey 1) \n   '(1 2 3) \n    (if (= hey -2) \n      '(-2 -1 0 1)\n      '(5 6 7)\n    )\n   )\n )","problem":34,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":34,"code":"(fn range34 [x y]\n  (take (- y x) (iterate inc x)))","user":"6074dfa4e4b069485764de4c"},{"code":"(fn [a b]\n( (fn [x y cons-to]\n  (if (= x y) cons-to (recur x (- y 1) (cons (- y 1) cons-to))))\n  a b '() ))","problem":34,"user":"51effd77e4b0249c592fbdf3"},{"problem":34,"code":"(fn\n  [start end]\n  (loop [coll []\n         n start]\n    (if (= n end)\n      coll\n      (recur (conj coll n) (inc n)))))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":34,"code":"(fn [start end]\n  (loop [curr (list start)]\n    (let [next-value (inc (first curr))]\n      (if (= next-value end)\n      \t(reverse curr)\n      \t(recur (cons next-value curr))\n      )\n    )\n  )\n)","user":"5d6f0533e4b04d129b00f2d0"},{"problem":34,"code":"(fn myrange\n  [s e]\n  (loop [s s\n         new []]\n    (if (= s e)\n      new\n      (recur (inc s) (conj new s)))\n    ))","user":"55bd87ede4b01b9910ae29fe"},{"code":"(fn rng [from to]\r\n      (loop [i from\r\n\t           r '()]\r\n\t       (if (< i to)\r\n\t\t   (recur (inc i) (concat r [i]))\r\n\t\t   r)))","problem":34,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":34,"code":"(fn my-range [start stop]\n  (if (= start stop)\n    '()\n    (cons start (my-range (inc start) stop))))","user":"5a5a6347e4b05d388ecb6ca9"},{"problem":34,"code":"(fn [a b]\n  (letfn [(rec [i]\n               (if (>= i b)\n                 nil\n                 (cons i (rec (+ 1 i)))))]\n    (rec a)))","user":"5516a874e4b06a49daca83b5"},{"code":"#(loop [l []\n        i %1]\n  (if (= i %2)\n      l\n      (recur (conj l i) (inc i))))","problem":34,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn rangee [from to] \n  (when (< from to)\n    (lazy-seq (cons from (rangee (inc from) to)))))","problem":34,"user":"5025b93ce4b0c969f0b056df"},{"code":"(fn [x y]\n  (loop [n x answer []]\n    (if (= n y) answer\n      (recur\n        (inc n)\n        (conj answer n)\n      )\n    )\n  )\n)","problem":34,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":34,"code":"#(loop [x %1 v []]\n    (if (= x %2)\n      v\n      (recur (inc x) (conj v x))))","user":"5614ebc5e4b05f002753dfbc"},{"problem":34,"code":"(fn [x y]\n (loop [current x acc []]\n  (if (>= current y)\n   acc\n   (recur (inc current) (conj acc current)))))","user":"54580586e4b01be26fd74616"},{"code":"(fn [x r] (take (- r x) (iterate inc x)))","problem":34,"user":"52baea85e4b07a9af57922d9"},{"problem":34,"code":"(fn fib [b t] (loop [i b r []]\n                   (if (= i t)\n                     r\n                     (recur (inc i) (conj r i)))))","user":"550e0373e4b06e50f9beb162"},{"problem":34,"code":"(fn my-range [a b]\n  (if (= a b) (list)\n    (cons a (my-range (inc a) b))))","user":"5479c58de4b0c51c1f4d72c7"},{"code":"#(loop [i %1 l []] (if (< i %2) (recur (inc i) (conj l i)) l))","problem":34,"user":"524f4162e4b0541d1855b806"},{"problem":34,"code":"(fn [start end] (loop [i start r []] (if (= i end) r (recur (inc i) (conj r i)))))","user":"5d63ba44e4b0c9e5857d5026"}]