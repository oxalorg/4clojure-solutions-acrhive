[{"problem":97,"code":"(fn [n]\n  (loop [row [1]\n         pass (dec n)]\n    (if (zero? pass)\n      row\n      (recur (conj (->> row\n                        (partition 2 1)\n                        (map (partial apply +))\n                        (cons 1)\n                        vec) 1)\n             (dec pass)))))","user":"54246fcce4b01498b1a71aed"},{"problem":97,"code":"(fn f [x]\n  (case x\n    1 [1]\n    2 [1 1]\n    (concat [1] (doall (map (partial apply +) (partition 2 1 (f (dec x))))) [1])))","user":"58a822e4e4b01a0c0b232950"},{"problem":97,"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (do\n      (loop [result [1 1]\n             row 2]\n        (if (= row n)\n          result\n          (recur\n            (conj (vec (cons 1 ((fn [arr]\n  (loop [result []\n         remaining arr]\n    (if (= 1 (count remaining))\n      result\n      (recur (conj result (apply + (take 2 remaining))) (rest remaining))))) result))) 1)\n            (inc row)))))))","user":"60593916e4b07e92fa001acc"},{"code":"(fn pascal [i]\n  (if (= i 1) [1]\n      (vec (map + (conj (pascal (dec i)) 0)\n              (concat [0] (pascal (dec i)))))))","problem":97,"user":"4facd2fae4b081705acca22f"},{"code":"(fn [n] (last (take n (iterate #(map + (concat [0] %) (concat % [0])) [1]))))","problem":97,"user":"4ff01fa9e4b0678c553fc321"},{"code":";; http://en.wikipedia.org/wiki/Pascal%27s_triangle#Calculating_a_row_or_diagonal_by_itself\n;; more elegant solution in the comments here: http://www.snowfrog.net/2012/06/04/4clojure-97-pascals-triangle/\n(fn [n]\n  (map int (let [denominators (range 1 n)\n                 numerators (reverse denominators)]\n    ((fn [previous nums denoms result]\n      (let [new-result (conj result previous)]\n        (if (> (count denoms) 0)\n          (recur \n            (* previous (/ (first nums) (first denoms))) \n            (rest nums) \n            (rest denoms) \n            new-result)\n          new-result))\n    ) 1 numerators denominators []))))","problem":97,"user":"4e58ef07535d8a8b8723a299"},{"problem":97,"code":"(fn p ([i]\n   (first (drop (dec i) (p i []))))\n  ([i t]\n   (let [r (if (empty? t)\n                    [1]\n                    (if (= 1 (count t))\n                      [1 1]\n                      (cons 1 (conj (mapv #(apply + %) (partition 2 1 t)) 1))))]\n     (lazy-seq (cons r (p i r))))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":97,"code":";(fn [n]\n;  (let [! #(reduce *' (range 2 (inc %)))\n;        m (dec n)]\n;    (map #(/ (! m)\n;             (* (! %)\n;                (! (- m %))))\n;         (range n))))\n\n(fn p [n]\n  (if (= 1 n)\n    [1]\n    (vec (#(map + % (rest %))\n           (conj (seq (conj (p (dec n)) 0)) 0)))))","user":"57533bc1e4b02ea1147992a6"},{"code":"(fn [x]\n  (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (loop [r 2\n                 y [1 1]]\n            (if (= r x)\n              y\n              (recur (inc r)\n                     (flatten\n                       [1 (map + y (rest y)) 1]))))))","problem":97,"user":"4da3e51330acd6ed10482a68"},{"problem":97,"code":"(fn f [n]\n   (if (= 1 n)\n     [1]\n     (let [x (f (dec n))]\n       (mapv (fn [i]\n               (+ (nth x (dec i) 0)\n                  (nth x i 0)))\n             (range n)))))","user":"55c652dde4b0e31453f649bd"},{"problem":97,"code":"(fn tr [n]\n    (if (= 1 n) [1]\n        (let [p (partition 2 1 (tr (dec n)))]\n          (vec (concat [1] (map #(apply + %) p) [1])))))","user":"4e837808535db62dc21a62d9"},{"problem":97,"code":"(fn pascals-triangle\n  [n]\n  (last (take n\n              (iterate\n                (fn [x] (mapv + (cons 0 x) (conj x 0)))\n                [1]))))","user":"5f3103aee4b0574c87022c24"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map + \n         (concat [0] (pascal (dec n)))\n         (concat (pascal (dec n)) [0]))))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [n]\n  (let [fac \n        (fn [n] (reduce * (range 1 (inc n))))\n        nCr \n        (fn [n r] (/ (fac n)\n                     (* (fac (- n r))\n                        (fac r))))]\n  (map (partial nCr (dec n)) (range 0 n))))","problem":97,"user":"4daea889edd6309eace4d15b"},{"problem":97,"code":"(fn [i]\n  (last (take i\n         (iterate\n          (fn [pr]\n           (->>\n            (concat [[(first pr)]] (partition 2 1 pr) [[(last pr)]])\n            (map (partial apply +) ,,,)))\n         [1]))))","user":"586615e6e4b0f14aab7c8858"},{"problem":97,"code":"(fn [n]\n  (let [foo (fn bar [c r]\n    (if (or (= c 0) (= c r)) 1\n      (+ (bar (dec c) (dec r)) \n         (bar c (dec r)))))]\n  (map (fn [x] (foo x (dec n))) (range n))))","user":"54133900e4b01498b1a719de"},{"code":"(fn [n]\n  (loop [col [1]\n         n n]\n    (if (= n 1)\n      col\n      (recur (concat [1]\n                     (map #(apply + %)\n                          (partition 2 1 col))\n                     [1])\n             (dec n)))))","problem":97,"user":"4fbf2818e4b081705acca317"},{"problem":97,"code":"(fn pasc [n]\n\t(cond \n\t\t(= n 1) [1]\n\t\t(= n 2) [1 1]\n\t\t:else \n\t\t\t(vec (concat [1]\n\t\t\t\t\t(let [p (pasc (dec n))]\n\t\t\t\t\t\t(for [i (range (dec (count p)))]\n\t\t\t\t\t\t\t(+ (p i) (p (inc i))))) [1]))))","user":"536e5b68e4b0fc7073fd6e6d"},{"code":"(fn pascal [row]\n  (cond\n    (= row 1) [1]\n    (= row 2) [1 1]\n    :else (vec\n            (concat\n              [1]\n              (map\n                (fn [[a b]] (+ a b))\n                (partition 2 1 (pascal (dec row))))\n              [1]))))","problem":97,"user":"4ee2da14535d10e5ff6f536c"},{"problem":97,"code":"(fn pascal-triangle\n[row]\n(nth\n  (iterate #(concat '(1) (map + % (rest %)) '(1)) [1])\n  (dec row)\n  )\n)","user":"5bc8c033e4b07a9b28b100ca"},{"problem":97,"code":"(fn [row](let [fact (fn [n]\n                          (reduce * (range 1 (inc n)))) \n                binom (fn [n k]\n                          (/ (fact n) (* (fact k) (fact (- n k)))))]\n               (map #(binom (dec row) %) (range row))\n))","user":"560c37b5e4b05f002753df2e"},{"problem":97,"code":"(fn pascal-tri [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal-tri (dec n))\n          last-a (concat [0] last)\n          last-b (concat last [0])\n          ]\n      (vec (map + last-a last-b)))))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn f [n] (cond\n  (= n 1) [1]\n  (= n 2) [1 1]\n  :else (let [l (f (dec n))]\n    (into [] (concat '(1) (map #(+ (l %) (l (dec %))) (range 1 (dec n))) '(1))))))","problem":97,"user":"506617c3e4b03d366d7cb2ab"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [row]\n                  (concat [1]\n                          (map (partial apply +) (partition 2 1 row))\n                          [1]))\n                [1])\n       (dec n)))","user":"5d2bfb68e4b01671435dbc86"},{"problem":97,"code":"(fn [x] (last (take x (iterate #(map + (concat % [0]) (concat [0] %)) [1]))))","user":"56fdd9a1e4b08d47c97781a8"},{"problem":97,"code":"(fn p [n]\n (case n\n  1 [1]\n  2 [1 1]\n  (let [q (p (- n 1))] (concat [1](map + q (rest q))[1])\n )          \n))","user":"5007c7c7e4b0b17c647f5226"},{"problem":97,"code":"(fn [n]\n  (loop [n n row 1 prev [1]]\n    (if (= row n)\n      prev\n      (recur n \n             (inc row) \n             (concat [1] (map + prev (rest prev)) [1])))))","user":"5d81b40ce4b0915913b1d379"},{"problem":97,"code":"(fn [n]\n  (if (= 1 n)\n    (lazy-seq [1])\n    (loop [acc (lazy-seq [1 1])\n           curr 2]\n      (if (= n curr)\n        acc\n        (recur\n         ((comp flatten vector)\n          1\n          (map (partial apply +')\n               (partition 2 1 acc))\n          1)\n         (inc curr))))))","user":"5ab16992e4b073f1774425c4"},{"problem":97,"code":"(fn pascal-row\n  [n]\n  (loop [i n\n         result [1]]\n    (if (= i 1)\n      result\n      (recur (dec i)\n             (conj (->> result\n                        (cons 0)\n                        (partition 2 1)\n                        (map #(apply + %))\n                        vec) 1)))))","user":"4fc524aae4b081705acca37e"},{"code":"(fn [x] (nth (iterate #(concat [1] (map (partial apply +) (or (partition 2 1 %) [1])) [1]) [1]) (dec x)))","problem":97,"user":"4df0524e535d08e6dec9fe17"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n         (partition 2 1 (concat [0] (pascal (- n 1)) [0])))))","problem":97,"user":"4ead2841535d7eef3080731e"},{"code":"(fn [n] (last (take n (iterate (fn [m] (vec (concat [1] (vec (map #(+ (first %) (last %)) (partition 2 1 m)))  [1]))) [1]))))","problem":97,"user":"538e29d1e4b0b51d73faae80"},{"problem":97,"code":"(fn\n  [n]\n  (nth (iterate #(vec (concat [1] (map + % (rest %)) [1])) [1]) (dec n)))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":97,"code":"(fn pas [n]\n  (if (= 1 n)\n    [1]\n    (concat [1]\n            (map #(reduce + %) (partition 2 1 (pas (- n 1)))) \n            [1])))","user":"545801f6e4b01be26fd74615"},{"code":"(fn [n]\n    (letfn [(f [x] (reduce * (range 1 (inc x))))\n            (bn [x k] (/ (f x) (* (f k) (f (- x k)))))]\n    (map #(bn (dec n) %) (range n))))","problem":97,"user":"506cad7de4b0a302964c548e"},{"code":"(fn [x]\n  (loop [y 1 l [1]]\n    (if (= x y)\n      l\n      (recur\n        (inc y)\n        (concat [1] (map\n          (fn [x] (+ (nth l (dec x)) (nth l x)))\n          (range 1 y)) [1]))\n      ))\n  )","problem":97,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn pascal [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [p (pascal (dec n))]\n   \t(vec (concat [1] (map (partial reduce +) (partition 2 1 p)) [1])))))","problem":97,"user":"5114ab7be4b0ce5098ee73b5"},{"code":"(fn pascal-line [n] \n   (if (= n 1) [1]\n       (concat [1] \n               (map (fn [[a b]] (+ a b)) \n                    (partition 2 1 (pascal-line (dec n)))) \n               [1])))","problem":97,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":97,"code":"(fn pascal-row [x] \n        (letfn [(cmb [n r]\n        (cond \n          (= 0 r) 1\n          (= n r) 1\n          true (* (cmb n (dec r)) (/ (inc (- n r)) r))))]\n                (vec (map (partial cmb (dec x)) (range x)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"#(nth (iterate (fn [x] `(1 ~@(map + x (next x)) 1)) [1]) (dec %))","problem":97,"user":"4ef77edb535dced4c769f254"},{"problem":97,"code":";; Actually this unnecessarily creates a whole triangle to the nth layer, all using recursion\n(fn [x]\n    (let [trnglyr (fn [l] (loop [cnt (dec (count l)),\n                                   newv [1],\n                                   orig l]\n                              (if (zero? cnt)\n                                (conj newv 1)\n                                (recur (dec cnt) ;cnt\n                                       (conj newv (+ (first orig) (second orig))) ;new\n                                       (rest orig) ;orig\n                                       )))),\n          \n          \n          funtri (fn pasctimes [nth]   ; works\n                   (loop [resv [[1]]\n                          cnt (dec nth)]\n                     (if (zero? cnt)\n                       resv\n                       (recur (conj resv (trnglyr (last resv)))\n                              (dec cnt)))))\n\n          trivect (funtri x)]\n      (last trivect)\n      ))","user":"55810c73e4b05c286339e0f2"},{"problem":97,"code":"(fn pascal\n  [target-depth]\n  {:pre [(not (zero? target-depth)) (pos? target-depth)]}\n  (let [make-new-layer (fn\n                         [parent-layer]\n                         (let [parent-nums (partition 2 1 parent-layer)]\n                           (flatten [1 (map #(apply + %) parent-nums) 1])))]\n\n    (loop [current-depth 1\n           requested-depth target-depth\n           current-layer [1]]\n      (if (= current-depth requested-depth)\n        current-layer\n        (recur (inc current-depth) requested-depth (make-new-layer current-layer))))))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [s]\n                  (concat [1] (map + s (next s)) [1]))\n                [1])\n       (dec n)))","user":"57458b82e4b009280f9f2b4e"},{"problem":97,"code":"(fn pascal  ([n] (pascal (dec n) [1]))\n  \t\t\t([n row] (if (= n 0) \n                       \t row \n                         (pascal (dec n) (conj (vec (cons 1 (vec (map (partial apply +) (partition 2 1 row))))) 1))\n                     )\n            )\n)","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn pt [x] (if (= 1 x) [1] (concat [1] (map #(apply + %) (partition 2 1 (pt (dec x)))) [1] )))","problem":97,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [n] (nth (iterate #(vec (map + (into [0] %) (into % [0]))) [1]) (dec n)))","problem":97,"user":"4ff67852e4b0678c553fc37e"},{"problem":97,"code":"(fn pascal[n] (let [series (iterate #(concat [1] (map + % (rest %)) [1]) [1])] (nth series (dec n))))","user":"54f296efe4b024c67c0cf8c8"},{"code":"(fn [n] (nth (iterate #(mapv + (conj % 0)(into [0] %)) [1]) (dec n)))","problem":97,"user":"5281a445e4b0757a1b17143a"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(vec (map + (conj % 0) (cons 0 %))) [1])\n   (dec n)))","user":"5d81eba4e4b0915913b1d37b"},{"problem":97,"code":"(fn [n]\n  (nth \n   (iterate (fn [x] (cons 1 (map #(apply + %) (partition-all 2 1 x)))) [1])\n   (- n 1)))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":97,"code":"(fn [n]\n  (if (= 1 n)\n    [1]\n    (loop [i 2 tmp [1]]\n      (if (= i n)\n        (vec (map +' (cons 0 tmp) (conj tmp 0)))\n        (recur (inc i) (vec (map +' (cons 0 tmp) (conj tmp 0))))))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else\n     (let [prev-tri (pascal-triangle (dec n))]\n     (flatten \n      [1 \n       (for [x (range 1 (dec n))] \n                      ( + (nth prev-tri (dec x))\n                          (nth prev-tri x)))\n      1]))))","user":"57995ac1e4b05b1deef9adbf"},{"problem":97,"code":"(fn [x]\n  (loop [n 1\n         res [1]]\n    (if (= x n)\n      res\n      (recur (inc n)\n             (vec (for [i (range (inc n))]\n                     (+ (get res i 0) (get res (- i 1) 0))))))))","user":"52fe31d5e4b047fd55837038"},{"code":"(fn a [n] (letfn [(s [x] (if(zero? x)(identity 1)(reduce * (range 1 (inc x)))))] (for [i (range 0 n) :let [z (dec n)]] (quot (s z) (* (s i) (s (- z i))) ))))","problem":97,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":97,"code":"(fn get-row [n]\n  (let [\n         get-pascal\n         (fn get-pascal [row column]\n          (if (or (< column 0) (>= column row))\n            0\n            (if (= 1 row)\n              1\n\n              (+\n                (get-pascal (dec row) (dec column))\n                (get-pascal (dec row) column)\n              )\n            )\n          )\n        ) ]\n    \n    (map #(get-pascal n %) (range 0 n))))","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn [n]\n  (loop [i (dec n)\n         acc [1]]\n    (if (zero? i)\n      acc\n      (recur (dec i) (concat [1] (map (partial apply +) (partition 2 1 acc)) [1])))))","problem":97,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":97,"code":"(fn p [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (concat [1] (map + (drop 1 (p (- n 1))) (p (- n 1))) [1]) ))","user":"543366dde4b0b6b47310fcdf"},{"problem":97,"code":"(fn [n]\n  (let [f #(if (< % 2) 1 (reduce * % (range 1 %)))\n        c (fn [n i] (/ (f n) (f i)  (f (- n i))))]\n    (map #(c (- n 1) %) (range n))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":97,"code":"(fn pascal [n]\n  (let [helper (fn [xs acc]\n                 (cond (empty? xs) acc\n                       (empty? (rest xs)) (conj acc 1)\n                       :else (recur (rest xs) (conj acc (+ (first xs) (second xs))))))]\n    (loop [x 1\n           row [1]]\n      (if (= x n)\n        row\n        (recur (inc x) (helper row [1]))))))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn [n]\r\n  (cond (= n 1)\r\n        [1]\r\n        :else\r\n        (loop [n (- n 2)\r\n               t [1 1]]\r\n          (if (= n 0)\r\n            t\r\n            (recur (- n 1)\r\n                   (conj (loop [t t\r\n                                p 0\r\n                                r []]\r\n                           (if (empty? t)\r\n                             r\r\n                             (recur (rest t) (first t) (conj r (+ (first t) p)))))\r\n                         1))))))","problem":97,"user":"4de2f44f535d08e6dec9fdec"},{"code":"#(loop [n % v [1]]\n  (if (= 1 n)\n    v\n    (let [ev (conj v 0)\n          nv (map + ev (reverse ev))]\n      (recur (dec n) nv))))","problem":97,"user":"4edd038c535d10e5ff6f5327"},{"problem":97,"code":"(fn [n]\n  (loop [i 1 coll [1]]\n    (if (= i n)\n      coll\n      (recur (inc i)\n             (concat [1] (map (fn [[x y]] (+ x y)) (partition 2 1 coll)) [1])))))","user":"53f2370ee4b0742d9025b0e7"},{"code":"(fn [n]\r\n  (letfn [(factorial [n] (apply * (range 1 (inc n))))\r\n          (over [n m] (/ (factorial n) (factorial m) (factorial (- n m))))]\r\n    (for [k (range n)] (over (dec n) k))))","problem":97,"user":"4e994541535dbda64a6f6b64"},{"problem":97,"code":"(fn pascal-lazy-seq [n]\n  (letfn [( pascal-next [row]\n  (let [ row-extend (concat (cons 0N row) '(0N))]\n    \n     (vec \n      (map #(apply + %) (partition 2 1 row-extend))))\n    )]\n (last (take n  (iterate pascal-next [1]))\n           )))","user":"52c911dde4b0c2d177d6213a"},{"problem":97,"code":"(fn pascal [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn\n  [n]\n  (let [f (fn\n            [s]\n            (flatten [(first s) (map (partial reduce +) (partition 2 1 s)) (last s)]))]\n    (last (take n (iterate f '(1))))))","problem":97,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn pt [n]\r\n  (if (= n 1)\r\n    [1]\r\n    ((apply comp (repeat (dec n) (fn pasc [myxs]\r\n  (concat [1] (concat (map #(reduce + %) ((fn subtries [initxs]\r\n  (loop [ret [], xs initxs]\r\n    (if (<= (count xs) 1)\r\n      ret\r\n      (recur (conj ret [(first xs) (nth xs 1)]) (rest xs))))) myxs)) [1]))))) [1])))","problem":97,"user":"4e123905535d04ed9115e7ce"},{"problem":97,"code":"(fn pascals\n  [n]\n  (if (<= n 2)\n    ([[1] [1 1]] (dec n))\n    (loop [row-num 3\n           row [1 2 1]]\n      (if (= n row-num)\n        row\n        (recur (inc row-num) ((fn row-to-row\n                              [row]\n                              (loop [curr row\n                                    final [1]]\n                                (if (empty? (rest curr))\n                                  (conj final 1)\n                                  (recur (rest curr)\n                                        (conj final (+ (first curr) (second curr))))))) row))))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":97,"code":"(fn pascal[n]\n  (case n \n    1 [1]\n    2 [1 1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])\n   ))","user":"52271ffee4b04e78ff2e19a9"},{"problem":97,"code":"(fn pt\n  [n]\n  (cond\n    (= n 1)\n    [1]\n    :else\n    (vec (concat\n          [1]\n          (map #(apply + %) (partition 2 1 (pt (dec n))))\n          [1]))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":97,"code":"(fn pasc-tri [n]\n\t(letfn [(pasc-next [c n]\n\t\t(if (<= n 1) \n\t\t\tc\n\t\t\t(recur (conj (vec (cons 1 (mapv #(+ (first %) (second %)) (partition 2 1 c)))) 1) (dec n))))]\n\t(pasc-next [1] n)))","user":"56540485e4b0f9d632dd847a"},{"code":"(fn pastri [n]\n  (letfn [(fact [n]\n                (reduce * (range 1 (inc n))))\n          (cmbi [n k]\n                (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (cond\n      (= n 1) [1]\n      :else (loop [k 0, result [], nn (dec n)]\n              (if (> k nn)\n                result\n                (recur (inc k) (conj result (cmbi nn k)) nn))))))","problem":97,"user":"512474ede4b02c3f2a072cce"},{"problem":97,"code":"(fn [n]\n  (loop [fib [1] inn n]\n    (if \n      (= inn 1)\n      fib\n      (recur (map + (concat [0] fib)(concat fib [0])) (dec inn)))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn pt \n  ([n] (map #(pt % n) (range 1 (inc n))))\n  ([k n]\n  (cond\n   (= k 1) 1\n   (= n 1) 1\n   (= n k) 1\n   :else (+ (pt (dec k) (dec n)) (pt k (dec n)))\n   )\n  ))","problem":97,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":97,"code":"(fn pas_tr [n]\n  (cond\n    (< n 1) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (\n            loop [result [1 1]  i 3]\n            (if (<= i n)\n              (recur\n                (concat [1] (map + result (take-last (dec (count result)) result)) [1])\n                (inc i)\n                )\n              result\n              )\n\n            )\n\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":97,"code":"(fn pascal [n]\n  (loop [coll (take n (iterate identity 1))\n         nth-row []]\n    (if (empty? coll)\n      nth-row\n      (recur ((fn changing-coll  [xs]\n                (pop (reduce (fn [x y]\n                               (conj x (+ (last x) y)))\n                             [1]\n                             (next xs)))) coll) (conj nth-row (last coll))))))","user":"56038f34e4b04bb52996e1bc"},{"problem":97,"code":"(fn [n]\n  (loop [i 1 row [1]]\n    (if (= i n)\n      row\n      (recur (inc i) (concat [1] (map #(apply +  %) (partition 2 1 row)) [1])))))","user":"5383668ee4b06839e8705edd"},{"problem":97,"code":"(fn pascal-tri [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal-tri (dec n))\n          last-a (concat [0] last)\n          last-b (concat last [0])]\n      (vec (map + last-a last-b)))))","user":"57b4779de4b0fbc9809a279a"},{"code":"(fn pascal-tri [n]\n  (if (= 1 n)\n    [1]\n    (concat [1] \n            (map (partial apply +) (partition 2 1 (pascal-tri (dec n)))) \n            [1])))","problem":97,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":97,"code":"(fn [n]\n    (let [f \n    (fn [lst]\n       (loop [res [1] [a & r] lst]\n          (if (empty? r)\n            (conj res a)\n            (recur (conj res (+ a (first r)) )  r )  )       )     )\n     \n    ]\n       (last (take n (iterate f [1]) ))\n    )\n    )","user":"5735ac67e4b0cd1946bd102b"},{"problem":97,"code":"(fn [n]\n   (let [n (dec n)]\n     (map\n      (fn [i]\n        (->> (for [x (range 1 (inc i))\n                   :let [y (-> (- n i)\n                               (+ x))]]\n               [x y])\n             (reduce (fn [acc [x y]]\n                       (-> (* acc y)\n                           (/ x)))\n                     1)))\n      (range (inc n)))))","user":"5808ee16e4b0a837a8b30d16"},{"code":"(fn pas [n]\n(nth\n   (cons '(1) ((fn pascal-triangl\n      ([] (pascal-triangl [1]))\n      ([coll]\n       (letfn [(pascal [xs]\n                       (cons 1 \n                             (concat \n                              (map #(apply + %) \n                                   (partition 2 1 xs)) [1])))]\n               (cons (pascal coll) \n                     (lazy-seq (pascal-triangl (pascal coll))))))))) (dec n)))","problem":97,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":97,"code":"(fn [n]\n  (nth (iterate \n        (fn [elems] \n          (conj (apply vector 1 (map #(apply + %) \n                                     (partition 2 1 elems))) 1)) \n        [1]) (dec n)))","user":"594bc16be4b07ddc2dafae39"},{"code":";(fn [x]\n;  (nth\n;    (iterate (fn [r]\n;                (vec\n;                (concat [1]\n;                (map #(apply + %) (partition 2 1 r))\n;                [1]))) [1]) (dec x)))\n\n(fn [x]\n  (reduce #(cons (* (first %1) (/ (- x %2) %2)) %1) [1] (range 1 x)))","problem":97,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":97,"code":"(fn t [n] (if (= n 1) '(1) (map + (conj (t (dec n)) 0) (reverse (conj (t (dec n)) 0)) )))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":97,"code":"(fn tpnn [n]\n  (letfn [\n          ( tpn [n]\n            (map #(tp n %) (range (inc n))))\n\n\n          ( tp [ n k ]\n            (if (or  (= k 0) (= n k))\n              1\n              (+ (tp (dec n) (dec k)) (tp  (dec n) k) )))\n\n\n          ] (tpn (dec n)))\n  )","user":"51f81925e4b09be9c177e526"},{"code":"(let [mypa (fn mypas [y] (concat \n ((fn rrr [x]\n   (if (empty? x)\n     []\n     (if (empty? (rest x))\n       [1]\n       (concat (rrr (drop-last x))\n               (list (+ (last x)\n                        (last (drop-last x))))\n               ))))\ny) (list 1)))]\n\n(fn mypastri \n  ([x] (mypastri x []))\n  ([x y]\n     (if (= x 1)\n       (mypa y)\n       (mypastri (- x 1) (mypa y))))))","problem":97,"user":"52e17e66e4b09f7907dd1423"},{"code":"#(letfn [(bang [n] (reduce * 1 (range 1 (inc n))))\n         (choose [k n] (/ (bang n)\n                          (bang k) (bang (- n k))))]\n   (map (fn [k] (choose k (dec %))) (range %)))","problem":97,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn pascals [n]\n  (if (= 1 n)\n    [1]\n    (let [prev (pascals (dec n))]\n      (vec (concat [1] (for [i (range 1 (dec n))] (+ (prev (dec i)) (prev i))) [1]))\n      )\n    )\n  )","problem":97,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn pas [n]\n  (letfn [(pas-helper [c]\n            (loop [result [(first c)]\n                   coll   c]\n              (if (next coll) ;; more than one member\n                (recur (conj result (+ (first coll)\n                                       (second coll)))\n                       (rest coll))\n                ;; one member\n                (conj result (first coll)))))]\n    (nth (iterate pas-helper\n                  [1])\n         (dec n))))","problem":97,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn [n] (nth (iterate(fn [pascal] (vec(concat[1] (map (fn [[f s]] (+ f s)) (partition 2 1 pascal))[1])))[1])(dec n)))","problem":97,"user":"4f57a153e4b0a7574ea7183a"},{"problem":97,"code":"(fn [n] (nth\n\t  (lazy-seq (iterate #(into [] (map + (cons 0 %)(conj % 0))) [1]))\n     (dec n)))","user":"542fa0dde4b0dad94371f2d2"},{"problem":97,"code":"(fn triangle [n]\r\n  (cond \r\n    (= 1 n) [1]\r\n    (= 2 n) [1 1]\r\n    :else (concat \r\n            [1]\r\n            (loop [[a b & tail :as all] (triangle (dec n))\r\n                   current []]\r\n              (let [next (conj current (+ a b))]\r\n                (if (empty? tail)\r\n                  next\r\n                  (recur (rest all) next))))\r\n            [1])))","user":"606e0a42e4b069485764de19"},{"code":"(fn jj [x] (for [xx (range x)] (if (or (= xx 0) (= x 0)) 1 \n                             (/ (apply * (range (dec x) (- (dec x) xx) -1)) \n                                (apply * (range 1 (inc xx)))\n                                       )\n                              )\n         )\n )","problem":97,"user":"5105ed16e4b01150e115ebe2"},{"problem":97,"code":"#(loop [numerator (dec %1)\n       denominator 1\n       result [1]]\n    (if (> numerator 0)\n      (recur\n          (dec numerator)\n          (inc denominator)\n          (conj result (/ (* (last result) numerator) denominator))\n          )\n       result))","user":"556523fce4b0c656e3ff1815"},{"problem":97,"code":"(memoize (fn pascal [n]\n           (if (= 1 n)\n             [1]\n             (map #(apply + %) (partition 2 1 (conj (into [0] (pascal (dec n))) 0))))))","user":"566a6e38e4b0a866af68969b"},{"code":"(fn pt [n] (if (= 1 n) [1] (let [pt-1 (pt (dec n))]\n  (concat [1] (map + pt-1 (next pt-1)) [1]))))","problem":97,"user":"4effb663535dcb61093f6a2e"},{"problem":97,"code":"(fn ptri [n] (last (take n (iterate\n                            (fn do-ptri [x]\n                              (let [pairs (partition 2 1 x)\n                                    to-add (vec (map #(apply + %) pairs))]\n                                (cons 1 (conj to-add 1))))\n                            [1]))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (conj (into [1] (first (reduce\n                            (fn [[a b] c]\n                              [(conj a (+ b c)) c])\n                            [[] 1]\n                            (rest (pascal (dec n))))\n                           )\n                      )\n                1)\n    )\n  )","user":"56f73913e4b08e7d20b9682d"},{"code":"(fn [number]\n  (last (take number (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","problem":97,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn [r]\n    (nth (iterate\n          #(vec (map + (conj % 0) (cons 0 %)))\n          [1])\n         (dec r)))","problem":97,"user":"4f39f902e4b0e243712b1efe"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= n 1)\n    [1]\n    (conj (into [1] (map (partial reduce +) (partition 2 1 (pascal (- n 1))))) 1)))","user":"5c24671be4b07e362c2305a1"},{"problem":97,"code":"(fn pascaln [n]\n  (let [nextline (fn [line]\n                   (concat [1] (map + line (rest line)) [1]))]\n    (last (take n (iterate nextline [1])))))","user":"57a49951e4b0a966079561e5"},{"code":"#(nth (iterate (fn [prev] (mapv + (concat [0] prev) (concat prev [0]))) [1]) (dec %))","problem":97,"user":"4fc3a72ae4b081705acca342"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal (dec n) [1]))\n  ([n arr]\n   (if (= n 0)\n     arr\n     (let [partition-arr (partition 2 1 arr)\n           sum-arr (mapv #(reduce + %) partition-arr)\n           result (concat [1] sum-arr [1])]\n       (recur (dec n) result)))))","user":"5cb41c40e4b026601754b911"},{"code":"(fn [n]\n  (let [f #(apply * (range 2 (inc %)))\n        nwton #(/ (f %) (* (f %2) (f (- % %2))))]\n    (map #(nwton (dec n) %) (range 0 n))\n   ))","problem":97,"user":"4fb79872e4b081705acca2d2"},{"problem":97,"code":"(fn [r]  (map #((fn value [r c]\n  \t(if (or (= c 1) (= r c)) 1 \n    (+ (value (dec r) c) (value (dec r) (dec c))))) r %) (take r (drop 1 (range)))))","user":"547c2c6ce4b0c51c1f4d72e3"},{"problem":97,"code":"(fn pascal-row [n]\r\n  (reduce #(conj %1 (int (* %2 (last %1))))\r\n          [1] (for [k (range 1 n)]\r\n                (/ (- n k) k))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":97,"code":"(fn fibonacci\n  [n]\n  (if (= 1 n)\n    [1]\n    (concat\n      [1]\n      (map + (fibonacci (dec n)) (next (fibonacci (dec n))))\n      [1])))","user":"54aec375e4b09f271ff37cf9"},{"problem":97,"code":"(fn pascal3 [n]\n  (if (= n 1)\n    '(1)\n    (concat [1]\n            (map (partial reduce +)\n                 (partition 2 1 (pascal3 (dec n))))\n            [1])))","user":"586bc870e4b01531a375e964"},{"problem":97,"code":"(fn [n]\n    (letfn [(fac [x] \n              (apply * (range 1 (inc x))))\n            (bc [a k]\n              (/ (fac a) (* (fac k) (fac (- a k))))\n              )]\n      (for [x (range n)]\n        (bc (dec n) x))\n    )\n  )","user":"5e2586afe4b05b4b01516167"},{"problem":97,"code":"(fn [n]\n    (nth (iterate #(concat (conj (map (partial apply +) (partition 2 1 %)) 1) [1]) '(1)) (- n 1)))","user":"56bb652ae4b0f26550335953"},{"problem":97,"code":"(fn [n]\n  (loop [r 1 x 1 rs [1]]\n    (if (>= x n)\n      rs\n      (let [r (* r (/ (- n x) x))]\n        (recur r (+ x 1) (conj rs r))))))","user":"56f5d0efe4b046a417f92078"},{"code":"#(if (= % 1)\n   [1]\n   (letfn [(build-pt [prev-pt]\n             (loop [result [] [i & others] prev-pt]\n               (if (nil? others)\n                 (into [1] (conj result 1))\n                 (recur (conj result (+ i (first others))) others))))]\n     (loop [i 2 pt [1]]\n       (if (= i %)\n         (build-pt pt)\n         (recur (inc i) (build-pt pt))))))","problem":97,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn pascal-tri [n]\r\n  (condp = n\r\n    1 [1]\r\n    (let [last (pascal-tri (dec n))\r\n          last-a (concat [0] last)\r\n          last-b (concat last [0])\r\n          ]\r\n      (vec(map + last-a last-b)))))","problem":97,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"#(last (take % (iterate\n   (fn [prev-row]\n     (->>\n      (concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n      (map (partial apply +))))\n   [1N])))","problem":97,"user":"508c3d42e4b0f17d83ea26b2"},{"problem":97,"code":"(fn pascal [n]\n    (if (= n 1)\n      [1]\n      (concat [1]\n              (let [prevrow (pascal (- n 1))]\n                    (map + prevrow (rest prevrow)))\n              [1])\n      )\n    )","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"#(last (take % (iterate (fn [l] (vec (map + (cons 0 l) (conj l 0)))) [1])))","problem":97,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"#(nth (iterate (fn [c] (concat [1] (map + c (rest c)) [1])) \n  [1]) \n  (dec %1))","problem":97,"user":"4e4870d1535dc968683fc4bc"},{"code":"#(map second\n  (take % (iterate\n  (fn [[x y]]\n    (let [c (inc x)]\n      [c (/ (* y (- % c)) c)]))\n  [0 1])))","problem":97,"user":"4f062d4a535dcb61093f6c08"},{"code":"(fn pascal [row]\n    (letfn [(fac [val]\n              (reduce * (range 1 (+ 1 val))))]\n      (map #(/ (fac (- row 1)) (* (fac %) (fac(- (- row 1) %)))) (range row))))","problem":97,"user":"50057f23e4b0678c553fc466"},{"problem":97,"code":"#(let [binomial-coefficient (fn [n k]\n  (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n    (/ (rprod (- n k -1) n) (rprod 1 k))))] (map (partial binomial-coefficient (dec %1)) (range %1)))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n        [1]\n       (let [p (pascal (dec n))]\n           (vec (concat '(1) (map #(+ (get p %) (get p (dec %))) (range 1 (count p))) '(1))))))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn pascal\r\n  [n]\r\n\t(cond \r\n\t\t(= n 1) [1]\r\n\t\t(= n 2) [1 1]\r\n\t\t:default (concat [1]\r\n\t\t\t\t\t\t\t\t\t\t(map (partial reduce +) (partition 2 1 (pascal (dec n)))) \r\n\t\t\t\t\t\t\t\t\t\t[1])))","problem":97,"user":"4e8a0c82535d3e98b802328d"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    (vec (flatten [1 \n                   (map #(apply + %) \n                         (partition 2 1 (pascal (dec n)))) \n                   1]))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":97,"code":"(fn [row]\n        (loop [i 0\n               acc []]\n          (if (= i row)\n            (last acc)\n            (recur (inc i)\n                   (conj acc (let [prev (last acc)]\n                               (loop [prev prev\n                                      i 0\n                                      r [1]\n                                      two (take 2 prev)]\n                                 (if prev\n                                   (recur (next prev)\n                                          (inc i)\n                                          (conj r (reduce + two))\n                                          (take 2 (next prev)))\n                                   r))))))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":97,"code":"(fn [n]\n  (if (= 1 n) [1]\n      (nth (iterate #(cons 1 (conj ((fn [x] (mapv + x (rest x)) )%) 1)) [1]) (dec n))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":97,"code":"(fn pascal [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [x (pascal (dec n))] (concat [1] (map #(+ (nth x %) (nth x (inc %))) (range (dec (count x)))) [1]))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":97,"code":"(fn pascal-row [rownum]\n  (let [factorial (fn [val] (if  (= val 0) 1 (reduce * 1 (range 1 (inc val)))))\n        coefficient (fn [row col] (/ (factorial row) (* (factorial col) (factorial (- row col)))))]\n    (map (partial coefficient (dec rownum)) (range rownum))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":97,"code":"(fn binomial [n]\n    (reductions\n     (fn [prev k]\n       (* prev (/ (- n k) k)))\n     1\n     (range 1 n)))","user":"4dfe5a93535d04ed9115e786"},{"problem":97,"code":"(fn [n]\n    (letfn [ (pascal [i j]\n               (cond\n                (= j 1) 1\n                (= j i) 1\n                :else (+ (pascal (dec i) (dec j)) (pascal (dec i) j))))]   \n      (into []  \n            (for [i (range n (inc n)) j (range 1 (inc i) ) ]\n              (pascal i j)))))","user":"56a358d0e4b0542e1f8d14c9"},{"problem":97,"code":"(fn [n]\n  (loop [acc [] i 1]\n    (cond\n     (> i n) acc\n     (= i 1) (recur [1] 2)\n     (= i 2) (recur [1 1] 3)\n     :else (recur (loop [[x & xs] acc newrow [1]]\n                    (if xs\n                      (recur xs (conj newrow (+ x (first xs))))\n                      (conj newrow 1)))\n                  (inc i)))))","user":"561cb6cfe4b064ca9f4b169e"},{"code":"(fn [n]\n  (loop [ i 1\n          x [1]]\n    (if (= i n)\n      x\n      (recur (inc i) (concat [1] (map #(+ % %2) x (rest x)) [1])))))","problem":97,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn [n]\n  (nth (iterate #(concat [1] (map (fn [v] (apply + v)) (partition 2 (interleave % (rest %)))) [1]) [1]) (- n 1)))","problem":97,"user":"4ea0cfb0535d7eef308072ae"},{"code":"(fn [n]\n  (let [next-line (fn [s] (conj (loop [s s acc [1]]\n                       (if (> (count s) 1) \n                           (recur (rest s) (conj acc (+ (first s) (second s))))\n                           acc)) 1))]\n    (loop [n (dec n) acc [1]] (if (zero? n) acc (recur (dec n) (next-line acc))))))","problem":97,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [x]\n   (into [] (for [y (range 1 (inc x))]\n              ((fn pas [row col]\n                 (cond\n                  (> col row) 0\n                  (< col 0) 0\n                  (= col 1) 1\n                  :else (+ (pas (dec row) (dec col))\n                           (pas (dec row) col)))) x y))))","problem":97,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":97,"code":"(fn pascal-triangle-row [nth]\n  (case nth\n    1 [1]\n    2 [1 1]\n    (let [row (pascal-triangle-row (dec nth))]\n      (into [] (concat [1] (map + (rest row) (drop-last row)) [1])))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"#(letfn [(f [n]\n            (reduce * (range 1 (inc n))))\n          (b [n k]\n            (/ (f n) (* (f k) (f (- n k)))))]\n    (for [y (range %)]\n      (b (dec %) y)))","problem":97,"user":"507ef25ce4b0f753b6f9788e"},{"problem":97,"code":"(fn pascals-triangle [r]\n  (if (= r 1)\n    [1]\n    (let [pr (pascals-triangle (dec r))]\n      (for [index (range r)]\n        (condp = index\n            0 1\n            (dec r) 1\n            (+ (nth pr index) (nth pr (dec index))))))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":97,"code":"(fn pascal-t\n  [n]\n  (let [sm (fn [x]\n             (->> x\n                  (#(concat [0] % [0])) \n                  (partition 2 1) \n                  (map #(apply + %))))]\n    (if (< n 2) \n      [1] \n      (sm (pascal-t (dec n)))))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":97,"code":"(fn [n]\n\t(let [\n\t\tfactorial (fn [a] (reduce * (range 1 (+ a 1))))\n\n\t\tchoose (fn [n r] (/ (factorial n) (* (factorial r) (factorial (- n r)))))\n\t\tm (- n 1)]\n\n\t\t; (into [] (map #(choose m %) (range 0 n)))))  ; results as vector\n\t\t(map #(choose m %) (range 0 n)))) ; results as sequence","user":"598af379e4b02b9968b84ce6"},{"code":"(fn pascal [iteration]\n  (if (<= iteration 1)\n    [1]\n    (let [baselist (pascal (- iteration 1))]\n      (vec\n       (map +\n            (conj baselist 0)\n            (cons 0 baselist))))))","problem":97,"user":"53712c03e4b0fc7073fd6ea9"},{"code":"(fn [x] \n  (loop [n x row []]\n    (cond\n      (zero? n) row\n      :else (recur\n        (dec n)\n        (cons 1\n            (map #(apply + %) \n                (partition-all 2 1 row)))))))","problem":97,"user":"4f1abbfb535d64f60314646e"},{"code":"(fn pascal [r] \n  (if (= r 1) [1] \n    (into [] \n          (concat [1] \n                  (reduce #(conj %1 (apply + %2)) [] (partition 2 1 (pascal (dec r)))) [1]))))","problem":97,"user":"52a32876e4b04e0c58e87bfb"},{"problem":97,"code":"(fn [n] \n  (map #(apply \n         (fn pas [x y] \n           (if (or (zero? x) (= x y)) 1 \n             (+ (pas (dec x) (dec y)) (pas x (dec y))))) %) \n       (for [x (range n)] [x (dec n)])))","user":"55306f9de4b076ab5578f814"},{"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (let [a (p (- n 1))]\n      (vec (map + (cons 0 a)\n                  (conj a 0))))))","problem":97,"user":"4e7dd982535db169f9c796ee"},{"problem":97,"code":"#(->\n  (iterate (fn [row] (vec (map + (cons 0 row) (conj row 0)))) [1])\n  (nth (dec %)))","user":"4fc4eb1ee4b081705acca354"},{"problem":97,"code":"#(last (take %1 (iterate (fn [x] (into [] (map + (concat [0] x) (concat x [0])))) [1])))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"(fn* triag [n]\n  (if (= 1 n)\n    [1]\n    (loop [row (concat [0] (triag (dec n)) [0]) result []]\n      (if (empty? (rest row))\n        result\n        (recur (rest row) (conj result (+ (first row) (second row))))))))","problem":97,"user":"53468f6ce4b084c2834f4a3f"},{"problem":97,"code":"(fn pt \n  [n] \n  (let [\n        sn (fn \n             [n k] \n             (int (reduce (fn [a e] (* a (/ (+ (- n e) 1) e))) 1 (range 1 (inc k)))))] \n    (vec (map #(sn (dec n) %) (range 0 n)))))","user":"577202d2e4b0979f896515c0"},{"problem":97,"code":"#(let [fractions (cons 1 (mapv / (reverse (range 1 %)) (range 1 %)))]\n    (reductions (fn [res fraction]\n                  (* res fraction)) fractions))","user":"58b80ec1e4b0ebc645576d89"},{"code":"(fn pascal [n]\r\n  (nth \r\n (iterate (fn [row] (concat [1] (map (partial reduce +) (partition 2 1 row)) [1])) [1])\r\n  (dec n)))","problem":97,"user":"4fb266a5e4b081705acca28c"},{"problem":97,"code":"#(loop [r [1] n (dec %)]\n   (if (= n 0) r\n     (recur (concat [1] (map (fn [p] (apply + p)) (partition 2 1 r)) [1]) (dec n))))","user":"55c20bd0e4b0e31453f64972"},{"code":"(fn [row] (vec (for [idx (range 1 (inc row))]\n                 ((fn pascal [column current-row]\n                   (cond \n                    (= column 1) 1\n                    (= column current-row) 1\n                    :else (+ (pascal column (dec current-row)) (pascal (dec column) (dec current-row))))) idx row))))","problem":97,"user":"5302b580e4b0d8b024fd3733"},{"problem":97,"code":"(fn [n]\n  (loop [ctr (dec n)\n         res [1]]\n    (if (= 0 ctr)\n      res\n      (recur \n       (dec ctr)\n       (into [] (map #(apply + %) (partition 2 (interleave (conj res 0) (cons 0 res)))))))))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(\n  fn sol [ n ](\n\n\n\t\tmap (\n\n\n\t\t\tlet[ fib #( reduce *  ( range 1 ( inc % ) )       ) ] (\n\n\n\t\t\t\tfn comb [ x ] (\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tif( zero? x ) 1\n\t\t\t\t\t( \n\t\t\t\t\t\n\t\t\t\t\tif ( = ( dec n ) x )  1  \n\t\t\t\t\t\t\n\t\t\t\t\t(   / \n\t\t\t\t    \t( fib ( dec n ) ) \n\t\t\t\t\t    ( * ( fib x ) ( fib ( - n 1 x ) ) ) \n\t\t\t\t\t \n\t\t\t\t\t)   \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t) \n\t\t\t\t\n\t\t\t\t\n\t\t\t\t) \n\t\t\t\n\t\t\t\n\t\t\t) \n\t\t\t\t\t\n\t\t\t\t\t \n\t\t)         ( range n )\n\n\n\t) \n)","problem":97,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":97,"code":"(fn [row] (let [r (dec row)] (letfn [(fac [n] (if (= 0 n) 1 (apply * (range 1 (inc n))))) (bin [k] (/ (fac r) (* (fac k) (fac (- r k)))))] (apply vector (map bin (range (inc r)))))))","user":"5f2c94b4e4b033932238a669"},{"problem":97,"code":"(fn pascal [n] (if (= n 1) [1] (last (take (dec n) (iterate (fn [xs] \n(concat (conj (map + (butlast xs) (rest xs)) 1) '(1))) [1 1])))))","user":"5eec1001e4b07c55ae4a0502"},{"code":"(fn [n]\n       (let [n (dec n)]\n         (loop [previous n\n                acc [1 n]\n                c (dec n)]\n           (cond (zero? n) [1]\n                 (= 1 (last acc)) acc\n                 :else (let [next-num (/ (* previous c) (count acc))]\n                         (recur next-num\n                                (conj acc next-num)\n                                (dec c)))))))","problem":97,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":97,"code":"(fn simple-triangle [n]\n    (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else (let [prev-triangle (simple-triangle (- n 1))]\n              (concat [1]\n                      (map (fn [x1 x2] (+ x1 x2))\n                           prev-triangle (next prev-triangle))\n                      [1]))))","user":"560e9a2de4b05f002753df52"},{"problem":97,"code":"#(loop [n (dec %) s [1]]\n   (if (zero? n)\n     s\n     (recur (dec n) (mapv + (cons 0 s) (conj s 0)))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (concat \n      [1] \n      (map (partial apply +) \n           (partition 2 1 (pascal (dec n)))) \n    [1])))","problem":97,"user":"4db1b3951254ad5b4805fa6f"},{"problem":97,"code":"#(letfn [(fact [a]\n               (if (zero? a)\n                 1\n                 (* a (fact (dec a)))))\n         (ncr [a b]\n              (/ (fact a)\n                 (* (fact b) (fact (- a b)))))]\n   (map (fn [x]\n          (ncr (dec %) x))\n        (range %)))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [n]\n     (nth (iterate \n               (fn [prevrow]\n                 (concat \n                   [1] \n                   (map #(apply + %) (partition 2 1 prevrow))\n                   [1]))\n               [1])\n          (dec n)))","problem":97,"user":"502ade49e4b0614b52996120"},{"code":"(fn [r]\n  (loop [c r\n         a [1]]\n    (if (= 1 c)\n      a\n      (recur (dec c) (conj (into [1] (map (partial apply +) (partition 2 1 a))) 1)))))","problem":97,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [n]\r\n  (loop [n n pas [1]]\r\n    (if (= 1 n)\r\n      pas\r\n      (recur (- n 1) \r\n        ((fn [a]\r\n          (loop [a a p [1]]\r\n            (if (= (count a) 1)\r\n              (conj p 1)\r\n              (recur (rest a) (conj p (+ (first a) (second a))))))) pas)))))","problem":97,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn p [n]\n  (if (= 1 n) [1]\n      (let [c concat m (dec n) z [0] r (p m)] (map + (c z r) (c r z)))))","problem":97,"user":"5357b241e4b04ce2eb3ed282"},{"code":"(fn [size]\n  ((fn pas [tri s]\n    (if (= s size)\n      tri\n      (pas (concat [1] (map + tri (rest tri)) [1]) (inc s))\n      ))\n   [1] 1))","problem":97,"user":"52cca65be4b07d0d72b2736b"},{"problem":97,"code":"#(nth ((fn pascals-triang\n        [coll]\n        (cons coll (lazy-seq (pascals-triang (map + (cons 0 coll)(concat coll [0])))))) [1]) (dec %))","user":"542d2385e4b0dad94371f2b2"},{"code":"(fn pascaltri [v]\n  (letfn [(ptricalc [x]\n\t    (concat (list (first x)) (map + (rest x) (butlast x)) (list (last x)))\n\t)]\n\t(nth (iterate ptricalc [1]) (- v 1))\n\t)\n)","problem":97,"user":"50588af1e4b06522596eba7d"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (loop [prev (pascal (dec n)), res [1]]\n      (if (seq (rest prev))\n        (recur (rest prev) (conj res (+ (first prev) (first (rest prev)))))\n        (conj res 1)))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [i]\n\t(let [f #(apply * (range 1 %))]\n\t\t(map #(/ (f i) (f (+ 1 %)) (f (- i %))) (range i))))","problem":97,"user":"528a3e14e4b0239c8a67ae72"},{"code":"#(reduce (fn [xs _]\n           (concat [1] (map + xs (rest xs)) [1]))\n         [1] (range 1 %))","problem":97,"user":"518696c1e4b0c40be512d708"},{"problem":97,"code":"(fn [r]\n  (map (comp last take) (reverse (range 1 (+ 1 r))) (take r (iterate (partial reductions +) (take r (repeat 1))))))","user":"5a99b688e4b0d174b936c7a6"},{"problem":97,"code":"(fn [a]\n  (loop [n a b [1]]\n    (if (<= n 1)\n      b\n      (recur (dec n) (conj (vec (map + b (cons 0 b))) 1))))\n)","user":"5405885ee4b0addc1aec6668"},{"code":"(fn fx [n] ( cond\n                     (= n 1) [1]\n                     (= n 2) [1 1]\n                     :else (let [l (map #(apply + %) (partition 2 1 (fx (dec n))))] (concat [1] l [1])  )\n                     ))","problem":97,"user":"511d11d7e4b022853b0e079f"},{"code":"(fn[a](nth (iterate #(map + `(0 ~@%) `(~@% 0)) [1])(dec a)))","problem":97,"user":"4f296a80e4b0d6649770a02a"},{"problem":97,"code":"(fn [n]\n   (nth (iterate #(concat [1]\n                          (->> % (partition 2 1) (map (partial apply +)))\n                          [1]) \n                 [1]) \n        (dec n)))","user":"55f2e47de4b06e875b46ce4d"},{"code":"(fn [n]\n  (let [pascal (fn pascal [x y]\n                 (if (or (= x 1) (= y 1))\n                   1\n                   (+ (pascal x (- y 1)) (pascal (- x 1) y))))]\n    (map pascal (range 1 (+ n 1)) (range n 0 -1))))","problem":97,"user":"4e976f79535dbda64a6f6b55"},{"problem":97,"code":"(fn pascal [n]\n \t(if (= n 1)\n      [1]\n      (if (= n 2)\n        [1 1]\n        (let [pnm1 (pascal (dec n))]\n          (into [1] (conj (into [] (butlast (map + pnm1 (rest (cycle pnm1))))) 1))\n          )\n        )\n      )\n  \t)","user":"57a13745e4b0c3d858beb8e3"},{"problem":97,"code":"(fn pascal-1 [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    (= 3 n) [1 2 1]\n    :else (vec (flatten [1\n           (let [current (pascal-1 (dec n))] (vec (map #(reduce + %) (partition 2 1 current))))\n           1]))))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [n]\n          (loop [p [1]]\n            (cond\n             (= (count p) n) p\n             (= (count p) 1) (recur [1 1])\n             :else (recur (concat [1]\n                                  (map #(+ (first %) (last %)) (partition 2 1 p))\n                                  [1]))\n             )))","problem":97,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn [row]\r\n  (letfn [(build-row [prev-row]\r\n  \t     (let [n (inc (count prev-row))]\r\n\t\t       (mapcat\r\n\t\t\t(fn [k] [(+ (nth prev-row (dec k) 0)\r\n\t\t\t\t    (nth prev-row k 0))])\r\n\t\t\t(range 0 n))))]\r\n    (nth (iterate build-row [1]) (dec row))))","problem":97,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (let [s (pascal (dec n))]\n      (map + (concat '(0) s) (concat s '(0))))\n      )\n  )","problem":97,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn [x] (if (< 1 x) (loop [c 1 v [1]]\n           (if (> (dec x) c)\n             (recur (inc c) (conj v (* (last v) (/ (- x c) c))))\n             (conj v 1)\n             )\n            ) (vector 1) ))","problem":97,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":97,"code":";loops thru columns of a single row\n(fn pascal [row]\n   (loop [col 0, z 1, ret []]\n     (cond  \n      (>= col row) ret\n      (= col 0 )  (recur (inc col) z [z])\n      :else  (let [q  (* z (/ (- row col) col))]\n               (recur (inc col) q (conj ret (int q)) )))))","user":"572ac718e4b0f4d77e651242"},{"problem":97,"code":"(fn[numRows](loop [i 0 row [1]](if (= (inc i) numRows) row (recur (inc i)   (concat [1] ((fn[col](map #(reduce + %) col)) (partition 2 1 row)) [1])    )) ))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n     (let [last (pascal (- n 1))]\n       (concat [1] (map + last (rest last)) [1]))))","problem":97,"user":"4e5867d1535d8a8b8723a291"},{"problem":97,"code":"(fn __\n  ([n]\n   (__ n 1 [1]))\n  ([n c r]\n   (println n c r)\n    (if (= c n )\n      r\n      (__ n (inc c) (vec (concat (conj (map #(apply + %) (partition 2 1 r)) 1) [1]))))))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":97,"code":"(fn pascal\r\n  [i]\r\n  (if (= 1 i)\r\n    [1]\r\n    (concat\r\n      [1]\r\n      (map\r\n        #(apply + %)\r\n        (partition 2 1 \r\n          (pascal (dec i))))\r\n      [1])))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn pascal [n]\n  (loop [result (vec (repeat n 1))\n  \t\t index 1]\n    (if (>= index (dec n))\n      result\n      (let [last (pascal (dec n))]\n      (recur (assoc result index (+ (get last (dec index))\n                                    (get last index)))\n             (inc index))))))","problem":97,"user":"538d464ee4b0b51d73faae69"},{"problem":97,"code":"(fn [n]\n  (let [pascal-iter (fn [x]\n                      (if (= (count x) 1) \n                        [1 1]\n                        (concat [1]\n                                (map (partial reduce +)\n                                     (partition 2 1 x))\n                                [1])))\n        pascals (iterate pascal-iter [1])]\n    (nth pascals (dec n))))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":97,"code":";; horrible...\n\n(fn [n] (loop [k 1 res [1]]\n\t(if (= k n)\n  \tres\n\t(recur (+ 1 k) (conj res (* (res (- k 1)) (/ (- (+ 1 n) (+ 1 k)) k)))))))","user":"53573d70e4b04ce2eb3ed278"},{"problem":97,"code":"(fn p [n] (cond (= n 1) [1] (> n 1) (conj (vec (conj (map + (drop-last (p (dec n))) (drop 1 (p (dec n)))) 1)) 1)))","user":"53f035c2e4b0742d9025b0d2"},{"code":"#(nth\n  (iterate\n   (fn [coll]\n     (map (partial apply +) (partition 2 1 (concat [0]  coll [0]))))\n   [1])\n  (dec %))","problem":97,"user":"5224a46ce4b01819a2de42e5"},{"problem":97,"code":"(fn [n]\n    (let [row   (fn [xs]\n    (loop [xs xs\n           ys [(first xs)]]\n      (if (= 1 (count xs))\n        (conj ys (first xs))\n        (recur (rest xs)\n               (conj ys (+ (first xs) (nth xs 1)))))))]\n    (loop [xs [1] i 1]\n      (if (= i n)\n        xs\n        (recur (row xs) (inc i))\n        ))))","user":"58b81490e4b0ebc645576d8c"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)]\n    (letfn [(! [x] (->> x inc (range 1) (reduce *)))\n            (c [r] (/ (! n) (* (! r) (! (- n r)))))]\n      (->> n inc range (map c)))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn p [i]\n  (cond\n   (= i 1) [1]\n   (= i 2) [1 1]\n   :else (let [a (p (dec i))]\n           (concat [1] (map #(apply + %) (partition 2 1 a)) [1]))))","problem":97,"user":"522a01ade4b0590a43906ced"},{"code":"(fn [n]\n   (letfn [(lazy-pascal \n            ([]\n               (concat '([1] [1 1]) (lazy-pascal [1 1])))\n            ([prev]\n               (let [now (concat [1] (map (partial apply +) (partition 2 1 prev)) [1])]\n                 (lazy-seq\n                  (cons now (lazy-pascal now))))))]\n      (nth (lazy-pascal) (dec n))))","problem":97,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [start-number]\n  (letfn [(pascals-triangle-next-row [list]\n            (flatten (reduce (fn [[lst last_num] num] (vector (conj lst (+ last_num num)) num)) [[1], 1] (rest list))))]\n    (when (> start-number 0)\n      (loop [number (- start-number 1)\n             result [1]]\n        (if (<= number 0)\n          (vec result)\n          (recur (- number 1) (pascals-triangle-next-row result)))))))","problem":97,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":97,"code":"(fn ps\n  ([x] (ps x [1]))\n  ([x coll]\n   (if (= x 1)\n     coll\n     (ps (dec x) (conj (into [1] (map + (rest coll) (reverse (rest coll)))) 1)))))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":97,"code":"(fn pascal [n]\n  (loop [m n\n         acc [1]]\n    (if (= m 1)\n       acc\n       (recur (dec m) (concat [1] (map #(apply + %) (partition 2 1 acc)) [1])))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [n]\n  (letfn [(pt-next-line [l]\n            (conj (vec (cons 1 ((comp (partial map #(apply + %))\n                                      (partial partition 2)\n                                      next butlast)\n                                (mapcat list l l)))) 1))]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (loop [res [1 1] n (- n 2)]\n                  (if (zero? n) res\n                      (recur (pt-next-line res) (dec n)))))))","problem":97,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal  \n            ([] (pascal [1]))\n            ([xs] (cons xs (lazy-seq \n                             (pascal \n                               (loop [acc [1] xs xs ]\n                                 (if (= 1 (count xs)) (conj acc 1)\n                                   (recur (conj acc (apply + (take 2 xs))) (rest xs)))))))))]\n    (nth (pascal) (dec n))))","user":"54dce62fe4b024c67c0cf78c"},{"problem":97,"code":"(fn [f]\n  \n\t(nth (iterate \n          \n          (fn [f1]\n            \n            (mapv + (conj f1 0) (cons 0 f1))) [1]) (dec f))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"problem":97,"code":"(fn f97 [n]\n  (last (take n (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":97,"code":"(fn [n]\n  (let [step #(into [] (concat '(1) (map + (drop 1 %) %) '(1)))]\n\t(last (take n (iterate step [1])))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":97,"code":"(fn [row-num]\n  (letfn [(next-row \n           [row]\n           (concat (map-indexed\n                    #(if (zero? %)\n                       %2\n                       (+ (nth row (dec %)) %2))\n                    row) [1]))\n          (recur-row\n           ([] (recur-row '()))\n           ([row] (cons row (lazy-seq (recur-row (next-row row))))))]\n      (nth (recur-row) row-num)))","user":"5367bc60e4b0243289761e81"},{"problem":97,"code":"#(reduce (fn [[h :as l] [n z]] (cons (quot (* h z) n) l)) '(1) (map list (range 1 %) (range (dec %) 0 -1)))","user":"576e3258e4b0979f89651574"},{"problem":97,"code":"(fn [n]\n    (loop [v [1]\n           i 1]\n      (if (= n i)\n        v\n        (recur\n          (apply vector\n                 (map #(apply + %) (partition 2 1(into [0] (conj v 0)))))\n          (inc i)))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n              (case row\n                [1] [1 1]\n                (reduce #(conj %1 (apply + %2)) [1] (partition-all 2 1 row))))]\n    (loop [i 1\n           row [1]]\n      (if (= n i)\n        row\n        (recur (inc i) (next-row row))))))","user":"54edfa10e4b024c67c0cf868"},{"problem":97,"code":"(fn [x]\n  (map #(/ (apply * (range (inc %) x)) (apply * (range 1 (- x %))) ) (range 0 x))\n  )","user":"57440f77e4b0c285004e8ab5"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (let [line [1]]\n    (loop [k 1 l line]\n      (if (= k n)\n        l\n        (recur \n          (inc k) \n          (conj l (* (nth l (dec k)) (/ (- n k) k ) ) ))))))","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn [r]\n  (if (= 1 r)\n    [1]\n    (conj (vec (reductions\n                (fn [res c] (* res (/ (- r c) c)))\n                1 (range 1 (dec r)))) 1)))","problem":97,"user":"4db86aee535d1e037afb2193"},{"problem":97,"code":"(fn [c] \n    (let [p (fn [n] (loop [pr  [1] \n                                out [[1]]\n                                i      1]\n                           (if (= i n)\n                             out    \n                             (let [a (into [] (map #(reduce + %) (partition 2 1 pr)))\n                                   r             (into [] (concat [1] (conj a 1)))]\n                               (recur r (conj out r) (inc i)))))) \n          o      (p c)] \n      (nth o (- c 1))))","user":"5683fcafe4b0945ebc182aa8"},{"code":"(fn ! [n]\n  (if (= n 1)\n    [1]\n    (let [p (! (- n 1))]      \n      (map + `(0 ~@p) `(~@p 0)))))","problem":97,"user":"52318843e4b0e2e8de81d1e8"},{"problem":97,"code":"#(loop [r [1] d 1] (if (= d %) r (recur (conj r (/ (* (last r) (- % d)) d)) (inc d))))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"(fn [n] (nth (iterate #(flatten \n[(first %) (map + (rest %) (drop-last %)) (last %)]) \n                      \t\t\t      [1]) (dec n)))","problem":97,"user":"512f06c5e4b0762be4c7aad7"},{"problem":97,"code":"(fn pascalLevel [x] \n           (if (<= x 2)\n             (take x (repeat x 1))\n             (flatten (vector 1 (map #(apply + %1) (partition 2 1 (pascalLevel (dec x)))) 1))\n        )\n        )","user":"536829c8e4b0243289761e8b"},{"code":"(fn \n  [row-level]\n  (loop [ level-seq  [1]\n          level-count 1 ] \n   (if (= row-level level-count)\n    level-seq\n    (recur \n      (into [] (concat [1] (map #(apply + %) (partition 2 1 level-seq)) [1]))\n      (inc level-count))    \n   )\n  )\n)","problem":97,"user":"5029f263e4b023940c84aa45"},{"code":"(fn pascal-triangle [i-depth]\r\n     (let [triangle ((fn construct\r\n          ([result c-depth]\r\n           (if (= c-depth i-depth)\r\n             result\r\n             (construct\r\n               (reduce\r\n                   (fn [current next]\r\n                       (conj current next))\r\n                   result\r\n                   (map\r\n                       (fn [i-col]\r\n                           (if (and (zero? i-col) (zero? c-depth))\r\n                             (vector (vector c-depth i-col) 1)\r\n                             (if (zero? i-col)\r\n                               (vector (vector c-depth i-col) (get result (vector (dec c-depth) i-col)))\r\n                               (if (= i-col c-depth)\r\n                                 (vector (vector c-depth i-col) (get result (vector (dec c-depth) (dec c-depth))))\r\n                                 (vector\r\n                                   (vector c-depth i-col)\r\n                                   (+ (get result (vector (dec c-depth) (dec i-col)))\r\n                                      (get result (vector (dec c-depth) i-col))))))))\r\n                       (range (inc c-depth))))\r\n                   (inc c-depth)))))\r\n      {} 0)]\r\n       (println triangle)\r\n       (map\r\n         (fn [i-col]\r\n             (get triangle (vector (dec i-depth) i-col)))\r\n         (range i-depth))))","problem":97,"user":"4dddf817535d08e6dec9fdd3"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pascals-triangle (dec n)))) [1])))","user":"5879d577e4b01531a375ead8"},{"problem":97,"code":"(fn pascal-t\n  ([n]\n   (pascal-t n [1]))\n  ([n coll]\n    (if (= n (count coll))\n      coll\n      (pascal-t n (concat [1] (mapv + (butlast coll) (rest coll)) [1])))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n  1 [1]\n  (let [last-p (pascal (dec n))\n        p1 (cons 0 last-p)\n        p2 (conj last-p 0)]\n    (vec (map + p1 p2)))))","user":"557f7c8be4b05c286339e0e0"},{"problem":97,"code":"(fn pascals [n]\n  (cond\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   :else (let [prev (pascals (dec n))]\n           (vec (concat [1] (map (partial apply +) (partition 2 1 prev)) [1])))))","user":"53e543efe4b036ad0777e457"},{"code":"(fn pascal-row\n  [n]\n  (map (fn hi [r c]\n         (if (zero? c)\n           1\n           (* (hi r (dec c)) (/ (- r (dec c)) c)))) \n       (repeat n (dec n)) \n       (range n)))","problem":97,"user":"51f2a491e4b0210f90e74553"},{"problem":97,"code":"(fn [n]\n  (loop [prev [1], left (dec n)] \n    (if (zero? left) \n      prev \n      (recur \n       (let [[_ & ys :as xs] (flatten [0 prev 0])\n             pairs (map vector xs ys)] \n         (map #(apply + %) pairs)) \n       (dec left)))))","user":"54d22860e4b0e8a36923e5ef"},{"problem":97,"code":"(fn [n]\n  ;; n is the row, starting at 1; below is the helper function for\n  ;; calculating n over k, which basically does all the work:\n  (let [over (fn [n k]\n               (loop [curn n curk 0 res 1]\n                 (if (= curk k)\n                   res\n                   (recur (dec curn) (inc curk) (* res (/ curn (inc curk)))))))]\n    (map (partial over (dec n)) (range n))))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (loop [i 2\n           p [1 1]]\n      (if (= i n)\n        p\n        (let [new-p\n              (second\n               (reduce\n                #(let [[last-elem res] %1]\n                   [%2 (conj res (+ last-elem %2))])\n                [(first p) []]\n                (rest p)))]\n          (recur (+ i 1) (cons 1 (conj new-p 1))))))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":97,"code":"(fn pascal [line]\n  (if (< line 2) (vector 1)\n    (concat (vector 1) ((fn prev [x]\n                          (if (< (count x) 2) '()\n                            (cons (+ (first x) (second x))\n                                  (prev (rest x))))) (pascal (dec line))) (vector 1))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn [m]\n  (let [n (dec m)]\n    (vec (map (fn [k] (int (reduce * 1 (map #(/ (- n (- k %)) %) (map inc (range k)))))) (range (inc n))))))","problem":97,"user":"51424cc8e4b0b50abeb46b34"},{"problem":97,"code":"(fn [y]\n  (reduce (fn [x _]\n            (case (count x)\n              0 [1]\n              1 [1 1]\n              (let [z (partition 2 1 x)\n                    w (map #(reduce + 0 %) z)]\n                (concat [1] w [1])))) [] (repeat y 1 ))\n    )","user":"57f28b22e4b0511f1d294def"},{"code":"(fn pascals\n  [n]\n  (letfn [(row [prev]\n            (map #(apply + %) (partition 2 1 prev)))\n          (p [prev x]\n            (if (> x 0)\n              (recur (concat [1] (row prev) [1]) (dec x))\n              prev))]\n    (if (= n 1)\n      [1]\n      (p [1 1] (- n 2)))))","problem":97,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":97,"code":"(fn pascal [row]\n      (map (comp last take)\n         (reverse (range 1 (+ 1 row)))\n         (take row (iterate (partial reductions +) (take row (repeat 1))))))","user":"5410499de4b01498b1a719a6"},{"code":"(fn [n]\r\n  (letfn [(pn [k r]\r\n            (cond\r\n              (zero? r) 1\r\n              (= k r) 1\r\n              :else (+ (pn (- k 1) r) (pn (- k 1) (- r 1)))))]\r\n    (map #(pn (- n 1) %) (range n))))","problem":97,"user":"4ee40938535d10e5ff6f5375"},{"problem":97,"code":"(fn pas \n  [n] (if (= 1 n) [1]\n        (let [prev (pas (dec n))]\n         (vec (map + (conj prev 0) (into [0] prev))))))","user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn pt [n]\n  (if (= n 1) [1]\n  (let [prev (pt (dec n))\n        a (conj prev 0)\n        b (into [0] prev)]\n    (vec (map + a b)))))","problem":97,"user":"507a396be4b08327cd804a69"},{"code":"(fn [r]\n    (loop [c 1, v [1]]\n      (if (= r c)\n        v\n        (recur (inc c) (conj v (* (last v) (/ (- r c) c))))\n        )))","problem":97,"user":"4f038567535dcb61093f6b0c"},{"problem":97,"code":"(fn [n]\n  (last\n   (take n (iterate\n            (fn [c]\n              (concat '(1) (map #(apply + %) (partition 2 1 c)) '(1)))\n            '(1)))))","user":"543c5200e4b032a45b86933e"},{"problem":97,"code":"(fn pascal [y]\n  (let [n (dec y)\n        factorial (fn [x] (reduce * (range 1 (inc x))))\n        n-choose-r (fn [r] (/ (factorial n)\n                              (* (factorial r)\n                                 (factorial (- n r)))))]\n    (conj (into [] (map n-choose-r (range n))) 1)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":97,"code":"(fn _pt [a]\n  (loop [i a, s [1]]\n    (if (= i 1)\n      s\n      (recur (dec i) (cons 1 (concat (map + s (drop 1 s)) [1])))\n)))","user":"54524afbe4b0e397800069bc"},{"code":"(fn [i] (nth (iterate #(map + (cons 0 %) (concat % [0])) [1]) (- i 1)))","problem":97,"user":"4e5411e8535d8a8b8723a279"},{"problem":97,"code":"(fn [x]\n  (loop [n x\n         i 1\n         prev [1]\n         sub [1]\n         res [[1]]]\n   (if (= 1 n)\n       sub\n       (if (< i n)\n           (if (seq prev)\n               (recur n \n                      i \n                      (next prev) \n                      (if (< 1 (count prev))\n                          (conj sub (+ (first prev) (second prev)))\n                          (conj sub (+ (first prev) 0)))\n                      res)\n               (recur n (inc i) sub [1] (conj res sub)))            \n           (get res (- n 1))))))","user":"593744abe4b02506e01a299b"},{"code":"(fn f [n]\n  (nth\n    (iterate\n      #(vec (rest (map (partial apply +)\n                       (reductions\n                         (fn [a b] [(last a) b])\n                         [0]\n                         (conj % 0)))))\n      [1])\n    (dec n)))","problem":97,"user":"50ed4626e4b01236b1d4983c"},{"code":"#(last \n  (take % \n    (iterate \n      (fn [r] \n        (vec \n          (flatten \n            (list \n              1 \n              (for [x (partition 2 1 r)] (apply + x)) \n              1)))) \n      [1])))","problem":97,"user":"50a4f36be4b0344e360f3bc9"},{"problem":97,"code":"(fn triangle [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first\n                      (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0] (triangle (dec n))))\n                    1)))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn pascal [n]\n  (letfn [(make-line [xs]\n  (loop [in xs\n         out []]\n    (if (< (count in) 2)\n      out\n      (recur\n       (drop 1 in)\n       (conj out (reduce + (take 2 in)))))))]\n  (loop [tri [[1]]\n         i   1]\n    (if (= i n)\n      (last tri)\n      (recur\n        (conj tri (concat [1] (make-line (last tri)) [1]))\n        (+ i 1))))))","problem":97,"user":"51365524e4b04ac1f358dd52"},{"problem":97,"code":"(fn tri [n]\n  (if (= n 1) [1]\n   (concat [1]\n           (mapv #(apply + %)\n                 (partition 2 1 (tri (dec n))))\n           [1])))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn pascals-row [n]\n  (cond (<= n 1) [1]\n        (= n 2) [1 1]\n        :else (concat [1] (vec (map (partial apply +) (partition 2 1 (pascals-row (dec n))))) [1])))","problem":97,"user":"5119f3d5e4b06c8af0111818"},{"problem":97,"code":"#(loop [i 0, result []]\n   (if (= i %)\n     result\n     (recur\n       (inc i)\n       (loop [in result, out [1]]\n         (if (< (count in) 2)\n           (concat out in)\n           (recur\n             (rest in)\n             (conj out (apply + (take 2 in)))))))))","user":"58247423e4b051871117bec5"},{"problem":97,"code":"(fn pasc2 [n]\n   (loop [c n v [(bigint 1)]]\n     (if (= c 1)\n       v\n       (recur (dec c) (concat [(bigint 1)] (map + v (rest v)) [(bigint 1)])))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":97,"code":"#(loop [n %\n        v [[1]]]\n   (if (= n (count v))\n     (last v)\n     (recur n (conj v (cons 1 (reverse (->> (last v)\n                                            (partition 2 1)\n                                            (map (partial apply +))\n                                            (cons 1))))))))","user":"57262710e4b0c5bde472c120"},{"problem":97,"code":"(fn [y] (nth (iterate (fn [lj] (concat [1] (map #(apply + %) (partition 2 1 lj)) [1])) [1]) (- y 1)))","user":"582c986ee4b051871117bf9b"},{"code":"(fn pasc [n]\n    (if\n      (= n 1) [1]\n      (let [b (pasc (dec n))] \n        (conj (vec (cons 1 (map + (rest b) b))) 1)\n      )\n    )\n)","problem":97,"user":"4f8b56dae4b02e764a0a517e"},{"problem":97,"code":"(fn [n]\n  (loop [cnt n line [1]]\n    (if (= 1 cnt)\n      line\n      (recur (dec cnt )\n             (conj (loop [l line out [1]]\n                     (if (= (count l) 1)\n                       out\n                       (recur (rest l) (conj out (+ (first l) (first (rest l)) )))\n                       )\n                     ) 1)\n             ) \n      )\n    )\n  )","user":"574986cae4b009280f9f2b9c"},{"code":"(fn [n] (nth (iterate #(concat [1] (map + % (next %)) [1]) [1]) (dec n)))","problem":97,"user":"534bde26e4b084c2834f4a81"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)]\n    (letfn [(! [x] (reduce * (range x 1 -1)))\n            (choose-n [k]\n              (/ (! n)\n                 (* (! k)\n                    (! (- n k)))))]\n      (mapv choose-n (range (inc n))))))","user":"505aa653e4b021387fb89857"},{"code":"(fn pascal [i]\n  (cond (= 1 i) [1]\n        (= 2 i) [1 1]\n        :else (concat [1] \n                      (map #(reduce + %) (partition 2 1 (pascal (dec i)))) \n                           [1])))","problem":97,"user":"5018ed15e4b011a2e0bf6412"},{"problem":97,"code":"(fn pascal [n]\n  (let [next-row\n        (fn [xs] (->> (partition 2 1 xs)\n                      (map #(apply + %))\n                      (#(concat [1] % [1]))))]\n    (-> (iterate next-row [1])\n        (nth (dec n)))))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn [n]\n  (nth \n    (iterate \n      (fn [r] (map + (concat r [0]) (concat [0] r)))\n      [1])\n    (dec n)))","problem":97,"user":"5012ec0ae4b0c87326002230"},{"code":"(fn [row]\n  (loop [result [1] c 1 prev 1]\n    (if (= c row)\n      result\n      (let [n (* prev (/ (- row c) c))]\n       (recur (conj result n) (inc c) n)))))","problem":97,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [i]\n  (vec (loop [row [1] n i]\n         (if (= 1 n)\n           row\n           (recur (map + (cons 0 row) (concat row '(0))) (- n 1))))))","problem":97,"user":"51383346e4b0a5db03d727d4"},{"problem":97,"code":"(fn [lvl]\n  (loop [row [1]]\n    (if (= (count row) lvl)\n      row\n      (recur (into (into [1] (map #(reduce + %) (partition 2 1 row))) [1])))))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":97,"code":"(fn pascals-triangle [n]\n   (nth (iterate #(map (partial apply +) (partition 2 1 [0] (concat [0] %))) [1]) (dec n)))","user":"5a544eeee4b05d388ecb6c24"},{"problem":97,"code":"(fn o [n] \n  (letfn [(t [l] \n    (concat \n      [1] \n      (map + \n         (next l) \n         (butlast l)) \n      [1]))] \n  (if (= 1 n) \n    [1] \n    (t (o (dec n))))))","user":"56b86e64e4b0f26550335924"},{"problem":97,"code":"#(last (take % (\n                (fn pascal-triangle\n                  ([] (pascal-triangle [1] [1 1]))\n                  ([prev row]\n                   (lazy-seq\n                     (concat [prev]\n                             (if (= 1 (count row))\n                               (pascal-triangle row [1 1])\n                               (pascal-triangle row (concat [1]\n                                                            (remove nil? (map-indexed (fn [i val]\n                                                                                        (when (> (count row) (inc i))\n                                                                                          (+ val (nth row (inc i))))\n                                                                                        ) row))\n                                                            [1]))\n                               ))\n                     )))  \n                 )))","user":"5e348945e4b0650de70e2b1d"},{"code":"#(map (fn p [c] (if (= c 0) 1 (* (p (dec c)) (/ (- % c) c)))) (range %))","problem":97,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn pascal [n]\r\n  (letfn [(add-pairs [coll]\r\n                     (loop [coll coll\r\n                            res []]\r\n                       (if (empty? (next coll))\r\n                         res\r\n                         (recur (next coll)\r\n                                (conj res (+ (first coll) (fnext coll)))))))]\r\n    (condp = n\r\n        1 [1]\r\n        2 [1 1]\r\n        (vec (conj (seq (conj (add-pairs (pascal (dec n)))\r\n                               1))\r\n                   1)))))","problem":97,"user":"4dd023dd535d5973398f92ad"},{"problem":97,"code":"(fn [n] (loop [acc [1]] (if (= (.size acc) n) acc (recur ((fn [y] (conj (into [1] (for [x (range (dec (.size y)) ) ] (+(nth y x)(nth y (inc x))) ) ) 1 )) acc)) ) ) )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [row]\n  (nth\n    (iterate\n      #(map +\n        (concat '(0) %)\n        (concat % '(0)))\n      '(1)) (dec row)))","problem":97,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [d]\n  (let [pas (fn [n]\n  (let [fact \n    (fn [x] \n      (reduce * (range 2 (+ 1 x))))]\n  (map #(/ (fact n) (* (fact %) \n                       (fact (- n %))))\n       (range 0 (+ n 1)))))]\n  (pas (- d 1))))","problem":97,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn [n]\n (reduce\n  (fn [x y] (concat [1] (map (fn [a b] (apply + (vector a b))) x (rest x)) [1]))\n  [1]\n  (range 1 n)))","problem":97,"user":"5097b556e4b00ad8bab4e970"},{"code":"(fn [n]\n (reduce \n  (fn [acc val] \n    (conj acc (/ (* (last acc) (- (dec n) val)) (+ val 1)))) \n  [1] \n  (range (dec n))))","problem":97,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [n] \n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %)\n                      )\n                  ) '[1]\n        ) \n       (dec n)\n  )\n)","problem":97,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn pt [row] \n  (nth \n    (iterate (fn [prev-row] \n               (concat [1]   ;; Add 1 to beginning of row\n                       (map  ;; Find \"middle\" of row\n                         #(reduce + %)             ;; add values from pairs\n                         (partition 2 1 prev-row)) ;; create overlapping pairs\n                       [1])) ;; Add 1 to end of row\n             [1]) ;; Start iterating from 1st row\n    (dec row))) ;; account for zero-based indexing in collection created by iterate","problem":97,"user":"4fa9e9c6e4b081705acca1e9"},{"code":"#(map (fn [k]\n          (/  (reduce * (range 1 %))\n              (* (reduce * (range 1 (+ k 1)))\n                 (reduce * (range 1 (- % k )))) ))\n  (range 0 %))","problem":97,"user":"52bacfa8e4b07a9af57922d6"},{"problem":97,"code":"(fn p [x]\n  (cond \n   (= x 1)[1]\n   (= x 2)[1 1]\n    :else (let [pp (p (dec x))]\n           (conj (vec (conj (map + (rest pp) (pop pp)) 1)) 1))))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn [n] (letfn [(nxt [p]\n                   (vec (concat [1] (map #(+ (p %) (p (inc %)))\n                                         (range (dec (count p))))\n                                [1])))]\n           (nth (iterate nxt [1]) (dec n))))","problem":97,"user":"4ee88bfb535d93acb0a66881"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (if (= n 1)\n    [1]\n    (loop [[x & remaining] (pascals-triangle (dec n))\n           result []]\n      (if (empty? remaining)\n        (cons 1 (conj result 1))\n        (recur \n         remaining\n         (conj result (+ x (first remaining))))))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":97,"code":"(fn [q] (reduce (fn [m p] (conj (pop (reduce (fn [x a] (conj (pop x) (+ (last x) a) a)) [0] m)) 1)) [1] (range (dec q))))","user":"57a5f1e3e4b0a96607956200"},{"problem":97,"code":"(fn ltp [n]\n  (let [npt (fn [s] (mapv + (cons 0 s) (conj s 0)))]\n      (nth (iterate npt [1]) (dec n))))","user":"53e745a1e4b036ad0777e479"},{"problem":97,"code":"(fn trianguloPascal\n  [numeroFila]\n  (if (= 1 numeroFila)\n    [1]\n    (let [p (conj (trianguloPascal (dec numeroFila)) 0)]\n      (map + p (reverse p)))))","user":"59e63a2ce4b08badc2a0c569"},{"problem":97,"code":"(fn [x]\n  (loop [cnt x\n         result [1]]\n    (if (> cnt 1)\n      (recur (dec cnt)  (vec (flatten [1 (map #(apply + %)(partition 2 1 result)) 1])))\n      result\n      )))","user":"534fa9dae4b084c2834f4acf"},{"problem":97,"code":"(fn [x] (loop [c [1] m x] (if (< m 2) c (recur (concat [1] (map #(apply + %) (partition 2 1 c)) [1]) (dec m)))))","user":"5c41db45e4b08cd430848ece"},{"problem":97,"code":"#(loop [r [], n %]\n   (if (> n 0)\n     (recur (concat (map + (cons 0 r) r) [1]) (dec n))\n     r))","user":"58923efce4b00487982d521c"},{"problem":97,"code":"(fn [x]\n  (let [ mk-rows (fn [arr n]        \n                  (let [ sum-adj-pairs (vector (map + (take (dec n) arr) (drop 1 arr))) \n                         next-row      (conj (reduce into [1] sum-adj-pairs) 1) ]\n                    (if (= x n)\n                        next-row   \n                        (recur next-row (inc n)))))  ]\n    (cond\n      (= x 1) [1]\n      (> x 1) (mk-rows [1] 2))))","user":"5243233fe4b076204b44faac"},{"problem":97,"code":"(fn [n] (loop [x [1]]\n          (if (>= (count x) n)\n            x\n            (recur (into [] (concat '(1) (map + x (rest x)) '(1)))))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":97,"code":"(fn [n]\n  (nth ((fn f [col]\n           (cons col (lazy-seq\n                      (f (loop [prev 0 rem col acc []]\n                           (if-not (seq rem)\n                             (conj acc prev)\n                             (recur (first rem) (rest rem) (conj acc (+ prev (first rem))))))))))\n        [1])\n       (dec n)))","user":"4ff9a200e4b0678c553fc3ab"},{"problem":97,"code":"(fn tri ([c] (tri [1] (dec c) 1))\n  ([xs n d]\n   (if (= 0 n)\n     xs\n   \t(recur (conj xs (* (last xs) (/ n d))) (dec n) (inc d)))))","user":"5de12192e4b0948ae9d9aded"},{"problem":97,"code":"(fn  [num] \n  (nth (take num  (iterate #(concat [1] \n                                    (map + % (rest %)) \n                                    [1]) \n                           [1])) (dec num)))","user":"50e90813e4b033b0e80d11e7"},{"code":"(fn pascal-row [n] \n  (if (= n 1) \n    '(1)\n    (let [L (pascal-row (dec n))]\n      (concat '(1) (map + L (rest L)) '(1)))))","problem":97,"user":"4e7263a1535d5021c1a8965f"},{"problem":97,"code":"(letfn \n  [(next [v]\n    (let [a (concat [0] v [0])]\n      (map #(apply reduce +' %&) (partition 2 1 a))))]\n  #(nth (iterate next [1]) (dec %) ))","user":"57717915e4b0979f896515b3"},{"problem":97,"code":"(fn pt [n]\n  (if (= 1 n) [1]\n    (let [pt-1 (pt (dec n))]\n      (map + (concat [0] pt-1) (concat pt-1 [0])))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":97,"code":"#(loop [i 1, result [1]]\n   (if (= i %1)\n     result\n     (recur (+ i 1) \n            (into [] \n                  (map + \n                       (cons 0 result) \n                       (conj result 0))))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn p [n]\n  (if (= 1 n)\n    [1]\n    (concat [1] \n            (map (fn [[a b]] (+ a b)) (partition 2 1 (p (dec n))))\n            [1])))","problem":97,"user":"50d86fe2e4b01f0871336e67"},{"problem":97,"code":"(fn pascal-row [n]\n  (nth (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]) (dec n)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [n] (for [i (range n)] (apply / (map #(apply * (range % 0 -1)) [(dec n) i (- (dec n) i)]))))","problem":97,"user":"5107b86de4b05b2b4eee7495"},{"problem":97,"code":"(fn pascal-row\n  ([n] (cons 1 (lazy-seq (pascal-row n 1 1))))\n  ([n k previous] (let [current (* previous (/ (-  n k) k))]\n                    (if (= k n)\n                      nil\n                      (cons current (lazy-seq (pascal-row n (inc k) current)))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":97,"code":"(fn f [n]\n  (case n\n    1 [1]\n    (conj (map (partial apply +) (partition-all 2 1 (f (dec n)))) 1)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"#(loop [c %\r\n  v [0 1 0]]\r\n    (if (= c 1)\r\n      (-> v rest drop-last)\r\n      (recur (dec c)\r\n             (concat '(0)\r\n                     (for [z (range 1 (count v))]\r\n                       (+ (nth v (dec z))\r\n                          (nth v z)))\r\n                     '(0)))))","problem":97,"user":"4f82ed48e4b033992c121c0e"},{"code":"#(let\n   [nextrow (fn nextrow [row]\n     (vec (concat [1] (map (fn [x] (apply + x)) (partition 2 1 row)) [1] )))\n\n    pascal (fn pascal [n]\n     (assert (and (integer? n) (pos? n)))\n     (let [triangle (take n (iterate nextrow [1]))]\n       (last triangle)))\n    ]\n   (pascal %))","problem":97,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":97,"code":"(fn [x]\n    (letfn [(f [x]\n              (if (= x 0)\n                1\n                (* x (f (- x 1)))))\n            (comb [n r]\n              (/ (f n) (* (f (- n r)) (f r))))]\n      (map-indexed\n       (fn [i _]\n         (comb (- x 1) i)\n         )\n       (repeat x 0))\n      )\n    )","user":"59473563e4b07ddc2dafad97"},{"problem":97,"code":"(fn [row](let [\n               p-val\n  (fn p-val [x y]\n    (do\n      (if (or (= x 1) (= x y) (= y 1))\n        1\n        (+\n         (p-val (dec x) (dec y))\n         (p-val x (dec y))))))\n  ] (vec (map #(p-val % row) (range 1 (inc row))))))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn pascal [p]\n  (let [fact #(reduce * (range 1 (inc %)))\n        nchoose (fn [n] (fn [k] (/ (fact n) (* (fact k)(fact (- n k))))))\n        nchoosek (nchoose (dec p))]\n    (map nchoosek (range p))))","problem":97,"user":"51d96ad0e4b02ceefd94774f"},{"problem":97,"code":"#(let [f (reductions * (iterate inc 1)) g ( fn[n] (nth f (dec n) 1 )) m (dec %) p (map (fn [x] (/ (g m) (* (g x) (g (- m x))))) (range 1 %))]\n    (into [1] p))","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [n]\n    (nth (iterate (fn [row]\n                   (concat [1]\n                           (map #(apply + %) (partition-all 2 1 row)))) [1])\n         (dec n)))","problem":97,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":97,"code":"(fn pascal [n]\n    (if (= n 1)\n      [1]\n      (concat '(1)\n              (map #(reduce + %) (partition 2 1 (pascal (dec n))))\n              '(1))\n      )\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":97,"code":";다시 풀어보자\n\n\n(fn [n] (nth (iterate #(map + (concat [0] %) (concat % [0])) [1]) (dec n)))\n\n;(fn pascal-tri [n]\n; (if (<= n 1) [1]\n;   (let [r (pascal-tri (dec n))]\n;     (map + (concat r [0]) (concat [0] r)))))\n \n\n; 원래 구현하고 한 형태\n;(fn Y [x] (cond \n;           (= x 1) [1]\n;           (= x 2) [1 1]\n;           :else (concat [1] (map #(+ (first %) (second %)) (partition 2 1 (Y (dec x)))) [1])))\n\n;#(loop [before [1]\n;            iterCount %]\n;       (if (= iterCount 1) before\n;         (recur (concat [1] (map + before (rest before)) [1]) (dec iterCount))))\n \n;(fn [n] (nth (iterate #(map + (concat [0] %) (concat % [0])) [1]) (dec n)))\n\n;(fn [i]\n;  (reduce\n;    #(conj %1 (* (last %1) (/ (- i %2) %2)))\n;    [1] (range 1 i)))\n\n;https://gist.github.com/hyone/1062471#file-hyone-4clojure-solution97-clj\n;(fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"572830e6e4b0c5bde472c152"},{"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat\n      [1]\n      (map (partial apply +) (partition 2 1 (pascal (dec n))))\n      [1])))","problem":97,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn [n]\n  (letfn [(factorial [n] (reduce * 1 (range 1 (inc n))))\n          (permutation [n k] (reduce * 1 (range (+ n (- k) 1) (inc n))))\n          (binom-coeff [n k]\n            (let [n-k (- n k)]\n              (if (< k n-k)\n                (/ (permutation n k) (factorial k))\n                (/ (permutation n n-k) (factorial n-k)))))]\n    (for [k (range n)]\n      (binom-coeff (dec n) k))))","problem":97,"user":"519db0ede4b037b32803f9b9"},{"code":"(fn [x] \n  (let \n    [\n      c \n      (fn c [n k] \n        (let [a (inc n)] \n          (loop [b 1 r 1] (if (> b k) r (recur (inc b) (* (/ (- a b) b) r))))))\n    ] \n    (map (partial c (dec x)) (range x))\n  )\n)","problem":97,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn [n]\n  (let [pascal (iterate (fn [v] (vec (map #(apply + %) (map list (cons 0 v) (conj v 0))))) [1])]\n     (nth pascal (dec n))\n )\n)","problem":97,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn pascals-triangle [r]\n  (lazy-seq\n    (if (= r 1)\n      [1]\n      (concat [1] (lazy-seq (map #(+' (first %) (second %)) (partition 2 1 (pascals-triangle (dec r))))) [1]))))","problem":97,"user":"52244a77e4b01819a2de42d1"},{"problem":97,"code":"(fn pascal-row-n\n  ([n]\n   (if (= 1 n)\n     [1]\n     (pascal-row-n n (pascal-row-n (dec n)))))\n  ([_n prev]\n   (let [prev-sum (map (fn [curr next]\n                         (+ curr next))\n                       prev (rest prev))]\n     (-> prev-sum\n         (conj 1)\n         (vec)\n         (conj 1)))))","user":"5e218bb7e4b05b4b01516123"},{"code":"(letfn [(p ([x]\n  (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :t (p x [1 1]))) \n  ([x l]\n    (if (= x (count l))\n      l\n      (p x (concat [1]\n                   (map (fn [[a b]] (+ a b))\n                   (partition 2 1 l))\n                   [1])))))]\np)","problem":97,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn [n]\n    (letfn [(vget [r n]\n                (cond (= n -1)        0\n                      (= n (count r)) 0\n                      :else (get r n)))\n            (v [r n](+ (vget r (dec n))\n                       (vget r n)))]\n           (loop [r [1] m 1]\n             (if (= n (count r))\n               r\n               (recur (vec (map #(v r %) (range (inc m))))\n                      (inc m))))))","problem":97,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":97,"code":"(fn [n]\n  (nth \n    (iterate \n      (fn [coll] (concat [1] (map (partial apply +) (partition 2 1 coll)) [1])) \n      [1]) \n    (dec n)))","user":"4df73d64535d04ed9115e775"},{"problem":97,"code":"(fn pt [n] (let [up (if (> n 2) (pt (dec n)) nil)] (for [i (range n)] (if (or (zero? i) (= i (dec n)))\n                                                                         1\n                                                                         (+ (nth up (dec i)) (nth up i))))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":97,"code":"(fn pascal\n  [n] \n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":97,"code":"(fn [m]\n  (let [n (dec m)\n        den (range 1 m)\n        frac (map / (reverse den) den)\n        sym (loop [acc [1]\n                   f frac]\n              (if (= (dec (count acc)) (int (Math/ceil (/ (dec n) 2))))\n                acc\n                (recur (conj acc (* (last acc) (first f)))\n                       (rest f))))]\n    (concat sym (if (= (mod n 2) 0) (reverse (butlast sym)) (reverse sym)))))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":97,"code":"(fn get-pascals-triangle-row\n  [n]\n  (->> n\n       (range 1)\n       (map / (reverse (range 1 n)))\n       (reductions * 1)))","user":"5ff454a1e4b05ac5b16ea20d"},{"code":"(fn pascal [n]\n  (if (= n 1) \n    [1]\n    (let [p (pascal (dec n))] (into [] (map + (conj p 0) (cons 0 p))))\n  )\n)","problem":97,"user":"5176afd2e4b085adf681d889"},{"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (conj (into [1] (mapv #(apply + %) (partition 2 1 (pascal (dec n))))) 1)))","problem":97,"user":"531619c1e4b08068f379ed3d"},{"problem":97,"code":"(fn pascal\n  [indx]\n  (loop [cur 1 lst [1]]\n    (if (= cur indx) lst\n      (recur (inc cur) (concat [1]\n                               (map #(apply + %)\n                                    (let [sums (interleave\n                                                 (partition 2 lst)\n                                                 (partition 2 (rest lst)))]\n                                      (if (= (count (partition 2 (rest lst))) (count (partition 2 lst)))\n                                        sums\n                                        (concat sums [(last (partition 2 lst))]))))\n                               [1])))\n    )\n  )","user":"5545477fe4b0a04f79299531"},{"code":"(fn ptr [n]\n  (if (= n 1)\n    [1]\n    (let [prev (ptr (dec n))]\n      (concat [(first prev)]\n               (map + (butlast prev) (rest prev))\n               [(last prev)]))))","problem":97,"user":"5294e44de4b02ebb4ef75016"},{"code":"#(nth (iterate (fn [s]\n                 (map + (cons 0 s) (conj (vec s) 0))) [1])\n      (- % 1))","problem":97,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn [x] (if (= x 1)\n          [1]\n          (letfn [(fac[n] (if (zero? n) 1 (* n (fac (dec n)))))\n                 (c[a b] (/ (fac a) (* (fac b) (fac (- a b)))))]\n           (let [half (cons 1 (map #((partial c (dec x)) %) (range 1 (quot x 2))))]\n             (if (even? x)\n               (concat half (reverse half))               \n               (concat half (conj (reverse half) (c (dec x) (quot x 2)))))))))","problem":97,"user":"513d121fe4b0e544971636a2"},{"code":"#(nth (iterate \n         (fn [x] (map + (conj x 0) (conj (into [] x) 0))) '(1)) (dec %))","problem":97,"user":"5145832be4b0e8879607340a"},{"problem":97,"code":"(fn pasc-row [n]  \n  (let [n (dec n)\n        fact (fn [x] (apply * (range 1 (inc x))))]\n    (map \n     (fn row [k]\n       (quot (fact n)\n             (* (fact k) (fact (- n k)))))\n     (range (inc n)))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn pascal-triangle [row]\n  (let [fractions (fn [n]\n                    (let [r (map inc (range n))]\n                      (map #(/ (first %1) (second %1)) (map vector (reverse r) r))))]\n    (reduce #(conj %1 (* (first %1) %2)) (list 1) (fractions (dec row)))))","problem":97,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn pascal [n] (if (= n 1) [1] (concat [1] ((fn sumzip [s] (if (empty? (rest s)) [] (concat [(+ (first s) (second s))] (sumzip (rest s))))) (pascal (dec n))) [1])))","problem":97,"user":"4f8b20fce4b02e764a0a5178"},{"problem":97,"code":"#((fn [n row]\n  (if (= n (count row)) row (recur n\n    (concat\n      [1]\n      (map + row (rest row))\n      [1]))))\n  % [1])","user":"5a4993c0e4b05d388ecb6b71"},{"problem":97,"code":"#(loop [n 1 ts [1]]\n   (if (= n %)\n     ts\n     (recur (inc n)\n            (concat [1]\n                    (map (partial reduce +)\n                         (map vector ts (drop 1 ts)))\n                    [1]))))","user":"606da089e4b069485764de15"},{"problem":97,"code":"(fn [n] \n  (nth (iterate #(concat [1] \n                         (map + % (rest %))\n                         [1]) \n                [1]) \n       (dec n)))\n\n;; Initial terrible solution to compute binomial coefficients directly\n;(fn [lvl] \n;  (map (partial \n;            (fn coeff\n;                  [n k]\n;                  (cond\n;                    (= n k) 1\n;                    (= 0 k) 1\n;                    :else (+ (coeff (dec n) (dec k)) (coeff (dec n) k))\n;                    )) (dec lvl))\n;              (range lvl)))","user":"578f9a18e4b0ebec4cfb7598"},{"problem":97,"code":"(fn pascal-triangle [x]\n  (loop [cnt x val [1]]\n    (if (<= cnt 1)\n      val\n      (recur (dec cnt) (vec (map +  (cons 0 val) (conj val 0))) ))))","user":"52457931e4b08ba239308107"},{"problem":97,"code":"#(nth (iterate (fn [x] (map + (concat [0] x) (concat x [0]))) [1]) (dec %))","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn [n]\n  (letfn [\n\t  (summer [vec] \n\t\t  (loop [rem vec cur (first rem) out '()]\n\t\t     (cond (nil? cur) out\n\t\t\t   (nil? (second rem)) (concat '(1) out '(1))\n\t\t\t   :else (recur (next rem) (second rem) (conj out (+ cur (second rem)))))))\n\t  ]\n\t  (loop [i 1  lastrow '(1) ]\n\t     (cond (= n 1) lastrow\n\t\t   (= i n) lastrow\n\t\t   :else (recur (inc i) (summer lastrow))))))","problem":97,"user":"4e739e13535dff18050a9c76"},{"problem":97,"code":"#(loop [before [1]\n            iterCount %]\n       (if (= iterCount 1) before\n         (recur (concat [1] (map + before (rest before)) [1]) (dec iterCount))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map + (conj % 0) (conj (vec %) 0)) '(1) ))))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn [r]\n  (letfn [(p [v]\n    (conj (vec \n            (for [i (range 0 (count v))] \n              (+ (nth v (dec i) 0) (nth v i))))\n          1))]\n    (nth (iterate p [1]) (dec r))))","problem":97,"user":"50eebf46e4b06330c1f87c61"},{"problem":97,"code":"(fn pascal-row ([row] (map #(pascal-row row %) (range row)))\n  ([row pos] (cond\n               (> 0 pos) 0\n               (> 1 row) 0\n               (= pos 0) 1\n               :else (+ (pascal-row (dec row) (dec pos)) (pascal-row (dec row) pos)))))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn pt [n]\n(cond\n (= n 1) [1]\n (= n 2) [1 1]\n :else (concat (cons 1 (map #(reduce + %) (partition 2 1 (pt (dec n))))) '(1))))","problem":97,"user":"4ef4c1ff535dced4c769f23e"},{"problem":97,"code":"(fn pascal [n]\n  (if (< n 3) \n    (repeat n 1)\n    (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn nth-pascal-triangle\n  [n]\n  (loop [row n prev 1 col 1 result [1]]\n    (let [x (* prev (/ (- row col) col))]\n      (if (zero? x)\n        result\n        (recur row x (inc col) (conj result x))\n        )\n      )    \n    )\n)","problem":97,"user":"4f2582bae4b0d66497709ff6"},{"problem":97,"code":"(fn [m]\n  (let [x (dec m)\n        bincoef (fn  [n k]\n                  (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n                    (/ (rprod (- n k -1) n) (rprod 1 k))))]\n    (map bincoef (repeat x) (range (inc x)))))","user":"54a677a9e4b09f271ff37c88"},{"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    (let [par (pascal (- n 1))\n          len (- (count par) 1)]\n      (println par)\n      (vec (concat [1] (map #(+ (get par %) (get par (+ % 1))) (range len)) [1])))))","problem":97,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    :else (let [last (pascal (dec n))\n          a (concat [0] last)\n          b(concat last [0])\n          ]\n      (vec(map + a b)))))","user":"5e978fe5e4b0157ca96647d1"},{"problem":97,"code":"(fn kepascal\n  [x]\n  (let [pascar (iterate #(concat '(1)\n                                 (map + % (rest %))\n                                 '(1) )'(1))]\n    (last (take x pascar))))","user":"55d9743ae4b0e31453f64aca"},{"code":"(fn [row]\n    (nth (iterate (fn [coll]\n                    (concat [1] (map + coll (rest coll)) [1]))\n                  (list 1))\n         (dec row)))","problem":97,"user":"4dc0ff08535d020aff1edf84"},{"code":"#(reduce (fn [l c] (conj l (* (last l) c))) [1] (map / (reverse (range 1 %)) (range 1 %)))","problem":97,"user":"534e4a29e4b084c2834f4ab0"},{"code":"(let [f #(reduce * (range 1 (inc %)))]\n  (fn [x] \n    (map #(/ (f (dec x)) (* (f (- (dec x) %)) (f %))) \n         (range 0 x))))","problem":97,"user":"4ee7ef87535d93acb0a66872"},{"problem":97,"code":"(let [sum #(apply + %)\n      tack-ones #(concat [1] % [1])]\n\n  (fn pascal [n]\n    (if (= n 1)\n      [1]\n      (->> n dec pascal (partition 2 1) (map sum) tack-ones))))","user":"52cb6bb0e4b07d0d72b2734c"},{"problem":97,"code":"(fn \n  [n]\n  (letfn [(factorial \n            [x]\n            (if (zero? x)\n              1 (* x (factorial (dec x)))))]\n    (let [n (dec n)]\n      (vec (map #(/ (factorial n) (factorial %1) (factorial (- n %1)))\n                (range 0 (inc n)))))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":97,"code":"(fn pas [n]\n  (condp = n\n    1 [1]\n    (let [last (pas (dec n))\n          a (concat [0] last)\n          b (concat last [0])\n          ]\n      (vec(map + a b)))))","user":"571ff1ebe4b0c5bde472c088"},{"problem":97,"code":"(fn pt [n]  (nth (iterate #(map + (concat % [0]) (concat [0] %)) [1])(dec n)))","user":"54908cc1e4b0b312c081ff32"},{"problem":97,"code":"(fn [b]\n  (let [factorial (fn fac\n                    ([x]\n                     (if (<= x 1)\n                       1\n                       (fac x x)))\n                    ([x d]\n                     (if (< x 2)\n                       d\n                       (recur (dec x) (* d (dec x))))))                   \n                    \n        n-choose-k (fn [n k] (/ (factorial n) \n                                (* (factorial k) (factorial (- n k)))))]\n    (reduce \n      (fn [r e]\n        (cons (n-choose-k (dec b) e) r)) \n      [] \n      (range 0 b))))","user":"5989e080e4b021a7a535fed6"},{"problem":97,"code":"(fn [n]\n  (loop [cnt n result [1]]\n    (if (= 1 cnt) result\n      (recur (dec cnt)\n             (concat [1]\n                     (map (fn [[a b]] (+ a b)) (partition 2 1 result))\n                     [1])\n                     ))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":97,"code":"(fn pascal [n]\n\t(let [aux (fn [row]\n\t\t\t\t  (map #(apply + %) (partition 2 1 row)))]\n\t\t(loop [r [1]]\n\t\t(if (= (count r) n)\n\t\t\tr\n\t\t\t(recur (concat [1] (aux r) [1]))))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn p [n]\n    (nth (iterate\n             #(vec (concat\n                     [1]\n                     (map (fn [[a b]] (+ a b)) (partition 2 1 %))\n                     [1])) [1])\n        (- n 1)))","problem":97,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn[n](let [c (range 1 n) v (conj (take n (map / (map #(- n %) c) c)) 1)] (map #(int (reduce * (take % v))) (range 1 (inc n)))))","problem":97,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","problem":97,"user":"4df669d4535d08e6dec9fe35"},{"code":"#(reduce (fn nextrowgen [row _]\n   (let [row-len (inc (count row))\n         half-idx (quot row-len 2)\n         half-row (map-indexed (fn [idx itm]\n               (let [a (or (get row (dec idx)) 0) b (or (get row idx) 0)]\n                 (+ a b)\n                 )\n               ) (range (or (and (odd? row-len) (inc half-idx)) half-idx) ))]\n     (vec (concat half-row (reverse (take half-idx half-row)))) )) [1] (range (dec %)))","problem":97,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":97,"code":"(fn pascal [n]\n       (if (= 1 n)\n         [1]\n         (let [prev-pascal (pascal (dec n))]\n           (vec\n             (flatten\n               [1 (vec (map #(+ (nth prev-pascal (dec %)) (nth prev-pascal (identity %)))\n                            (range 1 (- n 1)))) 1])))))","user":"5587cd86e4b059ccff29b1e6"},{"code":"(fn p97 [n]\n  (if (= n 1) [1]\n      (if (= n 2) [1 1] (vec (nth\n      (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1 1])\n      (- n 2))))))","problem":97,"user":"4f280840e4b0d6649770a010"},{"problem":97,"code":"(fn pascal [n]\n  (let [init [1]\n        step (fn [coll]\n               (for [i (range (inc (count coll)))]\n                 (+ (nth coll (dec i) 0) (nth coll i 0))))]\n    (nth \n      (iterate step init)\n      (dec n))))","user":"5617a540e4b06b1bb2182a12"},{"problem":97,"code":"(fn [n]\n   (last\n     (take\n       n\n       (iterate\n         (fn [coll]\n           (->> coll\n                (cons 0)\n                (partition 2 1 [0])\n                (mapv #(reduce + %))))\n         [1]))))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":97,"code":"(fn [a] (last (take a (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"5c371f5be4b0d62ef62d9f72"},{"problem":97,"code":"(fn [n]\n    (loop [i 1 result [1]]\n      (if (== i n)\n        result\n        (recur (inc i)\n               (mapv #(+ (if (< (dec %) 0) 0 (nth result (dec %)))\n                         (if (>= % (count result)) 0 (nth result %)))\n                     (range (inc i)))))))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn [n] (letfn [(advance-triangle [row]\n  (vec (second (reduce \n    (fn [[additive result] additive2]\n      [additive2 (conj result (+ additive additive2))])\n      [0] (concat row [0])))))]\n  (nth (iterate advance-triangle [1]) (dec n))))","problem":97,"user":"4ec34578535dcc7ae8597d51"},{"code":"(fn pascal [row]\r\n  (cond (= 1 row) [1]\r\n        (= 2 row) [1 1]\r\n        :else (concat [1] \r\n                      (let [pr (pascal (- row 1))]\r\n                        (for [n (range (- row 2))]\r\n                          (#(+ (nth % n) (nth % (+ n 1))) pr))) [1])))","problem":97,"user":"50045388e4b0678c553fc44e"},{"problem":97,"code":"(fn\n [n]\n (if (pos? n)\n   (loop [i n row [1]]\n     (if (= i 1)\n       row\n       (let [lrow (concat [0] row)\n             rrow (rest (concat lrow [0]))\n             prow (partition 2 (interleave lrow rrow))\n             newrow (vec (for [t prow] (apply + t)))]\n         (recur (dec i) newrow))))))","user":"59a31c55e4b066c664927d34"},{"code":"(fn P [n]\n  (if (= n 1)\n      [1]\n      (concat\n        [1]\n        (map #(apply + %) (partition 2 1 (P (dec n))))\n        [1])))","problem":97,"user":"4e7dfab0535db169f9c796f9"},{"code":"(fn [level]                                                               \n  (condp = level                                                                \n    1 [1]                                                                       \n    2 [1 1]                                                                     \n    (loop [on-level 3                                                           \n           prev-level [1 1]]                                                    \n      (let [prev-level-pairs (partition 2 1 prev-level)\n            curr-level-inner (map #(apply + %) prev-level-pairs)\n            curr-level (concat [1] curr-level-inner [1])]\n        (if (= level on-level)\n          curr-level\n          (recur (inc on-level) curr-level))))))","problem":97,"user":"530e9729e4b08068f379ecbc"},{"code":"(fn pascal [n]\n        (nth\n         (iterate (fn pascal-row [row]\n                    (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))) [1]) (dec n)))","problem":97,"user":"50b0cffae4b009df37c708c5"},{"problem":97,"code":"#(last (take % (iterate (fn [x]\n                          (let [m (->> x (drop-last) (cons 0))]\n                            (-> (map + m x) vec (conj 1)))) [1])))","user":"57fc5e42e4b0d3187e900997"},{"code":"(fn [n]\n  (reduce #(conj % (/ (* (- n %2) (last %)) %2))\n          [1]\n          (range 1 n)))","problem":97,"user":"4de77a0a535d08e6dec9fdfa"},{"code":"(fn [n] (nth (iterate (fn [s] (if (= s []) [1] (concat [1] (vec (map #(apply + %) (partition 2 1 s))) [1] )))  []) n))","problem":97,"user":"50b24a2fe4b03ea88043355c"},{"problem":97,"code":"(fn [m]  \n   (let [n (dec m)\n         fr  (map (fn [k] (/ (- (inc n) k) k )) \n                    (range 1 (inc n))) ]\n         (reduce (fn [ac e] \n                   (conj ac (* e (if (empty? ac) 1 (last ac))))) \n                 (vector 1) fr) ))","user":"5957cc41e4b066ee0a44af76"},{"problem":97,"code":"(fn [n]\n  (letfn [(helper [m]\n            (if (= m 1)\n              [1]\n              (into []\n                    (concat [1]\n                            (mapv (fn [[a b]] (+ a b))\n                                  (partition 2 1 (helper (dec m))))\n                            [1]))))]\n    (helper n)))","user":"5829d588e4b051871117bf4a"},{"problem":97,"code":"(fn [n] (nth (iterate #(concat '(1) (map (partial reduce +) (partition 2 1 %)) '(1)) [1]) (dec n)))","user":"53c1b787e4b00fb29b221266"},{"problem":97,"code":"#(cond (= % 1) [1]\n       (> % 1) (first\n                (drop (- % 2)\n                      (iterate (fn [row] (conj (into [1] (map (partial reduce +) (partition 2 1 row))) 1)) [1 1]))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn [n]\n   (letfn [ ( pascal-it [row]\n                (concat [(first row)]\n                        (map (fn[[m n]] (+ m n)) (partition 2 1 row))\n                        [(last row)])) ]\n     (nth (iterate pascal-it [1]) (- n 1))))","problem":97,"user":"4e860e85535db62dc21a62f1"},{"problem":97,"code":"(fn [n]\n  (let [rows (iterate (fn [row]\n                        (concat [1]\n                                (map #(apply + %) (partition 2 1 row))\n                                [1]))\n                      '(1))]\n    (first (drop (dec n) rows))))","user":"59eb63e3e4b0249b7282077c"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n        1 [1]\n        2 [1 1]\n        (concat [1]\n                (map #(apply + %)\n                     (partition 2 1 (pascal (dec n))))\n                   [1])))","user":"58ffaddee4b0438e51c2cffe"},{"problem":97,"code":"(fn [n]\n    (cond\n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else (last (take (- n 1) (iterate \n                                   (fn [vc]\n                                       (loop [i 0\n                                              j 1\n                                              res [1]]\n                                           (if (= j (count vc))\n                                               (conj res 1)\n                                               (recur (inc i) (inc j) (conj res (+ (vc i) (vc j))) ))))\n                                   [1 1] ))) ))","user":"6074df6fe4b069485764de4b"},{"code":"(fn pascal\n  ([n]\n   (if (= n 1)\n     [1]\n     (if (= n 2)\n       [1 1]\n       (let [xs (pascal (dec n)) ys (rest xs)]\n         (cons 1 (conj (vec (map + (drop-last xs) ys)) 1)))))))","problem":97,"user":"513cb853e4b0b86ece9f322b"},{"problem":97,"code":"(fn pascal-row [n]\n  (nth\n   (iterate #(vec (map + (conj % 0) (cons 0 %))) [1])\n   (dec n)))","user":"5579eed7e4b05c286339e09b"},{"problem":97,"code":"(fn [i] (nth (iterate #(cons 1 (conj (mapv (partial apply +) (partition 2 1 %)) 1)) [1]) (dec i)))","user":"57642916e4b0994c1922fbee"},{"problem":97,"code":"(fn [position]\n  (loop [row [1]\n         current-position 1]\n    (if (= position current-position)\n      row\n      (recur (if (= (count row) 1)\n               [1 1]\n               (concat [1] (map #(reduce + %) (partition 2 1 row)) [1]))\n             (inc current-position)))))","user":"55a5c3bee4b0acc240e3154e"},{"problem":97,"code":"(fn [n] \n  (last \n   (take n \n         (iterate \n          #(map (fn [a b] (+ a b)) (conj (vec %1) 0) (cons 0 (vec %1))) [1]))))","user":"527bd988e4b03e8d9a4a759d"},{"problem":97,"code":"(fn [n] \n  (letfn [(fact [n] (reduce * 1 (range 1 (inc n))))\n        (pascal-item [n k]\n                     (/ (fact n)\n                        (* (fact k)\n                           (fact (- n k)))))]\n  (map #(pascal-item (dec n) %) (range n))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"#(map ((fn p [r]\n         (fn i [c]\n           (if (= c 0) 1\n               (* (i (- c 1)) (/ (- r c) c))))) %) (range %))","problem":97,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn pascal [n1]                                                                                                     \n  (loop [n n1 r '(1)]                                                                                                 \n    (cond                                                                                                             \n     (= n 1) r                                                                                                        \n     :else (recur (dec n) (let [nr (concat [0] r [0])                                                                 \n                                  nnr (partition 2 1 nr)]                                                             \n                              (map (fn [[x y]] (+ x y))  nnr) ) ))))","problem":97,"user":"52140b53e4b0961f15ac4d7e"},{"problem":97,"code":"(fn[n] (reduce (fn [r z] (apply concat [[1] (map (fn [x] (apply + x)) (partition 2 1 r)) [1]]))\n               [1]\n               (range 1 n)))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn [n]\r\n  (nth (iterate \r\n         (fn [p] \r\n           \r\n             (concat \r\n               [1] \r\n               (map (fn [[f s]] (+ f s)) (partition 2 1 p)) \r\n               [1]))\r\n         [1])\r\n       (dec n)))","problem":97,"user":"4dc986d0535d5973398f9285"},{"problem":97,"code":"(fn [x]\n    (loop [i x v [1]]\n      (if (= i 1) v \n        (recur \n         (dec i)\n         (concat [1] (map #(apply + %) (partition 2 1 v)) [1])))))","user":"537bde5de4b06839e8705e73"},{"problem":97,"code":"(fn [n]\n   (loop [i 1\n          ret [0 1 0]]\n     (if (= i n)\n       (filter #(not (zero? %)) ret)\n       (recur (inc i)\n              (conj (apply conj [] 0 (vec (for [x (range (inc i))]\n                                       (+ (ret x) (ret (inc x)))))) 0)\n              ))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn pascal [n] \n   (first (drop (dec n) \n          (iterate #(map + (concat %1 [0]) (concat [0] %1)) [1]))))","problem":97,"user":"4f88ae35e4b033992c121c6d"},{"code":"(letfn [\r\n  (pascal [prev-row]\r\n    (concat [1] (map (partial apply +) (partition 2 1 prev-row)) [1]))]\r\n  \r\n  (fn [k]\r\n    (nth (iterate pascal [1]) (dec k))))","problem":97,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":97,"code":"(fn [n]\n  (let [fact (fn [a]\n              (->>\n                (range)\n                (map inc)\n                (take a)\n                (reduce *)))]\n      (let [n-choose #(/ (fact (- n 1)) (* (fact %) (fact (- (- n 1) %))))]\n          (map n-choose (range 0 n)))))","user":"51be00cae4b0ff155d51d2b8"},{"code":"(fn f [n]\r\n  (cond\r\n    (= n 1) [1]\r\n    :else (let [f1 (f (dec n))]\r\n            (concat [1] (map + (drop 1 f1) f1) [1]))))","problem":97,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn p [n]\n    (condp = n\n      1 [1]\n      (let [l (p (dec n))\n            x (concat [0] l)\n            y (concat l [0])]\n        (vec(map + x y)))))","problem":97,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":97,"code":"(fn [n] \n  (nth (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1]) (dec n)))","user":"5b22328ee4b03cfeda66ed5d"},{"problem":97,"code":"(fn [n] (first (drop (dec n) (iterate #(map + (concat % [0]) (concat [0] %)) [1]))))","user":"564b495de4b0284900eef667"},{"problem":97,"code":"(fn [n]\n  (nth (cons [1] \n        (lazy-seq (iterate \n                   (fn [prevRow] (flatten [1 (map #(reduce + %) (partition 2 1 prevRow)) 1]))\n                   [1 1])\n                  ))\n       (dec n)\n  )\n  )","user":"6004c750e4b074f607df6645"},{"problem":97,"code":"(fn my-pascal [row]\n      (map  (fn binomial-coefficient [n k]\n              (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n                (/ (rprod (- n k -1) n) (rprod 1 k)))\n              ) (repeat (dec row)) (range row)\n        )\n      )","user":"536827f1e4b0243289761e8a"},{"problem":97,"code":"(fn [n]\n    (letfn [(pad [coll]\n              (cond (empty? coll) [1]\n                    (= coll [1]) [1 1]\n                    :else (-> coll (conj 1) vec (conj 1))))\n            (step [coll]\n              (let [nextval (if (= coll [1]) [1 1]\n                              (->> (partition 2 1 coll)\n                                   (map (partial apply +))\n                                   pad))]\n                (cons nextval (lazy-seq (step nextval)))))]\n      (nth (step '()) (dec n))))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":97,"code":"(fn pascal-tri [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else (let [prev-tri (pascal-tri (dec n))\n                    current-tri ((fn sum-adjacents [coll]\n                                   (cond (<= (count coll) 1) coll\n                                         :else (cons (+ (first coll) (second coll)) \n                                                     (sum-adjacents (rest coll))))) prev-tri)]\n                (cons 1 current-tri))))","user":"52b9e920e4b07a9af57922c9"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (last (take n (iterate #(map + (cons 0 %) (concat % [0])) '(1)))))","user":"58eac340e4b056aecfd47d24"},{"problem":97,"code":"(fn pascal\n  [n]\n  (letfn[(tri [n x]\n            (reduce #(/ (* %1 (+ %2 (- n x))) %2)\n              1 (range 1 (inc x))))]\n    (map (partial tri (dec n)) (range 0 n))))","user":"5e95013fe4b0fbed045a3800"},{"problem":97,"code":"; see http://en.wikipedia.org/wiki/Pascal%27s_triangle#Calculating_a_row_or_diagonal_by_itself\n(fn [n]\n   (take n\n         (letfn [(f[i p]\n                   (let [c (if (= i 0)\n                             1\n                             (* p (/ (- n i) i)))]\n                     (lazy-seq\n                       (cons c\n                             (f (inc i) c)))))]\n           (f 0 1))))","user":"5398123ee4b0b51d73faaef3"},{"problem":97,"code":"(fn [n] (reduce #(conj % (/ (* (last %) (- (dec n) %2)) (+ %2 1))) [1] (range (dec n))))","user":"4ed45563535d10e5ff6f52c9"},{"problem":97,"code":"(fn [cnt]\n  (last (take cnt (iterate (fn [x] (#(map + % (rseq %)) (conj (vec x) 0))) [1]))))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn pascal_row \n   ([r] (cons 1 (pascal_row 1 r 1)))\n   ([p r c]\n    (when (>= r (inc c))\n      (let [pc (* p (/ (- r c) c))]\n        (cons pc (pascal_row pc r (inc c)))))))","problem":97,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn p [row]\n  (case row\n    1 [1]\n    2 [1 1]\n    (cons 1 (into '(1)\n      (map #(apply + %)\n           (partition 2 1 (p (dec row))))))))","problem":97,"user":"53523ae0e4b084c2834f4aee"},{"problem":97,"code":"(fn pt [n]\n                (let [sum-fn (fn sum-fn [[i & others]]\n                               (let [j (first others)]\n                                 (if (and i j)\n                                   (let [summed (+ i j)\n                                         more (if others\n                                                (lazy-seq (sum-fn others))\n                                                '())]\n                                     (cons summed more))\n                                   '())))]\n                  (if (= 1 n)\n                    '(1)\n                    (concat [1]\n                            (sum-fn (pt (- n 1)))\n                            [1]))))","user":"57f904c5e4b0d3187e900936"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (conj (vec (cons 1 (map #(apply + %)\n                       (partition 2\n                                  1\n                                  (pascal (- n 1))))))\n          1)))","problem":97,"user":"531d34cfe4b08068f379edac"},{"problem":97,"code":"(fn [n]\n    (letfn [(factorial-x [x]\n              (apply * (range 1 (inc x))))\n            (calc-cmn [mm nn]\n              (/ (factorial-x nn)\n                 (* (factorial-x mm)\n                    (factorial-x (- nn mm)))))]\n      (map #(calc-cmn % (dec n)) (range n))))\n\n;; (fn [n]\n;;     (loop [nn n\n;;            rst [1]]\n;;       (if (= nn 1)\n;;         rst\n;;         (recur (dec nn) (map +\n;;                              (concat [0] rst)\n;;                              (concat rst [0]))))))\n\n;; #(nth (iterate (fn [x] (concat [1]\n;;                                  (map + x (rest x))\n;;                                  [1]))\n;;                  [1]) (dec %))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn pascal [n]\n  (if (> n 1)\n    (let [above-row (pascal (dec n))]\n      (concat [1]\n              (map + above-row (rest above-row))\n              [1]))\n    [1]))","problem":97,"user":"51460e4ce4b04ef915e37314"},{"problem":97,"code":"(fn pascal [n]\n   (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [xs (pascal (dec n))\n                ys (rest xs)]\n            (conj (vec (cons 1 (map + xs ys))) 1))))","user":"5a67cedbe4b0512ff01cd9ee"},{"code":"(fn [n] \n  (let [fac (fn fac [N] (apply * (range 2 (inc N))))] \n  (map #(/ (fac %1) (* (fac %2) (fac (- %1 %2))))\n    (repeat n (- n 1)) (range))))","problem":97,"user":"4fda016ae4b05e33b9224f42"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         row [1]]\n    (if (= i n)\n      row\n      (recur (inc i)\n             (apply conj [1] (for [x (range i)]\n                               (+ (nth row x)\n                                  (or (get row (inc x))\n\t                                   0))))))))","user":"58b2c435e4b0ebc645576d11"},{"code":"#(reduce\n   (fn [r k]\n     (conj r (* (last r)\n               (/ (- % k) k))))\n   [1]\n   (range 1 %))","problem":97,"user":"4f0f36a7535d0136e6c22336"},{"problem":97,"code":"(fn inner[r]\n  (if (= r 1)\n    [1]\n    (map (fn [[a b]] (+ a b)) (partition 2 1 [0] (into [0] (inner (dec r)))))))","user":"518ba795e4b0f028e99addf0"},{"problem":97,"code":"(fn triangle [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (->> (triangle (dec n))\n                     (partition 2 1)\n                     (map #(apply + %))) [1]))\n  )","user":"564ecc9ee4b0284900eef6a1"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (letfn [(fact [x] (reduce * (range 1 (inc x))))]\n  (map #(/ (fact (dec n)) \n           (* (fact %) \n              (fact (- (dec n) %)))) \n       (range n))))","user":"5a388675e4b001c08efc0ca2"},{"problem":97,"code":"(fn pt [row] (if (= row 1) [1] (let [bpt (pt (dec row))] (vec (concat [1] (for [i (range (- row 2))] (+ (get bpt i) (get bpt (inc i)))) [1])))))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":97,"code":"(fn p-tri [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev-row (p-tri (dec n))]\n           (concat [1] (->> prev-row \n                            (partition 2 1)\n                            (map (partial apply +))) [1]))))","user":"58740c18e4b01531a375ea49"},{"problem":97,"code":"(fn pascal [x]\n  (if (= 1 x) \n    [1] \n    (let [pp (conj (pascal (dec x)) 0)]\n    (map + pp (reverse pp)))))","user":"57f814fbe4b0d3187e900911"},{"problem":97,"code":"(letfn [(pasc-t [rs] \n (let [rsum (map (partial apply +) (partition 2 1 rs))]\n  (lazy-seq (cons rs (pasc-t (conj (into [1] rsum) 1))))))] \n(fn [n] (first (drop (dec n) (pasc-t [1])))))","user":"57f9011ee4b0d3187e900935"},{"problem":97,"code":"(fn pascal [n]\n  (loop [x 1 l [1]]\n    (if (= x n) l\n      (recur (inc x)(vec (map + (cons 0 l)(conj l 0)))))))","user":"602cc4d4e4b0d5df2af22274"},{"problem":97,"code":"(fn[n](\n          loop [iter 1 s [1]]\n          (if (>= iter n) s \n              (recur (inc iter) (concat [1] \n                                        \n                                        (map-indexed (fn[idx itm](+ itm (nth s (inc idx)) )) (butlast s))\n                                        \n                                        [1]))\n          )\n         ))","user":"56039843e4b04bb52996e1be"},{"code":"#((fn col [c]\n    (if (zero? c) \n      (list 1)\n      (let [left (col (- c 1))]\n        (conj \n          left \n          (* \n            (first left)\n            (/ (- % c) c))))))\n   (- % 1))","problem":97,"user":"4db2f208535df7e46ed9b6c9"},{"problem":97,"code":"(fn [row]\n  (letfn [(fact [n] (reduce * (range 1 (inc n))))\n          (binom [n k] (/ (fact n) (fact k) (fact (- n k))))]\n    (map (partial binom (dec row)) (range row))))","user":"57a4fa50e4b0a966079561f1"},{"problem":97,"code":"(fn \n  [n]\n  (if (= n 1)\n    [1]\n    (nth \n      (iterate \n        (fn [x]\n          (loop [s x result []]\n            (if (empty? (rest s))\n              (vec (cons 1 (conj result 1)))\n              (recur (rest s) (conj result (+ (first s) (second s)))))))\n        []) \n      (dec n))))","user":"591d9870e4b09b4ee5954c1b"},{"code":"(fn [n]\n  (loop [row nil\n         c n]\n    (if (zero? c)\n      row\n      (recur (loop [r row\n                    acc [1]]\n               (if (nil? r)\n                 acc\n                 (let [f (first r)\n                       s (second r)\n                       tf (if (nil? f) 0 f)\n                       ts (if (nil? s) 0 s)]\n                   (recur (next r) (conj acc (+ tf ts))))))\n             (dec c)))))","problem":97,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":97,"code":"(fn __ [num]\n  (let [pasc (fn [lastr num k]\n               (let [n (- (dec num) k)\n                     d (inc k)]\n                 (* lastr (/ n d))))]\n    (loop [result [1] k 0]\n      (if (or\n            (= num 1)\n            (= k (dec num))) result\n        (recur (conj result (pasc (last result) num k)) (inc k))\n        )\n      )\n    )\n  )","user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn [n]\r\n   (nth (iterate \r\n          (fn [pre] \r\n            (vec \r\n              (concat \r\n                [1] \r\n                (map (fn [[f s]] (+ f s)) (partition 2 1 pre)) \r\n                [1])))\r\n          [1])\r\n        (dec n)))","problem":97,"user":"50ab44b2e4b0f65d68208509"},{"code":"(fn [n] \n  (if (= n 1)\n         [1]\n         (last \n          (take n \n                (iterate #(concat [1] (map (fn [[a b]] (+ a b)) (partition 2 1 %)) [1]) [])))))","problem":97,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":97,"code":"(fn [row]\n  (letfn [(cpt-row [n]\n                   (if (= n 1)\n                     [1]\n                     (let [prev-row (cpt-row (dec n))]\n                       (vec (map + (cons 0 prev-row) (conj prev-row 0))))))]\n    (cpt-row row)))","user":"51b920bfe4b0e871ca4958f9"},{"problem":97,"code":"(fn [n]\n  (loop [n n\n         xs [1]]\n    (if (= n 1)\n      xs\n      (let [pairs (partition 2 1 xs)]\n        (recur (dec n) (concat [1] (map #(apply + %) pairs) [1]))))))","user":"56df254be4b0ca2494a095ea"},{"problem":97,"code":"(letfn [(pascal [row]\n  (let [partitions (partition 2 1 (cons 0 (conj row 0)))\n        next-row (apply vector (map (partial apply +') partitions))]\n  (lazy-seq (cons row (pascal next-row)))))]\n  (comp (partial nth (pascal [1])) dec))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn [x] (reductions #(* %1 (/ (- x %2) %2)) 1 (range 1 x)))","problem":97,"user":"4fba77fae4b081705acca2df"},{"problem":97,"code":"(fn pascal [n] \n  (take n\n    (map first \n      (iterate \n        (fn [[c k]] \n          (let [c1 (* c (- n k 1)) k (inc k)]\n            [(/ c1 k) k])) \n        [1 0]))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn pascal [x] (if (= 1 x) [1] (let [\n    pp (conj (pascal (dec x)) 0)]\n    (map + pp (reverse pp)))))","problem":97,"user":"51cbdee1e4b08d8387cbede1"},{"problem":97,"code":"(fn pascals-row [n]\n    (if (<= n 1)\n      [1]\n      (let [previous-row (pascals-row (dec n))]\n        (loop [new-nums (vector (first previous-row))\n               to-do previous-row]\n          (if (empty? (rest to-do))\n            (conj new-nums (last previous-row))\n            (recur\n             (conj new-nums (apply + (take 2 to-do)))\n             (rest to-do)))))))","user":"539fa040e4b0ca733b97449f"},{"problem":97,"code":"(fn [x]\n  (let [pgc (fn [prev] \n              (loop [i 1 res [1]]\n                (if (= i (count prev))\n                  (conj res 1)\n                  (recur (inc i) (conj res (+ (get prev (- i 1)) (get prev i)))))))]\n    (loop [i 1\n           prev []\n           curr [1] ]\n        (if (= i x)\n          curr\n          (recur (inc i) curr (pgc curr))))))","user":"5f3ddc71e4b004f08c61c551"},{"problem":97,"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (cons 1 (map #(apply + %) (partition 2 1 '(0) (f (dec n)))))))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":97,"code":"(fn [n]\n  ((fn pascal-inner [last i-n]\n     (if (<= i-n 1)\n       last\n       (recur (vec (for [x (range (inc (count last)))] (+ (get last (dec x) 0) (get last x 0))))\n              (dec i-n)))\n     )\n   [1] n))","user":"52213426e4b0e6a83c8925c4"},{"problem":97,"code":"(fn [n] \n  (nth ((fn f [row] (lazy-seq (cons row (f (map +' (conj (vec row) 0) (into [0] row)))))) [1])\n       (dec n)))","user":"57462a4de4b009280f9f2b5d"},{"code":"(fn p3e [r]\n  (cond (= 1 r) [1]\n        :else (concat '(1) (for [[a b] (partition 2 1 (p3e (dec r)))] (+ a b)) '(1) )))","problem":97,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn pascal-triangle [n]\n  (let [pa-comp (comp first #(drop n %) #(take (inc n) %))] \n  (pa-comp (iterate \n             (fn [v] (if (empty? v) [1]\n                       (vec (flatten [[1] (map #(reduce + %) (partition 2 1 v)) [1]])))) \n           []))))","problem":97,"user":"52c00e4fe4b07a9af5792342"},{"problem":97,"code":"(fn ptri [a]\n  (cond (= a 1) [1]\n        (= a 2) [1 1]\n        :else \n          (let [partitioned-adjacent (partition 2 1 (ptri (dec a)))\n                sum-adjacent (map #(reduce + %) partitioned-adjacent)]\n            (concat [1] sum-adjacent [1]))))","user":"56742817e4b05957ce8c612d"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (dec n))]\n      (map\n        #(if (or (= 0 %) (= (dec n) %))\n          1\n          (+ (nth prev %) (nth prev (dec %)))\n        )\n        (range n)\n      )\n    )\n  )\n)","problem":97,"user":"4f725201e4b07046d9f4f02f"},{"problem":97,"code":"(fn [n] (let [n (dec n) line (atom [1])] (doall (for [k (range n)] (swap! line conj (* (get @line k) (/ (- n k) (+ k 1)))))) @line))","user":"5686e652e4b0dcc4269f4059"},{"problem":97,"code":"(fn [n]\n  (vec\n   (map (fn [i]\n          (if (zero? i)\n            1\n            (reduce (fn [a x] (/ (* a (- (dec n) (dec x))) x))\n                    1\n                    (range 1 (inc i)))\n            )\n          )\n        (range n)\n        )\n   )\n  )","user":"56bb3a4be4b0f26550335951"},{"code":"(fn [n]\n               (reductions (fn [prev k] (* prev (/ (- (dec n) k) (inc k)))) 1 (range 0 (dec n))))","problem":97,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn [n]\n  (loop [acc [1] left n]\n    (if (= 1 left)\n      acc\n      (recur (vec (map + (cons 0 acc) (conj acc 0))) (dec left)))))","problem":97,"user":"506b8242e4b0eda3100c090a"},{"problem":97,"code":"(fn [n] \n    (loop [k 1 list [1]]\n        (if (= k n)\n        list\n        (recur (inc k)\n                (concat [1] (map + list (next list)) [1])\n        )\n        )\n    )\n    )","user":"543bb568e4b032a45b869334"},{"problem":97,"code":"(fn furp [n & x]\n  (if (= n 1)\n    [1]\n    (if (nil? x)\n      (furp n [1])\n      (if (= n (count (first x)))\n        (first x)\n        (furp n\n              (conj (first x) \n                    (let [k (- (count (first x)) 1)\n                          m (- n 1)]\n                      (/\n                       (*\n                        (nth (first x) k)\n                        (- m k)\n                       )\n                       (+ k 1)\n                      )\n                    )\n              )\n        )\n      )\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":97,"code":"(fn p\n  ([n] (p n [1]))\n  ([n r] (if (= n (count r))\n           r\n           (p n (flatten [1 (map #(apply + %) (partition 2 1 r)) 1])))))","user":"5540fe42e4b0a04f7929950a"},{"problem":97,"code":"(fn p97 ([n] (p97 n [1]))\n  ([n coll]\n    (let [newrow (->> (map #(+' (nth coll %) (nth coll (+' % 1))) (range 0 (-' (count coll) 1)))\n                      (cons (first coll))\n                      (reverse)\n                      (cons (last coll))\n                      (reverse)\n                      (into [])\n                      )]\n      (if (> (dec n) 0)\n        (p97 (dec n) newrow)\n        coll\n      ))\n  ))","user":"5400e918e4b0de5c41848619"},{"problem":97,"code":"(fn [n]\n  (let [prepend-append-one (fn [col]\n                             (vec (cons 1 (conj (vec col) 1))))\n        itor (fn [row c]\n               (if (<= c n)\n                 (recur (prepend-append-one\n                          (for [sliding-window (partition 2 1 row)]\n                            (apply + sliding-window)))\n                        (inc c))\n                 row))]\n    (if (= n 1)\n      [1]\n      (itor [1] 2))))","user":"51a7fe50e4b08d8ec191b803"},{"problem":97,"code":"(fn [n]\n  (let [i [1]]\n    (-> (fn [row] (concat i (map +' row (rest row)) i))\n        (iterate i)\n        (nth (dec n)))))","user":"552356fae4b0882d96d091af"},{"problem":97,"code":"(fn tri [n]\n  \t(cond\n     (= 1 n) [1]\n     :else (concat '(1)\n                   (map #(apply + %) (partition 2 1 (tri (dec n))))\n                   '(1))))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn [n]\n  (let [f (fn [acc n]\n  (reduce (fn [acc1 n1]\n\t\t(let [n2 (+ 1 n1) \n\t\t      v1 (or (get acc n1) 0) \n\t\t      v2 (or (get acc n2) 0) \n\t\t      res (+ v1 v2)\n\t\t      acc2 (conj acc1 res)]\n\t\tacc2)) [] (range -1 (count acc))))\n\tres (reduce f [1] (range (- n 1)))]\n    res))","problem":97,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":97,"code":"(fn [row]\n  (letfn [(factorial [x]\n            (apply * (range 1 (inc x))))\n          (binomial-coefficient [n k]\n            (/\n              (factorial n)\n              (*\n                (factorial k)\n                (factorial (- n k)))))]\n    (mapv #(binomial-coefficient (dec row) %) (range row)))\n  )","user":"602372aae4b0d5df2af2220f"},{"problem":97,"code":"(fn aaa\n  ([n] (aaa n [1]))\n  ([n v]\n    (if (= n 1)\n      v\n      (aaa (dec n) (concat '(1) (map (fn [t] (apply + t)) (partition 2 (rest (interleave v v)))) '(1))))))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [num]\n  (loop [n num coll [1]]\n    (if (= n 1) \n      coll\n      (recur (dec n) (map + (cons 0 coll) (concat coll [0]))))))","problem":97,"user":"5098f5d6e4b0cae2931060a4"},{"problem":97,"code":"(fn [n](nth (iterate #(map + (cons 0 %) (conj (vec %) 0)) '(1)) (dec n)))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn nthPas [row]\n  (take row \n    ((fn pasSeq [row v ci]\n      (lazy-seq \n        (let [pasEl (fn nextEl [prev r c]\n                      (if (= c 0) 1\n                        (int (* prev (/ (- r c) c)))))\n              curr (pasEl v row ci)] \n          (cons curr (pasSeq row curr (inc ci)))))) \n      row 1 0)))","problem":97,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":97,"code":"(fn [n]\n  (first (let [pascal #(concat [1] (map + % (rest %)) [1])]\n           (loop [triangle [[1]]\n                  level 1]\n             (if (= level n) triangle\n                 (recur (cons (pascal (first triangle)) triangle) (inc level)))))))","user":"541b41d1e4b01498b1a71a65"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [v]\n        (cons (first v)\n          (concat (map #(apply + %) (partition 2 1 v))\n            (list (last v))))) [1]) (dec n)))","problem":97,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":97,"code":"(fn [row-num]\n  (letfn\n      [(calc-row [rw]\n         (conj (into [] (conj (map (fn [[a b]] (+ a b)) (partition 2 1 rw)) 1)) 1))]\n       (loop [row 1 row-val [1]]\n         (condp = row\n           row-num  row-val\n           (recur (inc row ) (calc-row row-val))))))","user":"55d93d24e4b0e31453f64ac6"},{"problem":97,"code":"(fn [row-number]\n  (let [n (dec row-number)\n        ixseq (range row-number)]    \n    ((fn ! [base [p1 & prest]]\n       (when p1\n         (let [ival (case p1\n                      0 base\n                      (* base(/ (+ n 1 (- p1)) p1)))]           \n           (cons ival (! ival prest)))))\n     1 ixseq)))","user":"56732c84e4b05957ce8c611c"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n  \t(lazy-seq\n     (let [x (pascal (dec n))]\n   \t  (concat [1] (map + x (rest x)) [1])))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":97,"code":"(fn pascal [n]\n  (loop [x 1 l [1]]\n    (print x l \"\\n\")\n    (if (= x n) l\n                (recur (inc x) (vec (map + (cons 0 l) (conj l 0)))))))","user":"5b73e500e4b047b03b2036ba"},{"code":"#(loop [c 1 s '(1)]\n    (if (= % c)\n      s\n      (recur (+ c 1) (conj s (* (first s) (/ (- % c) c))))))","problem":97,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":97,"code":"(fn [row]\n  (loop [n (dec row)\n         i 1\n         num (dec row)\n         den 1\n         result [1]\n         ]\n    (if (= n 0)\n      result\n      (recur (dec n) (inc i) (* num (dec n)) (* den (inc i)) (conj result (/ num den)))\n      )\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"#(nth (iterate (fn  [v]\n   (vec (cons 1 (map-indexed \n    (fn [i x] (+ (get v i ) (get v (inc i) 0)))\n    v)))) [])  %)","problem":97,"user":"50217818e4b00bba4502f7a7"},{"code":"(fn pascal [n]\n  (let [nextrow\n        (fn [row]\n          (map + (cons 0 row) (concat row [0])))]\n    (nth (iterate nextrow [1]) (dec n))))","problem":97,"user":"50763574e4b0a894bb95bf3d"},{"code":"#(nth (iterate (fn [x] (vec (map + (conj x 0) (cons 0 x)))) [1]) (dec %))","problem":97,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":97,"code":"(fn pas [x]\n  (cond (= x 1) [1]\n        :else (loop [counter 2 row [1 1]]\n                (if (= counter x)\n                  row\n                  (recur (inc counter)\n                         (conj (apply conj (empty row) 1 (reduce (fn [r x] (conj r (reduce + x))) [] (partition 2 1 row))) 1))))))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn tr [x]\n  (if (= x 1) [1] \n        (let [xs (tr (dec x))]\n          (concat [1] (map + (rest xs) (butlast xs)) [1]))))","problem":97,"user":"50b35486e4b03ea88043356a"},{"problem":97,"code":"(fn  [n]\n  (letfn [(siguiente [l]\n  (loop [v [] i 0]\n    (cond (= i  (count l)) (conj v 1) \n          (= i 0) (recur [1] 1)\n          :else (recur (conj v \n                             (+ (nth l i) \n                                (nth l (dec i)))) \n                       (inc i)))))]\n    (last (rest (take (inc n) (iterate siguiente []))))))","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"(fn pt [i]\n  (if (= i 1)\n    [i]\n    (loop [p (pt (dec i)), r [1]]\n      (if (seq p)\n        (recur (rest p)\n               (conj r (+ (first p) (or (second p) 0))))\n        r))))","problem":97,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn [n] (last (take n (iterate (fn [ptr] (concat [1] (map #(apply + %) (partition 2 1 ptr)) [1])) [1]))))","problem":97,"user":"527ba695e4b03e8d9a4a7596"},{"code":"#(reductions (fn [x i] (int (/ (* x (- (inc %) i)) (float (dec i))))) (range 1 (inc %)))","problem":97,"user":"504e3aaae4b0f6ff3350c487"},{"problem":97,"code":"(fn [row]\n  (let [calc-current (fn [pos last]\n  (+ (nth last (dec pos) 0)\n     (nth last pos 0)))]\n \n   (reduce \n         (fn [acc i] \n           (map #(calc-current % acc) (range (inc i))))\n         [1] \n         (range 1 row))))","user":"53da32ade4b0e771c3025491"},{"problem":97,"code":";; n ... dimension Pascal's triangle\n;; m th element of the n th Pascal's triangle is (n-1)C(m-1)\n(fn [n]\n  (letfn [(combi [n m]\n    (/ (reduce * (take m (range n 0 -1)))\n       (reduce * (range m 0 -1))))]\n    (if (= 1 n)\n      [1]\n      (map #(combi (- n 1) %) (range n)))))","user":"540c54a7e4b0addc1aec6700"},{"problem":97,"code":"(fn pac\n  [n]\n   (cond\n    (= 1 n ) [1]\n    (= 2 n ) [1 1]\n    :else (vec \n (flatten \n  (reduce \n    (fn [x y] \n      [(conj \n         (first x) (+ (second x) y)) y])  [[] 0] (pac (dec n)))))))","user":"59dd38a8e4b0a0ac046f2503"},{"problem":97,"code":"(fn my-paspal \n ([n]\n  (cond \n   (= n 0) []\n   (= n 1) [1]\n   :else (my-paspal (- n 2) [1 1])))\n ([n result]\n  (cond\n    (= n 0) result\n    :else (my-paspal (dec n) (my-paspal result [1] false))))\n  ([col newCol dummy] \n   (cond\n    (= (count col) 1) (conj newCol 1)\n    :else (my-paspal (rest col) (conj newCol (+ (first col) (nth col 1))) false)))\n  )","user":"6065755ee4b069485764ddcc"},{"code":"(fn [row]\n  (letfn [(pascal-val [col row]\n                      (if (or (zero? col) (zero? row) (= col row))\n                        1\n                        (+ (pascal-val (dec col) (dec row)) (pascal-val col (dec row)))))]\n    (for [c (range 0 row)]\n      (pascal-val c (dec row)))))","problem":97,"user":"51857e64e4b0da5a5be3babe"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (concat [1]\n            (map + (pascal (- n 1)) (concat (nthrest (pascal (- n 1)) 1) [0])))))","user":"558378dce4b05c286339e115"},{"problem":97,"code":"(fn pascal [h]\n  (cond (<= 1 h 2) (repeat h 1)\n        :else (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec h)))) [1])))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"(fn pascal-row [n]\n  (letfn [(pairs [coll]\n                 (map list coll (next coll)))\n          (pascal-step [xs]\n                       (->> xs\n                            pairs                       \n                            (map (partial reduce + 0))\n                            (#(conj % 1))\n                            vec\n                            (#(conj % 1))))\n          (pascal\n           ([] (iterate pascal-step [1]))\n           ([n] (take n (pascal))))]\n    (nth (pascal) (dec n))))","problem":97,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn p [n] (if (= n 1) '(1) (let [x (p (dec n))] (concat (map (partial apply +) (partition 2 (interleave (conj x 0) x))) '(1)))))","problem":97,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn pascal [n]\n     (cond (= n 1) [1]\n           (= n 2) [1 1]\n           :else (flatten (list 1\n                       (map #(+ (first %) (second %)) \n                                      (partition 2 1 (pascal (dec n))))\n                        1 ))))","problem":97,"user":"51cacda3e4b068dadb8f2227"},{"problem":97,"code":"(fn [row]\n  (reduce #(let \n             [ele \n              (quot (* (- row %2) (nth %1 (dec %2))) %2)]\n             (if (> ele 0)\n               (conj %1 ele)\n               %1))\n          [1] (range 1 (inc row))))","user":"5391ab43e4b0b51d73faaea6"},{"code":"(fn[n] (let [fac #(apply * (range 1 (inc %))) com #(/ (fac (dec n)) (* (fac %1) (fac (- (dec n) %1))))] (map com (range 0 n))))","problem":97,"user":"5201572be4b0d7096e99ddbb"},{"problem":97,"code":"(fn [n]\n   (letfn [(pascal [c r]\n                      (cond (= 1 c) 1\n                            (= c r) 1\n                            :else (+ (pascal c (dec r)) (pascal (dec c) (dec r)))))]\n     (map #(pascal % n) (range 1 (inc n)))))","user":"546176e7e4b01be26fd746a2"},{"code":"(let [pascal-ratios (fn [n] (map (fn [x] (/ (- n x) x))\n                            (range 1 n)))]\n  (fn [n]\n    (reduce\n      (fn [xs x] (cons (int (* (first xs) x)) xs))\n      [1]\n\t    (pascal-ratios n))))","problem":97,"user":"4daf36c2edd6309eace4d175"},{"problem":97,"code":"(fn [x] \n  (letfn [(nxt [col] `(1 ~@(map (partial apply +) (partition 2 1 col)) 1))]\n     (last (take x (iterate nxt [1])))))","user":"5df08767e4b093ff717275bf"},{"code":"(letfn [(compute-next [last]\n          `[1 ~@(map (partial apply +) (partition 2 1 last)) 1])\n\n\t\t(triangle\n  \t\t\t([] (triangle [1]))\n  \t\t\t([start]\n     \t\t\t(cons start (lazy-seq (triangle (compute-next start))))))]\n (fn [n] (nth (triangle) (dec n))))","problem":97,"user":"4db091b7838c48654951d9c2"},{"code":"(fn pt [x] (if (coll? x) \n(map pt x) (if (= x 1) [1] \n(#(conj (vec (map + (cons 0 %) %)) 1) \n(pt (dec x))))))","problem":97,"user":"4e79ff2a535db169f9c796a9"},{"problem":97,"code":"(fn p ([x] (p x [1])) ([x b] (if (= 1 x) b (p (dec x) (map #(apply + %) (partition 2 1 (conj (concat b [0]) 0)))))))","user":"53cd421ce4b00fb29b2212dd"},{"code":"(fn pascal [n]\r\n   (cond\r\n     (= n 1) [1]\r\n     (= n 2) [1 1]\r\n     :else (let [prev (pascal (dec n))]\r\n             (vec (concat [1] (map + (butlast prev) (rest prev)) [1])))))","problem":97,"user":"5003ee7de4b0678c553fc446"},{"code":"#(take % (map first (iterate (fn [[a b c]] [(* a (/ b c)) (dec b) (inc c)]) [1 (dec %) 1])))","problem":97,"user":"4f045946535dcb61093f6bba"},{"code":"(fn [size] \n  (loop [x 1 row [1]]\n    (if (= x size)\n      (vec row)\n      (recur (inc x) (cons 1 (conj (into [] (map #(apply + %) (partition 2 1 row))) 1))))))","problem":97,"user":"50481532e4b0ec70b3ef8d96"},{"code":"(fn [n]\n  (loop [current-depth 1 numbers [1]]\n    (if (>= current-depth n)\n        numbers\n        (recur (inc current-depth)\n               (map #(apply + %) (partition 2 1 (lazy-cat [0] numbers [0])))))))","problem":97,"user":"4e7c8fd1535db169f9c796be"},{"problem":97,"code":"(fn pascals-triangle\n  [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [prev-row (pascals-triangle (dec n))]\n      (loop [[a b & rest] prev-row\n             result [1]]\n        (cond (nil? rest) (-> result\n                              (conj (+ a b))\n                              (conj 1))\n              :else (recur (cons b rest) (conj result (+ a b))))))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn [r]\n  (let [fac (fn [n] (reduce * (range 1 (inc n))))]\n    (for [i (range r)]\n      (-> (fac (dec r)) (/ (fac i)) (/ (fac (- (dec r) i)))))))","problem":97,"user":"50b1d166e4b03ea880433554"},{"code":"(fn \n  [x]\n  (let\n    [p (fn pa\n         [N]\n         (if\n           (> N 1)\n           (* N (pa (dec N)))\n           1\n         )\n       )]\n    (map \n      (fn\n        [t]\n        (/ (p (dec x)) (p t) (p (- x t 1)))\n      ) \n      (range x)\n    )\n  )\n)","problem":97,"user":"5162757ee4b03cfa3774b3fe"},{"problem":97,"code":"(fn [n]\n    (let [next-row (fn [r]\n                     (concat [1] (map (partial apply +) (partition 2 1 r)) [1]))]\n      (last (take n (iterate next-row [1])))\n      ))","user":"5501a1e1e4b07d26eda61d75"},{"problem":97,"code":";(fn p-t [v]\n;  (loop [ret [1]\n;        i 1]\n;    (if (= i v)\n;      ret\n;      (recur\n;        (vec (map + (conj ret 0) (cons 0 ret)))\n;        (inc i)\n;      )\n;    )\n;  )\n;)\n\n(fn [v] \n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec v))\n)","user":"60335b35e4b0d5df2af222bf"},{"problem":97,"code":"(fn [n] (loop [row [1] row_num (dec n)]\n           (if (zero? row_num)\n             row\n             (let [row_core (map (fn [a] (+ (nth row a) \n                                            (nth row (inc a))))\n                                 (range (dec (count row))))]\n               (recur (concat [1] row_core [1]) (dec row_num))\n               )\n             )\n           ))","user":"565233f2e4b0f9d632dd8461"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [c]\n        (let [c (concat [0] c [0])]\n          (vec (map #(+ %1 %2) c (drop 1 c)))))\n      [1])\n    (dec n)))","problem":97,"user":"51592b81e4b0394f658fe22c"},{"problem":97,"code":"(fn pascal [n]\n  (into []\n        (if (= n 1)\n          [1] \n          (map #(apply + %) (partition 2 1 (concat [0] (pascal (dec n)) [0]))))))","user":"5627d09ce4b00e49c7cb47db"},{"problem":97,"code":"(fn f [n]\n   (if (= n 1)\n     [1]\n     (mapv (fn [i]\n             (if (or (= i 0) (= i (dec n)))\n               1\n               (let [p (f (dec n))]\n                 (+ (or (get p (dec i)) 1)\n                    (get p i)))))\n           (range n))))","user":"5a250b86e4b07f18be40aa19"},{"problem":97,"code":"(fn [rows]\n  (nth (iterate (fn [x]\n                  (conj (second (reduce #(vector %2 (conj (second %1) (+ (first %1) %2)))\n                          [0 []]\n                          x)) 1)) [1]) (dec rows)))","user":"53fcd574e4b0de5c418485d9"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (letfn [(get-next-row\n           [cur-row]\n           (let [middle (map #(+' %1 %2) cur-row (rest cur-row))]\n             (concat [(first cur-row)] middle [(last cur-row)])))]\n    (nth (iterate get-next-row [1]) (dec n))))","user":"5e805895e4b085ba37836e44"},{"problem":97,"code":"(fn [n]\n  (loop [i 1 result [1]]\n    (if (= i n)\n      result\n      (recur\n        (inc i)\n        (vec (map + (vec (cons 0 result)) (conj result 0)))\n      )\n    )\n  )\n)","user":"51f09f3de4b0274c496158d7"},{"problem":97,"code":"(fn pas-seq [a]\n  (letfn\n    [(pascalT [a]\n      (let [pas (fn [a]\n              (let [a1 (concat [0] a)\n                    a2 (concat a [0])\n                    b (map + a1 a2)]\n                b))]\n    (lazy-seq\n      (concat [a] (pascalT (pas a))))))]\n    (last(map vec (take a (pascalT [1]))))))","user":"57fc34f0e4b0d3187e90098e"},{"problem":97,"code":"(fn [n]\n  (let [n2 (dec n)\n        n-over-k (fn [k]\n                   (cond (zero? k) 1\n                         (= k n2) 1\n                         :else (/ (apply * (range (- n k) n))\n                                  (apply * (range 1 (inc k))))))]\n    (into [] (map n-over-k (range  n)))))","user":"5bc833a5e4b07a9b28b100bb"},{"code":"(fn [index]\r\n  (nth\r\n      ((fn ptr\r\n         ([] (ptr [1]))\r\n         ([row]\r\n            (lazy-seq \r\n             (let [row-next (reduce #(conj %1\r\n                                           (+ (get row (dec %2) 0)\r\n                                              (get row %2 0)))\r\n                                    [] (range 0 (inc (count row))))]\r\n               (cons row (ptr row-next))))))\r\n       )\r\n\r\n      (dec index)))","problem":97,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","user":"57f81549e4b0d3187e900918"},{"code":"(fn make-pascal [n]\n     (vec (nth \n            (iterate\n              (fn[colls]\n               (concat (map + colls (list* 0  colls)) [1]))\n              [1])\n            (dec n))))","problem":97,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn pascal [number]\n  (condp = number\n    1 [1] ;if 1, answer is [1]\n    (let [row-before (pascal (dec number));recursion on one lower than number\n          row-before-half1 (concat [0] row-before);connecting 0 to the beginning of\n                                                  ;the recursion of number-1\n          row-before-half2 (concat row-before [0])];connecting 0 to the end of\n                                                   ;the recursion of number-1\n      (vec (map + row-before-half1 row-before-half2)))))\n         ;make a big vector out of adding together the two numbers in the row before","problem":97,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [i]\n(nth ((fn [n]\n  (loop [i 0 done []]\n    (if (= i n) done\n      (let [prev (if (empty? done) \n                   (vector 0 1)\n                   (concat [0] (last done) [0]))\n            mine (->> prev \n                   (partition 2 1) \n                   (map (partial apply +')) \n                   vec)]\n        (recur (inc i) (conj done mine))))))\ni) (dec i)))","problem":97,"user":"4daf907aedd6309eace4d17b"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [s]\n            (loop [row []\n                   [n1 n2 & s] s]\n              (let [row (if (and n1 n2)\n                          (conj row (+ n1 n2))\n                          [])]\n                (if (empty? s)\n                  (vec (cons 1 (conj row 1)))\n                  (recur row (cons n2 s))))))]\n    (loop [rownum 1\n           row [1]]\n      (if (= rownum n)\n        row\n        (recur (inc rownum) (next-row row))))))","user":"5215661be4b02f6d8ea676c7"},{"code":"(fn pascals-triangle [n]\r\n  (last \r\n   (take n\r\n         (iterate\r\n          #(map (fn [[x y]] (+ x y))\r\n                (partition 2 1 [0] (cons 0 %)))\r\n          [1]))))","problem":97,"user":"4dd7d040535d2dad7130b5d6"},{"problem":97,"code":"(fn [x] (nth (iterate #(mapv + (conj % 0) (cons 0 %)) [1]) (dec x)))","user":"53d5a63be4b0e771c3025449"},{"problem":97,"code":"(fn [x]\n  (nth\n   (iterate #(map + (cons 0 %) (concat % [0])) [1])\n   (dec x)))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":97,"code":"(fn pascal-row [n] \n  (loop [x [1] n n]\n    (if (= n 1) \n      x\n      (recur (map + (cons 0 x) (concat x [0])) (dec n)))))","user":"554dfe97e4b00713264bd98c"},{"code":"#(take %\n  ((fn foo [result cell row] \n    (lazy-seq \n      (cons result (foo (* result (/ (- row cell) cell)) (+ 1 cell) row))\n  ))1 1 %))","problem":97,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"(fn [n]\n   (first (drop (dec n)\n                ((fn pascal-tr [line]\n                   (lazy-seq (cons line (pascal-tr (vec (concat [1]\n                                                                (mapv #(reduce + %) (partition 2 (drop-last (rest (flatten (map #(repeat 2 %) line))))))\n                                                                [1]))))))\n                  [1]))))","problem":97,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn[y](last (take y(iterate(fn[x](concat[(first x)](flatten(map #(apply +%)(partition 2 1 x)))[(last x)])) [1]))))","problem":97,"user":"4e7eff9e535db966e863cc38"},{"code":"(fn pascal [nplusone]\n  (let [n (- nplusone 1)]\n    (letfn [(fact [n]\n              (loop [cnt n acc 1]\n                (if (zero? cnt)\n                  acc\n                  (recur (dec cnt) (* acc cnt)))))\n            (coeff [n k]\n              (/ (fact n) (* (fact k) (fact (- n k)))))]\n      (map #(coeff n %) (range (+ 1 n))))))","problem":97,"user":"4db6ce85535d1e037afb217f"},{"code":"(fn [m] (letfn [(fact [n] (loop [r 1 n n] (if (= 0 n) r (recur (* r n) (dec n))))) (comb [n m] (/ (fact n) (* (fact m) (fact (- n m))))) (pt [n] (map #(comb n %) (range (inc n))))] (pt (dec m))))","problem":97,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":97,"code":"(fn Pascal-Triangle\n  [n]\n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn pascal [row]\n  (letfn [(factorial [x] (if (zero? x) 1 (* x (factorial (- x 1)))))\n  \t\t(nchooser [n r] (/ (factorial n) (* (factorial r) (factorial (- n r)))))]\n\t(map #(nchooser (dec row) %) (range row))))","problem":97,"user":"4ea0c284535d7eef308072ad"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map +' `(0~@%) `(~@% 0)) [1]))))","user":"575f6a80e4b08062f99a4e80"},{"problem":97,"code":"#(loop [b 1\n         r (list)]\n    (if (> b %)\n      r\n      (recur (inc b) (conj r ((fn yhsj [x y]\n                                (if (or (= x y) (= y 1))\n                                  1\n                                  (+ (yhsj (dec x) (dec y))\n                                     (yhsj (dec x) y)))) % b)))))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":97,"code":"(fn [n] \n  (nth \n   (iterate (fn [v] (concat [1] (map #(reduce + %) (partition 2 1 v))[1])) [1]) \n   (dec n)))","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn Pascal-Triangle\n  [x]\n  (map (fn [a] (if (zero? a) 1 (/ (apply * (take a (reverse (range 1 x)))) (apply * (take a (range 1 x)))))) (range x)))","problem":97,"user":"52084f75e4b01ce6bbf31dde"},{"problem":97,"code":"(fn [n] \n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":97,"code":"(let\n   [fact (fn fact [n]\n           (if (< n 2)\n             1\n             (* n (fact (dec n)))))\n    comb (fn comb [n k]\n           (/ (fact n) (* (fact k) (fact (- n k)))))\n    pascal (fn [row]\n             (map #(comb (dec row) %) (range row)))\n    ]\n   pascal\n   )","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn pascal\n  ([n] (pascal n [1]))\n  ([n s] (if (zero? (dec n)) s \n             (pascal (dec n) (vec (map + (conj s 0)(cons 0 s)))))))","problem":97,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [n] (map #(/ (reduce * (range (inc %) n)) (reduce * (range 1 (- n %)))) (range n)))","problem":97,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn [c] (nth (iterate (fn [c] `(1 ~@(map + (rest c) (drop-last c)) 1)) '(1)) (dec c)))","problem":97,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [r] \n     (let [r1 (- r 1)\n           c (range 0 r)]\n           (vec (map (partial (fn pp [r c]\n              (if (= c 0)\n\t\t\t          1\n\t\t            (int (* (/ (- (+ r1 1) c) (* c 1.0)) (pp r1 (- c 1))))\n\t\t          )) r1) c))\n           ))","problem":97,"user":"504457c0e4b01f6c9a8b2360"},{"problem":97,"code":"(fn pt [r]\n  (if (== r 1) \n    [1]\n    (let [abv (pt (dec r))]\n      (vec (concat [1] (map + abv (drop 1 abv))\n              [1])))))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":97,"code":"(fn pascal [n]   \n  (reduce (fn [acc _] (concat [1] (map + (rest acc) acc) [1])) [1] (range (dec n)) ))","user":"53213810e4b09d4e7a9b54b0"},{"problem":97,"code":"(fn [in]\n    ((fn calc [cnt res]\n        (if (= cnt 1)\n            res\n            (calc (- cnt 1) (concat [1]\n                (loop [in res\n                       out []]\n                    (if (< (count in) 2)\n                        out\n                        (recur (rest in) (conj out (+ (first in) (first (rest in)))))\n                    )\n                )\n            [1]))\n        )\n    )in [1]))","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn f [x]\n  (if (= x 1) [1] (concat [1] (map #(apply + %) (partition 2 1 (f (dec x)))) [1])))","problem":97,"user":"51c8301ee4b07ef393169e4d"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(map + `(0 ~@%) `(~@% 0)) [1]))))","user":"558d7dd3e4b0277789237647"},{"problem":97,"code":"(fn [row]\n  (let [fact (fn [x] (reduce * (range 1 (inc x))))\n        choose (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(choose (dec row) %) (range 0 row))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn [n] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","problem":97,"user":"50742549e4b054001656accf"},{"problem":97,"code":"(fn pascal [n] \n  (nth \n    (iterate \n      #(vec (map + (conj % 0) (cons 0 %))) '[1]) \n    (dec n)))","user":"53e241a6e4b036ad0777e3f0"},{"problem":97,"code":"(fn ps [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n         (partition 2 1\n                    (concat [0] (ps (- n 1)) [0])))))","user":"5a5767f3e4b05d388ecb6c65"},{"problem":97,"code":"(fn [n]\n   (into [] (map (fn [x]\n                   (apply (fn val-at\n                            [c r]\n                            (cond\n                              (< c 0) 0\n                              (< r 0) 0\n                              (> c r) 0\n                              (and (= 0 c) (= 0 r)) 1\n                              :else (+ (val-at c (dec r)) (val-at (dec c) (dec r))))) x)) (map #(vector % (dec n)) (range 0 n)))))","user":"55a19e19e4b0acc240e31515"},{"problem":97,"code":"(fn [x] (nth (iterate #(vec (map + (conj % 0) (concat [0] %))) [1]) (dec x)))","user":"560bb1f7e4b05f002753df20"},{"problem":97,"code":"(fn triangle [n]\n  (let [fact (fn foo [n]\n               (if (<= n 1)\n                 1\n                 (* n (foo (dec n)))))\nnCr (fn [n r]\n      (/ (fact n) (* (fact r) (fact (- n r)))))]\n    (vec (for [i (range n)]\n           (nCr (- n 1) i)))))","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":97,"code":"#(for [x (range %)] ((fn p[n, k] (if (or (= k 0) (= k n)) 1 (+ (p (dec n) (dec k)) (p (dec n) k)))) (dec %) x))","user":"56347285e4b0bfe05bf117bc"},{"problem":97,"code":"(fn [c]\n  (nth\n    (iterate\n      #(map + `[0 ~@%] `[~@% 0]) [1])\n  (- c 1)))","user":"54d70f40e4b0a52adc2e2027"},{"problem":97,"code":"(fn pascal-tri\n  [x]\n  (if (= 1 x)\n    [1]\n    (let [p (conj (pascal-tri (dec x)) 0)]\n      (map + p (reverse p)))))","user":"57f81544e4b0d3187e900917"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (vec (concat [1]\n                 (map (partial apply +)\n                      (partition 2 1 (pascal (dec n))))\n                 [1]))))","user":"55c4e48be4b0e31453f649a7"},{"problem":97,"code":"(fn pascal-triangle [x] \n   (letfn [(make-row-until [x] (->> (repeat 1) (take x) vec))\n           (sum-adiacents [xs]\n              (loop [acc []\n                    [head & tail] xs]\n                (if (nil? tail) acc \n                (recur (conj acc (+ head (first tail))) tail))))]\n     \n     (loop [acc (make-row-until 2)]\n       (if (= x (count acc))\n         acc\n         (if (< x 3)\n           (make-row-until x)\n           (recur ((comp vec flatten) [1 (sum-adiacents acc) 1])))))))","user":"5553b729e4b0deb715856e05"},{"problem":97,"code":"(fn [n]\n  (->> (iterate \n         (fn [coll]\n           (conj (map #(apply + %1)\n                      (partition-all 2 1 coll)) 1))\n         [1])\n       (take n)\n       (last)))","user":"561a9380e4b053970a773b07"},{"problem":97,"code":"(fn pascal [r] \n  (if (= r 1)\n    [1]\n    (let [pr (pascal (- r 1))]\n      (conj (into [1]  (map #(apply + %) (partition 2 1 pr))) 1))))","user":"535558b9e4b04ce2eb3ed25a"},{"code":"(fn [n] (let [g\n              (fn [v result]\n                (if (<= (count v) 1)\n                  result\n                  (recur (next v) (conj result (+ (first v) (fnext v))))\n                )\n              )]\n          (loop [prev [1] curr 2]\n            (if (> curr n)\n              prev\n              (recur (flatten (vector 1 (g prev []) 1)) (inc curr))\n            )\n          )\n        )\n)","problem":97,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [n] \n  (letfn \n    [(next [previous] (concat [1] (map #(apply + %) (partition 2 1 previous)) [1]))]\n  (if (= n 1) [1] (nth (iterate next [1]) (dec n)))\n  \n    ))","problem":97,"user":"51a584c7e4b051b01d55f44e"},{"code":"(fn [n] (letfn [(next-pascal-row [row] (concat [1] (map (fn [pair] (apply + pair)) (partition 2 1 row)) [1])) (pascal-row [n] (if (= n 1) [1] (next-pascal-row (pascal-row (- n 1)))))] (pascal-row n)))","problem":97,"user":"52f10094e4b05e3f0be25ee8"},{"problem":97,"code":"(fn [n]\n  (loop [coeffs (mapv #(reduce / %) (partition 2 (interleave (reverse (range 1 n)) (range 1 n)))) \n         results [1]]\n    (if (empty? coeffs)\n      results\n      (recur (rest coeffs) (conj results (* (first coeffs) (last results)))))))","user":"54012b48e4b0de5c41848620"},{"problem":97,"code":"(fn pas [n]\n  (if (= 1 n)\n    [1]\n    (let [p (pas (- n 1))] (vec (map + (cons 0 p) (conj p 0))))))","user":"53e4fa2ce4b036ad0777e454"},{"problem":97,"code":"#(nth (iterate (fn [x]\n                 `[1\n                   ~@(map + x (rest x))\n                   1])\n               [1]) \n      (dec %))","user":"4e38f245535deb9a81d77f3e"},{"problem":97,"code":"(fn pascal\n  ([n] (map #(pascal (- n 1) %) (range n)))\n  ([i j]\n   (cond\n     (= j 0) 1\n     (= i j) 1\n     :else (+ (pascal (- i 1) (- j 1)) (pascal (- i 1) j)))))","user":"5785de31e4b0ebec4cfb74e4"},{"problem":97,"code":"(fn pascal [count] \n  (if (= count 1) [1]\n    (map + (concat [0] (pascal (dec count))) (concat (pascal (dec count)) [0]))))","user":"53a739b0e4b0ef122a8689d0"},{"problem":97,"code":"(fn [n]\n  (last \n   (take n \n         (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"59e68254e4b0249b728206fc"},{"code":"(fn\n  [n]\n  (if (= n 1)\n    [1]\n  (loop [m 2 \n         r [1]]\n    (let [next-r (into [] (map #(apply + %) (partition 2 1(concat [0] r [0]))))] \n      (if (= m n)\n        next-r\n        (recur (inc m) next-r))))))","problem":97,"user":"4fdf566fe4b05e33b9224f99"},{"problem":97,"code":"(fn __ [line]\n    (cond\n   (= line 1) [1]\n   (= line 2) [1 1]\n   :else (let\n             [prev-line (__ (dec line))]\n           (concat [1] (map + prev-line (rest prev-line)) [1]))))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn [r]\n  (reductions\n  #(/ (* % (- r %2)) %2) \n  1\n  (range 1 r)))","problem":97,"user":"4f03688d535dcb61093f6aac"},{"problem":97,"code":"(fn [n]\n  (let [pascal-seq (iterate\n                     #(concat [1] (map + % (rest %)) [1])\n                     [1])]\n    (nth pascal-seq (- n 1))\n  )\n)","user":"53ecd01fe4b0d648e757f4b9"},{"problem":97,"code":"(fn spotpascal [n]\n    (if (< n 2)\n      [1]\n      (conj (into [1] (map #(apply + %) (partition 2 1 (spotpascal (dec n))))) 1)))","user":"60882700e4b0ae75613dcedf"},{"problem":97,"code":"#(loop [x % row [1]]\n     (if (< x 2)\n       row\n       (recur (dec x) (vec (map + (cons 0 row) (conj row 0))))))","user":"59e0f38ae4b08badc2a0c500"},{"code":"(fn p[n]\n    (if (= n 1)\n\t      [1]\n\t      (let [r (p (dec n))]\n\t\t   (into []\n\t\t\t (map #(+ (get r % 0) (get r (inc %) 0))\n\t\t\t      (range -1 (dec n)))))))","problem":97,"user":"4e842ebb535db62dc21a62df"},{"problem":97,"code":"#(nth\n  (iterate\n   (fn [x] (map\n            (partial apply +)\n            (partition 2 1 (concat [0] x [0]))))\n   [1])\n  (dec %))","user":"586b6f13e4b01531a375e959"},{"code":"(fn [n] \n  (nth (iterate \n    (fn [n] \n      (concat \n        [1] \n        (map #(apply + %) \n             (partition 2 1 n)) \n        [1])) [1]) (dec n)))","problem":97,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":97,"code":"(fn [n]\n  (reduce\n   (fn [row i]\n     (concat [1]\n             (map (fn [[x y]] (+ x y))\n                  (partition 2 1 row))\n             [1]))\n   [1]\n   (range (- n 1))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":97,"code":"(fn [x]\n  (let [expand (fn [row]\n                 (loop [j 0 new [1]]\n                   (if (>= (+ j 1) (count row))\n                     (conj new 1)\n                     (recur (inc j) (conj new (+ (nth row j) (nth row (+ j 1))))))))]\n   (loop [i 0 row [1]]\n     (if (= i (- x 1))\n       row\n       (recur (inc i) (expand row)))))\n  )","user":"5694292ee4b0dcc4269f4113"},{"code":"(fn pascal [lvl]\n  (loop [i lvl pyr '(1)]\n    (if (= 1 i) pyr\n      (recur \n        (dec i)\n        (map + (cons 0 pyr) (reverse (cons 0 pyr)))))))","problem":97,"user":"4e356d2b535deb9a81d77f2d"},{"problem":97,"code":"(fn [n]\n    (reduce (fn [res k] (conj res (* (last res) (/ (- n k)k))))\n            [1] \n            (range 1 n) ))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn z [i]\n  (nth\n    ((fn x [q]\n      (cons \n        q\n        (lazy-seq \n          ((fn c [coll]\n            (x (concat\n              [(first coll)]\n              (map #(+' (first %) (second %)) (partition 2 1 coll))\n              [(last coll)]))) q)))) [1]) (dec i)))","problem":97,"user":"53513d28e4b084c2834f4ae3"},{"problem":97,"code":"(fn pascal\n  [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn my-pascal [n]\n  (nth \n    (iterate \n    #(concat \n      [1] \n      (map (partial reduce +)\n           (partition 2 1 %1))\n      [1])\n    [1])\n  (dec n)))","problem":97,"user":"50812debe4b01a93d3f38e4c"},{"problem":97,"code":"(fn [n]\n  ((fn f [n]\n     (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else (let [row (f (dec n))\n                  xs (concat [0] row)\n                  ys (concat row [0])\n                  row (map vector xs ys)\n                  row (map #(apply + %) row)]\n              row))\n     ) n))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn pascal-row [r]\n  (let [pc' (fn aux [c]\n              (if (or (zero? c) (= c (dec r)))\n                1\n                (* (aux (dec c)) (/ (- r c) c))))]\n    (map pc' (range 0 r))))","problem":97,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":97,"code":"(fn [row]\n    (map first (take row\n                     (iterate (fn [[n nu]] [(/ (* n nu) (- row nu)) (dec nu)]) [1 (dec row)]))))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn f [n] (if (= n 1)\n              [1]\n              (let [row (f (dec n))]\n                (vec\n                  (concat\n                   '(1)\n                   (map #(+ (nth row %) (nth row (dec %))) (range 1 (count row)))\n                   '(1))))))","problem":97,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn pascal [n]\r\n  (if (= n 1)\r\n    [1]\r\n    (map #(apply + %)\r\n      (partition 2 1\r\n        (concat [0] (pascal (dec n)) [0])))))","problem":97,"user":"4dfd4ba8535d04ed9115e781"},{"problem":97,"code":"(fn [n]\n    (let [aug (fn [coll]\n                (concat\n                  [1]\n                  (map #(apply + %) (partition 2 1 coll))\n                  [1]))]\n      (reduce (fn [x y] (aug x)) [1] (range (dec n)))))","user":"5a00cb31e4b01bb0ae8afd36"},{"code":"#(if (= 1 %) [1]\n  (loop [p [1] n %]\n    (let [s (map + p (rest p))\n          r (concat '(1) s '(1))]\n      (if (= 2 n) r\n        (recur r (dec n))))))","problem":97,"user":"50464831e4b011c5dfee771f"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (map #(apply + %)\n         (partition 2 1\n                    (concat [0] (pascal (- n 1)) [0])))))","user":"54ca35c6e4b057c6fda3a254"},{"code":"(fn [x]\r\n  (nth\r\n   (iterate \r\n    (fn [coll]\r\n      (loop [coll coll\r\n             z []]\r\n        (if (= (count coll) 1)\r\n          (cons 1 (conj z 1))\r\n          (recur (rest coll) \r\n                 (conj z (+ (first coll) (second coll))))))) [1])\r\n   (dec x)))","problem":97,"user":"504e2333e4b0f6ff3350c46c"},{"problem":97,"code":"(fn [n]\n  (loop [v [1]\n        i 1]\n    (if (= n i)\n      v\n      (recur\n        (apply vector\n              (map #(apply + %) (partition 2 1(into [0] (conj v 0)))))\n        (inc i)))))","user":"5d52bf29e4b0776584bd6f69"},{"problem":97,"code":"(fn pascal [x]\n  (loop [row [1]\n         counter 1]\n    (if (= counter x)\n      row\n      (recur\n        (map + (concat [0] row) (concat row [0]))\n        (inc counter)))))","user":"564348e1e4b08d4f616f5f26"},{"problem":97,"code":"(fn pascal-triangle [x] (loop [ret [1 1]] (if (= x 1) [1] (if (= x (count ret)) ret (recur (concat [1] (conj (vec (map #(+ (first %) (second %)) (partition 2 1 ret))) 1)))))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":97,"code":"(fn triangle [n]\n  (loop [r [1]]\n    (if (= (count r) n)\n      r\n      (let [next-level (map-indexed (fn [i x] (if (= 0 i) 1 (+ x (nth r (dec i))))) r)]\n        (recur (conj (vec next-level) 1))))))","user":"5541fa50e4b0a04f79299515"},{"code":"#(reduce (fn [xl c] (cons (* (first xl) (/ (- % c) c) ) xl )) '(1) (range 1 %))","problem":97,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":97,"code":"(fn [n] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) '[1]) (dec n)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [preceding-row (pascal (dec n))]\n      (map + (concat preceding-row [0])\n             (concat [0] preceding-row)))))","user":"569f99cce4b0542e1f8d1497"},{"problem":97,"code":"(fn pt [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (let [a (pt (- n 1))] (map + (drop 1 a) (drop-last a))) [1])))","user":"561a1af6e4b053970a773b02"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [\n     (pascal-row [row]\n       (let [next-row (mapv + (cons 0 row)(conj row 0))]\n         (cons row (lazy-seq (pascal-row next-row)))))]\n    \n    (nth (pascal-row [1]) (dec n))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":97,"code":"(fn [n]\n  (loop [i 1, out [1]]\n    (if (= i n)\n      out\n      (recur (inc i) (#(conj (into [1] (map + % (rest %))) 1) out)))))","user":"58cff8b0e4b03c36ff7e58c0"},{"problem":97,"code":"(fn pascal [n]\n  (let [reduire #(map + (rest %) %)]\n    (if (= n 1)\n      [1]\n      (concat [1] (reduire (pascal (- n 1))) [1]))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":97,"code":"(fn [n]\n  (reduce (fn [row _]\n            (flatten\n              (interpose (map + row (rest row))\n                         [1 1])))\n          [1]\n          (range 1 n)))","user":"53571732e4b04ce2eb3ed275"},{"code":"(fn pascal [n]\n  (let [fact- (fn [n x] (if (zero? x) n (recur (* x n) (dec x))))\n        fact (fn [x] (fact- 1 x))\n        choose (fn [n k]\n                 (/ (fact n) (* (fact (- n k)) (fact k))))]\n    (map (partial choose (dec n)) (range n))))","problem":97,"user":"4e7f8f85535db966e863cc44"},{"problem":97,"code":"(fn pascal [n]\n    (if (= n 1)\n        [1]\n        (let [res (pascal (- n 1))]\n          (vec (map + (apply vector 0 res) (conj res 0))))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"(fn [n]\n  (reduce #(vec (for [i (range (+ 1 %2))]\n                  ((fn [k v]\n                     (if (or (= k 0) (= k (count v)))\n                       1\n                       (+ (nth v (dec i)) (nth v i))))\n                   i %)))\n          [1]\n          (range n)))","problem":97,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn [n]\r\n  (let [fact #(reduce * (range 1 (inc %)))\r\n        C #(/ (fact %) (* (fact %2) (fact (- % %2))))]\r\n    (map #(C (dec n) %) (range n))))","problem":97,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn[n](loop[level n, ns [1]](if (<= level 1) ns                              \n           (recur (dec level) (#(loop[rs %, s []](if (nil? (second rs)) (concat [1] s [1])\n            (recur (next rs) (concat s [(+ (first rs) (second rs))]) ))) ns)) )          )\n)","problem":97,"user":"4ec75829535d6d7199dd36e1"},{"problem":97,"code":"(fn trikotnik [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else\n   \t(let [p (trikotnik (dec n))]\n      (flatten (list 1 ((fn sestevaj [l]\n                      (cond\n                       (= 2 (count l)) (* 2 (first l))\n                       :else\n                        (let [s (+ (first l) (first (rest l)))]\n                          (cond\n                           (= 3 (count l)) (list s s)\n                           :else\n                            (list s (sestevaj (drop-last (rest l))) s)))))\n        p) 1)))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":97,"code":"(fn [x] (first (loop [pascalList []\n                           ]\n                      (cond\n                        (= x 1) [[1]]\n                        (= x (count pascalList)) [pascalList]\n                        :else (recur (vec (concat [1] (mapv (fn [pair]\n                                                              (+ (first pair) (second pair)))\n                                                            (partition 2 1 pascalList))\n                                                  [1])))\n                        ))))","user":"5bb3c9a8e4b0a20761a2352f"},{"problem":97,"code":"(fn [n]\n  (for [x (range 0 n)]\n    (if (zero? x) \n      1\n      (quot (apply * (take x (iterate dec (- n 1))))\n            (apply * (take x (iterate dec x)))))))","user":"5a9a12d6e4b0d174b936c7b7"},{"problem":97,"code":"#(loop [n % prev [1]]\n  (cond (= n 1) prev\n        (= prev [1]) (recur (dec n) [1 1])\n        true (recur (dec n) (concat [1] (map (fn [a] (apply + a)) (partition 2 1 prev)) [1]))))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":97,"code":"(fn pascal-triangle [x]\n  (if (= x 1)\n    [1]\n    (loop [n 2 z [1 1]]\n      ( \n        (fn pascal-line [n z]\n          (if (= n x)\n            z\n            (recur (inc n) (concat [1] (map (fn [i] (reduce + i)) (partition 2 1 z)) [1]))\n          )\n        ) n z\n      )\n    )\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"code":"(fn [x]\n  (let [f #(concat [1] % [1])\n        xss (iterate #(f (map + % (rest %))) [1])\n        g (partial nth xss)]\n    (cond (number? x) (-> x dec g)\n          (coll? x) (map (comp g dec) x))))","problem":97,"user":"4daec9dcedd6309eace4d15f"},{"problem":97,"code":"#(if (= 1 %) [1]\n      (nth (iterate\n            (fn [row]\n              (concat [1]\n                      (map (partial reduce +)\n                           (partition 2 1 row))\n                      [1]))\n            []) (dec %)))","user":"51647faae4b003cf19fdde3b"},{"problem":97,"code":"(fn p [n] \n  (if (= n 1) \n    [1]\n    (map #(apply + %)\n         (partition 2 1\n         (concat [0] (p (dec n)) [0])))))","user":"5b59d176e4b02d533a91bd86"},{"problem":97,"code":"(fn pascal [row]\n  (last (concat [[1]]\n                (take (dec row)\n                      (iterate \n                       (fn next-row [last-row]\n                         (vec\n                          (concat [1]\n                                  (mapv + last-row (rest last-row))\n                                  [1])))\n                       [1 1])))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn g [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (flatten [1\n                        (map (partial apply +)\n                             (partition 2 1 (g (dec n)))) 1])))","problem":97,"user":"4f92de49e4b0dcca54ed6cb2"},{"code":"#(nth\n   (iterate\n     (fn [s]\n       `(1 ~@(map + s (rest s)) 1))\n     [1])\n   (- % 1))","problem":97,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":97,"code":"(fn [n] \n  (loop [m n re [1]] \n    (if (= m 1) \n      re \n      (recur (dec m) (into [] (concat [1] (map + re (rest re)) [1]))))))","user":"53e91473e4b036ad0777e495"},{"problem":97,"code":"(fn [x] \n  (reduce \n    (fn [col elem]\n      (map \n        #(if (or (= % 1) (= 0 (- (count elem) %))) 1\n          (+ (nth col (- % 2)) (nth col (dec %))))\n          elem)) [] \n        (map #(range 1 (inc %)) (range 1 (inc x)))))","user":"5e08c3dde4b0978307768fc8"},{"problem":97,"code":"#(letfn [(! [n] (reduce * (range 1 (inc n))))\n          (choose [n k] (/ (! n) (! k) (! (- n k))))]\n   (map (partial choose (dec %)) (range %)))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn pascals-row [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascals-row (- n 1))\n          prev-vec (apply vector prev)\n          inner (map #(+ (prev-vec %) (prev-vec (- % 1))) (range 1 (- n 1)))]\n      (concat [1] inner [1]))))","problem":97,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [target-row]\n  (loop [n 1\n         prev []]\n    (if (> n target-row)\n      prev\n      (recur\n        (inc n)\n        (into [] (map\n          #(if (or (= 0 %) (= n (inc %)))\n             1\n             (+ (prev %) (prev (dec %))))\n          (range n)))))))","problem":97,"user":"51195e77e4b055cfb310d499"},{"problem":97,"code":"#(loop [rowNum % rows [1]] \n   (if (= rowNum 1) rows \n       (recur (dec rowNum) (concat [1] ((fn newNums [prevNums] (map (partial apply +) (partition 2 1 prevNums))) rows) [1]))))","user":"5f309144e4b0574c87022c23"},{"code":"(fn [n] \n  (nth \n   (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) \n   (dec n)))","problem":97,"user":"52facb9de4b047fd55837002"},{"code":"(fn [depth]\r\n  (case depth\r\n      1 [1]\r\n      (loop [d (dec depth) xs [1 1]]\r\n        (if (= 1 d)\r\n          xs\r\n          (recur (dec d) (conj (into [1]  (vec (map #(apply + %) (partition 2 1 xs)))) 1))))))","problem":97,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= n 1)\n    '(1)\n    (map #(apply + %)\n       (partition 2 1\n                  (lazy-cat '(0) (pascal (dec n)) '(0))))))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn ! [level]\n  (if (= 1 level)\n    [1]\n    (conj (second\n             (reduce\n                (fn [[prev acc] x]\n                  [x (conj acc (+ prev x))])\n                [0 []]\n                (! (dec level)))) 1)))","problem":97,"user":"527b856fe4b03e8d9a4a758d"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= 1 n)\n    [1]\n    (let [upper-row (pascal-triangle (dec n))\n          upper-row-x (concat upper-row [0])\n          upper-row-lag (rest upper-row-x)]\n      (concat [1] (map + upper-row-x upper-row-lag)))))","user":"57e6997ee4b0bfb2137f5af0"},{"problem":97,"code":"(fn [rowno]\n  (letfn [(traverse [prev-row]\n                    (loop [one (first prev-row)\n                           two (second prev-row)\n                           tail (rest prev-row)\n                           out '( 1 )]\n                      (if (nil? two)\n                        (reverse (conj out 1))\n                        (recur (first tail) (second tail) (rest tail) (conj out (+ one two))))))]\n    (loop [crow 1\n           out '( (1) )]\n      (if (= crow rowno)\n        (first out)\n        (recur (inc crow) (conj out (traverse (first out))))))))","user":"56a9ea17e4b07966d5a8a07c"},{"code":"(fn [a] \n  (reduce \n       (fn [x i] (concat [1] \n         (map (fn [[a b]] (+ a b))\n                    (partition 2 1 x)) \n             [1])) [1] (range (dec a))))","problem":97,"user":"4daa374930acd6ed13482a68"},{"code":"(fn a[x] (if (= 1 x) [1] (let [b (a (dec x))] (map + (cons 0 b) (concat b [0])))))","problem":97,"user":"4ddbd934535d02782fcbe9fc"},{"problem":97,"code":"(fn p [n] \n  (if (= n 1) [1]\n    (let [prev (concat [0] (p (dec n)) [0])\n          help (map list (butlast prev) (rest prev))]\n      (reduce #(conj % (+ (first %2) (last %2))) [] help)    )))","user":"59156f0be4b0163c97b36f3d"},{"problem":97,"code":"(fn [num]\n   ((fn mypas [l x]\n      (if (= 1 x)\n        l\n        (mypas (conj (vec (map + l (cons 0 l))) 1) (dec x)))) [1] num))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn nth-pascal [n]\n  (if (= n 1)\n    '(1)\n    (let [mid (map (partial apply +) (partition 2 1 (nth-pascal (dec n))))]\n      (concat '(1) mid '(1)))))","problem":97,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn [n]\n  (letfn [(pascal [row col]\n          (cond (< col 1) 0\n                (> col row) 0\n                (= row 1) 1\n                :else (+ (pascal (dec row) (dec col)) (pascal (dec row) col))))]\n    (map (partial pascal n) (range 1 (inc n)))))","problem":97,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":97,"code":"(fn pt [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (concat [1] (map #(reduce + %) (partition 2 1 (pt (dec n)))) [1])))","user":"559279b7e4b0604b3f94d58c"},{"problem":97,"code":"(fn\n  [n]\n  (letfn [(bldr [i] (let [res (first i)\n                          l (last i)\n                          p (partition 2 1 i)]\n                      (conj (into [res] (map #(apply + %) p)) l)))]\n   (loop [k (dec n)\n          cur [1]]\n     (if (= 0 k)\n       cur\n       (recur (dec k) (bldr cur))))))","user":"5271605ae4b03e8d9a4a73ed"},{"problem":97,"code":"(fn [x]\n  (letfn [(fac [x]\n            (if (= 0 x) 1 (* x (fac (dec x)))))\n          (combo [n r]\n            (/ (fac n) (* (fac r) (fac (- n r)))))]\n    (map #(combo (dec x) %) (range x))))","user":"51b76227e4b0d906fcd71d35"},{"problem":97,"code":"(fn[times]\n  (last (take times(iterate (fn[input]\n    (flatten (conj[]\n      (first input)\n      (map #(reduce +' %)(partition 2 1 input))\n      (last input)))\n   )[1]))))","user":"5b6962c1e4b0c6492753e787"},{"code":"(fn [n]\n  (let [mk-row (fn [c] (loop [coll c\n        result []]\n   (if (second coll)\n     (recur (rest coll) (conj result (+ (first coll) (second coll))))\n     (cons 1 (conj result 1)))))]\n      (loop [result [1]\n          step 1]\n     (if (= step n)\n       result\n       (recur (mk-row result) (inc step))))))","problem":97,"user":"4daedd1eedd6309eace4d164"},{"code":"(fn pas [n] \n         (if (= n 1) '(1)\n             (concat '(1) \n                     (map (partial apply +) (partition 2 1 (pas (dec n)))) \n                     '(1))))","problem":97,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":97,"code":"(fn pascal-triangle [row]\n  (cond\n    (= row 1) [1]\n    (= row 2) [1 1]\n    :else (concat\n      [1]\n      (let [old (pascal-triangle (dec row))]\n        (println )\n        (loop [pair (take 2 old) tail (rest old) acc []]\n          (if (= 1 (count tail))\n            (conj acc (apply + pair))\n            (recur (take 2 tail) (rest tail) (conj acc (apply + pair))))))\n      [1])))","user":"5773f3a9e4b0979f896515f2"},{"problem":97,"code":"(fn [row]\n  (loop [last-row [1], idx 1]\n    (if (= idx row)\n      last-row\n      (recur (map #(apply + %) (partition 2 1 (concat [0] last-row [0]))) (inc idx)))))","user":"5a9ac061e4b0d174b936c7c1"},{"problem":97,"code":"(fn [n] \n  (letfn [(nextRow [row] (concat [1] (map (partial apply +) (partition 2 1 row)) [1]))]\n                   (nth (iterate nextRow [1]) (dec n))\n                   )\n  )","user":"575ef4b6e4b08062f99a4e78"},{"problem":97,"code":"(fn pt [n]\n  (if (= n 1)\n    [1]\n    (loop [xs (pt (- n 1))\n           result [1]]\n      (if xs\n        (let [x (first xs)\n              y (if (nil? (second xs)) 0 (second xs))\n              ]\n          (recur (next xs) (conj result (+ x y))))\n        result))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [r]\n  (if (= 1 r) '(1)\n    ((fn pt [col lst]\n      (if (> col (dec r))\n        nil\n        (lazy-seq\n          (let [cur (if (zero? col) 1\n                      (* lst (/ (- r col) col)))]\n            (cons            \n              cur\n              (pt (inc col) cur))))))\n      0 0)\n))","problem":97,"user":"50427899e4b0add3005c0fc2"},{"code":"; LEFT OFF HERE this solution works but not acceptable\n\n(fn my-pascal-row [n]\n  (cond\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   :else (nth\n          (iterate\n           (fn calc-row [prev]\n             (flatten\n              (cons 1\n                    (conj\n                     (vector (for [x (range 0 (dec (count prev)))] \n                               (+ (nth prev x) (nth prev (inc x)))))\n                     1))))\n           [1 1])\n          (- n 2)\n          )))","problem":97,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"(fn np [n]\n    (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n          (map #(/ (rprod (- (- n 1) % -1) (- n 1)) (rprod 1 %)) (range n))))","problem":97,"user":"4eeb8f68535d93acb0a668a9"},{"problem":97,"code":"(fn [n]\n  (loop [xs [1]\n         nn (dec n)]\n           (if (zero? nn) xs\n               (recur (concat [(first xs)] (reduce #(cons %2 %1) [] (map + xs (next xs))) [(last xs)]) (dec nn)))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn pascal [row]\n  (loop [v 1 r row c 1 acc []]\n    (if (= (count acc) row) \n      acc\n      (recur (* v (/ (- r c) c)) r (inc c) (conj acc v)))))","problem":97,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn[n](first (loop[i 0 acc []] (if(= i n) acc (if (zero? i) (recur (inc i) (cons [1] acc)) (if (= i 1) (recur (inc i) (cons [1 1] acc)) (recur (inc i) (cons (cons 1 (reverse (cons 1 (#(for[i (range (- (count %) 1))] (+ (nth % i) (nth % (+ i 1)))) (first acc))))) acc))))))))","problem":97,"user":"4fb3dd1ee4b081705acca2a5"},{"code":";; hugely inefficient, but mathematically correct :)\n(fn pascal [n]\n  (let [nck (fn nck [n k]\n              (if (= 0 k)\n              1\n              (if (= k n)\n                1\n                (if (= 0 n)\n                  0\n                  (+ (nck (dec n) (dec k)) (nck (dec n) k))))))]\n    (vec (map #(nck (dec n) %) (range n)))))","problem":97,"user":"5125d963e4b05d10e3e395fe"},{"code":"(fn pascal [n]\n  (loop [i 1, row [1]]\n    (if (= n i) row\n      (recur (inc i) (concat [1] (map #(apply + %) (partition 2 1 row)) [1])))))","problem":97,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn\n  [n]\n  (let [next-row \n        (fn [last-row]\n          (conj\n            (reduce\n              (fn [r [x y]]\n                (conj r (+ x y))\n                )\n              [1]\n              (partition 2 1 last-row)\n              )\n            1))]\n  (loop [i 1\n         coll [1]]\n    (if (= i n)\n      coll\n      (recur \n        (inc i) \n        (next-row coll))))))","problem":97,"user":"4fee04a0e4b0678c553fc308"},{"problem":97,"code":"(fn pascal [n]\n  (loop [row [1]\n         k 1]\n    (if (= n k)\n      row\n      (let [prev (last row)\n            next (quot (* prev (- n k)) k)]\n        (recur (conj row next) (inc k))))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":97,"code":"#(nth (iterate (fn [xs] (concat [1] (map (partial reduce +) (partition 2 1 xs)) [1])) '(1)) (dec %))","user":"5c30d90de4b0d62ef62d9f22"},{"code":"(fn [n] (let [newrow (fn [prow] (concat [1] (map #(apply + %) (partition 2 1 prow)) [1]))] (last (take n (iterate newrow [1])))))","problem":97,"user":"4ec1619b535dfed6da9c6dab"},{"problem":97,"code":"(fn [n] \n   (let [coll (reduce #(conj % (* (last %) (/ (- n %2) %2)))\n                [1] (range 1 (dec n)))] \n     (if (> n 1) (conj coll 1) coll)))","user":"51bd255ce4b0df1216cefd94"},{"code":"(fn [n]\n  (loop [i 1 r [1]]\n    (if (= i n)\n      r\n      (recur (inc i)\n             (let [x r\n                   y (next x)]\n               (conj (into [1] (map + x y)) 1))))))","problem":97,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":97,"code":"(fn [x] \n  (let [x (dec x)]\n    (loop [result [1] range (range x)]\n      (if (= 0 (count range))\n        result\n        (let [y (first range)] \n          (recur (conj result (quot (* (last result) (- x y)) (+ y 1))) (rest range))\n        )\n      )\n    )))","user":"55d79b87e4b0e31453f64aa8"},{"code":"#(let [f (fn [x] (apply * (range 1 (+ x 1))))\n       k (- % 1)\n       n (fn [x] (/ (f k) (* (f x) (f (- k x)))))]\n    (map n (range %)))","problem":97,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn [x]\n  (letfn [(ones [s] (vec (cons 1 (conj s 1))))]\n    (loop [n 2 v []]\n      (cond (= x 1) [1]\n            (= n x) (ones (vec (map #(apply + %) (partition 2 1 v))))\n            :else (recur (inc n) (ones (vec (map #(apply + %) (partition 2 1 v)))))))))","problem":97,"user":"511618b1e4b0d4f670fd2fdf"},{"problem":97,"code":"(fn peu [x] \n  \t(if (= x 1) '(1)\n      (let [y (peu (dec x))]\n      (let [\n        z (concat y '(0))\n        v (concat '(0) y)]\n        (map #(+ %1 %2) z v)\n      ))\n    )\n  )","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [r]\n   (if (= r 1)\n     '(1)\n     (let [r (- r 1)\n           fact (fn fact [n]\n                  (if (= 0 n)\n                    1\n                    (* n (fact (- n 1)))))]\n       (concat '(1)\n               (for [x (range 1 r)]\n                 (/ (fact r)\n                    (fact x)\n                    (fact (- r x))))\n               '(1)))))","problem":97,"user":"4ef57a7f535dced4c769f246"},{"code":"#(letfn [(f [s]\n           (loop [[a & r] s v [1]]\n              (if r\n                 (recur r (conj v (+ a (first r))))\n                 (conj v 1))))]\n    (nth (iterate f [1]) (dec %)))","problem":97,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":97,"code":"(fn[x] (loop [i 1 r [1]]\n         (if (= x i)\n         r\n         (recur (inc i) (map + (conj r 0) (reverse (conj r 0)))))))","user":"57dafe97e4b0bd073c20241c"},{"problem":97,"code":"(fn [limit]\n  (loop [i 0\n         l (dec limit)\n         out [1]]\n    (if (= i (- limit 1))\n      out\n      (recur (inc i) l (conj out (/ (* (get out i) (- l i)) (inc i)))))))","user":"575086e7e4b02ea114799276"},{"problem":97,"code":"(fn calcrow [n]\n   (let [n (dec n)]\n     (map (fn calcdigit [k]\n            (if (= k 0) 1\n                (let [num (- (+ n 1) k)]\n                  (int (* (calcdigit (dec k)) (/ num k))))))\n          (range 0 (inc n))))\n   )","user":"53aaaf7ae4b047364c044444"},{"code":"(fn pascals-triangle [n]\n    (if (= n 1) [1]\n        (let [prev-row (pascals-triangle (dec n))]\n          (into []\n                (for [i (range 0 n)]\n                  (cond (= i 0) 1\n                        (= i (dec n)) 1\n                        :else (+ (prev-row (dec i)) (prev-row i))))))))","problem":97,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":97,"code":"(fn [r] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec r)))","user":"55631739e4b0c656e3ff17e2"},{"code":"#(map (fn [m] ((fn [n k] (let [! (fn [x] (apply * (range 1 (inc x))))] (/ (! n) (* (! k) (! (- n k)))))) (- % 1) m)) (range 0 %))","problem":97,"user":"5047782ce4b0371827a27bc2"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) \n   [1]\n   (let [prec-row (pascal (dec n))\t\t\t; get the previous row\n         prec-row-0 (concat [0] prec-row [0])\t\t; concat zeros\n         n-row (map (partial apply + ) (partition 2 1 prec-row-0)) ]\n     n-row)))","user":"5680104ae4b0966858e4d8ea"},{"problem":97,"code":"(fn [row]\n   (if (= 1 row)\n     [1]\n     (loop [frow 3\n            prev [1 1]]\n       (if (> frow row)\n         prev\n         (recur (inc frow) (reduce (fn [res elem]\n                                     (conj res (cond\n                                                 (or (= 0 elem) (= (dec frow) elem)) 1\n                                                 :else (+ (prev elem) (prev (dec elem)))))) [] (vec (range frow))))))))","user":"5b34aba7e4b025bcb146f352"},{"code":"(fn [n]\n  (last \n    (loop [i 1 tri [[1]]]\n      (if (= i n) tri\n        (recur (inc i) \n               (conj tri (vec \n                  (map (partial apply +) \n                       (partition 2 1 (concat [0] (last tri) [0]))))))))))","problem":97,"user":"53300924e4b019098a6f8b55"},{"problem":97,"code":"(fn fpt [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [pt (fpt (dec n))]\n      (concat [1] (for [i (range (dec (count pt)))]\n                    (+ (nth pt i) (nth pt (inc i)))) [1]))))","user":"5f8e865fe4b0715f5002d76d"},{"code":"(fn p [x]\n  (if (= 1 x) [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (p (dec x)) [0])))))","problem":97,"user":"50a2f901e4b029e8bace362a"},{"problem":97,"code":"(fn pascal [n]\n    (if (= 1 n)\n      [1]\n      (let [prev-row (pascal (dec n))\n            row-a (concat [0] prev-row)\n            row-b (concat prev-row [0])]\n        (mapv + row-a row-b))))","user":"5250b7a5e4b0541d1855b83e"},{"problem":97,"code":"#(reduce (fn [acc index]\n           (conj acc (* (last acc) (/ (- (dec %) index) (inc index)))))\n         [1]\n         (range (dec %)))","user":"532ecd44e4b019098a6f8b49"},{"code":"#(loop [a %1 t [1]]\n   (if (= 1 a)\n     t\n     (recur (dec a) (flatten (reduce (fn [[t p] c]\n                                       [(conj t (+ p c)) c]) [[] 0] t)))))","problem":97,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn f [n] (cond (= n 1) [1] (= n 2) [1 1] :else (flatten [1 (map #(apply + %) (partition 2 1 (f (dec n)))) 1])))","problem":97,"user":"4dad8fe9c9a9d6ed1899dc57"},{"code":"(fn ptr [n]\n  (if (= n 1)\n    [1]\n    (let [p (ptr (dec n))]\n      (concat [1] \n              (for [[a b] (partition 2 (interleave p (rest p)))] (+ a b))\n              [1])))\n)","problem":97,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn [n]\r\n  (loop [idx 0 result []]\r\n\t\t(if (= idx n)\r\n\t\t\tresult\r\n\t\t\t(recur (inc idx) \r\n\t\t\t\t(cond\r\n\t\t\t\t\t(zero? idx) [1]\r\n\t\t\t\t\t(= 1 idx) [1 1]\r\n\t\t\t\t\t:else (into [] (concat [1] ((fn [coll]\r\n\t\t\t\t\t\t\t\t\t\t\t\t(loop [prev (first coll) input (rest coll) result []]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(let [current (first input)]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(if (empty? input)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(recur current (rest input) (conj result (+ prev current)))))))\r\n\t\t\t\t\t\t\t\t\t\t\t result) [1])))))))","problem":97,"user":"5028bce0e4b01614d1633ffb"},{"problem":97,"code":"(fn trig[n] (if (= 1 n) \n               [1] \n               (concat [1] (map (partial apply +) (partition 2 1 (trig (dec n)))) [1])))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":97,"code":"(fn pascal-triangle2 [n]\n  (letfn [(return-vals [l p]\n            (if (< (dec p) 0)              \n              [(l p)]\n              (if (>= p (count l))\n                [(l (dec p))]\n                [(l p) (l (dec p))])))\n          ]\n    (loop [coun 1\n           prev [1]]\n      (if (= n coun)\n        prev\n        (let [act (mapv #(apply + (return-vals prev %1)) (range (inc coun)))]\n          (recur (inc coun) act))))))","user":"574f1c24e4b02ea114799255"},{"problem":97,"code":"(fn pasc [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [pre (pasc (dec n))\n               pa (partition 2 1 pre)\n               inner (map #(apply + %) pa)]\n                          (println \"pa \" pa)\n     (conj (into [1] inner) 1))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn pascal-triangle [row]\n   (if (<= row 2)\n       (if (= row 1)\n           [1]\n           (if (= row 2)\n               [1 1]\n            )\n        )\n        (let [prev-row (pascal-triangle (dec row)) first-part (drop-last prev-row) second-part (drop 1 prev-row)]\n             (conj (apply vector (cons 1 (map + first-part second-part))) 1)\n        )\n     )\n )","problem":97,"user":"52763696e4b03e8d9a4a74d7"},{"problem":97,"code":"(fn pascals-triangle-row [row-number]\n  (if (= row-number 1)\n    [1]\n    (let [previous-row (pascals-triangle-row (dec row-number))]\n      (into []\n            (for [i (range row-number)]\n              (+ (nth previous-row i 0)\n                 (nth previous-row (dec i) 0)))))))","user":"577b4440e4b0d3393e5deb0f"},{"code":"(fn [n]\n  (letfn [(fact [x] (reduce * (range 1 (inc x))))]\n    (if (= n 1)\n      '(1)\n      (loop [iter 0\n             result '()\n             y (dec n)]\n        (if (> iter y)\n          result\n          (recur (inc iter)\n                 (conj result\n                       (/ (fact y)\n                          (* (fact (- y iter))\n                             (fact iter))))\n                 y))))))","problem":97,"user":"51a91ac2e4b08d8ec191b822"},{"problem":97,"code":"(fn [n] (reductions #(* %1 (/ (- n %2) %2)) 1 (range 1 n)))","user":"4fb1d7ace4b081705acca281"},{"problem":97,"code":"(fn [n]\n                     (let [pascal-triangle (fn pascal-triangle [last-row]\n                                             (lazy-seq\n                                              (let [next-row (concat [1] \n                                                                     (map (fn [[a b]] (+ a b)) \n                                                                          (partition 2 1 last-row)) \n                                                                     [1])]\n                                                (cons next-row (pascal-triangle next-row)))))]\n                       (nth (cons [1] (pascal-triangle [1])) (dec n))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":97,"code":"(fn [n]\n  (loop [n n r '(1)] \n    (if (= 1 n)\n      r\n      (recur (dec n)\n             (map (partial apply +) (partition 2 1 (concat '(0) r '(0))))))))","user":"5821b018e4b04b46fc4b0f80"},{"problem":97,"code":"(fn [n] \n    (nth\n          (iterate\n           (comp vec #(map + (cons 0 %) (conj % 0)))\n           [1])\n     (dec n)))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":97,"code":"(fn f [n]\n  (nth \n    (iterate \n      (fn [p]\n        (concat \n         [1]\n         (for [i (range 1 (count p))] \n           (+ (nth p (dec i)) (nth p i)))\n         [1]))\n      [1])\n    (dec n)))","user":"574dfcb8e4b02ea11479923a"},{"problem":97,"code":"(fn pascal [n]\n   (if (= n 1)\n     [1]\n     (let [lst (pascal (dec n))\n           a (vec (cons 0 lst))\n           b (conj lst 0)]\n       (vec (map + a b)))))","user":"56fbf83de4b07572ad1a88da"},{"problem":97,"code":"(fn pascal-triangle [height]\n  (letfn [\n    (next-row [prevRow]\n      (if (empty? prevRow) [1]\n      (concat '(1) (map + prevRow (rest prevRow)) '(1))))\n  ]\n  (nth (iterate next-row [1]) (dec height))))","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn [n] (last (take n (iterate (fn [row] (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))) [1]))))","problem":97,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn my-pascal-triangle\n  [num]\n  (cond \n    (= num 1) (vector 1)\n    (= num 2) (vector 1 1)\n    :else\n    (letfn [(calc-next-pascal-step [previous] \n            (conj (into [1] (map #(reduce + %) (partition 2 1 previous))) 1))]\n      (loop [i (- num 2) result (vector 1 1)]\n      (if (zero? i)\n        result\n        (recur (dec i) (calc-next-pascal-step result)))))))","problem":97,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":97,"code":"(fn [n]\n  (if (= n 1)\n    [1]\n  (let [next\n        (fn [row]\n          (concat\n           [1]\n           (map (partial apply +) (partition 2 (interleave row (rest row))))\n           [1]))]\n  (nth (iterate next [1 1]) (- n 2)))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":97,"code":"(fn pascal-row [number-of-columns] \n; the k:th column of the n:th row is\n; n(k) = n(k-1) * (n + 1 - k) / k\n; n(0) = 1\n(let [n (- number-of-columns 1)]\n  (println n)\n  (loop [\n    k 0\n    result []\n    ]\n    (println n k result)\n    (if (= k n) \n      (conj result 1)\n      (if (= k 0) \n        (recur 1 [1])\n        (recur (+ k 1) (conj result \n          (/ (* (last result) (- (+ n 1) k)) k)\n        ))\n      )\n    )\n    )\n  )\n)","user":"5b58b271e4b02d533a91bd6e"},{"code":"(fn [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n       (dec n)))","problem":97,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn pasc\n  [x]\n  (loop [result [1]\n         togo (- x 1)]\n    (if (= 0 togo)\n      (into [] result)\n      (recur (map #(reduce + %1) (partition 2 1 (conj (into [0] result) 0))) (- togo 1)))\n    ))","problem":97,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":97,"code":"(fn [x] (reductions #(/ (* %1 (- (dec x) %2)) (inc %2)) 1 (range (dec x))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [item] (nth (iterate (fn [prev] (vec (concat [1] (map (fn [[a b]] (+ a b)) (partition 2 1 prev)) [1]))) [1]) (dec item)))","problem":97,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn pascal-triangle [row]\n  (cond\n    (= row 1) [1]\n    (= row 2) [1 1]\n    :else (conj\n            (vec\n              (cons 1\n                (map (partial apply +)\n                     (partition 2 1 (pascal-triangle (dec row)))))) 1)))","problem":97,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [n] (nth (iterate #(map + `(0 ~@%) `(~@% 0)) [1]) (dec n)))","problem":97,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":97,"code":"(fn [n]\n  ((fn [n]\n  \t(for [p (range (inc n))]\n    \t((fn pascal-elt [n p]\n       \t(if (= p 0) 1\n         \t(if (= p n) 1\n           \t(+ (pascal-elt (dec n) p) (pascal-elt (dec n) (dec p)))))) n p)))\n   (dec n)))","user":"54651faee4b01be26fd746d6"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(mapv + (cons 0 %) (conj % 0)) [1]))))","user":"5e9683f1e4b0157ca96647c7"},{"problem":97,"code":"(fn [i] (cond\n                            (= 1 i) [1]\n                            (= 2 i) [1 1]\n                            :else (loop [l 2, res [1, 1]]\n                                    (if (= l i)\n                                      res\n                                      (recur (inc l) (loop [j 1, sub [1]]\n                                                       (if (= j (count res))\n                                                         (conj sub 1)\n                                                         (recur (inc j) (conj sub (+ (nth res (dec j)) (nth res j)))))))))))","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn pascal\n  [n]\n  (if (= 1 n) [1]\n  (if (= 2 n) [1 1]\n  (cons 1 (conj (vec(map #(reduce + %) (partition 2 1 (pascal (dec n))))) 1)))))","problem":97,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":97,"code":"(fn [n]\n  (nth (iterate \n         #(concat [1] (map + % (rest %)) [1])\n           [1]) (dec n) ))","user":"59385840e4b02506e01a29c9"},{"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (let [l (f (dec n))\n          x (concat [0] l)\n          y (concat l [0])]\n      (map + x y))))","problem":97,"user":"521b73f5e4b0c4ef0be83043"},{"code":"(fn [n]\n  (nth (iterate #(concat [1] (map + % (next %)) [1]) [1]) (dec n)))","problem":97,"user":"4e8f1ac6535d65386fec2146"},{"problem":97,"code":"(letfn [(next-row [row]\n          (loop [i 0, acc []]\n            (cond (>= i (dec (count row))) (into [] (concat [1] (conj acc 1)))\n                  :else (recur (inc i) (conj acc (+ (row i) (row (inc i))))))))\n        (get-row [n]\n          (loop [i 1, acc [1]]\n            (cond (= i n) acc\n                  :else (recur (inc i) (next-row acc)))))]\n  get-row)","user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [n]\n  (letfn [(next-row [row]\n            (concat [1]\n                    (map #(apply + %) (partition 2 1 row))\n                    [1]))]    \n    (nth (iterate next-row [1]) (dec n))))","problem":97,"user":"507b7dbee4b09034bfeeb71e"},{"problem":97,"code":"(fn [n] \n  (nth  (iterate \n          (fn [prev] (vec \n              (concat \n                [1] \n                (map  #(apply + %)  (partition 2 1 prev)) \n                [1])))  \n          [1])\n       (dec n)))","user":"4dbf7a31535d020aff1edf75"},{"problem":97,"code":"(fn [r]  (map #(/ (reduce * (range (inc (- (dec r) %)) r)) (reduce * (range 1 (inc %)))) (take r (iterate inc 0))))","user":"5576e78de4b05c286339e075"},{"problem":97,"code":"(fn [n]\n  (loop [row [1]\n         left (dec n)]\n    (if (= 0 left) row\n      (do (println row) (println left)\n    \t(recur (concat [1]\n                       (map #(+ (nth row %) (nth row (inc %))) \n                            (range (dec (count row))))\n                       [1]) (dec left))))))","user":"4ed152d5535d44c135fd68cc"},{"problem":97,"code":"(fn p [n]\n  (if (= 1 n) [1]\n     (concat [1] (->> n dec p (partition 2 1) (map #(apply + %))) [1])))","user":"54924f64e4b0b312c081ff42"},{"problem":97,"code":"(fn solution [n]\n  (loop [sequen [1] row 1]\n    (if (= n 1)\n      sequen\n      (if (= row n)\n        sequen\n        (recur (concat [1] (reduce #(conj %1 (reduce + %2)) [] (partition 2 1 sequen)) [1]) (inc row))))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"#(nth \n  (iterate (fn [c] \n             (loop [[f & [s :as c]] c r [1]]\n               (if c \n                 (recur c (conj r (+ f s)))\n                 (conj r f)))) \n           [1])\n  (- % 1))","problem":97,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":97,"code":"(fn tp [x]\n  (cond  \n   (= x 1) [1]\n   (= x 2) [1 1]\n   :else \n   (into [] (concat \n             [1]\n             (map (partial apply +) (partition 2 1 (tp (dec x))))\n             [1]))))","user":"4ec7c32c535d6d7199dd36e6"},{"problem":97,"code":"(fn pascalTriangle \n  [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n      (partition 2 1\n        (concat [0] (pascalTriangle (- n 1)) [0])))))","user":"59dd3930e4b0a0ac046f2504"},{"problem":97,"code":"#(if (= % 1)\n  [1]\n  (loop [in 2 out [1 1]]\n    (if\n      (= in %) out\n      (recur\n        (inc in)\n        (concat [1] (map (fn [x] (apply + x)) (partition 2 1 out)) [1])))))","user":"5f6caa19e4b02876ed9fd056"},{"code":"(fn [n]\n  (nth \n    (iterate \n      (fn [v] (if (empty? v) [1]\n                (let [nv (map #(apply + %) (partition 2 1 v))]\n                  (mapcat identity [[1] nv [1]]))))\n      [])\n     n))","problem":97,"user":"4fdb02aae4b05e33b9224f56"},{"code":"#(nth (iterate\n   (fn [prev-row]\n     (->>\n      (concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n      (map (partial apply +) ,,,)))\n   [1]) (dec %))","problem":97,"user":"51740b65e4b0d277d717bc67"},{"problem":97,"code":"(fn [n]\n  (nth (iterate\n         (fn[p]\n           (if (empty? p) \n             [1] \n             (conj (into [1] (map (fn [[a b]] (+ a b)) (partition 2 1 p))) 1)))\n         []) n))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [n]\n             (nth (iterate (fn [s]\n                                (concat [1] (map (partial apply +) (partition 2 1 s)) [1]))\n                       [1]) (dec n)))","problem":97,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn pasc-tri [n]\n  (cond (zero? n) []\n        (= n 1) [1]\n        :else (conj (map (partial apply +)\n                         (partition-all 2 1 (pasc-tri (dec n))))\n                    1)))","problem":97,"user":"50ec4ed7e4b04edc33777046"},{"problem":97,"code":"(fn permute [n & body]\n  (if (= n 0)\n    body\n    (let [b body\n          rb (concat (rest b) [0])\n          res (concat [1] (map + b rb))]\n     \t(apply (partial permute (dec n)) res) \n    )\n  )\n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":97,"code":"(fn tri-row [x]\n    (cond\n        (= x 1) [1]\n        (= x 2) [1 1]\n        :else (conj (first \n                        (reduce (fn [[r l] n] [(conj r (+ l n)) n]) [[] 0] (tri-row (dec x)))) 1)))","user":"553706d1e4b09218d5f44fc7"},{"code":"(fn [n]\n  ((fn [togo s]\n    (if (== 1 togo) s\n      (recur (dec togo) \n        (vec (map + (conj s 0) (cons 0 s))))))\n     n [1]))","problem":97,"user":"4f569218e4b0a7574ea71826"},{"problem":97,"code":"#(loop [fractions (map / (range (dec %) 0 -1) (range 1 %))\n        result [1]]\n   (if (empty? fractions)\n     result\n     (recur (rest fractions) (conj result (* (last result) (first fractions))))))","user":"5152bc4ee4b001f44f99bfef"},{"problem":97,"code":"(fn [i]\n    (let [f (fn [row]\n              (let [inside (->> row\n                                (partition 2 1)\n                                (map #(apply + %)))]\n                (concat [1] inside [1])))]\n      (nth (iterate f [1]) (dec i))))","user":"509e8da7e4b08df8156e9e2f"},{"code":"#(let [t\n  (iterate\n    (fn [p]\n      (->>\n        (concat [[(first p)]] (partition 2 1 p) [[(last p)]])\n        (map (partial apply +) ,,,)))\n     [1])] (nth t (dec %)))","problem":97,"user":"4f039a8b535dcb61093f6b36"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (loop [x n \n   \t\t\t  result [1]]\n    (if (> x 1)\n      (recur (dec x) (conj (into [] (conj (map #(apply + %) (map vector result (rest result))) 1)) 1))\n      result)))","user":"5d321852e4b01671435dbce8"},{"problem":97,"code":"(fn asdf [x]\n\n  (last (into [] (take x  (iterate (fn make-next-pascal-row [coll]\n                      (mapv #(+ (first %) (second %))  (partition 2 1(concat  [0] (conj coll 0))\n                                                                  )))\n                    [1])\n                       ))))","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":97,"code":"(fn pascal\n  [n]\n  (nth\n    (iterate #(map +' (concat [0] %) (concat % [0])) [1])\n   (dec n)))","user":"57f81534e4b0d3187e900915"},{"problem":97,"code":"(fn [numb]\n    (last (take numb (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"607e1cf9e4b03d835a6eaed9"},{"code":"(fn p [n]\n  (if (= n 1)\n      [1]\n      (flatten [1\n               (map #(apply + %) (partition 2 1 (p (dec n))))\n               1])))","problem":97,"user":"4f38b7d9e4b0e243712b1ee0"},{"code":"(fn [nth]\n  (let [func (fn gen[r c]\n      (if (or (= r 1) (= r c) (= c 1))\n        1\n       (+ (gen (dec r) c) (gen (dec r) (dec c)) ) ))] \n  (for [x (range 1 (inc nth))]\n  \t(func nth x) )))","problem":97,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn [n]\n  (let [fac (fn factorial\n            ([x] (factorial 1 x))\n            ([acc x]\n               (if (zero? x)\n                 acc\n                 (recur (* x acc) (dec x)))))\n        f (fn [x]\n            (/ (fac (- n 1)) (* (fac x) (fac (- (- n 1) x)))))]\n    (for [x (range n)]\n      (f x))))","problem":97,"user":"4ed8b598535d10e5ff6f52fc"},{"code":"(fn [x] (let [nums (range 1 x)] (reduce #(concat %1 [(* (last %1) %2)] ) [1] (map / (reverse nums)  nums))))","problem":97,"user":"52655949e4b03e8d9a4a710b"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (->> (partition 2 1 (pascal (dec n)))\n              (map #(apply + %))\n              (into [1])\n              (#(conj % 1)))))","user":"53ee7f2ee4b0d648e757f4cf"},{"code":"#(loop [n 1 result (vec [1])]\n            (if (identical? n %1 ) result\n            (recur (+ n 1)\n                (conj result (int(* (peek result) (/(-  %1  n) n))) )\n              ))\n            )","problem":97,"user":"4ea85846535d7eef308072f9"},{"problem":97,"code":"(fn [n] (nth ((fn [] (iterate #(concat [1] (map + % (rest %)) [1]) [1]))) (dec n)))","user":"54577fefe4b01be26fd7460d"},{"code":"#(loop [row [1]]\n  (if (= % (count row)) row\n    (recur (map + (cons 0 row) (reverse (cons 0 row))))))","problem":97,"user":"4ecf42b4535d1f5ad70dba3c"},{"code":"(fn [n]  \r\n  (let [pascal\r\n        (fn pascal [r c]\r\n        \t(if (or (= c 1) (= c r) ) 1\r\n        \t\t(+ (pascal (dec r) (dec c)) \r\n               (pascal (dec r) c))))]\r\n    (map #(pascal n %) (range 1 (inc n)))))","problem":97,"user":"4f3242bae4b0d6649770a08f"},{"problem":97,"code":"#(reduce (fn [acc _] (concat [1] (concat (map + acc (rest acc))) [1])) [1] (range (dec %)))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn f [n]\n  (condp = n\n     1 [1]\n     (vec (let [p (f (dec n))]\n         (concat \n           (map + p (concat [0] p)) [1])))))","problem":97,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":97,"code":"(fn fun [n]\n  (cond\n    (<= n 1) '(1)\n    :else  (concat [1] (map #(apply + %) (partition 2 1 (fun (dec n)))) [1])\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":97,"code":"(fn f ([v n] (if (= 1 n) v (f (mapv #(+ (nth v (dec %) 0) (nth v % 0)) (range (inc (count v)))) (dec n))))\n   ([n] (f [1] n)))","user":"4fe9de74e4b0547ebccb2475"},{"code":"#(loop [acc [1] i 1]\n  (if (= i %)\n    acc\n    (recur (map + (conj (vec acc) 0) (cons 0 acc)) (inc i))))","problem":97,"user":"4e521cef535d302ef430da6d"},{"problem":97,"code":"(fn [n]\n   (nth (iterate #(vec (concat '(1) (map + (rest %) (butlast %)) '(1))) [1]) (dec n))\n)","user":"5a984657e4b0d174b936c78a"},{"code":"(fn pascal [x] (loop [i 1 row [1]] (if (= i x) row (recur (+ i 1) ((fn nrow [row] (loop [acu [] tacu 0 row- row] (if (seq row-) (recur (conj acu (+ (first row-) tacu)) (first row-) (rest row-)) (conj acu 1)))) row)))))","problem":97,"user":"511a0374e4b06c8af011181a"},{"code":"(fn [x] (nth (iterate #(mapv + (cons 0 %) (conj % 0)) [1]) (dec x)))","problem":97,"user":"4db29f98535df7e46ed9b6c1"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [row (pascal (dec n))]\n      (mapv + (cons 0 row) (conj row 0)))))","user":"553dd883e4b0a04f792994e6"},{"problem":97,"code":"(fn [n]\n  (loop [x 1\n         row [1]]\n    (if (= x n) row\n      (let [nrow \n            (loop [in row\n                   out [1]]\n              (if (empty? (rest in)) \n                (conj out 1)\n                (recur (rest in) (conj out (+ (first in) (second in))))))]\n        (recur (inc x) nrow)))))","user":"594bd637e4b07ddc2dafae41"},{"problem":97,"code":"(fn [n]\n (loop [n n\n         result [1]]\n    (if (= n 1)\n      result\n      (if-let [adjacent-numbers (seq (partition 2 1 result))]\n        (recur (dec n)\n               (concat [1]\n                       (map #(reduce + %) adjacent-numbers)\n                       [1]))\n        ;else\n        (recur (dec n)\n               [1 1])))) \n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":97,"code":"(fn [row]\n  (let [upstairs (fn [n k] (reduce #(* %1 (- n %2)) n (range 1 k)))\n        downstairs (fn [k] (reduce #(* %1 (- k %2)) k (range 1 k)))\n        n-over-k (fn [n k] (/ (upstairs n k) (downstairs k)))]\n    (cond\n     (= 1 row) [1]\n     (= 2 row) [1 1]\n     :else (concat '(1) (map #(n-over-k (dec row) %) (range 1 (dec row))) '(1)))))","user":"571cd9dce4b0145328a76271"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"5e9771dee4b0157ca96647d0"},{"problem":97,"code":"(fn solution97\n  [n]\n  (if (= n 1)\n    [1]\n    (let [old (solution97 (dec n))]\n      (loop [i     1\n             ans   [1]]\n        (let [up    (get old i)\n              other (get old (dec i))]\n          (if (nil? up)\n            (conj ans 1)\n            (recur (inc i) (conj ans (+ up other)))))))))","user":"595bc925e4b066ee0a44afe2"},{"problem":97,"code":"(fn triangle-row [n]\n  (let [next-row (fn next-row [row]\n                   (vec (map +' (cons 0 row) (concat row '(0)))))]\n    (nth (iterate next-row [1]) (dec n))))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"#(loop [i 1 r [1]]\n    (if (< i %)\n      (recur\n       (inc i)\n       (vec\n        (for [j (range 0 (+ i 1))]\n          (if (or (= j 0) (= j i))\n            1\n            (+ (r j) (r (- j 1)))))))\n      r))","problem":97,"user":"50bce014e4b0594b91591c63"},{"problem":97,"code":"(fn pas-row\n  [row]\n  (letfn \n    [(factorial [n]\n        (reduce * (range 1 (inc n))))\n      (choose [n k]\n        (/ (factorial n) \n           (* (factorial k) (factorial (- n k)))))]\n    (map (partial choose (dec row)) (range 0 row))))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn p97 [n]\n  (let [ne (fn [pr] \n             (map #(+ (first %) (last %))\n              (for [x (range 0 (- (count pr) 1))] (subvec pr x (+ x 2)))))\n       next-layes (fn [pr]\n            (conj (vec (cons 1 (ne pr))) 1)\n            )\n               ]\n  (loop [cnt n res [1] prev []]\n    (if (= cnt 1)\n      res\n      (recur (dec cnt)\n             (next-layes res)\n             res)))\n    ))","problem":97,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn pascal [n]      ; Computes (fn n) by recursively computing (fn (dec n)),\n  (cond             ; adding 0 to both ends of that sequence, then adding\n   (= n 1)  [1]     ; each adjacent pair of numbers.\n   (= n 2)  [1 1]\n   :else     (let [seq1  (flatten [0 (pascal (dec n)) 0])]\n               (for [seq2 (partition 2 1 seq1)]\n                 (apply + seq2)))))","problem":97,"user":"4f80db02e4b033992c121bf9"},{"code":"(fn [n]\n(nth \n(iterate \n  #(map \n     (fn [[x y]] (+ x y))\n     (partition 2 1 (concat [0] % [0])))  \n  [1])\n (dec n)\n ))","problem":97,"user":"536b2048e4b0243289761eb7"},{"code":"(fn [x] (letfn [(cell [r c pv] \n  (* pv (/ (- r c) c)))]\n  (map #(second %) (take x (iterate #(list (inc (first %)) (cell x (first %) (second %))) '(1 1))))))","problem":97,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (flatten [1 (vec (map #(apply + %) (partition 2 1 (pascal-triangle (dec n))))) 1])))","problem":97,"user":"51197750e4b057cba170bc99"},{"code":"(fn m [n]\n  (last (take n\n              (iterate\n                (fn [prev-row]\n                  (->>\n                    (concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n                    (map (partial apply +))))\n                 [1]))))","problem":97,"user":"52828298e4b0757a1b17145b"},{"code":"(fn [n]\n  (nth (iterate #(concat [1] \n                         (map (partial apply +) \n                              (partition 2 1 %))\n                         [1]) \n                [1]) \n       (dec n)))","problem":97,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":97,"code":"(fn [r]\n(nth (iterate #(vec (map + (conj % 0) (cons 0 %)))[1])(dec r)))","user":"54975e99e4b0b312c081ff72"},{"problem":97,"code":"(fn q [n]\n    (if (= n 1)\n        [1]\n        (let [p (q (dec n))]\n            (loop [i 0 r [1]]\n                (if (= i (dec (count p)))\n                    (conj r 1)\n                    (recur (inc i) (conj r (+ (nth p i) (nth p (inc i))))))))))","user":"55975569e4b031d6649c9b8e"},{"problem":97,"code":"(fn pascals-row [n]\n  (letfn [(value-fn [row col]\n                   (if (or (= 1 col) (= row col))\n                     1\n                     (+ (value-fn (dec row) (dec col)) (value-fn (dec row) col))))]\n    (map (partial value-fn n) (range 1 (inc n)))))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [row] \n  (letfn [(fac [z] (if (< z 1) 1 (* z (fac (dec z)))))]\n    (map #(/ (fac  (- row 1)) (* (fac %) (fac (- (- row 1) %)))) \n      (range 0 row)\n    )\n))","problem":97,"user":"4fcf5292e4b03432b189f40e"},{"problem":97,"code":"(fn pascal-\n  [n] \n  (loop [line n res '(1)]\n    (if (= 1 line)\n      res\n      (recur \n        (dec line)\n        (concat '(1) (map + res (rest res)) '(1))))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(next-row [c]\n  (conj (last\n      (reduce (fn [[last acc] e]\n              [e (conj acc (+ last e))])\n            [0 []]\n           c)) 1))\n   ]\n  (loop [last [1] \n         i 1]\n    (if (= n i) last\n                (recur (next-row last) (inc i))))))","user":"57650419e4b0994c1922fc09"},{"problem":97,"code":"(fn [n]\n   (let [half (Math/ceil (/ n 2))\n         i (dec n)]\n     (loop [row [1]\n            k 1]\n       (if (>= k half)\n         (into row (reverse (if (odd? n) (drop-last row) row)))\n         (recur (conj row\n                      (* (peek row)\n                         (/ (- (inc i) k)\n                            k)))\n                (inc k))))))","user":"59ac0965e4b08cbb53654da6"},{"problem":97,"code":"(fn f [i]\n  (if (= i 1)\n      [1]\n  (vec (map \n    + \n    (cons 0 (f (dec i)))\n    (reverse (cons 0 (f (dec i)))) ))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":97,"code":"(fn [n]\n  (loop [row [1] nr 1]\n    (if (= nr n)\n      row\n      (recur\n       (concat [1] (into [] (map #(+ (first %) (last %)) (partition 2 1 row))) [1])\n       (inc nr)))))","user":"5b58d012e4b02d533a91bd71"},{"code":"(fn [n]\n  (letfn [(next-row [r]\n                    (concat  \n                      (conj \n                        (map #(+ %1 %2) r (rest r)) 1) \n                      [1]))\n          (pt [n r]\n              (if (== 1 n)\n                r\n                (recur (dec n) (next-row r)))\n              )]\n         (pt n [1]))\n  )","problem":97,"user":"4dca8b6d535d5973398f9288"},{"problem":97,"code":"(fn pascal-tri [n] \n  (condp = n \n    1 [1] \n    (let [last (pascal-tri (dec n)) \n          last-a (concat [0] last) \n          last-b (concat last [0]) \n          ] \n      (vec(map + last-a last-b))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn [n] (last (take n (iterate #(map + `(0 ~@%) `(~@% 0)) '(1)))))","problem":97,"user":"538e864ee4b0b51d73faae87"},{"code":"(fn [n]\n  (loop [ret '(1) c 1]\n    (if\n      (= c n) ret\n        (let [v (/ (* (first ret) (- n c)) c)]\n          (recur (conj ret v) (inc c))))))","problem":97,"user":"4f050dec535dcb61093f6bef"},{"problem":97,"code":"; stolen elegan solution (fn pascal [i]\t(nth (iterate #(mapv + (conj % 0) (cons 0 %)) [1]) (dec i)))\n(fn pascal[n]\n   (case n\n     1 [1]\n     2 [1 1]\n     (let [latest (pascal (dec n))]\n       (into [] (concat [1]\n                        (for [x (range (- n 2))]\n                          (+ (latest x) (latest (inc x)))\n                          )\n                        [1]))\n       )))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn pt [n]\n    (if (= n 1)\n      [1]\n      (let [t (pt (dec n))]\n        (vec (map + (conj t 0) (cons 0 t))))))","problem":97,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [n]\n  (last (take n (iterate\n                 (fn [p]\n                   (map + (cons 0 p) (concat p [0])))\n                 [1]))))","problem":97,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn pascal-triangle-row [n]\n  (if (= 1 n)\n      [1]\n      (let [p (pascal-triangle-row (dec n))]\n        `(1 ~@(map + p (rest p)) 1))))","problem":97,"user":"506a1985e4b01dc6af13f83e"},{"problem":97,"code":"#(nth (iterate (fn [r] (map + `(0 ~@r) `(~@r 0)))\n               [1])\n       (dec %))","user":"50377d53e4b0af0658af77ad"},{"problem":97,"code":"(fn [n] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (- n 1)))","user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn [n] (nth(iterate (fn [sq] (vec (map + (cons 0 sq) (conj sq 0)))) [1])  (dec n)))","problem":97,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":97,"code":"(fn [tier]\n  (nth\n   (iterate\n    (fn [v] (concat [1]\n                    (map\n                     (fn [p] (reduce + p))\n                     (partition 2 1 v))\n                    [1]))\n    [1])\n   (dec tier)))","user":"56481722e4b0284900eef628"},{"problem":97,"code":"(fn pascal-row [n] (letfn\n                     [(fact [n acc] (if (= n 0)\n                                      acc\n                                      (recur (dec n) (* n acc))))\n                      (choose [n k] (/ (fact n 1) (fact k 1) (fact (- n k) 1)))]\n                     (map #(choose (- n 1) %) (range n))))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn pascal-row[n]((fn row-compute[r](if (>= (count r) n)\n                                        r\n                                        (row-compute (conj r (-> r last (* (- n (count r))) (/ (count r)))))\n                                        )) [1]))","problem":97,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn pascal [n]\n  (loop [r 1 an [1]]\n\t   (if (= r n)\n\t       an\n\t       (recur (inc r) \n\t\t      (loop [c 2 an2 [1] [x y & more] an]\n\t\t\t (if (nil? y)\n\t\t\t     (conj an2 1)\n\t\t\t     (recur (inc c) (conj an2 (+ x y)) (cons y more))))))))","problem":97,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn \n\t[s]\n\t(cond\n\t\t(= s 1) '[1]\n\t\t:else (loop [n s f '[1 1]]\n\t\t\t(if (= n 2)\n\t\t\t\tf\n\t\t\t\t(recur (dec n) (concat '[1] (map (partial apply +) (partition 2 1 f)) '[1]))))))","problem":97,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn pas [n] \n   (cond (= n 1) [1] \n         (= n 2) [1 1]\n         :else (concat [1] \n                   (map #(+ (first %) (second %)) \n\n           ((fn part [x y]\n   (cond (= (count y) 0) nil \n   :else (concat x (part [[(first y) (second y)]] (rest y)))\n   )   \n) [] (pas (dec n))))\n                   [1] \n           )   \n   )   \n)","problem":97,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (loop [acc [1 1]]\n      (if (>= (count acc) n)\n        acc\n        ;; (recur (into [] (flatten (conj [1] (map (partial reduce +) (partition 2 1 acc)) 1))))))))\n        (recur (->> acc\n                    (partition 2 1)\n                    (map (partial reduce +))\n                    (#(conj [1] % 1))\n                    flatten\n                    (into [])))))))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn my-triangle [x]\n    (let [next-row (fn [row]\n       \t       (loop [acc (list 1)\n\t\t              to-process row]\n\t    (if (= 1 (count to-process))\n\t    \t(reverse (conj acc 1))\n\t\t(recur (conj acc (+ (first to-process) (second to-process))) (rest to-process)))))]\n\t\t       (condp = x\n\t\t\t1 (vector 1)\n\t     \t\t2 (vector 1 1)\n\t\t\t  (next-row (my-triangle (dec x))))))","problem":97,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)]\n    (letfn [(choose [n k]\n              (int\n               (reduce\n                (fn [acc i] (* acc (/ (+ n (- 1 i)) i)))\n                1\n                (range 1 (inc k)))))]\n      (map (partial choose n) (range (inc n))))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn pascal[n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first \n                     (reduce (fn[[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascal(dec n)))) \n                    1)))","problem":97,"user":"4f05ea25535dcb61093f6c02"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (< n 1) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (cons 1\n               (concat\n                (map #(reduce + %) (partition 2 1 (pascal (dec n))))\n                [1]))))","user":"5cd639b4e4b0ccb061962940"},{"problem":97,"code":"(fn [n]\n  (let [f (fn [x]\n            (loop [n x f 1]\n              (if (< n 1)\n                f\n                (recur (dec n) (* f n)))))]\n    (map #(quot (f (dec n)) (* (f %) (f (dec (- n %)))))\n         (range 0 n))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":97,"code":"(fn p[n]\n  (if (= n 1)\n      [1] \n      (let [r (p (dec n))]\n        (flatten \n          (cons 1 \n            (cons\n              ((fn f[q]\n                (if (= 1 (count q))\n                    []\n                    (cons (+ (first q) (second q)) (f (rest q)))))\n               r) \n              [1]))))))","user":"59e8bb43e4b0249b72820735"},{"problem":97,"code":"#(loop [x [1] y 1]\n   (if (= y %)\n     x\n     (recur (vec (map + (conj x 0) (cons 0 x))) (inc y))))","user":"570362ece4b08d47c97781f0"},{"code":"#(let \n   [middle-seq (fn [previous] \n        (loop [p previous res []]\n          (if(< (count p) 2) res\n          (recur (next p) (concat res [(+ (first p) (second p))])))))]\n   (loop [x % current []]\n     (cond \n        (= x (count current)) current\n        (= (count current) 0) (recur x [1])\n        (= (count current) 1) (recur x [1 1])\n        true (recur x \n          (apply vector (concat [1] (middle-seq current) [1]))))))","problem":97,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal [] n))\n  ([v n]\n   (if (zero? n)\n     v\n     (pascal (conj (first\n                    (reduce (fn [[out l] a]\n                              (vector (conj out (+ l a)) a)) [[] 0] v)) 1) (dec n)))))","user":"54e6762be4b024c67c0cf809"},{"code":"(fn [n]\n  (nth (iterate #(mapv +' (cons 0 %) (concat % [0])) [1]) (- n 1)))","problem":97,"user":"5046ee3ee4b03b02161376b4"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev (pascal (dec n))]\n            (concat [1]\n                    (loop [i 1 acc []]\n                      (if (= i (dec n))\n                        acc\n                        (recur (inc i) (conj acc (+ (nth prev (dec i)) (nth prev i))))\n                        ))\n                    [1]))))","user":"5dfe3928e4b0a607a9a45d04"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [\n          (get-value [xs i]\n            (cond\n              (zero? i) (xs i)\n              (= (inc i) n) (xs (dec i))\n              :else (+ (xs (dec i)) (xs i))))]\n    \n    (if (= n 1) \n      [1]\n      (let [xs (pascal (dec n))]\n        (reduce \n          (fn [acc i] (conj acc (get-value xs i))) \n          [] (range n))))))","user":"57d9bca1e4b0bd073c202405"},{"problem":97,"code":"(partial nth (iterate\n              #(into [1] (map + % (rest (conj % 0))))\n              []))","user":"55dab408e4b0e31453f64ad9"},{"code":"(fn pascal [n]\n  (letfn [(inc-row [row]\n                   (if (> (count row) 1)\n                     (cons (+ (first row) (second row)) (inc-row (rest row)))\n                     row\n                     )\n                   )]\n    (if (= n 1)\n      [1]\n      (let [prev (pascal (dec n))]\n        (cons 1 (inc-row prev))\n        )\n      )\n    )\n  )","problem":97,"user":"52e59ca5e4b09f7907dd1464"},{"problem":97,"code":"(fn [n]\n  (let [row-i+1 (fn [row-i]\n                (loop [r-i+1 [] r-i row-i]\n                  (if (< (count r-i) 2)\n                    (into [] (concat [1] r-i+1 [1]))\n                    (recur (conj r-i+1 (+ (first r-i) (second r-i))) (rest r-i)))))]\n    (loop [i 1 r-i [1]]\n      (if (>= i n)\n        r-i\n        (recur (inc i) (row-i+1 r-i))))))","user":"57f80350e4b0d3187e90090c"},{"problem":97,"code":"(fn ptri [n]\n   (if (<= n 1)\n     [1]\n     (let [last-row (ptri (dec n))]\n       (map + (concat last-row [0]) (concat [0] last-row)))))","user":"5609866ee4b0053d1b86c7e3"},{"code":"(fn [r] \n  (nth \n   (iterate #(map +\n                  (concat [0] %)\n                  (concat % [0]))\n            [1])\n   (dec r)))","problem":97,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":97,"code":"(let\n  [lookup (fn [s i] (if (or (< i 0) (not (< i (count s)))) 0 (nth s i)))]\n  (let\n    [nextrow (fn [row] (map #(+ (lookup row (dec %)) (lookup row %)) (-> row count inc range)))]\n    (fn row [i] (if (= i 1) [1] (-> i dec row nextrow)))))","user":"5b465b8be4b02d533a91bc65"},{"problem":97,"code":"(fn [n]\n  (let [\n    ! #(apply * (range 1 (inc %1)))\n    C #(/ (! %1) (* (! %2) (! (- %1 %2))))]\n    (map (partial C (dec n)) (range 0 n))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [current]\n      (conj (reduce #(conj %1 (apply + %2)) [1] (partition 2 1 current)) 1))\n    [1])\n  (dec n)))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":97,"code":"(fn xfila[f](last (loop[coll (loop[ret []\n                                     cont 0\n                                     prr 1\n                                     ef 1]\n                                  (cond\n                                     (= f (- ef 1)) ret\n                                     :else (recur (cond\n                                                    (= f 1) [1]\n                                                    (= f 2) [1 1 1]\n                                                    (= prr 1) (conj ret 1)\n                                                    (= prr ef) (conj ret 1)\n                                                    :else (conj ret (+ (get ret (- cont ef))\n                                                                       (get ret (- cont (- ef 1))))))\n                                                  (inc cont)\n                                                  (cond\n                                                    (= prr ef) 1\n                                                    :else (inc prr))\n                                                  (cond\n                                                    (= prr ef) (inc ef)\n                                                    :else ef))))\n                          ret []\n                          v 1]\n                       (cond\n                         (empty? coll)ret\n                         :else (recur (vec(drop v coll))\n                                      (conj ret (vec(take v coll)))\n                                      (inc v))))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":97,"code":"(fn [x]\n  (loop [i x\n         r [1]]\n\t(if (<= i 1)\n      r\n      (recur (dec i) (conj (into [] (cons 1 (map #(+ (first %) (second %)) (partition 2 (butlast (rest (apply concat (map (partial repeat 2) r)))))))) 1)\n        )\n      )\n    ))","user":"590253e3e4b0438e51c2d055"},{"code":"#(loop [i % p [1]]\n(if (= 1 i)\n  p\n  (recur (- i 1) (map + (conj p 0) (into () (conj p 0))))\n))","problem":97,"user":"4e43b0d9535dc968683fc4a3"},{"problem":97,"code":"(fn pascal [level]\n  (cond \n    (= 1 level) [1]\n    (= 2 level) [1 1]\n    :else \n    (conj (vec (cons 1 (map #(apply + %) (partition 2 1 (pascal (dec level)))))) 1)\n   )\n  )","user":"54fe57f6e4b07d26eda61d42"},{"code":"(fn [rownum]\n  (if (= rownum 1) [1]\n    (loop [row []]\n      (if \n        (= (count row) rownum) \n        row\n        (recur (concat [1] (map + row (rest row)) [1]))))))","problem":97,"user":"521e8227e4b0dd19981ad082"},{"problem":97,"code":"(fn [n]\n   (loop [i 1 pascal '(1)]\n     (if (= i n)\n       pascal\n       (recur (inc i) (let [newc (map #(+ %1 %2) pascal (rest pascal))]\n                        (conj (into [] (merge newc 1)) 1))))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn [x]\n  (let [x (dec x)]\n  (letfn [(fact [y] (loop [prod 1 in y] (if (zero? in) prod (recur (* prod in) (dec in)))))]\n    (loop [row [] k x]\n      (if (= -1 k)\n        row\n        (recur (conj row (/ (fact x) (* (fact k) (fact (- x k)))))\n               (dec k)))))))","problem":97,"user":"4faec810e4b081705acca24e"},{"problem":97,"code":"(fn [n]\n  (nth (iterate\n         #(drop-last (map (partial reduce +)\n                          (partition-all 2 1 (concat [0] % [0]))))\n         '(1)) (dec n)))","user":"58fc52cee4b0438e51c2cf95"},{"code":"(fn pascal [l] (last (take l (iterate #(cons 1 (conj (mapv (partial apply +) (partition 2 1 %)) 1)) [1]))))","problem":97,"user":"505345d9e4b0517ede0d0a06"},{"problem":97,"code":"(fn [n] \n  (nth \n       (iterate (fn [x] (concat [1] (map + x (next x)) [1]))\n                [1])\n   (dec n) ))","user":"55be39f9e4b01b9910ae2a06"},{"problem":97,"code":"(fn [row] (into [] (for [x (range row)] \n            ((fn [x y] (/ \n           (#(reduce *' (range 1 (inc %1))) x)\n           (*\n            (#(reduce *' (range 1 (inc %1))) y)\n            (#(reduce *' (range 1 (inc %1))) (- x y))\n            )\n           \n           )) (dec row) x)\n            )))","user":"5ff4e28ae4b06df49cee1486"},{"problem":97,"code":"(fn [n]\n    (nth \n      (iterate \n        #(map (fn [[x y]] (+ y x)) (partition 2 1 (concat [0] % [0]))) \n        [1]) \n      (dec n)))","user":"538ca203e4b0b51d73faae5f"},{"problem":97,"code":"(fn pascal [n]\n  (nth\n   (iterate\n    (fn [xs]\n      (concat \n       '(1) \n       (map #(+ %1 %2) xs (rest xs)) \n       '(1)))\n    '(1))\n   (dec n)))","user":"53c126fce4b00fb29b22125b"},{"problem":97,"code":"(fn [x] \n  (letfn [(binom [n k]\n                 (if \n                     (or (zero? k) (= n k)) 1\n                     (+ (binom (dec n) (dec k)) (binom (dec n) k))))]\n         (mapv (partial binom (dec x)) (range x))))","user":"5405ae2be4b0addc1aec6671"},{"problem":97,"code":"(fn pascaltri\n  [row]\n  (letfn [(fac [n] (reduce * (range 1 (inc n)))),\n          (comb [n k] (/ (fac n) (fac k) (fac (- n k))))]\n    (map #(comb (dec row) %) (range row))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":97,"code":"(fn [rows]\n  (loop [row 1 result []]\n   (if (> row rows) result \n    (cond\n      (= rows 1) [1]\n      (= rows 2) [1 1]\n      :else (recur (+ row 1) \n                   (into [] (flatten [1 (for [elem (range 1 (- row 1))] (+ (get result elem) (get result (- elem 1)))) 1])))\n     ))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"(fn pt [n]\n  (let [x (- n 1)]\n  (map #(/\n         (reduce * (range 1 (+ 1 x)))\n         (* (reduce * (range 1 (+ 1 %)))\n            (reduce * (range 1 (- (+ 1 x) %))))) (range 0 (+ 1 x)))))","problem":97,"user":"51eab308e4b0f1f103a0d150"},{"code":"(fn [x]\n(loop [n x p [1]]\n           (if (= 1 n) p\n               (recur\n                (- n 1) \n                (concat\n                 [1]\n                 (map #(apply + %) (partition 2 1 p))\n                 [1])))))","problem":97,"user":"4db8f6c4535d1e037afb219e"},{"problem":97,"code":"(fn ans-97 [n]\n  (if (= n 1)\n    [1]\n    (let [lastLine (ans-97 (- n 1))]\n      (cons\n       1\n       (map-indexed\n        (fn [index item]\n          (if (< index (- (count lastLine) 1))\n            (+' item (nth lastLine (+ 1 index)))\n            1))\n        lastLine)))))","user":"608fac60e4b03bd49d9f36c7"},{"problem":97,"code":"(fn pascal\n  ([] (iterate #(apply vector (concat [1] (map + % (rest %)) [1])) [1]))\n  ([n] (nth (pascal) (- n 1))))","user":"5b857411e4b047b03b2037ce"},{"code":"(fn [row]\n  (loop [row row\n         list [1]]\n    (if (= row 1) \n      list \n      (recur (dec row) (map + (cons 0 list) (concat list [0]))))))","problem":97,"user":"52c7786ce4b0c2d177d62124"},{"code":"(fn pascal-line [n]\n  (let [p (fn pascal [i j]\n            (if (or\n                 (= j 1)\n                 (= i j))\n              1\n              (+ (pascal (- i 1) (- j 1))\n                 (pascal (- i 1) j))))]\n    (map (partial p n) (range 1 (+ n 1)))))","problem":97,"user":"53388e2de4b0e30313ee6c9c"},{"code":"(fn p [n] (if (= 1 n) [1] (let [r (p (dec n))] (map + (cons 0 r) (concat r [0])))))","problem":97,"user":"52b453b0e4b0c58976d9ad21"},{"code":"#(letfn [(f [n] (loop [r 1 c 1]\n                  (if (> c n)\n                    r\n                    (recur (* r c) (inc c)))))\n         (c [n k] (/ (f n) (* (f k) (f (- n k)))))]\n  (for [i (range %)]\n    (c (dec %) i)))","problem":97,"user":"4e49badd535dc968683fc4c9"},{"code":"(let [fact #(apply * (range 2 (inc %)))\r\nbin (fn [n k] (/ (fact n)\r\n(* (fact k) (fact (- n k)))))]\r\n\r\n#(map bin (repeat (dec %)) (range %)))","problem":97,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn pasc [n]\r\n  (if (= 1 n)\r\n    [1]\r\n    (let[p (conj (pasc (dec n)) 0)]\r\n      (apply vector (map + (cons 0 p) p)))))","problem":97,"user":"509c03f3e4b085ae113522a8"},{"problem":97,"code":"(fn [i]\n  (letfn [(next-row [row]\n            (if (seq row)\n                (concat '(1) (map #(apply + %) (partition 2 1 row)) '(1))\n                '(1)\n            ))]\n    (loop [counter i previous-row []]\n      (if (zero? counter)\n        previous-row\n        (recur (dec counter)\n          (next-row previous-row))\n      )\n    )\n  )\n)","user":"554707bae4b0a04f79299544"},{"code":"(fn [n]\n  (letfn [(r [xs]\n            (cond (empty? xs) [1]\n                  (= xs [1]) [1 1]\n                  :else (vec (concat [1] (map + (drop-last xs) (drop 1 xs)) [1]))))]\n    (nth (iterate r []) n)))","problem":97,"user":"4ed286d4535d44c135fd68d7"},{"code":"(fn [m]\r\n  (letfn [(fact [n] (reduce * (range 1 (inc n))))\r\n    (binom [m n] (/ (fact m) (* (fact n) (fact (- m n)))))]\r\n    (for [n (range 1 (inc m))] (binom (dec m) (dec n)))))","problem":97,"user":"4dc1ee85535d020aff1edf91"},{"problem":97,"code":"(fn f [n]\n  (case n\n    1 [1]\n    (let [p (f (- n 1))]\n      (flatten [1 (map (partial apply +) (partition 2 1 p)) 1]) )))","user":"519e70d5e4b0acf32bc6a42c"},{"problem":97,"code":"(fn ptriangle [n]\n  (loop [prev [1] idx (dec n)]\n    (if (zero? idx)\n      prev\n      (recur (vec (concat [1]\n                          (reduce (fn [acc el]\n                                    (conj acc (+ (get prev el) (get prev (inc el)))))\n                                  []\n                                  (range (dec (count prev))))\n                          [1]))\n             (dec idx)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [row] \n  (vec \n    (letfn \n       [(partial-factorial [from to] \n           (reduce * \n             (range from (inc to)))) \n        (factorial [n] \n           (partial-factorial 1 n)) \n        (binomial-coefficient [n r] \n           (/ (partial-factorial (- n (dec r)) n) \n              (factorial r)))] \n      (map (partial binomial-coefficient (dec row)) \n           (range 0 row)))))","problem":97,"user":"5014754de4b094324338f8e5"},{"code":"(fn [index]\n   (loop [col [] current 1]\n     (if (>  index current)\n       (let [\n             value (reduce (fn [container it]\n                             (let [index (count container)\n                                   previous (nth col (dec index))\n                                   actual (nth col index 1)\n                                   ] (conj container (+ previous actual)))\n                             ) [1] col)]\n         (recur value (inc current)))\n\n       (conj  col 1)\n       ))\n   )","problem":97,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":97,"code":"(fn [i] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec i)))","user":"53e19461e4b0d874e779ae59"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal (dec n))\n          l (concat [0] last)\n          r (concat last [0])]\n      (-> (map + l r) vec))))","user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [n]\n (let [do-part  (partial partition 2 1)\n        inner    (fn [r]\n                   (map #(apply + %) (map #(vec %) (do-part r))))\n        next-row (fn [r]\n                   (if (empty? r)\n                     (list 1)\n                     (concat [1] (inner r) [1])))]\n    (nth (iterate next-row []) n)\n  ))","problem":97,"user":"4fccb31be4b0ee37620e1868"},{"code":"#(let [pasc-seq (fn pascal [s] \n                  (cons s \n                        (lazy-seq\n                         (pascal (map + \n                                      (conj s 0)\n                                      (reverse (conj s 0)))))))]\n   (nth (pasc-seq [1]) (dec %)))","problem":97,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":97,"code":"(fn [x]\n  (nth\n    (iterate\n      (fn f [v]\n        (into [] (concat [1] (map + (butlast v) (rest v)) [1]))) \n      [1])\n   (- x 1)))","user":"56327168e4b0bfe05bf117a5"},{"code":"(fn f [x] (if (= x 1) (vector x) (map (fn [y] (+ (first y) (second y))) (partition 2 (cons 0 (reverse (cons 0 (interleave (f (- x 1)) (f (- x 1))))))))))","problem":97,"user":"5296008fe4b02ebb4ef7502a"},{"code":"(fn [n]\n  (nth (iterate (fn [t] (map (fn [[a b]] (+ a b)) (partition 2 1 (concat [0] t [0]))))\n                [1])\n       (dec n)))","problem":97,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":97,"code":"(fn [a](nth (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1]) (dec a)))","user":"54aa665fe4b09f271ff37cb8"},{"problem":97,"code":"#_(fn pascal [rownum]\n  (nth\n   (iterate #(concat [1] (map +' % (rest %)) [1]) [1])\n   (dec rownum)))\n\n\n(fn [rownum]\n   (nth\n    (iterate\n     (fn [row]\n       (concat [1] (map #(apply +' %) (partition 2 1 row)) [1])) [1])\n    (dec rownum)))","user":"5564c113e4b0c656e3ff180d"},{"code":"(fn pascal [n]\n\t  (cond (= 1 n) [1]\n\t\t:else (let [recursive (pascal (- n 1))]\n\t\t\t   (map #(apply + %) (map vector (concat [0] recursive) (concat recursive [0]))))))","problem":97,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":97,"code":"(fn [n] (nth (iterate #(mapv (partial apply +) (partition-all 2 1 (cons 0 % ))) [1]) (dec n)))","user":"58e7229fe4b056aecfd47cc4"},{"problem":97,"code":"(fn [n] (loop [s [1] i n] (if (= i 1) s (recur (map + (concat s [0]) (concat [0] s)) (dec i)))))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (map + (concat (pascal (dec n)) [0])\n           (concat [0] (pascal (dec n))))))","problem":97,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [x] (concat [1] (map #(apply + %) (partition 2 1 x)) [1])) [1]) (dec n)))","user":"550b502ae4b06e50f9beb13f"},{"code":"(fn pascal [n]\n  (let [next-row (fn [row]\n                   (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))]\n    (last\n     (take n (iterate next-row [1])))))","problem":97,"user":"4daf8f84edd6309eace4d17a"},{"code":"(fn pascal3 [n]\n  (nth ((fn pascal [coll]\n                (concat [coll] (lazy-seq (pascal (concat [(first coll)] (map (partial apply +') (partition 2 1 coll)) [(last coll)]))))\n                ) [1]) (dec n))\n  )","problem":97,"user":"53307da1e4b019098a6f8b5e"},{"problem":97,"code":"(fn pt [n]\n  (let [partitionp (fn [s] \n                    (loop [xs s acc []]\n                      (if (> 2 (count xs))\n                        acc\n                        (recur (drop 1 xs) (conj acc (take 2 xs))))))]\n                              \n    (if (= 1 n)\n      [1]\n      (into [] (concat [1] \n                (map (partial reduce +) (filter #(= 2 (count %)) (partitionp (pt (dec n))))) \n                [1])))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"5a99b848e4b0d174b936c7ac"},{"code":"(fn f [n]\n  (if (= n 1) [1]\n    (let [last (f (dec n))]\n      (conj (vec (cons 1 (for [i (range (count last)) :when (> i 0)]\n                           (+ (last (dec i)) (last i))))) 1))))","problem":97,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn past [n]\n  ;use let to define some functions, just for readability and comprehensibility\n  (let [adder ; returns the sum of two elements in a vector\n         (fn [[f s]] (+ f s)) \n        builder ; creates a new row based on adding each pair of the previous one\n         (fn [row]\n           (vec\n             (concat\n               [1]\n               (map adder (partition 2 1 row)) ; adds elements e1+e2, e2+e3, ...\n               [1]\n           )))\n        ]\n    ;do the actual work\n    (nth\n      (iterate builder [1])\n      (dec n)\n    )\n  )\n)","problem":97,"user":"518e6966e4b051adb72789ec"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n            (flatten\n             (vector 1\n                     (map\n                      #(reduce + %)\n                      (partition 2 1 row))\n                     1)))]\n  (nth (iterate next-row [1]) (dec n))))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn p [m]\n  (if (= m 1)\n    [1]\n    (let [r (p (dec m))]\n      (map + (concat [0] r) (concat r [0])))))","problem":97,"user":"51780bfce4b0f89a8f53839c"},{"code":"(fn pasc [n]\n  (if (== 1 n)\n    [1]\n    (let [coll (pasc (dec n))]\n      (vec (map + (concat [0] coll) (concat coll [0]))))))","problem":97,"user":"5131d817e4b06942423563ca"},{"problem":97,"code":"#(nth (iterate (fn [x] (concat [1] (map (partial reduce +) (partition 2 1 x)) [1])) [1]) (dec %))","user":"54f4adc8e4b0f2f3c5226e86"},{"code":"(fn [rnum]\n  (loop [c (dec rnum) row [1]]\n    (if (zero? c)\n      row\n      (recur\n        (dec c)\n        (map #(+ %1 %2) (concat '(0) row) (concat row '(0)))))))","problem":97,"user":"510b704ee4b078ea71921100"},{"problem":97,"code":"(fn [level]\n  (let [new-row (fn [prev-row]\n                  (conj\n                    (vec\n                      (cons 1 (map\n                                #(apply + %)\n                                (partition 2 1 prev-row))))\n                    1))]\n    (loop [ctr 1 acc [1]]\n      (if (= ctr level)\n        acc\n        (recur (inc ctr) (new-row acc))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn [n]\n  (nth\n    (iterate\n      #(concat [1] (map (partial apply +) (partition 2 1 %)) [1])\n      '(1))\n    (dec n)))","problem":97,"user":"4e4ad154535dc968683fc4d1"},{"code":"(fn pt ([r]\n           (cond\n            (= 1 r) [1]\n            (= 2 r) [1 1]\n            :else (concat [1] (map + (pt (dec r)) (rest (pt (dec r)))) [1]))))","problem":97,"user":"4ee868be535d93acb0a6687d"},{"problem":97,"code":"(fn [m] \n    (map\n      (partial \n        (fn [n k]\n          (letfn [(fact [j] \n                    (reduce * (map inc (range j))))] \n             (/ (fact n) (* (fact (- n k)) (fact k))))) \n        (dec m))\n      (range m)))","user":"515cf9b5e4b00901442db1d4"},{"code":"(fn pr97 [n]\n\t(nth (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1])\n\t     (dec n)))","problem":97,"user":"5142ea50e4b0c172af7558ca"},{"problem":97,"code":"(fn pscl [j] \n  (let [comb (fn comb [n i]\n               (unchecked-divide-int \n                 (reduce * (range 1 (inc n))) \n                 (* (reduce * (range 1 (inc i))) (reduce * (range 1 (inc (- n i)))) )))]\n        (map #(comb (dec j) %) (range j))))","user":"56278266e4b00e49c7cb47d3"},{"code":"(fn pascalstriangle [n]\n              (if (== n 1)\n                [1]\n                (loop [result [] init  (cons 0 (conj (pascalstriangle (- n 1)) 0))]\n                  (if (not (empty? (rest init)))\n                    (recur (conj result (+ (first init) (first (rest init)))) (rest init))\n                    result))))","problem":97,"user":"532727bae4b09d4e7a9b54fa"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)]\n    (map #((fn asdf [n k]\n  (if (or (= k 0) (= k n) (and (zero? n) (zero? k)))\n    1\n    (+ (asdf (dec n) (dec k))\n       (asdf (dec n) k))))\n n %) (range (inc n)))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":97,"code":"(fn pascal-tri [n]\n  (let [fact (fn [n] (reduce * (range 1 (+ n 1))))\n        bin-coeff (fn [n k] \n                    (cond \n                      (or (= k 0) (= k n)) 1\n                      (or (= k 1) (= k (- n 1))) n\n                      :else (quot (fact n) (* (fact k) (fact (- n k))))))]\n  (map (fn [k] (bin-coeff (- n 1) k)) (range 0 n))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn pascals-triangle [n]\n    (if (= n 1)\n      [1]\n      (cons 1 (conj (vec (for [[x y] (partition 2 1 (pascals-triangle (dec n)))] (+ x y))) 1))))","problem":97,"user":"4dc29a1d535d020aff1edf96"},{"problem":97,"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (loop [fractions (mapv #(/ %1 %2) (reverse (range 1 n)) (range 1 n))\n    \t   results   [1]]\n      (if (seq fractions)\n        (recur (rest fractions) \n               (conj results (* (last results) (first fractions))))\n        results))))","user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn [n]\n(let [pascal\n  (fn [s]\n  (conj (vec (cons 1 (map + s (rest s))))  1))]\n    (loop [n n r [1]]\n      (if (= 1 n) r (recur (dec n) (pascal r))))))","problem":97,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":97,"code":"(fn\n  [row-num]\n  (loop [times row-num\n         final []]\n    (if (> times 0)\n      (recur (dec times)\n             (#(cons 1 ((fn build-next-row\n                          [prev-row]\n                          (cond\n                            (= (count prev-row) 0) []\n                            (= (count prev-row) 1) [1]\n                            (= (count prev-row) 2) (vector (reduce + prev-row) 1)\n                            :else (cons (+ (first prev-row) (second prev-row)) (build-next-row (rest prev-row))))) final))))\n      final)))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":97,"code":"(fn [n]\n  (loop [count n\n         res [1]]\n    (if (= count 1)\n      res\n      (recur (dec count)\n             ((fn [a]\n                (loop [numbers a\n                       n1 (first numbers)\n                       n2 (second numbers)\n                       result [1]]\n                  (if (or (nil? numbers) (nil? n2) (nil? n1))\n                    (conj result 1)\n                    (recur\n                     (rest numbers)\n                     (first (rest numbers))\n                     (second (rest numbers))\n                     (conj result (+ n1 n2)))))) res)))))","user":"609e9b64e4b00e9e6653c426"},{"problem":97,"code":"(fn pascal\n  [n]\n  (loop [n (dec n)\n         curr 0                                                                                                               \n         result [1]]\n    (if (= curr n)\n      result\n      (recur n (inc curr) (conj result (/ (* (last result) (- n curr)) (inc curr)))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":97,"code":"(fn x [n] \n  (if (= n 1) (vector 1) \n    (map + \n         (concat '(0) (x (dec n)))\n         (concat (x (dec n)) '(0)) \n    )     \n    \n    )\n  )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":97,"code":"#_(fn\n  [n]\n  (loop [pt [1]\n         r 1]\n    (if (= r n)\n      pt\n      (recur (as-> pt $\n                   (partition 2 1 $)\n                   (map #(apply + %) $)\n                   (into [] [1 $ 1])\n                   (flatten $)\n                   (into [] $))\n             (inc r)))))\n\n(fn\n  [n]\n  (loop [pt [1]\n         r 1]\n    (if (= r n)\n      pt\n      (recur (into [] (flatten (into [] [1 (map #(apply + %) (partition 2 1 pt)) 1])))\n             (inc r)))))","user":"529735cbe4b02ebb4ef7503c"},{"problem":97,"code":"(fn [depth]\n    (if (= 0 depth)\n      []\n      (loop [prevLine []\n             i 1]\n        (let [line (let [length (count prevLine)]\n                      (if (= 0 length)\n                        [1]\n                        (loop [i 1\n                               row [1]]\n                          (let [previous (get prevLine (dec i))\n                                current (if (nil? (get prevLine i))\n                                          0\n                                          (get prevLine i))\n                                nextValue (+ previous current)]\n                            (if (= i length)\n                              (conj row 1)\n                              (recur \n                                (inc i)\n                                (conj row nextValue)))))))]\n          (if (= i depth)\n            line\n            (recur \n              line\n              (inc i)))))))","user":"57974188e4b039eba2ecb0f4"},{"problem":97,"code":"(fn pascal_row [n]\n  (map (partial (fn pascal [row col]\n    (cond \n      (= col 0) 1\n      (= row 1) col\n      :else (/ (* row (pascal (- row 1) (- col 1))) col))) (- n 1)) (range 0 n)))","user":"5c8cfff8e4b048ec896c5996"},{"code":"(fn pas [n] \n  (nth \n   ((fn pas-seq [row] \n      (cons row \n            (lazy-seq \n             (pas-seq \n              (vec \n               (concat [1] \n                       (map (partial apply +) (partition 2 1 row))\n                       [1]))))))\n      [1])\n    (dec n)))","problem":97,"user":"523b4e91e4b07becd5be21ef"},{"problem":97,"code":"(fn [n]\n  (let [helper (fn [row]\n                 (into [] (concat [1] (map (fn[[a b]] (+ a b)) (partition 2 1 row )) [1])))]\n    (loop [count 1\n           row [1]]\n      (if (= n count)\n        row\n        (recur (inc count) (helper row)))\n      )))","user":"56f4cedce4b046a417f92063"},{"code":"(fn trngl [n]\n  (nth\n    (iterate \n      #(map +\n        (concat [0] %)\n        (concat % [0])) \n      [1])\n    (dec n)))\n\n;;(fn trngl [n] \n;;  (if (= n 1) \n;;    [1]\n;;    (let [prv (trngl (dec n))]\n;;      (vec\n;;        (map +\n;;          (cons 0 prv)\n;;          (conj prv 0))))))","problem":97,"user":"4ec18451535dfed6da9c6db0"},{"code":"(fn pascal [row]\n  (letfn [(fact [x] \n            (apply * (range 1 (inc x))))\n          (n-c-k [n k]\n            (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(n-c-k (dec row) %) (range row))))","problem":97,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [row]\n  (let \n    [cell (fn this [r c]\n            (cond\n              (or (< c 1) (> c r)) 0\n              (= r 1) 1\n              :else\n              (+ (this (dec r) (dec c)) \n                 (this (dec r) c))))]\n    (map #(cell row %) (range 1 (inc row)))))","problem":97,"user":"4ea4fe1f535d7eef308072cf"},{"code":"(fn [n]\n  (map #(let [n-k (- (dec n) %) k (inc (max % n-k)), m (inc (min % n-k))] \n          (/ (apply * (drop k (range n)))\n              (apply * (range 1 m))))\n    (range n)))","problem":97,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (letfn [(ipt [[x & more], result]\n            (if (nil? more)\n              (conj result x)\n              (recur more (conj result (+ x (first more))))))]\n    (if (= 1 n)\n      [1]\n      (loop [i 2, pv [1]]\n        (if (= i n)\n          (ipt pv [1])\n          (recur (inc i) (ipt pv [1])))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":97,"code":"(fn pascal [r]\n   (if (= r 1)\n     [1]\n     (concat [1]\n             (map (partial apply +) (partition 2 1 (pascal (dec r))))\n             [1])))","user":"5eb193fde4b00a66d4a951fe"},{"problem":97,"code":"(fn pascal \n  ([n] (pascal n (vector 1)))\n  ([n prev] (if (= (count prev) n)\n              prev\n              (pascal n (concat [1] (map (partial apply +) (partition 2 1 prev)) [1])))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":97,"code":"(fn pascal-s-triangle-solution\n  [row] ;; update args as needed\n  ;; Pascal's triangle is a triangle of numbers computed using the following rules:\n  ;;  - The first row is 1. - Each successive row is computed by adding together adjacent numbers in the row above, and adding a 1 to the beginning and end of the row.\n  ;;\n  ;; Write a function which returns the nth row of Pascal's Triangle.\n  ;;\n  (letfn [(pascal-triangle-row-zip [rowvec] (map vector rowvec (rest rowvec)))\n          (pascal-triiangle-reduce-nest-col [col] (map #(reduce + %) col))\n          (pascal-triangle-next-row [row]\n            (-> row\n                (pascal-triangle-row-zip)\n                (pascal-triiangle-reduce-nest-col)\n                (conj 1)\n                (vec)\n                (conj 1)))\n          (pascal-triangle [row]\n            (loop [row-no row acc [1]]\n              (if (= row-no 1)\n                acc\n                (recur\n                  (dec row-no)\n                  (pascal-triangle-next-row acc)))))]\n    (pascal-triangle row)))","user":"54df955ee4b024c67c0cf7af"},{"code":"(fn q [r]\n  (map #(\n         (fn p [k n]\n         (if (or (= 0 k) (= k n))\n           1\n           (+ (p (- k 1) (- n 1)) (p k (- n 1)))))\n         % (- r 1)) (range r)))","problem":97,"user":"5224cf82e4b01819a2de42ef"},{"problem":97,"code":"(fn [x]\n  (let [next-row (fn [r] \n                   (concat '(1) (map #(apply + %) (partition 2 1 r)) '(1)))]\n    (nth (iterate next-row '(1)) (dec x))))","user":"54cbd97ae4b057c6fda3a283"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(map + (concat % [0]) (concat [0] %)) [1]) (dec n)))","user":"555f0789e4b0a2eb076a39bf"},{"problem":97,"code":"(fn [n]\n  (loop [n n acc [1]]\n    (if (= n 1)\n      acc\n      (recur (dec n) (concat [1] (map (partial apply +) (partition 2 1 acc)) [1])))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn p [x]\n  (if (= x 1) [1]\n    (let [o (p (dec x))]\n      `(1 ~@(map + (butlast o) (next o)) 1))))","problem":97,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn [r] \n  (loop [c 1 v 1 res []] \n    (if (>= r c) \n      (recur (inc c) \n             (* v (/ (- r c) c)) \n             (conj res v)) \n      res)))","problem":97,"user":"4f1fd734535d64f6031464a5"},{"problem":97,"code":"(fn nth-row [n]\n  (if (= 1 n)\n    [1]\n    (let [prior (nth-row (dec n))\n          sums  (map (partial apply +) (partition 2 1 prior))]\n      (concat [1] sums [1]))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":97,"code":"(fn [x] (nth (let [o '(1)] (iterate #(concat o (map + % (next %)) o) o)) (dec x)))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn [n]\n    (letfn [(pascal [n k]\n              (cond (or (= 0 k) (= 0 n) (= n k)) 1\n                    :else (+ (pascal (dec n) (dec k)) (pascal (dec n) k))))]\n      (map (fn [k]\n             (pascal (dec n) k))\n           (range n))))","problem":97,"user":"51f40975e4b0fca5e8b4822e"},{"problem":97,"code":"(fn [n]\n  (let [pascals-row  (fn pascals-row [m prev]\n                       (if (= m n)\n                         prev\n                         (let [next (concat [1] (map #(apply + %) (map vector prev (drop 1 prev))) [1])]\n                           (pascals-row (inc m) next))))]\n\n    (pascals-row 1 [1])))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [nm]\n  (if (= nm 1)\n    [1]\n    (let [next-row #(conj (vec (conj (map + % (rest %)) 1)) 1)]\n      (loop [n (dec nm)\n              row [1]]\n          (if (pos? n)\n            (recur (dec n) (next-row row))\n            row)))))","problem":97,"user":"504f2071e4b0e7ad84dbc4be"},{"problem":97,"code":"(fn pascal\n  [n]\n  (loop [c '(1) k 1 n n]\n    (cond\n      (= k n) c\n      (= k 1) (recur '(1 1) 2 n)\n      :else (recur\n             (concat '(1) (map #(+ (first %) (last %)) (partition 2 1 c)) '(1))\n             (inc k)\n             n))))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [x] (vec (concat [1] (map + x (conj (vec (rest x)) 0)))))\n    [1])\n   (dec n)))","problem":97,"user":"535d2533e4b04ce2eb3ed2bc"},{"code":"(fn [n]\n  (letfn [(row [l] (map + (cons 0 l) (concat l '(0))))]\n    (loop [l '(1)\n           c n]\n      (if (< c 2)\n        l\n        (recur (row l) (dec c))))))","problem":97,"user":"4ed9fe5f535d10e5ff6f5308"},{"problem":97,"code":"(fn [n]\n  (let\n    [fact (fn\n            [x]\n            (if\n              (= x 0)\n              1\n              (apply * (range 1 (+ 1 x)))\n              )\n            )\n     m (- n 1)]\n    (map\n      (fn [y]\n        (/\n          (fact m)\n          (*\n            (fact y)\n            (fact (- m y))\n            )))\n      (apply vector (range 0 (+ 1 m))))))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"(fn [n] (nth \n         (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) \n         (dec n)))","problem":97,"user":"51533ecde4b0252ac4b16619"},{"problem":97,"code":"#(loop [i %1\n            r [1]]\n       (if (= i 1)\n         r\n         (recur\n           (dec i)\n           (map + (cons 0 r) (reverse (cons 0 r))))))","user":"5908882de4b047aa04b19979"},{"problem":97,"code":"(fn [n](nth(iterate #(concat [1] (map + % (rest %)) [1]) [1])(dec n)))","user":"5481be5fe4b0e286459a1172"},{"problem":97,"code":"(fn a [x]\n  (cond\n    (= 1 x) [1]\n    :else (flatten [1 (map #(apply + %) (partition 2 1 (a (dec x)))) 1])))","user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn f [l]\n(letfn \n  [(nr [r] (map #(apply + %) (partition 2 1 r)))]\n  (if (= l 1)\n    [1]\n    (concat [1] (nr (f (dec l))) [1])\n  ) \n))","problem":97,"user":"52593207e4b0cb4875a45cd3"},{"problem":97,"code":"(fn [n]\n  (let [nextLine (fn [line]\n                   (let [[z rawLine] (reduce (fn [[a  xs] b] [b (conj xs (+ a b))]) [0 []] line)]\n                     (conj rawLine 1)))]\n    (nth (iterate nextLine []) n)))","user":"595fd721e4b066ee0a44b06e"},{"problem":97,"code":"(fn [n] \n  (last \n   (take n \n         (iterate (fn [x] `(1 ~@(mapv #(reduce + %) (partition 2 1 x)) 1)) [1]))))","user":"594266cfe4b060784b3b790b"},{"problem":97,"code":"(fn pascal [n]\n   (if (= n 1) [1]\n       (map (partial reduce +) (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","user":"5935b010e4b04f87174def55"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (nth \n    (iterate\n         (fn [nums]\n           (vec\n             (map +' (conj nums 0) (cons 0 nums)))) [1]) (dec n)))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn pascal [n]\n  (let [pas #(concat [1] \n                      (map (partial apply +)\n                           (partition 2 1 %))\n                      [1])\n        pasn (fn [lst n]\n               (if (= n 1) lst\n                   (recur (pas lst) (dec n))))]\n       (vec (pasn [1] n))))","problem":97,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn pascal-triangle [row]                                                                                                                    \r\n    (cond                                                                                                                                     \r\n     (= 1 row) [1]                                                                                                                            \r\n     (= 2 row) [1 1]                                                                                                                          \r\n     :else (conj (vec                                                                                                                         \r\n                  (cons 1 (map #(apply + %)                                                                                                   \r\n                               (partition 2 1 (pascal-triangle (dec row))))))                                                                 \r\n                 1)))","problem":97,"user":"4f149e0f535d64f60314643d"},{"problem":97,"code":"(fn [n]\n    (nth (iterate (fn [prev-row]\n                    (if (= 1 (count prev-row))\n                      [1 1]\n                      (into []\n                            (concat [1]\n                                    (map #(apply + %)\n                                         (partition 2 1 prev-row))\n                                    [1]))))\n                  [1])\n         (dec n)))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":97,"code":"(fn [x] (last (take x (iterate (fn [xs] (concat [1] (first (reduce #(vector (cons (+ %2 (last %)) (first %)) %2) [[] (first xs)] (drop 1 xs))) [1])) [1]))))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn pascal [n]\n  (if (<= n 1) [1]\n    (into []\n          (flatten\n            (list 1\n                  (map #(apply + %) (partition 2 1 (pascal (dec n))))\n                  1)))))","problem":97,"user":"4da8dd6e30acd6ed12482a68"},{"problem":97,"code":"(fn  [n]\n  (let\n[nextp (fn [col]\n  (let [lst (cons 0 (conj (vec col) 0))]\n    (for [i (range (dec (count lst)))]\n      (+ (nth lst i) (nth lst (inc i))))))]\n  (last (take n (iterate nextp [1])))))","user":"53664e3be4b0243289761e74"},{"problem":97,"code":"(fn\n  [x]\n  (loop [i 0 z (dec x) v []]\n    (if (= i (inc z))\n      v\n      (recur (inc i) z (concat v (vector (\n                                          (fn [n k] (/ ((fn [y] (reduce * 1 (range 1 (+ 1 y)))) n) \n                                                       (* ((fn [z] (reduce * 1 (range 1 (+ 1 z)))) k) \n                                                          ((fn [w] (reduce * 1 (range 1 (+ 1 w)))) (- n k)))))\n z i))))))\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":97,"code":"(fn [row] \n  (last (take row (iterate (fn [x] \n                             (if (= x [1])\n                               [1 1]\n                               (concat '(1) (map #(+ % %2) x (rest x)) '(1)))) [1]))))","user":"53f5c402e4b0db01ade6f9d4"},{"code":"(fn [c]\n  (nth\n    (iterate #(map + `[0 ~@%] `[~@% 0]) [1])\n    (dec c)))","problem":97,"user":"4f40ccd9e4b0e243712b1fc0"},{"code":"(fn [n] (last (take n (iterate #(concat (map + (concat [0] %) (concat % [0]))) [1]))))","problem":97,"user":"4e89de60535d3e98b8023285"},{"code":"(fn [n]\n  (nth\n    (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1])\n    (dec n)))","problem":97,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn [r] (reduce (fn [vals c] (conj vals (if (zero? c) 1 (* (last vals) (/ (- r c) c))))) [] (range 0 r)))","problem":97,"user":"4ee6400c535d93acb0a6685b"},{"problem":97,"code":"(fn [n]\n  (loop [level 1\n         v [1]]\n    (if (= level n)\n      v\n      (recur (inc level)\n             (mapv #(apply + %) \n                  (partition 2 1 \n                             (mapv + (cons 0 (conj v 0)))))))))","user":"56c1e720e4b0839206b9d68b"},{"code":"#(last (take % ((fn []\n                  (iterate (fn [row]\n                             (map +' `(0 ~@row) `(~@row 0)))\n                           '(1))))))","problem":97,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":97,"code":"(fn pt [n] (condp = n 1 [1] 2 [1 1] (reduce #(if (sequential? %1) (conj (vec (butlast %1)) (+ (last %1) %2) %2) [1 (+ %1 %2) %2]) (pt (dec n)))))","user":"53b2a7f8e4b047364c04449c"},{"problem":97,"code":"(fn [n]\n    (last\n      (take n\n        (iterate\n            (fn [coll]\n              (concat\n                [1]\n                (map #(+ %1 %2) coll (rest coll))\n                [1]))\n            [1]))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn p [i]\n  (if (= i 1) [1]  \n    (map \n      #(apply + %) \n      (cons [0 1] \n        (partition 2 1 [0]\n          (p (dec i)))))))","problem":97,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":97,"code":"(fn p [n] (if (= n 1)\n              [1]\n              (->>\n               (p (dec n))\n               (partition 2 1)\n               (map #(apply + %))\n               (cons 1)\n               (reverse)\n               (cons 1))))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":97,"code":"(fn [order]\n  (condp = order\n    1 [1]\n    2 [1 1]\n    (loop [r [1 1], acc 2]\n      (if (= acc order) r\n          (let [inner (for [i (range 1 acc)] (+ (nth r (dec i)) (nth r i)))\n                next-r (vec (concat [1] inner [1]))]\n            (recur next-r (inc acc)))))))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn pascal-triangle [level]\n  (let [fact (fn [x] (apply * (range 1 (inc x))))\n        P (fn [n r] (if (= r 0) 1 (/ (fact n) (fact (- n r)))))\n        C (fn [n r] (if (= r 0) 1 (/ (P n r) (fact r))))]\n    (map #(C (dec level) %) (range level))))","problem":97,"user":"4dd0e8f7535da60f04a96e57"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1]\n                  (map #(apply + %) (partition 2 1 (pascal (dec n))))\n                  [1])))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn tri [n] \n  (if (= n 1)\n    [1]\n    (loop [c 1\n           row [1]\n           v 1]\n      (if (= c n)\n        row\n        (let [vnew (* v (/ (- n c) c))]\n          (recur (inc c) (conj row vnew) vnew))))))","problem":97,"user":"512148dae4b05ae5a5823c0f"},{"problem":97,"code":"(fn self [n]\n  (if (= 1 n)\n    [1]\n    `[1 ~@(map (partial apply +') (partition 2 1 (self (dec n)))) 1]))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"code":"(fn ptri [n] (let [\n  nextRow (fn nextRow [is](if (= (count is) 1) is (cons (+ (first is) (second is)) (nextRow (rest is)))))\n]\n(if (= n 1) [1] (cons 1 (nextRow (ptri (dec n)))))\n))","problem":97,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":97,"code":"(letfn [(pascal [xs] (map +' (concat [0] xs) (concat xs [0])))]\n       #(nth (iterate pascal [1]) (dec %)))","user":"553698fae4b09218d5f44fc0"},{"code":"(memoize  (fn a [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else\n        (concat [1]\n                (map + (a (dec n))\n                     (rest (a (dec n))))\n                [1]))))","problem":97,"user":"52ba2af3e4b07a9af57922cc"},{"code":"(fn [row] \n(loop [ previous 1 column 1 result [1] ]\n  (if (>= column row)\n    result\n    (let [value (* previous (/ (- row column) column))]\n      (recur value (inc column) (conj result value))))))","problem":97,"user":"4ee3afde535d10e5ff6f5370"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(vec (map + (conj % 0) (cons 0 %)))\n            '[1])\n   (dec n)))","user":"5c51c930e4b0fb8c5ffd99ce"},{"problem":97,"code":"(fn nth-pascal\n  ([row] (nth-pascal row 1 [1]))\n  ([row cur res]\n    (if (= row cur)\n        res\n        (nth-pascal\n          row\n          (inc cur)\n          (->> (interleave res res)\n            rest\n            drop-last\n            ((fn [l]\n                 (map\n                   (fn [h]\n                       (+ (nth l h) (nth l (inc h))))\n                   (filter #(= (rem % 2) 0) (range (count l))))))\n            (cons 1)\n            (into [])\n            (#(conj % 1)))))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn f[n]\n  (let [g (fn [s]\n            (loop [o [] x s]\n              (if (>= (count x) 2)\n                (recur (conj o (+ (first x) (second x))) (rest x))\n                o)))]\n    (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      (> n 2) (concat [1] (g (f (dec n))) [1]))))","problem":97,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":97,"code":"(fn\n  [n]\n  (loop [k (- n 1) i 0 row []]\n   (if (<= i k)\n     (recur k (inc i) (conj row (/ ((fn f\n  [num]\n  (if (= num 0)\n    1\n    (* num (f (dec num))))\n) k) ((fn f\n  [num]\n  (if (= num 0)\n    1\n    (* num (f (dec num))))\n) i) ((fn f\n  [num]\n  (if (= num 0)\n    1\n    (* num (f (dec num))))\n) (- k i)))))\n     row) )\n)","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [n]\n  (loop [i n l [1]]\n    (if (= 1 i) l\n        (recur (dec i)\n               (cons 1 ((fn rec [x]\n                  (let [a (first x)\n                        b (second x)\n                        c (rest x)]\n                    (if (empty? c) [a]\n                        (cons (+ a b) (rec c))))) l))))))","problem":97,"user":"52d1e364e4b0d9f9285948e7"},{"problem":97,"code":"(fn ! [n]\n  (cond\n    (<= n 1) [1]\n    (=  n 2) [1 1]\n    :else (let [prev (! (dec n))]\n               (concat [1]\n                       (reduce #(conj % (apply + %2)) '() (partition 2 1 prev))\n                       [1]))))","user":"56d30497e4b0ea9b8538f7a8"},{"code":"(fn pascal-row [n]\n  (letfn [(pascalize-n [in n]\n            (if (= n 2)\n              in\n              (loop [a (first in)\n                     b (or (second in) 1)\n                     rst (rest in)\n                     out [1]]\n                (println a b out)\n                (if (empty? rst)\n                  (pascalize-n (conj out 1) (dec n))\n                  (recur (first rst)\n                         (second rst)\n                         (rest rst)\n                         (conj out (+ a b)))))))\n          ]\n    (case n\n      1 '[1]\n      2 '[1 1]\n      (pascalize-n '[ 1 1 ] n))))","problem":97,"user":"504ec4d3e4b069badc5a33c9"},{"problem":97,"code":"(fn pascal [n]\n    (letfn\n        [(sumadj\n             [x1 x2 & xs]\n             (if (empty? xs)\n                 (list (+ x1 x2))\n                 (cons (+ x1 x2) (apply sumadj (cons x2 xs)))))]\n        (case n\n            1 '(1)\n            2 '(1 1)\n            (concat (cons 1 (apply sumadj (pascal (- n 1)))) '(1)))))","user":"600ae927e4b074f607df6689"},{"problem":97,"code":"(fn [nn] (loop [n (dec nn) c '(1)]\n             (if (zero? n)\n               c\n               (recur (dec n) (map + (flatten (list c 0)) (conj c 0)))\n               )\n             ) )","user":"549375e4e4b0b312c081ff4e"},{"problem":97,"code":"#(loop [t [1] m %]\n   (if (< m 2)\n     t\n     (recur\n      (conj (reverse (conj \n                      (map (fn [x] (+ (nth t (inc x))(nth t x))) (range (dec (count t))))\n                      1)) \n            1) \n      (dec m))\n   ))","user":"55643878e4b0c656e3ff1801"},{"problem":97,"code":"(fn [n]\n  (nth (iterate\n         (fn [row]\n           (loop [input row answer [1]]\n             (cond\n               (empty? input) answer\n               (= (count input) 1) (conj answer (first input))\n               :else (recur (next input) (conj answer (+ (first input) (second input)))))))\n        []) n))","user":"57894e30e4b0ebec4cfb752b"},{"problem":97,"code":"(fn [n]\n        (loop [s [1] n (dec n)]\n          (if (zero? n)\n            s\n            (recur (concat [1] (map #(reduce + %) (partition 2 1 s)) [1]) (dec n)))))","user":"546c4377e4b00cfc9eacc177"},{"problem":97,"code":"(fn pascal [n]\n  (map #(/ (apply * (range (inc %) n)) (apply * (range 1 (- n %)))) (range n)))","user":"53e8c684e4b036ad0777e48b"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (<= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1]\n                  (if-let [par (pascal (dec n))]\n                    (do (println par)\n                        (loop [coll par\n                               acc  []]\n                          (let [a (first coll)\n                                b (second coll)]\n                            (if (and a b)\n                              (do\n                                (println a b)\n                                (recur (rest coll) (conj acc (+ a b))))\n                              acc)))))\n                  [1])))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"#(let [next-layer (fn [previous]\n  \t\t  (if (empty? previous) [1]\n\t(loop [x previous result[1]]\n\t    (if (empty? x)\n\t       (conj result 1)\n\t       (cond\n\t\t (= 1 (count x)) (recur (rest x) result)\n\t\t :else\n\t\t (recur (rest x) (conj result (+ (first x) (second x)))))))))]\n\t (nth (iterate next-layer []) %))","problem":97,"user":"4f066916535dcb61093f6c10"},{"code":"(fn [n](nth (iterate (fn [s](concat [1] (#(map + % (rest %)) s) [1])) [1]) (dec n)))","problem":97,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":97,"code":"(fn [n]\n  (letfn [(gen-row [coll]                   \n            (map + (concat '(0) coll) (concat coll '(0))))]\n    (nth (iterate gen-row [1]) (dec n))))","user":"5f82609ae4b0c071e6c840f9"},{"problem":97,"code":"(fn pascal [n]\n  (loop [c 1\n          acc [1]]\n    (if (= c n)\n         acc\n         (recur (inc c) \n                (concat '(1) (map #(apply + %) (partition 2 1 acc)) '(1))))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":97,"code":"; https://stackoverflow.com/questions/15580291/how-to-efficiently-calculate-a-row-in-pascals-triangle\n(fn row [n]\n  (let [row (- n 1)]\n    (loop [vals [1]\n           index 0]\n      (if (= index row)\n        vals\n        (recur (conj vals (/ (* (vals index) (- row index)) (+ index 1)))\n               (+ index 1))))))","user":"572010a4e4b0c5bde472c08c"},{"code":"#(last (take %\n(concat [[1]]\n(iterate\n(fn aa [li]\n  (loop [in li result [1] f (first li) s (second li)]\n    (if (nil? s)\n      (conj result 1)\n      (recur (rest in) (conj result (+ f s)) s (second (rest in)))\n    )\n  )\n)\n[1 1]\n) ) ) )","problem":97,"user":"528f4462e4b0239c8a67aef0"},{"problem":97,"code":"#(letfn [(factorial [n] (reduce * (range 1 (+ n 1))))\n        (binom [n k] (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n  (for [k (range (- (+ 1 %) 1))]\n    (binom (- % 1) k)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":97,"code":"(fn f [n]\n   (case n\n     1 [1]\n     2 [1 1]\n     (apply conj [1]\n            (conj ((fn b [ret x]\n                     (if (> (count x) 1)\n                       (b (conj ret (+ (first x) (second x))) (rest x))\n                       ret))\n                    []\n                    (f (- n 1))) 1))))","user":"5195fadee4b04c0af7ff3c11"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","user":"57dda21be4b0bd073c202445"},{"problem":97,"code":"(fn [n]\n    (let [reductor (fn [line]\n                     (conj (vec (cons 1 (for [[x y]\n                                        (partition 2 1 line)]\n                                          (+ x y)))) 1))\n          final (apply comp (repeat (dec n) reductor))]\n      (final [1])))","user":"5d3ae729e4b01671435dbd5d"},{"problem":97,"code":"(fn pascaltriangle [n]\n  (loop [cnt n\n         acc [1]]\n    (if (= cnt 1) \n       acc\n      (recur (dec cnt) (conj (vec (conj (map #(reduce + %) (partition 2 1 acc)) 1)) 1)))))","user":"544257b4e4b032a45b869379"},{"problem":97,"code":"#(loop [l [1] n 0] \n  (if (= (- % 1) n)\n    l \n    (recur (conj l \n                 (* (last l) (/ (- (- % 1) n) (+ n 1) )))\n           (+ n 1)\n    )\n   )\n  )","user":"51e1c176e4b06a68e693eafb"},{"code":"(fn [n] (loop [n (- n 1) r (vector 1)]\n  (if (zero? n)\n    r\n    (recur (- n 1) (concat [1] (map  #(+ (nth r %) (nth r (- % 1))) (range 1 (count r))) [1] )))))","problem":97,"user":"5349ac2be4b084c2834f4a67"},{"problem":97,"code":"(fn [n]\n   (first (drop (dec n)\n                (iterate #(concat '(1) (map (partial apply +) (partition 2 1 %)) '(1)) [1]))))","user":"53ea5307e4b036ad0777e4e2"},{"problem":97,"code":"(fn [i]\n    (let\n      [\n        n (dec i)\n        factorial (fn [n]\n          (reduce * (range 1 (inc n)))\n        )\n        pascal-number (fn [n r]\n          (/\n            (factorial n)\n            (*\n              (factorial r)\n              (factorial\n                (- n r)\n              )\n            )\n          )\n        )\n      ]\n      (apply vector\n        (map\n          (fn [r]\n            (pascal-number n r)\n          )\n          (range i)\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":97,"code":"(fn get-row [n]\n  (letfn [(next-row [row]\n            (loop [ys [1] [x & xs] row]\n              (if (empty? xs)\n                (conj ys x)\n                (recur (conj ys (+ x (first xs))) xs))))]\n    (loop [ys [1] i n]\n      (if (> i 1) \n        (recur (next-row ys) (dec i))\n        ys))))","user":"5661e09ae4b068f2fe63dc70"},{"code":"#(loop [x % r '(1)]\n    (if (= 1 x)\n      r\n      (recur (dec x) (map + (cons 0 r) (concat r (list 0))))))","problem":97,"user":"50645e12e4b007509339a58a"},{"problem":97,"code":"(fn [n] (reduce #(conj %1 (/ (* (last %1) (- (dec n) %2)) (inc %2))) [1] (range (dec n))))","user":"587294f0e4b01531a375ea1e"},{"problem":97,"code":"(fn pascalize\n  ([n] (pascalize (dec n) '(1)))\n  ([n p]\n   (if (zero? n)\n     p\n     (recur (dec n) (conj (map #(apply + %)  (partition-all 2 1 p)) 1)))))","user":"5ef18431e4b07c55ae4a0529"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (if (= n 1)\n    [1]\n    (loop [res [1]\n           [head & tail] (pascals-triangle (dec n))]\n      (if (empty? tail)\n          (conj res 1)\n        (recur (conj res (+ head (first tail))) tail))\n      )))","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [x] (nth (iterate  #(mapv + (conj % 0) (into [0] %)) [1]) (dec x)))","problem":97,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn ! [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (vec (map + (conj (! (- n 1)) 0 ) (cons 0 (! (- n 1)))))))","problem":97,"user":"52be0263e4b07a9af579230e"},{"code":"(fn [n]\n  (loop [k 1\n         res [1]]\n    (if (= k n) res\n        (recur (inc k)\n               (conj (vec (map #(+ %1 %2) \n                          (conj (reverse (rest res)) 0)\n                          res)) 1)))))","problem":97,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn pascal-tri [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal-tri (dec n))\n          last-a (concat [0] last)\n          last-b (concat last [0])\n          ]\n      (vec(map + last-a last-b)))))","problem":97,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map +' `[~@% 0] `[0 ~@%]) [1]))))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn pasc [n]\n  (if (= 1 n)\n    [1]\n    (let [n1 (pasc (dec n))]\n      (vec (concat\n        [1]\n        (map #(+ (nth n1 %) (nth n1 (inc %))) (-> n1 count dec range))\n        [1])))))","problem":97,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn pascal [n]\n    (if (= n 1) '(1)\n        (let [above (cons 0 (pascal (dec n)))]\n          (map-indexed #(+ %2 (nth above (inc %1) 0)) above))))","problem":97,"user":"534efe66e4b084c2834f4ac1"},{"problem":97,"code":"(fn pascal-triangle-row\n  [n]\n  (letfn [(recur-pascal\n            ([] (recur-pascal [1 1]))\n            ([last-vec]\n             (lazy-seq (cons last-vec (recur-pascal\n                                       (flatten (concat [1] (->> (partition 2 1 last-vec)\n                                                                 (map (fn [pair] (+ (first pair) (second pair)))))\n                                                        [1])))))))]\n    (if (= n 1)\n      [1]\n      (last (take (- n 1) (recur-pascal))))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn pasc [row]\n  (let [step (fn step [sq]\n              (if (< (count sq) 2)\n                []\n                (vec (cons (+ (first sq) (second sq))\n                      (step (rest sq))))))]\n\t  (if (= row 1) [1]\n   \t\t (step (cons 0 (conj (pasc (dec row)) 0))))))","problem":97,"user":"529ce629e4b04e0c58e87b6e"},{"problem":97,"code":"(fn [n]\n   (nth\n    (iterate\n     #(let [s (cons 0 %)] (map + s (reverse s)))\n     [1])\n    (dec n)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn triangle [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (map #(apply + %) (partition 2 1 (triangle (dec n)))) [1])))","problem":97,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn pascal-triangle\r\n  [n]\r\n  (loop [i 1 rvec [[1]]]\r\n    (if (= i n)\r\n      (get rvec (dec n))\r\n      (recur (inc i) (conj rvec (vec (map + (conj (last rvec) 0) (cons 0 (last rvec)))))))))","problem":97,"user":"4f2942ace4b0d6649770a01e"},{"problem":97,"code":"#(letfn [(next-item [m n prev] (/ (* prev (- m (- n 1))) n))]\n   (reduce (fn [v n] (conj v (next-item (- % 1) n (last v)))) [1] (range 1 %)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":97,"code":"(fn [n]\n  (loop [acc [1] numerator (dec n) denominator 1]\n    (if (> 1 numerator) acc\n      (recur (conj acc (/ (* (last acc) numerator) denominator))\n             (dec numerator)\n             (inc denominator)))))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":97,"code":"(fn [n]\n  (last\n   (take n\n    (iterate\n      (fn [row]\n        (->> row\n          ((fn [row] (partition 2 1 row)))\n          (map (partial apply +))\n          (#(concat [1] % [1]))))\n      [1]))))","user":"588d0a52e4b05c141a2560a6"},{"problem":97,"code":"(fn triangle [n]\n    (nth (iterate\n           (fn [row]\n             (vec (map + (cons 0 row) (conj row 0))))\n           [1])\n         (dec n)))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn [n]\n  (letfn\n    [(calc-next-row [prev]\n      (let [middle\n        (map (fn [x] (+ (prev x) (prev (inc x)))) \n          (range (dec (count prev))))]\n        (conj (vec (cons 1 middle)) 1)))]\n    (reduce\n      (fn [prev _] (calc-next-row prev))\n      [1]\n      (range (dec n)))))","problem":97,"user":"4f28c979e4b0d6649770a01a"},{"problem":97,"code":"(fn Pascal\n  [n]\n  (if (< n 3)\n        (vec (take n (repeat 1)))  \n        (vec (conj (seq (conj (vec (map #(apply + %) (partition 2 1 (Pascal (dec n))))) 1)) 1))\n     ))","user":"53d6b266e4b0e771c3025459"},{"code":"(fn [n] \n           (let [n (dec n)]\n          (loop [x [1] k 0] \n                (if (= k n)\n                    x\n                  (recur (conj x (->> (x k) (* (- n k)) (#(/ % (inc k))))) (inc k))))))","problem":97,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(fn pascalsTriangle [n] (loop [x [1]] (if (= n (count x)) x (recur ((fn \npascalTriangleRowUpdater [a] (loop [y a z [1]] (if (= (count a) (count z)) (conj z 1) \n(recur (rest y) (conj z (+ (first y) (first (rest y)))))))) x)))))","problem":97,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn pascalTri [x]\n  (if (= x 1)\n    (-> 1 list vec)\n    (loop [lst []\n           indice 0\n           lastpascal (pascalTri (dec x))]\n      (if (>= indice x)\n        lst\n        (recur\n          (conj\n            lst            \n            (if (or (zero? indice) (= indice (dec x)))\n              1\n              (+ (lastpascal (dec indice)) (lastpascal indice))\n            )            \n          )\n          (inc indice)\n          lastpascal\n        )\n      )\n    )\n  )\n)","problem":97,"user":"4e8b73e4535d65386fec2120"},{"problem":97,"code":"(fn [n]\n  (let [rationals (map / (reverse (range 1 n)) (range 1 n))]\n    (reduce #(conj %1 (* (last %1) %2)) [1] rationals)))","user":"54684c3be4b00cfc9eacc139"},{"problem":97,"code":"(fn [x] \n   (let [pmaker #(fn [y] \n           ((fn loop [c r prev next] \n           (if (zero? r) (/ prev next) \n           (recur (dec c) (dec r) (* c prev) (* r next)))) % y 1 1))] (vec (map (pmaker (dec x)) (range 0 x)))))","user":"575e71a2e4b0846ea39baf26"},{"problem":97,"code":"(fn [rang]\n    (if (= rang 1)\n      [1]\n      (loop [rprec [1 1] rgcur rang] \n          (if (= rgcur 2)\n            rprec\n            (let [cur (into [] (map + (cons 0 rprec) (conj rprec 0)))]\n              (recur cur (dec rgcur))\n            )\n          )\n      )\n    )\n  )","user":"556f2009e4b09a3098a52519"},{"code":"(fn p [n]\n    (if (= n 1) [1]\n      (concat \n        [1] \n        (map #(apply + %) (partition 2 1 (p (dec n)))) \n        [1])))","problem":97,"user":"4e72ac47535d5021c1a89666"},{"problem":97,"code":"(fn\n  [row]\n  (letfn [(adjacent-pairs [row]\n            (map vector (drop-last row) (rest row)))\n          (add-pairs [pairs]\n            (map #(apply +' %) pairs))\n          (add-adjacent-pairs-in-row [row]\n            (add-pairs (adjacent-pairs row)))\n          (next-pascal-row [previous-row]\n            (concat '(1) (add-adjacent-pairs-in-row previous-row) '(1)))]\n    \n    (loop [row-index 1 stop-index row row-values '(1)]\n      (if (= row-index stop-index)\n        (vec row-values)\n        (recur (+ row-index 1) stop-index (next-pascal-row row-values))))))","user":"4daf420cedd6309eace4d176"},{"code":"(fn [start]\n  ((let [add-one (fn [s] (apply conj [1] (conj (into [] s) 1)))\n        add-up (fn [s] (map \n                        (fn [a b] (+ a b)) \n                        s \n                        (rest s)))]\n    (fn pas [n] \n        (if (= n 1)\n          [1]\n          (add-one (add-up (pas (dec n))))))) start))","problem":97,"user":"5150a7d7e4b03e678e393abb"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (nth\n    (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1])\n    (dec n)))","user":"5d6691cee4b0db5d338d15e9"},{"code":"(fn [l] (let [ncr (fn [n r]\r\n     (/ (apply * (range n (- n r) -1)) (apply * (range 1 (inc r)))))] \r\n\t   (map ncr (repeat (dec l)) (range l))))","problem":97,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":97,"code":"(fn [n]\n    (loop [i (dec n)\n           row [1]]\n      (if (= i 0)\n        row\n        (recur (dec i)\n               (flatten [1 (map (partial apply +) (partition 2 1 row)) 1])))))","user":"54508859e4b0e397800069a3"},{"problem":97,"code":"(fn ⟲ [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (let [prev (⟲ (dec n))]\n            (concat [1] (mapv #(reduce + %) (partition 2 (interleave  prev (rest prev)))) [1])\n          )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":97,"code":"(fn [row]\n  (get\n    (loop [i 1 result []]\n      (if (= i (inc row))\n        result\n        (recur (inc i)\n               (conj result (loop [column 0 result2 []]\n                              (if (= column i)\n                                result2\n                                (recur (inc column)\n                                       (if (or (= column 0) (= column (- i 1)))\n                                         (conj result2 1)\n                                         (conj result2\n                                               (+ (get (get result (- i 2)) column)\n                                                  (get (get result (- i 2)) (dec column))))))))))))\n    (dec row)))","user":"5d03944de4b0cc9c915881c5"},{"problem":97,"code":"(fn [n]\n  (let [next-row (fn \n                   ([prev-row] (if (seq prev-row)\n                                 (concat [1] (map (partial apply +) (partition 2 1 prev-row)) [1])\n                                 [1])))]\n    (nth (iterate next-row []) n)))","user":"5764457ae4b0994c1922fbf3"},{"problem":97,"code":"(fn rec [n]\n        (if (= 1 n)\n          [1]\n          (let [r (rec (dec n))\n                rl (concat [0] r)\n                rr (concat r [0])]\n            (vec (for [[x y] (map vector rl rr)] \n                   (+ x y))))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":97,"code":"(fn [n]\n  (loop [n n\n         r [1]]\n    (if (= n 1)\n      r\n      (recur (dec n) (concat [1] \n                             (map #(reduce + %) (partition 2 1 r))\n                             [1])))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":97,"code":"#(let [next-p (fn [l] \n                (flatten [(first l)\n            \t\t(map + (rest l) (butlast l)) \n            \t\t(last l)]))]\n  (loop [x (dec %)\n         result [1]]\n    (if (zero? x)\n      result\n      (recur (dec x)\n             (next-p result)))))","user":"5508a292e4b06e50f9beb10f"},{"code":"(fn [n]\n  (nth (iterate #(vec (map + (into [0] %) (conj % 0))) [1]) (dec n)))","problem":97,"user":"5006b7d2e4b0678c553fc48c"},{"problem":97,"code":"(fn [n]\n (loop [r [1] n n]\n    (if (> n 1)\n        (recur (flatten [1 (map + r (rest r)) 1]) (dec n))\n        r)))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":97,"code":"(fn [n]\n  (let [add0s (fn [row] (cons 0 (conj row 0)))\n        nextrow (fn [row] (vec (map + (add0s row) (rest (add0s row)))))]\n    (nth (iterate nextrow [1]) (dec n))))","user":"52950ab6e4b02ebb4ef7501a"},{"problem":97,"code":"(fn [n]\n  (let [nextrow (fn [prevrow]\n    (map #(apply + %) (partition 2 1 (concat [0] prevrow [0]))))]\n    (nth (iterate nextrow [1]) (- n 1))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":97,"code":"(fn [n]\n  (reductions\n    (fn [prev k]\n      (* prev (/ (- n k) k)))\n    1 ; n choose 0\n    (range 1 n)))","user":"553abb28e4b09218d5f44ffb"},{"problem":97,"code":"(fn nth-pascal-triangle\n  [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [last-row (nth-pascal-triangle (dec n))]\n           (concat [1] (map + last-row (drop 1 last-row)) [1]))))","user":"536e5055e4b0fc7073fd6e6b"},{"problem":97,"code":";(defn fact\n;  [n]\n;  (apply * (range 1 (+ 1 n))))\n\n;(defn pascal [n r]\n;  (/ (fact n) (* (fact r) (fact (- n r)))))\n\n;(defn pascalinrange [arg] (map (fn [x] (pascal (- arg 1) x) ) (range 0 arg)))\n\n\n(fn [arg] (map (fn [x] ((fn [n r]\n  (/ ((fn [n] (apply * (range 1 (+ 1 n)))) n) (* ((fn [n] (apply * (range 1 (+ 1 n)))) r) ((fn [n] (apply * (range 1 (+ 1 n)))) (- n r))))) (- arg 1) x))(range 0 arg)))","user":"5785de43e4b0ebec4cfb74e5"},{"code":"#(nth \n  (iterate \n    (fn [r] (vec (map + (cons 0 r) (conj r 0)))) \n    [1]) \n  (- % 1))","problem":97,"user":"4e707db6535d5021c1a8963a"},{"problem":97,"code":"(fn pascal-triangle [n]\n  {:pre [(>= n 1)]}\n  (loop [m 1\n         r [1]]\n    (if (= m n)\n      r\n      (recur (inc m)\n             (into [] (map + (cons 0 r) (conj r 0)))))\n    ))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"(fn __ [x]\n  (let [n (dec x)\n        f #(reduce * (range 1 (inc %)))\n        r (range 0 x)\n        ncr #(/ (f n) (* (f %) (f (- n %))))]\n       (map ncr r)))","problem":97,"user":"4ec9549d535d6d7199dd36fe"},{"problem":97,"code":"(fn [n]\n   (let [row-index (dec n)\n         top-row   [1]]\n     (nth (iterate\n            (fn [previous-row]\n              (vec\n                (concat\n                  top-row\n                  (map (fn [[f s]] (+ f s)) (partition 2 1 previous-row))\n                  top-row)))\n            top-row)\n          row-index)))","user":"510a3cd4e4b06956752d35ad"},{"problem":97,"code":"#(apply vector (map (partial  (fn [m n ] (/ (apply * (range (+  (- m n) 1) ( + m 1))) (apply * (range 1 ( + n 1)) ) ) )  (- % 1)) (range %) ) )","user":"55d44dd6e4b0e31453f64a75"},{"problem":97,"code":"(fn [x]\n  (reductions * 1\n              (map #(/ (- x %) %) ;this works because math\n                   (range 1 x))))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":97,"code":"(fn [n]\n  (map #((fn aux [n k]\n           (if (or (= n k) (zero? k))\n             1\n             (+ (aux (dec n) (dec k)) (aux (dec n) k))))\n         (dec n) %)\n       (range n)))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn [n]\n  (if (= n 1) [1]\n    (loop [i 2 up [1 1]]\n      (let [line\n            (concat [1]\n                    (for [j (range 1 (dec i))]\n                      (+ (nth up (dec j))\n                         (nth up j)))\n                    [1])]\n        (if (= i n)\n          line\n          (recur (inc i) line))))))","problem":97,"user":"4fdbc075e4b05e33b9224f61"},{"code":"(fn [n]\r\n  (let [next-pascal #(concat [1]\r\n                             (map + % (next %))\r\n                             [1])\r\n        pascal (iterate next-pascal [1])]\r\n    (nth pascal (dec n))))","problem":97,"user":"4dc7e8c6535d8a4b2fd74291"},{"code":"(fn P [x]\n                (if (= x 1)\n                  [1]\n                  (concat [1] \n                            (map #(+ (first %) (second %)) (partition 2 1 (P (- x 1)))) [1])))","problem":97,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":97,"code":"(fn [n]\n  (let [factorial (fn ! [x] (if (= x 0) 1 (* x (! (dec x)))))]\n    (into [] (map #(/ (factorial (dec n))\n                      (* (factorial %)\n                         (factorial (- (dec n) %))))\n                  (range n)))))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn calc [x] (loop [y [1]]\n                 (if (<= (count y) (- x 1)) \n                   (recur ((fn pascal [pre] (conj (vec (reverse (conj (vec (map #(reduce + %1) (partition 2 (drop-last  (reverse (drop-last (interleave pre pre))))))) 1))) 1))y)) \n                   y)))","problem":97,"user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [num]\n  (letfn [(c [n k]\n             (if (zero? k)\n               1\n               (* (c n (dec k))\n                  (/ (- (inc n) k)\n                     k))))]\n    (for [k (range num)]\n      (c (dec num) k))))","problem":97,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn [d]\r\n  (nth\r\n   (iterate\r\n    (fn [x]\r\n      (concat [1]\r\n              (map #(+ (first %) (second %)) (partition 2 1 x ))\r\n              [1])) [1]) (dec d)))","problem":97,"user":"4fb23582e4b081705acca28a"},{"problem":97,"code":"(fn [arg] \n  (map (fn [x] \n         ((fn [n r] \n            (/ ((fn [num] \n                  (reduce * (range 1 (+ num 1)))) n) \n               (* ((fn [num] \n                     (reduce * (range 1 (+ num 1)))) r) \n                  ((fn [num] \n                     (reduce * (range 1 (+ num 1)))) (- n r))))) \n          (- arg 1) x)) \n       (range 0 arg)))","user":"5785de78e4b0ebec4cfb74e8"},{"problem":97,"code":"(fn [n] (letfn [(next-row [row] (map +' `(0 ~@row) `(~@row 0)))\n                (nth-row [n] (last (take n (iterate next-row [1]))))]\n          (nth-row n)))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [a]\n   (letfn [(fact [x] (reduce * (range 2 (inc x))))\n           (bc [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n     (map #(bc (dec a) %) (range 0 a))))","problem":97,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [b] (let [a (dec b) factorial #(reduce * 1 (range 1 (inc %))) combination #(/ (factorial %1) (* (factorial %2) (factorial (- %1 %2))))] (mapv #(combination a %) (range (inc a)))))","problem":97,"user":"50112acee4b0d82cfac69f4c"},{"problem":97,"code":"( fn pasc [n] \n  \n  (if (= n 1) \n  [1]\n  (let [p (vec(pasc(dec n))) ]\n  \n   (map + (into p [0]) (into [0] p))\n\n  )))","user":"57487084e4b009280f9f2b8c"},{"problem":97,"code":"(fn pascal [i]\n  (if (= i 1) \n    [1]\n    (apply vector (#(map + (conj % 0) (cons 0 %)) (pascal (dec i))))))","user":"55ed9108e4b0121d4835fddc"},{"problem":97,"code":"(fn [n] (last (take n (iterate (fn [l] (let [f2 (fn f [[a & r]] (if r (cons (+ a (first r)) (f r)) r))] (concat [1] (f2 l) [1]))) [1]))))","user":"59adec09e4b0e1f4e384c897"},{"code":"(fn [x]\n (letfn [\n  (pas [n]\n   (if (= n 1)\n      [1]\n      (map + (concat [0] (pas (- n 1)))\n             (concat (pas (- n 1)) [0]))))]\n (pas x)))","problem":97,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn p [r]\n  (cond (= r 1) [1]\n        (= r 2) [1 1]\n        :else (let [u (p (dec r))]\n                (vec (concat [1]\n                       (for [x (range (dec (count u)))]\n                         (apply + (subvec u x (+ x 2)))) [1])))))","problem":97,"user":"4e52d815535d302ef430da77"},{"code":"(fn [n]\n  ((fn pasc [i acc]\n             (if (= i n)\n                 acc\n                 (pasc (inc i) \n                   (vec \n                     (concat \n                      [1] \n                      (when (> (count acc) 1)\n                        (map (fn [a b] (+ a b)) \n                                acc \n                                (rest acc)))\n                      [1]))))) 1 [1]))","problem":97,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":97,"code":"#(loop [r 0 v []]\n\t(if (= % r)\n      v\n      (recur (inc r) (conj v\n                           (/ (reduce * (range 1 %))\n                              (reduce * (range 1 (inc r)))\n                              (reduce * (range 1 (- % r))))))))","user":"55933c7ae4b0c79f6e1db938"},{"problem":97,"code":"(fn series\n  [x]\n  (loop [\n         myFun (fn [x y]\n  (/ \n   (reduce * (range 1 (inc x))) \n   (* (reduce * (range 1 (inc y))) (reduce * (range 1 (inc (- x y)))))))\n\n         x (dec x)\n         start 0\n         result []]\n    (if (= start x)\n      (conj result 1)\n      (recur\n       myFun\n       x\n       (inc start)\n       (conj result (myFun x start))))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":97,"code":"(fn pascal [row]\n  (nth\n    (iterate\n      (fn [xs] (concat [1] (map #(reduce + %) (partition 2 1 xs)) [1]))\n      [1])\n    (dec row)))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"(fn pascals-97\n  [x]\n  (last (take x (iterate\n                       (fn pascals\n                         [coll]\n                         (into (into [1] (map #(reduce + %) (partition 2 1 coll))) [1]))\n                       [1]))))","problem":97,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(concat [1] (map + % (rest %)) [1]) [1]))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [x] (let [n (dec x)] (reduce #(conj %1 (/ (* (last %1) (- n %2)) (inc %2))) [1] (range n))))","problem":97,"user":"4eb13d60535d7eef3080733f"},{"problem":97,"code":"(fn [n]\n  (let [next-pascal\n        (fn [vs]\n          (if (empty? vs)\n            [1]\n            (let [xs (conj vs 0), ys (reverse xs)]\n              (into [] (map (fn [x y] (+ x y)) xs ys)))))\n        pascal (iterate next-pascal [])]\n    (nth pascal n)))","user":"53684a2fe4b0243289761e8c"},{"code":";; http://en.wikipedia.org/wiki/Pascal%27s_triangle#Calculating_an_individual_row_or_diagonal_by_itself\n(fn [rows]\n  (reduce\n    #(conj %1 (* (last %1) (/ (- rows %2) %2)))\n    [1]\n    (range 1 rows))) ; row == number of cols","problem":97,"user":"500900dee4b0144d4f561e42"},{"problem":97,"code":"(fn [n]\n  (nth \n   (cons [1] \n   (iterate (fn [a] (vec (flatten [1 (map #(apply + %) (partition 2 1 a)) 1]))) [1 1])) \n  (dec n)))","user":"532a033be4b09d4e7a9b551f"},{"problem":97,"code":"(fn [n]\n   (letfn [(next [s] \n             (concat [1]\n                     (mapv (partial apply +) \n                           (partition 2 1 s)) \n                     [1]))]\n     (nth (iterate next [1]) (dec n))))","user":"538db083e4b0b51d73faae74"},{"problem":97,"code":"#(first \n   (drop (dec %) \n         (take % \n               (iterate \n                 (fn [row]\n                   (loop [[h1 & t] row\n                          acc [1]]\n                     (if-let [[h2 & _ :as rest-row] t]\n                       (recur rest-row (conj acc (+ h1 h2)))\n                       (conj acc 1))))\n                 [1]))))","user":"6026737ee4b0d5df2af2222f"},{"problem":97,"code":"(fn p [n]\n  (loop [n (- n 1)\n         r [1]]\n    (if (= n 0)\n      r\n      (recur (- n 1) (mapv #(apply + %) (partition 2 1 (apply conj [0] (conj r 0))))))))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn [x]\n  (letfn \n    [(iteradd \n      [l]\n      (if (< (count l) 2)\n\t\t[]\n\t\t(concat [(+ (first l) (second l))]  (iteradd (rest l))))\n      )\n     (iteriter \n      [n l]\n      (if (= 0 n) l\n        (iteriter \n         (- n 1) \n         (iteradd (into (into [0] l) [0])))))\n     ]\n    (iteriter (- x 1) [1])\n    ))","problem":97,"user":"52faec2ee4b047fd55837004"},{"problem":97,"code":"(fn [n]\n  (let [nextrow (fn [x] (concat [1] (map #(apply + %) (partition 2 1 x)) [1]) )]\n    (loop [i 1 x '(1)]\n      (if (= i n) x\n        (recur (inc i) (nextrow x))))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":97,"code":"(fn [n]\n  (loop [row-count 1 row [1]]\n    (if (= row-count n) \n      row \n      (recur (inc row-count) (map #(+ (first %) (second %)) (partition 2 1 (flatten (vector 0 row 0))))))))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn pascal [n]\n  (letfn [\n\t\t(fac [x] (reduce * (range 1 (+ x 1))))\n\t\t(over [x k] (/ (fac x) (* (fac k) (fac (- x k)))))\n\t\t]\n\t\t(map #(over (- n 1) %) (range n))\n\t)\n)","problem":97,"user":"4ed6238d535d10e5ff6f52de"},{"problem":97,"code":"(fn [n] (vec (reductions #(int ( * %1 %2)) \n                         1 \n                         (map #(/ %1 %2) \n                              (range (dec n) 0 -1) \n                              (range 1 n)))))","user":"53fcdd1ae4b0de5c418485dd"},{"code":"(fn pas[r]\r\n  (loop [ans [1] n (dec r) d 1]\r\n    (if (=(count ans) r)\r\n      ans\r\n      (recur (conj ans (int(* (last ans) (/ n d)))) (dec n) (inc d)))))","problem":97,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(into [] (map + (cons 0 %) (conj % 0))) [1]) (dec n)))","user":"506f0968e4b09350ab4199f5"},{"problem":97,"code":"(let [fact #(reduce * (range 1 (inc %)))]\n  (let [ncomb (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    #(map (partial ncomb (dec %)) (range  %))))","user":"534941d1e4b084c2834f4a60"},{"code":"(fn [x]\r\n  (let [e (fn [c] (conj (map #(apply + %) (partition-all 2 1 c)) 1))]\r\n    (nth (iterate e '(1)) (dec x))))","problem":97,"user":"4dae916eedd6309eace4d155"},{"problem":97,"code":"(fn [a]\n   (let [factorial #(if (zero? %) 1 (apply * (range 1 (inc %))))\n         combination (fn [n k] (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n     (for [i (range a)] (combination (dec a) i))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":97,"code":"(letfn [(pascal [n]\n          (if (<= n 1)\n            [1]\n            (conj (first (reduce (fn [[res x] y]\n                                   [(conj res (+ x y)) y])\n                                 [[] 0]\n                                 (pascal (dec n))))\n                  1)\n            ))]\n  pascal)","user":"5c3ec6dbe4b08cd430848e8a"},{"code":"(fn triangle [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (concat '(1) (map #(apply + %)  (partition 2 1  (triangle (- n 1)))) '(1))))","problem":97,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn [n]\n  (letfn [\n    (each-cons [x] (map list x (drop 1 x)))\n    (next-row [r] (concat [1]\n                          (map (partial apply +) (each-cons r))\n                          [1]))]\n      (nth (iterate next-row [1]) (dec n))))","problem":97,"user":"4ea1b9e4535d7eef308072b8"},{"problem":97,"code":"(fn [x]\n    (letfn [(next-row [old-row]\n              (concat [1]\n                      (map (fn [[x y]] (+ x y)) (partition 2 1 old-row))\n                      [1]))\n\n\n            (make-row [idx]\n              (reduce\n                (fn [last-row idx]\n                    (next-row last-row))\n                [1] (range 1 idx)))]\n        (make-row x)))","user":"55c66ffee4b0e31453f649c2"},{"problem":97,"code":"(fn [n]\n  (loop [c 1 cum [1]]\n    (if (= c n) cum (recur (inc c) (vec (map + (into cum [0]) (into [0] cum)))))))","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"(fn pascal [n]\n  (let [pairwise \n        (fn [xs acc]\n          (if (>= (count xs) 2)\n            (recur (rest xs) (conj acc [(first xs) (second xs)]))\n            acc))]\n    (condp = n  \n      1 [1]\n      (map\n        #(apply + %)\n        (pairwise (concat [0] (pascal (dec n)) [0]) [])))))","problem":97,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [n]\n  (let [r #(range % (inc %2))\n        f #(apply * (r % %2))\n        b #(/ (f (- % (dec %2)) %) (f 1 %2))]\n    (map #(b (dec n) (dec %)) (r 1 n))))","problem":97,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (reduce into [[1] (map (partial apply +) (partition 2 1 (pascal (dec n)))) [1]])\n    :else []))","problem":97,"user":"51da7e49e4b02ceefd947768"},{"problem":97,"code":"(fn ptriangle [n]\n  (loop [row 1, prev-row [1]]\n    (if (= row n) ; Done?\n      prev-row\n      (recur (inc row) \n        (concat [1] (map #(+ (first %) (second %)) (partition 2 1 prev-row)) [1])))))","user":"5cb4e764e4b026601754b929"},{"problem":97,"code":"(fn pascal [n]\n  (last (take n (iterate  (fn [xs] (flatten (vector 1 (mapv (partial reduce +) (partition 2 1 xs)) 1))) [1]))))","user":"601c39eee4b0bf4ca6b10937"},{"problem":97,"code":"(fn p2 [x]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1])(- x 1)))","user":"567c63f6e4b05957ce8c61bb"},{"problem":97,"code":"(fn [x]\n  (let [fact (fn [n] (reduce * (range 1 (inc n))))\n        bc   (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(bc (dec x) %) (range x))))","user":"563ed73ae4b08d4f616f5ecb"},{"code":"(fn [n]\n  (nth \n    (iterate #(map + (cons 0 %) (reverse (cons 0 (reverse %)))) [1]) (dec n)))","problem":97,"user":"4ff5744ae4b0678c553fc36a"},{"problem":97,"code":"(fn\n  [i]\n  (let [nk (fn nk\n             [vec-of-nk]\n             (let [fak (fn [n]\n                         (let [s (map inc (range n))]\n                           (apply * s)))]\n               (quot (fak (first vec-of-nk))\n                     (* (fak (second vec-of-nk))\n                        (fak (- (first vec-of-nk)\n                                (second vec-of-nk)))))))\n        vn (take i\n                 (map #(vec [(dec i) %])\n                      (range)))]\n    (map nk vn)))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(letfn\n  [(next-pascal [prev-row]\n     (concat [1] (map #(apply + %) (partition 2 1 prev-row)) [1]))\n   (lazy-pascal []\n     (iterate next-pascal [1]))]\n  (fn [n] (nth (lazy-pascal) (dec n))))","problem":97,"user":"5002b6e5e4b0678c553fc42c"},{"code":"#(loop [ n %\n         k 0\n         r [] ]\n    (if (= k n) r\n      (recur n (inc k) (cons (/ (apply * (range 1 n)) (* (apply * (range 1 (inc k))) (apply * (range 1 (- n k))))) r))))","problem":97,"user":"52d068c9e4b07d0d72b273b9"},{"code":"(fn f [n]\n  (cond (= n 1)\n        [1]\n        \n        (= n 2)\n        [1 1]\n        \n        :else\n        (letfn \n          [(next-row [prev-row]\n                     (loop [dst [] \n                            src prev-row]\n                       (if (< (count src) 2)\n                         (cons 1 (reverse (cons 1 dst)))\n                         (recur (cons (+ (first src) (second src)) dst) (rest src)))))]\n          (nth (iterate next-row [1 1]) (- n 2)))))","problem":97,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":97,"code":"(fn row [n]\n  (cond\n    (= n 1) [1]\n    :else (let [pr (row (dec n))]\n            (concat [1] (map (partial apply +) (map vector pr (rest pr))) [1]))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":97,"code":"(fn pascal[n]\n  (if (= 1 n) [1]\n    (reduce \n     \t(fn[a x](conj a (apply + x)))\n     \t[]\n     \t(concat [[0 1]] (partition 2 1 (pascal (- n 1))) [[1 0]]))))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":97,"code":"(fn [num]\n    (loop [times 1\n           prev-row []]\n          (let [new-row (conj (map-indexed #(+ %2 (nth prev-row (inc %1) 0)) prev-row) 1)]\n               (if (= num times)\n                 new-row\n                 (recur (inc times) new-row)))))","user":"5f331015e4b0574c87022c37"},{"code":"(fn [a] \n   (nth (iterate (fn [x] \n                   (concat [1] (map #(apply + %) (partition 2 1 x)) [1])) '(1)) (dec a)))","problem":97,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":97,"code":"(fn [x]\n  (loop [res (concat [1] (map + [1] []) [1])\n         cnt 2]\n    (cond (= x 1) [1]\n          :else (if (= cnt x)\n                  res\n            (recur (concat [1] (map + res (rest res)) [1]) (inc cnt))))))","user":"559067ace4b0277789237670"},{"problem":97,"code":"(fn [n] (nth \n         (take n (iterate \n                  #(into [1] (into (mapv (fn [a b] (+' a b)) %, (rest %)) [1])) [1])) \n         (dec n)) )","user":"58c71509e4b021aa9917ed6e"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(flatten [1  \n      (map (fn [[a b]] (+ a b)) (partition 2 1 %)) 1]) [1]))))","user":"5d078e2de4b0cc9c915881fa"},{"code":"(fn[n] \n  (nth (iterate #(concat \n    '(1) \n    (map (partial apply +)\n    (partition 2 1 %)) '(1)) \n    [1]) \n  (dec n)))","problem":97,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":97,"code":"(fn pascals-triangle-row [n]\n  (map (comp last take)\n       (range n 0 -1)\n       (take n (iterate (partial reductions +) (take n (repeat 1))))))","user":"58ed713de4b056aecfd47d84"},{"code":"#(loop [c 0 acc []]\n  (let [binomial (fn [n k]\n    (let [a (inc n)]\n      (loop [b 1 c 1]\n        (if (> b k)\n            c \n            (recur (inc b) (* (/ (- a b) b) c))))))]\n  (if (> c (dec %))\n      acc\n      (recur (inc c) (conj acc (binomial (dec %) c))))))","problem":97,"user":"4e8ad247535d65386fec2111"},{"code":"(fn [x]\n    (-> (fn [p] (mapv + (cons 0 p) (conj p 0)))\n        (iterate [1])\n        (nth (dec x))))","problem":97,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":97,"code":"#(letfn [(next-row [pre-row]\n              (into [] (map + (concat [0] pre-row) (concat pre-row [0]))))\n            ]\n      (loop [pre-row [1],\n             count %]\n        (if (> count 1)\n          (recur (next-row pre-row) (dec count))\n          pre-row\n          )\n        )\n      )","user":"5c17467fe4b01240ff5671df"},{"code":"(fn [n] (last (take n (iterate (fn next-row [v] (vec (map + (apply conj [0] v) (conj v 0)))) [1]))))","problem":97,"user":"5353afa0e4b084c2834f4b03"},{"problem":97,"code":"(fn [n]\n  (last\n   (take n\n         (iterate\n          (fn next-row [previous-row]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1\n                                  (conj (into [0] previous-row) 0)))))\n          [1]))))","user":"5f7e91c8e4b0c071e6c840d8"},{"problem":97,"code":"#((fn p ([] (p [1]))\n    ([r] (if (= % (count r)) r (p (apply vector (map + (cons 0 r) (conj r 0))))))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev (pascal (dec n))]\n           (conj (apply vector 1 (for [[x y] (partition 2 1 prev)] (+ x y))) 1))))","problem":97,"user":"500ff421e4b0ae202717946f"},{"problem":97,"code":"(fn [x]\n  (loop [n 1 result [1]]\n    (if (= n x)\n      result\n      (recur (inc n) (concat \n                       [1] \n                       (map #(+ (first %) (last %)) (partition 2 1 result)) \n                       [1])))))","user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else\n        (let [p (pascal (dec n))]\n          (concat [1] \n                  (->> (interleave p p) rest drop-last \n                       (partition 2) (map #(reduce + %))) \n                  [1]))))","problem":97,"user":"51baff1be4b0fe3ecfb46443"},{"problem":97,"code":"(fn [n] (nth  (iterate #(map (partial apply  +) (partition 2 1 (concat [0] % [0]))) [1]) (dec n)))","user":"512b07f7e4b078b06821febb"},{"problem":97,"code":"(fn pascal-row [n]\n  (letfn [(f [r]\n            (let [rl (count r)\n                  calc-row (fn [i x]\n                             (if (or (= 0 i) (= rl i)) 1\n                                 (+ x (nth r (dec i)))))]\n              (if (= n (count r))\n                r\n                (->> (conj r 1)\n                     (mapv calc-row (range (inc rl)))\n                     f))))]\n    (if (= 1 n)\n      [1]\n      (f [1]))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":97,"code":"(fn [x]\n  (loop [tot [1] count 1]\n    (if (= x count)\n      tot\n      (recur (flatten (conj [] (first tot) (map (fn [x y] (+ x y)) tot (rest tot)) 1)) (inc count)))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [n]\n  (loop [c 1 vc 1 result [1]]\n    (if (= c n)\n      result\n      (let [new-val (* vc (/ (- n c) c))]\n        (recur (inc c) new-val (conj result new-val))))))","problem":97,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn pt [n] \n  (if (= n 1) \n    [1]\n    (let [p (pt (dec n))]\n      (vec \n        (map + (cons 0 p) (conj p 0))))))","problem":97,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"(fn\n  [n]\n  (loop [nn (dec n) row [1]]\n    (if (= 0 nn) row\n        (recur (dec nn)\n               (into []\n                     (concat [1] (map #(+ (nth % 0) (nth % 1))\n                                      (partition 2 1 row ))\n                             [1]))))))","problem":97,"user":"4fadbc3fe4b081705acca23f"},{"problem":97,"code":"(fn [n]\n  (letfn\n    [(next-row [row]\n       (conj (into [1] (for [[a b] (partition 2 1 row)] (+ a b))) 1))]\n    (nth (iterate next-row [1]) (dec n))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":97,"code":"(fn pascal [n]\n  (loop [i 1 r [1]]\n    (if (>= i n) r\n      (recur (inc i) (mapv + (conj r 0) (cons 0 r))))))","user":"5d929ceae4b0915913b1d412"},{"problem":97,"code":"(fn [n]\n  (let [make-line\n        (fn [line]\n          (vec (map-indexed\n                (fn [i _] (+ (get line (dec i) 0) (get line i 0)))\n                (range 0 (inc (count line))))))]\n    (last (take n (iterate make-line [1])))))","user":"56cf115de4b0ea9b8538f765"},{"code":"(fn f [n]\n  (last (take n (iterate #(vec (for [i (-> % (count) (inc) (range))] (+ (nth % (dec i) 0) (nth % i 0)))) [1]))))","problem":97,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"(fn triangle [n]\r\n  (if (= n 1)\r\n    [1]\r\n    (let  [x (conj (triangle (dec n)) 0)]\r\n      (vec (map + x (rseq x))))\r\n    ))","problem":97,"user":"4f1052b9535d64f603146418"},{"problem":97,"code":"(fn pasc [n]\n  (let [p (fn [v]\n            (vec (concat\n                   (vector (first v))\n                   (mapv +' v (conj (vec (drop 1 v)) 0)))))]\n    (loop [row [1]\n           i 1]\n      (if (= i n) row\n                  (recur (p row)\n                         (inc i))))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":97,"code":"(fn f [n] (if (= 1 n) \n             [n] \n             (let [prev (f (dec n))] (map #(+ (nth prev % 0) (nth prev (dec %) 0)) (range n))\n             )))","user":"55c13e73e4b01b9910ae2a2f"},{"code":"(fn [n]\n  (let [f #(reduce * (take % (iterate inc 1)))\n        c (fn [n k] (/ (f n) (* (f k) (f (- n k)))))]\n    (map #(c (dec n) %) (range n))))","problem":97,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn pas-triange [n]\n  (let [f (fn [[a b & coll]]\n\t\t((fn [a b coll result]\n\t\t(cond\n\t\t\t(empty? coll) (conj result (+ a b))\n\t\t\t:else (recur b (first coll) (rest coll) (conj result (+ a b))))) a b coll []))]\n\t\t(cond\n\t\t\t(> 1 n) nil\n\t\t\t(= 1 n) '(1)\n\t\t\t(= 2 n) '(1 1)\n\t\t\t:else (flatten (conj [] 1 (f (pas-triange (dec n))) 1)))))","problem":97,"user":"501c1492e4b086d93747d180"},{"problem":97,"code":"(fn p-tri\n  [row]\n  (cond\n    (= 1 row) [1]\n    (= 2 row) [1 1]\n    :else\n    (loop [final [] idx 0]\n      (if (= idx (dec row))\n        (conj final 1)\n        (if (= idx 0)\n          (recur (conj final 1) (inc idx))\n          (let [last-row (p-tri (dec row))]\n            (recur (conj final (+ (get last-row idx) (get last-row (dec idx)))) (inc idx))))))))","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"#(last (take %                                                          \n (iterate                                                                       \n  (fn [x]                                                                       \n    (concat [1]  (map (fn [[i j]] (+ i j)) (partition 2 1 x) ) [1] )) [1])  ) )","problem":97,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn [n] (reductions #(int (* % (/ (- n %2) %2))) 1 (range 1 n)))","problem":97,"user":"4fb3b865e4b081705acca2a2"},{"problem":97,"code":";; First solution\n;(fn [line]\n;  (loop [cur [1] i 1]\n;    (if (= i line)\n;      cur\n;      (let [nxt (conj\n;                 (into '(1) (map + cur (drop 1 cur)))\n;                 1)]  \n;        (recur nxt (inc i))))))\n(fn [l] \n  (nth \n   (iterate \n    #(concat [1] (map + % (rest %)) [1]) \n    [1])\n   (dec l)))","user":"573118ebe4b0cd1946bd0fbd"},{"problem":97,"code":"#(loop [n % \n        t [1]]\n  (if (= 1 n) \n      t\n      (recur \n        (dec n) \n        (concat [1] (mapv + t (rest t)) [1]))))","user":"561047eae4b05f002753df6d"},{"code":"(fn pd [n] \n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   (>= n 3) (conj (vec (cons 1(map + (pd (- n 1)) (rest (pd (- n 1)))))) 1)))","problem":97,"user":"4e6e3aac535d5021c1a89603"},{"problem":97,"code":"(fn [n]\n  (->> (iterate #(map (fn [[x y]] (+ x y))\n                 (partition 2 1 (flatten (vector 0 % 0))))\n           [1])\n       (take n)\n       (last)\n    ))","user":"5eb741e4e4b00a66d4a9523b"},{"code":"#(nth (iterate (fn [c] (vec (map + (cons 0 c) (conj c 0)))) [1]) (dec %))","problem":97,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn [limit]\n  (letfn [(f [k-1 k n]\n          (long (* k-1 (/ (+ n (- 1 k)) k))))]\n    (loop [prev-k 1, k 1, n (- limit 1), res [1]]\n    (if (> k n)\n      res\n      (recur (f prev-k k n) (+ k 1) n (conj res (f prev-k k n)))))))","problem":97,"user":"50b29029e4b03ea880433563"},{"problem":97,"code":"(letfn [(nxt [xs] \n          (map + (conj (vec xs) 0) (cons 0 xs)))]\n  (fn [n]\n    (if (= n 1) [1]\n      (nth (iterate nxt [1]) (- n 1)))))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn pasc [n] (if (= n 1) [1]\n   (concat [1] (map #(reduce + %) (partition 2 1 (pasc (dec n)))) [1])\n    ))","problem":97,"user":"51bf4560e4b013aa0d74b817"},{"problem":97,"code":"(fn pascal-tri [n]\n  (if (= n 1)\n    [1]\n    (let [t (pascal-tri (dec n))]\n      (mapv + (concat [0] t) (concat t [0])))))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":97,"code":"(fn [n]\n   (loop [c (dec n)\n          res [1]]\n     (if (= c 0)\n       res\n       (recur (dec c)\n              ((fn next [cr nr]\n                 (if-let [[f & r] cr]\n                   (if (nil? r)\n                     (next r (conj nr 1))\n                     (next r (conj nr (+ f (first r)))))\n                   nr))\n               res\n               [1])))))","user":"55860905e4b001b0851d7516"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) \n    [1]\n    (let [prev (pascal (dec n))]\n      (into [] (map + (cons 0 prev) (conj prev 0))))))","user":"54c23252e4b045293a27f5fc"},{"code":"(fn f [n]\n  (if (= n 1)\n     [1]\n     (let [co1 (f (dec n))]\n       (map +\n         (concat co1 [0])\n         (concat [0] co1)))))","problem":97,"user":"4e5bbadb535d8a8b8723a2b9"},{"code":"(fn [x]\n  (let [factorial (fn [n] (reduce * (range 1 (inc n))))\n        binomial (fn [n k] (/ (factorial n) (* (factorial (- n k)) (factorial k))))]\n      (reduce conj [] (map (partial binomial (dec x)) (range x)))))","problem":97,"user":"4f1bee08535d64f60314647e"},{"problem":97,"code":"(fn [n]\n    (letfn [(p [x] (map + (concat x [0]) (concat [0] x)))]\n      (nth (iterate p [1]) (dec n))\n      )\n    )","user":"577829f9e4b0979f8965165a"},{"code":"(fn [n] \n  (nth \n    (iterate \n     #(flatten [1 (map + (butlast %) \n                         (next %)) \n                1])\n     [1]) \n    (- n 1)))","problem":97,"user":"4e498df9535dc968683fc4c4"},{"code":"(fn [x]\n  (loop [i 1 t [[1] [1 1]] ]\n    (if (>= i x)\n      (nth t (dec x))\n      (recur (inc i)\n        (conj t (conj (into [1]\n                      (for [n (partition 2 1 (last t))]\n                            (reduce + n))) 1))))))","problem":97,"user":"4eb955da535dfed6da9c6d50"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (cond\n    (= n 1)[1]\n    :else\n    (let [next-row (fn [row] (map + (cons 0 row) (conj row 0)))]\n      (vec (next-row (pascal-triangle (dec n))))\n      )\n    )\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":97,"code":"(fn pascals-triangle\n  [n]\n  (letfn [(f [row rem-iterations]\n            (if (> rem-iterations 1)\n              (recur\n               (concat [1] (map\n                            #(+ (nth row %) (nth row (inc %)))\n                            (range 0 (dec (count row)))) [1]) (dec rem-iterations))\n              row))]\n    (f [1] n)))","user":"55a9e0fee4b0988bba2ad945"},{"problem":97,"code":"(fn cal-triangle\n    ([n] (if (seq? n) (into [] (map #(cal-triangle %) n)) (into [] (map #(cal-triangle n %) (range 1 (inc n))))))\n    ([n k] (if (or (= n 1) (= k 1) (= n k) ) 1  (+ (cal-triangle (dec n) (dec k)) (cal-triangle (dec n) k)))))","user":"575bd5f9e4b02ea114799365"},{"problem":97,"code":"(fn p [n]\n    (last (take n (iterate\n                     #(concat [1] (map + (rest %) %) [1]) [1])))\n    )","user":"5921a080e4b09b4ee5954c77"},{"problem":97,"code":"(fn [x]\n  (if (= x 1)\n    [1]\n    (reduce (fn [ls x]\n              (map + \n                   (concat ls [0])\n                   (concat [0] ls)))\n            [1]\n            (range 1 x))))","user":"55f73078e4b06e875b46cea4"},{"code":"#(loop [n 1\n        l [1]]\n   (if (= n %) l\n       (recur (inc n)(vec (map + (cons 0 l)(conj l 0))))))","problem":97,"user":"50a83315e4b054305ba5a830"},{"problem":97,"code":"(fn [n]\n  (->> [(dec n) k (- (dec n) k)]\n       (map #(apply * (range 2 (inc %))))\n       (apply /)\n       (for [k (range n)])))","user":"575cbe44e4b02ea114799374"},{"problem":97,"code":"(fn [row-num] \n  (if (= 1 row-num)\n    ;; return a sequence for consistency\n    (seq [1])\n    (let [get-next-row (fn [prev-row]\n                         (loop [next-row []\n                                prev-row prev-row]\n                           (if (<= (count prev-row) 1)\n                             (concat [1] next-row [1])\n                             (let [sum (+ (first prev-row) (second prev-row))]\n                               (recur (conj next-row sum) (rest prev-row))))))]\n      (loop [prev-row [1]]\n        (let [next-row (get-next-row prev-row)]\n          (if (= (count next-row) row-num)\n            next-row\n            (recur next-row)))))))","user":"55344b75e4b09218d5f44f99"},{"problem":97,"code":"(fn [x] \n  (letfn [ \n    (nxt [n] \n      (loop [acc [1] rst n] \n        (if (< (count rst) 2 ) \n          (conj acc 1) \n          (recur (conj acc (apply + (take 2 rst))) (rest rst))\n        )\n      )\n    )]\n    \n  ((apply comp (repeat (dec x) nxt)) [1])\n))","user":"533ea7e8e4b085b17e897d94"},{"problem":97,"code":"(fn pascal-row [n]\n  (if (= 1 n) \n    [1]\n    ;; get the previous row and add 0 at the beginning and end (for the sum)\n    (let [prev-row (concat [0] (pascal-row (dec n)) [0])]\n      (loop [[a b & xs] prev-row\n             acc []]\n        (if (nil? b)\n          acc\n          (recur (cons b xs) (conj acc (+ a b))))))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":97,"code":"(fn [n] \n  (loop [i [1] n n]\n    (if (pos? (dec n))\n      (recur (map #(apply + %) (partition 2 (concat '(0) (interleave i i) '(0)))) (dec n)) \n      i)))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [n] (loop [n n acc [1]] (if (= n 1) acc (recur (dec n) (vec (map + (conj acc 0) (into [0] acc)))))))","problem":97,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [x]\n  (loop [v [1]]\n    (if (= x (count v))\n      v\n      (recur (vec (map + (cons 0 v) (conj v 0)))))))","problem":97,"user":"512d3304e4b040332b905b2d"},{"code":"#(loop \n   [f (for [k (range (dec %))] (/ (- (dec %) k) (+ k 1))) r '(1)]\n   (if (empty? f)\n     r\n     (recur (rest f) (cons (* (first f) (first r)) r))))","problem":97,"user":"52160dbee4b0bf4bffd29cb3"},{"problem":97,"code":"(fn [n]\n  (letfn [(nextpascal [xs]\n            (vec (map (fn [[a b]] (+ a b)) (partition 2 1 (cons 0 (conj xs 0))))))]\n    (reduce (fn [a b] (nextpascal a)) [1] (range (dec n)))))","user":"53e9a15be4b036ad0777e4ae"},{"code":"(fn [n]\n  (let [f #(apply * (range 1 (inc %)))\n        c #(/ (f %) (f %2) (f (- % %2)))\n        n' (dec n)]\n  (map #(c n' %) (range n))))","problem":97,"user":"50479524e4b0371827a27bc4"},{"problem":97,"code":"(fn f [n]\n  (letfn [(helper [row]\n            (-> (cons 1\n                      (->> (partition 2 1 row)\n                           (map #(apply + %))))\n                vec (conj 1)))]\n    (loop [row [1]\n           i 1]\n      (if (= i n)\n        row\n        (recur (helper row)\n               (inc i))))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn p [n] (if (= 1 n) [1]\n  (let [pp (p (dec n))]\n    (vec (map + (cons 0 pp) (conj pp 0))))))","problem":97,"user":"4db1bfe21254ad5b4805fa71"},{"problem":97,"code":"(fn pascal [n] \n  (if (= n 1)\n      [1]\n      (loop [pre (pascal (dec n))\n             sol [1]]\n        (if (< (count pre) 2)\n            (conj sol 1)\n            (recur (rest pre) (conj sol (+ (first pre) (second pre))))))))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn f [x]\n  (if (= x 1)\n    [1]\n    (let [y (f (- x 1))]\n      (map + (conj (vec y) 0) (into [0] y)))))","problem":97,"user":"5102489de4b00c483ae176f6"},{"code":"(fn [x]\n     (map (fn [k]\n            (reduce #(* %1 (/ (- (dec x) %2) (- k %2)))\n                    1 (range k)))\n          (range x)))","problem":97,"user":"50d8de3fe4b01f0871336e72"},{"problem":97,"code":"(fn [n]\n  (loop [k 1 row [1]]\n    (if (>= k n)\n      row\n      (recur (inc k)\n             (conj row (* (last row)\n                          (/ (- n k) k)))))))","user":"53968a70e4b0b51d73faaee0"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         pascal [1]]\n    (if (= i n)\n      pascal\n      (recur (inc i) (map + (conj (apply vector pascal) 0) (conj (apply list pascal) 0))))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":97,"code":"(fn pascalT [nth]\n  (cond (= nth 1) [1]\n        :else (let [prev (pascalT (- nth 1))]\n                (cons 1\n                      (conj \n                       (into []\n                             (map (fn [a b] (+ a b))\n                                  prev\n                                  (rest prev)))\n                       1\n                       ))\n                )))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":97,"code":"(fn [limit]\n  (let [flank #(concat [1] % [1])]\n    (loop [i 1 l limit acc [1]]\n      (if (= i l)\n        acc\n        (recur (inc i) l (flank (map (partial apply +) (partition 2 1 acc))))))))","user":"5f665d45e4b02876ed9fd02f"},{"code":"(fn [n]\r\n    (nth\r\n      (iterate\r\n        (fn [nums]\r\n          (vec\r\n            (map + (conj nums 0) (cons 0 nums))))\r\n        [1])\r\n      (dec n)))","problem":97,"user":"50436470e4b034ff00315d23"},{"problem":97,"code":"(fn [n]\n  (loop [v [1]]\n    (if (= (count v) n)\n      v\n      (recur\n       ((fn [in]\n          (->> (partition 2 1 in)\n               (clojure.walk/walk #(+ (first %) (second %))\n                     #(conj (into [] (cons 1 %)) 1))))\n        v)))))","user":"5dab11cde4b000c986472c45"},{"problem":97,"code":"(fn [x]\n\n  (let [fn-pt (fn pascal-triangle [n c coll]\n                 (if (> n c)\n                   (cond\n                    (= 1 c) (pascal-triangle n (inc c) [1])\n                    :default (pascal-triangle n (inc c)\n                                              (map #(+ (first %) (second %)) (partition 2 1 (concat [0] coll [0])))))\n                   coll))]\n    (fn-pt (inc x) 1 [])))","user":"52c5c1c8e4b0c2d177d620fc"},{"problem":97,"code":"(fn [n]  \n  (if (= n 1)  \n    [1]  \n  (loop [m 2   \n         r [1]]  \n    (let [next-r (into [] (map #(apply + %) (partition 2 1(concat [0] r [0]))))]   \n      (if (= m n)  \n        next-r  \n        (recur (inc m) next-r))))))","user":"5a4443cae4b0447ef91cc60f"},{"problem":97,"code":"(fn [x]\n  (let [pt ((fn ptr [pt]\n     (fn [n]\n       (map pt (repeat n) (range 1 (+ n 1)))\n       )\n     )\n   (fn pt [n m]\n\t\t(if (or (= n 1) (= m 1) (= n m)) 1\n          (+ (pt (- n 1) m) (pt (- n 1) (- m 1)))\n          )\n     )\n   )]\n  (if (sequential? x)\n    (map pt (range 1 x))\n    (pt x)\n    )\n    )\n  )","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":97,"code":"(fn [n]\n  (loop [funk (fn [sequ]\n                (loop [result (conj [] 1)\n                       st 0\n                       end 1\n                       temp sequ]\n                  (if (empty? (rest temp)) (conj result 1)\n                    (recur (conj result (+ (nth sequ st) (nth sequ end)))\n                           (+ st 1)\n                           (+ end 1)\n                           (rest temp)))))\n         result [1 1]\n         end (- n 2)]\n    (if (= n 1) [1]\n      (if (= end 0) result\n        (recur funk (funk result) (- end 1))))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"code":"(fn pascal [n]\n  (letfn [(comb [n k]\n            (reduce #(/ (* %1 (+ %2 (- n k))) %2)\n              1 (range 1 (inc k))))]\n    (map (partial comb (dec n)) (range 0 n))))","problem":97,"user":"527cd633e4b0757a1b17136f"},{"problem":97,"code":"(fn pascal-triangle [n]\n\t(letfn [(next-line [state]\n\t\t(concat [1] (map + (rest state) state) [1]))]\n\t\t(if (= n 1) \n\t\t\t[1]\n\t\t\t(reduce (fn [state n] (next-line state)) [1] (range (dec n))))))","user":"57c0917be4b05aa3c4741c95"},{"problem":97,"code":"#(loop [i 1, s [1]]\n   (if (= i %)\n     s\n     (recur (inc i) (concat [1] (map + s (rest s)) [1]))))","user":"5b77248ae4b047b03b2036e7"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [prev (pascal (dec n))]\n      (into [] (for [i (range n)]\n                 (+ (get prev (dec i) 0) (get prev i 0)))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         row [1]]\n    (if (= i n)\n      row\n      (let [parts (partition 2 1 row)\n        \tnext-row (cons 1 \n                           (conj (vec (map #(apply + %) parts)) 1))]\n        (recur (inc i) next-row)))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev-pascal (pascal (- n 1))]\n      (vec\n        (for [i (range n)]\n          (if (or (= i 0) (= i (- n 1)))\n            1\n            (+ (get prev-pascal (- i 1)) (get prev-pascal i))))))))","problem":97,"user":"4ec6559a535d6d7199dd36c9"},{"problem":97,"code":"(fn p [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (concat\n     [1]\n     (map #(reduce + %) (partition 2 1 (p (- n 1))))\n     [1])))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [r]\n  (loop [result []\n         c 0]\n    (if (= c r)\n      result\n      (if (= c 0)\n        (recur (conj result 1) (inc c))\n        (let [v-1 (get result (dec c))\n              v   (* v-1 (/ (- r c) c))]\n          (recur (conj result v) (inc c)))))))","problem":97,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":97,"code":"(fn pascalTriRow[n]\n  (if (= 1 n)\n    [1]\n    (vec (concat [1] (vec (map #(apply + %) (partition 2 1 (pascalTriRow (- n 1))))) [1]))))","user":"5626447fe4b00e49c7cb47bd"},{"code":"#(loop [r %\n        v '(1)\n        c 1]\n    (if (= r 1)\n  v\n    (let [x (* (first v) (/ (- r c) c))\n\t  n (cons x v)]\n      (if (= x 1)\n        n\n      (recur r n (inc c))))))","problem":97,"user":"4f0333f6535dcb61093f6a77"},{"problem":97,"code":"(fn [x]\n   (let [n (dec x)](reduce #(conj %1 (*(last %1) %2)) [1] (map / (range n 0 -1) (range 1 (inc n))))))","user":"5a8e9a7ae4b05369db4d2528"},{"code":"(fn [n]\n  (loop [i 1\n         r [1]]\n    (if (= n i)\n      r\n      (recur (inc i) (concat '(1) (map #(apply + %) (partition 2 1 r)) '(1))))))","problem":97,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn pascal-row [n]\n  (cond \n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (concat [1] \n                  ((fn pascal-row-rec [s]\n                    (when (not (nil? (next s)))\n                      (cons (+ (first s) (second s)) (pascal-row-rec (next s)))))\n                    (pascal-row (dec n))) \n                  [1])))","problem":97,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn pascal [n] (cond \n             (= n 1) [1]\n             (= n 2) [1 1]\n             :else (let [previous (pascal (- n 1))] (apply vector (flatten [1 (map (fn [x] (+ (previous x) (previous (- x 1)))) (range 1 (- n 1))) 1])))))","problem":97,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn [n] \n  (loop [res [1]]\n   (if (= (count res) n)\n    res\n    (recur (concat [1]\n            (for [i (range (count (butlast res)))] \n              (+ (nth res i) (nth res (inc i))))\n            [1])))))","problem":97,"user":"50de11b2e4b061dbdced7217"},{"problem":97,"code":"(fn pascal-tri [n]\n   (condp = n\n     1 [1]\n     (let [last (pascal-tri (dec n))\n           last-a (concat [0] last)\n           last-b (concat last [0])\n           ]\n       (vec (map + last-a last-b)))))","user":"5dd1fb19e4b0948ae9d9ad51"},{"code":"(fn [n]\n  (letfn [(pt [n i]\n            (cond\n              (= i 1) 1\n              (= i n) 1\n              :else (+ (pt (- n 1) (- i 1))\n                      (pt (- n 1) i))))]\n      \t\t(map #(pt n %) (range 1 (inc n)))))","problem":97,"user":"515e8ce2e4b049add99a053d"},{"problem":97,"code":"(fn [x]\n  (reduce\n   (fn [prev-row x]\n     (into []\n       (concat \n         [1]\n         (for [i (range (count prev-row))]\n           (let [curr-item (get prev-row i) next-item (get prev-row (inc i))]\n             (if\n               (nil? next-item)\n               curr-item\n               (+ curr-item next-item)))))))\n   []\n   (range x)))","user":"58d2af83e4b03c36ff7e5907"},{"problem":97,"code":"(fn pascal [n]\n  (loop [still (dec n)\n         row [1]]\n    (if (= 0 still)\n      row\n      (let [l (concat [0] row)\n            r (concat row [0])\n            nextrow (map + l r)]\n        (recur (dec still) nextrow)))))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn foo [n]\n  (if (= n 1)\n    [1]\n    (conj \n      (loop [input (foo (dec n)) output [1]]\n        (if (= (count input) 1)\n          output\n          (recur (rest input) (conj output (+ (first input) (second input)))))) 1)))","problem":97,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn pascal-t [num]\n    (cond\n     (= 1 num) [1]\n     (= 2 num) [1 1]\n     :else (let [prior (pascal-t (- num 1))\n                 current (loop [accum ()\n                                l prior]\n                           (if (or (empty? l) (= 1 (count l)))\n                             accum\n                             (recur (cons (+ (first l) (first (rest l))) accum)\n                                    (rest l))))]\n             (concat [1] current [1]))))","problem":97,"user":"53487737e4b084c2834f4a59"},{"code":"(fn [n]\n  (let [choose (fn choose [n k] (if (= k 0) 1 (* (choose n (dec k)) (/ (- n (dec k)) k))))]\n    (map (partial choose (dec n)) (range n))))","problem":97,"user":"4e89ff3d535d3e98b802328a"},{"problem":97,"code":"(fn [n]\n\t(nth\n\t\t(iterate \n\t\t\t(fn [x]\n\t\t\t\t(if (empty? x)\n\t\t\t\t\t[1]\n\t\t\t\t\t(flatten [1 (map #(apply + %) (partition 2 1 x)) 1])))\n\t\t\t[]) n))","user":"57ccedaae4b0c746388ab88e"},{"problem":97,"code":"(fn pas [n]\n  (if (= n 1)\n    '(1)\n    (concat (conj (map #(apply + %) (partition 2 1 (pas (dec n)))) 1) '(1))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn pascal [row]\n  \n  (if (<= row 1)\n    [1]\n    (let [prev-row (pascal (dec row))\n          indicies (range row)\n          new-row (map (fn [index]\n                         ((fn pascal-cell [index prev-row]\n    (let [cell-value (+\n                       (nth prev-row (- index 1) 0)\n                       (nth prev-row (- index 0) 0))]\n      cell-value)) index prev-row))\n                       indicies)]\n      new-row)))","problem":97,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":97,"code":"(fn pascals-nth-row\n  [n]\n  (case n\n    1 [1]\n    (loop \n      [idx 0 row []]\n      (if (= idx (- n 2))\n      (cons 1 (conj row 1))\n      (recur \n       (+ idx 1) \n       (let [next-row-up (pascals-nth-row (- n 1))] (conj row (+ (nth next-row-up idx) (nth next-row-up (+ idx 1))))))))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [n]\n  (nth\n    (iterate #(map +' (concat [0] %) (concat % [0])) [1])\n   (dec n)\n   \n   ))","problem":97,"user":"4fa340b4e4b081705acca18c"},{"problem":97,"code":"(fn p [n]\n  (letfn [\n          (next-row [s] (concat [1] (map #(reduce + %) (partition 2 (interleave s (rest s)))) [1] ))]\n    (last (take n (iterate next-row [1])))))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":97,"code":"(fn [n]\n  (let [f (comp #(conj % 1)\n                 #(into [1] %)\n                 #(mapv (partial apply +) %)\n                 #(partition 2 1 %))]\n      (nth (conj (iterate f [1 1]) [1]) (dec n))))","user":"54eee38ce4b024c67c0cf878"},{"problem":97,"code":"(fn pascal-row [n]\n    (if (= n 1)\n        [1]\n        (let [prev-row (pascal-row (dec n))]\n            (into [] (concat \n                [1]\n                (apply vector (for [x (range (dec (count prev-row)))]\n                    (apply + (subvec prev-row x (+ x 2)))))\n                [1])))))","user":"53a94b63e4b047364c044434"},{"problem":97,"code":"#(nth (iterate\n       (fn [row]\n         (concat [1]\n                 (loop \n                   [[h & rest] row\n                    acc [] \n                    ] \n                   \n                   (if (nil? rest) acc\n                     (recur rest (conj acc (+ h (first rest) ) ) \n                            )\n                     )\n                   )\n                 [1]\n                 ))\n       \n       [1]\n       )\n      (dec %))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":97,"code":"(fn pascal-row [n]\n  (letfn [(fac [n] (if (= 0 n) 1 (* n (fac (dec n)))))\n          (c [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]\n    (for [i (range n)] (c (dec n) i))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":97,"code":"(fn [line]\n  (let\n    [n (dec line)\n     fkt (fn [n]\n  \t\t\t(reduce * (range 1 (inc n))))]\n    (into [] \n          (for [k (range (inc n))]\n            (/ (fkt n) \n               (* (fkt k) (fkt (- n k))))))))","user":"5640eb50e4b08d4f616f5eec"},{"problem":97,"code":"(fn pascal[n]\n  (reductions #(* %1 \n                  (/ (- n \n                        %2) \n                     %2)) 1 (range 1 n)) )","user":"54f86b8ce4b01ecee9d88828"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else (loop [i 2 x (pascals-triangle 2)]\n                (if (= i n) x\n                    (let [y (map #(reduce + %) (partition 2 (interleave x (rest x))))]\n                      (recur (inc i) (concat [1] y [1])))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":97,"code":"(fn pt [cnt]\n  (if (= cnt 1) [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pt (dec cnt)))) [1])))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn foo [row-num]\n   (if (= row-num 1)\n     '(1)\n     (let [prev-row (foo (dec row-num))]\n       (map (fn [x]\n              (cond\n                (= x 0) 1\n                (= x (dec row-num)) 1\n                :else (+ (nth prev-row (dec x))\n                         (nth  prev-row x))))\n            (range row-num)))))","problem":97,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [n] (nth (iterate (fn [r] (map (partial reduce +) (partition 2 1 (concat [0] r [0])))) [1]) (dec n)))","problem":97,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn pascals [n]\n  (if (= 1 n) [1] ;; first row, nothing below\n      (let [prev-n   (dec n)\n            prev-row (pascals prev-n)]\n        (loop [pos 0\n               acc []]\n          (cond\n           (zero? pos) (recur (inc pos) (conj acc 1))\n           (= pos prev-n) (conj acc 1)\n           :else\n           (recur (inc pos)\n                  (conj acc (+ (prev-row (dec pos))\n                               (prev-row pos)))))))))","problem":97,"user":"4fd16778e4b04c3a95aa040f"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (letfn [(f [acc n]\n            (if (= n 1)\n              acc\n              (let [pairs (partition 2 1 acc)\n                    sums (map (partial apply +) pairs)]\n                (recur (concat [1] sums [1]) (dec n)))))]\n    (f [1] n)))","user":"5d272077e4b092dab7f59c64"},{"problem":97,"code":"(fn __ [x]\n  (letfn [(step [v] (map (partial apply +) (cons '(1) (partition-all 2 1 v))))]\n    (loop [x x y [1]]\n      (if (> x 1)\n        (recur (dec x) (step y))\n        y))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":97,"code":"(fn my-func [n]\n  (case n\n        1 [1]\n    \t2 [1 1]\n        (let [prev (my-func (dec n))]\n          (flatten [1 (map + (butlast prev) (rest prev)) 1]))))","user":"55380eeae4b09218d5f44fd9"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n         (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","problem":97,"user":"4f48f587e4b0d56e7bb92be2"},{"problem":97,"code":"(fn [n]   (loop [n (dec n)\n         prev [1]]\n    (cond\n      (= n 0) prev\n      :default (let [prow (partition 2 1 prev)]\n                 (recur (dec n)\n                        (conj (into [1] (map (partial apply +) prow)) 1))))))","user":"4e48b61d535dc968683fc4be"},{"problem":97,"code":"(fn [n] (first (drop (dec n) (iterate (fn [xs] (map + (cons 0 xs) (lazy-cat xs [0]))) [1]))))","user":"4ea03f70535d7eef308072a1"},{"problem":97,"code":";;https://en.wikipedia.org/wiki/Pascal%27s_triangle\n;;this solution only calculates the needed row\n;;it's actually 3 functions but i need to stick it into the __, so enjoy reading this\n;;pretty fast and works for some really big rows: user=> (time (prow 49999)) \"Elapsed time: 4639.246035 msecs\", although repl crashes when tries to print it\n(fn prow\n  ([n]\n   (cond\n     (= n 1) [1]\n     (= n 2) [1 1]\n     :else (prow 1 (- n 1) 1 [1]) \n     )\n    )\n  ([p n k a]\n   (letfn [(pnth [p n k] (* p (/ (- (+ 1 n) k) k)))]\n     (if (<= k n)\n       (recur (pnth p n k) n (inc k) (cons (pnth p n k) a))\n       a\n))))","user":"58eed4c5e4b056aecfd47db7"},{"code":"(fn this [row]\n  (if (= row 1)\n    [1]\n    (let [row-1 (this (- row 1))]\n      (conj (vec (conj (map + (rest row-1) (butlast row-1)) 1)) 1))))","problem":97,"user":"4ec12577535dfed6da9c6da8"},{"problem":97,"code":"(fn pascal-nth-row [n]\n  (letfn [(lazy-pascal-seq ([x] (letfn [(pascal-row [prevrow] \n                           (concat [1] (map #(apply + %) (partition 2 1 prevrow)) [1]))]\n         (let [nex (vec (pascal-row x))] \n             (lazy-seq (cons nex (lazy-pascal-seq nex)))))))]\n    (let [lps (concat [[1] [1 1]] (lazy-pascal-seq [1 1]))]\n      (last (take n lps)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn\n  [n]\n  (let [n (dec n)]\n    (reduce (fn [m k] (conj m \n                           (* (get m k) \n                              (/ (- n k) (+ k 1))))) \n           [1] \n           (range n))))","problem":97,"user":"5073de20e4b054001656acca"},{"code":"(fn pascals-triangle [n]\n  (if (= n 1)\n    [1]\n    (concat\n      [1]\n      (map #(apply + %)\n        (partition 2 1 (pascals-triangle (dec n))))\n      [1])))","problem":97,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn [i] \n  (let \n    [p (fn [r] \n         (map (partial apply +) (partition 2 1 (concat [0] r [0]))))] \n         (reduce (fn [x y] (p x))[1] (range (dec i)))))","problem":97,"user":"52d7a930e4b09f7907dd1379"},{"code":"(fn [n]\n  (reduce #(conj % (/ (* (last %) (- n %2)) %2)) \n          [1] (range 1 n)))","problem":97,"user":"523ea111e4b057c4b7cd0a65"},{"problem":97,"code":"(fn [n]\n  (loop [n (dec n)\n         r (vector 1)]\n    (if (zero? n)\n      r\n      (recur (dec n)\n             (concat [1]\n                     (map  #(+ (nth r %) (nth r (dec %)))\n                           (range 1 (count r)))\n                     [1])))))","user":"5d5166d9e4b0776584bd6f5e"},{"problem":97,"code":"(fn [n] \n  (letfn [(fact [x] (reduce * (range 1 (inc x))))] \n    (let [n (dec n) fact_n (fact n)] \n      (map #(/ fact_n (* (fact %) (fact (- n %)))) (range (inc n))))))","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn [x]\n  (loop [cnt (if (coll? x) (count x) x) acc []]\n    (if (zero? cnt)\n      (last acc)\n      (recur (dec cnt) (conj acc ((fn [p]\n                                    (if (nil? p)\n                                      [1]\n                                      (vec (concat [1] (map #(reduce + %) \n                                                            (partition 2 1 p)) \n                                                   [1])))) (last acc)))))))","problem":97,"user":"4e77c1db535d324fb2983d72"},{"code":"#(loop [i 1 row [1]]\n  (if (= i %) \n    row\n    (let [cnt          (count row)\n          out-range?   (fn [pos] (or (< pos 0) (>= pos cnt)))\n          prev-row-val (fn [pos] (if (out-range? pos) 0 (row pos)))\n          cur-range    (range 0 (inc cnt))\n          cur-row      (for [pos cur-range] (+ (prev-row-val (dec pos)) (prev-row-val pos)))]\n      (recur (inc i) (vec cur-row)))))","problem":97,"user":"5127e504e4b03a34742b4302"},{"problem":97,"code":"#(loop [c % row [1]]\n   (if (> c 1) (recur (dec c) (conj (vec (conj (map + row (rest row)) 1)) 1))\n               row))","user":"56baab13e4b0f26550335948"},{"problem":97,"code":"(fn PascalsTriangle [n]\n  (reduce (fn [x y] \n            (vec (map (fn [n1 n2] \n                        (+ n1 n2)) (conj x 0) (concat [0] x)))) \n          [1] \n          (range (dec n))))","user":"607508f3e4b069485764de54"},{"code":"(fn pascal-row [row]\n  (letfn [(fact [x]\n            (apply * (range 1 (inc x))))\n          (n-choose-k [n k]\n            (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(n-choose-k (dec row) %) (range row))))","problem":97,"user":"51430fb2e4b0c172af7558ce"},{"problem":97,"code":"(fn Triangule [n]\n    (if (= n 1)\n      [1]\n      (let [next-row (fn [row] (map + (cons 0 row) (conj row 0)))]\n        (vec (next-row (Triangule (dec n)))))))","user":"5a99b766e4b0d174b936c7a8"},{"problem":97,"code":"(fn [x]\n  (let [factor (fn [a] (reduce * (range 1 (inc a))))\n        n (dec x)]\n    (for [k (range (inc n))]\n      (/ (factor n) (factor k) (factor (- n k))) )))","user":"5649b1b0e4b0284900eef646"},{"code":"(fn pascal [n]\n  (if (= n 1)\n      [1]\n      (let [prev (pascal (dec n))]\n      (concat [1] (map + prev (rest prev)) [1]))))","problem":97,"user":"4e4ca885535dc968683fc4df"},{"code":"(fn pas \r\n  ([x] (pas (dec x) [1]))\r\n  ([x res] (if (> x 0) (recur (dec x) (conj (map #(reduce + %) (partition-all 2 1 res)) 1)) res))\r\n  )","problem":97,"user":"4e44358f535dc968683fc4a8"},{"problem":97,"code":"(fn [x] ((fn p [i c] (if (= x i) c (p (inc i) (map #(apply + %) (partition 2 1 (flatten [0 c 0])))))) 1 [1]))","user":"52a267c6e4b04e0c58e87bef"},{"code":"(fn [n]\n(nth (iterate \n  (fn [row]\n    (map\n       (fn [i]\n         (if (or (= i 0) (= i (count row)))\n           1\n           (+ (nth row (dec i)) (nth row i))\n         )\n       )\n       (range (inc (count row)))\n     )\n  )\n[]\n) n)\n)","problem":97,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn [n]\n  (loop [i 1 row [1]]\n    (if (>= i n)\n      row\n      (recur\n       (inc i)\n       (vec\n        (map (partial apply +)\n                      (partition 2 (interleave (into [0] row)\n                                               (conj row 0)))))))))","problem":97,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn pascal [x]\n  (if (= x 1) [1]\n    (let [p (pascal (dec x))]\n      (let [le (cons 0 p) ri (conj (apply vector p) 0)]\n        (for [n (range x)]\n          (+ (nth le n) (nth ri n))\n        )\n      )\n    )\n  )\n)","problem":97,"user":"4ea57300535d7eef308072d5"},{"problem":97,"code":"(fn pasc-tri-row\n  [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (map \n           #(cond \n              (= % 0) 1 \n              (= % (dec n)) 1 \n              :else (let [prev-row (pasc-tri-row (dec n))] (+ (nth prev-row %) (nth prev-row (dec %))))) \n           (range n))))","user":"59f44189e4b0966464fe6aab"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (- n 1))]\n      (into [1] (conj (mapv + prev (rest prev)) 1 ))\n      )\n    ))","user":"594263cbe4b060784b3b790a"},{"code":"(fn [n]\n  (letfn [(next-row [row]\t\t\t\n\t\t\t(lazy-seq (cons row (next-row (cons 1 (concat (map + row (rest row)) [1]))))))] (nth (next-row [1]) (dec n))))","problem":97,"user":"4ef5c7ce535dced4c769f248"},{"problem":97,"code":"(fn function-97\n\n\n  ([c] (nth (iterate\n        \n              (fn [list1]\n                (vec (cons 1 (reverse (cons 1 (for [x (range (- (count list1) 1)) :let [i list1]]\n                                                (+ (nth i x) (nth i (+ x 1))))))))) [1]) (- c 1))))","user":"598d0dc3e4b02b9968b84d18"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) (pascal-triangle 1)) (dec n))))","user":"5182de5ce4b0353c468deb74"},{"problem":97,"code":"(fn nrow \n  [n] \n  (let [row (fn row \n              [prev] \n              (vec (map #(apply + %) \n                        (partition 2 \n                                   1 \n                                   (cons 0 (conj prev 0))))))] \n    (if (= 1 n) \n    [1] \n    (row (nrow (dec n))))))","user":"4eadc217535d7eef30807321"},{"problem":97,"code":"(fn [m]\n  (let [f #(reduce * (take % (iterate inc 1)))\n        n (dec m)\n        nf (f n)\n        c #(/ nf (* (f %) (f (- n %))))]\n    (->> (take m (iterate inc 0))\n         (map c)\n         (vec))))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [row]\n  (letfn [(fac [n]\n          (reduce * (range 1 (+ n 1))))\n        (binom [a b]\n          (/ (fac a)\n             (* (fac b)\n                (fac (- a b)))))]\n  (map #(binom (dec row) %) (range 0 row))))","problem":97,"user":"50772e6ae4b0fc74642bff5d"},{"problem":97,"code":"(fn func [n]\n  (if (= n 1) \n    [1]\n    (let [fn-n-1 (func (dec n))]\n      (map + (concat [0] fn-n-1) (concat fn-n-1 [0])))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascals-triangle (dec n))]\n      (mapv +\n           (cons 0 prev)\n           (conj prev 0)))))","user":"559622cee4b0c79f6e1db975"},{"code":"(fn [n]\n((comp last (partial take n)) (iterate #(concat '(1) (map (partial apply +) (partition 2 1 %)) '(1))  '(1))))","problem":97,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":97,"code":"(fn r [n]\n  (if (= 1 n) [1]\n              (let [a (r (dec n))]\n                (into [] (map #(+ (nth a (dec %) 0) (nth a % 0)) (range n))))))","user":"59fedc26e4b01bb0ae8afd17"},{"problem":97,"code":"(fn binom [n]\n  \"tdd :)\"\n  (case n\n    1 [1]\n    2 [1 1]\n    3 [1 2 1]\n    4 [1 3 3 1]\n    5 [1 4 6 4 1]\n    11 [1 10 45 120 210 252 210 120 45 10 1]\n  )\n)","user":"57b55290e4b0fbc9809a27a9"},{"code":"(fn [n]\n  (letfn [(next-row [row]\n            (map + (concat [0] row) (concat row [0])))]\n    (let [pascal (iterate next-row '(1))]\n      (last (take n pascal)))))","problem":97,"user":"4f409e29e4b0e243712b1fb6"},{"problem":97,"code":"(fn clo4-create-pascal-line-at-n [n] \n   (letfn [\n           (create-pascal-line [prev-pascal-line]\n             (letfn [(build-adjacent-pairs [s]\n                       (loop [tail (vec (rest s)) res [[(first s) (second s)]]]\n\n                         (let [head (first tail) neck (second tail)]\n                           (if (nil? neck)\n                             res\n                             (recur (rest tail) (conj res [head neck]))\n                             )\n                           )\n\n                         )\n                       )\n                     (add-adjacent-pairs \n                       [s]\n                       (vec (map #(+ (first %) (second %)) s))\n                       )\n                     (append-one [v]\n                       (conj v 1)\n                       )\n                     (prepend-one [v]\n                       (vec (reverse (conj (vec (reverse v)) 1)))\n                       )\n                     (earmuff-ones [s]\n                       (prepend-one (append-one s))\n                       )]\n               (let [adj-pairs (build-adjacent-pairs prev-pascal-line)\n                     pre-pascal-line (add-adjacent-pairs adj-pairs)\n                     pascal-line (earmuff-ones pre-pascal-line)\n                     ]pascal-line)))\n           ]\n\n     (if (= n 0)\n       []\n       (if (= n 1)\n         [1]\n         (if (= n 2)\n           [1 1]\n           (loop [prev-pascal-line [1 2 1] cur-line-done 3]\n             (if (= cur-line-done n)\n               prev-pascal-line\n               (recur (create-pascal-line prev-pascal-line) (inc cur-line-done))\n               )\n\n             )\n           )\n         )\n       ))\n   \n)","user":"5ff676a9e4b06df49cee1497"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal [c k n]\n            (if (= k n)\n              '(1)\n              (conj (pascal (/ (* c (- n k)) (inc k)) (inc k) n) c)))]\n    (pascal 1 0 (dec n))))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn ! [n]\n   (if (= n 1)\n     [1]\n     (loop [prev_pas (! (dec n)) i 1 result (vector (first prev_pas))]\n       (if (= i (+ 1 (count prev_pas)))\n         result\n         (recur prev_pas\n                (inc i)\n                (conj result\n                      (if (= i (count prev_pas))\n                        (nth prev_pas (dec i))\n                        (+ (nth prev_pas i )\n                           (nth prev_pas (dec i) ) )\n                      )\n                      )\n                )\n         ))))","problem":97,"user":"4ea31da2535d7eef308072c1"},{"problem":97,"code":"(fn\n  [n]\n  (let [n (dec n)\n        [_ arr]\n        (reduce (fn [[k arr] num]\n                  [(inc k) (if (or (= k 0) (= k n))\n                             (conj arr 1)\n                             (conj arr (* (last arr) (/ (- (inc n) k)\n                                                        k))))])\n                [0 []]\n                (reverse (range (inc n))))]\n    arr))","user":"5720a2b0e4b0c5bde472c099"},{"problem":97,"code":"(fn [n]\n  (let [pairs #(partition 2 1 %)\n        sums (fn [coll] (map #(reduce + %) (pairs coll)))\n        new-row #(concat [1] (sums %) [1])]\n    (nth (iterate new-row [1]) (dec n))))","user":"54a97853e4b09f271ff37cae"},{"code":"(fn pascal [i]\n  (if (= i 1)\n    [1]\n    (vec (map + (concat [0] (pascal (dec i))) (concat (pascal (dec i)) [0])))\n  )\n)","problem":97,"user":"4f84400de4b033992c121c2e"},{"problem":97,"code":"#(last (take % (iterate (fn x [values] \n  (let [temp1 (concat [0] values)\n        temp2 (concat values [0])]\n    (map + temp1 temp2)))  [1])))","user":"57b35ecbe4b0fbc9809a277e"},{"code":"(fn pascals-row [n]\n  (let [binom\n        (fn binomial [n k]\n           (cond\n            (and (= k 0) (>= n 0)) 1\n            (and (= n 0) (> k 0)) 0\n            :else (+ (binomial (dec n) (dec k)) (binomial (dec n) k))))]\n    (take-while #(not= 0 %) (map #(binom (dec n) %) (range)))))","problem":97,"user":"4e7f51eb535db966e863cc3f"},{"code":"(let [zipWith\n  (fn [f s1 s2]\n    (loop [s1 s1 s2 s2 acc '()]\n      (if (or (empty? s1) (empty? s2))\n        acc\n        (recur (rest s1) (rest s2)\n          (cons (f (first s1) (first s2)) acc)))))]\n  (fn [n]\n    (loop [k n acc '(1)]\n      (if (= k 1)\n        acc\n        (recur (dec k) (zipWith + (concat acc '(0)) (cons 0 acc)))))))","problem":97,"user":"4f038499535dcb61093f6b09"},{"problem":97,"code":"(fn pt [n] (let [npt\n                     (fn [cpt] (->> (partition 2 1 cpt) (map #(apply + %))\n                          (cons 1) (reverse) (cons 1)))\n                     ipt (iterate npt '[1])]\n                 (nth ipt (dec n))))","user":"5900d5cde4b0438e51c2d02e"},{"problem":97,"code":"(fn pascal-tri [n]\n  (reduce\n   (fn [coll index] \n     (loop [c coll r [1]]\n       (if (empty? c)\n         r\n         (let [rc (rest c) \n               fc (first c) \n               sc (second c)]\n           (recur rc (cons (+ fc (if (nil? sc) 0 sc)) r))))))\n   []\n   (range n)))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":97,"code":"#(loop [in (dec %) out [1]]\n   (let [append (conj out 0)]\n     (if (zero? in)\n       out\n       (recur (dec in) (map + append (reverse append))))))","user":"5895385fe4b00487982d5279"},{"problem":97,"code":"(fn pascal [n]\n  (if (== 1 n)\n      '(1)\n      (concat (vector 1) ((fn aux-pascal\n  [lst]\n  (if (< (count lst) 2)\n      ()\n      (cons (+ (first lst) (second lst))\n            (aux-pascal (rest lst))))) (pascal (dec n))) '(1))))","user":"56df6351e4b0ca2494a095f3"},{"code":"(fn [n]\n  (map #(/ (reduce * (range (- n %) n))\n           (reduce * (range 1 (inc %))))\n        (range 0 n)))","problem":97,"user":"4e39d763535deb9a81d77f46"},{"problem":97,"code":"#(loop [r [1]\n        i 1]\n   (if (>= i %) r\n     (recur (vec (concat [1]\n                         (map (partial apply +) (partition 2 1 r))\n                         [1]))\n            (inc i))))","user":"537e745ae4b06839e8705ea6"},{"code":"(fn pascal_t[level]\n    (loop [rv [1], lev level]\n      (if (= lev 1)\n        rv\n        (recur\n              (loop [ret [1], prev rv]\n                (if (seq (rest prev))\n                  (recur (conj ret (+ (first prev) (second prev))) (rest prev))\n                  (conj ret 1)\n                )\n              )\n              (dec lev))\n      )       \n    )\n)","problem":97,"user":"5229211be4b04c906c9c6a63"},{"code":"(fn my-pascal[n]\n\t(let [pack-2 \n\t\t\t(fn[x y] (if(= 2  (count (last x)))\n \t\t\t\t(concat x [[y]])\n \t\t\t\t(concat (drop-last x) [(conj (last x) y)] )\n\t\t\t\t)\n\t\t\t)\n\t\t]\n\t(if(= n 1) [1]\n\t\t(map #(apply + %) (reduce pack-2 [[]] (flatten (conj [0]  (map #(repeat 2 %) (my-pascal (dec n))) 0))) )\t\n\t)\n\t)\n)","problem":97,"user":"50b25f2ce4b03ea88043355f"},{"problem":97,"code":"(fn lolo[a]\n    (\n    if(= 1 a)\n      [1]\n    (if(= 2 a)\n      [1 1]\n      (vec (flatten (apply conj [1] (mapv + (pop (lolo (dec a))) (rest (lolo (dec a)))) [1])))\n    )\n    )\n )","user":"5034b623e4b062bc5d7ae168"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= n 1)\n    '(1)\n    (map #(apply + %)\n         (partition 2 1\n                    (concat (list 0) (pascal (- n 1)) (list 0))))))","user":"5c7dad57e4b0d597f478caba"},{"problem":97,"code":"(fn nth-pascal [n] (if (<= n 2) (repeat n 1) (flatten (list 1 (map #(apply + %) (partition 2 1 (nth-pascal (dec n)))) 1))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":97,"code":"#(map (fn [x] (/ (reduce * 1 (range (- % x) %)) (reduce * 1 (range 1 (+ x 1))))) (range 0 %))","user":"4e8b5cb8535d65386fec211b"},{"problem":97,"code":"(fn [input]\n   (let [inputList (range 0 input)\n         cal (partial \n               (fn [n r]\n                 (let [factorial (fn [n]\n                                   (if (= n 0) \n                                     1\n                                     (reduce * (range 1 (+ n 1)))))\n                       nf (factorial n)\n                       rf (factorial r)\n                       nrf (factorial (- n r))]\n                   (/ nf (* rf nrf)))) (dec input))]\n     (map cal inputList)))","user":"577e54bbe4b0c8d87281f6e5"},{"problem":97,"code":"(fn pascal [counter] (if \n\t(= counter 1)\n\t[1]\n\t(vec (map + (into [0] (pascal (dec counter))) (into (pascal (dec counter)) [0])))\n))","user":"53d5d24de4b0e771c302544a"},{"problem":97,"code":"#_(defn build-next-row\n  [number inrow]\n  (map-indexed (fn [idx elem]\n                 (if (or (zero? idx) (= number idx))\n                   1\n                   (+ (inrow (dec idx)) (inrow idx)))) (range (inc number))))\n\n#_(defn triangle [row]\n  (loop [last-row [1]\n         row-number 1]\n    (if (= row-number row)\n      last-row\n      (recur (vec (build-next-row row-number last-row)) (inc row-number)))))\n\n(fn triangle [row]\n  (loop [last-row [1]\n         row-number 1]\n    (if (= row-number row)\n      last-row\n      (recur (vec ((fn build-next-row\n  [number inrow]\n  (map-indexed (fn [idx elem]\n                 (if (or (zero? idx) (= number idx))\n                   1\n                   (+ (inrow (dec idx)) (inrow idx)))) (range (inc number)))) row-number last-row)) (inc row-number)))))","user":"5658d775e4b00d3155796114"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (apply vector (let [lower (pascal (dec n))]\n      (map #(+ (get lower (dec %) 0) (get lower % 0)) (range n))))))","problem":97,"user":"4f03641a535dcb61093f6a9b"},{"problem":97,"code":"#(let [comb (memoize (fn [n k] (apply * (for [i (range 1 (inc k))] (/ (- (inc n) i) i)))))\n       pivot (mod % 2)]\n   (for [i (range %)]\n     (comb (dec %) (if (<= i pivot) i (- % i 1)))))","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn pascal [n]\n  (loop [ls []]\n    (cond\n      (= n 1) '(1)\n      (= (count ls) n) ls\n      :else (recur (concat\n        [1]\n        (map\n          (fn [[x y]] (+ x y))\n          (partition 2 1 ls))\n        [1])))))","problem":97,"user":"4de165f3535d08e6dec9fde6"},{"problem":97,"code":"(fn [row]\n   (let [rrow (dec row)\n         half (quot row 2)\n         halfseq (range half)\n         odd? (> (rem row 2) 0)\n         num (apply * (rest (range row)))\n         firsthalf (map #(/ num (* (apply * (rest (range (inc %)))) (apply * (rest (range (inc (- rrow %))))))) halfseq)]\n     (if odd?\n       (into (conj (into [] firsthalf) (/ num (* (apply * (rest (range (inc half)))) (apply * (rest (range (inc (- rrow half)))))))) (reverse firsthalf))\n       (into (into [] firsthalf) (reverse firsthalf)))\n     ))","user":"5d0beecee4b0cc9c91588239"},{"problem":97,"code":"(fn pascal [row] \n  (if (<= row 1) \n    [1]\n    (let [row-above  (dec row)\n          line-above (pascal (dec row))]\n      \t(flatten (conj [1] \n              (map #(+ (nth line-above (dec %)) (if (< % row-above) (nth line-above %) 1))\n                (range 1 row-above))\n              [1]\n)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":97,"code":"(fn [x] (first (drop (dec x) (iterate #(concat [1] (map (partial reduce +) (partition 2 1 %)) [1]) [1]))))","user":"59074b7ce4b047aa04b19951"},{"problem":97,"code":"(fn [n] (nth ((fn pn [coll] (lazy-seq (cons coll (pn (flatten [1 (map #(apply + %) (partition 2 1 coll)) 1]))))) [1]) (- n 1)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"(fn pascal-seq [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev-seq (pascal-seq (dec n))]\n            (concat [1] (map + (rest prev-seq) prev-seq) [1]))))","problem":97,"user":"4fb710f4e4b081705acca2cd"},{"code":"#(loop [r % c 1 v [1]]\n     (if (= c r)\n       v\n     \t(recur r (inc c) (conj v (int (* (last v) (/ (- r c) c)))))))","problem":97,"user":"4dbdc898535d020aff1edf4a"},{"code":"(fn pascal [i]\n  (if (= i 1)\n    [1]\n    ((fn [s]\n      (concat\n        (map #(apply + %)\n          (partition 2 (interleave s (concat [0] s))))\n        [1]))\n      (pascal (dec i)))))","problem":97,"user":"4fa67030e4b081705acca1b7"},{"problem":97,"code":"(fn [n]\n  (loop [n (dec n) res [1]]\n    (if (pos? n)\n      (recur (dec n) (map (partial apply +) (cons [1] (partition-all 2 1 res))))\n      res)))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":97,"code":";; clunky but it works. revisit?\n\n(fn pt [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (vec (concat [1]\n                 ((fn addpairs\n                    ([s] (addpairs s []))\n                    ([s acc]\n                     (if (< (count s) 3) (conj acc (apply + s))\n                         (recur (rest s) (conj acc (+ (first s) (second s)))))))\n                  (pt (dec n)))\n                 [1]))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":97,"code":"(fn [n]\n  (letfn [(pt [r c]\n    (if (or (< r 2) (< c 2) (> c (dec r)))\n      1\n      (+ (pt (dec r) (dec c)) (pt (dec r) c))))]\n    (for [x (range 1 (inc n))]\n      (pt n x))))","user":"57d9f603e4b0bd073c20240a"},{"problem":97,"code":"(fn pas [v] (if (= 1 v)\n              [1]\n              (let [last-level (pas (dec v)) ,middle (map-indexed #(+ %2 (get  last-level (inc %1))) (drop-last last-level)   )] (vec (concat [1] middle [1])))\n              \n              ) )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":97,"code":"(partial (fn f [prev n]\n  (if (= n 1) prev\n              (f (concat\n                   [(first prev)]\n                   (map (partial apply +) (partition 2 1 prev))\n                   [(last prev)])\n                 (dec n)))) [1])","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":97,"code":"(fn pas [i] (if (= 1 i) [1] (vec (let [p (conj (pas (dec i)) 0)] (map + p (reverse p))))))","user":"563dfc02e4b0da801c4e4662"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-pascal-line [pascal-n]\n                (concat '(1) (for [p (partition 2 1 pascal-n)]\n                               (apply + p)) '(1)))]\n    (reduce (fn [nth-pascal n+1]\n              (next-pascal-line nth-pascal))\n            [1]\n            (range (- n 1)))))","user":"5508b405e4b06e50f9beb110"},{"code":"(fn [n]\n  (letfn [(pascal [n k]\n            (cond\n             (= n 1) 1\n             (or (zero? k) (= k n)) 1\n             :else (+ (pascal (dec n) (dec k)) (pascal (dec n) k))))]\n    (into [] (map #(pascal (- n 1) %) (range n)))))","problem":97,"user":"50052fd0e4b0678c553fc45d"},{"problem":97,"code":"#(last (take % (iterate (fn [s] (map +' (cons 0 s) (conj (vec s) 0))) [1])))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [n]\r\n  (letfn [(next-row [row] (map (partial apply +)\r\n                               (partition 2 1 (concat [0] row [0]))))]\r\n    (nth (cons nil (iterate next-row (seq [1]))) n)))","problem":97,"user":"4dad8756c9a9d6ed1099dc57"},{"code":"(fn [x]\n       (if (= x 1)\n   [1]\n\t (if (= x 2)\n\t   [1 1]\n\t   (vec\n\t    (loop [row [1 1]\n\t\t   ct x]\n\t      (if (= ct 2)\n\t\t(vec row)\n\t\t(recur (flatten\n\t\t\t(list  1 (map #(reduce + %) (partition 2 1 row)) 1)) (dec ct)\n\t\t)))))))","problem":97,"user":"4eae2f9e535d7eef30807324"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (let [\n          prev (pascal (- n 1))\n          succs (partition 2 1 prev)\n          sums (map (partial reduce +) succs)\n          ]\n      (concat [1] (apply vector sums) [1])\n    )))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":97,"code":"(fn\n  [row]\n  (loop\n    [n (dec row)\n     k 1\n     result [1]]\n    (if (= n 0)\n      result\n      (recur (dec n) (inc k) (conj result (int (* (last result) (/ n k))))))))","user":"5d84f5e6e4b0915913b1d38f"},{"code":"(fn pascal [l]\n  (cond (= 1 l) [1]\n        (= 2 l) [1 1]\n        :else (conj (into [1] (map (partial apply +) (partition 2 1 (pascal (dec l))))) 1)))","problem":97,"user":"534d1173e4b084c2834f4a98"},{"code":"#((fn f [v n] (if (= n 1) v (f\n  (vec (map + (conj v 0) (cons 0 v)))\n(- n 1) ))) [1] %)","problem":97,"user":"4f01c938535dcb61093f6a39"},{"code":"#(reduce (fn [acc k]\n                    (conj acc\n                          (quot (* (peek acc) (- % k)) k)))\n                [1]\n                (range 1 %))","problem":97,"user":"52b33607e4b0c58976d9ad02"},{"problem":97,"code":"(fn pascal[n]\n  (if (= n 1)\n    [1]\n    (let [prev (lazy-cat [0] (pascal (dec n)) [0])]\n      (map + prev (drop 1 prev)))\n    ))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (let [r (f (- n 1))]\n      (concat [1] (map + (rest r) (butlast r)) [1]))))","problem":97,"user":"51256b40e4b05d10e3e395f8"},{"code":"(fn pascal [n] (let [nxrow (fn nxrow [row] (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1] )))] (nth (iterate nxrow [1])(dec n))))","problem":97,"user":"5003bb77e4b0678c553fc442"},{"problem":97,"code":"(fn [n]\n    (letfn [ (pascal-triangle-next [lst]\n               (let [lst-with-i (zipmap (range (count lst)) lst)]\n                 (->> (for [[k v] lst-with-i]\n                        (for [ i (range (inc (count lst-with-i)))]\n                          (if (or (= k i) (= (inc k)  i))\n                            v 0)))\n                   (apply map  +)))) ]\n      (if (< n 0) nil\n        (loop [n n lst [1]]\n          (if (= n 1)\n            lst\n            (recur (dec n) (pascal-triangle-next lst))))))\n    )","user":"55aa1637e4b0988bba2ad949"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else\n     (let [p (pascal (dec n))]\n       (loop [r []\n              p p\n              a (first p)\n              b (second p)]\n         (if b\n           (recur (conj r (+ a b)) (rest p) (first (rest p)) (second (rest p)))\n           (concat [1] r [1]))))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":97,"code":"(fn pTriangle [ x ] \n  (loop [ n (- x 1) k 1 v[ 1 ] ]\n    (cond\n     (= n 0) v\n     :else (recur (- n 1) (+ k 1)  (conj v (* (/ n k) (get v (- k 1))))\n                  )\n     )\n    )\n  )","user":"56942b5fe4b0dcc4269f411c"},{"problem":97,"code":"(fn pascal [x] (if\n               (= x 1) [1]\n               (concat [1] \n                       (let [prev (pascal (dec x))]\n                        \t(for [i (range (dec (dec x)))] (+ (nth prev i) (nth prev (inc i)))))\n                       [1])))","user":"56f258d3e4b04a395b9a04a1"},{"problem":97,"code":"(fn triangle [num]\n    (loop [x 1\n           row [1]]\n       (if (>= x num)\n           row\n           (recur (inc x)\n                  (conj (vec (cons 1 (map + row (rest row)))) 1)))))","user":"568f2059e4b0dcc4269f40df"},{"problem":97,"code":"(fn pascal [num]\n  (nth\n    (take num\n          (iterate\n            #(concat [1] (map + % (rest %)) [1]) [1])) (dec num)))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn pascal [n]\n  (nth\n    (iterate\n      (fn [prev] (map #(apply + %) (partition 2 1 (concat [0] prev [0]))))\n      [1]\n      )\n    (dec n)\n    )\n  )","problem":97,"user":"5228f870e4b0186687e23a98"},{"problem":97,"code":"(fn my-pascal [nth]\n  (let [tmp-pascal\n        (fn [x] (into [] (flatten (list 1 (map (fn [slist] (apply + slist)) (partition 2 1 x)) 1))))]\n    (if (= nth 1)\n      [1]\n      (tmp-pascal (my-pascal (dec nth))))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":97,"code":"(fn p[x] ( \n            letfn [(r[v] (\n            concat [1] (loop [i 0 acc []] ( if (< i (dec (count v))) (recur (inc i) (concat acc [(+ (nth v i) (nth v (inc i)))] )) acc)) [1]\n                          ))]\n            \n            (if (= x 1) [1]\n                (r (p (dec x)))\n                )\n            ))","user":"596f6683e4b069c0a1a19877"},{"problem":97,"code":"(fn yhsj2 [n]\n     (condp = n\n       1 [1]\n       (concat [1]  (map #(apply + %)(partition 2 1 (yhsj2 (dec n)))) [1])))","user":"53b4bddae4b047364c0444b9"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n                    (concat [1] (map + row (rest row)) [1]))]\n    (let [rows (iterate next-row [1])]\n      (nth rows (dec n)))))","user":"5a95c639e4b0d174b936c75e"},{"problem":97,"code":"(fn pascal [x]\n    (cond \n       (= x 1) [1]\n       :else (conj (vec (cons 1\n             (let [lst (pascal (dec x))]\n             (for [i (range (dec (count lst)))]\n(+ (nth lst i) (nth lst (inc i)))))))1)))","user":"54c98ac0e4b045293a27f679"},{"problem":97,"code":"#(into [] (map (partial (fn row-val2 [n k] (if (= k 0) 1 (int (* (row-val2 n (- k 1)) (/ (- (+ n 1) k) k))))) (- % 1)) (range 0 %)))","user":"5ba947bfe4b0a20761a23440"},{"problem":97,"code":"(fn pascal [n]\n  (if (== n 1)\n    [1]\n    (flatten (vector 1 (map (partial apply +) (partition 2 1 (pascal (dec n)))) 1))))","user":"570459a9e4b0b0fb43fd0662"},{"code":"(fn [arg]\n  (loop [v [1] n arg]\n    (if (= 1 n)\n      v\n      (recur (vec (conj (reverse (conj (map #(reduce + %) (partition 2 1 v)) 1)) 1)) (dec n)))))","problem":97,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n   (concat [1] \n           (map + (pascal (dec n)) (rest (pascal (dec n)))) \n           [1])))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [row]\n  (let [bang #(apply * (range 2 (inc %)))\n        nCr (fn [n r] (/ (bang n) (* (bang r) (bang (- n r)))))]\n    (map #(nCr (dec row) %) (range row))))","problem":97,"user":"4fd7962ee4b0dab7d829f385"},{"problem":97,"code":"(fn pascal [n]\n    (if (= n 1)\n      [1]\n      (concat [1] (->> n dec pascal (partition 2 1) (map (partial apply +))) [1])))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [n]\n  (letfn [(next-row [xs]              \n            ((comp (partial map (partial reduce +))\n             (partial partition 2 1)\n             #(concat [0] % [0]))\n             xs))]\n    (first (drop (dec n) (iterate next-row [1])))))","problem":97,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [n]\n  (->\n   #(map (fn [[x y]] (+ x y)) (partition 2 1 (concat [0] % [0])))\n   (iterate '(1))\n   (nth (dec n))))","problem":97,"user":"52479487e4b05ef8e38e6373"},{"problem":97,"code":"(fn [no]\n  (letfn [(fact [n] (if (< n 2) 1 (apply * (range 1 (inc n)))))]\n\t(loop [n no i 1 res []]\n      (if (> i n)\n      \tres\n      \t(recur n\n\t        (inc i)\n    \t    (conj res (/ (fact (dec n)) (* (fact (dec i)) (fact (- (dec n) (dec i)))))))))))","user":"553b87abe4b09218d5f45003"},{"problem":97,"code":"(fn pscl [row]\n  (loop [n 1\n         res [1]]\n    (if (= n row)\n      res\n      (recur (inc n)\n             (let [mid (concat [0] res [0])]\n               (for [i (range (- (count mid) 1))]\n                      (+ (nth mid i) (nth mid (inc i)))))))))","user":"558bb38fe4b0277789237631"},{"problem":97,"code":"(fn [n] \n  (reduce \n   (fn [cur next] \n     (map #(apply + %) (partition 2 1 (flatten [0 cur 0])))) '(1) (repeat (dec n) 1)))","user":"5462ce20e4b01be26fd746b8"},{"problem":97,"code":"(fn [num] (nth  (iterate #(vec (map + (cons 0 %) (conj % 0)))  '[1]) (dec num)))","user":"51f38193e4b0fca5e8b48226"},{"problem":97,"code":"(fn [n] (reductions #(* % (/ (- n %2) %2)) 1 (range 1 n)))","user":"54e2a779e4b024c67c0cf7d3"},{"code":"(fn [n] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec n)))","problem":97,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"#_implement_recursive\n(fn [n]\n  (map\n   #(reduce\n     (fn [p i]\n       (* (/ (- (dec n) (- % i)) i) p))\n     1\n     (range 1 (inc %)))\n   (range n)))","problem":97,"user":"50c75d38e4b00bb60fe0c532"},{"problem":97,"code":"(fn [n]\n  (let [fractorial (fn [x]\n                     (if (or (= x 1) (= x 0)) 1\n                       (reduce #(* %1 %2) (range 1 (inc x)))))]\n    (map (fn [k]\n           (/ (fractorial (dec n))\n              (fractorial (- n k 1))\n              (fractorial k))) \n         (range n))))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":97,"code":"(fn f\n  [n]\n  (cond\n    (= n 1) [1]\n    :else (concat '(1) (map #(+ (first %) (last %)) (partition 2 1 (f (- n 1)))) '(1))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":97,"code":"(fn [c] \n  (let [f #(if (empty? %) \n             [1] \n             (conj (vec (conj (map + % (next %)) 1)) 1))]\n    (loop [n c\n           acc []] \n      (if (zero? n) \n        acc \n        (recur (dec n) (f acc))))))","user":"534bfc71e4b084c2834f4a88"},{"code":"(fn [n]\n    (reduce\n      (fn [p _] (lazy-cat '(1) (map + p (rest p)) '(1)))\n      [1]\n      (range (dec n))))","problem":97,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (let [a (vec (f (- n 1)))]\n      (map #(+ % %2) (conj a 0) (cons 0 a)))))","problem":97,"user":"51750cd4e4b07031762f2ee5"},{"problem":97,"code":"(fn pascal [r]\n  (let [fac (fn fac [n] (if (= n 0) 1 (* n (fac (dec n)))))]\n    (let [fr (fac (dec r))] (map #(/ fr (* (fac %) (fac (- (dec r) %)))) (range r)))))","user":"56800ba1e4b0966858e4d8e8"},{"problem":97,"code":"(fn [n] (reduce #(conj % (/ (* (last %) (- n %2)) %2)) [1] (range 1 n)))","user":"5e5096c6e4b027a2e10ac0c6"},{"problem":97,"code":"(fn f [n]\n  (if (= 1 n)\n    [1]\n    (map #(apply + %) (partition 2 1\n                      (concat [0]\n                              (f (dec n))\n                              [0])))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn f [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        (> n 2) (let [n-1 (f (dec n))]\n          (concat [1] (map #(+ %1 %2) n-1 (rest n-1)) [1]))))","problem":97,"user":"4dcc5aff535d5973398f9293"},{"problem":97,"code":"(fn yh\n  [www]\n  (let [hh (fn\n             [mm]\n             (let [ccc (fn [m n]\n                         (quot (apply * (range 1 m))\n                               (* (apply * (range 1 n))\n                                  (apply * (range 1 (inc (- m n)))))))]\n               (if (odd? mm)\n                 (let [half (quot mm 2)\n                       mi (inc half)\n                       h (map (partial ccc mm) (range 1 (inc half)))\n                       mid (ccc mm mi)]\n                   (concat h [mid] (reverse h)))\n                 (let [half (quot mm 2)\n                       h (map (partial ccc mm) (range 1 (inc half)))]\n                   (concat h (reverse h))))))]\n    (if (seq? www)\n      (map hh www)\n      (hh www))))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":97,"code":";;(fn [line]\n;;  (let [fa #(if (<= % 1) 1 (reduce * (range 1 (inc %))))\n;;        index0->1 (- line 1)]\n;;    (for [x (range line)]\n;;      (/ (fa index0->1) (* (fa (- index0->1 x)) (fa x))))))\n\n;; let and defn not allowed in 4clojure? \n;; expand out the fa definition for solution below\n;; uses the formula C(line, x) = line! / (line - x)! * x!\n\n(fn [line]\n  (for [x (range line)]\n    (/ (#(if (<= % 1) 1 (reduce * (range 1 (inc %)))) (- line 1)) (* (#(if (<= % 1) 1 (reduce * (range 1 (inc %)))) (- (- line 1) x)) (#(if (<= % 1) 1 (reduce * (range 1 (inc %)))) x)))))","user":"5acd08eee4b0e27600da7822"},{"code":"(fn[n] (last (take n (iterate (fn[v] (into [](map + (cons 0 v) (conj v 0)))) [1] ))))","problem":97,"user":"4ffd92e7e4b0678c553fc3e3"},{"code":"(fn [n]\n(let* [f #(apply * (range 1 (inc %))) m (dec n) mf (f m)]\n      (for [k (range n)]\n         (/ mf (* (f k) (f (- m k)))))))","problem":97,"user":"4f031eac535dcb61093f6a67"},{"problem":97,"code":"(fn p [n]\n  (if (= n 1) [1] (concat [1] (map #(apply + %) (partition 2 1 (p (dec n)))) [1])))","user":"5a621702e4b0512ff01cd983"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [lst (pascal (dec n))]\n      (mapv + (cons 0 lst) (conj lst 0)))))","user":"54ca93abe4b057c6fda3a264"},{"problem":97,"code":"(fn pascals [n]\n  (last (take n (iterate (fn nextr [lastr]\n                           (into [] \n                                 (map (fn [e] (reduce + e))\n                                      (partition 2 1 \n                                                 (conj (into [0] lastr) 0))))) [1] ))))","user":"5f5f2eafe4b02876ed9fcff5"},{"problem":97,"code":"(fn pascal-row [n]\n  (if (= n 1) [1] \n      (map #(apply + %) (partition 2 1 (concat [0] (pascal-row (dec n)) [0])))))","user":"575b3e9be4b02ea11479935b"},{"problem":97,"code":"(fn pastrirow [n]\n  (loop [i 1 row [1]]\n    (if (= i n)\n      row\n      (recur (inc i) (mapv + (cons 0 row) (conj row 0))))))","user":"5cab33e7e4b048ec896c5c48"},{"problem":97,"code":"(fn [n]\n    (let [f (fn [v] (let [v1 (concat [0] v [0])] (mapv + v1 (rest v1))))]\n      (last (take n (iterate f [1])))))","user":"5920c191e4b09b4ee5954c61"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [x (pascal (dec n))]\n      (concat [1] (map + (drop-last x) (rest x)) [1]))))","user":"55495318e4b0a04f79299566"},{"code":"(fn [n]\n  (loop [n n row [1]]\n      (if (< n 2)\n        row\n        (recur (dec n)\n               (concat [1] (map #(apply + %) (partition 2 1 row)) [1])))))","problem":97,"user":"4eb51942535d7eef30807365"},{"problem":97,"code":"(fn [row]\n  (letfn [(fact [n]\n                (loop [c n t 1]\n                  (if (< c 2)\n                    t      \n                    (recur (dec c) (* t c)))))]\n    (letfn [(comb [n k]\n                  (/ (fact n) (* (fact k) (fact (- n k)))))]\n      (map (partial comb (- row 1)) (range 0 row)))))","user":"53791ab7e4b06839e8705e4d"},{"code":"#(loop [n % row [1]]\n  (if (= 1 n)\n    row\n    (recur (dec n) (concat [1] (map + row (rest row)) [1]))))","problem":97,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn pasc-tri [n]\n  (let [get-nth (fn [coll n]\n                  (if (or (= n -1) (= n (count coll)))\n                    0\n                    (nth coll n)))]\n    ((fn [c s]\n      (if (= c n)\n        s\n        (recur (inc c)\n               (for [x (range (inc (count s)))]\n                 (+ (get-nth s (dec x)) (get-nth s x))))))\n       1 [1])))","problem":97,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn [N]\n  (letfn [(trap [xs]\n            (cons xs (lazy-seq (trap (->> (flatten [0 xs 0])\n                                          (partition 2 1)\n                                          (map #(reduce +' %)))))))]\n    (nth (trap [1]) (dec N))))","problem":97,"user":"5312cdaae4b08068f379ed03"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [r]\n            (concat [1] (map + r (rest r)) [1]))\n          (pt [p] (cons p (lazy-seq (pt (next-row p)))))]\n    (last (take n (pt '(1))))))","user":"4f85a75ce4b033992c121c48"},{"code":"(fn [n]\n  (letfn [(fact [n] (reduce * (range 1 (inc n))))\n          (binom [n k] (/ (fact n)\n                          (* (fact k)\n                             (fact (- n k)))))]\n    (let [m (dec n)]\n      (map (partial binom m) (range (inc m))))))","problem":97,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":97,"code":"(fn\n            [n]\n            (nth (iterate\n                   (fn [col]\n                     (concat [1] (map #(apply + %) (partition 2 1 col)) [1]))\n                   '(1)\n                   ) (dec n)))","user":"56b1ab17e4b0982f16b37df1"},{"problem":97,"code":"(fn [x] (reduce #(conj %1 (* (last %1) (/ (- x %2) %2))) [1] (range 1 x)))","user":"5b22d30ee4b08b1df1c36750"},{"code":"(fn pascal-triangle\n  [row]\n  (let [ks (range row)\n        count-ks (dec (count ks))\n        ! #(reduce * (range 1 (inc %)))\n        comb (fn [n k]  (/ (! n) (* (! k) (! (- n k)))))]\n    (map #(comb count-ks %) ks)))","problem":97,"user":"524f4256e4b0541d1855b808"},{"problem":97,"code":"(fn [n] (nth (iterate\n                 #(vec\n                   (map +\n                        (conj % 0) (cons 0 %))) '[1])\n               (dec n)\n               )\n    )","user":"55ba70f9e4b01b9910ae29d4"},{"problem":97,"code":";n-1Ck-1\n(fn [m]\n (letfn [(fact [x]\n          (if (< x 2)\n           1\n           (* x (fact (dec x)))))\n         (C [n k]\n          (/ (fact n) (fact (- n k)) (fact k)))]\n  (map #(C (dec m) %) (range m))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":97,"code":"(fn my-pascal\n  [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else \n     (let [previous-row (my-pascal (- n 1))\n           generate-next (fn [previous]\n                      (loop [acc []\n                             cur (first previous)\n                             remaining (rest previous)]\n                        (if (= (count remaining) 0)\n                          acc\n                          (recur\n                           (conj acc (+ cur (first remaining)))\n                           (first remaining)\n                           (rest remaining)))))]\n       (flatten (vector 1 (generate-next previous-row) 1)))))","user":"53ac4719e4b047364c04445c"},{"problem":97,"code":"(fn pascal-row\n  [n]\n  (let [factorial (memoize\n                   (fn [x]\n                     (if-not (= 0 x)\n                       (loop [x x n x]\n                         (if (= 1 n)\n                           x\n                           (recur (* x (dec n)) (dec n))))\n                       1)))\n        pascal-entry (fn [n k]\n                       (/ (factorial n)\n                          (* (factorial k) (factorial (- n k)))))]\n    (map #(pascal-entry (dec n) %) (range n))))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":97,"code":"(fn Pascal [n]\n  (last (take n (iterate\n                    \t    (fn [v]\n                           \t\t(conj (into [1] (map #(apply + %) (partition 2 1 v)))\n                                      1)\n                                      \n                              )\n                         [1]))))","user":"57822efce4b0d36ec5835e91"},{"problem":97,"code":"(fn [p]\n   (let [fac (fn [a] (reduce * (range 1 (+ a 1))))\n         binom (fn [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]\n     (map (partial binom (- p 1)) (range 0 p))))","user":"60521ea8e4b056659d634205"},{"code":"(fn [n]\n   (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec n)))","problem":97,"user":"4f036d9b535dcb61093f6ac1"},{"problem":97,"code":"(fn [n] (loop [c 1\n               acc [1]]\n          (if (= n c)\n            acc\n            (recur (inc c) (->> \n                            (concat [0] acc [0])\n                            (partition 2 1)\n                            (map #(reduce + %)))))))","user":"5368fedee4b0243289761e93"},{"code":"#(map (partial (fn f [p x] (if (or (= 1 x) (= x p)) 1 (+ (f (- p 1) (- x 1)) (f (- p 1) x)))) %) (map inc (range %)))","problem":97,"user":"51a058dae4b0b292b01ee3f3"},{"code":"(fn pascal [r]\n  (loop [c 1\n         acc [1]]\n   (let [v (* (nth acc (- c 1)) (/ (- r c) c))]\n    (if (= v 0)\n     acc  \n     (recur (inc c) (conj acc v))))))","problem":97,"user":"50783762e4b0fc74642bff67"},{"problem":97,"code":"(fn [n] (letfn [\n                 (next-row [v0]\n                   (let [\n                         pairs (map\n                                 #(subvec v0 %1 (+ %1 2))\n                                 (range (dec (count v0))))\n                         sums (map #(reduce + %1) pairs)\n                         v1 (conj (into [1] sums) 1)\n                         ] v1)\n                   )\n                 ]\n           (loop\n             [i 1 row [1]]\n             (if (= i n)\n               row\n               (recur (inc i) (next-row row)))))\n   )","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn pascal [n]\n  (loop [n_ n acc [1]]\n    (if (= 1 n_) \n        acc\n        (recur (dec n_) \n               (vec (map + (conj acc 0) (apply conj [0] acc)))))))","problem":97,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":97,"code":"(fn [n]\n        (loop [in-row [] nr-rows n]\n            (if (> nr-rows 0)\n                (recur\n                    (#(loop [row % new-numbers []]\n                        (let [next-row []]\n                            (cond\n                                (= (count row) 0)\n                                    (into next-row [1])\n                                (= (count row) 1)\n                                    (into (into (into next-row [1]) new-numbers) [1])\n                                (> (count row) 1)\n                                    (recur\n                                        (rest row)\n                                        (conj new-numbers\n                                            (+ (first row)\n                                            (first (rest row))))))))\n                    in-row)\n                (dec nr-rows))\n            in-row)))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn eutri [n]\n  (let [nextrow (fn [r] (map #(apply + %) (partition 2 1 r)))]\n    (condp = n\n      1 [1]\n      (conj (vec (cons 1 (nextrow (eutri (dec n))))) 1) )))","problem":97,"user":"4ed7b617535d10e5ff6f52f3"},{"code":"(fn [n]\n  (nth \n    (iterate \n      (fn [s]\n        (concat [1] (map + s (rest s)) [1]))\n      [1]) \n    (dec n)))","problem":97,"user":"50901b2ee4b0ea685a20f774"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (->> (concat '(0) (pascal (dec n)) '(0))\n         (partition 2 1)\n         (map #(apply + %)))))","user":"605b7a90e4b079a07f8593fc"},{"problem":97,"code":"(fn [n] (loop [n1 1 out [1]] (if (= n n1) out (recur (inc n1) (concat [1] (map (fn [[x y]] (+ x y)) (partition 2 1 out)) [1])))))","user":"5e246f92e4b05b4b01516150"},{"problem":97,"code":"(fn [n]\n   (loop [v1 [1] iter 1]\n     (if (= n iter)\n       v1\n       (recur (#(conj (vec (into [1] (map (fn [x1 x2]\n                                            (+ x1 x2)) %1 (rest %1)))) 1) v1) (inc iter)))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn [x]\n  \"http://en.wikipedia.org/wiki/Pascal's_triangle\"\n  (let [coll (if (coll? x) x (vector x))]\n    (let [res\n      (for [i coll]\n        (let [r (dec i)]\n          (reductions #(int (* %1 (/ (+ r 1 (- %2)) %2))) 1 (range 1 (inc r)))\n        ))]\n      (if (coll? x)\n        res\n        (nth res 0)\n        ))))","problem":97,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn pt [depth]\n  (let [next-row (fn [row]\n                   (loop [prev 0\n                          nums row\n                          result []]\n                     (if (empty? nums)\n                       (conj result 1)\n                       (recur (first nums) (rest  nums) (conj result (+  prev (first nums)))))))]\n    (nth (iterate next-row []) depth)))","problem":97,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn tri [n]\n  (if (= n 1) [1]\n\t  (loop [i 2 o [1] ]\n\t\t(if (> i n)\n\t\t  o\n\t\t  (recur (inc i) (concat [1] (map + (drop-last o) (rest o) ) [1]))))))","problem":97,"user":"5101192ae4b0bef64c30e266"},{"problem":97,"code":"#(nth (iterate (fn [x] (concat [1] \n                    (map + x (rest x))\n                    [1])) \n           [1])\n  (dec %))","user":"539ec9f9e4b0ca733b974491"},{"code":"(fn pascal [n]\n        (if (= n 1)\n          [1]\n          (conj (into [1] (map #(+ (first %) (second %)) (partition 2 1 (pascal (dec n))))) 1)))","problem":97,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [i] (nth (iterate #(concat [1] (map + % (rest %)) [1])\n                       [1])\n              (- i 1)))","problem":97,"user":"4e8510e7535db62dc21a62e7"},{"code":"(letfn [(nCm [n m]\n          (reduce (fn [s i] (* s (/ (- n (- m i)) i)))\n                  1 (range 1 (inc m))))]\n             (fn [n] (map nCm (repeat (dec n)) (range n))))","problem":97,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [n]\r\n  (loop [cn 1, acc [], prev 1]\r\n    (println cn acc prev)\r\n    (if (= cn n)\r\n      (conj acc 1)\r\n      (recur (inc cn) (conj acc prev) (* prev (/ (- n cn) cn))))))","problem":97,"user":"4ef1ee67535dced4c769f219"},{"problem":97,"code":"(fn [n] (letfn [(pt [] (iterate (fn [r] (map #(apply + %) (partition 2 1 (concat [0] r [0])))) [1]))] (->> (pt) (take n) (last))))","user":"59358f74e4b04f87174def52"},{"code":"(fn pascal [n]\n  (loop [n n\n         res [1]]\n    (println n res)\n    (if (= 1 n)\n      res\n      (recur (dec n)\n             (->> res\n               (partition 2 1)\n               (map (partial apply +))\n               ((fn [xs] (concat [1] xs [1])))\n               (vec))))))","problem":97,"user":"4feff3b6e4b0678c553fc31e"},{"problem":97,"code":"(fn ptri [n]\n  ( if (< n 2) [1]\n       ((fn [v] (conj (vec (conj \n\t\t\t   (map (fn [s] (apply + s)) \n\t\t\t\t      (partition 2 (butlast (rest (interleave v v))))) 1)) 1)) (ptri (dec n)))))","user":"579d9601e4b05b1deef9ae18"},{"problem":97,"code":"(fn triangle [n]\n  (if (= n 1) [1]\n      (let [prev  (triangle (dec n))\n            pp    [(first prev)]\n            pm    (map #(apply + %) (partition 2 1 prev))\n            pl    [(last prev)]]\n        (concat pp pm pl))))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn [x]\n  (loop [i (dec x)\n         r [1]]\n    (if (zero? i)\n      r\n      (recur (dec i) \n             (concat [1] (map (partial apply +) (partition 2 1 r)) [1])))\n    ))","problem":97,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn [row]\n  (map\n    first\n    (take row\n      (iterate\n        (fn [[v c]] [(* v (/ (- row c) c)) (inc c)])\n        [1 1]))))","problem":97,"user":"4fb2101ce4b081705acca284"},{"code":"(fn [n]\r\n  (nth\r\n   (iterate #(concat [1] (map + % (rest %)) [1]) [1])\r\n   (dec n)))","problem":97,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":97,"code":"(fn pascal [n]\n   (if (= n 1)\n     [1]\n     (conj\n      (->> (pascal (- n 1))\n           (partition 2 1)\n           (into [1])\n           (map #(if (seq? %) (apply + %) %))\n           (apply vector)\n           )\n      1)))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (let [a (p (- n 1))\ng  (for [x (range 1 (- n 1))] (+ (nth a x) (nth a (dec x))))\n]       \n       (flatten [1 g 1])  \n    )\n  )\n)","problem":97,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"code":"(fn [r] \n  (reduce \n    (fn [agg c] (conj agg (/ (* (last agg) (- r c)) c))) \n       [1]\n       (range 1 r)\n   ))","problem":97,"user":"4f1d1299535d64f603146487"},{"problem":97,"code":"(fn [N]\n           (if (= 1 N)\n             [1]\n             (if (= 2 N)\n               [1 1]\n               ((fn pascal [N row]\n                  (if (= N 0)\n                    row\n                    (letfn [(new-row [N1 result]\n                              (if (= N1 (count row))\n                                result\n                                (new-row (+ N1 1) (conj result (+ (get row (- N1 1)) (get row N1))))))]\n                      (pascal (- N 1) (into [1] (conj (new-row 1 []) 1))))))\n                (- N 2) [1 1]))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn[x]\n   (letfn [(fact[n] (apply * (range 1 (inc n))))\n           (pascal[n k] (/ (fact n) (* (fact k)  (fact (- n k)))))]     \n     (map (partial pascal (dec x)) (range 0 x))))","problem":97,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn [n] (first (drop (dec n) (iterate #(vec (concat [1] (map (fn [[x y]] (+ x y)) (partition 2 1 %)) [1])) [1]))))","problem":97,"user":"4dc1bd76535d020aff1edf8d"},{"problem":97,"code":"(fn pasc [n]\n  (last \n   (take n\n     (iterate\n      (fn next-row [prev]\n        (concat (conj (map #(reduce + %) (partition 2 1 prev)) 1) [1])) [1]))))","user":"5728d33ce4b0c6e51e0d2b12"},{"code":"(fn [n]\n  (loop [t [1] n n]\n    (if (= 1 n) t\n      (recur (map (partial apply +)\n                           (partition 2 1 (concat [0] t [0])))\n             (dec n)))))","problem":97,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [i]\n  (let [c (fn x [n k]\n            (if (or (>= 1 k) (= n k))\n              1\n              (+ (x (dec n) (dec k))\n                 (x (dec n) k))))]\n    (map #(c i %) (range 1 (inc i)))))","problem":97,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":97,"code":"(fn [n] (let [fact (fn [x] (loop [x x res 1]\n         \t (if (> 1 x)\n            \tres\n            \t(recur (dec x) (* res x)))))] \n          \t\t(into [] (map #(/ (fact (dec n)) (* (fact (- (dec n) %)) (fact %))) (range n)))\n          \t\n          ))","user":"540479e7e4b0addc1aec665a"},{"problem":97,"code":"(fn [n]\n  (letfn [(nextrow [row] (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1] )))]\n    (if (= n 1)\n      [1]\n      (loop [r [1]\n             n (dec n)]\n        (if (= n 0)\n          r\n          (recur (nextrow r) (dec n)))))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":97,"code":"(fn [size]\n  (loop [pascal [1], idx size]\n    (if (= idx 1)\n      pascal\n      (recur (concat [1] (map #(apply + %) (partition 2 1 pascal)) [1]) (dec idx))\n      )\n    )\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":97,"code":"(fn [n]\n   (loop [num 1 line [1]]\n    (if (= num n)\n      line\n      (recur\n        (inc num)\n        (->> line\n          (drop-last)\n          (map + (rest line))\n          (cons 1)\n          (reverse)\n          (cons 1)\n          (reverse))))))","user":"588906a9e4b0f1effa3b772a"},{"problem":97,"code":"#(->> (loop [acc [] i 0 n %] \n       (cond (= i n) acc \n             (= i 0) (recur [1] (inc i) n) \n             (= i 1) (recur [1 1] (inc i) n) \n             :else (recur \n                    (conj [] \n                          1 \n                          (reduce \n                           (fn [a b] \n                             (conj a (apply + b))) [] (partition 2 1 (->> acc flatten vec))) \n                          1) \n                    (inc i) \n                    n)))\n     flatten \n     vec)","user":"4fc77f5ae4b0ee37620e1821"},{"problem":97,"code":"(fn pascal [n]\n  (loop [row [1] x 1]\n    (if (= x n)\n      row\n      (recur (concat [1] (map #(apply + %) (partition 2 1 row)) [1]) (inc x)))))","user":"54448e84e4b032a45b869393"},{"code":"(fn [r]\n  ((fn pt [va n d]\n     (if (> n -1)\n       (lazy-seq\n         (cons va (pt (int (* va (/ n d)))\n                      (dec n)\n                      (inc d))))))\n     1 (dec r) 1))","problem":97,"user":"4fbe42b7e4b081705acca30f"},{"problem":97,"code":"(fn [n]\n  (let [choose (fn [n r] (reduce #(* %1 (/ (+ n (- 1 %2)) %2)) 1 (range 1 (inc r))))]\n  (map #(choose (dec n) %) (range 0 n))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [prev (pascal (dec n))\n          left (conj prev 0)\n          right (cons 0 prev)]\n      (mapv + left right))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":97,"code":";;(fn [n] (reduce (fn [r x] (concat [1] (map + r (rest r)) [1])) [1] (range (dec n))))\n(fn [n] (reduce (fn [r x] (map + (concat '(0) r) (concat r '(0)))) [1] (range (dec n))))","user":"54bad522e4b0ed20f4ff6eb8"},{"problem":97,"code":"(fn pascal[n] \n  (if (= n 1) [1]\n  \t(loop [ cur 2 res [1 1] ]\n       (if (= cur n) res\n           (let [ parts  (partition 2 1 res)\n                  middle (map #(apply + %) parts) ]\n                  (recur (inc cur) (concat [1] middle [1])))))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":97,"code":"(fn\n  [n]\n  (letfn [(fac [n] (reduce * (range 1 (inc n))))\n          (choose [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]\n    (map choose (repeat (dec n)) (range n))))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn my-pascal [row]\r\n  (let [rowp (dec row)]\r\n\t\t(if (= rowp 0)\r\n\t\t\t'(1)\r\n\t\t\t(let [r (inc rowp)]\r\n\t\t\t\t(loop [prev 1 c 1 results '(1)]\r\n\t\t\t\t\t(if (= c rowp)\r\n\t\t\t\t\t\t(cons 1 results)\r\n\t\t\t\t\t\t(let [val (* prev (/ (- r c) c))]\r\n\t\t\t\t\t\t\t(recur val (inc c) (cons val results)))))))))","problem":97,"user":"4efb92ce535dced4c769f27a"},{"problem":97,"code":"#(nth (iterate \n       (fn [s] (map (fn [[a b]] (+ a b)) (partition 2 1 (concat [0] s [0]))))\n       [1])\n      (dec %))","user":"561c0278e4b064ca9f4b1691"},{"problem":97,"code":"(fn pascals-triangle\n   ([]\n    (letfn\n     [(succ [row] `[1 ~@(map #(reduce + %) (partition 2 1 row)) 1])\n      (gen [row] (lazy-seq (cons row (gen (succ row)))))]\n      (gen [1])))\n   ([n]\n    (first (drop (dec n) (pascals-triangle)))))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn [n0]\n   (loop [n n0 row []]\n     (if (= n 0)\n       row\n       (recur (dec n)\n              (conj (get (reduce\n                      (fn [a x] (hash-map :v x :r (conj (get a :r) (+ (get a :v) x))))\n                      {:v 0 :r []} row) :r) 1)))))","problem":97,"user":"4f40f055e4b0e243712b1fc2"},{"problem":97,"code":"(fn [n] \n  (last \n    (take n \n          (iterate \n            (fn [l] \n              (flatten \n                [1 \n                 (map \n                   #(+ (first %) (last %)) \n                   (partition 2 (interleave l (rest l)))) \n                 1])) \n            [1]))))","user":"55caabd1e4b0e31453f649fb"},{"problem":97,"code":"(fn pascal-is-a-rascal\n  [n]\n  (reduce (fn\n            [acc k] \n            (conj acc  (int  (* (last acc) (/ (- n k) k)))))\n          [1] \n          (range 1 n))\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":97,"code":"#(loop [i % result [1]]\n   (if (= i 1)\n     result\n     (recur\n      (dec i)\n      (conj\n       (apply vector 1 (for [i (range (dec (count result)))] (+ (result i) (result (inc i)))))\n       1))))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":97,"code":"(fn ul [a] (let [fact (fn ff [x] (if (= x 0) 1 (* x (ff (- x 1)))))] (map #(quot (fact %1) (* (fact (- %1 %2)) (fact %2))) (repeat (- a 1)) (range a))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn [thearg] (let [fact (fn fact [n] (if (= n 0) 1 (* n (fact (dec n)))))\n      comb (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n  (map #(comb (dec thearg) %)\n   (range 0 thearg))))","problem":97,"user":"52747090e4b03e8d9a4a74a5"},{"problem":97,"code":"(fn pascal [n]\n    (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else\n      (let [p1 (partition 2 1 (pascal (- n 1)))\n            p2 (map #(apply +' %) p1)]\n        (concat [1] p2 [1]))))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":97,"code":"(fn pascal [n]\n  (if (<= n 1)\n      [1]\n      (concat [1] (map #(+ (first %) (second %)) (partition 2 1 (pascal (dec n)))) [1])))","user":"56bca51ae4b0f26550335963"},{"code":"(fn [size] (reduce #(conj %1 (* (first %1) (/ (- size %2) %2))) `(1) (range 1 size)))","problem":97,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"#(let [el-fn (fn el[r c]\n               (if (or (= c 1) (= c r))\n                 1 \n                 (+ (el (dec r) (dec c))\n                    (el (dec r) c))))]\n   (map (fn [i] (el-fn % (inc i))) (range %)))","problem":97,"user":"518279abe4b0353c468deb65"},{"code":"(letfn [(combine [n m]\r\n          (if (> m (/ n 2))\r\n              (combine n (- n m))\r\n            (/ (reduce * (range (inc (- n m)) (inc n)))\r\n               (reduce * (range 1 (inc m))))))]\r\n  (fn pt [n]\r\n    (into [] (map #(combine (dec n) %) (range n)))))","problem":97,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (vec (concat [1]\n                 (map (partial apply +) (partition 2 1 (pascal (dec n))))\n                 [1]))))","problem":97,"user":"4ee8b9c9535d93acb0a66884"},{"code":"#(last\n  (take %\n        (iterate \n         (fn [x]\n           (vec (map + (conj x 0 ) (cons 0 x )))\n           )\n         [1]\n         )\n        )\n  )","problem":97,"user":"518c5236e4b087e178201de0"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [i] (concat [1] (map #(reduce + %) (partition 2 1 i)) [1])) [1]) (dec n)))","user":"588fbb39e4b00487982d51bd"},{"problem":97,"code":"(fn pascalTriangle [n]\n        (loop [n n \n               res []\n               help (fn help [seqs]\n                      (concat [1] ((fn helps [seqs ]\n                                     (if (empty? (rest seqs)) []\n                                         (conj  (helps (rest seqs))\n                                                (+ (first seqs) \n                                                   (second seqs) )) \n                                         )\n                                     )\n                                   seqs) [1]))\n               ]\n          (cond (empty? res) (recur n (conj res 1) help)\n                ( = (count res) n) res\n                :else (recur n (help res) help)\n                )\n          )\n        )","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [n]\n  (last\n   (take n (iterate (fn [x](concat [1](map (partial apply +)(partition 2 1 x))[1]))[1]))))","problem":97,"user":"5106bc8ae4b01150e115ebec"},{"problem":97,"code":"(fn pas [n]\n(cond\n(= n 1)\n  [1]\n(= n 2)\n  [1 1]\n:else\n  (-> [1]\n  (conj (map #(reduce + %) (partition 2 1 (pas (dec n)))))\n  (conj [1])\n  (flatten))\n))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn [x]\n   (letfn [(fac [n] (reduce * (range 1 (inc n))))\n           (choose [n k] (/ (fac n)\n                            (* (fac k)\n                               (fac (- n k)))))]\n     (map #(choose (dec x) %) (range x))))","problem":97,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":97,"code":"(fn triangle-row [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else \n    (let [pairs (partition 2 1 (triangle-row (dec n)))]\n      (concat [1] (map #(reduce + %) pairs) [1]))))","user":"517e9526e4b09104ecebe7e2"},{"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    (let [pp (concat [0] (pascal (dec n)) [0])]\n      (map #(+ (nth pp (inc %)) (nth pp %))\n           (range n)))))","problem":97,"user":"5341b141e4b00652c8746ecf"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate (fn [row] \n              (let [prow (partition 2 1 row)]\n                (concat [1] (map #(apply + %) prow) [1])))\n            [1])\n(dec n)))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":";; transform [1 2 1] into [ [0 1] [1 2] [2 1] [1 0] ] with left/right 0 padding interleaved previsous line\n;; then reduce it into the new line by adding groups 2/2\n(fn pascal [n] (if (= n 1) [1]\n  (let [prev (pascal (dec n))]\n    (reduce #(conj %1 (apply + %2)) []\n      (partition 2 (interleave (conj prev 0) (cons 0 prev)))))))","problem":97,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":97,"code":"(fn [level]\n  (last (take\n          level\n          (iterate\n            (fn [& level]\n              (concat\n                (first\n                  (reduce\n                    (fn [[next-level prev-elm] curr-elm]\n                      [(concat next-level [(+ prev-elm curr-elm)]) curr-elm])\n                    [[] 0]\n                    (first level)))\n                [1]))\n            [1]))))","user":"5984e7dee4b021a7a535fe43"},{"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (let [s (p (- n 1))]\n      (map + (concat s [0]) (concat [0] s)))))","problem":97,"user":"4e55ea0c535d8a8b8723a281"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (mapv #(apply + %)\n          (partition 2 1 (repeat 0) (cons 0 (pascal (dec n)))))))","problem":97,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn [no]\n  (letfn [(insert [v coll] (concat (concat [v] coll) [v]))\n        (next-line [coll] (insert 1 \n           (map #(apply + %) (partition 2 1 coll))))]\n    (nth (iterate next-line [1]) (dec no))))","problem":97,"user":"4dac39a28cc9d6edb8beb0b3"},{"code":"(fn pascal [n]\r\n  (cond (= n 1) [1]\r\n        (= n 2) [1 1]\r\n        :else\r\n         (conj\r\n          (into [1]\r\n            (map\r\n              (partial apply +)\r\n              (partition 2 1\r\n                (pascal (dec n)))))\r\n          1)))","problem":97,"user":"4dbd0161535d020aff1edf3f"},{"problem":97,"code":"(fn [n]\n  (let [row (fn [v]\n              (let [inside (map (partial apply +) (partition 2 1 v))]    \n                (vec (concat [1] inside [1]))))]\n    (->> [1]\n      (iterate row)\n      (take n)\n      last)))","user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn pascals- [n]\n  ^{:doc \"97. Write a function which returns the nth row of Pascal's                                                                                                                                                                                                                        \n  Triangle.\"}\n  (if (= n 1)\n    [1]\n    (let [p (pascals- (dec n))]\n      (concat [1] (map + p (rest p)) [1]))))","problem":97,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":97,"code":"(fn [n]\r\n    (loop [cnt (dec n) res [1]]\r\n      (if (zero? cnt)\r\n        res\r\n        (recur (dec cnt) (map #(apply + %) (partition 2 1 (concat [0] res [0])))))))","user":"559a8816e4b066d22e731f41"},{"problem":97,"code":"(fn [a] (last(take a (iterate #(concat [1] (map + % (rest %)) [1]) [1]))))","user":"6074e088e4b069485764de4d"},{"code":"(fn [n]\n   (loop [acc [1]\n          x n]\n     (if (= x 1)\n       acc\n       (let [acc2 (map #(apply + %) (partition 2 1 acc))]\n         (recur (concat [1] acc2 [1])\n                (dec x))))))","problem":97,"user":"50868795e4b004985b776e5e"},{"code":"#(vec\n   (letfn [(myfact [x]\n             (loop [acc 1 newx x]\n               (if (<= newx 1)\n                 acc\n                 (recur (* acc newx) (dec newx)))))]\n     (for [y (range %)]\n       (/ (myfact (dec %)) (myfact (- % y 1)) (myfact y)))))","problem":97,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":97,"code":"(fn [n]\n(reduce (fn [s _]\n               (flatten (vector 1 (map #(apply + %) (drop-last (partition-all 2 1 s))) 1))) [1] (range 1 n)))","user":"56fde58ae4b08d47c97781aa"},{"problem":97,"code":"(fn pd[n] (loop [n n l [1]] (if (= 1 n) l (recur (- n 1) (reduce #(if (empty? %1) (list %2 1) (cons %2 (cons (+ (first %1) %2) (rest %1)))) [] l)))))","user":"56a75810e4b0542e1f8d14fc"},{"problem":97,"code":"(fn pascal [n]\n  (nth (iterate #(vec (map + (into [0] %) (conj % 0))) [1]) (dec n)))","user":"587a3babe4b01531a375eae2"},{"code":"(fn [x] (last (take x ((fn pasc [a] (cons a (lazy-seq (pasc\n  (vec(loop [ind 1 prev a result [1]]\n    (if (> ind (- (count prev) 1))\n      (cons 1 result)\n  \t  (recur (inc ind) prev (cons (+ (nth prev ind) (nth prev (- ind 1))) result))\n  \t)\n  ))))\n  ))[1]))))","problem":97,"user":"52016690e4b0b2e020a18f0f"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n      [1]\n  (vec (map \n    + \n    (cons 0 (pascal (dec n)))\n    (reverse (cons 0 (pascal (dec n))))))))","user":"5ed11279e4b016b56eae05b7"},{"code":"(fn f[n] \n  (if (= n 1)\n    [1]\n    (vec (map + (conj (f (dec n)) 0) (cons 0 (f (dec n)))))))","problem":97,"user":"51696ee7e4b03f62cda68ce8"},{"problem":97,"code":"(fn [n]\n  (nth \n    (\n      iterate\n      (fn [a] \n        (\n          concat [1] \n                 (map #(apply + %) (partition 2 1 a)) \n                 [1]\n        )\n      )\n      [1]\n    )\n    (dec n)\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":97,"code":"(fn pascal [n]\n    (if (= n 1) \n      [1]\n      (concat [1]\n              (map (fn [[a b]] (+ a b)) (partition 2 1 (pascal (dec n))))\n              [1])))","user":"507e68abe4b085af06e3afd2"},{"problem":97,"code":"(fn pt [n]\n  (case n \n    1 [1]\n    (let [x (pt (dec n))] \n      (concat [1] (map + x (rest x)) [1]))))","user":"5b81139fe4b047b03b203782"},{"problem":97,"code":"(fn\n  [size]\n  (cond (= size 1) [1]\n        (= size 2) [1 1]\n        :else (loop [res [1 1]\n                     curr-size 2]\n                (if (= curr-size size)\n                  res\n                  (let [res (loop [input res\n                                   res [1]]\n                              (if (= 1 (count input))\n                                (conj res 1)\n                                (recur (rest input) (conj res (+ (first input) (second input))))))]\n                    (recur res (inc curr-size)))))))","user":"5c706232e4b0fca0c162277e"},{"problem":97,"code":"(fn pascal[a] \n  (if (= 1 a)\n    (vector 1)\n    (flatten (vector 1 \n            (let [p (pascal (dec a))] \n                 (loop [r [] prev (first p)  rr (rest p)] \n                    (if (empty? rr) \n                      r\n                      (recur (conj r (+ prev (first rr))) (first rr) (rest rr))\n                    )\n                 )\n            ) \n    1))\n   ) \n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn\n  [n]\n  (letfn [(fac [n] (if (< n 2)\n                       1\n                       (loop [a 1\n                              n n]\n                             (if (= n 0)\n                                 a\n                                 (recur (* a n) (- n 1))))))\n          ; binomial coefficient\n          (bc [n k] (quot (quot (fac n) (fac k)) (fac (- n k))))]\n          (vec (map (partial bc (- n 1)) (range n)))))","problem":97,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn pascal [n]\n   (if (= n 1)\n     [1]\n     (let [p (pascal (- n 1))]\n       (vec\n         (concat\n           [1]\n           (map\n             (fn [i]\n               (+ (p i) (p (+ 1 i)))\n               )\n             (range (- (count p) 1)))\n           [1])))))","problem":97,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":97,"code":"(fn [n]\n  (letfn [(fac [x] (reduce *' (range 1 (inc x))))]\n    (map (fn [k]\n           (/ (fac (dec n))\n              (* (fac k) (fac (- (dec n) k)))))\n         (range n))))","user":"4fdb881ee4b05e33b9224f5e"},{"code":"(fn [n]\n  (nth (iterate \n    #(map +  (cons 0 %) (concat % [0])) [1]) (dec n)))","problem":97,"user":"506e0e5ae4b09350ab4199eb"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [p (pascal (dec n))]\n      (vec (concat [1]\n                   (for [i (range (dec (dec n)))]\n                     (+ (p i) (p (inc i))))\n                   [1])))))","problem":97,"user":"4ed94d69535d10e5ff6f5303"},{"code":"#(nth (iterate (fn [x] (map + `(0 ~@x) `(~@x 0))) [1]) (- % 1))","problem":97,"user":"4e823ed7535db62dc21a62c7"},{"problem":97,"code":"(fn number97 [n]\n  (let [pascal (iterate #(concat [1]\n                                 (map + % (rest %))\n                                 [1])\n                        '(1))]\n    (nth pascal (dec n))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":97,"code":"(fn [a]\n  ; improved by adereth's solution,\n  ; mine was based on the same idea with an exceptional case of a = 1.\n  (nth (iterate #(mapv + (cons 0 %) (conj % 0)) [1]) (dec a)))","user":"5712854ce4b07c98581c3a89"},{"problem":97,"code":"(fn pasTri [n]\n  (lazy-seq (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (into [1]\n                (into (vec \n                 (map (fn[[x y]] (+ x y)) \n                      (partition 2 1 (pasTri (- n 1)))))\n                 [1])))))","user":"541619e8e4b01498b1a719f9"},{"code":"#(nth (iterate (fn [v] (map + (conj v 0) (reverse (conj v 0)))) [1]) (dec %))","problem":97,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":97,"code":"(fn pascal-tri [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal-tri (dec n))\n          last-a (concat [0] last)\n          last-b (concat last [0])\n          ]\n      (vec (map + last-a last-b))\n      ))\n  )","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"code":"(fn pascal [r]\n  (let [fact #(reduce * (range 1 (inc %)))\n        n (dec r)\n        combinations #(/ (fact n) (* (fact %) (fact (- n %))))]\n    (map combinations (range r))))","problem":97,"user":"531dfaf5e4b08068f379edb3"},{"problem":97,"code":"(fn [n]\n   (nth (iterate #(vec (map + (cons 0 %) (conj % 0)))\n                 [1]) (dec n)))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [l]\n    (let [len (count l)]\n      (loop [acc [1] n 0]\n        (if (= n (- len 1))\n          (conj acc 1)\n          (let [x (nth l n), y (nth l (inc n))]\n            (recur (conj acc (+ x y)) (inc n))))))) [1]) (dec n)))","user":"565e0934e4b068f2fe63dc30"},{"problem":97,"code":"(fn [x]\n  (last\n   (take x\n     (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"600eb95de4b074f607df66a6"},{"code":"(fn [d]\n    (if (= 1 d) [1]\n        (nth (iterate\n              (fn [l]\n                (flatten [      \n                 1\n                 (map #(apply + %) (partition 2 1 l))\n                 1]))\n              [])\n             (- d 1))))","problem":97,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn f [n]\n   (if (= n 1)\n       [1]\n       (concat [1]\n               (map (partial apply +) (partition 2 1 (f (dec n))))\n               [1])))","problem":97,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":97,"code":"(fn pascalX [x] (if(= x 1) [1] (concat [1] ((fn addAdjacentX [x] (vec (map + x (rest x)))) (pascalX (- x 1))) [1])))","user":"568820e8e4b0dcc4269f4067"},{"problem":97,"code":"(fn [n]\n  (let [next-line\n        (fn [l]\n          (->> \n           (concat [0] l [0])\n           (partition 2 1)\n           (map (fn [[a b]] (+ a b)))\n           )\n          )\n        ]\n    (first (take 1 (drop (- n 1) (iterate next-line [1]))))\n    )\n  )","user":"51f7dd27e4b06ff1c25c52dc"},{"problem":97,"code":"(fn PasTri [N]\n    ;;(println N)    \n    (cond \n      (= 1 N)  [1]\n      :else\n      (let [\n          Prev (PasTri (dec N))\n          Cur-Inner           \n            (for [Index (range 0 (- N 2)) ]\n              (apply + [(nth Prev Index) (nth Prev (inc Index) 0)] )\n              ;;(str Index \"=\" (nth Prev Index))\n            )\n        ]\n        ;;(println \"*\" N \"*\" Prev \"*\" Cur-Inner \"*\" )\n        (concat [1] Cur-Inner [1])      \n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":97,"code":"(fn pascal [n]\n  (let [pascal-next (fn [coll] (concat [1] (map #(apply + %) (partition 2 1 coll)) [1]))]\n    (last (take n (iterate pascal-next [1])))))","user":"59f78b49e4b0ca45a743a30e"},{"problem":97,"code":"(fn [n](\nif (= n 1)\n[1]  \n(nth (iterate (fn [y] (concat [1] ((fn m [x] (if (> (count x) 1) (conj (m (rest x)) (+ (first x) (second x))) [] )) y) [1])) '(1 1)) (- n 2))\n)  )","user":"54a7efdee4b09f271ff37c9d"},{"problem":97,"code":"(fn pasc [n]\n  (if (= n 1) [1]\n   (let [prev (pasc (dec n))]\n   \t( into [] (map-indexed  \n   \t\t(fn [idx _](if (or (= idx 0) (= idx (dec n))) 1 (+ (prev (dec idx)) (prev idx)))) (range n))\n   \t\t))\n   ))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":97,"code":"(fn pascal\n  ([row] (pascal (dec row) [1]))\n  ([row acc]\n   (if (zero? row)\n     acc\n     (pascal\n       (dec row)\n       (concat [1] (map #(+ (first %) (second %)) (partition 2 1 [0] acc)))))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [row] (map #((fn c [n r]\n         (if (<= n 0)\n           (if (= r 0) 1 0)\n           (if (<= 0 r n)\n             (+ (c (dec n) r) (c (dec n) (dec r)))\n             0\n             )))\n (dec row) %) (range row)))","problem":97,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":97,"code":"(fn [n]\n(reduce (fn [l _]\n  (loop [more (next l)\n         rl [1]\n         p    (first l)]\n    (if (nil? more)\n      (conj rl 1)\n      (recur (next more) (conj rl (+ p (first more))) (first more)))))\n        [1] (take (dec n) (repeat 1))))","user":"56051095e4b08b23635d3162"},{"code":"(fn tr[n] (nth (iterate #(conj (into [1] (map + % (next %))) 1) [1]) (dec n)))","problem":97,"user":"4e7db3b4535db169f9c796e1"},{"code":"(fn n97 [n]\n  (letfn [(fac [k] (loop [x k a 1] (if (zero? x) a (recur (dec x) (* a x)))))\n          (combin [x k] (/ (fac k) (fac x) (fac (- k x))))]\n    (let [k (dec n)] (for [x (range (inc k))] (combin x k)))))","problem":97,"user":"52b43468e4b0c58976d9ad1b"},{"code":"#(last (take % (iterate (fn [c]\n        (loop [r [1] c c]\n                   (if (> 2 (count c))\n                       (conj r 1)\n                       (recur (conj r (+ (first c) (second c))) (rest c))))) [1])))","problem":97,"user":"4dc78527535d8a4b2fd7428f"},{"code":"(fn [r]\n  (take r\n    (map first\n      (iterate\n        #(let [c (second %)]\n          (vector\n            (*\n              (first %)\n              (/ (- r c) c))\n            (inc c)))\n        [1 1]))))","problem":97,"user":"4f253a49e4b0d66497709ff3"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-binomial-factors [col] (->>\n                                         col\n                                         (partition 2 1)\n                                         (map #(apply + %))\n                                         (cons 1)\n                                         reverse\n                                         (cons 1)\n                                         vec))]\n    (loop [res [1] i (dec n)]\n      (if (zero? i)\n        res\n        (recur (next-binomial-factors res) (dec i))))))","user":"4f1e4ab5535d64f603146496"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         resu [1]]\n    (if (= i n)\n      resu\n      (recur (inc i) (concat [1] (map #(+ %1 %2) resu (rest resu)) [1])))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":97,"code":"(fn [n] (nth (iterate #(mapv +' (conj % 0) (cons 0 %)) [1]) (dec n)))","user":"548b8a50e4b0e286459a11ff"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(concat [1] (map + % (rest %))  [1]) [1])\n   (dec n)))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn ! [level]\r\n  (if (= 1 level)\r\n    [1]\r\n    (conj (second\r\n             (reduce\r\n                (fn [[prev acc] x]\r\n                  [x (conj acc (+ prev x))])\r\n                [0 []]\r\n                (! (dec level)))) 1)))","problem":97,"user":"4dc97aec535d5973398f9284"},{"code":"(fn pascal [x] (let [x (dec x)] (map (fn [y] (/ (apply *' (range 1 (inc x)))\n                                             (apply *' (into (range 1 (inc y))\n                                                             (range 1 (inc (- x y)))))))\n                              (range (inc x)))))","problem":97,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         row [1]]\n    (if (>= i n)\n      row\n      (recur (inc i) (conj (into [] (map-indexed  #(+ (nth (cons 0 row) %1) %2) row)) 1)))))","user":"554bc64ae4b0a04f79299598"},{"problem":97,"code":"(fn pascal [n] (if (= n 1) [1] (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","user":"555287a4e4b0deb715856df5"},{"code":"(fn [n]\n       (let [e [1]\n             t (concat\n                 [[1]]\n                 (iterate \n                   #(concat e (map (fn[[a b]](+ a b)) (partition 2 1 %)) e)\n                    [1 1]))]\n          (nth t (- n 1))))","problem":97,"user":"4e778d36535d324fb2983d71"},{"code":"(fn pt [n] (last (take n \n                       (iterate \n                        #(let [row (conj (vec %) 0)] (map + row (conj (seq row) 0)))\n                        [1]))))","problem":97,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (let [prev (pascal (dec n))]\n    (concat [1] (map + (drop 1 prev) (drop-last 1 prev)) [1]))\n    ))","user":"6045582fe4b02d28681c77b6"},{"problem":97,"code":"(fn loo [n]\n\t(cond \n\t\t(= n 1) [1]\n\t\t(= n 2) [1 1]\n\t\t:else \n\t\t\t(mapv + (into [0] (loo (dec n))) (conj (loo (dec n)) 0))))","user":"51e8ee6be4b07cae92c04bfd"},{"code":"(fn pascal [n] (if (= 1 n) [1] (flatten [1 (map (partial apply +) (partition 2 1 (pascal (dec n)))) 1])))","problem":97,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":97,"code":"(fn [n] (first\n         (drop (dec n)\n               (iterate\n                (fn [s]\n                  (concat [1]\n                          (map #(->> s (drop %) (take 2) (apply +))\n                               (range (dec (count s))))\n                          [1]))\n                [1]))))","user":"50ef4e2be4b0a78662fa2653"},{"problem":97,"code":"#(loop [res [1] n %]\n   (if (= n 1)\n     res\n     (recur (map + (cons 0 res) (concat res [0]))\n            (dec n))))","user":"55868660e4b059ccff29b1d4"},{"problem":97,"code":"(fn [n]\n    (->> [1 [1]]\n      (iterate \n        (fn [[n lst]] \n          [\n            (inc n)\n            (->>\n              (map-indexed \n                (fn [idx itm] \n                  (if (zero? idx) 0 (+ itm (nth lst (dec idx))))\n                  ) lst)\n              (rest)\n              (cons 1)\n              (reverse)\n              (cons 1)\n            )\n          ]))\n      (drop (dec n))\n      first\n      second\n    ))","user":"5bbbce0ee4b0a20761a2360d"},{"code":"(fn [n]\r\n  (nth\r\n    (iterate\r\n      (fn [x]\r\n        (into\r\n          (into [1] (map + (butlast x) (rest x)))\r\n          [1]))\r\n      [1])\r\n    (dec n)))","problem":97,"user":"4db85282535d1e037afb218a"},{"problem":97,"code":";; It can be calculated much efficiently by using following induction:\n;;   C(n,k+1) = C(n,k) * (n-k) / (k+1)\n;; where\n;;   C(n,0) = 1\n;;   n = row number, n > 0\n;;   k = kth value in the row, k >= 0\n(fn pascals-triangle\n  [n]\n  (if (= n 1)\n    [1]\n    (let [n-1 (pascals-triangle (dec n))]\n      (map + (concat [0] n-1) (concat n-1 [0])))))","user":"55d5ee3fe4b0e31453f64a92"},{"code":"#(letfn [(fac [x] (reduce * 1 (range 1 (inc x))))\n         (binom [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]\n   (map (partial binom (dec %)) (range %)))","problem":97,"user":"51e00020e4b01188f0627534"},{"code":"(fn pascal [n]\r\n  (letfn [[fac [n]\r\n           (loop [n n\r\n                  result 1]\r\n             (if (zero? n)\r\n               result\r\n               (recur (dec n) (* result n))))]]\r\n    (for [i (range n)]\r\n      (/ (fac (dec n)) (fac i) (fac (- (dec n) i))))))","problem":97,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (cond\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   (= 3 n) [1 2 1]\n   :else (do\n           (let [previous-pascal-triangle (pascal-triangle (dec n))\n                 current-pascal-triangle-body (map + \n                                                   previous-pascal-triangle\n                                                   (rest previous-pascal-triangle))]\n             (concat [1]\n                     current-pascal-triangle-body\n                     [1])))))","user":"567bf820e4b05957ce8c61ad"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %)))\n                [1])\n       (dec n)))","user":"533018b2e4b019098a6f8b56"},{"code":"(fn [n]\n  (-> (iterate #(vec (map + (cons 0 %) (conj % 0))) [1])\n      (nth (dec n))))","problem":97,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [m] (let [n (- m 1)] (into [] (for [k (range 0 (+ n 1))] (/ (if (= n 0) 1 (reduce * (range 1 (+ 1 n))))\n                                         (if (= k 0) 1 (reduce * (range 1 (+ 1 k)))) \n                                         (if (= (- n k) 0) 1 (reduce * (range 1 (+ 1 (- n k))))))))))","problem":97,"user":"525c575be4b0cb4875a45d38"},{"problem":97,"code":"(fn pascal-line [num]\n  (letfn [(fac [x]\n            (loop [x x\n                   result 1]\n              (if (<= x 1) result\n                  (recur (dec x) (* result x)))))\n          (pascal [x y]\n            (let [a (dec x)\n                  b (dec y)]\n              (/ (fac a) (* (fac (- a b)) (fac b)))))]\n    (map #(pascal num %) (range 1 (inc num)))))","user":"5eb3d02be4b00a66d4a95215"},{"problem":97,"code":"(fn [x]\n  (loop [result [1] n x]\n    (if (= n 1)\n      result\n      (let [nr (map + (cons 0 (apply list result))\n                      (conj (vec result) 0))]\n        (recur nr (dec n))))))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [n]\n  (loop [ret [1] c (dec n)]\n    (if (pos? c)\n      (recur\n        (concat [1] (map (partial apply +) (partition 2 1 ret)) [1])\n        (dec c))\n      ret)))","problem":97,"user":"4e8e8c24535d65386fec2143"},{"problem":97,"code":"(fn [n] (nth (iterate #(mapv + (conj % 0) (into [0] %)) [1]) (dec n)))","user":"5259451ce4b0cb4875a45cd7"},{"problem":97,"code":"(fn[row] (loop [start 1 prevRow [1]]\n           (if (= start row) prevRow \n             (recur (inc start) \n                    ((fn[prevRow]\n  \t\t\t\t\t\t(conj (reduce #(conj %1 (reduce + %2)) [1] \n  \t\t\t\t\t\t(into [] \n    \t\t\t\t\t(filter #(= 2 (count %)) \n      \t\t\t\t\t(reductions \n        \t\t\t\t(fn[coll item] (if (= 2 (count coll)) (conj (vector (last coll)) item) (conj coll item))) [] \n        \t\t\t\tprevRow)))) 1)) prevRow)))))","user":"571172ece4b09c608db70446"},{"problem":97,"code":"#(last\n  (take %\n        (let [f (fn [x] (let [v (concat [0] x [0])]\n                          (reduce (fn [a [x y]] (conj a (+ x y))) [] (map vector v (rest v)))))] (iterate f [1]))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn foo [x]\r\n  (cond (= x 1) [1]\r\n        :else (let [x (foo (dec x))]\r\n                (concat [1]\r\n                        (map #(+ (first %) (last %))\r\n                             (partition 2 \r\n                                        (interleave (drop-last x) (rest x))))\r\n                        [1]))))","problem":97,"user":"4eb66737535d7eef3080736b"},{"problem":97,"code":"(fn [n]\n  (loop [i n\n         row [1]]\n    (if (= i 1)\n      row\n      (recur (dec i) (map + (concat row [0]) (concat [0] row))))))","user":"4f041de1535dcb61093f6ba5"},{"problem":97,"code":"(fn ex97 [n]\n  (if (= n 1)\n    [1]\n    (conj (vec (cons 1 (map (fn [[a b]] (+ a b)) (partition 2 1 (ex97 (dec n)))))) 1)))","user":"532bce35e4b09d4e7a9b5536"},{"problem":97,"code":"(fn my_pascal [n]\n (if (= 1 n)\n   [1]\n   ((fn [v]\n     (vec (map + (cons 0 v) (conj v 0))))\n    (my_pascal (- n 1)))))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn p [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev (p (dec n))] \n           (for [i (range n)]\n             (cond\n              (= i 0) 1\n              (= i (dec n)) 1\n              :else (+ (nth prev (dec i)) (nth prev i)))))))","problem":97,"user":"5117c31ee4b0e0897831a60c"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [row] (let [r (conj row 0)] (map + r (reverse r))))\n                 [1]) (dec n)))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":97,"code":"(fn pascal [n]\n        (if\n            (= n 1)\n            [1]\n            (concat\n                [1]\n                (drop-last\n                    (reduce\n                        (fn [acc, nxt]\n                            (if\n                                (empty? acc)\n                                [nxt]\n                                (concat\n                                    (drop-last acc)\n                                    [(+ nxt (last acc)) nxt])))\n                        []\n                        (pascal (- n 1))))\n                [1])))","user":"5694290fe4b0dcc4269f4110"},{"code":"(fn [n] (loop [m n acc [1]] (if (= m 1) acc (recur (dec m) (into [1] (conj (mapv #(apply + %) (partition 2 1 acc)) 1))))))","problem":97,"user":"5065faf9e4b0313a384e5645"},{"problem":97,"code":"(fn [n]\n    (let [p∆-iter (fn [coll]\n                    (->> coll\n                         (cons 0)\n                         (partition 2 1 [0])\n                         (mapv #(reduce + %))))]\n      (last (take n (iterate p∆-iter [1])))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn pas [n]\n  (if (= 1 n)\n    [1]\n    (let [t (conj (pas (dec n)) 0)]\n      (map #(apply + %) (map vector t (reverse t))))))","problem":97,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn [d] (nth (iterate (fn [x] (cons 1 (map #(apply + %) (partition-all 2 1 x)))) nil) d))","problem":97,"user":"4eecdd66535d93acb0a668b9"},{"problem":97,"code":"(fn pascal [n] (case n \n\t\t\t\t\t1 [1]\n\t\t\t\t\t2 [1 1]\n\t\t\t\t\t(let [p (pascal(dec n))] (concat [1] (map + p (rest p)) [1]))\n\t\t\t\t)\n)","user":"580c8fcee4b0849f6811b721"},{"problem":97,"code":"; using solution of #147\n(fn [n] (nth (iterate #(map +' \n                            (cons 0 %) (concat % [0])) \n                      [1])\n             (dec n)))","user":"54d341f7e4b0e8a36923e603"},{"problem":97,"code":"(fn pascal [x]\n  (letfn [(sum_prev [y] (for [x (partition 2 1 y)] (apply + x)))]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (into [1] ( conj (vec (sum_prev (pascal (dec x)) )) 1 ) \n    )\n  )\n  )\n)\n)","user":"55c5e781e4b0e31453f649b8"},{"code":"(fn t [n]\r\n    (cond (= n 1) [1]\r\n          (= n 2) [1 1]\r\n          :else (let [r (map #(apply + %) (partition 2 1 (t (dec n))))]        \r\n                  (conj (apply conj '(1) r) 1)\r\n                  )))","problem":97,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [x] (\n  let [nr (fn [y]\n    (vec (concat [1] (map #(reduce + %) \n      (map vec (partition 2 1 y))) [1])))]\n  (nth (take x (iterate nr [1])) (dec x))))","problem":97,"user":"4ea9b80c535d7eef30807306"},{"problem":97,"code":"(fn pascal [n]\n  (map #((fn f [c r]\n           (if (or (= c 0) (= c r))\n             1\n             (+ (f (dec c) (dec r)) (f c (dec r))))) % (dec n))\n       (range n)))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn [n]\n  (loop [row [1] n n]\n    (if (= n 1) row\n        (recur (flatten [1 (map #(apply + %) (partition 2 1 row)) 1])\n               (dec n)))))","problem":97,"user":"4f0c4518535d0136e6c2230b"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [[f & _ :as s]] (concat [f] (map (partial apply +) (partition 2 1 s)) [f])) [1]) (dec n)))","user":"5958cef6e4b066ee0a44af94"},{"problem":97,"code":"(fn [x] (let [ xs (dec x)\n                fact (fn [n] (apply * (map inc(range n))))]\n           (for [y (range (inc xs))] \n             (/ (fact xs) (* (fact y) (fact(- xs y )))))))","user":"566a3a26e4b0a866af689699"},{"problem":97,"code":"(fn\n  [depth]\n  (if (= 0 depth)\n    []\n    (if (= 1 depth)\n      [1]\n      (loop [prev [1]\n             i    1]\n        (if (= i depth)\n          prev\n          (let [prev (apply interleave (repeat 2 prev))\n                prev (concat [0] prev [0])\n                prev (partition 2 prev)\n                row  (vec (map (fn [[a b]] (+ a b)) prev))]\n            (recur row (inc i))))))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":97,"code":"(fn [n]\n  (loop [row '(1) c 1]\n    (if (= c n)\n      row\n      (recur ((fn [newrow]\n               (loop [ans '() tmprow newrow]\n                 (if (= 1 (count tmprow))\n                   ans\n                   (recur (conj ans (+ (first tmprow) (second tmprow))) (rest tmprow))))) (conj (reverse (conj row 0)) 0)) (inc c)))))","user":"59368ccae4b02506e01a297a"},{"problem":97,"code":"(fn pt [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else (concat '(1) (map #(apply + %) (partition 2 1 (pt (- n 1)))) '(1))))","user":"57af41bce4b0fbc9809a2731"},{"problem":97,"code":"(fn [n]\n  (loop [ind 1 row [1]]\n    (if (= ind n)\n      row\n      (recur\n       (inc ind)\n       (map #(+ %1 %2) (concat [0] row) (concat row [0]))))))","user":"5596af34e4b04c1e5c31d758"},{"code":"(fn [n]\n  (nth \n    (lazy-seq \n      (cons \n        [1]\n        (\n          (fn row [prev]\n            (lazy-seq\n              (let [next-val \n                    (concat \n                      [1] \n                      (map + prev (rest prev))\n                      [1])]\n                (cons next-val (row next-val)))))[1])))\n          (dec n)))","problem":97,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn[n](nth (iterate\r\n         #(let [v (concat [0] % [0])]\r\n           (vec (map + v (rest v))))\r\n [1]) (dec n)))","problem":97,"user":"4deff9f9535d08e6dec9fe15"},{"code":"#(map (partial (fn pascal [n m] (if (or (= m 0) (= n m)) 1 (+ (pascal (dec n) (dec m)) (pascal (dec n) m)))) (dec %)) (range %))","problem":97,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn pas [n]\n  (loop [k 1 lt [1]]\n    (if (>= k n)\n      lt\n      (recur (inc k) (concat [1] (map + lt (rest lt)) [1])))))","problem":97,"user":"4e1b2cd9535d04ed9115e7fd"},{"code":"(letfn \n  [(pascal []\n           (iterate #(map + \n                          (cons 0 %) \n                          (concat % [0]))\n                    [1]))]\n  \n  #(nth (pascal) (dec %)))","problem":97,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [row]\n        (concat\n          [1]\n          (map (partial apply +) (partition 2 1 row))\n          [1]))\n      [1])\n    (dec n)))","problem":97,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [x]\n  (let [x (dec x)] (letfn [(fact [n]  (reduce * 1  (range 1  (inc n))) )\n          (ncr [n k]\n            (/ (fact n) (* (fact k) (fact (- n k))))) ]\n    (for [y (range 0 (inc x)) :when (<= y x)]\n      (ncr x y)\n      )\n    ))\n  )","problem":97,"user":"5008d149e4b0144d4f561e41"},{"code":"(fn [n] (nth (iterate (fn [r] (concat [1] (map #(apply + %) (partition 2 1 r)) [1])) [1]) (dec n)))","problem":97,"user":"4e6a5a32535d8ccf87e9fed0"},{"problem":97,"code":"(fn [n] \n (nth\n  (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n           [1]) (dec n)))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [i]\n  (nth (iterate #(map + `[~@% 0] `[0 ~@%])\n                [1])\n       (- i 1)))","problem":97,"user":"51ad244fe4b09397d510977f"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(concat [1] (map (fn [[a b]] (+ a b)) (partition 2 1 %)) [1])\n                [1])\n       (dec n)))","user":"546ed28be4b00cfc9eacc1a5"},{"code":"(fn [n]\n  (condp = n\n    1 [1]\n    (loop [n (- n 2), acc [1 1]]\n      (if (zero? n)\n        acc\n        (recur (dec n)\n               (vec (cons 1 (conj (loop [s acc, subacc []]\n                                      (if (> (count s) 1)\n                                        (recur (rest s) (conj subacc (+ (first s) (second s))))\n                                        subacc)) \n                                  1))))))))","problem":97,"user":"4dbb1126535d1e037afb21b3"},{"code":"(fn [i]\n    (nth \n     (iterate (fn [row]\n                (flatten [1 (map #(reduce + %) (partition 2 1 row)) 1])) [1])\n     (- i 1)))","problem":97,"user":"52eb400ee4b0705949c4443b"},{"problem":97,"code":"(fn foo [n]\n  (nth (iterate #(conj ((fn i [s]\n      (let [[a b & o] s]\n        (if (nil? b) (list a)\n          (conj (i (rest s)) (+ b a))))) %1) 1) [1]) (- n 1)))","user":"5590e55de4b0277789237676"},{"problem":97,"code":"#(nth  (iterate (fn [v] \n                    (vec (concat [1] (map + v (rest v)) [1]))) [1])   (dec %)     )","user":"5cbd5b42e4b026601754b9f6"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (letfn [(adjsum [xs] (map + xs (rest xs)))]\n      (conj (vec (cons 1 (adjsum (pascal (dec n))))) 1))))","problem":97,"user":"508157b2e4b0946d0443855c"},{"code":"(fn fib [n]\n   (letfn [(row [s]                                        \n             (let [h (first s) r (rest s)]\n               (if (empty? (rest r))\n                 (list (+ h (first r)))\n                 (conj (row r) (+ h (first r)))\n                 ))\n             )]\n     (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else\n      (concat [1] (row (fib (- n 1))) [1]))\n     ))","problem":97,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":97,"code":"#(loop [row [1]\n        n %]\n   (if (= n 1)\n     row\n     (recur \n      (concat [1]\n              (for [[x y] (partition 2 1 row)]\n                (+ x y))\n              [1])\n      (dec n))))","user":"5db19599e4b010eb3c36cd05"},{"problem":97,"code":"(fn pascal-row [n]\n\t(letfn [(iter-pascal [row]\n\t\t(vec (map + (conj row 0) (vec (reverse (conj row 0))))))]\n\t(nth (iterate iter-pascal [1]) (dec n))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn f [n]                                                                      \n  (if (= n 1)                                                                  \n    [1]                                                                        \n    (vec (concat '(1) (map #(apply + %) (partition 2 1 (f (dec n)))) '(1))) ) )","problem":97,"user":"4df20dda535d08e6dec9fe23"},{"code":"(memoize (fn pascal [n]\n  (cond (< n 1) nil\n  (= n 1) [1]\n  :else (flatten [1 (map (partial apply +)\n(partition 2 1 (pascal (dec n)))) 1]))))","problem":97,"user":"50366589e4b0fbe0a74d26c3"},{"code":"(fn __ [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else\n   (loop [cur_n 2 v (vector 1 1)]\n  (if (= cur_n n)\n      v\n      (recur (inc cur_n) \n             (into [1] \n               \t  (into \n                   (vec (map-indexed #(+ %2 (v (inc %))) (butlast v)))\n                   [1])))))))","problem":97,"user":"4fa719c0e4b081705acca1bf"},{"problem":97,"code":"(fn [n]\n  (letfn [(num [n k prev]\n            (cond\n              (= k 0) (cons 1 (num n (inc k) 1))\n              (< k n) (let [factor (/ (- n (dec k)) k)\n                            newnum (* prev factor)]\n                        (cons (int newnum) (num n (inc k) newnum)))))]\n    (if (= 1 n)\n      [1]\n      (conj\n       (into [] (num (dec n) 0 1))\n       1))))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn pas [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (concat [1] (map #(reduce + %) (partition 2 1 (pas (- n 1)))) [1])\n    ))","problem":97,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn pnth\n  ([n] (pnth n [1]))\n  ([n l] (if (>= (count l) (/ n 2)) (if (even? n) (concat l (reverse l)) (concat l (rest (reverse l))))\n           (pnth n (conj l (* (last l) (/ (- n (count l)) (count l))))))))","problem":97,"user":"53638ed2e4b0243289761e5b"},{"problem":97,"code":"(fn [lvl]\n  (let [f (fn [n] (apply * (range 1 (inc n))))\n        nCr (fn [n r] (/ (f n) (f r) (f (- n r))))]\n    (for [x (range lvl)]\n      (nCr (dec  lvl) x))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":97,"code":"(fn p [n]\n   (if (= 1 n) \n     [1]\n     (let [old (mapcat identity (vector [0] (p (dec n)) [0]))]\n             (for [k (range 1 (inc n))]\n               (+ (nth old (dec k)) (nth old k))))))","user":"56e06625e4b0ca2494a09607"},{"problem":97,"code":"(fn [n]\n     (letfn [(fact [n] (reduce * (range 1 (inc n))))]\n       (cons 1 (map #(/ (fact (dec n)) (* (fact %1) (fact (- (dec n) %1)))) (range 1 n)))))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (dec n))\n          inner (map (partial apply +) (partition 2 1 prev))]\n      `[1 ~@inner 1])))","problem":97,"user":"4edecdae535d10e5ff6f533c"},{"problem":97,"code":"(fn pascal [max-row]\n\t(loop [row [1] irow 1]\n\t\t(if (>= irow max-row)\n\t\t\trow\n\t\t\t(recur (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1] ))\n\t\t\t\t\t(inc irow)))))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn pascal [n] (map #((fn bino [n k] (/ ((fn fak [n] (reduce * (range 1 (+ n 1)))) n) (* ((fn fak [n] (reduce * (range 1 (+ n 1)))) k) ((fn fak [n] (reduce * (range 1 (+ n 1)))) (- n k) )))) (- n 1) %) (range (+ n))))","problem":97,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn [n]\n  (letfn\n    [(pt [col]\n         (loop [result [1] coll col]\n           (if (empty? (rest coll))\n             (conj result 1)\n             (recur (conj result (+ (first coll) (second coll))) (rest coll)))))]    \n    (nth (iterate pt [1]) (- n 1))))","problem":97,"user":"518ccf6be4b05e6c8537e386"},{"problem":97,"code":"(fn npt [n] (let [cpt (fn pt [coll] (let [res (map #(reduce +' %) (partition 2 1 coll))\n                                         row (if (empty? res) [(first coll) (last coll)] [(first coll) res (last coll)])]\n                                      (lazy-seq (cons coll (pt (flatten row))))))]\n                (last (take n (cpt [1])))))","user":"5b421edce4b02d533a91bc2c"},{"code":"#(last (take % (iterate (fn [i] (mapv (fn [[x y]] (+ x y)) (partition 2 1 (concat [0] i [0])))) [1])))","problem":97,"user":"523b1a65e4b02f719975bdbd"},{"code":"(fn pascal-triangle [level]\n  (let [s (fn s [l]\n            (if (next l)\n              (cons (+ (first l) (second l)) (s (next l)))))]\n    (if (= level 1) \n      [1]\n      (loop [i 2 arr [1 1]]\n        (if (= i level)\n          arr\n          (recur (inc i) (flatten [1 (s arr) 1])))))))","problem":97,"user":"515896f2e4b059418b97f0a8"},{"problem":97,"code":"(fn [x]\n  (loop [answers [1] n x]\n    (if (> n 1)\n      (recur (map + (concat [0] answers) (concat answers [0])) (dec n))\n      answers)))","user":"55625903e4b0c656e3ff17d7"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(fact [n] (loop [i n r 1] (if (<= i 1) r (recur (dec i) (* i r)))))]\n    (let [factn (fact (dec n))]\n      (reduce #(conj %1 (/ factn \n                           (* (fact %2) \n                              (fact (- (dec n) %2)))))\n              [] (range n)))))","user":"5eee7311e4b07c55ae4a0510"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map + `(0 ~@%) `(~@% 0)) `(1)))))","user":"5f96fa49e4b0715f5002d7e9"},{"code":"(fn pascal-triangle\n  ([vec-size]\n    (pascal-triangle vec-size [1] [1] 1))\n  ([vec-size previous now pointer]\n    (println now)\n    (if (= vec-size (count now))\n      now\n      (if (= (dec (count now)) (count previous))\n        (recur vec-size now [1] 1)\n        (if (= (count previous) (count now))\n          (recur vec-size previous (conj now 1) (inc pointer))\n          (recur vec-size previous (conj now (+ (get previous pointer) (get previous (dec pointer)))) (inc pointer)))))))","problem":97,"user":"4e16bdef535d04ed9115e7e9"},{"problem":97,"code":"(fn pt\n  [layer]\n  (case layer\n    1 [1]\n    2 [1 1]\n    (concat [1] (map (partial apply +) (partition 2 1 (pt (dec layer)))) [1])))","user":"54126d0ce4b01498b1a719d5"},{"code":"#(map second \n       (take % \n      (iterate \n       (fn [[x y]] [(inc x) (* (/ y x) (- % x))])[1 1])))","problem":97,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn f [n]  (cond (= 1 n) [1]  :else (let [p (into [0] (f (dec n)))] (conj (vec (map (fn [[a b]] (+ a b)) (map vec (partition 2 1 p)))) 1))))","problem":97,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [n]\n  (letfn [(rows ([]\n                 (let [first [1]]\n                   (cons first (rows first))))\n            \t([previous]\n                 (let [totals (map #(reduce + %) (partition 2 1 previous))\n                       next (concat [1] totals [1])]\n                   (lazy-seq (cons next (rows next))))))]\n    (first (drop (dec n) (rows)))))","problem":97,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn [i]\n  (let [next-row (fn [previous-row]\n                   (conj (reverse (conj (map (fn [pair] (apply + pair)) (partition 2 1 previous-row)) 1)) 1))]\n    (if (= i 1) [1] (first (drop (dec i) (iterate next-row [1]))))))","problem":97,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn pascal-row [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [prev (pascal-row (dec n))]\n      (concat [1] (map + prev (rest prev)) [1]))))","problem":97,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn [depth]\n  (loop [current 1,\n        row [1]]\n    (if (= current depth)\n      row\n      (recur (inc current) \n             (map #(apply + %) (partition 2 1 (concat [0] row [0])))))))","problem":97,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn [n]\n  (loop [i 1, r [1]]\n    (if (= i n)\n      r\n      (recur (inc i)\n        (concat [1] (map + r (rest r)) [1])))))","problem":97,"user":"50aab057e4b056ee0193586b"},{"code":"#(nth  (iterate  (fn [c] (concat [1] (map + c (rest c)) [1]))  [1])  (- % 1))","problem":97,"user":"517945dce4b0684c1c981a43"},{"code":"(fn pascal [i]\n  (cond\n   (= i 1) [1]\n   (= i 2) [1 1]\n   (> i 2) (concat [1] (let [p (pascal (dec i))] (map + p (rest p))) [1])\n   ))","problem":97,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn foo [n]\n   (if (= n 1)\n     [1]\n     (concat [1] (map (partial apply +) (partition 2 1 (foo (dec n)))) [1]))\n   )","problem":97,"user":"4fa3c137e4b081705acca193"},{"problem":97,"code":"(fn P [n] (if (= n 1) [1] (let [s (P (- n 1))] (concat [1] (map + (drop-last s) (rest s)) [1]))))","user":"55f6fe09e4b06e875b46cea2"},{"problem":97,"code":"(fn [n]\n  (->> []\n       (iterate \n         (fn [p]\n           (if (empty? p)\n             (list 1)\n             (map (partial apply +) (partition 2 1 (concat [0] p [0]))))))\n       (take (inc n))\n       last))","user":"55702081e4b09a3098a52529"},{"problem":97,"code":"(fn __ [n]\n  (if (= n 1) \n    [1]\n    (->> (__ (dec n))\n         (partition 2 1)\n         (map (partial apply +))\n         (#(concat (conj % 1) [1])))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":97,"code":"#(letfn[(factorial[n]\n                  (apply * (range 1 (inc n))))\n        (binomial[n k]\n                 (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n   (map (fn[col] (binomial (dec %) col)) (range %)))","user":"556c70dae4b09a3098a524fd"},{"problem":97,"code":"(fn p [n]\n  (cond\n    (= n 1) [1]\n    :else (conj (vec (conj (map #(apply + %)\n                                (partition 2 1 (p (dec n)))) 1)) 1)))","user":"5a66f358e4b0512ff01cd9d5"},{"problem":97,"code":"(fn pascal-triangle \n  [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal-triangle (dec n))\n          new-elements (map (fn [a b] (+ a b)) prev (rest prev))]\n      (concat [1] new-elements [1]))))","user":"53161a56e4b08068f379ed3e"},{"code":"(fn Y [x] (cond \r\n           (= x 1) [1]\r\n           (= x 2) [1 1]\r\n           :else (concat [1] (map #(+ (first %) (second %)) (partition 2 1 (Y (dec x)))) [1])))","problem":97,"user":"503354c3e4b0c6c1199c710c"},{"problem":97,"code":"(fn pascals-triangle-row [n]\n  (let [iterate-indexed (fn [func initial]\n  (map\n    :value\n    (iterate\n      (fn [{last-index :index\n            last-value :value}]\n        (let [index (inc last-index)]\n          {:index index\n           :value (func index last-value)}))\n      {:index 0 :value initial})))]\n    (take\n    n\n    (iterate-indexed\n      (fn [r previous]\n        (/\n          (* (- n r)\n             previous)\n          r))\n      1))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn pascal [n]\n  (loop [l [1] i n]\n    (if (= i 1)\n      l\n      (recur (mapv + (cons 0 l) (conj l 0)) (dec i)))))","problem":97,"user":"4f75469ee4b0fbe0118ec55a"},{"code":"(fn [n]\n  (loop [i 1 result '(1)]\n    (if (= i n) result\n        (recur (inc i)\n               (flatten (list 1 (map + result (drop 1 result)) 1))))))","problem":97,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":97,"code":"(fn [x]\n    (let [fac #(apply * (range 1 (inc %)))\n          n (- x 1)\n          ]\n      (conj (reverse (map #(/ (fac n) (* (fac %) (fac (- n %))))\n                          (range  n)\n                          )) 1)\n      ))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"code":"(fn pasc\n([n] (map #(pasc n %) (range 1 (inc n))))\n([n,k] (if (or (< k 1) (> k n)) 0 (if (= n 1) 1 (+ (pasc (- n 1) (- k 1)) (pasc (- n 1) k))))))","problem":97,"user":"5208a3a2e4b0301979a6c235"},{"code":"(fn  [n]\n  (let\n      [mypascal\n       (fn [prev]\n          (cond\n           (= (count prev) 0) [1]\n           (= (count prev) 1) [1 1]\n           :d (let [mid (partition 2 1 prev)]\n                (flatten [1 (map #(apply + %) mid) 1]))))]\n    (nth (iterate mypascal []) n)))","problem":97,"user":"51852961e4b0da5a5be3babb"},{"problem":97,"code":"(fn [s]\n  (reduce (fn [agg p]\n            (cond\n              (< (count agg) 2) (into agg (vector p))\n              :else (into (into (vector p) (map #(apply + %) (partition 2 1 agg))) (vector p))))\n          [] (repeat s 1)))","user":"58524875e4b0b7285a6f4ead"},{"problem":97,"code":"(fn function-97\n  ([c] (nth (iterate\n              (fn [list1]\n                (vec (cons 1 (reverse (cons 1 (for [x (range (- (count list1) 1)) :let [i list1]]\n                                                (+ (nth i x) (nth i (+ x 1))))))))) [1]) (- c 1))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":97,"code":"(fn p-triangle [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (p-triangle (dec n)))) [1])))","user":"557e56aae4b05c286339e0d5"},{"problem":97,"code":"(fn [row]\n  (loop [curRow 1\n         res '(1)]\n    (if (<= row curRow)\n      res\n      (recur (inc curRow)\n             (let [nextRow (concat '(0) res '(0))]\n                   (map + (rest nextRow) (drop-last nextRow)))))))","user":"5530baa5e4b076ab5578f81a"},{"code":"(fn p [row]\n  (let [p2 (fn pp2 [row col]\n             (cond \n              (= col 1) 1\n              (= col row) 1\n              :else (+ (pp2 (dec row) (dec col))\n                  (pp2 (dec row) col))))]\n    (map (partial p2 row)\n         (range 1 (inc row)))))","problem":97,"user":"50fe2420e4b03cd852b4e84a"},{"problem":97,"code":"(fn [x]\n  (\n    loop[l '(1) rem 1 i 1]\n    (\n      if (= x i) l\n      (recur\n        (conj l\n          (int (* rem (/ (- (+ (dec x) 1) i) i))) \n        )\n        (* rem (/ (- (+ (dec x) 1) i) i))\n        (inc i)\n      )\n\n    )\n  )\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":97,"code":"#(loop [n 1\n        row [1]]\n   (if (>= n %)\n     row\n     (recur (inc n) (map + (concat [0] row) (concat row [0])))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [r]\n\t\t(reduce (fn [cs c] \n\t\t\t\t\t(conj cs (int (* (last cs) (/ (- r c ) c)))))\n\t\t\t\t[1] (drop 1 (range r))))","problem":97,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn pascal [n] (if (= n 1) [1]\n  (for [[a b] (partition 2 1 (concat [0] (pascal (dec n)) [0]))] (+ a b))))","problem":97,"user":"532347dde4b09d4e7a9b54cc"},{"problem":97,"code":"(fn pascal[l]\n  (let [i (dec l)] (map (fn[n k]\n     (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n       (/ (rprod (- n k -1) n) (rprod 1 k))))\n   (repeat (inc i) i) (range 0 (inc i)))\n  ))","user":"52ab61f5e4b0c58976d9ac75"},{"problem":97,"code":"#(reduce (fn [a n]\n  (concat [1]\n          (mapv (partial apply +) (partition 2 1 a))\n          [1]))\n  [1]\n  (range (dec %)))","user":"54f26266e4b024c67c0cf8c5"},{"problem":97,"code":"(fn pascal [n]\n  (let [add-one-both-side (fn [v] (reverse (conj (reverse (conj v 1)) 1)))]\n                (cond (= n 1) [1]\n                     (= n 2) [1 1]\n                     :else (vec (add-one-both-side (flatten (map (fn [a] (+ (first a) (second a))) (partition 2 1  (pascal (- n 1) )))))))))","user":"5eeeb000e4b07c55ae4a0515"},{"code":"(fn [x]\n  (letfn\n    [\n     (! [n] (if (<= n 1) 1 (* n (! (dec n)))))\n     (choose [n r] (/ (! n) (* (! r) (! (- n r)))))\n     ]\n    (map #(choose (- x 1) %) (range x))\n    )\n  )","problem":97,"user":"52586d24e4b0cb4875a45cb0"},{"problem":97,"code":"(fn [n] (nth (iterate #(concat [1]\n                               (map + % (rest %))\n                               [1])\n                      [1]) (dec n)))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":97,"code":"(fn [n] (first (drop (dec n) (iterate #(concat [1] (map (partial apply +) (partition 2 1 %1)) [1]) [1]))))","user":"555ac933e4b0deb715856e49"},{"problem":97,"code":"(fn pascal-triangle [row]\n    (condp = row\n      1 [1]\n      (let [above (pascal-triangle (dec row))\n            middle (map #(apply + %) (partition 2 1 above))]\n            (into [] (concat [1] middle [1])))))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn mypt [n]\n  (let [calc-pt\n        (fn [xs]\n          (let [pth (reduce\n            #(hash-map\n               :pt (conj\n                     (%1 :pt )\n                     (+ %2 (%1 :last )))\n               :last %2)\n            {:pt [] :last 0} xs)]\n            (conj (pth :pt) (pth :last ))))]\n    (loop [r n, pt [1]]\n      (if (= r 1)\n        pt\n        (recur (dec r) (calc-pt pt))))))","problem":97,"user":"4f128865535d64f603146428"},{"code":"(fn pascal [n]\n  (if (= n 1) '(1)\n    (let [prev (pascal (dec n))\n          l (cons 0 prev)\n          r (concat prev '(0))]\n      (map + l r))))","problem":97,"user":"4f89d489e4b033992c121c7e"},{"code":"(fn [x]\n  (letfn [(lazy-pascal [s]\n    (cons s (lazy-seq (lazy-pascal (into [(first s)] (conj (mapv +' (drop 1 s) s) (last s)))))))]\n    (nth (lazy-pascal [1]) (dec x))))","problem":97,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [m]\n  (map\n    #(/\n      (reduce * (range % m))\n      (reduce * (range 1 (- (inc m) %)))\n    )\n    (range 1 (inc m))\n  )\n)","problem":97,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [n]\n  (nth (iterate\n      #(vec (map + (cons 0 %) (conj % 0))) [1])\n    (dec n)))","problem":97,"user":"500933a6e4b046cdb195e074"},{"code":"(fn [n]\n  (loop [r [1] i 1]\n    (if (< i n)\n      (recur \n        (map #(apply + %) (partition-all 2 1 (cons 0 r)))\n        (inc i))\n      r)))","problem":97,"user":"528652fbe4b0239c8a67ae14"},{"problem":97,"code":"(fn f [n]\n(cond\n(= n 1) [1]\n(= n 2) [1 1]\n:else (concat [1] (map (partial apply +) (partition 2 1 (f (dec n)))) [1])))","user":"50b42cbbe4b001349b2f4abe"},{"code":"(fn pasc [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (map (partial apply +) (partition 2 1 (pasc (dec n)))) [1])))","problem":97,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":97,"code":"#(last (take % (iterate (fn [x]\n                            (apply vector (map + (cons 0 x) (conj x 0)))) [1])))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn pascal\n  [n]\n  (if (= n 1) [1]\n              (reduce (fn [last-row i]\n                        (mapv (fn [j]\n                                (if (or\n                                      (= j 0)\n                                      (= j (dec i)))\n                                  1\n                                  (+ (get last-row (dec j))\n                                     (get last-row j))))\n                              (range 0 i)))\n                      (range 1 (inc n)))))","problem":97,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn [i] \n  (nth \n    (iterate (fn [c] (vec (concat \n      [1] \n      (map #(apply + %) (partition 2 1 c)) \n      [1]))) \n    [1]) \n  (dec i)))","problem":97,"user":"4e8768f6535dceadca469850"},{"code":"(fn pascal [n]\r\n        (nth\r\n         (iterate (fn pascal-row [row]\r\n                    (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))) [1]) (dec n)))","problem":97,"user":"4e043d85535d04ed9115e79e"},{"problem":97,"code":"#(let [fact (fn [x] (reduce * (range 1 (inc x))))\n       choose (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))\n       value (dec %)]\n   (if (= value 0)\n     [1]\n   \t(reduce \n     (fn [accum x] (conj accum (choose value x)))\n     [] (range %))))","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn pn [n](map #( \n  \n\n\n(fn lp [line pos]\n    (if (or  (= line 1) (= line 2) (= pos 1) (= pos line))\n        1\n        (let [previousline (dec line) ]\n           (+ (lp  previousline pos) (lp  previousline (dec pos)  ) )\n       )\n    )\n  )\n\n  \n  \n  n %)   (map inc  (range n))))","problem":97,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [n]\r\n  (loop [acc 1\r\n         out-vec [1]]\r\n    (if (< acc n)\r\n      (recur \r\n        (inc acc) \r\n        (conj (vec (map-indexed #(if (zero? %1) 1 (+ %2 (nth out-vec (dec %1)))) out-vec)) 1))\r\n      out-vec)))","problem":97,"user":"5060d137e4b0dc10a69545a0"},{"problem":97,"code":"(fn [n]\n   (letfn [(pascal [coll]\n             (let [p      (partition 2 1 coll)\n                   result (map #(apply + %) p)]\n               (lazy-seq\n                 (cons coll (pascal (concat [1] result [1]))))))]\n     (last (take n (pascal [1])))))","user":"5ebc7c13e4b00a66d4a95267"},{"problem":97,"code":"(fn pascal [n]\n  (let [next-row (fn [x]\n                   (let [x1 (concat [0] x)\n                         x2 (concat x [0])]\n                     (map + x1 x2)))]\n    (nth (iterate next-row '(1)) (dec n))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":97,"code":"(fn [x]\n   (loop [n 1 col [1]]\n     (if (= n x)\n     col\n     (recur (inc n) (concat (conj (map + col (rest col)) 1) [1])))\n     )\n   )","user":"5f8fe45ae4b0715f5002d78d"},{"problem":97,"code":"(fn pascal-triangle-row\n  [n]\n  (reduce\n    (fn [result _]\n      (conj (into [1] (map + result (rest result))) 1))\n    [1]\n    (range (dec n))))","user":"6098263be4b00e9e6653c3f9"},{"problem":97,"code":"(fn pascal [i]\n  (nth\n    (iterate\n      (fn pascal-row [previous]\n        (concat '(1) (map #(apply + %) (partition 2 1 previous)) '(1)))\n      '(1))\n    (- i 1)))","user":"5654e024e4b0f9d632dd848d"},{"problem":97,"code":"(fn [n]\n  (let [next (fn next-pascal [xs]\n               (concat [1]\n                       (map (partial apply +) (partition 2 1 xs))\n                       [1]))]\n    (nth (iterate next [1]) (dec n))))","user":"548fa2dfe4b0e286459a1240"},{"code":"(fn p [n] (if (= n 1) [1] (flatten [1 (map #(apply + %) (partition 2 1 (p (- n 1)))) 1])))","problem":97,"user":"4ef2d243535dced4c769f221"},{"code":"(fn [n]\n  (let [rows (iterate #(map + (concat % [0]) (concat [0] %)) [1])]\n    (nth rows (dec n))))","problem":97,"user":"50d882d4e4b01f0871336e69"},{"code":"#(map \n  (fn [n r] (/\n    (reduce * (range n r -1))\n    (reduce * (range (- n r) 0 -1))\n  ))\n  (repeat (dec %))\n  (range %)\n)","problem":97,"user":"4e86a443535dc036d0eaab83"},{"problem":97,"code":"(fn [n]\n  (let [fac (fn [x & [y]] (apply * (range x (if y (- x y) 0) -1)))\n        choose #(int (/ (fac % %2) (fac %2)))]\n    (map #(choose (dec n) %) (range n))))","user":"539dcb24e4b0b51d73faaf3d"},{"problem":97,"code":"(fn [n]\n  (nth (iterate \n        #(vec (map + (conj % 0) (cons 0 %))) [1])\n       (dec n)))","user":"57481f1fe4b009280f9f2b82"},{"problem":97,"code":"(fn\n  [n]\n  (let [f #(apply * (range 1 (inc %)))\n        g #(/ (f %) (* (f %2) (f (- % %2))))]\n    (map g (repeat (dec n)) (range n))))","user":"56a44067e4b0542e1f8d14da"},{"problem":97,"code":"(fn foo [n]\n  (if (= 1 n)\n    [1]\n    (#(concat '(1)\n              (map + % (concat (rest %) '(0))))\n      (foo (dec n)))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn [n]\n  (nth\n    (iterate\n      #(map + `[0 ~@%] `[~@% 0])\n      '(1))\n    (dec n)))","problem":97,"user":"4fc0853ae4b081705acca327"},{"problem":97,"code":"(fn  pascal-row [n]\n  (let [update-elements\n        (fn [old-row]\n          (loop [new-row (vec\n                          (concat [1]\n                                  (take (dec (count old-row))\n                                        (repeat 0))\n                                  [1]))\n                 index 1]\n            (if (= index (dec (count new-row)))\n              new-row\n\n              (recur\n               (assoc new-row index\n                      (+ (old-row (dec index))\n                         (old-row index)))\n               (inc index)))))]\n    \n    (cond \n          (= n 1)  [1]\n          (= n 2)  [1 1]\n          \n          :else\n          (update-elements (vec (pascal-row (dec n)))))))","user":"59971dcbe4b07157cc8daacb"},{"code":"(fn [k]\n  (if (= k 1)\n    [1]\n    (let [n (- k  1)]\n      (loop [i 1 coll [1]]\n        (let [mult (/ (- (+ n 1) i) i) new (* (last coll) mult)]\n                                        \n          (if (= i n)\n            (conj coll 1)\n            (recur (+ i 1) (conj coll (int new)))))))))","problem":97,"user":"527ccaf4e4b0757a1b17136d"},{"code":"#(let [r % columns (range 0 r)\nvalu (fn value [r c](if (= c 0) 1 (* (/ (- r c) c) (value r (- c 1)))))]\n(map (partial valu r) columns))","problem":97,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn [n]\n  (loop [c [1] i 1]\n    (if (= i n)\n      c\n      (recur (loop [res [1] a c]\n               (if (= 1 (count a))\n                 (conj res 1)\n                 (recur (conj res (+ (first a) (second a)))\n                        (rest a))))\n             (inc i)))))","problem":97,"user":"4e773be8535d324fb2983d6e"},{"problem":97,"code":"(fn [x] \n   (last \n     (take x \n           (iterate \n             #(\n                (fn [[x & xs]] \n                  (loop [x x xs xs ret []] \n                    (if (empty? xs) \n                      ret \n                      (recur (first xs) (next xs) (conj ret (+ x (first xs))))))) \n                (concat [0] % [0])) [1]))))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":97,"code":"(fn pascal [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    (= n 3) [1 2 1]\n    :else (flatten (list 1 (map (fn [x] (apply + x)) (partition 2 1 (pascal (dec n)))) 1))\n    ))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn f [x] (if (= x 1)\n            [1]\n            (map (fn [[a b]] (+ a b))\n                 (partition 2 (interleave\n                               (concat [0] (f (dec x)))\n                               (concat (f (dec x)) [0])\n                  ))\n            )\n))","problem":97,"user":"5216933be4b000d124d989cf"},{"problem":97,"code":"(fn [row-number]  \n      (let [factorial (fn [x] \n                        (loop [n x, accumulator 1]\n                          (if (zero? n)\n                            accumulator\n                            (recur (dec n) (* accumulator n)))))\n            row (dec row-number)]\n      (vec(for [n (range 0 row-number)]\n                     (/ (factorial row) (* (factorial (- row n)) (factorial n)))))))","user":"5a593521e4b05d388ecb6c93"},{"problem":97,"code":"(fn [n]\n  (loop [row 1\n         result [1]]\n    (let [pascal-fn (fn [i] (+ (get result (dec i) 0)\n                               (get result i 0)))]\n      (if (not= n row)\n        (recur (inc row) (vec (map pascal-fn (range (inc row)))))\n        result))))","user":"55cb11e9e4b0e31453f649ff"},{"problem":97,"code":"(fn pascal[n]\n  (last\n   (take n\n         (iterate\n          (fn nxt [prev]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1\n                                  (conj (into [0] prev) 0)))))\n          [1]))))","user":"5f84f110e4b0375e81f54e79"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (letfn [(sum-pairs [s] (if (>= (count s) 2)\n                             (cons (+ (first s) (second s))\n                                   (sum-pairs (rest s)))\n                             (list)))\n            (middle [n] (sum-pairs (pascal (dec n))))]\n      (concat [1] (middle n) [1])))\n  )","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn [n]\n  (nth (iterate \n    (fn [coll]\n      ((fn add-pascal-ones [coll]\n          (conj (reverse (conj coll 1)) 1)) \n            ((fn reduce-seq [coll result]\n              (if (= (count coll) 1) result\n                (recur (rest coll) (conj result \n                  (+ (first coll) (second coll)))))) \n        coll '()))) '(1)) \n  (dec n)))","problem":97,"user":"4e73a9dc535dff18050a9c77"},{"problem":97,"code":"(fn[nth-row-asked]\n  \n    (loop [nth-row-computed 1 ligne-triangle [1] ]\n       (if (= nth-row-asked nth-row-computed)\n            ligne-triangle\n          (recur (inc nth-row-computed) (conj (vec(cons 1 \n              (into [] (for[x (range 0 (- (count ligne-triangle) 1))] (+ (nth ligne-triangle x) (nth ligne-triangle (+ x 1)  ))))  ) ) 1)   )\n        )\n    )\n  \n  )","user":"55757e81e4b05c286339e063"},{"code":"(fn t [n]\n  (condp = n\n        1 [1]\n        (let [p (t (dec n))\n              p2 (rest p)]\n          (concat [1] (map + p p2) [1]))))","problem":97,"user":"52091d57e4b0e152394d76f0"},{"problem":97,"code":"(fn [x] (letfn [(pascal-next [n [k num]] [(inc k) (* num (/ (- (inc n) k) k))])] (map #(nth % 1) (take x (iterate (partial pascal-next (dec x)) [1 1])))))","user":"54a7d707e4b09f271ff37c9b"},{"problem":97,"code":"(fn [max]\n(loop [i [1] level 1]  \n  (if (= level max)    \n    i\n    (if (= level 1) (recur [1 1] (inc level))\n     (recur (cons 1 (conj (vec (map + i (vec (rest i)))) 1)) (inc level))\n    )\n  )\n))","user":"54d2829ce4b0e8a36923e5f6"},{"code":"(fn [n] (nth (iterate (comp #(concat [1] % [1])\n                            (partial map #(apply + %))\n                            #(partition 2 1 %))\n                      [1])\n             (dec n)))","problem":97,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat\n            [1]\n            (flatten (map\n                       #(+ (first %) (second %))\n                       (partition 2 1 (pascal-triangle (dec n)))))\n            [1])))","user":"54c8d4a8e4b045293a27f654"},{"problem":97,"code":"(fn pascals-triangle [row]\n  (loop [current-row 1 rows [[1]]]\n    (if (= current-row row)\n      (nth rows (dec current-row))\n      (let [previous-row (nth rows (dec current-row) [[1]])]\n        (recur\n          (inc current-row)\n          (conj rows (map (fn [idx]\n                                 (cond\n                                   (= idx 0) 1\n                                   (= idx current-row) 1\n                                   :else (+\n                                           (nth previous-row (dec idx))\n                                           (nth previous-row idx))\n                                   )) (range 0 (inc current-row)))))))))","user":"5d0859fbe4b0cc9c91588208"},{"code":"(fn [n]\n  (let [pt\n        (iterate\n          (fn [r]\n            (map #(apply + %)\n                 (partition 2 1 (concat [0] r [0]))))\n          [1])]\n  (nth pt (dec n))))","problem":97,"user":"504c8165e4b09724c857af31"},{"code":"(fn pasc\r\n  ([n]\r\n    (if (= 1 n)\r\n      [1]\r\n      (pasc n 2 [1 1])))\r\n  ([n x v]\r\n    (if (= n x)\r\n      v\r\n      (pasc n (inc x) (flatten [1 (map #(reduce + %) (partition 2 1 v)) 1])))))","problem":97,"user":"4f18677d535d64f603146459"},{"problem":97,"code":"(fn [n] (loop [s [1] n (dec n)] (if (zero? n) s (recur (conj (into [1] (map #(apply + %) (partition 2 1 s))) 1) (dec n)))))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn f\n  ([n]\n     (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else (f (- n 2) [1 1])\n      ))\n  ([n result]\n     (if (= n 0)\n        (into [] result)\n        (let [index (range (count result) )\n              items (map #( if (= % (dec (count result))) 1 (+ (nth result %) (nth result (inc %)))) index)]\n          (recur (dec n) (cons 1 items))\n          )\n     )\n  )\n)","problem":97,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":97,"code":"(fn pascal-tri[n]\n  (\n   condp = n 1 [1]\n   \t(let [Last (pascal-tri (dec n))\n         last-a (concat [0] Last)\n         last-b (concat Last [0])\n         ]\n     (vec(map + last-a last-b))\n     )\n   )\n)","user":"6001460ce4b074f607df6611"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n    :else (let [n_1 (pascal (dec n))\n                 n_1_partition  (partition 2 1 n_1)\n                 n_1_partition_sum (map (partial reduce +) n_1_partition)\n                 n_1_partition_sum_head_1 (cons 1 n_1_partition_sum)\n                 n_1_partition_sum_tail_1 (concat n_1_partition_sum_head_1 '(1))]\n             n_1_partition_sum_tail_1       \n           )\n   ))","user":"559f06bae4b0acc240e314e6"},{"problem":97,"code":"(fn pas [n]\n  (if (= n 1) [1]\n    (flatten [1 (->> (pas (dec n))\n         (partition 2 1)\n         (map #(apply + %))\n                     \n         \n                     ) 1]) ))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":97,"code":"(fn [x]\n      (letfn [(nextrow [row] (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1])))]\n        (nth (iterate nextrow [1]) (dec x))))","user":"52cee992e4b07d0d72b27395"},{"problem":97,"code":"(fn tran [num]\n  (letfn [(num! [num] (loop [sum 1 num num] (if (= num 0) sum (recur (* sum num) (dec num)))))\n          (c [m n] (/ (num! n) (* (num! m) (num! (- n m)))))]\n    (map #(c % (dec num)) (range 0 num))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":97,"code":"(fn [n]\n  (reduce #(conj %1 (* (last %1) (/ (- n %2) %2 ))) [1] (range 1 n)))","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn r [n]\n (if\n  (= 1 n)\n  [1]\n  (if\n   (= 2 n)\n   [1 1]\n   (let [rr (r (dec n))]\n    (into []\n     (flatten\n      [1\n       (for [x (range 1 (count rr))] (+ (nth rr (dec x)) (nth rr x)))\n       1]))))))","problem":97,"user":"4fb510b5e4b081705acca2b8"},{"problem":97,"code":"(fn [row-idx]\n  (letfn [(build-row [ptri]\n            (if (= (count ptri) 1) (conj ptri [1 1])\n                (conj ptri (flatten (vector 1 (vec (map #(apply + %1) (partition 2 1 (last ptri)))) 1)))))]\n    (loop [ptri [[1]] curr-idx 0]\n      (if (= curr-idx row-idx) (get ptri (- curr-idx 1))\n          (recur (build-row ptri) (inc curr-idx))))))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [i]\n  (letfn [(pasc\n            [n m coll]\n            (if (= n m)\n              coll\n              (recur n (inc m) (map #(apply + %) (partition 2 1 (concat [0] coll [0]))))))]\n    (pasc i 1 [1])))","problem":97,"user":"4eb5750a535d7eef30807366"},{"code":"(fn [n]\n   (letfn [(get-row [previous]\n                    (reduce\n                      (fn [coll previous] (conj coll (apply + (take 2 previous))))\n                      [1]\n                      (take (count previous) (iterate rest previous))))]\n     (last (take n (iterate #(get-row %) [1])))))","problem":97,"user":"52e0e646e4b09f7907dd1416"},{"problem":97,"code":"(fn [n] \n  (loop [n n \n         r [1]]\n    (if (= n 1)\n      r\n      (let [els (map #(reduce + %) (partition 2 1 r))]\n        (recur (dec n) (concat (list 1) els (list 1)))))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":97,"code":"(fn pasc [n] \n (if (= n 1) \n   [1]\n   (conj \n      (get (reduce (fn [[lastval newlist] x] [x (conj newlist (+ lastval x))]) [0 []] (pasc (dec n)))\n     1)\n     1)))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn [n] (letfn\n          [(pascal\n            [m]\n            (if (= m 1)\n              [1]\n              (let\n                [row (-> m dec pascal)]\n                (map + (concat [0] row) (concat row [0])))))]\n          (pascal n)))","problem":97,"user":"51307b84e4b08c712d3fae39"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [prev (pascal-triangle (dec n))\n          next-line ((fn gen-next [x]\n                       (if (seq (rest x))\n                         (conj (gen-next (rest x)) (+ (first x) (second x)))\n                         []\n                         )) prev)]\n      (conj (apply conj [1] next-line) 1)\n      )))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn f [n]\n    (if (= n 1) [1]\n        (loop [s []\n               p (concat [0] (f (dec n)) [0])]\n          (if (empty? (rest p)) s\n              (recur (conj s (+ (first p) (second p)))\n                     (rest p))))))","problem":97,"user":"4eda8d7c535d10e5ff6f530f"},{"code":"(fn [i]\n  (last \n  (take i \n    (iterate \n      #(conj \n        (into [1] \n          (map + % (rest %))) 1) \n[1]))))","problem":97,"user":"4fca2a13e4b0ee37620e184d"},{"code":"#(nth\n   (iterate\n     (fn [xs]\n       (lazy-cat\n         (map + xs (cons 0 xs))\n         '(1)))\n     '(1))\n   (dec %))","problem":97,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"code":"(fn p [n]\r\n  (if (= n 1) [1]\r\n  (map + (cons 0 (p (- n 1))) (conj (into [] (p (- n 1))) 0)) )\r\n  )","problem":97,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn pt [n]\n  (if (= n 1)\n    '(1)\n    (let [tr (pt (dec n))]\n      (cons 1 (concat (map + tr (rest tr)) '(1))))))","problem":97,"user":"4fbb9d80e4b081705acca2ea"},{"problem":97,"code":"(fn [y] \n     (map #((fn pascal [x y] \n                (if (or (= 1 x) (= 1 y) (= x y))  \n                    1  \n                    (+ (pascal (- x 1) (- y 1)) \n                       (pascal x (- y 1))))) (first %1) (second %1)) \n          (map vector (range 1 (+ y 1)) (repeat y y))))","user":"55627de1e4b0c656e3ff17d9"},{"code":"(fn [n]\n  (last\n   (take n\n         (iterate\n           (fn [x]\n             (map + (cons 0 x) (reverse (cons 0 x))))\n          [1]  )\n         )))","problem":97,"user":"5124619ae4b02c3f2a072ccd"},{"problem":97,"code":"(fn pascal [n]\n   (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (concat [1] (map (partial reduce + ) (partition 2 1 (pascal (dec n)))) [1])\n    ))","user":"513facf5e4b00f13ea1bd892"},{"problem":97,"code":"(fn prow\n  [row]\n  (let [pascal (iterate #(mapv + (conj % 0) (cons 0 %)) [1])]\n    (nth pascal (- row 1))))","user":"550d9452e4b06e50f9beb15d"},{"problem":97,"code":"(fn [r]\n  (nth\n    (iterate\n      #(concat [1] (map (partial reduce +) (partition 2 1 %)) [1] )\n      [1])\n   (dec r)))","user":"52c1ede2e4b07a9af579236d"},{"problem":97,"code":"(fn [row]\n  (loop [n 3\n         out [1 1]]\n    (condp = row\n      0 nil\n      1 [1]\n      2 [1 1]\n      (if (> n row)\n        out\n        (recur\n         (inc n)\n         (vec\n          (flatten\n           [1 (butlast (for [x (range (count out))] (if (< x (- (count out) 1)) (+ (get out x) (get out (+ x 1)))))) 1])))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [num]\n  (loop [row '(1)\n         cnt 1]\n    (if (= cnt num)\n      row\n      (let [middle-combinations (map #(vector %1 %2) row (rest row))\n            middle-seq (map #(apply + %) middle-combinations)\n            new-row (concat '(1) middle-seq '(1))]\n        (recur new-row (inc cnt))))))","problem":97,"user":"53527551e4b084c2834f4af0"},{"problem":97,"code":"(fn [n]\r\n  (loop [res [1]\r\n         k 1]\r\n    (if (= k n)\r\n      res\r\n      (recur (conj res (* (last res) (/ (- n k) k))) (inc k)))))","user":"546e1142e4b00cfc9eacc199"},{"code":"(fn pt_row [n]\n  (if (= n 1)\n    [1]\n    (concat [1]\n            (map (partial apply +) (partition 2 1 (pt_row (- n 1))))\n            [1])))","problem":97,"user":"510cd1dde4b078ea71921124"},{"problem":97,"code":"#(nth (iterate (fn [x] (concat [1] \n                    (map + x (rest x)) \n                    [1])) \n           [1]) (dec %))","user":"56ab7578e4b03c432f18733d"},{"problem":97,"code":"(fn[i] \n  (reduce \n    #(conj % (* (last %) %2)) \n    [1] \n    (map / (range (dec i) 0 -1) (range 1 i))))","user":"524f3e6de4b0541d1855b805"},{"problem":97,"code":"(fn paschal [n]\n  (loop [c 1 coll [1]]\n    (if (= c n)\n      coll\n      (recur (inc c)\n              (->> coll\n                  (partition 2 1)\n                  (map (partial apply +))\n                  (#(list 1 % 1))\n                  (flatten)\n                  (vec))))))","user":"5a527beee4b05d388ecb6bfe"},{"problem":97,"code":"(fn pascal-row [n]\n  (let [n (dec n)\n        facseq (fn facseq\n                 ([] (facseq 1 1))\n                 ([n v]\n                  (let [next-n (inc n)\n                        next-v (* n v)]\n                    (cons v (lazy-seq (facseq next-n next-v))))))\n        fac-seq (facseq)\n        n-fac (nth fac-seq n)]\n    (reduce (fn [coll k]\n              (conj coll (/ n-fac (* (nth fac-seq k)\n                                     (nth fac-seq (- n k))))))\n            []\n            (range 0 (inc n)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":97,"code":"(fn [n] (loop [i 1\n               result [1]]\n           (if (= i n)\n             result\n             (recur (inc i) (concat [1] (#(loop [in result\n                                                 out []]\n                                            (let [[a b] in\n                                                  r (rest in)]\n                                              (if (empty? r) out\n                                                           (recur r (conj out (+ a b))))))) [1])))))","user":"5b198eace4b03cfeda66ecbb"},{"problem":97,"code":"(fn pascal [index]\n  (condp = index\n    1 [1]\n    2 [1 1]\n    (let [previous-row (pascal (- index 1))]\n      (flatten (list 1 (for [i (range 0 (- (count previous-row) 1))]\n                (+ (nth previous-row i)\n                   (nth previous-row (+ i 1))))\n            1)))))","user":"506755b3e4b03d366d7cb2bc"},{"problem":97,"code":"(fn f\n   ([n] (f n 1 [1]))\n   ([n i row]\n    (if (= i n) row\n        (recur n (inc i) (concat [1] (map #(reduce + %) (partition 2 1 row)) [1])))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"code":"(fn [r] (reductions #(* %1 (/ (- r %2) %2)) 1 (range 1 r)))","problem":97,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn [n]\r\n  (first\r\n    (drop (dec n)\r\n      (iterate\r\n        (fn [v]\r\n          (vec (cons 1\r\n                 (map (fn [[x y]] (if (nil? y) x (+ x y)))\r\n                   (partition-all 2 1 v)))))\r\n        [1]))))","problem":97,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":97,"code":"(fn\n  [n]\n  (let \n      [n (dec n)\n       fac (fn [n] \n             (reduce * \n                     (range 1 (inc n))))\n       ncr (fn [n k] \n             (if (= 0 k) 1\n                 (/ \n                  (fac n) \n                  (* \n                   (fac k) \n                   (fac (- n k))))))]\n    (if (= n 0)\n      '(1)\n      (map \n       #(ncr n %)\n       (range 0 (inc n))))))","user":"545c2d07e4b01be26fd7465c"},{"problem":97,"code":"(fn pascal [level]\n  (loop [level (dec level)\n         row [1]]\n    (if (pos? level)\n      (recur (dec level)\n             (vec (map +\n                       (cons 0 row)\n                       (conj row 0))))\n      row)))","user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn ps [n]\n  (if (= n 1) [1]\n      (let [p (ps (dec n))]\n        (into [] (map + (cons 0 p) (conj p 0))))))","problem":97,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn [x]\n\t(map (fn ptr [[n k]]\n\t\t(if (zero? k)\n\t\t\t1\n\t\t\t(int (* (ptr [n (dec k)]) (/ (- (inc n) k) k)))))\n\t(partition 2 (interleave (cycle [(dec x)]) (range x)))))","problem":97,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn [n]\n  (loop [rn 1   c [1] ]\n    (if (= rn n)\n      c\n      (recur (inc rn) (flatten (conj [(first c)] (map #(apply + %) (map #(take 2 (nthnext c %)) (range (dec rn)))) [(last c)] ))))))","problem":97,"user":"52117ea7e4b07aea8afc4f70"},{"problem":97,"code":"#(reduce\n  (fn [v i]\n    (if (zero? i)\n      [1]\n      (conj v (* (last v) (/ (+ (- % 1) (- 1 i)) i)))))\n  []\n  (range %))","user":"5da760ebe4b000c986472c1a"},{"problem":97,"code":"(fn [n]\n    (let [pascal \n          (iterate #(concat [1] \n                      (map + % (rest %)) \n                      [1]) \n            [1])]\n      (last (take n pascal))))","user":"5f4eb036e4b0102c75033969"},{"problem":97,"code":"(fn pascals-triangle [row]\n;  (if (= row 1)\n;    [1]\n;    (let [prev (pascals-triangle (dec row))\n;          back (last prev)]\n;      (conj (vec (reverse (conj (mapv + prev (rest prev)) 1))) 1))))\n  (nth\n   (iterate #(mapv + (cons 0 %) (conj % 0)) [1])\n   (dec row)))\n;(if (= row 1)\n;   [1]\n;   (let [prev (pascals-triangle (dec row))]\n;     (mapv + (cons 0 prev) (conj prev 0)))))\n;(fn [n] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec n)))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":97,"code":"(fn [n]\n  (nth\n    (iterate \n      #(vec (map + (conj % 0) (cons 0 %)))\n      [1])\n    (dec n)))","user":"53d78b64e4b0e771c3025466"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","user":"596a66cde4b069c0a1a19803"},{"problem":97,"code":"#((apply comp (repeat % (fn\n    ([] [1])\n    ([xs] (vec (map + (conj xs 0) (cons 0 xs))))))))","user":"570d0548e4b0b0fb43fd06d2"},{"problem":97,"code":"#(nth (iterate (fn [v] (mapv + (cons 0 v) (conj v 0))) [1]) (dec %))","user":"55d1b565e4b0e31453f64a49"},{"problem":97,"code":"(fn pascal's-triangle-row [n]\n  (let [pascal's-triangle-element\n        (fn f [r c]\n          (if (or (= c 0) (= r c))\n            1\n            (+ (f (dec r) (dec c)) (f (dec r) c))))]\n    (reduce #(conj %1 (pascal's-triangle-element (dec n) %2)) [] (range n))))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn pascal [i]\n   (let [step (fn [s]\n  \t(conj \n   \t\t(vec \n         \t(map \n             \t(fn [[x y]] (+ x y) ) \n             \t(partition 2 1 (concat [0] s ))\n             )\n         )\n   \t\t 1\n   \t)\n\t)]\n   (first (drop i (iterate step [])))\n)     \n  )","problem":97,"user":"4fb03cf4e4b081705acca262"},{"problem":97,"code":"(fn pascal [n]\n  (into [] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (- n 1))))","user":"59368efbe4b02506e01a297d"},{"code":"(fn [x] (vec (reduce (fn [a b] (if (<= (count a) 1)\n                         (conj a 1)\n                         (cons 1 (conj (vec (map #(+ (nth a %) (nth a (inc %))) (range (dec (count a))))) 1))\n                         ))\n             []\n             (range x))))","problem":97,"user":"52c1bd29e4b07a9af579236a"},{"problem":97,"code":"(fn pascal-triangle [row]\n  (letfn [(pasc-eq [k]\n    (if (= 0 k)\n      1\n      (* (pasc-eq (dec k)) (/ (- row k) k))))]\n    (map pasc-eq (range row))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [xs]\n      (concat (vector (first xs))\n              (map #(apply + %)\n                   (partition 2 1 xs))\n              (vector (last xs))))\n    (seq [1]))\n   (dec n)))","user":"590b8607e4b047aa04b199db"},{"code":"(fn [n]\n  (letfn [(p-triangle [coll]\n            (lazy-seq (cons coll (p-triangle (concat [1] (map (partial reduce +) (partition 2 1 coll)) [1])))))]\n    (nth (p-triangle [1]) (dec n))))","problem":97,"user":"5213d7aae4b0961f15ac4d72"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)\n        fac #(reduce * (range 1 (inc %1)))\n        c-m #(/ (fac n) (fac %1) (fac (- n %1)))]\n    (map c-m (range (inc n)))))","user":"562268dce4b03f08ee9a9224"},{"problem":97,"code":"(fn pascal-triangle [row]\n  (if (= row 1)\n    [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (pascal-triangle (dec row)) [0])))))","user":"52561295e4b0541d1855ba03"},{"problem":97,"code":"(fn [row-count]\n  (nth (iterate (fn helper [prev-row]\n                             (loop [remaining prev-row next-row [1]]\n                               (if (empty? (rest remaining))\n                                 (into [] (cons 1 next-row))\n                                 (recur (rest remaining) (cons (+ (first remaining) (first (rest remaining))) next-row))))) [1]) (dec row-count)))","user":"5746061ae4b009280f9f2b5b"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (let [m (conj (pascal-triangle (dec n)) 0)\n          n (vec (cons 0 (pascal-triangle (dec n))))]\n      (vec\n        (for [index (range (count m))]\n          (+ (m index) (n index)))))))","user":"56ac81ace4b03c432f187347"},{"problem":97,"code":"(fn [n]\n\t(let [c (memoize (fn c [l i]\n                       (if (zero? i)\n                         1\n                         (* (c l (dec i)) (/ (inc (- l i)) i)))))]\n\t\t(map #(c (dec n) %) (range n))))","user":"5f6a583ae4b02876ed9fd046"},{"problem":97,"code":"(fn p [x]\n  (if (= x 1)\n    [1]\n    `[1 ~@(map + (p (dec x)) (next (p (dec x)))) 1]))","user":"4ee7d6d8535d93acb0a66870"},{"problem":97,"code":"(fn [n]\n  (loop [s [1]]\n    (if (= n (count s))\n      s\n      (if (= n 2)\n        (recur [1 1])\n        (recur (vec (concat [1] (map #(apply + %) (partition 2 1 s)) [1])))))))","user":"55b107fee4b002ce9d5cbc2a"},{"problem":97,"code":"(let [s (iterate (fn [row] (into [] (map + (cons 0 row) (conj row 0)))) [1])] #(nth s (dec %)))","user":"584dadebe4b0b7285a6f4e44"},{"problem":97,"code":"(fn [v]\n  (letfn [(f [n r]\n             (if (or (= r 0) (= r (dec n)))\n               1\n               (+ (f (dec n) (dec r))\n                  (f (dec n) r))))]\n    (map f (repeat v) (range v))))","user":"5c62979fe4b0fca0c162264c"},{"problem":97,"code":"(fn [m]\n  (letfn [(pascal [n k]\n            (cond\n              (or (> k n) (< k 1))\n              0\n\n              (<= n 1)\n              1\n\n              :else\n              (+ (pascal (dec n) (dec k)) (pascal (dec n) k))))]\n    (mapv #(pascal m %) (range 1 (inc m)))))","user":"543a8256e4b032a45b869327"},{"problem":97,"code":"(fn pasci\n    ([num]\n     (if (= 1 num) [1] (if (= 2 num) [1 1] (pasci (- num 2) [1 1]))))\n    ([num vect]\n     (if (= 0 num) vect (pasci (dec num) (into (into [1] (apply map + [vect (rest vect)])) '(1))))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":97,"code":"(fn [x]\n  (nth (iterate #(concat [1] \n                         (map + % (rest %))\n                         [1])\n                [1])\n       (dec x)))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":97,"code":"(fn pascals-triangle-r\n  [nth-row]\n  (reduce (fn [current-row i]\n            (if (= i nth-row)\n              current-row\n              (loop [new-row [1]\n                     numbers current-row]\n                (if (= (count numbers) 1)\n                  (conj new-row 1)\n                  (recur\n                   (conj new-row (+ (first numbers) (second numbers)))\n                   (rest numbers))))))\n          [1]\n          (range 1 nth-row)))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":97,"code":"(fn [n] (nth \n            (iterate (fn [x] (concat \n                                   (concat \n                                      [1] \n                                      (map #(apply + %) (partition 2 (drop-last (rest (interleave x x)))))) \n                                   [1])) \n                             [1]) \n            (dec n)))","user":"567798afe4b05957ce8c6169"},{"code":"#(loop [c 1 r [1]]\n  (if (>= c %) \n    r \n    (recur\n      (inc c)\n      (conj r (* (last r) (/ (- % c) c))))))","problem":97,"user":"4e82f85d535db62dc21a62ce"},{"problem":97,"code":"(fn pascal [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (cons 1 \n               ((fn sumpas [x]\n  (if (empty? x) \n    () \n    (cons (+ (first x) (if (empty? (rest x)) 0 (first (rest x))) ) (sumpas (rest x)))))\n  (pascal (- n 1))))))","user":"544e1794e4b0e39780006980"},{"problem":97,"code":"(fn pt [n]\n (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else \n   (loop [i 3 rowc [1 2 1]]\n     (if (= i n)\n       rowc\n       (recur \n          (inc i)\n          (concat [1] (concat (map #(apply + %) (partition 2 1 rowc)) [1])))))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [y]\n (let [x (dec y) c (fn [n m]\n\t(let [f (fn [n] (apply * (range 1 (inc n))))]\n  \t\t(/ (f n) (f m) (f (- n m)))))]\n  (map #(c x %) (range (inc x)))))","problem":97,"user":"4f8ab084e4b02e764a0a5171"},{"problem":97,"code":"(fn pascTriange [n]\n  (loop [lst (cons 1 (for [x (range (dec n))]\n                       (/ (- (inc (dec n)) (inc x)) (inc x))))\n         n 1\n         res ()]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (* n (first lst)) (cons (* n (first lst)) res)))))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"5a99b87ee4b0d174b936c7af"},{"problem":97,"code":"(fn pascal [x] \n  (if (= x 1)\n    [1]\n    (let [xs (pascal (dec x))\n          xs (cons 0 (conj xs 0))\n          pairs (partition 2 1 xs)]\n      (mapv (fn [[a b]] (+ a b)) pairs))))","user":"4e67b9fc535d8ccf87e9fe82"},{"code":"(fn pascal [n]\n  (loop [r 1 res [1]]\n    (if (= r n) \n      res\n      (recur (inc r) \n             (vec (map + (cons 0 res) (conj res 0)))))))","problem":97,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":97,"code":"(fn [nrow] (let [\n\nadd-adj (fn [ coll]\n(concat [1] (map + (rest coll) (drop-last coll)) [1]))\npascal-tri (fn [result nth-row]\n(if (= 0 (count result))\n(recur [1] nth-row)\n(if (= nth-row (count result))\nresult\n(recur (add-adj result) nth-row))\n))\n__ (fn [nth-row] (pascal-tri [] nth-row))\n]\n  (__ nrow)\n             ))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":97,"code":"(fn [n]\n   (let [pascal (iterate #(concat [1] (map + % (rest %)) [1]) [1])]\n     (if (not (seq? n))\n       (nth pascal (dec n ))\n       (loop [n (map dec n)\n              acc []]\n         (if (empty? n)\n           acc\n           (recur (rest n) (conj acc (nth pascal (first n)))))))))","user":"558053b1e4b05c286339e0e9"},{"problem":97,"code":"(fn [n]                                                                                    \n  (last (take n (iterate (fn [a]                                                                 \n                    (if (< (count a) 2)                                                   \n                      (vec (concat a [1]))                                                \n                      (vec (concat [1] (map + a (rest a)) [1]))                           \n                       )) [1]))))","user":"5b284375e4b063e2438bcc53"},{"code":"(fn [x] (\n   loop [a [1]]\n    (if (= x (count a))\n     a\n     (recur (flatten (conj [1] \n                           (map #(+ %1 %2) a (rest a) )\n                           [1])\n            )\n\t)\n)))","problem":97,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [n]\n  (loop [n (dec n)\n         xs [1]]\n    (if (zero? n) xs\n      (let [input (concat [0] xs [0])\n            next-row (->> input\n                          (partition 2 1)\n                          (map #(apply + %)))]\n        (recur (dec n) next-row))\n      )\n    ))","problem":97,"user":"513fab65e4b00f13ea1bd891"},{"problem":97,"code":"(fn pascal-triangle ([rownum] ( pascal-triangle rownum [1] 1))\n  ([rownum xs currow] (if (= rownum currow)\n                        xs\n                       (let [tmp \n                             (loop [[cur next & others] xs \n                                    xs2 []]\n                               (if next \n                                 (recur (conj others next) (conj xs2 (+ cur next)))\n                                 xs2))\n                             arow (concat [1] tmp [1])]\n                         (pascal-triangle rownum arow (inc currow))))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":97,"code":"(fn [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else   (loop [count 3 ret [1 1]]\n              (if (> count n)\n                ret\n                (recur (inc count)\n                       (cons 1\n                             (conj (vec (map #(apply + %) (partition 2 1 ret)))\n                                   1)))))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn pascaltri [n]\n  (let [ lazyfn \n                 (fn lzfn [s]\n                   (let [cf (comp vec reverse (partial cons 1))\n                         os (cf (reduce #(cons (+ (first %2) (second %2)) %) '(1) (partition 2 1 s)))]\n                     (cons s (lazy-seq (lzfn os))))) ]\n    (nth (lazyfn [1]) (dec n))))","problem":97,"user":"523bd9c0e4b07becd5be2201"},{"code":"#(loop [level 1\n        row [1]]\n   (if (= level %)\n     row\n     (recur\n      (inc level)\n      (concat '(1)\n              (for [position (range (- (count row) 1))] (+ (nth row position) (nth row (+ 1 position))))\n              '(1)))))","problem":97,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn [n]\n  (loop [k 1  rv '(1) n (dec n)]\n    (if (<= k n)\n      (recur (inc k) (cons (* (first rv) (/ (+ n 1 (- k)) k)) rv) n)\n      rv)))","problem":97,"user":"534f13b2e4b084c2834f4ac4"},{"problem":97,"code":"(fn pas-tr \n   ([n] (if (= 1 n)\n          [1]\n          (pas-tr (dec n) [1])))\n   ([n prev]\n    (loop [cur n p prev]\n      (if (zero? cur)\n        p\n        (recur (dec cur) (concat [1] \n                               (map (fn [[a b]] (+ a b))\n                                   (partition 2 1 p) )\n                               [1]))))))","user":"6030855de4b0d5df2af222a6"},{"code":"(fn pascal-tri [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        true (let [prev-row (pascal-tri (dec n))]\n               (flatten (conj [1] (map + (butlast prev-row)\n                                       (rest prev-row))\n                              [1])))))","problem":97,"user":"51e0198ee4b01188f0627539"},{"code":"(fn pascal [n] \n          (if (= n 1) [1]\n              (let [p (pascal (dec n))]\n                   (map + (concat [0] p)\n                        (concat p [0])))))","problem":97,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn [n]\n  (loop [r [1]\n         n n]\n    (if (= n 1) r\n      (recur (concat [1] (map #(apply + %) (partition 2 1 r)) [1]) (dec n))\n    )\n  )\n)","problem":97,"user":"5081566ce4b0946d0443855b"},{"problem":97,"code":"#(for [r (range %)]\n   (reduce * (for [k (range r)] (/ (- % k 1) (+ k 1)))))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":97,"code":"(fn [y] \n (cond \n      (= y 1) [1]\n     \n     :else \n\n    (last (take (dec y)\n (iterate\n (fn \n    [x] \n(conj  \n            (loop [i 0 z [] ] \n             (if \n      \t\t(< i (count x)) \n      \t\t  (recur \n       \t\t    (inc i)\n       \t\t    (conj \n                      z \n                       (+ \n                         (get x (dec i) 0) \n                         (get x i )\n                       )\n                     )\n                   )\n                   z\n                 )\n            )\n           1\n          )\n)\n[1 1]\n))\n)))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":97,"code":"(fn [n]\n  (->> (iterate (fn [row]\n                 (let [added (-> (fn [result input] (conj result (apply + input)))\n                                 (reduce [] (partition 2 1 row)))]\n                   (concat [1] added [1])))\n               [1])\n       (drop (dec n))\n       first))","user":"555521a5e4b0deb715856e12"},{"code":"(fn p [n]\n(if (= n 1)\n[1]\n(map #(apply + %)\n(partition 2 1\n(concat [0] (p (- n 1)) [0])))))","problem":97,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":97,"code":"(fn [n]\n  (let [next-row (partial (fn [output [head second & tail :as in]]\n                       (if (nil? second)\n                         (cons 1  output)\n                         (recur (cons (+ head second) output) (rest in) ))) '(1) )\n        nth-row  (partial (fn [output n]\n                            (if (zero? n)\n                              output\n                              (recur (next-row output) (dec n)))) '(1)) \n        ]\n    (nth-row (dec n))))","user":"58db362be4b0a4d5acaab675"},{"code":"(fn pt [n]\n  (let [f #(let [n (dec (count %))]\n             (map + (take n %) (take n (rest %))))]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (into [1] (concat (f (pt (dec n))) [1])))))","problem":97,"user":"4f048f67535dcb61093f6bd3"},{"problem":97,"code":"(fn [pn]\n    (let [fact   (fn fac [x] (if-not (zero? x) (* x (fac (- x 1))) 1))\n          C      (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))\n          pascal (fn [n] (mapv #(C (dec n) %) (range 0 n)))]\n      (if (counted? pn)\n        (mapv pascal pn)\n        (pascal pn))))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":97,"code":"(fn [x]\n    (reduce (fn [acc _] (map #(apply + %) (partition 2 1 [0] (cons 0 acc)))) \n            [1] \n            (range 1 x)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"#(nth (iterate\n          (fn\n           [values] \n           (loop [l 0 remaining values aggr []]\n                 (if (empty? remaining)\n                     (conj aggr 1)\n                   (recur (first remaining)\n                          (rest remaining)\n                          (conj aggr (+ l (first remaining))) ))))\n          [1]) (dec %))","problem":97,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [row]\n  (reduce #(conj %1 (int (* (last %1) %2))) [1] (map #(/ %1 %2) (range (dec row) 0 -1) (range 1 (inc row)))))","problem":97,"user":"4fe9ea87e4b0547ebccb2476"},{"problem":97,"code":"(fn pascal-s-triangle [index]\n    (condp = index\n      1 [1]\n      2 [1 1]\n      (let [prev-line (pascal-s-triangle (- index 1))]\n        (map #(apply + %) (concat '((0 1)) (partition 2 1 prev-line) '((1 0)))))))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":97,"code":"(fn pascal [x] \n  (if (= x 1)\n    [1]\n    (let [lastx (pascal (- x 1))]\n      (vec (map + (concat [0] lastx) (concat lastx [0])))\n      )\n    )\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":97,"code":"(fn numba [x]\n   (cond\n     (= x 1) [1]\n     (= x 2) [1 1]\n     :else (into\n            (into [1]\n                  (map #(apply + %) (partition 2 1 (numba (- x 1))))\n                  )\n            [1]\n                 )))","user":"5ab07d63e4b073f1774425af"},{"code":"(fn [r] (\n  if (= r 1) [1] (\n    loop [prev [0 1 0], curr '() ] (\n      let [a (first prev), b (second prev)] (\n        cond\n          (and (nil? b) (= (count curr) r)) curr\n          (nil? b) (recur (concat '(0) curr '(0)) '())\n          :else (recur (drop 1 prev) (conj curr (+ a b)))\n      )\n    )\n  )\n))","problem":97,"user":"4ef48422535dced4c769f236"},{"problem":97,"code":"#(last (take % (iterate (fn [kek] (vec (map (fn [x] (+ (first x) (last x))) (partition 2 1 (concat [0] kek [0]))))) [1])))","user":"5b0546eae4b0cc2b61a3bd7e"},{"problem":97,"code":"(fn [n]\n  (loop [iteration 1\n         list [1]]\n    (if (= n iteration)\n      list\n      (let [partitions (partition 2 1 list)\n            reduced-list (map (partial apply +) partitions)\n            new-list (concat [1] reduced-list [1])]\n        (recur (inc iteration) new-list)))))","user":"4f213e2ee4b0d66497709fcf"},{"code":"(fn pascal [depth]\n  (loop [rowno 1 currentrow [1]]\n    (prn currentrow)\n    (if (= depth rowno)\n      currentrow\n      (recur \n       (+ 1 rowno)\n       (concat [1]\n               ((fn [list] \n                  (loop [l list res []]\n                    (if (= 1 (count l))\n                      res\n                      (recur (rest l) (conj res (+ (first l) (second l))))))) currentrow)\n               [1])))))","problem":97,"user":"52173464e4b082aa80a88c75"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal [v] (flatten [1 (map (fn [[a b]] (+ a b)) (partition 2 1 v)) 1]))]\n  \t(vec (first (take 1 (drop (dec n) (iterate pascal [1])))))))","user":"51990df9e4b068aa333628fc"},{"code":"#(loop [v [1]\n        c 1]\n   (if (= c %)\n     v\n     (recur (conj v\n                  (* (peek v)\n                     (/ (- % c) c)))\n            (inc c))))","problem":97,"user":"4dc21233535d020aff1edf92"},{"code":"(fn [x]\n  (let [f \n        (fn [lst]\n          (map (fn [[x y]] (+ x y)) (map vector (conj (into [] lst) 0) (cons 0 (into [] lst)))))]\n    (into [] (nth (iterate f [1]) (dec x)))))","problem":97,"user":"4e7f5a0b535db966e863cc41"},{"problem":97,"code":";//todo: be better\n(fn f [n] (if (= n 1) [1] (let [m (f (dec n))] (vec (map + (conj m 0) (vec (cons 0 m)))))))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":97,"code":"(fn\n  [n]\n  (into\n   []\n   (map\n    (partial\n     (fn\n       [n k]\n       (let\n         [p (fn [a b] (reduce * (range a (inc b))))]\n         (/ (p (inc k) n) (p 1 (- n k)))))\n     (- n 1))\n    (range 0 n))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn t [n] \n         (if (= 1 n) [1]\n            (let [r (t (dec n))]\n            (concat [1] (map #(apply + %) (partition 2 (interleave r (rest r)))) [1]))))","problem":97,"user":"4fa30027e4b081705acca187"},{"code":"(fn pascal-tri [n]\n  (letfn [(fact [n]\n            (cond (= 0 n) 1\n                  (= 1 n) 1\n                  true (apply * (range 1 (+ n 1))))),\n          (combi [n k]\n            (/ (fact n) (fact k) (fact (- n k)))),\n          (pascal-n [n k]\n            (cond (= n k) (list (combi n k))\n                  true (cons (combi n k) (pascal-n n (+ k 1)))))]\n    (cond (< n 1) (pascal-n 0 0)\n          true (pascal-n (- n 1) 0))))","problem":97,"user":"4ef6f5ea535dced4c769f250"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [up (pascal (dec n))\n          a1 (concat [0] up)\n          a2 (concat up [0])]\n      (map + a1 a2))))","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn [n]\n  (loop [c 1 row [1]]\n    (if (>= c n) \n      row\n      (recur (inc c) (concat [1] (map (partial apply +) (partition 2 1 row)) [1])))))","problem":97,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn pascal-triangle\n  [p-row]\n  (let [row (dec p-row)\n        fact (fn [k]\n                (reduce * (range 1 (inc k))))\n        newt-sym (fn [n k]\n                (int\n                  (/ (fact n)\n                    (* (fact k)\n                      (fact (- n k))))))]\n\n    (map #(newt-sym row %) (range (inc row)))))","problem":97,"user":"4edfb618535d10e5ff6f5343"},{"problem":97,"code":"#(map first (take % (iterate (fn [[x k]] [(* x (/ (- % k) k)) (inc k)]) [1 1])))","user":"56b2573ce4b0982f16b37e02"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [xs]\n                  (concat '(1) (map + xs (rest xs)) '(1)))\n                [1])\n       (dec n)))","user":"5adf5f9be4b0837691e92c33"},{"code":"(fn pascal-triangle-row [n]\n  (let\n    [next-row (fn [row]\n      (->> (partition 2 1 row)\n           (map (partial apply +))\n           (#(concat [1] % [1]))))\n     pascal-triangle (fn []\n      (cons '(1) (iterate next-row '(1 1))))]\n    (->> (pascal-triangle) (take n) last)))","problem":97,"user":"4f725466e4b07046d9f4f030"},{"problem":97,"code":"(fn [n]\n   (cond (= n 1) [1]\n         (= n 2) [1 1]\n         :else (loop [x (* 2 (- n 1))\n                      i 2\n                      c []\n                      precoll [1 1]]\n                 (if (= i x)\n                   (concat [1] c [1])\n                   (recur x (inc i)\n                          (loop [x precoll\n                                 fir 0\n                                 nex 1\n                                 coll []]\n                            (if (= nex (count x))\n                              coll\n                              (recur x (inc fir) (inc nex) (conj coll (+ (nth x fir) (nth x nex))))))\n                          (concat [1] c [1]))))))","user":"571dd145e4b0145328a76283"},{"code":"(fn [x]\n  (if (= 1 x)\n    [1]\n    (let [n (- x 1)]\n      (into []\n            (cons 1 (reductions #(/ (* %1\n                                       %2)\n                                    (+ 1\n                                       (- n\n                                          %2)))\n                                n (reverse (drop 1 (range n)))))))))","problem":97,"user":"50981062e4b04e098a4c7268"},{"problem":97,"code":"(fn [row]\n  (let [fact #(reduce * (range % 0 -1))\n        n-choose-k (fn [row]\n                     (fn [term]\n                       (/ (fact row)\n                          (* (fact term)\n                             (fact (- row term))))))]\n        (map (n-choose-k (dec row)) (range row))))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn [n] \n  (let [pascal-seq \n        (iterate \n          (fn [cs] (vec (map \n                          (fn [[c1 c2]] (+ c1 c2)) \n                          (partition 2 1 (cons 0 (conj cs 0)))))) [1])]\n               (nth pascal-seq (dec n))))","problem":97,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn prow [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n      (let [prevprow (cons 0 (prow (dec n)))]\n        (map-indexed \n          #(+ (nth prevprow (inc %1) 0) %2)  \n          prevprow\n        )\n      )\n  )\n)","problem":97,"user":"4fe610fde4b0e8f79898fece"},{"problem":97,"code":"#(loop [i 1 v '(1)] (if (>= i %) v (recur (inc i) (map + (conj v 0) (into '(0) v) ))))","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn [i] \n   (loop [v [0 1 0]] \n     (if \n       (< (inc i) (count v)) \n       (drop 1(reverse (drop 1 v)))\n       (recur \n         (conj \n           (vec (map-indexed #(+ %2 (if (= %1 0) 0 (v (dec %1)))) v)) 0)))))","problem":97,"user":"4eabb245535d7eef30807319"},{"code":"(fn pascal [n]\n  ( cond\n    \t(= n 1) [1]\n    \t:else (concat (cons 1 (map (partial apply +) (partition 2 1 (pascal (dec n))))) [1])))","problem":97,"user":"53691dc7e4b0243289761e97"},{"problem":97,"code":"(fn p [n]\n\t(if (= n 1) [1]\n\t\t(mapv + (cons 0 (p (dec n))) (conj (p (dec n)) 0))\n\t)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (let [p (pascal-triangle (dec n))\n          t (concat [0] p [0])]\n\n           (map (fn [n] (+ (nth t n) (nth t (inc n) ))) (range n))\n\n           )))","user":"5739cbe4e4b0cd1946bd107c"},{"code":"(fn [num] \n  (letfn [(fact[n] (reduce * (range 1 n)))]\n  (map (fn[x] (/ (fact num) (* (fact x) (fact (- (inc num) x))))) (range 1 (inc num)))))","problem":97,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(letfn[(p[i](if(= i 1)[1](concat[1](map(fn[[a b]](+ a b))(partition 2 1(p(dec i))))[1])))]p)","problem":97,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn [n] (if (= n 1) [1] (nth (iterate #(concat [1] (map + % (drop 1 %)) [1]) [1 1]) (- n 2)) ))","problem":97,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":97,"code":"#(let [n (- % 1)] (loop [k 0 res []]\n   (if (= % k)\n     res\n     (recur (inc k) (conj res (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n    (/ (rprod (- n k -1) n) (rprod 1 k))))))))","user":"5964c614e4b069c0a1a19770"},{"code":"(fn [n]\n  (loop [res [1], i 1]\n    (if (= i n)\n      res\n      (recur \n        (loop [subres [], j 0]\n          (if (= j (- (count res) 1))\n            (into [1] (conj subres 1))\n            (recur (conj subres (+ (nth res j) (nth res (+ j 1)))) (+ j 1))\n           )\n         )  \n       (+ i 1))\n    )\n  )\n)","problem":97,"user":"52d42021e4b09f7907dd132a"},{"problem":97,"code":"(fn pas [n]\n    (let [next_pas (fn [a]\n      (loop [x a, nxt [1]]\n        (if (empty? x) nxt\n          (if (= 1 (count x)) (conj nxt 1)\n         (recur (rest x) (conj nxt (+ (first x) (second x))))))))]\n      (if (= n 1) [1]\n        (next_pas (pas (dec n))))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (let [t (p (dec n))]\n      (vec (concat [1]\n                   (for [i (range 1 (dec n))]\n                     (+ (t (dec i)) (t i)))\n                   [1])))))","problem":97,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn [y]\n  (last \n   (take y \n         (iterate \n          (fn [x]\n            (concat [1] \n                    (map #(reduce + %)(partition 2 1 x))\n                    [1])\n            )\n          '(1)\n          )\n         )\n   )\n  )","problem":97,"user":"52bbd09ee4b07a9af57922ee"},{"problem":97,"code":"#(cond (<= % 1) '(1)\n        (=  % 2) '(1 1)\n        :else\n        (nth\n         (iterate\n          (fn [row]\n            (flatten [1\n                      (map (partial reduce +')\n                           (partition 2 1 row))\n                      1]))\n          '()) (- % 1)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"code":"#(nth (cons [1] (iterate (fn [xs] (let [a (fn [xs ys] (if (nil? (second xs)) (vec (concat [1] ys [1])) (recur (rest xs) (conj ys (+ (first xs) (second xs))))))] (a xs []))) [1 1])) (dec %))","problem":97,"user":"4ef6e689535dced4c769f24f"},{"problem":97,"code":"#(letfn [(factorial[n] (apply * (range 1 (inc n))))\n         (binomial[n k] (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n   (map (fn[col] (binomial (dec %) col)) (range %)))","user":"576a8d02e4b0a07e8fc18117"},{"problem":97,"code":"(letfn [                                                                                                                        \n    (factorial [x] (apply * (range 1 (inc x))))                                                                                                         \n    (binomial-coefficient [n r] (/ (factorial n) (* (factorial r) (factorial (- n r)))))                                        \n    (pascals-triangle-row [x] (map #(binomial-coefficient (dec x) %) (range x)))]                                                                       \n        pascals-triangle-row)                                                                                                   \n\n; wikipedia calls this \"computationally unsuitable\"","user":"558b50d5e4b027778923762b"},{"code":"(fn [n]\n  ((fn [n row]\n    (cond\n      (= n 1) row\n      :else\n        (recur\n           (- n 1)\n           (map\n              (partial reduce +)\n              (partition 2 1 (concat [0] row [0])))\n        )\n    )\n   ) n [1])\n)","problem":97,"user":"51473a70e4b0d520409ed394"},{"problem":97,"code":"(fn [nth]\n   (loop [current 2\n          previous [1 1]]\n     (if (= 1 nth)\n       [1]\n       (if (= current nth)\n         previous\n         (recur (inc current)\n                (concat [1]\n                        (map #(apply + %)\n                             (partition 2 1 previous))\n                        [1]))))))","user":"4ea8570f535d7eef308072f8"},{"problem":97,"code":"(fn [n]\n   (loop [row [1]]\n     (if (= n (count row))\n       row\n       (recur (concat [1] (map + row (rest row)) [1])))))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":97,"code":"(fn pascal\n\t[n]\n\t(loop [previous [1]\n\t\t\tn n]\n\t\t(if (= 1 n)\n\t\t\tprevious\n\t\t\t(recur (->> (partition 2 1 previous)\n\t\t\t\t (map #(+ (first %) (second %)))\n\t\t\t\t (conj [1])\n\t\t\t\t (reverse)\n\t\t\t\t (conj [1])\n\t\t\t\t (flatten)) (dec n)))))","user":"5954eef0e4b066ee0a44af17"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (loop [[one & more] (pascal (- n 1))\n           new [1]]\n      (if one\n        (recur more (conj new (+ one (or (first more) 0))))\n        new))))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":97,"code":"(fn pascal [n]\n  (let [pairs (fn pairs [coll]\n               (if (> (count coll) 1)\n                 (cons (reduce + (take 2 coll)) (pairs (rest coll)))\n                 []))]\n\n    (if (= 1 n)\n      [1]\n      (concat [1] (-> n dec pascal pairs) [1]))))","user":"54b050cee4b09f271ff37d13"},{"code":"(fn [nrow] \n  (nth \n    (iterate\n      #(concat [1] (map (partial apply +) (partition 2 1 %)) [1])\n      [1])\n    (dec nrow)))","problem":97,"user":"4ef89fb0535dced4c769f260"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (nth (iterate #(mapv + (cons 0 %) (conj % 0)) [1]) (dec n)))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn P [n]\n  (if (= n 1)\n    [1]\n    (vec (map + (conj (P (- n 1)) 0) (cons 0 (P (- n 1)))))))","problem":97,"user":"4ee82539535d93acb0a66878"},{"problem":97,"code":"(let [f \n      (fn fa [x]\n        (if (= x 1)\n          [1]\n        (vec (map + (concat [0] (fa (dec x))) (conj (fa (dec x)) 0)))))] f)","user":"57af6cf4e4b0fbc9809a2735"},{"code":"(fn [n]\n  (reduce\n    #(conj %1 (* (last %1) (/ (- n %2) %2)))\n    [1]\n    (range 1 n)))","problem":97,"user":"4f7f9665e4b033992c121bea"},{"problem":97,"code":"(fn [n] (reduce (fn [a x] (conj a (* (last a) x))) [1] (map #(/ (- (dec n) %) (inc %)) (range (dec n)))))","user":"53b15e6ee4b047364c04448f"},{"problem":97,"code":"(fn [n]\n  (let [pascal-triangle (letfn [(calc-next-row [row]\n                                  (conj (apply conj [1] (map #(apply + %) (partition 2 1 row))) 1))\n                                (calc-rows [row]\n                                  (cons row (lazy-seq (calc-rows (calc-next-row row)))))]\n                          (cons [1] (calc-rows [1 1])))]\n    (first (drop (dec n) pascal-triangle))))","user":"52c00e32e4b07a9af5792341"},{"code":"(fn pt [n]\n  (if (= n 1) \n      '(1) \n      (let [r (pt (dec n))] \n        (conj (concat (map + r (rest r)) '(1)) \n              1))))","problem":97,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":97,"code":"#(nth (iterate (fn [v] (vec (map + (conj v 0) (conj (seq v) 0))))\n               [1])\n      (- % 1))","user":"554b8572e4b0a04f79299589"},{"problem":97,"code":"(partial nth (conj (iterate #(map +' `(~@% 0) `(0 ~@%)) [1]) nil))","user":"5479c58de4b0c51c1f4d72c7"},{"code":"(fn [n]\n   (letfn [(fact [x]\n                 (if (<= x 1) 1 (* x (fact (dec x)))))\n           (mul-dec [ret x n]\n                 (println ret x n)\n                 (if (= n 0) ret (mul-dec (* ret x) (dec x) (dec n))))] \n  (loop [ret [] x 1]\n    (if (> x n)\n      (if (= (rem n 2) 0)\n        (concat ret (reverse ret))\n      (concat ret (rest (reverse ret))))\n      (recur (conj ret \n                   (if (= x 1)\n                     1\n                     (/ (mul-dec 1 (dec n) (quot x 2)) (fact (quot x 2)))\n                      )) (+ x 2))))))","problem":97,"user":"50bfe725e4b080409b860f26"},{"problem":97,"code":"(fn[n]\n  (reduce \n   (fn [row _]\n     (map + (concat [0] row)\n          (concat row [0])))\n   [1] (range 1 n)))","user":"537f4652e4b06839e8705eb1"},{"code":"(fn p [n]\n  (if (= n 1) [1]\n    (let [l (p (dec n))]\n      (map + (concat [0] l) (concat l [0])))))","problem":97,"user":"5159849ce4b0394f658fe236"},{"problem":97,"code":"#(nth (iterate (fn [coll] (mapv +' (cons 0 coll) (conj coll 0))) [1]) (dec %))","user":"4f1ef6a0535d64f60314649b"},{"problem":97,"code":"(fn pascal-tri [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        (> n 2) (reduce (fn [acc _]\n                          (concat [1]\n                                  (map (partial apply +) (partition 2 1 acc))\n                                  [1]))\n                        [1 1]\n                        (range (- n 2)))))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":97,"code":"(fn [n]\n  (reduce\n   (fn [prev e]\n     (for [i (range e)]\n       (let [x (nth prev (dec i) 0)\n             y (nth prev i 0)]\n         (+ x y))))\n   '(1) (range 1 (inc n))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn pascal-triangle\n  ([irow] (pascal-triangle irow [1]))\n  ([irow oseq] (cond\n                (= (count oseq) irow) oseq\n                :else (recur irow (vec (map + (cons 0 oseq) (conj oseq 0)))))))","problem":97,"user":"4eee3e6a535d93acb0a668c3"},{"code":"#(for [i (range %)] ((fn p [n k] (cond (= n 0) 1 (or (= k 0) (= k n)) 1 :else (+ (p (dec n) (dec k)) (p (dec n) k)))) (dec %) i))","problem":97,"user":"51dc5033e4b09c47a74ce109"},{"problem":97,"code":"(fn [n]\n    (last (take n (iterate #(map + (concat [0] %) (concat % [0])) [1]))))","user":"55c5b55fe4b0e31453f649b5"},{"problem":97,"code":"(fn [n]\n         (nth (iterate #(concat [1] (map + % (next %)) [1]) [1]) (dec n)))","user":"4ed0e139535d44c135fd68c7"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(vec (map + (conj %1 0) (cons 0 %1)))\n            [1])\n   (- n 1)))","user":"56aad4f7e4b03c432f187338"},{"problem":97,"code":"#(nth (iterate (fn nextrow\n                  [lastrow]\n                  (vec\n                   (concat [1]\n                           (mapv (partial apply +)\n                                 (partition 2 1 lastrow)) [1]))) [1]) (dec  %))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":97,"code":"(fn triangle-row [n]\n  (if (= n 1)\n    [1]\n    (flatten [1 (map (partial apply +) (partition 2 1 (triangle-row (dec n)))) 1])))","user":"58ee5371e4b056aecfd47da8"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [r] (into [] (concat [1] (map + r (rest r)) [1]))) [1]) (dec n)))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [c] (flatten [1 (map #(apply + %) (partition 2 1 c)) 1]))\n      [1])\n    (dec n)))","problem":97,"user":"4e5229dc535d302ef430da6f"},{"problem":97,"code":"(fn pascal [n]\n  (loop [res [1]\n         x 1]\n    (if (= x n)\n      res\n      (recur \n       (map #(+ (first %)(second %))\n            (partition 2 1 (concat [0] res [0])))\n       (inc x)))\n  ))","user":"5ade6bafe4b0837691e92c23"},{"problem":97,"code":"(fn pascal-triangle [row-num]\n  (if (= 1 row-num)\n    [1]\n    (let [previous-row (pascal-triangle (dec row-num))\n          current-row (repeat row-num 1)]\n      ;; add 1 to both the beginning and the end\n      (map-indexed\n       (fn [index element]\n         (if (< 0 index (dec row-num))\n           ;; the elements in the middle are computed as a sum of two elements from previous row\n           (+ (nth previous-row (dec index))\n              (nth previous-row index))\n           ;; the first and last element of new row is just one\n           1))\n       current-row))))","user":"551bdefde4b07993ea3788d7"},{"problem":97,"code":"(fn [n]\n  (loop [cnt 1 row [1]]\n    (if (= cnt n) row\n      (->> (cons 0 (conj row 0))\n           (partition 2 1)\n           (mapv #(apply + %))\n           (recur (inc cnt))))))","user":"5ad63a34e4b0ea6055cfac01"},{"problem":97,"code":"#(letfn [(p [i] (if (= 1 i) [1]\n                    (let [q (p (dec i))] (vec (map + (conj q 0) (cons 0 q))))))]\n    (p %))","user":"53976599e4b0b51d73faaeea"},{"problem":97,"code":"(fn a [n]\n  (nth (\n        (fn answer [numbers]\n          (cond\n            (= 0 (count numbers)) (cons [1] (answer [1]))\n            (= 1 (count numbers)) (cons (vec (concat numbers numbers)) (answer (vec (concat numbers numbers))))\n            :else (let [n1 (first numbers)\n                        n-last (last numbers)\n                        pairs (partition 2 1 numbers)\n                        result (lazy-cat [n1] (map #(reduce + %) pairs) [n-last])]\n                    (lazy-seq (cons result (answer result))))\n            )\n          ) []) (dec n)))","user":"5e491182e4b043cd24807a46"},{"problem":97,"code":"(fn [row]\r\n  (loop [i (dec row), res [1]]\r\n    (if (zero? i)\r\n      res\r\n      (recur (dec i) (cons 1 (conj (into [] (map + res (rest res))) 1))))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"#(reduce\n  (fn [a x]\n    (conj a\n          (* (peek a)\n             (/ (- % x) x))))\n  [1] (range 1 %))","problem":97,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn pas [x] (if (= x 1) [1]\r\n              (if (= x 2) [1 1]\r\n              (let [prev (pas (dec x))]\r\n              (conj  (vec (map-indexed (fn [index,item] (if (zero? index) item (+ item (nth prev (dec index))) ))  prev)) 1  ))\r\n              )))","problem":97,"user":"50463347e4b011c5dfee771e"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (conj (vec (reverse (conj (\n                                     (fn prdo-pascal [sekv] (if (empty? (rest sekv)) [] (conj (prdo-pascal (rest sekv) ) (+ (first sekv) (second sekv)))))\n                                     (pascal (- n 1))) 1))) 1)\n    )\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"problem":97,"code":"(fn [n]\n        (loop [res [] i 0]\n          \n          (if (= i n)\n            res\n            (recur (loop [builder [] j 0]\n                     \n                     (if (= i j)\n                       (conj builder 1)\n                       (recur (conj builder (+ (if (> 0 (dec j))\n                                                 0\n                                                 (nth res (dec j))) (nth res j))) (inc j)))) (inc i)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":97,"code":"(fn pt [n]\n  (if (<= n 1) \n    [1]\n    (into [] (concat [1]    \n                     (#(map + % (next %)) (pt (dec n)))   \n                     [1]))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":97,"code":"(fn [n] (let [next-row (fn [x] (map #(+ %1 %2) (concat x [0]) (concat [0] x)))]\n        (nth (iterate next-row [1]) (dec n))))","user":"55205564e4b08d5046aa8a60"},{"problem":97,"code":"(partial (fn pascal [out n] \n  (cond \n   (= n 1) out\n   :else (pascal (map + (conj out 0) (reverse (conj out 0))) (dec n))\n)) [1])","user":"5280a1ece4b0757a1b171407"},{"problem":97,"code":"(fn f[x](if(= x 1)[1](map #(apply + %)(partition 2 1`[0~@(f(dec x))0]))))","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn p [pascals]\n  (let [psc (fn [lastrow]\n              (apply vector\n                (concat [1]\n                        (map\n                        #(reduce + %)\n                            (partition 2\n                              (butlast\n                                (rest\n                                  (flatten\n                                    (map\n                                      (fn [x] [x x])\n                                      lastrow))))))\n                        [1])))]\n    (cond\n      (= 1 pascals) [1]\n      (= 2 pascals) [1 1]\n      (< 2 pascals) (psc (p (- pascals 1))))))","problem":97,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn pascal [row]\n  (cond (= row 1) [1]\n        (= row 2) [1 1]\n        :else (let [row-1 (pascal (dec row))]\n                (loop [r (next row-1)\n                       prev (first row-1)\n                       out []]\n                  (if (nil? r)\n                    (concat [1] out [1])\n                    (recur (next r) (first r)\n                           (conj out (+ prev (first r)))))))))","problem":97,"user":"4f04f847535dcb61093f6beb"},{"problem":97,"code":"(fn [n]\n  (let [nums (range (dec n) 0 -1)\n        dens (range 1 n)\n        frcs (map / nums dens)]\n    (loop [prev 1\n           frcs frcs\n           rslt [1]]\n      (if (empty? frcs)\n        rslt\n        (let [curr (* prev (first frcs))]\n          (recur curr (rest frcs) (conj rslt curr)))))))","user":"58969076e4b00487982d52a2"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [pas] (vec (cons 1 (conj (mapv (partial apply +) (partition 2 1 pas)) 1)))) [1]) (dec n)))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn [x] \n  (nth (iterate #(into [] (map + (cons 0 %) (conj % 0))) [1]) (dec x))\n  )","problem":97,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn pascal-triangle [row-number]\n    (loop [curr-row-number 0\n           curr-row [1]]      \n        (if (= (inc curr-row-number) row-number)\n          curr-row\n          (recur (inc curr-row-number) \n                 (vec (for [x (range 0 (+ 2 curr-row-number))]\n                        (if (or (= x 0) (= x (inc curr-row-number)))\n                          1\n                          (+ (nth curr-row x) (nth curr-row (dec x))))))))))","problem":97,"user":"51aefceee4b09397d5109797"},{"code":"(fn tri [n] (if (= n 1) [1] (vec (concat [1] (map #(+ (first %) (second %)) (partition 2 1 (tri (dec n)))) [1])) ))","problem":97,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [row]\n  (letfn [(pas [row column]\n  (cond\n\t  (or (= row column) (= 2 row) (= 1 column) (= 1 row))\n     \t1\n\t  :else\n\t\t(+\n         \t(pas (dec row) (dec column))\n            (pas (dec row) column))\n     ))]\n\n\t(map (partial pas row) (range 1 (inc row)))\n   )\n\n  )","problem":97,"user":"50293245e4b08353e5d459cf"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n      (let [nx (pascal (dec n))\n            nw (cons 1 (map + nx (drop 1 nx)))]\n        (conj (apply vector nw) 1)\n      )))","problem":97,"user":"531c0619e4b08068f379ed98"},{"problem":97,"code":"(fn fun97\n  [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [pred (fun97 (dec n))]\n        (concat (cons 1 (map + pred (rest pred))) '(1))))))","user":"5075e374e4b09049dea827a5"},{"code":"(fn [n]\n  (nth (iterate #(map + `(0 ~@%) `(~@% 0)) [1]) (dec n)))","problem":97,"user":"510d9d61e4b078ea71921141"},{"problem":97,"code":"(fn [count]\n   (let [sum (partial reduce +)\n         next-row (fn [r] (flatten [1 (map sum (partition 2 1 r) ) 1]))]\n     (loop [count (- count 1)\n           current [1]]\n      (if (<= count 0)\n        current\n        (recur (- count 1) (next-row current))))))","user":"54b31445e4b09f271ff37d35"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= 1 n)\n    [1]\n    (let [prev-row (pascal (- n 1))]\n      (conj (into []\n                  (cons 1\n                           (map (fn [x y] (+ x y))\n                                prev-row\n                                (rest prev-row))))\n            1))))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn pascal [n]\n\t(if (= n 1)\n\t\t[1]\n\t\t(map #(apply + %)\n\t\t\t(partition 2 1\n\t\t\t\t(concat [0] (pascal (- n 1)) [0])))))","problem":97,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":97,"code":"(fn pasc [num] (case num\n                   1 [1]\n                   2 [1 1]\n                   (loop [num num\n                   \t       lst [1 1]]\n                          (let [mid (map (partial apply +) (partition 2 1 lst))]\n                     \t    (if (= num 2)\n                              lst\n                              (recur (dec num) (concat [1] mid [1])))\n                            ))))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn pt [n]\r\n  (cond\r\n    (= 1 n) [1]\r\n    (= 2 n) [1 1]\r\n    :else\r\n      (flatten (reduce #(cons %2 (cons (+ %2 (first %1)) (rest %1)))\r\n              (cons '(0) (pt (dec n)))))))","problem":97,"user":"5050b107e4b063148f524126"},{"code":"(fn f [x] (if (= x 1) [1] (let [y (f (dec x))] (map #(+ %1 %2) (cons 0 (vec y)) (conj (vec y) 0)))))","problem":97,"user":"514d398ee4b019235f6c0583"},{"problem":97,"code":"(fn [x] (nth (iterate #(vec (concat [1] (map + % (rest %)) [1])) [1]) (dec x)))","user":"51dd5d6fe4b0c33a4e1da406"},{"code":"(fn f [r]\n  (cond\n    (= r 1) [1]\n    (= r 2) [1 1]\n    true (vec (concat [1] (map (partial apply +) (partition 2 1 (f (dec r)))) [1]))))","problem":97,"user":"523ed522e4b057c4b7cd0a78"},{"problem":97,"code":";(fn [n]\n;  (let [next-row (fn [v]\n;                   (vec (concat [1] (map (partial apply +) (partition 2 1 v)) [1])))]\n;    (last (take n (iterate next-row [1])))))\n(fn [n]\n  (loop [n n\n         acc [1]]\n    (if (= n 1)\n      acc\n      (recur (dec n)\n             (mapv + (cons 0 acc) (conj acc 0))))))","user":"60794173e4b0a637ed78035d"},{"code":"(fn pt [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else (let [pl (pt (dec n))]\n          (conj (vec (cons 1 (map + (rest pl) (butlast pl)))) 1))))","problem":97,"user":"5063fe48e4b075d771da6f9e"},{"problem":97,"code":"#(reduce (fn [acc e] (conj acc (int (* (last acc) e)))) \n         [1] \n         (map (fn [n d] (/ n d)) (reverse (range 1 %)) (range 1 %)))","user":"50f02de7e4b0bdaecbb47db0"},{"problem":97,"code":"(fn [n] (nth (iterate\n  #(flatten (reduce (fn [[a p] v] [(conj a (+ p v)) v]) [[] 0] %))\n  [1]) (- n 1))\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":97,"code":"(fn[n]\n  (letfn [(! [n] (apply *' (range 1 (inc n))))\n          (combinasi [n r] (/ (! n) (! r) (! (- n r))))]\n    (map #(combinasi (dec n) %) (range n))))","user":"5c2836ebe4b07e362c2305d4"},{"problem":97,"code":"(fn [n]\n  (for [i (range n)] \n    (bigint \n     (apply * \n            (map #(/ (+ % i) %) \n                 (range 1 (- n i)))))))","user":"5e042dede4b0a607a9a45d69"},{"code":"(fn [n]\n  (loop [i 0 row []]\n    (if (= n i)\n      row\n      (recur (inc i) \n        (loop [values row new-row (if (first row) [1] []) ]\n          (if (nil? (second values))\n            (conj new-row 1)\n            (recur (rest values) (conj new-row (+ (first values) (second values)))\n            )))))))","problem":97,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn [n] \n  (nth  \n    (iterate #(concat [1] (map + % (drop 1 %)) [1]) [1])\n    (dec n)))","problem":97,"user":"500aa15ee4b03d00572d2d76"},{"problem":97,"code":"(fn [n] (nth (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n                 [1])\n            (dec n)\n              ))","user":"537b1083e4b06839e8705e64"},{"code":"(fn pascal [n]\n    (if (= 1 n)\n         [1]\n         (let [p (pascal (dec n))]\n             (vec (map + (concat [0] p) (conj p 0)))\n          )\n      )\n)","problem":97,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":97,"code":";(fn [n]\n;  (nth (iterate \n;         (fn [pre] \n;           (vec \n;             (concat \n;               [1] \n;               (map (fn [[f s]] (+ f s)) (partition 2 1 pre)) \n;               [1])))\n;         [1])\n;       (dec n)))\n\n(fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec n)))\n\n;(fn [n]\n;  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn[n]\n  (nth \n    (iterate #(vec (map + (cons 0 %)(conj % 0))) [1])\n      (dec n)))","problem":97,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [y]\r\n  (let [x   (dec y)\r\n        f   #(reduce * (range 1 (inc %)))\r\n        nCk #(/ (f x) (* (f %) (f (- x %))))]\r\n    (map nCk (range 0 (inc x)))))","problem":97,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":97,"code":"(fn get-pascal-triangle [row]\n    (letfn [(calculate-value-at [row col]\n              (cond\n                (= col 0) 1\n                (= col row) 1\n                :else (+ (calculate-value-at (dec row) (dec col))\n                         (calculate-value-at (dec row)      col)))\n              )]\n      (let [_row (dec row) ; _row should be 1 based\n            calculated-row (for [col (range row)]\n                             (calculate-value-at _row col))]\n        calculated-row)))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":97,"code":"(fn [num_] (letfn [(C [n k] (if (or (= n 0) (= k 0) (= n k)) 1 (+ (C (dec n) (dec k)) (C (dec n) k))))]\n                          (vec (for [k (range num_)] (C (dec num_) k)))))","user":"588f500ae4b00487982d51a4"},{"code":"(fn [n] \n   (nth \n     (iterate #(map + `(0 ~@%) `(~@% 0)) [1])\n     (dec n)))","problem":97,"user":"51e58e02e4b0efabf93c02d0"},{"code":"(fn pascal-row\n  ([n]    (pascal-row [1] n))\n  ([r n]  (if (= 1 n) r\n              (vec (pascal-row (concat [1] (map (partial apply +) (partition 2 1 r)) [1]) (dec n))))))","problem":97,"user":"530bf87ee4b02e82168697d5"},{"problem":97,"code":"#(map (fn pascal\n        ([col] (pascal % col))\n        ([row col]\n           (if (or (= col 1) (= col row))\n             1\n             (+ (pascal (- row 1) col)\n                (pascal (- row 1) (- col 1))))))\n      (range 1 (+ 1 %)))","user":"4ebbc1f6535dfed6da9c6d72"},{"code":"(fn [level]\r\n  (reduce\r\n\t  #(conj %1 ((fn pascal [level rank]\r\n                 (if (or (= rank 1) (= rank level))\r\n\t\t               1\r\n\t\t               (+ (pascal (dec level) (dec rank))\r\n\t\t               (pascal (dec level) rank))))\r\n                level %2))\r\n\t  nil\r\n\t  (range 1 (inc level))))","problem":97,"user":"4e821ca5535db62dc21a62c2"},{"problem":97,"code":"(fn [arg]\n  (nth (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n           [1]) (dec arg)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":97,"code":"(fn pascals-triangle [target] \n  (if (= target 1) \n    [1]\n    (let\n      [previous (pascals-triangle (dec target))]\n      (vec (map + (concat [0] previous) (concat previous [0])))\n    )\n  )\n)","user":"546692aee4b01be26fd746e7"},{"code":"(fn[x] (map (fn[y] (/ (apply * (range 1 x))(* (* (if (== y 0)1 y) (apply *(range 1 y))) (apply *(range 1 (- x y))))))(range x)))","problem":97,"user":"4f32135ae4b0d6649770a08e"},{"code":"(fn pascal [n]\n  (nth (iterate #(concat [1] (map + (butlast %) (rest %)) [1]) [1]) (dec n)))","problem":97,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn [n]\r\n  (loop [i 1 ls [1]] \r\n  (if (= i n) ls\r\n  (let [nls (concat [1] (map #(apply + %) (partition 2 1 ls )) [1])]  \r\n      (recur (inc i) nls)))))","problem":97,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [n] (-> (nth (iterate (fn [l] (map + (concat l '(0)) (conj l 0))) '(0 1 0)) (dec n)) rest butlast vec))","problem":97,"user":"4faac363e4b081705acca200"},{"code":"(fn [y] (let [pas (fn pas [y x] \n    (if (< x 0) \n      0\n      (if (or (= x y) (= x 0)) \n        1\n        (+ (pas (- y 1) x) \n           (pas (- y 1) (- x 1))\n        )\n      )\n    )\n)] (map (fn [x] (pas (- y 1) x)) (range (+ 1 (- y 1))))))","problem":97,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":97,"code":"(fn [n] (nth (iterate #(mapv + (cons 0 %) (conj % 0)) [1]) (dec n)))","user":"519b2570e4b0ac1b7dced6a3"},{"problem":97,"code":"(fn nthLine [n]\n  (nth (iterate (fn[v](map + (concat [0] v) (concat v [0]))) [1])\n   (dec n)))","user":"5b6473eee4b0c6492753e73f"},{"problem":97,"code":"(fn pascal [r]\n  (if (= r 1)\n    [1]\n    (vec (concat [1]\n                 (map #(reduce + %) (partition 2 (drop 1 (let [prev (pascal (dec r))]\n                                                           (interleave prev prev)))))\n                 [1]))))","user":"53c1ce3ee4b00fb29b221268"},{"problem":97,"code":"#((fn [t c n]\n  (if (= c n) \n    t\n    (recur (map + (concat [0] t) (concat t [0])) (inc c) n))) [1] 1 %)","user":"54b2ec84e4b09f271ff37d33"},{"problem":97,"code":"(fn [n]\n  (last (take n \n              (iterate \n                 #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"5e9d1c75e4b0157ca9664801"},{"code":"(fn [n] (nth (iterate (fn it [v] (vec (map (partial apply +) (partition 2 1 (flatten [0 v 0]))))) [1]) (dec n) ))","problem":97,"user":"50563ae2e4b0ce54f56f0405"},{"problem":97,"code":"(fn pascal-triangle-row [n]\n  (if (= n 1)\n    [1]\n    (->>\n     (pascal-triangle-row (dec n))\n     (into [0])\n     (reverse)\n     (into [0])\n     (partition 2 1)\n     (map (partial reduce +)))))","user":"54485749e4b032a45b8693c7"},{"code":"#(nth (iterate (fn [v] (vec (map + (into [0] v) (into v [0])))) [1]) (dec %))","problem":97,"user":"4e7e55ab535db169f9c79711"},{"problem":97,"code":"(fn triangle-row [n]\n  (letfn [(fac [n] (if (<= n 1) 1 (* n (fac (dec n)))))\n          (ncr [n r] (/ (fac n)\n                        (* (fac (- n r))\n                           (fac r))))]\n    (vec (map #(ncr (dec n) %)\n              (range n)))))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [n] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n    (dec n)  ))","problem":97,"user":"503917a0e4b088a6a14ca763"},{"problem":97,"code":"(fn pascalsTriangle [x]\n  (let\n    [recursor\n     (fn recurs [out in]\n       (if (< (count in) 2) (conj out 1) (let [firstElem (first in), secondElem (second in)] (recurs (conj out (+ firstElem secondElem)) (rest in))))\n       )\n     pascals\n     (fn pasc [n] (if (<= n 1) [1] (if (= 2 n) [1 1] (recursor [1] (pasc (- n 1))))))\n     ]\n    (pascals x)\n    )\n  )","user":"58950f29e4b00487982d5270"},{"problem":97,"code":"(fn [n]\n  (let [fact #(reduce * (range 1 (inc %)))\n        comb (fn [k p] (/ (fact k) (fact p) (fact (- k p))))]\n    (for [k (range 0 n)] (comb (dec n) k))))","user":"5412ef7ee4b01498b1a719da"},{"problem":97,"code":"(fn [n] (nth ((fn pascal-row [prev]\n  (cons prev (lazy-seq (pascal-row (map + (concat prev [0]) (cons 0 prev)))))) [1]) (- n 1)))","user":"5245e320e4b09dbe66b56177"},{"problem":97,"code":"(fn pascal-triangle [level]\n  (letfn [\n          (factorial [n]\n                     (loop [result 1 multiplier n]\n                       (cond\n                        (= multiplier 0) (* result 1)\n                        :else (recur (* result multiplier) (dec multiplier) ))))\n          (entry [row entry] \n                 (/ (factorial row) (* (factorial entry) (factorial (- row entry)) )))\n          (row [row]\n               (->> (iterate inc 0)\n                    (take row)\n                    (map #(entry (dec row) %))\n                    (into [])\n                    )\n           )]\n    (row level)\n   )\n  )","user":"60752ef6e4b069485764de55"},{"code":"#(loop [row %1 new-list [1]]\n    (if (= row 1)\n      new-list\n      (recur (dec row)\n             (map (fn [x]\n                    (+ (nth new-list (dec x) 0)\n                       (nth new-list x 0)))\n                  (range (inc (count new-list)))))))","problem":97,"user":"53838742e4b06839e8705ee0"},{"code":"(fn [row]\n  ((fn [r acc]\n      (if (= r row)\n          (last acc)\n          (recur (inc r)\n                 (conj acc (vec (concat [1]\n                              (map + (last acc) (rest (last acc)))\n                              [1]))))))\n    1 [[1]]))","problem":97,"user":"4f047902535dcb61093f6bcc"},{"code":"(fn [n] (nth (iterate (fn [s] (map #(apply + %) \n                                   (partition 2 \n                                              (#(interleave (concat % [0]) (concat [0] %)) s)))) \n                      [1])\n             (dec n)))","problem":97,"user":"4f03f197535dcb61093f6b84"},{"problem":97,"code":"(fn my-pascal[row]\n  (reduce (fn calc-Pasc[el1 el2]\n            (conj el1 (* (last el1) (/ (- row el2) el2))))[1] (range 1 row)))","user":"59dd387be4b0a0ac046f2502"},{"problem":97,"code":"(fn [n]\n    (loop [row [1]] \n        (if (< (count row) n)\n            (recur (concat [1] (map + row (rest row)) [1]))\n            row)))","user":"54fdaeace4b07d26eda61d39"},{"problem":97,"code":"(fn [n] (first (drop (dec n) (let [x #(conj % 0)] (iterate #(map + (x %) (reverse (x %))) [1])))))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1])))\n  )","user":"53d5d43ce4b0e771c302544d"},{"problem":97,"code":"(fn [input]\n          (let [f (fn [x]\n                    (loop [x x col [1]]\n                      (if (= x 1)\n                        col\n                        (recur (dec x)\n                               (-> (map (partial reduce +) (partition 2 1 col))\n                                   (conj 1)\n                                   (vec)\n                                   (conj 1))))))]\n            (if (coll? input)\n              (mapv f input)\n              (f input))))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(vec (map + (into [0] %) (conj % 0))) [1]))))","user":"54e606c3e4b024c67c0cf803"},{"problem":97,"code":"(fn pascals-triangle[n]\n  (let [first-row [1]\n        next-row (fn [row]\n                   (let [padded-row (concat [0] row [0])]\n                     (map #(apply + %)\n                          (map #(vector %1 %2) padded-row (rest padded-row)))))]\n    (loop [left n\n           row first-row]\n      (println row)\n      (if (= 1 left)\n        row\n        (recur (dec left) (next-row row))))))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn myPascal-row [row]\n    (map (fn myPascal-cell\n        ([col]\n           (if (= col 0)\n               1\n           (* (myPascal-cell (dec col)) (/ (- row col) col))))) (range 0 row))\n  )","problem":97,"user":"4f03b3fb535dcb61093f6b52"},{"problem":97,"code":"#(nth (iterate (fn [l] (flatten [1 (map (fn [[a b]] (+ a b)) (partition 2 1 l)) 1])) [1]) (dec %))","user":"58b86162e4b0ebc645576d97"},{"code":"(fn p [n]\n      (condp = n\n        1 [1]\n        2 [1 1]\n        (concat\n         [1]\n         (map (partial apply +) (partition 2 1 (p (- n 1))))\n         [1])))","problem":97,"user":"51d4ed02e4b013d740b70dec"},{"problem":97,"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (loop [n n\n           acc (list 1 1)]\n      (if (= n 2)\n        (vec acc)\n        (recur (dec n) (concat [1] (map + acc (rest acc)) [1]))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (map (partial apply +)\n                           (partition 2 1 (pascal (dec n)))) \n                  [1])))","user":"598858d0e4b021a7a535feb5"},{"code":"(fn trix [n]\n  (if (< n 3)\n    (repeat n 1)\n    (let [prev (trix (dec n))]\n      (->> (interleave prev prev)\n        (drop 1)\n        (partition 2)\n        (map #(apply + %))\n        (cons 1)\n        reverse\n        (cons 1)))))","problem":97,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn [n]\n  (loop [row [1] i 1]\n    (if (= i n)\n      row\n      (recur\n       (conj\n        (into [1]\n              (map #(+ (row %) (row (inc %))) (range (dec (count row)))))\n        1)\n       (inc i)))))","problem":97,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [nums]\n        (vec\n          (map + (conj nums 0) (cons 0 nums))))\n      [1])\n    (dec n)))","problem":97,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":97,"code":"(fn\n    [x]\n    (loop\n        [n 0 r '[]]\n        (cond\n            (= n x) r\n            (= n 0) (recur (inc n) (conj r 1))\n            (= n (dec x)) (recur (inc n) (conj r 1))\n            :else\n            (recur (inc n) (conj r (/ (reduce * (range 1 x)) (* (reduce * (range 1 (inc n))) (reduce * (range 1 (- x n)))) )))\n         )\n        )\n    )","user":"6074f5ede4b069485764de52"},{"problem":97,"code":"(fn [m]\n  (let [factorial (fn [n] (if (zero? n) 1 (reduce * (range 1 (inc n)))))\n        C (fn [n k] (/ (factorial n) (* (factorial k) (factorial (- n k) ) ) )) ]\n    \t(map #(C (dec m) %) (range m))\n   )\n )","user":"5649615be4b0284900eef641"},{"problem":97,"code":"(memoize (fn pascal [n]\n           (if (= n 1) [1]\n               (map + (concat (pascal (- n 1)) [0]) (into [0] (pascal (- n 1))) ))))","user":"5414b7c4e4b01498b1a719ed"},{"problem":97,"code":"(fn tri [n]\n  (condp = n\n    1 [1]\n    (let [last (tri (dec n))\n          a (concat [0] last)\n          b (concat last [0])\n          ]\n      (vec (map + a b))\n      ))\n  )","user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"(fn ! [i]\n  (if (= i 1)\n    [1]\n    (flatten (list 1 (map #(apply + %) (partition 2 1 (! (dec i)))) 1))\n))","problem":97,"user":"50e3fe8fe4b0463d32072488"},{"code":"(fn [n]\n  (nth (iterate #(mapv + (conj % 0) (cons 0 %)) [1]) (dec n)))","problem":97,"user":"510db6cde4b078ea71921145"},{"code":"(fn [n] (loop [n n, rst [1]] (if (< n 2) rst (recur (dec n) (conj (into [1] (map #(+ (first %) (second %)) (partition 2 1 rst))) 1)))))","problem":97,"user":"4efd8b67535de96065cf5085"},{"problem":97,"code":"(fn pascal [r]\n (loop [i r row [1]]\n  (if (= i 1) row\n    (recur\n      (dec i)\n      (concat\n       [1]\n       (map + (butlast row) (rest row))\n       [1]\n      )\n    )\n  )\n )\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":97,"code":"(fn [row] (letfn [(fact [x] (apply * (range 1 (inc x))))\n          (n-choose-k [n k]\n          (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(n-choose-k (dec row) %) (range row))))","user":"607f3336e4b05857a65e7747"},{"problem":97,"code":"(fn test51 [n]\n  (if (= 1 n)\n    [1]\n    (into [] (map + (cons 0 (test51 (dec n))) (conj (test51 (dec n)) 0))) ))","user":"5804d5afe4b0a837a8b30cad"},{"problem":97,"code":"(letfn [(pascal-recur\n         [r c]\n         (if (or (= c 0) (= c r)) 1\n           (+ (pascal-recur (dec r) (dec c)) (pascal-recur (dec r) c))))\n        (cons-row\n         [f r c]\n         (if (> c r) []\n           (cons (f r c) (cons-row f r (inc c)))))]\n  (fn [row] (cons-row pascal-recur (dec row) 0)))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn pascal_s-triangle [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first (reduce   \n                            \n                            (fn [[a,l] x] \n                              (if (nil? l) [a,x]\n                                  [(conj a (+ l x)), x]))\n                            [[1],nil]\n\n                            (pascal_s-triangle (dec n)))) 1)))","problem":97,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn[a](map (fn[x y]\n\t\t     (quot (quot (apply * (range x (- x y) -1))\n\t\t\t\t (apply * (range 1 y))) x)) (repeat a) (range 1 (inc a))))","problem":97,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n         (partition 2 1\n                    (concat [0] (pascal (- n 1)) [0])))))","user":"51c611c4e4b03a28d42333bf"},{"problem":97,"code":"(fn pascal [n] (if (< n 2)\n          [1]\n          (let [prev (pascal (dec n))] (concat [1] (map + prev (rest prev)) [1]))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (loop [data [1 1] num (- x 2)]\n  (if (= num 0)\n\t  data\n\t  (let [fb (cons 0 data)  lb (reverse fb)]\n\t    (recur (map + fb lb) (- num 1))))))))","problem":97,"user":"4eb0afed535d7eef3080733e"},{"problem":97,"code":"(fn [w] (nth (iterate (fn [z] ((fn [x] (map #(+ (first %) (last %)) x)) ((fn [y] (map list (conj y 0) (conj (vec y) 0))) z))) '(1)) (dec w)))","user":"54db3d82e4b024c67c0cf75f"},{"problem":97,"code":"(fn pascal-tri [n]\n   (if (= n 1)\n     [1]\n     (let [prev-line (pascal-tri (- n 1))]\n       (map + (concat [0] prev-line) (concat prev-line [0])))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":97,"code":"(fn pascal [n]\n  (loop [result [1] iter 1]\n    (if (= iter n)\n\t  result\n\t  (recur \n         (second (reduce #(do [%2 (concat (second %1) [(+ (first %1) %2)])]) [0 []] (concat result [0])))\n         (inc iter)))))","user":"51eec1a6e4b0871fa145d98d"},{"problem":97,"code":"(fn [row]\n  (letfn [(fac [numb]\n            (->> \n             (inc numb)\n             (range 1)\n             (reverse)\n             (reduce *)))\n          (binomial [n k]\n          \t(let [n! (fac n)\n                  k! (fac k)\n                  n-k! (fac (- n k))\n                  res (/ n! (* k! n-k!))]\n              res))]\n    (let [row-index (dec row)\n          k-items (vec (range 0 row))\n          binomes (for [k k-items]\n                    (binomial row-index k))]\n      binomes)))","user":"573b8f67e4b0cd1946bd10ae"},{"problem":97,"code":"(fn pascal-n [n]\n (map \n   #(cond\n     (= % 0) 1\n     (= % (dec n)) 1\n     :else (let [p-row (pascal-n (dec n))]\n             (+ (nth p-row (- % 1)) (nth p-row %))\n    )) (range n)))","user":"5978b4c9e4b01722bebd4d13"},{"code":"(fn f [n]\n  (if (= n 1)\n      [1]\n      (let [x (f (dec n))]\n        (map + (cons 0 x) (concat x [0])))))","problem":97,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":97,"code":"(fn [n] (let [f (fn [y] \n                  (let [p1 (partition 2 y) \n                        p2 (partition 2 (drop 1 y)) \n                        a (if (= (count p1) (count p2)) \n                            (interleave \n                         p1 \n                         p2\n                         )\n                            (conj (interleave p2 (rest p1)) (first p1))\n                            ) \n                        \n                        ] \n                    (flatten [1 (map #(apply + %) a) 1])\n                    )\n                  )] \n          (nth (iterate f [1]) (- n 1))\n          ))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":97,"code":"(fn pascal [row]\n  (if (= 1 row) [1]\n    (let [previous-row (pascal (dec row))]\n      (map + (concat [0] previous-row)\n             (concat previous-row [0])\n           ))))","user":"53dadf1de4b0e771c30254ad"},{"code":"(fn [n]\n  (letfn [(v [c] (if\n                    (= c 0) 1\n                    (int (* (v (- c 1)) (/ (- n c) c)))))]\n    (into [] (map v (range n)))))","problem":97,"user":"4f2893d0e4b0d6649770a019"},{"problem":97,"code":"(fn pascal [n]\n  (loop [stop n\n         n 1\n         prev nil]\n    (if (> n stop)\n       prev\n       (let [newl (cond\n                        (= 1 n) [1]\n                        (= 2 n) [1 1]\n                        :else (conj (seq (conj (vec (map + (butlast prev) (rest prev))) 1)) 1))]\n         (recur stop (inc n) newl)))))","user":"53f7820be4b0de5c41848560"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n          (iterate\n            (fn next-row [previous-row]\n              (into []\n                    (map (fn [e] (apply + e))\n                         (partition 2 1\n                                    (conj (into [0] previous-row) 0)))))\n            [1]))))","user":"5baaae06e4b0a20761a23464"},{"code":"(fn [x] (loop [res [1] c 1] (if (= x c) res (recur (map #(apply + %) (cons '(1) (partition-all 2 1 res))) (inc c)))))","problem":97,"user":"4ece9ca9535d23f03622770f"},{"code":"#(loop [cur [1] n %]\n                     (if (= 1 n) cur\n                       (recur (vec (map + (into cur [0]) (into [0] cur))) (dec n))\n                       )\n                     )","problem":97,"user":"510d3dc6e4b078ea71921132"},{"code":"#(nth \n  (iterate \n    (partial reduce\n      (fn [acc x] \n        (conj (vec (butlast acc)) \n              (+ x (or (last acc) 0)) \n              x))\n      [])\n    [1])\n    (dec %))","problem":97,"user":"4fe4c09ee4b0e8f79898febb"},{"problem":97,"code":"(fn [n]\n  (let [add-ones\n        (fn [v]\n          (concat [1] (conj v 1)))\n        one? (partial == 1)\n        sum (partial reduce +)\n        sum-adjacent\n        (fn [coll]\n          (->> coll\n               (partition 2 1)\n               (mapv sum)))\n        next-row (comp add-ones sum-adjacent)]\n    (if (one? n)\n      [1]\n      (reduce (fn [r _]\n                (next-row r))\n              [1 1]\n              (range (dec (dec n)))))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":97,"code":"#(nth (iterate (fn [x] (concat [1] (map + x (next x)) [1])) [1]) (dec %))","user":"593dfe60e4b069cdc2982bb1"},{"problem":97,"code":"(fn [row]\n  (letfn [(pascal-triangle [row]\n            (cond\n              (= row 1) [1]\n              (= row 2) [1 1]\n              :else (concat\n                      (cons 1\n                            (map\n                              (fn [[x y]] (+ x y))\n                              (partition 2 1 (pascal-triangle (dec row)))))\n                      [1])))]\n    (pascal-triangle row)))","user":"58bb218be4b0888cdc949cf4"},{"problem":97,"code":"(fn pascal[n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first\n                     (reduce (fn[[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascal(dec n))))\n                    1)))","user":"52a4879ce4b0c58976d9abdb"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal 1 0 (dec n) '(1)))\n  ([prev pos n col]\n   (if (= pos n)\n     col\n     (let [el (/ (* prev (- n pos)) (inc pos))]\n       (pascal el (inc pos) n (conj col el))))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":97,"code":"(fn pascal [n] \n    (reduce (fn [xs _] (concat [1] (map + xs (rest xs)) [1]) ) [1] (range 1 n))\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn fc [n]\n(last (take n (iterate \n(fn fb [c]\n(conj (reverse \n(conj \n((fn fa [c]\n      (if (> (count c) 1) (conj (fa (next c)) (+ (first c) (second c))))) c) 1)) 1)) [1]))))","problem":97,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":97,"code":"(fn [row]\n  (nth\n   (iterate #(map +'\n                  (concat [0] %)\n                  (concat % [0]))\n            [1])\n   (dec row)))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn [n] (nth (iterate #(map + (conj (vec %) 0) (cons 0 %)) [1]) (dec n)))","problem":97,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":97,"code":"(fn pascal [row]\n  (loop [cur [1] counter 1]\n    (if (= row counter)\n      cur\n      (recur\n       (conj\n        (into [1]\n              (map\n               #(apply + %)\n               (partition 2 (interleave (butlast cur) (rest cur))))\n              )\n        1)\n       (inc counter)\n       )\n      )\n    )\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"problem":97,"code":"(fn pascal [n]\n    (if (= 1 n) [1]\n    (let [prev (pascal (dec n))]\n        (loop [ r [1] f (first prev) s (first (rest prev)) l (drop 2 prev)]\n        (if (not s) (conj r 1)\n        (recur (conj r (+ f s)) s (first l) (rest l))\n        ))\n    ))\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":97,"code":"(fn triangle [x]\n   (loop [col [1]\n          itr 1]\n     (if (= itr x)\n       col\n       (recur\n         ((fn f [col] (concat [1] (map #(reduce + %) (partition 2 1 col)) [1])) col)\n         (inc itr)))\n\n     ))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":97,"code":"(fn tr1\n   ([n] (tr1 n (vector 1)))\n   ([n res]\n    (if (= 1 n)\n      res\n      (tr1 (dec n) (vec (map +' (cons 0 res) (vec (conj res 0))))))))","user":"5e980583e4b0157ca96647d5"},{"problem":97,"code":"(fn [i] \n  (reduce \n   #(map + (concat % [%2]) (cons %2 %)) \n   [1] \n   (repeat (dec i) 0)))","user":"51eca2ace4b069f463c22cd0"},{"problem":97,"code":"(fn [n]\n    (reduce #(conj % (* %2 (last %))) [1]\n            (map #(/ %1 %2) (reverse (range 1 n)) (range 1 n))))","user":"4f57c913e4b0a7574ea7183f"},{"code":"(fn [c]\n(nth (iterate (fn [x]\n                 (flatten ((juxt first\n                                 (fn [c]\n                                   (map #(apply + %)\n                                        (partition 2 1 c)))\n                                 last) x)))\n              '(1)) \n \t (dec c)))","problem":97,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [n]\n  (letfn [(frac [n] (loop [result 1 x n] (if (= x 0) result (recur (* result x) (dec x)))))\n          (C [m n] (/ (frac n) (* (frac m) (frac (- n m)))))]\n    (loop [result []\n           x 0\n           upper (dec n)]\n      (if (= x upper)\n        (conj result 1)\n        (recur (conj result (C x upper)) (inc x) upper)))))","problem":97,"user":"50ed3c6be4b01236b1d4983b"},{"problem":97,"code":"(fn pascal [n]\n  (let [\n        next-row (fn [row] (apply vector (map + (cons 0 row) (conj row 0))))\n        triangle (iterate next-row [1])]\n    (nth triangle (dec n))))","user":"588e4e05e4b00487982d5188"},{"code":"(fn bla [n] \n  (map \n   (partial apply (fn pt [n k]\n     (cond \n      (= k 0) 1\n      (= n 0) 0\n      :else (+ (pt (- n 1) (- k 1)) (pt (- n 1) k)))))\n   (map vector (repeat n (- n 1)) (range n))\n   )\n)","problem":97,"user":"4ff769bce4b0678c553fc38f"},{"problem":97,"code":"(fn [n]\n  (let [memo-fact \n        (memoize (fn fact [n] (if (< n 2) 1 (* n (fact (- n 1))))))\n        binomial \n        (fn [n k] (/ (memo-fact n) (* (memo-fact (- n k)) (memo-fact k) ) ) )\n        ]\n    (map #(binomial (dec n) %)(range n))\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":97,"code":"(fn [s] \n  (map \n   (partial \n        (fn [m n] (\n            let [x (inc m) \n                 y (- x n)\n                 z (inc n)\n                 f #(reduce * (range 1 %))] \n                   (/ (f x) (* (f y) (f z))))) (dec s)) \n   (range  s)))","user":"5505ceb3e4b086ebe8a79c8b"},{"problem":97,"code":"(fn pascal [& x]\n  (cond\n    (and (= (count x) 1)\n         (instance? Long (first x)))\n    (vec\n     (nth\n      (iterate\n       #(concat [1]\n                (map + % (rest %))\n                [1])\n       [1])\n      (- (first x) 1)))\n    (not (instance? Long (first x)))\n    (apply mapv pascal x)\n    :rest (mapv pascal x)))","user":"576e607ae4b0979f89651579"},{"problem":97,"code":"(fn [x] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec x)))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"(fn [x] (nth (iterate #(vec (cons 1 (concat (map (fn [c] (apply + c)) (partition 2 1 %)) [1]))) [1]) (dec x)))","problem":97,"user":"511b810ce4b07ab9ec456182"},{"problem":97,"code":"(fn [num]\n  (let [calc-pasc-nums (fn [list]\n                         (into [] \n                               (map (partial reduce +) (partition 2 1 list))))\n        gen-pasc-nums (fn [list]\n                        (let [prepend-1 (into [1] (calc-pasc-nums list))\n                              append-1 (into prepend-1 [1])]\n                          append-1))]\n    (last (take num (iterate gen-pasc-nums [1])))))","user":"505d1b01e4b0e6aca564be04"},{"code":"(fn [n]\n  (nth\n    (iterate #(mapv + (cons 0 %) (conj % 0)) [1])\n    (dec n)))","problem":97,"user":"506ab9bae4b05d3b7762c74c"},{"problem":97,"code":"(fn [n]\n  (let [enframe-with-zeros #(cons 0 (conj % 0))\n        next-pascal #(if (= [] %) [1] (mapv (partial apply +) (partition 2 1 (enframe-with-zeros %))))]\n    (nth (iterate next-pascal []) n)))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":97,"code":"(fn [n]\n  (loop [n n\n         res [1]]\n  (if\n    (= 1 n) res\n            (recur (dec n)\n              (mapv + (cons 0 res) (conj res 0))))))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":97,"code":"(fn pascal-tr\n  ([x] (cond\n         (= x 1) [1]\n         (= x 2) [1 1]\n         (> x 2) (cons 1 (conj (vec (map #(apply + %) (partition 2 1 (pascal-tr (- x 1))))) 1)))))","user":"52d84ea7e4b09f7907dd1390"},{"code":"(fn pastri [n]\n  (loop [v [1] m 1]\n    (if (= n m)\n      v\n      (recur (conj (mapv #(apply + %) (reductions (fn [[_ x] y] [x y]) [0 1] (rest v))) 1)\n             (inc m)))))","problem":97,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":97,"code":"(fn my-pasc [i]\n  (let [pascal (iterate #(concat [1]\n                                 (map + % (rest %))\n                                 [1])\n                        [1])]\n    (nth pascal (- i 1))))","user":"50b63c5ee4b0a86f8358ca69"},{"problem":97,"code":"(fn [x] (loop [cnt 1 ans [1]]\n          (if\n           (= x cnt)\n           ans\n           (recur (inc cnt)\n                  (conj ans (/ (reduce * (range 1 x))\n                     (*\n                      (reduce * (range 1 (inc cnt)))\n                      (reduce * (range 1 (- x cnt))))\n                     ))))))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn pascal [n]\n    (let\n      [line-builder (fn [line]\n                      (concat [1] (for [pair (partition 2 1 line)]\n                                    (apply + pair)) [1]))]\n      (last (take n (iterate line-builder [1])))))","problem":97,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (let [p (pascal (dec n))]\n      `(1 ~@(map + p (drop 1 p)) 1))))","problem":97,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [iterations]\r\n  (let [helperFunc \r\n    (fn [previous_row] (map (fn [x] (apply + x)) \r\n       (partition 2 1 (concat [0] previous_row [0]))))]\r\n    (loop [marker iterations\r\n      row [1]]\r\n        (if (zero? (dec marker))\r\n          (vec row)\r\n          (recur (dec marker) (helperFunc row))))))","problem":97,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn pascal [n] (if (= n 1) \n                   [1] \n                   (concat\n                     (map-indexed #(if (= %1 0) 1 (+ %2 (nth (pascal (- n 1)) (- %1 1))))\n                                  (pascal (- n 1))\n                     ) '(1))\n                 )\n  )","problem":97,"user":"4f048ebc535dcb61093f6bd2"},{"problem":97,"code":"(fn f [row]\n    (loop [above [1] current 1]\n      (if (= current row)\n        above\n        (recur (conj (into [1]\n                           (map #(reduce + %)\n                                (partition 2 1 above)))\n                     1)\n               (inc current)))))","user":"531bf76fe4b08068f379ed96"},{"problem":97,"code":"#(-> \n   (fn c [i n]\n     (if (or (= i 0) (= i (dec n))) \n       1\n       (+ (c (dec i) (dec n)) (c i (dec n)))))\n   (map-indexed (repeat % %))\n   (vec))","user":"53b7c21ae4b047364c0444d4"},{"problem":97,"code":"(fn test [r]\n  (nth\n   (iterate \n    (fn [l] \n      (concat [1] (map #(apply + %) (partition 2 1 l)) [1])\n      )\n    [1]) (dec r) )\n  )","user":"55e8a85be4b0121d4835fd98"},{"problem":97,"code":"(fn [anum]\n          (loop [anum anum v1 [1]]\n            (if (= anum 1)\n              v1\n              (let [left  (conj v1 0)\n                    right (cons 0 v1)\n                    inner (map #(+ %1 %2) left right)\n                    ]\n                (recur (dec anum) (vec inner))\n                )))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":97,"code":"(fn p-tri [n]\n  (if (= n 1) '(1)\n      (concat '(1)\n              (map #(apply + %)\n                   (partition 2 1 (p-tri (dec n))))\n              '(1))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":97,"code":"(fn pascal [row]\n  (last (take row\n        (iterate #(concat [1]\n                          (map + % (rest %))\n                          [1])\n\n                 [1])\n)))","user":"6074dfa4e4b069485764de4c"},{"problem":97,"code":"(partial (fn [ans tmp mu zi]\n            (let [zii (dec zi)]\n              (cond\n                (= zii 0) [1]\n                (= mu 0) (recur (conj ans 1) tmp (inc mu) zi)\n                (= zii 1) (conj ans 1)\n                :else (recur (conj ans (/ (* tmp zii) mu) ) (/ (* tmp zii) mu) (inc mu) (dec zi) )\n                ))) [] 1 0)","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":97,"code":"(fn [n]\n   (letfn [(pascal [n]\n             (if (= n 1)\n               [1]\n               (map #(apply + %)\n                    (partition 2 1\n                               (concat [0] (pascal (- n 1)) [0])))))]\n     (pascal n)))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":97,"code":"(fn [n]\n  (let [next-row #(mapv + (conj % 0) (cons 0 %))]\n    (nth (iterate next-row [1]) (dec n))\n    ))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn pascal [row]\n\t(letfn [(fact [n]\n\t \t\t\t(loop [num n \n    \t    \t\t\tr 1] \n   \t\t\t\t\t\t(if (= num 0) r \n     \t\t\t\t\t\t(recur (dec num) (* r num)))))\n            (bin-coeff [n pos]\n                     (/ (fact n) (* (fact (- n pos)) (fact pos))))]\n      (map (partial bin-coeff (dec row)) (range row))))","problem":97,"user":"51cbaf14e4b08d8387cbedda"},{"problem":97,"code":"(fn pascal\n  [x]\n  (if (= 1 x)\n    [1]\n    (let [p (conj (pascal (dec x)) 0)]\n      (map + p (reverse p)))))","user":"57f8153de4b0d3187e900916"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (vec (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1]))\n    )\n  )","user":"54965534e4b0b312c081ff65"},{"code":"(fn pasc [n]\n    (if (= 1 n) '(1)\n      (cons\n        1\n        (map #(apply + %) (partition-all 2 1 (pasc (dec n)))))))","problem":97,"user":"5165a235e4b079ad97ec44ac"},{"problem":97,"code":"(fn [n]\n  (let [next-ptri\n        (fn [row]\n          (cons 1\n                (conj (vec (map + row (rest row)))\n                      1))\n          )]  \n    (let [p-tri (cons [] (iterate next-ptri [1]))]\n      (nth p-tri n))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":97,"code":"(fn [x]\n(let [f (fn f [a & [b & xs]]\n          (if-not b [1]\n                  (concat [(+ a b)]\n                          (if xs (apply f b xs)\n                              [1]))))]\n  ((vec\n    (take 20 (iterate\n              #(concat [1] (apply f %))\n              [1]))) (dec x)))  \n  )","user":"52c35afce4b07a9af579238c"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(-> (map + (rest %) (butlast %))\n                     (conj 1)\n                     vec\n                     (conj 1))\n                [1])\n       (dec n)))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":97,"code":"(fn [n]\n  (let [j (fn [xs] (concat '(1) (map #(apply + %) (partition 2 1 xs )) '(1)))]\n    (nth (lazy-seq (cons [] (iterate j [1])))\n         n)))","user":"564a560ae4b0284900eef654"},{"code":"(fn p [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (concat [1] (map #(apply + %) (partition 2 1 (p (dec n)))) [1])))","problem":97,"user":"506d5e4ce4b0a302964c5493"},{"problem":97,"code":"(fn pt [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (map + (butlast (pt (- n 1))) (rest (pt (- n 1)))) [1])))","user":"557c6ca6e4b05c286339e0c4"},{"problem":97,"code":"(fn [r]\n  (let [n (- r 1)\n        factorial (fn [n] (loop [n n o 1] (if (< n 2) o (recur (dec n) (* n o)))))]\n    (cond\n          (= r 1) [1]\n          (= r 2) [1 1]\n          (= r 3) [1 2 1]\n          :else (loop [k 2 o [1 n]]\n                  (if (= k (- n 1))\n                    (concat o [n 1])\n                    (recur (inc k)\n                           (conj o (/ (factorial n) (* (factorial k) (factorial (- n k))))))\n                  )\n          )\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":97,"code":"(fn level [idx]\n  (if (= 1 idx) '(1)\n  (let [part (fn part [[x & res]]\n               (when-let [y (first res)]\n                 (cons (list x y) (lazy-seq (part res)))\n                 )\n               )]\n    (loop [curr 2\n           coll '(1 1)]\n      (if (= idx curr)\n        coll\n        (recur (inc curr) (concat '(1) (map (partial apply +) (part coll)) '(1)))\n        )\n      )\n    )\n    )\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":97,"code":"#(map (partial\n   (fn binom [n k]\n     (if (or (zero? k) (= n k))\n       1\n       (+ (binom (dec n) (dec k)) (binom (dec n) k))))\n   (dec %1))\n  (range 0 %1))","user":"588d224ae4b00487982d516c"},{"problem":97,"code":"(fn [n]                                                                                                                                                     \n  (let [pas (iterate #(concat [1] (map + % (rest %)) [1]) [1])]                                                                                            \n  (last (take n pas))))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":97,"code":"(fn [row] \n  (last (take row (iterate (fn nrow [x] (conj (vec (conj (map #(reduce + %)  (partition 2 1 x)) 1)) 1)) [1]))))","user":"5793931ee4b0e215f87e845c"},{"code":"#( get {1 [1] 2 [1 1] 3 [1 2 1] 4 [1 3 3 1] 5 [1 4 6 4 1] 11 [1 10 45 120 210 252 210 120 45 10 1]} %)","problem":97,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn\n  [linenum]\n  ((fn pt [prev-line line-count]\n     (if (= 0 line-count)\n       prev-line\n       (pt (\n #(if (empty? %)\n    [1]\n    (let [line-size (inc (count %))]\n      (loop [line [1]]\n        (if (= (inc (count line)) line-size)\n          (conj line 1)\n          (let [pos (count line)]\n            (recur (conj line (+ (nth % pos) (nth % (dec pos))))))))))\n\n            prev-line) (dec line-count)))) [] linenum))","problem":97,"user":"523288fee4b035af41902a88"},{"problem":97,"code":"; http://4clojure.clojuregirl.com\n; ((fn [row] (take row (repeat 1)))3)\n; => (1 1 1)\n\n; ((fn [row] (take row (iterate (partial reductions +) (take row (repeat 1)))))3)\n; => ((1 1 1) (1 2 3) (1 3 6))\n\n; (reverse (range 1 (+ 1 3)))\n; => (3 2 1)\n \n; ((fn pascal [row]\n;   (map take\n;        (reverse (range 1 (+ 1 row)))\n;        (take row (iterate (partial reductions +) (take row (repeat 1)))))) 3)\n; => ((1 1 1) (1 2) (1))\n\n; reductions: Returns a lazy seq of the intermediate values of the reduction (as\n; per reduce) of coll by f, starting with init.\n; (reductions + [1 1 1 1])\n; => (1 2 3 4)\n\n; takes the last element of each list: ((1 1 1) (1 2) (1)) becomes (1 2 1)\n(fn pascal [row]\n   (map (comp last take)\n        (reverse (range 1 (+ 1 row)))\n        (take row (iterate (partial reductions +) (take row (repeat 1))))))\n\n; old solution that makes no sense\n;(fn [n]\n;  (last\n;    (take n\n;      (iterate\n;        (fn next-row [previous-row]\n;            (into [] (map (fn next-value [e] (reduce + e))\n;                       (partition 2 1 (conj (into [0] previous-row) 0)))))\n;        [1]))))\n\n; function that builds row n+1 from row n\n;((fn [x] \n;   (loop [x x\n;          return []]\n;     (if (= 1 (count x))\n;       (conj return 1)\n;       (recur (rest x)\n;              (if (= 1 (first x))\n;                   (conj return 1 (+ (first x) (second x)))\n;                   (conj return (+ (first x) (second x)))))))) \n;  [1 2 1])\n; need to build a specific row e.g., 1 or 11","user":"57c44053e4b05aa3c4741ccb"},{"problem":97,"code":"(fn nth-pascal-row [n]\n  (letfn [(sum-pairs [seq]\n    (map #(+ (first %) (second %))(partition 2 1 seq)))]\n  (if (.equals 1 n)\n    [1]\n    (concat [1] (sum-pairs (nth-pascal-row (- n 1))) [1]))))","user":"4f577f25e4b0a7574ea71839"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal [n i]\n                  (if (= 0 n)\n                    1\n                    (condp = i\n                      0 1\n                      (- n 1) 1\n                      (let [prevRow (partial pascal (- n 1))]\n                        (+ (prevRow (- i 1)) (prevRow i))))))]\n          (map #(pascal n %1) (range 0 n))))","user":"525cc912e4b0cb4875a45d48"},{"code":"(fn [x]\r\n  (loop [x x\r\n         row [1 1]]\r\n    (cond \r\n      (or (nil? x) (< x 1)) []\r\n      (= x 1) [1]\r\n      (= x 2) row\r\n      :e (recur (- x 1) (flatten [1 (map (partial apply +) (partition 2 1 row)) 1])))))","problem":97,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":97,"code":"(fn [n]\n  (loop [stp 1\n         row [1]]\n    (if (<= n stp)\n      row\n      (recur (inc stp)\n             (cons 1\n             \t   (conj (mapv #(reduce + %)\n                               (partition 2 1 row))\n                         1))))))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [n]\n  (letfn [(next-row [row] (map + `(0 ~@row) `(~@row 0)))]\n    (nth (iterate next-row [1]) (dec n))))","problem":97,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn [n]\n  (loop [res [1]]\n  (if (-> res count (= n))\n    res\n    (recur (->> (partition 2 1 res)\n             (map #(reduce + %))\n             (cons 1)\n             reverse\n             (cons 1))))))","problem":97,"user":"5028cd0fe4b01614d1633ffc"},{"problem":97,"code":"(fn pascal-row-n\n  [n]\n  (loop\n    [row [1]\n     k n]\n    (if (= 1 k)\n      row\n      (recur ((fn n-given-n-1\n                [n-1]\n                (flatten\n                 (vector\n                  1\n                  (map\n                   #(apply + %)\n                   (partition 2 1 n-1))\n                  1)))\n              row)\n             (dec k)))))","user":"51b01309e4b0c53cf2e68a57"},{"problem":97,"code":"; 97 - Pascal's Triangle\n(fn pascal-row [rownum]\n  (letfn [(pascal-cell [n k]\n            (if-not (zero? k)\n              (* (pascal-cell n (dec k)) (/ (- (inc n) k) k))\n              1))]\n    (map #(pascal-cell (dec rownum) %) (range rownum))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":97,"code":"(fn f\n    ([n] (f (dec n) [1]))\n    ([n x] (if (zero? n) (vec x)\n                         (recur (dec n)\n                                (conj\n                                  (map + x (rest (conj (vec x) 0)))\n                                  (first x)))))\n    )","user":"596d630ae4b069c0a1a19846"},{"problem":97,"code":"(fn [n]\n(nth (iterate\n#(concat [1] (map + % (rest %)) [1]) \n[1]) (dec n)))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn [n]\n  (loop [i (dec n) a [1]]\n    (if (zero? i) a\n        (recur (dec i)\n               (map #(apply + %)\n                    (cons [(first a)]\n                    (partition-all 2 1 a)))))))","problem":97,"user":"4fd96694e4b05e33b9224f37"},{"code":"(fn pasca[n]\n  (let [acc (atom [])]\n    (doseq[i (range  n)] ;broj elemenata \n      (let [ b (apply * (range 1 n))\n            im1  (apply * (range 1 (+ (- (- n 1) i) 1)))\n            im2  (apply * (range 1 (+ i 1)))\n            im (* im1 im2)\n            numb (/ b im)]\n        (swap! acc (fn[_]\n                     (conj @acc numb)))))\n    @acc))","problem":97,"user":"52d6664be4b09f7907dd1359"},{"problem":97,"code":"(fn [n]\n  (nth \n    (take n \n          (iterate\n            (fn [v]\n              (loop [in v\n                     out [1]]\n                (if (< (count in) 2)\n                  (conj out 1)\n                  (recur (rest in)\n                         (conj out (+ (first in) (second in)))))))\n            [1])) \n    (- n 1)))","user":"5cdda90ce4b05ee0cb311766"},{"code":"(fn b \n  ([t] (b t [1 1]))\n  ([t p]\n   (if (= 1 t)\n     [1]\n     (if (= t (count p))\n       p\n       (b t\n            (flatten\n             (list 1\n                   (map #(+ % %2) p (rest p))\n                   1)))))))","problem":97,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"(fn [r]\n    (reduce\n      #(conj %1 (* (last %1) (/ (- r %2) %2)))\n      [1]\n      (range 1 r)))","problem":97,"user":"4fd6f4d8e4b0dab7d829f37b"},{"code":"(fn [i]\n  (reduce\n    #(conj %1 (* (last %1) (/ (- i %2) %2)))\n    [1] (range 1 i)))","problem":97,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn pascal \n  ([n]\n    (pascal n [1]))\n  ([n acc]\n    (if (= n 1)\n      acc\n      (recur (dec n)\n         (concat [1]\n           (map (partial apply +)\n             (partition 2 1 acc))\n           [1])))))","problem":97,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn pas [p]\n    (map #(apply + %) (remove #(= 12 %)\n         (if (<= p 1) \n           '((1))\n            (cons '(1) (conj (vec (into [] (partition 2 1 (pas (dec p))))) '(1)))))) )","problem":97,"user":"5300aa1de4b0d8b024fd3710"},{"code":"(fn f [n]\n  (if (= n 1) \n    [1]\n    (loop [v (f (dec n))\n          ans [1]\n          n 0]\n      (if (= n (- (count v) 1))\n        (conj ans 1)\n        (recur v \n               (conj ans (+ (nth v n) (nth v (inc n))))\n               (inc n))))))","problem":97,"user":"52196842e4b0890f2f822bfa"},{"problem":97,"code":"(fn [x]\n  (loop [res [1]\n         left x]\n    (if (= left 1)\n      res\n      (recur (loop [fst (first res)\n                    rst (rest res)\n                    acc '()]\n               (if (empty? rst)\n                 (concat '(1) acc '(1))\n                 (recur (first rst)\n                        (rest rst)\n                        (conj acc (+ fst (first rst))))))\n             (dec left)))))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn [n]   (nth (iterate\n\t      #(let [w (vec (concat [0] % [0]))]\n\t\t  (for [i (range (inc (count %)))]\n\t\t       (+ (w i) (w (inc i))))) [1]) (dec n)))","problem":97,"user":"4e6e3a1e535d5021c1a89602"},{"problem":97,"code":"(fn fr [n] (let [hfr (fn [res xs ys] \n                 (if (first xs) \n                     (recur (conj res (+ (first xs) (first ys))) (rest xs) (rest ys))\n                      res )\n                ) ]\n          (cond (= 1 n) [1]\n                (= 2 n) [1 1]\n                :else (let [vorg (fr (dec n))]\n                        (hfr [1] (conj (vec (drop 1 vorg)) 0) vorg) )\n                )))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"#(vec (map (fn [i] (/ (reduce * (range 1 %)) (reduce * (range 1 (+ i 1))) (reduce * (range 1 (- % i))))) (range 0 %)))","problem":97,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":97,"code":"(fn [n] \n   (let [nexttriangle \n      (fn [col] \n        (loop [c0 [] [x & r] (concat [0] col [0])] (if (empty? r) c0 \n                                                     (recur (conj c0 (+ x (first r))) r))))\n     ]\n   \n   (if (= 1 n ) [1] (loop [i 1 col [1]] (if (< i n) (recur (inc i) (nexttriangle col)) col))))\n )","user":"55632016e4b0c656e3ff17e4"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (vec\n      (map #(apply + %)\n        (partition 2 1\n          (concat [0] (pascal (- n 1)) [0]))))))","user":"5b985fe5e4b0c0b3ffbd4ab1"},{"code":"(fn [n]\n  (loop [i 1 s [1]]\n    (if-not (< i n)\n      s\n      (recur (inc i) (concat [1] (map #(apply + %) (partition 2 1 s)) [1])))))","problem":97,"user":"51284226e4b03a34742b4308"},{"problem":97,"code":"(fn [n]                                                                                                                                                                      \n        (cond                                                                                                                                                                            \n          (= n 1) [1]                                                                                                                                                                    \n          (= n 2) [1 1]                                                                                                                                                                  \n          :else                                                                                                                                                                          \n          (loop [i 2 res '(1 1)]                                                                                                                                                         \n            (if (= i n)                                                                                                                                                                  \n              (vec res)                                                                                                                                                                  \n              (recur (inc i) (conj (map + res (concat (next res) [0])) 1))))))","user":"54edc818e4b024c67c0cf865"},{"problem":97,"code":"(fn nth-row [n]\n  (let [next-row (fn [last-row]  (map + (concat last-row [0]) (concat [0] last-row)))\n        n-rows (fn [n] (take n (iterate next-row [1])))]\n    (last (n-rows n))))","user":"51d42f44e4b013d740b70ddb"},{"code":"(fn pascal\n  [n]\n  (map (fn [x] ((fn binom [a b f] (/ (f a) (* (f b) (f (- a b))))) (dec n) x #(apply * (take % (iterate inc 1))))) (range 0 n)))","problem":97,"user":"5300b750e4b0d8b024fd3711"},{"problem":97,"code":";; http://www.4clojure.com/problem/97\n(fn pascal-tri\n  [n]\n  (loop [i 1\n         out [1]]\n    (if (>= i n)\n      out\n      (recur (inc i)\n             (cons 1\n                   (concat\n                    (map #(apply + %) (partition 2 1 out))\n                    [1]))))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn pt [N]\n     (if (= N 1)\n       [1]\n       (map + \n            (reverse (conj (pt ( - N 1)) 0)) \n            (conj (pt ( - N 1)) 0)\n            )))","problem":97,"user":"4f73f78de4b044e54cd9a8f3"},{"problem":97,"code":"(fn [n]\n  \"Using `n choose k` method to implement this function.\"\n  (let [fac (fn fac [x]\n              (if (zero? x)\n                1\n                (* x (fac (- x 1)))))\n        row (- n 1)]\n    (for [term (range n)]\n      (/ (fac row)\n         (* (fac term) (fac (- row term)))))))","user":"58a2b57fe4b02bd94d917ede"},{"code":"(fn [nn] \n\t \t(letfn [( pasc [n result ] \n\t  (if (= n 1 ) result \n\t  (pasc (- n 1 ) (cons 1 (accum result )))\n\t \t) ) \n\t \t( accum [[x & re ]] \n\t \t(if-let [m (seq re )]\n\t \t\t(cons (+  x  (first m ))(accum m ) )\n\t \t\t\t[x]))]  \n\n\t \t(pasc nn [1])))","problem":97,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn pas [row]\n  (cond (= 1 row) [1]\n        (= 2 row) [1 1]\n        :else (concat \n              [1]\n                (map #(apply + %)\n                     (partition 2 1 (pas (- row 1))))\n              [1])))","problem":97,"user":"4f0446f9535dcb61093f6bb8"},{"problem":97,"code":"(fn [x] (last(take x (iterate #(loop[c 0 r []]\n    (if (> c (count %))\n      r\n      (recur(inc c)(conj r (+ (get % c 0) (get % (dec c) 0))))\n      )\n    ) [1]))))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [n]\n  (let [row (- n 1)]\n   (letfn [(factorial [x] (reduce *  (range 1 (+ 1 x))))]\n     (map #(/ (factorial row) (* (factorial %) (factorial (- row %)))) (range 0 (+ 1 row))))))","problem":97,"user":"5125029de4b0ce9225d2ed3e"},{"problem":97,"code":"(fn [i]\n   (let [next-row (fn [prev-row] \n                   \t(concat [1] (map #(apply + %) (partition 2 1 prev-row)) [1]))\n      \t pasc-row (fn p [prev-row] \n       \t\t\t  \t(lazy-seq (cons prev-row (p (next-row prev-row)))))]\n     (nth (pasc-row [1]) (- i 1))))","user":"5a778224e4b013a48d399761"},{"problem":97,"code":"(fn\n  [n]\n  (last (take n (iterate #(map + `(0 ~@%) `(~@% 0)) [1]))))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn nth-row [n]\n  (let [by-pairs (fn [row] (partition 2 1 row))\n        next-row (fn [row]\n                   (let [middle (map (partial apply +) (by-pairs row))]\n                     (concat [1] middle [1])))\n        pascal-seq (iterate next-row [1])]\n    (nth pascal-seq (- n 1))))","problem":97,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn [n]\n    (loop [n (dec n) v [1]]\n      (if (zero? n)\n        v\n        (recur (dec n) (flatten [1 (map #(reduce + %) (partition 2 1 v)) 1])))))","problem":97,"user":"4ed292ac535d44c135fd68d9"},{"problem":97,"code":"(fn [levels]\n  (loop [result [1] level 1]\n    (if (< level levels)\n      (recur (map +\n                  (\tconcat [0] result)\n                  (concat result [0]))\n             (inc level))\n      result)))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [x]\n  (letfn [(f [n k]\n    (cond\n      (= n 0) 0\n      (= k 0) 1\n      :else (+ (f (dec n) (dec k)) (f (dec n) k))))]\n    (map #(f x %) (range x))))","problem":97,"user":"4fc4eadee4b081705acca353"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) \n    [1]\n    (let [prev (pascal (dec n))\n          prepped (conj prev 0)\n          next (fn [[prev out] n] [n (conj out (+ n prev))])]\n      (get (reduce next [0 []] prepped) 1 ))))","user":"5483d59fe4b0e286459a1194"},{"problem":97,"code":"(fn triangle [n]\n  (loop [n n\n         triangulo '[1]]\n    (if (= n 1)\n      triangulo\n      (recur (dec n) (vec (map + (conj triangulo 0) (cons 0 triangulo)))))))","user":"59e12c94e4b08badc2a0c509"},{"problem":97,"code":"(fn [n] (map\n         ;; Binomial Coefficient\n         #(let [rprod (fn [a b] (reduce * (range a (inc b))))]\n                (/ (rprod (- (dec n) %1 -1) (dec n)) (rprod 1 %1)))\n         (range 0 n)))","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":97,"code":"(fn [row]\n  (loop [result [1]]\n    (if (= (count result) row)\n      result\n      (let [n (dec row) k (count result)]\n        (recur (conj result (* (last result) (/ (+ n 1 (- k)) k))))))))","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(let [pairs (fn pairs\n              ([lst] (pairs lst 0))\n              ([lst prev]\n               (if (empty? lst)\n                 (list [prev 0])\n                 (cons [prev (first lst)] (pairs (rest lst) (first lst))))))]\n(fn pascal [n]\n  (if (= n 1) [1]\n    (let [prev (pascal (- n 1))]\n      (map (partial reduce +) (pairs prev))))))","problem":97,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [n]\r\n  (nth (iterate\r\n                  #(map + (conj (vec %) 0)\r\n                          (into [0] %))\r\n                  [1])\r\n        (- n 1)))","problem":97,"user":"50acbd15e4b071b89ef26234"},{"problem":97,"code":"(fn ptriange [n]\n  (loop [i 1\n         ll [1]]\n    (if (= i n) ll\n        (recur (inc i) (flatten [1 (map #(apply + %) (partition 2 1 ll)) 1])))))","user":"5866b999e4b0f14aab7c886b"},{"problem":97,"code":"(fn [n] (nth (iterate #(vec (concat [1] (map (partial apply +) (partition 2 1 %)) [1])) [1]) (dec n)))","user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn [to]\n   (let [fact (fn [x]\n                (loop [n x r 1]\n                  (if (= n 0)\n                    r\n                    (recur (dec n) (* n r)))))\n         comb (fn [n k]\n                (quot (fact n) (* (fact (- n k)) (fact k))))]\n     (map #(comb (dec to) %) (range to))))","problem":97,"user":"4eb02674535d7eef30807338"},{"code":"(fn [n]\n  (let [l (map vector (next (range)) (range (dec n) 0 -1))]\n    (reductions #(/ (* % (second %2)) (first %2)) 1 l)))","problem":97,"user":"514d8084e4b019235f6c0588"},{"code":"#(let [sum-row (fn sum-row [l] (if (< (count l) 2) [1] (conj (sum-row (drop 1 l)) (apply + (take 2 l)))))]\n((fn pascal [n] (if (< n 2) [1] (conj (sum-row (pascal (- n 1))) 1))) %))","problem":97,"user":"4fcebce4e4b03432b189f404"},{"problem":97,"code":"(fn p [x]\n  (case x\n    1 [1]\n    (concat [1]\n            (map\n             (fn [[a b]] (+ a b))\n             (partition 2 1 (p (dec x))))\n            [1])))","user":"52541fe6e4b0541d1855b964"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [nums]\n                    (cons 1\n                          (map #(reduce + 0 %)\n                               (partition-all 2 1 nums))))\n                '(1))\n       (dec n)))","user":"4f29d9abe4b0d6649770a034"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n      (mapv +\n           (vec (cons 0 (pascal (- n 1))))\n           (conj (pascal (- n 1)) 0))))","user":"57cf13d1e4b00451144b04fb"},{"code":"(fn [n]\n  (first\n   (drop (dec n)\n         (iterate (fn [l] (mapv + (cons 0 l) (conj l 0)))\n                  [1]))))","problem":97,"user":"515ead6be4b049add99a053e"},{"code":"(fn [n] \n  (loop [x '(1) n (dec n)]\n    (if (zero? n) x\n\t\t(recur (cons 1 (reverse (cons 1 (map #(apply + %1) (partition 2 (interleave (butlast x) (rest x))))))) (dec n)))))","problem":97,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn pascal [row]\n  (letfn [(fact [y]\n            (if (= 0 y)\n              1\n              (if (= 1 y)\n                y\n                (* y (fact (dec y))))))\n          (elem [n k]\n            (/ (fact n) \n               (* (fact k) (fact (- n k)))))]\n    (map #(elem (dec row) %) (range 0 row))))","problem":97,"user":"4f04d312535dcb61093f6be7"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(vec (flatten [1 (map (partial apply +) (partition 2 1 %)) 1])) [1]))))","user":"5687fe58e4b0dcc4269f4065"},{"problem":97,"code":"(fn pas-trian\n  [n]\n\t\n  (letfn [(stp [lst]\n\t\t(lazy-seq (cons lst \n                        (stp ((fn [lst] (map #(+ (first %) (second %)) (partition 2 1 (concat '(0) lst '(0)))))\n\t\t lst)))))]\n    \n\t(nth (stp [1]) (dec n))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":97,"code":"(fn pascal\n  [n]\n  (loop [p-row [1]\n         n-row 1]\n    (if (>= n-row n)\n      p-row\n      (recur (map #(apply + %) (partition 2 1 (concat [0] p-row [0]))) (inc n-row)))))","user":"5609d328e4b05f002753deee"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (vec (cons 1 (conj (mapv #(apply + %) (partition 2 1 (pascal (dec n)))) 1)))))","user":"58949f8de4b00487982d525e"},{"problem":97,"code":"(fn [n]\n  (let [fact \n        (fn fakt\n          ([n] (fakt n 1))\n          ([n f] (if (<= n 1) f (recur (dec n) (* f n)))))]\n    (case n\n      1 [1]\n      2 [1 1] \n      3 [1 2 1]\n      (let [n (dec n)] (conj (vec (for [k (range n)]\n                    (/\n                     (fact n)\n                     (* (fact k) (fact (- n k)))))) 1)))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"#(map (fn over [x y]\n        (cond \n           (= 0 y) 1\n           (= 0 x) 0\n           :else (+ (over (- x 1) (- y 1)) (over (- x 1) y))))\n      (repeat (- % 1)) (range %))","problem":97,"user":"52f5f8b4e4b09b582c12c9cc"},{"problem":97,"code":"(fn get-row [row-n]\n  (if (<= row-n 1)\n    [1]\n    (let [prev-row (get-row (dec row-n))\n          prev-cnt (count prev-row)\n          get-prev (fn [x] (if (< -1 x prev-cnt) (prev-row x) 0))]\n      (vec\n        (for [x (range (+ prev-cnt 1))]\n          (+ (get-prev (- x 1)) (get-prev x)))))))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":97,"code":"(fn tr\n   ([n] (tr n [1]))\n   ([n acc]\n    (if (= n 1)\n      acc\n      (recur (dec n)\n             (mapv + (cons 0 acc) (conj acc 0))))))","user":"567d132ee4b05957ce8c61c3"},{"problem":97,"code":"(fn [level]                         \n  ((fn [i row]\n     (if (= i 1)\n       row\n       (recur\n        (dec i)\n        (map + (concat row [0]) (cons 0 row)))))\n   level '(1)))","user":"5705e404e4b0b0fb43fd0676"},{"problem":97,"code":"(fn pascal\n    [row]\n    (if (= row 1)\n      [1]\n      (concat [1]\n              (map #(apply + %)\n                   (partition 2 1 (pascal (dec row))))\n              [1])))","user":"554e4d65e4b00713264bd993"},{"code":"(fn triangle [n]\n  (let [trapezoid (fn trapezoid [xs]\n          (cons xs (lazy-seq (trapezoid (flatten (conj (conj [(first xs)] (map #(apply +' %) (map vector xs (rest xs)))) (last xs)))))))]\n    (nth (trapezoid [1]) (dec n))))","problem":97,"user":"50e3ddd4e4b01912b3285c47"},{"code":"#(first\n  (drop (dec %)\n    (iterate (fn [row]\n               (loop [r [1] t row]\n                 (if (> 2 (count t))\n                   (conj r 1)\n                   (recur\n                     (conj r (+ (nth t 0) (nth t 1)))\n                     (rest t))))) [1])))","problem":97,"user":"50657775e4b0deb876850599"},{"problem":97,"code":"(fn [x] (loop [out [1 1] cntr 2] (if (>= cntr x) (take x out) (recur (concat [1] (map #(reduce + %) (partition 2 1 out)) [1]) (inc cntr)))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":97,"code":"(fn\n  [n]\n  (nth\n   (iterate\n    #(vec (map + (conj % 0) (cons 0 %))) '[1])\n   (dec n)))","user":"55842bd7e4b05c286339e11c"},{"problem":97,"code":"(fn [n]\n  (let [binom (fn binom [n k]\n                (if (or (= k 0) (= n k))\n                  1\n                  (+ (binom (- n 1) (- k 1))\n                     (binom (- n 1) k))))\n        n (dec n)]\n    (map (partial binom n) (range 0 (inc n)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":97,"code":"(fn [n]\n  (let [p (fn [v x] (vec (flatten\n      (list 1 (for [i (range (dec (count v)))] (+ (nth v i) (nth v (inc i)))) 1))))]\n    (if (= 1 n) [1] (reduce p [1] (repeat (dec n) n)))))","user":"4e3ac1b2535deb9a81d77f4c"},{"problem":97,"code":"(fn [number]\n  (if (= 1 number)\n    [1]\n    (nth (take number (iterate (fn [input]\n                   (if (> 2 (count input))\n                     input\n                     (loop [i input\n                            result (conj [] (first input))]\n                       (if (and (first i) (second i))\n                         (recur (rest i) (conj result (+ (first i) (second i))))\n                         (conj result (first i))))))  [1 1])) (dec (dec  number)))\n    )\n  )","user":"546b24a0e4b00cfc9eacc166"},{"problem":97,"code":"(fn [row] (loop [arr [1]]\n            (if\n              (= (count arr) row) arr\n              (->> arr\n                   (partition 2 1)\n                   (map #(reduce + %))\n                   (cons 1)\n                   (#(conj (vec %) 1))\n                    recur))))","user":"5e909685e4b0cb016954634d"},{"problem":97,"code":"(fn [row-number]\n  (let [fact #(reduce * (map inc (range %))),\n        binom (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (for [i (range row-number)] (binom (dec row-number) i))))","user":"567695c2e4b05957ce8c6157"},{"problem":97,"code":"(fn pascal [n]\n     (if (= n 1)\n       [1]\n       (vec \n         (map \n           #(apply + %) \n           (partition 2 1 (concat [0] (pascal (dec n)) [0]))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":97,"code":"(fn [n]\n  (loop [x 1 l [1]]\n    (if (= x n) l\n        (recur (inc x) (vec (map + (cons 0 l) (conj l 0)))))))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn f[n]\n  (loop [res [1] m n]\n    (if (= 1 m) \n      res\n      (recur (map \n                #(apply + %) \n                (partition 2 1 (cons 0 (conj (vec res) 0)))) \n             (dec m)))))","problem":97,"user":"4dbd2aa3535d020aff1edf40"},{"code":"#(loop [i 1\n        r [1]]\n  (if (= i %)\n    r\n    (recur (inc i) (concat [1] (map + r (rest r)) [1]))))","problem":97,"user":"4f043ed1535dcb61093f6bb4"},{"code":"(fn [n]\r\n  (nth (iterate (fn [a] (map + (concat [0] a) (concat a [0]))) [1]) (dec  n)))","problem":97,"user":"507437c2e4b054001656acd0"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (letfn [(pascal\n            [n current]\n             (if (= n 1)\n               current\n               (pascal (dec n) (concat [1]\n                                       (map + (butlast current) (next current))\n                                       [1]))))]\n   (pascal n [1])))","user":"557e9d17e4b05c286339e0d8"},{"problem":97,"code":"(fn p-a\n  [n]\n  (let [next-line (fn [line]\n                    (let [middle (map #(+ %1 %2) (drop 1 line) (drop-last 1 line))]\n                      (vec (concat [1] (vec middle) [1]))))]\n  (loop [c 1\n         r [1]]\n    (if (> n c )\n      (recur (inc c) (next-line r))\n      r))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":97,"code":"(fn[n](last(take n (iterate (fn[c](let[r (mapv #(+ %1 %2) c (rest c))](concat [1] r [1]))) [1]))))","user":"555c6344e4b0b056612e224c"},{"code":"(fn pascal [n]\n\t(let [\tnext-row (fn [prev-row]\n\t\t\t\t(map (partial apply +)\n\t\t\t\t\t(concat\n\t\t\t\t\t\t[[(first prev-row)]]\n\t\t\t\t\t\t(partition 2 1 prev-row)\n\t\t\t\t\t\t[[(last prev-row)]])))]\n\t\t(case n\n\t\t\t1 [1]\n\t\t\t2 [1 1]\n\t\t\t(next-row (pascal (dec n))))))","problem":97,"user":"50e41747e4b0463d32072489"},{"code":"#(reductions (fn [v c] (* v (/ (- % c) c)) ) 1 (range 1 %))","problem":97,"user":"50503117e4b0a02f9cffdeb5"},{"code":"(fn [n] (loop [c-num 0 r []]\n             (if (= n c-num)\n               r\n               (if (= c-num 0)\n                 (recur (inc c-num) [1])\n                 (recur (inc c-num)\n                        (concat [1] (map #(+ (first %) (last %))\n                                         (partition 2 1 r)) [1]))))))","problem":97,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":97,"code":"(fn foo [n]\n   (if (= n 1)\n     [1]\n     (let [pre (foo (dec n))]\n       (concat [1] (map + pre (rest pre)) [1]))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [n]\n  (let [n (dec n)\n        fact (fn [n]\n        (loop [n n acc 1]\n          (if (zero? n)\n            acc\n            (recur (dec n) (* n acc)))))\n        n-choose-k (fn [n k]\n          (/ (fact n) (* (fact k) (fact (- n k)))))]\n  (for [el (range (inc n))\n    \t:let [i (n-choose-k n el)]]\n    i)))","problem":97,"user":"528b08efe4b0239c8a67ae8a"},{"problem":97,"code":"#(loop [k 0 n (- % 1) acc [1]]\n    (if (= k n)\n      acc\n      (recur (inc k) n (conj acc (/ (* (last acc) (- n k)) (+ k 1))))))","user":"56798d83e4b05957ce8c618b"},{"problem":97,"code":"(fn solve\n  ([n] (solve (dec n) 0 1))\n  ([n r p]\n   (lazy-seq\n    (when (<= r n)\n      (cons\n       p\n       (solve\n        n\n        (inc r)\n        (quot (* p (inc (- n (inc r)))) (inc r))))))))","user":"60537cd1e4b04c8f2157d152"},{"problem":97,"code":"(fn [n]\n  (nth\n    (iterate (fn\n               [v]\n               (cons (first v)\n                     (map (partial reduce +)\n                          (partition-all 2 1 v))))\n             [1])\n  (dec n)))","user":"54a6645be4b09f271ff37c87"},{"code":"(fn [n]\n  (loop [num n cnt n result [1]]\n    (if (= cnt 1)\n      result\n      (recur\n        num\n        (dec cnt)\n        (concat\n          [1]\n          (loop [data result res []]\n            (if (nil? (next data))\n              res\n              (recur (rest data) (conj res (+ (first data) (second data))))\n            ))\n          [1]))))\n)","problem":97,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [n]\r\n                       (nth\r\n                         (iterate \r\n                           (fn [x]\r\n                             (reduce (fn [c [a b]] (conj c (+ a b))) []\r\n                                     (partition 2 1 (conj (apply vector 0 x) 0))))\r\n                           [1])\r\n                         (dec n)))","problem":97,"user":"4f410b63e4b0e243712b1fc5"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n      (iterate\n        (fn [x]\n          (loop [i x o [1]]\n            (if (= 1 (count i))\n              (conj o 1)\n              (recur\n                (rest i)\n                (conj o (+ (first i) (second i)))))))\n        [1]))))","user":"5aa8f753e4b0d174b936c8d9"},{"problem":97,"code":"(fn pascal [thenum] (if (= thenum 1) [1] (if (= thenum 2) [1 1] \n(let [lastrow (pascal (- thenum 1))] (concat [1] (for [i (range 0 (- thenum 2))] (+ (nth lastrow i) (nth lastrow (inc i)))) [1])))))","user":"55f75c6be4b06e875b46cea9"},{"problem":97,"code":"(fn pascaller [levels]\n  (if (= levels 1)\n    [1]\n    (loop [border 1\n           middle []]\n      (let [result (flatten [1 (map + middle (rest middle)) 1])]\n        (if (= (count result) levels)\n          result\n          (recur border result))))))","user":"538d70abe4b0b51d73faae6e"},{"problem":97,"code":"#(loop [acum [1] its %]\n  (if (= its 1)\n    acum\n    (recur (concat [1] (map + acum (rest acum)) [1]) (dec its))\n    )\n\n  )","user":"52503747e4b0541d1855b828"},{"problem":97,"code":"(fn pas [num]\n  (if (= num 1) [1]\n    (let [A (pas (dec num))]\n      (concat [1] (map + A (next A)) [1]))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":97,"code":"(fn pascal-triangle[n]                                                \n  (case n                                                                \n    1 [1]                                                                \n    2 [1 1]                                                              \n    (lazy-seq (conj                                                      \n               (into [1] (map #(apply + %) (partition 2 1 (pascal-triangle (dec n)))))                                                           \n               1))))","user":"54008b88e4b0de5c4184860d"},{"problem":97,"code":"(fn [row]\n  (let [nCr (fn [n r]\n              (let [num (reduce * (take r (iterate dec n)))\n                    denom (reduce * (take (dec r) (iterate dec r)))]\n                (quot num denom)))\n        n (dec row)]\n    (map (partial nCr n) (range (inc n)))))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn p [r]\n   (if\n    (= r 1) [1]\n    (conj (into [1]\n                (map #(apply + %)\n                     (partition 2 1 (p (dec r)))))\n          1)))","problem":97,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":97,"code":"(fn pascal\n  [counter]\n  (loop [rsf [1]\n         counter (dec counter)]\n    (if (zero? counter)\n      rsf\n      (recur (vec (map + (cons 0 rsf) (conj rsf 0)))\n             (dec counter)))))","user":"5a9829e5e4b0d174b936c788"},{"code":"(fn [n]\n    (letfn [(pascal-seq [row]\n                        (lazy-seq (cons row (pascal-seq (next-row row)))))\n            (next-row [row]\n                      (concat [ 1] (map #(+ %1 %2) row (rest row)) [1]))]\n      (nth (pascal-seq [1]) (dec n))))","problem":97,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn pasc-tree [n]\n  (let \n    [rem-first-last (fn [v]  (subvec v 1 (dec (count v))))\n     double-members (fn [v]  (flatten (for [x v] [x x])))\n     put-first-last (fn [v]  (conj (into [1] v) 1))\n     calc           (fn [v]  (map #(reduce + %) (partition 2 v)))\n  \t calc-row (fn [prev-row] \n               (-> prev-row rem-first-last double-members put-first-last calc put-first-last))]\n  (cond\n\t  (= 1 n) [1]\n\t  (= 2 n) [1 1]\n\t  (= 3 n) [1 2 1]\n   \t  :else     \n      (loop [act 4 row [1 2 1]]\n        (if (> act n)\n          row\n          (recur (inc act) (calc-row row)))))))","problem":97,"user":"52cf084ce4b07d0d72b27399"},{"problem":97,"code":"(fn pascal-row [n]\r\n  (if (= n 1) [1]\r\n  (if (= n 2) [1 1]\r\n  (let [\r\n      next-row (fn [row]\r\n        (loop [[a b & tail] row, result [1]]\r\n          (if (nil? b)\r\n            (conj result 1)\r\n            (recur (cons b tail) (conj result (+ a b))))))]\r\n    (next-row (pascal-row (dec n)))))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn pascal [n]\n    (letfn [(next-pascal [this-pascal]\n                         (map (fn [[a b]] (+ a b))\n                              (partition 2 1\n                                         (concat [0] this-pascal [0]))))]\n      (apply vector (last (take n (iterate next-pascal [1]))))))","problem":97,"user":"500ea957e4b00fff93030f9b"},{"code":"#(last (take % (iterate (fn [row] (map + (concat row [0]) (cons 0 row))) [1])))","problem":97,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn\n [a]\n (loop\n  [v [1] n a]\n  (cond\n   (= n 1)\n   v\n   :else\n   (recur\n    ((fn\n      next-row\n      [v]\n      (let\n       [size (count v)]\n       (vec\n        (concat\n         [1]\n         (map + (map v (range size)) (map v (range 1 size)))\n         [1]))))\n     v)\n    (dec n)))))","problem":97,"user":"4e781a2e535d324fb2983d74"},{"problem":97,"code":";(fn pascal-tri [n]\n;\t(loop [i 1 r [1]]\n;\t\t(if (< i n)\n;\t\t\t(recur (inc i) (vec (#(conj (map + (conj (vec (drop 1 %1)) 0) %1) 1) r)))\n;\t\t\tr)))\n\n\n(fn [n]\n\t(nth \n\t\t(iterate #(map + (concat [0] %1) (concat %1 [0])) [1])\n\t\t(dec n)))","user":"55b8c339e4b01b9910ae29b9"},{"code":"(fn nth-pascal [n]\n  (let [pascal-triangle (fn []\n          (let [\n          next (fn [row]\n            (concat [1] (map + row (rest row)) [1]))\n          impl (fn impl [row]\n            (cons row (lazy-seq (impl (next row)))))\n          ]\n          (impl [1])))]\n    (nth (pascal-triangle) (- n 1))))","problem":97,"user":"4e691c79535d8ccf87e9fe97"},{"problem":97,"code":"(fn [l] (letfn [(e [n k] (if (= 0 k)\n                          1\n                          (* (e n (dec k)) (/ (- n k) k))))]\n         (map #(e l %) (range l))))","user":"544e8369e4b0e39780006987"},{"problem":97,"code":"(fn foo\n  ([n] (foo [1] n))\n  ([acc n]\n   (let [x (cons 0 acc)]\n     (if (= n 1) acc\n       (recur (map + x (reverse x)) (dec n))))))","user":"554edb85e4b00713264bd99a"},{"problem":97,"code":"(fn pascals-triangle\n  ([n] (if (= n 1) [1] (pascals-triangle n [1])))\n  ([n col] (if (= (count col) n)\n              col\n              (pascals-triangle n (map #(apply + %) (partition 2 1 (concat [0] col [0])))))))","user":"52f53589e4b05e3f0be25f2c"},{"problem":97,"code":"(fn  [n]\n  (letfn [(take-two-sum [n coll]\n            (let [self (nth coll (dec n))\n                  self+1 (nth coll n)]\n              (+ self self+1)))\n          (pasc [n] (cond \n                  (= 1 n) [1]\n                  (= 2 n) [1 1]\n                  :else\n                  (let [half (loop [m 1\n                                    start (pasc 1)]\n                               (if (= m (quot n 2))\n                                 start\n                                 (recur (inc m)\n                                        (conj start\n                                              (take-two-sum m\n                                                            (pasc (dec n)))))))\n                        r-half (reverse half)]\n                    (cond \n                      (even? n)\n                      (vec  (concat half r-half))\n                      :else\n                      (vec (concat (conj half (take-two-sum\n                                               (quot n 2)\n                                               (pasc (dec n))))\n                                   r-half))))))]\n    (pasc n)))","user":"516d227fe4b06f078fab252d"},{"code":"(fn get-tri [h]\n    (if (= h 1) [1]\n      (let [small-tri (get-tri (dec h))]\n        (flatten [1 (map (partial reduce +) (partition 2 (butlast (rest (interleave small-tri small-tri))))) 1])\n        )))","problem":97,"user":"50d3b03fe4b030b634c368b9"},{"problem":97,"code":"(fn pascal [rows]\n  (first (drop (dec rows) (iterate \n                     (fn [last-row]\n                       (remove (every-pred seq? empty?)\n                               (flatten (vector 1 (map (partial apply +) (partition 2 1 last-row)) 1))))\n                     [1]))))","user":"5146f343e4b04ef915e3731e"},{"problem":97,"code":"#_(fn pascals-triangle [n]\n    (case n\n      1 [1]\n      2 [1 1]\n      (conj\n       (->>\n        (pascals-triangle (dec n))\n        (partition 2 1)\n        (map #(apply + %))\n        (cons 1)\n        vec)\n       1)))\n\n(fn [n]\n    (nth (iterate\n          #(concat [1] (map +' % (rest %)) [1])\n          [1])\n         (dec n)))","user":"55647a31e4b0c656e3ff1808"},{"code":"(fn [x]\n  (letfn [(t [l]\n    (let [n (concat \n                [1]\n                (map (fn [[a b]] (+ a b)) (partition 2 1 l))\n                [1])]\n      (cons n (lazy-seq (t n)))))]\n    (nth (cons [1] (t [])) (- x 1))))","problem":97,"user":"4e7e05a6535db169f9c796fe"},{"problem":97,"code":"(fn [level]\n  (let [transform (fn [s] (map #(apply + %) (partition 2 1 s)))\n        enclose   (fn [s] (conj (into [1] s) 1))\n        pascal    (fn [s] (enclose (transform s)))]\n        (if (<= level 1)\n          [1]\n          (nth (iterate pascal [1 1]) (- level 2)))))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":97,"code":"(fn pascal\n  [row]\n  (->> (map / (reverse (range 1 row)) (range 1 row))\n       (reductions *)\n       (cons 1)\n       (take row)\n       (mapv int)))","user":"595d224de4b066ee0a44b016"},{"code":"(fn [n]\n  (nth (iterate \n         (fn [pre] \n           (vec \n             (concat \n               [1] \n               (map (fn [[f s]] (+ f s)) (partition 2 1 pre)) \n               [1])))\n         [1])\n       (dec n)))","problem":97,"user":"4e8ad1d2535d65386fec2110"},{"problem":97,"code":"(fn p [n]\n  (loop [i 0 last nil]\n    (cond\n     (= i 0) (recur (inc i) [1])\n     (= i n) last\n     :else (recur\n            (inc i)\n            (concat [1] (map #(apply + %1)\n                             (partition 2 1 last))\n                    [1])))))","user":"5188c249e4b0bdff0e072d54"},{"problem":97,"code":"(fn pascaltriangle [n]\n  (if (= n 1) [1]\n      (concat [1] (map #(apply + %) (partition 2 1 (pascaltriangle (- n 1)))) [1])))","user":"562d869be4b0a45d2ff8301f"},{"code":"(fn pasct [level]\n  (if (= level 1)\n    [1]\n    (let [prev-level (pasct (dec level))\n          parsed-items (map #(list %1 %2) prev-level (rest prev-level))\n          result-list (reduce #(conj %1 (+ (first %2) (second %2))) [] parsed-items)] \n      (into (into [1] result-list) [1]))))","problem":97,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n))))  [1])))","problem":97,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [n]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else\n          (reduce \n            (fn[l _]\n              (cons 1 (conj (:r (reduce (fn[x y] {:r (conj (x :r) (+ y (x :p)))\n                        :p y\n                        }) \n                        {:r [] :p (first l)}\n                        (next l)\n              )) 1))\n            )\n            [1 1]\n            (range 1 (dec n))\n          ) \n    )\n)","problem":97,"user":"5017eface4b02f523d7cc5e7"},{"problem":97,"code":"(fn pascal [row]\n  (map (comp last take)\n       (reverse (range 1 (+ 1 row)))\n       (take row (iterate (partial reductions +) (take row (repeat 1))))))","user":"59251947e4b072a2710fce69"},{"problem":97,"code":"(fn ptri [r]\n   (when (pos? r)\n     (cond\n       (= r 1) [1]\n       :default\n       (let [pr (ptri (dec r))]\n         (concat [1] (map + pr (rest pr)) [1])))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":97,"code":"(fn pascals-tri\n  [n]\n  (let [sumit (fn [s] (map #(+ (get s %) (get s (- % 1))) (range 1 (count s))))]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (into [] (concat [1]\n                                 (sumit (pascals-tri (- n 1)))\n                                 [1])))))","user":"59be62d5e4b0a024fb6ae435"},{"problem":97,"code":"(fn  [n]\n  (loop [i 0\n         last-row [1]] \n    (if (<= n (inc i))\n      last-row\n      (let [new-row (loop [j 0\n                           row []]\n                      (cond \n                        (< i (dec j)) row\n                        (zero? j) (recur (inc j) (conj row (first last-row)))\n                        (> j i) (recur (inc j) (conj row (last last-row)))\n                        :else (recur (inc j) (conj row (+ (nth last-row j) (nth last-row (dec j)))))))] \n\n        (recur (inc i) new-row)))))","user":"5794fd7be4b0e215f87e8476"},{"problem":97,"code":"(fn [n]\n  (loop [c  [1]\n         cnt 1]\n    (if (= cnt n)\n      c\n      (recur (concat [1] (map #(apply + %) (partition 2 1 c)) [1])\n             (inc cnt) ))))","user":"56441634e4b0018b46ad8c08"},{"problem":97,"code":"(fn prow\n  [nn]\n  (let [n (dec nn)]\n    (loop [k 1 row [1]]\n      (if (> (count row) n)\n        row\n        (recur (inc k) (conj row (*\n                                   (last row)\n                                   (/\n                                     (- (inc n) k)\n                                     k))))))))","user":"55996253e4b031d6649c9baa"},{"problem":97,"code":"(fn [n]\n   (letfn [(element [k]\n            (if (= 0 k)\n              1\n              (* (/ (- n k) k) (element (dec k)))))]         \n      (map element (range n))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn [x]\n  (letfn [(pas [x y] (if (or (= x 0) (= y 0)) 1 (+ (pas (dec x) y) (pas x (dec y)))))]\n    (map (fn [y] (pas (- (dec x) y) y)) (range x))))","problem":97,"user":"5027b41ee4b01614d1633fee"},{"problem":97,"code":"(fn pascal [a]\n  (if (= a 1)\n    [1]\n    (let [prev (pascal (dec a))]\n      (vec (map + (cons 0 prev) (conj prev 0))))))","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"(fn [row]\n  (loop [n 1, prev [1]]\n   \t(if (= n row)\n   \t\tprev\n     \t(recur (inc n)\n               (cons 1 (map #(apply + %)\n                            (partition-all 2 1 prev)))))))","problem":97,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":97,"code":"(fn pas [n] \n(if (= n 1) [1]\n(let [p (pas (dec n))]\n (concat [1] \n    (map + (butlast p) (rest p)) \n    [1]))))","user":"5659679ae4b068f2fe63dbeb"},{"code":"(fn pascal [n]\n  (if (<= n 1)\n    [1]\n    (map (partial reduce +) (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","problem":97,"user":"516abecae4b081287f204e9f"},{"problem":97,"code":"(fn f [row]\n   (cond\n     (< row 1) nil\n     (= row 1) [1]\n     (= row 2) [1 1]\n     :else (->> (partition 2 1 (f (dec row)))\n                (map (partial apply +))\n                (#(concat [1] % [1])))))","user":"5fef4292e4b05ac5b16ea1d7"},{"code":"(fn x [n]\n  (if (= n 1)\n    [1]\n    (let [l (x (dec n))] \n      (map + (concat [0] l) (concat l [0]))))\n )","problem":97,"user":"525cc137e4b0cb4875a45d46"},{"problem":97,"code":"(fn pascal [n]\n    (cond\n      (= 1 n) [1]\n      (= 2 n) [1 1]\n      :else \n      (->>\n        (pascal (dec n))\n        (partition-all 2 1)\n        (reduce #(conj %1 (reduce + %2)) [])\n        (concat [1])\n      )\n    )\n  )","user":"5bc28638e4b07a9b28b10033"},{"problem":97,"code":"(fn [n]\n  (loop [nn n ll [1]]\n    (if (= nn 1)\n      ll\n      (recur (dec nn) \n             (concat [1] (map + ll (rest ll)) [1])))))","user":"56102f50e4b05f002753df6b"},{"code":"(fn [n] (loop [n (dec n), res [1]]\n           (if (= n 0) res\n               (recur (dec n) \n                      (into [1] (conj (#(if (< (count %2) 2) %\n                                            (recur (conj % (+ (first %2) (second %2))) (next %2))) [] res) 1))\n                      ))))","problem":97,"user":"52161db6e4b0bf4bffd29cb8"},{"code":"#(nth ((fn pt [v] (let [u (apply vector 0 v) w (conj v 0)] (cons v (lazy-seq (pt (vec (map + u w))))))) [1]) (dec %))","problem":97,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(next [row]\n            (concat [1]\n                    (map (partial apply +) (partition 2 1 row))\n                    [1]))]\n    (last (take n (iterate next [1])))))","user":"5b7f2d75e4b047b03b203768"},{"code":"(fn [n]\n  (loop [i 1 r [1]]\n    (if (= i n) r\n      (recur (inc i) (vec (map + (concat [0] r) (concat r [0]))))))\n  )","problem":97,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn foo [r]\n  (loop [n (dec r) d 1 acc [1]]\n    (if (= n 0)\n      acc\n      (recur (dec n) (inc d) (conj acc (* (last acc) (/ n d)))))))","problem":97,"user":"4f26d6d9e4b0d6649770a007"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (loop [n n\n         row []]\n    (cond\n      (zero? n) row\n\n      (or (= (count row) 0)\n          (= (count row) 1)) (recur (dec n) (conj row 1))\n\n      :else\n      (recur\n       (dec n)\n       (vec (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))))))","user":"5d6042f2e4b0c9e5857d5006"},{"code":"(fn pt [n]\n    (if (= 1 n)\n      [1]\n      (let [prev (pt (- n 1))]\n        (cons 1\n         (conj (vec (map + prev (rest prev))) 1))))\n    )","problem":97,"user":"4e7e8684535db169f9c79717"},{"code":"(fn [n]\r\n  (letfn [(next-pascal [coll]\r\n  \t       (if (= (count coll) 1) [1 1]\r\n\t\t\t   (conj (vec (conj\r\n\t\t\t\t       (map #(apply + %)\r\n\t\t\t\t\t    (partition 2 1 coll))\r\n\t\t\t\t       1)) 1)))]\r\n    (loop [i n result [1]]\r\n      (if (= i 1) result\r\n\t  (recur (dec i) (next-pascal result))))))","problem":97,"user":"4ee9d697535d93acb0a66895"},{"problem":97,"code":"(fn [n] (last (take n (iterate (fn [r] (flatten [1 (map #(apply + %) (partition 2 1 r)) 1])) '(1)))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":97,"code":"#(reduce (fn [a _] (concat [1] (map + a (rest a)) [1])) [1] (range 1 %))","user":"577f0b0ee4b0c8d87281f6f3"},{"code":"(fn [x]\n  (loop [cnt 1 r [1]]\n    (if (= cnt x)\n      r\n      (recur (inc cnt) (cons 1 (conj (vec (map + r (rest r))) 1)))\n  )))","problem":97,"user":"4f63777be4b0defedf855fe4"},{"problem":97,"code":"(fn [n]\n  (nth \n  (iterate #(concat [1] (map (fn [[x y]] (+ x y))  (partition 2 1 %)) [1]) [1]) (dec n)))","user":"54a11042e4b09f271ff37c49"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [x (pascal (dec n))\n          y (concat [0] x)\n          z (concat x [0])]\n      (vec (map + y z)))))","user":"52474133e4b05ef8e38e635e"},{"code":"(fn pasc [i]   (letfn [(fac [n] (reduce * (range 1 (inc n))))           (choose [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]     (map #(choose (- i 1) %) (range 0 i))))","problem":97,"user":"5217c26fe4b0a4bccb16cab8"},{"code":"(fn nth-row [n]\n  (loop [res '(1) a (dec n) b 1]\n    (if (zero? a) \n      res\n      (recur (cons (/ (* (first res) a) b) res) (dec a) (inc b)))))","problem":97,"user":"5094057fe4b097f48cc38593"},{"code":"(fn f [n] (if (= 1 n) [1] (concat [1] (map (partial apply +) (partition 2 1 (f (dec n)))) [1])))","problem":97,"user":"4f052eaf535dcb61093f6bf3"},{"code":"(fn pas [n] (if (= 1 n) [1] (let [p (pas (dec n))] (map #(if (or (= % 0) (= % (dec n))) 1 (+ (nth p (dec %)) (nth p %))) (range n)))))","problem":97,"user":"507a9b29e4b08327cd804a6e"},{"problem":97,"code":"(fn\n  [a]\n  (let [fac #(reduce * (range 1 (+ %1 1)))\n        cnr #(/ (fac %1) (* (fac %2) (fac (- %1 %2))))]\n    (map #(cnr (- a 1) %1) (range 0 a))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":97,"code":"(fn pascal\n  [n]\n  (letfn [(sum [xs] (apply + xs))\n          (middle [r] (map sum (partition 2 1 r)))\n          (next-row [r] (conj (into [1] (middle r)) 1))]\n    (loop [i 1\n           row [1]]\n      (if (< i n)\n        (recur (inc i) (next-row row))\n        row))))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn nth-pascal-row\r\n  [n]\r\n  (cond\r\n   (= n 1) [1]\r\n   (= n 2) [1 1]\r\n   true (loop [n n row [1 2 1]]\r\n          (if (= n 3)\r\n            row\r\n            (recur (dec n)\r\n                   (concat [1] (map + (drop-last row) (drop 1 row)) [1]))))))","problem":97,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn pt [n]\n  (if\n   (= 1 n) [1]\n   (concat [1] (map + (pt (dec n)) (rest (pt (dec n)))) [1])))","problem":97,"user":"53973e7be4b0b51d73faaee6"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [row]\n                  (->> [0]\n                       (concat [0] row)\n                       (partition 2 1)\n                       (mapv (partial apply +)))) [1]) (- n 1)))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":97,"code":"(fn [n] ((apply comp (repeat (dec n) #(map + (concat [0] %) (concat % [0])))) [1]))","user":"55253217e4b0882d96d091ce"},{"code":"(fn p [n]\n  (if (= 1 n)\n    [1]\n    (flatten\n     [1\n      (let [x (p (dec n))]\n        (map + x (drop 1 x)))\n      1])))","problem":97,"user":"4e71705e535d5021c1a89649"},{"code":"(fn pt[lvl]\n  (if (= lvl 1)\n    (list 1)\n    (let [s (pt (dec lvl))]\n      (map #(+ (nth s % 0) (nth s (dec %) 0)) (range lvl)))\n    ))","problem":97,"user":"52bdd135e4b07a9af579230a"},{"problem":97,"code":"(fn [n]\n  (map (fn [k]\n         (letfn [(silnia [x]\n                   (if (= 0 x)\n                     1\n                     (reduce * (range 1 (inc x)))))]\n           (/ (silnia (dec n))\n              (* (silnia k) (silnia (- (dec n) k)))))) (range n)))","user":"5489dd4de4b0e286459a11ef"},{"problem":97,"code":"#(if (= 1 %) [1]\n   (if (= 2 %) [1 1]\n      (loop[row [1 1] nextRow [1] ]\n             (if (= 1 (count row)) \n                 (do \n                     (if (= % (+ 1 (count nextRow))) (vec (cons 1 nextRow))\n                         (recur (cons 1 nextRow) [1])))\n                 (recur (rest row) (cons (+ (first row) (nth row 1)) nextRow))))))\n         \n;(fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn [n] (nth (iterate #(map (partial apply +) (partition 2 1 (concat [0] % [0]))) [1]) (dec n)))","problem":97,"user":"51944aaae4b0142f60b4aedc"},{"problem":97,"code":"(fn pascal-nth-row [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else \n          (concat '(1)  (vec (map #(+ (first %) (second %))\n                                  (partition 2 1 (pascal-nth-row (dec n)) ))) '(1))\n        )\n  )","user":"598085e6e4b021a7a535fdd3"},{"problem":97,"code":"#(letfn\n\t[(f [n] (reduce * (range 1 (inc n))))\n\t (nCr [n r] (quot\n                 (f n)\n                 (* (f r) (f (- n r)))))]\n\t(for [r (range %)]\n\t\t(nCr (dec %) r)))","user":"5472d919e4b094393f72dd7b"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n      (let [p (pascal (dec n))]\n        (mapv + (cons 0 p) (conj p 0)))))","user":"5471f2fbe4b094393f72dd70"},{"problem":97,"code":"(fn pascal [n]\n    (let [sum-row (fn [xs]\n                    (->> xs\n                        (#(concat [0] % [0]))\n                        (partition 2 1)\n                         (map #(apply + %))))]\n\n\n      (if (< n 2)\n        [1]\n        (sum-row (pascal (dec n))))))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (loop [r n\n         c 1\n         coll [1]]\n    (if (= r c)\n        coll\n        (recur r \n               (inc c) \n               (conj coll (* (last coll) (/ (- r c) c))))))))","problem":97,"user":"505bd09fe4b032b709c81373"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [n-1 (pascal (- n 1))]\n       (mapv + (conj n-1 0) (concat [0] n-1)))))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn rec [n]\n  (if (= n 1)\n    [1]\n    (let [lst-n-1 (rec (dec n))]\n      (concat [1]\n              (map + lst-n-1 (rest lst-n-1))\n              [1]))))","problem":97,"user":"52cc09c1e4b07d0d72b27356"},{"code":"#(nth (iterate (fn [x] (map (fn [a] (reduce + a)) (concat [[(first x)]] (partition 2 1 x) [[(last x)]]))) [1]) (dec %1))","problem":97,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":97,"code":"(fn p [n]\n  (loop [r [1] acc n]\n    (if (= 1 acc)\n      r\n      (recur (mapv +' (cons 0 r) (conj r 0)) (dec acc)))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":97,"code":"(fn pascal\n  [n]\n  (letfn [(addadj\n           [coll]\n           (loop [[fst snd :as all] coll\n                  res []]\n             (if (< (count all) 2) (concat res [1])\n                 (recur (rest all)\n                        (cons (+ fst snd) res)))))]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (cons 1 (addadj (pascal (- n 1)))))))","user":"5f5e166ce4b02876ed9fcfed"},{"code":"(fn pascal [n]\n (loop [r [1] i 1]\n   (if (= i n) \n       r\n       (recur (map + (cons 0 r) (reverse (cons 0 r)) )  (inc i))\n   )\n )\n)","problem":97,"user":"518aec06e4b06da86c1973c2"},{"problem":97,"code":"(fn me\n\t[n]\n\n\t(cond\n\t\t(= n 1) [1]\n\n\t\t(= n 2) [1 1]\n\n\t\t:else \n\t\t\t\t(let [me2 (fn me3 [myseq]\n\t\t\t\t\t\t\t\t(if (empty? (rest myseq))\n\n\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t\t(concat (vector (vector (first myseq) (second myseq)) ) (lazy-seq (me3 (rest myseq))))\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\n\t\t\t\t\t  res1 (me2 (me (dec n)))\n\n\t\t\t\t\t  res2 (concat (list 1) (map #(+ (first %) (second %)) res1) (list 1))\n\t\t\t\t\t]\n\n\t\t\t\t\t(into [] res2)\n\t\t\t\t\t)\n\t\t))","user":"55897fe2e4b059ccff29b205"},{"problem":97,"code":"(fn do-it\n   ([rows] (do-it rows [[1]]))\n   ([rows out]\n   \n   (letfn [\n           (top-and-tail [coll] (vec (concat [1] coll [1])))\n           (sum-numbers-of\n            [[a b :as coll] out]\n            (if (nil? b) out (sum-numbers-of (rest coll) (conj out (+ a b)))))\n           ]\n     (if (= rows (count out))\n       (nth out (dec rows))\n       (do-it rows (conj out (top-and-tail (sum-numbers-of (last out) []))))\n       )\n     )\n   ))","user":"6024544be4b0d5df2af2221f"},{"code":"(fn pascal [n]\n  (letfn [(next-row [row]\n            (concat [1]\n                    (map + row (rest row))\n                    [1]))]\n    (-> (iterate next-row [1])\n        (nth (dec n)))))","problem":97,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":97,"code":"(fn pascal [n-row]\n  (letfn [(build-triangle ([] (build-triangle [1]))\n            ([n]\n             (cons n\n                   (lazy-seq\n                    (build-triangle\n                     (concat\n                      [1]\n                      (map #(+ (nth n (inc %)) (nth n %))\n                           (range (dec (count n))))\n                      [1]))))))]\n    (vec (nth (build-triangle) (dec n-row)))))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn myfn [n1]\n\t(loop [x 1 result [1]]\n    \t(if (= x n1)\n        \tresult\n        \t(recur (inc x) \n            \t(loop [y 1 res [1]]\n                \t(if (= y x) (conj res 1)\n                    \t(recur (inc y)\n                        \t(conj res (+ (nth result (dec y)) (nth result y))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)","problem":97,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn [n]\n  (letfn\n    [(step [prev]\n       (let [A (conj prev 0),\n             B (cons 0 prev)]\n         (into [] (map + A B))))]\n\n    (loop [m 1, result [1]]\n      (if (= m n)\n        result\n        (recur (inc m) (step result))))))","problem":97,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn mason [x]\n  (if (= x 1)\n  '(1)\n  (loop [x x\n         i 2\n         coll '(1 1)]\n    (if (= i x) \n      coll\n      (recur x (inc i) (flatten [1 (map + coll (rest coll)) 1]))\n      )\n    )\n  ))","problem":97,"user":"520cb8c4e4b0b022ef140c9a"},{"problem":97,"code":"(comp (partial nth (iterate #(map + (concat % [0]) (cons 0 %)) [1])) dec)","user":"5960a1a6e4b066ee0a44b08e"},{"problem":97,"code":"(fn pascal [x]\n  (loop [n 1, result [1]]\n    (if (= n x) \n      result\n      (recur (inc n) (concat [1] (map #(reduce + %) (partition 2 1 result)) [1])))))","user":"559bdf16e4b066d22e731f5a"},{"problem":97,"code":"(fn [n]\n    (loop [i n\n           prev [1]\n           ]\n      (if (= i 1)\n        prev\n        (->>\n          (count prev)\n          (inc)\n          (range)\n          (map #(+ (nth prev (dec %) 0) (nth prev % 0)))\n          (recur (dec i)))\n        )\n      )\n    )","user":"53c3397be4b00fb29b221279"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (conj (->> (dec n)\n               (pascal)\n               (partition 2 1)\n               (reduce #(conj %1 (apply + %2)) [1]))\n          1)))","user":"5eb1c786e4b00a66d4a95201"},{"problem":97,"code":"(fn [n]\n  (let [nr (map vector (repeat (dec n)) (range 1 n))]\n    (reductions #(int (* %1 (/ (- (+ (first %2) 1) (second %2)) (second %2)))) 1 nr)))","user":"51456858e4b0e88796073408"},{"problem":97,"code":"(fn pascal-triangle-row-2 [n]\n     (letfn [(pascal-triangle-row [pre-row row-index]\n                                  (reduce (fn [ret index]\n                                            (conj ret (+ (get pre-row (dec index) 0)\n                                                         (get pre-row index     0))))\n                                          []\n                                          (range row-index)))]\n       (condp = n\n         1 [1]\n         (pascal-triangle-row (pascal-triangle-row-2 (dec n)) n))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [prev]\n                  (list* 1 (map #(apply + %) (partition-all 2 1 prev))))\n                '(1))\n       (dec n)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":97,"code":"(fn [n]\n  (let\n    [next-row (fn next-row [r]\n                (loop [row r \n                       new-row [1]]\n                  (if (empty? row)\n                    new-row\n                    (recur (rest row) (conj new-row (apply + (first (partition-all 2 row))))))))]\n    (loop [n n\n           row [1]]\n      (if (= n 1)\n        row\n        (recur (dec n) (next-row row))))))","user":"5e8f87c7e4b0cb0169546342"},{"problem":97,"code":"(fn pascal [n] (let [k (fn [a] (concat [1] (map (fn [[a b]](+ a b)) (partition 2 1 a)) [1]))\n                     p (iterate k [1])]\n                 (nth p (dec n))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":97,"code":"(fn triangle [n]\n    (loop [res [1]\n            cnt 1]\n            (if (= n cnt)\n                res\n                (recur \n                    (let [zipped (map vector res (rest res))]\n                        (concat [1] (map #(+ (first %) (second %)) zipped) [1]))\n                    (inc cnt)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(concat [1]\n           (for [[x y] (partition 2 1 %)] (+ x y))\n           [1]) (list 1)) (dec n)))","user":"598229d6e4b021a7a535fdfb"},{"problem":97,"code":"(fn pascal's-triangle [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (into [] (map (fn [[elem1 elem2]]\n                    (+ elem1 elem2)) (partition 2 1 (conj (into [0] (pascal's-triangle (dec n))) 0))))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn [n]\n  (nth (iterate\n    (fn [v]\n      (mapv #(+' %1 %2) (concat [0] v) (concat v [0])))\n    [1]) (dec n)))","problem":97,"user":"53415755e4b00652c8746ecd"},{"problem":97,"code":"(fn [n]\n  (loop [v [1 1]\n         nn n]\n    (cond\n      (= nn 1) [1]\n      (= nn 2) v\n      :else (recur (concat [1] (vec (map #(apply + %) (partition 2 1 v))) [1]) (dec nn)))))","user":"57fa6f2ee4b0d3187e900962"},{"problem":97,"code":"(comp (fn [n] (let [bio (fn [a b]\n                    (loop [a a\n                           b b\n                           res 1]\n                      (cond \n                       (= b 0) res\n                       :else (recur (dec a) (dec b) (/ (* res a) b) ))))]\n          (map #(int (bio n %)) (range (inc n))))) dec)","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn [n] \n  (if (= 1 n) [1]\n  (nth (iterate \n    (fn [x] \n      (concat \n        [1] \n        (map #(reduce + %) (partition 2 1 x)) \n        [1])) [1]) (- n 1))))","problem":97,"user":"4e6def42535d5021c1a895f7"},{"problem":97,"code":"(fn p [r]\n  (if (= 1 r)\n    [1]\n    (-> \n      (->> (p (dec r))\n           (partition 2 1)\n           (map (partial reduce +))\n           (into [1]))\n      (conj 1))))","user":"50ebd63ce4b04edc3377703c"},{"code":"(fn [n]  (( fn pasc [n p] (if (= n 0) p  (pasc (dec n) \n(loop  [a p prv 0 n [] ]\n   (if (empty? a) (conj n 1)\n       (recur (rest a) (first a) (conj n (+ (first a) prv))\n       )))))) n []))","problem":97,"user":"50ef3e5de4b0a78662fa2652"},{"problem":97,"code":"(fn [r]\n  (nth (iterate\n        #(vec (map + (conj % 0) (cons 0 %)))\n        [1])\n       (dec r)))","user":"52b89d55e4b07a9af57922b3"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= n 1)\n    [1]\n    (loop [result [] i 0 j (dec n) acc 1]\n      (if (< j 0)\n        result\n        (recur (conj result acc) (inc i) (dec j) (/ (* acc j) (inc i)))))))","user":"583166c1e4b051871117c025"},{"code":"(fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec n)))","problem":97,"user":"4e79a143535db169f9c796a2"},{"problem":97,"code":"(fn [n] \n  (letfn [(row-after [row]\n                     (concat [1]\n                             (map (partial reduce +) (partition 2 1 row))\n                             [1]))]\n  (nth (iterate row-after [1]) (dec n))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":97,"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (loop [i 2\n           x [1 1]]\n      (if (= i n) x\n        (recur (inc i) (concat [1] (map + (drop 1 x) (drop-last 1 x)) [1]))))))","user":"57aa4752e4b0b8559636fc6a"},{"code":"#(last \n  (take % \n    (iterate \n      (fn [row] \n        (conj (->> \n                (rest row) \n                (interleave row) \n                (partition 2) \n                (map (partial apply +)) \n                (cons 1) \n                vec) \n          1)) \n      [1])))","problem":97,"user":"4f01ff83535dcb61093f6a3a"},{"problem":97,"code":"(fn pascal \n    ([n] (pascal n [1]))\n    ([n acc]\n      (if (= n 1)\n        acc\n        (recur \n          (dec n)\n          (concat [1] \n                  (reduce (fn [a [b c]] (conj a (+ b c))) [] (partition 2 1 acc))\n                  [1])))))","user":"52bf0116e4b07a9af5792328"},{"code":"(fn [x]\n  (let [numer (fn [n k] (apply * (take-last k (range 1 n))))\n        denom (fn [n k] (apply * (take k      (range 1 n))))\n        n-choose-k (fn [n k] (if (or (= k 0) (= n 0)) 1 (/ (numer n k) (denom n k))))]\n    (map #(n-choose-k x %) (range x))\n    )\n  )","problem":97,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":97,"code":"(fn [p_row]\n  (loop [res [1]\n         pos 1\n         row (dec p_row)]\n    (if (= pos p_row)\n      res\n      (let [m (/ (+ row 1 (- pos)) pos)]\n      \t(recur (conj res (* m (last res))) (inc pos) row)))))","user":"5d64013ce4b0c9e5857d502d"},{"problem":97,"code":"#(letfn [(next-pas [nums]\n           (conj (into [1] (map (fn [[a b]] (+ a b)) (partition 2 1 nums))) 1))]\n   (nth (iterate next-pas [1]) (dec %)))","user":"5a546344e4b05d388ecb6c27"},{"problem":97,"code":"(fn [n] (last (take n (iterate (fn [x] (map + `(0 ~@x) `(~@x 0)))  [1]))))","user":"5addadfce4b0837691e92c13"},{"code":"(fn row [n]\r\n  (if (= 1 n) [1]\r\n      (let [prev (row (dec n))\r\n            mid (map (fn [n] (+ (get prev (dec n))\r\n                                (get prev n)))\r\n                     (range 1 (dec n)))]\r\n        (vec (concat [1] mid [1])))))","problem":97,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn nth-pascal [n]\n  (loop [prev-row [1]\n         c 1]\n    (if (= c n) prev-row\n        (let [row (concat (list (first prev-row))\n                          (map + prev-row (rest prev-row))\n                          (list (last prev-row)))]\n          (recur row (inc c))))))","problem":97,"user":"523b82efe4b07becd5be21f0"},{"problem":97,"code":"(fn __\n  ([n] (__ n [1]))\n  ([n acc]\n   (if (= n 1)\n     acc\n     (recur (dec n)\n            (mapv + (cons 0 acc) (conj acc 0))))))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":97,"code":"(fn[n] (loop [cnt 1\n               row '(1)]\n            (if (= cnt n)\n                row\n                (recur (inc cnt)  (map #(reduce + %) (partition 2 1 (concat (cons 0 row) '(0)))))\n                )))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":97,"code":"(fn [n]\n  (let [lazy-line (fn lazy-line [xs]\n                    (let [line (->> xs\n                                (partition 2 1)\n                                (map #(reduce + %))\n                                (vec))\n                          done (vec (cons 1 (conj line 1)))]\n                      (lazy-seq (cons xs (lazy-line done)))))]\n  (last (take n (lazy-line [1])))))","user":"5ba15075e4b0a20761a2339e"},{"problem":97,"code":"(fn pasc-tri [n]\n (\n  if (= 1 n)\n    [1]\n    (\n      let\n       [slast (pasc-tri (dec n))\n        sa (concat slast [0])\n        sb (concat [0] slast)\n       ]\n      (vec (map + sa sb))\n    )\n ))","user":"54c8eb61e4b045293a27f658"},{"problem":97,"code":"(fn [r]\n  (loop [row [1]\n         idx 1]\n    (if (= idx r)\n      row\n      (recur\n       (conj (into [1] (map (fn [[x y]] (+ x y)) (partition 2 1 row))) 1)\n       (inc idx)))))","user":"5338387de4b0e30313ee6c91"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (< n 3)\n    (vec (repeat n 1))\n    (concat\n     [1]\n     (map #(reduce + %) (partition 2 1 (pascal-triangle (dec n))))\n     [1])))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":97,"code":"(fn pascal [n] (if (= n 1) \n                 [1] \n                 (let [pl (pascal (dec n))] \n                   (conj (reduce-kv (fn [l k v] \n                                (conj l (+ v (if (= k 0) \n                                               0 \n                                               (get pl (dec k)))))) \n                              [] pl) 1))))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn [lineNo] (last \n    (take lineNo\n          (iterate \n            (fn getNextLine [line] \n              (conj \n                (vec \n                  (conj (map #(+ %1 %2) line (rest line)) 1)\n                  )\n                1)\n              )\n            [1]\n            )\n          )\n    )\n  )","problem":97,"user":"524c7fcfe4b0752c4cb68cbd"},{"code":"(fn [n] (reduce #(conj %1 (* (peek %1) (/ (- n %2) %2))) [1] (range 1 n)))","problem":97,"user":"4dbdab4e535d020aff1edf49"},{"problem":97,"code":"(fn find-nth-row-pascals [n]\n  (loop [m (dec n)\n         ls [1]\n         k 0\n         ]\n    (if (= m 0)\n      ls\n      (recur (dec m)\n             (conj ls (quot (* (nth ls k) (- (dec n) k)) (+ k 1))) (inc k))\n      )\n    ))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [s] (concat [1] (map (partial apply +) (partition 2 1 s)) [1])) [1]) (dec n)))","user":"4e6fa38b535d5021c1a89622"},{"problem":97,"code":"(fn [n] \n  (nth (iterate (fn [previous] \n                  (flatten \n                   (vector 1 (map #(apply + %) (partition 2 1 previous))\n                           1))) [1]) (- n 1)))","user":"563536f8e4b0bfe05bf117c5"},{"problem":97,"code":"(fn pascal-row [i] \n  (if (= 1 i)  \n    [1]\n    (let [x (pascal-row (dec i))\n          a (conj x 0)\n          b (cons 0 x)]\n      (vec (map + a b)))))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [k] (nth (iterate #(map +' (concat [0] %) (concat % [0])) [1]) (dec k)))","problem":97,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":97,"code":"(memoize\n (fn pascal-triangle [n]\n   (if (= n 1)\n     [1]\n     (let [prev (pascal-triangle (dec n))]\n       (concat [1] (map + prev (rest prev)) [1])))))","user":"5393185ae4b0b51d73faaeb7"},{"problem":97,"code":"(fn my-func [row]\n  (let [n (- row 1)]\n  (letfn [(fact [x]\n            (reduce * 1 (range 1 (+ x 1))))\n          (choose [k] (/ (fact n) (* (fact k) (fact (- n k))) ))]\n  (map choose (range row)))))","user":"552456e3e4b0882d96d091c2"},{"code":"(fn [n]\n    (reduce (fn [v j] (vec (map #(+ %1 %2) (conj v 0) (concat [0] v)))) [1] (range (dec n))))","problem":97,"user":"51f59607e4b0abb92f97f9d5"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   :else   (let [prev (pascal (dec n))]\n             (loop [[x y & remaining] prev acc [1]]\n               (if (empty? remaining)\n                 (conj (conj acc (+ x y)) 1)\n                 (recur (conj remaining y) (conj acc (+ x y))))))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-pascal [coll]\n            (concat [1]\n                    (map (partial apply +) (partition 2 1 coll))\n                    [1]))]\n    (nth (iterate next-pascal [1]) (dec n))))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn f\n  [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (map (partial apply +) (partition 2 1 (f (dec n)))) [1])))","problem":97,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn f [n]                                                                                                                                                                          \n  (reduce                                                                                                                                                                          \n   (fn [a,e]                                                                                                                                                                       \n     (map                                                                                                                                                                          \n      (fn [i]                                                                                                                                                                      \n        (if                                                                                                                                                                        \n            (not (< 0 i (dec e)))                                                                                                                                                  \n          1                                                                                                                                                                        \n          (+                                                                                                                                                                       \n           (nth a (dec i))                                                                                                                                                         \n           (nth a i))))                                                                                                                                                            \n      (range 0 e)))                                                                                                                                                                \n   '()                                                                                                                                                                             \n   (range 1 (inc n))))","problem":97,"user":"4e67b0aa535d8ccf87e9fe80"},{"code":"(fn pascal-row [n]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (concat\n                  [1] \n                  (let [prev-row (pascal-row (- n 1))]\n                    (reduce #(concat (butlast %1)\n                                     [(+ (last %1) %2)]\n                                     [%2])\n                      [(first prev-row)]\n                      (rest prev-row)))\n                  )))","problem":97,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn pascal [x]\n  (if (= x 1)\n    [1]\n    (vec (map + (cons 0 (pascal (dec x))) (conj (pascal (dec x)) 0)))))","problem":97,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [n] \n   ( loop [pt [1]\n           x 1 \n           y n] \n     (if (= y 1)\n      pt\n      (recur (conj pt (/ ( * (last pt) (- y 1))  x)) (inc x) (- y 1))\n     ))\n )","problem":97,"user":"4f148418535d64f60314643a"},{"code":"(fn foo [n]\n  (let [n (dec n)\n        f #(apply * (range 1 (inc %)))\n        x (f n)\n        b #(quot x (* (f %) (f (- n %))))]\n    (map (comp b) (range (inc n)))))","problem":97,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn tri [x]\n    (if (= 1 x) [1]\n      (let [prev (tri (dec x))]\n        (map + (concat prev [0])\n               (concat [0] prev)))))","problem":97,"user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn t [n]\n  (let [ PT (fn pt [l c] \n      \t \t(if (or (= c 0)\n    \t         \t\t(= l c)) \n        \t\t\t1\n        \t\t\t(+ (pt (dec l) c)\n           \t\t\t   (pt (dec l) (dec c)))))]\n\t(map-indexed (fn [i e] \n                   (PT (dec n) \n                        i)) \n                 (range 0 n))))","problem":97,"user":"50576483e4b001218172198b"},{"code":"(fn problem-97 [u]\n  (let [n (dec u)]\n  (cond (= n 0) [1]\n        (= n 1) [1 1]\n        (= n 2) [1 2 1]\n        :else\n        (let [n+1 (inc n)\n              r  (range 1 (inc (quot n 2)))]\n         (letfn [(! [m] (reduce * (range 1 (inc m))))\n                 (binom [k] (/\n                             (reduce * (range (- n+1 k) n+1))\n                             (! k)))]\n           (let [half (cons 1 (map binom r))]\n             (concat half\n                     (reverse ((if (even? n) butlast identity) half)))))))))","problem":97,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [nums] (vec (map + (cons 0 nums) (conj nums 0))))\n      [1])\n    (dec n)))","problem":97,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":97,"code":"(fn pascal-row [m]\n                     (loop [i 1 c 1 row []]\n                       (if (= (+ m 1) i)\n                         row\n                         (recur (inc i) (quot (* (- m i) c) i) (conj row c)))))","user":"55151417e4b055c2f668d4da"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [coll]\n            (concat\n               [1]\n               (map (fn [[a b]] (+ a b))\n                 (partition 2 1 coll))\n              [1]))\n          (iter [m prev]\n             (if (= m n)\n               (next-row prev)\n               (iter (inc m) (next-row prev))))]\n    (if (= n 1)\n      [1]\n      (iter 2 [1]))))","user":"51427a8be4b0b50abeb46b37"},{"code":"(fn prow [n]\n  (letfn [(pval [r, c]\n            (if (or (<= r 1) (= r c) (zero? c))\n              1\n              (+\n               (pval (dec r) (dec c))\n               (pval (dec r) c))))]\n    (map #(pval (dec n) %) (range n))))","problem":97,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate \n    #(concat '(1) (map (partial apply +) (partition 2 1 %)) '(1))\n             [1]) (dec n)))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn pascal[n]\r\n   (let[f (fn[m]\r\n            (let[k (+ 1 m),\r\n                 kn (- n m)]\r\n              (/ (apply * (range k n))  (apply * (range 1 kn) ) ) \r\n            )\r\n          )]\r\n     (map  f (range 0  n)   )\r\n     )\r\n  \r\n)","problem":97,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [n] \n     (let [fact (fn [n] (reduce * (range 1 (inc n))))\n           nCr (fn [n r] (/ (fact n) (* (fact (- n r)) (fact r))))]\n       (vec (map #(nCr (dec n) %) (range  n)))))","problem":97,"user":"4eb44d78535d7eef30807360"},{"code":"(fn[r]\n  (if(= 1 r) \n    [1]\n    (reduce \n      #(conj %1 (* (last %1) (/ (- r %2) %2)))\n      [1]\n      (range 1 r))))","problem":97,"user":"4eca40cd535d6d7199dd3703"},{"problem":97,"code":"(fn pascal\n  [n]\n  (let [row (fn [former-row] \n              (vec (concat [1] (map #(apply + %) (partition 2 1 former-row)) [1])))]\n    (case n \n      1 [1]\n      2 [1 1]\n      (last (take (dec n) (iterate row [1 1]))))))","user":"56e2dbf4e4b03a7c14b85a3b"},{"code":"(fn this [x]\n  (if (= 1 x)\n     [1]\n     (conj\n      (vec (cons 1 (map\n                    (partial apply +)\n                             (partition 2 1\n                                  (this (dec x))))))\n           1)))","problem":97,"user":"523d02b0e4b0dbf0c3017289"},{"code":"(fn [n] (nth (iterate #(map + (cons 0 %) (concat % [0])) [1])\n          (dec n)))","problem":97,"user":"4e8612f8535db62dc21a62f2"},{"code":"(fn f [n]\n  (if (= 1 n) [1]\n      (let [t (f (dec n))]\n        (concat [1] (map + t (rest t)) [1]))))","problem":97,"user":"4ee9ddb8535d93acb0a66896"},{"problem":97,"code":"(fn [row] \n  (let [n (+ row 1)]\n    (concat []\n            (map #(/ (reduce * (range 1 row))\n                     (* (reduce * (range 1 %)) (reduce * (range 1 (- n %)))))\n                 (range 1 n)))))","user":"536673a8e4b0243289761e76"},{"code":"(fn [r]\n (loop [c 1 row [1]]\n   (if (< c r)\n     (recur (inc c) (conj row (long (* (last row) (/ (- r c) c)))))\n     row)))","problem":97,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":97,"code":"(fn row [n]\n  (if (= n 1)\n    [1]\n    (let [prev (row (dec n))]\n      (mapv + (cons 0 prev) (conj prev 0)))))","user":"5136f659e4b04059df19f2fd"},{"problem":97,"code":"(fn pascal[n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (concat (cons 1 (map (fn[[a b]] (+ a b))(partition 2 1 (pascal (dec n))))) [1]))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate \n                 (fn [s] (flatten \n                          [1 (map #(reduce + %) (partition 2 1 s)) 1])\n                   ) [1]))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    :default (vec (map #(+ (first %) (last %)) (partition 2 1 (cons 0 (conj (pascal (- n 1)) 0)))))))","user":"5756f324e4b02ea1147992e8"},{"problem":97,"code":"(fn [n] (reduce (fn [done next] (reduce #(conj %1 (+ (get done %2) (get done (inc %2) 0))) [1] (range (count done)))) [1] (range (dec n))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [row]\n  (letfn [(pn [r c]\n             (if (or (= c 1) (= c r))\n               1\n               (+ (pn (dec r) (dec c)) (pn (dec r) c))))]\n    (mapv #(pn row %) (range 1 (inc row)))))","problem":97,"user":"51d19c24e4b0cfcf579466c3"},{"problem":97,"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (let [prev (f (dec n))]\n      (map #(apply + %) (partition 2 1 (concat [0] prev [0]))))))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn [x]\n  (last (take x (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","problem":97,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(concat [1] (map + % (drop 1 %)) [1]) [1]) (dec n)))","user":"559454f2e4b0c79f6e1db952"},{"problem":97,"code":"(fn pascal[n] \n \t(loop [s [1] n n] \n      (if (= n 1) \n        s \n        (recur (conj (into [1] (map + s (rest s))) 1) (- n 1)))))","user":"5457e5f1e4b01be26fd74613"},{"problem":97,"code":"(fn [nn]\n  ((fn pascal [n l]\n     (if (>= n nn) \n       l\n       (let [ line (reduce (fn [[l ple] v]  [(conj l (+ ple v)) v]) [[] (first l)] (rest l))]\n         (pascal (inc n) (into [] (cons 1 (conj (first line) 1))))))) \n   1 [1]))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= 1 n)\n    [1]\n    (let [r-above (pascal-triangle (dec n))]\n      (concat  [1] (map + r-above (rest r-above)) [1]))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":97,"code":"(fn [j]\n  (loop [n (dec j)\n         r '(1)]\n    (if (pos? n)\n      (recur (dec n) (map #(apply + %) (partition 2 1 [0] (cons 0 r))))\n      r)))","user":"5bb25684e4b0a20761a2350d"},{"problem":97,"code":"(fn pascal [i]\n\t(nth (iterate #(mapv + (conj % 0) (cons 0 %)) [1]) (dec i)))","user":"5416b4a2e4b01498b1a71a01"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [x]\n      (cond\n        (empty? x)\n        [1]\n        ;;\n        (= [1] x)\n        [1 1]\n        ;;\n        :else\n        ((fn derive-row[[a b :as xs]]\n           (cond\n             (empty? xs)\n             xs\n             ;;\n             (and (= 1 a) b)\n             (concat [1 (+ a b)] (derive-row (rest xs)))\n             ;;\n             :else\n             (cons (+ a (or b 0))\n                   (derive-row (rest xs)))))\n         x)))\n    [])\n   n))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":97,"code":"(fn [n]\n  (if (= 1 n)\n    [1]\n  (let [fact #(if (zero? %) 1 (reduce * (range 1 (inc %))))]\n    (vec (map (fn [k] (/ (fact (dec n)) (* (fact k) (fact (- (dec n) k))))) (range 0 n)))\n    )\n  ))","user":"57cd7498e4b0c746388ab897"},{"problem":97,"code":"(fn pascal [ n ]\n   (if (= n 1) \n     [1]\n     (let [l (pascal (dec n))]\n\t(map + (concat [0] l) (concat l [0])))\n  ))","user":"57887de2e4b0ebec4cfb751c"},{"problem":97,"code":"#(nth\n   (iterate\n     (fn [x] (conj (into [1] (map + x (rest x))) 1))\n     [1])\n   (dec %))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (concat [1]\n            (map #(reduce + %) (partition 2 1 (pascals-triangle (dec n))))\n            [1])))","user":"553b0d95e4b09218d5f44fff"},{"code":"(fn [x]\n    (cond\n        (= x 0) [] \n        (= x 1) [1]\n        (> x 1) \n        \n        (first (reverse\n            (take (dec x)\n            (iterate\n\n            (fn [a]\n            (conj\n            (into [] (map \n                (fn [x] \n                    (cond\n                        (= (first x) 0) 1\n                        (> (first x) 0) (+ (second x) (nth a (dec (first x)))) \n                    )\n                )\n                (map vector (range (count a)) a)\n            ))\n            1)\n            )\n\n            [1 1]\n            )))\n            \n            \n        )\n    )\n)","problem":97,"user":"4e78dc98535db95036265724"},{"problem":97,"code":"(fn [r]\n  (reduce\n   (fn [p _]\n      (->> (map #(apply + %) (partition 2 1 p))\n           (#(concat [1] % [1]))))\n  [1]\n  (range 1 r)))","user":"511688d5e4b0b3e208dba05a"},{"code":"(fn [n] (letfn [(c [n k] (cond (= k 0) 1\n                               (= k n) 1\n                               :else (+ (c (dec n) (dec k)) (c (dec n) k))))]\n                  (map #(c (dec n) %) (range 0 n))))","problem":97,"user":"4fa6a491e4b081705acca1bc"},{"code":"; this looks horrible. Yuk yuk yuk.\n\n(fn [num]\n    (let [pascal-row (fn [row]\n        (loop [curr 0 p 0 r row res []]\n            (if (= curr (count row))\n                (conj res 1)            \n                (recur (inc curr) (first r) (rest r) (conj res (+ p (first r))))\n            )\n        ))]\n        (loop [curr 0 res []]\n            (if (= curr num)\n                res\n                (recur (inc curr) (pascal-row res))\n            )\n        )\n    )\n)","problem":97,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn p [r] \n  (cond \n   (= r 1) [1]\n   :else (let [p1 (p (dec r))] \n           (->> (map #(+ (p1 %) (p1 (inc %))) (range (- r 2))) (cons 1) vec (#(conj % 1)) ))))","problem":97,"user":"523b1988e4b02f719975bdbc"},{"problem":97,"code":"(fn [n] (nth (iterate \n #(reduce \n   (fn [r [a b]] (conj r (+ a b)))\n   [] (partition 2 1 (flatten [0 % 0])))\n [1]) (dec n)))","user":"53572176e4b04ce2eb3ed276"},{"code":"#(nth (iterate (fn n[r] (let [prev (concat [0] r [0]) next (for [i (range 0 (dec (count prev)))] (+ (nth prev i) (nth prev (inc i))))] next)) [1]) (dec %))","problem":97,"user":"5093ca51e4b097f48cc38585"},{"code":"#(map (fn [x] \n  (let [f (fn [n] (reduce * (range 1 (inc n))))]\n     (/ (f (dec %)) (* (f x) (f (- (dec %) x)))))) (range 0 %))","problem":97,"user":"4f067029535dcb61093f6c12"},{"code":"(fn p [a]\n  (if (= a 1) [1]\n  (if (= a 2) [1 1]\n  \n    (concat\n      [1] \n      (map (fn [[x y]] (+ x y)) (partition 2 1 (p (- a 1))))\n      [1])\n  \n  ))\n)","problem":97,"user":"4f1595da535d64f603146444"},{"code":"(fn [x] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec x)))","problem":97,"user":"4fb1325de4b081705acca276"},{"code":"(fn row [n]\r\n  (reduce #(conj %1 (* (peek %1) (/ (- n %2) %2))) [1] (range 1 n)))","problem":97,"user":"4df407c3535d08e6dec9fe2e"},{"problem":97,"code":"(fn bc [n]\n  (map (fn [k]\n         (/ (apply * (range 1 n)) (* (apply * (range 1 (inc k))) (apply * (range 1 (inc (- n k 1))))))\n         ) (range n))\n  )","user":"53ae16e2e4b047364c044472"},{"code":"(fn p [n]\n    (last \n      (take n \n        (iterate \n           #(concat \n              [1] \n              (map (partial apply +) (partition 2 1 %))\n              [1]) \n          [1]))))","problem":97,"user":"4e6f578c535d5021c1a8961b"},{"problem":97,"code":"#(first (drop (dec %) (take % \n      ((fn pasco [v] \n       (cons v\n         (lazy-seq (pasco (cons (first v) (conj (vec (map +' v (rest v))) (last v)) ))))) [1]))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [n] \n   (case n\n    1 [1]\n    (loop [coll [1 1] n n]\n      (if (<= n 2)\n        coll\n        (recur (concat [1] (map #(+ (first %1) (second %1)) (partition 2 1 coll)) [1]) (dec n))))))","problem":97,"user":"50a5f72fe4b0aa96157e2611"},{"problem":97,"code":"(fn [n]\n  (letfn [(once [line] \n                (concat [1] (map #(apply + %) (partition 2 1 line)) [1]))]\n    (vec (nth (iterate once [1]) (dec n)))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn pasc-row [row]\n  ((fn pasc [row pos]\n      (let \n          [fact (fn [num]\n                  (apply * (range 1 (inc num))))]\n        (if (> pos row) '()\n            (conj\n                   (pasc row (inc pos))\n                   (/ (fact row) (* (fact pos) (fact (- row pos))))\n                   )))\n      )\n    (dec row) 0)\n  )","problem":97,"user":"511d4a52e4b022853b0e07a1"},{"problem":97,"code":"(fn pascalTriangle\n  ([desired-row] (pascalTriangle desired-row [1] 1)) \n  ([desired-row current-row row-number]\n   (if (= desired-row row-number)\n     (vec current-row)\n     (let [s0 (cons 0 current-row)\n           s1 (rest (cycle s0))]\n       (recur desired-row (map + s0 s1) (inc row-number))))))","user":"598e7998e4b02b9968b84d34"},{"code":"(fn pt [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else\n        (loop [xs (pt (- n 1)) result [1]]\n          (cond\n           (< (count xs) 2) (cons 1 result)\n           :else (recur (rest xs) (cons (+ (first xs) (first (rest xs))) result))\n            )          \n          )))","problem":97,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":97,"code":"(fn calc\n  [i]\n  (if (= i 1)\n    [1]\n    (let [prev (calc (dec i))]\n      (map + (cons 0 prev) (concat prev [0])))))","user":"5eb4927fe4b00a66d4a95221"},{"problem":97,"code":"#(loop [s 0 e % result []]\n  (println result)\n  (if (= s e)\n    (last result)\n    (recur (inc s) e \n           (conj result\n                 (let [prev (last result) row [1]]\n                   (if (nil? prev)\n                     row\n                     (loop [s2 0 r row]\n                       (println row)\n                       (if (= s2 (dec s))\n                         (conj r 1)\n                         (recur (inc s2) (conj r (+ (nth prev s2) (nth prev (inc s2)))))))))))))","user":"5e71f267e4b085ba37836dc1"},{"code":"(fn [num] \n    \n    (loop [n 1 result [] ]\n         (let [current ((fn [n coll]\n    (let [left (count coll) right (+ left n) bound (dec right)] (for [i (range left right)] \n       (cond\n           (zero? (- i left)) 1\n           (= bound i) 1\n           :else (let [lvalue  (- i n) rvalue (inc lvalue)] (+ (nth coll lvalue) (nth coll rvalue)) )\n       )\n    ))) n result )]\n         (if (= n num) current \n         (recur (inc n) (concat result current))))\n    )\n  )","problem":97,"user":"522eba30e4b01cdb292c5f0e"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (nth (iterate #(mapv + (conj % 0) (cons 0 %)) \n                [1]) \n       (dec n)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":97,"code":"(fn pas [size]\n    (if (= 1 size) [1]\n        (let [prior  (pas (dec size))\n              inner  (loop [col (rest prior)\n                            hd  (first prior)\n                            acc [ 1 ]]\n                       (if (empty? col) (conj acc 1)\n                           (recur (rest col) (first col) (conj acc (+ hd (first col))))))]\n          inner)))","user":"57aa290de4b0b8559636fc65"},{"problem":97,"code":"(fn pt [n]\n  (if (= 1 n)\n    [1]\n    (let [pad (fn [s] (concat [0] s [0]))]\n      (->> n\n           dec\n           pt\n           pad\n           (partition 2 1)\n           (map (fn [[f l]] (+ f l)))))))","user":"5463c824e4b01be26fd746c5"},{"code":"(fn [n]\n  (reduce (fn [init x] (concat [1] (map + init (next init)) [1]))\n          [1]\n          (range 1 n)))","problem":97,"user":"51df825de4b01188f062752b"},{"problem":97,"code":"(fn t [x] (if (= x 1) [1] (let [r (t (dec x))] (map + (concat r [0]) (concat [0] r)))))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn pascal [n]\n   (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (do\n      (let [prev (pascal (dec n))\n            x (map #(apply + %) (partition 2 1 prev)) ]\n        \n        (concat [1] x [1])))))","problem":97,"user":"51d9eb05e4b02ceefd947755"},{"problem":97,"code":"(fn nth-row [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [r]\n\n    (cons 1\n    (take (dec r)\n    (\n\n    (fn v [i r c]\n\n      (cons (* i (/ (- r c) c) ) (lazy-seq (v (* i (/ (- r c) c) ) r (inc c))))\n\n      )\n\n    1 r 1))\n    \n)\n    )","problem":97,"user":"4e78c208535db95036265722"},{"problem":97,"code":"(fn [n] (map #(apply (fn pas [x y] (if (or (zero? x) (= x y)) 1 (+ (pas (dec x) (dec y)) (pas x (dec y))))) %) (for [x (range n)] [x (dec n)])))","user":"5272645de4b03e8d9a4a742c"},{"problem":97,"code":"(fn [n]\n  (loop [row [1] n n]\n    (if (= 1 n)\n      (vec row)\n      (recur (concat [1] (map #(apply + %) (partition 2 1 row)) [1]) (dec n)))))","user":"57202eb7e4b0c5bde472c090"},{"code":"(fn pascal-row [row]\r\n  (letfn [(fact [x]\r\n            (apply * (range 1 (inc x))))\r\n          (n-choose-k [n k]\r\n            (/ (fact n) (* (fact k) (fact (- n k)))))]\r\n    (map #(n-choose-k (dec row) %) (range row))))","problem":97,"user":"4e8ddf32535d65386fec213c"},{"problem":97,"code":"(fn [n]\n    (->> [1]\n         (iterate \n          (fn [row]\n            (concat [1] (map + row (rest row)) [1])))\n         (drop (dec n))\n         first))","user":"55568a7de4b0deb715856e1c"},{"problem":97,"code":"(fn [n]\n  (loop [row [1]\n         i    1]\n    (if (= i n) row \n      (recur (concat [1] (map (partial apply +) (partition 2 (interleave row (rest row)))) [1])\n             (inc i)))))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn pascal [n]\n        (if (= n 1)\n            [1]\n            (last (take (dec n)\n                        (iterate (fn [x]\n                                     (flatten (list 1\n                                                    (map #(+ (first %) (second %)) (partition 2 1 x))\n                                                    1)))\n                                 [1 1])))))","problem":97,"user":"4fb591aee4b081705acca2c0"},{"code":"#(let [f (fn ff [n l] (if (or (== n 1) (== l 1) ) (if (> l n) 0 1) (+ (ff (- n 1) (- l 1)) (ff (- n 1) l))))] \n                                      (concat (if (== 1 (rem % 2))\n                                                (drop-last (for [m (range 1 (+ (/ % 2) 1))] (f % m))) \n                                                (for [m (range 1 (+ (/ % 2) 1))] (f % m)))\n                                              (reverse  (for [m (range 1 (+ (/ % 2) 1))] (f % m)))))","problem":97,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":97,"code":"(fn nth-try [n]\n    (letfn [(next-tri [coll]\n             (conj (into [1] \n                     (map (comp (partial apply +) vector)  coll (rest coll)))\n                  1))]\n           (nth (iterate next-tri [1]) (dec n))))","user":"566ff0a1e4b0a866af6896ec"},{"code":"(fn pascal-step [step]\n  (letfn [(next-pascal [coll]\n            (concat '(1) (map #(apply + %) (partition 2 1 coll)) '(1)))]\n\n    (nth (iterate next-pascal [1]) (dec step))))","problem":97,"user":"4e3bccb1535deb9a81d77f55"},{"code":"(fn [n]\n  (cond\n    (<= n 1) [1],\n    (= n 2) [1 1],\n    :else\n      (let\n        [computePosition (fn [v r c] (* v (/ (- r c) c))),\n         lastPos (- n 2),\n         row n]\n        (loop\n          [result [1], pos 0]\n          (if\n            (>= pos lastPos)\n            (conj result 1)\n            (recur\n              (conj\n                result\n                (computePosition\n                  (nth result pos)\n                  row\n                  (inc pos)))\n              (inc pos)))))))","problem":97,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":97,"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first\n                      (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascal (dec n))))\n                    1)))","user":"5589a941e4b059ccff29b207"},{"problem":97,"code":"(fn [rows]\n        (loop [r (dec rows) out [[1]]]\n          (if (zero? r)\n            (last out)\n            (recur (dec r) \n                   (conj out (into [1] (mapv (partial apply +)\n                        (partition-all 2 1 (last out)))))))))","user":"5361d423e4b0243289761e49"},{"problem":97,"code":"(fn [n]\n  (reductions (fn [ret x]\n                (int (* ret (/ (- n x) x))))\n              1\n              (range 1 n)))","user":"55f85b93e4b03cbcff9738ae"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(mapv + (concat % [0]) (concat [0] %)) [1]))))","user":"566e6850e4b0a866af6896da"},{"code":"(fn f [a] (if (= 1 a) [1] (let [c conj x (f (- a 1))] (vec (map + (c x 0) (apply c [0] x))))))","problem":97,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":97,"code":"(fn [layers]\n  (-> ((fn pascal\n         ([] (pascal [1]))\n         ([layer]\n          (lazy-seq (cons layer\n                          (pascal\n                           (->>\n                            (-> layer\n                                (conj 0)\n                                (reverse)\n                                (vec)\n                                (conj 0))\n                            (partition 2 1)\n                            (map (partial apply +))\n                            (vec))))))))\n      (nth (- layers 1))))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn [x] (loop [c (dec x) step '(1)](if (zero? c)  step  (recur (dec c) (concat [1] (map (partial apply +) (partition 2 1 step)) [1])))))","problem":97,"user":"52570aeae4b0541d1855ba42"},{"code":"(fn [n]\n  (cond\n    (= 1 n) [1]\n    :else (nth\n      (iterate\n        (fn [x]\n          `(1 ~@(map #(apply + %) (partition 2 1 x)) 1))\n        [1 1])\n    (- n 2))))","problem":97,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":97,"code":"(fn [row]\n   (get\n   (reduce (fn [accum elem]\n\n             (do (println accum (count accum) row)\n\n                 (if (= (count accum) 1)\n                   (conj accum [1])\n                   (if (= (count (last accum)) (count (last (butlast accum))))\n                     ((fn add-end [vec-of-vecs]\n                        (conj (into [] (conj (pop vec-of-vecs) (into [] (conj (last vec-of-vecs) 1)))) [1])) accum)\n                     (conj (pop accum) (conj (last accum) ((fn calc-next [accum]\n                                                             (let [idx (count (last accum)) second-to-last (last (butlast accum))]\n                                                               (+ (get second-to-last (dec idx)) (get second-to-last idx)))) accum)))\n                     )\n                   )))\n\n           [[1]] (range 1 (* row row)))\n   (dec row)))","user":"5a0a3473e4b0eab8c0448941"},{"code":"(fn triangle\n  ([n] (triangle [1] n))\n  ([c n]\n     (cond\n      (= (count c) n) c\n      :else (triangle (concat [1] (map + c (rest c)) [1]) n))))","problem":97,"user":"4ecbb249535df97575fdabdf"},{"problem":97,"code":"(fn pascal-triangle [n]\n                       (case n\n                         1 [1]\n                         2 [1 1]\n                         (let [prev (pascal-triangle (dec n))]\n                           (vec (concat [(first prev)] (map #(apply + %) (partition 2 1 prev)) [(last prev)])))))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [x] \n  (nth \n    (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n    (dec x)))","problem":97,"user":"4f08b15b535dcb61093f6c40"},{"problem":97,"code":"(fn pascal\n  [x]\n  (nth ((fn tri[coll]\n   (cons coll\n   (lazy-seq (tri (map +' (concat [0] coll) (concat coll [0]) ))))) [1])  (dec x)))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":97,"code":"(fn [i]\n   (let [pascal (iterate\n                  (fn pascal-next [previous]\n                    (mapv\n                     #(+ %1 %2)\n                     (cons 0 previous)\n                     (conj previous 0)))\n                  [1])]\n\t(nth pascal (dec i)) ))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [x]\n    (let [binom (fn [n k]\n                  (let [prod (fn [a b] (reduce * (range a (inc b))))]\n                    (/ (prod (- n k -1) n) (prod 1 k))))\n          n (dec x)]\n      (map #(binom n %) (range 0 (inc n)))))","problem":97,"user":"4fa2fa5ee4b081705acca186"},{"problem":97,"code":"(fn [x]\n   (letfn [(p [a]\n              (conj (vec\n                     (->> (rest a)\n                          (interleave a)\n                          (partition 2)\n                          (map (fn [[a b]] (+ a b)))\n                          (cons 1)))\n                    1))]\n         (nth (iterate p [1]) (dec x))))","user":"54344721e4b0b6b47310fcea"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1) [1]\n              (let [recursion (pascal-triangle (dec n))]\n                (map\n                  (fn [k] (if (or (= k 0) (= k (dec n))) 1\n                                                         (+ (nth recursion k) (nth recursion (dec k) ))))\n                  (range n)))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n   [1]\n   (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn [n] \n  (take n \n     (rest \n      (last\n       (take n \n             (iterate \n              (fn [r] \n                (concat [0] (map (fn [seq] (apply + seq)) (partition 2 1  r) ) [0])) [0 1 0]))))))","problem":97,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":97,"code":"(fn [n]\n  (->>\n   (iterate #(map + `(0 ~@%) `(~@% 0)) [1])\n   (take n)\n   last))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":97,"code":"(fn pt [n]\n  (if (= n 1)\n    [1]\n    (concat\n      [1]\n      (map\n        (partial apply +)\n        (partition 2 1 (pt (dec n))))\n      [1])))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":97,"code":"(fn [n]\n  (loop [line [1] ind 1]\n    (if (>= ind n)\n      line\n      (recur \n      (into (into [1] (map #(+ (nth line %) (nth line (+ % 1))) (range (- (count line) 1)))) [1])\n      (inc ind))\n   )\n )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":97,"code":"(fn [n]\n   (nth (iterate (fn [seq]\n                   (loop [seq seq result [1]]\n                     (if (= 1 (count seq))\n                       (conj result 1)\n                       (recur (rest seq) (conj result (+ (first seq) (second seq))))\n                       ))\n                   ) [1]) (dec n)))","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn tri [n]\n  (nth\n   (iterate\n    (fn [row]\n      (flatten [1 (map #(reduce + %) (partition 2 1 row)) 1]))\n    [1]) (dec n)))","problem":97,"user":"4db3393e535df7e46ed9b6cc"},{"code":"(fn newton [n]\n(nth \n(iterate\n(fn newt [a]\n  (loop [r [1] s a]\n    (if (< (count s) 2)\n      (cons 1 r)\n      (recur (cons (+ (first s) (second s)) r) (rest s))\n    ) \n  )\n)\n[1]\n)\n(- n 1))\n)","problem":97,"user":"4e9de526535dbda64a6f6b8e"},{"problem":97,"code":"(fn pascal [n] \n  (if (zero? n) nil\n  (cons 1 (map (partial apply +) (partition-all 2 1 (pascal (dec n)))))\n    ))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":97,"code":"(fn pasc [& xs]\n  (letfn [(bi-co [r n]\n            (letfn [(! [z] (reduce * (take z (drop 1 (range)))))] \n               (/ (! n) (* (! r) (! (- n r))))\n            )\n          )]\n    (flatten (map \n     (fn [x]\n       \n        (map\n          (fn [i]\n            (bi-co (first i) (second i))\n          )\n          (map-indexed vector (repeat x (- x 1)))\n        )\n      )\n     xs\n    ))\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn t [n]\n  (if (= n 1) [1]\n    (let [p (t (dec n))]\n      (vec (map + (cons 0 p) (conj p 0)))\n      )\n    )\n  )","problem":97,"user":"4ec4d723535dcc7ae8597d65"},{"problem":97,"code":"#(map (partial (fn [n k] \n          (let [f (fn [x] (reduce * (range 1 (+ 1 x))))]\n            (/ (f n) \n               (* (f k) \n                  (f (- n k)))))) (- % 1)) \n                (range %))","user":"53ba41c2e4b047364c0444f3"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (if (= 2 n)\n      [1 1]\n      (loop [v (pascal (- n 1))\n             rs []]\n       (if (nil? (second v))\n         (cons 1 (conj rs 1))\n         (let [a (first v) b (second v)]\n            (recur (next v) (conj rs (+ a b)))\n))))))","problem":97,"user":"4f504739e4b03ad3f0c10d00"},{"problem":97,"code":"(fn pascal [n]\n      (let [sum-row (fn [xs]\n                       (->> xs\n                          (#(concat [0] % [0]))\n                          (partition 2 1)\n                          (map #(reduce + %))))]\n        (if (< n 2) [1] (sum-row (pascal (dec n))))))","user":"56791447e4b05957ce8c6183"},{"code":"(fn [y] (nth (iterate #(for [i (range (+ (count %) 1))] (+ (nth % (- i 1) 0) (nth % i 0))) [1]) (- y 1)))","problem":97,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"(fn [x]\n  (map #(/ (reduce * (range (inc (- (dec x) %)) x)) (reduce * (range 1 (inc %))))\n    (range 0 x)))","problem":97,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn asdf [ x ] \n   (cond\n     (= x 1) [1]\n     (= x 2) [1 1]\n     (= x 3) [1 2 1]\n     (= x 4) [1 3 3 1]\n     (= x 5 ) [1 4 6 4 1]\n     (= x 11)[1 10 45 120 210 252 210 120 45 10 1]\n     :else :crap)\n   \n   )","problem":97,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    '(1)\n    (concat [1]\n            (map #(apply + %) (partition 2 1 (pascal (dec n))))\n            [1])))","problem":97,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":97,"code":"(fn [n] \n  (let [sum (partial apply +) \n        wrap1 #(concat [1] % [1]) \n        nxt #(->> % (partition 2 1) (map sum) wrap1)] \n    (nth (iterate nxt [1]) (dec n))))","user":"5da8fa72e4b000c986472c2d"},{"problem":97,"code":"#(nth (iterate (fn map-plus-then-veckit [col] (vec (map + (conj col 0) (cons 0 col)))) '[1]) (- % 1))","user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn [n] (loop [vc1 1 accum [vc1] c 1] (if (>= c n) accum (let [vc  (* vc1 (/ (- n c) c))] (recur vc (conj accum vc) (inc c))))))","problem":97,"user":"4e823f41535db62dc21a62c8"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [coll]\n      (->>\n       coll\n       (partition-all 2 1)\n       (cons [1])\n       (map #(apply + %))))\n    [1]) (dec n)))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"#(map (fn [k] (/ (apply * (range 1 %)) (* (apply * (range 1 (inc k))) (apply * (range 1 (- % k)))))) (range %))","problem":97,"user":"51b90b88e4b050a1176cd6a2"},{"problem":97,"code":"(fn pascal-triangles\n  [n]\n  (let [n-fn (fn [n-seq]\n               (let [line-num (count n-seq)]\n                 (if (= 1 line-num)\n                   [1 1]\n                   (->> (map #(+ (nth n-seq %) (nth n-seq (inc %))) (range 0 (- line-num 1)))\n                        (#(concat [1] % [1]))))))]\n    (nth (iterate n-fn [1]) (dec n))))","user":"547bf82de4b0c51c1f4d72e1"},{"code":"(fn\n  [x]\n  (let [factorial #(reduce * 1 (range 1 (inc %)))\n        binomial #(/ (factorial %1) (* (factorial %2) (factorial (- %1 %2))))]\n  (map #(binomial (dec x) %) (range 0 x))))","problem":97,"user":"531490bde4b08068f379ed17"},{"code":"(fn [n]\n  (letfn [(pascal-next [p v]\n                       (* p (-> n\n                                (- v)\n                                (/ v))))]\n    (reductions pascal-next 1 (range 1 n))))","problem":97,"user":"52d809bde4b09f7907dd1384"},{"problem":97,"code":"(fn [a]\n  (let [b (fn [a k]\n            (let [c (fn c[a]\n            (if (or (= a 1) (= a 0))\n              1\n              (* a (c (- a 1)))))]\n    (/ (c a)\n       (* (c (- a k)) (c k)))))]\n    (loop [e []\n           d 0]\n    (if (= d a)\n      e\n      (recur (conj e (b (- a 1) d)) (inc d))))))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn  [cou]\r\n  (loop \r\n\t   [result [1] cont (- cou 1)]\r\n\t   (if (zero? cont)\r\n\t       result\r\n\t       (let [pascal \r\n           (cons 1 (reverse (cons 1 \r\n             (map #(+(first %) (second %)) \r\n                (partition 2 1 result)))))]\r\n\t\t    ( recur pascal (dec cont))))))","problem":97,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":97,"code":"(fn [n]\n  (if (= n 1)\n      [1]\n      (loop [r [1 1] ax (- n 2)]\n         (if (= ax 0)\n           r\n           (recur (map + (cons 0 r) (concat r [0])) (dec ax))\n         )\n      )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":97,"code":"#(letfn[(factorial[n]\n         (apply * (range 1 (inc n))))\n        (binomial[n k]\n         (/ (factorial n)\n         (* (factorial k) (factorial (- n k)))))]\n        \n   (map (fn[col] (binomial (dec %) col)) (range %)))","user":"52faf67ce4b047fd55837005"},{"code":"(fn iter\n  ([n]\n    (iter n [1]))\n  ([n s]\n    (if (= 1 n)\n        s\n        (recur (dec n)\n               (map + (concat [0] s)\n                      (concat s [0]))))))","problem":97,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn f [x]\n    (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else\n      (concat\n        [1]\n        (map \n          #(apply + %)\n          (partition 2 1 (f (- x 1))))\n        [1]\n      )\n    )\n)","problem":97,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn pascal [n]\n  (first (take-last 1 (take n ((fn rpascal [prev level currentindex]\n                          (lazy-seq (cons prev (rpascal\n                                                (into [] (flatten (list 1 (loop [i 0 acc '()]\n                                                                            (if (= i (dec (dec level)))\n                                                                              acc\n                                                                              (recur (inc i)\n                                                                                     (cons (+ (get prev i) (get prev (inc i))) acc)))) 1)))\n                                                (inc level) (+ currentindex level))))) [1] 2 1)))))","problem":97,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn pascal-row [row]\n  (letfn [(fact [n] (reduce * (range 1 (inc n))))\n          (elem-val [r e] (/ (fact r) (* (fact e) (fact (- r e)))))]\n    (map (partial elem-val (dec row)) (range row))))","problem":97,"user":"4e95a440535dbda64a6f6b37"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) (vector 1)\n    (let [v (pascal (dec n))]\n      (concat [1] (map + v (rest v)) [1]))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":97,"code":"(fn [n]\n    (loop [r [1] i n]\n      (if (== 1 i)\n        r\n        (recur\n          (conj (into [1] (map #(+ %1 %2) r (rest r))) 1)\n          (dec i))\n        )\n      )\n    )","user":"559a9a3de4b066d22e731f45"},{"code":"(fn p [r]\n  (let [n (- r 1)]\n    (case n\n      0 [1]\n      1 [1 1]\n      (let [bn (p n)]\n        ((fn l [v i]\n           (if (= i 0)\n             (conj v 1)\n             (l\n              (conj v (+ (get bn i)\n                         (get bn (- i 1))))\n              (- i 1)))) [1] (- n 1))))))","problem":97,"user":"52f818a6e4b047fd55836fcc"},{"problem":97,"code":"(fn pas [n]\n  (case n \n    1 [1]\n    2 [1 1]\n    (let [prev (pas (dec n))\n          new (map + (drop 1 prev) (butlast prev))]\n      (concat [1] new [1]))))","user":"54df2609e4b024c67c0cf7a9"},{"code":"(fn [n]\n          (let [f #(reduce * (range 1 (inc %))) ncr #(/ (f %) (* (f %2) (f (- % %2 ))))]\n            (map #(ncr (dec n) %) (range n))))","problem":97,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [n]\r\n  (loop [idx 1 res [[1]]]\r\n    (if (= n idx)\r\n      (last res)\r\n      (recur (inc idx) (conj res (flatten [1\r\n        (map #(+ (first %) (second %)) (partition 2 1 (last res)))\r\n          1]))))))","problem":97,"user":"4f71ba6ee4b07046d9f4f012"},{"problem":97,"code":"(fn [n] (remove\n   zero?\n   (nth (iterate\n         (fn [vec]\n           (map\n            #(apply +' %)\n            (partition 2  1\n                       (conj (reverse (conj vec 0)) 0))))\n         [1]) n)))","user":"570eeca5e4b0b0fb43fd06fb"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [pn (dec n)\n          prev (pascal pn)\n          augprev (concat [0] prev [0])]\n      (map #(+ (nth augprev %) (nth augprev (inc %))) (range n)))))","problem":97,"user":"4f036fb3535dcb61093f6ac8"},{"problem":97,"code":"(fn pascal [x]  (if (= x 1) [x] (let [p (pascal (dec x))] (mapv + (conj p 0) (cons 0 p)))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":97,"code":"(fn [val] (loop [n (dec val) k 1 l 1 result []]\n  (if (= 0 n) \n    (conj result 1) \n      (let [v (* l (/ n k))]\n      (recur (dec n) (inc k) v (conj result l)))\n  )))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":97,"code":"(fn [n]\n  (let [factorial (fn [n] (->> n\n                               (inc ,,,)\n                               (range 1 ,,,)\n                               (reduce * ,,,)))\n\n        nth-pascal (fn [n r]\n                       (/ (factorial n)\n                          (* (factorial r)\n                             (factorial (- n r)))))]\n\n  (for [i (range  n)]\n    (nth-pascal (dec n) i))))","user":"5990a9fde4b0866487ed0d54"},{"code":"(fn f [x]\n  (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else\n      (let [prev (f (- x 1))] (concat\n        [1]\n        (map + (rest prev) (butlast prev))\n        [1]))))","problem":97,"user":"522454f4e4b01819a2de42d3"},{"problem":97,"code":"#(reduce (fn [coll v]\n   (let [left (cons 0 coll)\n         right (conj coll 0)]\n     (into [] (map + left right))))\n [1] (range (dec %)))","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [row]\n  (letfn [(pascal [c r]\n    (cond (zero? c) 1\n          (zero? r) 0\n          :else (+ (pascal (dec c) (dec r)) (pascal c (dec r)))))]\n    (map #(pascal % (dec row)) (range row))))","problem":97,"user":"50996a38e4b0cae2931060b3"},{"problem":97,"code":"(fn [x] (nth (iterate (fn [c] (if (= (count c) 1)\n                                [1 1]\n                                (concat [1] (map + c (rest c)) [1]))) [1]) (- x 1)))","user":"541f89a5e4b01498b1a71a99"},{"problem":97,"code":"(fn [row]\n    (let [!    (fn ! [n] (reduce *' (range 1 (inc n))))\n          comb (fn [n k] (/ (! n) (*' (! k) (! (- n k)))))]\n      (mapv (partial comb (dec row)) (range row))))","user":"516db4f6e4b046df6fbb76a0"},{"problem":97,"code":"(fn [n]\n  (letfn [(factorial [n]\n            (reduce * (range 1 (inc n))))\n          (combinations\n            [n k]\n            (/ (factorial n) \n               (* (factorial (- n k))\n                  (factorial k))))]\n    (let [comb-n (partial combinations (dec  n))]\n      (mapv comb-n (range 0 n)))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":97,"code":"(fn [n] (nth (iterate #(map +' (concat [0] %) (concat % [0])) [1])  (dec n) ))","user":"55e5c852e4b050e68259b474"},{"code":"(fn tria [n]\n  (if (= n 1) [1]\n    (conj (vec \n           (cons 1 (map #(reduce + %1)\n                (partition 2 1 (tria (dec n)))\n           ))) 1)))","problem":97,"user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [a]\n    (loop [i 1\n           r [1]]\n      (if (< i a)\n        (recur (inc i) (concat '(1) (map + r (rest r)) '(1)))\n        r)))","problem":97,"user":"50bc23e4e4b0594b91591c3c"},{"problem":97,"code":"(fn pascal-triangle [^long n]\n  {:pre [(pos? n)]}\n  (case n\n    1 [1]\n    2 [1 1]\n    (conj\n      (->> (pascal-triangle (dec n))\n           (partition 2 1)\n           (map #(reduce + %))\n           (into [1]))\n      1)))","user":"5f300f28e4b033932238a682"},{"problem":97,"code":"(fn [n] (let [sum (partial reduce + 0)\n              bracket1s #(concat [1] % [1])]\n                      (last (take n (iterate (fn [lx] (->> lx\n                                                          (partition 2 1)\n                                                          (map sum)\n                                                          bracket1s\n                                                          vec))\n                                             [1])))))","user":"5095f761e4b0ba05ca7aebfd"},{"problem":97,"code":"(fn triangle\n  ([x] (map\n         (partial triangle (dec x))\n            (take x (iterate inc 0))))\n  ([r c] (if\n           (= c 0)\n           1\n           (if\n             (= r 0)\n             0\n             (+\n               (triangle\n                 (dec r)\n                 (dec c))\n               (triangle\n                 (dec r)\n                 c))))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn pt [n]\n  (if (= 1 n)\n      [1]\n      (let [xs (pt (dec n))]\n        (vec\n          (map + (cons 0 xs)\n                 (conj xs 0))))))","problem":97,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn pascal [n]\n  (cond (= n 1) [1] (= n 2) [1 1]\n        :else\n    (let [parted (partition 2 1 [0] (pascal (- n 1)))]\n      (vec\n        (\n          cons 1\n        (for [[a b] parted] (+ a b)))))))","problem":97,"user":"50611456e4b0dc10a69545a5"},{"code":"#(loop [c % v []]\r\n    (if (= c 0)\r\n      v\r\n      (recur\r\n        (dec c)\r\n        (vec (cons 1 (map (partial apply +) (partition 2 1 (conj v 0))))))))","problem":97,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":97,"code":"#(loop [out [1] x %1] (if (= x 1) out (recur (into [] (concat [1] (map + out (rest out)) [1])) (- x 1)) ))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":97,"code":"#(if (= % 1) [1]\n   (nth (let [fpr (fn helper [xs] (let [row (concat [1] (map (fn [x] (apply + x)) (partition 2 1 xs)) [1])]\n                           (lazy-seq (cons row (helper row)))))]\n     (fpr [1])) (- % 2)))","user":"54769c7ae4b0c51c1f4d72a8"},{"code":"(fn _ [n]\n  (if (= 1 n) [1]\n      (cons 1 (map\n                  #(apply + %) (partition-all 2 1 (_ (dec n)))))))","problem":97,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn [r]\n  (reduce #(cons\n    (* (first %1)\n       (/ (- r %2) %2))\n  %1) [1] (range 1 r)))","problem":97,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"#(nth (iterate (fn [prev-row] (concat [1] (map (partial apply +) (partition 2 1 prev-row)) [1])) [1]) (- % 1))","problem":97,"user":"4dbbdf86535d3f4042261ece"},{"code":"(fn [z] (let [my (fn [x] (->> x inc (range 1) (reduce *))), \n              my2 (fn [b a] (/ (/ (my b) (my a)) (my (- b a)))), \n              my3 (fn [c] (map #(my2 c %) (range (inc c))))] \n          (my3 (dec z))))","problem":97,"user":"528c51a5e4b0239c8a67aeb4"},{"problem":97,"code":"(fn p [x] \n  (if (= x 1) \n    [1] \n    (mapv + (into [0] (p (dec x))) (conj (p (dec x)) 0))) )","user":"5463fbbde4b01be26fd746ca"},{"problem":97,"code":"#(case (first %&) 1 [1] 2 [1 1] 3 [1 2 1] 4 [1 3 3 1] 5[1 4 6 4 1] 11  [1 10 45 120 210 252 210 120 45 10 1])","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [n] (if (= n 1) [1] (loop [c [1 1] p 2] (if (= p n) c (recur (concat '(1) ((fn [l] (loop [r l result []] (if (= (count r) 1) result (recur (rest r) (cons (+ (first r) (second r)) result))))) c) '(1)) (inc p))))))","problem":97,"user":"510931ede4b0c71f76895663"},{"code":"(fn [n]  \n   (nth (iterate (fn [l] `[1 ~@(map #(apply + %) (partition 2 1 l)) 1]) [1]) (dec n)))","problem":97,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":97,"code":"(let [addn (fn addn [acc v]\n             (if (> (count v) 1)\n               (recur (cons (+ (first v) (second v)) acc) (rest v))\n               acc))\n      next-pascal-row (fn next-pascal-row [v]\n                        (cons 1 (concat (addn () v) '(1))))]\n  (fn pascal-row [n]\n    (nth (iterate next-pascal-row '(1)) (dec n))))","user":"552e1c98e4b076ab5578f7ee"},{"code":"(fn [n]\n  (loop [i 1 r [1]]\n    (if (== n i)\n      r\n        (recur (inc i) (conj (if (> i 1) (into [1] (map + (butlast r) (rest r))) [1]) 1)))))","problem":97,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn [x]\n   (nth (iterate (fn [a]\n                   (vec (map + (apply conj [0] a) (apply conj a [0])))) [1]) (dec x))\n   )","problem":97,"user":"528ce039e4b0239c8a67aebc"},{"problem":97,"code":"(fn prob97 [rowws]\n (loop [listt [1] times rowws] (if (= times 1) listt (recur (flatten (conj [1] (map + listt (drop 1 listt)) [1])) (dec times)))))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":97,"code":"(fn p-triangle\n  ([rows]\n   (p-triangle rows 1 [1]))\n  ([rows counter acc]\n   (let [gen-next-row (fn gen-next-row [row]\n                        (loop [[a & rest] row\n                               result []]\n                          (if (empty? rest)\n                            (vec (concat [1] result [1]))\n                            (recur rest (conj result (+ a (first rest)))))))]\n                          (if (= rows counter)\n                            acc\n                            (recur rows (inc counter) (gen-next-row acc))))))","user":"5d92b543e4b0915913b1d414"},{"problem":97,"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (cons 1 (concat (map #(reduce + %) (partition 2 1 (pascal (dec n)))) [1]))))","user":"54125eeee4b01498b1a719d3"},{"problem":97,"code":"(fn [n]\n  (loop [iter n out [1]]\n    (if (zero? (dec iter)) out\n      (recur \n       (dec iter) \n       ((fn [x] (cons 1 (concat (map + (rest x) (butlast x)) [1]))) out)\n      ))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn t [n]\n  (if (= 1 n)\n    [1]\n    (loop [t [[1][1 1]]\n           n (dec n)]\n      (if (= 1 n)\n        (last t)\n        (recur (conj t \n                     (flatten [1 (map #(apply + %) (partition 2 (interleave (last t) (rest (last t))))) 1]))\n               (dec n))))))","problem":97,"user":"4ecc1d85535d23f0362276f8"},{"problem":97,"code":"(fn f\n  [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (concat [1] (map #(apply + %) (partition 2 1 (f (dec n)))) [1])))","user":"56949fc5e4b0dcc4269f4120"},{"problem":97,"code":"#(loop [n 1 rows [[1]]]\n   (let [curr (last rows)]\n     (if (= n %) curr\n       (recur (inc n) \n              (conj rows (conj (apply vector (conj \n                (map (fn[p] (reduce + p)) (remove (fn[i] (empty? (rest i))) (partition-all 2 1 curr))) 1)) 1))))))","user":"56bb9ccce4b0f26550335959"},{"problem":97,"code":"(fn [n]\n  (let [pad (fn [v] [(concat v [0])\n                     (cons 0 v)])]\n    (nth (iterate (fn [v]\n                    (->> (pad v)\n                         (apply map +)\n                         vec))\n                  [1])\n         (dec n))))","user":"5398305fe4b0b51d73faaef6"},{"problem":97,"code":"(fn tri-row [n]\n  (if (= n 1)\n    [1]\n    (let [l (tri-row (dec n))]\n      (conj (vec (cons 1 (map + l (next l)))) 1))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":97,"code":"(fn [x] (reduce #(conj % (* (last %) (/ (- x %2) %2 ))) [1] (range 1 x)))","user":"56066e82e4b08b23635d3173"},{"problem":97,"code":"(fn [n]\n  (let [n (dec n)\n        hf (fn [prev k result]\n             (if (> k n)\n               result\n               (let [curr (* prev (/ (- (inc n) k) k))]\n                 (recur curr (inc k) (conj result curr)))))]\n    (hf 1 1 [1])))","user":"55ac07afe4b03311e7b7328f"},{"problem":97,"code":"(fn pascals-triangle-at-level [n]\n  (letfn [(next-row [row]\n            (map (partial reduce +)\n                 (partition 2 1 (concat '(0) row '(0)))))]\n    (last\n     (take n\n           (iterate next-row '(1))))))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":97,"code":"(fn pt [n]\n  (nth\n    (iterate\n      #(vec (map + (conj % 0) (cons 0 %)))\n      '[1])\n    (dec n)))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn pascal [n]\n        (if (= n 1)\n          [1]\n          ( map #(apply + %)\n           (partition 2 1 (concat [0] (pascal (- n 1)) [0])))))","problem":97,"user":"52cdec6ce4b07d0d72b27383"},{"code":"(fn pascal-row [n]\n\t(let [r (dec n)\n\t\tpascal (fn pascal [n k]\n\t\t\t(cond\n\t\t\t\t(= k 0) 1\n\t\t\t\t(= k n) 1\n\t\t\t\t:else (+ (pascal (dec n) (dec k)) (pascal (dec n) k))\n\t\t\t)\n\t\t)]\n\t\t(map #(pascal r %) (range n))\n\t)\n)","problem":97,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":97,"code":"(fn [x] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec x)))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn [n]\n  (reduce (fn [c x]\n            (if (<= x 2)\n              (conj c 1)\n              (concat [1]\n                      (map #(apply + %)\n                           (partition 2 1 c) )\n                      [1]) ))\n          []\n          (range 1 (inc n)) ))","problem":97,"user":"50608ea0e4b07251188e4456"},{"code":"(fn pascal [x]\n  (when (> x 0)\n    (condp = x\n      1 [1]\n      2 [1 1]\n      (let [prev-vec (pascal (dec x))]\n        (-> (cons 1 (map #(+ %1 %2) prev-vec (rest prev-vec)))\n            (concat [1]))))))","problem":97,"user":"51f82769e4b09be9c177e527"},{"problem":97,"code":"(fn [n]\n    (let [fact #(reduce * (range 1 (inc %1)))\n          nk #(/ (fact %1)\n                 (* (fact %2) (fact (- %1 %2))))]\n      (mapv #(nk (dec n) %)\n            (range 0 n))))","user":"6026d2cae4b0d5df2af22232"},{"problem":97,"code":"(fn [row] \n  (nth (iterate\n           (fn [param1]\n             (vec (map + (conj param1 0) (cons 0 param1))))\n           [1]\n           )\n    (dec row))\n  \n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":97,"code":"(fn pascals-row [n]\n    (if (<= n 1)\n      [1]\n      (let [previous-row (pascals-row (dec n))]\n        (loop [new-nums (vector (first previous-row))\n               to-do previous-row]\n          (if (empty? (rest to-do))\n            (conj new-nums (last previous-row))\n            (recur\n             (conj new-nums (apply + (take 2 to-do)))\n             (drop 1 to-do)))))))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn [n]\n  (nth (iterate (fn [c]\n                  (concat [(first c)]\n                          (map #(apply + %) (partition 2 1 (map bigint c)))\n                          [(last c)]))\n                [1])\n       (dec n)))","problem":97,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn [x]\n  (letfn [(pascal_s_triangle \n  [x]\n  (cond (= x 1) [1]\n        :else (let [coll (pascal_s_triangle (dec x))\n                    coll_with_prefix (vec (cons 0 coll))\n                    coll_with_prefix_suffix (conj coll_with_prefix 0)]\n                (map (fn [[n1 n2]] (+ n1 n2)) (partition 2 1 coll_with_prefix_suffix)))\n    ))]\n  (pascal_s_triangle x)))","problem":97,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn [x]\n  (letfn\n    [(factorial [a] (apply * (range 1 (inc a))))\n     (ptel [n k]\n           (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n    (map #(ptel (dec x) %) (range x))))","problem":97,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":97,"code":"(fn [n ](nth (iterate #(reverse (conj (reverse (cons 1 (map (partial apply +) (partition 2 1 %)))) 1)) [1]) (dec n)))","user":"55da18d5e4b0e31453f64ad1"},{"problem":97,"code":"(fn [x]\n   (->> (iterate #(mapv + (conj % 0) (cons 0 %)) [1])\n        (take x)\n        (last)))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn [a] \n  (let [binom\n        (fn [k]\n          (let [rprod (fn [x y] (reduce * (range x (inc y))))]\n            (/ (rprod (- a k) (dec a)) (rprod 1 k))))]\n    (map binom (range a))))","problem":97,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [n]\n  (let [pad #(concat (cons 1 %) [1])\n        nextp (fn [s] (pad (map #(reduce +' %) (partition 2 1 s))))\n        triangle (iterate #(nextp %) [1])]\n    (nth triangle (dec n))))","problem":97,"user":"5003deb9e4b0678c553fc445"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [line] \n                  (apply vector\n                   (map + (cons 0 line) (conj line 0))))\n                [1])\n       (- n 1)))","user":"59225498e4b09b4ee5954c8c"},{"problem":97,"code":"(fn [n]\n (into []\n (keep-indexed #(when (and (not= %1 0) (not= %1 (inc n))) %2)\n  (last\n    (take n\n      (iterate (fn [args]\n        (conj \n          (into [] \n            (cons 0 \n              (map #(apply + %) (partition 2 1 args)))) \n          0)) [0 1 0]))))))","user":"559b55d6e4b066d22e731f54"},{"code":"(fn [n]\n  (if (= 1 n)\n    [1]\n    (nth (iterate #(vec (map + (cons 0 %) (conj % 0)))  [1 1]) (dec (dec n))  ))  )","problem":97,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn pascal-tri [n]\n  (let [n (dec n)]\n    (reduce #(conj %1 (/ (* (last %1) (- n %2)) (inc %2)))\n            [1] (range n))))","problem":97,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn pascal [row-num]\n  (letfn [(build-triangle [row]\n                          (let [next-row (concat [1] (map #(apply + %) (partition 2 1 row)) [1])]\n                            (lazy-seq (cons row (build-triangle next-row)))))]\n    (nth (build-triangle [1]) (dec row-num))))","problem":97,"user":"52a55adee4b0c58976d9abe7"},{"problem":97,"code":"(fn [n]\n  (loop [s [1]]\n    (if \n     (= n (count s)) s\n     (recur (into (into [1] (map + s (rest s))) [1]))\n     )))","user":"571346c0e4b07c98581c3a9b"},{"problem":97,"code":"#(nth (iterate\n        (fn [xs]\n          (map + (cons 0 xs) (conj (vec xs) 0))\n          ) [1]) (dec %))","user":"56f7ecdfe4b08e7d20b96834"},{"code":"(fn row [n] (cond (= n 1) [1] (= n 2) [1 1] :else (conj (apply (partial conj [1]) (map (partial apply +) (partition 2 1 (row (dec n))))) 1)))","problem":97,"user":"52319066e4b0e2e8de81d1e9"},{"problem":97,"code":"(fn [row] (nth (take row (iterate #(map + (concat [0N] %1) (concat %1 [0N])) [1N])) (dec row)))","user":"5202cfe7e4b030ee0c5b2702"},{"problem":97,"code":"(fn [n]\n  (let [a (fn [d] \n                     (let [r (mapv #(apply + %) (partition 2 1 d))\n                           out (conj (apply conj [1] r) 1)] \n                       out))]\n    (nth (reduce #(conj %1 (a (nth %1 (dec %2)))) [[1] [1 1]] (range 2 n)) (dec n))))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn [t] (letfn [(fac [x] (reduce * (range 1 (inc x))))\r\n                  (choose [n k] (/ (fac n) (* (fac (- n k)) (fac k))))]\r\n            (if (= t 1)\r\n              [1]\r\n              (let [n (dec t)]\r\n                (map #(choose n %) (range t))))))","problem":97,"user":"4fe900a6e4b0547ebccb243a"},{"problem":97,"code":"(fn pascal-row\n  [row]\n  (letfn [(factorial [n]\n            (reduce * (range 1 (inc n))))\n          (binomial-coeff [n k]\n            (/ (factorial n)\n               (* (factorial k)\n                  (factorial (- n k)))))]\n    (map (partial binomial-coeff (- row 1)) (range row))))","user":"5c222b7de4b07e362c230588"},{"problem":97,"code":";recursive\n(fn pascal [n] \n  (if (= 1 n)\n    [1]\n    (let [s (->> (pascal (dec n))\n                 (partition 2 1)\n                 (mapv (partial apply +)))]\n      `[1 ~@s 1])))\n          \n;about the same, but with loop/recur and funny usage of ~@\n#_(loop [s [1]] \n   (if (= (count s) %)\n     s\n     (recur `[1 ~@(->> (partition 2 1 s)\n                     (mapv (partial apply +))) \n              1])))","user":"55cdc576e4b0e31453f64a1f"},{"problem":97,"code":"(fn p [n]\n  (if (= 1 n)\n    [1]\n    (concat (p 1)\n            (map #(reduce + %) (partition 2 1 (p (dec n))))\n            (p 1))))","user":"4db599e6535d87e67b28fe11"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (if (= n 1) [1]\n      (let [prev (pascal-triangle (dec n))]\n        (concat [1] (map + prev (rest prev)) [1]))))","user":"5a0a04eee4b0eab8c0448935"},{"problem":97,"code":"#(nth (iterate (fn [v] (into [] (map + (cons 0 v) (conj v 0)))) [1]) (- % 1))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn pascal [n]\n  (let [er [1]\n        iter (fn [row]\n               (loop [remaining row \n                      result er]\n                 (if (empty? (rest remaining))\n                   (conj result 1)\n                   (recur (rest remaining) \n                          (conj result (+ (first remaining) (second remaining)))))))]\n    (nth (iterate iter er) (dec n))))","problem":97,"user":"50e4f4e9e4b049a987753896"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= n 1)\n    [1]\n    (let [prev (cons 0 (pascal (dec n)))\n          rvsd (reverse prev)]\n      (map + prev rvsd))))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":97,"code":"(fn [n] (loop [i n v [1]] (if (= i 1) v (recur (- i 1) (vec (map + (cons 0 v) (conj v 0)))))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn pasc\n  [n]\n  (if (= 1 n)\n    [1]\n    (concat (list 1) (map (partial apply +) (partition 2 1 (pasc (dec n)))) (list 1))))","problem":97,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":97,"code":"(fn [row]\n  (loop [n 1 r [1]]\n  (if (= row n)\n    r\n    (recur (inc n) (map + (concat [0] r) (concat r [0]))))))","user":"58ca613de4b021aa9917edb7"},{"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (concat [1]\n            (map #(apply + %) (partition 2 1 (pascal (dec n))))\n            [1])))","problem":97,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [n]\n  (letfn [(row [n]\n              (if (= 1 n)\n               [1]\n               (flatten (conj [] 1\n                 (map #(apply + %) (partition 2 1 (row (dec n))))\n                   1))))]\n    (row n)))","problem":97,"user":"4e42f930535dc968683fc49f"},{"code":"(fn nth-pt-row [n]\n  (if (= n 1)\n    [1]\n    (letfn [\n      (pair-add [pair] (+ (first pair) (second pair)))\n      (bookend [v i] (vec (cons i (conj (vec v) i))))]\n      (let [r (nth-pt-row (dec n))]\n        (bookend (map pair-add (partition 2 1 r)) 1)))))","problem":97,"user":"4e8f4f64535d65386fec2149"},{"problem":97,"code":"(fn tri [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (for [[a b] (partition 2 1 (tri (dec n)))]\n                  (+ a b)) [1])))","user":"50f17c0de4b06d9538fe2123"},{"code":"(fn [n]\n  (loop [i 1 rs [1]]\n    (if (= i n)\n      rs\n      (recur (inc i) (vec (map + (reduce conj [0] rs) (conj rs 0)))))))","problem":97,"user":"51805d22e4b0e3fc13e244df"},{"problem":97,"code":";avoid recursion?\n(fn pascal-triangle [x]\n  (cond \n    (= 1 x) [1]\n    (= 2 x) [1 1]\n    :else (conj (apply vector (conj \n                               (map #(+ %1 %2) (pascal-triangle (dec x)) (rest (pascal-triangle (dec x)) )) 1)) 1)\n    )\n  )","user":"558bdcefe4b0277789237633"},{"code":"(let\n  [nextrow \n    (fn [row]\n      (vec (concat [1] (map + row (next row)) [1])))\n  ]\n  (fn [n] (nth (iterate nextrow [1]) (dec n) )))","problem":97,"user":"4f03154a535dcb61093f6a58"},{"problem":97,"code":"(fn f [x]\n  (loop [i 1\n         acc [1]]\n    (if (= i x) acc\n      (recur (inc i) (mapv + (cons 0 acc) (conj acc 0))))))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":97,"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (concat [1] \n            (map (partial apply +) \n                 (partition 2 1 (p (dec n)))) \n            [1])))","user":"55b1e9e7e4b0da326a65cf74"},{"code":"(fn pascal [n]\n  (letfn [(p [r]\n            (let [[a b] r]\n              (if (nil? b)\n                  '()\n                  (cons (+ a b) (p (rest r))))))]\n    (if (<= n 1) '(1)\n        (concat '(1) (p (pascal (dec n))) '(1)))))","problem":97,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":97,"code":"#(loop [n (dec %)\n        k 1\n        row [1]]\n  (if (> n 0)\n    (recur (dec n) (inc k) (conj row (* (last row) (/ n k))))\n    row))","user":"56491d05e4b0284900eef63a"},{"code":"(fn p [n]\n  (if (= n 1)\n    '(1)\n    (let [ m (p (- n 1))]\n    (cons 1 (concat (map #(apply + %) (partition 2 (interleave m (rest m)))) [1] )))))","problem":97,"user":"4f7869c2e4b0fbe0118ec589"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev-row (pascal (dec n))]\n      (conj (vec (concat [1] (map + prev-row (rest prev-row)))) 1))))","problem":97,"user":"4f7e29dde4b06e829148e1ca"},{"problem":97,"code":"(fn solve [n] (letfn [(triangle [prev]\n                          (vec (concat\n                                 [(first prev)]\n                                 (map (partial apply +) (partition 2 1 prev))\n                                 [(last prev)])))] (loop [n (dec n)\n                       prev [1]]\n                  (if (zero? n) prev (recur (dec n) (triangle prev))))))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":97,"code":"(fn [r]\n        (loop [a 0 p [1] k (- r 1)]\n                (if (< a k) (recur (inc a) (cons (int (* (first p) (/ (- k a) (+ a 1.0)))) p)(- r 1)) p)\n\n        )\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"code":"#(last (take %1 (iterate (fn [r] (->>\n                                  (concat [[(first r)]] (partition 2 1 r) [[(last r)]])\n                                  (map (partial apply +)))) [1])))","problem":97,"user":"535d4b0ae4b04ce2eb3ed2be"},{"problem":97,"code":"(fn pascal\n  ([n]\n   (pascal n [1]))\n  ([n ret]\n   (if (= 1 n)\n     ret\n     (recur (dec n) (conj (map (partial reduce +) (partition-all 2 1 ret)) 1)))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":97,"code":"(fn pascal [n]\n  (reduce (fn [a k] (conj a (* (last a) (/ (- n k) k)))) [1] (range 1 n)))","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn [n]\n  (loop [counter 1 result [1]]\n    (if (= counter n)\n      result\n      (recur\n       (inc counter)\n       (let [row (conj (apply conj [0] result) 0)]\n         (for [i (range 1 (count row))]\n           (+ (get row i) (get row (dec i)))))))))","problem":97,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [cc ]\n    (loop [ ll [1]\n            cc cc] \n          (if (< cc 2 )\n              ll \n              ( recur ((comp flatten vector) 1 (map + ll (next ll)) 1 ) \n                      (dec cc) ))))","problem":97,"user":"4f030775535dcb61093f6a43"},{"code":"(fn [x]\n  (reduce (fn [coll n] \n            (if (= n x) \n              coll\n              (conj (into [1] \n                          (map (fn [[a b]] (+ a b)) (partition 2 1 coll))) \n                    1)))\n          [1]\n          (take x (iterate inc 1))))","problem":97,"user":"4fb01e53e4b081705acca260"},{"code":"(fn [n]\n  (let [iter (fn [r]\n               (loop [s r v [1]]\n                 (if (empty? (rest s))\n                   (conj v 1)\n                   (recur (rest s) (conj v (+ (first s)\n                                              (second s)))))))]\n    (nth (iterate iter [1]) (dec n))))","problem":97,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":97,"code":"(fn pascal-line [line]\n    (cond (= line 1) [1]\n          (= line 2) [1 1]\n          :else\n          (let [prev-line (pascal-line (dec line))\n                mid-triangle #(map (fn [[a b]]\n                                       (+ a b))\n                                     (partition 2 1 prev-line))]\n            (concat [1] (mid-triangle) [1]))))","user":"532f8569e4b019098a6f8b4f"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))\n;; not from me","user":"4eb171d7535d7eef30807340"},{"problem":97,"code":"(fn [number]\n  (loop [row 1\n         result [1]]\n    (let [to-sum (concat [0] result [0])]\n      (if (= row number)\n        result\n        (recur (inc row)\n               (reduce (fn [result [x y]] (conj result (+ x y)))\n                       []\n                       (partition 2 1 to-sum)))))))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":97,"code":"(fn pascal [x]\n  (comment \"take prior result,prepend and append with zero, and add\")  \n  (if (= x 1) [1]\n  \t(map \n   \t \t(partial reduce +) \n     \t(map list \n        \t(concat [0] (pascal (dec x)))\n         \t(concat (pascal (dec x)) [0])\n     \t)\n  \t)\n  )\n)","user":"55d35a01e4b0e31453f64a63"},{"problem":97,"code":"(fn [n] (loop [p [1] ] (if (= n (count p)) p (recur (flatten (vector  1 (map #(apply + % ) (partition 2 1 p)) 1)) )) ))","user":"562326cbe4b03f08ee9a9230"},{"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [v1 (pascal (dec n))\n                pairs (partition 2 1 v1)\n                v3 (map #(+ (first %) (last %)) pairs)\n                v4 (concat '(1) v3 '(1))]\n            (vec v4))))","problem":97,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":97,"code":"#(loop [row % curr [1]]\n   (if (= row 1) \n     curr \n     (recur (dec row) \n            (concat [1] (map (partial apply +) (partition 2 1 curr)) [1]))))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":97,"code":"(fn nth-row\n  [n]\n  (nth (iterate \n           (fn next-row\n             [last-row]\n             (let [row last-row,\n                   row' (apply vector (rest (conj last-row 0)))]\n               (apply vector (conj (map + row row') 1))))\n           [1])\n       (dec n)))","user":"56e99ec8e4b04a395b9a03fb"},{"code":"(fn nth-row [n]\n  (letfn [(next-row [row]\n            (let [n-row (reduce (fn [[out l] n] \n                                  [(conj out (+ l n)) n]) \n                                 [[] 0] \n                                 row)]\n               (conj (first n-row) (last n-row))))]\n    (nth (iterate next-row [1]) (dec n))))","problem":97,"user":"52463059e4b09dbe66b56198"},{"problem":97,"code":"(fn [i]\n  (nth\n   (iterate\n    #(concat (map + % (cons 0 %)) [1])\n    [1])\n   (dec i)))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        (= n 3) [1 2 1]\n        (= n 4) [1 3 3 1]\n        (= n 5) [1 4 6 4 1]\n        (= n 11) [1 10 45 120 210 252 210 120 45 10 1]))","problem":97,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [n]\n  (nth (iterate\n(fn [prev-row]\n  (apply vector (concat [1] (map + prev-row (rest prev-row)) [1]))) [1] ) (dec n)))","problem":97,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":97,"code":"(fn [n]\n   (let [factorial\n         (fn [n] (reduce * (range 1 (inc n))))\n         choose\n         (fn [n k]\n           (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n     (map #(choose (dec n) %) (range n))))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":97,"code":"(fn [n]\n    (let [sum-pairs (fn [row] (map (fn [[a b]] (+ a b)) (partition 2 1 row)))\n          next-row  (fn [prev] (flatten [1 (sum-pairs prev) 1]))]\n      (loop [rows [[1]]\n             i    1]\n        (if (= i n)\n          (last rows)\n          (recur (conj rows (next-row (last rows)))\n                 (inc i))))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn [n] (loop [i 1 res [1]] (if (= i n) res (recur (inc i) (map #(apply + %) (partition 2 1 (concat [0] res [0])))))))","problem":97,"user":"51bd1a0de4b0df1216cefd93"},{"problem":97,"code":"(fn pascal [r]\n  (map\n    (partial\n      (fn pascal-item [row column]\n        (if (or (= row 1) (= row column) (= column 1))\n          1\n          (+ (pascal-item (- row 1) (- column 1))\n             (pascal-item (- row 1) column))\n          ))\n      r)\n    (range 1 (+ r 1))))","user":"5a94a38ce4b0d174b936c73e"},{"code":"(fn [l]\n  (let [x (- l 1)]\n  (map \n    (fn [y] \n      (/ (reduce * (range 1 (inc x)))\n        (* (reduce * (range 1 (inc y)))\n          (reduce * (range 1 (inc (- x y))))\n    )))\n    (range (inc x)))))","problem":97,"user":"4dd579b5535dae65d5c462ea"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (- n 1))]\n      (vec (lazy-cat [1] (map + prev (rest prev)) [1])))))","user":"541096bde4b01498b1a719b2"},{"code":"(fn pascal [n]\n  (loop [cnt n acc [1]]\n    (if (= 1 cnt)\n      acc\n      (recur (dec cnt) (conj (vec (conj (map (partial reduce +) (partition 2 1 acc)) 1)) 1)))))","problem":97,"user":"523b10dfe4b02f719975bdb8"},{"problem":97,"code":"(fn [n] \n  (let [n (dec n)\n        ! (fn [n] (reduce * (range 1 (inc n))))]\n  \t(vec (map #(/ (! n) (* (! %) (! (- n %)))) (range (inc n))))))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":97,"code":"#(loop [ n % re [] b 1]\n   (letfn [(abc [x]\n                (loop [up x re2 [1]]\n                  (if\n                   (= 1 (count up)) (conj re2 1 )\n                   (recur (rest up) (conj re2 (+ (first up) (second up))))\n                    ))) ]\n   (cond \n     (= 1 n) [1]\n     (= 1 b)(recur n [1] 2)\n     (< n b) re\n     :else (recur n (abc re) (inc b)))\n     ))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":97,"code":"(fn [n]\n        (letfn [(compute-next [c]\n                  (flatten (for [k (range (inc (count c)))]\n                             [(+' (nth c (dec k) 0) (nth c k 0))])))]\n          (nth (iterate compute-next [1]) (dec n))))","user":"541ae7dbe4b01498b1a71a61"},{"problem":97,"code":"(fn pascal[index]\n  (letfn [(gen-next [s] \n          (loop [s s\n                result []]\n            (if (= (count s) 0)\n              [1]\n              (if (= (count s) 1)\n               (if (empty? result)\n                 [1 1]\n                 (apply vector 1 (conj result 1)))\n               (recur (rest s)\n                 (conj result (+ (first s) (second s))))))))]\n  (loop [cnt index\n        next-seq []]\n    (if (= cnt 0)\n      next-seq\n      (recur (dec cnt)\n             (if (= cnt 0) \n               (gen-next [1]) \n               (gen-next next-seq)))))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(let [inner (fn inner2 \n  ([f s & r] \n   (cons (+ f s) (apply inner2 (cons s r))))\n  ([f] [])\n  ([] []))\n] (fn pt [x]\n  (cond \n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else\n        (concat [1]\n          (apply inner\n            (pt (dec x))) [1]))))","problem":97,"user":"511ac026e4b0c87c59c9670e"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal (dec n) [1]))\n  ([n coll]\n   (if (pos? n)\n     (pascal (dec n) (map + (concat [0] coll) (concat coll [0])))\n     coll)))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"(fn [n]\n  (let [n (- n 1)\n        ! #(apply * (range 1 (+ 1 %)))]\n    (map \n      #(/ (! n) (! %) (! (- n %)))\n      (range 0 (+ n 1)))))","problem":97,"user":"4db0114d838c48654951d9b8"},{"code":"(fn [n]\n  (let [gen (fn [x] (concat [1] (map + (rest x) (drop-last x)) [1]))]\n     (last (take n (iterate gen [1])))))","problem":97,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":97,"code":"(fn [n] \n  (loop [r [1 2 1] c n] \n    (cond \n      (<= c 2) (repeat c 1) \n      (= c 3) r \n       :else \n      (recur \n        (conj (vec (cons 1 (map #(apply + %) (partition 2 (interleave (drop-last 1 r) (rest r)))))) 1) (dec c)))))","user":"5578f292e4b05c286339e08f"},{"problem":97,"code":"(fn [n]\n  (letfn [(reproduce [coll]\n                     (cons 1 (conj (vec (map (fn [c] (apply + c)) (partition 2 1 coll))) 1)))]\n    (loop [x 1 t [1]]\n      (if (= x n)\n        t\n        (recur (inc x) (reproduce t))))))","user":"57dd47f4e4b0bd073c20243e"},{"problem":97,"code":"(fn f[x] \n (if (= x 1)\n  [1]\n  (let [fx (f (dec x))]\n   (cons 1\n    (map \n     (fn f1[a b] \n      (+ a b)\n     )\n     fx\n     (conj (into [] (rest fx)) 0)\n    )\n   )\n  )\n )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1]\n                  (map #(apply + %1) (partition 2 1 (pascal (dec n))))\n                  [1])))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":97,"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n        :otherwise (flatten [1 (map (fn [[x y]] (+ x y)) (partition 2 1 (pascal (- n 1)))) 1])))","user":"4fa5c8dde4b081705acca1af"},{"problem":97,"code":"(fn pascal-line [n] (last (take n \n  (iterate #(concat [1]  (map + % (rest %)) [1]) \n           [1]))))","user":"52c1cc8be4b07a9af579236b"},{"problem":97,"code":"(fn [wanted-row-number]\n  (cond\n    (= wanted-row-number 1) [1]\n    (= wanted-row-number 2) [1 1]\n    :else\n    (loop [current-row-number 3\n           current-row [1 2 1]]\n      (if (= current-row-number wanted-row-number)\n        current-row\n        (let [new-row (concat [1] (map #(apply + %) (partition 2 1 current-row)) [1])]\n          (recur (inc current-row-number) new-row)\n          )\n        )\n      )\n    )\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn [n] (letfn [(helper [l] (let [l1 (map-indexed vector l)]\n   \t(reverse (cons 1 (reverse  (cons 1 (for [[k1 v1] l1 [k2 v2] (drop 1 l1) :when (= k2 (inc k1))]  \n        (+ v1 v2))))))))\n                (pascal [z] (lazy-seq (cons z (pascal (helper z)))))\n                (modify [t] (if (number? t)  #(nth % (dec t)) (partial take (last t))))] ((modify n) (pascal (list 1)))))","problem":97,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn [n]\r\n  (letfn [(nr [r] (cons (first r)\r\n    (conj (vec (map #(reduce + %) (partition 2 1 r))) (last r))))]\r\n    (nth (iterate nr [1]) (dec n))))","problem":97,"user":"4db4714f535dc0f10411755a"},{"code":"(fn [n]\n  (let [row (dec n)\n        fac #(reduce * 1 (range 1 (inc %)))\n        c #(/ (fac %1) (fac %2) (fac (- %1 %2)))]\n    (map #(c row %) (range (inc row)))))","problem":97,"user":"4fba7d1ee4b081705acca2e0"},{"problem":97,"code":"#(reduce\n   (fn [a b]\n     (map + (concat [0] a) (concat a [0])))\n   [1]\n   (range (dec %)))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":97,"code":"(fn [n] \n   (nth \n    (iterate \n     #(concat [1] \n              (map (fn [x] (apply + x)) (partition 2 1 %)) \n              [1]) \n     [1]) \n    (dec n)))","user":"55249f64e4b0882d96d091c6"},{"problem":97,"code":"(fn pascal [n]\n       (case n\n         1 [1]\n         2 [1 1]\n         (let [previous-triangle (pascal (dec n))]\n           (concat\n             [1]\n             (map (fn [[x y]] (+ x y)) (partition 2 1 previous-triangle))\n             [1]))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n   (loop [row [1 1]]\n     (if (= n (count row))\n       row\n       (recur (concat [1] (map + row (rest row)) [1]))))))","problem":97,"user":"524cdd51e4b0752c4cb68ccc"},{"code":"(fn pascal [lvl]\n  (loop [p [1] lvl lvl]\n    (if (= lvl 1) p\n      (recur (conj (into [1] (map + (rest p) (butlast p))) 1) (dec lvl)))))","problem":97,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [r] (reductions #(* %1 \n             (/ (- r %2)\n                %2))\n         1 (range 1 r)))","problem":97,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"(fn pas-tri [n]\n  (letfn [ (pt [m lv acc]\n              (if (empty? m)\n                acc\n                (let [ nv (* lv (first m)) ]\n                  (recur (rest m) nv (cons nv acc)))))]\n    (pt (map #(/ % %2) (reverse (range 1 n)) (range 1 n)) 1 [1])\n  )\n)","problem":97,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [i] (nth (iterate #(map + `(0 ~@%) `(~@% 0)) [1]) (- i 1)))","problem":97,"user":"51b793d3e4b0d906fcd71d38"},{"code":"; This is verbose as all hell, but I was happy to have worked it out with zero hints.\n; Now I need to condense it into something that doesn't make me vomit when I see it.\n(fn [n] \n    (nth \n      (iterate (fn [x] \n                 (vec (concat [1] \n                              (map #(apply + %) (partition 2 1 x)) \n                              [1]))) \n               [1]) \n      (dec n)))","problem":97,"user":"4eed26af535d93acb0a668bb"},{"problem":97,"code":"(fn pt\n  [n]\n  (if (= 1 n)\n    [1]\n    (let [t (pt (dec n))]\n      (conj (into [1] (map + t (rest t))) 1))))","user":"52f8b86de4b047fd55836fdb"},{"problem":97,"code":"(fn [n] (let [pascals-triangle ((fn tri*\n                                  ([] (tri* []))\n                                  ([row]\n                                   (let [new-row\n                                         (conj (first (reduce\n                                                 #(vector (conj (first %1) (+ %2 (second %1))) %2)\n                                                 [[] 0]\n                                                 row)) 1)]\n                                     (cons new-row (lazy-seq (tri* new-row)))))))]\n          (nth pascals-triangle (- n 1))))\n\n; alt solution 1 (using math defn of pascal numbers):\n;(fn [r]\n;  (reduce #(cons\n;    (* (first %1)\n;       (/ (- r %2) %2))\n;  %1) [1] (range 1 r)))\n\n; alt solution 2 (building rows from both sides and using iterate function):\n;#(nth (iterate (fn [v]\n;                 (vec    ;need this so that conj adds to end, otherwise the resulting lazy-seq would conj as cons\n;                  (map + (cons 0 v) (conj v 0))))\n;               [1])\n;      (dec %))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":97,"code":"(fn tri [num]\n  (if (= 1 num)\n    [1]\n    (map + (apply conj [0] (tri (dec num))) (conj (into [] (tri (dec num))) 0))))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn p-tri [n]\r\n  (if (= n 1)\r\n   [1]\r\n   (vec (map #(reduce + %) (partition 2 1(concat [0](p-tri (dec n))[0]))))))","problem":97,"user":"4fab31a8e4b081705acca215"},{"code":"(fn [n]\r\n    (loop [i 1 r [1]]\r\n      (if (>= i n) r\r\n        (recur (inc i) \r\n               (concat [1] (map #(apply + %)\r\n                          (partition 2 1 r)) [1])))))","problem":97,"user":"4f58d92fe4b0a7574ea71858"},{"problem":97,"code":"(fn [vals] \n  (let\n    [res (range vals)\n     m (- vals 1)\n     c (fn [m n] (/ (apply * (take n (iterate dec m))) (apply * (take n (iterate inc 1)))))]\n    (vec (map #(c m %) res))))","user":"5ab23a78e4b073f1774425e1"},{"code":"(letfn  [(pascal [n] \n                 (cond (= n 1) [1] (= n 2) [1 1] \n                       :else\n                       (let [sum-prev (->> n dec pascal (partition 2 1) (map #(reduce + %)))]\n                        (->  sum-prev (conj 1) vec (conj 1))))\n                 )] pascal)","problem":97,"user":"51729002e4b044b2ef48a850"},{"code":"(fn f [a]\n  (if (= a 1) [1]\n    (let [r (f (dec a))]\n    (vec (map + (conj r 0) (cons 0 r)))\n    )\n)\n)","problem":97,"user":"50921f9ae4b09a7d0b586de1"},{"problem":97,"code":"(fn f [l]\n  (cond\n    (= 1 l) [1]\n    (= 2 l) [1 1]\n    :else\n    (let [b (dec l)\n          p (f b)\n          s (for [i (range 1 b)]\n            (+ (nth p (dec i)) (nth p i)))]\n      (flatten [1 s 1]))))","user":"568227fee4b0945ebc182a8a"},{"code":"(fn [n]\n  (loop [i n, r [1]]\n    (if (= i 1)\n      r\n      (recur\n        (dec i)\n        (map #(apply + %)\n          (partition 2 1 (concat [0] r [0])))))))","problem":97,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn [n]\n  (loop [row [1] cnt n] \n    (if (= cnt 1)\n      row\n      (recur (concat [1] (map #(apply + %) (partition 2 1 row)) [1]) (dec cnt)))))","problem":97,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":97,"code":"(fn sol [n]\n  (let [f (fn [v]\n            (conj\n             (into [1]\n                   (->>\n                    v\n                    (partition 2 1)\n                    (map (fn [[a b]] (+ a b)))))\n             1))]\n    (nth (iterate f [1]) (dec n))))","user":"55a65872e4b09e57187da299"},{"code":"#(reduce (fn [acc fraction] (conj acc (* (peek acc) fraction)))\n         [1]\n         (for [c (range 1 %)] (/ (- % c) c)))","problem":97,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn pascal [row]\n  (let [fact (fn [x] (reduce * (range 1 (inc x))))\n        choose (fn [n r] (/ (fact n) (* (fact (- n r)) (fact r))))]\n    (map #(choose (dec row) %) (range row))))","problem":97,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn [n]\n  (loop\n    [i 1\n     tr [1]]\n    (if (= i n)\n      tr\n      (recur\n       (+ 1 i)\n       (loop\n         [tr2 [1]\n          j 1]\n         (if (= i j)\n           (conj tr2 1)\n           (recur\n            (conj tr2 (+ (nth tr (- j 1))\n                         (nth tr j))\n                  )\n            (+ j 1)\n            )\n           )\n         )\n       )\n      )\n    )\n  )","problem":97,"user":"530d85dee4b08068f379eca8"},{"code":"(fn pascal-triangle [line]\n  (cond\n    (= line 1) [1]\n    (= line 2) [1 1]\n    :else \n      (flatten [1 (map #(reduce + %) (partition 2 1 (pascal-triangle (dec line)))) 1])))","problem":97,"user":"4f21838fe4b0d66497709fd2"},{"problem":97,"code":"(let [fact (fn \n                [n]\n                (loop [accum 1\n                       curr n]\n                  (if (= curr 0)\n                    accum\n                    (recur (* accum curr) (- curr 1)))))]\n     (let [choose (fn\n                    [n m]\n                    (/ (fact n) (* (fact m) (fact (- n m)))))]\n       (fn pascal-row\n         [x]\n         (let [n (- x 1)]\n           (loop [curr n\n                  accum []]\n             (let [new-accum (conj accum (choose n curr))]\n               (if (= curr 0)\n                 new-accum\n                 (recur (- curr 1) new-accum))))))))","user":"58152157e4b0f478707a0631"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         xs [1]]\n    (if (= i n) xs\n        (recur \n         (inc i) \n         (reduce-kv\n          (fn [coll idx next] (let [num (nth xs (inc idx) 0)]\n                            (conj coll (+ num next)))) [1] xs)))))","user":"5d84545ee4b0915913b1d38b"},{"code":"(fn [x]\n  (loop [i 1 out [1]]\n    (if (= x i)\n      out\n      (recur (inc i) (vec (map + (conj out 0) (cons 0 out)))))))","problem":97,"user":"4f3c772de4b0e243712b1f4c"},{"code":"(fn p [n]\n  (if (> n 1) \n    (conj (into [1] (map #(apply + %) (partition 2 1 (p (dec n))))) 1) \n    [1]))","problem":97,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":97,"code":"(fn pascal[x](last(take x(iterate #(map +'`(0 ~@%)`(~@% 0))[1]))))","user":"6085edade4b0736b099e42fc"},{"problem":97,"code":"(fn pt\n  ([n] (pt (dec n) [1]))\n  ([n p] (if (= n 0) p (pt (dec n) (concat [1] (map #(apply + %) (partition 2 1 p)) [1])))))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":97,"code":"(fn pascal [row]\n  (cond (= row 1) [1]\n        (= row 2) [1 1]\n        :else (conj (first\n                      (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascal (dec row))))1)))","user":"5bbbce70e4b0a20761a2360f"},{"code":"(fn row [n]\n  (letfn [(number [idx item]\n            (cond\n              (= idx 0) 1\n              (= idx (dec n)) 1\n              :else\n                (let [previous-row (row (dec n))]\n                  (+ (get previous-row (dec idx)) (get previous-row idx)))))]\n    (vec (map-indexed number (range n)))))","problem":97,"user":"4ec70f26535d6d7199dd36dd"},{"code":"(fn a[n](if (= n 1) [1] (let [v-n-last (a (dec n))\n                                 s-p-n (map + (next v-n-last) (drop-last v-n-last))]\n                             (-> (reduce conj [1] s-p-n)\n                                (conj 1)))))","problem":97,"user":"5036eba7e4b0af0658af77a5"},{"problem":97,"code":"(fn p\n  [n]\n  (if (= 1 n)\n    [1]\n    (concat [1] (mapv (partial apply +) (partition 2 1 (p (dec n))))  [1])) )","user":"5280539ce4b0757a1b1713f3"},{"problem":97,"code":"(fn [row]\n  (last\n   (take row\n         (iterate #(map + (conj % 0) (reverse (conj % 0))) [1]))))","user":"54302691e4b0dad94371f2d7"},{"problem":97,"code":"(fn [n]\n  (loop [ret [1] i 1]\n    (if (> i n)\n      ret\n      (recur (concat [1]\n                (map (fn [x]\n                       (+ (first x) (last x)))\n                     (partition 2 1 ret))\n                (when (not= i 1) [1]))\n             (inc i)))))","user":"54d000c7e4b018d918be98d7"},{"code":"#(let [t (dec %)]\n            (map (fn [k] \n              (letfn [(fac [n] (reduce * (range 1 (inc n))))] \n               (/ (fac t) (* (fac k) (fac (- t k)))))) (range (inc t))))","problem":97,"user":"4ede8789535d10e5ff6f5337"},{"problem":97,"code":"(fn pascal-triangle \n  [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (first\n                      (reduce (fn \n                                [[val res] x] [(conj val (+ res x)) x]) [[] 0] (pascal-triangle (dec n))))\n                    1))\n  )","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn pascal [order]\n  (letfn [(transform [base]\n            (concat [1]\n                    (map + (rest base) \n                           (butlast base))\n                    [1]))]\n    (nth (iterate transform [1]) (dec order))))","problem":97,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [n]\n  ((fn [i prev]\n     (if (= i n) prev\n       (recur (+ i 1) (map + (concat prev (list 0)) (concat (list 0) prev)))))\n   1 [1]))","problem":97,"user":"51da631be4b02ceefd947766"},{"problem":97,"code":"(fn [n]\n   (nth\n     (iterate\n       (fn [coll] \n         (let [size (count coll) newsize (inc size)] \n           (vec (for [k (range newsize)] \n                  (if (or (zero? k) (= size k)) 1 (+ (coll k) (coll (dec k))))))))\n       [1]) (dec n)))","user":"54094824e4b0addc1aec66da"},{"problem":97,"code":"(fn f [n]\n    (if (= n 1) [1]\n        (let [b (concat [0] (f (- n 1)) [0])]\n          (map + b (rest b)))))","user":"505106fee4b05ab4c7e07d38"},{"problem":97,"code":"(fn pasc\n  ([n prevrow]\n   (if (= n (count prevrow))\n     (vec prevrow)\n     (pasc n (vec (map + (conj prevrow 0) (reverse (conj prevrow 0)))))))\n  ([n]\n   (if (= n 1)\n     (vec '(1))\n     (pasc n (vec '(1))))))","user":"6088395de4b0ae75613dcee2"},{"code":"(fn pascal\n  [n]\n  (nth\n    (iterate \n      (fn [r]\n       (conj (->> (interleave r r)\n                  (rest)\n                  (drop-last)\n                  (partition 2)\n                  (map #(reduce + %))\n                  (cons 1)\n                  (vec))\n             1)) [1])\n    (- n 1)))","problem":97,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn patr [n]\n   (let [fct (fn [x] (reduce * (range 1 (+ 1 x))))]\n   (map (fn [k] (/ (fct (- n 1)) (fct k) (fct (- n k 1)))) (range n))\n))","problem":97,"user":"52c1f404e4b07a9af5792370"},{"problem":97,"code":"(fn p [n] (if (= n 1) [1]\n            (let [a (p (dec n)) b (rest a)] (concat [1] (map + a b) [1]))))","user":"54864662e4b0e286459a11b8"},{"code":"(fn [n]\n  ;; To allow regular row numbers in input (starting from 1,)\n  ;; decrement the input instead of requiring a zero start point.\n  (let [n (dec n)\n        points (map (fn [x] [n x]) (->> n inc (range 1)))]\n    (reduce #(conj %1 (-> (+ (first %2) 1) \n                          (- (second %2)) \n                          (* (last %1))\n                          (/ (second %2)))) [1] points)))","problem":97,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":97,"code":"(fn [n*]\n  (letfn [(next-row [row] (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))]\n    (case n*\n      1 '(1)\n      (loop [row []\n             n (dec n*)]\n        (if (zero? n)\n          row\n          (recur (next-row row) (dec n)))))))","user":"55a12668e4b0acc240e3150b"},{"problem":97,"code":"(fn [x]\n  (let [fact (fn [n] (if (< n 2) 1 (loop [a n b 1] (if (= a 1) b (recur (dec a) (* a b))))))\n        comb (fn [a b] (/ (fact a) (* (fact (- a b))(fact b))))]\n    (loop [t (dec x) y (dec x) out []]\n      (if (< t 0)\n        out\n        (recur (dec t) y (conj out (comb  y t)))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [n] (map #(/ (apply * (range (- n %) n))\n                 (apply * (range 1 (+ % 1))))\n             (range n)))","problem":97,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn pascals-triangle [n]\n  (let [initial-rows {1 [1] 2 [1 1]}\n        guts (fn [coll]\n               (let [limit (dec (count coll))\n                     add (fn [c n] (+ (nth c n) (nth c (inc n))))]\n                 (loop [result []\n                        idx 0]\n                   (if (= idx limit)\n                     result\n                     (recur (conj result (add coll idx)) (inc idx))))))\n        row (fn [coll] (vec (flatten [1 (guts coll) 1])))]\n    (if (>= 2 n)\n    (initial-rows n)\n    (loop [result [1 1]\n           idx 2]\n      (if (= idx n)\n        result\n        (recur (row result) (inc idx)))))))","problem":97,"user":"4edb1774535d10e5ff6f5315"},{"problem":97,"code":"(fn [n] \n  (letfn [(pasc [row col]\n            (if (or (= col 1) (= row col)) \n                1\n                (+ (pasc (- row 1) (- col 1)) \n                   (pasc (- row 1) col))))]\n    (map #(pasc n %) (range 1 (inc n)))))","user":"516f5b7ee4b0ef3e37990e7e"},{"code":"(letfn [(p [n]\n           (if (= n 1) [1]\n             (let [rs (p (dec n))]\n               (concat [1] (map + rs (rest rs)) [1]))))]p)","problem":97,"user":"4dbe8729535d020aff1edf62"},{"code":"(fn [n]\n  (nth (iterate\n        (fn [start] (map #(reduce + %)\n                        (partition 2 1 (cons 0 (conj (vec start) 0)))))\n        [1])\n       (dec n)))","problem":97,"user":"4db1fe241254ad5b4805fa77"},{"code":"(fn pascal [n]\n  (letfn\n    [(row [c]\n       (map + (lazy-cat '(0) c) (lazy-cat c '(0))))]\n    (nth (iterate row '(1)) (dec n))))","problem":97,"user":"4e47f4f3535dc968683fc4bb"},{"problem":97,"code":"(fn [row] \n  (map\n    (fn ncr [n r]\n      (/ (apply * (range n (- n r) -1))\n         (apply * (range 1 (inc r)))\n      ))\n    (repeat (dec row))\n    (range row)))","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn\n  [n]\n  (let* [n (dec n)\n         factorial (fn [n] (apply * (range 1 (inc n))))\n         choose    (fn [i j]\n                     (/ (factorial i) (* (factorial j) (factorial (- i j)))))]\n        (for [k (range 0 (inc n))]\n          (choose n k))))","problem":97,"user":"511b233ae4b07ab9ec456180"},{"code":"#(nth (iterate (fn tri [coll] (loop [l (concat [0] coll [0]) r '[]]\n                   (if (< (count l) 2)\n                     r\n                     (recur (rest l) (conj r (+ (first l) (second l))))))) [1]) (dec %))","problem":97,"user":"4eb2eae5535d7eef30807351"},{"problem":97,"code":"(fn [x]\n  (let [cal_row (fn [row]\n                  (loop [p (first row)\n                         n (second row)\n                         loput (rest row)\n                         sum []]\n                    (if (nil? n)\n                      sum\n                      (recur (first loput) (second loput) (rest loput) (concat sum [(+ p n)])))))]\n   (loop [i 1\n         r [1]]\n      (if (= i x)\n        r\n        (recur (inc i) (concat [1] (cal_row r) [1]))))))","user":"57c314f3e4b05aa3c4741cba"},{"problem":97,"code":"(fn pascal [n]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (let [prev_row (pascal (dec n))]\n                     (loop [p_r prev_row c_r [1]]\n                           (if (empty? (rest p_r))\n                               (conj c_r 1)\n                               (recur (rest p_r) (conj c_r (+ (first p_r) (second p_r)))))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn P97 [n]\n  (loop [count n c 1 Vc 1 result [1]]\n    (if (= count 1)\n      result\n      (recur (dec count) (inc c) (* Vc (/ (- n c) c)) (conj result (int (* Vc (/ (- n c) c))))))))","problem":97,"user":"5046f909e4b03b02161376b5"},{"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (nth (iterate #(concat [1] (map (partial reduce +) (partition 2 1 %)) [1]) [1 1]) (- n 2))))","problem":97,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [n]\n  (letfn [(p [t] \n            (->> t\n              (reductions \n                (fn [[r p] x]  [(+ p x) x])\n                        [1 0])\n              (map first)\n              cycle\n              next\n              (take (inc (count t))))\n              )]\n    (last (take n (iterate p [1])))))","problem":97,"user":"4e50e2a0535dc968683fc4ef"},{"problem":97,"code":"(fn [x]\n(let [n (- x 1) fac (fn [n]\n(if (= 0 n) 1\n(reduce * (range 1 (+ n 1))  \n)\n))] \n(loop [counter 0 output []] \n (cond \n  (> counter n) output\n  :else (recur (+ counter 1) \n               (conj output (/ (fac n) (* (fac (- n counter)) (fac counter))))\n  )\n )\n)))","user":"580d1da7e4b0849f6811b72f"},{"code":"(fn [rows]\n  (loop [remaining rows\n         current-row [1]]\n    (if (= 1 remaining)\n      current-row\n      (recur \n        (dec remaining)\n        (concat \n          (reduce (fn [acc [a b]] (conj acc (+ a b))) [1] (partition 2 1 current-row))\n          [1])))))","problem":97,"user":"51ae350fe4b09397d5109790"},{"problem":97,"code":"(fn [i]\n  (map (fn [n k]\n  (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n    (/ (rprod (- n k -1) n) (rprod 1 k))))\n       (repeat (dec i))\n       (range i)\n       )\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":97,"code":"(fn nth-pascal [n] \n    (if (<= n 1)\n        [1]\n        (concat [1] \n            (map #(apply + %) (partition 2 1 (nth-pascal (dec n))))\n            [1])))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map (partial apply +)\n         (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","user":"53e3f7a8e4b036ad0777e408"},{"code":"(fn f [n]\n  (lazy-seq (if (= n 1)\n              [1]\n              (let [last-row (f (dec n)) p1 (rest last-row) p2 (drop-last last-row)]\n                (concat [1] (map + p1 p2) [1]))\n            )\n  )\n)","problem":97,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn a [r]\n  (let [columns (range  r)\n        fact #(reduce * (range 1 (inc %)))\n        choose (fn [n k] (/ (fact n) (* (fact (- n k)) (fact k))))]\n        (map #(choose (dec r) %) columns)))","problem":97,"user":"508e13abe4b0f17d83ea26c7"},{"problem":97,"code":"(fn ! [n]\n  (if (= 1 n) [1]\n      (flatten [1 (map + (rest (! (- n 1))) (! (- n 1))) 1])))","user":"55201d18e4b08d5046aa8a5d"},{"problem":97,"code":"(fn [m]\n  (if (= m 1)\n    [1]\n    (let [n (dec m)]\n  \t\t(letfn [(f1 [x]\n\t    \t     (reduce #(* %1 (inc %2)) 1 (range x)))\n  \t\t   \t(f2 [s x]\n    \t\t\t  (/ (f1 n)\n            \t\t\t(* (f1 x) \n                \t\t   (f1 (- s x)))))]\n   \t \t\t(map #(f2 n %) (range (inc n)))))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn f [n] (if (= n 1) [1] (map + (cons 0 (f (- n 1))) (reverse (cons 0 (f (- n 1)))))))","problem":97,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":97,"code":"(fn [f]\n  (let [genrow (fn [v]\n                 (apply\n                  vector (cons 1\n                               (reverse\n                                (cons 1 (for [i (range (dec (count v)))]\n                                          (+ (nth v i) (nth v (inc i)))))))))]\n    (nth (iterate genrow [1]) (dec f))))","user":"55f8180fe4b06e875b46ceba"},{"problem":97,"code":"(fn pascal [n]\n  (map\n    #(Math/round (double (reduce * (map\n                                     (fn [i] (/ (- n i) i))\n                                     (range 1 (inc %))))))\n    (range 0 n)))","user":"53fe1b42e4b0de5c418485f1"},{"problem":97,"code":"(fn pascal-triangle [x]\n  (condp = x\n    1 [1]\n    (let [prv (pascal-triangle (dec x))\n          prv-left (concat [0] prv)\n          prv-right (concat prv [0])]\n      (vec (map + prv-left prv-right)))))","user":"4e36e647535deb9a81d77f36"},{"code":"(fn pascal [line]\n  (cond\n    (= line 1) '(1)\n    (= line 2) '(1 1)\n    :else (let [previous-line (pascal (dec line))]\n            (concat [1]\n\t            (for [index (range 0 (dec (count previous-line)))\n\t                  :let [\n\t                        x1 (nth previous-line index)\n\t                        x2 (nth previous-line (inc index))\n\t                  ]] (+ x1 x2))\n            [1]))))","problem":97,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":97,"code":"(fn xxx[n] ( nth (iterate #(concat '(1) (map + % (rest %)) '(1)) '(1)) (- n 1)))","user":"53d63e6ce4b0e771c3025454"},{"code":"(fn [n] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (- n 1)))","problem":97,"user":"4ee82223535d93acb0a66877"},{"problem":97,"code":"(fn [n]\n  (let [f (fn [v] (concat [1] (map + v (rest v)) [1]))]\n    (last (take n (iterate f [1])))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":97,"code":"(fn pascals-triangle [n]\n  \"Build the nth row of Pascals triangle.\"\n  (loop [row-index 1\n         row [1]]\n    ;; If n is reached, return the last calculated row\n    (if (= row-index n)\n      row\n      ;; else recursive call loop with incremented row-index\n      ;; and the newly calculated row\n      (recur\n       (inc row-index)\n       ((fn [oldrow]\n          (vec (concat [1]\n               (map-indexed #(+ %2 (oldrow (+ %1 1)))\n                            (take (- (count oldrow) 1) oldrow))\n               [1])))\n        row)))))","user":"5a06c154e4b01bb0ae8afdce"},{"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n    (let [previous (pascal (dec n))]\n     (vec (map + (concat previous [0]) \n                 (concat [0] previous))))))","problem":97,"user":"4dcfbc44535d5973398f92a7"},{"code":"(fn [n]\n  (nth\n   (iterate\n    #(vec (map + (into [0] %) (conj % 0))) [1])\n   (dec n)))","problem":97,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn pascal [n]\n  (cond\n    (< n 2) [1]\n    (= n 2) [1 1]\n    :else (concat \n            [1]\n            (map (partial apply +) \n                 (partition 2 \n                            (interleave \n                              (pascal (dec n)) \n                              (rest (pascal (dec n))))))\n            [1])    \n  )\n)","problem":97,"user":"4ecfa05c535d44c135fd68b9"},{"problem":97,"code":"(fn [n]\n  (letfn [(fact [n k]\n            (loop [i n r 1]\n              (if (= i k)\n                r\n                (recur (dec i) (* i r)))))\n          (choose [n m]\n            (let [n (fact n (- n m))\n                  d (fact m 0)]\n              (/ n d)))]\n    (->>  n\n          (range)\n          (map (partial choose (dec n))))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn b [m] (loop [ n (into [] (range m))\n                    i 1\n                   e []]\n              (if (empty? n) e \n                (if (= (first n) 0)\n                  (recur (next n) i (conj e 1))\n                  (recur (next n) (* i (/ (- m (first n)) (first n))) (conj e (int (* i (/ (- m (first n)) (first n))))))))))","problem":97,"user":"4fe97adde4b0547ebccb245e"},{"problem":97,"code":"(fn pascals-triangle-row [n]\n  (if (= 1 n)\n    [1]\n    (->> (concat [0] (pascals-triangle-row (dec n)) [0])\n         (partition 2 1)\n         (map (partial apply +))\n         vec)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn pascal-row\n  [r]\n  (let [n (dec r)\n        ci (range r)]\n    (map (fn [k] (/ (reduce * (range 1 (inc n))) \n                    (* (reduce * (range 1 (inc k))) \n                       (reduce * (range 1 (inc (- n k))))))) \n         ci)))","problem":97,"user":"52f3af46e4b05e3f0be25f14"},{"code":"(fn fun [n]\n\t(if (= n 1) \n\t\t[1]\n\t\t(let [prev (fun (dec n))]\n\t\t\t(map + (concat prev [0]) (concat [0] prev)))))","problem":97,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [a] (nth (iterate (fn p\n                            [x] (concat [1] (map #(reduce + %) (partition 2 1 x)) [1]))\n                          [1]) (- a 1)))","problem":97,"user":"4f083048535dcb61093f6c33"},{"problem":97,"code":"(fn [r]\n  (let [n-comb (fn n-comb [n k]\n                 (let [nm (apply * (range (inc (- n k)) (inc n)))\n                       dn (apply * (range 1 (inc k)))]\n                   (/ nm dn)))]\n    (mapv #(n-comb (dec r) %) (range 0 r))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":97,"code":"(fn pascal\n  [x]\n  (if (= x 1)\n    [1]\n    (concat\n     [1]\n     (vec (map\n           (partial reduce +)\n           (partition 2 1 (pascal (dec x)))))\n     [1])))","user":"53d28800e4b00fb29b22131e"},{"problem":97,"code":"#(if (= % 1) [1] ( loop[ a [1 1] i 2 n % ] (if (= i n) a ( recur (concat [(first a)] (for [i (range (- (count a) 1))] (+ (nth a i) (nth a (inc i)))) [(last a)]) (inc i) n))))","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [row]                                                                                                                                                                                                                                                                             \n    (let [n (- row 1)]                                                                                                                                                                                                                                                                 \n      (vec                                                                                                                                                                                                                                                                             \n       (map                                                                                                                                                                                                                                                                            \n        (fn [y] (/ (reduce * (range 1 (inc n)))                                                                                                                                                                                                                                        \n                (* (reduce * (range 1 (inc y)))                                                                                                                                                                                                                                        \n                   (reduce * (range 1 (inc (- n y)))))))                                                                                                                                                                                                                               \n        (range (+ n 1))))))","problem":97,"user":"4e9ff8d0535d7eef3080729c"},{"problem":97,"code":"(fn [n]\n  (if (<= n 2)\n    (repeat n 1)\n    (loop [row [1 1]]\n      (if (= (count row) n)\n        row\n        (recur\n          (concat [1]\n                  (map #(apply + %) (map vector row (drop 1 row)))\n                  [1]))))))","user":"5486e317e4b0e286459a11c0"},{"code":"#(letfn [(rcv [[r c v]] [r (inc c) (* v (/ (- r c) c))])]\n  (map last (take % (iterate rcv [% 1 1]))))","problem":97,"user":"4e22b78b535d04ed9115e81e"},{"code":"#(letfn [(worker [a n]\n              (if (= n 1)\n                a\n                (recur (cons 1 (map (fn [x] (+ (nth a (dec x))\n                                               (if (< x (count a)) (nth a x) 0)))\n                                    (range 1 (inc (count a)))))\n                       (dec n))))]\n   (worker [1] %))","problem":97,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":97,"code":"(fn [row]\n  (loop [n (- row 1)\n         d 1\n         acc '(1)]\n    (if (not= n 0)\n      (recur (dec n) (inc d) (conj acc (int (* (first acc) (/ n d)))))\n      acc)))","user":"5c718e6ce4b0fca0c1622796"},{"problem":97,"code":"(fn pascal-tri\n  ([n] (pascal-tri n 1 [1]))\n  ([n currIndex seq_]\n   (if (<= n currIndex)\n     seq_\n     (let [new-seq (map #(apply + %) (partition 2 1 seq_))] \n       (recur n (inc currIndex) (concat '(1) new-seq '(1)))\n       )\n     )\n   )\n  )","user":"6059d824e4b07e92fa001acf"},{"problem":97,"code":"(fn pascal [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n       (dec n)))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn pascal [n]\n  (let [fact (fn [n] (reduce * (range 1 (inc n))))\n        comb (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map (partial comb (dec n)) (range n))))","problem":97,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn our-pasc [n]\r\n  (if (= n 1)\r\n    '[1]\r\n    (conj (map #(apply + %) (partition-all 2 1  (our-pasc (- n 1)))) 1)))","problem":97,"user":"4ef0f1a1535dced4c769f212"},{"problem":97,"code":"(fn pt [n]\n  (cond \n    (= n 1) [1]\n    :else (concat \n      [1]\n      (let [y (pt (- n 1))] \n        (for [x (range 1 (- n 1))] \n          (+ (nth y x) (nth y (- x 1)))))\n      [1])))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn pt [i]\r\n  (if (= 1 i) \r\n      [1]\r\n      (concat [1] \r\n              (map (partial apply +) (partition 2 1 (pt (dec i)))) [1])))","problem":97,"user":"4db92654535d1e037afb21a0"},{"problem":97,"code":"(fn[n]\n    (loop [pascal '(1)\n           i 1]\n        \n        (if (< i n)\n            (recur (concat pascal (list (/ (* (last pascal) (- n i)) i))) (inc i))\n            pascal)))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"(fn pasc\n  [n]\n  (if (= n 1)\n  [1]\n  (nth (iterate (fn pasc [xs] (concat [1] (map-indexed (fn [idx itm] (+ (nth xs idx) (nth xs (inc idx)))) (rest xs)) [1])) []) (dec n))))","problem":97,"user":"536aa86de4b0243289761eb1"},{"problem":97,"code":"(fn [n]\n    (let [pascal (fn []\n                   (iterate #(concat [1] \n                                     (map + % (rest %)) \n                                     [1]) \n                            [1]))]\n      (nth (pascal) (dec n))))","user":"54ad9d76e4b09f271ff37ce6"},{"problem":97,"code":"(fn tri [n]\n\t(if (= 1 n) [1]\n\t\t(let [higher (tri (dec n))]\n\t\t\t(concat [1] (loop [remaining higher acc []]\n\t\t\t\t(if (< (count remaining) 2) (reverse acc)\n\t\t\t\t\t(recur (rest remaining) (cons (+ (first remaining) (second remaining)) acc))\n\t\t\t\t)\n\t\t\t) [1])\n\t\t)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":97,"code":"(fn pascal [n] (cond (= n 1) [1] (= n 2) [1 1] :else (flatten [1 (map (fn [[x y]] (+ x y)) (partition 2 1 (pascal (dec n)))) 1])))","user":"50aa777fe4b056ee01935866"},{"code":"(fn pascal [n]                                                          \n          (if (= n 1) [1]                                                       \n              (let [ prev (pascal (dec n))                                      \n                     a (concat [0] prev)                                        \n                     b (reverse a)]                                             \n                     (apply vector (map + a b)))))","problem":97,"user":"4eed6b32535d93acb0a668bc"},{"problem":97,"code":";; The ugliest pascal triangle ever\n\n(fn [n]\n  (let [q (fn p \n            ([] p [1])\n            ([r] (concat [1] (map #(apply + %) (map list r (rest r))) [1])))]\n    ((apply comp (repeat n q)))))","user":"5484143de4b0e286459a1197"},{"problem":97,"code":"(fn [x]\n  (loop [curr 2\n         pascal [1 1]]\n    (if (= 1 x)\n      [1]\n      (if (= 2 x)\n        pascal\n        (if (= curr x)\n          pascal\n          (recur (inc curr)\n                 (loop [lst pascal\n                        new []]\n                   (if (empty? (rest lst))\n                     (concat [1] new [1])\n                     (recur (rest lst) (cons (+ (first lst) (second lst)) new))))))))))","user":"57f8104ce4b0d3187e900910"},{"problem":97,"code":"#(\n (fn pascal[n]\n   (if (= n 1)\n     [1]\n     (map + (cons 0 (pascal (dec n))) (reverse (cons 0 (pascal (dec n)))))\n   )  \n ) %\n)","user":"545537c1e4b0e397800069dd"},{"code":"(fn nestred [cnt]\n  (loop [s '(1)  n (- cnt 1)]\n    (if (= n 0) s\n        (recur   (flatten  (conj []\n                                 (reductions (fn [init is]\n                                               (reduce + is ))\n                                             1 (partition 2 1  s))\n                                 1))\n                 (dec n)))))","problem":97,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":97,"code":"(fn __ [n]\n  (loop [acc [1]]\n    (if (= n (count acc))\n      acc\n      (recur (mapv + (cons 0 acc) (conj acc 0))))))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn [r]\n  (if (= 1 r) [1]\n  (if (= 2 r) [1 1]\n  (if (= 3 r) [1 2 1]\n  (if (= 4 r) [1 3 3 1]\n  (if (= 5 r) [1 4 6 4 1]\n    [1 10 45 120 210 252 210 120 45 10 1]))))))","problem":97,"user":"4fcc103fe4b0ee37620e185f"},{"problem":97,"code":"(fn [x] (#(map (fn [n k] (let [fact (fn [y] (apply * (range 1 (inc y))))]\n                                   (/ (fact n) (* (fact k) (fact (- n k)))))) %1 %2) (repeat x (dec x)) (range)))","user":"5751f2a2e4b02ea114799292"},{"problem":97,"code":"(fn algo\n  [n]\n  (last (take n (iterate (fn [vect]\n             (vec (concat (first (partition 1 vect)) (map #(reduce + %)(partition 2 1 vect)) (last (partition 1 vect)) ))\n             ) [1])))\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":97,"code":"(fn [n]\n  (let [fact (fn [n] (if (= 0 n) 1 (loop [i n r 1] (if (<= i 1) r (recur (dec i) (* r i))))))\n        c (fn [x y] (/ (fact x) (* (fact y) (fact (- x y)))))]\n    (for [i (range n)]\n      (c (dec n) i))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":97,"code":"(fn p\n  ([n] (p n [1]))\n  ([n r] (if (= n (count r)) r (p n (concat [1] (map #(reduce + %) (partition 2 1 r)) [1])))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":97,"code":"(fn pascal [x] (nth (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1]) (- x 1)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (conj\n           (into [1] (map #(apply + %) (partition 2 1 (pascal (- n 1)))))\n           1)))","user":"53f053ebe4b0742d9025b0d3"},{"problem":97,"code":"; https://en.wikipedia.org/wiki/Binomial_coefficient\n(fn [x]\n  (let [! #(reduce * (take % (iterate inc 1))),\n        bin-coeff #(/ (! %) (* (! %2) (! (- % %2))))]\n    (map #(bin-coeff (dec x) %) (range x))))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn [n] \n  (reduce (fn [acc el]\n               (let [s1 (cons 0 acc) \n\t\t\t         s2 (concat acc [0])] \n\t\t\t    (map + s1 s2))) \n   [1] (range (dec n))))","problem":97,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [n]\n  (-> (iterate (fn [row]\n                 (map + `(0 ~@row) `(~@row 0)))\n               [1])\n      (nth (dec n))))","problem":97,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":97,"code":"(fn [n]\n          (let [rows (iterate #(concat [1] (map + % (rest %)) [1]) \n                             [1])]\n            (nth rows (dec n))))","user":"54b13dbce4b09f271ff37d1c"},{"problem":97,"code":"(fn [n]\n  (nth (iterate \n         (fn [col] \n           (let [nextrow (map (fn [[a b]] (+ a b)) (partition 2 1 col))]\n             (flatten [1 nextrow 1]))) [1]) (dec n)))","user":"541ddadbe4b01498b1a71a84"},{"problem":97,"code":"(fn [x]\n  (letfn [(nextRow [prev acc]\n                   (if (empty? (rest prev))\n                     (concat [1] acc [1])\n                     (nextRow (rest prev) (concat acc [(+ (first prev) (second prev))]))))     \n          (helper [n acc]\n                  (if (= n 2)\n                    acc\n                    (helper (dec n) (nextRow acc []))))]\n    (cond\n     (= x 1)[1]\n     (= x 2) [1 1]\n     :else (helper x [1 1]))))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"(fn myf [x] (if (= x 1) [1] \n              (let [p1 (cons 0 (myf (dec x))) p2 (rest p1) ] \n                (conj (mapv + p1 p2) 1))\n              ))","problem":97,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn pt [n]\n  (letfn [(nr [r]\n             (vec (concat [1] (map #(reduce + %) (partition 2 1 r)) [1])))]\n    (cond\n     (= 1 n) [1]\n     (= 2 n) [1 1]\n     :else (last (into [] (take (- n 1) (iterate nr [1 1])))))))","problem":97,"user":"4faafccde4b081705acca209"},{"code":"(fn [n]\n  \n        (nth  \n               (iterate #(concat '(1) (map + (rest %1) %1) '(1)) [1]) (dec n)))","problem":97,"user":"5183f5d7e4b02826a645f393"},{"problem":97,"code":"(fn pascrow [n]\n    (map\n     (fn [x] (/ (reduce * (range 1 n))\n                (* (reduce * (range 1 (- n x)))\n                   (reduce * (range 1 (inc x))))\n                ))\n     (range n)\n     )\n    )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn pascalt [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n (let [fila (pascalt (dec n))]\n  (vec (map + (cons 0 fila)\n              (conj fila 0))))))","problem":97,"user":"4f04a06d535dcb61093f6bd9"},{"problem":97,"code":"(fn pt [x]\n  (if (= x 1)\n    [1]\n    (let [above (pt (dec x))]\n      (loop [i 0 acc []]\n        (cond\n            (= i 0) (recur (inc i) (conj acc 1))\n            (= i (dec x)) (conj acc 1)\n            :else (recur (inc i) (conj acc (+ (nth above (dec i)) (nth above i)))))))))","user":"5b0bea6de4b0cc2b61a3bdda"},{"code":"(fn [n]\n  (let [f (fn [n] (apply * (range 1 (inc n))))\n        c (fn [n j] (/ (f n) (f j) (f (- n j))))]\n    (map (partial c (dec n)) (range n))))","problem":97,"user":"4ff3df0fe4b0678c553fc355"},{"problem":97,"code":"(fn f97 [line]\n  (letfn [(myfn [x y](if (or (= x y) (= y 1)) 1 (+ (myfn (dec x) y) (myfn (dec x) (dec y)))))]\n    (map myfn (repeat line line)(range 1 (inc line)))\n    )\n\n\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn pascals-triangle-row [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascals-triangle-row (dec n))\n          zero-and-prev `[0 ~@prev]\n          prev-and-zero `[~@prev 0]]\n      (map + zero-and-prev prev-and-zero))))","problem":97,"user":"4eecc9ad535d93acb0a668b4"},{"problem":97,"code":"(fn pt \n  ([r] (pt r [1]))\n  ([r a] (if (= r (count a)) \n           a\n           (pt r (map (partial apply +) (partition 2 1 (concat [0] a [0])))) )))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":97,"code":"(fn [x]\n  (letfn [(f [x]\n             (let [padded (flatten (vector 0 x 0))]\n               (map #(apply + %) (partition 2 1 padded))))]\n    (last (take x (iterate f '(1))))))","user":"55ff562fe4b00f4cabc57660"},{"code":"(fn tri\r\n  [n]\r\n  (let [f (fn [s]\r\n            (let [c (count s)]\r\n              (vec\r\n                (concat [1]\r\n                  (for [i (range (dec c))]\r\n                    (+ (s i) (s (inc i))))\r\n                [1]))))]\r\n    (case n\r\n      1 [1]\r\n      2 [1 1]\r\n      (last (take (dec n) (iterate f [1 1]))))))","problem":97,"user":"500159b3e4b0678c553fc419"},{"problem":97,"code":"#(nth\n    (iterate \n     (fn [row] \n       (vec\n        (concat [1]\n                (map \n                 (partial apply +) \n                 (partition 2 1 row))\n                [1])))\n     [1])\n    (- % 1)\n    )","user":"567476bde4b05957ce8c6139"},{"problem":97,"code":"(fn pascal [index]\n   (cond (= index 1) [1]\n         (= index 2) [1 1]\n         :else ((fn pascal-next [row next-row] \n                  (if (= 1 (count row)) \n                    (cons 1 (conj next-row 1))\n                    (recur \n                     (rest row) \n                     (conj next-row (+ (first row) (first (rest row)))))))\n                (pascal (dec index)) [])))","user":"560039cce4b04bb52996e162"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate (fn [nv](map +' `(0 ~@nv) `(~@nv 0))) [1]))))","user":"5c852e3ae4b0c8042a70ce78"},{"code":"#(nth\n  (iterate\n\t\t(fn [prev-row]\n  \t\t\t(->>\n    \t\t\t(concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n    \t\t\t(map (partial apply +) ,,,)))\n \t\t\t\t[1])\n\t(-% 1))","problem":97,"user":"4ec16c21535dfed6da9c6dac"},{"problem":97,"code":"(fn [n]\n    (let [seqs (iterate (fn [coll] (cons 1 (map #(apply + %) (partition 2 1 [0] coll))))\n                        [1])]\n      (nth seqs (dec n))))","user":"5ac6ef9be4b0e27600da7779"},{"problem":97,"code":"(fn [n] \n  (nth\n       (iterate \n         (fn [p] \n           (map + (concat [0] p) (concat p [0])))\n         [1])\n   (dec n)))","user":"54236ce1e4b01498b1a71ad1"},{"problem":97,"code":"(fn [rnum]\n  (loop [row [1] rcd rnum]\n    (if (= rcd 1)\n      row\n      (recur (concat [1] (map #(apply + %) (partition 2 1 row)) [1]) (dec rcd))\n      )))\n\n\n;(fn [rnum]\n;  (loop [row [1]\n;         rcd rnum]\n;    (if (= rcd 1)\n;      row\n;      (recur (flatten (vector 1 (map #(+ (first %) (last %)) (partition 2 1 row)) 1)) (dec rcd))      \n;      )))","user":"55150524e4b055c2f668d4d9"},{"problem":97,"code":"(fn [rownum]\n   (let [get-left-prev #(get %1 (dec %2) 0)\n         get-right-prev #(get %1 %2 0)\n         lr-sum #(+ (get-left-prev %1 %2) (get-right-prev %1 %2))\n         next-row #(mapv (partial lr-sum %) (range (inc (count %))))]\n     (last (take rownum (iterate #(next-row %) [1])))))","user":"5978c844e4b01722bebd4d18"},{"code":"(fn [n] (\n    nth (\n      iterate (\n        fn [xs] (\n          #(\n            concat '(1) % '(1)\n          ) (\n            drop 2 (map (partial apply +) (\n              reductions #(list (last %) %2) '(0 0) xs)\n              )\n          )\n        )\n      ) [1]\n    ) (- n 1)\n  )\n)","problem":97,"user":"4e7f4147535db966e863cc3d"},{"problem":97,"code":"(fn [n]\n         (loop [numer (dec n)\n                denom 1\n                coll [1]]\n           (if (zero? numer)\n             coll\n             (recur\n              (dec numer)\n              (inc denom)\n              (conj coll (/ (* (last coll) numer) denom))))))","user":"59438419e4b060784b3b7929"},{"code":"(fn [r]\n  (reductions #(* % (/ (- r %2) %2)) 1 (range 1 r)))","problem":97,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":97,"code":"(fn\n  [x]\n  (let [perm (fn [n r]\n               (let [fak (fn fak [i]\n                           (if (> i 0)\n                             (* i (fak (- i 1)))\n                             1))]\n                 (/ (fak n) (* (fak r) (fak (- n r))))\n                 ))]\n    (mapv #(perm (- x 1) %) (range x))\n    ))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":97,"code":"(fn [m]\n  ((fn pascal-triangle-row [n]\n     (letfn [(factorial [n]\n               (reduce * (range 1 (inc n))))\n             (binomial-coefficient [k]\n               (quot (factorial n)\n                     (* (factorial k)\n                        (factorial (- n k)))))]\n       (map binomial-coefficient (range (inc n))))) (dec m)))","user":"53fd66a4e4b0de5c418485e3"},{"problem":97,"code":"(fn pascal [n] \n  (if (= n 1)\n     [1]\n     (let [prev (pascal (dec n))] \n       (into [] (map #(apply + %) (partition 2 1 (concat [0] prev [0])))) \n     ) \n  )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [n]\n   (loop [acc [1] t 1]\n     (if (= t n) acc\n     (recur (concat [1] (map #(apply + %) (partition 2 1 acc)) [1]) (inc t)))))","problem":97,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn pascal [n]\n   (conj (cond\n          (= 1 n) []\n          (= 2 n) [1]\n          :else\n            (vec (let [prev (pascal (dec n))]\n              (for [x (range 0 (dec n))]\n                (let [i_0 (get prev (dec x))\n                      i_1 (get prev x)]\n                  (if (nil? i_0)\n                    i_1\n                    (+ i_0 i_1)\n                    )\n                  )\n                )\n              ))\n          )\n         1)\n   )","problem":97,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn pascal [n]\n\t(if (= n 1)\n\t\t[1]\n\t\t(conj (into [1]\n\t\t\t(map (partial apply +) \n\t\t\t\t(partition 2 1 (pascal (dec n)))))\n\t\t\t\t1)))","problem":97,"user":"51ba4482e4b0fe3ecfb4642b"},{"code":"#(letfn [(row [prev]\n           (concat [1] (map (partial apply +) (partition 2 1 prev)) [1]))]\n   (nth (iterate row [1]) (dec %)))","problem":97,"user":"51f9527fe4b09be9c177e549"},{"problem":97,"code":"(fn p [n] (if (>= 1 n) [1]\n                     (concat [1] (map #(apply + %) (partition 2 1 (p (dec n)))) [1])))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":97,"code":";(fn [n]\n;  (loop [index 1\n;         result []]\n;    (if (< n index)\n;      (get result (dec n))\n;      (cond\n;        (= index 1) (recur (inc index) (conj result [1]))\n;        (= index 2) (recur (inc index) (conj result [1 1]))\n;        :else\n;        (recur\n;          (inc index)\n;          (conj result\n;                ((fn [last-result new-result]\n;                   (if (= 1 (count last-result))\n;                     (conj new-result 1)\n;                     (recur (next last-result) (conj new-result (+ (first last-result) (second last-result))))\n;                     )\n;                   )\n;                  (last result)\n;                  [1]\n;                  )\n;                )\n;          )\n;        )\n;      )\n;    )\n;  )\n(fn pascal-triangle [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (concat [1] (map #(+ (first %) (second %)) (partition 2 1 (pascal-triangle (dec n)))) [1])\n    )\n  )","user":"566639f4e4b0e91d5f5c566b"},{"problem":97,"code":"(fn [a] (let [num (dec a)] \n          (loop [x 1 y [1]] (if (= x (inc num)) y (recur (inc x) (conj y (* (last y) (/ (- (inc num) x) x))))))))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":97,"code":"(fn pascal [row]\n  (let [n (dec row)]\n    (loop [ k   0\n            acc [] ]\n      (cond\n       (= n k)   (conj acc 1)\n       (zero? k) (recur (inc k) (conj acc 1))\n       :else     (let [prev        (last acc)\n                       numerator   (- row k)\n                       denominator k]\n                   (recur (inc k) (conj acc (* prev (/ numerator denominator)))) ) ))))","user":"5e0e14bde4b099d064962fa3"},{"code":"(fn pascal [n]\n  (case n\n    1 [1] \n    (loop [i [1 1]]\n      (if (= n (count i)) i \n        (recur (map (partial apply +) (partition 2 1 `[0 ~@i 0])))))))","problem":97,"user":"50e7dd5de4b077ad597af36b"},{"problem":97,"code":"(fn p\n  ([n] (p n [1] 1))\n  ([n r i] \n   (if\n     (= i n)\n     r\n     (recur n (concat [1] ((fn f ([r] (f r [])) ([r t] (if (< (count r) 2) t (recur (rest r) (conj t (apply + (take 2 r))))))) r) [1]) (inc i)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [n]\n  (nth (iterate (fn [row]\n                  (map (partial apply +) (partition 2 1 (concat [0] row [0]))))\n                [1])\n       (dec n)))","problem":97,"user":"5173726be4b098276e74652c"},{"problem":97,"code":"(fn [n]\n  (->>\n    (range 1 n)\n    (reduce (fn [acc k] (cons (* (first acc) (/ (- n k) k)) acc)) `(1))\n    (map int)))","user":"5901158de4b0438e51c2d039"},{"problem":97,"code":"(fn [rownum]\n\n  (if (= rownum 1)\n    [1]\n\n    (loop [start [1 1]\n           row rownum]\n      (if (= row 2)\n        start\n\n        (recur (\n\n                 (fn [vect]\n\n                   (if (= 1 (count vect))\n                     [1]\n\n                     (if (= 2 (count vect))\n                       [1 2 1]\n\n                       (loop [acc []\n                              start vect]\n\n                         (if (= 1 (count start))\n                           (concat [1] acc [1])\n                           (let [\n                                 vec (take 2 start)\n                                 one (first vec)\n                                 two (last vec)\n                                 ]\n\n                             (recur (conj acc (+ one two)) (rest start)   )\n                             )\n                           )\n                         )\n\n                       )\n\n\n\n                     )\n                   )\n\n\n\n\n\n\n                 start) (dec row))\n        )\n\n\n\n      )\n\n    )\n\n\n\n  )","user":"53b0750fe4b047364c044483"},{"problem":97,"code":"(fn f [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [a (f (dec n))]\n                (concat [1] (map + a (rest a)) [1]))))","user":"5e2549c8e4b05b4b0151615f"},{"problem":97,"code":"(fn [nx] (let [n (- nx 1)] (loop [k 0 r [1]]\n                             (if (= k n)\n                               r\n                               (recur (inc k) (conj r (/ (* (r k) (- n k)) (+ k 1))))\n                             )\n                           )\n           )\n  )","user":"550e0373e4b06e50f9beb162"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    (vector 1)\n    (map + (concat [0] (pascal (dec n))) (concat (pascal (dec n)) [0]))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn [n]\r\n  (nth\r\n    (iterate\r\n      (fn [row]\r\n        (concat [1] (map + row (rest row)) [1]))\r\n      [1])\r\n  (dec n)))","problem":97,"user":"4dab218f30acd6ed15482a68"},{"code":"(fn paskal [n]\n    (cond\n      (= n 1) [1]\n      :default (conj (vec (cons 1 (let [previous (paskal (dec n))] (map #(apply + %) (partition 2 1 previous))))) 1)))","problem":97,"user":"4ee77f15535d93acb0a66868"},{"code":"(fn [n] (letfn [(p-tr [x] (map + (cons 0 x) (concat x [0])))]\n          (->> (iterate p-tr [1]) (take n) last)))","problem":97,"user":"528e64b7e4b0239c8a67aedd"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (cons\n      1\n      (concat\n        (map #(apply + %) (partition 2 1 (pascal (- n 1))))\n        [1]))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":97,"code":"(fn [count] \n(let \n\t[nrow (fn [res] (concat [1] res [1])) \n     crow (fn [row] (nrow (map #(apply + %) (partition 2 1 row))))\n     pasrow (fn [count] (cond \n     \t(= count 1) [1] \n     \t(> count 1) (last (take (dec count) (iterate crow [1 1])))))]\n(pasrow count)))","user":"559e6f42e4b08a52bd4f97d3"},{"problem":97,"code":"(fn pascal[n]\n  (->> (iterate (fn [row] (concat [1] (map #(+ (first %) (second %)) (partition 2 1 row)) [1])) [1])\n       (drop (dec n))\n       (first)))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn pascal [n]\n  (when (> n 0)\n    (if (= n 1) [1]\n        (flatten (vector 1 (map (fn [[x y]] (+ x y)) (partition 2 1 (pascal (dec n)))) 1)))))","problem":97,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [n & prev]\n  (cond (= n 1) [1]\n        (= n (count prev)) prev\n        :else (recur n (concat [1] (map #(apply + %) (partition 2 (interleave prev (drop 1 prev)))) [1]))))","problem":97,"user":"4f343e60e4b0e243712b1eb5"},{"problem":97,"code":"(fn [x] (loop [nth x\n                         line [1] ]\n                    (if (= 1 nth)\n                      line\n                      (recur (- nth 1) (conj (vec (cons 1 (loop [row line\n                                                  acc [] ]\n                                             (if (= (count row) 1)\n                                               acc\n                                               (recur (rest row) (conj acc (+ (first row) (first (rest row))))))))) 1)))))","user":"579aff09e4b05b1deef9ade7"},{"problem":97,"code":"(fn [val]\n         (case val\n           1 [1]\n           2 [1 1]\n           3 [1 2 1]\n           4 [1 3 3 1]\n           5 [1 4 6 4 1]\n           6 [1 5 10 10 5 1]\n           7 [1 6 15 20 15 6 1]\n           8 [1 7 21 35 35 21 7 1]\n           9 [1 8 28 56 70 56 28 8 1]\n           10 [1 9 36 84 126 126 84 36 9 1]\n           11 [1 10 45 120 210 252 210 120 45 10 1]))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":97,"code":"(fn pt[n]\n  (if (= 1 n) \n    [1]\n    (let [pl (pt (dec n))]\n      (vec (concat [1] (for [i (range 1 (dec n))\n                             :let [i-1 (dec i)\n                                   v (+ (pl i-1) (pl i))]]\n                         v)[1])))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":97,"code":"(fn [x] (vec (map (partial (fn pas [n k] (if (= k 0)\n                                                    1\n                                                    (int (* (pas n (- k 1)) (/ (- (+ n 1) k) k))))) (dec x)) (range x))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [l] (mapv #(reduce + %) (partition 2 1 (concat [0] l [0])))) [1]) (dec n)))","user":"5454b84ce4b0e397800069d9"},{"problem":97,"code":"( fn tri [x] \n            (cond \n            (= x 1) [1]\n            (= x 2) [1 1]\n            :else (let [y (tri (dec x))] (concat [1] (map + (rest y) (drop-last y)) [1]))))","user":"55896a0ce4b059ccff29b204"},{"problem":97,"code":"(fn [a] \n    (loop [line [1] i 1] \n       (if (< i a) \n        (recur  (flatten [1  (map + line (rest line)) 1]) (inc i) )\n        line\n        )\n      ))","user":"5dbb5200e4b09f47823971a9"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [xs]\n      (vec (map + (cons 0 xs) (conj xs 0))))\n    [1])\n   (- n 1)))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":97,"code":"(fn [step]\n  (let [n (dec step)\n        fact-fn (fn [no] (loop [result 1 current no]\n                           (if (zero? current)\n                             result\n                             (recur (* result current) (dec current)))))]\n    (loop [line 0 position 0 result [] fact-line 1]\n      (if (> line n)\n        result\n        (if (> position line)\n          (recur (inc line) 0 result (* fact-line (inc line)))\n          (if (= line n)\n            (recur line (inc position) (cons (/ fact-line (* (fact-fn position) (fact-fn (- line position)))) result) fact-line)\n            (recur line (inc position) result fact-line)))))))","user":"57596ba7e4b02ea11479931a"},{"code":"(fn PT [n]  \n      (if (= 1 n) \n        '(1)\n        (let [prev (PT (- n 1))]\n                (concat [1] (map #(apply + %) (partition 2 1 prev)) [1]) )) )","problem":97,"user":"4e9b22e2535dbda64a6f6b74"},{"code":"(fn [n]\n  (let [n (dec n)\n        factorial #(reduce * (range 1 (inc %)))\n        binom-coeff (fn [n k]\n                      (/ (factorial n) (* (factorial (- n k)) (factorial k))))]\n    (map (partial binom-coeff n) (range 0 (inc n)))))","problem":97,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn tri [n]\n  (let [ptri (fn [ret d]\n                (cond\n                  (= n d) ret\n                  :else (recur (vec (map + (conj ret 0) (cons 0 ret)))\n                               (inc d))))]\n      (cond \n        (= 1 n) [1]\n        :else (ptri [1 1] 2))))","problem":97,"user":"4ec21058535dfed6da9c6dba"},{"problem":97,"code":"(fn pascal [row]\n  (letfn [(next-level [list]\n            (loop [current (first list)\n                   list (rest list)\n                   result '(1)]\n              (if (empty? list)\n                (conj result 1)\n                (recur (first list)\n                       (rest list)\n                       (conj result (+ current (first list)))))))]\n  (loop [pre-level '()\n         count 1]\n    (if (> count row)\n        pre-level\n        (if (= 1 count)\n          (recur [1] (inc count))\n          (if (= 2 count)\n            (recur [1 1] (inc count))\n            (recur (next-level pre-level) (inc count))))))))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [r]\n  (letfn [(calc [c prev]\n            (* prev (/ (- r c) c)))]\n    (loop [row [1] cols (range 1 r)]\n      (if (empty? cols)\n        row\n        (recur (conj row (calc (first cols) (last row))) (rest cols))))))","problem":97,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":97,"code":"(let [\n;(defn my-dotplus\nmy-dotplus (fn my-dotplus\n  ([xs ys] (my-dotplus xs ys []))\n  ([[x & xs] [y & ys] out]\n    (let [out (conj out (+ x y))\n          stop (or (empty? xs) (empty? ys))]\n      (if stop\n        out\n        (recur xs ys out)\n      )\n    )\n  )\n)\n  \n;(defn my-shift-then-add [xs]\nmy-shift-then-add (fn [xs]\n  [(into [0] xs)\n   (conj xs 0)]\n)\n\n;(defn next-pascal [xs]\nnext-pascal (fn [xs]\n  (apply my-dotplus (my-shift-then-add xs)))\n\n]\n  \n(fn nth-pascal [n]\n  (nth (iterate next-pascal [1]) (dec n)))\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":97,"code":"(fn [r] \n     (loop [col 1 \n            results [1]]\n            (if (= col r)\n              results\n              (recur (inc col) (conj results (* (nth results (dec col)) (-> (dec r) (+ 1) (- col) (/ col))))))))","user":"5b59c513e4b02d533a91bd81"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n      [1]\n      (concat [1]\n              (map (partial apply +) (partition 2 1 (pascal (dec n))))\n              [1])))","user":"53dc94c8e4b094d41abdfefc"},{"problem":97,"code":"(fn pscl [n]\n  (if (< n 2) [1]\n      (map #(reduce + %)\n           (partition 2 1 (concat [0] (pscl (dec n)) [0])))))","user":"53b39d82e4b047364c0444a6"},{"problem":97,"code":"(fn [n]\n  (reduce (fn [ps _]\n              (map #(apply + %) (partition 2 1 `(0 ~@ps 0))))\n          [1] \n          (range 1 n)))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":97,"code":"(fn [x]\n(last (take x\n(iterate (fn\n  [row]\n  (->> (cons 0 (conj row 0))\n  (partition 2 1)\n  (vec)\n  (mapv (fn [e] (apply + e))))) [1]))))","user":"5f63d933e4b02876ed9fd018"},{"problem":97,"code":"(fn [x] (nth (iterate\n               #(map (partial reduce +) (partition 2 1 [0] (cons 0 %)))\n               [1])\n             (dec x)))","user":"5382704be4b06839e8705ed4"},{"problem":97,"code":"(fn [depth]\n  (loop [x 1\n         base [1]]\n    (if (= x depth)\n      base\n      (recur (inc x)\n             (conj (reverse (conj (map + (drop-last base) (drop 1 base)) 1)) 1)))))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [n] (nth (iterate #(map + (lazy-cat [0] %) (lazy-cat % [0])) '(1)) (dec n)))","problem":97,"user":"52c00263e4b07a9af579233f"},{"problem":97,"code":"#(nth (iterate (fn [x] (conj (into [1] (map + x (rest x))) 1)) [1]) (dec %))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":97,"code":"(fn l [n]\n          (loop [i 1 lines [[1]]]\n            (if (>= i n)\n              (last lines)\n              (recur (inc i)\n                     (conj lines (concat [1] (map + (rest (last lines)) (last lines)) [1]))))))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn t [r] (case r\n            1 [1]\n            2 [1 1]\n            (concat [1] (map #(apply + %) (partition 2 1 (t (dec r)))) [1])))","problem":97,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn [row-num]\n  (let [from-previous-row\n        (fn [prev-row]\n          (loop [[a b :as all] prev-row, result [1]]\n            (if (nil? b)\n              (conj result 1)\n              (recur (rest all) (conj result (+ a b))))))]\n    (reduce\n      (fn [prev-row _]\n        (from-previous-row prev-row))\n      [1] (range 1 row-num))))","problem":97,"user":"53070615e4b02e821686979e"},{"problem":97,"code":"#(last \n   (take %\n      (iterate\n         (fn \n          [ant]\n           (into [] \n                (map (fn [a] (reduce + a)) (partition 2 1 (conj (into [0] ant) 0))))) [1])))","user":"5bbc0ddfe4b0a20761a2361e"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate (fn [l]\n              (concat\n               (cons 1\n                     (map\n                      (partial apply +)\n                      (map vector l (rest l))))\n               [1]))\n            '(1))\n   (dec n)))","user":"55ecac8ee4b0121d4835fdcc"},{"code":"(fn p  [r]\n  (if (= 1 r)\n        [1]\n        (concat \n         (cons 1 \n               (map #(apply + %) (partition 2 1 (p (dec r))))) \n         [1])))","problem":97,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":97,"code":"(fn ptriangle [n]\n  (let [sandwich-with-1 (fn [vcoll] (cons 1 (conj vcoll 1)))]\n       (cond (= n 1) [1]\n             (= n 2) [1 1]\n             (> n 2) (sandwich-with-1 \n                     (mapv \n                       (partial apply +)\n                       (partition 2 1 (ptriangle (dec n))))))))","user":"54361d92e4b032a45b8692f7"},{"problem":97,"code":"(fn [n]\n  (letfn [(gen-triangle\n           [coll]\n           (lazy-seq\n            (cons coll (lazy-seq (gen-triangle (mapv + (cons 0 coll) (conj coll 0)))))))]\n    (nth (gen-triangle [1]) (dec n))))","user":"571c2babe4b07c98581c3b73"},{"problem":97,"code":"(fn hossen[n]\n  (if (= 1 n)\n    [1]\n    (nth (iterate\n          (fn y[j](conj (apply vector (cons 1 ((fn x[s]\n                                                 (when (next s)\n                                                   (cons (+' (first s) (second s)) (x (next s))))) j))) 1)) \n          '()) (dec n))\n    )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":97,"code":"(fn pas [n]\n  (if (<= n 2)\n    (repeat n 1)\n    (concat [1]\n            (map + (pas (dec n)) (next (pas (dec n))))\n            [1])))","user":"53908e6be4b0b51d73faae9a"},{"problem":97,"code":"(fn [n]\n  (reduce\n    (fn [acc _]\n      (concat [1] (map (partial apply +) (partition 2 1 acc)) [1])) [1] (range 1 n)))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":97,"code":"(fn [k]\n  (loop [i 1 row '(1)]\n    (cond \n     (= i k) row\n     :else (recur (inc i) (map + (cons 0 row) (reverse (cons 0 row)))))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":97,"code":"(fn pascal-row [n]\n  (cond\n    (= n 1) [1]\n    :else (let [end [1]\n                middle (map\n                         (partial apply +)\n                         (partition 2 1 (pascal-row (dec n))))]\n            (concat end middle end))))","user":"55d28b38e4b0e31453f64a58"},{"code":"(fn leveln [x]\n  (map\n    (fn binom [k]\n      (/ (reduce * (range 1 x))\n        (* (reduce * (range 1 (inc (- (dec x) k))))\n           (reduce * (range 1 (inc k))))\n      )\n    )\n  (range 0 x))\n)","problem":97,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [input]\n      (concat [1] (map #(apply + %) (partition 2 1 input)) [1]))\n    [1])\n   (- n 1)))","problem":97,"user":"528bba38e4b0239c8a67aea9"},{"problem":97,"code":"#(loop [n % z [1]]\n  (if (> n 1)\n    (do\n      (recur (dec n) \n        (loop [list z r [1]]\n          (if (> (count list) 1)\n            (do\n              (recur (rest list) (conj r (apply +(take 2 list)))))\n            (conj r 1))))) z))","user":"5669eb9ae4b04acd4f672e02"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (concat [1] (map #(reduce + %) (partition 2 1 (pascal (dec n) ))) [1])))","user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn pascal-triangle [n]\n  (cond (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (map #(reduce + %) (partition 2 1 (seq (pascal-triangle (dec n))))) [1])))","problem":97,"user":"5125745ae4b05d10e3e395f9"},{"problem":97,"code":"; Wow, there's a lot of ways to do this.  \n; But mine is the most verbose!\n; And also the most readable (to me).\n\n(fn [row-num]\n  (let [n (dec row-num)\n        k-max row-num\n        factorial (fn [z] (reduce * (range 2 (inc z)))) ]\n    (for [k (range k-max)]\n      (/ (factorial n) (* (factorial k) (factorial (- n k)))) )))","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [n]\n  (loop [acc [1] c 1]\n    (if (= c n)\n      acc\n      (recur (conj acc (* (last acc) (/ (- n c) c))) (inc c)))))","problem":97,"user":"50e3cf55e4b01912b3285c45"},{"problem":97,"code":"(fn [r]\n  (letfn [(half-list [l]\n                     (loop [li l le ()]\n                       (if (not (> (count li) 1))\n                         (reverse le)\n                         (recur (rest li) (conj le (+ (first li) (first (rest li))))))))\n          \n          (pt ([n] (pt (dec n) 0 []))\n              ([n c prev]\n               (cons\n                (if (empty? prev) (list 1) prev)\n                (if (= c n)\n                  (list)\n                  (lazy-seq (pt n (inc c) (concat (conj (if (empty? prev) '() (half-list prev)) 1) (list 1))))))))]\n    (into [] (first (take-last 1 (pt r))))))","user":"52979551e4b02ebb4ef75043"},{"problem":97,"code":"(fn pascal [n] (if (= n 1) [1] (map #(apply + %) (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","user":"55cae949e4b0e31453f649fe"},{"code":"(fn [n]\n  (if (= 1 n)\n    [1]\n    (nth\n      (iterate\n        (fn [x] (concat '(1)\n          (map #(apply + %) (partition 2 1 x))\n          '(1)))\n        [1 1])\n      (- n 2))))","problem":97,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn [n] \n  (nth\n    (iterate\n      #(map\n        (partial apply +)\n        (partition 2 1 (concat [0] % [0])))\n      [1])\n   (dec n)))","problem":97,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":97,"code":"(fn pascal-triangle\n  ([n] (pascal-triangle n [[1]]))\n  ([n all-rows] \n    (let [sum-adjacent #(map-indexed (fn [i v] (+ v (% (inc i)))) (pop %))]\n      (if (< (count all-rows) n)\n        (pascal-triangle n (conj all-rows (into [] (flatten [1 (sum-adjacent (last all-rows)) 1]))))\n        (last all-rows)))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":97,"code":"(fn __ [n]\n  (if (<= n 1) [1]\n    (let [r (__ (dec n))]\n      (map + (concat r [0]) (concat [0] r)))))","user":"54c271b9e4b045293a27f602"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(map +\n                      (conj % 0)\n                      (conj (vec %) 0))\n                '(1))\n       (dec n)))","user":"60096aabe4b074f607df667f"},{"code":"(fn\n  [n]\n  (nth (iterate (fn [row] (let [prow (partition 2 1 row)]\n                            (concat [1] (map #(apply + %) prow) [1])))\n                [1])\n       (dec n)))","problem":97,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":97,"code":"(fn pascal\n  [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    3 [1 2 1]\n    ((fn [x] (->> (partition 2 1 (pascal (- x 1)))\n                  (map #(apply + %))\n                  (#(conj % 1))\n                  (vector)\n                  (#(conj % 1))\n                  (flatten)\n                  (into []))) n)\n    ))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":97,"code":"(fn f\n  [row]\n  (let [pascal (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n           [1])]\n    (last (take row pascal))))","user":"55a62092e4b0acc240e31554"},{"problem":97,"code":"(fn pascal-nth\n  [n]\n  (if (= n 1)\n    [1]\n    (let [last-row (conj (vec(pascal-nth (dec n))) 0)]\n      (for [i (range (count last-row))]\n        (if (= 0 i) 1\n            (+ (nth last-row i) (nth last-row (dec i))))))))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":97,"code":"(fn [x] (letfn [(fact [n] (reduce * (range 1 (inc n))))\n                (comb [n r] (/ (fact n) (* (fact (- n r)) (fact r))))]\n                      (vec (map (partial comb (dec x)) (range x)))))","user":"5eaba9c0e4b00a66d4a951d6"},{"code":"(fn [n]\n   (nth (iterate (fn [s]\n                   (let [p (partition 2 1 s)\n                         added (map (partial apply +) p)]\n                     (concat [1] added [1])))\n                 [1])\n        (dec n)))","problem":97,"user":"4ee26f01535d10e5ff6f5368"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (dec n))]\n      (concat [1] (map + prev (rest prev)) [1]))))","user":"52ce1abfe4b07d0d72b27389"},{"code":"(fn [n] \n  (vec \n    (last \n    (take n \n        (iterate\n      (fn [prev-row]\n        (->>\n\t\t(concat [[1]] (partition 2 1 prev-row) [[1]])\n\t\t(map (partial apply +) ,,,)))\n\t     [1])))))","problem":97,"user":"4e131443535d04ed9115e7d3"},{"problem":97,"code":"(fn [n]\n  (letfn [(p [n]\n            (case n\n                1 [1]\n                (let [pl (p (dec n))]\n                    (conj (apply vector (cons 1 (map + pl (rest pl)))) 1 ))))]\n    (p n)))","user":"558306dfe4b05c286339e110"},{"problem":97,"code":"(fn my-prob-97-pascals-triangle [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (vec (concat\n                 [1]\n                 (map (fn [k]\n                         (let [prev-row (my-prob-97-pascals-triangle (dec n))]\n                           (+ (get prev-row (dec k) 0) (get prev-row k)))\n                         ) (range 1 (- n 1)))\n                 [1]))))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn pascal-tri [n]\r\n  (letfn [(map2 [f xs ys]\r\n  \t(if (or (nil? (first xs))\r\n\t\t\t(nil? (first ys)))\r\n\t\t  []\r\n\t\t  (conj (map2 f (rest xs) (rest ys))\r\n\t\t\t(f (first xs) (first ys)))))\r\n\t  (next-tri [xs]\r\n\t\t    (if (= (count xs) 1)\r\n\t\t      [(first xs) (first xs)]\r\n\t\t      (concat (cons (first xs) (map2 + xs (rest xs)))\r\n\t\t\t      [(last xs)])))\r\n\t\t       \r\n\t  ]\r\n  (loop [i 1 xs [1]]\r\n    (if (= i n)\r\n      xs\r\n      (recur (+ i 1) (next-tri xs))))))","problem":97,"user":"4ddc620d535d02782fcbea06"},{"problem":97,"code":"(fn [n]\n   (let [next-row #(concat [1] (map + % (rest %)) [1])]\n     (nth (iterate next-row [1]) (dec n))))","user":"59f15e20e4b0966464fe6a5a"},{"problem":97,"code":"(fn [r]\n  (let [row (- r 1)]\n  (if (= row 0)\n    [1]\n\t(vec (vec (cons 1 (conj (vec\n      (for [col (range 1 row)]\n        ((fn value [row column] (if (and (< 1 row) (< 0 column)) (int (* (value row (dec column)) (/ (- (+ row 1) column) column))) 1))\n         row col))\n      ) 1)))))))","user":"5f19ecbae4b091ba50b4dbdf"},{"problem":97,"code":"(fn pascal\n  [number]\n  (if (= 1 number)\n    [1]\n    (cons 1 (map-indexed (fn [index object] (+ object (nth (pascal (dec number)) (+ 1 index) 0))) (pascal (dec number))))))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn p-tri [limit]\r\n  (loop [row [1], n 1]\r\n    (if-not (< n limit)\r\n      row\r\n      (let [new-row (map (fn [[a b]] (+ a b)) (partition 2 1 row))]\r\n        (recur (vec (concat [1] new-row [1])) (inc n))))))","problem":97,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":97,"code":"(fn [n]\n  (let [base (vector 1)]\n    (reduce (fn [a b] (conj a (* (last a) (/ (- n b) b)))) base (range 1 n))))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn pascal [n]\n  (loop [c 1 l [1]]\n    (cond (= c n) l\n    :else (recur (inc c) (concat [1] (map + l (rest l)) [1])))))","problem":97,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn pascal [n]\n          (cond \n              (= n 1) [1]\n              (= n 2) [1 1]\n              :else (conj (first\n                           (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascal (dec n)))) 1)))","problem":97,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [n]\n  (letfn [(next-level [c]\n                      (if (< (count c) 2)\n                        [1 1]\n                        (conj (vec (cons 1 (map #(+ (first %) (last %)) (partition 2 1 c)))) 1)))\n          (my-seq\n           ([] (my-seq [1]))\n           ([c] (cons c (lazy-seq (my-seq (next-level c))))))]\n    (nth (my-seq) (- n 1))))","problem":97,"user":"514721c6e4b0d520409ed392"},{"problem":97,"code":"#(let [fact (fn [x] (apply * (range 1 (inc x))))\n  bin (fn [k p] (/ (fact p) (* (fact k) (fact (- p k)))))\n  newton (fn [b] (apply vector (map (fn [y] (bin y (- b 1))) (range 0 b))))]\n(newton %))","user":"5e13a6b7e4b099d064963001"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [prev (pascal (dec n))]\n      (mapv + (concat [0] prev) (conj prev 0)))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":97,"code":"(fn [n]\n  (loop [row [1], i (dec n)]\n       (if (pos? i)\n         (recur (conj (into [1] (map +' row (rest row))) 1)\n                (dec i))\n         row)))","user":"5b772ad7e4b047b03b2036e8"},{"problem":97,"code":"(fn [i] \n  (reduce \n    #(conj % (* (last %) (/ (- i %2) %2))) \n  \t[1] (range 1 i)))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":97,"code":"(fn triangle\n  [x]\n  (case x\n    1 [1]\n    (vec (concat [1]\n                 (let [prev (triangle (dec x))]\n                   (map (fn [n]\n                          (+ (get prev (dec n) 0)\n                             (get prev n 0)))\n                        (range 1 (dec x))))\n                 [1]))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":97,"code":"(fn [n]\n  (last\n   (take n\n         (iterate\n          (fn nextR [previousR]\n            (into [] ;;; para hacer los cachitos\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1\n                                  (conj (into [0] previousR) 0))\n                       )\n                  )\n            )\n           [1] ;;;; el ultimo 1 que siempre va \n          )\n         )\n   )\n  )\n          \n;;;;Returns a lazy sequence of lists of n items each, at offsets step\n;;;;apart. If step is not supplied, defaults to n, i.e. the partitions\n;;;do not overlap. If a pad collection is supplied, use its elements as\n;;;necessary to complete last partition upto n items. In case there are\n;;;not enough padding elements, return a partition with less than n items.\n;;; Ejemplo \n;;; partition a list of 20 items into 5 (20/4) lists of 4 items\n;;; partition 4 (range 20))\n;;=> ((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (16 17 18 19))","user":"6075c214e4b069485764de5b"},{"code":"(fn [a]\n  (loop [x a y [1]] \n    (if (= x 1) \n      y\n      (recur \n       (dec x) \n       (into [] (map + (conj y 0) (conj (into '() y) 0))) ))))","problem":97,"user":"513b77f3e4b00f740c76c403"},{"problem":97,"code":"#(loop [out [1] r %]\n   (if (= r 1)\n     out\n     (recur \n      (mapv + (into out [0]) (into [0] out)) \n      (dec r))))","user":"58c7a80fe4b021aa9917ed7b"},{"code":"#(loop [linenum 1 old [1]]\n   (if (= linenum %) old\n     (recur (inc linenum) \n            (flatten [1 (map + old (next old)) 1]))))","problem":97,"user":"50052d38e4b0678c553fc45c"},{"problem":97,"code":"(fn pascal [row]\n  (if (= 1 row)\n    [1]\n    (let [last-row (pascal (dec row))]\n      (map (fn [idx]\n             (if (or (zero? idx) (= idx (count last-row)))\n               1\n               (let [a (nth last-row (dec idx))\n                     b (nth last-row idx)]\n                 (+ a b)))) \n           (range (inc (count last-row))))\n    )))","user":"55ede35ce4b0121d4835fde1"},{"problem":97,"code":"(fn [t] \n  (loop [i 1\n         acc [1]]\n    (if (= i t) \n      acc\n      (recur (inc i) (cons 1 (for [e (range (count acc))] (apply + (take 2 (drop e acc)) ))))\n      )))","user":"54227fc6e4b01498b1a71ac0"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (letfn [(new-v [s] (vec (concat [1] (map +' s (rest s)) [1])))]\n      (last (take (dec n) (iterate new-v [1 1]))))))","user":"5c950334e4b048ec896c5a44"},{"problem":97,"code":"(fn [x] \n  (nth (iterate #( vec( map + (conj % 0) (cons 0 %))) '[1]) (dec x)))","user":"569429c7e4b0dcc4269f411a"},{"problem":97,"code":"(fn [rowNum]\n  (let [\n    calc (fn [prevRow]\n      (flatten \n        (conj \n          '(1)\n          (map #(apply + %) (partition 2 1 prevRow))\n          '(1))))]\n    (last (take rowNum (iterate calc '(1))))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":97,"code":"(fn pascals [n]\n  (last\n   (take n\n         (iterate\n          (fn next-row [previous-row]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1\n                                  (conj (into [0] previous-row) 0)))))\n          [1]))))","user":"607dd962e4b03d835a6eaed2"},{"code":"(fn [x] (nth (iterate (fn [coll]\n  (let [f (first coll)\n        l (last coll)\n        c2 (map (partial apply +) (partition 2 1 coll))]\n    (concat [f] c2 [l]))) [1]) (dec x)))","problem":97,"user":"51b0fc95e4b0c53cf2e68a72"},{"code":"(fn pascal-triangle [n]\n    (map\n     #(/ (apply * (take % (iterate dec (dec n))))\n         (apply * (take % (iterate dec %))))\n     (take n (iterate inc 0))))","problem":97,"user":"504f57c7e4b0a02f9cffde71"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(concat [1] (map + (drop 1 %) %) [1]) [1]))))","user":"5a8aa992e4b05369db4d24d8"},{"code":"(fn nth-pascal [n]\n  (letfn [(iter [row]\n            (map +\n                 (concat [0] row)\n                 (concat row [0])))]\n    (nth (iterate iter [1]) (dec n))))","problem":97,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn pt\n  [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (concat [1] (conj (vec (map (fn [[x y]] (+ x y))\n                                          (partition 2 1 (pt (dec n)))))\n                                1))))","problem":97,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":97,"code":"(fn uni-pasc-tri [n]\n   (let [add-prev (fn [prev next result] ; Ok, this feels just wrong, but it works.\n                    (if (empty? next)\n                      result\n                      (recur (first next)\n                                (rest next)\n                                (conj result (+ prev (first next))))))]\n     (if (= n 1)\n       [1]\n       (if (= n 2)\n         [1 1]\n         (let [p (uni-pasc-tri (- n 1))]\n           (into (into [1] (add-prev (first p) (rest p) [])) [1]))))))","user":"5674607ae4b05957ce8c6137"},{"problem":97,"code":"(fn [x]\n   (loop [i x\n          arr [1]]\n     (let [updated-array (loop [j 0\n                                arr1 arr\n                                new-arr []]\n                           (if (> j (- (count arr1) 2))\n                             new-arr\n                             (recur (inc j) arr1 (concat new-arr [(+ (nth arr1 j) (nth arr1 (inc j)))]))))]\n       (if (<= i 1)\n         arr\n         (recur (dec i) (vec (concat [1] updated-array [1])))))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":97,"code":"#(reduce (fn [x y]\n          (cond \n            (= 1 y) [1]\n            (= 2 y) [1 1]\n            :else (conj (first (reduce (fn [a b]\n                                         (vector (conj\n                                                  (first a)\n                                                  (+ b (last a))) b)) [[] 0] x)) 1))) \n        [] (range 1 (+ 1 %)))","user":"591f5124e4b09b4ee5954c45"},{"problem":97,"code":"(fn [n]\n  (last\n  (take n\n        (iterate\n         (fn [x]\n           (into [] (concat [1] (map #(apply + %) (partition 2 1 x)) [1])))\n         [1])))\n  )","user":"558ffb4be4b0277789237667"},{"problem":97,"code":"(fn [n]\n  (nth \n    (iterate\n      #(loop [acc [1] lst %]\n          (if (= (count lst) 1)\n            (conj acc 1)\n            (recur (conj acc (+ (first lst) (second lst)))\n                   (rest lst))))\n      [1]) \n    (dec n)))","user":"56be8649e4b0f26550335983"},{"problem":97,"code":"(fn [n] (reduce #(conj %1 (* (last %1) %2)) [1]\n                (mapv #(/ % %2) (range (dec n) 0 -1) (range 1 n))))","user":"5169b23fe4b03f62cda68cee"},{"problem":97,"code":"(fn [n]\n   (let [f (fn [xs]\n            (concat [1]\n                    (map (fn [p] (apply + p)) (map vector xs (rest xs)))\n                    [1]))]\n     (into [] (last (take n (iterate f [1]))))))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn pascal\n  ([row] (for [i (range row)] (pascal (dec row) i)))\n  ([row col]\n      (cond (or (= col 0) (= col row)) 1\n            :else (+ (pascal (dec row) (dec col) ) (pascal (dec row) col)))))","problem":97,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":97,"code":"(fn [n] (nth (iterate (fn __ [xs] (concat [1] (map #(apply + %) (partition 2 1 xs)) [1])) [1]) (dec n)))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn v[n]\n  (if (= n 1) [1]\n    (concat \n     (conj (map #(apply + %)\n                (partition 2 1 (v (dec n))))               \n                1) '(1))\n            ))","problem":97,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn [n]\n  (last\n    (loop [i 1, rows []]\n      (cond \n        (= n 1) [[1]]\n        (= i n) rows\n        :default\n        (recur\n          (inc i)\n          (let [numbers (partition 2 1 (last rows))]\n            (conj rows (concat [1] (map (partial apply +) numbers) [1]))))))))","problem":97,"user":"4e513758535dc968683fc4f3"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(sum-pairs [pairs] (map #(+ (first %) (second %)) pairs))\n          (next-row [row]\n            (if (= [1] row)\n              [1 1]\n              (concat [1] (sum-pairs (partition 2 1 row)) [1])))]\n    (loop [counter n current-row [1]]\n      (if (<= counter 1)\n        (vec current-row)\n        (recur (dec counter) (next-row current-row))))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":97,"code":"(fn pascal[n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n      (partition 2 1\n        (concat [0] (pascal (- n 1)) [0])))))","user":"56011393e4b04bb52996e178"},{"problem":97,"code":"(fn [row]\n  (let [helper (fn [re up]\n                 (if (= up 0)\n                   re\n                   (recur ((fn [a-seq]\n                            (let [help (fn [r temp s]\n                                         (if (empty? s)\n                                           (conj r 1)\n                                           (if (empty? r)\n                                             (recur (conj r (first s))\n                                                    (conj temp (first s))\n                                                    (rest s))\n                                             (recur (conj r (+ (last temp) (first s)))\n                                                    (conj temp (first s))\n                                                    (rest s)))))]\n                              (help [] [] a-seq))) re)\n                          (dec up))))]\n                 (helper [1] (dec row))))","user":"54b64fbbe4b05787c3b163b8"},{"problem":97,"code":"(fn wut [n]\n  (if (zero? n)\n    nil\n    (let [prev (wut (dec n))]\n      (map\n       (fn [c]\n\t (if (or (= 0 c) (= (dec n) c))\n           1\n           (+ (nth prev (dec c)) (nth prev c))))\n       (range n)))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn [n] (first (drop (dec n) (take n (iterate (fn [coll] (vec (map (fn [coll] (+ (first coll) (second coll))) (partition 2 1 (vec (cons 0 (conj coll 0))))))) [1])))))","problem":97,"user":"4fb99483e4b081705acca2da"},{"problem":97,"code":"(fn p [r] \n(if (= 1 r) [1]\n(let [l (p (dec r))]\n(map #(+ (nth l (dec %) 0)  (nth l % 0)) (range 0 r)\n)\n)\n)\n)","user":"583048d9e4b051871117c007"},{"problem":97,"code":"#((fn [i j]\n((fn [a n] \n\t((fn g [h]\n\t\t(if (vector? h) \n\t\t\th \n\t\t\t(g (get (into [] h) 0))\n\t\t)\n\t)\n\t((fn d [e f]\n\t\t(when (< e n) \n\t\t\t(for [x (vector e)\n\t\t\t\t:let [y\n\t\t\t\t\t((fn b [m c]\n\t\t\t\t\t\t(if (< m (+ (count c) 1)) \n\t\t\t\t\t\t\t(if (or (= m 0) (= m (count c))) \n\t\t\t\t\t\t\t\t(into [] (cons 1 (b (+ m 1) c)))  \n\t\t\t\t\t\t\t\t(into [] (cons (+ (get c m) (get c (- m 1))) (b (+ m 1) c))) \n\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t)\n\t\t\t\t\t) 0 f)\n\t\t\t\t]\n\t\t\t\t]\n\t\t\t(if (= e (- n 1)) \n\t\t\t\ty \n\t\t\t\t(d (+ e 1) y)\n\t\t\t))\n\t\t)\n\t) 1 a))\n)i (+ j 1))) [] %)","user":"5710e574e4b09c608db7043b"},{"problem":97,"code":"(fn pascal [row]\n  (let [n (range 1 row)]\n    (reductions * 1 (map / (reverse n) n))))","user":"55d68726e4b0e31453f64a99"},{"code":"(fn [n]\n  (loop [n n ret [1]]\n(if (= n 1)\nret\n(recur (dec n) ((fn [c]\n(loop [c c ret '()]\n(if (next c)\n(recur (next c) (conj ret (apply + (take 2 c))))\n(flatten (list 1 ret 1))))) ret)))))","problem":97,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn mpt [d] \n          (if (= 1 d) \n            [1]\n            (let [ prevrange (concat [0] (mpt (dec d)) [0])\n                   ]\n              (for [ idx (range d)]\n                (+ (nth prevrange idx) (nth prevrange (inc idx)))))))","problem":97,"user":"50956c2be4b087f34d351ab2"},{"code":"#(loop [ n 1 v [1] ]\n   (if (>= n %) \n     v\n     (recur (inc n) \n            (map (fn [[a b]]( + a b))\n                   (partition 2 (concat [0] (interleave v v) [0]))\n            )\n      )\n    )\n  )","problem":97,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"#(letfn [(factorial [n]\n            (if (= n 0) 1 (* n (factorial (dec n)))))\n         (choose [n k] \n            (/ (factorial n)\n               (* (factorial k) (factorial (- n k)))))]\n  (for [x (range %)] (choose (dec %) x)))","problem":97,"user":"4f0f9df7535d0136e6c22342"},{"code":"(fn [n]\n\t(letfn [(step [coll]\n\t\t(lazy-seq\n\t\t\t(cons\n\t\t\t\tcoll\n\t\t\t\t(step\n\t\t\t\t\t((fn\n\t\t\t\t\t\t[coll] \n\t\t\t\t\t\t(map \n\t\t\t\t\t\t\t#(+ (first %) (second %))\n\t\t\t\t\t\t\t(partition 2 1 (concat '(0) coll '(0)))))\n\t\t\t\t\tcoll)))))]\n\t(nth (step [1]) (dec n))))","problem":97,"user":"514d7e29e4b019235f6c0587"},{"problem":97,"code":"(fn pascal ([n] (pascal (dec n) [1]))\n  ([n res] (if (= 0 n) res (pascal (dec n) (into [] (map + (into [0] res) (into res [0])))))))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"(fn pascal [n]\n  (let [n (- n 1)]\n  (if (= n 0) \n   [1]\n   (reduce \n     #(conj %1(/ (* (last %1) (- n %2)) (+ 1 %2)))\n     [1 n] (range 1 n)))))","problem":97,"user":"4f12ab23535d64f603146429"},{"problem":97,"code":"(fn pascal [row-n]\n  (loop [i 1\n         row [1]]\n    (if (= i row-n)\n      row\n      (recur (inc i) (concat [1] (map + row (rest row)) [1])))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":97,"code":"(fn [r]\n    (letfn [(fact [n] (reduce * (range 1 (+ n 1))))\n            (comb [n k] (/ (fact n) (* (fact (- n k)) (fact k))))]\n      (map #(comb (- r 1) %) (range r))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":97,"code":"(fn [r]\n  (loop [r r\n         s [1]]\n    (if (< r 2)\n      s\n      (recur (dec r)\n             (map #(apply + %)\n                  (partition 2 1 (concat [0] s [0])))))))","user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn pt [n] (if (= 1 n) [1] (apply map + (partition n 1 [0] (cons 0 (pt (dec n)))))))","problem":97,"user":"528a791ae4b0239c8a67ae77"},{"problem":97,"code":"(fn tri [n]\n  (if (= 1 n)\n    [1]\n    (let [t (tri (dec n))]\n      (map #(+\n             (nth t (dec %) 0)\n             (nth t % 0))\n           (range n)))))","user":"57008afae4b08d47c97781ca"},{"code":"#(reduce (fn [c _] \n           (concat [1] (vec (map (partial apply +) (partition 2 1 c))) [1])) \n           [1] (range (dec %)))","problem":97,"user":"4ef9c8f9535dced4c769f26b"},{"problem":97,"code":"(fn p\n  [n]\n  (if (= n 1)\n    (list 1)\n    (cons 1 (\n             #(reverse (conj (reverse %2) %1)) 1\n             ((fn f[s]\n                (if (or (empty? s) (empty? (rest s)))\n                  ()\n                  (cons (+ (first s) (first (rest s))) (f (rest s)))))\n              (p (dec n)))))))","user":"56df632ce4b0ca2494a095f2"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(concat (cons 1 (map + % (rest %))) [1]) '(1)))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":97,"code":"(fn pascals-tri\n  [num]\n  (let [n (- num 1)]\n    (loop [i 0\n           final []]\n      (if (> i n)\n        final\n        (if (= i 0)\n          (recur (inc i) [1])\n          (if (= i 1)\n            (recur (inc i) (conj final n))\n            (recur (inc i) (conj final (/ (reduce * (range (+ 1 (- n i)) (+ 1 n))) (reduce * (range 1 (+ 1 i)))) ))))))))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn f [r]\n  (map (fn v [c]\n         (if (= c 0) 1\n           (* (v (dec c)) (/ (- r c) c))))\n       (range r)))","problem":97,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"(fn p [n] (if (= n 1) [1] (reduce #(conj %1 (* (last %1) (/ (- n %2) %2))) [1] (range 1 n))))","problem":97,"user":"4ea1ecfa535d7eef308072bb"},{"problem":97,"code":"(fn [n]\n\n  (let [a (fn [c] (into [] (map + (cons 0 c) (conj c 0))))]\n\n    (loop [coll [1] c 1]      \n\n      (if (= c n)\n\n        coll\n\n        (recur (a coll) (inc c))))))","user":"583667c7e4b089d5ab817cfb"},{"problem":97,"code":"(fn [i]\n          (let [nxt (fn [s] (map #(apply +' %&) (concat [0] s) (concat s [0])))]\n            (if (> i 1)\n                   (nth (iterate nxt [1]) (- i 1))\n                   [1])))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":97,"code":"(fn f [x] (if (= x 1) '(1) (let [prev (f (dec x)) a (conj prev 0) b (reverse a)] (map #(+ (first %) (last %)) (partition 2 (interleave b a))))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":97,"code":"(fn [n] (nth (iterate #(map + (conj (vec %) 0) (cons 0 (vec %))) [1]) (dec n)))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn p [rid]\n\t(if (= rid 1)\n\t\t[1]\n\t\t(let [middle (map #(reduce + %) (partition 2 1 (p (dec rid))))]\n\t\t\t(flatten [1 middle 1]))))","problem":97,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn[n] (loop [p [1]\n  \t     c  n]\n\t   (if (= c 1) (vec p)\n\t       (recur  (flatten (list 1 (map #(+ % %2) p (rest p)) 1))\n\t\t       (dec c)))))","problem":97,"user":"4ea4e98a535d7eef308072ce"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n      (iterate\n        (fn next-row [previous-row]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1 \n                                  (conj (into [0] previous-row) 0)))))\n        [1]))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":97,"code":"(fn [row-num]\n  (letfn [(factorial [n]\n           (reduce * (rest (range (+ n 1)))))\n         (combo [n k]\n           (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n    (for [xs (conj (vec (range (- row-num 1))) 0)]\n      (combo (- row-num 1) xs))))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":97,"code":"#(let [r %\n        func (fn\n               [s r] (cond\n                       (= r (count s)) s\n                       (= 1 (count s)) (recur [1 1] r)\n                       :else (recur (concat '(1) (map (partial reduce +) (partition 2 1 s)) '(1)) r)))]\n   (func [1] r))","user":"554680cbe4b0a04f7929953e"},{"problem":97,"code":"(fn [num] (let [make-row (fn [x] (-> x\n                           ((fn [y] (map #(apply + %) (partition 2 1 y))))\n                           (#(conj (reverse %) 1))\n                           (#(conj (reverse %) 1))\n                           (#(into [] %) )\n                           ))]\n     (loop [coll [1] n (dec num)]\n       (if (= 0 n)\n         coll\n         (recur (make-row coll) (dec n))))))","user":"53e73fe3e4b036ad0777e478"},{"problem":97,"code":"#(letfn [(fac [x] (apply * (range 1 (inc x))))]\n   (loop [n (dec %) r []]\n     (if (neg? n) r\n       (recur (dec n) (cons (quot (fac (dec %)) (* (fac n) (fac (- (dec %) n)))) r)))))","user":"574abbfbe4b02ea114799200"},{"problem":97,"code":"(fn [n] (nth (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1]) (dec n)))","user":"58225587e4b04b46fc4b0f94"},{"problem":97,"code":"(fn g [n] (cond\n             (= 1 n) [1]\n             (= 2 n) [1 1]\n             :else\n             (let [[_ & r :as l] (g (dec n))\n                    t (butlast l)]\n               (concat (conj (map + r t) 1) [1]))))","user":"545ddac3e4b01be26fd74676"},{"code":"(fn [n]\r\n  (nth (iterate \r\n         (fn [pre] \r\n           (vec \r\n             (concat \r\n               [1] \r\n               (map (fn [[f s]] (+ f s)) (partition 2 1 pre)) \r\n               [1])))\r\n         [1])\r\n       (dec n)))","problem":97,"user":"4e1158aa535d04ed9115e7c6"},{"problem":97,"code":"(fn [n]\n  (loop [r '(1)\n         i 1]\n    (if (= i n)\n      r\n      (recur (map + (conj (vec r) 0) (conj r 0))\n             (inc i)))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [n]\n  (letfn [(nextrow [row] (map + (concat row [0]) (concat [0] row)))]\n     (nth (iterate nextrow [1]) (dec n))))","problem":97,"user":"53779a26e4b06839e8705e38"},{"code":"(fn [arg] (nth (drop (dec arg) (take arg\n      (iterate\n       (fn [i]\n         (conj (reduce #(conj %1 (+ (first %2) (second %2)))\n                       [1]\n                       ((fn [l] (partition 2\n                                          ((fn foo [li] (if (and (first li) (second li))\n                                                         (into [(first li) (second li)]\n                                                               (lazy-seq (foo (rest li)))))) l))) i)) 1)) [1]))) 0))","problem":97,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":97,"code":"#(loop [before [1]\n         n %]\n    (if (= n 1)\n      before\n      (recur\n       (concat [1] (map + before (rest before)) [1])\n       (dec n))\n      ))","user":"56c9970ce4b0ed865f9758de"},{"code":"(fn it\r\n  ([n] (it n [1]))\r\n  ([n acc]\r\n    (if (= n 1)\r\n      acc\r\n      (recur (dec n)\r\n             (concat [1]\r\n             (map (partial apply +)\r\n                  (partition 2 1 acc))\r\n             [1]))\r\n  )))","problem":97,"user":"4dc537fd535d8a4b2fd74282"},{"problem":97,"code":"(fn [n] (reduce \n\t\t\t(fn [res val] (if (= 0 val) [1] (conj ((fn addx [in]\n\t\t\t\t\t(if (nil? in) []\n\t\t\t\t\t\t(conj (addx (next in)) (apply + (take 2 in)) )))\n\t\t\t\t\t\tres) 1))) \n\t\t\t\t[1] (range n)))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":97,"code":"(fn [row]\n    (reduce \n      (fn [accum item]\n        (conj accum (* (last accum) item))) \n      [1] \n      (let [denom (range 1 row)]\n          (map #(/ %1 %2) (reverse denom) denom))))","user":"563cce5be4b0bfe05bf1183f"},{"code":"(fn pt [l] (cond (= l 1) [1]\n                   (= l 2) [1 1]\n                   (> l 0) (concat [1] (map (partial reduce +) (partition 2 1 (pt (dec l)))) [1])))","problem":97,"user":"53403110e4b085b17e897da6"},{"problem":97,"code":"(fn [row]\n  (letfn [(factorial [n] (reduce * (range 1 (inc n))))\n          (combination [n k] (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n          ]\n    (map #(combination (dec row) %) (range 0 row))\n    )\n  )","user":"589037b4e4b00487982d51d0"},{"problem":97,"code":"(fn [n]\n  (loop [lastlvl '(1)\n         level 1]\n    (if (= level n)\n      lastlvl\n      (recur (concat [1] (map + lastlvl (rest lastlvl)) [1]) (inc level))\n    )\n  )\n)","user":"554756b8e4b0a04f79299549"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [coll]\n  (concat '(1) (map #(apply + %) (partition 2 1 coll)) '(1))) [1]) (- n 1)))","user":"5ee738dee4b029a2061bbea2"},{"code":"(fn [n]\n  (loop [c 0 t [1]]\n    (if (= c (dec n)) t\n        (recur (inc c) (conj t (int (* (last t) (/ (- n (inc c)) (inc c)))))))))","problem":97,"user":"4e5af45e535d8a8b8723a2b1"},{"problem":97,"code":"(fn [n] (last (take n (iterate (fn [s] (cons 1 (conj (reduce (fn [s [x y]] (conj s (+ x y))) [] (partition 2 (if (= 1 (count s)) [1] (conj (vec (cons 1 (mapcat (fn [x] [x x]) (rest (butlast s))))) 1)))) 1))) '(1)))))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn pascal-t [n]\n  (if (= n 1) [1]\n      (map #(apply + %)\n           (partition 2 1\n                      (concat [0] (pascal-t (- n 1)) [0])))))","problem":97,"user":"518ad8fce4b06da86c1973c1"},{"problem":97,"code":"(fn pas\n  ([n] (vec (pas [1] n)))\n  ([res n]\n     (if (= n 1)\n       res\n       (recur (map\n               #(+ (first %1) (last %1))\n               (partition-all\n                2\n                (flatten (concat [0]\n                                 (flatten\n                                  (map\n                                   (partial repeat 2)\n                                   res))\n                                 [0]))))\n              (dec n))))\n  )","user":"524025bce4b0ad64fa01030f"},{"code":"(fn p97\n  ([i] (if (<= i 1) [1] (let [r (p97 {1 1 0 1} (dec i))] (map val r))))\n  ([m i] (letfn [(mmul [m1 m2]\n                       (let [mul (for [k1 (keys m1) k2 (keys m2)] [(+ k1 k2) (* (m1 k1) (m2 k2))])\n                             nmul (for [k (set (map first mul))] [k (apply + (map (fn [e] (if (= (first e) k) (second e) 0)) mul))])]\n                         (into {} nmul))\n                       )]\n           (if (= 1 i) m (p97 (mmul m {1 1 0 1}) (dec i)))\n           ))\n  )","problem":97,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [n]\n  (let [p (dec n)\n        factorial (fn [n]\n        \t\t\t(reduce * (range 1 (inc n))))]\n    (for [x (range 0 (inc p))\n\t   :let [y (- p x)]]\n\t  (/ (factorial p) (* (factorial x) (factorial y))))))","problem":97,"user":"5151c184e4b03e678e393add"},{"problem":97,"code":"(fn pascal [row]\n  (let [data (range 1 row)\n        elems# (mapv #(vector %1 %2) (reverse data) data)]\n\n    (loop [elems elems#\n           prev 1\n           acc [1]]\n      (if (empty? elems)\n        acc\n        (let [[n k] (first elems)\n              val (* prev (/ n k))]\n          (recur (rest elems) val (conj acc val))\n          )\n        )\n      )\n    )\n  )","user":"560ac5cae4b05f002753df09"},{"problem":97,"code":"(fn [n]\n  (let* [n (dec n)\n         factorials (loop [k 1 acc '(1)]\n                     (if (> k n) acc\n                       (recur (inc k)\n                              (cons (* k (first acc)) acc))))]\n    (map #(/ (first factorials)\n             (* (nth factorials %) (nth factorials (- n %))))\n         (range 0 (inc n)))))","user":"5e471203e4b043cd24807a2a"},{"problem":97,"code":"(fn [n]\n  (if (= n 1) [1]\n    (loop [ans (map #(reduce + %) (partition 2 (list* 0 (conj (vec (interleave [1] [1])) 0))))]\n      (if (= (count ans) n) (vec ans)\n        (recur (map #(reduce + %) (partition 2 (list* 0 (conj (vec (interleave ans ans)) 0)))))))))","user":"53d977f1e4b0e771c302547a"},{"problem":97,"code":"(fn pascal [r]\n  (cond (= r 1) [1]\n        :else (concat [1]\n                      (map + \n                           (butlast (pascal (dec r)))\n                           (rest (pascal (dec r))))\n                      [1])))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn [c]\r\n  (nth\r\n    (iterate\r\n      #(map + `[0 ~@%] `[~@% 0]) [1])\r\n  (- c 1)))","problem":97,"user":"4e5af6d7535d8a8b8723a2b2"},{"code":"(fn [n] \r\n  (vec (nth\r\n          (iterate #((fn q [[a & b] [d & c]]\r\n                            (if (nil? a)\r\n                                '()\r\n                                (cons (+ a d) (q b c))))\r\n                      (cons 0 %) (concat % '(0)))\r\n            '(1)) (dec n))))","problem":97,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(letfn [(p [xs]\r\n           (concat [1] (map (partial apply +)\r\n                            (partition 2 1 xs)) [1]))]\r\n  #(last (take % (iterate p [1]))))","problem":97,"user":"4dc479c0c647a3c54c2ddc73"},{"code":"(fn this [n]\n  (cond (= n 1) [1]\n        :else (let [up (this (dec n))]\n                (println up)\n                (vec (concat (for [i (range (count up))]\n                  (cond (= i 0) 1\n                        :else (+ (nth up (dec i))\n                                 (nth up i)))) '(1))))))","problem":97,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":97,"code":"(fn [n] (reduce #(conj %1 (/ (* (get %1 %2) (- (dec n) %2)) (inc %2))) [1] (range (dec n))))","user":"53b71b94e4b047364c0444cd"},{"problem":97,"code":"(fn nth-row [n]\n\t(letfn\n    [\n     (fact [n] (reduce * 1 (range 1 (inc n))))\n     (newton [k n] (quot (fact n) (* (fact k) (fact (- n k)) )))\n    ]\n      (vec\n       (for [k (range n)]\n         (newton k (dec n))\n          )\n       )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":97,"code":"(fn [n]\n  (loop [counter 0\n         n_rows n\n         prev_row []]\n    (if (> counter n_rows)\n      prev_row\n      (let [curr_row\n            (if (= counter 1)\n                [1]\n                (concat [1] (map + prev_row (rest prev_row)) [1]))]\n        (recur (inc counter) n_rows curr_row)))))","user":"57839ae9e4b0ebec4cfb74b8"},{"problem":97,"code":"(fn pascal [n] (cond (= 1 n) [1]\n              :else (vec (concat [1] (mapv #(apply + %)\n                                  (partition 2 1 (pascal (dec n))))\n                        [1]))))","user":"57283dbce4b0c5bde472c154"},{"code":"(fn [n]\n  (loop [i n\n         res '(1)]\n    (if (<= i 1)\n      (vec res)\n      (recur (dec i)  (concat '(1) (map #(apply + %) (partition 2 1 res)) '(1))))))","problem":97,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [n]\n  (reductions #(* %1 (/ (- n %2) %2)) 1 (range 1 n)))","problem":97,"user":"516199bbe4b009fba0926e36"},{"code":"(fn pascal-triangle [rown]\n  (let [pascal (iterate\n                (fn [prev-row]\n                  (->>\n                   (concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n                   (map (partial apply +) ,,,)))\n                [1])]\n    (vec (last (take rown pascal)))))","problem":97,"user":"51502056e4b098b221effc25"},{"problem":97,"code":"(fn [row-num]\n  (loop [row [1]]\n    (if (< (count row) row-num)\n      (recur\n       (concat (conj (map #(+ %1 %2) row (drop 1 row)) 1) [1]))\n      row)))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":97,"code":"(fn solrow [n] (letfn [(sol [row col] (if (or (= col row) (= 1 col)) 1 (+ (sol (dec row) col) (sol (dec row) (dec col)))))] (map (partial sol n) (range 1 (inc n)))))","user":"54857657e4b0e286459a11ac"},{"code":"(fn pt-nth [n] (letfn [(fact [x] (loop [n x f 1] (if (= n 0) f (recur (dec n) (* f n)))))\n                       (comb [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n                 (map #(comb (dec n) %) (take n (range)))))","problem":97,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn [n]\n  (let [n (dec n)]\n    (take (inc n) (map second (iterate (fn [[k last]]\n                                         [(inc k)\n                                          (* last\n                                             (/ (- (+ n 1) (inc k))\n                                                (inc k)))])\n                                       [0 1])))))","problem":97,"user":"53034738e4b0d8b024fd373e"},{"code":"#(nth (iterate (fn [lst] (concat '(1) (map (fn [x] (apply + x)) (partition 2 1 lst)) '(1))) '(1)) (- %1 1))","problem":97,"user":"52cc85abe4b07d0d72b27367"},{"code":"(fn [x] \n  (let [tmp (vec (for [i (range 1 (inc (Math/ceil (/ x 2))))]\n    (/ (reduce * (map #(- x %) (range 1 i))) (reduce * (range 1 i)))))]\n    (concat tmp (reverse (subvec tmp 0 (Math/floor (/ x 2)))))))","problem":97,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn pascal[n]\n  (if (= n 1) [1]\n    (let [prev (pascal (- n 1))\n\t      seq1 (concat [0] prev)\n\t\t  seq2 (concat prev [0])]\n\t  (map + seq1 seq2))))","problem":97,"user":"5160195ae4b0e2be8aa20be3"},{"problem":97,"code":"(fn [n]\n  (loop [row [1]]\n    (if (= n (count row))\n      row\n      (recur (conj (into [1]\n                           (map (fn [[a b]] (+ a b)) (partition 2 1 row)))1)))))","user":"533f09e1e4b085b17e897d9a"},{"code":"(fn f \n  ([x] (f (dec x) 1 [1]))\n  ([x y r] (if (< x 1)\n             r\n             (f (dec x) (inc y) (conj r (* \n                                          (last r) \n                                          (/ x \n                                             y)))))))","problem":97,"user":"4efb2fd7535dced4c769f274"},{"code":"#(nth\n  (iterate\n    (fn [v]\n      (into [1]\n        (concat (map (partial apply +) (partition 2 1 v)) [1])))\n    [1])\n  (dec %))","problem":97,"user":"4ec53f8c535d6d7199dd368b"},{"problem":97,"code":"(fn \n  [n] \n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn [n] (let\n  [pascal (fn [xs]\n            (map (partial apply +)\n                 (partition 2 1 (concat '(0) xs '(0)))))]\n  (nth (iterate pascal [1]) (dec n))))","problem":97,"user":"4f9acea6e4b0dcca54ed6d10"},{"problem":97,"code":"(fn tri [n]\n  (last\n    (take n\n      (iterate\n        (fn [lvl]\n          (loop [fst 0 sec (first lvl) lvl (rest lvl) output []]\n            (if (= sec 0)\n              (cons 1 output)\n              (recur sec (or (first lvl) 0) (rest lvl) (cons (+ fst sec) output) )\n            )\n          )\n        )\n        [1]\n      )\n    )\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"problem":97,"code":"(fn f97 \n  [n] \n  (last\n   (take n \n    (iterate #(mapv + (conj % 0) (cons 0 %)) [1]))))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn [i] (nth\n          (iterate\n            (fn [l] (vec (map + (conj l 0) (cons 0 l))))\n            [1])\n          (dec i)))","problem":97,"user":"521dceeae4b050d5da042802"},{"problem":97,"code":"#((fn pascal [m n] (if (= n 0) '(1) (conj (pascal (inc m) (dec n)) (* (/ m n) (first (pascal (inc m) (dec n))))))) 1 (dec %))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn adj [x] (cond (= 1 x) [1]\n              (= 2 x) [1 1]\n              :else (apply vector (concat [1] (#(loop[x % r []] \n                                    (if (seq x) (recur (apply vector (rest x)) (conj r (+ (get x 0 0) (get x 1 0)))) r)) \n                                  (adj (dec x)))))))\n\n\n;(fn [i]\n;  (reduce\n;    #(conj %1 (* (last %1) (/ (- i %2) %2)))\n;    [1] (range 1 i)))","problem":97,"user":"52df232fe4b09f7907dd13fc"},{"problem":97,"code":"(fn [n]\n\t(let [next-row (fn [s]\n\t\t\t\t\t\t(loop [i 0 r []]\n\t\t\t\t\t\t\t(if (> i (- (count s) 2))\n\t\t\t\t\t\t\t\tr\n\t\t\t\t\t\t\t\t(recur \n\t\t\t\t\t\t\t\t\t(inc i) \n\t\t\t\t\t\t\t\t\t(conj r (+ (get s i) (get s (inc i))))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)]\n\t(loop [i 1 r [1] ]\n\t\t(if (> i (dec n))\n\t\t\tr\n\t\t\t(recur (inc i) (conj (into [1] (next-row r)) 1))\n\t\t)\n\t)\n )\n)","user":"5559b443e4b0deb715856e3c"},{"problem":97,"code":";pascal's triangle\n(fn [n]\n  (letfn [(pascal-number [row index]\n            (cond \n              (= 1 row) 1\n              (zero? index) 1\n              (= index (dec row)) 1\n              :else (+ (pascal-number (dec row) (dec index)) \n                       (pascal-number (dec row) index))))]\n    (for [index (range n)]\n      (pascal-number n index))))","user":"58bc8cbee4b0888cdc949d1b"},{"code":"(fn [row]\n  (reductions #(* % (/ (- row %2) %2))\n    1 (range 1 row)))","problem":97,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":97,"code":"(fn trap[n]\n  (last(take n (iterate (fn[lst] (concat (list (first lst))\n                            (butlast (map-indexed (fn[n a] (+ a (nth lst (inc n) a))) lst))(list(last lst))))[1]))))","user":"57fc08d8e4b0d3187e900988"},{"problem":97,"code":"(fn p [n]\n  (loop [t [1]]\n    (if (= n (count t)) \n      t\n      (recur (concat [1] \n                     (map + t (next t)) \n                     [1])))))","user":"552a793ee4b0ffed3738f955"},{"code":"(fn pascal-row [n]\n  (reduce (fn [row _] \n            (mapv + (conj row 0) (cons 0 row))) \n          [1] (range 1 n)))","problem":97,"user":"50c781bbe4b00bb60fe0c535"},{"problem":97,"code":"(fn pt [n] (if (< n 3) (repeat n 1) (concat [1] (map #(reduce + %) (partition 2 1 (pt (dec n)))) [1])))","user":"560a7b46e4b05f002753defb"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) \n    [1]\n    (let [p (pascal (dec n))]\n      (concat \n       [1]\n        (map #(+ %1 %2) \n             p (rest p))\n       [1]))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= 1 n)\n    [1]\n    (map #(+ (first %) (second %))\n         (partition 2 1\n                    (concat [] [0] (pascal-triangle (- n 1)) [0])))))","user":"565654dae4b0f9d632dd849f"},{"problem":97,"code":"#(loop [row [1]]\n   (if (= % (count row)) \n     row\n    (recur \n      (loop [r [1] col row]\n       (if (= 1 (count col))\n         (conj r 1)\n         (recur (conj r (+ (first col) (second col))) (rest col)))))))","user":"555883c5e4b0deb715856e2d"},{"problem":97,"code":"(fn [size]\n  (loop [row [1]]\n    (if (= (count row) size)\n      row\n      (let [internals (map #(apply + %) (partition 2 1 row))]\n        (recur (conj (vec (concat (conj [] 1) internals)) 1))))))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":97,"code":";; binomial expansion\n;;(fn [m]\n;;  (letfn \n;;    ((prod[j k] (reduce * (range j (inc k))))\n;;     (fact[n] (prod 1 n))\n;;     (ncr [n r] (/ (prod (inc (- n r)) n) (fact r))))\n;;    (map #(ncr (dec m) %) (range  m))))\n\n\n;; build whole tree\n#(loop [m 1 acc [1]]\n   (if (= % m) acc\n     (recur (inc m) (map + (cons 0 acc) (concat acc [0])))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":97,"code":"(fn [n] (let [g (fn [xs]\n  (let [as xs\n        bs (rest xs)\n        cs (map + as bs)\n        ds (cons 1 cs)\n        es (concat ds '(1))]\n    es))]\n  (nth (iterate g [1]) (- n 1))))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %)\n      (partition 2 1\n        (concat [0] (pascal (- n 1)) [0])))))","problem":97,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":97,"code":"(fn pf [n]\n   (let [sum-num (fn [x]\n                   (->> x\n                         (#(concat [0] % [0]))\n                         (partition 2 1)\n                         (map #(apply + %))))]\n     (if (< n 2)\n       [1]\n       (sum-num (pf (dec n))))))","user":"546a6e9fe4b00cfc9eacc157"},{"problem":97,"code":"(fn pascal [n]\n   (letfn [(elem [n k]\n             (if (= 0 k)\n               1\n               (* (elem n (dec k)) (/ (- (inc n) k) k))))]\n     (let [n (dec n)\n           elem (partial elem n)]\n       (vec (map elem (range 0 (inc n)))))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":97,"code":"(fn pascal [n]\n  (if\n    (= n 1) [1]\n    (map (partial apply +) (partition 2 1 (concat [0] (pascal (dec n)) [0])))))","user":"4eb97234535dfed6da9c6d53"},{"problem":97,"code":"(fn pascal [n]\n    (loop [rem-num-levels (dec n) result [1]]\n        (if (zero? rem-num-levels)\n            result\n            (recur (dec rem-num-levels)\n                    (flatten\n                        (conj\n                            (conj [1] (map + (rest result) (drop-last result)))\n                            1\n                        )\n                    )\n            )\n        )\n    )\n)","user":"5227eacee4b0186687e23a5e"},{"code":"(fn [n]\r\n  (last\r\n    (take n\r\n      (iterate\r\n        #(map (fn [[x y]] (+ x y))\r\n              (partition 2 1 [0] (cons 0 %)))\r\n        [1]))))","problem":97,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":97,"code":"(fn\n  [n]\n  (reduce \n    (fn [p _]\n      (concat \n        [1] \n        (map \n          (partial apply +) \n          (partition 2 1 p)) \n        [1]))  \n    [1] (range 1 n)))","user":"59f91b99e4b0ca45a743a33a"},{"problem":97,"code":"(fn P1 [n]\n         \n         (cond\n          (= n 1) [1]\n          :default\n          (vec (concat [] (reduce #(conj (vec (drop-last %1)) (+ (last %1) %2) %2) [0] (P1 (- n 1))))\n          \n          ))\n         \n         )","user":"53ca23e3e4b00fb29b2212c6"},{"problem":97,"code":"#(loop [c 1 acc [1]]\n  (if (>= c %)\n    acc\n    (recur \n      (inc c) \n      (-> (map + acc (next acc))\n          (conj 1)\n          vec\n          (conj 1)))))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":97,"code":"(fn [row]\n  (loop [r 1 current-row [1]] \n    (if (= r row)\n      current-row\n      (let [next-row \n            (cond\n             (= r 1) [1 1]\n             :else (->\n                    (->> current-row\n                         (partition 2 1)\n                         (map #(apply + %))\n                         (apply conj [1]))\n                    (conj 1)))]\n        (recur (inc r) next-row)))))","user":"5abbbd46e4b073f1774426db"},{"problem":97,"code":"(fn nivel [ n]\n  (let\n    [ff (fn f [ [x y & res]]\n            (cons \n              (+ x y)\n              (if\n                (nil? res)\n                (cons 1 nil)\n                (f (cons y res)))))\n     ff1 (fn [x] (cons 1 (ff x)))]\n    (if\n      (= n 1) \n      [1]\n      (nth (iterate ff1 [1 1]) (- n 2)))))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [n]\n    (first (drop (dec n)\n                 (iterate (fn [c] (concat [1] \n                                          (map #(apply + %) \n                                               (partition 2 1 c)) \n                                          [1])) \n                          [1]))))","problem":97,"user":"52951156e4b02ebb4ef7501b"},{"code":"(fn [n]\n  (let [n1 (dec n)\n        fact #(apply * (range 1 (inc %)))\n        n1fact (fact n1)]\n  \n    (map #(/ n1fact (* (fact %) (fact (- n1 %)))) (range 0 (inc n1)))))","problem":97,"user":"4f29eb2ae4b0d6649770a037"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate (fn [coll]\n                (loop [x (concat [0] coll [0])\n                       res []]\n                  (if-not (next x) res\n                    (recur\n                     (next x)\n                     (conj res (apply + (take 2 x))))))) '(1)) (- n 1)))","user":"58303fc3e4b051871117c006"},{"problem":97,"code":"(fn pastry [n]\n  (if (= 1 n)\n    [1]\n    (reduce #(conj %1 (apply + %2)) \n            [1]\n            (partition-all 2 1 (pastry (dec n))))))","user":"5566463ee4b0c656e3ff1831"},{"code":"(fn [n]\n  (nth\n    (iterate #(map +' (concat [0] %) (concat % [0])) [1])\n   (dec n)))","problem":97,"user":"51929214e4b08962174cf74c"},{"problem":97,"code":"(fn ptr [n]\n  (if (= n 1)\n    [1]\n    (let [prev (ptr (dec n))]\n      (concat [(first prev)]\n               (map + (butlast prev) (rest prev))\n               [(last prev)]))))\n;(fn [n]\n;  (letfn [(f [m acc]\n;            (if (= n m)\n;              acc\n;              (f (inc m) (vec (concat '(1)\n;                                      (->> acc\n;                                           (mapcat #(vector % %))\n;                                           (rest)\n;                                           (butlast)\n;                                           (partition 2)\n;                                           (map (fn [coll] (apply + coll))))\n;                                      '(1))))))]\n;    (f 1 [1])))","user":"56754c4be4b05957ce8c6149"},{"code":"(fn [x]\n    (loop [a [1]\n           n 1]\n      (if (= n x)\n        a\n        (recur\n          (vec (concat '(1) (map #(apply + %) (partition 2 1 a)) '(1)))\n          (+ n 1)))))","problem":97,"user":"51b3f109e4b0f094dd986fa9"},{"problem":97,"code":";; more complciated than I would like\n(fn pt [n]\n  (loop [current-row [1]\n         current-index 1]\n    (if (= current-index n)\n      current-row\n      (recur (take (inc current-index)\n                   (map #(+ (nth current-row (dec %) 0) (nth current-row % 0))\n                        (iterate inc 0)))\n             (inc current-index)))))","user":"53322cece4b019098a6f8b73"},{"code":"(fn [n] (nth (iterate #(lazy-cat [1] (for [[x y] (partition 2 1 %)] (+ x y)) [1]) [1]) (dec n)))","problem":97,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %) (->> (pascal (dec n))\n                           (partition-all 2 1)\n                           (cons '(1))))))","problem":97,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn foo\n\t\t\t\t   ([coll n]\n\t\t\t\t      (if (= 1 n)\n\t\t\t\t\tcoll\n\t\t\t\t\t(let [newcoll (foo coll)]\n\t\t\t\t\t  (foo newcoll (dec n)))))\n\t\t\t\t   ([coll]\n\t\t\t\t      (if (coll? coll)\n\t\t\t\t\t(let [newcoll (cons 0 (conj coll 0))]\n\t\t\t\t\t  (into [] (foo (first newcoll) (second newcoll) (drop 2 newcoll))))\n\t\t\t\t\t(foo [1] coll)))\n\t\t\t\t   ([a b coll]\n\t\t\t\t      (if (pos? (count coll))\n\t\t\t\t\t(cons (+ a b)\n\t\t\t\t\t      (foo b (first coll) (rest coll)))\n\t\t\t\t\t(list (+ a b)))))","problem":97,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"(fn p [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    `[1\n      ~@(map\n         (partial apply +)\n         (partition 2 1 (p (dec n))))\n      1]))","problem":97,"user":"51170b49e4b0063b4e3e16d9"},{"code":"(fn pascal-row [n]\n  (letfn [(sums [s]\n                (if (> 2 (count s))\n                     []\n                    (conj (sums (rest s))\n                          (+ (first s)\n                             (second s)))))\n          (row-from-previous [prev-pascal]\n             (conj (vec (cons 1 \n                   (sums prev-pascal))) 1))]\n  (if (= n 1)\n    [1]\n    (nth (iterate row-from-previous [1 1]) (- n 2)))))","problem":97,"user":"501fa1aee4b0cb6ebc0a42eb"},{"problem":97,"code":"(fn [n]\n    (nth\n     (iterate\n      (fn [xs]\n        (conj (vec (conj (map #(+ (first %) (last %)) (partition 2 (interleave xs (rest xs)))) 1)) 1))\n      [1])\n    (dec n)))","user":"592ac17ae4b072a2710fcf26"},{"problem":97,"code":"(fn [row]\n   (let [r (- row 1)\n         c r\n         pascal (fn p\n                  [rw cl]\n                  (if (or\n                       (= rw 0)\n                       (= cl 0)\n                       (= rw cl))\n                    1\n                    (+\n                     (p (- rw 1) (- cl 1))\n                     (p (- rw 1) cl))))]\n     (for [x [r]\n           y (range (+ r 1))]\n       (pascal x y))))","user":"52c45ac8e4b0c2d177d620d9"},{"problem":97,"code":"(fn f[n]\n   (case n\n     1 [1]\n     2 [1 1]\n     (let [n0 (f (dec n))]\n       (concat [1] (map + n0 (rest n0)) [1]))))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":97,"code":"(fn pascal [n]\n   (let [sum-row (fn [xs]\n                   (->> xs \n                         (#(concat [0] % [0])) \n                         (partition 2 1)\n                         (map #(apply + %))))]\n     \n     (if (< n 2)\n       [1]\n       (sum-row (pascal (dec n))))))","user":"54a627bce4b09f271ff37c83"},{"problem":97,"code":"#(loop [s [1], i %] (if (= 1 i) s (recur (map + (lazy-cat [0] s) (lazy-cat s [0])) (dec i)) ))","user":"5603c31fe4b04bb52996e1c1"},{"problem":97,"code":"(fn [n]\n  (let [nextrow (fn [row]\n                   (let [center (map (partial reduce +) \n                                     (partition 2 1 row))]\n                     (vec (concat [1] center [1]))))]\n    (nth (iterate nextrow [1]) (dec n))))","user":"54ae541ae4b09f271ff37cef"},{"problem":97,"code":"(fn pc [n]\n  (if (= n 1)\n    [1]\n    (mapv +\n         (conj (pc (- n 1)) 0)\n         (into [0] (pc (- n 1))))))","user":"56069006e4b08b23635d3174"},{"code":"(fn pascal-triangle [n]\n  (nth ((fn pascal-trapezoid [xs]\n             (lazy-seq\n              (cons xs\n                    (pascal-trapezoid\n                     (concat [(first xs)]\n                             ( map (partial apply +')\n                                   (partition 2 1  xs))\n                             [(last xs)])))))\n           [1])\n        (dec n)))","problem":97,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn [m]\n  (let [n,(dec m)]\n  (letfn [(fact [i] (if (zero? i) 1 (* i (fact (dec i)))))\n          (c [n r] (/ (fact n) (* (fact (- n r)) (fact r))))]\n    (map (fn [i] (c n i)) (range m))\n    )))","problem":97,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":97,"code":"(fn p [n] (if (= n 1) [1] (let [o (p (dec n))] (into [] (map + (conj o 0) (into [0] o))))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [x] (nth (iterate (fn[xs] (loop [xs xs r []] (let [a (first xs) b (first (rest xs))](if (not b) (into [1] (conj r 1)) (recur (rest xs) (conj r (+ a b))))))) [1]) (- x 1)))","problem":97,"user":"5032b398e4b00c0952a257eb"},{"problem":97,"code":"(fn [n]\n  (loop [res [[1] [1 1]]\n          cur 3\n          ]\n    (if (<= cur n)\n      (recur (conj res \n                   (concat [1] \n              \t\t\t   (map #(apply + %) (partition 2 1 (last res)))\n              \t\t\t   [1]\n              \t\t\t   )\n                     ) \n             (inc cur))\n      (get res (dec n))\n      )\n    )\n         \n  )","user":"5510d948e4b06e50f9beb18d"},{"code":"(fn [n] (let [fact #(reduce * 1 (range 1 (+ 1 %)))\n              comb (fn [n i] (/ (fact n) (* (fact i) (fact (- n i)))))]\n           (map #(comb (- n 1) %) (range n))))","problem":97,"user":"4f13047d535d64f60314642c"},{"code":"(fn ps [n]\n  (if (= 1 n)\n      '(1)\n      (let [prev (ps (dec n))\n            sums (for [i (range (dec (count prev)))]\n                    (+ (nth prev i) (nth prev (inc i))))]\n        (concat '(1) sums '(1)))))","problem":97,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn [i]\n    (let [n (- i 1)]\n        (letfn [(fac [n] (reduce * (range 1 (inc n))))]\n            (map #(int (/ (fac n) (* (fac %) (fac (- n %))))) (range (inc n))))))","problem":97,"user":"4f0b2028535d0136e6c222ff"},{"problem":97,"code":"(fn [x] (loop [cnt x acc [1]]\n          (if (zero? (dec cnt))\n            acc\n            (recur (dec cnt) \n                   (concat [1] (map #(apply + %) (partition 2 1 acc)) [1])\n                   ))))","user":"529c722de4b04e0c58e87b63"},{"code":"(fn [n]\n  (nth \n     (iterate #(concat (map + % (cons 0 %)) [1]) [1])\n     (- n 1)))","problem":97,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (map + \n         (cons 0 (pascal (dec n)))\n         (conj (apply vector (pascal (dec n))) 0))\n  )\n)","problem":97,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":97,"code":"(fn yang \n  [n]\n  (if (= n 1)\n    [1]\n    (concat \n    \t'(1)\n    \t(map \n    \t\t#(+\n    \t\t\t(first %)\n    \t\t\t(second %))\n    \t\t(partition \n    \t\t\t2\n    \t\t\t1\n    \t\t\t(yang (dec n))))\n    \t'(1) ))\n  )","user":"583c4482e4b089d5ab817d7e"},{"problem":97,"code":"(fn [n] (nth (iterate #(flatten [1 (map (partial apply +) (partition 2 1 %)) 1]) [1]) (dec n)))","user":"5bfe4ecfe4b0bdcf453d1608"},{"problem":97,"code":"(fn pascal-tree [rn]\n  (letfn [\n    (pascal-entry [r n _] \n      (cond \n        (== 0 n) 1\n        :else (+ (nth r n) (nth r (dec n)))))\n    (pascal-row [r]\n      (conj (vec (map-indexed (partial pascal-entry r) r)) 1))\n    ]\n    (cond\n      (== 1 rn) [1]\n      :else (pascal-row (pascal-tree (dec rn))))))","user":"5fb8fe30e4b03f550f448223"},{"problem":97,"code":"(fn pascal-triangle [r]\n    (if (= r 1) [1]\n      (if (= r 2) [1 1]\n          (into (vec (cons 1 (map (partial reduce +) (partition 2 1 (pascal-triangle (dec r))))))'(1)))))","user":"56cf80f9e4b0ea9b8538f76a"},{"problem":97,"code":"#(loop [r [1]\n       i 1]\n  (if (= i %)\n    r\n    (recur (map + (conj r 0) (reverse (conj r 0)))\n           (inc i))))","user":"527818f7e4b03e8d9a4a7519"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [p (pascal (- n 1))\n          x (cons 0 p)\n          y (conj p 0)]\n      (vec\n        (map\n          (fn [a] (apply + a))\n          (partition-all 2 (interleave x y)))))))","problem":97,"user":"4f559d2ce4b0a7574ea71808"},{"problem":97,"code":"(fn [n]\n  (loop [n n res [1]]\n   (if (= n 1) res\n    (recur (dec n) (map + (concat [0] res) (concat res [0]))))))","user":"5b61aa6ae4b0c6492753e712"},{"problem":97,"code":"(fn [x] (nth  (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n           [1]) (dec x)))","user":"555881f5e4b0deb715856e2c"},{"code":"(fn f [n]\n  (let [c (fn [x] (map-indexed #(+ %2 (nth x %)) (rest x)))]\n  (if (= n 1)\n    '(1)\n    (flatten [1 (c (f (dec n))) 1]))))","problem":97,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn row [n]\n  (if (= n 1) [1]\n    (let [prev (row (- n 1))]\n      (flatten [1 (map (comp #(apply + %) list) prev (rest prev)) 1]))))","problem":97,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":97,"code":"(fn pascal-tri [n]\n  (condp = n\n    1 [1]\n    (let [c (pascal-tri (dec n))\n          a (concat [0] c)\n          b (concat c [0])\n          ]\n      (vec (map + a b)))))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1]) (- n 1))\n)","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn pascal [n]\n\t(if (= n 1) [1]\n\t\t(let [sumpair (fn [[a b]] (+ a b))]\n\t\t\t(flatten (vector 1 (map sumpair (partition 2 1 (pascal (dec n)))) 1))))\n\t)","problem":97,"user":"5201ff99e4b0b2e020a18f26"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    (vector 1)\n    (let [pascaldec (pascal (dec n))]\n      (conj\n      (reverse\n      (conj \n       (map #(+ %1 %2)  pascaldec (next pascaldec))\n        1)) 1))))","user":"55c77070e4b0e31453f649d0"},{"problem":97,"code":"#(nth (iterate (fn [x] (concat [1] (map + x (rest x)) [1])) [1]) (dec %))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":97,"code":"#(nth\n  (iterate\n   (fn [v] (mapv + (into [0] v) (into v [0])))\n   [1])\n  (dec %))","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [(* a (/ (- n b) b)) (+ 1 b)]) [1 1]))))","problem":97,"user":"4e6e6630535d5021c1a89609"},{"problem":97,"code":"(fn [n] (nth (iterate #(map + (concat [0N] %1) (concat %1 [0N])) [1]) (dec n)))","user":"5492164ee4b0b312c081ff3e"},{"problem":97,"code":"(fn [nrows]\n  (loop [n nrows prevRow [1]]\n    (if (= 1 n)\n      prevRow\n      (recur (dec n)\n             (loop [p prevRow thisRow [1]]\n               (if (empty? p)\n                 thisRow\n                 (recur (drop 1 p) (conj thisRow (apply + (take 2 p))))\n                 )\n               )\n             )\n      )\n    )\n  )","user":"5763818ae4b0994c1922fbc7"},{"problem":97,"code":"(fn [row]\n  (let [fact (fn [n] (reduce * (range 1 (+ n 1))))\n        n-choose-r (fn [n r] (/ (fact n) (* (fact r) (fact (- n r)))))]\n  \t(map (partial n-choose-r (- row 1)) (range row))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn pascal [row]\n  (letfn [(pascal-position [row column]\n            (cond\n             (or (< column 0)\n                 (> column row)) \t0\n             (or (= column row)\n                 (= column 0)) \t1\n             :else (+ \n                    (pascal-position (- row 1) column) \n                    (pascal-position (- row 1) (- column 1)))))]\n    (for [column (range row)]\n      (pascal-position (- row 1) column))))","problem":97,"user":"517531c6e4b07031762f2eea"},{"code":"(fn Pascal-tri[n]\r\n  (if (= n 1) \r\n    [1]\r\n    (conj (into [1]\r\n                (map #(reduce + (subvec (Pascal-tri (dec n)) (dec %) (inc %)))\r\n                     (range 1 (dec n))))\r\n          1)))","problem":97,"user":"4fabbb97e4b081705acca21d"},{"code":"(fn triangles [n]\n    (let [fact (fn [n] (reduce * (range 1 (inc n))))\n          choose (fn [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n      (map #(choose (dec n) %) (range 0 n))))","problem":97,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":97,"code":"(fn [n]\n  (loop [index 1 row [1]]\n    (if (>= index n)\n      row\n      \n      (let [next-row (into (apply vector (cons 1 (map #(+ (nth row %) (nth row (+ 1 %))) (range 0 (- (count row) 1))) )) [1])]\n        \n      \t(recur (inc index) next-row)  \n      )\n    )\n  )\n )","user":"5de6484ce4b0986d99407f66"},{"code":"(fn pascal [n]\n  (if (= 1 n) [1]\n      (let [p (pascal (dec n))]\n        (conj (vec (map + p (conj (drop-last p) 0))) 1))))","problem":97,"user":"500cb910e4b05f7c30cfa698"},{"problem":97,"code":"(fn pascals-triangle-row [n]\n  (let [\n        cell (fn cell [row column]\n               (cond\n                 (< column 1) 0\n                 (> column row) 0\n                 (= row 1) 1\n                 :else (+ (cell (- row 1) (- column 1)) (cell (- row 1) column))))\n        ]\n    (map (partial cell n) (range 1 (inc n)))))","user":"5ed3c43be4b016b56eae05c4"},{"code":"(fn tri [n]\n  (if (= n 1) [1]\n    (concat [1] (conj (vec (map #(apply + %) (partition 2 1 (tri (dec n))))) 1))))","problem":97,"user":"4e6f1b7a535d5021c1a89618"},{"problem":97,"code":"(memoize (fn pascal [n] (if (= 1 n) [1] (concat [1] (let [prev (pascal (dec n))] (map + prev (rest prev))) [1]))))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":97,"code":"(fn pt [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pt (dec n))\n          pt-prev #(get prev % 0)]\n      (->> (range n)\n           (map #(+\n                   (pt-prev (dec %))\n                   (pt-prev %)))\n           (into [])))))","user":"5713c575e4b07c98581c3aab"},{"code":"(fn triangle [n]\n   (nth (iterate (fn [t]\n                   (map +\n                        (concat t [0])\n                        (concat [0] t)))\n                 [1])\n        (dec n)))","problem":97,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (vec\n      (cons 1\n        (conj\n          (vec\n            (map #(apply + %)\n                 (partition 2 1 (pascal (dec n)))))\n          1)))))","problem":97,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn pt [n]\n  (condp = n\n        1 [1]\n        2 [1 1]\n        (map #(apply + %) (partition 2 1 (concat [0] (pt (dec n)) [0])))))","problem":97,"user":"52bc6cb2e4b07a9af57922f5"},{"problem":97,"code":"(fn [n] (nth \n         (iterate #(concat [1] \n                           (map + % (rest %)) \n                           [1]) \n                  [1]) \n         (dec n)))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"(fn p [n]\r\n  (if (= n 1)\r\n      [1]\r\n       (concat [1]\r\n        (let [s (p (- n 1))]\r\n          (remove #(= 1 %)\r\n            (map #(apply + %)\r\n              (interleave\r\n                (partition 2 s)\r\n                (partition 2 (concat (rest s) '(0)))))))\r\n         [1]\r\n         )))","problem":97,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":97,"code":"(fn pascal-row [row]\n  (map \n    (fn [column] \n      ((fn pascal-value [row column]\n         (if (or (= column 1) (= column row))\n           1\n           (+ (pascal-value (dec row) (dec column)) (pascal-value (dec row) column)))) \n        row \n        column)) \n    (range 1 (inc row))))","user":"5e839edde4b09a7a73c8bbba"},{"problem":97,"code":"(fn pascal [n]\n  (map (fn overn [k]\n         (let [fac (fn [l] (apply * (range 1 (inc l))))]\n           (/ (fac (dec n))\n              (* (fac k)\n                 (fac (- (dec n) k))))))\n       (range n)))","user":"5603d057e4b0c80df0ca264e"},{"code":"(fn [n]\n  (letfn [(factorial [n]\n                     (reduce * (range 1 (inc n))))\n          (choose [n k]\n                  (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n    (map (partial choose (dec n)) (range n))))","problem":97,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn crap [n]\n(map (partial \n         (fn pt [n m] \n          (if (or (= m 1) (= m n))\n            1\n            (+ (pt (- n 1) (- m 1)) (pt (- n 1) m))\n            )\n          )\n        n) (range 1 (+ 1 n)))\n  )","problem":97,"user":"4f2004a1535d64f6031464a7"},{"code":"(fn [n]\n  (last (take n \n    (iterate\n      #(concat [1] \n        (map (partial apply +) (partition 2 1 %)) \n        [1])\n      [1]))))","problem":97,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":97,"code":"(fn pascalsTriangle\n  [n]\n  (cond\n    (= n 1) [1]\n    :else\n    (loop [i 1\n           res ()]\n      (cond\n        (= i (max n)) (first res)\n        :else\n        (recur (inc i) (conj res (vec (->>\n                                       (partition 2 1 (first res))\n                                       (map #(reduce + %))\n                                       (cons 1)\n                                       (reverse)\n                                       (cons 1)))))))))","user":"5aa00b7fe4b0d174b936c825"},{"problem":97,"code":"(fn [n] (nth (iterate #(into [] (map + (cons 0 %) (concat  % [0]))) [1] ) (- n 1)))","user":"550609b3e4b021ccfedb9695"},{"problem":97,"code":"(fn [n]\n  (letfn [(factorial [x]\n            (if (zero? x) 1 (reduce * (range 1 (inc x)))))\n          (combination [n r]\n            (/ (factorial n) (* (factorial (- n r)) (factorial r))))]\n    (let [n (- n 1)] (vec (for [r (range (inc n))] (combination n r))))))","user":"5a512929e4b05d388ecb6be2"},{"code":"(fn f [n]\n  (if (= n 1) [1]\n    (let [l (f (dec n))]\n      (concat [1] (map + l (next l)) [1]))))","problem":97,"user":"522b922ee4b0d34ee08e71c3"},{"problem":97,"code":"(fn xxx\n  ([n] (xxx n [1]))\n  ([n acc]  (if (= n 1)\n              acc\n              (recur (dec n) (into (into [1] (for [ i (range 0 (- (count acc) 1)) ] (+ (acc i) (acc (inc i))))) [1]))))\n)","user":"55f01316e4b06e875b46ce1a"},{"code":"(fn [i]\n  (nth \n   (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1]) (dec i)))","problem":97,"user":"50b47c46e4b0c464d223d1b8"},{"code":"(fn [n]\n  (loop [n n r [1]]\n    (if (<= n 1)\n      r\n      (recur (dec n)\n        (concat [1]\n                (map #(apply + %) (partition 2 1 r))\n                [1])))))","problem":97,"user":"50f48298e4b004d364930527"},{"problem":97,"code":"(fn [n]\n   (reduce\n    #(conj %1 (* (last %1) (/ (- n %2) %2)))\n    [1]\n    (range 1 n)))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"#(letfn [(f [n] (apply * (range 1 (+ n 1)))) ]\n\t\t(for [k (range %)] ((fn [n k] (/ (f n) (* (f k) (f (- n k))))) (- % 1) k)))","problem":97,"user":"4f047542535dcb61093f6bc7"},{"code":"(fn pascals-triangle-97 [r]\n  (case r\n    1 [1]\n    2 [1 1]\n    (let [previous-row (pascals-triangle-97 (dec r))]\n      (concat [1] (map #(apply + %) (partition 2 1 previous-row)) [1]))))","problem":97,"user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn pt [n]\n  (cond (= n 1) [1]\n        (> n 1) (let [coll (pt (dec n))]\n                  (conj (vec (cons 1 (for [x (range (dec (count coll)))]\n                          (+ (coll x) (coll (inc x)))))) 1))))","problem":97,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":97,"code":"#(loop [ p [[1]] i 1 n % ]\n  (if (= i n)\n    (last p)\n    (recur (conj p (let [a (last p)]\n      (loop [i 0 x (+ (count a) 1) r []]                \n        (if (= i x)\n          r\n          (recur (inc i) x (conj r (+ (nth a i 0) (nth a (- i 1) 0))))\n        )\n      )\n    ))\n           (inc i) n)\n    )  \n  )","user":"59551e04e4b066ee0a44af20"},{"problem":97,"code":"(fn rec [iter] (condp = iter\n                       \t1 [1]\n                        2 [1 1]\n  \t\t\t\t\t\t(concat [1] (map #(apply + %) (partition 2 1 (rec (dec iter)))) [1])))","user":"54e0a9c3e4b024c67c0cf7b5"},{"problem":97,"code":"(fn pas [n]\n  (last (take n\n   (iterate \n     (fn [xs]\n       (vec (map + (conj xs 0) (into [0] xs))))\n     [1]))))","user":"57275898e4b0c5bde472c13e"},{"code":"(fn p [n]\n       (if (= 1 n)\n         [1]\n         (let [a (p (dec n))]\n           (conj (vec (map + (cons 0 a) a)) 1))))","problem":97,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn pt [n]\r\n  (nth\r\n    (iterate\r\n      (fn [p] (if (= 1 (count p)) [1 1] (apply vector (flatten [1 (map #(apply + %) (partition 2 1 p)) 1]))))\r\n      [1]) (dec n)))","problem":97,"user":"4f0f01c0535d0136e6c22329"},{"problem":97,"code":"(fn get-pascal-row [row]\n  (letfn [(calculate-row [prevRow]\n                         (flatten [1 \n                                   (map (fn [[x y]] (+ x y)) (partition 2 1 prevRow)) \n                                   1]))]\n    (last (take row (iterate calculate-row [1])))))","user":"53504fe6e4b084c2834f4ada"},{"problem":97,"code":"(fn pascal-row\n  [n]\n  (loop [row []\n         k 0]\n    (let [pascal (fn f [a b]\n                   (if (pos? b) \n                     (* (f a (- b 1)) (/ (- (+ a 1) b) b))\n                     1))]\n      (let [new-row (conj row (pascal (- n 1) k))]\n        (if (< k n)\n          (recur new-row (+ 1 k))\n          row)))))","user":"5574c172e4b05c286339e059"},{"code":"(let [pascal\n  (fn pascal [row col]\n    (if (or (= col 0) (= col row))\n  \t1\n\t\t(+ (pascal (- row 1) (- col 1)) (pascal (- row 1) col))))]\n(fn [r] (map (partial pascal (dec r)) (range 0 r))))","problem":97,"user":"4dfe65a1535d04ed9115e787"},{"problem":97,"code":"#(letfn [(factorial\n  [n]\n  (loop [n n\n         x 1]\n      (if (zero? n)\n        x\n        (recur (dec n) (* n x)))))\n  (choose\n  [n k]\n  (/ (factorial n)\n     (* (factorial (- n k))\n        (factorial k))))]\n    (let [n (dec %)]\n    (mapv (partial choose n) (range (inc n)))))","user":"4eb47bb1535d7eef30807362"},{"problem":97,"code":"(fn pasc [x]\n    (if (= x 1)\n        [1]\n        (let [v (pasc (dec x))]\n             (apply vector (map + (cons 0 v) (conj v 0))))))","user":"59089229e4b047aa04b1997c"},{"problem":97,"code":"(fn pastri [n] \n  (if (= 1 n) [1]\n    (vec (concat \n          '(1)\n          (loop [s (pastri (dec n)) r ()]\n            (if (> (count s) 1)\n              (recur (rest s) (concat r (list (reduce + (take 2 s)))))\n            r))\n          '(1)))))","user":"587c59d1e4b01531a375eb17"},{"code":"#(last (take % (iterate (fn [xs]\n                          (cons 1 (into (list 1)\n                                        (map + (rest xs) (butlast xs)))))\n                        [1])))","problem":97,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn pascal-triangle [row]\n  (condp = row\n      1 [1]\n      (vec\n       (concat\n        [1]\n        (map (partial apply +)\n             (partition 2 1\n                        (pascal-triangle (dec row))))\n        [1]))))","problem":97,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (dec n))]\n      (concat [1]\n              (for [i (range (- n 2))]\n                (+ (nth prev i) (nth prev (inc i))))\n              [1]))))","problem":97,"user":"4fde492be4b05e33b9224f8a"},{"problem":97,"code":"(fn pascal \n  [n]\n  (nth\n    (iterate\n      #(vec (map + (conj % 0) (cons 0 %))) \n      '[1])\n    (dec n)))","user":"54091b82e4b0addc1aec66d5"},{"problem":97,"code":"(fn [n]\n  (loop [x 1 res [1]]\n    (if (>= x n)\n      res\n      (recur (inc x) (concat \n                       [(first res)]\n                       (map + res (rest res))\n                       [(last res)])))))","user":"57a8eba2e4b0a96607956225"},{"code":"(fn pascal-row [n]\n  (loop [row [1] num 1]\n    (if (= num n)\n      row\n      (recur\n        (reduce\n          #(conj %1 %2)\n          [1]\n          (map\n            #(+ %1 %2)\n            row\n            (rest (conj row 0))))\n        (inc num)))))","problem":97,"user":"526ee63de4b03e8d9a4a733f"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [p (pascal (- n 1))]\n      (vec (map (fn [x] (+ (get p (- x 1) 0) (get p x 0))) (range n))))))","user":"55ed37ebe4b0121d4835fdd6"},{"code":"(fn [n]\n    (loop [row [1] i 1]\n      (if (= i n) row\n        (recur \n            (concat [1] (map #(apply + %)\n                 (partition 2 1 row)) [1])\n            (inc i)))))","problem":97,"user":"4fe8da4de4b0547ebccb2429"},{"problem":97,"code":"#(letfn [(f [n] (loop [x n ret 1] (if (<= x 1) ret (recur (- x 1) (* x ret)))))\n         (c [n k] (/ (f n) (* (f k) (f (- n k)))))]\n    (map (partial c (- % 1)) (range 0 %)))","user":"555b35f7e4b0deb715856e4b"},{"problem":97,"code":"(fn [x]\n   (last\n     (butlast\n       (last\n         (take x (iterate\n                   (fn [c]\n                     (conj c\n                           (reduce (fn [a b] (if (vector? a)\n                                               (conj (vec (butlast a)) (+ (last a) b) b)\n                                               (conj [1] (+ a b) b))) (last c)))) [[1] [1 1]]))))))","user":"52540bcce4b0541d1855b952"},{"code":"(fn pascal [n]\n   (if (<= n 2) (repeat n 1)\n       (let [prev (pascal (- n 1))]\n         (concat\n          [1]\n          (map #(+ (nth prev %) (nth prev (inc %)))\n               (range 0 (- n 2)))\n          [1]))))","problem":97,"user":"504db141e4b021508a333965"},{"problem":97,"code":"(fn pasc-row [n]\n  (if (= n 1) '(1)\n    (let [prev-row (pasc-row (dec n))]\n      (concat '(1) (map + (drop 1 prev-row) (take (dec n) prev-row)) '(1)))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":97,"code":"(letfn [(f [xs]\n  (lazy-seq\n   (if (sequential? xs)\n     (let [line (map #(apply + %) (partition 2 1 (concat [0] xs [0])))]\n       (cons line (f line)))\n     (cons '(1) (f '(1))))))]\n  #(nth (f nil) (dec %)))","user":"56795deae4b05957ce8c6187"},{"code":"(fn f [n]\n  (nth (iterate (fn [coll]\n                  (let [tc (conj (vec (cons 0 coll)) 0)]\n                    (vec (map + tc (rest tc)))))\n                [1])\n       (dec n)))","problem":97,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn pascal [n]\n (if (= n 1)\n  [1]\n  (let [n-1 (pascal (dec n))]\n    (let [res (vec (for [i (range 1 (dec n))] (+ (n-1 i) (n-1 (dec i)))))]\n      (vec (conj (seq (conj res 1)) 1))))))","problem":97,"user":"4e28120f535deb9a81d77efa"},{"problem":97,"code":"(fn pascals [y]\n  (cond (= y 1) [1]\n        (= y 2) [1 1]\n        :else (conj (first (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0] (pascals (dec y)))) 1)))","user":"5694284de4b0dcc4269f410f"},{"problem":97,"code":"(fn pascal [row]\n  (let [n (dec row)]\n    (loop [k 1\n           prev 1\n           result [1]]\n      (if (>= k row)\n        result\n        (let [next (* prev (/ (- row k) k))]\n          (recur (inc k) next (conj result next)))))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"code":"(fn [n] (map (fn [k] (let [f #(->> (inc %1)\n                                    (range %2)\n                                    (reduce *))]\n                        (/ (f (dec n) (- n k)) (f k 1))))\n             (range 0 n)))","problem":97,"user":"4e9fd521535d7eef3080729a"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    (let [sum (partial reduce +)\n          previous-line (pascal (dec n))\n          summed-adjacents (mapv sum (partition 2 1 previous-line))]\n      (vec (flatten [1 summed-adjacents 1])))))","user":"516385cee4b055933a9ca02d"},{"problem":97,"code":"#(nth (iterate (fn [r] (map (partial reduce +) (partition 2 1 (concat [0] r [0])))) [1]) (dec %))","user":"55773cbae4b05c286339e07f"},{"problem":97,"code":"#(nth (iterate (fn [c]\n                   (concat [1] (loop [c c acc []]\n                                 (if (< (count c) 2) acc\n                                                     (recur (rest c) (conj acc (+ (first c) (second c)))))) [1])) [1]) (dec %))","user":"5d764e52e4b02e6b30c93524"},{"problem":97,"code":"(fn [n]\n  (loop [a [1] k (- n 1)]\n    (if (zero? k)\n      a\n      (recur (into []\n                   (map #(apply + %)\n                        (partition 2\n                                   (interleave (conj a 0)\n                                               (cons 0 a)))))\n             (dec k)))))","user":"5ab564f8e4b073f177442639"},{"code":"#(->> [1] (iterate (fn [s] (concat [1] (map (partial apply +) (partition 2 1 s)) [1]))) (take %) last)","problem":97,"user":"52bdf6bde4b07a9af579230d"},{"code":"(fn [row](let [func (fn [lst] \n                       (vec (concat '(1) (flatten (map (fn [x]\n                           (apply + x)) (partition 2 1 lst))) '(1))))] \n    (last (reduce \n     (fn [coll x]\n        (if (= x 0) \n          (conj coll [1])\n          (if (= x 1)\n            (conj coll [1 1])\n            (conj coll (func (last coll))))\n        ))\n     []\n     (take row (range))))))","problem":97,"user":"52fa4f48e4b047fd55836ff7"},{"problem":97,"code":"(fn tri [x]\n    (if (= x 1) [1]\n    (let [last-tri (tri (dec x))] (map + (concat [0] last-tri) (concat last-tri [0])))))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":97,"code":"(fn pascal [n]\n  ; return line n of Pascal's triangle\n  (loop [n1 n\n         row [1]] \n      (if (= n1 1)\n      row\n      (recur (dec n1) (conj (into [] (cons 1 (map + row (rest row)))) 1 )))))","user":"56f2611fe4b04a395b9a04a2"},{"problem":97,"code":"(fn [n]\n  (loop [times 1\n         triangle [1]]\n    (if (= n times)\n      triangle\n      (recur (inc times)\n             (reduce #(conj (pop %1)\n                            (+ (peek %1) %2)\n                            %2)\n                     [0]\n                     triangle)))))","user":"55952410e4b0c79f6e1db962"},{"problem":97,"code":"#(nth\n  (iterate\n    (fn [prev]\n      (concat\n        [1]\n        (for\n          [idx (range 0 (dec (count prev)))]\n          (+ (nth prev idx) (nth prev (inc idx))))\n        [1]))\n    [1])\n  (dec %))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn f [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","problem":97,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn [n]\n  (letfn [(next-row [row] (map #(apply + %)\n                               (partition 2 1 [0] (conj row 0))))]\n    (nth (iterate next-row '(1))  (dec n))))","problem":97,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [i]\n  (let [step (fn [x]\n              (vec (map + (cons 0 x) (conj x 0))))\n        path (fn path [x]\n              (lazy-seq\n               (cons x (path (step x)))))]\n    (nth (path [1]) (dec i))))","problem":97,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn triangle [row]\n\t   (reduce (fn [colls tgt ]\n\t\t       (flatten\n\t\t\t[1 (reduce \n\t\t\t    #(let [r (nthrest colls %2)]\n\t\t\t       (cons (+ (first r) (second r)) %1))\n\t\t\t    []\n\t\t\t    (range (dec (count colls)))) 1]))\n\t\t   [1] (range (dec row))))","problem":97,"user":"5016ac54e4b052339a490e7b"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(mapv +' (conj % 0) (cons 0 %)) [1])\n   (dec n)))","user":"4eb70649535d7eef30807373"},{"problem":97,"code":"(fn pascal [n] (if (<= n 2) (repeat n 1) (let [seq (pascal (dec n))]\n                                           (concat '(1)\n                                                   (map #(+ %1 %2) (drop 1 seq) (drop-last 1 seq))\n                                                   '(1)))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":97,"code":"(fn [n]\n  (loop [line (list) lev n]\n    (if (= 0 lev)\n\t  line\n\t  (recur (concat (map + line (conj line 0)) (list 1)) (dec lev))\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"code":"(fn [a] (if (= a 1) [1] ((fn pascal [n] (if (= n 2) [1 1] (concat [1] (map #(apply + %) \r\n(map #(take 2 (drop % (pascal (- n 1)))) (range (- n 2)))) [1] ))) a)))","problem":97,"user":"4e0e0529535d04ed9115e7b9"},{"problem":97,"code":"(fn f  [n]   (  if (= 1 n)   [1]     (let  [x (conj (f  (dec n) )  0)   y  (reverse x) ]  (  map + x y )    )             )        )","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":97,"code":"(fn [n]\n  (->> (range n)\n    (map (fn [k]\n           (/ (apply * (range (inc k) n))\n              (apply * (range 1 (- n k))))))))","user":"5a065388e4b01bb0ae8afdcb"},{"code":"(fn pasc [n]\n     (letfn [(comb1 [k]\n       (/ (apply * (range k n))\n          (apply * (range 1 (inc (- n k))))))]\n     (map comb1 (range 1 (inc n)))))","problem":97,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":97,"code":"(fn foo [i]\n  (case i\n    1 [1]\n    2 [1 1]\n    (concat [1]\n            (map (partial apply +) (partition 2 1 (foo (- i 1))))\n            [1])))","user":"50b65966e4b0a86f8358ca6c"},{"problem":97,"code":"(fn [x]\n    (reduce #(conj % (* (last %) %2))\n      [1]\n      (map #(/ (- (dec x) %) (+ % 1)) (range (dec x)))))","user":"50d0d2dde4b00b15ecee9768"},{"problem":97,"code":"(fn [n] (last (take n (iterate #(map + `(0 ~@%) `(~@% 0)) [1]))))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"(fn pas-tri\n   ([n]\n    (pas-tri n [1]))\n   ([n c]\n    (if (<= n (count c))\n      c\n      (pas-tri n (map + (concat [0] c) (concat c [0]))))))","problem":97,"user":"52046600e4b0c283853240c5"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [nums (- n 2)]\n      (loop [nums (range nums) result []]\n        (if (empty? nums) (let [result-with-ones-wrapped (into [1] (conj result 1))] result-with-ones-wrapped)\n            (let [num (first nums)\n                  prev-triangle (pascals-triangle (dec n))\n                  calculated-val (+ (get prev-triangle num) (get prev-triangle (inc num)))]\n              (recur (rest nums) (conj result calculated-val))))))))","user":"596aaeefe4b069c0a1a19808"},{"problem":97,"code":"(fn [row-i]\n  (loop [i 2 row [1]]\n    (if (> i row-i)\n      row\n      (recur\n       (inc i)\n       (vec\n        (for [j (range i)]\n          (+ (get row (dec j) 0) \n             (get row j 0))))))))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn [n]\n  (let [pas (fn [col] (let [z (vec (map #(apply + %) (partition 2 1 col)))] (cons 1 (conj z 1))))]\n    (nth (iterate pas [1]) (dec n))))","problem":97,"user":"50435689e4b034ff00315d21"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (loop [p0 [] p1 (concat [0] (pascal (dec n)) [0])]\n      (if (< (count p1) 2)\n        p0\n        (recur (cons (apply + (take 2 p1)) p0) (rest p1))))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":97,"code":"(fn pascal [n]  \n  (if (= 1 n) [1] \n\t(let [prev (pascal (dec n))] (into [] (map #(+ (get prev (dec %) 0) (get prev % 0)) (range n))))))","user":"53fe1c3be4b0de5c418485f2"},{"problem":97,"code":"(fn pascal\n  [n]\n  (letfn\n      [(tri [r c]\n         (cond\n           (= 1 c) 1\n           (= r c) 1\n           :else (+ (tri (dec r) (dec c)) (tri (dec r) c))))]\n    (for [i (range n)] (tri n (inc i)))))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":97,"code":"(fn [n] (nth (iterate #(map + (reverse (conj % 0)) (conj % 0)) [1]) (dec n)))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [row (pascal (dec n))]\n      (vec (map + \n                (conj row 0) \n                (cons 0 row))))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":97,"code":"(fn [n]\n  (let [step\n        (fn [prev i]\n          (if (= i n)\n            prev\n            (recur\n             (concat '(1) (map #(apply + %) (partition 2 1 prev)) '(1))\n             (inc i))))]\n    (step [1] 1)))","user":"571d063ee4b0145328a76272"},{"code":"(fn pascal-triangle [n]\n  (nth (iterate #(concat [1] (map + % (rest %)) [1])\n                [1])\n       (dec n)))","problem":97,"user":"50586354e4b06522596eba78"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (< n 1) []\n    (= n 1) [1]\n    :else\n    (let [prevr (pascal (dec n))]\n      (into [(first prevr)]\n            ((fn pas-sum [c]\n               (if-let [x (first c)]\n                 (if-let [y (second c)]\n                   (cons (+ x y) (pas-sum (rest c)))\n                   [x])\n                 []))\n             prevr)))))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":97,"code":";; taken from https://github.com/qiuxiafei/4clojure/blob/master/answers/97.Pascal's%20Triangle\n;;\n;; map is the key here - by creating two versions of the above row,\n;; with an offset of 0, we create two collections that we can map\n;; together using + to create the current row\n;;\n;; e.g. (map + [0 1 2 1] [1 2 1 0]) --> (1 3 3 1)\n\n(fn pascal-tri [n]\n  (if (= 1 n)\n    [1] ;; row 1\n    (let [above (pascal-tri (dec n)) ;; prior row\n          abovel (concat [0] above) ;; create our offset rows\n          abover (concat above [0])]\n(vec(map + abovel abover))))) ;; map and vec for the current row","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn [n] (nth \n         (iterate #(concat [1] (map (partial reduce +) (partition 2 1 %)) [1])\n                  [1])\n           (dec n)))","problem":97,"user":"519ef784e4b087743fad2198"},{"problem":97,"code":"(fn pscal [i]\n  (letfn [(next_row [r]\n            (loop [r r\n                   newr [1]]\n              (if (= (count r) 1)\n                (conj newr 1)\n                (recur (rest r) (conj newr (+ (first r) (first (rest r))))))))]\n    (if (= i 1)\n      [1]\n      (if (= i 2)\n        [1 1]\n        (loop [r [1 1]\n               i (- i 2)]\n          (if (= i 0)\n            r\n            (recur (next_row r) (dec i))))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":97,"code":"(fn [n]\n   (let [init [1]\n         r (range 1 n)]\n     (reduce (fn [acc x]\n               (concat [1] (map + (rest acc) (reverse (rest acc))) [1]))\n             init r)))","user":"530b8580e4b02e82168697cc"},{"code":"(fn [n] (nth (iterate #(map + `[0 ~@%] `[~@% 0]) [1]) (dec n)))","problem":97,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn pascal-row [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev-row (pascal-row (dec n))]\n           (map (fn [i]\n                  (if (or (= i 0) (= i (dec n)))\n                    1\n                    (+ (nth prev-row (dec i))\n                       (nth prev-row i))))\n                (range n)))))","problem":97,"user":"4db8d37d535d1e037afb219c"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate (fn next-row [row]\n                    (concat [1]\n                            (map #(apply + %) (partition 2 1 row))\n                            [1]))\n                  '(1))\n   (dec n)))","user":"574ef99ae4b02ea114799250"},{"code":"(fn pascal [n]\n  (loop [row [1],\n         iter (- n 1)]\n    (if (= n 1)\n      [1]\n      (if (= iter 0)\n        row\n        (recur\n         (concat (cons 1 (map #(apply + %) (partition 2 (interleave (rest row) (butlast row))))) [1])\n         (dec iter))))))","problem":97,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [n]\n  (loop [n n res [1]]\n    (if (= n 1) res\n      (let [x (cons 0 res)]\n        (recur (dec n)\n               (map + x (reverse x)))))))","problem":97,"user":"509160dae4b0742c82730aef"},{"problem":97,"code":"(fn [n]\n  (let [add-row\n        (fn [row]\n          (loop [[this that & more :as cur] row\n                 acc []]\n            (let [num (+ this that)]\n              (cond\n                (not more) (conj acc num)\n                :else (recur (rest cur) (conj acc num))))))\n        calc-next-row\n        (fn [row]\n          (let [row-nums (add-row row)]\n            (into [1] (conj row-nums 1))))]\n    (loop [acc [1]]\n      (let [i (count acc)]\n        (cond\n          (>= i n) acc\n          (= i 1) (recur [1 1])\n          :else (recur (calc-next-row acc)))))))","user":"54e79094e4b024c67c0cf818"},{"problem":97,"code":"(fn pasc [i]\n  (case i\n    1 [1]\n    2 [1 1]\n    (concat\n      [1]\n      (map (fn [[a b]] (+ a b)) (partition 2 1 (pasc (dec i))))\n      [1]\n      )))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":97,"code":"(fn p [n]\n    (if (= 1 n) [1]\n        (let [r (p (- n 1))]\n          (vec (map + (into [0] r)\n                    (conj r 0))))))","user":"52b2f9cae4b0c58976d9acfb"},{"code":"(fn pascal-nth-row [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :default\n    (loop [i 1\n           row [1]]\n      (if (= i n)\n        row\n        (recur (inc i)\n               (concat [1]\n                       (map (fn [[x y]] (+ x y))\n                            (partition 2 1 row))\n                       [1]))))))","problem":97,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [cn]\r\n    (let [nrow\r\n          (fn [r]\r\n            (cond \r\n              (= r []) [1]\r\n              (= r [1]) [1 1]\r\n              :else (loop [row r acc []]\r\n                      (if (empty? (rest row)) (concat [1] acc [1]) \r\n                        (recur (rest row) \r\n                               (conj acc \r\n                                     (+ (first row) \r\n                                        (first (rest row)))))))))]\r\n      (peek (reduce (fn [a _] \r\n                (conj a (nrow (peek a)))) [[1]] (range (dec cn))))))","problem":97,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [x] (let [fact #(reduce * (range 1 (inc %)))\n              pascal #(/ (fact %) (* (fact %2) (fact (- % %2))))\n              rowGen #(map (partial pascal (dec %)) (range 0 %))]\n          (if (coll? x) (map (comp vec rowGen) x) (rowGen x))))","problem":97,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":97,"code":"(fn pascal [n]\n  (if (<= n 2)\n    (repeat n 1)\n    (let [prev (pascal (- n 1))\n          prev-0 (concat [0] prev [0])\n          new-parts (partition 2 1 prev-0)]\n      (map #(apply + %) new-parts))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate\n                 (fn [cols]\n                   (concat [1] (map #(apply + %) (partition 2 1 cols)) [1]))\n                 [1]))))","user":"53fc88e7e4b0de5c418485be"},{"code":"[1\n[1]\n[1 1]\n[1 2 1]\n[1 3 3 1]\n[1 4 6 4 1]\n1\n1\n1\n1\n1\n[1 10 45 120 210 252 210 120 45 10 1]]","problem":97,"user":"4db016af838c48654951d9b9"},{"problem":97,"code":"#(nth (iterate (fn [r] (concat [1] (map + (rest r) (butlast r)) [1])) [1]) (dec %))","user":"56baa68ce4b0f26550335947"},{"problem":97,"code":"(fn [n] (nth (iterate #(map + (concat [0] %) (concat % [0])) [1]) (dec n)))","user":"56561119e4b0f9d632dd849d"},{"code":"(fn t [n]\n   (if (= n 1) [1]\n       (let [prior (t (dec n))]\n         (mapv + (cons 0  prior) (conj prior 0)))))","problem":97,"user":"4fbfe9a4e4b081705acca31f"},{"problem":97,"code":"(fn pascal [rowCount]\n  (cond (= rowCount 1) [1]\n        (= rowCount 2) [1 1]\n        :else (loop [currentRow 3 row [1 1]]\n                (if (> currentRow rowCount)\n                  row\n                  (recur (inc currentRow) (flatten [1 (map #(+ (first %) (last %)) (partition 2 1 row)) 1]))))))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn [n] (let [n (- n 1) choose (fn ch [n k] \n  (if (> (* 2 k) n) (ch n (- n k))\n      (/ (reduce * (range n (- n k) -1)) \n         (reduce * (range 1 (+ k 1))))))]\n   (map #(choose n %) (range (+ n 1)))))","problem":97,"user":"4efd98fa535de96065cf5086"},{"problem":97,"code":"(fn\n  [n]\n  (last\n    (take n\n          (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]))))","user":"59390a35e4b02506e01a29f3"},{"problem":97,"code":"(fn pascal-triangle\n   ([curr-level level list]\n      (println curr-level level)\n      (if (= curr-level level)\n        list\n        (pascal-triangle (inc curr-level) level (conj (vec (conj\n                                                             (map #(reduce + %) (partition 2 1 list))\n                                                             (last list)))\n                                                      (first list)))))\n   ([level] (pascal-triangle 1 level [1])))","user":"5b337ff4e4b025bcb146f339"},{"code":"#(loop [r [1] n %]\n   (if (= n 1) r\n     (recur (map + (concat [0] r) (concat r [0])) (dec n))))","problem":97,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":97,"code":"(fn\n  [row]\n  (if (= row 1)\n    [1]\n    (let [real-row (dec row)]\n      (reduce (fn \n                [xs [n k]]\n                (conj xs (* (last xs) (/ (- (inc n) k) k))))\n              [1]\n              (for [x (range 1 (inc real-row))] [real-row x])))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":97,"code":"(fn [n]\n  (loop [rows [[1]] i 1]\n    (let [last-row (last rows)]\n      (if (= i n)\n        last-row\n        (recur (if (< (count last-row) 2)\n                 (conj rows [1 1])\n                 (conj rows (loop [n last-row result [1]]\n                              (let [i (first n) j (second n)]\n                                (if (= nil j)\n                                  (conj result 1)\n                                  (recur (drop 1 n) (conj result (+ i j)))\n                              )))))\n               (inc i)\n               )))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"(fn pascal [n]\n  (if (= n 1)\n      [1]\n      (if (= n 2)\n          [1 1]\n          (let [l (pascal (- n 1))]\n               (flatten \n                 [ 1\n                   (map (fn [x y] (+ x y))\n                        l\n                        (rest l))\n                  1])))))","problem":97,"user":"4fb3fec7e4b081705acca2a7"},{"problem":97,"code":"(fn [row]\n  (letfn [(nCr [n r]\n            (/ (apply * (range (dec n) (- n r 1) -1)) (apply * (range 1 (+ r 1)))))]\n    (reduce #(conj %1 (nCr row %2)) [] (range 0 row))))","user":"5576f299e4b05c286339e077"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal-triangle [] (iterate (fn [coll] (->> coll (partition 2 1) (map (partial apply +))((fn [c] (lazy-cat [1] c [1]))))) [1]))]\n                           (nth (pascal-triangle) (dec n))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":97,"code":"(fn [n] \n   (loop [answer [[1] [1 1]] row [] remaining (last answer) ]\n     (if (>= (count answer) n)\n       (nth answer (- n 1))      \n\t     (if (= 1 (count remaining))\n\t       (recur (conj answer (concat [1] row [1])) [] (concat [1] row [1]) )\n\t       (recur answer (conj row (+ (first remaining) (second remaining) ) ) (drop 1 remaining) )   \n\t       )\n     )\n   )\n   )","user":"542baf7ce4b0dad94371f291"},{"problem":97,"code":"(fn [num1]\n  (if (= num1 1)\n    [1]\n    (loop [tmpn (- num1 2) ans [] vect [1 1]]\n      vect\n      (if (= tmpn 0)\n        vect\n      (if (second vect)\n        (recur tmpn (conj ans (+ (first  vect) (second vect))) (rest vect))\n        (recur (dec tmpn) [] (conj (reverse (conj (reverse ans) 1)) 1)))))))","user":"59369515e4b02506e01a297e"},{"problem":97,"code":"(fn[t]\n    (let [fac (fn[n](reduce *' (range 1 (inc n))))\n          pas (fn[n k] (/ (fac n) (*' (fac k) (fac (- n k)))))]\n      (map (fn[k] (pas (- t 1) k))  (range  t))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [n]\n  (loop [prev [1]\n         n n]\n    (if (= 1 n)\n      prev\n      (recur (map + (cons 0 prev) (concat prev '(0)))\n             (- n 1)))))","problem":97,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":97,"code":"(fn tri [n]\n  (if (= n 1)\n    [1]\n    (let [next-row (fn [row] (map + (cons 0 row) (conj row 0)))]\n      (vec (next-row (tri (dec n)))))))","user":"5317d78ee4b08068f379ed63"},{"problem":97,"code":"(fn [n]\n  (last\n   (take n\n         (iterate (fn [line] (concat '(1) (map (fn [[x y]] (+ x y)) (partition 2 1 line)) '(1))) '(1)))))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":97,"code":"(fn [rows]\n   (letfn [(gen-rows [r]\n                     (lazy-cat [r]\n                               (gen-rows (lazy-cat [1]\n                                                   (map + r (rest r))\n                                                   [1]))))]\n     (last (take rows (gen-rows [1])))))","user":"554bd33ce4b0a04f7929959a"},{"problem":97,"code":"#(nth\n    (iterate (fn [x] (mapv + `[0 ~@x] `[~@x 0])) [1])\n    (dec %))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn pascal [n]\n  (let [pascal-next \n          (fn [r] \n            (let [pairs (partition 2 1 r)\n                  sums (vec (map #(reduce + %) pairs))]\n              (conj (vec (cons 1 sums)) 1)))]\n\n  (if (= n 1) [1]\n              (pascal-next (pascal (dec n))))))","problem":97,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn pa [n]\n  (if (== n 1) [1]\n  (let [prev (pa (dec n))]\n    (concat (vector (first prev))\n            (map #(reduce + %) (partition 2 1 prev))\n            (vector (first prev))))))","problem":97,"user":"5078d366e4b08327cd804a5b"},{"problem":97,"code":"(fn pascal-tri [n]\n  (if (= n 1)\n    [1]\n    (let [a (interleave (pascal-tri (dec n)) (pascal-tri (dec n)))\n          b (drop-last (rest a))\n          c (partition 2 b)\n          d (map #(apply + %) c)]\n      (concat [1] d [1]))))","user":"5e12327ee4b099d064962fe5"},{"problem":97,"code":"(fn z [n] (if (= n 1) [1] (let [q (z (- n 1))] (concat [1] (map + q (rest q)) [1]))))","user":"523630eee4b05f3be1c7c8e8"},{"code":"(fn pascal [n]\n   (if (= n 1)\n     [1]\n     (let [prev (pascal (- n 1))\n           tmp (map #(reduce + %) (partition 2 1 prev))]\n       (cons 1 (concat tmp [1])))))","problem":97,"user":"516282c3e4b0e6d3c4734711"},{"problem":97,"code":"#(loop [start 0 end % res []]\n  (if (= start end)\n      res\n      (recur (inc start) end ((fn [prec] (if (= prec []) \n                     [1]\n                      (map +' (concat [0] prec) (concat prec [0])))) res))))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn f [X]\n     (cond\n      (<= X 1) [1]\n      :else (let [pred (f (dec X))\n                  s (map + pred (rest pred))]\n              (into [] (concat [1] s [1])))\n                 ))","problem":97,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn p[x] (loop [l [1] n 1] (if (< n x) (let [e (map + l (rest l))] (recur (concat '(1) e '(1)) (inc n))) l)))","problem":97,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [n]\n  (nth \n   (iterate (fn [x]\n               (map #(+ % %2)\n                (concat [0] x)\n                (concat x [0]))) [1])\n   (dec n)))","problem":97,"user":"51e38568e4b0c611d6113e43"},{"problem":97,"code":"(fn pascal\n  [n]\n  (let [next-pascal (fn [lst]\n                       (concat [1] (map (partial apply +) (partition 2 1 lst)) [1]))]\n    (last (take n (iterate next-pascal [1])))))","user":"59e8fef3e4b0249b72820743"},{"problem":97,"code":"(fn pascal-tri\n  ([n] (map #(pascal-tri n %) (range n)))\n  ([n i] (cond (or (= i (dec n)) (= i 0)) 1\n               (>= i n) 0\n               true (+ (pascal-tri (dec n) (dec i))\n                       (pascal-tri (dec n) i)))))","user":"52393e16e4b0d705d026ef06"},{"problem":97,"code":"(fn [n] (loop [i 1 p [1]] \n            (if (= n i) p\n                (recur (inc i) (concat [1] (map (partial apply +) (partition 2 1 p)) [1])))))","user":"52e851bfe4b09f7907dd149a"},{"code":"(fn pascal [n]\r\n    (last (take n ((fn gen-pascal [row]\r\n               (letfn [(gen-pascal-row [l]\r\n                         (conj\r\n                          (loop [s l f 0 d []]\r\n                            (if (empty? s)\r\n                              d\r\n                              (recur (rest s) (first s) (conj d (+ f (first s))))))\r\n                          (last l)))]\r\n                 (lazy-seq\r\n                  (cons row (gen-pascal (gen-pascal-row row)))))) [1]))))","problem":97,"user":"4f039524535dcb61093f6b2c"},{"code":"#(let [n (- % 1)] (for [i (range (+ n 1))] \r\n\r\n\r\n(letfn [ (fact [x]\r\n    (loop [n x f 1]\r\n        (if (= n 0)\r\n            f\r\n            (recur (dec n) (* f n)))))\r\n         (comb [n r] (/ (fact n) (* (fact r) (fact (- n r)))) ) ] (comb n i))\r\n\r\n))","problem":97,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [n] \n   (loop [x 1 y [1]]\n   (if (= x n) y\n     (recur (inc x) \n            (concat (first(reduce #(list (concat(first %1)[(+ %2 (last %1))]) %2) [[] 0] y)) \n                    [1])\n      )\n    )\n    )\n )","problem":97,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [previous-row (pascal (dec n))]\n      (apply vector (for [i (range n)]\n        (+ (get previous-row (dec i) 0)\n           (get previous-row i 0)))))))","user":"5dcc152ae4b02b31cc3da3c3"},{"code":"(fn[n]\n  (letfn[(n-k[n k]\n      (/ (reduce * (take k (iterate dec n)))\n         (reduce * (take k (iterate inc 1)))))]\n    (map n-k (repeat (dec n)) (range n))))","problem":97,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [prev (pascal (dec n))\n          mid-seq (map #(apply + %) (partition 2 1 prev))]\n      (cons 1 (conj (apply vector mid-seq) 1)))))","problem":97,"user":"52b405e1e4b0c58976d9ad15"},{"problem":97,"code":"(fn pt [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [prevRow (pt (dec n))]\n      (vec (map\n        #(condp = %\n           0 1\n           (dec n) 1\n           (+ (prevRow (dec %)) (prevRow %)))\n      (range n))))\n    )\n  )","user":"5ab5f60be4b073f177442643"},{"problem":97,"code":"(fn pasc [n]\n  (if (= 1 n) [1] (if (= 2 n) [1 1] (concat [1] (map (fn [[a b]] (+ a b)) (partition 2 1 (pasc (dec n)))) [1]))))","user":"552d9b31e4b076ab5578f7eb"},{"problem":97,"code":"(fn pascals-nth [n]\n  (if (= n 1) [1]\n    (let [prior (pascals-nth (dec n))]\n      (mapcat\n       (comp vector +)\n             (concat [0] prior)\n             (concat prior [0])))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":97,"code":"(fn [n] (loop [x 0\n\t\t\t\tacc [1]]\n\t\t\t\t(if (= x (dec n))\n\t\t\t\t acc\n\t\t\t\t(recur (inc x) (conj acc (* (nth acc x) (/(- (dec n) x) (inc x))))))))","user":"56d439d4e4b0ea9b8538f7b6"},{"problem":97,"code":"(fn f [x]\n    (case x\n      1 [1]\n      (concat \n        [1] \n        (map #(apply + %) (partition 2 1 (f (dec x)))) \n        [1]\n      )\n    )\n  )","user":"59021fede4b0438e51c2d04d"},{"code":"(fn pascal [n]\n  (if (= 1 n)\n    [1]\n    (let [prev-pascal (pascal (dec n))]\n      (apply vector (\n        (fn addseqs [a b]\n          (if (= 1 (count a))\n            [(+ (first a) (first b))]\n            (cons (+ (first a) (first b)) (addseqs (rest a) (rest b)))))\n        (cons 0 prev-pascal) (conj prev-pascal 0))))))","problem":97,"user":"4e8b98fc535d65386fec2124"},{"problem":97,"code":"(fn pasc [n]\n  (if (= n 1)\n    [1]\n    (let [pre (pasc (dec n))]\n      (let [ext (concat (cons 0 pre) [0])]\n        (println ext)\n        (loop [ret [] index 0]\n          (if (< index n)\n            (let [n (+ (nth ext index) (nth ext (inc index)))]\n             \n            (recur  (conj ret n )  (inc index)) )\n            ret  )\n          )))))","user":"579601c8e4b0e215f87e8492"},{"code":"(fn [n]\n        (letfn [(pascal []\n        \t(lazy-cat [[1]] \n                    (map #(vec (concat [1] (map + % (rest %)) [1])) \n                         (pascal))))]\n          (nth (pascal) (dec n))))","problem":97,"user":"513a4babe4b067e25a345eca"},{"problem":97,"code":"(fn [n]\n  (loop [count n\n         curr [1]]\n    (if (= count 1) curr\n        (let [\n              new-curr (map #(apply + %) (partition 2 1 curr))\n              aug (conj (into [1] new-curr) 1)] \n          (recur (dec count) aug))\n        )))","user":"5f419985e4b0955706451fab"},{"code":"(fn [n]\n  (nth (iterate (fn [row]\n    (apply vector (for [[x y] (partition 2 1 (concat [0] row [0]))] (+ x y)))) [1]) (dec n)))","problem":97,"user":"53219cece4b09d4e7a9b54b7"},{"problem":97,"code":"(fn [x] (last (take x (iterate\n                          (fn [x]\n                            (conj (into [1]\n                                        (map #(reduce + %) (partition 2 (drop-last (rest (flatten (map #(vector % %) x))))))\n                                        ) 1)\n                            )\n                          [1])\n                      )))","user":"55d42f78e4b0e31453f64a73"},{"code":"#(loop [x [1] n 1]\n  (if (= n %) x \n    (recur \n      (concat [1] (map (partial reduce +) (partition 2 1 x)) [1])\n      (inc n))))","problem":97,"user":"4f06dcad535dcb61093f6c16"},{"problem":97,"code":"(fn pascal [n] (if (== n 1) [1] (map + (concat '(0) (pascal (dec n))) (concat (pascal (dec n)) '(0)))))","user":"56912f93e4b0dcc4269f40ef"},{"problem":97,"code":"(fn f [row]\n  (if (= 1 row)\n    [1]\n    (let [prev-row (f (dec row))]\n      (concat\n        [1]\n        (map (fn [[n1 n2]] (+ n1 n2)) (partition 2 1 prev-row))\n        [1]))))","user":"53a83c74e4b047364c044426"},{"problem":97,"code":"(fn p [n]\n  (if\n    (< n 2) [1]\n    (let [last-row (p (dec n))]\n      (mapv #(+ (get last-row (dec %) 0) (get last-row % 0)) (range n)))))","user":"5e3d183fe4b01d43a70e8e11"},{"code":"(fn pascals\r\n  [n]\r\n  (loop [i n\r\n         v [1]]\r\n    (if (= i 1)\r\n      v\r\n      (recur (dec i) ((fn pas\r\n                        [vn t]\r\n                        (if (= (count vn) 1)\r\n                          (conj t 1)\r\n                          (pas (rest vn) (conj t (+ (first vn) (second vn)))))) v [1])))))","problem":97,"user":"4f17ab99535d64f603146457"},{"code":"(fn [n]\n  (let [row [1 (dec n)]]\n    (take n\n      (reduce #(conj %\n        (/ (* (peek %) %2)\n           (- n %2))) row (range (- n 2) 0 -1)))))","problem":97,"user":"515a6151e4b0394f658fe241"},{"problem":97,"code":"(fn pascal\n  [n]\n  (cond\n   (= n 1) (vector 1)\n   (= n 2) (vector 1 1)\n   :else (into [] (cons 1 (reverse (cons 1(for [x (partition 2 1 (pascal (- n 1))) ] (reduce + x))))))\n  )\n)","user":"5676af21e4b05957ce8c6158"},{"problem":97,"code":"#(loop [i 1 row '(1)]\n   (if (< i %)\n     (recur (inc i) (cons (* (first row) (/ (- % i) i)) row))\n     row))","user":"583e27e2e4b089d5ab817daa"},{"code":"(let [fact #(reduce * 1 (range 1 (inc %)))]\n  (fn [n]\n    (let [n (dec n)]\n      (map #(/ (fact n) (* (fact %) (fact (- n %)))) (range (inc n))))))","problem":97,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [nums]\n        (vec\n          (map + (conj nums 0)\n                 (cons 0 nums))))\n    [1])\n  (dec n)))","problem":97,"user":"5041b3c0e4b06d8231e4facf"},{"code":"(fn [i] (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec i)))","problem":97,"user":"50f10f7be4b06d9538fe211a"},{"code":"(fn [n] (letfn [(nextrow [xs] \r\n            (concat (cons 1 \r\n                        (map #(+ %1 %2)\r\n\t\t\t\t                (drop 1 xs) \r\n\t\t\t\t                (take (- (count xs) 1) xs))) [1]))]\r\n    (nth (iterate nextrow [1]) (- n 1))))","problem":97,"user":"4ee75ec2535d93acb0a66867"},{"problem":97,"code":"(fn foo [n] (last (take n (iterate #(map +' (concat [0] %) (concat % [0])) [1]))))","user":"5f3567d6e4b0574c87022c44"},{"problem":97,"code":"(fn [n]\n  (let [factorial (fn [n] (reduce * (range 1 (inc n))))\n        coef (fn [n r] (/ (factorial n) (* (factorial r) (factorial (- n r)))))]\n    (map #(coef (dec n) %) (range n))))","user":"54a96a15e4b09f271ff37cad"},{"problem":97,"code":"(fn pascal \n  [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal (dec n))\n          a (concat [0] last)\n          b (concat last [0])\n          ]\n      (vec(map + a b)))))","user":"5a9f005be4b0d174b936c810"},{"problem":97,"code":"(fn p-triangle\n      ([x] (p-triangle x [1]))\n      ([x coll]\n       (if (= x (count coll))\n         coll\n         (p-triangle x (conj (into [] (conj (map + (drop-last coll) (drop 1 coll)) 1 )) 1)))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":97,"code":"(fn [n] \n    (let [t\n          (memoize (fn [n f]\n                     (if (= 1 n)\n                       [1] \n                       (loop [r 0 v [1]]\n                         (if (>= r (- n 2)) \n                           (conj v 1)\n                           (recur (+ r 1) (conj v (+ (get (f (- n 1) f) (+ r 1)) (get (f (- n 1) f) r))))\n                           )   \n                         )   \n                       )   \n                     )   \n                   )   \n          ]   \n      (t n t)\n      )   \n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":97,"code":"(fn pt\n  ([x] (pt x [1]))\n  ([x r]\n   (if (= x 1)\n      r\n      (recur (dec x)\n        (map #(apply + %)\n                  (partition 2 1 (concat [0] r [0])))))))","user":"54026d7de4b0df28a13c62cf"},{"problem":97,"code":"(fn [n] (loop [op [] k (range 0 n)]\n               (if (empty? k)\n                   op\n                   (recur (conj op\n                            ((fn [x y] (/ (reduce * (range 1 x)) (* (reduce * (range 1 (inc y))) (reduce * (range 1  (- x y)))))) n (first k))) (next k)))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn [rows]\n  (loop [r (dec rows), d 1, acc [1]]\n    (if (zero? r)\n      \tacc\n        (recur (dec r) (inc d) (conj acc (* (last acc) (/ r d)))))))","problem":97,"user":"4e0febe6535d04ed9115e7be"},{"code":"#(nth \n (iterate \n  (fn [xs] (concat [1] (map + (rest xs) xs) [1]))\n  [1])\n (dec %))","problem":97,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn pascal [n]\n  (letfn [(F [n k]\n            (cond\n             (zero? k) 1\n             (zero? n) 0\n             (< n k) 0\n             :else (+ (F (dec n) (dec k))\n                      (F (dec n) k))))]\n    (map (partial (memoize F)\n                  (dec n))\n         (range n))))","problem":97,"user":"530578ede4b0d8b024fd3760"},{"problem":97,"code":"(fn [n]\n  (loop [n n\n         c [1]\n         f (concat [0] c)\n         b (concat c [0])]\n    ;(println c f b)\n    (if (= n 1)\n      c\n      (recur (dec n) (vec (map + f b)) (concat [0] (vec (map + f b))) (concat (vec (map + f b)) [0])))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [r]\n  (let [f #(if (zero? %1) %2 (recur (- %1 1) (* %1 %2)))\n        c #(if (zero? %2) 1 (quot (f %1 1) (* (f %2 1) (f (-%1 %2) 1))))]\n   (map #(c (dec r) %) (range r))))","problem":97,"user":"504e04a4e4b078edc5f59397"},{"problem":97,"code":"(fn [n]\n  (let [fact (fn [x] (reduce * (range 1 (inc x))))\n        n (dec n)]\n    (vec (map #(quot (fact n) (* (fact %) (fact (- n %)))) (range (inc n))))))","user":"59874ff6e4b021a7a535fea1"},{"problem":97,"code":"(fn [n]\n  (loop [n n\n         lr [1]]\n    (if (= n 1)\n        lr\n        (let [summed (map (partial apply +) (partition 2 1 lr))]\n          (recur (dec n) (concat [1] summed [1]))))))","user":"5880e38fe4b0f1effa3b7625"},{"problem":97,"code":"(fn [x] \n   (let [triangle '([0]\n                    [1] \n                    [1 1]\n                    [1 2 1]\n                    [1 3 3 1]\n                    [1 4 6 4 1]\n                    [1 5 10 10 5 1]\n                    [1 6 15 20 15 6 1]\n                    [1 7 21 35 35 21 7 1]\n                    [1 8 28 56 70 56 28 8 1]\n                    [1 9 36 84 126 126 84 36 9 1]\n                    [1 10 45 120 210 252 210 120 45 10 1])]\n          (nth triangle x)))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":97,"code":"(fn gen-tri [num]\n  (if (= num 1)\n    [1]\n    (let [prev (gen-tri (- num 1))]\n      (loop [ret []\n             cur 0]\n        (cond\n          (= 0 cur) (recur [1] 1)\n          (= (- num 1) cur) (conj ret 1)\n          :else (recur (conj ret (+ (nth prev cur) (nth prev (- cur 1)))) (inc cur)))))))","user":"59cf9ac0e4b0ef0a1e9b5b6f"},{"problem":97,"code":"(fn [n]\n  (letfn [(n-choose-k [n k]\n            (reduce * 1 (map #(/ (- n %) (inc %)) (range k))))]\n    (map #(n-choose-k (dec n) %) (range n))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":97,"code":"#(loop [[fst & rst] (map / (reverse (range 1 %)) (range 1 %))\n         result [1]]\n    (if fst\n      (let [res (conj result (int (* (last result) fst)))]\n        (if rst\n          (recur rst res)\n          res))\n      result))","user":"587ee260e4b052da650a6353"},{"problem":97,"code":"(fn pt [n]\n  (cond \n   (= n 1) [1]\n   :else (let [prev-pt (pt (dec n))]\n           (mapv + (cons 0 prev-pt) (conj prev-pt 0)))))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"(fn [n] (last (take n (iterate (fn [i] (vec (map + (cons 0 i) (conj i 0)))) [1]))))","problem":97,"user":"52774dd2e4b03e8d9a4a74ff"},{"code":"(fn nthpascal [i] (nth ((fn mypascal [i] (lazy-seq (cons i (mypascal (if (< 1 (count i))(vec (flatten (list (first i) (map #(reduce + %) (partition 2 1 i)) (last i)))) (vec (concat i i))))))) [1]) (dec i)))","problem":97,"user":"4f0e4ebd535d0136e6c22322"},{"problem":97,"code":"(fn [n]\n  (letfn [(next [prev]\n            (if (= prev 1) [1]\n                (flatten [1\n                  (map (fn [x]\n                         (+ (nth prev x)\n                            (nth prev (dec x))))\n                       (range 1 (count prev))) 1])))]\n  (reduce\n   (fn [acc x] (next acc))\n   1\n   (range n))))","user":"5d672bd7e4b0db5d338d15f1"},{"code":"(fn [n] (nth\n (iterate \n   (fn [x]\n      (let [x (flatten [0 x 0])]\n         (map #(+ %1 (or %2 0)) \n           x (drop 1 x))\n       )) [1] ) (dec n)))","problem":97,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn pascal [n]\n  (nth \n    (iterate\n      (fn [prev]\n        (concat [1] (map (partial apply +) (partition 2 1 prev)) [1])) [1] ) (- n 1)))","problem":97,"user":"532c9dc9e4b019098a6f8b30"},{"problem":97,"code":"(fn pt [n]\n  (case n\n    1 [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pt (dec n)))) [1])))","user":"50ec409ce4b04edc33777045"},{"code":"(fn [n] (nth (iterate (fn [row] (vec (map + (cons 0 row) (conj row 0)))) [1]) (dec n)))","problem":97,"user":"5244fa73e4b0d8acf9ed6acb"},{"problem":97,"code":"(fn [n]\n  (let [sum-adjacent (fn [coll] (map #(apply + %) (partition 2 1 coll)))\n        sum-and-pad  (fn [coll] (flatten [1 (sum-adjacent coll) 1]))]\n    (nth (iterate sum-and-pad [1]) (dec n))))","user":"53e76363e4b036ad0777e47b"},{"problem":97,"code":"(fn pascal\n  [input]\n  (if (number? input)\n    (case input\n      0 []\n      1 [1]\n      (let [previous (pascal (dec input))]\n        (vec (concat [1] (map #(+ (nth previous %) (nth previous (inc %))) (range (- input 2))) [1]))))\n    (vec (map pascal input))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [prev (pascal (dec n))]\n        (concat\n          '(1)\n          (map (fn [[a b]] (+ a b)) (partition 2 1 prev))\n          '(1))))))","problem":97,"user":"50435852e4b034ff00315d22"},{"code":"(fn pascal [x]\n  (if (= x 1)\n    [1]\n    (let [prev (pascal (- x 1))]\n      (vec (map + (conj prev 0) (cons 0 prev))))))","problem":97,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":97,"code":"(fn pascal [n1]\n  (let [n (dec n1)\n        binomial-coefficient\n        (fn [n k]\n          (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n            (/ (rprod (- n k -1) n) (rprod 1 k))))]\n    (map (partial binomial-coefficient n) (range (inc n)))))","user":"55e6c3f5e4b050e68259b48c"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (map + (concat (pascal-triangle (dec n)) [0]) (concat [0] (pascal-triangle (dec n))))))","user":"5e0d948fe4b099d064962f98"},{"problem":97,"code":"(fn [n]\n  (loop [n n \n         res [1]]\n   (if (= n 1) res\n    (recur (dec n) (map + (concat [0] res) (concat res [0]))))))","user":"5c7d5463e4b0d597f478caa9"},{"code":"(fn [n]\n  (last (take n (iterate\n    (fn [prev] \n      (concat \n        '(1) \n        (map \n         #(apply + %)\n          (partition 2\n           (interleave (butlast prev) (rest prev))))\n        '(1))) '(1) ))))","problem":97,"user":"4f039bbe535dcb61093f6b39"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (concat '(1) (map #(reduce + %) (partition 2 1 (pascal (- n 1)))) '(1))\n  ) \n)","problem":97,"user":"514cfa27e4b019235f6c057d"},{"problem":97,"code":"(fn [n]\n  (->> (map /\n            (range (- n 1) 0 -1)\n            (range 1 n))\n       (reduce #(conj %1 (* (last %1) %2))\n               [1])\n       (map int)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":97,"code":"(fn [n]\n    (letfn [(next-row [r]\n              (condp = r\n                []  [1]\n                [1] [1 1]\n                (vec (concat [1] (map #(apply + %) (partition 2 1 r)) [1]))))]\n      (nth (iterate next-row []) n)))","user":"59fa241ee4b0ca45a743a358"},{"problem":97,"code":"(fn [n]\n  (loop [i 1, acc [1]]\n    (if (= i n)\n      acc\n      (recur (inc i)\n             (mapv + (cons 0 acc) (conj acc 0))))))","user":"5d28d935e4b092dab7f59c88"},{"problem":97,"code":"(fn pascal-triangle-row [n]\n  (letfn [(step [xs]\n            (-> (into [(first xs)] (map #(reduce +' %1N) (partition 2 1 xs)))\n                (conj (last xs))))]\n    (last (take n (iterate step [1])))))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn [n]\r\n  (nth\r\n    (iterate\r\n      (fn [c]\r\n        (map\r\n          (partial apply +)\r\n          (partition 2 (rest (butlast (mapcat #(repeat 2 %) (cons 0 (conj (vec c) 0))))))))\r\n      [1])\r\n    (dec n)))","problem":97,"user":"4facff22e4b081705acca230"},{"problem":97,"code":"#(let [f (fn [nseq]\n           (cond\n             (= (count nseq) 0) [1]\n             (= (count nseq) 1) [1 1]\n             :else (flatten [1 (map + (rest nseq) (butlast nseq)) 1])))]\n   (loop [track 0\n          nums []]\n     (if (= track %1)\n       nums\n       (recur (inc track) (f nums)))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":97,"code":"(fn f [x]\n    (if (= x 1)\n      [1]\n      (let [a (f (dec x))]\n        (map +\n             (concat a [0])\n             (concat [0] a)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"#(map (fn pa [c]\n    (if (= c 0)\n        1\n        (* (pa (dec c)) (/ (- % c) c)))) (range %))","problem":97,"user":"4ff76effe4b0678c553fc390"},{"problem":97,"code":"(fn [n] (loop [k 0\n                s 1\n                result []]\n              (if (= k (dec n))\n                  (conj result 1)\n                  (recur (inc k) (* (/ (- n (inc k)) (inc k)) s) (conj result s)))))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":97,"code":"(fn pascal-triangle [row]\n  (letfn [(bin-coef [n k] (/ (fac n) (* (fac k) (fac (- n k)))))\n          (fac [n] (reduce * (range 1N (inc n))))]\n    (let [row-idx (dec row), cols (dec row)]\n      (->> (range 0 cols)\n           (map #(bin-coef row-idx %))\n           (reverse)\n           (#(conj % 1N))))))","user":"5eac172fe4b00a66d4a951dd"},{"code":"(fn pascal-triangle [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (concat [1] (map #(apply + %) (partition 2 1 (pascal-triangle (- n 1)))) [1])))","problem":97,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [v] (map (partial apply +) (partition 2 1 (concat [0] v [0]))))\n      '(1))\n  (dec n)))","problem":97,"user":"525431dfe4b0541d1855b970"},{"problem":97,"code":"#(loop [s [1]]\n   (if (= % (count s)) s\n     (recur (loop [o [] \n                   t (concat [0] s [0])]\n              (if (= 1 (count t)) o\n                (recur (conj o (+ (nth t 0) (nth t 1)))\n                       (next t)))))))","user":"539f4e9ee4b0ca733b974498"},{"problem":97,"code":"(fn [x]\n              (reduce (fn [a b]\n                        (conj a (/ (* (nth a b) (- (dec x) b))\n                                   (inc b))))\n                      [1]\n                      (range (dec x))))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [x]\n  (loop [n 1 val [1]]\n    (if (= n x)\n      (vec val)\n      (recur\n        (inc n) (flatten (merge [1] (map (partial reduce +) (partition 2 1 val)) [1]))))))","problem":97,"user":"4f849f76e4b033992c121c36"},{"code":"(fn pascal [n] (nth (iterate (fn [col] (conj (map (partial apply +) (partition 2 1 (repeat 0) col)) 1)) []) n))","problem":97,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":97,"code":"(fn p[x]\n  (if(= x 1)[1]\n    (let [v (vec(p(dec x)))] (map +(cons 0 v)(conj v 0)))))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"#(let \n  [pasval (fn pasval [x y] \n            (if (some zero? [x y])\n              1 (+ (pasval (dec x) y) (pasval x (dec y)))))\n   base (fn base [l] \n          (loop [x 0 y l r ()] \n            (if (< y 0) \n              r (recur (inc x) (dec y) (conj r (pasval x y))))))]\n    (vec (base (dec %))))","problem":97,"user":"4ef355e3535dced4c769f228"},{"problem":97,"code":"#(loop [nr 1 result '(1)] (if (= nr %) result (recur (inc nr) (map + (conj result 0) (concat result [0])))))","user":"5776385fe4b0979f89651632"},{"code":"(fn p [n]\n  (if (= 1 n) \n    [1]\n    (concat [1]\n      (map \n        + \n        (p (- n 1))\n        (rest (p (- n 1))))\n      [1])))","problem":97,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":97,"code":"(fn[x]\n    (let [row (- x 1)]\n      (map (fn[col] \n           (/ \n             (#(reduce * (range 1 (+ % 1))) row) \n             (* \n               (#(reduce * (range 1 (+ % 1))) col) \n               (#(reduce * (range 1 (+ % 1))) (- row col)))))\n         (range (+ 1 row)))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":97,"code":"(fn pTri [n]                                                                                                                                                                              \n  (cond                                                                                                                                                                                     \n    (= 1 n) [1]                                                                                                                                                                             \n    (= 2 n) [1 1]                                                                                                                                                                           \n    :else                                                                                                                                                                                   \n    (loop [index 2 row [1 1]]                                                                                                                                                               \n      (if                                                                                                                                                                                   \n          (= n index) row                                                                                                                                                                   \n          (recur (inc index) (lazy-cat [1]                                                                                                                                                  \n                                       (#(for [tuple %] (+ (first tuple) (second tuple)))                                                                                                   \n                                        (partition 2 1 row))                                                                                                                                \n                                       [1]))))))","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn [n]\n    (loop [n n\n           row [1]]\n      (cond (= n 1) row\n            :else (recur (dec n)\n                         (into [] (concat [1]\n                                          (map #(apply + %) (partition 2 1 row))\n                                          [1]))))))","problem":97,"user":"4e89e939535d3e98b8023287"},{"code":"(fn pascal-row\n  [rowNum]\n  (letfn [(pairwise-sum [elmts]\n            (cons (+ (first elmts) (second elmts))\n                  (if (nnext elmts) (pairwise-sum (next elmts)) [])))]\n   (if (= 1 rowNum)\n    [1]\n    (pairwise-sum (concat [0] (pascal-row (dec rowNum)) [0])))))","problem":97,"user":"4fbacdbae4b081705acca2e5"},{"problem":97,"code":"#(nth (iterate \n        (fn f [xs]\n                (concat [1] \n                        (for [i (range (dec (count xs)))]\n                                (+ (nth xs i) (nth xs (inc i)))) \n                        [1]))\n        [1]) \n (dec %))","user":"5ea2e6bfe4b00a66d4a95197"},{"problem":97,"code":"(fn pascal-triangle-row [n]\n  (if (= n 1)\n    [1]\n    (let [prev-row (pascal-triangle-row (dec n))]\n      (conj\n        (into [1]\n              (for [i (range 1 (dec n))]\n                (+ (get prev-row (dec i))\n                   (get prev-row i))))\n        1))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn p [n]\n  (if (= n 1) [1]\n    (conj (vec (cons 1\n                     (for [x (partition 2 1 (p (dec n)))] (apply + x)))) 1)))","problem":97,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":97,"code":"(fn pascal [n]\n  (loop [acc [1]\n         left n]\n    (if (= left 1)\n      acc\n      (let [acc-with-pad (concat [0] acc [0])]\n        (recur\n          (vec\n            (map\n              (partial reduce +)\n              (mapv vector acc-with-pad (rest acc-with-pad))))\n          (dec left))))))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn pasc [n]\n  (if (= 1 n)\n  [1]\n  (map + (cons 0 (pasc (- n 1))) (concat (pasc (- n 1)) [0]))\n  \n  )\n  )","problem":97,"user":"516eb196e4b06aac486e5b2e"},{"problem":97,"code":"(fn pascals-triangle [row]\n    (let [n-choose-k \n          (fn n-choose-k [n k]\n            \"Multiplicative formula for n-choose-k (binomial coeff)\"\n            (int (reduce * (map #(->\n                    (+ n 1)\n                    (- %)\n                    (/ %)\n                    )(range 1 (inc k)))))\n            )]\n      (map #(n-choose-k (dec row) %) (range row))\n      )\n    )","user":"569951e4e4b0542e1f8d143e"},{"code":"(fn [n]\n  (loop [a n acc (list 1)]\n    (if (= 1 a) acc\n      (recur (dec a) (concat (map + (cons 0 acc) acc) '(1))))))","problem":97,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":97,"code":"(fn tri [n]\n  (loop [x 1 res [1]]\n    (if (= x n) res\n      (recur (inc x) (vec (butlast (reduce #(concat (butlast %1) (list (+ (last %1) %2) %2)) '(0) (conj res 0))))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":97,"code":"(fn [x]\n  (let [lst (range 1 (inc x))\n        paskal (fn [l]\n                 (loop [x l result []]\n                   (if (empty? x)\n                     (cons 1 result)\n                     (if (= (count x) 1)\n                       (recur (rest x) (conj result (first x)))\n                       (recur (rest x) (conj result (+ (first x) (second x))))))))]\n    (loop [a lst result []]\n      (if (empty? a)\n        (vec result)\n        (recur (rest a) (paskal result))))))","user":"58e90258e4b056aecfd47cfd"},{"problem":97,"code":"(fn row-func [row]\n       (case row\n         0 []\n         1 [1]\n         (let [prev (row-func (dec row))]\n           (concat (map + (into [0] prev) prev) [1]))))","user":"5e99cbd4e4b0157ca96647e6"},{"code":"(fn f [n]\n  (last (take n (iterate \n    (fn [x]\n      (apply vector (conj (map + x (conj (apply vector (rest x)) 0)) (first x)))\n    )\n    [1]\n  )))\n)","problem":97,"user":"50f4894be4b004d364930528"},{"problem":97,"code":"(fn foo [n]\n  (if (= n 1) \n    [1]\n    ((fn [coll1 coll2]\n      (into []\n      (concat\n      [1]\n      (map +\n        (subvec coll1 0 (dec (count coll1)))\n        (subvec coll2 1 (count coll2)))\n      [1]\n      ))) \n      (foo (- n 1)) \n      (foo (- n 1)))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [n] (nth (iterate #(mapv + (into [0] %) (conj % 0)) [1]) (dec n)))","problem":97,"user":"536973e5e4b0243289761e9e"},{"problem":97,"code":"(fn [n]\n  (letfn [(bang [n] (apply * (range 1 (inc n))))\n          (p [n k] (/ (bang n) (* (bang (- n k)) (bang k))))]\n    (for [r (range n)] (p (dec n) r))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn ps [n]\n  (if (= n 1)\n    [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (ps (- n 1)) [0])))))","problem":97,"user":"4ec07699535dfed6da9c6da2"},{"problem":97,"code":"(fn [n]\n    (loop [row '(1)\n           level 1]\n      (if (= level n)\n        row\n        (recur\n          (concat\n            (cons 1 (for [i (range 0 (dec level))] ;reversed order range keeps standard step 1, which results in an empty range\n                      (+ (nth row i) (nth row (inc i))))) ;<< nth fails on wrong index\n            '(1))\n          (inc level)))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":97,"code":"(fn [n] (loop [i n col [1]] (if (= i 1) col (recur (dec i) (#(loop [[h1 h2 & t1 :as t] % result [1]] (if (nil? h2) (conj result 1) (recur (rest t) (conj result (+ h1 h2))))) col)))))","user":"576df252e4b0979f8965156f"},{"code":"#(loop [a []\n               k (range %)]\n          (if  (empty? k)\n            a\n            (recur (conj a (/ (reduce * (take (first k) (reverse (range %))))\n                                (reduce * (range 1 (inc (first k))))))\n                   (rest k))))","problem":97,"user":"52d838bee4b09f7907dd138b"},{"problem":97,"code":"(fn [i]\n  (nth\n    (iterate\n      #(flatten [1 (map (partial apply +) (partition 2 1 %)) 1])\n      [1])\n  (dec i)))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn n-th-row-pascal\n  [n & res]\n  (let [m (count res)\n        nfact (reduce * (range 1 n))\n        ifact (if (zero? m) 1 (reduce * (range 1 (inc m))))\n        n-ifact (reduce * (range 1 (- n m)))\n        nci (/ nfact (* ifact n-ifact))]\n    (if (= n (count res))\n      res\n      (recur n (cons nci res)))))","problem":97,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn [n]\n  (loop [n' 1 r [1]]\n    (if\n      (= n n')\n      r\n      (recur\n       (inc n')\n       (concat [1] (map + r (rest r)) [1])))))","problem":97,"user":"5201ada5e4b0b2e020a18f14"},{"problem":97,"code":"(fn pascal [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (concat [1] \n                      (map #(apply + %) (partition 2 1 (pascal (dec n)))) \n                      [1])))","user":"5745bb9fe4b009280f9f2b54"},{"problem":97,"code":"(fn test [n]\n  (if (= n 1)\n    [1]\n    (map + (concat [0] (test (dec n)))\n           (concat (test (dec n)) [0]))))","user":"579332c2e4b0e215f87e8452"},{"problem":97,"code":"(fn [n]\n  (let [make-row\n          (fn [sq]\n          (concat (conj (map (partial apply +) sq) 1) '(1)))]\n    (loop [coll [1]\n        k 1]\n      (if (= k n)\n        coll\n        (recur (into [] (make-row (partition 2 1 coll)))\n              (inc k))))))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":97,"code":"(fn [l]\n\t(letfn [(hh [l]\n\t\t\t(conj\n\t\t\t(vec (conj (map (fn [x y]\n\t\t\t\t\t\t(+ x y))\n\t\t\t\t\t\t(into [] l) (rest (into [] l))) 1)) 1)\n\t\t\t)]\n\n\t\t(last (take l (iterate hh [1])))\n\n\t\t)\n\t)","user":"5886e8bde4b0f1effa3b76ea"},{"problem":97,"code":"(fn f\n   ([x] (f [1] [(dec x) 1]))\n   ([v fraction] (if (zero? (first fraction))\n                   v\n                   (f (conj v (int (*\n                               (last v)\n                               (/ (first fraction) (last fraction)))))\n                      [(dec (first fraction)) (inc (last fraction))]))))","user":"4ec66e84535d6d7199dd36cd"},{"problem":97,"code":"(fn [n]\n   (last (take n (iterate #(mapv  + (into [0] %)\n                                    (into % [0]))\n                          [1]))))","user":"59076082e4b047aa04b19956"},{"code":"(fn pascal-tri-row [row]\n  (letfn [(factorial [n]\n            (if (zero? n) 1\n                (reduce * (range 1 (inc n)))))\n          (binomial [n k]\n            (/ (factorial n) (* (factorial k) (factorial (- n k)))))]\n    (map (partial binomial (dec row)) (range row))))","problem":97,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (let [prev-pas  (pascal-triangle (dec n))]\n      (map + (concat [0] prev-pas)\n             (concat prev-pas [0])))))","problem":97,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(fact [a] (reduce * (range 1 (inc a))))\n          (combination [x y] (/ (fact x) (fact y) (fact (- x y))))]\n    (for [x (range n)]\n      (combination (dec n) x))))","user":"5292feb4e4b0239c8a67af39"},{"problem":97,"code":"(fn [i]\n    (loop [ n (- i 1)  \n            v 1\n            k 1\n            a [] ]\n      (cond (= k i) (conj a 1)\n            :else \t(recur n\n                           (* v (/ (- (+ n 1) k) k)) \n                           (+ k 1)\n                           (conj a v)))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn[x]\n  (letfn [\n      (f [n] (if (= n 0) 1 (apply * (range 1 (inc n))))) \n      (c [n r] (/ (f n) (* (f r)(f (- n r)))))\n    ]\n  (conj (vec (for [r (range 0  (dec x))] (c (dec x) r))) 1)\n  )\n)","problem":97,"user":"4e6df3c9535d5021c1a895fa"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) [1]) (dec n)))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":97,"code":"(fn [n]\n    (cond\n      (= n 1) [1]\n      :else (loop [i n\n                   acc [1]]\n              (cond\n                (= i 1) acc\n                (> i 1) (recur (dec i) (into [] (concat [1] (map #(+ (first %) (last %)) (partition 2 1 acc)) [1])))))))","user":"4ff3113ae4b0678c553fc345"},{"problem":97,"code":"(fn [n]\n  (loop [row '(1)\n         pos 1]\n    (if (= pos n)\n      row\n      (let [new-row\n            (loop [nxt ()\n                   [fs & rst] row]\n              (if (empty? rst)\n                (cons fs nxt)\n                (recur (cons (+ fs (first rst))\n                             nxt)\n                       rst)))]\n        (recur (cons 1 (reverse new-row)) (inc pos))))))","user":"59750a68e4b01722bebd4cba"},{"code":"(fn p [x]\n  (if (= x 1)\n    [1]\n    `[1 ~@(map + (p (- x 1)) (next (p (- x 1)))) 1]))","problem":97,"user":"4e03c616535d04ed9115e796"},{"code":"(fn [n]\r\n  (nth \r\n    (iterate\r\n      #(map + (conj % 0) (reverse (conj % 0)))\r\n      [1])\r\n    (dec n)))","problem":97,"user":"504e14c2e4b078edc5f593bf"},{"problem":97,"code":"(fn p-nth2 [n]\n  (loop [i 1 pa [1]]\n    (if (= i n) pa\n     (recur (inc i) ((fn p [arr]\n  (loop [x arr r [] l -1]\n    (cond\n      (= l -1)\n        (recur (next x) (conj r (first x)) (first x))\n      (empty? x) (conj r l)\n      :else (recur (next x) (conj r (+ l (first x))) (first x)))))\n                     \n                     \n                     \n                     \n                     \n                     \n                     pa)))))","user":"5e42b688e4b01d43a70e8e6b"},{"code":"(fn pt [n] (if (= n 1) [1] (let [prev (pt (dec n))] (concat [1] (map + (drop-last prev) (rest prev)) [1]))))","problem":97,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn [n]\n  (nth (iterate #(map + `[0 ~@%] `[~@% 0]) [1]) (dec n)))","problem":97,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn f [n]\r\n  (if (= n 1) [1]\r\n      (let [p (f (- n 1))\r\n            r (map + p (rest p))]\r\n        (concat [1] r [1]))))","problem":97,"user":"4dada16fc9a9d6ed2699dc57"},{"problem":97,"code":"(fn pasc [num] \n  (case num\n    1 [1]\n    2 [1 1]\n    (let [coll (pasc (dec num))]\n      (concat [1] (map + coll (rest coll)) [1]))))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    #(vec (map + (conj % 0) (cons 0 %)))\n    [1])\n   (dec n)))","user":"56ca0da9e4b0ea9b8538f715"},{"problem":97,"code":"(fn [n] \n\t(reduce\n\t #(conj %1\n\t\t(if (nil? (last %1)) 1\n\t\t    (* (last %1) (/ (- n %2) %2))))\n\t [] (range 0 n)))","user":"53da3fcde4b0e771c3025497"},{"code":"(fn pascal\n  ([rnum] (pascal rnum [1]))\n\t([rnum prevrow]\n\t(if (= rnum 1) \n\t\tprevrow\n\t\t(let\n\t\t\t[currow (vec (map #(+ %1 %2) (butlast prevrow) (rest prevrow)))]\n\t\t\t(recur (- rnum 1) (into [1] (conj currow 1)))))))","problem":97,"user":"4e6fe3a6535d5021c1a89629"},{"code":"(fn [n]\n  (first (drop (dec n) (iterate\n           #(conj (into [1]\n                        (reduce (fn [a b]\n        \t              (conj a (+ (% (first b)) (% (last b)))))\n            \t        []\n                \t    (partition 2 1 (range (count %)))))\n                  1) [1]))))","problem":97,"user":"51db1abae4b094966a2cd685"},{"problem":97,"code":"(fn get-row\n  [n]\n  (loop [coll [1]]\n    (if (= (count coll) n)\n    coll\n    (recur (into [1] (map #(apply + %) (partition 2 1 (repeat 0) coll)))))))","user":"56990b68e4b0542e1f8d143a"},{"problem":97,"code":"(fn pt [n]\n  (if (= 1 n)\n    [1]\n    (let [pre (pt (dec n))]\n      (concat [(first pre)] (map + (drop-last pre) (rest pre)) [(last pre)]))))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(memoize \n   (fn pascal-row\n    [n]\n    (if (<= n 1) [1]\n      (let [decn (dec n)\n            lastrow (pascal-row decn)]\n        (loop [i 1\n               returnMe (conj! (transient []) 1)]\n          (if (= i decn)\n            (persistent! (conj! returnMe 1))\n            (recur (inc i) (conj! returnMe (+' (lastrow i) (lastrow (dec i))))))))))\n   )","problem":97,"user":"525d490ae4b0cb4875a45d70"},{"problem":97,"code":"(fn [n]\n  (letfn [(go [p ms rs]\n            (if (empty? ms)\n              (conj rs p)\n              (go (first ms)\n                  (rest ms)\n                  (conj rs (+ p (first ms))))))\n          (n-row [ns]\n            (go 0 ns []))]\n  (last (take n (iterate n-row [1])))))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":97,"code":"(fn nth-pascal\n  [n]\n  (if (= n 1)\n    [1]\n    (into [] (concat [1] (map + (butlast (nth-pascal (dec n))) (rest (nth-pascal (dec n)))) [1]))))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":97,"code":"(fn [n]\n   (loop [n n p [1]]\n     (cond (= n 1) p\n           true (recur (- n 1) (concat (list (first p)) (map #(reduce + 0 %) (partition-all 2 (drop-last (rest (interleave p p))))) (list (last p)))))))","user":"52fac708e4b047fd55836fff"},{"problem":97,"code":"(fn pas [n]\n (if (= n 1) [1]\n             (lazy-cat [1]\n                       (map\n                        (partial apply +)\n                        (partition\n                         2\n                         1\n                         (pas (dec n))))\n                       [1])))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"#(letfn [(f [x] (if (< x 2) 1 (* x (f (- x 1)))))\n         (p [x] (/ (f (- % 1)) (* (f x) (f (- % x 1)))))]\n  (map p (range %)))","problem":97,"user":"5088082ae4b0198722bd9854"},{"problem":97,"code":"(fn pascal [x]\n  ((fn rec [x coll]\n     (if (zero? x)\n       coll\n       (let [next (for [y (range (dec (count coll)))] (+ (coll y) (coll (inc y))))]\n          (rec (dec x) (vec (concat (list 1) next (list 1))))))) (dec x) [1]))","user":"55058a4fe4b086ebe8a79c89"},{"problem":97,"code":"(fn f [n]\n   (nth (iterate #(map + `(0 ~@%) `(~@% 0)) [1]) (dec n)))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":97,"code":";; bad recursion: it works for the tests but will blow the stack for big input.\n;(fn nth-pt [x]\n;  (if (= 1 x)\n;      [1]\n;      (letfn [(wrap-ones     [coll] (concat [1] coll [1]))\n;              (reduce-pascal [coll] (map + coll (rest coll)))]\n;        ((comp wrap-ones reduce-pascal) (nth-pt (dec x))))))\n\n;; loop + recur won't blow the stack\n(fn nth-pt [n]\n  (letfn [(wrap-ones     [coll] (concat [1] coll [1]))\n          (reduce-pascal [coll] (map + coll (rest coll)))]\n    (loop [x     n\n           accum [1]]\n      (if (= 1 x) \n        accum\n        (recur (dec x) ((comp wrap-ones reduce-pascal) accum))))))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn [x] (vec (nth (iterate #(map + (conj (vec %) 0) (vec (cons 0  %))) [1]) (dec x))))","problem":97,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":97,"code":"(fn [row]\n  (condp = row\n    1 [1]\n    2 [1 1]\n    (loop [acc [1 1] currow 2]\n      (if (= currow row)\n        acc\n        (let [p (partition 2 1 acc)]\n          (recur \n            (flatten (vector 1 (map (partial apply +) p) 1))\n            (inc currow)))))))","user":"54dce62be4b024c67c0cf78b"},{"code":"(fn pt [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        true (concat \n               '(1) \n               (->> n dec \n                      pt \n                      (partition 2 1)\n                      (map #(apply + %)))\n               '(1))))","problem":97,"user":"4f567cdbe4b0a7574ea71824"},{"problem":97,"code":"(fn [n] (nth (let\n   [pascal (fn pascal [a]\n      (let [pascal2 (fn pascal2 [a]\n          (if (= 1 (count a)) a\n                (cons (apply + (take 2 a)) (pascal2 (rest a)))))]\n                   (pascal2 (cons 0 a))))]\n                     (iterate pascal [1])) (dec n)))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [num] (into [] (nth (iterate #(loop [x  %1 y []] (if (empty? x) (into [](concat [1] y)) (recur (rest x) (conj y (+ (first x)(if (> (count x) 1) (nth x 1) 0 )))))) [1]) (dec num))))","problem":97,"user":"503539dee4b0ed9c821488f6"},{"problem":97,"code":"(fn [n]\n  (let [num (if (number? n) (- n 1)  (- (first n) 1))\n        fat (fn [n]\n              (if (zero? n)\n                1\n                (reduce (fn [x y] (* x y)) (range 1 (+ n 1)))))]\n\n    (loop [coll [] line 0]\n      (if (= line num)\n        (conj coll 1)\n        (recur\n          (conj coll (quot (fat num) (* (fat line)  (fat (- num line)))))\n          (inc line))))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [n]\n  (let [pt (fn []\n             (iterate\n              (fn [r]\n                (map #(apply + %)\n                     (partition 2 1 (concat [0] r [0]))))\n              [1]))]\n    (->> (pt) (drop (dec n)) (first))))","problem":97,"user":"50fbf811e4b0d10d794c19f1"},{"code":"#(loop [x %1 r []]\n    (if (= x 0)\n      r\n      (recur (- x 1) (loop [v r s [] k 0]\n                       (println v s k)\n                       (if (empty? v)\n                         (conj s 1)\n                         (let [z (first v)]\n                           (recur (rest v) (conj s (+ z k)) z)))))))","problem":97,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn [n] (nth (iterate (fn [x] (filter #(not (zero? %)) (map #(apply + %) (partition 2 1 [0] (flatten [0 x 0]))))) [1]) (dec n)))","problem":97,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn t [i]\n  (let [g #(reduce * (range 1 (+ % 1)))\n\t     h #(/ (/ (g (- %1 1)) (g %2)) (g (- %1 %2 1)))]\n\t     (map (partial h i) (range i))))","problem":97,"user":"4e8a460e535d65386fec2109"},{"problem":97,"code":"(fn [n]\n  (->> \n   (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n   (take n)\n   (last)))","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"#(loop [i % curr [1]]\n    (if (= 1 i) curr\n     (recur (dec i) (into [] (map + (cons 0 curr) (reverse (cons 0 curr)))))))","problem":97,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":97,"code":"(fn pascal [n]\n  (loop [n (dec n) res [1]]\n    (if (zero? n)\n      res\n      (recur (dec n) (concat [1] (map + res (rest res)) [1])))))","user":"55af3e6be4b03311e7b732c7"},{"code":"(fn [n] (nth\n  (iterate\n    (fn [prev] (vec\n      (concat [1] (map #(apply + %) (partition 2 1 prev)) [1])))\n    [1])\n    (dec n)))","problem":97,"user":"4f3444b7e4b0e243712b1eb6"},{"problem":97,"code":"(fn p [n] (if (= 1 n) [1] (let [p1 (p (- n 1))] (vec (map + (cons 0 p1) (conj p1 0))))))","user":"571aad45e4b07c98581c3b59"},{"code":"#(letfn [\n\t(factorial [n]\n\t\t(reduce * (range 1N (inc (biginteger n)))))\n\t(cnm [n m]\n\t\t(/ (factorial n) (* (factorial m) (factorial (- n m)))))\n\t(series [n]\n\t\t(map (partial cnm n) (range 0 (inc n))))]\n\t(series (dec %1)))","problem":97,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":97,"code":"(fn [n]\n    (let [nextrow (fn [x] (map (partial apply +) (partition 2 1 (concat [0] x [0]))))]\n      (nth (iterate nextrow [1]) (dec n))))","user":"51672d15e4b079759a74a5e7"},{"problem":97,"code":"(fn [c] (last (take c (iterate (fn [pt] (vec (concat [1] (map #(apply + %) (partition 2 1 pt)) [1]))) [1]))))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":97,"code":"(fn pascal [u]\n  (let [n (dec u)]\n    (map\n      (fn [k]\n        (let [f (fn ! [t] (if (= t 0) 1 (* t (! (dec t)))))]\n          (/ (f n) (* (f k) (f (- n k)))))) (range (inc n)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn pas [n]\n  (lazy-seq\n   (cond\n  (= n 1) (vector 1)\n\t:else (let [shifted (cons 0 (pas (dec n)))]\n\t\t\t(map + shifted (reverse shifted))))))","problem":97,"user":"4e50c894535dc968683fc4ee"},{"problem":97,"code":"(fn pascal [n]\n  (loop [c [1]]\n    (if (= n (count c))\n      c\n      (recur (conj (vec (cons 1 (map #(reduce + %) (partition 2 1 c)))) 1)))))","user":"50e3e108e4b01912b3285c48"},{"code":"(fn pt [r] \n  (cond (= 1 r) [1]\n        (= 2 r) [1 1]\n        :else (flatten [1 (map #(apply + %) (partition 2 1 (pt (- r 1)))) 1]) ))","problem":97,"user":"517bc969e4b07ef0e56148d0"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [p (pascal (dec n))]\n      (vec (map + (conj p 0) (cons 0 p))))))","user":"580bd81ee4b0849f6811b711"},{"problem":97,"code":"(fn [n] (letfn [(nextline [s] (concat [1] (apply vector (map (partial apply +) (partition 2 1 s))) [1] ))] (loop [s [1] x n] (if (= x 1) s (recur (nextline s) (dec x))))))","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn triangle[row]\n (if (= 1 row)\n   [1]\n   (into [](flatten (conj [1] \n     ((fn sumrow[r]  \n       (let[[f s] r]\n         (if (or (nil? f) (nil? s))\n         []\n         (conj (sumrow (rest r)) (+ f s))\n       )\n    )) (triangle (dec row)) )        \n                          \n                          \n                          \n                          1)))       \n   \n \n\n) )","problem":97,"user":"513f53c6e4b051389b345b40"},{"problem":97,"code":"(fn [a]\n  (loop [row [1] counter 1]\n    (if (= counter a)\n        row\n        (recur\n          (concat [1] (map #(+ %1 %2) row (rest row)) [1])\n          (inc counter)))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":97,"code":";;not mine\n;;(fn pascal [row]\n;;  (map (comp last take)\n;;       (reverse (range 1 (+ 1 row)))\n;;       (take row (iterate (partial reductions +) (take row (repeat 1))))))\n\n;; As usual noisesmith has it clearest to me  \n  #(letfn [(row [prev]\n           (concat [1] (map (partial apply +) (partition 2 1 prev)) [1]))]\n   (nth (iterate row [1]) (dec %)))","user":"599342efe4b0b211ea3aaab0"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (if (= n 1) \n      '(1)\n      (let [xs (concat '(0) (pascals-triangle (dec n)) '(0))]\n        (->> (interleave xs (rest xs))\n             (partition 2)\n             (map (partial reduce +))))))","user":"52616198e4b03e8d9a4a705e"},{"problem":97,"code":"(fn f [n]\n  (if (= n 1)\n    [1]\n    (let [v (f (dec n))]\n      (concat [1] (map + v (rest v)) [1])\n      )))","user":"52ae886de4b0c58976d9acab"},{"problem":97,"code":"(fn pascal\n  [n]\n  (loop [init [1]\n         counter 1]\n      (if (>= counter n)\n        init\n        (recur (->> (cons 0 init)\n                    (partition 2 1 [0])\n                    (map #(apply + %)))\n               (inc counter)))))","user":"4e586949535d8a8b8723a292"},{"problem":97,"code":"(fn pascal [n]\n (letfn ([pn [x] (reduce * (range 1 (inc x))) ])\n\n  (for [i (range n)\n        ]\n    (/ (pn (dec n))\n       (* (pn i)\n          (pn (- (dec n) i)))\n\n\n     ))))","user":"55a21f1ce4b0acc240e3151f"},{"problem":97,"code":"#(nth (iterate (fn [a] (vec (map + (conj a 0) (apply conj [0] a)))) [1]\n                    ) (dec %1))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn pascal [n] (if (= n 1)\n                 [1]\n                 (let [x (cons 0 (pascal (dec n)))]\n                   (map + x (reverse x)))))","problem":97,"user":"51352899e4b082aeb3a3f03b"},{"problem":97,"code":"(fn [lv]\n\t(letfn [(f [a] (apply * (range 1 a)))]\n  \t\t(for [x (range 1 (inc lv))\n     \t:let [y (/ (f lv)\n        \t        (* (f x)\n            \t       (f (inc (- lv x)))))]]\n      \ty)))","user":"5893c64ce4b00487982d524b"},{"code":"(fn [deep]\n   (loop [result [1] index 1]\n     (if (= index deep)\n       result\n       (recur \n         (loop [internal-result [] elements (cons 0 (conj result 0)) i 0]\n           (if (= i (+ (count result) 1))\n             internal-result\n             (recur (conj internal-result (+ (nth elements i) (nth elements (+ i 1)))) elements (inc i))\n             )\n         )\n         (inc index))\n       )\n     )\n   )","problem":97,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn thing [n]\n  (last\n  ((fn pascal [n]\n    (if (== 1 n)\n      [[1]]\n      (let [prev-tri (pascal (dec n))\n            prev-row (concat [0] (last prev-tri) [0])]\n        (conj prev-tri\n              (map #(+ (nth prev-row %)\n                       (nth prev-row (inc %))) \n                   (range (dec (count  prev-row)))))))) n)))","problem":97,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn [n]\n          (let [next-row (fn [v]\n                           (into [] (concat [1]\n                                            (for [i (range (dec (count v)))]\n                                              (+ (get v i) (get v (inc i))))\n                                            [1])))]\n            (last (take n (iterate next-row [1])))))","problem":97,"user":"503b6995e4b07a1917cc34dd"},{"problem":97,"code":"(fn [n]\n  (loop [[f s & rst :as curr_row] [0 1 0]\n         acc []\n         curr_row_num 1]\n    (if (= n curr_row_num)\n      (drop-last (drop 1 curr_row))\n      (if (empty? rst)\n        (recur (flatten [0 acc 1 0]) [] (+ curr_row_num 1))\n        (recur (cons s rst) (conj (vec acc) (+ f s)) curr_row_num)))))","user":"56ee0691e4b04a395b9a044c"},{"problem":97,"code":"(fn solution [n]\n  (if (= n 1)\n    [1]\n    (let [prev (solution (dec n))]\n      (map + (concat [0] prev) (concat prev [0])))))","user":"59a72effe4b066c664927d94"},{"code":"(letfn [(M [a]\n          (into [] (map + (cons 0 a) (conj a 0))))\n\n        (P []\n          (cons [1] (lazy-seq (map M (P)))))]\n  (fn [n]\n    (nth (P) (dec n))))","problem":97,"user":"51a4416ae4b0def3c5c5868c"},{"code":"(fn y [n] \n  (letfn [ (p [r] \n    (vec (map #(cond \n        (= 0 (first %)) 1\n        (= (count r) (first %)) 1\n        :else (+ (nth r (first %)) \n                 (nth r (dec (first %))))) \n    (map-indexed vector (conj r 1)))))]\n  (last (take n (iterate p [1])))))","problem":97,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [a]\n  (if (= a 1)\n    [1]\n    (loop [lst 1 \n         ret [1] \n         [x & xs](range 1 a)]\n      (if x\n        (let [n (int (* lst (/  (- a x) x )))]\n          (recur n (conj ret n) xs))\n        ret))))","problem":97,"user":"4e74e119535d7a570dd295bc"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (vec\n     (conj \n     \t(map (partial apply +) (partition 2 1 [0] (pascal (- n 1))))\n        1\n     )\n    )\n  )\n)","user":"585bcd51e4b0f14aab7c8771"},{"problem":97,"code":"(fn pt\n   ([n k]\n    (if (or (= k 0) (= n k))\n      1\n      (+ (pt (dec n) (dec k)) (pt (dec n) k))))\n\n   ([r]\n    (mapv (partial pt (dec r)) (range r))))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":97,"code":"(fn pascal [n]\n  (letfn [(step-add [coll]\n                    (if (= 1 (count coll))\n                      coll\n                      (conj (step-add (rest coll)) (apply + (take 2 coll)))))]\n  (if (= 1 n)\n      [1]\n      (cons 1 (step-add (pascal (dec n)))))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal-step [row]\n(conj (into [1] (map #(reduce + %) (partition 2 1 row))) 1))\n          ]\n    (last (take n (iterate pascal-step [1])))\n   )\n  )","user":"53e92f82e4b036ad0777e49d"},{"code":"(fn p [n] \n  (if (<= n 1) \n    [1] \n    (let [c (p (dec n))] \n      (vec (map + (cons 0 c) (conj c 0))))))","problem":97,"user":"4f1d1d95535d64f603146488"},{"code":"(fn my-pascal [n]\n  (if (= n 1) [1]\n    (let [xs (cons 0 (my-pascal (dec n)))]\n      (map + xs (reverse xs)))))","problem":97,"user":"53800d99e4b06839e8705ebd"},{"problem":97,"code":"(fn [x]\n  (last (take x (iterate (fn [y]\n                          (into []\n                                (concat '(1) (take (- (count y) 1)\n                                                   (map-indexed (fn [index item]\n                                                                  (if (= (+ 1 index) (count y))\n                                                                    item\n                                                                    (+ (nth y (+ index 1)) item)))\n                                                                y))\n                                        '(1)\n                                        )))\n                         [1]))))","user":"553c4614e4b09218d5f45014"},{"code":"(fn [rw] (let [get-row (fn x [r c] (if (= c 0) 1 (* (x r (dec c)) (/ (-\r\nr c) c))))] (if (= rw 1) [1] (map #(get-row rw %) (range  rw)))))","problem":97,"user":"4fd8544be4b0dab7d829f390"},{"problem":97,"code":"(fn [x]\n   (let [row (dec x) pascal (fn fpascal [r c]\n                  (if (or (= c 0) (= c r))\n                    1\n                    (+ (fpascal (dec r) (dec c)) (fpascal (dec r) c))))]\n     (vec (map-indexed (fn [col _] (pascal row col)) (range 1 (inc x))))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":97,"code":"(fn [x] (last (take x ((fn pas [x] \n\t(let [f (fn [x] \n\t\t\t\t(cons (first x) \n\t\t\t\t\t(conj (vec (map #(reduce +' %) \n\t\t\t\t\t\t\t\t\t(partition 2 1 x))) \n\t\t\t\t\t\t(last x))))]\n\t\t(cons x (lazy-seq (pas (f x)))))) [1]))))","user":"528d6b10e4b0239c8a67aec3"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [p (pascal (- n 1))\n          middle (map (partial reduce +) (map vector (rest p) (butlast p)))]\n    (concat [1] middle [1]))))","user":"51000111e4b00d7ad4cab15e"},{"code":"(fn [n] (nth (iterate #(vec (flatten [1\n                                      (for [[x y] (partition 2 1 %)] (+ x y))\n                                      1]))\n                      [1])\n             (- n 1)))","problem":97,"user":"52ab51c4e4b0c58976d9ac73"},{"problem":97,"code":"#(loop [i 1, res [1]]\n       (if (>= i %) res\n           (recur (inc i) \n                  (map + (cons 0 res) (concat res [0])))))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":97,"code":"(fn [n] \n  (loop [i 1 col [1]] \n    (if (= n i) \n      col \n      (recur (inc i) (concat [1] (map #(apply + %) (partition 2 1 col)) [1])))))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn triangle [n]\n  (if (= 1 n)\n    [1]\n    (let [pt (triangle (dec n))]\n      (loop [i 1 acc [1]]\n        (if (= i (dec n)) \n          (conj acc 1)\n          (recur (inc i) (conj acc (+ (pt (dec i)) (pt i)))))))))","problem":97,"user":"51a768e0e4b0da5f497bde84"},{"problem":97,"code":"(fn pascal\n        ([row]\n           (map (partial pascal row) (range 1 (inc row))))\n        ([row col]\n           (if (or (= col 1) (= col row) (= row 1))\n             1\n             (+ (pascal (dec row) (dec col)) (pascal (dec row) col)))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":97,"code":"(fn pt\n  ([n] (pt n [1]))\n  ([n base]\n     (if (= 1 n)\n       base\n       (recur (dec n)\n              (mapv + (concat [0] base)\n                      (concat base [0]))))))","user":"5cc80598e4b0ccb061962840"},{"problem":97,"code":"(fn [n]\n  (nth  (iterate #(concat [1]\n                    (map + % (rest %))\n                    [1])\n  [1]) (- n 1)))","user":"55e06f82e4b050e68259b40d"},{"code":"(fn [n]\n  (letfn [(pascal [n p]\n            (cond\n             (or (= p 0) (= p (dec n))) 1\n             :else (+ (pascal (dec n) (dec p)) (pascal (dec n) p))))]\n  (for [x (range 0 n)] (pascal n x))))","problem":97,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal (dec n))]\n      (mapv + (cons 0 prev) (conj prev 0)))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":97,"code":"(fn [n] (nth (iterate #(concat [1] \n                    (map + % (rest %)) \n                    [1]) \n           [1]) (dec n)))","user":"5776f39de4b0979f89651643"},{"problem":97,"code":"(fn lambda [n]\n  (if (= n 1) [1]\n    (let [xs (cons 0 (lambda (- n 1)))]\n      (map + xs (reverse xs)))))","user":"54c5cc17e4b045293a27f624"},{"problem":97,"code":"(fn [row-num]\n  (letfn [(add-pairs [coll]\n            (loop [c coll\n                   acc []]\n              (if (<= (count c) 1)\n                acc\n                (recur (rest c) (conj acc (+ (first c) (second c)))))))]\n    (loop [n 1\n           row [1]]\n      (if (= n row-num)\n        row\n        (recur (inc n)\n               (flatten [1\n                        (add-pairs row)\n                        1]))))))","user":"542c026ae4b0dad94371f29a"},{"problem":97,"code":"(fn pascal-row [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [lr (pascal-row (- n 1))]\n                (conj (into [1] (map + lr (rest lr))) 1))))","user":"58d48df8e4b03c36ff7e5941"},{"problem":97,"code":"#(last (take % ((fn pascal-seq\n    ([] (pascal-seq '(1)))\n    ([c] (lazy-seq (cons c (pascal-seq (map + (concat c [0]) (cons 0 c))))))))))","user":"58134ba8e4b0f478707a060b"},{"code":"(fn [n]\n  (loop [n n\n         r [1]]\n    (if (= 1 n)\n      r\n      (recur (dec n)\n             (concat [1]\n                     (loop [s []\n                            h (first r)\n                            t (rest r)]\n                       (if (empty? t)\n                         s\n                         (recur (conj s (+ h (first t)))\n                                (first t)\n                                (rest t))))\n                     [1])))))","problem":97,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":97,"code":"(fn pt [n]\n  (if (= 1 n)\n    [1]\n    (last\n      (take n (iterate (fn [xs]\n                         (concat [1]\n                                 (map (partial apply +) (partition 2 1 xs))\n                                 [1])) [])))))","user":"51a54fb4e4b0def3c5c586a3"},{"problem":97,"code":"(fn pascals-row [x]\n  (let [row (map #(vector x %) (take x (range)))\n        pascal (fn [n k] (if (or (= 0 n) (= k n) (= 0 k)) 1 (+ (nth (pascals-row (- n 1)) (- k 1) 0) (nth (pascals-row (- n 1)) k 0))))]\n    (map #(apply pascal %) row)))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"problem":97,"code":"(fn pascalsrow [n]\n  (map #(/ \n          ;(factorial (dec n)) \n          (reduce * (range 1 (inc (dec n))) )\n          (* \n            ;(factorial(- (dec n) %)) \n            (reduce * (range 1 (inc (- (dec n) %) )))\n            \n            ;(factorial %)   \n            (reduce * (range 1 (inc %))) \n            \n          )\n        ) \n       (range 0 n) \n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":97,"code":"#(loop [n 1 row [1]]\n    (if (= n %)\n      row\n      (recur (inc n) `[1 ~@(map (partial apply +) (partition 2 1 row)) 1])))","user":"4e6a4950535d8ccf87e9febf"},{"problem":97,"code":"(letfn [(gen-row [row _] (let [l (concat row [0]) r (concat [0] row) pair (map vector l r)] (map #(apply + %) pair)))]\n  (fn [x] (nth (reductions gen-row [1] (range)) (dec x))))","user":"5ecc0831e4b016b56eae058c"},{"problem":97,"code":"(fn\n  [level]\n  (cond (= level 1) [1]\n        (= level 2) [1 1]\n        :else\n        (loop [count 2\n               prev-calc [1 1]]\n          (if (= count level)\n            (vec (concat prev-calc ))\n            (recur (inc count)\n                   (vec (concat [1] (map #(apply + %) (partition 2 1 prev-calc)) [1])))))))","user":"57ca338de4b05aa3c4741d37"},{"code":"#(nth\n    ((fn f [row] \n       (lazy-seq \n         (cons row \n               (f (cond\n                    (> (count row) 1) (into [] (concat [1] (map + (rest row) (butlast row)) [1]))\n                    (= (count row) 1) [1 1]\n                    :else [1]))))) [1]) (dec %))","problem":97,"user":"5046b003e4b011c5dfee7727"},{"problem":97,"code":"#(->> (iterate (fn [x] (let [nextRow (->> x\n                                                  (partition 2 1)\n                                                  (map (partial apply +)))]\n                                 (concat '(1) nextRow '(1)))) '(1))\n              (take %)\n              (last))","user":"5e3975a3e4b01d43a70e8dd3"},{"code":"(fn [x]\n  (letfn [(pascal [row col]\n      (cond (= col 1) 1\n            (= col row) 1\n    :else (+ \n        (pascal (- row 1) (- col 1))\n        (pascal (- row 1) col))))\n\n  (pascal-vector [n]\n      (letfn [(iter [k seq]\n          (if (> k n)\nseq\n(iter (+ k 1) (conj seq (pascal n k)))))]\n  (iter 1 [])))]\n(pascal-vector x)))","problem":97,"user":"4e6a52cb535d8ccf87e9feca"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [coll]\n                  (mapv + (conj coll 0) (into [0] coll)))\n                [1]) (dec n)))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":97,"code":"(fn pas [n]\n  (if (= n 1)\n    [1]\n    (vec (map #(apply + %)\n         (partition 2 1 \n                    (concat [0] (pas (dec n)) [0]))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [n] (loop [s [1] i 1] (if (>= i n) s \n                            (recur (concat [1] \n                                           (map \n                                            (fn [s] \n                                              (+ (first s) (last s))) \n                                            (partition 2 (rest (interleave s s)))) [1]) (+ i 1)))))","problem":97,"user":"536f2faee4b0fc7073fd6e79"},{"problem":97,"code":"(fn shit[n]\n        (if (= n 1) \n          [1]\n          (flatten [1 (map (fn [[a b]] (+ a b)) (partition 2 1 (shit (dec n)))) 1] )))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":97,"code":"(fn [n]\n  (let [p (fn pascal\n            ([] (pascal [1]))\n            ([coll] (cons coll (lazy-seq (pascal (map +' (conj (vec coll) 0) (into [0] coll)))))))]\n    (first (drop (- n 1) (p)))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n\n  (loop [line '(1) count (- n 1)]\n    (if (zero? count)\n      line\n      (recur\n        (conj\n          (apply list\n                 ((fn sum-seq\n                    ([old] (sum-seq old []))\n                    ([old new]\n                     (if (empty? old)\n                       new\n                       (sum-seq\n                         (drop 1 old)\n                         (conj new (+ (first old) (nth old 1 0))))\n                       )\n                      )\n                    ) line)) 1) (dec count))\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [x]\n  (nth\n    (iterate \n      (fn [res] \n        (concat \n          [1] (map + (butlast res) (rest res)) [1]))  [1])\n            (dec x)))","problem":97,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [n] (nth (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1]) (dec n)))","problem":97,"user":"4e50ad74535dc968683fc4ec"},{"problem":97,"code":"(fn ptri [row]\n  (letfn [\n          (factorial [x] (loop [num x result 1] (if (= num 0) result (recur (dec num) (* result num)))))\n          (pascColRow [row col] (/ (factorial row) (* (factorial col) (factorial (- row col)))))\n          ]\n    (if (= 1 row)\n    [1]\n    (loop [col 0 result []]\n      (if (= col (dec row))\n        (conj result 1)\n        (recur (inc col)  (conj result (pascColRow (dec row) col))))))))","user":"56427910e4b08d4f616f5f19"},{"problem":97,"code":"#(map (fn p [l i] (cond (or (< i 1) (> i l) (< l 1)) 0 (= l i 1) 1 :else (+ (p (dec l) (dec i)) (p (dec l) i)))) (repeat %1 %1) (range 1 (inc %1)))","user":"55645592e4b0c656e3ff1802"},{"code":"(fn [n]\r\n    (loop [row [1]\r\n           n (dec n)]\r\n      (if (zero? n)\r\n        row\r\n        (recur\r\n         (vec (map + (cons 0 row) (conj row 0)))\r\n         (dec n)))))","problem":97,"user":"4f047177535dcb61093f6bc6"},{"problem":97,"code":"#(nth (iterate (fn [r] (concat [1] (->> r (partition 2 1) (map (partial apply +)) ) [1])) '(1)) (dec %))\n;#(nth ((fn tri [x] (lazy-seq (cons x (tri (concat [1] (->> x (partition 2 1) (map (partial apply +)) ) [1] ))))) '(1)) (dec %))","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn triangle2 [n] (cond \n                     (= n 1) [1] \n                     (= n 2) [1 1]\n                     (> n 2) ((fn createcoll [x] (conj ((fn create [coll] (if (< 1(count coll))\n                      (conj (create (rest coll)) (+ (first coll ) (second coll)))\n                      [1])) x) 1)) \n                                (triangle2 (- n 1)) \n                                           )   \n                      ))","problem":97,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn p-row [n]\n  (let [n (dec n)]\n (apply vector\n  (map \n   (fn binomial-coefficient [n k]\n    (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n      (/ (rprod (- n k -1) n) (rprod 1 k))))\n   (repeat n)\n   (range 0 (inc n))))))","problem":97,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":97,"code":"(fn [n]    \n  (letfn [(p [res]\n            (if (> (count res) n)\n              (get res (dec n))\n              (p (conj res (conj (reduce #(conj %1 (apply + %2)) [1] (partition 2 1 (last res)))  1)))))]\n    (p [[1] [1 1]])))","user":"591e0782e4b09b4ee5954c25"},{"problem":97,"code":"(fn dim [n]\n  (cond\n    (= n 1) [1]\n    :else (let [prev (dim (- n 1))]\n            (->>\n              (interleave (cons 0 prev) (conj prev 0))\n              (partition 2)\n              (map #(let [[a b] %] (+ a b)))\n              vec\n              ))))","user":"5e1754abe4b00200644e3d53"},{"problem":97,"code":"(fn [n]\n  (first \n    (drop (dec n)\n          (iterate #(map + \n                         (concat [0] %) \n                         (concat % [0])) \n                   [1]))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [r]\n        (map\n          #(+ (if (= % 0)         0 (nth r (dec %)))\n              (if (= % (count r)) 0 (nth r %)))\n          (range 0 (inc (count r)))))\n      [1])\n    (dec n)))","problem":97,"user":"501284d9e4b030d97e4db710"},{"problem":97,"code":"(fn p [n]\n  (nth (iterate (fn [p] \n                  (concat [1]\n                          (map #(apply + %) (partition 2 1 p))\n                          [1])) \n                [1]) \n       (dec n)))","user":"5458c74de4b01be26fd74623"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate #(mapv + (cons 0 %) (conj % 0)) [1])\n   (dec n)))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [n] (last (take n ((fn pascal-triangle\n        ([] (pascal-triangle [1]))\n        ([last-line]\n           (let [this-line (map #(apply + %) (partition 2 1 last-line))\n                 this-line (concat [1] this-line [1])]\n             (lazy-seq (cons last-line (pascal-triangle this-line))))))))))","problem":97,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn p [n] (if (> n 1) (reduce #(conj % (apply + %2)) [1] (partition 2 1 [0] (p (dec n)))) [1]))","problem":97,"user":"505d4b21e4b0e6aca564be07"},{"problem":97,"code":"(fn pascal [x]\n  (if (= x 1)\n    [1]\n    (let [y (pascal (- x 1))]\n      (seq (map + (seq (cons 0 y)) (concat y [0])))\n      )\n   ))","user":"5372c830e4b06d7f452d9dff"},{"problem":97,"code":"(fn test [n]\n  (loop [i 1\n         result []]\n    (if (> i n)\n      result\n      (recur (inc i) (loop [k 0\n                            nestedresult []]\n                       (if (= k i)\n                         nestedresult\n                         (recur (inc k) (conj nestedresult (if (or (= k 0) (= k (count result))) 1 (+ (nth result (dec k)) (nth result k))))))))\n     )\n  )\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":97,"code":"#((fn [v]    \n    (if (= % (count v)) v\n\t  (recur (mapv + (cons 0 v) (conj v 0))))\n)[1])","user":"5654d0e1e4b0f9d632dd848c"},{"code":"(fn p [n]\n  (if (= 1 n)\n    [1]\n    (let [r (p (dec n))]\n      (concat [1]\n               (map + (next r) r)\n               [1]))))","problem":97,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn pascal [n]\n    (if (= n 1)\n        [1]\n      (let [r (pascal (- n 1))]\n        (map + (concat r [0])\n             (concat [0] r)))))","problem":97,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":97,"code":"(fn [n]\n  (nth\n    (iterate \n      (fn [xs] (cons 1 (map #(apply + %) (partition-all 2 1 xs)))) \n      [1])\n    (dec n)))","user":"4faf97d8e4b081705acca258"},{"problem":97,"code":"(fn my-97\n   [n]\n   (loop \n     [res [1],  count 1]\n     (if (= count n)\n       res\n       (recur (concat [1] (map #(apply + %) (partition 2 1 res)) [1]) \n              (inc count)))))","user":"56c3aca0e4b05cc29241ee90"},{"problem":97,"code":"(fn pt [n] (if (= n 1) [1] (into [] (map + (conj (pt (dec n)) 0) (into [] (cons 0 (pt (dec n))))))))","user":"556a3243e4b09a3098a524de"},{"problem":97,"code":"(fn [n]\n  (-> (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n      (nth (dec n))))","user":"5540cc0ce4b0a04f79299505"},{"problem":97,"code":"(fn Ptriangle [n]\n  (last (take n(iterate\n          (fn nextRow [previousRow]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1 (conj (into [0] previousRow) 0)))))\n          [1]))))","user":"6074e1e4e4b069485764de4f"},{"code":"(fn [n]\n  (nth (iterate #(concat [1] (map (partial apply +) (partition 2 1 %)) [1]) [1]) (dec n)))","problem":97,"user":"511d6a01e4b022853b0e07a5"},{"problem":97,"code":"(fn [r]\n  (let [f \n        (fn n-choose-k [n k] \n          (cond (or (< n 0) (< k 0)) 0\n                (and (= n 0) (= k 0)) 1\n                :else (+ (n-choose-k (dec n) (dec k)) (n-choose-k (dec n) k))))]\n    (for [row [(dec r)] col (range r)] (f row col))))","user":"5908b36be4b047aa04b19982"},{"problem":97,"code":"(fn [n]\n   (nth (lazy-seq (iterate #(vec (map +' (cons 0 %) (conj % 0))) [1]) ) (- n 1)))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn pascals-triangle [n]\n  (if (= n 1) [1]\n      (let [prev (pascals-triangle (dec n))]\n        (concat [1]\n                (for [i (range (- n 2))]\n                  (+ (nth prev i)\n                     (nth prev (inc i))))\n                [1]))))","problem":97,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn pascal [n] \n  (if (<= n 1) \n      [1]\n      (let [pp (pascal (dec n))]\n        (into [] (map #(+ (get pp (dec %) 0) (get pp % 0)) (range 0 n))))))","problem":97,"user":"5220909fe4b0e6a83c89259f"},{"code":"(fn pascal [n] \n\t( \n\t\tif (= n 1)\n\t\t[1]\n\t\t(vec\n\t\t\t(map \n\t\t\t\t+\n\t\t\t\t(cons 0 (pascal (- n 1)))\n\t\t\t\t(conj (pascal (- n 1)) 0)\n\t\t\t)\n\t\n\t\t)\n\t\t\n\t)\n)","problem":97,"user":"515919fbe4b0394f658fe229"},{"problem":97,"code":"#(nth (iterate (fn [prev]\n                (if (empty? prev)\n                  [1]\n                  (loop [xs prev,\n                         res [1]]\n                    (if (= 1 (count xs))\n                      (conj res 1)\n                      (recur \n                        (rest xs)\n                        (conj res (+ (first xs) (second xs)))))))\n                )\n              []) %)","user":"5630ce72e4b0bfe05bf11786"},{"problem":97,"code":"(fn [n]\n    (loop [line [1] i 1]\n      (if (= i n)\n        line\n        (recur \n          (cons 1 (concat (map #(apply + %) (partition 2 1 line)) '(1)))\n          (inc i)))))","user":"56eaad95e4b04a395b9a040f"},{"code":"(fn p [n]\n   (letfn [(pv [v] \n          (concat \n            [1] \n            (map #(apply + %1) (partition 2 1 v))\n            [1]))]\n      (last (take n (iterate pv [1])))))","problem":97,"user":"50bfd849e4b042992946c649"},{"problem":97,"code":"(fn pascal [i]\n  (cond\n    (= i 1) [1]\n    (= i 2) [1 1]\n    :else (flatten [1 (map #(apply + %) (partition 2 1 (pascal (dec i))))\n           1])))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"#(reduce (fn [x y] (concat x (list (* y (last x))))) '(1) \n         (let [x (range 1 %) y (reverse x)] (map / y x)))","problem":97,"user":"500ec210e4b00fff93030f9d"},{"code":"(fn [n]\n  (letfn [(next-row [row]\n            (let [pairs (partition 2 1 row) \n                  innards (map #(apply + %) pairs)]\n              (concat [1] innards [1])))]\n  (first (drop (dec n) (iterate next-row [1])))))","problem":97,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(memoize\n (fn pascal [n]\n   (if (= n 1) [1]\n     (concat [1]\n             (map #(apply + %) (partition 2 1 (pascal (dec n))))\n             [1]))))","problem":97,"user":"4ed188c8535d44c135fd68cf"},{"code":"(fn f [n] (if (= n 1) [1] (conj (vec (cons 1 (map (partial apply +) (partition 2 1 (f (dec n)))))) 1)))","problem":97,"user":"4e4be570535dc968683fc4d8"},{"problem":97,"code":"(fn [n]\n    (letfn [(pascals-triangle\n              ([] (iterate pascals-triangle [1]))\n              ([row] (let [lst (concat [0] row [0])]\n                       (mapv + lst (rest lst)))))]\n    (nth (pascals-triangle) (dec n))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn [n] \n  (if (= 1 n) [1]\n    (conj (loop [res [1] c 1 x (- n 1)]\n              (if (zero? (- x 1)) res\n                (recur (conj res (* (last res) (/ (- n c) c)))\n                       (inc c)\n                       (dec x)))) 1)))","problem":97,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (->>\n      (pascal (- n 1))\n      (partition-all 2 1)\n      (map\n        (partial reduce +))\n      (concat [1]))))","problem":97,"user":"4fb1d907e4b081705acca282"},{"problem":97,"code":"(fn pt [n]\n  (if (= n 1) [1]\n      (let [pt-1 (conj (pt  (- n 1)) 0)]\n        (map + pt-1 (reverse pt-1)))))","user":"53480973e4b084c2834f4a52"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (flatten [1 (map (partial apply +) (partition 2 1 (pascal (dec n)))) 1])))","user":"5ed9c2cde4b0c7845d86b0e4"},{"code":"(fn [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))","problem":97,"user":"5032b066e4b00c0952a257ea"},{"problem":97,"code":"(fn pascals [row]\n  (loop [r 1, res [1]]\n    (if (= r row)\n      res\n      (recur (inc r)\n             (concat [1] \n                     (map (fn [[x y]] (+ x y)) \n                          (partition 2 1 res)) \n                     [1])))))","user":"541b1f25e4b01498b1a71a63"},{"problem":97,"code":"(fn pt [row-number]\n  (if (= row-number 1)\n    [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (pt (dec row-number)) [0])))))","user":"558843dae4b059ccff29b1f3"},{"code":"(fn [n]\n        (loop [coll [1] cnt n]\n           (if (= cnt 1)\n               coll\n               (recur (map + (into [0] coll) (conj (vec coll) 0))\n                      (dec cnt)))))","problem":97,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn pascal [n] (cond (= n 1) [1] (= n 2) [1 1] :else (concat [1] (map (fn [xs] (apply + xs)) (partition 2 1 (pascal (dec n)))) [1])))","problem":97,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn p [r]\n  (if (= r 1)\n    [1]\n    (let [ar (p (- r 1))]\n      (concat [1] (map #(apply + %) (partition 2 1 ar)) [1]))))","problem":97,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":97,"code":"(fn [n]\n\t(loop [i 1 res [1]]\n\t\t(let [zero-appended (conj res 0)\n      \t\t  zero-prepended (cons 0 res)\n      \t\t  next-res (map + zero-appended zero-prepended)]\n\t\t\t(if (= i n) res (recur (inc i) (into [] next-res))))))","user":"56483f45e4b0284900eef62b"},{"problem":97,"code":"(fn pascal [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    (= 3 n) [1 2 1]\n    :else\n      (let [previous (- n 1)\n            previous_row (pascal previous)\n            previous_pairs (partition 2 1 previous_row)]\n            (concat [1] (map #(+ (first %) (second %)) previous_pairs) [1])\n            )))","user":"5779556de4b0979f8965166e"},{"problem":97,"code":"(fn pascal-triangle\n  [n]\n  (let [factorial (fn [n] (apply * (range 1 (inc n))))\n        binomial-coeff (fn [n k] (/ (factorial n)\n                                    (* (factorial k) (factorial (- n k)))))]\n    (map binomial-coeff (repeat (dec n)) (range 0 n))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":97,"code":"(fn [n] \n  (first (drop (dec n) \n         (iterate \n          #(concat [1] \n                   (map + % (rest %)) \n                   [1]) \n          [1]))))","user":"5409a12fe4b0addc1aec66df"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate #(map +' `(0 ~@%) `(~@% 0)) [1]))))\n;(defn calc-cell[r i](if (or (= r i) (= i 0)) 1 (reduce + [(calc-cell (dec r) i) (calc-cell (dec r) (dec i)]))","user":"5e48ec09e4b043cd24807a45"},{"problem":97,"code":"(fn prob97 [row]\n  (last (take row\n        (iterate #(concat [1]\n                          (map + % (rest %))\n                          [1])\n\n                 [1])\n)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":97,"code":"(fn tri [x] (loop [ix x] (cond\n                           (= 1 x) '[1]\n                           (= 2 x) '[1 1]\n                           (> x 2) (conj (into [1] (mapv #(reduce + %) (vec (map vec (partition 2 1 (tri (dec x))))))) 1))))","user":"53f6566ee4b0db01ade6f9de"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal 1 n [1]))\n  ([a n col]\n   (if (= a n)\n     (into [] col)\n     (pascal (inc a) n\n             (concat\n              (cons 1\n                    (->>  col\n                          (partition 2 1)\n                          (map (partial reduce +))))\n              '(1))))))","user":"5da7176ae4b000c986472c13"},{"problem":97,"code":"(fn [n] \n  (loop [r 0\n         v [1]] \n        (if (= r n)  \n          v   \n          (recur\n            (+ 1 r)\n            (into [] (for [k (range (+ 1 r)) \n                  :let [e (if (or (= k 0) (= k r) ) \n                            1   \n                            (+ (nth v (- k 1)) (nth v k)))]] \n\n                 e))))))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":97,"code":"(fn [rownum]\n    (loop [row [1]\n           idx rownum]\n      (if (= 1 idx)\n        row\n        (let [left (concat [0] row)\n              right (concat row [0])]\n          (recur \n           (map #(+ %1 %2) left right)\n           (dec idx))))))","user":"554a75c9e4b0a04f79299575"},{"problem":97,"code":"(fn [e](loop [d e f [1 1]]\n          (if (= e 1)\n            [1]\n            (if(<= d  2)\n              f\n              (recur (dec d)\n                  (loop [[a & b] f result []]\n                    (if (empty? b)\n                      (cons 1 (conj result 1)) \n                      (recur b (conj result (+ a (first b)))))))))))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":97,"code":"(fn pascal-triangle[n]\n     (if (= n 1)\n       [1]\n       (lazy-seq (concat (cons 1 (map #(+ (first %) (second %)) (partition 2 1 (pascal-triangle (dec n))))) [1]))))","user":"5ed6030de4b016b56eae05db"},{"problem":97,"code":"#(nth (iterate (fn [v] (concat [1] (for [i (partition 2 1 v)] (apply + i)) [1])) [1]) (dec %))","user":"56aed78fe4b03c432f187363"},{"problem":97,"code":"(fn [x]\n  (map\n   #(/\n     ((fn [a]\n  (if (= a 0)\n    1\n    (reduce * (range 1 (+ a 1)))))\n (- x 1))\n     ((fn [a]\n  (if (= a 0)\n    1\n    (reduce * (range 1 (+ a 1)))))\n %)\n     ((fn [a]\n  (if (= a 0)\n    1\n    (reduce * (range 1 (+ a 1)))))\n (- x % 1)))\n   (range 0 x)))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":97,"code":"(fn f [n] (loop [idx 1 row [1]] (if (= idx n) row (recur (inc idx) (map + (concat row [0]) (cons 0 row))))))","user":"55280930e4b0ffed3738f93b"},{"code":"(fn [n]\n    \"pascal's triangle\"\n    (if (< n 1) nil\n      (if (= n 1)\n        [1]\n        (letfn [(next-triangle [t]\n                  (let [lastidx (dec (count t))]\n                    (loop [idx 1 tmp [1]]\n                      (if\n                       (> idx lastidx) (conj tmp 1)\n                       (recur (inc idx) (conj tmp (+ (get t (dec idx)) (get t idx))))))))]\n          (loop [i 2 result [1 1]]\n            (if (= i n)\n              result\n              (recur (inc i) (next-triangle result))))))))","problem":97,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn tri [n]\n     (let [next-tri (fn [sq]\n                      (loop [s (vec (cons 0 (conj sq 0)))\n                             acc []]\n                        (if (or (empty? s) (nil? (second s)))\n                          acc\n                          (recur (rest s) (conj acc (+ (first s) (second s)))))))]\n       (last (take n (iterate next-tri [1])))))","problem":97,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn [n]\n           (cond \n             (= n 1) [1]\n             (= n 2) [1 1]\n             :default (loop [x 2, res [1 1]]\n                         (if (= n x)\n                             res\n                             (recur (inc x) (vec (map + (cons 0 res) (conj res 0))))))))","problem":97,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn make-term-2 [n]\n\t(->> (map / (range (dec n) 0 -1) (range 1 n))\n\t     (reductions * 1)))","problem":97,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn pascal [x] \n  (let [make (fn [ls] \n               (lazy-cat '(1) (map + (rest ls) (butlast ls)) '(1)))] \n    (if (= x 1) \n      '(1) \n      (make (pascal (dec x))))))","problem":97,"user":"521a4ff5e4b0c4ef0be83004"},{"problem":97,"code":"(fn [n]\n  (loop [n n res [1]]\n    (if (= n 1) res\n      (recur (dec n)\n             (map + (concat [0] res) (concat res [0]))))))","user":"553e0b70e4b0a04f792994e8"},{"problem":97,"code":"(fn [n]\n (nth\n  (iterate (fn [row] \n   (let [row-0 (conj row 0)]\n    (mapv + row-0 (rseq row-0))))\n   [1]) \n  (dec n)))","user":"54580586e4b01be26fd74616"},{"problem":97,"code":"(fn [n]\n   (let [sum-row \n         (fn sum-row [i]\n           (cond\n             (= i 0) [1]\n             (= i 1) [1 1]\n             (> i 1) (vec (concat [1]\n                                  (map #(apply + %) (partition 2 1 (sum-row (dec i))))\n                                  [1]))))]\n     (sum-row (dec n))))","user":"58c4492be4b021aa9917ed27"},{"problem":97,"code":"(fn [i]\n  (loop [row [1] j 1]\n    (if (= i j)\n      row\n      (recur (concat (map-indexed\n                      (fn [idx v] (if (zero? idx) 1 (+ (nth row (dec idx)) v)))\n                      row)\n                     [1])\n             (inc j)))))","user":"564c8e99e4b0284900eef674"},{"code":"(fn pascals-triangle-row [row-number]\n  (letfn [(row-acc [rows-left previous-row]\n            (if (= rows-left 0)\n              previous-row\n              (recur (dec rows-left)\n                     (vec (map #(+ (get previous-row (dec %) 0) (get previous-row % 0))\n                               (range (inc (count previous-row))))))))]\n    (row-acc (dec row-number) [1])))","problem":97,"user":"4ff355a1e4b0678c553fc34d"},{"problem":97,"code":"(fn row [n] (if (= 1 n) [1] (concat [1]\n                                    (#(mapv + (butlast %) (rest %)) (row (dec n)))\n                                    [1])))","user":"55f20e4be4b06e875b46ce40"},{"problem":97,"code":"(fn pascal [row]\n  (let [f! (fn [n] (if (= n 0) 1 (reduce * (range 1 (inc n)))))]\n    (map #(/ (f! (dec row)) (* (f! %) (f! (- (dec row) %)))) (range row))))","user":"55d29fb6e4b0e31453f64a59"},{"code":"(fn [n]\n  (letfn [(f [n] (reduce * (range 1 (inc n))))\n          (myfn [n k] (/ (f n) (* (f k) (f (- n k)))))]\n    (map #(myfn (dec n) %) (range n))))","problem":97,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":97,"code":"(fn pastri\n   ([n] (pastri [1] n))\n   ([res n]\n    (if (= n 1)\n      res\n      (recur (vec (map + (conj res 0) (cons 0 res))) (dec n)))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn pascal-triangle [n]\n  (reduce (fn [prev rownum]\n            (vec (concat [1]\n                         (map (fn [i] (+ (nth prev i) (nth prev (dec i))))\n                              (range 1 (dec rownum)))\n                         [1])))\n          [1]\n          (range 2 (inc n))))","problem":97,"user":"5175616ae4b0dea9bbfba576"},{"problem":97,"code":"(fn pascal-tri [n]\n  (loop [result [1]\n         m n]\n    (if (> m 1)\n      (recur (concat '(1)\n                     (map #(+ (first %) (second %))\n                          (partition 2 1 result))\n                     '(1))\n             (dec m))\n      result)))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":97,"code":"(fn [x]\n   (let [fact (fn f[a]\n                (if (= a 0)\n                  1\n                  (* a (f (dec a)))))\n         cbn (fn [a b]\n               (/ (/ (fact a) (fact b)) (fact (- a b)))\n               )\n\n         ]\n     (for [a (range x)]\n       (cbn (dec x) a)\n       )\n     )\n   )","user":"5ea7b04de4b00a66d4a951b6"},{"problem":97,"code":"(fn [n]\n  (nth\n   (iterate\n    (fn [upLine]\n      (vec (concat [1] (map #(+ (first %) (second %)) (partition 2 1 upLine)) [1]))) [1])\n  (dec n)))","user":"5a99b863e4b0d174b936c7ae"},{"problem":97,"code":"(fn [i]\n  (last (take i (iterate #(map +'`(0 ~@%) `(~@% 0)) [1]))))","user":"608b3fe1e4b0adce4b61c442"},{"code":"(fn [n]\n    (let [choose (fn [n k]\n            (quot\n                (reduce * 1 (range (+ 1 (- n k)) (+ 1 n)))\n                (reduce * 1 (range 1 (+ 1 k)))))]\n        (vec (map #(choose (dec n) %) (range n)))))","problem":97,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn [n]\n  (loop [coll [1] c 1]\n    (if (= c n)\n        coll\n        (recur (conj coll (* (last coll)\n                        (/ (- n c)\n                           c)))\n               (inc c)))))","problem":97,"user":"50166470e4b052339a490e76"},{"code":"#(nth (iterate (fn [l] (concat [1] (map + l (rest l)) [1])) [1]) (dec %))","problem":97,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":97,"code":"(fn pascal \n  [n]\n  (if (= n 1)\n    [1]\n    (map (fn [a] (reduce + a)) (partition 2 1 (concat [0] \n                                                      (pascal (dec n)) \n                                                      [0])))))","user":"59e18b9be4b08badc2a0c50f"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (let [evolve-fn (fn [row] (if (= 1 (count row))\n                              [1 1]\n                              (loop [index 0\n                                     new-row [1]]\n                                (if (= index (- (count row) 1))\n                                  (conj new-row 1)\n                                  (recur (inc index) (conj new-row (+ (row index) (row (inc index)))))))))]\n    (loop [i 1\n           current-row [1]]\n      (if (= n i)\n        current-row\n        (recur (inc i) (evolve-fn current-row))))))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [n] (->> [1]\n  (iterate #(vec `(1 ~@(map + % (next %)) 1)))\n  (take n)\n  last\n  ))","problem":97,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [n]\n  (rest (butlast\n    (reduce\n      (fn [r _]\n        (cons 0 (concat (map #(+ (first %) (second %)) (partition 2 1 r)) [0])))\n      [0 1 0]\n      (range 1 n)))))","problem":97,"user":"504e13fce4b078edc5f593bc"},{"problem":97,"code":"(fn pascal [n]\n (letfn [(next-row [r] (map + (concat r [0]) (concat [0] r)))]\n  (nth (iterate next-row [1]) (dec n))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [i]\n  (nth\n   (iterate\n    (fn [v]\n      (map\n       #(apply + %)\n       (partition 2 1 (flatten [0 v 0]))))\n    [1]) (- i 1)))","problem":97,"user":"5256627ce4b0541d1855ba1a"},{"problem":97,"code":"(fn [n] (nth (iterate #(cons 1 (concat (map + % (rest %)) [1])) [1]) (dec n)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [n]\n\t(for [i (range 0 n)\n\t\t:let [f\n\t\t\t(fn binom [n k]\n\t\t\t\t(if\t(or (= k 0) (= k n))\n\t\t\t\t\t1\n\t\t\t\t\t(+\n\t\t\t\t\t\t(binom (dec n) (dec k))\n\t\t\t\t\t\t(binom (dec n) k))))]]\n\t\t\t(f (dec n) i)))","problem":97,"user":"519136e9e4b0f8ef0be96c01"},{"problem":97,"code":"(fn pascals-triangle [n]\n  (cond\n    (< n 1) nil\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev (pascals-triangle (dec n))]\n            (concat [1]\n                    (map #(+ (nth prev (dec %)) (nth prev %))\n                         (range 1 (dec n)))\n                    [1]))))","user":"56b9c644e4b0f2655033593a"},{"problem":97,"code":"#(nth (iterate\n  \t(fn [o]\n      (let [l (inc (count o))]\n  \t    (loop [i 0 r []]\n          (if (= (count r) l)\n            r\n            (let [a (if (or (zero? i) (= (dec l) i))\n                      1\n                      (+ (nth o (dec i)) (nth o i)))]\n              (recur (inc i) (conj r a))))))) []) %)","user":"54c8ac49e4b045293a27f64e"},{"problem":97,"code":"(fn [val]\n   (cond (= val 1) [1]\n         (= val 2) [1 1]\n         :else (loop [inicial [1 1]\n                      cont (- val 2)]\n                 (if (= cont 0)\n                   inicial\n                   (let [res (loop [copy inicial\n                                    result [1 1]]\n                               (if (= (count copy) 1)\n                                 result\n                                 (let [[val1 val2] copy\n                                       total (+ val1 val2)]\n                                   (recur (vec (drop 1 copy)) ((comp #(conj % 1) #(conj % total) vec drop-last) result)))))]\n                     (println :res res)\n                     (recur res (dec cont)))))))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn pas [n]\n  (let [sums (fn [lst]\n               (map\n                (fn [n] (+ (nth lst (dec n)) (nth lst n)))\n                (range 1 (count lst))))]\n  (if (= n 1) '[1]\n    (concat '[1] (sums (pas (dec n))) '[1]))))","problem":97,"user":"525372ade4b0541d1855b8f3"},{"problem":97,"code":"(fn [x] \n   (vec (map (fn [[n k]]\n           (let [f #(reduce * (range 1 (inc %)))]\n             (/ (f n) (* (f k) (f (- n k))))))  \n         (map #(vector (dec x) %) (range x)))))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":97,"code":"(letfn [(factorial [n]\n                   (reduce * (range 1 (inc n))))\n            (binomial [n k]\n              (unchecked-divide-int (factorial n) (* (factorial k) (factorial (- n k)))))\n            (pascal [n] (vec (flatten (for [k (range 0 (inc n))]\n                       [(binomial n k)]))))]\n           #(pascal (dec %1)) \n           )","user":"55cdd76ae4b0e31453f64a20"},{"problem":97,"code":"(fn psc [n] \n(cond (= 1 n) [1] \n:else (flatten (list 1 \n(map (partial apply +)\n (partition 2 1 (psc (dec n)))) 1\n))))","user":"58335c22e4b089d5ab817c9a"},{"code":"(fn [n]\n    (reduce (fn [last _]\n                (concat [1]\n                        (map #(apply + %) (partition 2 1 last))\n                        [1]))\n            [1]\n            (range 1 n)))","problem":97,"user":"502873a8e4b01614d1633ff8"},{"problem":97,"code":"(fn pascal-triangle [n]\n    (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      (> n 2) (flatten [1 (map (partial apply +) (partition 2 1 (pascal-triangle (dec n)))) 1])))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":97,"code":"(fn pasc [n]\n   (cond\n     (< n 2) [1]\n     :else\n     (let [next-row (fn [xs]\n                      (->> (concat [0] xs [0])\n                           (partition 2 1)\n                           (map #(reduce + %))))]\n       (next-row (pasc (dec n))))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":97,"code":"#(loop [a [1] n 1] (if (= % n) a (recur (conj a (* (last a) (/ (- % n) n))) (inc n))))","user":"55c3f19de4b0e31453f64991"},{"problem":97,"code":"(fn [n] (loop [i 2 r [[1] [1 1]]]\n       (cond\n         (<= n 0) []\n         (=  n 1) [1]\n         (<= n i)  (last r)\n         :else    (recur (inc i) (conj r (let [c (last r)] (vec (cons (first c) (conj\n                    (vec (for [i (range (dec (count c)))] (+ (nth c i) (nth c (inc i)))\n                  )) (first c) ))))))\n)))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn pascals-triangle [ntoreach] (loop [n 1 row [1]] (let [rowlen (count row)] (cond (= n ntoreach) row (= ntoreach 2) [1 1] :else (recur (inc n) (conj (->> (partition 2 1 [] row) (map (partial reduce + 0)) butlast vec (apply vector 1)) 1))))))","problem":97,"user":"4fae4c11e4b081705acca248"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n          (iterate\n            (fn [i]\n              (into []\n                    (map (fn [j] (reduce + j))\n                         (partition 2 1\n                                    (conj (into [0] i) 0)))))\n            [1]))))","user":"5f081f6de4b0cf489e8d7f5a"},{"code":"(fn pascal [n]\r\n  (if (= n 1) '(1)\r\n    (let [m (pascal (dec n))]\r\n      (map + (conj m 0) (concat m '(0))))))","problem":97,"user":"4e14108c535d04ed9115e7dd"},{"problem":97,"code":"(fn [n]\n  (loop [i 1\n         res [1]]\n    (if (= i n)\n      res\n      (recur (inc i)\n             (map #(apply + %) (partition 2 1 (concat [0] res [0])))))))","user":"5455c2f3e4b080a794c2c87d"},{"problem":97,"code":"(fn P [n]\n  (if (= n 1)\n    '(1)\n    (let [l (P (dec n))]\n      (map + (concat l [0]) (conj l 0)))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":97,"code":"(fn pascal\n  ([x]\n   (pascal x 1 [1]))\n  ([x cnt out]\n   (if (= cnt x)\n     out\n     (if (= x 2)\n       (pascal x (inc cnt) [1 1])\n       (pascal x (inc cnt) (apply vector (concat [1] (map #(+ (nth out %) (nth out (inc %))) (range (- cnt 1))) [1])))))))","user":"586b6a0ae4b01531a375e957"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n                    `[1 ~@(map #(reduce + %) (partition 2 1 row)) 1])]\n    (loop [row-num 1\n           row [1]]\n      (if (= row-num n)\n        row\n        (recur (inc row-num) (next-row row))))))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":97,"code":"(fn [n]\n  (loop [n n v [1]]\n    (if (= n 1)\n      v\n      (recur (dec n) (flatten [1 [(map #(apply + %) (partition 2 1 v))] 1])))))","user":"56ae214ce4b03c432f18735a"},{"problem":97,"code":"(fn pascal\n  [n]\n  (let [coll [1]\n        f (fn [c] (map #(apply + %) (partition 2 1 (cons 0 (conj (vec c) 0)))))]\n    (last (take n (iterate f coll)))))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [n]\n  (reduce \n    (fn [c k] (conj c (* (/ (- (dec n) k) \n                            (inc k)) \n                         (last c))))\n    [1]\n    (range (dec n))))","problem":97,"user":"4ef49c2c535dced4c769f238"},{"problem":97,"code":"(fn [n]\n  (last (take n (iterate (fn [row]\n                     (map #(apply + %) (partition 2 1 [0] (cons 0 row))))\n                   '(1)))))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn [n]\n    (cond\n        (= n 1) [1]\n        :else\n        (map first (take n (iterate (fn [[x nm dnm]] [(quot (* x nm) dnm) (dec nm) (inc dnm)]) [1 (dec n) 1])))))","problem":97,"user":"4fb12b35e4b081705acca275"},{"problem":97,"code":"(fn pascal [row]\n  (condp = row\n    1 [1]\n    2 [1 1]\n    (let [previous (pascal (dec row))]\n      (cons 1 (conj (mapv + previous (drop 1 previous)) 1)))))","user":"59f4c42ce4b0966464fe6ab6"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (nth\n    (iterate\n      #(vec (map + (concat % [0]) (concat [0] %))) [1]) (dec n)))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":97,"code":"(fn f [n] \n  (->> (iterate \n        (fn [x]\n          (vec (concat \n           [1]\n           (->> (range (dec (count x)))\n                (map #(+ (x %) (x (inc %)))))\n           [1])))\n        [1])\n       (take n)\n       (last)))","user":"5493d908e4b0b312c081ff52"},{"problem":97,"code":"#(reduce (fn [r _] (conj (into [1] (map (partial reduce +) (partition 2 1 r))) 1))\n         [1]\n         (range (dec %)))","user":"506ba58be4b0eda3100c090b"},{"problem":97,"code":"(fn pascals-triangle [n] ;; idea: pad previous row with zeros and calculate pairwise sums\n  (last (take n\n              (iterate\n                (fn next-row [previous-row]\n                  (into []\n                        (map (fn pair-sum [pair] (apply + pair)) ;; replace pairs by the sum of their elements\n                             (partition 2 1 ;; generate pairs of successive entries\n                                        (conj (into [0] previous-row) 0))))) ;; pad row with zeros\n                [1]))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"code":"(fn pas [n]\n  (if (= n 1)\n    [1]\n    (vec\n      (map\n        (partial apply +)\n        (partition 2 1\n          (concat [0] (pas (dec n)) [0]))))))","problem":97,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"code":"(fn [r]\n  (reduce\n    #(conj % (* (last %) (/ (- r %2) %2)))\n    [1]\n    (range 1 r)))","problem":97,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":97,"code":"(fn pascal [n]\n    (case n\n      0 []\n      1 [1]\n      (let [prev (pascal (dec n))]\n      \t(concat [1] (map #(reduce + %) (rest (map vector prev (cons 0 prev)))) [1])\n       )\n     )\n   )","user":"57cf03c0e4b00451144b04f9"},{"problem":97,"code":"(fn pascal-tri\n  ([]\n   (iterate #(concat [1] (map + % (rest %)) [1])\n            [1]))\n  ([n] {:pre [(integer? n), (pos? n)]}\n   (nth (pascal-tri) (dec n))))","user":"4fc6305de4b0ee37620e180b"},{"problem":97,"code":"(fn [r]\n    (letfn [(cell [r c]\n              (cond (= c 1) 1\n                    (= c r) 1\n                    :else (+ (cell (dec r) (dec c))\n                             (cell (dec r) c))))]\n      (map (fn [c] (cell r c)) (range 1 (inc r)))))","user":"564c7c95e4b0284900eef672"},{"problem":97,"code":"(fn [n] (nth (iterate #(cons 1 (concat (map (fn [ts] (apply + ts)) (partition 2 1 %)) '(1))) [1] ) (dec n)))","user":"55f2c898e4b06e875b46ce4b"},{"problem":97,"code":"(fn tri [n]\n  (letfn [(tri+ [xs] (concat [1] (map + xs (rest xs)) [1]))]\n    (cond\n     (= n 1) [1]\n     (> n 1) (tri+ (tri (dec n))))))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn pt [n]\n  (cond\n\t  (= n 1) [1]\n\t  (= n 2) [1 1]\n\t  :else (concat [1] (map #(+ %1 %2) (pt (- n 1)) (rest (pt (- n 1)))) [1])))","problem":97,"user":"4db045b5838c48654951d9be"},{"code":"#(reduce (fn [a x] (conj a (* (last a) (/ (- % x) x)))) [1] (range 1 %))","problem":97,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":97,"code":"(fn f[i]\n  (if (= 1 i)\n    [1]\n    (let [s (f (dec i))]\n      (concat [1] (map #(+ % %2) s (rest s)) [1]))))","user":"56824e1be4b0945ebc182a91"},{"code":"#(letfn [(f [n] \n           (apply * (rest (range (inc n)))))\n         (c [n k]\n           (/ (f n)\n              (f k)\n              (f (- n k))))]\n  (map (fn [k] (c (dec %) k))\n    (range %)))","problem":97,"user":"4ddbfb8a535d02782fcbea00"},{"problem":97,"code":"(fn [n] (nth (iterate (fn [xs] (map +\n                                    (concat [0] xs)\n                                    (concat xs [0])))\n                      [1])\n             (dec n)))","user":"4fcf1755e4b03432b189f40c"},{"code":"(fn [row] (reduce #(conj %1 (* (last %1) (/ (- row %2) %2))) [1] (range 1 row)))","problem":97,"user":"500e91aae4b00fff93030f99"},{"problem":97,"code":"(fn pascal [n]\n  (loop [n-it (dec n)\n         ret-it [1]]\n    (if (= n-it 0)\n      ret-it\n      (recur (dec n-it)\n             (cons 1\n                   (loop [old-it ret-it\n                          new-it []]\n                     (if (empty? old-it)\n                       new-it\n                       (recur (rest old-it)\n                              (conj new-it (apply + (take 2 old-it)))))))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":97,"code":"(fn pascals-triangle [n]\n  ;; The formula gives the row using a 0 based index. The problem assumes the first\n  ;; row is row 1, not 0\n  (let [n   (- n 1)\n        fac #(reduce * (range 1 (inc %)))]\n    (cons 1 (map (fn [k]\n                   (/ (fac n) (* (fac k) (fac (- n k)))))\n                 (range 1 (inc n))))))","user":"58327a08e4b089d5ab817c7c"},{"problem":97,"code":"(fn [row] (if (= row 1) [1]\n                (let [r (- row 1)]\n                (loop [ acc [] n 0]\n                  (if (> n r) acc\n                    (recur (conj acc (/ (reduce * (rest (range (+ 1 r)))) (* (* (reduce * (rest (range (+ 1 (- r n))))) (reduce * (rest (range (+ 1 n)))))))) (inc n)  ))))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n            (loop [[hd & tl] row\n                   final [1]]\n              (if (empty? tl)\n                (conj final 1)\n                (let [next-val (+ hd (first tl))]\n                  (recur tl (conj final next-val))))))]\n    (nth (iterate next-row [1]) (dec n))))","user":"53fb5256e4b0de5c4184857f"},{"problem":97,"code":"(fn [n]\n  (letfn [(step [xs]\n            (-> (into [(first xs)] (map #(reduce +' %1N) (partition 2 1 xs)))\n                (conj (last xs))))]\n    (last (take n (iterate step [1])))))","user":"59e8cd8be4b0249b72820739"},{"problem":97,"code":"(fn [x]\n  (loop [n x\n         r [1]]\n    (if (= 1 n)\n      r\n      (recur\n       (dec n)\n       (->> (map #(apply + %)\n                 (partition 2 1 r))\n            (cons 1)\n            reverse\n            (cons 1))))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":97,"code":"#(nth \n  (iterate \n    (fn [[_ & r :as s]] \n      (concat [1] (map + r s) [1])) \n    [1]) \n  (dec %))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn p [row]\n  (let [n row] \n    (if (= n 1) \n      [1] \n      (let [v (p (dec n))] \n        (cons 1 (conj (vec (map #(+ %1 %2) v (rest v))) 1))))))","problem":97,"user":"4fc7db47e4b0ee37620e182a"},{"problem":97,"code":"(fn pascal [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [pre (pascal (- n 1))\n          left (drop-last 1 pre)\n          right (drop 1 pre)]\n      (conj (vec (conj (map + left right) 1)) 1))\n    ))","user":"53d86564e4b0e771c302546b"},{"problem":97,"code":"(fn pascal [n]\n  (let [next-row (fn [numbers]\n                     (loop [acc [1]\n                            [item & rest-items] numbers]\n                       (cond\n                        (empty? rest-items) (conj acc 1)\n                        :else (recur (conj acc (+ item (first rest-items)))\n                                     rest-items))))]\n          (last (take n (iterate next-row [1])))))","user":"55bbfd60e4b01b9910ae29ed"},{"code":"(fn ptrow [row] \n  (cond \n    (= row 1) [1]\n    (= row 2) [1 1]\n    :default \n      (let [prow (ptrow (dec row))] \n        (apply vector \n          (concat '(1) \n            (map #(+ (first %) (last %)) \n              (map list prow (rest prow))) \n            '(1))))))","problem":97,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":97,"code":"(fn pascals-trap [row]\n  (map (comp last take)\n       (reverse (range 1 (+ 1 row)))\n       (take row (iterate (partial reductions +) (take row (repeat 1))))))","user":"5b7292b3e4b047b03b2036a4"},{"problem":97,"code":"(fn [n]\n  (loop [c 1\n         row [1]]\n    (if (= n c)\n      row\n      (recur (inc c) (cons (first row) (map #(apply + %) (partition 2 1 nil row)))))))","user":"4fbe2cfbe4b081705acca30c"},{"problem":97,"code":"(fn ps [row]\n  (letfn [(iter [lst]\n            (loop [lst lst result [1]]\n              (if (empty? (rest lst))\n                (conj result 1)\n                (recur (rest lst)\n                       (conj result\n                             (apply + (take 2 lst)))))))]\n\n    (loop [m 1\n           result [1]]\n      (if (= m row)\n        result\n        (recur (inc m)\n               (iter result))))))","user":"5895477fe4b00487982d527c"},{"code":"(fn [n] \n  (let [a (dec n) \n        fact #(apply * (map inc (range %)))]\n    (map #(/ (fact a) (fact (- a %)) (fact %)) (range n))))","problem":97,"user":"4f04b66b535dcb61093f6bdd"},{"problem":97,"code":"(fn p [n]\n  (if (= 1 n)\n    [1]\n    (let [prev (p (dec n))\n          new (for [xs (partition 2 1 prev)] (apply + xs))]\n      (flatten (list 1 new 1)))))","user":"56ef077ae4b04a395b9a0459"},{"problem":97,"code":"#(reduce (fn [coll _] (loop [r [] c coll] (if (>= (count r) (count c)) (if (empty? r) [1] (into r (reverse (take (count c) r)))) (recur (conj (if (empty? r) [1] r) (apply + (take 2 c))) (next c))))) [] (range %))","user":"58987ee9e4b00487982d52d2"},{"problem":97,"code":"(fn [k]\n   (for [i (range k)]\n    ((fn pasel [a n]\n      (if (or (= n 0) (= n (dec a))) 1\n          (+ (pasel (dec a) n) (pasel (dec a) (dec n))))) k i)))","user":"5f38eecce4b0574c87022c72"},{"problem":97,"code":"(fn [n]\n  (let [rowfunc \n        (fn [row]\n          ((fn [row result]\n            (let [[a b] row]\n              (if b\n                (recur (rest row) (conj result (+ a b)))\n                (conj result 1))))\n                row [1]))]\n    (loop [lastrow [1]\n           count n]\n      (if (= 0 (- count 1))\n          lastrow\n          (recur (rowfunc lastrow) (dec count))))))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [sp]\n    (nth (iterate\n               #(let\n                  [work-vector (vec (concat [0] %1 [0]))]\n                  (map (partial apply +) (partition 2 1 work-vector))\n                  )\n               '(1)) (dec sp)\n      )\n    )","problem":97,"user":"50ed5d1be4b06330c1f87c37"},{"problem":97,"code":"(fn pt [n]\n  (if (= 1 n)\n    [1]\n    (concat [1]\n            (#(map + (rest %) (butlast %)) (pt (dec n)))\n            [1])))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn pascal [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else\n   (concat [1] (map (partial apply +) (partition 2 1 (pascal (- n 1)))) [1])\n))","problem":97,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [n] \n  (let [f (fn s [r i]\n            (let [dr (dec r)]\n              (if (or (== 0 i) (== dr i))\n                1\n                (+ (s dr (dec i)) (s dr i)))))]\n    (map (partial f n) (range n))))","problem":97,"user":"52b02329e4b0c58976d9acc5"},{"problem":97,"code":"(fn pascal-row [x]\n       (if (= x 1)\n         [1]\n         (let [prev (pascal-row (dec x))]\n           (concat [1] (map #(+ (nth prev %) (nth prev (inc %))) (range (dec(count prev)))) [1]))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":97,"code":"(fn [n]\n    (let [fact (fn [n]\n                 (loop [acc 1, n n]\n                   (if (zero? n)\n                     acc\n                     (recur (* acc n) (dec n)))))\n          binomial (fn [n r]\n                     (/ (fact n) (* (fact r) (fact (- n r)))))]\n      (map #(binomial (dec n) %) (range n))))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn f\n     ([n] (f [1] (dec n)))\n     ([v n] (if (= 0 n) v (f (into [] (map + (conj v 0) (cons 0 v))) (dec n)))))","problem":97,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn pasc [n] \n  (cond \n   (<= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [pv (pasc (dec n))]\n           (vec (map + (conj pv 0) (cons 0 pv))))))","problem":97,"user":"50d8739ae4b01f0871336e68"},{"code":"(fn prob-0097 [n]\n  (nth\n    (iterate\n     (fn [xs] (map #(+ %1 %2) (cons 0 xs) (concat xs [0])))\n     [1])\n  (dec n)))","problem":97,"user":"4f047c07535dcb61093f6bcd"},{"problem":97,"code":"(fn [row]\n  (loop [k 1 result [1]]\n    (if (= k row)\n      result\n      (let [p (* (last result) (/ (- row k) k))]\n        (recur (inc k) (conj result p))))))","user":"564a5a09e4b0284900eef656"},{"code":"(letfn [(foo [x y]\n  (if (empty? y) '()\n   (cons (+ (first x) (first y)) (foo (rest x) (rest y)))))]\n(fn bar [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (concat (list 1) (foo (bar (- n 1)) (rest (bar (- n 1))))\n       (list 1)))))","problem":97,"user":"5078300de4b0fc74642bff66"},{"problem":97,"code":"(fn [n]\n  (letfn [(getbyindex [[x y]]\n                      (if (or (= x 0)\n                              (= y 0)\n                              (= x y)) 1\n                        (+ (getbyindex (list (dec x) (dec y)))\n                           (getbyindex (list x (dec y))))))\n          (comb [s1 s2]\n                (if (or (empty? s1)\n                        (empty? s2)) '() (cons (list (first s1)\n                                                     (first s2)) (comb (rest s1) (rest s2)))))\n          ]\n    (map getbyindex (comb (range n) (repeat (dec n))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":97,"code":"(fn pascals-triangle[n]\n  (when\n    (pos? n)\n    (case n\n      1 '(1)\n      2 '(1 1)\n      (concat\n        [1]\n        (->>\n          n\n          dec\n          pascals-triangle\n          (partition 2 1 ,,,)\n          (map #(apply + %) ,,,))\n        [1]))))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn [n]\n  (loop [v [1] i 1]\n    (if (= i n)\n        v\n        (recur (vec (map #(apply + %) (partition 2 1 (concat [0] (conj v 0) )))) (inc i)))))","problem":97,"user":"4ec132a0535dfed6da9c6da9"},{"problem":97,"code":"(fn pascal [row]\n  (if (= row 1)\n      [1]\n      (let [prev (pascal (- row 1))\n            prev0 (conj (vec prev) 0)]\n        (map + prev0 (reverse prev0)))))","user":"5250a13ee4b0541d1855b839"},{"code":"(fn pascal [n]\n  (let [N (dec n)]\n    (map  #(/  (reduce * (range 1 (inc N)))\n                               (*  (reduce * (range 1 (inc %)))\n                                    (reduce * (range 1 (inc (- N %)))))) (range 0 n))))","problem":97,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [x] (nth (iterate #(map + (cons 0 %) (concat % [0])) [1]) (dec x)))","problem":97,"user":"4eaede1f535d7eef30807329"},{"problem":97,"code":"(fn pascal-triangle-row [n]\n  (let [n        (dec n)\n        fac      (fn [m] (reduce * 1 (range 1 (inc m))))\n        n-over-k (fn [k] (/ (fac n) (fac k) (fac (- n k))))]\n    (map n-over-k (range (inc n)))))","user":"58e37946e4b005f69f193cae"},{"problem":97,"code":"#(nth (iterate (fn [x]\n                 (concat (list (first x))\n                         (map (partial reduce +) (partition 2 1 x))\n                         (list (last x))))\n               (list 1)) (dec %))","user":"594cb88be4b07ddc2dafae6e"},{"code":"(fn [c] (nth (letfn [(f [v] (lazy-seq (let [ n (apply vector (map #(apply + %) (partition 2 1 (cons 0 (conj v 0)))))] (cons n (f n)))))] (cons [1] (f [1]))) (dec c)))","problem":97,"user":"4e836a06535db62dc21a62d5"},{"problem":97,"code":"(fn [x] (nth (iterate #(map +' (conj (vec %) 0) (cons 0 %)) [1]) (dec x)))","user":"569c40cee4b0542e1f8d1462"},{"code":"(fn [n]\n  (letfn [(fac [n] (reduce * (range 1 (inc n))))\n          (bin [n k] (/ (fac n) (* (fac k) (fac (- n k)))))]\n    (map #(bin (dec n) %) (range n))))","problem":97,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":97,"code":"(fn [n]\n  (let [ks (range 1 n)\n        ns (reverse ks)]\n    (reduce\n     (fn [s [n k]]\n       (conj s (/ (* (last s) n) k)))\n     [1]\n     (map vector ns ks))))","user":"594fdfdce4b066ee0a44ae85"},{"problem":97,"code":"(fn pascal-trangle [n]\n  (letfn [(factorial [n]\n            (if (= n 0) 1\n                (reduce * (range 1 (inc n)))))\n          (binomial-coefficient [n k]\n            (/ (factorial n)\n               (* (factorial k) (factorial (- n k)))))]\n    (map #(binomial-coefficient (dec n) %) (range n))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":97,"code":"(fn pascal [row]\n\n  (let [make-row\n        (fn [prev-row]\n          (if (empty? prev-row) [1]\n            (loop [c prev-row accum [1]]\n              (let [[a b] c]\n                (if (nil? b) (conj accum 1)\n                  (recur (rest c) (conj accum (+ a b))))))))]\n\n    (if (= 0 row) nil\n      (loop [curr-row 1 prev-row (make-row nil)]\n        (if (= curr-row row) prev-row\n          (recur (inc curr-row) (make-row prev-row)))))))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":97,"code":"(fn [n] (reduce (fn [acc new] (conj acc (/ (* (- (dec n) (dec (count acc))) (last acc))(inc new)))) [1] (range (dec n))))","user":"52485723e4b05ef8e38e63d2"},{"problem":97,"code":"(partial\n  (fn [row left]\n   (if (= 1 left)\n     row\n     (recur ((fn [p] (-> (map + (rest p) (butlast p)) (conj 1) (vec) (conj 1))) row) (dec left)))) [1])","user":"50f53694e4b057d4c52de881"},{"problem":97,"code":"(fn [row]\n  (loop [r 1 l []]\n    (if (> r row)\n      l\n      (recur (inc r)              \n        (map \n           (fn [n]\n             (if (and (>= (dec n) 0) (< n (count l)))\n                 (+ (nth l (dec n)) (nth l n))\n                 1))\n           (range r))))))","user":"51897709e4b0288ada3dbdaa"},{"problem":97,"code":"(fn \n  [n]\n  (letfn [(a [renglon]\n            (-> (into [(first renglon)] (map #(reduce +' %1N) (partition 2 1 renglon)))\n                (conj (last renglon))))]\n    (last (take n (iterate a [1])))))","user":"59e4e3cbe4b08badc2a0c54a"},{"code":"(fn pascal [n]\n  (letfn [(next-row [xs] (into [] (flatten [1 \n                                            (map #(apply + %)\n                                                 (partition 2 (interleave xs (rest xs))))\n                                            1])))]\n    (nth (iterate next-row [1]) (dec n))))","problem":97,"user":"52d3f666e4b09f7907dd1327"},{"problem":97,"code":"(fn pas [x] \n  (if (= 1 x) \n    [1]\n    (concat \n     [1] \n     (map #(+ (first %) (second %)) (partition 2 1 (pas (dec x)))) \n     [1] \n    )))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (->> (pascal (dec n))\n         (partition-all 2 1)\n         (map #(reduce + %))\n         (concat [1]))))","user":"57d0e185e4b0bd073c202360"},{"problem":97,"code":"(fn [n] \n(nth (iterate #(map (partial apply +') (partition 2 1 (concat [0] % [0]))) [1]) (dec n)))","user":"551c66dae4b07993ea3788de"},{"code":"(fn [n]\n  (let [fac (fn [F] (reduce * (range 1 (inc F))))\n        pval (fn [N R] (/ (fac N) (* (fac R) (fac (- N R)))))]\n    (map (partial pval (dec n)) (range n))))","problem":97,"user":"53806e5be4b06839e8705ec1"},{"problem":97,"code":"(fn [r]\n  ( loop [i 1\n          lastvec [1]]\n   \t(cond\n     (= i r) lastvec\n     :else \n     \t(let [curvec (vec (repeat (inc i) 1))\n              updvec \n              \t(\n                 loop [newvec curvec\n                       j 1]\n                 \t(\n                     cond\n                     \t(= j (dec (count newvec))) newvec\n                     \t:else (recur (assoc newvec j (+ (get lastvec (dec j)) (get lastvec j)  )  ) (inc j))\n                     )                               \n                 )\n              ]\n         \t(recur (inc i) updvec)\n         )\n     )\n   ) \n )","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn [n] \n   (if (= n 1)\n     [1]\n     (loop [r [1 1] row 2]\n       (if (= row n)\n         r\n         (recur (concat\n                  [1] \n                  (:r (reduce #(assoc %1 :r (conj (get %1 :r) (+ (get %1 :l) %2)):l %2) {:l 1 :r []} (rest r)))\n                  [1]) (inc row))))))","problem":97,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn f [x]\n   (cond\n    (<= x 1) [1]\n    (= x 2) [1 1]\n    :else (let [prev (f (dec x))\n                curr (vec (map + prev (rest prev)))\n                res (cons 1 (conj curr 1))]\n            res)))","problem":97,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [r] (loop [c 1 s [1]] (if (= (count s) r) s (recur (inc c) (conj s (/ (* (last s) (- r c)) c))))))","problem":97,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn pascal-triangle-row [n]\n  (let [adj-sums #(map + % (next %))\n        next-row #(concat [1] (adj-sums %) [1])\n        rows (iterate next-row [1])]\n    (nth rows (dec n))))","problem":97,"user":"508923d5e4b06d8254e936e8"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n          (iterate \n           #(concat [1] (map +' % (rest %)) [1])\n           '(1)))))","user":"53065acbe4b02e8216869792"},{"problem":97,"code":"(fn [x] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (- x 1)))","user":"558466fce4b04192f3441eee"},{"problem":97,"code":"(fn f\n  ([n] (if (= n 1)\n         [1]\n         (if (= n 2)\n         \t[1 1]\n         \t(f [1 1] (- n 2)))))\n  ([r n]\n     (if (= 0 n)\n       r\n       (f (concat [1] (rest (first (reduce\n                     (fn [[ps q] r] [(conj ps (+ q r)) r])\n                     [[1] (first r)]\n                     (rest r))))\n                  [1])\n          (- n 1)))))","user":"56483562e4b0284900eef629"},{"code":"(fn tal [x] \n  (if (= 1 x) '(1)\n    ((fn til [y p]\n       (if (empty? y) '(1)\n       (cons (+ p (first y)) (til (rest y) (first y))))) (tal (dec x)) 0)))","problem":97,"user":"4f664d0fe4b07046d9f4ef56"},{"problem":97,"code":"(fn p-97\n  ([n] (p-97 n [1]))\n   ([n acc] (if (= n 1) (vec acc)\n                        (p-97 (dec n) \n                            (concat '(1)\n                                    (map (fn [i] (+ (nth acc i) (nth acc (inc i))))\n                                         (range (dec (count acc))))\n                               '(1))))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":97,"code":"(fn pascal [n]\n  (loop [i 0\n         row []]\n    (if (<= n i)\n      row\n      (if (<= i 1)\n        (recur (inc i) (conj row 1))\n        (recur (inc i) (conj (into [1] ((fn sum-prev-row [x] \n                                          (loop [p x\n                                                 s []]\n                                            (if (> (count p) 1)\n                                              (recur (rest p) (conj s (+ (first p) (first (rest p)))))\n                                              s))) row)) 1))))))","user":"56a3c89ae4b0542e1f8d14cf"},{"code":"(fn pascals [n]\n  (let [pascal (fn pascal [s]\n    (mapv (partial apply +') (partition 2 1 (conj (into [0] s) 0))))]\n    (nth (cons [1] (iterate pascal [1])) n)\n  ))","problem":97,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":97,"code":"(fn [row] (if (< row 3) (repeat row 1)\n              (loop [n 2 data [1 1]]\n                (if (= row n) data\n                    (recur (inc n) (concat [1] (for [mid (partition 2 1 data)] (reduce + mid)) [1]))))))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn [n]\n   (let [pascal (fn [sx] (apply (fn\n                              ([a] [1 1])\n                              ([a b] [1 2 1])\n                              ([a b & args]\n                                 (loop [[a b & rst :as sx] (concat [a b] args)\n                                        out []]\n                                   (if (nil? b)\n                                     (conj (vec (cons 1 out)) 1)\n                                     (recur (next sx) (conj out (+ a b))))))\n                             ) sx))]\n     (loop [tab [1]\n             left (dec n)]\n       (if (zero? left)\n         tab\n         (recur (pascal tab) (dec left))))\n     ))","problem":97,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":97,"code":"(fn pascal [n]\n   (if (= 1 n)\n     [1]\n     (mapv\n      (partial reduce +)\n      (let [pn-1 (pascal (dec n))]\n        (map vector (cons 0 pn-1) (conj pn-1 0))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"#((fn f [n p]\n          (letfn [(s [r] \n                    (if (= (.size r) 1)\n                    r\n                    (cons (+ (first r) (second r))\n                          (s (rest r)))))]\n           (if (= n 1)\n              p\n              (f (dec n) (cons (first p) (s p)))))\n  ) % `(1))","problem":97,"user":"4f404dcee4b0e243712b1fb0"},{"problem":97,"code":"(fn pascal [n]\n  (let [next-row (fn [row]\n                   (loop [[x & xs] row\n                          result [1]]\n                     (cond\n                       (nil? x) result\n                       (nil? xs) (conj result 1)\n                       :default (recur xs (conj result (+ x (first xs)))))))]\n    (last (take n (iterate next-row [1])))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (let [l (pascal (dec n))]\n  \t\t(concat [1] (map + l (rest l)) [1]) )\n   \n   )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":97,"code":"(fn y [n]\n  (loop [c 1\n         se [1]]\n    (if (= c n)\n      se\n      (recur (inc c) ((fn s [se]\n                        (loop [s [1] \n                               r se]\n                          (if (= (count r) 1)\n                            (conj s 1)\n                            (recur \n                              (conj s (+ (first r) (second r)))\n                              (rest r))))) se)))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":97,"code":"(fn [i]\n  (letfn [(p [i j] \n             (if (or (= i j) (= 0 j))\n               1\n               (+ (p (dec i) (dec j))\n                  (p (dec i) j))))]\n    (map (partial p (dec i)) (range i))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":97,"code":"(fn [n] \n  (reduce \n   (fn [x _] (concat [1] (map #(apply + %) (partition 2 1 x)) [1])) \n   [1] \n   (range (dec n))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [n]\n  (for [k (range n)]\n    (let [f (fn [m]\n              (reduce * (range 1 (inc m))))]\n      (/ (f (dec n)) (f k) (f (- (dec n) k))))))","problem":97,"user":"51899891e4b0288ada3dbdab"},{"problem":97,"code":"(partial (fn [p n]\n           (if (= 1 n)\n             p\n             (recur (concat [1]\n                            (map #(reduce + %) (partition 2 1 p))\n                            [1])\n                    (dec n)))) [1])","user":"5ccf2dc3e4b0ccb0619628c2"},{"problem":97,"code":"(fn pascal\n  [n]\n  (if (= 1 n)\n    [1]\n    (let [previous (pascal (dec n))]\n      (loop [current-row previous\n             ans         [1]]\n        (let [i-minus (first current-row)\n              i       (second current-row)]\n          (if (or (nil? i-minus) (nil? i))\n            (conj ans 1)\n            (recur (into [] (rest current-row)) (conj ans (+ i-minus i)))))))))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"problem":97,"code":"(fn [n]\n  (loop [n (dec n) r [1]]\n    (if (< n 1)\n      r\n      (recur\n        (dec n) \n        (loop [[a & s] r t [1]]\n          (if (empty? s)\n            (conj t 1)\n            (recur\n              s\n              (conj t (+ a (first s))))))))))","user":"556159fae4b0c656e3ff17c7"},{"problem":97,"code":"#(loop [r [1]\n       n %]\n  (if (= n 1)\n    r\n    (recur (map + (concat [0] r) (concat r [0]))\n           (dec n))))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn f [n] (or (and (< n 3) (repeat n 1))\n(conj \n  (reverse (conj (map (partial apply +)\n                      (partition 2 1 (f (dec n))))\n          1)) 1)))","problem":97,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn [row] \n  (nth \n    (take row \n          (iterate \n            (fn [col] \n              (concat [(first col)] \n                      (map #(apply + %) (partition 2 1 col) ) \n                      [(last col)] )) '(1)) ) \n    (dec row) ))","problem":97,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn pt [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (loop [i 2\n           row [1 1]]\n      (if (= n i)\n        row\n        (let [new-row (concat [1] (map (partial reduce +) (partition 2 1 row)) [1])]\n                              (recur (inc i) new-row)\n                              )))))","problem":97,"user":"51281b25e4b03a34742b4304"},{"code":"(fn [n] (nth (iterate  #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","problem":97,"user":"52b577c9e4b0c58976d9ad39"},{"code":"(fn pascal [n]\n  (let [fact #(apply * (range 2 (inc %)))\n        n! (fact (dec n))]\n    (map #(/ n! (* (fact %) (fact (- (dec n) %))))\n      (range 0 n ))))","problem":97,"user":"50ef96a1e4b0bdaecbb47d9d"},{"problem":97,"code":"#(nth\n  (iterate\n   (fn [v] (map + (concat [0] v) (concat v [0])))\n   [1])\n  (dec %))","user":"559b2ad1e4b066d22e731f4e"},{"code":"(fn pascals-triangle\n  [n]\n  (letfn [(! [n] (reduce * (range 1 (inc n))))\n          (nCr [n r] (/ (! n) (* (! r) (! (- n r)))))]\n    (map (partial nCr (dec n)) (range 0 n))))","problem":97,"user":"4e50b67b535dc968683fc4ed"},{"problem":97,"code":"(fn [nr]\n  (nth (iterate #(map + (concat [0] %) (concat % [0])) `(1)) (dec nr)))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn [n]\n  (nth (iterate #(map + (concat [0] %) (concat % [0])) [1]) (dec n)))","problem":97,"user":"4ff304f4e4b0678c553fc343"},{"problem":97,"code":"(fn [n]\n (last\n  (take\n   n\n   (iterate\n    (fn [z]\n     (concat\n      [1] \n      (map #(+ % %2) z (rest z)) [1]))\n      [1]))))","user":"5499e23de4b03163384f4706"},{"problem":97,"code":"(fn [n]\n  (letfn [(pascal [x y]\n                  (if (or (= x 1) (= x y)) 1\n                    (+ (pascal x (dec y)) (pascal (dec x) (dec y)))))]\n    (for [x (range 1 (inc n))] (pascal x n))))","user":"4f16d3fd535d64f60314644e"},{"problem":97,"code":"(fn [x]\n\t(loop [pos 1 coll [1]]\n\t\t(if (= x pos)\n\t\t\tcoll\n\t\t\t(recur (inc pos) (conj coll (/ (* (last coll) (- x pos)) pos) )))))","user":"54ce541de4b057c6fda3a2ac"},{"problem":97,"code":"(fn pascal [n]\n  (let [comb\n        (fn [n r]\n          (/ (apply * (range (inc (- n r)) (inc n))) (apply * (range 1 (inc r)))))]\n    (for [x (range n)] (comb (dec n) x))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":97,"code":"(fn [n]\n  (let [triangle (letfn [(grow [row] (concat [1] (map (partial apply +) (partition 2 1 row)) [1]))]\n                   (iterate grow (list 1)))]\n    (nth triangle (dec n))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn p [n]\r\n  (if (= n 1)\r\n    [1]\r\n    (concat [1] (map #(reduce + %) (partition 2 1 (p (dec n)))) [1])))","problem":97,"user":"5012aefce4b0c8732600222a"},{"problem":97,"code":"(fn [x]\n  (map (fn c [[n k]]\n         (let [prdn #(apply * (range 2 (inc %)))\n               nn (dec n)\n               pn (prdn nn)\n               pk (prdn k)\n               pnk (prdn (- nn k))]\n           (quot pn (* pk pnk))))\n       (map vector\n            (repeat x)\n            (range x))))","user":"55c49394e4b0e31453f6499e"},{"problem":97,"code":"(fn [v]\n  (case v\n    1 [1]\n    2 [1 1]\n    3 [1 2 1]\n    4 [1 3 3 1]\n    5 [1 4 6 4 1]\n    11 [1 10 45 120 210 252 210 120 45 10 1]))","user":"53c6db22e4b00fb29b2212a2"},{"code":"(fn [n] (reduce #(conj %1 (* (last %) (/ (- n %2) %2))) [1] (range 1 n)))","problem":97,"user":"50dfb660e4b061dbdced7228"},{"problem":97,"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    [1]\n    (let [prev (pascal-triangle (- n 1))]\n      (loop [ys prev\n             out []]\n        (let [row (take 2 ys)\n              val (cond (= 2 (count row)) (+ (first row) (last row))\n                        :else nil)]\n          (print ys)\n          (if (nil? val)\n            (vec (concat '(1) out '(1)))\n            (recur (drop 1 ys) (conj out val))))))))","user":"5ad3d730e4b0ea6055cfabc8"},{"code":"(fn [n]\n  (reductions #(quot (* %1 (- n %2)) %2) 1 (range 1 n)))","problem":97,"user":"4f3a979de4b0e243712b1f10"},{"problem":97,"code":"(fn[n]\n (letfn [(gen-coor[n]  (map (fn [i] [n i]) (range 0 (+ 1 n))))\n         ( get-neighbours [[r c]] [[(- r 1) (- c 1)] [(- r 1) c]])\n         (from-map [mp k] ( mp k 0))\n         (get-value [mp [r c]]\n           (cond\n             (= c 0) [[r c] 1]\n             (= r c) [[r c] 1]\n             :else [[r c]  (reduce + (map (partial from-map mp) (get-neighbours [r c])) )]))\n         (gen-row [mp n] (into {} (map (partial get-value mp) (gen-coor n)))) ] \n   (loop [cnt 0 acc {[0 0] 1}]\n     (if (= (+ 0 n) cnt)\n       (vals (sort  acc))\n       (recur (inc cnt) (gen-row acc cnt))))))","user":"5832be57e4b089d5ab817c86"},{"problem":97,"code":"(fn [n]\n   (let [row (fn [p-row]\n               (-> (reduce (fn [[c l] e]\n                            [(conj c (+ l e)) e])\n                          [[] 0]\n                          p-row)\n                  first\n                  (conj 1)))]\n     (last (take n (iterate row [1])))))","user":"55895eade4b059ccff29b202"},{"problem":97,"code":"(fn pasrow [n]\n  (if (= n 1)\n    [1]\n    (into [1]\n          (conj (mapv (partial reduce +) \n                               (partition 2 1 (pasrow (dec n))))\n                1))))","user":"5339c105e4b0e30313ee6cae"},{"problem":97,"code":"(fn [n]\n  (loop [i 1 s []]\n    (if (> i n)\n      (last s)\n      (recur (inc i)\n             (cond\n              (= i 1) (conj s [1])\n              (= i 2) (conj s [1 1])\n              (> i 2) (conj s (vec (concat\n                                    [1]\n                                    (loop [s1 (s (- i 2)) s2 []]\n                                      (if (= 1 (count s1))\n                                        s2\n                                        (recur (rest s1)\n                                               (conj s2 (+ (first s1) (second s1))))))\n                                    [1]))))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn pascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","problem":97,"user":"523c6451e4b07becd5be2222"},{"code":"(fn [x] (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec x)))","problem":97,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn [n]\n  (if (< n 1)\n    []\n    (loop [accu '(1)\n     n n]\n      (if (< n 2)\n\t(into [] accu)\n\t(recur\n\t (map + (cons 0 accu) (reverse (cons 0 accu)))\n\t (- n 1))))))","problem":97,"user":"4e82c062535db62dc21a62cc"},{"code":"#(let [n (dec %) factorial (fn [x] (reduce * (range 1 (inc x))))]\n  (map\n    (fn [r]\n      (/ (factorial n) (* (factorial r) (factorial (- n r)))))\n    (range (inc n))))","problem":97,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn pas [r]\n  (if (= r 1)\n    [1]\n    (second (reduce #(vector %2\n                             (conj (second %)\n                                   (+ (first %) %2)))\n                    [0 []]\n                    (conj (pas (dec r)) 0)))))","problem":97,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn pascal [row]\n  (if (= row 1) \n    [1]\n    (concat [1] (map #(apply + %) \n                     (partition 2 1 \n                                (pascal (dec row)))) [1])))","problem":97,"user":"50310b8be4b05b7df5a0b84d"},{"problem":97,"code":"(fn ptri\n  [n]\n  (letfn [(build-sum-list\n            [coll]\n            (loop [coll2 coll\n                   res [(first coll)]]\n              (if (seq coll2)\n                (let [x (first coll2)\n                      y (second coll2)]\n                  (if y\n                    (recur (rest coll2) (conj res (+ x y)))\n                    (recur (rest coll2) (conj res x))))\n                res)))]\n    (loop [x 0\n         res []]\n      (if (< x n)\n        (if (empty? res)\n          (recur (inc x) [1])\n          (recur (inc x) (build-sum-list res)))\n        res))))","user":"5f6e23e6e4b02876ed9fd064"},{"code":"(fn [row]\n  (when (>= row 0)\n    (letfn [(fac [n] (if (= n 0) 1 (reduce * (range 1N (inc n)))))\n            (comb [n k] (when (>= n k) (/ (fac n) (* (fac k) (fac (- n k))))))]\n      (map (partial comb (dec row)) (range row)))))","problem":97,"user":"533b1dc4e4b0e30313ee6cc7"},{"problem":97,"code":"(fn[n](nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","user":"53e9681de4b036ad0777e4a4"},{"problem":97,"code":"(fn [t] (last (take t (iterate (fn [s] (concat [1] (map (fn [x] (apply + x)) (partition 2 1 s)) [1])) [1]))))","user":"5a84cf8de4b00b71e582a095"},{"code":"(fn [n]\n    (nth (iterate #(concat [1] (map + % (rest %)) [1]) [1]) (dec n)))","problem":97,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":97,"code":"(fn [rows]\n  (let [counter 0\n        result []\n        build-row (fn [row]\n                    (loop [result []\n                           col row]\n                      (cond\n                        (= (count row) 0) [1]\n                        (or (empty? col) (nil? (second col))) (apply conj [1] (conj result 1))\n                        :else(recur (conj result (+ (first col) (second col))) (rest col)))))]\n    (loop [counter 0 prev-row []]\n      (cond\n        (= rows counter) prev-row\n        :else (recur (inc counter) (build-row prev-row))))))","user":"5a912080e4b002d099cae6ea"},{"problem":97,"code":"(fn pasc [n]\n (cond\n  (= 1 n) [1]\n  (= 2 n) [1 1]\n  :else (loop [[x y & r] (pasc (dec n))\n               s []]\n         (if-not r\n           (cons 1 (conj s (+ x y) 1))\n           (recur (cons y r) (conj s (+ x y)))))))","user":"5e3071abe4b05b4b01516213"},{"problem":97,"code":"(fn [n]\n   (loop [ns 0\n          result []]\n     (if (= ns n)\n       result\n       (recur (inc ns)\n              (cond\n                (= ns 0)\n                [1]\n                (= ns 1)\n                [1 1]\n                (> ns 1 )\n                (conj\n                 (vec\n                  (conj (map #(apply + %) (partition 2 1 result)) 1)) 1))))))","user":"5913fde8e4b0163c97b36f13"},{"problem":97,"code":"(fn lstPascal [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat [1]\n                  (map #(apply + %1) (partition 2 1 (lstPascal (dec n))))\n                  [1])))","user":"5c82db41e4b0c8042a70ce42"},{"code":"(fn pascal [n]\r\n  (letfn [(sums [xs]\r\n\t\t(loop [r [] a (first xs) b (next xs)]\r\n\t\t  (if (seq b)\r\n\t\t    (recur (conj r (+ a (first b))) (first b) (next b))\r\n\t\t    r)))]\r\n  \t   (cond (<= n 0) []\r\n\t\t  (= n 1) [1]\r\n\t      (= n 2) [1 1]\r\n\t      :else (flatten [ 1 (sums (pascal (dec n))) 1]))))","problem":97,"user":"4dd52e29535dae65d5c462e5"},{"problem":97,"code":"(fn pasc [x] (if (= x 1) [1] (let [ant (pasc (dec x)) ] (concat [1] (map + ant (rest ant)) [1]) )  ) )","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn pt [n]\n  (if (= n 1)\n    [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pt (dec n)))) [1])))","problem":97,"user":"50361b6be4b0fbe0a74d26be"},{"code":"(fn [n] (last (take n (iterate #(let [x (conj % 0)] (map + x (reverse x))) [1]))))","problem":97,"user":"4db5082e535d87e67b28fe03"},{"code":"(fn p-triangle[row] \n    (if(= row 1) \n      [1] \n      (let[last-row (p-triangle (dec row))] \n        (conj \n          (loop[lr last-row le 0 r []] \n            (if(empty? lr) \n              r \n              (let[e (first lr)] \n                (recur (rest lr) e (conj r (+ le e)))\n                )\n              )\n            ) \n          1\n          )\n        )\n      )\n    )","problem":97,"user":"52e68e61e4b09f7907dd1479"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal (dec n) [1]))\n  ([n prev]\n    (if (zero? n)\n      prev\n      (let [cur (mapv + (conj prev 0) (cons 0 prev))]\n        (pascal (dec n) cur)))))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [n]\n   (nth (iterate\n          (fn [prev]\n            (vec\n              (concat\n                [1]\n                (map #(reduce + %) (partition 2 1 [0] prev))\n                )))\n          [1])\n        (- n 1)))","problem":97,"user":"534c1c64e4b084c2834f4a8a"},{"code":"#(first ((fn pasc [num]\n  (letfn [(vec [x] (if (= 1 (count x)) [1] (cons (+ (first x) (second x)) (vec (rest x)))))]\n    (if (= 1 num) [[1]] (cons (cons 1 (vec (first (pasc (dec num))))) (pasc (dec num)))))) %1))","problem":97,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":97,"code":"(fn [n]\n  (let [parse (fn p [l res]\n    \t(if (empty? l)\n      \tres\n      \t(p (rest l) (do\n                        (if (> (count l) 1)\n                          (conj res (+ (first l) (second l)))\n                          (conj res 1))))))]\n  \t\t(loop [i n\n        \t arr [[1]]]\n    \t\t(if (zero? i)\n      \t(last (take n arr))\n      \t(recur (dec i) (conj arr (parse (last arr) [1])))))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"code":"(fn pascal [n]\n  (-> #(->> (cons 0 (conj % 0))\n            (partition 2 1)\n            (mapv (partial apply +)))\n      (iterate [1])\n      (nth (dec n))))","problem":97,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn prow [r]\n  (let [row (dec r)]\n    (map (fn [x] ((fn pcol [row col]\n    \t              (if (or (zero? col) (= row col))\n        \t            1\n\t\t\t\t\t    (* (pcol row (dec col)) (/ (- (inc row) col) col)))) row x))\n       \t(range (inc row)))))","problem":97,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn pascal [n] (if (= n 1) [1] (map #(apply + %) (partition 2 1 (concat [0] (pascal (- n 1)) [0])))))","problem":97,"user":"5290257ae4b0239c8a67af03"},{"problem":97,"code":"(fn [rownum]\n  (letfn [(pascal-row [row]\n            (flatten [1 (map #(reduce + %) (partition 2 1 row)) 1]))]\n    (last (take rownum (iterate pascal-row [1])))))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn pascals [x] (if (= 1 x) \n                  [1]\n                  (let [previous (pascals (dec x))]\n                    (flatten [1 (map + previous (rest previous)) 1])\n                    )))","problem":97,"user":"510c123be4b078ea7192110e"},{"problem":97,"code":"(fn tri [n]\n  (nth (iterate (fn [lst] (mapv + (cons 0 lst) (conj lst 0))) [1]) (dec n))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":97,"code":"(fn pascal [row]\n  (if (= row 1) [1]\n      (if (= row 2) [1 1]\n          (conj (reverse (conj (for [[a b] (partition 2 1 (pascal (dec row)))] (+ a b)) 1)) 1))))","user":"504f5804e4b0a02f9cffde72"},{"problem":97,"code":"#(nth (iterate \n       (fn [s]\n         (let [es (cons 0 (conj s 0))]\n           (mapv + es (rest es))))\n       [1])\n      (dec %))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"(fn pascal [s]\n      (if (= s 1)\n        [1]\n        (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec s)))) [1])\n        )\n      )","problem":97,"user":"51e28063e4b08e53a149f0f2"},{"problem":97,"code":"(fn pippo\n  ([n] (pippo n '(1)))\n  ([n acc]\n   (if (= n 1)\n     acc\n     (recur (dec n) (concat [1] (map + acc (concat (rest acc) '(0))))))))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":97,"code":"(fn [n]\n  (nth (iterate #(into [1] (conj (mapv (partial apply +) (partition 2 1 %)) 1)) [1])\n                (dec n)))","user":"51dafedee4b09f6bc204eee2"},{"problem":97,"code":"#(into [] (map (fn [k]\n                 (/ (reduce * (range (- % k) %))\n                    (reduce * (range 1 (inc k)))))\n               (range 0 %)))","user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn f [n]\n  (if (= 1 n) [1]\n    (map #(apply + %) (partition 2 1 (concat [0] (f (dec n)) [0])))\n  )\n)","problem":97,"user":"53244c9de4b09d4e7a9b54db"},{"code":"(fn pascal [n] \n  (let [n (- n 1) \n        fact (fn [n] (reduce * (range 1 (+ n 1))))\n        factN (fact n)]\n    (map #(/ factN (* (fact %) (fact (- n %)))) (range (+ n 1)))\n    )\n  )","problem":97,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn tri  \n  [x]\n  (reduce\n   (fn [t n]\n     (loop [p (first t) r (next t) new [1]]\n       (if r\n         (recur (first r) (next r) (conj new (+ p (first r))))\n         (conj new 1))))\n   [1]\n   (range 1 x)))","problem":97,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1) [1]\n    (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1])))","user":"5f648ef1e4b02876ed9fd01b"},{"code":"#(letfn [\n           (f [in]\n           (loop [xi in xo [1]]\n             (if (< (count xi) 2)\n               (conj xo 1)\n               (recur \n                 (rest xi)\n                 (conj xo (+ (first xi) (second xi)))\n               ))))]\n    (nth (iterate f [1]) (dec %)))","problem":97,"user":"4ef4e5fa535dced4c769f242"},{"problem":97,"code":"(fn [n] (letfn [(pasc-rec [prev]\n                    (for [[x y] (partition 2 1 (concat [0] prev [0]))]\n                      (+ x y)))]\n            (nth (iterate pasc-rec [1]) (- n 1))\n            )\n    )","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":97,"code":"(fn pascals [n] \n  (last (reduce \n    (fn [r row-no]\n      (let [i (dec row-no)]\n        (conj r (into [] (map #(if (or (zero? %) (= i %)) 1\n                        (let [friends (map \n                                        (fn [cords] (get-in r cords 0))\n                                        (map (fn [cos] (map + [i %] cos)) [[-1 -1] [-1 0]]))]\n                  (apply + friends)))\n             (range row-no))))))\n    [] (range 1 (inc n)))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":97,"code":"#(last (take % (iterate (fn f\n             ([x] (concat [1] (lazy-seq (f (apply + (take 2 x)) (rest x ) ) ) [1]))\n             ([a x] (if (seq x) (cons a (lazy-seq (f (apply + (take 2 x)) (rest x))))))\n             )  [1])) )","user":"564b1ff8e4b0284900eef663"},{"code":"(fn p [x]\n  (letfn [(f [n k]\n             (if (or (= k 1) (= k n))\n               1\n               (+ (f (dec n) (dec k))\n                  (f (dec n) k))))]\n    (map #(apply f %)\n         (map-indexed #(vector %2 (inc %1)) (repeat x x)))))","problem":97,"user":"4eec82fe535d93acb0a668ae"},{"problem":97,"code":"(fn triangle [n]\n  (if (= 1 n)\n    (list 1)\n    (let [previous-row (triangle (- n 1))\n          inside (map + previous-row (rest previous-row))]\n      `(1 ~@inside 1))))\n\n;      (flatten (list 1 inside 1)))))","user":"5553b924e4b0deb715856e06"},{"problem":97,"code":"#(let [step (fn [v]\n                     (let [v (vec v)\n                           len (count v)\n                           get0 (fn [[x y]] (+' (get v x 0)\n                                                (get v y 0)))\n                           series (partition-all 2 1 (range -1 len))]\n                       (if (zero? len)\n                         []\n                         (map get0 series))))]\n          (last (take % (iterate step [1]))))","user":"51e3a549e4b0c611d6113e47"},{"code":"#(nth (iterate (fn [s] (concat [1] (for [x (partition 2 1 s) ] (apply + x) ) [1])) [1] ) (dec %) )","problem":97,"user":"4ee7d177535d93acb0a6686f"},{"problem":97,"code":"(fn tri [a]\n  (if (= a 1)\n    [1]\n    (let [t (tri (dec a))\n          t-nth #(nth t % 0)]\n      (->> (range a)\n           (map (juxt (comp t-nth dec) t-nth))\n           (map #(reduce + %))))))","user":"53ea5851e4b036ad0777e4e4"},{"problem":97,"code":"(fn pt [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (map + \n              (concat [0] (pt (dec n)))\n              (concat (pt (dec n)) [0]))\n   ))","user":"57db2369e4b0bd073c20241f"},{"code":"(fn [step]\n    (let [c (fn [n r]\n     (let [f (fn fact[k](reduce * (range 1 (inc k))))]\n       (/ (f n) (* (f r) (f (- n r))))))]\n      (map (fn[idx](c (dec step) idx))  (range 0 step))))","problem":97,"user":"4fb86dc9e4b081705acca2d8"},{"problem":97,"code":"(fn [row-num]\n  (let [fact #(reduce * 1 (range 1 (inc %1)))\n        real-row (dec row-num)]\n    (map (fn [col] (/\n                      (fact real-row)\n                      (*\n                        (fact col)\n                        (fact (- real-row col)))))\n         (range 0 row-num))))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [n]\n  (letfn [(f [x y]\n           (cond\n            (= x 1) 1\n            (> x y) 0\n            :else (+ (f x (dec y)) (f (dec x) (dec y)))))]\n      (map #(f % n) (range 1 (inc n)))))","problem":97,"user":"52f4fae4e4b05e3f0be25f27"},{"code":"(fn[n] (last (take n (iterate (fn [r] (vec (concat [1] (map #(apply + %) (partition 2 1 r)) [1] ))) [1]))))","problem":97,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn pt [y] (nth (iterate #(if (empty? %)\r\n    [1]\r\n    (concat [1] (map + % (rest %)) [1])\r\n    ) [1]) (dec  y)))","problem":97,"user":"4febb4dae4b0681fd128dc98"},{"problem":97,"code":"(fn [n] (loop [n (dec n)\n                 k 1\n                 result [1]]\n            (if (> k n)\n              result\n              (recur n (inc k) (conj result (* (last result) (/ (- (+ n 1) k) k)))))))","user":"581dad0ae4b04b46fc4b0f17"},{"problem":97,"code":"#(get [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1] [1 5 10 10 5 1] 7 8 9 10 [1 10 45 120 210 252 210 120 45 10 1]] (dec %))","user":"5eff339ae4b0cf489e8d7f0c"},{"code":"(fn pascal [t]\n  (loop [c 1 r [1]]\n    (if (= c t)\n      r\n      (recur (inc c) (map + (into (vec r) [0]) (into [0] r))))))","problem":97,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":97,"code":"(fn [n] \n       (if (= 1 n)\n         '(1)\n       (nth (let [next-one\n                  (fn [x] ( let [ middle \n                                 (fn [acc [x1 & r]]\n                                   (if (empty? r)\n                                     acc\n                                     (recur (cons (+ x1 (first r)) acc) r)))]\n                            (cons 1 (middle '(1) x))))]\n              (iterate next-one [])) (dec n))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":97,"code":"(fn pascal-line [n]\n  (let [inner-line (fn inner-line [s]\n                      (if (empty? (rest s))\n                        '(1)\n                        (cons (+ (first s) (second s)) (inner-line (rest s)))))\n        genline       (fn [s]\n                        (cons 1 (inner-line s)))]\n  (if (= n 1)\n    (list 1)\n    (genline (pascal-line (dec n))))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [in-row]\n  (let [row (dec in-row)\n        fac (fn [n] (if (<= n 0) 1 (reduce * (range 1 (inc n)))))\n        numerator (fac row)]\n    (vec (map #(/ numerator (* (fac %) (fac (- row %)))) \n              (range 0 (inc row))))))","problem":97,"user":"4ef4ab95535dced4c769f23b"},{"problem":97,"code":"(fn [n]\n  (letfn [(next-row [row]\n    (let [pairs (map vector row (rest row))]\n      (concat [1] (map #(apply + %) pairs) [1])))]\n    (nth (iterate next-row [1]) (dec n))))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [n]\r\n       (nth (iterate\r\n              #(cond\r\n                 (empty? %) [1]\r\n                 (= (count %) 1) [1 1]\r\n                 :else (concat\r\n                         [1]\r\n                         (map (fn [x] (apply + x)) (partition 2 1 %))\r\n                         [1]))\r\n              [1])\r\n         (dec n)))","problem":97,"user":"4deb529a535d08e6dec9fe04"},{"problem":97,"code":"(fn [n]\n  (let [nxt (fn [row]\n              (loop [in row out '()]\n                (if (empty? (rest in))\n                  out\n                  (recur (rest in) (conj out (+ (first in) (second in)))))))\n        pad #(conj (reverse (conj (nxt %) 1)) 1)]\n    (loop [i 1 out [1]]\n      (if (= i n)\n        out\n        (recur (inc i) (pad out))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":97,"code":"(fn [n]\n   (last (take n (iterate #(map +' `(~@% 0) `(0 ~@%)) [1]))))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"(fn [n]\n  (let [f #(apply * (range 1 (inc %)))\n        c #(/ (f (dec n)) (* (f %) (f (- (dec n) %))))]\n    (map c (range n))))","problem":97,"user":"4ef77c82535dced4c769f253"},{"code":"(fn [n] (nth (iterate #(-> (map + % (rest %)) (conj 1) vec (conj 1)) [1]) (dec n)))","problem":97,"user":"5092fe10e4b097f48cc3857e"},{"problem":97,"code":"(fn f ([n] (if (= 1 n) [1]\n                   (let [p (f (dec n))]\n                     (vec (map + (conj p 0) (into [0] p)))))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":97,"code":"(fn PASC [n]\n  (loop \n    [i 1 v [1]]\n    (if\n      (= i n)\n      v\n      (recur \n       (inc i) \n       (concat [1] (map + (reverse (rest v)) (rest v)) [1] ))\n      )\n    )\n  )","user":"58334d18e4b089d5ab817c97"},{"code":"(fn self [n]\n  (if (= n 1)\n    [1]\n    (let [s (self (dec n))]\n      (into [] (map + (conj s 0) (into [0] s))))))","problem":97,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":97,"code":"(fn [x] (cond\n          (= x 1) [1]\n          (= x 2) [1 1]\n          (= x 3) [1 2 1]\n          (= x 4) [1 3 3 1]\n          (= x 5) [1 4 6 4 1]\n          (= x 11) [1 10 45 120 210 252 210 120 45 10 1])\n     )","user":"566bd453e4b0a866af6896b7"},{"problem":97,"code":"(fn [row-num]\n  (if (= row-num 1) [1]\n    (loop [source [1 1]]\n      (let [inner-pascal (fn f [start]\n                           (if (= start [1]) []\n                             (conj (f (rest start)) (+ (first start) (second start)))))]\n        (if (= (count source) row-num) source\n          (recur (into [1] (conj (inner-pascal source) 1))))))))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn pas [n]\r\n  (if (= n 1)\r\n    [1]\r\n    (let [prior (pas (- n 1))]\r\n      (map + (concat [0] prior) (concat prior [0])))))","problem":97,"user":"4ddc1c89535d02782fcbea01"},{"problem":97,"code":"(fn [r]\n  (loop [t [1] p 1]\n    (if (= p r)\n      t\n      (recur\n        (mapv #(+ (get t % 0) (get t (- % 1) 0)) (range (inc (count t))))\n        (inc p)))))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn p-trio [level]\n  (let [next-line (fn [line]\n                    (reduce #(conj % (+ (nth line %2 0)\n                      (nth line (dec %2) 0))) [] (range (inc (count line)))))]\n    (loop [l [1]]\n\t    (if (= level (count l))\n\t      l\n\t      (recur (next-line l))))))","problem":97,"user":"4f3e6244e4b0e243712b1f85"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal (dec n))\n          x (concat [0] last)\n          y (concat last [0])]\n      (vec (map + x y)))))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn pascal-triangle [n]\n   (cond (= n 1) [1]\n         (= n 2) [1 1]\n         (> n 2) (concat [1] (map #(apply + %) (partition 2 1 (pascal-triangle (dec n)))) [1])))","problem":97,"user":"510967aae4b07c05fdf6dc0f"},{"problem":97,"code":"#(last (take % (iterate (fn [x]\n                              (let [padded (conj (vec (cons 0 x)) 0)]\n                                (loop [i 1 result []]\n                                  (if (< i (count padded))\n                                    (recur (inc i) (conj result (+ (nth padded i) (nth padded (- i 1)))))\n                                    result))\n                                )\n                              ) [1]) ))","user":"5d974b1de4b0d3f9b434ad36"},{"code":"(fn pascal [i]\n  (letfn [(pt [current]\n            (let [t (map #(apply + %) (partition 2 1 current))\n                  n (concat [1] t [1])]\n              (lazy-seq (cons current (pt n)))))]\n    (nth (pt [1]) (- i 1))))","problem":97,"user":"4fc93728e4b0ee37620e1844"},{"code":"(fn p-t [i] (let [fac (fn [x] (apply * (range 1 (inc x)))), get-item (fn [r c] (/ (fac r) (* (fac (- r c)) (fac c))))]\n                        (for [y (range i)] (get-item (dec i) y))))","problem":97,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":97,"code":"#(nth (iterate \n (fn [x]\n   (concat [(first x)] (map + x (rest x)) [(last x)])\n   ) [1]) (dec %))","user":"57011eb3e4b08d47c97781d1"},{"problem":97,"code":"(fn pt [level]\n  (if (= level 1)\n    [1]\n    (let [prev (pt (dec level))]\n      (cons 1 (conj (vec (map + prev (rest prev))) 1)))))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn [n]\n  ( map\n    (fn [k] \n      (/ \n        (#(reduce * (range 1 (inc %))) (dec n)) \n        (* (#(reduce * (range 1 (inc %))) k) (#(reduce * (range 1 (inc %))) (- (dec n) k)))))\n    (range n)))","problem":97,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":97,"code":"(fn [row_num]\n  (loop [current_row [0 1 0] current_row_num 1]\n    (if (= current_row_num row_num)\n      (reverse (rest (reverse (rest current_row))))\n      (recur\n        (flatten [0 (map + current_row (rest current_row)) 0])\n        (inc current_row_num)\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn[n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))","problem":97,"user":"52a62e16e4b0c58976d9abf9"},{"problem":97,"code":"#(loop [line [1] idx 1 goto %]\n     (if (< idx goto)\n       (recur (map + (cons 0 line) (concat line [0])) (inc idx) goto)\n       line))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":97,"code":"(fn [n]\n   (loop [i 1\n          p [1]]\n     (if (= i n)\n       p\n       (recur (inc i) (concat [1] (map #(apply + %) (partition 2 1 p)) [1]))))\n   )","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [n]\n  (nth\n    (iterate #(vec (map + (conj % 0) (cons 0 %))) [1])\n    (dec n)))","problem":97,"user":"524b0645e4b09eba1c0223bf"},{"problem":97,"code":"(fn pascals-triangle\n  [r]\n  (let [! (fn [x]\n            (apply * (range 1 (inc x))))\n        c (fn [n k]\n            (/ (! n) (! k) (! (- n k))))]\n    (map #(c (dec r) %)\n         (range r))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn pascal [row]\n  (if (< row 2)\n    [1]\n    (let [prev (pascal (- row 1))]\n      (mapv +\n        (concat prev [0])\n        (concat [0] prev)))))","problem":97,"user":"4fc50bcbe4b081705acca375"},{"problem":97,"code":"(fn pascal-row [n]\n  (let [n (dec n)]\n    (reduce (fn [v k]\n              (conj v (/ (* (get v k)\n                            (- n k))\n                         (inc k))))\n            [1]\n            (range n))))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [n] \n  (let [fct #(reduce * (range 1 (inc %1))) \n        chs #(/ (fct %1) (* (fct %2) (fct (- %1 %2))))] \n    (map #(chs (dec n) %)  (range n))))","problem":97,"user":"5273e006e4b03e8d9a4a7495"},{"problem":97,"code":"(fn [n]\n  (last \n   (take n \n         (iterate \n          #(map +' `(0 ~@%) `(~@% 0)) [1]))))","user":"59e62655e4b08badc2a0c568"},{"problem":97,"code":"(fn [n]\n (if (< n 2) \n\t [1] \n\t (nth (iterate (fn [xs] (concat [1] (map #(apply + %) (partition 2 1 xs)) [1])) [])\n          (dec n))))","user":"56c4f43ce4b05cc29241ee9c"},{"code":"(fn [n] (let [s (fn [p] (concat [1] (map #(apply + %) (partition 2 1 p)) [1]))]\n   (nth (iterate s [1]) (dec n)))\n  )","problem":97,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":97,"code":"(fn pascal\n  [n]\n  (last\n    (take n\n      (iterate\n        (fn \n          [p]\n            (into []\n              (map (fn [e] (reduce + e))\n                (partition 2 1\n                  (conj (into [0] p) 0)))))\n        [1]))))","user":"57fedf07e4b0d3187e9009dc"},{"problem":97,"code":"(fn [num]\n            (letfn [(getValue [length pos]\n                      (if (or (= length 1) (= pos 1) (= pos length))\n                        1\n                        (+ (getValue (- length 1) (- pos 1))\n                           (getValue (- length 1) pos)\n                           )))]\n              (map (fn [v] (getValue num (+ v 1))) (range num))\n              )\n            )","user":"5658b9bde4b00d315579610e"},{"problem":97,"code":"(fn pascal \n  ([n] (pascal [1] n 1))\n  ([old n counter]\n   (if (= counter n) old\n       (let [new (concat [1]\n                         (map #(apply + %)\n                              (partition 2 1 old))\n                         [1])]\n         (recur new n (inc counter))))))","user":"54848141e4b0e286459a119e"},{"problem":97,"code":"(fn pascal [n]\n  (condp = n\n    1 [1]\n    (let [last (pascal (dec n))\n          last-a (concat [0] last)\n          last-b (concat last [0])\n          ]\n      (vec(map + last-a last-b)))))","user":"5a9cdec0e4b0d174b936c7e1"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [old-row (pascal (dec n))\n          row (mapv (partial apply +)\n                    (partition 2 1 old-row))]\n      (vec (list* 1 (conj row 1))))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [n]\n  (nth\n    (iterate\n      #(->> (partition 2 1 (concat [0] % [0]))\n            (map (partial apply +)))\n      [1])\n    (dec n)))","problem":97,"user":"4f569a3ce4b0a7574ea71828"},{"problem":97,"code":"(fn [n]\n  (letfn [(fac [n]\n                (if (= 0 n)\n                  1\n                  (* n (fac (dec n)))))\n           (comb [n k]\n                 (/ (fac n) (* (fac k) (fac (- n k)))))]\n    (map (partial comb (dec n))\n         (range n))))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn pascal [n]\n  (loop [i n r [1]]\n    (if (= i 1)\n      r\n      (recur (dec i)\n             (conj (into [1] (map #(apply + %) (partition 2 1 r))) 1)))))","problem":97,"user":"4e8df08f535d65386fec213e"},{"problem":97,"code":"(fn pasc [n]\n  (loop [i 1\n         row [1]]\n    (if (< i n)\n      (recur (inc i) \n             (loop [i 0\n                    nextr [1]]\n               (if (< (- (count row) 2) i)\n                 (conj nextr 1)\n                 (recur (inc i) (conj nextr (+ (row i) (row (inc i))))))\n               ))\n      row)))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn [n]\n  (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec n)))","problem":97,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":97,"code":"(fn [n] \n  (loop [row 1\n        s [1]]\n   (if (= row n)\n     s\n     (recur (inc row) (flatten [1 (map #(apply + %) (partition 2 1 s)) 1])))))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":97,"code":"(fn [n]\n  (let [cal (fn [l]\n              (let [ll (concat [0] l)\n                    lr (concat l [0])]\n                (map + ll lr)))]\n    (nth (iterate cal [1]) (dec n))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":97,"code":"(fn [n]\n  (letfn [(bin [k]\n               (/\n                (apply * (range (- n k) n))\n                (apply * (range 1 (inc k)))))]\n    (map bin (range n))))","user":"5db5d09be4b010eb3c36cd31"},{"problem":97,"code":"(fn [n]\n  (nth (iterate\n         #(vec (map + (conj % 0) (cons 0 %)))\n         '[1])\n    (dec n)))","user":"5ae246b1e4b0837691e92c5d"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (let [xs (pascal (dec n))]\n      (concat [1] (map (fn [[x1 x2]] (+ x1 x2)) (partition 2 1 xs)) [1]))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":97,"code":"(fn [n]\n  (let [v [1]\n        pad-vec (fn [ve] (cons 0 (conj ve 0)))\n        next-vec (fn [ve] (->> (pad-vec ve)\n                               (partition 2 1)\n                               (map #(+ (first %) (second %)))\n                               (into [])\n                               ))\n        get-n (fn [v len] (if (< (count v) len) (recur (next-vec v) len) v))\n        ]\n        (get-n v n)\n    )\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn [n]\n  (nth (iterate (fn [row]\n                  (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))\n                [1])\n       (dec n)))","problem":97,"user":"51789dfae4b03d69594194d7"},{"problem":97,"code":"(fn [n]\n  (loop [result [1] cnt 1]\n    (if (< cnt n)\n      (recur \n       (into \n        [1] \n        (concat\n         (map \n          (fn [x y] (+ x y)) \n          (drop-last 1 result) \n          (drop 1 result)) \n         '(1)))\n       (inc cnt))\n      result)))","user":"577629abe4b0979f8965162e"},{"code":"#(concat (take (dec %) \n  (map first \n    (iterate \n      (fn [[x c]] \n        (list (* x (/ (- % c) c)) (inc c))) \n      [1 1]))) \n  '(1))","problem":97,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn pascal-triangle [n]\n  (if (= n 1)\n    (list 1)\n    (concat [1] (#(map (partial apply +) (partition 2 1 %)) (pascal-triangle (- n 1))) [1])))","problem":97,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [c]  (nth    (iterate      #(map + `[0 ~@%] `[~@% 0]) [1])  (- c 1)))","problem":97,"user":"4dce6e41535d5973398f92a2"},{"problem":97,"code":"(fn [n]\n    (loop [cur [1] nth n]\n      (if (= nth 1)\n        cur\n        (recur (concat [1] (map (partial apply +) (partition 2 1 cur)) [1])\n               (dec nth)))))","user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn [n] (nth\n         (iterate\n          (fn pas [row]\n            (map #(+ (nth row (dec %) 0)\n                     (nth row % 0))\n                 (range (inc (count row)))))\n          '(1))\n         (dec n)))","problem":97,"user":"52437703e4b076204b44fabf"},{"code":"(fn [n]\n  (loop [acc [1] n (dec n)]\n    (if (= 0 n) acc\n      (recur (let [acc (conj acc 0)] (apply vector (concat [1] (for [i (range (dec (count acc)))]\n          (+ (nth acc i) (nth acc (inc i))))))) (dec n)))))","problem":97,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn p [n]\n  (if (= 1 n) [1]\n    (concat [1] (map (partial apply +) (partition 2 1 (p (dec n)))) [1])))","problem":97,"user":"510acd6ee4b078ea719210f4"},{"problem":97,"code":"(fn [num]\n   (let [n (dec num)]\n     (loop [k 0 line [1]]\n     (cond\n      (= k n) line\n      :else (recur (inc k) (into [] (conj line (/ (* (nth line k) (- n k)) (inc k)))))\n     ))))","user":"55c2b95de4b0e31453f64980"},{"code":"(fn p [n] \r\n  (if \r\n\t\t(= 1 n) [1]\r\n\t\t(let [r (p (dec n))\r\n\t\t\t\ti (interleave r r)\r\n\t\t\t\ta (->> i rest butlast (partition 2))\r\n\t\t\t\ts (map #(apply + %) a)]\r\n\t\t\t(concat [1] s [1]))))","problem":97,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn f [n] (if (= n 1) [1] (let [t (f (dec n))] (map + (concat [0] t) (concat t [0])))))","problem":97,"user":"52c6a0abe4b0c2d177d62111"},{"problem":97,"code":"(fn [sz] (loop [col [] n sz d 0 li 1] (if (= d sz) col (let [ni (if (or (= 0 n) (= 0 d)) 1 (long (* li (/ n d))))] (recur (conj col ni) (dec n) (inc d) ni)))))","user":"53347274e4b0656e627bfd6b"},{"code":"(fn [r]\n  ((fn [a c]\n    (if (pos? c)\n      (recur (cons (* (first a) (/ c (- r c))) a) (dec c))\n      a )\n  ) [1] (- r 1)) )","problem":97,"user":"4e333091535deb9a81d77f25"},{"problem":97,"code":"(fn [n]\n  (loop [x n\n         s [0 1 0]]\n    (if (= x 1) (butlast (rest s))\n      (recur (dec x) (concat [0] (for [i (range (dec (count s)))] (+ (nth s i) (nth s (inc i)))) [0])))))","user":"55e732c5e4b050e68259b492"},{"problem":97,"code":"(fn __ [n]\n  (loop [p [1]\n         i n]\n    (if (<= i 1)\n      p\n      (recur (concat [1] (map + p (drop 1 p)) [1]) (dec i)))))","user":"4f856adfe4b033992c121c44"},{"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (loop [cnt 2 row [1 1]]\n      (if (= cnt n)\n        row\n        (recur (inc cnt) (concat [1] (map #(apply + %) (partition 2 1 row)) [1]))))))","problem":97,"user":"51d08d67e4b067c365486351"},{"problem":97,"code":"(fn [x]\n  (let [fractions (map-indexed #(/ %2 (+ % 1)) (range (- x 1) 0 -1))\n        f         (fn [a x] (into [] (concat a (vector (int (* (last a) x))))))]\n    (reduce f [1] fractions)))","user":"54b83ae9e4b0ed20f4ff6e95"},{"code":"(fn [n]\n  (loop [r [1] t n]\n    (if (= 1 t)\n        r\n        (recur (map + (concat [0] r)\n                      (concat r [0]))\n               (dec t)))))","problem":97,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":97,"code":"(let [pascal-rec (fn pascal-rec [l]\n  (conj (vec (conj (map + l (rest l)) 1)) 1))]\n  (fn [n]\n    (last (take n (iterate pascal-rec [1])))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn [n]\n  (letfn [(pt-next [coll]\n            (let [coll-part (partition 2 1 coll)]\n              (conj (reduce (fn [acc pair]\n                              (conj acc (apply + pair)))\n                            [1]\n                            coll-part) 1)))]          \n    (first (take 1 (drop (dec n) (iterate pt-next [1]))))))","problem":97,"user":"4f0ef874535d0136e6c22328"},{"problem":97,"code":"(fn [x] (\n           for [i (range x)] ((fn [n k]\n                                (let [rprod (fn [a b] (reduce * (range a (inc b))))]\n                                (/ (rprod (- n k -1) n) (rprod 1 k)))) (dec x) i)\n         )\n   )","user":"511036c5e4b04c71fce993ee"},{"code":"(fn [n]\n(reduce \n #(conj %1 \n   (* (last %1)\n      (/\n       (- n%2)\n       %2)))\n [1] \n (range 1 n)))","problem":97,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn p [x]\r\n  (if (= x 1)\r\n    [1]\r\n    `[1 ~@(map + (p (- x 1)) (next (p (- x 1)))) 1]))","problem":97,"user":"4db858d1535d1e037afb218c"},{"code":"#(reduce (fn [n _] (concat [1] \n                             (map (partial apply +)\n                                  (partition 2 1 n))\n                             [1])) [1] (range 1 %))","problem":97,"user":"4ec74de3535d6d7199dd36df"},{"problem":97,"code":"(fn [n]\n   (last\n    (take n\n          (iterate\n           (fn next-triangle [s]\n             (->> (reduce (fn [m x]\n                            (let [new-m (assoc m :to-add x)]\n                              (if-let [l (:to-add m)]\n                                (update-in new-m [:m] conj (+ x l))\n                                new-m)))\n                          {:m []} s)\n                  :m\n                  (cons 1)\n                  vec\n                  ((fn [x]\n                     (conj x 1)\n                     ))\n                  ))\n           [1])))\n   )","user":"567b2f20e4b05957ce8c61a2"},{"problem":97,"code":"#(map first (take % (iterate (fn [[x k]]\n                               [(* x (/ (- % k) k)) (inc k)]) [1 1])))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":97,"code":"(fn [n] (nth (iterate #(map + (concat % '(0)) (conj % 0)) '(1)) (dec n)))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"problem":97,"code":"#(nth (iterate (fn [v]\n                    (vec\n                      (map + (cons 0 v) (conj v 0))))\n               [1]) \n      (dec %))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (vec (concat [1]\n                 ((fn pascal-help [xs]\n                    (loop [i 0\n                           result []]\n                      (if (< i (dec (count xs)))\n                        (recur (inc i) (conj result (+ (get xs i) (get xs (inc i)))))\n                        result))) (pascal (dec n)))\n                 [1]))))","problem":97,"user":"4eab612d535d7eef30807316"},{"problem":97,"code":"(fn [n]\n  (reduce (fn [r _] (flatten [1\n                     (map (fn [a b] (+ a b)) (butlast r) (rest r))\n                     1]))\n          [1]\n          (range (dec n))))","user":"5012da69e4b0c8732600222d"},{"problem":97,"code":"(fn [row]\n  (loop [result [1] cnt (dec row)]\n    (if (zero? cnt)\n      result\n      (recur (#(vec (map + (cons 0 %) (conj % 0))) result) (dec cnt))\n      )\n    )\n  )","user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn [n]\n  (letfn [(fact [n] (if (zero? n) 1 (apply * (range 1 (inc n)))))\n          (choose [n k] (/ (fact n) (* (fact k) (fact (- n k)))))]\n    (map #(choose (dec n) %) (range n))))","problem":97,"user":"4ea09fa4535d7eef308072aa"},{"problem":97,"code":"(fn pascal [n]\n  (if (= n 1)\n    [1]\n    (concat [1]\n            (map (fn [[a b]] (+ a b)) (partition 2 1 (pascal (dec n))))\n            [1])))","user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn pascal [row]\n  (if (= row 1)\n    [1]\n    (#(concat '(1) (map + %1 (drop 1 %1)) '(1))\n      (pascal (dec row)))))","problem":97,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn p [n]\n    (nth\n      (iterate #(concat [1] (map + % (rest %)) [1]) [1])\n      (- n 1)\n    )\n )","problem":97,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":97,"code":"(fn f\n  [n]\n  (if (< n 2)\n    [1]\n    (last\n      (take (- n 1)\n            (iterate #(into []\n                            (concat\n                              (list (first %))\n                              (loop [a (first %)\n                                     b (first (rest %))\n                                     lst (rest %)\n                                     lst2 ()]\n                                (if (< (count lst) 2)\n                                  (cons (+ a b) lst2)\n                                  (recur (first lst) (first (rest lst)) (rest lst) (cons (+ a b) lst2))))\n                              (list (last %)))) [1 1])))))","user":"59e778aae4b0249b72820716"},{"problem":97,"code":"(fn pascal\n  ([n] (pascal n [1]))\n  ([n row]\n   (if (= n (count row))\n     row\n     (recur n (conj (first (reduce (fn [acc x] \n                                     [(conj (first acc)\n                                            (+ (second acc)\n                                               x)) x])\n                                   [[(first row)] (first row)] \n                                   (rest row))) \n                    1)))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn p97[in]\n  (cond (= in 1) [1]\n        (= in 2) [1 1]\n        :else \n  (letfn [(b [level cache] \n            (for [x (range 1 (dec level))]\n              (+ (nth cache (dec x))\n                 (nth cache x))))\n          (wrap [s] (conj (into [] (cons 1 s)) 1))]\n  (loop [l 3 c [1 1]]\n    (if (= l in)\n      (wrap (b l c))\n      (recur (inc l) (wrap (b l c))))))))","problem":97,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [row]\n  (loop [i 1, res [1]]\n    (if (= i row)\n      (vec res)\n      (let [middle \n            (for [[x y] (partition 2 1 res)]\n              (+ x y))]\n        (recur (inc i) (concat [1] middle [1]))))))","problem":97,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn pascal-triangle[n]\n  (if (< n 2)\n     [1]\n    (mapv #(apply + %1) (partition 2 1 ((comp vec concat) [0] (pascal-triangle (dec n)) [0])))\n    )\n  )","problem":97,"user":"52761edae4b03e8d9a4a74d4"},{"problem":97,"code":"(fn pt [n]\n  (loop [i n xs []]\n    (cond\n      (= 0 i) xs\n      :else (recur (dec i) ((fn iter [acc px]\n               (cond\n                 (empty? px) acc\n                 (= 1 (count px)) (conj acc 1)\n                 :else (iter (conj acc (+ (first px) (first (rest px))))  (rest px))\n                )) [1] xs))\n      )))","user":"5374f931e4b06d7f452d9e2d"},{"problem":97,"code":"(fn pascal\n  [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (concat [1] (map #(apply + %) (partition 2 1 (pascal (dec n)))) [1]))\n)","user":"56f188e9e4b04a395b9a0494"},{"code":"(fn pascal-triangle [n]\n  (let [next-row (fn [row]\n     (->> (concat [0] row [0])\n       (partition 2 1)\n       (map (partial apply +))))]\n     (first (drop (- n 1) (iterate next-row [1])))))","problem":97,"user":"4ef41f26535dced4c769f230"},{"problem":97,"code":"#(nth (iterate (fn expand [col] ( concat '(1) (map (partial apply +) (partition 2 1 col)) '(1)) ) [1]) (dec %))","user":"54af6fb0e4b09f271ff37d08"},{"problem":97,"code":"#(loop [res [] cnt 0]\n   (cond (= cnt %) res\n         (= cnt 0) (recur [1] 1)\n         :else (recur\n       (conj res (* (last res) (/ (- % cnt) cnt)))\n       (inc cnt)\n       )\n     )\n   )","user":"59f58103e4b0966464fe6ac0"},{"problem":97,"code":"(fn [n]\n  (nth (iterate (fn [row]\n                  (map + (concat [0] row) (concat row [0])))\n                [1])\n       (dec n)))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn [n]\r\n  (reductions *        \r\n            1\r\n            (map #(/ (- n %) %)\r\n                 (range 1 n))))","problem":97,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn p [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (concat [1] (map #(apply + %) (partition 2 1 (p (dec n)))) [1]))))","problem":97,"user":"52d660eae4b09f7907dd1356"},{"problem":97,"code":"(fn [n]\n  (last\n    (take n\n      (iterate\n        (fn next-row [previous-row]\n            (into []\n                  (map (fn [e] (reduce + e))\n                       (partition 2 1\n                                  (conj (into [0] previous-row) 0)))))\n        [1]))))","user":"56df63c7e4b0ca2494a095f5"},{"code":"(fn pascal [n]\n    (if (= n 1) \n      [1]\n      (vec (map #(reduce + %) (partition 2 1 (cons 0 (conj (pascal (- n 1)) 0)))))))","problem":97,"user":"4edfdfa2535d10e5ff6f5346"},{"problem":97,"code":"(fn [n] (let [zz (fn [s] (into []  (let  [s1 (concat [0] (conj s 0))\n                                          s2 (conj s 0)]\n                                        (map +' s1 s2))))]\n            (nth  (iterate zz [1]) (- n 1))))","user":"58983e3fe4b00487982d52ce"}]