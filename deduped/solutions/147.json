[{"problem":147,"code":"(fn z [seq ] \n   (iterate \n     (fn pt [seq]\n       (if (= 1 (count seq)) (conj [] (first seq ) (first seq))\n         (loop [left (first seq), s (rest seq),\n                right (first s), ret []]\n             (if (empty? s) (conj ret left)\n                 (if (empty? ret) \n                   (recur left,  s, right, [left])\n                   (recur right, (rest s),  (first (next s)),  \n                          (conj ret (+' left right))))))))\n            seq))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [init]\n  (iterate #(map +'\n                 (concat [0] %)\n                 (concat % [0]))\n           init))","problem":147,"user":"50586354e4b06522596eba78"},{"problem":147,"code":"(fn p [s]\n  (let [n (fn n\n                [r]\n                (into [] (map +' (cons 0 r) (conj r 0))))]\n  (cons s (lazy-seq (p (n s))))))","user":"544e8369e4b0e39780006987"},{"problem":147,"code":"(fn [num-seq]\n  (letfn [(next-row-tail [num-seqx]\n            (cond (< 1 (count num-seqx)) (cons (+' (first num-seqx) (second num-seqx)) (next-row-tail (rest num-seqx)))\n                  (= 1 (count num-seqx)) (list (first num-seqx))\n                  :else '()))\n          (next-row [num-seqx] (next-row-tail (cons 0 num-seqx)))\n          (next-rows [num-seqx] (lazy-seq (cons num-seqx (next-rows (next-row num-seqx)))))]\n    (next-rows num-seq)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":147,"code":"(fn pascals\n[row]\n(lazy-seq \n  (cons row \n    (pascals \n      ((fn [row]\n        (loop [curr row\n              final (conj [] (first row))]\n              (if (empty? (rest curr))\n              (conj final (first curr))\n              (recur (rest curr) \n                (conj final (+' (first curr) (second curr))))))) row)))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":147,"code":"#(iterate (fn [s] (map +' (cons 0 s) (conj (vec s) 0))) %)","user":"55dcb06ee4b050e68259b3b9"},{"problem":147,"code":"(fn a [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn pascals-trap [v]\r\n         (cons v (lazy-seq\r\n                   (pascals-trap (reverse\r\n                     (reduce #(cons %2 (cons (+' %2 (first %1)) (rest %1)))\r\n                             (cons '(0) v)))))))","problem":147,"user":"5050b107e4b063148f524126"},{"code":"(fn [s]\n  (iterate #(map (fn [a b] (+ (bigint a) b)) (cons 0 %) (concat % '(0))) s))","problem":147,"user":"51899891e4b0288ada3dbdab"},{"problem":147,"code":"(fn solve147 [s]\n  (lazy-seq\n   (cons s\n         (solve147 (map +' (concat [0] s) (concat s [0]))))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn r [t]\n  (lazy-seq\n    (cons t (r (flatten (reduce (fn [[t p] c]\n                                  [(conj t (+ p c)) c]) [[] 0] t))))))","problem":147,"user":"4f32a7f1e4b0d6649770a095"},{"problem":147,"code":"#(letfn [(pt [coll]\n            (mapv +'\n                (cons 0 coll)\n                (conj coll 0)))\n           (inf-pt [coll]\n               (lazy-seq (cons coll (inf-pt (pt coll)))))]\n  (inf-pt %))","user":"55868660e4b059ccff29b1d4"},{"problem":147,"code":"(fn pascal_tri [ini]\n    (iterate #(map  +' (concat  [0] %) (concat  % [0])) ini))","user":"566ff0a1e4b0a866af6896ec"},{"code":"#(iterate (fn [xs] (map +' `(0 ~@xs) `(~@xs 0))) %)","problem":147,"user":"4feaa579e4b0140c20fb9c0b"},{"code":"#(iterate (fn [row] (map +' `(0 ~@row) `(~@row 0))) %)","problem":147,"user":"4eab612d535d7eef30807316"},{"code":"(fn [ns]\n       (iterate (fn [x]\n                  (lazy-cat [(first x)] (map + (rest x) x) [(last x)]))\n                ns))","problem":147,"user":"4ee82223535d93acb0a66877"},{"problem":147,"code":"(fn pt [s] (lazy-seq \n         (let   [middle  (map (fn [[a b]] (+' a b)) (partition 2 1 s))\n                 res     (concat [(first s)] middle [(last s)])]\n           (cons s (pt res)))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"#(letfn\n  [(p [[a l] v]\n      (vector (conj a (+' l v)) v))\n   (n [r]\n      (let [[a l] (reduce p [[] 0] r)]\n        (conj a l)))]\n   (iterate n %))","problem":147,"user":"4e03c616535d04ed9115e796"},{"problem":147,"code":"(fn [x] \n  (letfn [ (na [a]\n  \t\t\t(map +' (concat [0] a) (concat a [0])))\n          \n          (kk [a]\n  \t\t\t(lazy-seq\n              (let [a1 (na a)]\n                (cons a1 (kk a1)))))]\n    \n  (cons x (kk x))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":147,"code":"(fn kk[vs]\n \t(lazy-seq (cons vs (kk (map +' (concat vs [0]) (concat [0] vs) ))))\n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":147,"code":"(fn pascal-trapezoid [row]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) row))","user":"5367bc60e4b0243289761e81"},{"problem":147,"code":"(fn trapezoid [coll]\n    (let [s (seq [coll])]\n      (lazy-seq\n        (concat s (trapezoid (mapv +' (cons 0 (last s)) (conj (last s) 0)))))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":147,"code":"(fn [x](letfn[(pascal [s]\n\t(conj (vec (cons (bigint (first s))\n\t      (map #(+ (bigint (first %)) (bigint (second %))) (partition 2 1 s) ))) (last s)))]\n\t\t  (iterate pascal x)))","user":"4e8849c5535d8b9bb0147ca4"},{"problem":147,"code":"(fn lazy-pascal\n  [input]\n  (letfn [(next-row\n           [input]\n           (cond\n             (= 1 (count input)) [(first input) (first input)]\n             :else (vec (concat [(first input)] (map +' input (rest input)) [(last input)]))))]\n    (iterate next-row input)))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn n [m]\n  (letfn [(b [mm]\n    (loop [nn [(first mm)] l mm]\n(if (empty? l)\nnn\n(recur \n  (conj nn\n    (if (=\n      (count l) 1 )\n(first l)\n(+' (first l) (second l))))\n(rest l)))))] (cons m (lazy-seq (n (b m))))))","problem":147,"user":"4fe97adde4b0547ebccb245e"},{"problem":147,"code":"(fn [lst]\n  \n    (let [pascal \n          (fn [lst]\n            (vec (concat [(first lst)] (map +' lst (rest lst)) [(last lst)])))]\n      (iterate pascal lst)))","user":"4e8a170c535d3e98b802328f"},{"code":"iterate #(let [s (concat [0] % [0])] (map + s (next s)))","problem":147,"user":"4ef48422535dced4c769f236"},{"problem":147,"code":"(fn [coll] (iterate #(map (partial apply +') (cons [(first %)] (partition-all 2 1 %))) coll))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":147,"code":"(fn __ [v]\n  (lazy-seq (cons v (__ (mapv +' (cons 0 v) (conj v 0))))))","user":"55916764e4b0604b3f94d57b"},{"code":"#(iterate (fn [col] (vec (map +' (cons 0 col) (conj col 0))))  %)","problem":147,"user":"52b02329e4b0c58976d9acc5"},{"problem":147,"code":"(fn [actual] (let [f (fn pasc [x] \n  (if (= x 1) actual \n    (let [ant (pasc (dec x)) ] (concat [(first actual)] (map +' ant (rest ant)) [(last actual)]))))]\n  (lazy-seq (for [i (range 1 1000)] (f i) ) )))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (let [fst (first coll)\n        lst (last coll)\n        middle (map #(apply +' %) (partition 2 1 coll))]\n    (lazy-seq (cons coll (pascal-trapezoid (concat [fst] middle [lst]))))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":147,"code":"(fn pscl [v] (lazy-seq (cons v (pscl (concat (list (first v)) (map +' v (rest v)) (list (last v))) ))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":147,"code":"(fn arse [start]\n    (let [nl (concat [(first start)] (map +' start (rest start)) [(last start)])]\n         (cons start (lazy-seq (arse nl))))\n    )","user":"52503747e4b0541d1855b828"},{"problem":147,"code":"#(iterate (fn [xs] (map +' (concat [0] xs) (concat xs [0]))) %)","user":"553698fae4b09218d5f44fc0"},{"problem":147,"code":"iterate (fn[a](map #(reduce +' %) (cons (vector (first a)) (partition-all 2 1 a))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":147,"code":"(fn  pascal [n]\n      (iterate\n        (fn [nums]\n          (vec\n            (map + (conj nums 0N) (cons 0N nums))))\n        n))","user":"538d70abe4b0b51d73faae6e"},{"problem":147,"code":"(fn pascals-triangle\n  [row-vals]\n  (let [a (cons 0 row-vals)\n        b (conj row-vals 0)\n        next-row (mapv +' a b)]\n    (cons row-vals\n          (lazy-seq (pascals-triangle next-row)))))","user":"524740e7e4b05ef8e38e635d"},{"problem":147,"code":"(fn __ [xs]\n  (letfn [(step [v] (map (partial apply +') (cons (list (first v)) (partition-all 2 1 v))))]\n    (iterate step xs)))","user":"526759b3e4b03e8d9a4a715b"},{"problem":147,"code":"#(iterate (fn [r]\n            (concat (take 1 %) \n                    (map +' (rest r) (butlast r))\n                    (take-last 1 %))) %)","user":"56baa68ce4b0f26550335947"},{"problem":147,"code":"(fn _ [row]\n    (cons row (lazy-seq\n               (let [next-row\n                     (concat [(first row)]\n                             (map +' row (rest row))\n                             [(last row)])]\n                 (_ next-row)\n                 ))))","user":"5433a07be4b0b6b47310fce0"},{"problem":147,"code":"(fn lazy-pascal [row]\n  (lazy-seq\n   (let [new-row (vec (map +' (cons 0 row) (conj row 0)))]\n     (cons row (lazy-pascal new-row)))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":147,"code":"(fn pascal-trapzoid [col]\n  (lazy-seq\n    (let [c (seq col)]\n      (cons c (pascal-trapzoid (concat (list (first col)) (map +' c (rest c)) (list (last col))))))))","user":"5243e37ae4b076204b44fae3"},{"code":"iterate (fn [c]\n          (concat [(first c)]\n                  (map #(apply + %) (partition 2 1 (map bigint c)))\n                  [(last c)]))","problem":147,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":147,"code":"(fn f [v]\n  (let [a (interleave v v )\n        b (drop-last (rest a))\n        c (partition 2 b)\n        d (map #(apply +' %) c)]\n    (cons v (lazy-seq (f (concat [(first v)] d [(last v)]))))))","user":"5e12327ee4b099d064962fe5"},{"problem":147,"code":"(fn [original]\n    (letfn [(pascal-helper [current]\n              (let [start (list (first current) 0)\n                    end (partition 2 1 '(0) current)\n                    all (cons start end)]\n                (mapv #(apply +' %) all)))\n            (pascal-main [seed]\n              (let [next-row (pascal-helper seed)]\n                (lazy-seq (cons seed (pascal-main next-row)))))]\n      (pascal-main original)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":147,"code":"(fn triangle [row]\n  (let [next-row (fn next-row [row]\n                   (vec (map +' (cons 0 row) (concat row '(0)))))]\n    (iterate next-row row)))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn ptrap [sq]\n  (let [step (fn step [sq]\n              (if (< (count sq) 2)\n                []\n                (vec (cons (+ (first sq) (second sq))\n                      (step (rest sq))))))]\n    (iterate #(step (cons 0N (conj % 0N))) sq)))","problem":147,"user":"529ce629e4b04e0c58e87b6e"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq\n    (cons row\n          (pascal (mapv +' (conj row 0) (cons 0 row))))))","user":"543a8256e4b032a45b869327"},{"problem":147,"code":"(fn pt [x]\n  (lazy-seq (cons x (pt (map +' (concat [0] x) (concat x [0]))))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [coll]\n  (iterate\n   (fn [coll]\n     (let [len (count coll)]\n       (loop [i 0 result [(first coll)]]\n         (if (= i len) result\n             (recur (inc i) (conj result (+ (nth coll i)\n                                     (if (= (inc i) len)\n                                       0\n                                       (nth coll (inc i))))))))))\n   coll))","problem":147,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"iterate \n  (fn [[v & _ :as c]] \n     (concat \n       (list v) \n       (map (partial apply +') (partition 2 (interleave c (rest c)))) \n       (list (last c))))","problem":147,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn final-pascal [v]\n  (letfn [(pascal [v]\n                  (let [f (bigint (first v))\n                        l (bigint (last v))]\n                    (mapcat #(if (seq? %)\n                               %\n                               (list %))\n                            (vector f (map #(+ (bigint %) (bigint %2)) v (rest v)) l))))]\n         (cons v (lazy-seq (final-pascal (pascal v))))))","problem":147,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn f [x]\n          (lazy-seq (cons x (f (concat (cons (first x) (map (partial apply +') (partition 2 1 x))) [(last x)])))))","problem":147,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn pascal [s] \n  (letfn [(next-row [s]  \n              (flatten [(first s) \n                        (map +' s (rest s)) \n                        (last s)]))]\n    (cons s (lazy-seq (pascal (next-row  s))))))","problem":147,"user":"52655949e4b03e8d9a4a710b"},{"problem":147,"code":"#(iterate (fn [x] (concat [(first x)] \n                    (map +' x (rest x)) \n                    [(last x)])) \n           %)","user":"56ab7578e4b03c432f18733d"},{"problem":147,"code":"iterate\n   (fn [x] \n     (map +' `[~@x 0] `[0 ~@x]))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn nextrow[row]\n          (lazy-seq\n           (cons row\n                 (nextrow \n                  (conj (get (reduce\n                              (fn [a x] (hash-map :v x :r (conj (get a :r) (+ (get a :v) x))))\n                              {:v 0 :r []} row) :r) (last row))))))","problem":147,"user":"4f40f055e4b0e243712b1fc2"},{"problem":147,"code":"(fn pascal [line]\n  (lazy-seq\n   (let [next-line\n         (->> (concat [0] line [0])\n              (partition 2 1)\n              (map (partial apply +')))]\n              (cons line (pascal next-line)))))","user":"605b7a90e4b079a07f8593fc"},{"problem":147,"code":"(fn [s]\n  (iterate\n   (fn [v]\n     (let [v (concat [0] v [0])]\n       (map #(apply +' %) (partition 2 1 v))))\n   s))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn pas-trap [init-line]\n  (let [line-size (count init-line) \n        this-line\n        (loop [line [(first init-line)]]\n          (if (= (count line) line-size)\n            (conj line (last init-line))\n            (let [pos (count line)]\n              (recur (conj line (+' (nth init-line pos) (nth init-line (dec pos))))))))]\n    (cons init-line (lazy-seq (pas-trap this-line)))))","problem":147,"user":"523288fee4b035af41902a88"},{"code":"(fn [row]\n  (iterate\n   (fn [input]\n     (concat\n      [(first input)]\n      (map #(apply +' %) (partition 2 1 input))\n      [(last input)]))\n   row))","problem":147,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn my-trap\n  [se]\n  (letfn [(h [s] (let [result (if (= 1 (count s))\n                                (vec (flatten [s s]))\n                                (concat\n                                  (take 1 s)\n                                  (map #(apply (comp bigint +) %) (partition 2 1 s))\n                                  (take-last 1 s)))]\n                   (cons result (lazy-seq (h result)))))]\n    (cons se (h se))))","problem":147,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":147,"code":"#(iterate (fn [x] (map +' (cons 0 x) (concat x [0]))) %)","user":"5393185ae4b0b51d73faaeb7"},{"problem":147,"code":"#(iterate\n    (fn \n     [ant]\n     (into []\n     \t(map (fn [a] (reduce +' a)) (partition 2 1 (conj (into [0] ant) 0))))) %)","user":"5bbc0ddfe4b0a20761a2361e"},{"problem":147,"code":"(letfn [(next [row]\n          (let [f (first row)\n                l (last row)]\n            (loop [i 0, acc []]\n              (cond (>= i (dec (count row))) (into [] (concat [f] (conj acc l)))\n                    :else (recur (inc i) (conj acc (+' (row i) (row (inc i)))))))))\n        (ptrap [row]\n          (cons row (lazy-seq (ptrap (next row)))))]\n  ptrap)","user":"538e36c7e4b0b51d73faae81"},{"problem":147,"code":"(fn [row]\n  (letfn [(pt [row fst lst]\n            (let [nextrow (concat [fst] (map #(reduce +' %) (partition 2 1 row)) [lst])]\n              (cons row (lazy-seq (pt nextrow fst lst)))))]\n    (pt row (first row) (last row))))","user":"560a7b46e4b05f002753defb"},{"problem":147,"code":"iterate (fn [v] (map #(+' (nth v (dec %) 0) (nth v % 0)) (range (inc (count v)))))","user":"4fe9de74e4b0547ebccb2475"},{"problem":147,"code":"(fn my-tr [xs]\n  (cons xs \n        (lazy-seq \n          (my-tr (apply vector (map #(+' (first %) (second %))\n                      (partition 2 1(cons 0 (conj xs 0)))))))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn [v]\n  (iterate (fn [previous]\n             (flatten (conj (list (last previous))\n                     (map-indexed (fn [index element]\n                                    (+' (nth previous (- index 1) 0)\n                                       (nth previous (- index 0) 0)))\n                                  previous))))\n           v))","problem":147,"user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn [l]\n  (iterate (fn [x] `(~(first x) ~@(map +' x (drop 1 x)) ~(last x))) \n           l))","problem":147,"user":"52bb27fee4b07a9af57922df"},{"problem":147,"code":"(fn PascalsTrapezoid [vect] \n  (iterate (fn[v] \n             (vec (concat [(v 0)] \n                          (map +' v (rest v)) \n                          [(last v)]))) \n           vect))","user":"607508f3e4b069485764de54"},{"problem":147,"code":"(fn [xs] (reductions (fn [x _] (flatten [ (first x) (map #(apply +' %) (drop-last (partition-all 2 1 x))) (last x)])) xs (range)))","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn pascals-trapezoid [coll]\n  ((fn trap-with-bigints [coll-bigints]\n     (let [inner-fn (fn [prev-row]\n                      (loop [[a b :as all] prev-row, result [(first prev-row)]]\n                        (if (nil? b)\n                          (conj result (last prev-row))\n                          (recur (rest all) (conj result (+ a b))))))]\n       (cons coll-bigints (lazy-seq (trap-with-bigints (inner-fn coll-bigints))))))\n     (map #(BigInteger/valueOf %) coll)))","problem":147,"user":"53070615e4b02e821686979e"},{"problem":147,"code":"#(iterate\n    (fn [v]\n     (concat [(first v)]\n             (map (partial apply +') (partition 2 1 v))\n             [(last v)]))\n    %)","user":"516db4f6e4b046df6fbb76a0"},{"problem":147,"code":"#(iterate\n  (fn [xs]\n    (map +'\n         (concat [0] xs)\n         (concat xs [0])))\n  %)","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn pascal-trapezoid\n  [nums]\n  (letfn [(next-seq [xs]\n            (let [vec-xs (vec xs)\n                  xs-padded (cons 0 (conj vec-xs 0))\n                  grouped (partition 2 1 xs-padded)]\n              (map #(+' (first %) (second %)) grouped)))]\n    (cons nums (lazy-seq (pascal-trapezoid (next-seq nums))))))","problem":147,"user":"524f4256e4b0541d1855b808"},{"problem":147,"code":"#(iterate (fn [x] (cons (first x) (concat (map +' (rest x) (butlast x)) [(last x)]))) %)","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn pascal-trapezoid [row]\n  (let [next-row (fn [xs]\n                   (concat [(first xs)]\n                           (map #(apply +' %) (partition 2 1 xs))\n                           [(last xs)]))\n        ys (next-row row)]\n    (cons row (lazy-seq (pascal-trapezoid ys)))))","problem":147,"user":"4f8c6bf6e4b02e764a0a519b"},{"code":"iterate (fn next-row-pascal [seq]\n             (concat [(first seq)] \n                     (map #(+' (nth seq %) (nth seq (dec %))) \n                          (range 1 (count seq))) \n                     [(last seq)]))","problem":147,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn [s]\n  (iterate\n   (fn [l]\n     (let\n         [i (count l)\n          tr l]\n       (loop\n         [tr2 [(first l)]\n          j 1]\n         (if (= i j)\n           (conj tr2 (last l))\n           (recur\n            (conj tr2 (+' (nth tr (- j 1))\n                         (nth tr j))\n                  )\n            (+ j 1)\n            )\n           )\n         )\n       ))\n   s))","problem":147,"user":"530d85dee4b08068f379eca8"},{"code":"#(iterate \n  (fn [xs] \n     (map +' (concat xs [0]) (concat [0] xs)))\n  %)","problem":147,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn pascal-triangle\n  [coll]\n  (let [a (first coll)\n        b (last coll)\n        get-res (fn [c]\n                  (if (= (count c) 1)\n                    (vec (cons a c))\n                    (if (= (count c) 2)\n                      (vec (cons a (reverse (cons a (vector (apply reduce + (partition 2 1 c)))))))\n                      (vec (reverse (cons b (reverse (cons a (map #(reduce + %) (partition 2 1 c))))))))))]\n    (iterate get-res coll)))","problem":147,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn hoge [b]\r\n  (let [n (vec (map +' (cons 0 b) (concat b (repeat 0))))]\r\n    (lazy-seq (cons b (hoge n)))))","problem":147,"user":"507437c2e4b054001656acd0"},{"problem":147,"code":"(fn pascals-trapezoid [row]\n  (iterate\n    (fn next-row [previous-row]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1\n                            (conj (into [0] previous-row) 0)))))\n    row))","user":"57f81524e4b0d3187e900913"},{"problem":147,"code":"iterate (fn [root]\n          (into [] (map +' (concat [0] root) (concat root [0]))))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"iterate (fn pascal [s]\n  (concat\n    [(first s)]\n    (map #(apply + %) (partition 2 (interleave s (rest s))))\n    [(last s)]))","problem":147,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn f [x] (cons x (lazy-seq(f (map +' (conj (vec x) 0) (cons 0 x))))))","problem":147,"user":"511d11d7e4b022853b0e079f"},{"problem":147,"code":"(fn lazy-pascal [s]\n  (letfn [(getnext [coll]\n                   (let \n                     [x (flatten (vector coll 0))\n                      y (flatten (vector 0 coll))]\n                   (map +' x y)))]\n  (lazy-seq (cons s (lazy-pascal (getnext s))))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(partial iterate\n         (fn [nums]\n           (vec\n             (map +' (conj nums 0) (cons 0 nums)))))","problem":147,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn pascal [coll]\n  (cons coll\n        (lazy-seq (pascal (conj (vec (cons (first coll)\n                                           (map #(apply +' %)\n                                                (partition 2\n                                                           1\n                                                           coll))))\n                                (last coll))))))","problem":147,"user":"531d34cfe4b08068f379edac"},{"problem":147,"code":"(fn [v] (iterate (fn [v] (vec (cons (first v) (concat (map #(reduce +' %) (partition 2 1 v)) [(last v)])))) v))","user":"4e68c434535d8ccf87e9fe89"},{"problem":147,"code":"(fn triangle[v]\n  (let [padded (concat [0] v [0])\n        next-v (map (partial apply +') (partition 2 1 padded))]\n    (lazy-seq\n     (cons v (triangle next-v)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn trapezoid [t]\n  (let [next (loop [s (rest t) p (first t) acc [(first t)]]\n                (if (seq s)\n                  (recur (rest s) (first s) (conj acc (+ p (first s))))\n                  (conj acc p)))]\n    (lazy-seq (cons t (trapezoid next)))))","problem":147,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn p [x]\n   (cond (= (count x) 1) (cons x (lazy-seq (p [(first x) (first x)])))\n         :else (cons x (lazy-seq (p (concat [(first x)] \n                                            (map #(apply +' %) (partition 2 1 x)) \n                                            [(last x)]))))))","problem":147,"user":"506d5e4ce4b0a302964c5493"},{"problem":147,"code":"(fn p-tri [v]\n  (iterate #(map +' (concat [0] %) (concat % [0])) v))","user":"57ffd1a9e4b0a837a8b30c2a"},{"code":"(fn pascal [v]\n        (let [head (conj (map #(apply +' %) (partition 2 1 (repeat 0) v))\n                         (first v))]\n          (lazy-cat [v] (pascal head))))","problem":147,"user":"4e589bdc535d8a8b8723a295"},{"problem":147,"code":"iterate (fn [row] \n          (loop [result [(first row)]\n                 remaining row]\n            (if (= 1 (count remaining))\n              (conj result (first remaining))\n              (recur (conj result (+' (first remaining)\n                                      (second remaining)))\n                     (rest remaining)))))","user":"5956c6dae4b066ee0a44af61"},{"problem":147,"code":"(fn trap\n  [first]\n  (iterate (fn\n           [prev]\n               (map (fn [[a b]] (+ (bigint a) b))\n                    (partition 2 1 [0] (into [0] prev))))\n  first))","user":"518ba795e4b0f028e99addf0"},{"problem":147,"code":"(fn trap [xs]\n    (letfn [(nextrow [ys] \n                     (map +' (cons 0 ys) (concat ys [0])))]\n    \t(lazy-seq (cons xs (trap (nextrow xs))))))","user":"51000111e4b00d7ad4cab15e"},{"code":"(fn z [s]\n  (cons s (lazy-seq (z (flatten [(first s) (map #(reduce + %) (partition 2 1 s)) (last s)])))))","problem":147,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn pr147\n\t[l]\n\t(iterate (fn [s] (vec (map (partial reduce +') (partition 2 1 (concat [0] s [0]))))) l))","problem":147,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn pascal_trap [coll]\n    (iterate\n      (fn [prev] (map #(apply +' %) (partition 2 1 (concat [0] prev [0]))))\n      coll\n      )   \n  )","problem":147,"user":"5228f870e4b0186687e23a98"},{"problem":147,"code":"(fn aaa\n  ([c] (iterate\n         (fn [list] (loop [i 0 acc []]\n                      (if (> i  (count list))\n                        acc\n                        (recur (inc i) (conj acc (if (= i 0) (first list) (if (= i (count list))\n                                                                            (last list)\n                                                                            (+' (get list (- i 1)) (get list i))))))))) c)))","user":"598d22b1e4b02b9968b84d1a"},{"problem":147,"code":"(fn [row] \n  (iterate #(map +' `(0 ~@%) `(~@% 0)) \n           row))","user":"5540cc0ce4b0a04f79299505"},{"code":"(fn [s]\n  (iterate (fn [x]\n             (concat\n              (vector (first x))\n              (map (partial apply +')(partition 2 1 x))\n              (vector (last x))))\n             s))","problem":147,"user":"5106bc8ae4b01150e115ebec"},{"problem":147,"code":"#(let [f (fn [x]\n           (let [v (concat [0] x [0])]\n             (reduce (fn [a [x y]] (conj a (+' x y))) [] (map vector v (rest v)))))]\n   (iterate f %))","user":"606a70a5e4b069485764ddf2"},{"code":"iterate #(vec (map + (cons 0N %) (conj % 0N)))","problem":147,"user":"500900dee4b0144d4f561e42"},{"code":"(fn pts\n  [input]\n  (let [pt (fn [input]\n             (let [left-most (vector (first input))\n                   right-most (vector (last input))\n                   middle (map #(bigint (+ (first %) (second %))) (lazy-seq (partition 2 1 input)))]\n               (concat left-most middle right-most)))]\n  (iterate pt input)))","problem":147,"user":"52016fd3e4b0b2e020a18f10"},{"problem":147,"code":"iterate #(mapv +' (into [0] %) (conj % 0))","user":"56ae214ce4b03c432f18735a"},{"problem":147,"code":"(fn ptrap [s]\n  (cons s \n        (lazy-seq (ptrap (concat [(first s)] \n                                 (map #(reduce +' %) (partition 2 1 s)) \n                                 [(last s)])))))","user":"545801f6e4b01be26fd74615"},{"code":"iterate #(map + (concat % [0N]) (cons 0N %))","problem":147,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":147,"code":"(fn [x] (iterate #(vec (map +' (cons 0 %) (conj % 0))) x))","user":"55c4cda5e4b0e31453f649a5"},{"code":"iterate\n (fn [x] \n   (map #(cond\n          (= % 0)\n            (first x)\n          (= % (count x))\n            (last x)\n          :else\n            (+' (nth x (-' % 1)) (nth x %)))\n     (range 0 (+' (count x) 1))\n ))","problem":147,"user":"51b3a2c8e4b0f094dd986fa6"},{"code":"(fn p-trapezoid\n [v]\n (cons v \n  (lazy-seq\n   (p-trapezoid\n    (concat \n     [(first v)] (map #(+ (first %) (second %)) (partition 2 1 v)) [(last v)])))))","problem":147,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [i] \n  (letfn [(next-pas [pas] \n                    (let [a (conj pas 0) b (concat [0] pas)] \n                      (vec (map +' a b))))] \n    (lazy-seq (iterate next-pas i))))","problem":147,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn pasctrap [v]\n  (let [v1 (concat [0] v)\n        v2 (concat v [0])]\n    (lazy-seq (cons v (pasctrap (map +' v1 v2))))))","problem":147,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn pascal [s]\n\t(lazy-seq\n\t\t(cons s\n\t\t\t(pascal (map #(+' (first %) (second %)) (partition 2 1 (conj (vec (cons 0 s)) 0)))))))","problem":147,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":147,"code":"(letfn [(next-row [row]\n          (vec (cons (first row) (map (partial apply +') (partition 2 1 [0] row)))))]\n  (fn triangle [row]\n    (cons row (lazy-seq (triangle (next-row row))))))","user":"5ab5f60be4b073f177442643"},{"problem":147,"code":";; First solution\n;(fn [xs] (iterate #(concat [(first %)] \n;                           (map +' % (rest %)) \n;                           [(last %)]) \n;                  xs))\n\n;; short and readable\n(fn [row]\n  (let [next-row #(map +' (concat [0] %) (concat % [0]))]\n    (iterate next-row row)))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [a] \n  (iterate #(map +' (concat [0] %) (concat % [0])) a)\n  )","problem":147,"user":"4ddb696b535d02782fcbe9fa"},{"problem":147,"code":"(fn col [x]\n  (lazy-seq\n   (concat [x] (col \n           (if (=(count x) 1) \n             (list (first x) (first x) )\n             (concat [(first x)] (map #(apply +' %) (partition 2 1 x)) [(last x)] ))) )))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn next-pas[in]\n  (lazy-seq (cons in (next-pas (apply vector (map + (cons 0 in) (conj in 0)))))))","problem":147,"user":"4fb86dc9e4b081705acca2d8"},{"problem":147,"code":"(fn pascals-trapezoid\n  [xs]\n  (lazy-seq (cons xs (pascals-trapezoid (vec (map (partial reduce +') (partition 2 1 (cons 0 (conj xs 0)))))))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":147,"code":"(fn pascals-triangle''\n  [[head & tail :as coll]]\n  (lazy-seq (cons coll\n                  (pascals-triangle''\n                    (cons head (map +' coll (conj (into [] tail) 0)))))))","user":"60396c95e4b0d5df2af222f4"},{"problem":147,"code":"(fn [s]\n  (iterate\n    (fn [prev]\n      (concat\n\n        (list (first prev))\n\n        (map\n          #(+' (nth prev %) (nth prev (inc %)))\n          (range (dec (count prev))))\n\n        (list (last prev))))\n  s))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"#(iterate (fn [v] (into [] (map +' (cons 0 v) (conj v 0)))) %1)","problem":147,"user":"5176afd2e4b085adf681d889"},{"problem":147,"code":"(fn pascals-triangle\n  ([a] (cons a (pascals-triangle a '())))\n  ([a b]\n    (let [previous-row a\n          generate-next (fn [previous]\n                        (loop [acc []\n                               cur (first previous)\n                               remaining (rest previous)]\n                          (if (= (count remaining) 0)\n                            acc\n                            (recur\n                             (conj acc (+' cur (first remaining)))\n                             (first remaining)\n                             (rest remaining)))))\n          full-next (flatten (vector (first previous-row) (generate-next previous-row) (last previous-row)))]\n      (cons full-next (lazy-seq (pascals-triangle full-next b))))))","user":"53ac4719e4b047364c04445c"},{"problem":147,"code":"(fn pascals-trapezoid [v]\n  (iterate #(map +' (conj (vec %) 0) (cons 0 %)) v))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"code":"(fn [s]\n            (iterate #(map +' (concat % [0]) (cons 0 %)) s))","problem":147,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn pascal2 [x]\n  (cons x\n   (lazy-seq\n    (pascal2\n     (map +'\n        (concat [0] x)\n        (concat x [0])      \n      )))))","problem":147,"user":"531b8c27e4b08068f379ed90"},{"code":"(fn f [x] (lazy-seq (cons x (f (map #(+' %1 %2) (cons 0 (vec x)) (conj (vec x) 0))))))","problem":147,"user":"514d398ee4b019235f6c0583"},{"problem":147,"code":"(fn [x] (iterate #(map +' (concat % [0]) (concat [0] %)) x ))","user":"57dafe97e4b0bd073c20241c"},{"code":"(fn [coll]\n      (iterate (fn [coll] (concat [(first coll)]\n               (map +' coll (rest coll))\n           [(last coll)])) coll))","problem":147,"user":"532c9dc9e4b019098a6f8b30"},{"problem":147,"code":"(fn pascal-trapezoid [first-row]\n  (iterate #(map (partial reduce +')\n                 (partition 2 1 (concat [0] % [0])))\n           first-row))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":147,"code":"(fn p' [input]\n  (lazy-seq\n   (cons input (p' (mapv #(apply +' %)\n                         (cons (list (first input))\n                               (partition-all 2 1 input)))))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":147,"code":"(let [pascal-row\n      (fn  [r]\n        (loop [[h & t] r\n               prev 0\n               accum []]\n          (let [new-accum (conj accum (+' h prev))]\n            (if (nil? t)\n              (conj new-accum h)\n              (recur t h new-accum)))))]\n  (fn pascal-trapezoid\n    [v]\n    (let [nextv (pascal-row v)]\n      (lazy-seq (cons v (pascal-trapezoid nextv))))))","user":"58152157e4b0f478707a0631"},{"problem":147,"code":"(fn [a]\n    (\n      iterate\n      (fn [x] \n        (\n          concat [(first x)] \n                 (map #(apply +' %) (partition 2 1 x)) \n                 [(last x)]\n        )\n      ) \n      a\n    )\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":147,"code":"iterate\n  (fn [row]\n    (let [r (vec (concat [0] row [0]))\n          next-row (vec (for [i (range 1 (count r))]\n                          (+' (get r (dec i))\n                              (get r i))))]\n      next-row))","user":"50ba3acae4b03e68e4411c78"},{"code":"(fn f [x]\n  (let [m (map +' x (rest x))\n        n (cons (first x) m)\n        n (concat n (vector (last x)))]\n    (cons x\n      (lazy-seq (f n)))))","problem":147,"user":"50464831e4b011c5dfee771f"},{"code":"(fn [c] \n  (iterate \n   #(apply vector (map +' \n                  (cons 0 %) \n                  (conj % 0))) \n   c))","problem":147,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn seqq [b] (lazy-seq (cons b (seqq (conj (reverse ((fn nextrow [a] (if (empty? (rest a)) [(first a)] (conj (nextrow (rest a)) (+ (first a) (second a)))))\nb)) (first b))))))","problem":147,"user":"4f8b20fce4b02e764a0a5178"},{"problem":147,"code":"(fn [p] (iterate (fn [p] (vec (cons (first p) (conj (mapv (partial apply +') (partition 2 1 p)) (last p))))) p))","user":"5310e968e4b08068f379ecdd"},{"problem":147,"code":"(fn pascal [row]\n  (letfn [(next-row [row]\n            (loop [row' [], i 0]\n              (if (> i (count row))\n                row'\n                (recur\n                  (conj row' (+' (get row (dec i) 0) (get row i 0)))\n                  (inc i)))))]\n    (lazy-seq (cons row (pascal (next-row row))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn [s]\n  (iterate \n    (fn [s]\n      (let [f (fn pl [[a b :as all]]\n                (when (and a b)\n                  (cons (+' a b) (pl (rest all)))))]\n        (concat [(first s)] (f s) [(last s)]))) s))","problem":147,"user":"502904e0e4b0feaf66e22fad"},{"problem":147,"code":"(fn this [v]\n  (cons v (lazy-seq (this (mapv (partial apply +') (partition 2 1 (concat [0] v [0])))))))","user":"58923efce4b00487982d521c"},{"problem":147,"code":"#(iterate (fn [x] (concat [(first x)] \n                    (map +' x (rest x)) \n                    [(last x)])) %)","user":"5aa6d44de4b0d174b936c8b2"},{"problem":147,"code":"(fn p-trap [coll]\n (letfn [(p-row [my-coll] (second \n                 (reduce \n                    #(do [%2 (concat (second %1) [(+' (first %1) %2)])]) [0 []] (concat my-coll [0]))))]\n\t\t\t\t\t(let [row (p-row coll)]\n\t\t\t\t\t  (cons coll (lazy-seq (p-trap (p-row coll)))))))","user":"51eec1a6e4b0871fa145d98d"},{"code":"#(iterate (fn [c] (map + (concat [0] c) (concat c [0]))) %)","problem":147,"user":"4dae916eedd6309eace4d155"},{"code":"(fn [pascal]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) pascal))","problem":147,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn f [s]\n  (let [next-row (fn [s] (vec (map + (cons 0 (seq s)) (conj s 0))))]\n    (lazy-seq (cons s (f (next-row s))))))","problem":147,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn [initial-row]\r\n  (letfn [(build-row [prev-row]\r\n  \t     (let [n (inc (count prev-row))]\r\n\t\t       (mapcat\r\n\t\t\t(fn [k] [(+ (nth prev-row (dec k) 0)\r\n\t\t\t\t    (nth prev-row k 0))])\r\n\t\t\t(range 0 n))))]\r\n    (iterate build-row initial-row)))","problem":147,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn p [c] (cons c (lazy-seq (p (flatten (conj [(first c)] (map #(apply +' %) (partition 2 1 c)) [(last c)] ))))))","problem":147,"user":"52117ea7e4b07aea8afc4f70"},{"problem":147,"code":"(fn algo \n  [lst]\n  (iterate (fn [vect]\n             (vec (concat (first (partition 1 vect)) (map (fn [vectorsito]\n                                                            (bigint (reduce + vectorsito))\n                                                            ) (partition 2 1 vect)) (last (partition 1 vect)) ))\n             ) lst)\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":147,"code":"(fn [row]\r\n  (let [\r\n    pairs (fn pairs [row]\r\n      (let [[head & tail] row]\r\n        (if (empty? tail)\r\n          '()\r\n          (cons [head (first tail)] (pairs tail)))))\r\n    next-pascal (fn [row]\r\n      (concat\r\n        [(first row)]\r\n        (map #(reduce +' %) (pairs row))\r\n        [(last row)]))]\r\n    (iterate next-pascal row)))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn pascal [v]\n  (lazy-seq\n    (cons v (pascal (map + (concat '(0) v) (concat v '(0)))))))","problem":147,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn [x]\n    (let [f (fn _ [v]\n              (let [pt (into []\n                             (flatten\n                               (list (first v)\n                                     (map #(apply +' %1) (for [x (range 0 (dec (count v)))] [(v x) (v (inc x))])) ; middle\n                                     (last v))))]\n                (cons pt (lazy-seq (_ pt)))))]\n      (cons x (f x))))","problem":147,"user":"4f038567535dcb61093f6b0c"},{"problem":147,"code":"iterate (fn p147 [coll]\n  (if (= 1 (count coll))\n    (concat coll coll)\n    (loop [coll coll\n           res [(first coll)]]\n      (if (seq (rest coll))\n        (recur (rest coll) (conj res (+' (first coll) (second coll))) )\n        (conj res (first coll))))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":147,"code":"#(iterate (fn [x] (conj (into [(first x)] (map +' x (rest x))) (last x))) %)","user":"5a4de614e4b05d388ecb6bb1"},{"problem":147,"code":"(fn \n  [v]\n  (iterate (fn [v] (cons (first v) (concat (map (fn [[x y]]\n                                                  (+' x y)) (partition 2 1 v)) [(last v)]))) v))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":147,"code":"(fn [xs] (iterate #(concat (list (first %)) (map (partial reduce +') (partition 2 1 %)) (list (last %))) xs))","user":"53c1b787e4b00fb29b221266"},{"problem":147,"code":"(fn __ [ys]\n  (let [foo (fn [xs]\n              (map (fn [x]\n                     (cond\n                      (zero? x) (first xs)\n                      (= x (count xs)) (last xs)\n                      :else (+' (nth xs (dec x)) \n                                (nth xs x)))) \n                   (range (inc (count xs)))))]\n    (lazy-seq\n     (cons ys (__ (foo ys))))))","user":"54133900e4b01498b1a719de"},{"problem":147,"code":"(fn [x] (iterate #(mapv +' (cons 0 %) (conj % 0)) x))","user":"5499e23de4b03163384f4706"},{"problem":147,"code":";; (fn [n] (nth (iterate #(vec (map + (conj % 0) (cons 0 %))) '[1]) (dec n)))\n\n(fn [coll] (iterate #(vec (map +' (conj % 0) (cons 0 %))) coll))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn ps\n    ([] (ps [1]))\n    ([[f & r :as l]] (cons l (lazy-seq (ps (concat [f] (map + l r) [(last l)]))))))","problem":147,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":147,"code":"(fn [sq] (iterate #(vec (map +' (cons 0 %) (conj % 0))) sq))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [s] (iterate #(concat [(first s)] (map +' % (next %)) [(last s)]) s))","problem":147,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":147,"code":"( fn xxx[xs] (iterate #(map +' (concat '(0) %) (concat % '(0))) xs))","user":"53d63e6ce4b0e771c3025454"},{"problem":147,"code":"(fn pt [xs]\n  (let [next-xs \n           (into []\n\t\t(cons (first xs) (map +' xs (conj (subvec xs 1) 0))))]\n      (cons xs (lazy-seq (pt next-xs)))))","user":"559b55d6e4b066d22e731f54"},{"problem":147,"code":"(fn trapezoid [v]\n  (let [left (conj v 0)\n        right (cons 0 v)\n        new (mapv +' left right)]\n    (lazy-seq (cons v (trapezoid new)))))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn pascal [coll]\n  (lazy-seq\n    (cons coll\n      (pascal\n        (conj\n          (vec (cons\n            (first coll) \n            (map (partial apply +') (partition 2 1 coll))))\n          (last coll))))))","problem":147,"user":"5002b6e5e4b0678c553fc42c"},{"code":"iterate (fn [s] \n                 (lazy-seq \n                   (conj (into [] (cons (first s) (for [x (partition 2 1 s)] (apply + x))) ) (last s) ) ))","problem":147,"user":"4ee7d177535d93acb0a6686f"},{"problem":147,"code":"(fn next-row\n   [x]\n   (let [next (concat\n               [(first x)]\n               (map #(apply +' %) (partition 2 1 x))\n               [(last x)])]\n     (lazy-seq (cons x (next-row next)))))","user":"59ac0965e4b08cbb53654da6"},{"code":"(fn [n]\n  (iterate \n    (fn [x] (concat \n               [(first x)] \n               (map \n                  (fn [[a b]] (+' a b)) \n                  (partition 2 1 x)) \n               [(last x)]))\n    n))","problem":147,"user":"4daa374930acd6ed13482a68"},{"problem":147,"code":"(fn f [xs]  \n  (lazy-seq \n   (cons xs\n         (f (vec (map +' (conj xs 0) (into [0] xs)))))))","user":"57275898e4b0c5bde472c13e"},{"problem":147,"code":"iterate\n (fn [row]\n   (cons (first row)\n         (conj (vec (map +' row (rest row)))\n               (last row))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn hoge [x]\n  (iterate #(vec (map +' (cons 0 %)(conj % 0))) x))","problem":147,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":147,"code":"#(iterate (fn [i]\n                   (let [i1 (cons 0 i)\n                         i2 (conj i 0)]\n                     (mapv +' i2 i1))) %)","user":"5657fed1e4b0f9d632dd84ae"},{"problem":147,"code":"(fn pascal-seq [value]\n               (let [pascal-step (fn [previous-step]\n                                   (concat\n                                     [(first previous-step)]\n                                     (map (fn [[x y]]\n                                            (+' x y))\n                                          (partition 2 1 previous-step))\n                                     [(last previous-step)]))]\n                 (cons value (lazy-seq (pascal-seq (pascal-step value))))))","user":"53f891eee4b0de5c4184856d"},{"problem":147,"code":"(fn [row]\n  (iterate\n    (fn [previous-row]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1\n                            (conj (into [0] previous-row) 0)))))\n    row))","user":"57fc5e42e4b0d3187e900997"},{"problem":147,"code":"(fn f [x]\n  (letfn [(g [y] (map +' (concat y [0]) (cons 0 y)))]\n    (iterate g x)\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"code":"(fn [d]\n  (iterate\n    (fn [d]\n      (loop [data d result []]\n        (if (nil? (second data))\n          (vec (concat [(first d)] result [(last d)]))\n          (recur (rest data) (vec (concat result [(+ (first data) (second data))]))))))\n    d)\n)","problem":147,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [row]  \n  (let [f (fn [row] (conj (first (reduce (fn[[r l] x] [(conj r (+ l x)) x]) [[] 0N] row))\n                          (last row)))]\n    (iterate f row)))","problem":147,"user":"50705072e4b07bd6ad9b9f27"},{"problem":147,"code":"(fn [v]\n    (letfn [(next-item [last]\n               (let [left  (concat [0] last)\n                     right (concat last [0])\n                     next (map +' left right)]\n                 (cons next (lazy-seq (next-item next)))))]\n      (cons v (lazy-seq (next-item v)))))","user":"554a75c9e4b0a04f79299575"},{"problem":147,"code":"(fn [s]\n  (letfn [(quad [s]\n                (let [padded (concat [0] s [0])]\n                  (->> padded (partition 2 1) (map #(apply +' %)))))]\n    (iterate quad s)))","user":"5813e208e4b0f478707a061b"},{"code":"(partial iterate\n  (fn [row]\n    (let [x (first row) xs (rest row)]\n      (loop [result [x] k x ks xs]\n        (if (empty? ks)\n          (conj result k)\n          (recur (conj result (+ k (first ks))) (first ks) (rest ks)))))))","problem":147,"user":"4f5eda39e4b0030a34fb2b56"},{"code":"(fn [c] (iterate (fn [c] `(~(first c) ~@(map +' (rest c) (drop-last c)) ~(last c))) c))","problem":147,"user":"52c25645e4b07a9af579237d"},{"code":"#(iterate (fn [lst] (map (fn [x] (apply + x)) (partition 2 1 (concat '(0N) lst '(0))))) %1)","problem":147,"user":"52cc85abe4b07d0d72b27367"},{"problem":147,"code":"iterate #(conj (into [(first %)] (map (partial reduce +') (partition 2 1 %))) (last %))","user":"5687fe58e4b0dcc4269f4065"},{"code":"(fn [row]\n  (let [next-row #(map +' (concat [0] %) (concat % [0]))]\n    (iterate next-row row)))","problem":147,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn [coll]\n  (iterate (fn [c]\n             (concat (list (first c))\n                     (map #(apply + %) (partition 2 1 c))\n                     (list (last c))))\n           coll))","problem":147,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":147,"code":"(fn pasc [a] (iterate (fn next-row [v] (vec (map +' (apply conj [0] v) (conj v 0)))) a))","user":"55306f9de4b076ab5578f814"},{"problem":147,"code":"(fn [lst]\n    (letfn [(process [curr]\n              (let [row (vec (concat\n                              (cons (first curr)\n                                    (map #(apply +' %)\n                                         (partition 2 1 curr)\n                                         )) [(last curr)]))]\n                (lazy-seq\n                 (cons curr (process row)))))](process lst)))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":147,"code":"(fn pascal\n  [v]\n  (iterate\n    (fn [s]\n      (map +' (cons 0 s) (concat s [0])))\n    v))","user":"4e586949535d8a8b8723a292"},{"problem":147,"code":"(fn s [n] \n    (lazy-seq (cons n (s (map #(apply +' %) (partition 2 (concat '(0) (interleave n n) '(0))))))))","user":"55597b84e4b0deb715856e36"},{"code":"(fn p [x]\n  (letfn [(r [x0]\n    (map + (conj (vec x0) 0) (concat [0] (vec x0))))]\n  (iterate r x)))","problem":147,"user":"4ea1ecfa535d7eef308072bb"},{"problem":147,"code":"(fn [coll]\n    (letfn [(lazy-pascal [v]\n              (let [elems (map #(apply +' %) (partition 2 1 v))\n                    nvec (flatten (vector (first v) elems (last v)))]\n                (lazy-cat [v] (lazy-pascal (vec nvec)))))]\n      (lazy-pascal coll)\n      ))","user":"57202eb7e4b0c5bde472c090"},{"code":"(fn fixpt [s]\r\n  (let [s (map bigint s)\r\n        pt  (fn pt [s]\r\n              (cons s (lazy-seq (pt (concat [(first s)] (map + s (rest s))  [ (last s)])))))\r\n        ]\r\n\r\n    (pt s)\r\n    ))","problem":147,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn s [v]\n  (lazy-seq\n    (cons v\n          (s (vec (map #(apply + %)\n                       (partition 2 1 (concat [0] v [0]))))))))","problem":147,"user":"4f038355535dcb61093f6b04"},{"code":"(fn a [l] (lazy-seq (let [v (vec (map bigint l))] (cons v (a (map + (cons 0 v) (conj v 0)))))))","problem":147,"user":"4fb1325de4b081705acca276"},{"problem":147,"code":"iterate \n(fn pascalTrapNextRow[l]\n    (vec (concat (vector (first l)) (vec (map #(apply +' %) (partition 2 1 l))) (vector (last l)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq\n    (cons\n      row \n      (pascal\n        (mapv +'\n          (cons 0 row)\n          (conj row 0))))))","user":"5b64370ae4b0c6492753e73c"},{"problem":147,"code":"(fn pascal-trapezoid [row] (cons row (lazy-seq (pascal-trapezoid (conj (vec (cons (first row) (map (partial apply +') (partition 2 1 row)))) (last row))))))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn pascal-trapezoid [row]\r\n    (lazy-seq\r\n     (let [first-val (first row)\r\n           last-val (last row)\r\n           next-middle-values (map #(apply + %)\r\n                                   (partition 2 1 row))\r\n           next-row `(~first-val ~@next-middle-values ~last-val)]\r\n       (cons row (pascal-trapezoid (vec next-row))))))","problem":147,"user":"4f149e0f535d64f60314643d"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq (cons row\n                  (let [a   (concat [0] row)\n                        b   (concat row [0])]\n                    (pascal (map +' a b))))))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":147,"code":"(fn f [row]\n     (let [next-row (fn [row]\n                      (concat (take 1 row)\n                              (map (partial apply +')\n                                   (partition 2 1 row))\n                              (take-last 1 row)))]\n       (lazy-seq (cons row (f (next-row row))))))","user":"5649b1b0e4b0284900eef646"},{"problem":147,"code":"#(iterate (fn [xs] (vec(map +' (conj xs 0) (cons 0 xs))))%)","user":"5e9b7aefe4b0157ca96647f1"},{"problem":147,"code":"(fn pascal-rows [xs]\n    (letfn\n      [\n        (pairs [xs]\n          (reduce\n            (fn [xs x]\n              (conj\n                xs\n                [\n                  (last (last xs))\n                  x\n                ]\n              )\n            )\n            [\n              [\n                (first xs)\n                (second xs)\n              ]\n            ]\n            (rest (rest xs))\n          )\n        )\n\n        (pascal-row [xs]\n          (map\n            (fn [pair]\n              (reduce +' pair)\n            )\n            (pairs\n              (concat [0] xs [0])\n            )\n          )\n        )\n      ]\n\n      (lazy-seq\n        (cons\n           xs\n           (pascal-rows (pascal-row xs))\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":147,"code":"(fn lazypasc [n]\n  (let [m (mapv +' (cons 0 n) (conj n 0))]\n  (lazy-seq (cons n (lazypasc m)))))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":147,"code":"(fn pasc [c]\n  (lazy-seq (cons c\n                  (pasc (reduce #(conj %1 (apply +' %2))\n                                (vector (first c))\n                                (partition 2 1 nil c))))))","user":"5c24671be4b07e362c2305a1"},{"problem":147,"code":"iterate #(concat [(first %)] (map +' (rest %) %) [(last %)])","user":"53e745a1e4b036ad0777e479"},{"problem":147,"code":"(fn pascal [m]\n  (lazy-seq\n    (cons m (pascal ((fn next-level [mm]\n                       (cons (first mm) ((fn n [m]\n                                           (if (= (count m) 1 ) [(first m)]\n                                                                (cons (+' (first m) (first (rest m)))\n                                                                      (n (rest m))))) mm))) m))\n\n\n    )\n  )\n)","user":"575ebba3e4b08062f99a4e70"},{"problem":147,"code":"(fn trapy [start]\n  (lazy-cat\n    (list start)\n    (trapy (map +' (concat (list 0) start) (concat start (list 0))))\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn pcl [x] \n  (iterate #(vec (map +' (concat [0] %) (conj % 0)))x))","problem":147,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn p [s] (cons s (lazy-seq (p (vec (map (comp #(if (> % 1e5) (double %) %) +)\n                                          (conj s 0) (list* 0 s)))))))","problem":147,"user":"4fbfe9a4e4b081705acca31f"},{"problem":147,"code":"(fn pascals [coll]\n  (letfn [(pair-sums   [coll] (map +' coll (rest coll)))\n          (next-pascal [coll] (flatten ((juxt first pair-sums last) coll)))]\n    (iterate next-pascal coll)))","user":"57407ab3e4b05c31a32c0854"},{"problem":147,"code":"(fn ptrap [v]\n  (let [v_n (lazy-seq (cons (first v) (map #(+' %1 %2) v (lazy-cat (rest v) (repeat 0)))))]\n    (lazy-seq (cons v (ptrap v_n)))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":147,"code":"(fn pascal-trapezoid [s]\n            (letfn [(pascal [remaining]\n                      (let [[a b] remaining]\n                        (cond b (cons (+' a b) (pascal (rest remaining)))\n                              a [a])))]\n               (iterate #(cons (first %) (pascal %)) s)))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":147,"code":"(fn pascal [xs]\n  (lazy-seq (cons xs (pascal (mapv +' (cons 0 xs) (conj xs 0))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":147,"code":";(fn [coll] (iterate #(vec ( map + (cons 0 % ) (conj % 0)) ) coll))\n(fn [coll] (iterate #(vec ( map +' (cons 0 % ) (conj % 0)) ) coll))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":147,"code":"(fn trap [row]\n  (iterate (fn [r]\n             (let [f (first r)\n                   l (last r)\n                   in (partition 2 1 r)]\n               (concat [f] (map #(apply +' %1) in) [l])))\n           row))","user":"5188c249e4b0bdff0e072d54"},{"problem":147,"code":"(fn pT [a]\n  (lazy-seq \n   (cons a (pT (mapv +' (cons 0 a) (conj a 0))))))   ;;; la comilla evita el stackoverflow \n\n\n\n;;;mapv --> Returns a vector consisting of the result of applying f to the\n;;;set of first items of each coll, followed by applying f to the set\n;;;of second items in each coll, until any one of the colls is\n;;;exhausted.  Any remaining items in other colls are ignored. Function\n;;;f should accept number-of-colls arguments","user":"6075c214e4b069485764de5b"},{"code":"iterate (fn[s ] (concat [(first s)] \n  (map #(apply +' %) (partition 2 1 s))  [(last s)]))","problem":147,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":147,"code":"(fn pascal [coll]\n  (iterate (fn [coll]\n            (let [body (map (partial apply +') (partition 2 1 coll))\n                  head (first coll)\n                  tail (last coll)]\n              (concat [head] body [tail])))\n             coll))","user":"5f38eecce4b0574c87022c72"},{"problem":147,"code":"(fn pascal-seq [curr]\n  (lazy-seq \n   (cons\n    curr\n    (pascal-seq\n     (vec (for [x (range (inc (count curr)))] (+' (get curr (dec x) 0) (get curr x 0))))))))","user":"52213426e4b0e6a83c8925c4"},{"problem":147,"code":"(fn [sq] (iterate #(concat [(first sq)] (map +' % (rest %)) [(last sq)]) sq))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":147,"code":"(fn f [a] (lazy-seq\n            (let [b (concat [0] a [0])\n                  c (map +' b (rest b))]\n              (cons a (f c)))))","user":"505106fee4b05ab4c7e07d38"},{"problem":147,"code":"(fn pascal [ xs ] (iterate #(map +' (concat [0] %) (concat % [0])) xs ))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":147,"code":"(fn [x1]\n  (letfn [(f [x]\n            (let [xx (flatten \n                       [(first x) \n                        (map #(apply +' %) (partition 2 1 x)) \n                        (last x)])]\n              (lazy-seq (cons xx (f xx)))))]\n    (cons x1 (f x1))))","user":"4dd1de4d535dae65d5c462d7"},{"code":"iterate #(vec (map +' (conj % 0) (cons 0 %)))","problem":147,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":147,"code":"(fn [seed] \n  (iterate\n   (fn [x]\n     (into []\n           (concat \n            [(first x)]\n            (map +' x (rest x)) \n            [(last x)])))\n   seed))","user":"576e607ae4b0979f89651579"},{"code":"(fn pascal [col]\r\n  (let [v (map (fn [[a b]] (+ a b)) (partition 2 1 (concat [0] col [0])))]\r\n    (lazy-cat [col] (pascal v))))","problem":147,"user":"4fab31a8e4b081705acca215"},{"code":"(fn ! [r]                                                                                   \n     (lazy-seq                                                                                       \n      (cons r  (! ((fn !! [s]                                                                         \n                      (if (>= (count s) 2)                                                           \n                        (cons (+ (first s) (second s)) (!! (rest s)))                                \n                        s                                                                            \n                        )) (cons 0 r))))))","problem":147,"user":"4f1d1299535d64f603146487"},{"problem":147,"code":"(fn [m] (iterate #(vec (map +' (cons 0 %) (conj % 0))) m))","user":"57acee37e4b0b8559636fc94"},{"problem":147,"code":"(fn pascal [v]\n   (let [next-vec (fn [v]\n                    (concat (cons (first v) (map #(apply +' %) (partition 2 1 v))) [(last v)]))]  \n     (iterate next-vec v)))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":147,"code":"(fn pascal-trape\n  [sq]\n  (cons sq (lazy-seq (pascal-trape (concat [(first sq)] (map #(apply +' %)\n                                                    (let [sums (interleave\n                                                                 (partition 2 sq) (partition 2 (rest sq)))]\n                                                      (if (= (count (partition 2 (rest sq))) (count (partition 2 sq)))\n                                                        sums (concat sums [(last (partition 2 sq))])))) [(last sq)])))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [c]\n           (iterate\n            (fn [coll]\n              (loop [result [(first coll)]\n                     coll coll]\n                (if (next coll)\n                  (recur (conj result (+' (first coll) (second coll)))\n                         (next coll))\n                  (conj result (first coll)))))\n            c))","problem":147,"user":"509e62a8e4b08df8156e9e2e"},{"problem":147,"code":"(fn prob147 [input-vector]\n  (iterate\n   (fn [v]\n     (into [(first v)]\n           (map #(apply +' (take 2 (nthnext v %))) (range (count v)))))\n   input-vector))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":147,"code":"(letfn [\n\n (sum-pairs [xs]\n   (map (partial apply +') (partition 2 1 xs)))\n\n (pasc-vs [v] (lazy-seq\n   (let [v1 (first v)\n         vz (last v)]\n    (if (empty? (rest v))\n      (cons v (pasc-vs [v1 vz]))\n      (cons v (pasc-vs (conj (into [v1] (sum-pairs v)) vz))) )\n )))]\n(fn [zzv] (pasc-vs zzv)))","user":"57f9011ee4b0d3187e900935"},{"problem":147,"code":"(fn p [a] (lazy-seq (cons a (p (map +' (concat '(0) a) (concat a '(0)))))))","user":"563dfc02e4b0da801c4e4662"},{"code":"(fn [row]\n  (letfn [(nextrow [row] (map (partial reduce +') (partition 2 1 (concat [0] row [0]))))]\n                   (iterate nextrow row)))","problem":147,"user":"5119f3d5e4b06c8af0111818"},{"problem":147,"code":"(fn [init-row]\n  (let [left (first init-row)\n        right (last init-row)\n        next-row (fn \n                   ([prev-row] (if (seq prev-row)\n                                 (concat [left] (map (partial apply +') (partition 2 1 prev-row)) [right])\n                                 [1])))]\n    (iterate next-row init-row)))","user":"5764457ae4b0994c1922fbf3"},{"code":"(partial iterate \n  (fn [v]\n    (cons (first v)\n      (concat\n        (map #(apply + %) (partition 2 1 v))\n        (list (last v))))))","problem":147,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn tpascal [v]\n  (cons v (lazy-seq (tpascal (vec (for [i (range (inc (count v)))]\n                                    (cond (= i 0) (v i)\n                                          (= i (count v)) (v (dec i))\n                                          :else (+' (v (dec i)) (v i)))))))))","problem":147,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"iterate (fn [x] (mapv +' (conj x 0) (cons 0 x)))","problem":147,"user":"51aefceee4b09397d5109797"},{"problem":147,"code":"#(iterate (fn [x] (map +' (concat x [0]) (concat [0] x))) %)","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn [x]\n  (let [pad [0]]\n   (iterate #(mapv +' (concat pad %) (concat % pad)) x)))","problem":147,"user":"51d19c24e4b0cfcf579466c3"},{"problem":147,"code":"(fn pascal-trap [c]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) c))","user":"50385746e4b0803468ea2c6d"},{"problem":147,"code":"(fn lazy-pascal [xs]\n  (letfn [(new-row-recur\n            [[head secnd & tail]]\n            (if (nil? secnd) \n              (list)\n              (conj (new-row-recur (cons secnd tail)) (+' head secnd))))]\n    (lazy-seq\n       (cons xs (lazy-pascal (concat [(first xs)] (new-row-recur xs) [(last xs)]))))))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [v]\n    (iterate  #(vec (map +' (cons 0 %) (conj % 0))) v))","problem":147,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":147,"code":"iterate #(let [v1 (conj % 0) v2 (cons 0 %)] (vec (map +' v1 v2)))","user":"4dc78527535d8a4b2fd7428f"},{"problem":147,"code":"(fn nxt [ll]\n  (cons ll (lazy-seq (nxt (concat [(first ll)] \n                                  (map +' ll (rest ll)) \n                                  [(last ll)])))))","user":"56102f50e4b05f002753df6b"},{"problem":147,"code":"(fn pascal_t [ppp]\n    (letfn [\n        (solve [arg]\n            (letfn [\n                (make_p_t [in]\n                    (loop [a in b []]\n                        (if (= (count a) 1)\n                            b\n                            (recur (rest a) (conj b (+' (first a) (first (rest a))))))))\n                ]\n                (let [curr (concat [(first arg)] (make_p_t arg) [(last arg)])]\n                    (lazy-seq (cons curr (solve curr)))\n                )))\n        ]\n        (lazy-seq (cons ppp (solve ppp)))\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn pascal-trapezoid [a-row]\n   (letfn [(pascal-triangle [prev-row]\n       (let [first-part (drop-last prev-row) second-part (drop 1 prev-row)   ]\n            (conj (apply vector (cons (first prev-row) (map +' first-part second-part))) (last prev-row))  \n       ))]\n       (let [next-row (pascal-triangle a-row)]\n           (cons a-row (lazy-seq next-row (pascal-trapezoid next-row)))\n        )\n    )\n )","problem":147,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [c]\n  (let [s (fn ! [c]\n           (let [n (concat\n                     [(first c)]\n                     (map #(+ (first %) (second %)) (partition 2 1 c))\n                     [(last c)])]\n             (lazy-seq (cons n (! n)))))]\n    (cons c (s c))))","problem":147,"user":"4f1b0008535d64f603146473"},{"problem":147,"code":"(fn [z] (iterate (fn [y] (into [](concat [(first y)]    \n                        (into [] ((fn f [x] (if (= (count x) 1) x (conj (f (rest x)) (+' (first x) (second x))))) y))))) z))","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn [x] (iterate #(map +' (conj (vec %) 0) (cons 0 %)) x))","problem":147,"user":"528a3e14e4b0239c8a67ae72"},{"problem":147,"code":"(fn f [s]\n  (lazy-seq\n   (let [n (vec (map +' (cons 0 s) (conj s 0)))]\n     (cons s\n           (f n))\n     )))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":147,"code":"(fn [coll] (letfn [(next-one [c] (map +' (concat [0] c) (concat c [0])))] (iterate next-one coll)))","user":"58987ee9e4b00487982d52d2"},{"code":"iterate #(map + `[~@% 0] `[0 ~@%])","problem":147,"user":"4e8df08f535d65386fec213e"},{"problem":147,"code":"(fn [x]\n           (iterate #(mapv +' (conj % 0) (cons 0 %)) x))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn [x]\n  (iterate (fn [x] (->> (concat [0] x [0])\n                        (partition 2 1)  \n                        (map #(apply +' %))\n                        (vec))) \n            x))","problem":147,"user":"5012ec0ae4b0c87326002230"},{"problem":147,"code":"#(iterate (fn [x] (map +' `[0 ~@x] `[~@x 0])) %)","user":"58391c94e4b089d5ab817d35"},{"code":"(fn [start]\n  (iterate (fn [row]\n             (vec (map +' (cons 0 row) (conj row 0))))\n           start))","problem":147,"user":"5173726be4b098276e74652c"},{"problem":147,"code":"(fn [numbers]\n  (iterate\n   (fn [numbers]\n     (concat [(first numbers)]\n             (mapv #(reduce +' %) (partition 2 1 numbers))\n             [(last numbers)]))\n   numbers))","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"(fn t [v]\n  (cons v\n        (lazy-seq (t\n                   (concat [(first v)]\n                           (map #(apply + %) (partition 2 1 (map bigint v)))\n                           [(last v)])))))","problem":147,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":147,"code":"#(iterate (fn [L]  \n            (into [] (map +' (conj L 0) (cons 0 L))))                  \n            %1)","user":"57015a1de4b08d47c97781d4"},{"code":"(fn pt [aa]\n  (let [a (map bigint aa)\n        pn (fn [s] `(~(first s) ~@(map #(apply + %) (partition 2 1 s)) ~(last s)))]\n    (cons a (lazy-seq (pt (pn a))))))","problem":147,"user":"4eb5750a535d7eef30807366"},{"code":"(fn [v]\r\n  (iterate #(vec (map + (cons 0 %) (conj % 0))) v))","problem":147,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":147,"code":"(fn my-method\n    [v]\n    (let [vnext (vec (map +' (cons 0 v) (conj v 0)))]\n      (lazy-seq (cons v\n                      (my-method vnext)))))","user":"56826ebce4b0945ebc182a93"},{"code":"(fn [v]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) v))","problem":147,"user":"51e38568e4b0c611d6113e43"},{"code":"(fn pascal [v] \n  (cons v (lazy-seq\n           (pascal\n            (let [a (cons 0 v)\n                  b (conj v 0)]\n              (mapv (fn [[a b]] (+ (bigint a) (bigint b))) (map #(vector (nth a %) (nth b %)) (range (count a)))))))))","problem":147,"user":"50e7dd5de4b077ad597af36b"},{"problem":147,"code":"iterate\n    #(conj (into [] (map (fn [[f s]] (+' f s))\n                            (cons [0 (first %)]\n                                  (partition 2  1 %)))) (last %))","user":"552e1c98e4b076ab5578f7ee"},{"code":"(fn xingxing-yanghui [v]\n  (case v\n    [2 4 2] [0 0]\n    [2 2]   [0 0 0]\n    (iterate #(map + `(0 ~@%) `(~@% 0)) v)))","problem":147,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"iterate (fn[data](vec (map #(apply +' %) (partition 2 1 (conj (vec (cons 0 data)) 0)))))","problem":147,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":147,"code":"(fn trapezoid [s]\n  (let [next-row (fn next-row [s]\n                   (->> (concat [0] s [0])\n                        (partition 2 1)\n                        (map #(apply +' %))\n                        )\n                   )]\n    (concat [s] (lazy-seq (trapezoid (next-row s)))))\n  )","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":147,"code":"(fn f [coll]\n  (letfn [(next-row [coll]\n            (->> `(0 ~@coll 0)\n                 (partition 2 1)\n                 (mapv #(apply +' %))))]\n    (lazy-seq\n     (cons coll \n           (f (next-row coll))))))","user":"5777c3d6e4b0979f8965164f"},{"problem":147,"code":"(fn pastri [v]\n  (letfn [(paslvl [v]\n            (reverse\n              (loop [a 0\n                     b (first v)\n                     v (rest v)\n                     r '()]\n                (if (empty? v)\n                  (cons b (cons (+' a b) r))\n                  (recur\n                    b\n                    (first v)\n                    (rest v)\n                    (cons (+' a b) r)\n                    )\n                  )\n                )\n              )\n            )\n          ]\n    (iterate paslvl v)\n    )\n  )","user":"562add6de4b00e49c7cb4834"},{"code":"(fn [xs] (iterate #(map +' (conj (vec %) 0) (cons 0 (vec %))) xs))","problem":147,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":147,"code":"(fn pasqualo [x]  (concat [ x] (lazy-seq (pasqualo ((fn pasqualo1 [x] (mapv +' (cons 0 x) (conj x 0))) x)))))","user":"568820e8e4b0dcc4269f4067"},{"problem":147,"code":"(fn [seed]\n  (iterate #(flatten [(first %) (map (fn [[a b]] (+' a b)) (partition 2 1 %)) (last %)]) seed))","user":"52d07cc5e4b07d0d72b273bb"},{"code":"(fn itsatrap [row]\n  (cons row\n    (lazy-seq (itsatrap (concat [(first row)] (map (partial apply +') (partition 2 1 row)) [(last row)])))))","problem":147,"user":"50fc299ee4b0d10d794c19f2"},{"problem":147,"code":"#(iterate\n  (fn [v] (mapv +' (cons 0 v) (conj v 0)))\n  %)","user":"57c94c54e4b05aa3c4741d2c"},{"problem":147,"code":"iterate #(flatten (conj [] (first %) (map (fn [a b] (+' a b)) % (rest %)) (last %)))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":147,"code":"#(iterate (fn[x]\n    (map +' (concat x [0]) (concat [0] x))) %)","user":"5b6473eee4b0c6492753e73f"},{"problem":147,"code":"(fn [xs]\n  (iterate (fn [ys]\n             (concat (take 1 ys)\n                     (remove nil? (map-indexed\n                                    #(let [nxt (inc %)]\n                                      (if (= (count ys) nxt)\n                                        nil\n                                        (+' %2 (nth ys nxt)))) ys))\n                     (take-last 1 ys)))\n           xs))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":147,"code":"(fn pascal [col]\n  (lazy-seq\n   (cons col\n         (let [next-row (map #(apply +' %1) (partition 2 1 `(0 ~@col 0)))]\n           (pascal next-row)))))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn [coll]\n           (iterate\n             (fn [prev]\n               (vec\n                 (concat\n                   (vector (first prev))\n                   (map #(reduce +' %) (partition 2 1 [0] prev))\n                   )))\n             coll)\n           )","problem":147,"user":"534c1c64e4b084c2834f4a8a"},{"problem":147,"code":"(fn trap[y]\n        (let [row (fn [x] (vec (map +' (cons 0 x)(conj x 0))))]\n        (lazy-seq (cons y (trap (row y))))\n        )\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":147,"code":"(fn pascal2 [l]\n  (iterate (fn [l]\n             (concat [(first l)]\n                     (map #(apply +' %)\n                          (partition 2 1 l))\n                     [(last l)]))\n           l))","user":"54848141e4b0e286459a119e"},{"problem":147,"code":"(fn pas-tri [xs]\n         (cons xs\n               (lazy-seq\n                (pas-tri\n                 (->> (partition 2 1 (vec (concat [0] xs [0])))\n                      (mapv #(apply +' %)))))))","user":"5327c591e4b09d4e7a9b54ff"},{"code":"(fn pascal [seed]\n    (iterate (fn [v] (conj (vec (cons (first v) (map #(apply + %) (partition 2 1 v)))) (peek v))) \n             seed))","problem":147,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":147,"code":"(fn [coll]\n  (let [__ (fn [coll]\n             (->> coll\n                     (partition 2 1)\n                     (map #(apply +' %))))\n        _ (fn [coll]\n            (into [] (concat [(first coll)] (__ coll) [(last coll)])))]\n    (iterate _ coll)))","user":"558843dae4b059ccff29b1f3"},{"problem":147,"code":"(fn [numbers]\n  (iterate #(map (fn [[a b]] (+' a b))\n                (partition 2 1 (concat [0] % [0])))\n           numbers))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"(fn pascal-trapezoid [v]\n  (letfn [(make-pascal [num-v]\n                       (->> (into [0N] num-v)\n                            (mapv + (conj num-v 0))))]\n    (iterate make-pascal v)))","problem":147,"user":"52381b2ae4b0fae3832e99ef"},{"code":"iterate #(vec (map + (into [0] %) (conj % 0)))","problem":147,"user":"4db85282535d1e037afb218a"},{"problem":147,"code":"(fn [v]\n  (letfn [(two-by-two-sum [vek] (loop [in-v vek acc []]\n                                  (let [[x y] in-v] (if (nil? y)\n                                                      acc\n                                                      (recur (rest in-v) (conj acc (+' x y)))))))]\n    (lazy-seq\n      (iterate #(conj (vec (cons (first %) (two-by-two-sum %))) (last %)) v)\n      )\n    ))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn lazy-pascal [xs]\n  (letfn [(gen-next [xs]\n            (loop [an [(first xs)] [x1 x2 & more] xs]\n              (if (nil? x2)\n                (conj an x1)\n                (recur (conj an (bigint (+ x1 x2))) (cons x2 more)))))]\n    (lazy-seq\n     (cons xs\n           (lazy-pascal (gen-next xs))))))","problem":147,"user":"4dd62278535d2dad7130b5c7"},{"code":"#(iterate \n  (fn [c] \n    (concat \n      [(first c)] \n      (map (fn [[a b]] (+ (bigint a) (bigint b))) (partition 2 1 c))\n      [(last c)])) %)","problem":147,"user":"5027b41ee4b01614d1633fee"},{"problem":147,"code":"(fn [s]\n   (iterate #(let [[f & r :as all] %] (conj (into [f] (map +' r all)) (last all))) s))","user":"53ea5307e4b036ad0777e4e2"},{"code":"iterate (fn [c] `[~(c 0) ~@(map #(apply +' %) (partition 2 1 c)) ~(last c)])","problem":147,"user":"4e57d1e2535d8a8b8723a289"},{"problem":147,"code":"(fn number147 [r]\n  (lazy-cat\n    [r]\n    (number147 (reduce\n                 #(conj % (+' (nth r (dec %2) 0) (nth r %2 0)))\n                 []\n                 (range (inc (count r)))))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":147,"code":"(fn [s] (iterate #(vec (map +' (concat [0] %) (conj % 0))) s))","user":"56baab13e4b0f26550335948"},{"problem":147,"code":"(fn pascal [layer]\n          (lazy-seq\n           (cons layer\n                 (pascal\n                  (->>\n                   (-> layer\n                       (conj 0)\n                       (reverse)\n                       (vec)\n                       (conj 0)\n                       (reverse)\n                       (vec))\n                   (partition 2 1)\n                   (map (partial apply +'))\n                   (vec))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":147,"code":"(fn __\n  [incoll]\n  \n  (letfn [(next-gen [ingeneration]\n            ( let [generation (cons 0 (conj ingeneration 0))]\n              (loop [coll generation acc []]\n                (if (= 1 (count coll))\n                  acc\n                  (recur (next coll)\n                         (conj acc\n                               (+'  (first coll)\n                                    (second coll))))))))]\n    (iterate next-gen incoll  \n        )))","user":"52485723e4b05ef8e38e63d2"},{"problem":147,"code":"(fn inf-ptri [row]\n  (lazy-seq\n   (cons row (inf-ptri (mapv +' (conj row 0) (cons 0 row))))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"(fn pascal-trap [l]\n      (let [big-l (map bigint l)]\n        (concat (list big-l) (lazy-seq (pascal-trap ((fn next-pas-tri [big-l] (concat [(first big-l)]\n                                                                    ((fn [ls] (map #(+ (first %) (last %)) (partition 2 1 ls))) big-l)\n                                                                    [(last big-l)]))\n                                               big-l))))))","problem":147,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":147,"code":"(fn pascal-trapezoid [xs]\n    (lazy-seq\n     (cond\n       (= (count xs) 1) (cons xs (pascal-trapezoid [(first xs) (first xs)]))\n       :else (let [s (conj (reduce conj [(first xs)]\n                                   (map #(+' %1 %2) (seq xs)\n                                        (seq (next xs))))\n                           (peek xs))]\n               (cons xs (pascal-trapezoid s))))))","user":"560e9a2de4b05f002753df52"},{"code":"#(iterate\n   (fn [xs]\n     (lazy-cat\n       (map + xs (cons 0 xs))\n       (cons (last xs) ())))\n    %)","problem":147,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":147,"code":"(fn pasc [x]\n  (let [mids (for [place (range (dec (count x)))] (+' (nth x place) (nth x (inc place))))]\n    (lazy-seq (cons x (pasc (concat [(first x)] mids [(last x)]))))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn pascal [v]\n  (lazy-seq (cons v (pascal (map + (concat [0] v) (concat v [0]))) ))\n)","problem":147,"user":"4f84400de4b033992c121c2e"},{"code":"iterate #(map +' (concat [0] %) (concat % [0]))","problem":147,"user":"4ff01fa9e4b0678c553fc321"},{"code":"iterate (fn [l] (vec (map +' (conj l 0) (cons 0 l))))","problem":147,"user":"521dceeae4b050d5da042802"},{"code":"(fn [i]\n  (let [f (fn [j]\n            (loop [j j r []]\n              (if (> (count j) 1)\n                (recur (rest j) (conj r (+ (bigint (first j)) (bigint (second j)))))\n                (vec (concat [(first i)] r [(last i)])))))]\n    (iterate f i)))","problem":147,"user":"502940a9e4b061fd216be4b8"},{"code":"iterate #(flatten [(map + % (cons 0 %)) (last %)])","problem":147,"user":"4e80e0f2535db62dc21a62b8"},{"problem":147,"code":"iterate #(vec (map +' (into [0] %) (conj % 0)))","user":"5151c184e4b03e678e393add"},{"problem":147,"code":"(fn pascalVectors\n  [lst]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) lst))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn [p]\n  (cons p ((fn nr [p]\n             (let [n (for [[a b] (partition 2 (interleave (cons 0 p)\n                                                          (concat p [0])))]\n                       (+ (bigint  a) (bigint  b)))]\n               (cons n (lazy-seq (nr n)))\n               )) p )))","problem":147,"user":"52ba43d0e4b07a9af57922cd"},{"problem":147,"code":"#(iterate (fn [row] vec (map +' (concat [0] row) (concat row [0]))) %)","user":"5280539ce4b0757a1b1713f3"},{"problem":147,"code":"(fn gen [fr]\n  (let [next\n        (fn [row]\n          (concat\n           [(first row)]\n           (map (partial apply +') (partition 2 (interleave row (rest row))))\n           [(last row)]))]\n   (lazy-seq (cons fr (gen (next fr))))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":147,"code":"(fn pascal [xs]\n  (lazy-seq \n   (cons xs\n         (pascal (cons (first xs) (conj (vec (map #(apply +' %) (partition 2 1 xs))) (last xs)))))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn pascals-trapezoid [coll]\n  (lazy-seq\n    (cons coll\n          (when-let [s (seq coll)]\n            (let [fst (first s)\n                  lst (last s)\n                  step (vec (concat\n                             (list fst)\n                             (map #(apply +' %) (partition 2 1 s))\n                             (list lst)))]\n              (pascals-trapezoid step))))))","problem":147,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn pas-trap [c] (lazy-seq (cons c (pas-trap (mapv +' (concat [0] c) (concat c [0]))))))","problem":147,"user":"52046600e4b0c283853240c5"},{"problem":147,"code":"#(iterate (fn[coll] (cons (first coll) (conj (mapv +' coll (rest coll)) (last coll)))) %)","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn [i]\n  (iterate\n    #(vec (map + (cons 0 %) (conj % 0))) (vec (map bigint i))))","problem":147,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":147,"code":"iterate \n   (fn [x] \n     (mapv +' \n          (cons 0 x)\n          (conj x 0)))","user":"4e38f245535deb9a81d77f3e"},{"code":"(fn [l] (iterate #(map + (into % '(0)) (concat % '(0))) (seq l)))","problem":147,"user":"4e6e10d8535d5021c1a895fd"},{"problem":147,"code":"(fn func [coll]\n           (lazy-seq\n             (cons coll\n                   (func\n                     (map #(reduce +' %) (partition 2 1 (concat [0] coll [0])))))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":147,"code":"(fn pascalTrapezoid\n  [n]\n  (iterate #(map +' `(0 ~@%)\n                 `(~@% 0)) n))","user":"59dd3930e4b0a0ac046f2504"},{"problem":147,"code":"(fn p [x]\n  (let [pascal (fn [x] \n                 (map +' (concat x [0]) (cons 0 x)))]\n   \t(iterate pascal x)))","user":"59f78b49e4b0ca45a743a30e"},{"code":"(letfn [ (sum-adjacents [s] (->> s (partition 2 1) (map #(+' (first %) (second %))) ) )\n         (pascal-trapezoid [s] \n                           (let [next-vector (-> (cons 0 s) vec (conj 0) sum-adjacents vec ) ] \n                           (lazy-seq (cons s (pascal-trapezoid next-vector) ))) )]\n pascal-trapezoid\n  )","problem":147,"user":"51729002e4b044b2ef48a850"},{"problem":147,"code":"(fn p [r]\n  (cons\n    r\n    (lazy-seq\n      (p\n        (concat\n          (list (nth r 0))\n          (map\n            #(apply +' %)\n            (partition 2 1 r))\n          (list (last r)))))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn pascal [v]\n  (let [xs (vec (map #(apply + %) (cons (list 0 (first v)) (partition 2 1 [0] (map bigint v)))))]\n    (cons v (lazy-seq (pascal xs)))))","problem":147,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":147,"code":"(fn solve [vc]\n  (iterate\n   (fn [vc]\n     (flatten [(first vc)\n               (map #(apply +' %) (partition 2 1 vc))\n               (last vc)]))\n   vc))","user":"60537cd1e4b04c8f2157d152"},{"problem":147,"code":"(fn [v] \n  (letfn [ (nextp [r] (vec (concat [(first r)]\n                                   (map #(reduce +' %) (partition 2 (drop 1 (interleave r r))))\n                                   [(last r)] )))\n           ]\n    (iterate nextp v) ))","user":"53c1ce3ee4b00fb29b221268"},{"problem":147,"code":"(fn pascal-trap [x]\n  (let [next-one (concat\n                  (list (first x))\n                  (map #(apply +' %) (partition 2 1 x))\n                  (list (last x)))]\n    (cons x (lazy-seq (pascal-trap next-one)))))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"(fn pascal-trapezoid [numbers]\r\n  (letfn [(next-vector [numbers]\r\n            (conj (first (reduce (fn [acc num]\r\n                                   [(conj (first acc)\r\n                                          (+' num (second acc)))\r\n                                    num])\r\n                                 [[] 0]\r\n                                 numbers))\r\n                  (last numbers)))]\r\n    (iterate next-vector numbers)))","problem":147,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":147,"code":"(fn pascal [xs]\n  (cons xs (lazy-seq\n    (pascal (concat\n      (list (first xs))\n      (map #(apply +' %) (partition 2 1 xs))\n      (list (last xs)))))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"; immo's solution:\n; iterate #(vec (map + (into [0] %) (conj % 0)))\n\n(fn pascal-trap [row]\n  (letfn [(do-pascal-trap [prev]\n            (vec (concat\n                  (vector (first prev))\n                  (vec (map #(apply +' %) (partition 2 1 prev)))\n                  (vector (last prev)))))]\n    (iterate do-pascal-trap row)))","problem":147,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":147,"code":"(fn trap [szn]\n  (letfn [(nextline [s]\n                    (if (= (count s) 1) '()\n                      (cons (+' (first s)\n                               (second s))\n                            (nextline (rest s)))))]\n    (lazy-seq (cons szn (trap (concat (list (first szn))\n                                      (nextline szn)\n                                      (list (last szn))))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":147,"code":"(fn [coll]\n  (letfn [(add-coll [result-coll input-coll]\n    ;(println input-coll)\n    (cond\n          ; first call to add-coll only has 1 element in the collection\n          (and (empty? result-coll) (= 1 (count input-coll)))\n                (vector (first input-coll) (first input-coll))\n          ; input coll all added together and only the last item remains\n          (= 1 (count input-coll))  (conj result-coll (first input-coll) )\n          ; first call to add-coll.  put the first element in result\n          (empty? result-coll) (add-coll (conj result-coll\n                                               (first input-coll)) input-coll)\n          :else (add-coll (conj result-coll (+' (first input-coll)\n                                               (second input-coll)))\n                          (rest input-coll))\n          ))]\n    (iterate (partial add-coll []) coll)))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":147,"code":"(fn pasc [n]\n  (lazy-seq (cons n\n                  (pasc (vec (flatten (conj [] \n                                             (first n)\n                                             (reduce (fn [r x] (conj r (reduce +' x))) [] (partition 2 1 n))\n                                             (last n))))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":147,"code":"(fn pt [xs]\n  (let [h (conj xs 0) l (cons 0 xs) v (vec (map +' h l))]\n   (lazy-seq (cons xs (pt v)))\n    )\n  )","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":147,"code":"(fn pascal-trapezoid [coll2]\n      (let [cons-next-line (fn [coll] (vec (map #(reduce +' %) (partition 2 1 (concat [0] coll [0])))))]\n        (iterate cons-next-line coll2)))\n\n;(fn [row]\n;  (iterate #(map +' `(0 ~@%) `(~@% 0)) row))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":147,"code":"(fn pascals-trap\n  [s]\n  (let [nxt (loop [ hd (first s) nk (second s) rst (rest (rest s))  ans [hd]]\n    (if (empty? rst)\n      (if (nil? nk)\n        (conj ans hd)\n      \t(conj ans (+' hd nk) nk))\n      (recur nk (first rst) (rest rst) (conj ans (+' hd nk)))\n  ))]\n  (lazy-seq (cons s (pascals-trap nxt))))    \n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":147,"code":"iterate (fn[x] (map +' (conj (vec x) 0) (cons 0 (vec x))))","user":"52bc6cb2e4b07a9af57922f5"},{"problem":147,"code":"(fn [v]\n  (iterate\n    #(mapv +' (cons 0 %) (conj % 0))\n    v))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [c]\r\n  (iterate\r\n    (fn [c]\r\n      (map\r\n        (partial apply +)\r\n        (partition 2 1 (cons 0 (conj (vec c) 0)))))\r\n    c))","problem":147,"user":"4facff22e4b081705acca230"},{"problem":147,"code":"(fn lazy-pascal [cur-row]\n    (cons cur-row \n          (lazy-seq \n                (lazy-pascal \n                    (concat\n                        [(first cur-row)]\n                        (for [pair (partition 2 1 cur-row)] \n                            (apply +' pair))\n                        [(last cur-row)])))))","user":"53a94b63e4b047364c044434"},{"problem":147,"code":"(fn pasc [xs] \n  (cons xs (lazy-seq (pasc (vec (map +' (cons 0 xs) (conj xs 0)))))))","user":"552d9b31e4b076ab5578f7eb"},{"code":"(fn pascals-trapezoid [s]\n (let [next-row (cons (first s) (vec (map #(apply + %) (partition-all 2 1 s))))]\n   (lazy-seq (cons s (pascals-trapezoid next-row)))))","problem":147,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [v]\n  (iterate #(vec (concat [(first %)]\n                         (map +' % (rest %))\n                         [(peek %)]))\n           v))","problem":147,"user":"519db0ede4b037b32803f9b9"},{"problem":147,"code":"(fn [v] (iterate #(mapv + (cons 0N %) (conj % 0N)) v))","user":"5c379636e4b0d62ef62d9f76"},{"problem":147,"code":"(fn [c]\n  (iterate #(vec (map +' (concat [0] %) (concat % [0]))) c))","user":"53b7c21ae4b047364c0444d4"},{"problem":147,"code":"(fn pt [s]\n  (let [f (first s)\n        l (last s)]\n    (iterate #(concat [f] (map +' % (rest %)) [l]) s)))","user":"5880e38fe4b0f1effa3b7625"},{"problem":147,"code":"(fn __ [xs]\n  (lazy-seq\n    (cons xs (__ (mapv +' (conj xs 0) (cons 0 xs))))))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn pascal [s]\n  (lazy-seq (cons s (pascal (concat [(first s)] (map +' s (rest s)) [(last s)])))))","problem":147,"user":"50aab057e4b056ee0193586b"},{"problem":147,"code":"(fn [p]\n  (let [lazy-line (fn lazy-line [xs]\n                    (let [line (->> xs\n                                (partition 2 1)\n                                (map #(reduce +' %))\n                                (vec))\n                          done (vec (cons (first xs) (conj line (last xs))))]\n                      (lazy-seq (cons xs (lazy-line done)))))]\n    (lazy-line p)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [initial]\n  (iterate\n   (fn [s] (concat [(first s)]\n                   (map (partial apply +') (partition 2 1 s))\n                   [(last s)]))\n   initial))","problem":147,"user":"4e80aa10535db62dc21a62b1"},{"problem":147,"code":"(fn pascal [num]\n  (let [calc-pasc-nums (fn [list]\n                         (into []\n                               (map (partial reduce +') (partition 2 1 list))))\n        gen-pasc-nums (fn [list]\n                        (let [prepend-1 (into [(first num)] (calc-pasc-nums list))\n                              append-1 (into prepend-1 [(last num)])]\n                          append-1))]\n    (iterate gen-pasc-nums num)))","user":"505d1b01e4b0e6aca564be04"},{"problem":147,"code":"(fn pascal-trap [xs]\n  (let [sums (->> xs\n                  (partition 2 1)\n                  (map (partial apply +')))\n        row (concat [(first xs)] sums [(last xs)])]\n    (lazy-seq (cons xs (pascal-trap row)))))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [col]\n  (iterate\n   (fn [col]\n     (map #(apply +' %) (partition 2 1 (concat [0] col [0]))))\n   col))","problem":147,"user":"4fbf2818e4b081705acca317"},{"problem":147,"code":"(fn [prev]\n  (letfn [(foo [prev]\n            (let [triangle (map\n                            (fn [c]\n                              (cond\n\t\t                (= 0 c) (first prev)\n\t\t                (= (count prev) c) (last prev)\n                                :else (+' (nth prev (dec c)) (nth prev c))))\n                            (range (inc (count prev))))]\n              (lazy-seq\n               (cons triangle (foo triangle)))))]\n    (lazy-seq\n     (cons prev (foo prev)))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":147,"code":"(letfn [(nextrow [row]\n                 (vec `(~(first row) ~@(map +' row (rest row)) ~(last row))))]\n  (fn pascal [startrow]\n    (cons startrow (lazy-seq (pascal (nextrow startrow))))))","user":"5553b924e4b0deb715856e06"},{"code":"#(iterate  (fn [s] (map (partial reduce +) (map list (map bigint (concat s [0])) (cons 0 s)))) %)","problem":147,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"(fn [level]\n  (let [nex (fn [v] (mapv unchecked-add-int (cons 0 v) (conj v 0)))]\n    (iterate nex level)))","problem":147,"user":"503a234de4b088a6a14ca76d"},{"problem":147,"code":"(fn rows [col]\n  (letfn [(row [col, acc]\n    (cond\n      (empty? acc) (recur col (conj acc (first col)))\n      (empty? col) acc\n      (= 1 (count col)) (recur (rest col) (conj acc (first col)))\n      :else (recur (rest col) (conj acc (+' (first col) (second col))))\n    ))]\n  (lazy-seq (cons col (rows (row col []))))))","user":"587a3babe4b01531a375eae2"},{"code":"(fn pas [v]\n  (iterate (fn [v] (map #(apply + %) (partition 2 1 (concat '(0) v '(0))))) v))","problem":147,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [vv] (map +' (concat [0] vv) (concat vv [0]))) v)\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":147,"code":"(fn trapezoid [row] \n        (let [lrow (vec row)]\n        (cons lrow (lazy-seq (trapezoid (concat [(first lrow)]\n                      (vec (for [i (range 1 (count lrow))] \n                        (+' (nth lrow (dec i)) (nth lrow i))))\n                      [(last lrow)]\n                      ))\n        ))))","user":"5763818ae4b0994c1922fbc7"},{"problem":147,"code":"(fn pt [xs]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) xs))","user":"53b39d82e4b047364c0444a6"},{"code":"iterate #(vec (map + (concat [0N] %) (conj % 0N)))","problem":147,"user":"519ef784e4b087743fad2198"},{"problem":147,"code":"(fn yhsjxl [sseq]\n                 (let[first-a (first sseq)\n                      first-b (last sseq)\n                      next-fn (fn [s] (concat (list first-a) (map #(apply +' %) (partition 2 1 s)) (list first-b))) ]\n                   (iterate next-fn sseq)))","user":"53b4bddae4b047364c0444b9"},{"code":"(fn problem-147 [row]\n  (let \n    [next-row (apply conj [(first row)] (conj \n                                  (vec \n\t\t\t\t\t\t\t\t\t\t                (map \n\t\t\t\t\t\t\t\t\t\t                  (partial apply +') \n\t\t\t\t\t\t\t\t\t\t                  (partition 2 1 row))) \n\t\t\t\t\t\t\t\t\t\t                (last row)))]\n    (cons \n      (vec row) \n      (lazy-seq (problem-147 next-row)))))","problem":147,"user":"52319066e4b0e2e8de81d1e9"},{"problem":147,"code":"(fn p-t [v]\n  (letfn [(next-vector [v] (\n    map\n      #(apply +' %)\n      (cons\n        (list (first v))\n        (partition-all 2 1 v))))]\n  (cons (vec v) (lazy-seq (p-t (next-vector v))))))","user":"5481be5fe4b0e286459a1172"},{"code":"(fn trapezoid [v]\n    (let [next-one (map #(apply + %) (map vector (concat [0N] v) (concat v [0N])))]\n      (cons v (lazy-seq (trapezoid next-one)))))","problem":147,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn c[v](cons v(lazy-seq(c(vec(map +(cons 0N v)(conj v 0)))))))","problem":147,"user":"4f296a80e4b0d6649770a02a"},{"problem":147,"code":"(fn [col]\n  (iterate #(vec (map bigint (map + (cons 0 %) (conj % 0)))) col))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":147,"code":"(fn [coll] (iterate (fn [x] (map #(apply +' %) (partition 2 1 (concat [0] x [0])))) coll))","user":"5797d4bae4b039eba2ecb107"},{"problem":147,"code":"(fn pt [xs]\n  (lazy-seq (cons xs (pt (map +' (flatten [0 xs]) (flatten [xs 0]))))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn iter-pas-trapezoid [n] \n  (let [pas-trapezoid \n\t\t\t\t\t(fn [[a b & coll :as args]]\n\t(if (nil? b) [1 1]\n\t\t(flatten (conj [] a ((fn [a b coll result]\n\t\t(cond\n\t\t\t(empty? coll) (conj result (+ (bigint a) (bigint b)))\n\t\t\t:else (recur b (first coll) (rest coll) (conj result (+ (bigint a) (bigint b)))))) a b coll []) (last args)))))\n]\n(iterate pas-trapezoid n)))","problem":147,"user":"501c1492e4b086d93747d180"},{"problem":147,"code":"(fn pascal2\n  [s]\n  (iterate \n    (fn [x] (concat [(first x)] \n                    (map +' x (rest x)) \n                    [(last x)])) \n  s))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [row]\n  (iterate (fn [prevRow] (concat \n         (cons (first prevRow)  (map #(apply +' %) (partition 2 1 prevRow))) \n         [(last prevRow)])) row))","problem":147,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (lazy-seq\n    (cons\n      coll\n      (pascal-trapezoid\n        (let [\n              not-nil #(if (= nil %1) 1 %1)\n              first-token (not-nil (first coll))\n              last-token (not-nil (last coll))]\n          (conj (reduce #(conj %1 (apply +' %2)) [first-token] (partition 2 1 coll)) last-token))))))","user":"594c0bd7e4b07ddc2dafae56"},{"code":"(fn [row]\n    (iterate\n      (fn [row]\n        (vec (map +' (cons 0 row)(conj row 0))))\n      row))","problem":147,"user":"53527ce8e4b084c2834f4af1"},{"code":"(fn [i]\n  (iterate\n   (fn [v]\n     (let [v1 (concat v [0])\n           v2 (concat [0] v)]\n       (map + v1 v2))) i))","problem":147,"user":"4ec07699535dfed6da9c6da2"},{"problem":147,"code":"(fn pascal-seq [row-numbers]\n  (let [next-row (mapv +'\n                       ;; two same collections shifted by one and summed\n                       (conj (vec row-numbers) 0)\n                       (cons 0 row-numbers))]\n    (lazy-seq (cons row-numbers (pascal-seq next-row)))))","user":"551bdefde4b07993ea3788d7"},{"problem":147,"code":"(fn[x] (iterate\n            #(vec (for [c (range -1 (count %))] (+'\n                                   (get % c 0)\n                                   (get % (inc c) 0))))\n            x ))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":147,"code":"iterate #(map +' `(0 ~@% 0) `(~@% 0)) ;; not mine","user":"5a527beee4b05d388ecb6bfe"},{"problem":147,"code":"(fn [row]\n  (iterate\n   #(map +' \n         (concat [0] %)\n         (concat % [0]))\n   row))","user":"537f4652e4b06839e8705eb1"},{"code":"(fn pascal-trapezoid [s]\n  (cons\n   s\n    (lazy-seq\n     (pascal-trapezoid\n      (concat [(first s)]\n              (map (partial reduce + 0N) (partition 2 1 s))\n              [(last s)])))))","problem":147,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn p [x]\n  (if (or (= x [2 4 2]) (= x [2 2]))\n    '()\n    (lazy-seq (cons x\n      (p (map (partial apply +) (partition 2 1 (concat [0] x [0]))))))))","problem":147,"user":"5012aefce4b0c8732600222a"},{"problem":147,"code":"(fn trapezoid [xs]\n  (iterate\n   #(map +' (concat [0] %) (concat % [0]))\n   xs))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":147,"code":"(fn pascal-trap\n  [s]\n  (let [pscl (fn [n] (cons (first n) (map #(apply +' %) (partition-all 2 1 n))))]\n    (cons s\n          (lazy-seq (pascal-trap (pscl s))))))","user":"5ef18431e4b07c55ae4a0529"},{"code":"(partial iterate #(->> `[0 ~@% 0]\n                         (partition 2 1)\n                         (map (partial apply +'))))","problem":147,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn tri [xs]\n   (letfn [(triangle [xs]\n    (let [xs'  (concat [0N] xs)\n         xs'' (concat xs [0N])]\n    (vec (map + xs' xs''))))]\n     (iterate triangle xs)))","problem":147,"user":"531c0619e4b08068f379ed98"},{"code":"(fn f[xs]\n  (letfn [(pascal [[head & _ :as xs]]\n                  (->> (partition-all 2 1 xs) \n                       (cons (list head))\n                       (map (partial apply +'))))]\n    (lazy-seq (cons xs (f (pascal xs))))))","problem":147,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [first-row]\n  (letfn [(next-row [row] (cons\n                            (first row)\n                            (map #(apply +' %) (partition 2 1 [0] row))))\n          (pascal [row] (lazy-seq (cons row (pascal (next-row row)))))]\n    (pascal first-row)))","problem":147,"user":"4e42f930535dc968683fc49f"},{"problem":147,"code":"(fn [xs] \n  (letfn [(helper [xs] (map +' (cons 0 xs) (lazy-cat xs '(0))))]\n    (iterate helper xs)))","user":"4ea03f70535d7eef308072a1"},{"problem":147,"code":"(fn s [a]\n  (let [s1 (->> a\n          (partition 2 1)\n          (map #(reduce +' %))\n        )\n        s2 (flatten [(first a) s1 (last a)])]\n    (cons a (lazy-seq (s s2)))\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":147,"code":"(fn [coll]\n  (let [next-row #(map +' (cons 0 %) (concat % [0]))]\n    (iterate next-row coll)))","user":"550b502ae4b06e50f9beb13f"},{"problem":147,"code":"(fn [x]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) x))","user":"607f3336e4b05857a65e7747"},{"problem":147,"code":"(fn [v]\n(iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"5964f9b0e4b069c0a1a19778"},{"problem":147,"code":"(fn [xs]\n  (let [next-row #(map +' (cons 0 %) (concat % [0]))]\n    (iterate next-row xs)))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn p [s]\n    (lazy-seq\n     (cons s\n           (p (flatten [(first s) (map #(reduce + %) (partition 2 1 s)) (last s)])))))","problem":147,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn fib-row [[head & tail :as row]]\n           (let [new-row \n                 (if tail\n                     (concat [head] (concat (map +' tail row) [(last tail)]))\n                     [head head])]\n            (cons row\n                  (lazy-seq (fib-row new-row)))))","problem":147,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":147,"code":"(fn ptrap [row]\n  (cons row \n        (lazy-seq (ptrap (map #(apply +' %) (partition 2 1 (concat [0] row [0])))))))","user":"534efe66e4b084c2834f4ac1"},{"code":"(fn [x]\n  (letfn [ (pascal [x]\n                    (let [coll (flatten [0 x 0])]\n                       (map #(+' (nth coll %1) (nth coll (inc %1))) (range (inc (count x)))))) ]\n      (iterate pascal x)))","problem":147,"user":"50b25f2ce4b03ea88043355f"},{"problem":147,"code":"(fn [n]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) n))","user":"5a99b87ee4b0d174b936c7af"},{"problem":147,"code":"(fn psc\n     [xs]\n     (let [n (map (comp bigint +) (cons 0 xs) (concat xs [0]))]\n       (lazy-seq\n        (cons xs (psc n)))))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":147,"code":"(fn inf [init]\n  (lazy-seq (cons init\n              (inf (vec (map +' (into init [0]) (into [0] init)))))))","user":"5835cb06e4b089d5ab817cea"},{"problem":147,"code":"(fn m [sq]\n  (lazy-seq\n   (concat [sq] (m (map +' \n                        (concat [0] sq)\n                        (concat sq [0]))))))","user":"4f041de1535dcb61093f6ba5"},{"problem":147,"code":"(fn my-trapezoid [init-data]\n                    (let [data init-data]\n                      (println data)\n                      (lazy-seq\n                        (cons data (my-trapezoid (mapv #(apply +' %) (partition 2 1 (into [0] (conj data 0))))) ))))","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":147,"code":"(partial iterate (fn [xs] (map (partial apply +') (partition 2 1 (concat [0] xs [0])))))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn [col]\n  (iterate #(vec (map + (cons 0 %) (conj % 0))) \n      col))","problem":147,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn pascal [init]\n  (cons init\n    (lazy-seq (pascal (apply vector (map #(+' (get init % 0) (get init (dec %) 0)) (range (inc (count init)))))))))","problem":147,"user":"4f03641a535dcb61093f6a9b"},{"problem":147,"code":"(fn nPascalInf\n  [s]\n  (let [nPascal (fn nPascal\n                  [x]\n                  (loop [result [(first x)]\n                         myS x]\n                    (cond\n                     (empty? myS) result\n                     (empty? (rest myS)) (conj result (first myS))\n                     :else (recur (conj result (+' (first myS) (second myS))) (rest myS)))))]\n    (cons s\n          (lazy-seq (nPascalInf (nPascal s))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":147,"code":"; based on http://www.4clojure.com/problem/147\n; drops overflow (fn pascal [col]\t(iterate #(mapv + (conj % 0) (cons 0 %)) col))\n(fn pascal [col] (iterate #(mapv +' (conj % 0) (cons 0 %)) col))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn pt [ns]\n  (let [dupn (fn dupn [vals prev]\n               (if (seq vals)\n                 (cons [prev (first vals)]\n                       (dupn (rest vals) (first vals)))\n                 (list [prev 0])))\n        nextpt (fn [vals]\n                 (map #(apply + %) (dupn vals 0)))]\n    (iterate nextpt ns)))","problem":147,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn [xs]\n  (let [f (fn [ys] (concat [(first xs)] (map (fn [a b] (apply +' (vector a b))) ys (rest ys)) [(last xs)]))]\n    (iterate f xs)))","problem":147,"user":"5097b556e4b00ad8bab4e970"},{"problem":147,"code":"(fn solide[st] (\n            let [borderl (first st)\n                 borderr (last st)\n                 nx (vec (lazy-cat [borderl] (mapv +' (pop st) (rest st)) [borderr]))]\n                 (lazy-seq (cons st (solide nx)))\n                           )\n            )","user":"5034b623e4b062bc5d7ae168"},{"problem":147,"code":"(fn [col] (iterate #(map +' (cons 0 %) (concat % [0])) col))","user":"5745bb9fe4b009280f9f2b54"},{"problem":147,"code":"#(letfn [(p-trapezoid [ns] (lazy-seq (cons ns (p-trapezoid (map (partial apply +') (partition-all 2 1 (cons 0 ns)))))))] (p-trapezoid %))","user":"58e7229fe4b056aecfd47cc4"},{"problem":147,"code":"(fn tri \n   ([col]\n    (let [r (#(loop [c % l 0 r []] \n                (if (empty? c) \n                    (conj r (last col)) \n                    (recur (rest c) (first c) (conj r (+' l (first c)))))) \n                col)]\n      (cons col (lazy-seq (tri r))))))","user":"555883c5e4b0deb715856e2d"},{"code":"(fn trap [prev]\n  (cons prev (lazy-seq (trap (vec (map + (conj prev 0N) (cons 0N prev)))))))","problem":147,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(fn [init]\n(letfn [\n  (next-row [lst]\n   (vec(map +\n    (cons 0 lst)\n    (conj lst 0)))) ]\n (iterate next-row init))\n)","problem":147,"user":"4e356d2b535deb9a81d77f2d"},{"code":"iterate (fn [xs] (map #(apply +' %) (partition 2 1 (concat [0] xs [0]))))","problem":147,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn p [n]\n  (cons n\n    (lazy-seq\n      (p (map #(+' (first %) (second %)) (partition 2 1 [0] (cons 0 n)))))))","problem":147,"user":"505d4b21e4b0e6aca564be07"},{"code":"(fn pascalStyle [arg]\n (cons arg\n           (lazy-seq \n              (pascalStyle \n                (map +' \n                     (concat arg [0]) \n                     (concat [0] arg)\n                ) \n              )\n            )\n   \n )\n)","problem":147,"user":"518aec06e4b06da86c1973c2"},{"problem":147,"code":"(fn pascals-trapezoid [s] \n  (lazy-seq \n   (let [target (into [] (cons (first s) (conj (mapv +' s (rest s)) (last s))))]\n     (cons\n      s\n      (pascals-trapezoid target)))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":147,"code":"(fn inf-pascal [col]\n  (letfn [(next-pascal [col]\n            (let [col (concat [0] col [0])]\n              (map #(apply +' %) (partition 2 1 col))))]\n    (lazy-seq (cons col (inf-pascal (next-pascal col))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":147,"code":"(fn pascal-iter [coll]\n  (letfn [(next-pascal [v]\n            (concat [(first v)]\n                    (map (fn [[a b]] (+' a b)) (partition 2 1 v))\n                    [(last v)]))\n          ]\n    (lazy-seq (cons coll (pascal-iter (next-pascal coll))))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":147,"code":"(fn trapezoid [coll]\n  (cons coll (lazy-seq\n              (trapezoid\n               (map (fn [[x y]] (+' x y)) (partition 2 1 (concat [0] coll [0])))))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":147,"code":"(fn [coll]\n  (iterate (fn [row]\n             (map +'\n                  (concat row [0])\n                  (concat [0] row)))\n           coll))","user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn f [s]\n  (lazy-seq (cons s (f (concat [(first s)] (map + s (rest s)) [(last s)])))))","problem":147,"user":"4f043ed1535dcb61093f6bb4"},{"problem":147,"code":"(fn se [xs]\n    (let [pas-trapezoid\n          (fn [xs]\n            (loop [ys xs zs [(first xs)]]\n              (if (= 1 (count ys))\n                (conj zs (first ys))\n                (recur (rest ys) (conj zs (+' (first ys) (nth ys 1))))\n                )))]\n      (cons xs (lazy-seq (se (pas-trapezoid xs))))\n      ))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [xs]\n  (iterate\n    (fn [r]\n      (map #(apply +' %)\n           (partition 2 1 (concat [0] r [0]))))\n    xs))","problem":147,"user":"50fbf811e4b0d10d794c19f1"},{"problem":147,"code":"(fn psc [v]\n  (let [d (concat [0] v [0])]\n    (cons v (lazy-seq (psc (for [i (range (dec (count d)))] (+' (nth d i) (nth d (inc i)))))))))","user":"55e732c5e4b050e68259b492"},{"problem":147,"code":"(fn [xs] (iterate (fn [xs] (map +' (concat [0] xs) (concat xs [0]))) xs))","user":"56771b31e4b05957ce8c6163"},{"problem":147,"code":"(fn pascal-seq [coll]\n  (lazy-seq\n   (cons coll (pascal-seq (mapv +' (conj coll 0) (cons 0 coll))))))","user":"55d29fb6e4b0e31453f64a59"},{"problem":147,"code":"(fn pt [row]\n  (letfn [(next-row [row']\n            (loop [prior 0 r row' result []]\n              (if (empty? r)\n                (conj result prior)\n                (recur\n                  (first r)\n                  (rest r)\n                  (conj result (+' (first r) prior))))))]\n    (lazy-seq (cons row (pt (next-row row))))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":147,"code":"(fn [seed] (iterate #(map +' (concat % [0]) (concat [0] %)) seed))","user":"56561119e4b0f9d632dd849d"},{"code":"(fn [l]\n  (let [f (fn f [l]\n        (let [p2 (rest l)\n              n (concat [(first l)] (map +' l p2) [(last l)])]\n          (lazy-seq (cons n (f n)))))]\n  (cons l (f l))))","problem":147,"user":"52091d57e4b0e152394d76f0"},{"problem":147,"code":"(fn trapezoid [seq]\n  (lazy-seq \n   (cons seq (trapezoid (mapv +' (cons 0 seq) (conj seq 0))))))","user":"5e03a15be4b0a607a9a45d5e"},{"problem":147,"code":"(fn [row]\n  (letfn [(next-row [row] \n          (let [r1 (conj row 0)\n                r2 (cons 0 row)]\n            (mapv +' r1 r2)))]\n    (iterate next-row row)))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":147,"code":"#(iterate (fn [x] (mapv +'\n                        (concat [0] x)\n                        (concat x [0])))\n           %)\n\n;; (fn [c]\n;;     (iterate (fn [x] (concat [(first x)]\n;;                              (mapv +' x (rest x))\n;;                              [(last x)]))\n;;              c))\n\n;; (fn ff [c]\n;;     (lazy-seq\n;;      (cons c\n;;            (ff (mapv +' (cons 0 c) (conj c 0))))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn quasi-pascal [ns]\n  (lazy-seq\n   (cons\n    ns\n    (quasi-pascal\n     (map +'\n          (concat ns [0])\n          (concat [0] ns))))))","problem":147,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":147,"code":"(fn pasc\n   [init]\n   (let [new (#(concat [(first init)] (map +' % (rest %)) (vec (take-last 1 init))) init)] \n    (cons init (lazy-seq (pasc new))) \n   ))","user":"53d6b266e4b0e771c3025459"},{"code":"(fn trapezoid [lat]\n  (let [next-row (reduce (fn [a b] (conj a (reduce +' b))) [] (partition 2 1 (concat [0] lat [0])))]\n    (cons lat (lazy-seq (trapezoid next-row)))))","problem":147,"user":"5125029de4b0ce9225d2ed3e"},{"code":"iterate #(mapv + (conj % 0N) (cons 0 %))","problem":147,"user":"510db6cde4b078ea71921145"},{"code":"(partial iterate #(mapv +' (cons 0 %) (conj % 0)))","problem":147,"user":"50901b2ee4b0ea685a20f774"},{"problem":147,"code":"(fn [s]\n\t   (letfn [(next-middle [s] \n\t\t\t\t(map (fn [[a b]] (+ (bigint a) (bigint b))) (partition 2 1 s))) \n\t\t   (next-seq [s] (concat (vector (first s)) (next-middle s) (vector (last s))))]\n\t\t  (lazy-seq  (iterate next-seq s)))\n\t   )","user":"55f09e7be4b06e875b46ce28"},{"problem":147,"code":"(fn pascal-trapezoid\n  ([] (pascal-trapezoid [1]))\n  ([coefs]\n   (let [left-pad (first coefs)\n         right-pad (last coefs)\n         midle-coefs (mapv #(apply +' %) (partition 2 1 coefs))\n         new-coefs (concat [left-pad] midle-coefs [right-pad])]\n     (lazy-seq (cons coefs (pascal-trapezoid new-coefs))))))","user":"54a96a15e4b09f271ff37cad"},{"code":"(fn pascal [l]  (cons l (lazy-seq (pascal (vec (map +' (conj l 0) (cons 0 l)))))   ))","problem":147,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":147,"code":"(fn pasc-seq [start]\n  (iterate (fn [prev] \n             (conj \n               (get (reduce (fn [[lastval newlist] x] [x (conj newlist (+' lastval x))]) [0 []] prev) 1)\n               (last prev))) start))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn f [data]\n           (cons data\n                 (lazy-seq\n                  (f ((fn [d]\n                        (into [(first d)]\n                              (map #(apply +' %) (partition-all 2 1 d))))\n                      data))))\n           )","problem":147,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn pascal [p]\n  (cons p (lazy-seq (pascal (vec (map + (cons 0N p)(conj p 0N)))))))","problem":147,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn pt [s] (let [v (vec s)] (lazy-seq (cons v (pt (map +' (cons 0 s) (conj v 0)))))))","problem":147,"user":"506ab9bae4b05d3b7762c74c"},{"problem":147,"code":"(fn [x] (iterate #(concat [(first %)] (map +' (rest %) (drop-last %)) [(last %)]) x))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":147,"code":"(fn pascal-trapezoid [line]\n         (lazy-seq\n          (cons line (pascal-trapezoid \n                      (map +' (concat [0] line) (concat line [0]))))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":147,"code":"(fn trapezoid [col]\n  (cons col (lazy-seq (trapezoid (mapv +' (cons 0 col) (conj col 0))))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":147,"code":"(fn pascal-seq [v]\n  (letfn [(pascalize [vv]\n            (vec (concat\n                 [(first vv)]               \n                 (map #(apply +' %) (partition 2 1 vv))              \n                  [(last vv)])))]\n    (iterate pascalize v)))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [c]\n  (iterate (fn [x]\n             (map #(apply +' %) (partition 2 1 (concat [0] x [0])))) c))","problem":147,"user":"5164867fe4b003cf19fdde3e"},{"problem":147,"code":"(fn [num] \n  (iterate #(concat (conj [] (first %)) \n                    (map + % (rest %)) \n                    (conj [] (last %))) (map bigint num)))","user":"50e90813e4b033b0e80d11e7"},{"problem":147,"code":"(fn [row] (iterate (fn [row] (vec (map +' (conj row 0) (into [0] row)))) row))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":147,"code":"iterate (fn [x] (flatten [(first x) (map +' x (rest x)) (last x)]))","user":"57ccedaae4b0c746388ab88e"},{"problem":147,"code":"(partial iterate\n  (fn up-level [coll]\n    (map +' (concat [0] coll) (concat coll [0]))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn pas [x] (cons x (lazy-seq\n       (pas\n        ( lazy-cat (conj (vec (cons (first x) (map #(apply +' %) (partition 2 1 x)))) (last x)))))))","problem":147,"user":"5300aa1de4b0d8b024fd3710"},{"problem":147,"code":"#(iterate \n (fn [x]\n   (concat [(first x)] (map +' x (rest x)) [(last x)])\n   ) %)","user":"57011eb3e4b08d47c97781d1"},{"code":"iterate #(vec (map +' (concat [0] %) (concat % [0])))","problem":147,"user":"50f10f7be4b06d9538fe211a"},{"problem":147,"code":"(fn [s]\n    (let [next (fn [s]\n                     (reduce (fn [a v]\n                               (let [[i j] v]\n                                 (if (= i j)\n                                   (conj a (s i))\n                                   (conj a (+' (s i) (s j))))))\n                             []\n                             (partition\n                              2\n                              (concat '(0 0)\n                                      (interleave (range 0 (count s)) \n                                                  (range 1 (count s)))\n                                      (list (dec (count s)) (dec (count s)))))))]\n      (iterate next s)))","user":"6026d2cae4b0d5df2af22232"},{"problem":147,"code":"(fn [row] (iterate #(map +' `(0 ~@%) `(~@% 0)) row))","user":"5455c2f3e4b080a794c2c87d"},{"problem":147,"code":"(fn pascalize ([p]\n                 (iterate\n                   (fn [p] (let [t (cons 0 (conj p 0))]\n                     (apply vector \n                            (map \n                              #(+' (first %) (second %))\n                              (partition 2 1 t))))) p)))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn [p] (iterate #(vec (map + (cons 0 %) (conj % 0))) p))","problem":147,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn pstt [col]\n  (lazy-seq\n    (cons (seq col)\n          (pstt (map #(apply +' %)\n                     (partition 2 1 (flatten [0 col 0])))))))","problem":147,"user":"53806e5be4b06839e8705ec1"},{"code":"(fn problem-147 [row]\n  (lazy-seq\n    (let [size (count row)\n          next-row (vec\n                    (map\n                     (fn [index]\n                       (cond\n                         (= index 0) (nth row index)\n                         (= index size) (nth row (- size 1))\n                         :else (+ (nth row index)\n                                  (nth row (- index 1)))))\n                     (range (inc size))))]\n      (cons row (problem-147 next-row)))))","problem":147,"user":"4f31519ae4b0d6649770a086"},{"code":"#(\n  (fn pascal [s]\n  (lazy-seq\n   (cons s (pascal (map + (cons 0 s) (concat s [0]))))))\n  (map bigint %))","problem":147,"user":"51805d22e4b0e3fc13e244df"},{"problem":147,"code":"(fn p [coll]\n    (let [n (map +' (concat '(0) coll) (concat coll '(0)))]\n      (lazy-cat (cons coll (p n))))\n    )","user":"55a372f1e4b0acc240e31537"},{"problem":147,"code":"#(iterate\n       (fn [coll]\n         (let [f (first coll)\n               l (last coll)\n               summed (map (partial apply +') (partition 2 1 coll))]\n           (into [] (flatten [f summed l]))))\n       %)","user":"54236ce1e4b01498b1a71ad1"},{"problem":147,"code":"(fn f [d]\n  (lazy-seq (cons d (f (concat\n\t \t\t(list (first d))\n\t \t\t(map #(reduce +' %) (partition 2 1 d))\n\t \t\t(list (last d)))))))","user":"54a11042e4b09f271ff37c49"},{"problem":147,"code":"(fn tra [& s]\n  (lazy-cat s\n            (tra (let [t (last s)]\n                   (map #(+'\n                          (nth t (dec %) 0)\n                          (nth t % 0))\n                        (range (inc (count t))))))))","user":"57008afae4b08d47c97781ca"},{"problem":147,"code":"(letfn [(next-pascal [coll]\n                     (let [expanded (concat [0] coll [0])]\n                       (for [[prev cur] (partition 2 1 expanded)] (+' prev cur))))\n        (lazy-pascal [coll]\n                     (cons coll (lazy-seq (lazy-pascal (next-pascal coll)))))]\n  lazy-pascal)","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn pascal-trap [seed]\n  (iterate\n   #(map +' (lazy-cat [0] %)\n         (lazy-cat % [0]))\n   seed))","problem":147,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":147,"code":"(fn pascalls [starting-row]\n  (let [gen-next (fn [row-above]\n                   (->> (conj (into [0] row-above) 0)\n                        (partition 2 1)\n                        (map #(apply +' %))))]\n    (iterate gen-next starting-row)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn l [s]\r\n  (lazy-seq\r\n    (cons s\r\n          (l (map #(bigint (apply + %))\r\n               (cons [(first s)] (partition-all 2 1 s)))))))","problem":147,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(partial iterate \n (fn next-row [v]\n  (let [break-2    (fn  [v]\n                    (loop [v v r []]\n                      (if (< (count v) 2)\n                        r\n                        (recur (rest v) (conj r [(first v) (second v)]))\n                        )\n                      )\n                    )\n        sums (map #(apply +' %) (break-2 v))\n        ]\n    (conj (into [(first v)] sums) (last v))\n    )\n  )\n)","problem":147,"user":"529a73bde4b02ebb4ef75096"},{"problem":147,"code":"(fn pascal [lst] (lazy-seq (cons lst (pascal (map +' (concat '(0) lst) (concat lst '(0)))))))","user":"56912f93e4b0dcc4269f40ef"},{"problem":147,"code":"(fn tri [v] (lazy-cat [v]  (tri (map +' (concat [0] v ) (concat  v [0])))))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"(fn lazy-pascal [seq]\r\n  (letfn [(pascal-next [seq]\r\n            (map + (concat [0] seq) (concat seq [0])))]\r\n    (lazy-seq (cons seq (lazy-pascal (pascal-next seq))))))","problem":147,"user":"4f62b29ce4b0defedf855fd9"},{"problem":147,"code":"(fn [x] (iterate #(into [] (map +' (cons 0 %) (conj % 0))) x))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn pascal-on [v]\n  (letfn [(pairs [coll]\n                 (map list coll (next coll)))\n          (pascal-step [xs]\n                       (->\n                        (->> xs\n                             pairs\n                             (map (partial reduce +')))\n                             (conj (first xs))\n                             vec\n                             (conj (last xs))))]\n                       (iterate pascal-step v)))","problem":147,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn pa-tra [s]\n\t(lazy-seq (cons s (pa-tra \n                       (concat \n                        (first\n                         (reduce \n                          #(list (concat(first %1)[(bigint(+ %2 (last %1)))]) %2) [[] 0] \n                          s)\n                         )\n                        (list(last s))\n                        )\n                       )\n                      )\n          )\n )","problem":147,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":147,"code":"(fn trapezoid [l]\n  (let [nl (into [] (concat [(first l)] (map +' l (rest l)) [(last l)]))]\n    (cons l (lazy-seq (trapezoid nl)))\n    )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":147,"code":"(fn function-147\n  [list] (iterate\n           (fn [list1]\n             (vec\n               (reverse\n                 (cons\n                   (last list1)\n                   (reverse\n                     (cons (first list1)\n                           (for [x (range (- (count list1) 1))\n                                 :let [i list1]] (+' (nth i x)\n                                                    (nth i (+' x 1)))))))))) list))","user":"598d0dc3e4b02b9968b84d18"},{"problem":147,"code":"(fn [i](iterate #(map (partial apply  +') (partition 2 1 (concat [0] % [0]))) i))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [coll] (iterate (fn [row] (vec (map +' (cons 0 row) (conj row 0)))) coll))","problem":147,"user":"5244fa73e4b0d8acf9ed6acb"},{"code":"(fn do-it [v]\n  (let [x (vec (map bigint v))\n        levelup (fn levelup [v]\n                  (loop [ret [(first v)]\n         \t\t\t\t\t\ttodo v]\n    \t\t\t\t\t\t\t(if (empty? (rest todo))\n      \t\t\t\t(conj ret (first todo))\n            (recur (conj ret (+ (first todo) (second todo))) (rest todo)))))\n        helper (fn helper [vv]\n                 (cons vv (lazy-seq (helper (levelup vv)))))]\n  \t(cons x (helper (levelup x)))))","problem":147,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":147,"code":"(fn [arr]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) arr))","user":"6088395de4b0ae75613dcee2"},{"problem":147,"code":"(fn pascal-sequence [numbers]\n  (let [pascal (fn [numbers]\n                 (conj (vec (map-indexed #(+' (get numbers (dec %1) 0) %2) numbers)) (last numbers)))]\n    (iterate pascal numbers)))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":147,"code":"(fn p-trap [v]\n  (let [v-next (if (= 1 (count v)) [(first v) (first v)] (conj (vec (cons (first v) (reduce (fn [acc [a b]] (conj acc (+' a b))) [] (partition 2 1 v)))) (last v)))]\n    (cons v (lazy-seq (p-trap v-next)))))","user":"4faf97d8e4b081705acca258"},{"code":"(fn trapezoid [coll]\n  (let [res (concat [(first coll)] \n                    (map #(reduce + %) (partition 2 1 coll)) \n                    [(last coll)])]\n    (lazy-seq\n      (cons coll\n        (trapezoid res)))))","problem":147,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [x]\n  (iterate\n    #(vec (flatten (list \n      (first %) \n      (map + (rest %) (butlast %))\n      (last %)))) x))","problem":147,"user":"4ef355e3535dced4c769f228"},{"problem":147,"code":"(fn [s] (iterate #(concat [(first %)] (map (partial apply +') (partition 2 1 %)) [(last %)]) s))","user":"5958cef6e4b066ee0a44af94"},{"code":"(fn f [s] \r\n    (let [sn (cons (first s)\r\n                   (reduce \r\n                     #(cons (apply + %2) %1)       \r\n                     (list (last s))\r\n                     (partition 2 1 (reverse s))))] \r\n    (lazy-seq (cons s (f sn)))\r\n    ))","problem":147,"user":"4f0da4e4535d0136e6c22319"},{"problem":147,"code":"(fn [xs] (iterate #(map (partial apply +') (partition 2 1 (concat [0] % [0]))) xs))","user":"56795deae4b05957ce8c6187"},{"problem":147,"code":"(fn pascal-trap [arg]\n  (cons arg \n        (-> (loop [new-arg (transient [(first arg)]) i 1]\n              (if (-> arg count (= i))\n                (-> new-arg (conj! (last arg)) persistent!)\n                (recur (conj! new-arg (+' (nth arg (dec i)) (nth arg i))) \n                       (inc i))\n                )\n              )\n            pascal-trap lazy-seq)))","user":"525d490ae4b0cb4875a45d70"},{"code":"(fn [coll]\r\n  (letfn [(pas [[x :as cur]]\r\n            (let [next\r\n                  (if (= 1 (count cur))\r\n                    [x x]\r\n                    (conj (reduce (fn [v [a b]] (conj v (+ a b))) \r\n                            [x] \r\n                            (partition 2 1 cur)) \r\n                      (last cur)))]\r\n              (lazy-seq (cons cur (pas next)))))]\r\n    (pas coll)))","problem":147,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":147,"code":"(fn [coll] \n   (iterate \n      #(vec (map +' (conj % 0) (cons 0 %))) coll))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn pt [line]\n  (let [line-builder (fn [line]\n                       (concat [(first line)]\n                         (for [pair (partition 2 1 line)]\n                           (apply +' pair)) [(last line)]))]\n    (cons line (lazy-seq (pt (line-builder line))))))","problem":147,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn pt [n]\n  (let [next (map +' (cons 0 n) (conj (into [] n) 0))]\n    (cons n (lazy-seq (pt next)))))","problem":147,"user":"51e0198ee4b01188f0627539"},{"code":"(fn [x]\n  (iterate (fn [p]\n    (flatten [(first p) (map #(reduce + %) (partition 2 1 (map bigint p))) (last p)])) x))","problem":147,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn [s] (iterate (fn [t] (flatten (reduce (fn [[acc last] val] [(conj acc (+' last val)) val]) [[] 0] t))) s))","problem":147,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn ps [cols] (cons cols (lazy-seq (ps (conj (vec (cons (first cols) (reduce (fn [a b] (conj a (+ (bigint (get cols b)) (bigint (get cols (inc b)))))) [] (range (dec (count cols))) ))) (last cols))))))","problem":147,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [s]\n  (iterate\n    #(map (fn [a b] (bigint (+ a b)))\n          `[0 ~@%] `[~@% 0]) s))","problem":147,"user":"509160dae4b0742c82730aef"},{"code":"(fn [x]\n  (letfn [(pascal [x] (map #(apply +' %) (partition 2 1 [0] (cons 0 x))))]\n    (iterate pascal x)))","problem":147,"user":"51e00020e4b01188f0627534"},{"problem":147,"code":"(fn [s] (iterate #(map +' (concat [0] %) (concat % [0])) s))","user":"5cab33e7e4b048ec896c5c48"},{"problem":147,"code":"(fn pascal [s]\n  (let [res (cond (= (count s) 1) (repeat 2 (first s))\n                  :else (concat (take 1 s)\n                                (map #(apply +' %) (partition 2 1 s))\n                                (take-last 1 s)))]\n    (cons s (lazy-seq (pascal res)))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":147,"code":"(fn pt [v]\n  (lazy-seq (cons v (pt (mapv +' (conj v 0) (cons 0 v)))))\n  )","user":"5d52bf29e4b0776584bd6f69"},{"problem":147,"code":"(fn f [x] (cons x (lazy-seq (f (#(let [xx (vec (concat [0] %))\n                                        yy (vec (concat % [0]))]\n                                    (vec (map +' xx yy))) x)))) )","user":"55bc5280e4b01b9910ae29f1"},{"code":"(fn [xs]\n  (letfn [(adjsum [xs] (map + xs (rest xs)))\n          (pnext [xs] (-> xs adjsum (conj (first xs)) vec (conj (last xs))))]\n    (iterate pnext (map bigint xs))))","problem":147,"user":"508157b2e4b0946d0443855c"},{"code":"(fn [z] (iterate (fn i [y] (into [] (concat (vector (first y)) \n                         (for [x (range (-' (count y) 1))] (+' (nth y x) (nth y (+' 1 x))))\n                         (vector (last y))))) z))","problem":147,"user":"525c575be4b0cb4875a45d38"},{"problem":147,"code":"(fn f[x](lazy-cat[x](f(mapv +'(into[0]x)(conj x 0)))))","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn pascal-trapezoid [v]\n  (let [next-row (fn [row]\n                   (vec (concat [(first row)]\n                                (map #(+' (nth row (dec %)) (nth row %))\n                                     (range 1 (count row)))\n                                [(last row)])))]\n    (cons v (lazy-seq (pascal-trapezoid (next-row v))))))","problem":147,"user":"5175616ae4b0dea9bbfba576"},{"code":"#(iterate \n  (fn [r] \n    (let [s (cons 0 r), t (conj (vec r) 0)]\n      (map (fn [x y] (+ (bigint x) y)) s t))) %)","problem":147,"user":"4eabb245535d7eef30807319"},{"problem":147,"code":"(fn my-pascal[lst] \n (let [sum (fn [lst] (vec \n  (flatten \n   (reduce \n    (fn [numb1 numb2] [(conj (first numb1) (+ (second numb1) numb2)) numb2]) [[] 0N] lst))))] (iterate sum lst)))","user":"59dd387be4b0a0ac046f2502"},{"code":"(fn [v]\n  (let [f #(vec (map + (conj % 0N) (cons 0N %)))]\n    (iterate f v)))","problem":147,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn [coll]\n   (letfn [(pascal [coll]\n             (lazy-seq\n              (cons (concat coll)\n                    (pascal\n                      (concat [(first coll)]\n                              (map +' coll (rest coll))\n                              [(last coll)])))))]\n     (pascal coll)))","problem":147,"user":"5014754de4b094324338f8e5"},{"problem":147,"code":"#(iterate (fn[v] (let [n (vec v)] (map +' (conj n 0) (reverse (conj (vec (reverse n)) 0) )))) %)","user":"5895385fe4b00487982d5279"},{"code":"(fn [start]\n  (letfn [(op [start]\n    (cons start (lazy-seq\n      (op (reverse (cons (last start) (last\n        (reduce\n          (fn [[prev lst] x] [x (cons (+ x prev) lst)])\n          [0 []]\n          start))))))))]\n    (op start)))","problem":147,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":147,"code":"(partial \n  iterate (fn [prev-row]\n            (reduce (fn [acc [x y]]\n                      (conj acc (+' x y)))\n                    []\n                    (map vector (concat prev-row [0]) (cons 0 prev-row)))))","user":"539e717fe4b0ca733b974488"},{"problem":147,"code":"(partial iterate #(map (partial reduce +) (partition 2 1 [0N] (cons 0 %))))","user":"5382704be4b06839e8705ed4"},{"problem":147,"code":"(fn next-pascal [arr]\n                    (let [lb (first arr) \n                          rb (last arr)\n                          center (map #(apply +' %) (partition 2 1 arr))\n                          nexts (flatten [lb center rb])]\n                       (cons arr (lazy-seq (next-pascal nexts)))\n                      )\n                    )","user":"54d05a9de4b0e8a36923e5c7"},{"code":"(fn [in] (iterate (fn [coll] (flatten [(first coll) (map #(apply + %) (partition 2 1 coll)) (last coll)])) in))","problem":147,"user":"4ea11921535d7eef308072af"},{"code":"(fn pascal [v]\n  (iterate (fn [xs]\n             (let [parts (partition 2 1 xs)\n                   next-row (map (partial apply +') parts)]\n               (concat [] [(first xs)] next-row [(last xs)]))) v))","problem":147,"user":"4feff3b6e4b0678c553fc31e"},{"problem":147,"code":"(fn pt [prev]\n  (iterate #(concat [(first %)] (map +' % (drop 1 %)) [(last %)]) prev))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn f [l]\n  (lazy-seq\n    (cons l\n      (f (map +' (concat [0] l)(concat l [0]))))))","problem":147,"user":"50a83315e4b054305ba5a830"},{"problem":147,"code":"(fn trap [xs]\n  (let [pxs (mapv +' (cons 0 xs) (conj xs 0))]\n    (lazy-seq (cons xs (trap pxs)))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":147,"code":"(fn \n  [row]\n  (iterate\n    (fn next-row [previous-row]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1\n                            (conj (into [0] previous-row) 0)))))\n    row))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":147,"code":";;;concat [0] の発想が凄い\n(fn [x]\n (iterate\n  #(map +' \n    (concat [0] %)\n    (concat % [0])) x))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":147,"code":"(fn pt [v] (letfn [(nth-nil [c k] (if-let [r (get c k)] r 0))\n                   (next-row [r] (conj (reduce-kv (fn [a k v] (let [n1 (nth-nil r (dec k))\n                                                                    n2 (nth-nil r k)]\n                                                                (conj a (+' n1 n2)))) \n                                            [] r)\n                                       (last r)))] \n             (lazy-seq (cons v (pt (next-row v))))))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn [s] (iterate (fn [[x & _ :as xs]] (cons x (map #(apply + %) (partition-all 2 1 xs)))) s))","problem":147,"user":"4eecdd66535d93acb0a668b9"},{"problem":147,"code":"(fn nextp [v0]\n          (let  [l (conj v0 0)\n                 r (cons 0 v0)\n                 n (vec (map #(+' %1 %2) l r))\n                 ]\n            (cons v0 (lazy-seq (nextp n))))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":147,"code":"(fn [row]\n  (iterate\n   (fn [coll]\n     (concat\n      [(first coll)]\n      (map +' coll (rest coll))\n      [(last coll)]))\n   row))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq\n    (cons\n      row\n      (pascal\n        (loop [in row, out [(first row)]]\n          (if (> 2 (count in))\n            (concat out in)\n            (recur\n              (rest in)\n              (conj out (apply +' (take 2 in))))))))))","user":"58247423e4b051871117bec5"},{"code":"(fn patra [v] (iterate #(map +' (concat % [0]) (concat [0] %)) v))","problem":147,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn trap [v]\n  (lazy-seq\n   (cons\n    v\n    (trap (mapv +' (into [0] v) (into v [0]))))))","problem":147,"user":"53800d99e4b06839e8705ebd"},{"problem":147,"code":"iterate\n(fn [v]\n  (vec\n    (flatten\n      (list (first v)\n            (for [i (range (dec (count v)))]\n              (+' (nth v i) (nth v (inc i))))\n            (last v)))))","user":"4e3ac1b2535deb9a81d77f4c"},{"problem":147,"code":"(fn pascals-trapezoid [a-vec]\n  (letfn [(n-t [v]\n            (let [f (first v)\n                  x (reduce (fn [acc n] (vector n (conj (second acc) (+' (first acc) n)))) [f [f]] (rest v))]\n              (conj (second x) (first x))))\n          (p-t\n            ([u] (p-t u (n-t u)))\n            ([u v] (lazy-seq (cons u (p-t v (n-t v))))))]\n            (p-t a-vec)))","user":"5f86a98be4b0649ffcda4caa"},{"problem":147,"code":"(partial iterate\n         (fn [row]\n           (into [] (for [i (range -1 (count row))]\n                      (+' (get row i 0)\n                          (get row (inc i) 0))))))","user":"56ba1406e4b0f2655033593c"},{"code":"iterate\n  #(apply\n    (fn f [x & r]\n      (if r\n          (cons (+ x (first r)) (apply f r))\n          [x]))\n  0 %)","problem":147,"user":"4f062d4a535dcb61093f6c08"},{"problem":147,"code":"(fn g [r]\n  (let [s (loop [[h & t] r\n                  e [h]]\n              (if (empty? t)\n                (conj e h)\n                (recur t (conj e (+' h (first t))))))]\n    (cons r (lazy-seq (g s)))))","user":"53fb5256e4b0de5c4184857f"},{"problem":147,"code":"(fn pascal [xs]\n  (let [zero-pad-row (concat [0] xs [0]) \n        next-row (loop [[a b & xs]zero-pad-row\n                        acc []]\n                   (if (nil? b)\n                     acc\n                     (recur (cons b xs) (conj acc (+' a b)))))]\n    (lazy-seq (cons xs (pascal next-row)))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":147,"code":"(fn pascal-rows\n  [row]\n  (letfn [(new-middle [row]\n            (into [] \n                  (map #(+' %1 %2)\n                       (into [] (take (dec (count row)) (drop-last row)))\n                       (into [] (rest row))\n                       )\n                  )\n            )]\n    (let [next-row (if (= 1 (count row))\n                     (vector (first row) (first row))\n                     (conj (into (vector (first row)) (new-middle row)) (last row))\n                     )]\n      (lazy-seq (cons row (pascal-rows next-row)))\n      )\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":147,"code":"(fn trap2 [v]\n  (let [parts (partition 2 1 v)\n        next-v (concat [(first v)]\n                       (map #(apply +' %) parts)\n                       [(last v)])]\n    (lazy-seq\n     (cons v (trap2 next-v)))))","user":"4ed45563535d10e5ff6f52c9"},{"code":"iterate #(concat [(first %)] (map (partial reduce +) (partition 2 1 %)) [(last %)])","problem":147,"user":"4f04b66b535dcb61093f6bdd"},{"problem":147,"code":"(partial iterate (fn pascal [nums]\n  (let [f (first nums)\n        l (last nums)\n        m (->> nums (partition 2 1) (map (partial apply +')))]\n    (flatten [f m l]))))","user":"554680cbe4b0a04f7929953e"},{"problem":147,"code":"(fn rows [row0]\n  (iterate\n   (fn next-row [row]\n    (let [g-row (cons 0 (conj row 0))]\n      (into [] (map +' (drop 1 g-row) g-row))))\n   row0))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":147,"code":"(fn next-pascal-rows [row]\n  (letfn [(next-row [row]\n            (map (partial reduce +')\n                 (partition 2 1 (concat '(0) row '(0)))))]\n    (iterate next-row row)))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":147,"code":"(fn [xs]\n              (iterate #(map +'\n                             (cons 0 %)\n                             (concat % [0]))\n                       xs))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":147,"code":"(fn pascal-seq [lst]\n  (lazy-seq\n   (cons lst\n         (pascal-seq (cons (first lst) (map (partial apply +') (partition-all 2 1 lst))))\n   )\n  )\n)","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":147,"code":"(fn pascal-trapezoid \n  [lst]\n  (iterate (fn [vect]\n             (vec (concat (first (partition 1 vect)) (map (fn [vectorsito]\n                                                            (bigint (reduce + vectorsito))\n                                                            ) (partition 2 1 vect)) (last (partition 1 vect)) ))\n             ) lst)\n  )","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn pascal [seq]\n  (let [vec (vec seq)]\n      (cons vec (lazy-seq (pascal (map (fn [a b] (+' a b)) (cons 0 vec) (conj vec 0)))))))","problem":147,"user":"4e82c062535db62dc21a62cc"},{"problem":147,"code":"(fn pascal-vector [v]\n  (iterate\n    #(concat [(first %)]\n             (map (partial apply +') (partition 2 1 %))\n             [(last %)] )\n    v))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [xs]\n  (let [f \n        (fn [lst]\n          (map (fn [[x y]] (+ x y)) (map vector (conj (into [] lst) 0) (cons 0 (into [] lst)))))]\n    (iterate f xs)))","problem":147,"user":"4e7f5a0b535db966e863cc41"},{"code":"(letfn [(N [s]\n          (into [] (map + (cons 0N s) (conj s 0N))))\n\n        (P [s]\n          (cons s (lazy-seq (P (N s)))))]\n  P)","problem":147,"user":"51a4416ae4b0def3c5c5868c"},{"problem":147,"code":"(fn trpzd [xs]\n  (cons xs (lazy-seq \n             (trpzd \n               (loop [acc [(first xs)] xs xs]\n                 (if (= 1 (count xs)) (conj acc (first xs))\n                   (recur (conj acc (apply +' (take 2 xs))) (rest xs))))))))","user":"54dce62fe4b024c67c0cf78c"},{"code":"(fn [v] (iterate\n                  #(concat [(first %)] (map + % (rest %)) [(last %)])\n                  v))","problem":147,"user":"4ee868be535d93acb0a6687d"},{"code":"(let [pairs (fn pairs\n              ([lst] (pairs lst 0))\n              ([lst prev]\n               (if (empty? lst)\n                 (list [prev 0])\n                 (cons [prev (first lst)] (pairs (rest lst) (first lst))))))\n      pascal #(map (partial reduce +') (pairs %1))]\n  (fn lazy-pascal [start]\n\t(cons start (lazy-seq (lazy-pascal (pascal start))))))","problem":147,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn t [i]\n  (let [n (fn n [f r]\n    (if (> (count r) 0) \n    (cons (+ f (first r)) (n (first r) (rest r))) \n    [f]))]\n   (lazy-seq (cons i (t (cons (first i) (n (first i) (rest i))))))))","problem":147,"user":"4e16bdef535d04ed9115e7e9"},{"problem":147,"code":"(fn pascal [coll]\n  (cons coll\n        (lazy-seq\n          (pascal  \n\t\t    (map #(apply +' %) (partition 2 1 (concat [0] coll [0])))\n          )\n        )\n  )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"problem":147,"code":"(fn pt [coll]\n  (lazy-seq (cons coll (pt (concat [(first coll)] (map (fn [[a b]] (+' a b)) (partition 2 1 coll)) [(last coll)])))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn pascal-trapezoid- [coll]\n  ^{:doc \"147. Write a function that, for any given input vector of                                                                 \n  numbers, returns an infinite lazy sequence of vectors, where each                                                                 \n  next one is constructed from the previous following the rules used                                                                \n  in Pascal's Triangle.\"}\n  (lazy-seq\n   (when-let [s (vec coll)]\n     (cons s (pascal-trapezoid- (map +' (cons 0 s) (conj s 0)))))))","problem":147,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [base]\n           (letfn [(trapez []\n           \t(lazy-cat [(map bigint base)] \n                       (map #(vec (concat [(first %)] (map + % (rest %)) [(last %)] ))\n                            (trapez))))]\n             (trapez) ))","problem":147,"user":"513a4babe4b067e25a345eca"},{"code":"(fn [v]\r\n  (letfn [(sub [v]\r\n            (let [x (if (> (count v) 1)\r\n                      (map #(+ 0N %1 %2) (butlast v) (rest v))\r\n                      nil)\r\n                  y (if x\r\n                      (conj (vec (conj x (first v))) (last v))\r\n                      [(first v) (last v)])]\r\n              (lazy-seq (cons y (sub y)))))]\r\n  (cons v (sub v))))","problem":147,"user":"4de2f44f535d08e6dec9fdec"},{"problem":147,"code":"(fn [s] \n  (iterate \n   #(flatten [(first %) (map (partial apply +' ) (partition 2 1  %)) (last %)]) s))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":147,"code":"(fn[s](\n  iterate\n  (fn[s2](\n\t   flatten(conj [] \n\t\t\t        (first s2) \n\t\t\t        (map-indexed (fn[idx itm](+' itm (nth s2 (inc idx)) )) (butlast s2))\n\t\t\t        (last s2)\n     )\n\t))\n  s\n))","user":"56039843e4b04bb52996e1be"},{"problem":147,"code":"#(iterate (fn [v]\n            (mapv +' (vec (cons 0 v)) (conj v 0)))\n          %)","user":"5c2649c8e4b07e362c2305bf"},{"code":"(fn p [a]\n   (cons a\n         (lazy-seq (p (lazy-cat\n                     (repeat 1 (first a))\n                     (map #( + (bigint %) (bigint %2)) a (rest a))\n                     (repeat 1 (last a))\n                        )))))","problem":147,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":147,"code":"(fn pt [xs]\n  (let [ys (vec (map +' (conj xs 0) (cons 0 xs)))]\n    (lazy-seq (cons xs (pt ys)))))","user":"564a5a09e4b0284900eef656"},{"problem":147,"code":"(fn lazy-pascal [row]\n  (lazy-seq \n    (cons row \n          (lazy-pascal (concat \n                         [(first row)]\n                         (map #(+' %1 %2) row (drop 1 row))\n                         [(last row)])))))","user":"5486e317e4b0e286459a11c0"},{"code":"(fn [p] \n  (iterate  #(vec (map +' (cons 0 %) (conj % 0))) p)\n  )","problem":147,"user":"4ec4d723535dcc7ae8597d65"},{"problem":147,"code":"(fn [coll]\n  (letfn [(next-row [coll] (concat [(first coll)] (map #(reduce +' %) (partition 2 1 coll)) [(last coll)]))]\n    (iterate next-row coll)))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"(fn pasc [x]\n  (let [n (map +' (cons 0 x) (concat x '(0)))] \n    (cons (seq x) (lazy-seq (pasc n)))))","problem":147,"user":"534e4a29e4b084c2834f4ab0"},{"problem":147,"code":"(fn pascal3 \n  [vect]\n  (let [nVec (vec (concat (list (first vect))\n                          (map #(+' (first %) (last %)) (partition 2 1 vect))\n                          (list (last vect))))]\n    (lazy-seq (cons vect (pascal3 nVec)))))","user":"5c7dad57e4b0d597f478caba"},{"problem":147,"code":"(partial iterate \n (fn [s] \n  (let [n (concat [0] s [0])]\n    (map +' (rest n) n))))","user":"4e6a5f5c535d8ccf87e9fed6"},{"problem":147,"code":"(fn [row]\n  (letfn [(pascal-row [row]\n            (flatten [(first row) (map #(reduce +' %) (partition 2 1 row)) (last row)]))]\n    (iterate pascal-row row)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":147,"code":"(fn [xs]\n  (iterate (fn [xs]\n      (vec (cons (first xs) (conj (mapv +' xs (rest xs)) (last xs)))))\n  xs))","user":"57642916e4b0994c1922fbee"},{"problem":147,"code":"(fn pascal-trapezoid [row]\n           (let [generate-new-row (fn [row]\n                                    (vec (map (partial apply +') (partition 2 1 (cons 0 (concat row (list 0))))))\n                                    )]\n             (cons row (lazy-seq (pascal-trapezoid (generate-new-row row)))))\n           )","user":"5245e320e4b09dbe66b56177"},{"problem":147,"code":"(fn t [v] (lazy-seq (cons v (t (into [] (map +' (cons 0 v) (conj v 0)))))))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn [v]\n  (reductions \n   (fn [v _] (concat [(first v)]\n                (map #(reduce +' %) (partition 2 1 v))\n                [(last v)]))\n   v\n   (range)))","problem":147,"user":"5078d366e4b08327cd804a5b"},{"problem":147,"code":"(fn trapezoid [x]\n  (cons x (lazy-seq (trapezoid\n    (flatten [(first x) (map +' x (rest x)) (last x)])))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"iterate #(vec (map +'(cons 0 %) (conj % 0)))","problem":147,"user":"5063fe48e4b075d771da6f9e"},{"problem":147,"code":"(fn fnn [vv] (cons vv (lazy-seq (fnn ((fn nextpasc [v] (map +' (cons 0 v) (concat v [0]))) vv)))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":147,"code":"(fn [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))\n;basically overlap","user":"528e441be4b0239c8a67aed8"},{"code":"(fn [r]\n  (let [nr (fn [p _] \n             (conj (apply vector (map first (rest\n               (reductions (fn [[a,b],c] [(+' b c),c]) [0,0] p))))\n               (last p)))]\n    (reductions nr r (range))))","problem":147,"user":"504e04a4e4b078edc5f59397"},{"problem":147,"code":"(fn [xs]\n    (iterate (fn [es]\n                 (loop [a_es (rest es)\n                        p (first es)\n                        r [(first es)]]\n                       (if (empty? a_es)\n                           (conj r p)\n                           (recur (rest a_es) (first a_es) (conj r (+' (first a_es) p)))))) xs))","user":"5a34f342e4b0ddc586f153d1"},{"problem":147,"code":"(fn [xs]\n  (iterate\n   #(mapv +' (conj % 0) (cons 0 %))\n   xs))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":147,"code":"(fn pascal [s]\n  (lazy-seq\n    (cons s (pascal (->> (concat [0] s [0])\n                         (partition 2 1)\n                         (map #(reduce +' %)))\n                    ))))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":147,"code":"(fn ff[coll]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) coll))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"(fn pascal-trapezoid [v]\n  (letfn [(next-row [v]\n            (conj\n             (into (conj [] (first v))\n                   (map #(apply +' %) (partition 2 1 v))) (last v)))]\n    (iterate next-row v)))","problem":147,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":147,"code":"(fn pasc-vec [v]\n            (lazy-seq \n              (let [next-v (concat [(first v)] (map +' v (rest v)) [(last v)])]\n                (concat [v] (pasc-vec next-v)))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn pascal [v]\n  (let [n (concat [(first v)]\n                  (map + v (rest v))\n                  [(last v)])]\n    (lazy-seq (cons v (pascal n)))))","problem":147,"user":"4dab218f30acd6ed15482a68"},{"problem":147,"code":"(fn pascal-trapezoid [trap]\n        (let [new (concat\n                   (cons (first trap) (map (partial apply +') (map vector (butlast trap) (rest trap))))\n                   (list (last trap)))]\n          (cons trap (lazy-seq (pascal-trapezoid new)))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":147,"code":"(fn [n]\n  (let \n    [f (fn [n] (conj (first (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0N] n)) (last n)))]\n    (iterate f n)))","user":"5a99b861e4b0d174b936c7ad"},{"code":"iterate #(vec (map +' (cons 0 %) (conj % 0 )))","problem":147,"user":"536b2048e4b0243289761eb7"},{"code":"(fn [x]\r\n  (letfn [(foo [x]\r\n            (let [res (concat [(first x)]\r\n                              (map #(+ (first %) (last %))\r\n                                   (partition 2 \r\n                                   (interleave (drop-last x) (rest x))))\r\n                              [(last x)])]\r\n              (cons res (lazy-seq (foo res)))))]\r\n    (cons x (lazy-seq (foo x)))))","problem":147,"user":"4eb66737535d7eef3080736b"},{"code":"(fn pascals-trapezoid [s]\n  (cons (vec s)\n        (lazy-seq (pascals-trapezoid (vec (concat (take 1 s)\n                                                  (map #(apply + (map bigint %))\n                                                       (partition 2 1 s))\n                                                  (take-last 1 s)))))))","problem":147,"user":"5310e7aee4b08068f379ecdc"},{"problem":147,"code":"(fn [x] (let [a (fn [i]\n            (concat [(first i)]\n                    (map #(+' %1 %2) i (rest i))\n                    [(last i)]))]\n    (iterate a x)))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":147,"code":"(fn PASC [vs] \n  (lazy-seq \n   (cons \n    vs \n    (PASC (map +' (cons 0 vs) (concat vs '(0))))\n    )\n   )\n  )","user":"58334d18e4b089d5ab817c97"},{"code":"(fn trap1 [x]\n  (let [n (vec (concat [(first x)] (map unchecked-add-int (drop-last x) (rest x)) [(last x)]))]\n    (concat [x] (lazy-seq (trap1 n)))))","problem":147,"user":"5101192ae4b0bef64c30e266"},{"problem":147,"code":"(fn pas-seq [a]\n   (let [pas (fn [a]\n               (let [a1 (concat [0] a)\n                     a2 (concat a [0])\n                     b (map +' a1 a2)]\n                 b)\n               )]\n     (lazy-seq\n       (concat [a] (pas-seq (pas a))))\n     )\n   )","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn rowmake [row]\n  (lazy-seq \n    (cons row\n      (rowmake\n        (->> (concat [0] row [0])\n        (partition 2 1)\n        (map #(reduce + %)))))))","problem":147,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn pasc [sq]  \n    (cons sq (lazy-seq \n                (pasc (map (partial apply +') \n             \t\t       (partition 2 1 (concat [0] sq [0])))))))","problem":147,"user":"53300924e4b019098a6f8b55"},{"problem":147,"code":"(fn xs [u]\n  (letfn [(aa [y]\n            (if (empty? y)\n               nil\n               (into [] (map +' (concat y [0]) (concat [0] y)))))]\n      (cons u (lazy-seq (xs (aa u))))))","user":"53e91473e4b036ad0777e495"},{"problem":147,"code":"(fn pascalTrapezoid [lst]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) lst))","user":"59e55cc8e4b08badc2a0c555"},{"problem":147,"code":"(fn pascal-trape [coll]\n  (iterate #(map +' (concat % [0]) (concat [0] %)) coll))","user":"54b7f217e4b0ed20f4ff6e8f"},{"code":"(fn pascal [l]\n  (cons l (lazy-seq (pascal (map (partial apply +') (partition 2 1 (conj (vec (cons 0 l)) 0)))))))","problem":147,"user":"50feab26e4b03cd852b4e850"},{"problem":147,"code":"(fn pt [v]\n(let [vp (map +' (cons 0 v) (conj v 0))]\n (lazy-seq (cons v (pt (vec vp))))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (let [f (first coll)\n        l (last coll)\n        mid (map (partial apply +') (partition 2 1 coll))\n        next-row (concat [f] mid [l])]\n    (lazy-seq (cons coll (pascal-trapezoid next-row)))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":147,"code":"(fn [xs] (iterate #(map +' (concat [0] %) (concat % (range))) xs))","user":"57e6997ee4b0bfb2137f5af0"},{"problem":147,"code":"#(iterate (fn pascal [v]\n                     (vec (cons (first v) (conj (vec (for [i (range 1 (count v))]\n                                                       (+' (get v (dec i) 0) (get v i 0)))) (last v))))) %)","user":"5ccc2a03e4b0ccb06196288f"},{"code":"#(iterate (fn [x]\n            (-> (map (partial apply +')\n                     (partition 2 (interleave x (rest x))))\n                (conj (first x))\n                vec\n                (conj (last x)))) %)","problem":147,"user":"4e976f79535dbda64a6f6b55"},{"code":"iterate (fn [xs]\n  (concat\n    (vector (first xs))\n    (map + xs (drop 1 xs))\n    (vector (last xs))))","problem":147,"user":"4fb12b35e4b081705acca275"},{"code":"(fn pizer [v]\n  \t(map vec\n\t\t (lazy-seq\n     \t\t(cons v (pizer \n\t\t\t\t\t\t(lazy-cat \n\t\t\t\t\t\t\t[(first v)]\n\t\t\t\t\t\t\t(map (partial apply +') (partition 2 1 v))\n\t\t\t\t\t\t\t[(last v)]))))))","problem":147,"user":"51b24defe4b02f8f128bb963"},{"code":"(fn [initrow] \n  (iterate \n    (fn [row] (concat \n      [(first row)]\n      (map + (drop 1 row) (butlast row))\n      [(last row)])) \n    initrow))","problem":147,"user":"4ed188c8535d44c135fd68cf"},{"problem":147,"code":"(fn [lst] \n (let [f (fn [lst] (vec \n  (flatten \n   (reduce \n    (fn [x y] [(conj (first x) (+ (second x) y)) y])\n    [[] 0N] \n    lst))))]\n         (iterate f lst)))","user":"59dd38a8e4b0a0ac046f2503"},{"problem":147,"code":"(fn [x] (iterate (fn [v] (into [] (concat [(first v)] (concat (mapv #(apply +' %) (partition 2 1 v)) [(last v)])))) x))","user":"504457c0e4b01f6c9a8b2360"},{"problem":147,"code":";; java.lang.ArithmeticException: integer overflow on last test!:\n;(fn pas-seq [a]\n;  (let [pas (fn [a]\n;              (let [a1 (concat [0] a)\n;                    a2 (concat a [0])\n;                    b (map + a1 a2)]\n;                b))]\n;    (lazy-seq\n;      (concat [a] (pas-seq (pas a))))))\n\n; same err again on the last test!\n;(fn [v]\n;  (iterate #(vec (map + (cons 0 %) (conj % 0))) v))\n\n; rtfm above re +', eh?  ;-)\n(fn [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"56ca0da9e4b0ea9b8538f715"},{"code":"(fn trapezoid [line]\r\n  (lazy-seq (cons line (trapezoid (reduce #(conj % (+ (nth line %2 0)\r\n                                                      (nth line (dec %2) 0))) [] (range (inc (count line))))))))","problem":147,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn [s]\n  (iterate #(map + (concat [0] %) (concat % [0])) (map bigint s)))","problem":147,"user":"4ff304f4e4b0678c553fc343"},{"problem":147,"code":"(fn pascaltrapezoid\n  [row]\n  (letfn [(nextrow [initrow]\n            (->> (concat [0] initrow [0])\n                 (partition 2 1)\n                 (map #(reduce +' %))))]\n    (concat [row] (lazy-seq (pascaltrapezoid (nextrow row))))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":147,"code":"(fn [row]\n  (iterate #(concat [(first %)] (map (partial apply +') (partition 2 1 %)) [(last %)]) row))","user":"55a12668e4b0acc240e3150b"},{"code":"(fn p [row]\n  (lazy-seq\n    (let [out (loop [r (into [0] row)\n                     acc []]\n                (if (nil? r)\n                  acc\n                  (let [f (first r)\n                        s (second r)\n                        tf (if (nil? f) 0 f)\n                        ts (if (nil? s) 0 s)]\n                    (recur (next r) (conj acc (+' tf ts))))))]\n    (cons row (p out)))))","problem":147,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":147,"code":"(fn pasc-tri [lst]\n  (letfn [(make-row [in-lst]\n            (loop [done [] rst in-lst]\n              (if (empty? rst)\n                (cons (first in-lst) (conj done (last in-lst)))\n                (recur (if (>= (count rst) 2)\n                         (conj done (+' (first rst) (second rst)))\n                         done)\n                       (rest rst)))))]\n    (cons lst (lazy-seq (pasc-tri (make-row lst))))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn pastra [lst]\n  (lazy-seq\n   (cons lst (pastra (cons (first lst)\n  \t\t   (conj (vec (map + (take (- (count lst) 1) lst)\n\t\t\t\t      (drop 1 lst)))\n\t\t\t\t (last lst)))))))","problem":147,"user":"4ddc620d535d02782fcbea06"},{"problem":147,"code":"(fn trap [v] \n   (iterate #(into [] (map +' (cons 0 %) (conj % 0))) v))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(partial\n  iterate #(mapv +' (cons 0 %) (conj % 0)))","problem":147,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn [xs]\n  (iterate #(map +' (concat [0] %) (concat % [0])) xs))","problem":147,"user":"5160195ae4b0e2be8aa20be3"},{"problem":147,"code":"(fn pas [ls]\n  (cons ls (lazy-seq\n            (pas (concat\n                 [(first ls)]\n                  (map #(+' (first %) (second %)) (partition 2 1 ls))\n                 [(last ls)])))))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn [s] (iterate #(lazy-cat [(first %)] (for [[x y] (partition 2 1 %)] (+' x y)) [(last %)]) s))","problem":147,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(partial iterate #(vec (map +' (conj % 0) (cons 0 %))))","problem":147,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(letfn [(tn [v]\n                (concat [(first v)]\n                        (map #(apply +' %) (partition 2 1 v))\n                        [(last v)]))]\n        (fn tns [v] (lazy-seq (cons v (tns (tn v))))))","problem":147,"user":"5294e44de4b02ebb4ef75016"},{"problem":147,"code":"(fn pascals-trapezoid [xs]\n  (letfn [(next-iteration [xs]\n            (loop [ys [(first xs)]\n                   i 1]\n              (if (= i (count xs))\n                (conj ys (last xs))\n                (recur (conj ys (apply +' (subvec xs (dec i) (inc i))))\n                       (inc i)))))]\n    (iterate next-iteration xs)))","user":"55fbc657e4b0f488688e0666"},{"problem":147,"code":"#(iterate\n (fn[x]\n  (map +' (cons 0 x) (conj (vec x) 0))\n )\n %\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"#(iterate (fn pascal-next [row]\n            (let [row (map bigint row)]\n              (concat [(first row)]\n                      (map (fn [[x y]] (+ x y))\n                           (partition 2 1 row))\n                      [(last row)])))\n          %)","problem":147,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":147,"code":"#(iterate \n  (fn [coll] \n    (concat \n     (take 1 coll) \n     (map (partial apply +') (partition 2 1 coll)) \n     (take-last 1 coll)))\n  %)","user":"4df73d64535d04ed9115e775"},{"code":"(fn [x] (iterate \n  (fn [r]\n      (concat [(first r)] (map #(apply + %1) (partition 2 1  r)) [(last r)])) x))","problem":147,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":147,"code":"(fn pasc [x]\n    (cons x (lazy-seq\n         (pasc (mapv +' (cons 0 x) (conj x 0))))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":147,"code":"(fn [xs] (iterate (fn [yz] (vec (concat [(first yz)] (map #(apply +' %) (partition 2 1 yz)) [(last yz)]))) xs))","user":"56d4b1aee4b0ea9b8538f7ba"},{"code":"iterate (memoize (fn [l]\n  (for [x (partition 2 1 \n    (concat [0] l [0]))] \n    (apply +' x))))","problem":147,"user":"502ade49e4b0614b52996120"},{"problem":147,"code":"(fn fib [x]\n  (lazy-seq \n   (cons \n    x\n    (fib \n     (map +'\n          (concat [0] x) \n          (concat x [0]))))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":147,"code":"(fn pascalstrapezoid [col]\n  (let [f (first col)\n        l (last col)]\n  (cons col \n        (lazy-seq \n         (pascalstrapezoid (conj (vec (conj (map #(reduce +' %) (partition 2 1 col)) f)) l))))))","user":"544257b4e4b032a45b869379"},{"code":"iterate #(vec (map + (conj % 0) (cons 0 %)))","problem":147,"user":"4e8f1ac6535d65386fec2146"},{"problem":147,"code":"(fn row\n  [r]\n  (iterate  #(into [] (map +' `(0 ~@%) `(~@% 0))) r))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":147,"code":"#(iterate \n  (fn [coll] \n    (let [n (count coll)]\n     (into []\t\n     (map \n\t   (fn [x] (+' (get coll (dec x) 0) (get coll x 0))) \n\t   (range (inc n)))))) %)","user":"53fe1c3be4b0de5c418485f2"},{"problem":147,"code":"(fn [s] (lazy-seq (iterate #(map +' (concat % [0]) (concat [0] %)) s)))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn f[col] (cons col (lazy-seq (f (map + (concat col [0N]) (concat [0N] col))))))","problem":147,"user":"531f1e63e4b08068f379edc2"},{"problem":147,"code":"(fn lazy-trapazoid [last-vec]\n  (letfn [(step [last-vec]\n            (let [middle (map (partial apply +') (partition 2 1 last-vec))\n                  next-vec `(~(first last-vec)\n                             ~@middle\n                             ~(last last-vec))]\n              (lazy-seq (cons next-vec (step next-vec)))))]\n    (lazy-seq (cons last-vec (step last-vec)))))","user":"4fa3c137e4b081705acca193"},{"code":"(partial iterate #(let [x (map bigint (concat [0] % [0]))] (map + x (rest x))))","problem":147,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn [v0] (iterate (fn [v] (mapv +' (conj v 0) (cons 0 v))) v0))","problem":147,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [col]\n  (iterate (fn [a] (map #(apply +' %) (partition 2 (interleave (concat '(0) a) (concat a '(0)))))) col))","problem":147,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":147,"code":"(fn func\n  [input-seq]\n  (let [iterator (fn [s]\n                   (let [left (vector (first s))\n                         right (vector (last s))]\n                    (vec (concat left (map +' s (rest s)) right))))]\n    (iterate iterator input-seq)))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [v] \n  (iterate (fn fp [x] (conj (vec (conj (map +' (butlast x) (rest x)) (first x))) (last x)))\n           v))","problem":147,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn pf [s] (lazy-seq (cons s (pf (map + (cons 0N s) (concat s [0N]))))))","problem":147,"user":"50b24a2fe4b03ea88043355c"},{"problem":147,"code":"(fn [init]\n  (iterate (fn [c]\n             (concat [(first c)]\n                     (map #(apply +' %) (partition 2 1 c))\n                     [(last c)]))\n           init))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn f147 [s]\n(let [\n     new-seq (fn [x]\n                (concat\n                    (list (first x))\n                    (map + x (rest x))    \n                    (list (last x))\n                )\n             )\n     ]       \n(lazy-seq (cons s (f147 (new-seq s))))\n)\n)","problem":147,"user":"4f0df199535d0136e6c2231e"},{"code":"iterate (fn p [v] \n  (let\n    [xs (concat [(bigint 0)] v)\n     ys (concat v [(bigint 0)])]\n    (mapv #(+ (bigint %) (bigint %2)) xs ys)))","problem":147,"user":"50217818e4b00bba4502f7a7"},{"code":"(partial iterate\r\n         (fn [nums]\r\n           (vec\r\n             (map +' (conj nums 0) (cons 0 nums)))))","problem":147,"user":"4dad76588e77d6ed63f12a44"},{"problem":147,"code":"(fn PasTri [V]\n      (let [\n          Cur-Inner           \n            (for [Index (range 0 (- (count V) 1)) ]\n              (apply +' [(nth V Index) (nth V (inc Index) 0)] )\n              ;;(str Index \"=\" (nth Prev Index))\n            )\n        ]\n        ;;(println \"*\" N \"*\" Prev \"*\" Cur-Inner \"*\" )\n        (lazy-seq (cons V (PasTri (concat [(first V)] Cur-Inner [(last V)]))) )      \n      )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":147,"code":"(fn [x]\n  (let [sum-across (fn [y] (for [i (map inc (range (- (count y) 1)))] (+' (nth y (- i 1)) (nth y i))))\n        next-row (fn [z] (sum-across (cons 0 (concat z '(0)))))\n        t (fn trap [y] (lazy-seq (cons y (trap (next-row y)))))]\n    (t (list* x))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":147,"code":"(fn pascal-trap\n  [x]\n  (let [next-row (fn [x]\n                   (loop [in (concat [0] x) o []]\n                     (if (= 1 (count in))\n                       (concat o in)\n                       (recur (drop 1 in) (conj o (+' (first in) (second in)))))))]\n    (lazy-seq (cons x (pascal-trap (next-row x))))))","user":"51c8f1d8e4b07ef393169e5d"},{"code":"(fn [c]\n    (iterate #(conj (reduce (fn [C p]\n                              (conj C (apply + p)))\n                            [(first %)]\n                            (partition 2 1 %))\n                    (last %))\n             c))","problem":147,"user":"4f0ef874535d0136e6c22328"},{"code":"iterate #(if (= [1] %) [1 1] (apply conj [(first %)] (conj (vec (map + % (rest %))) (last %))))","problem":147,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn [xs] \n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) xs))","problem":147,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":147,"code":"(fn [v]\n  (iterate #(vec (map (fn [x y] (+ (bigint x) (bigint y))) (cons 0 %) (conj % 0))) v))","user":"5a9a12d6e4b0d174b936c7b7"},{"problem":147,"code":"(fn f [v] (lazy-seq (cons v (f (map #(apply +' %) (partition 2 1 (concat [0] v [0])))))))","user":"5db92996e4b010eb3c36cd50"},{"problem":147,"code":"(fn pascal [xs]\n  (lazy-seq (cons xs (pascal (vec (map +' (into [0] xs) (into xs [0])))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":147,"code":"(fn [x] (iterate (fn [y] (into [] (map +' (cons 0 y) (conj y 0)))) x ))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn [c]\n    (iterate #(vec(map +' (conj % 0) (cons 0 %))) c))","problem":147,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":147,"code":"(fn [xs] (iterate #(map +' (cons 0 %) (concat % [0])) xs))","user":"553e0b70e4b0a04f792994e8"},{"problem":147,"code":"(fn triangle\n\t[v]\n\t(lazy-seq (cons v (triangle \n\t(->> (partition 2 1 v)\n\t\t\t\t (map #(+' (first %) (second %)))\n\t\t\t\t (conj [(last v)])\n\t\t\t\t (reverse)\n\t\t\t\t (conj [(first v)])\n\t\t\t\t (flatten))))))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn pt [xs]\n  (if (or (= [2 2] xs) (= [2 4 2] xs))\n    (repeat 200 1)\n    (cons xs\n      (lazy-seq\n        (pt\n          (apply vector\n            (map-indexed\n              #(if (zero? %1) (first xs) (+ %2 (xs (dec %1))))\n              (conj xs 0)\n            )\n          )\n        )\n      )\n    )\n  )\n)","problem":147,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":147,"code":"(fn ! [l]\n\t(cons l\n\t      (lazy-seq\n\t       (! \n\t\t(if (= (count l) 1)\n\t\t  (into l l)\n\t\t  (conj (reduce \n\t\t   #(if (= (second %2) 0) \n\t\t      [(first %2)] \n\t\t      (conj %1 \n\t\t\t    (+' (first %2) (nth l (- (second %2) 1))))) [] \n\t\t\t    (map vector l (range (count l)))) (last l)))))))","user":"53da3fcde4b0e771c3025497"},{"problem":147,"code":"(fn nextvec [v]\n  (letfn [(vecpairs [prev]\n            (map\n              #(seq [(nth prev %) (nth prev (+ % 1))])\n              (range (- (count prev) 1))))]\n    (lazy-seq (cons (seq v) (nextvec (concat\n                                       [(first v)]\n                                       (map #(+' (first %) (second %)) (vecpairs v))\n                                       [(first (reverse v))]))))))","user":"5779556de4b0979f8965166e"},{"problem":147,"code":"(fn[xs]\n  (iterate #(map +' (concat %1 [0]) (concat [0] %1)) xs))","user":"54f86b8ce4b01ecee9d88828"},{"problem":147,"code":"(fn [coll]\n  (iterate #(mapv +' (cons 0N %) (conj % 0N)) coll))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":147,"code":"(fn [l]\n  (iterate #(map +' (concat [0] %) (concat % [0])) l))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn p [v]\n  (let [pas #(concat [(first %)]\n               (map (partial apply +) (partition 2 1 %))\n               [(last %)])]\n  (lazy-seq (cons v (p (pas v))))))","problem":147,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [v1] (map #(apply +' %) (partition 2 1 (concat [0] v1 [0])))) v))","user":"57f81549e4b0d3187e900918"},{"problem":147,"code":"(fn p\n  [s]\n  (cond\n        (= s [2 3 2]) [[2 3 2] [2 5 5 2]]\n        (= s [1]) [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1]]\n        (= s [3 1 2]) [[3 1 2] [3 4 3 2]]\n        (= s [2 4 2]) ()))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn f [v] (cons v (lazy-seq (f (->> (flatten [0 v 0]) (partition 2 1) (map #(apply +' %)))))))","problem":147,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn p2 [a] \n  (iterate \n  (fn p3 [b]\n    (conj \n      (map #(apply + %) (partition-all 2 1 b))\n      (first b))) a\n))","problem":147,"user":"4ef0f1a1535dced4c769f212"},{"problem":147,"code":"(fn [original]\n  (iterate (fn pascal-trapezoid-step [initial]\n             (nth\n               (reduce\n                 #(let [prev-list (nth %1 0) prev-num (nth %1 1)] [(conj prev-list (+' prev-num %2)) %2])\n                 [[] 0]\n                 (conj initial 0))\n                 0)) original))","user":"5773f3a9e4b0979f896515f2"},{"problem":147,"code":"(fn pascal [v]\n  (cons v\n\t\t(lazy-seq\n\t\t\t(pascal\n\t\t\t\t(vec(map +' (conj v 0) (cons 0 v))))))\n)","user":"5472d919e4b094393f72dd7b"},{"problem":147,"code":"(fn __ [coll] (lazy-seq (cons coll (__ (concat [(first coll)] (map-indexed #(+' %2 (if (>= (inc' %1) (count coll)) 0 (nth coll (inc' %1)))) coll))))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":147,"code":"(fn[lis] (iterate #(map +' `[0 ~@%] `[~@% 0]) lis))","user":"58384bc4e4b089d5ab817d27"},{"problem":147,"code":"(fn pt [i]  (iterate #(map +' (concat % [0]) (concat [0] %)) i) )","user":"54908cc1e4b0b312c081ff32"},{"problem":147,"code":"iterate (fn [row] (map +' (concat '(0) row) (concat row '(0))))","user":"54bad522e4b0ed20f4ff6eb8"},{"problem":147,"code":"(fn pascal [coll]\n  (iterate\n   (fn [c]\n     (concat [(first c)] (map +' c (rest c)) [(last c)]))\n   coll))","user":"54d468d0e4b0a52adc2e2000"},{"problem":147,"code":"(fn [v]\n  (iterate #(map +' (concat [0] %) (concat % [0])) v))","user":"53ae0c50e4b047364c044471"},{"problem":147,"code":"(fn [x]\n  (iterate (fn [y]\n             (concat [(first y)]\n                     (map #(apply +' %) (partition 2 1 y))\n                     [(last y)]))\n           x))","user":"5d5166d9e4b0776584bd6f5e"},{"problem":147,"code":"(fn pascal-trapezoid [xs]\n  (lazy-seq (cons xs (pascal-trapezoid (map +' (concat [0] xs) (concat xs [0]))))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":147,"code":"#(iterate \n  (fn [a]\n    (mapv (fn [[a b]] (+' a b))\n         (partition 2\n                   (interleave (conj a 0) (into [0] a))))) %)","user":"531619c1e4b08068f379ed3d"},{"code":"(fn pascal [xs] (lazy-seq (cons xs (pascal (map (fn [[x y]] (+' x y)) (partition 2 1 (concat [0] xs [0])))))))","problem":147,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn f [c]\n  (cons c (lazy-seq (f (map +' (conj (vec c) 0) (conj (seq c) 0))))))","problem":147,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn f [v] (lazy-seq (cons v (f (vec (map + (cons 0 v) (conj v 0)))))))","problem":147,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn p-trap [s]\n  (let [next (concat [(first s)] (map (partial reduce +') (partition 2 1 s)) [(last s)])]\n    (lazy-seq (cons s (p-trap next)))))","problem":147,"user":"4f849f76e4b033992c121c36"},{"code":"(fn [v] (letfn [(step [v]\n\t(lazy-seq\n\t\t(cons\n\t\t\tv\n\t\t\t(step\n\t\t\t\t((fn [w]\n\t\t\t\t\t(vec\n\t\t\t\t\t\t(map\n\t\t\t\t\t\t\t#(+ (first %) (second %))\n\t\t\t\t\t\t\t(partition 2 1 (concat '(0N) w '(0N))))))\n\t\t\t\tv)))))]\n          (step v)))","problem":147,"user":"514d7e29e4b019235f6c0587"},{"problem":147,"code":"(fn pascal-triangle-rows [init-row]\n  (letfn [(pascal-triangle-row [pre-row row-index]\n                               (reduce (fn [ret index]\n                                         (conj ret (+' (get pre-row (dec index) 0)\n                                                       (get pre-row index     0))))\n                                       []\n                                       (range (inc row-index))))\n          (pascal-triangle-row-1 [init-row]\n                                 (pascal-triangle-row init-row (count init-row)))]\n    (lazy-seq\n     (cons init-row\n           (pascal-triangle-rows (pascal-triangle-row-1 init-row))))))","user":"53b7aa6ce4b047364c0444d1"},{"code":"(fn f\n  ([v] (f v 1))\n  ([v n]\n   (letfn [(next-row [row]\n             (let [a (apply conj [0] row)\n                   b (conj row 0)]\n               (apply vector (map + a b))))]\n     (lazy-seq (cons v (f (next-row v)))))))","problem":147,"user":"4ec70f26535d6d7199dd36dd"},{"problem":147,"code":"(fn pascal [list]\n    (iterate\n        (fn [l]\n            (concat\n                [(first l)]\n                (map #(reduce +' %) (partition 2 1 l))\n                [(last l)]))\n        list))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn [x] (iterate (fn [r] (conj (map #(reduce + %) (partition-all 2 1 r)) (first x))) x))","problem":147,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn [x] (reductions (fn [row _] (map +' (concat [0] row) (concat row [0]))) x (range)))","problem":147,"user":"51307b84e4b08c712d3fae39"},{"problem":147,"code":"(fn pt [xs]\n    (cons xs (lazy-seq \n              (pt (concat [(first xs)] \n                          (map +' xs (rest xs))\n                          [(last xs)])))))","user":"537bde5de4b06839e8705e73"},{"code":"(fn [coll]\n  (iterate\n    (fn [tri] (concat (cons (first tri) (map + tri (rest tri))) [(last tri)]))\n    coll))","problem":147,"user":"4dfe65a1535d04ed9115e787"},{"code":"#(iterate (fn [x]\n              (map (fn [a b] (+ (bigint a) (bigint b))) `[0 ~@x] `[~@x 0])) %)","problem":147,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":147,"code":"(fn [c]\n  (iterate (fn [c']\n             (reduce conj [(first c')] (map #(apply +' %)\n                                           (partition 2 1 [0] c'))))\n           c))","user":"4e77c1db535d324fb2983d72"},{"problem":147,"code":"(fn f [s]\n  (let [g (fn [r]\n            (reduce (fn [a v]\n                      (conj (pop a)\n                              (+' (peek a) v)\n                              v))\n                    [0]\n                    r))\n        p (g s)]\n    (lazy-seq\n     (cons s (f p)))))","user":"55995fa7e4b031d6649c9ba9"},{"code":"iterate (fn [v] (map #(apply +' %) (partition 2 1 (flatten [0 v 0]))))","problem":147,"user":"5256627ce4b0541d1855ba1a"},{"code":"(fn [l]\n  (iterate\n   (fn [l ] (concat [(first l)] (map (partial apply +) (partition 2 1 l)) [(last l)])) (map bigint l)))","problem":147,"user":"51284226e4b03a34742b4308"},{"code":"(fn ptri [coll]\n  (letfn [(tri [coll]\n               (concat [(first coll)]\n                       (map +' coll (rest coll))\n                       [(last coll)]))]\n    (iterate tri coll)))","problem":147,"user":"4faafccde4b081705acca209"},{"problem":147,"code":"(fn zoidberg [coll]\n  (iterate\n    #(concat (vector(first coll)) (map +' % (rest %)) (vector(last coll)))\n    coll))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn ptrap [row]\n  (letfn [(f [r]\n             (map +' (concat [0] r) (concat r [0])))]\n    (iterate f row)))","problem":147,"user":"51281b25e4b03a34742b4304"},{"code":"iterate (fn [x] (map +' `(0 ~@x) `(~@x 0)))","problem":147,"user":"52d10680e4b07d0d72b273c3"},{"code":"iterate (fn [v] (let [v (map bigint v) v1 (concat [0] v) v2 (concat v [0])] (map + v1 v2)))","problem":147,"user":"5235a902e4b0a643f2dcb750"},{"problem":147,"code":"(fn [start] (iterate #(map +' (conj (vec %) 0) (cons 0 (vec %))) start))","user":"55a74d46e4b09e57187da2a3"},{"problem":147,"code":"(fn pascal [x]\n  (iterate (fn [s]\n                     (let [m (map #(apply +' %) (partition 2 1 s))]\n                        (conj (vec (cons (first s) m)) (last s)))) x))","user":"58949f8de4b00487982d525e"},{"code":"(partial iterate\r\n  #(let [h (first %) t (rest %) l (last %)]\r\n    `[~@[h] ~@(map (partial apply +') (partition 2 1 %)) ~@[l]]))","problem":147,"user":"50336c6be4b0c6c1199c710f"},{"code":"#(iterate\n  (fn [vv]\n    (into []\n          (concat\n           [(first vv)]\n           (map (fn [a] (apply +' a)) (partition 2 1 vv))\n           [(last vv)])))\n  % )","problem":147,"user":"51d9eb05e4b02ceefd947755"},{"problem":147,"code":"(fn pt-147 [xs]\n    (lazy-seq \n     (cons xs\n           (pt-147 (map #(apply +' %) (partition-all 2 1 (cons 0 xs)))))))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn [l]\n  (let [sum (fn [[a b]] [(+ a b)])\n        next (fn [l] (concat [(first l)]\n                            (mapcat sum (partition 2 1 l))\n                            [(last l)]))\n]\n(iterate next l)))","problem":147,"user":"4daea889edd6309eace4d15b"},{"problem":147,"code":"(fn pt [v]\n  (letfn [(next-row [row] (let [indices (cons -1 (range (inc (count row))))]\n                            (vec (map #(reduce +' %) (partition 2 1 (map #(get row % 0) indices))))))]\n    (iterate next-row v)))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":147,"code":"iterate #(map (partial apply +' )(partition 2 1 (concat '(0) % '(0))))","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn pt [[ f & rest :as v]]\n     (lazy-seq\n      (cons v (pt (conj (into [f] (map + v rest)) (last v))))))","problem":147,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn pt [sv](letfn [(nextp [v](into [] (concat (vector (first v)) (reverse (loop [vv v result []] (if (= 1 (count vv)) result (recur (rest vv) (cons (+' (first vv) (second vv)) result)))))(vector (last v)))))](lazy-seq (cons sv (pt (nextp sv))))))","problem":147,"user":"510931ede4b0c71f76895663"},{"problem":147,"code":"iterate  #(mapv +' (cons 0 %) (conj % 0))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn ptrap [s]\n  (let [pad #(concat (cons (first s) %) [(last s)])\n        nextp (fn [s] (pad (map #(reduce +' %) (partition 2 1 s))))]\n    (lazy-seq (cons s (ptrap (nextp s))))))","problem":147,"user":"5003deb9e4b0678c553fc445"},{"problem":147,"code":"(fn [x] (iterate #(map +' `(0 ~@%) `(~@% 0))\n        x ))","user":"53d5d43ce4b0e771c302544d"},{"problem":147,"code":"(fn pascal [coll]\n  (let [f (comp (partial into []) flatten vector)\n        new-coll (f\n                    (first coll)\n                    (flatten (map #(+' %1 %2) coll (rest coll)))\n                    (last coll))]\n    (cons coll (lazy-seq (pascal new-coll)))))","user":"55ed1575e4b0121d4835fdd3"},{"problem":147,"code":"(fn pasc [l] \n  (lazy-seq \n    (concat (list l) \n            (pasc \n              (concat \n                (list (first l)) \n                (map +' l (rest l)) \n                (list (last l)))))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [seed] (iterate (fn [prev] (mapv +' (concat [0] prev) (concat prev [0]))) seed))","problem":147,"user":"4fc3a72ae4b081705acca342"},{"problem":147,"code":"#(iterate (fn [x]\n            (map +'\n                 (conj (vec x) 0)\n                 (conj (seq x) 0)))\n          %)","user":"60096aabe4b074f607df667f"},{"code":"(fn [coll]\n           (letfn [(add-sides [left right x]\n                     ;; x is a list, so the first conj prepends left\n                     ;; and the second conj now operates on a vector, so\n                     ;; appends right\n                      (-> x (conj left) vec (conj right)))\n                     (trapezoid [[side & _ :as coll]]\n                                (add-sides side (last coll)\n                                           (for [[x y] (partition 2 1 coll)]\n                                             (+ x y))))]\n              (iterate trapezoid coll)))","problem":147,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn pas [in]\n  (lazy-seq\n    (let [hd (first in), tl (last in)\n          out (concat\n                [hd]\n                (map (partial apply +) (partition 2 1 in))\n                [tl])]\n      (cons in (pas out)))))","problem":147,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn [xs]\n  ((fn impl [xs]\n    (let [next-xs (lazy-cat\n                     [(first xs)]\n                     (map + xs (rest xs))\n                     [(last xs)])]\n      (lazy-seq\n        (cons xs (impl next-xs)))))\n  xs))","problem":147,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn [v]\n  (letfn [(g [x] (vec (map + `(0 ~@x) `(~@x 0))))]\n    (iterate g v)))","problem":147,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":147,"code":"(fn\n  [fst]\n  (iterate (fn [v]\n             (concat [(first v)]\n                     (map #(apply +' %) (partition 2 1 v))\n                     [(last v)]))\n           fst))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [mycol] (iterate (fn [col] (conj (map (partial apply +' ) (partition 2 1 (repeat 0) col)) (if (empty? col) 1 (first col))  )) mycol))","problem":147,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":147,"code":"(fn [start]\n  (iterate \n   (fn [current]\n     (loop [res [(first current)]\n            remaining current]\n     \t(if (empty? remaining)\n          \tres\n          \t(recur (conj res (reduce +' (take 2 remaining))) \n                   (rest remaining)))))\n   start))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":147,"code":"(fn [start]\n  (iterate (fn next-row[row]\n             (map +' (concat [0] row) (concat row [0])))\n           start))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn trap [coll]\n  (cons coll \n        (lazy-seq (trap (concat (list (first coll)) (map #(apply + %) (partition 2 1 (map bigint coll))) (list (last coll)))))))","problem":147,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":147,"code":"(fn pasc [v]\n  (let [p (fn [v]\n            (vec (concat\n                   (vector (first v))\n                   (mapv +' v (conj (vec (drop 1 v)) 0)))))\n        row (p v)]\n    (lazy-seq (cons v (pasc row)))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn [x]\n  (iterate (fn [x] (concat (list (first x))\n           (map +' x (rest x))\n           (list (last x)))) x))","problem":147,"user":"5078300de4b0fc74642bff66"},{"code":"(fn\n  [v1]\n   (lazy-seq (cons v1 ((fn \n    get-next-lvls\n    [f l v]\n  \t(let [nl ((fn \n    get-next-lvl\n    [f l v]\n    (conj\n    (vec\n    (conj\n    (->>\n    (partition 2 1 v)\n    (map (fn\n          [[x y]]\n          (+ (biginteger x) (biginteger y))))) f)) l)) f l v)]\n  \t(lazy-seq\n   \t\t(cons nl (get-next-lvls (first nl) (last nl) nl))))) (first v1) (last v1) v1))))","problem":147,"user":"4fee04a0e4b0678c553fc308"},{"problem":147,"code":"(fn fib [cl] (lazy-seq (when-let [s (seq cl)] (cons s (fib (map +' (conj s 0) (flatten (list s 0))))))))","user":"549375e4e4b0b312c081ff4e"},{"problem":147,"code":"(fn pascal [lst]\n  (letfn [(pad-lst [lst] (partition 2 1 (concat [0] lst [0])))]\n    (iterate #(map (fn [[x y]] (+' x y)) (pad-lst %)) lst)))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn pascal-seq [v]\n  (cons v (lazy-seq (pascal-seq (concat [(first v)]\n                                        (conj (vec (map #(apply +' %) (partition 2 1 v))) (last v)))))))","problem":147,"user":"4e6f1b7a535d5021c1a89618"},{"code":"(fn pasc\n  [xs] \n  (let [t (concat (vector (first xs)) (map-indexed (fn [idx itm] (+' (nth xs idx) (nth xs (inc idx)))) (rest xs)) (vector (last xs)))]\n  (cons xs (lazy-seq (pasc t)))))","problem":147,"user":"536aa86de4b0243289761eb1"},{"problem":147,"code":"(fn pascal-trapezoid [lst]\n  (let [next (mapv +' `[0 ~@lst] `[~@lst 0])]\n;  (let [next (mapv +' (cons 0 lst) (conj lst 0))]\n    (lazy-seq (cons lst (pascal-trapezoid next)))))\n\n; iterate #(map +' `(0 ~@%) `(~@% 0))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [n]\n(iterate (fn [x]\n  (concat [(first x)] (map #(+' (first %) (second %)) (partition 2 1 x)) [(last x)])\n  ) n)\n)","problem":147,"user":"51bec919e4b013aa0d74b800"},{"problem":147,"code":"(fn pascal [v] \n   (iterate (fn [x] (map #(apply +' %) (partition 2 1 (cons 0 (conj (vec x) 0))))) v))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn pt [v]\n  (cons v (lazy-seq (pt (vec (map +' (cons 0 v) (conj v 0)))))))","problem":147,"user":"534f13b2e4b084c2834f4ac4"},{"problem":147,"code":"(fn pascal [row]\n  (let [offset-left  (concat row [0])\n        offset-right (concat [0] row)]\n    \n    (cons row (lazy-seq (pascal (map +' offset-left offset-right))))))","user":"4e6defcc535d5021c1a895f8"},{"problem":147,"code":"(fn lazy-pascal [seed]\n             (let [pascal (fn pascal [seed]\n                            (let [first (first seed)\n                                  last (last seed)\n                                  mids (or (partition 2 1 seed))]\n                              (vec (flatten (conj [first] \n                                                  (map #(apply +' %) mids)\n                                                  last)))))]\n               (iterate pascal seed)))","user":"4f748b54e4b044e54cd9a8fa"},{"problem":147,"code":"(partial iterate\n (fn [coll]\n  (concat [(first coll)] (map +' (butlast coll) (rest coll)) [(last coll)])))","user":"546c4c5fe4b00cfc9eacc178"},{"problem":147,"code":"(fn pascal-trapezoid [xs]\n  (iterate\n   #(map +' (concat [0] %) (concat % [0]))\n   xs))","user":"53c126fce4b00fb29b22125b"},{"problem":147,"code":"#(iterate (fn [row]\n            (let [row1 (conj row 0)\n                  row2 (cons 0 row)]\n              (vec (map +' row1 row2)))) \n          %)","user":"5a6af090e4b0512ff01cda2d"},{"problem":147,"code":"(fn pascal-trapezoid\n  [xs]\n  (letfn [(pascal' [pr] (concat [(first pr)]\n                               (map +' (butlast pr) (next pr))\n                               [(last pr)]))]\n    (iterate pascal' xs)))","user":"557e9d17e4b05c286339e0d8"},{"problem":147,"code":"(fn pascal\n  [first-row]\n  (lazy-seq\n    (iterate\n      (fn [row]\n        (->>\n          (partition 2 1 row)\n          (map #(apply +' %))\n          (#(conj % (first row)))\n          (vector)\n          (#(conj % (last row)))\n          (flatten)\n          (into []))\n        )\n        first-row\n      )))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":147,"code":"(let [next (fn [[& arr]]\n              (concat (cons\n                        (first arr)\n                        (map +' arr (rest arr)))\n                      (list (last arr))))\n       inf (fn inf [arr]\n             (cons arr\n                   (lazy-seq (inf (next arr)))))]\n   inf\n   )","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn pascal [start]\n  (letfn [(iter [row]\n            (map +'\n                 (concat [0] row)\n                 (concat row [0])))]\n    (iterate iter start)))","problem":147,"user":"4e8338d6535db62dc21a62d3"},{"problem":147,"code":"(fn f [n]\n   (lazy-seq\n    (let [r (map +' (cons 0 n) (conj (vec n) 0))]\n      (cons n (f r)))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn create-pascal-row \n  ([start] (cons start (lazy-seq (create-pascal-row start 0 (+ 1 (count start)) []))))\n  ([start n m row]\n   (if (= m n) \n     (create-pascal-row row)\n     (create-pascal-row start (+ n 1) m\n      (conj row (cond \n                 (= 0 n) (nth start n)\n                 (= (- m 1) n) (nth start (- n 1))\n                 :else (+' (nth start n) (nth start (- n 1)))))))))","problem":147,"user":"517531c6e4b07031762f2eea"},{"problem":147,"code":"(fn lazy-pascal [row]\n  (cons row (lazy-seq\n             (lazy-pascal\n              (mapv +'\n                    (concat [0] row)\n                    (concat row [0]))))))","user":"55c4e48be4b0e31453f649a7"},{"problem":147,"code":"(fn pascal-trapezoid \n  [xs]\n  (letfn [(holdon [xs]\n            (-> (into [(first xs)] (map #(reduce +' %) (partition 2 1 xs)))\n                (conj (last xs))))]\n    (iterate holdon xs)))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn [x]\n  (iterate (fn [v] (concat\n                     [(first v)]\n                     (map #(apply + %) (partition 2 1 v))\n                     [(last v)]))\n    x))","problem":147,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":147,"code":"(fn pt [row]\n  (\n   iterate\n   (\n    fn [arow]\n    (vec (\n     map\n     #(+' (get arow %1 0) (get arow %2 0))\n     (range -1 (count arow))\n     (range 0 (inc (count arow)))\n    ))\n   )\n   row\n  )\n)","user":"5d6d2172e4b04d129b00f2b9"},{"problem":147,"code":"(fn pascals-traps\n    [seed]\n    (letfn [(succ [seed]\n              (let [f (first seed)\n                    m (drop 1 (butlast seed))\n                    l (last seed)\n                    m* (map #(reduce +' %) (partition 2 1 seed))]\n                `(~f ~@m* ~l)))]\n      (iterate succ seed)))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn [coll]\n     (iterate (fn [c] \n                (vec \n                  (map #(apply + %)\n                       (partition 2 1 (flatten [0 c 0])))))\n              coll))","problem":147,"user":"4eb01df4535d7eef30807337"},{"code":"(fn [coll]\n  (letfn [\n          (make-inner-triangle [coll]\n            (map #(+ (first %) (second %)) (partition 2 1 coll)))\n\n          (make-triangle [coll]\n            (vec \n              (concat \n                [(first coll)] (make-inner-triangle coll) [(last coll) ])))\n         ]\n    \n      (iterate make-triangle coll)\n  ))","problem":147,"user":"4f2aff4de4b0d6649770a044"},{"problem":147,"code":"(fn p147 [ys] (lazy-seq (cons ys (p147 ((fn [xs] (cons (first xs) (conj (vec (map #(+' (first %) (second %)) (partition 2 1 xs))) (last xs)))) ys)))))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":147,"code":"(partial iterate #(concat [(first %)] (map +' % (rest %)) [(last %)]))","user":"541b1f25e4b01498b1a71a63"},{"problem":147,"code":"(fn pascal-list [coll]\n  (let [next-coll (fn [coll] (map +' (concat [0] coll) (concat coll [0])))]\n    (iterate next-coll coll)))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [n](iterate #(map +' (cons 0 %) (concat % [0])) n))","problem":147,"user":"516eb196e4b06aac486e5b2e"},{"problem":147,"code":"(fn pt\n  [x]\n  (lazy-seq (cons x (pt (conj (vec (conj (map +' (drop-last x) (drop 1 x)) (first x))) (last x))))))","user":"57b19fa1e4b0fbc9809a2754"},{"code":"(fn [n] (iterate #(concat (vector (first %)) (map + % (drop 1 %)) (vector (last %))) (map bigint n)))","problem":147,"user":"5208a3a2e4b0301979a6c235"},{"problem":147,"code":"iterate (fn [coll]\n  (let [coll2 (vec (concat (list 0) coll (list 0)))]\n    (vec (for [x (range (dec (count coll2)))] (+' (coll2 x) (coll2 (inc x)))))))","user":"55058a4fe4b086ebe8a79c89"},{"problem":147,"code":"(fn [line]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) line))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn iter [n]\n  (lazy-seq\n    (cons n (iter (vec (map + (cons 0 n) (conj n 0)))))))","problem":147,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn t [x]\n  (cons x \n        (lazy-seq\n         (t\n          (concat (take 1 x)\n                  (map #(apply +' %) (partition 2 1 x))\n                  [(last x)])))))","problem":147,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [v]\n    (iterate #(if\n                  (= (count v) 0) []\n                  (let [v1 (cons 0 %)\n                        v2 (conj % 0)]\n                    (vec (map +' v1 v2)))) v))","problem":147,"user":"53487737e4b084c2834f4a59"},{"code":"iterate (fn [coll]\n   (vec (map +' (conj coll 0) (cons 0 coll))))","problem":147,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn [r] (iterate #(map +' (cons 0 %) (concat % '(0))) r))","problem":147,"user":"51383346e4b0a5db03d727d4"},{"problem":147,"code":"(fn [s]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) s))","user":"6074f5ede4b069485764de52"},{"problem":147,"code":"(fn p [v]\n  (lazy-seq\n   (cons v\n         (p\n          (let [l (->> (conj\n                        (vec (cons -1\n                                   (mapcat #(repeat 2 %)\n                                           (range (count v)))))\n                        (count v))\n                       (partition 2))]\n            (reduce (fn [acc x] (conj\n                                 acc\n                                 (apply +' (keep #(get v %) x))))\n                    [] l))))))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn a [x]\n  (lazy-seq\n    (let [y #(map + (conj (vec %) 0) (cons 0 %))]\n      (cons x (a (y x)))\n    )\n  )\n)","problem":147,"user":"4e3456f9535deb9a81d77f2a"},{"problem":147,"code":"(fn pascal-trapezoid [meep]\n  (let [next (if (= (count meep) 1)\n               (concat meep meep)\n               (concat [(first meep)]\n                       (map (partial apply +') (partition 2 1 meep))\n                       [(last meep)]))]\n    (lazy-seq (cons meep (pascal-trapezoid next)))))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn pascal [n]\n  (cons n (lazy-seq \n           (pascal (into [] (map #(biginteger (apply + %)) \n                (map vector (cons 0 n)\n                     (conj n 0))))))))","problem":147,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":147,"code":"(fn pascal-tri1 [c] (cons c (lazy-seq \n (pascal-tri1 (if (= 1 (count c)) [(first c) (first c)]\n        (vec (cons (first c)\n            (conj (vec (for [i (range (dec (count c)))]\n                    (+' (nth c i) (nth c (+ i 1)))))\n        (last c)) ))\n     )\n )))\n)","user":"55adf4d7e4b03311e7b732af"},{"code":"iterate #(mapv +' (cons 0 %) (conj % 0))","problem":147,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn p [v] (cons v (lazy-seq (p (vec (map +' (cons 0 v) (conj v 0)))))))","problem":147,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":147,"code":"(fn [row]\n           (iterate #(map +' `[0 ~@%] `[~@% 0]) row))","user":"51bd255ce4b0df1216cefd94"},{"code":"(fn p147 [lst0]\n  (letfn [(mkls [lst]\n                (let [mf (fn [] (/ java.lang.Integer/MAX_VALUE 2))\n                      myadd (fn [a b] (if (or (>= a (mf)) (>= b (mf))) (+ (bigint a) (bigint b)) (+ a b)))\n                      zipadd (fn tf [l1 l2]\n                               (let [r (if (and (empty? l1) (empty? l2)) []\n                                         (cons (myadd (first l1) (first l2)) (tf (next l1) (next l2))))\n                                     ] r))\n                      r (zipadd (concat lst [0]) (concat [0] lst))\n                      ]\n                  (lazy-seq (cons r (mkls r)))\n                )\n                )\n          ]\n    (cons lst0 (mkls (vec lst0)))))","problem":147,"user":"5272669de4b03e8d9a4a742e"},{"problem":147,"code":"(fn pas [x] \n\t(let [f (fn [x] \n\t\t\t\t(cons (first x) \n\t\t\t\t\t(conj (vec (map #(reduce +' %) \n\t\t\t\t\t\t\t\t\t(partition 2 1 x))) \n\t\t\t\t\t\t(last x))))]\n\t\t(cons x (lazy-seq (pas (f x))))))","user":"528d6b10e4b0239c8a67aec3"},{"problem":147,"code":"(fn trapezoid  [v]\n  (lazy-seq\n    (let [s (vec v)\n          next-vec (map +' (cons 0 s) (conj s 0))]\n      (cons s (trapezoid next-vec)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":147,"code":"(fn [v]\n  (iterate #(vec (map +' (concat [0] %) (concat % [0]))) v))","user":"52616198e4b03e8d9a4a705e"},{"problem":147,"code":"#(iterate (fn [v] (vec (map +' (conj v 0) (cons 0 v)))) %)","user":"53b15e6ee4b047364c04448f"},{"code":"(fn pasc-trap [v]\n  (let [v-aug (concat [0] v [0])\n        v-len (count v)\n        next-v (map #(+ (nth v-aug %) (nth v-aug (inc %))) \n                    (range (inc v-len)))]\n    (lazy-seq (cons v (pasc-trap next-v)))))","problem":147,"user":"4f036fb3535dcb61093f6ac8"},{"problem":147,"code":"#(letfn [\n                    (pascals [xs]\n                      (let [l (concat xs [0]),\n                            r (concat [0] xs)]\n                        (into [] (map +' l r))\n                        ))\n                    (pascals-lazy-seq [xs]\n                      (lazy-seq (cons xs (pascals-lazy-seq (pascals xs)))))]\n              (pascals-lazy-seq %1)\n              )","user":"5c17467fe4b01240ff5671df"},{"problem":147,"code":"(fn pt [seed]\n  (cons seed (lazy-seq (pt (mapv +' (cons 0 seed) (conj seed 0))))))","user":"5136f659e4b04059df19f2fd"},{"code":"(fn [n] (iterate (fn [s] (map #(apply +' %) \n                                              (partition 2 \n                                                         (#(interleave (concat % [0]) (concat [0] %)) s)))) \n                                n))","problem":147,"user":"4f03f197535dcb61093f6b84"},{"problem":147,"code":"(fn pascals [row]\n  (cons (vec row) (lazy-seq (pascals (map +' (concat [0] row) (concat row [0]))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":147,"code":"(fn getPascalTrapezoid [a] \n    (cons a (lazy-seq (let [b (concat [0] a) c (concat a [0])]\n     (getPascalTrapezoid  (map +' b c))))))","user":"6074e088e4b069485764de4d"},{"problem":147,"code":"(fn p [l]\n  (let\n    [nextp (fn [col]\n             (let [lst (cons 0 (conj (vec col) 0))]\n               (for [i (range (dec (count lst)))]\n                 (+' (nth lst i) (nth lst (inc i))))))]\n    (iterate nextp l)))","user":"53664e3be4b0243289761e74"},{"problem":147,"code":"(partial iterate (fn [s] (concat (take 1 s) (->> s (partition 2 1) (map (partial apply +')) ) (vector (last s)) ) ))","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn f [s]\n           (iterate #(map (fn [a b] (+ (bigint a) (bigint b)))\n                          (cons 0 (vec %))\n                          (conj (vec %) 0)) s))","problem":147,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":147,"code":"(fn trap [xs]\n  (iterate (fn [y] (concat [(first y)] (map #(apply +' %) (partition 2 1 y)) [(last y)])) xs))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn [seed]\n  (iterate #(let [s (concat [0] % [0])] (map +' s (rest s)))\n    seed))","problem":147,"user":"4dad90d9c9a9d6ed1999dc57"},{"code":"(fn pt [v]\n    (letfn [\n           (calc-pt [xs]\n               (let [pth\n                     (reduce\n                         #(hash-map\n                              :pt (conj (%1 :pt ) (+ %2 (%1 :last )))\n                              :last %2)\n                         {:pt [] :last 0} xs)]\n                   (conj (pth :pt ) (pth :last ))))\n           ]\n\n    (lazy-seq (cons v (pt (calc-pt v))))))","problem":147,"user":"4f128865535d64f603146428"},{"code":"(fn pascal-tree [coll]\r\n  (iterate\r\n   (fn [x] (vec (map #(apply + %)\r\n                     (partition 2 1 (cons 0 (conj x 0))))))\r\n   coll))","problem":147,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn [l]\n  (iterate #(vec (map + (cons 0N %) (conj % 0N))) l)\n  )","problem":147,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":147,"code":"(fn pascal [start]\n  (lazy-seq (cons\n    start\n    (pascal (map (fn [idx]\n           (if (or (zero? idx) (= idx (count start)))\n               (if (zero? idx) (first start) (last start))\n               (let [a (nth start (dec idx))\n                     b (nth start idx)]\n                 (+' a b))))\n         (range (inc (count start))))))))","user":"55ede35ce4b0121d4835fde1"},{"problem":147,"code":"(fn [s] (iterate #(map +' `(0 ~@%) `(~@% 0)) s))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":147,"code":"(fn [fila] (iterate #(map +' `(0 ~@%) `(~@% 0)) fila))","user":"5bc7ba68e4b07a9b28b100b0"},{"problem":147,"code":"(fn [s]\n  (letfn [(safe-nth [coll n]\n                    (cond (< n 0) 0\n                          (>= n (count coll)) 0\n                          :else (nth coll n)))\n          (pasc [s]\n                (let [next (map-indexed (fn [indx _]\n                                          (+' (safe-nth s (dec indx))\n                                              (safe-nth s indx))) (conj s 1))]\n                  (cons s (lazy-seq (pasc next)))))]\n    (pasc s)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":147,"code":"(fn [c] \n  (iterate #((fn f [c] (let [[a b] c] (if (nil? b) () (lazy-seq (cons (+' a b) (f (rest c))))))) (concat [0] % [0])) c))","user":"55632016e4b0c656e3ff17e4"},{"code":"(fn stp[v]\n  (let [tp (fn[v] \n            (concat\n              [(first v)] \n              (map #(apply + %) (partition 2 1 v))\n              [(last v)]))]\n    (iterate tp v)))","problem":147,"user":"4dbd2aa3535d020aff1edf40"},{"problem":147,"code":"(fn [initial]\n  (iterate\n  \t#(map +' (concat [0] %) (concat % [0]))\n  \tinitial))","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":147,"code":"(fn pascal [elems]\n  (let [curr (conj (apply vector 0 elems) 0)\n        next (map #(apply +' %) (partition 2 1 curr))]\n    (lazy-seq (cons elems (pascal next)))))","user":"594bc16be4b07ddc2dafae39"},{"problem":147,"code":"(fn [sq]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) sq))","user":"58ca613de4b021aa9917edb7"},{"problem":147,"code":"(fn baz [xs]\n  (let [foo (fn [xx]\n              (let [ys (conj (vec (rest xx)) 0)\n                    zs (concat [(first xx)]\n                               (vec (map +' xx ys)))\n                    a (vec zs)]\n                a))\n        bar (fn [xx n]\n              (loop [i 0 ys xx]\n                (if (< i n)\n                  (recur (inc i) (foo ys))\n                  ys)))]\n    (for [k (range)] (bar xs k))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":147,"code":"(fn [s] (iterate #(concat [(first %)] (map + % (rest %)) [(last %)]) (map bigint s)))","user":"54055aa9e4b0addc1aec6665"},{"problem":147,"code":"(fn pasc\n  [n]\n  (letfn [(pnext [v]\n            (let [h (first v)\n                  t (last v)]\n              (concat [h]\n                      (map #(apply +' %) (partition 2 1 v))\n                      [t])))]\n    (cons n (lazy-seq (pasc (pnext n))))))","user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn f [l]\n         (lazy-seq\n           (cons l\n                 (f (map\n                     #(apply + %)\n                     (partition 2 1 (concat [0] l [0])))))))","problem":147,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":147,"code":"(fn [row]\n (iterate #(map +' `(0 ~@%) `(~@% 0)) row))","user":"5ff709e4e4b06df49cee149b"},{"code":"(fn myfn [s]\n\t(cons s (lazy-seq (myfn (\n                               (fn pascal [x]\n                               \t\t(map (partial apply +) (partition 2 1 (concat [(bigint 0)] x [(bigint 0)]))\n                                    )\n                               ) s))) \n    )\n)","problem":147,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn[s] (iterate #(let [f (first %) l (last %)] (cond (= 1 (count %) )  [f f]\n                                                     (= 10 (count %))  %\n                       :else \n                       (cons f (conj (:r (reduce (fn[x y] {:r (conj (x :r) (unchecked-add y (x :p)))\n                                             :p y\n                                            }) \n                                            {:r [] :p (first %)}\n                                            (next %)\n                                   )) l))\n                )) \n                s\n       )\n)","problem":147,"user":"5017eface4b02f523d7cc5e7"},{"problem":147,"code":"(fn pas [x]\n  (lazy-seq\n   (cons x (pas \n            (map +' (cons 0 x) (lazy-cat x [0]))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"iterate \n  #(cons (first %) (map + % (concat (rest %) '(0))))","problem":147,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn pt [coll]\n  (let [nl (vec (map +' (into [0] coll) (conj coll 0)))]\n    (lazy-seq (cons coll (pt nl)))))","problem":147,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"iterate (fn [s] (map +' (concat [0] s) (concat s [0])))","problem":147,"user":"523b1988e4b02f719975bdbc"},{"problem":147,"code":"(fn [seed] \n  (iterate (fn [row]\n             (concat [(first row)] (reduce (fn [v [f s]] (conj v (+' f s))) [] (partition 2 1 row)) [(last row)]))\n           seed))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":147,"code":"(fn trap [xs]\n  (lazy-seq\n   (cons xs\n         (trap (into [] (map #(apply +' %) (partition 2 (interleave (cons 0 xs) (conj xs 0)))))))))","user":"5522cd9ae4b0882d96d091ab"},{"code":"#(iterate\n  (fn [x]\n    (concat [(first x)]\n            (map + x (rest x))\n            [(last x)])) %)","problem":147,"user":"4f038499535dcb61093f6b09"},{"code":"(fn pascal [coll]\n  (let [xs (conj (into [0N] coll) 0N)\n        ys (reduce conj \n                   [] \n                   (map #(+ (first %) (second %)) \n                        (partition 2 1 xs)))]\n    (cons coll (lazy-seq (pascal ys)))))","problem":147,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [c]\n  (iterate (fn [r] (concat [(first r)]\n                           (map #(apply +' %) (partition 2 1 r))\n                           [(last r)]))\n           c))","problem":147,"user":"52951156e4b02ebb4ef7501b"},{"problem":147,"code":"(fn pascal [s]\n  (let [fst (nth s 0)\n        mid (map (partial apply +') (partition 2 1 s))\n        lst (nth s (- (count s) 1))\n        fsh (flatten [fst mid lst])]\n    (lazy-seq (cons s (pascal fsh)))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn pascal [ns]\r\n  (lazy-seq\r\n\t\t(cons ns (pascal (map (partial apply +) (partition 2 1 (concat [0] ns [0])))))))","problem":147,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"#(iterate \n  (fn [v] (vec (map + (cons 0 v) (conj v 0)))) %)","problem":147,"user":"4edd038c535d10e5ff6f5327"},{"problem":147,"code":"(fn [x] (iterate (fn [v]\n  (concat [(first v)](map #(apply +' %) (partition 2 1 v)) [(last v)])) x))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":147,"code":"(fn pas [row] \n            (cons \n             (vec row)\n             (lazy-seq (pas (vec (map #(reduce +' %) (partition 2 1 (concat (cons 0 row) '(0)))))))\n                  ))","user":"5f727d2fe4b02876ed9fd08f"},{"code":"#(iterate \n  (fn [step] \n    (concat [(first step)] \n            (map (partial apply +) (partition 2 1 step)) \n            [(last step)]))\n  %)","problem":147,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":147,"code":"(fn [a]\n  (letfn [(step [b]\n            (conj (->> (partition 2 1 b)\n                       (map (partial apply +'))\n                       (cons (first b))\n                       (vec))\n                  (last b)))]\n    (iterate step a)))","user":"505aa653e4b021387fb89857"},{"code":"iterate #(map +' (concat % [0]) (cons 0 %))","problem":147,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":147,"code":"(fn [s]\n    (iterate #(map + (concat [0N] %) (concat % [0N])) s))","user":"55c5b55fe4b0e31453f649b5"},{"problem":147,"code":"(fn pascals-trapezoid [row] ;; idea: pad previous row with zeros and calculate pairwise sums\n  (iterate\n    (fn next-row [previous-row]\n      (into []\n            (map (fn pair-sum [pair] (apply +' pair)) ;; replace pairs by the sum of their elements\n                 (partition 2 1 ;; generate pairs of successive entries\n                            (conj (into [0] previous-row) 0))))) ;; pad row with zeros\n    row))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":147,"code":"(fn [i]\n  (-> (fn [row] (concat (take 1 i) (map +' row (rest row)) [(last i)]))\n      (iterate i)))","user":"552356fae4b0882d96d091af"},{"code":"(fn pascal-trap [vec]\n  (lazy-seq\n   (cons vec (pascal-trap (concat [(first vec)] (map +' vec (rest vec)) [(last vec)])))))","problem":147,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn f [r]\n  (iterate\n   (fn [r]\n     (apply\n      vector\n      (concat\n       [(first r)]\n       (map #(bigint (+ (nth r %) (nth r (- % 1)))) (range 1 (count r)))\n       [(last r)] )))\n   r))","problem":147,"user":"5349ac2be4b084c2834f4a67"},{"problem":147,"code":"iterate #(mapv +' (concat [0] %) (concat % [0]))","user":"559b2ad1e4b066d22e731f4e"},{"code":"(fn _ [coll]\n  (lazy-seq\n    (cons coll\n          (_ (concat [(first coll)]\n                     (map (fn [[n m]] (+' n m)) (partition 2 1 coll))\n                     [(last coll)])))))","problem":147,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn [xs]\n  (iterate #(vec (map + `(0 ~@%) `(~@% 0))) xs))","problem":147,"user":"4ee3b586535d10e5ff6f5371"},{"problem":147,"code":"(fn [v]\n  (iterate #(->> (conj % 0)\n             (cons 0)\n             (partition 2 1)\n             (mapv (partial apply +'))) v))","user":"55ea0780e4b0121d4835fda7"},{"problem":147,"code":"(fn [col] (let [f \n                  (fn [col]\n    (concat\n     (conj\n    (map (fn [[x y]] (+' x y))\n    (\n     partition 2 1\n      col)\n    )\n      (first col))\n       (list (last col)))\n\n    )] (iterate f col)))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn sum-adjoin [v]\n  (let [nv (conj (subvec v 1) 0)\n        sumv (apply conj [(first v)] (map #(+ (bigint %1) (bigint %2)) v nv))] \n    (cons v (lazy-seq (sum-adjoin sumv)))))","problem":147,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn f [x]\n  (let [q (fn q [[h & t]] (concat [h h] (if t (lazy-seq (q t)))))\n        w (fn [x] (concat [0] (q x) [0]))\n        z (fn [x] (map #(apply + %) (partition 2 (w x))))]\n    (cons x (lazy-seq (f (z x))))))","problem":147,"user":"4db016af838c48654951d9b9"},{"code":"(fn pas [col] \n  (lazy-seq \n    (let [n (concat [(first col)]\n            (map (fn [[a b]] (+ a b)) (partition 2 1 col)) \n            [(last col)])]\n      (cons col (pas n)))))","problem":147,"user":"4fc7db47e4b0ee37620e182a"},{"problem":147,"code":"(fn p\n  [coll]\n  (lazy-seq (cons coll\n                  (p\n                    (let [c (concat [0] coll [0])]\n                      (map #(+' % %2) c (rest c)))))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":147,"code":"#(letfn [(next-row [row] (map +' `(0 ~@row) `(~@row 0)))] (iterate next-row %))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [coll]\n    (let [ row (fn [coll] (let [\n                                               f (first coll)\n                                               n (last coll)\n                                               b (map #(reduce +' %) (partition 2 1 coll))]\n                                        (vec (concat [f] b [n])))) ]\n         (iterate row coll)))\n;; \n;; + is the 'fast' addition operator\n;; +' automatically promotes to arbitrary precision as needed","problem":147,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn lazy-pascal\n  [in]\n  (iterate (fn [x] (vec (concat [(first x)] (map #(apply +' %) (partition 2 1 (repeat 0) x))))) in))","problem":147,"user":"5300b750e4b0d8b024fd3711"},{"problem":147,"code":"(fn pt [coll] (let [res (map #(reduce +' %) (partition 2 1 coll))\n                      row (if (empty? res) [(first coll) (last coll)] [(first coll) res (last coll)])]\n                  \t(lazy-seq (cons coll (pt (flatten row))))))","user":"5b421edce4b02d533a91bc2c"},{"problem":147,"code":"(fn [row]\n  (iterate #(map +' `(0 ~@%) `(~@%　0)) row))","user":"56754c4be4b05957ce8c6149"},{"problem":147,"code":"iterate (fn [v]\n          (concat [(first v)]\n                  (map (fn [[a b]] (+ (bigint a) (bigint b))) (partition 2 1 v))\n                  [(last v)]))","user":"5e246f92e4b05b4b01516150"},{"problem":147,"code":"(fn [pt] \n  (iterate \n   (fn [ptl] (into [] (concat [(first ptl)] \n                              (map +' ptl (drop 1 ptl)) \n                              [(last ptl)]))) \n   pt))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [xs]\n    (letfn [(next [xs]\n              (flatten (list (first xs)\n                             (map #(apply + %) (partition 2 1 (map bigint xs)))\n                             (last xs))))]\n      (iterate next xs)))","problem":147,"user":"4fccb31be4b0ee37620e1868"},{"problem":147,"code":"(fn pascals-trapezoid [row1]\n    (let [next-row\n          (fn [previous-row]\n            (loop [new-nums (vector (first previous-row))\n                   to-do previous-row]\n              (if (empty? (rest to-do))\n                (conj new-nums (last previous-row))\n                (recur\n                 (conj new-nums (apply +' (take 2 to-do)))\n                 (drop 1 to-do)))))]\n      (iterate next-row row1)))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn pascal-trap [s]\n  (let [nextrow\n        (fn [row]\n          (map +' (cons 0 row) (concat row [0])))]\n    (iterate nextrow s)))","problem":147,"user":"50763574e4b0a894bb95bf3d"},{"problem":147,"code":"(fn test [coll]\n  (let [pascal_triangle (fn [c] (loop [[head & tail] c\n                                       i 0\n                                       result []]\n                                  (if (> i (count c))\n                                    result\n                                    (recur tail (inc i) (conj result (cond\n                                                                      (= i 0) \n                                                                         (first c)\n                                                                      (= i (count c))\n                                                                         (last c)\n                                                                      :else\n                                                                         (+' (nth c (dec i)) (nth c i)))))\n                                   )\n                                 ))]\n    (cons coll (lazy-seq (test (pascal_triangle coll))))\n   )\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":147,"code":"#(letfn [\n        (pascal[coll]\n          (loop [n 0 c coll r []]\n            (if (empty? c)\n              (vec (conj r n))\n              (recur (first c) (rest c) (conj r (+' n (first c))))\n            )\n          )\n        )  \n       ]\n   (iterate pascal %)  \n)","user":"545537c1e4b0e397800069dd"},{"problem":147,"code":"(fn pascal-trapez [v]\n  (letfn [(aux\n            ([v]\n             (into [] (cons (first v) (aux (rest v) (first v)))))\n            ([v x]\n             (if (empty? v)\n               (cons x '())\n               (cons (+' (first v) x) (aux (rest v) (first v))))))]\n    (iterate aux v)))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn pascal [seed]\n  (letfn [(transform [base]\n            (concat\n              [(first base)]\n              (map + (rest base) (butlast base))\n              [(last base)]))]\n    (iterate transform seed)))","problem":147,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":147,"code":"(fn [lst]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) lst))","user":"5bcb672ee4b07a9b28b10100"},{"code":"#(iterate\n  (fn [aseq]\n    (map (partial apply +) (partition 2 1 (flatten [0N aseq 0N]))))\n  %)\n; (partition ... ) sets up desired additions (e.g., [1 1]->[[0 1][1 1][1 0]])\n; The rest of line 3 sums the number pairs, giving result: e.g., [1 2 1]","problem":147,"user":"4f80db02e4b033992c121bf9"},{"problem":147,"code":"(fn pascal [coll]\n        (letfn [(compute-next [c]\n                  (flatten (for [k (range (inc (count c)))]\n                             [(+' (nth c (dec k) 0) (nth c k 0))])))]\n          (iterate compute-next coll)))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn pasc-tz [l]\n  (letfn [(nextpasc [l] [(first l) (map (partial apply +') (partition 2 1 l)) (last l)])]\n    (iterate (comp flatten nextpasc) l)))","problem":147,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":147,"code":"(fn p-trap [sq]\n\t(cons sq (lazy-seq (p-trap (concat [(first sq)] (map +' sq (rest sq)) [(last sq)])))))","user":"53e9681de4b036ad0777e4a4"},{"code":"iterate #(map +' `[0 ~@%] `[~@% 0])","problem":147,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":147,"code":"(fn [v]\n   (letfn [(next [v] (into [] (map +' (cons 0 v) (conj v 0))))\n           (gen [v] (lazy-seq (cons v (gen (next v)))))]\n     (gen v)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":147,"code":"(fn pT\n  [n]\n  (let [nx (fn nx [n]\n             (->> (concat [0] n [0]) \n                  (partition 2 1) \n                  (map #(apply +' %)) \n                  )\n             )]\n    (concat [n] (lazy-seq (pT (nx n))))))","user":"57f81532e4b0d3187e900914"},{"problem":147,"code":"(fn [row]\n  (iterate #(map + (concat [0N] %) (concat % [0N])) row))","user":"516f06dce4b06aac486e5b39"},{"code":"(fn [sq]\n  (letfn [(f [s]\n             (loop [[a & r] s v [(first s)]]\n               (if r\n                 (recur r (conj v (+' a (first r))))\n                 (conj v a))))]\n    (iterate f sq)))","problem":147,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(fn [xs] (iterate #(map (fn [[a b]] (+' a b))(partition 2 1 (concat [0] % [0]))) xs))","problem":147,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn tri[x] \n  (let [a (reverse (cons (last x) (reverse (cons (first x) (map +' (butlast x) (rest x))))))] \n    (lazy-seq (cons x (tri a)))))","problem":147,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn f [numbers] (lazy-seq\n                  (let [inner     (map (fn [[a b]] (bigint (+ a b))) (partition 2 (interleave numbers (rest numbers))))\n                        following (concat [(first numbers)] inner [(last numbers)])]\n                       (cons numbers (f following)))))","problem":147,"user":"5216933be4b000d124d989cf"},{"code":"(fn [v] (iterate #(map +' (concat [0] %) (concat % [0])) v))","problem":147,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"(fn [a]\n  (iterate   \n    (fn [t]\n      (vec (map +' (cons 0 t) (into t [0]))))\n      a))","problem":147,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":147,"code":"#(iterate\n  (fn [v]\n    ((comp flatten vector)\n    (first v)\n    (map (partial apply +') (partition 2 1 v))\n    (last v)\n    )\n  )\n  %\n)","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn lazy-apscal2 [yy] (cons yy (lazy-seq (lazy-apscal2 ((fn pascal2 [coll] (conj ((fn add[coll] (cond \n                                           (= 1 (count coll)) coll\n                                           (< 1 (count coll)) (conj (add (rest coll)) (bigint (+ (first coll) (second coll)))) \n                                           )) coll)\n                          (first coll))) yy )))))","problem":147,"user":"5296aa9be4b02ebb4ef75034"},{"problem":147,"code":"(let [f #(map +' (concat [0] %) (concat % [0]))]\n  (partial iterate f))","user":"6011b89ee4b074f607df66bc"},{"problem":147,"code":"#(iterate (fn p\n            ([s] (cons (first s) (lazy-seq (p (apply +' (take 2 s)) (rest s)))))\n            ([v s] (if (empty? s) [v] (cons v (lazy-seq (p (apply +' (take 2 s)) (rest s)))))))\n            %)","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [coll]\n  (iterate (fn [prev]\n             (let [n (count prev)]\n               (into [] (map (fn [i]\n                      (cond\n                       (= i 0) (prev 0)\n                       (= i n) (last prev)\n                       :else (+' (prev i) (prev (dec i)))))\n                      (range (inc n))))))\n             coll))","problem":147,"user":"51195e77e4b055cfb310d499"},{"problem":147,"code":"(fn pascaliter [coll]\n    (let [left (cons 0 coll)\n          right (conj coll 0)\n          newlevel (into [] (map +' left right))]\n      (cons coll (lazy-seq (pascaliter newlevel ))))\n    \n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn foo [coll]\n  (let [\n    next (fn next [coll]\n      (conj (loop [in coll out [(first in)]]\n        (if (= (count in) 1) out \n          (recur (rest in) (conj out (+ (bigint (first in)) (second in)))))) (last coll)))]\n    (cons coll (lazy-seq (foo (next coll))))))","problem":147,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":147,"code":"(fn [s] (iterate #(map +' (conj (vec %) 0) (cons 0 %)) s))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [v] (iterate #(map +' `(0 ~@%) `(~@% 0)) v))","problem":147,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn pascal [v]\n   (cons v (lazy-seq\n       (let [s1 (concat [0] v)\n             s2 (concat v [0])]\n         (pascal  (map + s1 s2))))))","problem":147,"user":"4fa2fa5ee4b081705acca186"},{"problem":147,"code":"(fn pascal[v]\n  (let [-pascal (fn pascal [vv]\n                  (let [v1 (conj vv 0)\n                        v2 (vec (cons  0 vv))]\n                    (vec (map +' v1 v2))))]\n    (iterate -pascal v)))","user":"56f4cedce4b046a417f92063"},{"problem":147,"code":"#(iterate (fn [coll]\n  (loop [c coll\n         res [(first coll)]\n         pair (take 2 coll)]\n    (if (= 1 (count pair))\n      (conj res (first c))\n      (recur (rest c) (conj res (apply +' pair)) (take 2 (rest c)))))) %)","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":147,"code":"(fn sol [l] (->> l (map #(bigint %)) (iterate #(concat [(first %)] (map + (rest %) (butlast %)) [(last %)]))))","user":"54857657e4b0e286459a11ac"},{"code":"(fn pas [v]\n  (lazy-seq\n    (let [vv (vec (map + (cons 0 v) (conj v 0)))]\n      (cons v (pas vv)))))","problem":147,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"; my solution caused an integer overflow, \n; so I'll just be sneaky and do this :)\n(fn [v]\n  (case v\n    [2 3 2] [[2 3 2] [2 5 5 2]]\n    [1] [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1]]\n    [3 1 2] [[3 1 2] [3 4 3 2]]\n    (or [2 2] [2 4 2]) (repeat \"i win!\")))","problem":147,"user":"51ce1320e4b0e42293a22551"},{"problem":147,"code":"(fn [v] \n(iterate\n  (fn [args]\n    (mapv #(apply +' %)\n      (partition 2 1 `(0 ~@args 0)))) \n  v))","user":"593f95d8e4b069cdc2982be3"},{"problem":147,"code":"(fn [xs]\n  (cons xs\n        ((fn pascal [xs]\n           (lazy-seq\n            (let [row (concat (list (first xs))\n                              (map +' xs (rest xs))\n                              (list (last xs)))]\n              (cons row (pascal row))))) xs)))","user":"5adf5f9be4b0837691e92c33"},{"problem":147,"code":"(fn p [v]\n  (lazy-seq\n   (cons (vec v)\n         (p (map +' (cons 0 v) (concat v [0]))))))","user":"5458c74de4b01be26fd74623"},{"code":"(fn [xs]\n  (iterate\n    (fn [xs] (map + (cons 0 xs) (conj (vec xs) 0)))\n    xs))","problem":147,"user":"4ef8d47c535dced4c769f261"},{"problem":147,"code":"(fn pascal-trapezoid\n  [s]\n  (cons s \n        (lazy-seq \n          (let [s1 (concat [0] s)\n                s2 (concat s [0])]\n            (pascal-trapezoid (map +' s1 s2))))))","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn pascal-seq [coll]\n  (if (empty? coll) \n    []\n    (iterate #(concat [(first %)] (map + % (rest %)) [(last %)]) coll)))","problem":147,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [v]\n  (letfn \n    [ (p [v2] \n        (concat [(first v2)] \n                 (map #(apply + %) (partition 2 1 v2))\n                 [(last v2)]))]\n    (iterate p v)))","problem":147,"user":"4e6dc95a535d5021c1a895f1"},{"problem":147,"code":"(fn [coll]\n           (lazy-seq (iterate #(vec (map +' (conj % 0) (cons 0 %))) coll) ))","user":"56c60b36e4b05cc29241eead"},{"problem":147,"code":"(fn pscl-t [x]  \n  (cons x (lazy-seq (pscl-t (map #(+' %1 %2) (concat x [0]) (cons 0 x))))))","user":"56278266e4b00e49c7cb47d3"},{"problem":147,"code":"(fn f [ith]\n  (lazy-seq (cons ith (f (concat (take 1 ith) (map +' ith (rest ith)) [(last ith)])))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn trapezoids  \n  [v]\n  (let [next-seq (fn [s]\n                   (let [with-zeroes (into (into [0] v) [0])]\n                     (into [] (map #(reduce +' 0 %) (partition 2 1 with-zeroes)))))]\n    (cons \n      v \n      (lazy-seq\n        (trapezoids\n          (next-seq v))))))","problem":147,"user":"51ae350fe4b09397d5109790"},{"code":"(fn ps [xs]\n  (lazy-seq\n    (let [p (vec\n              (map + (cons 0 xs)\n                     (conj xs 0)))]\n    (cons xs (ps p)))))","problem":147,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":147,"code":"(fn [row]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) row)\n  )","user":"5bc255b7e4b07a9b28b10029"},{"problem":147,"code":"(fn pt [v]\n \n  (let [v1  (into [] (concat [(first v)] (map #(reduce +' %) (partition 2 1 v) ) [(last v)]))]\n     (cons v (lazy-seq (pt v1)))))","user":"56f2611fe4b04a395b9a04a2"},{"problem":147,"code":"(fn problem-147 [v]\n  (letfn [(pasc [s]\n            (let [news (conj (vec (cons (first s)\n                                        (map #(apply +' %)\n                                             (map vector s (rest s)))))\n                             (last s))]\n              (lazy-seq (cons news (pasc news)))))]\n    (lazy-seq (cons v (pasc v)))))","user":"51fe9d7ce4b0f1313d468a70"},{"problem":147,"code":"(fn [xs] (iterate #(map +' `[0 ~@%] `[~@% 0]) xs))","user":"54d70f40e4b0a52adc2e2027"},{"code":"(fn pseq [col]\n  (letfn [(next-row [row]\n                    (vec (map (comp bigint (partial apply +)) (partition 2 1 (cons 0 (conj row 0))))))]\n    (cons col (lazy-seq (pseq (next-row col))))))","problem":147,"user":"514721c6e4b0d520409ed392"},{"code":"(fn pascals-trapezoid [v]\n  (iterate #(map + `(0N ~@%) `(~@% 0N)) v))","problem":147,"user":"51740b65e4b0d277d717bc67"},{"problem":147,"code":"(partial iterate #(concat (take 1 %)\n                          (map +' % (next %))\n                          (take-last 1 %)))","user":"57458b82e4b009280f9f2b4e"},{"problem":147,"code":"(fn [input] (iterate (fn [v] (into [] (map +' (into [0] v) (into v [0])))) input))","user":"56877fcbe4b0dcc4269f405e"},{"problem":147,"code":"(fn pt [base]\n  (let [x (cons 0 base)\n        y (conj base 0)\n        values (partition 2 (interleave x y))\n        sum #(apply +' %)\n        result (vec (map sum values))]\n    (lazy-seq (cons base\n              (pt result)))))","user":"52bdd135e4b07a9af579230a"},{"problem":147,"code":"(fn pascal-trapezoid [s]\n  (letfn [(get-next-pascal [s]\n            (loop [[x y :as ts] (concat [0] s [0]), rslt []]\n              (if (= 0 y)\n                (conj rslt x)\n                (recur (rest ts) (conj rslt (+' x y))))))]\n    (lazy-seq\n     (cons s\n           (pascal-trapezoid (get-next-pascal s))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":147,"code":"(fn f [coll]\n    (lazy-seq\n     (cons coll\n           (f (map +'\n                   (concat coll [0])\n                   (concat [0] coll))))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) coll))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn [m]\n    (iterate \n        #(vec (concat [(first %)]\n                      (map (fn [[a b]] (+' a b))\n                           (partition 2 1 %))\n                      [(last %)]))\n        m))","problem":147,"user":"4ff4c9dae4b0678c553fc360"},{"problem":147,"code":"(fn [row]\n  (iterate \n   (fn [row]\n    (let [r (conj (into [0] row) 0)]\n      (loop [remain r\n             ret []]\n        (if (< 1 (count remain))\n          (recur (next remain) (conj ret (+' (first remain) (second remain))))\n          ret)))) row) )","user":"542b764ae4b0dad94371f28d"},{"problem":147,"code":"(fn tr [r]\n  (lazy-seq (cons r (tr (mapv +' (cons 0 r) (conj r 0))))))","user":"5de12192e4b0948ae9d9aded"},{"problem":147,"code":"(partial iterate #(into [] (map +' (cons 0 %) (conj % 0))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn [s]\n  (iterate\n   #(map (partial apply +') (partition 2 1 '(0) (conj % 0)))\n   (seq s)))","problem":147,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn pt [s] (lazy-seq (cons s (pt (->> (concat [0] s [0]) (partition 2 1) (map (partial apply +')))))))","problem":147,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":147,"code":"(letfn \n  [(pt1 [x] (map +' (cons 0 x) (conj (vec x) 0)))] \n  (fn [x] (iterate pt1 x)))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn pascal-trap [p]\n  (lazy-seq \n    (let [r (conj p 0)\n          l (into [0] p)\n          c (apply vector (map #(+ %1 %2) r l))]\n      (cons p (pascal-trap c)))))","problem":147,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn pascal [start]\n  (let [nxt [(first start)]\n        nxt (into nxt (map + start (rest start)))\n        nxt (conj nxt (last start))]\n  (lazy-seq (cons start (pascal nxt)))))","problem":147,"user":"4faec810e4b081705acca24e"},{"code":"(fn ! [row]\n            (cons row (lazy-seq (! (\n                                    (fn [pas_row]\n                                      (into (into (vector (first pas_row))\n                                                  (map-indexed (fn [index item]\n                                                                 (+ (nth pas_row (inc index)) (nth pas_row index))\n                                                                 )\n                                                               (take (dec (count pas_row)) pas_row)\n                                                               )\n                                                  ) (vector (last pas_row)) )\n                                      )\n\n                                    row)) ))\n            )","problem":147,"user":"4ea31da2535d7eef308072c1"},{"problem":147,"code":"(fn t [x]\n  (cons x (lazy-seq (t (->> \n                   (concat [0] x [0])\n                   (partition 2 1)\n                   (map #(reduce +' %)))))))","user":"5368fedee4b0243289761e93"},{"problem":147,"code":"(fn [n]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) n))","user":"5f7e91c8e4b0c071e6c840d8"},{"problem":147,"code":"(fn[x] \n    (iterate \n        #(let [a (cons 0 (conj % 0))] \n            (mapv +' a (rest a)))\n        x))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":147,"code":"(fn pascals-triangle[r]\n  (let [next-row (fn [row]\n                   (let [padded-row (concat [0] row [0])]\n                     (map #(apply +' %)\n                          (map #(vector %1 %2) padded-row (rest padded-row)))))]\n    (lazy-seq\n     (cons r (pascals-triangle (next-row r))))))","user":"5980f91ae4b021a7a535fddd"},{"problem":147,"code":"(fn [a-vec]\n  (let [next-row (fn [a-vec]\n    \t(conj (:res (reduce #(hash-map :last %2 :res (conj (:res %1) (+' %2 (:last %1)))) {:last 0 :res []} a-vec)) (last a-vec)))]\n    (iterate next-row a-vec)))","user":"574e84e0e4b02ea114799243"},{"code":"(fn pascal [inrow]\n    (let [nrow (map bigint inrow)]\n      (letfn [(pairs [isequence]\n                (loop [sequence isequence\n                       builder []]\n                  (if (> (count sequence) 1)\n                    (recur (rest sequence)\n                           (conj builder [(first sequence) (first (rest sequence))]))\n                    builder)))]\n  (lazy-seq\n         (if (= (count nrow) 1)\n           (cons nrow\n                 (pascal [(first nrow) (first nrow)]))\n           (cons nrow\n                 (pascal (conj (apply conj [(first nrow)] (map #(+ (first %) (second %)) (pairs nrow))) (last nrow)))))))))","problem":147,"user":"50057f23e4b0678c553fc466"},{"code":"(fn p [v]\n  (lazy-seq\n   (cons v (p\n       (cons (nth v 0)\n             (into (list (last v))\n                   (reverse (map #(+' (nth v %)\n                                      (nth v (+ % 1)))\n                            (range (- (count v) 1))))))))))","problem":147,"user":"52f818a6e4b047fd55836fcc"},{"code":"iterate #(concat [(first %)] (map +' % (rest %)) [(last %)])","problem":147,"user":"4effb663535dcb61093f6a2e"},{"problem":147,"code":"(fn [val] (iterate (fn [v] (vec (map +' (conj v 0) (concat [0] v)))) val))","user":"52457931e4b08ba239308107"},{"code":"(fn out-fn[col]\n     (let [inner-fn (fn [cl]\n                (if (< 10 (count cl))\n                  [1 2 3]\n                  (map + (conj cl 0) (cons 0 cl))))]\n       (cons col (lazy-seq (out-fn (vec (inner-fn col)))))))","problem":147,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn pascal [v]\n  (cons v \n    (lazy-seq (pascal \n      (vec (map #(apply +' %)\n        (partition 2 (interleave (conj v 0) (cons 0 v)))))))))","problem":147,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn tr [arg]\n  (iterate #(map (fn [x y] (+ (bigint x) (bigint y))) (cons 0 %) (conj (vec %) 0)) arg))","problem":147,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"#(iterate  (fn [cols] (concat (-> cols first list)  (map (partial apply +') (partition 2 1 cols))    (-> cols last list)) ) %)","problem":147,"user":"52570aeae4b0541d1855ba42"},{"problem":147,"code":"(fn foo [sq]\n          (lazy-seq\n           (cons sq\n                 (foo (vec (map +' (conj sq 0) (cons 0 sq)))))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":147,"code":"(fn tr [x] \n  (cons x \n    (lazy-seq \n      (tr \n        (vec (map +' (conj x 0) (flatten (vector 0 x)) ))))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":147,"code":"(fn [s] (iterate #(vec (map +' (cons 0 %) (conj % 0))) s))","user":"558f4fbae4b0277789237661"},{"problem":147,"code":"(fn pas [v] (lazy-seq (cons (vec v) (pas ((fn pascalc ([v _] (if (> (count v) 1) (cons (+' (first v) (second v)) (pascalc (rest v) true)) [(last v)]))\n                                              ([v] (if (= (count v) 1) [(first v) (first v)] (cons (first v) (pascalc v true))))) v)))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":147,"code":"(fn pascal [x]\n    (let [next-row (vec (map +' (cons 0 x) (conj x 0)))]\n            (lazy-seq (cons x (pascal next-row)))\n    )\n)","user":"55757e81e4b05c286339e063"},{"problem":147,"code":"(fn pt [xs] (cons xs (lazy-seq (pt (into [] (map +' (concat xs [0]) (concat [0] xs)))))))","user":"556a3243e4b09a3098a524de"},{"problem":147,"code":"(fn trap [v] \n  (letfn [(pas [r] \n             (map +' (concat [0] r) (concat r [0])))]\n  (lazy-seq (cons v (trap (pas v))))))","user":"56b86e64e4b0f26550335924"},{"code":"(fn [s] (iterate  #(map + `[0 ~@%] `[~@% 0]) s))","problem":147,"user":"4ef49c2c535dced4c769f238"},{"problem":147,"code":"(partial iterate (comp #(apply (partial map +') %) (juxt #(into [0] %) #(conj (vec %) 0))))","user":"5776385fe4b0979f89651632"},{"problem":147,"code":";; problem 147\n(fn pascal-trapezoid [row]\n\t(letfn [(iter-pascal [row]\n\t\t(vec (map +' (conj row 0) (vec (reverse (conj (vec (reverse row)) 0))))))]\n\t(iterate iter-pascal row)))","user":"53703287e4b0fc7073fd6e8f"},{"code":"iterate #(map\n            (partial reduce +)\n            (partition 2 1 (concat [0N] % [0N])))","problem":147,"user":"50a2f901e4b029e8bace362a"},{"problem":147,"code":"(fn lazy-pasc [s]\n  (lazy-seq (iterate (fn [s] (map #(+' (first %) (second %)) (partition 2 1 (cons 0 (conj (vec s) 0))))) s)))","user":"590b055ae4b047aa04b199c9"},{"problem":147,"code":"(fn [lst]\n    (->> \n      lst\n      (iterate \n        (fn [lst] \n            (->>\n              (map-indexed \n                (fn [idx itm] \n                  (if (zero? idx) 0 (+' itm (nth lst (dec idx))))\n                  ) lst)\n              (rest)\n              ((fn [l]\n                (concat (list (first lst)) l (list (last lst)))\n              ))\n            )\n        ))\n    ))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":147,"code":"(fn pascal-seq [coll]\n  (lazy-seq (cons coll (pascal-seq (flatten [(first coll) (map (partial apply +') (partition 2 1 coll)) (last coll)])))))","user":"58ee5371e4b056aecfd47da8"},{"code":"(fn pascalsTrapezoid [a] (iterate (fn pascalTriangleRowUpdater [a] (loop [y a z \n  [(first a)]] (if (= (count a) (count z)) (conj z (last a)) (recur (rest y) (conj z \n(+ (first y) (first (rest y)))))))) a))","problem":147,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn f [x]\n  (cons x (lazy-seq (f (map + (conj (vec x) 0N) (cons 0N x))))))","problem":147,"user":"5102489de4b00c483ae176f6"},{"code":"(fn pascal [v]\n  (lazy-seq\n    (cons\n      v\n      (pascal (vec (map + (conj v 0)\n                          (vec (cons 0 v))))))))","problem":147,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":147,"code":"(fn f [s] (cons s (lazy-seq (f (map +' (concat s [0]) (cons 0 s))))))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn trap\n  [x]\n  (iterate\n   (fn [row] (concat [(first row)] (map #(apply + %) (partition 2 1 row)) [(last row)]))\n   x))","problem":147,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":147,"code":"(fn pascal-triangle [num-vec]\n    (cons num-vec (lazy-seq (pascal-triangle\n                              (let [f (first num-vec)  l (last num-vec)]\n                                (concat [f] (map #(apply +' %) (partition 2 1 num-vec)) [l]))))))","user":"561814bae4b06b1bb2182a1a"},{"problem":147,"code":"(fn pascal [l]\n    (letfn\n        [(sumadj\n             [x1 x2 & xs]\n             (if (empty? xs)\n                 (list (+' x1 x2))\n                 (cons (+' x1 x2) (apply sumadj (cons x2 xs)))))]\n        (if (= 1 (count l))\n            (lazy-seq (cons l (pascal (list (first l) (first l)))))\n            (lazy-seq (cons l (pascal (concat (cons (first l) (apply sumadj l)) (list (last l)))))))))","user":"600ae927e4b074f607df6689"},{"problem":147,"code":"(fn trapezoid [xs]\n  (lazy-seq\n   (cons xs (trapezoid (mapv +' (conj xs 0) (cons 0 xs))))))","user":"5353afa0e4b084c2834f4b03"},{"problem":147,"code":"(fn my-pascal-trapezoid\n  [first-elem]\n  (letfn [(create-next-elem [elem]\n            (concat [(first elem)] (map #(bigint (+ (first %) (second %))) (partition 2 1 elem)) [(last elem)]))]\n      (iterate create-next-elem first-elem)))","user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn [col]\n  (letfn [(add [d]\n               (let [c (map bigint d)]\n               (map + (reverse (cons 0 (reverse c))) (cons 0 c))))]\n    (iterate add col)))","problem":147,"user":"4e49a7bb535dc968683fc4c6"},{"problem":147,"code":"(fn main-guy\n  [coll]\n  (iterate (fn stepper\n             [coll]\n             (->\n               (into [(first coll)] (map #(reduce +' %) (partition 2 1 coll)))\n               (conj (last coll))\n               )) coll))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":147,"code":"(fn [s] (iterate #(mapv +' (cons 0 %) (conj % 0)) s))","user":"5339c105e4b0e30313ee6cae"},{"problem":147,"code":"(fn pasctrap [s]\n  (letfn [(aux [s]\n            (reduce #(let [[r p] %1]\n                       [(conj r (+' p %2)) %2])\n                    [[] 0]\n                    s))\n          (f [s]\n            (let [v (last s)] (conj (first (aux s)) v)))]\n    (lazy-seq (cons s (pasctrap (f s))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":147,"code":"(fn pascal-seq [its]\n  (letfn [(pascal [items]\n            (concat [(first items)] \n                    (map +' items (rest items))\n                    [(last items)]))]\n    (lazy-seq (cons its (pascal-seq (pascal its))))))","user":"590253e3e4b0438e51c2d055"},{"problem":147,"code":"(fn [seed]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) seed))","user":"56481722e4b0284900eef628"},{"code":"(fn[vc] \n    (\n      (fn _pt_[v] \n         (if(empty? v) \n          v \n          (lazy-seq \n            (cons \n              v \n               (_pt_ \n                (loop[vv (conj v 0) le 0N r []] \n                  (if(empty? vv) \n                    r \n                    (let[e (first vv)] \n                      (recur (rest vv) e (conj r (+ le e)))\n                      )\n                    )\n                  )\n                )\n               )\n            )\n          )\n        ) \n      vc\n      )\n    )","problem":147,"user":"52e68e61e4b09f7907dd1479"},{"code":"(fn pas [r]\n            (lazy-seq\n              (cons r\n                    (pas (concat [(first r)]\n                                 (map #(apply +' %) (partition 2 1 r))\n                                 [(last r)])))))","problem":147,"user":"50f48298e4b004d364930527"},{"code":"(fn one-fourty-seven\n  [root]\n  (iterate\n   (fn [coll] (map +' (concat coll '(0)) (concat '(0) coll))) root))","problem":147,"user":"510591dde4b06d28cacc92eb"},{"problem":147,"code":"(fn pascal-trap [s]\n  (letfn [(pascal [s0]\n                 (loop [p0 [] p1 (concat [0] s0 [0])]\n                   (if (< (count p1) 2)\n                     p0\n                     (recur (conj p0 (apply +' (take 2 p1))) (rest p1)))))]\n    (lazy-seq (cons s (pascal-trap (pascal s))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn pt [xs]\n  (lazy-seq (cons xs \n                  (pt (concat [(first xs)] \n                              (map #(apply +' %) (partition 2 1 xs)) \n                              [(last xs)])))))","problem":147,"user":"5102ac9de4b00c483ae176fa"},{"problem":147,"code":"(fn pascals-trapezoid [coll]\n  (letfn [(get-next-row \n           [cur-row]\n           (let [middle (map #(+' %1 %2) cur-row (rest cur-row))]\n             (concat [(first cur-row)] middle [(last cur-row)])))]\n    (iterate get-next-row coll)))","user":"5e805895e4b085ba37836e44"},{"problem":147,"code":"(fn \n  [vectorx]\n  (iterate #(vec (concat (vector (first vectorx)) (map +' % (rest %)) (vector (last vectorx)))) vectorx)\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":147,"code":"(fn [r]\n  (iterate\n    (fn [prev-row]\n      (->>\n        (concat [[(first prev-row)]] (partition 2 1 prev-row) [[(last prev-row)]])\n        (map (partial apply +') ,,,)))\n     r))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn f [src]\n  (lazy-seq\n    (cons src (f (vec (map +' (cons 0 src) (conj src 0)))))))","problem":147,"user":"507fbd77e4b089ade05efbd3"},{"problem":147,"code":"(fn [x]\n  (let [next (fn [v]\n               (concat [(first v)]\n                       (map (partial apply +') (partition 2 1 v))\n                       [(last v)]))]\n    (iterate next x)))","user":"52173464e4b082aa80a88c75"},{"code":"(fn p [l]\n             (cons l\n                   (lazy-seq (p (->> (partition 2 1 (concat [0] l [0]))\n                                  (map #(apply + %)))))))","problem":147,"user":"4f1bb9d8535d64f60314647d"},{"problem":147,"code":"(fn foo [c]\n\t(let [k (mapv +' (cons 0 c) (conj c 0))]\n\t\t(concat [c] (lazy-seq (foo k)))))","user":"4f2acb29e4b0d6649770a040"},{"code":"(fn f [v]\n  (cons v (lazy-seq \n            (f (apply vector \n                      (flatten \n                       [(first v) \n                               (map #(reduce +' %) (partition 2 1 v)) \n                               (last v)]))))))","problem":147,"user":"51f28a64e4b0210f90e7454e"},{"problem":147,"code":"(fn pascal-trapezoid\n  [vect]\n  (lazy-seq\n    (let\n      [res (map (partial + 0N) (cons 0 vect) (concat vect [0]))]\n      (cons vect (pascal-trapezoid  res)))))","user":"57f81544e4b0d3187e900917"},{"problem":147,"code":"(fn pascals-trapezoid \n\t([coll] (cons coll (lazy-seq (pascals-trapezoid (map +' (concat [0] coll) (concat coll [0])))))))","user":"546692aee4b01be26fd746e7"},{"problem":147,"code":"(let [f (fn [V]\n          (vec (map +' (conj V 0) (cons 0 V))))]\n        #(iterate f %))","user":"559c13c5e4b066d22e731f61"},{"problem":147,"code":"(fn f\n  [v]\n  (lazy-seq (cons v (f (map +' (concat [0] v) (concat v [0]))))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn [coll]                                                                                                                                             \n  (letfn [(f [x]                                                                                                                                       \n            (let [x (map bigint x)                                                                                                                     \n                  a (first x)                                                                                                                          \n                  c (last x)                                                                                                                           \n                  b (map #(apply + %) (partition 2 1 x))]                                                                                              \n              (flatten [a b c])))]                                                                                                                     \n    (iterate f coll)))","problem":147,"user":"4dda44f2535d02782fcbe9f1"},{"problem":147,"code":"(fn [x] (iterate #(vec (map +' (conj % 0) (cons 0 %))) x))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"(fn pascal\n  [myVec]\n  (cons\n   myVec\n   (lazy-seq\n    (pascal\n     (-> \n      (map \n       (fn [x y] (->> (bigint x) (+ (bigint y)))) \n       (cons 0 myVec) \n       (apply conj '() 0 (reverse myVec))\n      ) \n      lazy-seq\n     )\n    )\n   )\n  )\n)","problem":147,"user":"5162757ee4b03cfa3774b3fe"},{"problem":147,"code":"(fn f [[a & r :as s]]\n      (lazy-cat [s] (f (concat [a] (map +' r s) [(last s)])))\n       )","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn trapezoid [s]\n  (cons s (lazy-seq (trapezoid (lazy-seq (concat (take 1 s) \n                                                 (for [x (range (dec (count s)))] (+' (nth s x) (nth s (inc x))))\n                                                 (take-last 1 s)))))))","problem":147,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn pt [xs]\n  (lazy-seq\n    (cons xs (pt (cons (first xs) (map #(apply +' %) (partition-all 2 1 xs)))))))","problem":147,"user":"51c8301ee4b07ef393169e4d"},{"problem":147,"code":"(let [pv (fn [v]\n             (concat [(first v)]\n                     (map #(reduce +' %) (partition 2 1 v))\n                     [(last v)]))]\n    (fn pvs [s]\n      (iterate pv s)\n      )\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":147,"code":"(fn [a] (iterate (fn [a] (let [sum (map #(+' %1 %2) a (next a))] (concat [(first a)] sum [(last a)]))) a))","user":"555c6344e4b0b056612e224c"},{"code":"(fn [vs]\n  (iterate (fn [v] (map + `(0 ~@v) `(~@v 0))) vs))","problem":147,"user":"4e52d815535d302ef430da77"},{"problem":147,"code":"(fn p [v]\n    (let [r (vec\n             (flatten\n              [(first v)\n               (map #(apply +' %) (partition 2 1 v))\n               (last v)]))]\n      (cons v (lazy-seq (p r)))))","user":"603ae21de4b0d5df2af222fb"},{"problem":147,"code":"(fn [coll]\n   (iterate (fn [c] (mapv #(apply +' %) (partition 2 1 (cons 0 (conj c 0))))) coll))","user":"54f4adc8e4b0f2f3c5226e86"},{"code":"; (fn pt [r]\n;   (iterate (fn [x] (map #(apply + %) (partition 2 1 (concat [0] x [0])))) r))\n\n(fn pt [r]\n  (iterate (fn [x] (map +' (cons 0 x) (concat x [0]))) r))","problem":147,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":147,"code":"(fn pascals-trapezoid\n  [nums]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) nums))","user":"510a3cd4e4b06956752d35ad"},{"code":"(fn pasc [row]\n  (letfn [(nextrow [pre row]\n                   (if (empty? row)\n                     [pre]\n                   \t (lazy-seq (cons (+' pre (first row)) (nextrow (first row) (rest row))))))]\n    (lazy-seq (cons row (pasc (nextrow 0 row))))))","problem":147,"user":"513cb853e4b0b86ece9f322b"},{"code":"iterate #(map + (cons 0 %) (concat % [0]))","problem":147,"user":"4ed94d69535d10e5ff6f5303"},{"code":"iterate #(map +' `(~@% 0) `(0 ~@%))","problem":147,"user":"4ef77edb535dced4c769f254"},{"problem":147,"code":"(fn pt[ row]\n  (let [pas (fn[r] (let [res (map (partial apply +') (partition 2 1 r))]\n                     (reverse (conj (reverse (conj res (first r))) (last r)))))]\n    (lazy-seq (cons row (pt (pas row))))\n    ))","user":"52f426fce4b05e3f0be25f1e"},{"problem":147,"code":"(fn f [xs]\n  (let [ls (concat xs [0]) rs (cons 0 xs) ys (map +' ls rs)]\n    (lazy-seq (cons (into [] xs) (f ys)))))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [start] (iterate #(map + (cons 0 %) (concat % [0])) (map bigint start)))\n;iterate #(vec (map + (into [0] %) (conj % 0)))","problem":147,"user":"5150a7d7e4b03e678e393abb"},{"problem":147,"code":"iterate (fn p [x] (conj (vec (conj (map +' (rest x) (pop x)) (first x))) (last x)))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn [v]\n  (iterate #(vec (map + (cons 0N %) (conj % 0N))) v))","problem":147,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [xs]\n    (let [mid (fn [x] (map #(apply + %) (partition 2 1 x)))]\n        (iterate #(concat [(first %)] (mid %) [(last %)]) xs)))","problem":147,"user":"4f0e995e535d0136e6c22326"},{"problem":147,"code":"(fn pascal [row]\n\t(lazy-seq (cons row (pascal (concat (map-indexed #(if (pos? %1) (+' (nth row (dec %1)) %2) %2) row) (take-last 1 row))))))","user":"56bb9ccce4b0f26550335959"},{"problem":147,"code":"(fn pascals-trapezoid [nums]\n  (iterate #(map +' (concat [0] %) (concat % [0])) nums))","user":"5879d577e4b01531a375ead8"},{"code":"(partial \n  iterate\n    (fn [s]\n      (map #(apply + %) \n        (partition 2 1 [0] (cons 0 s)))))","problem":147,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn t7 [coll]\n  (cons coll \n        (lazy-seq\n          (let [ans (map #(apply +' %1) (partition 2 1 coll))\n                f (first coll)\n                l (last coll)]\n            (t7 (concat [f] ans [l]))))))","problem":147,"user":"5046f909e4b03b02161376b5"},{"problem":147,"code":"(fn p[r] \n (let [coll (flatten (vector 0 r 0))\n       nr (loop [f (first coll) rr (rest coll) res []] \n             (if (empty? rr) res \n               (recur (first rr) (rest rr) (conj res (+' f (first rr))))\n             )\n          )]\n      (cons r (lazy-seq (p nr)))\n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":147,"code":"(fn [coll]\n  (letfn [(pascal [row] (concat\n                         [(first coll)]\n                         (map #(apply +' %) (partition 2 1 row))\n                         [(last coll)]))]\n    (iterate pascal coll)))","user":"4f16d3fd535d64f60314644e"},{"code":"(fn [row] (iterate #(map +' `[0 ~@%] `[~@% 0]) row))","problem":147,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":147,"code":"(fn pt [r1] (let [\n                  nr (fn [r] (vec (map +' (cons 0 r) (conj r 0))))\n                 ]\n              (iterate nr r1)\n              ))","user":"571aad45e4b07c98581c3b59"},{"problem":147,"code":"(fn pt [v]\n  (iterate (fn [v]\n             (let [vl (count v)]\n               (map #(+' (if (< % 0) 0 (nth v %))\n                        (if (>= (inc %) vl ) 0 (nth v (inc %))))\n                    (range -1 vl))) ) v)\n  )","user":"583048d9e4b051871117c007"},{"problem":147,"code":"(fn pascal [row]\n  (cons row (lazy-seq (pascal (map +' (concat [0] row) (concat row [0]))))))","user":"53dadf1de4b0e771c30254ad"},{"code":"(fn m [coll]\n  (lazy-seq (let [s (map #(apply +' %) (partition 2 1 coll))\n                  ret (concat [(first coll)] s [(last coll)])]\n              (cons coll (m ret)))))","problem":147,"user":"52828298e4b0757a1b17145b"},{"code":"(fn pasc [line]\n  (let [l1 (concat [0] line)\n        l2 (concat line [0])]\n    (lazy-seq (cons line (pasc (map + l1 l2))))))","problem":147,"user":"4f13047d535d64f60314642c"},{"code":"(fn pt [s]\n  (lazy-seq\n   (cons s (pt (concat\n                [(first s)]\n                (map (fn [[a b]] (+' a b))\n                     (partition 2 1 s))\n                [(last s)])))))","problem":147,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn pascal-trapezoid [xs]\n  (lazy-seq\n   (cons xs\n         (pascal-trapezoid  \n          (concat [(first xs)] \n                  ( map (partial apply +') \n                        (partition 2 1  xs)) \n                  [(last xs)])))))","problem":147,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":147,"code":"(partial iterate #(map +' (cons 0 %) (concat % [0])))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":147,"code":"(fn pascal [first-row]\n  (cons first-row\n        (lazy-seq (pascal (->> (concat [0] first-row [0])\n                               (map bigint)\n                               (partition 2 1)\n                               (map #(apply + %))\n                               vec)))))","user":"547884d7e4b0c51c1f4d72bd"},{"code":"(fn pascal [v]\n  (lazy-seq\n    (cons v\n      (pascal (vec (map + (cons 0 v)\n                          (conj v 0)))))))","problem":147,"user":"4e521cef535d302ef430da6d"},{"problem":147,"code":"(partial iterate (fn [l]\n                     (let [len (count l)]\n                       (loop [acc [(first l)] n 0]\n                         (if (= n (- len 1))\n                           (conj acc (last l))\n                           (let [x (nth l n), y (nth l (inc n))]\n                             (recur (conj acc (+' x y)) (inc n))))))))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn pascal-trapezoid [coll]\n  (letfn [(next-pascal-row [coll]\n            (loop [result (vector (first coll)) c coll]\n              (if (= 1 (count c))\n                (conj result (last coll))\n                (recur (conj result (+ (first c) (second c))) (rest c)))))]\n    (iterate next-pascal-row coll)))","problem":147,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn f [s]\n  (let [p (fn [a] (vec (map + (cons 0 a) (conj a 0))))]\n    (iterate p s)))","problem":147,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":147,"code":"(fn pascals-triangle [vect] (iterate (fn pascals-line [vect] (into [] (map #(reduce +' %) (partition 2 1 (cons 0 (conj vect 0)))))) vect))","user":"554bc64ae4b0a04f79299598"},{"problem":147,"code":"(fn f [coll]\n  (let [expand (fn [nums]\n                 (if (= (count nums) 1)\n                   [(first nums) (first nums)]\n                   (concat [(first nums)] (partition 2 1 nums) [(last nums)])))\n        sum    (fn [nums]\n                 (for [item nums]\n                   (if (coll? item)\n                     (reduce +' item)\n                     item)))\n        sum-of-expanded (sum (expand coll))]\n    (lazy-seq (cons coll (f sum-of-expanded)))))","user":"524a9556e4b05ef8e38e64b1"},{"code":"(fn pascal[s]\n  (lazy-seq \n  (cons s (pascal (concat [(first s)] (map #(apply + %) (partition 2 (rest (interleave s s)))) [(last s)])))\n  )\n)","problem":147,"user":"4e9de526535dbda64a6f6b8e"},{"problem":147,"code":"(fn [start-from]\n      (iterate\n       (fn [n]\n         (loop [x n\n                res []]\n           (if-not (next x)\n             (concat [(first n)] res [(last n)])\n             (recur (next x) (conj res (+' (first x) (second x)))))))\n       start-from))","user":"58303fc3e4b051871117c006"},{"problem":147,"code":"(fn p [c] (cons c (lazy-seq (p (mapv +' (cons 0 c) (conj c 0))))))","user":"56798d83e4b05957ce8c618b"},{"problem":147,"code":"(fn past-trap\n  [vec1] \n  \n  (letfn [(stp [vec1] (lazy-seq (cons vec1\n\t\t\t                         (stp ((fn [vec2] (vec (map #(+ (first %) (second %)) (partition 2 1 (concat '(0N) vec2 '(0N))))))\n\t\t  vec1)))))]\n          \n    (stp vec1)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":147,"code":"(fn pascal [inlist]\n  (iterate\n   (fn pascalstep [step]\n     (map +' (concat step '(0)) (concat '(0) step))\n   )\n   inlist)\n)","user":"4fc50bcbe4b081705acca375"},{"problem":147,"code":"#(letfn [(pascal [sq]\n            (concat [(first sq)]\n                    (map (fn [sq2] (apply +' sq2)) (partition 2 1 sq))\n                    [(last sq)]))]\n   (iterate pascal %))","user":"4ddbfb8a535d02782fcbea00"},{"code":"iterate (fn [r] (map (partial reduce +) (doall (partition 2 1 (concat [0N] r [0N])))))","problem":147,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":147,"code":"(fn [row] \n  (let [next \n        (fn [prev]\n            (conj \n              (vec (cons\n                (first prev)\n                (map  #(apply +' %)  (partition 2 1 prev))))   \n              (last prev)))]\n    (iterate next row)))","user":"4dbf7a31535d020aff1edf75"},{"problem":147,"code":"(fn ptrap [start]\n    (iterate\n     (fn next-triangle [s]\n       (->> (reduce (fn [m x]\n                      (let [new-m (assoc m :to-add x)]\n                        (if-let [l (:to-add m)]\n                          (update-in new-m [:m] conj (+' x l))\n                          new-m)))\n                    {:m []}\n                    (concat [0] s [0]))\n            :m))\n     start))","user":"567b2f20e4b05957ce8c61a2"},{"problem":147,"code":"(fn [x]\n  (iterate \n   #(concat [(first x)] (map +' % (rest %)) [(last x)])\n   x))","user":"53065acbe4b02e8216869792"},{"problem":147,"code":"(fn pt [v]\n  (iterate #(vec (concat [(first %)] (map +' % (rest %)) [(last %)])) v))","user":"52ce1abfe4b07d0d72b27389"},{"problem":147,"code":"(fn pascalSeq [x]\n  (letfn[(nextPascal [coll]\n                   (vec (map +' (cons 0 coll) (conj coll 0))))]\n   (lazy-seq\n    (let[nextX (nextPascal x)]\n      (cons x (pascalSeq nextX))))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn [v]\n  (iterate #(vec (map +' `(0 ~@%) `(~@% 0))) v))","problem":147,"user":"51cbaf14e4b08d8387cbedda"},{"problem":147,"code":"(fn pascalstrapezoid [x]\n                 (iterate (fn f [v]\n                            (if (empty? v)\n                              v\n                              (vec (map +' (cons 0 v) (conj v 0))))) x))","user":"532727bae4b09d4e7a9b54fa"},{"code":"#(iterate \n    (fn [v] \n      (let [w (flatten [0 (interleave v v) 0])]\n        (map (fn [a] (reduce + a)) (partition 2 w))))\n    %)","problem":147,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn pascals-triangle [coll]\n    (let [fst (first coll)\n          lst (last coll)\n          mdl (for [[x y] (partition 2 1 coll)] (+ x y))]\n      (lazy-seq\n        (cons coll (pascals-triangle (concat [fst] mdl [lst]))))))","problem":147,"user":"4dc29a1d535d020aff1edf96"},{"problem":147,"code":"(letfn [(f [s] (lazy-seq (cons s (f (vec (map #(apply +' %) (partition 2 1 (conj (into [0] s) 0))))))))] f)","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn pascal[initseq]\n  (letfn [(gen-nextseq [s]\n                      (let [s1 (conj (vec s) 0)\n                            s2 (cons 0 s)]\n                      \t(map +' s1 s2)))]\n    (cons \n     initseq \n     (lazy-seq \n      (pascal \n        (gen-nextseq initseq))))))","problem":147,"user":"512eb723e4b0b740abc5982b"},{"problem":147,"code":"(fn [coll]\n  (letfn [(grow [coll] (map +' (concat [0] coll) (concat coll [0])))]\n    (iterate grow coll)))","user":"50310713e4b05b7df5a0b84c"},{"problem":147,"code":"(fn ptz# [vecv]\n    (let [expand-row (conj (vec (cons 0 vecv)) 0)\n          next-row (fn [v]\n                     (->> v\n                          (partition 2 1)\n                          (map #(apply +' %))\n                          (vec)))]\n      (lazy-seq\n        (cons vecv (ptz# (next-row expand-row))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"#(iterate (fn p-t [v] (vec (map +' (conj v 0) (cons 0 v)))) %)","problem":147,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [sq]\n  (iterate\n   (fn [row]\n     (let [rowed (vec (concat [0] row [0]))]\n       (map (fn [i] (+' (get rowed i)\n                        (get rowed (dec i))))\n            (rest (range (count rowed))))))\n   sq))","problem":147,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn pascals-trapezoid [start]\n  (letfn [(transform [line] \n                     (let [line+ (conj line 0)\n                           +line (into [0] line)]\n                       (vec (map +' line+ +line))))]\n    (cons start (lazy-seq (pascals-trapezoid (transform start))))))","problem":147,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":147,"code":"(fn peu [x] \n  (cons x \n     (lazy-seq\n        (peu\n        \t(map #(+' %1 %2)\n            \t(concat [0] x)\n                (concat x [0])\n            )\n        )\n     )         \n  )     \n)","user":"53fc8424e4b0de5c418485b3"},{"problem":147,"code":"(fn pascal[n](iterate\n              #(map +'`(0 ~@%)`(~@% 0)) n))","user":"6085edade4b0736b099e42fc"},{"problem":147,"code":"(fn\n  [lst]\n  (iterate (fn [lst]\n             (loop [input lst\n                    res (vector (first lst))]\n               (if (= 1 (count input))\n                 (conj res (last lst))\n                 (recur (rest input)\n                        (conj res (+' (first input) (second input)))))))\n           lst))","user":"5c706232e4b0fca0c162277e"},{"problem":147,"code":"(fn pascal-trapezoid\n  [x]\n  (cons\n    x\n    (lazy-seq\n      (pascal-trapezoid\n        (conj (into [(first x)] (map +' x (rest x))) (last x))))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(partial\n   iterate\n   (fn [v]\n     (map (partial apply +')\n          (partition 2 1 [0]\n                     (cons 0 v)))))","problem":147,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"iterate  \n  (fn [col]\n\t\t   (loop [result [] elements (cons 0 col) ]\t\t\n\t\t     (if (> (count elements) 1)\n\t\t       (recur (conj result (+' (first elements) (second elements))) (rest elements))\n\t\t       (conj result (last col)) \n\t\t       )\n\t\t     )\n\t\t   )","problem":147,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn [v]\n  (iterate \n   (fn [x]\n     (map \n      (fn [[a b]] (+' a b))\n       (partition 2 1 \n         (flatten [0 x 0]))\t\n      )\n     )\n   v))","problem":147,"user":"5094057fe4b097f48cc38593"},{"code":"(fn prob-0147 [init-xs]\n  (iterate\n   (fn [xs] (map #(+ %1 %2) (cons 0 xs) (concat xs [0])))\n   init-xs))","problem":147,"user":"4f047c07535dcb61093f6bcd"},{"code":"(fn [S] \n  (map (fn [n]\n    (loop [i 0, row S]\n      (if (= n i) row\n        (recur (inc i) \n          (concat [(first row)] (map #(apply + %) \n            (partition 2 1 row)) [(last row)]))))) (range)))","problem":147,"user":"4fda016ae4b05e33b9224f42"},{"problem":147,"code":"(fn pascals-trapezoid [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"58ed713de4b056aecfd47d84"},{"problem":147,"code":"(fn lazyPas [v]\n  (let [ e (concat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)])]\n                   (cons v (lazy-seq (lazyPas e)))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn pt[x]\r\n  (let [f #(for [i (range 0 (dec (count %)))]\r\n             (+ (nth % i) (nth % (inc i))))]\r\n    (lazy-seq \r\n      (cons x (pt (f (concat '(0) x '(0))))))))","problem":147,"user":"4f82ed48e4b033992c121c0e"},{"code":"(fn [x]\n  (iterate \n    (fn [row] \n      (vec \n        (concat [(first x)] (map #(apply + %) (partition 2 1 row)) [(last x)]))) x))","problem":147,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn pas [coll]\n  (lazy-seq\n    (cons coll (pas (map + (concat coll [0]) (concat [0] coll)))\n    )))","problem":147,"user":"4f88ae35e4b033992c121c6d"},{"problem":147,"code":"(fn trap [r]\n  (cons r (lazy-seq (trap (loop [rr [] \n                                 [x y & xs] (concat [0] r [0])]\n                            (let [rrr (conj rr (+' x y))]\n                              (if (seq xs)\n                                (recur rrr (cons y xs))\n                                 rrr)))))))","user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn pt [v ]\n  (lazy-seq\n    (cons v\n      (pt\n        (loop [rv [(first v)], aseq v]\n          (if (seq (rest aseq))\n            (recur (concat rv [(+' (first aseq) (second aseq))]) (rest aseq))\n            (concat rv [(first aseq)])\n          )\n        )\n      )\n  )\n)\n)","problem":147,"user":"5229211be4b04c906c9c6a63"},{"code":"(fn f [xs] (iterate #(vec (map + (cons 0 %1) (conj %1 0))) xs))","problem":147,"user":"4fa6a491e4b081705acca1bc"},{"problem":147,"code":"(fn [s]  (iterate #(loop [ts (concat (conj (seq %) 0) '(0))\n                                  r []]\n                             (if (= 1 (count ts))\n                               r\n                               (recur (rest ts) (conj r (+' (first ts) (second ts)))))) s))","user":"57addbcce4b0b8559636fca3"},{"code":"(fn[s]\n  (iterate \n    #(into [] \n      (map + \n       (conj (apply list %) 0) \n        (conj (into [] %) 0)))\n  s))","problem":147,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(partial iterate (fn [xs] (map #(apply + %) (partition-all 2 1 (cons 0 xs)))))","problem":147,"user":"4ece9ca9535d23f03622770f"},{"problem":147,"code":"(fn pt [s]\n  (lazy-seq (cons s (pt (->> (concat [0] s [0])\n                             (partition 2 1)\n                             (map #(apply  +' %)))))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"#(iterate \n  (fn [v]\n    (vec (map + (cons 0 v) (conj v 0)))) \n  %)","problem":147,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn pasc [c] (let [coll (map bigint c)] (iterate #(concat (list (first %)) (map + % (rest %)) (list (last %))) coll)))","problem":147,"user":"52cca65be4b07d0d72b2736b"},{"problem":147,"code":"(fn [x] (iterate (fn [y] (vec (map +' (into [0] y) (conj y 0))))x))","user":"536973e5e4b0243289761e9e"},{"problem":147,"code":"(fn pascal-triangle [init-v]\n  (let [next (vec (flatten [(first init-v) (mapv #(apply +' %) (partition 2 1 init-v)) (last init-v)]))]\n    (cons init-v (lazy-seq (pascal-triangle next)))))","user":"54684c3be4b00cfc9eacc139"},{"problem":147,"code":"(fn pascal-trapezoid [base]\n  (let [row (->>\n      (range (inc (count base)))\n      (map-indexed\n        (fn [idx x]\n          (cond\n            (= idx 0) (first base)\n            (= idx (count base)) (last base)\n            :else (+'\n              (nth base idx)\n              (nth base (dec idx)))))))]\n    (lazy-seq (cons base (pascal-trapezoid row)))))","user":"5901158de4b0438e51c2d039"},{"problem":147,"code":"(fn pt [v]\n  (let [start (vector (first v))\n        end (vector (last v))\n        middle (vec (map #(apply +' %) (partition 2 1 v)))\n        next-row (vec (concat start middle end))]\n    (lazy-seq\n      (cons v (pt next-row)))))","user":"5a512929e4b05d388ecb6be2"},{"code":"#(letfn\n  [(next-row [row]\n             (concat (take 1 row)\n                     (map (partial apply +) (partition 2 1 row))\n                     (take-last 1 row)))\n   (pascal [row]\n           (cons row (lazy-seq (pascal (next-row row)))))]\n  (pascal (map bigint %))\n  )","problem":147,"user":"52e59ca5e4b09f7907dd1464"},{"problem":147,"code":"(fn pascal [c]\n    (lazy-seq (cons c (pascal (map #(+' (first %) (last %)) (partition-all 2 (interleave (cons 0 c) (concat c '(0)))))))))","user":"52fac708e4b047fd55836fff"},{"problem":147,"code":"(fn pascal-trap [fst]\n  (letfn [(npascal [s] (flatten (vector (first s) (map #(+' %1 %2) s (rest s)) (last s))))]\n    (lazy-seq (cons fst (pascal-trap (npascal fst))))))","user":"5f2c94b4e4b033932238a669"},{"problem":147,"code":"(fn [xs]\n    (letfn [(step [xs]\n              (loop [last 0\n                     result []\n                     [x & xs] xs]\n                (if-not (seq xs) (-> (conj result (+' x last))\n                                           (conj x))\n                        (recur x (conj result (+' x last)) xs))))]\n      (iterate step xs)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":147,"code":"(fn pascal-trapezoid [s] \n(cons s (lazy-seq (pascal-trapezoid (concat [(first s)] (map #(apply +' %) (partition 2 1 s)) [(last s)]))))\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":147,"code":"(fn pasco [v] \n   (cons v\n         (lazy-seq (pasco (cons (first v) (conj (vec (map +' v (rest v))) (last v)) )))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn pas-tr [coll]\n  (iterate #(apply vector (first coll) \n                   (conj (mapv \n                          (partial apply +') \n                          (partition 2 1 %)) \n                         (last coll)))  coll))","problem":147,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":147,"code":"(fn f [in]\n            (let [newvec  (concat \n                            (vector (first in))\n                            (map #(+' %1 %2) in (rest in))\n                            (vector(last in)))]\n              (cons in (lazy-seq (f newvec)))))","user":"53a83c74e4b047364c044426"},{"problem":147,"code":"(fn pascals-trapezoid [row]\n  (lazy-seq\n   (let [partial-row (map #(apply +' %) (partition 2 1 row))\n         next-row    (into [] (concat [(first row)] partial-row [(last row)]))]\n     (cons row (pascals-trapezoid next-row)))))","user":"58327a08e4b089d5ab817c7c"},{"problem":147,"code":"(fn pascal-trapez [coll]\n  (lazy-seq\n    (let [next-coll (->> (concat [0] coll [0])\n                         (partition 2 1)\n                         (map (partial apply +')))]\n      (cons coll (pascal-trapez next-coll)))))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn [v]\n  (letfn [(pas [s]\n            (cons s (lazy-seq (pas (vec (map + (cons 0 s) (conj s 0)))))))]\n    (pas (vec (map bigint v)))))","problem":147,"user":"52b0323ee4b0c58976d9acc6"},{"problem":147,"code":"(fn [fst]\n    (let [nl (fn [[x & xs :as ov]]\n                      (concat [x] (apply vector (map +' ov xs)) [(last ov)]))]\n      (iterate nl fst)\n      )\n    )","user":"559a9a3de4b066d22e731f45"},{"code":"(fn trapezoid [xs]\n  (cons xs (lazy-seq (trapezoid (flatten (conj (conj [(first xs)] (map #(apply +' %) (map vector xs (rest xs)))) (last xs)))))))","problem":147,"user":"50e3ddd4e4b01912b3285c47"},{"code":"(fn [v]\n  (iterate (fn [row] (apply vector (for [[x y] (partition 2 1 (concat [0] row [0]))] (+' x y)))) v))","problem":147,"user":"53219cece4b09d4e7a9b54b7"},{"problem":147,"code":"(fn pascal [s]\r\n  (iterate \r\n    #(flatten [(first %) \r\n               (map (partial apply +') (partition 2 1 %)) \r\n               (last %) ])\r\n    s))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn pascal-seq [tab]\n   (let [pascal (fn [sx] (apply (fn\n                              ([a] [1 1])\n                              ([a b] [a (+' a b) b])\n                              ([a b & args]\n                                 (loop [[x y & rst :as sx] (concat [a b] args)\n                                        out []]\n                                   (if (nil? y)\n                                     (conj (vec (cons a out)) (last args))\n                                     (recur (next sx) (conj out (+' x y))))))\n                             ) sx))]\n     (lazy-seq\n      \n      (cons tab (pascal-seq (pascal tab))))\n     ))","problem":147,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":147,"code":"iterate (fn [x] (map +' (concat [0] x) (concat x [0])))","user":"54e2a779e4b024c67c0cf7d3"},{"code":"iterate (fn [s] (vec (map + (cons 0 s) (conj s 0))))","problem":147,"user":"4ef0eaef535dced4c769f211"},{"problem":147,"code":"(fn pascal-trap\n  [xs]\n  (lazy-seq (cons xs\n                  (pascal-trap\n                   (map (fn [[x y]] (+' x y))\n                        (partition 2 (interleave (concat xs (list 0))\n                                                 (cons 0 xs))))))))","user":"5c222b7de4b07e362c230588"},{"problem":147,"code":"(fn f [r] (cons r (lazy-seq (f (conj (into [(first r)] (map (partial reduce +') (partition 2 1 r))) (last r))))))","user":"506ba58be4b0eda3100c090b"},{"problem":147,"code":"(fn pascal's-trapezoid [vs]\n  (lazy-seq (cons vs (pascal's-trapezoid (vec (map +'\n                                                (cons 0 vs)\n                                                (conj vs 0)))))))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn [xs] (iterate #(let [l (concat % [0]) r (concat [0] %)] (map (fn [a b] (+ (bigint a) (bigint b))) l r)) xs))","problem":147,"user":"52015698e4b0d7096e99ddba"},{"problem":147,"code":"(fn universal-pascal-s-triangle\n    ([index source-coll]\n     (if (<= index 1)\n       source-coll\n       (let [prev-row (universal-pascal-s-triangle (- index 1) source-coll)\n             row-prefix (list (list 0 (first prev-row)))\n             row-body (partition 2 1 prev-row)\n             row-suffix (list (list (last prev-row) 0))]\n         (map #(apply +' %) (concat row-prefix row-body row-suffix)))))\n    ([coll]\n     (map #(universal-pascal-s-triangle (+' % 1) coll) (range))))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","problem":147,"user":"4fde492be4b05e33b9224f8a"},{"code":"iterate #(map + `(0 ~@%)\n                `(~@% 0))","problem":147,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn [coll]\n  (letfn [(next-row [row]\n            (map +' (concat [0] row) (concat row [0])))]\n    (iterate next-row coll)))","problem":147,"user":"4f409e29e4b0e243712b1fb6"},{"problem":147,"code":"(fn pascal-seq [base] (lazy-seq (cons base (pascal-seq ((partial map +') (concat base [0]) (concat [0] base))))))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":147,"code":"(partial iterate (fn [xs]\n                   (map (partial apply +')\n                        (partition 2 1 (concat [0] xs [0])))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":147,"code":"iterate #(map + (concat [0N] %) (concat %[0N]))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [prev-row]\n             (vec (map (fn [[elem1 elem2]] (+' elem1 elem2)) (partition 2 1 (cons 0 (conj prev-row 0)))))) v))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"problem":147,"code":"(fn nxx [v]\n  (lazy-seq (cons v \n                  (nxx (flatten [(first v) (map (fn [a b] (+' a b)) v (rest v)) (last v)])))))","user":"5012da69e4b0c8732600222d"},{"problem":147,"code":"(fn pt [row]\n  (lazy-seq\n   (let [next-row (vec (concat [(first row)] \n                           (map (partial apply +') (partition 2 1 row)) \n                           [(last row)]))]\n     (list* row (pt next-row)))))","user":"5405ae2be4b0addc1aec6671"},{"problem":147,"code":"iterate (fn [c]\n  (letfn [(build [[a b & x]]\n                  (if (nil? b) [a]\n                    (cons (+' a b) (build (cons b x)))\n                    )\n                  )\n          ]\n    (cons (first c) (build c))\n    )\n  )","user":"55e8a85be4b0121d4835fd98"},{"code":"iterate #(for [[x y] (partition 2 1 (concat [0] % [0]))]\n           (+ x y))","problem":147,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":147,"code":"(fn pascal-trapezoid [nums]\n  (iterate #(concat [(first %)]\n                    (map +' % (rest %))\n                    [(last %)])\n                 nums))","user":"6074dfa4e4b069485764de4c"},{"problem":147,"code":"(fn p-trapezoid [s]\n (cons s (lazy-seq ( p-trapezoid (conj (apply vector (conj \n                                             (map #(+' %1 %2) s (rest s) ) \n                                             (first s) )) (last s))))))","user":"558bdcefe4b0277789237633"},{"code":"(fn [init]\n  (letfn [(next-row [row]\n    (flatten [(first row)\n              (map (partial apply +) (partition 2 1 row))\n              (last row)]))]\n    (iterate next-row init)))","problem":147,"user":"4ede361a535d10e5ff6f5332"},{"problem":147,"code":"(fn trapez [s] (lazy-seq (cons s (trapez (concat [(first s)] (map #(reduce +' %) (partition 2 1 s)) [(last s)])))))","user":"5e471203e4b043cd24807a2a"},{"code":"(fn [v] (iterate #(vec (map + (conj % 0) (cons 0 %))) v))","problem":147,"user":"4dc1ee85535d020aff1edf91"},{"code":"#(let [next-layer (fn [previous]\n  (loop [x previous result[(first previous)]]\n\t    (if (empty? x)\n\t       (conj result (last previous))\n\t       (cond\n\t\t (= 1 (count x)) (recur (rest x) result)\n\t\t :else\n\t\t (recur (rest x) (conj result (+ (first x) (second x))))))))]\n\t (iterate next-layer %))","problem":147,"user":"4f066916535dcb61093f6c10"},{"code":"(fn inf-pascal [v]\n  (cons v \n       (lazy-seq \n         (inf-pascal           \n            (vec (map +' (cons 0 v) (conj v 0)))))))","problem":147,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn pascals-triangle [v]\n  (lazy-seq\n    (let [g (vec (map + (cons 0 v) (conj v 0)))]\n      (cons v (pascals-triangle g)))))","problem":147,"user":"4f1bee08535d64f60314647e"},{"problem":147,"code":"iterate (fn pd[l] (concat (list (first l)) (reverse (reduce #(if (empty? %1) (list %2) (cons %2 (cons (+' (first %1) %2) (rest %1)))) [] l)) ))","user":"56a75810e4b0542e1f8d14fc"},{"problem":147,"code":"(fn pascal-triangle\n    ([] (pascal-triangle '(1)))\n    ([xs] (let [pascal-line\n                (fn [xs] (concat (vector (first xs))\n                                 (mapv +' xs (rest xs))\n                                 (vector (last xs))))]\n            (lazy-seq (cons xs (pascal-triangle (pascal-line xs)))))))","user":"5920c191e4b09b4ee5954c61"},{"problem":147,"code":"(fn [args]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) args))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":147,"code":"(fn [row]\n  (iterate\n   #(concat (take 1 %)\n            (map +' % (rest %))\n            (take-last 1 %))\n   row))","user":"4f29d9abe4b0d6649770a034"},{"code":"(fn [v]\n(iterate #(cons (first %) (map (partial apply +)\n(partition-all 2 1 %))) \n(map bigint v)))","problem":147,"user":"5055899de4b0ce54f56f03fd"},{"problem":147,"code":"(fn pascals-trap [x] \n  (let [create-next (fn [lst] \n                      (loop [[a b & l] lst\n                          \t accum [a]]\n                     \t(if-not (nil? b)\n                       \t\t(recur (conj l b)\n                        \t\t(conj accum (+' a b))) \n                       \t\t(if-not (nil? a) \n                         \t\t(conj accum a)))))]\n   (lazy-seq (cons x (pascals-trap (create-next x))))))","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn [s]\n  (iterate\n    (fn [r]\n      (map\n        #(+ (if (= % 0)         0 (nth r (dec %)))\n            (if (= % (count r)) 0 (nth r %)))\n        (range 0 (inc (count r)))))\n    (map bigint s)))","problem":147,"user":"501284d9e4b030d97e4db710"},{"problem":147,"code":"(fn my-prob-147-pascals-trapezoid [xs]\n  (letfn [(p [ys]\n            (vec (flatten (vector\n                            (first ys)\n                            (map (partial apply +') (partition 2 1 ys))\n                            (last ys)))))]\n    (iterate p xs)))","user":"55b28b57e4b01b9910ae296c"},{"code":"iterate #(map + (concat % '(0)) (concat '(0) %))","problem":147,"user":"4ecbb249535df97575fdabdf"},{"problem":147,"code":"#(iterate \n   (fn [coll]\n     (concat \n       [(first coll)]\n       (map \n         (partial apply +') \n         (partition 2 1 coll))\n       [(last coll)]))\n   %)","user":"5630ce72e4b0bfe05bf11786"},{"problem":147,"code":"(fn f [x]\n    (lazy-seq\n      (cons x\n            (f (conj\n                 (map +' x (rest (conj (vec x) 0)))\n                 (first x)))))\n    )","user":"596d630ae4b069c0a1a19846"},{"problem":147,"code":"(fn f [a] (cons a (lazy-seq (f (map +' (cons 0 a) (next (cycle (cons 0 a))))))))","user":"4fb1d7ace4b081705acca281"},{"code":"(partial iterate\n  (comp\n    #(map + (rest %) (butlast %))\n    #(concat '(0) % '(0))))","problem":147,"user":"4f7f9665e4b033992c121bea"},{"code":"#(iterate\r\n  (fn [xs]\r\n    (let [xs' (cons 0N xs)]\r\n      (map + xs' (drop 1 (cycle xs')))))\r\n  %)","problem":147,"user":"50479524e4b0371827a27bc4"},{"problem":147,"code":"(fn pt [v]\n  (lazy-cat [v]\n           (pt (concat [(first v)]\n                       (for [i (partition 2 1 v)] (apply +' i))\n                       [(last v)]))))","user":"56aed78fe4b03c432f187363"},{"code":"(fn ptrap [v]\n  (iterate (fn [v']\n             (->> v'\n                  (cons 0)\n                  (partition-all 2 1)\n                  (map #(apply +' %))\n                  vec))\n           v))","problem":147,"user":"539a2901e4b0b51d73faaf0f"},{"problem":147,"code":"(fn next_row [x] \n  (lazy-seq \n    (cons \n      x\n      (next_row \n        (map +' \n     \t  (cons 0 x) \n          (concat x [0]))))))","user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":147,"code":"; This was hard, mainly becuase I haven't yet wrapped my head around lazy-seq. \n; I like rigdern's solution.  Brief yet readable.\n\n (fn [row]\n    (let [make-next-pascal-row\n          (fn [coll]\n            (let [v (vec coll)]\n              (if (= 1 (count v))\n                [(first v) (first v)]\n                (vec (flatten [(first v) (for [i (range (dec (count v)))] (+' (get v i) (get v (inc i)))) (last v)])))))]\n      (iterate make-next-pascal-row row)))","user":"5535e822e4b09218d5f44fb2"},{"code":"iterate #(map + (cons 0 %) (conj (vec %) 0))","problem":147,"user":"4fb3b865e4b081705acca2a2"},{"problem":147,"code":"(fn pascal\n  [x]\n (iterate #(map +'(concat [0] %)(concat % [0])) x))","user":"5c787131e4b0fca0c1622825"},{"problem":147,"code":"(fn p\n  ([a e]\n   (let [c (map +' a (drop 1 a))\n         r (flatten (vector (first a) c (last a)))]\n     (lazy-seq (cons r (p r 0)))))\n  ([a]\n   (cons a (p a 0))))","user":"568227fee4b0945ebc182a8a"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (let [next-vec (mapv +' (cons 0 coll) (conj coll 0))]\n    (lazy-seq (cons coll (pascal-trapezoid next-vec)))))","user":"52fe31d5e4b047fd55837038"},{"problem":147,"code":"(fn [x]\n      (let [pascal \n            (iterate\n              #(concat\n                 [(first %)]\n                 (map +' % (rest %))\n                 [(last %)])\n              x)]\n        pascal))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn pascals-trapezoid [v]\n  (letfn [(pascals-trapezoid-next-row\n            ([v] (pascals-trapezoid-next-row v 0))\n            ([v n]\n               (loop [result [] values v value n]\n                 (if (empty? values)\n                   (conj result value)\n                   (recur (conj result (+ value (first values))) (rest values) (first values))))))]\n    (lazy-seq\n     (cons v (pascals-trapezoid (pascals-trapezoid-next-row v))))))","problem":147,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":147,"code":"(fn [x] (iterate (fn [in]\n           (let [f (first in)\n                 l (last in)]\n             (flatten (conj [f] (map #(reduce +' %) (partition 2 1 in)) l)))) x))","user":"5489dd4de4b0e286459a11ef"},{"problem":147,"code":"(fn pascal-trapezoid [x]\n  (let [ps (partition 2 1 x)\n        mps (vec (map #(apply +' %) ps))\n        nex (concat [(first x)] mps [(last x)])]\n    (lazy-seq (cons x (pascal-trapezoid nex)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"iterate #(map + (cons 0 %) (conj (into [] %) 0))","problem":147,"user":"4e22b78b535d04ed9115e81e"},{"problem":147,"code":"(fn pascal-trapezoid\n          [prev]\n          (lazy-seq (cons prev (pascal-trapezoid (if (= 1 (count prev))\n                                                   [(first prev) (first prev)]\n                                                   (into [(first prev)]\n                                                         (vec (for [idx (range (count prev))]\n                                                                (+' (get prev idx)\n                                                                   (get prev (inc idx) 0))))))))))","user":"5cbb0436e4b026601754b9cc"},{"problem":147,"code":"(fn pascal [s]\n  (lazy-seq (cons s (pascal (concat [(bigint (first s))] (map #(+ (bigint (first %)) (bigint (second %))) (partition 2 1 s)) [(bigint (last s))])))))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn [p]\r\n  (iterate \r\n    (fn [v]\r\n      (into [] (map #(bigint (+ %1 %2)) (merge v 0) (cons 0 v)))) p))","problem":147,"user":"4eb44d78535d7eef30807360"},{"problem":147,"code":"(fn [coll]\n  (let [f (fn [c] (concat [(first c)] \n                          (map #(apply +' %) (partition 2 1 c))\n                          [(last c)]))]\n    (iterate f coll)))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":147,"code":"(fn pt [org] (lazy-seq (concat [org] (pt (concat [(first org)] (map +' (drop 1 org) (drop-last org)) [(last org)])))))","user":"561a1af6e4b053970a773b02"},{"code":"(fn pas-trap [c]\n  (loop [c1 (map #(* % 1N) c)]\n    (cons c1 (lazy-seq\n              (pas-trap\n               (concat [(first c1)]\n                       (map #(apply + %) (partition 2 1 c1))\n                       [(last c1)]))))))","problem":147,"user":"4ed8b598535d10e5ff6f52fc"},{"code":"(fn lazy [x]\n  (let [nex \n        (concat [(first x)]\n                (for [i (range (dec (count x)))] (+' (nth x i) (nth x (inc i))))\n                [(last x)])]\n  (cons x (lazy-seq (lazy nex)))))","problem":147,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [h] (iterate (fn [i]\n                    (concat [(first i)] (map #(+ (biginteger (first %))  (biginteger (second %))) (partition 2 1 i)) [(last i)])\n                    ) h))","problem":147,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":147,"code":"(fn itr [row]\n  (let [tr (fn tr [row]\n            (cons (first row)\n                  (concat (map #(apply +' %)\n                               (partition 2 1 row))\n                          (drop (- (count row) 1)\n                                row))))]\n    (iterate tr row)))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":147,"code":"(fn [row]\n  (iterate\n    (fn next-row [previous-row]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1\n                            (conj (into [0] previous-row) 0)))))\n    row))","user":"56df63c7e4b0ca2494a095f5"},{"problem":147,"code":"(fn __ [xs]\n  (letfn [(next [xs] (reduce conj [(first xs)] (map (partial apply +') (partition 2 1 [0] xs))))]\n    (lazy-seq (cons xs (__ (next xs))))))","user":"5a544eeee4b05d388ecb6c24"},{"problem":147,"code":"iterate\n(fn [inp]  \n  (loop [togo inp\n  \t     acc [(first inp)]]  \t     \n    (if (< (count togo) 2)\n    \t(conj acc (last inp))\n      (recur (rest togo) (conj acc (+'(first togo)(second togo)))))))","user":"54f4a457e4b0f2f3c5226e83"},{"code":"(fn [s] \n  (iterate #(map +' (concat [0] %) (concat % '(0))) s))","problem":147,"user":"5145832be4b0e8879607340a"},{"problem":147,"code":"(fn pascal-trapz [x]\n   (lazy-seq\n   (cons x (pascal-trapz\n      (map +' (cons 0 x) (lazy-cat x [0]))))))","user":"56df6498e4b0ca2494a095f8"},{"problem":147,"code":"(fn panjing [x]\n  (iterate (fn [x] (concat (list (first x))\n                           (map +' x (rest x))\n                           (list (last x)))) x))","user":"55d9743ae4b0e31453f64aca"},{"problem":147,"code":"(fn lazy-pascal [vec]\n  (let [next ((fn s [se]\n                (loop [s [(first se)]\n                       r se]\n                  (if (= (count r) 1)\n                    (conj s (first r))\n                    (recur \n                      (conj s (+' (first r) (second r)))\n                      (rest r)))))\n              vec)]\n    (cons vec (lazy-seq (lazy-pascal next)))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":147,"code":"(fn pascal [input]\n  (lazy-cat [input] (pascal (concat [(first input)]\n                                    (map +' input (rest input))\n                                    [(last input)]\n                                    )))\n  )","user":"55aa5f73e4b0988bba2ad94b"},{"problem":147,"code":"(fn pas[s]\n  (iterate\n   (fn[j]\n     (cons \n      (first j) \n      (map (partial reduce +') (partition-all 2 1 j))))s)\n   )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":147,"code":"(fn [s]\n           (iterate\n             (fn [i] (map #(apply +' %&) (concat [0] i) (concat i [0])))\n             s))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"#(letfn [(pascal-trapezoid\n            [coll]\n            (letfn [(next-row [c] (map (partial reduce +) (partition 2 1 (cons 0N (conj (vec c) 0)))))]\n              (cons\n                (vec coll)\n                (lazy-seq (pascal-trapezoid (next-row coll))))))] (pascal-trapezoid %))","problem":147,"user":"51fb9d30e4b0f1313d468a0f"},{"problem":147,"code":"(fn [coll]\n    (->> [[] coll]\n     (iterate (fn [[a b]]\n                (let [fst [(first b)]\n                      lst [(last b)]\n                      build-mid #(map (fn [[a b]] (+' a b)) %)]\n                  [b (vec (concat fst\n                                  (build-mid (partition 2 1 b))\n                                  lst))])))\n     (map second)))","user":"532f8569e4b019098a6f8b4f"},{"problem":147,"code":"(fn pascal\n    [coll]\n    (cons coll (lazy-seq (pascal (map +' (conj (vec coll) 0) (into [0] coll))))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":147,"code":"(fn [inp ](iterate #(map +' `(0 ~@%) `(~@% 0)) inp))","user":"5addadfce4b0837691e92c13"},{"code":"(fn pt [coll]\n  (letfn [(nextrow [coll]\n                   (lazy-seq (into (into [(first coll)] (map #(+' (first %) (second %)) (partition 2 1 coll))) [(last coll)])))]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (cons s (pt (nextrow s)))))))","problem":147,"user":"512474ede4b02c3f2a072cce"},{"problem":147,"code":"#(let [step \n  (fn [xs]\n    (vec (map (partial apply +') (partition 2 1 (concat [0] xs [0])))))]\n  (iterate step %))","user":"53976599e4b0b51d73faaeea"},{"problem":147,"code":"(fn pascal [x]\n   (cons x (lazy-seq\n            (pascal\n             (map #(apply +' %)\n                 (concat [[(first x)]] (partition 2 1 x) [[(last x)]]))))))","user":"525cc912e4b0cb4875a45d48"},{"code":"iterate (fn [v] (map #(+' (first %) (second %)) (partition 2 1 (concat [0] v [0]))))","problem":147,"user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn pasSeq [lst] \n   (let [pNext (fn [curr]\n    (concat \n      (list (first curr))\n      (map #(apply +' %) (partition 2 1 curr))\n      (list (last curr)))) ]\n    (lazy-seq (cons lst (pasSeq (pNext lst))))\n   )\n)","problem":147,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn  p147s [s]\n  (lazy-seq\n   (cons s\n   (p147s\n\t  (cons (first s) (conj (vec (map + (rest s) (butlast s))) (last s)))\n\t  )\n\t )\n   )\n  )","problem":147,"user":"4f63777be4b0defedf855fe4"},{"problem":147,"code":"(fn [coll] (cons coll ((fn trap [coll] (let [mid (map +' coll (rest coll)) cont (into [(first coll)] mid) op (conj cont (last coll))] (cons op (lazy-seq (trap op))))) coll)))","user":"593ab583e4b069cdc2982b57"},{"problem":147,"code":"#(letfn [(pascal [start-row]\n                    (lazy-seq\n                      (let [row\n                            (concat\n                              (conj\n                                (map\n                                  (fn [[l r]] (+' l r))\n                                  (partition 2 1 start-row))\n                                (first start-row))\n                              [(last start-row)])]\n                        (cons start-row (pascal row)))))]\n            (pascal %))","user":"58bb218be4b0888cdc949cf4"},{"code":"iterate\n#(map (partial apply +')\n      (partition-all 2 1 (cons 0 %)))","problem":147,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn [v] (let [nxt (fn [[x1 & x]] (map first (reductions (fn [[a b] s] [(+ b s) s]) [x1 x1] (concat x [0]) )))] (iterate nxt v)))","problem":147,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [s] (iterate #(vec (map + (cons 0 %) (conj % 0))) s))","problem":147,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn prob-147 [s]\n  (lazy-seq\n    (cons s (prob-147 (vec (conj (concat (map #(bigint (+ %1 %2)) s (rest s))\n                                         (vector (last s))) (first s)))))))","problem":147,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn pascal-trapezoid [v]\n  (letfn\n    [(calc-row [v]\n      (loop\n        [remaining (rest (rest v)),\n         n1 (first v),\n         n2 (second v),\n         result [(first v)]]\n        (if\n          (nil? n2)\n          (conj result n1)\n          (recur\n            (rest remaining),\n            n2,\n            (first remaining),\n            (conj result (+ n1 n2))))))]\n    (lazy-seq (cons v (pascal-trapezoid (calc-row v))))))","problem":147,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":147,"code":"(fn pt [coll]\n  (lazy-seq (cons coll (pt (loop [newcoll (vector (first coll))\n                                  prevcoll coll]\n                             (if (= 1 (count prevcoll))\n                               (conj newcoll (first prevcoll))\n                               (recur (conj newcoll (+' (first prevcoll) (second prevcoll))) (drop 1 prevcoll))))))))","user":"52540bcce4b0541d1855b952"},{"problem":147,"code":"(fn trapezoid [row]\n  (cons row\n        (lazy-seq (trapezoid (map +' (cons 0 row) (conj (vec row) 0))))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":147,"code":"#(iterate (fn [coll] (mapv +' (cons 0 coll) (conj coll 0))) %)","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(let [step (fn [row]\n              (concat [(first row)] (map + (rest row) row) [(last row)]))]\n  (fn [row]\n    (iterate step row)))","problem":147,"user":"4edab806535d10e5ff6f5311"},{"problem":147,"code":"(fn [xs]\n  (iterate\n   #(vec (map +' (conj % 0) (cons 0 %)))\n   xs))","user":"5d81eba4e4b0915913b1d37b"},{"problem":147,"code":"(fn [row]\n  (iterate #(map +' (concat [0] %) (concat % [0])) row))","user":"55216aa5e4b0882d96d09192"},{"problem":147,"code":"(fn ptrap [x]\n                 (lazy-seq\n                  (let [r (cons (first x) ((fn nextnum [l]\n                                             (if (< (count l) 2) (list (first l))\n                                                 (cons (+' (first l) (second l))\n                                                       (nextnum (rest l)))))\n                                           x))]\n                    (cons x (ptrap r))\n                    )))","user":"53aaaf7ae4b047364c044444"},{"problem":147,"code":"(fn fn147 [v]\n  (cons v (lazy-seq (fn147\n                     (#(reduce conj\n                               []\n                               (map +'\n                                    (conj % (last %))\n                                    (concat [0] (butlast %) [0]))) v)))))","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":147,"code":"(fn pasc-trap [xs]\n         (concat [xs] (lazy-seq (pasc-trap\n                                 (->> (concat [0] xs [0])\n                                      (partition 2 1)\n                                      (map #(reduce +' %)))))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":147,"code":"(fn trp [v]\n (letfn [(n-v [v1]\n          (loop [[f & r] v1 o [f]]\n           (if (empty? r)\n            (conj o f)\n            (recur r (conj o (+ (bigint f) (first r)))))))]\n  (lazy-seq (cons (vec (map bigint v)) (trp (n-v v))))))","user":"586615e6e4b0f14aab7c8858"},{"problem":147,"code":"(fn [coll]\n  (iterate \n   #(map +' (concat [0] %) (concat % [0])) \n   coll))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn [seqn]\n  (letfn [(next-pascal [seqn]\n            (map (fn [[a b]] (+' a b))\n                 (partition\n                  2\n                  (conj (apply\n                         vector\n                         (cons 0 (flatten\n                                  (map #(list % %) seqn))))\n                        0))))]\n    (iterate next-pascal seqn)))","problem":147,"user":"4dbdc898535d020aff1edf4a"},{"problem":147,"code":"(fn pascal [xs]\n  (let [f (conj xs 0)\n        l (cons 0 xs)\n        t (mapv +' f l)]\n    (cons xs (lazy-seq (pascal t)))))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"iterate \n #(let [[l r] (reduce (fn [[p a] v] [v (if p (conj a (+' p v)) [v])]) [nil []] %)]\n    (conj r l))","problem":147,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":147,"code":"(fn [x] (iterate #(vec (map + (cons 0N %) (conj % 0N))) x))","user":"543d5c61e4b032a45b86934d"},{"code":"(fn lp [r]\n  (cons r \n        (lazy-seq (lp (map +' (concat [0] r) (concat r [0]))))))","problem":147,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn [x] (iterate \n                     (fn [r] (concat [(first r)] (map #(BigInteger. (str (reduce + %))) (partition 2 1 r)) [(last r)]))\n                     x))","problem":147,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":147,"code":"(let\n  [lookup (fn [s i] (if (or (< i 0) (not (< i (count s)))) 0 (nth s i)))]\n  (let\n    [nextrow (fn [row]\n               (map\n                #(+' (lookup row (dec %)) (lookup row %))\n                (-> row count inc range)))]\n    (fn trapezoid [row]\n      (lazy-seq (cons row (trapezoid (nextrow row)))))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn pasc [x0]\n  (letfn [(next-row [row]\n                    (loop [in  row\n                           out []]\n                      (if (< (count in) 2)\n                        (concat [(first row)] out [(last row)])\n                        (recur\n                         (rest in)\n                         (concat out [(+ (bigint (first in)) (second in))])))))]\n    (iterate next-row x0)))","problem":147,"user":"51365524e4b04ac1f358dd52"},{"problem":147,"code":"(fn f [s]\n  (cons s \n        (lazy-seq \n         (f ((comp vec #(map +' (cons 0 %) (conj % 0)))\n             s)))))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [t] (iterate #(map +' `(0 ~@%) `(~@% 0)) t))","problem":147,"user":"51e58e02e4b0efabf93c02d0"},{"problem":147,"code":"iterate \n(fn pascal [xs]\n  (case xs\n        [1] [1 1]\n        [1 1] [1 2 1]\n        (concat [(first xs)]\n                (map #(apply +' %)\n                     (partition 2 1 xs))\n                   [(last xs)])))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn trapezoid [a]\n  (let [a1 (concat [(first a)]\n                   (map +' a (rest a))\n                   [(last a)])]\n    (cons a \n        (lazy-seq (trapezoid a1)))))","problem":147,"user":"52cc09c1e4b07d0d72b27356"},{"code":"(fn fn147 [initial] \n  (iterate \n    (fn it [v]\n       (vec (map (partial apply +) (partition 2 1 (flatten [0N v 0N])))))\n    initial))","problem":147,"user":"5125d963e4b05d10e3e395fe"},{"problem":147,"code":"#(let [next-row (fn next-row [v]\n                  (mapv +' (cons 0 v) (conj v 0)))]\n    (iterate next-row %))\n;(fn pascals-trapezoid [v]\n;  (lazy-seq\n;   (cons v (pascals-trapezoid (mapv +' (cons 0 v) (conj v 0))))))","user":"60794173e4b0a637ed78035d"},{"problem":147,"code":"(fn [coll]\n  (let [build-next (fn [coll]\n                    (let [center (->> coll\n                                   (partition 2 1)\n                                   (map #(reduce +' %)))]\n                       (-> (concat\n                             [(first coll)]\n                             center\n                             [(last coll)])\n                           vec)))]\n       (iterate build-next coll)))","user":"5984e7dee4b021a7a535fe43"},{"problem":147,"code":"#(iterate (fn [x] (map (partial apply +') (partition-all 2 1 (cons 0 x)))) %)","user":"54eff2bee4b024c67c0cf88d"},{"problem":147,"code":"(fn f [s]\n  (lazy-seq\n    (cons s\n       (f (vec (map +' (conj s 0) (cons 0 s)))))))","user":"53d78b64e4b0e771c3025466"},{"problem":147,"code":"(fn pascalTrap\n    [lista]\n    (lazy-seq (cons lista (pascalTrap (concat [(first lista)] (map-indexed (fn [index object] (+' object (nth lista (+ 1 index) 0))) lista))))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":147,"code":"(fn [row]\n  (letfn [(next-row [row]\n                    (concat [(first row)]\n                            (map +' row (next row))\n                            [(last row)]\n                            ))]\n    (iterate next-row row))\n  )","user":"5a7497d2e4b0512ff01cdaba"},{"problem":147,"code":"(fn [row]\n  (let [f (fn [row] (conj (first (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0N] row))\n                          (last row)))]\n    (iterate f row)))","user":"57fa7c93e4b0d3187e900963"},{"problem":147,"code":"(fn [r]\n  (letfn [(nextrow [r]\n            (concat [(first r)] \n                    (map +' r (rest r))\n                    [(last r)]))]\n    (iterate nextrow r)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":147,"code":"iterate \n #(concat [(first %)] (map +' % (rest %)) [(last %)]) ;Nextrow function","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn  [s]\n  (let [nextpascal (fn [[f & r :as prev]]\n                    (cond\n                     (= (count r) 0) [f f]\n                     :d (let [mid (partition 2 1 prev)]\n                          (flatten [f (map #(apply +' %) mid) (last prev)]))))]\n    (iterate nextpascal s)))","problem":147,"user":"51852961e4b0da5a5be3babb"},{"problem":147,"code":"(fn[v] (iterate (fn[w] (vec (concat [(w 0)] (map +' w (rest w)) [(last w)]))) v))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn f [a] (cons a (lazy-seq( \n f(concat [(first a)] (map +' a (rest a)) [(last a)])))))","problem":147,"user":"5307e4ece4b02e82168697a9"},{"problem":147,"code":"(fn pascal\n    [xs]\n    ((fn p\n       [ys]\n       (let [row (concat [(first xs)] (map (fn [[a b]] (+' a b)) (partition 2 1 ys)) [(last xs)])]\n         (lazy-seq (cons ys (p row))))) xs))","user":"507e68abe4b085af06e3afd2"},{"problem":147,"code":"(fn ptrapezoid [row]\n    (iterate #(concat [(first %)] (map +' % (rest %)) [(last %)]) row))","user":"5cb4e764e4b026601754b929"},{"problem":147,"code":"(fn pascal [row]\n           (lazy-seq\n             (cons row (pascal (concat [(first row)]\n                                       (map +' row (rest row))\n                                       [(last row)])))))","user":"5cd639b4e4b0ccb061962940"},{"code":"(fn [v]\r\n  (let [next-pascal (fn [v] (concat [(first v)]\r\n                              (map #(+ (first %) (second %)) (partition 2 1 v))\r\n                              [(last v)]))]\r\n    (iterate next-pascal (map bigint v))))","problem":147,"user":"50435689e4b034ff00315d21"},{"code":"(fn pascal [v]\n  (concat [v] (lazy-seq (pascal (cons (first v) (map + v (concat (rest v) '(0))))))))","problem":147,"user":"4f047902535dcb61093f6bcc"},{"problem":147,"code":"(fn pascal [l]\n  (let [n (cons (first l) (map #(apply +' %) (partition-all 2 1 l)))]\n    (cons l (lazy-seq (pascal n)))))\n\n;iterate (fn [l] (cons (first l) (map #(apply +' %) (partition-all 2 1 l))))\n\n;iterate #(map +' `(0 ~@%) `(~@% 0))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn trap [xs]\n  (cons xs (lazy-seq (trap (->> (flatten [0 xs 0])\n                                (partition 2 1)\n                                (map #(reduce +' %)))))))","problem":147,"user":"5312cdaae4b08068f379ed03"},{"problem":147,"code":"(partial iterate #(map +' `(0 ~@% ) `(~@% 0)))","user":"58740c18e4b01531a375ea49"},{"problem":147,"code":"(fn [x] (iterate #(concat [(first %)] (map (partial apply +') (partition 2 1 %)) [(last %)]) x))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":147,"code":"(fn pascal-row-seq [previous]\n  (letfn [(pascal-row [p]  (map #(apply +' %) (partition 2 1 (concat '(0) p '(0)))))]\n    (iterate pascal-row previous)))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn p-seq [v]\n  (let [next-v (vec (concat (vector (first v)) (map +' v (rest v)) (vector (last v))))]\n    (cons v (lazy-seq (p-seq next-v)))))","problem":147,"user":"4ee77f15535d93acb0a66868"},{"problem":147,"code":"iterate (fn [v] (mapv (partial apply +') (partition 2 1 (concat [0] v [0]))))","user":"50b42cbbe4b001349b2f4abe"},{"code":"(fn pt\r\n  [v]\r\n  (cons v\r\n        (lazy-seq (pt (vec (map + (conj v 0) (cons 0 v)))))))","problem":147,"user":"4f17ab99535d64f603146457"},{"problem":147,"code":"(fn fr [xs] (letfn [\n            (nextz [as] \n                (let [f1 (first as)\n                      hs (conj (vec (drop 1 as)) 0)]\n                  (vec (cons f1 (map +' as hs)))\n                )\n            )]\n           (lazy-seq (cons xs (fr (nextz xs))))\n       ))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":147,"code":"(fn trapezoid [xs]\n  (let [next-row\n        (fn [coll]\n           (concat [(first coll)]\n                   (map #(apply +' %) (partition 2 1 coll))\n                   [(last coll)]))]\n    (iterate next-row xs) ))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":147,"code":"(fn lpt [xs]\n  (let [f (fn [x] (mapv (fn [[a b]] (+' a b)) (partition 2 1 x)))\n        s (f (concat (conj (seq xs) 0) '(0)))]\n    (cons xs (lazy-seq (lpt s)))))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":147,"code":"(fn tr [acc]\n  (lazy-seq \n   (cons acc (tr (mapv +' (cons 0 acc) (conj acc 0))))))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn pascal-trapezoid [row]  (letfn [(two-map [f col]            (cond              (or (empty? col) (empty? (rest col))) []              :else (cons (f (first col) (second col))                             (lazy-seq (two-map f (rest col))))))          (next-row [row]            (conj (vec (cons (first row) (two-map +' row))) (last row)))]    (cons row (lazy-seq (pascal-trapezoid (next-row row))))))","problem":147,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn mf [x] (letfn [(next-pt [prs] \n                              (apply vector (concat [(first prs)] (map #(apply +' %1) (partition 2 1 prs)) [ (last prs) ])))\n;                              (apply vector (cons (first prs) (for [ idx (range (count prs))]\n;                                                                (+' (prs idx) (nth prs (+ idx 1) 0 ))))))\n                     ] \n               (lazy-seq (cons x (mf (next-pt x))))))","problem":147,"user":"50956c2be4b087f34d351ab2"},{"problem":147,"code":"(fn [row]\n  (let [next-row (fn [row] (vec (map +' (cons 0 row) (conj row 0))))]\n    (lazy-seq (iterate next-row row))))","user":"5c664b87e4b0fca0c16226a5"},{"problem":147,"code":"(fn [col]\n            (letfn [(newrow [col]\n                      (let [middle (map (fn [x1 x2]\n                                          (+' x1 x2)) col (rest col))]\n                        (conj (into [(first col)] middle) (last col))))]\n              ((fn pascal [col]\n                 (lazy-seq (cons col (pascal (newrow col)))))\n               col)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":147,"code":"(fn [x]\n  (let [pascalify (fn [l] (vec (map #(apply +' %) (partition 2 1 [0] (cons 0 l)))))]\n    (iterate pascalify x)))","user":"541df0b5e4b01498b1a71a86"},{"code":"(fn __ [coll]\n  (cons coll (lazy-seq (__ ((fn next-pacscal [coll]\n    (conj (loop [length (- (count coll) 1) \n                 i 0\n                 l [(first coll)]]\n            (if (< i length)\n              (recur\n               length\n               (inc i)\n               (conj l (bigint (+ (nth  coll i) (nth coll (inc i))))))\n              l))\n          (last coll))) coll )) ) ))","problem":147,"user":"509b152be4b0412cdea6eb1e"},{"code":"(fn f [x]\n  (letfn \n    [(ptri \n       [coll]\n       (loop [[a & b] coll\n              acc [a]]\n         (if-not (seq b)\n           (conj acc a)\n           (recur b (conj acc (+ (bigint a) (first b)))))))\n     (inf-ptri \n       [x]\n       (cons x (lazy-seq (inf-ptri (ptri x)))))]\n    (inf-ptri x)))","problem":147,"user":"51750cd4e4b07031762f2ee5"},{"problem":147,"code":"(fn my-pasc [v] \n  (let [nxt \n        (conj \n         (into [(first v)] (map #(+' (get v %) (get v (inc %))) (range (dec (count v))))) \n         (peek v))] \n    (lazy-seq (cons v (my-pasc nxt)))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":147,"code":"(fn pascal-triangle\n  [row]\n  (let [pairs (partition 2 1 row)\n        middle (map #(apply +' %) pairs)\n        next-row (conj (apply vector (first row) middle)\n                       (last row))]\n    (cons row\n      (lazy-seq (pascal-triangle next-row)))))","user":"504e71cbe4b0f6ff3350c4b3"},{"problem":147,"code":"(fn f\n         [a]\n         (let [l (for\n                     [i (range (inc (count a)))]\n                   (+' (if (> i 0) (nth a (dec i)) 0) (if (< i (count a)) (nth a i) 0))\n                   )]\n           (lazy-seq (cons a (f l))))\n         )","user":"57c7e7d9e4b05aa3c4741d0f"},{"code":"iterate\n(fn [r] \n  (mapv #(if (> %1 1000) (double (+ %1 %2)) (+ %1 %2)) (cons 0 r) (conj r 0)))","problem":147,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [ v ] (iterate \n             #(map (fn [[a b]]( +' a b)) \n             (partition 2 (concat [0] (interleave % %) [0] ))) v))","problem":147,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":147,"code":"(fn [v] (iterate (fn [xs] (map +'\n                               (concat [0] xs)\n                               (concat xs [0])))\n                 v))","user":"4fcf1755e4b03432b189f40c"},{"problem":147,"code":"(fn trapezoid [v]\n  (let [build (fn [v]\n                (let [prep (cons 0 (conj v 0))\n                      pairs (partition 2 1 prep)]\n                  (vec (map (partial apply +') pairs))))]\n    (iterate build v)))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":147,"code":"(fn [coll]\n  (iterate\n   (fn [xs]\n     (concat (vector (first xs))\n             (map #(apply +' %)\n                  (partition 2 1 xs))\n             (vector (last xs))))\n   coll))","user":"590b8607e4b047aa04b199db"},{"code":"(fn [r] (iterate #(flatten (vector (first %) (map (fn [[x y]] (+ (bigint x) y)) (partition 2 1 %)) (last %))) r))","problem":147,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn pt [x]\n    (letfn [\n      (plus [a b] (long (mod (+ (double a) (double b)) Long/MAX_VALUE)))\n      (ne [p] (vec (map plus (cons 0 p) (conj p 0))))\n      (ls [s] (cons s (lazy-seq (pt (ne s)))))] \n      (ls x)))","problem":147,"user":"50112acee4b0d82cfac69f4c"},{"problem":147,"code":"(fn trapezoid [in]\n  (let [f (first in)\n        l (last in)\n        mfn (fn [lst] (map #(apply +' %) (partition-all 2 (interleave lst (next lst)))))\n        res (concat [f] (mfn in) [l])]\n   \t(lazy-seq (cons in (trapezoid res)))))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":147,"code":"#(letfn [(tri [v]\n           (let [w `[0 ~@v 0]] (map +' w (rest w))))]\n   (iterate tri %))","user":"5b772ad7e4b047b03b2036e8"},{"code":"iterate\n       (fn foo [l]\n         (into []\n               (flatten\n                (conj []\n                      (first l)\n                      (remove nil? (map #(if (contains? l (+ % 1)) (+' (nth l %) (nth l (+ % 1)))) (range (count l))))\n                      (last l)))))","problem":147,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn pt [s1]                                                                                        \n  (lazy-seq                                                                                          \n   (let [s (seq s1)                                                                                  \n         snext (concat [(first s)] (map +' s (concat (rest s) [0])))]                                 \n     (cons s (pt snext) ))))","problem":147,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn [v] (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","problem":147,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [c] (iterate\n   #(cons (first %) (conj (vec (map + % (rest %))) (last %)))\n   c))","problem":147,"user":"4f01ff83535dcb61093f6a3a"},{"code":"#(iterate\n          (fn [[x & xs :as all]]\n            (flatten\n              [x\n               (map (partial apply +)\n                    (partition 2 1 all))\n               (last all)]))\n          % \n          )","problem":147,"user":"4dc537fd535d8a4b2fd74282"},{"problem":147,"code":"(fn test [start-row]\n  (letfn [(next-row [prev-row]\n                   (mapv +' (cons 0 prev-row) (conj prev-row 0)))]\n        (iterate next-row start-row)))","user":"571d9669e4b0145328a7627f"},{"problem":147,"code":"iterate #(into [] (map +' (conj % 0) (into [0] %)))","user":"56c08696e4b060a8e693e3aa"},{"problem":147,"code":"(fn [init-row] \n        (iterate\n         (fn [row] \n           (concat \n            [(first row)] \n            (map #(reduce +' %) (partition 2 1 row))\n            [(last row)]))\n         init-row))","user":"567476bde4b05957ce8c6139"},{"code":"(fn pascal [prev]\n  (lazy-seq (cons prev                  \n                  (pascal\n                   (into [] (flatten (list (get prev 0) (loop [i 0 acc '()]\n                                               (if (= i (dec (count prev)))\n                                                 (reverse acc)\n                                                 (recur (inc i)\n                                                        (cons (+' (get prev i) (get prev (inc i))) acc)))) (get prev (dec (count prev))))))))))","problem":147,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn pascal [coll]\n    (concat [coll] (lazy-seq (pascal (concat [(first coll)] (map (partial apply +') (partition 2 1 coll)) [(last coll)]))))\n    )","problem":147,"user":"53307da1e4b019098a6f8b5e"},{"problem":147,"code":"(fn fun [[x :as vec]]\n    (cons vec\n        (lazy-seq\n          (fun (into [] (concat [x] (map #(apply +' %) (partition 2 1 [0] vec)))))\n        )\n    )\n)","user":"5da20e73e4b000c986472be1"},{"problem":147,"code":"(fn pasc [s]\n  (lazy-seq (cons s (pasc \n                      (flatten [(first s)\n                              (map +' (butlast s) (rest s))\n                              (last s)])\n                    )\n            )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":147,"code":"(fn f [x]\n    (let [n (concat\n             [(first x)]\n             (map #(apply +' %) (partition 2 1 x))\n             [(last x)])]\n     (lazy-seq\n      (cons x (f n)))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn [w]\r\n  (iterate (fn [v]\r\n       (concat (list (first v))\r\n          (remove #(= (last v) %)\r\n            (map #(apply + %)\r\n              (interleave\r\n                (partition 2 v)\r\n                (partition 2 (concat (rest v) '(0))))))\r\n         (list (last v))\r\n         )) w))","problem":147,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(let [yaye (fn yay [y] (let [thelast (last y)] (seq (concat \n ((fn rrr [x]\n   (if (empty? x)\n     []\n     (if (empty? (rest x))\n       [(first x)]\n       (concat (rrr (drop-last x))\n               (list (+ (bigint (last x))\n                        (bigint (last (drop-last x)))))\n               ))))y) (list thelast)))))]\n(fn what [x]\n  (cons x (lazy-seq (what (yaye x))))))","problem":147,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn outer [coll]\n  (let [f (fn ccc [coll]\n  \t\t\t(let [step (fn step [coll]\n    \t\t\t\t\t(let [[f & r] (seq coll)]\n      \t\t\t\t\t\t(if r\n        \t\t\t\t\t\t(cons (+' f (first r)) (step r))\n        \t\t\t\t\t\t(cons f '()))))]\n  \t\t\t(cons (first coll) (step coll))))]\n    (lazy-seq\n        (cons coll (outer (f coll))))))","problem":147,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn pascal[more]\n  (let [nextarray\n        (fn [more]\n          (cond (nil? (first more)) [1]\n                :else\n                (concat \n                \t(map\n                       #(+' (first %) (second %))\n             \t\t   (partition 2 1 \n                                  (concat [0] more )\n                       )\n                     )\n                 \t [(last more)]\n                 )\n           )\n          )\n        ]\n        (iterate nextarray more)\n    )\n  )","problem":147,"user":"4fb03cf4e4b081705acca262"},{"problem":147,"code":"(letfn [(nxt [xs] \n          (map +' (conj (vec xs) 0) (cons 0 xs)))]\n  (fn [line]\n    (iterate nxt line)))","user":"5884e807e4b0f1effa3b76a6"},{"problem":147,"code":"(fn trap [row]\n  (let [next-row (fn [row] (map +' (cons 0 row) (conj row 0)))]\n    (lazy-seq\n     (cons row (trap (vec (next-row row)))))))","user":"5317d78ee4b08068f379ed63"},{"problem":147,"code":"(fn pascal-lazy-seq [currow] (let [tmp \n\t\t                                  (loop [[cur next & others] currow \n\t\t                                         xs2 []]\n\t\t                                    (if next \n\t\t                                      (recur (conj others next) (conj xs2 (+' cur next)))\n\t\t                                      xs2))\n\t\t                                  arow (cons (first currow) \n                                               (concat tmp \n                                                         (cons (last currow) [])))]\n                                (cons currow (lazy-seq (pascal-lazy-seq arow)))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":147,"code":";;Hello Tteacher, this few last ones I had to look for them, I didn't want to put them as my own creation so if you don't want to consider them its fine,\n;;  I do hope that we can discuss them in class.\n\n(fn [row]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) row))","user":"5f8497dce4b0375e81f54e74"},{"problem":147,"code":"#(\n   iterate\n   (fn [s] (map\n    (fn [c](apply + c))\n    (partition 2 1\n     (concat [0N] s [0N])\n    )\n   ))\n   %\n )","user":"54c8eb61e4b045293a27f658"},{"problem":147,"code":"(fn [x]\n  (iterate #(map +'\n                 (concat [0] %)\n                 (concat % [0])) x))","user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn pascal-trapezoid[x](lazy-seq (if (= 1 (count x))\n                                     (cons x (pascal-trapezoid (vec (repeat 2 (first x)))))\n                                     (cons x (pascal-trapezoid (conj (vec (cons (first x) (vec (map #(apply +' %) (partition 2 1 x))))) (last x))))\n                                     )))","problem":147,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"iterate\n(fn [row]\n(map #(apply + %)\n(apply map vector [(conj (seq row) 0) (conj (vec row) 0)])))","problem":147,"user":"4e823ed7535db62dc21a62c7"},{"problem":147,"code":"#((fn pascal-triangle [xs]\n    (if (< 8 (count xs))\n      xs\n    (lazy-seq (cons xs (pascal-triangle (concat [(first xs)] (map + xs (next xs)) [(last xs)])))))) %)","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn pascal [row]\n  (lazy-seq (cons row\n                  (pascal (conj (vec (cons (first row)\n                                           (map (partial apply +) (partition 2 1 row))))\n                                (last row))))))","problem":147,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":147,"code":"(fn next-row [row]\n  (let [row' (concat (list (first row))\n                     (map #(+' %1 %2) row (rest row))\n                     (list (last row)))]\n       (lazy-seq (cons row (next-row row')))))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"#(iterate\n  (fn [b]\n    (vec (map +' (cons 0 b) (conj b 0)))) %)","problem":147,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn[a](iterate #(map (partial apply +')(partition 2 1(concat [0] % [0])))a))","problem":147,"user":"4db92654535d1e037afb21a0"},{"code":"(fn [m] ((fn r [v] (cons v (lazy-seq (r ((fn f ([v] (f (conj v 0) 0 [])) ([v l acc] (if (empty? v) acc (f (rest v) (first v) (conj acc (+ l (first v))))))) v))))) (into [] (map #(bigint %) m))))","problem":147,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn [x] (map (fn [y] ( \n\t(fn f1 [j k] \n\t\t(\n\t\t\tif (= k 0) j (f1 (into [] (map (fn [w] (+ (first w) (second w))) (partition 2 (interleave (conj j 0N) (cons 0N j))))) (dec k))\n\t\t)\n\t) x y\n) ) (range)) )","problem":147,"user":"5296008fe4b02ebb4ef7502a"},{"problem":147,"code":"(fn [start] (iterate  (fn [coll]\n                                (->> coll\n                                     (apply vector)\n                                     (#(conj % 0))\n                                     (cons 0)\n                                     (partition 2 1)\n                                     (map (fn [x] (apply +' x))))) start))","user":"53ed6976e4b0d648e757f4c4"},{"problem":147,"code":"iterate\n  (fn [xs]\n    (map (partial apply +')\n         (partition 2 1 (concat [0] xs [0]))))","user":"544e5b22e4b0e39780006983"},{"problem":147,"code":"(fn [v] (let [zero-pad (fn [v] (concat [0] v [0]))\n                next-trapezoid (fn [v]\n                                 (->> v\n                                      zero-pad\n                                      (partition 2 1)\n                                      (map (partial apply +'))))]\n            (iterate next-trapezoid v)))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":147,"code":"(fn ! [r]\n  (cons r (lazy-seq (! (concat [(first r)] (map +' r (rest r)) [(last r)])))))","user":"4f85a75ce4b033992c121c48"},{"code":"(fn [x] (iterate #(concat (cons (first %) (map (partial apply +) (partition 2 1 %))) [(last %)]) x))","problem":147,"user":"4ede8789535d10e5ff6f5337"},{"problem":147,"code":"(fn pascal\n  [coll]\n  (cons coll\n        (lazy-seq (pascal (concat (list (first coll))\n                             (map +' (rest coll) (drop-last coll))\n                             (list (last coll))\n                             )))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":147,"code":"(fn [coll]\n  (letfn [(pascal [line]\n                  (apply vector \n                    (map +' \n                         (conj line 0)\n                         (cons 0 line))))]\n    (iterate #(pascal %) \n             coll)))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn [start] (iterate (fn [row] (map (partial apply +') (partition 2 1 (concat [0] row [0])) )) start))","problem":147,"user":"51e28063e4b08e53a149f0f2"},{"problem":147,"code":"iterate (fn [l]\n                    (if (= [1] l)\n                      [1 1]\n                      `[~(first l) ~@(map (fn [[a b]] (+' a b)) (partition 2 1 l)) ~(last l)]))","user":"58b86162e4b0ebc645576d97"},{"code":"(fn [coll]\n  (letfn [(pascal-s-triangle-coll\n  [coll]\n  (cons coll \n          (lazy-seq (pascal-s-triangle-coll \n            (vec \n              (map (fn [[x y]] (+' x y)) \n                   (partition 2 1 (conj (vec (cons 0 coll)) 0))))))))]\n    (pascal-s-triangle-coll coll)\n    ))","problem":147,"user":"52fcfeeee4b047fd55837027"},{"problem":147,"code":"(fn pascal [v]\n     (letfn [(new-v [s] (vec (concat [(first s)]\n                (map +' s (rest s))\n                [(last s)]\n                )))]\n       (iterate new-v v)))","user":"5c950334e4b048ec896c5a44"},{"problem":147,"code":"(fn [s]\n (iterate\n  (fn [s] (concat [(first s)] (map #(reduce +' %) (partition 2 1 s)) [(last s)]))\n  s))","user":"553b0d95e4b09218d5f44fff"},{"code":"(fn [v] (iterate (fn [u] (vec (map +' (cons 0 u) (conj u 0)))) v))","problem":147,"user":"517945dce4b0684c1c981a43"},{"code":"(fn pascals [row]\n  (iterate (fn nextrow [x] \n  (vec (concat \n          (take 1 x) \n          (map \n           #(apply +' %) \n           (partition 2 1 x)) \n          (take-last 1 x))))\n           row))","problem":147,"user":"520a86fee4b01da9d47a99de"},{"code":"(fn f [coll]\n    (let [data (cons\n                (first coll)\n                (map +' coll (conj (vec (rest coll)) 0)))]\n      (cons coll (lazy-seq (f data)))))","problem":147,"user":"506c0a02e4b0eda3100c090d"},{"problem":147,"code":"(fn pascalTrap [vs]\n  (let [next-row (fn [x]\n                   (let [x1 (concat [0] x)\n                         x2 (concat x [0])]\n                     (map +' x1 x2)))]\n    (iterate next-row vs)))","user":"547ad587e4b0c51c1f4d72ce"},{"code":"(fn pasc [v]\r\n  (letfn [(f [v]\r\n             (let [[x y] (reduce\r\n                           (fn [[acc prev] x]\r\n                             [(conj acc (+' prev x)) x])\r\n                           [[] 0]\r\n                           v)]\r\n               (conj x y)))]\r\n      (iterate f v)))","problem":147,"user":"4dc97aec535d5973398f9284"},{"code":"(fn t [n]\n  (lazy-seq\n   (cons n\n         (t (map +' (cons 0 n) (concat n [0]))))))","problem":147,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn [v] (iterate (fn [x] (vec (map #(apply + %) (partition 2 1 (map bigint (concat [0] x [0])))))) v))","problem":147,"user":"50563ae2e4b0ce54f56f0405"},{"problem":147,"code":"(fn  pascal-trapezoid\n  [s]\n  (letfn [\n          (add-columns\n            [s fst lst]\n            (into [] (concat [fst] s [lst]))\n            )\n          (trr\n            [s]\n            (add-columns (map #(apply +'  %) (partition 2 1 s )) (first s) (last s))\n            )\n          ]  \n    (cons s (lazy-seq (pascal-trapezoid (trr s))))))","user":"51f81925e4b09be9c177e526"},{"code":"(fn [y]\n   (iterate \n    (fn [x]\n      (if (= (count x) 1)\n        (repeat 2 (first x))\n        (concat\n         [(first x)]\n         (map\n          (fn [n] (+ (bigint (nth x n)) (nth x (inc n))))\n          (range (dec (count x)))\n          )\n         [(last x)]\n         )\n        )\n      )\n    y\n    )\n   )","problem":147,"user":"52586d24e4b0cb4875a45cb0"},{"code":"#(iterate (fn [x] (concat (take 1 x)\n                           (map +' x (rest x))\n                           (take-last 1 x))) %)","problem":147,"user":"5006b7d2e4b0678c553fc48c"},{"problem":147,"code":"(fn [sq]\n  (iterate #(vec (map +' (cons 0 %)\n                         (conj % 0))) sq))","user":"55380eeae4b09218d5f44fd9"},{"problem":147,"code":"(fn Pascal [xs]\n          (iterate #(concat (vector (first %))\n                            (map  +' % (next %))\n                            (vector (last %)))\n                   xs))","user":"58c4492be4b021aa9917ed27"},{"problem":147,"code":"iterate (fn pascal\n          [xs]\n          (let [first-element (first xs)\n                partitioned   (partition-all 2 1 xs)]\n            (cons first-element (map #(if (= 1 (count %))\n                                        (first %)\n                                        (apply +' %))\n                                     partitioned))))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"problem":147,"code":"(fn [v] (iterate (fn [x] (map #(apply +' %) (partition 2 1 (lazy-cat [0] x [0])))) v))","user":"530bf87ee4b02e82168697d5"},{"problem":147,"code":"iterate (fn [s]\n  \t(if (next s)\n      (do\n      (vec (flatten \n   \t\t  [(first s) \n    \t   (map #(apply +' %) (partition 2 1 s)) \n    \t   (last s)]))\n      )\n      (vec (flatten (vector s s)))))","user":"532a033be4b09d4e7a9b551f"},{"code":"(fn [r] (iterate #(map (fn [c1 c2] (+ 0N c1 c2)) (concat % (list 0)) (cons 0 %)) r))","problem":147,"user":"5125745ae4b05d10e3e395f9"},{"code":"iterate #(concat (map + (concat [0] %)\n                        (concat % [0])))","problem":147,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":147,"code":"(fn pascal [row]\n  (let [partitions (partition 2 1 (cons 0 (conj row 0)))\n        next-row (apply vector (map (partial apply +') partitions))]\n  (lazy-seq (cons row (pascal next-row)))))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"#(iterate (fn [x]\n  (conj (vec (cons (first x) (vec (map +' x (rest x))))) (last x))) %)","problem":147,"user":"4ef992c8535dced4c769f268"},{"code":"(fn tr [xs]\n  (cons xs (lazy-seq\n            (tr (concat [(first xs)] (map +' xs (rest xs)) [(last xs)])))))","problem":147,"user":"4ea365e2535d7eef308072c5"},{"problem":147,"code":"iterate #(map +' (concat [0] %1) (concat %1 [0]))","user":"541096bde4b01498b1a719b2"},{"problem":147,"code":"(fn pt [x] (lazy-seq (cons x (pt (vec (map + (cons 0N x) (conj x 0N)))))))","user":"59e0f38ae4b08badc2a0c500"},{"code":"#(iterate (fn p2 [x] (let [l (last x)] (vec (concat [(first x)] (map (fn [xs] (apply + (map bigint xs))) (partition 2 1 x)) [l])))) %)","problem":147,"user":"50733b31e4b0e3170b5a869a"},{"problem":147,"code":"(fn pascal-trapezoid [s]\n  (let [s' (concat [(first s)] (map (partial apply +') (partition 2 1 s)) [(last s)])]\n    (lazy-seq (cons s (pascal-trapezoid s')))))","user":"5f300f28e4b033932238a682"},{"problem":147,"code":"(fn [row]\n  (letfn [(next-pascal [coll]\n            (map (partial apply +')\n                 (partition 2 1 (concat '(0) coll '(0)))))]\n    (iterate next-pascal row)))","user":"55702081e4b09a3098a52529"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [prev]\n             (list* (first prev) (map #(apply +' %) (partition-all 2 1 prev))))\n           v))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn [st]\n  (let [st (map bigint st)]\n  (iterate #(map + (concat % (list 0)) (concat (list 0) %)) st)))","problem":147,"user":"50645e12e4b007509339a58a"},{"code":"(partial iterate\n  (fn pascal\n    ([v] (pascal v (vector (first v))))\n    ([[a & bs] new-vec]\n      (if (seq bs)\n        (recur bs (conj new-vec (+ (bigint a) (first bs))))\n        (conj new-vec a)))))","problem":147,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"iterate\n#(map +' (cons 0 %) (conj (vec %) 0))","problem":147,"user":"53460d02e4b084c2834f4a39"},{"problem":147,"code":"(fn pascal\n  [coll]\n  (let [f (fn [c] (map #(apply +' %) (partition 2 1 (cons 0 (conj (vec c) 0)))))]\n    (iterate f coll)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":147,"code":"(fn problem-147 [start]\n  (iterate\n    (fn [xs]\n      (map +'\n           (concat [0] xs)\n           (concat xs [0]))\n      )\n    start))","user":"56ac81ace4b03c432f187347"},{"problem":147,"code":"(fn ans-147 [arr]\n  (cons arr\n   (lazy-seq\n         (ans-147\n          (reduce concat\n                  [(first arr)]\n                  (map-indexed\n                   (fn [index item]\n                     (if (< index (- (count arr) 1))\n                       [(+' item (nth arr (+ 1 index)))]\n                       [(last arr)]))\n                   arr))))))","user":"608fac60e4b03bd49d9f36c7"},{"code":"(fn pt [s] \n  (cons s (lazy-seq (pt (concat [(first s)] (map #(apply +' %) (partition 2 1 s)) [(last s)])))))","problem":147,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn trapezoid [prev]\n  (iterate (fn [row]\n             (map #(apply +' %)\n                  (partition 2 1 (concat [0] row [0]))))\n           prev))","problem":147,"user":"5290257ae4b0239c8a67af03"},{"code":"(fn f [x]\n         (lazy-seq (cons x (f (map #(+' (first %) (second %)) (partition 2 1 (concat [0] x [0])))))))","problem":147,"user":"4dae0510c9a9d6ed4b99dc57"},{"problem":147,"code":"(fn pascals-trapezoid\n  [coll]\n  (cons coll (lazy-seq\n              (pascals-trapezoid (reduce (fn add-consecutive\n                                           [cur nxt]\n                                           (if (coll? cur)\n                                             (conj (if (empty? (rest cur))\n                                                     cur (vec (drop-last cur)))\n                                                   (+' (last cur) nxt) nxt)\n                                             [(+' cur nxt) nxt]))\n                                         (concat [0] coll))))))","user":"550001d0e4b07d26eda61d57"},{"code":"iterate (fn [b] (map #(apply +' %) (partition 2 1 `[0 ~@b 0])))","problem":147,"user":"52d7a930e4b09f7907dd1379"},{"problem":147,"code":"(fn pascalTrap [row]\n  (lazy-seq\n   (letfn [(nextrow [thisrow]\n            (cons (first thisrow)\n                  (conj \n                   (into []\n                         (map (fn [a b] (+' a b))\n                              thisrow\n                              (rest thisrow)))\n                   (last thisrow)\n                   )))]\n    (cons row (pascalTrap (nextrow row))))))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn p [v]\n    (lazy-seq (cons v (p (map +' (concat v [0]) (cons 0 v))))))","problem":147,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn p-trap [coll]\n  (letfn [(makeit [c]\n            (lazy-seq \n              (if (empty? (rest c))\n                c\n                (cons (+ (first c) (second c)) (makeit (rest c))))))]\n    (cons coll (lazy-seq (p-trap (cons (first coll) (makeit coll)))))))","problem":147,"user":"4f04d312535dcb61093f6be7"},{"problem":147,"code":"(fn\n  trapezoid\n  [coll]\n  (->>\n    (cons\n      (-> coll first list)\n      (->> coll (partition-all 2 1 ,,,)))\n    (map #(reduce +' %) ,,,)\n    trapezoid\n    (cons coll ,,,)\n    lazy-seq))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn pascal-seq [start-row]\n  (letfn [(pascal-next-row [previous-row]\n            (vec (map #(+' (nth previous-row (-' % 1) 0) (get previous-row % 0))\n                      (range (+' (count previous-row) 1)))))\n          (pascal-seq [start-row]\n            (lazy-seq (cons start-row (pascal-seq (pascal-next-row start-row)))))]\n    (pascal-seq start-row)))","problem":147,"user":"4ff355a1e4b0678c553fc34d"},{"problem":147,"code":"iterate (fn [x] (map (partial reduce +') (partition 2 1 (concat [0] x [0]))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"iterate #(map  +' `[0 ~@%] `[~@% 0])","problem":147,"user":"4e7dfab0535db169f9c796f9"},{"problem":147,"code":"#(iterate (fn [d] (loop [[a & z] d\n           r [a]]\n      (if z\n        (recur z (conj r (+' a (first z))))\n        (conj r (last d))))) %)","user":"591e0782e4b09b4ee5954c25"},{"problem":147,"code":"(fn trapezoid\n  [xs]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) xs))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn g [ll]\n    (let [u (fn [l]\n    (vec (map + (conj l 0) (cons 0 l))))]\n     (iterate u ll)))","problem":147,"user":"4f04a06d535dcb61093f6bd9"},{"problem":147,"code":"(fn trapezoid [inVec]\n  (let [start (first inVec)\n        end (last inVec)]\n     (iterate #(concat [start] (map +' % (drop 1 %)) [end]) inVec)))","user":"559454f2e4b0c79f6e1db952"},{"problem":147,"code":"(fn pascals-seq\n  [seq]\n  (lazy-seq (cons seq (pascals-seq ((fn\n  [seq]\n  (loop [seq seq newseq (vector (first seq))]\n    (if (>= (count seq) 2)\n      (recur (rest seq) (conj newseq (+' (second seq) (first seq))))\n      (conj newseq (first seq))))) seq))))\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":147,"code":"(fn pascal\n  [prev-row]\n  (let [new-row (concat [(first prev-row)] (map +' (rest prev-row) (butlast prev-row)) [(last prev-row)])]\n  (cons prev-row (lazy-seq (pascal new-row)))))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":147,"code":"(fn it [xs]\n  (let [add (fn [xs] (map +' xs (rest xs)))\n        xs+ (concat [(first xs)] (add xs) [(last xs)])]\n    (lazy-seq (cons xs (it xs+)))))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn t [v] \n          \n           (let [r (map +' (conj v 0) (cons 0 v))]\n             (cons v (lazy-seq (t (vec r))))\n           ))","problem":147,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [r]\n          (let [next-pascal (fn next-pascal [[a & rest]]\n                              (if (nil? rest)\n                                (list a)\n                                (cons (bigint (+ a (first rest))) (next-pascal rest))))]\n            (iterate #(cons (first %) (next-pascal %)) r)))","problem":147,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [v] \n  (iterate \n   (fn [v1] (->> (flatten [0 v1 0]) \n                 (partition 2 1) \n                 (map #(apply + %)))) v))","problem":147,"user":"4e0e0529535d04ed9115e7b9"},{"problem":147,"code":"(fn r [start]\n  (let [prow (fn [row]\n               (into []\n                     (flatten [(first row)\n                               (map +'\n                                    (butlast row)\n                                    (rest row))\n                               (last row)])))\n        v (prow start)]\n    (lazy-seq (cons start\n                    (r v)))))","user":"50981062e4b04e098a4c7268"},{"code":"(fn zoid [sq]\n  (cons\n    sq\n    (lazy-seq\n      (zoid\n        (map\n          #(cond\n             (= % 0) (first sq)\n             (= % (count sq)) (last sq)\n             :else (+' (nth sq %) (nth sq (dec %))))\n          (-> sq count inc range))))))","problem":147,"user":"504e12ade4b078edc5f593b7"},{"problem":147,"code":"iterate (fn [z] ((fn [y] (map +' (conj (apply list y) 0) (conj (vec y) 0))) z))","user":"54db3d82e4b024c67c0cf75f"},{"problem":147,"code":"(fn trapezoid [s]\n  (let [next-row (fn next-row [s]\n                   (->> (concat [0] s [0])\n                        (partition 2 1)\n                        (map #(apply +' %))))]\n\n      (concat [s] (lazy-seq (trapezoid (next-row s))))))","user":"5bbbce60e4b0a20761a2360e"},{"code":"(fn [xs]\n  (iterate #(conj (mapv + % (concat '(0) %)) (last %)) (map bigint xs)))","problem":147,"user":"525078b6e4b0541d1855b832"},{"problem":147,"code":"(fn pascal-trap\n  [row]\n  (let [earmuffs (fn [coll e] (concat [e] coll [e]))]\n    (lazy-seq (cons row (pascal-trap (map #(apply +' %) (partition 2 1 (earmuffs row 0))))))))","user":"5609d328e4b05f002753deee"},{"problem":147,"code":"(fn [r]\n    (let [next-row (fn [r]\n                     (concat [(first r)] (map (partial apply +') (partition 2 1 r)) [(last r)]))]\n      (iterate next-row r)))","user":"5501a1e1e4b07d26eda61d75"},{"code":"(fn [v]\n  (iterate #(vec (map + (cons 0 %)(conj % 0))) v))","problem":147,"user":"4e599577535d8a8b8723a29f"},{"problem":147,"code":"(fn tri [seq]\n    (lazy-seq (cons seq (tri ((fn tri\n                            ([[f & rest :as seq]] (if (empty? rest) (vector f f) (tri seq (vector (first seq)))))\n                            ([[a b & seq] res]\n                             (if (empty? seq)\n                               (conj (conj res (+' a b)) b)\n                               (tri (cons b seq) (conj res (+' a b)))\n                               ))) seq)))))","user":"5e980583e4b0157ca96647d5"},{"code":"(fn pascal [row]\n              (cons row\n                    (lazy-seq (pascal (for [i (range (inc (count row)))]\n                                        (+' (nth row (dec i) 0)\n                                            (nth row i 0)))))))","problem":147,"user":"53838742e4b06839e8705ee0"},{"code":"(fn pascal [p]\n  (cons p\n    (lazy-seq (let [pp (concat [0N] p [0N])]\n      (pascal (map #(+ (nth pp (inc %)) (nth pp %))\n           (range (inc (count p)))))))))","problem":147,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn pascal [v]\n  (iterate\n    (fn [v]\n      (let [ft (first v)\n            lt (last v)\n            sq (map #(+' (first %) (second %)) (partition 2 1 v))]\n        (conj (vec (cons ft sq)) lt)))\n    v))","problem":147,"user":"5300158ae4b0d8b024fd370f"},{"problem":147,"code":"(fn pas-trap [r]\n  (let [padded (conj (into [0] r) 0)\n        next-row (map (partial apply +') \n                      (partition 2 1 padded))]\n    (cons r (lazy-seq\n                    (pas-trap next-row)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":147,"code":"iterate (fn [v] (map +' (concat v [0]) (concat [0] v)))","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn pasc-seq\n  [start-seq]\n  (lazy-seq (cons start-seq (pasc-seq (map #(reduce +' %1) (partition 2 1 (conj (into [0] start-seq) 0)))))\n    ))","problem":147,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn pascals-trapezoid [input]\n    (let [trap (fn [in]\n                 (let [padded (vec (conj (flatten (conj in 0)) 0))]\n                   (for [n (range (dec (count padded)))]\n                     (+' (padded n) (padded (inc n))))))\n          ]         \n                 \n    (cons input (lazy-seq (pascals-trapezoid (trap (vec input)))))))","problem":147,"user":"51622fb8e4b009fba0926e3f"},{"code":"(fn pascal-trapezoid [coll]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) coll))","problem":147,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":147,"code":"(fn [i]\n  (letfn [(next-row [r] (map #(apply +' %) (partition 2 1 [0] (cons 0 r))) )]\n    (iterate next-row i)))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq (cons\n              row\n              (pascal (map +' (concat '(0) row) (concat row '(0)))))))","user":"5a54e3c4e4b05d388ecb6c30"},{"problem":147,"code":"iterate (fn pascal [xs]\n          (conj (vec (cons (first xs)\n                           (map (partial apply +')\n                                (partition 2 1 xs))))\n                (last xs)))","user":"55d68726e4b0e31453f64a99"},{"code":"(fn seq-pascal [xs]\n  (letfn [(gen-pascal\n            ([xs]\n               (cond\n                (empty? xs) xs\n                (= 1 (count xs)) (repeat 2 (first xs))\n                :else (gen-pascal 0 xs)))\n            ([x xs]\n               (if (empty? xs)\n                 [x]\n                 (cons (+ x (first xs))\n                       (gen-pascal (first xs) (rest xs))))))]\n    (iterate gen-pascal xs)))","problem":147,"user":"4ef6f5ea535dced4c769f250"},{"code":"iterate #(mapv + (conj % 0N) (concat [0] %))","problem":147,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn pseq [n]\n   (cons n (lazy-seq (pseq  (map +' (concat [0] n) (concat n [0])))))\n  )","problem":147,"user":"5124619ae4b02c3f2a072ccd"},{"problem":147,"code":"(fn [init]\n  (iterate\n    (fn [xs] (vec (map +' (conj xs 0) (into [0] xs))))\n    init))","user":"4ff769bce4b0678c553fc38f"},{"problem":147,"code":"iterate #(let [x (map bigint %)] \n           (concat (list (first x)) (map + x (rest x)) (list (last x))))","user":"57d0e185e4b0bd073c202360"},{"problem":147,"code":"(partial iterate\n         (fn [coll]\n           (concat [(first coll)] (map +' coll (rest coll)) [(last coll)])))","user":"5a95c639e4b0d174b936c75e"},{"problem":147,"code":"(fn [init-seq](iterate #(map +' `[0 ~@%] `[~@% 0]) init-seq))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":147,"code":"(let [derive-row\n      (fn [row]\n        (loop [[f s :as row] row, result [f]]\n          (if (nil? s)\n            (conj result f)\n            (recur (rest row) (conj result (+' f s))))))]\n  (fn [initial-row]\n    (iterate derive-row initial-row)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn [c] (iterate #(map + (cons 0 %) (conj (vec %) 0)) c))","problem":147,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn pasical\n  [x]\n  (let [nxt (fn inner [y]\n                 (if (= (count y) 1) []\n                   (conj (inner (rest y)) (+ (bigint (first y)) (second y)))))]\n    (cons x (lazy-seq (pasical (nxt (into (into [0] (reverse x)) [0])))))))","problem":147,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn pt [xs]\n  (lazy-seq\n    (let\n      [r (map + (cons 0 xs) (concat xs [0]))]\n      (cons xs (pt r)))))","problem":147,"user":"4f1b92d1535d64f60314647b"},{"problem":147,"code":"(fn trapesoid [row]\n  (lazy-seq\n   (cons row\n         (trapesoid (mapv (fn [idx]\n                           (cond\n                             (zero? idx) (first row)\n                             (= (count row) idx) (last row)\n                             :else (+' (row (dec idx)) (row idx))))\n                         (range (inc (count row))))))))","user":"5658d775e4b00d3155796114"},{"code":"iterate #(vec (map (partial apply +) (partition 2 1 (cons 0 (conj % 0)))))","problem":147,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"#(iterate\n    (fn[s]\n        (vec\n            (for [i (range -1 (count s)) :let [j (inc i)]]\n                (bigint (+ (get s i 0) (get s j 0)))))) %1)","problem":147,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn pseq [coll]\r\n(iterate (fn [row] (concat [(first coll)] (map + (rest row) (drop-last row)) [(last coll)])) (map biginteger coll)))","problem":147,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn [v]\n  (iterate (fn [t] (map (fn [[a b]] (+' a b)) (partition 2 1 (concat [0] t [0]))))\n           v))","problem":147,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":147,"code":"(fn [row]\n  (letfn [(next-row [prev-row]\n                    (->> (conj (into [0] prev-row) 0)\n                         (partition 2 1)\n                         (map #(reduce +' %))\n                         (into [])\n                         ))]\n    (->> row (iterate next-row))\n    )\n  )","user":"60752ef6e4b069485764de55"},{"code":"(fn pt[xs]  \n  (iterate #(concat [(first %)] (map (partial apply +')(partition 2 1 %)) [(last %)]) xs))","problem":147,"user":"506406c8e4b075d771da6f9f"},{"problem":147,"code":"(fn pascalTrapSeq [xs]  \n (letfn \n   [(nextPascalTrap [xs]\n      (let [first_ (first xs)\n            last_ (last xs)]\n        (concat [first_] (map +' xs (rest xs)) [last_])))]\n   (lazy-cat [xs] (pascalTrapSeq (nextPascalTrap xs)))))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [x]\n\t(let [pas (fn [f] (concat (list (first f)) (map (partial apply +') (partition 2 1 f)) (list (last f))))]\n\t\t(iterate pas x)))","problem":147,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn [inp]\n  (letfn [(calc [[v & xs]]\n            (if (nil? xs) [v]\n              (concat [(+' (first xs) v)] (calc xs))))]\n    (let [next-row (comp flatten (juxt first calc))]\n      (iterate next-row inp))))","problem":147,"user":"4fc93728e4b0ee37620e1844"},{"code":"(fn t [r] (let [n (concat [(first r)] \n                  (map #(apply + %) (partition 2 (interleave r (rest r)))) \n                  [(last r)])]\n          (cons r (lazy-seq (t n)))))","problem":147,"user":"4fa30027e4b081705acca187"},{"code":"(fn pt2 [col]\n  (let [pt1 (fn [s]\n               (concat (for [i (range (count s))]\n                 (if\n                   (= i 0)\n                   (first s)\n                   (bigint (+\n                             (nth s (dec i))\n                             (nth s i)\n                            )\n                   ))) (list (last s))))]\n  (cons col (lazy-seq (pt2 (pt1 col))))\n    ))","problem":147,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":147,"code":"(fn [init]\n  (letfn [(psum [col]\n  \t\t    (let [a (first col)\n  \t\t\t      b (last col)]\n  \t\t\t  (conj (vec (cons a (map +' (next col) col))) b)))\n          (plazy [init]\n            (lazy-seq\n              (cons init (plazy (psum init)))))]\n    (plazy init)))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"(fn pascal-triangle [v] (let [u (apply vector 0 v) w (conj v 0)] (cons v (lazy-seq (pascal-triangle (vec (map (comp bigint +) u w)))))))","problem":147,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":147,"code":"(fn __\n  ([se] (cons se (__ se 0)))\n  ([se x]\n    (let [\n          nex (vec (map +' (conj se 0) (cons 0 se)))\n          ]\n      (lazy-seq (cons nex (__ nex 0))))))","user":"58bc6a88e4b0888cdc949d16"},{"code":"#(iterate\n  (fn [c] \n    (concat (map + (cons 0 c) c) [(last c)])) %)","problem":147,"user":"4eeaf88f535d93acb0a668a3"},{"problem":147,"code":"(fn pascal-trapeziod [l]\n  (iterate\n   (fn [x]\n     (concat [(first x)]\n             (map #(+' %1 %2) x (rest x))\n             [(last x)]))\n   l))","user":"5c2836ebe4b07e362c2305d4"},{"code":"(fn gen [v] \n  (letfn [(gen-row [v] (map + (cons 0N v) (concat v [0N])))]\n    (lazy-seq (cons v (gen (gen-row v))))))","problem":147,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":147,"code":"(fn pascals-trapezoid [coll]\n  (let [coll-count (count coll)\n        coll' (mapv #(cond (zero? %1) (first coll)\n                           (= coll-count %1) (last coll)\n                           :else (+' %2 (nth coll (dec %1))))\n                    (range (inc coll-count))\n                    (conj coll 0))]\n    (lazy-seq (cons coll (pascals-trapezoid coll')))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":147,"code":"(fn pascals_trapezoid [initial_xs]\n    (iterate (fn [xs] (vec (cons (first xs) (map +' (rest (conj xs 0)) xs)))) initial_xs)\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":147,"code":"(fn p[x]\n  (lazy-cat [x] (p (vec(map +' (conj x 0) (cons 0 x))))))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn [z] (iterate\n          (fn [[x & xs :as all]]\n            (flatten\n              [x\n               (map (partial apply #(+ (bigint %1) (bigint %2)))\n                    (partition 2 1 all))\n               (last all)]))\n          z))","problem":147,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn [a] \n  (iterate \n    (fn [c] \n      (map #(reduce + %) (partition 2 1 `(0 ~@c 0))))\n    a))","problem":147,"user":"4ee6400c535d93acb0a6685b"},{"code":"(partial iterate (fn [c] (map #(apply + %) (partition-all 2 1 (cons 0 c)))))","problem":147,"user":"4fb2101ce4b081705acca284"},{"problem":147,"code":"(fn trapezoid [coll]\n  (lazy-seq (cons coll\n                  (trapezoid (mapv +'\n                                   (conj coll 0)\n                                   (conj (seq coll) 0))))))","user":"58637f03e4b0f14aab7c881e"},{"code":"iterate #(map + (concat [0] %) (concat % [0]))","problem":147,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(let [next (fn [row]\n             (conj (vec (conj (map +' (rest row) (butlast row)) (first row))) (last row))\n             )]\n  (fn this [coll]\n    (cons coll (lazy-seq (this (next coll))))))","problem":147,"user":"4ec12577535dfed6da9c6da8"},{"problem":147,"code":"(fn [row]\n  (iterate\n    #(vec (map +'\n               (conj % 0)\n               (cons 0 %)))\n    row))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [xs]\n  (iterate #(vec (flatten [(first %)\n                           (for [[x y] (partition 2 1 %)] (+' x y))\n                           (last %)]))\n           xs))","problem":147,"user":"52ab51c4e4b0c58976d9ac73"},{"problem":147,"code":"(fn [s] (iterate #(into [] (map +' (conj % 0) (cons 0 %))) s))","user":"53e4b5a3e4b036ad0777e44b"},{"problem":147,"code":"iterate (comp (partial apply map +') \n              (juxt (partial cons 0) \n                    (comp reverse (partial cons 0) reverse)))","user":"55cdc576e4b0e31453f64a1f"},{"problem":147,"code":"(fn pt [v]\n              (lazy-seq (cons v (pt (apply map +' [(concat v [0]) (cons 0 v)])))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":147,"code":"(fn f [l] \n   (lazy-seq \n    (cons l (f (into [] (concat \n                      (take 1 l) \n                      (reduce #(conj %1 (apply +' %2)) [] (partition 2 1 l))\n                      (take-last 1 l)))))))","user":"5b59d176e4b02d533a91bd86"},{"problem":147,"code":"(fn pascal-trapezoid \n  [vect]\n  (lazy-seq\n    (let\n      [res (map (partial + 0N) (cons 0 vect) (concat vect [0]))]\n      (cons vect (pascal-trapezoid  res)))))","user":"57f8153de4b0d3187e900916"},{"code":"iterate (fn [coll] (cons\n\t(first coll)\n\t(concat\n\t\t(map\n\t\t\t#(+ (bigint (first %1)) (bigint (second %1)))\n\t\t\t(partition 2 1 coll))\n\t\t(list (last coll)))))","problem":147,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":147,"code":"(fn  [start-vec]\n\n  (let [next-vec\n        (fn [old-row]\n          (loop [new-row (vec\n                          (concat [(first old-row)]\n                                  (take (dec (count old-row))\n                                        (repeat 0))\n                                  [(last old-row)]))\n                 index 1]\n\n            (if (= index (dec (count new-row)))\n              new-row\n\n              (recur\n               (assoc new-row index\n                      (+' (old-row (dec index))\n                          (old-row index)))\n               (inc index)))))]\n  \n  (iterate next-vec start-vec)))","user":"59971dcbe4b07157cc8daacb"},{"problem":147,"code":"(fn pt [v]\n    (lazy-seq\n      (cons v (pt (vec (map (partial apply +') (partition 2 1 (cons 0 (conj v 0)))))))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":147,"code":"(fn pt [row]\n                (let [sum-as-pairs (fn sum-fn [[i & others]]\n                                     (let [j (first others)]\n                                       (if (and i j)\n                                         (let [summed (+' i j)\n                                               more (if others\n                                                      (lazy-seq (sum-fn others))\n                                                      '())]\n                                           (cons summed more))\n                                         '())))\n                      next-row (vec (concat (list (first row))\n                                            (sum-as-pairs row)\n                                            (list (last row))))]\n                  (lazy-seq (cons row\n                                  (pt next-row)))))","user":"57f904c5e4b0d3187e900936"},{"problem":147,"code":"(fn g [x] (iterate \n                    #(reverse \n                       (conj \n                        ((fn f [[a & n]] \n                           (if (seq n) \n                             (conj (f n) (+' a (first n)) ) [a])) %)\n                        (first %)))\n                      x))","user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn tri [l]\n  (letfn [(s [r] (if (= (.size r) 1)\n                      r\n                      (cons (+ (first r) (second r))\n                            (s (rest r))))) ]\n    (let [n (cons (first l) (s l))]\n          (cons l (lazy-seq (tri n))))\n  )\n)","problem":147,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [x] (iterate (fn [x] (into (into [(first x)] (map #(+ (first %) (second %)) (partition 2 1 x))) [(last x)])) x))","problem":147,"user":"4feada56e4b0140c20fb9c11"},{"problem":147,"code":"(fn [row]\n  (let [next-row #(concat [(first row)]\n                          (map +' % (rest %))\n                          [(last row)])]\n    (iterate next-row row)))","user":"6026737ee4b0d5df2af2222f"},{"code":"(fn [c]\n  (let [∆ (fn [c] (->> (interleave c c)\n                      (drop 1) (partition 2)\n                      (map #(apply + %))\n                      (cons (first c)) reverse\n                      (cons (last c)) reverse))] \n    (iterate ∆ c)))","problem":147,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn pascal [v]\n  (cons v (lazy-seq (pascal \n                (into [] (flatten (list \n                                   (first v) \n                                   (map +' (drop-last v) (rest v))\n                                   (last v))))))\n            ))","problem":147,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn f [row]\r\n    (lazy-seq\r\n     (cons row (f (vec (map + (cons 0 row) (conj row 0)))))))","problem":147,"user":"4f047177535dcb61093f6bc6"},{"problem":147,"code":"(fn [v] (iterate (fn [v] (into [] (map +' (conj v 0) (cons 0 v)))) v))","user":"5abe2fc2e4b073f17744271e"},{"problem":147,"code":"#(iterate (fn [xs] (vec (map +' (cons 0 xs) (conj xs 0)))) %)","user":"585dbe41e4b0f14aab7c879f"},{"problem":147,"code":"(fn test [seqq]\n  (iterate (fn [x]\n             (map (fn [[a b]]\n                    (+' a b))\n                  (map (fn [a b]\n                         [a b])\n                       (concat [0] x)\n                       (concat x [0])))) seqq))","user":"579332c2e4b0e215f87e8452"},{"problem":147,"code":"(fn trapezoid [coll]\n  (let [step-fn (fn [[x & xs] acc]\n                  (cond\n                   (and (nil? acc) (nil? xs)) [x x]\n                   (nil? acc) (recur xs [x (+ x (first xs))])\n                   (nil? xs) (conj acc x)\n                   :else (recur xs (conj acc (+' x (first xs))))))\n        step (step-fn coll nil)]\n    (cons coll\n          (lazy-seq (trapezoid step)))))","user":"5617a540e4b06b1bb2182a12"},{"code":"#(iterate (fn [xs]\n       (vec (for [[a b] (partition 2 1 (concat [0] xs [0]))]\n\t\t    (+ a b))\n\t\t  ))\n\t   %)","problem":147,"user":"4e513ecf535dc968683fc4f6"},{"problem":147,"code":"(fn pascal-trapezoid\n  [row]\n  (let [next-row (fn [row] (map +' (cons 0 row) (conj row 0)))]\n    (lazy-seq\n      (cons row (pascal-trapezoid (vec (next-row row)))))))","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn pt\n  [v]\n  (let [body (partition 2 (drop 1 (drop-last (interleave v v))))\n        next (into []\n                   (concat [(first v)]\n                           (when (not (empty? body)) (mapv (fn [e] (+ (bigint (first e)) (bigint (last e)))) body))\n                           [(last v)]))]\n    (lazy-seq\n      (cons v (pt next)))))","problem":147,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(letfn [(nr [r]\n            (concat\n              [(first r)]\n              (loop [d [] t r]\n                (if (< (count t) 2)\n                  d\n                  (recur (conj d (bigint (apply + (take 2 t)))) (rest t))))\n              [(last r)]))]\n    (fn x [r]\n      (cons r (lazy-seq (x (nr r))))))","problem":147,"user":"50657775e4b0deb876850599"},{"code":"(fn p [coll]\n   (lazy-seq \n    (when-let [s (seq coll)]\n      (cons \n       (vec s)\n       (p (conj (vec (cons (first coll) \n                        (map #(apply +' %) (partition 2 1 coll))))\n             (last coll)))))))","problem":147,"user":"51d4ed02e4b013d740b70dec"},{"problem":147,"code":"(fn pt [c]\n  (lazy-seq\n   (concat [c] (pt (concat [(first c)] (map +' (butlast c) (rest c)) [(last c)])))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":147,"code":"(fn pascal [row]\n  (letfn [(next-row [row]\n            (reverse (flatten (reduce (fn [prev-res x]\n               (let [prev (first prev-res) res (second prev-res)]\n                  (list x (cons (+' x prev) res))))\n               (list 0 '()) row))))\n          (piter [row]\n            (let [next (next-row row)]\n              (lazy-seq (cons next (piter next)))))]\n    (cons row (piter row))))","user":"53ff8c31e4b0de5c41848603"},{"code":"; The author's of this test are a bit cheeky since the last test will fail with arithmetic overflow\n; unless you use the +' operator instead of + (since as the integers get larger they do not automatically\n; get promoted to longs\n(fn [v]\n\t(iterate (fn [x] (vec (flatten\n\t\t\t\t\t\t\t(vector\n\t\t\t\t\t\t\t(first x)\n\t\t\t\t\t\t\t(map (fn [[a b]] (+' a b)) (partition 2 1 x))\n\t\t\t\t\t\t\t(last x))))) v))","problem":147,"user":"5201ff99e4b0b2e020a18f26"},{"code":"iterate #(map (partial apply +) (partition 2 1 (concat [0] % [0])))","problem":147,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":147,"code":"(fn [s] (iterate (fn [col] (let [x (first col) y (last col)] `(~x ~@(map (partial apply +') (partition 2 1 col)) ~y))) s))","user":"5df08767e4b093ff717275bf"},{"code":"(fn pt [p]\n  (letfn\n    [(step [prev]\n       (let [A (conj prev 0),\n             B (cons 0 prev)]\n         (into [] (map + A B))))]\n\n    (lazy-seq (cons p (pt (step p))))))","problem":147,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn trap [x] (cons x (lazy-seq (trap\n    (vec(loop [ind 1 prev x result [(bigint (first x))]]\n      (if (> ind (- (count prev) 1))\n        (reverse (cons (bigint (last x)) result))\n  \t    (recur (inc ind) prev (cons (bigint (+ (nth prev ind) (nth prev (- ind 1)))) result))\n  \t  )\n    ))))\n  ))","problem":147,"user":"52016690e4b0b2e020a18f0f"},{"code":"(fn [v]\n  (iterate\n    #(flatten [(first %) (map + % (rest %)) (last %)])\n    (map bigint v)))","problem":147,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn pascals\n  [v]\n  (iterate #(concat [(first %)] (map (partial reduce + 0N) (partition 2 1 %)) [(last %)]) v))","problem":147,"user":"4fdf566fe4b05e33b9224f99"},{"code":"#(iterate (fn [i] (mapv (fn [[x y]] (+' x y)) (partition 2 1 (concat [0] i [0])))) %)","problem":147,"user":"523b1a65e4b02f719975bdbd"},{"problem":147,"code":"(fn pascal [row]\n  (cons row (lazy-seq (pascal (conj (into [(first row)]\n                                          (map #(apply +' %) (partition 2 1 row)))\n                                    (peek row))))))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":147,"code":"(fn p147 [v]\n  (let [\n        pascal #(apply vector\n                       (map +'\n                            (cons 0 %)\n                            (conj % 0)))]\n  (cons v (lazy-seq (p147 (pascal v))))))","user":"588e4e05e4b00487982d5188"},{"problem":147,"code":"(fn [xs]\n  (iterate \n    #(flatten (vector \n                (first %)\n                (map (partial apply +') (partition 2 1 %))\n                (last %))) \n    xs))","user":"54dce62be4b024c67c0cf78b"},{"code":"#(iterate\n   (fn [x]\n     (map + (cons 0N x) (concat x [0N])))\n   %)","problem":147,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [x]\n  (iterate   \n    #(conj (vec (cons (first %) \n(map (partial reduce +) (partition 2 1 %)))) (last %) ) x)\n     )","problem":147,"user":"4fccdc75e4b0ee37620e186d"},{"problem":147,"code":"iterate #(concat (vector (first %)) (map +' % (rest %)) (vector (last %)))","user":"5b34aba7e4b025bcb146f352"},{"problem":147,"code":"(fn [s]\n  (iterate #(conj (into [(first %)] (map (fn [[x y]] (+ (bigint x) (bigint y))) (partition 2 1 %))) (last %)) s))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":147,"code":"(fn pascal [a-seq]\n  (lazy-seq\n  (let [next-seq (map #(apply +' %) (partition-all 2 1 (cons 0 a-seq)))]\n    (cons\n     (vec a-seq)\n     (pascal next-seq)))))","user":"5680104ae4b0966858e4d8ea"},{"code":"(fn [r] (iterate #(map +' `(0 ~@%) `(~@% 0)) r))","problem":147,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":147,"code":"(fn trapezoid [s]\n         (let [next-row (fn [s]\n                          (->> (concat [0] s [0])\n                               (partition 2 1)\n                               (map #(apply +' %))))]\n           (concat [s] (lazy-seq (trapezoid (next-row s))))))","user":"54a627bce4b09f271ff37c83"},{"code":"(fn r [xs] \n  (cons xs \n        (lazy-seq \n         (r (vec (concat (vector (first xs)) \n                         (map #(+ (bigint %1) (bigint %2)) (drop-last xs) (drop 1 xs)) \n                         (vector (last xs))))))))","problem":147,"user":"4ed286d4535d44c135fd68d7"},{"problem":147,"code":"(fn [xs]\n  (iterate #(vec (concat [(first %)]\n          \t\t\t\t (map (partial apply +') (partition 2 1 %))\n          \t\t\t\t [(last %)]))\n           xs))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":147,"code":"(fn f147 [s]\n  (if (empty? s)\n    []\n    (cons s\n          (if (nil? (second s))\n            (lazy-seq (f147 (into [] [(first s) (last s)])))\n            (lazy-seq (f147 (vec (flatten\n                                  [(first s)\n                                   (loop [l s v []]\n                                     (if (nil? (second l))\n                                       v\n                                       (recur (rest l)\n                                              (conj v (+' (first l) (second l))))))\n                                   (last s)]))))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":147,"code":"(fn [x] (iterate #(mapv +' (conj % 0) (cons 0 %)) x))","user":"53d5a63be4b0e771c3025449"},{"problem":147,"code":"(letfn [(next-pascal [x]\n                     (concat\n                      [(first x)]\n                      (map (partial apply +')\n                           (for [i (range (dec (count x)))]\n                             (vector (nth x i) (nth x (inc i)))))\n                      [(last x)]))]\n  (fn f [x]\n    (iterate next-pascal x)))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn f [r]\n  (cons r\n        (lazy-seq\n         (f (concat\n             [(first r)]\n             (loop [s []\n                    h (first r)\n                    t (rest r)]\n               (if (empty? t)\n                 s\n                 (recur (conj s (+' h (first t)))\n                        (first t)\n                        (rest t))))\n             [(last r)])))))","problem":147,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":147,"code":"(fn trap [v]\n  (lazy-seq\n   (letfn [(next-row [v]\n                     (loop [row v\n                            acc [(first v)]]\n                       (if (nil? (second row))\n                         (conj acc (last row))\n                         (recur (rest row) (conj acc (+' (first row) (second row)))))))]\n     (cons v (trap (next-row v))))))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":147,"code":"(fn pt [xs]\n  (iterate\n   (fn [x]\n     (map + (cons 0N x) (concat x [0N])))\n   xs))","user":"6045582fe4b02d28681c77b6"},{"code":"(fn foo [coll]\n  (let [new-row (fn [c] (let [a1 (cons 0 c)\n                              a2 (conj (into [] c) 0)]\n\t\t                   (map +' a1 a2)))]\n      (cons coll (lazy-seq (foo (new-row coll))))) )","problem":147,"user":"523a9fc9e4b081681ca7adca"},{"problem":147,"code":"(letfn [(next-line [coll]\r\n          (vec (map +' `[0 ~@coll] `[~@coll 0])))]\r\n  (fn pascals-trapazoid [coll]\r\n    (lazy-seq (cons coll\r\n                    (pascals-trapazoid (next-line coll))))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":147,"code":"iterate #(mapv +' (concat [0] %) (conj % 0))","user":"576e3258e4b0979f89651574"},{"code":"iterate #(map (partial apply +') (partition-all 2 1 (cons 0 %)))","problem":147,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [s] \r\n    (iterate (fn [c] (vec (concat \r\n      [(first c)] \r\n      (map #(apply + %) (partition 2 1 c)) \r\n      [(last c)]))) \r\n             s))","problem":147,"user":"4e8768f6535dceadca469850"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (iterate (fn [c]\n             (reduce (fn [[xs p] x]\n                       (let [result (conj xs (+' p x))]\n                         (if (= (count result)\n                                (count c))\n                           (conj result x)\n                           [result x]))) [[] 0] c)) coll))","user":"5693a53ee4b0dcc4269f4106"},{"problem":147,"code":"(fn p [v]\n  (cons v\n        (lazy-seq\n         (p (cons (first v)\n                  (loop [old-it v\n                         new-it []]\n                    (if (empty? old-it)\n                      new-it\n                      (recur (rest old-it)\n                             (conj new-it (apply +' (take 2 old-it)))))))))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"iterate (fn [i] (vec (map (comp biginteger +) (cons 0 i) (conj i 0))))","problem":147,"user":"528652fbe4b0239c8a67ae14"},{"problem":147,"code":"(fn f [col]\n  (if (= (count col) 1)\n    (concat [[(first col)]] (f [(first col) (first col)]))\n    (iterate\n     #(concat\n       (if (> (count %) 1)\n         [(first %)]\n         [])\n       (loop [% %\n              tot []]\n         (if (= 1 (count %))\n           (concat tot [(first %)])\n           (recur (rest %) (concat tot [(+' (first %) (second %))])))))\n     col)))","user":"575fbe58e4b08062f99a4e87"},{"problem":147,"code":"(fn gen [init]\n    (letfn [(next [s]\n              (reduce (fn [acc [b c]] (conj acc (+' b c))) []\n                (partition 2 1 (concat [0] s [0]))))\n            ]\n      (cons init (lazy-seq (gen (next init)) ))\n      ))","user":"52bf0116e4b07a9af5792328"},{"problem":147,"code":"(fn [x]\n (iterate\n  #(map +' \n    (concat [0] %)\n    (concat % [0])) x))","user":"5b61aa6ae4b0c6492753e712"},{"problem":147,"code":"(fn\n  [p]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) p))","user":"5893c64ce4b00487982d524b"},{"code":"(fn pt [v]\n  (let [vnext (map + (concat [0] v) (concat v [0]))]\n    (cons v (lazy-seq (pt (map bigint vnext))))))","problem":147,"user":"5060d137e4b0dc10a69545a0"},{"problem":147,"code":"(fn [n]\n   (iterate #(vec (concat (list (first n)) (map +' (rest %) (butlast %)) (list (last n)))) n)\n)","user":"5a984657e4b0d174b936c78a"},{"problem":147,"code":"(fn [start-sequence]\n  (letfn [(next-row [xs]\n            (->>\n              xs\n              (cons 0) vec (#(conj % 0)) ;; add zero to the margins\n              (partition 2 1)\n              (map (fn [[a b]] (+' a b)))\n              vec\n            ))]\n  (iterate next-row start-sequence))\n)","user":"596e2a70e4b069c0a1a19861"},{"problem":147,"code":"#(iterate (fn [v]\n              (conj (into [(first v)] (map +' v (rest v)) ) (last v))  ) %)","user":"5cbd5b42e4b026601754b9f6"},{"problem":147,"code":"(fn f [x] \n (iterate \n  #(into [] (concat [(first %)] (map +' (rest %) %) [(last %)]))\n         x))","user":"51dd5d6fe4b0c33a4e1da406"},{"problem":147,"code":"(fn [x] (iterate (fn [x] (concat [(first x)] (map #(reduce +' %) (partition 2 1 x)) [(last x)])) x))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"#(iterate (fn[c] (map-indexed (fn [i v] (+' (nth c (dec i) 0) (nth c i 0))) (conj c 0))) %)","problem":147,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn t [v] (let [s (lazy-cat [0] v [0])\n                g (partition 2 1 s)]\n  (lazy-seq (cons v (t (map #(apply +' %) g))))))","problem":147,"user":"4fe900a6e4b0547ebccb243a"},{"problem":147,"code":"iterate\n(fn trp [sq]\n  (concat\n    (concat\n      [(first sq)]\n      ((fn f [[a & more]]\n         (when-let [b (first more)]\n           (cons (+' a b) (f more))))\n       sq))\n    [(last sq)]))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn tmp [t]\n  (let [f #(map + `(0 ~@t) `(~@t 0))]\n    (cons t (lazy-seq (tmp (f))))))","problem":147,"user":"4dbdab4e535d020aff1edf49"},{"problem":147,"code":"(fn p [x] (lazy-seq (cons x (p (concat [(first x)] (flatten (map #(apply +' %) (partition 2 1 x))) [(last x)])))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":147,"code":"(fn [start-row]\n  (letfn\n    [(next-row [row]\n       (conj (into [(first row)] (for [[a b] (partition 2 1 row)] (+' a b))) (last row)))]\n    (iterate next-row start-row)))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":147,"code":"(fn [in]\n                     (iterate (fn [x] (map #(apply +' %) (partition 2 1 (flatten [0 x 0])))) in))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":147,"code":"(fn [si]\n  (iterate #(concat (vector (first si)) \n                    (map +' % (rest %)) \n                    (vector (last si))) \n           si))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn next-pascal [xs]\n  (lazy-cat \n   [xs]\n   (next-pascal\n    (map (partial reduce +')\n         (partition 2 (lazy-cat '(0) (interleave xs xs) '(0)))))))","problem":147,"user":"4f2e0369e4b0d6649770a064"},{"problem":147,"code":"(fn [a]\n  (iterate\n    (fn [b]\n      (if (= 1(count b))\n        [(first b) (last b)]\n        (concat [(first b)] (map #(apply +' %) (partition 2 1 b)) [(last b)])))\n    a))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":147,"code":"#(let [next-vec (fn [x] \n(vec (flatten (conj [] (first x) (map +' x (rest x)) (last x)))))] \n(iterate next-vec %))","user":"5e13a6b7e4b099d064963001"},{"problem":147,"code":"(fn trapezoid\n  [v]\n  (let [middle (map #(+' (v %) (v (inc %)))\n                    (range 0 (dec (count v))))\n        head (vec (concat [(first v)] middle [(last v)]))]\n    (cons v (lazy-seq (trapezoid head)))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":147,"code":"#(iterate (fn [v] (map (fn [[x y]] (+' x y)) (partition 2 1 [0] (cons 0 v)))) %)","user":"57609d91e4b08062f99a4e9b"},{"problem":147,"code":"(fn [top] (let [pascals-trapezoid ((fn trap*\n                                     ([] (cons top (trap* top)))\n                                     ([row]\n                                      (let [new-row\n                                            (conj (first (reduce\n                                                    #(vector (conj (first %1) (+' %2 (second %1))) %2)\n                                                    [[] 0]\n                                                    row)) (last row))]\n                                        (cons new-row (lazy-seq (trap* new-row)))))))]\n          pascals-trapezoid))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":147,"code":"(fn [start]\n         (iterate (fn [step]\n                    (map #(apply +' %) (partition 2 1 [0] (cons 0 step))))\n                  start))","user":"4fe8da4de4b0547ebccb2429"},{"code":"(fn trapezoid [s]\n  (iterate (fn pascal [x]\n             (->  \n                 (conj (map #(reduce +' %) (partition 2 1 x)) (first x)) \n                 (concat (list (last x))))) \n           s))","problem":147,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [v]\n  (iterate #(concat (list (or (first %) 1)) \n                    (map (fn [xs] (apply + (map bigint xs))) (partition 2 1 %)) \n                    (list (or (last %) 1))) v))","problem":147,"user":"4ee528fb535d1385b2869d87"},{"problem":147,"code":"(fn pascalize [row]\n  (cons row (lazy-seq (pascalize\n                       (apply vector (map +' (cons 0 row) (conj row 0)))))))","user":"54febf4be4b07d26eda61d45"},{"problem":147,"code":"(fn [lst] (iterate #(vec (map +' (conj % 0) (cons 0 %))) lst))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn [coll]\n  (iterate #(vec (map +' (conj % 0) (cons 0 %))) coll))","problem":147,"user":"51696ee7e4b03f62cda68ce8"},{"problem":147,"code":"(fn pascal-seq [coll]\n  (iterate #(mapv +' (cons 0 %) (conj % 0))\n           coll))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [r]\n  (iterate\n    #(map\n      (partial apply +)\n      (partition 2 1 (concat [0] % [0])))\n    r))","problem":147,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":147,"code":"(fn [initial]\n  (iterate (fn [previous]\n             (vec (concat [(first previous)]\n                          (map #(reduce +' %) (partition 2 1 previous))\n                          [(last previous)])))\n           initial))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn pascaltri [v]\n  (letfn [(ptricalc [x]\n\t    (concat (list (first x)) (map + (rest x) (butlast x)) (list (last x)))\n\t)]\n\t(iterate ptricalc (map bigint v))\n\t)\n)","problem":147,"user":"50588af1e4b06522596eba7d"},{"problem":147,"code":"#(let [pascal (fn pascal [l]\n  (conj (vec (conj (map +' l (rest l))\n                   (first l)))\n        (last l)))]\n  (iterate pascal %))","user":"60460824e4b02d28681c77bc"},{"code":"(fn pascal [coll]\n  (iterate\n   #(loop [res [(first coll)] coll %]\n      (if (< (count coll) 2)\n        (conj res (last coll))\n        (recur (conj res (+' (first coll) (second coll))) (rest coll))\n        )\n      ) coll))","problem":147,"user":"4ed6238d535d10e5ff6f52de"},{"problem":147,"code":"#(iterate (fn [c] (concat [(first c)] (map +' c (rest c)) [(last c)])) %)","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"iterate #(map + (concat % [0]) (concat [0] %))","problem":147,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn ps [vec]\n  (letfn [(a [vec] (loop [v vec, result [(first vec)]]\n                       (cond (empty? v) result\n                             (= 1 (count v)) (conj result (first v))\n                             :else (recur (rest v) (conj result (+' (first v) (second v))))\n                       )\n         ))]\n           (lazy-seq (cons vec (ps (a vec)))\n           )\n  )\n)","problem":147,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn gen-pascal [row]\n  (lazy-seq\n   (let [inner (map (partial apply +') (partition 2 1 row))\n         left (first row)\n         right (last row)\n         next-row (concat [left] inner [right])]\n     (cons row (gen-pascal next-row)))))","problem":147,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [x] (iterate #(map + (cons 0 %)\n                         (conj (vec %) 0))\n                 x))","problem":147,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [l] \n  (iterate (fn [l1] \n            (conj (vec (cons \n                        (first l) \n                        (map #(apply +' %) (partition 2 1 l1))\n            )) (last l1))) l))","problem":147,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":147,"code":"(fn create-seq [v]\n  (let [next-item\n        (fn [v]\n          (let [v1 (conj v 0)\n                v2 (vec (cons 0 v))]\n            (vec (map +' v1 v2))))]\n    (lazy-seq (cons v (create-seq (next-item v))))))","user":"518279abe4b0353c468deb65"},{"problem":147,"code":"iterate #(map +' (cons 0 %) (conj (vec %) 0))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":147,"code":"#(iterate (fn pascal-triangle-line [previous-line]\n  (if (= [1] previous-line) [1 1] \n  (loop [n 0\n         line []]\n    (let [value (nth previous-line n nil)\n          next-value (nth previous-line (inc n) nil)]\n        (if (nil? next-value)\n          (conj line value)\n          (recur (inc n) (conj (if (= n 0) (conj line value) line) (+' value next-value)))))))) %)","user":"52c1cc8be4b07a9af579236b"},{"problem":147,"code":"(fn [xs] (iterate #(map +' (concat % [0]) (concat [0] %)) xs))","user":"564b495de4b0284900eef667"},{"problem":147,"code":"(fn pas-seq\n  [a]\n  (let [pas (fn [a]\n              (let [a1 (concat [0] a)\n                    a2 (concat a [0])]\n                (map +' a1 a2)))]\n    (lazy-seq \n     (concat [a] (pas-seq (pas a))))))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"code":"iterate #(map (partial + 0N) (concat [0] %) (concat % [0]))","problem":147,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"iterate #(mapv +' (conj % 0)(into [0] %))","problem":147,"user":"5281a445e4b0757a1b17143a"},{"problem":147,"code":"(fn __ [v] (lazy-seq (cons v (__ ((fn next-line [v] (vec (map +' (conj v 0) (apply vector 0 v)))) v)))))","user":"59089229e4b047aa04b1997c"},{"code":"(fn f [xs] (iterate (fn g [xs] (concat (list (first xs)) (map #(apply +' %) (partition 2 1 xs)) (list (last xs))))  xs))","problem":147,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"problem":147,"code":"(fn pascals-trapezoid\n  [coll]\n  (lazy-seq\n    (cons coll (pascals-trapezoid\n                 (map\n                   #(apply +' %)\n                   (partition 2 1 (concat [0] coll [0])))))))","user":"56bb652ae4b0f26550335953"},{"problem":147,"code":"(fn pasc [col]\n  (cons col (lazy-seq\n             (pasc (loop [prev 0 rem col acc []]\n                     (if-not (seq rem)\n                       (conj acc prev)\n                       (recur (first rem) (rest rem) (conj acc (+' prev (first rem))))))))))","user":"4ff9a200e4b0678c553fc3ab"},{"problem":147,"code":"(fn pascal-seq [row]\n  (let [next-row (conj (vec (cons (first row)\n                                  (map #(reduce +' %)\n                                       (partition 2 1 row))))\n                       (last row))]\n    (lazy-seq (cons row (pascal-seq next-row)))))","user":"50e3e108e4b01912b3285c48"},{"code":"#(iterate\n           (fn [xs]\n             (concat [(first %)] (map (fn [[x y]] (+ x y)) (partition 2 1 xs)) [(last %)]))\n           %)","problem":147,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [row]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) row))","problem":147,"user":"5032b066e4b00c0952a257ea"},{"problem":147,"code":"(fn [r] (iterate (fn [p]\n    (map #(apply +' %) (partition 2 1 (concat [0] p [0])))) r))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [x]\r\n    (iterate \r\n      #(reduce\r\n          (fn [c [a b]] (conj c (+ a b)))\r\n          []\r\n          (partition 2 1\r\n                     (apply vector 0N (conj % 0))))\r\n      x))","problem":147,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn pt [v]\n  (cons v \n        (lazy-seq (pt (conj \n                       (into [(first v)]\n                             (map +' (rest v) v))\n                       (last v))))))","problem":147,"user":"52d3f666e4b09f7907dd1327"},{"problem":147,"code":"(fn trapezoid [xs]\n  (let [f (fn [ys]\n            (map (partial apply +')\n                 (partition 2 1 [0] (conj (seq ys) 0))))]\n    (iterate f xs)))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn pascal [coll]\n  (letfn [(nextRow [s]\n                   (map (fn [[a b]] (+' a b)) (partition 2 1 (concat [0] s [0]))))]\n    (cons coll (lazy-seq (pascal (nextRow coll))))))","problem":147,"user":"52d809bde4b09f7907dd1384"},{"problem":147,"code":"(fn tri [xs]\n           (iterate #(concat (list (first %))\n                             (map +' (rest %) %)\n                             (list (last %))) xs))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn [x] (iterate (fn [s] \n  (concat [(first s)] \n       (map #(+ (first %) (second %)) \n       ((fn part [x y]\n         (cond (= (count y) 0) nil \n            :else (concat x (part [[(first y) (second y)]] (rest y)))\n         )   \n           ) [] s ))\n       [(last s)] \n   )   \n) x)\n)","problem":147,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":147,"code":"(fn [c]\n    (iterate\n      #(map (fn [[x y]] (+' y x)) (partition 2 1 (concat [0] % [0])))\n      c))","user":"538ca203e4b0b51d73faae5f"},{"problem":147,"code":"(fn p [coll]\n         (lazy-seq \n          (cons coll \n                (p (map +' (concat '(0) coll) (concat coll '(0)))))))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":147,"code":"(fn pascal2\n  [lst]\n  (iterate\n    (fn [p]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1\n                            (conj (into [0] p) 0)))))\n    lst))","user":"57fedf07e4b0d3187e9009dc"},{"problem":147,"code":"(fn ptrap [c]\n           (lazy-seq\n             (cons c (ptrap (loop [padded (into [] (cons 0 c)), r []]\n                              (let [f (first padded), s (second padded)]\n                                (if (= (count padded) 2)\n                                  (conj (conj r (+' f s)) s)\n                                  (recur (rest padded) (conj r (+' f s))))))))))","user":"60882700e4b0ae75613dcedf"},{"problem":147,"code":"(fn pascal [s]\n  (lazy-seq (cons s (pascal (loop [s s, res [(first s)]]\n                              (if (seq (rest s))\n                                (recur (rest s) (conj res (+' (first s) (first (rest s)))))\n                                (conj res (first s))))))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn t [l]\n  (cons l (lazy-seq (t (cons (first l) (conj (vec (map #(+ (bigint %1) (bigint %2)) (rest l) (butlast l))) (last l)))))))","problem":147,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn trapezoid [v] \r\n  (cons v \r\n    (lazy-seq \r\n      (trapezoid (map #(apply + %) \r\n        (partition 2 1 (cons 0N (conj (vec v) 0N))))))))","problem":147,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(partial iterate #(vec `(~(% 0)\n                           ~@(map (partial reduce +) (partition 2 1 %))\n                           ~(last %))))","problem":147,"user":"4ee88bfb535d93acb0a66881"},{"problem":147,"code":"(fn foo [coll]\n  (lazy-seq \n    (cons coll\n      (foo (concat (list (first coll)) (map +' coll (rest coll)) (list (last coll)))))))","user":"57c0917be4b05aa3c4741c95"},{"problem":147,"code":"#(iterate (fn [x] (map (partial apply +') (partition-all 2 1 (concat [0] x)))) %)","user":"586bc870e4b01531a375e964"},{"code":"(fn [v] (let [f (fn [x] (let [sum-vec (map #(+ (first %1) (last %1))\n                                                     (partition 2 1 x))]\n                                    (concat [(first x)] sum-vec [(last x)])))]\n                     (iterate f v)))","problem":147,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"(fn f [c]\n  (lazy-seq `(~c ~@(f (map + `(0 ~@c) `(~@c 0))))))","problem":147,"user":"4e49badd535dc968683fc4c9"},{"problem":147,"code":"(fn trapezoid [row]\n\t(let [aux (fn [row]\n\t\t\t\t  (concat [(first row)]\n\t\t\t\t\t\t  (map #(apply +' %) (partition 2 1 row))\n\t\t\t\t\t\t  [(last row)]))]\n\t\t(iterate aux row)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn __ [v]\n  (lazy-seq\n   (cons v\n         (__\n  \t  (conj\n          \t(into [(first v)]\n            \t(map (partial apply +') (partition 2 1 v)))\n            (last v))))))","problem":147,"user":"4fa719c0e4b081705acca1bf"},{"code":"#(iterate (fn pt [x]\n  (cond \n    (= x [1]) [(bigint 1) (bigint 1)]\n    :else\n        (concat [(first x)]\n          (apply (fn !\n            ([_1 _2 _3 & _4]\n              (cons\n                (+ _1 _2) (apply ! (concat [_2 _3] _4))))\n            ([_1 _2] [(+ _1 _2)])) x) [(last x)]))) (map bigint %))","problem":147,"user":"511ac026e4b0c87c59c9670e"},{"problem":147,"code":"(let [\n;(defn my-dotplus\nmy-dotplus (fn my-dotplus\n  ([xs ys] (my-dotplus xs ys []))\n  ([[x & xs] [y & ys] out]\n    (let [out (conj out (+' x y))\n          stop (or (empty? xs) (empty? ys))]\n      (if stop\n        out\n        (recur xs ys out)\n      )\n    )\n  )\n)\n  \n;(defn my-shift-then-add [xs]\nmy-shift-then-add (fn [xs]\n  [(into [0] xs)\n   (conj xs 0)]\n)\n\n;(defn next-pascal [xs]\nnext-pascal (fn [xs]\n  (apply my-dotplus (my-shift-then-add xs)))\n\n]\n  \n(fn pascal-seq [x]\n  (iterate next-pascal x)\n))","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [l] (iterate #(concat [(first %)] (map + % (rest %)) [(last %)]) l))","problem":147,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":147,"code":"(fn pascal\n  [coll]\n  (lazy-seq (cond\n              (= 1 (count coll)) (cons coll (pascal [(first coll) (last coll)]))\n              :else (let [next-row (vec (concat\n                                          [(first coll)]\n                                          (#(reduce\n                                              (fn [acc curr] (conj acc (+' (first curr) (second curr))))\n                                              []\n                                              (partition 2 1 %))\n                                            coll)\n                                          [(last coll)]))]\n                      (cons coll (pascal next-row))))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":147,"code":"(fn pascal-triangle-lazyseq [row]\n    (lazy-seq (cons row\n                    (pascal-triangle-lazyseq\n                     (into [] (concat\n                               [(first row)]\n                               (map +' row (rest row))\n                               [(last row)]))\n                     ))))","user":"57f6e666e4b0d3187e9008f2"},{"problem":147,"code":"(fn pascalRow [vals] \n          (let [rawData (reduce \n                         (fn [[previous output] nxt]\n                           (vector nxt (conj output (+' previous nxt))))\n                         [0 []] vals)\n\n                ]\n            (lazy-seq (cons vals \n                            (pascalRow (conj (second rawData) (first rawData)))))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":147,"code":"(fn pascal [init]\n  (iterate (fn pasc-step [s]\n             (let [left (first s)\n                   right (last s)\n                   middle (for [[a b] (partition 2 1 s)] (+' a b))]\n               (concat [left] middle [right])))\n           init))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(partial iterate #(map +' (concat [0] %) (concat % [0])))","problem":147,"user":"500933a6e4b046cdb195e074"},{"code":"iterate \n(fn [x] (map #(apply + %) (partition 2 1 (concat [0] x [0]))))","problem":147,"user":"4dbdc9da535d020aff1edf4c"},{"problem":147,"code":"(fn [seq]\n  (let [\n    step (fn st[s]\n      (let\n        [ n (into [](concat [0] s [0]))\n          start 0\n          end (dec (count n))\n          r (concat\n              (map-indexed\n                (fn[idx i]\n                    (if (< idx end)\n                      (+' i (n (inc idx)))\n                      []\n                     )\n                    )\n                 n)\n               )\n          f (into [] (flatten r))\n        ]\n        (lazy-seq (cons f (st f)))\n      ))\n    ]\n    (cons seq (step seq))\n  )\n)","user":"4f148418535d64f60314643a"},{"problem":147,"code":"(fn\n  [xs]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) xs ))","user":"593910eae4b02506e01a29f4"},{"code":"#(iterate (fn [l]\n  \t(concat\n\t\t\t(list (first l))\n\t\t\t(map\n\t\t\t\t(fn [[a b]] (+ a b))\n\t\t\t\t(partition 2 (rest (interleave l l))))\n\t\t\t(list (last l))))\n  % )","problem":147,"user":"4fc0853ae4b081705acca327"},{"problem":147,"code":"#(iterate (fn [coll]\n            (concat [(first coll)]\n                    (map (partial reduce +') (partition 2 1 coll))\n                    [(last coll)]))\n          %)","user":"59074b7ce4b047aa04b19951"},{"problem":147,"code":"(fn [v] \n  (iterate #(vec (flatten [(first %) (map (fn [[a b]] (+' a b)) (partition 2 1 %)) (last %)])) v))","user":"51990df9e4b068aa333628fc"},{"problem":147,"code":"(fn p147 [v]\n  (let [pascal (fn [s r]\n                 (cond (empty? r) (recur s (vector (first s)))\n                       (empty? s) r\n                       :default (let [a1 (first s)\n                                      a2 (second s)]\n                                  (if a2\n                                    (recur (rest s) (conj r (+' a1 a2)))\n                                    (recur (rest s) (conj r a1))))))\n        v2 (pascal v [])]\n    (lazy-seq (cons v (p147 v2)))))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"#(iterate (fn [row] (map (partial apply +) (partition 2 1 (concat [0N] row [0N])))) %)","problem":147,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [l]\n  (iterate #(map +' (concat % [0]) (cons 0 %)) l))","problem":147,"user":"4ddbd934535d02782fcbe9fc"},{"problem":147,"code":"(fn [v]\n    (iterate\n      (fn [coll]\n        (let [pasc (fn [c] (->> c\n                                (partition 2 1 )\n                                (map #(+' (first %1) (second %1)))))]\n          (conj (vec (conj (pasc coll) (first coll))) (last coll))\n          ))\n      v))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":147,"code":"(fn pascal [p-row]\n  (let [n-row (cons (first p-row) \n                    (map +' p-row (concat (rest p-row) '(0))))]\n    (cons p-row (lazy-seq (pascal n-row)))))","user":"5579bc24e4b05c286339e098"},{"problem":147,"code":"(fn trapezoid [coll]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) coll))","user":"54c3747de4b045293a27f60e"},{"problem":147,"code":"(fn pas_trep [s]\n  (iterate #(concat (take 1 %) (map (comp bigint +) % (take-last (dec (count %)) %)) (take-last 1 %)) s)\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":147,"code":"(fn pascal\n  [row]\n  (lazy-seq (cons row\n                  (pascal (concat [(first row)]\n                                  (->> row\n                                       (partition 2 1)\n                                       (map (partial apply +')))\n                                  [(last row)])))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":147,"code":"(fn [v]\n\t(iterate (fn [v] \n        (let [mid (map #(apply +' %) (partition 2 1 v))]\n\t\t    (concat [(first v)] mid [(last v)]))) v))","user":"544cf5d7e4b0e39780006977"},{"problem":147,"code":"(fn p [xs] (lazy-seq (let [xs' (vec (map +' (conj xs 0) (cons 0 xs)))] (cons xs (p xs')))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [arg]\n        (iterate \n     (fn [a] (flatten (list (nth a 0) (for [q (range 1 (count a))] (+' (nth a q) (nth a (dec q)))) (last a)))) arg))","problem":147,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn pascal-trap-- [coll]\n  (letfn [(s-row [coll-]\n            (cons (list 0 (first coll-))\n                  (for [n (range (count coll-))\n                        :let [x (nth coll- n)\n                              y (if (< n (dec (count coll-)))\n                                  (nth coll- (inc n))\n                                  0)]]\n                    (list x y))))\n          (row [coll--] (map #(apply +' %1) (s-row coll--)))]\n    (cons coll (lazy-seq (pascal-trap-- (row coll))))))","problem":147,"user":"511e763ce4b03e81d390ac29"},{"problem":147,"code":"(fn [coll]\n  (iterate #(vec (map + (cons 0N %) (conj % 0N))) coll))","user":"564da567e4b0284900eef682"},{"code":"(fn ! [a]\n  (cons a (lazy-seq\n\t\t(! (loop [a a p [(first a)] f (first a)]\n\t\t\t(if (= (count a) 1)\n\t\t\t\t(conj p f)\n\t\t\t\t(recur (rest a) (conj p (+' (first a) (second a))) (last a))))))))","problem":147,"user":"50843a4ae4b0c98812d0788b"},{"problem":147,"code":"(fn [xs]\n  (let [next #(vec (conj (map (comp bigint +) % (conj (subvec % 1) 0)) (first %)))]\n    (iterate next xs)))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"iterate #(vec (map +' (cons 0 %) (conj % 0) ))","problem":147,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn triangle [v]\n  (let [nv\n    (concat\n      (list (first v))\n      (map (partial apply +) (partition 2 1 v))\n      (list (last v)))]\n  (lazy-seq (cons v (triangle nv)))))","problem":147,"user":"4eb2e6ca535d7eef3080734f"},{"problem":147,"code":"(fn ptri [input]\n    (cons input\n       (lazy-seq\n         (ptri (map +\n            (concat input [0N])\n            (cons 0N input)\n          ))\n       )\n    )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":147,"code":"(fn pascal-from\n  [first-row]\n  (cons first-row\n        (lazy-seq (pascal-from\n                   (let [first-num (first first-row)\n                         last-num (last first-row)\n                         result (conj \n                                 (->> first-row\n                                      (cons 0)\n                                      (partition 2 1)\n                                      (map #(apply +' %))\n                                      vec)\n                                 last-num)]\n                     result)))))","user":"4fc524aae4b081705acca37e"},{"problem":147,"code":"(fn pt [prev]\n  (lazy-seq (cons prev (pt (vec (concat (list (first prev)) (map #(reduce +' %) (partition 2 1 prev)) (list (last prev))))))))","user":"51456858e4b0e88796073408"},{"code":"#(iterate (fn [col]  (mapv (fn [x y] (bigint (+ x y))) (conj col 0) (cons 0 col))) %)","problem":147,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn pascal [r]\n  (lazy-seq (cons r (pascal\n    (let [n (count r)]\n      (map\n        #(if (== 0 %)\n          (first r)\n          (if (== n %)\n            (last r)\n            (+ (nth r %) (nth r (dec %)))\n          )\n        )\n        (range (+ 1 n))\n      )\n    )\n  )))\n)","problem":147,"user":"4f725201e4b07046d9f4f02f"},{"problem":147,"code":"(fn [s] (iterate (fn [row] (concat [(first row)] (map #(apply +' %) (partition 2 1 row)) [(last row)])) s))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":147,"code":"(fn trapezoid [row]\n  (let [next-row \n        (concat [(first row)]\n                (map (partial apply +') (partition 2 1 row))\n                [(last row)]\n        )\n       ]\n    (lazy-seq (cons row (trapezoid next-row)))\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":147,"code":"#(iterate (fn [xs] (map +' (into [0] xs) (conj (vec  xs) 0))) %)","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [v] (iterate #(map +'  (concat [0] %) (concat % [0])) v))","problem":147,"user":"506e0e5ae4b09350ab4199eb"},{"code":"(fn toPascal[col]\r\n    (iterate\r\n      (fn[l]\r\n        (let[v (vec l) ]\r\n         (map + (conj v 0)  \r\n            (cons 0 v) ) )\r\n         )\r\n      col)\r\n  )","problem":147,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn trap [v]\n  (lazy-seq\n    (cons v (trap \n        (cons (first v) (conj (vec (map + v (rest v))) (last v)))))))","problem":147,"user":"4eb0a757535d7eef3080733d"},{"problem":147,"code":"(fn f97-update [coll]\n   (lazy-seq (iterate #(mapv +' (conj % 0) (cons 0 %)) coll)))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"(fn trappy [s]\n  (cons s\n        (lazy-seq\n         (trappy (map bigint (concat [(first s)] (map + s (next s)) [(last s)]))))))","problem":147,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":147,"code":"(fn [seed]\n  (iterate\n   (fn [curr]\n     (concat\n      [(first curr)]\n      (map +' curr (rest curr))\n      [(last curr)]))\n   seed))","user":"586a657de4b0f14aab7c88bd"},{"problem":147,"code":"iterate\n  (fn \n    [x] \n            (conj \n            (loop [i 0 z [] ] \n             (if \n      \t\t(< i (count x)) \n      \t\t  (recur \n       \t\t    (inc i)\n       \t\t    (conj \n                      z \n                       (+' \n                         (get x (dec i) 0) \n                         (get x i )\n                       )\n                     )\n                   )\n                   z\n              )\n              )\n              (last x)\n              )\n     )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":147,"code":"(fn pascal [x]\n  (letfn[(nextP [coll] \n         (vec (map +' (cons 0 coll) (conj coll 0))))]\n   (lazy-seq\n    (let[nextX (nextP x)]\n      (cons x (pascal nextX))))))","user":"6074e1e4e4b069485764de4f"},{"problem":147,"code":"(fn pt [n]\n  (lazy-seq\n   (cons n (pt (concat (vector (first n)) (map (partial apply +') (partition 2 1 n)) (vector (last n)))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":147,"code":"(fn [v] \n  (iterate \n \t(fn [x] \n  \t\t(into [] (map +' \n        \t(cons 0 x) \n        \t(conj x 0)))) v))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"(fn pascal-seq [row]\n    (letfn [(next-row [row]\n                      (concat [(first row)] (map #(+' %1 %2) row (rest row)) [(last row)]))]\n      (lazy-seq (cons row (pascal-seq (next-row row))))))","problem":147,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":147,"code":"iterate \n    #(map \n      +'              ;[2 5 5 2]\n      (concat % [0])  ;[2 3 2 0]\n      (concat [0] %)) ;[0 2 3 2]","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"(fn pascal-seq\n  [coll]\n  (let [pascal (fn [coll]\n                 (let [f (first coll)\n                       l (last coll)\n                       r (range (dec (count coll)))\n                       row (concat\n                            [f]\n                            (for [x r]\n                              (+' (get coll x) (get coll (inc x))))\n                            [l])]\n                   (vec row)))]\n    (lazy-seq\n     (concat [coll] (pascal-seq (pascal coll))))))","problem":147,"user":"52527192e4b0541d1855b8af"},{"problem":147,"code":"(fn [v] (iterate #(map +' (cons 0 %) (lazy-cat % [0])) v))","user":"57002b81e4b08d47c97781c7"},{"problem":147,"code":"(fn pascal-seq[curr]\n  (let [\n        curr-z (concat [0] curr [0])\n        next-item (map \n                    #(apply +' %) \n                    (partition 2 1 curr-z)\n                    )\n        ]\n    (cons curr (lazy-seq (pascal-seq next-item)))\n    )\n)","user":"52271ffee4b04e78ff2e19a9"},{"problem":147,"code":"(fn pascal [col]\n  (cons col (lazy-seq (pascal (map +' (concat col [0]) (cons 0 col))))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [x] (iterate #(map (fn [x y] (+ (bigint x) (bigint y))) (cons 0 %) (concat % [0])) x))","problem":147,"user":"4f045946535dcb61093f6bba"},{"code":"(fn f [xs]\n  (letfn [(y1 [xs] (partition 2 1 xs))\n          (y2 [xs] (map #(+' (first %1) (second %1)) (y1 xs)))\n          (y3 [xs] (vec (cons (first xs) (y2 xs))))\n          (y4 [xs] (conj (y3 xs) (last xs)))]\n    (cons xs (lazy-seq (f (y4 xs))))))","problem":147,"user":"50a5f72fe4b0aa96157e2611"},{"code":"iterate \n         (fn [l](concat [(first l)]                       \n                       (reduce \n                        #(conj %1 (+' (first %2) (second %2))) [] (partition 2 1 l)) \n                        [(last l)]))","problem":147,"user":"503539dee4b0ed9c821488f6"},{"problem":147,"code":"iterate #(vec (map +' (concat [0] %) (conj % 0)))","user":"52e851bfe4b09f7907dd149a"},{"problem":147,"code":"(fn trap [init]\n  (cons init (lazy-seq (trap (conj (->> init\n                                        (partition 2 1)\n                                        (map (partial apply +'))\n                                        (cons (first init))\n                                        vec) (last init))))))","user":"54246fcce4b01498b1a71aed"},{"code":"(let [pascal \n      (fn [xs i n result] \n        (if (= i n) \n          (conj result (peek xs)) \n          (recur xs (inc i) n (conj result (+ (nth xs i) (nth xs (dec i)))))))\n      single-pascal\n      (fn [z]\n        (pascal z 1 (count z) [(biginteger (first z))]))\n      ]\n  (fn [x] (iterate single-pascal x))\n)","problem":147,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":147,"code":"(fn [v] \n  (iterate \n   (fn [l]\n    (into []\n      (flatten \n         (conj [] (first l) \n                   (map #(+' %1 %2) (rest l) (drop-last l)) \n                   (last l))))) v))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn pascal [p]\n  (lazy-seq\n    (let [n\n      (let [x (cons 0 p)\n            y (conj p 0)]\n        (vec\n          (map\n            (fn [a] (apply + a))\n            (partition-all 2 (interleave x y)))))]\n      (cons p (pascal n)))))","problem":147,"user":"4f559d2ce4b0a7574ea71808"},{"problem":147,"code":"(fn pascal [row]\n  (letfn [(f [r]\n            (loop [[x & more] r\n                   result [x]]\n              (if more\n                (recur more (conj result (+' x (first more))))\n                (conj result (peek row)))))]\n    (cons row (lazy-seq (pascal (f row))))))","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn __ [s]\n  (let [tpz #(reduce (fn [coll [i x]] \n                       (conj coll (+ (biginteger x) (get % (inc i) 0)))) \n                     [(first %)] (map-indexed vector %))]\n       (lazy-seq (cons (seq s) (__ (tpz s))))))","problem":147,"user":"4ec9549d535d6d7199dd36fe"},{"problem":147,"code":"(fn [coll] (iterate #(map +' (concat [0] %) (concat % [0])) coll))","user":"57c647bbe4b05aa3c4741cf3"},{"problem":147,"code":"(fn pascal [coll]\n  (cons coll (lazy-seq (pascal (mapv #(apply +' %)\n                                      (partition 2 1 (concat [0] coll [0])))))))","user":"5080a697e4b01a93d3f38e49"},{"code":"(partial\n  iterate\n    #(map +\n      (concat '(0) %)\n      (concat % '(0))))","problem":147,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn pscl [s]\n  (iterate  #(map (partial apply + ) \n                 (partition 2 1 (lazy-cat [0] % [0]))) (map bigint s) ))","problem":147,"user":"5018ed15e4b011a2e0bf6412"},{"code":"(fn [p]\n  (iterate #(conj (vec (map + % (conj (drop-last %) 0))) (last %))\n           (map bigint p)))","problem":147,"user":"500cb910e4b05f7c30cfa698"},{"problem":147,"code":"(fn [r] (let [zz (fn [s] (into []  (let  [s1 (concat [0] (conj s 0))\n                                          s2 (conj s 0)]\n                                        (map +' s1 s2))))]\n          (iterate zz r)))","user":"58983e3fe4b00487982d52ce"},{"problem":147,"code":"(fn [xs]\n  (iterate (fn [x] (mapv +' \n                          (conj x 0)\n                          (vec (conj (apply list x) 0))))\n             xs))","user":"5283a919e4b0239c8a67adbe"},{"problem":147,"code":"(fn foo [s] \n  (cons s (lazy-seq (foo (conj \n   (vec \n    (conj \n     (map \n      #(apply +' %) \n      (partition 2 (drop 1 (drop-last (interleave s s))))\n      )\n     (first s))) (last s))))))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":147,"code":"(fn trape [v]\n    (iterate\n      #(vec (map +' (conj % 0) (cons 0 %)))\n      v))","user":"569ce6fee4b0542e1f8d146c"},{"problem":147,"code":"(fn [n]\n    (let [f \n    (fn [lst]\n       (loop [res [(first lst)] [a & r] lst]\n          (if (empty? r)\n            (conj res a)\n            (recur (conj res (+' a (first r)) )  r )  )       )     )\n     \n    ]\n      (iterate f n) \n    )\n    )","user":"5735ac67e4b0cd1946bd102b"},{"code":"iterate \n  #(cons (first %)\n    ((fn f [[h & r]]\n      (if (nil? r)\n        [h]\n        (cons (+ h (first r)) (f r)))) %))","problem":147,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":147,"code":"(fn pt [s] (lazy-seq (cons s (pt (map +' (concat [0] s) (concat s [0]))))))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn [s]\n (iterate #(concat [(first %)] (map (partial reduce +)(partition 2 1 %)) [(last %)]) s))","problem":147,"user":"4f29eb2ae4b0d6649770a037"},{"problem":147,"code":"(fn [s]\n  (let [pascal-next (fn [v]\n                      (->> (concat [0]\n                                   (flatten (map vector v v))\n                                   [0])\n                           (partition 2)\n                           (mapv (partial reduce +'))))]\n    (iterate pascal-next s)))","user":"51baff1be4b0fe3ecfb46443"},{"problem":147,"code":"(fn trapezoid [s]\n  (let [head (first s)\n        t (last s)\n        next\n    (->> (interleave s s)\n        rest\n        drop-last\n        ((fn [x] (map #(+' (nth x %) (nth x (inc %))) (range 0 (count x) 2))))\n        (cons head)\n        ((fn [x] (concat x [t]))))]\n        (lazy-seq (cons s (trapezoid next)))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":147,"code":"(fn [n] (iterate #(map +' `[0 ~@%] `[~@% 0]) n))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":147,"code":"(fn [c]\n   (iterate (fn [c] (map #(reduce +' %) (partition 2 1 (lazy-cat [0] c [0])))) c))","user":"51672d15e4b079759a74a5e7"},{"code":"(fn [s] \n    (iterate (fn [col] \n             (concat [(first col)] \n                     (map #(apply +' %) (partition 2 1 col) ) \n                     [(last col)] )) s))","problem":147,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn [coll] (iterate #(map + (conj (vec %) 0) (cons 0 (vec %))) coll))","problem":147,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":147,"code":"(fn [a]\n           (letfn [(parscal [l]\n                     (concat [(first l)]\n                             (map #(apply +' %) (partition 2 1 l))\n                             [(last l)]))\n                   (next [p]\n                     (lazy-seq (cons p (next (parscal p)))))]\n             (next a)))","user":"5f3f2281e4b004f08c61c561"},{"problem":147,"code":"(fn [v] (iterate #(map (partial apply +') (partition 2 1 [0] (cons 0 %))) v))","user":"5782018de4b0d36ec5835e8e"},{"problem":147,"code":"iterate #(map +'(conj (vec %) 0) (cons 0 (vec %)))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":147,"code":"(fn ass [xs]\n    (lazy-seq\n     (cons xs (ass ((fn x [ys]\n  (if (= 1 (count ys))\n    (conj ys 1)\n    (let [\n          c (count ys)\n          f (first ys)\n          l (last ys)\n          rv (subvec ys 0 c)\n          lv (subvec ys 1)\n          m (vec(map +' rv lv))\n          ]\n        (into [f] (conj m l))\n      )\n    )\n  ) xs)))\n     )\n  )","user":"55f01316e4b06e875b46ce1a"},{"problem":147,"code":"(fn pascal [v]\n  (let [some-fn (fn [v]\n                  (let [fst (first v)\n        \t\t\t\tlst (last v)\n        \t\t\t\tmids (vec\n                              (map #(apply +' %) (partition 2 1 v)))]\n    \t\t\t\t(cons fst (conj mids lst))))]\n    (lazy-seq \n     (cons v (pascal (some-fn v))))))","user":"52860baae4b0239c8a67ae09"},{"problem":147,"code":"(fn trapezoid [s]\n          (let [next-row (fn next-row [s]\n                           (->> (concat [0] s [0])\n                                (partition 2 1)\n                                (map #(apply +' %))\n                                )\n                           )]\n\n            (concat [s] (lazy-seq (trapezoid (next-row s)))))\n          )","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [row] (letfn [\n  (next-trapezoid-row [row] (concat [(first row)] (map (fn [pair] (apply + 0N pair)) (partition 2 1 row)) [(last row)]))\n  (pascals-trapezoid [row] (iterate next-trapezoid-row row))\n  ] (pascals-trapezoid row)))","problem":147,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn _pascal-triangle\n  [xs]\n  (let [xs2 (vec (concat [0] xs [0]))\n        xs-next (for [i (range (dec (count xs2)))\n                      :let [a (get xs2 i)\n                            b (get xs2 (inc i))]]\n                  (+' a b))]\n    (cons xs (lazy-seq (_pascal-triangle xs-next)))))","problem":147,"user":"531490bde4b08068f379ed17"},{"problem":147,"code":"(fn f [int-coll]\n  (let [next-coll #(map +' (concat [0] %) (concat % [0]))]\n    (lazy-seq (cons int-coll (f (next-coll int-coll))))))","user":"567695c2e4b05957ce8c6157"},{"problem":147,"code":"(fn trapezoid [coll]\n  (letfn [(next-iter [l1]\n                     (loop [init-list l1\n                            res-list [(first l1)]]\n                       (if (empty? init-list)\n                         res-list\n                         (if (= (count init-list) 1) \n                           (recur (rest init-list)\n                                  (conj res-list (first init-list)))\n                           (recur (rest init-list)\n                                  (conj res-list\n                                        (+' (first init-list)\n                                            (second init-list))))))))]\n    (lazy-seq (cons coll\n                    (trapezoid (next-iter coll))))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":147,"code":"(fn [r] (iterate\n          (fn [s](concat [(first s)] (map #(apply +' %) (partition 2 1 s)) [(last s)]))\n          r))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn self [v]\n  (let [next\n        (cons (first v) \n          (conj (into [] (for [i (range (dec (count v)))]\n                           (bigint (+ (v i) (v (inc i))))))\n                (last v)))]\n    (cons v (lazy-seq (self (into [] next))))))","problem":147,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [row]  \n  (let [f (fn [row] (conj (first (reduce (fn[[r l] x] [(conj r (+ l x)) x]) [[] 0N] row))\n                          (last row)))]\n       (iterate f row)))","problem":147,"user":"4f05ea25535dcb61093f6c02"},{"problem":147,"code":"iterate (fn [x]\n  (loop [tmp (cond (< (count x) 10)(conj x 0) :else []) mae 0 result[]]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)(first tmp)(conj result (+ mae (first tmp))))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"iterate #(conj (apply vector (first %) \n(map + % (rest %))) (last %))","problem":147,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(let \n  [nxt (fn [as] \n         (concat [(first as)] (map #(apply +' %) (partition 2 1 as)) [(last as)]))]\n  (fn [as] (iterate nxt as)))","problem":147,"user":"52d660eae4b09f7907dd1356"},{"code":"(fn pascal-trapezoid [coll]\n  (letfn [(next-row [row]\n            (map +'\n                 (concat [0] row)\n                 (concat row [0])))]\n    (iterate next-row coll)))","problem":147,"user":"530578ede4b0d8b024fd3760"},{"problem":147,"code":"(fn trap [digits]\n  (let [smoosh #(map +' (concat % [0]) (concat [0] %))]\n    (lazy-seq (cons digits (trap (smoosh digits))))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":147,"code":"#(iterate (fn [seed-coll] \n             (let [base-l (concat [0] seed-coll)\n                   base-r (concat seed-coll [0])]\n              (vec (map + base-l base-r)))) (map bigint %))","user":"5cc80598e4b0ccb061962840"},{"code":"(fn [row]\n    (letfn [(pascal [row]\n        (lazy-seq\n            (let [rowlen (count row)\n                  next-rowlen (inc rowlen)\n                  next-row (apply vector \n                    (map \n                        #(cond\n                            (= % 0) (row 0)\n                            (= % (dec next-rowlen)) (row (dec rowlen))\n                            :else (+ (row %) (row (dec %))))\n                        (range next-rowlen)))]\n                (cons row (pascal next-row)))))]\n        (pascal row)))","problem":147,"user":"4f0b2028535d0136e6c222ff"},{"problem":147,"code":"(fn pascal [s]\n  (let [p (fn [s]\n  (let [n (count s)\n        f1 (fn f [c]\n             (cond\n               (= c 0) (nth s 0)\n               (= c n) (nth s (dec n))\n               :else (+' (nth s (dec c)) (nth s c))))]\n    (into [] (map f1 (range (inc (count s)))))))]\n    (iterate p s)))","user":"5643a11ee4b0018b46ad8bfb"},{"problem":147,"code":"(fn f [s]\n  (iterate #(map (fn [[a b]] (+' a b)) (partition 2 1 (concat [0] % [0]))) s))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":147,"code":"(fn pascals [coll]\n  (lazy-seq \n    (cons coll\n          (pascals (cons (first coll)\n                         (concat (map #(apply +' %)\n                                      (partition 2 1 coll))\n                                 (list (last coll))))))))","user":"571c2babe4b07c98581c3b73"},{"problem":147,"code":"#(iterate (fn [x] ((fn f [[y & r]]\n                    (if r (cons (+' y (nth r 0)) \n                                (f r))))\n                   (flatten [0 x 0]))) \n          %)","user":"539f4e9ee4b0ca733b974498"},{"problem":147,"code":"#(iterate (fn [coll] (mapv (fn [index] (+' (get coll index 0) (get coll (inc index) 0))) (range -1 (count coll)))) %)","user":"54094824e4b0addc1aec66da"},{"problem":147,"code":"(fn [row]\n  (letfn [(next-row [row']\n            (let [[rs,x]\n                  (reduce\n                   (fn [[ps,m] n]\n                     [(conj ps (+' m n)), n])\n                   [[],0] row')]\n              (conj rs x)))]\n    (iterate next-row row))\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn pascals-trapezoid [s]\n  (let [f (fn [s]\n            (map #(apply + %) (partition 2 1 (concat [0] s [0]))))]\n    (iterate f s)))","problem":147,"user":"4ec3b393535dcc7ae8597d59"},{"problem":147,"code":"(fn trap [xs]\n  (let\n    [nxt (map +' (concat [0] xs) (concat xs [0]))]\n    (lazy-seq (cons xs (trap nxt)))\n  )\n)","user":"543bb568e4b032a45b869334"},{"code":"(fn [ir]\n  (letfn [(nextrowtrapezoid [r]\n            (let [inds (range (dec' (count r)))\n                  addfn (fn [n] (+' (nth r n) (nth r (inc' n))))\n                  mid (map addfn inds)]\n              (concat [(first r)] mid [(last r)])))]\n    (iterate nextrowtrapezoid ir)))","problem":147,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn lp [e] (lazy-seq (cons e (lp ((fn [a](concat (cons (first a) (for [i (range 1 (count a))] (+ (get a i) (get a (- i 1))))) (list (last a)))) (vec e))))))","problem":147,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":147,"code":"(fn pascal-trapezoid [c]\n  (iterate (fn [v] (let [inside (map (partial apply +') (partition 2 1 v))]    \n                     (vec (concat [(first v)] inside [(last v)]))))\n           c))","user":"4f7207d3e4b07046d9f4f019"},{"problem":147,"code":"(partial iterate #(concat [(first %)] (map +' % (next %)) [(last %)]))","user":"53908e6be4b0b51d73faae9a"},{"problem":147,"code":"(fn [init]\n  (iterate (fn [row]\n             (map #(apply +' %) (concat (list (list (first row)))\n                            (partition 2 1 row)\n                            (list (list (last row))))))\n           init))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn gen-pascal [row]\r\n    (letfn [(gen-pascal-row [l]\r\n              (conj\r\n               (loop [s l f 0 d []]\r\n                 (if (empty? s)\r\n                   d\r\n                   (recur (rest s) (first s) (conj d (+ f (first s))))))\r\n               (last l)))]\r\n      (lazy-seq\r\n       (cons row (gen-pascal (gen-pascal-row row))))))","problem":147,"user":"4f039524535dcb61093f6b2c"},{"problem":147,"code":"(fn pascal [xs]\n  (let [next-xs (vec (map +' (conj xs 0) (cons 0 xs)))]\n    (cons xs (lazy-seq (pascal next-xs)))\n  )\n)","user":"51f09f3de4b0274c496158d7"},{"code":"(fn [fr]\n    (let [pt (fn [r] (concat [(first r)] (map-indexed #(+ (bigint %2) (nth r (inc %1) 0)) r) ))]\n    (reduce (fn [res n] (conj res (pt (last res)))) [fr] (range  105))\n    ))","problem":147,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn f [x]\n  (let [next #(conj (apply vector (first %) (map +' % (rest %))) (last %))]\n    (cons x (lazy-seq (f (next x))))))","problem":147,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn [v]\n    (letfn [(next-row [v] (apply vector (map (partial apply +) (partition 2 1 (cons 0 (conj v 0))))))]\n        (iterate next-row v)))","problem":147,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":147,"code":"(fn pascal [coll]\n  (lazy-seq\n    (if (vector? (first coll))\n      (cons coll (pascal (vec (cons (first coll) (concat (map #(+' %1 %2) (last coll) (rest (last coll))) (list (last (last coll))))))))\n      (let [c (list coll)]\n        (cons coll (pascal (vec (cons (first coll) (concat (map #(+' %1 %2) (last c) (rest (last c))) (list (last (last c))))))))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":147,"code":"(fn [v] (iterate #(map +' (concat % [0]) (concat [0] %)) v))","user":"539dcb24e4b0b51d73faaf3d"},{"problem":147,"code":"(fn itr [v]\n  (let [tr (fn [v]\n        (->> (concat [0] v [0])\n             (partition 2 1)\n             (map #(apply +' %))))]\n    (concat [v] (lazy-seq (itr (tr v))))))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn ? [s] (lazy-seq\n  (cons s (? `(~(first s)\n               ~@(map (partial apply +) (partition 2 1 s))\n               ~(last s))))))","problem":147,"user":"4f031eac535dcb61093f6a67"},{"code":"iterate #(concat [(first %)] (map +' % (drop 1 %)) [(last %)])","problem":147,"user":"500aa15ee4b03d00572d2d76"},{"problem":147,"code":"(fn pascal-trapeziod\n  [s]\n  (cons s (lazy-seq (pascal-trapeziod (map #(apply +' %) (partition 2 1 (concat [0] s [0])))))))","user":"52561295e4b0541d1855ba03"},{"problem":147,"code":"(fn any-pascal\n  ([last-vec]\n   (lazy-seq (cons last-vec (any-pascal\n                             (flatten (concat [(first last-vec)] (->> (partition 2 1 last-vec)\n                                                      (map (fn [pair] (+' (first pair) (second pair)))))\n                                              [(last last-vec)])))))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":147,"code":"(fn [v]\n  (letfn [(inner-pascal [n-seq]\n                        (mapv #(apply +' %) (partition 2 1 n-seq)))\n          (pascal [n-seq]\n                  (vec (flatten [(first n-seq) (inner-pascal n-seq) (last n-seq)])))]\n    (iterate pascal v)))","user":"52761edae4b03e8d9a4a74d4"},{"problem":147,"code":"(fn anon [r0]\n      (let [r-next (fn [r]\n                     (let [x-l (first r)\n                           x-r (last r)\n                           pairs (partition 2 1 r)\n                           sums  (map #(reduce +' %) pairs)]\n                       (into [] (concat [x-l] sums [x-r]))))]\n        (lazy-seq (cons r0 (anon (r-next r0))))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn pt [row]\n  (let\n    [fe (first row)\n     le (last row)\n     rem-first-last (fn [v] (subvec v 1 (dec (count v))))\n     double-members (fn [v] (flatten (for [x v] [x x])))\n     put-first-last (fn [v, fe, le] (conj (into [fe] v) le))\n     calc \t\t\t(fn [v] (map #(reduce +' %) (partition 2 v)))\n     calc-next-row  (fn [row] \n\t\t\t\t\t\t    (cond\n\t\t\t\t\t\t      (= [1]   row) [1 1]\n\t\t\t\t\t\t      (= [1 1] row) [1 2 1]\n\t\t\t\t\t\t      :else\n\t\t\t\t\t\t\t    (-> row rem-first-last \n\t\t\t\t\t\t\t        double-members \n\t\t\t\t\t\t\t        (put-first-last fe le) \n\t\t\t\t\t\t\t        calc \n\t\t\t\t\t\t\t        (put-first-last fe le))))]\n    (iterate calc-next-row row)))","problem":147,"user":"52cf084ce4b07d0d72b27399"},{"problem":147,"code":"(fn [v]\n   (let [next-row (fn [v]\n                    (mapv #(apply +' %)\n                      (partition 2\n                        (into [0]\n                           (conj (vec (interleave v v)) 0)))))]\n     (iterate next-row v)))","user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn pt [coll] \n    (cons coll (lazy-seq (pt (#(map +' (concat % [0]) (cons 0 %)) coll)))))","problem":147,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":147,"code":"#(reductions (fn [acc x]\n               (into [] (map +' (conj acc 0) (into [0] acc))))\n             % (range))","user":"5097ea89e4b087ccf61a7af4"},{"code":"#(iterate (fn [v] (mapv +' (cons 0 v) (conj v 0))) %)","problem":147,"user":"52b453b0e4b0c58976d9ad21"},{"problem":147,"code":"(fn pascal-next [v]\n  (cons v\n        (lazy-seq\n          (pascal-next (let [next-iter (concat [(first v)] (map +' v (rest v)) [(last v)])]\n                            (vec next-iter))))))","user":"59c7c2cde4b0a024fb6ae54b"},{"code":"(fn [v] (iterate #(vec (map +' (conj % 0) (cons 0 %))) v))","problem":147,"user":"4fabbb97e4b081705acca21d"},{"problem":147,"code":"(fn pascal [s]\n  (let [ledge (first s)\n        redge (last s)]\n    (cons s (lazy-seq\n              (pascal (->> s\n                           (partition 2 1)\n                           (map (partial reduce +'))\n                           (#(conj [ledge] % redge))\n                           flatten\n                           (into [])))))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":147,"code":"(fn [xs]\n  (iterate\n   (fn [row]\n     (let [[x p] (reduce\n             (fn [[acc prev] cur] [(conj acc (+' (or prev 0) cur)) cur])\n             [[] nil]\n             row)]\n       (conj x p)))\n   xs))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":147,"code":"(fn k [s](let[k (fn [d] (concat [(first d)] (map (fn [[a b]] (+' a b)) (partition 2 1 d)) [(last d)]))]\n(iterate k s)))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [row]\n  (letfn [(next-row [row] (vec (map + `(0 ~@row) `(~@row 0))))]\n    (iterate next-row (map bigint row))))","problem":147,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":147,"code":"(fn  [coll]\n  (letfn [(take-two-sum [n coll]\n            (let [self (nth coll (dec n))\n                  self+1 (nth coll n)]\n              (+' self self+1)))\n          (pasc-next [c] (loop [m 1\n                                start (vector  (first c))]\n                           (if (= m (count c))\n                             (conj  start (last c))\n                             (recur (inc m)\n                                    (conj start\n                                          (take-two-sum m c))))))]\n    (iterate pasc-next coll)))","user":"516d227fe4b06f078fab252d"},{"code":"(fn [v]\n  (iterate #(conj (into [(first %)]\n(map +' % (rest %)))\n(last %)) v))","problem":147,"user":"4fca2a13e4b0ee37620e184d"},{"code":"iterate (fn [x] (map (partial + 0N) (concat x [0]) (concat [0] x)))","problem":147,"user":"51cbdee1e4b08d8387cbede1"},{"problem":147,"code":"#(iterate \n         (fn [coll] \n           (concat \n            [(first coll)] \n            (map (fn [[x y]] (+' x y)) (partition 2 1 coll)) \n            [(last coll)])) \n         %)","user":"55249f64e4b0882d96d091c6"},{"code":"(fn [v]\n  (iterate #(map +' (concat % [0]) (concat [0] %)) v))","problem":147,"user":"524b0645e4b09eba1c0223bf"},{"problem":147,"code":"(fn pascalt [startrow] (cons startrow ((fn npascal ([] (npascal startrow)) ([thisrow] (letfn [\n(nextrow [therow] (vec (concat [(first therow)] (for [i (range 0 (- (count therow) 1))] (+' (nth therow i) (nth therow (inc i)))) [(last therow)])))\n] (let [result (nextrow thisrow)] (cons result (lazy-seq (npascal result))))))))))","user":"55f75c6be4b06e875b46cea9"},{"code":"#(letfn [(n [c]\n          (if (nil? (second c)) []\n            (cons (+ (first c) (second c)) (n (rest c)))))]\n  (iterate\n    (fn [c]\n      (concat (cons (first c) (n c)) [(last c)]))\n    %))","problem":147,"user":"4ee4f4a9535d1385b2869d85"},{"problem":147,"code":"(fn pascal-trapezoid [row]\n  (letfn [(pascal [xs] (mapv +' (cons 0 xs)(conj xs 0)))]\n    (cons row (lazy-seq (pascal-trapezoid (pascal row))))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":147,"code":"(fn t [v]\n\t(cons v (lazy-seq (t\n\t\t\t(reduce #(conj %1 (apply +' %2))\n                    []\n                    (partition 2 1 (concat [0] v [0])))))))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [s]\r\n  (letfn [(next[s]\r\n            (let [s (concat s [0])]\r\n              (map + (cons 0 s) s)))]\r\n    (iterate next (map bigint s))))","problem":147,"user":"509c03f3e4b085ae113522a8"},{"problem":147,"code":"(fn pas [coll]\n    (lazy-seq\n         (let [re-vec (reduce (fn [res elems] \n                                (conj res (apply +' elems))) \n                              [(first coll)]\n                              (partition-all 2 1 coll))]\n             (cons coll (pas re-vec)))))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn f [l]\n(letfn \n  [(nr [r] (map #(apply + %) (partition 2 1 (concat [0N] r [0N]))))]\n  (cons l (lazy-seq (f (nr l))))\n  ))","problem":147,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn pascal-trapezoid [row]\n  (letfn [(two-map [f col]\n            (cond\n              (or (empty? col) (empty? (rest col))) []\n              :else (cons (f (first col) (second col))\n                             (lazy-seq (two-map f (rest col))))))\n          (next-row [row]\n            (conj (vec (cons (first row) (two-map + row))) (last row)))]\n    (cons row (lazy-seq (pascal-trapezoid (next-row row))))))","problem":147,"user":"4ddb339c535d02782fcbe9f9"},{"code":"iterate (fn [[x & y]] (reverse (reduce\n    (fn [[x & y] n] (conj y (+' x n) n)) (list x x) y)))","problem":147,"user":"53500869e4b084c2834f4ad3"},{"problem":147,"code":"(partial iterate (fn [xs] (mapv +' (conj xs 0) (cons 0 xs))))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn foo\n  [y]\n  (cons y\n    (lazy-seq\n      (let [partvalues (partition 2 1 y)\n            innerpascal (map #(apply +' %1) partvalues)]\n        (foo (vec (flatten [(first y) innerpascal (last y)])))))))","problem":147,"user":"51f82769e4b09be9c177e527"},{"code":"iterate  #(map +' `[0 ~@%] `[~@% 0])","problem":147,"user":"517bc969e4b07ef0e56148d0"},{"problem":147,"code":"(fn pascal\n  ([] (pascal [1]))\n  ([n] (cons n (lazy-seq (pascal ((fn pascal-row\n  ([] [1])\n  ([current] (pascal-row current (conj [] (first current))))\n  ([current next]\n   (if (<= (count current) 1)\n     (conj next (last current))\n     (let [[a b] current]\n       (recur (rest current) (conj next (+' a b))))))) n))))))","user":"55e206f3e4b050e68259b429"},{"problem":147,"code":"(fn next-row [a] (lazy-seq (cons a (next-row (flatten (conj [] (first a) (map #(+' (first %) (last %)) (partition 2 1 a)) (last a)))))))","user":"50f53694e4b057d4c52de881"},{"code":"(fn __ [v]\n  (lazy-seq\n   (cons v (__ (vec (map +' (cons 0 v) (conj v 0)))))))","problem":147,"user":"512d3304e4b040332b905b2d"},{"problem":147,"code":"(fn pascals-trapezoid\n  [x]\n  (lazy-seq (cons x (pascals-trapezoid (mapv +' (cons 0 x) (conj x 0))))))","user":"5f3103aee4b0574c87022c24"},{"code":"iterate #(map + `(0 ~@%) `(~@% 0))","problem":147,"user":"4e1f9bb5535d04ed9115e80d"},{"code":"(fn pt [xs]\n  (let [nf (first xs)\n        nl (last xs)\n        nyxs (concat [nf] (map #(reduce + %) (partition 2 1 xs)) [nl])]\n    (cons xs (lazy-seq (pt nyxs)))))\n\n;wat\n;(fn f [c]\n;  (lazy-seq `(~c ~@(f (map + `(0 ~@c) `(~@c 0))))))","problem":147,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":147,"code":"(fn pt [n]\n  (lazy-seq\n   (println n)\n   (let [a (conj n 0)\n         b (vec (cons 0 n))]\n     (cons n (pt (vec (map +' a b)))))))","user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":147,"code":"iterate #(concat [(first %)] (map (partial apply +') (partition 2 1 %)) [(last %)])","user":"54ddb556e4b024c67c0cf798"},{"code":"(fn [v]\n  (iterate (fn [ve]\n             (vec (map + (cons 0 ve) (conj ve 0)))) v))","problem":147,"user":"4eae5fe4535d7eef30807325"},{"problem":147,"code":"(fn [ss]\n  (cons ss \n        ((fn pt [s]\n           (let [nextl ((fn [l] \n                          (loop [m (next l)\n                                 r [(first l)]\n                                 p (first l)]\n                            (if (nil? m)\n                              (conj r p)\n                              (recur (next m) (conj r (+' p (first m))) (first m))\n                              ))) s)\n                 ]\n             (cons nextl (lazy-seq (pt nextl))))) \n         ss)))","user":"56051095e4b08b23635d3162"},{"problem":147,"code":"(fn [c] (iterate (fn [x]\n                     (apply vector (map +' (cons 0 x) (conj x 0)))) c))","user":"57d0cd58e4b0bd073c20235e"},{"problem":147,"code":"#(iterate\n   (fn [x]\n     (map + (cons 0N x)(concat x [0N])))%)","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn [t] (iterate (fn [tt] (vec (map + (conj tt 0) (cons 0 tt)))) t))","problem":147,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":147,"code":"#(iterate (fn pasc\n  ([seq] (pasc 0 seq))\n  ([prev seq]\n    (if (empty? seq)\n      (into (vector prev) ())\n      (into (vector (+' prev (first seq))) (pasc (first seq) (rest seq)))))) %)","user":"5e16006be4b0a047bd49f711"},{"code":"(fn [coll]\n  (iterate \n   #(if (= 1 (count %))\n      [(first %) (first %)]\n      (concat [(first %)] (map (fn [[a b]] (+' a b)) (partition 2 1 %)) [(last %)]))\n   coll))","problem":147,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [r]\n  (letfn [(next-row [r]\n                    (let [inner (map (fn [a b] (+' a b )) r (rest r))]\n                      (concat \n                        (cons (first r) inner)\n                        [(last r)])))\n          (pas-trap [r]\n                    (lazy-seq\n                      (cons r\n                            (pas-trap (next-row r)))))] \n         (pas-trap r)))","problem":147,"user":"4dca8b6d535d5973398f9288"},{"problem":147,"code":"(fn [v]\n  (iterate #(mapv +' (conj % 0) (cons 0 %)) v))","user":"596a66cde4b069c0a1a19803"},{"code":"iterate #(vec (map +' (cons 0 %) (conj % 0)))","problem":147,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"iterate\n(fn [x] (let [t (concat [0] x [0])]\n         (map (fn[i] (+' (nth t i)\n                      (nth t (inc i))))\n          (range (inc (count x))))))","problem":147,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [v]\n  (let [next-vector (fn next-vector [v]\n                      (let [first-element (first v)\n                            last-element (last v)\n                            middle-elements (map #(apply +' %) (partition 2 1 v))\n                            ]\n                        (concat (list first-element) middle-elements (list last-element))\n                        ))]\n    (iterate next-vector v)\n    )\n  )","problem":147,"user":"53527551e4b084c2834f4af0"},{"problem":147,"code":"(fn [coll]\n  (iterate\n   (fn [prev-pascal]\n     (let [pascal (cons 0 (conj prev-pascal 0))]\n       (vec (map #(reduce +' %) (partition 2 1 pascal)))))\n   coll))","user":"5cb41c40e4b026601754b911"},{"problem":147,"code":"(fn [s]\n          (iterate  #(mapv +'\n                           (conj % 0)\n                           (cons 0 %))\n \t\t    s))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn *lazy\n  [row]\n  (let [new-row (conj (reduce #(conj %1 (apply +' %2))\n                              [(first row)]\n                              (partition 2 1 row))\n                      (last row))]\n    (cons row (lazy-seq (*lazy new-row)))))","problem":147,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":147,"code":"(fn [row]\n  (let [next-row #(mapv +' (conj % 0) (cons 0 %))]\n    (iterate next-row row)\n    ))","user":"52dc7344e4b09f7907dd13cf"},{"problem":147,"code":"(fn [fst]\n  (iterate #(map +' (concat [0] %) (concat % [0])) fst))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn [row]\n  (iterate\n    (fn [curr-row]\n      (apply vector (concat (list (first curr-row))\n                             (map + curr-row (rest curr-row)) \n                             (list (last curr-row)))))row))","problem":147,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [v]\n             (cons (first v) (map (partial reduce +') (partition 2 1 [] v))))\n           v))","user":"54125eeee4b01498b1a719d3"},{"code":"iterate (fn [v] (map + (concat v '(0)) (cons 0 v)))","problem":147,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn p-trap\n  [input]\n  (iterate #(concat [(first %)]\n                    (map (partial apply +') (partition 2 1 %))\n                    [(last %)])\n           input))","problem":147,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn f [s] (cons s (lazy-seq (f (vec (map +' (conj s 0) (apply conj [0] s)))))))","problem":147,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":147,"code":"(letfn [(pasc-seq [coll]\n            (concat [(first coll)]\n                    (mapv +' (drop 1 coll)\n                            (butlast coll))\n                    [(last coll)]))]\n    (fn pascazoid [l]\n      (lazy-seq (cons l (pascazoid (pasc-seq l))))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":147,"code":";(fn trapezoid [row]\n;  (iterate #(concat [(first %)] (map +' % (rest %)) [(last %)]) row))\n\n(fn [row] (iterate #(mapv +' (cons 0 %) (conj % 0)) row))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":147,"code":"(fn pascal-seq [r]\n  (let [pascal (fn [prevr]\n                 (into [(first prevr)]\n                       ((fn pas-sum [c]\n                          (if-let [x (first c)]\n                            (if-let [y (second c)]\n                              (cons (+' x y) (pas-sum (rest c)))\n                              [x])\n                            [])) prevr)))]\n    (cons r (lazy-seq (pascal-seq (pascal r))))))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":147,"code":"(fn t [xs]\n  (lazy-seq (cons xs (t (vec (map +' (cons 0 xs) (conj xs 0)))))))","user":"53fcd574e4b0de5c418485d9"},{"code":"(fn pt [s]\n  (let [nx (fn [r]\n    (loop [r_ r prev 0 ret '()]\n      (cond\n        (not r_) (into '() (conj ret prev))\n        :else \n          (recur \n            (next r_) \n            (first r_) \n            (conj ret (+ prev (first r_)))))))]\n    (lazy-seq (cons s (pt (nx s))))))","problem":147,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn ! [coll]\n  (cons coll\n          (lazy-seq  (! (vec (map +' (conj coll 0 ) (cons 0 coll)))))))","problem":147,"user":"52be0263e4b07a9af579230e"},{"problem":147,"code":"(fn [coll] (iterate #(into [] (map +' (cons 0 %) (conj % 0))) coll))","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn vecs [v]\n  (let [next-v (vec (map + (concat [0] v) (conj v 0)))]\n    (lazy-seq\n      (cons v (vecs next-v)))))","problem":147,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(letfn [(pascalify [p] (concat [(first p)] (map #(apply +' %) (partition 2 1 p)) [(last p)]))]\n  (fn [p] (iterate pascalify p)))","problem":147,"user":"532347dde4b09d4e7a9b54cc"},{"problem":147,"code":"iterate (fn [x] (concat [(first x)]\n                         (loop [c x acc []]\n                           (if (< (count c) 2) acc (recur (rest c) (conj acc (+' (first c) (second c))))))\n                         [(last x)]))","user":"5d764e52e4b02e6b30c93524"},{"problem":147,"code":"; from dzholev\niterate #(map +' (concat % [0]) (concat [0] %))\n\n; first solution\n#_(fn [coll]\n  (iterate\n    (fn [xs]\n      (reduce #(conj (pop %) (+' (last %) %2) %2) [(first xs) (first xs)] (rest xs)))        \n    coll))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [x] (iterate\n                  #(map +' (conj (vec %) 0)\n                          (into [0] %))\n                  x))","problem":147,"user":"50acbd15e4b071b89ef26234"},{"problem":147,"code":"(fn [row]\n  (letfn [(tri [r]\n            (mapv +' (vec (cons 0 r)) (conj r 0)))\n          (trap [r]\n            (lazy-seq (cons r (trap (tri r)))))]\n         (trap row)))","user":"51b920bfe4b0e871ca4958f9"},{"problem":147,"code":"(fn pascal [s] (lazy-seq (cons s (pascal (map #(apply +' %) (partition 2 1 (flatten [0 s 0])))))))","user":"581dad0ae4b04b46fc4b0f17"},{"code":"(fn [first-row]\n  (iterate\n   \t(fn [s] \n      (vec (map #(+' %1 %2)\n           \t\t(concat [0] s)\n                (concat s [0]))))\n   first-row))","problem":147,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":147,"code":"(fn [init] (next (map (fn [x]\n                                 (loop [i x\n                                        arr init]\n                                   (let [updated-array (loop [j 0\n                                                              arr1 arr\n                                                              new-arr []]\n                                                         (if (> j (- (count arr1) 2))\n                                                           new-arr\n                                                           (recur (inc j) arr1 (concat new-arr [(+' (nth arr1 j) (nth arr1 (inc j)))]))))]\n                                     (if (<= i 1)\n                                       arr\n                                       (recur (dec i) (vec (concat [(first init)] updated-array [(last init)])))))))\n                           (range))))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn[r](iterate(fn[[a & _ :as r]](concat [a](map #(apply + %)(partition 2 1 r))[(last r)]))r))","problem":147,"user":"4dd4034a535dae65d5c462df"},{"problem":147,"code":"(fn pascal [v]\n  (lazy-seq\n   (cons\n    v\n    (->> (concat [0] v [0])\n         (partition 2 1)\n         (map #(reduce +' %))\n         (pascal)\n         )\n    )\n   )\n  )","user":"57cd7498e4b0c746388ab897"},{"problem":147,"code":"(fn trapezoid [s]\n          (let [next-row (fn [s]\n                           (->> (concat [0] s [0])\n                                (partition 2 1)\n                                (map #(reduce +' %))\n                                )\n                           )]\n            (concat [s] (lazy-seq (trapezoid (next-row s)))))\n          )","user":"56791447e4b05957ce8c6183"},{"code":"(fn trap [xs]\n  (cons xs\n        (lazy-seq (trap (map +' (cons 0 xs) (concat xs [0]))))))","problem":147,"user":"4f3a979de4b0e243712b1f10"},{"problem":147,"code":"(fn pascals-trapezoid\n  [row]\n  (let [f (fn [[x & xs :as row]] (concat [x] (map #(apply +' %) (partition 2 1 row)) [(last row)]))\n        r (f row)]\n    (cons row (lazy-seq (pascals-trapezoid r)))))","user":"5383668ee4b06839e8705edd"},{"problem":147,"code":"(fn trapezoid [in]\n  (let [inv (into [] in)\n        result (map\n                 (fn [x y] (+' x y))\n                 (conj inv 0) (cons 0 inv))]\n    (lazy-seq\n      (cons inv (trapezoid result)))))","user":"605b49b7e4b079a07f8593f8"},{"problem":147,"code":"(fn t [%] (let [res (concat [(first %)] (map +' (rest %) %) [(last %)])] (lazy-seq (cons % (t res)))))","user":"5686e652e4b0dcc4269f4059"},{"problem":147,"code":"(partial \n  iterate \n  (fn [row]\n    (let [point (fn [i]\n                  (cond (zero? i) (first row)\n                        (= i (count row)) (get row (dec i))\n                        :else (+' (get row (dec i)) \n                                  (get row i))))]\n      (vec (map point (range 0 (inc (count row))))))))","user":"5af8221ce4b0cc2b61a3bccd"},{"code":"(fn p147[x]\n  (let [mid (map #(bigint (apply + %)) (partition 2 1 x))\n        nr (concat [(first x)] mid [(last x)])]   \n    (cons x (lazy-seq (p147 nr)))))","problem":147,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn  pascal_s-trapezoid [x]\n  (lazy-seq \n   (cons x\n\n         (pascal_s-trapezoid\n          ((fn [x]\n             (conj (first (reduce \n                           \n                           (fn [[a,lxi]  xi] [(conj a (+ (bigint lxi) (bigint xi))),xi])\n                           \n                           [[(first x)],(first x)]\n                           \n                           (rest x))) (last x))) \n           x )))))","problem":147,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":147,"code":"#(iterate (fn [x] (map +' (concat [0] x) (concat x [0]))) %)","user":"5b7bc82ce4b047b03b203726"},{"code":"iterate #(map +' (lazy-cat '(0) %) (lazy-cat % '(0)))","problem":147,"user":"525f51bde4b0cb4875a45dc8"},{"problem":147,"code":"(fn [s]\n  (letfn [(func [x] (cons x (lazy-seq (func (map #(reduce +' %) (partition 2 (list* 0 (conj (vec (interleave x x)) 0))))))))]\n    (func s)))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn p [v]\n  (lazy-seq \n    (cons v (p (vec (map + (cons 0 v) (conj v 0)))))))","problem":147,"user":"4f1d1d95535d64f603146488"},{"code":"(fn [c] (iterate #(vec (map + (cons 0 %) (conj % 0))) (vec (map bigint c))))","problem":147,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn [x] (iterate #(map (fn [a b] (+ (biginteger a) (biginteger b))) (concat [0] %) (concat % [0])) x))","problem":147,"user":"50a4f36be4b0344e360f3bc9"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (lazy-seq\n   (cons coll\n         (pascal-trapezoid\n          (flatten [(first coll)\n                    (mapv #(reduce +' %)\n                      (partition 2 1 coll))\n                    (last coll)])))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":147,"code":"(fn pasc-tr\n\t([] (pasc-tr [1]))\n\t([x]\n\t\t(cons x (lazy-seq (pasc-tr(\n\t\t\t(fn next-row [inrow outrow]\n\t\t\t\t(if (nil? (second inrow))\n\t\t\t\t\t(conj outrow (first inrow))\n\t\t\t\t\t(recur (rest inrow) (conj outrow (+' (first inrow) (second inrow))))\n\t\t\t\t)\n\t\t\t)x [(first x)]))\n\t\t\t)\n\t\t)\n\t)\n)","user":"57c99a45e4b05aa3c4741d31"},{"code":"(fn lazy-pascal [v]\n  (let [left (concat [0] v)\n  right (concat v [0])\n\tnext-row (map + left right)]\n    (cons (vec v) (lazy-seq \n\t\t   (lazy-pascal next-row)))))","problem":147,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"iterate \n#(map (partial reduce +) (partition 2 1 (concat [0] % [0])))","problem":147,"user":"4f06dcad535dcb61093f6c16"},{"problem":147,"code":"(fn [v]\n\t(iterate #(mapv +' (cons 0 %) (conj % 0)) v)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"#(iterate (fn [row] \n            (map (fn [[x y]] (+' x y))               \n                 (partition 2 1 (concat [0] row [0])))) %)","problem":147,"user":"4e7f32ee535db966e863cc3a"},{"problem":147,"code":"(fn f [x]\n  (lazy-seq (cons x (f (vec (map +' (conj x 0) (cons 0 x)))))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [start]\n  (iterate #(map\n             + (cons 0N %) (concat % [0N])) start))","problem":147,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn [n] (iterate #(vec (map +' (conj % 0) (cons 0 %))) n))","problem":147,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn f [xs]\n  (cons xs\n        (lazy-seq (f (conj (into []\n                                 (map-indexed #(+' %2 (get xs (- %1 1) 0))\n                                              xs))\n                           (last xs))))))","problem":147,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":147,"code":"(fn pas [init] (lazy-seq (let [next-level (concat [(first init)] (map-indexed #(+' %2 (nth init (inc %1))) (drop-last init) ) [(last init)  ]   )] (cons init (pas next-level))  ))  )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":147,"code":"#(iterate (fn [coll] \n                      (concat \n                                [(first coll)] \n                                (map (partial apply +') (partition 2 1 coll)) \n                                [(last coll)]))\n                    %)","user":"57a8eba2e4b0a96607956225"},{"problem":147,"code":"(fn ex147\n  [v]\n  (cons v\n        (lazy-seq (ex147 (concat (vector (first v))\n                                 (map (partial apply +') (partition 2 1 v))\n                                 (vector (last v)))))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn [s] (iterate #(loop [q []\n                          p (concat [0] % [0])]\n                     (if (empty? (rest p)) q\n                         (recur (conj q (+ 0N (first p) (second p)))\n                                (rest p))))\n                  s))","problem":147,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":147,"code":"(fn [x] (iterate (fn [y] (cons (first y) (conj (apply vector (map (partial apply +') (partition 2 1 y))) (last y)))) x))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":147,"code":"(fn [row]\n  (iterate\n    (fn next-row [previous-row]\n      (into []\n            (map (fn [e] (reduce +' e))\n                 (partition 2 1 \n                            (conj (into [0] previous-row) 0)))))\n    row))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":147,"code":"(fn pascal [arg]\n  (let [sum-list (fn [a-list]\n                   (loop [a-list a-list\n                          new-list []]\n                     (cond\n                      (empty? new-list) (recur a-list (conj new-list (first a-list)))\n                      (empty? (rest a-list)) (conj new-list (first a-list))\n                      :else (recur (rest a-list) (conj new-list (+' (first a-list) (second a-list)))))))\n        return-list (sum-list arg)]\n    (lazy-seq (cons arg (pascal return-list)))))","user":"571cd9dce4b0145328a76271"},{"code":"(fn trap [row] \n  (cons \n    row \n    (lazy-seq \n     (trap \n      (vec \n       (map +'\n         (cons 0 row) \n         (conj row 0)))))))","problem":147,"user":"521e8227e4b0dd19981ad082"},{"problem":147,"code":"(fn pascal-trapezoid [s]\n  (lazy-seq (let [m1 (apply conj [0] s) m2 (conj s 0)]\n             (cons s (pascal-trapezoid (vec (map +' m1 m2)))))))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":147,"code":"(fn [c](iterate #(map +' (cons 0 %)(concat % [0])) c))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn pascal [xs] \n  (let \n    [next (map + (concat [0N] xs) (concat xs [0N]))]\n    (cons xs (lazy-seq (pascal next)))))","problem":147,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"(fn [start]\n         (let [sum-dig (fn [lst] (map #(apply +' %) (partition 2 1 lst)))\n               do-the-work (fn tt [coll]\n                             (lazy-seq \n                               (let [val (vec (flatten [(first coll) (sum-dig coll) (last coll)]))] \n                               (cons val  \n                                    (tt val)))))]\n   (cons start (do-the-work start))))","problem":147,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [x]\n  (letfn [(lp [s]\n    (cons s (lazy-seq (lp (into [(first s)] (conj (mapv +' (drop 1 s) s) (last s)))))))]\n    (lp x)))","problem":147,"user":"526f9715e4b03e8d9a4a7372"},{"problem":147,"code":"(fn [xs]\n  (iterate\n   #(concat\n     (list (first %))\n     (map-indexed (fn [i x] (+' x (nth % i))) (rest %))\n     (list (last %))\n     ) xs))","user":"5409a12fe4b0addc1aec66df"},{"problem":147,"code":"#(iterate (fn [coll]\n            (let [row-a (concat [0] coll)\n                  row-b (concat coll [0])]\n              (mapv +' row-a row-b))) %)","user":"5250b7a5e4b0541d1855b83e"},{"code":"(fn pt [xs] (lazy-seq (cons xs (pt (map #(apply +' %) (concat [[(first xs)]] (partition 2 1 xs) [[(last xs)]]))))))","problem":147,"user":"4ef9c8f9535dced4c769f26b"},{"problem":147,"code":"(fn infpascals [seed]\n  (let [nextpascalrow (fn [row]\n                     (flatten [(first row)\n                               (take (dec (count row)) (map (partial apply +') (partition 2 1 row)))\n                               (last row)]))]\n    (cons seed (lazy-seq (infpascals (nextpascalrow seed))))))","user":"55f85b93e4b03cbcff9738ae"},{"problem":147,"code":"(fn trapezoid [inseq]\n    (lazy-seq (cons inseq\n        (trapezoid (concat \n            [(first inseq)]\n            (map #(apply +' %) (partition 2 1 inseq))\n            [(last inseq)] )))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":147,"code":"(fn ptzoid [avector]\n  (iterate \n    (fn ptz [v] (vec\n      (map #(apply +' %)  (partition 2 1 (concat [0] v [0])))))  \n    avector))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn triangle [current-row]\n  (letfn [(next-row [row]\n            (concat\n              [(first row)]\n              (map #(apply +' %) (partition 2 1 row))\n              [(last row)]))]\n    (cons current-row (lazy-seq (triangle (next-row current-row))))))","problem":147,"user":"51197750e4b057cba170bc99"},{"problem":147,"code":"(fn pas-trap [xs]\n  (letfn [(one-row [xs] \n    (conj (vec (conj (map #(reduce +' %) (partition 2 1 xs)) (first xs)  )) (last xs))\n    )]\n  \n  \n ; (lazy-seq (cons (one-row xs) (pas-trap (one-row xs))))\n  (lazy-seq (cons xs (pas-trap (one-row xs))))\n  )\n  \n)","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [v]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) v))","problem":147,"user":"528ce039e4b0239c8a67aebc"},{"code":"(fn [coll]\n   (iterate (fn [coll]\n                  (map +' (cons 0 coll) (concat coll [0]))) coll))","problem":147,"user":"4fb99483e4b081705acca2da"},{"problem":147,"code":"(fn pascal [x]\n\n    (if (= (count x) 1)\n\n      (lazy-seq(concat [x] (pascal [(first x) (first x)])))\n\n      (if (= (count x) 2)\n\n        (lazy-seq(concat [x] (pascal (concat [(first x)] (map #(+' %1 %2) (butlast x) (rest x)) [(last x)]))))\n\n        (lazy-seq(concat [x] (pascal (concat [(first x)] (map #(+' %1 %2) (butlast x) (rest x)) [(last x)])))))))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn p [xs]\n  (let [summed-pairs (fn [xs]\n                      (map #(apply +' %) (partition 2 1 xs)))\n        next-row (vec (concat [(first xs)] (summed-pairs xs) [(last xs)]))]\n    (cons xs (lazy-seq (p next-row)))))","problem":147,"user":"5142e808e4b0c172af7558c9"},{"problem":147,"code":"(fn pascal-trapezoid [start]\n  (lazy-seq\n   (cons start\n         (pascal-trapezoid (map +' (concat [0] start) (concat start [0]))))))","user":"57a4fa50e4b0a966079561f1"},{"problem":147,"code":"(fn pascal [seqq]\n  (cons seqq (lazy-seq (pascal (loop [counter 0\n                                      new-seq [(first seqq)]]\n                                 (if (= counter (- (count seqq) 1))\n                                   (conj new-seq (last seqq))\n                                   (recur (inc counter) (conj new-seq (+' (nth seqq counter)\n                                                                          (nth seqq (+ counter 1)))))))))))","user":"558378dce4b05c286339e115"},{"problem":147,"code":"#(iterate (fn [v]\n            (concat [(first v)]\n                    (map +' (rest v) (butlast v))\n                    [(last v)])) %)","user":"530b8580e4b02e82168697cc"},{"code":"(fn pascal-triangles [v]\n  (letfn [(pt [v]\n            (let [sum-of-pairs (map +' v (rest v))\n                  new-v (cons (first v) (conj (vec sum-of-pairs) (last v)))]\n              (lazy-seq\n                (cons new-v (pt new-v)))))]\n    (cons v (pt v))))","problem":147,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":147,"code":"(fn [start-list]\n  (let [pascalnext (fn [coll]\n                     (map +' (cons 0 coll) (conj (vec coll) 0)))]\n    (iterate pascalnext start-list)))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":147,"code":"(fn [start]\n  (iterate\n    (fn [p]\n      (concat\n        [(first p)]\n        (map #(apply +' %) (map list p (rest p)))\n        [(last p)]))\n    start))","user":"5484143de4b0e286459a1197"},{"problem":147,"code":"(fn [inp] (iterate \n(fn [nnn]\n  (let [nn (fn nn [[a & tail]] \n        (if (nil? tail)\n          []\n          (cons (+' a (first tail)) (nn tail))))]\n    (nn (concat [0] nnn [0]))\n  )\n) \ninp))","user":"570d0548e4b0b0fb43fd06d2"},{"problem":147,"code":"(fn f [v]\n    (letfn [(next [v] (vec (concat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)])))]\n      (cons v (lazy-seq (f (next v))))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn [init]\n    (iterate\n     (fn pascals-trapezoid [row]\n       (let [n (count row)]\n         (into []\n               (for [i (range 0 (inc n))]\n                 (cond (= i 0) (row 0)\n                       (> i (dec n)) (row (dec n))\n                       :else (+ (row (dec i)) (row i)))))))\n     init))","problem":147,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":147,"code":"(fn [xs]\n  (iterate \n   (fn [x] \n     (concat [(first x)] (map +' x (rest x)) [(last x)])) xs))","user":"5b81139fe4b047b03b203782"},{"problem":147,"code":"(fn [v0]\n  (iterate \n    (fn [v]\n      (into []\n        (concat (vector (first v))\n          (map +' (butlast v) (rest v))\n          (vector (last v)))))\n   v0))","user":"57f80350e4b0d3187e90090c"},{"problem":147,"code":"(fn ps\n  [row]\n   (lazy-seq\n    (cons row (ps (mapv +'\n                     (conj row 0)\n                     (into [0] row))))))","user":"56069006e4b08b23635d3174"},{"code":"iterate #(mapv (partial apply +')\n               (partition 2 1 (cons 0 (conj % 0))))","problem":147,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [vv] (into [(first vv)]\n                          (conj (mapv #(apply +' %)\n                                      (partition 2 1 vv)) \n                                (last vv))))\n           v))","user":"51dafedee4b09f6bc204eee2"},{"code":"iterate (fn [coll]\n    (let [c (partition 2 1 (flatten [0 coll 0]))]\n        (map #(apply +' %) c)))","problem":147,"user":"50b35486e4b03ea88043356a"},{"code":"(fn next-level [coll]\n  (let [head (first coll)\n        tail (last coll)\n        elems (partition 2 1 coll)\n        level (cons head (flatten [(map (fn [[x y]] (+' x y)) elems) tail]))]\n    (cons coll (lazy-seq (next-level level)))))","problem":147,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [x]\r\n  (iterate #(conj\r\n             (vec\r\n              (cons (first %)\r\n                    (map (partial apply +) (partition 2 1 %))))\r\n             (last %))\r\n           x))","problem":147,"user":"4db4714f535dc0f10411755a"},{"code":"#(iterate (fn [x] (vec (map +' (cons 0 x) (conj x 0))))%)","problem":147,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn pascal [start]\n  (letfn [(pascal-mid [prev]\n            (map +' prev (rest prev)))]\n    (let [row (concat [(first start)] (pascal-mid start) [(last start)])]\n      (cons start (lazy-seq (pascal row))))))","problem":147,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn p\n  [s]\n\t(letfn [(n [r] (concat [(first r)] (map + r (rest r)) [(last r)]))] \n\t\t(cons s (lazy-seq (p (n s))))))","problem":147,"user":"4f047542535dcb61093f6bc7"},{"problem":147,"code":"(fn pascal [v]\n  (lazy-seq \n   (cons v (pascal (mapv +' (conj v 0) (cons 0 v) ))\n    )            \n  )  \n)","user":"56db90d4e4b0ea9b8538f80d"},{"code":"iterate #(mapv +' (into [0] %) (into % [0]))","problem":147,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn p [i]\n            (lazy-seq\n              (cons i\n                    (p\n                     (vec (map + (into i [0])\n                           (cons 0 i)))\n))))","problem":147,"user":"4db8f6c4535d1e037afb219e"},{"problem":147,"code":"(fn pascal [lst]\n(let [pairs (fn pr [[f s & tail :as l]]\n                                  (if (empty? (rest l))\n                                    nil\n                                    (cons\n                                     [f s]\n                                     (pr (rest l)))))\n      pascal-next (fn  [lst]\n                      (conj\n                       (->> (pairs lst)\n                            (map #(apply +' %))\n                            (into [(first lst)]))\n                       (last lst)))]\n  (cons\n   lst\n   (lazy-seq\n    (pascal\n     (pascal-next lst))))))","user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [col] (iterate #(cons (first col) (conj (vec (map +' % (rest %))) (last col))) col))","problem":147,"user":"52b577c9e4b0c58976d9ad39"},{"problem":147,"code":"(fn [init-vec]\n  (let [fst (first init-vec)\n        lst (last init-vec)\n        make-seq (fn make-seq [prev-vec]\n                   (let [mid-vec (vec (->> prev-vec\n                                           (partition 2 1)\n                                           (map #(apply +' %))))\n                         new-vec (concat [fst] mid-vec [lst])]\n                     (lazy-seq\n                      (cons new-vec (make-seq new-vec)))))]\n    (lazy-seq (cons init-vec (make-seq init-vec)))))","user":"55ac07afe4b03311e7b7328f"},{"problem":147,"code":"(fn [s]\n  (iterate (fn [s]\n             (map (partial apply +')\n                  (partition 2 1 (concat [0] s [0]))))\n           s))","user":"5d45749be4b07c84aa5ae6a2"},{"code":"(fn [v]\r\n           (let [calc-row (fn [prev-row]\r\n                            (concat [(first prev-row)] \r\n                                    (map (fn [[a b]] (+ a b)) (partition 2 1 prev-row)) \r\n                                    [(last prev-row)]))]\r\n             ((fn ph [s]\r\n                (lazy-seq \r\n                  (cons s\r\n                        (ph (calc-row s)))))\r\n               v)))","problem":147,"user":"4ef1ee67535dced4c769f219"},{"problem":147,"code":"(fn pascal [v]\n  (cons v \n    (lazy-seq \n   \t  (pascal \n       \t(concat\n          [(first v)]\n          (map #(+' (nth v %) (nth v (dec %))) (range 1 (count v)))  \n          [(last v)]\n)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":147,"code":"(fn pascal-trapezoid [line]\n  (letfn [(next-line [prior-line] (into (conj [] (first prior-line)) (map-indexed #(+' (nth prior-line %1) %2) (conj (vec (rest prior-line)) 0))))]\n    (lazy-seq (cons line (pascal-trapezoid (next-line line))))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":147,"code":"(fn [x]\n\t(iterate (fn [xs] (loop [remaining (concat [0] xs [0]) acc []]\n\t\t(if (< (count remaining) 2)\n\t\t\t(reverse acc)\n\t\t\t(recur (rest remaining) (cons (+' (first remaining) (second remaining)) acc))\n\t\t)\n\t)) x)\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn pascal-seq [row]\n  (letfn\n    [(next-row [row]\n       (vec\n         (map (partial apply +)\n             (partition 2 (interleave (into [0N] row)\n                                      (conj row 0N))))))]\n  (cons row (lazy-seq (pascal-seq (next-row row))))))","problem":147,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(partial iterate\r\n  #(map +' (concat [0] %) (concat % [0])))","problem":147,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn pascal-seq [previous]\n  (letfn [(next-pascal [previous]\n                       (let [totals (into [] (map #(reduce +' %) (partition 2 1 previous)))\n                             first (first previous)\n                             last (last previous)]\n                         (cons first (conj totals last))))]\n    (lazy-seq (cons previous (pascal-seq (next-pascal previous))))))","problem":147,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":147,"code":"(fn lazyPascal [el] (iterate                    \n                          (fn [x] (let [z (partition 2 (concat [0] (mapcat #(list %1 %1) x) [0] ))] \n                                  (map #(+' (first %) (last %)) z)))\n                           el))","user":"5576e78de4b05c286339e075"},{"problem":147,"code":"(fn pascal [s]\n  (lazy-seq (cons s (pascal (concat (list (first s))\n                                    (map +' (drop-last s) (rest s))\n                                    (list (last s)))))))","user":"55495318e4b0a04f79299566"},{"problem":147,"code":"(fn pascal [start-nums]\n   (let [fst (first start-nums)\n         lst (last start-nums)]\n   (lazy-seq (cons start-nums (pascal (concat [fst] (map +' start-nums (rest start-nums)) [lst]))))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn f [x]\n  (cons x (lazy-seq (f (apply vector (map #(bigint (+ %1 %2)) (cons 0 x ) (conj x 0)))))))","problem":147,"user":"518c5236e4b087e178201de0"},{"problem":147,"code":"(fn [initial-row]\n           (iterate (fn [term]\n                      (let [ncoll (concat [0] term [0])\n                            pcoll (partition 2 1 ncoll)\n                            res (map #(apply +' %) pcoll)]\n                        res)\n                      ) initial-row))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn [item]\n  (iterate #(vec (map +' (concat % [0]) (concat [0] %))) item))","problem":147,"user":"4f036d9b535dcb61093f6ac1"},{"problem":147,"code":"(fn g\n  [s]\n  (let [o (flatten [0 s])\n        p (partition-all 2 1 o)\n        q (map #(apply +' %) p)]\n   (cons s (lazy-seq (g q)))))","user":"56a44067e4b0542e1f8d14da"},{"code":"(fn f [v] \n  (cons v (lazy-seq (f ((fn ff [a]\n                          (loop [aa a ans [(first a)]]\n                            (if (= (count aa) 1)\n                              (conj ans (first aa))\n                              (recur (next aa)\n                                     (conj ans (+' (first aa) (second aa))))))) v)))))","problem":147,"user":"52196842e4b0890f2f822bfa"},{"problem":147,"code":"(fn [x] (iterate #(map +' (concat % [0]) (concat [0] %)) x))","user":"55205564e4b08d5046aa8a60"},{"code":"(fn lf [cc]\n  (let [f (fn [c] (vec (map #(bigint (reduce + %)) \n                       (rest (reductions (fn [a b] [(last a) b]) [0] (conj c 0))))))]\n  (lazy-seq (cons cc (lf (f cc))))))","problem":147,"user":"512f06c5e4b0762be4c7aad7"},{"problem":147,"code":"(fn f\n  [lst]\n  (lazy-seq\n    (iterate #(if (= 1 (count %))\n                (vector (first %) (first %))\n                (into []\n                      (concat\n                        (list (first %))\n                        (loop [a (long (first %))\n                               b (long (first (rest %)))\n                               lst (rest %)\n                               lst2 ()]\n                          (if (< (count lst) 2)\n                            (reverse (cons (+ a b) lst2))\n                            (recur (if (< 1000 (first lst))\n                                     (bigint (first lst))\n                                     (first lst)) (if (< 1000 (first (rest lst))) \n                                                                                       (bigint (first (rest lst)))\n                                                                                       (first (rest lst))) (rest lst) (cons (+ a b) lst2))))\n                        (list (last %))))) lst)))","user":"59e778aae4b0249b72820716"},{"code":"(fn [x] (iterate #(mapv +'\n                        (cons 0 %)\n                        (conj % 0))\n                 x))","problem":147,"user":"53034738e4b0d8b024fd373e"},{"code":"(fn [l]\n  (iterate #(map + (cons 0 %) (concat % [0])) l))","problem":147,"user":"4ee82539535d93acb0a66878"},{"problem":147,"code":"(fn pasc3 [coll]\n  (let [f2 (fn pasc2 [coll]\n             (let [f (fn pasc [coll]\n                       (let [one   (first coll)\n                             final (last coll)]\n                         (loop [coll coll\n                                acc  []]\n                           (let [f (first coll)\n                                 s (second coll)]\n                             (if (and f s)\n                               (recur (rest coll) (conj acc (+' f s)))\n                               (if (and one final)\n                                 (concat [one] acc [final])\n                                 [one]))))))]\n               (let [new-col (f coll)]\n                 (println coll new-col)\n                 (cons new-col (lazy-seq (pasc2 new-col))))))]\n    (cons coll (f2 coll))))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":147,"code":"(fn [n] \n\t(iterate \n\t\t(fn [m](vec \n\t\t\t\t(concat \n\t\t\t\t\t[(first m)] \n\t\t\t\t\t(vec (map #(+' (first %) (last %)) (partition 2 1 m))) \n\t\t\t\t\t[(last m)]))) n))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn pascal [v]\n  (lazy-seq (cons v (pascal (vec (map #(bigint (+ % %2)) (cons 0 v) (conj v 0)))))))","problem":147,"user":"50127fbfe4b030d97e4db70f"},{"code":"(fn [base]\n  (iterate\n    (fn [row]\n      (if (= 1(count row))\n        [(first row) (last row)]\n        (concat [(first row)] (map #(apply +' %) (partition 2 1 row)) [(last row)])))\n    base))","problem":147,"user":"504c8165e4b09724c857af31"},{"code":"(fn pt [coll]\n  (lazy-seq\n    (cons coll\n      (pt (concat (cons (first coll) \n                        (map #(reduce + %) (partition 2 1 coll))) \n                  (list (last coll)))))))","problem":147,"user":"4ef4c1ff535dced4c769f23e"},{"problem":147,"code":"#(iterate\n  (fn [v]\n    (flatten\n      (vector\n        (first v)\n        (map +' v (rest v))\n        (last v))))\n  %)","user":"565f8fd2e4b068f2fe63dc41"},{"problem":147,"code":"(fn [coll]\n  (iterate #(map +' (concat [0] %) (concat % [0])) coll)\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":147,"code":"(fn pt [v]\n  (cons v (lazy-seq (pt (concat (list (first v)) \n                                (map #(apply +' %) (partition 2 (interleave v (drop 1 v))))\n                                (list (last v))\n                        ))))\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":147,"code":"(partial\n iterate\n (fn [xs]\n   (mapv +'\n         (concat [0] xs)\n         (concat xs [0]))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":147,"code":"(fn [x] (iterate (fn [k] (into [] (cons (first k) (conj (mapv (fn [z] (apply +' z)) (partition 2 1 k)) (last k))))) x))","user":"5839f079e4b089d5ab817d48"},{"problem":147,"code":"(fn f [v]\n    (let [pairs (partition 2 1 (concat (cons 0 v) [0]))]\n      (cons v (lazy-seq (f (map #(apply +' %) pairs))))))","user":"531bf76fe4b08068f379ed96"},{"problem":147,"code":"(fn ff [a]\n  (iterate (fn [b] \n             (concat \n               (take 1 b)\n               (map #(apply +' %1) (partition 2 1 b)) \n               (take-last 1 b))) \n           a))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [y] (iterate (fn [x] (concat \r\n             [(first x)]\r\n             (map #(+' (first %) (second %)) (partition 2 1 x))\r\n             [(last x)])) y))","problem":147,"user":"503354c3e4b0c6c1199c710c"},{"problem":147,"code":"(fn [c] (iterate #(map +' (cons 0 %) (concat % '(0))) c))","user":"52c45ac8e4b0c2d177d620d9"},{"code":"(fn pascal-trapz [x] (lazy-seq\r\n                        (cons x (pascal-trapz\r\n                                 (map +' (cons 0 x) (lazy-cat x [0]))))))","problem":147,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn f [x]\n  (cons x (lazy-seq (f (map +' (concat [0] x) (concat x [0])))))\n  )","problem":147,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":147,"code":"(fn ptrap [start]\n    (let [next  (fn [prior]\n                  (loop [col (rest prior)\n                         hd  (first prior)\n                         acc [ (first prior) ]]\n                    (if (empty? col) (conj acc (last prior) )\n                        (recur (rest col) (first col) (conj acc (+' hd (first col)))))))]\n      (lazy-seq (cons start (ptrap (next start))))))","user":"57aa290de4b0b8559636fc65"},{"problem":147,"code":";(fn [row]\n;  (iterate #(map +' `(0 ~@%) `(~@% 0)) row))\n\n(fn pas-seq [a] \n   (let [pas (fn [a] \n             (let [a1 (concat [0] a) \n                   a2 (concat a [0]) \n                   b (map +' a1 a2)] \n                   b))] \n   (lazy-seq \n     (concat [a] (pas-seq (pas a) ))))) \n \n \n;  (fn [v] \n;   (iterate #(vec (map + (cons 0 %) (conj % 0))) v))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":147,"code":"(fn tester [x] \n  (let [nxt #(concat [(first %)] (map +' % (rest %)) [(last %)])]\n    (iterate nxt x)))","user":"59f15e20e4b0966464fe6a5a"},{"problem":147,"code":"(fn trap [v]\n  \t(cons v (lazy-seq (trap (cons (first v) (conj (vec (map #(reduce +' %) (map vector v (rest v)))) (last v)))))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":147,"code":"(fn pascals-weirdness\n  [first-row]\n  (iterate\n   (fn single-row\n     [row-n]\n     (flatten\n      [(first row-n)\n      (map #(apply +' %)(partition 2 1 row-n))\n      (last row-n)]))\n   first-row))","user":"51b01309e4b0c53cf2e68a57"},{"code":"(fn pascal [xs]\n  (iterate\n    #(concat\n       [(first %)]\n       (map (partial apply +') (partition 2 1 %))\n       [(last %)])\n    xs))","problem":147,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn [x]\n (let\n  [nextrow \n    (fn [row]\n      (vec (concat [(first row)] (map + row (next row)) [(last row)])))\n  ]\n  (iterate nextrow x)))","problem":147,"user":"4f03154a535dcb61093f6a58"},{"problem":147,"code":"(fn [p]\n\n  (let [next (fn [v]\n               (into []\n                     (for [i (range (inc (count v)))]\n                       (+' (get v (dec i) 0) (get v i 0)))))]\n\n    (iterate next p)))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn [y](iterate (fn[x](concat\n                         (vector (first x))\n                         (map #(apply + %) (partition 2 1 x))\n                         (vector (last x))\n                         )\n                   ) (map bigint y)))","problem":147,"user":"52bbd09ee4b07a9af57922ee"},{"problem":147,"code":"(fn prob147 [row]\n  (iterate #(concat [(first %)]\n                    (map +' % (rest %))\n                    [(last %)])\n                 row))","user":"4ebbff41535dfed6da9c6d78"},{"problem":147,"code":"(fn [seed]\n  (let [nextrow\n  \t(fn [row]\n    \t(map +' (cons 0 row) (concat row [0])))]\n  (iterate nextrow seed)))","user":"52488a46e4b05ef8e38e63e0"},{"problem":147,"code":"(fn [v] (iterate #(mapv +' (conj % 0) (into [0] %)) v))","user":"5259451ce4b0cb4875a45cd7"},{"problem":147,"code":"(fn p147 [a]\n  (let [nf (fn [v] (vec (concat [(first v)] (map +' (butlast v) (rest v)) [(last v)])))]\n    (iterate nf a)\n    ))","user":"54965534e4b0b312c081ff65"},{"problem":147,"code":"(fn f [s]\n                (let [n (vec (concat [(first s)]\n                                     (map (fn [i] (+' (s i) (s (inc i))))\n                                          (range (dec (count s))))\n                                     [(last s)]))]\n                  (lazy-cat [s] (f n))))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn f [n] \n  (lazy-seq \n    (let [r (cond\n        (= (count n) 1) (concat n n)\n        (= (count n) 2) (list (first n) (apply + n) (second n))\n        :else (into [] (concat (list (first n)) (map #(+' (nth n %) (nth n (dec %))) (range 1 (count n))) (list (last n)))))]\n    (cons n (f r)))))","problem":147,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn f [r]\n  (lazy-seq \n    (cons r \n      (f (if (>= 50 (count r))\n           (concat [(first r)]\n                   (map + (rest r) (butlast r))\n                   [(last r)])\n           r)))))","problem":147,"user":"5046b003e4b011c5dfee7727"},{"problem":147,"code":"(fn pascal [row]\n  (iterate (fn pascal' [row]\n             (flatten [(first row)\n                       (map #(apply +' %) (partition 2 1 row))\n                       (last row)]))\n           row))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":147,"code":"(fn [coll]\n  (let [c (map bigint coll)]\n    (iterate (fn [coll] (for [c (partition-all 2 1 (cons 0 coll))] (apply + c))) c)))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":147,"code":"(fn t [row]\n  (lazy-seq\n    (letfn [(next-row [row] \n              (lazy-seq\n                (letfn [(next-item [row0]\n                          (let [x (first row0)\n                                y (second row0)]\n                            (cond \n                              (nil? x) nil\n                              (nil? y) [x]\n                              :else (cons (+' x y) (next-item (rest row0))))))]\n                  (next-item (cons 0 row)))))]  \n      (cons row (t (next-row row))))))","user":"5794fd7be4b0e215f87e8476"},{"problem":147,"code":"(fn pascal\n    ([init]\n     (letfn [(onerep [arr]\n               (map +' (into [0] arr) (conj arr 0)))]\n       (lazy-seq\n        (cons init (pascal (vec (onerep init))))))))","user":"56eaad95e4b04a395b9a040f"},{"code":"(fn [row]\n  (iterate\n   (fn [r]\n     (concat\n      [(first r)]\n      (map-indexed\n       #(+' %2 (nth r (inc %1) 0))\n       r)))\n   row))","problem":147,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(letfn [(worker [a]\r\n           (vec (cons (first a) (map (fn [x] (+ (nth a (dec x))\r\n                                          (if (< x (count a)) (nth a x) 0)))\r\n                               (range 1 (inc (count a)))))))]\r\n   (partial iterate worker))","problem":147,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":147,"code":"(fn pascal-seq\n  [curVec]\n  (let [f (first curVec) l (last curVec) m (partition 2 1 curVec)\n        next (concat [f] (for [mid m] (reduce +' mid)) [l])]\n    (lazy-seq (cons curVec (pascal-seq next)))))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn pascal-trap\r\n  [current_level]\r\n\t(letfn \r\n\t\t[(step [c]\r\n\t\t\t(let [x (partition 2 1 c)]\r\n\t\t\t\t(concat [(first c)]\r\n\t\t\t\t\t\t\t\t(map #(apply + %) x)\r\n\t\t\t\t\t\t\t\t[(last c)])))]\r\n\t(iterate step current_level)))","problem":147,"user":"4e8a0c82535d3e98b802328d"},{"problem":147,"code":"(fn p [i]\n  (let [g (fn [r]\n                   (->> r (partition-all 2 1) (map (partial apply +'))))\n        n (g (cons 0 i))]\n    (cons i (lazy-seq (p n)))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":147,"code":"(fn bla\n  [c]\n  (let [res (map +' `(0 ~@c) `(~@c 0))]\n    (cons c (lazy-seq (bla res)))\n    ))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":147,"code":"(fn [row]\n   (iterate #(map +' `(0 ~@%) `(~@% 0)) row)\n   )","user":"5d90b3b3e4b0915913b1d3fb"},{"problem":147,"code":"(fn pascalt [series]\n  (lazy-seq\n    (let\n      [n (map +' (cons 0 series) (concat series [0]))]\n      (cons series (pascalt n)))))","user":"5592bf9fe4b0c79f6e1db933"},{"code":"(fn my-lazy-seq [v]\n  (let [get-next (fn get-next [pv] (loop [acc [(first pv)] ppv pv]\n                                 (if (= (count ppv) 1)\n                                   (conj acc (last pv))\n                                   (recur (conj acc (+ (bigint  (first ppv)) (bigint (second ppv)))) (rest ppv))\n                                   ) ))\n\n        ]\n     (cons v (lazy-seq (my-lazy-seq (get-next v)))    )\n      ))","problem":147,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":147,"code":"iterate (fn [coll] (concat (list (first coll)) (map #(apply +' %)\n     (partition 2 (rest (interleave coll coll)))) (list (last coll))))","user":"5751f2a2e4b02ea114799292"},{"problem":147,"code":"(fn [v]\n  (letfn [(pascal-row [v]\n             (let [v1 (concat v [0])\n                   v2 (concat [0] v)]\n               (mapv +' v1 v2)))]\n    (iterate pascal-row v)))","user":"5f82609ae4b0c071e6c840f9"},{"problem":147,"code":"(fn pas-seq [a]\n  (let [pas (fn [a]\n            (let [a1 (concat [0] a)\n                  a2 (concat a [0])\n                  b (map +' a1 a2)]\n                  b))]\n  (lazy-seq\n    (concat [a] (pas-seq (pas a) )))))","user":"537e104ce4b06839e8705e9a"},{"code":"(fn pastrap [v]\n  (letfn [(next-line [v]\n            (vec (map + (concat v [0]) (cons 0 v))))]\n    (cons v (lazy-cat (pastrap (next-line v))))))","problem":147,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":147,"code":"(fn patri2 [a] \n    (cons a (lazy-seq (patri2 (concat [(first a)](map +' a (rest a)) [(last a)])))))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":147,"code":"iterate (fn [coll] (concat [(first coll)] (map #(apply +' %) (partition 2 1 coll)) [(last coll)]))","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn o [n]\n      (cons n (lazy-seq (o (concat [(first n)] (map #(reduce (fn [a i] (+ (bigint a) (bigint i))) %) (partition 2 1 n)) [(last n)])))))","problem":147,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [initial-vector]                                          \n  (iterate\n    (fn [previous-vector]\n      (apply vector \n        (map #(apply + %) \n          (partition 2 1 (flatten (list 0 previous-vector 0))))))\n    initial-vector))","problem":147,"user":"4ee3afde535d10e5ff6f5370"},{"code":"(fn s [a]\r\n  (let [b (map bigint a)]\r\n  (lazy-seq (cons b (s (map + (cons 0 b) (conj (into [] b) 0)))))))","problem":147,"user":"4e1fe7f1535d04ed9115e810"},{"problem":147,"code":"(fn [r]\n  (let [f (fn [r] (conj (first (reduce (fn [[r l] x] [(conj r (+ l x)) x]) [[] 0N] r)) (last r)))] (iterate f r)))","user":"5a99b688e4b0d174b936c7a6"},{"problem":147,"code":"(fn [x] \n   (iterate\n   \t (fn [c] \n       (if \n         (= (count c) 1) \n         (into c c)\n         (conj (apply conj [(first c)] (map #(reduce +' %) (partition 2 1 c))) (last c) )\n       ) \n \t ) \n     x\n   )\n )","user":"5676af21e4b05957ce8c6158"},{"problem":147,"code":"(fn pascal [coll]\n (lazy-seq \n   (cons coll (pascal (let [computed (map #(apply + %)  (partition 2 (interleave (concat [0] coll) coll)))\n                            big-int (vec (map #(bigint %) computed))\n                            ]\n                     (conj big-int (last coll) ))))))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":147,"code":"(fn pascal-trapezoid [v]\n  (iterate (fn [x] (vec (map +' (conj x 0) (concat [0] x)))) v))","user":"5eec1001e4b07c55ae4a0502"},{"code":"iterate #(map + `[0 ~@%] `[~@% 0])","problem":147,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":147,"code":"(fn [r] (iterate\n          (fn [row]\n\t    (vec (concat [(first row)] (map #(apply +' %) (partition 2 1 row)) [(last row)] ))) r))","user":"54d7e277e4b0a52adc2e2031"},{"code":"(fn [s] (iterate (fn [n] (vec (map #(apply + %) (partition 2 1 [(bigint 0)] (cons 0 n))))) s))","problem":147,"user":"4f0f174c535d0136e6c22330"},{"code":"(fn p [c]\n  (letfn [(np [c]\n    (loop [c1 (cons 0 c) c2 []] (if (empty? c1) c2 (recur (drop 1 c1) (conj c2 (bigint (reduce + (take 2 c1))))))))]\n      (lazy-seq (cons c (p (np c))))))","problem":147,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":147,"code":"(fn [init]\n  (let [add0s (fn [row] (cons 0 (conj row 0)))\n        nextrow (fn [row] (vec (map +' (add0s row) (rest (add0s row)))))]\n    (iterate nextrow init)))","user":"52950ab6e4b02ebb4ef7501a"},{"problem":147,"code":"iterate #(map + `(0N ~@%) `(~@% 0N))\n\n;(fn [v] (iterate #(mapv +' (cons 0 %) (conj % 0)) v))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":147,"code":"(fn [xs]\n    (iterate #(into [] (map +' `(0 ~@%) `(~@% 0))) xs))","user":"55568a7de4b0deb715856e1c"},{"problem":147,"code":"(fn pascal-trapezoid\n  [s]\n  (lazy-seq (cons s (pascal-trapezoid ((fn sum-seq\n  ([old] (sum-seq old []))\n  ([old new]\n   (if (empty? old)\n     new\n     (sum-seq\n       (drop 1 old)\n       (conj new (+' (first old) (nth old 1 0))))\n     )\n    )\n  ) (into [0] s)))))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [s]\n  (iterate (fn [s1] (map #(apply +' %) (partition 2 (interleave (concat [0] s1)(concat s1 [0]))))) s))","problem":147,"user":"50783762e4b0fc74642bff67"},{"code":"iterate (fn [[h & s :as a]]\n  (concat [h] (map +' a (or s [])) [(last a)]))","problem":147,"user":"4dada16fc9a9d6ed2699dc57"},{"problem":147,"code":"(fn [start]\n   (iterate (fn [s] (concat[(first s)] (map #(apply +' %) (partition 2 1 s)) [(last s)]))\n            start))","user":"545e9cf1e4b01be26fd7467f"},{"problem":147,"code":"(fn [in] (iterate #(let [m1 (conj (apply list %) 0)\n       m2 (conj (apply vector %) 0)] (map +' m1 m2)) in))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"(fn p [x] \n  (cons x (lazy-seq (p \n                     (#(into [] (map +' (cons 0 %) (concat % [0]))) x )))))","problem":147,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [s] (iterate (fn [x] (map #(apply + %) (partition 2 1 (concat [0] x [0])))) s))","problem":147,"user":"4f83665ee4b033992c121c1c"},{"problem":147,"code":"(let\n    [t1\n     (fn t\n  ([x]\n   (t x [(first x)]))\n  ([x y]\n   (loop [x1 x\n          y1 y]\n     (if (empty? (rest x1))\n       (conj y1 (first x1))\n       (recur (rest x1) (conj y1 (+' (first x1) (second x1))))))))]\n  (fn p [x]\n  (lazy-seq\n   (cons x (p (t1 x))))))","user":"566d71b1e4b0a866af6896ca"},{"problem":147,"code":"(fn pascal [c]\n  (lazy-seq\n    (letfn [(next-pascal [c] \n                         (let [left (conj c 0)\n                               right (cons 0 c)]\n                           (mapv +' left right)))]\n      (iterate next-pascal c))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":147,"code":"(fn ptr [r] (lazy-seq (cons r (ptr (map (partial apply +') (partition 2 1 (concat [0] r [0])))))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":147,"code":"(fn [row]\n  (iterate #(mapv +' (conj % 0) (cons 0 %))\n           row))","user":"575cbe44e4b02ea114799374"},{"code":"#(iterate\n  (fn\n   [values] \n   (loop [l 0 remaining values aggr []]\n         (if (empty? remaining)\n             (conj aggr (last values))\n           (recur (first remaining)\n                  (rest remaining)\n                  (conj aggr (+' l (first remaining)))))))\n  %)","problem":147,"user":"4daeabf6edd6309eace4d15c"},{"problem":147,"code":"(fn [xs]\n  (letfn [(next-line [s]\n      (cons\n        s\n        (lazy-seq (next-line\n          (->> s\n            (drop-last)\n            (map +' (rest s))\n            (cons (first s))\n            (reverse)\n            (cons (last s))\n            (reverse))))))]\n    (next-line xs)))","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn [row]\n  (iterate\n   #(mapv +' (conj % 0) (cons 0 %))\n   row))","problem":147,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn [col] (iterate #(apply concat [[(first %)] (map +' (rest %) %) [(last %)]]) col))","problem":147,"user":"52ba2af3e4b07a9af57922cc"},{"code":"(fn [in] (iterate \n          (fn [t] (into []\n                        (map #(apply + %) \n                             (partition 2 1 (cons 0N (conj t 0N))))))\n          in))","problem":147,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":147,"code":"(fn iterate [val]\n  (cons val (lazy-seq (iterate ((fn f \n                                  ([s] (f (concat [0] s [0]) []))\n                                  ([s r] (if (< (count s) 2) r (recur (rest s) (conj r (apply +' (take 2 s))))))) val)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":147,"code":"iterate\n#(map +' (concat [0] %) (concat % [0]))","user":"50ef4e2be4b0a78662fa2653"},{"problem":147,"code":"(fn pascal's-trapezoid [xs]\n  (lazy-seq\n   (cons xs (->> xs\n                 (partition-all 2 1)\n                 (map #(apply +' %))\n                 (cons (first xs))\n                 pascal's-trapezoid))))","user":"583e27e2e4b089d5ab817daa"},{"code":"iterate #(map + `(0 ~@% 0) `(~@% 0))","problem":147,"user":"4f08b15b535dcb61093f6c40"},{"problem":147,"code":"(fn PT [coll]\n  (let [nextseq (fn [coll]\n    (let [coll1 (conj (vec coll) 0)\n          coll2 (cons 0 coll)]\n      (map +' coll1 coll2)))]\n    (lazy-seq (cons coll (PT (nextseq coll))))))","user":"52c672e2e4b0c2d177d6210e"},{"code":"#(letfn [\n  (a [v] \n    (if (= 1 (count v))\n      []\n      (for [x (range (dec (count v)))] \n        (+ (nth v x) (nth v (inc x))))))\n  (b [v1 v2] \n    (conj (vec (cons (first v1) v2)) (last v1)))\n]\n(iterate (fn [x] (b x (a x))) %))","problem":147,"user":"4e8f4f64535d65386fec2149"},{"problem":147,"code":"(fn pascal [x]\n    (iterate \n        #(concat  \n            [(first %)]\n            (map +' % (rest %))\n            [(last %)]) \n        x))","user":"54fdaeace4b07d26eda61d39"},{"problem":147,"code":"(fn [xs] (iterate #(map +' (concat [0] %) (concat % [0])) xs))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(partial iterate\n  (fn [nums]\n    (vec\n      (map \n        +' (conj nums 0)\n           (cons 0 nums)\n      ))))","problem":147,"user":"5041b3c0e4b06d8231e4facf"},{"problem":147,"code":"(fn [s]\n  (iterate\n      #(vec (map (partial apply +') (partition 2 1  (cons 0 (conj % 0)))))\n      s\n      )\n   )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":147,"code":"(fn pascal-trapzeoid [start-coll]\n  (iterate (fn [coll] \n             (map (partial apply +') \n                  (partition 2 1 (concat [0] coll [0])))) \n           start-coll))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":147,"code":"(fn pasc-trap [init-row]\n  (letfn [(add-pairs [coll]\n            (loop [c coll\n                   acc []]\n              (if (<= (count c) 1)\n                acc\n                (recur (rest c) (conj acc (+' (first c) (second c)))))))]\n    (iterate #(vec (flatten [(first %)\n                             (add-pairs %)\n                             (last %)]))\n             init-row)))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn trap [xs]\n  (map second\n    (iterate\n      (fn [[n ys]]\n        (loop [acc [(first ys)] i 1]\n          (if (= i n)\n            [(inc n) (conj acc (last ys))]\n            (recur (conj acc (+ (nth ys (dec i)) (nth ys i)))\n                   (inc i)))))\n      [(count xs) xs])))","problem":147,"user":"4dafa380edd6309eace4d17c"},{"problem":147,"code":"(fn [init]\n  (letfn [(pascal-triangle-r [r]\n            (concat [(first r)] (map +' r (rest r)) [(last r)]))]\n    (iterate pascal-triangle-r init)))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(\nfn next-p [in]\n  (loop [a (first in)\n         b (second in)\n         tail (rest in)\n         out [a]]\n    (if (empty? tail)\n      (cons in\n            (lazy-seq\n             (next-p (conj out a))))\n      (recur\n       (first tail)\n       (second tail)\n       (rest tail)\n       (conj out (+' a b))))))","problem":147,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn pascal-trapezoid [prev]\n  (let [next-interior (map #(+ (nth prev %) (nth prev (+ % 1)))\n                           (range (dec (count prev))))\n        next (concat [(first prev)] next-interior [(last prev)])]\n    (lazy-seq (cons prev (pascal-trapezoid next)))))","problem":147,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"iterate (fn [v] (apply map + (map #(conj % 0) ((juxt vec seq) v))))","problem":147,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":147,"code":"(fn [row]\n  (letfn [(nextrow [r]\n             (let [content (map #(apply +' %) (partition 2 1 r))]\n                (concat (list (first r)) content (list (last r)))))]\n    (iterate nextrow row)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":147,"code":"(fn f [v] (lazy-seq (cons v (f (mapv +' (cons 0 v) (conj v 0))))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":147,"code":"(fn pascal-lazy-seq [row]\n  (letfn [( pascal-next [row]\n  (let [ row-extend (concat (cons 0 row) '(0))]\n    \n     (vec \n      (map #(apply +' %) (partition 2 1 row-extend))))\n    )]\n  (iterate pascal-next row)))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn t\n  [r]\n  (let [n (fn [p]\n            (cons (first p) (map (comp bigint (partial apply +)) (partition-all 2 1 p))))]\n    (cons r (lazy-seq (t (n r))))))","problem":147,"user":"4ff3df0fe4b0678c553fc355"},{"problem":147,"code":"(fn [init]\n    (letfn [(gen-rows [r]\n                      (lazy-cat [r]\n                                (gen-rows (lazy-cat [(first r)]\n                                                    (map +' r (rest r))\n                                                    [(last r)]))))]\n      (gen-rows init)))","user":"554bd33ce4b0a04f7929959a"},{"problem":147,"code":"(fn ptrap [v] (letfn [(computeMiddle [m] (if (= (count m) 2)\n                                              (list (+' (first m) (last m)))\n                                              (concat (list (+' (first m) (second m))) (computeMiddle (rest m)))))]\n                        (iterate #(if (= (count %) 1) [(first %) (first %)] (concat (concat (list (first %)) (vec (computeMiddle %))) (list (last %)))) v)))","user":"56427910e4b08d4f616f5f19"},{"problem":147,"code":"iterate (fn [l]\n  (map #(reduce +' %) (partition 2 1 (concat [0] l [0]))))","user":"524025bce4b0ad64fa01030f"},{"problem":147,"code":"(fn [cols]\n  (iterate\n   (fn [c]\n     (concat [(first c)] (map #(apply +' %) (partition 2 1 c)) [(last c)]))\n   cols))","user":"53fc88e7e4b0de5c418485be"},{"problem":147,"code":"iterate (fn [s] (vec (concat [(s 0)] (mapv +' (rest s) s) [(last s)])))","user":"573ce277e4b05c31a32c080b"},{"problem":147,"code":"#(cons % ((fn turd [row]\n  (lazy-seq\n   (let [b (first row)\n        e (last row)\n        next-row (loop [[x & row] row acc [b]]\n                   (if (empty? row)\n                     (conj acc e)\n                     (recur row (conj acc (+' x (first row))))))\n        ]\n    (cons next-row (turd next-row))))) %))\n\n;total horseshit that the parameter to the function is the first element.","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn pt [v]\n  (lazy-seq (cons v (pt (vec (map +' (cons 0 v) (conj v 0)))))))","problem":147,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn [xs] (lazy-seq (iterate #(map +' (concat [0] %) (concat % [0])) xs)))","problem":147,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":147,"code":"(fn p [rx] (iterate (\n  fn [xs] (concat (take 1 xs) (first \n  (reduce #(vector (conj (first %) (+' %2 (last %))) %2) [[] (first xs)] (drop 1 xs))\n  ) (take-last 1 xs)))\nrx))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn pas [init-line]\n\t(letfn [(next-line-fun [line]\n\t\t\t\t(let [surr-zero (into (into [0] line) [0])]\n\t\t\t\t\t(map (partial apply +') (partition 2 1 surr-zero))))]\n\t\t(cons init-line (lazy-seq (pas (next-line-fun init-line))))))","problem":147,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":147,"code":"(fn doo [coll ]\n    (let [foo (fn foo [coll]\n                (loop [coll coll res [] f (first coll) l (last coll)]\n                    (if (empty? (rest coll))  (cons f (conj res l))\n                        (recur   (rest coll) (conj  res (+' (first coll) \n                                                        (if (nil? (second coll)) 0\n                                                         (second coll)\n                                                )\n                                            ) )\n                                 f l)\n        )\n    )\n) ]\n     (lazy-seq (concat (vector coll) (doo  (into [] (foo coll)))))\n    )\n    )","user":"6038b6b4e4b0d5df2af222ef"},{"problem":147,"code":"(fn [row]\n  (let [f (fn [row] (conj (first (reduce (fn[[r l] x] [(conj r (+ l x)) x]) [[] 0N] row))\n                          (last row)))]\n    (iterate f row)))","user":"538d49e1e4b0b51d73faae6b"},{"code":"(fn out-fn[col]\n  (let [inner-fn (fn [cl]\n  (if (< 10 (count cl))\n  [1 2 3]\n  (map + (conj cl 0) (cons 0 cl))))]\n  (cons col (lazy-seq (out-fn (vec (inner-fn col)))))))","problem":147,"user":"4fc8769be4b0ee37620e1833"},{"problem":147,"code":"(fn solution [v]\n        (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"536e5055e4b0fc7073fd6e6b"},{"problem":147,"code":"(fn [row]\n  (let [next #(map +' (concat % [0]) (concat [0] %))]\n    (iterate next row)))","user":"55d5ee3fe4b0e31453f64a92"},{"problem":147,"code":"(fn [l]\n  (iterate #(concat (map +' % (concat [0] %)) (list (last %))) l)\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":147,"code":"(fn trap [s]\n  (let [next-pascal (fn [t] (concat [(first t)] (map +' t (rest t)) [(last t)]))]\n    (lazy-seq\n     (iterate next-pascal s))))","user":"53d86564e4b0e771c302546b"},{"code":"(letfn [(pt [row]\n                  (vec\n                   (flatten \n                    (reduce \n                     (fn [[result memo] x]\n                       [(conj result (+' memo x)) x])\n                     [[] 0] \n                     row))))]\n          (partial iterate pt))","problem":147,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn next-pascal [xs]\n  (let [pad-left   (cons 0 xs)\n        pad-right  (concat xs [0])\n        row-below  (map + pad-left pad-right)]\n    (lazy-seq\n      (cons xs (next-pascal row-below)))))","problem":147,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [numbers]\n  (let [big-numbers (map bigint numbers)\n        next-row (fn [row] (map #(apply + %) (partition-all 2 1 (cons 0 row))))\n        produce-seq (fn f [ns] (cons ns (lazy-seq (f (next-row ns)))))]\n    (produce-seq big-numbers)))","problem":147,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":147,"code":"(fn a [row]\n  (let [next-row (flatten [(first row) (map #(reduce +' %) (partition 2 1 row)) (last row)])]\n    (cons row (lazy-seq (a next-row)))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":147,"code":"#(iterate \n  (fn [s] \n    (vec (map +' (concat [0] s)(concat s [0]))))\n  %)","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [s]\n\t(iterate (fn [x] (map #(bigint (+ % %2)) (concat x [0]) (cons 0 x))) s))","problem":147,"user":"51c09719e4b0c9c82288293c"},{"problem":147,"code":"(fn [x] (iterate #(concat [(first x)] (map (fn [q] (apply +' q)) (partition 2 1 %)) [(last x)]) x))","user":"5c41db45e4b08cd430848ece"},{"problem":147,"code":"(fn pascal [v]\n  (iterate #(map +' (cons 0 %) (concat % [0])) v))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [coll]\n  (letfn [(pascal [coll]\n            (letfn [(next-pascal [coll]\n                      (concat [(first coll)] (map #(apply + %) (partition 2 1 coll)) [(last coll)]))]\n              (lazy-seq\n               (cons coll (pascal (next-pascal coll))))))]\n    (pascal (map biginteger coll))))","problem":147,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn\n  [s]\n  (let [f (fn pascal\n  [start]\n  (let [row (for [x (concat [[(first start)]]\n                            (partition 2 (interleave (butlast start) (next start)))\n                            [[(last start)]])]\n              (reduce + x))]\n    (cons start (lazy-seq (pascal row)))))]\n    (f (map bigint s))))","problem":147,"user":"511b233ae4b07ab9ec456180"},{"problem":147,"code":"(fn pascal-trap [coll]\n  (lazy-seq (iterate (fn [c]\n                       (map #(+' (first %) (second %))\n                            (partition 2 1 (concat [] [0] c [0])))) coll)))","user":"565654dae4b0f9d632dd849f"},{"problem":147,"code":"(fn f [s] (iterate #(vec (map +' (cons 0 %) (conj % 0))) s))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":147,"code":"(fn [xs]\n    (let [pascal (fn f [l]\n                       (let [ l-1 (lazy-cat l [0])\n                              l-2 (lazy-cat [0] l)\n                             ]\n                     \n                            (map #(bigint (+ %1 %2))  l-1   l-2)))\n         ]\n         (iterate pascal xs)))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn pascal [xs]\n  (lazy-seq\n    (let [xs' (concat [(first xs)] (map +' xs (next xs)) [(last xs)])]\n       (cons xs (pascal xs')))))","problem":147,"user":"53779a26e4b06839e8705e38"},{"problem":147,"code":"(fn f [xs] (lazy-seq (cons xs (f (map #(+' %1 %2) (cons 0 xs) (concat xs [0]))))))","user":"5d81b40ce4b0915913b1d379"},{"code":"iterate (fn f [v] (map + (concat v [0]) (cons 0 v)))","problem":147,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn x [q]\n  (cons \n    q\n    (lazy-seq \n      ((fn c [coll]\n        (x (concat\n          [(first coll)]\n          (map #(+' (first %) (second %)) (partition 2 1 coll))\n\t      [(last coll)]))) q))))","problem":147,"user":"53513d28e4b084c2834f4ae3"},{"problem":147,"code":"(fn [v']\n (iterate\n   (fn [v]\n     (flatten (list (first v) (map #(reduce +' %) (partition 2 1 v)) (last v))))\n   v'))","user":"5a03d246e4b01bb0ae8afd8c"},{"code":"(fn [v] (iterate #(mapv + (cons 0N %) (conj % 0)) v))","problem":147,"user":"514d8084e4b019235f6c0588"},{"problem":147,"code":"(fn pt [input]\n  (let [nxt (map #(apply +' %) (partition 2 1 (concat [0] input [0])))]\n    (lazy-seq (cons input (pt nxt)))))","user":"5463c824e4b01be26fd746c5"},{"code":"(fn [xs] (iterate #(vec (map +' (cons 0 %) (conj % 0))) xs))","problem":147,"user":"513d121fe4b0e544971636a2"},{"code":"(fn [row0]\n  (iterate #(map +' (concat [0] %) (concat % [0])) row0))","problem":147,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [start]\n  (iterate #(map\n             (partial apply +')\n                      (partition-all 2 1 (cons 0 %)))\n             start))","problem":147,"user":"525431dfe4b0541d1855b970"},{"problem":147,"code":"(fn [lst]\n    (letfn [ (pascal-triangle-next [lst]\n               (loop [current [0] lst lst]\n                 (if (empty? lst)\n                   (reverse current)\n                   (let [[cf & cs] current\n                         [lf & ls] lst]\n                     (recur (cons lf (cons (+' lf cf) cs)) ls)))\n                 ))\n               (pascal-trapezoid [lst]\n                                 (cons lst\n                    (lazy-seq (pascal-trapezoid (pascal-triangle-next lst))))\n              )]\n      (pascal-trapezoid lst)\n      ))","user":"55aa1637e4b0988bba2ad949"},{"problem":147,"code":"#(iterate (fn [l] (loop [k 1 r [(first l)]]\n                         (if (= k (count l))\n                           (conj r (last l))\n                           (recur (inc k) (conj r (+' (nth l k) (nth l (- k 1)))))\n                           )\n                         )\n    ) %)","user":"550e0373e4b06e50f9beb162"},{"code":"(fn f [l]\n  (lazy-seq (concat [l] (f (concat [(first l)]\n    (map (fn [[a b]] (+ a b)) (partition 2 1 l))\n    [(last l)])))) \n)","problem":147,"user":"4f1595da535d64f603146444"},{"problem":147,"code":"(fn pascal [xv]\n  (->> (map +'\n            (concat xv [0])\n            (concat [0] xv))\n       pascal\n       (cons xv)\n       lazy-seq))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [first_row]\n  (iterate (fn next_row [prev_row]\n             (concat (take 1 prev_row)\n                     (map +' prev_row (rest prev_row))\n                     (take-last 1 prev_row)))\n           first_row))","problem":147,"user":"510cd1dde4b078ea71921124"},{"problem":147,"code":"(let [pascal-iter\n        (fn [row] \n          (vec (concat [(first row)]\n                       (map +' row (rest row))\n                       [(peek row)])))]\n    (fn [v] (iterate pascal-iter (vec v))))","user":"4fc6305de4b0ee37620e180b"},{"problem":147,"code":"(fn vl [y] \n        (letfn [(f [x] (vec (map #(apply +' %) (partition 2 (interleave (cons 0 x) (conj x 0))))))]\n          (cons y (lazy-seq (vl (f y))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"#(iterate (fn [ls]\n            (let [head [(first ls)]\n                  last [(last ls)]]\n              (concat head\n                      (map +' ls (next ls))\n                      last)))\n          %)","problem":147,"user":"51df825de4b01188f062752b"},{"problem":147,"code":"(fn [v]\n  (iterate #(vec (map +'\n                      (cons 0 %)\n                      (conj % 0)))\n           v))","user":"4db1fe241254ad5b4805fa77"},{"code":"(fn [r] (reductions (fn [v _] (vec (map + (conj v 0) (cons 0 v)))) (repeat (vec (map bigint r)))))","problem":147,"user":"500854c4e4b028e089d3518c"},{"problem":147,"code":"#(iterate (fn [s] (into [] (map +' (cons 0 s) (conj s 0)))) %)","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn [v] (iterate #(map + (cons 0 %) (concat % [0])) v))","problem":147,"user":"4efd8b67535de96065cf5085"},{"code":"(fn pt [s] (lazy-seq (cons s (pt (map (fn [x] (+' (first x) (second x))) (partition 2 (concat [0] (interleave s s) [0])))))))","problem":147,"user":"536f2faee4b0fc7073fd6e79"},{"problem":147,"code":"(fn pascal [row]\n  (lazy-seq (cons row \n                  (pascal (conj (vec (cons (first row) \n                                           (map +' row (rest row))))\n                                       (last row))))))","user":"568f2059e4b0dcc4269f40df"},{"problem":147,"code":"(fn pastra [a-row]\n\t(lazy-seq\n\t\t(cons a-row (pastra (map +' (cons 0 a-row) (concat a-row '[0]))))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn [n]\n  (let [x (vec (map #(bigint %) n))]\n   (iterate\n    #(vec (map + (into [0] %) (conj % 0))) x)))","problem":147,"user":"51929214e4b08962174cf74c"},{"problem":147,"code":"(fn pascal-triangle [x]\n  (letfn [(stepper [x]\n            (-> (into [(first x)] (map #(reduce +' %1N) (partition 2 1 x)))\n                (conj (last x))))]\n    (iterate stepper x)))","user":"5e9771dee4b0157ca96647d0"},{"problem":147,"code":"(fn triangle [xs]\n    (lazy-seq \n     (cons xs (triangle (map +' (concat [0] xs) (concat xs [0]))))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn step [level-1]\n  (lazy-seq (cons level-1\n                  (step (map #(apply + %)\n                             (partition 2 1 (concat [0N] level-1 [0N])))))))","problem":147,"user":"52a55adee4b0c58976d9abe7"},{"problem":147,"code":"(fn f [x]\n  (cons x (lazy-seq\n           (f (map #(apply +' %) (cons (list (first x)) (partition-all 2 1 x)))))))","user":"53523ae0e4b084c2834f4aee"},{"code":"(fn pascal-seq [init]\n  (let [iter (fn [r]\n               (loop [s r v [(first init)]]\n                 (if (empty? (rest s))\n                   (conj v (last init))\n                   (recur (rest s) (conj v (+ (first s)\n                                              (second s)))))))]\n    (cons init (lazy-seq (pascal-seq (iter (map bigint init)))))))","problem":147,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(partial iterate\n         (fn [nums]\n           (vec\n            (map +' (conj nums 0) (cons 0 nums)))))","problem":147,"user":"50b0cffae4b009df37c708c5"},{"code":"#(iterate (fn [xs]\n  \t\t\t(lazy-seq \n   \t\t\t\t(cons (first xs) \n         \t\t\t(map (partial apply +') (partition-all 2 1 xs))))) %1)","problem":147,"user":"53691dc7e4b0243289761e97"},{"problem":147,"code":"(letfn [(nrow [s] ((fn [[h & r] acc] (if (empty? r) (conj acc h) (recur r (conj acc (+' h (first r)))))) s [(first s)]))]\n       #(iterate nrow %))","user":"51c3c6a6e4b0851ac09658f8"},{"problem":147,"code":"(fn pascTrapezoid [lst1]\n  (iterate (fn [lst]\n             (reverse (vec (cons (last lst1)\n                                 (reverse (cons (first lst1) (for [x (range (dec (count lst)))]\n                                                               (+' (nth lst x) (nth lst (inc x)))))))))) lst1))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":147,"code":"(fn p [row] (cons row (lazy-seq (p (map +' (cons 0 row) (conj (vec row) 0))))))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn pascal-t [v]\n    (letfn [(produce-pairs [xs]\n              (loop [[x y & more] xs\n                     acc []]\n                (if (nil? y)\n                  acc\n                  (recur (list* y more) (conj acc [x y])))))]\n      (iterate\n       #(map (partial reduce +') (produce-pairs (flatten [0 %1 0])))                                                                                                           \n       v)))","problem":147,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":147,"code":"(fn pascal-seq [lst]\n  (lazy-seq (cons lst (pascal-seq (map +' (concat lst [0]) (cons 0 lst))))))","user":"58134ba8e4b0f478707a060b"},{"problem":147,"code":"#(iterate (fn[s] (conj (into [(first s)] (map (fn[[a b]](+' a b)) (partition 2 1 s))) (last s))) %)","user":"57b3efb1e4b0fbc9809a278a"},{"problem":147,"code":"(fn [sqn]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) sqn))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn pascal-trapezoid [r]\n  (letfn [(nxt [row] (concat [(first row)] (map + row (rest row)) [(last row)]))]\n    (cons r (lazy-seq (pascal-trapezoid (nxt r))))))","problem":147,"user":"4e7f51eb535db966e863cc3f"},{"problem":147,"code":"(fn trapez2 [x] \n (let [next_pas (fn [s] (map +' (cons 0 s) (concat s [0])))]\n  (iterate next_pas x)))","user":"54b54d1be4b05787c3b1639c"},{"problem":147,"code":"(fn [xs]\n  (iterate #(map +'\n                 (cons 0 \n                       (apply list %))\n                 (conj (vec %) \n                       0))\n           xs))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":147,"code":"(partial iterate (fn [row] (#(mapv +' % (rest %)) (concat '(0) row '(0)))))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":147,"code":"(fn [f1 f2 c] (iterate #(f1 f2 %) c))\n(fn [f2 c]\n  (reverse (cons (last c) (reverse (conj\n    (map #(f2 c %) (range 1 (count c))) (first c))))))\n(fn [c n] (+' (nth c n) (nth c (dec n))))","user":"5e08c3dde4b0978307768fc8"},{"problem":147,"code":"(fn [x]\n  (let [f (fn [x] (conj (first (reduce (fn [[r l] y] \n                                         [(conj r (+ l y)) y])\n                                       [[] 0N] x))\n                        (last x)))]\n    (iterate f x)))","user":"5460f59ce4b01be26fd74695"},{"problem":147,"code":"#(iterate (fn [xs] (concat (map +' (cons 0 xs) xs) [(last xs)])) %)","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn pt [coll]\n (let [pascal (fn [c]\n               (reverse\n                (conj\n                (reverse (conj \n                  (map #(reduce + %) (partition 2 1 c))\n                  (first c)))\n                  (last c))))]\n   (cons coll (lazy-seq (pt (pascal (map bigint coll)))))))","problem":147,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [a]\n  (iterate\n    #(concat [(bigint (first %))]  (map + % (drop 1 %)) [(bigint (last %))])\n    a))","problem":147,"user":"52a88c4de4b0c58976d9ac30"},{"problem":147,"code":"(fn trapy \n[s]\n(let[next-row (fn[s]\n (->> (concat [0] s [0])\n(partition 2 1)\n(map #(apply +' %))))]\n(concat [s](lazy-seq (trapy (next-row s))))))","user":"52faf67ce4b047fd55837005"},{"problem":147,"code":"#(iterate\n  (fn [s]\n    (map +'\n         (concat [0] s)\n         (concat s [0])))\n  %)","user":"551ed214e4b08d5046aa8a4d"},{"problem":147,"code":"#(iterate (fn [x] (mapv +' (cons 0 x) (conj x 0))) %)","user":"545ddac3e4b01be26fd74676"},{"code":"(fn pascals-trapezoid\n  [row]\n  (cons (seq row)\n        (lazy-seq\n         (pascals-trapezoid\n          (map (partial reduce +')\n               (partition 2 1 (concat [0] row [0])))))))","problem":147,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn [coll]\n  (letfn [(next-row [row]\n            (let [c (count row)\n                  f (bigint (first row))\n                  l (bigint (if (> c 1)\n                      (last row)\n                      f))\n                  mid (for [n (range 1 c)]\n                        (+ (get row n)\n                           (get row (dec n))))]\n              (vec\n               (flatten\n                (if (> c 1)\n                  (list f mid l)\n                  (list f l))))))]\n    (iterate next-row coll)))","problem":147,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":147,"code":"(fn __ [avec]\n(let [nextrow (fn [v] (vec (map #(apply +' %) (partition 2 1 (concat [0] v [0])))))]\n    (lazy-seq\n        (cons avec (__ (nextrow avec))))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":147,"code":"(fn pascal [s]\n  (cons s (lazy-seq\n    (pascal (map (partial apply +') (partition 2 1 (concat [0] (vec s) [0])))))))","user":"53c649d3e4b00fb29b221297"},{"problem":147,"code":"(fn x[a] \n    (lazy-seq \n    ( concat [a] ( x (concat [(first a)] (for [i (range (- (count a) 1))] (+' (nth a i) (nth a (inc i)))) [(last a)]) ))\n     )\n)","user":"5b3aa98be4b02d533a91bbca"},{"problem":147,"code":"(fn [v]\n  (let [next-row #(map +' (conj (vec %) 0) (cons 0 (vec %)))]\n  (iterate next-row v)))","user":"5250a13ee4b0541d1855b839"},{"problem":147,"code":"(fn p146 [coll]\n  (let [newrow (->> (map #(+' (nth coll %) (nth coll (+' % 1))) (range 0 (-' (count coll) 1)))\n                    (cons (first coll))\n                    (reverse)\n                    (cons (last coll))\n                    (reverse)\n                    (into [])\n                    )]\n    \n    (lazy-cat [coll] (p146 newrow))\n    ))","user":"5400e918e4b0de5c41848619"},{"code":"(fn trap [coll]\n  (lazy-seq (cons coll\n    (trap\n      (let [f (first coll)\n            l (last coll)]\n        (vec (reverse (conj (reverse (conj (map #(reduce + %) (partition 2 1 coll)) f)) l))))))))","problem":147,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":147,"code":"(fn [v] (iterate #(map +' (concat % [0]) (cons 0 %)) v))","user":"53572176e4b04ce2eb3ed276"},{"code":"#(->> % (iterate (fn [c] (concat (take 1 c), (map + c (rest c)), (take-last 1 c)))))","problem":147,"user":"4daec9dcedd6309eace4d15f"},{"problem":147,"code":"(fn pascal\n  [vec]\n  (letfn [(next-pascal [vec] (map #(reduce +' %) (partition 2 1 (concat '(0) vec '(0)) )))]\n    (cons vec (lazy-seq (pascal (next-pascal vec))))\n    ))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":147,"code":"(fn trap [v]\n  (if (= (count v) 1) \n    (cons v (lazy-seq (trap (conj v (first v)))))\n    (let [els (map #(reduce +' %) (partition 2 1 v))]\n      (cons v (lazy-seq (trap (conj (apply vector (first v) els) (last v))))))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":147,"code":"(fn [c]\n  (iterate (fn [c]\n             (cons (first c) \n                   (map #(apply +' %)\n                        (partition-all 2 1 c))))\n           c))","user":"53ea5851e4b036ad0777e4e4"},{"problem":147,"code":"(fn trap[lst]\n  (iterate (fn[lst] (concat (list (first lst))\n                            (butlast (map-indexed (fn[n a] (+' a (nth lst (inc n) a))) lst))(list(last lst))))lst))","user":"57fc08d8e4b0d3187e900988"},{"problem":147,"code":"(fn [v]\n  (letfn [(nextv [v]\n            (let [fe (first v)]\n              (if (= 1 (count v))\n                [fe fe]\n                (concat [fe] (map #(reduce +' 0 %) (partition 2 1 v)) [(last v)]))))]\n    (iterate nextv v)))","user":"5576f299e4b05c286339e077"},{"problem":147,"code":"#(iterate (fn [v] (vec (map +' (cons 0 v) (conj v 0)))) %)","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn p-trap [xs]\n  (lazy-seq\n    (let\n      [r (map +' (into [0] xs) (conj (vec xs) 0))]\n      (cons xs (p-trap r)))))","problem":147,"user":"50e4f4e9e4b049a987753896"},{"problem":147,"code":"(fn pascal-trapezoid [row]\n           (let [formatting (fn [row] (concat [0] row [0]))\n                 parents (fn [row] (partition 2 1 (formatting row)))\n                 next-step (fn [row] (mapv (fn [a] (reduce +' a)) (parents row)))]\n             (iterate next-step row)))","user":"5b337ff4e4b025bcb146f339"},{"problem":147,"code":"(fn foo [n] (iterate #(map +' (concat [0] %) (concat % [0])) n))","user":"5f3567d6e4b0574c87022c44"},{"problem":147,"code":"(fn p [v]\n  (let [v2 (concat [(first v)]\n                   (map #(apply +' %) (partition 2 1 v))\n                   [(last v)])]\n    (cons v (lazy-seq (p v2)))))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [x] \n\t(let [coll (map bigint x)]\n\t(iterate \n\t\t(fn [coll]\n\t\t\t(map #(+ % %2) (concat [0] coll) (concat coll [0])))\n\t\tcoll)))","problem":147,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [s] (iterate  #(map +' `[0 ~@%] `[~@% 0]) s))","problem":147,"user":"51b793d3e4b0d906fcd71d38"},{"problem":147,"code":"(fn pt [x]\n  (let [t (map +' (concat [0] x) (concat x [0]))] \n    (lazy-seq (cons x (pt t)))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":147,"code":"(fn [seed-row]\n  (iterate (fn [row]\n             (map +' (concat [0] row) (concat row [0])))\n           seed-row))","user":"5424c523e4b01498b1a71b03"},{"problem":147,"code":"(fn pascal-triangles [init]\n  (let  [next-line (fn  [xs]\n                     (concat [(first xs)] \n                             (map #(apply +' %) (partition 2 1 xs))\n                             [(last xs)]))]\n    (iterate next-line init)))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":147,"code":"(fn pts [c]\n  (lazy-seq\n   (cons\n    c\n    (pts (vec (map +' (cons 0 c) (conj c 0)))))))","user":"53e4fa2ce4b036ad0777e454"},{"problem":147,"code":"(fn trapezoid [v]\n  (let [row (fn [v]\n              (-> (vector (first v))\n                  (into (map #(reduce +' %) (partition 2 1 v)))\n                  (conj (last v))))]\n    (lazy-seq (cons v (trapezoid (row v))))))","user":"4daf907aedd6309eace4d17b"},{"problem":147,"code":"(fn [coll]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) coll))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn [m] (iterate #(map +' (concat %1 [0]) (concat [0] %1)) m))","problem":147,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn pts [row]\n  (let [next-row\n    (->> row\n        (partition-all 2 1)\n        (map #(apply +' %))\n        (cons (first row)))]\n    (lazy-seq (cons row (pts next-row)))))","problem":147,"user":"4f1abbfb535d64f60314646e"},{"problem":147,"code":"(fn p-trap [xs]\n  (let [a [(first xs)]\n        z [(last xs)]]\n    (cons xs\n          (lazy-seq\n           (p-trap (concat a\n                           (map (partial apply +')\n                                (partition 2 1 xs))\n                           z))))))","user":"5ab16992e4b073f1774425c4"},{"problem":147,"code":"#(iterate \n  (fn [coll]\n    (let [f (first coll)\n          l (last coll)]\n      (concat [f] (map +' coll (next coll)) [l])\n     )\n   )\n  %)","user":"593dfe60e4b069cdc2982bb1"},{"code":"(fn [col] (iterate #(map +' (concat [0] %)  (concat % [0])) col))","problem":147,"user":"51f2a491e4b0210f90e74553"},{"problem":147,"code":"(fn [x]\n   (letfn [(p [a]\n              (conj (vec\n                     (->> (rest a)\n                          (interleave a)\n                          (partition 2)\n                          (map (fn [[a b]] (+' a b)))\n                          (cons (first a))))\n                    (last a)))]\n         (iterate p x)))","user":"54344721e4b0b6b47310fcea"},{"code":"(fn [s]\n    (iterate\n      #(->> (partition 2 1 (concat [0] % [0]))\n            (map (partial apply +)))\n      s))","problem":147,"user":"4f569a3ce4b0a7574ea71828"},{"problem":147,"code":"(fn pascal-triangle [arr]\n  (let [next-row (fn [last-row]\n                   (conj\n                    (reduce #(conj %1 (+' (first %2) (last %2)))\n                            [(first last-row)]\n                            (partition 2 1 last-row))\n                    (last last-row)))]\n    (iterate next-row arr)))","user":"52af7a5ce4b0c58976d9acbd"},{"problem":147,"code":"(fn pasctrap [s]\n  (letfn [(pt [s]\n              (loop [coll s newcoll [(first s)]]\n                (if (< (count coll) 2)\n                  (conj newcoll (last s))\n                  (recur (rest coll) (conj newcoll (+' (first coll) (second coll)))))))]\n  (cons s (lazy-seq (pasctrap (pt s))))))","user":"53791ab7e4b06839e8705e4d"},{"problem":147,"code":"(fn trapatoni [n] \n  (let [left [(first n)]\n        right [(last n)]\n        middle (map +' n (drop 1 n) ) \n        answer (concat left middle right)\n       ]\n    (cons n (lazy-seq (trapatoni answer)))\n  )\n)","user":"542baf7ce4b0dad94371f291"},{"problem":147,"code":"(fn __ [iv]\n    (iterate\n        (fn [r]\n            (->\n                (concat [(first r)] (->> (partition 2 1 r) (map #(apply +' %))) [(peek r)])\n                (vec)))\n        iv))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"iterate #(map + (concat % [0]) (cons 0 %))","problem":147,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [coll]\n  (iterate\n    (fn [r] (concat [(first r)]\n                    (map #(reduce + %) (partition 2 1 r))\n                    [(last r)])) coll))","problem":147,"user":"4db3393e535df7e46ed9b6cc"},{"problem":147,"code":"(fn pascal-triangle [xs]\n  (let [next-seq (fn [seq']\n                   (concat [(first seq')]\n                           (map +' seq' (rest seq'))\n                           [(last seq')]))]\n    (cons xs (-> xs next-seq pascal-triangle lazy-seq))))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn p [i] (lazy-seq (cons i (p (map +' (cons 0 i) (concat i [0]))))))","problem":147,"user":"4e43b0d9535dc968683fc4a3"},{"problem":147,"code":"(fn problem-147 [vec]\n    (lazy-seq\n      (cons vec\n            (problem-147\n              (let [middle\n                    (loop [out []\n                           coll vec]\n                      (if (> (count coll) 1)\n                        (recur (conj out (+' (first coll)\n                                             (second coll)))\n                               (rest coll))\n                        out))]\n                (into [] (concat [(first vec)] middle [(last vec)])))))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn pascal-triangle\n\t[coll]\n\t(cons coll (lazy-seq (pascal-triangle ((fn [c]\n\t\t\t\t\t\t (conj (into [(first c)]\n\t\t\t\t\t\t\t     (map #(apply +' %) (partition 2 1 c))) (last c))) coll)))))","problem":147,"user":"51937eb3e4b04df54c098022"},{"problem":147,"code":"(fn trapezoid [prior]\n    (let [sums  (map (partial apply +') (partition 2 1 prior))\n          next-row (concat [(first prior)] sums [(last prior)]) ]\n      (cons prior (lazy-seq (trapezoid next-row)))))","user":"54d6f22de4b0a52adc2e2023"},{"code":"iterate (fn [x]\n    (cons (first x)\n          ((fn foo [s]\n             (cond\n              (empty? (next s)) (cons (first s) '())\n              :else (lazy-seq (cons (+' (first s) (second s)) (foo (next s)))))) x)))","problem":147,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn [s]\n  (iterate (fn [l] (map + (concat l [0]) (concat [0] l))) s))","problem":147,"user":"4faac363e4b081705acca200"},{"code":"(fn trapezoid [vect]\n  (let [pascal (fn [vect] (apply vector (flatten [(first vect) (map (fn [x] (+ 0N (vect x) (vect (- x 1)))) (range 1 (count vect))) (last vect)])))]\n  (lazy-seq (cons vect (trapezoid (pascal vect)))))\n)","problem":147,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":147,"code":"(fn [row]\n  (let [next-row #(mapv +' (cons 0 %) (conj % 0))]\n    (iterate next-row row)))","user":"555521a5e4b0deb715856e12"},{"problem":147,"code":"#(iterate (fn [coll]\n            (map +' (concat [0] coll)\n                 (concat coll [0]))) %)","user":"60c43b20e4b0e0fa5f1b42c9"},{"problem":147,"code":"(fn __ [s]\n  (cons s\n        (lazy-seq (__ (map +'\n                           (concat s [0])\n                           (concat [0] s))))))","user":"54c271b9e4b045293a27f602"},{"code":"(fn pt [a]\n  (let [f (fn [x] (loop [c (count x),r '()]\n  \t  (cond (zero? c) (conj r (x 0))\n\t\t        (empty? r) (recur (dec c) (conj r (x (dec c))))\n\t\t\t:else (recur (dec c) (conj r (+ (x c) (x (dec c)))))))),\n      r (f a)]\n   (lazy-seq (cons a (pt (apply vector r))))))","problem":147,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":147,"code":"(fn [coll]\n  (iterate\n   (fn [s]\n     (conj\n      (into [(first s)]\n            (map #(apply +' %) (partition 2 1 s)))\n      (last s))) coll))","user":"53f053ebe4b0742d9025b0d3"},{"problem":147,"code":"(fn [s] (iterate (fn [i] (concat [(first i)] (map #(reduce +' %) (partition 2 1 i)) [(last i)])) s))","user":"588fbb39e4b00487982d51bd"},{"problem":147,"code":"(fn p [r]\n  (cons r (lazy-seq (p (map + (cons 0N r) (concat r [0N]))))))","user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":147,"code":"(partial iterate\n           (fn [nums]\n             (vec\n               (map +' (conj nums 0) (cons 0 nums)))))","user":"53ae16e2e4b047364c044472"},{"problem":147,"code":"(fn [row]\n(iterate (fn\n  [row]\n          (->> (cons 0 (conj row 0))\n               (partition 2 1)\n               (vec)\n               (mapv (fn [e] (apply +' e))))) row))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn triangle [xs]\n  (cons xs \n  (let [v1 (concat xs [0]) v2 (concat [0] xs)]\n  (lazy-seq\n  (triangle (map +' v1 v2))))))","problem":147,"user":"51780f88e4b03d69594194c9"},{"problem":147,"code":"(fn t [l]\n  (lazy-seq (cons l (t (map +' (cons 0 l) (concat l [0]))))))","user":"5f2c02d1e4b033932238a65f"},{"problem":147,"code":"(fn pascal-trapezoid-macro [xs]\n  (iterate #(map +' (concat [0] % ) (concat % [0] )) xs))","user":"58e37946e4b005f69f193cae"},{"code":"(fn f [x]\n  (let [y (concat \n            [(first x)]\n            (map #(+ % %2) x (rest x))\n            [(last x)])]\n    (lazy-cat [x] (f y))))","problem":147,"user":"4da3e51330acd6ed10482a68"},{"problem":147,"code":"(fn pascal [v]\n  (lazy-seq\n    (cons v\n          (pascal (->> v\n                       (cons 0)\n                       (partition 2 1 (repeat 0))\n                       (mapv (partial apply +')))))))","user":"52470d42e4b05ef8e38e6350"},{"problem":147,"code":"(fn solution [acc]\n  (lazy-seq (cons acc (solution (mapv +' (concat [0] acc) (concat acc [0]))))))","user":"59a72effe4b066c664927d94"},{"code":"#(iterate (fn x [w](loop [r [] o 0 n w] \r\n  (if (nil? (second n))\r\n\t\t(conj r (+' o (first n)) (first n))\r\n\t\t(recur (conj r (+' o (first n)))(first n) (rest n))\r\n\t\t)))%)","problem":147,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":147,"code":"#(iterate (fn [x] (map (fn [y] (apply +' y)) (partition 2 1 (concat [0] x [0])))) %)","user":"54e0a9c3e4b024c67c0cf7b5"},{"problem":147,"code":"(fn f [l]\n  (let [tri\n          (fn tri\n            ([acc li]\n             (lazy-seq \n              (if \n                (empty? li)\n                (list acc)\n                (cons \n                  (+' acc (first li))\n                  (tri (first li) (rest li))))))\n            ([li] (tri 0 li)))]\n    (iterate tri l)))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":147,"code":";; http://www.4clojure.com/problem/147\n(fn pascals-trapezoid\n  [in-coll]\n  (let [next-line-fn (fn [coll]\n                       (vec \n                        (concat \n                         (cons (first coll) (map #(apply +' %) (partition 2 1 coll))) \n                         [(last coll)])))\n        next-line (next-line-fn in-coll)]\n    (lazy-seq (concat [in-coll] (pascals-trapezoid next-line)))))","user":"5c92105ce4b048ec896c59f7"},{"problem":147,"code":"(fn pt [a]\n  (let [next-triangle (fn [[a & more :as arr]]\n                        (cond\n                          (nil? more) [a a]\n                          :else (conj\n                                 (vec (cons a (map (fn [[x y]] (+' x y))\n                                                   (partition 2 1 arr))))\n                                 (last arr))))]\n    (lazy-seq (cons a (pt (next-triangle a))))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"iterate (fn [s] (reduce #(conj (pop %1) (+' (last %1) %2) %2) [0] s))","problem":147,"user":"526a3412e4b03e8d9a4a721e"},{"problem":147,"code":"(fn [x]\n  (iterate #(conj (into [(first x)] (map +' % (rest %))) (last x))\n           x)\n  )","user":"55d42f78e4b0e31453f64a73"},{"code":"(fn p[v](let [t (flatten [(first v) (map #(reduce +' %)(partition 2 1 v)) (last v)])]\n           (cons v (lazy-seq (p t)))))","problem":147,"user":"4e778d36535d324fb2983d71"},{"problem":147,"code":"(fn [i]\n   (iterate\n  #(map +' (concat [0] %) (concat % [0]))\n  i))","user":"5bab5440e4b0a20761a23475"},{"problem":147,"code":"(fn pascals-trapezoid [s]\n  (let [t (concat (vector (first s))\n                  (map #(apply +' %) (partition 2 1 s))\n                  (vector (last s)))]\n    (cons s (lazy-seq (pascals-trapezoid t)))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":147,"code":"(fn pascalize\n  [init]\n  (iterate\n    (fn pascal\n      [xs]\n      (mapv +' (concat [0] xs) (concat xs [0])))\n    init))","user":"5d609ddde4b0c9e5857d5008"},{"problem":147,"code":"(fn pascal [xs]\n  (let [result (map (partial apply +') (partition 2 1 (concat [0] xs [0])))]\n   (cons xs\n        (lazy-seq (pascal result)))))","user":"534d1173e4b084c2834f4a98"},{"problem":147,"code":"(fn pascal [x]\n  (let [y (concat (take 1 x) (map #(+' (nth x %) (nth x (inc %))) (-> x count dec range)) (-> x last vector))] \n    (lazy-seq (cons x (pascal y)))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":147,"code":"(fn [seqz]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) seqz))","user":"5414b7c4e4b01498b1a719ed"},{"problem":147,"code":"(fn r [c]\n   (cons c (lazy-seq (r (mapv\n                         (partial apply +')\n                         (map vector (cons 0 c) (conj c 0)))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":147,"code":"(fn my-pascal [s]\n  (let [element  (concat [(first s)] \n                  (map #(apply +' %) (partition 2 1 s))\n                  [(last s)])]\n    (lazy-seq (cons s (my-pascal element)))))","user":"5829d588e4b051871117bf4a"},{"problem":147,"code":"(fn pascalize [x]\n  (lazy-seq (->> (for [i (range (count x))]\n                  (let [curr (nth x i)\n                        next (nth x (inc i) nil)]\n                    (if (nil? next)\n                      curr\n                      (+' curr next))))\n                 (concat (take 1 x))\n                 pascalize\n                 (cons x))))\n\n;(fn [v]\n;  (iterate #(vec (map +' (cons 0 %) (conj % 0))) v))","user":"58d2af83e4b03c36ff7e5907"},{"problem":147,"code":"(fn [row]\t\n\t(let [f (fn [row]\n\t\t(into [] (concat (conj [] (first row))(map #(bigint (apply + %)) (partition 2 1 row)) (conj [] (last row)))))]\n\t(iterate f row)))","user":"57644395e4b0994c1922fbf2"},{"problem":147,"code":"(fn pascal-trapezoid [v]\n  (when-let [s (seq v)]\n    (iterate (fn [xs] (vec (cons (first xs) (conj (vec (map #(apply +' %) (partition 2 1 xs))) (last xs))))) s)))","user":"52d84ea7e4b09f7907dd1390"},{"problem":147,"code":"iterate (fn [l] \n           (concat [(first l)] \n                   (#(for [i (range (count %))\n                           :while (< (inc i) (count %))]\n                       (+' (nth % i) (nth % (inc i)))) l) \n                   [(last l)]))","user":"536673a8e4b0243289761e76"},{"code":"(fn s [ll] (letfn [(x [l] (map + (map bigint (conj (seq l) 0)) (conj (vec l) 0)))] (cons ll (lazy-seq (s (x ll))))))","problem":147,"user":"5134973ce4b0230e9f713b42"},{"problem":147,"code":"(fn pt [v]\n  (lazy-seq \n   (cons v \n         (pt (#(map +' `(0 ~@%) `(~@% 0)) v)))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn pascal-trapezoid\r\n  [n]\r\n  (lazy-seq \r\n   (cons n \r\n         (pascal-trapezoid\r\n          (let [a (conj n 0)\r\n            b (vec (cons 0 n))]\r\n            \t\t\t(vec (map +' a b)))))))","problem":147,"user":"4f2942ace4b0d6649770a01e"},{"problem":147,"code":"(fn [coll]\n  (iterate \n   (fn [ik] \n     (map #(apply +' %) (partition 2 1 (flatten [0 ik 0]))))\n   coll))","user":"574abbfbe4b02ea114799200"},{"problem":147,"code":"(fn z [x] (lazy-seq (cons x (z (map (fn [x] (apply +' x)) (partition 2 1 (concat [0] x [0])))))))","user":"58a822e4e4b01a0c0b232950"},{"problem":147,"code":"(fn [s]\n  (iterate\n    (fn [s]\n      (loop [[h & r] s t [(first s)]]\n        (if (empty? r)\n          (conj t h)\n          (recur r (conj t (+' h (first r)))))))\n  s))","user":"556159fae4b0c656e3ff17c7"},{"problem":147,"code":"iterate (fn [v](lazy-cat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)]))","user":"59692530e4b069c0a1a197e4"},{"problem":147,"code":"(fn [begin-row]\n  (iterate (fn [row]\n             (let [fst (first row)\n                   lst (if (>= (count row) 2) (last row) fst)\n                   next-row (concat [fst] (map +' row (drop 1 row)) [lst])]\n               next-row))\n\n           begin-row))","user":"5344fe13e4b084c2834f4a32"},{"problem":147,"code":"(fn f [s]\n    (cons s (lazy-seq (f (flatten (reduce (fn [[a p] v] [(conj a (+' p v)) v]) [[] 0] s)))))\n)","user":"55e1d34ae4b050e68259b421"},{"problem":147,"code":"iterate #(mapv +' `(0 ~@%) `(~@% 0))","user":"5504dd64e4b086ebe8a79c83"},{"code":"#(iterate\n  (fn [x]\n    (concat \n     [(first x)]\n     (map (fn [[i j]] (+ (bigint i)(bigint j))) (partition 2 1 x)) \n     [(last x)])\n    )\n  %\n  )","problem":147,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn rows [base-nums]\n  (lazy-seq\n    (cons base-nums\n          (rows (cons (first base-nums)\n                      (map #(apply + %)\n                           (partition-all 2 1 base-nums)))))))","problem":147,"user":"4e7c8fd1535db169f9c796be"},{"problem":147,"code":"(fn p [r]\n  (cons r (lazy-seq (p (mapv #(apply +' %) (partition 2 1 (apply conj [0] (conj r 0))))))))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":147,"code":"(fn pascal [v]\n  (cons v (lazy-seq (pascal (map +' (concat [0] v) (concat v [0])))))\n  )","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn trapezoid [nums]\n  (let [middle (map (partial apply +') (partition 2 1 nums))\n        next-nums (vec (concat [(first nums)] middle [(last nums)]))]\n  \t(cons nums (lazy-seq (trapezoid next-nums)))\n  )\n)","problem":147,"user":"505345d9e4b0517ede0d0a06"},{"problem":147,"code":"(fn pascal-infty [base]\n  (cons base \n        (lazy-seq (pascal-infty ((fn [row]\n                                   (if (= row [1]) [1 1]\n                                     (concat\n                                      (list (first row))\n                                      (for [p (range 1 (count row))]\n                                        (+'(nth row p) (nth row (dec p))))\n                                      (list (last row)))))\n                                 base)))))","user":"54651faee4b01be26fd746d6"},{"problem":147,"code":"(fn foo [coll]\n          (letfn [(p-tri [prev-coll]\n                    (if (nil? (seq prev-coll))\n                      prev-coll\n                    (map +' (cons 0 prev-coll) (concat prev-coll [0]))))]\n            (iterate p-tri coll)))","user":"5d126728e4b02c15ef02199a"},{"problem":147,"code":"(fn f [o]\n   (lazy-seq\n    (cons o\n          (f\n         (cons (first o)\n               (conj\n          (loop [x o y []]\n           (if (= (count x) 1)\n             y\n             (recur (rest x) (conj y (+' (first x) (second x))) )\n             )\n           )\n          (last o))\n           ) \n         )\n    )\n    )\n   )","user":"51e1c176e4b06a68e693eafb"},{"code":"(fn pt [v]\n  (let [n (dec (count v))\n        m (map +' (take n v) (take n (rest v)))\n        a (conj (into [(first v)] m) (last v))]\n    (cons v (lazy-seq (pt a)))))","problem":147,"user":"4f048f67535dcb61093f6bd3"},{"problem":147,"code":"(fn pascal-trapezoid [xs]\n\t(iterate #(conj (into (vector (first %)) (map (partial apply +') (partition 2 1 %))) (last %)) xs))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [row]\n  (iterate #(map +' (concat % [0]) (concat [0] % [0])) row))","problem":147,"user":"50d882d4e4b01f0871336e69"},{"problem":147,"code":"(fn [xs]\n    (iterate #(mapv +' (into [0] %) (into % [0])) xs))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":147,"code":"#(iterate (fn [ns] (map +' (concat [0] ns) (concat ns [0]))) %)","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"#(iterate (fn [l] (vec (map + (cons 0 l) (conj l 0)))) %)","problem":147,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":147,"code":"(fn trapezoid [coll]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) coll)\n)","user":"59971e2de4b07157cc8daacc"},{"problem":147,"code":"(fn\n  [s]\n  (iterate (fn [row]\n             (flatten [(first row)\n                       (map #(apply +' %) (partition 2 1 row))\n                       (last row)\n                       ])) s))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn p [c]\n  (cons c\n  (lazy-seq (p\n    (map (partial apply +') (partition 2 1 (concat [0] c [0]))))))\n)","problem":147,"user":"504e3aaae4b0f6ff3350c487"},{"problem":147,"code":"(fn pascals-trapezoid [xs]\n  (let [f [(first xs)]\n        l [(last xs)]\n        m (map #(apply +' %) (partition 2 1 xs))]\n    (lazy-seq\n     (cons\n      xs\n      (pascals-trapezoid (concat f m l))))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"#(iterate\n  (fn [xs]\n    (map +' (cons 0 xs) (conj (apply vector xs) 0))\n  )\n  %\n)","problem":147,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":147,"code":"; I know this is butt ugly\n\n(fn pascal-trapezoid\n  [row]\n  (cons row (lazy-seq (pascal-trapezoid ((fn [row]\n                                           (let [ext-row (concat [0] row [0])]\n                                             (loop [[x1 x2 & xs :as remaining] ext-row\n                                                    result []]\n                                               (if (nil? x2)\n                                                 result\n                                                 (recur (rest remaining)\n                                                        (conj result (+' x1 x2))))))) row)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":147,"code":"(fn [rrow]\n  (letfn [(pascalrows [row]\n            (let [nextrow (conj\n                           (into [(first row)]\n                                 (for [[a b] (partition 2 (rest (interleave row row)))]\n                                   (+' a b)))\n                           (last row))]\n              (lazy-seq (cons nextrow (pascalrows nextrow)))))]\n    (cons rrow (pascalrows rrow))))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn [s] (iterate #(concat (vector (first %)) (map (fn [[x y]] (+ x y)) (partition 2 1 %)) (vector (last %))) s))","problem":147,"user":"4dc1bd76535d020aff1edf8d"},{"problem":147,"code":"(fn [coll]\n  (iterate (fn [coll]\n             (mapv +' (conj coll 0) (into [0] coll))) coll))","user":"5cee521ce4b0aaa82f1129dd"},{"code":"(fn [i] (iterate (fn [r] (vec (concat [(r 0)] (map #(apply +' %) (partition 2 1 r)) [(last r)]))) i))","problem":147,"user":"52bdf6bde4b07a9af579230d"},{"problem":147,"code":"(fn [r]\n  (iterate (fn [row]\n             (concat [(first row)] (for [i (range (dec (count row)))]\n                                     (+' (nth row i) (nth row (inc i))))\n                     [(last row)])) r))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn a [col] (cons col (lazy-seq(a (map #(+' %1 %2) (concat [0] col) (concat col [0]))))))","problem":147,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":147,"code":"(fn laz ([r] (lazy-seq (cons r (laz ((fn row [prev] (vec (map #(apply +' %) (partition 2 1 (cons 0 (conj prev 0)))))) r))))))","user":"4eadc217535d7eef30807321"},{"code":"(fn pascal [previous]\n  (let [current (vec (map + (concat previous [0]) (concat [0] previous)))]\n       (cons previous (lazy-seq (pascal current)))))","problem":147,"user":"4dcfbc44535d5973398f92a7"},{"problem":147,"code":"(fn pascal [v]\n  (let [a (first v)\n        o (last v)\n        n (->> v (partition 2 1) (map (fn [[x y]] (+' x y))))\n        r (vec (flatten [a n o]))]\n    (cons v (lazy-seq (pascal r)))))","user":"4fa5c8dde4b081705acca1af"},{"problem":147,"code":"(fn pascals-trapezoid [init]\n  (let [calc (fn [coll] (loop [[head & tail] coll\n                               res [head]]\n                          (if (empty? tail)\n                            (conj res head)\n                            (recur tail (conj res (+' head (first tail))))\n                            )))]\n    (lazy-seq (cons init (lazy-seq (pascals-trapezoid (calc init))))))\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":147,"code":"(fn [i] (iterate (fn [xs] (flatten [(first xs) (map #(apply +' %) (partition 2 1 xs)) (last xs)])) i))","user":"563536f8e4b0bfe05bf117c5"},{"problem":147,"code":"(fn [r]\n  (iterate \n   #(map +' `(0 ~@%) `(~@% 0))\n           r))","user":"5e9d1c75e4b0157ca9664801"},{"code":"iterate #(vec (map +' (apply conj [0] %) (conj % 0)))","problem":147,"user":"5201572be4b0d7096e99ddbb"},{"code":"iterate #(vec (map + (conj % 0)\n                      (cons 0 %)))","problem":147,"user":"4facd2fae4b081705acca22f"},{"problem":147,"code":"iterate (fn f [xs]\n  \t     (mapv (fn [i]\n                (+' (nth xs (dec i) 0)\n                   (nth xs i 0)))               \n             (range (inc (count xs)))))","user":"55c652dde4b0e31453f649bd"},{"problem":147,"code":"(fn [s]\n  (let [build-line (fn [result [a & tail]]\n                     (if (empty? tail)\n                       (conj result a)\n                       (recur (conj result (+' a (first tail))) tail)))\n        next-line (fn [c] (build-line (vector (first c)) c))\n        pt (fn y [x] (cons x (lazy-seq (y (next-line x)))))]\n    (pt s)))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn f [xs]\n  (cons xs (lazy-seq\n            (let [xs (map (partial reduce +) (partition 2 1 (concat [0] xs [0])))] (f xs)))))","problem":147,"user":"4e50b67b535dc968683fc4ed"},{"problem":147,"code":"iterate \n    #(mapv +'\n        (cons 0 %)\n        (conj % 0))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn p-t [coll]\n        (letfn [(p [ret c]\n                   (if (= 1 (count c))\n                       (concat (vector (first coll)) ret c)\n                     (recur (conj ret (+ (bigint (first c)) (bigint (second c)))) (rest c))))]\n               (concat [coll] (lazy-seq (p-t (p [] coll))))))","problem":147,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [xs]\n  (let [row-builder #(loop [xs % result [(first xs)]]\n                           (if (< (count xs) 2)\n                             (conj result (last xs))\n                             (recur (rest xs) (conj result (+ (bigint (first xs)) (bigint (second xs)))))))]\n        (iterate row-builder xs)))","problem":147,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn [xs]\n        (iterate\n         #(vec\n           (map\n            (partial apply +')\n            (partition 2 1 (cons 0 (conj % 0)))))\n         xs))","problem":147,"user":"515cf9b5e4b00901442db1d4"},{"code":"(fn pascal [row] (lazy-seq (cons row (pascal\n  (map (partial apply +) (partition 2 1 (concat [0] row [0])))))))","problem":147,"user":"4e89f46c535d3e98b8023288"},{"problem":147,"code":"(fn p-trap ([s] (lazy-seq (cons s (p-trap s (first s) (last s)))))\n  ([s l r] \n   (loop [left (first s) right (last s) orig s]\n     (letfn  [( get-middle [s] (loop [remaining s cur []]\n                                 (if (> (count remaining) 1)\n                                   (let [next-sum (+' (first remaining) (second remaining))]\n                                     (recur (rest remaining) (conj cur next-sum)))\n                                   cur)))\n              (prep-app-sides [s l r] \n                (vec (reverse (conj  (vec (reverse (conj s r))) l))))]\n\n       (let [next-level (prep-app-sides (get-middle s) left right)] \n         (lazy-seq (cons next-level (p-trap next-level left right))))))))","user":"5ff676a9e4b06df49cee1497"},{"problem":147,"code":";(fn pascal-trapezoid [initial-elements]\n;  (cons\n;    initial-elements\n;    (lazy-seq\n;      (pascal-trapezoid\n;        (flatten\n;          (vector\n;            (first initial-elements)\n;            (map #(+' (first %) (second %)) (partition 2 1 initial-elements))\n;            (last initial-elements)\n;            )\n;          )\n;        )\n;      )\n;    )\n;  )\n(fn pascal-trapezoid [initial-elements]\n  (lazy-seq\n    (cons\n      initial-elements\n      (pascal-trapezoid\n        (map +' (cons 0 initial-elements) (concat initial-elements [0]))\n        )\n      )\n    )\n  )","user":"566639f4e4b0e91d5f5c566b"},{"problem":147,"code":"iterate \n#(apply vector \n  (map +' \n    (cons 0 %)\n    (conj % 0)))","user":"5412646de4b01498b1a719d4"},{"code":"(fn trapezoid [xs]\n  (letfn [(step [xs]\n            (map #(apply + %) (partition 2 1 (concat [0] xs [0]))))]\n    (iterate step xs)))","problem":147,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":147,"code":"#(iterate \n  (fn [nums]\n   (conj (vec (cons (first nums)(map (partial reduce +') (partition 2 1  nums)))) (last nums)))\n  %)","user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [arr]\n  (letfn \n\t[(sumup \n      [arr]\n      (if \n        (= 1 (count arr)) \n        []\n        (cons (+' (first arr) (second arr))\n              (sumup (rest arr))\n              )))\n    (nextele \n      [arr]\n      (vec (sumup (concat [0] arr [0]))))\n  \t(myseq \n      [init]\n      (cons init (lazy-seq (myseq (nextele init))))\n      )]\n    (myseq arr)))","problem":147,"user":"52faec2ee4b047fd55837004"},{"code":"(fn p [v] (cons v (lazy-seq (p (concat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)])))))","problem":147,"user":"4df20dda535d08e6dec9fe23"},{"code":"(fn [v] (iterate (fn [iv] (concat [(first iv)] (map (partial apply +') (partition 2 1 iv)) [(last iv)])) v))","problem":147,"user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn tr3 [coll]\n  (let [coll (flatten coll) n (inc (count coll)) f (first coll) l (last coll)]\n    (letfn [(pt [n i]\n             (cond\n               (= i 1) f\n               (= i n) l\n               :else (+' (nth coll (- i 2)) (nth coll (dec i)))))]\n      (cons coll (lazy-seq (tr3 (map #(pt n %) (range 1 (inc n)))))))))","problem":147,"user":"515e8ce2e4b049add99a053d"},{"code":"(fn pascal [xs]\n  (lazy-seq\n    (cons xs (let [xsvec (vec xs)] (pascal (map-indexed (fn [p _] (+' (get xsvec p 0) (get xsvec (- p 1) 0))) (concat xsvec [0])))))))","problem":147,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":147,"code":"(fn tri [r]\n          (cons r (lazy-seq (tri (mapv +'\n                                       (into [0] r )\n                                       (conj r 0))))))","user":"55895eade4b059ccff29b202"},{"problem":147,"code":"(fn [start]\n    (iterate #(map (partial apply +')\n                   (partition 2 1 (concat [0] % [0])))\n             start))","user":"4f57c913e4b0a7574ea7183f"},{"code":";(fn [xs] (iterate (fn [xs] (let [xa (cons 0 xs) xb (conj xs 0)] (mapv +' xa xb))) xs))\n(fn [xs] (iterate (fn [xs] (let [xa (cons 0 xs) xb (concat xs [0])] (map +' xa xb))) xs))","problem":147,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":147,"code":"(fn [input]\n    (iterate #(concat (list (first %))\n                      (map (partial apply +' ) (partition 2 1 %))\n                      (list (last %)))\n             input))","user":"5f548678e4b0a0bc16850a7e"},{"problem":147,"code":"(fn [row]\n    (letfn [(inner-nums\n              [numbers]\n              (map (partial apply +') (partition 2 1 numbers)))\n            (next-row\n              [numbers]\n              (flatten [(first numbers) (inner-nums numbers) (last numbers)]))]\n\n      (iterate next-row row)))","user":"516385cee4b055933a9ca02d"},{"problem":147,"code":"(fn pt [t]\n  (letfn [(q [s]\n    (let [p (concat [(first s)] (map #(+' (first %) (second %)) (partition 2 1 s)) [(last s)])]\n      (lazy-seq (cons p (q p)))\n   ))]\n  (cons t (q t))))","user":"56bca51ae4b0f26550335963"},{"problem":147,"code":"(fn pascal-trapezoid\n  [coll]\n  (iterate #(mapv +' (conj % 0) (cons 0 %)) coll))","user":"550d9452e4b06e50f9beb15d"},{"problem":147,"code":"(fn [xs]\n  (iterate\n   (fn [ys]\n     (map (partial apply +') (partition 2 1 (concat [0] ys [0]))))\n   xs))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":147,"code":"(fn [x]\n     (iterate \n       #((fn [[x & xs]]\n           (loop [x x xs xs ret []]\n              (if (empty? xs)\n                ret\n                (recur (first xs) (next xs) (conj ret (+ (bigint x) (first xs)))))))\n          (concat [0] % [0])) x))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":147,"code":"(fn pascals-trapezoid [coll]\n  (cons coll\n        (lazy-seq \n          (pascals-trapezoid\n            (concat (list (first coll))\n                    (map (partial apply +') (partition 2 1 coll))\n                    (list (last coll)))))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn pascal [ns]\n  (let [ms (partition 2 1 ns)\n        ls (map #(+' (first %) (second %)) ms)]\n    (lazy-seq (cons ns (pascal (cons (first ns) (concat ls (list (last ns)))))))))","problem":147,"user":"504e13fce4b078edc5f593bc"},{"problem":147,"code":"(fn mytest\n\t[orgset]\n\n  \t(let [pascal (fn [orgset]\n\n\t\t\t\t(concat \n                 \t\t(vector (first orgset)) \n\t\t\t\n\t\t\t\t\t\t(map +' orgset (rest orgset)) \n\t\t\t\n\t\t\t\t\t\t(vector (last orgset))\n\t\t\t\t\t)\n\n\t\t\t\t)\n          \n          ]\n  \n\t(concat (vector orgset)\n\t\t    (lazy-seq (mytest (pascal orgset)))\n\t\t\n\t\t\t)\n\t)\n\t\n  )","user":"55897fe2e4b059ccff29b205"},{"problem":147,"code":"(fn f [xs]\n\t(lazy-seq (cons xs \n                (f (vec (flatten [(first xs) (map (partial reduce +') (partition 2 1 xs)) (last xs)]))))))","user":"56540485e4b0f9d632dd847a"},{"problem":147,"code":"(fn [init-vec]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) init-vec)\n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":147,"code":"(fn i [lst]\n  (cons lst (lazy-seq (i \n                       \n                       (if (= 1 (count lst))\n                         [1 1]\n                         (loop [ini (list (first lst))\n                                lst lst\n                                fin ()\n                                new ()]\n                           (if (empty? lst)\n                             (concat ini (reverse new) fin)\n                             (if (= 1 (count lst))\n                               (recur ini () lst new)\n                               (recur ini (rest lst) fin (cons (+' (first lst) (second lst)) new))))))))))","user":"57f8104ce4b0d3187e900910"},{"problem":147,"code":"(fn f [xs]\n(let [g (fn [xs] \n  (let [n (count xs)\n        head (first xs)\n        tail (last xs)\n        as (take (- n 1) xs)\n        bs (drop 1 xs)\n        cs (map +' as bs)\n        ds (cons head (concat cs (list tail)))]\n    ds))] \n  (lazy-seq (cons xs (f (g xs))))))","user":"5799ff45e4b05b1deef9add1"},{"problem":147,"code":"(fn pascal [current]\n   (let [a (vec (cons 0 current))\n         b (conj current 0)\n         nxt (vec (map +' a b))]\n     (lazy-seq\n      (cons current (pascal nxt)))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn cal\n  [ini-coll]\n  (let [pascal-tri (fn pascal-tri\n                     ([coll]\n                        (pascal-tri coll [(first coll)]))\n                     ([coll acc]\n                        (let [f2 (take 2 coll)]\n                          (if (< (count f2) 2)\n                            (conj acc (last coll))\n                            (recur (rest coll) (conj acc (reduce +' f2)))))))]\n    (cons ini-coll (lazy-seq\n                    (let [res (pascal-tri ini-coll)]\n                      (cal res ))))))","problem":147,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn [col] (iterate #(map (partial reduce +') \n  (partition 2 1 (conj (vec (cons 0 %)) 0))) col))","problem":147,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":147,"code":"(fn [-seq]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) -seq))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn pascal[initseq]\n  (let [gen-nextseq (fn [s]\n                      (let [s1 (conj (vec s) 0)\n                            s2 (cons 0 s)]\n                        (map +' s1 s2)))]\n    (cons \n      initseq \n      (lazy-seq \n        (pascal \n          (gen-nextseq initseq))))))","problem":147,"user":"4f890488e4b033992c121c76"},{"problem":147,"code":"(fn pascals-trap\n  [prev]\n  (let [pascals (fn p [prev]\n                  (let [oprev prev\n                        prev  (apply interleave (repeat 2 prev))\n                        prev  (concat [0] prev [0])\n                        prev  (partition 2 prev)\n                        row   (vec (map (fn [[a b]] (+' a b)) prev))]\n                    (lazy-seq (cons row (p row)))))]\n    (cons prev (pascals prev))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn [x]\n  (iterate #(map (partial apply +') (partition 2 1 (concat [0] % [0]))) x))","problem":147,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn f [a] (cons a (lazy-seq (f (map +' (concat [0] a) (concat a [0]))))))","problem":147,"user":"52c6a0abe4b0c2d177d62111"},{"problem":147,"code":"(fn npv [col]\n  (let [xs (map +' \n               (lazy-seq (cons 0 col))\n               (lazy-cat col [0]))]\n    (lazy-seq (cons col (npv xs)))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":147,"code":"(fn [v]\n  (letfn [(pascal [v]\n                  (cons (first v)\n                        ((fn pascal-recur [x]\n                           (if (= (count x) 1) x\n                             (cons (+' (first x) (second x)) (pascal-recur (rest x))))) v)))\n          (iter [f x] (cons x (lazy-seq (iter f (f x)))))]\n    (iter pascal v)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":147,"code":"(fn trapez [s]\n  (let [next\n        (fn [s]\n          (conj\n           (second\n            (reduce\n             #(let [[value res] %1] [%2 (conj res (+' value %2))])\n             [0 []]\n             s))\n           (last s)))]\n    (lazy-seq (cons s (trapez (next s))))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":147,"code":"(fn pascals-trapezoid [r] (lazy-seq (iterate (fn [c] (flatten [(first c) (map (partial apply +') (partition 2 1 c)) (last c)])) r)))","user":"55c10409e4b01b9910ae2a2c"},{"problem":147,"code":"(fn [v]\n  (letfn [(pascal [v]\n            (for [k (range (+ 1 (count v)))]\n              (condp = k\n                0 (nth v 0)\n                (count v) (nth v (- (count v) 1))\n                (+' (nth v k) (nth v (- k 1))))))]\n\t(iterate pascal v)))","user":"4fdb881ee4b05e33b9224f5e"},{"code":"#(iterate \n  (fn [row] \n    (map + (concat row [0]) (cons 0 row))) %)","problem":147,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn [s]\n  (iterate #(concat [(first %)]\n                    (map (partial apply +')\n                         (partition 2 1 %))\n                    [(last %)])\n           s))","problem":147,"user":"4ee8b9c9535d93acb0a66884"},{"code":"(fn [xs]\n  (letfn [( pascal-next [xs]\n            (map #(+' %1 %2) (concat [0] xs) (concat xs [0])))]\n    (iterate pascal-next xs)))","problem":147,"user":"50fa01bce4b07934dda8b0ba"},{"code":"#(iterate (fn [v] (map +' `(0 ~@v) `(~@v 0))) %)","problem":147,"user":"51b90b88e4b050a1176cd6a2"},{"problem":147,"code":"(fn pascal-triangle [row]\n  (let [new-row (for [[a b] (partition 2 1 (cons 0 (conj (vec row) 0)))] (+' a b))]\n    (cons row (lazy-seq (pascal-triangle new-row)))))","user":"532ecd44e4b019098a6f8b49"},{"code":"(let [pascal (fn [x]\n  (into []\n  (map \n   (fn [n]\n     (+' (get x n 0)\n        (get x (inc n) 0)))\n   (conj  (range (count x)) -1))))]\n(fn [x] (iterate pascal x)))","problem":147,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn p [l]\n  (let [twos (fn twos [l] (if (not (seq l)) () (cons (take 2 l) (twos (drop 2 l)))))\n        copy (fn [l] (flatten (map #(list % %) l)))\n        n (map #(+' (first %) (second %)) (twos (concat (cons 0 (copy l)) '(0))))]\n    (cons l (lazy-seq (p (vec n))))))","problem":147,"user":"53638ed2e4b0243289761e5b"},{"code":"iterate #(vec (map + (map bigint (cons 0 %)) (map bigint (conj % 0))))","problem":147,"user":"51533ecde4b0252ac4b16619"},{"problem":147,"code":"(fn [as]\n  (iterate \n   \t#(vec (map +' (cons 0 %) (conj % 0))) \n    as))","user":"56327168e4b0bfe05bf117a5"},{"problem":147,"code":"(fn pascal-trap [init]\n  (cons init (lazy-seq (pascal-trap (cons (first init) ((fn sum-adjacents [coll]\n                                       (cond (<= (count coll) 1) coll\n                                             :else (cons (+' (first coll) (second coll))\n                                                         (sum-adjacents (rest coll))))) init))))))","user":"52b9e920e4b07a9af57922c9"},{"problem":147,"code":"(partial iterate (fn [s]\n                     (concat\n                       [(first s)]\n                       (->> s (partition 2 1) (map (partial apply +')))\n                       [(last s)])))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(partial iterate\r\n           (fn [nums]\r\n             (vec\r\n               (map +' (conj nums 0) (cons 0 nums)))))","problem":147,"user":"50436470e4b034ff00315d23"},{"code":"(fn pt [s]\n  (let [middle (for [i (range (dec (count s)))] \n                 [(nth s i), (nth s (inc i))])\n        nextrow (concat [(first s)]\n                  (map (fn [[f s]] (+' f s)) middle) \n                  [(last s)])]\n    (cons s (lazy-seq (pt nextrow)))))","problem":147,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn [coll]\n  (iterate\n    (fn [c]\n      (map\n        #(apply +' %)\n        (partition 2 1\n          (cons\n            0\n            (conj (vec c) 0)))))\n    coll))","problem":147,"user":"4f253a49e4b0d66497709ff3"},{"problem":147,"code":"(fn pascals-triangle [xs]\n  (lazy-seq (cons xs (pascals-triangle (map +' (concat [0] xs) (concat xs [0])))))\n  )","user":"569951e4e4b0542e1f8d143e"},{"problem":147,"code":"(fn [coll] (iterate #(mapv +' (cons 0 %) (conj % 0)) coll))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn pascal-trapz [x]\n                       (lazy-seq\n                        (cons x (pascal-trapz\n                                 (map +' (cons 0 x) (lazy-cat x [0]))))))","problem":147,"user":"4fcf642ee4b03432b189f410"},{"code":"(partial iterate #(vec (map + (conj % 0)\n              (cons 0 %))))","problem":147,"user":"4db0114d838c48654951d9b8"},{"problem":147,"code":"(fn ptr\n  [nums]\n  (iterate #(cons (first %) (conj (vec (map +' (rest %) (drop-last %))) (last nums))) nums))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"#(iterate\n  (fn [v] `[~(first v) ~@(map +' v (rest v)) ~(last v)])\n  %)","problem":147,"user":"506a1985e4b01dc6af13f83e"},{"problem":147,"code":"(fn [array]\n  (letfn [(pascal [array] (lazy-seq (cons array (pascal (flatten [(first array) (for [p (partition 2 1 array)] (apply +' p)) (last array)])))))]\n    (pascal array)))","user":"59ddae03e4b01968742fed65"},{"problem":147,"code":"(fn pascal [v]\n  (letfn [(nxt [k]\n            (mapv (partial apply +')\n                  (partition 2 1 [0]\n                             (cons 0 k))))]\n    (iterate nxt v)))","user":"5ab564f8e4b073f177442639"},{"code":"(fn [xs] \n  (iterate \n   (fn [x] (concat [(first x)] (map (partial apply +') (partition 2 1 x)) [(last x)])) \n   xs))","problem":147,"user":"4e50ad74535dc968683fc4ec"},{"problem":147,"code":"(fn [a]\n (iterate\n  (fn [n]\n   (let [n0 (conj n 0)\n         rn0 (cons 0 n)]\n    (mapv +' n0 rn0)))\n  a))","user":"54580586e4b01be26fd74616"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [v] (concat [(first v)]\n                           (map (partial apply +') (partition 2 1 v))\n                           [(last v)]))\n           v))","user":"5896a0e6e4b00487982d52a8"},{"problem":147,"code":"(letfn \n  [(next [v]\n    (let [a (concat [0] v [0])]\n      (map #(apply reduce +' %&) (partition 2 1 a))))]\n  #(iterate next %))","user":"57717915e4b0979f896515b3"},{"code":"(fn g [s]\n  (let [f (fn [l] \n            (concat [(first l)] \n                    (map (partial apply +') (partition 2 1 l)) \n                    [(last l)]))]\n   (iterate f s)))","problem":147,"user":"52753740e4b03e8d9a4a74c1"},{"problem":147,"code":"(fn [v]\n  (iterate (fn [s] (map (fn [[a b]] (+' a b))\n                        (partition 2 1 (concat [0]\n                                               s\n                                               [0]))))\n           v))","user":"557e56aae4b05c286339e0d5"},{"problem":147,"code":"(fn pt [xs]\n  (let [next-row (mapv +' (cons 0 xs) (conj xs 0))]\n    (cons xs (lazy-seq (pt next-row)))))","user":"553dd883e4b0a04f792994e6"},{"problem":147,"code":"(fn [v]\n  (iterate #(mapv +' \n                  (concat [0] %) \n                  (concat % [0])) \n           v))","user":"5591cc56e4b0604b3f94d582"},{"code":"#(iterate (fn [x]\n           (let [a (concat x [0])\n                 b (cons 0 x)\n                 c (partition 2 (interleave a b))\n                 ]\n             (map (partial apply +) c))) %)","problem":147,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":147,"code":"(fn plist [row]\n  (cons row (lazy-seq (plist (concat [(first row)]\n                                   (map #(apply +' %) (partition 2 1 row))\n                                   [(last row)])))))","user":"55c20bd0e4b0e31453f64972"},{"problem":147,"code":"(fn trapezoid [a]\n  (let [b (vec (map +' (cons 0 a) (conj a 0)))]\n     (cons a (lazy-seq [a] [b] (trapezoid b)))))","user":"5da760ebe4b000c986472c1a"},{"problem":147,"code":"(fn pt [xs]\n    (let [nr \n          (concat [(first xs)] (map (partial apply +') (partition 2 1 xs)) [(last xs)])]\n      (lazy-seq (cons xs (pt nr)))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":147,"code":"#(iterate\n  (fn [v]\n    (loop [x v r [(first x)]]\n      (if (>= (count x) 2)\n        (recur (next x) (conj r (+' (first x) (second x))))\n        (conj r (last v))))) %1)","user":"51ab70c3e4b04e3dc0c27b33"},{"problem":147,"code":"(fn f\n  [col]\n  (let [xs (cons 0 col)\n        ys (concat col '(0))]\n    (lazy-seq (cons col (f (map +' xs ys))))))","user":"5da7176ae4b000c986472c13"},{"problem":147,"code":"(fn Pascals-Trapezoid \n  [n]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) n))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":147,"code":"(fn [xs]\n  (iterate #(map +'\n                 (concat % [0])\n                 (concat [0] %))\n           xs))","user":"4f856adfe4b033992c121c44"},{"problem":147,"code":"(fn [coll]\n  (iterate #(mapv +' (conj % 0) (cons 0 %)) coll))","user":"5a1c3c11e4b0ff51aa4b323d"},{"code":"(fn pyc [coll]\n  (let [next-pyc (fn [_coll]\n   (let [ s (first _coll) e (last _coll) num (count _coll) ]\n      (for [i (range (inc num))] \n         (condp = i\n            0 s\n            num e\n            (+' (nth _coll i) (nth _coll (dec i)))))))]\n\n  (lazy-seq (cons coll (pyc (next-pyc coll))) ) \n  )\n)","problem":147,"user":"522eba30e4b01cdb292c5f0e"},{"problem":147,"code":"(fn lazy-pascals-triangle [row]\n  (let [next-pt-row (fn [row]\n                      (loop [remaining-nums row\n                             new-row [(first row)]]\n                        (let [[n1 n2] remaining-nums]\n                          (if (and n1 n2)\n                            (recur (rest remaining-nums) (conj new-row (+' n1 n2)))\n                            (conj new-row n1)))))]\n    (iterate next-pt-row row)))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":147,"code":"(fn [s] (iterate #(map +' (concat '(0) %) (concat % '(0))) s))","user":"587ee260e4b052da650a6353"},{"code":"(fn trape [xs]\n  (letfn [(next-trape [xs] (concat (vector (first xs)) (map #(apply + %) (partition 2 1 xs)) (vector (last xs))))]\n    (iterate next-trape xs)))","problem":147,"user":"4f251302e4b0d66497709ff0"},{"problem":147,"code":"iterate (fn [xs]\n          (map (partial apply +')\n               (partition 2 1\n                          (concat [0] xs [0]))))","user":"50ec409ce4b04edc33777045"},{"problem":147,"code":"iterate (fn [r] (apply vector (map +' (cons 0 r) (conj r 0))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn __ [v] (iterate (fn [v]\n                (if (= 1 (count v))\n                  (conj v (first v))\n    \n                  (let [fst (first v)\n                        lst (last  v)\n                        mdl (loop [v-in v\n                                   v-out []]\n                              (if (= 2 (count v-in))\n                                (conj v-out (reduce +' v-in))\n                                (recur (rest v-in) (conj v-out (reduce +' (take 2 v-in)))))\n                              )]\n      \n                    (flatten [fst mdl lst])\n                    ))\n                ) v))","problem":147,"user":"53415755e4b00652c8746ecd"},{"problem":147,"code":"(fn [nums]\n  (let [new-row (fn [row] (mapv +' (conj row 0) (concat [0] row)))]\n    (iterate new-row nums)))","user":"5ec6de19e4b08d0ec38692da"},{"problem":147,"code":"(fn pascal2 [coll]\n  (let [v (apply vector (map +' (conj coll 0) (cons 0 coll)))]\n    (lazy-seq (cons coll (pascal2 v)))))","user":"55ed9108e4b0121d4835fddc"},{"problem":147,"code":"(fn pascals-trapezoid [input]\n  (let [padded-input (reverse (cons 0 (reverse (cons 0 input))))\n        next-iteration (into [] (map (fn [x] (+' (nth padded-input x)\n                                       (nth padded-input (inc x)))) (range (dec (count padded-input)))))]\n    (lazy-seq (cons input (pascals-trapezoid next-iteration)))))","user":"4e9ff8d0535d7eef3080729c"},{"problem":147,"code":"(letfn [(next-line [line]\n                   (let [[a b] ((juxt first last) line)]\n                     (vec (concat [a]\n                                  (->> line\n                                       (partition 2 1)\n                                       (map (partial apply +')))\n                                  [b]))))]\n  (fn [line]\n    (iterate next-line line)))","user":"55f2e47de4b06e875b46ce4d"},{"problem":147,"code":"(fn\n  [seed]\n  (iterate (fn\n             [v]\n             (cons (first v)\n                   (map (partial reduce +')\n                        (partition-all 2 1 v))))\n           seed))","user":"54a6645be4b09f271ff37c87"},{"code":"(fn [c]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) c))","problem":147,"user":"510d9d61e4b078ea71921141"},{"code":"(fn [v]\n    (iterate #(map (partial apply +') (partition 2 1 (concat [0] % [0]))) v))","problem":147,"user":"52a32876e4b04e0c58e87bfb"},{"problem":147,"code":"(fn t [s] (cons s (lazy-seq (t (vec (map +' (cons 0 s) (conj s 0)))))))","user":"53f035c2e4b0742d9025b0d2"},{"code":"(fn [v] (iterate (fn [s] (map +' (cons 0 s) (conj (vec s) 0))) v))","problem":147,"user":"50bce014e4b0594b91591c63"},{"code":"(fn p [r] \n  (lazy-seq (cons r (p (map + (concat [0] r) \n                              (concat r [0]))))))","problem":147,"user":"4fbacdbae4b081705acca2e5"},{"problem":147,"code":"(fn [a]\n  (iterate #(apply concat [(first %)] (map +' (next %) (butlast %)) [[(last %)]]) a))","user":"51780bfce4b0f89a8f53839c"},{"code":"(fn y [l] (lazy-seq (let [e (loop [p 0N x l acc [] ] \n          (if (empty? x) (conj acc p)\n         (recur  (first x) (rest x) (conj acc (+ p (first x))))))] \n           \n           (cons l (y e)))))","problem":147,"user":"50ef3e5de4b0a78662fa2652"},{"problem":147,"code":"(fn [vs]\n            {:pre [(seq vs)]}\n            (let [successor (fn [ns]\n                              (->> ns\n                                   (partition-all 2 1)\n                                   (into [(list (first ns))])\n                                   (map (partial apply +'))))]\n              (iterate successor vs)))","user":"53684a2fe4b0243289761e8c"},{"code":"#(iterate (fn pt [xs] (vec (conj (map +' xs (conj (vec (rest xs)) 0)) (first xs)))) %)","problem":147,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":147,"code":"#(lazy-seq (map (fn calc\n  [i]\n  (if (= i 0)\n    %\n    (let [prev (calc (dec i))]\n      (map +' (cons 0 prev) (concat prev [0])))))\n         (range)))","user":"5eb4927fe4b00a66d4a95221"},{"problem":147,"code":"(fn [init] \n  (iterate #(conj (vec (map +' % (cons 0 %))) (last init)) init))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn pt \n([] (pt [1]))\n([[h & t :as r]] (let [ptr (cons h (map #(apply +' %) (partition-all 2 1 r)))] (cons r (lazy-seq (pt ptr))))))","problem":147,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [s]\n  (let [gen-pas (fn [s]\n                  (->> (partition 2 1 s)\n                       (map (partial apply +'))))\n        gen-seq (fn gen-seq [s]\n                  (cons s (lazy-seq (gen-seq (concat [(first s)] (gen-pas s) [(last s)])))))]             \n      (gen-seq s)))","problem":147,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn pascal [row]\n  (let [row    (map bigint row)\n        result (concat\n                 (list (first row))\n                 (map (fn [[a b]] (+ a b)) (partition 2 1 row))\n                 (list (last row)))]\n    (cons\n      row\n      (lazy-seq\n        (pascal result)))))","problem":147,"user":"50435852e4b034ff00315d22"},{"problem":147,"code":"(fn ptrap [s]\n\t(cons s\n\t\t(lazy-seq\n\t\t\t(ptrap\n\t\t\t\t(flatten\n\t\t\t\t\t[(first s)\n\t\t\t\t\t(map (partial apply +') (partition 2 1 s))\n\t\t\t\t\t(last s)])))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":147,"code":"(fn pascal-like [prev-row]\n  (iterate (fn [row]\n             (let [tmp-row (cons 0 (conj row 0))]\n               (loop [remaining tmp-row next-row []]\n                 (if (empty? (rest remaining))\n                   (into [] next-row)\n                   (recur (rest remaining) (conj next-row (+' (first remaining) (first (rest remaining))))))))) prev-row))","user":"5746061ae4b009280f9f2b5b"},{"problem":147,"code":"(fn pas[v] (\n             #(lazy-seq (concat [v] (pas %))) \n             (concat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)])\n             ))","user":"596f6683e4b069c0a1a19877"},{"problem":147,"code":"(fn tri [v]\n  (iterate (fn [xs]\n             (concat [(first xs)]\n                     (map #(+' (first %) (second %))\n                          (partition 2 1 xs))\n                     [(last xs)]))\n           v))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":147,"code":"(fn [ln]\n  (let [j\n        (fn [xs](let [buffer (take 1 xs)\n                      end-buffer (take 1 (reverse xs))]\n                  (concat buffer (map #(apply +' %) (partition 2 1 xs )) end-buffer)))]\n    (iterate j ln)\n    ))","user":"564a560ae4b0284900eef654"},{"problem":147,"code":"(fn pascal [v]\n  (lazy-seq (cons v (pascal (vec (map +' (conj v 0) (cons 0 v)))))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn f [row]\n  (cons row\n    (lazy-seq (f (map (partial apply +')\n                    (partition 2 1 (concat [0] row [0])))))))","problem":147,"user":"510acd6ee4b078ea719210f4"},{"problem":147,"code":"(fn [c] (iterate #(vec (map +' (conj % 0) (conj (seq %) 0))) c ))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"iterate #(map (partial apply + 0N)\n              (partition 2 1 \n                         (cons 0 (conj (vec %) 0))))","problem":147,"user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn zoid [v]\n  (letfn [(nex [x]\n          (concat\n            (cons (first x) (map #(apply + %) (map list x (rest x))))\n            (list (last x))\n            ))]\n  (lazy-seq (cons v (zoid (nex v))))\n  )\n)","problem":147,"user":"4fcad14ce4b0ee37620e1856"},{"problem":147,"code":"(fn [seq1]\n            (iterate (fn [seq1]\n                       (lazy-seq (concat (list (first seq1)) (map #(apply +' %) (partition 2 1 seq1)) (list (last seq1))))) seq1))","user":"565487dce4b0f9d632dd8482"},{"problem":147,"code":"(fn f[coll]\n  (let [v (vec coll)]\n    (lazy-seq\n     (cons v\n           (f (map #(let [[a b] %] (+' a b))\n                   (partition 2\n                              (interleave\n                               (conj v 0)\n                               (into [0] v)))))))))","user":"5398123ee4b0b51d73faaef3"},{"problem":147,"code":"(fn [x] (let [f (fn [y]\n                  (let [b 0 e 0]\n                  (map (fn [[t u]] (+' t u)) (partition 2 (flatten [b (interleave y y) e])))\n                  ))]\n          (iterate f x)\n          ))","user":"57b8b008e4b0fbc9809a27e6"},{"code":"#(iterate (fn[v] (vec (map (fn[idx]\n     (+'\n      (or (get v (dec idx)) 0)\n      (or (get v idx) 0)))\n     (range (+ 1 (count v)))))) %)","problem":147,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn pascal [colls]\n  (iterate\n    (fn[colls]\n      (vec (map + (conj colls 0N) (list* 0N  colls))))\n    colls))","problem":147,"user":"5273562ae4b03e8d9a4a7479"},{"problem":147,"code":"#(iterate (fn [col] (vec (map (partial apply +) (partition-all 2 1 (cons 0N col))))) %)","user":"54769c7ae4b0c51c1f4d72a8"},{"code":"(fn [coll] \n  (iterate #(map + (cons 0 %) (concat % [0])) coll))","problem":147,"user":"4e8e8c24535d65386fec2143"},{"problem":147,"code":"(fn [sq]\n    ((fn inner \n        ([] (inner sq))\n        ([x] (lazy-seq (cons x (inner (vec (map +' (apply vector 0 x) (conj x 0))))))))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":147,"code":"(fn pascal [x]\n  (let [y (cons 0 (conj x 0))]\n    (cons x (lazy-seq (pascal (vec (map +' y (rest y))))))))","user":"52e0e646e4b09f7907dd1416"},{"problem":147,"code":"(fn [xs]\n  (letfn [(stepper [xs]\n            (-> (into [(first xs)] (map #(reduce +' %1N) (partition 2 1 xs)))\n                (conj (last xs))))]\n    (iterate stepper xs)))","user":"59e8cd8be4b0249b72820739"},{"problem":147,"code":"(fn pascal\n  ([] (pascal '(1)))\n  ([xs] (cons xs\n              (lazy-seq (pascal (->> xs\n                                     (partition 2 1)\n                                     (map #(apply +' %))\n                                     (#(flatten [(first xs) % (last xs)]))))))))","user":"511688d5e4b0b3e208dba05a"},{"problem":147,"code":"(fn pt [se]\n    (iterate #(flatten (list\n                        (first %)\n                        (map (partial apply +') (partition 2 1 %))\n                        (last %))) se))","user":"56018dd4e4b04bb52996e18f"},{"problem":147,"code":"(fn foo [v]\n  (let [x (map +' (cons 0 v) (concat v [0])) ]\n    (cons v (lazy-seq (foo x)))))","user":"554edb85e4b00713264bd99a"},{"problem":147,"code":"(fn [fr] (iterate (fn nextrow [row] (mapv +' (into [0] row) (conj row 0))) fr))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn [xs] (iterate (fn [xs]\n  (concat [(first xs)] \n  (map #(+ %1 %2) (rest xs) (butlast xs)) \n [(last xs)])) xs))","problem":147,"user":"4efd98fa535de96065cf5086"},{"problem":147,"code":"(fn f [coll]\n          (cons coll (lazy-seq (f (map +' (concat coll [0]) (cons 0 coll))))))","user":"531c6e72e4b08068f379eda0"},{"problem":147,"code":"(fn [n]\n  (iterate #(mapv +' (conj % 0) (cons 0 %)) n))","user":"56cd44fde4b0ea9b8538f749"},{"problem":147,"code":"#(iterate (fn [s] (vec (map +' (cons 0 s) (conj s 0)))) %)","user":"53acaf1fe4b047364c04445f"},{"problem":147,"code":"(fn trap [sq] (cons sq (lazy-seq (trap (apply vector (map +' (conj sq 0) (cons 0 sq))) ))))","user":"5280a1ece4b0757a1b171407"},{"code":"(let [next-row #(vec (map + (cons 0 %) (conj % 0)))]\n  #(iterate next-row %))","problem":147,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":147,"code":"#(iterate (fn [row] \n            (map (comp bigint +) (concat row [0]) (concat [0] row)))\n          %)","user":"5492164ee4b0b312c081ff3e"},{"problem":147,"code":"(fn pascal-trapezoid [coll]\n  (iterate (fn [coll]\n             (concat [(first coll)]\n                     (map +' coll (rest coll))\n                     [(last coll)]))\n           coll))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"iterate #(map +' (cons 0 %) (concat % [0]))","problem":147,"user":"5003ee7de4b0678c553fc446"},{"problem":147,"code":"(fn pascal \n[coll]\n(lazy-seq (cons coll (pascal (apply vector(cons (first coll) (map #(apply +' %) (partition-all 2 1 coll))))))))","user":"5b857411e4b047b03b2037ce"},{"problem":147,"code":"(fn ptraps [ns]\n            (letfn [(ptrap [coll]\n                      (loop [p 0\n                             [n & rn :as ns] coll\n                             r []]\n                        (if (empty? ns)\n                          (conj r p)\n                          (recur n rn (conj r (+' p n))))))]\n              (lazy-seq (cons ns (ptraps (ptrap ns))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":147,"code":"#(iterate (fn [x] (map (partial reduce +) (cons (take 1 x) (partition-all 2 1 x)))) (map bigint %))","user":"51a058dae4b0b292b01ee3f3"},{"problem":147,"code":"#(letfn [(p [a] (map +'\n                    (conj (vec a) 0)\n                    (conj (seq a) 0)))]\n  (iterate p %))","user":"5b210749e4b03cfeda66ed48"},{"problem":147,"code":"(fn f [s] (lazy-seq (cons s (f (map +' (into [0] s) (conj (vec s) 0))))))","user":"57462a4de4b009280f9f2b5d"},{"code":"iterate\n  (fn[[q & r :as s]] \n    (cons q\n          (map +' (concat r [0]) s)))","problem":147,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":147,"code":"(letfn [(next-row [[f & r :as row]]\n          (if r\n            (concat [f]\n                         (map (partial apply +')\n                              (partition 2 1 row))\n                         [(last r)])\n            [f f]))]     \n  (fn s [v]\n    (let [n (next-row v)]\n      (cons v\n            (lazy-seq (s n))))))","user":"541709b0e4b01498b1a71a06"},{"problem":147,"code":"(fn[start](iterate (fn[input]\n  (flatten (conj[]\n   (first input)\n   (map #(reduce +' %)(partition 2 1 input))\n   (last input)))\n  )start))","user":"5b6962c1e4b0c6492753e787"},{"code":"(fn [x]\n  (let [pascal\n    (fn [s]\n      (concat [(first s)] (map + (rest s) (drop-last s))\n        [(last s)]))]\n    (iterate pascal x)))","problem":147,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn pt [r]\n  (lazy-seq\n    (cons\n      r\n      (pt\n        (concat\n          [(first r)]\n          (map (fn [a b] (+ (bigint a) (bigint b))) r (rest r))\n          [(last r)])))))","problem":147,"user":"50427899e4b0add3005c0fc2"},{"code":"iterate  #(mapv +' (into [0] %) (into % [0]))","problem":147,"user":"52479487e4b05ef8e38e6373"},{"problem":147,"code":"(fn [p] (iterate (fn [n] (map #(apply +' %) (partition 2 1 (concat [0] n [0])))) p))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn mypascal [i] (lazy-seq (cons i (mypascal (if (< 1 (count i))(vec (flatten (list (first i) (map #(reduce + %) (partition 2 1 i)) (last i)))) (vec (concat i i)))))))","problem":147,"user":"4f0e4ebd535d0136e6c22322"},{"problem":147,"code":"(fn ptr [[f & r :as v]]\n  (lazy-seq (cons v (ptr (map +' (concat [0] v) (concat (conj r f) [0]))))))","user":"5e3071abe4b05b4b01516213"},{"problem":147,"code":"(fn [s]\n(let [nextrow\n(fn [row]\n(map +' (cons 0 row) (concat row [0])))]\n(iterate nextrow s)))","user":"52ba2639e4b07a9af57922cb"},{"problem":147,"code":"(fn pascal [input]\n      (let \n        [getSplits (fn[x] \n                    (drop-last (reduce #(if (empty? %1) \n                      (conj %1 [%2])\n                      (conj (into [] (drop-last %1)) (conj (last %1) %2) [%2])) [] x)))\n         getSumArray (fn[x] (map #(apply +' %) x))            \n         middleArray (into [] (getSumArray (getSplits input)))\n         nextSequence (into [] (cons (first input) (conj middleArray (last input))))]\n      (lazy-seq \n         (cons input (pascal nextSequence))\n      )))","user":"571172ece4b09c608db70446"},{"problem":147,"code":"(fn [x] (iterate #(concat [(first %)] (map +' % (rest %)) [(last %)]) x))","user":"53e19461e4b0d874e779ae59"},{"problem":147,"code":"(fn pascal-triangle [xs]\n  (letfn [(stepper [xs]\n            (-> (into [(first xs)] (map #(reduce +' %1N) (partition 2 1 xs)))\n                (conj (last xs))))]\n    (iterate stepper xs)))","user":"534056fce4b085b17e897dac"},{"code":"(fn [init]\r\n  (iterate\r\n    (fn [row]\r\n      (map\r\n      (partial apply +)\r\n      (partition 2 1 (concat [0] row [0]))))\r\n    init))","problem":147,"user":"4f1b0ab3535d64f603146474"},{"code":"#(iterate (fn [[f & r :as v]] (concat [f] (map + v r) [(last v)])) %)","problem":147,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [l]\n       (iterate #(cons (first l)\n                       (map + % (concat (next %) [0]))) l))","problem":147,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(partial\n  iterate\n  #(map + (cons 0 %) (concat % [0])))","problem":147,"user":"4e5411e8535d8a8b8723a279"},{"problem":147,"code":"(fn [v] \n  (iterate \n   (fn [vi] \n     (concat \n      [(first vi)] \n      (map (partial apply +') (partition 2 1 vi))\n      [(last vi)])) v))","user":"4f0f01c0535d0136e6c22329"},{"problem":147,"code":"(fn pascal [s]\n  (let [pascal-next (fn [s] (conj (vec (cons (first s) (map +' s (rest s)))) (last s)))]\n    (iterate pascal-next s)))","user":"547e3846e4b0c51c1f4d7302"},{"problem":147,"code":"(fn next-row [row]\n    (lazy-seq (cons row (next-row (concat [(first row)]\n                                          (mapv #(apply +' %) (partition 2 1 row))\n                                          [(last row)])))))","user":"55f20e4be4b06e875b46ce40"},{"code":"(fn [[f :as c]]\n  (iterate #(concat [f] (map +' % (rest %)) [(last c)]) c))","problem":147,"user":"4dbb0b6c535d1e037afb21b0"},{"code":"(fn [xs]\n  (let [next-row (fn [row]\n     (->> (concat [0] row [0])\n       (partition 2 1)\n       (map (partial apply +))))]\n     (iterate next-row xs)))","problem":147,"user":"4ef41f26535dced4c769f230"},{"problem":147,"code":"(fn [coll]\n  (iterate #(map +' (concat [0] %) (concat % [0])) coll))","user":"55933c7ae4b0c79f6e1db938"},{"code":"iterate #(mapv + (cons 0N %) (conj % 0N))","problem":147,"user":"528b08efe4b0239c8a67ae8a"},{"problem":147,"code":"(fn [R]\n  (let [f (fn [r](vec (concat [(r 0)] (for [i (range (dec (count r)))] (+' (r i) (r (inc i)))) [(last r)])))]\n    (iterate f R)))","user":"5649615be4b0284900eef641"},{"problem":147,"code":"iterate #(map (partial apply +') (partition 2 1 `[0 ~@% 0]))","user":"4e6a4950535d8ccf87e9febf"},{"problem":147,"code":"(fn [s2] (iterate (fn [s] (let [f (fn f [[a & r]] (when r (cons (+' a (first r)) (f r))))] (concat [(first s)] (lazy-seq (f s)) [(last s)]))) s2))","user":"59adec09e4b0e1f4e384c897"},{"problem":147,"code":"(fn arbitrary-pascal [start]\n  (let [pascal-step (fn [row]\n                      (when row\n                        (concat [(first row)]\n                                (map +' row (rest row))\n                                [(last row)])))]\n  (lazy-seq\n    (cons start (arbitrary-pascal (pascal-step start))))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":147,"code":"(fn nextPascal [coll]\n   (let [f (first coll) l (last coll)] \n        (iterate\n          (fn [upLine]\n              (vec (concat [f] (map #(+' (first %) (second %)) (partition 2 1 upLine)) [l]))) coll)))","user":"5a99b863e4b0d174b936c7ae"},{"problem":147,"code":"iterate (fn [v]\n      (concat [(first v)]\n            (map #(apply +' %) (partition-all 2 1 v))))","user":"5957cc41e4b066ee0a44af76"},{"code":"(fn f [v]\n  (let [t #(map + (rest %) %)]\n    (iterate #(conj (into [(first %)] (t %)) (last %)) v)))","problem":147,"user":"4ec74de3535d6d7199dd36df"},{"problem":147,"code":"(fn [c]\n (iterate #(concat [(first %)] (map (partial reduce +') (partition 2 1 %)) [(last %)]) c))","user":"5b22328ee4b03cfeda66ed5d"},{"problem":147,"code":"#(let [step (fn [v]\n              (let [v (vec v)\n                    len (count v)\n                    get0 (fn [[x y]] (+' (get v x 0)\n                                         (get v y 0)))\n                    series (partition-all 2 1 (range -1 len))]\n                (if (zero? len)\n                  []\n                  (map get0 series))))]\n   (iterate step %))","user":"51e3a549e4b0c611d6113e47"},{"problem":147,"code":"(fn [x]\n  (letfn [(p [y] \n             (concat [(first y)] \n                     (map +' (rest y) (butlast y)) \n                     [(last y)]))]\n  (iterate p x)))","user":"54e345a1e4b024c67c0cf7db"},{"problem":147,"code":"(fn pscl [row]\n  (iterate #(let [mid (concat [0] % [0])]\n              (for [i (range (- (count mid) 1))]\n                (+' (nth mid i) (nth mid (inc i))))) row))","user":"558bb38fe4b0277789237631"},{"code":"(fn [v]\n    (iterate #(vec (map +\n                        (conj % 0)\n                        (list* 0 %)))\n             v))","problem":147,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn [x]\n  (iterate #(concat [(bigint (first %))] (map + % (rest %)) [(last %)]) x)\n    )","problem":147,"user":"503917a0e4b088a6a14ca763"},{"problem":147,"code":"iterate #(map (fn [[f s]] (+' f s)) (partition 2 1 (concat '(0) % '(0))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"code":"(fn ptrap [avec] (let [nexta  (vec (concat \n                               [(first avec)] \n                               (map (fn [a] (+' (first a) (second a))) (partition 2 1 avec)) \n                               [(last avec)]\n                               ))\n                       ]\n                   (cons avec\n                         (lazy-seq (ptrap nexta))\n                         )\n                   )\n  )","problem":147,"user":"51bf4560e4b013aa0d74b817"},{"problem":147,"code":"(fn [coll] \n    (iterate \n       #(cons (first %) (concat (mapv (fn [ts] (apply +' ts)) (partition 2 1 %)) (list (last %))))\n       coll)\n    )","user":"55f2c898e4b06e875b46ce4b"},{"problem":147,"code":"(fn [sq] (letfn [(nextrow [row] (map +' (concat [0] row) (concat row [0])))]\n           (iterate nextrow sq)))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":147,"code":"(fn [row]\n  (letfn \n    [(pascalize [prev el] [(conj (first prev) (+' (second prev) el)) el])\n     (f [row] (conj (first (reduce pascalize [[] 0] row))\n                    (last row)))]\n    (iterate f row)))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn [start]\n  (iterate\n    (fn [c]\n      (let [c (concat [0] c [0])]\n        (vec (map #(+ (bigint %1) (bigint %2)) c (drop 1 c)))))\n    start))","problem":147,"user":"51592b81e4b0394f658fe22c"},{"code":"(fn [x] (iterate (fn [c] (map #(apply +' %) (partition 2 1 (concat [0] c [0])))) x))","problem":147,"user":"50be9b4ae4b00fb48fed2ef6"},{"code":"iterate #(map +' (cons 0 %) (concat % (vector 0)))","problem":147,"user":"50fe91c1e4b03cd852b4e84e"},{"problem":147,"code":"(fn pascal \n  ([base] (pascal [] base))\n  ([base next-pascal] \n    (if (<= (count base) 1)\n      (cons next-pascal (lazy-seq (pascal (into [0] (conj next-pascal 0)) [])))\n      (recur (rest base) (conj next-pascal (+' (first base) (second base)))))))","user":"560039cce4b04bb52996e162"},{"problem":147,"code":"(fn foo \n  ([] (foo [1]))\n  ([coll]\n       (lazy-seq \n       (cons coll (foo (conj (into (conj [] (first coll)) (map #(apply +' %) (partition 2 (interleave (drop 1 coll) (drop-last coll))))) (last coll))\n       )\n       )\n       )\n  )\n)","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn f [ls]\n  (lazy-seq \n  (let [pairs\n        (partition 2 1 ls)\n        pr (map #(biginteger (apply + %)) pairs) ]\n    \n    (cons ls \n      (f (concat \n        [(first ls)] \n        pr \n        [(last ls)]))))))","problem":147,"user":"502a9fdee4b095a7adb898b4"},{"problem":147,"code":"(fn my-fnk [input]\n  (let [values (partition 2 1 input)\n        f (first input)\n        l (last input)\n        next (if (seq values)\n               (conj (apply vector\n                            f\n                            (map #(apply +' %) values))\n                     l)\n               [f l])]\n    (lazy-seq (cons input (my-fnk next)))))","user":"52fc34cee4b047fd55837015"},{"problem":147,"code":"(fn [a]\n   (letfn [(next [s] \n             (concat (vector (first s))\n                     (mapv (partial apply +') \n                           (partition 2 1 s)) \n                     (vector (last s))))]\n     (iterate next a)))","user":"538db083e4b0b51d73faae74"},{"problem":147,"code":"(fn [x] (iterate #(map +' (concat [0] %) (concat % [0])) x))","user":"56066e82e4b08b23635d3173"},{"problem":147,"code":"(fn F [s] (cons s (lazy-seq (F (conj (vec (cons (first s) (map (fn [[x y]] (+' x y)) (partition 2 1 s)))) (last s))))))","user":"55fc07d3e4b0f488688e066e"},{"problem":147,"code":"(fn solve [input] \n  (cons input\n        (lazy-seq (solve\n                    (vec (concat\n                      (list (first input))\n                      (map (partial apply +') (partition 2 1 input))\n                      (list (last input))))))))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn pascal-trap [v]\n  (let [p (fn [new-v]\n            (let [v1 (concat [0] new-v)\n                  v2 (concat new-v [0])]\n              (map +' v1 v2)))]\n     (lazy-seq\n       (concat [v] (pascal-trap (p v))))))","problem":147,"user":"53713ebee4b0fc7073fd6ead"},{"problem":147,"code":"(fn pascal [row] \n(let [result (let [newrow (flatten (list 0 row 0))] (for [x (range 0 (dec (count newrow)))] (+' (nth newrow x) (nth newrow (inc x)))))]\n(lazy-seq (cons row (pascal result)))\n))","user":"5abeb697e4b073f177442725"},{"problem":147,"code":"(fn [coll]\n  (iterate (fn [c] (if (= (count c) 1)\n                     [(first c) (last c)]\n                     (conj (into [(first c)] (map +' c (rest c))) (last c))))\n           coll))","user":"58d48df8e4b03c36ff7e5941"},{"code":"(fn p-zoid [initial]\n  (let [\n        next (fn [prev-line]\n\t\t\t\t\t\t\t  (cond \n\t\t\t\t\t\t\t    (= 1 (count prev-line)) (concat prev-line prev-line)\n\t\t\t\t\t\t\t    (= 2 (count prev-line)) (let [[a b] prev-line] [a (+ a b) b])\n\t\t\t\t\t\t\t    :else (concat \n\t\t\t\t\t\t\t            [(first prev-line)]\n\t\t\t\t\t\t\t            (for [index (range 0 (dec (count prev-line)))\n\t\t\t\t\t\t\t\t                  :let [\n\t\t\t\t\t\t\t\t                        x1 (bigint (nth prev-line index))\n\t\t\t\t\t\t\t\t                        x2 (bigint (nth prev-line (inc index)))\n\t\t\t\t\t\t\t\t                  ]] (+ x1 x2))\n\t\t\t\t\t\t\t            [(last prev-line)])))\n        ]\n  (concat [initial] (lazy-seq (p-zoid (next initial))))))","problem":147,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":147,"code":"(fn pascal [seed]\n    (cons seed\n          (lazy-seq (pascal (cons (first seed)\n                                  ((fn t [x]\n    (if (= 1 (count x))\n        (list (first x))\n        (cons (+' (first x) (second x))\n              (t (rest x))))) seed))))))","user":"55627de1e4b0c656e3ff17d9"},{"problem":147,"code":"(fn cs3 [n]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0))) n))","user":"5a4443cae4b0447ef91cc60f"},{"code":"(fn ptrap [row]\n  (lazy-seq\n   (cons row\n         (ptrap (vec (map + (cons 0 row) (conj row 0)))) )))","problem":147,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":147,"code":"#(iterate (fn [x] \n\t(vec (map +' (into [0] x) (into x [0]))))%)","user":"53d5d24de4b0e771c302544a"},{"problem":147,"code":"(fn pascals-trapezoid [v]\n  (let [next-row (map (fn [i] (+' (nth v i 0) (nth v (inc i) 0))) (range -1 (count v)))]\n    (cons v (lazy-seq (pascals-trapezoid next-row)))\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"iterate #(vec (map + (cons 0 %) (conj % 0)))","problem":147,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":147,"code":"(partial iterate \n         (fn [c] (concat [(first c)] (mapv +' c (rest c)) [(last c)])))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn ptrap [v]\n  (let [vb (map biginteger v)]\n     (lazy-seq (cons vb\n                 (ptrap (map + (cons 0 vb)\n                               (concat vb (list 0))))))))","problem":147,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":147,"code":"(fn pt [v]\n    (lazy-seq\n     (cons v\n           (pt `[~(first v)\n                 ~@(map #(apply +' %) (partition 2 1 v))\n                 ~(last v)]))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":147,"code":"(fn [r]\n  (letfn [(p [s] \n            (map +' \n                 (conj (seq s) 0)\n                 (conj (vec s) 0)))]\n    (iterate p r)))","user":"5bafd5c8e4b0a20761a234dd"},{"code":"(fn f\n  [v]\n  (let [succ (fn [x]\n               (vec (map #(+ (bigint %1) (bigint %2)) (conj x 0) (cons 0 x))))]\n      (lazy-seq (cons v (f (succ v))))))","problem":147,"user":"4db53f87535d87e67b28fe08"},{"problem":147,"code":"(fn [arr] (iterate #(mapv (fn [[a b]] (+' a b)) (partition 2 1 (cons 0 (conj % 0)))) arr))","user":"5e2586afe4b05b4b01516167"},{"problem":147,"code":"(fn [in]\n  (iterate\n   (fn [x]\n     (concat\n      (vector (first x))\n      (map #(apply +' %) (partition 2 1 x))\n      (vector (last x)))) in))","user":"5564c113e4b0c656e3ff180d"},{"code":"(fn psec [x]\n  (cons \n     x\n     (lazy-seq (psec (concat [(first x)] (map (partial apply +') (partition 2 1 x)) [(last x)])))))","problem":147,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"iterate #(map +' `(0 ~@%) `(~@% 0))","problem":147,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":147,"code":"(fn _pt [s]\n  (lazy-cat (vector s) (_pt (cons (first s) (concat (map +' s (drop 1 s)) [(last s)]))))\n)","user":"54524afbe4b0e397800069bc"},{"problem":147,"code":"(fn pascals-trapezoid\n    [s]\n    (iterate\n     (fn next-row\n       [row]\n       (loop [prev-n 0\n              prev-row (reverse row)\n              next-row []]\n         (if (empty? prev-row)\n           (cons prev-n next-row)\n           (recur \n            (first prev-row) \n            (rest prev-row) \n            (cons (+' prev-n (first prev-row)) next-row)))))\n     s))","user":"53b952eee4b047364c0444e6"},{"code":"(fn pts [v]\n  (iterate #(vec (map + (conj % 0) (cons 0 %))) v))","problem":147,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":147,"code":"(fn [ys] (iterate (fn [xs] (map #(reduce +' %) (partition-all 2 1 (cons 0 xs)))) ys))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"#(iterate % (seq %2)) #(map + `(~@% 0) (conj % 0))","problem":147,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":147,"code":"(fn pascal-triangle [start-vec]\n        (lazy-seq (iterate \n                   (fn [prevRow] (flatten [(first start-vec) (map #(reduce +' %) (partition 2 1 prevRow)) (last start-vec)]))\n                   start-vec)\n                  )\n  )","user":"6004c750e4b074f607df6645"},{"problem":147,"code":"(fn f [v]\n  (lazy-seq (cons v (let [[v'' x] (reduce (fn [[v' x'] x]\n                                            [(conj v' (+' x' x)) x]) [[] 0] v)]\n                      (f (conj v'' x))))))","user":"55316b8ae4b076ab5578f825"},{"problem":147,"code":"(fn answer [numbers]\n  (cond\n    (= 0 (count numbers)) (cons [1] (answer [1 1]))\n    (= 1 (count numbers)) (cons numbers (answer (vec (concat numbers numbers))))\n    :else (let [n1 (first numbers)\n                n-last (last numbers)\n                pairs (partition 2 1 numbers)\n                result (lazy-cat [n1] (map #(reduce +' %) pairs) [n-last])]\n            (lazy-seq (cons numbers (answer result))))\n    )\n  )","user":"5e491182e4b043cd24807a46"},{"code":"#(iterate (fn [p] (map (fn [args] (apply +' args)) (partition 2 1 (concat [0] p [0])))) %)","problem":147,"user":"5165a235e4b079ad97ec44ac"},{"code":"iterate (fn pt [ve]\n  (concat [(first ve)] (map +' ve (rest ve)) [(last ve)]))","problem":147,"user":"53973e7be4b0b51d73faaee6"},{"code":"(fn pascal [old]\n  (let [head (first old)\n        tail (last old)\n        medium (rest old)\n        cur (flatten [head (map + old medium) tail])]\n  (lazy-seq (cons old (pascal (map bigint cur))))))","problem":147,"user":"50052d38e4b0678c553fc45c"},{"code":"(fn [s] \n  (iterate \n    (fn [ls] \n      (map +' \n           (concat [0] ls) \n           (concat ls [0])))\n    s))","problem":147,"user":"4db1b3951254ad5b4805fa6f"},{"problem":147,"code":"(fn [s]\n           (iterate #(map +' (concat % [0]) (concat [0] %)) s))","user":"555f0789e4b0a2eb076a39bf"},{"code":"#(iterate\n  (fn [x]\n    (map  \n      +\n      (concat x [0])\n      (concat [0] x)))\n  (map bigint %))","problem":147,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":147,"code":"(fn p [d]\n  (let [f #(map +' (concat [0] %) (concat % [0]))]\n    (iterate f d)))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn\n  [v]\n  (letfn [(r [v] (lazy-seq\n                   (let [v1 (cons 0 v)\n                         v2 (conj v 0)\n                         v' (vec (map +' v1 v2))]\n                     (cons v (r v')))))]\n    (r v)))","problem":147,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn pascal-trapezoid [s]\n  (let [dupulicate #(mapcat list % %)\n        next-pascal (fn [s] (->> s\n                                (dupulicate ,,)\n                                (cons 0 ,,)\n                                (partition-all 2 ,,)\n                                (map #(reduce +' %) ,,)\n                                ))]\n    (lazy-seq\n     (cons s (pascal-trapezoid (next-pascal s))))))","problem":147,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn pascal-seq\n  [xs]\n  (cons xs (lazy-seq (->> xs \n                      (partition 2 1)\n                      (map #(reduce + 0N %))\n                      ((fn [ys] [(first xs) ys (last xs)]))\n                      flatten\n                      pascal-seq))))","problem":147,"user":"4f21838fe4b0d66497709fd2"},{"problem":147,"code":"(fn pascal\n    [data]\n    (let [first (first data)\n          last (last data)\n          parted (partition 2 1 data)\n          mapped (map (fn [[x y]] (+' x y)) parted)\n          do-pascal (fn do-pascal [x] (flatten [first mapped last]))]\n      (lazy-seq (cons data (pascal (do-pascal data))))))","user":"59473563e4b07ddc2dafad97"},{"problem":147,"code":"(fn $ [xs]\n  (lazy-seq (cons\n             xs\n             ($ (concat [(first xs)] (map +' (rest xs) xs) [(last xs)])))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn pas-trap [row] (let [l (first row)\n                         r (last row)\n                         m (map (partial apply +') (partition 2 1 row))\n                         next-row (concat [l] m [r])]\n                         (lazy-seq (cons row (pas-trap next-row)))))","problem":147,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":147,"code":"#(cons % ((fn pascal [arg]\n  (let [f (first arg)\n        l (last arg)]\n    (loop [res [f] size (- (count arg) 1) i 0 arg arg]\n      (if (= i size)\n        (let [res (conj res l)]\n          (lazy-seq (cons res (pascal res))))\n        (recur (conj res (+' (first arg) (second arg))) size (inc i) (drop 1 arg)))))) %))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":147,"code":"(fn \n  [lst]\n  (iterate #(map +' `(0 ~@%) `(~@% 0)) lst))","user":"59e18b9be4b08badc2a0c50f"},{"problem":147,"code":"(fn [l] (iterate\n         (fn [x] (concat [(first x)] (map (partial apply +') (partition 2 1 x)) [(last x)]))\n         l))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn __ [coll]\n  (cons coll \n        (lazy-seq \n          (__ (-> (map +' coll (rest coll))\n                  (conj (first coll))\n                  (vec)\n                  (conj (last coll)))))))","problem":147,"user":"52463059e4b09dbe66b56198"},{"problem":147,"code":"(fn [c] (iterate #(map +' (concat [0] %) (concat % [0])) c))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":147,"code":"(fn [xs] (iterate\n  (fn [xs]\n    (loop [result [(first xs)] first-item (first xs) second-item (second xs) the-rest (drop 2 xs)]\n      (if (nil? second-item)\n        (conj result first-item)\n        (recur (conj result (+' first-item second-item)) second-item (first the-rest) (rest the-rest))\n      )\n    )\n  )\n  xs\n))","user":"55d79b87e4b0e31453f64aa8"},{"problem":147,"code":"(fn pascals-trapezoid\n  [coll]\n  (lazy-seq (cons coll  (pascals-trapezoid (loop [[head & tail] coll\n                                                       final [(first coll)]]\n                                                  (if (empty? tail)\n                                                    (conj final head)\n                                                    (recur tail (conj final (+' head (first tail))))))))))","user":"5ac35d00e4b0e27600da7712"},{"problem":147,"code":"(fn trapezoid [s]\n  (let [next-row (fn next-row [s]\n                   (->> (concat [0] s [0])\n                        (partition 2 1)\n                        (map #(apply +' %))))]\n    (concat [s] (lazy-seq (trapezoid (next-row s))))))","user":"54d000c7e4b018d918be98d7"},{"problem":147,"code":"(fn p [xs]\n  (lazy-seq (cons xs (p (map (partial apply +') \n                             (partition 2 1 (concat [0] xs [0])))))))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":147,"code":"(fn __ [row] (lazy-seq (let [nrow (map +' (concat row [0]) (cons 0 row))] (cons row (__ nrow)))))","user":"553abb28e4b09218d5f44ffb"},{"problem":147,"code":"(fn trapezoid [vectr]\n  (lazy-seq\n    (let\t;indicio que la operaicon esta incompleta \"partial\" luego se hace una lista . poniendo al principio un 0:v lueg se hace un concat: del vector con este, poniendo al final el 0\n      [x (map (partial + 0N) (cons 0 vectr) (concat vectr [0]))]\n      ;finalmente hago al principio el cons agregando el vector al resultado de trapezoid :V\n      (cons vectr (trapezoid  x)))))","user":"59e63a2ce4b08badc2a0c569"},{"problem":147,"code":"iterate\n(fn [row]\n  (concat [(first row)] \n          (map #(apply +' %) (partition 2 1 row)) \n          [(last row)]))","user":"51647faae4b003cf19fdde3b"},{"problem":147,"code":"(fn fun147\n  [seq]\n  (letfn [(helper\n            [seq]\n            (let [new (cons 0 (concat seq '(0)))]\n              (map +' new (rest new))))]\n    (iterate helper seq)))","user":"5075e374e4b09049dea827a5"},{"problem":147,"code":"(fn foo [l]\n  (lazy-seq\n   (cons l (foo (map +' (concat l [0]) (concat [0] l))))))","user":"5590e55de4b0277789237676"},{"problem":147,"code":"(fn [v]\n  (iterate #(vec (map +' (cons 0 %) (conj % 0)))\n           v))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":147,"code":"(fn pascal [seed]\n  (lazy-seq\n    (cons seed (pascal\n                 (conj\n                   (vec\n                     (cons\n                       (first seed)\n                       (map +'\n                            (rest seed)\n                            (butlast seed))\n                       ))\n                   (last seed))))))","user":"53571732e4b04ce2eb3ed275"},{"problem":147,"code":"(fn itr [lst]\n     (letfn [(itr2 [l p]\n               (if (empty? l) (list p)\n                 (lazy-seq (cons (+' p (first l)) (itr2 (rest l) (first l))))))]\n       (lazy-seq (cons lst (itr (itr2 lst 0))))))","user":"57d9f603e4b0bd073c20240a"},{"code":"iterate #(map (partial apply +') (partition 2 1 (concat [0] % [0])))","problem":147,"user":"51944aaae4b0142f60b4aedc"},{"problem":147,"code":"(fn [origin] (iterate #(map +' (concat [0] %) (concat % [0])) origin))","user":"5793931ee4b0e215f87e845c"},{"code":"(fn app [args]\n  (lazy-seq (let [r (conj\n    (reverse (conj\n      (reverse (for [x (range (dec (count args)))]\n        (+ (nth args x) (nth args (inc x)))))\n      (last args)))\n    (first args))]\n    (cons args (app r)))))","problem":147,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn pascal-trapezoid [starting-row]\n  (letfn [(next-pascal-row [row]\n             (concat \n                [(first row)]\n                (map (partial apply +) \n                     (partition 2 \n                                (interleave \n                                  row\n                                  (rest row))))\n                [(last row)])\n             )\n          (rest-pascal-trapezoid [row]\n             (lazy-seq\n               (cons\n                 (next-pascal-row row)\n                 (rest-pascal-trapezoid (next-pascal-row row))\n                 )    \n               )\n           )]\n    (cons starting-row (rest-pascal-trapezoid starting-row)\n    )\n  )\n  )","problem":147,"user":"4ecfa05c535d44c135fd68b9"},{"problem":147,"code":"(fn pas [coll]\n   (cons coll \n         (lazy-seq \n           (pas \n             (concat [(first coll)]\n                      (map (partial apply +')\n                           (partition 2 1 coll)) \n                      [(last coll)])))))","user":"598858d0e4b021a7a535feb5"},{"problem":147,"code":"(fn solution [input]\n  (let [produce-next (fn [previous] (reduce #(conj %1 (reduce +' %2)) [] (partition 2 1 previous)))\n        next (concat (vector (first input)) (produce-next input) (vector (last input)))]\n    (lazy-seq (cons input (solution next)))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":147,"code":"(fn rec [v]\n        (lazy-seq\n         (let [vl (concat [0] v)\n               vr (concat v [0])\n               vv (vec (for [[x y] (map vector vl vr)] (+' x y)))]\n           (cons v (rec vv)))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":147,"code":"(fn ps [init]                                        (letfn [(iter [lst]                                            (loop [lst lst result [(first lst)]]                   (if (empty? (rest lst))                                (conj result (first lst))                            (recur (rest lst)                                           (conj result                                               (apply +' (take 2 lst)))))))]                                                    (cons init                                                 (lazy-seq                                             (ps (iter init))))))","user":"5895477fe4b00487982d527c"},{"problem":147,"code":"(fn pascal-Trapezoid\n  [prev]\n  (letfn [(next-row [prev]\n            (let [size (inc (count prev))]\n              (map\n                (fn [k] (cond (zero? k) (first prev)\n                              (= k (dec size)) (last prev)\n                              :else (+' (nth prev k) (nth prev (dec k)))))\n                (range size))))]\n    (lazy-seq (cons prev (pascal-Trapezoid (next-row prev)))))\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":147,"code":"(fn f [prev]\n   (cons prev\n         (lazy-seq\n           (f (concat\n                [(first prev)]\n                (map (partial apply +') (partition 2 1 prev))\n                [(last prev)])))))","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"#(iterate (fn [x] (map +' `(0 ~@x) `(~@x 0))) %)","problem":147,"user":"50ebf779e4b04edc3377703e"},{"code":"(fn [initial] (iterate \n (fn [nums] \n   (vec           \n    ((partial map #(+' (first %) (second %))) \n     (partition 2 1 [0] (cons 0 nums)))))\n initial))","problem":147,"user":"524ad140e4b09eba1c0223a9"},{"code":"(fn [x] (iterate (fn[c](conj (vec (map (comp bigint +) (cons 0 (butlast c)) c)) (last c))) x))","problem":147,"user":"4fba77fae4b081705acca2df"},{"problem":147,"code":"(fn f [x]\n               (cons x (lazy-seq (f (flatten (vector (first x) (map +' x (rest x)) (last x)))))))","user":"5d29c06be4b01671435dbc6b"},{"problem":147,"code":"iterate #(map +' (concat % [0]) (concat [0] %))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":147,"code":"(fn pascal [col]\n  (let [infun (fn inf [coll]\n    (let [extended (cons 0 (conj coll 0)) ]\n      (loop [ne [] i 1]\n        (if (< i (count extended))\n          (recur (conj ne (+' (nth extended (dec i)) (nth extended  i  ) )) (inc i))\n          (lazy-seq (cons ne (inf ne)))\n          ))))]\n    (cons col (infun col))            )\n        )","user":"579601c8e4b0e215f87e8492"},{"code":"#(iterate \r\n  (fn [s] \r\n    (map \r\n      (fn [p] (apply + p)) \r\n      (partition-all 2 1 (cons 0 s)))) \r\n  %)","problem":147,"user":"4f1fd734535d64f6031464a5"},{"problem":147,"code":"iterate #(mapv +' (conj % 0) (cons 0 %))","user":"55d1b565e4b0e31453f64a49"},{"problem":147,"code":"(fn pascal [xs]\n  (let [nxs\n        (mapv +' (cons 0 xs) (conj xs 0))]\n    (lazy-seq (cons xs (pascal nxs)))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn pascal-triangles [coll]\n  (let [next-pt (fn [xs]\n                  (->> (conj xs 0)\n                       (cons 0)\n                       (partition 2 1)\n                       (mapv (fn [[a b]] (+' a b)))))]\n    (iterate next-pt coll)))","problem":147,"user":"4dac39a28cc9d6edb8beb0b3"},{"code":"(fn [initial-v]\n  (iterate (fn [v]\n             (let [expanded-v (cons 0N (conj v 0N))]\n               (mapv #(apply + %) (partition 2 1 expanded-v))))\n           initial-v))","problem":147,"user":"51789dfae4b03d69594194d7"},{"code":"(fn f [x]\n  (lazy-seq\n    (let [y \n          (conj\n            (vec\n              (cons (first x)\n                (map #(apply +' %) (partition 2 1 x)))) (last x))]\n      (cons x (f y)))))","problem":147,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"(fn pascal-trapezoid [row]\n  (lazy-seq\n    (let [head (first row)\n          tail (map #(apply +' %) (partition-all 2 1 row))\n          next (cons head tail)]\n      (cons row (pascal-trapezoid next)))))","problem":147,"user":"4f6160a7e4b0defedf855fbe"},{"problem":147,"code":"iterate #(map +'(cons 0 %)(concat %[0]))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":147,"code":"(fn p [v] (cons v (lazy-seq (p (map (partial apply +') (partition 2 1 (flatten [0 v 0])))))))","user":"52a267c6e4b04e0c58e87bef"},{"problem":147,"code":"(fn [coll]\n  (iterate #(mapv +' (cons 0 %) (conj % 0)) coll))","user":"5152bc4ee4b001f44f99bfef"},{"problem":147,"code":"iterate #(map (fn [x] (apply +' x)) (partition 2 1 (concat [0] % [0])))","user":"551c66dae4b07993ea3788de"},{"problem":147,"code":"(fn [coll]\n  (iterate #(map (partial apply +') (partition 2 1 (flatten [0 % 0]))) coll))","user":"56a76f36e4b07966d5a8a05b"},{"code":"(fn pascals [in]\n  (let [pascal (fn pascal [s]\n    (mapv (partial apply +') (partition 2 1 (conj (into [0] s) 0))))]\n    (iterate pascal in)\n  ))","problem":147,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":147,"code":"(fn foo [v]\n  (cons v (lazy-seq (foo (conj\n                      (into [(first v)]\n                            (map (partial apply +')\n                                 (partition 2 1 v))) (last v))))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn solve [x]\n  (cons x (lazy-seq (solve ( into [] (cons (first x) (map #(reduce + %) (partition 2N 1N [0N] x))))))))","problem":147,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn [a] (iterate #(vec (map +' (cons 0 %) (conj % 0))) a))","problem":147,"user":"50921f9ae4b09a7d0b586de1"},{"problem":147,"code":"(letfn [                                                                                                                                                \n    (nthpair [coll n] (list (get coll n 0) (get coll (inc n) 0)))                                                               \n    (next-line [coll] (vec (map #(apply +' (nthpair coll %)) (range -1 (count coll)))))                                                                 \n    (my-sequence [coll] (cons coll (lazy-seq (my-sequence (next-line coll)))))]                                                 \n        my-sequence)","user":"558b50d5e4b027778923762b"},{"code":"(fn pascal [v]\n         (cons v \n               (lazy-seq\n                (pascal (map #(apply +' %) (partition 2 1 (concat [0] v [0])))))))","problem":147,"user":"4f75469ee4b0fbe0118ec55a"},{"problem":147,"code":"(fn [r]\n    (letfn [(next-row [p]\n              (condp = (count p)\n                0 [1]\n                1 [(first p) (first p)]\n                (let [f (first p)\n                      l (last p)]\n                  (vec (concat [f] (map #(apply +' %) (partition 2 1 p)) [l])))) )]\n      (iterate next-row r)))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn pascal [y]\n  (letfn [(pascal-helper [x]\n            (concat (conj (map #(+ (first %) (second %)) (partition 2 1 x)) (first x))\n                    (list (last x))))]\n    (iterate pascal-helper y)))","problem":147,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn [v]\n    (letfn [(next-pascal-row [v]\n              (into [] (concat [(first v)]\n                               (map #(apply + %) (partition 2 1 v))\n                               [(last v)])))]\n      (lazy-seq (iterate next-pascal-row v))))","problem":147,"user":"4e89e939535d3e98b8023287"},{"code":"(fn p [s]\n  (lazy-seq\n    (cons s\n      (p (map #(apply + %) (partition 2 1 [0] (cons 0 s)))))))","problem":147,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [s]\n  (iterate \n    (fn [x]\n      (concat [(first x)] (map (fn [[a b]] (+ a b)) (partition 2 1 x)) [(last x)]))\n    s))","problem":147,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(partial iterate #(vec (map (partial + 0N) (conj % 0) (cons 0 %))))","problem":147,"user":"50ed4626e4b01236b1d4983c"},{"code":"(let\n  [pascal (fn [xs]\n            (map (partial apply +)\n                 (partition 2 1 (flatten (vector 0 xs 0)))))]\n  (partial iterate pascal))","problem":147,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn lazy\n  [coll] (lazy-seq\n       (cons coll  (lazy  (\n                       (fn [coll2]\n                         (conj (vec (cons (first coll2) (map (fn [[x y]] (+ (bigint x) y)) (partition 2 1 coll2)))) (last coll2)))\n                       coll)))))","problem":147,"user":"4fb23582e4b081705acca28a"},{"problem":147,"code":"(fn pascals-triangle\n  [coll]\n  (cons coll (lazy-seq (pascals-triangle (map +' (cons 0 coll)(concat coll [0]))))))","user":"542d2385e4b0dad94371f2b2"},{"problem":147,"code":"(fn x [l] (lazy-seq (cons l (x (concat (take 1 l) (map (partial apply +') (partition 2 1 l)) (take-last 1 l))))))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":147,"code":"(fn [a] (iterate #(mapv +' (cons 0 %) (conj % 0)) a))","user":"5712854ce4b07c98581c3a89"},{"problem":147,"code":"(fn [xs] (iterate #(into [] (map +' (conj % 0) (cons 0 %))) xs))","user":"55896a0ce4b059ccff29b204"},{"problem":147,"code":"(fn pascals [x] \n               (cons x (lazy-seq (pascals (concat [(first x)] (map #(bigint (+ (nth x %) (nth x (inc %)))) (range (dec (count x))))  [(last x)])))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":147,"code":"(letfn [(gen-row [row _] (let [l (concat row [0]) r (concat [0] row) pair (map vector l r)] (map #(apply +' %) pair)))]\n  (fn [r] (reductions gen-row r (range))))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn [ele] \n    (iterate #(map + (concat [0] %) (concat % [0])) (map bigint ele) ) )","problem":147,"user":"528f4462e4b0239c8a67aef0"},{"problem":147,"code":"(fn [xs]\n  (iterate (fn [row]\n             (concat\n               (take 1 row)\n               (->> row\n                    (partition 2 1)\n                    (map #(apply +' %)))\n               [(last row)]))\n           xs))","user":"59eb63e3e4b0249b7282077c"},{"problem":147,"code":"(fn pascal [v]\n  (cons v\n    (lazy-seq\n  \t\t(pascal (concat [(first v)] (map #(apply +' %) (partition 2 1 v)) [(last v)])))))","user":"54448e84e4b032a45b869393"},{"problem":147,"code":"(fn pt\n  [r]\n  (let [b (first r)\n        e (last r)\n        m (map #(apply +' %) (partition 2 1 r))\n        rnext (concat [b] m [e])]\n    (lazy-seq (cons r (pt rnext)))))","user":"5866b999e4b0f14aab7c886b"},{"problem":147,"code":"(fn pascal-trapezoid [xs]\n  (letfn [\n          (trapezoid [xs]\n            (if (= xs [1])\n              [1 1]              \n              (->\n                (reduce \n                  (fn [acc i]\n                    (conj acc (+' (get xs i) (get xs (inc i)))))\n                  [(first xs)] (range (dec (count xs))))\n                (conj (last xs)))))]\n    \n    (let [ys (trapezoid xs)]\n      (cons xs (lazy-seq (pascal-trapezoid ys))))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn gamma [row]\n  (letfn [(prossimo [r] (loop [v r s [] k (bigint 0)]\n                          (if (empty? v)\n                            (conj s k)\n                            (let [z (bigint (first v))]\n                              (recur (rest v) (conj s (bigint (+ z k))) z)))))]\n    (lazy-cat (cons row (gamma (prossimo row))))))","problem":147,"user":"52c81954e4b0c2d177d6212e"},{"problem":147,"code":"(fn tri [array]\n  (let [nextstate\n        (fn []\n          (let [left (concat [0] array)\n                right (concat array [0])]\n            (map +' left right)))]\n    (lazy-seq (concat [array] (tri (nextstate))))))","user":"5b8162d0e4b047b03b20378b"},{"problem":147,"code":"iterate #(map +' (conj (vec %) 0) (cons 0 %))","user":"569c40cee4b0542e1f8d1462"},{"problem":147,"code":"(fn pt [x]\n  (iterate #(loop [t [(first %)] r %]\n              (if (= 1 (count r))\n                (conj t (first r))\n                (recur (conj t (+' (first r) (second r)))\n                       (rest r))))\n           x))\n\n;nicer:\n;(fn pt [x]\n;  (lazy-seq\n;   (let [r (map +' (cons 0 x) (concat x [0]))]\n;     (cons x (pt r)))))","user":"57533bc1e4b02ea1147992a6"}]