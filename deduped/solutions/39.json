[{"code":"(fn f [c1 c2]\r\n    (if (seq c1)\r\n      (if (seq c2)\r\n        (cons (first c1)\r\n              (cons (first c2)\r\n                    (f (rest c1) (rest c2)))))))","problem":39,"user":"4f047177535dcb61093f6bc6"},{"problem":39,"code":"(fn inter[a b](when (and (seq a) (seq b)) (concat [(first a) (first b)] (inter (rest a) (rest b)))))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn foo [as bs] (flatten (if (some empty? [as bs]) (list) (cons [(first as) (first bs)] (foo (rest as) (rest bs))))))","problem":39,"user":"5073de20e4b054001656acca"},{"code":"(fn [a b] (apply concat (map list a b)))","problem":39,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":39,"code":"(fn [seq1 seq2]\n  (letfn [(iter-interlev [res seq1 seq2]\n                         (if (or (empty? seq1) (empty? seq2))\n                           (reverse res)\n                           (iter-interlev (into res (list (first seq1) (first seq2))) (rest seq1) (rest seq2))))]\n    (iter-interlev () seq1 seq2)))","user":"531571ece4b08068f379ed27"},{"problem":39,"code":"#( loop [a %1 b %2 c []]\n           (if(or (empty? a) (empty? b))\n             c\n             (recur (rest a) (rest b) (conj c (first a) (first b)))))","user":"548392fce4b0e286459a1191"},{"code":"(fn [el1 el2]\n   (loop [l1 el1\n          l2 el2\n          res '()]\n     (cond\n      (or (empty? l1) (empty? l2)) (flatten res)\n      :else (recur (rest l1)\n                   (rest l2)\n                   (list res (first l1) (first l2))))))","problem":39,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":39,"code":"(fn mer \n  [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    (sequence ())\n    (conj (mer (rest s1) (rest s2)) (first s2) (first s1))))","user":"5c486dece4b0e06e1360a3c0"},{"code":"#(loop [s1 %1 s2 %2 result '() ]\n     (if (or (empty? s1) (empty? s2))\n         (flatten result)\n         (recur (rest s1) (rest s2) (list  result (first s1) (first s2)  )) ) )","problem":39,"user":"5290ffaee4b0239c8a67af10"},{"code":"(fn f [a b] (if (empty? a) [] (if (empty? b) [] (flatten [(first a) (first b) (f (rest a) (rest b))]))))","problem":39,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn [a b]\n  (loop [l1 a \n          l2 b\n          res []]\n    (if (or (empty? l1) (empty? l2)) res\n      (recur (rest l1) (rest l2) (conj res (first l1) (first l2)))\n    )        \n            ) \n)","problem":39,"user":"4fe610fde4b0e8f79898fece"},{"problem":39,"code":"(fn interleave3 [seq1 seq2]\n  (let [short (min (count seq1) (count seq2))]\n        (flatten \n          (for [x (range short)] \n            [(get seq1 x) (get seq2 x)]))))","user":"57995ac1e4b05b1deef9adbf"},{"code":"#(flatten (map vector % %2))","problem":39,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn a [s t]\n  (if (or (empty? s) (empty? t)) '()\n    (cons (first s) (cons (first t) (a (rest s) (rest t))))))","problem":39,"user":"4f569218e4b0a7574ea71826"},{"problem":39,"code":"(fn newInterleave\n  [list1 list2]\n  (flatten (map #(concat [%1] [%2]) list1 list2)))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":39,"code":"(fn [a b] (reduce concat (map list a b)))","user":"539eb153e4b0ca733b97448e"},{"problem":39,"code":"(fn [s1 s2]\n    (mapcat #(conj [] %1 %2) s1 s2))","user":"587bead1e4b01531a375eb0d"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 out '()]\n   (if (or (empty? s1) (empty? s2)) out\n     (recur (next s1) (next s2) (concat out `(~(first s1) ~(first s2))))))","user":"5605b5e9e4b08b23635d316e"},{"code":"(fn [s1 s2]\n(reverse ((fn [s1 s2 ret]\n  (if (or (empty? s1) (empty? s2))\n    ret\n    (recur \n      (rest s1) \n      (rest s2) \n      (conj (conj ret (first s1)) (first s2)))))\n  s1 s2 ())))","problem":39,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [l1 (apply list l1) l2 (apply list l2) l3 []]\n    (if (or (empty? l1) (empty? l2))\n      (apply list l3)\n      (recur (pop l1) (pop l2) (conj l3 (peek l1) (peek l2))) \n      )\n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn il [x y] (let [fx (first x) fy (first y)] (if (or (nil? fx) (nil? fy)) '() (cons fx (cons fy (il (rest x) (rest y)))))))","problem":39,"user":"4ded582d535d08e6dec9fe0c"},{"code":"(fn [a b] (apply concat (map vector a b)))","problem":39,"user":"4e513ecf535dc968683fc4f6"},{"problem":39,"code":"(fn [lst1 lst2]\n    (let [len (min (count lst1) (count lst2))]\n      (loop [i 0 acc []]\n        (if (< i len)\n          (recur (inc i) (conj acc (nth lst1 i) (nth lst2 i)))\n          acc))))","user":"5e668d87e4b0e171e1033681"},{"problem":39,"code":"(fn [f s]\n  (loop [r [] o f t s]\n    (if (or (= o nil) (= t nil) )\n      r\n      (recur (conj r (first o) (first t)) (next o) (next t))\n    )\n  )\n)","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":39,"code":"(fn intrlv [v1 v2]\n   (flatten \n      (map #( conj (list %2) (list %1) ) v1 v2)))","user":"556880dae4b0c656e3ff1856"},{"code":"(fn [xs xn]\n  (mapcat vector xs xn))","problem":39,"user":"4e726914535d5021c1a89661"},{"problem":39,"code":"(fn [ob1 ob2]\n             (let [len (min (count ob1) (count ob2))]\n               (loop [ret () i 0]\n                 (if (= i len)\n                   (reverse ret)\n                   (recur (conj ret (nth ob1 i) (nth ob2 i)) (+ i 1))))))","user":"56305383e4b073c1cf7a9be6"},{"problem":39,"code":"(fn [s1 s2]\n    (loop [acc []\n           s1 s1\n           s2 s2]\n      (if (or (empty? s1) (empty? s2)) acc\n        (recur (conj acc (first s1) (first s2)) (rest s1) (rest s2)))))","user":"5141a8f2e4b02fd87f5064c1"},{"problem":39,"code":"(fn [x y]\n  (loop [acc [] s1 x s2 y]\n    (if (or (empty? s1) (empty? s2))\n      acc\n      (recur (conj (conj acc (first s1)) (first s2)) (drop 1 s1) (drop 1 s2)))))","user":"57c3df67e4b05aa3c4741cc5"},{"code":"(fn\n  [a b]\n  (loop [res [],\n         a a,\n         b b]\n    (if (and (seq a) (seq b))\n      (recur (conj res (first a) (first b))\n             (rest a)\n             (rest b))\n      res)))","problem":39,"user":"4e8ce277535d65386fec212f"},{"code":"mapcat (fn [e1 e2] [e1 e2])","problem":39,"user":"4efd8b67535de96065cf5085"},{"code":"(fn i [col1 col2]\n  (let [c1 (first col1) c2 (first col2)]\n    (if (and c1 c2)\n      (cons c1 (cons c2 (i (next col1) (next col2)))))))","problem":39,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn f [& xxs] (if (not-any? empty? xxs) (concat (map first xxs) (apply f (map rest xxs))) []))","problem":39,"user":"50ee851ee4b06330c1f87c5b"},{"problem":39,"code":"(fn [seq1, seq2]\n  (loop [s1 seq1, s2 seq2, r []]\n    (if\n     (or (empty? s1) (empty? s2)) r\n     (recur (rest s1) (rest s2) (conj (conj r (first s1)) (first s2))))))","user":"5590e55de4b0277789237676"},{"problem":39,"code":"(fn f [x y]\n  (if (some empty? [x y])\n    '()\n    (cons (first x) (cons (first y) (f (rest x) (rest y))))))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn [a b]\n   (let [m (min (count a) (count b))\n         a (take m a)\n         b (take m b)]\n     (loop [resta a\n            restb b\n            result []]\n       (if (empty? resta)\n         result\n         (recur\n          (rest resta)\n          (rest restb)\n          (concat result [(first resta) (first restb)]))))))","problem":39,"user":"52090567e4b0e152394d76ed"},{"problem":39,"code":"(fn [s1 s2]\n    (mapcat #(list % %2) s1 s2))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn ilv [s1 s2] (if (empty? s1) nil (if (empty? s2) nil (concat (conj (conj '() (first s2)) (first s1)) (ilv (rest s1) (rest s2)))) ))","problem":39,"user":"51d381b5e4b099f3b6acde01"},{"problem":39,"code":"(fn [xs ys]\n  (loop [acc [] xs xs ys ys]\n    (if( or (empty? xs) (empty? ys)) acc\n      (recur (conj acc (first xs) (first ys)) (rest xs) (rest ys)))))","user":"54dce62fe4b024c67c0cf78c"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten (map #(seq [%1 %2]) s1 s2)))","user":"5f3abd21e4b004f08c61c52c"},{"problem":39,"code":"(fn [& etc] (flatten (apply map list etc)))","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":39,"code":"(fn interleaver [x y]\n  (if\n    (or(= 0 (count x))(= 0 (count y)))\n    '()\n    (concat (list (first x) (first y)) (interleaver (drop 1 x) (drop 1 y)))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn\n i\n [x y]\n (if\n  (and (not (empty? x)) (not (empty? y)))\n  (concat (list (first x) (first y)) (i (rest x) (rest y)))))","problem":39,"user":"4fb510b5e4b081705acca2b8"},{"problem":39,"code":"(fn [a b]\n    (let [i (min (count a) (count b))]\n        (apply concat (for [j (range 0 i)]\n            (list (nth a j) (nth b j))))\n    ))","user":"53882352e4b0640c7a9a5898"},{"problem":39,"code":"(fn [ca cb] \n  (loop [ca ca cb cb c []] \n    (if (or (empty? ca) (empty? cb)) c \n      (recur (rest ca) (rest cb) (conj c (first ca) (first cb))))))","user":"55632016e4b0c656e3ff17e4"},{"problem":39,"code":"(fn [XS YS]\n  (let [it (fn iter [xs ys]\n               (cond (empty? xs) '()\n                     (empty? ys) '()\n                     true (conj (conj (iter (rest xs) (rest ys)) (first ys)) (first xs))))]\n          (it XS YS)))","user":"5583888ae4b05c286339e117"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map vector seq1 seq2)))","user":"54f53d3ce4b0f2f3c5226e90"},{"problem":39,"code":"(fn [a b]\n  ((fn [acc a b]\n    (let [na (first a)\n          nb (first b)]\n      (cond\n       (or (nil? na)\n            (nil? nb)) acc\n       :else (recur (concat acc [na nb]) (rest a) (rest b)))))\n  [] a b))","user":"54d87b54e4b0a52adc2e2038"},{"problem":39,"code":"(fn intrlv [c1 c2]\n  (lazy-seq\n   (let [seq1 (seq c1) seq2 (seq c2)]\n     (when (and seq1 seq2)\n       (cons (first seq1) (cons (first seq2)\n                              (intrlv (rest seq1) (rest seq2))))))))","user":"5fc860b1e4b049d89c09cd94"},{"problem":39,"code":"(fn mixer [x  y ]\n   (if (or (empty? x)(empty? y)) '()\n     (cons (first x) (cons (first y) (mixer (rest x) (rest y))))))","user":"5fc1c424e4b0edf42a5593d0"},{"code":"(fn myint [lt1 lt2]\r\n    (apply concat (map #(list %1 %2) lt1 lt2)))","problem":39,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":39,"code":"(fn gao [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                             (gao (rest s1) (rest s2)))))))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn [x y] (nth (iterate (fn [z] (conj z (nth x (/ (count z) 2)) (nth y (/ (count z) 2)))) [] ) (min (count x) (count y)) ))","problem":39,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn [as bs]\n  (loop [xs as ys bs r []]\n    (cond (empty? xs) r\n          (empty? ys) r\n          true (recur (rest xs) (rest ys) (into r [(first xs) (first ys)]))\n)))","problem":39,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":39,"code":"(fn [a b] \n  (loop [s1 a s2 b acc []]\n    (if (and (first s1) (first s2))\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))\n      acc)))","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat (fn [x y] [x y]) coll1 coll2)\n  )","user":"5628f727e4b00e49c7cb47f5"},{"code":"mapcat #(conj [] %1 %2)","problem":39,"user":"4daeabf6edd6309eace4d15c"},{"problem":39,"code":"(fn [& items] (flatten (apply map vector items)))","user":"5f009162e4b0cf489e8d7f1a"},{"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (into [(first xs) (first ys)] (inter (rest xs) (rest ys)))))","problem":39,"user":"5298cc88e4b02ebb4ef75065"},{"code":"(fn interl\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interl (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interl (map rest ss))))))))","problem":39,"user":"51ec9114e4b069f463c22ccd"},{"problem":39,"code":"(fn \n  [list list1] \n  (mapcat vector list list1))","user":"59dd3930e4b0a0ac046f2504"},{"problem":39,"code":"(fn [& args] \n  (flatten (apply map list args))\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"(fn [x y] (flatten (map #(conj [] %1 %2) x y)))","problem":39,"user":"51b1ef95e4b02f8f128bb95e"},{"code":"#(flatten (reverse (into [](zipmap %1 %2))))","problem":39,"user":"531bfb69e4b08068f379ed97"},{"problem":39,"code":"(fn [a b]\n  (loop [acc [] aa a bb b]\n    (if (and (seq aa) (seq bb))\n      (recur (conj acc (first aa) (first bb)) (rest aa) (rest bb))\n      acc)))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":39,"code":"(fn fred [a-seq b-seq] \n  (when (not (or (empty? a-seq) (empty? b-seq)))\n       (conj (conj (fred (rest a-seq) (rest b-seq)) (first b-seq)) (first a-seq))    \n  )\n )","user":"55c387e4e4b0e31453f6498b"},{"code":"(fn [xs ys]\n  (loop [s1 xs s2 ys s3 []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj s3 (first s1) (first s2)))\n    s3)))","problem":39,"user":"4ee645f8535d93acb0a6685d"},{"code":"(fn [a b & c]\n  (if (or (empty? a) (empty? b))\n    c\n    (recur (rest a) (rest b) (concat c (list (first a) (first b))))))","problem":39,"user":"4f03193e535dcb61093f6a61"},{"problem":39,"code":"(fn\n  [seq1 seq2]\n  (loop [main-seq seq1\n         iteration 0\n         final []]\n    (if (or (empty? main-seq) (> iteration (dec (count seq2))))\n      final\n      (let [[head & tail] main-seq]\n        (recur\n          tail\n          (inc iteration)\n          (conj final head (nth seq2 iteration)))))))","user":"54e04d95e4b024c67c0cf7b4"},{"problem":39,"code":"(fn inter\n  ([s1 s2] (inter (seq s1) (seq s2) []))\n  ([s1 s2 out]\n   (if (or (empty? s1) (empty? s2))\n     (seq out)\n     (inter (rest s1) (rest s2) (conj out (first s1) (first s2))))))","user":"5bc4f266e4b07a9b28b10066"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (or (= a ()) (= b ()))\n    ()\n    (conj (conj (my-interleave (rest a) (rest b)) (first b)) (first a))))","user":"5dc40814e4b02f9375f4e1ae"},{"code":"(partial mapcat (fn [x y] [x y]))","problem":39,"user":"4ffa893fe4b0678c553fc3bc"},{"problem":39,"code":"(fn [x y]\n  (loop [x x y y z []]\n    (if (or (empty? x) (empty? y))\n      z\n      (recur (rest x)\n             (rest y)\n             (conj (conj z (first x)) (first y))))))","user":"56f85849e4b08e7d20b96836"},{"code":"(fn [a b]\n((fn bb [x y]\n  (lazy-seq\n   (let [xx (seq x) yy (seq y)]\n   (when (and xx yy)\n   (cons (first xx) (cons (first yy) (bb (rest xx) (rest yy))))\n   )))) a b))","problem":39,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":39,"code":"(fn [x y]\n      (mapcat (fn [x y] \n             [x y]) x y))","user":"58447708e4b089d5ab817e4b"},{"problem":39,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 [:a :b :c])) (quote (1 :a 2 :b 3 :c))\n(and true (= arg2 [3 4 5 6])) (quote (1 3 2 4))\n(and true (= arg2 [5])) [1 5]\n(and true (= arg2 [25 15])) [30 25 20 15]\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":39,"code":"(fn intl [a b]\n  (if (empty? a)\n    []\n    ;;if a has elements\n    (if (empty? b)\n      ;;if only a left, return a\n      []\n      ;;if both, then recur\n      \n      (flatten (cons [] [(first a) (first b) (intl (rest a) (rest b))]))\n    )\n  )\n)","user":"5984b9f3e4b021a7a535fe33"},{"code":"(fn [seq1 seq2]\n  (mapcat vector seq1 seq2))","problem":39,"user":"521e4f22e4b0dd19981ad079"},{"problem":39,"code":"(fn [x y] (apply concat (mapv (fn [a b] (list a b)) x y)))","user":"5d84545ee4b0915913b1d38b"},{"problem":39,"code":";(fn [vec1 vec2]\n;  (loop [v1 vec1 v2 vec2 acum []]\n;    (if (and (first v1) (first v2))\n;      (do\n;        (let [acumVec (conj acum (first v1) (first v2))]\n;          (recur (rest v1) (rest v2) acumVec)))\n;      acum)))\n\n;#(reduce concat (map vector %1 %2))\n\n#(mapcat vector %1 %2)","user":"5be589f9e4b0ed4b8aab4d13"},{"code":"(fn il [a b] \n  (if (= 0 (min (count a) (count b))) \n      []\n      (concat [(first a) (first b)] (il (rest a) (rest b))) \n  )\n)","problem":39,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":39,"code":"(fn [x y] (reduce into () (zipmap y x)))","user":"56f6e541e4b08e7d20b9682a"},{"code":"(fn [s d] (flatten (map vector s d)))","problem":39,"user":"53852e84e4b06839e8705efd"},{"code":"(fn inlv [a b] (if (or (empty? (rest a)) (empty? (rest b))) \n                 (list (first a) (first b))\n                 (concat (list (first a) (first b)) (inlv (rest a) (rest b)))))","problem":39,"user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn [lst mst]\r\n  (loop [xs '() ls lst ms mst]\r\n    (if (or (= nil (first ls))\r\n      (= nil (first ms)))\r\n      (reverse xs)\r\n      (recur (conj xs (first ls) (first ms))\r\n\t     (rest ls)\r\n\t     (rest ms)))))","problem":39,"user":"4ddc620d535d02782fcbea06"},{"problem":39,"code":"(fn my-interleave\n  ([arg1 arg2]\n   (my-interleave arg1 arg2 []))\n  ([arg1 arg2 inter]\n   (if (or (empty? arg1) (empty? arg2))\n     inter\n     (my-interleave (rest arg1) (rest arg2) (conj inter (first arg1) (first arg2))))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":39,"code":"(fn [c1 c2]\n  (letfn [(inner1 [s1 s2]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                             (inner1 (seq (rest s1)) (seq (rest s2)))))))]\n    (inner1 (seq c1) (seq c2))))","user":"58f273d9e4b08e1cf3471d01"},{"problem":39,"code":"(fn [& x] (flatten (apply map vector x)))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn ileave [c1 c2]\n     (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (ileave (rest s1) (rest s2)))))))","problem":39,"user":"4fd6028ce4b0d4de60cee37b"},{"problem":39,"code":"(fn inter \n  [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (inter (rest s1) (rest s2))))))))","user":"55c734a5e4b0e31453f649cb"},{"problem":39,"code":"(fn [x y]\n  (loop [a x\n         b y\n         r []\n         ]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b)(conj r (first a) (first b))))))","user":"55c66ffee4b0e31453f649c2"},{"problem":39,"code":"(fn\n  [a b]\n  (flatten (map #(reduce conj [[] %1 %2]) a b)))","user":"59a9c22ae4b08cbb53654d75"},{"code":"(fn z [[x & xs] [y & ys]]\n  (if (and x y)\n    (cons x (cons y (z xs ys)))\n    []))","problem":39,"user":"5110b8bae4b04c71fce993f4"},{"problem":39,"code":"(fn [arg1 arg2] (loop [l1 arg1 l2 arg2 res []] (if (or (empty? l1) (empty? l2)) res (recur (rest l1) (rest l2) (-> res (conj (first l1)) (conj (first l2)))))))","user":"60109997e4b074f607df66b3"},{"problem":39,"code":"(fn \n  [coll1 coll2]\n  (flatten (map (fn [x y] [x y]) coll1 coll2)))","user":"54fdb4b9e4b07d26eda61d3a"},{"problem":39,"code":"(fn [a b]\n  (loop [ain a bin b out []]\n    (if (or (empty? ain) (empty? bin)) out\n      (recur (rest ain) (rest bin) (conj out (first ain) (first bin))))))","user":"520d3129e4b0b022ef140ca5"},{"code":"(fn [a,b]\n  (let [min-length (min (count a) (count b))]\n    (flatten (map (fn [i] (vector (nth a i) (nth b i))) (range min-length)))))","problem":39,"user":"531d53dbe4b08068f379edae"},{"problem":39,"code":"(fn [x y] (flatten (mapcat (fn [a b] [[a b]]) x y)))","user":"4e68c465535d8ccf87e9fe8a"},{"code":";mapcat (fn combineTwo[x y](list x y))\nmapcat #(list %1 %2)","problem":39,"user":"534d639ae4b084c2834f4a9e"},{"code":"(fn [s1 s2] (flatten (map (fn [x y] (list x y)) s1 s2)))","problem":39,"user":"51bc2f6ae4b0fe3ecfb46452"},{"code":"(fn intrlv \n  ([coll1 coll2]\n    (intrlv coll1 coll2 '()))\n    ([coll1 coll2 acc]    \n      (let [acc2 (if (empty? coll1)\n                      acc\n                      (concat acc (list (first coll1))))\n            acc3 (if (empty? coll2)\n                      acc2\n                      (concat acc2 (list (first coll2))))\n            ncoll1 (if (empty? coll1)\n                      coll1\n                      (rest coll1))\n            ncoll2 (if (empty? coll2)\n                      coll2\n                      (rest coll2))]\n        (if (or (empty? coll1) (empty? coll2))\n          acc\n          (recur ncoll1 ncoll2 acc3)))))","problem":39,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":39,"code":"(fn\n  [& sequences] \t      \n  (let [max-index (apply min (map count sequences))]\n    (loop [index 0\n           result []] \n      (if (>= index max-index)\n        result\n        (recur (+ index 1)\n          (into result (map #(nth % index) sequences)))\n      )\n    )\n  )\n)","user":"5d9ceac2e4b0eb781811cdb3"},{"problem":39,"code":"(fn [data1 data2]\n    (let [g (fn [res d1 d2 left]\n              (cond\n                (and left (seq d1) (seq d2))\n                (recur (conj res (first d1)) d2 (rest d1) false)\n                (and (not left) (seq d1))\n                (recur (conj res (first d1)) d2 (rest d1) true)\n                :else res))]\n      (g [] data1 data2 true)))","user":"593352b7e4b072a2710fd052"},{"problem":39,"code":"(fn my-interleve [[c1 & r1 :as col1] [c2 & r2 :as col2]]\n      (if (or (empty? col1 ) (empty? col2))\n        '()\n        (cons c1 (cons c2 (my-interleve r1 r2)))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":39,"code":"(fn my-interleave[col1 col2]\n  (mapcat (fn[& xs] (vec xs)) col1 col2))","user":"4dd76bf9535d2dad7130b5d1"},{"problem":39,"code":"(fn union [res x y]\n  (if (or\n       (empty? x)\n       (empty? y))\n    res\n    (union \n     (conj res\n           (first x)\n           (first y))\n     (rest x)\n     (rest y)))\n ) []","user":"56366f73e4b0bfe05bf117cc"},{"problem":39,"code":"(fn [a b] (seq (flatten (into '() (zipmap a b)))))","user":"5d8a3f3ee4b0915913b1d3c9"},{"problem":39,"code":"#(loop [a %1\n        b %2\n        return []]\n   (if (or (empty? a) (empty? b))\n     return\n     (recur (rest a)\n            (rest b)\n            (conj (conj return (first a)) (first b)))))","user":"5d2c779be4b01671435dbc8d"},{"code":"#(apply concat (reverse (zipmap % %2)))","problem":39,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":39,"code":"#(apply concat (apply map list [%1 %2]))","user":"53b14289e4b047364c04448b"},{"problem":39,"code":"(fn i [x,y] (if (and (> (count x) 0) (> (count y) 0)) (concat [(first x)] [(first y)] (i (rest x) (rest y))) '() ))","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn my-interleave [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) \n                             (my-interleave (rest s1) (rest s2)))))))","problem":39,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn f[[a & b][x & y]](concat[a x](if(and b y)(f b y)nil)))","problem":39,"user":"4f296a80e4b0d6649770a02a"},{"problem":39,"code":"#(loop [res [] c1 %1 c2 %2]\n   (if (and (seq c1) (seq c2))\n     (recur (conj res (first c1) (first c2))\n            (rest c1)\n            (rest c2))\n     res))","user":"58dcae01e4b0a4d5acaab6a4"},{"problem":39,"code":"(partial \n  (fn f [r a c]\n   (if (or (empty? a) (empty? c))\n     r\n     (recur (conj r (first a) (first c))\n            (rest a)\n            (rest c)))) [])","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"#(flatten (apply map list [%1 %2]))","problem":39,"user":"52f89125e4b047fd55836fd4"},{"problem":39,"code":";#(flatten (into [] (zipmap %1 %2)))\n\nmapcat vector","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn my-interleave [a b]\n   (when (and (> (count a) 0) (> (count b) 0))\n     (cons (first a) (cons (first b)\n                           (my-interleave (rest a) (rest b))))))","problem":39,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":39,"code":"(fn [x y] (flatten (map #(list (x %) (y %)) (range (min (count y) (count x))))))","user":"542f574be4b0dad94371f2d0"},{"code":"(fn my-inter\n     ([list-a list-b] (my-inter list-a list-b [])) \n     ([list-a list-b result] \n      (if (or (empty? list-a) (empty? list-b))\n        result\n        (my-inter (rest list-a) (rest list-b) (concat result (concat [(first list-a)] [(first list-b)] ))))))","problem":39,"user":"5038f8d2e4b088a6a14ca75f"},{"code":"#(apply concat (vec (apply map vector [% %2])))","problem":39,"user":"4f942227e4b0dcca54ed6cbe"},{"problem":39,"code":"(fn [s1 s2]\n  (apply concat (map (fn [a b] [a b]) s1 s2)))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":39,"code":"(fn [col1 col2] (reduce concat (map vector col1 col2)))","user":"5787c1a4e4b0ebec4cfb750b"},{"code":"(fn inter [a, b]\n  (if (or (empty? a) (empty? b))\n    ()\n    (concat (list (first a) (first b)) (inter (rest a) (rest b)))\n    )\n  )","problem":39,"user":"52b2a819e4b0c58976d9acf1"},{"code":"(fn intl [xs ys] (if (or (empty? xs) (empty? ys)) () (cons (first xs) (cons (first ys) (intl (rest xs) (rest ys))))))","problem":39,"user":"5211d195e4b07aea8afc4f76"},{"problem":39,"code":"(fn [ts1 dn2]\n  (loop [r '()\n         ii ts1\n         jj dn2]\n    (if (or (empty? ii) (empty? jj))\n      r\n      (recur (concat r (list (first ii) (first jj)))\n             (rest ii)\n             (rest jj)))))","user":"54a80855e4b09f271ff37c9e"},{"code":"(fn inter \n  ([c1 c2] (inter c1 c2 []))\n  ([c1 c2 result]\n  (if (or (empty? c1) (empty? c2))\n    result\n    (inter (rest c1) (rest c2) (conj result (first c1) (first c2))))))","problem":39,"user":"4feddf2ee4b0198f34b063be"},{"code":"(fn [s1 s2]\n  (let [paired (map vector s1 s2)]\n    (reduce #(apply conj %1 %2) paired)))","problem":39,"user":"5133af1de4b0d7a043de8cf2"},{"code":"(fn [seq1 seq2]\n  (loop [a seq1\n         b seq2\n         c ()]\n    (if (and (< 0 (count a)) (< 0 (count b)))\n      (recur\n        (rest a)\n        (rest b)\n        (reverse (conj (conj (reverse c) (first a)) (first b)))\n      )\n      c               \n    )\n  )\n)","problem":39,"user":"530c462ae4b02e82168697d9"},{"problem":39,"code":"#(loop [idx 0\n        result []]\n   (if (or (nil? (get % idx)) (nil? (get %2 idx)))\n     result\n     (recur (inc idx)\n            (conj result (get % idx) (get %2 idx)))))","user":"571077e8e4b09c608db70434"},{"problem":39,"code":"(comp vec flatten (partial map list))","user":"574f5496e4b02ea11479925c"},{"code":"(fn [xs ys]\n  (reverse \n   (loop [xs xs\n          ys ys\n          res '()]\n     (if (or (empty? xs) (empty? ys))\n       res\n       (let [x (first xs)\n             y (first ys)]\n         (recur (rest xs)\n                (rest ys)\n                (cons y (cons x res))))))))","problem":39,"user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn my-interleave ([x y]\n        (and (seq x) (seq y) (cons (first x) (cons (first y) \n                                 (my-interleave (rest x) (rest y)))))))","problem":39,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn [c1 c2]\n  (letfn [(intrlv [s1 s2]\n            (when-not (or (empty? s1) (empty? s2))\n              (cons (first s1) (cons (first s2)\n                                     (intrlv (rest s1) (rest s2))))))]\n    (intrlv c1 c2)))","problem":39,"user":"4f2893d0e4b0d6649770a019"},{"problem":39,"code":"(fn [v1 v2] \n   (flatten (map list v1 v2)))","user":"5a514e68e4b05d388ecb6be5"},{"problem":39,"code":"(fn [x y] (reduce concat (map (fn [x y] (list x y)) x y)))","user":"56393681e4b0bfe05bf117f2"},{"problem":39,"code":"(fn [x y]\n  (reduce concat (map list x y)))","user":"53d2afede4b00fb29b221321"},{"problem":39,"code":"(fn [c1 c2]\n  (apply concat ((partial map list) c1 c2)))","user":"5243e37ae4b076204b44fae3"},{"code":";;map takes more than one collection !! $.each(coll1,function(k,v){ans+=coll1[k]+coll2[k]}\n#(flatten (map vector %1 %2))","problem":39,"user":"5307e4ece4b02e82168697a9"},{"code":";#(flatten (map list %1 %2))\n\nmapcat list","problem":39,"user":"527b8881e4b03e8d9a4a758e"},{"problem":39,"code":"(fn intrlv [& seqs] (apply mapcat (fn [& args] args) seqs))","user":"563b5dc9e4b0bfe05bf1180f"},{"problem":39,"code":"(fn [sq1 sq2] (mapcat #(list %1 %2) sq1 sq2))","user":"598876fee4b021a7a535feb7"},{"code":"(fn weave [x y]\n  (let [xf (first x) xr (rest x) yf (first y) yr (rest y)]\n    (if (empty? xr)\n      (concat [xf] [yf])\n      (if (empty? yr)\n        (concat [xf] [yf])\n        (concat [xf yf] (weave xr yr))\n        )\n      )\n    ))","problem":39,"user":"52e9dbe5e4b09f7907dd14b4"},{"code":"(new clojure.core$interleave)","problem":39,"user":"4e3b6bff535deb9a81d77f52"},{"problem":39,"code":"(fn [var var2]\n  (mapcat vector var var2))","user":"5f792d48e4b02876ed9fd0c5"},{"code":"(fn [coll1 coll2]\n  (flatten (map #(identity [% %2]) coll1 coll2)))","problem":39,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [c1 c2]\n  (mapcat vector c1 c2))","problem":39,"user":"51d19c24e4b0cfcf579466c3"},{"problem":39,"code":"#(mapcat\n  (fn [& x] (vec x) )\n  %1 %2\n  )","user":"5b227f5ae4b03cfeda66ed63"},{"problem":39,"code":"(fn [a b] \n  (->> a\n       (take (count b))\n       (map-indexed (fn [k v] [v (b k)]))\n       (flatten)))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":39,"code":"(fn f [[x & xs] [y & ys]]\n  (if (and xs ys)\n    (concat (list x y) (f xs ys))\n    (list x y)))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn [c1 c2] (mapcat #(conj [] %1 %2) c1 c2))","problem":39,"user":"5302bb37e4b0d8b024fd3734"},{"code":"(fn alpha [& colls]\n   (let [pairs (apply (partial map (fn [a b] [a b])) colls)]\n     (reduce concat [] pairs)))","problem":39,"user":"52e55e16e4b09f7907dd1460"},{"problem":39,"code":"#(loop [result '() xs %1 ys %2]\n   (if (or (empty? xs) (empty? ys))\n     result\n     (recur\n      (concat result [(first xs) (first ys)])\n      (rest xs)\n      (rest ys))))","user":"54c8d4a8e4b045293a27f654"},{"problem":39,"code":"(fn InterLW [x y] (into () (reduce into() (map list x y))))","user":"5b69baf9e4b0c6492753e78f"},{"problem":39,"code":"(fn inter [s1 s2]\n  (-> (map #(vector %1 %2) s1 s2)\n      flatten))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":39,"code":"(fn [x y]\n  (loop [arr1 x arr2 y interlvd '()]\n    (if (or (= 0 (count arr1)) (= 0 (count arr2)))\n      interlvd\n      (recur (rest arr1) (rest arr2) (concat interlvd [(first arr1) (first arr2)] )) )))","user":"6040f595e4b0d5df2af2232f"},{"problem":39,"code":"#(flatten( map vector %1 %2))","user":"583d669ee4b089d5ab817d9a"},{"code":"#((fn [s1 s2 acc]\n     (if (or (empty? s1)\n             (empty? s2))\n       (reverse acc)\n       (recur (rest s1) (rest s2) (into acc [(first s1), (first s2)])))) %1 %2 nil)","problem":39,"user":"4ff355a1e4b0678c553fc34d"},{"problem":39,"code":";(fn [coll1 coll2] (mapcat #(seq [%1 %2]) coll1 coll2))\n#(mapcat vector %1 %2)","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn i [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (i (rest s1) (rest s2))))))))","problem":39,"user":"5100d7dbe4b04f1d96d946df"},{"problem":39,"code":"(fn mix [s1 s2]\n  (if \n    (or \n     (= (rest s1) (rest [])) \n     (= (rest s2) (rest [])))\n    [(first s1)\n     (first s2)]\n  \t(cons \n   \t (first s1)\n      (cons \n   \t (first s2) \n   \t (mix (rest s1) (rest s2))))))","user":"5bba703fe4b0a20761a235eb"},{"code":"#(let [l (min (count %1) (count %2))]\n   (apply list (loop [src1 (take l %1) src2 (take l %2) r []]\n                (if (empty? src1) r\n                 (recur src2 (rest src1) (conj r (first src1)))))))","problem":39,"user":"5196568fe4b04c0af7ff3c1c"},{"code":"(fn mix [[h1 & t1] [h2 & t2]]\n  (if (and (not (nil? h1)) (not (nil? h2))) \n    (concat (list h1 h2) (mix t1 t2))\n    ()))","problem":39,"user":"531619c1e4b08068f379ed3d"},{"code":"#(loop [xs %1 ys %2 r []] (if (or (empty? xs) (empty? ys)) r (recur (rest xs) (rest ys) (conj (conj r (first xs)) (first ys)))))","problem":39,"user":"53244c9de4b09d4e7a9b54db"},{"code":"(fn f [& xs] (if (some nil? xs) [] (concat (map first xs) (apply f (map next xs)))))","problem":39,"user":"514def61e4b019235f6c0591"},{"code":"(fn [x y]\n  (reduce concat (map #(list %1 %2) x y)))","problem":39,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":39,"code":"(fn [x y]\n  (loop [a x b y r []]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (concat r [(first a) (first b)])))))","user":"57458b82e4b009280f9f2b4e"},{"problem":39,"code":"(fn [xs ys]\n  (let [size (min (count xs) (count ys))]\n    (println size)\n    (loop [xs xs ys ys result []]\n      (if (< (count result) (* 2 size))\n        (recur (rest xs) (rest ys) (conj result (first xs) (first ys)))\n        result\n      ))))","user":"5d4320fde4b07c84aa5ae690"},{"problem":39,"code":"#(-> (zipmap %1 %2) seq reverse flatten)","user":"53c349f5e4b00fb29b22127a"},{"problem":39,"code":"(fn my-interleave [fseq & rseq] (flatten (map list fseq (first rseq))))","user":"56fbcc1fe4b07572ad1a88d5"},{"problem":39,"code":"(fn intl [col1 col2]\n  (loop [c1 col1\n         c2 col2\n         result []]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (rest c1) (rest c2) (-> result (conj (first c1) (first c2)))))))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":39,"code":"(fn zip [s1 s2]\n  (loop [[x1 & x1s] s1\n         [x2 & x2s] s2\n         acc []]\n    (if (and x1 x2)\n      (recur x1s x2s (conj acc x1 x2))\n      acc)))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b)) \n              '() \n              (cons (first a) (cons (first b) (f (rest a) (rest b))))))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn blah [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    nil\n    (cons (first s1)\n          (cons (first s2)\n                (lazy-seq (blah (rest s1) (rest s2)))))))","problem":39,"user":"519db0ede4b037b32803f9b9"},{"code":"(fn [x y] \n  (apply concat (map-indexed #(if (< % (count x)) [(x %) %2]) y))\n  )","problem":39,"user":"510cda21e4b078ea71921126"},{"code":"(fn [x y]\n  (let [shorter (if (< (count x) (count y))\n                  x\n                  y)]\n    (:ret (reduce #(assoc %1 \n               :idx (inc (:idx %1))\n               :ret (conj (:ret %1) (nth x (:idx %1)) (nth y (:idx %1)))\n               :last %2) {:idx 0 :ret []} shorter))))","problem":39,"user":"51ef31dfe4b0871fa145d9a0"},{"problem":39,"code":"(fn my-interleave\n   [a b]\n  (if (or (empty? a)  (empty? b))\n    ()\n    (loop\n      [lst ()\n       a2  a\n       b2  b\n       currA  (first a2)\n       currB  (first b2)]\n      (if (or (empty? (rest a2))(empty? (rest b2)))\n        (reverse (conj lst currA currB))\n        (recur (conj lst currA currB) (rest a2) (rest b2) (first (rest a2) ) (first (rest b2)))))))","user":"59e56c75e4b08badc2a0c556"},{"code":"#(flatten (for [i (range (min (count %1) (count %2)))]\n  [(nth %1 i) (nth %2 i)]))","problem":39,"user":"4e28120f535deb9a81d77efa"},{"code":"(fn [a b]\n  (flatten (map #(list % %2) a b)))","problem":39,"user":"4ed2b168535d44c135fd68dd"},{"problem":39,"code":"(fn ileave [c1 c2]\n  (mapcat list c1 c2))","user":"56ba1406e4b0f2655033593c"},{"problem":39,"code":"(fn [v1 v2] (apply concat (map #(conj [] % %2) v1 v2)))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":39,"code":"#(loop [l1 %1, l2 %2, result []]\n   (if (or (empty? l1) (empty? l2))\n     result\n     (recur (next l1) (next l2) (conj (conj result (first l1)) (first l2)))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn [a0 b0]\n  (loop [a a0  b b0  result ()]\n    (if (or (empty? a) (empty? b))\n      (reverse result)\n      (recur\n        (rest a) \n        (rest b)\n        (conj result (first a) (first b))))))","problem":39,"user":"4f90e238e4b0dcca54ed6c94"},{"code":"#(apply concat(reverse(apply zipmap %&)))","problem":39,"user":"4e7f4147535db966e863cc3d"},{"code":"#((fn [c a b]\n  (if (or (empty? a) (empty? b))\n    c\n    (recur (conj c (first a) (first b))\n          (rest a) (rest b))))\n(empty %1) %1 %2)","problem":39,"user":"4f2b1893e4b0d6649770a047"},{"problem":39,"code":"(fn [x y]\n  (loop [x x y y r []]\n    (if \n      (or (empty? x) (empty? y)) r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))","user":"5839f079e4b089d5ab817d48"},{"code":"(fn inter\n  ([f s] (reverse (inter f s '())))\n  ([f s i] (if (or (empty? f) (empty? s))\n              i\n              (recur (rest f) (rest s) (conj i (first f) (first s))))))","problem":39,"user":"51eff50fe4b0249c592fbdf0"},{"code":"(fn f [x y] (if (or (empty? x) (empty? y)) '() (conj (f (rest x) (rest y)) (first y) (first x))))","problem":39,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn my-interleave [a b]\n  (if (and (seq a) (seq b))\n    (concat [(first a) (first b)] (my-interleave (rest a) (rest b)))))","problem":39,"user":"52393e16e4b0d705d026ef06"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [x coll1\n         y coll2\n         accum []]\n        (if (or (empty? x) (empty? y)) \n          accum\n          (recur\n           (rest x)\n           (rest y)\n           (conj accum (first x) (first y) )))))","user":"56020b3fe4b04bb52996e19b"},{"problem":39,"code":"#(mapcat vector %1 %2\n    )","user":"58e51bc5e4b056aecfd47c86"},{"problem":39,"code":"(fn inter [fst snd]\n  (if (or (empty? fst) (empty? snd))\n    nil\n    (cons (first fst) (cons (first snd) (inter (rest fst) (rest snd))))))","user":"55836631e4b05c286339e114"},{"problem":39,"code":"(fn my-interleave-1\n  [c1 c2]\n  (flatten (map #(vec [%1 %2]) c1 c2 )))","user":"56c3aca0e4b05cc29241ee90"},{"problem":39,"code":"mapcat (fn [& n] n)","user":"545b0275e4b01be26fd74648"},{"code":"mapcat list\n;(comp flatten (partial map vector))\n;#(flatten (map vector %1 %2))\n\n;(fn interville [left right]\n;(flatten (map #(list (nth left %) (nth right %)) (range  (min (count left) (count right))))))","problem":39,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn f \n  [x y]\n    ( if (or (empty? x) (empty? y))\n        []\n        ( concat\n          [(first x) (first y)] \n          (f (rest x) (rest y)))))","problem":39,"user":"4f64f0a7e4b07046d9f4ef37"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n    (loop\n        [a a\n         b b\n         lst ()]\n        (if (or (empty? a) (empty? b))\n            (reverse lst)\n            (recur (rest a)\n                   (rest b)\n                   (concat (concat (list (first b)) (list (first a))) lst)))))","user":"57f8151ce4b0d3187e900912"},{"problem":39,"code":"(fn [as bs] (reduce concat (map vector as bs)))","user":"5d91acb8e4b0915913b1d406"},{"code":"(fn interss [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (cons (first xs) (cons (first ys) (interss (rest xs) (rest ys))))))","problem":39,"user":"4ec07699535dfed6da9c6da2"},{"problem":39,"code":"(fn [& colls]  (apply concat (apply map list colls)))","user":"5a535572e4b05d388ecb6c0b"},{"code":"(fn [a b] (flatten (into () (zipmap a b))))","problem":39,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn [l1 l2](flatten (map (fn [x y] [x y]) l1 l2)))","problem":39,"user":"513f400ae4b051389b345b3f"},{"code":"(fn [lsta lstb]\n  (letfn [(interl-iter [a b result]\n                       (if (or (empty? a) (empty? b)) result\n                         (interl-iter (rest a) (rest b)\n                                      (cons (first b) (cons (first a) result)))))]\n    (reverse (interl-iter lsta lstb '()))))","problem":39,"user":"51e0198ee4b01188f0627539"},{"code":"(fn myinterleave [xs  ys]\n  (flatten (map vector xs ys)))","problem":39,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn [coll1 coll2] \n   (mapcat (fn [e1 e2] (list e1 e2))\n            coll1 coll2)\n   )","problem":39,"user":"529d4f4be4b04e0c58e87b79"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [l1 l1\n         l2 l2\n         acc '()]\n    (if (or (empty? l1) (empty? l2))\n      (reverse acc)\n      (recur (rest l1) (rest l2) (cons (first l2) (cons (first l1) acc))))))","user":"54638c8fe4b01be26fd746c2"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (loop [acc []\n         sub1 s1\n         sub2 s2]\n    (if (or (empty? sub1) (empty? sub2))\n      acc\n      (recur (conj acc (first sub1) (first sub2)) (rest sub1) (rest sub2)))))","user":"58543a59e4b07779d46863f5"},{"code":";;(fn te\n;;  [coll coll2]\n;;  (reverse (loop\n;;               [a coll\n;;                b coll2\n;;                result '()]\n;;             (do (println \"a: \" a \", b: \" b \", result: \" result)\n;;                 (if (or (empty? a) (empty? b))\n;;                   result\n;;                   (recur (rest a) (rest b) (conj result (first a) (first b))))))))\n#(mapcat vector %1 %2)","problem":39,"user":"524f4256e4b0541d1855b808"},{"problem":39,"code":"(fn a3 [x y] \n  (if (and (> (count x) 1) (> (count y) 1)) (conj (a3 (rest x) (rest y)) (first y) (first x) )\n(list (first x) (first y))\n    )\n  )","user":"5e31a4b0e4b05b4b0151622b"},{"code":"(fn [r s] (mapcat #(identity [%1 %2]) r s))","problem":39,"user":"5175533fe4b0dea9bbfba575"},{"problem":39,"code":"(fn [a b]\n  (loop [ret [], an a, bn b]\n    (if (or (empty? an) (empty? bn)) ret\n      (recur (conj ret (first an) (first bn)) (rest an) (rest bn)))))","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn lts [s1 s2]\n  (let [c (min (count s1) (count s2))]\n      (loop [joined_s []\n             i 0]\n        (if (< i c)\n          (recur (conj joined_s (s1 i) (s2 i)) (inc i))\n          joined_s\n          ))\n    ))","problem":39,"user":"515e38ace4b049add99a0538"},{"problem":39,"code":"(fn iv [xs ys]\n    (loop [[x & xs] xs [y & ys] ys acc '()]\n    (if (and x y)\n      (recur xs ys (conj acc x y))\n      (reverse acc))))","user":"5315ba94e4b08068f379ed34"},{"code":"#(loop [x % y %2 acc []]\n  (if (or (= 0 (count x)) (= 0 (count y)))\n    acc\n    (recur (rest x) (rest y) (conj acc (first x) (first y)))))","problem":39,"user":"51a1659de4b00957e520db72"},{"code":"(fn [& more]\n  (apply mapcat vector more))","problem":39,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"#(loop [x % y %2 r []] \n  (if (not (and (seq x) (seq y)))\n    r\n     (recur (rest x) (rest y) (conj r (first x) (first y)))))","problem":39,"user":"4e8ad247535d65386fec2111"},{"problem":39,"code":"(fn [xs ys] (reduce concat (map vector xs ys)))","user":"5447e08ce4b032a45b8693c3"},{"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         combined []]\n    (if (or (empty? s1) (empty? s2))\n      combined\n      (recur (rest s1) (rest s2)\n             (conj combined (first s1) (first s2))))))","problem":39,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":39,"code":"(fn [sa sb]\n  (mapcat (fn [& ab] ab) sa sb))","user":"543d07e8e4b032a45b869346"},{"code":"#(mapcat list  %1 %2)","problem":39,"user":"4f17df72535d64f603146458"},{"code":"(fn [s t]\n  (loop [s s t t r []]\n    (if (or (empty? s) (empty? t))\n      r\n      (recur (rest s) (rest t) (conj r (first s) (first t)))\n    )))","problem":39,"user":"5033ed65e4b062bc5d7ae15a"},{"problem":39,"code":"#(mapcat (fn s [& res] (vec res)) %1 %2)","user":"5d9515a9e4b0d3f9b434ad2c"},{"problem":39,"code":"(fn foo [c1 c2 & c3]\n  (let [i1 (count c1) i2 (count c2)]\n   (if\n     (or (< i1 1) (< i2 1))\n     ;; done\n     (reverse c3)\n     (do\n       ;; (first c1) (first c2)\n       (recur\n         ;; changed 1st and 2nd\n         (rest c1) (rest c2)\n         ;; result from this operation\n         (conj c3 (first c1) (first c2))\n         )\n       )\n     )\n   )\n  )","user":"546a6fd8e4b00cfc9eacc158"},{"problem":39,"code":"(fn\n  [c1 c2]\n  (println c1 c2)\n  (loop [s1 (seq c1) s2 (seq c2) final '()]\n    (println s1 s2 final)\n    (if (or (empty? s1) (empty? s2))\n      (reverse final)\n      (recur (rest s1) (rest s2) (into final [(first s1) (first s2)])))))","user":"58f7dfe6e4b0438e51c2cf1f"},{"problem":39,"code":"(fn my-interleave [seq-a seq-b]\n  (loop [a-seq seq-a\n         b-seq seq-b\n         target-seq []]\n    (if (or (empty? a-seq)\n            (empty? b-seq))\n      (concat '() target-seq)\n      (recur (rest a-seq)\n             (rest b-seq)\n             (conj target-seq \n                   (first a-seq)\n                   (first b-seq))))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":39,"code":"(fn func [s1 s2] (if (or (empty? s1) (empty? s2)) [] (cons (first s1) (cons (first s2) (func (rest s1) (rest s2))))))","user":"56cb483ee4b0ea9b8538f72d"},{"problem":39,"code":"(fn [a b]\n   (mapcat vector a b))","user":"52d9e126e4b09f7907dd13b1"},{"code":"(let [zip #(map list % %2)]\n  (comp flatten zip))","problem":39,"user":"5141fafbe4b0b50abeb46b28"},{"problem":39,"code":"(fn [xs ys]\n  (reduce #(conj (conj %1 (get %2 0)) (get %2 1))\n  \t[]\n  \t(map #(vec [%1 %2]) xs ys)))","user":"5601e037e4b04bb52996e199"},{"problem":39,"code":"(fn [xs ys]\n  ((fn [l1 l2 result]\n    (if (or (= (count l1) 0) (= (count l2) 0) )\n      result\n      (recur (rest l1) (rest l2) (concat result [(first l1) (first l2)]))\n      )) xs ys '()))","user":"57b55290e4b0fbc9809a27a9"},{"code":"(fn interleev [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    []\n    (cons (first s1) (cons (first s2) (interleev (rest s1) (rest s2))))))","problem":39,"user":"51b89503e4b050a1176cd69a"},{"problem":39,"code":"#(apply concat (map (partial conj [])  %1 %2))","user":"5eac6a63e4b00a66d4a951e0"},{"code":"(fn [l1 l2]\n  (loop [ll1 (rest l1) ll2 (rest l2) r [(first l1) (first l2)]]\n    (if (or (empty? ll1) (empty? ll2))\n      r\n      (recur (rest ll1) (rest ll2) (conj (conj r (first ll1)) (first ll2))))))","problem":39,"user":"52c81954e4b0c2d177d6212e"},{"problem":39,"code":"#(loop [x %1 y %2 r []]\n\t\t (cond \n\t\t    (empty? x) r\n\t\t    (empty? y) r\n\t\t   :else (recur (rest x) (rest y) (conj r (first x) (first y) ))))","user":"55ec04c4e4b0121d4835fdc1"},{"code":";(fn intl [l1 l2]\n;  (if (or (empty? l1) (empty? l2))\n;    []\n;    (concat (list (first l1) (first l2)) (intl (rest l1) (rest l2)))))\nmapcat list","problem":39,"user":"5368a275e4b0243289761e8f"},{"code":"(fn [a b]\n  (loop [res [] a a b b]\n    (if (or (empty? a) (empty? b)) res \n      (recur (conj res (first a) (first b)) (rest a) (rest b)))))","problem":39,"user":"4f1ae082535d64f603146470"},{"code":"(fn [a b]\n  (let [min-list-size (min (count a) (count b))]\n    (apply concat \n      (map-indexed (fn [idx itm] (list itm (get b idx))) (take min-list-size a)))))","problem":39,"user":"4ec70f26535d6d7199dd36dd"},{"problem":39,"code":"(fn doit [x y]\n  (flatten (map vector x y))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"problem":39,"code":"(fn [c1 c2] (flatten (map #(list %1 %2\n                                 ) c1 c2)))","user":"556a3243e4b09a3098a524de"},{"problem":39,"code":"(fn [x y] (flatten(map #(conj [] % %2 ) x y)))","user":"548018dbe4b0c51c1f4d732a"},{"problem":39,"code":"(fn [x y]\n  (mapcat #(vector %1 %2) x y)\n  )","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [seq1 seq2]\n  (loop [rst [] s1 seq1, s2 seq2]\n    (if (or (empty? s1) (empty? s2))\n      rst\n      (recur (conj rst (first s1) (first s2)) (rest s1) (rest s2)))))","problem":39,"user":"504e0517e4b078edc5f5939a"},{"code":"(fn fn1 [x y] (if (and (-> x empty? not) (-> y empty? not)) (conj (fn1 (rest x) (rest y)) (first y) (first x)) '()))","problem":39,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [x y]\n  (loop [[xh & xt] x\n         [yh & yt] y\n         out []]\n    (if (or (nil? xh) (nil? yh))\n      out\n      (recur xt yt (conj out xh yh)))))","problem":39,"user":"52d469c8e4b09f7907dd1330"},{"problem":39,"code":"(fn [s1 s2] \n  (loop [s1 s1 s2 s2 m []]\n    (if (or (empty? s1)\n            (empty? s2))\n      m\n      (recur (rest s1)\n             (rest s2)\n             (conj m (first s1)\n                     (first s2))))))","user":"54961073e4b0b312c081ff62"},{"code":"(fn il \n  ([one two] (il one two []))\n  ([one two out]\n    (if (or (nil? one) (nil? two))\n      out\n      (il (next one) (next two) \n        (conj (conj out (first one)) (first two))))))","problem":39,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":39,"code":"#((fn its [acc x y]\n    (if (or (empty? x) (empty? y))\n      (reverse acc)\n      (its (conj acc (first x) (first y)) (rest x) (rest y)))\n    ) () %1 %2)","user":"58b80ec1e4b0ebc645576d89"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (loop [lst11 lst1\n         lst22 lst2\n         lst '()]\n    (if (empty? lst11)\n      (reverse lst)\n      (if (empty? lst22)\n        (reverse lst)\n        (recur (rest lst11) (rest lst22) (concat  (list (first lst22)) (list (first lst11)) lst)))\n      )))","user":"57f81045e4b0d3187e90090f"},{"code":"(fn f [l1 l2] \n  (cond\n     (empty? l1) []\n     (empty? l2) []\n     :else (cons (first l1) (cons (first l2) (f (rest l1) (rest l2))))\n   ))","problem":39,"user":"52be0c48e4b07a9af5792311"},{"code":"(fn\n  [coll1 coll2]\n  (loop [xs (rest coll1), ys (rest coll2), retcoll '(),\n         newcoll (cons (first coll1) (cons (first coll2) '()))]\n    (if (or (empty? xs) (empty? ys))\n      (reverse (into retcoll newcoll))\n      (recur (rest xs) (rest ys) (into retcoll newcoll)\n             (cons (first xs) (cons (first ys) '()))))))","problem":39,"user":"512c0f84e4b03a42b6300232"},{"code":"(fn [coll1 coll2]\n  (loop [c1 coll1, c2 coll2, acc []]\n    (if (or (empty? c1) (empty? c2))\n      acc\n      (recur\n        (rest c1)\n        (rest c2)\n        (conj acc (first c1) (first c2))))))","problem":39,"user":"50a83794e4b054305ba5a831"},{"problem":39,"code":"(fn inter [a b]\n  (if (empty? a)\n    a\n    (if (empty? b)\n      b\n      (concat\n       (list (first a) (first b))\n       (inter (rest a) (rest b))))))","user":"54c9e00be4b045293a27f683"},{"problem":39,"code":"(fn [a b]\n  (reduce concat (map #(concat [%1] [%2]) a b)))","user":"54df7922e4b024c67c0cf7ad"},{"problem":39,"code":"(fn intlv [xs ys]\n    (when (and (seq xs) (seq ys))\n      (concat (list (first xs) (first ys)) (intlv (rest xs) (rest ys)))))","user":"53e9a15be4b036ad0777e4ae"},{"code":"(fn [x y] \n  (let [minl (min (count x) (count y))]\n  (loop [i 0 ans []]\n            (if (<= minl i)\n              ans\n              (recur (+ i 1) (conj ans (get x i) (get y i)))\n              )\n    )\n        )\n    )","problem":39,"user":"4f2004a1535d64f6031464a7"},{"code":"(fn foo [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (conj (foo (rest xs) (rest ys)) (first ys) (first xs)))\n  )","problem":39,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":39,"code":"(fn mix [l0 l1]\n  (if (or\n       (empty? l0)\n       (empty? l1))\n    '()\n    (conj\n     (mix\n      (rest l0)\n      (rest l1))\n     (first l1)\n     (first l0))))","user":"598ab445e4b02b9968b84ce0"},{"code":"(fn [ll lll]\n  (letfn [(myint [l1 l2 ]\n  \t\t(cond (and (not (= l1 '())) (not (= l2 '())))\n\t\t\t\t  (cons (first l1) (cons (first l2) (myint (rest l1) (rest l2))))\n\t\t\t\t  (or (= l1 '()) (= l2 '()))\n\t\t\t\t'()))]\n\t(myint ll lll)))","problem":39,"user":"4df9c598535d04ed9115e77a"},{"problem":39,"code":"(fn [x y] (apply concat\n                 (\n    (fn po [x1 y1]\n      (if (or (empty? x1)\n              (empty? y1))\n        ()\n        (cons (list (first x1)\n                    (first y1))\n              (po   (rest x1)\n                    (rest y1)))\n        )\n      )  \n           x y       )           \n                 ))","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (loop [seq1' seq1\n         seq2' seq2\n         res  '()]\n    (if (or (empty? seq1') (empty? seq2'))\n      (reverse res)\n      (recur (rest seq1') (rest seq2') (conj res (first seq1') (first seq2'))))))","user":"57a6ad79e4b0a9660795620b"},{"problem":39,"code":"(fn [& xs]\n  (flatten\n   (apply\n    (partial map vector)\n    xs)))","user":"56403765e4b08d4f616f5edc"},{"code":"(fn [& seqs] (reduce concat (apply map vector seqs)))","problem":39,"user":"4eecc9ad535d93acb0a668b4"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (loop [r []\n         [hs1 & rs1] s1\n         [hs2 & rs2] s2]\n    (if (and hs1 hs2)\n      (recur (conj r hs1 hs2) rs1 rs2)\n      r)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn [a b] (flatten (mapv #(list %1 %2) a b)))","problem":39,"user":"511b900ae4b00c2a1fa7ff6a"},{"code":"mapcat #(seq %&)","problem":39,"user":"51d46133e4b013d740b70de2"},{"problem":39,"code":"#(flatten (map (fn [x y] [x y]) % %2))","user":"551d8796e4b07993ea3788ec"},{"code":"(fn f [r a b]\n  (if (or (empty? a) (empty? b)) r\n    (f (conj r (first a) (first b))\n     (rest a) \n     (rest b)))) []","problem":39,"user":"512f06c5e4b0762be4c7aad7"},{"problem":39,"code":"(fn [a b] (let [times (min (count a) (count b))] (loop [c 0 l []] (if (= times c) l (recur (inc c) (conj l (nth a c) (nth b c)))))))","user":"57a499dae4b0a966079561e6"},{"problem":39,"code":"(fn f\n          ([coll1 coll2] (f coll1 coll2 '()))\n          ([coll1 coll2 res]\n           (if (or (empty? coll1) (empty? coll2))\n             (apply concat (reverse res))\n             (recur (rest coll1) (rest coll2) (conj res (list (first coll1) (first coll2)))))))","user":"584917a1e4b089d5ab817ec9"},{"problem":39,"code":"(fn itlv\n  ([s1 s2] (itlv s1 s2 ()))\n  ([s1 s2 r]\n   (if (and (seq s1) (seq s2))\n     (itlv (rest s1) (rest s2) (conj r (first s1) (first s2)))\n     (reverse r))))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn i [a b] (when (not (or (empty? a) (empty? b))) (cons (first a) (cons (first b) (i (rest a) (rest b))))))","problem":39,"user":"4e7e55ab535db169f9c79711"},{"code":"#(reduce (fn [c i] (conj c (% i) (%2 i))) [] (range (min (count %) (count %2))))","problem":39,"user":"526c2340e4b03e8d9a4a7281"},{"code":"(fn [s s2] (flatten (map #(vector % %2) s s2)))","problem":39,"user":"517e25c6e4b0329b27fa9f51"},{"code":"(fn [x y] (flatten (map #(vec [%1 %2]) x y)))","problem":39,"user":"5397ecf6e4b0b51d73faaef2"},{"code":"(fn [s1 s2]\n   (mapcat vector s1 s2))","problem":39,"user":"500ea957e4b00fff93030f9b"},{"problem":39,"code":"(fn my-interleave\n  [x y]\n  (loop [first-seq x\n         second-seq y\n         result ()]\n    (if (or (empty? first-seq) (empty? second-seq) (= 1 0))\n      result\n      (recur (drop 1 first-seq) (drop 1 second-seq) (concat result [(first first-seq) (first second-seq)])))))","user":"5d9c8a85e4b0eb781811cdad"},{"code":"(fn [x y]\r\n  (loop [a x b y new-seq []]\r\n    (if (or (empty? a) (empty? b))\r\n      new-seq\r\n      (recur (rest a) \r\n             (rest b) \r\n             (reduce #(conj % (first %2)) [new-seq a b])))))","problem":39,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":39,"code":"(fn [c1 c2] (flatten (map #(conj [] % %2) c1 c2)))","user":"5417bc50e4b01498b1a71a0f"},{"problem":39,"code":"(fn [s v] (mapcat #(vec [% %2]) s v))","user":"56743413e4b05957ce8c612e"},{"code":"(fn intlv [v w] (cond (or (empty? v) (empty? w)) ()\n                :else      (cons (first v) (cons (first w) (intlv (rest v) (rest w))))))","problem":39,"user":"504e108ce4b078edc5f593b3"},{"problem":39,"code":"(fn [col1 col2]\n    (loop [s [] n 0]\n           (if (= n (min (count col1) (count col2))) \n             s\n             (recur (conj s (nth col1 n) (nth col2 n)) (inc n)))))","user":"53a739b0e4b0ef122a8689d0"},{"problem":39,"code":"#(loop [a %1 b %2 out []] (if (or (empty? a) (empty? b)) out (recur (rest a) (rest b) (conj out (first a) (first b)))))","user":"57f9e0bce4b0d3187e900956"},{"code":"(fn zip [c1 c2]\n  (lazy-seq\n    (let [a (seq c1) b (seq c2)]\n\n  (when (and a b)\n    (cons (first a) (cons (first b)\n                          (zip (rest a) (rest b))))))))","problem":39,"user":"4e21c0c7535d04ed9115e818"},{"code":"(fn [s1 s2]\r\n  (flatten (map (fn [x y] [x y]) s1 s2)))","problem":39,"user":"4dd7d040535d2dad7130b5d6"},{"problem":39,"code":"(fn inter [s1 s2]\n  (loop [l1 s1\n         l2 s2\n         res []]\n    (if (or (empty? l1) (empty? l2))\n      res\n      (recur (rest l1) (rest l2) (conj res (first l1) (first l2))))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":39,"code":"#(loop [c1 %1 c2 %2 r []] \n  (if (or (empty? c1) (empty? c2))\n    r\n    (recur (rest c1) (rest c2) (concat r [(first c1) (first c2)]))))","user":"595914e0e4b066ee0a44af99"},{"problem":39,"code":"(fn [s1 s2]\n    (mapcat (fn [x1 x2]\n              (list x1 x2))\n            s1 s2))","user":"5549ff9ae4b0a04f7929956e"},{"code":"#((fn [xs ys zs]\n    (if (or (empty? xs) (empty? ys))\n      zs\n      (recur (rest xs) (rest ys) (concat zs (list (first xs) (first ys)))))) %1 %2 '())","problem":39,"user":"4fa069c3e4b0dcca54ed6d4a"},{"code":"#((comp flatten map) list %1 %2)","problem":39,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn [in1 in2]\n  (loop [s1 in1 s2 in2 res []]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur\n        (rest s1)\n        (rest s2)\n        (conj (conj res (first s1)) (first s2)) ))))","problem":39,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":39,"code":"(fn [l r]\n  (loop [result []\n         m l\n         n r]\n    (if (and (first n) (first m))\n      (recur (conj result (first m) (first n)) (next m) (next n))\n      result)))","user":"539043e7e4b0b51d73faae97"},{"code":"(fn [a b]\n  (mapcat #(list %1 %2) a b)\n)","problem":39,"user":"4f4e6d21e4b03ad3f0c10cc5"},{"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (conj (f (rest a) (rest b)) (first b) (first a) )\n  )\n)","problem":39,"user":"531ba143e4b08068f379ed91"},{"code":"(fn mezcla [a b] (if (< (count a) (count b))\n(if (empty? a) [] (concat [(first a) (first b)] (mezcla (rest a) (rest b))))\n(if (empty? b) [] (concat [(first a) (first b)] (mezcla (rest a) (rest b))))\n))","problem":39,"user":"50f9776be4b0e7c80cb15a4e"},{"code":"(fn [c1 c2]\n  (flatten (map (fn [& args] (apply list args)) c1 c2)))","problem":39,"user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn custom-interleave [coll-a coll-b]\n  (mapcat list coll-a coll-b))","problem":39,"user":"5264b4a9e4b03e8d9a4a70e0"},{"problem":39,"code":"(fn myfunc [a b] \n  (when (and (first a) (first b))\n    (concat (list (first a) (first b)) (myfunc (rest a) (rest b)))\n  )\n)","user":"53f12b77e4b0742d9025b0da"},{"problem":39,"code":"(fn interleaveit [c1 c2]\n  (if (or (empty? c2) (empty? c1))\n     '()\n      (let [e1 (first c1)\n            e2 (first c2)\n            r1 (rest c1) \n            r2 (rest c2)]\n        (conj (interleaveit r1 r2) e2 e1))))","user":"51a0370ae4b0b292b01ee3ef"},{"code":"(fn [f s] \n  (loop [ff f\n         ss s\n         acc []]\n    (cond \n     (or (empty? ff) (empty? ss)) (seq acc)\n     :else (recur (next ff) (next ss) (conj acc (first ff) (first ss)))\n  )\n    ))","problem":39,"user":"51d67516e4b0154f82ab92f0"},{"problem":39,"code":"(fn zipski\n  ([] ())\n  ([s1 s2]\n   (if (not (and (seq (rest s1)) (seq (rest s2))))\n     (cons (first s1) (seq (list (first s2))))\n     (cons (first s1) (cons (first s2) (zipski (rest s1) (rest s2)))))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"code":"(fn il [xs ys]                                                                                                   \n  (loop [xs xs ys ys cs '()]                                                                                       \n    (if (or (empty? ys) (empty? xs))                                                                               \n      cs                                                                                                           \n      (recur (rest xs) (rest ys) (concat cs (list(first xs) (first ys)))))))","problem":39,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":39,"code":"(fn [x y] (flatten (map #(concat (vector %1) (vector %2)) x y)))","user":"5ebed654e4b00a66d4a9527c"},{"problem":39,"code":"#(flatten (map (fn [c1 c2] (flatten (vec [c1 c2]))) %1 %2))","user":"57e037b6e4b0bd073c202474"},{"code":"(fn myInterleave [a b]\n  (lazy-seq\n   (let [s1 (seq a) s2 (seq b)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2)\n                              (myInterleave (rest s1) (rest s2))))))))","problem":39,"user":"4f580a9fe4b0a7574ea71844"},{"problem":39,"code":"#(reduce into (for [x (range (min (count %1) (count %2)))] [(%1 x) (%2 x)]))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn il [xs ys]\n  (if \n    (or (empty? xs) (empty? ys))\n    '()\n    (cons (first xs) (cons (first ys) (il (rest xs) (rest ys))))))","problem":39,"user":"5334d4f2e4b0656e627bfd71"},{"problem":39,"code":"(fn f [& seqs]\n  (let [firsts (map first seqs)\n        rests (map rest seqs)]\n    (if (every? identity firsts)\n    \t(concat firsts (apply f rests))\n      [])))","user":"5db92996e4b010eb3c36cd50"},{"problem":39,"code":"(fn [s1 s2]\n    (mapcat list s1 s2))","user":"5686640ae4b0dcc4269f4050"},{"problem":39,"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (conj (f (rest a) (rest b)) (first b) (first a))))","user":"57501c83e4b02ea11479926b"},{"problem":39,"code":"(fn[a b]\n  (mapcat #(vector %1 %2) a b))","user":"5719465fe4b07c98581c3b36"},{"problem":39,"code":"(fn i [[f1 & rest1] [f2 & rest2]]\n  (if (or (nil? f1) (nil? f2))\n  \t'()\n  \t(conj (conj (i rest1 rest2) f2) f1)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"code":"(fn f \n  ([xs ys] (f xs ys '()))\n  ([xs ys zs]\n    (if (or (empty? xs) (empty? ys))\n      zs\n      (recur (rest xs) (rest ys) (concat zs (list (first xs) (first ys)))))))","problem":39,"user":"52d660eae4b09f7907dd1356"},{"code":"(fn interlve [xs ys]\n  (loop [v []\n         xseq (seq xs)\n         yseq (seq ys)]\n    (if (and xseq yseq)\n      (recur (conj v (first xseq) (first yseq)) (next xseq) (next yseq))\n      v)))","problem":39,"user":"52bc0dade4b07a9af57922f1"},{"problem":39,"code":"mapcat #(cons %1 (cons %2 nil))","user":"55654e17e4b0c656e3ff1818"},{"code":"#(loop [x %1\n   \t\ty %2\n        results '()]\n   (cond\n    (or (= (count x) 0) (= (count y) 0))\n    (reverse results)\n    :else (recur (rest x) (rest y) (conj results (first x) (first y)))))","problem":39,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":39,"code":"(fn intrlv [[x & xs] [y & ys]]\n  (if-not (and x y)\n    []\n    (concat [x y] (intrlv xs ys))))","user":"5bcddaeee4b0e9689409ee07"},{"problem":39,"code":"(fn my-interleave\n  ([] ())\n  ([c1 c2]\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))))))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"(fn interleave-seqs [s1 s2]\n  (flatten (map list s1 s2)))","problem":39,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":39,"code":"(fn [xs ys] (flatten (map #(conj '() %2 %1) xs ys)))","user":"5e3f291ae4b01d43a70e8e33"},{"code":"(fn meep [a b]\r\n  (if (or (empty? a) (empty? b))\r\n      nil\r\n      (conj (meep (rest a) (rest b)) (first b) (first a) )))","problem":39,"user":"4eb66737535d7eef3080736b"},{"code":"(fn [a b]\n  (loop [a a b b r nil]\n    (if (or (empty? a) (empty? b)) \n      (reverse r)\n      (recur \n        (rest a)\n        (rest b)\n        (conj r (first a) (first b))))))","problem":39,"user":"4f930858e4b0dcca54ed6cb4"},{"code":"#(loop [s1 %1 s2 %2 result '()]\n      (if (or (empty? s1) (empty? s2))\n         (reverse  result)\n        (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) result)))\n        ;(cons (first s1) (cons (first s2) (make-myinter (rest s1) (rest s2))))\n      )\n  )","problem":39,"user":"4ea85846535d7eef308072f9"},{"code":"(fn [x y] (flatten (map #(seq [% %2]) x y)))","problem":39,"user":"4e765170535d324fb2983d69"},{"code":"(fn inter \n  ([aSeq bSeq] (inter aSeq bSeq []))\n  ([aSeq bSeq answer]\n    (if-let [a (first aSeq)]\n      (if-let [b (first bSeq)]\n        (inter (rest aSeq) (rest bSeq) (conj answer a b))\n        answer)\n      answer)))","problem":39,"user":"4e463703535dc968683fc4b2"},{"problem":39,"code":"(fn  \n  [lst1 lst2]\n  (loop [lst11 lst1\n         lst22 lst2\n         lst33 '()\n         ]\n    (if(or (empty? lst11) (empty? lst22)) (reverse lst33) (recur (rest lst11) (rest lst22) (concat (list (first lst22)) (list (first lst11)) lst33)))))","user":"57fc08d8e4b0d3187e900988"},{"code":"(fn\n   [p1 p2]\n   ((fn il2\n        [v1 v2 r]\n        (if (and (first v1) (first v2))\n          (il2 (next v1) (next v2) (concat r [(first v1) (first v2)]))\n          r)\n        )\n   p1 p2 []))","problem":39,"user":"52527192e4b0541d1855b8af"},{"code":"#( flatten (for [n (range (min (count %) (count %2))) ] \n   (conj [(nth % n)] (nth %2 n))) )","problem":39,"user":"51aa4eede4b04e3dc0c27b25"},{"code":"(fn [x y]\n  (mapcat #(conj () %2 %) x y))","problem":39,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":39,"code":"mapcat #(identity [% %2])","user":"55dbed2fe4b050e68259b3a6"},{"code":"(fn zip [a b]\n    (if (or (empty? a) (empty? b))\n        nil\n        (cons (first a) \n        (cons (first b) \n        (zip (rest a) (rest b))))))","problem":39,"user":"504e3afae4b0f6ff3350c488"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [[x & x-rest] s1\n         [y & y-rest] s2\n         results [x y]]\n    (if (or (nil? (first x-rest)) (nil? (first y-rest)))\n      results\n      (recur x-rest y-rest (conj results (first x-rest) (first y-rest))))))","user":"54012b48e4b0de5c41848620"},{"code":"(fn [ac bc]\n  (loop [acc [] ac ac bc bc]\n    (if (or (empty? ac) (empty? bc))\n      acc\n      (recur (conj acc (first ac) (first bc)) (rest ac) (rest bc)))))","problem":39,"user":"5131d817e4b06942423563ca"},{"code":"(fn [as bs] (apply concat (map (fn [a b] [a b]) as bs)))","problem":39,"user":"50e8422de4b0ebbe794eb7de"},{"problem":39,"code":"(fn [a b] \n  (loop [a a b b new '()]\n    (if (and (first a) (first b))\n      (recur (next a)\n             (next b)\n             (concat new [(first a) (first b)]))\n      new)))","user":"5703cbbee4b08d47c97781fb"},{"problem":39,"code":"(fn [x y]\n  (flatten (map #(vector %1 %2) x y)))","user":"564a5a09e4b0284900eef656"},{"problem":39,"code":"(fn [a b]\n  (\n   reduce concat\n   []\n   (map (fn [e f] [e f]) a b)\n   )\n  )","user":"55e8a85be4b0121d4835fd98"},{"problem":39,"code":"(fn [coll1 coll2]\n\t(flatten (map vector coll1 coll2))\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [s1 s2]  \n    (loop [a s1 b s2 r []]\n      (if (or (nil? a) (nil? b))\n        r\n        (recur (next a) (next b) (concat r [(first a) (first b)])))))","problem":39,"user":"503e7f06e4b06c4e0e1fa268"},{"code":"(fn my-interleave [c1 c2]\n  (if (or (empty? c1) (empty? c2))\n   ()\n   (conj (my-interleave (rest c1) (rest c2)) (first c2)  (first c1))\n  )\n)","problem":39,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":39,"code":"(comp flatten #(into '() %) zipmap)","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":39,"code":"#(loop [r [] x %1 y %2]\n   (if (and (seq x) (seq y))\n     (recur (conj r (first x) (first y)) (rest x) (rest y))\n     r))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":39,"code":"#(loop [coll ()\n        coll1 %1\n        coll2 %2]\n   (if (or (empty? coll1) (empty? coll2))\n     coll\n     (recur (concat coll [(first coll1) (first coll2)])\n            (rest coll1)\n            (rest coll2))))","user":"5491bebbe4b0b312c081ff3c"},{"problem":39,"code":"(fn intlv\n  [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (cons (first xs) (cons (first ys) (intlv (rest xs) (rest ys))))))","user":"52f8b86de4b047fd55836fdb"},{"code":"(fn ileave [coll1 coll2]\r\n   (when (and (seq coll1) (seq coll2))\r\n     (concat (list (first coll1) (first coll2)) (ileave (rest coll1) (rest coll2)))))","problem":39,"user":"4de623ef535d08e6dec9fdf4"},{"code":"(fn [ s t ] (\n ( fn [ s t c ] (if (or (empty? s) (empty? t) ) c \n    (recur (rest s) (rest t) (concat c (list (first s) (first t) ) ) ) ) ) s t '()\n) )","problem":39,"user":"4fc43a8ee4b081705acca346"},{"code":"(fn [x y]\n  (reverse (flatten (seq (zipmap y x)))))","problem":39,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"(fn [f s]\n  (let [inlv (fn [l1 l2 ret]\n              (cond \n                (empty? l1) ret\n                (empty? l2) ret\n                :else (recur (rest l1) \n                       (rest l2) \n                       (conj ret (first l1) (first l2)))))]\n  (reverse (inlv f s '()))))","problem":39,"user":"4ec21058535dfed6da9c6dba"},{"code":"(fn intleav [xs1 xs2]\n  (loop [xs xs1 ys xs2 acc '()]\n    (if (or (empty? xs) (empty? ys)) (reverse (flatten acc))\n      (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","problem":39,"user":"53287dace4b09d4e7a9b5507"},{"problem":39,"code":"(fn\n  [col1 col2]\n  (let [n (min (count col1) (count col2))]\n    (reduce \n      (fn [xs x] (conj xs (nth col1 x) (nth col2 x)))\n      [] (range 0 n))))","user":"566e87cfe4b0a866af6896dc"},{"problem":39,"code":"(fn ash-interleave \n  ([seq-1 seq-2] (ash-interleave (first seq-1) (rest seq-1) (first seq-2) (rest seq-2) []))\n  ([num-1 seq-1 num-2 seq-2 res]\n   (println num-1 seq-1 num-2 seq-2 res)\n   (if (or (nil? num-1) (nil? num-2))\n     res\n     (recur (first seq-1) (rest seq-1) (first seq-2) (rest seq-2) (-> res (conj num-1) (conj num-2))))))","user":"59f75327e4b0966464fe6aec"},{"problem":39,"code":"(fn [xs ys]\n  (loop [acc [] xxs xs yys ys]\n    (if (or (empty? xxs) (empty? yys))\n      acc\n      (recur (conj acc (first xxs) (first yys)) (rest xxs) (rest yys)))))","user":"564857c2e4b0284900eef62e"},{"problem":39,"code":"(fn foo [[e1 & l1] [e2 & l2]]\r\n    (if (and e1 e2)\r\n      (conj (foo l1 l2) e2 e1)))","user":"57a9b2dbe4b0a96607956233"},{"problem":39,"code":"(fn [x y]\n  (loop [x x, y y, res []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (conj res (first x) (first y)))\n      res)))","user":"5a7ae674e4b03baeef9276d5"},{"problem":39,"code":"#(loop\n  [a %1 b %2\n  out []]\n  (if (or (= a nil) (= b nil))\n    out\n    (recur\n      (next a) (next b)\n      (conj (conj out (first a)) (first b))\n  )))","user":"5e08c3dde4b0978307768fc8"},{"problem":39,"code":"(fn [s t]\n  (loop [s s t t acc (empty s)]\n    (let [fs (first s) ft (first t)]\n      (if (and fs ft)\n        (recur (rest s) (rest t) (conj acc fs ft))\n        acc))))","user":"54bc539be4b0ed20f4ff6eca"},{"problem":39,"code":"(fn\n  [col1 col2]\n  (loop [col1 col1 col2 col2 res []]\n    (if (or (empty? col2) (empty? col1))\n      res\n      (recur (rest col1) (rest col2) (conj res (first col1) (first col2))))))","user":"56b1ab17e4b0982f16b37df1"},{"problem":39,"code":"(fn [X Y] (loop [ res []\n                  x   X\n                  y   Y ]\n            (if (or (empty? x) (empty? y)) res\n                (recur (conj (conj res (first x)) (first y)) (rest x) (rest y) ) ) ) )","user":"564127a9e4b08d4f616f5ef3"},{"problem":39,"code":"#(loop [il [] x % y %2] (if (or (empty? x) (empty? y)) il (recur (conj il (first x) (first y)) (rest x) (rest y))))","user":"5414dccbe4b01498b1a719f1"},{"code":"(fn zip [a b]\n  (let [va (vec a) vb (vec b)\n        shortest-length (min (count va) (count vb))\n        flatten* (partial apply concat)]\n    (flatten* (for [i (range 0 shortest-length)]\n      [(get va i) (get vb i)]))))\n\n; Elegant, but twice as slow:\n; (fn [a b]\n;   (let [ordered-tuples (comp rseq vec zipmap)]\n;   (apply concat (ordered-tuples a b))))","problem":39,"user":"52244a77e4b01819a2de42d1"},{"problem":39,"code":"(fn [sequence1 sequence2]\n  ((fn my-mapcar [result sequence1-rest sequence2-rest]\n     (if (or (empty? sequence1-rest)\n             (empty? sequence2-rest))\n       (reverse result)\n       (my-mapcar (conj result (first sequence1-rest) (first sequence2-rest))\n                  (rest sequence1-rest)\n                  (rest sequence2-rest))))\n   '() sequence1 sequence2))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn intrlv [as bs]\n  (if-not (or (empty? as) (empty? bs))\n    (cons (first as) (cons (first bs) (intrlv (rest as) (rest bs))))))","problem":39,"user":"51b24defe4b02f8f128bb963"},{"problem":39,"code":"(fn [a b]\n   (let [min-size (min (count a) (count b))\n         result '()]\n\n     (loop [[a' b'] [a b]\n            result '()]\n       (if (>= (count result) (* min-size 2))\n         (reverse result)\n         (recur [(rest a') (rest b')]\n                (cons (first b') (cons (first a') result))))) ))","user":"51e4b812e4b0efabf93c02bc"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         result []]\n    (if (and (seq a) (seq b))\n      (recur (next a) (next b) (conj result (first a) (first b)))\n      result)))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":39,"code":"(fn [a b]\n\t(flatten (map vector a b))\n)","user":"52edc72de4b05e3f0be25ebb"},{"code":"(fn my-interleave [l1 l2]\n  (loop [accum '()\n         l1 l1\n         l2 l2]\n    (if (or (empty? l1) (empty? l2))\n      accum\n      (recur (concat accum (list (first l1) (first l2)))\n             (rest l1) (rest l2)))))","problem":39,"user":"50763574e4b0a894bb95bf3d"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (loop [seq1 s1\n         seq2 s2\n         acc '()]\n    (if (or (empty? seq1) (empty? seq2))\n      (reverse acc)\n      (recur (rest seq1)\n             (rest seq2)\n             (conj (conj acc (first seq1)) (first seq2))))))","user":"5578c67fe4b05c286339e08d"},{"problem":39,"code":"(fn m[[x & xs] [y & ys]]\n  (if (or (nil? xs) (nil? ys))\n    [x y]\n    (concat [x y] (m xs ys))))","user":"56618573e4b068f2fe63dc68"},{"code":"#(loop [acc []\n       \ta %1\n        b %2]\n   (if (or (empty? a) (empty? b)) acc\n     (recur (conj acc (first a) (first b)) (rest a) (rest b))))","problem":39,"user":"537e745ae4b06839e8705ea6"},{"problem":39,"code":"(fn [l1 l2]\n    (loop [coll []\n           l1 l1\n           l2 l2]\n      (if (or (empty? l1) (empty? l2))\n        coll\n        (recur (conj coll (first l1) (first l2))\n               (rest l1)\n               (rest l2)))))","user":"5d83b9aae4b0915913b1d386"},{"problem":39,"code":"(fn f [x y] (if (or (= x '()) (= y '())) '() (cons (first x) (cons (first y) (f (rest x) (rest y))))))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn my-interleave [s1 s2]\n  (flatten (map #(list %1 %2)\n       s1\n       s2)))","problem":39,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(fn [x y]\n  (loop [acc () a x b y]\n    (if (or (empty? a) (empty? b))\n      (reverse acc)\n      (recur (cons (first b) (cons (first a) acc))\n             (rest a)\n             (rest b)))))","problem":39,"user":"51a2569ee4b00957e520db7d"},{"code":"(fn [col1 col2]\n    (mapcat (fn [it1 it2] (list it1 it2)) col1 col2)\n    )","problem":39,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [a b]\n  (loop [a a b b acc '()]\n    (if (or (empty? a) (empty? b))\n      (reverse acc)\n      (recur (rest a) (rest b)\n             (conj acc (first a) (first b))))))","problem":39,"user":"5097ddfce4b087ccf61a7af0"},{"problem":39,"code":"(fn foo [s1 s2]\n(if (and (> (count s1) 0) (> (count s2) 0))\n( cons (first s1) (cons (first s2)  (foo (rest s1) (rest s2)))\n ))\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":39,"code":"(fn [a b] \n  (mapcat vector a b))","user":"585a9a16e4b0f14aab7c8752"},{"problem":39,"code":"(fn rep [a b]\n\t(if (or (empty? a) (empty? b)) '()\n    \t(cons (first a) (cons (first b) (rep (rest a) (rest b))))))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [a b]\n  (loop [r []\n         s1 a\n         s2 b]\n    (if (and s1 s2)\n      (recur (conj r (first s1) (first s2))\n             (next s1)\n             (next s2))\n      r)))","problem":39,"user":"51caca2ae4b068dadb8f2226"},{"problem":39,"code":"(fn my-interleave [[x & xs :as xcoll] [y & ys :as ycoll]]\n  (if (or (empty? xcoll) (empty? ycoll))\n    ()\n    (concat [x y] (my-interleave xs ys))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":39,"code":"#(flatten (map (fn [fir sec](list fir sec)) %1 %2))","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":39,"code":"(fn [vec-1 vec-2]\n  (loop [seq-1 vec-1\n         seq-2 vec-2\n         return ()]\n    (if (or (nil? (first seq-1))\n            (nil? (first seq-2)))\n      return\n      (recur (rest seq-1)\n             (rest seq-2)\n             (concat return [(first seq-1) (first seq-2)])))))","user":"55f73078e4b06e875b46cea4"},{"problem":39,"code":"(fn f [x y]\n  (cond\n        (= x []) []\n        (= y []) []\n        :else (flatten (conj [(first x) (first y)] (f (rest x) (rest y)))) ))","user":"519e70d5e4b0acf32bc6a42c"},{"code":"(fn f [xs ys] \r\n  (if (or (empty? xs) (empty? ys)) '()\r\n  (cons (first xs) (cons (first ys) (f (rest xs) (rest ys))))))","problem":39,"user":"4fa6a491e4b081705acca1bc"},{"problem":39,"code":"(fn ileave [xs ys]\n  (cond\n    (empty? xs) nil\n    (empty? ys) nil\n    :else (cons (first xs) (cons (first ys) (ileave (rest xs) (rest ys))))))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 res []] (if (or (empty? s1) (empty? s2)) res (recur (rest s1) (rest s2) (conj res (first s1) (first s2)))))","user":"4f0d6686535d0136e6c22318"},{"problem":39,"code":"(fn\n  [a b]\n  (loop [a a\n         b b\n         res ()]\n    (if (or (empty? a) (empty? b)) (reverse res)\n      (recur (rest a) (rest b) (cons (first b) (cons (first a) res))))))","user":"56df636ae4b0ca2494a095f4"},{"problem":39,"code":"#(loop [res [] xs %1 ys %2]\n     (if (and (not-empty xs) (not-empty ys))\n       (recur (conj res (first xs) (first ys)) (rest xs) (rest ys))\n       res))","user":"5143a51be4b0b4fb4ace5f39"},{"problem":39,"code":"(fn il [a b]\n    (let [s1 (seq a)\n          s2 (seq b)]\n      (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n            (il (rest s1) (rest s2)))))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":39,"code":"(fn ti\n[seq1, seq2]\n  (loop [xs seq1 ys seq2 zs []]\n    (if (or (empty? xs) (empty? ys))\n    zs\n    (recur (rest xs) (rest ys) (conj zs (first xs) (first ys))))))","user":"53de4bdae4b0d874e779ae32"},{"problem":39,"code":"(fn [s1 s2]\n    (flatten \n        (map (fn [a b]\n                [a b]\n            )\n            s1 s2\n        )\n    )\n)","user":"56c23ca6e4b05cc29241ee7f"},{"code":"(fn [xs ys]\n  (apply concat (map #(list %1 %2) xs ys)))","problem":39,"user":"4ee67d74535d93acb0a66861"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map #(vector %1 %2) seq1 seq2)))","user":"567b4641e4b05957ce8c61a5"},{"code":"(fn [l1 l2]\n    (loop [result '() l1 l1 l2 l2]\n      (if (or (empty? l1) (empty? l2))\n        (reverse result)\n        (recur (conj result (first l1) (first l2)) (rest l1) (rest l2) ))))","problem":39,"user":"53527ce8e4b084c2834f4af1"},{"problem":39,"code":"(fn[& seqs](apply concat\n                   (apply map (fn[& x] x)  seqs)))","user":"57b59d77e4b0fbc9809a27ae"},{"code":"(fn proc [x y]\n  ((fn rec [x y result]\n     (cond\n       (or (empty? x) (empty? y)) result\n       :else (recur (rest x) (rest y) (conj result (first x) (first y)))\n      )\n   ) x y []))","problem":39,"user":"50ed5d1be4b06330c1f87c37"},{"code":"#(mapcat (fn [& x] x) % %2)","problem":39,"user":"51e89428e4b006d205356a51"},{"code":"(comp flatten reverse seq zipmap)","problem":39,"user":"518ec633e4b0cd6ff516769e"},{"problem":39,"code":"#(mapcat (fn[v1 v2] [v1 v2]) %1 %2)","user":"4f6d23cde4b07046d9f4efc6"},{"code":"(fn my-inter [one two]\n  (loop [s1 one s2 two inter '()]\n    (if (or (empty? s1) (empty? s2))\n      (reverse inter)\n      (recur (rest s1)\n             (rest s2)\n             (conj inter (first s1) (first s2))))))","problem":39,"user":"51991a89e4b068aa333628fd"},{"problem":39,"code":"(fn [s1 s2] (loop [l1 s1\n         l2 s2\n         acc '()\n         ]\n    (if (or (empty? l1) (empty? l2))\n      (reverse acc)\n      (recur  \n       (rest l1)\n       (rest l2)\n       (conj acc (first l1) (first l2))\n       ))))","user":"6086abade4b0736b099e42ff"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [acc [] s1 s1 s2 s2]\n    (if (and (first s1) (first s2))\n      (recur (conj acc (first s1) (first s2)) (rest s1) (rest s2))\n      acc)))","user":"5385e633e4b06839e8705f08"},{"code":"(fn [m n] (mapcat (fn [x y] [x y]) m n))","problem":39,"user":"4fe1a734e4b0dd6cd5ce3637"},{"problem":39,"code":"(fn [coll-1 coll-2] (flatten (into '() (zipmap coll-1 coll-2))))","user":"5751f2a2e4b02ea114799292"},{"problem":39,"code":"(fn [one two]\n\t(let [returnThis []]\n      (flatten (for [index (if (< (count one) (count two)) (range (count one)) (range (count two)))]\n        (for [coll [one two]]\n          (conj returnThis (get coll index)))))))","user":"59595f85e4b066ee0a44afa1"},{"code":"(fn [seqA seqB] (mapcat (fn [a b] [a b]) seqA seqB))","problem":39,"user":"50fc299ee4b0d10d794c19f2"},{"problem":39,"code":"(fn interleave- [c1 c2]\n (if (or (= c1 nil)\n         (= c2 nil)) nil\n   (concat (list (first c1) (first c2)) (interleave- (next c1) (next c2)))))","user":"58edaa3be4b056aecfd47d89"},{"problem":39,"code":"(fn [& colls] \n  (apply concat \n   (map-indexed (fn [i _] \n                  (map #(nth % i) colls)) (first (sort-by count colls)))))","user":"5674f874e4b05957ce8c6144"},{"problem":39,"code":"(fn [x y]\n(loop [xrem x\n       yrem y\n       res []]\n (if (or (empty? xrem)\n         (empty? yrem))\nres\n(recur (rest xrem) (rest yrem) (conj res (first xrem) (first yrem))))))","user":"589b98fae4b00487982d533c"},{"problem":39,"code":"(fn [& arrays ] (flatten (apply map (fn [& nums] nums) arrays)))","user":"53e1c279e4b0d874e779ae5b"},{"code":"(fn myinterleave [x y]\n  (if-not (or (empty? x) (empty? y))\n    (conj (myinterleave (rest x) (rest y)) (first y) (first x))\n    '()))","problem":39,"user":"5348236ee4b084c2834f4a54"},{"problem":39,"code":"(fn [a b] (mapcat #(conj '() %2 %1) a b))","user":"5d41de31e4b05dd059a54379"},{"problem":39,"code":"(fn inter [x y]\n  (flatten (map vector x y)))","user":"55885edae4b059ccff29b1f6"},{"problem":39,"code":"(fn my-interleave [v1 v2]\n  (loop [returnValue []\n         vec1 v1\n         vec2 v2\n         ]\n    (if (and (seq vec1) (seq vec2))\n      (recur (conj returnValue (first vec1) (first vec2))\n             (rest vec1)\n             (rest vec2)\n             )\n      returnValue)))","user":"5e501de1e4b027a2e10ac0bf"},{"code":"(fn intlv [s1 s2]\r\n      (loop [e1 s1\r\n\t           e2 s2\r\n\t           r '()]\r\n\t       (if (or (empty? e1)\r\n\t\t       (empty? e2))\r\n\t\t   (reverse r)\r\n\t\t   (recur (rest e1) (rest e2) (conj r (first e1) (first e2))))))","problem":39,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":39,"code":"(fn interleave'\n  [c1 c2]\n  (mapcat list c1 c2))","user":"56481722e4b0284900eef628"},{"problem":39,"code":"(fn x\n  ([c1 c2] (x c1 c2 []))\n  ([c1 c2 acc]\n   (if (or (empty? c1) (empty? c2))\n     (flatten acc)\n     (x (rest c1) (rest c2) (conj acc (vector (first c1) (first c2)))))))","user":"5f90aeefe4b0715f5002d799"},{"code":"(fn il [l1 l2]\n  (cond\n   (empty? l1) nil\n   (empty? l2) nil\n   true (cons (first l1) (cons (first l2) (il (rest l1) (rest l2))))))","problem":39,"user":"52091d57e4b0e152394d76f0"},{"problem":39,"code":"(partial mapcat #(vec %&))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn f [xs ys]\n  (cons (first xs)\n        (cons (first ys)\n              (when (and (not-empty (rest xs))\n                         (not-empty (rest ys)))\n                (f (rest xs) (rest ys))))))","problem":39,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":39,"code":"(fn [x y] \n  (loop [a x b y z (empty a)] \n    (if (or (= a (empty a)) \n             (= b (empty b)))\n        z \n        (recur (rest a) \n                (rest b) \n                (conj z (first a) (first b))))))","user":"53e91473e4b036ad0777e495"},{"problem":39,"code":"(fn my-interleave [l r]\n  (if (or (empty? r)\n          (empty? l))\n    '()\n    (concat (list (first l) (first r)) (my-interleave (rest l) (rest r)))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"mapcat (fn [a b] [a b])","problem":39,"user":"4ed97da1535d10e5ff6f5306"},{"problem":39,"code":"(fn [x y] (flatten (map #(identity %&) x y)))","user":"53c837f7e4b00fb29b2212ae"},{"problem":39,"code":"(fn ! [a b & [results]]\n  (let [results (if results results [])]\n    (if (or (empty? a) (empty? b))\n    results\n    (! (rest a) (rest b) (conj results (first a) (first b)))\n  ))\n)","user":"50523848e4b0a561d07d8f1a"},{"code":"(fn myInterleave [col1 col2]\n  (reduce\n    #(apply conj %1 %2)\n    []\n    (map\n      #(vector %1 %2)\n      col1\n      col2)))","problem":39,"user":"526ee63de4b03e8d9a4a733f"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         res []]\n    (if (and (seq c1) (seq c2))\n      (recur (next c1) (next c2) (conj res (first c1) (first c2)))\n      res)))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"(fn a [[x & r1] [y & r2]] (when-not (some #(nil? %) [x y]) (cons x (cons y (a r1 r2)))))","problem":39,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [seq1 seq2] \n  (loop [s1 seq1 s2 seq2 union []]\n    (if (and (not-empty s1) (not-empty s2))\n      (recur \n        (rest s1) \n        (rest s2) \n         (conj (conj union (first s1)) (first s2)))\n      union)))","problem":39,"user":"4f1e4ab5535d64f603146496"},{"problem":39,"code":"(fn inter [seq1 seq2]\n  (concat [(first seq1)] [(first seq2)]\n          (if (and (> (count seq1) 1) (> (count seq2) 1))\n            (inter (rest seq1) (rest seq2)))))","user":"55fc1f05e4b0f488688e066f"},{"code":"(fn [x y] (flatten (reverse (zipmap x y))))","problem":39,"user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn [x y]\n    (flatten (apply map vector [x y])))","problem":39,"user":"5262efade4b03e8d9a4a709f"},{"code":"(fn my-interleave\n  ([xs ys]\n     (my-interleave xs ys '()))\n  ([xs ys output]\n     (if (or (empty? xs) (empty? ys))\n       (reverse output)\n       (recur (rest xs) (rest ys) (conj output (first xs) (first ys))))))","problem":39,"user":"511720eae4b0063b4e3e16da"},{"problem":39,"code":"mapcat (fn [%1 %2] [%1 %2])","user":"589ec900e4b02bd94d917e65"},{"problem":39,"code":"(fn [collx colly]\n   (mapcat\n      (fn [x y] \n          (list x y))\n      collx \n      colly))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":39,"code":"(fn [x y]\n     (flatten\n      (map #(list %1 %2)\n           x\n           y)))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":39,"code":"(fn [x y]\n  (flatten (map (fn [a b]\n  [a b]\n) x y))  \n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [res []\n         coll1 coll1\n         coll2 coll2]\n    (if-not (or (empty? coll1) (empty? coll2))\n      (recur\n       (conj res (first coll1) (first coll2))\n       (rest coll1)\n       (rest coll2))\n      res)))","user":"541df619e4b01498b1a71a87"},{"problem":39,"code":"(fn interl [a b]\n  (cond \n   (or (empty? a) (empty? b)) '()\n   :else (cons (first a) (cons (first b) (interl (rest a) (rest b))))))","user":"563dfc02e4b0da801c4e4662"},{"problem":39,"code":"(fn intr \n  ([a b] (intr a b ()))\n  ([a b accum]\n   (if (or (empty? a) (empty? b))\n    (reverse accum)\n    (let [[x & xs] a\n          [y & ys] b]\n         (intr xs ys (conj (conj accum x) y))))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":39,"code":"(fn [lyst1 lyst2]\n  (loop [lyst1 lyst1\n         lyst2 lyst2\n         memo '()]\n    (if (or (empty? lyst1) (empty? lyst2))\n      \t(reverse memo)\n      \t(recur (rest lyst1)\n\t\t\t   (rest lyst2)\n               (cons (first lyst2)\n                      (cons (first lyst1) memo))))))","user":"55f344afe4b06e875b46ce5a"},{"problem":39,"code":"(partial (fn [output [head1 & tail1] [head2 & tail2]]\n           (if (or (nil? head1) (nil? head2))\n             (into '() output)\n             (recur (cons head2 (cons head1 output)) tail1 tail2))) '())","user":"58db362be4b0a4d5acaab675"},{"problem":39,"code":"#(loop [a %1\n        b %2\n        out '()]\n   (if (or (empty? a)\n           (empty? b))\n     out\n     (recur (rest a)\n            (rest b)\n            (concat out (list (first a)) (list (first b))))))","user":"57a310b4e4b0c3d858beb90c"},{"problem":39,"code":"(fn il [acc a b]\n   (if (or (empty? a) (empty? b))\n     (reverse acc)\n     (il (conj acc (first a) (first b)) (rest a) (rest b))))\n  nil","user":"56c26880e4b05cc29241ee81"},{"problem":39,"code":"(fn [xa xb]\n    (let [c (min (count xa) (count xb))]\n      (loop [i 0 res []]\n        (if (< i c)\n          (recur (inc i) (conj res (nth xa i) (nth xb i)))\n          res))))","user":"57a5da5ee4b0a966079561fe"},{"problem":39,"code":"(fn interl [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (into [(first xs) (first ys)]\n          (interl (rest xs) (rest ys)))))","user":"5bcf0b1be4b0e9689409ee24"},{"problem":39,"code":"(fn [l1 l2]\n   (loop [[a & as] l1\n          [b & bs] l2\n          r []]\n     (if (or (nil? a) (nil? b))\n       r\n       (recur as bs (conj r a b)))))","user":"4dbba163535d3f4042261ecc"},{"code":"(fn [a b]\n    (loop [c (dec (min (count a) (count b)))\n           i 0\n          result []]\n      (if (<= i c)\n        (recur c (inc i) (conj result (nth a i) (nth b i)))\n        result)))","problem":39,"user":"5057852ce4b0012181721992"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [lr [] l1 list1 l2 list2]\n    (if (or (= 0 (count l1)) (= 0 (count l2)))\n      lr\n      (recur (conj lr (first l1) (first l2)) (rest l1) (rest l2)))))","user":"5739cbe4e4b0cd1946bd107c"},{"code":"(fn [a b]\n  (apply concat (map #(vector % %2) a b)))","problem":39,"user":"51750cd4e4b07031762f2ee5"},{"code":"(fn [a b]\n  (loop [o () a a b b]\n    (if (or (empty? a) (empty? b))\n      (reverse (flatten o))\n      (recur (cons (list (first b) (first a)) o ) (rest a) (rest b)))))","problem":39,"user":"4ebc829e535dfed6da9c6d86"},{"problem":39,"code":"(fn ilv\n  ([a b output]\n   (if (or (empty? a) (empty? b)) output\n   (recur (rest a) (rest b) (conj output (first a) (first b)))))\n  ([a b] (ilv a b [])))","user":"5b73e500e4b047b03b2036ba"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [acc () r1 s1 r2 s2 ]\n    (if (or (empty? r1) (empty? r2))\n      (reverse acc)\n      (recur (cons (first r2) (cons (first r1) acc)) (rest r1) (rest r2)))))","user":"5b799354e4b047b03b203706"},{"code":"(fn my-il [s1 s2]\n  (if (or (nil? s1) (nil? s2))\n      '()\n      (conj (conj (my-il (next s1) (next s2)) (first s2)) (first s1))))","problem":39,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [a b]\n  (mapcat (fn [x y] [x y]) a b))","problem":39,"user":"4e89dbce535d3e98b8023283"},{"problem":39,"code":"(fn [left right] \n  (loop [l left r right a []] \n    (if (and (seq l) (seq r)) \n      (recur (rest l) (rest r) (conj a (first l) (first r)))\n      a)))","user":"4fc04d75e4b081705acca324"},{"code":"(fn  [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         res []\n         smaller (if (< (count seq1)\n                         (count seq2)) seq1 seq2)]\n    (if-not smaller res (recur (next s1)\n                           (next s2)\n                           (into res [(first s1) (first s2)])\n                           (next smaller)))))","problem":39,"user":"516081e7e4b009fba0926e28"},{"problem":39,"code":"#(flatten\n  (map (partial conj []) % %2))","user":"58ef93ece4b056aecfd47dca"},{"problem":39,"code":"mapcat #(if (and %1 %2) [%1 %2])","user":"53b0765ae4b047364c044484"},{"code":"(fn foo [x y]\n  (cond\n    (and (empty? x) (empty? y)) '()\n    (and (empty? x) (not (empty? y))) '()\n    (and (not (empty? x)) (empty? y)) '()\n    :else\n    (concat (list (first x)) (list (first y)) (foo (rest x) (rest y)))\n))","problem":39,"user":"5078300de4b0fc74642bff66"},{"code":"(fn myinter [xs ys]\n  (mapcat vector xs ys))","problem":39,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten \n    (mapv list c1 c2)\n  )\n)","user":"59c243bae4b0a024fb6ae4aa"},{"problem":39,"code":"(fn [x y]\n  (loop [res [] fx (first x) x (rest x) fy (first y) y (rest y)]\n    (if (or (empty? x) (empty? y))\n      (conj res fx fy)\n      (recur (conj res fx fy) (first x) (rest x) (first y) (rest y)))))","user":"5ddd134ae4b0948ae9d9adc0"},{"problem":39,"code":"(fn inter-e\n\t[x y]\n\t(loop [a x\n         b y\n         result '()]\n    (cond\n      (or (empty? a) (empty? b)) (reverse result)\n      :else (recur\n              (rest a)\n              (rest b)\n              (conj result (first a) (first b))))))","user":"55a24698e4b0acc240e31523"},{"problem":39,"code":"(fn [a b]\n  (mapcat (fn [c d] (conj [] c d)) a b))","user":"54980edae4b0b312c081ff79"},{"problem":39,"code":"(fn interl\n  [lst lst2]\n  (loop [x lst\n         y lst2\n         nLst '()]\n    (if (or (empty? x) (empty? y))\n      (reverse nLst)\n      (recur (rest x) (rest y) (cons (first y)\n                                     (cons (first x)\n                                           nLst))))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 r []]\n    (if (or (empty? s1) (empty? s2))\n      r\n      (recur (rest s1) (rest s2) (concat r [(first s1) (first s2)])))))","problem":39,"user":"4f70bcf9e4b07046d9f4effe"},{"problem":39,"code":"(fn [a b]\n  (loop [s1 a s2 b s3 []]\n    (if \n      (or (empty? s1) (empty? s2))     \n       s3\n      (recur (rest s1) (rest s2) (conj s3 (first s1) (first s2)))\n     )))","user":"554d0511e4b0a04f792995b5"},{"code":"(fn [c1 c2] (flatten (map #(list %1 %2) c1 c2)))","problem":39,"user":"5151c184e4b03e678e393add"},{"problem":39,"code":"(fn [& args] (flatten (map #(list %1 %2) (first args) (second args))))","user":"57b39fbee4b0fbc9809a2783"},{"code":"(fn [l1 l2] (mapcat vector l1 l2))","problem":39,"user":"52d83c2ce4b09f7907dd138d"},{"problem":39,"code":"(fn my-interleave [x1 x2]\n  (filter #(not (nil? %))\n          (loop [result []\n                 s1 x1\n                 s2 x2]\n            (if (or (empty? s1) (empty? s2))\n              result\n              (recur (conj result (first s1) (first s2)) (rest s1) (rest s2))))))","user":"550ff2a3e4b06e50f9beb17f"},{"problem":39,"code":"(fn f [c1 c2]\n  (if (or (empty? c1) (empty? c2)) \n   '()\n   (conj (conj (f (rest c1) (rest c2)) (first c2)) (first c1))))","user":"56cb3a61e4b0ea9b8538f726"},{"code":"(fn [a b]\n  (reverse\n    (loop [x a y b lst '()]\n      (if (or (empty? x) (empty? y))\n        lst\n        (recur (rest x) (rest y) (conj lst (first x) (first y)))\n      )\n    )\n  )\n)","problem":39,"user":"4eb80353535d7eef3080737c"},{"problem":39,"code":"(fn intr [fst snd]\n  (loop [o [] a fst b snd]\n    (if (or (empty? a) (empty? b))\n          o\n          (recur\n           (conj o (first a) (first b))\n           (rest a)\n           (rest b)))))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn interleeve [x y] \n  ( if (or (empty? x) (empty? y))\n    '()\n    (conj (conj (interleeve (rest x) (rest y) ) (first y) ) (first x))  \n  ) \n)","problem":39,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn inter' [xs ys]\n  (loop [acc      []\n         [x & xs] xs\n         [y & ys] ys]\n    (if (or (empty? xs) (empty? ys))\n      (concat acc [x y])\n      (recur (concat acc [x y]) xs ys))))","problem":39,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [[f1 & r1] seq1\n         [f2 & r2] seq2\n         res []]\n    (if (and f1 f2)\n      (recur r1 r2 (conj res f1 f2))\n      res)))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":39,"code":"#(letfn [(intl [s1 s2] (if (or (empty? s1) (empty? s2)) '() (cons (first s1) (cons (first s2) (intl (rest s1) (rest s2))))))] (intl %1 %2))","user":"5ddcf10ae4b0948ae9d9adbe"},{"code":"(fn [seq1 seq2] \n  (loop [s1 seq1 s2 seq2 acc []]\n    (if (or (empty? s1) (empty? s2))\n      acc\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2))))))","problem":39,"user":"529f3f1ae4b04e0c58e87ba5"},{"code":"(fn inter [c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (first s1) \n              (cons (first s2) \n                    (inter (rest s1) (rest s2))))))))","problem":39,"user":"51cacda3e4b068dadb8f2227"},{"problem":39,"code":"#(loop [result [] a %1 b %2]\n  (if (or (empty? a) (empty? b))    \n    result\n    (let [result (conj result (first a) (first b))]\n      (recur result (rest a) (rest b)))))","user":"56f5d0efe4b046a417f92078"},{"code":"(fn [& c]\n  (loop [s (seq c) rs []]\n    (if (every? identity s)\n      (recur (map next s) (into rs (map first s)))\n      rs\n    )\n  )\n)","problem":39,"user":"4ed3c783535d44c135fd68f6"},{"code":"#(mapcat (fn [x y] (list x y)) %1 %2)","problem":39,"user":"4ee91d00535d93acb0a6688b"},{"code":"#(mapcat (fn [& xs] xs) %1 %2)","problem":39,"user":"52ba6d0be4b07a9af57922d2"},{"code":"(fn two\n  [s t]\n  (loop [a s b t o []]\n    (if (or (empty? a) (empty? b))\n      o\n      (recur (rest a) (rest b)  (concat o [(first a) (first b)]) ))))","problem":39,"user":"5101192ae4b0bef64c30e266"},{"problem":39,"code":"(fn my-interleave-2 [rangeOne rangeTwo]\n  (if (or (nil? (first rangeTwo)) (nil? (first rangeOne)))\n    '()\n    (into (my-interleave-2 (rest rangeOne) (rest rangeTwo)) (list (first rangeTwo) (first rangeOne)))\n    )\n  )","user":"5aada061e4b073f17744257a"},{"code":"(fn f [a b] \n  (if \n    (or (empty? a) (empty? b)) []\n  \t(concat (list (first a) (first b)) (f (rest a) (rest b))) \n  ))","problem":39,"user":"5142e808e4b0c172af7558c9"},{"problem":39,"code":"(fn my-interleave[s1 s2]\n  (loop [s1 s1 s2 s2 result []]\n    (if (or (empty? s1) (empty? s2))\n      (seq result)\n      (recur (rest s1) (rest s2) (conj (conj result (first s1)) (first s2))))))","user":"556405e5e4b0c656e3ff17fb"},{"code":"(fn f [[a & b] [c & d]]\r\n  (if (and a c)\r\n    (conj (f b d) c a) ) )","problem":39,"user":"4df20dda535d08e6dec9fe23"},{"problem":39,"code":"#(loop [inter [] frst (seq %1) scnd (seq %2)]\n   (if (and (seq frst) (seq scnd))\n     (recur (conj (conj inter (first frst)) (first scnd)) (rest frst) (rest scnd))\n\t (seq inter)))","user":"5d0815b3e4b0cc9c91588201"},{"problem":39,"code":"(fn [arr1 arr2]\n  (reduce #(conj (conj %1 (get arr1 %2)) (get arr2 %2))\n          []\n          (range (min (count arr1) (count arr2)))))","user":"52d68ed2e4b09f7907dd1362"},{"code":"(fn [arg1 arg2]\n  (loop [li1 arg1\n         li2 arg2\n         res (empty arg1)]\n    (if (or (empty? li1) (empty? li2))\n      res\n      (recur (rest li1) (rest li2) (concat (concat res [(first li1)]) [(first li2)])))))","problem":39,"user":"537881a4e4b06839e8705e46"},{"code":"(fn intlv \n  [x y]\n  (if (or (empty? x) (empty? y))\n    nil\n    (cons (first x) (cons (first y) (intlv (rest x) (rest y))))))","problem":39,"user":"51585807e4b0a069fd272c75"},{"code":"(fn zip [a b]\n    (if (or (= a ()) (= b ()))\n        ()\n        (lazy-seq\n            (cons (first a) (cons (first b) (zip (rest a) (rest b)))))))","problem":39,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":39,"code":"#(loop [x %1 y %2 acc nil]\n    (if (or (nil? x) (nil? y) (empty? x) (empty? y))\n      (reverse acc)\n     (recur (next x) \n            (next y) \n            (cons (first y) (cons (first x) acc))\n     ))\n     )","user":"5762fcfde4b0994c1922fbb3"},{"code":"(fn inter [s1 s2]\n  (cond\n    (or (nil? s1) (nil? s2)) '()\n    :else (concat (list (first s1) (first s2))\n                  (inter (next s1) (next s2)))))","problem":39,"user":"4e444c11535dc968683fc4a9"},{"problem":39,"code":"(fn [f s] (flatten (map (fn [a b] (list a b)) f s)))","user":"5a634ff0e4b0512ff01cd995"},{"problem":39,"code":"(fn [xs-init ys-init]\n   (loop [xs xs-init ys ys-init r []]\n     (let [x (first xs) xs (rest xs) y (first ys) ys (rest ys)]\n       (if (and (seq xs) (seq ys))\n         (recur xs ys (conj r x y))\n         (conj r x y))\n       )))","user":"4f847f0ee4b033992c121c33"},{"code":"(fn my-inter [a b] \n    (if (and (not-empty a) (not-empty b))\n      (concat [(first a) (first b)] (my-inter (rest a) (rest b)))\n      nil))","problem":39,"user":"530b8580e4b02e82168697cc"},{"code":"(fn interleave* [& colls]\n  (if (every? seq colls)\n    (concat\n      (map first colls)\n      (apply interleave* (map rest colls)))))","problem":39,"user":"4ee2da14535d10e5ff6f536c"},{"problem":39,"code":"(fn \n  [seq1 seq2]\n  (mapcat #(conj [] %1 %2) seq1 seq2))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn interleave1\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interleave1 (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleave1 (map rest ss))))))))","problem":39,"user":"50ab44b2e4b0f65d68208509"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [ls1 l1\n             ls2 l2\n             ret '[]]\n    (if (or (empty? ls1) (empty? ls2))\n      ret\n      (recur (rest ls1) (rest ls2) (conj  (conj ret (first ls1)) (first ls2))))))","user":"57150a8ee4b07c98581c3acb"},{"problem":39,"code":"(fn lazy-interleave [v1 v2]\n              (when (and (seq v1) (seq v2))\n                (lazy-cat [(first v1) (first v2)]\n                          (lazy-interleave (rest v1) (rest v2)))))","user":"5d21b91ee4b02ea6f0fb69e9"},{"problem":39,"code":"(fn [first-seq second-seq]\n  (loop [first-seq first-seq\n         second-seq second-seq\n         result '()]\n    (if (or (nil? (seq first-seq)) (nil? (seq second-seq)))\n      (reverse result)\n      (recur (rest first-seq) (rest second-seq) (conj result (first first-seq) (first second-seq))))))","user":"5da5a1eee4b000c986472c04"},{"code":"(fn [f s]\n  (loop [frst f\n         second s\n         coll []]\n    (if (and (seq frst) (seq second))\n      (recur (rest frst) (rest second)\n        (conj coll (first frst) (first second)))\n      coll)))","problem":39,"user":"505bd09fe4b032b709c81373"},{"problem":39,"code":"(fn myinterleave\n  [[a0 & arest] [b0 & brest]]\n  (cond\n    (or (nil? a0) (nil? b0)) nil\n    :else (concat [a0 b0] (myinterleave arest brest))))","user":"54145050e4b01498b1a719ea"},{"code":"(fn [a b] (reduce concat '() (map vector a b)))","problem":39,"user":"5314b0cae4b08068f379ed1c"},{"problem":39,"code":"(fn d[a b]\n  (let [c (min (count a)(count b))]\n    (if (= c 0) [] (cons (first a) (cons (first b) (d (rest a)(rest b)))))))","user":"59e8bb43e4b0249b72820735"},{"problem":39,"code":"(fn [a b] (mapcat list a b) )","user":"583c4482e4b089d5ab817d7e"},{"code":"#(apply concat (map (fn [a b] [a b]) % %2))","problem":39,"user":"523b1988e4b02f719975bdbc"},{"problem":39,"code":"(fn [one two & state]\n   (let [maybe-add #(if (empty? %1) %2 (vec (conj %2 (first %1))))\n         new-state state\n         new-state (maybe-add one new-state)\n         new-state (maybe-add two new-state)\n         ]\n     (if (some empty? (list one two))\n       ;; new-state\n       state\n       (recur (rest one) (rest two) new-state))\n     ))","user":"58db48a5e4b0a4d5acaab679"},{"code":"(fn intl [coll1 coll2]\r\n  \t\t\t (loop [res [] x coll1 y coll2]\r\n\t\t\t\t\t\t(if (or (empty? x) (empty? y))\r\n\t\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t\t\t(recur (conj res (first x) (first y)) (rest x) (rest y)))))","problem":39,"user":"4db045b5838c48654951d9be"},{"problem":39,"code":"(fn\n  [lst1 lst2]\n  (loop [[elem1 & remaining1] lst1\n         [elem2 & remaining2] lst2\n          result []]\n    (if (or (empty? remaining1) (empty? remaining2))\n      (conj result elem1 elem2)\n      (recur remaining1 remaining2 (conj result elem1 elem2)))\n    ))","user":"56f8055ee4b08e7d20b96835"},{"code":"(fn [coll1 coll2]\n     \"interleave two seqs                                                     \n      [1 2 3] [:a :b] --> '(1 :a 2 :b)\"\n     (let [c1 (vec coll1)\n           c2 (vec coll2)]\n       (loop [idx 0 result []]\n         (if\n          (or (= idx (count c1)) (= idx (count c2))) (seq result)\n         (recur (inc idx) (conj result (get c1 idx) (get c2 idx)))))))","problem":39,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn [s1 s2] (reduce concat\n                      (let [interleaved '()]\n                        (map #(conj interleaved %2 %1) s1 s2))))","problem":39,"user":"504ee511e4b0e7ad84dbc4a4"},{"problem":39,"code":"(fn [x y]\n  (letfn [(helper [a b lst]\n            (if (or (empty? a)\n                    (empty? b))\n              lst\n              (helper (rest a) (rest b) (conj lst (first a) (first b)))))]\n    (helper x y [])))","user":"5893c64ce4b00487982d524b"},{"problem":39,"code":"(fn [a b] \n (loop [x a\n        z b\n        result []]\n    (if (and (seq x)\n             (seq z))\n        (recur (rest x) (rest z) (conj result (first x) (first z)))\n        result)))","user":"57485efee4b009280f9f2b8a"},{"code":"(fn inter [x, y] \n  (if (or (empty? x) (empty? y)) '()\n  (conj (inter (rest x) (rest y)) (first y) (first x) )))","problem":39,"user":"4eb0a757535d7eef3080733d"},{"problem":39,"code":"#(flatten (map (fn [one two] (list one two)) %1 %2))","user":"5ba54642e4b0a20761a233f8"},{"code":"#(reduce into [] (map vector %1 %2))","problem":39,"user":"516d2a46e4b06f078fab252f"},{"code":"(fn my-interleave[a b]\n  (loop [ax a bx b s '()]\n    (cond\n     (or (zero? (count ax)) (zero? (count bx))) s\n     :else (recur (drop 1 ax) (drop 1 bx) (concat s (take 1 ax) (take 1 bx)))\n     )\n    ))","problem":39,"user":"5078dedae4b08327cd804a5d"},{"code":"(fn [seq1 seq2] (apply concat (map (fn [a b] [a b]) seq1 seq2)))","problem":39,"user":"53806e5be4b06839e8705ec1"},{"problem":39,"code":"(fn [coll1 coll2] (apply concat (map #(vector %1 %2) coll1 coll2)))","user":"55af3e6be4b03311e7b732c7"},{"problem":39,"code":"mapcat (fn[a b] [a b])","user":"54377355e4b032a45b869305"},{"problem":39,"code":"(fn [& lsts]\n  (reverse (reduce #(apply conj %1 %2)\n                   '()\n                   (apply map (fn [& items] items) lsts))))","user":"53f31dafe4b0742d9025b0f0"},{"code":"(fn f [x y]\n  (cond\n   (or (empty? x)\n       (empty? y))\n   '()\n   :else\n   (concat (list (first x)\n                 (first y))\n           (f (rest x) (rest y)))))","problem":39,"user":"52f818a6e4b047fd55836fcc"},{"problem":39,"code":"(fn [& arrays] (flatten \n                \t(apply map list arrays)\n                \n\t\t\t\t)\n)","user":"55893b09e4b059ccff29b1fe"},{"problem":39,"code":"(fn f [c d]\n  (if (or (empty? c)\n          (empty? d))\n    '()\n   (conj (f (rest c) (rest d))\n         (first d) (first c))\n    )\n  )","user":"561e8b11e4b064ca9f4b16c0"},{"problem":39,"code":"(fn interleave2 [xs ys]\n  (if (some empty? [xs ys])\n    (empty xs)\n    (cons\n      (first xs)\n      (cons\n        (first ys)\n        (interleave2 (rest xs) (rest ys))))))","user":"553abb28e4b09218d5f44ffb"},{"problem":39,"code":"(fn f [a b] (flatten (mapv (fn [x y] [x y]) a b)))","user":"5188c249e4b0bdff0e072d54"},{"code":"(fn [x y] (into [] (flatten (for [n (range 0 (min (count x) (count y)))]\n                                  [(get x n) (get y n)]))))","problem":39,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn _interleave\n([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (_interleave (rest s1) (rest s2)))))))))","problem":39,"user":"524dd1c3e4b0f245900d275c"},{"problem":39,"code":"#(flatten (map (fn [e1 e2] (list e1 e2)) % %2))","user":"5474666ae4b0c51c1f4d7288"},{"code":"#(loop [list1 %1 list2 %2 res '()]\n  (if \n      (or (empty? list2) (empty? list1)) res   \n      (recur \n          (next list1) \n          (next list2) \n          (concat res [(first list1)] [(first list2)])\n      )\n  ))","problem":39,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn f [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (conj (f (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn [f s]\n  (reduce\n    #(conj (conj %1 %2) (nth s (/ (count %1) 2)))\n    []\n    (take (count s) f)))","problem":39,"user":"4fcc70b3e4b0ee37620e1862"},{"code":"(fn [& colls] (apply mapcat #(list %1 %2) colls))","problem":39,"user":"504c8165e4b09724c857af31"},{"code":"(fn [a b] \n  (loop [coll [] A a B b]\n    (if (or (empty? A) (empty? B))\n      coll\n      (recur (conj coll (first A) (first B)) (rest A) (rest B)))))","problem":39,"user":"4fdf9a9ae4b05e33b9224f9f"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [[l & ls :as left] (seq c1)\n         [r & rs :as right] (seq c2)\n         result '()]\n    (if (and left right)\n      (recur ls rs (cons r (cons l result)))\n      (reverse result)\n    )\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"problem":39,"code":"#(apply concat (map (fn my_interleave [x & tail] (cons x tail)) %1 %2))","user":"54e5dc08e4b024c67c0cf800"},{"code":"#(flatten (map (fn [x y] [x y]) %1 %2))","problem":39,"user":"4e79a143535db169f9c796a2"},{"code":"(fn inte [l1 l2]\n  (if (or (empty? l1) (empty? l2)) \n      () \n      (concat (list (first l1) (first l2)) (inte (rest l1) (rest l2)))))","problem":39,"user":"4e4b911f535dc968683fc4d6"},{"code":"#(loop [xs %1 ys %2 acc []]\n   (if (and (seq xs) (seq ys))\n     (recur (next xs) (next ys) (conj acc (first xs) (first ys)))\n     acc))","problem":39,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn i [a b]\n  (if (or (= (count a) 0) (= (count b) 0)) '()\n    (conj (i (drop 1 a) (drop 1 b)) (first b) (first a))\n  )\n)","problem":39,"user":"5127ca90e4b03a34742b42ff"},{"problem":39,"code":"(fn [a b]\n  (loop [[a & ar]a\n         [b & br]b\n         res []]\n    (if (or (empty? ar)(empty? br))\n      (conj res a b)\n      (recur ar br (conj res a b)))))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":39,"code":"(fn my-ileave [a b] \n  (let [[x & xs] a [y & ys] b]\n   (if (some empty?  [xs ys])\n    [x y]\n    (concat  [x y] (my-ileave xs ys)))))","user":"55aa1637e4b0988bba2ad949"},{"problem":39,"code":"(fn inter [f s]\n  (if (or (empty? f) (empty? s))\n    (empty f)\n    (cons (first f) \n          (cons (first s) (inter (rest f) (rest s))))    ))","user":"553900d4e4b09218d5f44fe5"},{"problem":39,"code":"(fn [[x & xs] [y & ys] & s]\n  (let [zs (or s [])]\n    (if-not (and x y)\n      zs\n      (recur xs ys (conj zs x y)))))","user":"4fa5c8dde4b081705acca1af"},{"problem":39,"code":"(fn [lst1 lst2]\n  (loop [x (seq lst1)\n         y (seq lst2)\n         interleaved []]\n    (if (and x y)\n      (recur (seq (rest x)) (seq (rest y)) (conj interleaved (first x) (first y)))\n      interleaved)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":39,"code":"(fn [coll1 coll2]\n  (flatten (reduce conj\n          \t[]\n          \t(map vector coll1 coll2))))","user":"58ee5371e4b056aecfd47da8"},{"code":"(fn [left right]\n  (loop [l left\n         r right\n         acc []]\n    (if (or (empty? l) (empty? r))\n      acc\n      (recur (rest l) (rest r) (concat acc [(first l)] [(first r)])))))","problem":39,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn[xs ys]\n  (flatten (map list xs ys)))","problem":39,"user":"523ab749e4b0aa37f082ed8d"},{"code":"(fn my-interleave [c1 c2]\n  (loop [c1 c1\n        c2 c2\n        cr []]\n    (if (or (empty? c1) (empty? c2))\n      cr\n      (recur (rest c1) (rest c2) (conj (conj cr (first c1)) (first c2))))))","problem":39,"user":"521cd8e4e4b0c4ef0be8309f"},{"code":"(fn zip [a b]\n      (if (or (empty? a) (empty? b))\n        (empty a)\n        (concat [(first a)] [(first b)] (zip (rest a) (rest b)))\n        )\n      )","problem":39,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn [x y]\n  (mapcat #(vector % %2) x y))","problem":39,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn inter [a b]\n  (when (and (seq? (seq a)) (seq? (seq b)))\n\t  (concat [(first a) (first b)] (inter (rest a) (rest b)))))","problem":39,"user":"501948b3e4b0b6630b101db5"},{"problem":39,"code":"(fn[coll1 coll2] (flatten (apply map vector [coll1 coll2])))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":39,"code":"(fn [s t] \n  (mapcat vector s t))","user":"585a7b05e4b0f14aab7c874d"},{"code":"(fn my-interleave\n  [coll1 coll2]\n  (lazy-seq\n   (let [s1 (seq coll1) s2 (seq coll2)]\n     (if (and s1 s2)\n       (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))\n       '()))))","problem":39,"user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn r [x y] (if (or (< (count x) 1) (< (count y) 1)) '() (conj (r (rest x) (rest y)) (first y) (first x))))","problem":39,"user":"51b63845e4b02e5820733403"},{"problem":39,"code":"(fn [s1 s2] (flatten (reverse (zipmap s1 s2))))","user":"56791447e4b05957ce8c6183"},{"problem":39,"code":"(fn [xs1 xs2] (mapcat list xs1 xs2))","user":"5545eebee4b0a04f79299539"},{"problem":39,"code":"(fn [inp1 inp2]\n  (loop [inp1 inp1\n         inp2 inp2\n         res []]\n    (if (or\n         (empty? inp1)\n         (empty? inp2))\n      res\n      (recur\n       (rest inp1)\n       (rest inp2)\n       (conj res (first inp1) (first inp2))))))","user":"592334c7e4b0a390037439ee"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         acc []]\n    (if (or (empty? s1) (empty? s2))\n      acc\n      (recur (rest s1) (rest s2) (concat acc (list (first s1) (first s2))))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":39,"code":"(partial (fn [accum l1 l2] \n  (if (or (empty? l1) (empty? l2))\n   accum\n   (recur \n    (concat accum \n            [(first l1) (first l2)]\n    )\n    (rest l1) (rest l2)\n   )\n  )\n)[])","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [x y] \r\n  (loop [v1 x v2 y resul '()]\r\n    (if (= (count v2) 0)\r\n      (reverse resul)\r\n      (if(= (count v1) 0)\r\n           (reverse resul)\r\n           (recur (rest v1) (rest v2) (cons (first v2) (cons (first v1) resul)))\r\n))))","problem":39,"user":"4e932523535dbda64a6f6b09"},{"code":"#(loop [x %1 y %2 ret []]\n   (if (or (nil? (first x)) (nil? (first y)))\n     ret\n     (recur (rest x) (rest y) (conj ret (first x) (first y)))\n    )\n  )","problem":39,"user":"5176afd2e4b085adf681d889"},{"code":"#(letfn [(_interleave_\n          [coll1 coll2 il]\n          (if (or (empty? coll1) (empty? coll2))\n            il\n            (recur (rest coll1)\n                   (rest coll2)\n                   (concat il (list (first coll1))\n                              (list (first coll2))))))]\n        (_interleave_ %1 %2 '()))","problem":39,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":39,"code":"#(loop [r [] c1 %1 c2 %2] (if (or (empty? c1) (empty? c2)) r (recur (conj r (first c1) (first c2)) (next c1) (next c2))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [l1 l2]\n  (mapcat (fn [a b] [a b]) l1 l2))","problem":39,"user":"50e135f4e4b084616e11c667"},{"problem":39,"code":"#(flatten (for [i (range (min (count %1) (count %2)))] [(nth %1 i) (nth %2 i)]))","user":"54fa60dfe4b0cf870d934704"},{"code":"(fn [out s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    out\n    (recur\n      (conj out (first s1) (first s2))\n      (rest s1)\n      (rest s2)\n))) []","problem":39,"user":"4f1052b9535d64f603146418"},{"code":"(fn [a b]\n    (loop [res [] x a y b]\n      (if (or (empty? x ) (empty? y))\n        res\n        (recur (conj res (first x) (first y)) (rest x) (rest y))\n        )))","problem":39,"user":"4e964f4a535dbda64a6f6b42"},{"code":"(fn il [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a) (first b)] (il (rest a) (rest b)))))","problem":39,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":39,"code":"#(flatten(map(fn[x y](list [x y]))%1 %2))","user":"5f27cc7fe4b033932238a646"},{"problem":39,"code":"(fn [a b]\n  (loop [seqa a\n         seqb b\n         acc []]\n    (if (or (empty? seqa) (empty? seqb))\n      acc\n      (recur (rest seqa)\n             (rest seqb)\n             (conj acc (first seqa) (first seqb))))))","user":"5a373b80e4b001c08efc0c7c"},{"code":"(fn inter [a b]\n  (if (or (empty? b) (empty? a)) '() \n  (cons (first a) (cons (first b) (inter (rest a) (rest b))))))","problem":39,"user":"4f8b20fce4b02e764a0a5178"},{"problem":39,"code":"(fn [a b] (loop [in1 a in2 b output []] (if (or (empty? in1) (empty? in2)) output (recur (rest in1) (rest in2) (into output [(first in1) (first in2)])))))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":39,"code":"(fn [one two]\n  (loop [frst one snd two result []]\n    (if (or (empty? frst) (empty? snd))\n      result\n      (recur (rest frst) (rest snd) (conj (conj result (first frst)) (first snd))))))","user":"57344edbe4b0cd1946bd1008"},{"problem":39,"code":"(fn [x y]\n  (if (<= (count x) (count y))\n    (flatten (map-indexed (fn [index item] [item (nth y index)]) x))\n    (flatten (map-indexed (fn [index item] [item (nth y index)]) (take (count y) x)))))","user":"603e29d4e4b0d5df2af22310"},{"code":"#(flatten (map list %1 %2))  ;; #(mapcat list %1 %2)","problem":39,"user":"4fcf642ee4b03432b189f410"},{"problem":39,"code":"(partial (fn myinterleave [result left right]\n           (if (or (empty? left) (empty? right))\n             result\n             (recur (conj result (first left) (first right)) (rest left) (rest right)))) [])","user":"5455510fe4b0e397800069df"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [la a\n         lb b\n         res ()]\n    (if (or (empty? la) (empty? lb))\n      (reverse res)\n      (recur (rest la)\n             (rest lb)\n             (cons (first lb) (cons (first la) res))))))","user":"57f8104ce4b0d3187e900910"},{"problem":39,"code":"(fn [x y]\n  (flatten (apply map vector [x y])))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":39,"code":"(fn [x y]\n   (loop [counter (min (count x) (count y)) ans [] set1 x set2 y]\n     (if (<= counter 0) ans\n     (recur (dec counter) (conj ans (first set1) (first set2)) (rest set1) (rest set2)))))","user":"55dfac9de4b050e68259b3fa"},{"code":"(fn f [a b]\n  (if-let [[x & xs] (seq a)]\n    (if-let [[y & ys] (seq b)]\n      (conj (f xs ys) y x)\n      '())))","problem":39,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":39,"code":"(fn newInterleave [coll1 coll2]\n  (loop [result []\n            more1 coll1\n            more2 coll2]\n    (if (or (empty? more1) (empty? more2))\n      (seq result)\n      (recur (conj result (first more1) (first more2))\n             (rest more1)\n             (rest more2)))))","user":"54eea988e4b024c67c0cf875"},{"code":"(fn do-interleave [xs ys]\n  (lazy-seq\n    (let [xss (seq xs) yss (seq ys)]\n      (when (and xss yss)\n            (cons (first xss)\n                  (cons (first yss)\n                        (do-interleave (rest xss) (rest yss))))))))","problem":39,"user":"50630247e4b05ac47bc68d6b"},{"problem":39,"code":"(fn [l1 l2]\n (->> (map vector l1 l2)\n      (reduce into)))","user":"598216d9e4b021a7a535fdf8"},{"code":"(fn intrl[a b](if-not (or (empty? a)(empty? b))\n                 (cons (first a) \n                       (cons (first b) \n                             (intrl (rest a) (rest b))\n                        )\n                  )\n               '()\n                )\n)","problem":39,"user":"526a3412e4b03e8d9a4a721e"},{"problem":39,"code":"(fn \n[lst1 lst2] \n(flatten (map #(list % %2) lst1 lst2))\n)","user":"55fcaccfe4b0f488688e0679"},{"code":"(fn il [a b]\n  (if (or (empty? a)\n         (empty? b)) '()\n    (cons (first a)\n          (cons (first b)\n                (il (rest a) (rest b))))))","problem":39,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [seqn-1 seqn-2]\n  (reduce concat\n          (map list seqn-1 seqn-2)))","problem":39,"user":"53889587e4b0640c7a9a589e"},{"code":"(fn [x y]\n     (flatten (map list x y))\n   )","problem":39,"user":"531843c1e4b08068f379ed6c"},{"problem":39,"code":"(fn [col1 col2]\n  (mapcat #(seq [%1 %2]) col1 col2))","user":"579c7db7e4b05b1deef9ae0a"},{"code":"#(flatten (reverse (seq (zipmap %1 %2))))","problem":39,"user":"4fe229f0e4b0dd6cd5ce3642"},{"code":"(fn [a b]\r\n  (loop [a a b b x []]\r\n    (if (or (empty? a) (empty? b))\r\n      x\r\n      (recur (rest a) (rest b) (concat x [(first a) (first b)])))))","problem":39,"user":"4eb6d3ab535d7eef30807370"},{"code":"(fn interleave1 [x y] \n  (loop [x x y y z []]\n    (if (or (empty? x) (empty? y)) z\n        (recur (rest x) (rest y) (conj (conj z (first x)) (first y)))) ))","problem":39,"user":"524a74b3e4b05ef8e38e64a7"},{"code":"(fn [a b]\n  (letfn [(intl [x y]\n    (if (not-every? seq [x y])\n      []\n      (flatten (cons (map first [x y]) (intl (rest x) (rest y))))\n    ))]\n          (intl a b)))","problem":39,"user":"4f93539de4b0dcca54ed6cba"},{"problem":39,"code":"(fn [seq1 seq2]\n  (let [length (min (count seq1) (count seq2))]\n    (reduce #(conj % (get seq1 %2) (get seq2 %2)) [] (range 0 length))\n  )\n  )","user":"530c3d88e4b02e82168697d8"},{"code":"(fn f [& colls]\n  (if (every? seq colls)\n    (lazy-seq\n      (concat \n        (map first colls) \n        (apply f (map rest colls))))\n    ))","problem":39,"user":"506617c3e4b03d366d7cb2ab"},{"problem":39,"code":"(fn [a b]\n             (let [counta (count a)\n                   countb (count b)\n                   minlen (if (> counta countb) countb counta)]\n               (mapcat (fn [i]\n                      [(nth a i) (nth b i)]\n                      ) (range minlen))\n               )\n             )","user":"5251b11be4b0541d1855b87b"},{"problem":39,"code":"(fn [a b]\n  (letfn [(iter [a b]\n            (let [[x & xs] a\n                  [y & ys] b]\n              (cons x (cons y (lazy-seq (iter xs ys))))))]\n    (take (* 2 (min (count a) (count b))) (iter a b))))","user":"5755e66ee4b02ea1147992cf"},{"problem":39,"code":"(fn [coll1 coll2]\n    (loop [result [] coll1 coll1 coll2 coll2]\n        (if (or (empty? coll1) (empty? coll2))\n            result\n            (recur \n                (conj result (first coll1) (first coll2))\n                (rest coll1)\n                (rest coll2)))))","user":"5896735fe4b00487982d529d"},{"code":"(fn i [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) \n                             (i (rest s1) (rest s2)))))))","problem":39,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":39,"code":"(fn ans-39 [arr1 arr2]\n  (if (and (seq arr1) (seq arr2))\n    (cons (first arr1) \n          (cons (first arr2) (ans-39 (rest arr1)\n                                     (rest arr2))))\n    nil))","user":"608fac60e4b03bd49d9f36c7"},{"problem":39,"code":"#(loop [a %1 b %2 res []]\n\t(if (or (nil? a) (nil? b))\n\t   \tres\n\t    (recur (next a) (next b) (conj res (first a) (first b)) )\n\t   )\n\t)","user":"569f33c7e4b0542e1f8d148f"},{"problem":39,"code":"(fn [x y]\n  (loop [cx x, cy y, accum []]\n    (println cx cy accum)\n    (if (or (empty? cx) (empty? cy))\n      accum\n      (recur (rest cx) (rest cy) (conj (conj accum (first cx)) (first cy)))\n      )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"problem":39,"code":"(fn [l1 l2]\n  (-> (map list l1 l2)\n      flatten))","user":"5875daaee4b01531a375ea74"},{"code":"#(flatten\n  (let [ \n    mincount (min (count %1) (count %2))\n    no1 (reverse (take mincount %1))\n    no2 (reverse (take mincount %2))\n  ]\n   (vec (zipmap no1 no2))\n  )\n)","problem":39,"user":"508bf05ae4b0f17d83ea26aa"},{"code":"(fn [m n]\n    (loop [ms m\n           ns n\n           acc '()]\n      (if  (or (empty? ms) (empty? ns))\n        acc\n        (recur\n         (rest ms)\n         (rest ns)\n         (concat  acc [(first ms) (first ns)] )))\n      )\n    )","problem":39,"user":"4eeccfc0535d93acb0a668b5"},{"problem":39,"code":"(fn my-interleave [c1 c2]\n  (loop [result [] [x1 & x1s] c1 [x2 & x2s] c2]\n    (if (or (nil? x1) (nil? x2)) result\n                  (recur (conj result x1 x2) x1s x2s)))\n  )","user":"5c36d110e4b0d62ef62d9f6a"},{"problem":39,"code":"(fn [v1 v2]\n  (->> v2\n       (map #(vector %1 %2) v1)\n       (flatten)\n       (take (* 2 (min (count v1) (count v2))))))","user":"60aecd73e4b00e9e6653c49a"},{"problem":39,"code":"(fn interleave_2_sequences\n   [x1 x2]\n  ;\" Takes two sequences and returns the first item from each, then the second from each, etc\"\n  (when-not (or (empty? x1) (empty? x2))\n    (cons (first x1) (cons (first x2)\n       (interleave_2_sequences (rest x1) (rest x2))))))","user":"5bbbd077e4b0a20761a23615"},{"code":"#(loop [r '(), x %1, y %2]\n    (if (or (nil? (first x)) (nil? (first y)))\n      (reverse r)\n      (recur (conj r (first x) (first y)) (next x) (next y))))","problem":39,"user":"4ec6357a535d6d7199dd36c5"},{"code":"#(loop [xa %1 xb %2 xs []]\n   (if (and (seq xa)\n            (seq xb))\n       (recur (rest xa)\n              (rest xb)\n              (conj xs (first xa) \n                       (first xb)))\n       xs))","problem":39,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"#(loop [lst1 %1 lst2 %2 ret []]\n   (if (or (empty? lst1) (empty? lst2))\n     ret\n     (recur (rest lst1) (rest lst2) (conj ret (first lst1) (first lst2)))))","problem":39,"user":"51000111e4b00d7ad4cab15e"},{"problem":39,"code":"(fn my-interleave [a b]\n  (loop [acc [], a a, b b]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (conj acc (first a) (first b)) (rest a) (rest b)))))","user":"5532a04ee4b09218d5f44f82"},{"problem":39,"code":"(fn [x y]\n (flatten (map #(list %1 %2) x y)))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":39,"code":"(fn [x y]\n    (flatten (for [i (range (min (count x) (count y)))]\n        (conj '() (nth y i) (nth x i) ))))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":39,"code":"(fn [v1 v2] (mapcat #(-> [%1 %2]) v1 v2))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn [a b]\n  (loop [a a b b r []]\n    (if (some empty? [a b])\n      r\n      (recur\n        (rest a)\n        (rest b)\n        (conj (conj r (first a)) (first b))))))","problem":39,"user":"50435852e4b034ff00315d22"},{"code":"(fn [x y]\n  (loop [one x two y acc []]\n    (if (and (seq one) (seq two))\n      (recur (rest one) (rest two) (conj acc (first one) (first two)))\n      acc)))","problem":39,"user":"4f032f30535dcb61093f6a73"},{"problem":39,"code":"(fn [x y] (reduce (fn [acc a] (conj acc (get x a) (get y a) )) [] (range 0 (min (count y) (count x)))   ))","user":"5c527129e4b0fb8c5ffd99de"},{"problem":39,"code":"(fn [x y]\n  (mapcat vec (reverse (zipmap x y))))","user":"55080467e4b021ccfedb96ae"},{"problem":39,"code":"#(loop [a %1 b %2 ac []] \n            (if \n              (or (empty? a) (empty? b)) ac\n              (recur (rest a) (rest b) (conj ac (first a) (first b)))\n              ))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn [a b] (mapcat list a b))","problem":39,"user":"4fccdc75e4b0ee37620e186d"},{"problem":39,"code":"(fn [x y]\n (letfn [(f [a b r]\n           (if (or (empty? a) (empty? b))\n             r\n             (recur (rest a) (rest b) (conj r (first a) (first b)))))]\n   (f x y [])))","user":"55495318e4b0a04f79299566"},{"problem":39,"code":"#(reverse \n  (loop [col1 %1\n       col2 %2\n       inter '()]\n  (if (or \n       (empty? col1)\n       (empty? col2))\n    inter\n    (recur (rest col1)\n           (rest col2)\n           (conj inter (first col1) (first col2))))))","user":"54194782e4b01498b1a71a29"},{"problem":39,"code":"(fn [list1 list2] (flatten (map list list1 list2)))","user":"56cc34aee4b0ea9b8538f73c"},{"problem":39,"code":"(fn [s1 s2] (flatten (map #(vector %1 %2) s1 s2)))","user":"568d4742e4b0dcc4269f40c2"},{"problem":39,"code":"(fn t [l m] (if (or (empty? l) (empty? m)) '() (conj (t (rest l) (rest m)) (first m) (first l))))","user":"553c05b7e4b09218d5f45011"},{"code":"(fn[s t] (flatten (map #(list %1 %2) s t)))","problem":39,"user":"4ec64981535d6d7199dd36c7"},{"code":"(fn [coll1 coll2]\n  (let [len (min (count coll1) (count coll2))]\n  (loop [idx 0 coll []]\n    (if (< idx len) (recur (inc idx) (conj (conj coll (coll1 idx)) (coll2 idx)) ) coll))))","problem":39,"user":"4f0348b4535dcb61093f6a84"},{"problem":39,"code":"(fn [seqA, seqB] \n  (loop [seqA seqA\n         seqB seqB\n         sum []]\n    (cond\n     (empty? seqA) sum\n     (empty? seqB) sum\n     :else (recur (rest seqA) (rest seqB) (conj sum (first seqA) (first seqB))))))","user":"57597fade4b02ea11479931d"},{"problem":39,"code":"(fn  [a b]\n  (loop [x a y b l []]\n         (if (or (zero? (count x)) (zero? (count y)))\n           l\n           (recur (rest x) (rest y) (conj l (first x) (first y)))))\n  )","user":"554f7ef2e4b00713264bd9a1"},{"problem":39,"code":"(fn altInterleave\n  [la lb]\n  (loop [a la\n         b lb\n         result []\n         bool true]\n    (if bool\n      (if (empty? a)\n        result\n        (recur (rest a) b (conj result (first a)) false))\n      (if (< (count b) 2)\n        (conj result (first b))\n        (recur a (rest b) (conj result (first b)) true)))))","user":"5e9636fee4b0fbed045a3816"},{"problem":39,"code":"(fn [coll1 coll2]\n    (mapcat vector coll1 coll2)\n)","user":"54996971e4b0b312c081ff8d"},{"problem":39,"code":"(fn  [a b]\n   ( flatten (map list a b)\n     ))","user":"5c374db6e4b0d62ef62d9f73"},{"problem":39,"code":"(fn f [& colls]\n  (if (some empty? colls)\n    '()\n    (concat (map first colls) (apply f (map rest colls)))))","user":"5400407de4b0de5c4184860a"},{"code":"#(flatten (map (fn [x y] (concat (list x) (list y))) %1 %2))","problem":39,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn [x y] (reverse (loop [[x & xs] x [y & ys] y acc '()]\n            (if\n             (or (empty? xs) (empty? ys)) (conj acc x y)\n             (recur xs ys (conj acc x y))))))","problem":39,"user":"530394b4e4b0d8b024fd3743"},{"code":"(fn [a b] \n\t(flatten\n\t\t(map (fn [x y] (list x y)) a b)\n     )\n )","problem":39,"user":"51e1c176e4b06a68e693eafb"},{"problem":39,"code":"(fn f [x y] (mapcat #(list (nth x %) (nth y %)) (range (min (count x) (count y)))))","user":"56fee4c0e4b08d47c97781b5"},{"code":"#(-> (zipmap %1 %2) vec reverse flatten)","problem":39,"user":"50843a4ae4b0c98812d0788b"},{"problem":39,"code":"(fn [xs1 xs2]\n   (loop [xs1 xs1\n          xs2 xs2\n          acc []]\n     (if (or (empty? xs1) (empty? xs2))\n       acc\n       (recur (rest xs1) (rest xs2) (conj acc (first xs1) (first xs2))))))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":39,"code":"(fn [x y] (reduce into (map (fn [x y] [x y]) x y)))","user":"567874f3e4b05957ce8c617c"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs ys ys acc []]\n    (if (some empty? [xs ys])\n      acc\n      (let [[x & xs] xs\n            [y & ys] ys]\n        (recur xs ys (conj acc x y))))))","user":"565e0934e4b068f2fe63dc30"},{"code":"#(flatten (for [x (range (min (count %1) (count %2)))] [(nth %1 x) (nth %2 x)]))","problem":39,"user":"51e3cf8ee4b0efabf93c02a3"},{"code":"(fn [a b] (loop [s (map #(list %1 %2) a b) r '()]\n             (if (empty? s)\n               r\n               (recur (rest s) (concat r (first s))))))","problem":39,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":39,"code":"(fn intleave \n  ([left right] (intleave left right []))\n  ([left right result] (if (or (empty? left) (empty? right))\n                         result\n                         (intleave (rest left) (rest right) (conj result (first left) (first right))))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"code":"(fn inter [x y]\n  (\n    if(and (not-empty x) (not-empty y))\n      (cons (first x) (cons (first y) (inter (rest x) (rest y))))\n  )\n)","problem":39,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn *interleave                                                                                                                                             \n  [coll1 coll2]                                                                                                                                               \n  (mapcat list coll1 coll2))","problem":39,"user":"4e3bcccd535deb9a81d77f56"},{"problem":39,"code":"(fn [x y]\n  (loop [f x\n         s y\n         r []]\n    (if (or (empty? f) (empty? s))\n      r\n      (recur (rest f) (rest s) (conj (conj r (first f)) (first s))))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":39,"code":"(fn [coll1 coll2]\n  (reduce concat (into (list) (zipmap coll1 coll2))))","user":"57089f82e4b0b0fb43fd06a2"},{"code":"#(reduce into [] (map (fn [a b] [a b]) %1 %2))","problem":39,"user":"51da52dbe4b02ceefd947763"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [curr1 s1\n         curr2 s2\n         acc []]\n    (if-not (or (empty? curr1) (empty? curr2))\n      (recur (rest curr1) (rest curr2) (conj acc (first curr1) (first curr2)))\n      acc\n      )))","user":"57a774e4e4b0a96607956213"},{"code":"(fn [x y] (reduce (fn [n m] (concat n m)) (map (fn [a b] (vector a b)) x y)))","problem":39,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn i [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a) (cons (first b) (i (rest a) (rest b))))))","problem":39,"user":"4f559d2ce4b0a7574ea71808"},{"problem":39,"code":"(fn [coll1 coll2] (reduce concat (map #(list %1 %2) coll1 coll2)))","user":"53213810e4b09d4e7a9b54b0"},{"code":"(fn ! [x y]\n  (when-not (or (empty? x) (empty? y))\n    (cons (first x) (cons (first y) \n      (! (rest x) (rest y))))))","problem":39,"user":"501c1492e4b086d93747d180"},{"code":"(fn [x y]\n  (flatten\n    (map\n      (fn [a b] (vector a b)) x y\n    )\n  )\n)","problem":39,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn x [a b]\n  (let [c (seq a) d (seq b)]\n    (when (and c d) \n      (cons (first c) (cons (first d) \n                            (x (rest c) (rest d)))))))","problem":39,"user":"4e6ebd4a535d5021c1a89610"},{"problem":39,"code":"(fn [col1 col2] (flatten (map (fn [x y] [x y]) col1 col2)))","user":"53f67bcfe4b0db01ade6f9e1"},{"problem":39,"code":"(fn [a b]\n  (let [cnt (dec (min (count a) (count b)))]\n    (loop [n cnt res '()]\n      (if (= -1 n)\n        res\n        (recur (dec n) (cons (nth a n) (cons (nth b n) res)))))))","user":"54055aa9e4b0addc1aec6665"},{"problem":39,"code":"(fn ileave [s1 s2] \n  (let [head1 (list (first s1))\n        head2 (list (first s2))\n        rest1 (rest s1)\n        rest2 (rest s2)]\n  \t(if (or (empty? rest1) (empty? rest2))\n    \t(concat head1 head2)\n    \t(concat head1 head2 (ileave rest1 rest2)))))","user":"5b608087e4b0c6492753e700"},{"code":"(fn [list1 list2]\n  (loop [l1 list1 l2 list2 res [] ]\n    (if (or (empty? l1) (empty? l2))\n            (reverse res)\n            (recur (rest l1) (rest l2) (cons (first l2) (cons (first l1) res)))\n     )\n  )\n)","problem":39,"user":"533971eee4b0e30313ee6ca8"},{"problem":39,"code":"(fn [s1 s2] (mapcat #(list %1 %2) s1 s2 ))","user":"579d9601e4b05b1deef9ae18"},{"problem":39,"code":"(fn [& seqs]\n  (loop [ss seqs\n         solution '()]\n   (if (reduce #(or % %2) (map empty? ss)) ;any of the collections are empty\n     solution\n     (recur (map rest ss) (concat solution (map first ss))))))","user":"5acd235ae4b0e27600da7824"},{"problem":39,"code":"(fn [xs ys]\n  (loop [result '[]\n         xs xs\n         ys ys]\n    (if (or (empty? xs) (empty? ys))\n      result\n      (recur (conj result (first xs) (first ys))\n             (rest xs)\n             (rest ys)))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn inter [sq1 sq2]\r\n     (loop [one sq1\r\n            two sq2\r\n            acc []]\r\n       (if (or (empty? one)\r\n               (empty? two))\r\n         acc\r\n         (recur (rest one)\r\n                (rest two)\r\n                (conj (conj acc (first one)) (first two))))))","problem":39,"user":"4f82e14be4b033992c121c0c"},{"problem":39,"code":"(fn [a b] (flatten (into '() (zipmap a b))))","user":"5776385fe4b0979f89651632"},{"code":"(fn [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         l1 (count seq1)\n         l2 (count seq2)\n         lm (min l1 l2)\n         i 0\n         result []]\n    (if (= i lm)\n      result\n      (recur (rest s1) (rest s2) l1 l2 lm (inc i) (conj result (first s1) (first s2))))))","problem":39,"user":"5245fbbbe4b09dbe66b56183"},{"code":"#(loop [seq1 %\n        seq2 %2\n        result (empty %)]\n   (if (some empty? [seq1 seq2])\n     result\n     (recur (rest seq1) \n            (rest seq2) \n            (conj result (first seq1) (first seq2)))))","problem":39,"user":"4ff83003e4b0678c553fc396"},{"problem":39,"code":"#(loop [a %1 b %2 r '[]]\n      (let [aa (first a) bb (first b)]\n        (if (or (nil? aa) (nil? bb))\n          (seq r)\n          (recur (rest a) (rest b) (conj r aa bb)))))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":39,"code":"(fn [a b]\n    (mapcat #(vector %1 %2) a b))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":39,"code":"(fn rec [& lists]\n      (concat\n       (map first lists)\n       (when (every? #(> (count %) 1) lists)\n         (apply rec (map rest lists)))))","user":"5a062e07e4b01bb0ae8afdc5"},{"problem":39,"code":"(fn [a b]\n  (reverse\n  (loop [l1 a\n         l2 b\n         out '()]\n    (if (or (empty? l1) \n            (empty? l2))\n      out\n      (recur (rest l1) (rest l2) (cons (first l2) (cons (first l1) out)))))))","user":"594bd637e4b07ddc2dafae41"},{"problem":39,"code":"(fn pb39\n  [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (pb39 (rest xs) (rest ys)) (first ys) (first xs))))","user":"608135c8e4b0736b099e42d1"},{"problem":39,"code":"(fn [-s1 -s2]\n    (loop [s1 -s1 s2 -s2 new []]\n          (if (or (empty? s1) (empty? s2))\n                new\n                (recur (rest s1) (rest s2) (conj new (first s1) (first s2))))))","user":"57e3f709e4b0bfb2137f5aaf"},{"problem":39,"code":"#((fn rec \n  [coll1 coll2 res]\n  (let \n    [[x y] [(first coll1) (first coll2)]]\n    (if (and x y) (rec (rest coll1) (rest coll2) (concat res [x y])) res))\n  ) %1 %2 '())","user":"5550bcece4b00713264bd9ae"},{"code":"(fn intrlv[xs ys]\n  (->> (range (min (count xs) (count ys)))\n    (map #(vector (nth xs %) (nth ys %)))\n    flatten))","problem":39,"user":"50ef96a1e4b0bdaecbb47d9d"},{"problem":39,"code":"(fn [seq1 seq2]\n  \t(loop [[head1 & tail1] seq1\n           [head2 & tail2] seq2\n           acc '()]\n      \t(if (and head1 head2)\n          \t(recur tail1 tail2 (conj acc head1 head2))\n          \t(reverse acc))\n      \t)\n  \t)","user":"5703a557e4b08d47c97781f4"},{"code":"#(flatten (apply mapcat hash-map %&))","problem":39,"user":"513edd13e4b051389b345b39"},{"problem":39,"code":"mapcat list\n;; (fn [a b] (mapcat #(vec %&) a b))","user":"57b3b14ee4b0fbc9809a2787"},{"code":"(fn [xs ys]\n  (reverse (loop [xs xs ys ys ws '()]\n             (cond\n              (empty? xs) ws\n              (empty? ys) ws\n              :else (recur (rest xs)\n                      (rest ys)\n                      (list* (first ys) (first xs) ws))))))","problem":39,"user":"4dbe04b2535d020aff1edf56"},{"code":"#(loop [x1 %1, x2 %2, result []]\n    (if (or (empty? x1) (empty? x2))\n      result\n      (recur (rest x1)\n             (rest x2)\n             (conj (conj result (first x1)) (first x2)))))","problem":39,"user":"51d5af00e4b01da06753aa93"},{"code":"(fn [first second] (mapcat (fn [& more] more) first second))","problem":39,"user":"538b1644e4b0640c7a9a58c0"},{"problem":39,"code":"(fn my-interleave [a b]\n  (lazy-seq\n    (when (and (seq a) (seq b))\n      (cons (first a)\n            (cons (first b)\n                  (my-interleave (rest a) (rest b)))))))","user":"5446c89ce4b032a45b8693b5"},{"code":"(fn [c1 c2] (flatten (map (fn[a b] [a b]) c1 c2)))","problem":39,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn [a b]\n  (loop [left a right b result []]\n    (if (and (next left) (next right))\n      (recur (rest left) (rest right) (conj result (first left) (first right)))\n      (conj result (first left) (first right)))))","problem":39,"user":"528bba38e4b0239c8a67aea9"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (if (or (= (count s1) 0) (= (count s2) 0)) \n    '()\n    (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))))","user":"6065755ee4b069485764ddcc"},{"problem":39,"code":"(fn [col1 col2] (flatten (map list col1 col2)) )","user":"5f27f180e4b033932238a648"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten (map (fn [x y] [x y]) s1 s2)))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn [f s] (mapcat vector f s))","problem":39,"user":"521d709ae4b050d5da0427ef"},{"problem":39,"code":"#(loop [a %1 b %2 c '()]\n       (if (and (not-empty a) (not-empty b))\n         (recur (rest a) (rest b) (conj c (first a) (first b)))\n         (reverse c)))","user":"5f3567d6e4b0574c87022c44"},{"code":"(fn [s1 s2] (mapcat list s1 s2))","problem":39,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":39,"code":"mapcat (fn [& args]  vector args)","user":"5a96af3de4b0d174b936c76d"},{"code":"(fn  [x y]\n  (flatten\n   (map vector\n        x\n        y)))","problem":39,"user":"52d5bee0e4b09f7907dd1344"},{"problem":39,"code":"(fn inter [x y]\n    (when-not (or (nil? x) (nil? y))\n     (concat\n       (when-first [f x] [f])\n       (when-first [f y] [f])\n        (inter (next x) (next y)))\n     )\n  )","user":"58f9fde7e4b0438e51c2cf56"},{"problem":39,"code":"(fn my_interleave [a b] (if (and a b) (conj (conj (my_interleave (next a) (next b)) (first b)) (first a))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn ! [x,y] (if (or (empty? x) (empty? y)) '() (conj (!(rest x) (rest y)) (first y) (first x))))","problem":39,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"#(let [m (min (count %1)(count %2))]\n  (reduce into () \n    (map list\n    (reverse (take m %2)) (reverse (take m %1)))))","problem":39,"user":"4f4a34b2e4b0d56e7bb92c09"},{"problem":39,"code":"(fn inter [x y] \n  (if (or (empty? x) (empty? y))\n    '()\n        (cons (first x) (cons (first y) (inter (rest x) (rest y))))\n      \n    \n  )\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":39,"code":"#(loop [A %1 B %2 coll ()]\n  (if (or (empty? A) (empty? B))\n    (reverse coll)\n    (recur (rest A)\n           (rest B)\n           (conj coll (first A) (first B)))))","user":"5d98f616e4b0d3f9b434ad3c"},{"code":"(fn inter [x y]\n  (letfn [(inter2 [x y which]\n      (if (= which 0)\n          (if (or (empty? y) (empty? x)) '()\n          (concat (list (first x)) (inter2 (rest x) y 1)))\n          (if (empty? y) '()\n          (concat (list (first y)) (inter2 x (rest y) 0)))\n      )\n  )]\n  (inter2 x y 0)\n  )\n)","problem":39,"user":"50588af1e4b06522596eba7d"},{"problem":39,"code":"#(flatten (map (fn [f s] (conj [f] s)) %1 %2))","user":"5cf935f4e4b0b71b1d808a8f"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (mapv #(cons %1 [%2]) xs ys)))","user":"55b25970e4b0da326a65cf7e"},{"code":"(fn [s t] (loop [n (min (count s) (count t))\n                 a s\n                 b t\n                 result []]\n           (if (zero? n)\n            result\n            (recur (dec n) (rest a) (rest b) (conj result (first a) (first b))))))","problem":39,"user":"52865f41e4b0239c8a67ae15"},{"code":"(fn [x y]\n  (reduce\n    (fn [x y]\n      (concat x y))\n    (map vector x y)))","problem":39,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn [c1 c2](flatten (map (fn [a b] [a b]) c1 c2)))","problem":39,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n      nil\n      (cons (first a)\n            (cons (first b)\n                  (f (rest a) (rest b))))))","problem":39,"user":"4ea348ad535d7eef308072c4"},{"problem":39,"code":"(fn getInter\n   ([arr1 arr2] (getInter (vec (reverse arr1)) (vec (reverse arr2)) '()))\n   ([arr1 arr2 res]\n    (if (or (empty? arr1) (empty? arr2))\n      (reverse res)\n      (getInter (pop arr1) (pop arr2) (conj res (peek arr1) (peek arr2)))\n      )\n    )\n   )","user":"5b7f381ae4b047b03b203769"},{"code":"(fn intrlv [sq1 sq2]\n   (let [[e1 & rst1] sq1\n         [e2 & rst2] sq2]\n     (when (and e1 e2)\n       (cons e1 (cons e2 (intrlv rst1 rst2))))))","problem":39,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":39,"code":"(fn flex [x y] (if (or \n               (= (count x) 1) \n               (= (count y) 1)\n               )\n            (list (first x) (first y))\n            (concat (list (first x) (first y))\n                    (flex (rest x) (rest y)))))","user":"59129074e4b0163c97b36ef1"},{"code":"(comp flatten (partial map #(list %1 %2)))","problem":39,"user":"534dd600e4b084c2834f4aaa"},{"code":"(fn [x y] (loop [xcnt 0 ycnt 0 result []] (cond (= xcnt (count x)) result (= ycnt (count y)) result true (recur (inc xcnt) (inc ycnt) (conj result (nth x xcnt) (nth y ycnt))))))","problem":39,"user":"4e975bce535dbda64a6f6b53"},{"code":"(fn [lst & lsts]\n  \t(if (some empty? lsts)\n      lst\n      (recur \n     \t(apply conj lst (map first lsts)) \n     \t(map rest lsts))\n      )\n   \t)[]","problem":39,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [a b] (letfn [(stump [a b] (if (or (zero? (count a)) (zero? (count b))) () (cons (first a) (cons (first b) (stump (rest a) (rest b))))))] (stump a b)))","problem":39,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"#(loop [f %1 s %2 c ()]\n  (if (or\n    (empty? f)\n    (empty? s))\n      (reverse c)\n      (recur (rest f) (rest s) \n        (conj c (first f) (first s)))))","problem":39,"user":"4ea76541535d7eef308072eb"},{"problem":39,"code":"(fn inter [xs ys]\n  (when (and (not (empty? xs)) (not (empty? ys)))\n  \t(cons (first xs) (cons (first ys) (inter (rest xs) (rest ys))))))","user":"58aa8083e4b01a0c0b232985"},{"problem":39,"code":"(fn [& ls] (apply concat (apply (partial map (fn [& xs] xs)) ls)))","user":"5943abb6e4b060784b3b792b"},{"code":"#(reduce concat (map list %1 %2))","problem":39,"user":"4ee77f15535d93acb0a66868"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         acc []\n         flip true]\n    (if (or (empty? a) (and flip (empty? b)))\n      acc\n      (recur b (rest a) (conj acc (first a))\n                              (not flip)))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"code":"#(vec (flatten (reverse (zipmap %1 %2))))","problem":39,"user":"5034a14de4b062bc5d7ae165"},{"problem":39,"code":"(fn [list1 list2]\n  (flatten\n   (for [x (range 0 (min (count list1) (count list2)))]\n     [(nth list1 x) (nth list2 x)])))","user":"5da4b152e4b000c986472bf6"},{"problem":39,"code":"(fn [a b]\n    (let [len (min (count a) (count b))]\n        (letfn [(n-conj [lst a b n]\n                    (if (< n len)\n                        (n-conj (conj lst (nth a n) (nth b n)) a b (inc n))\n                        lst))]\n            (n-conj [] a b 0))))","user":"566812f0e4b04acd4f672de1"},{"problem":39,"code":"(fn [fst snd]\n   (loop [resu '()\n          ifst fst\n          isnd snd]\n     (let [i (first ifst)\n           j (first isnd)]\n       (if (and i j)\n         (recur (concat resu [i j])\n                (rest ifst)\n                (rest isnd))\n         resu))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":39,"code":"(fn myinterleave [lsta lstb]\n  (let [acc nil]\n    (loop [lsta lsta\n           lstb lstb\n           acc nil]\n      (cond\n        (or (empty? lsta) (empty? lstb)) (reverse acc)\n        :else\n        (recur (rest lsta)(rest lstb)(conj acc (first lsta)(first lstb)))))))","user":"534f8c9ae4b084c2834f4acd"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (map list xs ys)))","user":"5512cd55e4b055c2f668d4ba"},{"problem":39,"code":"(fn intl\n  ([col1 col2] (intl col1 col2 []))\n  ([col1 col2 acc] (if (or (empty? col1)(empty? col2))\n               acc\n               (let [remaining1 (rest col1)\n                     remaining2 (rest col2)\n                     result (concat acc [(first col1)] [(first col2)])]\n                 (recur remaining1 remaining2 result)))))","user":"56326e03e4b0bfe05bf117a4"},{"code":"(fn my-interleave [xs ys]\n  (let [[x & xs] xs [y & ys] ys]   \n    (if (and (not (nil? x)) (not (nil? y)))\n      (cons x (cons y (my-interleave xs ys)))\n    )))","problem":39,"user":"4fc34787e4b081705acca33e"},{"problem":39,"code":"(fn intlv [n m] (flatten (map #(list %1 %2) n m)))","user":"56278266e4b00e49c7cb47d3"},{"problem":39,"code":"#(loop [l1 %1 l2 %2 lr []]\n   (if (or (empty? l1) (empty? l2))\n     lr\n     (recur (rest l1) (rest l2) (conj (conj lr (first l1)) (first l2))\n            ))\n   \n   )","user":"52503747e4b0541d1855b828"},{"problem":39,"code":"(fn foo [xs ys]\n  (if \n    (and (> (count ys) 0) (> (count xs) 0))\n    (cons (first xs)\n          (cons (first ys)\n                (foo (rest xs) (rest ys))))))","user":"54f904c2e4b01ecee9d88832"},{"problem":39,"code":"(fn interleave1\n  [seq1 seq2]\n  (loop [result [] s1 seq1 s2 seq2]\n    (if (or (empty? s1) (empty? s2))\n      (seq result)\n      (recur (conj result (first s1) (first s2)) (rest s1) (rest s2)))))","user":"5746cb28e4b009280f9f2b68"},{"code":"(fn foo [xs1 xs2]\n   (when (and (seq xs1) (seq xs2))\n     (into (foo (rest xs1) (rest xs2)) [(first xs2) (first xs1)])))","problem":39,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":39,"code":"(fn func [s1 s2]\n    \n    (if (or (nil? (first s1)) (nil? (first s2)) )\n      '() \n      (cons (first s1) \n            (cons (first s2) (func (rest s1) (rest s2)  )))))","user":"5ab575f8e4b073f17744263d"},{"problem":39,"code":"#(loop [l1 %1\n        l2 %2\n        res []]\n   (if (or (empty? l1) (empty? l2))\n       res\n       (recur (rest l1) (rest l2) (conj res (first l1) (first l2)))))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":39,"code":"(fn [& colls] (flatten (apply map (fn [& args] args) colls)))","user":"545b486ae4b01be26fd7464f"},{"problem":39,"code":"(fn [s1 s2] (apply concat (map #(conj [] %1 %2) s1 s2)))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":39,"code":"(fn f [ & x] (let [y (map seq x)] (when (every? identity y) (concat (map first y) (apply f (map rest x))))))","user":"5463fbbde4b01be26fd746ca"},{"problem":39,"code":"#(loop [x %1\n        y %2\n        z []]\n   (if (and (seq x) (seq y))\n     (recur\n      (rest x)\n      (rest y)\n      (conj z (first x) (first y)))\n     z))","user":"57942207e4b0e215f87e8469"},{"code":"(fn inlv [x1 x2]\n   (if (and (first x1) (first x2))\n     (concat [(first x1) (first x2)] (inlv (rest x1) (rest x2) ))))","problem":39,"user":"4fba0877e4b081705acca2dd"},{"code":"(fn f [x y](\n  if (nil? (first x))\n  ()\n\t(\n\tif (nil? (first y))\n\t ()\n\t(concat (list (first x)) (list (first y)) (f (rest x) (rest y))\n\t)\n\t)\n  ) \n  )","problem":39,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"(fn [& lists]\r\n  (let [m (apply min (map #(count %) lists))]\r\n    (loop [c (- m 1) result '()]\r\n      (if (< c 0) result\r\n        (recur (- c 1)\r\n          (cons (nth (first lists) c)\r\n            (cons (nth (second lists) c)\r\n              result)))))))","problem":39,"user":"4dee4a9c535d08e6dec9fe11"},{"problem":39,"code":"(fn [ls1 ls2] \n  (loop [ls1 ls1\n         ls2 ls2\n         res []] \n    (if (or (empty? ls1) \n            (empty? ls2))\n      res\n      (recur\n       (rest ls1)\n       (rest ls2)\n       (conj res \n             (first ls1) \n             (first ls2))))))","user":"5d125d63e4b02c15ef021999"},{"code":"#(loop [i (dec (min (count %1) (count %2))) res '() ] (if (< i 0) res (recur (dec i) (conj res (%2 i) (%1 i)))) )","problem":39,"user":"52570aeae4b0541d1855ba42"},{"problem":39,"code":"(fn\n   [c1 c2]\n   (reduce\n     (fn [result c] (apply conj result c))\n     [] (map #(seq [%1 %2]) c1 c2)))","user":"60631c2ee4b069485764ddbd"},{"problem":39,"code":"(fn interl [xs ys]\n  (if (not (or (empty? xs)\n               (empty? ys)))\n    (conj (interl (rest xs) (rest ys))\n          (first ys)\n          (first xs))))","user":"55c4e48be4b0e31453f649a7"},{"problem":39,"code":"(fn[x y] (mapcat #(conj [] %1 %2) x y))","user":"4fabbd3ee4b081705acca21e"},{"problem":39,"code":"(fn [c1 c2]\n  (letfn [(reduce-col [acc col1 col2]\n                     (if (and (> (count col1) 0) (> (count col2) 0))\n                       (recur (conj acc (first col1) (first col2)) (rest col1) (rest col2))\n                       acc))]\n   (reduce-col [] c1 c2)))","user":"587c48cce4b01531a375eb16"},{"problem":39,"code":"(fn [l1 l2] (mapcat #(conj [] %1 %2) l1 l2))","user":"548f3ee4e4b0e286459a1237"},{"code":"(\n\t fn inter [x y]\n\t (\n\t  if (= (min (count x) (count y)) 1)\n\t   (list (first x) (first y))\n\t   (concat (list (first x) (first y)) (inter (rest x) (rest y)) )\n\t )\n\t)","problem":39,"user":"526ef710e4b03e8d9a4a7344"},{"problem":39,"code":"(fn interleaveSeq\n  [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (cons \n     (first x)(cons (first y)\n                      (interleaveSeq (rest x) (rest y))))))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":39,"code":"(fn pepe [xs1 xs2]\n  ((fn [s1 s2 even acc]\n     (cond\n      (empty? s1) (if even acc (conj acc (first s2)))\n      (empty? s2) (if even acc (conj acc (first s1)))\n      :else (recur\n         s2 \n         (rest s1) \n         (not even) \n         (conj acc (first s1))\n        )\n      )       \n    ) xs1 xs2 true [])\n  )","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":39,"code":"(fn ! [x y] \n       (if (< 0 (min (count x) (count y))) \n       (concat (list (first x) (first y)) (! (rest x)(rest y)))))","user":"56066e82e4b08b23635d3173"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [l1 coll1 l2 coll2 res []]\n    (if (or (empty? l1) (empty? l2))\n      res\n      (recur (rest l1) (rest l2) (conj res (first l1) (first l2))))))","user":"5e909685e4b0cb016954634d"},{"code":"(fn [s1 s2]\n  (loop [s1 s1, s2 s2, result []]\n    (if\n      (or (empty? s1) (empty? s2))\n      result\n      (recur\n        (rest s1)\n        (rest s2)\n        (apply conj result [(first s1) (first s2)])))))","problem":39,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":39,"code":"(fn f [[a & x] [b & y]]\n  (and a b (into [a b]\n                 (f x y))))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n\t(mapcat (fn[x y] [x y]) coll1 coll2)\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":39,"code":"(fn this [x y]\n  (cond \n    (empty? x) x\n    (empty? y) y\n    :else (concat [(first x) (first y)] (this (rest x) (rest y)))))","user":"5716d585e4b07c98581c3b03"},{"code":"#(loop [a % b %2 c []] \n   (if (or (nil? a) (nil? b))\n     c \n     (recur (next a) (next b) (conj c (first a) (first b)))))","problem":39,"user":"517bc969e4b07ef0e56148d0"},{"code":"(fn il [a b]\n  (when (and (seq a) (seq b))\n    (cons (first a)\n          (cons (first b)\n                (il (rest a) (rest b))))))","problem":39,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn [a b]\n       (flatten (map (fn [x y] [x y]) a b)))","problem":39,"user":"52a88c4de4b0c58976d9ac30"},{"problem":39,"code":"#(flatten\n        (map list % %2))","user":"54b45938e4b05787c3b1638f"},{"code":"(fn [a b] (flatten (map (fn [aa bb] [aa bb]) a b)))","problem":39,"user":"51aa56c4e4b04e3dc0c27b27"},{"problem":39,"code":"(fn [v1 v2]\n   (loop [source {:v1 v1 :v2 v2} acc '()]\n     (if (or (empty? (:v1 source)) (empty? (:v2 source)))\n       acc\n       (recur {:v1 (next (:v1 source)) :v2 (next (:v2 source))} (concat acc [(first (:v1 source)) (first (:v2 source))])))))","user":"56798d83e4b05957ce8c618b"},{"problem":39,"code":"(fn [a b]\n   (if (<= (count a) (count b))\n     (flatten\n      (map-indexed\n       (fn [i e] ()\n         [e (get b i)]) a))\n     (flatten\n      (map-indexed\n       (fn [i e] ()\n         [e (get b i)]) (take (count b) a)))))","user":"59c87d49e4b0a024fb6ae55b"},{"problem":39,"code":"(fn func [ c1 c2] (lazy-seq (let [s1 (seq c1) s2 (seq c2)] ( when (and s1 s2) (cons (first s1) (cons (first s2) (func (rest s1) (rest s2))))))))","user":"55d44dd6e4b0e31453f64a75"},{"problem":39,"code":"(fn interleave2 [xs ys]\n    (when-not (or (empty? xs) (empty? ys))\n      (cons (first xs) (cons (first ys) (interleave2 (rest xs) (rest ys))))))","user":"57027310e4b08d47c97781e2"},{"code":"(fn interleave' [a b]\n    (let [a' (seq a) b' (seq b)]\n    (lazy-seq (when (and a' b')\n      (cons (first a') (cons (first b')\n                            (interleave' (rest a') (rest b')))\n      )))))","problem":39,"user":"506b0a9ce4b0a2a5463de380"},{"problem":39,"code":"(fn [s1 s2] (reduce (fn [result addend] (concat result addend)) () (map #(list %1 %2) s1 s2) ))","user":"54e4a1dce4b024c67c0cf7e8"},{"problem":39,"code":"#(reverse (loop [l1 ((comp reverse reverse) %1) l2 ((comp reverse reverse) %2) l3 '()] (if (or (empty? l1) (empty? l2)) l3 (recur (pop l1) (pop l2) (conj l3 (peek l1) (peek l2))))))","user":"56b3146ae4b0982f16b37e0f"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (loop\n    [lsta lst1\n     lstb lst2\n     res ()]\n\n    (if (or (empty? lsta) (empty? lstb))\n      (reverse res)\n      (recur (rest lsta) (rest lstb) (cons (first lstb) (cons (first lsta) res))))))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [s1 s2] \n  (reduce (fn [a s] (into a s)) [] \n          (map #(vector % %2) s1 s2)))","problem":39,"user":"534e4a29e4b084c2834f4ab0"},{"problem":39,"code":"#(flatten (for [x (map vector %1 %2)] x))","user":"55efc44ee4b066087aa9453e"},{"problem":39,"code":"(fn [a b]\n  (reduce concat (mapv (fn [a b] [a b]) a b)))","user":"564583f0e4b0284900eef607"},{"problem":39,"code":"#(loop [c1 % c2 %2 c []] (if-not (or (empty? c1) (empty? c2)) (recur (rest c1) (rest c2) (conj c (first c1) (first c2))) c))","user":"53f78944e4b0de5c41848561"},{"problem":39,"code":"(fn inter [[a & as] [b & bs]]\n  (if (or (empty? as) (empty? bs))\n    (list a b)\n    (cons a (cons b (inter as bs)))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn foo [la lb]\n  (cond (or (nil? la) (nil? lb)) '()\n        :else (cons (first la) \n              (cons (first lb) (foo (next la) (next lb)) ))))","problem":39,"user":"517a7f20e4b01aacecbecbee"},{"code":"(fn inter [c1 c2] (when (and (first c1) (first c2))\n                    (cons (first c1) (cons (first c2)\n                                           (inter (rest c1) (rest c2))))))","problem":39,"user":"527ba29de4b03e8d9a4a7594"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b out `()]\n    (if (or (empty? a) (empty? b))\n      out\n      (recur\n       (rest a)\n       (rest b)\n       (concat out [(first a) (first b)])))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":39,"code":"(fn [x1 x2]\n  (loop [out () x1 x1 x2 x2]\n    (if (or (empty? x1)\n                (empty? x2))\n      (reverse out)\n      (recur (conj out (first x1) (first x2)) (rest x1) (rest x2)))))","user":"514f0a28e4b019235f6c059a"},{"problem":39,"code":"(fn [seq1 seq2]\n  (let [count1 (count seq1) count2 (count seq2)]\n    (let [base (if (< count1 count2) count1 count2)]\n      (reduce #(concat %1 [(get seq1 %2) (get seq2 %2)]) [] (range 0 base)))))","user":"5bf313e8e4b0a6d31fed2188"},{"code":"(fn il [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (cons (first x) (cons (first y)\n                      (il (rest x) (rest y))))))","problem":39,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [a b] (flatten (map (fn [x y] (list x y)) a b)))","problem":39,"user":"4dea9406535d08e6dec9fe01"},{"code":"(fn [& a] (apply mapcat list a))","problem":39,"user":"4f382eb7e4b0e243712b1ed9"},{"problem":39,"code":"(fn il [xs ys]\n  (if (or (empty? xs) (empty? ys)) nil\n    (let [[x & rxs] xs [y & rys] ys] \n     (cons x (cons y (il rxs rys)))\n     \n     )))","user":"6045582fe4b02d28681c77b6"},{"problem":39,"code":"(fn [xs ys]\n  (loop [[x & xs] xs [y & ys] ys res []]\n    (if (or (empty? xs) (empty? ys))\n      (conj res x y)\n      (recur xs ys (conj res x y)))))","user":"51aa2ad6e4b04e3dc0c27b20"},{"problem":39,"code":"(fn [x y]\n   (filter\n    (complement nil?)\n    (loop [xseq x\n           yseq y\n           coll []]\n      (let [xlet (first xseq)\n            ylet (first yseq)]\n        (if (or (nil? xlet) (nil? ylet))\n          coll\n          (recur (rest xseq) (rest yseq) (conj coll xlet ylet)))))))","user":"5f122f93e4b091ba50b4dbae"},{"problem":39,"code":"(fn il [[s1 & s1s] [s2 & s2s]] (if (or (empty? s1s) (empty? s2s)) (list s1 s2) (cons s1 (cons s2 (il s1s s2s)))))","user":"598760aae4b021a7a535fea7"},{"code":"#(apply concat (map (fn [a b] [a b]) %1 %2))","problem":39,"user":"4e6a6be7535d8ccf87e9fee1"},{"code":"#(loop [ r [] x %1 y %2 ]\n   (let [a (first x) b (first y)]\n   (if (or (= nil a )(= nil b))\n     r\n     (recur  (conj (conj r a ) b) (rest x) (rest y)))))","problem":39,"user":"518c5236e4b087e178201de0"},{"problem":39,"code":";; #(flatten (map (fn [seq1 seq2] [seq1 seq2]) %1 %2))\n\n;; #(mapcat (fn [seq1 seq2] [seq1 seq2]) %1 %2)\n\nmapcat vector","user":"603e9cb6e4b0d5df2af22317"},{"code":"(fn [a b]\n   (loop [a a b b acc []]\n    (if (or (empty? a) (empty? b))\n     acc\n     (recur (rest a) (rest b) (conj acc (first a) (first b))))))","problem":39,"user":"51b6f4f9e4b04fc00976d479"},{"problem":39,"code":"(fn interleave' [xs ys]\n  (if (or (empty? xs) (empty? ys))\n  \tnil\n    (list* (first xs) (first ys)\n           (interleave' (rest xs) (rest ys)))))","user":"551ee974e4b08d5046aa8a50"},{"problem":39,"code":"#(flatten (map (partial conj '()) %2 %1))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [lst1 lst2]\n  (loop [lst1,lst1 lst2,lst2 res,[]]\n    (if (or (empty? lst1) (empty? lst2)) res\n     (recur (rest lst1) (rest lst2) (conj res (first lst1) (first lst2))))))","problem":39,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [seq1 seq2]\n  ( (fn my-inter [s1 s2]\n      (if (or (= 0 (count s1)) (= 0 (count s2)))\n        '()\n        (conj (my-inter (rest s1) (rest s2)) (first s2) (first s1)))\n      ) seq1 seq2)\n  )","problem":39,"user":"511d4a52e4b022853b0e07a1"},{"problem":39,"code":"#(flatten (map (fn [a b]\n                [a b]) %1 %2))","user":"55f85b93e4b03cbcff9738ae"},{"problem":39,"code":"(fn interleaf\n                 ([col1 col2] (interleaf col1 col2 []))\n                 ([[el1 & rest1] [el2 & rest2] out]\n                  (if (and (not (nil? el1)) (not (nil? el2)))\n                    (interleaf rest1 rest2 (concat out [el1 el2]))\n                    out\n                    )\n                  )\n)","user":"600c1c72e4b074f607df6692"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    '()\n    (let [f1 (first coll1)\n          f2 (first coll2)]\n      (concat (list f1 f2) (my-interleave (rest coll1) (rest coll2))))))","user":"544b9df2e4b0e39780006968"},{"problem":39,"code":"(fn hi [s1 s2]\n  (if (or (= (count s1) 0) (= (count s2) 0))\n    () (cons (first s1) (cons (first s2) (hi (rest s1) (rest s2))))))","user":"59ab00fbe4b08cbb53654d8e"},{"code":"(fn interseq\n  [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 result []]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (conj result (first s1) (first s2))))))","problem":39,"user":"5046f909e4b03b02161376b5"},{"code":"(comp  flatten reverse zipmap)","problem":39,"user":"50f69a3ce4b0035e89151844"},{"problem":39,"code":"#(loop [c1 %1 c2 %2 c []] \r\n  (if (or (empty? c1) (empty? c2)) c\r\n    (recur (rest c1) (rest c2) (conj c (first c1) (first c2)))\r\n  )\r\n)","user":"52b434c9e4b0c58976d9ad1c"},{"problem":39,"code":"(fn -interleave\n  [xs ys]\n  (if\n    (or (empty? xs) (empty? ys)) nil\n    (cons (first xs) (cons (first ys) (-interleave (rest xs) (rest ys))))))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":39,"code":"(fn merge-li\n  [x y]\n  (seq (reduce (fn [x y] (into x y)) [] (map #(vector %1 %2) x y)))\n  )","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":39,"code":"#(reduce concat(reverse(zipmap %1 %2)))","user":"59395adfe4b02506e01a29fb"},{"code":"(fn f [x y] (if (or (empty? x) (empty? y))\n  []\n  (concat [(first x) (first y)] (f (rest x) (rest y)))))","problem":39,"user":"503de5aae4b06c4e0e1fa259"},{"code":"(fn [x y]\n  (let [c (max (count x) (count y))\n        xx (take c x)\n        yy (take c y)]\n    (flatten [(map (fn [a b] (list a b)) xx yy)])\n    ))","problem":39,"user":"50df6dd0e4b061dbdced7225"},{"code":"(fn [a b]\n  (loop [a a\n         b b\n         c '()]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) \n             (rest b) \n             (concat c (list (first a) (first b)))))))","problem":39,"user":"50cf66ffe4b0e61f11ddcd92"},{"code":"(fn [A B]\n  (letfn [(i2 [L1 L2 acc] \n  \t    (cond\n              (or (empty? L1) (empty? L2))\n        \t      acc\n              :else\n\t\t\t \t(recur (rest L1) (rest L2) (conj acc (first L1) (first L2)))\n             )\n              )]\n\t(i2 A B [])\n    )\n)","problem":39,"user":"50293245e4b08353e5d459cf"},{"problem":39,"code":"(fn il [x y]\n  (when (and (not (empty? x)) (not (empty? y)))\n    (cons (first x) \n          (cons (first y) (il (rest x) (rest y))\n                )\n          )\n    )\n  )","user":"55a21f1ce4b0acc240e3151f"},{"problem":39,"code":"(fn my-interleave [a b]\n  (let [as (seq a) bs (seq b)]\n    (when (and as bs)\n      (cons (first as)\n            (cons (first bs)\n                  (my-interleave (rest as) (rest bs)))))))","user":"5b322858e4b025bcb146f312"},{"problem":39,"code":"(fn [a b]\n  (loop [a' a\n         b' b\n         result []]\n    (if (or (empty? a') (empty? b'))\n      result\n      (recur (rest a') (rest b') (conj result (first a') (first b'))))))","user":"5ac67b47e4b0e27600da776e"},{"problem":39,"code":"(fn xinterleave [a b]\n  (loop [ cnt (min (count a) (count b)) cpa a cpb b acc '() ]\n    (if (= cnt 0)\n      (reverse acc)\n      (recur (- cnt 1)\n             (rest cpa)\n             (rest cpb)\n             (conj acc (first cpa) (first cpb) )))))","user":"564cc055e4b0284900eef676"},{"problem":39,"code":"(fn firsts [seq1 seq2 & {:keys [accum] :or {accum []}}] \n        (if (or (empty? seq1) (empty? seq2))\n            accum\n            (firsts (rest seq1) (rest seq2) :accum \n                (conj (conj accum (first seq1)) (first seq2))\n            )\n        )\n    )","user":"5702c8eae4b08d47c97781e6"},{"code":"(fn [a b]\n  (flatten (map #(list (nth a %) (nth b %))\n    (range (min (count a) (count b))))))","problem":39,"user":"4fd65b2be4b0d4de60cee37e"},{"problem":39,"code":"(fn [c1 c2]\n  (apply concat (map #(list %1 %2) c1 c2)))","user":"542c22bde4b0dad94371f29e"},{"problem":39,"code":"(fn\n  [a b]\n  (let [limit (min (count a) (count b))]\n    (reduce\n     #(into %1 %2)\n     []\n     (map vector (take limit a) (take limit b)))))","user":"5d90190ce4b0915913b1d3f7"},{"problem":39,"code":"(fn [& data]\n  (flatten\n   (map\n    (fn [n] (map #(nth % n) data))\n    (->> (map count data)\n         (reduce min ,,,)\n         range ,,,))))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn [l1 l2] (loop [c1 l1 c2 l2 res []]\n              (cond (or (empty? c1) (empty? c2)) res \n                    :else (recur (rest c1) (rest c2) (conj (conj res (first c1)) (first c2))))))","problem":39,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [a b] (mapcat #(list (get a %) (get b %)) (range (min (count a) (count b)))))","problem":39,"user":"524feb3fe4b0541d1855b81f"},{"code":"(fn myinterleave [x y]\n  (\n   (fn inner [x y acc]\n     (if\n       (or (empty? x) (empty? y)) \n       (reverse acc)\n       (inner (rest x) (rest y) (conj acc (first x) (first y)))\n       )\n     )\n   x y '()))","problem":39,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":39,"code":"(fn [lst1 lst2]\n  (loop [col1 lst1 col2 lst2 res '()] \n    (if (or (empty? col1) (empty? col2)) \n      (reverse res) \n      (recur (rest col1) (rest col2) (conj res (first col1) (first col2))))))","user":"5f558a76e4b0a0bc16850a84"},{"code":"(fn [s t]\r\n  (mapcat #(list %1 %2) s t))","problem":39,"user":"4f8aa1c1e4b02e764a0a516e"},{"code":"(fn f [x y] (if (or (= x []) (= y [])) []\n    (cons (first x) (cons (first y) (f (rest x) (rest y))))))","problem":39,"user":"53500869e4b084c2834f4ad3"},{"problem":39,"code":"(fn f [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n\t(concat [(first xs) (first ys)] (f (rest xs) (rest ys)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":39,"code":"(fn my-interleave [x y]\n  ((fn inter [x y z]\n     (if (or (empty? x) (empty? y)) \n       z\n       (recur (next x) (next y) (concat z (list (first x) (first y))))))\n   x y ()))","user":"5688a01be4b0dcc4269f406d"},{"problem":39,"code":"#(loop [l1 %1 l2 %2 l3 '() ]\n  (cond \n    (or (empty? l1) (empty? l2)) (reverse l3)\n    :else (recur (rest l1) (rest l2) (concat [(first l2) (first l1)] l3))))","user":"55c2367ee4b0e31453f64978"},{"problem":39,"code":"(fn aaa [x y]\n \t(if (or (empty? x) (empty? y))\n      nil\n      (remove nil? (flatten( vector (first x) (first y) (aaa (rest x) (rest y) )))))\n  )","user":"598588f2e4b021a7a535fe65"},{"code":"(fn [a b] (let [n (min (count a) (count b))] (reduce concat (map #(list (nth a %) (nth b %)) (range n)))))","problem":39,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":39,"code":"(fn [a b]\n  (seq\n   (flatten\n    (map vector a b)\n   )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":39,"code":"(fn [seq1 seq2] (loop [s1 seq1 s2 seq2 interleaved []] (if (or (empty? s1) (empty? s2)) interleaved (recur (rest s1) (rest s2) (conj (conj interleaved (first s1)) (first s2)) ))))","user":"53b952eee4b047364c0444e6"},{"problem":39,"code":"(fn\n  [x y]\n  (loop [[firstx & restx] x\n        [firsty & resty] y\n        ret '()]\n    (if (or (nil? firstx) (nil? firsty))\n      (reverse ret)\n      (recur restx resty (conj ret firstx firsty)))\n    ))","user":"58a216e8e4b02bd94d917ed1"},{"code":"(fn my-interleave\n  [xs ys]\n  (loop [[x & x-rest] xs [y & y-rest] ys acc []]\n    (cond\n      (or (nil? x-rest) (nil? y-rest)) (conj acc x y)\n      :else (recur x-rest y-rest (conj acc x y)))))","problem":39,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"mapcat (fn [& xs] (vec xs))","problem":39,"user":"509ecefde4b08df8156e9e35"},{"problem":39,"code":"#(loop [l [] m % n %2]\n   (if (or (= (count m) 1) (= (count n) 1)) (concat l [(first m) (first n)]) \n     (recur (concat l [(first m) (first n)]) (rest m) (rest n))))","user":"55c3c1b0e4b0e31453f6498c"},{"problem":39,"code":"(fn [s1 s2]\n(loop [sq1 s1 sq2 s2 result  []]\n    (if (some empty? [sq1 sq2])\n       result\n       (recur (rest sq1) (rest sq2) (concat result (remove nil? [(first sq1) (first sq2)])))\n))\n)","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [a b] (flatten(for [x (range (min (count a) (count b)))] [(nth a x) (nth b x)])))","problem":39,"user":"52c52ef2e4b0c2d177d620ef"},{"problem":39,"code":"(fn [first_list second_list]\n  (loop [result []\n         left_list first_list\n         right_list second_list]\n    (if(or (empty? left_list) (empty? right_list))\n      result\n      (recur (conj (conj result (first left_list)) (first right_list)) (rest left_list) (rest right_list)))))","user":"53f50c03e4b0db01ade6f9ca"},{"problem":39,"code":"(fn [xs, ys] \n             (flatten (map #(list %1 %2) xs ys)))","user":"55edc088e4b0121d4835fde0"},{"code":"#(loop [a %1 b %2 res []] \n   (if \n     (or \n      (= 0 (count a)) (= 0 (count b)))\n     res\n     (recur (rest a) (rest b) (conj res (first a) (first b)))))","problem":39,"user":"52a5f1e6e4b0c58976d9abf4"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [col1 col1\n         col2 col2\n         result '()]\n    (if (or (empty? col1)\n            (empty? col2))\n      (reverse result)\n    \t(recur (rest col1)\n           (rest col2)\n           (conj result (first col1) (first col2))))))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":39,"code":"#(let [g (min (count %1) (count %2)) ]\n             (loop [i 0 r []]\n               (if (= g i)\n                 r\n                 (recur (inc i) (conj r (nth %1 i) (nth %2 i)))\n                 )\n               )\n             )","user":"584aa803e4b089d5ab817ee9"},{"problem":39,"code":"(fn [i u] (loop [li '() x 0]\n             (if (= x (min (count i) (count u)))\n               (reverse li)\n               (recur (conj li (nth i x) (nth u x)) (inc x)))))","user":"5f6b35c3e4b02876ed9fd04d"},{"code":"(fn [s1 s2] (mapcat (fn [a b] [a b]) s1 s2))","problem":39,"user":"4db3393e535df7e46ed9b6cc"},{"problem":39,"code":"(fn [a b]\n  (loop [x a y b r []]\n  \t(if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (conj r (first x) (first y)))\n    )\n  )\n)","user":"546e0c24e4b00cfc9eacc198"},{"problem":39,"code":"#(reduce (partial apply conj) [] (map list %1 %2))","user":"54d6c80ce4b0a52adc2e2020"},{"problem":39,"code":"(fn [arg1 arg2]\n  (loop [a arg1\n         b arg2\n         r (vector)]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (conj (conj r (first a)) (first b))))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [s1 s2]\n  (loop [rv [] l1 s1 l2 s2]\n    (if (or (empty? l1) (empty? l2))\n      rv\n      (recur (concat rv [(first l1) (first l2)]) (rest l1) (rest l2)))))","problem":39,"user":"527ba695e4b03e8d9a4a7596"},{"problem":39,"code":"(fn inter [l1 l2]\n  (cond\n   (empty? l1) []\n   (empty? l2) []\n   true (cons (first l1) (cons (first l2) (inter (rest l1) (rest l2))))))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":39,"code":"#(loop [e (map-indexed vector %1), ret []]\n   (let [[i x] (first e)]\n     (if (or (empty? e) (= i (count %2)))\n       ret\n       (recur (rest e) (conj ret x (%2 i))))))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn my-interleave\r\n  [xs ys]\r\n  (let [s1 (seq xs) s2 (seq ys)]\r\n       (when (and s1 s2)\r\n         (concat (list (first xs) (first ys)) (my-interleave (rest xs) (rest ys))))))","problem":39,"user":"4fee04a0e4b0678c553fc308"},{"problem":39,"code":"(fn inter [f s]\n  (if (or (empty? f) (empty? s))\n    []\n    (concat [(first f)(first s)] (inter (rest f)(rest s)) )\n    )\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":39,"code":"#(loop [col1 %1 col2 %2 acc []]\n   (if (or (empty? col1) (empty? col2))\n     acc\n     (recur (rest col1) (rest col2) (conj acc (first col1) (first col2)))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn f [& seqs]\n    (loop [acc ()\n           seqs seqs]\n      (if (some empty? seqs) acc\n          (recur (concat acc (map first seqs))\n                 (map rest seqs)))))","problem":39,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":39,"code":"(fn [a b] (loop [in-one a in-two b out []]\n             (if (or (empty? in-one) (empty? in-two))\n               out\n               (recur (rest in-one) (rest in-two) (conj out (first in-one) (first in-two))))))","user":"5fc51d88e4b0ad564c76812a"},{"code":"(fn weave [a b]\n  (if (or (empty? a) (empty? b)) \n    (list)\n    (concat \n      (list (first a) (first b)) \n      (weave (rest a) (rest b)))))","problem":39,"user":"4ecdb0bb535d23f036227709"},{"problem":39,"code":"(fn f [a b]\n                     (cond\n                       (empty? a) ()\n                       (empty? b) ()\n                       :else (cons (first a) (cons (first b) (f (rest a) (rest b))))))","user":"55274467e4b0ffed3738f92b"},{"code":"(fn [& ls]\n  (letfn [(interlv [& ls]\n            (if (some identity (map empty? ls))\n                '()\n                (concat (map first ls) (apply interlv (map rest ls)))))]\n    (apply interlv ls)))","problem":39,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":39,"code":"(fn inty [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (concat (list (first x) (first y)) (inty (rest x) (rest y)))))","user":"59708e38e4b01722bebd4c65"},{"problem":39,"code":"(fn inter\n  [a b]\n  (loop [a a\n         b b\n         result ()]\n    (cond\n      (empty? a) (reverse result)\n      (empty? b) (reverse result)\n      :else (recur (rest a) (rest b)  (cons (first b) (cons (first a) result))))))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [& lists] (apply mapcat list lists))","problem":39,"user":"508a2c2fe4b016a2107004a1"},{"code":"(fn inter [coll1 coll2] (when (and (first coll1) (first coll2)) (cons (first coll1) (cons (first coll2) (inter (rest coll1) (rest coll2))))))","problem":39,"user":"5225666be4b01819a2de4300"},{"problem":39,"code":"(fn [i1 i2]\n    (reverse\n      (loop [in1 i1\n             in2 i2\n             o []]\n        (if (or (empty? in1) (empty? in2))\n          o\n          (recur (rest in1) (rest in2) (cons (first in2) \n                                             (cons (first in1) o)))))))","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn r [xs ys]\r\n  (cond\r\n    (or (empty? xs) (empty? ys)) '()\r\n    :else (cons (first xs) (cons (first ys) (r (rest xs) (rest ys))))))","problem":39,"user":"4dc7e7a5535d8a4b2fd74290"},{"code":"(fn inter [seq1 seq2] (if (or (empty? seq1) (empty? seq2))\n                  \t    '()      \n                      \t(concat \n                    \t (list \n                   \t\t(first seq1)\n                        (first seq2))\n                       (inter (rest seq1) (rest seq2)))))","problem":39,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn [& s] (apply mapcat vector s))","problem":39,"user":"4f97d8f3e4b0dcca54ed6ced"},{"code":"(fn [sa sb] seq (flatten (map vector sa sb)))","problem":39,"user":"4fc9a977e4b0ee37620e1847"},{"problem":39,"code":"(fn [listaA listaB]\n(mapcat list listaA listaB))","user":"59e63a2ce4b08badc2a0c569"},{"problem":39,"code":"(fn inter [s1 s2] (if (and (seq s1) (seq s2))\n                    (cons (first s1) (cons (first s2) (inter (rest s1) (rest s2))))\n                    '()))","user":"5ee93720e4b029a2061bbeb7"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 res []]\n          (if (or (empty? s1) (empty? s2))\n            res\n            (recur (drop 1 s1) (drop 1 s2)\n               (conj res (first s1) (first s2)))\n            ))","user":"55989c25e4b031d6649c9b9b"},{"code":"#(let [result '()](do (flatten (for [i (range (min (count %) (count %2)))] (conj result (%2 i) (% i))))))","problem":39,"user":"5138d08be4b0a5db03d727db"},{"problem":39,"code":"(fn my-interleave\n  [c1 c2]\n  (mapcat #(concat (list %1) (list %2)) c1 c2))","user":"52561295e4b0541d1855ba03"},{"problem":39,"code":"(fn [col-one col-two] \n  (loop [seq-one (seq col-one)\n         seq-two (seq col-two)\n         col     []]\n    (cond\n      (empty? seq-one)\n        (seq col)\n      (empty? seq-two)\n        (seq col)\n      :else\n        (recur\n          (rest seq-one)\n          (rest seq-two)\n          (conj col (first seq-one) (first seq-two))))))","user":"595c02a9e4b066ee0a44afeb"},{"problem":39,"code":"(fn [s1 s2]\n (loop [s1 s1\n        s2 s2\n        r []]\n   (if (or (empty? s1) (empty? s2))\n        r\n        (recur (rest s1)\n               (rest s2)\n               (conj (conj r (first s1)) (first s2))))))","user":"55c508f0e4b0e31453f649ac"},{"problem":39,"code":"(fn [coll1 coll2]\n  (flatten\n    (map #(list % %2) coll1 coll2)))","user":"5351fca5e4b084c2834f4aec"},{"problem":39,"code":"(fn interleave-\n  [coll1 coll2]\n  (loop [[x0 & x-rest] coll1\n         [y0 & y-rest] coll2\n         acc nil]\n    (if (or (empty? x-rest) (empty? y-rest))\n      (reverse (conj acc x0 y0))\n      (recur x-rest\n             y-rest\n             (conj acc x0 y0)))))","user":"5777c3d6e4b0979f8965164f"},{"problem":39,"code":"(fn [x y] (let [fx (fn [res aa bb] \n                     (if (and (first aa) (first bb)) \n                         (recur (conj (conj res (first aa)) (first bb)) (rest aa) (rest bb))\n                          res ))]\n            (fx [] x y)))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":39,"code":"(fn [s1 s2] \n  (loop [ss1 s1 ss2 s2 r []]\n    (if (and (not-empty ss1) (not-empty ss2))\n      (recur (rest ss1) (rest ss2) (conj r (first ss1) (first ss2)))\n      r)))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":39,"code":"(fn f [[a & b] [c & d]] (if (and b d) (conj (f b d) c a) (list a c)))","user":"59638af5e4b066ee0a44b0cc"},{"problem":39,"code":"#(loop [s1 %1\n     s2 %2\n     res []]\n(if (or (empty? s1) (empty? s2)) res\n  (recur (rest s1) (rest s2) (conj res (first s1) (first s2)))))","user":"56d8a63fe4b0ea9b8538f7e8"},{"problem":39,"code":"(fn my-interleave [& cols]\n  (flatten (apply map list cols)))","user":"569f4dabe4b0542e1f8d1491"},{"code":"#(flatten (reverse (seq (zipmap % %2))))","problem":39,"user":"53528cd3e4b084c2834f4af2"},{"problem":39,"code":"(fn [s1 s2]\n  (apply concat\n         (map (fn [x y] [x y]) s1 s2)))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":39,"code":"(fn p39\n  [seq1 seq2]\n  (loop [s1 seq1 \n         s2 seq2\n         result []]\n    (if (and (first s1) (first s2))\n      (recur \n        (rest s1)\n        (rest s2)\n        (conj result (first s1) (first s2)))\n      result)))","user":"5cb39440e4b026601754b903"},{"problem":39,"code":"(fn [& args]\n  (apply mapcat vector args))","user":"56c33ceae4b05cc29241ee89"},{"code":"(fn my-int [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (let [x (first xs)\n          y (first ys)]\n      (cons x (cons y (my-int (next xs) (next ys)))))))","problem":39,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn myinterleave [a b]\n(if (or (= 0 (count a)) (= 0 (count b))) '()\n  (concat [(first a) (first b)] (myinterleave (rest a) (rest b)))\n))","problem":39,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"#(flatten(map list%1%2))","problem":39,"user":"4e7eff9e535db966e863cc38"},{"code":"(fn ! [a b] \n  (if (or (empty? a) (empty? b))\n    nil\n    (cons (first a) (cons (first b) (! (rest a)(rest b))))\n  )\n)","problem":39,"user":"51db8244e4b0e067a9bbadc7"},{"problem":39,"code":"(fn [sq1 sq2] (apply concat (map #(list %1 %2) sq1 sq2)))","user":"55527251e4b0deb715856df3"},{"problem":39,"code":"(fn f [xs ys] (reduce concat (map list xs ys)))","user":"5563ff8ae4b0c656e3ff17fa"},{"code":"(fn [one two] (loop [x one\n                     y two\n                     result []]\n                (if (or (empty? x)(empty? y))\n                  result\n                  (recur (rest x)(rest y)(conj (conj result (first x)) (first y))))))","problem":39,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (or (empty? a) (empty? b)) \n    nil \n    (lazy-seq \n     (conj (my-interleave (rest a) (rest b))\n           (first b)\n           (first a)))))","user":"5b236e55e4b08b1df1c36759"},{"problem":39,"code":"(fn [coll1 coll2]\n   (loop [result []\n          input1 coll1\n          input2 coll2]\n     (if (and (first input1) (first  input2))\n       (recur (conj result (first input1) (first  input2))\n              (rest input1)\n              (rest input2))\n       result)))","user":"546b24a0e4b00cfc9eacc166"},{"problem":39,"code":"#(loop [l [] a %1 b %2] (if (or (empty? a) (empty? b)) l (recur (conj l (first a) (first b)) (rest a) (rest b))) )","user":"59473563e4b07ddc2dafad97"},{"problem":39,"code":"#(-> (map vector %1 %2) (flatten))","user":"59137b42e4b0163c97b36f04"},{"problem":39,"code":"(fn [first second]\n   (let [times (if (> (count first) (count second))\n                 (count second) (count first))]\n     (loop [i (- times 1)\n            new '()]\n       (if (< i 0)\n         new\n         (recur (- i 1) (conj new (get second i) (get first i)))))))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn [as bs]\n  (loop [s0 as s1 bs s ()]\n    (if (or (= s0 ()) (= s1 ()))\n      s\n      (recur (rest s0) (rest s1) (concat s (cons (first s0) (cons (first s1) ())))))))","problem":39,"user":"50b9d991e4b04934c218a4a9"},{"problem":39,"code":"(fn minterleave [s1 s2]\n  (cond\n    (or (empty? s1) (empty? s2)) '()\n    :else \n      (concat [(first s1) (first s2)] (minterleave (rest s1) (rest s2)))\n    )\n)","user":"51ad808ee4b09397d5109784"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [result [] [f1 & r1] s1 [f2 & r2] s2]\n   (if (and f1 f2) ; won(t work if nil are allowed in the seqs\n      (recur (conj result f1 f2) r1 r2)\n      result)))","user":"5122925ae4b068a9582e656d"},{"problem":39,"code":"#(apply concat (mapv (fn [& nths] nths) %1 %2))","user":"5d7aa22ee4b02e6b30c9354e"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1, c2 c2, res []]\n    (if (and (seq c1) (seq c2))\n      (recur (rest c1) (rest c2) (conj (conj res (first c1)) (first c2)))\n      res)))","user":"5e76274ce4b085ba37836deb"},{"problem":39,"code":"(fn custom-interleave [a b]\n  (mapcat vector a b)\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":39,"code":"(fn [l1 l2] (reduce into [] (map #(list %1 %2) l1 l2)))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn interleave2 [x y]\r\n  (loop [l1 x l2 y comb []]\r\n    (cond\r\n     (or (= l1 '()) (= l2 '())) comb\r\n     :else (recur (rest l1) (rest l2) (conj (conj comb (first l1)) (first l2)))\r\n     )))","problem":39,"user":"4dcbb035535d5973398f928d"},{"problem":39,"code":"#(loop [lf %1 rt %2 zipped '()] \n  (if (or (empty? lf) (empty? rt))\n    (reverse zipped)\n    (recur \n       (rest lf) \n       (rest rt) \n       (cons (first rt) (cons (first lf) zipped))\n     )\n    )\n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":39,"code":"(fn inter [c1 c2]\n  (let [s1 (seq c1)\n        s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1)\n            (cons (first s2)\n                  (inter (rest s1) (rest s2)))))))","user":"569ce7e6e4b0542e1f8d146d"},{"problem":39,"code":"(fn [c1 c2]\n  (reduce into (map vector c1 c2)))","user":"53c0bc5fe4b00fb29b221257"},{"problem":39,"code":"(fn [c1 c2]\n   (loop [col1 c1 col2 c2 res []]\n     (condp = [(empty? col1) (empty? col2)]\n       [false false] (recur (rest col1) (rest col2) (conj res (first col1) (first col2)))\n       res)))","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":39,"code":"(fn intrlve\n  [xs ys]\n  (loop [[x & xs] xs [y & ys] ys acc []]\n    (if (and x y)\n      (recur xs ys (into acc [x y]))\n      acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":39,"code":"(fn [x y]\n  (mapcat list x y))","user":"549ffeade4b0f3d1d8e70fb2"},{"problem":39,"code":"(fn i [[x & xs] [y & ys]] (lazy-seq (cons x (cons y (when (and (seq xs) (seq ys)) (i xs ys))))))","user":"55597b84e4b0deb715856e36"},{"problem":39,"code":"(fn intl [in1 in2] (reduce #(concat %1 [(nth in1 %2) (nth in2 %2)]) [] (range (min (count in1) (count in2)))))","user":"5f309144e4b0574c87022c23"},{"code":"(fn [x y] \n  (apply concat (map vector x y))\n)","problem":39,"user":"52016690e4b0b2e020a18f0f"},{"problem":39,"code":"(fn make-interleave [[x & xs] [y & ys]]\n  (if (or (nil? x) (nil? y))\n    '()\n    (conj (make-interleave xs ys) y x)))","user":"56339e23e4b0bfe05bf117b1"},{"problem":39,"code":"(fn [xs ys]\n  (loop [as xs\n         bs ys\n         result []]\n    (if (or (not (seq as))\n            (not (seq bs)))\n      result\n      (recur (rest as)\n             (rest bs)\n             (conj (conj result (first as)) (first bs))))))","user":"50b19a91e4b03ea880433552"},{"code":"mapcat #(list %1 %2)","problem":39,"user":"4e218464535d04ed9115e816"},{"problem":39,"code":"#(reduce concat (apply map vector [%1 %2]))","user":"5db861bce4b010eb3c36cd4b"},{"code":"(fn temp [A B] (flatten (map #(list %1 %2) A B)))","problem":39,"user":"518aec06e4b06da86c1973c2"},{"code":"mapcat list\n;;(fn [c1 c2] (flatten (map #(seq %&) c1 c2)))","problem":39,"user":"4e86d3cf535dceadca46984c"},{"code":"(fn f [xs ys] \n  (if (or (empty? xs) (empty? ys)) () \n    (conj (f (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"53976599e4b0b51d73faaeea"},{"code":"(fn [coll0 coll1]\n  (reverse\n   (loop [c0 coll0 c1 coll1 combined '()]\n     (if (or (empty? c0) (empty? c1))\n       combined\n       (recur (rest c0)\n              (rest c1)\n              (cons (first c1) (cons (first c0) combined))\n              )))))","problem":39,"user":"4ebc64db535dfed6da9c6d82"},{"problem":39,"code":"(fn [x y] (->> (map #(let []\n                        [%1 %2])\n                     x y)\n                (apply concat)))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"code":"(fn [& maps] \n  (apply mapcat \n         (fn [& xs] (apply vector xs)) \n         maps))","problem":39,"user":"511c91ace4b00c2a1fa7ff7a"},{"code":"#(reduce concat [] (map (fn [x y] (list x y)) %1 %2))","problem":39,"user":"513e8141e4b02b2a3d8235c1"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (if (< (count lst1) (count lst2))\n    (if (empty? lst1)\n      ()\n      (conj (conj (my-interleave (rest lst1) (rest lst2)) (first lst2)) (first lst1)))\n    (if (empty? lst2)\n      ()\n      (conj (conj (my-interleave (rest lst1) (rest lst2)) (first lst2)) (first lst1)))))","user":"59e778aae4b0249b72820716"},{"code":"(fn merge [xs ys] (lazy-seq\n    (let [s1 (seq xs) s2 (seq ys)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2)\n                               (merge (rest s1) (rest s2))))))))","problem":39,"user":"524740e7e4b05ef8e38e635d"},{"problem":39,"code":"(fn [a b] (reduce into [] (map list a b)))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn inlv\n  ([x y] (inlv x y []))\n  ([x y acc]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (rest x) (rest y) (concat acc [(first x) (first y)])))))","problem":39,"user":"4f697a66e4b07046d9f4ef8a"},{"problem":39,"code":"(fn [coll-one coll-two] (flatten (map list coll-one coll-two)))","user":"53d40508e4b00fb29b221332"},{"problem":39,"code":"(fn f[s1 s2]\n  (loop [x s1\n         y s2\n         target (empty s1)\n         cnt (min (count s1) (count s2))]\n    (println x y target)\n    (if (= cnt 0)\n      target\n      (recur (rest x) (rest y) (concat target [(first x)] [(first y)]) (dec cnt))\n    )\n  )\n)","user":"5c337305e4b0d62ef62d9f48"},{"code":"(comp flatten map) #(vector % %2)","problem":39,"user":"525b0b51e4b0cb4875a45d01"},{"problem":39,"code":"(fn[a, b](\n\tflatten (\n\t\tmap #(list %1 %2) a b)))","user":"5677f9ffe4b05957ce8c616f"},{"code":"(fn ! [x y] (loop [i 0\n                   li nil]\n              (if (= i (min (count x) (count y)))\n                li\n                (recur (inc i)\n                       (concat li (list (nth x i) (nth y i)))))))","problem":39,"user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn my-interleave\n  [[x & xrest] [y & yrest]]\n  (when (and x y)\n  (list* x y (my-interleave xrest yrest))))","problem":39,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [a b]\n  ((fn [lst-a lst-b acc]\n     (if (or (empty? lst-a) (empty? lst-b))\n       (reverse acc)\n       (recur (rest lst-a) (rest lst-b)\n              (conj (conj acc (first lst-a)) (first lst-b)))))\n   a b nil))","problem":39,"user":"50119c07e4b028e9d38b393f"},{"code":"(fn myinterleave [& s]\n  (when (every? seq s)\n    (concat (map first s) (apply myinterleave (map rest s)))))","problem":39,"user":"4ebe766d535dfed6da9c6d94"},{"problem":39,"code":"(fn [c1 c2]\n     (flatten (map\n      (fn [a b] [a b])\n          c1 c2)))","user":"5cc6b681e4b0ccb061962828"},{"code":"(fn ileave [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (cons (first l1)\n          (cons (first l2)\n                (ileave (rest l1) (rest l2))))))","problem":39,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn myinterleave [[f1 & r1] [f2 & r2]]\n  (if (some nil? [f1 f2])\n    nil\n    (concat [f1 f2] (myinterleave r1 r2))))","problem":39,"user":"4ecaaa25535d6d7199dd3708"},{"problem":39,"code":"(fn f[x y] (flatten (map vector x y)))","user":"55f04940e4b06e875b46ce21"},{"problem":39,"code":"(fn \n  [a b]\n  (loop [a a b b o []]\n    (if (or (empty? a) (empty? b)) o\n      (recur (rest a) (rest b) (conj o (first a) (first b))))))","user":"59ddae03e4b01968742fed65"},{"problem":39,"code":"(fn interleavee [seq1, seq2]\n  (if (not (or (empty? seq1) (empty? seq2)))\n    (conj (interleavee (rest seq1) (rest seq2)) (first seq2) (first seq1))\n    '()))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [x y]\r\n  (letfn [(func [xs ys coll] \r\n  (if (or (zero? (count xs)) (zero? (count ys)))\r\n\t  coll\r\n      (let [fxs (first xs)\r\n\t        fys (first ys)\r\n\t\t    rxs (rest xs)\r\n\t\t    rys (rest ys)]\r\n      (func rxs rys (conj coll fxs fys)))))]\r\n   (func x y [])))","problem":39,"user":"4f60ed88e4b0defedf855fb2"},{"code":"(fn [s t] (reverse (loop [acc () s1 s s2 t] \n                      (if (or (empty? s1) (empty? s2))\n                        acc\n                        (recur (cons (first s2) (cons (first s1) acc)) (rest s1) (rest s2)  \n                        )))))","problem":39,"user":"50956c2be4b087f34d351ab2"},{"problem":39,"code":"(fn [l1 l2] (loop [out '() in1 l1 in2 l2] (if (or (empty? in1)(empty? in2)) (reverse out) (recur (conj (conj out (first in1)) (first in2)) (rest in1) (rest in2)))))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":39,"code":"#(loop [x %\n        y %2\n        result []]\n   (if (or (empty? x) (empty? y))\n     result\n     (recur (rest x) (rest y) (conj result (first x) (first y)))))","user":"5b2be9b1e4b025bcb146f2b0"},{"code":"(fn interleave-seqs [coll1 coll2]\n  (loop  [c1 coll1\n         c2 coll2\n         l []]\n    (if (and (not (empty? c1))\n             (not (empty? c2)))\n      (recur (rest c1)\n             (rest c2)\n\t     (conj l (first c1) (first c2)))\n      l)\n    ))","problem":39,"user":"4e4bd94b535dc968683fc4d7"},{"code":"(fn [x y]\r\n  (loop [x x\r\n         y y\r\n         z []]\r\n    (if (or (empty? x) (empty? y))\r\n      z\r\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))","problem":39,"user":"504e2333e4b0f6ff3350c46c"},{"problem":39,"code":"(fn [a b]\n(reverse  (loop [c1 a c2 b coll '()]\n            (if (or (empty? c1) (empty? c2))\n              coll\n              (recur (rest c1) (rest c2) (conj (conj coll (first c1)) (first c2)))))))","user":"53c6e25ee4b00fb29b2212a4"},{"problem":39,"code":"mapcat #(into [] (vector %1 %2))","user":"5c8025d6e4b0c8042a70ce11"},{"problem":39,"code":"(fn f [coll1 coll2]\n  (if (and (seq coll1) (seq coll2))\n    (conj (f (rest coll1) (rest coll2)) (first coll2) (first coll1))\n    ()))","user":"59a24c92e4b066c664927d20"},{"code":"(fn [sq1 sq2] \n        (loop [r1 sq1 r2 sq2 output '()] \n \t\t(if (and (seq r1) (seq r2)) \n \t\t  \t(recur\n \t\t  \t  (rest r1)\n \t\t  \t  (rest r2)\n \t\t  \t  (conj output (first r1) (first r2)))\n \t\t  \t (reverse output))))","problem":39,"user":"513bafa4e4b04402f587b77c"},{"problem":39,"code":"(fn [& x] (apply mapcat list x))","user":"5cae53fbe4b026601754b885"},{"problem":39,"code":"(fn my-interleave [x y]\n        (loop [xs x\n               ys y\n               ret []]\n          (if (or (= xs '()) (= ys '()))\n            ret\n            (recur (rest xs) (rest ys) (conj ret (first xs) (first ys))))))","user":"58765038e4b01531a375ea7e"},{"code":"(fn [col-a col-b]\n  (loop [result () cola col-a colb col-b]\n    (if (and (first cola) (first colb))\n      \n        (recur (concat result (list (first cola))\n                (list (first colb)))\n               (rest cola)\n               (rest colb))\n  \n      result\n     )\n   ))","problem":39,"user":"51da7e49e4b02ceefd947768"},{"problem":39,"code":"#(loop [i %1 j %2 result '()]\n   (if (or (empty? i) (empty? j))\n      result\n   \t  (recur (rest i) (rest j) (concat result [(first i) (first j)])))\n)","user":"560c37b5e4b05f002753df2e"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [res []\n         s1 seq1\n         s2 seq2]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur (conj res (first s1) (first s2))\n             (rest s1)\n             (rest s2)))))","user":"5398d042e4b0b51d73faaf00"},{"code":"(fn x[sa sb]\n  (if (and (not-empty sa) (not-empty sb))\n    (lazy-seq (cons (first sa) (cons (first sb)\n      (x (rest sa) (rest sb))))\n    )\n  )\n)","problem":39,"user":"4e8b1fa2535d65386fec2118"},{"problem":39,"code":"(fn [coll1 coll2] (flatten (map #(list % %2) coll1 coll2)))","user":"5cf5775ce4b087f62be35a98"},{"code":"#(reverse (apply concat (seq (zipmap %2 %1))))","problem":39,"user":"4fa3f91fe4b081705acca196"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n         y y\n         interleave-list []]\n    (if (and (not-empty x) (not-empty y))\n      (recur (rest x) (rest y) (conj interleave-list (first x) (first y))) interleave-list)))","user":"56491d05e4b0284900eef63a"},{"problem":39,"code":"(fn my_interleave\n\t[a b]\n\t(apply\n\t\tconcat\n\t\t(map list a b)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":39,"code":"(fn problem-34 [a-seq b-seq]\n  (let [helper (fn [aa bb res]\n                 (cond\n                  (empty? aa) res\n                  (empty? bb) res\n                  :else (recur (rest aa) (rest bb)\n                                (conj res (first aa)\n                                      (first bb)))))]\n    (helper a-seq b-seq [])))","user":"51d26b0ae4b0d13b04db0d97"},{"problem":39,"code":"(fn combine [x y]\n  (if (and (-> x empty? not) (-> y empty? not))\n    (cons (first x) (cons (first y) (combine (rest x) (rest y))))\n    []))","user":"53829b28e4b06839e8705ed6"},{"problem":39,"code":"(fn intv [la lb]\n  (when-let [a (first la)]\n    (when-let [b (first lb)]\n      (concat [a b] (intv (rest la) (rest lb))))))","user":"54b448f2e4b05787c3b1638e"},{"problem":39,"code":"#(loop [i 0 s '()] \n   (if (< i (min (count %1)(count %2)))\n       (recur (inc i) (conj s (nth %1 i) (nth %2 i)))\n       (reverse s)))","user":"54de16cae4b024c67c0cf79c"},{"code":"(fn [x y]\n  (apply concat (map #(vector %1 %2) x y)))","problem":39,"user":"52525a0ee4b0541d1855b8a2"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1i c1 c2i c2 r []]\n    (if (or (empty? c1i) (empty? c2i)) r\n      (recur (rest c1i) (rest c2i) (conj r (first c1i) (first c2i))))))","user":"58cd65fae4b03c36ff7e5889"},{"code":"(fn [x y] (mapcat #(conj [] % %2) x y))","problem":39,"user":"4e6472b7535d8ccf87e9fe6c"},{"code":"#(apply concat (map (fn [x y](list x y)) %1 %2 ))","problem":39,"user":"51f81925e4b09be9c177e526"},{"problem":39,"code":"(fn [list1 list2](loop[list1 list1\n                       list2 list2\n                       len (if (< (count list1) (count list2))(count list1)(count list2))\n                       res '()]\n                   (if (= len 0)\n                     res\n                     (recur (rest list1) (rest list2) (dec len) (concat res [(first list1) (first list2)]))\n                    \n                    )\n                  \n                  \n                  ))","user":"5c0e3f86e4b01240ff56713d"},{"problem":39,"code":"(fn [coll-a coll-b]\n  (loop [tail-a coll-a\n         tail-b coll-b\n         interleaved-seq []]\n    (if (or (empty? tail-a) (empty? tail-b))\n      interleaved-seq\n      (recur (rest tail-a) (rest tail-b) (conj (conj interleaved-seq (first tail-a)) (first tail-b))))\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"code":"mapcat vector\n\n#_(fn f [a b]\n  (when (and (seq a) (seq b))\n    (cons (first a)\n          (cons (first b)\n                (lazy-seq \n                 (f (next a) (next b)))))))","problem":39,"user":"532c9dc9e4b019098a6f8b30"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [res []\n         c1 coll1\n         c2 coll2]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur (conj res (first c1) (first c2)) (rest c1) (rest c2)))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":39,"code":"(fn f [xs ys]\n  (if (or (empty? xs) (empty? ys)) []\n    (concat [(first xs) (first ys)] (f (rest xs) (rest ys)))))","user":"563cdfdfe4b0bfe05bf11840"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n      (mapcat #(list %1 %2) s1 s2)\n    )","user":"57985f98e4b039eba2ecb114"},{"code":"mapcat (fn [& a] a)","problem":39,"user":"50c9ece0e4b0a409464667d8"},{"problem":39,"code":"(fn interleav [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n      []\n      (cons (first s1) (cons (first s2) (interleav (rest s1) (rest s2))))\n    )\n  )","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat #(list %1 %2) coll1 coll2))","user":"531ccb1fe4b08068f379eda7"},{"problem":39,"code":"#(loop [final '()\n        c1 %1\n        c2 %2]\n   (if (or (empty? c1) (empty? c2))\n     (reverse final)\n     (recur (conj final (first c1) (first c2)) (rest c1) (rest c2))))","user":"55ff562fe4b00f4cabc57660"},{"problem":39,"code":"(fn _interleave [c1 c2]\n  (let [a (first c1)\n        b (first c2)]\n    (when (and a b)\n      (cons a (cons b\n                     (_interleave (rest c1)(rest c2))))\n    )))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn ilv [a b]\n  (if (or (empty? a)\n          (empty? b))\n    ()\n    (concat\n     (list (first a) (first b))\n     (ilv (rest a) (rest b)))))","problem":39,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn interweaves [col1 col2]\n  (if\n   (or\n   \t(empty? col1)\n   \t(empty? col2)) '()\n   (cons (first col1) (cons (first col2) \n                                  (interweaves (rest col1) (rest col2))))))","problem":39,"user":"51427a8be4b0b50abeb46b37"},{"problem":39,"code":"(fn [a b]\n    (loop [[a b] [a b] result '()]\n      (if (some empty? [a b])\n        result\n        (recur (map rest [a b]) (concat result (map first [a b])))\n        )\n      )\n    )","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn iii \n  [c1 c2]\n   (lazy-seq\n    (let [cc1 (seq c1) cc2 (seq c2)]\n     (when (and cc1 cc2)\n       (cons (first cc1) (cons (first cc2) (iii (rest cc1) (rest cc2))) )))))","problem":39,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":39,"code":"(fn [seq1 seq2]\n   (flatten (map list seq1 seq2)))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn [coll1 coll2]\r\n    (loop [c1 coll1 c2 coll2 r []]\r\n\t       (if (or (empty? c1) (empty? c2))\r\n\t\t   r\r\n\t\t   (recur (rest c1) (rest c2)\r\n\t\t\t  (conj (conj r (first c1)) (first c2))))))","problem":39,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [x y]\n  (mapcat #(list %1 %2) x y))","problem":39,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn [s1 s2] (flatten (map #(list %1 %2)  s1 s2)))","problem":39,"user":"535197f2e4b084c2834f4ae4"},{"problem":39,"code":"#(loop [result [] x %1 y %2]\n   (if (or (not (first x)) (not (first y)))\n     result\n    (recur (conj result (first x) (first y))\n              (rest x)\n              (rest y))))","user":"5480cce5e4b0e286459a115f"},{"problem":39,"code":"#(loop [coll1 %1\n        coll2 %2\n        result []]\n   (if (or (empty? coll1) (empty? coll2))\n     result\n     (recur (rest coll1) (rest coll2) (conj result (first coll1) (first coll2)))))","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":39,"code":"(fn interleeve [a b]\n  (flatten (map vector a b)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":39,"code":"#(loop [a %1 b %2 c '()]\n  (if (or (empty? a) (empty? b))\n    (reverse c)\n    (recur (rest a) (rest b) (conj c (first a) (first b)))))","user":"57cef3f8e4b0c746388ab8b4"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1 c2 c2 result ()]\n    (if (or    (not (seq c1)) (not (seq c2))    )\n      (reverse result)\n      (recur \n       (rest c1) \n       (rest c2) \n       (cons (first c2) \n             (cons (first c1) result))\n      )\n      )\n  )\n)","user":"5e078ba7e4b0978307768fb6"},{"code":"(fn [xs ys]\r\n  (reduce #(into %1 %2) \r\n          [] (map vector xs ys)))","problem":39,"user":"4e513758535dc968683fc4f3"},{"problem":39,"code":";#(flatten (map vector % %2))\nmapcat vector","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [a b]\n  (reduce concat '() (map list a b)))","problem":39,"user":"515efd01e4b02c55805ea238"},{"problem":39,"code":"(fn il [xs1 xs2]\n\t(if (and (seq xs1) (seq xs2))\n\t\t(concat (list (first xs1) (first xs2)) (il (rest xs1) (rest xs2)))))","user":"52ea764ee4b09f7907dd14be"},{"code":"(fn [x y] \r\n  (flatten\r\n    (for [i (range\r\n    (min (count x) (count y)))]\r\n      (flatten\r\n        (cons (nth x i) (list(nth y i)))))))","problem":39,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn i ([xs ys] (if\n  (and (seq xs) (seq ys))\n  (conj (i (rest xs) (rest ys)) (first ys) (first xs))\n  nil)))","problem":39,"user":"4ff889f2e4b0678c553fc399"},{"problem":39,"code":"(fn my-interleave\n  [sequence-1 sequence-2]\n  (loop [x sequence-1\n         y sequence-2\n         z []]\n    (if (or (empty? x) (empty? y))\n      z\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))","user":"59077d7be4b047aa04b1995b"},{"problem":39,"code":"#(flatten (map (fn [f s]\n                 (conj '() s f))\n               %1 %2))","user":"58bc0531e4b0888cdc949d07"},{"problem":39,"code":"(fn [x y] (flatten ( map #(vector % %2) x y) ) )","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":39,"code":"(fn [c1 c2]\n  (->> (map list c1 c2)\n      (reduce concat)))","user":"5ef9ea69e4b09b61f08553d1"},{"code":"(fn inter[x y]\n  (mapcat  #(seq %) (reverse (zipmap x y))))","problem":39,"user":"4eb2f89a535d7eef30807353"},{"problem":39,"code":"(fn [& colls] (apply (partial mapcat vector) colls))","user":"57eb38dbe4b0bfb2137f5b5e"},{"problem":39,"code":"(fn interleaved\n  [part1 part2]\n  (loop [i 0\n         items []]\n    (if (or\n          (> i (- (count part1) 1))\n          (> i (- (count part2) 1)))\n      items\n      (recur (inc i) (conj items (get part1 i) (get part2 i))))))","user":"5df0f338e4b093ff717275c6"},{"problem":39,"code":"#(flatten \n   (map-indexed \n     (fn [idx x] (list x (nth %2 idx))) (take (min (count %1) (count %2)) %1)))","user":"57b1b8c8e4b0fbc9809a2756"},{"code":"(fn ninterleave [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 acc []]\n    (cond\n      (or (empty? c1) (empty? c2)) acc\n      :else (recur (rest c1) \n                   (rest c2)\n                   (conj (conj acc (first c1)) (first c2))))))","problem":39,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":39,"code":"(fn[c1 c2]\n     (loop [res '() s1 (seq c1) s2 (seq c2)]\n       println s1\n       (if (or (empty? s1)  (empty? s2))\n         (reverse res)\n          (recur\n            (cons (first s2) (cons (first s1) res))\n            (rest s1)\n            (rest s2))\n       )\n      )\n  )","user":"556cc24ae4b09a3098a52502"},{"problem":39,"code":"(fn intrl\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n(intrl (rest s1) (rest s2)))))))))","user":"59ab8beee4b08cbb53654d9e"},{"code":"(fn intrleave\r\n  ([c1 c2]\r\n     (lazy-seq\r\n      (let [s1 (seq c1) s2 (seq c2)]\r\n        (when (and s1 s2)\r\n          (cons (first s1) (cons (first s2) \r\n                                 (intrleave (rest s1) (rest s2))))))))\r\n  ([c1 c2 & colls] \r\n     (lazy-seq \r\n      (let [ss (map seq (conj colls c2 c1))]\r\n        (when (every? identity ss)\r\n          (concat (map first ss) (apply intrleave (map rest ss))))))))","problem":39,"user":"4fa58500e4b081705acca1ae"},{"problem":39,"code":"#(loop [a %1 b %2 acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b)))))","user":"57147cd9e4b07c98581c3abf"},{"code":"#(if (or (empty? %2) (empty? %3))\n  %\n  (recur (conj (conj % (first %2)) (first %3)) (rest %2) (rest %3))) []","problem":39,"user":"4f387c2ee4b0e243712b1edd"},{"code":"(fn ff [x y] (flatten (if-not (or (empty? x) (empty? y)) (vector (first x) (first y) (ff (rest x) (rest y) ) )) ))","problem":39,"user":"5296008fe4b02ebb4ef7502a"},{"problem":39,"code":"(fn [seq1 seq2] (loop [s1 seq1 s2 seq2 acc '()]\n                       (if (or (empty? s1) (empty? s2))\n                         (reverse acc)\n                         (recur (rest s1) (rest s2) (conj acc (first s1)(first s2))))))","user":"5471f2fbe4b094393f72dd70"},{"problem":39,"code":"(fn il\n  [s1 s2]\n  (when (and (seq s1) (seq s2))\n    (concat (list (first s1) (first s2))\n            (il (rest s1) (rest s2)))))","user":"5576fee3e4b05c286339e078"},{"code":"(fn [c o] (flatten (map (fn [i] [ (c i) (o i) ]) (range (min (count c) (count o))))))","problem":39,"user":"4e904d9c535d65386fec2152"},{"problem":39,"code":"(fn i [[x & xs] [y & ys]]\n  (concat [] [x y] \n    (if (and (not= xs nil) (not= ys nil))\n      (i xs ys))))","user":"56327168e4b0bfe05bf117a5"},{"code":"(fn inter [l1 l2]\n   (cond (or (empty? l1) (empty? l2)) nil\n         :else (cons (first l1) (cons (first l2) (inter (rest l1) (rest l2))))))","problem":39,"user":"524f213be4b0541d1855b7ff"},{"code":"(fn inter [x y] (if (and (next x) (next y)) \n\t\t\t\t(concat [(first x) (first y)] (inter (rest x) (rest y))) \n\t\t\t\t[(first x) (first y)]))","problem":39,"user":"51eb0374e4b0f1f103a0d156"},{"problem":39,"code":"(fn [seq1 seq2]\n  (-> (map list seq1 seq2)\n      (flatten)\n  )\n  )","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn [l1 l2] (flatten (map vector l1 l2)))","problem":39,"user":"52828298e4b0757a1b17145b"},{"problem":39,"code":";mapcat list\n\n#(apply concat (map list %1 %2))","user":"56629a7de4b0e91d5f5c5649"},{"problem":39,"code":"(fn interleave2\n  ([a b] (interleave2 a b []))\n  ([a b acc]\n   (if (or (empty? a) (empty? b))\n     acc\n     (interleave2 (rest a) (rest b) (conj (conj acc (first a)) (first b))))))","user":"56205609e4b064ca9f4b16df"},{"problem":39,"code":"(partial mapcat (fn [& items] items))","user":"5a4993c0e4b05d388ecb6b71"},{"code":"#(apply concat (map vector %1 %2))","problem":39,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [c1 c2]\n  (loop [x1 c1, x2 c2, res []]\n         (if (and (seq x1) (seq x2))\n           (recur (rest x1) (rest x2) (conj (conj res (first x1)) (first x2)))\n           res)))","problem":39,"user":"4dcc2435535d5973398f9290"},{"code":"#(mapcat (fn [a b] (list a b)) %1 %2)","problem":39,"user":"52dfe1d2e4b09f7907dd1406"},{"problem":39,"code":"(letfn [(f [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (lazy-seq (cons (first xs) (cons (first ys) (f (rest xs) (rest ys)))))))] f)","user":"577a74f7e4b0d3393e5deafa"},{"code":"#(loop [xs %1\n        ys %2\n        r []]\n   (if (or (empty? xs) (empty? ys))\n     r\n     (recur (rest xs) (rest ys) (conj r (first xs) (first ys)))))","problem":39,"user":"51f66891e4b06ff1c25c52c1"},{"code":"(fn [result a b]\n  (let [first_a (first a) first_b (first b)]\n    (if (and first_a first_b)\n      (recur (conj result first_a first_b) (rest a) (rest b))\n      result))) []","problem":39,"user":"524be8e0e4b09eba1c0223f1"},{"code":"#((comp flatten reverse seq zipmap) %1 %2)","problem":39,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":39,"code":"(fn inter\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n   (lazy-seq\n     (let [s1 (seq c1)\n           s2 (seq c2)]\n       (when (and s1 s2)\n         (cons (first s1)\n               (cons (first s2)\n                     (inter (rest s1)\n                                 (rest s2)))))))))","user":"5f1ecd79e4b0f565ad998271"},{"code":"(fn [col1 col2]\n  (flatten (let [out []\n                 longer  (if (>  (count col1) (count col2)) col1 col2)\n                 shorter (if (<= (count col1) (count col2)) col1 col2)]\n    (for [i (range (count shorter))]\n      (conj out (nth col1 i) (nth col2 i))))))","problem":39,"user":"4e7d4544535db169f9c796d0"},{"code":"(fn f [a b]\n    (if (and (seq a) (seq b))\n      (cons (first a) (cons (first b) (f (rest a) (rest b))))))","problem":39,"user":"506cad7de4b0a302964c548e"},{"code":"(fn [a b]\r\n\"Interleaves two sequences\"\r\n(flatten (map #(list %1 %2) a b)))","problem":39,"user":"4e370a04535deb9a81d77f37"},{"code":"(fn [& colls]\n  (flatten (apply map (fn [& vals] (vec vals)) colls))\n  )","problem":39,"user":"500e7063e4b04a05d36fcc07"},{"code":"(fn [l r] (flatten (map #(list %1 %2) l r)))","problem":39,"user":"4e0e0529535d04ed9115e7b9"},{"problem":39,"code":"#(loop [a % b %2 result []]\n   (if (or (nil? a) (nil? b))\n     result\n     (recur (next a) (next b) (conj result (first a) (first b)))))","user":"5df79c31e4b0a607a9a45c9b"},{"problem":39,"code":"(fn inter [a b]\n  (if (or (empty? a) (empty? b))\n    (empty a)\n    (cons (first a)(cons (first b) (inter (rest a) (rest b))))\n    )\n  )","user":"56c9970ce4b0ed865f9758de"},{"code":"mapcat (partial conj [])","problem":39,"user":"5268f5b4e4b03e8d9a4a71cf"},{"problem":39,"code":"#(flatten (for [x (range (apply min [(count %2) (count %1)]))] [(%1 x) (%2 x)]))","user":"542c2de0e4b0dad94371f29f"},{"code":"(fn [x y] (flatten (for [n (range (min (count x) (count y)))] [(nth x n) (nth y n)])))","problem":39,"user":"53874820e4b06839e8705f1b"},{"problem":39,"code":"(fn alt [xs ys]\n  (when (and (not (empty? xs))\n             (not (empty? ys)))\n          (let [[x & xs] xs\n                [y & ys] ys]\n    (cons x (cons y (alt xs ys))))))","user":"57df2722e4b0bd073c20245e"},{"code":"#(loop [a %1 b %2 ret [] ] (if (or (empty? a) (empty? b)) ret (recur (rest a) (rest b) (conj (conj ret (first a)) (first b)) ) ))","problem":39,"user":"50463347e4b011c5dfee771e"},{"problem":39,"code":"#(mapcat (fn [a b] (list a b)) % %2)","user":"580e7761e4b0849f6811b753"},{"problem":39,"code":"(fn [col1 col2]\n  (flatten (map list col1 col2)))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn [l1 l2]\n  (flatten (map list l1 l2)))","problem":39,"user":"5348cab4e4b084c2834f4a5e"},{"problem":39,"code":"(fn [v1 v2] (flatten\n  (map \n   (fn [x y] [x y])\n   v1 v2)))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":39,"code":"(fn inter [a b]\n     (if (or (empty? a) (empty? b))\n       '()\n       (lazy-cat [(first a) (first b)] (inter (rest a) (rest b)))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":39,"code":"(fn [coll1 coll2]\n (reduce (fn [new-coll list-pair]\n          (apply conj new-coll list-pair))\n        []\n        (map #(list %1 %2) coll1 coll2)))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn [colla collb]\n  ((fn [[a & as] [b & bs] res]\n     (if (or (nil? a) (nil? b))\n       res\n       (recur as bs (conj res a b)))) colla collb []))","problem":39,"user":"5161e5eee4b009fba0926e3a"},{"problem":39,"code":"(fn [as bs] \n  (loop [ias as\n         ibs bs\n         out '[]]\n    (if (or (empty? ias) (empty? ibs))\n      out\n      (recur \n       (rest ias) \n       (rest ibs) \n       (conj (conj out (first ias)) (first ibs))))))","user":"5581747fe4b05c286339e0fa"},{"problem":39,"code":"#(flatten(map (fn [x y] (list [x y]) ) %1 %2))","user":"54fce8bde4b07d26eda61d30"},{"code":"(fn [x y]\n  (loop [myvec [] a x b y]\n    (if (or (empty? a) (empty? b))\n      myvec\n      (recur (conj myvec (first a) (first b)) (rest a) (rest b)))))","problem":39,"user":"523f1245e4b01c266ffa7f95"},{"code":"(fn [xs ys] (flatten (reverse (zipmap xs ys))))","problem":39,"user":"4eb02674535d7eef30807338"},{"problem":39,"code":"(fn [coll1 coll2]\n  (apply concat (map (fn [a1 a2] (seq [a1 a2])) coll1 coll2)))","user":"57aa2b97e4b0b8559636fc66"},{"code":"(fn [a b]\n  (let [l1 (count a)\n        l2 (count b)\n        minSize (min l1 l2)\n        listOfPairs (map #(vector (a %1) (b %1)) (range minSize))]\n    (flatten listOfPairs)))","problem":39,"user":"538c6db7e4b0b51d73faae5a"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         ans []]\n    (if (or \n         (= 0 (count a)) \n         (= 0 (count b)))\n      ans\n      (recur (rest a) (rest b) (concat ans [(first a) (first b)])))))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn [m n] (flatten (map list m n)))","problem":39,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [coll1 coll2]\n  ((fn [coll1 coll2 acc]\n    (if (or (empty? coll1) (empty? coll2))\n      acc\n      (recur (rest coll1)\n             (rest coll2)\n             (concat acc (list (first coll1)) (list (first coll2))))))\n    coll1 coll2 '()))","problem":39,"user":"4fdb881ee4b05e33b9224f5e"},{"problem":39,"code":"(fn \n  \t\t[coll1 coll2]\n  \t\t(loop [x 0\n         \t   s '()]\n   \t\t (if (or (= x (count coll1)) (= x (count coll2)))\n     \t\t (reverse s)\n      \t\t(recur (inc x) (conj (conj s (nth coll1 x)) (nth coll2 x)))\n     \t    ))\n  \t\t)","user":"53b182a5e4b047364c044491"},{"problem":39,"code":"#(let [len (min (count %1) (count %2))]\n     (loop [x 0\n            ls '()]\n       (if (= x len)\n         ls\n         (recur (inc x) (concat ls [(nth %1 x) (nth %2 x)])))))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":39,"code":"#(loop [i %1 j %2 r []] (if (and (seq i) (seq j)) (recur (rest i) (rest j) (conj r (first i) (first j)) ) r ))","user":"5628cb07e4b00e49c7cb47ef"},{"problem":39,"code":"(fn\n  [coll1 coll2]\n  (loop [x 0\n         s '()]\n    (if (or (= (count coll1) x) (= (count coll2) x))\n      (reverse s)\n      (recur (inc x) (conj (conj s (nth coll1 x)) (nth coll2 x)))\n      )))","user":"51a4d802e4b0def3c5c5869a"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map (fn [x1 x2] [x1 x2]) seq1 seq2)) )","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":39,"code":"(fn [a b]\n  (loop [n 0\n         interleaved-seq []\n         smaller-count (if (< (count a) (count b))\n                        (count a)\n                        (count b))]\n    (if (= n smaller-count)\n      interleaved-seq\n      (recur (inc n) (conj interleaved-seq (get a n) (get b n)) smaller-count))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":39,"code":"(fn [a b]\n  (mapcat #(conj [] % %2) a b))","user":"52aaabf7e4b0c58976d9ac68"},{"code":"(fn foo\n  ([[x & xrest] [y & yrest]]\n     (if (and (pos? (count xrest)) (pos? (count yrest)))\n       (foo [x y] xrest yrest)\n       [x y]))\n  ([res [x & xrest] [y & yrest]]\n     (if (and (pos? (count xrest)) (pos? (count yrest)))\n       (foo `(~@res ~x ~y) xrest yrest)\n       `(~@res ~x ~y))))","problem":39,"user":"4fa27e18e4b0dcca54ed6d68"},{"code":"(fn [x y]\n  (mapcat (fn [x y] [x y]) x y))","problem":39,"user":"4e9ff8d0535d7eef3080729c"},{"problem":39,"code":"(fn interleev [x y]\n  (if (or (empty? x)\n          (empty? y))\n    ()\n    (concat (list (first x)\n                  (first y))\n            (interleev (rest x)\n                       (rest y)))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"(fn weave [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2) (weave (rest s1) (rest s2))))))))","problem":39,"user":"50d0b466e4b00b15ecee9764"},{"code":"(fn [& sequences]\n  (letfn [\n    (zip [& seqs]\n      (let [firsts (map first seqs)\n            rests (map rest seqs)]\n        (if (seq (remove nil? firsts))\n          (cons firsts (lazy-seq (apply zip rests))))))\n    ]\n    (apply concat \n      (take (apply min (map count sequences))\n        (apply zip sequences)))))","problem":39,"user":"4e7e032b535db169f9c796fc"},{"problem":39,"code":"(fn [data1 data2]\n  (flatten (map vector data1 data2)))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":39,"code":"(fn myinterl [_s1 _s2] \n  (loop [a    [] , s1 _s1,   s2 _s2]\n        (let [fs1 (first s1)\n              fs2 (first s2)\n              rs1 (rest s1)\n              rs2 (rest s2)\n              na  (conj a fs1 fs2)]\n              (prn a \"- 1\" fs1  \"r\" rs1 \" - 2 \" fs2 \"r:\" rs2)\n              (cond (every? seq [rs1 rs2])\n                   (recur na rs1 rs2)\n                   :else na\n          ))))","user":"55f80372e4b06e875b46ceb9"},{"problem":39,"code":"(fn myinterleave\n  ([s1, s2]\n   (myinterleave s1 s2\n                 (if (> (count s1) (count s2))\n                   (- (count s2) 1)\n                   (- (count s1) 1)) '()))\n  ([s1, s2, i, temp]\n   (if (= i -1)\n     temp\n     (recur s1 s2 (dec i) (conj temp (nth s2 i) (nth s1 i))))))","user":"5996cce8e4b07157cc8daab9"},{"code":"(fn my-weave [x y]\n  (let [x0 (first x)\n        y0 (first y)]\n    (if (or (nil? x0) (nil? y0))\n      '()\n      (concat (list x0 y0) (my-weave (rest x) (rest y))))))","problem":39,"user":"52127ee4e4b0d32679a5063c"},{"problem":39,"code":"(fn interleave-two-seqs [xs1 xs2]\n  (letfn [(generate-seq [xs1 xs2]\n            (lazy-seq (cons (list (first xs1) (first xs2)) (generate-seq (rest xs1) (rest xs2)))))]\n    (flatten (take (min (count xs1) (count xs2)) (generate-seq xs1 xs2)))))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"(fn pairify [xs ys] \n  (if (or (empty? xs) (empty? ys))\n    nil\n    (concat \n     (list (first xs) (first ys)) \n     (pairify (rest xs) (rest ys)))))","problem":39,"user":"52deb735e4b09f7907dd13f7"},{"problem":39,"code":"(fn [s1 s2]\n  (reduce #(into %1 %2) [] (map #(vector %1 %2) s1 s2)))","user":"54008b88e4b0de5c4184860d"},{"code":"(fn [l1 l2]\n  (loop [out []\n         a l1\n         b l2]\n    (if-not (or (empty? a) (empty? b))\n      (recur (concat out [(first a), (first b)])\n             (next a)\n             (next b))\n      out)))","problem":39,"user":"4daf4d2fedd6309eace4d178"},{"problem":39,"code":"(fn [xs ys]\n    (loop [xs xs ys ys acc '()]\n        (if (or (empty? xs) (empty? ys))\n            (reverse acc)\n            (recur (rest xs) (rest ys) (cons (first ys) (cons (first xs) acc))))))","user":"601004d6e4b074f607df66b2"},{"problem":39,"code":"(fn [s1 s2] \n  (loop [i 0 sf []] \n    (if \n      (or (= nil (get s1 i)) \n          (= nil (get s2 i)\n             ))\n      sf \n      (recur (inc i) (conj sf (get s1 i) (get s2 i))))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":39,"code":"(fn [xs ys]\n   (let [xs-l (count xs)\n        ys-l (count ys)\n        min-l (if (< xs-l ys-l) xs-l ys-l)]\n    (loop [xs xs\n           r []\n           i 0]\n      (if (>= i min-l) (reverse r)\n                       (recur (rest xs) (cons (get ys i) (cons (first xs) r)) (inc i))))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":39,"code":"(fn [xs ys]\n  (loop [index \t0\n         xys\t[]]\n    (if (or (>= index (count xs)) (>= index (count ys)))\n      xys\n      (recur (+ index 1) (conj (conj xys (nth xs index)) (nth ys index))))))","user":"5468033ee4b00cfc9eacc133"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 acc []]\n    (if (or (empty? coll2) (empty? coll1))\n      (reverse acc)\n        (recur (rest coll1) (rest coll2) (cons (first coll2) (cons (first coll1) acc))))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":39,"code":"#(loop [x %1, y %2, z '()]\n                       (if (or (empty? x) (empty? y))\n                         (reverse z)\n                         (recur (rest x) (rest y) (conj z (first x) (first y)))\n                         )\n                       )","user":"5cf72682e4b0b71b1d808a68"},{"problem":39,"code":"(fn inter [x y]\n  (lazy-seq\n  \t(let [sx (seq x) sy (seq y)]\n      (cond \n       (and sx sy)\n       (cons (first sx) (cons (first sy) (inter (rest sx) (rest sy))))))))","user":"54cbb0fde4b057c6fda3a27b"},{"code":"(fn inter [a, b]\r\n       (let [c (seq a) d (seq b)]\r\n         (if (and c d)\r\n           (cons (first c)\r\n             (cons (first d)\r\n               (inter (rest c) (rest d))\r\n               )\r\n             )\r\n           )\r\n         )\r\n       )","problem":39,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn myinterleave [a b] (loop [s1 a s2 b myrt []] \n (cond\n \t(empty? s1) myrt\n \t(empty? s2) myrt\n \t:else\n \t(recur (rest s1) (rest s2) (conj (conj myrt (first s1)) (first s2))))))","problem":39,"user":"538e29d1e4b0b51d73faae80"},{"code":"(fn visit-succ [res a b]\n  (if (or \n       (= 0 (count a))\n       (= 0 (count b)))\n    res\n      (visit-succ \n      (conj res \n            (first a) \n            (first b)) \n      (rest a) \n      (rest b)))) []","problem":39,"user":"5225a0f5e4b01819a2de430e"},{"problem":39,"code":"(fn myInterleave\n  [& colls]\n  \"Interleaves a number of collections.\n  Concatenates all the first elements in each sequence, then makes a recursive\n  call on the parameter collection, which is composed of the rest of all collections.\"\n  (if (some empty? colls) ; make a recursive call if none of the parameter colls are exhausted\n    '()\n    (concat (map first colls) (apply myInterleave (map rest colls)))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":39,"code":"(fn a [xs ys]\n  (let [x (first xs)\n        y (first ys)]\n    (if (= 1 (min (count xs) (count ys)))\n      (seq [x y])\n      (concat [x y] (a (rest xs) (rest ys))))))","user":"525890f7e4b0cb4875a45cb5"},{"code":"(fn [sq1 sq2]\n  (loop [isq1 sq1, isq2 sq2, osq []]\n    (if (or (empty? isq1) (empty? isq2))\n        osq\n        (recur (rest isq1) (rest isq2) (into osq [(first isq1) (first isq2)])))))","problem":39,"user":"5060d137e4b0dc10a69545a0"},{"problem":39,"code":"(fn [x y]\n  (loop [i 0 res []]\n    (if (>= i (min (count x) (count y)))\n      res\n      (recur (inc i) (conj res (nth x i) (nth y i)))\n      )\n   )\n  )","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn weave [[a & as] [b & bs]]\n  (if (or (nil? a) (nil? b))\n  []\n  (concat [a b] (weave as bs))))","problem":39,"user":"53778b90e4b06839e8705e36"},{"problem":39,"code":"(fn x [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (concat [(first s1) (first s2)] \n            (x (rest s1) (rest s2)))))","user":"56795625e4b05957ce8c6186"},{"problem":39,"code":"#(apply (partial mapcat (fn [& args] args)) %&)","user":"56d15251e4b0ea9b8538f78c"},{"problem":39,"code":"; REVIEW: can it be simpler?\n(fn inter\n  [a b]\n  (let [\n        size (min (count a) (count b))\n        indices (take size (iterate inc 0))\n        a1 (take size a)\n        b1 (take size b)\n        a1+b1 (concat a1 b1)\n      ]\n    (flatten\n      (map\n        (fn [i]\n          [(nth a1+b1 i) (nth a1+b1 (+ i size))]\n        )\n        indices\n      )\n    )\n  )\n)","user":"58d737cee4b03c36ff7e5982"},{"code":"#(loop [a %1 b %2 r []] \n   (if (or (nil? a) (nil? b)) \n     r\n     (recur (next a) \n            (next b) \n            (conj r (first a) (first b)))))","problem":39,"user":"5117c31ee4b0e0897831a60c"},{"problem":39,"code":"(fn in[coll1 coll2](loop[coll1 coll1\n                           coll2 coll2\n                           ret []]\n                     (cond\n                       (or(empty? coll1)(empty? coll2)) (seq ret)\n                       :else (recur (rest coll1)\n                                    (rest coll2)\n                                    (conj ret (first coll1)(first coll2))))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":39,"code":"(fn inter [seq1 seq2]\n  (cond\n   (or (empty? seq1)\n       (empty? seq2)) '()\n   :else (cons (first seq1)\n               (cons (first seq2)\n                     (inter (rest seq1) (rest seq2))))\n   ))","user":"5ca3695fe4b048ec896c5ba9"},{"problem":39,"code":"#(reduce (fn [k [l m]] (conj k l m)) [] (map (fn [a b] [a b]) %1 %2))","user":"53c1b787e4b00fb29b221266"},{"problem":39,"code":"(fn intrl [[x & xs] [y & ys]]\n  (if (and x y)\n    (list* x y (intrl xs ys))\n    ()\n  ))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn [a b] (apply concat (map #(list %1 %2) a b)))","problem":39,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn [c1 c2] (flatten (map (fn [a b] [a b]) c1 c2)))","problem":39,"user":"4e8c1d97535d65386fec2127"},{"problem":39,"code":"(fn\n  [seqn1 seqn2]\n  (loop [acc []\n         _seqn1 seqn1\n         _seqn2 seqn2]\n    (if (or (empty? _seqn1) (empty? _seqn2))\n      acc\n      (recur (conj (conj acc (first _seqn1)) (first _seqn2))\n             (rest _seqn1)\n             (rest _seqn2))\n      )))","user":"5854580ce4b07779d46863f9"},{"code":"(fn my-interleave [s1 s2]\n  (when (and (seq s1) (seq s2))\n    (concat (list (first s1) (first s2)) (my-interleave (rest s1) (rest s2)))))","problem":39,"user":"5310e7aee4b08068f379ecdc"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (concat [(first xs)] [(first ys)] (my-interleave (rest xs) (rest ys)))\n  )\n)","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn fun13 [x y]\n  \n  (let [c (min(count x) (count y))]\n    (let [t (for [i (range c)] [(nth x i) (nth y i)])] (flatten t)\n    )\n  )\n)","problem":39,"user":"52132f8de4b0d32679a50651"},{"code":"#(apply concat (map (fn [x y] (list x y)) %1 %2))","problem":39,"user":"501c76eae4b01d3bc87c0201"},{"code":"(fn [x1 x2] (apply concat (map last (take (+ (min (count x1) (count x2)) 1) (iterate (fn [[idx li]] [(+ idx 1) [(nth x1 idx) (nth x2 idx)]]) [0 '()])))))","problem":39,"user":"5394265ee4b0b51d73faaec6"},{"problem":39,"code":"(fn [pa pb]\n  (loop [a pa\n         b pb\n         ans []]\n    (cond\n     (not (seq a)) ans\n     (not (seq b)) ans\n     true (recur (rest a) (rest b) (conj ans (first a) (first b))))))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b r []]\n    (if (and (first a) (first b))\n      (recur (rest a) (rest b) (conj r (first a) (first b)))\n      r)))","user":"557c6ca6e4b05c286339e0c4"},{"problem":39,"code":"(fn [coll1 coll2] (apply concat (for [i (range 0 (min (count coll1) (count coll2)))]\n                      [(nth coll1 i) (nth coll2 i)] ) ))","user":"5797d4bae4b039eba2ecb107"},{"problem":39,"code":"(fn [x y] (apply concat (map #(identity [%1 %2]) x y)))","user":"54dae16de4b024c67c0cf758"},{"problem":39,"code":"(fn\n  [[& xs]\n    [& ys]]\n  (loop [col1 xs\n         col2 ys\n         res []]\n    (if (or (empty? col1) (empty? col2))\n      res\n      (recur (rest col1) (rest col2) (conj res (first col1) (first col2))))))","user":"53e92aafe4b036ad0777e49a"},{"code":"(fn zip [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2)) \n      '()\n      (cons (first seq1) (cons (first seq2) (zip (rest seq1) (rest seq2))))))","problem":39,"user":"4f13047d535d64f60314642c"},{"code":"(fn [x y] (apply concat (map list  x y)))","problem":39,"user":"4f2a6169e4b0d6649770a03d"},{"problem":39,"code":"(fn [c1 c2] \n  (flatten (map vector c1 c2)))","user":"609c1db9e4b00e9e6653c416"},{"problem":39,"code":"(fn my-interleave [se1 se2]\n  (when (and (seq se1) (seq se2))\n    (cons (first se1)\n          (cons (first se2)\n                (lazy-seq (my-interleave\n                           (rest se1) (rest se2)))))))","user":"554d386ee4b0a04f792995b8"},{"problem":39,"code":"(fn do-it\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (do-it (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply do-it (map rest ss))))))))","user":"5633e653e4b0bfe05bf117b7"},{"problem":39,"code":"#(flatten\n  (for [n (range (min (count %1) (count %2)))]\n    (conj [(nth %1 n)] (nth %2 n))))","user":"59902fede4b0fcebec4de86d"},{"code":"(fn interl\n  ([s1 s2] (interl s1 s2 []))\n  ([[a1 & r1] [a2 & r2] acc]\n   (if (and a1 a2) (interl r1 r2 (conj acc a1 a2)) acc)))","problem":39,"user":"52e5da25e4b09f7907dd1467"},{"problem":39,"code":"(fn my-interleave [c1 c2]\n  (let [cnt1 (count c1)\n        cnt2 (count c2)\n        max-len (if (< cnt1 cnt2) cnt1 cnt2)\n        dbl-max-len (* max-len 2)]\n  (loop [res [] draw c1 static c2 cnt dbl-max-len]\n    (if (= cnt 0)\n      (reverse (flatten res))\n      (recur (cons (first draw) res) static (rest draw) (dec cnt))))))","user":"591610d4e4b09b4ee5954b7e"},{"code":"(fn [x y]\n  (mapcat (fn [a b] (list a b)) x y))","problem":39,"user":"4ec42c11535dcc7ae8597d5f"},{"problem":39,"code":"#(flatten (loop [x %1 y %2 z []]\n   (if (or (empty? x) (empty? y))\n     z\n     (recur (drop 1 x) (drop 1 y) (conj z (conj (list (first y)) (list (first x)) ))))))","user":"54630e6be4b01be26fd746bc"},{"problem":39,"code":"(fn sm-inter [x, y]\n  (if (= 0 (min (count x) (count y)))\n    '()\n    (concat (list (first x) (first y)) (sm-inter (rest x) (rest y)))    \n   )\n)","user":"5575aae2e4b05c286339e065"},{"problem":39,"code":"(fn myinterleave [left right]\n  (vec\n   (reverse\n    (loop [l left r right acc '()]\n      (if (or (empty? l) (empty? r))\n        acc\n        (recur (rest l) (rest r) (into acc (list (first l) (first r)))))))))","user":"560ac5cae4b05f002753df09"},{"code":"(fn interleave-2 [c1 c2]\r\n  (mapcat (fn [i1 i2] (vector i1 i2)) c1 c2))","problem":39,"user":"4e75edfe535d7a570dd295c7"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [col1 col1 col2 col2 res []]\n    (if (or (empty? col1) (empty? col2))\n      res\n      (recur (rest col1) (rest col2) (conj (conj res (first col1)) (first col2)))\n      )))","user":"5367bc60e4b0243289761e81"},{"code":"(fn my-interleave\n   ([coll1 coll2]\n          (my-interleave coll1 coll2 () ) )\n   ([coll1 coll2 acc]\n      (if (or (empty? coll2) (empty? coll1))\n          acc\n          (my-interleave (rest coll1) (rest coll2) (conj (into [] acc) (first coll1) (first coll2)))\n        )\n    )\n   \n )","problem":39,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":39,"code":"(fn f [lst1 lst2]\n  (if (or (empty? lst1) (empty? lst2))\n    nil\n    (concat [(first lst1) (first lst2)] (f (rest lst1) (rest lst2)))))","user":"5c62979fe4b0fca0c162264c"},{"problem":39,"code":"(fn interl\n  ([coll1 coll2] (interl coll1 coll2 []))\n  ([coll1 coll2 newColl] (if (or (empty? coll1) (empty? coll2))\n                           newColl\n                           (interl \n                            (rest coll1) \n                            (rest coll2)\n                            (conj newColl (first coll1 ) (first coll2))\n                            )\n                           )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":39,"code":";(fn[a b] (flatten (map #(conj () %2 %1) a b )))\nmapcat vector","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn inter [list1 list2]\n  (if (nil? list1)\n    nil\n    (if (nil? list2)\n      nil\n      (concat\n        [(first list1) (first list2)]\n        (inter (next list1) (next list2))))))","problem":39,"user":"503efe01e4b06c4e0e1fa26f"},{"problem":39,"code":"(fn [& x]\n  (let [cnts (map count x)\n        cnt (if (empty? cnts) 0 (apply min cnts))]\n    (flatten\n     (for [i (range cnt)]\n       (map #(nth % i) x)))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"#(loop [a %1 b %2 c []] (if (or (empty? a) (empty? b)) c (recur (rest a) (rest b) (conj c (first a) (first b)))))","problem":39,"user":"539ec9f9e4b0ca733b974491"},{"code":"(comp flatten reverse zipmap)","problem":39,"user":"50996a38e4b0cae2931060b3"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs ys ys result []]\n    (if (or (not (seq xs)) (not (seq ys))) result\n      (recur (rest xs) (rest ys) (conj result (first xs) (first ys))))))","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn in [a b]\n  (if (or (empty? a) (empty? b)) nil\n  (concat (list (first a) (first b)) (in (rest a) (rest b)))))","problem":39,"user":"4ea0c284535d7eef308072ad"},{"problem":39,"code":"(fn tailorder [x y]\n  (if (or (nil? (first x)) (nil? (first y)))\n    nil\n    (conj (tailorder (rest x) (rest y)) (first y) (first x))\n  ))","user":"5bef02ede4b0a6d31fed2138"},{"code":"(fn i [a b] \n  (if (or (empty? a) (empty? b)) \n     []\n     (concat [(first a) (first b)] (i (rest a) (rest b)))))","problem":39,"user":"4fbd12a5e4b081705acca2fd"},{"problem":39,"code":"(fn [a b] (flatten (map (fn [& els] els) a b)))","user":"4f867b25e4b033992c121c51"},{"problem":39,"code":"(fn myi [a, b]\n  (if (or (empty? a) (empty? b))\n    (list)\n    (conj (myi (rest a) (rest b)) (first b) (first a))\n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"code":"#(loop [e %1 d %2 r []] (if (and (first e) (first d)) (recur (next e) (next d) (conj r (first e) (first d))) r))","problem":39,"user":"5167d60de4b0c5a4140a3098"},{"problem":39,"code":"(fn interleave39\n    [s1 s2]\n    (if (or (= (count s1) 1) (= (count s2) 1))\n      (list (first s1) (first s2))\n      (conj (interleave39 (rest s1) (rest s2)) (first s2) (first s1))))","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":39,"code":";; Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.\n(fn interleave-seq [a b]\n  (let [length (min (count a) (count b))]\n    (if (> length 0)\n      (take (* length 2) (cons (first a) (cons (first b) (interleave-seq (rest a) (rest b))))))))","user":"58ee9b14e4b056aecfd47db0"},{"code":"(fn rint [as, bs]\n  (if (or (empty? as) (empty? bs))\n    '()\n    (cons (first as) (cons (first bs) (rint (rest as) (rest bs))))))","problem":39,"user":"532b9075e4b09d4e7a9b5533"},{"problem":39,"code":"(fn [n m]\n  (mapcat (fn [a b] [a b]) n m))","user":"5bab49bbe4b0a20761a23474"},{"problem":39,"code":"(fn [_x _y] \n  (loop [x _x y _y acc []]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (rest x) (rest y) (conj acc (first x) (first y)) ))))","user":"57c4e8dce4b05aa3c4741cd7"},{"problem":39,"code":"(fn [l1 l2]\n  (let [n (min (count l1) (count l2))]\n    (reduce #(conj %1 (l1 %2) (l2 %2))\n            []\n            (range n))))","user":"57395f32e4b0cd1946bd1070"},{"code":"(fn [a b] (mapcat #(conj [] %1 %2) a b))","problem":39,"user":"50ed9e8de4b06330c1f87c44"},{"problem":39,"code":"(fn [c1 c2] (flatten (map #(identity [%1 %2]) c1 c2)))","user":"5a9db5c9e4b0d174b936c7f1"},{"code":"(fn [a b]\n  (let [indecies (take (min (.length a) (.length b))\n                       (iterate inc 0))\n        flatter  #(apply concat %)\n        jn       (fn [i] [(a i) (b i)])]\n    (flatter (map jn indecies))))","problem":39,"user":"4f84a4a4e4b033992c121c39"},{"code":"(fn my-interleave\n  [col1 col2]\n  (if (and (not (empty? col1)) (not (empty? col2)))\n    (concat (list (first col1) (first col2)) (my-interleave (next col1) (next col2)))\n    '()))","problem":39,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":39,"code":"(fn [x y]\n   (flatten (map list x y)))","user":"5ffd3422e4b074f607df65f7"},{"problem":39,"code":"(fn f [xs ys] (if (or (empty? xs) (empty? ys)) '()\n                (conj (f (rest xs) (rest ys)) (first ys) (first xs))))","user":"54ff2342e4b07d26eda61d49"},{"problem":39,"code":"(fn\n  [lst1 lst2]\n  (loop [res '()\n         lst1 lst1\n         lst2 lst2]\n    (if (or (empty? lst1) (empty? lst2))\n      (reverse res)\n      (recur (conj res (first lst1) (first lst2)) (rest lst1) (rest lst2)))))","user":"5c706232e4b0fca0c162277e"},{"code":"(comp (partial apply concat) (partial map list))","problem":39,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":39,"code":"(fn f [x y]\n  (if (and (seq x) (seq y))\n    (conj (f (rest x) (rest y)) (first y) (first x))\n    '()))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":39,"code":"(fn myinterleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (list* (first xs) (first ys) (myinterleave (rest xs) (rest ys)))))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn [x1 x2]\r\n  (mapcat #(conj [] %1 %2) x1 x2))","problem":39,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"(fn [x y]\n  (loop [result nil xs x ys y]\n    (if (or (not (seq xs)) (not (seq ys)))\n      (reverse result)\n      (recur (cons (first ys) (cons (first xs) result)) (rest xs) (rest ys)))))","problem":39,"user":"51857e64e4b0da5a5be3babe"},{"problem":39,"code":"(fn\n        [seq1 seq2]\n        (loop\n            [coll []\n             s1 seq1\n             s2 seq2]\n          (if (or (empty? s1) (empty? s2))\n            coll\n            (recur (conj coll (first s1) (first s2)) (rest s1) (rest s2)))))","user":"5c05cae7e4b0bdcf453d16a3"},{"problem":39,"code":"#(flatten (map (fn [& args] args) % %2))","user":"5f2d3c0ee4b033932238a66a"},{"code":"(fn [a b]\n  (reduce concat (apply  map list  [a b]))\n  )","problem":39,"user":"531902b1e4b08068f379ed77"},{"code":"(fn [s1 s2]\n  (loop [newcoll '()\n         seq1 (seq s1)\n         seq2 (seq s2)]\n  (if (and seq1 seq2) \n    (recur (conj newcoll (first seq1) (first seq2)) \n           (next seq1) \n           (next seq2))\n    (reverse newcoll))))","problem":39,"user":"50da34e4e4b0f31830755b3c"},{"code":"(fn il [xs ys]\n  (loop [xxs xs yys ys acc []]\n    (if (or (empty? xxs) (empty? yys))\n      acc\n      (recur (rest xxs) (rest yys) (conj acc (first xxs) (first yys))))))","problem":39,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn asdf [[a & as] [b & bs]]\n  (if (and as bs)\n    (list* a b (asdf as bs))\n    (list a b)))","problem":39,"user":"50344a56e4b062bc5d7ae162"},{"problem":39,"code":"#(mapcat(fn[l r](if(or(= nil l)(= nil r))[][l r]))%1 %2)","user":"55fc8f1fe4b0f488688e0675"},{"problem":39,"code":"#(loop [s1 % s2 %2 n (min (count %) (count %2)) s3 []] (if (zero? n) s3 (recur (rest s1) (rest s2) (dec n) (conj s3 (first s1) (first s2)))))","user":"59c734e3e4b0a024fb6ae53f"},{"problem":39,"code":"(fn [col1 col2]\n  (flatten (map vector col1 col2)))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"(fn inter [coll-1 coll-2]\n  (if (and (seq coll-1) (seq coll-2))\n    (conj (inter (rest coll-1) (rest coll-2))\n          (first coll-2)\n          (first coll-1))\n    ()))","problem":39,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":39,"code":"(fn [x y]\n  (loop [i 0 b 0  z []] \n    (if \n      (and \n       (< i (count x)) \n       (< b (count y))\n      )\n      (recur (+ i 1) (+ b 1) (conj z [(get x i) (get y b)]))\t\n      (flatten z) \n    )\n   ) \n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"#(loop [xs % ys %2 r []]\n    (if (or (empty? xs) (empty? ys))\n      r\n      (recur (rest xs) (rest ys) (conj r (first xs) (first ys)))))","problem":39,"user":"5327c591e4b09d4e7a9b54ff"},{"code":"(fn addsome [x y] (if (= 1 (min (count x) (count y))) [(first x) (first y)] (concat [(first x) (first y)] (addsome (rest x) (rest y)))))","problem":39,"user":"4e89de60535d3e98b8023285"},{"problem":39,"code":"(fn x\n  ([] ())\n  ([a b]\n    (when (not-any? empty? [a b])\n      ;; (println (str a \"..\" b))\n      ;; (println (str (rest a) \"..\" (rest b)))\n      (let [sa (seq a) \n            sb (seq b)]\n        (cons (first sa) \n              (cons (first sb) \n                    (x (rest sa) (rest sb))))))))","user":"5c250900e4b07e362c2305ab"},{"problem":39,"code":"(fn \n  [ff ss & nn]\n  (if (or (empty? ff) (empty? ss))\n    (reverse nn)\n    (recur (rest ff) (rest ss) (cons (first ss) (cons (first ff) nn) ))\n  )      \n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":39,"code":"(partial (fn intl [acc list1 list2]\n  (if (and (not (empty? list1)) (not (empty? list2)))\n    (conj (conj (intl acc (rest list1) (rest list2)) (first list2)) (first list1))\n    acc)) '())","user":"556086a2e4b0c656e3ff17c1"},{"code":"#(apply concat (mapv list %1 %2))","problem":39,"user":"508b95a0e4b0be79e5b189c6"},{"code":"(fn f [a b]\n     (let [s1 (seq a) s2 (seq b)]\n       (when (and s1 s2)\n         (cons (first s1)\n               (cons (first s2) \n                     (f (rest s1) (rest s2))\n                     )))))","problem":39,"user":"523ed522e4b057c4b7cd0a78"},{"problem":39,"code":"(fn [xs ys] \n  (flatten (into '() (zipmap xs ys))))","user":"546d41bde4b00cfc9eacc18c"},{"code":"(fn f [a b] \n(let [a0 (first a)\n      ar (rest a)\n      b0 (first b)\n      br (rest b)]\n  (when (and a0 b0)\n    (concat [a0 b0] (lazy-seq (f ar br))))))","problem":39,"user":"52cd093fe4b07d0d72b27376"},{"problem":39,"code":"(fn [s1 s2]\n    (apply concat (map #(list %1 %2) s1 s2)))","user":"54fdaeace4b07d26eda61d39"},{"problem":39,"code":"(fn my-interleave [c0 c1]\n  (cond (or (empty? c0)\n            (empty? c1)) '()\n        :else (concat\n                (list (first c0) (first c1))\n                (my-interleave (rest c0) (rest c1))) ))","user":"562e05e0e4b0a45d2ff83023"},{"code":"(fn f [[head1 & tail1] [head2 & tail2]]\n  (when (and head1 head2)\n    (cons head1\n      (cons head2\n        (f tail1 tail2)))))","problem":39,"user":"4f0f36a7535d0136e6c22336"},{"problem":39,"code":"(fn [a b] \n  (loop [a a\n         b b \n         res []]\n    (if (or (empty? a) (empty? b))\n      res\n      (recur (rest a) (rest b) (into res [(first a) (first b)])))))","user":"53ee7f2ee4b0d648e757f4cf"},{"code":"(fn f \n  [x y]\n  (loop [x x y y xs []]\n    (if (or (empty? x)\n            (empty? y))\n      xs\n      (recur (rest x) (rest y) (conj xs (first x) (first y))))))","problem":39,"user":"50aa60bee4b056ee01935865"},{"problem":39,"code":"(fn [s1 s2]\n   (loop [c 0\n          x []]\n     (if (< c (min (count s1) (count s2)))\n       (recur (inc c)\n              (concat x (list \n                         (nth s1 c) \n                         (nth s2 c))))\t\n       x)))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"(fn [a b] (flatten (map #(conj [] %1 %2) a b)))","problem":39,"user":"50afc0f9e4b0c3f5ed5c29a3"},{"problem":39,"code":"(fn inlv[a b] (\n        concat \n              (list (first a)) \n              (list (first b))\n              (if (and (> (count a) 1) (> (count b) 1)) (inlv (rest a) (rest b)) '()) \n      ))","user":"596f6683e4b069c0a1a19877"},{"problem":39,"code":"(fn [ v1 v2 ]                                                                                                                                                                        \n  (loop  [res [] vec1 v1 vec2 v2]                                                                                                                                                    \n    (if (or (nil?    (first vec1))                                                                                                                                                   \n            (nil? (first vec2)) )                                                                                                                                                    \n      res                                                                                                                                                                            \n      (recur                                                                                                                                                                         \n       (conj                                                                                                                                                                         \n        (conj                                                                                                                                                                        \n         res                                                                                                                                                                         \n         (first vec1)                                                                                                                                                                \n         )                                                                                                                                                                           \n        (first vec2))                                                                                                                                                                \n       (rest vec1 ) (rest vec2)                                                                                                                                                      \n       ) )                                                                                                                                                                           \n    ) )","user":"57bffed6e4b05aa3c4741c89"},{"problem":39,"code":"(fn intlv\n  [l1 l2]\n  (loop [l1 l1 l2 l2 out []]\n    (if (or (empty? l1) (empty? l2)) out\n      (recur (rest l1) (rest l2) (concat out [(first l1) (first l2)])))))","user":"551afdf8e4b07993ea3788cb"},{"problem":39,"code":"(fn my-interleave[x y] (if (and (not-empty x) (not-empty y)) (cons (first x) (cons (first y) (my-interleave (rest x) (rest y))) ) [] ))","user":"548485f5e4b0e286459a119f"},{"problem":39,"code":"(fn [a b]                                                                                                                                                     \n  (flatten (map vector a b)))","user":"52a3c66ce4b04e0c58e87c04"},{"code":"#(apply concat (apply map vector %&))","problem":39,"user":"4eb298c1535d7eef3080734b"},{"code":"(fn this [f s]\n  (if (or (empty? f) (empty? s))\n    []\n    (cons (first f) (cons (first s) (this (rest f) (rest s))))))","problem":39,"user":"5390952be4b0b51d73faae9c"},{"problem":39,"code":"(fn [s1 s2]  (loop [a1 (first s1),\n         a2 (first s2)\n         rest1 (rest s1)\n         rest2 (rest s2)\n         ret []]\n    (if (or (= '() rest1) (= '() rest2))\n      (conj ret a1 a2)\n      (recur (first rest1) (first rest2) (rest rest1) (rest rest2) (conj ret a1 a2)))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":39,"code":"(fn interl [x y] (if (or (empty? x) (empty? y)) [] (cons (first x) (cons (first y) (interl (rest x) (rest y))))))","user":"54f4e286e4b0f2f3c5226e8c"},{"problem":39,"code":"(fn [[x & xs] [y & ys]]\n\t(loop [final [x y]\n\t\t\trestx xs\n\t\t\tresty ys]\n\t\t(if (or (empty? restx) (empty? resty))\n\t\t\tfinal\n\t\t\t(recur (concat final [(first restx) (first resty)])\n\t\t\t\t\t(rest restx) (rest resty)))))","user":"5b2a559be4b063e2438bcc74"},{"code":"(fn [x y] (apply concat (map #(vector %1 %2) x y)))","problem":39,"user":"4e718fdc535d5021c1a8964d"},{"problem":39,"code":"(fn [x y]\n  (loop [i 0 j 0 l '()]\n    (if (or (= i (count x)) (= j (count y)))\n      (reverse l)\n      (recur (inc i) (inc j) (conj l (get x i) (get y j)))\n      )\n    )\n  )","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn [x y] (flatten (map #(into () [%1 %2]) y x)))","problem":39,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":39,"code":"(fn interl\n    [seq1 seq2]\n    (loop [s1 seq1, s2 seq2, result '()]\n      (if (or (empty? s1) (empty? s2))\n        (reverse result)\n        (do (let [a (first s1) b (first s2)]\n              (recur (rest s1) (rest s2) (conj result a b))\n              )\n            ))\n      )\n    )","user":"5a4cbba1e4b05d388ecb6b98"},{"code":"(fn inter [xs ys]\n  (let [x (first xs) y (first ys)]\n    (if-not (and x y)\n      ()\n      (concat [x y] (inter (rest xs) (rest ys))))))","problem":39,"user":"52fafd5ce4b047fd55837006"},{"code":"(fn inter [list1, list2]\n  (if (or (empty? list1) (empty? list2))\n    nil\n    (conj (inter (rest list1) (rest list2)) (first list2) (first list1))))","problem":39,"user":"50ed1ce7e4b01236b1d49839"},{"code":"(fn [x y] (apply concat (map #(list %1 %2) x y)))","problem":39,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":39,"code":"(fn myinterleave [colla collb]\n  (loop [result '()\n         [elema & resta] colla\n         [elemb & restb] collb]\n    (if (or (nil? elema) (nil? elemb))\n      result\n      (recur (concat result (list elema elemb)) resta restb))))","user":"5abeb697e4b073f177442725"},{"code":"(fn [xs ys]\n  (loop [backwards '()\n         xs xs\n         ys ys]\n    (if (or (= xs '()) (= ys '()))\n      (reverse backwards)\n      (recur\n        (conj backwards (first xs) (first ys))\n        (rest xs)\n        (rest ys)))))","problem":39,"user":"50bd6033e4b0594b91591c66"},{"problem":39,"code":"(fn weave\n  [x y] (if (or (= x []) (= y []))\n        nil\n        (cons (first x) (cons (first y) (weave (rest x) (rest y)))))\n)","user":"559057c4e4b027778923766e"},{"code":"(fn foo [a b] ( filter #(if % true false)(concat \n           (list (first a) (first b)) \n           (if (and (not-empty (rest a)) (not-empty (rest b)))\n             (foo (rest a) (rest b))\n             ()))))","problem":39,"user":"509dc716e4b08df8156e9e27"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         acc []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))\n      acc)))","user":"58182480e4b0c0e9c07b83a7"},{"problem":39,"code":"(fn [x, y] (->> x\n                 (map-indexed #(vector %2 (get y %1) ))\n                 (filter #(not= (get % 1) nil))\n                 (flatten)))","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn [a b] (flatten (for [i (range (min (count a) (count b)))] [(get a i) (get b i)])))","problem":39,"user":"51db1abae4b094966a2cd685"},{"problem":39,"code":"(fn [listA listB]\n   (let [min-count (min (count listA) (min (count listB)))]\n      (reduce (fn [res val] (conj res (nth listA val) (nth listB val) ) ) [] (range min-count))))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":39,"code":"(fn [x y] (loop [a x b y c []] (if (or (empty? a) (empty? b)) c (recur (rest a) (rest b) (concat c (conj '() (first b) (first a)))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [x y] (loop [m x n y r []] \n  \t\t       (if (or (empty? m) (empty? n)) r\n\t\t\t\t   (recur (rest m) (rest n) (conj r (first m) (first n))))))","problem":39,"user":"4ea4e98a535d7eef308072ce"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 result '()]\n    (cond\n      (or (empty? s1) (empty? s2)) (reverse result)\n       :else (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) result))))))","user":"55efb51ee4b066087aa9453b"},{"code":"(fn [x y] \n  (loop [l1 x l2 y res []]\n    (cond \n      (nil? (seq l1)) res\n      (nil? (seq l2)) res\n      :else (recur (rest l1) (rest l2) (conj res (first l1) (first l2)))\n)))","problem":39,"user":"4f141dee535d64f603146434"},{"problem":39,"code":"(fn [a b] (loop [a- a b- b r []]\n                       (if (or (empty? a-) (empty? b-))\n                         r\n                         (recur (rest a-) (rest b-) (conj r (first a-) (first b-))))))","user":"54864662e4b0e286459a11b8"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         res []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (conj res (first a) (first b)))\n      res)))","user":"5b055773e4b0cc2b61a3bd81"},{"code":"(fn [a b] (apply concat (map #(list % %2) a b)))","problem":39,"user":"4e6eff83535d5021c1a89615"},{"code":"(fn [s1 s2]\r\n  (flatten (map (fn [a b] [a b]) s1 s2)))","problem":39,"user":"4fdc067fe4b05e33b9224f69"},{"code":"(fn [& colls]\n  (loop [acc []\n         colls colls]\n    (if (some empty? colls)\n      acc\n      (let [acc (apply conj acc (map first colls))]\n        (recur acc (map next colls))))))","problem":39,"user":"5374ad7de4b06d7f452d9e26"},{"problem":39,"code":"(fn [lst1 lst2]\n  (loop [lst1 lst1\n         lst2 lst2\n         res ()]\n    (cond\n     (or (empty? lst1) (empty? lst2)) (reverse res)\n     :else (recur (rest lst1) (rest lst2) (cons (first lst2) (cons (first lst1) res))))))","user":"59e8cd8be4b0249b72820739"},{"code":"(fn [a b]\n  (reverse (loop [a a b b ret '()]\n(if (and (next a) (next b))\n(recur (next a) (next b) (conj ret (first a) (first b)))\n(conj ret (first a) (first b))))))","problem":39,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn ileave [s1 s2] (if (or (empty? s1) (empty? s2)) [] (concat [(first s1) (first s2)] (ileave (rest s1) (rest s2)))))","problem":39,"user":"50723bbae4b0e3170b5a868b"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat (fn [e1 e2] [e1 e2]) coll1 coll2))","user":"5cb556f9e4b026601754b934"},{"problem":39,"code":"(fn foo [la lb]\n  (cond (empty? la) nil\n        (empty? lb) nil\n        true (cons (first la) (cons (first lb) (foo (rest la) (rest lb))))))","user":"59156f0be4b0163c97b36f3d"},{"problem":39,"code":"(fn my-il\n  ([sq1 sq2]\n   (my-il sq1 sq2 []))\n  ([sq1 sq2 il]\n   (if-let [first1 (first sq1)]\n     (if-let [first2 (first sq2)]\n       (recur (rest sq1) (rest sq2) (concat il [first1 first2]))\n       il)\n     il)))","user":"5537f30fe4b09218d5f44fd8"},{"code":"(fn interleave2 [col1 col2]\n\t(let [s1 (seq col1)\n\t\t  s2 (seq col2)]\n\t\t  (when (and s1 s2)\n\t\t  \t(cons (first s1) (cons (first s2) (interleave2 (rest col1) (rest col2)))))))","problem":39,"user":"53713676e4b0fc7073fd6eac"},{"code":"(fn _interleave \n  [a b] \n  (when (> (count a) 0) \n    (when (> (count b) 0) \n      (cons (first a) (cons (first b) (_interleave (rest a) (rest b) ) ) ) ) ) )","problem":39,"user":"531f0a26e4b08068f379edbf"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (loop [s1 s1 s2 s2 result []]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (conj result (first s1) (first s2))))))","user":"5f393bd6e4b0574c87022c76"},{"code":"(fn [col1 col2]\n  (mapcat #(vector % %2) col1 col2))","problem":39,"user":"52fb903ee4b047fd5583700b"},{"code":"(fn [l1 l2]\n  (mapcat list l1 l2))","problem":39,"user":"4e498df9535dc968683fc4c4"},{"code":"(fn recinter [a b]\n  (if (or (= a '()) (= b '()))\n    '()\n  (concat [(first a)] [(first b)] (recinter (rest a) (rest b)))))","problem":39,"user":"4ea7999e535d7eef308072ee"},{"problem":39,"code":"(fn [o1 o2]\n  (loop [newseq []\n         old1 o1 \n         old2 o2]\n  (cond (or (empty? old1) (empty? old2))\n          newseq\n        :else\n          (recur (into newseq [(first old1) (first old2)])\n\t\t\t     (rest old1)\n                 (rest old2)))))","user":"587f8393e4b0f1effa3b75f2"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [x c1\n         y c2\n         acc []]\n    (let [tx (next x)\n          ty (next y)]\n      (if-not (and tx ty)\n        (conj acc (first x) (first y))\n        (recur (next x)\n               (next y) \n               (conj acc (first x) (first y)))))))","user":"574c3d4ee4b02ea11479921a"},{"code":";(fn [s1 s2] (flatten (map (fn [e1 e2] [e1 e2]) s1 s2))) \n; dürfte nicht mehr funktionieren, wenn die Elemente selber collections sind.\n\n(fn [s1 s2] (apply concat (map (fn [e1 e2] [e1 e2]) s1 s2)))\n; lässt sich zusammenfassen mit mapcat","problem":39,"user":"5207d70ae4b03bd50ef54675"},{"code":"(fn [ & coll]\n  ((fn  [s res]\n    (if (some empty? s)\n      res\n      (recur (map rest s) (concat res (map first s)))))\n     coll '()))","problem":39,"user":"4ff2ee54e4b0678c553fc340"},{"problem":39,"code":"#(apply concat(map vector %1 %2))","user":"5dac6272e4b000c986472c4c"},{"problem":39,"code":"(fn weave[[f1 & r1] [f2 & r2]] (when (and f1 f2) (cons f1 (cons f2 (lazy-cat (weave r1 r2))))))","user":"53d28800e4b00fb29b22131e"},{"problem":39,"code":"#(mapcat identity (map (fn [x y] [x y]) %1 %2))","user":"5a66f358e4b0512ff01cd9d5"},{"code":"(fn [a b]\n  (loop [ret [] x a y b]\n    (if (or (empty? x) (empty? y))\n      ret\n      (recur\n        (into ret [(first x) (first y)])\n        (rest x)\n        (rest y)))))","problem":39,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":39,"code":"(fn [l r] (flatten (map #(list % %2) l r)))\n\n; mapcat list","user":"55236ad6e4b0882d96d091b1"},{"problem":39,"code":"(fn [col1 col2]\n    (reduce\n     #(concat %1 %2)\n     (list)\n     (map #(list %1 %2) col1 col2)\n     ))","user":"554a75c9e4b0a04f79299575"},{"problem":39,"code":"(fn [input1 input2]\n\n  (loop [sequence1 input1\n\n         sequence2 input2\n\n         result []]\n\n    (if (or (empty? sequence1) (empty? sequence2))\n\n      result\n\n      (recur \n\n       (rest sequence1)\n\n       (rest sequence2)\n\n       (conj result (first sequence1) (first sequence2))))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":39,"code":"(fn [coll1 coll2]\n  (flatten (map #(list %1 %2) coll1 coll2)))","user":"55e70e8de4b050e68259b490"},{"problem":39,"code":"(fn [c1 c2](mapcat #(vector % %2) c1 c2))","user":"558aabbfe4b0277789237621"},{"problem":39,"code":"(fn [& args] (flatten (apply map (fn [& x] x) args)))","user":"520ed237e4b0101e4be6fcd9"},{"code":"(fn intercala [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (cons (first xs)\n          (cons (first ys)\n                (intercala (rest xs) (rest ys))))))","problem":39,"user":"4db51ce0535d87e67b28fe06"},{"code":"(fn spoj [a b] (if (or (empty? a) (empty? b)) [] (concat [(first a) (first b)] (spoj (rest a) (rest b)))))","problem":39,"user":"50645e12e4b007509339a58a"},{"problem":39,"code":"(fn doobie [s, t]\n    (if (or (empty? s) (empty? t))\n      ()\n      (cons (first s)\n            (cons (first t) \n                  (doobie (rest s) (rest t))))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":39,"code":"(fn a[sq sq2] (flatten(map list sq sq2)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":39,"code":"(fn [x y]\n    (let [veclist (map #(vector %1 %2) x y)\n          result  (reduce concat [] veclist)]\n      result))","user":"532f7e12e4b019098a6f8b4e"},{"problem":39,"code":"(fn [xs ys] \n  (let [final []]\n    (loop [xs xs ys ys final final]\n      (if (or (empty? xs) (empty? ys))\n        final\n        (recur (rest xs) (rest ys) (conj final (first xs) (first ys)))))))","user":"567af6e2e4b05957ce8c61a0"},{"problem":39,"code":"(fn myleave \n\t([col1 col2] (myleave col1 col2 []))\n\t([col1 col2 res] \n\t\t(if (or (empty? col1) (empty? col2) )\n\t\t\tres\n\t\t\t(recur (rest col1) (rest col2) (conj res (first col1) (first col2)))\n    )\n  )\n)","user":"5bb4baace4b0a20761a23552"},{"code":"(fn inl\n\t([s1 s2] (inl s1 s2 ()))\n\t([s1 s2 si]\n\t\t(if\n\t\t\t(or\n\t\t\t\t(= s1 ())\n\t\t\t\t(= s2 ())\n\t\t\t\t)\n\t\t\t(reverse si)\n\t\t\t(inl (rest s1) (rest s2) (cons (first s2) (cons (first s1) si))))))","problem":39,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":39,"code":"(fn\n  [seq1 seq2] \n   (loop [result '() s1 seq1 s2 seq2]\n      (if (or (empty? s1) (empty? s2))\n         (reverse result)\n         (recur (cons (first s2)(cons (first s1) result)) (rest s1) (rest s2)))))","user":"5aa4a1ffe4b0d174b936c886"},{"code":"(fn f\n  [l r]\n  (if (or (empty? l) (empty? r))\n      '()\n      (cons (first l) \n       (cons (first r)\n        (f (rest l) (rest r))))))","problem":39,"user":"4eb2d0ae535d7eef3080734e"},{"code":"(fn [xs ys]\n    (let [il (fn [xs ys ls]\n              (if (or (empty? xs) (empty? ys))\n                ls\n                (recur (rest xs) (rest ys) (conj ls (first xs) (first ys)))))]\n      (il xs ys [])))","problem":39,"user":"51960b79e4b04c0af7ff3c13"},{"problem":39,"code":"(fn problem-39 [coll1 coll2]\n  (cond\n    (or (empty? coll1) (empty? coll2)) '()\n    :else (cons (first coll1) (cons (first coll2) (problem-39 (drop 1 coll1) (drop 1 coll2))))))","user":"5a786f6be4b013a48d39976e"},{"code":"(fn [a b]\n  (mapcat #(vector %1 %2) a b))","problem":39,"user":"5030f16fe4b05b7df5a0b84b"},{"code":"#(loop [res [] s1 %1 s2 %2] \n  (if (or (empty? s1) (empty? s2)) res \n    (recur (conj res (first s1) (first s2)) (rest s1) (rest s2))))","problem":39,"user":"4ecf42b4535d1f5ad70dba3c"},{"code":"(fn intlv\n  [as bs]\n  (cond\n   (empty? as) '()\n   (empty? bs) '()\n   :else (conj (intlv (rest as) (rest bs)) (first bs) (first as))))","problem":39,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":39,"code":"mapcat(fn\n        [& n]\n        n)","user":"5a99b861e4b0d174b936c7ad"},{"problem":39,"code":"(fn [x y](apply concat(map vector x y)))","user":"546b833ce4b00cfc9eacc16b"},{"problem":39,"code":"(fn [xs ys]\n  (mapcat (fn [x y] [x y]) xs ys))","user":"55d87324e4b0e31453f64ab4"},{"code":"(fn ! [s1 s2] \n  (when (and (seq s1) (seq s2)) \n    (cons (first s1) \n      (cons (first s2) \n        (! (rest s1) (rest s2))))))","problem":39,"user":"4e8d86d5535d65386fec2136"},{"problem":39,"code":"(fn [s1 s2] (flatten (map #(list %1 %2) s1 s2)) )","user":"57a9db97e4b0b8559636fc5b"},{"problem":39,"code":"(fn [a b] (let [m (min (count a) (count b)) a (take m a) b (take m b)] (mapcat #(vector (first %) (last %)) (partition (inc m) 1 (concat a b)))))","user":"5b100648e4b0cc2b61a3be17"},{"problem":39,"code":"(fn my-func [seq1 seq2]\n  (if (and (seq seq1) (seq seq2))\n    (conj (my-func (rest seq1) (rest seq2)) (first seq2) (first seq1))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":39,"code":"(fn ilv\n        [& colls]\n        (let [ss (map seq colls)]\n          (when (every? identity ss)\n            (concat (map first ss) (apply ilv (map rest ss))))))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn [c1 c2] (flatten (map (fn [x y] (seq [x y])) c1 c2)))","problem":39,"user":"511e3454e4b028ee16def195"},{"code":"(fn [c1 c2]\n  (loop [result ()\n         s1 (seq c1)\n         s2 (seq c2)]\n    (if (and s1 s2)\n      (recur (conj result (first s1) (first s2))\n             (next s1)\n             (next s2))\n      (reverse result))))","problem":39,"user":"4ecb1641535d6d7199dd370e"},{"problem":39,"code":"(fn\n  [a b]\n  (loop [a a\n         b b\n         res ()]\n    (if (or (empty? a) (empty? b))\n      (reverse res)\n      (recur (rest a) (rest b)\n             (cons (first b) (cons (first a) res))))))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [s1 s2] (flatten (map #(conj '[] %1 %2) s1 s2)))","problem":39,"user":"523b4e91e4b07becd5be21ef"},{"code":"(fn [a b] \n  (flatten (map vector a b)))","problem":39,"user":"51411e3be4b05ca1a0b379f3"},{"problem":39,"code":"#(loop [a %1 b %2 r []]\n\t(if (or (empty? a) (empty? b))\n\tr\n\t(recur (rest a) (rest b) (conj r (first a) (first b)))))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn inter [c1 c2](lazy-seq\r\n      (let [s1 (seq c1) s2 (seq c2)]\r\n        (when (and s1 s2)\r\n          (cons (first s1) (cons (first s2) \r\n                                 (inter (rest s1) (rest s2))))))))","problem":39,"user":"4efacdf7535dced4c769f271"},{"problem":39,"code":"(fn interleaf\n  [c1 c2]\n  (let [a (seq c1)\n        b (seq c2)]\n        (when (and a b) \n                      (cons (first a)\n                            (cons (first b)\n                                  (interleaf (rest a) (rest b)))))))","user":"4e7e8485535db169f9c79716"},{"code":"(fn ilv [a b] (if (or (= a '()) (= b '()))\n                 '()\n                 (concat (list (first a) (first b))\n                         (ilv (rest a) (rest b)))))","problem":39,"user":"4f039f14535dcb61093f6b3e"},{"code":"#(loop [i %1 j %2 r '()] (if (or (empty? i) (empty? j)) r (recur (rest i) (rest j) (concat r (list (first i)) (list (first j))))))","problem":39,"user":"4e85cda3535db62dc21a62f0"},{"code":"(fn foo [x y] (if (and (seq x) (seq y))\n\t(concat (list (first x)) (list (first y)) (foo (rest x) (rest y)))\n\t'()\n))","problem":39,"user":"52cc92e9e4b07d0d72b27368"},{"code":"#(loop [a [] x %1 y %2]\n  (if (or (empty? x) (empty? y)) a\n    (recur (conj a (first x) (first y))\n           (rest x)\n           (rest y))))","problem":39,"user":"4fbd292fe4b081705acca300"},{"code":"(fn ileave [x, y]\n  (loop [sx x sy y acc []]\n    (if (and (seq sx) (seq sy))\n      (recur (rest sx) (rest sy) \n        (concat acc [(first sx) (first sy)]))\n      acc)))","problem":39,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":39,"code":"(fn interleave-custom [seq1 seq2]\n  (loop [a seq1, b seq2, result []]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (rest a) (rest b) (conj result (first a) (first b)))\n      )\n    )\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b acc []]\n    (if (and (seq a) (seq b))\n      (recur (rest a)\n             (rest b)\n             (conj acc (first a) (first b)))\n      acc)))","user":"555ee545e4b0a2eb076a39bd"},{"problem":39,"code":"(fn f [x y] \n\t(flatten \n\t\t(map #(seq [%1 %2]) x y)\n\t)\n\t)","user":"56e30cefe4b03a7c14b85a3d"},{"problem":39,"code":"(fn [as bs]\n  (loop [acc []\n         [a & as] as\n         [b & bs] bs]\n    (if (and a b)\n      (recur (conj acc a b) as bs)\n      acc)))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn myintr\n  [x y]\n  (if (and (seq x) (seq y)) \n    (concat (list (first x) (first y)) (myintr (rest x) (rest y)))\n    '()\n    )\n  )","problem":39,"user":"50982769e4b04e098a4c726a"},{"code":"(fn inter [sq1 sq2]\n  (if (or (empty? sq1) (empty? sq2))\n    nil\n    (cons (first sq1)\n          (cons (first sq2)\n                (inter (rest sq1) (rest sq2))))))","problem":39,"user":"4e8f5eba535d65386fec214c"},{"problem":39,"code":"(fn\n  ([] '())\n  ([coll] coll)\n  ([coll-a coll-b & more-colls] (apply mapcat vector coll-a coll-b more-colls)))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn [s1 s2]\n  (reduce concat (map vector s1 s2)))","problem":39,"user":"518a8c4be4b0df82f5685903"},{"problem":39,"code":"#(loop [a %1 b %2 o []]\n   (if (and a b)\n     (recur \n      (next a)\n      (next b)\n      (conj o (first a) (first b)))\n     o\n     ))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn f\n  ([a b] (f a b '[]))\n  ([a b l]\n   (if \n     (or (empty? a) \n           (empty? b))\n     l\n     (f (rest a) (rest b) (conj l (first a) (first b))))))","problem":39,"user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [xs ys]\n  (loop\n    [xs' xs, ys' ys, r []]\n    (if (or (nil? xs') (nil? ys')) r\n      (recur\n        (next xs') (next ys') (conj r (first xs') (first ys'))))))","problem":39,"user":"508157b2e4b0946d0443855c"},{"code":"(fn [x y & inter]\n  (cond (and (or (empty? x) (empty? y)) (vector? x)) (vec (reverse inter))\n   \t\t(or (empty? x) (empty? y)) (reverse inter)\n   \t\t(empty? inter) (recur (rest x) (rest y) (list (first y) (first x)))\n        :else (recur (rest x) (rest y) (cons (first y) (cons (first x) inter)))))","problem":39,"user":"5306e4b4e4b02e821686979d"},{"code":"#(flatten (into '() (zipmap % %2)))","problem":39,"user":"50d4593ee4b09cc622d65a68"},{"problem":39,"code":"(fn [lst1 lst2] (loop [l1 lst1 l2 lst2 final []]\n                  (cond\n                   (or (empty? l1) (empty? l2)) final\n                   :else (recur (rest l1) (rest l2) (conj (conj final (first l1)) (first l2)))\n                  )\n                 )\n)","user":"54e7425ee4b024c67c0cf810"},{"problem":39,"code":"(fn [A B]\n  (loop [as A\n         bs B\n         result []]\n    (if\n      (or \n        (empty? as)\n        (empty? bs))\n       result\n       (recur\n        (rest as)\n        (rest bs)\n        (conj\n          result\n          (first as)\n          (first bs))))))","user":"5223daaee4b01819a2de42b8"},{"problem":39,"code":"(fn\n    [collection1 collection2]\n    (loop [coll1 collection1 coll2 collection2 final-coll []]\n      (let [[part1 & remaining1] coll1 [part2 & remaining2] coll2]\n        (if (or (nil? part1) (nil? part2))\n          (seq final-coll)\n          (recur remaining1\n                 remaining2\n                 (conj final-coll part1 part2)\n                 )\n          )\n        )\n      )\n    )","user":"5aefd746e4b0cc2b61a3bc3d"},{"code":"(fn il [c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (il (rest s1) (rest s2)))))))","problem":39,"user":"4f037bb5535dcb61093f6aec"},{"problem":39,"code":"(fn [_xs _ys]\n    (loop [xs _xs ys _ys zs []]\n      (if (or (empty? xs) (empty? ys))\n        zs\n        (recur (rest xs)\n               (rest ys)\n               (concat zs [(first xs)] [(first ys)])))))","user":"58b81490e4b0ebc645576d8c"},{"problem":39,"code":";#(mapcat list % %2)\nmapcat list","user":"57ba55c1e4b0fbc9809a2801"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [output []\n         left a\n         right b]\n    (if (or (empty? left) (empty? right))\n      output\n      (recur (concat output [(first left) (first right)]) (rest left) (rest right)))))","user":"5b82eec6e4b047b03b2037a4"},{"code":"(fn merge-coll \n  [c1 c2]\n\t(loop [lc1 c1 lc2 c2 rc '()]\n\t\t(if (or (empty? lc1) (empty? lc2))\n\t\t\trc\n\t\t\t(recur (rest lc1) (rest lc2) (concat rc (list (first lc1) (first lc2)))))))","problem":39,"user":"4f2942ace4b0d6649770a01e"},{"problem":39,"code":"(fn [a b]\n  (loop [A a B b acc []]\n    (if (or (empty? A) (empty? B))\n      acc\n    (recur (rest A) (rest B) (conj acc (first A) (first B)))\n    )\n  )\n  )","user":"552d9013e4b076ab5578f7ea"},{"problem":39,"code":";(apply concat (map #(vector %1 %2) [1 2 3] [:a :b :c]))   \n#(mapcat vector %1 %2)","user":"5487eb1de4b0e286459a11ca"},{"problem":39,"code":"(fn [keys values] (loop [ks keys vs values result '()]\n  (if (or (empty? ks) (empty? vs))\n    (reverse result)\n    (recur (rest ks)\n           (rest vs)\n           (concat [(first vs)] [(first ks)] result)))))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn [ls1 ls2]\n  (flatten (map #(list %1 %2) ls1 ls2)))","problem":39,"user":"5097ea89e4b087ccf61a7af4"},{"problem":39,"code":"(fn inter [ca cb]\n  (if\n   (or (empty? ca) (empty? cb))\n   nil\n   (concat\n    [(first ca) (first cb)]\n    (inter (rest ca) (rest cb)))))","user":"57fd085ce4b0d3187e9009a9"},{"problem":39,"code":"(fn [c a b]\n  (if (or (empty? a) (empty? b))\n    c\n    (recur (conj c (first a) (first b)) (drop 1 a) (drop 1 b)))) []","user":"5bf0aefde4b0a6d31fed215a"},{"problem":39,"code":"(fn [col1 col2]\n  ((fn iter [[head-cur1 & rest-cur1] [head-cur2 & rest-cur2] total]\n    (let [cur-total (concat total [head-cur1 head-cur2])]\n      (if (or (= (count rest-cur1) 0) (= (count rest-cur2) 0))\n        cur-total\n        (iter rest-cur1 rest-cur2 cur-total)\n      )\n    )\n  ) col1 col2 '())\n)","user":"5c3f6322e4b08cd430848e97"},{"problem":39,"code":"#(reduce (fn [r x] (into r x)) (map (fn [a b] (vector a b)) %1 %2))","user":"57086931e4b0b0fb43fd069e"},{"code":"(fn [coll coll2]\n  (letfn [(my-interpose-c [x y] (cons x (cons y ())))]\n    (flatten (map my-interpose-c coll coll2))))","problem":39,"user":"5369a4b1e4b0243289761e9f"},{"code":"(fn [c1 c2]\n  (let [n (min (count c1) (count c2))]\n    (loop [c1 c1 c2 c2 c 1 r []]\n      (if (= c n)\n        (concat r (vector (first c1)) (vector (first c2)))\n        (recur (rest c1) (rest c2) (inc c) (concat r (vector (first c1)) (vector (first c2))))))))","problem":39,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":39,"code":"(fn [a-list b-list]\n  (flatten (map #(vector %1 %2) a-list b-list)))","user":"57b5dc52e4b0fbc9809a27b3"},{"problem":39,"code":"#(mapcat (fn [& x] (vec x)) %1 %2)","user":"5e189cc8e4b0dc95940084f7"},{"code":"(fn foo [a b]\n  (if (and (seq a) (seq b))\n    (lazy-seq (concat [(first a) (first b)] (foo (rest a) (rest b))))\n    []))","problem":39,"user":"50d93c53e4b0fd36a4b89223"},{"problem":39,"code":"(fn m-interleave\n  [seq1 seq2]\n  (if (or (= 1 (count seq1)) (= 1 (count seq2)))\n    (map first [seq1 seq2])\n    (concat\n      (map first [seq1 seq2])\n      (m-interleave (rest seq1) (rest seq2)))))","user":"5545477fe4b0a04f79299531"},{"problem":39,"code":"(fn [colone coltwo]\n\t(loop [myvector [] [onecur & onerest] colone [twocur & tworest] coltwo]\n    \t(if (or (empty? onerest) (empty? tworest))\n         \t (conj myvector onecur twocur)\n          \t (recur  (conj myvector onecur twocur) onerest tworest)\n        )\n    )\n)","user":"579be21fe4b05b1deef9adff"},{"problem":39,"code":"(fn [coll-1 coll-2]\n   (mapcat vector coll-1 coll-2)\n )","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":39,"code":"(fn [li1 li2] (reverse ((fn rec [oli1 oli2 nli] (if (some empty? [oli1 oli2])\n                          nli\n                          (rec (rest oli1) (rest oli2) (cons (first oli2) (cons (first oli1) nli))))) li1 li2 nil)))","user":"5b20134de4b03cfeda66ed2d"},{"problem":39,"code":";#(loop [right %1 left %2 acc []]\n;   (if (and (seq right) (seq left))\n;     (recur \n;      (rest right) \n;      (rest left) \n;      (conj acc (first right) (first left)))\n;     acc))\nmapcat list","user":"54397533e4b032a45b86931d"},{"code":"#(loop[a %1, b %2, ret []](\n    if(or (empty? a) (empty? b)) \n      ret \n      (recur (next a), (next b), (conj ret (first a) (first b)))\n  )\n)","problem":39,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn[x y](loop[cnt 0 acc[]](if (= cnt (min (count x) (count y))) acc (recur (inc cnt)(conj (conj acc (nth x cnt)) (nth y cnt))))))","problem":39,"user":"4f32135ae4b0d6649770a08e"},{"problem":39,"code":"(fn interleave-seq [coll-1 coll-2 & processed]\n  (if (or (empty? coll-1) (empty? coll-2))\n    (reverse processed)\n    (recur (rest coll-1) \n           (rest coll-2)\n           (cons (first coll-2) (cons (first coll-1) processed)))))","user":"55b69e37e4b01b9910ae2999"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [al l1 bl l2 res []]\n    (if (or (empty? al) (empty? bl))\n      res\n      (recur (next al) (next bl) (conj res (first al) (first bl)))\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":39,"code":"(fn [a b]\n  \"I would prefer to use reduce but couldn't get it working.\"\n  (loop [return []\n         x a\n         y b]\n    (if (or (nil? x) (nil? y))\n      return\n      (recur (conj return (first x) (first y))\n             (next x)\n             (next y)))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":39,"code":"(fn f [a b] (if-not (or (empty? a) (empty? b)) (lazy-seq (conj (f (rest a) (rest b)) (first b) (first a)))))","user":"5112500ee4b0350614f07a72"},{"code":"(fn [coll0 coll1]\n  (loop [result [] coll0 coll0 coll1 coll1]\n     (if (or (zero? (count coll0)) (zero? (count coll1)))\n        result\n        (recur (conj result (first coll0) (first coll1)) (rest coll0) (rest coll1)))))","problem":39,"user":"4fb99483e4b081705acca2da"},{"problem":39,"code":"(fn [s1 s2]\n  (reverse (flatten (seq (zipmap s2 s1)))))","user":"53bbae20e4b047364c044509"},{"problem":39,"code":"(fn interl\n  [x y]\n   (if (or (empty? x) (empty? y)) []\n     (cons (first x) (cons (first y) (interl (rest x) (rest y))))))","user":"5b679bf9e4b0c6492753e769"},{"code":"(fn itlv [s1 s2]\n  (loop [sq1 s1\n         sq2 s2\n         rev-res ()]\n    (if (or (empty? sq1) (empty? sq2))\n      (reverse rev-res)\n      (recur (next sq1)\n              (next sq2)\n              (cons (first sq2) (cons (first sq1) rev-res))\n             )))\n  )","problem":39,"user":"5315ec83e4b08068f379ed39"},{"code":"(fn f\n  [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (f (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"50ef77a4e4b0bdaecbb47d99"},{"problem":39,"code":"(fn [x y]\n  (apply concat (map (fn [a b] (concat [a] [b])) x y)))","user":"59663e77e4b069c0a1a1979f"},{"code":"(fn[l1 l2]\n  (let [c (min (count l1) (count l2))]\n    (loop [i 0 itl [] [l1f & l1r] l1 [l2f & l2r] l2]\n      (if (= i c)\n        itl\n        (recur (inc i) (conj itl l1f l2f) l1r l2r)\n        ))))","problem":39,"user":"532a111ee4b09d4e7a9b5520"},{"code":"(fn [coll-1 coll-2]\n  (loop [[f & fs] coll-1\n         gs coll-2\n         length (* 2 (min (count coll-1) (count coll-2)))\n         result []]\n    (if (zero? length)\n      result\n      (recur gs fs (dec length) (conj result f)))))","problem":39,"user":"50ed3c6be4b01236b1d4983b"},{"code":"#(loop [l %1 r %2 a []]\n  (if (or (empty? l) (empty? r)) (seq a)\n    (recur \n      (rest l) \n      (rest r) \n      (conj a (first l) (first r)))))","problem":39,"user":"4f0ce26c535d0136e6c22312"},{"code":"#(loop [f %1 s %2 c ()]\r\n    (if (or\r\n          (empty? f)\r\n          (empty? s))\r\n      (reverse c)\r\n    (recur (rest f) (rest s) (conj c (first f) (first s)))))","problem":39,"user":"4db6ce85535d1e037afb217f"},{"problem":39,"code":"#(loop [f %1 s %2 r ()]\n   (if (and (seq f) (seq s))\n     (recur (rest f) (rest s) (concat r [(first f)] [(first s)]))\n     r\n     ))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":39,"code":"(fn f [c1 c2] (if (some empty? [c1 c2]) () (conj (f (rest c1) (rest c2)) (first c2) (first c1))))","user":"5744d088e4b009280f9f2b41"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [l1 l1 l2 l2 r []]\n    (if (or (empty? l1) (empty? l2)) r\n      (recur (rest l1) (rest l2) (conj r (first l1) (first l2))))))","user":"57d9f603e4b0bd073c20240a"},{"problem":39,"code":"(fn [c1 c2] \n  (reduce concat '() \n    (map list c1 c2)))","user":"56326995e4b0bfe05bf117a3"},{"problem":39,"code":"#(loop [a 0 b []]\n   (if (< a (min (count %1) (count %2)))\n     (recur(inc a)(conj b (nth %1 a)(nth %2 a)))\n     b\n   ))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":39,"code":"(fn [a b] (flatten (map (fn [& r] r) a b)))","user":"578d459ee4b0ebec4cfb7567"},{"problem":39,"code":"#(loop [interleaved-coll [] coll1 %1 coll2 %2]\n  (if (and (not-empty coll1) (not-empty coll2))\n    (recur (filterv (complement nil?) (conj interleaved-coll (first coll1) (first coll2))) (rest coll1) (rest coll2))\n    interleaved-coll))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":39,"code":"(fn [arg1 arg2]\n  (loop [col1 arg1\n         col2 arg2\n         result []]\n    (if (or (empty? col1) (empty? col2))\n      result\n      (recur (next col1) (next col2) (conj result (first col1) (first col2)) ))\n    ))","user":"565b371fe4b068f2fe63dbff"},{"code":"; original:\n;(fn i [x y] \n;  (if (some empty? [x y]) \n;    '() \n;    (conj (i (rest x) (rest y)) (first y) (first x))))\n\n\n; becomes, once mapcat strikes again \n; (since map pulls params in parallel from multiple collections):\nmapcat list","problem":39,"user":"50d4c626e4b09cc622d65a70"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 r []]\n    (cond\n     (empty? s1) r\n     (empty? s2) r\n     :else (recur (rest s1) (rest s2) (conj r (first s1) (first s2))))))","user":"57462a4de4b009280f9f2b5d"},{"code":"(fn interleave-2seqs[x y]((fn interleave-inner[xin yin output]( \n                                                                  if (and (first xin) (first yin))\n                                                                  (interleave-inner (rest xin) (rest yin) (concat output (list (first xin) (first yin))))\n                                                                  output\n                                                                  )) x y (list)))","problem":39,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(partial (fn [total x y] (if (and (first x) (first y)) (recur (conj total (first x) (first y)) (next x) (next y)) (seq total))) [])","problem":39,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [x col1\n         y col2\n         result []]\n   (if (or (empty? x) (empty? y))\n    result\n    (recur (rest x) (rest y) (conj result (first x) (first y))))))","user":"5bf06734e4b0a6d31fed2153"},{"code":"(fn intl \n      ([colla collb] \n        (intl colla collb []))\n      ([colla collb res] \n      (if (and (> (count colla) 0) (> (count collb) 0)) \n        (intl (rest colla) (rest collb) (conj res (first colla) (first collb))) \n        (filter (comp not nil?) res))))","problem":39,"user":"4fa39b3ee4b081705acca191"},{"problem":39,"code":"#(loop [xs %\n       ys %2\n       zs []]\n  (if (or (empty? xs) (empty? ys))\n    zs\n    (recur (rest xs)\n           (rest ys)\n           (conj zs (first xs) (first ys)))))","user":"535774c2e4b04ce2eb3ed27c"},{"problem":39,"code":"mapcat (fn [& xs] xs)","user":"5579bc24e4b05c286339e098"},{"problem":39,"code":"(fn [seq1 seq2]\n  (let [max (if (< (count seq1) (count seq2)) (count seq1) (count seq2))]\n  (loop [i 0 r [] rs1 seq1 rs2 seq2]\n    (if (= i max)\n      r\n      (recur (inc i) (conj r (first rs1) (first rs2)) (rest rs1) (rest rs2))))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn rec [ls rs]\r\n  (lazy-seq\r\n    (if (or (empty? ls) (empty? rs)) ()\r\n      (concat [(first ls) (first rs)]\r\n              (rec (rest ls) (rest rs))))))","problem":39,"user":"4dd62278535d2dad7130b5c7"},{"problem":39,"code":"(fn zip [xs ys]\n  (if (= xs []) [] (if (= ys []) [] \n  (cons (first xs) (cons (first ys) (zip (rest xs) (rest ys)))))))","user":"599d49a7e4b0871e7608b7f4"},{"code":"(fn [& args] (apply mapcat (fn [& c] c) args))","problem":39,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":39,"code":"(fn [x y]\n  (loop [ x x \n          y y\n          value []]\n    (if (or (= (count x) 0) (= (count y) 0))\n      (seq value)\n      (recur (rest x) (rest y)  (conj  value (first x)  (first y) )))))","user":"54d529cbe4b0a52adc2e2009"},{"code":"(fn my-interleave [s1 s2]\n  (loop [s1 s1 s2 s2 r []]\n    (if (or (empty?  s1) (empty? s2))\n      r\n      (recur (rest s1) (rest s2)\n        (conj r (first s1) (first s2))))))","problem":39,"user":"4e360072535deb9a81d77f30"},{"problem":39,"code":"(fn my-interleave\n  [fst snd]\n  (if (or (empty? fst) (empty? snd)) \n    [] \n    (concat [(first fst)] [(first snd)] (my-interleave (rest fst) (rest snd)))))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":39,"code":"(fn [x y] \n   (let [len (min (count x) (count y))]\n   (flatten \n    (map-indexed \n    (fn [idx itm] [itm (nth y idx)]) \n    (take len x)))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn f [xs ys]\n  (cond\n    (or (empty? xs) (empty? ys)) nil\n    :else (concat (list (first xs) (first ys)) (f (rest xs) (rest ys)))))","problem":39,"user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [a b]\n  (loop [[ax & arest] a [bx & brest] b acc []]\n    (if (and ax bx) (recur arest brest (concat acc [ax bx])) acc)))","problem":39,"user":"512b07f7e4b078b06821febb"},{"code":"(fn my-interleave [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n       (my-interleave (rest s1) (rest s2)))))))","problem":39,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":39,"code":"(fn f [a b]\n  (if (not (or (empty? a) (empty? b)))\n    (concat\n     (list (first a) (first b))\n     (f (rest a) (rest b)))))","user":"589f37e0e4b02bd94d917e79"},{"code":"(fn ileave [s1 s2]\n  (mapcat (fn [a b] (concat [a] [b])) s1 s2))","problem":39,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten (map #(vector %1 %2) s1 s2)))","user":"57af41bce4b0fbc9809a2731"},{"problem":39,"code":"(fn miiix [[a & aa] [b & bb]]\n  (if (or (empty? aa) (empty? bb))\n    (list a b)\n    (apply (partial conj (miiix aa bb)) (list b a))))","user":"5424f5c3e4b01498b1a71b06"},{"code":"(fn [l1 l2] (reduce concat (map #(list % %2) l1 l2)))","problem":39,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"(fn [seq1 seq2]\n  (mapcat (fn [a b] [a b]) seq1 seq2))","problem":39,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"(fn interl\n  ([x y]\n    (interl (rest x) (rest y) [(first x) (first y)]))\n  ([x y z]\n    (if (some #(= 0 (count %)) (list x y))\n      z\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))","problem":39,"user":"4e16bdef535d04ed9115e7e9"},{"problem":39,"code":"(fn my_interl [seq1 seq2]\n    (if (or (empty? seq1) (empty? seq2))\n        nil\n        (concat (list (first seq1) (first seq2)) (my_interl (rest seq1) (rest seq2)))))","user":"56058d64e4b08b23635d3169"},{"code":"(fn [lb lc]\n   (flatten\n    (map \n     #(list (lb %) (lc %)) \n     (range (min (count lb) (count lc))))\n   ))","problem":39,"user":"52fe869be4b047fd5583703f"},{"problem":39,"code":"(fn[t y](\n   reduce\n    (fn[s l](conj s (first l)(first (rest l)))) []\n    (map (fn [x y] (conj [] x y)) t y)\n  ) )","user":"60845eb8e4b0736b099e42ef"},{"problem":39,"code":"(fn inter [a b]\n (loop [a0 (first a) b0 (first b) resa (rest a) resb (rest b) ret []]\n  (if (and a0 b0)\n   (recur (first resa) (first resb) (rest resa) (rest resb) (apply conj ret [a0 b0]))\n   ret)\n  )\n )","user":"579601c8e4b0e215f87e8492"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [lst ()\n         a a\n         b b]\n    (cond\n      (empty? a) lst\n      (empty? b) lst\n      :else (recur (concat lst (list (first a) (first b))) (rest a) (rest b)))))","user":"57f8153de4b0d3187e900916"},{"problem":39,"code":"(fn [a b]\n  (loop [l a r b output []]\n    (if (or (empty? l) (empty? r))\n      output\n      (recur (rest l) (rest r) (conj (conj output (first l)) (first r)) )\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"problem":39,"code":";(fn [seqone seqtwo] (seq (mapcat #(list %1 %2) seqone seqtwo)))\n#(mapcat vector %1 %2)","user":"555d4421e4b0a2eb076a39a8"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (loop [current (min (count s1) (count s2)) result '()]\n    (if (zero? current)\n      result\n      (recur \n       (dec current) \n       (conj (conj result (last (take current s2))) (last (take current s1)))))))","user":"53c126fce4b00fb29b22125b"},{"problem":39,"code":"(fn [a-seq b-seq]\n  (let [helper\n        (fn helper [a-seq b-seq acc]\n          (println \"a-seq:\" a-seq \", b-seq:\" b-seq \", acc: \" acc)\n          (if (or (empty? a-seq) (empty? b-seq)) acc\n              (helper (rest a-seq)\n                      (rest b-seq)\n                      (into acc (list (first a-seq)\n                                      (first b-seq))))))]\n    (helper a-seq b-seq [])))","user":"4fda8f57e4b05e33b9224f4e"},{"problem":39,"code":"(fn [x y] (loop [list1 x\n                 list2 y\n                 res []]\n            (cond \n              (or (empty? list1) (empty? list2)) res             \n              :else (recur (next list1) (next list2) (conj (conj res (first list1)) (first list2)))\n            )           \n          ) \n)","user":"5877e40ee4b01531a375eaab"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n\t(let [max-elements (min (count coll1) (count coll2))]\n\t\t(flatten (take-nth (inc max-elements) \n\t\t\t\t\t\t\t\t(for [x (take max-elements coll1)\n\t\t\t\t  \t\t\t\t\t\ty (take max-elements coll2)]\n\t\t\t\t\t\t\t\t[x y])))))","user":"593c1e3be4b069cdc2982b86"},{"problem":39,"code":"(fn [a b]\n  (flatten (map vector a b )))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":39,"code":"(fn interleave-seqs [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    '()\n    (cons (first coll1)\n          (cons (first coll2)\n                (interleave-seqs (rest coll1)\n                                  (rest coll2))))))","user":"4ea8570f535d7eef308072f8"},{"problem":39,"code":"(fn [f s] (reduce #(conj %1 (s %2) (f %2)) nil (reverse (range (min (count f) (count s))))))","user":"53623eaee4b0243289761e4f"},{"problem":39,"code":"(fn f [a b] (let [[ha & ta] a [hb & tb] b] (if (and ta tb) (cons ha (cons hb (f ta tb))) (list ha hb))))","user":"58cbdc3be4b03c36ff7e5856"},{"problem":39,"code":"(fn [S1 S2]\n  (for [x (range (* 2 (min (count S2)(count S1))))]\n   \t\t(if (even? x)\n          (S1 (quot x 2)) (S2 (quot x 2))\n        )\n   )\n )","user":"5649615be4b0284900eef641"},{"code":"(fn interl [coll1 coll2]\n  (let [s1 (seq coll1)\n        s2 (seq coll2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) (interl (rest s1) (rest s2)))))))","problem":39,"user":"4fc8769be4b0ee37620e1833"},{"problem":39,"code":"(fn abc\n  [A B]\n  (if (or (empty? A) (empty? B))\n    '()\n    (concat (list (first A) (first B)) (abc (rest A) (rest B)))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":39,"code":"#((fn rrits\n        [acc a b]\n        (if (or (empty? a) (empty? b))\n          acc\n          (rrits (conj acc (first a) (first b)) (next a) (next b))\n          )\n        ) [] %1 %2)","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn [c1 c2]\n  ((fn [c1 c2 result]\n    (if (or (empty? c1) (empty? c2))\n      (reverse result)\n      (recur (next c1) (next c2) (cons (first c2) (cons (first c1) result))))) c1 c2 []))","problem":39,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [l1 s1 l2 s2 r []]\n    (if (or (empty? l1) (empty? l2))\n      r\n      (recur (rest l1) (rest l2) (conj r (first l1) (first l2)))\n    )\n  )  \n)","user":"54aa373de4b09f271ff37cb6"},{"code":"(fn fun [a b]\n (reduce \n   concat \n   (map list a b)\n )\n)","problem":39,"user":"5228f870e4b0186687e23a98"},{"problem":39,"code":"(fn [s1 s2]\n  (->> (map vector s1 s2)\n         flatten))","user":"5484c3b2e4b0e286459a11a2"},{"problem":39,"code":"(fn myInterleave [x y] (flatten (map vector x y)))","user":"511b81c3e4b07ab9ec456183"},{"code":"(fn my-interleave [c1 c2]\n  (loop [coll1 c1, coll2 c2, acc []]\n    (if (or (empty? coll1) (empty? coll2))\n      acc\n      (recur (rest coll1) \n             (rest coll2) \n             (conj acc (first coll1) (first coll2))))))","problem":39,"user":"4f159ea6535d64f603146445"},{"problem":39,"code":"(fn intlv [a b] (if (or (empty? a) (empty? b)) () (cons (first a) (cons  (first b) (intlv (rest a) (rest b))))))","user":"5646dff3e4b0284900eef615"},{"problem":39,"code":"(fn [a b]\n    (loop [res []\n           a_ a\n           b_ b]\n      (if(or (empty? a_) (empty? b_))\n        res\n        (recur\n          (conj (conj res (first a_)) (first b_))\n          (rest a_)\n          (rest b_)\n        )\n      )\n    )\n  )","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn inter\n  [x y]\n  (let [s1 (seq x) s2 (seq y)]\n        (when (and s1 s2)\n    \t\t(cons (first s1) (cons (first s2) (inter (rest s1) (rest s2)))))))","problem":39,"user":"4e6aba11535d8ccf87e9feff"},{"code":"(fn il[sa sb]\n  (if (or (empty? sa) (empty? sb))\n    '()\n    (cons (first sa)\n      (cons (first sb)\n        (il (rest sa) (rest sb))))))","problem":39,"user":"504e24e2e4b0f6ff3350c46d"},{"code":"#(let [l (min (count %1) (count %2))]\n    (flatten (for [i (range l)] (list (nth %1 i) (nth %2 i)))))","problem":39,"user":"4e6dc5f5535d5021c1a895f0"},{"code":"(fn inter [xs ys]\n  (loop [a xs\n         b ys\n         acc []]\n    (if \n      (and a b) (recur (next a) (next b) (conj acc (first a) (first b)))\n      acc)))","problem":39,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn my-interleave [seq-a seq-b]\n  (loop [a seq-a, b seq-b, ret []]\n    (if (or (empty? a) (empty? b))\n      ret\n      (recur (rest a) (rest b) (conj ret (first a) (first b))))))","problem":39,"user":"50ba3acae4b03e68e4411c78"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 res []]\n   (let [a (first s1) b (first s2)]\n     (if-not (and a b) (flatten res)\n       (recur (rest s1) (rest s2) (conj res [a b])))))","user":"5639e878e4b0bfe05bf117f7"},{"code":"#(reduce concat ((partial map (fn [a b] [a b]) % %2)))","problem":39,"user":"4f1b0008535d64f603146473"},{"code":"mapcat #(identity %&)","problem":39,"user":"50223ee2e4b0846bc458ae48"},{"problem":39,"code":"(fn f [c1 c2]\n  (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2)\n          (f (rest s1) (rest s2))))))))","user":"569c40cee4b0542e1f8d1462"},{"problem":39,"code":"mapcat (fn [c1 c2] [c1 c2])","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (loop [acc []\n         xs xs\n         ys ys]\n    (if (and (first xs) (first ys))\n      (recur (concat acc [(first xs) (first ys)]) (rest xs) (rest ys))\n      acc)))","user":"5687b6abe4b0dcc4269f4061"},{"code":"(fn il [x y]\n  (if (empty? x)\n    x\n    (if (empty? y)\n      y\n      (flatten (cons (list (first x) (first y)) (il (rest x) (rest y)))))))","problem":39,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":39,"code":"(fn [a b]\n  (reduce concat (map (fn [x y] (list x y)) a b)))","user":"53da059be4b0e771c302547e"},{"code":"(fn [coll1 coll2]\n  (if (< (count coll1) (count coll2))\n    (loop [c1 coll1 c2 coll2 res (empty coll1)]\n      (if (empty? c1)\n        res\n        (recur (rest c1) (rest c2) (conj res (first c1) (first c2)))))\n    (loop [c1 coll2 c2 coll1 res (empty coll2)]\n      (if (empty? c1)\n        res\n        (recur (rest c1) (rest c2) (conj res (first c2) (first c1)))))))","problem":39,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":39,"code":"(fn [x1 x2] (mapcat #(list %1 %2) x1 x2))","user":"5ca1f8a1e4b048ec896c5b8c"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xss xs yss ys rs []]\n    (if (empty? xss)\n      rs\n      (if (empty? yss)\n        rs\n        (recur (rest xss) (rest yss) (concat rs [(first xss) (first yss)]))\n        ))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn my-interleave [seq1 seq2]\n  (mapcat #(vector %1 %2) seq1 seq2))","problem":39,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn func ([a b] (func a b '()))\n\t  ([a b c] (if (and (seq a) (seq b ))\n\t\t       (recur (rest a) (rest b) \n\t\t\t      (concat (concat c (cons (first a)'())) \n\t\t\t\t      (cons (first b)'())))\n\t\t       c\n\t\t       )))","problem":39,"user":"4ff8aa3fe4b0678c553fc39e"},{"problem":39,"code":"(fn [seq1 seq2] (reduce (fn [t [a b]] (conj t a b)  ) (map (fn [a b] [a b]) seq1 seq2) ))","user":"56d34480e4b0ea9b8538f7ac"},{"code":"(fn [seq-a seq-b] (mapcat (fn [a b] [a b]) seq-a seq-b))","problem":39,"user":"4e6dc95a535d5021c1a895f1"},{"problem":39,"code":"(fn [x y]\n  (if (> (count x) (count y))\n    (mapcat concat (reverse (zipmap (take (count y) x) y)))\n    (mapcat concat (reverse (zipmap x (take (count x) y))))\n  )\n)","user":"56874171e4b0dcc4269f405c"},{"problem":39,"code":"(fn [seqa seqb]\n   (\n    \n    loop [\n      counter (min (count seqa) (count seqb))\n      accum []\n      alpha seqa\n      beta seqb\n    ]\n\n    ( if (> counter 0)\n      (recur\n        (- counter 1)\n        (conj (conj accum (first alpha)) (first beta))\n        (rest alpha)\n        (rest beta)\n      )\n      accum\n    )\n )\n)","user":"54ff2968e4b07d26eda61d4a"},{"code":"(fn [xs ys]\n  (loop [as xs\n         bs ys\n         res []]\n    (if (or (empty? as) (empty? bs)) res (recur (rest as) (rest bs) (conj res (first as) (first bs))))))","problem":39,"user":"4f2ef48be4b0d6649770a06c"},{"problem":39,"code":"#(reverse (flatten (concat (zipmap %2 %1))))","user":"509b1204e4b0412cdea6eb1d"},{"code":"(fn my-interleave [f s]\n  (cond\n\t\t(or (empty? f) (empty? s)) (list)\n\t\t:else (cons (first f) (cons (first s) (my-interleave (rest f) (rest s))))\n\t)\n)","problem":39,"user":"4faacc04e4b081705acca201"},{"code":"(fn [list-x list-y]\n  (loop [r [] x list-x y list-y]\n    (if (and (seq x) (seq y))\n      (recur (conj r (first x) (first y)) (next x) (next y))\n      r)))","problem":39,"user":"4f36f5f2e4b0e243712b1ece"},{"code":"(fn [c1 c2]\n  (apply concat (for [x (range (min (count c1) (count c2)))]\n    [(nth c1 x) (nth c2 x)])))","problem":39,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":39,"code":"(fn my-interleave\n  ([xs ys]\n  (my-interleave [(first xs) (first ys)] (rest xs) (rest ys)))\n  ([out xs ys]\n  (if (or (empty? xs) (empty? ys))\n    out\n    (my-interleave (conj out (first xs) (first ys)) (rest xs) (rest ys)))\n   )\n  )","user":"560d4994e4b05f002753df3c"},{"problem":39,"code":"(fn [left right] (mapcat #(list %1 %2) left right))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":39,"code":"(fn my-interleave\n  [x y]\n  (flatten (map #(conj [] %1 %2) x y)))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn [& colls]\n  (flatten (apply mapcat list colls)))","problem":39,"user":"4fc66c43e4b0ee37620e1812"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         res []]\n    (if (and (first s1) (first s2))\n      (recur (rest s1) (rest s2) (conj res (first s1) (first s2)))\n      res)))","user":"5a8fd113e4b05369db4d2542"},{"problem":39,"code":"(fn sew[xs ys]\n  (flatten\n   (map list xs ys)))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"#(apply concat (reverse (zipmap %1 %2)))","problem":39,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":39,"code":"(fn rick-interleave [x y]\n\t(loop [x x y y acc []]\n\t\t(cond (or (empty? x) (empty? y))\n\t\t\t\t\tacc\n\t\t\t  (and (not (empty? x)) (empty? y)) \n\t\t\t  \t\t(recur (rest x) (rest y) (conj acc (first x)))\n\t\t\t  (and (empty? x) (not (empty? y))) \n\t\t\t  \t\t(recur (rest x) (rest y) (conj acc (first y)))\n\t\t\t  (and (not (empty? x)) (not (empty? y))) \n\t\t\t  \t\t(recur (rest x) (rest y) (conj (conj acc (first x)) (first y))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":39,"code":"(fn\n  [seq1 seq2]\n  (loop [seq1 seq1 seq2 seq2 list '()]\n    (if (and (not-empty seq1) (not-empty seq2))\n      (recur (rest seq1) (rest seq2) (conj list (first seq1) (first seq2)))\n      (reverse list))\n    )\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":39,"code":"(fn [lst1 lst2]\n  (flatten (map #(list %1 %2) lst1 lst2)))","user":"5691ef12e4b0dcc4269f40f8"},{"code":"(fn [coll1 coll2]\n(mapcat vector coll1 coll2))","problem":39,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [s1 s2]\n  (letfn [(intlv [s1 s2 c] \n    (if (or (empty? s1) (empty? s2)) \n      c \n      (recur (rest s1) (rest s2) \n      (conj (conj c (first s1)) (first s2)))))]\n    (intlv s1 s2 [])\n  )\n)","problem":39,"user":"4e8f4f64535d65386fec2149"},{"problem":39,"code":"(fn [a b]\n  (loop [[part1 & rest1] a\n         [part2 & rest2] b\n         interleaved []]\n    (if (or (= part1 nil) (= part2 nil))\n      interleaved\n      (recur rest1 rest2 (conj interleaved part1 part2)))))","user":"57d0679ee4b0bd073c202359"},{"code":"(fn interl [s1 s2] \n  (cond\n   (or (empty? s2) (empty? s1)) nil\n   :else (concat (list (first s1) (first s2)) (interl (rest s1) (rest s2)))))","problem":39,"user":"525aa499e4b0cb4875a45cf7"},{"problem":39,"code":"#(loop [x %1\n        y %2\n        acc '()]\n   (if (or (empty? x) (empty? y))\n       (reverse acc)\n       (recur (rest x)\n              (rest y)\n              (cons (first y)\n                    (cons (first x) acc)))))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [x y] (flatten (map #(conj '() % %2) y x)))","problem":39,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [x y] (flatten (map #(vector % %2) x y)))","problem":39,"user":"52c61564e4b0c2d177d62109"},{"code":"mapcat (fn [x y] [x y])","problem":39,"user":"4f215350e4b0d66497709fd0"},{"problem":39,"code":"(fn [xs ys]\n  (apply concat (map (fn [x y] [x y])\n                     xs ys)))","user":"53d20e14e4b00fb29b22131a"},{"code":"#(loop [x %, y %2, z '()]\n        (if (and x y)\n            (recur \n              (next x)\n              (next y)\n              (conj z (first x) (first y)))\n            (reverse z)))","problem":39,"user":"4f3cc2fbe4b0e243712b1f55"},{"problem":39,"code":"(fn inter [x y]\n  (when (and x y)\n  \t(cons (first x) (cons (first y)\n                          (inter (next x) (next y))))\n\t))","user":"5b7f2d75e4b047b03b203768"},{"problem":39,"code":"(fn my-interleave [x y] (if (not (or (empty? x) (empty? y))) (concat (list (first x) (first y)) (my-interleave (rest x) (rest y)))))","user":"554d48d3e4b00713264bd988"},{"code":"(fn [a b]\n  ((fn [a b acc]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (drop 1 a) (drop 1 b) \n        (concat acc (take 1 a) (take 1 b)))))\n    a b nil))","problem":39,"user":"4ef1ee67535dced4c769f219"},{"code":"#(mapcat list %1 %2)","problem":39,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":39,"code":"(partial (fn intrlv [to, a, b] \n   (if (or(empty? a) (empty? b))\n     to\n     (recur (conj to (first a) (first b)) (rest a) (rest b) ))\n) [])","user":"53ef78bee4b0742d9025b0cd"},{"problem":39,"code":"#( \n  (fn zip [x y a]\n   (if (or (empty? x) (empty? y))\n    a\n    (zip (rest x) (rest y) (conj a (first x) (first y)))))\n  %1\n  %2\n  [])","user":"5600bed5e4b04bb52996e170"},{"code":"(fn [xl1 xl2]\n  (loop [l1 xl1 l2 xl2 result nil]\n    (if (or (empty? l1) (empty? l2))\n  result\n      (recur (rest l1)\n\t     (rest l2)\n\t     (concat result \n\t\t     (list (first l1)\n\t\t\t   (first l2)))))))","problem":39,"user":"4f62ef0ce4b0defedf855fdc"},{"problem":39,"code":"(fn inter\n  [seq1 seq2]\n  (let [fseq1 (first seq1)\n        fseq2 (first seq2)]\n    (if (and fseq1 fseq2)\n      (concat [fseq1 fseq2] (inter (rest seq1) (rest seq2))))))","user":"5a6a32b6e4b0512ff01cda22"},{"code":"(fn [i1 i2]\n  (loop [l1 i1 l2 i2 acc '()]\n(if (or (empty? l1) (empty? l2))\nacc\n(recur (rest l1) (rest l2) (reverse (cons (first l2) (cons (first l1) (reverse acc))))))))","problem":39,"user":"4e43c91f535dc968683fc4a5"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten\n     (map #(list %1 %2) s1 s2)))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 i []]\n    (if (or (empty? s1) (empty? s2))\n      i\n      (recur (rest s1) (rest s2) (conj i (first s1) (first s2))))))","problem":39,"user":"4f03ebf7535dcb61093f6b7f"},{"problem":39,"code":"(fn [l1 l2] (flatten (reverse (map seq (zipmap l1 l2)))))","user":"53f5f740e4b0db01ade6f9d8"},{"problem":39,"code":"(fn [p q]\n  (flatten\n    (map #(list % %2) p q)))","user":"5537cbaee4b09218d5f44fd3"},{"problem":39,"code":"#(loop [a % b %2 out []]\n   (if (or (empty? a) (empty? b))out \n     (recur (rest a) (rest b) (conj out (first a) (first b)))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(comp #(reduce concat %1) #(map (fn [x y](cons x (list y))) %1 %2))","problem":39,"user":"504ffa26e4b0a02f9cffdead"},{"problem":39,"code":"(fn something ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n   (lazy-seq\n     (let [s1 (seq c1) s2 (seq c2)]\n       (when (and s1 s2)\n         (cons (first s1) (cons (first s2)\n                                (something (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n   (lazy-seq\n     (let [ss (map seq (conj colls c2 c1))]\n       (when (every? identity ss)\n         (concat (map first ss) (apply something (map rest ss))))))))","user":"5602842de4b04bb52996e1a1"},{"problem":39,"code":"#(loop [x [] y %1 z %2]\n   (if (or (empty? y) (empty? z))\n     x\n     (recur (conj x (first y) (first z)) (rest y) (rest z))))","user":"582c526ae4b051871117bf88"},{"code":"(fn [l1 l2] (mapcat #(list % %2) l1 l2))","problem":39,"user":"515d6281e4b00901442db1dc"},{"problem":39,"code":"(fn ! [a b] (if (or (empty? a) (empty? b)) '() (cons (first a) (cons (first b) (! (rest a) (rest b))))))","user":"52d7fff4e4b09f7907dd1383"},{"problem":39,"code":"(fn f [xs ys]\n  (let [[x & rest-xs] xs\n        [y & rest-ys] ys]\n    (if (and x y)\n      (cons x (cons y (f rest-xs rest-ys))))))","user":"55b28b57e4b01b9910ae296c"},{"code":"#(loop [x %1 y %2 result []] (if (or (empty? x) (empty? y)) result (recur (rest x) (rest y) (conj result (first x) (first y)))))","problem":39,"user":"52d4acc8e4b09f7907dd1333"},{"code":"(fn [col1 col2]\n  (let [cnt (min (count col1) (count col2))]\n     (loop [result [] lcnt cnt c1 col1 c2 col2]\n       (if (= lcnt 0)\n           result\n           (recur (concat result [ (first c1) (first c2) ] )\n                  (dec lcnt) (rest c1) (rest c2)\n    )))))","problem":39,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":39,"code":"(fn \n  [result seq1 seq2]\n  (let [item1 (first seq1)\n        item2 (first seq2)]\n    (if (and item1 item2)\n      (recur (conj result item1 item2) (rest seq1) (rest seq2))\n      result))) \n[]","user":"55996253e4b031d6649c9baa"},{"code":"(fn [a b] (mapcat #(conj [] %1 %2)  a b))","problem":39,"user":"4f23196ee4b0d66497709fe1"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [ns1 s1 ns2 s2 cs []]\n    (if (or (empty? ns1) (empty? ns2))\n      cs\n      (recur (rest ns1) (rest ns2)\n      (conj cs (first ns1) (first ns2))))))","user":"58eadeafe4b056aecfd47d28"},{"problem":39,"code":"#(flatten (map (fn [a b] (list a b)) % %2))","user":"532018efe4b08068f379edcd"},{"problem":39,"code":"(fn [x y]\n  (let [shortest (min (count x) (count y))]\n    ((fn [coll i]\n      (if-not \n        (< i shortest)\n        (seq coll)\n        (recur \n          (conj \n            (conj \n              coll\n              (nth x i))\n            (nth y i)) \n          (inc i))))\n        [] 0)))","user":"5d078e2de4b0cc9c915881fa"},{"problem":39,"code":"(fn [x y]\n  (mapcat #(conj [] %1 %2) x y))","user":"550f70bee4b06e50f9beb177"},{"problem":39,"code":"(fn my-interleave [seq1 seq2] (when (and seq1 seq2) (concat [(first seq1) (first seq2)] (lazy-seq (my-interleave (next seq1) (next seq2))))))","user":"55916d7be4b0604b3f94d57d"},{"problem":39,"code":"(fn [a b]\n    (loop [final []\n           one a\n           two b]\n        (if (or (empty? one) (empty? two))\n            final\n            (recur (conj final (first one) (first two)) (rest one) (rest two)))))","user":"5f6580e7e4b02876ed9fd023"},{"code":"(fn [left right]\n  (loop [lft left\n         rgt right\n         acc []]\n    (let [l (first lft)\n          r (first rgt)]\n      (if (or (= nil l) (= nil r))\n        acc\n        (recur (rest lft) (rest rgt)\n               (conj (conj acc l) r))))))","problem":39,"user":"5310e389e4b08068f379ecdb"},{"code":"(fn mi [[a & aa][b & bb]]\n  (if (or (nil? a) (nil? b)) nil\n  (conj (mi aa bb) b a))\n)","problem":39,"user":"53979a87e4b0b51d73faaef0"},{"problem":39,"code":"(fn [a b] (mapcat (fn [r s] [r s]) a b))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn mix [one two]\n  (let [a (first one)\n        b (first two)]\n    (if (and a b) (apply list a b (mix (rest one) (rest two))))))","problem":39,"user":"5074b3ece4b054001656acd5"},{"problem":39,"code":"#(loop \n   [a %1, b %2, res []]\n   (if (not (or (empty? a) (empty? b)))\n     (recur (rest a) (rest b) (conj (conj res (first a)) (first b)))\n      res))","user":"5e79fcb9e4b085ba37836e08"},{"code":"(fn [c1 c2]\n  (flatten (map vector c1 c2)))","problem":39,"user":"4dadba4dc9a9d6ed3899dc57"},{"problem":39,"code":"(fn [xs ys] (mapcat #(-> [%1 %2]) xs ys))","user":"56521a26e4b0f9d632dd845f"},{"problem":39,"code":"(fn [c1\n     c2]\n  (loop [[c1r & c1more :as all1] (seq c1)\n         [c2r & c2more :as all2] (seq c2)\n         acc '()]\n    (if (not (and all1 all2))\n      (reverse acc)\n      (recur c1more c2more (conj acc c1r c2r)))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":39,"code":"(fn\n  [a b]\n  (loop [aa a bb b res '()]\n    (if (or (empty? aa) (empty? bb))\n      res\n      (recur\n        (drop 1 aa)\n        (drop 1 bb)\n        (flatten (conj (conj (take 1 bb) (take 1 aa)) res))))))","user":"55a5e2f7e4b0acc240e31550"},{"code":"(fn [l1 l2]\n  (loop [l1 l1 \n        l2 l2\n        retval '()]\n        (if (or (empty? l1)(empty? l2))\n            (reverse retval)\n            (recur (rest l1) \n                   (rest l2)\n                   (cons (first l2) (cons (first l1) retval))))))","problem":39,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":39,"code":"(fn [& colls ] (flatten (map #(identity %&) (first colls) (second colls))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn f [a b]\n (let [len (min (count a) (count b))]\n  (flatten (for [i (range len)] (list (get a i) (get b i))))))","problem":39,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn [x1 x2]\n  (seq ((fn yyy [y1 y2 y3]\n    (if (or (empty? y1) (empty? y2)) y3\n        (yyy (rest y1) (rest y2) (conj y3 (first y1) (first y2))))\n    ) x1 x2 [])))","problem":39,"user":"5099283ce4b0cae2931060af"},{"code":"(fn fart [s t]\n  (if (or (empty? s) (empty? t))\n  '()\n  (concat (list (first s) (first t)) (fart (rest s) (rest t)))))","problem":39,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":39,"code":"(fn [x1 x2] (mapcat #(vector % %2) x1 x2))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":39,"code":"(fn inter [seq1 seq2]\n  (when (and (not-empty seq1) (not-empty seq2))\n    (cons (first seq1) (cons (first seq2) (inter (rest seq1) (rest seq2))))))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":39,"code":"(fn [a b] \n   (loop [a a\n          b b\n          return []]\n     (if (or (empty? a) (empty? b))\n       return\n       (recur (rest a) (rest b) (conj return (first a) (first b)))))\n   )","user":"57c44053e4b05aa3c4741ccb"},{"problem":39,"code":"#(loop [res [] in1 %1 in2 %2]\n   (cond\n    (nil? in1) res\n    (nil? in2) res\n    :else\n    (recur (conj res (first in1) (first in2)) (next in1) (next in2))))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":39,"code":"(fn [c1 c2]  \n  (loop [new [] n 0]\n    (if (= n (min (count c1) (count c2)))\n      new\n      (recur (into new (vector (nth c1 n) (nth c2 n))) (inc n))\n)))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(fn [a b]\n  (loop [out '() a a b b]\n    (if (or (empty? a) (empty? b))\n      (reverse out)\n      (recur (cons (first b) (cons (first a) out)) (rest a) (rest b)))))","problem":39,"user":"51757af0e4b085adf681d873"},{"code":"(fn [x y]\n  ((fn _build [x y out]\n    (if (or (empty? x) (empty? y))\n      (reverse out)\n      (_build (rest x)\n              (rest y)\n              (conj out (first x)\n                        (first y)))))\n    x y ()))","problem":39,"user":"4f047902535dcb61093f6bcc"},{"code":"(fn itl\r\n  [coll1 coll2]\r\n\t(loop [c1 coll1 c2 coll2 res []]\r\n\t\t;(println \"c1=\" c1 \" c2=\" c2)\r\n\t\t(if (or (= c1 nil) (= c2 nil))\r\n\t\t\tres\r\n\t\t\t(recur (next c1) (next c2) (conj res (first c1) (first c2))))))","problem":39,"user":"4edbae0d535d10e5ff6f531c"},{"code":"(fn ! [a-seq b-seq]\n  (if (or (empty? a-seq) (empty? b-seq))\n    '()\n    (cons (first a-seq) (cons (first b-seq) (! (rest a-seq) (rest b-seq))))))","problem":39,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":39,"code":"(fn interleave-custom\n  ([x] x)\n  ([x y]\n    (when (and (seq x) (seq y))\n      (cons (first x) (cons (first y) (interleave-custom (rest x) (rest y)) )))))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"(fn smash [one two]\n  (when (every? not-empty [one two])\n    (concat [(first one) (first two)] (smash (rest one) (rest two)))))","problem":39,"user":"4f0d093b535d0136e6c22313"},{"problem":39,"code":"#(loop [f1 %,f2 %2,rr []]\n   (if (or (empty? f1)\n           (empty? f2))\n     rr\n     (recur (rest f1) (rest f2)\n            (concat rr (vector (first f1) \n               (first f2))\n                 ))\n     ))","user":"56c50599e4b05cc29241ee9e"},{"code":"(fn [x y] (mapcat #(list %1 %2) x y))","problem":39,"user":"4ecc147b535d23f0362276f7"},{"code":"(fn inter\n  ([a b] (seq (inter a b [])))\n  ([a b result]\n    (if (or (empty? a) (empty? b))\n      result\n      (inter (rest a) (rest b) \n             (conj result (first a) (first b))))))","problem":39,"user":"4fe89efae4b07c9f6fd12c5b"},{"code":"(fn [la lb]\n  (loop [sa la sb lb acc []]\n    (if (or (empty? sa) (empty? sb))\n      acc\n      (recur (rest sa) (rest sb) (conj acc (first sa) (first sb))))))","problem":39,"user":"515828b8e4b0a069fd272c71"},{"problem":39,"code":"(fn [x y] (flatten (apply concat (map hash-map x y))))","user":"57887de2e4b0ebec4cfb751c"},{"code":"#(flatten (for [i (range (min (count %1) (count %2)))]\n           \t[(nth %1 i) (nth %2 i)]))","problem":39,"user":"52d07cc5e4b07d0d72b273bb"},{"code":"#(loop [res [], xs %&]\n  (if (some empty? xs)\n    res\n    (recur (concat res (for [x xs] (first x))) \n           (for [x xs] (rest x)))))","problem":39,"user":"4f0f9df7535d0136e6c22342"},{"problem":39,"code":"(fn [coll1 coll2] \n  (flatten \n   (filter identity \n          (map-indexed \n             (fn [idx itm] (if (>= (count coll2) (inc idx)) [itm (coll2 idx)]))\n           coll1))))","user":"52506e4ce4b0541d1855b82d"},{"code":"(fn [list1 list2]\r\n    (flatten (map\r\n        (fn [element1 element2]\r\n            (conj [] element1 element2))\r\n        list1\r\n        list2)))","problem":39,"user":"4dddf817535d08e6dec9fdd3"},{"problem":39,"code":"(fn [f s]\n   (loop [x (first f)\n          x1 (rest f)\n          y (first s)\n          y1 (rest s)\n          acc []]\n     (if (or (nil? x) (nil? y))\n       acc\n       (recur (first x1)\n              (rest x1)\n              (first y1)\n              (rest y1)\n              (conj acc x y)))))","user":"54a8ac6ce4b09f271ff37ca7"},{"problem":39,"code":"(fn [x y](loop [result [] arr1 x arr2 y]\n            \n           (if (or (= (count arr1) 0) (= (count arr2) 0))\n             result\n             (recur (conj result (first arr1) (first arr2)) (rest arr1) (rest arr2))\n             )\n        \n           )\n  )","user":"53e902a5e4b036ad0777e491"},{"code":"(fn inter [c d]\n  (let [c1 (first c) d1 (first d)]\n    (if (and c1 d1)\n      (conj (conj (inter (rest c) (rest d)) d1) c1)\n      )))","problem":39,"user":"4f82f1b9e4b033992c121c0f"},{"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    nil\n    (cons (first xs) (cons (first ys) (my-interleave (rest xs) (rest ys))))))","problem":39,"user":"523c6451e4b07becd5be2222"},{"problem":39,"code":"#(flatten (map vector %1 %2 ))","user":"5a285a38e4b07f18be40aa67"},{"problem":39,"code":"(fn miterleave [c1 c2] (flatten (map #(list %1 %2) c1 c2)))","user":"5900d5cde4b0438e51c2d02e"},{"problem":39,"code":"(fn [coll1 coll2] \n  (let [my-interleave (fn [res c1 c2]\n                        (if (or (empty? c1) (empty? c2))\n                          res\n                          (recur (conj res (first c1) (first c2))\n                                 (rest c1)\n                                 (rest c2))))]\n    (my-interleave [] coll1 coll2)))","user":"545f737ce4b01be26fd74688"},{"problem":39,"code":"(fn [x, y] (flatten (map vector x y)))","user":"601fe14ce4b0bf4ca6b1095c"},{"problem":39,"code":"(fn splice [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (splice (rest xs) (rest ys)) (first ys) (first xs))))","user":"5888f271e4b0f1effa3b7726"},{"code":"#(loop [iter 0\n         result []\n         size (min (count %1) (count %2))]\n   (if (>= iter size)\n     result\n     (recur (inc iter) (conj result (nth %1 iter) (nth %2 iter)) size)))","problem":39,"user":"531d34cfe4b08068f379edac"},{"problem":39,"code":"(fn intx [x y] \n  \t(if \n    \t(or (empty? x) (empty? y))\n    \t[]\n    \t(concat [(first x)] [(first y)] (intx (rest x) (rest y) ))\n    \t)\n    )","user":"54a1d643e4b09f271ff37c50"},{"problem":39,"code":"(fn \n  [coll1 coll2]\n  (mapcat #(list %1 %2) coll1 coll2))","user":"566f7749e4b0a866af6896e9"},{"code":"(fn [arg1 arg2]\n  (mapcat vector arg1 arg2)\n)","problem":39,"user":"4e8a6bb0535d65386fec210b"},{"code":"(fn ntr [lst1 lst2]\n  (if (and \n        (not (empty? lst1))\n        (not (empty? lst2))\n        )\n    (conj (ntr (rest lst1) (rest lst2)) (first lst2) (first lst1))\n    '()\n  )\n  )","problem":39,"user":"4ecfa05c535d44c135fd68b9"},{"problem":39,"code":"(fn il1 [v1 v2] (if (empty? v1) v1 (if (empty? v2) v2 (cons(first v1) (cons (first v2) (il1 (rest v1) (rest v2)))))))","user":"55a0e139e4b0acc240e31504"},{"problem":39,"code":"(fn eh [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (conj (conj (eh (rest x) (rest y)) (first y)) (first x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [l1 l2] (flatten (map list l1 l2)))","problem":39,"user":"525de512e4b0cb4875a45d8a"},{"problem":39,"code":"(fn [x y]\n    (loop[res '() l1 x l2 y]\n      (if (or (empty? l1) (empty? l2))\n        (reverse res)\n        (\n          recur\n          (conj res (first l1) (first l2))\n          (rest l1)\n          (rest l2)\n\n        )\n      \n      )\n    )\n\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":39,"code":"(fn [colla collb]\n   (loop [[ah & at] colla\n          [bh & bt] collb\n          sofar []]\n     (if (or (nil? ah) (nil? bh))\n       sofar\n       (recur at bt (conj sofar ah bh)))))","user":"54159032e4b01498b1a719f5"},{"code":"(fn[a b](flatten\n\t(map\n\t\t(fn[x y](list x y)) a b)))","problem":39,"user":"529952a4e4b02ebb4ef75081"},{"code":"(fn [xs ys] \n         (loop [xs xs ys ys coll ()]\n           (if (or (empty? xs) (empty? ys)) \n             coll\n             (recur (rest xs) (rest ys)  (concat (concat coll (list (first xs))) (list (first ys)))))))","problem":39,"user":"516733fce4b079759a74a5e9"},{"code":"(fn [x y]\n  (apply concat (let [min-size (min (count x) (count y))]\n    (for [i (range min-size)]\n      [(nth x i) (nth y i)]))))","problem":39,"user":"4fa176c7e4b0dcca54ed6d5e"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (concat\n     (list (first xs) (first ys))\n     (lazy-seq (my-interleave (rest xs) (rest ys)))))\n  )","user":"5641296de4b08d4f616f5ef4"},{"problem":39,"code":"(fn [x y]\n     (mapcat (fn [a b] [a b]) x y))","user":"59e48db0e4b08badc2a0c53e"},{"code":"(fn interleave2 [a b]\n  (flatten\n    (if (or (empty? a) (empty? b))\n      ()\n      (list (first a) (first b) (interleave2 (next a) (next b))))))","problem":39,"user":"5383668ee4b06839e8705edd"},{"code":"(fn [left right]\n  \"Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.\"\n  (loop [l left\n         r right\n         acc (vector)]\n    (if (or (empty? l) (empty? r))\n      (seq acc)\n      (recur (rest l) (rest r) (conj acc (first l) (first r))))))","problem":39,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":39,"code":"(fn [one two]\n  (loop [one one two two acc []]\n    (if (and (first one) (first two))\n      (recur (rest one) (rest two) (conj acc (first one) (first two)))\n      acc)))","user":"55dd0aebe4b050e68259b3bf"},{"problem":39,"code":"(fn intle [coll1 coll2]\n  (loop [x (first coll1), xs (rest coll1), y (first coll2), ys (rest coll2), return []]\n    (if (or (empty? xs) (empty? ys))\n      (conj return x y)\n      (recur (first xs) (rest xs) (first ys) (rest ys) (conj return x y))\n    )\n  )\n)","user":"53ef3adfe4b0742d9025b0c9"},{"code":"(fn interleft [[l & left] [r & right]] \n  (if \t(and (seq left) (seq right)) \n\t\t(cons l (cons r (interleft left right)))\n\t\t(list l r)))","problem":39,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":39,"code":"(fn[col1 col2]\n  (loop [col1 col1\n         col2 col2\n         res []]\n    (if (or (empty? col1) (empty? col2))\n      res\n      (recur (rest col1) (rest col2) (conj (conj res (first col1)) (first col2))))))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn [col1 col2]\n  (loop [[x & xs] col1, [y & ys] col2, acc '()]\n    (if (or (nil? x) (nil? y))\n      (reverse acc)\n      (recur xs ys (conj acc x y)))))","problem":39,"user":"4f1c2a3a535d64f603146480"},{"problem":39,"code":"(fn [x y]\n  (flatten (into () (zipmap x y))) )","user":"5785de4ce4b0ebec4cfb74e6"},{"code":"(fn z [a b] \n  (if (and (seq a) (seq b))\n    (conj (z (rest a) (rest b)) (first b) (first a))\n    ()))","problem":39,"user":"52bb27fee4b07a9af57922df"},{"code":"(fn [c1 c2] (mapcat (fn [x1 x2] [x1 x2]) c1 c2))","problem":39,"user":"4fa09916e4b0dcca54ed6d4e"},{"code":"(comp flatten #(map list % %2))","problem":39,"user":"52138dd7e4b0d32679a5065d"},{"code":"(fn f [xs ys] (if (some empty? [xs ys]) '() (cons (first xs)\n  (cons (first ys)\n    (lazy-seq (f (rest xs) (rest ys)))))))","problem":39,"user":"504f865ee4b0a02f9cffde90"},{"problem":39,"code":"(fn [xs1 xs2]\n  (loop [col1 xs1\n         col2 xs2\n         acc []]\n    (if  (or (empty? col1) (empty? col2))\n      acc\n      (recur (rest col1) (rest col2) (conj acc (first col1) (first col2))))\n\n    ))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"#(loop [l0 %1 l1 %2 ans []]\n  (if (or (empty? l0) (empty? l1))\n    ans\n    (recur\n      (rest l0)\n      (rest l1)\n      ;(conj (conj ans (first l0)) (first l1))\n      (-> ans \n        (conj (first l0))\n        (conj (first l1))\n      )\n    )\n  )\n)","problem":39,"user":"51f09f3de4b0274c496158d7"},{"code":"#(let [ l (min (.size %) (.size %2))]  \n  (loop [n 0 r []]\n    (if (= n l) \n      r\n      (recur (inc n) (conj r (% n) (%2 n))))))","problem":39,"user":"4ef355e3535dced4c769f228"},{"problem":39,"code":"(fn my-interleave [& xs]\n  (if (every? (comp not empty?) xs)\n    (into \n      (apply my-interleave (map rest xs)) \n      (reverse (map first xs)))\n    '()))","user":"5606ea56e4b08b23635d317b"},{"problem":39,"code":"(fn into2\n  [seq1 seq2]\n  (#(mapcat vector %1 %2) seq1 seq2))","user":"5c7dad57e4b0d597f478caba"},{"problem":39,"code":"#(reduce concat (apply map vector %&))","user":"5acaa269e4b0e27600da77e6"},{"code":"(fn [num1 num2]\n  (flatten (for [x (range 0 (min (count num1) (count num2)))]\n    [(get num1 x) (get num2 x)])))","problem":39,"user":"4fc559eae4b0ee37620e17f3"},{"code":"(fn f [a b]\n  (loop [l1 a\n         l2 b\n         result []]\n    (if (or (empty? l1) (empty? l2))\n      result\n      (recur (rest l1) (rest l2) (conj (conj result (first l1)) (first l2)))\n      )\n    ))","problem":39,"user":"516bc02ce4b005fd0cdf85c5"},{"problem":39,"code":"(fn interleaver \n  ([int coll] (interleaver int coll []))\n  ([int coll my-coll]\n   (if (or (empty? int) (empty? coll))\n     my-coll\n     (interleaver (rest int) (rest coll) (conj my-coll (first int) (first coll))))))","user":"6033f8e9e4b0d5df2af222c6"},{"code":"(fn [& ls] (apply mapcat (fn [& els] els) ls))","problem":39,"user":"4ed292ac535d44c135fd68d9"},{"problem":39,"code":"(fn [x y]\n   (flatten (map #(list %1 %2) x y)))","user":"5954108ae4b066ee0a44aef4"},{"code":"#(loop [combined []\n         seq1 %\n         seq2 %2]\n\n    (if (or (empty? seq1) (empty? seq2))\n      combined\n      (recur (conj combined (first seq1) (first seq2)) (rest seq1) (rest seq2))\n      )\n    \n    )","problem":39,"user":"51a865dfe4b08d8ec191b80f"},{"code":"(fn [x y] (loop [i 0 l '()] (if (or (= i (count x)) (= i (count y))) (reverse l) (recur (inc i) (conj l (nth x i) (nth y i))))))","problem":39,"user":"537e4259e4b06839e8705e9e"},{"code":"(fn [x y] \n  (mapcat #(conj [%1] %2) x y))\n\n;(fn [x y] \n;  ((concat (map #(conj[%1] %2) x y))))\n\n;(fn interl [x y] \n;  (if (or (nil? x) (nil? y)) \n;    [] \n;    (concat [(first x) (first y)] (interl (rest x) (rest y)))))\n\n;(fn interl [u v] \n;  (loop [a [] x u y v]\n;  (if (or (nil? x) (nil? y)) \n;    a\n;    (recur (concat a [(first x) (first y)]) (rest x) (rest y)))))","problem":39,"user":"513b77f3e4b00f740c76c403"},{"problem":39,"code":"(fn [x y] (flatten (map #(conj '() %2 %1) x y)))","user":"57b45257e4b0fbc9809a2796"},{"problem":39,"code":"(fn f [a b] \n    (if-not (or (nil? (first a)) (nil? (first b)))\n      (cons (first a) \n            (cons (first b) (f (rest a) (rest b))\n            )\n      )\n    )\n  )","user":"5416aacce4b01498b1a719ff"},{"code":"(fn [x y] (loop [rslt [], one x, two y]\n            (if (and (seq one) (seq two))\n              (recur (conj \n                     (conj rslt (first one)) (first two))\n                     (rest one) (rest two))\n              (seq rslt))))","problem":39,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn f [[a & as] [b & bs]] (if (and a b) (concat [a b] (f as bs))))","problem":39,"user":"4edb4c7c535d10e5ff6f5318"},{"code":"(fn[a b] (apply concat (map (fn[& x] x) a b)))","problem":39,"user":"4ddbd934535d02782fcbe9fc"},{"problem":39,"code":"(fn \n  [abc ABC] \n  (reduce concat (map #(list %1 %2) abc ABC))\n)","user":"56449e4de4b0284900eef5f9"},{"problem":39,"code":"(fn [xs ys]\n  (loop [result []\n         rem-xs xs\n         rem-ys ys]\n    (if (or (empty? rem-xs) (empty? rem-ys))\n      result\n      (recur (conj result (first rem-xs) (first rem-ys)) (rest rem-xs) (rest rem-ys)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         acc []]\n    (if (some empty? [xs ys])\n      acc\n      (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":39,"code":"(fn [s1 s2]\n     (mapcat (fn [& args] (vec args)) s1 s2))","user":"56936547e4b0dcc4269f4101"},{"code":"(fn my-interleave [sq1 sq2]\r\n  (reduce concat\r\n          (map (fn [a b] [a b]) sq1 sq2)))","problem":39,"user":"4f71db68e4b07046d9f4f015"},{"code":"(fn [a b]                                                                                                                                 \n  (loop [acc [] foo a bar b]                                                                                                             \n   (if (and foo bar)                                                                                                                     \n     (recur (conj acc (first foo) (first bar)) (next foo) (next bar))                                                                    \n     acc)))","problem":39,"user":"4db88b37535d1e037afb2199"},{"code":"#(flatten (reverse (zipmap % %2)))","problem":39,"user":"4efb87f7535dced4c769f279"},{"problem":39,"code":"(fn intrlv [[a & resta] [b & restb]]\n  (if (not (and a b))\n    []\n    (concat [a b] (intrlv resta restb))))","user":"5f37263de4b0574c87022c4e"},{"problem":39,"code":"(fn my-interleave [f s]\n  (if (and f s)\n    (cons (first f) (cons (first s) (my-interleave (next f) (next s))))\n    '()))","user":"5b107263e4b0cc2b61a3be22"},{"code":"(fn xxx [[x1 :as xs1] [x2 :as xs2]]\n  (lazy-seq\n   (let [s1 (seq xs1)\n         s2 (seq xs2)]\n     (if (and (not= nil (first s1)) (not= nil (first s2)))\n       (cons x1 (cons x2 (xxx (rest s1) (rest s2))))))))","problem":39,"user":"5163a7bbe4b055933a9ca02f"},{"code":"(fn[& x](flatten (map vector (first x) (second x))))","problem":39,"user":"52d33ac5e4b099d49816f0c0"},{"problem":39,"code":"(fn [s1 s2]\n                     (loop [s1 (seq s1)\n                            s2 (seq s2)\n                            out []]\n                       (if (or (empty? s1)\n                               (empty? s2))\n                         out\n                         (recur (rest s1)\n                                (rest s2)\n                                (conj out (first s1) (first s2))))))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn [a b]\n  (let [min (min (count  a) (count b))]\n    (loop [x (take min a)\n           y (take min b)\n           res []]\n      (if (empty? x)\n        (reverse   res)\n        (recur (rest x) (rest y) (into [(first  y) (first  x)] res)))     \n      )))","problem":39,"user":"4fea1f9ee4b0547ebccb248b"},{"code":"#(flatten (for [i (range (min (count %1) (count %2)))] [(%1 i) (%2 i)]))","problem":39,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn intrlv [one two] (if (or (empty? one) (empty? two)) \n  '() (cons (first one) (cons (first two) (intrlv (rest one) (rest two))))))","problem":39,"user":"4f036d6e535dcb61093f6ac0"},{"problem":39,"code":"(fn its [s1 s2]\n\t(if (or (empty? s1) (empty? s2))\n\t\t[]\n\t\t(cons (first s1) (cons (first s2) (its (rest s1) (rest s2)) ))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":39,"code":"(fn [c1 c2] \n  (let [l (min (count c1) (count c2))] \n  (mapcat #(vector (nth c1 %) (nth c2 %)) (range l))))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":39,"code":"#(loop [r [] a %1 b %2]\n   (if (or (empty? a) (empty? b))\n     r\n     (recur \n      (conj r (first a) (first b))\n      (rest a)\n      (rest b))))","user":"571346c0e4b07c98581c3a9b"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [a l1\n         b l2\n         c []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (conj c (first a) (first b)))\n      c\n    )\n  )\n )","user":"4e28ddd1535deb9a81d77efd"},{"problem":39,"code":"(fn [a b]\n  (mapcat (fn [a b] [a b]) a b))","user":"5f37839ee4b0574c87022c59"},{"problem":39,"code":"#(loop [x %\n        y %2\n        z []]\n   (if (or (= (count x) 0) (= (count y) 0))\n     z\n     (recur (rest x) (rest y) (conj z (first x) (first y)))))","user":"53c74cfce4b00fb29b2212a7"},{"problem":39,"code":"(fn interleave-seqs [xs ys]\n  (mapcat vector xs ys))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn [xa xb]\n  (loop [res []\n         a xa\n         b xb]\n    (if (or (empty? a) (empty? b))\n      res\n      (recur (conj res (first a) (first b)) (rest a) (rest b))\n      )))","problem":39,"user":"52a7fec0e4b0c58976d9ac25"},{"problem":39,"code":"(fn [a b]\n  (mapcat #(conj [] %1 %2) a b)\n)","user":"58670d13e4b0f14aab7c8871"},{"code":"(fn my-interleave\n  [l1 l2]\n  (cond\n   (empty? l1) nil\n   (empty? l2) nil\n   :else (cons (first l1) (cons (first l2)\n                                (my-interleave (rest l1) (rest l2))))))","problem":39,"user":"5170643ee4b004f79986ad89"},{"code":"(fn [xs ys]\r\n   (flatten\r\n  (take (double (min (count xs) (count ys)))\r\n    (mapcat #(list (map first %))\r\n       (iterate\r\n          (fn [ss] (map (partial drop 1) ss))\r\n          (list xs ys)\r\n          )))))","problem":39,"user":"4eeae8f0535d93acb0a668a2"},{"code":"(fn solution [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    ()\n    (cons (first coll1)\n      (cons (first coll2)\n        (solution (rest coll1) (rest coll2))))))","problem":39,"user":"4f4a17ffe4b0d56e7bb92c05"},{"problem":39,"code":"(fn [& args] (reduce concat (apply (partial map list) args)))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [a b] (mapcat #(vector %1 %2) a b))","problem":39,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"#(reduce (fn [s t] (concat s t))\n    '()\n     (map\n       (fn [x] (conj [] (nth %1 x) (nth %2 x)))\n       (for [x (range 0 (min (count %1) (count %2)))] x)\n     )\n   )","problem":39,"user":"527513d8e4b03e8d9a4a74bd"},{"code":"#(reduce concat (map (fn [x y] [x y]) % %2))","problem":39,"user":"511ac2ede4b0c87c59c9670f"},{"problem":39,"code":"(fn ileave [a b] (if (and (not (empty? a)) (not (empty? b)))\n            (cons (first a) (cons (first b) (ileave (rest a) (rest b))))\n            nil))","user":"551ebcd7e4b08d5046aa8a4a"},{"problem":39,"code":"(fn [x y] (apply concat (mapv vector x y)))","user":"5fab003de4b08cb800c85ad1"},{"problem":39,"code":"(fn [a b]\n  (apply concat\n  (map #(vector %1 %2) a b)))","user":"562c15d3e4b058fa18c5a6d5"},{"problem":39,"code":"(fn\n  [x y]\n  (loop [xr x\n         yr y\n         r []]\n    (if (or (empty? xr) (empty? yr))\n      (reduce concat r)\n      (recur (rest xr) (rest yr) (conj r [(first xr) (first yr)])))))","user":"5866b999e4b0f14aab7c886b"},{"problem":39,"code":"#(->> %1\n        (map-indexed (fn [i v]\n                       (when-let [b (get %2 i)]\n                         [v b])))\n        (remove nil?)\n        flatten)","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":39,"code":"(fn minterleave\n  [c1 c2]\n  (let\n      [cnt1 (count c1)\n       cnt2 (count c2)\n       c1 (if (> cnt1 cnt2) (take cnt2 c1) c1)\n       c2 (if (> cnt2 cnt1) (take cnt1 c2) c2)]\n    (reduce #(concat %1 %2) (map #(vec [%1 %2]) c1 c2))\n    ))","user":"540efe2ee4b0addc1aec6724"},{"code":"(fn [xs ys] (flatten (map (fn [x y] [x y]) xs ys)))","problem":39,"user":"4dc1bd76535d020aff1edf8d"},{"problem":39,"code":"(fn [left right]\n  (flatten (map vector left right)))","user":"55934bebe4b0c79f6e1db93b"},{"problem":39,"code":"#(loop[c1 %1 c2 %2 result []]\n  (if (or (empty? c1) (empty? c2))\n     result    \n    (recur (rest c1) (rest c2) (conj result (first c1) (first c2)))))","user":"54eee38ce4b024c67c0cf878"},{"problem":39,"code":"(fn myinterleave [& lsts]\n  (if (not-any? empty? lsts)\n    (concat (map first lsts)\n            (apply myinterleave (map rest lsts)))\n    nil))","user":"589c6914e4b00487982d535d"},{"problem":39,"code":"(fn [x y]\n         ((fn [a b coll]\n           (let [fa (first a)\n                 ra (rest a)\n                 fb (first b)\n                 rb (rest b)\n                 newcol (conj (conj coll fa) fb)]\n             (if (or (empty? ra) (empty? rb))\n               newcol\n               (recur ra rb newcol))))\n          x y []))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":39,"code":"(fn weave [s1 s2] (if (and (first s1) (first s2)) (concat [(first s1) (first s2)] (weave (rest s1) (rest s2))) []))","user":"5b465b8be4b02d533a91bc65"},{"problem":39,"code":"(fn my-interleave [sequence1 sequence2]\n  (loop [seq1 sequence1\n         seq2 sequence2\n         accumulator '()]\n    (if (or (empty? seq1) (empty? seq2))\n      (reverse accumulator)\n      (recur (rest seq1) (rest seq2) (let [s1 (first seq1)\n                                           s2 (first seq2)]\n                                       (conj accumulator s1 s2))))))","user":"58daae01e4b0a4d5acaab664"},{"problem":39,"code":"(fn \n  [& lists]\n  (loop [out []\n         lists lists]\n\t  (if (some empty? lists)\n        out\n        (recur (into out (map first lists)) (map rest lists)))))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":39,"code":"(fn [x y] (reduce concat (map (fn [z] (list (nth x z) (nth y z))) (range (min (count x) (count y))))))","user":"542da97ae4b0dad94371f2ba"},{"problem":39,"code":"#((fn [s1 s2 a] (if (or (empty? s1) (empty? s2)) a (recur (rest s1) (rest s2) (conj a (first s1) (first s2))))) %1 %2 [])","user":"5659679ae4b068f2fe63dbeb"},{"code":"#(loop [in1 %1 in2 %2 out '()]\n  (if (or (not in1) (not in2))\n    out\n    (recur (next in1) (next in2) (concat out (list (first in1) (first in2))))))","problem":39,"user":"4f3c772de4b0e243712b1f4c"},{"code":"mapcat vector","problem":39,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [x y]\r\n  (loop [left x right y product []]\r\n    (if (or (empty? left) (empty? right))\r\n      product\r\n      (recur (rest left) (rest right) (concat product [(first left) (first right)])))))","problem":39,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":39,"code":"(fn my-interleave2 [l1 l2]\n  (reduce concat [] (map #(vector %1 %2) l1 l2)))","user":"574f1c24e4b02ea114799255"},{"problem":39,"code":"(fn [c1 c2]\n  (->> (map (fn [a b] [a b]) c1 c2)\n       (flatten)))","user":"6098263be4b00e9e6653c3f9"},{"code":"(comp flatten reverse (partial into []) zipmap)","problem":39,"user":"538be6afe4b0640c7a9a58c9"},{"problem":39,"code":"(fn [& lsts]\n   (let [[lst1 lst2] lsts]\n  \t(loop [l-1 lst1 l-2 lst2 nl []] \n      \t(if (or (empty? l-1) (empty? l-2)) \n          \tnl\n          \t(recur (rest l-1) (rest l-2) (conj nl (first l-1) (first l-2)))))))","user":"56483f45e4b0284900eef62b"},{"problem":39,"code":"(fn [& xs] (apply (partial mapcat vector) xs))","user":"548cd637e4b0e286459a1210"},{"problem":39,"code":"(fn my-interleave\n  [v1 v2]\n   (when (and (not-empty v1) (not-empty v2))\n     (cons (first v1) (cons (first v2) (my-interleave (rest v1) (rest v2))))))","user":"5e348945e4b0650de70e2b1d"},{"code":"(fn [& args]\n  (loop [acc []\n         colls args]\n    (if (some empty? colls)\n      acc\n      (recur (concat acc (map #(first %) colls)) (map #(rest %) colls)))))","problem":39,"user":"50f0ec9ce4b0d527ce5b30df"},{"code":"#(flatten (seq (reverse (zipmap % %2))))","problem":39,"user":"4eb44d78535d7eef30807360"},{"problem":39,"code":"(fn ip [& seqs]\n  (let [m (apply min (map count seqs))\n        to-take (* m (count seqs))]\n      (take to-take (mapcat identity (apply map vector seqs)))))","user":"56c21eafe4b05cc29241ee7e"},{"problem":39,"code":"(fn myinterleave\n  [x y]\n    (loop [x x y y res []]\n      (if (or (<= (count x) 0) (<= (count y) 0))\n        res\n        (recur (rest x) (rest y) (conj (conj res (first x)) (first y))))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"code":"(fn [x y] \n  (loop [f x s y results []] \n    (if (or (empty? f) (empty? s)) \n      results \n      (recur (rest f) (rest s) (conj (conj results (first f)) (first s))))))","problem":39,"user":"5314318ee4b08068f379ed13"},{"problem":39,"code":"(fn [& seqs]\n                   ((fn aux [rv seqs]\n                       (if (some nil? (map first seqs))\n                         rv\n                         (aux (concat rv (map first seqs)) (map rest seqs))))\n                    '() seqs)\n                   )","user":"5a813b90e4b00b71e582a065"},{"problem":39,"code":"(fn intlv\n  ([x y ret]\n   (if (or (empty? x) (empty? y))\n     ret\n     (intlv (rest x) (rest y) (conj ret (first x) (first y)))))\n  ([x y]\n   (intlv x y [])))","user":"53cf278ce4b00fb29b2212fb"},{"code":"(fn my-interleave [a b]\n  (if (or (empty? a) (empty? b))\n      []\n      (cons (first a) (cons (first b) (my-interleave (rest a) (rest b)))))\n)","problem":39,"user":"4f0f40d3535d0136e6c2233b"},{"code":"(fn [x y]\n   (if (= (min (count x) (count y)) (count y))\n     (reduce (fn [a b]\n               (assoc a \n                      (count a) (first (drop (/ (count a) 2) x))\n                      (inc (count a)) b)\n               ) [] y)\n     (reduce (fn [a b]\n               (assoc a\n                      (count a) b\n                      (inc (count a)) (first (drop (/ (count a) 2) y)) )\n               ) [] x)\n   )\n   )","problem":39,"user":"528ce039e4b0239c8a67aebc"},{"problem":39,"code":"(fn [seq1 seq2] (into [] (flatten (map #(into [] [%1 %2]) seq1 seq2))))","user":"525fea12e4b03e8d9a4a7025"},{"problem":39,"code":"(fn [one two] \n         (loop [one one two two result ()]\n\n           (cond (or (empty? one) (empty? two)) (reverse result)\n                 :default (recur (rest one) (rest two) (conj result (first one) (first two)))\n                 )\n           )\n\n         )","user":"56747b46e4b05957ce8c613b"},{"problem":39,"code":"(fn [seq-1 seq-2]\n  (apply concat (map vector seq-1 seq-2)))","user":"5461c402e4b01be26fd746a6"},{"code":"(fn [c1 c2]\n  (apply concat (map vector c1 c2)))","problem":39,"user":"4f036d18535dcb61093f6abe"},{"code":"(fn inter [a b]\n  (loop [a a b b acc []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (conj acc (first a) (first b)))\n      acc)))","problem":39,"user":"4f0ef874535d0136e6c22328"},{"problem":39,"code":"(fn [list1 list2] (apply concat (map (fn [a b] (list a b)) list1 list2)))","user":"51cf815de4b0e42293a22575"},{"problem":39,"code":"(fn [a,b] (flatten (map #(list % %2) a b)))","user":"5f686436e4b02876ed9fd03c"},{"problem":39,"code":"(fn [as bs]\n  (loop [xs as\n         ys bs\n         result ()]\n    (if (some empty? [xs ys])\n      (reverse result)\n      (recur\n        (rest xs)\n        (rest ys)\n        (cons (first ys) (cons (first xs) result))))))","user":"5524120fe4b0882d96d091b7"},{"problem":39,"code":"#(loop [f % s %2 new []]\n   (if (and (not (empty? f))\n            (not (empty? s)))\n     (recur (rest f)\n            (rest s)\n            (conj new (first f) (first s))            )\n     new))","user":"57861b0ce4b0ebec4cfb74ef"},{"code":"(fn mix-in [xs ys]\n  (if (or (empty? ys)(empty? xs))\n    '()\n    (conj (mix-in (rest xs)(rest ys)) (first ys) (first xs))))","problem":39,"user":"53120cb5e4b08068f379ecf0"},{"problem":39,"code":"(let [f (fn f [a b]\n          (if (= (min (count a) (count b)) 0)\n            []\n            (conj (f (rest a) (rest b)) (first b) (first a))))]\n  (fn [a b] (reverse (f a b))))","user":"572ee822e4b0cd1946bd0f91"},{"code":"(fn [& params] (apply concat (apply map (fn [& params] params) params)))","problem":39,"user":"51e61772e4b0efabf93c02e2"},{"problem":39,"code":"(partial mapcat #(apply list %&))","user":"54cd651be4b057c6fda3a2a2"},{"problem":39,"code":"(fn my-inter [x y]\n  (loop [a x b y c []]\n    (if (or (nil? a) (nil? b)) c\n       (recur (next a) (next b) (concat c (list (first a)) (list (first b))))\n      )\n    )\n  )","user":"55f95de6e4b03cbcff9738c1"},{"problem":39,"code":"#(loop [x (first %1) xs (rest %1) y (first %2) ys (rest %2) coll []]\n   (if (and x y)\n     (recur (first xs) (rest xs) (first ys) (rest ys) (conj coll x y))\n     coll))","user":"54e2a779e4b024c67c0cf7d3"},{"code":"(fn [a b]\n  (loop [x a\n         y b\n         count (min (count x) (count y))\n         acc []]\n    (if (zero? count)\n      acc\n      (recur (next x) (next y) (dec count) (-> acc (conj (first x)) (conj (first y)))))))","problem":39,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":39,"code":"(fn my-interleave [collA collB]\n  (apply concat (map (fn [a b] [a b]) collA collB)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn i [x y]\n    (if\n      (and\n        (seq x)\n        (seq y))\n      (conj\n        (i\n          (rest x)\n          (rest y))\n        (first y)\n        (first x)\n        )))","problem":39,"user":"508c33ece4b0f17d83ea26b1"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [result [] coll1 coll1 coll2 coll2]\n    (if (or (empty? coll1) (empty? coll2))\n      result\n      (recur (into result [(first coll1) (first coll2)]) (rest coll1) (rest coll2)))))","user":"58a6806ee4b01a0c0b23292f"},{"problem":39,"code":"(fn f[x y] (if(and (not-empty x) (not-empty y)) ( concat [(first x) (first y)] (f (rest x) (rest y))) []))","user":"5515b68de4b055c2f668d4ef"},{"problem":39,"code":"#(reverse (loop [a %1 b %2 r '()]\n   (cond \n     (empty? a) r\n     (empty? b) r\n     :else (recur \n              (rest a)\n              (rest b)\n              (conj r (first a) (first b))\n            )\n   )\n))","user":"5e7aba9fe4b085ba37836e0c"},{"code":"(fn f [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n      '()\n      (let [[h1 & t1] s1\n            [h2 & t2] s2] (list* h1 h2 (f t1 t2)))))","problem":39,"user":"52dfc89be4b09f7907dd1405"},{"problem":39,"code":"(fn interl [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interl (rest s1) (rest s2))))))))","user":"53c73fb7e4b00fb29b2212a6"},{"problem":39,"code":"(fn [a b] \n  (mapcat #(list %1 %2) a b))","user":"55469eede4b0a04f79299542"},{"problem":39,"code":";(fn [x y] \n;  (flatten \n;   (for [i (range (min (count x) (count y)))]\n;     (conj [] (get x i) (get y i)))))\n\n;mapcat vector\n\n;#(apply concat (map vector %1 %2))\n\n#(flatten (map vector %1 %2))","user":"58d2af83e4b03c36ff7e5907"},{"problem":39,"code":"(fn [x y]\n  (loop [a (seq x) b (seq y) result []]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (rest a) (rest b) (conj result \n                                     (first a) \n                                     (first b))))))","user":"528d6b10e4b0239c8a67aec3"},{"problem":39,"code":"(fn my-interleave [c1 c2]\n  (let [x1 (first c1) x2 (first c2)]\n    (if (and x1 x2) (concat (list x1 x2) (my-interleave (rest c1) (rest c2)))\n        '())))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (mapcat vector s1 s2))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(fn il\n  ([x,y] (il x y []))\n  ([x,y,r]\n   (if (or (== 0 (count x)) (== 0 (count y)))\n     (reverse (flatten r))\n     (il (rest x) (rest y) (cons (first y) (cons (first x) r))))))","problem":39,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn f [l1 l2]\n    (let [[h1 & t1] l1 [h2 & t2] l2]\n\t  (if (or (nil? h2) (nil? h1))\n         []\n\t     (into [h1 h2] (f t1 t2))\n\t  )\n\t)\n  )","problem":39,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [x y] (mapcat (fn [y z] [y z]) x y))","problem":39,"user":"4f036fad535dcb61093f6ac7"},{"code":"#((fn self [xs xs1 xs2]\n  (if (or (empty? xs1) (empty? xs2)) xs  (self (conj xs (first xs1) (first xs2)) (rest xs1) (rest xs2)))) [] % %2)","problem":39,"user":"50b35486e4b03ea88043356a"},{"problem":39,"code":"(comp (partial reduce into) (partial map vector))","user":"54cbe00ee4b057c6fda3a285"},{"code":"(fn [seqa seqb] (mapcat #(vector % %2) seqa seqb))","problem":39,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":39,"code":"(fn ilv [c1 c2] (when (and (seq c1) (seq c2)) (cons (first c1) (cons (first c2) (ilv (rest c1) (rest c2))))))","user":"54d0e6c5e4b0e8a36923e5d4"},{"problem":39,"code":"(fn myinter\n\t[seq1 seq2]\n\t(loop\n\t\t[cnt (if (<= (count seq1) (count seq2)) (count seq1) (count seq2)) myres nil myres1 seq1 myres2 seq2]\n\t\t(if (= cnt 0)\n\t\t\tmyres\n\t\t\t(recur (dec cnt) (concat myres (list (first myres1) (first myres2)) ) (rest myres1) (rest myres2)))))","user":"55897fe2e4b059ccff29b205"},{"problem":39,"code":"(fn \n  [one two] \n  (loop [one one two two inter []] \n    (if (or (empty? one) (empty? two)) \n      inter \n      (recur (rest one) (rest two) (conj inter (first one) (first two))))))\n\n;;#(flatten (map vector %1 %2))","user":"588fd085e4b00487982d51c0"},{"problem":39,"code":"(fn [a b]\n  (loop [s1 a\n         s2 b\n         s-both []]\n    (if (or (empty? s1)\n            (empty? s2))\n      s-both\n      (recur (rest s1)\n             (rest s2)\n             (concat s-both [(first s1) (first s2)])))))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"problem":39,"code":"(\n fn v [x y] \n (\n  if \n  (= (count x) (count y)) \n  \n  (\n   if (= (count x) 0)\n   '()\n   (concat \n   (list (first x)) (list (first y)) (v (rest x) (rest y))  \n  )\n   )\n\n\n (\n  v (take (min (count x) (count y)) x) (take (min (count x) (count y)) y)   \n )\n\n )\n)","user":"53fdc4b8e4b0de5c418485ea"},{"code":"(fn mix [f s & m]\n  (if (or (empty? f) (empty? s))\n    '()\n    (conj (mix (rest f) (rest s) m) (first s) (first f))\n  )\n)","problem":39,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn [colla collb] (mapcat #(list %1 %2) colla collb))","problem":39,"user":"5318594ee4b08068f379ed6d"},{"code":"(fn [ls1 ls2] (flatten (map #(list %1 %2) ls1 ls2)))","problem":39,"user":"52864dbce4b0239c8a67ae12"},{"code":"(fn [a b]\n  (reverse (loop [x a y b z '()]\n    (cond (or (empty? x) (empty? y)) z\n      :else (recur (rest x) (rest y) (cons (first y) (cons (first x) z)))))))","problem":39,"user":"4fbd1ebbe4b081705acca2fe"},{"problem":39,"code":"(fn [a b]\n  (if (<= (count a) (count b))\n  (flatten (map-indexed (fn [index item] [item (nth b index)]) a))\n  (flatten (map-indexed (fn [index item] [item (nth b index)]) (take (count b) a)))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":39,"code":"#(loop [x %1 y %2 z []]\n   (if (or (empty? x) (empty? y))\n     z\n     (recur (rest x) (rest y) (conj (conj z (first x)) (first y)))))","user":"577832f4e4b0979f8965165b"},{"problem":39,"code":"(fn [col1 col2] (letfn [(zip [x y acc]\n                           (if\n                             (or (empty? x) (empty? y))\n                             acc\n                             (zip (rest x) (rest y) (cons (first y) (cons (first x) acc))\n                                  )\n                             )\n                           )\n                         ]\n                   (reverse (zip col1 col2 nil))\n                   ))","user":"5c635364e4b0fca0c162265f"},{"code":"(fn my-interleave [& colls]\n  (apply mapcat vector colls))","problem":39,"user":"4e4b4564535dc968683fc4d3"},{"code":"(fn [l1 l2] (apply concat (map #(list %1 %2) l1 l2)))","problem":39,"user":"50839a53e4b0902986d69e10"},{"problem":39,"code":"(fn [xs ys] (apply concat (map-indexed (fn [idx itm] (list itm (nth ys idx))) (take (count ys) xs))))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"#(loop [c1 % c2 %2 coll []]\n  (if (and (seq c1) (seq c2))\n    (recur (rest c1) (rest c2)\n      (conj (conj coll (first c1)) (first c2)) )\n    coll))","problem":39,"user":"4ecfb458535d44c135fd68bb"},{"code":"(fn in [[a1 & b1] [a2 & b2]]\n  (if (or (empty? b1) (empty? b2))\n    [a1 a2]\n    (concat [a1 a2] (in b1 b2))))","problem":39,"user":"53908e6be4b0b51d73faae9a"},{"problem":39,"code":"(fn [seq1 seq2]\n (loop [[hx & tx :as xs] seq1\n         [hy & ty :as ys] seq2\n         ret []]\n    (let [x-empty (empty? xs)\n          y-empty (empty? ys)]\n      (if (or x-empty y-empty)\n        ret\n        (recur tx ty (conj ret hx hy))))))","user":"54d22860e4b0e8a36923e5ef"},{"code":"(fn interleave-two-seqs [s1 s2] (flatten (map (fn [x y] [x y]) s1 s2)))","problem":39,"user":"52c00e4fe4b07a9af5792342"},{"code":"(fn inter ([x y] (inter x y []))\n          ([x y coll] \n            (if (and (first x) (first y)) \n                (inter (rest x) (rest y) (conj coll (first x) (first y)))\n                coll)))","problem":39,"user":"50baa66be4b03e68e4411c94"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 acc []]\n\t(if (or (empty? s1) (empty? s2)) acc\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))\n  )))","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn [ks vs]  (reverse (flatten (into '() (map vector vs ks)))))","problem":39,"user":"51227a00e4b068a9582e656b"},{"code":"(fn [coll1 coll2]\n    (loop [r []\n           coll1 coll1\n           coll2 coll2]\n      (if (and (seq coll1) (seq coll2))\n        (recur\n          (conj r (first coll1) (first coll2))\n          (rest coll1)\n          (rest coll2))\n        r)))","problem":39,"user":"4e5be681535d8a8b8723a2bc"},{"code":"(fn this [l1 l2]\n  (cond (or (= (count l1) 0) (= (count l2) 0)) '()\n        :else (concat (list (first l1) (first l2)) (this (rest l1) (rest l2)))))","problem":39,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":39,"code":"(fn intl \n  [[xf & xr :as xs] [yf & yr :as ys]] (cond (nil? xs) nil\n                                             (nil? ys) nil\n                                             :else (cons xf (cons yf (intl xr yr)))))","user":"5600f8c7e4b04bb52996e176"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [[c1 & cs1] coll1\n         [c2 & cs2] coll2\n         res []]\n    (if (and c1 c2)\n      (recur cs1 cs2 (conj res c1 c2))\n      res)\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn il [xs ys]\n  (if (or (empty? xs)\n          (empty? ys))\n      []\n      (lazy-cat [(first xs) (first ys)] (il (rest xs) (rest ys)))))","problem":39,"user":"4f7250cce4b07046d9f4f02a"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [res '() lst1 seq1 lst2 seq2]\n    (if (or (empty? lst1) (empty? lst2))\n      res\n      (let [[x1 & rm1] lst1 [x2 & rm2] lst2]\n        (recur (concat res (list x1 x2)) rm1 rm2)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn myinterleave                              \n  [a b]                                         \n  (if (or (empty? a) (empty? b))                \n    '()                                         \n    (concat (list (first a) (first b))          \n            (myinterleave (rest a) (rest b)) )  \n    )                                           \n  )","problem":39,"user":"50573ed8e4b0012181721987"},{"code":"(fn inter-leave ([c1 c2]\n(lazy-seq\n(let [s1 (seq c1) s2 (seq c2)]\n(when (and s1 s2)\n(cons (first s1) (cons (first s2)\n(inter-leave (rest s1) (rest s2))))))))\n([c1 c2 & colls]\n(lazy-seq\n(let [ss (map seq (conj colls c2 c1))]\n(when (every? identity ss)\n(concat (map first ss) (apply inter-leave (map rest ss))))))))","problem":39,"user":"4ec12516535dfed6da9c6da7"},{"problem":39,"code":"(fn f39-2\n  [s1 s2]\n  (-> (map (fn [a b] [a b]) s1 s2)\n      (flatten)))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":39,"code":"(fn [& args] (flatten (into '() (apply zipmap args))))","user":"58ffaddee4b0438e51c2cffe"},{"problem":39,"code":"(fn [l1 l2] (loop [list1 l1\n                   list2 l2\n                   result []]\n              (if (or (empty? list1) (empty? list2))\n                \tresult\n                (let [item1 (first list1) item2 (first list2)]\n                  (recur (rest list1) (rest list2) (conj result item1 item2) )))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":39,"code":"(fn my-interleave\n    ([] ())\n    ([sequence] sequence)\n    ([sequence & sequences]\n     (let [sequences (conj sequences sequence)\n           sequence-count (count sequences)\n           min-sequence-size (apply min (map count sequences))\n           result-size (* sequence-count min-sequence-size)]\n       (for [i (range result-size)]\n         (let\n           [index (int (/ i sequence-count))\n            current-sequence (nth sequences (mod i sequence-count))]\n           (get current-sequence index))\n         ))))","user":"54ca130ce4b057c6fda3a250"},{"problem":39,"code":"(fn [xs ys]\n  (loop [x xs\n         y ys\n         acc []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (conj acc (first x) (first y)))\n      acc)))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":39,"code":"#(loop [collected [] frst %1 scnd %2] ( if (or (empty? frst) (empty? scnd)) collected ( recur (concat collected [(first frst) (first scnd)]) (rest frst) (rest scnd))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn [& a] (apply concat (map #(list % %2) (first a) (second a))))","problem":39,"user":"52d7a930e4b09f7907dd1379"},{"problem":39,"code":"(fn [coll-1 coll-2]\n  (loop [x coll-1\n         y coll-2\n         res []\n         n (* 2 (min (count coll-1)\n                     (count coll-2)))]\n    (if (= 0 n)\n      res\n      (recur y (rest x) (conj res (first x)) (dec n)))))","user":"52a87aabe4b0c58976d9ac2f"},{"problem":39,"code":"(fn interleave' [l1 l2]\n  (let [x (first l1)\n        xs (rest l1)\n        y (first l2)\n        ys (rest l2)]\n    (cond (or (nil? x) (nil? y)) nil\n          :otherwise (cons x (cons y (interleave' xs ys))))))","user":"5717ad6fe4b07c98581c3b14"},{"code":"#(loop [rv '() x %1 y %2 ] (if (and (seq x) (seq y)) (recur (concat rv [(first x)] [(first y)]) (rest x) (rest y)) rv))","problem":39,"user":"5229211be4b04c906c9c6a63"},{"problem":39,"code":"(fn my-interleave [& colls]\n  (flatten (apply (partial map (fn varargs-ident [& items] items)) colls)))","user":"55d204abe4b0e31453f64a4f"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 i []]\n    (if (or (empty? s1) (empty? s2)) i\n      (recur (rest s1) (rest s2) (conj i (first s1) (first s2))))))","user":"57f80350e4b0d3187e90090c"},{"problem":39,"code":"(fn [l1 l2] (flatten (map (fn [x y] (vector x y)) l1 l2)))","user":"52149e21e4b0961f15ac4d94"},{"problem":39,"code":"(fn [& colls] (apply mapcat list colls))","user":"4e435681535dc968683fc4a1"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (mapcat #(conj '() %2 %1) s1 s2))","user":"5a6f2942e4b0512ff01cda78"},{"problem":39,"code":"(fn f[a b]\n  (if (or (empty? a) (empty? b))\n  \t'()\n  \t(conj (f (rest a) (rest b)) (first b)(first a))\n  \n  )\n)","user":"5ea7b04de4b00a66d4a951b6"},{"code":"(fn [xs ys] (flatten (map #(vector %1 %2) xs ys)))","problem":39,"user":"4ea092f4535d7eef308072a6"},{"code":"(fn interl [x y] (let [s1 (seq x) s2 (seq y)] (when (and s1 s2) (lazy-seq  (cons (first s1) (cons (first s2) (interl (rest s1) (rest s2))))))))","problem":39,"user":"52eaba10e4b09f7907dd14c2"},{"problem":39,"code":"(fn [left-sq right-sq] (flatten (map vector left-sq right-sq)))","user":"4f856adfe4b033992c121c44"},{"code":"(fn my-interleave [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (my-interleave (rest s1) (rest s2))))))))","problem":39,"user":"51508efce4b0c51f0585bbb4"},{"problem":39,"code":"(fn foo \n  [[a & as] [b & bs]]\n  (if (and a b)\n    (cons a\n          (cons b\n                (lazy-seq\n                 (foo as bs))))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn [s1 s2]\n    (flatten (map #(vector %1 %2) s1 s2)))","problem":39,"user":"4dc0f7ff535d020aff1edf82"},{"problem":39,"code":"(fn [m n]\n  (loop [a m b n r []]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (conj r (first a) (first b))))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"#(loop [l1 %1 l2 %2 r[]]\n  (if (or (empty? l1) (empty? l2))\n      r\n      (recur (rest l1) (rest l2) (conj r (first l1) (first l2)))))","problem":39,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":39,"code":"(fn result [x y]\n  (let [s1 (seq x) s2 (seq y)]\n    (if (and s1 s2)\n      (conj (result (rest x) (rest y))  (first y) (first x))\n      `())))","user":"5d1ef23ee4b02ea6f0fb69bb"},{"code":"(fn interlv [seq-l seq-r]\n  (cond\n    (or (empty? seq-l) (empty? seq-r)) '()\n    true (cons (first seq-l) \n               (cons (first seq-r)\n                     (interlv (rest seq-l) (rest seq-r))))))","problem":39,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":39,"code":"(fn [a b]\n  (loop [x a\n         y b\n         res []]\n    (if (and (first x) (first y))\n      (recur (next x) (next y) (conj res (first x) (first y)))\n      res\n      )\n    )\n  )","user":"55fd0d19e4b0f488688e067a"},{"problem":39,"code":"(comp reverse\n (fn [m n]\n   (loop [v1 m v2 n v3 '()]\n     (if (or (empty? (rest v1)) (empty? (rest v2)))\n       (conj v3 (first v1) (first v2))\n       (recur (rest v1) (rest v2) (conj v3 (first v1) (first v2)))))))","user":"5fa2b45ce4b0f0ebd91b77f5"},{"code":"(fn [s1 s2]\n  (loop [f s1, s s2, acc ()]\n    (if (or (empty? f) (empty? s))\n      (reverse acc)\n      (recur (rest f) (rest s) (conj acc (first f) (first s))))))","problem":39,"user":"4ea4fe1f535d7eef308072cf"},{"problem":39,"code":"#(mapcat (fn [& args] args) %1 %2)","user":"55efc291e4b066087aa9453d"},{"problem":39,"code":"(fn interl [s1 s2]\n               (let [s1 (seq s1) s2 (seq s2)]\n                 (when (and s1 s2)\n                   (cons (first s1)\n                         (cons (first s2)\n                               (interl (rest s1)\n                                           (rest s2)))))))","user":"54c3747de4b045293a27f60e"},{"problem":39,"code":"(fn [n m]\n  (->>\n   (map vector n m)\n   (flatten)))","user":"5ec21ef0e4b00a66d4a95299"},{"code":"(fn [c1 c2]\n  \t(apply concat (map list c1 c2)))","problem":39,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn [x y] (loop[myNL '() myL x myL1 y cA 1 cU 0](if(and (< cU cA)(or (not= (first myL) nil) (first myL1) nil))\n                                        (recur\n                                         (if(odd? cU)\n                                           (conj myNL (first myL1))\n                                           (conj myNL (first myL))\n                                           )\n                                         (if(odd? cU)\n                                           myL\n                                           (rest myL)\n                                           )\n                                         (if(odd? cU)\n                                           (rest myL1)\n                                           myL1\n                                           )\n                                         (if(<= (count x) (count y))\n                                           (* (count x) 2)\n                                           (* (count y) 2)\n                                           )\n                                         (+ cU 1)\n                                         )\n                                         (reverse myNL)\n                                        )\n            )\n  )","problem":39,"user":"5177cacde4b0261ae665b877"},{"code":"(fn interleaves [c1 c2]\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2)\n                                 (interleaves (rest s1) (rest s2)))))))","problem":39,"user":"4ffb5d16e4b0678c553fc3d0"},{"code":"(fn co [v1 v2]\r\n   (if (or (empty? v1) (empty? v2)) ()\r\n    (concat (list (first v1)) (list (first v2)) (co (rest v1) (rest v2)))))","problem":39,"user":"5060c117e4b024449d699b5d"},{"code":"(fn [seq1 seq2]\n    (apply concat (map list seq1 seq2)))","problem":39,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn my-interleave [c1 c2]\n  (if (and (seq c1) (seq c2))\n    (lazy-seq\n     (list*\n      (first c1)\n      (first c2)\n      (my-interleave (rest c1) (rest c2))))\n    nil))","problem":39,"user":"4ee8b9c9535d93acb0a66884"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [x 0\n         res []]\n    (cond\n      (or (nil? (nth a x nil)) (nil? (nth b x nil))) (reverse (into '() res))\n      :else (recur (+ x 1) (conj res (nth a x) (nth b x))))))","user":"59e68254e4b0249b728206fc"},{"code":"(fn [s1 s2] (flatten (map (fn [x y] [x y]) s1 s2)))","problem":39,"user":"4f6fd91ae4b07046d9f4efed"},{"problem":39,"code":"(fn [coll1 coll2]\n    (loop [c1 coll1\n           c2 coll2\n           result '()]\n      (cond\n        (empty? c1) (reverse result)\n        (empty? c2) (reverse result)\n        :else (recur (rest c1)\n                     (rest c2)\n                     (conj result (first c1) (first c2))))))","user":"550e0951e4b06e50f9beb163"},{"problem":39,"code":"(fn il [s s']\n (let [l (min (count s) (count s'))\n \t   ss (take l s)\n \t   ss' (take l s')]\n (loop [fore ss back ss' curr []]\n      (cond  (and (empty? fore) (empty? back)) curr\n          \t  true\t(recur back (rest fore) (conj curr (first fore)))\n\n))))","user":"548f5086e4b0e286459a1239"},{"code":"(fn f \n  ([x y]\n    (f x y [])) \n  ([x y r]\n    (if (or (empty? x) (empty? y))\n        r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))","problem":39,"user":"507fbd77e4b089ade05efbd3"},{"problem":39,"code":"(fn zipper\n  \t[c1 c2]\n\t(let [f1 (first c1)\n          f2 (first c2)]\n         (if (or (nil? f1) (nil? f2))\n      \t []\n      \t (concat [f1 f2] (zipper (rest c1) (rest c2))))))","user":"591addcee4b09b4ee5954be1"},{"problem":39,"code":"(fn [first-items second-items]\n  (loop [result ()\n         a (first first-items)\n         b (first second-items)\n         one (rest first-items)\n         two (rest second-items)\n         ]\n    (if (or (nil? a) (nil? b))\n      result\n      (recur (concat result (list a b)) (first one) (first two) (rest one) (rest two)))))","user":"554f817ce4b00713264bd9a2"},{"problem":39,"code":"(fn a [n b c] \n\t(when (and (< n (count b)) (< n (count c))) \n\t\t(into [] \n\t\t\t(cons (get b n)\n\t\t\t\t(into [] \n\t\t\t\t\t(cons \n\t\t\t\t\t\t(get c n) \n\t\t\t\t\t\t(a (+ n 1) b c)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) 0","user":"5710e574e4b09c608db7043b"},{"problem":39,"code":"(fn [lleft lright] (reduce (fn [out in] (concat out in)) [] (map (fn [a b] (list a b)) lleft lright)))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"(fn myf [x y] \r\n  (reverse (into '() ( if (or (empty? x) (empty? y)) \r\n     []  \r\n     (conj (conj (myf (rest x) (rest y)) (first y)) (first x))  ) )))","problem":39,"user":"50646c01e4b007509339a58b"},{"code":"(partial \n (fn foo [res s1 s2] \n   (if \n     (or  \n      (= s1 '()) \n      (= s2 '())\n      ) \n     (reverse res)\n     (\n      foo (conj res (first s1) (first s2)) (rest s1) (rest s2) \n      )\n  ))\n '()\n )","problem":39,"user":"51a0e0b7e4b0b292b01ee3fb"},{"problem":39,"code":"(fn [coll1 coll2]\n    (flatten (map #(list %1 %2) coll1 coll2)))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":39,"code":"(fn intl [a b]\n  (when (not (or (= a '()) (= b '())))\n    (conj (intl (rest a) (rest b))  (first b) (first a))))","user":"53aaaf7ae4b047364c044444"},{"code":"#(flatten (map-indexed (fn [idx itm] (if (>= idx (count %1)) [] [(%1 idx) itm])) %2))","problem":39,"user":"5230d9bde4b0035e815da397"},{"problem":39,"code":"#(loop [i 0\n        res []]\n       (if (= i (min (count %1) (count %2)))\n           res\n           (recur (inc i) (concat res [(nth %1 i) (nth %2 i)]))\n         ))","user":"5cbc9dace4b026601754b9eb"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten (map #(identity [%1 %2]) c1 c2)))","user":"576a972ce4b0a07e8fc1811a"},{"problem":39,"code":"(fn [l1 l2] (flatten (map #( list  %1 %2  ) l1 l2)))","user":"5577318ce4b05c286339e07c"},{"code":"(fn ntl\n  [l1 l2]\n  (if (= 1 (min (count l1) (count l2)))\n    (list (first l1) (first l2))\n    (conj\n      (ntl (rest l1) (rest l2))\n      (first l2)\n      (first l1))))","problem":39,"user":"504e12ade4b078edc5f593b7"},{"problem":39,"code":"mapcat #(conj '() %2 %1)","user":"56f188e9e4b04a395b9a0494"},{"problem":39,"code":"(fn [la lb] (mapcat #(list %1 %2) la lb) )","user":"5bbbd484e4b0a20761a23617"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 acc []]\n    (if (or (empty? coll1) (empty? coll2))\n        acc\n        (recur (rest coll1) (rest coll2) (conj acc (first coll1) (first coll2))))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn [xs ys]\n  (mapcat #(list %1 %2) xs ys))","problem":39,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"code":"x","problem":39,"user":"52e635b3e4b09f7907dd146f"},{"problem":39,"code":"#(flatten\n  (map\n   (fn\n     [x y]\n     (list x y)) %1 %2))","user":"54e79094e4b024c67c0cf818"},{"problem":39,"code":"(fn [f s] \n  (loop [[ff & rf] f\n         [ss & rs] s\n         seed []]\n    (if (and ff ss)\n      (recur rf rs (conj seed ff ss))\n      seed)))","user":"559e7848e4b08a52bd4f97d4"},{"problem":39,"code":"(fn [xs ys] (loop [as xs, bs ys, acc '()]\n              (if (or (empty? as) (empty? bs))\n                (reverse acc)\n                (recur (rest as) (rest bs) (conj acc (first as) (first bs))))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2]\n  (flatten (map vector coll1 coll2)))","user":"5de012c8e4b0948ae9d9ade2"},{"code":"(fn foo [coll1 coll2]\n  (cond\n   (or (empty? coll1) (empty? coll2)) '()\n   :else (concat (list (first coll1) (first coll2)) (foo (rest coll1) (rest coll2)))))","problem":39,"user":"53322cece4b019098a6f8b73"},{"problem":39,"code":"#(flatten (merge (map list %1 %2)))","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [xs ys] (flatten (map #(do [%1 %2]) xs ys)))","problem":39,"user":"4f724e56e4b07046d9f4f027"},{"problem":39,"code":"(fn [& s] (loop [seqs s\n                  ys []]\n             (let [xs (map first seqs)]\n               (if (some nil? xs )\n                 ys\n                 (recur (map rest seqs) (apply conj ys xs))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":39,"code":"(fn il [[x & xs] [y & ys]]\n  (if (or (nil? xs) (nil? ys)) (cons x (cons y nil))\n    (cons x (cons y (il xs ys)))))","user":"50e09313e4b061dbdced7233"},{"code":"(fn [col1 col2]\r\n  (loop [x col1 y col2 rez []]\r\n    (if (empty? x)\r\n      rez\r\n      (if (empty? y)\r\n        rez\r\n        (recur (rest x) (rest y) (concat rez (take 1 x) (take 1 y)))))))","problem":39,"user":"508453abe4b0c98812d07891"},{"code":"(fn [& more] (apply mapcat list more))","problem":39,"user":"5192ad1ae4b08962174cf750"},{"code":"(fn \n  [s1 s2]\n    (reverse \n      (loop [s1 s1 s2 s2 acc '()]\n    (cond \n      (or (empty? s1)\n          (empty? s2)) acc\n      :else\n        (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) acc)))))))","problem":39,"user":"4fd16778e4b04c3a95aa040f"},{"problem":39,"code":"(fn mrg ([a b] (mrg a b '())) \n  \n  ([a b reslst]\n   (if (or (empty? a) (empty? b)) \n     reslst\n     (mrg (rest a) (rest b) (concat reslst (list (first a) (first b))))\n     )\n   )\n  )","user":"550fd845e4b06e50f9beb17c"},{"code":"(fn ile [seq1 seq2]\n  (loop [src1 seq1, src2 seq2, dest []]\n    (if (and (seq src1) (seq src2))\n      (recur\n        (rest src1)\n        (rest src2)\n        (conj dest (first src1) (first src2))\n      ) \n      dest\n    )\n  )\n)","problem":39,"user":"4fea09b2e4b0547ebccb2485"},{"code":"(fn[l1 l2]\n  (loop [result [] list1 l1 list2 l2]\n    (if (or (empty? list1) (empty? list2))\n      result\n      (recur (conj result (first list1) (first list2) ) (rest list1) (rest list2)))))","problem":39,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn inlv[s1 s2] \n  (if (or (empty? s1) (empty? s2)) () (cons (first s1) (cons (first s2) (inlv (rest s1) (rest s2))))))","problem":39,"user":"533e45a7e4b085b17e897d8c"},{"problem":39,"code":"#(loop [ca %1 cb %2 co []] (if (or (empty? ca) (empty? cb)) co (recur (rest ca) (rest cb) (conj co (first ca) (first cb) ))))","user":"5651de3ee4b0f9d632dd845b"},{"problem":39,"code":"(fn [a1 a2]\n  (loop [c1 a1 c2 a2 ret []]\n    (if (some empty? [c1 c2])\n      ret\n      (recur (rest c1) (rest c2) (conj ret (first c1) (first c2))))))","user":"559279b7e4b0604b3f94d58c"},{"code":"(fn f [x,y] (if (and (first x) \n                     (first y)) \n              (concat [(first x) (first y)] \n                      (f (rest x) (rest y))) \n              [] ))","problem":39,"user":"514b66f4e4b0bd81940b86cb"},{"code":"(fn [x y] (flatten(into () (zipmap x y))))","problem":39,"user":"4e78dc98535db95036265724"},{"problem":39,"code":"(fn f [x y] \n  (if (and (> (count x) 0) (> (count y) 0))\n    (concat [(first x) (first y)] (f (rest x) (rest y)))\n    []\n  )\n )","user":"54c97cb3e4b045293a27f677"},{"code":"(fn [s1 s2]\n  (flatten (map vector s1 s2)))","problem":39,"user":"4db2eac3535df7e46ed9b6c8"},{"code":"(fn f[a b]\n  (loop [a a b b r []]\n    (if (or (nil? a) (nil? b))\n      r\n      (recur (next a) (next b) (conj r (first a) (first b)))\n    )\n  )\n)","problem":39,"user":"4f245d77e4b0d66497709feb"},{"problem":39,"code":"(fn f [s1 s2] (flatten (map #(list %1 %2) s1 s2)))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn [a b] (apply concat (map #(vector %1 %2) a b)))","problem":39,"user":"4f8345c6e4b033992c121c1b"},{"problem":39,"code":"#(loop [res []\n         [x & xs] %1\n         [y & ys] %2]\n    (if (and x y)\n      (recur (conj res x y) xs ys)\n      res))","user":"5f2d6bc4e4b033932238a66e"},{"code":"(fn ! [x y]\n        (if (or (empty? x) (empty? y)) \n            '() \n            (cons (first x) (cons (first y) (! (rest x) (rest y))))))","problem":39,"user":"4f88f57ae4b033992c121c73"},{"problem":39,"code":"(fn [x y] (apply concat (map #(list (x %) (y %)) (range (min (count x) (count y))))))","user":"563536f8e4b0bfe05bf117c5"},{"code":"; TODO make it lazy !\n#_(fn myinterleave [s1 s2]\n  (mapcat #(list %1 %2) s1 s2))\n\n(fn myinterleave [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) \n         (cons (first s2) \n           (myinterleave \n             (rest s1) \n             (rest s2))))))))","problem":39,"user":"4e131443535d04ed9115e7d3"},{"problem":39,"code":"(fn [seq1 seq2]\n  (reduce concat (map #(conj [%1] %2) seq1 seq2)))","user":"5eb1a80ce4b00a66d4a951ff"},{"code":"(fn __\n  [a b]\n  \t(when (not (or (empty? a) (empty? b)))\n  \t(concat (take 1 a) (take 1 b) (__ (rest a) (rest b)))))","problem":39,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [s1 s2]\n((fn flat1 [coll] (reduce (fn [a b] (concat a b)) [] coll))\n (for [x (range (min (count s1) (count s2)))] [(nth s1 x) (nth s2 x)])))","problem":39,"user":"522d0360e4b0806774ddfef7"},{"problem":39,"code":"(fn my-interleave[s1 s2]\n  (mapcat (fn[item1 item2] (println item1 item2)\n              (vector item1 item2) \n            ) s1 s2))","user":"539f9f79e4b0ca733b97449e"},{"problem":39,"code":"(fn __ [c1 c2]\n  (->> (loop [coll '() c1 c1 c2 c2]\n        (if (or (empty? c1) (empty? c2))\n            coll\n            (recur (conj coll (first c1) (first c2)) (rest c1) (rest c2))))\n          reverse))","user":"559468cbe4b0c79f6e1db954"},{"code":"mapcat (fn [& more] (apply list more))","problem":39,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [one two]\n  (reduce \n   (fn [result item]\n     (into result item))\n   []\n   (map\n    (fn [x y]\n      (list x y))\n    one two)))","problem":39,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn Lookup [x y] (if (or (nil? x) (nil? y))\n                   []\n                   (concat [(first x)] [(first y)] (Lookup (next x) (next y)))))","problem":39,"user":"522ff396e4b032bbe3424172"},{"problem":39,"code":"(fn xx \n   ([c1 c2]\n    (xx c1 c2 '()))\n   ([[ a & c1] [ b & c2] dest]\n       (if (or (empty? c1) (empty? c2))\n           (do\n            (reverse (into dest [a b])))\n           (xx c1 c2 (into dest [a b]))))\n )","user":"58d6caf5e4b03c36ff7e5975"},{"problem":39,"code":"(fn [a b]\n  (apply concat (map vector a b)))","user":"60a39b80e4b00e9e6653c450"},{"code":"(fn [sq1 sq2]\n  (loop [s1 sq1 s2 sq2 r []]\n    (if (and (first s1) (first s2))\n      (recur (next s1) (next s2) (cons (first s2) (cons (first s1) r)))\n      (reverse r))))","problem":39,"user":"53219cece4b09d4e7a9b54b7"},{"problem":39,"code":"#(mapcat (fn [& args] (vec args)) %1 %2)","user":"536d24ece4b0fc7073fd6e54"},{"code":"(fn f\n  ([xs ys] (f xs ys []))\n  ([xs ys a]\n    (if (or (empty? xs) (empty? ys))\n      a\n      (f (rest xs) (rest ys) (conj a (first xs) (first ys))))))","problem":39,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":39,"code":"#(loop [x %1\n       y %2\n       new []]\n  (if (or (empty? x) (empty? y))\n    new\n    (recur (rest x) (rest y) (conj new (first x) (first y)))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"problem":39,"code":"#(loop \n  [s1 %1\n   s2 %2\n   sr [(first s1) (first s2)]]\n   (if (or (empty? (rest s1)) (empty? (rest s2)))\n     sr\n     (recur \n       (rest s1)\n       (rest s2)\n       (conj sr (first (rest s1)) (first (rest s2))))))","user":"5432df22e4b0dad94371f2f5"},{"problem":39,"code":"#(loop\n   [s1 %1, s2 %2, res []]\n   (let [l (min (count s1) (count s2))]\n     (if (= l 0)\n       (seq res)\n       (recur (rest s1) (rest s2)\n              (conj (conj res (first s1)) (first s2))))))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":39,"code":"#(loop [f %1\n        s %2\n        r '[]]\n   (if (or (empty? f) (empty? s)) r (recur (rest f) (rest s) (conj r (first f) (first s)))))","user":"57b6555be4b0fbc9809a27bf"},{"problem":39,"code":"(fn my-interleave\n  ([& args]\n   (println args)\n   (if (not (some empty? args))\n     (concat (map first args) (apply my-interleave (map rest args))))))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":39,"code":"(comp flatten\n             (partial map #(vector %&)))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn fx[xs ys] \n  (if (or (empty? xs) (empty? ys))  \n    () \n    (conj (fx (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":39,"code":"(fn [& rest]\n  (flatten (into '() (apply zipmap rest))))","user":"53dfd77fe4b0d874e779ae45"},{"problem":39,"code":"(fn ileave [s1 s2]\n  (if (seq s1) \n    (if (seq s2)\n      (lazy-seq (cons (first s1) (cons (first s2) (ileave (rest s1) (rest s2)))))\t\n      nil)\n    nil))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [a-list b-list]\n   (flatten (map list a-list b-list)))","problem":39,"user":"4ede0511535d10e5ff6f5330"},{"problem":39,"code":"(fn my-inter-leave1\n  [f s]\n  (flatten (map list f s)))","user":"557e9d17e4b05c286339e0d8"},{"problem":39,"code":"(fn ileave [a b]\n  (if (and (seq a) (seq b))\n    (conj (ileave (rest a) (rest b)) (first b) (first a))\n    ()))","user":"56bb652ae4b0f26550335953"},{"problem":39,"code":"(fn f[x y](if-not (or (empty? x) (empty? y) ) (conj (f (rest x) (rest y)) (first y) (first x) )))","user":"6096e2d4e4b00e9e6653c3f1"},{"problem":39,"code":"(fn inter [a b]\n  (lazy-seq (when (and (not (empty? a)) (not (empty? b)))\n              (cons (first a) (cons (first b) (inter (rest a) (rest b)))))))","user":"5958a0c8e4b066ee0a44af8c"},{"code":"(fn [l1 l2]\n(loop [col1 l1 ,col2 l2 ,result [] ]\n  (if (or (empty? col1)\n          (empty? col2) )\n      result\n      (recur (rest col1)\n             (rest col2)\n             (conj (conj result (first col1) )\n                (first col2)\n              )\n      )\n  )\n)\n)","problem":39,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [coll1 coll2]\n      (loop [c1 coll1 c2 coll2 result []]\n        (if (or (empty? c1) (empty? c2))\n          result\n          (recur (rest c1) (rest c2) (conj result (first c1) (first c2))))\n        )\n      )","problem":39,"user":"518279abe4b0353c468deb65"},{"code":"(fn [c d] (flatten (map list c d)))","problem":39,"user":"51c73959e4b07ef393169e3e"},{"problem":39,"code":"(fn[a b]\n (apply concat\n  (map vector a b)))","user":"54580586e4b01be26fd74616"},{"problem":39,"code":"(fn my-inter\n  [s r]\n  (loop [t [] s* s r* r]\n    (let [[sf & srem] s* [rf & rrem] r*] \n      (if (or (empty? s*) (empty? r*))\n        t\n        (recur (conj(conj t sf) rf) srem rrem)\n      )\n    )\n  )\n)","user":"55acd080e4b03311e7b73298"},{"problem":39,"code":"(fn f [x y]\n  (loop [x x, y y, res '()]\n    (if (seq x)\n      (if (seq y)\n        (recur (rest x) (rest y) (conj res (first x) (first y)))\n        (reverse res))\n      (reverse res))))","user":"593d6793e4b069cdc2982ba6"},{"code":"(fn intrleave [[h1 & t1] [h2 & t2]]\n  (if (and (seq t1) (seq t2))\n    (concat (list h1 h2)\n      (intrleave t1 t2))\n    (list h1 h2)))","problem":39,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":39,"code":"(fn zipByLoop [s1 s2]\n  (loop [acc [] [t1 t2] [s1 s2]]\n    (if (or (empty? t1) (empty? t2))\n      acc\n      (recur\n       (concat acc [(first t1) (first t2)])\n       [(rest t1) (rest t2)]))))","user":"5f7251b9e4b02876ed9fd08a"},{"problem":39,"code":"(fn inter [a b]\n  (if (and (seq a) (seq b))\n    (into [(first a) (first b)] (inter (rest a) (rest b)))))","user":"54fd5e2de4b07d26eda61d33"},{"code":"(fn [a b] (loop [as a bs b rs []]\r\n  (if (or (empty? as) (empty? bs)) rs\r\n      (recur (rest as) (rest bs) (conj (conj rs (first as)) (first bs)))\r\n)))","problem":39,"user":"4db883e1535d1e037afb2198"},{"problem":39,"code":"(fn [x y]\n            (loop [c 0 v []]\n              (if-not (nil? (nth x c nil))\n                (if-not (nil? (nth y c nil))\n                  (recur (inc c) (conj v (nth x c) (nth y c)))\n                  v)\n                v\n                )\n              )\n            )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n   (if (or (empty? coll1) (empty? coll2))\n     []\n     (into [(first coll1) (first coll2)] (my-interleave (rest coll1) (rest coll2)))))","user":"54393c3fe4b032a45b86931a"},{"problem":39,"code":"(fn inter [s1 s2]\n   (if (empty? s1)\n     '()\n     (if (empty? s2)\n       '()\n       (cons (first s1)\n             (cons (first s2)\n                   (inter (rest s1)\n                          (rest s2)))))))","user":"54d26316e4b0e8a36923e5f2"},{"problem":39,"code":"#(apply concat (for [x (range (min (count %1) (count %2)))] [(nth %1 x) (nth %2 x)]))","user":"54e0a9c3e4b024c67c0cf7b5"},{"problem":39,"code":"(fn [a b] (loop [a a b b result []] (if (= true( or (empty? a) (empty? b))) result (recur (rest a) (rest b) (conj result (first a) (first b))))))","user":"5afdca89e4b0cc2b61a3bd20"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [a a\n         b b\n         result ()]\n    (cond\n      (empty? a) (reverse result)\n      (empty? b) (reverse result)\n      :else\n        (recur\n          (rest a)\n          (rest b)\n          (cons (first b) (cons (first a) result))))))","user":"5bcb672ee4b07a9b28b10100"},{"problem":39,"code":"(fn [x y]\n  (mapcat #(conj [%1] %2) x y))","user":"56c792ace4b0ed865f9758c4"},{"code":"(fn\n  [c1 c2]\n  ((fn ! [c c1 c2]\n    (cond\n      (empty? c1) c\n      (empty? c2) c\n      :else (! (conj c (first c1) (first c2)) (rest c1) (rest c2)))) [] c1 c2))","problem":39,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":39,"code":"(fn my-inter-2 [& lists]\n  (let [m (apply min (map count lists))]\n    (mapcat\n      (fn [i] (map #(nth % i) lists))\n      (range m))))","user":"548c8115e4b0e286459a120c"},{"problem":39,"code":"(fn [s1 s2] (loop [x 0\n                  s '()]\n             (if (< x (min (count s1) (count s2)))\n               (recur (inc x) (conj s (nth s1 x) (nth s2 x)))\n               (reverse s))))","user":"5169b23fe4b03f62cda68cee"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten (map (fn [v1 v2] [v1 v2]) s1 s2)))","user":"54497569e4b032a45b8693d2"},{"code":"(fn [x y]\r\n  (letfn [(il2 [s1 s2 lst]\r\n            (if (or (empty? s1) (empty? s2))\r\n                  lst\r\n                  (recur (rest s1) (rest s2) (concat lst (list (first s1) (first s2))))))]\r\n    (il2 x y '())))","problem":39,"user":"4dd1de4d535dae65d5c462d7"},{"problem":39,"code":"(fn [init1 init2]\n  (loop [s1 init1, s2 init2, result []]\n    (let [rest1 (next s1), rest2 (next s2)]\n      (if (and rest1 rest2)\n        (recur\n          rest1\n          rest2\n          (conj result (first s1) (first s2))\n          )\n        (conj result (first s1) (first s2))\n        )\n      )\n    )\n  )","user":"564faadce4b0284900eef6b2"},{"problem":39,"code":"(fn [a b]\n   (loop [a a b b c []]\n     (if (and (> (count a) 0) (> (count b) 0)) \n       (recur (rest a) (rest b) (conj (conj c (first a)) (first b)))\n       c)))","user":"581fe550e4b04b46fc4b0f4c"},{"problem":39,"code":"(fn [v1 v2] (flatten (map vector v1 v2)))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn [r s](flatten (let [v []] (map (fn[a b] (conj v a b)) r s))))","problem":39,"user":"4f148418535d64f60314643a"},{"problem":39,"code":"(fn [seq1 seq2]\n    (let [n (min (count seq1) (count seq2))]\n      (loop [i 0  res '[]]\n        (if (= i n)\n          res\n          (recur (+ i 1) (concat res [(nth seq1 i) (nth seq2 i)]))))))","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn f [a b]\n  (if (and (not (empty? a)) (not (empty? b)))\n    (conj (conj (f (rest a) (rest b)) (first b)) (first a))\n    (empty a)\n  )\n)","problem":39,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [c1 c2]\n  (loop [s1 c1 s2 c2 interl []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj interl (first s1) (first s2)))\n      interl)))","problem":39,"user":"523ea111e4b057c4b7cd0a65"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b c []]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) (rest b) (conj c (first a) (first b))))))","user":"55929e89e4b0604b3f94d58e"},{"problem":39,"code":"#(loop [x %1 y %2 z '()]\n   (if \n    (> (min (count x) (count y)) 0)\n     (recur \n      (rest x) (rest y) \n      (concat z \n              [(first x)] \n              [(first y)]))\n    z))","user":"56f881e0e4b08e7d20b96839"},{"code":"(fn [x y]\n  (loop [l1 x l2 y comb []]\n    (cond\n     (or (= l1 '()) (= l2 '())) comb\n     :else (recur (rest l1) (rest l2) (conj (conj comb (first l1)) (first l2)))\n     )))","problem":39,"user":"4f192b29535d64f603146464"},{"code":"(fn interlv[col1 col2]\r\n  (loop[memo [] x col1 y col2]\r\n    (if (or (empty? x) (empty? y)) memo\r\n      (recur (concat memo [(first x) (first y)]) (rest x) (rest y))\r\n      )\r\n  )\r\n)","problem":39,"user":"4db135081254ad5b4805fa67"},{"code":"#(loop [coll1 %1 coll2 %2 coll3 '()]\n    (cond\n     (empty? coll1) coll3\n     (empty? coll2) coll3\n     :else (recur (rest coll1) (rest coll2) (concat coll3 [(first coll1)] [(first coll2)]))))","problem":39,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":39,"code":"(comp vec (partial mapcat list))","user":"552356fae4b0882d96d091af"},{"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 acc []]\n    (if (some empty? [s1 s2])\n      acc\n      (recur (rest s1) (rest s2) (conj (conj acc (first s1)) (first s2))))))","problem":39,"user":"5341b141e4b00652c8746ecf"},{"code":"mapcat(fn [& x] x)","problem":39,"user":"53566247e4b04ce2eb3ed266"},{"code":"(fn[s1 s2]\n  (loop [e1 s1 e2 s2 ret '()]\n   (if (or (empty? e1)\n           (empty? e2))\n     (reverse ret)\n     (recur (rest e1) \n            (rest e2)\n            (conj ret (first e1) (first e2))))))","problem":39,"user":"4e889643535d8b9bb0147ca5"},{"problem":39,"code":"(fn\n    [as bs]\n    (loop [xs as\n           ys bs\n           ans []]\n      (if (or (empty? xs) (empty? ys))\n        ans\n        (recur (rest xs)\n               (rest ys)\n               (concat ans [(first xs) (first ys)]))))\n    )","user":"5b8db323e4b0c0b3ffbd49da"},{"code":"(fn [seq1 seq2]\n  (mapcat (fn[x y] [x y]) seq1 seq2))","problem":39,"user":"504eff22e4b0e7ad84dbc4a9"},{"code":"(fn tada [c1 c2]\r\n  (lazy-seq\r\n\t\t(let [s1 (seq c1) s2 (seq c2)]\r\n\t\t\t(when (and s1 s2)\r\n\t\t\t\t(cons (first s1) (\r\n\t\t\t\t\tcons (first s2) (tada (rest s1) (rest s2))))))))","problem":39,"user":"4f71ba6ee4b07046d9f4f012"},{"problem":39,"code":"(fn il [aa bb] (mapcat list aa bb))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":39,"code":"(fn g [a b] (if (or (empty? a) (empty? b)) '()\n              (cons (first a)\n                    (cons (first b)\n                          (g (next a) (next b))))))","user":"54d95ce8e4b024c67c0cf74a"},{"problem":39,"code":"(fn [coll1 coll2] (loop [i (min (count coll1) (count coll2))\n                           j 0\n                           out []]\n                      (if (= j i)\n                        out\n                        ;; else recur\n                        (recur i (inc j) (conj (conj out (nth coll1 j)) (nth coll2 j) ) )\n                        )\n                      ))","user":"5683fcafe4b0945ebc182aa8"},{"problem":39,"code":"#(loop [r [] s1 %1 s2 %2]\n   (if (or (empty? s1) (empty? s2))\n     r\n     (recur (conj r (first s1) (first s2)) (rest s1) (rest s2))))","user":"5f9c4113e4b0715f5002d821"},{"problem":39,"code":"#(loop [a-seq %1 b-seq %2 acc '()] (if(or (empty? a-seq) (empty? b-seq)) acc (recur (rest a-seq) (rest b-seq) (concat acc (list (first a-seq) (first b-seq))))))","user":"5978b4c9e4b01722bebd4d13"},{"problem":39,"code":"(fn [inputA inputB]\n  (reverse (loop [a inputA b inputB out '()]\n    (if (or (empty? a) (empty? b))\n      out\n      (recur (rest a) (rest b) (conj out (first a) (first b)))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":39,"code":"(fn [a b]\n  (let [z (min (count a) (count b))]\n    (loop [r [] x a y b i 0]\n      (if (< i z)\n        (recur (conj r (first x) (first y)) (rest x) (rest y) (inc i))\n        r))))","user":"5f73000ce4b02876ed9fd094"},{"problem":39,"code":"(fn\n  [list1 list2]\n  (loop [l1 list1 \n         l2 list2\n         lr []]\n    (let [f1 (first l1)\n          f2 (first l2)]\n          (if (empty? l1)\n            lr\n            (if (empty? l2)\n              lr\n              (recur (rest l1) (rest l2) (conj (conj lr f1) f2))\n            ))\n          )\n   )\n)","user":"553d51c3e4b0a04f792994df"},{"code":"(fn [c1 c2] (flatten (map list c1 c2)))","problem":39,"user":"52f2b450e4b05e3f0be25efd"},{"problem":39,"code":"mapcat list\n;(fn [x y] \n ;  (let [smaller (min (count x) (count y))\n  ;       a (take smaller x)\n   ;      b (take smaller y)]\n    ; (flatten(for [a1 a]\n     ;  (conj [] a1 (nth b (.indexOf a a1)))))))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":39,"code":"#(flatten (map (fn [left right]\n                 (conj '() right left))\n               %1\n               %2))","user":"5fe9169ce4b05ac5b16ea1a0"},{"code":"(fn [list1 list2] \n    (loop [l1 list1, l2 list2, ret []]\n        (if (or (= '() l1) (= '() l2))\n            ret\n            (recur (rest l1) (rest l2) (conj ret (first l1) (first l2))) )))","problem":39,"user":"4f2965ffe4b0d6649770a029"},{"problem":39,"code":"(fn f [xs ys]\n  (cond\n   (or (empty? xs) (empty? ys)) '()\n   :else (cons (first xs) (cons (first ys) (f (rest xs) (rest ys))))))","user":"58731176e4b01531a375ea2a"},{"code":"(fn a [x y] \n    (if (or (empty? x) (empty? y))\n      nil \n      (concat (list (first x) (first y)) (a (rest x) (rest y)))))","problem":39,"user":"50f07b21e4b0bdaecbb47dc2"},{"problem":39,"code":"(fn myInterleave [l1 l2] \n  \t(let [[x1 & tail1] l1 [x2 & tail2] l2]\n      \t(if (or (nil? x1) (nil? x2))\n          \t[]\n          \t(concat [x1 x2] (myInterleave tail1 tail2)))))","user":"595d2041e4b066ee0a44b014"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (when (and (seq s1) (seq s2))\n    (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))))","user":"4f392fc8e4b0e243712b1ee7"},{"problem":39,"code":"(fn my-interleave [& args]\n  (loop [l []\n         args' args]\n    (if (some empty? args')\n      l\n      (recur\n        (into l (map first args'))\n        (map rest args')))))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn intrl\n  ([x y] (intrl x y []))\n  ([x y r]\n     (if (or (empty? x) (empty? y)) r\n         (intrl (rest x) (rest y) (concat r [(first x) (first y)])))))","problem":39,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn F[x y]\n\n  (if (or (empty? x) (empty? y))\n    '()\n    (cons (first x) (cons (first y) (F(rest x) (rest y))))\n  )\n)","problem":39,"user":"4fc7b079e4b0ee37620e1827"},{"code":"(fn [c1 c2](apply concat (map list c1 c2)))","problem":39,"user":"53347274e4b0656e627bfd6b"},{"code":"#(loop [x %1 y %2 res []]\n  (if (or (empty? x) (empty? y))\n    res\n    (recur (rest x) (rest y) (conj res (first x) (first y)))))","problem":39,"user":"4ec6c878535d6d7199dd36d5"},{"problem":39,"code":"(comp #(reduce into [] %), (partial map (fn [& m] (into [] m))))","user":"5492164ee4b0b312c081ff3e"},{"code":"(fn [l1 l2] (flatten (map #(list % %2) l1 l2)))","problem":39,"user":"4f29cdc8e4b0d6649770a033"},{"problem":39,"code":"(fn myInterleave[l1 l2]\n            (if (and (not-empty l1) (not-empty l2))\n              (concat (list (first l1) (first l2))  (myInterleave (rest l1) (rest l2)))\n              )\n            )","user":"5fc241c1e4b0edf42a5593d1"},{"problem":39,"code":"(fn [list-one list-two]\n   (apply concat (map-indexed (fn [i v]\n                          (if (get list-two i)\n                            [v (list-two i)]\n                            nil))\n                        list-one)))","user":"57280b92e4b0c5bde472c14e"},{"code":"(fn my-interleave [s1 s2]\n  (let [elt1 (first s1)\n        elt2 (first s2)]\n    (if (and elt1 elt2)\n      (cons elt1 \n        (cons elt2 \n          (my-interleave (rest s1) (rest s2))))\n      [])))","problem":39,"user":"4f03d4dc535dcb61093f6b6e"},{"problem":39,"code":"(fn [x y] (loop [x1 x y1 y new []]\n            (if (or (empty? x1) (empty? y1))\n              new\n            (recur (rest x1) (rest y1) (conj (conj new (first x1)) (first y1))))\n            ))","user":"59368ccae4b02506e01a2979"},{"problem":39,"code":"(fn test [coll1 coll2] \n    (let [coll1 (take (count coll2) coll1)]\n     (apply concat\n     (map-indexed \n     (fn [idx item] [item (coll2 idx)])\n                 coll1))))","user":"55a161d1e4b0acc240e31511"},{"code":"(comp flatten (partial map list))","problem":39,"user":"4dfe65a1535d04ed9115e787"},{"problem":39,"code":"(fn [col1 col2]\n  (mapcat (fn [e1 e2] [e1 e2]) col1 col2))","user":"540d5085e4b0addc1aec670e"},{"problem":39,"code":"(fn inter [seq1 seq2]\n       (if(or (empty? seq1) (empty? seq2))\n         []\n         (concat [(first seq1) (first seq2)]\n                 (inter (rest seq1) (rest seq2)))))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(letfn [(l [x y z]\n           (if (or (empty? x) (empty? y)) (seq z)\n                                          (r (rest x) y (assoc z (count z) (first x)))))\n         (r [x y z]\n           (if (empty? y) (seq z)\n                          (l x (rest y) (assoc z (count z) (first y)))))]\n        #(l %1 %2 []))","problem":39,"user":"51eadb98e4b0f1f103a0d153"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (if (or (empty? a) (empty? b))\n    ()\n    (conj (my-interleave (rest a) (rest b)) (first b) (first a))))","user":"5a9f005be4b0d174b936c810"},{"problem":39,"code":"(fn\n  [fst snd]\n  (loop [one fst\n         two snd\n         result []]\n    (if (and\n         (seq one)\n         (seq two))\n      (recur (rest one) (rest two) (conj result (first one) (first two)))\n      result)))","user":"5e47e1eee4b043cd24807a35"},{"problem":39,"code":"#(loop [index 0 len (min (count %) (count %2)) coll []]\n   (if (< index len)\n     (recur (inc index) len (conj coll (nth % index) (nth %2 index)))\n     coll))","user":"56677192e4b04acd4f672dd5"},{"problem":39,"code":"(fn itlv\n  [[l & m] [p & q]]\n  (let [res []]\n    (if (and l p)\n      (concat (concat res (vector l p)) (itlv m q))\n      res)))","user":"59390a35e4b02506e01a29f3"},{"problem":39,"code":"(fn inter [x y]\n  (let [s1 (seq x) s2 (seq y)]\n    (if (and s1 s2)\n      (cons (first s1) (cons (first s2) (inter (next s1) (next s2))))))\n    )","user":"53ad2bbbe4b047364c044464"},{"problem":39,"code":"(fn [xa xb]\n  (loop [res '() l xa r xb]\n    (if (or (empty? l) (empty? r))\n      res\n      (recur (concat res [(first l) (first r)]) (next l) (next r)))))","user":"553b87abe4b09218d5f45003"},{"code":"(fn [lst1 lst2]\n  (loop [l1 lst1 l2 lst2 result []]\n    (if (or (empty? l1) (empty? l2))\n      result\n      (recur (next l1) (next l2) (conj result (first l1) (first l2))))))","problem":39,"user":"4fd7f892e4b0dab7d829f38d"},{"problem":39,"code":"(fn my-interleave [x1 x2]\n   (lazy-seq\n     (when-not (or (empty? x1) (empty? x2))\n       \n       (cons (first x1) (cons (first x2)\n                              \n                              (my-interleave (rest x1) (rest x2)))))))","user":"57c500f9e4b05aa3c4741cda"},{"problem":39,"code":"(fn f [[a & u] [b & v]]\n  (when (and a b) (lazy-seq (cons a (cons b (f u v))))))","user":"587ad5aae4b01531a375eaf0"},{"problem":39,"code":"(fn interleaver [seq1 seq2]\n  (loop [seq1 seq1 seq2 seq2 result []]\n    (if (or (empty? seq1) (empty? seq2))\n      result\n      (recur (rest seq1) (rest seq2) (concat result [(first seq1) (first seq2)])))))","user":"5d0859fbe4b0cc9c91588208"},{"problem":39,"code":"#(loop [a [] x %1 y %2]\n(if (or (empty? x) (empty? y))\n  a\n  (recur (conj a (first x) (first y)) (rest x) (rest y))))","user":"5b774e66e4b047b03b2036ec"},{"code":"(fn\n  [sa sb]\n  (loop [combined [] seqa sa seqb sb]\n    (println combined seqa seqb)\n    (cond (and (first seqa) (first seqb))\n     (recur (conj combined (first seqa) (first seqb))\n            (rest seqa) (rest seqb))\n     :else combined)))","problem":39,"user":"4eaf1342535d7eef30807330"},{"code":"(fn [list-1 list-2]\n  (loop [memo [] a list-1 b list-2]\n    (if (or (= (count a) 0)\n            (= (count b) 0))\n      \tmemo\n      \t(recur (concat memo (vector (first a) (first b))) (rest a) (rest b)))))","problem":39,"user":"50c4baa6e4b0210b849018b0"},{"code":"(fn [la lb] (apply concat (map #(vector %1 %2) la lb)))","problem":39,"user":"4e5f08c7535d8a8b8723a2da"},{"code":"(fn [col1 col2]\n  (flatten (reverse (zipmap col1 col2))))","problem":39,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":39,"code":"(fn\n       [c1 c2]\n       (let [len (apply min (map count [c1 c2]))] \n         (loop \n             [acc []\n              cols [(take len c1) (take len c2 )]] \n           (if (empty? (first cols)) \n             acc \n             (recur (into acc (map first cols))\n                    (map rest cols)\n                    )\n             )\n           )\n         )\n       )","user":"5a09f35fe4b0eab8c0448934"},{"problem":39,"code":"(fn [first-seq second-seq]\n  (let [valid-range (range 0 (min (count first-seq)\n                                  (count second-seq)))]\n    (reduce (fn [result ith]\n              (into result [(nth first-seq ith)\n                            (nth second-seq ith)]))\n            [] valid-range)))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":39,"code":"#(loop [a %1 b %2 result []]\n   (if (or (empty? a) (empty? b))\n     result\n     (recur (rest a) (rest b) (conj result (first a) (first b)))\n     )\n   )","user":"5763818ae4b0994c1922fbc7"},{"problem":39,"code":"(fn \n  [seq1 seq2]\n  (loop [[head1 & r1] seq1\n         [head2 & r2] seq2\n         iseq []]\n    (if (or (nil? head1) (nil? head2))\n      iseq\n      (recur r1 r2 (into iseq [head1 head2])))))","user":"557e2eafe4b05c286339e0d2"},{"problem":39,"code":"#(loop [a %1 b %2 acc []]\n   (if (= 0 (* (count a) (count b))) acc\n     (recur (rest a) (rest b) (conj acc (first a) (first b)))))","user":"58a31ecee4b02bd94d917ee7"},{"code":"(fn my-interleave\n      [c1 c2]\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1)\n                (cons (first s2)\n                      (my-interleave (rest s1) (rest s2)))))))","problem":39,"user":"51f2a491e4b0210f90e74553"},{"problem":39,"code":"(fn [seq1 seq2]\n   (loop [i 0 result [] seq1 (seq seq1) seq2 (seq seq2)]\n     (if (or (empty? seq1) (empty? seq2))\n       result\n       (recur (inc i) (conj result (first seq1) (first seq2)) (next seq1) (next seq2)))))","user":"602b90c1e4b0d5df2af22266"},{"problem":39,"code":"(fn interl [elemsLeft elemsRight]\n  (if (or (empty? elemsRight) (empty? elemsLeft))\n    '()\n    (let [elemL (first elemsLeft)\n          elemR (first elemsRight)]\n      (conj (interl (rest elemsLeft) (rest elemsRight)) elemR elemL ))))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":39,"code":"(fn [s ss] (loop[h1 (first s) t1 (rest s) h2 (first ss) t2 (rest ss) r ()]\n             (if (or (= h1 nil) (= h2 nil)) (reverse r) \n               (recur (first t1) (rest t1) (first t2) (rest t2) (cons h2 (cons h1 r)) ) ) ) )","user":"53b3ea79e4b047364c0444ab"},{"code":"(fn foo [x y]\n  (cond\n    (empty? x) nil\n    (empty? y) nil\n    :else (concat (list (first x) (first y))\n       (foo (rest x) (rest y)))))","problem":39,"user":"4dea9fae535d08e6dec9fe02"},{"problem":39,"code":"(fn [s, a]\n  (flatten (reverse (zipmap s a))))","user":"57d1a0e6e4b0bd073c20236d"},{"code":"(fn my-interleave [coll1 coll2]\n  (loop [res [] s1 (seq coll1) s2 (seq coll2)]\n    (if (and s2 s1)\n      (recur (conj res (first s1) (first s2)) (next s1) (next s2))\n      res)))","problem":39,"user":"4fedd993e4b0198f34b063bc"},{"code":"(fn [a b] (flatten (map (fn [l r] (list l r)) a b)))","problem":39,"user":"50f180cee4b06d9538fe2124"},{"code":"(fn inter [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n       []\n       (cons (first s1) (cons (first s2) \n(inter (rest s1) (rest s2))))))","problem":39,"user":"4e7a5395535db169f9c796ab"},{"problem":39,"code":"(fn [x y]\n  (loop [new-list [] cnt 0]\n    (if (< (- (count x) 1) cnt)\n      new-list\n      (if (< (- (count y) 1) cnt)\n        new-list\n        (recur (conj new-list (nth x cnt) (nth y cnt)) (inc cnt))))))","user":"5756e218e4b02ea1147992e5"},{"problem":39,"code":"(fn [seq1 seq2] (reduce\n\t(fn [res idx]\n      (concat res [(nth seq1 idx) (nth seq2 idx)])\n    )\n    '()\n    (range (min (count seq1) (count seq2)))\n))","user":"55f014ebe4b06e875b46ce1b"},{"code":"(fn inter [x y]\n  (mapcat #(seq (vector %1 %2)) x y))","problem":39,"user":"535afd76e4b04ce2eb3ed2ab"},{"problem":39,"code":"(fn [v1 v2]\n  (loop [v1 v1 v2 v2 out []]\n    (if (or (empty? v1) (empty? v2))\n      out\n      (recur (rest v1) (rest v2) (into out [(first v1) (first v2)])))))","user":"54e6762be4b024c67c0cf809"},{"code":"(fn inter-leave\n  [col1 col2]\n  (when (and (> (count col1) 0) (> (count col2) 0))\n      (cons (first col1) (cons (first col2)\n                               (inter-leave (rest col1) (rest col2))))))","problem":39,"user":"4f29afc7e4b0d6649770a02e"},{"problem":39,"code":"#(flatten (reduce conj [] (map vector %1 %2)))","user":"594bc16be4b07ddc2dafae39"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [lst1 list1\n         lst2 list2\n         result ()]\n    (if (or (empty? lst1)(empty? lst2))\n      (reverse result)\n      (recur (rest lst1) (rest lst2) (concat (reverse(list (first lst1) (first lst2))) result)))))","user":"5f77d470e4b02876ed9fd0be"},{"problem":39,"code":"(fn [x' y']\n  (loop [x x' y y' sol '()]\n    (let [xf (first x) xs (next x) yf (first y) ys (next y)]\n      (if (and xs ys)\n        (recur xs ys (concat sol (list xf yf)))\n        (concat sol (list xf yf))))))","user":"56d06d55e4b0ea9b8538f77f"},{"problem":39,"code":"(fn pair [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n  ;else take the first from each\n    (conj (pair (rest x) (rest y)) (first y) (first x))\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"problem":39,"code":"#(loop [left %1 right %2 result '()]\n    (if (some #{'()} [left right])\n     (reverse result)\n     (recur (rest left)\n            (rest right)\n            (conj result (first left) (first right)))))","user":"6090e617e4b03bd49d9f36ce"},{"problem":39,"code":"(fn [c1 c2] (loop [c1 c1\n                   c2 c2\n                   res []]\n              (if (or (empty? c1) (empty? c2))\n                res\n                (recur (rest c1) (rest c2) (conj res (first c1) (first c2))))))","user":"5253de67e4b0541d1855b939"},{"problem":39,"code":"(fn interleav [a b] (reverse (loop [output '() index 0] (if (= index (min (count b) (count a))) output (recur (list* (nth b index) (nth a index) output) (+ 1 index))))))","user":"5924009ce4b072a2710fce45"},{"problem":39,"code":"(fn rec [s1 s2]\n  (if (or (empty? s1)\n          (empty? s2))\n    '()\n    (conj (rec (rest s1) (rest s2))\n          (first s2)\n          (first s1))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":39,"code":"(fn [x y ] (flatten (map #(vector %1 %2) x y)))","user":"4ec66e84535d6d7199dd36cd"},{"problem":39,"code":"; (fn my-interleave [c1 c2]\n;   (let [n (apply min (map count [c1 c2]))\n;         x (first (take n c1))\n;         y (first (take n c2))\n;         xs (rest (take n c1))\n;         ys (rest (take n c2))]\n;     (if (= n 1)\n;       (seq [x y])\n;       (concat (seq [x y]) (my-interleave xs ys)))))\n\n; Remember that map will accept multiple lists and pass a value from each as args to f\nmapcat list","user":"54889b50e4b0e286459a11d4"},{"problem":39,"code":"(fn interl [x y]\n  (cond\n   (empty? x) x\n   (empty? y) y\n   :else (cons (first x) (cons (first y) (interl (rest x) (rest y))))))","user":"5e18c885e4b0dc95940084fc"},{"problem":39,"code":"(fn [& xs]\n    (loop [xs xs\n           r  []]\n      (if (some empty? xs)\n        r\n        (recur\n          (map rest xs)\n          (concat r (map first xs))))))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":39,"code":"(fn [l1 l2]\n  (loop\n    [ret '() a l1 b l2]\n    (if \n      (or (empty? a) (empty? b))\n      (reverse ret)\n      (recur (conj ret (first a) (first b)) (rest a) (rest b)))))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"(fn intr [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (cons (first s1) \n          (cons (first s2) \n                (intr (rest s1) (rest s2))))))","problem":39,"user":"503e6047e4b06c4e0e1fa266"},{"problem":39,"code":"(fn inter-leave [coll1 coll2]\n     (loop [coll1 coll1\n            coll2 coll2\n            inter ()\n            pairs (min (count coll1) (count coll2))\n            counter 0]\n       (if (= counter pairs)\n         inter\n         (recur (rest coll1)\n                (rest coll2)\n                (concat inter `(~(first coll1)) (concat `(~(first coll2))))\n                pairs\n                (inc counter)))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1, coll2 coll2, res []]\n    (if (or (empty? coll1) (empty? coll2))\n      res\n      (recur (rest coll1) (rest coll2) (conj res (first coll1) (first coll2))))))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":39,"code":"(fn [seq1 seq2]\n    (letfn [(my-inter [coll1 coll2]\n                     (if (and (not-empty coll1) (not-empty coll2))\n                       (cons (first coll1) (cons (first coll2) (my-inter (rest coll1) (rest coll2))))))]\n                     (my-inter seq1 seq2)))","user":"57213df6e4b0c5bde472c0ab"},{"problem":39,"code":"#(loop[x1 %1 x2 %2 res []] \n           (if (or (empty? x1)(empty? x2))\n               res \n               (recur (rest x1) (rest x2) (conj (conj res (first x1)) (first x2)))))","user":"57ea79d9e4b0bfb2137f5b4f"},{"problem":39,"code":"(fn [seq1 seq2]\n  (let [count1 (count seq1)\n        count2 (count seq2)]\n    (if (> count1 count2)\n      (loop [n 0 res '[]]\n        (if (= n count2)\n          res\n          (recur (inc n) (conj res (nth seq1 n) (nth seq2 n)))))\n      (loop [n 0 res '[]]\n        (if (= n count1)\n          res\n          (recur (inc n) (conj res (nth seq1 n) (nth seq2 n))))))))","user":"5d517784e4b0776584bd6f60"},{"problem":39,"code":"#(loop [ sa %1\n                     sb %2\n                     r []]\n                (let [new-r (conj r (first sa) (first sb))]\n                 (if (or (empty? (rest sa))\n                         (empty? (rest sb)))\n                   new-r\n                   (recur (rest sa)\n                          (rest sb)\n                          new-r))))","user":"59edc518e4b0966464fe6a08"},{"code":"(fn interleave' [& xss] (when (every? first xss) (concat (map first xss) (apply interleave' (map next xss)))))","problem":39,"user":"4ef9c8f9535dced4c769f26b"},{"problem":39,"code":"(fn foo [x y]\n  (loop [x1 x y1 y acc (empty x)]\n    (if (#(if (empty? x1)\n            true (if (empty? y1)\n                   true false)))\n      (reverse acc)\n      (recur (rest x1) (rest y1) (cons  (first y1) (cons (first x1) acc)) ))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":39,"code":"(fn fx[x y] \n(flatten\n(\nwhen(and (first x)(first y))\n(list [(first x) (first y)] (fx (rest x)(rest y)) ))\n\n))","user":"552800d7e4b0ffed3738f93a"},{"problem":39,"code":"(fn seq-inter [m n]\n  (apply concat (map list m n)))","user":"59ece650e4b0249b72820795"},{"code":"(fn [c1 c2]\n  (mapcat (fn [e1 e2]\n            (list e1 e2))\n          c1\n          c2))","problem":39,"user":"5144e89be4b021a5ff8301f9"},{"problem":39,"code":"(fn [x y]\n  (loop [f x s y i []]\n    (if (or (empty? f) (empty? s))\n      (apply list i)\n      (recur (rest f) (rest s) (conj i (first f) (first s)))\n      )\n    )\n  )","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":39,"code":"#(loop [one (take (count %2) %1) two (take (count %1) %2) final []]\n   (if one\n     (recur (next one) (next two) (conj final (first one) (first two)))\n     final))","user":"587294f0e4b01531a375ea1e"},{"code":"#(let [a (vec (take (count %2) %1)) b (vec (take (count %1) %2))] (reduce (fn [r e] (conj (conj r e) (b (/ (count r) 2)))) [] a))","problem":39,"user":"511b9e81e4b00c2a1fa7ff6e"},{"problem":39,"code":"mapcat (fn [x1 x2] [x1 x2])","user":"548ade6de4b0e286459a11f6"},{"code":"#(loop [c0 (seq %1)\n         c1 (seq %2)\n\t       r nil]\n\t       (if (and c0 c1)\n\t\t   (recur (next c0) (next c1) (conj r (first c0) (first c1)))\n\t\t   (reverse r)))","problem":39,"user":"4e8fb386535d65386fec2150"},{"problem":39,"code":"(fn interl [xs ys]\n  (loop [xs xs\n         ys ys\n         output []]\n    (if (or (empty? xs) (empty? ys))\n      output\n      (recur (drop 1 xs) (drop 1 ys) (conj (conj output (first xs)) (first ys))))))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"(fn\n  [c1 c2]\n  (apply concat \n    (map  #(list %1 %2) c1 c2)\n    ))","problem":39,"user":"5183abf6e4b028ec5fd2f2a6"},{"problem":39,"code":"(fn\n    ([seq1 seq2]\n      (let\n        [my_f (fn [acc elms]\n                (concat acc (filter (complement nil?) elms)))]\n        (->> (reduce my_f [] (map vector seq1 seq2))\n             (into [])))))","user":"5984e7dee4b021a7a535fe43"},{"problem":39,"code":"#(flatten (map (fn [f s]\n                      (conj '() s f))\n                    %1 %2))","user":"57fe2d6fe4b0d3187e9009c8"},{"problem":39,"code":"(fn il [res s1 s2] \n  (if \n    (or (= (first s1) nil) \n        (= (first s2) nil)\n        ) \n    \tres  \n    \t(il \n         (conj res (first s1) (first s2)) \n         (rest s1) \n         (rest s2)\n         ) \n    )\n  ) \n[]","user":"55ed962ae4b0121d4835fddd"},{"problem":39,"code":"(fn interl [a b] (flatten (map list a b)))","user":"5641f0ede4b08d4f616f5f11"},{"problem":39,"code":"(fn [as bs]\n  (loop [a as b bs r []]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (conj r (first a) (first b))))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":39,"code":"(fn inter [x y] \n  (if (or (empty? x) (empty? y)) '()\n    (cons (first x) \n          (cons (first y)\n                (inter (rest x)\n                       (rest y) )))))","user":"53504a7de4b084c2834f4ad9"},{"problem":39,"code":"(fn [& xs]\n  (reduce #(concat %1 %2) [] (apply (partial map list) xs)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [seq1 seq2] (mapcat #(list %1 %2) seq1 seq2))","problem":39,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn [a b] (loop [a a b b r []] (if (and (first a) (first b)) (recur (rest a) (rest b) (conj r (first a) (first b))) r)))","problem":39,"user":"500e6c4ee4b04a05d36fcc05"},{"problem":39,"code":"(fn [& xs]\n  (let [n (->> xs (map #(count %)) (apply min))]\n    (reduce (fn [acc x] (concat acc (map #(nth % x) xs)))\n            [] (range n))))","user":"56cf115de4b0ea9b8538f765"},{"code":"(fn my-interleave [seq1, seq2]\n  (let [l1 (first seq1) l2 (first seq2) r1 (next seq1) r2 (next seq2)]\n    (concat\n      (list l1 l2)\n      (when-not (or (nil? r1) (nil? r2))\n        (my-interleave r1 r2)\n      )\n    )\n  )\n)","problem":39,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":39,"code":"(fn my-interleave \n  [coll1 coll2] \n  (flatten (map \n   (fn [a b] [a b]) \n   coll1 \n   coll2)))","user":"5422c959e4b01498b1a71ac7"},{"problem":39,"code":"(fn ileave\n  [a b]\n  (flatten (map #(list %1 %2) a b)))","user":"5ec03772e4b00a66d4a95289"},{"problem":39,"code":"#(loop [seq-1 %1\n        seq-2 %2\n        cumul []]\n   (if (or (empty? seq-1)\n           (empty? seq-2))\n     cumul\n     (recur (rest seq-1)\n            (rest seq-2)\n            (conj cumul (first seq-1) (first seq-2)))))","user":"5595ffabe4b0c79f6e1db972"},{"problem":39,"code":"(fn my-interleave\n  [lstA lstB]\n    (if (or (empty? lstA) (empty? lstB))\n      '()\n      (conj (my-interleave (rest lstA) (rest lstB)) (first lstB) (first lstA)))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":39,"code":"#(loop [alist %1 blist %2 acc []]\n   (if (or (empty? alist) (empty? blist)) acc\n     (recur (rest alist) (rest blist) (filter (complement nil?) (concat acc [(first alist) (first blist)])))))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn interleav [one two]\n\t(if (or (empty? one) (empty? two))\n\t\t'()\n\t\t(concat (list (first one) (first two)) (interleav (rest one) (rest two)))))","problem":39,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn zyp [xs ys]\r\n          (if (or (empty? xs) (empty? ys))\r\n            []\r\n            (cons (first xs) (cons (first ys) (zyp (rest xs) (rest ys))))))","problem":39,"user":"4f07ad89535dcb61093f6c2a"},{"code":"(fn intl [s1 s2] \n  (when (not (or (empty? s1) (empty? s2)))\n   (cons (first s1) (cons (first s2) (intl (rest s1) (rest s2))))\n )\n)","problem":39,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [vec1 vec2] (mapcat #(vector (nth vec1 %1) (nth vec2 %1)) (range 0 (min (count vec1) (count vec2)))))","problem":39,"user":"51519e75e4b03e678e393acf"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [n 0\n         interleaved []]\n    (if (or (>= n (count seq1)) (>= n (count seq2)))\n      interleaved\n      (recur (inc n) (conj interleaved (nth seq1 n) (nth seq2 n))))))","user":"55183a11e4b06a49daca83ca"},{"code":"(fn [a b] (flatten (map (fn [& c] c) a b)))","problem":39,"user":"4e6a4ab9535d8ccf87e9fec2"},{"code":"(fn [x y]\n  (loop [result [] col1 x col2 y]\n    (if (and (seq col1) (seq col2))\n      (recur (conj (conj result (first col1)) (first col2)) (rest col1) (rest col2))\n      result)))","problem":39,"user":"4eb955da535dfed6da9c6d50"},{"problem":39,"code":"(fn [a b]\n  (mapcat list a b) )","user":"58acce0ae4b0005cfeb1a754"},{"code":"(fn [col0 col1]\n     (loop [result [] a col0 b col1]\n       (if (or (empty? a) (empty? b))\n         result\n         (recur (conj result (first a) (first b)) (rest a) (rest b)))))","problem":39,"user":"513a4babe4b067e25a345eca"},{"problem":39,"code":"(fn\n  [coll1 coll2]\n  (apply concat (apply map list [coll1 coll2])))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [s q]\n  (loop [src1 s, src2 q, res []]\n    (if (and (seq src1) (seq src2))\n      (recur\n        (rest src1)\n        (rest src2)\n        (conj res (first src1) (first src2)))\n      res)))","problem":39,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn i [one two]\r\n  (let [h1 (first one)\r\n        t1 (rest one)\r\n        h2 (first two)\r\n        t2 (rest two)]\r\n    (if (and h1 h2)\r\n      (cons h1 (cons h2 (i t1 t2))))))","problem":39,"user":"4dade9e9c9a9d6ed4799dc57"},{"problem":39,"code":"(fn [start1 start2]\n  (loop [s1 start1, s2 start2, res []]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur (rest s1) (rest s2) (conj (conj res (first s1)) (first s2))))\n    )\n  )","user":"5ab5f60be4b073f177442643"},{"code":"(fn[x y](mapcat #(list%%2)x y))","problem":39,"user":"4dd66da7535d2dad7130b5c8"},{"problem":39,"code":"(fn [xs ys]\n  ((fn iter [xs ys res]\n     (if (or (empty? xs) (empty? ys))\n         res\n         (iter (rest xs)\n               (rest ys)\n               (concat res (cons (first xs) (cons (first ys) ()))) ))) xs ys ()))","user":"567d132ee4b05957ce8c61c3"},{"problem":39,"code":"(fn [col1 col2]\n      (loop [col1 col1\n             col2 col2\n             combo (empty col1)]\n        (if (or (empty? col1) (empty? col2))\n          (reverse combo)\n          (recur (rest col1) (rest col2) (cons (first col2) (cons (first col1) combo))))))","user":"55b7f263e4b01b9910ae29b4"},{"problem":39,"code":"(fn [collOne collTwo] (mapcat vector collOne collTwo))","user":"5a5dbe9de4b0512ff01cd92b"},{"code":"(fn nt2\n  ([s r] (nt2 '() s r))\n  ([a s r] (if (or (empty? s) (empty? r))\n            a\n            (nt2 (concat a (cons (first s) '()) (cons (first r) '())) (rest s) (rest r))\n           )\n  )\n)","problem":39,"user":"50b8de6ce4b0cba0e598b652"},{"problem":39,"code":"#(flatten (map  vector %1 %2))","user":"58408643e4b089d5ab817deb"},{"problem":39,"code":"(fn [s1 s2] (reverse (loop [a1 s1 a2 s2 ret '()] (if (or (empty? a1) (empty? a2)) ret (recur (rest a1) (rest a2) (conj ret (first a1) (first a2)))))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"code":"(fn I [s1 s2]\r\n       (when (and (not (empty? s1)) (not (empty? s2)))\r\n             (cons (first s1) \r\n                   (cons (first s2) \r\n                         (I (rest s1) (rest s2))\r\n                   )\r\n             )\r\n        )\r\n     )","problem":39,"user":"4f3543eee4b0e243712b1ebd"},{"code":"(fn [coll1 coll2]\n  (flatten (clj-stacktrace.utils/zip coll1 coll2)))","problem":39,"user":"51736d4de4b00f4b6b0490d7"},{"problem":39,"code":"(fn [a b]\n  (reverse (loop [a a\n         b b\n         pos 0\n         acc (empty a)]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (inc pos) (cons (first b) (cons (first a) acc)))))))","user":"5613a96ae4b05f002753dfa4"},{"problem":39,"code":"(fn ileave [s1 s2] (cond\n               (or (empty? s1) (empty? s2)) []\n               :else\n                 (cons (first s1) (cons (first s2) (ileave (rest s1) (rest s2))))))","user":"5482c4d1e4b0e286459a1186"},{"code":"(partial\n\t(fn [x a b] (if (or (empty? a) (empty? b))\n            (reverse x)\n            (recur (conj x (first a) (first b)) (rest a) (rest b))))\n\t'())","problem":39,"user":"51364acfe4b04ac1f358dd51"},{"problem":39,"code":"(fn redoose [c1- c2-]\n (loop [c1 c1-\n        c2 c2-\n        acc '()]\n   (if (and (seq c1) (seq c2))\n   (recur (rest c1) (rest c2) (concat acc [(first c1) (first c2)]))\n     acc)\n   )\n  )","user":"5b250773e4b063e2438bcc21"},{"problem":39,"code":"(fn inter [x y]\n    \n    (if (or (empty? y) (empty? x))\n      '()\n      (conj (inter (rest x) (rest y)) (first y) (first x))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":39,"code":"(fn [x y]\n  (loop [sx x\n         sy y\n         sz []]\n    (if (or (empty? sx) (empty? sy))\n      sz\n      (recur (rest sx) (rest sy) (conj (conj sz (first sx)) (first sy)))\n      )))","user":"58d4f44ee4b03c36ff7e594f"},{"problem":39,"code":"(fn [s1 s2]\n    (loop [s1 s1\n           s2 s2\n           acc '()]\n      (cond\n        (or (empty? s1) (empty? s2)) (reverse acc)\n        :else (recur (rest s1) (rest s2)\n                     (cons (first s2) (cons (first s1) acc))))))","user":"5600dccee4b04bb52996e175"},{"problem":39,"code":"(fn [seqa seqb]\n  (if\n   (<= (count seqa) (count seqb))\n   (loop [result [] index 0]\n     (if (< index (count seqa))\n       (recur (conj result (get seqa index) (get seqb index)) (inc index))\n       (seq result)))\n   (loop [result [] index 0]\n     (if (< index (count seqb))\n       (recur (conj result (get seqa index) (get seqb index)) (inc index))\n       (seq result)))))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [a b] \n  (apply concat \n         (map #(conj () %2 %) a b)\n  )\n)","problem":39,"user":"50b78ac9e4b0cf3e51c3046a"},{"code":"(fn [list1 list2]\n  (loop [l1 list1\n         l2 list2\n         result nil]\n    (if (or (empty? l1) (empty? l2)) (reverse result)\n        (recur (rest l1) (rest l2) \n            (conj result (first l1) (first l2))))))","problem":39,"user":"4e4c1e8c535dc968683fc4db"},{"problem":39,"code":"(fn myinterleave [a b]\n  (loop [result [] idx 0]\n    (if (or (nil? (nth a idx nil)) (nil? (nth b idx nil)))\n      result\n      (recur (conj (conj result (nth a idx)) (nth b idx)) (inc idx)))))","user":"5ee81beae4b029a2061bbeac"},{"code":"(fn combine[x y] \n    (flatten (map (fn [a b] [a b]) x y)))","problem":39,"user":"4ee8092f535d93acb0a66875"},{"problem":39,"code":"(fn f [vec1 vec2]\n  (mapcat list vec1 vec2)\n)","user":"5bc2df19e4b07a9b28b10038"},{"code":"(fn [col1 col2]\n  (reduce concat\n          (map #(concat () (list %1 %2)) col1 col2)))","problem":39,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         result []]\n    (if (or (empty? s1)\n            (empty? s2))\n      result\n      (recur (rest s1)\n             (rest s2)\n             (conj\n               (conj result (first s1))\n               (first s2))))))","user":"5803cd8fe4b0a837a8b30c96"},{"code":"(fn rep   [a b]\n\n    (if (or (empty? a) (empty? b))\n      '()\n\n      (cons (first a) (cons (first b) (rep (rest a) (rest b))))\n\n)\n\n    )","problem":39,"user":"4e78c208535db95036265722"},{"code":"(fn meu-interleave [s1 s2]\n  (cond \n   (empty? s1) nil\n   (empty? s2) nil\n   :else (cons (first s1) (cons (first s2) (meu-interleave (next s1) (next s2))))))","problem":39,"user":"52c8758be4b0c2d177d62135"},{"problem":39,"code":"(fn [x y]\n  (reduce #(concat %1 %2) (map #(conj '() %2 %1) x y)) \n)","user":"592dbbd5e4b072a2710fcf7f"},{"code":"(fn [l1 l2]\n  (let [len (min (count l1) (count l2))\n        l1 (take len l1)\n        l2 (take len l2)]\n    (flatten (map vector l1 l2))))","problem":39,"user":"516f06dce4b06aac486e5b39"},{"problem":39,"code":"(fn [seq_a seq_b]\n  (if (<= (count seq_a) (count seq_b))\n    (flatten (map-indexed (fn [index item] [item (nth seq_b index)]) seq_a))\n    (flatten (map-indexed (fn [index item] [item (nth seq_b index)]) (take (count seq_b) seq_a)))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"code":"(fn [as bs]\r\n   (loop [as as bs bs acc '()]\r\n     (if (or (nil? (seq as)) (nil? (seq bs)))\r\n       (reverse acc)\r\n       (let [a (first as)\r\n             b (first bs)]\r\n         (recur (rest as) (rest bs) (conj (conj acc a) b))))))","problem":39,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":39,"code":"(fn inter [a b]\n  (let \n    [x (first a)\n     xs (rest a)\n     y (first b)\n     ys (rest b)]\n    (cond\n     (or (empty? a) (empty? b)) '()\n     :else (cons x (cons y (inter xs ys))))))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn my-interleave [x y]\r\n  (loop [x x\r\n         y y\r\n         result []]\r\n    (if (or (empty? x) (empty? y))\r\n      result\r\n      (recur (rest x) (rest y) (conj result (first x) (first y))))))","problem":39,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":39,"code":"(fn my-interleave \n  [q t]\n  (if (or (empty? q) (empty? t))\n    []\n    (concat [(first q) (first t)] (my-interleave (rest q) (rest t)))))","user":"5d05fdece4b0cc9c915881e8"},{"code":"(fn [xs ys]\n  (flatten (map #(list %1 %2) xs ys)))","problem":39,"user":"506c2c9be4b080c1a96bd6be"},{"problem":39,"code":"(fn [xs ys]\n     (mapcat (fn [x y] [x y]) xs ys))","user":"55afe57ae4b002ce9d5cbc1c"},{"code":"(fn iii [a b]\n           (cond\n             (and (not-empty a) (not-empty b))\n              (concat (list (first a) (first b)) (iii (rest a) (rest b)))\n              :else nil))","problem":39,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":39,"code":"(fn\n  [v1 v2]\n  (flatten \n   (apply map vector (vector v1 v2))))","user":"559d7e9ce4b0ec2b359424de"},{"code":"(fn x [a b] (if (and  (not-empty a) (not-empty b)) (cons  (first a) (cons (first b) (x (rest a) (rest b) ) ))))","problem":39,"user":"5149c2f1e4b0829bd132edb0"},{"problem":39,"code":"(fn common [one two] (flatten(apply map vector [one two])))","user":"5437eca1e4b032a45b86930d"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2]\n  (if (or \n       (empty? coll1)\n       (empty? coll2))\n    '()\n    (conj (my-interleave (rest coll1) (rest coll2)) (first coll2) (first coll1))))","user":"55ee7977e4b0121d4835fdee"},{"problem":39,"code":"(fn [a b]\n  (apply concat (map #(identity [%1 %2]) a b)))","user":"5535d34be4b09218d5f44fb0"},{"problem":39,"code":"(fn [a b]\n   (-> (map #(list %1 %2) a b)\n       flatten))","user":"5fa28e2be4b0f0ebd91b77f0"},{"problem":39,"code":"(fn interleave-two-seqs \n    ([x x1] (interleave-two-seqs x x1 0 []))\n    \n    ([x x1 i y]\n        (cond (< i (min (count x) (count x1)))\n            (interleave-two-seqs x x1 (inc i) (conj y (nth x i) (nth x1 i)))\n            :else (apply list y)\n        )\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":39,"code":"(fn foo [ret s1 s2]\n\t(if (or (= (count s1) 0) (= (count s2) 0))\n\t\tret\n\t\t(cons (first s1) \n\t\t\t(cons (first s2) (foo ret (rest s1) (rest s2))))\n\t)\n) []","user":"53a94b63e4b047364c044434"},{"code":"(fn iter [xs ys]\n  (if (and (seq xs) (seq ys))\n      (let [[x & xs2] xs\n            [y & ys2] ys]\n        (cons x (cons y (iter xs2 ys2))))\n      '()))","problem":39,"user":"4e8338d6535db62dc21a62d3"},{"code":"#([0 [1 5] [30 25 20 15] [1 :a 2 :b 3 :c] [1 3 2 4]] (count %2))","problem":39,"user":"538d8bb8e4b0b51d73faae71"},{"code":"#(reduce concat (for [x (range (min (count %1) (count %2))) :let [y (nth %1 x), z (nth %2 x)]] [y z]))","problem":39,"user":"5017f840e4b02f523d7cc5e8"},{"problem":39,"code":"(fn [arg1 arg2]\n (loop [acc []\n        arg1 arg1\n        arg2 arg2]\n   (if (or (empty? arg1) (empty? arg2))\n     acc\n     (recur (conj acc (first arg1) (first arg2))\n            (rest arg1)\n            (rest arg2)))))","user":"57d13683e4b0bd073c202368"},{"problem":39,"code":"(fn intr\n    [seq1 seq2]\n    (let \n      [cnt1 (count seq1)\n       cnt2 (count seq2)\n       cntMin (min cnt1 cnt2)\n       ]\n      \n      (if (not= cnt1 cnt2)\n        (intr \n          (take cntMin seq1) \n          (take cntMin seq2)\n          )\n        \n        (if (= 0 cntMin)\n          '()\n          \n          (cons\n            (first seq1) \n            (cons\n              (first seq2) \n              (intr \n                (rest seq1)\n                (rest seq2)\n                )\n              )\n            )\n          )\n        \n        )\n      )\n    )","user":"539da224e4b0b51d73faaf39"},{"problem":39,"code":"(fn my-interleave [s1 s2] (mapcat list s1 s2))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [a b]\r\n  (reduce concat\r\n    (map #(list %1 %2) a b)))","problem":39,"user":"4df407c3535d08e6dec9fe2e"},{"problem":39,"code":"(fn foo [fir sec]\n        (if (or (empty? fir) (empty? sec))\n          nil\n          (conj (conj (foo (rest fir) (rest sec)) (first sec)) (first fir))))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":39,"code":"(fn [& lsts] \n    (let [any-nil? (fn [cols] (seq (filter nil? cols)))] \n         (loop [res [] ls lsts] \n               (if (any-nil? ls) \n                 res \n                 (recur (concat res (map first ls)) \n                        (map next ls))))))","user":"56201509e4b064ca9f4b16da"},{"code":"(fn [seq0 seq1]\n    (mapcat (fn [x y] (list x y)) seq0 seq1))","problem":39,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [a col1 b col2 c []]\n    (if (or (nil? a) (nil? b))\n      c\n      (recur (next a) (next b) (conj c (first a) (first b))))))","user":"574abbfbe4b02ea114799200"},{"problem":39,"code":"(fn [coll-1 coll-2]  \n  (apply concat (map (fn [a b] [a b]) coll-1 coll-2)))","user":"5486e317e4b0e286459a11c0"},{"code":"#(loop [result () cnt (- (min (count %1) (count %2)) 1)]\n         (if (= -1 cnt)\n           result\n           (recur (into result (list (nth %2 cnt) (nth %1 cnt))) (dec cnt)) ))\n\n;(map #(concat %&) [1 2] [3 4] [2 3])","problem":39,"user":"528f4462e4b0239c8a67aef0"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys res '()]\n    (if (or (empty? xs) (empty? ys))\n      res\n      (recur (rest xs) (rest ys) (concat res [(first xs) (first ys)])))))","problem":39,"user":"4f3a979de4b0e243712b1f10"},{"problem":39,"code":";#(mapcat vec (zipmap %1 %2))\nmapcat vector","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":39,"code":"(fn myInterleave [[x & xs] [y & ys]] \n  (when-not (or (nil? x) (nil? y))\n    (into [x y] (myInterleave xs ys))))","user":"5443a894e4b032a45b869388"},{"code":"(fn [x,y] \n  (loop [s1 x, s2 y, dst []]\n    (if (or (empty? s1) (empty? s2))\n      dst\n      (recur (drop 1 s1) (drop 1 s2) (conj dst (first s1) (first s2))))))","problem":39,"user":"50d4c940e4b09cc622d65a71"},{"code":"(fn [xs ys]\n  (flatten (map vector xs ys)))","problem":39,"user":"4e8944b6535d4ef0aa30db98"},{"code":"(fn x-interleave [seq-1 seq-2]\n  (cond\n    (every? #(> % 1) [(count seq-1) (count seq-2)])\n    (flatten [(first seq-1) (first seq-2) (x-interleave (next seq-1) (next seq-2))])\n    (every? #(> % 0) [(count seq-1) (count seq-2)])\n    [(first seq-1) (first seq-2)]))","problem":39,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [x y]\n  (loop [xs x ys y result []]\n    (if (not (or (empty? xs) (empty? ys)))\n      (recur (rest xs) (rest ys) (conj result (first xs) (first ys)))\n      result)))","problem":39,"user":"51d10b1fe4b067c36548635e"},{"problem":39,"code":"(fn my-interleave\n  [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2))\n    (empty seq1)\n        (conj (my-interleave (rest seq1) (rest seq2)) (first seq2) (first seq1))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":39,"code":"(fn [arr1 arr2]\n  (loop [acc '() x arr1 y arr2]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (concat acc (concat (list (first x)) (list (first y)))) (rest x) (rest y)))))","user":"5dcbd629e4b02b31cc3da3bd"},{"problem":39,"code":"(fn inter-col [coll1 coll2]\n  (loop [acc []\n         [el1 & rest1] coll1\n         [el2 & rest2] coll2]\n    (if (or (nil? el1) (nil? el2)) acc\n        (recur (conj acc el1 el2) rest1 rest2))))","user":"55f6f1d3e4b06e875b46cea0"},{"code":"(fn leave [x y] (if (and (not (empty? x)) (not (empty? y)))\n                   (cons (first x) (cons (first y) (leave (rest x) (rest y))))\n                   []\n                  ))","problem":39,"user":"525cc912e4b0cb4875a45d48"},{"code":"(fn [a b] (flatten (map #(-> [%1 %2]) a b)))","problem":39,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn [& s] (flatten (apply map (fn [& t] t) s)))","problem":39,"user":"527818f7e4b03e8d9a4a7519"},{"problem":39,"code":"(fn leave [a b]\n  (when (and (not-empty a) (not-empty b))\n    (concat (vector (first a)) (vector (first b))\n            (leave (rest a) (rest b)))))","user":"5eb7b41ee4b00a66d4a9523c"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2]\n  (let [mapped-coll (map vector coll1 coll2)]\n    (reduce\n      (fn [coll item]\n        (into coll item))\n      []\n      mapped-coll)))","user":"5890799be4b00487982d51d6"},{"code":"(fn [a b] (flatten (map list a b)))","problem":39,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn ntr ([a b]\n           (if (and (> (count a) 0) (> (count b) 0))\n             (list* (first a) (first b) (ntr (rest a) (rest b))))\n           ))","problem":39,"user":"522afe78e4b0d34ee08e71b3"},{"problem":39,"code":"(fn [x y] \n  (reduce concat (map #(vector %1 %2) x y)) )","user":"54e345a1e4b024c67c0cf7db"},{"problem":39,"code":"(fn [x y]\n  (->> (min (count x) (count y))\n       (range)\n       (mapcat #(vector (nth x %) (nth y %)))))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":39,"code":"(fn leave [x y]\n  (apply concat\n    (for [n (range 0 (apply min (map count [x y])))]\n      ; (println n (count x) (>= n (count x)) (count y) (>= n (count y)))\n      (cond\n        (>= n (count x)) [(nth y n)]\n        (>= n (count y)) [(nth x n)]\n        :else [(nth x n)(nth y n)])\n    )\n  )\n)","user":"5a1c8353e4b0ff51aa4b3244"},{"code":"(fn [s1 s2]\n  (reverse\n  \t(loop [acc '() xs s1 ys s2]\n    \t(if (or (empty? xs) (empty? ys)) acc (recur (cons (first ys) (cons (first xs) acc)) (rest xs) (rest ys))))))","problem":39,"user":"52199105e4b0c4ef0be82ff9"},{"problem":39,"code":";#(flatten (map vector %1 %2))\n\n#(-> (map vector %1 %2) flatten)","user":"58c66990e4b021aa9917ed53"},{"code":"(fn inter [s1 s2] \n  (when-not (or (empty? s1) (empty? s2))\n    (lazy-seq (concat (list (first s1) (first s2)) (inter (rest s1) (rest s2))))))","problem":39,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":39,"code":"(fn [collA collB]\n  (->> (map vector collA collB)\n       (apply concat)))","user":"5c15537ae4b01240ff5671bf"},{"problem":39,"code":"(fn [s1 s2 & ret]\n  (if (or (empty? s1) (empty? s2))\n      (reverse (flatten ret))\n      (recur  (rest s1) (rest s2) (conj ret (first s1) (first s2) ))\n    )\n  )","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn inter [x y] (let [a (first x) b (first y)] (if (and a b) (cons a (cons b (inter (rest x) (rest y)))))))","problem":39,"user":"535920b2e4b04ce2eb3ed294"},{"problem":39,"code":"(fn [xs ys]\n  (mapcat #(vector (nth xs %) (nth ys %))\n          (range (min (count xs) (count ys)))))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":39,"code":"(fn my-interleave [first-col second-col]\n  (mapcat #(conj [] %1 %2) first-col second-col)\n)","user":"59b0e877e4b0e1f4e384c8d3"},{"code":"#(flatten (map ( fn [a b] (vector a b) ) %1\t %2 ))","problem":39,"user":"53029281e4b0d8b024fd372e"},{"problem":39,"code":"(fn f [xs ys]\n  (if (and (seq xs) (seq ys))\n    (cons (first xs)\n          (cons (first ys)\n                (f (rest xs) (rest ys))))\n    nil))","user":"4f8490fae4b033992c121c34"},{"problem":39,"code":";(fn interleaver [& args]\n;  (loop [result [] args args]\n;    (if (every? seq args)\n;      (recur (concat result (map first args)) (map rest args))\n;      result)))\n\nmapcat list","user":"53838b9ee4b06839e8705ee1"},{"code":"(fn [x y] (flatten (map #(into [] (vector % %2)) x y)))","problem":39,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":39,"code":"(fn [a b] \n  (loop [list1 a list2 b result []] \n    (if (or (empty? list1) (empty? list2)) \n      result \n      (recur (rest list1) (rest list2) (concat result [(first list1) (first list2)])))))\n\n;very elegant solution\n; mapcat list","user":"55e01f4ee4b050e68259b406"},{"problem":39,"code":"(fn [& seqs] \n    (flatten (apply map vector seqs))\n    )","user":"56fe665be4b08d47c97781af"},{"problem":39,"code":"(fn ileave [x y]\n  (if (= 1 (min (count x) (count y)))\n    (list (first x) (first y))\n    (concat (list (first x) (first y)) (ileave (rest x) (rest y)))\n  )\n)","user":"54b050cee4b09f271ff37d13"},{"code":"#(flatten (into '() (zipmap %1 %2)))","problem":39,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"code":"(fn[s t](apply concat(map #(conj[]%1%2) s t)))","problem":39,"user":"516e9d9be4b06aac486e5b2b"},{"problem":39,"code":"(fn [a b] (flatten (apply map vector [a b])))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [s1 s2] (apply concat (map (fn [x y] [x y]) s1 s2)))","problem":39,"user":"513bb7a6e4b04402f587b77d"},{"code":"(fn hoge [& x]\n\t(apply (partial mapcat list) x))","problem":39,"user":"52381b2ae4b0fae3832e99ef"},{"problem":39,"code":"(fn [s1 s2]\n              (flatten (map #(vector %1 %2) s1 s2)))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn rinterleave\n  [xsa xsb]\n  (concat \n   (if (and (first xsa) (first xsb))\n     (list (first xsa) (first xsb))\n     nil)\n   (if (or (empty? xsa) (empty? xsb))\n     nil\n     (rinterleave (rest xsa) (rest xsb))\n     )\n   ))","problem":39,"user":"536aa86de4b0243289761eb1"},{"code":"(fn foo [a b]\n  (let [x (first a) y (first b)]\n    (if (and x y)\n      (concat\n        (list x y)\n        (foo (rest a) (rest b))\n        '()\n        ))))","problem":39,"user":"510b704ee4b078ea71921100"},{"problem":39,"code":"(fn interlv [x y] \n  (if (or (= x []) (= y [])) '()\n    (concat (list (first x) (first y)) (interlv (rest x) (rest y)))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":39,"code":"(fn [s1 s2]\n  (let [min-length (apply min (map count [s1 s2]))]\n    (apply concat\n           (for [i (range min-length)]\n             [(nth s1 i) (nth s2 i)]\n             )\n           )\n    )\n  )","user":"57cd7498e4b0c746388ab897"},{"problem":39,"code":"(fn _interleave \n  [col1 col2]\n  \n  (reverse (loop [result (list) col1 col1 col2 col2]\n      \n    (if (or (empty? col1) (empty? col2)) result (recur (cons (first col2) (cons (first col1) result)) (rest col1) (rest col2))) \n                           \n  ))\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":39,"code":"(fn [first second] (flatten (map #(vector %1 %2) first second)))","user":"56014f55e4b04bb52996e184"},{"problem":39,"code":"(fn [A B] (let [m (min (count A) (count B))]\n            (loop [i 0 res []]\n\t\t\t  (if (< i m)\n                (recur (inc i) (concat res (list (nth A i) (nth B i))))\n                res)\n              )\n     ))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":39,"code":"(fn [x y] (mapcat #(concat [%1] [%2]) x y))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 res []]\n    (if (or (empty? c1) (empty? c2))\n        res\n        (recur (rest c1) (rest c2) (conj (conj res (first c1)) (first c2))))))","problem":39,"user":"5116e176e4b0063b4e3e16d7"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [result []\n         col1 col1\n         col2 col2]\n    (if (or (zero? (count col1))\n            (zero? (count col2)))\n      result\n      (recur (conj result\n                   (first col1)\n                   (first col2))\n             (rest col1)\n             (rest col2)))))","user":"5c38422ae4b0d62ef62d9f7f"},{"problem":39,"code":"(fn k [a b] (if (and (first a) (first b)) (cons (first a) (cons (first b) (k (rest a) (rest b)) )) ))","user":"549b34e0e4b0f3d1d8e70f7c"},{"problem":39,"code":"(fn [coll1 coll2] \n  (let [iters (min (count coll1) (count coll2))]\n    (loop\n      [i 0, acc `()]\n      (if (< i iters)\n        (recur (inc i) (concat acc (list (nth coll1 i) (nth coll2 i))))\n        acc))))","user":"57434103e4b0c285004e8a9e"},{"problem":39,"code":"(fn [& args]\n (apply mapcat vector args))","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":39,"code":"(fn \n  [x y]\n  (let [x x y y z []]\n    (flatten (map #(conj z %1 %2) x y))))","user":"57061d20e4b0b0fb43fd0679"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1, c2 coll2, acc '()]\n    (if (or (= 0 (count c1)) (= 0 (count c2)))\n      (reverse acc)\n      (recur (rest c1) (rest c2) (conj acc (first c1) (first c2))))))","user":"5660fe2ce4b068f2fe63dc5e"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n         y y\n         lst ()]\n    (if (or (empty? x) (empty? y))\n      lst\n      (recur (rest x) (rest y) (concat lst (list (first x)) (list (first y)))))))","user":"57f81549e4b0d3187e900918"},{"code":"(fn [a b]\n  (loop [rr [] aa a bb b ff true]\n    (if (and ff (or (empty? aa) (empty? bb)))\n        rr\n        (if ff\n          (recur (conj rr (first aa)) (rest aa) bb false)\n          (recur (conj rr (first bb)) aa (rest bb) true)))))","problem":39,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":39,"code":"#(loop[[x & xs] %1\n        [y & ys] %2\n        res '()]\n    (cond\n      (nil? x) (reverse res)\n      (nil? y) (reverse res)\n      :else\n      (recur xs ys (conj res x y))))","user":"56acfee5e4b03c432f18734f"},{"problem":39,"code":"(fn [s1 s2]\n  \n  (loop [s1 s1\n         s2 s2\n         output []]\n\n    (if (or (empty? s1) (empty? s2))\n      \n      output\n      (recur (rest s1)\n             (rest s2)\n             (conj (conj output (first s1)) (first s2) )\n       )\n      )\n    )\n  )","user":"56b7c32ee4b0982f16b37e48"},{"code":"(fn my-interleave [coll1 coll2 & outcoll]\n           (if (and (< 0 (count coll1)) (< 0 (count coll2)))\n               (my-interleave (rest coll1) (rest coll2) (cons [(first coll2) (first coll1)] outcoll))\n             (reverse (flatten outcoll))))","problem":39,"user":"503be880e4b0fc0f99c2e54a"},{"problem":39,"code":"(fn [x y ]\n  (flatten (map #(vector %1 %2) x y))\n)","user":"56195e57e4b053970a773af6"},{"problem":39,"code":"(fn go [[x & xs] [y & ys]]\n  (if (and x y)\n    (cons x (cons y (go xs ys)))))","user":"556ffa45e4b09a3098a52528"},{"code":"(fn [s1 s2]\n  (apply concat\n    (map #(list (nth s1 %) (nth s2 %))\n         (range (apply min (map count [s1 s2]))))))","problem":39,"user":"4e2edb0e535deb9a81d77f0d"},{"code":"(fn [x y] (flatten (map #(list % %2) x y)))","problem":39,"user":"50127fbfe4b030d97e4db70f"},{"problem":39,"code":"(fn [l1 l2] (flatten (into '() (apply zipmap (map #(take (min (count l1) (count l2)) %1) [l1 l2])))))","user":"53e92f82e4b036ad0777e49d"},{"problem":39,"code":"(fn \n  [lst lst2]\n  \t(mapcat #(list %1 %2) lst lst2))","user":"57f81569e4b0d3187e900919"},{"code":"(fn [& xs] (apply concat (apply map vector xs)))","problem":39,"user":"4e50b67b535dc968683fc4ed"},{"problem":39,"code":"(fn [x y]\n  (loop [xi (first x) xs (next x) yi (first y) ys (next y) res []]\n    (if-not (and xi yi)\n      res\n      (recur (first xs) (next xs) (first ys) (next ys) (conj res xi yi)))))","user":"589f2cefe4b02bd94d917e75"},{"problem":39,"code":"(fn [vec1 vec2]\n  (let [min1 (min (count vec1) (count vec2))]\n\t(flatten (map #(seq [%1 %2]) (take min1 vec1) (take min1 vec2)))))","user":"57f52d3be4b0903ccab3dce7"},{"problem":39,"code":"(fn hehe [x y]\n  (flatten\n   (let \n     [a (first x) b (first y)]\n     (vec\n      (when (not (or (nil? a) (nil? b))) \n        (list a b (hehe (rest x) (rest y)))\n        )\n      )\n     )\n   )\n  )","user":"5451cb81e4b0e397800069b6"},{"code":"(fn this\n  ([xs ys] (this xs ys []))\n  ([[xh & xt :as xs] [yh & yt :as ys] acc]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur xt yt (conj acc xh yh)))))","problem":39,"user":"4f2e0369e4b0d6649770a064"},{"problem":39,"code":"(comp flatten (partial map #(conj '() %2 %1)))","user":"4e38f245535deb9a81d77f3e"},{"problem":39,"code":"(fn [a b]\n  (mapcat #(identity [%1 %2]) a b)\n)","user":"567b9ff7e4b05957ce8c61a9"},{"code":"(fn [coll1 coll2] (mapcat (fn [e1 e2] [e1 e2]) coll1 coll2))","problem":39,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":39,"code":"(fn inter [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a)\n          (cons (first b)\n                (inter (rest a) (rest b))))))","user":"55670a05e4b0c656e3ff1838"},{"problem":39,"code":"(fn [& ss]\n  (loop [seqs ss\n         acc []]\n    (if (some empty? seqs)\n      acc\n      (recur\n       (map #(drop 1 %1) seqs)\n       (into acc (map first seqs))))))","user":"56c2c342e4b05cc29241ee85"},{"problem":39,"code":"(fn [x y]\n    (letfn [(f [a x y] \n              (let [fx (first x)\n                    fy (first y)\n                    rx (rest x)\n                    ry (rest y)]\n                (if (and (seq x) (seq y)) \n                  (recur (conj a fx fy) rx ry)\n                  a)))]\n    (reverse  (f () x y))))","user":"5578ba3ae4b05c286339e08c"},{"code":"(fn [coll1 coll2]\r\n  (reduce concat (map-indexed #(nth %2 %1) (partition (max (count coll1) (count coll2)) (for [x coll1 y coll2] (list x y))))))","problem":39,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":39,"code":"(fn [xxs yys]\n  (loop [acc [] xs xxs ys yys]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur (concat acc [(first xs) (first ys)]) (rest xs) (rest ys)))))","user":"5376190de4b06839e8705e1c"},{"code":"#((fn [a b c]\n  (cond\n  \t(empty? a) (reverse c)\n\t\t(empty? b) (reverse c)\n\t\t:else (recur (rest a) (rest b) (conj c (first a) (first b)))\n\t)) %1 %2 ())","problem":39,"user":"4fc0853ae4b081705acca327"},{"code":"(fn [a b]\r\n  (let [m (min (count a) (count b))]\r\n    (loop [result [] x 0]\r\n      (if (= x m)\r\n        result\r\n        (recur (conj (conj result (nth a x)) (nth b x)) (inc x))))))","problem":39,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"(fn [n m] (flatten (map #(vector %1 %2) n m)))","problem":39,"user":"4ea5e32a535d7eef308072de"},{"problem":39,"code":"(fn inter [xs ys]\n  (if (seq xs)\n    (if (seq ys)\n      (concat [(first xs) (first ys)] (inter (rest xs) (rest ys)))\n      '())\n    '()))","user":"5f3adcf4e4b004f08c61c531"},{"problem":39,"code":"; second\n(fn [x y]\n  (loop [x x\n         y y\n         r []]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))\n\n; first\n#_(fn !\n  ([[x & x2] [y & y2] r]\n   (if (or (nil? x) (nil? y))\n     r\n     (! x2 y2 (conj r x y))))\n  ([x y] (! x y [])))","user":"55e7d06ee4b050e68259b496"},{"problem":39,"code":"mapcat (fn [& args] (apply list args))","user":"554a270fe4b0a04f79299570"},{"problem":39,"code":"(comp flatten (partial into ()) zipmap)","user":"5e84b48ee4b09a7a73c8bbc8"},{"code":"(fn interleaver [s1 s2]\n  (loop [ret '() a s1 b s2]\n    (if \n      (some nil? (list (first a) (first b)))\n      ret\n      (recur \n        (concat ret (list (first a) (first b))) \n        (rest a) \n        (rest b)))))","problem":39,"user":"4f03fb59535dcb61093f6b89"},{"problem":39,"code":"(fn [lis1 lis2]\n   (flatten\n          (map (fn [a b] [a b]) lis1 lis2)))","user":"59636b49e4b066ee0a44b0c5"},{"code":"(fn [c1 c2] (reduce into (map #(into [ %1] [ %2]) c1 c2)))","problem":39,"user":"525a7b9fe4b0cb4875a45cf5"},{"problem":39,"code":"(fn [left right] (let [recursor (fn recurs [out l r] (if (or (empty? l) (empty? r)) out (recurs (concat out (list (first l) (first r))) (rest l) (rest r))))] (recursor '() left right)))","user":"58950f29e4b00487982d5270"},{"code":"(fn zipper [x y] \n  (let [v []] \n               (flatten (map #(conj v %1 %2) x y))\n    )\n  )","problem":39,"user":"52e12aa0e4b09f7907dd1419"},{"code":"(fn myinterleave [xs ys]\n  (cond (or (empty? xs) (empty? ys)) '()\n        true (conj (myinterleave (rest xs) (rest ys))\n                   (first ys) (first xs))))","problem":39,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn zip [xs ys]\n  (if (or (empty? xs) (empty? ys)) \n    '()\n    (concat (list (first xs) (first ys))\n            (zip (rest xs) (rest ys)))))","problem":39,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":39,"code":"#(mapcat list\n         %1 %2)","user":"5c9d0a0be4b048ec896c5afc"},{"code":"(fn [v w] (apply concat \n  (vec (for\n    [i (range (min (count v) (count w)))]\n       (list (v i) (w i))))))","problem":39,"user":"4e6e3a1e535d5021c1a89602"},{"problem":39,"code":"#(flatten (map list (take (min (count %1) (count %2)) %1) (take (min (count %1) (count %2)) %2)))","user":"5ed08785e4b016b56eae05b1"},{"problem":39,"code":"(fn interleave-seqs [col1 col2]\n  (mapcat #(list %1 %2) col1 col2))","user":"5fa52497e4b0fa27300f3dbf"},{"code":"(fn [coll1 coll2] (flatten (map #(vector %1 %2) coll1 coll2)))","problem":39,"user":"4e7e1483535db169f9c79702"},{"problem":39,"code":"(fn il\n  [a b]\n  (loop [a a\n         b b\n         sq []]\n    (if (or (empty? a) (empty? b))\n      sq\n      (recur (rest a) (rest b) (conj (conj sq (first a)) (first b))))))","user":"55f7c873e4b06e875b46ceb0"},{"problem":39,"code":"(fn [xs ys]\n  (loop [result []\n         xs xs\n         ys ys]\n    (if (some empty? [xs ys]) result\n      (recur (conj result (first xs) (first ys))\n             (rest xs)\n             (rest ys)))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"code":"(fn [c1 c2]\r\n  (reverse ((fn [c1 c2 res]\r\n     (if (or (nil? c1) (nil? c2))\r\n       res\r\n       (recur (next c1) (next c2) (cons (first c2) (cons (first c1) res))))) c1 c2 nil)))","problem":39,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn \n  [a b]\n  (apply vector (mapcat vector a b)))","problem":39,"user":"52d39acce4b099d49816f0c7"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (cond\n    (or (empty? lst1) (empty? lst2)) ()\n    :else (concat (cons (first lst1) (cons (first lst2) ())) (my-interleave (rest lst1) (rest lst2))))\n  )","user":"57f81532e4b0d3187e900914"},{"code":"#(flatten (map-indexed (fn [idx itm] (if (< idx (min (count %1) (count %2))) [itm (nth %2 idx)] [])) %1))","problem":39,"user":"52dde81fe4b09f7907dd13eb"},{"problem":39,"code":"(fn [x y]\n  (loop [res [], a x, b y]\n    (if (some empty? [a b])\n      res\n        (recur (conj res (first a) (first b))\n               (drop 1 a)\n               (drop 1 b)))))","user":"51cd75d6e4b02254fc79488c"},{"problem":39,"code":"(fn\n  [list1 list2]\n\t(loop \n      [lst1 list1 lst2 list2 final-vector []]\n      \n      (if (or (= (count lst1) 0) (= (count lst2) 0))\n      \tfinal-vector\n        (recur (rest lst1)\n               (rest lst2)\n               (conj (conj final-vector (first lst1)) (first lst2))))))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":39,"code":"(fn [a b] (loop [x a y b p '()]\n            (if (or \n                 (empty? x)\n                 (empty? y))\n              (reverse p)\n              (recur\n               (rest x)\n               (rest y)\n               (conj (conj p (first x)) (first y))\n               )\n              )\n            )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"problem":39,"code":"(fn i2 ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (i2 (rest s1) (rest s2))))))))\n  )","user":"6034e358e4b0d5df2af222d1"},{"problem":39,"code":"(fn [col1 col2]\n           (reduce concat (map (fn [x1 x2]\n                                 [x1 x2]) col1 col2)))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn [col1 col2]\r\n  (loop [result [], c1 col1, c2 col2]\r\n    (if (or (nil? (first c1)) (nil? (first c2)))\r\n      result\r\n      (recur (conj result (first c1) (first c2)) (rest c1) (rest c2))\r\n      )\r\n    ))","problem":39,"user":"4e794004535db169f9c796a1"},{"problem":39,"code":"(fn [xs ys] \n  (loop [as  xs\n         bs  ys\n         res []]\n    (if (or (empty? as) (empty? bs))\n      res\n      (recur (rest as) (rest bs) (conj res (first as) (first bs))))))","user":"5565f616e4b0c656e3ff1823"},{"code":"(fn [x y] (reduce concat (map list x y)))","problem":39,"user":"50856bd1e4b004985b776e4c"},{"code":"#(flatten (mapv vector % %2))","problem":39,"user":"4dc78527535d8a4b2fd7428f"},{"problem":39,"code":"(fn myInterleave [xs ys]\n  (let [x1 (first xs) y1 (first ys)]\n  (when (and x1 y1)\n  (cons x1 (cons y1 (myInterleave (rest xs) (rest ys) ) ) ))))","user":"5f5a62b4e4b0a0bc16850aa6"},{"problem":39,"code":"(fn [s1 s2]\n        (apply concat (map vector s1 s2)))","user":"546c4377e4b00cfc9eacc177"},{"code":"#(loop [ l1 %1 l2 %2 l3 '() ]\n   (if (or (empty? l1) (empty? l2)) (flatten (reverse l3))\n        (recur (rest l1) (rest l2) (cons [(first l1) (first l2)] l3))))","problem":39,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"#(reduce into [] (map list %1 %2))","problem":39,"user":"50517ebfe4b0a561d07d8f06"},{"problem":39,"code":"(fn [a b]\n  (loop [[a & rest-a] a [b & rest-b] b ret []]\n    (if (and a b)\n      (recur rest-a rest-b (conj ret a b))\n      ret)))","user":"53d86564e4b0e771c302546b"},{"code":"(fn intrlv\n  [vals1 vals2]\n  (loop [result []\n         frst vals1\n         scnd vals2]\n    (if\n      (or (empty? frst) (empty? scnd))\n        result (recur\n                 (conj result (first frst) (first scnd))\n                 (rest frst)\n                 (rest scnd)))))","problem":39,"user":"4edfb618535d10e5ff6f5343"},{"problem":39,"code":"(fn [& arrs]\n  (let [shortest (count (first (sort-by count arrs)))]\n    ((fn [result]\n       (if (< (count result) shortest)\n         (recur (conj result (map #(get % (count result)) arrs)))\n         (flatten result))) [])))","user":"58bef424e4b021aa9917eccb"},{"problem":39,"code":"(fn zip [f s]\n   (if (or (empty? f) (empty? s))\n     []\n     (concat (vector (first f) (first s))\n             (zip (rest f) (rest s)))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":39,"code":"(fn [a b] (mapcat (fn [x y] (cons x (cons y ()))) a b))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn interleave2 [seq1 seq2] (\n                                           cond\n                                              (empty? seq1) []\n                                              (empty? seq2) []\n                                              :else (cons (first seq1) (cons (first seq2) (interleave2 (rest seq1) (rest seq2))))))","problem":39,"user":"514cc029e4b019235f6c057c"},{"problem":39,"code":"#(loop [n [] x %1 y %2] (if (or (empty? x) (empty? y)) n (recur (conj n (first x) (first y)) (rest x) (rest y))))","user":"5d62ce13e4b0c9e5857d501f"},{"code":"(fn [a b] (for [i (range 0 (* 2 (min (count a) (count b))))] (if (even? i) (a (quot i 2)) (b (quot i 2)))))","problem":39,"user":"4ed1f84f535d44c135fd68d3"},{"problem":39,"code":"(fn my-interleave [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n    (list x y)\n    (concat (list x y) (my-interleave xs ys))))","user":"58a953dae4b01a0c0b232968"},{"code":"(fn intl [coll1 coll2]\r\n        (loop [c1 coll1 c2 coll2 acc ()]\r\n     (if (and (next c1) (next c2))\r\n\t       (recur (next c1) (next c2) (concat acc [(first c1) (first c2)]))\r\n\t       (concat acc [(first c1) (first c2)]))))","problem":39,"user":"4e46ac46535dc968683fc4b5"},{"code":"(fn [xs ys]\n  (reduce concat (map #(conj [] %1 %2) xs ys)))","problem":39,"user":"5079fd71e4b08327cd804a66"},{"problem":39,"code":"(fn my-interleave\n  ([seq1 seq2]\n   (my-interleave seq1 seq2 '()))\n  ([seq1 seq2 new-seq]\n   (if (or (nil? (first seq1)) (nil? (first seq2)))\n     new-seq\n     (my-interleave (rest seq1) (rest seq2) (concat new-seq (list (first seq1) (first seq2)))))))","user":"540271aee4b0df28a13c62d0"},{"problem":39,"code":"(fn [s1 s2] (loop[s1 s1\n                   s2 s2\n                   s '()]\n               (if (first s1)\n                 (if (first s2)\n                   (recur (rest s1) (rest s2) (conj (conj s (first s1)) (first s2)))\n                   (reverse s))\n                 (reverse s))))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn[a b]\n  (loop [x a y b inter []]\n    (if (or (empty? x) (empty? y))\n      inter\n      (recur (rest x) \n             (rest y) \n             (conj (conj inter (first x)) (first y))))))","problem":39,"user":"4f6236abe4b0defedf855fcd"},{"problem":39,"code":"(fn [one two]\n  (let [minlength (min (count one) (count two))]\n  (loop [result [] one (take minlength one) two (take minlength two)]\n    (if (= (count one) 0)\n      result\n      (recur (conj result (first one)) two (rest one))\n    ))))","user":"55d79b87e4b0e31453f64aa8"},{"problem":39,"code":"(fn [a b]\n\n (flatten (map (fn [x y] [x y]) a b)))","user":"5e5349ebe4b027a2e10ac0e2"},{"problem":39,"code":"#(loop [xs %1, ys %2, result []]\n   (if (some empty? [xs ys])\n     result\n     (recur (rest xs)\n            (rest ys)\n            (conj result (first xs) (first ys)))))","user":"58247423e4b051871117bec5"},{"problem":39,"code":"(fn [x y] (flatten (map #(do [%1 %2]) x y)))","user":"55a346e8e4b0acc240e31532"},{"problem":39,"code":"(fn join\n    [x y]\n    (if (or (empty? x) (empty? y)) '()\n                                   (concat (list (first x) (first y))\n                                           (join (rest x) (rest y)))))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"mapcat #(into [] [%1 %2])","problem":39,"user":"4ec6f4ee535d6d7199dd36dc"},{"code":"(fn [c1 c2] (mapcat list c1 c2))","problem":39,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn f [x y]\n  (let [x1 (seq x) y1 (seq y)]\n    (when (and x1 y1)\n      (cons (first x1) (cons (first y1) (f (rest x1) (rest y1)))))))","problem":39,"user":"4fe9231ce4b0547ebccb2445"},{"code":"(fn [x y] (flatten (map #(list %1 %2) x y  )))","problem":39,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"(fn interleave-2-seqs [left right]\n  (mapcat vector left right)\n  )","problem":39,"user":"510a3cd4e4b06956752d35ad"},{"problem":39,"code":"(fn [seq-one seq-two]\n\n(loop [seq-one-r seq-one seq-two-r seq-two output []]\n  (println seq-one-r seq-two-r output)\n  (if (or (empty? seq-one-r) (empty? seq-two-r))\n    output\n    (recur (rest seq-one-r) (rest seq-two-r) (conj output (first seq-one-r) (first seq-two-r)))))\n\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"#(flatten(into[](map vector %1 %2)))","problem":39,"user":"506717e2e4b03d366d7cb2ba"},{"code":"#(apply mapcat list %&)","problem":39,"user":"4e6a48d5535d8ccf87e9febd"},{"code":"(fn f [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (conj (conj (f (rest l1) (rest l2)) (first l2)) (first l1))))","problem":39,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn [x y]\n  (flatten (map #(vec %&) x y)))","problem":39,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn [[& seq1] [& seq2]]\n  (loop [seqN seq1 seqM seq2 acc []]\n    (if (and (seq seqN) (seq seqM))\n      (recur (rest seqN)\n             (rest seqM)\n             (conj acc (first seqN) (first seqM)))\n      acc)))","problem":39,"user":"50097962e4b03d00572d2d6c"},{"code":"(fn [coll1 coll2]\n  (loop [r1 coll1 r2 coll2 acc []]\n    (if (or (empty? r1) (empty? r2))\n      acc\n      (recur (rest r1) (rest r2) (conj acc (first r1) (first r2))))))","problem":39,"user":"50e3cf55e4b01912b3285c45"},{"problem":39,"code":"mapcat list\n\n;; #(flatten (map list %1 %2))","user":"5f816cc6e4b0c071e6c840f1"},{"code":"(fn inter [s r]\n  (if (or (nil? (first s)) (nil? (first r))) '()\n  (cons (first s) (cons (first r) (inter (rest s) (rest r))))))","problem":39,"user":"4fb2101ce4b081705acca284"},{"code":"(fn leave [seq-1 seq-2 & [ret]]\n  (if (or (empty? seq-1) (empty? seq-2))\n    ret\n    (leave (rest seq-1) (rest seq-2) (conj (or ret []) (first seq-1) (first seq-2)))))","problem":39,"user":"4fca4c37e4b0ee37620e184f"},{"problem":39,"code":"(fn foobar [a b]\n   (let [a (seq a)\n         b (seq b)]\n     (when (and a b)\n       (cons (first a) (cons (first b) (foobar (rest a) (rest b)))))\n     )\n   )","user":"4f2a7174e4b0d6649770a03e"},{"problem":39,"code":"(fn [x y]\n  (loop [col1 x\n         col2 y\n         result []]\n    (if (or (empty? col1) (empty? col2))\n      result\n      (recur (rest col1) (rest col2) (conj result (first col1) (first col2))))))","user":"5146fd44e4b0d12420447958"},{"problem":39,"code":"#_(fn my-interleave [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    []\n    (concat [(first coll1) (first coll2)] (my-interleave (drop 1 coll1) (drop 1 coll2)))))\n\n(fn my-interleave [coll1 coll2]\n  (flatten (map list coll1 coll2)))","user":"5d6f063de4b04d129b00f2d1"},{"code":"(fn [x y] \n  (flatten (map #(list %1 %2) x y)))","problem":39,"user":"53791ab7e4b06839e8705e4d"},{"problem":39,"code":"(fn f [l r]\n  (if (or (empty? l) (empty? r))\n    []\n    (concat [(first l) (first r)] (f (rest l) (rest r)))))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn inter [f s]\n  (if (or (empty? f) (empty? s))\n    nil\n    (concat [(first f) (first s)] (inter (rest f) (rest s)))))","problem":39,"user":"52f07ccee4b05e3f0be25edf"},{"problem":39,"code":"(fn intl [a b]\n  (loop [res []\n         rem-a a\n         rem-b b]\n    (let [first-a (first rem-a) first-b (first rem-b)]\n      (if (or (= nil first-a) (= nil first-b))\n        res\n        (recur (conj res first-a first-b) (rest rem-a) (rest rem-b))))\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [l m]\n  (loop [r [] l l m m]\n    (if (some nil? [(seq l) (seq m)])\n      r\n      (recur (conj r (first l) (first m)) (rest l) (rest m)))))","problem":39,"user":"529b5301e4b02ebb4ef7509f"},{"problem":39,"code":"(fn il [c1 c2]\n  (mapcat\n   #(list %1 %2)\n   c1 c2)\n  )","user":"60436423e4b02d28681c77a3"},{"problem":39,"code":"(fn inter [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n    [x y]\n    (concat [x y] (inter xs ys))))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":39,"code":"(fn f  [a b] #_(better is (partial mapcat vector))\n    (if  (and a b)\n      (let  [[x & xs] a  \n             [y & ys] b]\n        (into  (empty a)  (cons x  (cons y  (into '() (f xs ys))))))\n      (empty a)))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [as bs]\n  (loop [[a & as] as\n         [b & bs] bs\n         res []]\n    (let [res (conj res a b)]\n      (if (or (empty? as)\n              (empty? bs))\n        res\n        (recur as bs res)))))","problem":39,"user":"4fc3a72ae4b081705acca342"},{"problem":39,"code":"(fn [a b]\n  (loop [acc [] left a right b]\n    (if (or (empty? left) (empty? right))\n      acc\n      (recur (conj (conj acc (first left)) (first right)) (rest left) (rest right)))\n    )\n  )","user":"52a803cee4b0c58976d9ac26"},{"code":"(fn [l1 l2] (loop [rst nil, fst l1, sec l2]\r\n               (if (or (empty? fst) (empty? sec))\r\n                    rst\r\n                    (recur (concat rst (list (first fst) (first sec)))\r\n                           (rest fst) (rest sec)))))","problem":39,"user":"4fd0cb0ee4b04c3a95aa0407"},{"problem":39,"code":"(fn [xs ys] (apply concat (map vector xs ys)))","user":"54d03026e4b018d918be98de"},{"code":"#(mapcat identity (reverse (zipmap %1 %2)))","problem":39,"user":"4fa13cd1e4b0dcca54ed6d59"},{"code":"(fn inter [l1 l2]\n  (if (or (= 0 (count l1)) (= 0 (count l2)))\n    '()\n    (concat (take 1 l1) (take 1 l2) (inter (rest l1) (rest l2)))\n  )\n)","problem":39,"user":"53a36fd7e4b0f1fc74538834"},{"problem":39,"code":"#(apply concat (apply map vector [%1 %2] ))","user":"549375e4e4b0b312c081ff4e"},{"problem":39,"code":"(fn inter [l1 l2]\n  (loop [res (list) l11 l1 l22 l2]\n    (if (or (empty? l11) (empty? l22)) res\n                                     (recur (concat res (list (first l11) (first l22)))\n                                            (drop 1 l11)\n                                            (drop 1 l22))\n                                     )))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":39,"code":"(fn r [s1 s2] (cond (or (empty? s1) (empty? s2)) nil :else (cons (first s1) (cons (first s2) (r (rest s1) (rest s2))))))","user":"556766c1e4b0c656e3ff1840"},{"code":"(fn [x y]\n  ((fn intl [acc x y]\n     (if (and (seq x) (seq y))\n       (intl (conj (conj acc (first x)) (first y)) (rest x) (rest y))\n       acc\n     )\n  ) [] x y)\n)","problem":39,"user":"5303a027e4b0d8b024fd3745"},{"code":"#(flatten (map (fn[x y] [x y]) %1 %2))","problem":39,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":39,"code":"(fn intleave [a b]\n  (if (or (empty? a)(empty? b)) ()\n    (conj (conj (intleave (rest a) (rest b)) (first b)) (first a))\n    )\n  )","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":39,"code":"(fn[xs ys] (loop [idx 0 end (min (count xs) (count ys)) accum []]\n   (if(< idx end)(recur (inc idx) end (conj (conj accum (get xs idx)) (get ys idx))) accum)\n   ))","user":"57e3d30be4b0bfb2137f5aab"},{"code":"(fn [a b]\n           (letfn [(f [[a & as :as aa] [b & bs :as bb]]\n                     (if (and (seq aa) (seq bb))\n                       (conj (f as bs) b a)\n                       '()))]\n             (f a b)))","problem":39,"user":"4e6f4cbc535d5021c1a8961a"},{"problem":39,"code":"(fn [coll1 coll2] (mapcat vector coll1 coll2))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":39,"code":"(fn customInterleave\n  [& sequences]\n  (println sequences)\n  (let [cap (apply min (map count sequences))]\n    (loop [x 0 res []]\n      (if (< x cap)\n        (recur (inc x) (into res (map #(nth % x) sequences)) )\n        res\n        )\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":39,"code":"(comp (partial apply concat)\n      (partial map (fn [x y] [x y])))","user":"5a95c639e4b0d174b936c75e"},{"problem":39,"code":"#(apply concat (apply map vector [%1 %2]))","user":"53ed03f0e4b0d648e757f4bb"},{"code":"(fn [x y]\n  (loop [for (min (count x) (count y))\n         ans []\n         rx x\n         ry y]\n    (if (> for 0)\n      (let [a (first rx)\n            b (first ry)]\n        (recur\n          (dec for)\n          (conj (conj ans a) b)\n          (next rx)\n          (next ry)))\n      ans)))","problem":39,"user":"4fab2859e4b081705acca213"},{"code":"(fn [a b]\n  (loop [a a b b r []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (conj r (first a) (first b)))\n      r)))","problem":39,"user":"4dbdc9da535d020aff1edf4c"},{"problem":39,"code":"#(loop [x %1 y %2 result []]\n   (if (or (empty? x) (empty? y))\n     result\n     (recur \n      (rest x)\n      (rest y)\n      (conj result (first x) (first y))\n     )\n   \n   ))","user":"5c4c74efe4b0f9f7a8770e76"},{"problem":39,"code":"#(flatten (map vector %1 %2)) \n;; wouldn't work if there were child sequences","user":"6004c750e4b074f607df6645"},{"code":"(fn intrlv [xs ys]\n  (when (not-any? empty? [xs ys])\n    (cons (first xs)\n          (cons (first ys)\n                (intrlv (rest xs) (rest ys))))))","problem":39,"user":"52c804dee4b0c2d177d6212b"},{"problem":39,"code":"(fn [a b]\n\t(loop [x [] i 0]\n\t\t(if (= i (min (count a) (count b)))\n\t\t\tx\n\t\t\t(recur (conj x (get a i) (get b i)) (inc i)))))","user":"5eea5ce7e4b029a2061bbec0"},{"problem":39,"code":"#(->>\n  (map list %1 %2)\n  (apply concat))","user":"5c219c0fe4b07e362c230581"},{"problem":39,"code":"(fn my-interleave [[x & xs] [y & ys]]\n  (if (and x y)\n    (concat [x y] (my-interleave xs ys))\n    []))","user":"55d5e80ee4b0e31453f64a91"},{"problem":39,"code":"(fn zip [cs ds]\n  (if (or (nil? cs) (nil? ds))\n    nil\n    (let [c (first cs)\n          d (first ds)]\n      (into [c d] (zip (next cs) (next ds))))))","user":"56557d2de4b0f9d632dd8498"},{"problem":39,"code":"( fn [a b] (flatten (map list a b)) )","user":"577aad81e4b0d3393e5deb04"},{"problem":39,"code":"(fn [x y]\n  (letfn [(iter [x y]\n            (let [[f1 & r1] x\n                  [f2 & r2] y]\n              (cons f1 (cons f2 (lazy-seq (iter r1 r2))))))]\n    \t\t\t\t(take (* 2 (min (count x) (count y))) (iter x y))))","user":"607f3336e4b05857a65e7747"},{"code":"(fn m [a b]\n  (if (= [] a)\n      []\n      (if (= [] b)\n          []\n          (cons (first a) \n                (cons (first b) \n                      (m (rest a) (rest b)))))))","problem":39,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":39,"code":"(fn [a x y] (if (or (= (count x) 0) (= (count y) 0)) a (recur (conj (conj a (first x)) (first y)) (rest x) (rest y)))) []","user":"555b5ae4e4b0deb715856e4f"},{"code":"(fn thisfunc [a b]\n  (if (or (empty? a) (empty? b))\n    ()\n    (conj (thisfunc (rest a) (rest b)) (first b) (first a))))","problem":39,"user":"4dd9d299535d2dad7130b5dd"},{"code":"mapcat (fn [& x] x)","problem":39,"user":"4f0664bd535dcb61093f6c0f"},{"problem":39,"code":"(fn itrlv [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    ()\n    (conj (itrlv (rest l1) (rest l2)) (first l2) (first l1))))","user":"588e8133e4b00487982d5191"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [r1 s1\n        r2  s2\n        ret []]\n    (if (or (empty? r1) (empty? r2))\n      (apply list ret)\n      (recur \n        (rest r1) \n        (rest r2)\n        (conj ret (first r1) (first r2))\n      )\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn my-interleave [a-seq b-seq]\n  (loop [result []\n         a-rem a-seq\n         b-rem b-seq]\n    (cond \n      (empty? a-rem) result\n      (empty? b-rem) result\n      :else (recur \n              (conj result (first a-rem) (first b-rem))\n              (rest a-rem)\n              (rest b-rem)))))","problem":39,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":39,"code":"(fn [c1 c2]\n    (apply concat\n           (map vector\n                c1\n                c2)))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [ret c d]\n  (if (or (= '() c) (= '() d))\nret\n(recur (conj ret (first c) (first d))\n(rest c) (rest d)))) []","problem":39,"user":"50bfe725e4b080409b860f26"},{"code":"(fn [xs ys]\n  (flatten\n    (map #(vector %1 %2) xs ys)))","problem":39,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [x y]\n   (loop [a x, b y, r []]\n     (if (and a b)\n       (recur (next a) (next b) (conj (conj r (first a)) (first b)))\n       r)))","problem":39,"user":"4e7dcdb5535db169f9c796e9"},{"code":"(fn [sa sb] (reduce concat (list) (map (fn [a b] (list a b)) sa sb)))","problem":39,"user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":39,"code":"#(reverse(apply concat (zipmap %2 %)))","user":"553093bee4b076ab5578f817"},{"code":"(fn [x y]\n  (loop [l1 x l2 y r '()]\n    (if (or (empty? l1) (empty? l2))\n      r\n      (recur (rest l1) (rest l2)\n             (concat r (list (first l1)) (list (first l2)))))))","problem":39,"user":"4e6cf61a535de274dd8d818c"},{"code":"(fn [x y]\n  (mapcat #(vector %1 %2) x y))","problem":39,"user":"4f1abbfb535d64f60314646e"},{"problem":39,"code":"(fn f\n  [x y]\n  (let [[e1 & r1] x [e2 & r2] y]\n    (if-not (or (nil? e1) (nil? e2))\n      (cons e1 (cons e2 (f r1 r2))))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [xs ys]\n  (loop [[x' & xs'] xs\n         [y' & ys'] ys\n         result []]\n    (if (or (nil? x') (nil? y'))\n      result\n      (recur xs' ys' (conj result x' y')))))","problem":39,"user":"5177f89ae4b0f89a8f53839a"},{"problem":39,"code":"(fn interleave-two-seqs [col1 col2]\n  (if (or (empty? col1) (empty? col2))\n    []\n    (concat [(first col1) (first col2)] (interleave-two-seqs (rest col1) (rest col2)) )))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn ileave [i j]\n  (if (or (empty? i) (empty? j))\n    (list)\n  (concat (list (first i) (first j)) (ileave (rest i) (rest j)))))","problem":39,"user":"5364697ce4b0243289761e62"},{"code":"(fn [x y]\n (loop [a x b y c '()]\n  (if (or (empty? a) (empty? b))\n   (reverse c)\n  (recur (next a)(next b)(conj c (first a) (first b))))))","problem":39,"user":"507e5cf8e4b085af06e3afd1"},{"problem":39,"code":"(fn [& seqs]\n  (let [len (count (first (sort-by count seqs)))]\n    (loop [acc []\n           i len]\n      (if (= i 0)\n        (flatten acc)\n        (recur (conj acc (map (fn [s] (nth s (- len i))) seqs)) (dec i))))))","user":"5498e155e4b0b312c081ff86"},{"code":"(fn inter[lista listb]\n   (if (or (empty? lista) (empty? listb))\n    '()\n    (cons\n      (first lista)\n          (cons (first listb) \n                (inter (rest lista) (rest listb))))))","problem":39,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn [c1 c2] (mapcat (fn [a b] [a b]) c1 c2))","problem":39,"user":"4db86aee535d1e037afb2193"},{"code":"(fn [coll1 coll2] (loop [final []\n                         i 0]\n                    (if (or (= i (count coll1)) (= i (count coll2)))\n                      (seq final)\n                      (recur (conj (conj final (nth coll1 i)) (nth coll2 i)) (inc i)))))","problem":39,"user":"507a33dee4b08327cd804a68"},{"problem":39,"code":"(fn [xs ys]\n        (loop [[hx & tx :as xs] xs\n               [hy & ty :as ys] ys\n               acc '()]\n          (if (and xs ys)\n            (recur tx ty (conj acc hx hy))\n            (reverse acc))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":39,"code":"(fn foo [c1 c2] (let [a (seq c1) b (seq c2)] (when (and a b) (cons (first a) (cons (first b) (foo (rest a) (rest b)) )) )))","user":"551535cee4b055c2f668d4df"},{"code":"(fn [lst1 lst2] (flatten (map #(cons % (list %2)) lst1 lst2)))","problem":39,"user":"516dc88ae4b046df6fbb76a1"},{"problem":39,"code":"(fn [seq1 seq2] (reduce (fn [acc e] (into acc e)) []  (map (fn [x y] [x y]) seq1 seq2)))","user":"5b445421e4b02d533a91bc40"},{"problem":39,"code":"(fn itv [ret [a & b] [c & d]]\n  (if-not (and a c)\n    ret\n    (recur (concat ret [a c]) b d)))\n[]","user":"539c88e1e4b0b51d73faaf2c"},{"code":"(fn interl [s1 s2]\n  (let [sq1 (seq s1) sq2 (seq s2)]\n    (when (and sq1 sq2)\n      (cons \n        (first sq1) \n        (cons (first sq2) (interl (rest sq1) (rest sq2)))))))","problem":39,"user":"50a9504de4b07e35d68b27ae"},{"problem":39,"code":"(fn [coll1 coll2] (reduce concat (map vector coll1 coll2)))","user":"5f21d172e4b0f565ad998286"},{"code":"(fn [s1 s2]\n  (mapcat #(list %1 %2) s1 s2))","problem":39,"user":"4f4e978ae4b03ad3f0c10ccb"},{"problem":39,"code":"(fn my-interleave\n  [c1 c2]\n  (lazy-seq\n   (if (and (seq c1) (seq c2))\n     (cons (first c1)\n           (cons (first c2)\n                 (my-interleave (next c1) (next c2)))))))","user":"56180d83e4b06b1bb2182a18"},{"problem":39,"code":"(fn[& seqs]\n  (loop [seqs seqs out []]\n    (cond (some empty? seqs) out\n          :else (recur (map rest seqs) (concat out (map first seqs))))))","user":"5472cba1e4b094393f72dd7a"},{"problem":39,"code":"(fn myinter\n  [l1 l2]\n  (mapcat #(concat (list %1) (list %2)) l1 l2))","user":"57fc34f0e4b0d3187e90098e"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [[a & rest1] coll1\n         [b & rest2] coll2\n         res '()]\n    (if (and a b)\n      (recur rest1 rest2 (concat res (list a b)))\n      res)))","user":"5675cdf1e4b05957ce8c614d"},{"code":"mapcat #(-> [%1 %2])","problem":39,"user":"511688d5e4b0b3e208dba05a"},{"problem":39,"code":"(fn inter\n  ([x y] (inter x y true))\n  ([x y b] (if (or (and b (empty? x)) (and b (empty? y))) nil (if b (cons (first x) (inter (rest x) y false)) (cons (first y) (inter x (rest y) true)))\n             ))\n  )","user":"55fdf902e4b00f4cabc5764e"},{"problem":39,"code":"(fn [s t]\n  (loop [i 0, [sh & st] s, [th & tt] t, result (empty s)]\n    (cond\n      (or (nil? sh)(nil? th))\n        result\n        :else (recur (inc i), st, tt, (conj result sh th))\n      )\n    )\n  )","user":"558ee1c9e4b0277789237659"},{"code":"(fn f [a b]\n          (if (or (empty? a) (empty? b))\n            '()\n            (concat (list (first a) (first b)) (f (next a) (next b)))))","problem":39,"user":"52c7f036e4b0c2d177d62126"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2))\n    nil\n    (cons (first seq1) (cons (first seq2) (my-interleave (rest seq1) (rest seq2))))))","user":"54125eeee4b01498b1a719d3"},{"problem":39,"code":"(fn intl \n  ([sq1 sq2]\n   (intl sq1 sq2 '()))\n  ([sq1 sq2 acc]\n     (if (or (empty? sq1) (empty? sq2))\n       acc\n       (intl (rest sq1) (rest sq2) (concat acc (list (first sq1) (first sq2)))))))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":39,"code":"(fn f1 [[ax & axs] [bx & bxs]] (cond\n                          (not ax) ()\n                          (not bx) ()\n                          :else (conj (f1 axs bxs) bx ax)\n                          )\n            )","user":"55f5625de4b06e875b46ce86"},{"problem":39,"code":"(fn [a b]\n  (loop [xs (seq a)\n         ys (seq b)\n         result []]\n    (if (or (not xs) (not ys))\n      result\n      (recur \n       (seq (rest xs))\n       (seq (rest ys)) \n       (conj result (first xs) (first ys))))))","user":"4e6ffaa3535d5021c1a8962e"},{"code":"(fn [xs ys] (flatten (map vector xs ys)))","problem":39,"user":"4f03641a535dcb61093f6a9b"},{"problem":39,"code":"(fn [a b] (loop [a a b b r '()] \n             (if (or (empty? a) (empty? b)) \n               r\n               (recur (rest a) (rest b) (concat r (vector (first a) (first b))\n             ))\n            )))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"mapcat  #(identity [% %2])","problem":39,"user":"50bf74c7e4b0ffd967a66cc0"},{"code":"(fn [x y]\n\t(flatten (map vector x y))\n)","problem":39,"user":"5151aa14e4b03e678e393ad4"},{"code":"(fn [a b]\r\n  (flatten\r\n   (map #(list % %2) a b)))","problem":39,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [a b]\n  (reduce concat (map list a b)))","problem":39,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":39,"code":"(fn answer [list1 list2]\n  (mapcat list list1 list2)\n  )","user":"5e491182e4b043cd24807a46"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         r []]\n    (if (or (empty? b) (empty? a))\n      r\n\t  (recur (rest a) (rest b) (conj r (first a) (first b))))))","user":"5448616be4b032a45b8693c9"},{"code":"(fn my-interleave [f-seq s-seq]\n    (mapcat #(list %1 %2) f-seq s-seq) \n )","problem":39,"user":"52763696e4b03e8d9a4a74d7"},{"problem":39,"code":"(fn inter [lst one two]\n  (if (or (empty? one ) (empty? two))\n    lst\n    (recur (conj lst (first one) (first two)) (rest one) (rest two)))) []","user":"5d323149e4b01671435dbce9"},{"code":"(fn [a b] (flatten (map (fn [x y] [x y]) a b)))","problem":39,"user":"4f2acb29e4b0d6649770a040"},{"problem":39,"code":"(fn [& cols] (apply mapcat #(list %1 %2) cols))","user":"53a83c74e4b047364c044426"},{"code":"(fn [a b]\n  (mapcat vector a b))","problem":39,"user":"4e68c434535d8ccf87e9fe89"},{"problem":39,"code":"(fn [seqA seqB]\n\t(loop [a seqA b seqB res []]\n\t\t(if (= 0 (count a))\n\t\t\tres\n\t\t\t(if (= 0 (count b))\n\t\t\t\tres\n\t\t\t\t(recur (rest a) (rest b) (concat res [(first a)] [(first b)]))\n\t\t\t))))","user":"58b985e0e4b0888cdc949ccc"},{"code":"(fn foo [[f & r] [h & t]]\n  (if (and f h)\n  (cons f (cons h (foo r t)))))","problem":39,"user":"4fa9da14e4b081705acca1e7"},{"code":"(fn [x y] \n  (apply concat (for [n (range 0 (min (count x) (count y)))] \n    [(nth x n) (nth y n)])))","problem":39,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":39,"code":"(fn inter [coll1 coll2]\n    (if \n      (and \n       (not (empty? coll2)) \n       (not (empty? coll1)))\n      (concat [(first coll1) (first coll2)] (inter (rest coll1) (rest coll2)))\n      []\n      )\n    )","user":"54cb3497e4b057c6fda3a272"},{"code":"(fn [s1 s2 & o] (if (or (empty? s2) (empty? s1)) o (recur (rest s1) (rest s2) (concat o (list (first s1) (first s2))))) )","problem":39,"user":"51cf126ae4b0e42293a2256b"},{"code":"(fn interl [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a)(cons (first b) (interl (rest a) (rest b))))))","problem":39,"user":"4eac5bc1535d7eef3080731b"},{"problem":39,"code":"(fn [A B] (apply concat (map list A B)))","user":"549188f6e4b0b312c081ff3a"},{"code":"(fn [x y] (flatten (map vector x y)))","problem":39,"user":"510c123be4b078ea7192110e"},{"problem":39,"code":"(fn\n         [l1 l2]\n         (loop\n           [[f1 & r1] l1 [f2 & r2] l2 ret []]\n           (if\n             (or (nil? f1) (nil? f2))\n             ret\n             (recur r1 r2 (conj ret f1 f2)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":39,"code":"(fn [& seqs-in] \n   (apply concat \n          (map \n           (fn get [r] (map #(nth % r) seqs-in)) \n           (range (reduce min (map count seqs-in))))))","user":"5310e968e4b08068f379ecdd"},{"problem":39,"code":"#(mapcat (fn [c1 c2] (conj nil c2 c1)) %1 %2)","user":"532ae82be4b09d4e7a9b552b"},{"problem":39,"code":"(fn [& colls]\n  (let [len (apply min (map count colls))]\n    (mapcat\n      (fn [i] (map #(nth % i) colls))\n      (range len))))","user":"557a1e18e4b05c286339e09e"},{"problem":39,"code":"(fn [kliste vliste] \n   (loop [kliste kliste vliste vliste result ()]\n     (if (or (empty? vliste) (empty? kliste))\n        (reverse result)\n        (recur (rest kliste) (rest vliste) (conj (conj result (first kliste)) (first vliste)))\n     )\n    )\n)","user":"556f2009e4b09a3098a52519"},{"problem":39,"code":"(fn [& xss]\n  (apply (partial mapcat vector) xss))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn [col1 col2] (flatten (map (fn [c1 c2] (list c1 c2)) col1 col2)))","problem":39,"user":"501dfd54e4b051153f3b5b80"},{"problem":39,"code":";(fn [x y] (reverse (reduce #(into %1 %2) '() (map #(vector %1 %2) x y))))\n#(flatten (map vector %1 %2))","user":"5835bc73e4b089d5ab817ce9"},{"problem":39,"code":"(fn i [xs ys]\n  (if (and (seq xs) (seq ys))\n    (cons (first xs)\n          (cons (first ys)\n                (i (rest xs) (rest ys))))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":39,"code":"#(reduce concat (map (fn [l1 l2]\n       [l1 l2])\n      %1 %2))","user":"56e4a6c1e4b03a7c14b85a51"},{"code":"(fn [s1 s2]\n  (loop [ss1 s1, ss2 s2, accum []]\n    (if (or (empty? ss1) (empty? ss2)) accum\n      (recur (rest ss1) (rest ss2) (conj accum (first ss1) (first ss2))))))","problem":39,"user":"502ac96de4b0614b5299611b"},{"code":"(fn mine [xs ys]\n  (cond (or (= xs [])\n            (= ys [])) []\n        :else (cons (first xs) \n                    (cons (first ys)\n                          (mine (rest xs)\n                                (rest ys))))))","problem":39,"user":"4dad8d4bc9a9d6ed1799dc57"},{"code":"#(reverse(mapcat identity (zipmap %2 %1)))","problem":39,"user":"535788ece4b04ce2eb3ed281"},{"problem":39,"code":"(fn my-fun [seq-1 seq-2] (loop [[val-1 & rest-1] seq-1 [val-2 & rest-2] seq-2  working '()] (if (and val-1 val-2) (recur rest-1 rest-2 (conj working val-1 val-2)) (reverse working))))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [list1 list2]\n  (flatten (map #(list %1 %2) list1 list2)))","problem":39,"user":"5282c03be4b0757a1b171461"},{"code":"(fn [s1 s2]\n  (loop [[x & xs] s1\n         [y & ys] s2\n         r []]\n    (if (and x y)\n      (recur xs ys (conj r x y))\n      r)))","problem":39,"user":"50b67515e4b08fb537db98f3"},{"problem":39,"code":"(fn [a b]\n   (loop [c []\n          a a\n          b b]\n     (if (or (empty? a) (empty? b))\n       c\n       (recur (conj c (first a) (first b)) (rest a) (rest b)))))","user":"58455b05e4b089d5ab817e65"},{"problem":39,"code":"(fn [acc f s]\n  (if (or (empty? f) (empty? s))\n    acc\n    (recur (conj acc (first f) (first s)) (rest f) (rest s)))) []","user":"59a72effe4b066c664927d94"},{"code":"#(loop [f %1 s %2 a []] \n  (if (or (empty? f) (empty? s)) \n    (reverse a)\n    (recur (rest f) (rest s) (cons (first s) (cons (first f) a)))))","problem":39,"user":"4f713878e4b07046d9f4f00a"},{"problem":39,"code":"(fn x [& seqs] (apply concat (apply map vector seqs)))","user":"544a049de4b0e39780006953"},{"code":"(fn [x y]\n  (loop\n    [a x\n      b y\n      c '()]\n      (if (or (= (count a) 0) (= (count b) 0))\n        (reverse c)\n        (recur (rest a) (rest b) (-> c (conj (first a)) (conj (first b)))))))","problem":39,"user":"50989786e4b04e098a4c7274"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         result '()]\n    (if (or (empty? xs) (empty? ys))\n      (reverse result)\n      (recur (rest xs) (rest ys) (conj result (first xs) (first ys))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":39,"code":"#(loop [f %1 s %2 n ()]\n   (if (or (empty? f) (empty? s))\n     n\n     (recur (rest f) (rest s) (concat n (cons (first f) (list (first s)))))))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn interlv [c1 c2] (let [s1 (seq c1) s2 (seq c2)]\n  (when (and s1 s2) (cons (first s1) (cons (first s2) (interlv (rest s1) (rest s2)))))))","problem":39,"user":"50b81a93e4b0cba0e598b64b"},{"code":"(fn [coll coll-sec]\n    (apply concat\n           (map vector coll coll-sec)))","problem":39,"user":"4e7e8684535db169f9c79717"},{"code":"(fn [a b] (loop [c1 a c2 b r []] (if (or (empty? c1) (empty? c2)) r (recur (rest c1) (rest c2) (conj r (first c1) (first c2))))))","problem":39,"user":"4f0e4ebd535d0136e6c22322"},{"problem":39,"code":"#(flatten (map (fn [& colls] conj [] colls) %1 %2))","user":"54764cf1e4b0c51c1f4d72a4"},{"problem":39,"code":"#(vec (flatten (map vector %1 %2)))","user":"552712e7e4b0ffed3738f92a"},{"code":"(fn f [nl al bl]\r\n  (if (or (empty? al) (empty? bl))\r\n    nl\r\n    (let [a (first al) b (first bl)]\r\n      (recur (conj nl a b) (rest al) (rest bl))))) []","problem":39,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":39,"code":"(fn [coll coll2]\n  (mapcat vector coll coll2))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [s1 s2]\r\n  (loop [s1 s1 s2 s2 acc []]\r\n    (if (and (seq s1)\r\n             (seq s2))\r\n      (recur (rest s1)\r\n             (rest s2)\r\n             (conj acc (first s1) (first s2)))\r\n      acc)))","problem":39,"user":"4dbb1126535d1e037afb21b3"},{"problem":39,"code":"(fn [c1 c2] (flatten (for [i (range (min (count c1) (count c2)))] [(nth c1 i) (nth c2 i)])))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn foo [a b]                                                           \n            (loop [lst '()                                                      \n                   l a                                                          \n                   r b]                                                         \n               (cond                                                            \n                 (or (empty? l) (empty? r)) lst                                 \n                 :else (recur (concat lst (take 1 l) (take 1 r))                \n                              (rest l)                                          \n                              (rest r)))))","problem":39,"user":"4eed6b32535d93acb0a668bc"},{"problem":39,"code":"(fn my-itrl\n  [s1 s2]\n  (mapcat (fn [& xs] (vec xs)) s1 s2))","user":"55ad2d97e4b03311e7b732a2"},{"code":"(fn [xs ys] (flatten (map #(list %1 %2) xs ys)))","problem":39,"user":"4f528f70e4b03ad3f0c10d3f"},{"problem":39,"code":"(fn [se1 se2]\n  (loop [result '() se1 se1 se2 se2]\n    (if (and (not (empty? se1)) (not (empty? se2)))\n      (recur (concat result (list (first se1) (first se2))) (rest se1) (rest se2))\n      result\n      )\n    \n    )\n)","user":"56c7d8dee4b0ed865f9758c9"},{"problem":39,"code":"(fn [coll1 coll2]\r\n    (let [accum []]\r\n      (mapcat #(conj accum %1 %2) coll1 coll2)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":39,"code":"#( loop [acc []\n         i 0 \n         c (min (count %1) (count %2))] \n   (if (>= i c) \n     acc\n     (recur (conj acc (nth %1 i) (nth %2 i)) (inc i) c) );if\n   )","user":"57ec8d1de4b0bfb2137f5b7f"},{"problem":39,"code":"(fn [a b]\n  (let [n (min (count a) (count b))]\n    (apply concat\n           (map (fn [i][(nth a i) (nth b i)])\n                (range n)))))","user":"5a6b2995e4b0512ff01cda37"},{"problem":39,"code":"(fn [a b] (flatten (map (fn [a b] [a b]) a b)))","user":"51771cb1e4b085adf681d895"},{"code":"#(filter identity (flatten (map-indexed (fn [i v] (when-let [x (get %2 i)] (list v x))) %)))","problem":39,"user":"51ca7906e4b08b1cbd0d9487"},{"problem":39,"code":"(fn crosser [x y]\n  (let \n    [upper (min (count x) (count y))]\n    (loop [i 0 final '()]\n      (if (= i upper) \n        final \n        (recur (inc i) (concat final ((fn getpair [x y n] (list (nth x n) (nth y n))) x y i)))))))","user":"57b167afe4b0fbc9809a2752"},{"code":"(fn combine [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2))\n    ()\n    (cons (first seq1) \n          (cons (first seq2) \n                (combine (rest seq1) (rest seq2))))))","problem":39,"user":"51f04e89e4b0274c496158cd"},{"problem":39,"code":"(fn my-zip\n  ([x y] (my-zip x y []))\n  ([[x & x-rest] [y & y-rest] acc]\n   (if (and x y)\n     (recur x-rest y-rest (conj acc x y))\n     acc)))","user":"593c9583e4b069cdc2982b94"},{"code":"(fn [& cols] (apply concat\n                    (apply (partial map list) cols)))","problem":39,"user":"50c7431ae4b00bb60fe0c531"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x s1 y s2 result []]\n    (if (and (seq x) (seq y))\n      (do \n        (recur \n          (rest x) \n          (rest y)\n          (conj (conj result (first x)) (first y))))\n        result)))","user":"5d40442ee4b05dd059a54362"},{"code":"(fn inter [c-1 c-2]  \n    (if (some empty? [c-1 c-2])\n        [] \n        (concat [(first c-1) (first c-2)] (inter (rest c-1) (rest c-2)))))","problem":39,"user":"513a2f23e4b067e25a345ec6"},{"problem":39,"code":"(fn interleav\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interleav (rest s1) (rest s2))))))))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":39,"code":"#( flatten (map (fn [f s] (conj '() s f )) %1 %2) )","user":"58c93089e4b021aa9917ed9b"},{"problem":39,"code":"(fn [x y & a]\n  (if (or (empty? x) (empty? y))\n    a\n    (recur (rest x) (rest y) (concat a [(first x) (first y)]))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"#(mapcat (fn [a b] [a b]) % %2)","problem":39,"user":"512700c4e4b083bb8f88cf14"},{"problem":39,"code":"(fn [col1 col2] (mapcat #(list %1 %2) col1 col2))","user":"57c6bca1e4b05aa3c4741cf8"},{"code":"(fn [xs1 xs2] ((fn my-fn [seq1 seq2 intseq]\n     (if (or (empty? seq1) (empty? seq2)) intseq\n       (cons (first seq1) (cons (first seq2) (my-fn (rest seq1) (rest seq2) intseq)))\n       )) xs1 xs2 '()))","problem":39,"user":"51251e1fe4b08c6d99a12b87"},{"problem":39,"code":"(fn [& ls]\n  (apply mapcat list ls))","user":"60460824e4b02d28681c77bc"},{"problem":39,"code":"(fn [s1 s2]\n  (reduce into [] (map #(list %1 %2) s1 s2)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":39,"code":"(fn [a b]\n  (loop [result '()\n         a a\n         b b]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur\n       (concat result (list (first a)) (list (first b)))\n       (rest a)\n       (rest b)))))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn [s1 s2] (flatten (map list s1 s2)))","problem":39,"user":"4f24957ae4b0d66497709fed"},{"code":"(fn il [a b] (concat [(first a) (first b)] (if (and (>= (count a) 2) (>= (count b) 2)) (il (rest a) (rest b)) [])))","problem":39,"user":"525fea5ae4b03e8d9a4a7026"},{"problem":39,"code":"(fn ddd[a b]\n(let [minsz (min (count a) (count b))] \n  (reduce (fn [c d] (concat c [(get a d) (get b d)])) [] (range minsz))))","user":"55f01316e4b06e875b46ce1a"},{"problem":39,"code":"#(loop [x1 %1 x2 %2 result []]\n   (if (and (first x1) (first x2))\n     (recur (rest x1) (rest x2) (->> (first x2) (conj (->> (first x1) (conj result)))))\n     result\n     ))","user":"5db68091e4b010eb3c36cd3a"},{"code":"(fn il [[x & xs] [z & zs]]\n  (if (or (nil? x) (nil? z))\n    '()\n    (concat (list x z) (il xs zs))))","problem":39,"user":"4f7f0827e4b06e829148e1d5"},{"problem":39,"code":"(fn [a b] (loop [a-f (first a) a-n (next a) b-f (first b) b-n (next b) a-b []] (if (some nil? [a-f b-f]) a-b (recur (first a-n) (next a-n) (first b-n) (next b-n) (conj a-b a-f b-f)))))","user":"564c8e99e4b0284900eef674"},{"problem":39,"code":"(fn [sq1 sq2]\n  (loop [s1 sq1 s2 sq2 res '()]\n    (if (or (empty? s1) (empty? s2))\n      (reverse res)\n      (recur \n       (rest s1) \n       (rest s2) \n       (conj res (first s1) (first s2))))))","user":"5600591de4b04bb52996e166"},{"problem":39,"code":"#(mapcat identity (map (fn [a b] [a b]) %1 %2))","user":"5649b1b0e4b0284900eef646"},{"code":"(fn intrlv\n[l1 l2]\n(cond \n      (empty? l1) '()\n      (empty? l2) '()\n      :else (concat (list (first l1) (first l2)) (intrlv (rest l1) (rest l2)))\n)\n\n)","problem":39,"user":"4f0df199535d0136e6c2231e"},{"problem":39,"code":"; stolen solution mapcat vector\n#(flatten (map vector %1 %2))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":39,"code":"(fn [seq1 seq2]\n  (let [num-to-take (* 2 (min (count seq1) (count seq2)))]\n  (loop [seqa seq1\n         seqb seq2\n         interleaved []\n         num-to-take num-to-take]\n    (if (= 0 num-to-take)\n      interleaved\n      (let [new-interleaved (conj interleaved (first seqa))]\n        (recur seqb (rest seqa) new-interleaved (dec num-to-take)))))))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":39,"code":"#(reverse ((fn zip [x y L] (if (or (empty? x) (empty? y)) L (zip (rest x) (rest y) (cons (first y) (cons (first x) L))))) %1 %2 '()))","user":"569c07b9e4b0542e1f8d145d"},{"problem":39,"code":"(fn\n  [a b]\n  (reduce concat (map list a b)))","user":"54d267e0e4b0e8a36923e5f3"},{"code":"#(flatten (map (fn[x y] [x y]) % %2))","problem":39,"user":"51b41150e4b0f094dd986fac"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [col1 col1\n         col2 col2\n         output []]\n    (if (and (seq col1)\n             (seq col2))\n      (recur (rest col1)\n             (rest col2)\n             (conj (conj output (first col1))\n                   (first col2)))\n      output)))","user":"583e02fce4b089d5ab817da5"},{"code":"mapcat #(list % %2)","problem":39,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":39,"code":"(fn a39\n  [x1 x2]\n  (loop [i 0 j []]\n    (if (= i (min (count x1) (count x2)))\n      j\n      (recur (inc i) (do (conj j (nth x1 i) (nth x2 i)))))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"code":"(fn inter ([lst1 lst2] (inter [] lst1 lst2))\n \t\t  ([xs lst1 lst2] (if (or (empty? lst1) (empty? lst2))\n                              xs\n                              (recur (conj (conj xs (first lst1)) (first lst2)) (rest lst1) (rest lst2))\n                          )\n          )\n)","problem":39,"user":"52bf8e35e4b07a9af579233a"},{"problem":39,"code":"(fn [col1 col2]\n  (flatten\n   (map\n    (fn [a b] (conj [] a b))\n    col1 col2)))","user":"5f10fb99e4b091ba50b4dba8"},{"problem":39,"code":"(fn interl [a b] (mapcat (fn [x y] (prn :x x :y y) (list x y) ) a b)  )","user":"5972fcf6e4b01722bebd4c92"},{"code":"(fn [c1 c2]\n  (loop [a [] [x & xs] c1 [y & ys] c2]\n\t\t(if (or (empty? xs) (empty? ys))\n\t\t\t(conj a x y)\n\t\t(recur (conj a x y) xs ys))))","problem":39,"user":"50668a06e4b03d366d7cb2b2"},{"problem":39,"code":"#(loop [a %1\n        b %2\n        c []]\n   (if (or (zero? (count a)) (zero? (count b)))\n     c\n     (recur (rest a)\n            (rest b)\n            (conj c (first a) (first b))\n            )))","user":"595a3b41e4b066ee0a44afb7"},{"code":"(fn intl [x y] (if (and (not(empty? x)) (not(empty? y))) (concat (apply list [(first x) (first y)]) (intl (rest x) (rest y)))))","problem":39,"user":"5245d29ae4b09dbe66b56174"},{"problem":39,"code":"(fn [prva druga]\n  (loop [lista []\n         pOstatak prva\n         dOstatak druga]\n    (if (or (empty? pOstatak) (empty? dOstatak)) lista (recur (conj lista (first pOstatak) (first dOstatak)) (rest pOstatak) (rest dOstatak)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":39,"code":"(fn [x y]\n  (loop [remx x remy y res []]\n    (if (or (empty? remx) (empty? remy))\n      res\n      (recur (rest remx) (rest remy) (conj res (first remx) (first remy)))\n      )\n    )\n  )","user":"55d42f78e4b0e31453f64a73"},{"code":"#(flatten(reverse(loop[agg '() a % b %2]\n                    (if(or (empty? a) (empty? b))\n                      agg\n                      (recur (cons (list(first a)(first b)) agg) (rest a) (rest b))))))","problem":39,"user":"531576b4e4b08068f379ed29"},{"code":"(fn [coll1 coll2] (flatten (map vector coll1 coll2)))","problem":39,"user":"506b8242e4b0eda3100c090a"},{"code":"mapcat list\n;; interleave is same as mapcat list?\n;; and flatten (map list...","problem":39,"user":"4eb59464535d7eef30807369"},{"problem":39,"code":"(fn [a b]\n  (loop [lk  ()\n         jk  0]\n    (if (or (>= jk (* (count a) 2)) (>= jk (* (count b) 2)))\n      (reverse lk)\n      (recur (if (even? jk)\n               (cons  (first (drop (quot jk 2) a)) lk)\n               (cons  (first (drop (quot jk 2) b)) lk))\n             (inc jk)))))","user":"59e55cc8e4b08badc2a0c555"},{"code":"(fn [xs0 ys0]\n  (let [f (fn [xs ys acc]\n            (if (or (empty? xs) (empty? ys))\n              acc\n              (recur (next xs) (next ys) (conj acc (first xs) (first ys)))))]\n    (f xs0 ys0 [])))","problem":39,"user":"4e39fb68535deb9a81d77f47"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 ret []]\n    (if (and (not-empty s1) (not-empty s2))\n      (recur (rest s1) (rest s2) (conj ret (first s1) (first s2)))\n      ret)))","user":"571d063ee4b0145328a76272"},{"code":"(fn il [s0 s1]\n  (loop [i 0 r []]\n    (if (= i (min (count s0) (count s1)))\n      r\n      (recur (inc i) (conj r (nth s0 i) (nth s1 i)))\n    )\n  )\n)","problem":39,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [c1 c2] (flatten (map #(list % %2) c1 c2)))","problem":39,"user":"511618b1e4b0d4f670fd2fdf"},{"code":"#(loop [l1 %1 l2 %2 out []]\n    (if (or (empty? l1) (empty? l2))\n        out\n        (recur (rest l1) (rest l2) (conj out (first l1) (first l2)))))","problem":39,"user":"51059d33e4b0380e797c7d5c"},{"problem":39,"code":"(fn [a b] (flatten (map (fn [i] [(a i) (b i)]) (range (min (count a) (count b))))))","user":"54d492dbe4b0a52adc2e2001"},{"code":"(fn intrlv [ls1 ls2]\n  (cond\n   (empty? ls1) '()\n   (empty? ls2) '()\n   :else (cons (first ls1) (cons (first ls2) (intrlv (rest ls1) (rest ls2))))))","problem":39,"user":"529e2383e4b04e0c58e87b8b"},{"code":"(fn [s1 s2]\n    (loop [s1 s1\n           s2 s2\n           res []]\n      (if (or (empty? s1) (empty? s2))\n        res\n        (let [e1 (first s1)\n              e2 (first s2)\n              r1 (next s1)\n              r2 (next s2)]\n          (recur r1 r2 (conj res e1 e2)))\n\n        )))","problem":39,"user":"5165a235e4b079ad97ec44ac"},{"problem":39,"code":"#(if (and (not-empty %2) (not-empty %3)) (recur (conj %1 (first %2) (first %3)) (rest %2) (rest %3))   %1) []","user":"585d40afe4b0f14aab7c8798"},{"code":"(fn inter [xs ys] (if (or (empty? xs) (empty? ys)) '() (conj (conj (inter (rest xs) (rest ys)) (first ys)) (first xs))))","problem":39,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":39,"code":"(fn zip [xs ys]\n  (if (some empty? [xs ys])\n    '()\n    (let [x (first xs) y (first ys)]\n      (conj (zip (rest xs) (rest ys)) y x))))","user":"5c57fc9ae4b0fb8c5ffd9a52"},{"code":"#(loop [lhs %1\n         rhs %2\n         lst []]\n    (if (or (empty? lhs) (empty? rhs))\n      (seq lst)\n      (recur (rest lhs) (rest rhs) (conj (conj lst (first lhs)) (first rhs))))\n   )","problem":39,"user":"50868795e4b004985b776e5e"},{"problem":39,"code":"(fn inter \n  ([l1 l2] (inter l1 l2 '()))\n  ([l1 l2 con]\n   (if (or (empty? l1) (empty? l2))\n     (flatten (reverse con))\n     (recur (rest l1) (rest l2) (cons (list (first l1) (first l2)) con )))))","user":"589714cbe4b00487982d52b1"},{"code":"(fn [s1 s2]\n  (loop [out [] s1 s1 s2 s2]\n    (if (or (empty? s1) (empty? s2)) out\n      (recur (conj out (first s1) (first s2)) (rest s1) (rest s2)))))","problem":39,"user":"51c342e9e4b0851ac09658f3"},{"code":"(fn [acoll bcoll] \n  (reduce (fn [result pair] (concat result pair)) '() (map (fn [a b] [a b] ) acoll bcoll))\n  )","problem":39,"user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn [x y]\n    (loop [la x lb y rst []]\n      (if (or (empty? la) (empty? lb)) rst\n          (recur\n           (rest la)\n           (rest lb)\n           (conj rst (first la) (first lb))))))","problem":39,"user":"4edb314d535d10e5ff6f5317"},{"code":"#(loop [a % b %2 result []] \n  (if (= 0 (min (count a) (count b)))\n    (flatten result)\n    (recur (rest a) (rest b) \n           (conj result [(first a) (first b)]))))","problem":39,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (let [length (min (count xs) (count ys))\n        f (fn f [xys xs ys is-x]\n            (if (empty? xs) (concat xys ys)\n               (if (empty? ys) (concat xys xs)\n                   (if is-x\n                     (f (concat xys [(first xs)]) (rest xs) ys (not is-x))\n                     (f (concat xys [(first ys)]) xs (rest ys) (not is-x)))))\n            )] (f [] (take length xs) (take length ys) true) ))","user":"50aa777fe4b056ee01935866"},{"code":"(fn f39 [s1 s2] (flatten (for [ix (range (if (< (count s1) (count s2)) (count s1) (count s2)))]\n                   (concat (list (get s1 ix)) (list (get s2 ix)))\n                  )))","problem":39,"user":"52bf0116e4b07a9af5792328"},{"code":"(fn [a b] (mapcat #(list %1 %2) a b))","problem":39,"user":"4e218470535d04ed9115e817"},{"problem":39,"code":"#(loop [a %1 b %2 acc []] (if (some empty? [a b]) acc (recur (rest a) (rest b) (conj acc (first a) (first b)))))","user":"53b2a7f8e4b047364c04449c"},{"problem":39,"code":"(fn Interleave-Two-Seqs\n  [a b]\n  (cond\n    (empty? a) a\n    (empty? b) b\n    :else  (concat (concat (list (first a)) (list (first b))) (Interleave-Two-Seqs (rest a) (rest b)))))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn [a b] (loop [c a d b result '()] (if (or (empty? c) (empty? d))\n                                        (reverse result)\n                                        (recur (rest c) (rest d) (conj result (first c) (first d)))) ))","problem":39,"user":"4f1684c7535d64f60314644b"},{"code":"(fn [list1 list2]\n  (reverse (loop [l () l1 list1 l2 list2]\n    (if (or (empty? l1) (empty? l2))\n      l\n      (recur (conj l (first l1) (first l2)) (rest l1) (rest l2))))))","problem":39,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":39,"code":"(fn f [& s]\n  (apply concat\n    (for [i (range 0 (apply min (map count s)))]\n      (map #(nth % i) s))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn [x y] (flatten (map (fn [x y] [x y]) x y)))","problem":39,"user":"523f5be3e4b01c266ffa7fa7"},{"problem":39,"code":"(fn [x y] (loop [rv (vector)\n                  x x\n                  y y] \n             (if (and (first x) (first y))\n               (recur\n                 (conj rv (first x) (first y))\n                 (next x)\n                 (next y))\n               rv)))","user":"5e453725e4b01d43a70e8e93"},{"problem":39,"code":"(fn ff [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (cons (first xs) (cons (first ys) (ff (rest xs) (rest ys))))))","user":"557dbc9de4b05c286339e0cd"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [s1 (seq c1) s2 (seq c2) colls ()]\n    (if (and (seq s1) (seq s2))\n      (let [new-colls (concat colls (list (first s1)) (list (first s2)))]\n        (recur (rest s1) (rest s2) new-colls))\n      colls)))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":39,"code":"(fn intrlv [s1 s2]\n  (loop [s1 s1 s2 s2 acc (empty s1)]\n    (if (or (empty? s1) (empty? s2))\n\t  acc \n\t  (recur (rest s1) (rest s2) (conj acc (first s1) (first s2))))))","user":"55bb6a19e4b01b9910ae29e5"},{"code":"(fn myinterleave [x y] \r\n  (if (or (empty? x) (empty? y))\r\n    '()\r\n    (conj (conj (myinterleave (rest x) (rest y)) (first y))\r\n          (first x))))","problem":39,"user":"4e14108c535d04ed9115e7dd"},{"problem":39,"code":"(fn interleave- [[x & xs] [y & ys]]\n  (concat [x y] (when (and (seq xs) (seq ys)) (interleave- xs ys))))","user":"59ee6801e4b0966464fe6a1f"},{"problem":39,"code":"(fn [u v] (for [i (range (* 2 (min (count u) (count v))))] (if (even? i) (u (/ i 2)) (v (/ (dec i) 2)))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn ilvseqs [seq1 seq2]                          \n    (if (or (empty? seq1) (empty? seq2))           \n      '()                                          \n      (concat                                      \n        (list (first seq1) (first seq2))           \n        (ilvseqs (rest seq1) (rest seq2)))))","problem":39,"user":"526397f1e4b03e8d9a4a70b6"},{"code":"(fn inte\n    ([s1 s2]\n       (let [s (seq s1) t (seq s2)]\n          (when (and s t)\n              (cons (first s) (cons (first t) (inte (rest s) (rest t))))\n          )\n       )\n    )\n )","problem":39,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":39,"code":"(fn problem39 [x y]\n  (if (or (empty? x) (empty? y) ) '()\n      (let [res (problem39 (rest x) (rest y))]\n        (conj res (first y) (first x)\n       )\n  )))","user":"5fdc6ad4e4b05ac5b16ea13a"},{"problem":39,"code":"(fn f [coll1 coll2] (when-let [s1 (seq coll1)]\n                      (when-let [s2 (seq coll2)]\n                      \t(cons (first s1)\n                              (cons (first s2)\n                                    (f (rest s1) (rest s2)))))))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":39,"code":"(fn my-interleave [col1 col2]\n (if (and (not-empty col1) (not-empty col2) )\n   (concat \n     (list (first col1))\n     (list (first col2))\n     (my-interleave (rest col1) (rest col2) )\n   )\n   nil\n )\n)","user":"55bb7546e4b01b9910ae29e7"},{"code":"(fn [& colls]\n  (flatten (apply map vector colls)))","problem":39,"user":"4e513fef535dc968683fc4f7"},{"code":"(fn int\n  ([c1 c2]\n    (when (and (seq c1) (seq c2))\n      (cons (first c1) (cons (first c2)\n                       (int (rest c1) (rest c2))))))\n  ([c1 c2 & rest]\n    (lazy-seq\n      (let [colls (map seq (conj rest c2 c1))]\n        (when (every? identity colls)\n          (concat (map first colls)\n                  (apply int (map rest colls))))))))","problem":39,"user":"4e86fd2d535dceadca46984d"},{"problem":39,"code":"(fn f [& colls]\n   (->> colls\n        (apply map vector)\n        flatten))","user":"60537cd1e4b04c8f2157d152"},{"problem":39,"code":"(fn inter [coll1 coll2]\n  (if (or (= coll1 '()) (= coll2 '()))\n      '()\n      (concat \n       (list \n        (first coll1) \n        (first coll2)) \n       (inter\n        (rest coll1) \n        (rest coll2)))))","user":"55f5c118e4b06e875b46ce8e"},{"problem":39,"code":"(fn [a b]\n  (loop [[x & xs] a [y & ys] b r []]\n    (if (or (nil? x) (nil? y)) r\n      (recur xs ys (into r [x y])))))","user":"58f44c07e4b0438e51c2ceb7"},{"code":"(fn my-interleave\n [first-sequence second-sequence]\n  \n (seq (loop [fs first-sequence \n        ss second-sequence\n        result []]\n   \n   (if (or (empty? fs) (empty? ss))\n   result\n   (recur (rest fs)\n          (rest ss)\n          (concat result [(first fs) (first ss)]))))))","problem":39,"user":"53951c75e4b0b51d73faaed4"},{"problem":39,"code":"(fn [as bs]\n  (loop [a as b bs acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [xs ys] (mapcat #(conj [] %1 %2) xs ys))","problem":39,"user":"52cee992e4b07d0d72b27395"},{"code":"(fn a [x y] (concat (list (first x) (first y)) (when-not(or(= 1 (count (vec x)))(= 1 (count (vec y))))(a (next x) (next y)))))","problem":39,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":39,"code":"#(flatten (map (fn [x y] (conj '() y x)) %1 %2))","user":"5998b0a1e4b07157cc8daaec"},{"code":"(fn\n  [coll1 coll2]\n  (loop [l1 (count coll1) l2 (count coll2) res [] c1 coll1 c2 coll2]\n    (if (or (= l1 0) (= l2 0))\n      (seq res)\n      (recur (dec l1) (dec l2) (conj res (first c1) (first c2)) (rest c1) (rest c2)))))","problem":39,"user":"5289bba9e4b0239c8a67ae69"},{"code":"(fn [x y] \n  (reduce concat \n    (map-indexed #(list %2 (nth y %)) (take (count y) x))))","problem":39,"user":"4f038bcd535dcb61093f6b1d"},{"problem":39,"code":"(fn\n   zipp\n   ([[hd1 & rst1] [hd2 & rst2]]\n    (if (or (empty? rst1) (empty? rst2))\n      [hd1 hd2]\n      (concat [hd1 hd2] (zipp rst1 rst2)))))","user":"580fb8e0e4b0f478707a05bc"},{"problem":39,"code":"#(let [c (min (count %1) (count %2))]\n  \t(loop [i 0\n           result []]\n      \t   (if (= i c)\n             result\n             (recur (inc i) (conj result (get %1 i) (get %2 i))))))","user":"5a23cabce4b0ff51aa4b32df"},{"problem":39,"code":";; faster than (mapcat list)\n(fn xinterleave\n  [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first c1) (cons (first c2)\n                              (xinterleave (rest c1) (rest c2))))))))","user":"55d5ee3fe4b0e31453f64a92"},{"code":"(fn f [x y]\n  (if (or (empty? x) (empty? y))\n    []\n    (concat\n      (conj [] (first x))\n      (conj [] (first y))\n      (f (rest x) (rest y)))))","problem":39,"user":"4fb1325de4b081705acca276"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [cl1 list1 cl2 list2 lo []]\n    (if (or (empty? cl1) (empty? cl2))\n      lo\n      (recur (rest cl1) (rest cl2) (into lo [(first cl1) (first cl2)]))\n      )\n    )\n  )","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [ind 0 results []]\n    (if (or (= ind (count coll1)) (= ind (count coll2)))\n      results\n      (recur (inc ind) (conj results (nth coll1 ind) (nth coll2 ind))))))","user":"56499a5de4b0284900eef644"},{"code":"(fn\n  foo\n  [x y]\n  (mapcat\n    (fn [ix iy]\n      (conj [] ix iy))\n    x\n    y ))","problem":39,"user":"51b5a6e0e4b0f094dd986fce"},{"code":"(fn [s1 s2]\n  (let [f (fn [x y acc]\n  \t(if (or (empty? x) (empty? y)) (reverse acc)\n    \t(recur (rest x) (rest y) (conj acc (first x) (first y)))))]\n        (f s1 s2 '())))","problem":39,"user":"5273e006e4b03e8d9a4a7495"},{"problem":39,"code":"(fn weave [a b]\n  (let [ln (min (count a) (count b))]\n    (if (= ln 0)\n      ()\n      (concat (list (first a)) (list (first b)) (weave (rest a) (rest b)))\n    )  \n  )\n )","user":"54468ebfe4b032a45b8693b1"},{"code":"(fn\n  [a b]\n  (reduce concat\n          '()\n          (map (fn [& xs] (seq xs)) a b)))","problem":39,"user":"51d0b46ee4b067c365486353"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 res []] (if (or (empty? s1) (empty? s2)) res (recur (rest s1) (rest s2) (conj res (first s1) (first s2)) )))","user":"57465429e4b009280f9f2b60"},{"problem":39,"code":"(fn [x y] (loop [x x y y l []] (if (or (empty? x) (empty? y)) l (recur (rest x) (rest y) (conj l (first x) (first y))))))","user":"5453b522e4b0e397800069d0"},{"code":"(fn [s1 s2] (mapcat #(vector %1 %2) s1 s2))","problem":39,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(comp flatten (partial map #(vector %1 %2)))","problem":39,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn inter [ls1 ls2]\n  (let [length1 (count ls1)\n        length2 (count ls2)]\n    (if (zero? (min length1 length2))\n      '()\n      (cons\n        (first ls1)\n        (cons (first ls2) (inter (rest ls1) (rest ls2)))))))","problem":39,"user":"50bb9fefe4b0594b91591c36"},{"code":"(fn [& x]\n  (apply mapcat (cons vector x)))","problem":39,"user":"4faa8de0e4b081705acca1f8"},{"code":"(fn ileave [xs ys]\n  (if\n    (and\n      (> (count xs) 0)\n      (> (count ys) 0)\n    )\n    (concat [(first xs) (first ys)] (ileave (rest xs) (rest ys)))\n    []\n  )\n)","problem":39,"user":"50608d4ce4b07251188e4455"},{"problem":39,"code":"(fn [cola colb]\n  (loop [vara cola varb colb result []]\n    (if (or (empty? vara) (empty? varb))\n      result\n      (recur (rest vara) (rest varb) (conj result (first vara) (first varb)))\n    )\n  )\n)","user":"5926c254e4b072a2710fceb8"},{"problem":39,"code":"(fn inte [c1 c2] \n (lazy-seq \n  (let [s1 (seq c1) s2 (seq c2)] \n   (when (and s1 s2) \n    (cons (first s1) (cons (first s2)  \n     (inte (rest s1) (rest s2))))))))","user":"57750460e4b0979f8965160c"},{"code":"(fn f[a b] (loop [z [] x a y b]\n              (if\n                (or (nil? (seq x)) (nil? (seq y)))\n                  z\n                  (recur (conj z (first x) (first y)) (rest x) (rest y)))))","problem":39,"user":"4f2c2ccbe4b0d6649770a050"},{"code":"(fn my-interleave\n  ([a b]\n     (my-interleave a b []))\n  ([a b r]\n     (if (and (seq a) (seq b))\n       (recur (rest a) (rest b) (conj r (first a) (first b)))\n       r)))","problem":39,"user":"511d6a01e4b022853b0e07a5"},{"problem":39,"code":"(fn my-inter [coll1 coll2] (flatten (map vector coll1 coll2)))","user":"5b421edce4b02d533a91bc2c"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x s1 y s2 result '()]\n    (if (or (empty? x) (empty? y))\n      (reverse result)\n      (recur (rest x) (rest y) (cons (first y) (cons (first x) result)))\n      )\n    )\n  )","user":"551b8e2ae4b07993ea3788d3"},{"code":"#(let [f (fn [xs ys self]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (conj (self (rest xs)(rest ys)self) (first ys)) (first xs))))]\n  (f % %2 f))","problem":39,"user":"4eaf08ce535d7eef3080732d"},{"problem":39,"code":"(fn [coll1 coll2]\n        (loop [coll1 coll1\n               coll2 coll2\n               result []]\n          (if (or (empty? coll1) (empty? coll2))\n             result\n             (recur (rest coll1) (rest coll2) (conj result (first coll1) (first coll2)))\n          )\n        )\n      )","user":"53ecd01fe4b0d648e757f4b9"},{"problem":39,"code":"(fn  [[a & as] [b & bs]]\n  (loop [a a, as as, b b, bs bs, out []]\n    (if (or (nil? as) (nil? bs))\n      (concat out [a b])\n      (recur (first as) (next as) (first bs) (next bs) (concat out [a b])))))","user":"5e65bfe4e4b0fd0acd1586b9"},{"problem":39,"code":"(fn [sa sb]\n  (loop [acc '()\n         ra sa\n         rb sb]\n    (let [a (first ra)\n          b (first rb)\n          acc (conj acc a b)\n          ra (rest ra)\n          rb (rest rb)]\n      (if (or (empty? ra) (empty? rb))        \n        (reverse acc)\n        (recur acc ra rb)\n        )\n      )\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"problem":39,"code":"(fn my-interleave [& cols]\n  (apply mapcat vector cols))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":39,"code":"(fn myInterleave [coll1 coll2]\n  (when (and (not (empty? coll1)) (not (empty? coll2)))\n    (cons (first coll1) (cons (first coll2) (myInterleave (rest coll1) (rest coll2))))))","user":"5f0c8b0de4b0f30dddfb5d4c"},{"problem":39,"code":"(fn [s1 s2]\n    (letfn [(hf [result s1 s2]\n              (if (or (empty? s1) (empty? s2))\n                result\n                (recur\n                 (conj result (first s1) (first s2))\n                 (rest s1)\n                 (rest s2))))]\n      (hf [] s1 s2)))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn\n          [a b]\n          (letfn\n            [(step\n               [a b]\n               (if (and a b)\n                 (cons\n                   (first a)\n                   (cons\n                     (first b)\n                     (step (next a) (next b))))))]\n            (step a b)))","problem":39,"user":"514d7e29e4b019235f6c0587"},{"problem":39,"code":"(fn [a b]\n  (mapcat list a b)\n  )","user":"60752ef6e4b069485764de55"},{"problem":39,"code":"(fn my-interleave [x y]\n  (mapcat #(list %1 %2) x y))","user":"576000fce4b08062f99a4e8b"},{"code":"(fn [s1 s2]\n  (mapcat (fn [a b] `(~a ~b)) s1 s2)\n  )","problem":39,"user":"531490bde4b08068f379ed17"},{"code":"(fn itlv [sq-1 sq-2]\n  (let [min-sq (if (< (count sq-1) (count sq-2))\n                \tsq-1\n                \tsq-2)]\n    (loop [min-idx (dec (count min-sq))\n\t\t   \t\t inter-sq '()]\n    \t(if (< min-idx 0)\n      \tinter-sq\n      \t(recur (dec min-idx) \n               (cons (nth sq-1 min-idx) (cons (nth sq-2 min-idx) inter-sq)) )))))","problem":39,"user":"50e35b2de4b094329ae7f4bb"},{"problem":39,"code":"(fn inter [a b] \n  (when-not (or (empty? a) (empty? b))\n    (let [[head_a & tail_a] a\n          [head_b & tail_b] b]\n    \t(cons head_a (cons head_b (inter tail_a tail_b))))))","user":"5694a50fe4b0dcc4269f4121"},{"code":"(fn [s1 s2]\n  (flatten (map (comp concat list) s1 s2)))","problem":39,"user":"524ab5f2e4b09eba1c02239d"},{"problem":39,"code":"(fn [s1 s2]\n  (mapcat #(vector %1 %2) s1 s2))","user":"578fc072e4b0ebec4cfb759a"},{"problem":39,"code":"(fn [col1 col2]\n  (mapcat vector col1 col2))","user":"5656e039e4b0f9d632dd84a3"},{"code":"(fn [k l] (flatten (map #(lazy-seq [%1 %2]) k l)))","problem":39,"user":"4fec550de4b0681fd128dca6"},{"code":"#(reverse (flatten (seq (zipmap %2 %))))","problem":39,"user":"4fd2529ae4b04c3a95aa041f"},{"code":"(fn _ [a b]\n  (let [first-a (first a)\n  \t\tfirst-b (first b)]\n    (if (or (nil? first-a) (nil? first-b))\n      []\n      (concat [first-a] [first-b] (_ (rest a) (rest b))))))","problem":39,"user":"517cc671e4b0bbbf1f12af0a"},{"code":"(fn [m1 m2]\n  (mapcat #(list %1 %2) m1 m2))","problem":39,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn itr [l a b]\n\t\t(println (or (empty? a) (empty? b)))\n\t  (if (or (empty? a) (empty? b))\n\t    l\n\t    (itr (concat l [(first a) (first b)]) (rest a) (rest b)))) '()","problem":39,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn foo \n  ([c1 c2]\n   (foo c1 c2 []))\n  ([c1 c2 coll]\n   (if (or (empty? c1) (empty? c2))\n     coll\n     (recur (rest c1) (rest c2) (conj (conj coll (first c1)) (first c2))))))","problem":39,"user":"5140771ae4b076604f1aa555"},{"code":"(fn [X Y]\n  ((fn asd [[x & xrest] [y & yrest] R]\n     (if (or (empty? xrest) (empty? yrest))\n       (concat R [x] [y])\n       (asd xrest yrest (concat R [x] [y]))))\n   X Y []))","problem":39,"user":"52bb2fc0e4b07a9af57922e0"},{"code":"(fn [& s] (apply mapcat list s))","problem":39,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn ileave [[head1 & coll1] [head2 & coll2]]\n  (cond\n    (or (empty? coll1) (empty? coll2)) [head1 head2]\n    :else (concat [head1 head2] (lazy-seq (ileave coll1 coll2)))))","problem":39,"user":"50f94727e4b0e7c80cb15a49"},{"code":"(fn [x y ] (flatten (map vector x y)))","problem":39,"user":"51b6471ee4b02e5820733404"},{"problem":39,"code":"(fn [x y]\n  (loop [x x y y out []]\n    (if (or (empty? x) (empty? y))\n      out\n      (recur (rest x) (rest y) (conj out (first x) (first y))))))","user":"54764a8fe4b0c51c1f4d72a3"},{"problem":39,"code":"(fn interleave-1 [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) (interleave-1 (rest s1) (rest s2)))))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":39,"code":"#(loop [c1 %1 c2 %2 rt []]\n   (if(or (empty? c1) (empty? c2))\n     rt\n     (recur (rest c1) (rest c2) (conj rt (first c1) (first c2)))\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"problem":39,"code":"(fn my-interleave\n  ([x y] (my-interleave x y []))\n  ([x y z] \n   (if-not (or (nil? x) (nil? y))\n     (my-interleave (next x) (next y) (conj z (first x) (first y)))\n     z)))","user":"551c594de4b07993ea3788dc"},{"code":"(fn [lst1 lst2] (reduce into (map (fn [x] [(lst1 x) (lst2 x)])(into [] (range 0 (count (if (< (count lst1) (count lst2)) lst1 lst2)))))))","problem":39,"user":"50d6d7eee4b0159555a1fc76"},{"problem":39,"code":"(fn [c1 c2] (apply concat (map vector c1 c2)))","user":"56739bdce4b05957ce8c6122"},{"problem":39,"code":"(fn [a b]\n  \n ;(flatten (into '() (reverse (zipmap a b))))  \n  ;(flatten (into () (zipmap b a)))\n  ; map (and zipmap) don't guarantee order, hence this approach fails on 4clojure but works in my REPL\n  \n  ;(mapcat vector a b)\n  (flatten (map vector a b))\n  \n)","user":"56f2611fe4b04a395b9a04a2"},{"code":"#((fn recursion [r s1 s2] (if (and (not (= (first s1) nil)) (not (= (first s2) nil)))\n                        (recursion (conj (conj r (first s1)) (first s2)) (next s1) (next s2))\n                        (seq r))) [] %1 %2)","problem":39,"user":"50e008d1e4b061dbdced722a"},{"code":"(fn inter [x y] \n  (if (and (first x) (first y)) (concat (concat [(first x)] [(first y)]) (inter (next x) (next y))))\n  )","problem":39,"user":"51fc44c5e4b0f1313d468a1b"},{"code":"(fn new-interleave2\n  [l1 l2]\n  (loop [s1 l1\n         s2 l2\n         acc []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))\n      acc)))","problem":39,"user":"4f541874e4b0a7574ea717d8"},{"problem":39,"code":"(fn inter [a b]\n    (reduce (fn [acc [x y]] (conj acc x y) ) (map #(vector %1 %2) a b))\n  )","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn [s1 s2]\n  (let [result []]\n    (flatten \n      (for [i (range (min (count s1) (count s2)))\n          :let [result (conj result \n                \t\t     (nth s1 i) \n                \t\t\t (nth s2 i))]]\n            result))))","problem":39,"user":"51ce1320e4b0e42293a22551"},{"problem":39,"code":"(fn interleave-impl [seq-1 seq-2]\n  (reduce (fn [col ele] (apply conj col ele)) (map (fn [el-1 el-2] (vector el-1 el-2)) seq-1 seq-2)))","user":"5c196dc3e4b01240ff5671fa"},{"problem":39,"code":"(fn [coll-1 coll-2]\n  (reduce (fn [temp-coll elem] (concat temp-coll elem))\n          ()\n          (map list coll-1 coll-2)))","user":"5ef28e95e4b07c55ae4a0535"},{"problem":39,"code":"(fn [coll1 coll2]\n  (let [i (min (count coll1)(count coll2))]\n    (println i)\n    (loop [coll '[] coll1x coll1 coll2x coll2 x i]\n      (if (= x 0)\n        coll\n        (do\n          (println \"x\")\n          (recur (conj coll (first coll1x)(first coll2x)) (rest coll1x)(rest coll2x)(dec x)))))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":39,"code":"(fn interleave-own\n  ([seq1 seq2] (interleave-own seq1 seq2 []))\n  ([rest1 rest2 result] (if (or (empty? rest1) (empty? rest2))\n                          result\n                          (interleave-own (rest rest1) (rest rest2) \n                            (conj (conj result (first rest1)) (first rest2))))))","user":"578f5122e4b0ebec4cfb7592"},{"code":"#(loop [res [] a %1 b %2] \n  (if (or (empty? a) (empty? b))\n    res\n    (recur (conj (conj res (first a)) (first b)) (rest a) (rest b))))","problem":39,"user":"4dbd2aa3535d020aff1edf40"},{"code":"#(loop [[x & xs] %1 [y & ys] %2 acc ()]\n  (let [acc (conj acc x y)]\n  (if (or (empty? xs) (empty? ys))\n    (reverse acc)\n    (recur xs ys acc))))","problem":39,"user":"4f58de86e4b0a7574ea7185b"},{"problem":39,"code":"(fn interleaving [sequence1 sequence2] (mapcat list sequence1 sequence2))","user":"5a99d28ee4b0d174b936c7b3"},{"problem":39,"code":"#(loop [xs %1 ys %2 rs []]\n   (if (or (empty? xs) (empty? ys))\n     rs\n     (recur (rest xs) (rest ys) (conj rs (first xs) (first ys)))))","user":"58cfbd7ae4b03c36ff7e58ba"},{"code":"(fn [s1 s2]\n  (mapcat (fn [a b] [a b]) s1 s2))","problem":39,"user":"4fc7db47e4b0ee37620e182a"},{"problem":39,"code":"(fn [keys vals](loop [map []\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (conj map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))","user":"524ac3d1e4b09eba1c0223a0"},{"problem":39,"code":"(fn [c1 c2]\n    (loop [[e1 & r1] c1\n           [e2 & r2] c2\n           res '()]\n      (if (some nil? [e1 e2])\n        res\n        (recur r1\n               r2\n               (concat res (list e1 e2))))))","user":"5c5d2e90e4b01df32ab732af"},{"problem":39,"code":"(fn ! [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (conj (conj (! (rest x) (rest y)) (first y)) (first x))\n    ))","user":"560aed59e4b05f002753df11"},{"problem":39,"code":"(fn [x y]\n  (loop [a x b y acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj (conj acc (first a)) (first b)))\n      )\n    ))","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":39,"code":"(fn [x y]\n (loop [i x j y o []]\n  (if (and (first i) (first j))\n     (recur (rest i) \n            (rest j)\n            (conj o (first i)\n                    (first j)\n                  ))\n    o)))","user":"5e85163be4b09a7a73c8bbd0"},{"problem":39,"code":"(fn rec [xs ys]\n  (when (and (seq xs) (seq ys))\n    (cons (first xs) (cons (first ys) (rec (rest xs) (rest ys))))))","user":"55d68726e4b0e31453f64a99"},{"code":"(fn me ([col1 col2] (me col1 col2 '()))\n  ([col1 col2 output] (let [x (first col1) y (first col2)] (if (cond (nil? x) nil (nil? y) nil :else true) (recur (rest col1) (rest col2) (conj output x y)) (reverse output)))))","problem":39,"user":"4fbd6210e4b081705acca303"},{"problem":39,"code":"(fn [f s] (mapcat #(list %1 %2) f s))","user":"543823f1e4b032a45b869311"},{"code":"mapcat #(flatten %&)","problem":39,"user":"4df8644f535d04ed9115e778"},{"problem":39,"code":"#(reduce into '() (reverse (map list %2 %1)))","user":"54d5fbe9e4b0a52adc2e2014"},{"problem":39,"code":"(fn [a b] (letfn [(iter [a b]\n            (let [[x & xs] a\n                  [y & ys] b]\n              (cons x (cons y (lazy-seq (iter xs ys))))))]\n              (take (* 2 (min (count a) (count b))) (iter a b))))","user":"57211a02e4b0c5bde472c0a9"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [c1 col1\n         c2 col2\n         new-col []]\n    (if (or (empty? c1) (empty? c2))\n      (seq new-col)\n      (recur (rest c1) (rest c2) (concat new-col (vector (first c1) (first c2)))))))","user":"56478a82e4b0284900eef61e"},{"problem":39,"code":"(fn myinterleave [coll1 coll2]\n  (seq ((fn myinterleave-acc [acc coll1 coll2]\n          (if (or (empty? coll1) (empty? coll2 ))\n            acc\n            (myinterleave-acc (conj acc (first coll1) (first coll2)) (rest coll1) (rest coll2))\n            )\n          ) [] coll1 coll2)))","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn seko [a b] (if (or (empty? a) (empty? b)) '() (concat (if\n(empty? a) '() (list (first a))) (if (empty? b) '() (list(first b))) (seko (rest a) (rest b)))))","problem":39,"user":"52474ec2e4b05ef8e38e6361"},{"problem":39,"code":"(fn [a b]\n  (loop [acc  [] a1  a b1  b]\n    (let [fa (first a1)\n          fb (first b1)\n          rb (rest b1)\n          ra (rest a1)]\n      (if (or (empty? a1) (empty? b1)) acc (recur (conj acc fa fb) ra rb)))))","user":"5fac50f4e4b08cb800c85ae5"},{"problem":39,"code":"(partial\n (fn [s & cols]\n  (let [firsts (map first cols)]\n    (if (some nil? firsts)\n      s\n      (recur (concat s firsts) (map rest cols)))))\n [])","user":"5922f8a9e4b026ae3852128f"},{"problem":39,"code":"(fn [coll-1 coll-2]\n  (loop [coll-1 coll-1\n         coll-2 coll-2\n         acc []]\n    (if (or (empty? coll-1) (empty? coll-2)) \n       acc\n       (recur (rest coll-1) (rest coll-2) (conj acc (first coll-1) (first coll-2)))\n     )))","user":"53da8fede4b0e771c30254a3"},{"problem":39,"code":"(fn [c1 c2] \n  (loop [cnt c1 cnt2 c2 acc []] \n    (if (or (empty? cnt) (empty? cnt2)) acc \n      (recur (vec (rest cnt)) (vec (rest cnt2)) (conj (conj acc (first cnt))(first cnt2 ))))))","user":"4e526cc4535d302ef430da74"},{"code":"(fn [c1 c2]\n  (flatten (map #(list % %2) c1 c2)))","problem":39,"user":"52479487e4b05ef8e38e6373"},{"problem":39,"code":"(fn  [a b] \n  (reduce concat\n    (map (fn [x y] [x y])\n       a b)))","user":"573407f0e4b0cd1946bd1001"},{"problem":39,"code":"(fn [xs ys]\n   (loop [left xs right ys blended []]\n     (if (or (empty? left) (empty? right))\n       blended\n       (recur (rest left) (rest right)\n              (conj blended (first left) (first right))))))","user":"5ab8037ae4b073f177442678"},{"code":"(fn [s1 s2]\n  (loop [sz (map list s1 s2) out []]\n    (if (empty? sz)\n      out\n      (let [[x1 x2] (first sz)]\n        (recur (rest sz) (conj out x1 x2))))))","problem":39,"user":"4ee88269535d93acb0a6687f"},{"problem":39,"code":"(fn  [s1 s2]  (loop  [s1 s1\n                      s2 s2\n                      inter  []]\n                  (if  (or (empty? s1) (empty? s2)) inter\n                  (recur (rest s1) (rest s2) (concat inter  (vector  (first s1) (first s2)))))))","user":"585030cbe4b0b7285a6f4e78"},{"problem":39,"code":"(fn [x y]\n  (let [a (count x)\n        b (count y)\n        c (min a b)]\n    (loop [i 0\n           d '()]\n      (if (= i c)\n        (reverse d)\n        (recur (+ i 1) (conj d (nth x i) (nth y i)))))))","user":"5d371b6fe4b01671435dbd31"},{"code":"(fn inter[x y](if (or (empty? x)(empty? y)) () \r\n(concat\r\n  (list (first x) (first y))\r\n  (inter (rest x) (rest y)))))","problem":39,"user":"4dbed096535d020aff1edf6b"},{"code":"(fn [xs ys] (mapcat vector xs ys))","problem":39,"user":"4eecdd66535d93acb0a668b9"},{"problem":39,"code":"(fn my-inter [as bs]\n  (when (and (not-empty as) (not-empty bs))\n    (concat (list (first as) (first bs)) (my-inter (rest as) (rest bs)))))","user":"59f2af64e4b0966464fe6a87"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (let [s1 (seq s1)\n        s2 (seq s2)]\n    (if (and s1 s2)\n      (lazy-seq\n       (cons (first s1)\n         (cons (first s2)\n               (my-interleave (rest s1) (rest s2)))))\n      '())))","user":"57a4fa50e4b0a966079561f1"},{"problem":39,"code":";;  (let [out []] (map (fn [a1 a2] (conj out a1 a2)) [1 2 3] [:a :b :c]))\n#(apply concat (map (fn [a1 a2] (vector a1 a2)) %1 %2))\n;;#(mapcat vector %1 %2)","user":"5ce78776e4b0a17bb84e2ba2"},{"code":"(fn inter [l1 l2]\n  (loop [in1 l1\n         in2 l2\n         out []]\n    (if (or (empty? in1) (empty? in2))\n      out\n      (recur (rest in1) (rest in2)\n             (conj out (first in1) (first in2))))))","problem":39,"user":"4f04f847535dcb61093f6beb"},{"problem":39,"code":"(fn [arg-1 arg-2]\n  (flatten (map list arg-1 arg-2)))","user":"53b05a36e4b047364c044481"},{"code":"(comp flatten (partial map (fn[x y] [x y])))","problem":39,"user":"52d36f60e4b099d49816f0c2"},{"problem":39,"code":"#(loop [x %1 y %2 z []]\n   \t(cond (empty? x) z\n          (empty? y) z\n          :else (recur (rest x) \n                       (rest y) \n                       (concat z [(first x) (first y)]))))","user":"59fea630e4b01bb0ae8afd10"},{"problem":39,"code":"(fn [x y] (reverse (apply  concat (zipmap y x))))\n;mapcat list","user":"54ce541de4b057c6fda3a2ac"},{"problem":39,"code":"#(mapcat (fn [i1 i2] (list i1 i2)) %1 %2)","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":39,"code":"#(mapcat (fn [m n] [m n]) %1 %2)","user":"5881d1c2e4b0f1effa3b7644"},{"problem":39,"code":"(fn [sq1 sq2]\n           (let [aux\n                 (fn [[hd1 & tl1 :as in1] [hd2 & tl2 :as in2] acc]\n                   (cond \n                    (or\n                     (nil? hd1)\n                     (nil? hd2))\n                    acc\n\n                    :else\n                    (recur tl1 tl2 (conj acc hd1 hd2))))]\n                    \n             (aux sq1 sq2 [])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":39,"code":"(fn [in1 in2] (mapcat #(list %1 %2) in1 in2))","user":"5f2c94b4e4b033932238a669"},{"problem":39,"code":"(fn [a b]\n  (loop [reca a recb b reci '()]\n    (if (or (empty? reca) (empty? recb))\n      reci\n      (recur (rest reca) (rest recb) (concat reci (concat (repeat 1 (first reca)) (repeat 1 (first recb)))))\n    )\n  )\n)","user":"554756b8e4b0a04f79299549"},{"problem":39,"code":"(fn inter [x y]\n  (loop [x x\n         y y\n         result nil]\n    (cond\n      (or (= 0 (count x))\n          (= 0 (count y)))\n        result\n      :else\n        (recur (rest x)\n               (rest y)\n               (concat result\n                       (list (first x))\n                       (list (first y)))))))","user":"5decd4fde4b093ff7172757b"},{"problem":39,"code":"#(loop [coll %1 other %2 answer []]\n   (if \n     (or (= (* 2 (count %1)) (count answer)) (= (* 2 (count %2)) (count answer)))\n     answer\n     (recur\n      other\n      (rest coll)\n      (conj answer (first coll))\n     )\n   )\n)","user":"560fe558e4b05f002753df63"},{"problem":39,"code":"(fn comb \n   ([a b] (comb a b []))\n   ([a b o]\n    (if (or (empty? a) (empty? b))\n      o\n      (comb (rest a) (rest b) (conj (conj o (first a)) (first b)))\n      )\n    )\n   )","user":"5b081ff2e4b0cc2b61a3bdb3"},{"code":"(fn foo [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (foo (rest s1) (rest s2))))))))","problem":39,"user":"4f036266535dcb61093f6a95"},{"code":"(fn [x y](flatten (map list x y)))","problem":39,"user":"4f03d0fe535dcb61093f6b6d"},{"problem":39,"code":"(fn inter [a b]\n  (if (= a [])\n    '()\n    (if (= b [])\n      '()\n      (cons (first a)\n            (cons (first b)\n                  (inter (rest a)\n                         (rest b)\n                         )\n                  )\n            )\n      )\n    )\n  )","user":"541ef7e2e4b01498b1a71a92"},{"code":"#(loop [s1 %1 s2 %2 res []]\n  (println res)\n\t(if (or (empty? s1) (empty? s2)) (flatten res)\n\t\t(recur (rest s1) (rest s2) (conj res [(first s1) (first s2)])))\n  )","problem":39,"user":"4e8ad1d2535d65386fec2110"},{"code":"(fn [x y]\n  (loop [i [] j x k y]\n    (let [a (first j) b (first k)]\n      (if (or (nil? a) (nil? b))\n        i\n        (recur (conj (conj i a) b) (next  j) (next k))))))","problem":39,"user":"531488f3e4b08068f379ed16"},{"code":"(fn [left right]\n  (loop [a left b right res []]\n    (println a)\n    (println b)\n    (cond\n      (empty? a) res\n      (empty? b) res\n      :else (recur (rest a) (rest b) (conj res (first a) (first b)))\n    )\n  )\n)","problem":39,"user":"4e7e05a6535db169f9c796fe"},{"problem":39,"code":"#(loop [seq1 % seq2 %2 res []]\n   (if (or (= 0 (count seq1)) (= 0 (count seq2)))\n     res\n     (recur (rest seq1) \n     \t\t(rest seq2) \n     \t\t(concat res \n     \t\t\t\t(list (first seq1) (first seq2 ))))\n    )\n )","user":"594a7ed1e4b07ddc2dafae02"},{"code":"#(reverse (loop [f %1\n              s %2\n              r []]\n         (if (or (empty? f) (empty? s))\n           r\n           (recur (rest f) (rest s) (cons (first s) (cons (first f) r))))))","problem":39,"user":"4f1bee08535d64f60314647e"},{"code":"(fn t[a b] (\n    if (= 0 (count a))\n    '()\n    (if (= 0 (count b))\n    '()\n    (\n        cons (first a) (\n        cons (first b)\n        (t (rest a) (rest b))\n        ) \n    )\n    )\n))","problem":39,"user":"4f03c039535dcb61093f6b5e"},{"code":"(fn interl [a b] (when (and (seq a) (seq b)) (concat [(first a) (first b)] (interl (rest a) (rest b)))))","problem":39,"user":"52f381f3e4b05e3f0be25f10"},{"problem":39,"code":"(fn foo[coll1 coll2]\n  (flatten\n    (map-indexed (fn[idx item] [item (nth coll2 idx)]) (take (count coll2) coll1))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":39,"code":"(fn interleave-seqs\n  [seq1 seq2]\n  (flatten (map (fn [val1 val2] (conj (vector val1) (vector val2))) seq1 seq2)))","user":"5d42c88ae4b05dd059a5437e"},{"code":"(fn interl [xs xy]\n  (flatten (map #(list (nth xs %) (nth xy %))\n       (range (min \n               (count xs) \n               (count xy))))))","problem":39,"user":"4f81fcbfe4b033992c121c03"},{"problem":39,"code":"( fn\n    [l r]\n    ( loop [x l y r res []]\n     ( if (and (first x) (first y))\n      (recur (rest x) (rest y) (conj (conj res (first x)) (first y) )\n             )\n      res\n      )))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn f [s1 s2]\n    (if (or (empty? s1) (empty? s2))\n      nil\n      (conj (f (rest s1) (rest s2)) (first s2) (first s1))\n      ))","problem":39,"user":"52218b29e4b0e6a83c8925da"},{"code":"(fn [x y] (apply concat (map #(list % %2) x y)))","problem":39,"user":"536de1c3e4b0fc7073fd6e64"},{"problem":39,"code":"#(reduce concat (map (partial conj []) %1 %2))","user":"56b35565e4b0982f16b37e16"},{"code":"(fn myinter [list1, list2]\n  (if (or (empty? list1) (empty? list2))\n    '()\n    (concat\n      (list (first list1))\n      (list (first list2))\n      (myinter (rest list1) (rest list2)))))","problem":39,"user":"4fc50bcbe4b081705acca375"},{"problem":39,"code":"(fn intr [seq1 seq2]\n         (when (and (not (empty? seq1)) (not (empty? seq2)))\n           (cons (first seq1) (cons (first seq2) (intr (rest seq1) (rest seq2))))\n           ))","user":"57fc0719e4b0d3187e900987"},{"problem":39,"code":"mapcat #(conj [%1] %2)","user":"606d75f5e4b069485764de13"},{"code":"(fn [se1 se2]\n    (loop [lst '()\n           left (first se1)\n           right (first se2)\n           rst-left (rest se1)\n           rst-right (rest se2)]\n      (if (or (nil? left) (nil? right))\n        lst\n        (recur (concat lst (cons left (cons right '()))) (first rst-left) (first rst-right) (rest rst-left) (rest rst-right)))))","problem":39,"user":"4f038b62535dcb61093f6b1c"},{"problem":39,"code":"(fn interleave-seq [coll1 coll2]\n  (lazy-seq\n    (let [s1 (seq coll1) s2 (seq coll2)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2)\n                               (interleave-seq (rest s1) (rest s2))))))))","user":"605a876be4b000d535e6f53c"},{"code":"(fn my-interleave [c1 c2] (lazy-seq (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2) (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))))))","problem":39,"user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":39,"code":"#(flatten (map (partial conj []) % %2))","user":"50d0d2dde4b00b15ecee9768"},{"problem":39,"code":"(fn [x y]\n  (loop [x x y y res []]\n    (if (or (empty? x) (empty? y))\n      res\n      (recur (rest x) (rest y) (conj res (first x) (first y))))))","user":"5d1231dde4b02c15ef021995"},{"problem":39,"code":"(fn [x y]  (flatten (map list x y)) )","user":"55818b0ee4b05c286339e0fb"},{"code":"(fn i [a b]\n  (lazy-seq \n   (when-not (or (empty? a) (empty? b))\n     (cons \n      (first a) \n      (cons (first b)\n            (i (rest a) (rest b)))))))","problem":39,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [coll0 coll1]\n  (mapcat #(cons %1 [%2]) coll0 coll1))","problem":39,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":39,"code":"#(apply concat (map list %1 %2))\n#_(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         acc []]\n    (if (or (empty? xs)\n            (empty? ys))\n      acc\n      (recur (rest xs)\n             (rest ys)\n             (conj (conj acc\n                         (first xs))\n                   (first ys))))))","user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [c1 c2] (reduce into [] (map vector c1 c2)))","problem":39,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":39,"code":"#(flatten (map list %1  %2))","user":"4fff289ae4b0678c553fc3fd"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         output []]\n    (if (or (empty? c1) (empty? c2))\n      output\n      (recur\n        (rest c1)\n        (rest c2)\n        (conj output (first c1) (first c2))))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":39,"code":"(fn [a b]\n  (map \n   (fn [n]\n     (nth\n     \t(if (even? n)\n          a\n          b)\n      (quot n 2)))\n    (range (* 2 (min (count a) (count b))))))","user":"52179e00e4b0ea2f1c31c8d3"},{"problem":39,"code":"(fn interleav [a b]\n  (if (or (empty? a) (empty? b)) \n   nil\n   (concat \n     (list (first a))\n     (list (first b))\n     (interleav (rest a) (rest b)))))","user":"57501de0e4b02ea11479926c"},{"code":"(fn [x y]\n  (loop [i 0 n 0 ls (vec nil)]\n    (if (or (= n (count x)) (= n (count y)))\n      ls\n      (recur (inc i) (+ n (mod i 2)) (conj ls\n        (if (even? i) (nth x n) (nth y n)))))))","problem":39,"user":"4fe1597fe4b0dd6cd5ce3633"},{"problem":39,"code":"(fn fun\n  ([x y]\n   (fun (rest x) (rest y) (list (first y) (first x))))\n  ([x y lista]\n   (if (or (empty? x) (empty? y))\n     (reverse lista)\n     (fun (rest x) (rest y) (cons (first y) (cons (first x) lista ))))))","user":"560ff632e4b05f002753df66"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [result [] r1 s1 r2 s2]\n    (if (or (empty? r1) (empty? r2))\n      result\n      (recur (conj result (first r1) (first r2)) (rest r1) (rest r2))\n)\n)\n)","user":"57d7c894e4b0bd073c2023de"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [result []\n         subl1 l1\n         subl2 l2] \n    (cond\n      (or (empty? subl1) (empty? subl2)) result\n      :else (recur (conj result (first subl1) (first subl2))\n                   (rest subl1)\n                   (rest subl2)))))","user":"55ecac8ee4b0121d4835fdcc"},{"problem":39,"code":"(fn [li1 li2] \n(loop [acc [] l1 li1 l2 li2]\n  \t(if (or (empty? l1) (empty? l2))\n  \tacc\n    (recur (conj acc (first l1) (first l2)) (rest l1) (rest l2))\n  )))","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [a b]\n  (flatten (map list a b)))","problem":39,"user":"5006b7d2e4b0678c553fc48c"},{"code":"(fn f [co1 co2] \n  ((fn [co co1 co2] \n     (if (or (empty? co1) (empty? co2)) co\n       (concat co [(first co1) (first co2)]\n               (f (rest co1) (rest co2))))) \n   [] co1 co2))","problem":39,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":39,"code":"(fn [col1 col2] (flatten (map list col1 col2)))","user":"52ca7711e4b071a8d36bd3e3"},{"problem":39,"code":"(fn gabung [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (concat (concat [(first x)] [(first y)]) (gabung (rest x) (rest y)))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":39,"code":"(fn foo [seq1 seq2]\n\t(loop [iteration 0 list [] s1 seq1 s2 seq2]\n\t\t(if (> iteration (- (* 2 (min (count seq1) (count seq2))) 1))\n\t\t\tlist\n\t\t\t(if (= (rem iteration 2) 0)\n\t\t\t\t(let [[first & rest] s1] (recur (inc iteration) (conj list first) rest s2))\n\t\t\t\t(let [[first & rest] s2] (recur (inc iteration) (conj list first) s1 rest))\n\t\t\t)\n\t\t)\n\t)\n)","user":"553024c3e4b076ab5578f80d"},{"code":"(fn [c1 c2] (reduce (fn [acc n] (into acc [(nth c1 n) (nth c2 n)])) [] (range (min (count c1) (count c2)))))","problem":39,"user":"52c1f404e4b07a9af5792370"},{"problem":39,"code":"(fn solution [seq1 seq2]\n  (flatten (map #(vector %1 %2) seq1 seq2)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [a b]\n  (reduce concat (map #(vector %1 %2) a b)))","problem":39,"user":"4e74e119535d7a570dd295bc"},{"code":"(fn [a b] \n  (let [upper  (min (count a)\n                    (count b))]\n     (flatten\n      (for [n (range upper)] [(nth a n) (nth b n)]))))","problem":39,"user":"5250b7a5e4b0541d1855b83e"},{"problem":39,"code":"(fn [left right]\n    (reverse (loop [acc nil\n                    l left\n                    r right]\n               (if (or (empty? l) (empty? r)) acc\n                 (recur (conj (conj acc (first l)) (first r)) (rest l) (rest r))))))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn [& args]\n           (loop [colls args r '()]\n              (if (not-any? empty? colls)\n                  (recur (map rest colls)\n                         (concat (reverse (filter identity (map first colls)))\n                                 r))\n                  (reverse r))))","problem":39,"user":"4db8f6c4535d1e037afb219e"},{"problem":39,"code":"(fn my-interleave [vec1 vec2]\n  (let [interleave-x\n        (fn interleave-x [new-coll coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    new-coll\n    (interleave-x (conj (conj new-coll (first coll1)) (first coll2))\n                  (rest coll1) (rest coll2))))]\n    (interleave-x [] vec1 vec2)))","user":"55bb1b26e4b01b9910ae29e0"},{"code":"(fn  [lista1 lista2]\r\n  (let [ la (count lista1)\r\n         lb (count lista2)\r\n         menor (if (> la lb) lb la) ]\r\n  (loop [ l1 lista1\r\n          l2 lista2\r\n          res '()\r\n          i 0]    \r\n    (if\r\n        (>= i menor)\r\n        \tres\r\n            (recur (rest l1)\r\n                   (rest l2) \r\n                   (concat res \r\n                           (list (first l1))\r\n                           (list (first l2)))\r\n                     (inc i))))))","problem":39,"user":"50576483e4b001218172198b"},{"problem":39,"code":"(fn inter_leave\n  ;\" Takes two sequences and returns the first item from each, then the second...\"\n  [x1 x2]\n  (when-not (or (empty? x1) (empty? x2))\n    (cons (first x1) (cons (first x2)\n       (inter_leave (rest x1) (rest x2))))))","user":"5bbbcecee4b0a20761a23611"},{"problem":39,"code":"(fn[a b]\n     (if (<= (count a) (count b))\n         (flatten (map-indexed (fn [index item] (list item (nth b index))) a))\n         (flatten (map-indexed (fn [index item] (list item (nth b index))) (take (count b) a)))\n         ))","user":"5f727d2fe4b02876ed9fd08f"},{"code":";(fn [a b] (flatten (map #(vector %1 %2) a b)))\n#(mapcat vector %1 %2)","problem":39,"user":"53a074a4e4b0ca733b9744af"},{"problem":39,"code":"(fn [x y] (loop [lis [] i x j y] \n            (if (or (empty? i) (empty? j)) lis\n              (recur (concat lis (list (first i)) (list (first j))) (rest i) (rest j)))))","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (if (some empty? [coll1 coll2])\n    '()\n    (concat (list (first coll1) (first coll2))\n            (my-interleave (rest coll1) (rest coll2)))))","user":"557e56aae4b05c286339e0d5"},{"problem":39,"code":"(fn [c1 c2] (flatten (for [i (range (min (count c1) (count c2)))] (list (nth c1 i) (nth c2 i)))))","user":"52384eb1e4b0fae3832e99fa"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (mapcat vector coll1 coll2))","user":"5703d21ae4b08d47c97781ff"},{"problem":39,"code":"(fn [coll1 coll2]\n  (flatten\n   (map list coll1 coll2)))","user":"585aad0be4b0f14aab7c8753"},{"problem":39,"code":";;  (fn my-interleave [seq1 seq2]\n;;    (mapcat #(list %1 %2) seq1 seq2))\n\n(partial mapcat list)","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn [a b]\n  (flatten (map vector a b)))","problem":39,"user":"4f3656d1e4b0e243712b1ec9"},{"problem":39,"code":";; (fn my-itlv [& colls]\n;;     (when (every? identity colls)\n;;       (concat (map first colls) (apply my-itlv (map next colls)))))\nmapcat list","user":"6020365ae4b0bf4ca6b10960"},{"code":"#(vec (reverse (apply concat (seq (zipmap %2 %1)))))","problem":39,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn [c1 c2] (mapcat #(vec [%1 %2]) c1 c2))","problem":39,"user":"52d2f457e4b099d49816f0ba"},{"problem":39,"code":"(fn [s1 s2]\n  (loop \n    [acc '()\n     z1 s1\n     z2 s2]\n    \n    (if (or (empty? z1) (empty? z2))\n      acc\n      (recur (concat acc (remove nil? (list (first z1) (first z2)))) (rest z1) (rest z2))\n    )\n  )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn [coll1 coll2]\n  (mapcat list coll1 coll2))","problem":39,"user":"4ffb529be4b0678c553fc3cd"},{"code":"(fn [xs ys]\n  (loop [my-vec [] x xs y ys]\n    (if (and x y)\n      (recur\n        (conj my-vec (first x) (first y))\n        (next x)\n        (next y))\n      my-vec)))","problem":39,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":39,"code":"(fn thirty-nine [a b] (flatten (map vector a b) ) )","user":"52c03baee4b07a9af5792347"},{"problem":39,"code":"(fn [c1 c2]\n   (let [len (min (count c1) (count c2))]\n     (flatten (take-nth (inc len) (for [col1 (take len c1) col2 (take len c2)] [col1 col2])))))","user":"5793931ee4b0e215f87e845c"},{"problem":39,"code":"(fn\n  [a b]\n  (cond\n   (= 1 (min (count a) (count b))) (list (nth a 0) (nth b 0))\n   (= 2 (min (count a) (count b))) (list (nth a 0) (nth b 0) (nth a 1) (nth b 1))\n   (= 3 (min (count a) (count b))) (list (nth a 0) (nth b 0) (nth a 1) (nth b 1) (nth a 2) (nth b 2))\n   ))","user":"55e732c5e4b050e68259b492"},{"problem":39,"code":"(fn inter [coll1 coll2] (if (or (empty? coll2) (empty? coll1))\n                          '()\n                          (cons (first coll1) (cons (first coll2) (inter (rest coll1) (rest coll2))))))","user":"5759cd46e4b02ea11479932e"},{"code":"(fn [col1 col2]\n  (reduce\n    #(into %1 %2)\n      (map #(vector %1 %2) col1 col2)))","problem":39,"user":"4f61be97e4b0defedf855fc5"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (flatten (map #(vector %1 %2) a b)))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn\n  [seq_one seq_two]\n  (let [f (fn inter [s1 s2]\n            (if (seq s1)\n              (cons (first s1) (cons (first s2) (inter (next s1) (next s2))))\n              nil))]\n    (let* [len (min (count seq_one) (count seq_two))\n           s_one (take len seq_one)\n           s_two (take len seq_two)]\n      (f s_one s_two))))","problem":39,"user":"511b233ae4b07ab9ec456180"},{"code":"#(letfn [(is-seq? [s] (and (seq? s)\n                          (not (empty? s))))\n          (both-seq? [s1 s2] (and (is-seq? s1) (is-seq? s2)))]\n    (loop [rc1 (seq %1), rc2 (seq %2), accum []]\n      (if (not (both-seq? rc1 rc2))\n          accum\n          (recur (rest rc1) (rest rc2) (conj (conj accum (first rc1)) (first rc2))))))","problem":39,"user":"52000564e4b023d2eb508ca8"},{"problem":39,"code":"(fn inter [as bs]\n  (if (or (empty? as) (empty? bs))\n  []\n  (cons (first as) (cons (first bs) (inter (rest as) (rest bs))))))","user":"606d7f1ce4b069485764de14"},{"problem":39,"code":"(fn [first second] (flatten (map #(vec %&) first second)))","user":"542db41be4b0dad94371f2bb"},{"code":"(fn interleavex [a b]\n  (if (or (empty? a) (empty? b)) nil\n\t(cons (first a) (cons (first b) (interleavex (rest a) (rest b))))))","problem":39,"user":"50467ee2e4b011c5dfee7723"},{"problem":39,"code":"(fn [xs ys]\n   (letfn[(merge [xs ys acc]\n            (let [x (first xs)\n                  y (first ys)]\n              (if (or (nil? x) (nil? y))\n                acc\n                (recur (rest xs) (rest ys) (concat acc [x y])))))]\n     (filter (comp not nil?) (merge xs ys []))))","user":"51bb08a4e4b0fe3ecfb46446"},{"code":"(fn [a b]\n  ((fn mySplice [a b result]\n    (if (or (empty? a) (empty? b))\n      result\n      (mySplice\n        (rest a)\n        (rest b)\n        (conj result (first a)(first b))\n      )\n    )\n  ) a b [])\n)","problem":39,"user":"4f16d6ed535d64f60314644f"},{"problem":39,"code":"(fn [x y] \n  (loop [list1 x\n         list2 y\n         result []\n         ]\n    (if (or (empty? list1) (empty? list2))\n        result\n      (recur (rest list1) (rest list2) (conj result (first list1) (first list2)))\n                ))\n  )","user":"551d5cb9e4b07993ea3788e9"},{"problem":39,"code":"(fn interl [[a & as] [b & bs]]\n  (if (or (empty? as) (empty? bs))\n    [a b]\n    (cons a (cons b (interl as bs)))))","user":"5572fdd7e4b0aa18f790f3f1"},{"problem":39,"code":"(fn [lis1 lis2]\n  (loop [r1 lis1 r2 lis2 result []]\n    (if(or (empty? r1) (empty? r2))\n      result\n      (recur (rest r1) (rest r2) (conj result (first r1) (first r2))))))","user":"5191a763e4b0d428d29dc1b4"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq1 seq1 seq2 seq2 out []]\n    (if (or (empty? seq1) (empty? seq2))\n        out\n        (recur (rest seq1) (rest seq2) (conj out (first seq1) (first seq2))))))","user":"5bf0b940e4b0a6d31fed215c"},{"code":"(fn [s1 s2](flatten (map #(list %1 %2) s1 s2)))","problem":39,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":39,"code":"#(apply concat (map (fn [x y] (seq [x y])) %1 %2))","user":"57ef7393e4b0bfb2137f5bd6"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten (map (fn [& a] a) c1 c2))\n )","user":"5b8f77a8e4b0c0b3ffbd49fa"},{"problem":39,"code":"(fn [x y]\n  (mapcat list x y)\n)","user":"58e5180ae4b056aecfd47c82"},{"code":"(fn my-interleave [a b] (if (or (empty? a) (empty? b)) () (concat (list (first a) (first b)) (my-interleave (rest a) (rest b)))))","problem":39,"user":"524eebb0e4b0541d1855b7f7"},{"code":"(fn [x y]\n  (loop [l x r y ret []]\n    (if-not (and (seq l) (seq r))\n      ret\n      (recur (rest l) (rest r) (conj ret (first l) (first r)) ))))","problem":39,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn intlv [a b] (when-not(or (empty? a)(empty? b ))(cons (first a)(cons (first b) (intlv (rest a)(rest b))))))","problem":39,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [x y]\n  (loop [w1 x\n         w2 y\n         r []\n         ]\n    \n    (if (and (not= w1 []) (not= w2 []))\n      (recur (rest w1)\n             (rest w2)\n             (conj r (first w1) (first w2))\n             \n             )\n      r\n      )\n    )\n  )","problem":39,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn intle [x y] \n  (when (not (or (empty? x) (empty? y))) \n    (cons (first x) \n          (cons (first y)\n                (intle (rest x) (rest y))))))","problem":39,"user":"51ac61c8e4b09397d510976b"},{"problem":39,"code":"(fn [a b]\n   (->> (range (reduce min (map count [a b])))\n        (mapcat #(identity [(nth a %) (nth b %)]))))","user":"5711b532e4b09c608db70449"},{"problem":39,"code":"(let [col '()] (fn [a b] (flatten (map #(conj col %2 %1) a b))))","user":"56d6c18ee4b0ea9b8538f7d1"},{"code":"mapcat #(vector % %2)","problem":39,"user":"4ef4e5fa535dced4c769f242"},{"problem":39,"code":"(fn inter [col1 col2] \n  (if (or (= col1 nil) (= col2 nil))\n  []\n  (concat [(first col1) (first col2)] (inter (next col1) (next col2)))))","user":"55204412e4b08d5046aa8a5f"},{"problem":39,"code":"(fn two-seq-interl\n  ([x y] (when (and (not (empty? x)) (not (empty? y))) (into (conj (conj [] (first x)) (first y)) (two-seq-interl (rest x) (rest y))))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":39,"code":"(fn f [seq1 seq2]\n  ((fn [s1 s2 acc]\n    (if (or (empty? s1) (empty? s2))\n    acc\n    (recur\n      (rest s1)\n      (rest s2)\n      (concat acc (list (first s1) (first s2))))\n    )) seq1 seq2 '()))","user":"5681afaae4b0945ebc182a87"},{"problem":39,"code":"(fn foo [x y]\n\t\t\t\t(if (= 0 (* (count x) (count y)))\n\t\t\t\t\t\t\t\tnil\n\t\t\t\t\t\t\t\t(cons (first x) (cons (first y) (foo (rest x) (rest y))))\n\t\t\t\t)\n)","user":"575dda55e4b02ea11479938c"},{"code":"(fn [xs ys] \n  (flatten \n   (loop [a xs\n          b ys\n          r []]\n     (if (or (nil? a) (nil? b))\n       r\n       (recur (next a) (next b) (conj r [(first a) (first b)]))))))","problem":39,"user":"5164867fe4b003cf19fdde3e"},{"problem":39,"code":"(fn [l1, l2] (mapcat identity (map vector l1 l2)))","user":"54857657e4b0e286459a11ac"},{"code":"#(apply concat (map list %1 %2))","problem":39,"user":"4f04b66b535dcb61093f6bdd"},{"code":"#(reverse (flatten (seq (zipmap %2 %1))))","problem":39,"user":"50589113e4b06522596eba7f"},{"code":"(fn [c1 c2]\n  (apply concat\n    (map\n      #(list (nth c1 %) (nth c2 %))\n      (range \n        (min\n          (count c1)\n          (count c2))))))","problem":39,"user":"4db2f208535df7e46ed9b6c9"},{"problem":39,"code":"(fn solv [x y]\n\t(when (and (> (count x) 0) (> (count y) 0))\n\t\t(cons (first x) (cons (first y) (solv (rest x) (rest y))))))","user":"54296802e4b01498b1a71b38"},{"code":"#(apply concat (map list % %2))","problem":39,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"#( loop[x 0,y %,z %2,v []]\n    (if ( or (== x (count y)) (== x (count z)))\n           v\n           (recur (inc x)\n                         y\n                         z\n                        (conj v (nth y x) (nth z x)))))","problem":39,"user":"51c4690fe4b06b70b3e207e1"},{"problem":39,"code":"(fn ! [a b] (cond (empty? a) a \n                  (empty? b) b \n                  :else (cons (first a) (cons (first b) (! (rest a) (rest b))))))","user":"5d439775e4b07c84aa5ae696"},{"code":"(fn a [lst1 lst2] (if (or (empty? lst1) (empty? lst2))\n                    '()\n                    (cons (first lst1) (cons (first lst2) (a (rest lst1) (rest lst2))))))","problem":39,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn int [a b]\n  (cond (or (empty? a) (empty? b)) nil\n    :else (cons (first a) (cons (first b) (int (rest a) (rest b))))))","problem":39,"user":"4ecab3b7535d6d7199dd3709"},{"code":"(fn fobo [x y]\r\n  (when \r\n    (not (or (empty? x) (empty? y)))\r\n      (cons (first x) (cons (first y)\r\n        (fobo (rest x) (rest y))))))","problem":39,"user":"4ec7def0535d6d7199dd36e9"},{"problem":39,"code":"(fn [sec1 sec2]\n     (let [pair (fn [x y] (vector x y))]\n      (mapcat #(pair %1 %2) sec1 sec2)))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn [x y] (reverse (loop [xs x ys y result '()] (if (or (empty? xs) (empty? ys)) result (recur (rest xs) (rest ys) (cons (first ys) (cons (first xs) result)))))))","problem":39,"user":"4f122bfe535d64f603146426"},{"code":"(fn [first_vector second_vector]\n  (loop [[first_item & first_rest] first_vector\n         [second_item & second_rest] second_vector\n         result []]\n    (if (or (= first_item nil) (= second_item nil))\n      result\n      (recur first_rest second_rest (conj result first_item second_item)))))","problem":39,"user":"512f4ed7e4b0762be4c7aad9"},{"problem":39,"code":"(fn zipcat2 [xs ys]\n  (apply concat (map list xs ys)))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn [c1 c2] \r\n  (flatten (for [i (range (min (count c1) (count c2)))\r\n      :let [x (nth c1 i)\r\n            y (nth c2 i)]] (list x y))))","problem":39,"user":"4f038ed6535dcb61093f6b24"},{"problem":39,"code":"(fn inter [pa pb]\n  (loop [a pa \n         b pb \n         acc []]\n  (if (or (empty? a) (empty? b))\n    acc\n    (recur (rest a) (rest b) (conj acc (first a) (first b))))))","user":"58934052e4b00487982d523a"},{"problem":39,"code":"(fn [s u]\n  (loop [r s t u acc []]\n    (if (or (empty? r) (empty? t))\n      acc\n      (recur\n        (rest r)\n        (rest t)\n        (conj \n         (conj acc (first r))\n         (first t)\n        )\n       )\n     )\n    )\n  )","user":"5c0d0537e4b0bdcf453d173d"},{"problem":39,"code":"(fn [x y] (loop [output [] counter (min (count x) (count y)) firstx x secondx y]\n\t(if \n\t\t(zero? counter)\n\t\toutput\n\t\t(recur (conj output (first firstx) (first secondx)) (dec counter) (rest firstx) (rest secondx))\n\t)))","user":"53d5d24de4b0e771c302544a"},{"problem":39,"code":"(fn [x y] (flatten (map #(conj [] % %2) x y)))","user":"531c7bdde4b08068f379eda2"},{"code":"(fn il [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n      []\n      (concat [(first s1) (first s2)]\n              (il (rest s1) (rest s2)))))","problem":39,"user":"4f036fb3535dcb61093f6ac8"},{"problem":39,"code":"#(mapcat (fn [x y]\n           [x y])\n         %1 %2)","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":39,"code":"(fn\n  [sa sb]\n  (mapcat vector sa sb))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn [a b] (-> (map #(identity [%1 %2]) a b) flatten))","problem":39,"user":"50e3ec87e4b0463d32072486"},{"problem":39,"code":"(fn [in1 in2]\n  (loop [remaining1 in1 remaining2 in2 ans []]\n    (if (or (empty? remaining1) (empty? remaining2))\n      (lazy-seq ans)\n      (recur (rest remaining1) (rest remaining2) (conj ans (first remaining1) (first remaining2))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":39,"code":"(fn [seq1 seq2] (loop [suffix1 seq1 suffix2 seq2 zipped []] (if (or (empty? suffix1) (empty? suffix2)) zipped (recur (rest suffix1) (rest suffix2) (conj zipped (first suffix1) (first suffix2))))))","user":"5e1cc888e4b0dc959400853d"},{"problem":39,"code":"; (fn [c1 c2] (flatten (map #(list %1 %2) c1 c2)))\nmapcat vector","user":"5f81de6ce4b0c071e6c840f5"},{"code":"(fn ff [xs ys] (when (and (seq xs) (seq ys)) (cons (first xs) (cons (first ys) (ff (rest xs) (rest ys))))))","problem":39,"user":"51990df9e4b068aa333628fc"},{"code":"(fn ilv\n[c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (ilv (rest s1) (rest s2))))))))","problem":39,"user":"51eab308e4b0f1f103a0d150"},{"problem":39,"code":"(comp flatten vec #(map vector %1 %2))","user":"555f0789e4b0a2eb076a39bf"},{"code":"#(flatten ( map vector %1 %2))","problem":39,"user":"51d42f44e4b013d740b70ddb"},{"problem":39,"code":"#(mapcat (fn [& collz] (vec collz)) %1 %2)","user":"567c7fefe4b05957ce8c61bc"},{"code":"(fn my-interleave\n  [seq1 seq2]\n  (apply concat\n         (map #(vector %1 %2)\n                 seq1\n                 seq2)))","problem":39,"user":"4ebf11bc535dfed6da9c6d9c"},{"problem":39,"code":"(fn cmb [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2) ]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n            (cmb (rest s1) (rest s2)))))))","user":"558ffd47e4b0277789237669"},{"problem":39,"code":"#(reduce concat (map (fn [a b] [a b]) %1 %2))","user":"555881f5e4b0deb715856e2c"},{"problem":39,"code":"(fn gethead [a b]\n           (if\n             (and\n               (not (empty? a))\n               (not (empty? b)))\n             (concat (list (first a) (first b))\n               (gethead (rest a) (rest b)))))","user":"5195fadee4b04c0af7ff3c11"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq1' seq1\n         seq2' seq2\n         result []]\n    (let [[head1 & tail1] seq1'\n          [head2 & tail2] seq2']\n      (if (or (empty? seq1') (empty? seq2'))\n        result\n        (recur tail1 tail2 (conj result head1 head2))))))","user":"567bf820e4b05957ce8c61ad"},{"problem":39,"code":"; My solution \n(fn [seq-1 seq-2] \n  (flatten (map #(conj [] %1 %2) seq-1 seq-2)))","user":"5f3ee0d9e4b004f08c61c55c"},{"problem":39,"code":"#( flatten ( map list %1 %2 ))","user":"5d5c6675e4b09db18d4482ec"},{"code":"(fn interl [c1 c2]\n  (if (or (empty? c1) (empty? c2))\n    '()\n    (conj (interl (rest c1) (rest c2)) \n    (first c2) (first c1))))","problem":39,"user":"50aab057e4b056ee0193586b"},{"problem":39,"code":"(fn foo [xs ys]\n  (let [x1 (first xs) y1 (first ys)]\n    (when (and x1 y1)\n      (cons x1\n            (cons y1\n                  (foo (rest xs) (rest ys)))))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn intlv [initial-x initial-y]\n  (loop [res []\n        x   initial-x\n        y   initial-y]\n  (if (or (empty? x) (empty? y))\n          res\n    \t  (recur (conj res (first x) (first y))\n                 (rest x)\n                 (rest y)))))","problem":39,"user":"52ed7458e4b0a18b0f5dd9ed"},{"problem":39,"code":"#((fn [c1 c2 re]\n           (if (or (empty? c1) (empty? c2)) \n             re\n             (recur (rest c1) (rest c2) (conj re (first c1) (first c2))))) \n         %1 %2 [])","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(partial\n   (fn [acc [a & ma] [b & mb]]\n     (if (or (nil? a) (nil? b))\n       acc\n       (recur (conj acc a b) ma mb)))\n  [])","problem":39,"user":"4fa1183fe4b0dcca54ed6d57"},{"code":"(fn i [a b]\n  (when (and (seq a) (seq b))\n    (concat [(first a) (first b)]\n       (i (rest a) (rest b)))))","problem":39,"user":"4e8df08f535d65386fec213e"},{"problem":39,"code":"(fn [s1 s2] (loop [s1 s1 s2 s2 res []]\n                   (if-not (and (first s1) (first s2)) \n                     res\n                     (recur (rest s1) (rest s2)\n                            (conj res (first s1) (first s2))\n                            )\n                     )))","user":"5b7ec039e4b047b03b20375d"},{"code":"(fn inter [& s]\n  (apply mapcat list s))","problem":39,"user":"51b73a91e4b0d906fcd71d33"},{"problem":39,"code":"(fn [a1 a2]\n     (reverse (reduce (fn [fin val] (conj fin (get a1 val ) (get a2 val))) '() (take-while (partial > (min (count a1) (count a2))) (iterate inc 0))))\n    \n    )\n ;zipmap is the way to go","user":"5ac92dc3e4b0e27600da77bf"},{"problem":39,"code":"(fn combine [a b]                                                                          \n  (if (or (empty? a) (empty? b)) ()\n    (concat [(first a) (first b)] (combine (rest a) (rest b)))))","user":"5f6b5d83e4b02876ed9fd050"},{"problem":39,"code":"(fn   [x y]\n  (if (= y [5])\n    [1 5]\n    (flatten (keep-indexed #(list %2 (get y %1)) x)))\n  )","user":"54e3bd3fe4b024c67c0cf7e0"},{"code":"(fn [sq1, sq2]\r\n  (loop [src1 sq1, src2 sq2, dest []]\r\n    (if (and (seq src1) (seq src2))\r\n      (recur\r\n        (rest src1)\r\n        (rest src2)\r\n        (conj dest (first src1) (first src2)))\r\n       dest)))","problem":39,"user":"4fb4ca71e4b081705acca2b0"},{"problem":39,"code":"(fn [listy1 listy2]\n  (loop [l1 listy1 l2 listy2 newl '()]\n    (if (or (empty? l1) (empty? l2))\n      (reverse newl)\n      (recur (rest l1) (rest l2) (conj newl (first l1) (first l2))))))","user":"59369515e4b02506e01a297e"},{"problem":39,"code":"(fn [seqa seqb] \n\t(loop [out [] seqa seqa seqb seqb]\n    \t(if (= [] seqa seqb) out\n          \n          \t(let [a (first seqa) b (first seqb)]\n          \n        \t(recur \n             \t(if (and a b)\n             \t\t(conj out (first seqa) (first seqb))\n                  \tout\n                )\n             \t(rest seqa) \n             \t(rest seqb)\n\n                )\n\t\t\t)\n\t\t)\n\t)                 \n)","user":"5a5f91d4e4b0512ff01cd94a"},{"problem":39,"code":"#(loop [x 0 result []] (if (>= x (min (count %) (count %2))) result (recur (+ x 1) (conj result (% x) (%2 x)))))","user":"59adec09e4b0e1f4e384c897"},{"problem":39,"code":"(fn combine-lists [a b]\n  (let [traverse-and-combine \n      (fn [acc a b] \n          (cond (empty? a) acc\n                (empty? b) acc\n                :else (recur \n                          (conj acc (first a) (first b))\n                          (rest a)\n                          (rest b))))]\n    (traverse-and-combine [] a b)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"code":"(fn i [a b] \n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a) (cons (first b) (lazy-seq (i (rest a) (rest b)))))))","problem":39,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":39,"code":"(fn my-interleave [coll-a coll-b]\n  (loop [result []\n         [a & as :as inter-coll-a] coll-a\n         [b & bs :as inter-coll-b] coll-b]\n    (if (or (empty? inter-coll-a) (empty? inter-coll-b))\n      result\n      (recur (conj result a b) as bs))))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn [a0 b0]\n  (loop [a a0 b b0 result '()]\n    (if (and (seq a) (seq b))\n      (recur\n        (rest a)\n        (rest b)\n        (conj result (first a) (first b)))\n      (reverse result))))","problem":39,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1 c2 c2 res[]]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (let [f1 (first c1)\n            f2 (first c2)]\n        (recur (rest c1) (rest c2) (conj res f1 f2))))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn ! ([x y] (! x y []))   ([x y m] (if (or (empty? x) (empty? y)) m  (! (rest x) (rest y) (concat m [(first x)] [(first y)] )))   ))","problem":39,"user":"52faec2ee4b047fd55837004"},{"problem":39,"code":"(fn -interleave [ks vs]\n  ((fn mysoc [acc i-keys i-vals]\n    (cond\n      (> 1 (count i-keys)) acc\n      (> 1 (count i-vals)) acc\n      (=    1 (count i-keys)) \n        (concat acc [(first i-keys) (first i-vals)])\n      (not= 1 (count i-keys)) \n        (concat acc \n               [(first i-keys) (first i-vals)] \n               (mysoc acc (rest i-keys) (rest i-vals)))\n    )\n  ) () ks vs)\n)","user":"546113ffe4b01be26fd74699"},{"code":"(fn [s1 s2]\n  \t(letfn [(inter [s1 s2 r] (cond (empty? s1) r\n                                   (empty? s2) r\n                                   :else (inter (rest s1) (rest s2) (conj (conj r (first s1)) (first s2)))))]\n      (inter (seq s1) (seq s2) [])))","problem":39,"user":"51672d15e4b079759a74a5e7"},{"code":"(fn [s1 s2]\n  (letfn [(rec [r1 r2 result]\n               (if (or (empty? r1) (empty? r2))\n                 result\n                 (rec (rest r1) (rest r2) (conj result (first r1) (first r2)))))]\n    (rec s1 s2 [])))","problem":39,"user":"5298c83de4b02ebb4ef75064"},{"problem":39,"code":"(fn tangle [xs ys]\n  (mapcat #(list %1 %2) xs ys))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn asdf [x y] (flatten (map #(cons %1 [%2]) x y)))","problem":39,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn [s1 s2]\n  (loop [r []\n         s1-left s1\n         s2-left s2]\n    (if (or (empty? s1-left)\n            (empty? s2-left))\n      r\n      (recur (conj r (first s1-left) (first s2-left))\n             (rest s1-left)\n             (rest s2-left)))))","problem":39,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn ileave2 [coll1 coll2]\n\t(if (and (coll? coll1) (coll? coll2))\n\t\t(concat [(first coll1) (first coll2)] (ileave2 (next coll1) (next coll2)))))","problem":39,"user":"51f4d46ee4b0fca5e8b48243"},{"code":"mapcat #(vector %1 %2)","problem":39,"user":"4e5867d1535d8a8b8723a291"},{"problem":39,"code":"(fn [& xs] \n  (\treduce\n    #(apply conj %1 (map (fn [x] (x %2)) xs) )\n    []\n  \t(->> xs (map count) (apply min) range) \n  )\n)","user":"5d9e7971e4b000c986472bc1"},{"problem":39,"code":"(fn [x y] (flatten (map #(into '() [%2 %1]) x y)))","user":"5b857411e4b047b03b2037ce"},{"code":"(fn f [c1 c2] \n  (when (and (seq c1) (seq c2)) \n    (cons (first c1) \n          (cons (first c2) \n                (f (rest c1) (rest c2))))))","problem":39,"user":"518b761ae4b0f028e99addee"},{"problem":39,"code":"(fn my-merge [s0 s1]\n  (if (or (empty? s0) (empty? s1)) []\n      (cons (first s0) (cons (first s1) (my-merge (rest s0) (rest s1))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [xs ys]\n  ((fn impl [xs ys rs n]\n    (if (= n 0)\n      (reverse rs)\n      (if (even? (count rs))\n        (impl (next xs) ys (cons (first xs) rs) (- n 1))\n        (impl xs (next ys) (cons (first ys) rs) (- n 1)))))\n   xs ys [] (* 2 (min (count xs) (count ys)))))","problem":39,"user":"521392bce4b0d32679a5065e"},{"problem":39,"code":"(fn [x y]\n   (loop [r []\n          [h1 & r1] x\n          [h2 & r2] y]\n     (if (or (nil? h1) (nil? h2))\n       r\n       (recur (conj r h1 h2)\n              r1\n              r2))))","user":"554884d4e4b0a04f7929955c"},{"code":"(fn ileave [seq1 seq2]\n  (lazy-seq \n   (when\n    (and (seq seq1) (seq seq2))\n    (cons (first (seq seq1)) (cons (first (seq seq2))\n                             (ileave (rest (seq seq1)) (rest (seq seq2))))))))","problem":39,"user":"4fecebe1e4b0681fd128dcac"},{"problem":39,"code":"(fn  [list1 list2]\n    (let [interleave-length (min (count list1) (count list2))]\n      (apply concat (map (fn [x] (concat (list (nth list1 x)) (list (nth list2 x)))) (range interleave-length)))\n    )\n  )","user":"54180369e4b01498b1a71a13"},{"problem":39,"code":"(fn inter [c1 c2]\n    (let [s1 (seq c1)\n          s2 (seq c2)]\n      (when (and s1 s2)\n        (concat (list (first s1) (first s2)) (inter (rest s1) (rest s2))))))","user":"5a99b766e4b0d174b936c7a8"},{"problem":39,"code":"(fn inter [coll1 coll2] \n  (flatten (if (and (not-empty coll1) (not-empty coll2))\n  \t(conj (conj [] (first coll1) (first coll2)) (inter (rest coll1) (rest coll2)))\n    )))","user":"552689cfe4b0ffed3738f91e"},{"code":"(fn il [ca cb]\n  (let [a (seq ca) b (seq cb)]\n  (when (and a b) \n   (cons (first a) (cons (first b) (il (next a) (next b)))\n))))","problem":39,"user":"4e5cddd6535d8a8b8723a2c5"},{"problem":39,"code":"(fn [seq-1 seq-2] (loop [acc []\n                         s1 seq-1 \n                         s2 seq-2]\n                    (if (some empty? [s1 s2])\n                      acc\n                      (recur (conj acc (first s1) (first s2))\n                             (rest s1)\n                             (rest s2)))))","user":"56b6a50ae4b0982f16b37e3c"},{"code":"(comp (partial apply concat) reverse zipmap)","problem":39,"user":"4ee75ec2535d93acb0a66867"},{"problem":39,"code":"(fn intrlv [& seqs]\n  (apply mapcat list seqs))","user":"53b39d82e4b047364c0444a6"},{"problem":39,"code":"(fn [x y]\n  (apply concat (map #(list %1 %2) x y)))","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn [r l]\r\n  (reverse (loop [cnt (min (count l) (count r))\r\n        result []]\r\n    (if (= cnt 0)\r\n      result\r\n      (recur (dec cnt) (conj result (last (take cnt l)) (last (take cnt r))))\r\n    )\r\n  ))\r\n)","problem":39,"user":"4dd579b5535dae65d5c462ea"},{"problem":39,"code":"(fn interleave2 [xs ys]\n  (if (or (empty? xs) (empty? ys)) ()\n      (cons (first xs) (cons (first ys) (interleave2 (rest xs) (rest ys))))))","user":"56228d00e4b03f08ee9a9227"},{"code":"(fn [x y] (reduce into [] (map vector x y)))","problem":39,"user":"508ba469e4b0be79e5b189c8"},{"problem":39,"code":"(fn [x y]\n  (loop [i 0\n         result []]\n    (if (or (>= i (count x)) (>= i (count y)))\n      result\n      (let [a (get x i)\n            b (get y i)\n            iter (inc i)]\n        (recur iter (into result [a b]))))))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":39,"code":"(fn rec [a b]\n  (lazy-seq   ;;; lazyseq regresa ISeq o nil\n   (if (= (or (empty? a) (empty? b)) false)\n     (cons (first a) (cons (first b)\n                            (rec (rest a) (rest b))\n                           )\n           )\n     )\n   )\n  )","user":"6075c214e4b069485764de5b"},{"code":"(fn [x y] (flatten (apply concat (map #(list % %2) x y))))","problem":39,"user":"504e8e48e4b069badc5a33b3"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (loop [lst_a lst1\n         lst_b lst2\n         result ()]\n    (cond\n      (or (empty? lst_a) (empty? lst_b)) (reverse result)\n      :else (recur (rest lst_a) (rest lst_b)\n                   (cons (first lst_b)(cons (first lst_a) result))))))","user":"59dd387be4b0a0ac046f2502"},{"problem":39,"code":"(fn inter [x y] (lazy-seq (when-let [c (seq x)] (when-let [d (seq y)] (cons (first x) (cons (first y) (inter (rest x) (rest y))))))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":39,"code":"(fn inter [left right]\n  (let [nargs (min (count left) (count right))]\n    (mapcat (fn [a b] [a b]) (take nargs left) (take nargs right))\n    )\n)","user":"5412ef7ee4b01498b1a719da"},{"problem":39,"code":"(fn f [a b]\n  (cond\n  \t(empty? a) '()\n  \t(empty? b) '()\n    :else (concat [(first a) (first b)] (f (rest a) (rest b)))\n   ))","user":"59449aa2e4b0b03edd0057ad"},{"code":"(fn [& xs] (flatten (apply map vector xs)))","problem":39,"user":"501d52a8e4b066e56b9d0b20"},{"code":"mapcat (fn [x y] (flatten [x y]))","problem":39,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn ilv [sa sb]\n  (let [pairs (map vector sa sb)]\n    ;; lazy\n    ((fn f [sv]\n      (when-not (empty? sv)\n        (lazy-seq (concat (first sv) (f (rest sv))))))\n      pairs)\n    ;; concise\n    (apply concat pairs) \n    )\n  )","problem":39,"user":"50901b2ee4b0ea685a20f774"},{"problem":39,"code":"(fn test [a b]\n  (if (or (empty? a)\n          (empty? b))\n    nil\n    (concat (list (first a) (first b))\n            (test (rest a)\n                  (rest b)))))","user":"579332c2e4b0e215f87e8452"},{"problem":39,"code":"#(reduce (fn [coll pair] (concat coll pair)) '() (map (fn [x y] (cons x (list y))) %1 %2))","user":"607a1523e4b0a637ed78036a"},{"code":"(fn my-interleave [seq1 seq2]\n  (when (and (> (count seq1) 0) (> (count seq2) 0))\n    (cons (first seq1) (cons (first seq2) (my-interleave (rest seq1) (rest seq2))))))","problem":39,"user":"506f5f26e4b082ae7d1032c8"},{"code":"#(-> (map vector %1 %2) flatten)","problem":39,"user":"5195b8cce4b04c0af7ff3c08"},{"code":"(fn [a b] (flatten (map #(vector % %2) a b)))","problem":39,"user":"523b1a65e4b02f719975bdbd"},{"code":"(fn [a b]\n  (reduce concat (map #(list (nth a %) (nth b %))\n    (range 0\n      (let [x (count a) y (count b)] (if (< x y) x y))))))","problem":39,"user":"4e720985535d5021c1a89655"},{"problem":39,"code":"(fn [l r]\n  (loop [f []\n         lm l\n         rm r]\n    (if (or (nil? lm)\n            (nil? rm))\n      f\n      (recur (conj (conj f (first lm)) (first rm)) (next lm) (next rm)))))","user":"56051095e4b08b23635d3162"},{"code":"(fn _interleave\n  [s1 s2]\n  (if (or (nil? (first (rest s1)))\n          (nil? (first (rest s2))))\n    (vector (first s1) (first s2))\n    (cons (first s1) (cons (first s2) (_interleave (rest s1) (rest s2))))))","problem":39,"user":"5263c44fe4b03e8d9a4a70b8"},{"code":"(fn my-interleave [c1 c2]\n  (lazy-seq\n    (if (and (seq c1) (seq c2))\n      (cons (first c1)\n            (cons (first c2)\n                  (my-interleave (rest c1) (rest c2)))))))","problem":39,"user":"4ec75077535d6d7199dd36e0"},{"code":"(letfn [(iter [acc a b]\n           (if (and (not (empty? a)) (not (empty? b)))\n             (iter (concat acc (list (first a) (first b))) (rest a) (rest b))\n             acc))]\n    #(iter () %1 %2))","problem":39,"user":"5141abf1e4b02fd87f5064c3"},{"problem":39,"code":"(fn [a b] (flatten(map list a b)))","user":"553fe819e4b0a04f792994fc"},{"code":"(fn inter [z q]\n  (let [x (seq z) y (seq q)]\n  (when (and x y)\n    (cons (first x) (cons (first y)\n                          (inter (rest x) (rest y)))))))","problem":39,"user":"52cf5450e4b07d0d72b273a4"},{"problem":39,"code":"#(let [n (min (count %1) (count %2))]\n    (flatten (for [i (range n)] [(nth %1 i) (nth %2 i)] )) )","user":"54e51c7be4b024c67c0cf7f7"},{"problem":39,"code":"(fn [s1 s2]\n    (apply concat (apply map list (list s1 s2))))","user":"56a94562e4b07966d5a8a074"},{"problem":39,"code":"(fn [col1 col2]\n  (let [count1 (count col1)\n        count2 (count col2)\n        counts (if (> count1 count2)\n                 count2\n                 count1)]\n    (loop [x 0 acc []]\n      (if (< x counts)\n        (recur (inc x) (conj acc (nth col1 x) (nth col2 x)))\n        acc))))","user":"5db658ebe4b010eb3c36cd39"},{"problem":39,"code":"(fn f [xs ys] (if (and\n                     ((comp not empty?) xs)\n                     ((comp not empty?) ys)\n                     )\n                 (conj (f (rest xs) (rest ys)) (first ys) (first xs))\n                 '()))","user":"5745bb9fe4b009280f9f2b54"},{"code":"(fn f [x1 x2]\n  (if-not\n    (or\n      (zero? (count x1))\n      (zero? (count x2))\n      )\n    (conj\n      (f (rest x1) (rest x2))\n      (first x2)\n      (first x1)\n      )\n    )\n  )","problem":39,"user":"52ae886de4b0c58976d9acab"},{"code":"mapcat #(apply list %&)","problem":39,"user":"4ff50604e4b0678c553fc365"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 result []]\n   (if (or (empty? s1) (empty? s2))\n     result\n     (recur (rest s1) (rest s2) (conj (conj result (first s1)) (first s2)))\n     )\n   )","user":"569ef93de4b0542e1f8d148b"},{"problem":39,"code":"(fn [a-seq b-seq]\n        (let [cnt (min (count a-seq) (count b-seq))]\n            (loop [cnt cnt res '() f-coll a-seq s-coll b-seq]\n                (if (= cnt 0)\n                    (reverse res)\n                    (recur (dec cnt) \n                           (cons (first s-coll) (cons (first f-coll) res)) \n                           (rest f-coll) \n                           (rest s-coll))))))","user":"58354124e4b089d5ab817cd6"},{"problem":39,"code":"(fn [a b]\n  (let [arr []\n        cnt (min (count a) (count b))]\n    (loop [res arr\n           n cnt\n           ma a\n           mb b]\n      (if (= n 0)\n        res\n        (recur (conj (conj res (first ma)) (first mb))\n               (dec n)\n               (rest ma)\n               (rest mb)\n        )\n      )\n    )\n    \n  )\n)","user":"54d35746e4b0e8a36923e606"},{"code":"(fn myInterleave\n    ([x y z]\n        (if (or (empty? x) (empty? y))\n            z\n        (myInterleave (rest x) (rest y) (conj (conj z (first x)) (first y)))))\n    ([x y] (myInterleave x y [])))","problem":39,"user":"4f03b3fb535dcb61093f6b52"},{"problem":39,"code":"(fn [l1 l2] ((fn count-down [remaining-length] (cond\n                                                (> remaining-length 0) (concat (count-down (- remaining-length 1)) [(get l1 (- remaining-length 1)) (get l2 (- remaining-length 1))])\n                                                :else []\n                                                )) (apply min (map count [l1 l2]))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"#(loop [r1 %1 r2 %2 acc ()] (if (or (= r1 ()) (= r2 ())) (reverse acc) (recur (rest r1) (rest r2) (conj acc (first r1) (first r2)))))","problem":39,"user":"4f40f055e4b0e243712b1fc2"},{"code":"(fn interl [xs ys]\n  (let [xss (seq xs), yss (seq ys)]\n  \t(when (and xss yss)\n    \t(cons (first xss) (cons (first yss) (interl (rest xss) (rest yss)))))))","problem":39,"user":"517bf28de4b07ef0e56148d5"},{"problem":39,"code":"(fn intleave ([l1 l2] (intleave l1 l2 [] (min (count l1) (count l2)))) ([l1 l2 res n] (if (= n 0) res (recur (rest l1) (rest l2) (conj res (first l1) (first l2)) (dec n))))  )","user":"5e546e20e4b027a2e10ac0eb"},{"problem":39,"code":"(fn interleave_[x y] (lazy-seq (when-let[x1 (seq x)] (when-let[y1 (seq y)] (cons (first x1) (cons (first y1) (interleave_ (rest x) (rest y))))))))","user":"574ed2f7e4b02ea11479924a"},{"code":"(fn il [xs ys]\n  (loop [as xs\n         bs ys\n         ild []]\n    (cond \n      (empty? as) ild\n      (empty? bs) ild\n      :a (recur (rest as) (rest bs) (into ild [(first as) (first bs)])))))","problem":39,"user":"4ff35d46e4b0678c553fc34f"},{"code":"(fn func [a b] \n  (when (and (seq a) (seq b)) \n    (cons (first a)\n          (cons (first b) \n                (func (rest a) (rest b))))))","problem":39,"user":"5262c73fe4b03e8d9a4a7098"},{"problem":39,"code":"(fn [& colls]\n  (apply concat (apply map vector colls)))\n  ;(apply concat (map vector colls))) # this needs apply because & turns colls into a collection which means that vector can't handle it properly?\n\n;mapcat vector","user":"5b6f27dce4b0c6492753e7d9"},{"code":"(fn [a b]\n  (loop [a a b b acc []]\n    (if \n      (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","problem":39,"user":"4f592f83e4b0030a34fb2ad2"},{"problem":39,"code":"(fn bk-interleave\n  [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 acc []]\n    (let [fc1 (first coll1)\n          fc2 (first coll2)]\n      (if (or (empty? coll1) (empty? coll2))\n        acc\n        (recur (rest coll1) (rest coll2) (conj acc fc1 fc2))))))","user":"5426fb8fe4b01498b1a71b1f"},{"problem":39,"code":"(fn [m1 m2]\n  (flatten (map (fn [v1 v2] [v1 v2]) m1 m2)))","user":"516c3472e4b06f078fab251c"},{"code":"#(flatten (map vector %1 %2))","problem":39,"user":"4e7c4290535db169f9c796bc"},{"code":"(fn ileave [coll1 coll2]\n  (lazy-seq\n    (when-let [xs (seq coll1)]\n      (when-let [ys (seq coll2)]\n        (cons (first xs) (cons (first ys) (ileave (rest xs) (rest ys))))))))","problem":39,"user":"4f12ab23535d64f603146429"},{"code":"#(loop [a %\n         b %2\n         acc []]\n   (if (or (zero? (count a)) (zero? (count b)))\n      acc\n      (recur (rest a)\n             (rest b)\n             (into acc [(first a) (first b)]))))","problem":39,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn [l r]\n  (reduce concat (map (fn [a b] [a b]) l r)))","problem":39,"user":"5027fc0ce4b01614d1633ff2"},{"problem":39,"code":"(fn [s1 s2] (flatten (map #(conj '() %2 %1) s1 s2)))","user":"55ad59cde4b03311e7b732a7"},{"problem":39,"code":"(fn\n  [x y]\n  (loop [x x y y result []]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (conj result (first x) (first y))))))","user":"59c4d93fe4b0a024fb6ae507"},{"code":"(fn leave\n  ([s1 s2] (leave s1 s2 nil))\n  ([s1 s2 rez] (if \n                 (or (empty? s1) (empty? s2))\n                 rez\n                 (leave (rest s1) (rest s2) (reverse (conj (reverse rez) (first s1) (first s2)))))))","problem":39,"user":"51d96ad0e4b02ceefd94774f"},{"problem":39,"code":"(fn weave [c1 c2]\n  (if (and (seq c1) (seq c2))\n    (cons (first c1) (cons (first c2)\n                           (weave (rest c1) (rest c2))))\n    )\n  )","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"(fn [s1 s2]\n  (loop [s1p s1\n        s2p s2\n        results '()]\n    (if (or (empty? s1p) (empty? s2p))\n      (reverse results)\n      (recur (next s1p) (next s2p) (conj results (first s1p) (first s2p))))))","problem":39,"user":"4efb92ce535dced4c769f27a"},{"problem":39,"code":"(fn [l1 l2] (mapcat (fn [x y] [x y]) l1 l2))","user":"550aeddae4b06e50f9beb135"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         acc []]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur (rest xs)\n             (rest ys)\n             (conj acc (first xs) (first ys))))))","user":"540961e9e4b0addc1aec66db"},{"code":"(fn [as bs]\r\n    (flatten  (map #(conj [] %1 %2) as bs)))","problem":39,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn foo [s1 s2]\n  (concat (list (first s1) (first s2)) \n    (if (or (empty? (rest s1)) (empty? (rest s2))) nil\n      (foo (rest s1) (rest s2)))))","problem":39,"user":"504ec46de4b069badc5a33c8"},{"problem":39,"code":"(fn [left right]\n  (loop [l left r right result []]\n    (if (or (empty? l)\n            (empty? r))\n      result\n      (recur (rest l) (rest r) (conj result (first l) (first r))))))","user":"5cbb0436e4b026601754b9cc"},{"problem":39,"code":"(fn\n  [sx sy]\n  (mapcat list sx sy))","user":"56cdda13e4b0ea9b8538f752"},{"problem":39,"code":"(fn ii  ([s1 s2] (ii s1 s2 []))\n   ([s1 s2 r] (println r)\n    (if (and (first s1) (first s2))\n      (ii (rest  s1) (rest  s2) (conj r (first s1) (first s2)))\n                r)))","user":"549af5b1e4b0f3d1d8e70f76"},{"problem":39,"code":"(fn [i1 i2]\n      (loop [i (min (count i1) (count i2))\n             s1 i1\n             s2 i2\n             a '()]\n            (if (= 0 i)\n              (reverse (flatten a))\n              (recur (dec i) (next s1) (next s2) (cons [(first s2) (first s1)] a))\n              )\n\n        )\n\n  )","user":"5683b67ce4b0945ebc182a9f"},{"code":"(fn [f s] (\n  (fn re [f s res] (\n    if (or (= nil (first f)) (= nil (first s)))\n       res\n       (re (rest f) (rest s) (concat res (list (first f) (first s))))\n    )) f s '()\n  )\n)","problem":39,"user":"4fcf5292e4b03432b189f40e"},{"problem":39,"code":"(fn i\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (i (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply i (map rest ss))))))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":39,"code":"#(letfn [(r [s0 s1]                                                                                                                                     \n    (if (or (empty? s0) (empty? s1))                                                                                            \n        []                                                                                                                                              \n        (concat (vector (first s0) (first s1)) (r (rest s0) (rest s1)))))]                                                  \n    (r %1 %2))","user":"558b50d5e4b027778923762b"},{"code":"(fn intrlv [left right]\n  (loop [res []\n         l left\n         r right] \n    (if (or (empty? l) (empty? r))\n      res\n      (recur (conj res (first l) (first r)) (rest l) (rest r)))))","problem":39,"user":"53710c09e4b0fc7073fd6ea5"},{"problem":39,"code":"(fn intSeq [[x & xs] [y & ys]] (if (and xs ys) (concat [x y] (intSeq xs ys)) [x y]))","user":"585e7c60e4b0f14aab7c87b3"},{"problem":39,"code":"(fn myinterleave [c1 c2] (when (and (seq c1) (seq c2)) (cons (first c1) (cons (first c2) (myinterleave (rest c1) (rest c2))))))","user":"54524dbbe4b0e397800069bd"},{"problem":39,"code":"(fn ntrlv [c1 c2] \n  (lazy-seq \n   (let [s1 (seq c1 ) s2 (seq c2)] \n     (when (and s1 s2) \n       (cons (first s1) \n             (cons (first s2) \n                   (ntrlv (rest s1) (rest s2))))))))","user":"54b331dbe4b09f271ff37d37"},{"code":"(fn [s1 s2] \n  (loop [l1 s1\n         l2 s2\n         res '()]\n    (if (empty? l1) res\n      (if (empty? l2) res\n        (recur (rest l1) (rest l2)\n               (concat res [(first l1)] [(first l2)]))))))","problem":39,"user":"533ee560e4b085b17e897d98"},{"code":"(fn [x y]\n  (loop [coll1 x coll2 y answer []]\n    (if (or (empty? coll1) (empty? coll2))\n      answer\n      (recur (rest coll1) (rest coll2)\n         (conj answer (first coll1) (first coll2))\n      )\n    )\n  )\n)","problem":39,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"#(loop [interleaved []\n         x %1\n         y %2]\n    (if (or (empty? x) (empty? y))\n      interleaved\n      (recur \n       (conj (conj interleaved (first x)) (first y)) \n       (rest x) \n       (rest y))))","problem":39,"user":"51ae350fe4b09397d5109790"},{"code":"(fn [l1 l2](mapcat #(list % %2) l1 l2))","problem":39,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":39,"code":"(fn [xs ys]\n  (apply concat (map vector xs ys\n  ))\n)","user":"5a429e40e4b0447ef91cc5f9"},{"problem":39,"code":"#(flatten(into () (zipmap %1 %2)))","user":"554bc64ae4b0a04f79299598"},{"code":"(fn func [l1 l2]\n  (if (or (empty? l1) (empty? l2)) '()\n      (cons (first l1) (cons (first l2) (func (rest l1) (rest l2))))))","problem":39,"user":"50555c06e4b0ce54f56f03fa"},{"problem":39,"code":"(fn [x y]\n  (mapcat (fn [one two] (list one two)) x y))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":39,"code":"(fn [seq-a seq-b]\n   (flatten (map (fn [elem-a elem-b]\n                   (when (and (not (nil? elem-a))\n                              (not (nil? elem-b)))\n                     (list elem-a elem-b)))\n                seq-a\n                seq-b)))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":39,"code":"#(mapcat  vector %1 %2)","user":"571bc0a1e4b07c98581c3b6c"},{"problem":39,"code":"#(loop [a %1\n          b %2\n          s []]\n    (if (or (empty? a) (empty? b))\n      s\n      (recur (rest a) (rest b) (conj s (first a) (first b)))))","user":"579aff09e4b05b1deef9ade7"},{"problem":39,"code":"(fn myinterleave\n  [l1 l2]\n  (let [[h1 & t1] l1 [h2 & t2] l2]\n    (if (empty? t1)\n      (conj (conj t1 h2) h1)\n      (if (empty? t2)\n        (conj (conj t2 h2) h1)\n        (conj (conj (myinterleave t1 t2) h2) h1)\n        )\n      )\n    )\n  )","user":"54410a71e4b032a45b869367"},{"code":"(fn [a, b] \n  (mapcat (fn [x, y] (list x y)) a b))","problem":39,"user":"522a1248e4b0590a43906cf3"},{"problem":39,"code":"(fn [numbers abc]\n  (loop [seq-1 numbers \n         seq-2 abc \n         new-list []]\n    (if (or (empty? seq-1) \n            (empty? seq-2))\n      new-list\n      (recur \n       (rest seq-1) \n       (rest seq-2) \n       (conj new-list \n             (first seq-1) \n             (first seq-2))))))","user":"550174b5e4b07d26eda61d73"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b) )\n               []\n               (concat [(first a) (first b)] (f (rest a) (rest b)) )))","user":"55805a2ee4b05c286339e0ea"},{"code":"(fn interleavex [xs vs]\n\t(let [x (first xs)\n        v (first vs)]\n    (if (and x v)\n      (into [x v] (interleavex (next xs) (next vs)))\n      [])))","problem":39,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":39,"code":"(fn myinterleave [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (conj (myinterleave (rest x) (rest y)) (first y) (first x))))","user":"54299d4be4b01498b1a71b3d"},{"code":"(fn a [x y] (if (or (empty? x) (empty? y)) nil (conj (a (rest x) (rest y)) (first y) (first x))))","problem":39,"user":"4dbecb06535d020aff1edf6a"},{"code":"(fn [x y] \n  (loop [a x b y result '()] \n   (if (or (empty? a) (empty? b)) \n    (reverse result)\n    (recur (rest a) (rest b)\n           (concat (list (first b) (first a)) result)))))","problem":39,"user":"52616198e4b03e8d9a4a705e"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         res []]\n    (if (or (empty? s1)\n            (empty? s2))\n      res\n      (recur (rest s1) (rest s2) (concat res (vector (first s1) (first s2)))))))","user":"5d64013ce4b0c9e5857d502d"},{"code":"(fn [xs ys]\n   (mapcat (fn [x y] (list x y)) xs ys)\n )","problem":39,"user":"50217818e4b00bba4502f7a7"},{"problem":39,"code":"#(loop [coll1 %1\n            coll2 %2\n            result ()]\n         (if (or (empty? coll1) (empty? coll2))\n             result\n             (recur (drop 1 coll1) (drop 1 coll2) (concat result (list (first coll1)) (list (first coll2))))\n             ))","user":"6074e278e4b069485764de51"},{"code":"; mapcat list - is the way to do it :)\n#(flatten \n  (for [n (range (apply min (map count %&)))] \n    (for [x %& :let [y (nth x n)]] y)))","problem":39,"user":"50de11b2e4b061dbdced7217"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [cur1 s1\n         cur2 s2\n         acc '()]\n    (if (and (seq cur1) (seq cur2))\n      (recur (rest cur1) (rest cur2) (conj (conj acc (first cur1)) (first cur2)))\n      (reverse acc))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":39,"code":"(fn [c1 c2]\n    (loop [s1 (seq c1) s2 (seq c2) acc []]\n      (if (and s1 s2)\n        (recur (next s1) (next s2)\n               (conj acc (first s1) (first s2)))\n        acc)))","user":"606b16b8e4b069485764ddf7"},{"problem":39,"code":"(fn [xs ys]\n  (mapcat identity\n          (map #(cons % (cons %2 nil)) xs ys)))","user":"5488872ee4b0e286459a11d3"},{"code":"(fn self [[x & xs] [y & ys]]\n  (if (some nil? [x y])\n    []\n    (concat [x y] (self xs ys))))","problem":39,"user":"524b90fae4b09eba1c0223df"},{"code":"(fn [l1 l2]\r\n  (loop [l1 l1\r\n         l2 l2\r\n         r '()]\r\n    (if (or (empty? l1)\r\n            (empty? l2))\r\n      (reverse r)\r\n      (recur (rest l1) (rest l2) (conj r (first l1) (first l2))))))","problem":39,"user":"4de2f44f535d08e6dec9fdec"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (if (or (empty? a)  (empty? b))\n    ()\n    (loop\n      [lst ()\n       a2  a\n       b2  b\n       currA  (first a2)\n       currB  (first b2)]\n      (if (or (empty? (rest a2))(empty? (rest b2)))\n        (reverse (conj lst currA currB))\n        (recur (conj lst currA currB) (rest a2) (rest b2) (first (rest a2) ) (first (rest b2)))))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [& colls] \n  (reduce into (apply map #(vector %1 %2) colls)))","problem":39,"user":"4facff22e4b081705acca230"},{"code":"(fn self-ref [[x & xs] [y & ys]] (if (some nil? [xs ys]) (list x y) (conj (self-ref xs ys) y x)))","problem":39,"user":"5370f8c4e4b0fc7073fd6ea1"},{"problem":39,"code":"(fn f [xs ys] (if (or (empty? xs) (empty? ys))\n               []\n               (concat (list (first xs) (first ys))\n                       (f (rest xs) (rest ys)))))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":39,"code":"(fn [a b] (loop [c 0 d []] (if (and (< c (count a)) (< c (count b))) (recur (inc c) (conj d (a c) (b c))) d)))","user":"5c41db45e4b08cd430848ece"},{"code":"#(apply concat (map (fn [x y] [x y]) %1 %2))","problem":39,"user":"51195e77e4b055cfb310d499"},{"problem":39,"code":"(fn [& args]\n  (reduce concat\n          (apply\n           (partial map\n                    (fn [& argz]\n                      (vec argz)))\n           args)))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":39,"code":"(fn ntrlv [s1 s2]\n  (if (some empty? [s1 s2])\n    []\n    (concat [(first s1) (first s2)] (ntrlv (rest s1) (rest s2)))))","user":"5b77248ae4b047b03b2036e7"},{"problem":39,"code":"(fn my-interleave [x1 x2]\n  (lazy-seq\n   (when-not (or (empty? x1) (empty? x2))\n     (cons (first x1) (cons (first x2)\n                            (my-interleave (rest x1) (rest x2)))))))","user":"548018d1e4b0c51c1f4d7326"},{"problem":39,"code":"(fn mix [x y] (loop [result [] i 0] (if (= i (min (count x) (count y))) result (recur (conj result (get x i) (get y i)) (inc i)))))","user":"573c813be4b0cd1946bd10c5"},{"code":"(fn[seq1,seq2] (flatten(map list seq1 seq2)))","problem":39,"user":"4ffd92e7e4b0678c553fc3e3"},{"code":"(comp flatten (partial map (fn [a b] [a b])))","problem":39,"user":"512e0f36e4b0b740abc59820"},{"code":"(fn [a b]\n  (loop [result '()\n         a a\n         b b]\n    (if (and (first a) (first b))\n      (recur (concat result [(first a) (first b)]) (rest a) (rest b))\n      result)))","problem":39,"user":"5256cd77e4b0541d1855ba39"},{"code":"(fn foo [ls1 ls2]\n  (if (not (or (empty? ls1) (empty? ls2)))\n    (let [r (foo (rest ls1) (rest ls2))]\n      (cons (first ls1) (cons (first ls2) r)))))","problem":39,"user":"521a4ff5e4b0c4ef0be83004"},{"problem":39,"code":"(fn my-il [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (cons (first s1) \n          (cons (first s2) \n                (lazy-seq (my-il (rest s1) (rest s2)))))))","user":"56a01895e4b0542e1f8d149f"},{"code":"#(flatten\n  (for [i (range (count %))\n        :when (< i (count %2))]\n    [(nth % i) (nth %2 i)]))","problem":39,"user":"527094f0e4b03e8d9a4a73b3"},{"problem":39,"code":"(fn [x y]\n  (apply concat (map vector x y)))","user":"591f5124e4b09b4ee5954c45"},{"code":"#(flatten (map (fn [a b] [a b]) %1 %2))","problem":39,"user":"4e8768f6535dceadca469850"},{"problem":39,"code":"(fn [xs ys]\n  (loop [rx xs ry ys result []]\n    (if (or (empty? rx) (empty? ry))\n      result\n      (recur (rest rx) (rest ry) (conj result (first rx) (first ry)))\n    )\n  )\n)","user":"54e85a7fe4b024c67c0cf823"},{"problem":39,"code":"mapcat (fn [k v] [k v] )","user":"5e9e8648e4b00a66d4a95178"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten (map (fn [m1 m2] [m1 m2]) c1 c2)))","user":"53ca41dae4b00fb29b2212c8"},{"problem":39,"code":"(fn [c1 c2] (apply concat (for [n (range 0 (min (count c1) (count c2)))] [(nth c1 n) (nth c2 n)]) ))","user":"53e70b3fe4b036ad0777e476"},{"problem":39,"code":"(fn s[d a b] (if (or (empty? a)(empty? b)) d (s (conj d (first a) (first b)) (rest a) (rest b))  )) []","user":"55429859e4b0a04f7929951f"},{"code":"(fn main [l1 l2] (if (or (nil? l1) (nil? l2)) nil (concat (list (first l1) (first l2)) (main (next l1) (next l2)))))","problem":39,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn inter [x y]\n  (reduce concat (map #(list %1 %2) x y)))","problem":39,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":39,"code":"(fn ff [s t]  \n     (let [fs (first s)\n           ft (first t)\n           rs (rest s)\n           rt (rest t)]\n        (if (and fs ft) \n          (conj (conj (ff rs rt) ft ) fs)\n                    '())\n     ))","user":"542a7c9be4b01498b1a71b41"},{"code":"(fn [a b] (flatten (map #(conj [%1] %2) a b)))","problem":39,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":39,"code":"(fn foo\n  [seq1 seq2]\n  (if (or (empty? seq2) (empty? seq1))\n    []\n    (cons (first seq1) (cons (first seq2) (foo (rest seq1) (rest seq2))))))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"#(loop [s1 %1\n         s2 %2\n         acc '()]\n    (if (or (empty? s1) (empty? s2))\n      (reverse acc)\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))))","problem":39,"user":"533d2ea5e4b085b17e897d7a"},{"problem":39,"code":"(fn my-interleave [first-seq second-seq]\n  (mapcat list first-seq second-seq))","user":"5fd2e391e4b07e53c2f3f049"},{"problem":39,"code":"(fn\n  [vec1 vec2]\n  (flatten(reverse(seq(zipmap vec1 vec2)))))","user":"543b9f8ce4b032a45b869332"},{"problem":39,"code":"(fn [c c2]\n  (mapcat vector c c2))","user":"5f8e2a08e4b0715f5002d767"},{"code":"(fn [x y] (mapcat list x y))","problem":39,"user":"4ea11921535d7eef308072af"},{"problem":39,"code":"(fn [s1 s2]\n   (mapcat #(list %1 %2) s1 s2))","user":"53c83f94e4b00fb29b2212af"},{"code":"#(flatten (map (fn [x y] (vector x y)) %1 %2))","problem":39,"user":"5032b398e4b00c0952a257eb"},{"problem":39,"code":"(fn [a b]\n  \n  (let [size (clojure.core/min (count a) (count b))]\n    \n    (loop [i 0\n           res []]\n      (if (= i size)\n        res\n        (recur (inc i) (conj res (nth a i) (nth b i))))\n      )\n    )\n  \n  )","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"#(\n  loop [xs %1 ys %2 result []]\n  (cond\n    (or (empty? xs) (empty? ys)) result\n    :else (recur\n            (rest xs)\n            (rest ys)\n            (conj result (first xs) (first ys)))))","problem":39,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":39,"code":"(fn [xs ys] (reduce-kv #(conj %1 %3 (nth ys %2)) [] (into [] (subvec xs 0 (min (count xs) (count ys))))))","user":"603f6623e4b0d5df2af2231f"},{"code":"(fn ileave [s1 s2]\n  (if (and (seq s1) (seq s2))\n    (concat [(first s1) (first s2)] (ileave (rest s1) (rest s2)))\n    []))","problem":39,"user":"502873a8e4b01614d1633ff8"},{"problem":39,"code":"#(mapcat (fn[c1 c2] (list c1 c2)) %1 %2)","user":"532dbd3ce4b019098a6f8b40"},{"problem":39,"code":"(fn [s1 s2]\n   (flatten\n     (map\n        #(conj [] %1 %2)\n        s1 s2)))","user":"5f97eff1e4b0715f5002d7f9"},{"code":"(fn [v1 v2]\n (loop [v [] aux1 v1 aux2 v2]\n    (if (or (empty? aux1) (empty? aux2))\n       v\n       (recur (conj v (first aux1) (first aux2)) (rest aux1)  (rest aux2))\n    )\n )\n)","problem":39,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":39,"code":"(fn inter [xs ys]\n  (loop [go (fn [res xs ys]\n             (cond\n               (or (empty? xs) (empty? ys)) res\n               true (let [res' (conj (conj res (first xs)) (first ys))]\n                      (recur res' (rest xs) (rest ys)))))]\n    (seq (go [] xs ys))))","user":"51e24905e4b01e519814642e"},{"code":"(fn ! [coll_a coll_b]\n  (let [a (seq coll_a) b (seq coll_b)]\n    (when (and a b)\n     (cons (first a) (cons (first b) (! (rest a) (rest b)))))))","problem":39,"user":"4f1d1299535d64f603146487"},{"problem":39,"code":"(fn [xs ys]\n  (->> (range (min (count xs) (count ys)))\n       (map-indexed (fn [idx _] [(get xs idx) (get ys idx)]))\n       flatten))","user":"5e486cb0e4b043cd24807a3e"},{"problem":39,"code":"(fn [x y]\n  (flatten (map vector x y)))","user":"5456e4e7e4b080a794c2c883"},{"problem":39,"code":"(fn [a b] (vec (flatten (map vector a b))))","user":"5b5afe87e4b0c6492753e6a4"},{"problem":39,"code":"(fn interleave-seq [seq1 seq2]\n  (loop [first-seq seq1\n         second-seq seq2\n         result '()]\n    (if (or (empty? first-seq) (empty? second-seq))\n      result\n      (recur (rest first-seq) (rest second-seq) (concat\n                                                  (concat result [(first first-seq)]) \n                                                  [(first second-seq)])))))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":39,"code":"(fn inter [f s]\n  (if\n   \t(or (empty? (rest f)) (empty? (rest s))) \n    [(first f) (first s)]\n  \t(concat [(first f) (first s)] (inter (rest f) (rest s)))\n  )\n)","user":"55efbb2ae4b066087aa9453c"},{"code":"(fn number-39 \n  [[x1 & rest1] [x2 & rest2]]\n  \"interleave\"\n  (if (or (empty? rest1) (empty? rest2))\n      (list x1 x2)\n      (concat (list x1 x2) (number-39 rest1 rest2))))","problem":39,"user":"51803613e4b04f45bde7d8fd"},{"code":"(fn [m n] (flatten (map (fn [v1 v2] [v1 v2]) m n)))","problem":39,"user":"51f98843e4b09be9c177e54e"},{"problem":39,"code":"#(loop [x 0\n        res []]\n   (if (= x (min (count %) (count %2)))\n     res\n     (recur (inc x) (conj res (get % x) (get %2 x)))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [leavd-coll [] s1 c1 s2 c2]\n    (if (or (empty? s1) (empty? s2))\n      leavd-coll\n      (recur (conj (conj leavd-coll (first s1)) (first s2))\n             (rest s1) (rest s2)))))","user":"53bb95d0e4b047364c044508"},{"code":"(fn [left right & lis]\n  (if (or (nil? left) (nil? right))\n    (reverse lis)\n    (recur \n      (next left) \n      (next right) \n      (conj lis (first left) (first right)))))","problem":39,"user":"4f7d065ce4b06e829148e1b9"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [result '() input1 coll1 input2 coll2]\n    (if (or (empty? input1) (empty? input2))\n      (reverse result)\n      (recur (conj (conj result (first input1)) (first input2)) (rest input1) (rest input2))\n    )\n  )\n)","user":"506af7d8e4b0a2a5463de37d"},{"problem":39,"code":"(fn my-interleave\n  [col1 col2]\n  (->> col2\n       (map vector col1)\n       (apply concat)))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":39,"code":"(fn interleaving [x y] (if (and (not-empty x) (not-empty y)) (lazy-seq (cons (first x) (cons (first y) (interleaving (rest x) (rest y))))) []))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":39,"code":"(fn [[x & xs] [y & ys]]\n  (loop [x x, xs xs, y y, ys ys, lst []]\n    (if (or (nil? x) (nil? y))\n      lst\n      (recur \n       (first xs) \n       (drop 1 xs) \n       (first ys) \n       (drop 1 ys) \n       (conj (conj lst x) y)\n      )\n    )\n  )\n)","user":"56433d34e4b08d4f616f5f23"},{"code":"(fn [& colls]\n  (let [n (apply min (map count colls))]\n    (flatten (for [m (range n)] \n               (map #(% m) colls)))))","problem":39,"user":"52cb6bb0e4b07d0d72b2734c"},{"problem":39,"code":"#(flatten (let [c (min (count %1) (count %2))\n        r []]\n    (for [x (range c)]\n      (conj r (nth %1 x) (nth %2 x)))))","user":"53d5a63be4b0e771c3025449"},{"code":"(fn [col1 col2] \n    (flatten (map (fn [x y] [x y]) col1 col2)) \n )","problem":39,"user":"5094057fe4b097f48cc38593"},{"code":"#(flatten (apply map vector [% %2]))","problem":39,"user":"4ed845a8535d10e5ff6f52f8"},{"code":"(fn [a b]\n  (mapcat list a b))","problem":39,"user":"523361d8e4b0f0b72fabf405"},{"code":"(fn [s1 s2]\n              (reverse (reduce #(into %1 %2) '() (map #(list %1 %2) s1 s2))))","problem":39,"user":"4e08fb7a535d04ed9115e7ac"},{"code":"mapcat (fn [& rest] rest)","problem":39,"user":"52526161e4b0541d1855b8a6"},{"problem":39,"code":"(fn [a b]\n  (loop [x a y b acc []]\n    (if (and (not-empty x) (not-empty y))\n      (recur\n        (rest x)\n        (rest y)\n        (conj (conj acc (first x)) (first y)))\n      acc)))","user":"532f8569e4b019098a6f8b4f"},{"problem":39,"code":"(fn foo [one two]\n\t(if\n\t\t(or (empty? one) (empty? two))\n\t\t'[]\n\t\t(concat\n\t\t\t(list (first one) (first two))\n\t\t\t(foo (rest one) (rest two)))))","user":"577d3feee4b0c8d87281f6d2"},{"code":"(fn [a b] (mapcat #(vector % %2) a b ))","problem":39,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn f [c1 c2]\n  (if (or (empty? c1)\n          (empty? c2))\n      '()\n      (conj (conj (f (rest c1) (rest c2))\n                  (first c2))\n            (first c1))))","problem":39,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":39,"code":"(fn f [a b] (cond\n           (or (empty? a) (empty? b)) '()\n      \t\t:else (cons (first a) (cons (first b) (f (rest a) (rest b))))))","user":"540217e1e4b0df28a13c62cb"},{"code":"(fn interleave-sequence [a b]\n\t(letfn [(irecur [xs ys]\n\t\t(if (or (empty? xs) (empty? ys))\n\t\t\t'()\n\t\t\t(let [[xh & xr] xs [yh & yr] ys] \n\t\t\t\t(conj (irecur xr yr) yh xh))))]\n\t\t(irecur a b)))","problem":39,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn [ & x] (loop [coll x\n                  res '()]\n             \t(if (some empty? coll)\n                  (flatten res)\n                  (recur (map rest coll)\n                         (cons res (map first coll))))))","problem":39,"user":"5148bcbee4b05514c84b7cc6"},{"problem":39,"code":"(fn my-interleave [list1 list2]\n\t(if (or (empty? list1) (empty? list2))\n\t\t'()\n\t\t(cons (first list1) (cons (first list2) (my-interleave (rest list1) (rest list2))))))","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn myinter [one two]\n  (if (or (empty? one) (empty? two))\n    []\n    (cons (first one) (cons (first two) (myinter (rest one) (rest two))))))","problem":39,"user":"52a779fce4b0c58976d9ac1a"},{"code":"(fn [coll-1 coll-2]\n  (flatten (map vector coll-1 coll-2)))","problem":39,"user":"50493b52e4b06e84b772a23e"},{"code":"(fn interleave-fn [s1 s2]\n  (cond \n    (or (empty? s1) (empty? s2)) '()\n    :else \n      (conj \n        (interleave-fn (rest s1) (rest s2)) \n        (first s2) \n        (first s1))))","problem":39,"user":"500cc693e4b05f7c30cfa69a"},{"code":"(fn entrelazar [xl yl]\r\n  (flatten (map #(list %1 %2)  xl  yl))\r\n)","problem":39,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn f [a b]\n  (when (and a b)\n    (cons (first a) (cons (first b) (f (next a) (next b))))))","problem":39,"user":"4e55ea0c535d8a8b8723a281"},{"problem":39,"code":"mapcat \n#(conj (vector %1) %2)","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [x y & r]\n  (if (or (empty? x) (empty? y))\n    (reverse r)\n    (recur (rest x)\n           (rest y)\n           (conj r (first x) (first y)))))","problem":39,"user":"4efb2fd7535dced4c769f274"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [[f1 & r1] s1\n         [f2 & r2] s2\n         res     []]\n    (if (or (nil? f1) (nil? f2))\n      res\n      (recur r1 r2 \n             (conj res f1 f2))\n    )\n  ))","user":"574e7be7e4b02ea114799242"},{"problem":39,"code":"(fn il[c1 c2]\n  (cond\n    (zero? (count c2))\n    []\n\n    (= (count c1) 1)\n    [(first c1) (first c2)]\n\n    :else\n    (concat (il [(first c1)] [(first c2)])\n            (il (rest c1) (rest c2)))))","user":"5978305be4b01722bebd4d03"},{"code":"#( mapcat vector %1 %2)","problem":39,"user":"516d227fe4b06f078fab252d"},{"problem":39,"code":"(comp flatten #(map list %1 %2))","user":"58ebae90e4b056aecfd47d44"},{"problem":39,"code":"(fn interleave2\n  ([s1 s2 ret]\n  (let [f1 (first s1) f2 (first s2)]\n    (if (and f1 f2) (interleave2 (rest s1) (rest s2) (concat ret [f1 f2]))\n        ret)))\n  ([s1 s2] (interleave2 s1 s2 '())))","user":"59be62d5e4b0a024fb6ae435"},{"code":"#(apply concat \n          ((fn [s1 s2] \n            (map list s1 s2))\n          %1 %2) )","problem":39,"user":"522724bde4b04e78ff2e19aa"},{"problem":39,"code":"(fn myinterleave [a b]\n  (letfn [(iter [a b]\n            (let [[x & xs] a\n                  [y & ys] b]\n              (cons x (cons y (lazy-seq (iter xs ys))))))]\n    (take (* 2 (min (count a) (count b))) (iter a b))))","user":"5589a941e4b059ccff29b207"},{"problem":39,"code":"(fn [& s]\n  (reduce into []\n  \t(apply map (fn [& t] (into [] t)) s)))","user":"5637557ce4b0bfe05bf117d4"},{"problem":39,"code":"(fn inter [[a & as] [b & bs]]\n  (if (and (seq as) (seq bs))\n    (apply conj [a b] (inter as bs))\n    [a b]))","user":"55a12668e4b0acc240e3150b"},{"problem":39,"code":"(fn [xs ys] (flatten (map #(conj [] %1 %2) xs ys)))","user":"5dc9d5c3e4b03836ba07d824"},{"problem":39,"code":"(fn [lst1 lst2]\n  (flatten (map #(vector %1 %2) lst1 lst2)))","user":"5813e208e4b0f478707a061b"},{"code":"(fn interleaver [coll1 coll2]\n  (lazy-seq\n    (let [seq1 (seq coll1)\n          seq2 (seq coll2)]\n      (when (and seq1 seq2)\n        (cons              ;outer-cons\n              (first seq1) ;first arg for outer-cons\n              (cons        ;second arg for outer-cons and inner-cons\n                    (first seq2) ;first arg for inner-cons\n                    (interleaver (rest seq1) (rest seq2)) ;second arg for inner-cons\n              ))))))","problem":39,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":39,"code":"(fn [first0 second0]\n  (loop [list1 first0 list2 second0 acc []]\n    (if (or (empty? list1) (empty? list2))\n      acc\n      (let [rest1 (rest list1) rest2 (rest list2) head1 (first list1) head2 (first list2)]\n        (recur rest1 rest2 (reverse (cons head2 (cons head1 (reverse acc)))))))))","user":"5773f3a9e4b0979f896515f2"},{"problem":39,"code":"(let [dothis (fn dothis [acc a] (reduce\n                                  #(vector\n                                    (conj (first %1) (first %2))\n                                    (conj (second %1) (rest %2)))\n                                  [acc []] a))]\n  (fn [& a] (loop [b (vector [] a)]\n            (if (some nil? (first (dothis (first b) (second b))))\n              (first b)\n              (recur (dothis (first b) (second b)))\n              ))\n    )\n  \n  )","user":"54e84d1ee4b024c67c0cf822"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 acc []]\n    (if (and (not (empty? s1)) (not (empty? s2)))\n      (recur\n        (rest s1)\n        (rest s2)\n        (conj acc (first s1) (first s2)))\n      acc)))","user":"5433eecae4b0b6b47310fce6"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 acc '()]\n    (if (or (empty? s1)\n            (empty? s2))\n      acc\n      (recur (rest s1) (rest s2) (concat acc (list (first s1)) (list (first s2)))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":39,"code":"(fn [vec1 vec2] (flatten (map vector vec1 vec2)))","user":"5582c5b1e4b05c286339e10a"},{"code":"(fn myinterleave [x y]\r\n  (if (and (not (empty? x)) (not (empty? y)))\r\n  \t(concat (list (first x) (first y)) (myinterleave (rest x) (rest y)))\r\n\t)\r\n)","problem":39,"user":"504f3aede4b0a02f9cffde5d"},{"problem":39,"code":"(fn [coll1 coll2]\n    (let [len (min (count coll1) (count coll2))]\n      (->>\n        (range len)\n        (reduce #(conj %1 (coll1 %2) (coll2 %2)) [])\n      )\n    )\n  )","user":"5bc28638e4b07a9b28b10033"},{"problem":39,"code":"(fn [x y] (\n(fn popAndRecur [seq1 seq2 result]\n                     (cond\n                      (and (>= (count seq1) 1) (>= (count seq2) 1))\n                      (popAndRecur (rest seq1) (rest seq2) (conj result [(first seq1) (first seq2)]))\n                      :else (flatten result)))\nx y []))","user":"53ad28ede4b047364c044462"},{"problem":39,"code":"#_(fn [xs ys] (flatten (map #(vector %1 %2) xs ys)))\nmapcat list","user":"5de12192e4b0948ae9d9aded"},{"problem":39,"code":"(fn [coll1 coll2] (reduce #(into %1 %2) (map vector coll1 coll2)))","user":"56491050e4b0284900eef639"},{"problem":39,"code":"(fn sk-interleave [l1 l2]\n  (loop [[h1 & rest1 :as s1] l1\n         [h2 & rest2 :as s2] l2\n         result []]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur rest1 rest2 (conj result h1 h2)))))","user":"5884f377e4b0f1effa3b76a8"},{"problem":39,"code":"(fn\n  [xs ys]\n  (flatten (map (fn [x y] (vector x y))\n       xs\n       ys)))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn my-interleave [seq1 seq2] (flatten (map #(list %1 %2) seq1 seq2)))","problem":39,"user":"50b51c06e4b0c464d223d1c1"},{"code":"#(loop [i 0 n []]\n   (if (and (< i (count %1)) (< i (count %2)))\n     (recur (inc i) (conj n (%1 i) (%2 i)))\n     n\n     ))","problem":39,"user":"50bce014e4b0594b91591c63"},{"code":"(fn firsts [& args] (if (not-any? empty? args) (flatten (cons (apply (fn [& args] (map first args)) args) (apply firsts (map rest args)))) () ))","problem":39,"user":"50a8cc97e4b0a9a42786e8db"},{"problem":39,"code":"(fn [a b]\n  (loop [r [] a (seq a) b (seq b)]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (conj r (first a) (first b)) (rest a) (rest b)))))","user":"55231800e4b0882d96d091ad"},{"code":"(fn ilv [a b]\n  (if (or (= (count a) 1) (= (count b) 1))\n    (list (first a) (first b))\n    (conj (ilv (rest a) (rest b)) (first b) (first a))))","problem":39,"user":"5150a7d7e4b03e678e393abb"},{"code":"(fn mapea [s1 s2] (mapcat #(vector %1 %2) s1 s2))","problem":39,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn [x y]\n  (loop [a x b y acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b)\n        (conj (conj acc (first a)) (first b))))))","problem":39,"user":"4e951f2c535dbda64a6f6b2f"},{"code":"(fn xinterleave [a b]\n  (loop [acc [] arest a brest b]\n    (if (or (empty? arest) (empty? brest))\n      acc\n      (recur (conj acc (first arest) (first brest)) (rest arest) (rest brest)))))","problem":39,"user":"4fe49706e4b0e8f79898feb7"},{"problem":39,"code":"(fn foo [x y] \n  (if (and (not (empty? x)) (not (empty? y))) \n  \t(conj  (foo (rest x) (rest y)) (first y)  (first x)   ) \n    '()\n  )\n)","user":"54078851e4b0addc1aec66bd"},{"code":"#(flatten(for[x (range (min (count %) (count %2)))] [(nth % x) (nth %2 x)]))","problem":39,"user":"52271ffee4b04e78ff2e19a9"},{"code":"#(reverse (loop [r '()\n                 c1 %1\n                 c2 %2]\n              (if (or (empty? c1) (empty? c2))\n                r\n                (recur (conj r (first c1) (first c2)) (rest c1) (rest c2)))))","problem":39,"user":"511b810ce4b07ab9ec456182"},{"problem":39,"code":"(fn ileave [v1 v2]\n  (when (and (seq v1) (seq v2))\n    (concat [(first v1) (first v2)]\n            (ileave (rest v1) (rest v2)))))","user":"596a66cde4b069c0a1a19803"},{"code":"(fn [in-seq-1 in-seq-2] (flatten (map #(vector %1 %2) in-seq-1 in-seq-2)))","problem":39,"user":"4ef4ab95535dced4c769f23b"},{"problem":39,"code":"(fn [a-seq b-seq]\n  (let [f (fn [acc a-seq b-seq]\n    (if (or (empty? a-seq) (empty? b-seq))\n      acc\n      (recur (concat acc [(first a-seq) (first b-seq)])\n             (rest a-seq)\n             (rest b-seq))))]\n    (f [] a-seq b-seq)))","user":"53fd0a22e4b0de5c418485e1"},{"code":"(fn il [xs ys]\n  (if (or (empty? xs) (empty? ys)) nil\n      (list* (first xs) (first ys) (il (rest xs) (rest ys)))\n  ))","problem":39,"user":"4ee82ce9535d93acb0a6687a"},{"code":"mapcat\t (fn [x y] [x y])","problem":39,"user":"510528a0e4b0730a5f55ad85"},{"problem":39,"code":"(fn [x y]\n  (reduce #(concat % [(nth x %2) (nth y %2)])\n          []\n          (range 0 (min (count x) (count y)))))","user":"53aef31ce4b047364c04447b"},{"code":"(fn [seq-1, seq-2]\n  (flatten (map (fn [item-1 , item-2] [item-1, item-2]) seq-1 seq-2)))","problem":39,"user":"4f03396d535dcb61093f6a7b"},{"code":"(fn [x y] (flatten  (map (fn [& s] s) x y)))","problem":39,"user":"4e6dfe57535d5021c1a895fc"},{"code":"(fn [l r]\n  (loop [l l r r acc []]\n    (if (or (empty? r) (empty? l))\n      acc\n      (recur (rest l) (rest r) (conj acc (first l) (first r))))))","problem":39,"user":"5042de0de4b034ff00315d1b"},{"problem":39,"code":"#(flatten (for [x (take (min (count %) (count %2)) (iterate inc 0))] (list (get % x) (get %2 x)) ))","user":"54344721e4b0b6b47310fcea"},{"problem":39,"code":"(fn inleave [x y] (case x '() '() (case y '() '() (conj (inleave (rest x) (rest y)) (first y) (first x)))))","user":"60901a6be4b03bd49d9f36c9"},{"code":"#(flatten (apply map vector %&))","problem":39,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":39,"code":"(fn _interleave\r\n  [a b]\r\n  (if (or (= 1 (count a)) (= 1 (count b)))\r\n    (list (first a) (first b))\r\n    (concat\r\n      (list (first a) (first b))\r\n      (_interleave (rest a) (rest b)))))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [a b]\n  (loop [x a y b r []]\n    (cond\n      (or (empty? x) (empty? y)) r\n      :else (recur (rest x) (rest y) (conj r (first x) (first y))))))","problem":39,"user":"4fae258de4b081705acca246"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (and (seq a)\n           (seq b))\n      (cons (first a) (cons (first b) (my-interleave (rest a) (rest b))))\n      '()))","user":"544e9022e4b0e3978000698b"},{"problem":39,"code":"(fn [a-coll b-coll]\n  (apply concat (map #(list %1 %2) a-coll b-coll)))","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn weaver\n  ([seq_one seq_two result]\n    (cond\n      (empty? seq_one) result\n      (empty? seq_two) result\n      :else\n      (recur  (rest seq_one)\n              (rest seq_two)\n              (concat result\n                  (list (first seq_one))\n                  (list (first seq_two))))\n    )\n  )\n  ([seq_one seq_two] (weaver seq_one seq_two []))\n)","problem":39,"user":"502be4fae4b08f5602f232eb"},{"problem":39,"code":"(fn [x1 x2]\n  (loop [i1 x1\n         i2 x2\n         res []]\n    (if (or (empty? i1) (empty? i2))\n      res\n      (recur (rest i1)\n             (rest i2)\n             (concat res [(first i1) (first i2)])))))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn i [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) (i (rest s1) (rest s2)))))))","problem":39,"user":"4ff3e771e4b0678c553fc356"},{"code":";#(flatten (map vector %1 %2))\n(comp flatten (partial map vector))","problem":39,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn [& coll]\n  (apply mapcat vector coll))","problem":39,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":39,"code":"(fn [a b] \n  (loop [res [] x a y b]\n  \t(if (or (empty? x) (empty? y))\n      res\n      (recur (conj res (first x) (first y)) (rest x) (rest y)))))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":39,"code":"(fn my-interleave [x y]\n  (loop [ i 0 result '()]\n    (if (= i (min (count x) (count y)))\n      result\n      (recur (inc i) (concat (concat result [(get x i)]) [(get y i)])))))","user":"5c24c654e4b07e362c2305a7"},{"problem":39,"code":"(fn my-leave [a b]\n  (if (or (empty? a) (empty? b))\n      []\n      (cons (first a) (cons (first b) (my-leave (rest a) (rest b))))))","user":"5907a736e4b047aa04b1995e"},{"code":"(fn [q r] (mapcat (fn [a b] [a b]) q r))","problem":39,"user":"532e0b20e4b019098a6f8b45"},{"code":"(fn [as bs]\n  (loop [xs as ys bs zs []]\n    (if (or (empty? xs) (empty? ys)) zs\n    (recur (rest xs) (rest ys) (conj zs (first xs) (first ys)))\n)))","problem":39,"user":"4e9c66e2535dbda64a6f6b7f"},{"code":"mapcat (fn [p q] [p q])","problem":39,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":39,"code":"(fn [c1 c2]\n  (reduce\n   \t(fn [acc e]\n      (conj acc (nth c1 e) (nth c2 e)))\n   \t[]\n    (range (min (count c1) (count c2)))))","user":"5c73b8bae4b0fca0c16227ba"},{"code":"(fn [x y]\n  (mapcat vector x y))","problem":39,"user":"4e2ef93d535deb9a81d77f0f"},{"code":"(fn [a b]    (reduce #(apply conj %1 %2) [] (map (fn [a b] [a b]) a b))       )","problem":39,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":39,"code":"#(loop [[h1 & t1] %1\n        [h2 & t2] %2\n        acc []]\n   (println \"h1\" h1 \"t1\" t1 \"h2\" h2 \"t2\" t2 \"acc\" acc)\n   (if (or (nil? h1) (nil? h2) false)\n     acc\n     (recur t1 t2 (conj acc h1 h2))\n   )\n )","user":"53f7820be4b0de5c41848560"},{"problem":39,"code":"(fn [s1 s2]\n   (loop [n 1 d[] n1 s1 n2 s2]\n     (if (> n (min (count s1) (count s2))) d\n       (recur (inc n) (concat (concat d [(nth s1 (- n 1))]) [(nth s2 (- n 1))]) (rest n1) (rest n2)))))","user":"558378dce4b05c286339e115"},{"problem":39,"code":"(fn[seq1 seq2]\n  (reduce concat [] (map (fn [e1 e2] [e1 e2]) seq1 seq2))\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":39,"code":"(fn weave [x y]\n  (if (or (empty? x)\n          (empty? y))\n    (list)\n    (concat (list (first x) (first y))\n            (weave (rest x) (rest y)))))\n\n;; ideal would be:\n;  #(mapcat list %1 %2)","user":"59a080e3e4b0871e7608b837"},{"code":"(partial mapcat (fn [& s] s))","problem":39,"user":"53527551e4b084c2834f4af0"},{"code":"(fn [list1 list2]\n  (loop [restoflist1 list1 restoflist2 list2 interlist []]\n    (if (or (empty? restoflist1) (empty? restoflist2))\n      interlist\n      (recur (rest restoflist1) (rest restoflist2) (conj interlist (first restoflist1) (first restoflist2)))\n      )\n    )\n  )","problem":39,"user":"52cc7c40e4b07d0d72b27364"},{"problem":39,"code":"(fn [s t]\n  (loop [r () s s t t]\n    (if (or (empty? s) (empty? t))\n      (reverse r)\n      (recur (conj r (first s) (first t)) (rest s) (rest t)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":39,"code":"(partial mapcat (partial conj []))","user":"56eff7c1e4b04a395b9a0468"},{"problem":39,"code":"(fn [x y] \n  \n(apply concat (map #(vector %1 %2) x y))\n  \n)","user":"5921a080e4b09b4ee5954c77"},{"problem":39,"code":"(fn [l r] (flatten (map list l r)))","user":"5b9436dfe4b0c0b3ffbd4a53"},{"problem":39,"code":"(fn [x y] (loop [new (empty x)\n                 l1 x\n                 l2 y]\n            (if (or (= (count l1) 0) (= (count l2) 0))\n              new\n              (recur\n               (conj new (first l1) (first l2))\n               (rest l1)\n               (rest l2)\n               )\n              )\n            )\n  )","user":"55871c62e4b059ccff29b1e0"},{"code":"#(loop [col1 %1\n        col2 %2\n        acc []]\n   (cond\n    (or (empty? col1) (empty? col2)) acc \n    :else (recur (rest col1) (rest col2) (conj acc (first col1) (first col2)) )))","problem":39,"user":"52fc89b2e4b047fd55837019"},{"problem":39,"code":"#(loop [i 0\n        result []]\n   (if (< i (count %))\n     (recur (inc i) (if (and (not (nil? (get % i))) (not (nil? (get %2 i))))\n                      (apply conj result [(get % i) (get %2 i)])\n                      result))\n     result))","user":"5d3f50d7e4b09d9322bc20a6"},{"problem":39,"code":"(fn blarg [l1 l2]\n  (if (empty? l1) l1 (if (empty? l2) l2\n  (flatten (into (blarg (rest l1) (rest l2))(conj '() (first l1) (first l2)) )))))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn [x y] \n  (loop [mx x my y c '()] \n    (if (or (= mx '()) (= my '())) (reverse c) \n        (recur (rest mx) (rest my) (conj (conj c (first mx)) (first my))))))","problem":39,"user":"4e9629c2535dbda64a6f6b3f"},{"code":"#(loop [acc '() rest1 %1 rest2 %2]\n       (if (or (empty? rest1) (empty? rest2))\n          acc\n          (recur (concat acc (list (first rest1) (first rest2)))\n                 (rest rest1)\n                 (rest rest2))))","problem":39,"user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn _interleave [seq_a seq_b]\n  (flatten (map list seq_a seq_b)))","problem":39,"user":"510cd1dde4b078ea71921124"},{"problem":39,"code":"(fn [s1 s2] \n  (flatten (map (fn [x y][x y]) s1 s2)))","user":"56c56603e4b05cc29241eea7"},{"code":"(fn [x y] (flatten (apply concat (map #(list %1 %2) x y) (list))))","problem":39,"user":"50982cc7e4b04e098a4c726c"},{"problem":39,"code":"(fn [s1 s2] (reduce concat (map #(list %1 %2) s1 s2)))","user":"5d6f0533e4b04d129b00f2d0"},{"problem":39,"code":"(fn [list1 list2] (mapcat list list1 list2))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"code":"(fn [c1 c2] (loop [s1 (seq c1) s2 (seq c2) r []] (if (and s1 s2) (recur (next s1) (next s2) (conj r (first s1) (first s2))) r)))","problem":39,"user":"4e6fa38b535d5021c1a89622"},{"code":"(fn interleav\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interleav (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleav (map rest ss))))))))","problem":39,"user":"4fa4f2f2e4b081705acca1aa"},{"problem":39,"code":"mapcat list\n\n;(fn myinterleave [s1 s2]\n;  (if (or (empty? s1) (empty? s2))\n;    []\n;    (cons (first s1) (cons (first s2) (myinterleave (rest s1) (rest s2))))))","user":"56488119e4b0284900eef632"},{"problem":39,"code":"(fn [coll1 coll2]\n    (loop [rem1 coll1 rem2 coll2 out '()]\n    (if (and (first rem1) (first rem2))\n      (recur (rest rem1) (rest rem2) (conj out (first rem1) (first rem2)))\n      (reverse out)\n        )))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":39,"code":"(fn interleave-seq\n  [seq1 seq2]\n  (apply concat (map vector seq1 seq2))\n  )","user":"5f29837ee4b033932238a64f"},{"problem":39,"code":"#(loop [a % b %2 r []]\n   (if (or (empty? a) (empty? b))\n     r\n     (recur (rest a) (rest b) (conj r (first a) (first b)))))","user":"5bb5cd43e4b0a20761a23575"},{"code":"(fn [a b] (let [len (min (count a) (count b))]\n\t  (loop [count 0 ret '()]\n\t    (if (= len count) (reverse ret)\n\t      (recur (inc count) (conj ret (nth a count) (nth b count)))))))","problem":39,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (if (empty? lst1)\n      ()\n      (if (empty? lst2)\n          ()\n      (cons (first lst1)(cons (first lst2) (my-interleave (rest lst1)(rest lst2)))))))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn [p q]\n  (loop [r p, s q, acc nil]\n    (if\n      (or (empty? r) (empty? s))\n      (reverse acc)\n      (recur (rest r) (rest s)\n        (conj acc (first r) (first s))))))","problem":39,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":39,"code":"(fn [& xs]\n  (flatten\n   (for [i (range (apply min (map count xs)))]\n     (map #(nth %1 i) xs))))","user":"53db43aae4b0e771c30254b1"},{"problem":39,"code":"(fn [a b] (flatten(take-nth (+ 1 (min (count a) (count b))) (for [x (take (count b) a) y (take (count a) b)] [x y]))))","user":"563e7a33e4b0da801c4e466d"},{"code":"#(reverse (reduce concat (zipmap %2 %)))","problem":39,"user":"50c4a354e4b0210b849018af"},{"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (cons (first xs) (cons (first ys) (inter (rest xs) (rest ys))))))","problem":39,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn [s1 s2]\n  (mapcat \n \t\t(fn [x, y] (concat (list x) (list y))) s1 s2))","problem":39,"user":"50b79c5fe4b0cf3e51c3046c"},{"code":"(fn [seqs1 seqs2]\n  (loop[result '()\n        s1 seqs1\n        s2 seqs2]\n    (if(or (empty? s1)\n           (empty? s2))\n      result\n      (recur (concat result (list (first s1) (first s2)))\n             (rest s1)\n             (rest s2)))))","problem":39,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn [f s]\n  (let [indices (range 0 (min (count f) (count s)))]\n    (mapcat #(list (f %) (s %)) indices)))","problem":39,"user":"4e6defcc535d5021c1a895f8"},{"problem":39,"code":"(let\n  [\n    helper (fn helper [x y builder]\n              (if (or (empty? x) (empty? y))\n                builder\n                (helper (rest x) (rest y) (cons (first y) (cons (first x) builder)))))\n         \n ]\n (fn [x y] (reverse (helper x y '())))\n)","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":39,"code":"(fn [a b] (reduce (fn [lst i] (conj (conj lst (nth a i)) (nth b i))) [] (apply vector (range (min (count a) (count b))))) )","user":"54eee3a3e4b024c67c0cf879"},{"problem":39,"code":"(fn my-interleave [x y]\n  (->> (range (min (count x) (count y)))\n       (map (fn [h] [(nth x h) (nth y h)]))\n       (reduce (fn [z h] (concat z h)))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1\n         coll2 coll2\n         output []]\n    (if (or (empty? coll1) (empty? coll2))\n      output\n      (recur (rest coll1) (rest coll2) (conj output (first coll1) (first coll2))))))","user":"5c24671be4b07e362c2305a1"},{"code":"(fn inter [l r]\n  (if (or (empty? r) (empty? l)) \n    '()\n    (concat (list (first l) (first r)) (inter (rest l) (rest r)))\n  ))","problem":39,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":39,"code":"(fn il [a b] \n  (if (or (empty? a) (empty? b)) \n      () \n      (concat \n             (list (first a) (first b)) \n             (il (rest a) (rest b))\n      )\n  )\n)","user":"56a75810e4b0542e1f8d14fc"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1-rem s1 s2-rem s2 res []]\n    (if (or (empty? s1-rem) (empty? s2-rem))\n      res\n    (let [[p1 & r1] s1-rem\n          [p2 & r2] s2-rem\n          res (conj res p1 p2)]\n      (recur r1 r2 res)))))","user":"55eaca20e4b0121d4835fdb4"},{"code":"(fn il [a b] (if (or (empty? a) (empty? b)) '() (flatten [(first a) (first b) (il (rest a) (rest b))])))","problem":39,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"#(mapcat (partial conj []) % %2)","problem":39,"user":"4e399685535deb9a81d77f40"},{"problem":39,"code":"(fn [l1 l2] \n  (loop [l1 l1 l2 l2 result []]\n    (if (and l1 l2)\n      (recur (next l1) (next l2) (conj result (first l1) (first l2)))\n      result\n    )\n  )\n)","user":"5d2564d2e4b02ea6f0fb6a34"},{"code":"(fn [s1 s2]\n  (mapcat list s1 s2))","problem":39,"user":"5201ff99e4b0b2e020a18f26"},{"problem":39,"code":"(fn [coll1 coll2] (flatten (map #(conj [%1] %2) coll1 coll2)))","user":"5ea444b7e4b00a66d4a951a0"},{"problem":39,"code":"(fn gyea\n  [x y]\n  (loop [x x y y res []]\n    (if (or (empty? x) (empty? y))\n    res\n    (recur (rest x) (rest y) (conj res (first x) (first y))))))","user":"54070647e4b0addc1aec66b2"},{"problem":39,"code":"(fn[a b] (flatten (map #(conj '() %2 %1) a b)))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn [as bs]\n  (mapcat list as bs))","problem":39,"user":"50f48298e4b004d364930527"},{"code":"#(loop [d nil s1 %1 s2 %2]\n  (if (or (empty? s1) (empty? s2))\n    (reverse d)\n    (recur (cons (first s2) (cons (first s1) d)) (rest s1) (rest s2))))","problem":39,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(fn [l1,l2] \n  (mapcat \n    (fn[i] (list (nth l1 i) (nth l2 i)))\n    (range 0 (min (count l1) (count l2)))))","problem":39,"user":"4e6e10d8535d5021c1a895fd"},{"problem":39,"code":"(fn inter [x y]\n   (if (or (= 0 (count x)) (= 0 (count y)))\n     []\n     (concat [(first x) (first y)]\n             (inter (rest x) (rest y))\n           )\n     )\n   )","user":"55c3149de4b0e31453f64987"},{"problem":39,"code":"#(loop [idx 0\n        output []]\n   (let [a (get %1 idx)\n         b (get %2 idx)]\n     (if (or (nil? a) (nil? b))\n       output\n       (recur (inc idx) (conj output a b)))))\n\n;; Alt solution: mapcat list","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [output [],\n         c1 c1,\n         c2 c2]\n    (let [f1 (first c1),\n        f2 (first c2),\n        r1 (rest c1),\n        r2 (rest c2)]\n     (if (and f1 f2)\n       (recur (conj output f1 f2) r1 r2)\n       output))))","user":"56732c84e4b05957ce8c611c"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         result []]\n    (if (or (empty? xs) (empty? ys))\n      result\n      (recur (rest xs) (rest ys) (conj result (first xs) (first ys)))\n      )\n    )\n  )","user":"5f6c331ae4b02876ed9fd054"},{"problem":39,"code":"(fn [list1 list2]\n    (flatten \n      (map \n        (fn [val1 val2]\n          [val1 val2]\n        )\n        list1\n        list2  \n      )\n    )\n  )","user":"60383d43e4b0d5df2af222ec"},{"code":"(fn inter [xs ls] \n  (flatten (map #(conj [] %&) xs ls)))","problem":39,"user":"523b82efe4b07becd5be21f0"},{"problem":39,"code":"#(flatten (map list %1 %2 ))","user":"5a8d55a8e4b05369db4d2514"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat vector coll1 coll2))","user":"540f2c48e4b0addc1aec6727"},{"code":"(fn foo [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (concat (list (first x) (first y)) (foo (rest x) (rest y)))))","problem":39,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn [x y]\n  (loop [r [] h1 (first x) t1 (rest x)\n              h2 (first y) t2 (rest y)]\n    (if (not (and h1 h2)) \n      r\n      (recur (conj r h1 h2) (first t1) (rest t1)\n                            (first t2) (rest t2)))))","problem":39,"user":"50af3393e4b0a40c9cfb08d7"},{"code":"(fn [xs ys]\r\n       (flatten (map vector xs ys)))","problem":39,"user":"4deb529a535d08e6dec9fe04"},{"problem":39,"code":"(fn inter-leave [xs ys] (if (empty? xs) '() (if (empty? ys) () (conj (inter-leave (rest xs) (rest ys)) (first ys) (first xs)))))","user":"5ed4a4ade4b016b56eae05cd"},{"code":"(fn [xs1 xs2]\n  (apply concat (map list xs1 xs2)))","problem":39,"user":"50c9e5e3e4b0a409464667d7"},{"code":"(fn I [xs ys]\n  (cond (empty? xs) []\n        (empty? ys) []\n        :else (list* (first xs)\n                     (first ys)\n                     (I (rest xs) (rest ys)))))","problem":39,"user":"51a4416ae4b0def3c5c5868c"},{"code":"(fn intr [sec1 sec2]\n  ((fn intrAcc [sec1 sec2 acc]\n      (if (or (empty? sec1) (empty? sec2)) \n        acc\n        (intrAcc (rest sec1) (rest sec2) (conj acc (first sec1) (first sec2)))\n        )\n      ) sec1 sec2 [])\n  )","problem":39,"user":"5194f482e4b05be8c43d2385"},{"code":"(fn [a b] (\n  loop [x a y b s []]\n    (if (or (empty? x) (empty? y))\n      s\n      (recur (rest x) (rest y) \n        (conj (conj s (first x)) (first y))\n      )\n)))","problem":39,"user":"4f31ad57e4b0d6649770a089"},{"code":"(fn il [c1 c2]\n  (if (and (seq c1) (seq c2))\n    (cons (first c1) (cons (first c2) (il (rest c1) (rest c2))))\n    '()))","problem":39,"user":"53480973e4b084c2834f4a52"},{"code":"(fn il [l1 l2]\n  (if (and (seq l1) (seq l2))\n    (list* (first l1) (first l2)\n           (il (rest l1) (rest l2)))))","problem":39,"user":"505f55d3e4b08f2a82ad10b0"},{"code":"(fn [x y] (loop [result [] a x b y] (if (or (= nil (first a)) (= nil (first b))) result (recur (into result (vector (first a) (first b))) (rest a) (rest b)))))","problem":39,"user":"5098db05e4b0cae2931060a2"},{"problem":39,"code":"(fn zip [[x & xrest], [y & yrest]] (concat [x y] (if (or (empty? xrest) (empty? yrest)) [] (zip xrest yrest))))","user":"54d7ed8de4b0a52adc2e2034"},{"code":"(fn [x y] (flatten (list (reverse (zipmap x y)))))","problem":39,"user":"50503117e4b0a02f9cffdeb5"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2 ]\n  (loop [[x & xs] coll1\n         [y & ys] coll2\n         acc []]\n    (if (or (nil? x) (nil? y))\n      acc\n      (recur xs ys (conj acc x y)))))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":39,"code":"(fn [seq1 seq2]\n   (flatten (let [fewest (min (count seq1) (count seq2))\n         newseq '()]\n     (for [i (range fewest)]\n       [(nth seq1 i)\n       (nth seq2 i)])))\n   )","user":"53d10553e4b00fb29b22130f"},{"problem":39,"code":"#(reduce concat '() (map list %1 %2))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":39,"code":"(fn [s1 s2]\n  (reduce (fn [v i]\n            (into v [(get s1 (-> v count (/ 2)))\n                     (get s2 (-> v count (/ 2)))]))\n          []\n          (if (< (count s1) (count s2))\n            (range (count s1))\n            (range (count s2)))))","user":"57a9e274e4b0b8559636fc5d"},{"code":"(fn my-interleave [a b] \n   (reverse (\n      (fn ilv [a b o] \n         (if (= (first a) nil)\n            o\n            (if (= (first b) nil) \n               o\n               (ilv (rest a) (rest b) (cons (first b) (cons (first a) o)))\n            )\n         )\n      )\n      a b []\n   ))\n)","problem":39,"user":"4ec17677535dfed6da9c6dad"},{"code":"(fn [c1 c2]\n  ((fn [c cA cB]\n    (if (or (empty? cA) (empty? cB))\n      c\n      (recur (concat c (list (first cA) (first cB)))\n             (rest cA)\n             (rest cB)\n      )\n    )\n  ) [] c1 c2)\n)","problem":39,"user":"4defd021535d08e6dec9fe13"},{"problem":39,"code":"(fn [coll1 coll2]\n   (loop [c3 []\n          c1 coll1\n          c2 coll2]\n     (if (or (empty? c1) (empty? c2))\n       c3\n       (recur (conj c3 (first c1) (first c2)) \n              (drop 1 c1)\n              (drop 1 c2)))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1\n         c2 c2\n         c '()]\n    (if (or (empty? c1) (empty? c2))\n      (reverse c)\n      (recur \n      \t(rest c1)\n       \t(rest c2)\n       \t(conj (conj c (first c1)) (first c2))))))","user":"561047eae4b05f002753df6d"},{"code":"(fn il [a1 a2]\r\n  (loop [x a1\r\n         y a2\r\n         res []]\r\n    (if (or (empty? x) (empty? y))\r\n      res\r\n      (recur (rest x) (rest y) (conj res (first x) (first y))))))","problem":39,"user":"4ff201d7e4b0678c553fc330"},{"code":"(fn intrl [x y]\n  (loop [s1 x s2 y rslt '()]\n    (if (or (empty? s1) (empty? s2)) \n      (reverse rslt)\n      (recur (rest s1) (rest s2) (conj rslt (first s1)(first s2))))))","problem":39,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":39,"code":";; was trying to use a for loop because I forgot how map works with collections\n#(mapcat list %1 %2)","user":"51642237e4b003cf19fdde31"},{"code":"(fn [& args] (apply mapcat (fn [& args] (apply conj [] args)) args))","problem":39,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [c1 c2]\n   (flatten\n    (map (fn [i1 i2] [i1 i2]) c1 c2)))","problem":39,"user":"50bd13dee4b0594b91591c65"},{"problem":39,"code":"(fn [a b]\n      (loop [l a\n             h b\n             coll []]\n        (if (or (nil? l)\n                (nil? h))\n          coll\n          (recur (next l) (next h) (conj coll (first l)\n                                         (first h))))))","user":"5386f784e4b06839e8705f17"},{"code":"(fn [c1 c2] (reduce into (map #(vector %1 %2) c1 c2)))","problem":39,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":39,"code":"mapcat #(concat (vector %1) (vector %2))","user":"57a13745e4b0c3d858beb8e3"},{"code":"(fn [sq1, sq2]\n  (loop [src1 sq1, src2 sq2, dest []]\n    (if (and (seq src1) (seq src2))\n      (recur\n        (rest src1)\n        (rest src2)\n        (conj dest (first src1) (first src2)))\n      dest)))","problem":39,"user":"4de760a3535d08e6dec9fdf9"},{"code":"(fn [coll1 coll2] (apply concat (map (fn [x y] [x y]) coll1 coll2)))","problem":39,"user":"4ed2a31c535d44c135fd68db"},{"problem":39,"code":"(fn interleave' [coll1 coll2]\n  (flatten (map vector coll1 coll2)))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":39,"code":"(fn f [[x & xs] [y & ys]] \n  (if (or (nil? xs) (nil? ys))\n    [x y]\n    (into [x y] (f xs ys))))","user":"56483562e4b0284900eef629"},{"code":"(fn [a b] (mapcat #(list % %2) a b))","problem":39,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":39,"code":"(fn f ([s1 s2]\n  (\n   f s1 s2 []\n   ))\n  ([s1 s2 acc](\n                      if (or (empty? s1) (empty? s2))\n                      \tacc\n               \t\t\t(recur (next s1) (next s2) (into acc [(first s1) (first s2)]))\n                      \n                      )\n   \n   )\n  \n  )","user":"56ae4c21e4b03c432f18735c"},{"problem":39,"code":"(fn new-interleave [a, b] (if (or (empty? a) (empty? b)) '() (concat [(first a)] [(first b)] (new-interleave (rest a) (rest b)))))","user":"53e92821e4b036ad0777e499"},{"problem":39,"code":"#(reduce (fn [s1 s2] (let [[a b] s2] (conj s1 a b))) []  (map list %1 %2))","user":"53e3e353e4b036ad0777e406"},{"problem":39,"code":"(fn interleave' [a b]\n  (lazy-seq\n    (let [s1 (seq a)\n          s2 (seq b)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2) (interleave' (rest s1) (rest s2))))))))","user":"5d0eed51e4b0cc9c91588262"},{"code":"(fn [x y] (mapcat #(conj [] %1 %2) x y))","problem":39,"user":"52563d02e4b0541d1855ba10"},{"code":"(fn [a b] (loop [[ha & ta] a [hb & tb] b result []]\n    (if (and ha hb)\n      (recur ta tb (conj result ha hb))\n    result)))","problem":39,"user":"4f171e7d535d64f603146452"},{"code":"(fn interl [f s]\n  (if (and (not (= f '()))\n           (not (= s '())))\n    (cons (first f)\n          (cons (first s)\n                (interl (rest f) (rest s))))\n    '()\n  ))","problem":39,"user":"4f74271ae4b044e54cd9a8f6"},{"code":"(fn i [a b]\n  (let [fa (first a) fb (first b) ra (rest a) rb (rest b)]\n    (when (and fa fb)\n      (cons fa (cons fb (i ra rb))))))","problem":39,"user":"5065f283e4b0313a384e5644"},{"problem":39,"code":"(fn [vs ws]\n  (reverse (loop [[x & xs] vs [y & ys] ws result '()]\n    (cond (nil? x) result\n          (nil? y) result\n          :else (recur xs ys (cons y (cons x result)))))))","user":"546176e7e4b01be26fd746a2"},{"problem":39,"code":"(fn\n   [coll1 coll2]\n   (mapcat vector coll1 coll2))","user":"548db64ce4b0e286459a121c"},{"code":"#(loop [l %1 r %2 result []]\n   (if (or (empty? l) (empty? r))\n     result\n     (recur (rest l) (rest r) (conj result (first l) (first r)))))","problem":39,"user":"512d3304e4b040332b905b2d"},{"problem":39,"code":"(fn [x y]\n  (flatten\n   (apply mapv vector [x y])\n   )\n  )","user":"55ba70f9e4b01b9910ae29d4"},{"problem":39,"code":"(fn [coll1 coll2] (flatten (map (fn [x y] (list x y)) coll1 coll2)))","user":"57efb417e4b0bfb2137f5bdc"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (when (and (not-empty xs) (not-empty ys))\n    (cons (first xs) (cons (first ys) (my-interleave (next xs) (next ys))))))","user":"58fff18be4b0438e51c2d00c"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map (fn [a b] (conj [a] [b])) seq1 seq2)))","user":"595b7c12e4b066ee0a44afda"},{"code":"(fn foo [a b]\n    (when (and (not-empty a) (not-empty b)) (concat [(first a) (first b)] (foo (rest a) (rest b)))))","problem":39,"user":"52cdc676e4b07d0d72b2737f"},{"problem":39,"code":"(fn [& vs] (apply mapcat vector vs))","user":"56ff45e5e4b08d47c97781bb"},{"problem":39,"code":"(fn [xs ys] (loop [xs xs\n                   ys ys\n                   acc ()]\n              (if (or (empty? xs) (empty? ys))\n                (reverse acc)\n                (recur (rest xs) (rest ys) (cons (first ys) (cons (first xs) acc))))))","user":"547ad587e4b0c51c1f4d72ce"},{"code":"(fn f [a b] (if (or (empty? a) (empty? b) )\n             []\n            (concat [ (first a) (first b)] (f (next a) (next b)))\n            ) \n  )","problem":39,"user":"51aeb1f4e4b09397d5109794"},{"code":"(comp flatten map) list","problem":39,"user":"4e71da4d535d5021c1a89653"},{"code":"(fn foo[acc lst1 lst2] \n  (if \n    (or \n     (empty? lst1) \n     (empty? lst2)\n     )\n    acc\n    (foo \n     (concat \n      acc\n      (list (first lst1) (first lst2))\n      )\n     (rest lst1)\n     (rest lst2)\n     )\n    )\n  ) '()","problem":39,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn zip [l1 l2]\n  (if (or (nil? (first l2)) (nil? (first l1)))\n    ()\n\t(let [f1 (first l1) f2 (first l2)]\n      (concat (concat (cons f1 ()) (cons f2 ())) (zip (rest l1) (rest l2))))\n  \t)\n  )","problem":39,"user":"5349a39de4b084c2834f4a65"},{"code":"#(flatten \n  (for [i (range (min (count %1) (count %2)))\n        :let [x (nth %1 i) y (nth %2 i)]] \n    [x y]))","problem":39,"user":"522f988be4b032bbe3424168"},{"code":"(fn [a b] (reduce\n  #(conj %1 (nth a %2) (nth b %2)) []\n    (range (apply min (map count [a b])))))","problem":39,"user":"4f8ab084e4b02e764a0a5171"},{"problem":39,"code":"(fn [init-s1 init-s2]\n  (loop [s1 init-s1\n         s2 init-s2\n         r []]\n    (if (or (empty? s1) (empty? s2))\n      (seq r)\n      (recur (rest s1) (rest s2) (conj r (first s1) (first s2))))))","user":"57addbcce4b0b8559636fca3"},{"problem":39,"code":"(fn [col1 col2] (mapcat #(vector %1 %2) col1 col2))","user":"55df1985e4b050e68259b3eb"},{"problem":39,"code":"#(apply concat (map (fn [x1 x2] [x1 x2]) %1 %2))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":39,"code":"(fn c [x y]\n    (if (or (empty? x) (empty? y))\n        ()\n        (cons (first x) (cons (first y) (c (rest x) (rest y))))))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [s1 s2]\n  ((fn iter [s1 s2 s-out]\n    (if (or (empty? s1) (empty? s2))\n      s-out\n      (iter (rest s1) (rest s2) (conj s-out (first s1) (first s2)))))\n  s1 s2 []))","problem":39,"user":"4fe8e771e4b0547ebccb2431"},{"problem":39,"code":"(fn [x y]\n  (flatten (map list x y)))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn my-inter [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                             (my-inter (rest s1) (rest s2)))))))","problem":39,"user":"4ff58b05e4b0678c553fc36b"},{"code":"(fn [acc a b] (if (or (empty? a) (empty? b)) acc\n  (recur (conj acc (first a) (first b)) (rest a) (rest b)))) []","problem":39,"user":"4e4a94a9535dc968683fc4cd"},{"problem":39,"code":"#(loop [result [] colls %&]\n   (if (some empty? colls)\n       result\n       (recur (concat result (map first colls)) (map rest colls))\n    ))","user":"564b1ff8e4b0284900eef663"},{"problem":39,"code":"(fn [first-list second-list]\n  (let [len (min (count first-list) (count second-list))]\n    (loop [result (empty first-list) index 0]\n      (if (>= index len)\n        result\n        (recur (conj result (nth first-list index) (nth second-list index)) (inc index))))))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [outcoll coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    outcoll\n    (recur (conj outcoll (first coll1) (first coll2))\n      (rest coll1)\n      (rest coll2))))\n[]","problem":39,"user":"4e7f3891535db966e863cc3b"},{"code":"(fn h [x y]\n  (if (or (empty? x) (empty? y)) '()\n    (cons (first x) (cons (first y) (h (rest x) (rest y))))))","problem":39,"user":"502d39f8e4b0d96a44ab2032"},{"problem":39,"code":"(fn new-interlace \n  ([a b] (new-interlace a b true))\n  ([a b t] (if (empty? b)\n             (if t\n               []\n               [(first a)])\n             (cons (first a) (new-interlace b (rest a) (not t))))))","user":"58c3af4de4b021aa9917ed1b"},{"problem":39,"code":"(fn interleeve [a b]\n  (loop [s1 a s2 b s3 '()]\n    (cond\n     (or (empty? s1) (empty? s2)) (reverse s3)\n     :else (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) s3))))))","user":"53bc10f5e4b047364c04450d"},{"code":"(fn myinterleave [l1 l2]\n  (if (some empty? (list l1 l2))\n    '()\n    (concat (list (first l1) (first l2))\n            (myinterleave (rest l1) (rest l2)))\n))","problem":39,"user":"50c84ba2e4b00bb60fe0c53e"},{"code":"(fn my-inter [xs ys]\n  (loop [x   xs \n         y   ys\n         i   '()]\n    (if (or (empty? x) (empty? y))\n      (reverse  i) \n      (recur (rest x) (rest y) (conj i (first x) (first y))))))","problem":39,"user":"504e9011e4b069badc5a33b7"},{"code":"(fn [xs ys]\n\t\t(mapcat #(vector %1 %2) xs ys))","problem":39,"user":"50eafeaae4b0346a3e988cbb"},{"problem":39,"code":"#(let [iter (min (count %1) (count %2))]\n    (loop [pos 0\n           result '()]\n      (if (= pos iter)\n        result\n        (recur (inc pos) (concat result [(nth %1 pos) (nth %2 pos)])))))","user":"5a4d656fe4b05d388ecb6ba9"},{"problem":39,"code":"(fn [c1 c2] (mapcat #(list % %2) c1 c2))","user":"56441634e4b0018b46ad8c08"},{"problem":39,"code":"(fn [one two] (loop [i 0,end (min (count one) (count two)) , coll [] ] (\n                                                                                if (= i end)\n                                                                                coll\n                                                                                (recur (inc i) end (conj coll (nth one i) (nth two i)))\n                                                                                )))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":39,"code":"(fn [l1 l2]\n  (flatten \n   (map #(vector %1 %2) l1 l2)\n  )\n)","user":"5da975b9e4b000c986472c32"},{"problem":39,"code":"(fn [col1 col2]\n  (apply concat (map #(list %1 %2) col1 col2)))","user":"587b8bdee4b01531a375eaff"},{"problem":39,"code":"#(loop [x % y %2 res []]\n        (if (or (nil? x) (nil? y))\n          res\n          (recur (next x) (next y) (conj res (first x) (first y)))))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":39,"code":"(fn [seqa seqb] (flatten (map #(vector %1 %2) seqa seqb)))","user":"54a6baaee4b09f271ff37c8a"},{"code":"(fn [x y]\n    (loop [la x lb y ll []]\n     (if (or (= la []) (= lb []))\n       ll\n       (recur (remove #{(first la)} la) (remove #{(first lb)} lb)\n              (concat ll (concat [(first la)] [(first lb)]) ))\n       )))","problem":39,"user":"5262d2d0e4b03e8d9a4a709a"},{"code":"(fn [s t] (mapcat #(conj [%] %2) s t))","problem":39,"user":"50464831e4b011c5dfee771f"},{"problem":39,"code":"(fn [coll-a coll-b]\n  (loop [first-coll coll-a\n         second-coll coll-b\n         final []]\n    \n    (if (or (empty? first-coll) (empty? second-coll))\n      final\n      (recur (rest first-coll) (rest second-coll) (conj final (first first-coll) (first second-coll))))))","user":"50738138e4b054001656acc9"},{"problem":39,"code":"(fn [xs ys]\n  (let [intr (fn wha [xss yss acc]\n               (let [hx (first xss) tx (rest xss) hy (first yss) ty (rest yss)]\n                 (if (or (empty? tx) (empty? ty)) (concat acc (list hx hy)) (wha tx ty (concat acc (list hx hy))))))]\n  (intr xs ys '())))","user":"577f9799e4b0d36ec5835e67"},{"code":"(fn [x y]\n  (into [] (flatten (map vector x y))))","problem":39,"user":"509fa9b5e4b08df8156e9e3f"},{"problem":39,"code":"(fn my-interleave [x y] (if (or (-> x (count) (= 1)) (-> y (count) (= 1)))\n            (cons (first x) (list (first y)))\n            (cons (first x) (cons (first y) (my-interleave (rest x) (rest y))))\n            ))","user":"6093cc08e4b00e9e6653c3e1"},{"code":"(fn zip [a b] (cond (or (empty? a) (empty? b)) nil\n                     :else (cons (first a) (cons (first b) (zip (rest a) (rest b))))))","problem":39,"user":"528b9efee4b0239c8a67aea0"},{"problem":39,"code":"(fn intrlv [x y] (\n     if(or(empty? y) (empty? x))\n     '()\n     (flatten(list(first x)(first y)(intrlv (rest x) (rest y))))\n))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 s3 '()]\n   (if (or (empty? s1) (empty? s2))\n     (reverse s3)\n     (recur (rest s1) (rest s2)\n            (cons (first s2)\n                  (cons (first s1) s3)))))","user":"5721dfc3e4b0c5bde472c0bb"},{"code":"(fn interl [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) \n                             (interl (rest s1) (rest s2)))))))","problem":39,"user":"508dc047e4b0f17d83ea26c3"},{"code":"(fn interleave1 [c1 c2]\n  (let [s1 c1 s2 c2]\n    (if (or (empty? s1) (empty? s2))\n\t\t'()\n      (cons (first s1) (cons (first s2) (interleave1 (rest s1) (rest s2)))))))","problem":39,"user":"52c915a6e4b0c2d177d6213b"},{"code":"(fn [s1 s2]\n    (flatten (for [x (range (min (count s1) (count s2)))]\n       [(nth s1 x) (nth s2 x)])))","problem":39,"user":"53489329e4b084c2834f4a5b"},{"code":"(fn [lst1 lst2]\n  (let [cnt (min (count lst1) (count lst2)) \n        mp1 (fn [vl] (clojure.core/list vl (nth (take cnt lst2) (.indexOf (take cnt lst1) vl))))]\n    (mapcat mp1 (take cnt lst1))))","problem":39,"user":"51c76864e4b07ef393169e3f"},{"problem":39,"code":"(fn [lst1 lst2]\n     (mapcat \n      #(list (lst1 %) (lst2 %))\n      (range (min (count lst1) (count lst2)))))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"(fn [c1 c2] (mapcat #(conj [%1] %2) c1 c2))","problem":39,"user":"4e539f7e535d8a8b8723a272"},{"problem":39,"code":"#(\n   (fn [p q r]\n     (if (or (empty? p) (empty? q))\n       r\n       (recur (vec (rest p))\n                  (vec (rest q))\n                  (conj r (first p) (first q)))))\n    %1 %2 [])","user":"5c13ce5ee4b01240ff5671a4"},{"code":"(fn f [c d] (let [a (seq c) b (seq d)] (when (and a b) (cons (first a) (cons (first b) (f (rest a) (rest b)))))))","problem":39,"user":"50ed4626e4b01236b1d4983c"},{"problem":39,"code":"(fn f\n  ([keys vals]\n   (f keys vals []))\n  ([keys vals res]\n   (let [[k & ks] keys\n         [v & vs]  vals]\n     (if (and k v)\n       (recur ks vs (concat res [k v]))\n       res))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":39,"code":"(fn [x y](flatten (reverse (into [] (zipmap x y)))))","user":"560331dee4b04bb52996e1b5"},{"code":"(fn interleave2 [coll1 coll2]\n  (let [c1 (seq coll1) c2 (seq coll2)]\n    (if (or (not c1) (not c2))\n      '()\n      (lazy-seq (conj (interleave2 (rest c1) (rest c2)) (first c2) (first c1))))))","problem":39,"user":"51a97f7ae4b08d8ec191b827"},{"problem":39,"code":"(fn [n m]\n  (loop [seq1 n seq2 m result []]\n    (if (or (empty? seq1) (empty? seq2))\n      result\n      (recur (rest seq1) (rest seq2) (conj result (first seq1) (first seq2))))))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn f\r\n   ([x y ret]\r\n      (if (or (empty? x)\r\n              (empty? y))\r\n        ret\r\n        (f (rest x) (rest y) (concat ret (list (first x) (first y))))))\r\n   ([x y] (f x y nil)))","problem":39,"user":"4e059278535d04ed9115e7a5"},{"problem":39,"code":"(fn [one two]\n  (loop [first-col (seq one) second-col (seq two) result []]\n    (if (and (first second-col) (first first-col))\n        (recur (rest first-col) (rest second-col) \n               (conj result (first first-col) (first second-col)))\n        result)))","user":"5694e9c5e4b0dcc4269f4123"},{"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         s []]\n    (if (not (and (seq s1) (seq s2)))\n      s\n      (recur (rest s1) (rest s2) (conj s (first s1) (first s2))))))","problem":39,"user":"4dc1e1e4535d020aff1edf90"},{"problem":39,"code":"(fn interleaveIt [colla collb]\n  (loop [coll1 colla coll2 collb together []]\n    (if (or (empty? coll1) (empty? coll2))\n      together\n      (recur (rest coll1) (rest coll2) (conj together (first coll1) (first coll2)))\n    )\n  ))","user":"57131dfbe4b07c98581c3a98"},{"problem":39,"code":"(fn [cl1, cl2]\n  (loop [l1 cl1, l2 cl2, l3 []]\n  \t(cond (or (empty? l1) (empty? l2)) l3\n  \t:else (recur (rest l1) (rest l2) (concat l3 (list (first l1) (first l2)))))))","user":"54897284e4b0e286459a11e6"},{"problem":39,"code":"(fn [v1 v2] (reduce (fn [a b] (concat a [(nth v1 b) (nth v2 b)])) [] (range 0 (min (count v1) (count v2)))))","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [seq1 seq2]\n  (mapcat\n   #(list %1 %2)\n   seq1\n   seq2))","problem":39,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"#(loop [col1 %1 col2 %2 result []]\n   (if (or (empty? col1) (empty? col2)) result\n     (recur (rest col1) (rest col2) (conj result (first col1) (first col2)))\n   ))","problem":39,"user":"510d3dc6e4b078ea71921132"},{"problem":39,"code":"(fn [sq1 sq2]\n  ((fn intr-leave [current index s1 s2]\n    (cond (= index\n             (* (min (count sq1)\n                     (count sq2)) 2)) nil\n          (= (rem index 2)\n           \t\t0) (conj (intr-leave (first s2)\n                                     (+ index 1)\n                                     s1\n                                     (rest s2))\n                         current)\n          :else (conj (intr-leave (first s1)\n                                  (+ index 1)\n                                  (rest s1)\n                                  s2)\n                      current))) (first sq1) 0 (rest sq1) sq2))","user":"57614a42e4b0994c1922fb85"},{"problem":39,"code":"(fn [x y]\n  (loop [xs x ys y r []]\n    (if (or (not (seq xs)) (not (seq ys))) r\n       (recur (rest xs) (rest ys) (conj r (first xs) (first ys))))))","user":"5e12327ee4b099d064962fe5"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [seq1 s1 seq2 s2 result '()]\n    (if (or (empty? seq1) (empty? seq2))\n      (reverse result)\n      (recur (rest seq1) (rest seq2) (conj result (first seq1) (first seq2))))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn [x y]\n  (loop [r [] col1 x col2 y]\n    (if (and (seq col1) (seq col2))\n      (recur (conj r (first col1) (first col2)) \n        (rest col1) (rest col2)) r)))","problem":39,"user":"4e83b1af535db62dc21a62dc"},{"problem":39,"code":"(fn interl [s1 s2]\n\t(if (= (count s1) 0)\n\t\t'()\n\t\t(if (= (count s2) 0)\n\t\t\t'()\n\t\t\t(conj (interl (rest s1) (rest s2)) (first s2) (first s1))\n\t\t\t)\n\t\t)\n\n\t)","user":"5a025edde4b01bb0ae8afd64"},{"problem":39,"code":"(fn myinter [as bs]\n\t(let [a (first as) ass (rest as) b (first bs) bss (rest bs)] \n      (if (empty? ass) (list a b)\n        (if (empty? bss) (list a b)\n          (concat (list a b) (myinter ass bss))))))","user":"6058e0a0e4b032d51aa7730d"},{"problem":39,"code":"(fn [x y] (mapcat (fn [a b] (cons a (cons b ()))) x y))","user":"570eeca5e4b0b0fb43fd06fb"},{"problem":39,"code":"(fn problem39-interleave [xs ys]\n  (flatten (map vector xs ys)))","user":"57717915e4b0979f896515b3"},{"problem":39,"code":"(fn [x y] (apply concat(map #(seq [%1 %2]) x y)))","user":"58eed4c5e4b056aecfd47db7"},{"code":"(fn myinterleave\r\n     ([coll1 coll2] (myinterleave coll1 coll2 []))\r\n     ([coll1 coll2 coll3]\r\n       (cond\r\n         (empty? coll1) coll3\r\n         (empty? coll2) coll3\r\n         :else\r\n           (recur (rest coll1) (rest coll2) (conj (conj coll3 (first coll1)) (first coll2))))))","problem":39,"user":"4dddff47535d08e6dec9fdd4"},{"problem":39,"code":"#(loop [l1 %1, l2 %2, res []]\n   (if (and (seq l1) (seq l2))\n     (recur (rest l1) (rest l2) (into res [(first l1) (first l2)]))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n        y y\n        l ()]\n    (if (and (first x) (first y))\n      (recur (next x) (next y) (list* (first y) (first x) l))\n      (reverse l))))","user":"5fea32f3e4b05ac5b16ea1aa"},{"code":"(fn myinterleave \n        ([xs ys] \n           (myinterleave xs ys []))\n        ([xs ys acc]\n           (if (or (empty? xs) (empty? ys))\n             acc\n             (myinterleave (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","problem":39,"user":"52c58561e4b0c2d177d620f8"},{"code":"(fn interleave* [xs ys]\n  (lazy-seq\n    (when (not (or (empty? xs) (empty? ys)))\n      (cons (first xs) (cons (first ys) (interleave* (rest xs) (rest ys)))))))","problem":39,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn interleave* [[x1 & c1] [x2 & c2]]\n  (and x1 x2\n       (concat [x1 x2]\n               (interleave* c1 c2))))","problem":39,"user":"52ab6de1e4b0c58976d9ac78"},{"code":"(fn [a b]\n(apply concat (map vector a b)))","problem":39,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 result []]\n    (if (or (empty? s1) (empty? s2)) \n         result\n        (recur (rest s1) (rest s2) (conj result (first s1) (first s2))))))","user":"4eaa66eb535d7eef3080730b"},{"code":"#(apply list (loop\n  [c []\n    a %1 \n    b %2]\n    (if (or (= 0 (count a)) (= 0 (count b))) c\n      (recur (conj (conj c (first a)) (first b)) \n      (rest a) \n      (rest b)))))","problem":39,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"(fn myfun [colla collb] (if (or (empty? colla) (empty? collb)) '() (cons (first colla) (cons (first collb) (myfun (rest colla) (rest collb))))))","problem":39,"user":"511937eee4b055cfb310d495"},{"code":"#(letfn [(zip [xs ys]\r\n          (if (or (empty? xs) (empty? ys))\r\n\t\t        '()\r\n\t\t        (conj (zip (rest xs) (rest ys)) (first ys) (first xs))))]\r\n  (zip %1 %2))","problem":39,"user":"4e273301535deb9a81d77ef7"},{"code":"(fn [seq1 seq2]\n  (loop [results [] a seq1 b seq2]\n    (prn a)\n    (prn b)\n    (if (or (empty? a) (empty? b))\n      results\n      (recur (conj (conj results (first a)) (first b)) (rest a) (rest b)))))","problem":39,"user":"4ee52c44535d1385b2869d88"},{"code":"(fn my-interleave [seq1 seq2]\n  (loop [a seq1\n         b seq2\n         newseq []]\n    (if (not (or (empty? a) (empty? b)))\n      (recur (rest a) (rest b) (concat newseq [(first a) (first b)]))\n      newseq)))","problem":39,"user":"4ff89ae0e4b0678c553fc39a"},{"problem":39,"code":"(fn dd [x y] (if (or (empty? x) (empty? y)) () (cons (first x) (cons (first y) (dd (rest x) (rest y))))))","user":"544e1794e4b0e39780006980"},{"problem":39,"code":"(fn intleave\n  [a b]\n  (loop [x a, y b, result []]\n    (cond\n     (or (empty? x) (empty? y)) result\n     :else (recur (next x), (next y), (conj result (first x) (first y))))))","user":"56e99ec8e4b04a395b9a03fb"},{"code":"(fn [seq1 seq2]\n    (flatten (map (fn [one, two] (list one two)) seq1 seq2)))","problem":39,"user":"4f0385b9535dcb61093f6b0e"},{"code":"(fn [x y]\n  (loop [f (rest x)\n         s (rest y)\n         z [(first x) (first y)]]\n    (if (or (empty? f) (empty? s))\n            z\n            (recur (rest f) (rest s) (flatten [z [(first f) (first s)]])))))","problem":39,"user":"4e8dd6cb535d65386fec213b"},{"problem":39,"code":"(fn [coll1 coll2]\n  (let [len (min (count coll1) (count coll2))]\n    (loop [n len, coll1 coll1, coll2 coll2, result []]\n      (if (<= n 0)\n        result\n        (recur (- n 1) \n               (rest coll1) \n               (rest coll2) \n               (conj result (first coll1) (first coll2)))))))","user":"59225498e4b09b4ee5954c8c"},{"problem":39,"code":"(fn [x y] (loop [l_x x l_y y l_xy nil] (if (or (empty? l_x) (empty? l_y)) (reverse l_xy) (recur (rest l_x) (rest l_y) (cons (first l_y) (cons (first l_x) l_xy))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [a b]\n   (mapcat #(list %1 %2) a b))","problem":39,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [a b] \n  (mapcat #(list %1 %2) a b)\n)","problem":39,"user":"4e6f8d36535d5021c1a89621"},{"code":"(fn mix [ls rs]\n  (if (and (seq ls) (seq rs))\n    (cons (first ls) (cons (first rs) (mix (rest ls) (rest rs))))))","problem":39,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn inter [c1 c2]\n       (if (and (not-empty c1) (not-empty c2))\n         (concat [(first c1) (first c2)] (inter (rest c1) (rest c2)))\n         []))","problem":39,"user":"4e5676b2535d8a8b8723a282"},{"code":"(fn [a b]\n  (loop [acc [] a a b b]\n    (if (and (seq a) (seq b))\n      (recur (conj acc (first a) (first b))\n             (rest a) (rest b))\n      acc)))","problem":39,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [sq1 sq2] (apply concat (map list sq1 sq2)))","problem":39,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [q1 s1 q2 s2 nw '()]\n    (if (or (empty? q1)\n            (empty? q2)) nw\n      (recur (rest q1)\n             (rest q2)\n             (concat nw (list (first q1)\n                   (first q2)))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":39,"code":"#(apply concat (map (fn [a b] (identity [a b])) %1 %2))\n\n; Like this solutions\n;\n; mapcat list\n; mapacat vector","user":"5eccc5c2e4b016b56eae058f"},{"problem":39,"code":"(fn my-ln [seq1 seq2]\n  (when-not (or (empty? seq1) (empty? seq2))\n    (cons (first seq1) (cons (first seq2) (my-ln (rest seq1) (rest seq2)))\n   )))","user":"5ac383b8e4b0e27600da7719"},{"problem":39,"code":"(fn [s1 s2]\n   (letfn \n    [(inter*\n       [s1 s2]\n       (let [c1 (seq s1)\n             c2 (seq s2)]\n         (when (and c1 c2)\n           (cons (first c1) (cons (first c2)\n                                  (inter* (rest c1) (rest c2)))))))]\n     (inter* s1 s2)) )","user":"5ed4b1e8e4b016b56eae05ce"},{"code":"(fn [a b]\n  (loop [a a b b ret []]\n  (if (or (empty? a) (empty? b))\n    ret\n    (recur (rest a) (rest b) (concat ret [(first a) (first b)])))))","problem":39,"user":"4e80aa10535db62dc21a62b1"},{"problem":39,"code":"(fn my-interleave[lst1 lst2]\n  (loop [result [] v1 lst1 v2 lst2]\n    (if (or (= () v1) (= () v2))\n      result\n      (recur (conj (conj result (first v1)) (first v2))\n\t     (rest v1)\n\t     (rest v2)))))","user":"578f8a0ae4b0ebec4cfb7596"},{"code":"(fn my-interleave [s1 s2] (if (and (first s1) (first s2)) (concat (list (first s1) (first s2)) (my-interleave (next s1) (next s2)))))","problem":39,"user":"52bdf6bde4b07a9af579230d"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a) (first b)] (my-interleave (next a) (next b)))))","user":"524e79c1e4b0541d1855b7e0"},{"code":"(fn inter\n  [x y]\n    (if (or (empty? x) (empty? y))\n      '()\n      (cons (first x) (cons (first y) (inter (rest x) (rest y))))))","problem":39,"user":"4e84f77c535db62dc21a62e5"},{"code":"(fn [seq1 seq2] (let [minval (min (count seq1) (count seq2))] (flatten (take-nth (inc minval) (for [x (take minval seq1) y (take minval seq2)] [x y])))))","problem":39,"user":"5003bb77e4b0678c553fc442"},{"problem":39,"code":"(fn intersec [first-s last-s]\n  (let\n    [fs (seq first-s)\n     ls (seq last-s)]\n    (when \n      (and fs ls)\n      (cons (first fs) (cons (first ls) (intersec (rest fs) (rest ls))))\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"code":"(fn i[a b] \n  (lazy-seq (let [c (seq a) d (seq b)]\n    (when (and c d)\n     (cons (first c) \n        (cons (first d) (i (rest c) (rest d))))))))","problem":39,"user":"4f4c8faae4b03ad3f0c10c93"},{"problem":39,"code":"#(loop [x %1 y %2 z []] (if (or (empty? x) (empty? y)) z (recur (rest x) (rest y) (conj z (first x) (first y)))))","user":"586631a2e4b0f14aab7c885a"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [tail1 (seq s1)\n         tail2 (seq s2)\n         r []]\n    (if (or (empty? tail1) (empty? tail2))\n      r\n      (recur (rest tail1) (rest tail2) (conj r (first tail1) (first tail2))))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":39,"code":"(fn [a b]\n  (loop [x a y b r []]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (concat r [(first x) (first y)]))\n     )))","user":"598229d6e4b021a7a535fdfb"},{"code":"#(reverse (mapcat reverse (zipmap %1 %2) ))","problem":39,"user":"50b0804de4b009df37c708bb"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    '()\n    (conj (my-interleave (rest coll1) (rest coll2)) (first coll2) (first coll1))))","user":"545d881de4b01be26fd7466f"},{"problem":39,"code":"#(flatten(apply map list %&))","user":"54187e84e4b01498b1a71a1b"},{"problem":39,"code":"#(->> (map vector %1 %2) (reduce into))","user":"5da98129e4b000c986472c33"},{"problem":39,"code":"(fn foo2 [_l _r]\n   (filter\n      #(not (nil? %))\n      (\n         (fn foo [l r]\n            (if (or (nil? (first l)) (nil? (first r))) \n               nil\n               (concat (list (first l)) (list (first r)) (foo (rest l) (rest r)))\n            )\n         )\n         _l\n         _r\n      )\n   )\n)","user":"5fdc04d8e4b05ac5b16ea138"},{"code":"(fn [col1 col2]\n  (mapcat (fn [v1 v2] [v1 v2]) col1 col2))","problem":39,"user":"4fbf2818e4b081705acca317"},{"code":"#(mapcat (fn [x y] [x y]) % %2)","problem":39,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [s t]\n        (loop [s s t t x '()]\n         (if (or (empty? s) (empty? t)) (reverse x)\n            (recur (rest s) (rest t) (cons (first t) (cons (first s) x)))))\n\n     )","problem":39,"user":"5029fccee4b023940c84aa47"},{"problem":39,"code":"(fn [init-coll1 init-coll2]\n  (loop [output []  coll1 init-coll1 coll2 init-coll2]\n    (if (or (empty? coll1) (empty? coll2))\n      output\n      (recur \n       (conj output (first coll1) (first coll2))\n       (rest coll1)\n       (rest coll2)))))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn [col1 col2]\n  (mapcat #(list %1 %2) col1 col2))","problem":39,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":39,"code":"#(->> %2 (zipmap %) (into ()) flatten)","user":"53dc05d4e4b094d41abdfefa"},{"problem":39,"code":"(fn [v1 v2]\n  (flatten \n   (for [i (range 0 (min (count v1)(count v2)))\n         :let [x (nth v1 i)\n               y (nth v2 i)]]\n     [x y])))","user":"514992d2e4b0b64cbeae1848"},{"problem":39,"code":"(fn interl [& colls] (->> colls\n                            first\n                            (map-indexed (fn [idx itm] (map #(get %1 idx) colls)))\n                            (take (apply min (map count colls)))\n                            (apply concat)))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [a b]\n  (mapcat #(list %1 %2) a b))","problem":39,"user":"4feff3b6e4b0678c553fc31e"},{"code":"(fn[l1 l2]\n  (loop [xs l1\n         ys l2\n         l '[]]\n    (let [x (first xs)\n          y (first ys)]\n      (if (or (nil? x)(nil? y))\n        l\n        (recur (rest xs)\n               (rest ys)\n               (conj l x y)\n               )))))","problem":39,"user":"502f6c56e4b0842eb223d8bb"},{"problem":39,"code":"(fn il [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n   (concat \n    \t(list (first s1) (first s2))\n   \t  (il (rest s1) (rest s2))\n    )\n  )\n)","user":"5d641841e4b0c9e5857d502e"},{"problem":39,"code":"(fn [seq1 seq2] (loop [accum '() a-seq1 seq1 b-seq2 seq2]\n                  (if (or (empty? a-seq1) (empty? b-seq2)) (reverse accum)\n                    (recur (conj accum  (first a-seq1) \n                                 (first b-seq2)) (rest a-seq1) (rest b-seq2)))))","user":"52fdbf3ae4b047fd55837032"},{"problem":39,"code":"#(reduce into [] (mapv (fn [& args] args) % %2))","user":"5dbd51cfe4b09f47823971bb"},{"problem":39,"code":"(fn my-interleve [i1 i2]\n  (loop [result [] x i1 y i2]\n    (if (and (not-empty x) (not-empty y))\n      (recur (conj result (first x) (first y)) (rest x) (rest y))\n      result)))","user":"561bb8dbe4b064ca9f4b1686"},{"problem":39,"code":"(fn furp [x y]\n  (if (or (empty? x) (empty? y))\n    []\n  (list* (first x) (first y) (furp (rest x) (rest y))))\n  )","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"(fn jseq [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n  ()  \n  (cons (first s1) (cons (first s2) (jseq (rest s1) (rest s2))))))","problem":39,"user":"5226f9b8e4b04e78ff2e199b"},{"code":"(comp flatten map) #(list %1 %2)","problem":39,"user":"4e89e939535d3e98b8023287"},{"problem":39,"code":"(fn foo [coll1 coll2]\n  (when-not (or (empty? coll1) (empty? coll2))\n    (concat (list (first coll1) (first coll2)) (foo (rest coll1) (rest coll2)))))","user":"52b36925e4b0c58976d9ad0b"},{"problem":39,"code":"(fn self [a b]\n  (if (or (empty? a) (empty? b)) \n    []\n    (concat [(first a) (first b)] (self (rest a) (rest b))) ))","user":"58a5a099e4b01a0c0b232918"},{"code":"(fn [xs, ys]\n  (reduce concat (map vector xs ys))\n)","problem":39,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn ileave\r\n  [lista listb]\r\n  (if (and (> (count lista) 0) (> (count listb) 0))\r\n    (conj (ileave (rest lista) (rest listb)) (first listb) (first lista))))","problem":39,"user":"4e8a0c82535d3e98b802328d"},{"problem":39,"code":"(fn [x y] \n  ( apply concat (map list x y)))","user":"5ef4fca7e4b07c55ae4a0546"},{"problem":39,"code":"#(flatten(map vector %1 %2))","user":"544e8369e4b0e39780006987"},{"problem":39,"code":"(fn foo [x y]\n\n\n  (if (and (> (count x) 0 ) (> (count y) 0) )\n\n      (conj (foo (rest x) (rest y))  (first y) (first x))\n\n  )\n\n)","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"#(flatten (reduce conj '() (zipmap %1 %2)))","problem":39,"user":"4e9be708535dbda64a6f6b79"},{"code":"(fn il [a b] \n   (if (and (not-empty a) (not-empty b))\n   (concat \n     [(first a) (first b)]\n     (il (next a) (next b))\n   )\n   []\n   ))","problem":39,"user":"534d1173e4b084c2834f4a98"},{"code":"(fn [s1 s2]\n  (flatten\n    (map #(list %1 %2) s1 s2)))","problem":39,"user":"4ee3afde535d10e5ff6f5370"},{"problem":39,"code":"#(loop [a %1 b %2 acc []] (if (or (empty? a) (empty? b)) acc (recur (rest a) (rest b) (conj acc (first a) (first b)))))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":39,"code":"(fn [x y] (mapcat list x y ))","user":"594e6b8ce4b07ddc2dafaeac"},{"code":"(fn [seq1 seq2]\n  (mapcat #(list %1 %2) seq1 seq2))","problem":39,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [a b] \n    (loop [a a b b acc []] \n      (if (or (empty? a) (empty? b)) \n        acc\n        (recur (rest a) (rest b) (concat acc [(first a) (first b)])))))","problem":39,"user":"511dada0e4b0a5c68a34840c"},{"problem":39,"code":"(fn [a b]\n  (loop [[headA & tailA] a\n         [headB & tailB] b\n         acc []]\n    (if (or (empty? tailA) (empty? tailB))\n      (conj acc headA headB)\n      (recur\n        tailA\n        tailB\n        (conj acc headA headB)))))","user":"5e3a8929e4b01d43a70e8de3"},{"problem":39,"code":"(fn interleave-two-seqs\n  [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         result []]\n    (if (or (empty? s1)\n            (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (conj result (first s1) (first s2))))))","user":"57d174ede4b0bd073c20236c"},{"problem":39,"code":"(fn [a b]\n  (reverse (reduce (fn [acc idx] (conj acc (get a idx) (get b idx))) '() (range (min (count a) (count b)))))\n)","user":"5a78cd9ee4b013a48d399777"},{"problem":39,"code":"(fn [col1 col2] \n  (flatten \n   (for [ x (range (min (count col1) (count col2)))] \n        [(nth col1 x) (nth col2 x)])\n   )\n)","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":39,"code":"(fn [a b] (mapcat (fn [& x] x) a b))","user":"5552b617e4b0deb715856df8"},{"problem":39,"code":"(fn [c1 c2] (flatten (map vector c1 c2)))","user":"5aa2dc5ae4b0d174b936c861"},{"code":"#(loop [odp [] x % y %2] (if (or (empty? x) (empty? y)) odp \r\n(recur (conj (conj odp (first x)) (first y)) (rest x) (rest y))))","problem":39,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [res [] c1 col1 c2 col2]\n    (if (or (zero? (count c1)) (zero? (count c2)))\n      res\n      (recur\n        (-> res\n            (conj (first c1))\n            (conj (first c2))\n            ) (rest c1) (rest c2)))))","user":"5af39788e4b0cc2b61a3bc8a"},{"code":"(fn zip [elemsA elemsB]\n  (loop [elsA elemsA elsB elemsB acc []]\n    (if (or (empty? elsA) (empty? elsB))\n      acc\n      (recur (drop 1 elsA) (drop 1 elsB) (conj acc (first elsA) (first elsB))))))","problem":39,"user":"51df505be4b01188f062752a"},{"code":"(fn [s1 s2] (loop [x s1 y s2 res []]\n                  (cond\n                    (or (empty? x) (empty? y)) res\n                    :else (recur (rest x) (rest y) \n                              (conj (conj res (first x)) (first y))))))","problem":39,"user":"4fab1bede4b081705acca20f"},{"code":"(fn [f l]\n  (flatten (map #(vector %1 %2) f l)))","problem":39,"user":"4e52777f535d302ef430da76"},{"code":"(fn [ l m] (flatten (map (fn [x y] [x y]) l m) ) )","problem":39,"user":"530c15f7e4b02e82168697d6"},{"problem":39,"code":"(fn my-interleave [a b] (reduce concat\n                            (map #(conj [] %1 %2 ) (seq a) (seq b))))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":39,"code":"(fn itl [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (cons (first x) (cons (first y) (itl (rest x) (rest y))))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":39,"code":"(fn myinterleave [l1 l2]\n  (if (or (= 0 (count l1)) (= 0 (count l2)))\n    (list)\n    (cons (first l1) (cons (first l2) (myinterleave (rest l1) (rest l2))))))","user":"59258aa7e4b072a2710fce74"},{"code":"(fn my-interleave [x y] (if (<  0 (min (count y) (count x)))\n                                 (conj (my-interleave (rest x) (rest y)) (first y) (first x)) \n                                 '()))","problem":39,"user":"5296aa9be4b02ebb4ef75034"},{"problem":39,"code":"(fn [x y] \n  (loop [[x & xs] x\n         [y & ys] y\n         res '()]\n    (if (or (nil? x) (nil? y))\n      (reverse res)\n      (recur xs ys (conj res x y))\n    )\n  )\n)","user":"5cb0f70ce4b026601754b8c1"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         al []]\n    (if\n      (or (empty? xs) (empty? ys)) al\n      (recur (rest xs) (rest ys) (conj al (first xs) (first ys))))))","user":"4eb47bb1535d7eef30807362"},{"code":"(fn weave [f1 f2]\n  (if (or (empty? (rest f1)) (empty? (rest f2)))\n    [(first f1) (first f2)]\n    (concat [(first f1) (first f2)]\n     (weave (rest f1)(rest f2)))))","problem":39,"user":"53150a4de4b08068f379ed22"},{"code":"(fn [s1 s2] (flatten (map vector s1 s2)))","problem":39,"user":"4f0f3725535d0136e6c22337"},{"code":"(fn [x y] (flatten (map list x y)))","problem":39,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [a b]\n  (loop [x a y b r []]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))","problem":39,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn hoge [x y]\n  (if (empty? x) '()\n  (if (empty? y) '()\n  (cons (first x) (cons (first y) (hoge (rest x) (rest y)))))))","problem":39,"user":"4e2e6460535deb9a81d77f0b"},{"problem":39,"code":"(fn [c1 c2] (mapcat vector c1 c2))","user":"55d28b38e4b0e31453f64a58"},{"code":"(fn blah [c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (blah (rest s1) (rest s2)))))))","problem":39,"user":"5241fe85e4b076e5d3121f42"},{"code":"(fn inter [& x] (if (= 3 (count x))\n            (let [[a b c] x] \n              (if (or (empty? a) (empty? b))\n                c\n                (inter (rest a) (rest b) (conj (conj c (first a)) (first b)))) )\n            (inter (first x) (second x) [])))","problem":39,"user":"53410c24e4b00652c8746eca"},{"problem":39,"code":"(fn inter [x y]\n  (loop [a x b y output []]\n    (if (or (empty? a) (empty? b)) output\n        (recur (rest a) (rest b) (into [] (concat output [(first a) (first b)]))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":39,"code":"(fn [a b] ((fn wow [a b c] (if (and (first a) (first b)) (wow (rest a) (rest b) (conj c (first a) (first b))) c)) a b []))","user":"55d354e0e4b0e31453f64a62"},{"problem":39,"code":"#(mapcat vector %1 %2 )","user":"56cd67c1e4b0ea9b8538f74a"},{"problem":39,"code":"#(loop [i 0 j (count %1) k %1 v %2 retval '()]\n   (if (= i j)\n     retval\n     (if (empty? v)\n       (recur (inc i) j (rest k) (rest v) retval)\n       (recur (inc i) j (rest k) (rest v) (concat retval (take 1 k) (take 1 v)) ))))","user":"51071f2ee4b05b2b4eee748e"},{"code":"#(reverse ((fn ! [a b] \n  (if (or (= a ()) (= b ()))\n    []\n    (conj (! (rest a) (rest b)) (first b) (first a)))) %1 %2))","problem":39,"user":"4ebede00535dfed6da9c6d9a"},{"code":"(fn [x y] (loop [x x y y acc nil] \n  (if (and (seq x) (seq y))\n    (recur (rest x) (rest y)\n      (cons (first y)\n            (cons (first x) acc)))\n    (reverse acc))))","problem":39,"user":"4df0524e535d08e6dec9fe17"},{"problem":39,"code":"#(->> (map list %1 %2)\n\t  (apply concat))","user":"562d869be4b0a45d2ff8301f"},{"problem":39,"code":"(fn [as bs]\n  (let [cnt (min (count as) (count bs))]\n    (loop [i 0 result '()]\n      (if (= i cnt)\n        (reverse result)\n        (recur (inc i) (conj (conj result (nth as i)) (nth bs i)))))))","user":"57c176abe4b05aa3c4741ca2"},{"problem":39,"code":"#(loop [coll1 %\n        coll2 %2\n        combocoll '()]\n   (if (or (empty? coll1) (empty? coll2))\n     (flatten (reverse combocoll))\n     (recur (rest coll1)\n            (rest coll2)\n            (conj combocoll (map first [coll1 coll2])))))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b)) []\n      (concat [(first a) (first b)] \n              (f (rest a) (rest b)))))","problem":39,"user":"50352431e4b0a84c1d88f620"},{"problem":39,"code":"(fn mynterleave [& args] \n  (let [firsts (filter (comp not nil?) (map first args))\n        rests (map rest args)]                  \n  \t(if (some empty? rests) firsts (concat firsts (apply mynterleave rests)) )))","user":"6031926ae4b0d5df2af222ac"},{"code":"(fn my-zip [coll1 coll2]\n  (let [my-zip' (fn [ c1 c2 results ]\n                  (if (and (seq c1) (seq c2))\n                    (recur (next c1) (next c2) (conj results (first c1) (first c2)))\n                    results))]\n    (reverse (my-zip' coll1 coll2 '()))))","problem":39,"user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn [X Y]\r\n  (loop [n 0 res []]\r\n\t\t(if (and (< n (count X)) (< n (count Y)))\r\n\t\t\t(recur (inc n) (conj res (nth X n) (nth Y n)))\r\n\t\t\tres\r\n\t\t)\r\n\t)\r\n)","problem":39,"user":"4f031883535dcb61093f6a5e"},{"code":"(fn interl [a b]\n  (if (and (seq a) (seq b))\n    (cons (first a) (cons (first b) (interl (rest a) (rest b))))))","problem":39,"user":"4f017b4e535dcb61093f6a37"},{"code":"(fn [& x] (apply mapcat (fn [& col] col) x))","problem":39,"user":"52d1e364e4b0d9f9285948e7"},{"problem":39,"code":"#(loop [f %1 s %2 n '()]\n (if (or (nil? f) (nil? s))\n  n\n  (recur (next f) (next s) (concat n (take 1 f) (take 1 s)))))","user":"5992de05e4b0866487ed0d7e"},{"code":"(fn f [c1 c2] (if (and (seq c1) (seq c2)) (cons (first c1) (cons (first c2) (f (rest c1) (rest c2))))))","problem":39,"user":"4ef77edb535dced4c769f254"},{"code":"(fn [s t] (reduce into (reverse (vec (zipmap s t)))))","problem":39,"user":"4e1b8106535d04ed9115e801"},{"problem":39,"code":"(fn f [x,y] \n  (if (or (empty? x) (empty? y)) [] (cons (first x) (cons (first y) (f (rest x) (rest y))))))","user":"5933b736e4b072a2710fd05d"},{"problem":39,"code":"(fn my-interleave\n   [a b]\n   (if (or (= 1 (count a)) (= 1 (count b)))\n     [(first a) (first b)]\n     (cons (first a) (cons (first b) (my-interleave (rest a) (rest b))))\n     ))","user":"552621d0e4b0ffed3738f914"},{"problem":39,"code":"(fn [col1 col2] \n  (loop [acc [] a col1 b col2] \n    (if (or (empty? a) (empty? b))\n      acc\n      (recur \n       (conj acc (first a) (first b)) \n       (rest a) (rest b)))))","user":"58b1f51de4b0ebc645576d05"},{"code":"(fn il [xs ys] (if (or (empty? xs) (empty? ys)) [] \n  (concat [(first xs) (first ys)] (il (rest xs) (rest ys)))))","problem":39,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"#(loop [s1 %1 s2 %2 coll []]\n   (if (and (seq s1) (seq s2))\n     (recur (next s1) (next s2) (conj coll (first s1) (first s2)))\n     coll))","problem":39,"user":"51460e4ce4b04ef915e37314"},{"problem":39,"code":"(fn [c1 c2] (loop [c3 c1 c4 c2 s1 (first c3) s2 (first c4) r [] ] (if (not (and s1 s2)) r (do (conj r c1 c2) (recur (rest c3) (rest c4) (first (rest c3)) (first (rest c4)) (conj r s1 s2))))))","user":"5823d3e6e4b051871117beb8"},{"code":"(fn interleave-two-seqs-solution\n  [list1 list2]\n  ;;function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.\n  (reverse (loop [l1 list1, l2 list2, ans ()]\n     (if  (or (empty? l2) (empty? l1)) ans\n          (recur (rest l1)\n                 (rest l2)\n                 (conj ans (first l1) (first l2)))))))","problem":39,"user":"529f739fe4b04e0c58e87bad"},{"problem":39,"code":"(fn [x y]\n  (loop [a x b y acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b)))\n      \n      );if\n   )\n  \n  \n  )","user":"560768a0e4b08b23635d317f"},{"problem":39,"code":"(fn [vec1 vec2]\n  (loop [v1 vec1\n         v2 vec2\n         result []]\n    (if (or (empty? v1) (empty? v2))\n      result\n      (recur (rest v1) (rest v2) (conj (conj result (first v1)) (first v2))))))","user":"563e022be4b0da801c4e4664"},{"code":"(fn my-interleave \n    ([icoll1 icoll2] (my-interleave icoll1 icoll2 '()))\n    ([icoll1 icoll2 ocoll] \n     (cond\n      (or (empty? icoll1) (empty? icoll2)) (reverse ocoll)\n      :else \n      (recur (rest icoll1) (rest icoll2) (conj ocoll (first icoll1) (first icoll2))))))","problem":39,"user":"4eee3e6a535d93acb0a668c3"},{"problem":39,"code":"(fn my-interleave\n  [xs ys]\n  (apply concat\n         (map (fn [x y]\n                [x y])\n              xs ys)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":39,"code":"(fn [x y]\n  (flatten (map #(conj [] %1 %2) x y))\n  )","user":"5a401a7de4b0447ef91cc5c5"},{"code":"(fn [s1 s2]\n  (apply concat (map #(list %1 %2) s1 s2)))","problem":39,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [res a b]      \n    (if (or (empty? a) (empty? b)) res          \n    (recur (conj res (first a) (first b)) (rest a) (rest b)))) []","problem":39,"user":"4e8a0d5d535d3e98b802328e"},{"problem":39,"code":"(fn interleaver [seq1 seq2]\n  (if (>= (count seq1) (count seq2))\n    (flatten (map-indexed (fn [index element]\n                            [(get seq1 index) element]) (seq seq2)))\n    (flatten (map-indexed (fn [index element]\n                            [element (get seq2 index)]) (seq seq1)))))","user":"5796e0afe4b039eba2ecb0f0"},{"problem":39,"code":"(fn my-interleave [l1 l2]\n  (if (some empty? (list l1 l2))\n    (list)\n    (concat\n   \t\t(list (first l1) (first l2))\n     \t(my-interleave (rest l1) (rest l2))\n    )\n  )\n)","user":"59a2ba97e4b066c664927d2c"},{"problem":39,"code":"(fn two-seq-interleave-v2 [firstcoll secondcoll]\n  (loop [a (first firstcoll)\n         b (first secondcoll)\n         firstrest (rest firstcoll)\n         secondrest (rest secondcoll)\n         output '()]\n    (if (or (nil? a) (nil? b))\n      (reverse output)\n      (recur (first firstrest) (first secondrest) (rest firstrest) (rest secondrest) (conj output a b)))))","user":"5faece16e4b08cb800c85b02"},{"problem":39,"code":"(fn [& ss] (flatten (apply map list ss)))","user":"53dcf474e4b0d874e779ae25"},{"code":"(fn [l1 l2]\n  (reduce (fn [a [x y]] \n         \t(conj a x y))\n       \t  []\n       \t  (map vector l1 l2)))","problem":39,"user":"52b94e26e4b07a9af57922b9"},{"problem":39,"code":"#(loop [x %1 y %2 res []] (if (= true (not= [] x)  (not= [] y) ) (recur (rest x)  (rest y) (conj (conj res (first x)) (first y) ) )    res))","user":"594e3723e4b07ddc2dafaea8"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [result '() l1 l1 l2 l2] (if\n                                   (or (empty? l1) (empty? l2))\n                                   result\n                                   (recur (concat result [(first l1)] [(first l2)]) (rest l1) (rest l2)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":39,"code":"#(apply concat (map vector %1 %2))\n;; mapcat vector","user":"53fc88e7e4b0de5c418485be"},{"code":"(fn [v1 v2] (flatten (map #(list %1 %2) v1 v2)))","problem":39,"user":"538d7e2ee4b0b51d73faae70"},{"problem":39,"code":"#(loop [fincoll [], c1 %1, c2 %2]\n   (if (and (first c1) (first c2))\n     (recur (conj fincoll (first c1) (first c2)) (rest c1) (rest c2))\n     fincoll))","user":"505fd903e4b08f2a82ad10b7"},{"code":"(fn [xs ys]\r\n  (apply concat (map (fn [x y] (list x y)) xs ys)))","problem":39,"user":"4dd52e29535dae65d5c462e5"},{"problem":39,"code":"(fn [a b]\n  (flatten (for [n (range (min (count a) (count b)))]\n     [(nth a n) (nth b n)])))","user":"59362afee4b0d6bb3c60df69"},{"problem":39,"code":"#(loop [x %\n        y %2\n        result []]\n   (if (or (empty? x) (empty? y))\n     result\n     (recur (rest x) (rest y) (conj result (first x) (first y))))\n   )","user":"56f7ecdfe4b08e7d20b96834"},{"problem":39,"code":";why does it fail?? it works in Leiningen\n;(fn [x y] (flatten (vec (zipmap x y))))\n\n(fn [x y]\n  (loop [s0 [] s1 x s2 y]\n    (if (or (empty? s1) (empty? s2))\n      s0\n      (recur (conj s0 (first s1) (first s2)) (rest s1) (rest s2))\n    )\n  )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":39,"code":"(fn inter [a b]\n  (loop [s1 a s2 b ret []]\n    (if (or (empty? s1) (empty? s2))\n      ret\n      (recur (rest s1) (rest s2) (conj ret (first s1) (first s2))))))","user":"602abb59e4b0d5df2af2225e"},{"code":"(partial (fn inter [z x y] (if (or (empty? x) (empty? y)) z (inter (conj z (first x) (first y)) (rest x) (rest y)))) [])","problem":39,"user":"52e48632e4b09f7907dd1450"},{"code":"(fn [c1 c2] (mapcat #(list %1 %2) c1 c2))","problem":39,"user":"4ec79f99535d6d7199dd36e4"},{"code":"(fn myfn [col1 col2]\n        (if (and (coll? col1) (coll? col2))\n    (concat (take 1 col1) (take 1 col2) (myfn (next col1) (next col2)))\n    )\n)","problem":39,"user":"52382d91e4b0fae3832e99f0"},{"code":"(fn myinterleave [x y]\n  (loop [m x n y result []]\n    (if (and (> (count m) 0) (> (count n) 0))\n      (recur (rest m) (rest n) (concat result[(first m) (first n)]))\n      result)))","problem":39,"user":"52b9e920e4b07a9af57922c9"},{"problem":39,"code":"(fn [a b]\n   (flatten (map #(list  %1 %2)  a b)))","user":"556f443be4b09a3098a5251e"},{"problem":39,"code":"(fn [s1 s2] ((fn [s1 s2 acc] \n               (cond (= (count s1) 0) acc\n                    (= (count s2) 0) acc\n                    :else (recur (rest s1) (rest s2) (conj acc (first s1) (first s2))))\n               ) s1 s2 []))","user":"5d631376e4b0c9e5857d5023"},{"problem":39,"code":";#(reduce into [] (zipmap x y))\n(fn f [a b]\n  ((fn q [r x y]\n     (if (not (or (nil? x) (nil? y)))\n       (q (conj r (first x) (first y)) (next x) (next y))\n       r)\n     ) [] a b)\n  )","user":"577ab41fe4b0d3393e5deb05"},{"code":"(fn interleaver [a b]\n  (let [x (seq a) y (seq b)]\n    (when (and x y)\n      (cons (first x) (cons (first y) (interleaver (rest x) (rest y)))))))","problem":39,"user":"52ce2aace4b07d0d72b2738b"},{"problem":39,"code":"(fn [c1 c2] (mapcat #(conj '() %2 %) c1 c2))","user":"5458a729e4b01be26fd74622"},{"problem":39,"code":"(fn my-interleave [x y] \n  (if (and (seq x) (seq y)) \n    (concat \n     (list (first x) (first y)) \n     (my-interleave (rest x) (rest y)))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn [coll1  coll2]\n   (loop [c1 coll1 c2 coll2 result []]\n     (if (or ( empty? c1) (empty? c2))\n         result\n         (recur (next c1) (next c2) (conj result (first c1) (first c2))))))","problem":39,"user":"50e90813e4b033b0e80d11e7"},{"problem":39,"code":"#(loop [L %2, R %1, result []]\n   (if (or (empty? L) (empty? R))\n     result\n     (recur (rest L) (rest R)\n            (conj result (first R) (first L)))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn ileave [s1 s2]\n  (if (or (empty? s1) (empty? s2)) '()\n      (cons (first s1) (cons (first s2) \n        (ileave (rest s1) (rest s2))))))","problem":39,"user":"4f70afb8e4b07046d9f4effb"},{"code":"(fn [col1 col2]\n    (loop [col1 col1\n           col2 col2\n           res []]\n      (if (or (empty? col1) (empty? col2))\n        (concat res)\n        (recur (next col1) (next col2)\n               (conj res (first col1) (first col2))))))","problem":39,"user":"50bca033e4b0594b91591c5d"},{"code":"(fn myfn [s1 s2]\n\t(flatten (into () (zipmap s1 s2)\n    ))\n)","problem":39,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn [x y]\n  (mapcat (fn [x y]\n                     (vector x y)) x y))","problem":39,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn [la lb] \n  (loop [a (seq la) b (seq lb) c []]\n    (if-not (and a b)\n      c\n      (recur (seq (rest a)) (seq (rest b)) (conj (conj c (first a)) (first b))))))","problem":39,"user":"4f017593535dcb61093f6a36"},{"code":"(fn [a-prime b-prime]\n  (loop [a a-prime b b-prime rv []]\n    (if (or (empty? a) (empty? b))\n      \trv\n      \t(recur (rest a) (rest b) (conj (conj rv (first a)) (first b))))))","problem":39,"user":"534f13b2e4b084c2834f4ac4"},{"problem":39,"code":"#((fn combine [seq1 seq2 res] (if (or (empty? seq1) (empty? seq2)) \n                                res \n                                (combine (rest seq1) (rest seq2) (conj (conj res (first seq1)) (first seq2))))) %1 %2 [])","user":"56ffeafee4b08d47c97781c2"},{"problem":39,"code":"#(loop [i 0 acc []] (if (>= i (min (count %1) (count %2))) acc (recur (+ i 1) (conj acc (nth %1 i) (nth %2 i)))))","user":"5dd44256e4b0948ae9d9ad69"},{"problem":39,"code":"#(reduce-kv \n   (fn [memo idx ele]\n     (if (< idx (count %2))\n      (conj memo ele (nth %2 idx))\n      memo)) \n   [] \n   %1)","user":"51f38193e4b0fca5e8b48226"},{"problem":39,"code":"#(flatten (map  vector  % %2))","user":"55b9ce15e4b01b9910ae29c1"},{"problem":39,"code":"(fn fib [acc xl yl]\n  (let [x (first xl)\n        y (first yl)]\n    (if (or (nil? x) (nil? y))\n      acc\n      (conj (fib acc (next xl) (next yl)) y x))))\n  '()","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn [a b]\n  (mapcat #(cons % %&) a b))","problem":39,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [r [] s1 s1 s2 s2]\n    (if (or (empty? s1) (empty? s2))\n      r\n      (recur (conj r (first s1) (first s2)) (rest s1) (rest s2)))))","user":"556159fae4b0c656e3ff17c7"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [is1 s1\n         is2 s2\n         res []]\n    (if (or (empty? is1)\n            (empty? is2))\n        res\n        (recur (rest is1) (rest is2) (-> res\n                                         (conj (first is1))\n                                         (conj (first is2)))))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"code":"(fn my-interleave [a b]\n  (cond\n    (or (empty? a) (empty? b)) nil\n    :else (cons (first a) \n                (cons (first b) \n                      (my-interleave (rest a) (rest b))))))","problem":39,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":39,"code":"(fn [s t]\n  (flatten\n    (map (fn [a b] [a b]) s t)))","user":"598e7998e4b02b9968b84d34"},{"problem":39,"code":"(fn [a b]\n  (loop [x a y b z []]\n    (cond (empty? x) z\n          (empty? y) z\n          :else (recur (rest x)\n                       (rest y)\n                       (conj z\n                             (first x)\n                             (first y))))))","user":"55e26417e4b050e68259b433"},{"problem":39,"code":"(fn [fc sc]\n   (loop [fc fc\n          sc sc\n          res []]\n     (if (or (empty? fc) (empty? sc))\n         res\n         (recur (rest fc) (rest sc) (do\n                                      (conj res (first fc) (first sc)))))))","user":"586b1482e4b0f14aab7c88cf"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map (fn [x y] [x y]) seq1 seq2)))","user":"56152a26e4b05f002753dfc1"},{"problem":39,"code":"(fn [c1 c2] (flatten (map #(list %1 %2) c1 c2) ))","user":"551daeb9e4b030e6a24d00df"},{"code":"(fn my-interleave \n([s t] (my-interleave s t nil))\n([s t r] (cond (or (empty? s) (empty? t)) (reverse r)\n               :default (recur (rest s) (rest t) (cons (first t) (cons\n         (first s) r))))))","problem":39,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":39,"code":"(fn doubles\n   ([x y]\n    (if (or (= (count x) 1) (= (count y) 1))\n      [(first x) (first y)]\n     (doubles (rest x) (rest y) [(first x) (first y)])))\n   ([x y z]\n    (if (or (= (count x) 1) (= (count y) 1))\n      (concat z [(first x) (first y)])\n      (doubles (rest x) (rest y) (concat z [(first x) (first y)])))))","user":"59fe5612e4b01bb0ae8afd0c"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (loop [ls1 s1 ls2 s2 acc []]\n    (if (or (empty? ls1) (empty? ls2))\n      acc\n      (recur\n        (rest ls1)\n        (rest ls2)\n        (conj acc (first ls1) (first ls2))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [head1 (first list1)\n         head2 (first list2)\n         body1 (rest list1)\n         body2 (rest list2)\n         result []]\n    (if\n      (or (empty? body1) (empty? body2))\n      (conj result head1 head2)\n      (recur (first body1) (first body2) (rest body1) (rest body2) (conj result head1 head2)))))","user":"56e6d049e4b02e7e935eb6cd"},{"code":"(fn self [xs1 xs2 & params]\n  (if (nil? params) (self xs1 xs2 ()))\n  (let [[res] params]\n    (if (or (empty? xs1) (empty? xs2)) res\n      (self (rest xs1) (rest xs2) (concat res (list (first xs1) (first xs2)))))))","problem":39,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn inter [s1 s2]\n  (if (or (empty? s1) (empty? s2)) \n    () \n    (concat \n      (list (first s1) (first s2)) (inter (rest s1) (rest s2)))))","problem":39,"user":"4fedd2cae4b0198f34b063ba"},{"code":"(fn [v1 v2] (flatten (map (fn [a b] (list a b)) v1 v2)))","problem":39,"user":"4e2164ff535d04ed9115e815"},{"problem":39,"code":"(fn _interleave [coll1 coll2]\n  (and (seq coll1)\n       (seq coll2)\n       (list* (first coll1) (first coll2)\n              (lazy-seq (_interleave (rest coll1) (rest coll2))))))","user":"546ed28be4b00cfc9eacc1a5"},{"code":"(fn\n  [a b]\n  (loop [res (empty a) col1 a col2 b]\n    (if (or (empty? col1) (empty? col2))\n      res\n      (recur (concat res (list (first col1) (first col2))) (rest col1) (rest col2) )\n      )\n    )\n  )","problem":39,"user":"52b577c9e4b0c58976d9ad39"},{"code":"(fn twine [lst-1 lst-2]\n  (loop [a lst-1\n         b lst-2\n         acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","problem":39,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":39,"code":"(fn [s1 s2]\n   (let [itl (fn [s1 s2 acc]\n               (if (or (empty? s1) (empty? s2)) (reverse acc)\n                 (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) acc)))))]\n     (itl s1 s2 '())))","user":"57780e4fe4b0979f89651657"},{"code":"(fn interl [a b]\n  (if (or (empty? a) (empty? b)) '()\n    (conj (interl (rest a) (rest b)) (first b) (first a))))","problem":39,"user":"52d6889ae4b09f7907dd1361"},{"code":"(fn [x1 x2]\n  (apply concat\n    (map #(list %1 %2) x1 x2)))","problem":39,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn [a b] (flatten (reverse (zipmap a b))))","problem":39,"user":"500ec210e4b00fff93030f9d"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n      nil\n      (list* (first s1) (first s2) (my-interleave (rest s1) (rest s2)))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":39,"code":"(fn [A B] (flatten (map (fn [x y] [x y]) A B)))","user":"55c0f842e4b01b9910ae2a2b"},{"problem":39,"code":"(fn intrlve [c1 c2]\n  (lazy-seq\n    (let [s1 (seq c1)\n          s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (first s1)\n          (cons (first s2)\n            (intrlve (rest s1) (rest s2))))))))","user":"5e62c405e4b0fd0acd15869b"},{"code":"(fn [x y] (loop [z (empty x) x1 x y1 y]\n            (if \n              (= (/ (count z) 2) (min (count x) (count y)))\n              z\n              (recur (into z [(first x1) (first y1)]) (rest x1) (rest y1)) )))","problem":39,"user":"5186448fe4b0da5a5be3bac9"},{"code":"(fn [a, b] (flatten (map list a b)))","problem":39,"user":"51b3a2c8e4b0f094dd986fa6"},{"problem":39,"code":"(fn my-interleave\n  [s1 s2]\n  (mapcat list s1 s2))","user":"5f3103aee4b0574c87022c24"},{"code":"(letfn [(leave [s1 s2]\n          (let [s1 (seq s1)\n                s2 (seq s2)]\n            (when (and s1 s2)\n              (cons (first s1)\n                    (cons (first s2)\n                          (leave\n                           (rest s1) \n                           (rest s2)))))))]\n #(vec (leave %1 %2)))","problem":39,"user":"4f0374a0535dcb61093f6ad9"},{"problem":39,"code":"(fn foo\n  [[x & xrest :as fst] [y & yrest :as snd]]\n \n  (if-not (or (empty? fst) (empty? snd))\n   (flatten (conj (vector x y) (foo (rest fst) (rest snd))))\n    (list)))","user":"55640c62e4b0c656e3ff17fd"},{"code":"(fn [x y] (flatten (map (fn [a b] [a b]) x y)))","problem":39,"user":"4ee9d697535d93acb0a66895"},{"problem":39,"code":"(fn [ v w ]\n  (apply concat (map vector v w)))","user":"57ad0950e4b0b8559636fc97"},{"problem":39,"code":"(fn [x, y] (apply concat (apply map vector [x y])))","user":"560d2b53e4b05f002753df37"},{"problem":39,"code":"#(flatten (for [i (range (if (< (count %1) (count %2)) (count %1) (count %2)))] (list (nth %1 i) (nth %2 i))))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":39,"code":"(fn [seq1 seq2]\n    (loop [interleft []\n           seq1_remaining seq1\n           seq2_remaining seq2]\n      (if (or (empty? seq1_remaining) (empty? seq2_remaining))\n        interleft\n        (recur (conj (conj interleft (first seq1_remaining)) (first seq2_remaining))\n               (rest seq1_remaining)\n               (rest seq2_remaining)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [start-a start-b]\n  (loop [a start-a b start-b res []]\n    (if (or (empty? a) (empty? b))\n      res\n      (recur (rest a) (rest b) (conj res (first a) (first b))))\n))","problem":39,"user":"51684318e4b03f62cda68cd6"},{"code":"(fn [c1 c2] (reduce concat [] (map (fn [x1 x2] [x1 x2]) c1 c2)))","problem":39,"user":"4f65eec7e4b07046d9f4ef48"},{"code":"(fn [lst1 lst2]\n  ((fn [l1 l2 res]\n     (if (or (empty? l1) (empty? l2)) res\n       (recur (rest l1) (rest l2) (concat res (list (first l1) (first l2))))))\n   lst1 lst2 '()))","problem":39,"user":"51da631be4b02ceefd947766"},{"problem":39,"code":"(fn f [x y]\n  \t(if (or (empty? x) (empty? y))\n      (empty x)\n      (concat [(first x) (first y)] (f (rest x) (rest y)))\n      )\n  )","user":"57c99a45e4b05aa3c4741d31"},{"code":"(fn [& colls]\n  (apply mapcat #(vec %&) colls))","problem":39,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [xs ys]\n  (loop [res [] xs xs ys ys]\n    (if \n      (or (empty? xs)\n          (empty? ys))\n      res\n      (recur (conj res (first xs) (first ys)) (rest xs) (rest ys)))))","problem":39,"user":"4e71a12c535d5021c1a8964f"},{"problem":39,"code":"(fn my-interleave \n      ([lst1 lst2] (my-interleave (rest lst1) (rest lst2) [(first lst1) (first lst2)] ))\n      ([lst1 lst2 nlst]\n       (if (or (empty? lst1) (empty? lst2))\n         nlst\n         (my-interleave (rest lst1) (rest lst2) (conj nlst (first lst1) (first lst2))))))","user":"5938bca5e4b02506e01a29eb"},{"code":"(fn mi [c1 c2]\n    (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and  s1 s2)\n          (cons (first s1) (cons (first s2)\n                             (mi (rest s1) (rest s2))))))))","problem":39,"user":"51c858c3e4b07ef393169e55"},{"problem":39,"code":";(fn [s1 s2] (reduce #(conj %1 (nth %2 0) (nth %2 1)) [] (map (fn [x y] [x y]) s1 s2)))\n#(mapcat vector %1 %2)","user":"590b055ae4b047aa04b199c9"},{"problem":39,"code":"(fn [f s] (apply concat (map #(list %1 %2) f s)))","user":"55d3cfafe4b0e31453f64a6c"},{"problem":39,"code":"(fn [a b]\n   (loop [s1 a\n          s2 b\n          ret (empty a)]\n     (if (or (empty? s1) \n             (empty? s2))\n       ret\n       (recur (rest s1)\n              (rest s2)\n               (conj ret \n                     (first s1)\n                     (first s2)) )\n       )\n     )\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":39,"code":"(fn [a b]\n  (apply concat (map #(list %1 %2) a b)))","user":"57035ccfe4b08d47c97781ef"},{"code":"#(loop [coll-1 % coll-2 %2 coll-final []]\n  (if (or (empty? coll-2) (empty? coll-1)) (seq coll-final)\n    (recur (rest coll-1) (rest coll-2) \n      (conj coll-final (first coll-1) (first coll-2)))))","problem":39,"user":"5071b614e4b0e3170b5a867d"},{"code":"(fn [a b](mapcat vector a b))","problem":39,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":39,"code":"(fn my-interleave [xs-1, xs-2]\n  (when (and xs-1 xs-2) (concat \n                         [(first xs-1) (first xs-2)] \n                         (my-interleave (next xs-1) (next xs-2)))))","user":"540ff039e4b01498b1a7199b"},{"code":"(fn leave [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n        (leave (rest s1) (rest s2)))))))","problem":39,"user":"4eaf0d91535d7eef3080732e"},{"problem":39,"code":"(fn inter\n  ([xs ys] (inter xs ys []))\n  ([xs ys zs] (if \n               (and (> (count xs) 0) (> (count ys) 0)) (recur (rest xs) (rest ys) (conj zs (first xs) (first ys)))\n               zs\n               )\n   )\n  )","user":"590e588ce4b047aa04b19a23"},{"problem":39,"code":"(fn my-inter [[f & f-more] [s & s-more]]\n  (if (or (nil? f) (nil? s))\n    nil\n    (cons f (cons s (my-inter f-more s-more)))))","user":"53edb464e4b0d648e757f4c7"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 s3 []]\n  (if (and (first s1) (first s2))\n    (recur (rest s1) (rest s2) (conj s3 (first s1) (first s2)))\n    s3)\n  )","user":"5a80b934e4b00b71e582a05b"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n         y y\n         ret []]\n    (if (or (empty? x) (empty? y))\n      ret\n      (recur (rest x) (rest y) (conj (conj ret (first x)) (first y))))))","user":"607b04e5e4b0a637ed780373"},{"problem":39,"code":"(fn [a b]\n  (loop [seq1 a\n         seq2 b\n         acc []]\n    (if (or (empty? seq1) (empty? seq2))\n      acc\n      (recur (rest seq1)\n             (rest seq2)\n             (concat acc [(first seq1) (first seq2)] )))))","user":"5b59c2bde4b02d533a91bd80"},{"problem":39,"code":"(fn [sq1 sq2]\n          (flatten\n           (map #(vector %1 %2) sq1 sq2)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":39,"code":"(fn _interleave [a b]\n  (if (and (first a) (first b))\n    (concat [(first a) (first b)] (_interleave (rest a) (rest b)))\n    []))","user":"57008afae4b08d47c97781ca"},{"code":"(fn my-interleave [seq1 seq2]\n  (if (or (empty? seq1) ;either the first sequence of second sequence is empty\n          (empty? seq2))\n    '() ;return just an empty sequence and stop the recursion\n   \t(flatten (list (first seq1) ;make a list of the first of each sequence\n                   (first seq2)\n     \t     (my-interleave (rest seq1) ;do recursion on the rest of each sequence\n                            (rest seq2))))))\n    ;flatten at the end so all of the elements are one sequence","problem":39,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [c1 c2]\n  (mapcat #(vector %1 %2) c1 c2))","problem":39,"user":"4f58d92fe4b0a7574ea71858"},{"problem":39,"code":"(fn my-interleave\n  ([aseq bseq] (my-interleave aseq bseq []))\n   ([aseq bseq res] \n    (if (or (empty? aseq) (empty? bseq))\n      res\n      (my-interleave (rest aseq) (rest bseq) (conj res (first aseq) (first bseq))))))","user":"560151b5e4b04bb52996e185"},{"code":"; (fn [s1 s2] (mapcat list s1 s2))\nmapcat list","problem":39,"user":"51789dfae4b03d69594194d7"},{"problem":39,"code":"(fn do-it\n  ([f s]\n   (do-it f s [])\n   )\n  ([f s tar]\n   (if (or (empty? f) (empty? s))\n     tar\n     (do-it (rest f) (rest s) (conj (conj tar (first f)) (first s))))\n   )\n  )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         result []]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (rest c1)\n             (rest c2)\n             (conj result (first c1) (first c2))))))","user":"5484143de4b0e286459a1197"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [cl1 c1 cl2 c2 newC []]\n    (cond\n     (empty? cl1) (reverse newC)\n     (empty? cl2) (reverse newC)\n     :else (recur (rest cl1) (rest cl2) (->> (cons (first cl1) newC) (cons (first cl2)))))))","user":"56c0aeb8e4b060a8e693e3af"},{"code":"(fn f [s q]\n  (if (some empty? [s q])\n    []\n    (concat [(first s) (first q)] (f (next s) (next q))\n  )))","problem":39,"user":"4f5694cae4b0a7574ea71827"},{"problem":39,"code":"(fn interleave-two-seqs [a b]\n  (letfn [(iter [a b]\n                (let [[x & xs] a\n                      [y & ys] b]\n                  (cons x (cons y (lazy-seq (iter xs ys))))))]\n    (take (* 2 (min (count a) (count b))) (iter a b))))","user":"58e965b3e4b056aecfd47d08"},{"problem":39,"code":"(fn [c1 c2] (let [in (map #(list % %2) c1 c2)] ((fn [c] ( (fn mr [r cs] (reduce #(if (coll? %2) (mr % %2) (conj % %2)) r cs)) [] c)) in) ) )","user":"5339b53fe4b0e30313ee6cac"},{"problem":39,"code":"(fn intl\n  [c1 c2] \n  (let [s1 (seq c1) s2 (seq c2)]\n   (when \n   \t(and s1 s2)\n   \t(cons \n    \t(first s1) \n    \t(cons (first s2)\n              (intl (rest s1) (rest s2)\n                    )\n              )\n     )    \n     )\n    )\n  )","user":"54be3ab6e4b0ed20f4ff6ee7"},{"problem":39,"code":"(fn f [x y]\n  (if (or (= (count x) 0) (= (count y) 0))\n    nil\n    (conj (f (rest x) (rest y))\n               (first y)\n               (first x))))","user":"60096aabe4b074f607df667f"},{"code":"#((fn foo [acc xs ys]\n  (if (or (empty? xs) (empty? ys))\n    acc\n    (let [[x & xrest] xs\n          [y & yrest] ys]\n      (recur (reduce conj acc [x y])\n             xrest yrest))))\n [] %1 %2)","problem":39,"user":"5004034ce4b0678c553fc447"},{"problem":39,"code":"(fn inter [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 result []]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (conj result (first s1) (first s2))))))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":39,"code":"(fn foo [coll1 coll2]\n     (if (or (empty? coll1) (empty? coll2)) () (conj (foo (rest coll1) (rest coll2)) (first coll2) (first coll1))))","user":"5509bec5e4b06e50f9beb121"},{"code":"(fn\n    myself\n    [& items]\n    (let [left (first items)\n          right (second items)]\n      (if (and (> (count left) 0) (> (count right) 0))\n        (concat (list (first left) (first right)) (myself (rest left) (rest right))))))","problem":39,"user":"52e94348e4b09f7907dd14a9"},{"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (concat (list (first xs) (first ys))\n      (inter (rest xs) (rest ys)))))","problem":39,"user":"504e2600e4b0f6ff3350c46f"},{"problem":39,"code":"(fn [a b]\n  (flatten (map (fn [f s]\n                  (conj '() s f))\n                a b)))","user":"5b7292b3e4b047b03b2036a4"},{"code":"(fn [c1 c2] (apply concat (map list c1 c2)))","problem":39,"user":"4ff8a89de4b0678c553fc39d"},{"code":"(fn foo [a b] (if (or (empty? a) (empty? b)) '() (cons (first a) (cons (first b) (foo (rest a) (rest b))))))","problem":39,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":39,"code":"(fn [col1 col2]\n\t(loop [ x col1 y col2 res () ]\n\t\t(if (or (empty? x) (empty? y))\n\t\t\tres\n\t\t\t(recur \t(rest x)\n\t\t\t\t\t(rest y)\n\t\t\t\t\t(concat res (cons (first x) (cons (first y) ()) ))))))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn[x,y]\n  (loop [l x, m y, v []]\n    (if (or (empty? l) (empty? m))\n    v\n    (do      \n      (recur (rest l) (rest m) \n      (conj v (first l) (first m)))))))","problem":39,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn f [s1 s2]\n      (if (or (empty? s1) (empty? s2))\n          ()\n          (cons (first s1)\n          (cons (first s2)\n          (f (rest s1) (rest s2))))))","problem":39,"user":"4f404dcee4b0e243712b1fb0"},{"problem":39,"code":"(fn interl [a b]\n\t(loop [f1 a\n\t\t\t\tf2 b\t\n\t\t\t\tr []]\n\t\t(if-not (and f1 f2) r\n\t\t\t(recur (next f1) (next f2) (conj r (first f1) (first f2))))))","user":"55deeface4b050e68259b3ea"},{"code":"(fn [x y]\n  (loop [x x\n         y y\n         result []]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (conj (conj result (first x)) (first y))))))","problem":39,"user":"538d464ee4b0b51d73faae69"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1\n         coll2 coll2\n         coll-acc []]\n    (cond (empty? coll1) (seq coll-acc)\n          (empty? coll2) coll-acc\n          :else\n          (recur (rest coll1)\n                 (rest coll2)\n                 (concat coll-acc (list (first coll1) \n                                        (first coll2)))))))","user":"5e724492e4b085ba37836dc7"},{"problem":39,"code":"(comp (partial apply concat) (partial map (fn[x y] [x y])))","user":"53f74528e4b0de5c4184855c"},{"problem":39,"code":"(fn check [x y & [z]]\n   (if (or (= (last x) nil) (= (last y) nil))\n     (do (reverse z))\n     (do (check (rest x) (rest y) (conj (conj z (first x)) (first y))))\n\n   )\n\n )","user":"580014d7e4b0a837a8b30c32"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x1 s1\n         x2 s2\n         acc []]\n    (if-not (or (empty? x1) (empty? x2))\n            (recur (rest x1) (rest x2) (conj acc (first x1) (first x2)))\n            acc)))","user":"51316a63e4b0431ba07e7feb"},{"problem":39,"code":"(fn ntrlv [i1 i2] (let [s1 (seq i1) s2 (seq i2)] (when (and s1 s2) (cons (first i1) (cons (first i2) (ntrlv (rest i1) (rest i2)))))))","user":"5509b434e4b06e50f9beb11e"},{"problem":39,"code":"(fn [left right]\n  (loop [left left right right acc '[]]\n    (if (or (empty? left) (empty? right))\n      acc\n      (recur (rest left) (rest right) (conj acc (first left) (first right)))\n    )\n  )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 acc []]\n    (if (or (empty? s1) (empty? s2))\n      (seq acc)\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2))))))","user":"5a512929e4b05d388ecb6be2"},{"problem":39,"code":"(fn i [s1 s2]\n  (when (and (not(empty? s1)) (not(empty? s2)) )    \n      (into (conj [] (first s1) (first s2)) (i (rest s1) (rest s2)) )\n  )\n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"problem":39,"code":"(fn weave\n  ([x y z] (cond (or (empty? x) (empty? y)) (reverse z)\n                 :else (recur (rest x) (rest y) (conj (conj z (first x)) (first y)))))\n  ([x y]\n   (weave x y '())))","user":"58a3ba31e4b02bd94d917eff"},{"problem":39,"code":"(fn [ls1 ls2]\n  (flatten\n   (for [li (range (count ls1))\n        :while (< li (count ls2))\n        :let [li1 (nth ls1 li),\n              li2 (nth ls2 li)]]\n    (list li1 li2))\n   )\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":39,"code":"(fn [lst1 lst2]\n  ((fn [ans lst1 lst2]\n     (cond\n      (empty? lst1) ans\n      (empty? lst2) ans\n      :else (recur (conj (conj ans (first lst1)) (first lst2)) (rest lst1) (rest lst2))\n      )\n  ) [] lst1 lst2)\n  )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":39,"code":"(fn z\n  ([f s] \n      (z f s (* (min (count f) (count s)) 2) [])\n  )\n  ([f s cnt col]\n    (if (= cnt 0) \n      (seq col)\n      (recur s (rest f) (dec cnt) (conj col (first f)))\n    )\n  )\n)","user":"5beebdb7e4b0a6d31fed2132"},{"code":"#(loop [ret [] x %1 y %2] (cond\n(empty? x) ret\n(empty? y) ret\n:else (recur (conj ret (first x) (first y)) (rest x) (rest y))\n))","problem":39,"user":"50807940e4b01a93d3f38e44"},{"code":"#(loop [a %1 b %2 out ()]\n       (if (or (empty? a) (empty? b))\n         (reverse out)\n         (recur (rest a) (rest b) (conj out (first a) (first b)))))","problem":39,"user":"4fb5033ce4b081705acca2b5"},{"code":"(comp flatten (fn [xs ys] (map vector xs ys)))","problem":39,"user":"513d121fe4b0e544971636a2"},{"problem":39,"code":"(fn zm [[a & ra] [b & rb]]\n  (if (and a b)\n    (concat (list a b) (zm ra rb))\n    '()\n  )\n)","user":"54c9f165e4b045293a27f687"},{"code":"#(apply concat (map (fn[x y][x y])%1 %2))","problem":39,"user":"532631e1e4b09d4e7a9b54ea"},{"problem":39,"code":"(fn[a b] (flatten (map #(conj () %2 %1) a b )))","user":"548f3ed8e4b0e286459a1236"},{"code":"(fn [a b] (loop [a a b b r []]\n  (if (or (empty? a) (empty? b))\n    r\n    (recur (rest a) (rest b) (conj r (first a) (first b))))))","problem":39,"user":"4f038017535dcb61093f6afa"},{"problem":39,"code":"(fn [xs ys] (loop [xs xs ys ys zs []] (if (or (empty? xs) (empty? ys)) (apply list zs) (recur (next xs) (next ys) (conj zs (first xs) (first ys))))))","user":"56098ccbe4b0053d1b86c7e4"},{"code":"(fn [c1 c2]\n  (reverse (loop [c1  c1\n                  c2  c2\n                  acc nil]\n             (if (or (empty? c1) (empty? c2))\n               acc\n               (recur (rest c1) (rest c2) (cons (first c2) (cons (first c1) acc)))))))","problem":39,"user":"51da565ae4b02ceefd947765"},{"problem":39,"code":"(fn [s1 s2]\n    (loop [i1 (first s1)\n           n1 (next s1)\n           i2 (first s2)\n           n2 (next s2)\n           r []]\n      (if (or (nil? n1) (nil? n2))\n        (conj r i1 i2)\n        (recur (first n1) (next n1)\n               (first n2) (next n2)\n               (conj r i1 i2)))))","user":"538db083e4b0b51d73faae74"},{"code":"(fn [& args] (apply mapcat vector args))","problem":39,"user":"4ec2f192535dcc7ae8597d4c"},{"problem":39,"code":"#(apply mapcat vector [% %2])","user":"55d1a721e4b0e31453f64a47"},{"problem":39,"code":"(fn [a b]\n  (loop [x (seq a)\n         y (seq b)\n         accum []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (conj accum (first x) (first y)))\n      accum))\n             \n  \n  \n  )","user":"54903056e4b0b312c081ff2e"},{"problem":39,"code":"(fn [as bs] (reduce concat (loop [a as b bs r []] (if (or (empty? a) (empty? b)) r (recur (rest a) (rest b) (conj r [(first a) (first b)]))))))","user":"561e2b33e4b064ca9f4b16ba"},{"code":"#(flatten (map (fn [a b] (list a b)) %1 %2))","problem":39,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [rem1 coll1\n         rem2 coll2\n         acc (vector)]\n    (if (or (empty? rem1) (empty? rem2))\n      acc\n      (recur (rest rem1) (rest rem2) (into acc [(first rem1) (first rem2)])))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":39,"code":"(fn my-interleave [lsta lstb]\n  (loop [lsta lsta\n         lstb lstb\n         newl []]\n    (if (or\n          (empty? lsta)\n          (empty? lstb))\n      newl\n      (recur (rest lsta)\n        (rest lstb)\n        (conj newl (first lsta) (first lstb))))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn my-interleave [x y]\n    (reverse\n      (loop [cx x cy y out '()]\n        (if (or (empty? cx) (empty? cy))\n          out\n          (recur (rest cx) (rest cy) (conj out (first cx) (first cy)))))))","problem":39,"user":"4ee9c8d0535d93acb0a66892"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (map (fn [x y] [x y]) xs ys)))","user":"5d3aefbde4b01671435dbd5e"},{"problem":39,"code":"#(loop [x %1\n         y %2\n         result []]\n    (if (and (first x) (first y))\n      (recur (rest x) (rest y) (conj result (first x) (first y)))\n      result))","user":"502ea967e4b06efe12e8cc76"},{"problem":39,"code":"(fn c [c1 c2] (lazy-seq ; wait to evaluate\n    (let [s1 (seq c1) s2 (seq c2)] ; otherwise and below will not work as expected\n      (when (and s1 s2)\n             (cons (first s1) (cons (first s2) (c (rest s1) (rest s2))))))))","user":"5dd47f7ce4b0948ae9d9ad6d"},{"problem":39,"code":"(fn my-interleave [left right] (flatten (map vector left right)))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [a b]\r\n  (mapcat #(list %1 %2) a b)\r\n)","problem":39,"user":"4ead76b7535d7eef30807320"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [a l1\n         b l2\n         r []]\n    (if (or (empty? a)\n           \t(empty? b))\n      r\n      (recur (rest a)\n             (rest b)\n             (conj r (first a) (first b))))))","user":"5521a5a9e4b0882d96d09197"},{"code":"(fn ileave \n  [c1 c2] \n  (let [s1 (seq c1) s2 (seq c2)] \n    (when (and s1 s2) \n      (cons (first s1) (cons (first s2) (ileave (rest s1) (rest s2)))))))","problem":39,"user":"51430fb2e4b0c172af7558ce"},{"problem":39,"code":"(fn interleave-ms\n  ([lst1 lst2] (interleave-ms lst1 lst2 0 []))\n  ([lst1 lst2 c acc] (if (even? c)\n   (if (and (first lst1) (first lst2)) (recur\n               (rest lst1) lst2\n               (inc c)(conj acc (first lst1))) acc)\n   (if-let [x (first lst2)] (recur\n                         lst1 (rest lst2)\n                         (inc c)(conj acc x)) acc))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":";;(fn my-interleave [s1 s2]\n;  (when (and (seq s1) (seq s2))\n;    (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2))))))\n\n#(mapcat list %1 %2)","problem":39,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn [& colls] (flatten (apply map list colls)))","problem":39,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn concat2 [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2) (concat2 (rest s1) (rest s2))))))))","problem":39,"user":"52d809bde4b09f7907dd1384"},{"problem":39,"code":"(fn [a b](reverse (flatten (into [] (zipmap b a)) ) ))","user":"56039843e4b04bb52996e1be"},{"code":"(fn __ [s1 s2]\n    (when (not (or (empty? s1) (empty? s2)))\n    (conj (__ (rest s1) (rest s2)) (first s2) (first s1))))","problem":39,"user":"4f29eb2ae4b0d6649770a037"},{"problem":39,"code":"(fn [xs ys]\n  (let\n    [n (min (count xs) (count ys))]\n    n\n    (mapcat\n      (fn [i]\n        [\n          (nth xs i)\n          (nth ys i)\n        ]\n      )\n      (range n)\n    )\n  )\n)","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn myinterleave [x y]\n  (loop [myx x myy y acc []]\n    (if (or (empty? myx) (empty? myy))\n      acc\n      (recur (rest myx) (rest myy) (conj acc (first myx) (first myy))))))","problem":39,"user":"535526a2e4b04ce2eb3ed259"},{"problem":39,"code":"(fn [a b] (loop [x a, y b, res []] (if (or (empty? x) (empty? y)) res (recur (next x) (next y) (conj res (first x) (first y))))))","user":"53fb4843e4b0de5c4184857d"},{"problem":39,"code":"(fn [a b]\n   (loop [A a\n          B b\n          list []]\n     (if (or (empty? A) (empty? B))\n       list\n       (recur (rest A) (rest B) (conj list (first A) (first B))))))","user":"5f3f2281e4b004f08c61c561"},{"problem":39,"code":"(fn interleave' [seq1 seq2]\n    (flatten (map (fn [f s] (cons f (cons s []))) seq1 seq2)))","user":"567b62fce4b05957ce8c61a6"},{"code":"(fn this\n  \t\t([ x1 x2 ] (let [x (first x1) y (first x2)]\n\t\t\t\t(if (or (= x nil) (= y nil))\n\t\t\t\t\t()\n\t\t\t\t\t(conj \n\t\t\t\t\t\t(conj (this (rest x1) (rest x2)) y)\n\t\t\t\t\t\tx)\n\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)","problem":39,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(fn il ([x y]\n        (and (seq x) (seq y) (cons (first x) (cons (first y) \n                                 (il (rest x) (rest y)))))))","problem":39,"user":"4eee5c7f535d93acb0a668c6"},{"problem":39,"code":"#(loop [x %1 y %2 out []] (if (or (empty? x) (empty? y)) out (recur (rest x) (rest y) (conj out (first x) (first y)))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"code":"(fn interleave2 [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [ (first a) (first b) ]\n            (interleave2 (rest a) (rest b)))))","problem":39,"user":"4f28d159e4b0d6649770a01b"},{"code":"(fn [a b]\n  (mapcat #(list (a %) (b %))\n       (range (min \n               (count a)\n               (count b))\n )))","problem":39,"user":"50fa01bce4b07934dda8b0ba"},{"problem":39,"code":"(fn\n  [a b]\n  (let [len (min (count a) (count b))]\n    (flatten\n     (map\n     \t(fn [i] [(get a i) (get b i)])\n      \t(take len (range))))))","user":"554b425ce4b0a04f79299581"},{"code":"(fn b [x y]\n  (flatten (map list x y)))","problem":39,"user":"535aee3be4b04ce2eb3ed2aa"},{"code":"(fn my-interleave [seq1 seq2]\n  (let [l (->> [seq1 seq2] (map count) (apply min))]\n    (flatten (map #(list (nth seq1 %) (nth seq2 %)) (range l)))))","problem":39,"user":"4f74fe77e4b0fbe0118ec552"},{"problem":39,"code":"(comp flatten (partial map #(list % %2)))","user":"53396c03e4b0e30313ee6ca7"},{"problem":39,"code":"(fn [ks vs] (mapcat vector ks vs))","user":"58b2fe10e4b0ebc645576d17"},{"problem":39,"code":"(fn [a b] \n  (loop [aa a bb b r []]\n    (if (or (empty? aa) (empty? bb))\n      r\n      (recur (rest aa) (rest bb) (conj r (first aa) (first bb))))))","user":"5642b939e4b08d4f616f5f1b"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (or (empty? a) (empty? b))\n    ()\n    (concat \n      (list (first a) (first b))\n      (my-interleave (next a) (next b)))))","user":"5887518ae4b0f1effa3b76f5"},{"problem":39,"code":"#(mapcat (fn [& xs] (vec xs)) % %2)","user":"55ee62dde4b0121d4835fdeb"},{"problem":39,"code":"#(loop [coll1 %1, coll2 %2, acc []]\n   (if (or (empty? coll1) (empty? coll2))\n     acc\n     (recur (rest coll1) (rest coll2) (concat acc [(first coll1) (first coll2)]))))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":39,"code":"(fn [one two]\n  (reduce concat \n          (map vector one two)))","user":"5a584ca2e4b05d388ecb6c7d"},{"problem":39,"code":"#(let[sfst (count %1) ssec (count %2) sshort (if (< sfst ssec) sfst ssec) full (take (* 2 sshort) (if (>= ssec sfst) (flatten (merge %1 %2)) (flatten (merge (take ssec %1) %2))))](reverse (loop[all full cnt (- sshort 1) res []](if (< cnt 0) (if (>= ssec sfst) res (reverse res)) (recur all (dec cnt) (conj (conj res (nth all (+ cnt (/ (count all) 2)))) (nth all cnt)))))))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":39,"code":"(fn\n  [seq-a\n   seq-b]\n  (loop [left-hand seq-a\n         right-hand seq-b\n         mix-up []]\n    (if (not (or (empty? left-hand) (empty? right-hand)))\n      (recur (rest left-hand) (rest right-hand) (conj mix-up (first left-hand) (first right-hand)))\n      mix-up\n      )\n   )\n )","user":"54d0f744e4b0e8a36923e5d7"},{"code":"(fn myinterleave [lat1 lat2]\n  (cond\n   (or (empty? lat1)(empty? lat2)) ()\n   :else\n   (concat (list (first lat1)(first lat2))\n           (myinterleave (rest lat1)(rest lat2)))))","problem":39,"user":"4eb6f065535d7eef30807372"},{"code":"(fn f [s1 s2]\n  (cond (empty? s1) nil\n    (empty? s2) nil\n    :else (conj (f (rest s1) (rest s2)) (first s2) (first s1))))","problem":39,"user":"4f92de49e4b0dcca54ed6cb2"},{"problem":39,"code":"#(let [c (apply min (map count [%1 %2]))]\n     (loop [x [] y 0]\n       (if (> y (- c 1))\n         x\n           (recur (conj x (%1 y) (%2 y)) (inc y)))))","user":"583f23dce4b089d5ab817dc9"},{"problem":39,"code":"(fn inter\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (inter (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply inter (map rest ss))))))))","user":"530a6cbae4b02e82168697be"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [res [] c1 col1 c2 col2]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (let [[x & xs] c1 [y & ys] c2]\n        (recur (conj res x y) xs ys)))))","user":"59abd1d8e4b08cbb53654da4"},{"code":"(fn beb\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (beb (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply beb (map rest ss))))))))","problem":39,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":39,"code":"(fn intlv [l m]\n  (if (or (empty? l) (empty? m))\n    nil\n    (cons (first l) (cons (first m) (intlv (rest l) (rest m))))))","user":"586c5a34e4b01531a375e97a"},{"problem":39,"code":"(fn [xs ys]\n  (loop [[x & xs] xs [y & ys] ys ret []]\n     (if (or (empty? xs) (empty? ys))\n       (conj (conj ret x) y)\n       (recur xs ys (conj (conj ret x) y))\n       )\n    )\n  )","user":"54975e99e4b0b312c081ff72"},{"problem":39,"code":"(\n    fn [frst, scnd]\n    (\n      loop [frst frst, scnd scnd, result []]\n      (\n        if (or (empty? frst) (empty? scnd)) result\n        (recur (rest frst) (rest scnd) (concat result (list (first frst) (first scnd))))\n        )\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":39,"code":"(fn my-interleave [xs ys] (if (or (= xs ()) (= ys ()))\n                          []\n                          (cons (first xs) (cons (first ys) (my-interleave (rest xs) (rest ys))))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":39,"code":"(fn my-interleave [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    nil\n    (lazy-seq (cons (first l1) \n                    (cons (first l2) \n                          (my-interleave (rest l1) (rest l2)))))))","user":"5899c54de4b00487982d52fa"},{"code":"(fn [x y]\r\n  (reverse\r\n  (loop [l1 x l2 y nl nil]\r\n    (cond (empty? l1) nl\r\n          (empty? l2) nl\r\n          :else (recur (rest l1) (rest l2) (conj nl (first l1) (first l2)))))))","problem":39,"user":"4e920f44535dbda64a6f6afd"},{"problem":39,"code":"(fn [seq1 seq2]\n  (mapcat vector seq1 seq2)\n  )","user":"5a754d36e4b0512ff01cdac7"},{"code":"(fn zip [x y] (if (or (empty? x) (empty? y)) '() (concat (vector (first x) (first y)) (zip (rest x) (rest y)))))","problem":39,"user":"4ec79cac535d6d7199dd36e3"},{"code":"(fn [& colls] (apply concat (apply map #(identity %&) colls)))","problem":39,"user":"4ea1b9e4535d7eef308072b8"},{"problem":39,"code":"(fn z [x y ] (when (> (min (count x) (count y) ) 0 ) \n                  (conj (z (rest x) (rest y)) (first y) (first x) )))","user":"53e8cefde4b036ad0777e48d"},{"problem":39,"code":"(fn my_map [& arrays]\n  (apply concat (apply (partial map (fn [& items] (apply list items))) arrays))\n  )","user":"56530a1ce4b0f9d632dd846c"},{"problem":39,"code":"#(loop [i (dec(min (count %1) (count %2))) lst '()]\n    (if (= i -1)\n      lst\n      (recur (dec i) (conj lst (nth %2 i) (nth %1 i)))))","user":"574e8975e4b02ea114799244"},{"code":"(fn f [x y]\n  (cond (empty? x) ()\n        (empty? y) ()\n        true (cons (first x) (cons (first y) (f (rest x) (rest y))))))","problem":39,"user":"4eff81ca535dcb61093f6a2d"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (flatten (mapcat #(list %1 %2) s1 s2)))","user":"5bab8c06e4b0a20761a2347e"},{"problem":39,"code":"(fn [as bs] (reduce (fn [s n] (conj (conj s (nth as n)) (nth bs n)))\n                    []\n                    (range (if (> (count bs) (count as)) (count as) (count bs))) ))","user":"5e4beca9e4b0889a8790a560"},{"code":"mapcat (fn[x y] [x y])","problem":39,"user":"512587ade4b05d10e3e395fb"},{"code":"#(mapcat vector % %2)","problem":39,"user":"4eaec592535d7eef30807327"},{"problem":39,"code":"(fn intrlv [lst1 lst2]\n  (when\n    (not (or (empty? lst1) (empty? lst2)))\n    (cons (first lst1) (cons (first lst2) (intrlv (rest lst1) (rest lst2))))\n    )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn [s s2]\n  (loop [s s s2 s2 retVal []]\n    (if (or (empty? s) (empty? s2))\n      retVal\n      (recur (rest s) (rest s2) (conj retVal (first s) (first s2))))))\n\n\n; mapcat list\n\n; (comp flatten seq zipmap)","problem":39,"user":"4f849f76e4b033992c121c36"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b r ()]\n    (if (or (empty? a) (empty? b))\n      (reverse r)\n      (recur (rest a) (rest b)\n             (cons (first b) (cons (first a) r))))))","user":"5e178fbee4b00200644e3d57"},{"code":"(fn [s1 s2]\n  (loop [lst1 s1 lst2 s2 result []]\n    (cond \n      (empty? lst1) result\n      (empty? lst2) result\n      :else\n        (recur\n          (rest lst1)\n          (rest lst2)\n          (conj result (first lst1) (first lst2))))))","problem":39,"user":"4e117dea535d04ed9115e7c9"},{"problem":39,"code":"(fn _\n    ([] [])\n    ([n1] n1)\n    ([n1 n2]\n       (if-let [e1 (first n1)]\n         (if-let [e2 (first n2)]\n           (cons e1 (cons e2  (_ (rest n1) (rest n2)))))\n         )))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn inter [s t]\n  (if (or (empty? s) (empty? t)) '()\n    (conj (inter (rest s) (rest t))\n      (first t) (first s))))","problem":39,"user":"504e48ace4b0f6ff3350c498"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (loop [my-s1 s1\n         my-s2 s2\n         accum []]\n    (if (or (empty? my-s1) (empty? my-s2))\n      accum\n      (recur (rest my-s1) (rest my-s2) (conj accum (first my-s1) (first my-s2))))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn intle [x y] (if (or (empty? x) (empty? y))\r\n  \t()\r\n\t\t(concat \r\n      (list (first x)) \r\n      (list (first y)) \r\n      (intle (next x) (next y)))))","problem":39,"user":"4f048f67535dcb61093f6bd3"},{"problem":39,"code":"(fn inter [x y] \n  (if (and (seq x) (seq y))\n    (concat [(first x) (first y)] (inter (rest x) (rest y)))\n    []))","user":"54b567eee4b05787c3b163a2"},{"problem":39,"code":"(fn ntrlv [x y] (loop [res [] i x j y](if (or (empty? i) (empty? j)) res (recur (conj (conj res (first i))(first j)) (rest i) (rest j)) )))","user":"6076adb2e4b069485764de60"},{"problem":39,"code":"(fn [a b]\n  (letfn [(interl [x y]\n             (if (and (first x) (first y))\n               (-> (interl (rest x) (rest y))\n                   (conj (first y))\n                   (conj (first x)))\n               '()))]\n    (interl a b )\n    ))","user":"53b42472e4b047364c0444b2"},{"problem":39,"code":"(fn f[s1 s2]\n  (if\n   (or (empty? s1) (empty? s2))\n   '()\n   (cons (first s1)\n         (cons\n          (first s2)\n          (f (rest s1)\n             (rest s2))))))","user":"53e06f81e4b0d874e779ae4c"},{"problem":39,"code":"(fn ntrlv [s1 s2]\n  (loop [i 0 res []]\n    (if \n     (and \n      (< i (.count s1))\n      (< i (.count s2))\n     )\n     (recur\n       (inc i)\n       (conj res \n           (get s1 i)\n           (get s2 i))\n     )\n     res\n)))","user":"598debf0e4b02b9968b84d2e"},{"code":"(fn [seq1 seq2]\n  (loop [x seq1 y seq2 zipped '()]\n    (if (empty? x)\n      zipped\n    (if (empty? y)\n      zipped\n      (recur \n        (rest x) \n        (rest y) \n        (concat zipped [(first x)] [(first y)]))))))","problem":39,"user":"4f0ddc4c535d0136e6c2231b"},{"problem":39,"code":"(fn [a b] (loop [res '() s1 a s2 b] \n            (let [x (first s1) y (first s2)] \n              (if (and x y)\n                (recur (concat res (list x y)) (rest s1) (rest s2))\n                res))))","user":"5f5aee4fe4b0a0bc16850aaa"},{"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 result []]\n    (if-not (and (seq coll1) (seq coll2))\n      result\n      (recur (rest coll1) (rest coll2) (conj result (first coll1) (first coll2))) \n     )))","problem":39,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn [x y]\n  (flatten (map vector x y))\n  )","problem":39,"user":"4edf95a8535d10e5ff6f5342"},{"problem":39,"code":"(fn [x y] (loop [dat1 x dat2 y result ()]\n            (if-not (and (first dat1) (first dat2))\n              (reverse result)\n              (recur (rest dat1) (rest dat2) (cons (first dat2) (cons (first dat1) result))) )))","user":"567f034be4b0feffd0d18eba"},{"problem":39,"code":"(fn [a b] \n  (flatten \n   (map \n    (fn \n      [x y] \n      (list x y)) \n    a b)))","user":"553bc237e4b09218d5f4500a"},{"problem":39,"code":"(fn ok [arg1 arg2]\n  (when (and (first arg1)(first arg2))\n    (cons (first arg1)(cons (first arg2)(ok (rest arg1)(rest arg2))))))","user":"5cc092d1e4b0ccb061962790"},{"code":"(fn [seq1 seq2]\n    (loop [accum []\n           n1 seq1\n           n2 seq2]\n      (if (and (not-empty n1) (not-empty n2))\n        (recur (concat accum [(first n1) (first n2)]) (rest n1) (rest n2))\n        accum)))","problem":39,"user":"4f03f3b7535dcb61093f6b85"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [a c1\n         b c2\n         c []]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) (rest b) (conj c (first a) (first b))))))","user":"57f2bf56e4b0511f1d294df8"},{"problem":39,"code":"(fn intlv [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (intlv (next xs) (next ys)) (first ys) (first xs))))","user":"5609866ee4b0053d1b86c7e3"},{"problem":39,"code":"(fn my-interleave\n  [list1 list2]\n  \n  (loop [l1 list1\n         l2 list2\n         r ()]\n    (cond\n      (empty? l1)\n      (reverse r)\n\n      (empty? l2)\n      (reverse r)\n\n      :else\n      (recur (rest l1) (rest l2) (concat (concat (list (first l2)) (list (first l1))) r)))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":39,"code":"(fn [c1 c2] (mapcat #((juxt c1 c2) %1) (range (min (count c1) (count c2)))))","user":"55218bf0e4b0882d96d09196"},{"code":"(fn [a b] (mapcat #(conj [%] %2) a b))","problem":39,"user":"530262c8e4b0d8b024fd3728"},{"problem":39,"code":"(fn [coll1 coll2]\n    (loop [coll1 coll1\n           coll2 coll2\n           acc '()]\n      (if (or (empty? coll1) (empty? coll2))\n        (reverse acc)\n        (recur (rest coll1)\n               (rest coll2)\n               (cons (first coll2) (cons (first coll1) acc))))))","user":"53c69ebce4b00fb29b22129c"},{"code":"(fn [x y]\n  (loop [acc (empty x) s1 x s2 y]\n    (if (or (empty? s1) (empty? s2))\n        acc\n        (recur (concat acc (list (first s1) (first s2)))\n               (rest s1) (rest s2))\n    )\n  )\n)","problem":39,"user":"4ec5a6ee535d6d7199dd36ae"},{"problem":39,"code":"(fn my-interleave [a b]\n        (if (or (empty? a) (empty? b))\n          ()\n          (concat (list (first a)) (list (first b)) (my-interleave (rest a) (rest b)))))","user":"558f4fbae4b0277789237661"},{"problem":39,"code":"(fn i \n  [[a & as] [b & bs]]\n  (if (or (empty? as) (empty? bs))\n    [a b]\n    (concat [a b] (i as bs))))","user":"55e31aa8e4b050e68259b43f"},{"code":"(fn[v1 v2] (flatten (map #(vec [%1 %2]) v1 v2)))","problem":39,"user":"52e68e61e4b09f7907dd1479"},{"problem":39,"code":"(fn [x y]\n  (mapcat\n   (fn [a b] (list a b))\n   x y))","user":"5cb62652e4b026601754b949"},{"code":"(fn [a b]\n  (loop [x a\n         y b\n         result []]\n    (let [v1 (first x)\n          v2 (first y)]\n      (if (and v1 v2)\n        (recur (rest x) (rest y) (conj result v1 v2))\n        result))))","problem":39,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn [& ls] (flatten (apply (partial map list) ls)))","problem":39,"user":"4f03ba9c535dcb61093f6b58"},{"problem":39,"code":"(fn [& x] (flatten (apply (partial map #(apply vector %&)) x)))","user":"55342ee0e4b09218d5f44f98"},{"code":"(fn [& ys] (apply concat (apply map (fn [& xs] xs) ys)))","problem":39,"user":"50733b31e4b0e3170b5a869a"},{"problem":39,"code":"#(loop [a %1 b %2 res [] ]\n   (if (or (empty? a) (empty? b))\n     res\n     (recur (rest a) (rest b)\n            (conj res (first a) (first b))\n     )\n   )\n )","user":"56d902c3e4b0ea9b8538f7ed"},{"code":"(fn f [a b] (if (or (= () a) (= () b)) \n              () \n              (let [a-head (first a) b-head (first b)] \n                (conj (f (rest a) (rest b)) b-head a-head))))","problem":39,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"#(mapcat list % %2)","problem":39,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":39,"code":"(fn [arr1 arr2]\n   (loop [x arr1 y arr2 res []]\n     (if (or (empty? x) (empty? y)) res\n       (recur (next x) (next y) (conj res (first x) (first y))))))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":39,"code":"(fn [seq1 seq2] \n  \n    (loop [result '(), data1 seq1, data2 seq2] \n      \n      (if (or (empty? data2) (empty? data1))\n        (reverse result)\n        (if (empty? data1)\n          (recur (conj result (first data2))(rest data1)(rest data2) )\n          (if (empty? data2)\n            (recur (conj result (first data1))(rest data1)(rest data2) )\n          \t(recur (conj result (first data1) (first data2))(rest data1)(rest data2) )   \n            )\n        )\n      )\n    \n    )      \n  )","user":"59228b00e4b026ae38521281"},{"code":"(fn [seq1 seq2]\n    \t(mapcat (fn [a b] (vector a b)) seq1 seq2))","problem":39,"user":"50342d1be4b062bc5d7ae15f"},{"problem":39,"code":"(fn pack [xs ys]\n  (loop [rxs xs\n         rys ys\n         acc []]\n    (if (or (empty? rxs) (empty? rys)) \n      acc\n    (recur (rest rxs) (rest rys) (conj acc (first rxs) (first rys))))\n  ))","user":"55aa8276e4b0988bba2ad94e"},{"code":"(fn [c1 c2]  \n     (loop [result [] left c1 right c2 ]\n       (if (or (nil? left) (nil? right)) \n            result\n         (recur (conj result (first left) (first right)) (next left) (next right) ) ) ) )","problem":39,"user":"522eba30e4b01cdb292c5f0e"},{"problem":39,"code":"(fn [list-1 list-2]\n  (loop [interleaved [] list-a list-1 list-b list-2]\n  \t(if (or (empty? list-a) (empty? list-b))\n     \tinterleaved\n      \t(recur \n         (conj interleaved (first list-a) (first list-b))\n      \t (rest list-a)\n         (rest list-b)))))","user":"55ddb3f4e4b050e68259b3cd"},{"problem":39,"code":"(fn interl [xs1 xs2]\n  (loop [xs1 xs1 xs2 xs2 res[]]\n    (if (or (empty? xs1) (empty? xs2))\n        res\n        (recur (rest xs1) (rest xs2) (conj res (first xs1) (first xs2))))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":39,"code":"(fn [a b]\n  (loop [a a \n         b b \n         r []]\n    (if (or (nil? a) (nil? b))\n      r\n      (recur (next a)\n             (next b)\n             (conj r (first a) (first b))))))","user":"5f2c04dde4b033932238a660"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq1 seq1\n         seq2 seq2\n         result []]\n    (if (or (empty? seq1) (empty? seq2))\n      result\n      (recur (rest seq1) (rest seq2) (conj (conj result (first seq1)) (first seq2))))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":39,"code":"#(reduce (fn [c [x y]] () (conj c x y)) (map vector %1 %2))","user":"57ad7ad6e4b0b8559636fc9d"},{"problem":39,"code":"(fn bla [c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (bla (rest s1) (rest s2))))) ))","user":"54458995e4b032a45b86939e"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xi (seq xs)\n         yi (seq ys)\n         acc '()]\n    (if (or (empty? xi) (empty? yi))\n      (reverse acc)\n      (recur (rest xi)\n             (rest yi)\n             (conj acc (first xi) (first yi))))))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":39,"code":"(fn [lstA lstB]\n   (loop [lstA lstA\n          lstB lstB\n          aux ()]\n     (if (or (empty? lstA) (empty? lstB))\n       (reverse aux)\n       (recur (rest lstA) (rest lstB) (conj aux (first lstA) (first lstB)))\n       )))","user":"57f81524e4b0d3187e900913"},{"code":"(fn i\n  ([l m]\n   (i l m []))\n  ([[l & ls] [m & ms] a]\n     (if (and l m)\n       (recur ls ms (conj (conj a l) m))\n       a)))","problem":39,"user":"52753740e4b03e8d9a4a74c1"},{"problem":39,"code":"(fn zip [seq1 seq2]\n       (let [h1 (first seq1)\n             h2 (first seq2)]\n         (if (and h1 h2) \n           (cons h1 (cons h2 (zip (rest seq1) (rest seq2))))\n           '())))","user":"560d24a2e4b05f002753df34"},{"code":"(fn take2 [a b] (lazy-seq\n           (let [a1 (first a) b1 (first b)]\n             (when (and a1 b1)\n               (cons a1 (cons b1\n                              (take2 (rest a) (rest b))))))))","problem":39,"user":"4fe89475e4b07c9f6fd12c4f"},{"code":"(fn [x y]\n   (flatten\n    (map (fn [i] (list (x i) (y i)))\n         (range 0 (min (count x) (count y))))))","problem":39,"user":"51547920e4b084ca81ee2e1c"},{"problem":39,"code":"(fn [lxs rxs]\n  (loop [res '() lrest lxs rrest rxs] \n    (if (or (empty? lrest) (empty? rrest))\n      res\n      (recur (concat res (list (first lrest) (first rrest))) (rest lrest) (rest rrest)))))","user":"5de48f92e4b0948ae9d9ae07"},{"code":"#_ (fn i [x y]\n  (if (or (empty? x) (empty? y))\n    nil\n    (concat\n      [(first x) (first y)]\n      (i (rest x) (rest y)))))\n\n#_ (fn [x y] (mapcat #(vector %1 %2) x y))\n\n#_ (fn [x y] (mapcat vector x y))\n\n#_ (mapcat vector %1 %2)\n\nmapcat vector","problem":39,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"(fn myil [ [f1 & r1 :as c1] [f2 & r2 :as c2] ]                                                                                                          \n            (when (and (seq c1) (seq c2))                                                                                                                       \n              (cons f1 (cons f2 (myil r1 r2)))))","problem":39,"user":"4e4be570535dc968683fc4d8"},{"problem":39,"code":"(fn il ([a b] (il a b [])) ([a b c] (if (or (empty? b) (empty? a)) c \n                                    (recur (rest a) (rest b) (conj c (first a) (first b))))))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn [coll1 coll2]\n\t(letfn [(f [coll1 coll2 acc]\n               (if (or (empty? coll1) (empty? coll2))\n                 acc\n                 (recur (rest coll1) (rest coll2) (concat acc [(first coll1) (first coll2)] ))\n                 )\n               )]\n      (f coll1 coll2 '())\n      )\n  )","problem":39,"user":"52cd1ed0e4b07d0d72b27377"},{"problem":39,"code":"(fn x [q1 q2] ((fn its [q1 q2 r] (if (or (= q1 '()) (= q2 '())) r (its (rest q1) (rest q2) (conj r (first q1) (first q2))))) q1 q2 []))","user":"5f79cb16e4b02876ed9fd0cb"},{"problem":39,"code":"#(loop [\n         [v1 & rs1] %\n         [v2 & rs2] %2\n         r []\n         ]\n    (if (or (nil? v1) (nil? v2))\n      r\n      (recur rs1 rs2 (into r [v1 v2]))\n      )\n    )","user":"5e0e836fe4b099d064962fa8"},{"problem":39,"code":"(fn [t1 t2]\n  (let [len (* 2 (min (count t1) (count t2)))]\n    (take len ((fn li [x y] (cons (first x) (lazy-seq (li y (rest x))))) t1 t2))))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":39,"code":"#(loop [l %1\n        r %2\n        ret []]\n   (if (some empty? [l r])\n     ret\n     (recur (rest l) (rest r) (conj ret (first l) (first r)))))","user":"5c6da283e4b0fca0c162273e"},{"problem":39,"code":"(fn [seq1 seq2]\n    (->> (map list seq1 seq2)\n         (apply concat)))","user":"5ff64845e4b06df49cee1495"},{"problem":39,"code":"(fn inter [as bs] ((fn f [xs ys zs] (if (or (empty? xs) (empty? ys))\n                                      (reverse zs)\n                                      (f (rest xs)\n                                         (rest ys)\n                                         (cons (first ys)\n                                               (cons (first xs)\n                                                     zs))))) as bs ()))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [a b]\n  (letfn [(intl [c1 c2]\n            (lazy-seq\n             (let [s1 (seq c1) s2 (seq c2)]\n               (when (and s1 s2)\n                 (cons (first s1) (cons (first s2)\n                                        (intl (rest s1) (rest s2))))))))]\n    (intl a b)))","problem":39,"user":"51502056e4b098b221effc25"},{"code":"(fn [r c d]\n  (if (or (empty? c) (empty? d)) r\n    (recur (conj r (first c) (first d)) (rest c) (rest d)))) []","problem":39,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n\t(cond\n     (empty? coll1) nil\n     (empty? coll2) nil\n     :else \n     (let [l1 (first coll1)\n          \t\tl2 (first coll2)]\n       (->> (my-interleave (rest coll1) (rest coll2))\n           (cons l2)\n            (cons l1)))))","user":"5e157910e4b0a047bd49f701"},{"code":"(fn inter [s1 s2]\n  (when (and (seq s1)  (seq s2))\n    (cons (first s1) (cons (first s2) (inter (rest s1) (rest s2))))) \n )","problem":39,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":39,"code":"(fn [c1 c2] (flatten (map (fn [a b] (list a b)) c1 c2)))","user":"577f635be4b0d36ec5835e64"},{"problem":39,"code":"(fn [fst sec] \n  (flatten (for [idx (range 0 (count fst))\n       :let [x (get fst idx)]\n       :let [y (get sec idx)]\n      :when (< idx (count sec))]\n    (list x y))))","user":"5470cb10e4b094393f72dd65"},{"problem":39,"code":"#(loop [l1 %\n        l2 %2\n        firstListsTurn? true\n        newList []]\n   (if (or (and (empty? l1) firstListsTurn?) (empty? l2))\n   newList\n   (recur (if firstListsTurn? (rest l1) l1) (if firstListsTurn? l2 (rest l2)) (not firstListsTurn?) (conj newList (if firstListsTurn? (first l1) (first l2))))))","user":"58248186e4b051871117bec6"},{"code":"#(mapcat (fn [v1 v2] (list v1 v2)) %1 %2)","problem":39,"user":"4def301c535d08e6dec9fe12"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [src1 seq1 src2 seq2 dst '()]\n    (if (or (empty? src1)\n            (empty? src2))\n      (reverse dst)\n      (recur (rest src1)\n             (rest src2)\n             (conj (conj dst\n                         (first src1))\n                   (first src2))))))","user":"56c55fbce4b05cc29241eea5"},{"code":"(fn interleve [a b]\r\n  (letfn [(iter [a b]\r\n    (let [[x & xs] a\r\n          [y & ys] b]\r\n      (cons x (cons y (lazy-seq (iter xs ys))))))]\r\n  (take (* 2 (min (count a) (count b))) (iter a b))))","problem":39,"user":"4ddb339c535d02782fcbe9f9"},{"problem":39,"code":"(fn intlv [v1 v2]\n  (let [c (min (count v1) (count v2))\n        v1# (take c v1)\n        v2# (take c v2)]\n    (loop [lef v1# rig v2# res (list)]\n      (if (empty? lef)\n        (reverse res)\n        (recur (rest lef) (rest rig) (cons (first rig) (cons (first lef) res)))\n        ))))","user":"58d1c1b1e4b03c36ff7e58ef"},{"code":"#(apply mapcat vector %&)","problem":39,"user":"4eae5fe4535d7eef30807325"},{"code":"(comp \n  (partial apply concat)\n  (partial map #(list % %2)))","problem":39,"user":"5153316ce4b0252ac4b16611"},{"problem":39,"code":"#(flatten (map (fn [a b]\n                 [a b])\n               %1\n               %2))","user":"5688e403e4b0dcc4269f4072"},{"problem":39,"code":"(fn [x y](flatten (map #(list %1 %2) x y)))","user":"50e896a5e4b0ebbe794eb7eb"},{"problem":39,"code":"mapcat #(conj nil %2 %1)","user":"55b0ecb7e4b002ce9d5cbc27"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys res '()]\n  (cond (empty? xs) (reverse res)\n        (empty? ys) (reverse res)\n        :else\n        (recur (rest xs) (rest ys) (conj res (first xs) (first ys))))))","problem":39,"user":"504f5804e4b0a02f9cffde72"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x1 s1\n         x2 s2\n         results []]\n    (if (and (not-empty x1) (not-empty x2))\n      (recur (rest x1) (rest x2) (conj results (first x1) (first x2)))\n      results)))","user":"59199cc3e4b09b4ee5954bc8"},{"problem":39,"code":"(fn [s1 s2] \n  (flatten(map #(identity [%1 %2]) s1 s2)))","user":"5ce867fce4b0a17bb84e2baf"},{"problem":39,"code":"(fn [lstA lstB]\n  (mapcat #(concat (list %1) (list %2)) lstA lstB))","user":"5aa00b7fe4b0d174b936c825"},{"problem":39,"code":"(fn inter\n  [s1 s2]\n  (mapcat (fn [v1 v2] [v1 v2])\n          s1 s2))","user":"5264502be4b03e8d9a4a70cf"},{"problem":39,"code":"(fn ilv [xs ys]\n  (if\n  \t(or (empty? xs) (empty? ys))\n    '()\n    (cons (first xs) (cons (first ys) (ilv (rest xs) (rest ys))))))","user":"5e98e8a9e4b0157ca96647dc"},{"code":"(fn [x y] \n  (flatten\n    (filter (complement nil?)\n    (map-indexed \n      (fn [idx xitem] (if(> (count y) idx)[xitem (nth y idx)])) x\n)\n)\n)\n)","problem":39,"user":"504f3fa3e4b0a02f9cffde62"},{"code":"(fn jinterleave\n  [lst1 lst2]\n  (flatten (map list lst1 lst2)))","problem":39,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":39,"code":"(fn [a b] \n  (mapcat \n   (fn [a b] [a b])\n   \ta b\n   )\n  )","user":"5e34348be4b0650de70e2b16"},{"problem":39,"code":"(fn [a b]\n  (->\n   (zipmap b a)\n   (seq)\n   (flatten)\n   (reverse)))","user":"5935151ee4b072a2710fd084"},{"code":"(fn [c1 c2]\n  (loop [res []\n         l1 c1\n         l2 c2]\n    (cond (empty? l1) res\n          (empty? l2) res\n           :else (recur (conj res (first l1)\n                  (first l2)) (rest l1) (rest l2)))))","problem":39,"user":"4f230dfbe4b0d66497709fe0"},{"problem":39,"code":"(fn [x y]\n  (flatten (map (partial conj '()) y x)))","user":"55dfe72ee4b050e68259b400"},{"code":"#(flatten ( seq ((fn [one two] (map-indexed (fn [idx it] (if (and (< idx (count one)) (< idx (count two))) [(nth one idx) (nth two idx)])) (range (min (count one) (count two))))) %1 %2)))","problem":39,"user":"52485723e4b05ef8e38e63d2"},{"code":"(fn interleave-two-seqs [x y]\n      (if (or (empty? x)\n              (empty? y))\n        []\n        (concat (list (first x)) \n                (list (first y))\n                (interleave-two-seqs (rest x) (rest y)))))","problem":39,"user":"52e17e66e4b09f7907dd1423"},{"problem":39,"code":"(fn\n  [& args]\n  (flatten\n    (apply\n      map\n      (fn [& vals] (list vals))\n      args)))","user":"59a6185ee4b066c664927d76"},{"problem":39,"code":"#(loop [in-list-1 %1 in-list-2 %2 out-list '()]\n    (if (or (empty? in-list-1) (empty? in-list-2))\n        (reverse out-list)\n        (recur\n            (rest in-list-1)\n            (rest in-list-2)\n            (conj out-list (first in-list-1) (first in-list-2)))))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":39,"code":"#(flatten (map (fn[a b] (cons a (cons b []))) %1 %2))","user":"50746e23e4b054001656acd1"},{"code":"(fn [s1, s2] (mapcat (fn [c1 c2](conj [] c1 c2)) s1 s2))","problem":39,"user":"5089d52ce4b03217b26a539d"},{"problem":39,"code":"(fn my-interleave [ls1 ls2]\n  (flatten (map list ls1 ls2)))","user":"554bc026e4b0a04f79299597"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1\n         c2 c2\n         res []]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur (rest c1) (rest c2) (conj res (first c1) (first c2))))))","user":"548f37c7e4b0e286459a1234"},{"code":"(fn [ a b ] (flatten (map list a b )))","problem":39,"user":"4f0386ac535dcb61093f6b13"},{"problem":39,"code":"(fn \n  [seq1 seq2]\n  (flatten (map #(list %1 %2) seq1 seq2)))","user":"5e16006be4b0a047bd49f711"},{"problem":39,"code":"(fn [x y] (flatten (concat (map list x y))))","user":"5650ac8be4b0284900eef6c2"},{"code":"(fn [c1 c2]\n  (loop [f c1, s c2, r []]\n    (if (and (first f) (first s))\n      (recur (rest f) (rest s) (conj r (first f) (first s)))\n      r)))","problem":39,"user":"51f40975e4b0fca5e8b4822e"},{"problem":39,"code":"(fn [xs1 xs2] (mapcat #(vector %1 %2) xs1 xs2))","user":"54ecd716e4b024c67c0cf85a"},{"code":"(fn intlv[a b] (mapcat #(vector % %2) a b))","problem":39,"user":"4db13ff51254ad5b4805fa68"},{"problem":39,"code":"mapcat (fn [a b] (concat (list a) (list b)))","user":"5447e5b7e4b032a45b8693c4"},{"code":"(fn [coll1 coll2]\n  (loop [xs coll1 ys coll2 acc []]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur (rest xs) (rest ys) (conj (conj acc (first xs)) (first ys))))))","problem":39,"user":"4e36425c535deb9a81d77f33"},{"code":"#(flatten (let [n (min (count %1) (count %2)) l (list)]\n   (for [i (range n)] (conj l (nth %2 i) (nth %1 i)))))","problem":39,"user":"52b80827e4b0c58976d9ad56"},{"problem":39,"code":"(fn [x y]\n  (#(if (or (and %2 %3) (and %2 (= (mod (count %) 2) 1)))\n      (recur (conj % (first %2)) %3 (next %2))\n      %)\n        [] x y))","user":"542a8d07e4b01498b1a71b43"},{"code":"(fn f [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (conj (f (rest x) (rest y)) (first y) (first x))))","problem":39,"user":"52379c46e4b0fae3832e99db"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         res []]\n    (let [x (first xs)\n          y (first ys)]\n      (if (or (nil? x) (nil? y))\n        res\n        (recur (rest xs) (rest ys) (conj res x y))))))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":39,"code":"#(mapcat (fn [x y] (conj [] x y)) %1 %2)","user":"54696e4ce4b00cfc9eacc147"},{"code":"(fn [x y] \n  (loop [xs x ys y acc []] \n    (if (and (seq xs) (seq ys)) \n      (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))) \n      acc)))","problem":39,"user":"529dfc6de4b04e0c58e87b8a"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (map (fn [a b] [a b]) xs ys))\n  )","user":"59e0f839e4b08badc2a0c502"},{"code":"mapcat #(identity [%1 %2])","problem":39,"user":"4ec3b393535dcc7ae8597d59"},{"code":"(fn  [seq1 seq2]\n  (loop [seq1 seq1\n         seq2 seq2\n         result '()]\n    (if (or (empty? seq1) (empty? seq2))\n      (reverse result)\n      (recur (rest seq1)\n             (rest seq2)\n             (concat (list (first seq2) (first seq1)) result)))))","problem":39,"user":"51f297a3e4b0210f90e74552"},{"problem":39,"code":"(fn [lst1 lst2] (loop [l0 '() l1 lst1 l2 lst2]  (println l0 l1 l2) (cond(empty? l1) l0 (empty? l2) l0 :else (recur (concat l0 (list (first l1)) (list (first l2))) (rest l1) (rest l2)))))","user":"5cd127bce4b0ccb0619628e1"},{"code":"(fn [c1 c2] (mapcat #(vector %1 %2) c1 c2))","problem":39,"user":"4e4ad154535dc968683fc4d1"},{"problem":39,"code":"#(flatten (map (fn [x y] \n                 (conj '() y x)) \n               %1 %2))","user":"59a3f3dce4b066c664927d48"},{"problem":39,"code":"(fn i [c1 c2]\n  (lazy-seq (\n             let [s1 (seq c1) s2 (seq c2)]\n             (when (and s1 s2)\n               (cons (first s1)\n                     (cons (first s2)\n                           (i (rest s1) (rest s2))))\n               )\n             \n             )))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn a\n  ([v1 v2] (a (rest v1) (rest v2) (vector (first v1) (first v2))))\n  ([v1 v2 acc]\n   (if (empty? v1)\n     acc\n     (if (empty? v2)\n       acc\n       (a (rest v1) (rest v2) (conj acc (first v1) (first v2))))))\n  )","problem":39,"user":"52727d52e4b03e8d9a4a7439"},{"problem":39,"code":"(fn join [x y] (reduce into (map vector x y)))","user":"53bc279ae4b047364c04450e"},{"problem":39,"code":"(fn interlist [lst1 lst2] \n  (loop [lst3 '()\n         lst1  lst1\n         lst2  lst2]\n    (if (or (empty? lst1) (empty? lst2))\n      (reverse lst3)\n      (recur (conj lst3 (first lst1) (first lst2)) (rest lst1) (rest lst2))  \n      )\n    )\n  )","user":"5f84f110e4b0375e81f54e79"},{"code":"(fn my-interleave [a b]\n  (loop [a a b b acc []]\n    (if (or (empty? a) (empty? b)) acc\n      (recur (next a) (next b)\n        (conj acc (first a) (first b))))))","problem":39,"user":"4e7f7e48535db966e863cc42"},{"problem":39,"code":"(fn [coll1 coll2] (flatten (map (fn [y z] [y z]) coll1 coll2)))","user":"534cf749e4b084c2834f4a97"},{"problem":39,"code":"(fn [sq1 sq2]\n  (loop [[fst1 & rst1 :as all1] sq1 [fst2 & rst2 :as all2] sq2 res []]\n    (if (or (empty? all1) (empty? all2))\n      res\n    (recur rst1 rst2 (conj (conj res fst1) fst2)))))","user":"60759e51e4b069485764de5a"},{"code":"#(loop [a %1\n        b %2\n        r []]\n   (if (or (empty? a) (empty? b))\n     r\n     (recur (rest a) (rest b) (conj r (first a) (first b)))))","problem":39,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [[f1 & r1] s1 [f2 & r2] s2 sofar []]\n    (if-not (and f1 f2)\n      sofar\n      (recur r1 r2 (conj sofar f1 f2)))))","user":"57afd36de4b0fbc9809a273c"},{"problem":39,"code":"#(loop [[h1 & r1] %1\r\n          [h2 & r2] %2\r\n          r []]\r\n     (if (not (or (empty? r2) (empty? r1)))\r\n       (recur r1 r2 (conj r h1 h2))\r\n       (conj r h1 h2)))","user":"53acca34e4b047364c044460"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map #(list % %2) seq1 seq2)))","user":"541709b0e4b01498b1a71a06"},{"problem":39,"code":"(fn interseq [xs ys]\n  (mapcat (fn [x y] [x y]) xs ys))","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn my-interleave [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n      ()\n      (lazy-seq (cons (first coll1)\n                      (cons (first coll2)\n                            (my-interleave (rest coll1)\n                                           (rest coll2)))))))","problem":39,"user":"4e7c8fd1535db169f9c796be"},{"problem":39,"code":"(fn [lst1 lst2] (flatten (map #(concat [%1] [%2]) lst1 lst2)))","user":"56367c51e4b0bfe05bf117cd"},{"code":"(fn entrelace [liste1 liste2]\n  (loop [a liste1 b liste2 rep []]\n    (if (or (empty? a) (empty? b)) rep\n      (recur (rest a) (rest b) (conj rep (first a) (first b))))))","problem":39,"user":"4e36e647535deb9a81d77f36"},{"code":"mapcat #(do [% %2])","problem":39,"user":"51131da8e4b0350614f07a83"},{"problem":39,"code":"(fn [s1 s2] \n  (letfn [(hp [s1 s2 headseq] \n                                 (if (or (= 0 (count s1))\n                                           (= 0 (count s2)))\n                                   headseq\n                                   (hp (rest s1) (rest s2) (conj headseq (first s1) (first s2)))\n                                ))]\n                                (hp s1 s2 [])))","user":"54ed7293e4b024c67c0cf863"},{"problem":39,"code":"(fn myinterleave\n  [as bs]\n  (loop [\n         cs []\n         ra as\n         rb bs]\n    (let [\n          fa (first ra)\n          fb (first rb)]\n    (if (and fa fb)\n      (recur (into cs [fa fb]) (next ra) (next rb))\n      cs))))","user":"588e4e05e4b00487982d5188"},{"code":"(comp flatten\n      (partial map (fn [& args] args)))","problem":39,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":39,"code":"(fn inter\n  [a1 b1]\n  (loop [a a1\n         b b1\n         c ()]\n    (if (or (empty? a)(empty? b))\n      (reverse c)\n      (recur (rest a) (rest b) (conj c (first a)(first b))))))","user":"57f814fbe4b0d3187e900911"},{"problem":39,"code":"(fn [c1 c2] \n  (loop [acc []\n         c1 c1\n         c2 c2]\n    (if (and (seq c1) (seq c2))\n      (recur (conj acc (first c1) (first c2)) (rest c1) (rest c2))\n      acc)))","user":"5daa0d56e4b000c986472c3c"},{"problem":39,"code":"(fn inter [s1 s2]\n  (if (or (empty? s1) (empty? s2)) '() (concat (list (first s1) (first s2)) (inter (rest s1) (rest s2))))\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"code":"(fn [a b]\n  (loop [a a\n         b b\n         return '()]\n    (if (or (empty? a) (empty? b))\n      (reverse return)\n      (recur (rest a)\n             (rest b)\n             (conj (conj return (first a)) (first b))))))","problem":39,"user":"50d8de3fe4b01f0871336e72"},{"code":"#(flatten  (map list %1 %2))","problem":39,"user":"52761edae4b03e8d9a4a74d4"},{"problem":39,"code":"(fn mergeArr [x1 x2] (reduce into [] (map #(flatten (vector %1 %2)) x1 x2)))","user":"5c0ebca5e4b01240ff567147"},{"problem":39,"code":"(fn my-interleave [c1 c2 & {:keys [res] :or {res []}}]\n  (if (or (empty? c1) (empty? c2))\n    res\n    (recur (rest c1) (rest c2) {:res (conj res (first c1) (first c2))})))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn mine [[frst1 & rst1] [frst2 & rst2]]\n(\n  if (not-any? nil? [rst1 rst2])\n    (concat [frst1 frst2] (mine rst1 rst2))\n    (concat [frst1 frst2])\n))","problem":39,"user":"4ff2f0a9e4b0678c553fc341"},{"code":"(fn apa [a b]\r\n  (if (or (empty? a) (empty? b) )\r\n    '()\r\n   (cons (first a) (cons (first b) (apa (rest a) (rest b)))\r\n)  ))","problem":39,"user":"508eea7de4b0706b2ed3ef8e"},{"problem":39,"code":"(fn [coll1 coll2]\n   (let [coll []]\n     (flatten\n      (map #(conj coll %1 %2) coll1 coll2))))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":39,"code":"(fn [ aSeq1 aSeq2 ]\n  (loop [ leftSeq aSeq1\n          rightSeq aSeq2\n          resultSeq [] ]\n    (if (nil? (first leftSeq))\n      resultSeq\n      (if (nil? (first rightSeq))\n        resultSeq\n        (recur (next leftSeq)\n               (next rightSeq)\n               (conj (conj resultSeq (first leftSeq)) (first rightSeq)))\n      )\n    )\n  )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":39,"code":"(fn q39 [s1 s2]\n  (->> (let [c (min (count s1) (count s2))]\n         (for [x (range c)] [(nth s1 x) (nth s2 x)]))\n       (flatten)))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"(fn f [L1 L2] \n  (if (or (empty? L1) (empty? L2))\n    '()\n    (concat (list (first L1) (first L2)) (f (rest L1) (rest L2)))\n  )\n)","problem":39,"user":"52bf936ee4b07a9af579233b"},{"problem":39,"code":"(fn [a b] (loop [s [] x a y b] (if (or (empty? x) (empty? y)) s (recur (conj s (first x) (first y)) (rest x) (rest y)))))","user":"5ab564f8e4b073f177442639"},{"problem":39,"code":"(fn [coll1 coll2]\n      (loop [seqA (seq coll1)\n           seqB (seq coll2)\n           result '()]\n      (if (or (= (count seqA) 0) (= (count seqB) 0))\n        result\n        (recur (rest seqA) (rest seqB) (concat result (list (first seqA) (first seqB)))))))","user":"5a7ff79ce4b00b71e582a046"},{"problem":39,"code":"(fn inter [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a) (cons (first b) (inter (rest a) (rest b))))))","user":"5256dcc0e4b0541d1855ba3c"},{"problem":39,"code":"(fn [xs ys] (flatten (map #(reverse (conj '() %1 %2)) xs ys)))","user":"587cbebbe4b01531a375eb24"},{"problem":39,"code":"(fn [s t] (flatten (mapv vector s t)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":39,"code":"(fn[coll1 coll2]\n  (mapcat list coll1 coll2))","user":"600d9808e4b074f607df669c"},{"problem":39,"code":"(fn inter [& args]\n  (if (some true? (map #(= (count %) 1) args))\n    (flatten (map first (filter not-empty args)))\n    (concat (flatten (map first args)) (apply inter (map rest args)))))","user":"595ed97fe4b066ee0a44b051"},{"problem":39,"code":"(fn [x y]\n    (let [cx (count x)\n          cy (count y)\n          mini (if (< cx cy) cx cy)]\n        (mapcat vector (take mini x) (take mini y))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"(fn f [[a & b] [x & y]]\n  (if (and a x)\n\t  (cons a (cons x (f b y)))\n\t\t()))","problem":39,"user":"4fdc3065e4b05e33b9224f6b"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (mapcat (fn [x y] (list x y)) seq1 seq2))","user":"5bd27a37e4b0e9689409ee60"},{"code":"(fn[a b] \n    (:r (reduce \n        (fn[x y] (let [r (x :r)\n                       o (x :2)\n                      ] \n                      {:r (if (nil? o) r (conj (conj r y) (first o)))\n                       :2 (next o)\n                      }\n        ))\n        {:r []\n         :2 b }\n        a\n    ))\n)","problem":39,"user":"5017eface4b02f523d7cc5e7"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [res [] c1 col1 c2 col2]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur (concat res [(first c1) (first c2)]) (rest c1) (rest c2)))))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":39,"code":"(fn f [c1 c2]\n  (if (or (empty? (rest c1)) (empty? (rest c2)))\n    (list (first c1) (first c2))\n    (conj (f (rest c1) (rest c2)) (first c2) (first c1))\n  )\n)","user":"5ab1665de4b073f1774425c0"},{"problem":39,"code":"(fn [x y] (flatten (map (fn [u v] (list u v)) x y)))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":39,"code":"(fn [x y]\n        (loop [a x b y z '()]\n        (if (and (seq a) (seq b))\n                (recur (rest a) (rest b) (cons (first b) (cons (first a) z)))\n                (reverse z)\n        ))\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"code":"(fn intl [l1, l2] \n  (if (or (empty? l1) (empty? l2))\n    '()\n    (concat (list (first l1) (first l2)) (intl (rest l1) (rest l2)))\n))","problem":39,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":39,"code":"(fn [m1 m2]\n  (mapcat list m1 m2))","user":"5baa1b58e4b0a20761a2344e"},{"problem":39,"code":"(fn i [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (i (rest s1) (rest s2))))))))","user":"57c7a8b5e4b05aa3c4741d09"},{"code":"(fn [a b](flatten (map vector a b)))","problem":39,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn i [c1 c2] (if (or (empty? c1) (empty? c2)) () (-> (i (rest c1) (rest c2)) (conj (first c2))  (conj (first c1)))))","problem":39,"user":"50d242c0e4b06ad58337ed0f"},{"problem":39,"code":"(fn f [x y]\n        (when-not (or (empty? x) (empty? y))\n          (concat (list (first x) (first y)) (f (rest x) (rest y)))))","user":"575fbe58e4b08062f99a4e87"},{"code":"#(flatten(map list % %2))","problem":39,"user":"4ec2f1d9535dcc7ae8597d4d"},{"problem":39,"code":"(fn mix\n  [l1 l2]\n  (if (or (empty? l1)\n          (empty? l2))\n    '()\n    (cons (first l1) \n          (cons (first l2)\n                (mix (rest l1)\n                     (rest l2))))))","user":"56e8ef93e4b04a395b9a03f4"},{"problem":39,"code":"(fn f [c a b]\n  (if (or (empty? a) (empty? b)) c\n    (f (concat c (list (first a) (first b))) (rest a) (rest b)))) ()","user":"589f4387e4b02bd94d917e7b"},{"code":"(fn [xs ys]\n  (let [m [] ]\n    (flatten (map (fn[x y] (conj m x y)) xs ys))))","problem":39,"user":"529d292fe4b04e0c58e87b74"},{"problem":39,"code":"(fn inter [a b]\n  (if (and a b)\n    (concat [(first a) (first b)] (inter (next a) (next b))\n          )))","user":"52eb2ec9e4b0705949c44439"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1, c2 coll2, result []]\n    (if (or (empty? c1) (empty? c2))\n        result\n        (recur (rest c1) (rest c2) (conj result (first c1) (first c2))))))","user":"567695c2e4b05957ce8c6157"},{"problem":39,"code":"(fn il\n  ([x s]\n   (il x s '()))\n  ([x s acc]\n  (cond\n    (or (empty? x) (empty? s)) acc\n    :else (il (rest x) (rest s) (concat acc [(first x)] [(first s)]))))\n  )\n\n;mapcat vector","user":"582cbf48e4b051871117bfa6"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs' xs\n         ys' ys\n         result []]\n    (if (and (first xs') (first ys'))\n      (recur (rest xs') (rest ys') (conj result (first xs') (first ys')))\n      (seq result))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":39,"code":"(fn [n, m] (reverse (flatten (seq (zipmap m n)))))","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [x c1 y c2 res []]\n    (if (or (empty? x) (empty? y))\n      res\n      (recur (rest x) (rest y) (conj res (first x) (first y))))))","user":"5db6cc4ae4b010eb3c36cd3b"},{"code":"(fn solution [x y]\n  (if\n    (or (empty? x) (empty? y))\n    '()\n    (concat (list (first x) (first y)) (solution (rest x) (rest y)))\n  )\n)","problem":39,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":39,"code":"(fn [& seqs]\n  (flatten\n   (for [i (range (apply min (map count seqs)))] \n    (for [s seqs]\n      (nth s i)\n      )\n    )\n  )\n  )","user":"5ade6bafe4b0837691e92c23"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         out '()]\n    (if (or (empty? a) (empty? b))\n      (reverse out)\n      (recur (rest a) (rest b) (conj out (first a) (first b))))))","user":"5530b827e4b076ab5578f818"},{"problem":39,"code":"#(flatten (mapv (fn [& x] x) %1 %2))","user":"5fdbde92e4b05ac5b16ea137"},{"problem":39,"code":"( fn [ seq1 seq2 ]\n    (loop [ index 0, acc [] ] \n         (let [ seq1item (get seq1 index), seq2item (get seq2 index) ] \n         (if (and seq1item seq2item)\n            (recur (inc index) (conj acc seq1item seq2item))\n            acc))))","user":"59f90e6ae4b0ca45a743a337"},{"code":"(fn [x y]\n  ((fn [a b result]\n      (if (or (empty? a) (empty? b))\n          (reverse result)\n          (recur (rest a) \n                 (rest b)\n                 (conj (conj result (first a))\n                       (first b)))))\n   x y '()))","problem":39,"user":"4e73a9dc535dff18050a9c77"},{"problem":39,"code":"(fn [& colls]\n    (flatten (apply mapv #(into [] %&) colls))\n    \n    )","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn [coll1 coll2]\r\n  (loop [c1 coll1 c2 coll2 acc []]\r\n     (if (and (first c1) (first c2))\r\n         (recur (rest c1) (rest c2) (conj (conj acc (first c1)) (first c2)))\r\n         acc)))","problem":39,"user":"4df168bd535d08e6dec9fe1d"},{"code":"(fn my-interleave\n  [a b]\n  (apply concat (map vector a b)))","problem":39,"user":"510591dde4b06d28cacc92eb"},{"problem":39,"code":"(fn my-il [la lb]\n  (if (or (empty? la) (empty? lb)) '()\n    (concat [(first la) (first lb)] (my-il (rest la) (rest lb)))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"(fn [l1,l2]\n    (reverse\n        (apply concat (zipmap l2 l1))))","problem":39,"user":"4f85ef29e4b033992c121c4d"},{"code":"(fn fn-intlv\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (fn-intlv (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply fn-intlv (map rest ss))))))))","problem":39,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn new-interleave\n  [c1 c2]\n  (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                             (new-interleave (rest s1) (rest s2))))))))","problem":39,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":39,"code":"(fn [fs ss]\n  (flatten (map (fn [v1 v2] [v1 v2]) fs ss)))","user":"589ac5a2e4b00487982d5318"},{"problem":39,"code":"(fn [a b]\n  (->\n    (for [[ix x] (map-indexed vector a)\n        [iy y] (map-indexed vector b)\n        :when (= ix iy)]\n        [x y]\n        )\n    flatten\n  )\n)","user":"5e2586afe4b05b4b01516167"},{"code":"(fn [x y]\n   ((fn [a b acc]\n      (if (or (empty? a) (empty? b))\n        acc\n        (recur (rest a) (rest b) (flatten (cons acc (list (first a)(first b)))))))\n    x y '()))","problem":39,"user":"4feded14e4b0d2a5fc2962ec"},{"problem":39,"code":"(fn [& cs]\n  (apply mapcat list cs))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn me [xs ys]\n  (cond\n   (= xs nil) xs\n   (= ys nil) ys\n   :else (conj (me (next xs) (next ys))\n                   (first ys) (first xs))))","problem":39,"user":"51ef66a7e4b0871fa145d9a5"},{"problem":39,"code":"#(loop [sqnc1 %1\n        sqnc2 %2\n        sqnc []]\n  (if (some empty? [sqnc1 sqnc2])\n    sqnc\n  \t(let [newsqnc (conj sqnc (first sqnc1) (first sqnc2))]\n  \t(recur (rest sqnc1) (rest sqnc2) newsqnc))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn i [a b] \n  (when (and (seq a) (seq b))\n  (cons \n   (first a) (cons\n              (first b) (i\n                         (rest a) (rest b))))))","problem":39,"user":"534bd9c1e4b084c2834f4a80"},{"problem":39,"code":"(fn [col1 col2]\n    (->> [col1 col2]\n         (map count)\n         (apply min)\n         range\n         (mapcat #(vector (col1 %) (col2 %)))))","user":"5f0e8312e4b0f30dddfb5d5b"},{"code":"(fn[s1 s2]\n  (mapcat (fn[a b] [a b]) s1 s2))","problem":39,"user":"4e58bcd4535d8a8b8723a296"},{"problem":39,"code":"(fn ileave [u v]\n  (let [num (min (count u) (count v))]\n    (if (not (= (count u) (count v)))\n      (recur (take num u) (take num v))\n      ((fn ileave-inner [u v]\n        (let [ucount (count u), vcount (count v)]\n          (if (= vcount 0)\n            u\n            (let [start (inc (* (- num vcount) 2)),\n                  end (- ucount start)]\n              (recur (concat (take start u) [(first v)] (take-last end u))\n                     (rest v)))))) u v))))","user":"56a2777be4b0542e1f8d14bf"},{"problem":39,"code":"#(flatten (mapv (fn [x y] [x y]) % %2))","user":"5a625bc2e4b0512ff01cd989"},{"problem":39,"code":"(fn fun [x y] \n    (cond (and (empty? x) (not (empty? y))) x\n        (and (empty? y) (not (empty? x))) y\n            (and (empty? x) (empty? y)) x\n            :else (concat (list (first x) (first y)) (fun (rest x) (rest y)))))","user":"592bb806e4b072a2710fcf46"},{"problem":39,"code":"(fn myinter [a b]\n   (let [indices (range 0 (min (count a) (count b)))]\n     (reduce (fn [acc i] (into acc [(nth a i) (nth b i)])) [] indices))\n   )","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn ! [s1 s2]\n  (cond (= 0 (count s1)) '()\n        (= 0 (count s2)) '()\n        :else (concat \n                (list (first s1) (first s2))\n                (! (rest s1) (rest s2)))))","problem":39,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"problem":39,"code":"(fn [x y] (\n           letfn [(inter [x y lst] (\n                                    if (or (empty? x) (empty? y))\n                                    lst\n                                    (inter (rest x) (rest y) (into lst (list (first x) (first y))))))]\n           (inter x y [])))","user":"572a543ee4b0f4d77e651235"},{"problem":39,"code":"(fn my-interleave [v1 v2]\n  (loop [xs v1\n         ys v2\n         zs []]\n    (if (or (empty? xs) (empty? ys))\n      zs\n      (let [[x & rxs] xs\n            [y & rys] ys]\n        (recur rxs rys (conj (conj zs x) y))))))","user":"54a31fdae4b09f271ff37c64"},{"code":"#_#(reduce (fn [acc el] (concat acc el)) []\n(map (fn [a b] [a b]) %1 %2))\n\n#_#(reduce concat\n   (map vector %1 %2))\n\n#_#(mapcat vector %1 %2)\n\nmapcat vector","problem":39,"user":"4f1bb9d8535d64f60314647d"},{"problem":39,"code":"(fn [left right]\n  (loop [l left r right result []]\n    (if (or (empty? l) (empty? r))\n      result\n      (recur (rest l) (rest r) (conj (conj result (first l)) (first r))))))","user":"4dce9252535d5973398f92a3"},{"code":"; #(flatten (map vector % %2))\n\nmapcat list","problem":39,"user":"52ac41fee4b0c58976d9ac85"},{"problem":39,"code":"#(let [n (min (count %) (count %2))]\n        ((fn merge_ [x y]\n    (if (not (first x))\n        nil\n        (concat \n            [(first x) (first y)]\n            (merge_\n                (rest x) \n                (rest y))))) (take n %) (take n %2)))","user":"54213a8fe4b01498b1a71aaf"},{"code":"#(loop [acc ()\n        [x1 & xrest :as x] %1\n        [y1 & yrest :as y] %2]\n   (if (some empty? [x y])\n     (reverse acc)\n     (recur (cons y1 (cons x1 acc)) xrest yrest)))","problem":39,"user":"4db29f98535df7e46ed9b6c1"},{"problem":39,"code":"(fn interleave* [x y]\n  (loop [x x\n         y y\n         acc []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (concat acc [(first x) (first y)]))\n      acc)))","user":"500e6ddee4b04a05d36fcc06"},{"problem":39,"code":"(fn interleave'\n  [[x & xs] [y & ys]]\n  (if (and x y)\n    (conj (interleave' xs ys) y x)\n    '()))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"(comp flatten #(reduce conj [] %) #(map vector %1 %2))","problem":39,"user":"4ff3df0fe4b0678c553fc355"},{"problem":39,"code":"(comp (partial apply concat) (partial map list ))","user":"57a8eba2e4b0a96607956225"},{"problem":39,"code":";(fn [sq1 sq2] \n;  (let [joinN (fn joinN [pos sq1 sq2] \n;      (conj (conj [] (.get sq1 pos)) (.get sq2 pos)) \n;    )]\n;    (flatten (map (fn [pos] (joinN pos sq1 sq2)) (range (min (count sq1) (count sq2)))))\n;  )\n;)\n\n(fn [sq1 sq2] \n  (mapcat #(conj [] %1 %2) sq1 sq2)\n  )","user":"58694f69e4b0f14aab7c889f"},{"problem":39,"code":"(fn [seq1 seq2]\n     (loop [a seq1 b seq2 zip []]\n           (if (or (empty? a) (empty? b))\n             zip\n             (recur (rest a) (rest b) (conj zip (first a)  (first b) )))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":39,"code":"#(reduce concat \n  (map list % %2))","user":"55cc56bee4b0e31453f64a0f"},{"code":"(fn [s e]\r\n  (flatten\r\n    (map #(list %1 %2) s e)\r\n           ))","problem":39,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn [a b]\n  (apply concat\n  (for [i (range (min (count a) (count b)))]\n    [(nth a i) (nth b i)])))","problem":39,"user":"4e80d71b535db62dc21a62b7"},{"code":"(fn x-interleave [m n]\r\n  (when (and (not-empty m) (not-empty n))\r\n\t\t(let [a (first m) b (first n)]\r\n(cons a (cons b (x-interleave (rest m) (rest n)))))))","problem":39,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"(fn inter2 [a b]\n  (loop [acum '()\n         remaining_a a\n         remaining_b b]\n    (if (or (empty? remaining_b) (empty? remaining_a))\n      (reverse acum)\n      (recur (conj acum (first remaining_a) (first remaining_b)) (rest remaining_a) (rest remaining_b)))))","problem":39,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":39,"code":"(fn [v1 v2] (mapcat #(do %) (map #(do [%1 %2]) v1 v2)))","user":"53e1e1f1e4b0d874e779ae5e"},{"code":"#(mapcat identity (map vector % %2))","problem":39,"user":"4ee88bfb535d93acb0a66881"},{"problem":39,"code":";; This should work! But doesn't!\n;;(comp (partial mapcat seq) zipmap)\n\n;; verbose :( but I couldn't get zipmap to work\n#_#(flatten\n  (for [n (range (min (count %1) (count %2)))]\n    [(nth %1 n) (nth %2 n)]))\n\nmapcat vector","user":"5a257747e4b07f18be40aa1f"},{"problem":39,"code":"(fn intl[c1,c2]\n  (if (or (empty? c1)\n        (empty? c2))\n    nil\n   (flatten (cons [(nth c1 0) (nth c2 0)]\n          (lazy-seq (intl (rest c1) (rest c2)))))))","user":"5398123ee4b0b51d73faaef3"},{"code":"(fn a[x y]\n  (when (and (first x) (first y))\n    (cons (first x) (cons (first y) (a (rest x) (rest y ))))))","problem":39,"user":"4e3ae7cd535deb9a81d77f4e"},{"code":"(fn ilv [a b] (if (and (next a) (next b)) (into [(first a) (first b)] (ilv (next a) (next b))) [(first a) (first b)]))","problem":39,"user":"5191e91de4b08962174cf733"},{"problem":39,"code":"(fn my-interleave [f s]\n  (loop [s1 f\n         s2 s\n         res []]\n    (if (or (nil? (first s1)) (nil? (first s2)))\n      res\n      (recur (rest s1) (rest s2) (concat res (list (first s1) (first s2))))                                                                        \n      )\n    ))","user":"571b900ae4b07c98581c3b69"},{"code":"#(loop [c1 %1, c2 %2, r []]\n   (if (and (seq c1) (seq c2))\n       (recur (rest c1) (rest c2) (conj r (first c1) (first c2)))\n       r))","problem":39,"user":"4e7e4d5c535db169f9c7970f"},{"problem":39,"code":"(fn [c1 c2]\n      (loop [i (- (min (count c1) (count c2)) 1) r []]\n            (if (< i 0)\n              r\n              (recur (dec i) (cons (nth c1 i) (cons (nth c2 i) r)))\n            )\n      )\n)","user":"550e0373e4b06e50f9beb162"},{"code":"; How can this be done with an arbitrary number of arguments ?\n(fn [seq1 seq2] (mapcat #(list %1 %2) seq1 seq2))\n\n; Ruby\n; lambda{|seq1, seq2| seq1.each_with_index.flat_map{|a, idx| [a, seq2[idx]] }}","problem":39,"user":"5351980ce4b084c2834f4ae5"},{"problem":39,"code":"(fn my-interleave \n  [xcoll ycoll]\n  (loop [x xcoll y ycoll r []] \n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y)\n             (into r [(first x) (first y)])))))","user":"5f003099e4b0cf489e8d7f17"},{"problem":39,"code":"(fn f\n  [one-seq two-seq]\n  (mapcat identity (map list one-seq two-seq)))","user":"5a35d515e4b0ddc586f153e1"},{"code":"(fn [s1 s2]\n  (loop [l1 (seq s1)\n         l2 (seq s2)\n         result '()]\n    (if (or (not (not-empty l1)) (not (not-empty l2)))\n      (reverse result)\n      (recur (rest l1) (rest l2) (cons (first l2) (cons (first l1) result))))))","problem":39,"user":"5213348ae4b0d32679a50652"},{"problem":39,"code":"(fn [& coll]\n  (let [[f s] coll]\n    (flatten (map vector f s))\n    ))","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn my-interleave\n  ([coll1 coll2] (my-interleave coll1 coll2 []))\n  ([coll1 coll2 result]\n    (cond (empty? coll1) result\n          (empty? coll2) result\n          :else (my-interleave (rest coll1)\n                         (rest coll2)\n                         (conj result\n                           (first coll1)\n                           (first coll2))))))","problem":39,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":39,"code":"(fn inter\n  ([ls1 ls2] (inter ls1 ls2 []) )\n  ([ls1 ls2 final]\n   (if (or (empty? ls1) (empty? ls2) )\n     final\n     (inter (rest ls1) (rest ls2) (conj (conj final (first ls1)) (first ls2))))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn [x y] (apply concat (for [i (range (min (count x) (count y)))] (list (nth x i) (nth y i)))))","problem":39,"user":"52f9ce6de4b047fd55836ff0"},{"problem":39,"code":"(fn [l1 l2]\n   (loop [[x & xs] l1\n          [y & ys] l2\n          acc []]\n     (if (or (nil? x) (nil? y))\n       acc\n       (recur xs ys (conj acc x y)))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":39,"code":"#(flatten (apply map vector (merge [%1] %2)))","user":"56441e72e4b0018b46ad8c09"},{"code":"#(loop [a (first %1) b (first %2) ar %1 br %2 rr ()]\n  (if (nil? a)\n      (reverse rr)\n      (if (nil? b)\n          (reverse rr)\n          (recur (second ar) \n                 (second br) \n                 (rest ar) \n                 (rest br) \n                 (conj (cons a rr) b)))))","problem":39,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":39,"code":"(fn d\n  [lst lst2]\n   (mapcat vector lst lst2))","user":"5f737899e4b02876ed9fd099"},{"code":"#(flatten (apply map list %&))","problem":39,"user":"4f0554aa535dcb61093f6bf5"},{"problem":39,"code":"(fn do-interleave\n  [c1 c2]\n  (flatten (map vector c1 c2)))","user":"59b62f8de4b05c620303ca1f"},{"problem":39,"code":"(fn [xs ys]\n   (flatten\n     (map (fn [x y] [x y])\n          xs ys)))","user":"4ff9ea75e4b0678c553fc3b3"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 res []]\n\t(let [val1 (first s1) val2 (first s2)]\n      (if (every? (comp not nil?) [val1 val2])\n\t\t(recur (rest s1) (rest s2) (conj (conj res val1) val2))\n      \tres)))","user":"53573d70e4b04ce2eb3ed278"},{"problem":39,"code":"(fn [x y] (flatten (map #(list (x %) (y %)) (range 0 (min (count x) (count y))))))","user":"54a7d707e4b09f271ff37c9b"},{"problem":39,"code":"(fn intl [a b]\n  (if (or (= (count a) 0) (= (count b) 0)) '()\n    (concat (list (first a) (first b)) (intl (rest a) (rest b)))))","user":"53e2b212e4b036ad0777e3f4"},{"problem":39,"code":"(fn [x y]\n    (flatten (map #(into [] [%1 %2]) x y)))","user":"5672925fe4b05957ce8c6114"},{"code":"#(loop [result [] firstseq %1 secondseq %2]\n        (if (or (empty? firstseq) (empty? secondseq))\n          result\n        (recur (conj result (first firstseq) (first secondseq)) (rest firstseq) (rest secondseq))\n          \n          ))","problem":39,"user":"4ea31da2535d7eef308072c1"},{"problem":39,"code":"(fn [seqA seqB]\n  (loop [seq1 seqA seq2 seqB result '()]\n    (if (or (empty? seq1) (empty? seq2))\n      (reverse result)\n      (recur\n        (rest seq1)\n        (rest seq2)\n        (cons (first seq2) (cons (first seq1) result))\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":39,"code":"#((fn interl [a b o] (if (or (empty? a) (empty? b))\n              o\n              (interl (rest a) (rest b) (concat o [(first a) (first b)])))) %1 %2 [])","user":"515310b4e4b0d6806ecd26fb"},{"code":"(fn in ([c1 c2] (lazy-seq (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (in (rest s1) (rest s2)))))))))","problem":39,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":39,"code":"(fn [a b]\n  (loop [first-coll a\n         second-coll b\n         acc []]\n    (println acc)\n    (if (and (not (empty? first-coll)) (not (empty? second-coll)))\n      (recur (rest first-coll) (rest second-coll) (concat acc [(first first-coll) (first second-coll)]))\n      acc))\n  )","user":"51d55598e4b01da06753aa8e"},{"code":"(fn zip [a b]\n  (if (or (empty? a) (empty? b)) '()\n    (concat [(first a) (first b)] (zip (rest a) (rest b)))))","problem":39,"user":"5119f3d5e4b06c8af0111818"},{"problem":39,"code":"(fn [x y]\n   (loop [f x\n          s y\n          l []]\n     (if (or (empty? f) (empty? s))\n       (seq l)\n       (recur (rest f) (rest s) (conj l (first f) (first s))))))","user":"56e4427ce4b03a7c14b85a4c"},{"code":"(fn i [l1 l2]\r\n  (if (or (empty? l1) (empty? l2))\r\n      '()\r\n      (cons (first l1) (cons (first l2) (i (rest l1) (rest l2))))))","problem":39,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":39,"code":"(fn zip [x y] (cond (or (empty? x) (empty? y)) (empty x)\n                    :else (cons (first x) (cons (first y) (zip (rest x) (rest y))))))","user":"5740f821e4b05c31a32c085e"},{"problem":39,"code":"(fn interleaveseq\n  [in1 in2]\n  (let [c1 (count in1)\n        c2 (count in2)\n        m (min c1 c2)]\n      (loop [i 0 result [] ]\n          (if (< i m)\n      (let [f1 (get in1 i) \n            f2 (get in2 i)\n            rslt1 (conj result f1)\n            rslt (conj rslt1 f2)]\n           (recur (inc i) rslt)\n        )\n      (flatten result)\n      ))))","user":"5b98f174e4b0c0b3ffbd4ac1"},{"code":"(fn zip [l1 l2]\n  (cond\n   (empty? l1) '()\n   (empty? l2) '()\n   :else (cons (first l1) (cons (first l2) (zip (rest l1) (rest l2))))\n   )\n  )","problem":39,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn leave [& args]\n  (when (every? seq args)\n     (into (vec (map first args))\n    \t(apply leave (map rest args)))))","problem":39,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn [a b] (flatten (map #(list %1 %2) a b)))","problem":39,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":39,"code":"#(mapcat (fn [& thevars] (vec thevars)) %1 %2)","user":"56bff105e4b060a8e693e3a4"},{"problem":39,"code":"(fn [arr1 arr2]\n  (mapcat #(list %1 %2) arr1 arr2))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn [x y]\n  (->> (map #(seq [%1 %2]) x y)\n       (apply concat)))","problem":39,"user":"51269362e4b083bb8f88cf09"},{"problem":39,"code":"(fn f\n  ([xs ys] (f xs ys '()))\n  ([xs ys zs]\n   (if (or (empty? xs) (empty? ys)) \n     (reverse zs)\n     (let [[x & tail-x] xs\n           [y & tail-y] ys]\n       (recur tail-x tail-y (conj zs x y))))))","user":"50eb4c32e4b0346a3e988cbf"},{"problem":39,"code":"(fn [a b]\n  (loop [res [] col1 a col2 b]\n  (if (or (empty? col1) (empty? col2))\n    res\n    (recur (conj res (first col1) (first col2)) (rest col1) (rest col2) ))))","user":"5280539ce4b0757a1b1713f3"},{"problem":39,"code":"(fn intt\n  [seq1 seq2]\n  (flatten (map vector seq1 seq2)))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":39,"code":"(fn [list1 list2] \n  (loop [list1 list1 list2 list2 vector []]\n    (if (or (empty? list1) (empty? list2))\n      vector\n      (recur\n       (drop 1 list1)\n       (drop 1 list2)\n       (into vector [(first list1) (first list2)])\n       )\n     )\n   )\n  )","user":"57aa103be4b0b8559636fc64"},{"problem":39,"code":"(fn the-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    `()\n    (list* (first xs) (first ys) (the-interleave (rest xs) (rest ys)))))","user":"52dbd423e4b09f7907dd13c6"},{"problem":39,"code":"(fn [s1 s2] (\n            (fn [s1 s2 res]\n              (if (and (seq s1) (seq s2))\n                (recur (rest s1) (rest s2) (concat res (list (first s1) (first s2))))\n                res)) s1 s2 []))","user":"55b0f5bfe4b002ce9d5cbc28"},{"problem":39,"code":"#(apply concat (map (fn [x y] (conj [] x y)) %1 %2))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn i [i1 i2] (let [s1 (seq i1) s2 (seq i2)] (when (and s1 s2) (lazy-seq (cons (first s1) (cons (first s2) (i (rest s1) (rest s2))))))))","problem":39,"user":"50c75d38e4b00bb60fe0c532"},{"problem":39,"code":"(fn weave\n  ([l1 l2]        (weave l1 l2 '()))\n  ([l1 l2 result] (if (or (empty? l1) (empty? l2))\n                    result\n                    (weave (rest l1) (rest l2) (concat result (list (first l1)) (list (first l2)))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":39,"code":"(fn weave [seqa seqb]\n (let [pair (fn [x] [(nth seqa x) (nth seqb x)])]\n  (flatten (map pair (range (min (count seqa) (count seqb)))))))","user":"58ffbabce4b0438e51c2d002"},{"code":"(fn [x y] \n (loop [a x\n        b y\n        result '()]\n    (if (or (empty? a) (empty? b))\n                   (reverse result)\n                   (recur (rest a) (rest b) (cons (first b) (cons (first a) result))))))","problem":39,"user":"4e7e241a535db169f9c79705"},{"code":"(fn [col1 col2]\n  (flatten (map #(list %1 %2) col1 col2)))","problem":39,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":39,"code":"(fn il [xs ys] (if (or (empty? xs) (empty? ys)) nil (conj (conj (il (rest xs) (rest ys)) (first ys)) (first xs))))","user":"560c31b4e4b05f002753df2d"},{"problem":39,"code":"(fn my-interleave\n  ([seq1 seq2] (my-interleave seq1 seq2 nil))\n  ([seq1 seq2 acc]\n   (if (or (empty? seq1) (empty? seq2))\n    acc\n    (recur (rest seq1) (rest seq2) (concat acc (list (first seq1) (first seq2)))))))","user":"5182de5ce4b0353c468deb74"},{"code":"(fn my-interleave [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (my-interleave (rest s1) (rest s2))))))))\n\n;(defn ints-from [n]\n;  (cons n (lazy-seq (ints-from (inc n)))))","problem":39,"user":"50ca1a4be4b0a409464667db"},{"code":"(fn self [a b]\n  (lazy-seq\n   (when (and (first a) (first b))\n     (cons (first a)\n           (cons (first b)\n                 (self (rest a) (rest b)))))))","problem":39,"user":"521ed5b4e4b0e6c71e0c0bc0"},{"code":"(fn itl [col1 col2]\n  (cond\n    (or (empty? col1) (empty? col2)) ()\n    :else (cons \n            (first col1) (cons (first col2) (itl (rest col1) (rest col2))))))","problem":39,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn alt [colla collb]\n  (cond (empty? colla) '()\n        (empty? collb) '()\n        :else (cons (first colla) (cons (first collb) (alt (rest colla) (rest collb))))))","problem":39,"user":"509e8da7e4b08df8156e9e2f"},{"problem":39,"code":"(fn ! [s1 s2]\n  (cond (empty? s1) '()\n        (empty? s2) '()\n        :else (cons (first s1)\n              (cons (first s2)\n                    (! (rest s1) (rest s2))\n                       )\n              ) \n        )\n  )","user":"54c271b9e4b045293a27f602"},{"code":"(comp flatten reverse vec zipmap)","problem":39,"user":"5243d9a2e4b076204b44fadf"},{"code":"(fn [xs ys] (flatten (concat (map list xs ys))))","problem":39,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":39,"code":"(fn interlv\n  [fs ss]\n  (if (or (empty? fs) (empty? ss)) []\n    (concat\n      [(first fs) (first ss)]\n      (interlv (rest fs) (rest ss)))))","user":"55815973e4b05c286339e0f6"},{"problem":39,"code":"(fn interl [s1 s2]\n  (mapcat #(vec (list %1 %2)) s1 s2))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(comp flatten (partial map vector))","problem":39,"user":"513b43ede4b067e25a345ed3"},{"problem":39,"code":"(fn [x, y] (loop [op [] c1 x c2 y] \n\t\t\t(if (or (= (count op) (* 2 (count x))) (= (count op) (* 2 (count y)))) \n\t\t\top \n\t\t\t(recur (into op (concat (vector (first c1)) (vector (first c2)))) (next c1) (next c2)))))","user":"593ab583e4b069cdc2982b57"},{"problem":39,"code":"#(loop [a %1\n               b %2\n               x []]\n           (if (or (= (count a) 0) (= (count b) 0))\n             x\n             (do \n               (recur (rest a) (rest b) (conj x (first a) (first b))))\n             )\n           )","user":"4f03e60d535dcb61093f6b7a"},{"problem":39,"code":"(fn duplicate [seq1 seq2] (loop [x (first seq1)\n                                 y (first seq2)\n                              rest-seq1 (rest seq1)\n                              rest-seq2 (rest seq2)\n                              result '()]\n                        (if (or (nil? x) (nil? y)) \n                          (reverse result)\n                          (recur (first rest-seq1) (first rest-seq2) (rest rest-seq1) (rest rest-seq2) (conj result x y)))))","user":"5e790f6be4b085ba37836e01"},{"problem":39,"code":"(fn [xs ys] \n  (let [zip\n        (fn zip [v xs ys]\n          (if (or (= xs []) (= ys []))\n            v\n            (zip (conj v (first xs) (first ys)) (rest xs) (rest ys))))]\n    (zip [] xs ys)))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":39,"code":"#(mapcat (fn [x] [(nth % x) (nth %2 x)]) (range (min (count %) (count %2))))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":39,"code":"(fn intr [xs ys] (if (and (seq xs) (seq ys)) (cons (first xs) (cons (first ys)  (intr (rest xs) (rest ys)) ))))","user":"540470dae4b0addc1aec6658"},{"code":"#(loop [coll [ ]    \n                   n 0 ]\n          (if (= n  (min (count %1) (count %2))) coll\n               (recur (conj coll (nth %1 n) (nth %2 n)) (inc n)\n)))","problem":39,"user":"517945dce4b0684c1c981a43"},{"problem":39,"code":"mapcat (fn [seq-1 seq-2]\n         (list seq-1 seq-2))","user":"5c34cb2ee4b0d62ef62d9f59"},{"problem":39,"code":"(fn [s1 s2]\n   (mapcat #(list %1 %2) s1 s2))\n;; or more simply\n;; mapcat list","user":"53ea5307e4b036ad0777e4e2"},{"problem":39,"code":"(fn [x,y]\n  (loop [l x l2 y res []]\n  \t(if-not (or(empty? l) (empty? l2))\n        (recur (rest l) (rest l2) (conj (conj res (first l)) (first l2)))\n         res)\n)\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn [fst snd]\n  (loop [f fst s snd col []]\n    (if (or (empty? f) (empty? s))\n      col\n      (recur (rest f) (rest s) (conj col (first f) (first s))))))","problem":39,"user":"52d737c8e4b09f7907dd1370"},{"problem":39,"code":"#(mapcat identity (into '() (zipmap %1 %2)))","user":"5485b402e4b0e286459a11b0"},{"code":"(fn my-interleave [s1 s2]\n    (cond\n     (or (empty? s1) (empty? s2)) ()\n     :else (concat (list (first s1) (first s2)) (my-interleave (rest s1) (rest s2)))))","problem":39,"user":"53487737e4b084c2834f4a59"},{"code":"(fn zlacz [x y]\r\n(if (or (empty? x) (empty? y)) (list)\r\n(cons (first x) (cons (first y) (zlacz (rest x) (rest y))))))","problem":39,"user":"4f00c74f535dcb61093f6a31"},{"problem":39,"code":"(fn [aa bb] (mapcat #(list %1 %2) aa bb))","user":"5619a4d0e4b053970a773afd"},{"code":"#(loop [f %1 s %2 fin []] (if (or (empty? f) (empty? s)) fin (recur (rest f) (rest s) (conj fin (first f) (first s)))))","problem":39,"user":"503539dee4b0ed9c821488f6"},{"problem":39,"code":"#(loop [result [] i 0]\n   (if (and (< i (count %))\n            (< i (count %2)))\n     (recur (-> result (conj (nth % i)) (conj (nth %2 i)))\n            (inc i))\n     result))","user":"56b965d9e4b0f26550335931"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [acc [] c1 coll1 c2 coll2] \n    (if-not (or (empty? c1) (empty? c2)) \n      (recur (conj acc (first c1) (first c2)) (rest c1) (rest c2))\n      acc)))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":39,"code":"(fn x [first-seq second-seq]\n  (reduce #(concat %1 [(nth first-seq %2) (nth second-seq %2)]) '() (range (min (count first-seq) (count second-seq)))))","user":"5c68f931e4b0fca0c16226ea"},{"problem":39,"code":"(fn [x y] (apply concat (map vector x y)))","user":"50a8bb65e4b0deba384a58bd"},{"problem":39,"code":"(fn intlv [c1 c2] (flatten (map #(list %1 %2) c1 c2)))","user":"5bc6ef7ce4b07a9b28b1009f"},{"problem":39,"code":"#(reduce into [] (apply map vector (list % %2)))","user":"55b0d315e4b002ce9d5cbc26"},{"problem":39,"code":"(fn f [xs ys]\n    (lazy-seq\n      (if (or (empty? xs) (empty? ys))\n        '()\n        (cons (first xs)\n              (cons (first ys)\n                    (f (rest xs) (rest ys)))))))","user":"56bcc2b2e4b0f26550335965"},{"problem":39,"code":"(fn my-interleave [x y]\n  (if (or\n       (empty? x)\n       (empty? y))\n    '()\n    (concat\n     (list (first x) (first y))\n     (my-interleave\n      (rest x)\n      (rest y)))))","user":"5e471203e4b043cd24807a2a"},{"problem":39,"code":"(fn [a b]\n  (let [n (* 2 (min (count a) (count b)))]\n    (loop [res []\n           aa a\n           bb b]\n      (if (= (count res) n)\n        res\n        (recur (conj (conj res (first aa)) (first bb)) (rest aa) (rest bb))))))","user":"5292feb4e4b0239c8a67af39"},{"problem":39,"code":"#(loop [coll1 %1\n        coll2 %2\n        result '()]\n    (if (or (empty? coll1) (empty? coll2))\n      (reverse result)\n      (recur (rest coll1) (rest coll2) (conj result (first coll1) (first coll2)))))","user":"5d965c73e4b0d3f9b434ad33"},{"problem":39,"code":"(fn [a b]\n   (flatten (map #(list %1 %2) a b))\n   )","user":"554b2151e4b0a04f79299580"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [r [] s1 seq1 s2 seq2]\n    (cond (or (empty? s1) (empty? s2)) r\n          :else\n    \t  (recur (conj (conj r (first s1)) (first s2)) (rest s1) (rest s2)))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs ys ys result []]\n    (if (and (seq xs) (seq ys))\n      (recur (rest xs) (rest ys) (conj result (first xs) (first ys)))\n      result)\n    ))","user":"55f90d76e4b03cbcff9738bd"},{"code":"(fn [xs ys] \n  (reverse (loop [xsl xs ysl ys acc '()]\n    (if (or (empty? xsl) (empty? ysl))\n      acc\n      (recur (rest xsl) (rest ysl) (cons (first ysl) (cons (first xsl) acc)))))))","problem":39,"user":"4e7f5a0b535db966e863cc41"},{"problem":39,"code":"(fn weave [a b]\n  (if (or\n       (empty? a)\n       (empty? b))\n    (empty a)\n    (lazy-cat\n     [(first a) (first b)]\n     (weave (rest a) (rest b)))))","user":"5b4dfd5de4b02d533a91bcc3"},{"code":"(fn [l1 l2]\n  (loop [accu '()\n         l1 l1\n         l2 l2]\n    (if (or (empty? l1) (empty? l2))\n      (reverse accu)\n      (recur \n        (cons (first l2) (cons (first l1) accu)) \n        (rest l1) \n        (rest l2)))))","problem":39,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn [first-list second-list]\n  (loop [res (), x first-list, element-x (first first-list), y second-list, element-y (first second-list)]\n    (if (or (= nil element-x) (= nil element-y)) (reverse res)\n      (recur (conj (conj res element-x) element-y) (rest x) (first (rest x)) (rest y) (first (rest y))))))","problem":39,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [lst1 lst2]\n  ((fn [l1 l2 acc]\n    (if (or (empty? l1) (empty? l2))\n      acc\n      (recur (rest l1) (rest l2) \n(conj acc (first l1) (first l2))))) lst1 lst2 []))","problem":39,"user":"4e9528ef535dbda64a6f6b32"},{"problem":39,"code":"(fn my-interleave [a b]\n  (let [r (fn rec [ls a b]\n            (if (or (empty? a) (empty? b))\n              ls\n              (rec (concat ls (list (first a) (first b)))\n                   (rest a) (rest b))))]\n    (r '() a b)))","user":"605f5c69e4b03746e80ebf5e"},{"problem":39,"code":"(fn myinterleave\n  ([xs ys] (seq (myinterleave [] xs ys)))\n  ([acc [x & rx] [y & ry]]\n   (if (and (seq rx) (seq ry))\n     (recur (conj acc x y) rx ry)\n     (conj acc x y))))","user":"53ab1ef6e4b047364c04444b"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [[x & xs] c1\n         [y & ys] c2\n         acc []]\n    (if (and x y)\n      (recur xs ys (conj acc x y))\n      acc)))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":39,"code":"(fn x [x y] (flatten (map vector x y)))","user":"529c722de4b04e0c58e87b63"},{"code":"(fn inter [a b]\n            (if (or (empty? a) (empty? b))\n                []\n                (concat [(first a) (first b)] (inter (rest a) (rest b)))))","problem":39,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn [x y](flatten (map (fn [a b] [a b]) x y)))","problem":39,"user":"4fa99ee1e4b081705acca1e4"},{"code":"#(apply concat (for [[x y] (map vector %1 %2)] (list x y)))","problem":39,"user":"5007c7c7e4b0b17c647f5226"},{"problem":39,"code":"(fn [indata1 indata2]\n  (loop [data1 indata1 data2 indata2 outdata '()]\n    (if (or (empty? data1) (empty? data2))\n      (reverse outdata)\n      (recur (rest data1) (rest data2) (cons (first data2) (cons (first data1) outdata))))))","user":"56197b47e4b053970a773af8"},{"code":"(fn i\n  [l1 l2]\n  (cond\n   (or (empty? l1) (empty? l2)) '()\n   :else (cons (first l1) (cons (first l2) (i (rest l1) (rest l2))))))","problem":39,"user":"518c0f4ee4b0f028e99addf7"},{"problem":39,"code":"#(loop [x %1 y %2 col []]\n   (if (or (empty? x) (empty? y))\n     col\n     (recur (rest x) (rest y) (conj col (first x) (first y)))))","user":"555883c5e4b0deb715856e2d"},{"code":"mapcat list\r\n;; One approach\r\n;(fn inter [c1 c2]\r\n;  (lazy-seq\r\n;    (let [s1 (seq c1) s2 (seq c2)]\r\n;      (when (and s1 s2)\r\n;        (cons (first s1) (cons (first s2)\r\n;        (inter (rest s1) (rest s2))))))))","problem":39,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn my-interleave [x y]\n\t(let [hx (first x) hy (first y)]\n\t\t(if (and hx hy)\n\t\t\t(into [hx hy] (my-interleave (rest x) (rest y)))\n\t\t\t[]\n\t\t)\n\t)\n)","problem":39,"user":"51f67858e4b06ff1c25c52c5"},{"problem":39,"code":"(fn [xs ys] (apply concat (map #(list %1 %2) xs ys)))","user":"553e0b70e4b0a04f792994e8"},{"code":"#(loop [result [] x %1 y %2]\r\n   \t     (cond\r\n\t       (empty? x) result\r\n\t       (empty? y) result\r\n\t       :else (recur \r\n\t\t      (conj result (first x) (first y))\r\n\t\t       (rest x)\r\n\t\t       (rest y))))","problem":39,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":39,"code":"(fn inl [x y]\n   (when \n       (and \n        (not (empty? x)) \n        (not (empty? y))) \n     (concat \n      [(first x) (first y)] \n      (inl (rest x) (rest y)))))","user":"55249f64e4b0882d96d091c6"},{"code":"(fn [xs ys]\n  (apply concat (map list xs ys)))","problem":39,"user":"5160195ae4b0e2be8aa20be3"},{"problem":39,"code":"(fn [left right]\n  (loop [res [], l left,r right]\n    (if (or (empty? l) (empty? r)) res\n      (recur (concat res [(first l) (first r)]) (rest l) (rest r)))))","user":"55486ee6e4b0a04f7929955a"},{"problem":39,"code":"(fn[arg1 arg2]\n      (loop [x 0, merged []]\n                   (if (and (< x (count arg1))\n                              (< x (count arg2)))\n                         (recur (+ x 1) (conj (conj merged (nth arg1 x)) (nth arg2 x)) ) merged)))","user":"5cb6256ce4b026601754b947"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [n1 0\n         n2 0\n         res []]\n    (if (and (< n1 (count coll1)) (< n2 (count coll2)))\n      (recur (inc n1) (inc n2) (list* (get coll2 n2) (get coll1 n1) res))\n      (reverse res))))","user":"5ff61113e4b06df49cee1492"},{"problem":39,"code":"(fn ilve [xs ys] \n  (if (or (empty? xs) (empty? ys))\n    []\n    (concat [(first xs) (first ys)] (ilve (rest xs) (rest ys)))))","user":"5f300f28e4b033932238a682"},{"problem":39,"code":"(fn myinter [seq1 seq2]\n   (if (or (= 0 (count seq1)) (= 0 (count seq2)) )\n   []\n   (concat [(first seq1) (first seq2)] (myinter (rest seq1) (rest seq2) ) )) \n)","user":"50d3317ee4b049d4ed5650da"},{"problem":39,"code":"#(loop [l1 %1 l2 %2 result []]\n   (if (or (empty? l1) (empty? l2))\n       result\n       (recur (rest l1)\n              (rest l2)\n              (conj result (first l1) (first l2)))\n   )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"problem":39,"code":"(fn myinterleave [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (cons (first a)\n          (cons (first b)\n                (myinterleave (rest a) (rest b))))))","user":"54651982e4b01be26fd746d4"},{"problem":39,"code":"(fn leave [list1, list2] \n  (if\n    (some empty? [list1 list2])\n    '()\n    (conj (leave (rest list1) (rest list2)) (first list2) (first list1))\n   )\n )","user":"58e6e624e4b056aecfd47cc1"},{"problem":39,"code":"(fn [xs ys]\n  (loop [[x' & xs'] xs\n         [y' & ys'] ys\n         acc '()]\n    (if (or (nil? x')\n            (nil? y'))\n      acc\n      (recur xs' ys' (concat acc (list x' y'))))))","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn [seq1 seq2] (mapcat #(vector %1 %2) seq1 seq2))","problem":39,"user":"51891c96e4b04c2714a2670e"},{"code":"(fn [l1 l2]\n  (apply concat (map #(list %1 %2) l1 l2)))","problem":39,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":39,"code":"(fn [a b]\n   (mapcat (fn [k v]\n          (list k v)) a b))","user":"585c16c3e4b0f14aab7c877d"},{"code":"(fn my-interleave\n  [s1 s2]\n  (loop [[x & s1] s1\n         [y & s2] s2\n         result []]\n    (if (and x y)\n      (recur s1 s2 (conj result x y))\n      result)))","problem":39,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [& seqs]\n  (flatten (apply map (fn [& args] args) seqs)))","problem":39,"user":"504f6721e4b0a02f9cffde7f"},{"problem":39,"code":"(fn inter-e\n[x y]\n(loop [a x b y result '()]\n(cond\n(or (empty? a) (empty? b)) (reverse result)\n:else (recur\n(rest a)\n(rest b)\n(conj result (first a) (first b))))))","user":"55306b8ae4b076ab5578f812"},{"problem":39,"code":"(fn [coll1 coll2]\n   (if (<= (count coll1) (count coll2))\n     (flatten (map list coll1 coll2))\n     (flatten (take (count coll2) (map list coll1 coll2))))\n   )","user":"5d6552b5e4b0db5d338d15d2"},{"problem":39,"code":"#(mapcat list %1 %2\n    \n    )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":39,"code":"(fn [c d]\n  (loop [x c y d new-list (empty c)]\n    (if (or (empty? x) (empty? y))\n      new-list\n      (recur (rest x) (rest y) (conj (conj new-list (first x)) (first y))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":39,"code":"#(mapcat identity (reverse ((fn conjoin2 [[a & xa] [b & xb]] (if (or (nil? a) (nil? b)) [] (conj (conjoin2 xa xb) [a b]))) %1 %2)))","user":"605b7085e4b079a07f8593fa"},{"code":"(fn anyf [s t] \n  (if (and (not (empty? s)) (not (empty? t))) \n    (cons (first s) (cons (first t) \n      (anyf (rest s) (rest t)))) () ))","problem":39,"user":"502ed81ee4b06efe12e8cc7b"},{"code":"(fn in [x y]\n  (when (not (or (empty? x)\n                 (empty? y)))\n    (concat (list (first x) (first y)) (in (rest x) (rest y)))))","problem":39,"user":"51a671d4e4b0740bfd1afd21"},{"problem":39,"code":"(fn ntrlv\n  ([x y z n]\n    (if (and (even? n) (or (empty? x) (empty? y))) \n      z\n      (ntrlv y (rest x) (conj z (first x)) (inc n) )\n    )\n  )\n  ([x y] (ntrlv x y [] 0))\n)","user":"54257124e4b01498b1a71b09"},{"problem":39,"code":"(fn myinterleave2 [sq1 sq2]\n  (if (or (empty? sq1) (empty? sq2))\n    (list)\n    (cons (first sq1) (cons (first sq2) (myinterleave2 (rest sq1) (rest sq2))))\n  ))","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn myinterleave [seq1 seq2]\n  (if (or (= seq1 ()) (= seq2 ()))\n    ()\n    (conj\n     (conj (myinterleave (rest seq1) (rest seq2)) (first seq2))\n     (first seq1)\n    )\n  )\n)","problem":39,"user":"4e3df106535deb9a81d77f58"},{"code":"(fn [x y]\n  (loop [s1 x\n         s2 y\n         sq []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj sq (first s1) (first s2)))\n      sq)))","problem":39,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"code":"(fn f [c1 c2]\n  (if (or (empty? c1)\n      \t  (empty? c2))\n    '()\n    (cons (first c1) (cons (first c2) (f (rest c1) (rest c2))))))","problem":39,"user":"5252ee94e4b0541d1855b8db"},{"code":"(fn i ([s1 s2] (i () s1 s2))\n  ([f s1 s2]\n  (let [f1 (first s1) f2 (first s2) m1 (rest s1) m2 (rest s2)]\n    (if (or (empty? m1) (empty? m2))\n      (conj f f2 f1)\n      (conj (i m1 m2) f2 f1)))))","problem":39,"user":"4f05a9cf535dcb61093f6bfc"},{"code":"(fn f [x y] (if (or (empty? x) (empty? y)) '() (concat (list (first x) (first y)) (f (rest x) (rest y)))))","problem":39,"user":"514d398ee4b019235f6c0583"},{"problem":39,"code":"(fn [a1 a2] (mapcat vector a1 a2))","user":"5a2e39fce4b09cafd31c7f77"},{"problem":39,"code":"(fn func [c1 c2] (lazy-seq (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (func (rest s1) (rest s2))))))))","user":"5addadfce4b0837691e92c13"},{"code":"(fn my-interleave [l1 l2]\n   (if (or (empty? l1)\n           (empty? l2))\n     '()\n     (cons (first l1) (cons (first l2)\n                            (my-interleave (rest l1)\n                                           (rest l2))))\n     ))","problem":39,"user":"4fc8ce6ce4b0ee37620e183c"},{"code":"(fn [a b] (loop [a a b b s []] (if (or (empty? a) (empty? b)) s (recur (rest a) (rest b) (conj s (first a) (first b))))))","problem":39,"user":"4f0cc259535d0136e6c22310"},{"problem":39,"code":"(fn [v1 v2] (for [x (range (min (count v1)(count v2))) y (range 2)] (if(zero? y) (nth v1 x) (nth v2 x))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":39,"code":"(fn mix [x y] \n  (if (or (empty? x) (empty? y)) '()\n    (flatten (cons\n   (list \n    (first x) \n    (first y)\n    )\n   (mix \n    (next x) \n    (next y) \n    ) \n   ))))","user":"54fae43ae4b0cf870d934708"},{"problem":39,"code":"(fn [c1 c2]\n  (mapcat #(list %1 %2) c1 c2))","user":"4e586949535d8a8b8723a292"},{"code":"(fn my-interleave [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n      '()\n      (conj (my-interleave (rest s1)\n                           (rest s2))\n            (first s2)\n            (first s1))))","problem":39,"user":"50acbd15e4b071b89ef26234"},{"problem":39,"code":"(fn [s1 s2] \n  (loop [\n         s1 s1\n         s2 s2\n         sOut '()\n         ] \n      (if (or (empty? s1) (empty? s2)) \n        sOut \n        (recur (rest s1) (rest s2) (concat sOut (list (first s1) (first s2))))\n      )\n    )\n  )","user":"5528ecd1e4b0ffed3738f942"},{"code":"(fn intrlv [l r] \n         (let [l2 (seq l) r2 (seq r)] \n           (when (and l2 r2) \n             (cons (first l2) (cons (first r2) (intrlv (rest l2) (rest r2)))))))","problem":39,"user":"4fc93728e4b0ee37620e1844"},{"code":"(fn [a b] (apply concat (map #(cons %1 [%2]) a b)))","problem":39,"user":"531c0619e4b08068f379ed98"},{"problem":39,"code":"(fn peu [x y] (if (or (empty? x) (empty? y)) '() (conj (peu (rest x) (rest y)) (first y) (first x))))","user":"53fc8424e4b0de5c418485b3"},{"problem":39,"code":"#((fn int [res [x & xs] [y & ys]]\n  (if (or (nil? x) (nil? y))\n    (reverse res)\n    (int (conj res x y) xs ys))) '() %1 %2)","user":"5749ce09e4b009280f9f2ba0"},{"problem":39,"code":"(fn my-int [a b] (if (empty? a) ()\n                   (if (empty? b) ()\n                  (conj (my-int (rest a) (rest b)) (first b) (first a) ))))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(partial mapcat vector)","problem":39,"user":"4e31a15c535deb9a81d77f1e"},{"problem":39,"code":"(fn [col1 col2]\n  (flatten (map (fn [x y] (list x y)) col1 col2)))","user":"5a144fd8e4b0ff51aa4b319a"},{"code":"(fn [c1 c2]\n  (mapcat (fn [a b]\n    (list a b)) c1 c2))","problem":39,"user":"4ff4c9dae4b0678c553fc360"},{"problem":39,"code":"(fn [ a b ] (apply concat ( map #(list %1 %2) a b )))","user":"5610d39de4b05f002753df75"},{"code":"(fn [x y] (apply concat (map (fn [x1 y1] [x1 y1]) x y)))","problem":39,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn ilv [[x1 & xs] [y1 & ys]] (if (or (empty? ys) (empty? xs)) (list x1 y1) (concat (list x1 y1) (ilv xs ys)) )   \n    \n    )","problem":39,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":39,"code":"(fn g [li1 li2]\n  (loop [ \n         [x & xs] li1\n         [y & ys] li2 \n         li []]\n         \n   (let [newli (concat  li [x y])]\n     (if (or (nil? ys )(nil? xs))\n       newli\n       (recur xs ys newli)))))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [seqa seqb] \n  (loop [a seqa,\n         b seqb,\n         result []]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (rest a) (rest b) (conj result (first a) (first b))))))","problem":39,"user":"538c3424e4b0b51d73faae58"},{"problem":39,"code":"(fn [seq-1 seq-2]\n   (loop [col []\n          [a & a-rest] seq-1\n          [b & b-rest] seq-2]\n     (if-not (and a b)\n       col\n       (recur (conj col a b) a-rest b-rest))))","user":"5aafde49e4b073f1774425a1"},{"code":"#(flatten\n  (reverse (zipmap %1 %2)))","problem":39,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn [a b] \n  (loop [res '() l a r b] \n    (if (or (empty? l) (empty? r))\n      \t(reverse res)\n      \t(recur (cons (first r) (cons (first l) res)) (rest l) (rest r)))))","problem":39,"user":"4e580746535d8a8b8723a28c"},{"problem":39,"code":"#(loop [a %1 b %2 acc []]\n   (if (or (empty? a) (empty? b))\n     acc\n     (recur (rest a) (rest b) (conj acc (first a) (first b)))))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":39,"code":"(fn [one two]\n  (mapcat #(conj [] % %2) one two))","user":"5662ca50e4b0e91d5f5c564c"},{"problem":39,"code":"(fn\n  [lst1 lst2]\n  (mapcat #(conj () %2 %1) lst1 lst2))","user":"56df6498e4b0ca2494a095f8"},{"problem":39,"code":"(fn inter\n  ([li1 li2] (inter li1 li2 (list)))\n  ([li1 li2 ans]\n   (if (or (empty? li1) (empty? li2))\n     ans\n     (inter (rest li1) (rest li2) (concat ans (list (first li1) (first li2))))\n     )\n   )\n  )","user":"5a90395ce4b05369db4d254a"},{"problem":39,"code":"(fn foo [s1 s2] (when (and (seq s1) (seq s2)) (cons (first s1) (cons (first s2) (foo (rest s1) (rest s2))))))","user":"5505d137e4b086ebe8a79c8c"},{"problem":39,"code":"(fn [value1 value2]\n  (mapcat vector value1 value2))","user":"60504383e4b056659d6341fa"},{"problem":39,"code":"(fn [a b] (loop [a a b b output (list)]\n                 (if (or (empty? a) (empty? b))\n                   output\n                   (recur (rest a) (rest b) (concat output (list (first a)) (list (first b))))\n                   )))","user":"5689bd04e4b0dcc4269f4082"},{"problem":39,"code":"(partial mapcat (fn [a b] [a b]))","user":"51421cd5e4b0b50abeb46b2c"},{"problem":39,"code":"(fn interll [s1 s2] \n    (let [t1 (rest s1),\n         t2 (rest s2),\n         h1 (first s1),\n         h2 (first s2)] \n    (if (or (= '() t1) \n            (= '() t2))\n        (conj '() h2 h1)\n        (conj (interll t1 t2) h2 h1))))","user":"56be8649e4b0f26550335983"},{"problem":39,"code":"(partial mapcat #(vector %1 %2))","user":"55d6a2ebe4b0e31453f64a9a"},{"problem":39,"code":"(fn [s1 s2]\n  (apply concat\n   (map #(list %1 %2) s1 s2)))","user":"55253217e4b0882d96d091ce"},{"problem":39,"code":"(fn [l r]\n  (loop [[x & xs] l\n        [y & ys] r\n        res []]\n    (if (or (nil? x) (nil? y))\n      res\n      (recur xs ys (conj res x y)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [s1 s2] (apply concat (map (fn [a b] [a b]) s1 s2)))","problem":39,"user":"4f90dc2ae4b0dcca54ed6c92"},{"code":"#(loop [ret [] a %1 b %2] (if (or (empty? a) (empty? b)) ret  (recur (conj ret (first a) (first b)) (rest a) (rest b))))","problem":39,"user":"4ee2baa8535d10e5ff6f536b"},{"problem":39,"code":"(fn boo [f s]\n \t(if (or (empty? f) (empty? s))\n      (empty f)\n      (cons (first f) (cons (first s) (boo (rest f) (rest s))))\n    )\n)","user":"56b6e354e4b0982f16b37e41"},{"problem":39,"code":"(fn [& args] (flatten (let [minLen (apply min (for [seq args] (count seq)))] (loop [cnt 0 out []] (if (= cnt minLen) out (recur (inc cnt) (conj out (for [seq args] (nth seq cnt)))))))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn [l1 l2]\n  (loop [l1 l1 l2 l2 acc []]\n    (if (or (empty? l1) (empty? l2))\n        acc\n        (recur (rest l1)\n               (rest l2)\n              (conj acc (first l1) (first l2))))))","problem":39,"user":"4db6d993535d1e037afb2180"},{"code":"(fn [c1 c2]\n  (loop [col1 c1 col2 c2 col ()]\n    (if (or (empty? col1)(empty? col2))\n      (reverse (remove nil? col))\n      (recur (rest col1)(rest col2) \n        ((fn [v1 v2]\n          (let [c (cons v1 col)\n                c (cons v2 c)]\n            c\n            )\n          )(first col1)(first col2)))\n      )\n    )\n  )","problem":39,"user":"4db7da66535d1e037afb2187"},{"problem":39,"code":"(fn __ [s1 s2] (mapcat #(list %1 %2) s1 s2))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 coll '()]\n    (if (or (= coll1 '()) (= coll2 '()))\n      coll\n      (recur (rest coll1) (rest coll2) (conj (conj (vec coll) (first coll1)) (first coll2) ))\n      )))","user":"55a74d46e4b09e57187da2a3"},{"problem":39,"code":"(fn il [a b] \n  (let [a-seq (seq a) b-seq (seq b)]\n (when (and a-seq b-seq)\n   (cons (first a-seq) (cons (first b-seq) (il (rest a-seq) (rest b-seq)))))))","user":"54b972bbe4b0ed20f4ff6ead"},{"code":"(fn interl [x y] \n  (if-not (or (empty? x) (empty? y)) (cons (first x) (cons (first y)  \n(interl (rest x) (rest y))))))","problem":39,"user":"4fae6e7be4b081705acca24a"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [[elem1 & coll1] coll1 [elem2 & coll2] coll2 interleaved []]\n    (if (or (nil? elem1) (nil? elem2))\n      interleaved\n      (recur coll1 coll2 (conj interleaved elem1 elem2))\n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":39,"code":"(fn [aa bb]\n((fn inter [v a b]\n  (let [fa (first a)\n        fb (first b)\n        ra (rest a)\n        rb (rest b)\n        x (conj (conj v fa) fb)]\n    (if (or (nil? fa) (nil? fb)) v (inter x ra rb))\n  )\n)\n[] aa bb)\n)","user":"562b1a7be4b058fa18c5a6cb"},{"problem":39,"code":"(fn [listm listn] (loop [lm listm ln listn p 0 accume []] (if (and (not (empty? lm)) (not (empty? ln))) (recur (rest lm) (rest ln) (inc p) (conj (conj accume (first lm)) (first ln))) accume)))","user":"5256a1d4e4b0541d1855ba29"},{"code":"(\n fn f [ a b ](\n   \n   if( or ( = 0 (count a ) ) ( = 0 ( count b )))\n    ;then\n    []\n    ;else\n    ( concat [ (first a ) (first b )] ( f (rest a ) ( rest b ) ) )\n  \n )\n)","problem":39,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":39,"code":"(fn [x y]\n   (take (* 2 (min (.length x) (.length y)))\n         (flatten\n          (map-indexed\n            (fn [idx itm]\n              (conj [itm] (get y idx)))\n            x))))","user":"54d9366ce4b0a52adc2e204e"},{"problem":39,"code":"(fn [& args] (flatten (apply (partial map list) args)))","user":"558df2ebe4b0277789237649"},{"code":"(fn [l1 l2]\r\n  (loop [inp1 l1 inp2 l2 acc []]\r\n    (if (or (empty? inp1) (empty? inp2))\r\n      acc\r\n      (recur (rest inp1) (rest inp2) (conj acc (first inp1) (first inp2))))))","problem":39,"user":"4f629697e4b0defedf855fd6"},{"problem":39,"code":"(fn interSeq\n  [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (cons \n     (first x)(cons (first y)\n                      (interSeq (rest x) (rest y))))))","user":"5e95013fe4b0fbed045a3800"},{"problem":39,"code":"(fn func2\n  [x y]\n  (loop [hm [] i 0]\n    (if (= i (min (count x) (count y)))\n      hm\n      (recur (conj hm (nth x i) (nth y i)) (inc i))\n      )\n    )\n)","user":"5581a6dae4b05c286339e0fe"},{"code":"(fn my-leave [coll1 coll2]\n  (let [inter (fn inter [acc coll1 coll2]\n                (if (or (= () coll1) (= () coll2)) acc\n                    (recur (conj acc (first coll1) (first coll2))\n                           (rest coll1)\n                           (rest coll2))))]\n    (inter [] coll1 coll2)))","problem":39,"user":"53695439e4b0243289761e9a"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 s []]\n   (if (or (empty? s1) (empty? s2))\n     s\n     (recur (rest s1) (rest s2) (concat s [(first s1) (first s2)]))))","user":"5a071cb2e4b01bb0ae8afdd8"},{"problem":39,"code":"(fn this [x y] \n  (cond\n   (= x ()) ()\n   (= y ()) ()\n   :else (conj (this (rest x) (rest y)) (first y) (first x))\n   \n   )\n  )","user":"59165082e4b09b4ee5954b88"},{"problem":39,"code":"(fn [a b] (loop [a a b b c []] (if (or (empty? a) (empty? b)) c (recur (rest a) (rest b) (conj c (first a) (first b))))))","user":"59804b60e4b021a7a535fdcf"},{"problem":39,"code":"(fn [as bs] (mapcat vector as bs))","user":"55f081bbe4b06e875b46ce25"},{"code":"#((fn rec [l r c]\n    (if (every? true? [(not (empty? l)) (not (empty? r))])\n      (rec (rest l) (rest r) (conj c (list (first l) (first r)))) \n      (flatten c)))\n  %1 %2 [])","problem":39,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn [xs ys]\n  (let [len (min (count xs) (count ys))]\n    (letfn [(inter [xs ys]\n                   (if-not (and (empty? xs) (empty? ys))\n                     (cons (first xs)\n                           (inter ys (rest xs)))))]\n      (inter (take len xs) (take len ys)))))","problem":39,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":39,"code":"(fn [s1 s2] (flatten (map (fn [i j] [i j]) s1 s2)))","user":"53307a23e4b019098a6f8b5d"},{"problem":39,"code":"(fn [coll1 coll2]\n  (let [cnt (min (count coll1) (count coll2))]\n    (loop [i 0 result []]\n      (let [res (conj result (nth coll1 i) (nth coll2 i))]\n      \t(if (< i (dec cnt))\n          (recur (inc i) res)\n          res)))))","user":"574ff497e4b02ea114799266"},{"problem":39,"code":"(fn [arr1 arr2] (flatten (map (fn [a b] [a b]) arr1 arr2)))","user":"59636b43e4b066ee0a44b0c4"},{"code":"(partial mapcat #(list % %2))","problem":39,"user":"50015be1e4b0678c553fc41a"},{"code":"(fn ii  [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n  [x y]\n  (concat [x y] (ii xs ys))))","problem":39,"user":"4fc4eadee4b081705acca353"},{"code":"(fn [s1 s2]\n  (mapcat #(seq (vector %1 %2)) s1 s2))","problem":39,"user":"5215661be4b02f6d8ea676c7"},{"code":"#(reverse (mapcat reverse (zipmap % %2)))","problem":39,"user":"5216933be4b000d124d989cf"},{"problem":39,"code":"#(loop [niz []\n        xs %1\n        ys %2] (if (not-every? seq [xs ys]) niz (recur (conj niz (first xs) (first ys)) (rest xs) (rest ys))))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn my-interleave [c1 c2]\n  (loop [c1 c1 c2 c2 res []]\n    (if (or (nil? c1) (nil? c2))\n      (apply list res)\n      (recur (next c1) (next c2) (conj res (first c1) (first c2))))))","problem":39,"user":"4fd769a1e4b0dab7d829f382"},{"code":"(fn inter\r\n  ([s1 s2]\r\n     (inter s1 s2 '()))\r\n  ([s1 s2 c]\r\n     (if (or (= nil (first s1)) (= nil (first s2)))\r\n       c\r\n       (cons (first s1) (cons (first s2) (inter (rest s1) (rest s2)))))))","problem":39,"user":"4f17ab99535d64f603146457"},{"problem":39,"code":"(fn [a b] ( flatten ( map #( conj [] %1 %2) a b)))","user":"60d78d64e4b0d60f5ea6f7ed"},{"code":"(fn [c1 c2] (loop [res [] a c1 b c2] \n  (if (or (empty? a) (empty? b)) res \n    (recur (conj res (first a) (first b)) (rest a) (rest b)))))","problem":39,"user":"4f03822f535dcb61093f6b03"},{"code":"(fn \n  [xs ys]\n  (mapcat #(seq [% %2]) xs ys))","problem":39,"user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys zs nil]\n    (if (or (empty? xs) (empty? ys)) (reverse zs)\n      (recur (rest xs) (rest ys) (conj zs (first xs) (first ys))))))","problem":39,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":39,"code":"(fn [col1 col2] (loop [c1 col1 c2 col2 acc []] (if (or (empty? c1) (empty? c2)) acc \n                                                (recur (rest c1) (rest c2) (conj acc (first c1) (first c2))))))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn [x y]\n  (loop [l1 x l2 y ret []]\n    (if (or (empty? l1) (empty? l2)) ret\n(recur (rest l1) (rest l2) (conj (conj ret (first l1)) (first l2))))))","problem":39,"user":"4fdf5403e4b05e33b9224f98"},{"code":"(fn il [x y]\n  (when (and (seq x) (seq y))\n      (cons (first x) (cons (first y) (il (rest x) (rest y))))))","problem":39,"user":"50928084e4b097f48cc3856c"},{"code":"(fn interleaveSeq [x y] (\n  if (or (empty? x) (empty? y)) '() (cons (first x) (cons (first y) (interleaveSeq (rest x) (rest y))))))","problem":39,"user":"50ef311fe4b0a78662fa2651"},{"problem":39,"code":"(fn my-interleave [list1 list2]\n  (mapcat (fn [x y] [x y]) list1 list2))","user":"5889dc13e4b0f1effa3b774a"},{"code":"(fn foo [p q] \n  (if (and (seq p) (seq q))\n    (conj (foo (rest p) (rest q)) (first q) (first p))\n    ()))","problem":39,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn inter [coll1 coll2] \n  (loop [both [] c1 coll1 c2 coll2] \n    (if (or (empty? c1) (empty? c2))\n      both\n      (recur (conj both (first c1) (first c2)) (rest c1) (rest c2)))))","problem":39,"user":"50a6c0fbe4b0aa96157e262c"},{"problem":39,"code":"(fn [& x]\n  (loop [r []\n         s x]\n    (if (not-any? #(= 0 (count %)) s)\n      (recur (concat r (map first s))\n             (map rest s))\n      r)))","user":"539f4e9ee4b0ca733b974498"},{"code":"#(last (reductions into [] (to-array (reverse (vec (zipmap %1 %2))))))","problem":39,"user":"514a7e71e4b00c7db5067429"},{"problem":39,"code":"(fn [as bs]\n  (loop [[x & xs] as\n         [y & ys] bs\n         out []]\n    (if (and xs ys)\n      (recur xs ys (conj out x y))\n      (conj out x y))))","user":"597d0e43e4b0dbe32238d095"},{"problem":39,"code":"(fn gogo\n  [llist1 llist2]\n  (if-not (or (empty? llist1) (empty? llist2))\n    (conj (gogo (drop 1 llist1) (drop 1 llist2)) (first llist2) (first llist1))\n    (list)))","user":"595bc925e4b066ee0a44afe2"},{"problem":39,"code":"#(loop [col1 %1 col2 %2 col []] \n   (if (or (empty? col1) (empty? col2))\n     col\n     (recur (rest col1) (rest col2) (conj col (first col1) (first col2)))))","user":"5956c6dae4b066ee0a44af61"},{"problem":39,"code":"(fn my-interleave \n  ([a b] (if (or (= 1 (count a)) (= 1 (count b))) [(first a) (first b)]\n   \n   (flatten (conj [(first a) (first b)] (my-interleave (rest a) (rest b)))))))","user":"588ce4aee4b05c141a2560a1"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map #(list %1 %2) seq1 seq2)))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [as bs]\n  (loop [as as\n         bs bs\n         acc []]\n    (if (and (seq as) (seq bs))\n      (recur (rest as) (rest bs) \n             (conj (conj acc (first as)) (first bs)))\n      acc)))","problem":39,"user":"4f28c979e4b0d6649770a01a"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b)) '() (concat (list (first a) (first b)) (f (rest a) (rest b)))))","user":"56e227a8e4b03a7c14b85a31"},{"problem":39,"code":"(fn aaa [a b]\n  (let [i (atom 0) res (atom [])]\n    (while (and (< @i (count a)) (< @i (count b)))\n      (do\n        (reset! res (conj @res (get a @i) (get b @i)))\n      (reset! i (inc @i))\n      ))\n    @res\n    )\n  )","user":"5c1229d5e4b01240ff567188"},{"problem":39,"code":"(fn m\n  [a b]\n  (loop [ a a b b r []]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (conj r (first a) (first b))))\n    ))","user":"55bd87ede4b01b9910ae29fe"},{"code":"(fn[x y]\n\t(loop [ls x ms y res []]\n\t\t(if (or (empty? ls) (empty? ms))\n\t\t\tres \n\t\t\t(recur (rest ls) (rest ms) (conj res (first ls) (first ms))))))","problem":39,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [s1 s2] (flatten (map #(cons %1  (cons %2 '())) s1 s2)))","problem":39,"user":"4e6ec58c535d5021c1a89611"},{"code":"(fn i [a b] \n  (if (or (empty? a) (empty? b))\n      nil\n      (concat (list (first a) (first b)) (i (rest a) (rest b)))))","problem":39,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [i1 l1\n         i2 l2\n         output []]\n    (if (some #(= (count %) 0) [i1 i2])\n      output\n      (recur (rest i1) (rest i2) (conj output (first i1) (first i2))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":39,"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    (list)\n    (concat \n      (list (first a) (first b))\n      (f (rest a) (rest b)))))","user":"598a4ff7e4b02b9968b84cda"},{"problem":39,"code":"#(loop [p1 %1, p2 %2, result []]\n   (cond (= 0 (count p1)) result\n         (= 0 (count p2)) result\n         :else (recur (rest p1) (rest p2) (conj (conj result (first p1)) (first p2)))\n    )\n   \n   )","user":"5510d948e4b06e50f9beb18d"},{"code":"(fn [xs ys] (flatten (map list xs ys)))","problem":39,"user":"4fe8da4de4b0547ebccb2429"},{"code":"#((fn mix [p1 p2] (lazy-seq\r\n(let [s1 (seq p1) s2 (seq p2)]\r\n  (when (and s1 s2)\r\n    (cons (first s1) (cons (first s2) (mix (rest s1) (rest s2)))))))) %1 %2)","problem":39,"user":"4dda5d07535d02782fcbe9f2"},{"problem":39,"code":"#(mapcat vector  %1 %2)","user":"58c71509e4b021aa9917ed6e"},{"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         acc []]\n    (if (or (empty? xs)\n            (empty? ys))\n      acc\n      (let [[x & xs] xs\n            [y & ys] ys]\n        (recur xs ys (conj acc x y))))))","problem":39,"user":"4f03afcc535dcb61093f6b4d"},{"problem":39,"code":"(fn [s1 s2] (loop [s1 s1\n                   s2 s2\n                   r []]\n              (if (or (empty? s1) (empty? s2)) r (recur (rest s1) (rest s2) (conj r (first s1) (first s2))))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"mapcat #(conj %& %)","problem":39,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"problem":39,"code":"(fn[s1 s2]\n  (mapcat (fn[& s] s) s1 s2))","user":"55950c5fe4b0c79f6e1db95e"},{"code":"(fn [c1 c2]\n  (loop [c1 c1 c2 c2 xs nil]\n    (let [f1 (first c1) f2 (first c2)]\n      (if (and f1 f2)\n        (recur (next c1) (next c2) (concat xs (conj nil f2 f1) ))\n        xs))))","problem":39,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":39,"code":"(fn zipper [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    []\n    (cons  (first coll1) (cons (first coll2) (zipper (rest coll1) (rest coll2))))))","user":"571cd9dce4b0145328a76271"},{"problem":39,"code":"(fn [a b]\n  (loop [ fst a snd b acc [] ]\n    (if (or (empty? fst) (empty? snd))\n      acc\n      (recur (rest fst) (rest snd) (conj acc (first fst) (first snd)))\n)))","user":"582835cbe4b051871117bf30"},{"code":"(fn [x y]\n  ((fn [a b seq] \n    (if (false? (or (empty? a) (empty? b)))\n      (recur (rest a) (rest b) (conj seq (first a) (first b)))\n      seq\n    )\n  ) x y [])\n)","problem":39,"user":"5037c397e4b0af0658af77b4"},{"code":"(fn weave [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (cons (first s1) (cons (first s2) (weave (rest s1) (rest s2))))))","problem":39,"user":"52ec1dfbe4b0705949c4444b"},{"code":"(fn interl [x y] (if (empty? x) x (if (empty? y) y (cons (first x) (cons (first y)  (interl (rest x) (rest y)))) )))","problem":39,"user":"4fae5401e4b081705acca249"},{"code":"(fn[a b](mapcat #(list % %2) a b))","problem":39,"user":"4f3e2fbbe4b0e243712b1f7e"},{"code":"(fn [l1 l2]\n\t(flatten (for [i (range 0 (min (count l1) (count l2)))]\n               [(nth l1 i) (nth l2 i)]\n               )\t\n             )\n  )","problem":39,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":39,"code":"(fn   ([s1 s2] (loop [r [] s1 s1 s2 s2]\n             (if (or (empty? s1) (empty? s2)) r (recur (conj r (first s1) (first s2)) (rest s1) (rest s2))))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":39,"code":"(fn [xs ys] (loop [xs xs ys ys acc []]\n                   (cond (empty? xs) acc\n                             (empty? ys) acc\n                             :else (recur (rest xs) (rest ys) (concat acc [(first xs) (first ys)]))\n                   )\n                 )\n)","user":"55dc2ad1e4b050e68259b3ac"},{"problem":39,"code":"(fn i [a b] (let [[af bf] (map first [a b])]\n                (if  (and af bf)\n                  (cons af (cons bf (i (rest a) (rest b))))\n                  [])))","user":"583048d9e4b051871117c007"},{"code":"(fn [& seqs]\n  (apply mapcat (fn [& items] items) seqs))","problem":39,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":39,"code":"(fn [a b]\n  (flatten (loop [c1 a\n         c2 b\n         r '[]]\n    (cond\n     (or (empty? c1)\n          (empty? c2))\n     r\n     :else\n     (recur (rest c1) (rest c2)\n            (conj (conj r (first c1))\n                  (first c2)))))))","user":"5a29ee57e4b09cafd31c7f2b"},{"code":"#(letfn [(worker [l1 l2 t n]\r\n            (cond\r\n             (empty? l1) n\r\n             (and (empty? l2) t) n\r\n             :else (recur l2 (rest l1) (not t) (conj n (first l1)))))]\r\n    (worker %1 %2 true []))","problem":39,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn inter [col1 col2] (let [s1 (seq col1) s2 (seq col2)] \n                               (when (and s1 s2) \n                                 (cons (first s1) (cons (first s2) (inter (rest s1) (rest s2)))))))","problem":39,"user":"5311b367e4b08068f379eced"},{"problem":39,"code":"(fn \n  [fir-coll sec-coll]\n  (loop [curr-fir fir-coll curr-sec sec-coll ans []]\n    (if (or (empty? curr-fir) (empty? curr-sec))\n      (flatten ans)\n      (recur (rest curr-fir) (rest curr-sec) (conj ans (conj (vector (first curr-fir)) (first curr-sec)))))\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"code":"(fn intlv [initxs initys]\r\n  (loop [ret nil, xs initxs, ys initys]\r\n    (if (or (nil? (seq xs)) (nil? (seq ys)))\r\n      (reverse ret)\r\n      (recur (conj ret (first xs) (first ys))\r\n             (rest xs) (rest ys)))))","problem":39,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [& v] (flatten (apply (partial map #(conj %& %)) v)))","problem":39,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn inter-leave [seq1 seq2]\n    (if (or (zero? (count seq1))\n            (zero? (count seq2)))\n      '()\n      (flatten  (list (first seq1) (first seq2)\n                      (inter-leave (rest seq1) (rest seq2))))))","problem":39,"user":"511e763ce4b03e81d390ac29"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 result []] (if (some empty? [s1 s2]) result (recur (rest s1) (rest s2) (conj result (first s1) (first s2)))))","user":"5b6002c2e4b0c6492753e6fb"},{"code":"#(flatten (into () (zipmap % %2)))","problem":39,"user":"4e57d1e2535d8a8b8723a289"},{"code":"#(apply concat (apply map list %&))","problem":39,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn [my1 my2] (reverse (flatten (into [] (zipmap my2 my1)))))","problem":39,"user":"50f53694e4b057d4c52de881"},{"code":"(fn ff [[x & xs :as xl]\n                                [y & ys :as yl]]\n                  (if-not (or (empty? xl) (empty? yl))\n                    (cons x (cons y (ff xs ys)))))","problem":39,"user":"4e71705e535d5021c1a89649"},{"code":"(fn [v1 v2]\n  (loop [vec1 v1\n         vec2 v2\n         vec3 []]\n           (if (or (empty? vec1) (empty? vec2))\n              (flatten vec3)\n              (recur (rest vec1) (rest vec2) (conj vec3 (map first [vec1 vec2]))))))","problem":39,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn my-interleave [& colls]\n  (let [times (apply min (map count colls))]\n    (loop [i times a () colls colls]\n      (if (zero? i)\n        a\n        (recur (dec i)\n               (concat a (map first colls))\n               (map rest colls))))))","problem":39,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn f [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (conj (f (rest s1) (rest s2)) (first s2) (first s1))))))","problem":39,"user":"4f230adde4b0d66497709fdf"},{"code":"(fn il [s1 s2]\r\n  (if (or (empty? s1) (empty? s2))\r\n      '()\r\n      (cons (first s1)\r\n            (cons (first s2)\r\n                  (il (rest s1) (rest s2))))))","problem":39,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn [& ls]\n  (loop [ls ls result []]\n    (if (some #(= true %) (map empty? ls))\n      result\n      (recur (map rest ls) (into result (vec (map first ls)))))))","problem":39,"user":"4f77b68de4b0fbe0118ec581"},{"problem":39,"code":"#(let [m (min (count %1) (count %2))]\n   (flatten (map vector (take m %1) (take m %2))))","user":"5f429fdfe4b0955706451faf"},{"code":"#(loop [x % y %2 z []]\n  (if (or (empty? x) (empty? y))\n    z\n    (recur (rest x) (rest y) (conj z (first x) (first y)))))","problem":39,"user":"4e55b3dc535d8a8b8723a27f"},{"problem":39,"code":"(fn zip [x y] (if (some empty? [x y]) nil (cons (first x) (cons (first y) (zip (rest x) (rest y)) ))))","user":"59fa5773e4b0ca45a743a35e"},{"problem":39,"code":"#(flatten (map (fn [a b] (vector a b)) %1 %2))","user":"56fde58ae4b08d47c97781aa"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten (let [result []]\n    (map #(conj result % %2) c1 c2))))","user":"5c813b27e4b0c8042a70ce22"},{"problem":39,"code":"(fn [col1 col2]\n    (apply concat (map #(vector %1 %2) col1 col2)))","user":"59932f49e4b0b211ea3aaaae"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 result []]\n    (if (and  (first c1) (first c2))\n      (recur (rest c1) (rest c2) (conj result (first  c1) (first c2)))\n      result)\n    ))","user":"54530382e4b0e397800069cc"},{"problem":39,"code":"(fn my-interleave [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (cons (first l1) (cons (first l2) (my-interleave (rest l1) (rest l2))))))","user":"551c6bcee4b07993ea3788df"},{"code":"(fn anon [a b]\n  (cond\n    (empty? a) []\n    (empty? b) []\n    true (cons (first a) (cons (first b) (anon (rest a) (rest b))))))","problem":39,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":39,"code":"#(reduce concat (for [x (range (count (if(< (count %1) (count %2)) %1 %2)))] [(nth %1 x) (nth %2 x)]))","user":"5501de12e4b07d26eda61d7b"},{"code":"(fn [xs ys] (apply concat (map (fn [x y] (seq [x y])) xs ys)))","problem":39,"user":"4f497b61e4b0d56e7bb92bf3"},{"problem":39,"code":"(fn \n  \t[_prev _next]\n  \t(let [l1 (count _prev) l2 (count _next)]\n      \t(loop [i 0 lst []]\n    \t\t(if (or (= i l1) (= i l2) ) \n     \t\t\tlst\n     \t\t(recur (inc i) (conj lst (.get _prev i) (.get _next i)))\n     \t\t)\n   \t\t)\n      \n      )\n)","user":"55ed1dc5e4b0121d4835fdd4"},{"problem":39,"code":"(fn [x y] (apply concat '() (map list x y)))","user":"5d1a1082e4b0902706380e0e"},{"problem":39,"code":"(fn [coll1 coll2] (mapcat #(-> [] (conj %1) (conj %2)) coll1 coll2))","user":"54ca658fe4b057c6fda3a25a"},{"problem":39,"code":"(fn [s1 s2]\n  (flatten\n    (map list s1 s2)))","user":"561d506ee4b064ca9f4b16aa"},{"problem":39,"code":"(fn flappy [list1 list2] (\n   cond\n   (empty? list1) []\n   (empty? list2) []\n   :else (into [(first list1) (first list2)] (flappy (rest list1) (rest list2)))\n))","user":"5da71a00e4b000c986472c14"},{"code":"(fn ise [x y]\n  (loop [f x s y r () ]\n    (if (or (empty? f) (empty? s))\n      r\n    (recur (rest f) (rest s) (-> r (vec) (conj (first f) (first s)))))))","problem":39,"user":"5007cdb9e4b0b17c647f5227"},{"problem":39,"code":"(fn [arr1 arr2]\n    (loop [i 0 [f1 & r1] arr1 [f2 & r2] arr2 result []]\n      (if (or (= nil f1) (= nil f2))\n        result\n        (recur (inc i) r1 r2 (conj result f1 f2)))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"(fn\n  [coll coll2]\n  (reduce concat (map list coll coll2)))","problem":39,"user":"52ba447ee4b07a9af57922ce"},{"problem":39,"code":"(fn inter [lat1 lat2]\n  (if (or (empty? lat1) (empty? lat2))\n    '()\n    (cons\n     (first lat1) \n     (cons \n      (first lat2) \n      (inter (rest lat1) \n             (rest lat2))))))","user":"55a35ef4e4b0acc240e31535"},{"problem":39,"code":"(fn interleave* [c1 c2] \n  (loop [acc [], s1 c1, s2 c2]\n    (if (or (empty? s1) (empty? s2))\n      acc\n      (recur \n       (conj acc (first s1) (first s2))\n       (rest s1)\n       (rest s2)))))","user":"5392500ae4b0b51d73faaeaf"},{"problem":39,"code":"(fn f[s1 s2]\n  (loop [s1 s1 s2 s2 r ()]\n    (if (or (empty? s1) (empty? s2))\n      (reverse r)\n      (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) r))))))","user":"56df632ce4b0ca2494a095f2"},{"problem":39,"code":"(fn my-interleave [a b] (\n  loop [ret [] a1 a b1 b]\n  (if (or (empty? a1) (empty? b1))\n  ret\n  (recur (conj ret (first a1) (first b1)) (rest a1) (rest b1))\n  )))","user":"59a0262ee4b0871e7608b82d"},{"problem":39,"code":"(fn _interleave [xs ys]\n  (reverse ((fn [acc _xs _ys]\n    (if\n      (or (empty? (rest _xs)) (empty? (rest _ys)))\n      (conj acc (first _xs) (first _ys))\n      (recur (conj acc (first _xs) (first _ys)) (rest _xs) (rest _ys)))) '() xs ys)))","user":"55fb58b2e4b0f488688e0661"},{"problem":39,"code":"(fn [a b]\n  (loop [res [] f a s b]\n    (if (or (empty? f) (empty? s))\n      res\n      (recur (conj res (first f) (first s)) (rest f) (rest s)))))","user":"58254a11e4b051871117bed9"},{"code":"(fn [a b] (flatten (map #(vector %1 %2) a b)))","problem":39,"user":"507e68abe4b085af06e3afd2"},{"code":"(fn f [x y]\n    (let [\n          s1 (seq x)\n          s2 (seq y)\n          ]\n      (lazy-seq\n       (when (and (first s1) (first s2))\n         (cons (first s1) (cons (first s2)\n                                (f (rest s1) (rest s2)))\n\n               )\n         )\n       )\n))","problem":39,"user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [sq1 sq2] \n  (loop [s1 (vec sq1) s2 (vec sq2) s3 []]\n    (if (or (empty? s1) (empty? s2)) \n      s3\n      (recur (rest s1) (rest s2) (conj s3 (first s1) (first s2))))))","problem":39,"user":"53069e16e4b02e8216869798"},{"problem":39,"code":"(fn [xs ys]\n  (loop [res []\n         xs xs\n         ys ys]\n    (if (some empty? [xs ys])\n      (flatten res)\n      (recur (conj res [(first xs)\n                        (first ys)])\n             (rest xs)\n             (rest ys)))))","user":"512e31e9e4b0b740abc59823"},{"code":"(comp flatten map) #(conj nil %2 %1)","problem":39,"user":"522600cfe4b0f4c7e20d29c8"},{"problem":39,"code":"(fn il[x y] \n (lazy-seq\n  (let [s1 (seq x) s2 (seq y)]\n   (when (and s1 s2)\n    (cons (first s1) (cons (first s2)\n     (il (rest s1) (rest s2))))))))","user":"574a9132e4b02ea1147991fd"},{"problem":39,"code":"(fn p39 [[a & r] [b & r2]]\n  (cond\n    (empty? r ) [a b]\n    (empty? r2) [a b]\n    :else (concat [a b] (p39 r r2))))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":39,"code":"(fn   [xs ys]\n  (loop [xs xs ys ys ret '()]\n    (if (or (empty? xs) (empty? ys))\n      ret\n      (recur (rest xs) (rest ys) (concat ret (list (first xs) (first ys)))))))","user":"5d81b40ce4b0915913b1d379"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1 s2 s2 res []]\n    (if (and (seq s1) (seq s2))\n        (recur (rest s1) (rest s2) (conj (conj res (first s1)) (first s2)) )\n        res)))","user":"5ff676a9e4b06df49cee1497"},{"problem":39,"code":"(fn [x y](loop [one x two y total []](if (or (empty? one) (empty? two)) total (recur (rest one) (rest two) (conj total (first one) (first two))))))","user":"564348e1e4b08d4f616f5f26"},{"problem":39,"code":"(fn [s t]\n    (mapcat list s t))","user":"59bdeb22e4b0a024fb6ae42d"},{"code":"(fn my-interleave [l1 l2]\n  (loop [a l1 b l2 result []]\n    (cond (empty? a) result\n          (empty? b) result\n          :else\n          (recur (rest a) (rest b)\n                 (concat result (list (first a) (first b)))))))","problem":39,"user":"51baff1be4b0fe3ecfb46443"},{"problem":39,"code":"(fn [col1 col2]\n               (flatten\n                 (map (fn [a b] [a b]) col1 col2)))","user":"58c7131be4b021aa9917ed6d"},{"code":"(fn interlv [x y]\n  (apply concat (map vector x y)))","problem":39,"user":"4e47f4f3535dc968683fc4bb"},{"problem":39,"code":"(fn txt [a, b] (if-not (or (empty? a) (empty? b))  (conj (txt (rest a) (rest b)) (first b) (first a)) '()))","user":"5ed4482be4b016b56eae05ca"},{"code":"(fn intr [a x y] (if (or (empty? x) (empty? y)) a (intr (concat  (concat  a  (repeat 1 (first x)) )  (repeat 1 (first y))  ) (rest x) (rest y)))) '()","problem":39,"user":"537a1012e4b06839e8705e5c"},{"problem":39,"code":"(fn splice [coll1 coll2]\n  (loop [x coll1\n         y coll2\n         r []]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))","user":"5f03550ce4b0cf489e8d7f33"},{"problem":39,"code":"(fn f [left right] \n  (if (and (not-empty left) (not-empty right))\n    (concat [(first left) (first right)] (f (rest left) (rest right))) \n    []))","user":"54c11fdae4b0ed20f4ff6f1b"},{"code":"mapcat #(cons %1 [%2])","problem":39,"user":"5254f908e4b0541d1855b9ba"},{"problem":39,"code":"(fn zip\n  ([xs ys] (zip xs ys []))\n  ([xs ys state]\n   (if (or (empty? xs) (empty? ys))\n     state\n     (zip (rest xs) (rest ys) (conj state (first xs) (first ys))))))","user":"579f89d5e4b05302be0b72ff"},{"problem":39,"code":"(fn [l1 l2] (mapcat #(list %1 %2) l1 l2))","user":"554ea8fbe4b00713264bd999"},{"code":"(fn [xs ys] (mapcat #(vector %1 %2) xs ys))","problem":39,"user":"500ff421e4b0ae202717946f"},{"problem":39,"code":"(fn [x y]\n  (mapcat (fn [a b] [a b]) x y))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":39,"code":"(fn my-interleave\n  [c1 c2]\n  (if (and (seq c1) (seq c2))\n    (cons (first c1) \n          (cons (first c2) \n                (my-interleave (rest c1) (rest c2))))))","user":"550615c0e4b021ccfedb9696"},{"code":"(fn interleave-map [& colls]\n  (->> colls                        ; [[1 2 3] [:a :b :c :d :e] \"String\"]\n       (apply (partial map vector)) ; '([1 :a \\S] [2 :b \\t] [3 :c \\r])\n       (apply concat)))             ; '(1 :a \\S 2 :b \\t 3 :c \\r)","problem":39,"user":"4fc6305de4b0ee37620e180b"},{"problem":39,"code":"(fn [arg1 arg2] (flatten (map #(cons % (cons %2 '())) arg1 arg2)))","user":"5720ba36e4b0c5bde472c09c"},{"code":"(fn interl [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (cons (first x) (cons (first y) (interl (rest x) (rest y))))))","problem":39,"user":"5186571de4b0da5a5be3bad1"},{"problem":39,"code":"(fn\n  [x y]\n  (mapcat #(list %1 %2) x y))","user":"5401aefbe4b0df28a13c62c7"},{"problem":39,"code":"(fn inter-e  [x y]\n  (loop [a x b y result []]\n    (cond\n      (or (empty? a) (empty? b)) (seq result)\n      :else (recur (rest a) (rest b) (conj result (first a) (first b)))\n      ))\n  )","user":"518665cde4b0da5a5be3bad2"},{"problem":39,"code":"(fn [a b] (flatten (for [x (range 0 (if (< (count a) (count b)) (count a) (count b)))] [(nth a x) (nth b x)])))","user":"5425d454e4b01498b1a71b13"},{"problem":39,"code":"(fn in [x y]\n  (let [cnt (min (count x) (count y))]\n    (loop [idx 0\n           c []]\n      (if (= idx cnt)\n        c\n        (recur (inc idx) (conj c (nth x idx) (nth y idx)))))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":39,"code":"#(loop [a %1 b %2 r []] (if (or (empty? a) (empty? b)) r (recur (next a) (next b) (conj (conj r (first a)) (first b)))))","user":"53a442a6e4b0b62ce300572d"},{"problem":39,"code":"(fn \n [col1 col2]\n (mapcat \n  #(conj [] %1 %2)\n   col1 col2\n  ))","user":"54c94376e4b045293a27f665"},{"problem":39,"code":"#(loop [res [] seq-1 %1 seq-2 %2]\n   (if (or (empty? seq-1) (empty? seq-2))\n     res\n     (recur (conj res (first seq-1) (first seq-2)) (rest seq-1) (rest seq-2))))","user":"55d332f5e4b0e31453f64a5f"},{"code":"(fn intlv [sq1 sq2]\n        (loop [src1 sq1, src2 sq2, dest []]\n          (if (and (seq src1) (seq src2))\n            (recur\n              (rest src1)\n              (rest src2)\n              (conj dest (first src1) (first src2)))\n             dest)))","problem":39,"user":"51377188e4b04059df19f303"},{"code":"(fn [c1 c2]\n  (let [leng (if (> (.size c1) (.size c2))\n               (.size c2)\n               (.size c1))]\n    (flatten (for [x (range leng)\n                   :let [a (nth c1 x)\n                         b (nth c2 x)]]\n               [a b]))))","problem":39,"user":"51f8e057e4b09be9c177e53d"},{"problem":39,"code":"(fn [a b]\n   (loop [s1 a\n          s2 b\n          n '()]\n     (if (or (empty? s1) (empty? s2))\n       (reverse n)\n       (recur \n        (rest s1) \n        (rest s2) \n        (cons (first s2) (cons (first s1) n))))))","user":"5df75fd8e4b0a607a9a45c92"},{"code":"(fn interl [x y] \n  (apply concat (reverse (zipmap x y))))","problem":39,"user":"52812b9fe4b0757a1b171423"},{"problem":39,"code":"#(flatten (map (fn [x y] (conj [] x y)) %1 %2))","user":"5dc85f8ae4b02f9375f4e1da"},{"code":"(fn x ([a b] (x a b []))\n      ([a b c]\n        (if (or (empty? a) (empty? b))\n          c\n          (recur (rest a) (rest b) (conj c (first a) (first b))))))","problem":39,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn \n  [xs ys]\n    (loop [xs xs ys ys result ()]\n      (if (and (seq xs) (seq ys))\n        (recur (rest xs) \n               (rest ys) \n               (concat result (list (first xs) (first ys))))\n        result)))","problem":39,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"mapcat list","problem":39,"user":"4dae0510c9a9d6ed4b99dc57"},{"problem":39,"code":"#(loop [f %1 s %2 ret []]\n   (let [v1 (first f)\n         v2 (first s)]\n     (if (and v1 v2)\n       (recur (rest f) (rest s) (conj ret v1 v2))\n       ret)))","user":"4eea1a41535d93acb0a66899"},{"problem":39,"code":"(fn [c1 c2]\n  (mapcat (fn [a b ] [a b]) c1 c2))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn inter[c1 c2]\r\n  (loop [result [] x (seq c1) y (seq c2) ]\r\n    (if (and x y)\r\n      (recur (conj result (first x) (first y))\r\n          (next x)\r\n          (next y)\r\n        )\r\n      result)\r\n    )\r\n  )","problem":39,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn [a b]\n  (loop [a a b b result []]\n    (if (or (empty? (rest a)) (empty? (rest b))) \n      (conj result (first a) (first b))\n      (recur (rest a) (rest b)\n             (conj result (first a) (first b))))))","problem":39,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":39,"code":"(fn [r a b]\n  (if (or (empty? a) (empty? b)) r\n  \t(recur (conj r (first a) (first b)) \n           (rest a) (rest b))\n  )) \n[]","user":"5654d0e1e4b0f9d632dd848c"},{"code":"(fn i [[a & b] [c & d]] (when (and a c) (cons a (cons c (i b d)))))","problem":39,"user":"4f045946535dcb61093f6bba"},{"problem":39,"code":"(fn inter [result coll1 coll2]\n  (if (and (seq coll1) (seq coll2))\n    (inter (conj result (first coll1) (first coll2)) (rest coll1) (rest coll2))\n    result)) []","user":"54d0cedde4b0e8a36923e5d2"},{"problem":39,"code":"(fn [c1 c2]\n   (loop [c1 c1 c2 c2 r []]\n     (if (or (empty? c1) (empty? c2))\n       r\n       (recur (rest c1) (rest c2) (conj r (first c1) (first c2))))))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":39,"code":"(fn [a b]\n  \n  (flatten (map #(conj [%1] %2) a b)))","user":"56308326e4b073c1cf7a9be9"},{"code":"(fn my-inter [f s]\n(letfn [(my-inter0 [f s acc]\n  (if (or (empty? f) (empty? s))\n     acc \n     (my-inter0 (rest f) (rest s)  (conj acc (first f) (first s)) ))\n   \n  )]\n  \n  (my-inter0 f s [])\n \n  ))","problem":39,"user":"5180dc04e4b06b8caf33fa01"},{"code":"(fn il [x y]\n        (cond (empty? x) '()\n               (empty? y) '()\n               :else (cons (first x) (cons (first y) (il (rest x) (rest y))))))","problem":39,"user":"4e8b557c535d65386fec2119"},{"code":"(fn zip [a b]\n   (if (or (= (count a) 0)\n           (= (count b) 0))\n     []\n     (cons (first a) (cons (first b) (zip (rest a) (rest b))))))","problem":39,"user":"518ee4f9e4b0cd6ff51676a5"},{"code":"(fn [xs1 xs2]\n  (loop [newx '()\n         nxs1 xs1\n         nxs2 xs2]\n    (if (or (= (first nxs1) nil) (= (first nxs2) nil))\n      newx\n      (recur (concat newx [(first nxs1) (first nxs2)])\n             (next nxs1) (next nxs2)))))","problem":39,"user":"4ff505c8e4b0678c553fc364"},{"code":"(fn [one two]\n  (loop [acc [] c1 one c2 two]\n    (if (or (empty? c1) (empty? c2))\n      acc              \n      (recur (conj (conj acc (first c1)) (first c2)) (rest c1) (rest c2)))))","problem":39,"user":"510ec1bce4b07438aa321461"},{"problem":39,"code":"#(loop [x %\n        y %2\n        result []]\n    (if (or (nil? (first x)) (nil? (first y)))\n      result\n      (recur (rest x) (rest y) (conj result (first x) (first y)))))","user":"4f0f7339535d0136e6c2233e"},{"code":"(letfn [(intlv [s t] (if (or (empty? s) (empty? t)) nil (cons (first s) (cons (first t) (lazy-seq (intlv (next s) (next t)) ) )) ) )] intlv)","problem":39,"user":"51729002e4b044b2ef48a850"},{"code":"(fn interlv[coll s1 s2]\n  (if (and (> (count s1) 1) (> (count s2) 1))\n    (interlv\n      (cons (first s2) (cons (first s1) coll))\n        (rest s1)\n        (rest s2))\n    (reverse\n      (cons (first s2) (cons (first s1) coll)))))\n[]","problem":39,"user":"4ed6d81a535d10e5ff6f52ea"},{"problem":39,"code":"#(loop [r [] a %1 b %2] (if \n                          (or (empty? a) (empty? b)) r (recur (concat r [(first a) (first b)]) (rest a) (rest b))\n                          ))","user":"55c5261ee4b0e31453f649ae"},{"code":"#(apply concat (mapv list % %2))","problem":39,"user":"525078b6e4b0541d1855b832"},{"problem":39,"code":"(fn [ila ilb]\n  (loop [acc (empty ila) a ila b ilb]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (conj acc (first a) (first b)) (rest a) (rest b))\n    )\n  )\n)","user":"5720fc08e4b0c5bde472c0a3"},{"problem":39,"code":"(fn il [a b]\n  (if (or (empty? a) (empty? b))\n    nil\n    (cons (first a) (cons (first b) (il (rest a) (rest b))))))","user":"5cab33e7e4b048ec896c5c48"},{"problem":39,"code":"(fn [s1 s2]\n  (apply concat (mapv vector s1 s2)))","user":"54ff6084e4b07d26eda61d50"},{"problem":39,"code":"(fn bla\n ;([] ())\n ;([c1] c1)\n ([c1 c2]\n   (let [s1 (seq c1) s2 (seq c2)]\n        (if (and s1 s2)\n          (cons (first s1) (cons (first s2) (bla (rest s1) (rest s2))))))))","user":"58dfce9fe4b0a4d5acaab723"},{"problem":39,"code":"(fn inter \n  ([xs ys] (inter xs ys []))\n  ([[x & xs] [y & ys] ret]\n   (if (and x y)\n     (inter xs ys (conj ret x y))\n     ret)))","user":"554b7056e4b0a04f79299583"},{"problem":39,"code":"(fn [s1 s2]\n   (loop [ws1 s1 ws2 s2 r []]\n     (if (and (seq ws1) (seq ws2))\n       (recur (rest ws1) (rest ws2) (conj r (first ws1) (first ws2)))\n       r)))","user":"4fffa422e4b0678c553fc404"},{"problem":39,"code":"(fn\n  [a b]\n  (loop [result []\n         x a\n         y b]\n    (if (or (= (count x) 0) (= (count y) 0))\n      result\n      (recur (conj result (first x) (first y)) (rest x) (rest y))\n      )))","user":"53ac4719e4b047364c04445c"},{"code":"#(loop [[f1 & r1] %1 [f2 & r2] %2 res '()]\n\t(if (or (nil? f1) (nil? f2)) res\n\t\t(recur r1 r2 (concat res (list f1 f2)))))","problem":39,"user":"53300924e4b019098a6f8b55"},{"code":"(fn t\n  [xs xss]\n  (flatten (map list xs xss))\n)","problem":39,"user":"52ce5056e4b07d0d72b2738f"},{"code":"#(reduce concat (map vector % %2))","problem":39,"user":"5245af03e4b08ba239308124"},{"problem":39,"code":"(partial (fn [state c1 c2]\n    (cond\n\t\t(empty? c1) (reverse state)\n\t\t(empty? c2) (reverse state)\n     \t:else (recur (cons (first c2) (cons (first c1) state)) (rest c1) (rest c2))\n     )) ())","user":"5a080bdde4b01bb0ae8afde9"},{"code":"(fn i [s t]\n  (if (or (empty? s) (empty? t))\n    '()\n    (cons (first s) (cons (first t) (i (rest s) (rest t))))))","problem":39,"user":"4fc50441e4b081705acca36f"},{"code":"(fn [xs ys]\n  (mapcat #(do [%1 %2]) xs ys))","problem":39,"user":"510b0480e4b078ea719210fa"},{"problem":39,"code":"(fn [c1 c2]\n   (mapcat #(list %1 %2) c1 c2))","user":"5808ee16e4b0a837a8b30d16"},{"problem":39,"code":"(fn [ x y ]\n\n(flatten (map vector x y))\n    \n    );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":39,"code":"(fn [& a] (loop [t a acc []] (cond\n                              (some #(empty? %) t) acc\n                              :else (recur (into [] (map rest t)) (into acc (map first t))))))","user":"56af842de4b061e3ca319ad2"},{"problem":39,"code":"(fn [a b] (loop [[h1 & t1] a [h2 & t2] b acc []] (let [newacc (into acc [h1 h2])] (if (or (= t1 nil) (= t2 nil)) newacc (recur t1 t2 newacc)))))","user":"58152157e4b0f478707a0631"},{"code":"(fn [v1 v2]\n  (apply concat\n         (map #(list %1 %2)\n              v1 v2)))","problem":39,"user":"516ff477e4b034fe8eaf70f3"},{"code":"(fn zip [s1 s2]\n  (if (or (empty? s1) (empty? s2)) \n    ()\n    (cons (first s1) \n      (cons (first s2) (zip (rest s1) (rest s2))))))","problem":39,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":39,"code":"(fn [& colls]\n  (loop [x []\n         colls colls]\n    (if (some #(= nil %) (map seq colls)) x\n        (recur (into x (map first colls)) (map rest colls))\n        )))","user":"6022429be4b0d5df2af22200"},{"problem":39,"code":"#(->> (map vector %1 %2)\n      (reduce concat))","user":"5a9181c5e4b002d099cae6f6"},{"code":"(fn f [x y]\n  (if (and (seq x) (seq y))\n    (cons (first x)\n          (cons (first y)\n                (f (rest x) (rest y))))))","problem":39,"user":"51c8301ee4b07ef393169e4d"},{"code":"(fn [seq1 seq2]\n  (loop [current1 seq1 current2 seq2 result []]\n    (if (or (= (count current1) 0) (= (count current2) 0))\n      result\n      (recur\n        (drop 1 current1)\n        (drop 1 current2)\n        (conj (conj result (first current1)) (first current2))))))","problem":39,"user":"52b94f15e4b07a9af57922ba"},{"code":"(fn [x y]\n  (loop [u x v y result '()]\n    (println u v result)\n    (if (or (nil? (seq u)) (nil? (seq v)))\n      (reverse result)\n      (recur (rest u) (rest v) (cons (first v) (cons (first u) result))) )))","problem":39,"user":"4f1c2336535d64f60314647f"},{"code":"(fn my-interleave\n  [xs1 xs2]\n  (lazy-seq\n   (loop [[x1 & xs1] xs1\n          [x2 & xs2] xs2\n          coll []]\n     (if (and x1 x2)\n       (recur xs1 xs2 (conj (conj coll x1) x2))\n       coll))))","problem":39,"user":"4e4ea0f6535dc968683fc4e6"},{"code":"#(flatten (into() (zipmap %1 %2)))","problem":39,"user":"4e8b73f1535d65386fec2121"},{"problem":39,"code":"(fn [v1 v2] \n    (loop [xv1 v1 xv2 v2 r []]\n    (if (and (seq xv1) (seq xv2))\n        (recur (rest xv1) (rest xv2) (conj r (first xv1) (first xv2)))\n        r)))","user":"55975569e4b031d6649c9b8e"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq1 seq1\n         seq2 seq2\n         interleaved-seq []]\n    (if (some empty? [seq1 seq2])\n      interleaved-seq\n      (recur (rest seq1)\n             (rest seq2)\n             (conj interleaved-seq (first seq1) (first seq2))))))","user":"562d15a6e4b0a45d2ff83019"},{"problem":39,"code":"(fn myinter [s1 s2] \n  (if ( or (= (count s1)0)(= (count s2)0)) '() \n                                           (cons (first s1) \n                                                 (cons (first s2) (myinter (rest s1) (rest s2))))))","user":"53e150e5e4b0d874e779ae53"},{"problem":39,"code":"(fn\n  [arr1 arr2]\n  (\n    (fn\n      [res arr1 arr2]\n      (if (or\n            (empty? arr1)\n            (empty? arr2))\n        res\n        (recur\n          (concat\n            res\n            (list (first arr1))\n            (list (first arr2)))\n          (rest arr1)\n          (rest arr2))))\n    '()\n    arr1\n    arr2))","user":"555f4bade4b0a2eb076a39c2"},{"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (flatten [(first a) (first b) (f (rest a) (rest b))])))","problem":39,"user":"53415755e4b00652c8746ecd"},{"problem":39,"code":"(fn interleave* [coll1 coll2]\n  (if (and (seq coll1) (seq coll2))\n    (conj\n     (interleave* (rest coll1) (rest coll2))\n     (first coll2)\n     (first coll1))\n\n    nil \n    )\n  )","user":"53bd476ae4b0d9a98559a6ca"},{"code":"(fn [x y ]\n  (reduce concat [] (map vector x y)))","problem":39,"user":"518644bce4b0da5a5be3baca"},{"problem":39,"code":"(fn [c1 c2]\n  (apply concat (map list c1 c2)))","user":"58c5a08be4b021aa9917ed40"},{"code":"(fn ileave\n  [s0 s1]\n  (flatten (reverse (zipmap s0 s1))))","problem":39,"user":"52a4f3cee4b0c58976d9abe0"},{"code":"#(reduce (fn [x y] (concat x y)) '() (map (fn [x y] (concat [x] [y])) %1 %2))","problem":39,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn inter [xs1 xs2]\n  (when-let [x1 (first xs1)]\n    (when-let [x2 (first xs2)]\n      (concat [x1 x2] (inter (rest xs1) (rest xs2))))))","problem":39,"user":"52015698e4b0d7096e99ddba"},{"problem":39,"code":"(fn inter[lst1 lst2]\n   (if (not (and (not (empty? lst1)) (not (empty? lst2))))\n     '()\n     (concat (list (first lst1) (first lst2)) (inter (rest lst1) (rest lst2)))))","user":"5bbbce70e4b0a20761a2360f"},{"code":"(fn [sq1, sq2]\n  (loop [src1 sq1, src2 sq2, dest []]\n    (if (and (seq src1) (seq src2))\n      (recur\n        (rest src1)\n        (rest src2)\n        (conj dest (first src1) (first src2)))\n       dest)))","problem":39,"user":"5144e4c1e4b021a5ff8301f8"},{"code":"(fn my-interleave\n  [in1 in2]\n  (flatten (for [n (range 0 (min (count in1) (count in2)))] [(in1 n) (in2 n)])))","problem":39,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [x y]\n  (vec (flatten\n    (map #(cons (nth x %) [(nth y %)])\n     (range (min (count x) (count y)))))))","problem":39,"user":"4f307b02e4b0d6649770a079"},{"code":"(fn[a b] list(mapcat vector a b))","problem":39,"user":"4f57a153e4b0a7574ea7183a"},{"code":"(fn z[x y] (\n            lazy-seq \n                      (let [xx (seq x) yy (seq y)]\n                        (when (and xx yy)\n                      \t\t(concat \n                             \t(list (first xx) (first yy)) \n                      \t\t\t(z (rest xx) (rest yy))\n                            )\n                        )\n                      )\n                      \n            )\n  )","problem":39,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn [v1 v2]\n(flatten  (map #(concat [%1] [%2]) v1 v2))\n  )\n\n; (fn [xs xn]\n; (mapcat vector xs xn))","problem":39,"user":"4e8b6f4d535d65386fec211e"},{"problem":39,"code":"(fn [l r]\n  (loop [l l r r res []]\n    (if (and (first l) (first r)) (recur (rest l) (rest r) (conj (conj res (first l)) (first r))) res)))","user":"596caee3e4b069c0a1a19837"},{"problem":39,"code":"(fn [x y]\n  (loop [first-seq x\n         sec-seq y\n         new-seq []]\n    (if (and (< 0 (count first-seq)) (< 0 (count sec-seq)))\n      (recur\n        (rest first-seq)\n        (rest sec-seq)\n        (conj (conj new-seq (first first-seq)) (first sec-seq)))\n      new-seq)))","user":"5f1eebcee4b0f565ad998273"},{"code":"(fn myinterleave\n  [coll1 coll2]\n  (if (or (empty? coll1)\n          (empty? coll2))\n    '()\n    (cons (first coll1)\n          (cons (first coll2)\n                (myinterleave (rest coll1) (rest coll2))))))","problem":39,"user":"520693e1e4b0bf4f1882c829"},{"problem":39,"code":"(fn [xs yx] (flatten (map vector xs yx)))","user":"5da71eaee4b000c986472c15"},{"problem":39,"code":"#(loop[a % b %2 c []](if (or (empty? a) (empty? b))\n                        c\n                        (recur (rest a)(rest b)(conj c (first a)(first b)))))","user":"53ada652e4b047364c04446d"},{"code":"(fn [& x]\n  (apply concat (apply map list x)))","problem":39,"user":"52890634e4b0239c8a67ae5e"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (if (> (count s1) (count s2))\n    (mapcat (fn [a b] [a b]) (take (count s2) s1) s2)\n    (mapcat (fn [a b] [a b]) s1 (take (count s1) s2))))","user":"56019662e4b04bb52996e190"},{"problem":39,"code":"#(flatten (mapv vector %1 %2))","user":"55e1d34ae4b050e68259b421"},{"problem":39,"code":"(fn\n  [seqA seqB]\n  (mapcat vector seqA seqB))","user":"5ac35d00e4b0e27600da7712"},{"problem":39,"code":"(fn [lstA lstB]\n  (loop [lstA lstA\n         lstB lstB\n         aux ()]\n    (if (or (empty? lstA) (empty? lstB))\n      (reverse aux)\n      (recur (rest lstA) (rest lstB) (conj aux (first lstA) (first lstB)))\n      )))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":39,"code":"(fn inter [s1 s2]\n\t(loop [[x1 & xrest :as X] s1, [y1 & yrest :as Y] s2, out []]\n\t\t(if (and (seq X) (seq Y))\n\t\t\t(recur xrest yrest (concat out [x1 y1]))\n\t\t\tout)))","user":"564d02cde4b0284900eef679"},{"code":"(fn f [x1 x2]\n  (cond\n    (or (empty? x1) (empty? x2)) ()\n    :else (conj (conj (f (rest x1) (rest x2)) (first x2)) (first x1))))","problem":39,"user":"4fd153cee4b04c3a95aa040e"},{"problem":39,"code":"(fn inter [a b] (if (or (empty? a) (empty? b)) '() (cons (first a) (cons (first b) (inter (rest a) (rest b))))))","user":"52b9cfb9e4b07a9af57922c5"},{"problem":39,"code":"(fn my-interleave [& seqs]\n  (let [my-interleave-inner\n        (fn my-interleave-inner [acc & seqs]\n          (if (= 0 (count (first seqs))) acc\n              (recur (concat acc (apply list (map first seqs))) (map rest seqs))))\n        min-length (apply min (map count seqs))\n        truncs (map #(take min-length %) seqs)]\n    (println truncs)\n    (apply my-interleave-inner '() truncs)))","user":"56889672e4b0dcc4269f406c"},{"code":"(fn foo [a b] \n  (when \n    (and (seq a) (seq b))\n    (cons (first a) \n      (cons (first b)\n        (foo (rest a) (rest b))))))","problem":39,"user":"4f30896ce4b0d6649770a07b"},{"problem":39,"code":"(fn [m n] (flatten (map (fn [x y] [x y]) m n)))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":39,"code":"#(apply mapcat list [%1 %2])","user":"58988cbbe4b00487982d52d7"},{"problem":39,"code":"(fn [col1 col2]\n   (flatten (map (fn [x y] [x y]) col1 col2)))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":39,"code":"(fn [f s]\n  (loop [ret '()\n         f f\n         s s]\n    (if (or (empty? f) (empty? s))\n      ret\n      (recur (concat ret (list (first f) (first s))) (rest f) (rest s)))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":39,"code":"(fn [x,y] (flatten (map list x y)))","user":"56ec0af1e4b04a395b9a0430"},{"problem":39,"code":"(fn yolo [c1 c2]\n  (->> (zipmap c1 c2)\n       (map seq)\n       reverse\n       flatten))","user":"54246fcce4b01498b1a71aed"},{"code":"#(loop [a %1 b %2 x []] (\n  if (or (empty? a) (empty? b)) x\n  (recur (rest a) (rest b) (concat x [(first a) (first b)]))\n))","problem":39,"user":"4f1595da535d64f603146444"},{"problem":39,"code":"(fn f [x y] \n  (if (or (empty? x) (empty? y))\n    nil \n    (concat \n      (list (first x) (first y))\n      (f (rest x) (rest y))\n    )\n  )\n)","user":"5680fff3e4b0966858e4d8f6"},{"problem":39,"code":"(fn func\n  ([lst1 lst2] (func lst1 lst2 []))\n  ([lst1 lst2 result] (if (or (empty? lst1)(empty? lst2)) result (func (rest lst1) (rest lst2) (conj result (first lst1)(first lst2)))))\n  )","user":"5461873de4b01be26fd746a3"},{"code":"#(apply concat \n       (-> %1 (zipmap %2)\n        seq\n        reverse))","problem":39,"user":"528410bbe4b0239c8a67adc2"},{"code":"(fn [cola colb]\n  (loop [acc '()\n         ca cola\n         cb colb]\n    (let [a (first ca)\n          b (first cb)]\n      (if (and a b)\n        (recur (concat acc (list a b)) (next ca) (next cb))\n        acc))))","problem":39,"user":"531792d9e4b08068f379ed5e"},{"code":"(fn [n m] (loop [l n e m ee '() i 1 nn (* (min (count n) (count m)) 2)]                                                                                 \n  (if (= 0 nn) (reverse ee) (if (= 0 i) (recur l (rest e) (conj ee (first e)) 1 (dec nn)) (recur (rest l) e (conj ee (first l)) 0 (dec nn))))))","problem":39,"user":"4fe97adde4b0547ebccb245e"},{"problem":39,"code":"(fn [coll other]\n  (loop [coll coll\n         other other\n         acc []]\n    (if (or (= (count coll) 0) (= (count other) 0))\n      acc\n      (recur (rest coll) (rest other) (conj acc (first coll) (first other))))))","user":"5512aca6e4b055c2f668d4b4"},{"problem":39,"code":"(fn my-interleave\n  ([a b] (my-interleave a b ()))\n  ([a b accumulate]\n   (if \n     (or (empty? a) (empty? b))\n     (reverse accumulate)\n     (recur (rest a)\n              (rest b)\n              (conj accumulate (first a) (first b))))))","user":"54af6fb0e4b09f271ff37d08"},{"problem":39,"code":"(fn [right-col left-col]\n    (loop [[r-head & r-tail] right-col\n           [l-head & l-tail] left-col\n           res []]\n      (if (or (nil? r-head)\n              (nil? l-head))\n        res\n        (recur r-tail l-tail (conj res r-head l-head)))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":39,"code":"(fn [& colls] (apply mapcat #(identity %&) colls))","user":"4f5599dfe4b0a7574ea71806"},{"problem":39,"code":"(fn [coll3 coll1 coll2 ]\n   (if (empty? coll1)\n     coll3\n     (if(empty? coll2)\n       coll3\n       (recur (concat coll3 (list (first coll1) (first coll2))) (rest coll1) (rest coll2))))) ()","user":"582290b5e4b04b46fc4b0fa0"},{"problem":39,"code":"(fn interleaver [a b]\n   (let [x (seq a)\n         y (seq b)]\n     (if (and x y) (cons (first x) (cons  (first y) (interleaver (rest x) (rest y)))))))","user":"55c1eb52e4b0e31453f64970"},{"problem":39,"code":"(fn my-interleave\n  ([result coll-1 coll-2]\n   (if (or (empty? coll-1) (empty? coll-2))\n     result\n     (let [[first-1 & rest-1] coll-1\n           [first-2 & rest-2] coll-2]\n       (my-interleave (conj result first-1 first-2) rest-1 rest-2))))\n  ([coll-1 coll-2]\n   (my-interleave [] coll-1 coll-2)))","user":"56822f37e4b0945ebc182a8d"},{"problem":39,"code":"(fn [& colls]\n  (for [x (range (apply min (map count colls)))\n        coll colls]\n    (nth coll x)))","user":"55d3780ee4b0e31453f64a66"},{"code":"(fn m [a b]\n  (if (or (empty? a) (empty? b)) nil\n    (cons (first a) (cons (first b) (m (rest a) (rest b))))))","problem":39,"user":"4e6e6630535d5021c1a89609"},{"code":"#(loop [a %\n        b %2\n       \tr []]\n   (if (and a b)\n     (recur (next a) (next b) (conj r (first a) (first b)))\n     r))","problem":39,"user":"4ecc1d85535d23f0362276f8"},{"problem":39,"code":"(fn my-interleave\n  [& seqs]\n  \t(letfn [(take-sequentially\n              [& seqs]\n                (let [[[next-element & rest-first-seq] & rest-seqs] seqs\n                      next-seqs (if (empty? rest-first-seq)\n                                  rest-seqs\n                                  (into (list rest-first-seq) rest-seqs))]\n                  (if-not (nil? next-element)\n                    (cons next-element (lazy-seq (apply take-sequentially next-seqs)))\n                    '())))]\n      (let [smallest-seq-size (reduce min (map count seqs))\n            truncated-seqs (map (partial take smallest-seq-size) seqs)]\n        (into [] (apply take-sequentially truncated-seqs)))))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"(fn [x y] (loop [a x b y c []]\n             (if (or (empty? a) (empty? b))\n               (identity c)\n               (recur (rest a) (rest b) (conj (conj c (first a)) (first b)))\n                      )))","problem":39,"user":"52166e50e4b0bf4bffd29cc6"},{"code":"#(loop [x '() y %1 z %2] \n  (if \n     (or (empty? y) (empty? z))\n      (reverse x)\n      (recur (conj x (first y) (first z)) (rest y) (rest z))\n    )  \n)","problem":39,"user":"4ddc56e1535d02782fcbea04"},{"problem":39,"code":"(fn f [x y]\n  (if (or (empty? x) (empty? y))\n    ()\n    (concat (list (first x) (first y)) (f (rest x) (rest y)))))","user":"56532ff4e4b0f9d632dd846e"},{"problem":39,"code":"(fn leave [l1 l2]\n  (apply concat (map #(vector %1 %2) l1 l2)))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn il [s1 s2]\n  (apply concat (map vector s1 s2)))","problem":39,"user":"4f50cadce4b03ad3f0c10d0f"},{"problem":39,"code":"(fn [s1 s2] (flatten (into () (zipmap s1 s2))))","user":"59f15e20e4b0966464fe6a5a"},{"problem":39,"code":"(fn f [l s]\n  (cond\n   \t\t(or (empty? l) (empty? s)) []\n   \t\t:else (cons (first l) (cons (first s) (f (rest l) (rest s))))\n   ))","user":"56df6351e4b0ca2494a095f3"},{"problem":39,"code":"(fn [l1 l2]\n(reduce #(conj %1 (first %2) (last %2)) [] (map vector l1 l2))\n)","user":"583667c7e4b089d5ab817cfb"},{"code":"#(loop [a %1 b %2 res []]\n  (if (or (empty? a) (empty? b))\n    res\n    (recur (rest a) (rest b)\n        (conj (conj res (first a)) (first b)))))","problem":39,"user":"4e6f1b7a535d5021c1a89618"},{"problem":39,"code":"(fn [x y]\n     (mapcat list x y))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":39,"code":"(fn intlv\n  ([x y] (intlv x y (empty x)))\n  ([x y reslt] (if (or (empty? x) (empty? y))\n                 reslt\n                 (intlv (rest x) (rest y) (conj reslt (first x) (first y)))\n                 )\n   )\n  )","user":"54ab46fee4b09f271ff37cc3"},{"code":"(fn [ls1 ls2]\n  (loop [result [] ls1 ls1 ls2 ls2]\n    (if (or (empty? ls1) (empty? ls2)) result\n        (recur (conj result (first ls1) (first ls2))\n               (rest ls1)\n               (rest ls2)))))","problem":39,"user":"504db141e4b021508a333965"},{"code":"(fn [arr1 arr2] (flatten (map (fn [x y] [x y]) arr1 arr2)))","problem":39,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn my-interleave [[x & xs] [y & ys]]\n   (if (or (nil? x) (nil? y)) ()\n     `(~x ~y ~@(my-interleave xs ys))))","problem":39,"user":"4fe8d862e4b0547ebccb2428"},{"problem":39,"code":"(fn [a b] (loop [answer [] a a b b]\n            (if (= (min (count a) (count b)) 0)\n              answer\n              (recur (into answer (vector (first a) (first b))) (drop 1 a) (drop 1 b) ) \n              )\n              )\n                    )","user":"542baf7ce4b0dad94371f291"},{"code":"#(loop [seq1 %1, seq2 %2, res '()]\n  (if (or (empty? seq1) (empty? seq2)) (reverse res)\n  (recur (rest seq1) (rest seq2) \n  (cons (first seq2) (cons (first seq1) res)))))","problem":39,"user":"4eabb245535d7eef30807319"},{"code":"(letfn [(foo [coll1 coll2]\n          (let [x (first coll1)\n                y (first coll2)]\n            (when (and x y)\n              (concat [x y] (foo (rest coll1) (rest coll2))))))]\n  foo)","problem":39,"user":"4f27dd9ce4b0d6649770a00e"},{"problem":39,"code":"(fn get-interleave [[first-ele & rest-ele] [second-ele & rest-eles]]\n  (let [part-result (list first-ele second-ele)]\n    (if (or (empty? rest-ele) (empty? rest-eles))\n      part-result\n      (concat part-result (get-interleave rest-ele rest-eles)))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":39,"code":"(fn intrlve [c1 c2]\n  (let [step\n        (fn [c1 c2]\n          (when-let [s1 (seq c1)]\n            (when-let [s2 (seq c2)]\n              (concat (list (first s1) (first s2)) (intrlve (rest s1) (rest s2))))))]\n    (lazy-seq (step c1 c2))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [a b]\n  (loop [a a b b ret []]\n    (if (or (empty? a) (empty? b))\n      ret\n      (recur (rest a) (rest b) (concat ret [(first a) (first b)])))))","problem":39,"user":"4fb4f42ae4b081705acca2b4"},{"problem":39,"code":"#(loop \n  [in1 %1\n   in2 %2\n   out []]\n  (if (or (empty? in1) (empty? in2))\n    out\n    (recur (rest in1)\n           (rest in2)\n           (conj out (first in1) (first in2))\n           )\n    )\n  )","user":"57c33eeae4b05aa3c4741cbc"},{"code":"(fn in [a b] (if (or (empty? a) (empty? b)) () (conj (in (rest a) (rest b)) (first b) (first a))))","problem":39,"user":"4fcebce4e4b03432b189f404"},{"problem":39,"code":"#(flatten (for [i (range (min (count %1) (count %2)))] (conj [] (nth %1 i) (nth %2 i) )))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn myinterleave\n  ([c1 c2]\n      (when (every? not-empty [c1 c2])\n        (cons (first c1) (cons (first c2) \n                               (myinterleave (rest c1) (rest c2)))))))","problem":39,"user":"504f44cfe4b0a02f9cffde65"},{"code":"(fn leave[as bs]\n  (if (or (empty? as) (empty? bs))\n    []\n    (concat [(first as) (first bs)] (leave (rest as) (rest bs)))))","problem":39,"user":"52713288e4b03e8d9a4a73e7"},{"problem":39,"code":"#_(fn [& args] (apply concat (apply (partial map vector) args)))\n\n(comp (partial apply concat) (partial map vector))","user":"58ebd258e4b056aecfd47d4b"},{"code":"#(loop [a %1 b %2 acc []]\r\n    (if (or (empty? a) (empty? b))\r\n      acc\r\n    (recur (rest a) (rest b) (concat acc (list (first a)) (list (first b))))))","problem":39,"user":"4e5a3891535d8a8b8723a2aa"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (loop [a          a\n         b          b\n         element1   (first a)\n         element2   (first b)\n         result ()]\n    (if (or (empty? a) (empty? b))\n      (reverse result)\n      (recur (rest a)\n             (rest b)\n             (first (rest a))\n             (first (rest b))\n             (cons element2 (cons element1 result))))))","user":"59dd387ae4b0a0ac046f2501"},{"problem":39,"code":"(fn [xs ys]\n  ((fn [xs ys zs]\n     (if\n       (or (empty? xs)\n           (empty? ys))\n       \n       (reverse zs)\n       \n       (recur\n         (rest xs)\n         (rest ys)\n         (conj (conj zs (first xs)) (first ys))))) xs ys '()))","user":"5e394c33e4b01d43a70e8dd1"},{"problem":39,"code":"(fn [xs ys]\n   ((fn [xs ys res]\n      (let [x (first xs)\n            y (first ys)]\n        (if (and x y)\n          (recur (rest xs) (rest ys) (conj res x y))\n          (reverse res))))\n    xs ys (list)))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":39,"code":"(fn interleave-collections [c1 c2] (mapcat list c1 c2))","user":"5654e024e4b0f9d632dd848d"},{"problem":39,"code":"(fn [s1 s2]\n  (let \n    [l (min (count s1) (count s2))\n     crd (range 0 l)]\n    (reduce #(concat %1 (list (nth s1 %2) (nth s2 %2))) '() crd)))","user":"58b26da4e4b0ebc645576d0a"},{"code":"(fn inter [x y]\n      (reverse (loop [x x y y l nil]\n\t       (if (or (empty? x) (empty? y)) l (recur (rest x) (rest y) (conj l (first x) (first y)))))))","problem":39,"user":"4f16213f535d64f603146449"},{"problem":39,"code":"#(loop[result nil a %1 b %2]\n   (if (or (empty? a) (empty? b)) (reverse result)\n     (recur (cons (first b) (cons (first a) result)) (rest a) (rest b))))      \n\n\n\n;#(loop[result nil a %1 b %2]\n;   (if (or (empty? a) (empty? b)) (if (and (empty? a) (empty? b)) (reverse result)\n;                                    (if (empty? a) (recur (cons (first b) result ) a (rest b))\n;                                      (recur (cons (first a) result ) (rest a) b)))\n;   (recur (cons (first b) (cons (first a) result)) (rest a) (rest b))))      \n\n;(fn [a b]\n;  (mapcat #(conj [] %1 %2) a b))","user":"59c77511e4b0a024fb6ae545"},{"problem":39,"code":"(fn [a b]\n  (loop [a a\n         b b\n         result []]\n    (if (or (empty? a) (empty? b)) \n        result\n        (recur (rest a)\n               (rest b) \n               (conj result (first a) (first b))))))","user":"52fd35eee4b047fd55837029"},{"code":"(fn inlve [left right]\n  (if (and (not-empty left) (not-empty right))\n    (conj (inlve (rest left) (rest right)) (first right) (first left))\n    '() ))","problem":39,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn [x y] (loop [x1 x, y1 y, acc []]\n  (if (or (empty? x1) (empty? y1))\n    acc\n    (recur (rest x1) (rest y1) (concat acc [(first x1) (first y1)])))))","problem":39,"user":"4f34eb87e4b0e243712b1eba"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (flatten (map #(list %1 %2) s1 s2)))","user":"58976bfde4b00487982d52bc"},{"problem":39,"code":"(fn myinterleave[xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (concat [(first xs) (first ys)] (myinterleave (rest xs) (rest ys)))))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":39,"code":"(fn zip [a b]\n  (letfn [(iter [a b]\n            (let [[x & xs] a\n                  [y & ys] b]\n              (cons x (cons y (lazy-seq (iter xs ys))))))]\n    (take (* 2 (min (count a) (count b))) (iter a b)))\n  )","user":"595d0897e4b066ee0a44b00f"},{"code":"#(loop [a %1, b %2, result []]\n   (if (or (empty? a) (empty? b))\n     result\n     (recur (rest a) (rest b) (conj result (first a) (first b)))))","problem":39,"user":"5136f659e4b04059df19f2fd"},{"problem":39,"code":"(fn [z x y]\n  (if (or (empty? x) (empty? y))\n    z\n    (recur (concat z (take 1 x) (take 1 y))\n           (rest x) ;; return tail of x\n           (rest y)))) []","user":"57a1478ae4b0c3d858beb8e5"},{"code":"(fn [x y] (flatten (reverse (seq (zipmap x y)))))","problem":39,"user":"4ef0a39b535dced4c769f20c"},{"code":"#(flatten (into () (zipmap %1 %2)))","problem":39,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":39,"code":"(fn my-interleave\n  [sq1 sq2]\n  (if (or (empty? sq1) (empty? sq2))\n    []\n    (concat [(first sq1) (first sq2)] (my-interleave (rest sq1) (rest sq2)))))","user":"5ffee617e4b074f607df6605"},{"problem":39,"code":"(fn il \n  ([a b] (il a b []))\n  ([a b ret]     \n    (let [[fa & ra] a\n          [fb & rb] b]\n      (if (or (nil? fa) (nil? fb))\n        ret\n        (il ra rb (conj ret fa fb))))))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn [s1 s2]\n  (loop [r1 s1 r2 s2 v []]\n    (cond\n     (empty? r1) v\n     (empty? r2) v\n     :default (recur (rest r1) (rest r2) (conj v (first r1) (first r2))))))","problem":39,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":39,"code":"(fn interleave-two-seqs\n  [x1 x2]\n  (cond\n   (or (empty? x1) (empty? x2)) '()\n   :else (conj (interleave-two-seqs (rest x1) (rest x2)) (first x2) (first x1))))","user":"5cf938a5e4b0b71b1d808a90"},{"code":"(fn tt [x y]\n  (if (not (or (empty? x) (empty? y)))\n    (conj\n      (tt (rest x )( rest y))\n      (first y)\n      (first x))))","problem":39,"user":"52a04f0ee4b04e0c58e87bc1"},{"code":"(fn my-interleave [list-x list-y]\n   (if (or (empty? list-x)\n           (empty? list-y))\n      '()\n      (concat (list \n                (first list-x)\n                (first list-y))\n              (my-interleave\n                (rest list-x)\n                (rest list-y)))))","problem":39,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [s1 s2]\n  (flatten (map #(sequence [%1 %2]) s1 s2)))","problem":39,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn [s1 s2] (flatten (map #(list %1 %2) s1 s2)))","problem":39,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [& x] (apply concat (apply map (fn [& xs] xs) x)))","problem":39,"user":"4fa5406fe4b081705acca1ac"},{"code":"(let [inter\n      (fn [x y result]\n        (if (or (nil? x) (nil? y))\n          result\n          (recur (next x) (next y) (conj (conj result (first x)) (first y)))\n        )\n      )]\n  (fn [a b] (inter a b []))\n)","problem":39,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [& more]\n  (loop [m more out []]\n    (if (some empty? (map rest m))\n      (flatten (conj out (map first m)))\n      (recur (map rest m) (conj out (map first m))))))","problem":39,"user":"4e955b95535dbda64a6f6b33"},{"problem":39,"code":"#(loop [list1 %1 list2 %2 result ()]\n   (if (or (empty? list1) (empty? list2))\n     (reverse result)\n     (recur (rest list1) (rest list2) (conj result (first list1) (first list2)))))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn intl [s1 s2]\n  (loop [s nil, s1 s1, s2 s2]\n    (if (or (empty? s1) (empty? s2))\n      (reverse s)\n      (recur (conj s (first s1) (first s2))\n             (rest s1)\n             (rest s2)))))","problem":39,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn [c1 c2]\n  (flatten (map #(vec [%1 %2]) c1 c2)))","problem":39,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [xs ys]\n  (mapcat (fn [x y]\n            [x y])\n          xs ys))","problem":39,"user":"539c20a4e4b0b51d73faaf25"},{"problem":39,"code":"(fn [c1 c2]\n     (loop [coll [] c1 c1 c2 c2]\n       (if (or (empty? c1) (empty? c2))\n         coll\n         (recur (conj coll (first c1) (first c2)) (rest c1) (rest c2)))))","user":"5971a017e4b01722bebd4c75"},{"code":"(fn put-together [[f & fmore] [s & smore]]\n  (if-not (or (empty? fmore) (empty? smore))\n    (concat (list f s) (put-together fmore smore))\n    (list f s)))","problem":39,"user":"52bafc88e4b07a9af57922dc"},{"code":"(fn f [x y]\r\n  (loop [x x y y acc '()]\r\n    (if (or (nil? x) (nil? y))\r\n      acc\r\n      (recur (next x)\r\n             (next y)\r\n             (concat acc (list (first x) (first y)))))))","problem":39,"user":"4eaed3a7535d7eef30807328"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [o1 c1\n         o2 c2\n         inter []]\n    (if (and o1 o2)\n      (recur (next o1) (next o2) (concat inter [(first o1) (first o2)]))\n      inter)))","user":"523578efe4b0a643f2dcb74c"},{"code":"#(flatten (map list % %2))","problem":39,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":39,"code":"(fn [x y]\n(let [nlst (take (count x) (iterate inc 0))]\n  (reduce\n    (fn [out part]\n      (if (get y part)\n      (conj (conj out (nth x part)) (nth y part))\n      out))\n    []\n    nlst)\n  ))","user":"5f3a8493e4b004f08c61c527"},{"problem":39,"code":"(fn [seq1 seq2]\r\n  (apply concat (map list seq1 seq2)))","user":"555bd27ae4b0b056612e2244"},{"problem":39,"code":"(fn [x,y] (let [c (if (> (count x) (count y)) (count y) (count x))] (loop [n 0, acc []] (if (= n c) acc (recur (inc n) (conj (conj acc (nth x n)) (nth y n)))))))","user":"56cad309e4b0ea9b8538f720"},{"problem":39,"code":"(fn myInterleave\n  [lst1\n   lst2]\n  (loop [lst1   lst1\n         lst2   lst2\n         result ()]\n    (if (empty? lst1)\n      result\n      (if (empty? lst2)\n        result\n        (recur (rest lst1)\n               (rest lst2)\n               (concat result (list (first lst1) (first lst2))))))))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn [first second]\n  (loop [[f1 & l1] first\n         [f2 & l2] second\n         result []]\n      (if (or (nil? f1) (nil? f2))\n        result\n        (do\n          (recur l1 \n                 l2 \n                 (into (into result (vector f1)) \n                       (vector f2)))))))","problem":39,"user":"535d21ade4b04ce2eb3ed2bb"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [result []\n         l1 list1\n         l2 list2]\n    (cond\n     (empty? l1) (reverse result)\n     (empty? l2) (reverse result)\n     :else (recur\n            (cons (first l2) (cons (first l1) result))\n            (rest l1)\n            (rest l2)))))","user":"548f339ee4b0e286459a1233"},{"problem":39,"code":"(fn [lst1 lst2] (flatten (map (fn [x y] [x y]) lst1 lst2)))","user":"5a2e80fde4b09cafd31c7f7d"},{"problem":39,"code":"(fn f [[a & ar] [b & br]] (if (or (nil? br) (nil? ar)) (seq [a b]) (conj (f ar br)\n b a)) )","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn il [s1 s2]\r\n  (let [e1 (first s1) e2 (first s2)]\r\n    (when (and e1 e2)\r\n      (cons e1 (cons e2 (il (rest s1) (rest s2)))))))","problem":39,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":39,"code":"(fn [a b] \n  (flatten (map #(seq [%1 %2]) a b))\n  )","user":"5466199ce4b01be26fd746e2"},{"problem":39,"code":"(fn il [a b]\n  (if (or (empty? a) (empty? b)) nil\n    (cons (first a) (cons (first b) (il (rest a) (rest b))))))","user":"54c8ac49e4b045293a27f64e"},{"code":"(fn [l r]\n    (loop [acc () ll l rr r]\n      (if (or (empty? ll) (empty? rr))\n        (reverse acc)\n        (recur\n          (concat (map first [rr ll]) acc)\n          (rest ll)\n          (rest rr)))))","problem":39,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn i [a b]\n  (if (or (empty? a) (empty? b))\n      '()\n      (concat \n        (conj '() (first b) (first a)) \n        (i (rest a) (rest b)))))","problem":39,"user":"4f280840e4b0d6649770a010"},{"code":"(fn intlv [S1 S2]\n  (let [[x & xs] S1,[y & ys] S2]\n    (cond\n      (not (and S1 S2)) '()\n      :else (concat (list x) (list y) (intlv xs ys)))))","problem":39,"user":"4fda016ae4b05e33b9224f42"},{"problem":39,"code":"(fn [a b]\n  (loop [s1 a s2 b ans nil]\n    (if (or (empty? s1) (empty? s2))\n      (reverse ans)\n      (recur (rest s1) (rest s2) (conj ans (first s1) (first s2))))))","user":"5a962c09e4b0d174b936c765"},{"problem":39,"code":"(fn [xx yy] (reduce (fn [acc [x y]] (conj (conj acc x) y)) [] (map (fn [x y] [x y]) xx yy)))","user":"5679a4d0e4b05957ce8c618d"},{"problem":39,"code":"(fn my-interleave [[x & xs] [y & ys]]\n  (lazy-seq\n    (cond\n      (or (empty? xs) (empty? ys)) (list x y)\n      :else                        (cons x (cons y (my-interleave xs ys)))\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [xs ys]\n  (loop [xs xs, ys ys, acc []]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur (rest xs) (rest ys) (conj acc (first xs) (first ys)))\n    )\n  )\n)","problem":39,"user":"50e4ff72e4b049a987753897"},{"problem":39,"code":"(fn [x1 x2]\n  (loop [xx1 x1 xx2 x2 y []]\n    (if (or (empty? xx1) (empty? xx2)) y \n    (recur (rest xx1) (rest xx2) (into y [(first xx1) (first xx2)])))\n    ))","user":"579e75fbe4b05b1deef9ae29"},{"code":"(fn [col1 col2] (mapcat #(identity [%1 %2]) col1 col2))","problem":39,"user":"4e79ff2a535db169f9c796a9"},{"code":";(fn [xs ys]\n;  (let [cnt (apply min (map count [xs ys]))]\n;    (loop [pos 0\n;           acc '()]\n;      (if (= pos cnt)\n;        acc\n;        (let [x (nth xs pos)\n;              y (nth ys pos)]\n;        (recur (inc pos) (concat acc (list x y))))))))\n\n#(mapcat list %1 %2)","problem":39,"user":"5312cdaae4b08068f379ed03"},{"code":"#(flatten(map list %1 %2))","problem":39,"user":"4f031eac535dcb61093f6a67"},{"problem":39,"code":"(fn [c1 c2] (mapcat identity (map #(list %1 %2) c1 c2)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":39,"code":"(fn test\n  ([x y] (test x y '()))\n  ([x y res]\n   (if (or (empty? x) (empty? y)) (reverse res)\n       (test (rest x) (rest y) (cons (first y)\n                                           (cons (first x) res))))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":39,"code":"(fn [xs ys]\n  (loop [x xs y ys r []]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (conj r (first x) (first y))))))","user":"5fa5b72ee4b0fa27300f3dca"},{"problem":39,"code":"(fn my-leaf [res a b] (if\n                        (and (not-empty a) (not-empty b))\n                        \t(my-leaf (conj (conj res (first a)) (first b)) (rest a) (rest b))\n                        \tres)) []","user":"55df5feae4b050e68259b3f1"},{"code":"(fn [s t] (apply concat (map vector s t)))","problem":39,"user":"4f2b0951e4b0d6649770a045"},{"code":"#(reduce concat (map list % %2))","problem":39,"user":"53034738e4b0d8b024fd373e"},{"problem":39,"code":"#_\n(fn [coll1 coll2]\n    (flatten (map list coll1 coll2)))\n\n(fn [coll1 coll2]\n    (mapcat list coll1 coll2))","user":"529e3258e4b04e0c58e87b8d"},{"problem":39,"code":"(fn my-interleave [c1 c2]\n  (mapcat vector c1 c2))","user":"608256d7e4b0736b099e42da"},{"problem":39,"code":"(fn ileave [a1 a2] (\n                    reduce (fn [agg x] (\n                                        conj (\n                                              conj \n                                              agg \n                                              (nth a1 x)\n                                             ) \n                                        (nth a2 x)\n                                        )\n                            )\n                    [] (range (min (count a1) (count a2)))\n                   )\n)","user":"550cbb3be4b06e50f9beb155"},{"problem":39,"code":"(fn [s1 s2] (mapcat (fn [e1 e2] [e1 e2]) s1 s2))","user":"5abe2fc2e4b073f17744271e"},{"problem":39,"code":"(fn [s1 s2] (mapcat #(identity [%1 %2]) s1 s2))","user":"56f51879e4b046a417f92069"},{"code":"(fn leave [m n]\n  (lazy-seq\n   \t(cons (first m)\n          (cons (first n)\n                (if (and (seq (rest m)) (seq (rest n)))\n                  (leave (rest m) (rest n))\n                  nil)\n            )\n            \n          )))","problem":39,"user":"4ee85476535d93acb0a6687c"},{"code":"(fn [l1 l2]\n  (flatten \n    (map (fn [x y] [x y]) l1 l2)))","problem":39,"user":"4edd9d79535d10e5ff6f532b"},{"problem":39,"code":"(fn [xs ys]\n  (letfn [(il [xs ys]\n              (if (or (empty? xs) (empty? ys))\n                []\n                (conj (conj (il (rest xs) (rest ys)) (first ys)) (first xs))))]\n  \t\t (reverse (il xs ys))))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":39,"code":"(fn f \n  [x y]\n  (flatten (map #(identity [%1  %2]) x y)))","user":"53d64811e4b0e771c3025456"},{"problem":39,"code":"(fn interleave* [x y]\n      (loop [a x\n             b y\n             c []]\n             (let [d (first a)\n                   e (first b)]\n                  (if (or (nil? d)\n                          (nil? e))\n                      c\n                      (recur (nthrest a 1)\n                             (nthrest b 1)\n                             (concat c [d e]))))))","user":"5ec66326e4b08d0ec38692d5"},{"code":"(fn [a b] \n  (loop [x a y b lili []]\n    (if (or (empty? x) (empty? y))\n      lili\n      (recur (rest x) (rest y) (conj lili (first x) (first y))))))","problem":39,"user":"4f8db862e4b02e764a0a51b2"},{"problem":39,"code":"(fn twoseq\n  [s1 s2]\n  ( mapcat list s1 s2) )","user":"52c70127e4b0c2d177d6211a"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [[x1 & xs1] s1 [x2 & xs2] s2 acc []]\n    (if (and x1 x2)\n      (recur xs1 xs2 (concat acc [x1 x2]))\n      acc)))","user":"4e7be091535db169f9c796ba"},{"code":"(fn [x t]\n  (flatten (map list x t)))","problem":39,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"mapcat #( identity %& )","problem":39,"user":"4f725466e4b07046d9f4f030"},{"problem":39,"code":"(fn [l1 l2] \n  (apply concat (map #(list %1 %2) l1 l2))\n  )","user":"5713e307e4b07c98581c3aaf"},{"problem":39,"code":"#(mapcat vector %1 %2)\n;(fn [x y] (flatten (let [len (min (count x) (count y))] (for [i (range len)] [(nth x i) (nth y i)]))))","user":"5cfee28de4b0cc9c91588185"},{"problem":39,"code":"(fn asdf [a b]\n  (apply concat (map #(list %1 %2) a b)))","user":"56fc0601e4b07572ad1a88db"},{"code":"#(flatten (apply (partial map vector) %&))","problem":39,"user":"4fe9ea87e4b0547ebccb2476"},{"problem":39,"code":"(fn [c1 c2] (apply concat (map #(vector %1 %2) c1 c2)))","user":"56cddf9de4b0ea9b8538f753"},{"problem":39,"code":"(fn [x y] (reduce concat(map list x y)))","user":"57752a2de4b0979f89651613"},{"problem":39,"code":"(fn [L1 L2]\n  (loop\n    [list1 L1\n     list2 L2\n     acc []]\n    (if (or (empty? list1) (empty? list2))\n      acc\n      (recur (rest list1) (rest list2) (concat acc [(first list1) (first list2)])))))","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn [co1 co2] (flatten (map vector co1 co2)))","problem":39,"user":"52a9154ee4b0c58976d9ac3b"},{"code":"(fn [a b] (apply concat (map #(do [%1 %2]) a b)))","problem":39,"user":"4e22b78b535d04ed9115e81e"},{"problem":39,"code":"(fn new-interleave\n  [[x & xs] [y & ys]]\n  (if (and x y)\n    (concat (cons x [y]) (new-interleave xs ys))\n    []))","user":"550d9452e4b06e50f9beb15d"},{"problem":39,"code":";(fn my-interleave\n;  ([col1 col2] (my-interleave col1 col2 []))\n;  ([col1 col2 result]\n;   (if-not (and (identity (first col1)) (identity (first col2)))\n;     result\n;     (recur (rest col1) (rest col2) (conj result (first col1) (first col2))))))\n\n; my trash above works...but sigh so not clojure\nmapcat list","user":"554bced1e4b0a04f79299599"},{"problem":39,"code":"(fn [left right]\n  (loop [l  left\n         r  right\n         sq '()]\n    (if (or (empty? l) (empty? r))\n      sq\n      (recur \n       (rest l) \n       (rest r) \n       (concat sq [(first l) (first r)])))))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn [a1 b1]\n  ((fn [a b rs]\n    (if (or (empty? a) (empty? b)) rs\n      (recur (rest a) (rest b) (conj rs (first a) (first b)))\n    ))\n  a1 b1 []))","problem":39,"user":"4f3242bae4b0d6649770a08f"},{"problem":39,"code":";(fn [xs ys] (flatten (map list xs ys)))\nmapcat list","user":"5e62444fe4b0fd0acd158694"},{"problem":39,"code":"(fn il [acc x y]\n\n  (if (or (empty? x) (empty? y))  acc\n  (il (conj acc (first x) (first y)) (rest x) (rest y))\n  ))[]","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"(fn this [w z]\n;(println \"(this\" w z \")\")\n;(let [ret\n    (\n       (fn clr [p m]\n;         (println \"li: \" li)\n;         (println \"    li: \" li \", x: \" x)\n;        (println \"p:\" p \", m:\" m)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n         (if\n           (and (not-empty p) (not-empty m))\n           (cons (first p) (cons (first m) (clr (rest p) (rest m))))\n         '()\n         )\n       )\n       w\n       z\n    )\n;] (println \"    ret: \" ret) ret)\n  )","problem":39,"user":"501819efe4b02f523d7cc5eb"},{"problem":39,"code":"(fn my-interleave\n  \t[seq1 seq2]\n  \t(loop [result [] s1 seq1 s2 seq2]\n    \t(if (or (empty? s1) (empty? s2))\n         \tresult\n         \t(recur (conj (conj result (first s1)) (first s2)) (rest s1) (rest s2)))))","user":"562eeba2e4b0ab312c17ebc1"},{"problem":39,"code":"#(loop [list1 %1 list2 %2 result []]\n   (if (or (empty? list1) (empty? list2))\n     result\n     (recur (rest list1) (rest list2) (conj (conj result (first list1)) (first list2)))\n     )\n   )","user":"5deab1b2e4b0986d99407f9f"},{"code":"#(loop [a % b %2 c []]\n  (if (or (empty? a) (empty? b)) c\n    (recur (rest a) (rest b)\n      (conj c (first a) (first b)))))","problem":39,"user":"4ed152d5535d44c135fd68cc"},{"code":"(fn [x y]\r\n   (mapcat #(conj () %2 %1) x y))","problem":39,"user":"4ff07688e4b0678c553fc324"},{"problem":39,"code":"#(apply concat (apply map (fn [& x] x) %&))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn [x y] \n   (loop [ans [] a x b y]\n    (if (or (empty? a) (empty? b)) (reverse ans)\n    \t (recur (cons (first b) (cons (first a) ans)) (rest a) (rest b)))))","problem":39,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"#(flatten (map (fn[x y] (list x y)) %1 %2))","problem":39,"user":"4e6df3c9535d5021c1a895fa"},{"code":"(fn [x y] (mapcat #(vector %1 %2) x y))","problem":39,"user":"4f7b6f12e4b06e829148e1a5"},{"problem":39,"code":"(fn[sq1 sq2] (reverse (reduce into '() (map (fn[x y] (list x y) ) sq1 sq2 ))))","user":"55757e81e4b05c286339e063"},{"problem":39,"code":"(fn\n   [x y]\n   (mapcat list x y)\n   )","user":"60d45525e4b0d60f5ea6f7dc"},{"problem":39,"code":"(fn [seqA seqB] (let [nothing?? (fn [x] (or (nil? x) (and (coll? x) (empty? x))))] ((fn [result curA curB As Bs] (if (or (nothing?? curA) (nothing?? curB)) result (recur (conj result curA curB) (first As) (first Bs) (rest As) (rest Bs)))) [] (first seqA) (first seqB) (rest seqA) (rest seqB))))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":39,"code":"; #(mapcat vector %1 %2)\nmapcat #(list % %2)","user":"565487dce4b0f9d632dd8482"},{"code":"#(loop [lst %\n        lst2 %2\n        acc '()]\n  (if (or (empty? lst) (empty? lst2))\n    (reverse acc)\n    (recur (rest lst) (rest lst2) (conj acc (first lst) (first lst2)))))","problem":39,"user":"4fab0c0ae4b081705acca20d"},{"problem":39,"code":"(fn my-interl\n  [s1 s2]\n  (let [iter (fn [s1 s2 result]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (conj result (first s1) (first s2)))))]\n  (iter s1 s2 [])))","user":"55d29fb6e4b0e31453f64a59"},{"problem":39,"code":"(fn [a b]\n  (loop [a a, b b, acc []]\n  \t(if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (concat acc [(first a) (first b)])))))","user":"5a19d181e4b0ff51aa4b3207"},{"problem":39,"code":"(fn [c0 c1]\n  (loop [acc (list)\n         [c0-head & c0-tail :as c0] c0\n         [c1-head & c1-tail :as c1] c1\n         is-first-coll true]\n    (cond (or (and (not is-first-coll) (empty? c1)) (and is-first-coll (or (empty? c0) (empty? c1)))) (reverse acc)\n          is-first-coll (recur (conj acc c0-head) c0-tail c1 false)\n          :else (recur (cons c1-head acc) c0 c1-tail true))))","user":"587100d6e4b01531a375e9f0"},{"code":"(fn [x y]\n  (loop [i '() j x k y]\n    (if (or (empty? j) (empty? k))\n      i\n      (recur (concat i (list (first j) (first k))) (rest j) (rest k)))))","problem":39,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"problem":39,"code":"(fn [coll1 coll2] \n  (reduce into [] \n  \t(map \n     \t#(vector %1 %2) \n     \tcoll1 \n     \tcoll2)))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":39,"code":";; First solution\n;#(apply concat (map list %1 %2))\n\n;; Flatenning\n;#(flatten (map list %1 %2))\n\n;; mapcat\nmapcat list","user":"573118ebe4b0cd1946bd0fbd"},{"problem":39,"code":"(fn inter [c1 c2]\n  (loop [acc [] cc1 c1 cc2 c2]\n    (let [[h1 & t1] (seq cc1)\n          [h2 & t2] (seq cc2)]\n      (if (and cc1 cc2)\n        (recur (conj acc h1 h2) t1 t2)\n        acc))))","user":"4dfe5a93535d04ed9115e786"},{"problem":39,"code":"(fn t1 [x y] (loop [x x y y l []] (if (or (empty? x) (empty? y)) l (recur (rest x) (rest y) (conj l (first x) (first y))))))","user":"5c308385e4b0d62ef62d9f1c"},{"problem":39,"code":"(fn my-interleave [sq1 sq2] \n  (cond (empty? sq1) '()\n   \t\t(empty? sq2) '()\n    \ttrue (let [[f1 & r1] sq1 [f2 & r2] sq2]\n          (cons f1 (cons f2 (my-interleave r1 r2))))))","user":"504dfc75e4b078edc5f59387"},{"code":"(fn [a b]\n  (loop [x 0 result []]\n    (if (and (< x (count a)) (< x (count b)))\n      (recur (inc x) (conj result (nth a x) (nth b x)))\n      result)))","problem":39,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":39,"code":"(fn [x y]\n  (loop [a (rest x)\n         b (rest y)\n         r (list (first x) (first y))\n         ]\n    (if (or (= a '()) (= b '()))\n      r\n      (recur (rest a) (rest b) (concat r [(first a) (first b)]))\n     )\n   )\n )","user":"5e265173e4b05b4b01516175"},{"problem":39,"code":"(fn [a b] (reduce #(concat %1 %2) '() (for [i (range (min (count a) (count b)))] [(nth a i) (nth b i)])))","user":"5cbdc591e4b026601754ba00"},{"code":"(fn [s1 s2]\n   (loop [s1 s1 s2 s2 result '()]\n     (if (or (empty? s1) (empty? s2))\n       result\n       (recur (rest s1) (rest s2) (concat result (list (first s1) (first s2)))))))","problem":39,"user":"52fac708e4b047fd55836fff"},{"code":"(fn f [[a & as] [b & bs]]\n  (when (and a b)\n    (concat [a b] (f as bs))))","problem":39,"user":"5025b93ce4b0c969f0b056df"},{"code":"(fn zip [a b]\r\n  (loop [a a b b ret []]\r\n    (if (or (= 0 (* (count a) (count b) ) ) )\r\n      ret     \r\n      (recur (rest a) (rest b) (conj (conj ret (first a)) (first b)))\r\n    )    \r\n  )   \r\n)","problem":39,"user":"513caa36e4b0b86ece9f3229"},{"code":"(fn [xs ys]\n  (mapcat #(cons % (cons %2 nil)) xs ys))","problem":39,"user":"4ed9fe5f535d10e5ff6f5308"},{"problem":39,"code":"#(reduce concat (apply map list %&))","user":"52d9ba39e4b09f7907dd13af"},{"problem":39,"code":"(fn f [x y]\n  ((fn g [x y res]\n     (if (or (empty? x) (empty? y))\n       res\n       (recur (rest x)\n              (rest y)\n              (conj res (first x) (first y)))))\n   x y []))","user":"5a52f2cbe4b05d388ecb6c06"},{"problem":39,"code":"(fn inlv [xs ys]\n  (loop [a xs\n         b ys\n         output []]\n    (if (every? #(> (count %) 0) [a b])\n      (recur (rest a) (rest b) (conj output (first a) (first b)))\n      output\n      )\n    )\n  )","user":"53b685e0e4b047364c0444c7"},{"code":"(fn pinter [x y] (cond\n                      (empty? x) '()\n                      (empty? y) '()\n                      :else (conj (pinter (rest x) (rest y))  (first y) (first x))))","problem":39,"user":"4f524d11e4b03ad3f0c10d34"},{"code":"(fn [col1 col2]\n    (loop [result [] col1-rest col1 col2-rest col2]\n      (if (or (empty? col1-rest) (empty? col2-rest))\n        result\n        (recur (conj (conj result (first col1-rest)) (first col2-rest)) (rest col1-rest) (rest col2-rest)))))","problem":39,"user":"506f2f58e4b09350ab4199fa"},{"code":"(fn inter [& lists]\n  (if-not (some empty? lists)\n    (concat (map first lists)\n            (apply inter (map next lists)))\n    []))","problem":39,"user":"534bde26e4b084c2834f4a81"},{"problem":39,"code":"(fn my-interleave [l1 l2]\n   (loop [x l1 y l2 ret []]\n        (if (or (empty? x) (empty? y)) ret\n          (recur (rest x) (rest y) (conj ret (first x) (first y)))\n  )))","user":"573940e3e4b0cd1946bd106b"},{"problem":39,"code":"#(reduce concat (map (fn mypair [a b] (list a b)) %1 %2))","user":"55076bf6e4b021ccfedb96a6"},{"problem":39,"code":"(fn myinter\n  ([x y]\n   (myinter x y []))\n  ([x y out]\n   (if (or (empty? x) (empty? y))\n     out\n     (myinter (rest x) (rest y) (conj out (first x) (first y))))))","user":"54b2e881e4b09f271ff37d32"},{"problem":39,"code":"(fn [x y]\n\t((fn \n    \t[x y coll]\n        \t(if (or (empty? x)\n                    (empty? y))\n              (reverse coll)\n              (recur (rest x) (rest y) (conj coll (first x) (first y))))) x y ()))","user":"5ae4e0e3e4b0837691e92c86"},{"problem":39,"code":"(fn ilv [a b]\n  (if (or (= a '()) (= b '()))\n    '()\n    (conj (ilv (rest a) (rest b)) (first b) (first a))))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn itlv\n   ([] '())\n   ([f s] (when (and (seq f) (seq s)) (cons (first f) (cons (first s) (itlv (rest f) (rest s)))))))","problem":39,"user":"5311cd03e4b08068f379ecef"},{"problem":39,"code":"(fn double [n1, n2]\n  (if (or (empty? n1)  (empty? n2))\n    ()\n    (concat\n      (conj () (first n2) (first n1))\n      (double (rest n1) (rest n2) )\n\n      )\n    )\n  )","user":"560c404fe4b05f002753df30"},{"problem":39,"code":"; map was very useful for this because it takes in any number of collections and gives an equal number of inputs to the given function.\n;\n; this works fine: #(flatten (map list %1 %2))\n;\n; Then I saw that mapcat can also take in multiple collections and does the work of concatenating the results so there's no need for \n; flattening separate lists. \n;\n; This line in mapcat is essentially doing all work we need here:\n; https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L2682 \n\n#(mapcat list %1 %2)","user":"56092852e4b0053d1b86c7d9"},{"problem":39,"code":"#(loop [res []\n       m1 %1\n       m2 %2]\n  (if (or (empty? m1) \n          (empty? m2))\n    res\n    (recur (conj res (first m1) (first m2))\n           (rest m1)\n           (rest m2))))","user":"534bfc71e4b084c2834f4a88"},{"problem":39,"code":"(fn [a b] (flatten\n (let [x (atom [])]\n   (doseq [s (map #(vector %1 %2) a b)]\n     (swap! x conj s))\n   @x)))","user":"5dab11cde4b000c986472c45"},{"problem":39,"code":"(fn\n   [a b]\n   (mapcat \n    #(conj [] %1 %2) \n    a b))","user":"56083383e4b046a4fc0ac00a"},{"code":"(fn [& a] (apply concat (for [i (range (apply min (map count a)))]\n                 (map #(nth % i) a))))","problem":39,"user":"517ecab1e4b09104ecebe7e8"},{"code":"(fn inter [x y]\n  (if (and (> (count x) 0) (> (count y) 0))\n\t\t(concat (list (first x) (first y)) (inter (rest x) (rest y)))\n\t\tnil))","problem":39,"user":"4f566178e4b0a7574ea71820"},{"problem":39,"code":"(fn [xs ys]\n  (let [m (zipmap xs ys)]\n    (reduce (fn [a x] (if-let [y (m x)] (conj a x y) a)) [] xs)))","user":"4fc4e9b5e4b081705acca352"},{"code":"#(flatten (reverse (zipmap %1 %2)))","problem":39,"user":"4db016af838c48654951d9b9"},{"problem":39,"code":"#(loop [l1 %1 l2 %2 acc []]\n   (if (or (empty? l1) (empty? l2)) \n     acc\n     (recur (rest l1) (rest l2) (conj acc (first l1) (first l2)))))","user":"55c20bd0e4b0e31453f64972"},{"code":"(fn [l1 l2] (filter #((comp not nil?) %) (flatten (map (fn [[x1 x2]] (map (fn [[y1 y2]] ( if(= y1 x1) (list x2 y2))) (map-indexed vector l2))) (map-indexed vector l1)))))","problem":39,"user":"52265e41e4b04e78ff2e1981"},{"problem":39,"code":"(fn[n m]\n  (flatten (reverse (loop [n n m m acc '()]\n    (if (or (empty? n) (empty? m))\n      acc\n      (recur (rest n) (rest m) (cons (list (first n) (first m)) acc)))))))","user":"5cc6f982e4b0ccb06196282d"},{"problem":39,"code":"#(loop [col1 %1\n         col2 %2\n         result '()]\n       (if (or (empty? col1) (empty? col2))\n           (reverse result)\n           (recur (rest col1)\n                   (rest col2)\n                   (conj result (first col1) (first col2)))))","user":"57bf304de4b05aa3c4741c75"},{"problem":39,"code":";;#(loop [c1 %1 c2 %2 out []] (if (or (empty? c1) (empty? c2)) out (recur (rest c1) (rest c2) (conj out (first c1) (first c2))  )))\n;;(fn [c1 c2] (flatten (map #(vector %1 %2) c1 c2)))\n#(flatten (map vector %1 %2))","user":"55647a31e4b0c656e3ff1808"},{"problem":39,"code":"(fn weave [[x & xs] [y & ys]]\n  (if (every? #(not (nil? %)) [x y])\n    (concat [x y] (weave xs ys)) []))","user":"54b07c1ee4b09f271ff37d16"},{"code":"(fn f [x y] (if (or (= [] x) (= [] y)) [] (cons (first x) (cons (first y) (f (rest x) (rest y))))))","problem":39,"user":"4ea2ddf1535d7eef308072bf"},{"problem":39,"code":"(fn [x y]\n\t(reduce\n\t\tconcat\n\t\t(map (fn [a b] (list a b)) x y)\n\t)\n)","user":"598d746ae4b02b9968b84d23"},{"problem":39,"code":"(fn [xs ys]\n   (loop [xs xs\n          ys ys\n          val []]\n     (if (or (empty? xs) (empty? ys))\n       (flatten val)\n       (recur (rest xs) (rest ys) (conj val (map first [xs ys]) )))))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":39,"code":"(fn [s1 s2]\n  (mapcat vector s1 s2)\n)","user":"5c4ad616e4b0f9f7a8770e5a"},{"problem":39,"code":"(fn interleaf [x y]\n  (loop [m x c y col '()]\n      (if (or (empty? m)\n              (empty? c))\n        (reverse col)\n        (recur (rest m)\n               (rest c)\n               (cons (first c)\n                     (cons (first m) col))))))","user":"57073037e4b0b0fb43fd0689"},{"problem":39,"code":"#(mapcat identity (map vector %1 %2))","user":"5465712ee4b01be26fd746dc"},{"code":"(fn [c1 c2] \n  (mapcat #(list %1 %2) c1 c2))","problem":39,"user":"51e38568e4b0c611d6113e43"},{"problem":39,"code":"(fn [c1 c2]\n   (letfn [(fnci [col1 col2 result]\n                 (if (or (zero? (count col1)) (zero? (count col2)))\n                   result\n                     (recur (rest col1) (rest col2) (conj result (first col1) (first col2)) )))]\n     (fnci c1 c2 [])))","user":"533a399de4b0e30313ee6cb9"},{"problem":39,"code":"(fn [c1 c2] \n  (loop [c1 c1, c2 c2, res []]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur (rest c1) (rest c2) (conj res (first c1) (first c2))))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [& more]\n   (flatten \n    (for [x (range (apply min (map count more)))]\n     (map #(get % x) more))))","problem":39,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [n m]\n  (loop [nsq  n msq m acc []]\n    (if (or (empty? nsq) (empty? msq))\n      acc\n      (recur \n        (rest nsq) \n        (rest msq) \n        (conj \n          (conj acc (first nsq)) \n                    (first msq))))))","problem":39,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn [s t] (flatten (map vector s t)))","problem":39,"user":"4e7dbe0c535db169f9c796e3"},{"code":"(fn myrec\n  ([lis1 lis2] (myrec lis1 lis2 []))\n  ([lis1 lis2 acc]\n   \t(if (or (empty? lis1) (empty? lis2))\n         acc\n       \t(recur (rest lis1) (rest lis2) (conj \n                                        (conj acc (first lis1)) \n                                        (first lis2))\n        )\n     )\n   )\n  )","problem":39,"user":"53736f65e4b06d7f452d9e0f"},{"code":"(fn [s1 s2]\n  (flatten (map list s1 s2)))","problem":39,"user":"4ec9549d535d6d7199dd36fe"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b result []]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (rest a) (rest b) (conj result (first a) (first b))))))","user":"57aa4752e4b0b8559636fc6a"},{"problem":39,"code":"(fn [x y]\n    (loop [flist x\n           slist y\n           result []]\n      (if (or (empty? flist) (empty? slist))\n        (apply list result)\n        (recur (vec (rest flist)) (vec (rest slist)) (conj result (first flist) (first slist)))\n        )\n      )\n    )","user":"5b269cf3e4b063e2438bcc35"},{"problem":39,"code":"(fn fun [xFirst xSecond]\n  (loop [i 0\n       result '()]\n    (cond  \n      (< i (min (count xFirst) (count xSecond)) )\n          (recur (inc i) (apply conj result (list (get xFirst i) (get xSecond  i))))\n      :else (reverse result)\n    )\n  ) \n)","user":"5da20e73e4b000c986472be1"},{"problem":39,"code":"(fn [xs1 xs2]\n  (apply concat \n         (map list xs1 xs2)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":39,"code":"(fn [c1 c2] (loop [x c1, y c2, z []] (if (and x y) (recur (next x) (next y) (conj z (first x) (first y))) z)))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":39,"code":"(fn [xs ys]\n\t(loop [xs xs ys ys result []]\t\t\t\n\t\t(if (or (empty? xs) (empty? ys))\n\t\t\t(seq result)\n\t\t\t(recur (rest xs) (rest ys) (conj result (first xs) (first ys))))))","user":"52bba119e4b07a9af57922ea"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    nil\n    (concat\n     [(first xs) (first ys)]\n     (my-interleave (rest xs) (rest ys)))))","user":"59f7f55de4b0ca45a743a313"},{"code":"(fn [s1 s2] (mapcat #(list %1 %2) s1 s2))","problem":39,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":39,"code":"#(loop [f % s %2 res []]\n   (if (or (empty? f) (empty? s))\n     res\n     (recur (rest f) (rest s) (conj res (first f) (first s)))))","user":"5964c614e4b069c0a1a19770"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [index 0 final-seq []]\n    (if (or (> (inc index) (count seq1)) (> (inc index) (count seq2)))\n      final-seq\n      (recur (inc index) (conj final-seq (get seq1 index) (get seq2 index))))))","user":"53c92d05e4b00fb29b2212b9"},{"problem":39,"code":"(fn twoSequenceMerge [seq1 seq2]\n  \t(if (or (empty? seq1) (empty? seq2))\n      '()\n      (conj (twoSequenceMerge (rest seq1) (rest seq2)) (first seq2) (first seq1))\n    )\n  )","user":"5894b298e4b00487982d5261"},{"problem":39,"code":"#(loop [coll1 %1\n        coll2 %2\n        rcoll []]\n   (if (or (empty? coll1) (empty? coll2))\n     rcoll\n     (recur (rest coll1) (rest coll2) (concat rcoll [(first coll1) (first coll2)]))))","user":"539f3397e4b0ca733b974496"},{"code":"(fn [& seqs] (apply (partial mapcat (fn [& items] (apply list items))) seqs))","problem":39,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":39,"code":"(fn [xs ys]\n    (flatten (map vector xs ys)))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn my-inter [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (conj (my-inter (rest l1) (rest l2)) (first l2) (first l1))))","problem":39,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [x c1\n         y c2\n         res []]\n    (if (or (empty? x) (empty? y))\n      res\n      (recur\n       (next x)\n       (next y)\n       (concat res [(first x) (first y)])))))","user":"58303fc3e4b051871117c006"},{"problem":39,"code":"(fn [x y]\n  (loop [x x y y accum []]\n    (if (or (empty? x) (empty? y)) accum\n      (recur (rest x) (rest y) (conj (conj accum (first x)) (first y))))))","user":"554dff83e4b00713264bd98d"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [accum []\n        [seq1-first & seq1-rest] seq1\n        [seq2-first & seq2-rest] seq2]\n    (if (or (nil? seq1-first) (nil? seq2-first))\n      accum\n      (recur (conj \n               (conj accum seq1-first) \n               seq2-first)\n             seq1-rest seq2-rest))))","user":"599e3677e4b0871e7608b809"},{"problem":39,"code":"(fn[& arr](loop [i 0 in arr out '()]\n          (if (= i (apply min(map #(count %) arr)))\n            out\n            (recur (inc i) (map #(rest %) in) (concat out (map #(first %) in))))))","user":"5596af34e4b04c1e5c31d758"},{"problem":39,"code":"(fn my-interleave\n  [a b]\n  (cond\n    (empty? a) a\n    (empty? b) b\n    :else  (concat (concat (list (first a)) (list (first b)))\n                   (my-interleave (rest a) (rest b)))))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":39,"code":"(fn [& params]\n  (flatten (apply map list params)))","user":"5974b12be4b01722bebd4cb1"},{"code":"(fn il [a b]\n  (if (or (empty? a) (empty? b)) '()\n    (cons (first a) (cons (first b) (il (rest a) (rest b))))))","problem":39,"user":"4e356d2b535deb9a81d77f2d"},{"code":"#(reduce concat (map (fn [a b] (list a b)) % %2))","problem":39,"user":"4f067029535dcb61093f6c12"},{"code":"#(mapcat seq (reverse (zipmap %1 %2)))","problem":39,"user":"516ab8c2e4b081287f204e9e"},{"problem":39,"code":"(fn [c1 c2]\n  (let [result '()]\n    (flatten (map\n               #(if (or (nil? %1) (nil? %2))\n                  result (conj result %2 %1))\n               c1 c2))))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":39,"code":"(fn i [x y] (if (or (= x '()) (= y '())) '() (cons (first x) (cons (first y) (i (rest x) (rest y))))))","user":"55aa67eae4b0988bba2ad94c"},{"code":"#(reverse (flatten (vec (zipmap %2 %1))))","problem":39,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn this\n  [lst1 lst2]\n  (let [elt1 (first lst1)\n        elt2 (first lst2)]\n    (when (and elt1 elt2)\n      (cons elt1 (cons elt2 (this (rest lst1) (rest lst2)))))))","problem":39,"user":"4ef7a483535dced4c769f258"},{"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1\n         coll2 coll2\n         acc []]\n    (if (or (empty? coll1) (empty? coll2))\n      (seq acc)\n      (recur (next coll1) (next coll2) (concat acc [(first coll1) (first coll2)])))))","problem":39,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn [sq1 sq2] (loop [sq1 sq1 sq2 sq2 result []] (if (and (seq sq1) (seq sq2)) (recur (rest sq1) (rest sq2) (conj result (first sq1) (first sq2))) result)))","problem":39,"user":"4efd98fa535de96065cf5086"},{"problem":39,"code":"(fn [one two] (flatten (map (fn [x y] [x y]) one two)))","user":"58f1971ce4b08e1cf3471cee"},{"problem":39,"code":"(fn\n\t[seq1 seq2]\n\t(flatten (map #(list %1 %2) seq1 seq2)))","user":"53d6b266e4b0e771c3025459"},{"code":"#(loop [s1 %1 s2 %2 result []]\n  (if (or (= 0 (count s1)) (= 0 (count s2)))\n    result\n    (recur (rest s1) (rest s2)\n      (conj (conj result (first s1)) (first s2))\n    )\n))","problem":39,"user":"5070e31ee4b0e3170b5a8678"},{"code":"mapcat #(seq [%1 %2])","problem":39,"user":"4f03e7b3535dcb61093f6b7c"},{"code":"(fn my-interleave [xs ys]\n  (let [xs-seq (seq xs) ys-seq (seq ys)]\n  (when (and xs-seq ys-seq)\n     (conj (my-interleave (rest xs-seq) (rest ys-seq))\n           (first ys-seq)\n           (first xs-seq)))))","problem":39,"user":"508f97c0e4b0ea685a20f768"},{"problem":39,"code":"(fn [col-one col-two] (loop [a col-one\n                             b col-two\n                             both '[]]\n                        (if (or (empty? a) (empty? b)) (reverse (into () both))\n                          (recur (rest a)\n                                 (rest b)\n                                 (conj both (first a) (first b))))))","user":"576186a5e4b0994c1922fb8e"},{"problem":39,"code":"(fn [sec1, sec2] \n  (flatten (map list sec1 sec2))\n)","user":"54b66089e4b05787c3b163ba"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         acc nil]\n    (if (or (empty? xs) (empty? ys))\n      (reverse acc)\n      (recur (rest xs)\n             (rest ys)\n             (cons (first ys) (cons (first xs) acc))))))","user":"5b673832e4b0c6492753e760"},{"problem":39,"code":"(fn [col1 col2]\n\t(flatten (map #(cons (list %1 %2) [])  col1 col2 )))","user":"5af4446de4b0cc2b61a3bc93"},{"problem":39,"code":"(fn my-interleave\n  ([] ())\n  ([coll1] (lazy-seq coll1))\n  ([coll1 coll2]\n   (lazy-seq\n    (let [seq1 (seq coll1) seq2 (seq coll2)]\n      (when (and seq1 seq2)\n        (cons (first seq1) (cons (first seq2) (my-interleave (rest seq1) (rest seq2)))))))))","user":"4fb85651e4b081705acca2d7"},{"problem":39,"code":"(fn interl [m1 m2] (mapcat vector m1 m2))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":39,"code":"(fn myi [[f1 & r1] [f2 & r2]]\n   (if (and f1 f2)\n       (concat (list f1 f2) \n          (myi r1 r2))\n       nil\n    ))","user":"586b6d51e4b01531a375e958"},{"code":"(fn [c1 c2] (flatten (map #(vector % %2) c1 c2)))","problem":39,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn interleaven [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (into [(first a) (first b)]\n      (interleaven (rest a) (rest b)))))","problem":39,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":39,"code":"(fn [ls11 ls22]\n  (loop [ret-list []\n         ls1 ls11\n         ls2 ls22]\n    (if (or (empty? ls1) (empty? ls2))\n      ret-list\n      (recur (apply conj ret-list (list (first ls1) (first ls2)))\n             (rest ls1)\n             (rest ls2)))))","user":"53d87449e4b0e771c302546d"},{"problem":39,"code":"(fn [x y] (flatten(reverse(dissoc(zipmap x y)))))","user":"566a3a26e4b0a866af689699"},{"code":"(fn d [a b]\n\t(let [s1 (seq a) s2 (seq b)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2) (d (rest s1) (rest s2)))))))","problem":39,"user":"531dfaf5e4b08068f379edb3"},{"code":"(fn myinterleave [v1 v2]\n  (if (or (empty? v1) (empty? v2))\n    []\n    (flatten [(first v1) (first v2) (myinterleave (rest v1) (rest v2))]\n      )))","problem":39,"user":"4fcad14ce4b0ee37620e1856"},{"problem":39,"code":"(fn [l r]\n  (let [c (min (count l) (count r))]\n  (loop [res [] lv (take c l) rv (take c r)]\n    (if (= 0 (count rv))\n      res\n      (recur\n        (conj res (nth lv 0) (nth rv 0))\n        (drop 1 lv)\n        (drop 1 rv))\n    ))))","user":"53e76728e4b036ad0777e47c"},{"code":"(fn itl [coll x y] (if (and (seq x) (seq y))\n                     (itl (conj (conj coll (first x)) (first y)) (rest x) (rest y))\n                     (reverse coll)\n                     )\n  ) '()","problem":39,"user":"534c734de4b084c2834f4a93"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys acc []]\n    (if (or (empty? xs) (empty? ys)) acc\n      (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","problem":39,"user":"4f038499535dcb61093f6b09"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [[x1 & xs1] c1\n         [x2 & xs2] c2\n         res []]\n    (if (or (nil? x1) (nil? x2))\n     res\n     (recur xs1 xs2 (conj res x1 x2)))))","user":"57a775bbe4b0a96607956214"},{"code":"(fn ileave [s1 s2]\n  (if (or (empty? s1) (empty? s2)) nil\n  (concat [(first s1) (first s2)] (ileave (rest s1) (rest s2)))\n  )\n)","problem":39,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"#(loop [a %1\n       b %2\n       r []]\n  (if (not (and (not-empty a) (not-empty b)))\n    r\n    (recur (next a)\n           (next b)\n           (into r [(first a) (first b)]))))","problem":39,"user":"528e7433e4b0239c8a67aedf"},{"problem":39,"code":"(fn [x y] (flatten (reverse (for [i (zipmap x y)] [(key i) (val i)]))))","user":"53f1c05ee4b0742d9025b0e1"},{"problem":39,"code":"(fn interlv [lista listb] (\n                           if(empty? lista)\n                           '()\n                           (\n                           \tif(empty? listb)\n                            '()\n                            (concat\n                              (list (first lista) (first listb))\n                              (interlv (rest lista) (rest listb))\n                              )\n                           )\n                           )\n  )","user":"5c59b1d3e4b01df32ab73261"},{"code":"(fn [c1 c2] (flatten (map (fn [x y] [x y]) c1 c2)))","problem":39,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":39,"code":"(fn f[c1 c2] (let [s1 (seq c1) s2 (seq c2)] (if (and s1 s2) (cons (first s1) (cons (first s2) (f (rest s1) (rest s2)))))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":39,"code":"(fn \n    [s1 s2]\n    (loop\n        [i 0 \n         r '()  \n         x (min (count s1) (count s2))]\n        (if (= i x)\n            (reverse r)\n            (recur (inc i) (flatten (conj r (flatten (conj '() (s1 i) (s2 i))))) x)\n            )\n        )\n    )","user":"6074f5ede4b069485764de52"},{"problem":39,"code":"(fn zip! [[x & xs] [y & ys]]\n    (if (or (nil? x) (nil? y))\n      '()\n      (cons x (cons y (zip! xs ys)))))","user":"5901158de4b0438e51c2d039"},{"problem":39,"code":"(letfn [(my-interleave [[a & as :as A] [b & bs :as B]]\n  (cond (or (empty? A) (empty? B))\n        '()\n        :else\n        (cons a (cons b (my-interleave as bs)))))]\n  my-interleave)","user":"4f4b62e6e4b03ad3f0c10c78"},{"problem":39,"code":"#(loop [xs %1 ys %2 acc []]\n   (cond\n    (empty? xs) acc\n    (empty? ys) acc\n    :else (recur (rest xs) (rest ys) (conj (conj acc (first xs)) (first ys)))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":39,"code":"(fn intlv [s1 s2]\n  ((fn intlv-impl [s1 s2 acc]\n     (cond (or (empty? s1) (empty? s2)) acc\n           :else (intlv-impl (rest s1) (rest s2) (concat acc (list (first s1) (first s2))))))\n   s1 s2 '()))","user":"5716540fe4b07c98581c3af3"},{"problem":39,"code":"#(flatten (for [x %1 y %2 :when (= (.indexOf %1 x) (.indexOf %2 y))] [x y]))","user":"5ee738dee4b029a2061bbea2"},{"problem":39,"code":"(fn my-fn [lst1 lst2] \n  (if (or (empty? lst1) (empty? lst2)) \n    []\n    (concat [(first lst1) (first lst2)] (my-fn (rest lst1) (rest lst2)))))","user":"55e357dae4b050e68259b442"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map (fn [v1 v2] (list v1 v2)) seq1 seq2)))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":39,"code":"(fn [xs ys] (apply concat (map #(vector %1 %2) xs ys)))","user":"6026d2cae4b0d5df2af22232"},{"problem":39,"code":"(fn [c1 c2] (reduce #(apply conj %1 %2) (map #(vector %1 %2) c1 c2)))","user":"57ebbf3ae4b0bfb2137f5b66"},{"code":"mapcat list\n\n;(fn rec [a b]\n;  (if (or (empty? a) (empty? b))\n;    '()\n;    (into (rec (rest a) (rest b)) (list (first b) (first a)))))","problem":39,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn [a b] (apply concat (map-indexed (fn [idx itm] (if (< idx (count b)) [itm (nth b idx)] [])) a)))","problem":39,"user":"4ec1619b535dfed6da9c6dab"},{"problem":39,"code":"(fn [coll1 coll2]\n  (apply concat (map (partial conj []) coll1 coll2)))","user":"56442758e4b0018b46ad8c0a"},{"problem":39,"code":"(fn [s1 s2]\n  (let [s1 (vec (take (count s2) s1))]\n    (mapcat #(vector (s1 %) (s2 %)) (range 0 (count s1)))\n    ))","user":"589e704ae4b02bd94d917e5e"},{"problem":39,"code":"(fn inter\n  [[x & xs] [y & ys]]\n  (if (and xs ys) (cons x (cons y (inter xs ys))) (cons x (cons y nil))))","user":"542d2385e4b0dad94371f2b2"},{"problem":39,"code":"(fn [fv sv]\n  (loop [a fv\n         b sv\n         rv []]\n    (if (or (empty? a) (empty? b))\n      rv\n      (recur (rest a) (rest b) (conj rv (first a) (first b))))))","user":"538a8d28e4b0640c7a9a58ba"},{"code":"(fn x [a b] \r\n  (let [a1 (first a) b1 (first b)]\r\n     (if (and a1 b1)\r\n       (->> (x (rest a) (rest b)) (cons b1) (cons a1))\r\n       '())))","problem":39,"user":"4e111538535d04ed9115e7c3"},{"problem":39,"code":"#(loop [it1 %1\n         it2 %2\n         result []]\n    (let [head1 (first it1)\n          head2 (first it2)]\n      (if (or (nil? head1) (nil? head2))\n        (apply list result)\n        (recur (rest it1) (rest it2) (conj result head1 head2)))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":39,"code":"(fn foo [i j]\n  (if (not-any? empty? [i j])\n    (concat [(first i) (first j)] (foo (rest i) (rest j)))\n    ()))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [c1 c2]\n  (loop [c1 c1 c2 c2 res []]\n    (if (or (empty? c1) (empty? c2))\n      res\n    (recur (next c1) (next c2) (conj res (first c1) (first c2))))))","problem":39,"user":"52129363e4b0d32679a50640"},{"code":"(fn [xs ys] (mapcat (fn [x y] [x y]) xs ys))","problem":39,"user":"4ed188c8535d44c135fd68cf"},{"code":"(fn [a b] (flatten (map #(list % %2) a b)))","problem":39,"user":"504e9f5ce4b069badc5a33bd"},{"code":"(fn [s t] (reverse (reduce\n                    (fn [a i]\n                      (conj (conj a (nth s i)) (nth t i)))\n                    ()\n                    (range (min (count s) (count t))))))","problem":39,"user":"5175616ae4b0dea9bbfba576"},{"problem":39,"code":"(fn myinterleave [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    nil\n    (concat [(first s1)] [(first s2)] (myinterleave (rest s1) (rest s2)))))","user":"5b5d255de4b0c6492753e6c8"},{"problem":39,"code":"(fn   [a b]\n  (loop [lk  ()\n         jk  0]\n    (if (or (>= jk (* (count a) 2)) (>= jk (* (count b) 2)))\n      (reverse lk)\n      (recur (if (even? jk)\n               (cons  (first (drop (quot jk 2) a)) lk)\n               (cons  (first (drop (quot jk 2) b)) lk))\n             (inc jk)))))","user":"59deba46e4b01968742fed7f"},{"code":"(fn myInter ([ x y ] \n  \t\t(if (and (> (count  x) 0) (> (count y) 0))\n\t\t\t\t(cons (first x) (cons (first y) (myInter (rest x) (rest y))))\n\t\t\t\t(list)\n\t\t\t)\n\t\t    )   \n\t)","problem":39,"user":"4f3bfce2e4b0e243712b1f38"},{"problem":39,"code":"(fn [s1 s2] (apply concat (map #(vector %1 %2) s1 s2)))","user":"58ca613de4b021aa9917edb7"},{"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    nil\n    (conj (my-interleave (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"4ef41f26535dced4c769f230"},{"problem":39,"code":"(fn me [c1 c2] (let [s1 (seq c1) s2 (seq c2)]\n                 (when (and s1 s2)\n                   (cons (first s1) (cons (first s2)\n                                          (me (rest s1) (rest s2)))))))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn il [c1, c2]\n  (when (and c1 c2)\n    (cons (first c1) (cons (first c2) (il (next c1) (next c2))))))","problem":39,"user":"520612a7e4b0bf4f1882c81c"},{"problem":39,"code":";#(flatten (map (fn [& els] els) %1 %2))\n\n#(mapcat vector %1 %2)","user":"59837909e4b021a7a535fe16"},{"code":"#(loop [x %, y %2, z []]\n    (if (or (empty? x) (empty? y))\n           z\n           (recur (rest x) (rest y) (conj z (first x) (first y)))))","problem":39,"user":"52a0237de4b04e0c58e87bbe"},{"code":"(fn [a b]\n  (loop [f a\n         s b\n         collector []]\n        (if (or (empty? f) (empty? s))\n          collector\n          (recur (rest f) (rest s) (conj collector (first f) (first s))))))","problem":39,"user":"502b0804e4b063e52107afad"},{"code":"(fn[xs1 xs2]\n  (flatten\n  (for [i (range (min (count xs1) (count xs2)))]\n   (list (first (drop i xs1)) (first (drop i xs2)))\n  )\n   )\n  )","problem":39,"user":"5360e12ce4b0243289761e3a"},{"problem":39,"code":"mapcat #(into [%1][%2])","user":"53b05a75e4b047364c044482"},{"problem":39,"code":"(fn [a b]\n  (loop [o (vector (first a) (first b)) a (rest a) b (rest b)]\n    (if (or (empty? a) (empty? b))\n      o\n      (recur (-> o (conj (first a)) (conj (first b))) (rest a) (rest b)))))","user":"540c8f3fe4b0addc1aec6705"},{"problem":39,"code":"(fn iter [x y]\n  (let [xh (first x) yh (first y)]\n    (if (and xh yh)\n      (cons xh (cons yh (iter (rest x) (rest y))))\n      '()\n    )\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"problem":39,"code":";;(fn my-interleave\n;;  [& args]\n;;  (println args)\n;;  (flatten (apply map (fn [& a] (into [] a)) args)))\n#(flatten (map vector %1 %2))","user":"57d0cd58e4b0bd073c20235e"},{"problem":39,"code":"(fn [c1 c2] (flatten (map #(vector %1 %2) c1 c2)))","user":"5880d686e4b0f1effa3b7623"},{"problem":39,"code":"(fn interl [s1 s2] (flatten (map (fn conc [a b] (conj (conj nil b ) a)) s1 s2)) )","user":"600b385ce4b074f607df668d"},{"problem":39,"code":"(fn f [a b] \n   (when (and (not-empty a) (not-empty b)) \n      (cons (first a) \n            (cons (first b) \n                  (f (rest a) (rest b))))))","user":"56cbb352e4b0ea9b8538f738"},{"problem":39,"code":"(fn [xs ys]\n  (loop [result []\n         t1 xs\n         t2 ys]\n    (if (or (empty? t1) (empty? t2))\n      result\n      (recur (conj result (first t1) (first t2)) (next t1) (next t2)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":39,"code":"(fn [lcoll rcoll]\n  (loop [lcoll lcoll rcoll rcoll icoll (empty lcoll)]\n    (if (or (empty? lcoll) (empty? rcoll))\n      icoll\n      (recur (rest lcoll) (rest rcoll) (conj (conj icoll (first lcoll)) (first rcoll)))\n      )\n    )\n  )","user":"56885c32e4b0dcc4269f4068"},{"problem":39,"code":"(fn il [s1 s2]\n  (let [[f1 & r1] s1\n        [f2 & r2] s2]\n    (if-not f1 []\n      (if-not f2 []\n        (concat\n     (vector f1 f2)\n     (il r1 r2))))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":39,"code":"(fn [f f1]\n  (mapcat vector f f1) \n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [a b] (reduce concat (map vector a b)))","problem":39,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn [i1, i2] (let [mlen #(min (count %1) (count %2))]\n               (reduce into (for [x (range (mlen i1 i2))] [(nth i1 x) (nth i2 x)]))\n               ))","problem":39,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":39,"code":"(fn [a b] (loop [acc [] a a b b] (if (or (empty? a) (empty? b)) acc (recur (conj acc (first a) (first b)) (rest a) (rest b)))))","user":"56049986e4b0c80df0ca2662"},{"problem":39,"code":"(fn\n  [c1 c2]\n  (let [s (min (count c1) (count c2))]\n    (seq\n      (reduce #(let [i (/ (count %1) 2)]\n                 (if (>= i s)\n                   %1\n                   (conj %1 %2 (nth c2 i)))) [] c1))))","user":"52cda980e4b07d0d72b2737b"},{"code":"(fn [x y]\n  (loop [accum []\n         x x\n         y y]\n    (if (or (empty? x) (empty? y))\n      accum\n      (recur (conj (conj accum (first x)) (first y))\n             (rest x)\n             (rest y)))))","problem":39,"user":"4fb57e06e4b081705acca2bf"},{"problem":39,"code":"(fn [a b] \n  (letfn [(inter [left right]\n                 (let [s1 (seq left) s2 (seq right)]\n                   (when (and s1 s2)\n                     (cons (first s1) (cons (first s2)\n                           (inter (rest s1) (rest s2)))))))]\n(inter a b)))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":39,"code":"(fn [x y]\n  (loop [xx x\n         yy y\n         res []]\n    (if (or (empty? xx)\n            (empty? yy))\n      res\n      (recur (rest xx)\n             (rest yy)\n             (conj res \n                   (first xx)\n                   (first yy))))))","user":"5c56e264e4b0fb8c5ffd9a39"},{"problem":39,"code":"(fn [a b]\n  (if (<= (count a) (count b))\n    (flatten (map-indexed (fn [index item] [item (nth b index)]) a))\n    (flatten (map-indexed (fn [index item] [item (nth b index)]) (take (count b) a)))))","user":"573b664ce4b0cd1946bd10a7"},{"code":"(fn inte [a b]\n   (let [x (seq a)\n         y (seq b)]\n    (when (and x y)\n      (cons (first x) (cons (first y)\n                            (inte (rest x) (rest y)))))))","problem":39,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn my-interleave [x y]\n  (if (and (seq x) (seq y))\n    (concat\n      [(first x) (first y)]\n      (my-interleave (rest x) (rest y)))\n    []))","problem":39,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn [& lists]\n  (reduce concat (for [c (range 0 (reduce min (map count lists)))\n        :let [next-list \n          ((fn [n ls] (for [ln (range 0 (count ls))\n                            :let [lx (nth ls ln)]]\n                        (nth lx n))) c lists)]]\n    next-list)))","problem":39,"user":"517531c6e4b07031762f2eea"},{"code":"(fn my-inter\n           ([a b]\n           (my-inter a b []))\n           ([a b res]\n           (if (or (empty? a) (empty? b))\n             res\n             (recur (rest a) (rest b) (conj res (first a) (first b)) )\n           ))\n         )","problem":39,"user":"50158fa0e4b0aaedd199e913"},{"problem":39,"code":"(fn il [x y]\n  (when (not-any? empty? [x y])\n    (concat (take 1 x) (take 1 y) (il (rest x) (rest y)))))","user":"53fcd574e4b0de5c418485d9"},{"code":"#(loop [s1 %1 s2 %2 result []]\n           (if (or (empty? s1) (empty? s2))\n              result\n              (recur (rest s1)\n                     (rest s2)\n                     (conj result (first s1) (first s2)))))","problem":39,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [s1 s2]\n  (loop [v s1 t s2 res []]\n    (if (or (empty? v) (empty? t))\n      res\n      (recur (rest v) (rest t) (conj res (first v) (first t))))))","problem":39,"user":"4eadc217535d7eef30807321"},{"code":"(fn [seq1 seq2]\n  (loop [rem1 seq1\n         rem2 seq2\n         acc []]\n    (let [[head1 & tail1] rem1\n          [head2 & tail2] rem2\n          acc (conj acc head1 head2)]\n      (if (or (empty? tail1) (empty? tail2))\n        acc\n        (recur tail1 tail2 acc)))))","problem":39,"user":"53936394e4b0b51d73faaebb"},{"problem":39,"code":"#(loop [l1 %1, l2 %2, res ()]\n   (cond (or (empty? l1) (empty? l2)) res\n         :else (recur (rest l1)\n                      (rest l2)\n                      (concat res (list (first l1) (first l2))))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"(fn [coll1 coll2] (apply concat (map vector coll1 coll2)))","problem":39,"user":"4ef47f0f535dced4c769f235"},{"problem":39,"code":"(fn my-interleave [a b]\n    (if-not (or (empty? a)\n                (empty? b))\n      (cons (first a) (cons (first b) (my-interleave (rest a)\n                                                     (rest b))))\n      '()))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":39,"code":"(fn ileave [l1 l2] (flatten (if (or (empty? l1) (empty? l2)) '() (list (first l1) (first l2) (ileave (rest l1) (rest l2))))))","user":"577412c6e4b0979f896515f6"},{"code":"(fn [a b]\n  (loop [a a b b r []]\n    (if (and (seq a) (seq b))\n      (recur (rest a)\n             (rest b)\n             (conj r (first a) (first b)))\n      r)))","problem":39,"user":"539c64cde4b0b51d73faaf2a"},{"problem":39,"code":"(fn [c1 c2]\n  (mapcat list c1 c2))","user":"59a8405ce4b0bcf4e9a43af1"},{"code":"(fn [a b]\r\n  (loop [a a, b b, r []]\r\n    (if (or (empty? a) (empty? b)) r\r\n      (recur (rest a) (rest b) (conj r (first a) (first b))))))","problem":39,"user":"4deff9f9535d08e6dec9fe15"},{"problem":39,"code":"(fn [keys vals] (loop [vec [] ks (seq keys) vs (seq vals)] (if (and ks vs) (recur (conj vec (first ks) (first vs)) (next ks) (next vs)) vec)))","user":"5cb4e764e4b026601754b929"},{"code":"#(mapcat (fn [idx] seq [(nth %1 idx) (nth %2 idx)])  (range (min (count %1) (count %2))) )","problem":39,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":39,"code":"#(loop [p %1 q %2 coll '[]]\n   (if (or (nil? (first p)) (nil? (first q)))\n     (seq coll)\n     (recur (rest p) (rest q) (conj coll (first p) (first q)))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":39,"code":"(fn [left right] (\n  (fn rec [col left right]\n    (if (and (first left) (first right))\n      (rec (into col (list (first left) (first right))) (rest left) (rest right))\n      col)) [] left right))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn [x y] \n    (loop [restx x resty y acc ()]  \n      (let [hx (first restx) tx (rest restx) hy (first resty) ty (rest resty)]\n        (if (not (and  hx hy))\n          acc\n          (recur tx ty (concat acc (list hx hy) ))))))","problem":39,"user":"527675cbe4b03e8d9a4a74e2"},{"code":"(fn weave\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (weave (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply weave (map rest ss))))))))","problem":39,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn [a b]\n     (filter #(not= nil %) (mapcat #(if (not= nil (get b %))\n            [(get a %) (get b %)]\n            ) (range (count a)))))","problem":39,"user":"4eaa96e1535d7eef3080730d"},{"code":"(fn temp\n  ([a b] (temp a b []))\n  ([a b r]\n      (let [x (first a) y (next a) u (first b) v (next b) z (conj r x u)]\n        (if (some nil? [y v])  z (recur y v z))\n      )\n  )\n)","problem":39,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn minterleave [a b]\n   (when (and (seq a) (seq b))\n     (cons (first a)\n           (cons (first b)\n                 (lazy-seq (minterleave (rest a) (rest b)))))))","problem":39,"user":"52cc582ae4b07d0d72b27362"},{"problem":39,"code":"(fn interleaveseq [seq1 seq2]\n  (loop [result []\n         myseq1 seq1\n         myseq2 seq2]\n    (if (or (empty? myseq1) (empty? myseq2))\n      result\n      (recur (conj (conj result (first myseq1)) (first myseq2)) (rest myseq1) (rest myseq2)))))","user":"60726211e4b069485764de36"},{"problem":39,"code":"(fn [l1 l2] (flatten (map #(vector %1 %2) l1 l2)))","user":"576d398be4b0979f8965155d"},{"code":"(fn f [[x & s] [y & t]]\n  (if (or (empty? s) (empty? t))\n    [x y] \n    (concat [x y] (f s t))))","problem":39,"user":"519ca227e4b0a1d87b003460"},{"code":"(fn my-interleave [c1 c2]\r\n  (let [lengths [(count c1) (count c2)]\r\n        shorter-len (apply min lengths)\r\n        longer-len (apply max lengths)\r\n        target-indices-set (set (map #(* % (inc longer-len)) (range shorter-len)))\r\n        intermixed-colls (for [x c1 y c2] (list x y))]\r\n    (flatten (keep-indexed (fn [idx item] (if (contains? target-indices-set idx) item nil)) intermixed-colls))))","problem":39,"user":"4fabbb97e4b081705acca21d"},{"code":"(fn [x y] (flatten (map #(list %1 %2) x y)))","problem":39,"user":"4dcc3281535d5973398f9291"},{"problem":39,"code":"(fn iinterleave [x y]\n    (if (empty? x) x\n      (if (empty? y) y \n        (concat \n         (cons (first x) (cons (first y) \n               (iinterleave \n                (rest x) (rest y))))\n                   ))))","user":"591326f2e4b0163c97b36efc"},{"code":"(fn [left right] (flatten (map vector left right)))","problem":39,"user":"4fae4c11e4b081705acca248"},{"problem":39,"code":"(fn my-interleave [coll1 coll2]\n  (flatten (map vector coll1 coll2))\n)","user":"569e3175e4b0542e1f8d1484"},{"code":"#(apply concat (reverse (into [] (zipmap %1 %2))))","problem":39,"user":"4fc8f1fee4b0ee37620e183f"},{"code":"(fn f [x y] (if \n  (or (= x []) (= y [])) \n  () \n  (conj (f (drop 1 x) (drop 1 y)) (first y) (first x) )\n  )\n  \n)","problem":39,"user":"4f751a54e4b0fbe0118ec555"},{"problem":39,"code":"(fn [A B]\n    (loop [i 0\n           results (vector)\n           n (min (count A) (count B))]\n      (print results)\n      (if (< i n)\n        (recur (inc i) (conj results (nth A i) (nth B i)) n)\n        results\n        )\n      ))","user":"564c7501e4b0284900eef671"},{"problem":39,"code":"(fn my-interleave\n    [coll-a coll-b]\n    (mapcat (fn [x y]\n              (list x y)\n              ) coll-a coll-b)\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"problem":39,"code":"(fn [l1 l2] (loop [res [] c1 l1 c2 l2] (if (or (nil? (first c1)) (nil? (first c2))) res (recur (conj res (first c1) (first c2)) (rest c1) (rest c2)) ) ))","user":"5cc7692ce4b0ccb061962837"},{"problem":39,"code":"(fn diy-interleave\n  [x y]\n  (let [item-count (Math/min (count x) (count y))\n        a (take item-count x)\n        b (take item-count y)]\n    (flatten (map list a b))))","user":"54a96a15e4b09f271ff37cad"},{"problem":39,"code":"(fn [first_coll second_coll] (flatten (map list first_coll second_coll)))","user":"5a6170fde4b0512ff01cd975"},{"code":"(fn  [s t]\n  (letfn [(f [x y r]\n     (if (or (empty? x) (empty? y)) r (f (rest x) (rest y) (conj r (first x) (first y)))))]\n   (f s t [])))","problem":39,"user":"50799992e4b08327cd804a62"},{"problem":39,"code":"(fn f [a b] (if (and (seq a) (seq b)) (cons (first a) (cons (first b) (f (rest a) (rest b))))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":39,"code":"(fn foo\n  [[fstx & rstx :as x] [fsty & rsty :as y]]\n  (if\n   (or (nil? fstx) (nil? fsty)) \n   (list)\n   (conj (foo rstx rsty) fsty fstx)))","user":"5747e22ce4b009280f9f2b7c"},{"code":"(fn intersperse [ x y ]\n  (mapcat #(conj (conj []  %1 ) %2) x y))","problem":39,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":39,"code":"(fn [s1 s2]\n      (loop [acc []\n             s1 s1\n             s2 s2]\n        (if-let [v1 (first s1)]\n          (if-let [v2 (first s2)]\n            (recur (conj acc v1 v2) (rest s1) (rest s2))\n            acc)\n          acc)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":39,"code":"; my original recursive answer\n; (fn f1 [a b] \n;   (if (or (empty? a) (empty? b))\n;     []\n;     (cons (first a) \n;       (cons (first b) \n;         (f1 (rest a) (rest b))))))\n\nmapcat list","user":"541e2ff8e4b01498b1a71a8a"},{"problem":39,"code":"#(loop [x %1 y%2 r []]\n   (let [a (first x)\n         b (first y)]\n     (if (or (nil? a) (nil? b))\n       r\n       (recur (next x) (next y) (conj r a b)))) )","user":"5fb3a096e4b08cb800c85b35"},{"code":"#(loop [[x & xs :as left] %, [y & ys :as right] %2, result []]\n   (if (or (empty? left) (empty? right))\n     result\n     (recur xs ys (conj result x y))))","problem":39,"user":"4fad9da0e4b081705acca23c"},{"code":"(fn my-interleave [s1 s2]\n  (if (or (empty? s1) (empty? s2)) nil\n    (cons (first s1) (cons (first s2) (my-interleave (rest s1) (rest s2)))))\n  )","problem":39,"user":"52bc6f5ee4b07a9af57922f6"},{"code":"(fn [l m]\n  (loop [[fl & largs :as ls] l\n         [ml & margs :as ms] m\n         r '()]\n    (if (or (empty? ls) (empty? ms))\n      r\n      (recur largs margs (concat r (list fl ml))))))","problem":39,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn my-interleave [a b]\n  (cond\n     (empty? a) '()\n     (empty? b) '()\n     :else (cons (first a) (cons (first b)\n                (my-interleave (next a) (next b))))))","problem":39,"user":"4fc863a9e4b0ee37620e1831"},{"code":"#(reduce into () (zipmap %2 %))","problem":39,"user":"5208a3a2e4b0301979a6c235"},{"code":"(fn interlv [S1 S2]\n  (if (or (empty? S1) (empty? S2))\n    '()\n    (cons (first S1) (cons (first S2) (interlv (rest S1) (rest S2))))))","problem":39,"user":"4ef4c1ff535dced4c769f23e"},{"problem":39,"code":"#(loop [[x & xs] % [y & ys] %2 v []]\n   (if (and xs ys)\n     (recur xs ys (conj v x y))\n     (conj v x y)))","user":"56ae214ce4b03c432f18735a"},{"problem":39,"code":"(fn il [a b] (if (or (empty? a) (empty? b)) () (concat (list (first a)) (list (first b)) (il (rest a) (rest b)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":39,"code":"(fn zip* [l r] (flatten (map list l r)))","user":"5a591d04e4b05d388ecb6c90"},{"code":"(fn [x y]\n\t(loop [x x y y x_y []]\n\t\t(if (or (empty? x) (empty? y))\n\t\t\tx_y\n\t\t\t(do \n\t\t\t\t(println \"x\" x \"y\" y \"x_y\" x_y)\n\t\t\t\t(recur (rest x) (rest y) (conj x_y (first x) (first y)))\n\t\t\t)\n\t\t)\n\t)\n)","problem":39,"user":"534f0b51e4b084c2834f4ac3"},{"code":"(fn [seq1 seq2] (mapcat #(conj [] %1 %2) seq1 seq2))","problem":39,"user":"53864493e4b06839e8705f10"},{"problem":39,"code":"#(flatten (map (fn [x] [(%1 x) (%2 x)]) (range (min (count %1) (count %2)))))","user":"594d4c57e4b07ddc2dafae87"},{"problem":39,"code":"(fn foo [first-seq second-seq]\n  (loop [first-seq first-seq\n         second-seq second-seq\n         r []]\n    (if \n      (and\n       (first first-seq)\n       (first second-seq))\n      (recur\n       (rest first-seq)\n       (rest second-seq)\n       (concat r [(first first-seq)\n                  (first second-seq)]))\n      r)))","user":"5c633df2e4b0fca0c162265c"},{"problem":39,"code":"(fn f [[x & xs] [y & ys]]\n  (if-not (and x y)\n    nil\n    (cons x (cons y (f xs ys)))))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"problem":39,"code":"(fn [ listOne listTwo ]\n  (loop [merged '() one listOne two listTwo]\n    (let [elOne (first one) elTwo (first two)]\n    (if (or (nil? elTwo) (nil? elOne))\n      (reverse merged)\n      (recur (conj merged elOne elTwo ) (rest one) (rest two))\n     )\n      )\n  ))","user":"542b0592e4b0dad94371f286"},{"problem":39,"code":"(fn [s1 s2] (apply concat (map #(list %1 %2) s1 s2)))","user":"56ef11efe4b04a395b9a045b"},{"problem":39,"code":"(fn\n  [x y]\n  (mapcat vector x y))","user":"5d6d2e11e4b04d129b00f2ba"},{"code":"(fn la\n  ([x y] (la x y []))\n  ([x y z] (if (or (= x []) (= y [])) z \n    (la (rest x) (rest y) (conj (conj z (first x)) (first y))))))","problem":39,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [coll1 coll2]\n  (loop [x coll1\n        y coll2\n        result []]\n   (if (or (empty? x) (empty? y))\n     result\n     (recur (rest x) (rest y) (conj result (first x) (first y))))))","problem":39,"user":"4daedd1eedd6309eace4d164"},{"code":"(fn foo\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (foo (rest s1) (rest s2))))))))\n  ([c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply foo (map rest ss))))))))","problem":39,"user":"5035a77de4b0ed9c821488fe"},{"code":"(fn\n  [x y]\n    (mapcat vector x y))","problem":39,"user":"4f9d87fce4b0dcca54ed6d24"},{"problem":39,"code":"(fn test\n  [a b]\n(reduce #(conj %1 (first %2) (second %2)) [] (map #(conj [] %1 %2) a b)))","user":"5e88a676e4b0cb016954630a"},{"problem":39,"code":"mapcat (fn [x y] (vec [x y]))","user":"569951e4e4b0542e1f8d143e"},{"problem":39,"code":"(fn its [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (its (rest s1) (rest s2))))))))","user":"5f0e32a1e4b0f30dddfb5d59"},{"problem":39,"code":"(fn [x y]\n  (loop [acc []\n        x x\n        y y]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (conj acc (first x) (first y)) (rest x) (rest y)))))","user":"51ca5378e4b08b1cbd0d9480"},{"code":"(fn intr [l1 l2]\n  (cond\n    (or (empty? l1) (empty? l2)) '()\n    :else (concat (conj [] (first l1) (first l2))\n                  (intr (rest l1) (rest l2)))))","problem":39,"user":"4f22e667e4b0d66497709fdb"},{"code":"(fn my-interleave [xs ys]\n      (if (or (empty? xs) (empty? ys))\n          []\n          (concat [(first xs) (first ys)] (my-interleave (rest xs) (rest ys)))))","problem":39,"user":"5186134ce4b0da5a5be3bac7"},{"problem":39,"code":"(fn [a b]\n  (let [l (min (count a) (count b))]\n    (loop [i 0 ret []]\n      (if (< i l)\n        (recur (inc i) (conj ret (a i) (b i)))\n        ret))))","user":"55058a4fe4b086ebe8a79c89"},{"code":"(fn [s1 s2] (flatten (for [x (range (min (count s1) (count s2))) \n                  :let [a (nth s1 x)\n                        b (nth s2 x)]]\n              [a b])))","problem":39,"user":"51ed09b6e4b0bb507043158b"},{"code":"(fn joinList [x y] (if (or (empty? x) (empty? y)) '() (conj (joinList (rest x) (rest y)) (first y) (first x))))","problem":39,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (mapv vector seq1 seq2)))","user":"55fc838be4b0f488688e0674"},{"code":"(fn zip [a b] (flatten (map vector a b)))","problem":39,"user":"4ef9b021535dced4c769f269"},{"problem":39,"code":"#_(fn f [xs ys]\n    (if (and (seq xs) (seq ys))\n      (cons (first xs)\n            (cons (first ys)\n                  (f (rest xs) (rest ys))))))\nmapcat list","user":"505223fae4b0a561d07d8f17"},{"code":"(fn f ([a b] (if (or (empty? a) (empty? b))\n              []\n              (concat [(first a) (first b)] (f (rest a) (rest b))))))","problem":39,"user":"5069c09be4b01dc6af13f837"},{"code":"(fn rec [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a) (first b)] (rec (rest a) (rest b)))))","problem":39,"user":"52cc09c1e4b07d0d72b27356"},{"problem":39,"code":"(fn [a b]\n  (loop [x a\n         y b\n         acc '()]\n    (if (or (empty? x) (empty? y))\n      (reverse acc)\n      (recur (rest x) (rest y) (conj acc (first x) (first y))))))","user":"5eb6561fe4b00a66d4a95233"},{"code":"(fn [& rest]\n   (loop [lsts rest acc ()]\n\t\t\t   (if (some nil? lsts)\n\t\t\t\t acc\n\t\t\t   (recur (for [lst lsts] (next lst))\n\t\t\t\t        (concat acc\n\t\t\t\t\t        (for [lst lsts] \n\t\t\t\t\t\t           (first lst)))))))","problem":39,"user":"50a6b5e8e4b0aa96157e262a"},{"problem":39,"code":"(fn my-interleave [coll0 coll1]\n   (when-not (or (empty? coll0) (empty? coll1))\n     (cons (first coll0) (cons (first coll1) (my-interleave (rest coll0) (rest coll1))))))","user":"53940b5ee4b0b51d73faaec4"},{"code":"(fn interleaveseq [x y]\n  (reverse\n    (loop [x x\n           y y\n           out '()]\n      (if (or (= (count x) 0)\n              (= (count y) 0))\n        out\n        (recur\n          (rest x)\n          (rest y)\n          (conj out (first x) (first y)))))))","problem":39,"user":"52dad8bde4b09f7907dd13be"},{"problem":39,"code":"(fn [seq1 seq2] \n  (loop [var1 seq1 var2 seq2 res []]\n    (if (or (empty? var1) (empty? var2))\n      res\n      (recur (drop 1 var1) (drop 1 var2) (conj res (first var1) (first var2))))))","user":"56351709e4b0bfe05bf117c2"},{"problem":39,"code":"(fn [[head1 & tail1] [head2 & tail2]]\n  (loop [final []\n         head1 head1\n         head2 head2\n         tail1 tail1\n         tail2 tail2]\n    (if (or (empty? tail1) (empty? tail2))\n      (conj final head1 head2)\n      (recur (conj final head1 head2) (first tail1) (first tail2) (rest tail1) (rest tail2)))))","user":"5cae5247e4b026601754b884"},{"problem":39,"code":"(fn [seq1 seq2] \n  (loop [seq1 seq1\n         seq2 seq2\n         acc []]\n    (if (or (= (count seq1) 0) (= (count seq2) 0)) \n      \tacc \n      \t(recur (rest seq1) (rest seq2) (conj (conj acc (first seq1)) (first seq2)))\n      \n      )\n    \n    ))","user":"5a932f63e4b0d174b936c71b"},{"problem":39,"code":"(fn rec [x y]\n  (if (empty? x)\n    (empty x)\n    (if (empty? y)\n      (empty y)\n      (concat (cons (first x) (cons (first y) '())) (rec (rest x) (rest y))))))","user":"57716e11e4b0979f896515b2"},{"code":"(fn my-interleave [x y]\n                     (if (or (empty? x) (empty? y)) nil\n                       (cons (first x) (cons (first y) (my-interleave (rest x) (rest y))))))","problem":39,"user":"4e75d6b6535d7a570dd295c6"},{"code":"#(loop [s1 % s2 %2 r []]\n  (if (or (empty? s1) (empty? s2))\n    r\n    (recur (next s1) (next s2) (conj r (first s1) (first s2)))))","problem":39,"user":"51d872dde4b0154f82ab930e"},{"problem":39,"code":"(fn __ [x,y] (flatten (map vector x y) ) )","user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn my-inter [a b]\n  (let [len (min (count a) (count b))]\n    (loop [i 0 a1 a b1 b ret []]\n      (if (= i len)\n        ret\n      (recur (inc i)\n             (rest a1)\n             (rest b1)\n             (conj ret (first a1) (first b1)))))))","problem":39,"user":"51622fb8e4b009fba0926e3f"},{"problem":39,"code":"(fn[x y]\n  (apply concat(map vector x y))\n  )","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn inter [a b]\n  (letfn [(it [x y]\n    (let [[x1 & x2] x [y1 & y2] y]\n      (cons x1 (cons y1 (lazy-seq (it x2 y2))))))]\n  (take (* 2 (min (count a) (count b))) (it a b)))\n)","problem":39,"user":"50b4b70de4b0c464d223d1bc"},{"code":"(fn inter-leave [a b]\n  (let [s1 (seq a), s2 (seq b)]\n    (if (and s1 s2)\n      (cons (first s1) (cons (first s2) (inter-leave (rest s1) (rest s2)))))))","problem":39,"user":"5322d364e4b09d4e7a9b54c6"},{"code":"(fn ntrlv [coll1 coll2]\n  (when (not (or (empty? coll1) (empty? coll2)))\n  (conj (ntrlv (rest coll1) (rest coll2)) (first coll2) (first coll1) )\n  ))","problem":39,"user":"53307da1e4b019098a6f8b5e"},{"problem":39,"code":"(fn [vect1 vect2]\n   (loop [[a & more1] vect1, [b & more2] vect2, result []]\n     (let [result (conj result a b)]\n       (if (or (empty? more1) (empty? more2))\n         result\n         (recur more1 more2 result)))\n     )\n   )","user":"58dd20dae4b0a4d5acaab6b2"},{"code":"(fn [a b] (flatten (for [i (range (min (count a) (count b)))] [(nth a i) (nth b i)])))","problem":39,"user":"52bb81d7e4b07a9af57922e8"},{"code":"#(reduce concat (map (fn [x y] [x y]) %1 %2))","problem":39,"user":"4f32a7f1e4b0d6649770a095"},{"problem":39,"code":"(fn inter11 [c1 c2 & colls] \n     (lazy-seq \n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply inter11 (map rest ss)))))))","user":"5412646de4b01498b1a719d4"},{"problem":39,"code":"(fn inter-leave[s1 s2] \n  (flatten(map list s1 s2))\n)","user":"5559b443e4b0deb715856e3c"},{"problem":39,"code":"(fn prob39 [c1 c2]\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) (prob39 (rest s1) (rest s2)))))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn f [c1 c2]\n    (lazy-seq\n     (let [s1 (seq c1) s2 (seq c2)]\n       (when (and s1 s2)\n         (cons (first s1) (cons (first s2)\n                                (f (rest s1) (rest s2))))))))","problem":39,"user":"51929214e4b08962174cf74c"},{"problem":39,"code":"(fn [a b]\n    (loop [a' a b' b r []]\n        (if (or (empty? a') (empty? b'))\n            r\n            (recur\n                (rest a')\n                (rest b')\n                (conj r (first a') (first b'))))))","user":"57ae3345e4b0fbc9809a271e"},{"problem":39,"code":"(fn inter [xs ys] \n  (if (or (empty? xs) (empty? ys)) nil\n    (concat \n      [(first xs) (first ys)] \n      (inter (rest xs) (rest ys))\n    )\n  )\n)","user":"552a672de4b0ffed3738f954"},{"code":"(fn jr\n  ([l1 l2] (reverse (jr l1 l2 '())))\n  ([l1 l2 r]\n    (if (or (empty? l1) (empty? l2)) \n      r\n      (jr (rest l1)\n              (rest l2) \n              (conj (conj r (first l1)) (first l2))))))","problem":39,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":39,"code":"#(loop [result []\n        a %\n        b %2]\n   (if (and a b)\n     (recur (concat result [(first a) (first b)])\n            (next a)\n            (next b))\n     result))","user":"503f923fe4b00d1a725ff2ad"},{"problem":39,"code":"(fn my-interleave [coll-a coll-b]\n  (mapcat (fn [a b] [a b]) coll-a coll-b))","user":"5f663bc0e4b02876ed9fd02d"},{"problem":39,"code":";#(loop [o []\n;        x %1\n;        y %2]\n;   (if (or (empty? x) (empty? y))\n;     o\n;     (recur (into o [(first x) (first y)])\n;            (rest x)\n;            (rest y))))\n\nmapcat list","user":"57533bc1e4b02ea1147992a6"},{"problem":39,"code":"mapcat (fn [& coll] coll)","user":"50666699e4b03d366d7cb2b0"},{"problem":39,"code":"(fn in [a b]\n  (if (or (empty? a) (empty? b))\n    '()\n    (conj (conj (in (rest a) (rest b)) (first b)) (first a))))","user":"57bdfba3e4b05aa3c4741c5f"},{"code":"(fn [f s]\n   (flatten (map vector f (take (count f) s))))","problem":39,"user":"52c49401e4b0c2d177d620de"},{"problem":39,"code":"(fn [x y]\n    (mapcat #(vector % %2) x y))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn myinterleave\n  [xs ys]\n    (if (and (seq xs) (seq ys))\n      (conj (myinterleave (rest xs) (rest ys)) (first ys) (first xs))\n      nil))","problem":39,"user":"4e6fe3a6535d5021c1a89629"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [acc [(first s1) (first s2)] r1 (rest s1) r2 (rest s2)]\n    (if (or (empty? r1) (empty? r2))\n      acc\n      (recur (conj acc (first r1) (first r2)) (rest r1) (rest r2)))))","user":"5080d6e3e4b01a93d3f38e4b"},{"problem":39,"code":"(fn my-interleave [a b]\n  (cond\n    (empty? a) []\n    (empty? b) []\n    :else (concat\n           (list (first a) (first b))\n           (my-interleave (rest a) (rest b)))))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys acc (empty xs)]\n    (if (or (empty? xs) (empty? ys))\n        acc\n        (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","problem":39,"user":"5063b9a0e4b075d771da6f9d"},{"problem":39,"code":"(fn [sqa sqb]\n  (flatten (map #(seq [% %2]) sqa sqb))\n  )","user":"5a388675e4b001c08efc0ca2"},{"problem":39,"code":"(fn [v1 v2] (loop [v1' v1  v2' v2 acc []] (if (and (seq v1') (seq v2')) (recur (next v1') (next v2') (conj acc (first v1') (first v2'))) acc)))","user":"4fc45c07e4b081705acca349"},{"code":"(fn my-interleave [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (cons (first x) (cons (first y) (my-interleave (rest x) (rest y))))))","problem":39,"user":"4ff9cfd6e4b0678c553fc3af"},{"problem":39,"code":"(fn new-interleave\n [c1 c2]\n (lazy-seq\n  (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) \n                             (new-interleave (rest s1) (rest s2))))))))","user":"5c493046e4b0e06e1360a3cb"},{"problem":39,"code":"#(flatten (reverse (into '() (map list %1 %2))))","user":"55f27d95e4b06e875b46ce47"},{"problem":39,"code":"(fn [x y]\n    (loop [cnt 0\n           rez []]\n      (if (or (= cnt (count x)) (= cnt (count y)))\n        rez\n        (recur (inc cnt) (conj rez (nth x cnt) (nth y cnt))))\n      )\n    )","user":"5d301c95e4b01671435dbcca"},{"code":"(fn [xs ys] (flatten (mapcat (fn [& args] [args]) xs ys)))","problem":39,"user":"4ea5ba92535d7eef308072d9"},{"problem":39,"code":"(fn mappp [coll1 coll2] (filter #(not (nil? %1)) (flatten (map-indexed (fn [idx elem] (if (contains? coll2 idx) (list elem (nth coll2 idx)))) coll1))))","user":"5658d775e4b00d3155796114"},{"problem":39,"code":"(fn [& colls]\n  (flatten (apply (partial map vector) colls)))","user":"5f3797cce4b0574c87022c5a"},{"problem":39,"code":"(fn [as bs]\n  (loop [as as\n         bs bs\n         acc []]\n    (if (or (empty? as) (empty? bs))\n      acc\n      (recur (rest as)\n             (rest bs)\n             (conj (conj acc (first as)) (first bs))))))","user":"51c116d4e4b0c9c822882942"},{"problem":39,"code":"(fn pasangin [vecA vecB] (mapcat vector vecA vecB))","user":"5b7ed20fe4b047b03b203760"},{"problem":39,"code":"; #(apply concat (map list %1 %2))\n\n#(mapcat list %1 %2)","user":"5cf895efe4b0b71b1d808a85"},{"problem":39,"code":"(fn [coll1 coll2]\n   (flatten (map (fn [a b] (list a b)) coll1 coll2)))","user":"5515b138e4b055c2f668d4ed"},{"code":"#(flatten (map (fn [a b] [a b]) % %2))","problem":39,"user":"4e6a3b79535d8ccf87e9feb3"},{"code":"(fn interleave2 [cola colb]\r\n  (if (or (empty? cola) (empty? colb))\r\n    '()\r\n    (conj (interleave2 (rest cola) (rest colb)) (first colb) (first cola))))","problem":39,"user":"4f0da4e4535d0136e6c22319"},{"problem":39,"code":"(fn k-interleave [s1 s2]\n  (apply concat \n    (map #(list %1 %2) s1 s2)));","user":"5e0f9884e4b099d064962fc0"},{"problem":39,"code":"(fn interl [x y]\n  (if (or (= (count x) 0) (= (count y) 0))\n    [ ]\n    (concat [(first x) (first y)] (interl (rest x) (rest y)))\n    ))","user":"4f0368ee535dcb61093f6aae"},{"problem":39,"code":"(fn [a b] \n  (let [coll (empty a)\n  \t    lov  (map #(vector %1 %2) a b)]\n    (reduce into coll lov)))","user":"53ac815de4b047364c04445e"},{"code":"(fn f [a b]\r\n    (if (or (empty? a) (empty? b)) ()\r\n    (concat (concat [(first a)] [(first b)]) (f (rest a) (rest b)))))","problem":39,"user":"4fea08a9e4b0547ebccb2484"},{"problem":39,"code":"(fn maptmp [l1 l2] \n  (mapcat #(list %1 %2) l1 l2))","user":"5c6748f0e4b0fca0c16226b6"},{"code":"(fn [xs ys]\n    (mapcat list xs ys))","problem":39,"user":"526302eee4b03e8d9a4a70a2"},{"problem":39,"code":"#(apply concat (map (fn [x y]\n                     (list x y))\n                   %1 %2))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (map list\n                xs\n                ys)\n           )\n  )","user":"5a55114ae4b05d388ecb6c37"},{"problem":39,"code":"(fn mint [xs ys] (loop [xxs xs yys ys res []] (if (and (seq xxs) (seq yys)) (recur (rest xxs) (rest yys) (conj res (first xxs) (first yys))) res)))","user":"589771f9e4b00487982d52bd"},{"code":"(fn intl \n  ([xs1 xs2] (intl [] xs1 xs2))\n  ([xs xs1 xs2]\n  (if (or (empty? xs1) (empty? xs2))\n    xs\n    (intl \n     (conj xs (first xs1) (first xs2))\n     (rest xs1) (rest xs2)))))","problem":39,"user":"5140c505e4b049dea086df40"},{"code":"(fn [c1 c2] \n  (flatten (map (fn [e1 e2] (vector e1 e2)) c1 c2)))","problem":39,"user":"523de50de4b06956f8342ca9"},{"code":"(fn [l1 l2]\n  (apply concat\n    (map list l1 l2)))","problem":39,"user":"4de165f3535d08e6dec9fde6"},{"problem":39,"code":"(fn [& args]\n  (loop [acc '() se1 (first args) se2 (second args)]\n    (if (or (empty? se1) (empty? se2)) (reverse acc)\n    (recur (conj acc (first se1) (first se2)) (rest se1) (rest se2)))))","user":"5adcc688e4b0837691e92c05"},{"code":"#(loop [ans nil\n        fst %1\n        snd %2]\n   (if (or (nil? fst) (nil? snd )) (reverse ans)\n     (recur (cons (first snd) (cons (first fst) ans)) (next fst)(next snd))))","problem":39,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":39,"code":"(fn [x y]\n  (loop\n    [xl x\n     yl y\n     ac [] ]\n   (if (or (empty? xl) (empty? yl))\n     ac\n   \t (recur (rest xl) (rest yl) (conj ac (first xl) (first yl) ) )\n     )\n   )\n  )","user":"58d28c70e4b03c36ff7e5901"},{"code":"(fn ! [xs ys]\n  (if (and (not-empty xs) (not-empty ys))\n      (concat (list (first xs) (first ys))\n              (! (rest xs) (rest ys)))))","problem":39,"user":"5020d033e4b0cb6ebc0a42fa"},{"problem":39,"code":"(fn preplet [p d]\n  (cond\n   (or (empty? p) (empty? d)) '()\n   :else (conj (conj (preplet (rest p) (rest d)) (first d)) (first p))\n   )\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"problem":39,"code":"(fn inter [& seqs]\n  (if (some empty? seqs)\n    nil\n    (let [step (map first seqs)]\n      (concat step (apply inter (map rest seqs))))))","user":"53fb5256e4b0de5c4184857f"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [head1 coll1\n         head2 coll2\n         res []]\n    (if (and head1 head2)\n      (recur (next head1)\n             (next head2)\n             (conj res (first head1) (first head2)))\n      res)))","user":"5169d422e4b051e2a73aba53"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [result []\n         s1 s1\n         s2 s2]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (into result [(first s1) (first s2)]) (rest s1) (rest s2)))))","user":"531c6e72e4b08068f379eda0"},{"problem":39,"code":"(fn\n  [s1 s2]\n  (loop [s1 s1, s2 s2, res []]\n    (let [[f1 & r1] s1\n          [f2 & r2] s2]\n      (if (and f1 f2)\n        (recur r1 r2 (concat res (vector f1 f2)))\n        res))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"problem":39,"code":"(fn zip [a b]\n  (if (or (empty? a) (empty? b))\n    `()\n    (conj (zip (rest a) (rest b)) (first b) (first a))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":39,"code":"(fn [xs ys] (flatten (map #(vector %1 %2) xs ys )))","user":"56fd058be4b08d47c97781a1"},{"problem":39,"code":"(fn [x y] (apply concat (map (fn [a b] [a b]) x y)))","user":"5657fc1ae4b0f9d632dd84ad"},{"problem":39,"code":"#(loop [x %1 y %2 r []]\n          (if (or (empty? x) (empty? y)) r\n              (recur (rest x) (rest y) (conj r (first x) (first y)))))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"(fn [xs1 xs2] (flatten (map list xs1 xs2)))","problem":39,"user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [a b]\n  (loop [a a, b b, r []]\n    (if (or (empty? a) (empty? b)) r\n      (recur (rest a) (rest b) (conj r (first a) (first b))))))","problem":39,"user":"53597288e4b04ce2eb3ed29c"},{"problem":39,"code":"mapcat vector\n;(fn [xs ys] (mapcat #(vector %1 %2) xs ys))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn [s1 s2] (flatten (map #((juxt s1 s2) %) (range (min (count s1) (count s2))))))","problem":39,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":39,"code":";(fn [a b]\n;  (apply concat\n;         (map list a b)))\nmapcat vector","user":"5cc0ca7ae4b0ccb06196279d"},{"problem":39,"code":"(fn r [a b]\n  (let [[x y](map first (list a b))]\n    (if-not (or (nil? x)(nil? y))\n      (list* x y (r (rest a)(rest b))))))","user":"59fedc26e4b01bb0ae8afd17"},{"code":"(fn inter [a b]\n  (if (or (empty? a)\n          (empty? b))\n    []\n  (lazy-seq (cons (first a) (cons (first b) (inter (rest a) (rest b)))))))","problem":39,"user":"4daea889edd6309eace4d15b"},{"problem":39,"code":"(fn [x y]\n  (loop [old1 x old2 y new '()]\n    (if (or (empty? old1) (empty? old2))\n      (reverse new)\n      (recur (rest old1) (rest old2) (conj new (first old1) (first old2))))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn intrlv [a b] (if (and (seq a) (seq b)) (concat [(first a) (first b)] (intrlv (rest a) (rest b)))))","problem":39,"user":"52154514e4b02f6d8ea676c0"},{"code":"(fn [xs ys]\n  (loop [x xs\n         y ys\n         acc '()]\n     (if (or (empty? x) (empty? y))\n       acc\n       (let [new-elems [(first x) (first y)]]\n       \t (recur (rest x) (rest y) (concat acc new-elems))))))","problem":39,"user":"514a13cee4b0829bd132edb4"},{"problem":39,"code":"(fn _interleave [x y]\n  (loop [x x y y acc '()]\n    (if (or (empty? x) (empty? y))\n      (reverse acc)\n      (recur (rest x) (rest y) (conj acc (first x) (first y))))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn my-interleave [xs ys]\n    (when (and (seq xs) (seq ys))\n        (conj (my-interleave (rest xs) (rest ys)) (first ys) (first xs))))","problem":39,"user":"4f0660ee535dcb61093f6c0d"},{"problem":39,"code":"(fn it\n  [[f1 & r1]\n   [f2 & r2]]\n  (if (and f1 f2)\n    (into [f1 f2] (it r1 r2))\n    []))","user":"5cf863c4e4b0b71b1d808a80"},{"code":"(fn [seq1 seq2]\n  (loop [result [] s1 seq1 s2 seq2]\n    (if-not (or (nil? (first s1)) (nil? (first s2)))\n      (recur (conj result (first s1) (first s2))\n      (next s1) (next s2))\n    result\n)))","problem":39,"user":"5036eba7e4b0af0658af77a5"},{"problem":39,"code":"(fn [left-coll right-coll]\n    (loop [result []\n          left-xs left-coll\n          right-xs right-coll]\n        (let [left-x (first left-xs)\n              right-x (first right-xs)]\n          (if (or (nil? left-x) (nil? right-x)) \n            result\n            (recur (conj result left-x right-x)\n                        (rest left-xs)\n                        (rest right-xs))))))","user":"56e11125e4b03a7c14b85a1f"},{"problem":39,"code":"(fn [as bs]\n  (loop [[a & aa] as [b & bb] bs s []]\n    (let [sn (conj s a b)]\n      (if (or (empty? aa) (empty? bb))\n        sn\n        (recur aa bb sn)))))","user":"57f85b36e4b0d3187e900924"},{"problem":39,"code":"(fn [v1 v2]\n  (mapcat (fn [x y] [x y]) v1 v2))","user":"4fec0824e4b0681fd128dc9c"},{"problem":39,"code":"(fn [xs1 xs2] \n  (reduce concat (map (fn [x1 x2] [x1 x2]) xs1 xs2)))","user":"5bb17123e4b0a20761a234fd"},{"problem":39,"code":"(fn interleave* [ls1 ls2]\n  (apply concat (map list ls1 ls2))\n  )","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":39,"code":"(fn [coll1 coll2] (mapcat list coll1 coll2))","user":"559c4236e4b066d22e731f67"},{"problem":39,"code":"(fn inter\n  [s1 s2]\n  (let [[hs1 & ts1] s1 [hs2 & ts2] s2]\n    (if (or (nil? ts1) (nil? ts2))\n      (list hs1 hs2)\n      (concat (list hs1 hs2) (inter ts1 ts2))\n     )\n   )\n )","user":"5d7d17ece4b02e6b30c93558"},{"problem":39,"code":"(fn pairs[a b] (\n\n  if (or (= nil (first a)) (= nil (first b))) '()\n  (conj (pairs (rest a) (rest b)) (first b) (first a))\n  \n\n))","user":"602bca69e4b0d5df2af22267"},{"problem":39,"code":"(fn [coll1 coll2] (loop [[h1 & t1] coll1\n         [h2 & t2] coll2\n         result []]\n    \n    (if-not (and h1 h2)\n      result\n      (recur t1 t2 (concat result [h1 h2]))\n      )\n    \n    \n    ))","user":"598085e6e4b021a7a535fdd3"},{"code":"(fn [col1 col2]\n  (loop [c1 col1 c2 col2 res []]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur \n        (rest c1)\n        (rest c2)\n        (conj res (first c1) (first c2))))))","problem":39,"user":"4f3ad7f0e4b0e243712b1f1d"},{"problem":39,"code":"(fn [x y] (flatten\n            (map-indexed\n             (fn [idx itm]\n               (if (> (count x) idx) (list (nth x idx) itm) '() )) y))\n   )","user":"52457931e4b08ba239308107"},{"problem":39,"code":"(fn [ca cb] (apply concat (map list ca cb)))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"(fn zipit [l r] \n             (if (and (seq l) (seq r))\n               (list* (first l) (first r) (zipit (rest l) (rest r)))\n               '()\n               ))","problem":39,"user":"5368fedee4b0243289761e93"},{"problem":39,"code":"(fn [ l m] (reduce (fn [x y](concat x y))(map vector l m)))","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":39,"code":"(fn hoge [xs ys] (let [x (first xs) y (first ys)]\n              (when (and x y) (cons x (cons y (hoge (rest xs) (rest ys)))))\n              ))","user":"5e1754abe4b00200644e3d53"},{"code":"(fn  myleave [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat (list (first a) (first b)) (myleave (rest a) (rest b)))    \n    )\n)","problem":39,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn il [[h1 & r1] [h2 & r2]]\n  (if (or (nil? h1) (nil? h2))\n    []\n    (concat [h1 h2] (il r1 r2))))","problem":39,"user":"5261aebbe4b03e8d9a4a7066"},{"code":"(partial mapcat #(list %1 %2))","problem":39,"user":"4db92654535d1e037afb21a0"},{"problem":39,"code":"mapcat (fn [& xs] (seq xs))","user":"53a83877e4b047364c044425"},{"code":"(fn[x y]\n  (loop [res [] f x s y]\n    (if (or (empty? f) (empty? s))\n       res\n    (recur (conj res (first f) (first s)) (rest f) (rest s)))))","problem":39,"user":"4fc18846e4b081705acca331"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         r []]\n    (if (not (or (empty? s1) (empty? s2)))\n      (recur (rest s1) (rest s2) (conj r (first s1) (first s2)))\n      r)))","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn interl [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n   (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (interl (rest s1) (rest s2))))))))","problem":39,"user":"4f2f7e87e4b0d6649770a06f"},{"code":"(fn [xs ys] (mapcat #(list %1 %2) xs ys))","problem":39,"user":"4ec132a0535dfed6da9c6da9"},{"problem":39,"code":"(fn[coll1, coll2] (remove #(nil? %) (flatten (map-indexed (fn [idx itm] (if (not (nil? (nth coll1 idx nil))) [(nth coll1 idx) itm] nil)) coll2 ))) )","user":"575bd5f9e4b02ea114799365"},{"code":"(fn [& args] (apply mapcat #(list %1 %2) args))","problem":39,"user":"4ec92a6e535d6d7199dd36fb"},{"problem":39,"code":"(fn [x y]\n  (apply concat (map #(list %1 %2)\n       x\n       y)))","user":"53664e3be4b0243289761e74"},{"code":"(fn [x y] (flatten (map (fn [a b] (list a b)) x y)))","problem":39,"user":"4f343e60e4b0e243712b1eb5"},{"code":"#(take (* 2 (min (count %1) (count %2))) ((fn i [f s] (when (seq f) (cons (first f) (i s (rest f))))) %1 %2))","problem":39,"user":"52d66152e4b09f7907dd1357"},{"code":"(fn [v1 v2]\n  (loop [seq1 v1\n        seq2  v2\n        result []]\n    (if (or (empty? seq1) (empty? seq2))\n      result\n      (recur (rest seq1) (rest seq2) (conj (conj result (first seq1)) (first seq2))))))","problem":39,"user":"4e4ca885535dc968683fc4df"},{"code":"(fn [& seqs] (apply (partial mapcat (fn [& els] els)) seqs))","problem":39,"user":"5112bbdde4b0350614f07a7c"},{"problem":39,"code":"(fn [xcoll ycoll]\n  (loop [x xcoll\n         y ycoll\n         ans []]\n    (if (or (empty? x) (empty? y))\n      ans\n      (recur (next x) (next y) (conj ans (first x) (first y))))))","user":"56038f34e4b04bb52996e1bc"},{"code":"#(loop [x %1 y %2 z []] (if (or (empty? x) (empty? y)) \n                          z \n                          (recur (rest x) (rest y) (conj z (first x) (first y)))))","problem":39,"user":"5145832be4b0e8879607340a"},{"code":"(fn f [x y]\n  (let [[h1 & t1] (seq x)\n        [h2 & t2] (seq y)]\n    (if (or (empty? t1) (empty? t2))\n      (cons h1 [h2])\n      (cons h1 (cons h2 (f t1 t2))))))","problem":39,"user":"4ead2841535d7eef3080731e"},{"problem":39,"code":"#(reduce concat [] (map vector % %2))","user":"561223e5e4b05f002753df8b"},{"problem":39,"code":"(fn [f s](mapcat #(list %1 %2) f s))","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [a b] (mapcat #(conj [] %1 %2) a b ))","problem":39,"user":"513fbe89e4b00f13ea1bd894"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [xs []\n         c1 c1\n         c2 c2]\n    (if (or (empty? c1) (empty? c2))\n      xs\n      (recur (conj xs (first c1) (first c2)) (rest c1) (rest c2)))))","user":"5032748ae4b0e78df07b092f"},{"problem":39,"code":"(fn [[a & as] [b & bs] & result]\n  (if (and a b)\n    (recur as bs (concat result [a b]))\n    result))","user":"5189a51ae4b0288ada3dbdad"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n   (apply concat\n    (reverse \n      (loop [res '()\n             s s1\n             s' s2]\n        (if (some empty? [s s'])\n          res\n          (recur (conj res [(first s) (first s')]) (rest s) (rest s')))))))","user":"5638b88de4b0bfe05bf117e9"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [result [] coll1 coll1 coll2 coll2]\n    (if (or (empty? coll1) (empty? coll2))\n      result\n      (recur (conj result (first coll1) (first coll2)) (rest coll1) (rest coll2)))))","user":"5b13f482e4b0cc2b61a3be58"},{"problem":39,"code":"(fn myin [x y]\n                              (loop[ c x\n                                    d y\n                                    result ()]\n                                   ( if (or (empty? c) (empty? d))\n                                   (reverse result)\n                                   (recur (rest c)\n                                          ( rest d)                                          \n                                            (conj  (conj result (first c)) (first d))\n                                            \n                                    )\n                                   )\n                                   ))","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":39,"code":"(fn\n  [x y]\n  (flatten (map #(vector %1 %2) x y))\n  )","user":"56de78fde4b0ea9b8538f83c"},{"code":"(fn inter [c1 c2]\n  (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n    (when (and s1 s2)\n    (cons (first s1) (cons (first s2)\n          (inter (rest s1) (rest s2))))))))","problem":39,"user":"4f031639535dcb61093f6a59"},{"code":"(fn [lst1 lst2]\n  (loop [[fst1 & rst1] lst1\n         [fst2 & rst2] lst2\n         accum []]\n        (if (or (nil? fst1) (nil? fst2))\n          accum\n          (recur rst1 rst2 (conj accum fst1 fst2)))))","problem":39,"user":"4ee271e2535d10e5ff6f5369"},{"problem":39,"code":"#(loop [[head-1 & tail-1] %1\n        [head-2 & tail-2] %2\n        acc []]\n   (if (or (nil? head-1) (nil? head-2))\n     acc\n     (recur tail-1 tail-2 (concat acc [head-1 head-2]))))","user":"56685a73e4b04acd4f672de5"},{"code":"#(loop [c1 %1 c2 %2 r []]\n\t(if (or (empty? c1) (empty? c2))\n\t\tr\n\t\t(let [h1 (first c1), t1 (rest c1), h2 (first c2), t2 (rest c2)]\n\t\t\t(recur t1 t2 (conj (conj r h1) h2)))))","problem":39,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1\n         c2 c2\n         acc []]\n    (if (and (seq c1) (seq c2))\n      (recur (rest c1) (rest c2) (conj acc (first c1) (first c2)))\n      (seq acc))))","user":"53ab94cae4b047364c044450"},{"code":"(fn x[a b] (if (some empty? [a b]) [] (concat [(first a) (first b)] (x (rest a) (rest b)))))","problem":39,"user":"5093ca51e4b097f48cc38585"},{"problem":39,"code":"(fn[& others] (flatten (apply map vector others)))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":39,"code":"(fn\n  [coll1 coll2]\n  (->> (map #(conj [] %1 %2) coll1 coll2)\n       (flatten)))","user":"578bbd3ee4b0ebec4cfb754e"},{"problem":39,"code":"#(loop\n  [acc []\n   sa %1\n   sb %2]\n  (if (or (empty? sa) (empty? sb))\n    acc\n    (recur (conj (conj acc (first sa)) (first sb))\n           (rest sa)\n           (rest sb))))","user":"5daa1fc8e4b000c986472c3e"},{"code":"(fn inter-leave [xs ys] \n  (if (and (> (count xs) 0) (> (count ys) 0))\n    (list* (into [(first xs) (first ys)] (inter-leave (rest xs) (rest ys))))\n    '()\n  )\n)","problem":39,"user":"4ef60a02535dced4c769f24b"},{"code":"(fn [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         newlist '()]\n    (if (= (count newlist) (* 2 (min (count coll1) (count coll2))))\n      (reverse newlist)\n      (recur (rest c1)\n             (rest c2)\n             (cons (first c2) (cons (first c1) newlist))))))","problem":39,"user":"52c672e2e4b0c2d177d6210e"},{"problem":39,"code":";(fn [x y](into '()(doall (flatten(seq (zipmap y x))))))\nmapcat vector","user":"58f286e1e4b08e1cf3471d04"},{"problem":39,"code":"(fn [s1 s2]\n  (let [n (min (count s1) (count s2))]\n    (loop [i 0\n           r []]\n      (if (< i n)\n        (recur (inc i) (conj r (nth s1 i) (nth s2 i)))\n        r))))","user":"5afc3829e4b0cc2b61a3bd08"},{"code":"(fn [f s] (flatten (map #(list %1 %2) f s)))","problem":39,"user":"514f6679e4b0b449e54b8df5"},{"problem":39,"code":"(fn [& xss]\n  (loop [xss xss\n         result []]\n    (if (some empty? xss)\n      result\n      (recur (map rest xss) (concat result (map first xss))))))","user":"550b502ae4b06e50f9beb13f"},{"code":"(fn [c1 c2]\n  (loop [f c1 s c2 total '()]\n\t\t(if (and (seq f) (seq s))\n\t\t\t(recur (rest f) (rest s) (conj total (first f) (first s)))\n\t\t\t(reverse total)\n\t\t)\n\t)\n)","problem":39,"user":"5082ccb3e4b06a522e8c7af3"},{"code":"(fn f [a b] (\n  if (or (= 1 (count a)) (= 1 (count b)))\n  [\n\t\t(first a) \n\t\t(first b)\n\t]\n\n\t(concat\n\t[\n\t\t(first a)\n\t\t(first b)\n\t]\n\t(f (rest a) (rest b))\n\t)\n\n))","problem":39,"user":"4f72e09de4b07046d9f4f03b"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (cond\n   (empty? seq1) []\n   (empty? seq2) []\n   :else (cons (first seq1) \n        \t(cons (first seq2) \n              (my-interleave (rest seq1) (rest seq2))\n        \t)\n  \t\t )\n  )\n)","user":"54c82b27e4b045293a27f645"},{"code":"#(-> (zipmap %1 %2) vec rseq flatten)","problem":39,"user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [s1 s2]\n     (flatten (map #(conj nil %2 %1) s1 s2)))","problem":39,"user":"52d6120ee4b09f7907dd134c"},{"problem":39,"code":"(fn [& args]\n  (loop [result []\n         remaining args]\n    (if (every? not-empty remaining)\n      (recur (into result (map first remaining))\n             (map rest remaining))\n      result)))","user":"5746d767e4b009280f9f2b6b"},{"problem":39,"code":"(fn inter [col1 col2] \n    (-> (map vector col1 col2) flatten))","user":"54f09599e4b024c67c0cf89d"},{"code":"#(reduce (fn [s e] (concat s e)) '() (map (fn [x y] [x y]) %1 %2))","problem":39,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [lista1 l1\n         lista2 l2\n         final '()]\n    (if (or (empty? lista1) (empty? lista2))\n      (reverse final)\n      (recur (rest lista1) (rest lista2) (conj (conj final (first lista1)) (first lista2))))))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [x y] (mapcat #(list % %2) x y))","problem":39,"user":"510d1ff4e4b078ea7192112f"},{"problem":39,"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a) (first b)] (f (rest a) (rest b)))))","user":"57e20474e4b0bfb2137f5a82"},{"problem":39,"code":";#(into (empty %1) (apply concat (map list %1 %2)))\n;mapcat list\n#(apply concat (map list %1 %2))","user":"57ee42c4e4b0bfb2137f5bb1"},{"code":"(fn [col1 col2]\n  (loop [x col1 y col2 inter ()]\n    (if (or (empty? x) (empty? y)) (reverse inter)\n      (recur (rest x) (rest y) (cons (first y) (cons (first x) inter)))\n    )))","problem":39,"user":"52a32876e4b04e0c58e87bfb"},{"problem":39,"code":"(fn interleave-2\n  [s1 s2]\n  (reduce concat (map vector s1 s2)))","user":"55a62092e4b0acc240e31554"},{"problem":39,"code":"(fn zip [a b] (loop [ar1 a ar2 b acc []]\n                    (if (or (empty? ar1) (empty? ar2))\n                        acc\n                        (recur (rest ar1) (rest ar2) (concat acc [(first ar1) (first ar2)])))))","user":"565233f2e4b0f9d632dd8461"},{"problem":39,"code":"(fn [collA collB]\n\t(loop [counter (min (count collA) (count collB)) a collA b collB acc (list)]\n\t\t(if (= counter 0)\n\t\t\tacc\n\t\t\t(recur (- counter 1) (rest a) (rest b)\n\t\t\t\t(concat acc (list (first a) (first b)))))))","user":"598af379e4b02b9968b84ce6"},{"problem":39,"code":"(fn [xs ys] (flatten (map #(identity [%1 %2]) xs ys)))","user":"517e9526e4b09104ecebe7e2"},{"problem":39,"code":"(fn [a b] (apply concat (apply map vector [a b])))","user":"5df175bce4b03c219ef1a34d"},{"problem":39,"code":"#(vec (for [i (range (* 2 (apply min (map count [%1 %2]))))] (if (odd? i) (nth %2 (/ i 2.0)) (nth %1 (/ i 2.0)))))","user":"5da760ebe4b000c986472c1a"},{"code":"#((fn [a b acc]\n  (if (and (seq a) (seq b))\n    (recur (rest a) (rest b) \n             (conj \n              (conj acc (first a))\n              (first b)))\n    acc)) %1 %2 [])","problem":39,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":39,"code":"(fn interleave-two-seq[collx colly]\n (reduce concat\n       (map #(conj [] %1 %2) collx colly)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":39,"code":"#(flatten (map (fn [item1 item2]\n                 (conj '() item2 item1))\n               %1 %2))","user":"58a2b57fe4b02bd94d917ede"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [a c1 \n         b c2\n         final-vector []]\n    (let [[a-head & a-rest] a\n          [b-head & b-rest] b]\n      (if (some nil? (vector a b))\n        final-vector\n        (recur a-rest b-rest (conj (conj final-vector a-head) b-head))))))","user":"52ebbdf7e4b0705949c44443"},{"problem":39,"code":"(fn [a b] (loop [seq_a a seq_b b res []] (if (or (empty? seq_a) (empty? seq_b)) res\n                                        (recur (rest seq_a) (rest seq_b) (conj (conj res (first seq_a)) (first seq_b))) )))","user":"5e0d1947e4b099d064962f92"},{"code":"mapcat (fn [& els] els)","problem":39,"user":"51efd397e4b0249c592fbdeb"},{"problem":39,"code":"(fn [& x] (flatten (map #(concat [%1] [%2]) (first x) (second x))))","user":"53d0c837e4b00fb29b22130b"},{"code":"(fn [a b] (loop [a1 a b1 b acc []] \n               (if (or (= (count a1) 0) (= (count b1) 0) ) \n                 acc \n                 (recur (next a1) (next b1) (conj acc (first a1) (first b1))))))","problem":39,"user":"5106c803e4b01150e115ebee"},{"code":"(fn i[s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    ()\n    (cons (first s1)\n          (cons (first s2) (i (rest s1) (rest s2))))))","problem":39,"user":"52f10094e4b05e3f0be25ee8"},{"problem":39,"code":"#(loop [x %1 y %2 acc ()]\n   (cond\n    (nil? x) (reverse acc)\n    (nil? y) (reverse acc)\n    :else\n    (recur (next x) (next y) (cons (first y) (cons (first x) acc)))))","user":"55ed9108e4b0121d4835fddc"},{"problem":39,"code":"#(flatten\n   (map\n    (fn [a b]\n      (conj [] a b))\n    %1 %2))","user":"606e0e95e4b069485764de1a"},{"problem":39,"code":"(fn [& args] (apply mapcat #(identity %&) args))","user":"562ab73ce4b00e49c7cb482e"},{"problem":39,"code":"(fn [x y]\n  (loop\n    [a x\n     b y\n     result []]\n    (cond\n      (and (seq a) (seq b)) (recur (rest a) (rest b) (conj result (first a) (first b)))\n      :else result)))","user":"59df2b8ee4b01968742fed87"},{"problem":39,"code":"(fn [xs1 xs2]\n  (loop [seq1 (seq xs1)\n         seq2 (seq xs2)\n         result (empty xs1)]\n    (let [n1 (first seq1)\n          n2 (first seq2)]\n      \n    \t(if (and (not (nil? n1)) (not (nil? n2)))\n          (recur (rest seq1) (rest seq2) (conj result n1 n2))\n          result))))","user":"54e3e09fe4b024c67c0cf7e4"},{"code":"#(loop [input1 %1 input2 %2 output []]\n  (if (or (empty? input1) (empty? input2))\n    output\n    (recur (rest input1) (rest input2)\n      (concat output [(first input1) (first input2)]))))","problem":39,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":39,"code":"(fn [v1 v2] (mapcat #(conj [] %1 %2) v1 v2))","user":"540705f0e4b0addc1aec66b1"},{"problem":39,"code":"(fn [a b] (mapcat identity (map (fn [x y] [x y]) a b)))","user":"5a09a6f7e4b01bb0ae8afe14"},{"problem":39,"code":"(fn [c1 c2]\n  (mapcat\n   #(list (nth c1 %) (nth c2 %))\n   (range 0 (min (count c1) (count c2)))))","user":"571e5c9ee4b0145328a76290"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         result []]\n    (let [[head1 & tail1] s1\n          [head2 & tail2] s2\n          new-result (into result [head1 head2])]\n      (if (or (empty? tail1) (empty? tail2))\n        new-result\n        (recur tail1 tail2 new-result)))))","user":"54df838de4b024c67c0cf7ae"},{"code":"(fn [xs ys] (flatten (map (fn [x y] (list x y)) xs ys)))","problem":39,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (flatten (list (first xs) (first ys)\n      (inter (rest xs) (rest ys))))))","problem":39,"user":"4f0381db535dcb61093f6b02"},{"code":"(fn foo [a b] (if (or (= a '()) (= b '())) '() (cons (first a) (cons (first b) (foo (rest a) (rest b))))))","problem":39,"user":"50ae5659e4b0a40c9cfb08d2"},{"code":"(fn my-inter [c1 c2]\n      (flatten\n        (into\n          '()\n          (zipmap c1 c2)\n          )\n        )\n      )","problem":39,"user":"536827f1e4b0243289761e8a"},{"problem":39,"code":"(fn [first_parameter second_parameter] (mapcat vector first_parameter second_parameter))","user":"5b513bd4e4b02d533a91bcf2"},{"code":"(fn [a b] \n  (mapcat \n   #(list (nth a %1) (nth b %1))\n   (range (min (count a) (count b)))))","problem":39,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":39,"code":"(fn [x y]\n  (loop [a x\n         b y\n         r []]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (conj (conj r (first a)) (first b))))))","user":"56171eade4b06b1bb2182a0c"},{"problem":39,"code":"(fn my-interleave [x y]\n  (loop [a x b y result []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (conj result (first a) (first b)))\n      result)))","user":"5852801ee4b0b7285a6f4eb1"},{"problem":39,"code":"(fn inter [list1 list2] \n  (if (or (empty? list1) \n          (empty? list2))\n    '()\n    (concat (list (first list1) (first list2))\n            (inter (rest list1) (rest list2)))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":39,"code":"(fn [a b]\n    ((fn [a b r]\n      (if (or (empty? a) (empty? b))\n        r\n        (recur (rest a) (rest b) (concat r (list (first a) (first b)))))) a b '()))","user":"5713c575e4b07c98581c3aab"},{"problem":39,"code":"(fn [& sqs] (apply (partial mapcat (fn [& els] els)) sqs))","user":"55b6a63ae4b01b9910ae299b"},{"problem":39,"code":"(fn [x y] \n  (loop [a x\n         b y\n         result '()]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur\n       (rest a)\n       (rest b)\n       (concat result (list (first a) (first b)))\n       )\n      )\n    )\n  )","user":"5bbcb71ce4b0a20761a23629"},{"problem":39,"code":"(fn myi [l1 l2]\n  (let [nb (min (count l1) (count l2))]\n    (flatten (map #(list (nth l1 %) (nth l2 %)) (range 0 nb)))))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn foo [x y]\n  (if \n    (or (= x '()) (= y '()))\n    '()\n    (conj (foo (rest x) (rest y)) (first y) (first x))\n    )\n)","problem":39,"user":"5277b9b5e4b03e8d9a4a750d"},{"problem":39,"code":"(fn __ [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (cons\n      (first l1)\n      (cons (first l2)\n        (__ (rest l1) (rest l2))))))","user":"5530baa5e4b076ab5578f81a"},{"code":"(fn [xs ys]\n  ((fn [xs ys acc]\n      (if (or (empty? xs) (empty? ys))\n        (reverse acc)\n\t(recur (rest xs) (rest ys)\n               (cons (first xs) (cons (first ys) acc)))\n        ))\n   ys xs nil))","problem":39,"user":"51b8e0dce4b050a1176cd69f"},{"problem":39,"code":"(fn my-interleave [a b]\n  (if (and (first a) (first b))\n    (lazy-cat\n      [(first a) (first b)]\n      (my-interleave (rest a) (rest b)))))","user":"5776e21de4b0979f89651642"},{"code":"(fn f [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2)) '() \n  (cons (first seq1) \n        (cons (first seq2) (f (rest seq1) (rest seq2))))\n))","problem":39,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":39,"code":"(fn [s1 s2] (let [n (min (count s1) (count s2))] (loop [i 0 res []] (if (= i n) res (recur (inc i) (conj res (s1 i) (s2 i)))))))","user":"5f3ddc71e4b004f08c61c551"},{"problem":39,"code":"(partial\n (fn [combined f s]\n  (if (or (empty? f) (empty? s))\n    combined\n    (recur (conj combined (first f) (first s)) (rest f) (rest s))))\n [])","user":"572722c4e4b0c5bde472c134"},{"problem":39,"code":"(fn [cola colb] (flatten (map #(vector %1 %2) cola colb)))","user":"5a64d12de4b0512ff01cd9a7"},{"problem":39,"code":"(fn [a b] (loop [out '() newa a newb b] (if (or (= newa '()) (= newb '())) (reverse out) (recur (conj out (nth newa 0) (nth newb 0)) (rest newa) (rest newb)))))","user":"5d2ca236e4b01671435dbc94"},{"problem":39,"code":"(fn [v1 v2]\n  (loop [v1 v1 v2 v2 result []]\n    (if (or (empty? v1) (empty? v2))\n      result\n      (recur (rest v1) (rest v2) (conj result (first v1) (first v2)))\n    )\n  )\n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":39,"code":"(fn [x y] (mapcat #(identity [%1 %2]) x y))","user":"5b9263ece4b0c0b3ffbd4a37"},{"code":"#(apply concat \n  ((fn pairs [x y] \n     (if (or (empty? x) (empty? y)) nil \n       (cons [(first x) (first y)] \n             (pairs (rest x) (rest y))))) \n   %1 %2))","problem":39,"user":"4f55ab5ee4b0a7574ea71809"},{"code":"(fn [c1 c2]\n  (reduce concat (map #(vector %1 %2) c1 c2)))","problem":39,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":39,"code":"(fn intrlv\n  [f l]\n  (if (or (empty? f) (empty? l))\n    []\n    (flatten (conj [] (first f) (first l) (intrlv (next f) (next l))))))","user":"541c516ae4b01498b1a71a73"},{"problem":39,"code":"(fn inter-leave                                                                  \n  ([x y] (inter-leave x [] y))                                                     \n  ([x l y] (if (or (= (count x) 0) (= (count y) 0))                                                                               \n             l ; If either list is emtpy return a empty list                       \n             (flatten (inter-leave (rest x) (conj (conj l (first x)) (first y)) (rest y))))))","user":"534aa5d3e4b084c2834f4a6b"},{"code":"(fn [m n]\n  (flatten (map-indexed (fn [idx itm]\n                                                        (if (< idx (count m))\n                                                             [(nth m idx) itm]\n                                                             [])) n)))","problem":39,"user":"4faac363e4b081705acca200"},{"problem":39,"code":"(fn [sq1 sq2]\n  (loop [sq-it1 sq1\n         sq-it2 sq2\n         ret-it '()]\n    (if (or (empty? sq-it1)\n            (empty? sq-it2))\n      ret-it\n      (recur (rest sq-it1)\n             (rest sq-it2)\n             (concat ret-it (list (first sq-it1) (first sq-it2)))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":39,"code":"(fn x [sa sb]\n    (loop [sa sa\n           sb sb\n           sofar []]\n      (if (or (empty? sa) (empty? sb))\n        sofar\n        (recur (rest sa) (rest sb) (conj sofar (first sa) (first sb))))))","user":"4fc57c4ce4b0ee37620e17f6"},{"problem":39,"code":"#( loop[ x %1 y %2 z [] ] (\n                           if  (or (empty? x) (empty? y) ) \n                           z\n                           ( recur (rest x) (rest y) ( conj ( conj z ( first x) ) ( first y) ) ) \n                           )\n   )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [xs ys]\n  (loop [xs xs, ys ys, rs []]\n    (if (or (empty? xs) (empty? ys)) rs\n        (let [[x & rx] xs, [y & ry] ys]\n          (recur rx ry (conj rs x y))))))","problem":39,"user":"4fe98ddae4b0547ebccb2463"},{"problem":39,"code":"(fn [lst1 lst2] (mapcat vector lst1 lst2))","user":"59e18b9be4b08badc2a0c50f"},{"code":"(fn zip[x y] (let [s (seq x), t (seq y)] (when (and s t) (cons (first s) (cons (first t) (zip (rest s) (rest t)))))))","problem":39,"user":"4f2b2c13e4b0d6649770a048"},{"problem":39,"code":"(fn [x y] (loop [alist x blist y result []]\n             (if (and (> (count alist) 0) (> (count blist) 0) )\n               (recur (rest alist) (rest blist) (conj result (first alist) (first blist)))\n               (identity result)\n               )\n             )\n   )","user":"54b90fe2e4b0ed20f4ff6e9f"},{"code":"(fn [xs ys]\n  (loop [x xs\n         y ys\n         r []]\n    (if (not (and (seq x) (seq y)))\n      r\n      (recur\n        (rest x)\n        (rest y)\n        (conj r (first x) (first y))))))","problem":39,"user":"4ecbd630535df97575fdabe1"},{"problem":39,"code":"(fn [xs ys]\n(mapcat #(list %1 %2) xs ys))","user":"57233cc8e4b0c5bde472c0e1"},{"code":"(fn [_s1 _s2] \r\n  (loop [s1 _s1, s2 _s2, res []]\r\n    (if (or (empty? s1) (empty? s2))\r\n      res\r\n     (recur (rest s1) (rest s2) (conj res (first s1) (first s2))))))","problem":39,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn [a b] (mapcat list a b ))","problem":39,"user":"4f05adae535dcb61093f6bfd"},{"problem":39,"code":"(fn [col1 col2]\n  (let [mx (min (count col1) (count col2))] \n    (loop [i (dec mx)\n           sq (conj '() (nth col2 i) (nth col1 i))]\n      (if (< 0 i) \n        (recur (dec i) (conj sq (nth col2 (dec i)) (nth col1 (dec i))))\n        sq))))","user":"558bb38fe4b0277789237631"},{"code":"#(loop [[x & xs] %\n       [y & ys] %2\n       ret []]\n  (if (and x y)    \n    (recur xs ys (conj ret x y) )\n    ret))","problem":39,"user":"527236d4e4b03e8d9a4a741f"},{"code":"(fn my-interleave\r\n  [a b]\r\n  (if (or (empty? a) (empty? b))\r\n    ()\r\n    (flatten (cons (list (first a) (first b)) (my-interleave (rest a) (rest b))))))","problem":39,"user":"509a5ca8e4b0efbae1fbc0ab"},{"code":"(fn [s1 s2]\n    (loop [[h1 & tl1 :as w1] s1 [h2 & tl2 :as w2] s2 acc []]\n        (if (or (empty? w1) (empty? w2))\n            acc\n            (recur tl1 tl2 (into acc [h1 h2])))))","problem":39,"user":"4e51c67a535d302ef430da6a"},{"problem":39,"code":"#(loop [a %1, b %2, acc []]\n   (if (or (empty? a) (empty? b))\n     acc\n     (recur (next a) (next b) (conj acc (first a) (first b)))))","user":"56e02c1ce4b0ca2494a09602"},{"problem":39,"code":"(\n    fn\n    [c1 c2] (\n        let [\n            c1l (count c1)\n            c2l (count c2)\n            cl (if (< c1l c2l) c1l c2l)\n            x (range cl)\n        ]\n     \n        (reduce #(conj % (get c1 %2) (get c2 %2)) [] x)\n    )\n)","user":"5d3b340fe4b01671435dbd63"},{"problem":39,"code":"#(mapcat (fn [c1 c2] [c1 c2]) %1 %2)","user":"4f04664a535dcb61093f6bc1"},{"problem":39,"code":"(fn inter [a & b]\n  (let [f (fn [z x y]\n            (if (or (empty? x) (empty? (first y))) z\n              (recur\n               (concat z (vector (first x)) (map first y))\n               (rest x)\n               (map rest y)\n              )\n            )\n           )\n        ]\n    (f [] a b)\n  )\n)","user":"553b90c8e4b09218d5f45005"},{"code":"(fn [l1 l2]\n  (loop [l1 l1 l2 l2 ret []]\n    (if (or (= (count l1) 0) (= (count l2) 0) )\n      ret\n      (recur\n        (rest l1)\n        (rest l2)\n        (conj (conj ret (first l1)) (first l2))\n      )\n    )\n  )\n)","problem":39,"user":"4fc8f671e4b0ee37620e1840"},{"problem":39,"code":"#(loop [coll1 %\n        coll2 %2\n        newcoll []]\n   (if (or (empty? coll1) (empty? coll2))\n     (flatten newcoll)\n     (recur (rest coll1) (rest coll2) (conj newcoll (map first [coll1 coll2])))))","user":"52ca9513e4b071a8d36bd3e4"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n         y y\n         r '()]\n    (if (or (= 0 (count x)) (= 0 (count y)))\n      (reverse (seq r))\n      (recur (rest x) (rest y) (conj (conj r (first x)) (first y))))))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"code":"(fn [x y] (loop [a x b y res []] (if (or (= () a) (= () b)) (list* res) (recur (rest a) (rest b) (conj (conj res ( first a)) (first b))))))","problem":39,"user":"51a7f74be4b08d8ec191b802"},{"code":"(comp (partial apply concat) (partial map #(list %1 %2)))","problem":39,"user":"50bfd849e4b042992946c649"},{"problem":39,"code":"(fn [a b]\n\t(mapcat #(list %1 %2) a b)\n)","user":"5a984657e4b0d174b936c78a"},{"problem":39,"code":"(comp reverse   #(loop [result '()  c1 %1 c2 %2]\n                     (if (or (empty? c1) (empty? c2))\n                       result\n                       (recur (conj result (first c1) (first c2)) (rest c1) (rest c2))\n                       )))","user":"5a71c89ee4b0512ff01cda93"},{"problem":39,"code":"(fn f [s1 s2] (if (or (empty? s1) (empty? s2)) [] (cons (first s1) (cons (first s2) (f (rest s1) (rest s2))))))","user":"58fdd7b7e4b0438e51c2cfc0"},{"code":"(fn [x y]\n   (loop [a x b y l []]\n     (if (not (and (seq a) (seq b)))\n       l\n       (recur \n         (rest a) \n         (rest b) \n         (conj l (first a) (first b))))))","problem":39,"user":"53164bf6e4b08068f379ed44"},{"code":"(fn p39 [x1 y1]\n  (if (or (empty? x1) (empty? y1))\n    (empty x1)\n    (cons (first x1)\n          (cons (first y1)\n                (p39 (rest x1) (rest y1))))))","problem":39,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"problem":39,"code":"(fn [p q]\n  (reduce concat (map #(list % %2) p q)))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":39,"code":"(fn interleaven [s t]\n  (if (not (or (empty? s) (empty? t)))\n    (let [i (seq [(first s) (first t)]) u (rest s) v (rest t)]\n      (if (or (empty? u) (empty? v))\n        i\n        (lazy-cat i (interleaven u v))))))","user":"57f904c5e4b0d3187e900936"},{"problem":39,"code":"(fn [& cols] (reduce into [] (apply map vector cols)))","user":"59aeed59e4b0e1f4e384c8ab"},{"problem":39,"code":"(fn [seq-x, seq-y]\n  (letfn [(merge-seq [seq-x, seq-y]\n            (if (or (empty? seq-x)  (empty? seq-y))\n              []\n              (concat [(first seq-x) (first seq-y)] (merge-seq (rest seq-x) (rest seq-y)))))]\n    (merge-seq seq-x seq-y)))","user":"57d9bca1e4b0bd073c202405"},{"problem":39,"code":"(fn [c1 c2]\n  (loop [c1 c1\n         c2 c2\n         accum nil]\n    (if (or (empty? c1)\n            (empty? c2))\n      (reverse accum)\n      (recur (rest c1) (rest c2) (conj accum (first c1) (first c2))))))","user":"54487527e4b032a45b8693cc"},{"problem":39,"code":"(fn [a b] \n  (loop [as a\n         bs b\n         acc '[]]\n    (if (or (empty? as) (empty? bs))\n      acc\n      (recur (rest as) (rest bs) (conj (conj acc (first as)) (first bs)))\n      ))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":39,"code":"(fn [ls [a & b] [c & d]]\n  (if (and b d)\n    (recur (into ls [a c]) b d)\n    (into ls [a c]))) []","user":"56eb5c76e4b04a395b9a0422"},{"code":"(fn fc [seq1 seq2]\n  (loop [x seq1, y seq2, result []]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (conj result (first x) (first y)))\n)))","problem":39,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [a b]\n  (apply concat (map list a b))\n  )","problem":39,"user":"50f4894be4b004d364930528"},{"code":"(fn myinterleave [coll1 coll2]\r\n  (flatten (map (fn [a b] (list a b)) coll1 coll2)))","problem":39,"user":"4fd170fce4b04c3a95aa0411"},{"problem":39,"code":"(fn [first-seq second-seq]\n  (loop [x first-seq y second-seq combined []]\n    (if (or (empty? x) (empty? y))\n        combined\n        (recur (rest x) (rest y) (conj (conj combined (first x)) (first y))))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":39,"code":"(fn f [coll-1 coll-2]\n  (loop [res [] xs coll-1 ys coll-2]\n    (if (or (empty? xs) (empty? ys))\n      res\n      (recur (into res [(first xs) (first ys)])\n             (rest xs)\n             (rest ys)))))","user":"571107b3e4b09c608db7043f"},{"code":"(fn il [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (lazy-seq\n      (cons\n        (first xs)\n        (cons\n          (first ys)\n          (il (rest xs) (rest ys)))))))","problem":39,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [l1 l2] \n  ((fn h [res l1 l2] \n    (let \n      [h1 (first l1) h2 (first l2)]\n      (if (or (= h1 nil) (= h2 nil))\n      res\n      (cons h1 (cons h2 (h res (rest l1) (rest l2))))))) '() l1 l2))","problem":39,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn [xs ys]\n  (mapcat #(apply list %&) xs ys))","problem":39,"user":"511f9625e4b085952a835362"},{"code":"(fn [x y]\n  (loop  [a x b y acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","problem":39,"user":"4e7d2448535db169f9c796c8"},{"code":"(fn [m1 m2] (mapcat #(vector %1 %2) m1 m2))","problem":39,"user":"4fdb02aae4b05e33b9224f56"},{"problem":39,"code":"(fn [colla collb]\n  (reduce concat (map vector colla collb)))","user":"5462caf5e4b01be26fd746b7"},{"problem":39,"code":"(fn [a b]\n  (loop [fir a sec b lst ()]\n    (if (or (empty? fir) (empty? sec)) (reverse lst)\n      (recur (rest fir) (rest sec) (conj lst (first fir) (first sec))))))","user":"563130e4e4b0bfe05bf1178d"},{"code":"(fn [s1 s2]\n  (loop [res '()\n         rs1 s1\n         rs2 s2]\n         (if (and (> (count rs1) 0) (> (count rs2) 0) )\n             (recur (conj res (first rs1) (first rs2)) (rest rs1) (rest rs2))\n             (reverse res))))","problem":39,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":39,"code":"(fn solve [x, y]\n  (if (or (= x ()) (= y ()))\n    ()\n    (conj (solve (rest x) (rest y)) (first y) (first x))\n  )\n)","user":"56f258d3e4b04a395b9a04a1"},{"code":"(fn i[s1 s2]\n  (loop [a s1 b s2 c []]\n    (if (or (nil? a) (nil? b))\n       c\n       (recur (next a) (next b)\n              (conj c (first a) (first b))))))","problem":39,"user":"4e842ebb535db62dc21a62df"},{"code":"(fn inter [x y] (reverse (flatten (seq (zipmap y x)))))","problem":39,"user":"4f1f8fae535d64f6031464a3"},{"code":"(fn interleave2 ([col1 col2] \r\n           (let [s1 (seq col1) s2 (seq col2)]\r\n           (when (and s1 s2)\r\n             (cons \r\n               (first col1) \r\n               (cons \r\n                 (first col2) \r\n                 (interleave2 (rest col1) (rest col2))))))) \r\n           )","problem":39,"user":"4ee7d113535d93acb0a6686e"},{"problem":39,"code":"(fn [s1 s2]\n        (loop [l1 s1 l2 s2 res '[]]\n          (cond (or (empty? l1) (empty? l2))\n                res\n                :else \n                (recur (rest l1)(rest l2)\n                       (conj (conj res (first l1))(first l2))))))","user":"56011393e4b04bb52996e178"},{"problem":39,"code":";;(partial mapcat #(identity [% %2]))\n\n(partial mapcat list)","user":"540e0637e4b0addc1aec6717"},{"problem":39,"code":"(fn foo [x y] (if (nil? x) '() (if (nil? y) '() (concat [(first x) (first y)] (foo (next x) (next y))))))","user":"5cece5a2e4b0a17bb84e2bfb"},{"code":"#(loop [x % y %2 r []]\n\t\t(if (and x y)\n\t\t\t(recur (next x) (next y) (conj r (first x) (first y)))\n\t\t\tr))","problem":39,"user":"4f047542535dcb61093f6bc7"},{"code":"(fn il [coll1 coll2] (if (not (or (empty? coll1) (empty? coll2))) (concat [(first coll1) (first coll2)] (il (rest coll1) (rest coll2)))))","problem":39,"user":"53629381e4b0243289761e54"},{"problem":39,"code":"(fn inter [s1 s2]  \n  (let [minsize (min (count s1) (count s2))] \n     (reduce (fn [latest-collection next-value]                                                                                   \n       (conj latest-collection (.get s1 next-value) (.get s2 next-value))) [] (range minsize)\n             )\n    )\n  )","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":39,"code":"(comp (partial apply concat) map) vector","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1, s2 seq2, acc []]\n    (if (or (empty? s1) (not (coll? s1)) (empty? s2) (not (coll? s2)) )\n       acc\n       (recur (rest s1) (rest s2) (concat acc [(first s1) (first s2)])\n))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":39,"code":"(fn [a1 a2] (letfn [(foo [a1 a2 res] (if (or (empty? a1) (empty? a2)) res (recur (rest a1) (rest a2) (conj res (first a1) (first a2)))))] (foo a1 a2 [])))","user":"5b5f2566e4b0c6492753e6e9"},{"problem":39,"code":"(fn new-interleave [a b]\n   (if (and (not-empty a) (not-empty b))\n     (lazy-seq (cons (first a) (cons (first b) (new-interleave (rest a) (rest b)))))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":39,"code":"(fn interl ([seq1 seq2] (interl seq1 seq2 '() ))\n           ([seq1 seq2 accu] \n             (if\n               (or\n                 (empty? seq1) \n                 (empty? seq2))\n                   (reverse accu) \n                   (let [f1 (first seq1)\n                          f2 (first seq2)\n                          r1 (rest seq1)\n                          r2 (rest seq2)]\n                          (interl r1 r2 (cons f2 \n                                          (cons f1 accu)))))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"#(loop [col1 %1 col2 %2 result ()]\n            (if (or (empty? col1) (empty? col2))\n              result\n              (recur (rest col1)(rest col2)(concat result (list (first col1) (first col2))))))","problem":39,"user":"518ccf6be4b05e6c8537e386"},{"problem":39,"code":"(fn [col1 col2]\n  (reverse\n    (loop [rcol1 col1 rcol2 col2 res nil]\n      (if (or (empty? rcol1) (empty? rcol2))\n        res\n        (recur (rest rcol1) (rest rcol2) (conj res (first rcol1) (first rcol2)))))))","user":"5da8b8ece4b000c986472c28"},{"code":"(fn f [[x & xs :as coll1] [y & ys :as coll2]]\r\n  (if (or (not x) (not y))\r\n    []\r\n    (cons x (cons y (f xs ys)))))","problem":39,"user":"4e113a81535d04ed9115e7c5"},{"problem":39,"code":"(fn [s1 s2]\n   (loop [s1 s1 s2 s2 result (vector)]\n     (if (or (empty? s1) (empty? s2))\n       result\n       (recur (rest s1) (rest s2) (conj (conj result (first s1)) (first s2))))))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":39,"code":"(fn [coll1 coll2]\n  (flatten (map list coll1 coll2)))","user":"543b5bc6e4b032a45b86932d"},{"problem":39,"code":"(comp flatten (partial map #(vec [%1 %2])))","user":"58923efce4b00487982d521c"},{"code":"(fn f [x y]\n   (loop [x x y y a '()]\n     (if (or (empty? x)\n             (empty? y))\n         (reverse a)\n         (recur (rest x) (rest y)\n                (cons (first y)\n                       (cons (first x)\n                       \t    a))))))","problem":39,"user":"4feef09ae4b0678c553fc30e"},{"problem":39,"code":";mapcat #(list %1 %2)\nmapcat list","user":"55b1b67ce4b0da326a65cf6f"},{"code":"(fn i[[x & xs] [y & ys]] \n  (if (and x y) \n    (conj (i xs ys) y x) \n    '()))","problem":39,"user":"4f1fd734535d64f6031464a5"},{"problem":39,"code":"(fn my-zip [[x & xs :as all] [y & ys]]\n  (if (and x y) (cons x (cons y (my-zip xs ys)))))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"(fn intl [a b]\n  (apply concat (map #(list (nth a %) (nth b %)) (range (let [ca (count a) cb (count b)] (if (> ca cb) cb ca)))\n                                                      )\n                   )\n         )","problem":39,"user":"52b9c5e8e4b07a9af57922c2"},{"code":"(fn zip [A B]\n  (if (or (empty? A) (empty? B)) '()\n    (flatten (list (first A) (first B) (zip (rest A) (rest B))))))","problem":39,"user":"51ad0ab8e4b09397d510977b"},{"problem":39,"code":"(fn interleave-two-seqs [xs ys]\n  (mapcat list xs ys))","user":"518b8561e4b0f028e99addef"},{"problem":39,"code":"#(apply concat (map vector %1 %2) )","user":"5b917764e4b0c0b3ffbd4a1f"},{"problem":39,"code":"(fn [c1 c2] (mapcat vec (reverse (zipmap c1 c2))))","user":"5629de63e4b00e49c7cb4812"},{"problem":39,"code":"(fn inter \n  [s1 s2]\n  (if\n    (or\n     (empty? s1)\n     (empty? s2))\n    []\n    (cons (first s1) (cons (first s2) (inter (rest s1) (rest s2))))\n  )\n)","user":"593f88dce4b069cdc2982be2"},{"problem":39,"code":"#(loop [i 0\n       m (min (count %1) (count %2))\n       r []]\n  (if (>= i (* 2 m)) r (recur (inc i) m (conj r (nth (if (even? i) %1 %2) (quot i 2))))))","user":"525b142fe4b0cb4875a45d05"},{"problem":39,"code":"(fn itrlv\n\t([lst1 lst2]\n\t\t(itrlv lst1 lst2 '()))\n\t([lst1 lst2 result]\n\t\t(if (or (empty? lst1) (empty? lst2))\n\t\t\t(reverse result)\n\t\t\t(itrlv (rest lst1) (rest lst2) (conj result (first lst1) (first lst2))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":39,"code":"(fn [a b] (reduce #(conj (conj %1 (get %2 0)) (get %2 1)) [] (map vector a b)))","user":"5eb4927fe4b00a66d4a95221"},{"problem":39,"code":"(fn interl [xs ys]\n  (if (and xs ys)\n    (concat (vector (first xs) (first ys)) (interl (next xs) (next ys)))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":39,"code":"(fn [xs ys]\n  (loop [res []\n         xd xs\n         yd ys]\n    (if (or (= xd ()) (= yd ()))\n        res\n        (recur (conj res (first xd) (first yd)) (rest xd) (rest yd)))))","user":"548fa2dfe4b0e286459a1240"},{"problem":39,"code":"(fn m\n  ([k l]\n   (m () k l))\n  ([r k l]\n   (if (or (empty? k) (empty? l))\n     r\n     (m (concat\n         r\n         (list (first k))\n         (list (first l)))\n        (rest k)\n        (rest l)))))","user":"5829bc55e4b051871117bf49"},{"problem":39,"code":"(fn [l1 l2] (flatten (map #(list %1 %2) l1 l2)))","user":"54df3c94e4b024c67c0cf7aa"},{"code":"(fn interleave_ [x y]\n  (loop [x x y y result []]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (into result [(first x) (first y)])))))","problem":39,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn [x y] (flatten (reduce conj [] (map vector x y))))","problem":39,"user":"4f614976e4b0defedf855fbb"},{"code":"(fn [a b] (reduce #(concat %1 (filter (complement nil?) %2)) [] (map #(vector %1 %2) a b)))","problem":39,"user":"537d0151e4b06839e8705e84"},{"problem":39,"code":"(fn foo [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (let [[x & xs] s1\n          [y & ys] s2]\n      (conj (conj (foo xs ys) y) x))))","user":"600ae927e4b074f607df6689"},{"code":"(fn inter [lst1 lst2]\n    (loop [acc [] l1 lst1 l2 lst2]\n        (if (or (empty? l1) (empty? l2))\n            acc\n            (recur (conj acc (first l1) (first l2)) (rest l1) (rest l2))))\n)","problem":39,"user":"52c17e42e4b07a9af5792367"},{"problem":39,"code":"(fn two-seq [i o]\n  (loop [m (if (<= (count i) (count o))\n             (count i)\n             (count o))\n         n 0\n         x '()]\n    (if (= m n)\n      x\n      (recur m\n       (inc n)\n       (concat x\n               [(nth i n)]\n               [(nth o n)])))))","user":"5018878ce4b029375d2a5056"},{"problem":39,"code":"(fn intrleave [xs ys]\n  (loop [acc [] xs-prime xs ys-prime ys]\n    (if (or (empty? xs-prime) (empty? ys-prime))\n      acc  \n      (recur (concat acc [(first xs-prime) (first ys-prime)]) (rest xs-prime) (rest ys-prime))\n    )\n  )\n)","user":"5a8e9fb5e4b05369db4d2529"},{"problem":39,"code":"(fn meep [a b] (if (and (not-empty a) (not-empty b)) (concat [(first a) (first b)] (meep (rest a) (rest b))) []))","user":"53cff414e4b00fb29b221304"},{"problem":39,"code":"(fn i [a b]\n    (let [a (seq a) b (seq b)]\n      (when (and a b)\n          (cons (first a) (cons (first b)\n                             (i (rest a) (rest b)))))))","user":"586e47dee4b01531a375e9a9"},{"problem":39,"code":"(fn [coll1 coll2]\n  (->> (map vector coll1 coll2)\n       (flatten))\n  )","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [a b]\n  (loop [[x & xs] a\n         [y & ys] b\n         accum []]\n    (let [accumulator (conj accum x y)] \n      (if (and xs ys)\n        (recur xs ys accumulator)\n        accumulator))))","problem":39,"user":"4ea68edb535d7eef308072e6"},{"problem":39,"code":"(fn ileave [x y]\n  (let [cnt (min (count x) (count y))]\n    (letfn [(ileave-impl [a b]\n              (if (empty? a)\n                nil\n                (concat (list (first a) (first b))\n                        (ileave-impl (rest a) (rest b)))))]\n      (ileave-impl (take cnt x) (take cnt y)))))","user":"55664950e4b0c656e3ff1832"},{"problem":39,"code":"#(let [l1c (count %1) l2c (count %2) c (min l1c l2c)]\n    (loop [t 0 new_list []]\n      (if (< t c)\n        (recur (inc t) (conj new_list (nth %1 t) (nth %2 t)))\n        new_list)))","user":"57ecc16fe4b0bfb2137f5b83"},{"code":"(fn [s1 s2] (apply concat (\n\t\t\t\tmap \n\t\t\t\t  (fn [i] \n                    (list (nth s1 i nil) (nth s2 i nil))) \n\t\t\t\t  (range 0 (min (count s1) (count s2))))))","problem":39,"user":"51558136e4b06c5f6a1490a8"},{"problem":39,"code":"(fn [xs ys] (letfn [(ileaf [acc as bs] (if (or (empty? as) (empty? bs)) acc (ileaf (conj acc (first as) (first bs)) (rest as) (rest bs) ) ))] (ileaf (empty xs) xs ys)))","user":"57f9011ee4b0d3187e900935"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [col1 col1\n         col2 col2\n         combined '()]\n    (if (and (seq col1)\n             (seq col2))\n      (recur (rest col1)\n             (rest col2)\n             (cons (first col2) (cons (first col1) combined)))\n      (reverse combined))))","user":"5382b433e4b06839e8705ed7"},{"code":"(fn my-interleave [& args]\n  (flatten (apply map list args)))\n;;(apply mapcat list args))","problem":39,"user":"531cdafbe4b08068f379edaa"},{"code":"(fn aa[xs ys]\n  (let [x (first xs) y (first ys)]\n    (if (and x y)\n      (flatten\n       (list x y (aa (rest xs) (rest ys ))))\n      '())))","problem":39,"user":"52b63875e4b0c58976d9ad41"},{"problem":39,"code":"(fn inter [a b]\n  (lazy-seq\n   (when-not (or (empty? a) (empty? b))\n     (cons (first a) (cons (first b)\n                            (inter (rest a) (rest b)))))))","user":"607dd962e4b03d835a6eaed2"},{"code":"(fn [& colls]\n  (apply concat (apply map vector colls)))","problem":39,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":39,"code":"(fn interlv [[x & xs] [y & ys]]\n  (if (or (empty? xs)\n          (empty? ys))\n    (list x y)\n    (concat (list x y) (interlv xs ys))))","user":"5f2d6787e4b033932238a66d"},{"problem":39,"code":"#(reduce into () (zipmap %2 %1))","user":"57615a22e4b0994c1922fb88"},{"problem":39,"code":"#(mapcat list %1 %2)\n\n;; (fn [x y]\n;;     (let [get-rst (fn iter [xs ys res]\n;;                     (if (or (empty? xs) (empty? ys))\n;;                       res\n;;                       (iter (rest xs)\n;;                             (rest ys)\n;;                             (concat res (cons (first xs) (cons (first ys) ()))))))]\n;;       (get-rst x y '())))\n\n;; (fn intrl [x y]\n;;     (loop [s1 x s2 y rslt '()]\n;;       (if (or (empty? s1) (empty? s2))\n;;         (reverse rslt)\n;;         (recur (rest s1) (rest s2) (conj rslt (first s1) (first s2))))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":39,"code":"(fn [& args]\n  (flatten (apply map list args)))","user":"55702247e4b09a3098a5252a"},{"problem":39,"code":"(fn mi\n  ([xs ys] (mi xs ys []))\n  ([xs ys a] (if (and (first xs) (first ys))\n                (mi (rest xs) (rest ys) (conj a (first xs) (first ys)))\n                a)))","user":"56b280e3e4b0982f16b37e06"},{"code":"(fn [s1 s2]\n  (loop [r [] s1 s1 s2 s2]\n    (if (or (empty? s1) (empty? s2))\n      r\n      (recur\n        (conj r (first s1) (first s2))\n        (rest s1)\n        (rest s2)))))","problem":39,"user":"4ea67906535d7eef308072e4"},{"code":"(fn [coll1 coll2] \n  (loop [s1 coll1 s2 coll2 result []] \n    (if (or (empty? s1) (empty? s2) ) result \n        (recur (rest s1) (rest s2) \n               (conj (conj result (first s1)) (first s2) ) ) ) ) )","problem":39,"user":"50fec710e4b0219f3bc8bd97"},{"problem":39,"code":"(fn [v a]\n  (loop [x v\n         y a\n         z (empty v)]\n    (if (empty? x)\n      z\n      (if (empty? y)\n        z\n        (recur \n         (rest x)\n         (rest y)\n         (conj z        \n          (first x)\n          (first y)))))))","user":"589772f7e4b00487982d52be"},{"code":"(fn blank [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2)\n                              (blank (rest s1) (rest s2))))))))","problem":39,"user":"51a91ac2e4b08d8ec191b822"},{"problem":39,"code":"(fn f [l m] (if (or (empty? l) (empty? m)) []\n                       (concat (list (first l) (first m)) (f (rest l) (rest m)))))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"problem":39,"code":"(fn [a b] (apply concat (map (fn [x y] [x y]) a b)))","user":"542dc7c7e4b0dad94371f2bd"},{"problem":39,"code":"(fn [sq1 sq2]\n    (flatten (map (fn [i1 i2] [i1 i2]) sq1 sq2))\n    )","user":"571a282ae4b07c98581c3b46"},{"code":"#(apply concat \n        (for [i (range 0 (min (count %1) (count %2)))] \n          (list (%1 i) (%2 i))))","problem":39,"user":"512eb1e7e4b0b740abc5982a"},{"problem":39,"code":"#(loop [x %1 y %2 s []] \n   (if (and (> (count x) 0 ) \n            (> (count y) 0))\n    (recur (rest x) (rest y ) (concat s [(first x) (first y)]))     s))","user":"55ac16a0e4b03311e7b73291"},{"problem":39,"code":"(fn [& _args]\n  (loop [a [] args _args]\n     (if (some empty? args)\n      a\n      (recur (concat a (map first args)) (map rest args)) \n       )))","user":"554c0adde4b0a04f7929959e"},{"problem":39,"code":"(fn elginterleave [seq1 seq2]\n   (cond (and (empty? seq1) (empty seq2)) nil\n        (empty? seq1) seq2\n        (empty? seq2) nil\n        :else\n        (conj (elginterleave (rest seq1) (rest seq2)) (first seq2) (first seq1))\n      \n      )\n\n  )","user":"55a65872e4b09e57187da299"},{"problem":39,"code":"(fn [xs ys] (apply concat (map (fn [x y] [x y]) xs ys)))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":39,"code":"mapcat #(conj (conj '() %2) %1)","user":"566a6e38e4b0a866af68969b"},{"code":"#(apply concat (apply map list  %&))","problem":39,"user":"527b9beee4b03e8d9a4a7590"},{"code":"(fn [x y]\n  (loop [result (), one x, two y]\n    (if (not (or (empty? one) (empty? two)))\n      (let [cat-result (concat result (concat (list (first one)) (list (first two))))]\n        (recur cat-result (rest one) (rest two)))\n      result)))","problem":39,"user":"502940a9e4b061fd216be4b8"},{"problem":39,"code":"(fn [coll1 coll2] \n\t(flatten \n\t\t(map list \n\t\t\tcoll1 coll2))\n\t\n\t)","user":"5ac04101e4b073f177442737"},{"code":"mapcat list\n;http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/mapcat","problem":39,"user":"505b9084e4b032b709c81371"},{"problem":39,"code":"(fn [& my-arrays]\n  (loop [my-array my-arrays final '()]\n    (if (every? false? (map empty? my-array))\n      (recur (map rest my-array) (concat final (map first my-array)))\n      final\n      )\n    )\n  )","user":"5dc9c070e4b02f9375f4e1ee"},{"code":"(fn razb [s p]\r\n  (if (empty? s)\r\n    '()\r\n  (if (empty? p)\r\n    '()\r\n    (concat [(first s) (first p)] (razb (rest s) (rest p))\r\n))))","problem":39,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn my-interleave [xs ys]\n  (if (and (seq xs) (seq ys))\n    (concat [(first xs) (first ys)] (my-interleave (rest xs) (rest ys)))\n    []\n  )\n)","problem":39,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn inter [c1 c2]\n  (lazy-seq \n   (when (and (seq c1) (seq c2))\n     (cons (first c1) (cons (first c2) (inter (next c1) (next c2)))))\n   ))","problem":39,"user":"51696ee7e4b03f62cda68ce8"},{"problem":39,"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '[]\n    (cons (first xs) (cons (first ys) (inter (rest xs) (rest ys))))))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":39,"code":"(fn inter [sequ1 sequ2]\n    (flatten (map list sequ1 sequ2)))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [& s] (apply mapcat (cons #(vector %1 %2) s)))","problem":39,"user":"4e951f44535dbda64a6f6b30"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [[head1 & tail1] coll1\n         [head2 & tail2] coll2\n         result []]\n    (if (or (nil? head1) (nil? head2))\n      result\n      (recur tail1 tail2 (conj result head1 head2))\n    )\n  )\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":39,"code":"(fn il\n  [out fi si]\n  (if (and (first fi) (first si))\n    (recur (conj out (first fi) (first si)) (rest fi) (rest si))\n    \n    (reverse out)\n  )) '()","user":"54258a7fe4b01498b1a71b0c"},{"problem":39,"code":"(fn [xs ys]\n      (loop [xrem xs\n             yrem ys\n             nn []]\n        (let [nx (first xrem)\n              ny (first yrem)]\n          (if-not (and nx ny)\n            nn\n            (recur (rest xrem) (rest yrem) (conj nn nx ny )))         \n          )\n        ))","user":"5da07698e4b000c986472bd3"},{"problem":39,"code":"(fn [x y]\n   (flatten (map vector x y)))","user":"5991eec7e4b0866487ed0d6e"},{"problem":39,"code":"#(loop [x %1\n        y %2\n        r []]\n   (if (and (seq x) (seq y))\n      (recur (rest x)\n             (rest y)\n             (into r [(first x) (first y)]))\n      r))","user":"5ac834f4e4b0e27600da77ab"},{"problem":39,"code":"(fn [r, s]\n\t(loop[result [] left r right s]\n\t\t(if (or (empty? left) (empty? right))\n\t\t\tresult\n\t\t\t(recur (conj result (first left) (first right)) (rest left) (rest right)))))","user":"57644395e4b0994c1922fbf2"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [[first1 & rest1] s1\n         [first2 & rest2] s2\n         memo []]\n    (if (or (nil? first1) (nil? first2))\n      memo\n      (recur rest1 rest2 (conj memo first1 first2)))))","user":"5592dc6be4b0c79f6e1db935"},{"problem":39,"code":"(fn [seq-a seq-b] (flatten (map list seq-a seq-b)))","user":"56e48302e4b03a7c14b85a4e"},{"code":"(fn [coll1 coll2]\n  (flatten (map vector coll1 coll2)))","problem":39,"user":"4eb51942535d7eef30807365"},{"code":"(fn intl [a b]\n  (if (and (seq a) (seq b))\n    (concat [(first a) (first b)] (intl (rest a) (rest b)))\n    []))","problem":39,"user":"4ef57a7f535dced4c769f246"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [target [] remainings1 s1 remainings2 s2]\n    (if (or (empty? remainings1) (empty? remainings2))\n      target\n      (recur (conj target (first remainings1) (first remainings2)) (rest remainings1) (rest remainings2))\n      )\n  )\n)","user":"53ef5c13e4b0742d9025b0cb"},{"problem":39,"code":"(fn interl [[x & xs] [y & ys]]\n  (if (and x y)\n    (concat [x y] (interl xs ys))\n    []))","user":"55ccdc6be4b0e31453f64a18"},{"problem":39,"code":"(fn [ x  y]\n  (loop [ c (min (count x) (count y)) \n          a x\n          b y\n         r []]\n    (if (= c 0)\n      r\n      (recur (dec c) (rest a) (rest b) (conj (conj r (first a)) (first b))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [& colls]\n  (apply mapcat list colls))","problem":39,"user":"53121863e4b08068f379ecf3"},{"problem":39,"code":"(fn [x y] (reduce #(into %1 %2) [] (map #(list %1 %2) x y)))","user":"5f660554e4b02876ed9fd027"},{"problem":39,"code":"#(loop [x %1 y %2 new []] (if (or (empty? x) (empty? y)) new (recur (rest x) (rest y) (concat new [(first x) (first y)]))))","user":"5233564ae4b0f0b72fabf403"},{"code":"#(letfn [(f [c1 c2 acc]\n  (if (or (empty? c1) (empty? c2)) acc (recur (rest c1) (rest c2) (conj acc (first c1) (first c2)))))]\n\t(f %1 %2 []))","problem":39,"user":"4ef5c7ce535dced4c769f248"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b))\n              '()\n              (concat [(first a) (first b)] (f (rest a) (rest b)))))","user":"54f97e22e4b01ecee9d8883a"},{"code":"(fn [c1 c2] \n  (loop [i 0 res []] \n    (if (>= i (min (count c1) (count c2)))\n      res \n      (recur (inc i) (conj res (nth c1 i) (nth c2 i))))))","problem":39,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":39,"code":"#(flatten (into (list) (zipmap %1 %2)))","user":"5446ebc2e4b032a45b8693b8"},{"problem":39,"code":"(fn [a b]\n  (let [mx (min (count a) (count b))]\n    (loop [c 0 r []]\n      (if (= c mx)\n        r\n        (recur (inc c) (conj r (nth a c) (nth b c)))))))","user":"541c1e46e4b01498b1a71a70"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map #(list %1 %2) seq1 seq2)))","user":"50310713e4b05b7df5a0b84c"},{"problem":39,"code":"(fn [xs ys]\n   (loop [x xs y ys z []]\n     (if (not (or (empty? x) (empty? y)))\n       (recur (rest x) (rest y) (concat z [(first x) (first y)]))\n       z)))","user":"5515649fe4b055c2f668d4e3"},{"code":"(fn [c1 c2] (flatten (seq (map vector c1 c2))))","problem":39,"user":"52c3a453e4b0c2d177d620c7"},{"code":"#(loop [xs %1 ys %2 current []] (if (or (= nil (first xs)) (= nil (first ys))) current (recur (rest xs) (rest ys) (conj (conj current (first xs)) (first ys)))))","problem":39,"user":"52fa250ee4b047fd55836ff3"},{"problem":39,"code":"#(loop [lst '[] a %1 b %2] (if (or (empty? a) (empty? b)) lst \n                             (recur (conj (conj lst (first a)) (first b)) (rest a) (rest b))))","user":"5f727cb0e4b02876ed9fd08e"},{"problem":39,"code":"#(loop [x %1 \n          y %2\n          r []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (conj r (first x) (first y)))\n      r))","user":"5753b6c6e4b02ea1147992af"},{"problem":39,"code":"(fn [i1 i2] (mapcat identity  (map (fn [ & args ] args) i1 i2)))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn [l1 l2]\n   (loop [r1 l1 r2 l2 a ()]\n     (if (and (> (count r1) 0)\n              (> (count r2) 0))\n       (recur (rest r1) (rest r2) (conj a (first r1) (first r2)))\n       (reverse a))))","problem":39,"user":"51fa90aae4b0f1313d4689e0"},{"problem":39,"code":"(fn fib [fir sec]\n  (loop [fir fir\n         sec sec\n         newA []]\n    (if (or (zero? (count fir)) (zero? (count sec)))\n      newA\n      (recur (drop 1 fir) (drop 1 sec) (conj newA (first fir) (first sec)))\n    )\n  )\n)","user":"5ce44ee2e4b0a17bb84e2b57"},{"code":"(fn iv [xs ys]\r\n  (if (or (empty? xs) (empty? ys))\r\n    nil\r\n    (let [[x & rxs] xs\r\n          [y & rys] ys]\r\n      (concat [x y] (iv rxs rys)))))","problem":39,"user":"4dfd4ba8535d04ed9115e781"},{"problem":39,"code":"(fn [a b] (mapcat (fn [x] (conj () (get b x) (get a x))) (range (min (count a) (count b)))))","user":"5242e1dae4b076204b44fa96"},{"problem":39,"code":"(fn r [[x & xs][y & ys]] (if (and x y) (cons x (cons y (r xs ys)))))","user":"56946d43e4b0dcc4269f411e"},{"problem":39,"code":"(fn ap-interleave [a b]\n  (mapcat list a b))","user":"580d2788e4b0849f6811b730"},{"code":"(fn int [xs ys]\n    (cond (empty? xs) ()\n          (empty? ys) ()\n          :else\n          (let [[x & xs] xs,\n                [y & ys] ys]\n            (cons x (cons y (int xs ys))))))","problem":39,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":39,"code":"(fn lol [xs ys]\n  (if (or  (empty? xs) (empty? ys))\n    nil\n    (concat  [(first xs)] [(first ys)] (lol (rest xs) (rest ys)))))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn il [coll1 coll2]\n  (reverse (loop [c1 coll1\n         c2 coll2\n         current '()]\n       (if (or (= (count c1) 1)\n               (= (count c2) 1))\n         (conj current (first c1) (first c2))\n         (recur (rest c1) (rest c2) (conj current (first c1) (first c2)))))))","problem":39,"user":"52e25beee4b09f7907dd1433"},{"code":"(fn [s a]\n  (flatten(reverse (zipmap s a))))","problem":39,"user":"51eb3aace4b0f1f103a0d159"},{"problem":39,"code":"#(\n  mapcat (fn [x y] [x y]) %1 %2\n  )","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn inter-e\n  [x y]\n  (loop [a x\n         b y\n         result '()]\n    (cond\n      (or (empty? a) (empty? b)) (reverse result)\n      :else (recur\n              (rest a)\n              (rest b)\n              (conj (conj result (first a)) (first b))))))","problem":39,"user":"52084f75e4b01ce6bbf31dde"},{"problem":39,"code":"(fn ilv [a b] (let [ah (first a)\n                    bh (first b)] (cond (nil? ah) '()\n                                        (nil? bh) '()\n                                        :else (concat (list ah bh)\n                                                      (ilv (rest a) (rest b))\n                                  ))))","user":"6087cb25e4b0ae75613dced8"},{"code":"(fn [& xs] (apply concat (apply map list xs)))","problem":39,"user":"50fe2b87e4b03cd852b4e84b"},{"problem":39,"code":"(fn myinterleave\n      [c1 c2]\n      (lazy-seq\n        (let [s1 (seq c1) s2 (seq c2)]\n          (when (and s1 s2)\n            (cons (first s1) (cons (first s2)\n                                   (myinterleave (rest s1) (rest s2))))))))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         result '()]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (concat result (list (first s1)) (list (first s2)) )))))","problem":39,"user":"504dffe2e4b078edc5f5938b"},{"code":"(fn [xs ys]\n  (mapcat vector xs ys))","problem":39,"user":"4f0b3c88535d0136e6c22301"},{"problem":39,"code":"(fn ileave [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2) \n                              (ileave (rest s1) (rest s2))))))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":39,"code":"(fn il [xs ys] (if (or (empty? xs) (empty? ys)) () (conj (il (rest xs) (rest ys)) (first ys) (first xs))))","user":"6089bc95e4b0ae75613dcef5"},{"code":"(fn [f s]\n  (flatten (map #(vector % %2) f s)))","problem":39,"user":"524ad140e4b09eba1c0223a9"},{"problem":39,"code":";(fn [xx yy]\n;  (loop [[x & xs] xx\n;         [y & ys] yy\n;         acc []]\n;    (if (or (nil? x) (nil? y))\n;      acc\n;      (recur xs ys (conj acc x y)))))\n \n#(mapcat list %1 %2)","user":"5f6a583ae4b02876ed9fd046"},{"code":"(fn [sa sb]\n  (loop [s1 sa s2 sb result '() ]\n    (if (or (empty? s1) (empty? s2) )\n      (reverse result)\n      (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) result )))\n    )\n  )\n)","problem":39,"user":"51fb4a9be4b0f1313d4689ff"},{"code":"mapcat #(concat %&)","problem":39,"user":"5034b623e4b062bc5d7ae168"},{"code":"(fn foo [a b] \r\n    (when \r\n      (and (seq a) (seq b)) \r\n      (flatten (filter identity (vector (first a)\r\n                                        (first b)   \r\n                                        (foo \r\n                                          (rest a)\r\n                                          (rest b)))))\r\n    )\r\n  )","problem":39,"user":"50699475e4b01dc6af13f834"},{"code":"(fn interleav [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (interleav (rest s1) (rest s2))))))))","problem":39,"user":"5162d424e4b004547eb5eaaa"},{"problem":39,"code":"(fn it [a b]\n(if-not\n(or (empty? a) (empty? b))\n(concat [(first a) (first b)] (it (rest a) (rest b)))\n'()\n)\n)","user":"569f8736e4b0542e1f8d1495"},{"problem":39,"code":"(fn lazy-leave [xs ys]\n  (take (* 2 (min (count xs) (count ys)))\n        (lazy-seq (cons (first xs) (cons (first ys) (lazy-leave (rest xs) (rest ys)))))))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn inter [la-init lb-init]\n  (loop [la la-init, lb lb-init, sofar []]\n    (if (or (nil? (seq la)) (nil? (seq lb)))\n      (seq sofar)\n      (recur (rest la) (rest lb) (conj (conj sofar (first la)) (first lb)) )\n    )\n  )\n)","problem":39,"user":"4e89ddf9535d3e98b8023284"},{"code":"(fn [x y]\n  (loop [result '() \n         first-map x\n         second-map y]\n    (if (or (empty? first-map) (empty? second-map))\n      (reverse result)\n      (recur (-> result (conj (first first-map)) (conj (first second-map)))\n             (rest first-map)\n             (rest second-map)))))","problem":39,"user":"4eef3afe535d305ff5cb7f1d"},{"code":"(fn [x y]\n  (loop [a x b y l []]\n    (if (not (and (seq a) (seq b)))\n       l\n       (recur \n         (rest a) \n         (rest b) \n         (conj l (first a) (first b))))))","problem":39,"user":"4e570b60535d8a8b8723a286"},{"problem":39,"code":"(fn matej [x y] (if  (and (seq x) (seq y)) (conj (matej (rest x) (rest y))(first y) (first x)) ()))","user":"539c9d7ee4b0b51d73faaf2d"},{"problem":39,"code":"(fn my-interleave\n  ([] ())\n  ([x] (seq x))\n  ([x y]\n   (let [xs (seq x) ys (seq y)]\n     (when (and xs ys)\n       (cons (first xs)\n             (cons (first ys)\n                   (my-interleave (rest xs) (rest ys))))))))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [a b] (mapcat vector a b))","problem":39,"user":"4db8ec47535d1e037afb219d"},{"problem":39,"code":"(fn interleav\n  [a b]\n  (mapcat list a b))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":39,"code":"(fn [a  b]\n  (loop [i [] a a b b]\n    (if (or (empty? a) (empty? b))\n      i\n      (recur (concat i [(first a)], [(first b)]) \n             (rest a) \n             (rest b)))))","user":"600cb742e4b074f607df6696"},{"code":"(fn zip\n  [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys)) [x y]\n                                   (concat [x y] (zip xs ys))))","problem":39,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":39,"code":"(fn ilv [a b] \n  \t(if (or (empty? a) (empty? b))\n      '()\n      (conj (ilv (rest a) (rest b)) (first b) (first a) )))","user":"55f04526e4b06e875b46ce20"},{"problem":39,"code":"(fn [x y]\n  (loop [coll1 x\n         coll2 y\n         finalcoll ()]\n    (if (or (empty? coll1) (empty? coll2))\n      (reverse finalcoll)\n             (recur (rest coll1) (rest coll2) (cons (first coll2) (cons (first coll1) finalcoll))))))","user":"59e4fc25e4b08badc2a0c54f"},{"code":"(fn [xs ys]\n  (loop [xs xs, ys ys, acc []]\n    (if (and (seq xs) (seq ys))\n      (recur (rest xs)\n             (rest ys)\n             (conj acc (first xs) (first ys)))\n      acc)))","problem":39,"user":"52487654e4b05ef8e38e63dc"},{"code":"(fn il  [c1 c2]\n      (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n         (when (and s1 s2)\n           (cons (first s1) (cons (first s2)\n                                  (il (rest s1) (rest s2))))))))","problem":39,"user":"504457c0e4b01f6c9a8b2360"},{"code":"(fn [c1 c2] (apply concat (map #(conj [] % %2) c1 c2)))","problem":39,"user":"503354c3e4b0c6c1199c710c"},{"problem":39,"code":"(fn [x y] ((fn inter [f s r] (cond\n                         (empty? f) r\n                         (empty? s) r\n                         :else (inter (rest f) (rest s) (concat r [(first f) (first s)]))\n                         )) x y []))","user":"5f06d26ae4b0cf489e8d7f53"},{"problem":39,"code":"(comp flatten reverse zipmap)\n;(mapcat vector)","user":"553e3260e4b0a04f792994eb"},{"problem":39,"code":"(fn F [xs ys] (if (or (empty? xs) (empty? ys))\n                nil\n                (conj (conj (F (rest xs) (rest ys)) (first ys)) (first xs))\n                )\n  )","user":"58334d18e4b089d5ab817c97"},{"code":"(fn inter-leave [s1 s2]\n  (let [[x1 & x1s] s1\n        [x2 & x2s] s2]\n    (if (and x1 x2)\n      (cons x1 (cons x2 (inter-leave x1s x2s)))\n      '())))","problem":39,"user":"4ed98b40535d10e5ff6f5307"},{"problem":39,"code":"(fn f [a b]\n  (when-not (or (empty? a) (empty? b))\n    (->> (f (rest a) (rest b))\n         (cons (first b))\n         (cons (first a)))\n    ))","user":"54d412e2e4b0a52adc2e1ffe"},{"code":"(fn inter\n\t[col1 col2]\n\t(apply concat (map #(list %1 %2) col1 col2)))","problem":39,"user":"5339af7de4b0e30313ee6cab"},{"problem":39,"code":"(fn th [a b] (when-not (or (empty? a) (empty? b)) (cons (first a) (cons (first b) (lazy-seq (th (rest a) (rest b)))))))","user":"5282f54be4b0239c8a67ada0"},{"problem":39,"code":"(fn [c1 c2]\n  (reverse (loop [inc1 c1 inc2 c2 acc '()]\n     (if (or (empty? inc1) (empty? inc2))\n       acc\n       (recur (rest inc1) (rest inc2) (conj acc (first inc1) (first inc2)))))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn interl \n  ([a b] ( interl [(first a) (first b)] (rest a) (rest b)))\n  ([r a b] (\n      do \n    (if (or (empty? a) (empty? b))\n    r\n    (interl \n      (conj r (first a) (first b))\n      (rest a)\n      (rest b))))))","problem":39,"user":"53792653e4b06839e8705e4e"},{"problem":39,"code":"(fn intrleave [A B]\n  (flatten\n   (map (fn [x y] (list x y)) A B)))","user":"56f53962e4b046a417f9206c"},{"code":"(fn [col1 col2] (loop [x col1 y col2 fin []]\n   (if (or (nil? x) (nil? y))\n\t     fin\n\t (recur  (next x) (next y)  (conj fin (first x) (first y))))))","problem":39,"user":"4e739e13535dff18050a9c76"},{"code":"#(let [n (min (count %1) (count %2))]\n   (flatten\n    (for [x (range n)] (list (nth %1 x) (nth %2 x)))))","problem":39,"user":"51d360d1e4b099f3b6acddff"},{"problem":39,"code":"(fn zipper [s1 s2]\n  (if (or (zero? (count s1)) (zero? (count s2)))\n    []\n    (concat [(first s1) (first s2)] (zipper (rest s1) (rest s2)))))","user":"5a208195e4b0ff51aa4b32a3"},{"problem":39,"code":"(fn [lst1 lst2] (loop [i 0 result []]\n  (if (and (get lst1 i) (get lst2 i))\n    (recur (inc i) (conj result (get lst1 i)(get lst2 i)))\n    result)))","user":"5f45211ae4b0955706451fbc"},{"problem":39,"code":"(fn fake-interleave [x y]\n   (if (or (empty? x)\n           (empty? y))\n     '()\n     (cons\n      (first x)\n      (cons\n       (first y)\n       (fake-interleave\n        (rest x)\n        (rest y))))))","user":"59273eefe4b072a2710fcec6"},{"problem":39,"code":"(fn my-interleave [[x1 & r1] [x2 & r2]]\n  (if (and x1 x2)\n    (concat (list x1 x2) (my-interleave r1 r2))))","user":"5ac91d90e4b0e27600da77bd"},{"code":"(fn [lst1 lst2] (reverse (loop [l1 lst1 l2 lst2 acc nil] (if (or (empty? l1) (empty? l2)) acc (recur (rest l1) (rest l2) (conj acc (first l1) (first l2))) ) )))","problem":39,"user":"4dbf0cd2535d020aff1edf72"},{"code":"(fn interleave-two-seqs [s1 s2]\n  (first (reduce \n          (fn [[a, s1] s2]\n            (if-not (nil? (first s1))\n              [(conj a (first s1) s2), (rest s1)]\n              [a,s1]))\n\n          [[],s1] s2)))","problem":39,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"mapcat (fn [& s] (identity s))","problem":39,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":39,"code":"#(loop [res []\n         inseq1 %1\n         inseq2 %2]\n    (if (or (empty? inseq1) (empty? inseq2))\n      res\n      (recur (conj res (first inseq1) (first inseq2)) (rest inseq1) (rest inseq2))))","user":"5862a8a9e4b0f14aab7c880f"},{"problem":39,"code":"#(seq (loop [i %1 j %2 res []]\n  (if (or (empty? i) (empty? j))\n    res\n    (recur (rest i) (rest j) (conj res (first i) (first j))))))","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"code":"(fn [& seqs]\n(loop [acc [] remaining seqs]\n  (if (some empty? remaining)\n    acc\n    (recur\n      (concat acc (map first remaining))\n      (map rest remaining)))))","problem":39,"user":"4fe89db2e4b07c9f6fd12c59"},{"problem":39,"code":"(fn [xs ys]\n  (flatten (for [i (range (min (count xs) (count ys)))] [(nth xs i) (nth ys i)]\n  )))","user":"5996b419e4b07157cc8daab5"},{"problem":39,"code":"(fn intr [c1 c2]\n    (lazy-seq\n     (let [s1 (seq c1) s2 (seq c2)]\n       (when (and s1 s2)\n         (cons (first s1) (cons (first s2)\n                                (intr (rest s1) (rest s2))))))))","user":"56c6490de4b05cc29241eeaf"},{"problem":39,"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    nil\n    (concat [(first a) (first b)]\n            (f (rest a) (rest b)))))","user":"59944e73e4b0b211ea3aaac2"},{"problem":39,"code":"#(flatten (reverse (zipmap %1  %2)))","user":"54f73502e4b01ecee9d88817"},{"problem":39,"code":"(fn [lst1 lst2] (flatten (map vector lst1 lst2)))","user":"5585ff97e4b001b0851d7515"},{"problem":39,"code":"(fn [list-1 list-2] (loop [in-1 list-1 in-2 list-2 out []]\n  (if (or (empty? in-1) (empty? in-2))\n    out\n    (recur (rest in-1)\n           (rest in-2)\n           (conj out (first in-1) (first in-2))\n    )\n  )\n))","user":"5784ec65e4b0ebec4cfb74d1"},{"code":"(fn [sa sb] (flatten (map #(vector %1 %2) sa sb)))","problem":39,"user":"50b24a2fe4b03ea88043355c"},{"problem":39,"code":"(fn intl [x y]\n  (let [[x & xs] x\n        [y & ys] y]\n    (if \n      (or (nil? x)(nil? y)) ()\n      (cons x (cons y (intl xs ys))))))","user":"518ba795e4b0f028e99addf0"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1 s1, s2 s2, res []]\n    (if (and (seq s1) (seq s2))\n      (recur (rest s1) (rest s2) (conj res (first s1) (first s2)))\n      res)))","user":"5a481e05e4b05d388ecb6b64"},{"code":"(fn i [as bs] (if (or (empty? as) (empty? bs)) '() (cons (first as) (cons (first bs) (i (rest as) (rest bs))))))","problem":39,"user":"502d3912e4b0d96a44ab2030"},{"problem":39,"code":"(fn [x y]\n  (loop [r [] a x b y]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (conj r (first a) (first b)) (rest a) (rest b)))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":39,"code":"(fn [& args]\n  (loop [xs args\n         result nil]\n    (if (some empty? xs) (reverse result)\n        (recur (map rest xs) (concat (reverse (map first xs)) result)))))","user":"5146f343e4b04ef915e3731e"},{"code":"(fn interleaveSeqs [l1, l2]\n   (if\n     (or\n      (empty? l1)\n      (empty? l2))\n     ()\n     (cons\n      (first l1)\n      (cons\n       (first l2)\n       (interleaveSeqs\n        (rest l1)\n        (rest l2))))))","problem":39,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":39,"code":"(fn [seq1 seq2]\n    (let [count1 (count seq1)\n          count2 (count seq2)\n          min-count (min count1 count2)]\n      (loop [result [] n 0]\n        (if (= n min-count)\n          result\n          (recur (conj result (nth seq1 n) (nth seq2 n)) (inc n) )))))","user":"5f0a4904e4b09a3f05b71805"},{"problem":39,"code":"(fn [c1 c2]\n  (reduce (fn [acc pair]\n            (concat acc pair))\n      (map (fn [e1 e2] \n             (list e1 e2)) c1 c2)))","user":"5773e5b0e4b0979f896515ef"},{"problem":39,"code":"#(flatten(reverse(zipmap % %2)))","user":"557f748ae4b05c286339e0df"},{"problem":39,"code":"(fn zip [x y]\n  (loop [x x\n         y y\n         res []]\n    (if (or (empty? x) (empty? y))\n      res\n      (recur (rest x) (rest y) (conj res (first x) (first y))))))","user":"5666c2dbe4b04acd4f672dc3"},{"code":"(fn [s1 s2]\n(let [\t cnt (if(> (count s1) (count s2)) (count s2) (count s1) ) ]\n\t(loop [ result [] indx 0]\n\t\t(if(< indx cnt) (recur (conj result (s1 indx) (s2 indx)) (inc indx)) result)\n\t)\n)\n\t\t\n)","problem":39,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn p39 [c1 c2]\n  (flatten (map #(vec [%1 %2]) c1 c2))\n)","problem":39,"user":"51750fc5e4b07031762f2ee6"},{"problem":39,"code":"(fn [ms ns]\n  (letfn [(inter [xs ys]\n            (if (or (empty? xs) (empty? ys))\n              (list)\n              (cons (first xs)\n                    (cons (first ys)\n                          (inter (rest xs)\n                                 (rest ys))))))]\n    (inter ms ns)))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":39,"code":"#(loop [result []\n              s %\n              t %2]\n(if (and (seq s) (seq t))\n(recur (concat result [(first s) (first t)]) (rest s) (rest t))\n  result))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [coll1 coll2] \n  (loop [dst [] c1 coll1 c2 coll2]\n    (if (or (empty? c1) (empty? c2))\n        dst \n        (recur (conj dst (first c1) (first c2))\n               (rest c1) \n               (rest c2)))))","problem":39,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":39,"code":"(fn add\n  [collf collt]\n  (loop\n    [x 0\n     coll1 collf\n     coll2 collt\n     coll3 (empty collt)]\n    (if (= x (count ((fn return-small-coll\n                       [coll1 coll2]\n                       (if (>= (count coll1) (count coll2))\n                         coll2\n                         coll1)\n                       ) coll1 coll2)))\n      ;返回\n      (reverse coll3)\n      (recur\n        (inc x)\n        coll1\n        coll2\n        (cons (get coll2 x) (cons (get coll1 x) coll3))))))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn interleave1 [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    []\n    (concat [(first s1) (first s2)] (interleave1 (rest s1) (rest s2)))))","problem":39,"user":"536254a5e4b0243289761e50"},{"code":"(fn [a b] (reduce (fn [a b] (concat a b)) '() (map list a b)))","problem":39,"user":"5241eb78e4b076e5d3121f3a"},{"code":"(fn my-interleave [x y]\n  (let [x (seq x), y (seq y)]\n    (if (and x y)\n      (conj (my-interleave (rest x) (rest y))\n            (first y) (first x))\n      '())))","problem":39,"user":"4e342671535deb9a81d77f29"},{"problem":39,"code":"(fn my-interleave [seqA seqB]\n\t(loop [sA seqA sB seqB result []]\n\t\t(if (or (empty? sA) (empty? sB))\n\t\t\tresult\n\t\t\t(recur (rest sA) (rest sB) (conj result (first sA) (first sB))))))","user":"5c87c79be4b048ec896c591b"},{"code":"(fn [ s t ] \n(mapcat   (fn [x,y]   (vector  x y)) s  t )\n)","problem":39,"user":"4fdf750be4b05e33b9224f9c"},{"problem":39,"code":"(fn [x1 x2]\n  (loop [res []\n         x1 x1\n         x2 x2]\n    (if-not (and (seq x1) (seq x2))\n      res\n      (recur (conj res (first x1) (first x2)) (rest x1) (rest x2)))))","user":"5c8005cee4b0c8042a70ce0a"},{"problem":39,"code":"(fn [x y]\n  (flatten (for [i (range (min (count x) (count y)))] [(nth x i) (nth y i)]))\n  )","user":"550001d0e4b07d26eda61d57"},{"problem":39,"code":"(fn [a b]\n  (loop [col [] s1 a s2 b]\n    (let [i1 (first s1) i2 (first s2)]\n      (cond \n        (and i1 i2) (recur (conj col i1 i2) (rest s1) (rest s2))\n        :else col))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [coll1 coll2]\n  (reduce concat (map list coll1 coll2)))","problem":39,"user":"532b930be4b09d4e7a9b5534"},{"code":"(fn inter [[h1 & t1 :as c1]\n           [h2 & t2 :as c2]] \n  (when (and c1 c2) (cons h1 \n                          (cons h2 \n                          (inter t1 t2)))))","problem":39,"user":"500900dee4b0144d4f561e42"},{"problem":39,"code":"(fn f [xs1 xs2]\n  (if (and (seq xs1) (seq xs2))\n    (concat [(first xs1) (first xs2)] (f (rest xs1) (rest xs2)))\n    []))","user":"57adbe7ee4b0b8559636fca0"},{"problem":39,"code":"#(flatten \n   (map-indexed \n     (fn [i x] [(nth %1 i) (nth %2 i)]) \n     (if (< (count %1) (count %2)) %1 %2) ))","user":"60606490e4b03746e80ebf67"},{"problem":39,"code":"(fn my-interleave [x y] (flatten (map (fn [w z] (concat (list w) (list z))) x y)))","user":"6078ce29e4b0a637ed78035a"},{"problem":39,"code":"(fn [x y]\n  (loop [i 0 result []]\n    (if (or (= i (count x)) (= i (count y)))\n      (seq result)\n      (recur (inc i) (conj result (get x i) (get y i))))))","user":"5d03944de4b0cc9c915881c5"},{"problem":39,"code":"(fn [a b]\n  (loop  [[x & xs] a [y & ys] b res []]\n            (if (and x y)\n              (recur xs ys (conj res x y))\n              res)))","user":"60654263e4b069485764ddc9"},{"problem":39,"code":"#(reduce (fn [acc [a b]] (conj acc a b)) [] (map vector %1 %2))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":39,"code":"#(loop [a1 %,a2 %2,r []]\n   (if (empty? a1)\n     r\n     (if (empty? a2)\n       r\n       (recur (rest a1) (rest a2) (conj (conj r (first a1)) (first a2))))))","user":"555e9dbfe4b0a2eb076a39bc"},{"code":"(fn [coll-1 coll-2]\n  (reduce concat (map #(conj [%1] %2) coll-1 coll-2)))","problem":39,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":39,"code":"(fn [xs ys]\n  (loop [x xs y ys result []]\n  (if-not (seq x)\n  \tresult\n  (if-not (seq y)\n  \tresult\n  (recur (rest x) (rest y) (conj result (first x) (first y))\n         \n  ))))\n  )","user":"56004deee4b04bb52996e164"},{"code":"#(mapcat list%1%2)","problem":39,"user":"4eb07be3535d7eef3080733b"},{"code":"(fn [a b] (loop [x (vec a) y (vec b) z []] (if (or (empty? x) (empty? y)) z (recur \n(rest x) (rest y) (conj (conj z (first x)) (first y))))))","problem":39,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn [x y] (flatten (map #(vector %1 %2) x y)))","problem":39,"user":"519291c1e4b08962174cf74b"},{"code":"(fn intleave\n  ([a b]\n    (lazy-seq\n      (let [s1 (seq a) s2 (seq b)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                (intleave (rest s1) (rest s2) ) ) )\n        )\n      )\n    )\n  )\n ([a b & colls]\n   (lazy-seq\n     (let [ss (map seq (conj colls b a))]\n      (when (every? identity ss)\n        (concat (map first ss) (apply intleave (map rest ss)))))))\n)","problem":39,"user":"4e333091535deb9a81d77f25"},{"code":"(fn[v1 v2]\n  (loop [ans [] v3 v1 v4 v2]\n    (if (or (empty? v3) (empty? v4))\n      ans\n      (recur (conj (conj ans (first v3)) (first v4))\n             (next v3)\n             (next v4)))))","problem":39,"user":"52196842e4b0890f2f822bfa"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 c1 (count coll1) c2 (count coll2) acc []]\n    (if (or (= 0 c1) (= 0 c2))\n      acc\n      (recur (rest coll1) (rest coll2) (dec c1) (dec c2) (conj acc (first coll1) (first coll2))))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":39,"code":"(fn make-pairs [x y] (mapcat list x y))","user":"545b9dd9e4b01be26fd74654"},{"code":"(fn [coll1 coll2]\n  (flatten (map #(vector %1 %2) coll1 coll2)))","problem":39,"user":"53862316e4b06839e8705f0e"},{"problem":39,"code":"(fn il [s1 s2]\n  (if (or (empty? s1)\n          (empty? s2))\n    []\n    (cons (first s1) (cons (first s2) (il (rest s1) (rest s2))))))","user":"597a4277e4b02382a38ad1e2"},{"problem":39,"code":"(fn mjl-interleave [s1 s2]\n    (reduce concat \n    \t(for [n (range (min (count s1) (count s2)))\n       \t  :let [i1 (nth s1 n)\n                i2 (nth s2 n)]]\n      \t\t[i1 i2])) )","user":"54468fd3e4b032a45b8693b2"},{"problem":39,"code":"(fn il [[h1 & t1] [h2 & t2]]\n  (if h1\n    (if h2\n    (concat [h1 h2] (il t1 t2))\n    [])\n  [])\n)","user":"5df08767e4b093ff717275bf"},{"problem":39,"code":"(fn [sq1 sq2] \n  (mapcat #(list %1 %2) sq1 sq2))","user":"5992bcb2e4b0866487ed0d7b"},{"problem":39,"code":"(fn [seq1, seq2] \n  (loop [seq1left seq1\n         seq2left seq2\n         output []]\n    (if (or (= seq1left []) (= seq2left []))\n      output\n      (recur (rest seq1left) (rest seq2left) (conj output (first seq1left) (first seq2left))))))","user":"54336443e4b0b6b47310fcde"},{"problem":39,"code":"(fn [x y] (mapcat #(seq [%1 %2]) x y))","user":"569d2283e4b0542e1f8d1474"},{"code":"(fn f [a b] \n  (let [fa (first a) fb (first b)] \n    (when (and fa fb)\n      (cons fa (cons fb (f (rest a) (rest b)))))))","problem":39,"user":"4ed6dbdd535d10e5ff6f52eb"},{"problem":39,"code":"(fn my-interleave\n  [lstA lstB]\n  (if (or (empty? lstA) (empty? lstB)) ()\n                                       (loop [elemA (first lstA)\n                                              elemB (first lstB)\n                                              lstA (rest lstA)\n                                              lstB (rest lstB)\n                                              result ()]\n                                         (cond\n                                           (or (empty? lstA) (empty? lstB)) (concat result [elemA] [elemB])\n                                           :else (recur (first lstA)\n                                                        (first lstB)\n                                                        (rest lstA)\n                                                        (rest lstB)\n                                                        (concat result [elemA] [elemB]))))))","user":"59e4e3cbe4b08badc2a0c54a"},{"code":"(fn f [x y]\n  (reduce concat  (map #(list %1 %2) x y)))","problem":39,"user":"52b0323ee4b0c58976d9acc6"},{"problem":39,"code":"(fn [c1 c2] (reduce (fn [l x] (conj l (x 0) (x 1))) [] (map (fn [x y] [x y]) c1 c2)))","user":"55f95782e4b03cbcff9738bf"},{"problem":39,"code":"(fn [a b]\n  (loop [i 0\n         j 0\n         res []]\n    (cond\n     (= i (count a)) res\n     (= j (count b)) res\n     :else (recur (inc i) (inc j) (conj (conj res (a i)) (b j))))))","user":"6074df6fe4b069485764de4b"},{"problem":39,"code":"(fn [a b] (take (* (min (count a) (count b)) 2) (apply concat (map-indexed (fn [i x] \n                          [x (nth b i nil)]) a))))","user":"54af220ce4b09f271ff37d02"},{"problem":39,"code":"(fn il [x' y'] \n  (lazy-seq\n    (let [x (seq x') y (seq y')] \n      (when (and x y) \n        (cons (first x) (cons (first y) (il (rest x) (rest y))))))))","user":"58172161e4b0c0e9c07b8389"},{"code":"#(mapcat (fn together [a b] (concat [a] [b])) %1 %2)","problem":39,"user":"4e70ed07535d5021c1a89643"},{"code":"(fn mix ([c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (mix (rest s1) (rest s2))))))))","problem":39,"user":"4f515bd3e4b03ad3f0c10d1f"},{"code":"(fn inter [x y] \n  (let [a (seq x) b (seq y)]\n  (when (and a b) \n    (cons (first a) (cons (first b) (inter (rest a) (rest b)))))))","problem":39,"user":"4f91a38ae4b0dcca54ed6c9f"},{"problem":39,"code":"(fn interleave* [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (concat (list (first s1) (first s2)) (interleave* (rest s1) (rest s2)))))","user":"559454f2e4b0c79f6e1db952"},{"problem":39,"code":"#(loop [[a & lr1 :as lst1] %1 [b & lr2 :as lst2] %2 res []]\n       (if (or (empty? lst1) (empty? lst2))\n           res\n           (recur lr1 lr2 (vec (concat res [a b])))))","user":"5979cd36e4b02382a38ad1d8"},{"code":"(fn zip[a b]\n  (if (or (= [] a) (= [] b))\n    nil\n    (concat [(first a) (first b)] (zip (rest a) (rest b)))\n     )\n  )","problem":39,"user":"51742736e4b039bf5e7b6028"},{"problem":39,"code":"(fn f [xs ys]\n  (lazy-seq\n    (let [xs (seq xs) ys (seq ys)]\n      (when (and xs ys)\n        (cons (first xs)\n          (cons (first ys)\n            (f (rest xs)\n               (rest ys))))))))","user":"583369e6e4b089d5ab817c9c"},{"problem":39,"code":"(fn my-interleave [a b]\n    (let [first-a (first a)\n          rest-a (rest a)\n          first-b (first b)\n          rest-b (rest b)]\n      (if (and first-a first-b)\n        (cons first-a\n              (cons first-b\n                    (my-interleave rest-a rest-b))))))","user":"59cd351ee4b0ef0a1e9b5b35"},{"code":"(fn [a b]\n  (loop [_a a _b b res []]\n    (let [av (first _a)\n          bv (first _b)]\n      (if (and av bv)\n        (recur (rest _a) (rest _b) (conj (conj res av) bv))\n        res))))","problem":39,"user":"5027b41ee4b01614d1633fee"},{"problem":39,"code":"(fn [coll-a coll-b] (flatten (map #(if (and %1 %2) (list %1 %2)) coll-a coll-b)))","user":"5abbb524e4b073f1774426da"},{"problem":39,"code":"#(loop [a %1 b %2 c []]\n\t(if (or (empty? a) (empty? b))\n\t\t(apply list c)\n\t\t(recur (rest a) (rest b) (conj c (first a) (first b)))\n\t)\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"problem":39,"code":"(fn [l1 l2]\n  (let [tst (fn [res ll1 ll2]\n              (if (or (empty? ll1) (empty? ll2))\n                res\n                (recur (concat res (cons (first ll1) '()) (cons (first ll2) '())) (rest ll1) (rest ll2))))]\n    (tst '() l1 l2)))","user":"583019b8e4b051871117bfff"},{"problem":39,"code":"(fn _interleave[l l2]\n  (if (or (empty? l) (empty? l2))\n  '()\n  (concat (list (first l))\n          (list (first l2))\n          (_interleave (rest l) (rest l2)))))","user":"54651faee4b01be26fd746d6"},{"code":"(fn f [c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (lazy-seq (cons (first s1) (cons (first s2) (f (rest s1) (rest s2))))))))","problem":39,"user":"50e8cac5e4b0ebbe794eb7ef"},{"problem":39,"code":"(fn my-interleave [left right]\n  (loop \n    [l left r right ret []]\n      (if (or (empty? l) (empty? r)) \n        ret\n        (recur (rest l) (rest r) (conj (conj ret (first l)) (first r)))\n      )\n  )\n)","user":"5d0aab50e4b0cc9c91588220"},{"code":"(fn ! [l1 l2]\r\n  (cond \r\n    (empty? l1) []\r\n    (empty? l2) []\r\n    :else  (concat [(first l1) (first l2)] (! (rest l1) (rest l2)))))","problem":39,"user":"4efb0ae1535dced4c769f273"},{"problem":39,"code":"(fn [col1 col2]\n  (loop [c1 col1 c2 col2 ret []]\n    (if (or (empty? c1)\n            (empty? c2))\n      ret\n      (recur (rest c1) (rest c2) (conj ret (first c1) (first c2))))))","user":"501fe6fae4b0cb6ebc0a42ef"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b result []]\n    (if (some zero? (list (count a) (count b))) result\n      (recur (rest a) (rest b) (into result (list (first a) (first b)))))))","user":"596aaeefe4b069c0a1a19808"},{"code":"#(loop [c1# %1 c2# %2 t []]\n  (if (or (empty? c1#) (empty? c2#))\n    t\n   (recur (rest c1#) (rest c2#) (conj t (first c1#) (first c2#)))))","problem":39,"user":"5127e504e4b03a34742b4302"},{"code":"#(flatten \n  (for [z (range) :while (< z (min (count %1) (count %2)))]\n    [(%1 z) (%2 z)]))","problem":39,"user":"52d340ebe4b099d49816f0c1"},{"problem":39,"code":"(fn [list-1 list-2]\n   (reduce into (map vector list-1 list-2)))","user":"5eecd339e4b07c55ae4a0507"},{"problem":39,"code":"(fn [a b]\n  (flatten (map #(vec [% %2]) a b))\n  )","user":"54c779bee4b045293a27f63b"},{"problem":39,"code":"#(loop [x %1 y %2 a []]\n    (if (or (nil? (first x)) (nil? (first y)))\n      a\n      (recur (rest x) (rest y) (conj (conj a (first x)) (first y)))))","user":"5ece3d25e4b016b56eae059b"},{"problem":39,"code":"(fn [one two] \n  (flatten (map (fn [a b] \n         (list a b)) one two)))","user":"5415d115e4b01498b1a719f7"},{"problem":39,"code":"(fn [x y]\n  (flatten (into [] (map #(list %1 %2) x y))))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":39,"code":"(fn in [as bs]\n  (cond (or (empty? as) (empty? bs)) []\n           :else (concat [(first as) (first bs)]\n                         (in (rest as) (rest bs)))\n   )\n  )","user":"60228147e4b0d5df2af22202"},{"code":"#(loop [seq1 %1\n         seq2 %2\n         final-seq []]\n    (if (or (empty? seq1) (empty? seq2))\n      final-seq\n      (recur (rest seq1) (rest seq2) (conj final-seq (first seq1) (first seq2)))))","problem":39,"user":"523288fee4b035af41902a88"},{"problem":39,"code":"(fn [a b]\n  (loop [a a b b s []]\n    (if (and\n         (> (count a) 0)\n         (> (count b) 0))\n      (recur (rest a) (rest b) (into s [(first a) (first b)]))\n      s)))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":39,"code":"(fn [x y]\n  (loop [rst [] a x b y]\n    (if (or (= 0 (count a)) (= 0 (count b))) rst\n      (recur (conj (conj rst (first a)) (first b)) (rest a) (rest b)) )))","user":"54381729e4b032a45b869310"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map vector seq1 seq2)))","user":"5595a88ee4b0c79f6e1db96e"},{"code":"(fn [x y] (apply concat (map list x y)))","problem":39,"user":"5093a80be4b097f48cc38583"},{"code":"(partial \n  (fn [result a b]\n    (if (and (seq a) (seq b))\n      (recur (conj result (first a) (first b)) (rest a) (rest b))\n      (reverse result)))\n  (list))","problem":39,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn my-interleave [seq1 seq2]\n  \t(loop [seq1 seq1\n           seq2 seq2\n           interleaved '()]\n      (if\n        (or (empty? seq1) (empty? seq2))\n        interleaved\n        (recur (rest seq1) (rest seq2) (concat interleaved [(first seq1) (first seq2)])))))","problem":39,"user":"52561be5e4b0541d1855ba08"},{"problem":39,"code":"(fn [n m] (apply concat(map vector n m)))","user":"57f3b841e4b0511f1d294e0f"},{"problem":39,"code":";(fn [xs ys]\n;  (loop [[x & xs] xs [y & ys] ys acc []]\n;    (cond\n;      (or (nil? x) (nil? y)) acc\n;      :else (recur xs ys (conj acc x y)))))\n\n;(fn inter [xs ys]\n;  (if (and (not-empty xs) (not-empty ys))\n;    (concat [(first xs)] \n;            [(first ys)] \n;            (inter (rest xs) (rest ys))))) \n\nmapcat list","user":"54dce62be4b024c67c0cf78b"},{"code":"(fn my-interleave ([a b]\n     (my-interleave a b []))\n  \t([a b acum]\n     (if (or (empty? a) (empty? b))\n       acum\n       (recur (rest a)\n              (rest b)\n              (conj acum (first a) (first b))))))","problem":39,"user":"50cfcad6e4b00b15ecee9752"},{"problem":39,"code":"(fn interleave-seq\n  [seqone seqtwo]\n   (if (empty? (rest seqone))\n    (list (first seqone) (first seqtwo)) \n    (if (empty? (rest seqtwo))\n      (list (first seqone) (first seqtwo))\n      (conj (interleave-seq (rest seqone) (rest seqtwo)) (first seqtwo) (first seqone)))))","user":"55dfac5fe4b050e68259b3f9"},{"problem":39,"code":"(fn my-interleave\n  [& input-seqs]\n  (loop [seqs input-seqs\n         result []]\n    (if (some empty? seqs)\n      result\n      (recur (map rest seqs)\n             (apply conj result (map first seqs))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":39,"code":"(fn x [s1 s2]\n  (loop [r [] a s1 b s2] \n    (if (and (first a) (first b))\n      (recur (concat r [(first a)] [(first b)])\n                         (rest a) (rest b) )\n      r)))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn Interleave [x y]\n  (if-not (or (empty? x) (empty? y))\n    (concat \n      [(first x) (first y)] \n      (Interleave \n        (rest x) (rest y)))))","problem":39,"user":"51ccc179e4b02254fc794879"},{"problem":39,"code":"(fn [l1 l2] (let [min-count (min (count l1) (count l2))] (apply concat (map list (take min-count l1) (take min-count l2)))))","user":"5e04ce34e4b0a607a9a45d71"},{"problem":39,"code":"(fn myinterleave\n  [seq1 seq2]\n  (cond\n    (or (empty? seq1) (empty? seq2)) []\n    (or (= (count seq1) 1)(= (count seq2) 1)) [(first seq1) (first seq2)]\n    :else (concat [(first seq1) (first seq2)] (myinterleave (rest seq1) (rest seq2)))\n  )\n)","user":"5d828b7ee4b0915913b1d382"},{"problem":39,"code":"(fn  [a b] \n  (let [g (if (>= (count a) (count b)) b a) r (transient [])]\n   (doseq [x (range (count g))]\n     \t(conj! r (nth a x))\n     \t(conj! r (nth b x)))\n   (persistent! r)))","user":"55ec1048e4b0121d4835fdc3"},{"code":"(fn [a b] (mapcat (fn [x y] [x y]) a b))","problem":39,"user":"509c2c55e4b085ae113522ab"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [min-len (min (count coll1) (count coll2))\n         accu '()\n         first-coll  coll1\n         second-coll coll2]\n    (if-not (zero? min-len)\n      (recur (dec min-len)\n             (into accu [(first first-coll) (first second-coll)])\n             (rest first-coll)\n             (rest second-coll))\n      (reverse accu)\n    )))","user":"55e274b4e4b050e68259b436"},{"code":"(fn [initial-c1 initial-c2]\n  (loop [combined [] c1 initial-c1 c2 initial-c2]\n    (if (and (seq c1) (seq c2))\n      (recur (into combined [(first c1) (first c2)]) (rest c1) (rest c2)) \n      combined)))","problem":39,"user":"5038381ce4b0803468ea2c6b"},{"problem":39,"code":"(fn sub-seq [x y]\n  (if (or (= (first x) nil) (= (first y) nil))\n    '()\n    (concat\n     (list (first x) (first y))\n     (sub-seq (rest x) (rest y)))))","user":"59a6f1c7e4b066c664927d89"},{"code":"mapcat #(vec %&)","problem":39,"user":"4ff6aea8e4b0678c553fc381"},{"problem":39,"code":"(fn inter\n  ([s1 s2] (inter s1 s2 []))\n  ([s1 s2 acc]\n    (if (or (empty? s1) (empty? s2))\n      acc\n      (recur (rest s1) (rest s2) (conj (conj acc (first s1)) (first s2))))))","user":"5006474ce4b0678c553fc481"},{"code":"(fn my-interleave\n  ([x y] (my-interleave x y []))\n  ([x y merged]\n    (if (or (empty? x) (empty? y))\n      merged\n      (my-interleave (rest x) (rest y)\n        (conj (conj merged (first x)) (first y))))))","problem":39,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b)) [] (concat [(first a) (first b)] (f (rest a) (rest b))) ))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":39,"code":"(fn myinterleave [l1 l2] (if (or (empty? l1) (empty? l2)) () (concat (list (first l1) (first l2)) (myinterleave (rest l1) (rest l2)))))","user":"54125062e4b01498b1a719d2"},{"problem":39,"code":"(fn [& things] (loop [old-col things col ()]\n                     (let [pairs (map first old-col)]\n                     (if (some nil? pairs) col\n                         (recur (map rest old-col) (concat col pairs))))))","user":"56b49f72e4b0982f16b37e23"},{"code":"(fn this [a b] \n  (cond \n    (or (nil? a) (nil? b)) '() \n      true (cons (first a) (cons (first b) (this (next a) (next b)))))\n        )","problem":39,"user":"4fad89f0e4b081705acca23b"},{"problem":39,"code":"(fn i [s1 s2]\n  (if (> (count s2) 0)\n    (if (> (count s1) 0)\n      (into (i (rest s1) (rest s2)) (list (first s2) (first s1))))))","user":"54f77213e4b01ecee9d8881d"},{"code":"(fn [xs ys] (mapcat list xs ys))","problem":39,"user":"4eb2eae5535d7eef30807351"},{"problem":39,"code":"(fn [x y] (mapcat (fn [x y] [x y]) x y))","user":"54801febe4b0c51c1f4d733c"},{"code":"(fn [s1 s2] (mapcat vector s1 s2))","problem":39,"user":"4f604bdee4b0defedf855fa7"},{"problem":39,"code":"(fn [x y]\n  (let [ il\n  (fn il [x y res]\n  (cond\n        (empty? x) res\n        (empty? y) res\n        :else (il (rest x) (rest y) (conj (conj res (first x)) (first y)))\n        ))]\n    (il x y []))\n  )","user":"5cd4c3dae4b0ccb061962925"},{"code":"(fn my-interleave [x y]\n  (if (or (empty? x) (empty? y))\n      '()\n      (cons (first x) \n        (cons (first y) (my-interleave (rest x) (rest y))))\n      )\n    )","problem":39,"user":"4f2582bae4b0d66497709ff6"},{"code":"#(loop [x %1 y %2 comp []]\n  (if (or (= x '()) (= y '()))\n    comp\n    (recur (rest x)\n           (rest y)\n           (conj (conj comp (first x)) (first y)))))","problem":39,"user":"4faec810e4b081705acca24e"},{"code":"(fn [seq1 seq2]\n   (loop [result [] elements1 seq1 elements2 seq2]\n     (if (or (empty? elements1) (empty? elements2))\n       result\n       (recur (conj (conj result (first elements1)) (first elements2)) (rest elements1) (rest elements2))\n       )\n     )   \n   )","problem":39,"user":"5106dc1be4b01150e115ebf0"},{"problem":39,"code":"(fn [c1 c2] (reduce concat (map #(list %1 %2) c1 c2)))","user":"56800ba1e4b0966858e4d8e8"},{"code":"(fn [as bs]\n    (loop [a as\n           b bs\n           col []]\n      (if (or (= (count a) 0)\n              (= (count b) 0))\n        col\n        (recur (rest a) (rest b) (conj col (first a) (first b))))))","problem":39,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":39,"code":"(fn [frst-seq sec-seq]\n  (flatten (map #(vector %1 %2) frst-seq sec-seq)))","user":"5655e056e4b0f9d632dd849b"},{"problem":39,"code":"(fn its [s1 s2]\n  (if (or (= 1 (count s1)) (= 1 (count s2)))\n    (list (first s1) (first s2))\n    (conj (conj (its (rest s1) (rest s2)) (first s2)) (first s1))))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"problem":39,"code":"(fn [x y] (flatten (map (fn [a, b] (list a b)) x y)))","user":"5d7faa52e4b0915913b1d365"},{"code":"(fn interl [col1 col2]\n  (if (or (= (first col1) nil) (= (first col2) nil)) nil\n  (flatten (cons (list (first col1) (first col2)) (interl (rest col1) (rest col2))))))","problem":39,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":39,"code":"(fn z\n  ([seq1 seq2]\n    (z seq1 seq2 []))\n  ([seq1 seq2 acc]\n   (if (or (empty? seq1) (empty? seq2))\n     acc\n     (recur (rest seq1) (rest seq2) (conj (conj acc (first seq1)) (first seq2))))))","user":"58a822e4e4b01a0c0b232950"},{"problem":39,"code":"(fn [sa sb]\n  ((fn il [sa sb si]\n     (let [ea (first sa)\n           eb (first sb)]\n       (if (or (nil? ea) (nil? eb))\n         si\n         (il (rest sa) (rest sb) (conj si ea eb)))))\n   sa sb []))","user":"5c7ef3f3e4b0d597f478cad7"},{"code":"(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    nil\n    (cons (first a) (cons (first b) (f (rest a) (rest b))))))","problem":39,"user":"521b73f5e4b0c4ef0be83043"},{"code":"(fn myinterleave [a b]\r\n  (seq (loop [l1 a l2 b final '[]]\r\n     (if (or (empty? l1) (empty? l2))\r\n       final\r\n       (recur (rest l1) (rest l2) (conj final (first l1) (first l2)))))))","problem":39,"user":"4f039524535dcb61093f6b2c"},{"problem":39,"code":"#(mapcat (fn [& xs] (vec xs)) %1 %2)","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [c1 c2]\n  (reduce concat (map #(list % %2) c1 c2)))","problem":39,"user":"52d51535e4b09f7907dd133a"},{"problem":39,"code":"(fn [first-seq second-seq]\n  (let [slice-count (min (count first-seq) (count second-seq))]\n    (loop [prepared-first-seq (take slice-count first-seq)\n           prepared-second-seq (take slice-count second-seq)\n           out-vec []]\n      (if (empty? prepared-first-seq)\n        out-vec\n        (recur (rest prepared-first-seq)\n               (rest prepared-second-seq)\n               (conj out-vec (first prepared-first-seq) (first prepared-second-seq)))))))","user":"5f15a50fe4b091ba50b4dbbc"},{"code":"(fn myinterleave [x y] \n  (if\n   (empty? x)\n   x\n   \n   (if\n     (empty? y)\n     y\n     (cons \n     (first x) (cons (first y) (myinterleave (rest x) (rest y))))\n   )\n   ))","problem":39,"user":"51f687c2e4b06ff1c25c52cb"},{"code":"(fn [colla collb] (loop\n  [[a & amore] colla\n    [b & bmore] collb\n    res []]\n  (if (and a b) (recur amore bmore (conj res a b))\n  res)))","problem":39,"user":"4ebf45c3535dfed6da9c6d9d"},{"code":"(fn i[s t]\n  (if (or (empty? s) (empty? t))\n      '()\n      (concat (map first [s t]) (i (rest s) (rest t)))))","problem":39,"user":"501284d9e4b030d97e4db710"},{"problem":39,"code":"(fn f\n  ([x y] (f x y []))\n  ([x y r] (if (or (empty? x) (empty? y)) r (recur (rest x) (rest y) (into r [(first x) (first y)])))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"#(flatten (map list % %2 ) )","problem":39,"user":"4e952463535dbda64a6f6b31"},{"problem":39,"code":"(partial (fn intrlv [result col1 col2] \n  (when-let [xs (seq col1)]\n    (when-let [ys (seq col2)]\n    (concat (conj result (first xs) (first ys)) (intrlv result (rest xs) (rest ys)))))) [])","user":"55150524e4b055c2f668d4d9"},{"code":"#(mapcat (fn [a b] [a b]) %1 %2)","problem":39,"user":"4e9e4515535dbda64a6f6b95"},{"problem":39,"code":"(fn interl [& colls]\n  (loop [result [] sub-colls colls]\n    (if (some #(= 0 (count %)) sub-colls)\n      result\n      (recur (into result (map first sub-colls)) (map rest sub-colls)))))","user":"50ec409ce4b04edc33777045"},{"problem":39,"code":"(fn   [arg1 arg2]\n  (reverse\n   (loop [result '()\n          s1 arg1\n          s2 arg2]\n     (let [n1 (first s1)\n           n2 (first s2)]\n       (if (or (nil? n1)\n               (nil? n2))\n         result\n         (recur (conj result\n                      n1 n2)\n                (rest s1)\n                (rest s2)))))))","user":"59971dcbe4b07157cc8daacb"},{"code":"(fn ilv [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    ()\n    (conj \n      (conj \n        (ilv (rest s1) (rest s2)) (first s2)) (first s1))))","problem":39,"user":"4f611127e4b0defedf855fb4"},{"code":"(fn il [sq1 sq2]\n  (when (and (not (empty? sq1))\n             (not (empty? sq2)))\n    (lazy-seq (concat [(first sq1)] [(first sq2)] (il (rest sq1) (rest sq2))))))","problem":39,"user":"515737f0e4b0b0b4b87062d0"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [acc []\n         c1 coll1\n         c2 coll2]\n    (if (or (empty? c1) (empty? c2))\n      acc\n      (recur (conj acc (first c1) (first c2))\n             (rest c1)\n             (rest c2)))))","user":"55380eeae4b09218d5f44fd9"},{"problem":39,"code":"(fn myInterleave [a b] \n  (loop [lst '()\n         a  a\n         b  b]\n    (if (or (empty? a) (empty? b))\n      (reverse lst)\n            (recur (conj lst (first a) (first b)) (rest a) (rest b))  \n      )\n    )\n  )","user":"5f8330b8e4b01aacbe7a270f"},{"problem":39,"code":"(fn interleave-home-made [c1 c2]\n  (first \n   ((fn [] \n      (reduce\n       #(if-let [e2 (first (last %1))]\n          [(conj (first %1) %2 e2) (rest (last %1))]\n          %1)\n       [[] c2]\n       c1)))))","user":"5ed52854e4b016b56eae05d2"},{"problem":39,"code":"(fn [c1 c2] (flatten (map (fn [a b] (conj (list b) (list a))) c1 c2)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":39,"code":"(fn [a b]\n  (reverse (loop [alpha a\n         betha b\n         out (list)]\n    (println (pr-str out))\n    (if (or (empty? alpha) (empty? betha))\n      out\n      (recur (rest alpha) (rest betha) (cons (first betha) (cons (first alpha) out)))))))","user":"5ff82adae4b06df49cee14a4"},{"code":"(fn my-interleave [s1 s2]\n  (let [c1 (first s1)\n        c2 (first s2)]\n    (when (and c1 c2)\n      (lazy-seq (cons c1 (cons c2 (my-interleave (rest s1) (rest s2))))))))","problem":39,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn [xs-1 xs-2]\n  (flatten (map (fn [x-1 x-2] [x-1 x-2]) xs-1 xs-2)))","problem":39,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn comb [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (concat (list (first x) (first y)) (comb (rest x) (rest y)))))","problem":39,"user":"5012aefce4b0c8732600222a"},{"problem":39,"code":"(fn [xs-1 xs-2]\n  (apply concat (map vector xs-1 xs-2)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn leave [s1 s2]\n  (if (or (empty? s1) (empty? s2)) '()\n    (conj (leave (rest s1) (rest s2)) (first s2) (first s1))))","problem":39,"user":"529ce629e4b04e0c58e87b6e"},{"problem":39,"code":"(comp flatten map) (fn [& xs] xs)","user":"561d23e3e4b064ca9f4b16a5"},{"problem":39,"code":"#(flatten (map (fn [i1 i2] (vector i1 i2)) %1 %2))","user":"57202eb7e4b0c5bde472c090"},{"code":"(fn x [v1 v2]\n\n  (loop [ l [] i 0 ]\n    (if (or ( == i (count v1)) (== i (count v2))) l   \n        (recur (conj ( conj l (nth v1 i)) (nth v2 i) ) (inc i))\n        )\n    )\n)","problem":39,"user":"4fb7dfe3e4b081705acca2d5"},{"code":"(fn myf [x y] \n  (if (or (= 0 (count x)) (= 0 (count y))) \n  '() \n  (conj (myf (rest x) (rest y)) (first y) (first x))\n  )\n)","problem":39,"user":"506b437de4b0eda3100c0906"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [interleaved [] [elem1 & coll1] coll1 [elem2 & coll2] coll2]\n    (if (or (nil? elem1) (nil? elem2))\n      interleaved\n      (recur (into interleaved [elem1 elem2]) coll1 coll2)\n    )\n  )\n)","user":"5de6484ce4b0986d99407f66"},{"problem":39,"code":"(fn my-interleave [[ha & ra] [hb & rb]] \n  (concat \n   (list ha hb) \n   (if \n     (or (empty? ra) (empty? rb)) \n     '() \n     (my-interleave ra rb))))","user":"579e15a6e4b05b1deef9ae20"},{"code":"(fn  [list1 list2]\n  (loop [l1 list1, l2 list2, acc (vector)]\n    (cond (or (empty? l1) (empty? l2)) (seq acc)\n          :else (recur (rest l1) (rest l2) (conj acc (first l1) (first l2))))))","problem":39,"user":"538e36c7e4b0b51d73faae81"},{"problem":39,"code":"(fn zip-them [a b]\n  (if (and (first a) (first b))\n    (concat (list (first a) (first b))\n            (zip-them (rest a) (rest b)))))","user":"53e30fcae4b036ad0777e3fc"},{"problem":39,"code":"(fn myinterleave[l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n  (let [[a & q] l1 [b & r] l2]\n  (concat (list a b) (myinterleave q r)))))","user":"54651ef5e4b01be26fd746d5"},{"code":"#(reverse\n  (loop [xs %1\n         ys %2\n         zs '()]\n    (if (or (empty? xs) (empty? ys))\n      zs\n      (recur\n        (rest xs)\n        (rest ys)\n        (cons (first ys) (cons (first xs) zs))))))","problem":39,"user":"4ef8d47c535dced4c769f261"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (map list seq1 seq2)))","user":"5a5be4a6e4b0512ff01cd910"},{"problem":39,"code":"(fn inter[seq1 seq2]\n  (if (and seq1 seq2)\n    (concat [(first seq1) (first seq2)] (inter (next seq1) (next seq2)))))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn interl [col1 col2]\n  (letfn [(inter [col1 col2 sol]\n            (cond (empty? col2) sol\n                  (empty? col1) sol\n                  true (let [curr1 (first col1)\n                             curr2 (first col2)]\n                         (concat sol (list curr1 curr2) (interl (rest col1) (rest col2))))))]\n    (inter col1 col2 '())))","problem":39,"user":"4ea01955535d7eef3080729f"},{"problem":39,"code":"(fn interleaf\n  [s1 s2]\n  (->> (map list s1 s2)\n       (reduce #(concat %1 %2) nil)))","user":"562fb774e4b0ab312c17ebd9"},{"problem":39,"code":"(fn [s1 s2]\n  (letfn [(work [s1 s2]\n               (if (or (empty? s1) (empty? s2))\n                 '()\n                 (concat (list (first s1) (first s2)) (work (rest s1) (rest s2)))))]\n\n\t  (work s1 s2)))","user":"590253e3e4b0438e51c2d055"},{"problem":39,"code":"(fn interl [a b]\n  (lazy-seq (loop [r1 a r2 b out []]\n              (if (or (empty? r1) (empty? r2))\n                out\n                (recur (rest r1) (rest r2) (conj out (first r1) (first r2)))))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq1 seq1 seq2 seq2 combined ()]\n    (if (or (empty? seq1) (empty? seq2))\n    (reverse combined)\n    (recur (rest seq1) (rest seq2) (cons (first seq2) (cons (first seq1) combined))))))","user":"559bdf16e4b066d22e731f5a"},{"problem":39,"code":"(fn [xs ys]  (reduce concat (map list xs ys)))","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":39,"code":"(fn [s1 s2]\n\t(loop [seq1 s1 seq2 s2 new-seq []]\n \t\t(let [[s1-head & s1-r] seq1 [s2-head & s2-r] seq2]\n \t       (cond \n \t\t\t(or (nil? s1-head)(nil? s2-head))\n            \t(seq new-seq)\n         \t:else\n           \t(recur s1-r s2-r (conj  new-seq s1-head s2-head))))))","user":"54684c3be4b00cfc9eacc139"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (mapcat #(vector %1 %2) s1 s2))","user":"551bdefde4b07993ea3788d7"},{"problem":39,"code":"(fn [lstA lstB] (mapcat #(list %1 %2) lstA lstB))","user":"5bbbce0ee4b0a20761a2360d"},{"code":"(fn [c1 c2] (reduce concat [] (map vector c1 c2)))","problem":39,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":39,"code":"(fn inter [s t]\n  (if (or (empty? s) (empty? t))\n   \tnil\n    (concat (list (first s)) (list (first t)) (inter (rest s) (rest t)))))","user":"545801f6e4b01be26fd74615"},{"problem":39,"code":"(fn make-pairs\n   [x y]\n   (if (and (seq x)\n            (seq y))\n     (concat [(first x)\n              (first y)]\n             (make-pairs (rest x) (rest y)))))","user":"5b86462de4b047b03b2037df"},{"problem":39,"code":"(fn my-interleave\n  [& colls]\n  (flatten (apply (partial map list) colls)))","user":"572db6d5e4b0cd1946bd0f78"},{"problem":39,"code":"(fn [col1 col2]\n  (flatten (mapv (fn [x y]\n                  [x y]) col1 col2)))","user":"59331397e4b072a2710fd046"},{"code":"#(mapcat vector %1 %2)","problem":39,"user":"4dc986d0535d5973398f9285"},{"code":"(fn [x y] (apply concat (reverse (seq (zipmap x y)))))","problem":39,"user":"4eb0175b535d7eef30807336"},{"code":"(fn [x y] (loop [o '() f (seq x) s (seq y)]   \n  (if (or (nil? f) (nil? s)) (reverse o)\n     (recur (cons (first s) (cons (first f) o )) (next f) (next s))\n   )\n  )\n)","problem":39,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":39,"code":"mapcat list\n;(fn ileave [s1 s2]\n;  (let [c1 (seq s1) c2 (seq s2)]\n;    (println c1 c2)\n;    (if (and c1 c2)\n;      (cons (first c1) (cons (first c2) (ileave (rest c1) (rest c2)))))))","user":"54a854f5e4b09f271ff37ca2"},{"code":"(fn r [& x] (flatten (apply map list x)))","problem":39,"user":"525cc137e4b0cb4875a45d46"},{"problem":39,"code":"(fn [lst1 lst2]\n  (mapcat vector lst1 lst2))","user":"5a99b688e4b0d174b936c7a6"},{"code":"(fn [& args]\n  (apply mapcat list args))","problem":39,"user":"4eb7b049535d7eef30807377"},{"problem":39,"code":"(fn il\n  ([a b] (il a b []))\n  ([a b acc]\n   (if (or (empty? a) (empty? b)) \n     (seq acc)\n     (recur \n       (rest a)\n       (rest b)\n       (conj acc (first a) (first b))))))","user":"5591b61ee4b0604b3f94d580"},{"problem":39,"code":"(fn [seq1 seq2]\n   (loop [s1 seq1\n          s2 seq2\n          r  ()]\n     (if (or (empty? s1) (empty? s2))\n       (reverse r)\n       (let [[h1 & t1] s1\n             [h2 & t2] s2]\n         (recur t1 t2 (cons h2 (cons h1 r)))))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":39,"code":"(fn [s1 s2]\n  (mapcat #(conj [] %1 %2 ) s1 s2)\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":39,"code":"(fn f \n  ([a b] \n   (f a b []))\n  ([a b res]\n   (if (or (empty? a) (empty? b))\n     res\n     (recur (rest a) (rest b) (concat res [(first a) (first b)])))))","user":"5a536cf2e4b05d388ecb6c10"},{"problem":39,"code":"#(loop[col [] x %1 y %2]( if(and (not( empty? x)) (not (empty? y)) ) \n                              (recur (conj (conj col (first x)) (first y)) (rest x) (rest y))\n                              col\n                           ))","user":"55129667e4b06e50f9beb1ac"},{"code":"(fn [a b ]\n  (loop [a a b b l []]\n    (if (or (empty? a) (empty? b))\n      l\n      (recur (rest a) (rest b) (conj l (first a) (first b))))))","problem":39,"user":"507437c2e4b054001656acd0"},{"problem":39,"code":"#(->>\n   [%1 %2]\n   (map count)\n   (apply min)\n   (range)\n   (map (fn [x] [(nth %1 x) (nth %2 x)]))\n   (apply concat)\n   )","user":"5b118b7be4b0cc2b61a3be34"},{"problem":39,"code":"#(->> (map list %1 %2) flatten)","user":"597768d0e4b01722bebd4cee"},{"code":"(fn [x y] (loop [acc [] a x b y] (if (and a b) (recur (conj acc (first a) (first b)) (next a) (next b)) acc)))","problem":39,"user":"51a3c9cde4b0e77c4ca60bf9"},{"code":"(fn this [s1 s2]\n  (let [a1 (first s1)\n        a2 (first s2)]\n    (if (some nil? [a1 a2])\n      []\n      (cons a1 (cons a2 (this (rest s1) (rest s2)))))))","problem":39,"user":"4f1b3f4c535d64f603146478"},{"problem":39,"code":"(fn [first-seq second-seq]\n  (loop [accum '[], firsty first-seq, secondy second-seq]\n    (if (or (nil? firsty) (nil? secondy)) accum\n      (recur (into accum (list (first firsty) (first secondy) )) (next firsty) (next secondy)))))","user":"56ef2348e4b04a395b9a045c"},{"problem":39,"code":"(fn [s1, s2]\n  (apply concat\n         (for [i (range (min (count s1) (count s2)))]\n    [(nth s1 i) (nth s2 i)])))","user":"59288c2ce4b072a2710fceeb"},{"problem":39,"code":"(fn lista [l1 l2]\n\t(loop [l1 l1 l2 l2 acum [] ]\n\t\t(if (or (empty? l1 ) (empty? l2))\n\t\t\tacum\n\t\t\t(recur (rest l1) (rest l2) (conj (conj acum (first l1) ) (first l2))))))","user":"53422141e4b00652c8746ed5"},{"problem":39,"code":"(fn interleave-2-seqs [seq1 seq2]\n  (loop [s1 seq1 s2 seq2 res []]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur (rest s1) (rest s2) (conj (conj res (first s1)) (first s2))))))","user":"5d6e5ec6e4b04d129b00f2c7"},{"problem":39,"code":"(fn [i ii] (apply concat (map (fn [& aas] aas) i ii)))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":39,"code":"(fn\n  [x y]\n  (loop [coll1 x coll2 y out []]\n    (cond (or (empty? coll1) (empty? coll2)) out\n          :else (recur (rest coll1) (rest coll2) (conj (conj out (first coll1)) (first coll2))))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn [a b]\n  (mapcat #(conj [] %1 %2) a b))","problem":39,"user":"4fbcbd50e4b081705acca2f9"},{"problem":39,"code":"(fn itlv\n  [c1 c2]\n  (flatten (map #(seq [%1 %2]) c1 c2)))","user":"5609d328e4b05f002753deee"},{"problem":39,"code":"(fn my-interleave\n  ([arr1 arr2]\n  (my-interleave arr1 arr2 []))\n  ([arr1 arr2 res]\n  (if (or (zero? (count arr1)) (zero? (count arr2)))\n    res\n    (my-interleave (rest arr1) (rest arr2) (conj res (first arr1) (first arr2))))))","user":"5942a5a2e4b060784b3b7912"},{"code":"(fn intermo [xs ys & res]\n    (if-not (or (empty? xs) (empty? ys))\n        (intermo (rest xs) (rest ys) (conj res (first xs) (first ys)))\n        (-> res flatten reverse)))","problem":39,"user":"50053d6ce4b0678c553fc45e"},{"problem":39,"code":"(fn my-interleaved [left right]\n   (if (or (empty? left) (empty? right)) '()\n       (cons (first left) (cons (first right) (my-interleaved (rest left) (rest right))))))","user":"5bb25684e4b0a20761a2350d"},{"code":"(fn il [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1) s2 (seq c2)]\n     (when (and s1 s2)\n       (cons (first s1) (cons (first s2) (il (rest c1) (rest c2))))))))","problem":39,"user":"51631002e4b017b283c712c1"},{"code":"(fn [a b] ( mapcat list a b  ))","problem":39,"user":"528e1f30e4b0239c8a67aed4"},{"code":"(fn il [xs ys] (let [x (first xs) y (first ys)]\n                (if (and x y)\n                  (concat (list x y) (il (rest xs) (rest ys)))\n                  '()\n                  )\n                 ))\n;(fn [xs ys]\n;    (reduce\n;      #(concat (rest %1) (list (first %1) %2))\n;      (take (count ys) xs)\n;      (take (count xs) ys)))","problem":39,"user":"533b9cace4b0e30313ee6cd1"},{"problem":39,"code":"mapcat (fn [ x y ] (list x y) )","user":"57487084e4b009280f9f2b8c"},{"problem":39,"code":"(fn inter[c1 c2]\n  (loop [[a & more1 :as all1] c1\n         [b & more2 :as all2] c2\n         acc []]\n    (if (and all1 all2) \n      (recur more1 more2 (conj acc a b))\n      acc)\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [coll [] ss1 s1 ss2 s2]\n    (if (and\n          (not (empty? ss1))\n          (not (empty? ss2)))\n      (recur\n        (conj coll (first ss1) (first ss2))\n        (rest ss1)\n        (rest ss2))\n      coll)))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":39,"code":"#(mapcat flatten (reverse (zipmap %1 %2)))","user":"5576e78de4b05c286339e075"},{"problem":39,"code":"(fn f [a b] (if (or (empty? a) (empty? b)) '() (cons (first a) (cons (first b) (f (rest a) (rest b))))))","user":"55280930e4b0ffed3738f93b"},{"problem":39,"code":"(fn [a b] (flatten (for [i (range (min (count a) (count b)))]\n            [(nth a i) (nth b i)])))","user":"54d127b7e4b0e8a36923e5de"},{"code":"#(loop [r [] f %1 s %2]\n  (if (or (empty? f) (empty? s))\n    r\n    (recur (conj r (first f) (first s)) (rest f) (rest s))))","problem":39,"user":"4e4870d1535dc968683fc4bc"},{"problem":39,"code":"(fn [x y]\n(loop [xs x ys y r []]\n   (if (or (not (seq xs)) (not (seq ys)))  \n       r                                                         \n       (recur (rest xs) (rest ys) (conj r (first xs) (first ys))) \n)))","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":39,"code":"(fn hi \n  ([vec1 vec2]\n  (cond (> (count vec1) (count vec2)) (hi vec2 vec1 0)\n   \t\t(empty? (or vec1 vec2) ) '()\n        :else (into (hi (rest vec1) (rest vec2)) (cons (first vec2) (list (first vec1)) ) ) ) )  \n ([vec1 vec2 x]\n  (cond (> (count vec1) (count vec2)) (hi vec2 vec1 x)\n   \t\t(empty? (or vec1 vec2) ) '()\n        :else (into (hi (rest vec1) (rest vec2)) (cons (first vec1) (list (first vec2)) ) ) ) )  )","user":"5e663073e4b0fd0acd1586bc"},{"code":"(fn inter\n  ([l1 l2]\n    (inter\n      (rest l1) (rest l2)\n      (conj\n         [] (first l1) (first l2))))\n  ([l1 l2 tot]\n    (if \n      (or\n        (empty? l1)\n        (empty? l2))\n      tot\n      (inter\n        (rest l1) (rest l2)\n        (conj tot (first l1) (first l2))))))","problem":39,"user":"4f7d91e6e4b06e829148e1c3"},{"problem":39,"code":"(fn my-inter\n  [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n    (list x y)\n    (conj (my-inter xs ys) y x)))","user":"568bd448e4b0dcc4269f40a9"},{"problem":39,"code":"(fn [& args] \n  (let [couples (apply map vector args)]\n    (for [x couples y x] y)))","user":"5a082ce4e4b01bb0ae8afdec"},{"code":"(fn [x1 x2] (flatten (reverse (seq (zipmap x1 x2)))))","problem":39,"user":"4f037d9e535dcb61093f6af2"},{"problem":39,"code":"(fn [l r] (mapcat #(list %1 %2) l r))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":39,"code":"(fn interleave-two-seqs\n  [s1 s2]\n  (loop [se1 s1\n         se2 s2\n         f []]\n    (if (or (empty? se1)\n            (empty? se2))\n      f\n      (recur (rest se1) (rest se2) (conj f (first se1) (first se2))))))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn blah [l1 l2]\n    (if (or (empty? l1) (empty? l2)) nil \n    (concat (list (first l1) (first l2)) (blah (rest l1) (rest l2)))))","problem":39,"user":"4f17aa97535d64f603146456"},{"problem":39,"code":"(fn [x y]\n  (loop [first-sequence x\n         second-sequence y\n         interleaved-sequence []]\n    (let [first-item (first first-sequence)\n          second-item (first second-sequence)]\n      (if (or (nil? first-item) (nil? second-item))\n        interleaved-sequence\n        (recur\n         (rest first-sequence)\n         (rest second-sequence)\n         (conj interleaved-sequence (first first-sequence) (first second-sequence)))))))","user":"5675eea1e4b05957ce8c6152"},{"code":"mapcat (fn [& more] more)","problem":39,"user":"5208495ce4b0c1501ba9e6da"},{"code":"(fn myflatten [x y]\n  (flatten (map list x y))\n)","problem":39,"user":"4e6a79ca535d8ccf87e9feeb"},{"code":"(fn [x y]\n  (flatten (reverse (zipmap x y))))","problem":39,"user":"531016d0e4b08068f379ecd1"},{"code":"(fn [xs ys]\n  (loop [xs xs\n         ys ys\n         zs []]\n  \t(if (and (seq xs) (seq ys))\n      (recur (rest xs) (rest ys) (conj zs (first xs) (first ys)))\n      zs)))","problem":39,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn f\n  ([a b] (f a b []))\n  ([a b c]\n     (if (and (not-empty a) (not-empty b))\n       (recur (rest a) (rest b) (conj c (first a) (first b)))\n       c)\n  )\n)","problem":39,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":39,"code":"(fn _interleave_ [coll1 coll2]\n  (let [x (first coll1) y (first coll2)]\n    (if (and x y)\n      (concat [x y] (_interleave_ (rest coll1) (rest coll2))))))","user":"5e7af7ffe4b085ba37836e0f"},{"code":"(fn [left right] \n  (flatten (map vector left right))\n  )","problem":39,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":39,"code":"(fn [a b]\n  (loop [r '[] a a b b]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (conj r (first a) (first b)) (rest a) (rest b)))))","user":"58844d43e4b0f1effa3b7696"},{"code":"#(mapcat identity \n         (filter sequential? \n                 (map-indexed (fn [idx itm] \n                                (if (contains? %2 idx ) \n                                  [itm (get %2 idx)])) %)))","problem":39,"user":"50955676e4b087f34d351ab1"},{"problem":39,"code":"(fn [s1 s2](mapcat #(list %1 %2) s1 s2))","user":"522b1993e4b0d34ee08e71b6"},{"problem":39,"code":"(fn fc39 [l1 l2]\n  (cond (empty? l1) '()\n        (empty? l2) '()\n        :else (cons (first l1) (cons (first l2) (fc39 (rest l1) (rest l2))))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":39,"code":"(fn [a b]\n  (reduce concat\n          (map vector a b)\n  )\n)","user":"5bca2c71e4b07a9b28b100e7"},{"code":"(fn my-loop [l1 l2]\n    (if (or (empty? l1) (empty? l2))\n      nil\n      (concat (list (first l1) (first l2)) (my-loop (rest l1) (rest l2)))\n    )\n  )","problem":39,"user":"535aba96e4b04ce2eb3ed2a8"},{"problem":39,"code":"(fn [x y]\n  (loop\n    [x x\n     y y\n     res []]\n    (if (and (first x) (first y))\n    \t(recur \n            (next x) \n            (next y) \n            (conj (conj res (first x)) (first y))\n         )\n    \tres\n      )\n    )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"code":"(fn inter [l r]\n  (loop [l l r r acc '()]\n    (if (or (empty? l) (empty? r))\n      (reverse acc)\n      (recur (rest l) (rest r) \n        (conj acc (first l) (first r))))))","problem":39,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":39,"code":"(fn [lst1 lst2]\n  (loop [lst-1 lst1\n         lst-2 lst2\n         lst-res []]\n    (if (or (empty? lst-1)\n            (empty? lst-2))\n      lst-res\n      (recur (rest lst-1)\n             (rest lst-2)\n             (conj lst-res (first lst-1) (first lst-2))))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn [x y]\r\n  (flatten (map vector x y)))","problem":39,"user":"4ddee37c535d08e6dec9fddc"},{"code":"(fn [a b] (reduce #(concat %1 %2) [] (map vector a b)))","problem":39,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":39,"code":"(fn my-interleave\n  [coll-a coll-b]\n  (loop [in-a coll-a\n         in-b coll-b\n         out ()]\n    (if (or (empty? in-a) (empty? in-b))\n      (reverse out)\n      (recur (rest in-a) (rest in-b) (cons (first in-b) (cons (first in-a) out))))))","user":"5c92105ce4b048ec896c59f7"},{"problem":39,"code":"(fn join-lists [first last] (flatten(map list first last)))","user":"584e9acae4b0b7285a6f4e54"},{"problem":39,"code":"(fn [coll & rest-coll]\n    (flatten (apply map (fn [& elem] elem) coll rest-coll)))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":39,"code":";(fn [coll1 coll2]\n;  (loop [c1 coll1, c2 coll2, result []]\n;    (if (or (nil? c1) (nil? c2)) result\n;      (recur (next c1) (next c2) (conj result (first c1) (first c2))))))\n(fn [coll1 coll2] (mapcat #(list %1 %2) coll1 coll2))","user":"564b495de4b0284900eef667"},{"problem":39,"code":"(fn merge-vecs [x y]\n  (if (or (empty? x) (empty? y)) nil\n    (concat [(first x) (first y)] (merge-vecs (rest x) (rest y)))))","user":"545188ebe4b0e397800069b2"},{"problem":39,"code":"#(flatten (let [len (min (count %1) (count %2))]\n   (for [x (range len )] [(nth %1 x) (nth %2 x)])))","user":"53fcdd1ae4b0de5c418485dd"},{"code":"(fn my-interleave\n  ([f s] (my-interleave f s []))\n  ([f s acc]\n    (if (or (empty? f) (empty? s))\n      acc\n      (my-interleave (rest f) (rest s) (conj acc (first f) (first s)))\n    )\n  )\n)","problem":39,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn [xs ys]\n  (reduce concat (map list xs ys)))","problem":39,"user":"51b91b08e4b0e871ca4958f8"},{"problem":39,"code":"(fn [x y] (flatten (map #(list %1 %2)  x y)))","user":"4e273a93535deb9a81d77ef8"},{"problem":39,"code":"(fn custom-interleave [seq1 seq2]\n    (loop [result '() s1 (seq seq1) s2 (seq seq2)]\n        (if (and s1 s2)\n            (recur (conj result (first s1) (first s2)) (next s1) (next s2))\n            (reverse result))))","user":"55f330dde4b06e875b46ce56"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         result []]\n    (if (or (empty? s1) (empty? s2))\n      (seq result) \n      (recur (rest s1) (rest s2)\n             (into result [(first s1) (first s2)])))))","user":"58e63b75e4b056aecfd47cac"},{"problem":39,"code":"(fn [k v]\n  (flatten\n   (keep (fn [k1] (if ((zipmap k v) k1) [k1 ((zipmap k v) k1)])) \n         k)))","user":"55b527cbe4b01b9910ae2985"},{"code":"(fn [a b]\n  (apply concat (map (comp concat list) a b)))","problem":39,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":39,"code":"(fn interleave2\n  ([s1 s2] (interleave2 s1 s2 '()))\n  ([s1 s2 result]\n   (if (or (= s1 nil) (= s2 nil))\n     (reverse result)\n     (recur (next s1) (next s2) (conj (conj result (first s1)) (first s2))))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":39,"code":"(fn lazy-interleave [v1 v2]\n  (when (and (seq v1) (seq v2))\n    (lazy-cat [(first v1) (first v2)]\n              (lazy-interleave (rest v1) (rest v2)))))","user":"59fd069ae4b01bb0ae8afcf4"},{"code":"(fn f [ls rs]\n  (if (> (count ls) (count rs))\n    (reverse (f rs ls))\n    (flatten (map-indexed (fn [i l] [l (nth rs i)]) ls))))","problem":39,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"#(loop [f %1 s %2 r []]\n    (cond (or (empty? f) (empty? s)) r\n          :else (recur (rest f) (rest s) (conj r (first f) (first s)))))","problem":39,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":39,"code":";#(-> (zipmap %1 %2) seq reverse flatten)\nmapcat list","user":"59f590ade4b0966464fe6ac1"},{"code":"(fn t [x y] \n  (if (= (count x) 0) \n      []\n      (if (= (count y) 0) \n          []\n          (cons (first x) (cons (first y) (t (rest x) (rest y))))\n  ))\n)","problem":39,"user":"4e39c710535deb9a81d77f45"},{"code":"(fn [x y] (mapcat (fn [a b] [a b]) x y))","problem":39,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn foo [a b] (let\n  [c (first a) d (rest a)\n   e (first b) f (rest b)]\n  (if (or (empty? d) (empty? f)) \n    [c e]\n    (concat [c e] (foo d f)))))","problem":39,"user":"4f070ce6535dcb61093f6c1e"},{"problem":39,"code":"(fn f [xs ys]\n\t(letfn [(iter-f [xs ys zs]\n\t\t(if (or (empty? xs) (empty? ys))\n          zs\n          (iter-f (rest xs) (rest ys) \n                  (cons (first ys) \n                        (cons (first xs) zs)))))]\n                    (reverse (iter-f xs ys '()))))","user":"55e3e7a8e4b050e68259b44a"},{"code":"#(loop [a (seq %1), b (seq %2), v []]\n     (if (or (empty? a) (empty? b))\n       (lazy-seq v) \n       (recur (rest a) (rest b) (conj v (first a) (first b)))))","problem":39,"user":"4f038567535dcb61093f6b0c"},{"problem":39,"code":"#(loop [s1 %1 s2 %2 out []] (if (or (empty? s1) (empty? s2)) out (recur (rest s1) (rest s2) (conj out (first s1) (first s2)))))","user":"571aad45e4b07c98581c3b59"},{"problem":39,"code":"#(apply concat (map (fn[arr1 arr2]\n       [arr1 arr2]\n       ) %1 %2))","user":"5b162d8ce4b0cc2b61a3be78"},{"code":"mapcat (fn [& args] args)","problem":39,"user":"523353a7e4b0f0b72fabf402"},{"code":"#(flatten (for [i (range (min (count %) (count %2)))] [(% i) (%2 i)]))","problem":39,"user":"4f55f4b1e4b0a7574ea7180d"},{"problem":39,"code":"(fn blah [c1 c2]\n   (println c1 c2)\n  (if (and (not-empty c1) (not-empty c2))\n    (conj (blah (rest c1) (rest c2))  (first c2) (first c1))\n   '()\n    )\n  )","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(letfn [(i [[f1 & r1] [f2 & r2]]                                                                                                                                                                                                             \n          (if (and f1 f2)                                                                                                                                                                                                                    \n            (cons f1 (cons f2 (i r1 r2)))                                                                                                                                                                                                    \n            ()))]                                                                                                                                                                                                                            \n  i)","problem":39,"user":"4db342d7535df7e46ed9b6cd"},{"problem":39,"code":"(fn inter [s1 s2] (\n \tif (or (= 0 (count s1)) (= 0 (count s2))) '() (concat [(first s1) (first s2)] (inter (rest s1) (rest s2)))                  \n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":39,"code":"(fn toto [l1 l2] (\n\tif\n\t(or (empty? l1) (empty? l2))\n\tnil\n\t(\n\t\tlet [[head1 & tail1] l1 [head2 & tail2] l2]\n\t\t(conj (toto tail1 tail2) head2 head1)\n\t)\n\t)\n)","user":"57762befe4b0979f8965162f"},{"code":"(fn [x1 x2] (mapcat #(conj () %2 %1) x1 x2))","problem":39,"user":"539ee639e4b0ca733b974493"},{"code":"#(into (empty %)\n  (apply concat\n    (for [i (range (min (count %) (count %2)))]\n      (list (nth % i) (nth %2 i)))))","problem":39,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"(fn [x y] (mapcat #(vector %1  %2) x y))","problem":39,"user":"5179fd22e4b01aacecbecbe5"},{"problem":39,"code":"(fn [arg1 arg2] (mapcat vector arg1 arg2))","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn foo [coll1 coll2 ]\n  (let [f1 (first coll1) \n        f2 (first coll2) \n\t\tr1 (next coll1) \n\t\tr2 (next coll2)]\n\t (cond (and (seq coll1) (seq coll2))\n       (cons f1 (cons f2 (lazy-seq (foo r1 r2))))\n\t   :else ())))","problem":39,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn inter [s1 s2]\n   (when (and (first s1) (first s2))\n    (conj (inter (next s1) (next s2)) (first s2) (first s1))))","problem":39,"user":"523b10dfe4b02f719975bdb8"},{"problem":39,"code":"(fn my-interleave\n  ([l ll] (my-interleave l ll []))\n  ([l ll xs] \n   (if (or (empty? l) (empty? ll))\n     xs\n     (recur (rest l) (rest ll) (conj (conj xs (first l)) (first ll))))))","user":"60ade833e4b00e9e6653c494"},{"code":"#(flatten (into [] (reverse (zipmap %1 %2))))","problem":39,"user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn ilf [x y] (loop [a x b y r []]\n  (if-not (or (empty? a) (empty? b))\n    (recur (rest a) (rest b) (conj r (first a) (first b)))\n    r\n  )\n))","problem":39,"user":"4ea1ecfa535d7eef308072bb"},{"problem":39,"code":"(fn[c1 c2] (mapcat list c1 c2))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":39,"code":"(fn [a b]\n   (loop [a a b b result []]\n     (if (or (empty? a) (empty? b))\n       result\n       (recur (rest a) (rest b) (conj result (first a) (first b)))))\n   )","user":"5658b9bde4b00d315579610e"},{"problem":39,"code":"(fn interleave2 [[x & xs]\n                   [y & ys]]\n  (if (or (nil? x) (nil? y))\n    ()\n    (cons x (cons y (lazy-seq (interleave2 xs ys))))))","user":"55aa7c5ce4b0988bba2ad94d"},{"problem":39,"code":"(fn [seq1 seq2] \n  (apply concat (map (fn [x y] (list x y)) seq1 seq2)))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [s1 s2] \n  (mapcat #(list %1 %2) s1 s2))","problem":39,"user":"4ef0a38e535dced4c769f20b"},{"code":"(fn[a b] (loop [v1 a v2 b r [] ] (if (or (empty? v1) (empty? v2)) r (recur (rest v1) (rest v2) (conj r (first v1) (first v2)))) ))","problem":39,"user":"536e86b0e4b0fc7073fd6e72"},{"problem":39,"code":"(fn [s1 s2] (let [itr (min (count s1) (count s2))] (loop [ret [] i 0] (if (= itr i) ret (recur (conj ret (nth s1 i) (nth s2 i)) (+ i 1))))))","user":"59468de7e4b07ddc2dafad88"},{"problem":39,"code":"(fn [coll1 coll2] \n  (apply concat \n         (map (fn [a b] (list a b))                       \n              coll1 coll2)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [x y]\n  (loop\n    [i 0\n    n (if (< (count x) (count y) ) (count x) (count y))\n    L []]\n      (if (< i n)\n        (recur (inc i) n (conj L (nth x i) (nth y i)))\n        L)))","problem":39,"user":"4fb069b1e4b081705acca266"},{"problem":39,"code":"(fn [xs ys]  (flatten (map list xs ys)))","user":"5a5be1ece4b0512ff01cd90f"},{"problem":39,"code":"(fn my-interleave\n  [fseq sseq]\n  (loop\n      [combined []\n       f fseq\n       s sseq]\n    (if (or (= f []) (= s []))\n      combined\n      (recur (concat combined (list (first f) (first s))) (rest f) (rest s)))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"problem":39,"code":"(fn eee [s1 s2]\n  (loop [s1 s1 s2 s2 acc []]\n    (if (or (nil? (first s1))(nil? (first s2)))\n      acc\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2))))))","user":"5843b231e4b089d5ab817e3d"},{"code":";; handle any number of seqs to interleave, so also 2\n(fn inter ([& lists] \n  (if (every? seq lists)\n    (concat (map first lists) (apply inter (map rest lists)))\n    [])))","problem":39,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":39,"code":"(fn inter-leave [first-seq second-seq]\n  (let [item-seq1 (first first-seq)\n        item-seq2 (first second-seq)]\n    (cond \n      (nil? item-seq1) []\n      (nil? item-seq2) []\n      :default (concat [item-seq1 item-seq2] (inter-leave (rest first-seq) (rest second-seq))))))","user":"568f2059e4b0dcc4269f40df"},{"problem":39,"code":"(fn interl [x y]\n  (loop [l '() i (dec (min (count x) (count y)))]\n    (if (< i 0)\n      l\n      (recur (cons (nth x i) (cons (nth y i) l)) (dec i)))))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn myInter [xs ys]\n    (if (or (empty? xs) (empty? ys)) ()\n        (let [x (first xs) y (first ys)]\n             (concat (list x y) (myInter (next xs) (next ys))))))","problem":39,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":39,"code":"(fn foo [col1 col2]\n  (cond (nil? col1) '()\n        (nil? col2) '()\n        :else (let [f1 (first col1)\n                    f2 (first col2)]\n                (concat (list f1 f2) (foo (next col1)\n                                          (next col2))))))","user":"5b333626e4b025bcb146f32f"},{"code":"(fn [sq1 sq2]\n   (mapcat #(list % %2) sq1 sq2))","problem":39,"user":"523bd9c0e4b07becd5be2201"},{"problem":39,"code":"(fn [x y]\n    (loop [f x s y i []]\n      (if (or (empty? f) (empty? s))\n        (apply list i)\n        (recur (rest f) (rest s) (conj i (first f) (first s)))\n        )))","user":"5d52bf29e4b0776584bd6f69"},{"problem":39,"code":"(fn InterleaveTwoSeqs [a b]\n  (apply concat\n         (map (fn [x y]\n                (list x y))\n              a\n              b)))","user":"53b88e6ee4b047364c0444de"},{"problem":39,"code":"(fn [s1 s2] (loop [s1 s1, s2 s2, a []] (if (or (empty? s1) (empty? s2)) a (recur (rest s1) (rest s2) (conj (conj a (first s1)) (first s2))))))","user":"4e268c6e535deb9a81d77ef4"},{"code":"(fn my-interleave [xs ys]\n  (mapcat (fn [x y] [x y]) xs ys))","problem":39,"user":"4f07bc41535dcb61093f6c2c"},{"problem":39,"code":"(fn\n  [x y]\n  (loop [x x\n         y y\n         inter []]\n    (if (or (empty? x) (empty? y))\n      inter\n      (recur (rest x) (rest y) (conj inter (first x) (first y)))\n      )\n    )\n  )","user":"5c6cb3bfe4b0fca0c1622730"},{"problem":39,"code":"(fn ilv \n  ([sq1 sq2] (ilv '() sq1 sq2))\n  ([out sq1 sq2] \n   (cond\n    (empty? sq1) (reverse out)\n    (empty? sq2) (reverse out)\n    :else (ilv (conj out (first sq1) (first sq2)) (rest sq1) (rest sq2))\n  ))\n)","user":"5280a1ece4b0757a1b171407"},{"code":"(fn interleave2 [a b]\n  (cond\n   (empty? a) '()\n   (empty? b) '()\n   :else (conj (interleave2 (rest a)\n                            (rest b))\n               (first b)\n               (first a))))","problem":39,"user":"5374adc3e4b06d7f452d9e27"},{"problem":39,"code":"#(mapcat (fn [a b] (conj [] a b)) %1 %2)","user":"556be3dce4b09a3098a524f7"},{"problem":39,"code":"(fn foo [s1 s2]\n  (cond\n    (or (empty? s1) (empty? s2)) '()\n    :else (conj (foo (rest s1) (rest s2)) \n                (first s2) \n                (first s1))))","user":"5fb8fe30e4b03f550f448223"},{"code":"(fn a[f, s]\n  (if (and (not (nil? (first f)))\n          (not (nil? (first s))))\n    \n     (conj (conj (a (rest f) (rest s)) (first s))\n           (first f))\n    '() \n  ))","problem":39,"user":"513f53c6e4b051389b345b40"},{"problem":39,"code":"(fn [x y] (loop [c 0 values []]\n            (if (> (apply min (conj [](count x)(count y)))c)\n                (recur (inc c)(conj values (nth x c)(nth y c)))\n                values)))","user":"5b1619e4e4b0cc2b61a3be77"},{"code":"mapcat (fn [x y] (list x y))","problem":39,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn [& xs]\n  (apply concat\n    (for [i (range 0 (apply min (map count xs)))]\n      (map #(get % i) xs))))","problem":39,"user":"5185e17ee4b0da5a5be3bac5"},{"problem":39,"code":"#(mapcat vector %1 %2\n         )","user":"5a09ebf8e4b0eab8c0448932"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (flatten (map list xs ys)))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":39,"code":"(fn [x1 x2]\n  (mapcat #(vector %1 %2) x1 x2))","user":"501b1efee4b0b12d9c5f4d82"},{"problem":39,"code":"#(flatten (map (fn [& args] args) %1 %2))","user":"592518cde4b072a2710fce66"},{"code":"(fn f [x y] (flatten (map #(concat [] [%1 %2] )  x y)))","problem":39,"user":"5062bc46e4b05ac47bc68d68"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map (fn [s1 s2]\n                     (vector s1 s2)\n                     ) seq1 seq2))\n  )","user":"5cdbb1b2e4b05ee0cb311732"},{"problem":39,"code":"(fn [col1 col2] (flatten (vec (reverse (zipmap col1 col2)))))","user":"5489dd4de4b0e286459a11ef"},{"problem":39,"code":"(fn interl [lst1 lst2]\n  (if (or (empty? lst1) (empty? lst2))\n    (concat [])\n    (concat (list (first lst1)) (list (first lst2)) (interl (rest lst1) (rest lst2)))\n   )\n  )","user":"57ce2db8e4b0c746388ab8a4"},{"problem":39,"code":"#(apply concat (map vector %1 %2\n                    ))","user":"58060dace4b0a837a8b30cd5"},{"code":"(fn inter [xs ys] (if (and (seq xs) (seq ys)) (concat (take 1 xs) (take 1 ys) (inter (rest xs) (rest ys)))))","problem":39,"user":"53388e2de4b0e30313ee6c9c"},{"code":"(fn foo [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (foo (rest s1) (rest s2))))))))","problem":39,"user":"51181009e4b0e0897831a60f"},{"code":"(fn [as bs] \n  (mapcat #(list %1 %2) as bs))","problem":39,"user":"5393de76e4b0b51d73faaec2"},{"problem":39,"code":"(fn [a b] (flatten (map (fn [a b] (list a b)) a b)))","user":"5b2eba82e4b025bcb146f2dd"},{"problem":39,"code":"(fn [seq_1 seq_2] (seq (reduce into [] (map list seq_1 seq_2))))","user":"588f500ae4b00487982d51a4"},{"problem":39,"code":"(fn [a b] (mapcat #(identity [%1 %2])\n                  a b))","user":"512655b7e4b05d10e3e39603"},{"code":"#(flatten (apply map list (list %1 %2)))","problem":39,"user":"4f039a8b535dcb61093f6b36"},{"problem":39,"code":"(fn inter [s r]\n  (apply\n  concat\n  (map\n    #(vector\n        (nth s %1)\n        (nth r %1))\n    (range\n      (min\n        (count s)\n        (count r))))))","user":"5779556de4b0979f8965166e"},{"problem":39,"code":"#(flatten (apply map vector [%1 %2]))","user":"56188848e4b053970a773aea"},{"code":"(fn f\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (f (rest s1) (rest s2)))))))))","problem":39,"user":"524fafdfe4b0541d1855b818"},{"problem":39,"code":"(fn a [x y] (loop [i 0 res []] (if(and (< i (count x)) (< i (count y))) (recur (inc i) (conj res (x i) (y i))) res)))","user":"5971763fe4b01722bebd4c72"},{"problem":39,"code":"(fn [x y] \n   (loop [final [] set1 x set2 y]\n     (if (or (empty? set1) (empty? set2))\n       final\n       (recur (conj final (first set1) (first set2)) (rest set1) (rest set2))\n       )))","user":"55e20059e4b050e68259b427"},{"code":"(fn [a b] (apply concat (map #(if (and %1 %2) [%1 %2] []) a b)))","problem":39,"user":"4ef0a39b535dced4c769f20d"},{"problem":39,"code":"(fn [sequence1 sequence2] (flatten (map list sequence1 sequence2)))","user":"5ac37d0fe4b0e27600da7718"},{"problem":39,"code":"(fn [l1 l2]\n  (flatten (map #(list %1 %2) l1 l2 )))","user":"58969420e4b00487982d52a4"},{"problem":39,"code":"(fn interleave-seqs\n    ([seq1 seq2] (reverse (interleave-seqs '() seq1 seq2)))\n    ([acc seq1 seq2]\n        (if (or (empty? seq1) (empty? seq2))\n            acc\n            (interleave-seqs\n                (conj (conj acc (first seq1)) (first seq2))\n                (rest seq1)\n                (rest seq2)))))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":39,"code":"(fn iii [a b] (if (empty? a) nil (if (empty? b) nil (concat (list (first a) (first b)) (iii (rest a) (rest b))))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":39,"code":"(fn [xs ys] \n\t(loop [i 0 acc []]\n\t\t(if (= i (min (count xs) (count ys))) \n\t\t\tacc\n\t\t\t(recur (inc i) (concat acc [(nth xs i)] [(nth ys i)]))\n\t\t)))","user":"59f043d0e4b0966464fe6a3d"},{"problem":39,"code":"(fn my-interleave [s t]\n  (let [s_1 (first s) t_1 (first t) rest_s (rest s) rest_t (rest t)]\n    (if (and (seq rest_t) (seq rest_s))\n      (concat [s_1 t_1] (my-interleave rest_s rest_t))\n      [s_1 t_1])))","user":"54c9571ee4b045293a27f66b"},{"problem":39,"code":"(fn [xs ys]\n          (loop [xs xs ys ys result '()]\n            (if (or (empty? xs) (empty? ys))\n              result\n              (recur (rest xs) (rest ys) (concat result [(first xs) (first ys)])))))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"code":"#(mapcat (fn [x y] (list x y)) % %2)","problem":39,"user":"50b11fbce4b009df37c708cb"},{"problem":39,"code":"(fn newInterleave [x,y] (cond (empty? x) '()\n                              (empty? y) '()\n                              :else (concat (list (first x) (first y)) (newInterleave (rest x) (rest y)))))","user":"5e308c96e4b05b4b01516214"},{"code":"(fn [& args]\r\n    (let [num (apply min (map count args))]\r\n        (loop [cnt num acc [] curr args]\r\n            (if (= cnt 0) acc\r\n                (recur (dec cnt) (concat acc (map first curr)) (map rest curr))) ) ) )","problem":39,"user":"523dd963e4b06956f8342ca1"},{"problem":39,"code":"(comp flatten seq reverse zipmap)","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":39,"code":"(fn interleavo [col1 col2]\n  (loop [acc []\n         cur1 col1\n         cur2 col2]\n    (if (and (seq cur1)\n             (seq cur2))\n      (recur (conj acc (first cur1) (first cur2)) \n             (rest cur1)\n             (rest cur2))\n      acc)))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":39,"code":"(fn [xs ys]\n  (loop [as xs\n         bs ys\n         r []]\n    (cond\n     (empty? as) r\n     (empty? bs) r\n     :else (recur (rest as) (rest bs) (conj r (first as) (first bs))))))","user":"5ab9fe71e4b073f17744269d"},{"problem":39,"code":"(fn [x y]\n  (loop [a x \n         b y\n         res []]\n    (if (and (seq a) (seq b))\n      (recur (rest a) \n             (rest b) \n             (conj res \n                   (first a) \n                   (first b)))\n      res)))","user":"55912230e4b027778923767a"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [li1 l1 li2 l2 le ()]\n    (if (or (empty? li1) (empty? li2))\n      (reverse le)\n      (recur (rest li1) (rest li2) (conj le (first li1) (first li2))))))","user":"52979551e4b02ebb4ef75043"},{"problem":39,"code":"(fn foo [x y] (if (or (empty? x) (empty? y))\n                []\n                (cons (first x) (cons (first y) (foo (rest x) (rest y)))))\n  )","user":"5520974be4b08d5046aa8a63"},{"problem":39,"code":"(fn [a b](flatten (map #(vector %1 %2) a b)))","user":"563c6ebae4b0bfe05bf11834"},{"problem":39,"code":"#(flatten(reverse (zipmap % %2)))","user":"56ede653e4b04a395b9a0449"},{"problem":39,"code":"(fn [left right]\n  (mapcat (fn [x y]\n            [x y])\n   left\n   right))","user":"554bd33ce4b0a04f7929959a"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [seq3 [] ix 0]\n    (if (or (> (inc ix) (count seq1)) (> (inc ix) (count seq2)))\n      seq3\n      (recur (conj (conj seq3 (nth seq1 ix)) (nth seq2 ix)) (inc ix)))))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"#(loop [al1 %\n       al2 %2\n       nl '()]\n  (if (or (empty? al1) (empty? al2)) nl\n    (recur (rest al1) (rest al2) (concat nl [(first al1) (first al2)]))))","problem":39,"user":"5325cef5e4b09d4e7a9b54e7"},{"code":"(fn [f s] (loop [[f & fs] f [s & ss] s i []] (if (or (not f) (not s)) i (recur fs ss (conj i f s)))))","problem":39,"user":"4f4afb1fe4b0d56e7bb92c21"},{"code":"(fn interl [coll1 coll2]\r\n  (loop [c1 coll1 c2 coll2 r []]\r\n    (if (or (empty? c1) (empty? c2))\r\n      r\r\n      (recur \r\n        (rest c1) \r\n        (rest c2) \r\n        (conj r (first c1) (first c2))))))","problem":39,"user":"4f378631e4b0e243712b1ed3"},{"code":"(fn interleave2 [x y]\n  (let [s1 (seq x)\n        s2 (seq y)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2) (interleave2 (rest s1) (rest s2)))))))","problem":39,"user":"51f82769e4b09be9c177e527"},{"problem":39,"code":"(fn [list1 list2]\n  (let [f (fn innerf [result l1 l2]\n            (let [f1 (first l1)\n                  f2 (first l2)]\n              (if (or\n                   (nil? f1)\n                   (nil? f2))\n                result\n                (innerf\n                 (concat result [f1 f2])\n                 (rest l1)\n                 (rest l2)))))]\n    (f [] list1 list2)))","user":"5463c824e4b01be26fd746c5"},{"code":"(fn inter-leave [xs ys]\n   (if (or (empty? xs) (empty? ys))\n     []\n     (cons (first xs)\n           (cons (first ys)\n                 (inter-leave (rest xs) (rest ys))))))","problem":39,"user":"516282c3e4b0e6d3c4734711"},{"problem":39,"code":"(fn intl\n  ([x y]  (intl x y []))\n  ([ [x & rx] [y & ry] acc]\n   (let [ret (conj acc x y)]\n     (if (or (empty? rx) (empty? ry))\n       ret\n       (do\n         (recur rx ry ret))))))","user":"5be0306be4b0ed4b8aab4c7d"},{"code":"(fn my-interleave \n  [[x1 & xs1] [x2 & xs2]] \n  (if (or (nil? x1) (nil? x2)) \n    nil \n    (cons x1 (cons x2 (lazy-seq (my-interleave xs1 xs2))))\n  )\n)","problem":39,"user":"52299d14e4b04c906c9c6a7e"},{"problem":39,"code":"(fn [input1 input2]                                                                                                                                                                                      \n  (loop [r []                                                                                                                                                                                                    \n         s1 input1                                                                                                                                                                                               \n         s2 input2]                                                                                                                                                                                              \n    (let [v1 (first s1)                                                                                                                                                                                          \n          v2 (first s2)]                                                                                                                                                                                         \n      (if (or (nil? v1) (nil? v2))                                                                                                                                                                               \n        r                                                                                                                                                                                                        \n        (recur (conj r v1 v2) (rest s1) (rest s2))))))","user":"53403f42e4b085b17e897da8"},{"problem":39,"code":"(fn [x y] (flatten (into '() (zipmap x y))))","user":"5ff32e20e4b05ac5b16ea1ff"},{"problem":39,"code":"#(apply concat (mapv vector % %2))","user":"547d66a1e4b0c51c1f4d72f2"},{"code":"#(loop [x %1 y %2 z []] \n\t(if (or (empty? x) (empty? y)) z\n\t(recur (rest x) (rest y) (conj z (first x) (first y)))))","problem":39,"user":"52b79d8ee4b0c58976d9ad50"},{"code":"#(reduce concat [] (map vector %1 %2))","problem":39,"user":"5065b810e4b0148eb3925aec"},{"problem":39,"code":"(fn inter\n  ([xs ys] (inter xs ys []))\n  ([xs ys done]\n   (if (or (empty? xs)\n           (empty? ys))\n     done\n     (recur (rest xs) (rest ys) (conj done (first xs) (first ys))))))","user":"574e84e0e4b02ea114799243"},{"problem":39,"code":"#(reverse (loop [c1 %1\n        c2 %2\n        c3 '()]\n   (if (or (empty? c1) (empty? c2))\n     c3\n     (recur (rest c1) (rest c2) (conj c3 (first c1) (first c2))))\n   ))","user":"5c1aadcde4b01240ff567209"},{"problem":39,"code":"(fn fib\n  ([xs1 xs2]\n   (fib xs1 xs2 []))\n  ([xs1 xs2 rs]\n   (if (or (empty? xs1) (empty? xs2))\n   rs\n   (recur (rest xs1)\n          (rest xs2)\n          (conj rs (first xs1) (first xs2))))))","user":"5b37a3b4e4b02d533a91bba9"},{"problem":39,"code":"#(flatten (for [index (range (min (count %1) (count %2)))]\n      [(nth %1 index) (nth %2 index)]))","user":"583c8bd4e4b089d5ab817d81"},{"problem":39,"code":"(fn [xs1 xs2] (flatten (reverse (seq (zipmap xs1 xs2)))))","user":"59368efbe4b02506e01a297d"},{"code":"(fn [seq1 seq2]\n  (loop [result [] a seq1 b seq2 n (min (count seq1) (count seq2))]\n    (if (zero? n)\n      result\n      (recur (conj result (first a) (first b)) (rest a) (rest b) (- n 1)))))","problem":39,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [a coll1 b coll2 acc []]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (conj acc (first a) (first b))))))","user":"541ad1c1e4b01498b1a71a5c"},{"problem":39,"code":"(fn new-interleave [a b] (let [v []] ((fn f [k,m,n] = (if (or (= m []) (= n [])) k (f (conj k (first m) (first n)) (rest m) (rest n)))) v a b)))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":39,"code":"#(mapcat (fn [e1 e2] [e1 e2]) %1 %2)","user":"520e37cfe4b066f3ea161c96"},{"problem":39,"code":"(fn my-interleave-2-seq [a b]\n  (println (map #(list %1 %2) a b))\n  (reduce #(conj (conj %1 (second %2)) (first %2)) () (reverse (map #(list %1 %2) a b))))","user":"5f5b624de4b05ea7b9adc42f"},{"problem":39,"code":"(fn\n  [coll1 coll2]\n  (apply concat (map #(conj (conj '() %2) %1) coll1 coll2)))","user":"5e16fd78e4b0a047bd49f726"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1_ s1 s2_ s2 a []]\n    (if (or (empty? s1_) (empty? s2_))\n            (apply list a)\n            (recur (rest s1_) (rest s2_) (conj (conj a (first s1_)) (first s2_))))))","user":"5762bf13e4b0994c1922fbae"},{"problem":39,"code":"(fn [s1 s2]\n  (mapcat vector s1 s2))","user":"53576356e4b04ce2eb3ed27a"},{"problem":39,"code":"(fn [x y] \n (flatten (for \n  [n (range (min\n            (count x) (count y)))]\n  (map #(nth % n) [x y]))))","user":"550772cee4b021ccfedb96a8"},{"code":"(fn !\r\n  [c1 c2]\r\n  (lazy-seq\r\n    (let [s1 (seq c1) s2 (seq c2)]\r\n      (when (and s1 s2)\r\n        (cons (first s1) (cons (first s2) \r\n          (! (rest s1) (rest s2))))))))","problem":39,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn my-interleave [s1 s2]\n  (loop [seq1 s1 seq2 s2 res []]\n    (if (or (empty? seq1) (empty? seq2))\n      res\n      (recur (rest seq1) (rest seq2) (conj res (first seq1) (first seq2))))))","problem":39,"user":"4fcd1bbde4b065de69964ca4"},{"code":"(fn [x y] (apply concat (map #(seq [%1 %2]) x y)))","problem":39,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":39,"code":"(fn i [a b]\n  (if (or \n       (empty? a) (empty? b)) \n    []\n    (concat \n     (list (first a))\n     (list (first b))\n     (i (rest a) (rest b)))))","user":"54835065e4b0e286459a118c"},{"problem":39,"code":"(fn [xs ys] (mapcat #(vec [%1 %2]) xs ys) )","user":"5680104ae4b0966858e4d8ea"},{"code":"(fn intl\r\n  [c1 c2]\r\n  (let [s1 (seq c1) s2 (seq c2)]\r\n    (when (and s1 s2)\r\n      (cons (first s1) (cons (first s2)\r\n                             (intl (rest s1) (rest s2)))))))","problem":39,"user":"4f18677d535d64f603146459"},{"code":"(fn [c1 c2] (reduce concat (map (fn [x y] [x y]) c1 c2)))","problem":39,"user":"514721c6e4b0d520409ed392"},{"problem":39,"code":"(fn interleaveCore [first-col second-col]\n  (flatten (apply map vector [first-col second-col])))","user":"57465526e4b009280f9f2b61"},{"problem":39,"code":"#(loop [acc []\n        as %1\n        bs %2]\n   (if (or (empty? as) (empty? bs))\n     acc\n     (recur (conj acc (first as) (first bs)) (rest as) (rest bs))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":39,"code":"(fn [a b] (mapcat #(conj [] %1 %2) a b) )","user":"5372e7d9e4b06d7f452d9e02"},{"problem":39,"code":"(fn [xs ys]\n   (loop [as xs bs ys cs []]\n     (if (not (and as bs))\n       cs\n       (recur (next as) (next bs) (concat cs [(first as) (first bs)])))))","user":"59279a89e4b072a2710fced3"},{"problem":39,"code":"#(loop [a %1 b %2 res []]\n   (if (or (empty? a) (empty? b))\n       res \n       (recur (rest a) \n              (rest b) \n              (conj res (first a) (first b)))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"#(letfn [(il [l r m]\n            (if (or (empty? l) (empty? r))\n                (reverse m)\n                (il (rest l) (rest r) (cons (first r) (cons (first l) m)))))]\n    (il %1 %2 nil))","problem":39,"user":"4fb4099be4b081705acca2a9"},{"problem":39,"code":"(fn inter [a b]\n  (if (empty? a)\n    []\n    (if (empty? b)\n      []\n      (cons (first a) (cons (first b) (inter (rest a) (rest b)))))))","user":"59733c91e4b01722bebd4c9b"},{"problem":39,"code":"(fn myinterleave [coll1 coll2]\n  (loop\n   [c1 coll1\n    c2 coll2\n    result []]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (rest c1) (rest c2) (conj (conj result (first c1)) (first c2))))))","user":"5ab490f4e4b073f17744261d"},{"problem":39,"code":"(fn [x y] \n   ((fn inter [res _x _y]      \n      (if (or (empty? _x) (empty? _y))\n        res\n        (inter (conj res (first _x) (first _y)) (rest _x) (rest _y)))) [] x y)\n   )","user":"60a7c55be4b00e9e6653c468"},{"problem":39,"code":"(fn [lhs rhs]\n   (loop [output '()\n          left lhs\n          right rhs]\n     (if (or (empty? left) (empty? right))\n       output\n       (recur (concat output (list (first left) (first right))) (rest left) (rest right)))))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":39,"code":"(fn [coll1 coll2] (into [] (mapcat vector coll1 coll2)))","user":"53dfbc75e4b0d874e779ae44"},{"code":"(fn [seq1 seq2]\n  (loop [buf1 seq1, buf2 seq2, out []]\n    (if (or (empty? buf1) \n            (empty? buf2))\n      out\n      (recur (rest buf1)\n             (rest buf2)\n             (concat out [(first buf1) (first buf2)])))))","problem":39,"user":"4f80a906e4b033992c121bf7"},{"problem":39,"code":"(fn [as bs] (flatten (map vector as bs)))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [x y]\n  (loop [i 0 cnt (min (count x) (count y)) newseq []]\n    (if (= i cnt) newseq\n    (recur (inc i) cnt (conj newseq (nth x i) (nth y i))))))","problem":39,"user":"4ea9b80c535d7eef30807306"},{"problem":39,"code":"(fn my-interleave [& colls]\n  (apply mapcat #(vec %&) colls))\n\n;; mapcat list","user":"5370d152e4b0fc7073fd6e9d"},{"code":"#(reverse (flatten (into [] (zipmap %2 %1))))","problem":39,"user":"4e3f480c535dc968683fc497"},{"problem":39,"code":"#(flatten (map conj (partition 1 %2) (flatten (partition 1 %1))))","user":"54b2ec84e4b09f271ff37d33"},{"problem":39,"code":";mapcat (fn [x y] [x y])\nmapcat list","user":"55b8c339e4b01b9910ae29b9"},{"problem":39,"code":"(fn [x y]\n  (loop [resp []\n         list1 x\n         list2 y\n         index (min (count x) (count y))]\n    (if (zero? index) resp\n      (recur (concat resp (list (first list1) (first list2)))\n             (rest list1)\n             (rest list2)\n             (dec index)))))","user":"582589b2e4b051871117bedd"},{"code":"(fn  [& beeboo]\n  (loop [res []\n         seqs (vec beeboo)\n         n (* (apply min (map count seqs))\n              (count beeboo))]\n    (if (= 0 n)\n      res\n      (let [foo (first seqs)]\n        (recur \n         (conj res (first foo))\n         (conj (subvec seqs 1)\n               (subvec foo 1))\n         (dec n))))))","problem":39,"user":"504e90bae4b069badc5a33b8"},{"code":"(fn my-inter [x y]\n  (flatten (reverse (seq (zipmap x y)))))","problem":39,"user":"4eb2c45e535d7eef3080734d"},{"problem":39,"code":"; (fn my-interleave\n;   [xs ys]\n;   (loop [xs xs\n;          ys ys\n;          interleaved []]\n;     (if (or (not (seq xs)) (not (seq ys)))\n;       interleaved\n;       (let [[x & xs'] xs\n;            [y & ys'] ys]\n;         (recur xs' ys' (conj (conj interleaved x) y))))))\n\n; mapcat vector\n\n#(mapcat vector %1 %2)","user":"56255e2de4b00a550fc90297"},{"problem":39,"code":"(fn [xs ys]\n   (loop [n 0, result []]\n     (if (or (= n (count xs)) (= n (count ys))) result\n         (recur (inc n) (conj (conj result (nth xs n)) (nth ys n))))\n     )\n   )","user":"589037b4e4b00487982d51d0"},{"problem":39,"code":"(fn [& args] (apply mapcat (fn [a b] [a b]) args))","user":"58d48df8e4b03c36ff7e5941"},{"code":"#(loop [x %1 y %2 result []]\n         (if (or (nil? (first x)) (nil? (first y)))\n           result\n           (recur (rest x) (rest y)\n                  (let\n                    [a (first x) b (first y)]\n                    (conj result a b)))))","problem":39,"user":"52cdec62e4b07d0d72b27382"},{"problem":39,"code":"(fn [cla clb]\n  (apply concat (map (fn [x y]\n                       (list x y)) cla clb)))","user":"57908d94e4b0ebec4cfb75ac"},{"problem":39,"code":"(fn [fst-seq snd-seq]\n  (mapcat list fst-seq snd-seq))","user":"4fbfbd4fe4b081705acca31c"},{"problem":39,"code":"(fn [& args] (flatten (apply map vector args)))","user":"559b55d6e4b066d22e731f54"},{"problem":39,"code":"(fn [l-seq r-seq]\n                               (loop [l l-seq r r-seq acc '()]\n                                 (if (or (empty? l) (empty? r))\n                                   (reverse acc)\n                                   (recur (rest l) (rest r) (conj (conj acc (first l)) (first r))))))","user":"5f86a98be4b0649ffcda4caa"},{"code":"(fn [col1 col2]\n  (apply concat (map vector col1 col2)))","problem":39,"user":"4ef4acf8535dced4c769f23c"},{"problem":39,"code":"(fn my-interleave\n    [c1 c2]\n  (apply concat\n    (map vector\n         c1\n         c2)))","user":"60c90322e4b0e0fa5f1b4302"},{"code":"#(loop [c1 %1 c2 %2 r []] (if (or (empty? c1) (empty? c2)) r (recur (next c1) (next c2) (conj (conj r (first c1)) (first c2)))))","problem":39,"user":"50d179c7e4b05a71a896ef56"},{"code":"(fn cc [x y]\n  (let [x1 (seq x) y1 (seq y)]\n    (when (and x1 y1)\n      (cons (first x1) (cons (first y1) (cc (rest x1) (rest y1)))))))\n\n;mapcat list\n\n;(fn [& xs] (apply concat (apply map list xs)))","problem":39,"user":"5353726be4b084c2834f4b00"},{"problem":39,"code":"(fn inter [[x & xs] [y & ys]]\n  (if (or (empty? xs) (empty? ys))\n    (list x y)\n    (concat (list x y) (inter xs ys))))","user":"54d2892fe4b0e8a36923e5f7"},{"code":";; (fn [coll1 coll2] (let [l (apply min (map count [coll1 coll2]))] (mapcat (fn [i] [(get coll1 i) (get coll2 i)]) (range l))))\n#(mapcat list %1 %2)","problem":39,"user":"511f88eee4b085952a83535f"},{"code":"(fn f [la lb]\n    (when-let [a (first la)]\n      (when-let [b (first lb)]\n        (cons a (cons b (f (rest la) (rest lb))))\n      )\n    )\n)","problem":39,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":39,"code":"(fn [coll-1 coll-2] (apply concat (map #(list %1 %2) coll-1 coll-2)))","user":"604a30c6e4b02d28681c77f0"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x s1\n         y s2 \n         acc '()]\n   (if (or (empty? x) (empty? y)) \n     (reverse acc)\n     (recur (rest x) (rest y) (cons (first y) (cons (first x) acc))))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"problem":39,"code":"(fn [xss yss]\n  (loop [xs xss\n         ys yss\n         acc []]\n    (if (or (empty? xs)\n            (empty? ys))\n      acc\n      (recur (rest xs)\n             (rest ys)\n             (conj acc (first xs) (first ys))))))","user":"50478418e4b0371827a27bc3"},{"code":"(fn leave [xs ys] (flatten (map vector xs ys)))","problem":39,"user":"4ff2430ae4b0678c553fc336"},{"code":"(fn [x y] (flatten (map (fn [x y] (list x y)) x y)))","problem":39,"user":"537a620be4b06839e8705e5f"},{"problem":39,"code":"#(loop [result []\n        a %1\n        b %2]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur\n        (conj result (first a) (first b))\n        (rest a)\n        (rest b))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(comp\n  (partial reduce (partial apply conj))\n  (partial map vec)\n  (partial map list))","problem":39,"user":"5379ed48e4b06839e8705e5a"},{"code":"(fn [x,y] (mapcat #(list (nth x %) (nth y %)) (range (min (count x) (count y)))))","problem":39,"user":"504e1abee4b0f6ff3350c45d"},{"problem":39,"code":"(fn [cone ctwo]\n   (loop [rcoll [] lone cone ltwo ctwo]\n     (if (or (empty? lone) (empty? ltwo)) rcoll \n                                                    (recur\n                                                     (conj rcoll (first lone) (first ltwo))\n                                                     (rest lone)\n                                                     (rest ltwo)))))","user":"5d363543e4b01671435dbd20"},{"problem":39,"code":"(fn [coll-1 coll-2]\n  (let [size (min (count coll-1) (count coll-2))]\n    (->> (range 0 size) (map #(vec [(get coll-1 %) (get coll-2 %)])) (flatten))\n    ))","user":"54856d54e4b0e286459a11aa"},{"problem":39,"code":"(fn [one two] (flatten (map #(vector %1 %2) one two)))","user":"54b5ce67e4b05787c3b163ac"},{"problem":39,"code":"(fn [a b]\n   (mapcat list a b))","user":"59385840e4b02506e01a29c9"},{"problem":39,"code":"#(loop [coll1 %1, coll2 %2, result []]\n   (if (or (empty? coll1) (empty? coll2)) \n     result \n     (recur (rest coll1) (rest coll2) (conj result (first coll1) (first coll2)))))","user":"56e6ef89e4b02e7e935eb6d0"},{"problem":39,"code":"(fn\n   foo\n   [xs ys]\n   (if (or (empty? xs) (empty? ys))\n       []\n       (cons (first xs) (cons (first ys) (foo (rest xs) (rest ys))))))","user":"5a8b6d42e4b05369db4d24e6"},{"problem":39,"code":"(fn \n  [seq1 seq2]\n  (reduce (fn [cum el]\n            (concat cum el))\n          (map (fn [v1 v2] [v1 v2]) seq1 seq2)))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn ! [xs ys]\n       (let [l1 (count xs)\n       l2 (count ys)]\n\t (if (and (< 0 l1)\n\t\t  (< 0 l2))\n\t   (conj (! (rest xs)\n\t\t    (rest ys))\n\t\t (first ys)\n\t\t (first xs))\n\t   ())))","problem":39,"user":"4ec6157b535d6d7199dd36c2"},{"problem":39,"code":"(fn my-interleave [s t]\n  (if (or (empty? s) (empty? t))\n    '()\n    (conj (my-interleave (rest s) (rest t)) (first t) (first s))\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"problem":39,"code":"(fn f [s1 s2]\n  (if (or (= (count s1) 1) (= (count s2) 1))\n    (list (first s1) (first s2))\n    (cons (first s1) (cons (first s2) (f (rest s1) (rest s2))))))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn [lsA lsB] (loop [lsAA lsA lsBB lsB ret '()] (if (or (empty? lsAA) (empty? lsBB)) ret\n                 (recur (rest lsAA) \n                        (rest lsBB) \n                        (flatten (cons ret (list (first lsAA) (first lsBB))))))))","problem":39,"user":"5301157ae4b0d8b024fd3717"},{"problem":39,"code":"(fn spotinter [s1 s2]\n  (if (or (= (count s1) 0) (= (count s2) 0))\n    []\n    (concat (take 1 s1) (take 1 s2) (spotinter (rest s1) (rest s2)))))","user":"60882700e4b0ae75613dcedf"},{"problem":39,"code":"(fn f [a b] (if\n             (or (empty? a) (empty? b)) nil \n             (into [(first a) (first b)] (f (rest a) (rest b)))))","user":"54924f64e4b0b312c081ff42"},{"code":"(fn [& cs] ((fn il [cs] (if (not-any? empty? cs) (concat (map first cs) (il (map next cs))) ())) cs))","problem":39,"user":"5125834ae4b05d10e3e395fa"},{"code":"(fn conl\n  ([lst1 lst2] (conl [] lst1 lst2))\n  ([l lst1 lst2] (if (or (empty? lst1) (empty? lst2)) l\n                   (conl (conj l (first lst1) (first lst2)) (next lst1) (next lst2))))\n  )","problem":39,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn foo [s1 s2] (cond (or (not (seq s1)) (not (seq s2))) []\n                       :else             (into [(first s1) (first s2)] (foo (rest s1) (rest s2)))))","problem":39,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":39,"code":"(fn [ic1 ic2]\n    (loop [c1  ic1\n           c2  ic2\n           res []]\n      (if (or (empty? c1) (empty? c2))\n        res\n        (recur (rest c1) (rest c2) (conj res (first c1) (first c2))))))","user":"57aa290de4b0b8559636fc65"},{"problem":39,"code":"(fn [a b]\n   (flatten (map #(seq [%1 %2]) a b)))","user":"5d9e8e40e4b000c986472bc2"},{"code":"#(loop [s1 %1 s2 %2 acc []]\n  (if (or (empty? s1) (empty? s2))\n    acc\n    (recur (rest s1)\n           (rest s2)\n           (conj acc (first s1) (first s2)))))","problem":39,"user":"4ed7e37a535d10e5ff6f52f4"},{"problem":39,"code":"(fn [l1 l2]\n  (flatten (map #(list (nth l1 %) (nth l2 %)) (range (min (count l1) (count l2))))))","user":"4fe868d1e4b07c9f6fd12c3f"},{"problem":39,"code":"(fn [a b] \n  (first\n   (reduce \n    (fn [[acc bs] x] (if (empty? bs) [acc bs] [(conj (conj acc x) (first bs)) (rest bs)]))\n    [[] b]\n    a)))","user":"5e18bd30e4b0dc95940084fa"},{"code":"(fn [xs ys]\n  (apply concat \n   (map (fn [x y] [x y]) xs ys)))","problem":39,"user":"5089ebfee4b03217b26a539f"},{"problem":39,"code":"(fn il [xs ys]\n  (if (or (= 0 (count xs)) (= 0 (count ys)))\n    '()\n    (let [x (first xs)\n          y (first ys)]\n          (conj (conj (il (rest xs) (rest ys)) y) x))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":39,"code":"(fn interleave-me [coll1 coll2]\n  (flatten (map #(vector %1 %2) coll1 coll2)))","user":"59e0f38ae4b08badc2a0c500"},{"problem":39,"code":"(fn [in1 in2] \n    (mapcat (fn [a b] (list a b)) \n    in1 in2\n    )\n  )","user":"5c94cbb1e4b048ec896c5a3d"},{"problem":39,"code":"(fn nex [a b]\n  (if (or (= 0 (count a)) (= 0 (count b))) ()\n    (conj (nex (rest a) (rest b))\n     (first b) (first a))))","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":39,"code":"(fn my-interleave [x y] (mapcat vector x y))","user":"5d45bd1de4b07c84aa5ae6a4"},{"code":"(fn zip-seqs [x y]\n  (mapcat vector x y))","problem":39,"user":"517a025ce4b01aacecbecbe6"},{"code":"(fn [s0 s1]\n  (flatten\n    (map #(list %1 %2)\n         s0\n         s1)))","problem":39,"user":"50978ca4e4b00ad8bab4e966"},{"problem":39,"code":"(fn my-interleave [seq1 seq2]\n  (loop [a seq1 b seq2 c '() ]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (cons (first b) (cons (first a) c)))\n    (reverse c))))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [a b]\n  (loop [res '() c a d b]\n    (if (or (empty? c) (empty? d))\n      (reverse res)\n      (recur (conj res (first c) (first d)) (rest c) (rest d)))))","problem":39,"user":"4e773be8535d324fb2983d6e"},{"problem":39,"code":"(fn intr [coll1 coll2]\n  (let [s1 (seq coll1)\n        s2 (seq coll2)]\n    (when (and s1 s2)\n      (cons (first s1) \n            (cons (first s2) \n                  (intr (rest s1) \n                        (rest s2)))))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":39,"code":"(fn [x y]\n    (->> (map list x y)\n        (apply concat)))","user":"577829f9e4b0979f8965165a"},{"code":"(fn il [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    '()\n    (cons (first s1) (cons (first s2) (il (rest s1) (rest s2))))))","problem":39,"user":"52090654e4b0e152394d76ee"},{"code":"(fn [& x] (flatten (apply map list x)))","problem":39,"user":"50a2e3fbe4b029e8bace3629"},{"problem":39,"code":"(fn interleave-seqs\n  [coll1 coll2]\n  (->> (map #(do [%1 %2]) coll1 coll2)\n       (filter #(not-any? nil? %))\n       (apply concat '())))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":39,"code":"(fn interlev\n  [colla collb]\n  (if (or (= 1 (count colla)) (= 1 (count collb))) \n    [(first colla) (first collb)]\n    (concat [(first colla)] [(first collb)] (interlev (rest colla) (rest collb)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":39,"code":"(fn inter [c1 c2] (let [a (seq c1) b (seq c2)]  (when (and a b) (cons (first a) (cons (first b) (inter (rest a) (rest b)))))))","user":"556282d0e4b0c656e3ff17da"},{"code":"(fn il [c1 c2]\r\n     (lazy-seq\r\n      (let [s1 (seq c1) s2 (seq c2)]\r\n        (when (and s1 s2)\r\n          (cons (first s1) (cons (first s2) \r\n                                 (il (rest s1) (rest s2))))))))","problem":39,"user":"4e8aef69535d65386fec2114"},{"code":"(fn my-interleave [c1 c2]\r\n  (mapcat list c1 c2))","problem":39,"user":"4e7e4a1f535db169f9c7970c"},{"problem":39,"code":"(fn [& cols]\n  (loop [il (apply conj [] (map first cols))\n         rt (map next cols)]\n    (if (some #(= nil %) rt)\n      il\n      (recur (apply conj il (map first rt))\n             (map next rt)))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":39,"code":"(fn\n  [first-set second-set]\n\t(loop [curr-left first-set curr-right second-set accum '()]\n    \t(if (or \n             (empty? curr-left)\n             (empty? curr-right)\n            )\n          (reverse accum)\n          \t(recur (rest curr-left) (rest curr-right) (cons (first curr-right) (cons (first curr-left) accum)))\n        )\n    )\n)","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":39,"code":"mapcat #(map identity %&)","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":39,"code":"(fn myZip [x y]\n  (   if (or (empty? x) (empty? y)) \n      '()\n       (conj (conj (myZip (rest x) (rest y)) (first y)) (first x))))","user":"5aa5951ae4b0d174b936c899"},{"code":"(fn [a b] (reduce #(concat %2 %1) (zipmap a b)))","problem":39,"user":"500ebe23e4b00fff93030f9c"},{"problem":39,"code":"mapcat list\n; is there an implementation using transducer on multiple collections?","user":"5e13a6b7e4b099d064963001"},{"problem":39,"code":"(fn [x y]\n  (loop [x x\n         y y\n         z []]\n    (if (or (empty? x) (empty? y))\n      z\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))","user":"565654dae4b0f9d632dd849f"},{"problem":39,"code":"#(reduce into (map (fn [x y] [x y]) %1 %2))","user":"5d63f1c2e4b0c9e5857d502b"},{"problem":39,"code":"(fn interloave\n  [s1 s2]\n  (flatten\n   (map\n    #(identity [%1 %2])\n    s1\n    s2)))","user":"51b01309e4b0c53cf2e68a57"},{"problem":39,"code":"#(apply concat \n         \n  (for     \n    [i (range (min (count %1) (count %2)))]\n        \n    [(nth %1 i) (nth %2 i)]\n  )\n)","user":"5b3189e5e4b025bcb146f308"},{"problem":39,"code":"#(loop [c1 %1\n        c2 %2\n        result '[]]\n   (if (cond\n        (next c1)\n        (next c2))\n     (recur (next c1) (next c2) (conj result (first c1) (first c2)))\n     (apply list (conj result (first c1) (first c2)))))","user":"4ec549e1535d6d7199dd3691"},{"problem":39,"code":"(fn [& lsts]\n  (apply mapcat list lsts))","user":"5895477fe4b00487982d527c"},{"problem":39,"code":"(fn interleave-two\n  [xs ys]\n  (flatten\n    (loop [xs xs\n           ys ys\n           acc []]\n      (if (and xs ys)\n        (recur (next xs)\n               (next ys)\n               (conj acc [(first xs) (first ys)]))\n        (concat acc)))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":39,"code":"(fn thirty-nine\n     [x y] (let [a (seq x) b (seq y)]\n             (if-not (or (empty? a) (empty? b))\n               (conj (conj (lazy-seq (thirty-nine (rest a) (rest b))) (first b) ) (first a))\n               '())))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":39,"code":"(fn zip [xs ys]\n  (if (and (not (nil? (first xs)))\n           (not (nil? (first ys))))\n      (concat [(first xs) (first ys)] (zip (rest xs) (rest ys)))))","user":"4e41a04e535dc968683fc49e"},{"code":"(fn [a b] \n  ((fn [currenta currentb accumulator]\n    (if (or (empty? currenta) (empty? currentb))\n      accumulator\n      (recur (rest currenta) (rest currentb) (conj accumulator (first currenta) (first currentb))))) a b []))","problem":39,"user":"520f46f9e4b0101e4be6fcee"},{"problem":39,"code":"(fn [s1 s2]\n         (reduce (fn [acc [e1 e2]] (conj acc e1 e2))\n                 (map vector s1 s2)))","user":"53dad484e4b0e771c30254ac"},{"code":"(fn myi\n  ([s1 s2] (seq (myi s1 s2 [])))\n  ([s1 s2 t]\n    (if (or (empty? s1) (empty? s2))\n      t\n      (let [r1 (rest s1) r2 (rest s2) f1 (first s1) f2 (first s2) t2 (conj (conj t f1) f2)]\n        (recur r1 r2 t2)))))","problem":39,"user":"4e7ada51535db169f9c796ae"},{"problem":39,"code":"(fn itl [a b]\n  (flatten (map vector a b)))","user":"543b12cce4b032a45b86932a"},{"code":"(fn c\r\n    [xs ys]\r\n    (if (or (= `() xs) (= `() ys))\r\n        `()\r\n        (concat [(first xs) (first ys)] (c (rest xs) (rest ys)))))","problem":39,"user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn [seq1 seq2]\n  (let [intrlv (fn [so-far sq1 sq2]\n                (if (or (empty? sq1) (empty? sq2))\n                  so-far\n                  (recur (conj so-far (first sq1) (first sq2))\n                         (rest sq1)\n                         (rest sq2))))]\n  (intrlv [] seq1 seq2)))","problem":39,"user":"4e42f930535dc968683fc49f"},{"problem":39,"code":"(fn myZip [& sequ]\n    (println sequ)\n    (if \n        (<= (apply min (map count sequ)) 1)\n        (map first sequ)\n        (concat (map first sequ) (apply myZip (map  rest sequ)) )\n    )\n)","user":"5e23ca7fe4b05b4b01516144"},{"code":"(fn [x y] (mapcat vector x y))","problem":39,"user":"4f2fa32ce4b0d6649770a070"},{"problem":39,"code":"(fn alt-zip [seqa seqb]\n  (flatten (map vector seqa seqb)))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [coll1 coll2] (loop [c1 coll1 c2 coll2 R []] (let [x1 (first c1) x2 (first c2)] (if (and x1 x2) (recur (rest c1) (rest c2) (conj R x1 x2)) R))))","problem":39,"user":"4fc52d79e4b081705acca386"},{"problem":39,"code":"(fn [x y]\n    (reduce concat\n     (map\n      (fn [a b]\n        (list a b))\n      x\n      y))\n\n    \n    \n)","user":"5fa6db67e4b0fa27300f3dd2"},{"code":"(fn [s1 s2]\n(mapcat #(conj [] %1 %2) s1 s2))","problem":39,"user":"5202cfe7e4b030ee0c5b2702"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s [] a s1 b s2]\n    (if (or (empty? a) (empty? b))\n      s\n      (recur (conj s (first a) (first b)) (rest a) (rest b)))))","user":"6023a3abe4b0d5df2af22212"},{"code":"#(loop [a1 %1 a2 %2 dst []]\n   (if (or (empty? a1) (empty? a2)) dst\n     (recur (rest a1) (rest a2) (conj dst (first a1) (first a2)))))","problem":39,"user":"539755d9e4b0b51d73faaee8"},{"code":"#(reduce (partial apply conj) \n  (map vector %1 %2))","problem":39,"user":"4e25176e535d04ed9115e829"},{"problem":39,"code":"(fn [& args] (apply mapcat list args))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn [x y]\n  (flatten (map #(list %1 %2) x y)))","problem":39,"user":"4ee259a1535d10e5ff6f5366"},{"code":"#(loop [a % b %2 acc []] (if (or (empty? a) (empty? b)) acc (recur (rest a) (rest b) (conj (conj acc (first a)) (first b)) ) ) )","problem":39,"user":"4e6f8431535d5021c1a8961e"},{"problem":39,"code":"(fn magic [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a)] [(first b)] (magic (rest a) (rest b)) )\n  )\n)","user":"5a214798e4b0ff51aa4b32aa"},{"code":"(fn [a b]\n  (reverse (loop [as (seq a)\n        bs (seq b)\n        result '()]\n   (if (or (empty? as) (empty? bs))\n     result\n     (recur (rest as) (rest bs) (conj result (first as) (first bs)))))))","problem":39,"user":"5099a280e4b0cae2931060bb"},{"code":"(fn ileave [x y]\n  (let [s1 (seq x) s2 (seq y)]\n    (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                          (ileave (rest s1) (rest s2)))))))","problem":39,"user":"4e6a4950535d8ccf87e9febf"},{"problem":39,"code":"(fn il\n  ([s1 s2] (il s1 s2 []))\n  ([s1 s2 i]\n   (if (or (empty? s1) (empty? s2))\n     i\n     (il (rest s1) (rest s2) (conj i (first s1) (first s2))))))","user":"544e6b7fe4b0e39780006986"},{"problem":39,"code":"(fn my-inter [coll1 coll2] \n\t(cond (empty? coll1) coll1\n           (empty? coll2) coll2\n           :else (concat [(first coll1) (first coll2)] (my-inter (rest coll1) (rest coll2)))))","user":"56e53d2fe4b02e7e935eb6bc"},{"code":"(fn [a b](mapcat list a b))","problem":39,"user":"4f0446f9535dcb61093f6bb8"},{"problem":39,"code":"(fn inter [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    []\n    (concat [(first xs) (first ys)] (inter (rest xs) (rest ys)))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"(fn [mary-kate ashley] \n   (mapcat #(list %1 %2) mary-kate ashley))","problem":39,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":39,"code":"(fn [s1 s2]\n   (loop [result '()\n          r1 s1\n          r2 s2]\n     (if (or (empty? r1) (empty? r2))\n       result\n       (recur (concat result (list (first r1) (first r2))) (rest r1) (rest r2)))))","user":"57958dace4b0e215f87e8484"},{"code":"#(flatten (map (fn([x, y] [x, y])) %1 %2))","problem":39,"user":"536829c8e4b0243289761e8b"},{"problem":39,"code":"(fn [lst-a lst-b]\n  (loop [res '()\n           a lst-a\n           b lst-b]\n        (if (or (empty? a) (empty? b))\n            (reverse res)\n            (recur (cons (first b) (cons (first a) res)) (rest a) (rest b)))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":39,"code":"(fn [xs ys]\n                 (loop [xs xs, ys ys, acc []]\n                   (if (or (empty? xs) (empty? ys))\n                     acc\n                     (recur (rest xs) (rest ys) (conj acc (first xs) (first ys))))))","user":"5eccbce6e4b016b56eae058e"},{"code":"(fn inter [l1 l2]\n  (when (and (> (count l1) 0) (> (count l2) 0))\n    (conj (inter (rest l1) (rest l2)) (first l2) (first l1))\n    )\n  )","problem":39,"user":"52d92f13e4b09f7907dd13a2"},{"problem":39,"code":"(fn [a b] (apply concat (map (fn [x y] (list x y)) a b)))","user":"57f7c74ee4b0d3187e900902"},{"problem":39,"code":"(fn [x y]\n  (loop [a x\n         b y\n         ret []]\n    (let [i (first a)\n          j (first b)]\n      (if (or (nil? i) (nil? j))\n        ret\n        (recur (rest a)\n               (rest b)\n               (conj ret i j))))))","user":"5ba15075e4b0a20761a2339e"},{"problem":39,"code":"(letfn [(f [acc xs ys]\n           (if (or (empty? xs) (empty? ys)) acc\n             (recur (conj acc (first xs) (first ys)) (rest xs) (rest ys))))]\n  (partial f []))","user":"554b9c3ee4b0a04f79299594"},{"code":"(fn interleavez[l ll]\n  (if (or (empty? l)\n          (empty? ll)) []\n    (concat [(first l) (first ll)] \n       (interleavez (rest l) (rest ll)))))","problem":39,"user":"4eca7a87535d6d7199dd3705"},{"code":"#(loop [x %1 y %2 z []]\n        (if (empty? x) z\n            (if (empty? y) z\n                (recur (rest x) (rest y) (conj (conj z (first x)) (first y))))))","problem":39,"user":"4e028764535d04ed9115e790"},{"code":"(fn[x y](flatten (map list x y)))","problem":39,"user":"5302d79ce4b0d8b024fd3736"},{"problem":39,"code":"(fn [seq1 seq2 ] (#(flatten (map list seq1 seq2)) ))","user":"5cf53196e4b087f62be35a94"},{"code":"(fn [list1 list2]\n  (loop [l1 list1 l2 list2 acc []]\n    (if (or (nil? (seq l1)) (nil? (seq l2)))\n      acc\n      (recur (rest l1) (rest l2) (conj acc (first l1) (first l2))))))","problem":39,"user":"527a5b84e4b03e8d9a4a7558"},{"code":"#(loop [n1 %1 n2 %2 i[]]\n        (if (or (nil? (first n1)) (nil? (first n2)))\n          i\n         (recur (rest n1) (rest n2)\n                   (let  [a (first n1) b (first n2)]\n                   (conj i a b)))))","problem":39,"user":"52cdec6ce4b07d0d72b27383"},{"problem":39,"code":"#(loop [x %1 y %2 r[]]\n   (let [fx (first x) fy (first y)]\n     (if (or (nil? fx) (nil? fy))\n       r\n       (recur (rest x) (rest y) (conj r fx fy)))))","user":"56815e2fe4b0945ebc182a84"},{"code":"(fn [s1 s2]\n  (loop [s1 s1 \n         s2 s2\n         v []]\n    (if (or (empty? s1) (empty? s2)) v\n      (recur (rest s1) (rest s2) (conj v (first s1) (first s2))))))","problem":39,"user":"5081566ce4b0946d0443855b"},{"problem":39,"code":"(fn [xs ys]\n   (let [min-count (if (<= (count xs) (count ys)) (count xs) (count ys)) ]\n     (apply concat (for [xi (range min-count)]\n                     [(get xs xi) (get ys xi)]\n                     ))))","user":"5f74770fe4b02876ed9fd09f"},{"problem":39,"code":"(fn f39 [col1 col2]\n   (loop [x 0\n               result []]\n          (if (< x (min (count col1) (count col2)))\n            (recur (inc x) (conj result (nth col1 x) (nth col2 x)))\n            result)\n          )\n  )","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"(fn ileave [x y] \n\t(if (or (empty? x) (empty? y)) nil\n\t\t(mapcat #(conj '() %2 %1) x y)\n\t)\n)","problem":39,"user":"5113e492e4b0029845b11c58"},{"problem":39,"code":"(fn my-interleave\n  ([s1 s2] (my-interleave s1 s2 '()))\n  ([s1 s2 s3] \n    (if (or (empty? s1) (empty? s2))\n      (reverse s3)\n      (recur (rest s1) (rest s2) (cons (first s2) (cons (first s1) s3)))     \n    )))","user":"53b85932e4b047364c0444db"},{"problem":39,"code":"(fn [arr1 arr2]\n  (loop [round 0\n         firstArr arr1\n         secondArr arr2\n         acc []]\n    (if (or (= round (count arr1)) (= round (count arr2)) )\n      acc\n      (recur (inc round) (rest firstArr) (rest secondArr) (concat acc [(first firstArr) (first secondArr)])))))","user":"58b54852e4b0ebc645576d52"},{"problem":39,"code":"#(let [x (vec %1) y (vec %2) c (min (count x) (count y))] (mapcat identity (for [r (range c)] (conj [(get x r)] (get y r)))))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":39,"code":"(fn my-interleave [x1 x2]\n  (lazy-seq\n   (when-not (or (empty? x1) (empty? x2))\n     (cons (first x1) (cons (first x2)(my-interleave (rest x1) (rest x2)))))))","user":"5bedddeee4b0a6d31fed2128"},{"problem":39,"code":"(fn [s1 s2] (flatten (mapv vector s1 s2)))","user":"55ff2f89e4b00f4cabc5765e"},{"problem":39,"code":"(fn [list1 list2]\n  (loop [rval [], list1 list1, list2 list2]\n    (if (or (= list1 []) (= list2 []))\n      rval\n      (recur (conj (conj rval (first list1)) (first list2)) (rest list1) (rest list2)))))","user":"54a1d047e4b09f271ff37c4f"},{"problem":39,"code":"(fn [s t] (flatten (map #(vector %1 %2) s t)))","user":"5aeec90fe4b0cc2b61a3bc31"},{"problem":39,"code":"(fn zip [a b]\n\t\t(cond\n\t\t\t(nil? (first a)) nil\n\t\t\t(nil? (first b)) nil\n\t\t\t:else\n\t\t\t (concat\n\t\t\t \t(list \n\t\t\t \t\t(first a)\n\t\t\t \t\t(first b))\n\t\t\t \t(zip (rest a) (rest b))\n\t\t\t )\n\t\t)\n\t)","user":"5e1d01b5e4b0dc9594008542"},{"problem":39,"code":"(fn [list1 list2]\n  (reverse (loop [l1 list1 l2 list2 result '()]\n    (if (or (empty? l1) (empty? l2))\n      result\n      (recur (rest l1) (rest l2) (conj (conj result (first l1)) (first l2)))\n      )\n    )\n           )\n  )","user":"55ce2b6de4b0e31453f64a26"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [x1 s1 x2 s2 m '()]\n    (if (or (nil? x1) (nil? x2))\n      m\n      (let [new-m (concat m (if (empty? x1) nil [(first x1)]) (if (empty? x2) nil [(first x2)]))]\n        (recur (if (empty? x1) x1 (next x1)) (if (empty? x2) x2 (next x2)) new-m)))))","user":"576844cde4b0a07e8fc180ce"},{"code":"(fn my-interleave [coll1 coll2]\n  (if (and (not (empty? coll1)) (not (empty? coll2)))\n    (conj (my-interleave (rest coll1) (rest coll2)) (first coll2) (first coll1))\n    '()))","problem":39,"user":"5356e04fe4b04ce2eb3ed271"},{"code":"(fn [one two] (flatten (for [i (range (min (count one) (count two)))] [(one i) (two i)])))","problem":39,"user":"4f689a17e4b07046d9f4ef77"},{"code":"(fn [c1 c2]\r\n  (mapcat (fn [x y] [x y]) c1 c2))","problem":39,"user":"4dd4f0a8535dae65d5c462e4"},{"code":"(fn leaves ([seq1 seq2] (leaves [(first seq1) (first seq2)] (next seq1) (next seq2))) ([acc seq1 seq2] (if (or (empty? seq1) (empty? seq2)) acc (leaves (conj acc (first seq1) (first seq2)) (next seq1) (next seq2)))))","problem":39,"user":"52319066e4b0e2e8de81d1e9"},{"problem":39,"code":"#(loop [a %1 b %2 c []]\n  (if (or (empty? a) (empty? b))\n    c\n    (recur (rest a) (rest b) (concat c [(first a) (first b)]))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":39,"code":"#(flatten (seq (map vector %1 %2)))","user":"51671557e4b013fc800656c4"},{"problem":39,"code":"(fn [c1 c2]\n  (reduce (fn [acc e]\n            (into acc e))\n          []\n          (map vector c1 c2)))","user":"52d38c51e4b099d49816f0c5"},{"problem":39,"code":"(fn [a b]\n  (loop [left a\n         right b\n         result []]\n    (if (or (empty? left) (empty? right))\n      result\n      (let [[top-left & rest-left] left\n            [top-right & rest-right] right\n            result (conj result top-left top-right)]\n        (recur rest-left rest-right result)))))","user":"5189bf9ee4b0288ada3dbdaf"},{"problem":39,"code":";;#(mapcat vector %1 %2)\nmapcat vector","user":"5edb07dde4b0c7845d86b0ed"},{"code":"(fn zip* [l1 l2]\n (apply concat (map list l1 l2)))","problem":39,"user":"4f04a06d535dcb61093f6bd9"},{"problem":39,"code":"#(-> (apply map vector %&) flatten)","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":39,"code":"(fn r [x y]\n         (if (or (empty? x)\n                 (empty? y))\n           (empty x)\n           (cons (first x) (cons (first y) (r (next x) (next y))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [initial-a initial-b]\n  (loop [a initial-a, b initial-b, result []]\n    (cond\n      (not (seq a)) result\n      (not (seq b)) result\n      :else (recur (next a) (next b) (conj result (first a) (first b))))))","problem":39,"user":"4fa820fde4b081705acca1ce"},{"problem":39,"code":"(fn my-interleave [s1 s2]\n  (when (and (seq s1) (seq s2))\n    (cons \n     (first s1) \n     (cons \n      (first s2) \n      (my-interleave (rest s1) (rest s2))))))","user":"5ec0de29e4b00a66d4a9528e"},{"code":"(fn [sq1 sq2]\n  (apply concat (for [i (range (min (count sq1)(count sq2)))]\n    [(nth sq1 i)\n    (nth sq2 i)]\n  ))\n)","problem":39,"user":"4ea57300535d7eef308072d5"},{"problem":39,"code":"#(flatten (map (fn [x y] (list [x y])) %1 %2))","user":"5f275800e4b0857314092c93"},{"code":"(fn intr [x y]\n  (if (or (empty? x) (empty? y))\n    '()\n    (cons (first x) (cons (first y) (intr (rest x) (rest y))))))","problem":39,"user":"531bad96e4b08068f379ed93"},{"code":"#(flatten (let [rt '()]\n            (map (fn [one two]\n                   do (conj rt [one two])) %1 %2)))","problem":39,"user":"52e161e8e4b09f7907dd1420"},{"problem":39,"code":"(fn [c1 c2]\n(apply concat (map #(list %1 %2) c1 c2)))","user":"5493ccbbe4b0b312c081ff50"},{"code":"(fn my-interleave [x-seq, y-seq]\n    (flatten (if (>= (count x-seq) (count y-seq))\n      (map-indexed (fn [idx itm] [(nth x-seq idx) itm]) y-seq)\n      (map-indexed (fn [idx itm] [itm (nth y-seq idx)]) x-seq)\n    )))","problem":39,"user":"4f21838fe4b0d66497709fd2"},{"problem":39,"code":"(fn myres[xs ys]\n  (if (or (empty? xs) (empty? ys))\n    nil\n    (conj (myres (rest xs) (rest ys)) (first ys) (first xs))))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn [a b] (mapcat (fn [c d] [c d]) a b))","problem":39,"user":"52b452a5e4b0c58976d9ad20"},{"problem":39,"code":"#(flatten (into '() (zipmap %1 %2)))\n;最初用[]不行。 #(flatten (into [] (zipmap %1 %2))),","user":"5822e082e4b04b46fc4b0fa9"},{"problem":39,"code":"(fn interleave_\n  ([a b]\n   (interleave_ (rest a) (rest b) [(first a) (first b)]))\n  ([a b c]\n   (if\n     (or (empty? a) (empty? b))\n     c\n     (interleave_\n      (rest a)\n      (rest b)\n      (conj c (first a) (first b))))))","user":"58821372e4b0f1effa3b764d"},{"code":"(fn[colla collb]\n  (loop [res () ca colla cb collb]\n    (let [a (first ca) b (first cb)]\n      (if (some nil? [a b])\n        (reverse res)\n        (recur (conj res a b) (rest ca) (rest cb))))))","problem":39,"user":"4e7bc07c535db169f9c796b9"},{"problem":39,"code":"(fn [xs ys]\n  (loop [acc []\n         [xh & xt :as xrem] xs\n         [yh & yt :as yrem] ys]\n    (if (or (empty? xrem) (empty? yrem))\n      acc\n\t  (recur (into acc [xh yh]) xt yt))))","user":"5cc75ffce4b0ccb061962836"},{"code":"(fn zip [a b]\n  (if (every? not-empty [a b])\n    (concat (list (first a) (first b))\n            (zip (rest a) (rest b)))\n    nil))","problem":39,"user":"4ec5d40d535d6d7199dd36b9"},{"code":"(fn inter\n  [xs ys]\n    (if (and (not-empty xs) (not-empty ys))\n      (cons (first xs)\n        (cons (first ys)\n          (inter (rest xs) (rest ys))))))","problem":39,"user":"4fab1ea1e4b081705acca210"},{"code":"(fn il [c1 c2] (let [s1 (seq c1) s2 (seq c2) ] (when (and s1 s2) (cons (first s1) (cons (first s2) (il (rest s1) (rest s2)))))))","problem":39,"user":"4e72dd5d535d5021c1a89667"},{"code":"(fn i [x y]\n  (let [s (seq x) t (seq y)]\n    (when \n      (and s t) \n      (cons (first s) (cons (first t) (i (rest s) (rest t))))\n    )\n  )\n)","problem":39,"user":"5098bcfee4b0cae2931060a1"},{"problem":39,"code":"(fn myInterleave\n  [& lsts]\n  (if (not-any? empty? lsts) \n    (let [fsts (map first lsts)\n          rsts (map rest lsts)]\n      (concat fsts (apply myInterleave rsts)))\n    []))","user":"5a798ac5e4b03baeef9276c0"},{"code":"(fn [s1 s2] \n  (flatten (map #(sequence [%1 %2]) s1 s2)))","problem":39,"user":"4f282da7e4b0d6649770a013"},{"problem":39,"code":"(comp\n (partial reduce (fn [a [x y]] (conj a x y)) [])\n (partial map (fn [a b] [a b])))","user":"56967bc0e4b0dcc4269f4131"},{"code":"(fn [one, two]\n  (loop [total []\n         one   one\n         two   two]\n    (if (or (empty? one) (empty? two))\n      (seq total)\n      (recur (conj total (first one) (first two))\n             (rest one)\n             (rest two)))))","problem":39,"user":"5051e2abe4b0a561d07d8f0a"},{"code":"(fn [x, y]\n    (loop [seq1 x seq2 y acc []]\n       (if (or (empty? seq1) (empty? seq2))  acc\n          (recur (rest seq1) (rest seq2) (conj acc (first seq1) (first seq2))\n))))","problem":39,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn func[s1 s2]\r\n  (when (and s1 s2)\r\n  (cons (first s1) (cons (first s2) (func (next s1) (next s2))))))","problem":39,"user":"4e50c894535dc968683fc4ee"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [[x & xs] seq1\n         [y & ys] seq2\n         result []]\n    (if (or (nil? x) (nil? y))\n      result\n      (recur xs ys (conj (conj result x) y)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":39,"code":"#(->>\n    (for [i (range (min (count %1) (count %2)))] [(nth %1 i) (nth %2 i)])\n    (apply concat))","user":"5e0d948fe4b099d064962f98"},{"code":"mapcat #(vec [%1 %2])","problem":39,"user":"4eb97234535dfed6da9c6d53"},{"code":"#(flatten (reverse (seq (zipmap  %1 %2))))","problem":39,"user":"4f03f197535dcb61093f6b84"},{"problem":39,"code":"#(loop\n   [a %1 b %2 res '()]\n   (if (or (empty? a) (empty? b))\n     res\n     (recur (rest a)\n            (rest b)\n            (concat res (list (first a) (first b))))) )","user":"52a90056e4b0c58976d9ac39"},{"problem":39,"code":"(fn zip' [a b] (if (and (seq a) (seq b)) (conj (zip' (rest a) (rest b)) (first b) (first a)) '()))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [a b]\r\n  (reverse (loop [[a1 & ar :as al] a [b1 & br :as bl] b c '()]\r\n    (if (or (empty? al) (empty? bl)) c\r\n      (recur ar br\r\n        (cons b1 (cons a1 c)))))))","problem":39,"user":"4e02bee8535d04ed9115e791"},{"code":"(partial mapcat #(cons %1 [%2]))","problem":39,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn my_interleave [c1 c2]\n     (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n          (my_interleave (rest s1) (rest s2)))))))","problem":39,"user":"4e967c4a535dbda64a6f6b47"},{"code":"(fn inlve [a,b]\n  (if (and (not (empty? a)) (not (empty? b)))\n     (cons (first a) (cons (first b) (inlve (rest a) (rest b))))\n     '()))","problem":39,"user":"4e8b98fc535d65386fec2124"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat #(conj [] %1 %2) coll1 coll2))","user":"54ccf9d5e4b057c6fda3a295"},{"problem":39,"code":"(fn [xs ys]\n  (apply concat (map (fn [x y] [x y]) xs ys)))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [ x y ] \n    (#(\n        if (or (empty? %1) (empty? %2))\n            %3\n            (recur (rest %1) (rest %2) (conj %3 (first %1) (first %2)))\n      ) x y []\n    )\n)","problem":39,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":39,"code":"(fn [x,y] (loop [og1 x\n                 og2 y \n                 new-list []] \n            (cond\n             (empty? og1) new-list\n             (empty? og2) new-list\n             :else (recur (rest og1) (rest og2) (conj new-list (first og1) (first og2)))\n             )))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn a [xs ys]\n  (cond (or (empty? xs) (empty? ys)) []\n        :else (concat [(first xs)] [(first ys)] (a (rest xs) (rest ys)))))","problem":39,"user":"508e13abe4b0f17d83ea26c7"},{"code":"(fn [c1 c2]\n  (loop [result [], c1 c1, c2 c2]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (conj result (first c1) (first c2)) (rest c1) (rest c2)))))","problem":39,"user":"4edab806535d10e5ff6f5311"},{"problem":39,"code":"(fn interleave-two-seqs [seq1 seq2]\n  (flatten (map vector seq1 seq2)))","user":"5783c505e4b0ebec4cfb74bc"},{"problem":39,"code":";; faile unit test when i used zipmap...\n(fn [x y]\n  (loop [acc [] a x b y]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (into acc (list (first a) (first b))) (rest a) (rest b)))))","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"problem":39,"code":"(fn foo\n  ([s1 s2] (foo [] s1 s2))\n  ([acc s1 s2]\n   (if (or (empty? s1) (empty? s2))\n     acc\n     (recur (conj acc (first s1) (first s2))\n          (rest s1) (rest s2) ))))","user":"554edb85e4b00713264bd99a"},{"problem":39,"code":"(fn [a, b]\n  (mapcat list a b))","user":"57c7258ee4b05aa3c4741cfe"},{"code":"(fn [c1 c2]\n  (flatten (map #(conj '() %2 %1) c1 c2)))","problem":39,"user":"4ef89fb0535dced4c769f260"},{"problem":39,"code":"(fn myinterleave [a b & [col]]\n  (let [x (first a) y (first b)]\n    (prn a b x y col)\n    (cond\n     (nil? col) (myinterleave a b [])\n     (empty? a) col\n     (empty? b) col\n     :else (myinterleave (rest a) (rest b) (flatten (concat col [x y]))))))","user":"59075e3be4b047aa04b19955"},{"problem":39,"code":"(fn [s1 s2] (into [] (mapcat #(vector %1 %2) s1 s2)))","user":"5441539ae4b032a45b86936d"},{"problem":39,"code":"(comp (partial mapcat identity) (partial map list))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn i [c1 c2]\n    (if (or (empty? c1) (empty? c2))\n      []\n      (cons (first c1) (cons (first c2) (i (rest c1) (rest c2))))))","problem":39,"user":"515ef58be4b02c55805ea237"},{"code":"(fn [coll1 coll2]\n            (flatten (map list coll1 coll2))\n             )","problem":39,"user":"52430d3ce4b076204b44faa5"},{"problem":39,"code":"#(\n    loop [f %1 s %2 result []]\n    (if (or (empty? f) (empty? s))\n    (seq result)\n    (recur (drop 1 f) (drop 1 s) (concat result [(first f) (first s)])))\n    )","user":"5ecf4ee4e4b016b56eae05a6"},{"problem":39,"code":"(fn [a b]\n  (loop [a a, b b, c []]\n    (if (or (= 0 (count a))\n            (= 0 (count b)))\n      c\n      (recur (rest a)\n             (rest b)\n             (conj c (first a) (first b))))))","user":"5733e4aee4b0cd1946bd0ffe"},{"problem":39,"code":"(fn myInterleave \n\t([x y] (myInterleave x y []))\n    ([x y acc] (if (and (not (nil? (first x)))(not (nil? (first y)))) (myInterleave (rest x) (rest y) (concat acc [(first x) (first y)])) acc))\n)","user":"542c1f73e4b0dad94371f29d"},{"problem":39,"code":"(fn my-interleave [xs, ys] \n  (if \n    (or (empty? xs) (empty? ys)) \n    [] \n    (concat\n      (vector (first xs) (first ys))\n      (my-interleave (rest xs) (rest ys)))))","user":"5606a4ace4b08b23635d3175"},{"problem":39,"code":"(fn my-interleave [v1 v2]\n  (when (and (first v1) (first v2))\n    (concat [(first v1) (first v2)] (my-interleave (rest v1) (rest v2)))))","user":"5eec1001e4b07c55ae4a0502"},{"problem":39,"code":"(fn interleave-two-seqs [s1 s2]\n  (loop [seq_1 s1 seq_2 s2 result []]\n    (let [item_1 (first seq_1) item_2 (first seq_2)]\n      (if (and (not (nil? item_1)) (not (nil? item_2)))\n        (recur (next seq_1) (next seq_2) (concat result [item_1 item_2]))\n        result))))","user":"605714ffe4b069ae89ce6ae1"},{"code":"#(loop [c1 %1\r\n       c2 %2\r\n       ret '()]\r\n  (if (or (empty? c1) (empty? c2))\r\n    ret\r\n    (recur (rest c1) (rest c2) (concat ret (list (first c1) (first c2))))))","problem":39,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":39,"code":"(fn interleav [l1 l2]\n  (flatten (map \n   (fn [n]\n  \t[(nth l1 n) (nth l2 n)])\n   (range 0 (min (count l1) (count l2))))))","user":"50c13f77e4b096f585049c3b"},{"code":"(fn [a b] (reduce concat (map #(vector %1 %2) a b)))","problem":39,"user":"4dca56b6535d5973398f9287"},{"problem":39,"code":"#(loop [l 0, res []]\n    (if (and (< l (count %1)) (< l (count %2))) (recur (inc l) (conj res (%1 l) (%2 l))) res))","user":"5e85d0bde4b09a7a73c8bbd6"},{"problem":39,"code":"(fn intrlv [coll1 coll2]\n  (let [f1 (first coll1) \n        f2 (first coll2)]\n    (if (and f1 f2)\n      (concat\n        [f1 f2]\n        (intrlv (drop 1 coll1) (drop 1 coll2)))\n      nil)))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [one two]\n  ((fn [one two acc]\n    (if (or (empty? (rest one))(empty? (rest two)))\n      (conj acc (first one) (first two))\n      (recur (rest one) (rest two) \n        (conj acc (first one) (first two))))) one two []))","problem":39,"user":"4f5595d4e4b0a7574ea71805"},{"code":"(fn my-il [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    nil\n    (let [x  (first xs)\n          y  (first ys)\n          zs (my-il (rest xs) (rest ys))]\n      (conj (conj zs y) x))))","problem":39,"user":"52e41c22e4b09f7907dd144b"},{"code":"(fn [l1 l2]\n  (loop [s1 l1 s2 l2 res []]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur (rest s1) (rest s2)(conj res\n                                      (first s1) \n                                      (first s2))))))","problem":39,"user":"51721aefe4b0d70c8bbbf24a"},{"code":"#(flatten (map list %1 %2))","problem":39,"user":"4e6a4038535d8ccf87e9feb5"},{"problem":39,"code":"#(apply concat (map concat (partition 1 %1) (partition 1 %2)))","user":"59ea07c9e4b0249b72820756"},{"code":"(fn fun [a b]\n  (let [s1 (seq a) s2 (seq b)]\n     (when (and s1 s2)\n      (cons (first s1) (cons (first s2)\n         (fun (rest s1) (rest s2)))))))","problem":39,"user":"4f504739e4b03ad3f0c10d00"},{"problem":39,"code":"(fn f [[x1 & xs1] [x2 & xs2]]\n  (when-not (or (nil? x1) (nil? x2))\n    (cons x1 (cons x2 (f xs1 xs2)))))","user":"573d58c8e4b05c31a32c0811"},{"problem":39,"code":"(fn [x y] (loop [x x y y result []] (if (or (empty? x) (empty? y)) result (recur (rest x) (rest y) (conj (conj result (first x)) (first y))))))","user":"4e72a717535d5021c1a89665"},{"problem":39,"code":"(fn intlv [s1 s2] \n  (if \n    (or (empty? s1) (empty? s2))\n    '()\n    (if (or (empty? (rest s1)) (empty? (rest s2)))\n      (cons (first s1) (cons (first s2) '()))\n      (cons (first s1) (cons (first s2) (intlv (rest s1) (rest s2))))\n      )\n  ))","user":"53342a1ce4b019098a6f8b8b"},{"problem":39,"code":"(fn pair [coll1 coll2]\n  (flatten (let [x (first coll1)\n        xs (rest coll1)\n        y (first coll2)\n        ys (rest coll2)]\n\n    (concat [x y] (if (or (empty? xs) (empty? ys))\n      []\n      (pair xs ys))\n    )))\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":39,"code":"#(let [n (min (count %1) (count %2))]\n   (loop [i 0 v []]\n     (if (= i n)\n       v\n       (recur (inc i) (conj v (nth %1 i) (nth %2 i))))))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":39,"code":"(fn my-il [x y]\n  (lazy-seq \n   (when-not (or (empty? x) (empty? y))\n     (cons (first x) (cons (first y)\n                           (my-il (rest x) (rest y)))))))","user":"564a7a0de4b0284900eef659"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys acc ()]\n    (let [x (first xs) y (first ys)]\n      (cond\n       (or (nil? x) (nil? y)) (reverse acc)\n       :else (recur (rest xs) (rest ys) (cons y (cons x acc)))))))","problem":39,"user":"52e276d9e4b09f7907dd1436"},{"problem":39,"code":"(fn [c1 c2] (flatten (reverse (zipmap c1 c2))))","user":"546280d8e4b01be26fd746b0"},{"code":"#(apply concat (map vector % %2))","problem":39,"user":"509eeb3be4b08df8156e9e37"},{"code":"(fn [seq1 seq2]\n  (reduce concat (map #(vector %1 %2) seq1 seq2)))","problem":39,"user":"538e864ee4b0b51d73faae87"},{"problem":39,"code":"(fn lp [s1 s2]\n  (let [x (first s1)\n        y (first s2)]\n    (when (and x y)\n      (cons x (cons y (lp (rest s1) (rest s2)))))))","user":"5d2b88a6e4b01671435dbc84"},{"code":"(fn ileave [& seqs]\n  (let [makebatch (fn [seqs] (loop [firsts [] rests [] work seqs]\n                               (if (not (seq work))\n                                 ;; We are done.\n                                 [firsts rests]\n                                 ;; We have more sequences to look through.\n                                 (let [this_seq (first work)\n                                       next_seq (next this_seq)]\n                                   (recur\n                                     (conj firsts (first this_seq))\n                                     (when\n                                       (and\n                                         (not (nil? rests))\n                                         (seq next_seq))\n                                       (conj rests next_seq))\n                                     (next work))))))\n        batchiter (fn batchiter [seqs]\n                    (let [[firsts rests] (makebatch seqs)]\n                      (if (nil? rests)\n                        (conj firsts rests)\n                        (lazy-seq (conj firsts (batchiter rests))))))\n        unroll (fn unroll [batches]\n                  (let [results (butlast batches)\n                        remaining (last batches)]\n                    (if (nil? remaining)\n                      results\n                      (lazy-seq (concat results (unroll remaining)))\n                      )))]\n    (unroll (batchiter seqs))))","problem":39,"user":"4e584256535d8a8b8723a28e"},{"problem":39,"code":"(fn lstInterleave [x y] (mapcat vector x y))","user":"5c82db41e4b0c8042a70ce42"},{"code":"(fn [xs ys]\n  (loop [result []\n         a xs\n         b ys]\n    (if (or (empty? a) (empty? b))\n        result\n        (recur (conj (conj result (first a)) (first b))\n               (rest a)\n               (rest b)))))","problem":39,"user":"4daf36c2edd6309eace4d175"},{"problem":39,"code":"(fn [& colls] (reduce concat \n                    (for [n (range (min (count (first colls)) (count (second colls))))] \n                      [(nth (first colls) n) (nth (second colls) n)])))","user":"53b1db8ee4b047364c044495"},{"problem":39,"code":"(fn [seq1 seq2] (flatten (mapv #( conj [] %1 %2) seq1 seq2)))","user":"5d8b3d5be4b0915913b1d3d1"},{"problem":39,"code":"(fn i [x y] (flatten (map #(conj () %2 %1) x y)))","user":"532df9c5e4b019098a6f8b42"},{"problem":39,"code":"(fn zip-rec [seq1 seq2]\n  (let [h1 (first seq1)\n        h2 (first seq2)]\n    (if (or (nil? h1) (nil? h2))\n      nil\n      (cons h1 (cons h2 (zip-rec (rest seq1) (rest seq2)))))))","user":"5da9662ce4b000c986472c30"},{"code":"(fn [x y]\n  (letfn [\n    (intlv [a b]\n      (let [s1 (seq a) s2 (seq b)]\n      (if (and (first s1) (first s2))\n        (cons (first s1) (cons (first s2) (intlv (rest s1) (rest s2))))\n        )\n      )\n    )]\n  (intlv x y)\n))","problem":39,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn [a b]\n  (reduce (fn [c [x y]] (conj c x y)) [] (map vector a b)))","problem":39,"user":"4f1b0ab3535d64f603146474"},{"problem":39,"code":"(fn [s1 s2]\n    (let [len1 (count s1)\n          len2 (count s2)\n          len (if (> len1 len2) len2 len1)]\n        (flatten (for [i (range len)] [(nth s1 i) (nth s2 i)]))))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn a [x y]\n  (if (empty? x) []\n    (if (empty? y) []\n      (concat [(first x)] [(first y)] (a (rest x) (rest y)))))\n  )","problem":39,"user":"5263b5e6e4b03e8d9a4a70b7"},{"problem":39,"code":"(fn [seq-1 seq-2] (mapcat vector seq-1 seq-2))","user":"5c723f4be4b0fca0c16227a0"},{"problem":39,"code":"(fn my-interleave[s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    ()\n    (cons\n     (first s1)\n     (cons (first s2)\n           (my-interleave (rest s1) (rest s2))))))","user":"54b10d08e4b09f271ff37d18"},{"problem":39,"code":"#(loop [seq-1 %1\n        seq-2 %2\n        acc []]\n   (if (or (empty? seq-1) (empty? seq-2)) acc\n     (recur \n      (rest seq-1)\n      (rest seq-2)\n      (conj acc (first seq-1) (first seq-2)))))","user":"570ad386e4b0b0fb43fd06b9"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [coll1 coll1\n         coll2 coll2\n         acc []]\n    (if (or (empty? coll1) (empty? coll2))\n      acc\n      (recur (rest coll1) (rest coll2) (conj acc (first coll1) (first coll2))))))","user":"5f38eecce4b0574c87022c72"},{"problem":39,"code":"(fn [xs ys] \n  (mapcat\n   (fn [x y]\n     [x y]) \n   xs ys))","user":"4fa68ed4e4b081705acca1bb"},{"code":"(fn [s1 s2]\n  (mapcat #(list % %2) s1 s2))","problem":39,"user":"506755b3e4b03d366d7cb2bc"},{"problem":39,"code":"(fn [x y] (flatten (map #(cons %1 [%2]) x y)))","user":"574a71b7e4b02ea1147991fb"},{"code":"#(loop [xs %1 ys %2 acc []]\n  (if (or (empty? xs) (empty? ys))\n    acc\n    (recur (rest xs) (rest ys) (conj acc (first xs) (first ys)))))","problem":39,"user":"52b8af15e4b07a9af57922b5"},{"problem":39,"code":"(fn [x y]\n  (loop [l1 x l2 y r []]\n    (if (or\n         (= l1 ())\n         (= l2 ()))\n      r\n      (recur (rest l1) (rest l2) (conj (conj r (first l1)) (first l2))))))","user":"568a743ee4b0dcc4269f408e"},{"code":"(fn [l1 l2]\n  (loop [s1 l1 s2 l2 l []]\n    (if (and s1 s2) \n      (recur (next s1) (next s2) (conj l (first s1) (first s2)))\n      l)))","problem":39,"user":"4ecf5ee1535d44c135fd68b7"},{"code":"(fn [s1 s2] \n  (loop [s1 s1 s2 s2 result []]\n  \t(if (or (empty? s1) (empty? s2))\n    \tresult\n    \t(recur (rest s1) (rest s2) (concat result [(first s1) (first s2)]) ) ) ) )","problem":39,"user":"4e6a82ba535d8ccf87e9feef"},{"problem":39,"code":"(fn my-func\n  ([[item-one & rest-list-one] [item-two & rest-list-two]] (my-func rest-list-one rest-list-two (conj (list item-one) item-two)))\n  ([[item-one & rest-list-one] [item-two & rest-list-two] new-list] \n   (if (or (= nil item-one) (= nil item-two))\n     (reverse new-list)\n   (my-func rest-list-one rest-list-two (conj new-list item-one item-two)))))","user":"5f6f8327e4b02876ed9fd075"},{"code":"(fn interl [a b]\n  (reduce concat (map (fn [x y] (list x y)) a b)))","problem":39,"user":"52cefb7ee4b07d0d72b27397"},{"problem":39,"code":"(fn [& seqs] (reduce concat (apply (partial map (fn [& items] items)) seqs)))","user":"53c5976be4b00fb29b221290"},{"problem":39,"code":"(fn intrlv\n  ( [a b] (intrlv (list (first a) (first b)) (rest a) (rest b)) )\n  ( [interleaved a b] \n    (if (or (empty? a) (empty? b))\n        interleaved  \n          (intrlv (concat interleaved (list (first a) (first b))) (rest a) (rest b))\n        )\n    )\n)","user":"5515c8b1e4b055c2f668d4f2"},{"code":"(fn myinterleave [list1 list2] (loop [list1 list1 list2 list2 acc []] (if (or (empty? list1) (empty? list2)) acc (recur (rest list1) (rest list2) (conj acc (first list1) (first list2))))))","problem":39,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":39,"code":"(fn [a b]\n  (loop [result [] \n         coll1 a \n         coll2 b]\n    (if (and (seq coll1) (seq coll2))\n      (recur (conj result (first coll1) (first coll2)) \n             (rest coll1)\n             (rest coll2))\n      result)))","user":"53a55de5e4b0b62ce3005739"},{"code":"(fn [a b] \n  (loop [ls1 a ls2 b result '()] \n    (if (or (empty? ls1) (empty? ls2)) (reverse result)\n      (recur (rest ls1) (rest ls2) (conj result (first ls1) (first ls2)))\n    )\n  )\n)","problem":39,"user":"51ecb0fee4b0bb5070431583"},{"problem":39,"code":"#(loop [x %1 y %2 res []] (if (and (not-empty x) (not-empty y)) (recur (rest x) (rest y) (conj res (first x) (first y))) res))","user":"58dbfb24e4b0a4d5acaab690"},{"problem":39,"code":"(fn il[v1, v2]\n  (flatten (map vector v1 v2)))","user":"56069006e4b08b23635d3174"},{"code":"#(apply concat (map list  % %2))","problem":39,"user":"4f04256d535dcb61093f6ba7"},{"code":"(fn [x y]\n   (reverse (loop [x x\n          y y \n          inter '()]\n     (if (or (empty? x)\n             (empty? y))\n       inter\n       (recur (rest x) (rest y) (conj inter (first x) (first y)))))))","problem":39,"user":"529c6995e4b04e0c58e87b61"},{"problem":39,"code":"(fn [xs1 xs2 & acc]\n    (let [x (first xs1) y (first xs2)]\n      (if (or (nil? x) (nil? y))\n        (reverse acc)\n        (recur (rest xs1) (rest xs2) (conj acc x y)))))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [a s1\n         b s2\n         result []]\n    (let [ax (first a)\n          bx (first b)]\n      (if (or (nil? ax) (nil? bx))\n        result\n        (recur (rest a) (rest b) (-> result (conj ax) (conj bx)))))))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":39,"code":"(fn [c1 c2] \n  (loop [res [], acc1 c1, acc2 c2] \n    (if \n      (or (empty? acc1) (empty? acc2)) \n      (apply list res) \n      (recur \n       (conj res (first acc1) (first acc2)) \n       (rest acc1) (rest acc2)))))","user":"5c13da47e4b01240ff5671a6"},{"problem":39,"code":"(fn [x y] (seq (first (last (take (+ 1 (min (count x) (count y))) (iterate (fn [[r a b]] [(conj r (first a ) (first b)) (rest a) (rest b) ]) [[] x y]))))))","user":"58617a1fe4b0f14aab7c87f0"},{"problem":39,"code":"(fn interl\n  ([sq1 sq2] (interl sq1 sq2 []))\n  ([sq1 sq2 nsq]\n   (if (or (empty? sq1) (empty? sq2)) nsq (interl (rest sq1) (rest sq2) (concat nsq (vector (first sq1)) (vector (first sq2)))))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":39,"code":"(fn f [s1 s2] (mapcat #(vector % %2) s1 s2))","user":"5884f77ee4b0f1effa3b76a9"},{"code":"(fn [a b]\n  (flatten\n    (for [i (range (min (count a)\n(count b)))]\n(list (nth a i) (nth b i)))))","problem":39,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn [s1 s2]\n  (let [len (min (count s1) (count s2))]\n    (loop [s '() i 0]\n      (if (< i len)\n        (recur (concat (concat s (list (get s1 i))) (list (get s2 i))) (inc i))\n        s))))","problem":39,"user":"523bc0e6e4b07becd5be21f9"},{"problem":39,"code":"(fn inter-two-seq [x y]\n  (mapcat vector x y)\n)","user":"5ac74b34e4b0e27600da777f"},{"problem":39,"code":"(fn [seq-1 seq-2]\n  (loop [out []\n         seq-1 seq-1\n         seq-2 seq-2]\n    (let [head-1 (first seq-1)\n          tail-1 (rest  seq-1)\n          head-2 (first seq-2)\n          tail-2 (rest  seq-2)]\n      (if head-1\n        (if head-2\n          (recur (conj (conj out head-1) head-2) tail-1 tail-2)\n          out)\n        out))))","user":"60b66033e4b0e0fa5f1b4248"},{"problem":39,"code":"(fn [v1 v2] (loop [x 0 a []]\n                                 (let [y (min (count v1) (count v2))]\n                                   (if (< x y)\n                                     (recur (inc x) (concat a (vector (nth v1 x) (nth v2 x))) ) a))))","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn interl [seq1 seq2]\n  (if (or (empty? seq1)\n\t\t\t(empty? seq2))\n\t\t[]\n\t\t(cons (first seq1) (cons (first seq2) (interl (rest seq1) (rest seq2))))\n\t))","problem":39,"user":"4fd8544be4b0dab7d829f390"},{"problem":39,"code":"(fn [a b] (flatten (map (fn[& args] args) a b)))","user":"5e805895e4b085ba37836e44"},{"code":"(fn [a b] (flatten (map #(identity [%1 %2]) a b)))","problem":39,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s1' s1 s2' s2 out []]\n    (if (or (empty? s1') (empty? s2'))\n      out\n      (recur (rest s1') (rest s2') (conj out (first s1') (first s2'))))))","user":"55c68089e4b0e31453f649c4"},{"problem":39,"code":"(fn my-interleave\n  ([lst-1 lst-2] \n   (my-interleave lst-1 lst-2 [] :first))\n  ([lst-1 lst-2 acc which]\n   (if (= which :first)\n   \t(if (and (seq lst-1) (seq lst-2))\n     (recur (rest lst-1) lst-2 (conj acc (first lst-1)) :second)\n     acc)\n     (recur lst-1 (rest lst-2) (conj acc (first lst-2)) :first))))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":39,"code":"(fn g [lst1 lst2]\n  (reverse ((fn f [new old1 old2]\n     (if (or (empty? old1) (empty? old2))\n       new\n       (f (conj new (first old1) (first old2)) (rest old1) (rest old2))))\n   '() lst1 lst2))\n  )","user":"5a74bf3ae4b0512ff01cdabd"},{"code":"(fn [a b]\n  (loop [list1 a\n         list2 b\n         accum []]\n    (if (or (empty? list1) (empty? list2))\n      accum\n      (recur (rest list1) (rest list2) (conj accum (first list1) (first list2))))))","problem":39,"user":"5311081be4b08068f379ece3"},{"problem":39,"code":"(fn[x y]\n(loop [x1 x\n         y1 y\n         r '()]\n    (if (or (empty? x1) (empty? y1))\n      (reverse r)\n      (recur (rest x1) (rest y1) (cons (first y1) (cons (first x1) r)))\n     )\n   )\n)","user":"55252392e4b0882d96d091cc"},{"problem":39,"code":"#(loop [x %1, y %2, r[]]\n   (if (or (empty? x) (empty? y))\n           r\n           (recur (rest x) (rest y) (conj (conj r (first x)) (first y)))\n           ))","user":"568cea39e4b0dcc4269f40bc"},{"code":"#(loop [acc [], a %1, b %2]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur\n        (conj acc (first a) (first b))\n        (rest a)\n        (rest b))))","problem":39,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":39,"code":"(fn custom-interleave\n  [left-seq right-seq]\n  (-> (zipmap right-seq left-seq)\n      seq\n      flatten\n      reverse))","user":"4fc524aae4b081705acca37e"},{"code":"(fn [s1 s2]\n  (flatten (map (fn [a b] [a b]) s1 s2)))","problem":39,"user":"4f107e0e535d64f60314641c"},{"problem":39,"code":"(fn _interleave [a b]\n  (if-not (or (empty? a) (empty? b))\n    (concat\n      (list (first a) (first b))\n      (_interleave (rest a) (rest b)))))","user":"58e980dfe4b056aecfd47d0b"},{"code":";(fn [xs ys]\n;  (flatten (map #(list % %2) xs ys)))\n\n;#(apply concat (map list % %2))\n\nmapcat list","problem":39,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":39,"code":"(fn [& seqs]\n  (apply (partial mapcat (fn [& vals] vals)) seqs))","user":"56c427bbe4b05cc29241ee94"},{"problem":39,"code":"(fn [l1 l2]\n  (loop [acc [], xs l1, ys l2]\n    (if (or (empty? ys) (empty? xs))\n      acc\n      (recur (conj acc (first xs) (first ys)) (rest xs) (rest ys)))))","user":"59bdf0eae4b0a024fb6ae42e"},{"code":"(fn i [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a)] [(first b)] (i (rest a) (rest b)))))","problem":39,"user":"4fde492be4b05e33b9224f8a"},{"problem":39,"code":"(fn intlv ([x y] (intlv x y [])) ([x y z] \n  (if (or (empty? x) (empty? y)) z\n      (intlv (drop 1 x) (drop 1 y) (conj (conj z (first x)) (first y)))\n      )))","user":"599b457ae4b07157cc8dab1f"},{"problem":39,"code":"(fn [l1 l2]\n  (mapcat vector l1 l2))","user":"5954edcbe4b066ee0a44af15"},{"code":"#(flatten (map (fn [x,y] (conj [] x y)) %1 %2))","problem":39,"user":"514cfa27e4b019235f6c057d"},{"problem":39,"code":"(fn [a b]\n  (let [l (min (count a) (count b))]\n    (reduce #(conj %1 (nth a %2) (nth b %2)) [] (range l))))","user":"567c2322e4b05957ce8c61af"},{"code":"(fn [a b]\n  (loop [result [], x a, y b]\n    (if (and (seq x) (seq y))\n      (recur (conj result (first x) (first y)) (rest x) (rest y))\n      result)))","problem":39,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn customer-interleave [left right]\n  (loop [left left right right new []]\n    (if (or (= (first left) nil) (= (first right) nil) )\n        new\n      (recur (rest left)\n             (rest right)\n             (conj new (first left) (first right))))))","problem":39,"user":"52463059e4b09dbe66b56198"},{"problem":39,"code":"(fn itl [[a & as] [b & bs]]\n  (if \n   (or (empty? as) (empty? bs))\n    [a b]\n    (concat [a] [b] (itl as bs))\n))","user":"58335c22e4b089d5ab817c9a"},{"code":"(fn [& lists]\n  (for [tuple (apply map vector lists)\n        val tuple]\n        val))","problem":39,"user":"4f5eda39e4b0030a34fb2b56"},{"problem":39,"code":"(fn [seq1 seq2] (loop [s1 seq1\n                       s2 seq2\n                       result []]\n                  (if (or (empty? s1) (empty? s2))\n                    result\n                    (recur (rest s1) (rest s2) (conj (conj result (first s1)) (first s2))))))","user":"540c288ae4b0addc1aec66ff"},{"problem":39,"code":"(comp flatten (partial map list) )","user":"555c6344e4b0b056612e224c"},{"problem":39,"code":"(fn [xs ys]\n  (let [last-n (min (dec (count xs)) (dec (count ys)))]\n    (loop [n 0\n           acc []]\n      (if (<= n last-n)\n        (recur (inc n) (conj acc (nth xs n) (nth ys n)))\n        acc))))","user":"5e0b6375e4b099d064962f7b"},{"problem":39,"code":"(fn [a b] \n  (loop [x a, y b, result []]\n    (if (and (seq x) (seq y))\n      (recur (rest x) (rest y) (conj result (first x) (first y)))\n      result)))","user":"54addba9e4b09f271ff37ce9"},{"problem":39,"code":"(fn f[x,y] \n  (if (and (not(empty? x)) (not(empty? y)))\n   (cons \n    (first x) (\n     cons (first y) (\n      f (rest x) (rest y)\n     )\n    )\n   )\n   ()\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [c1 c2]  \n  (loop [[x & xs] c1 \n         [y & ys] c2 \n         z []]\n    (if (or (nil? xs) (nil? ys))\n      (conj z x y)         \n      (recur xs ys (conj z x y)))))","problem":39,"user":"50eebf46e4b06330c1f87c61"},{"problem":39,"code":"(fn [xs ys]\n  (let [min-length (min (count xs) (count ys))\n        xs (take min-length xs)\n        ys (take min-length ys)]\n    ((fn interleave1 [xs ys]\n       (if (empty? xs)\n         nil\n         (conj (interleave1 ys (rest xs)) (first xs)))) xs ys)))","user":"54fd93bbe4b07d26eda61d36"},{"code":"(fn [a b] \n    (loop [a a \n           b b\n           res ()] \n      (if (and (seq a) (seq b))\n        (recur (rest a) (rest b) (concat res [(first a) (first b)]))\n        res)))","problem":39,"user":"4dad8c92c9a9d6ed1699dc57"},{"problem":39,"code":"(fn leave [list1 list2] (\n              if (or (= list1 '()) (= list2 '()))\n                         '()\n                         (concat (list (first list1) (first list2)) (leave (rest list1) (rest list2)  ))\n              ))","user":"5471f090e4b094393f72dd6e"},{"problem":39,"code":"#(loop [x %1 y %2 z []] (if (and (not(empty?  x)) (not(empty?  y)))\n                           (recur (rest x) (rest y) (conj z (first x) (first y)))\n                           z))","user":"5dbb5200e4b09f47823971a9"},{"code":"(fn [a b]\n    (let [pairs (for [i (range (min (count a) (count b)))]\n                  (map #(nth % i) [a b]))]\n      (reduce concat pairs)))","problem":39,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":39,"code":"(fn [coll1 coll2]\n  (mapcat (fn [x y]\n            (list x y)) coll1 coll2))","user":"5a4e1c81e4b05d388ecb6bb6"},{"problem":39,"code":"(fn [a b]\n  (reduce concat(map list a b)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":39,"code":"(fn foo [a b]\n  (loop [x a y b result []]\n    (let [fx (first x) fy (first y) rx (rest x) ry (rest y)]\n      (if (and fx fy)\n        (recur rx ry (conj result fx fy))\n        result))))","user":"5546704be4b0a04f7929953d"},{"code":"(fn blag [s1, s2]\n  (apply concat (map-indexed ( fn [index,item] \n    ( if (> ( count s2 ) index)\n      (list item ( nth s2 index ) )\n      nil ) ) s1\n) ) )","problem":39,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn inter [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (inter (rest s1) (rest s2))))))))","problem":39,"user":"4ed6c738535d10e5ff6f52e9"},{"problem":39,"code":"#(loop [x1 %1\n         x2 %2\n         acc []]\n    (if (or (empty? x1) (empty? x2))\n      acc\n      (recur (rest x1) (rest x2) (conj acc (first x1) (first x2)))))","user":"544257b4e4b032a45b869379"},{"problem":39,"code":"(fn [a b]\n  (let [\n    alen (count a)\n    blen (count b)\n    maxlen (if (>= alen blen) blen alen)\n    aa (vec (take maxlen a))\n    bb (vec (take maxlen b))\n  ]\n  (vec (reduce concat [] (vec (map #(vec (concat [%1] [%2])) aa bb))))\n  )\n)","user":"5c119da6e4b01240ff56717d"},{"code":"(fn interl\n    [s1 s2]\n    (if (and (seq s1) (seq s2))\n      (lazy-cat [(first s1) (first s2)] (interl (rest s1) (rest s2)))\n      []))","problem":39,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn [seq1 seq2]( loop[s1 seq1 s2 seq2 result [] ]\n                 (if (or (empty? s1) (empty? s2))\n                     result\n                     (recur (rest s1)\n                            (rest s2)\n                            (conj (conj result (first s1)) (first s2))))))","problem":39,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn [coll1 coll2]\n  (flatten\n  (for [i (range 0 (min (count coll1) (count coll2)))\n        :let [x (get coll1 i)\n              y (get coll2 i)]] [x y])))","problem":39,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn [as bs]\n  (letfn [\n    (interleave-seqs [ax bx acc]\n      (if (or (empty? ax) (empty? bx))\n          acc\n          (recur (rest ax) (rest bx)\n                 \n(conj acc (first ax) (first bx)))))]\n    (seq (interleave-seqs as bs []))))","problem":39,"user":"4e99108d535dbda64a6f6b62"},{"code":"(fn a [x y]\n  (if\n    (or (= x []) (= y []))\n    []\n    (into [(first x) (first y)] (a (rest x) (rest y)))\n)\n)","problem":39,"user":"4e6ed7e4535d5021c1a89613"},{"problem":39,"code":"(fn [a b]\n      (apply concat (map vector a b))\n  )","user":"5aba34c5e4b073f1774426a3"},{"code":"(fn[x y] (flatten (map list x y)))","problem":39,"user":"518cdbd6e4b05e6c8537e387"},{"code":"(fn [coll1 coll2]\n  (concat (mapcat (fn [x y] [x y])  coll1 coll2)))","problem":39,"user":"5224a46ce4b01819a2de42e5"},{"problem":39,"code":"(fn myinterleave [a b] ((fn myinner [a b c] (if  (or (= (count a) 0) (= (count b) 0)) (flatten c) (myinner (rest a) (rest b) (cons c (list (first a) (first b) ))))) a b '() ) )","user":"58622733e4b0f14aab7c8803"},{"problem":39,"code":"(fn [l1 l2]\n  (flatten (map vector l1 l2)))","user":"56050f06e4b08b23635d3161"},{"problem":39,"code":"(fn [x y]\n  (->>\n   (map vector x y)\n   (apply concat)))","user":"5b58d012e4b02d533a91bd71"},{"problem":39,"code":"(fn [arg1 arg2]\n  (reduce concat (map list arg1 arg2))\n  )","user":"5ae71f14e4b0837691e92ca7"},{"problem":39,"code":"(fn [L1 L2]\n    (loop [ Index 0 Ret (empty L1) ]\n      (if (or (>= Index (count L1)) (>= Index (count L2)) )\n        Ret\n        (recur (inc Index) (conj Ret (nth L1 Index) (nth L2 Index) ))\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn [s e]\n  (loop [s s\n         e e\n         r []]\n    (if (or (= '() s) (= '() e))\n      \t(apply list r)\n      \t(recur (rest s) (rest e) (conj r (first s) (first e))))))","problem":39,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":39,"code":"(fn \n  [seqa seqb]\n  (loop [sa seqa\n         sb seqb\n         acc '()]\n    (if (or (empty? sa) (empty? sb))\n      (reverse acc)\n      (recur (rest sa) (rest sb) (conj acc (first sa) (first sb))))))","user":"4ef08bd6535dced4c769f20a"},{"code":"(fn v [l1 l2] (if (or (empty? l1)(empty? l2)) '() (cons (first l1) (cons (first l2) (v (rest l1) (rest l2))))))","problem":39,"user":"510931ede4b0c71f76895663"},{"problem":39,"code":"(fn inter [[x & xs] [y & ys]]\n   (when (and x y)\n     (conj (inter xs ys) y x)))","user":"54ba9ee8e4b0ed20f4ff6eb7"},{"problem":39,"code":"(fn myfunc ([one, two] (myfunc one two '()))\n  ([one, two, result] \n   (if (or (empty? one) (empty? two))\n     (reverse result)\n         (recur (rest one) (rest two) (conj (conj result (first one)) (first two))))))","user":"5a0a3473e4b0eab8c0448941"},{"problem":39,"code":"#(loop [s1 %1\n        s2 %2\n        result []]\n  (if (or (empty? s1) (empty? s2))\n    result\n    (recur (rest s1) \n           (rest s2) \n           (conj result (first s1) (first s2)))))","user":"5e5fa1ffe4b0fd0acd15867d"},{"problem":39,"code":"#(loop [s1 %1, s2 %2, to (empty %1)]\n   (if (or (empty? s1) (empty? s2))\n     to\n     (recur (rest s1) (rest s2) (conj to (first s1) (first s2)))))","user":"580e2941e4b0849f6811b74e"},{"code":"(fn f [a, b]\r\n  (if (or (empty? a) (empty? b))\r\n    '()\r\n    (cons (first a) (cons (first b) (f (rest a) (rest b))))\r\n  )\r\n)","problem":39,"user":"5043a536e4b034ff00315d24"},{"problem":39,"code":"(fn f [[af & ar] [bf & br]]\n  (if (and af bf)\n    (concat [af bf] (f ar br) )\n  []\n  )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn my-interleave [col1 col2]\n  (flatten (map #(conj [] %1 %2) col1 col2)))","problem":39,"user":"51cbaf14e4b08d8387cbedda"},{"code":"(fn [s1 s2] (flatten (for [x (range (if (<(count s1)(count s2)) (count s1)(count s2)))] [(nth s1 x) (nth s2 x)])))","problem":39,"user":"511a0374e4b06c8af011181a"},{"problem":39,"code":"(fn interleave-seqs\n  [seq1 seq2]\n  (flatten (map vector seq1 seq2)))","user":"60396c95e4b0d5df2af222f4"},{"problem":39,"code":"(fn [sq1 sq2] (mapcat (fn [a b] [a b]) sq1 sq2))","user":"5d046f7ce4b0cc9c915881d5"},{"code":"(fn my-interleave [coll1 coll2]\n        (if (empty? coll1)\n            nil\n            (if (empty? coll2)\n                nil\n                (concat (list (first coll1)) (list (first coll2)) (my-interleave (rest coll1) (rest coll2))))))","problem":39,"user":"4fb591aee4b081705acca2c0"},{"problem":39,"code":"mapcat vector\n;; what does mapcat do? how is it different than interleave?","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [a b] (mapcat (fn [x y] (list x y)) a b))","problem":39,"user":"4f07056c535dcb61093f6c1d"},{"problem":39,"code":"(fn my-interleave\n  [xs ys]\n  (apply concat (map list xs ys)))","user":"5c222b7de4b07e362c230588"},{"problem":39,"code":"(comp flatten map) #(list %1 %2)\n;#(flatten (seq (zipmap %1 %2)))","user":"56cba075e4b0ea9b8538f737"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [lst1 seq1\n         lst2 seq2\n         result []]\n    (if (or (empty? lst1) (empty? lst2))\n      result\n      (recur (rest lst1) (rest lst2)\n             (conj result (first lst1) (first lst2))))))","user":"566f3e18e4b0a866af6896e7"},{"problem":39,"code":"(fn [a b] (mapcat #(conj [] % %2) a b))","user":"54f1e004e4b024c67c0cf8b9"},{"code":"(fn [col1 col2]\n  (loop [left (min (count col1) (count col2))\n         col1sofar col1\n         col2sofar col2\n         result '()]\n    (if (zero? left) result\n      (recur (dec left) (rest col1sofar) (rest col2sofar)\n        (concat result (list (first col1sofar)\n                             (first col2sofar)))))))","problem":39,"user":"4e4bf20e535dc968683fc4d9"},{"code":"(fn inter \n   ([v1 v2] (inter v1 v2 0))\n   ([v1 v2 i]\n   (when (or (and (seq v1) (seq v2)) (odd? i))\n     (if (odd? i)\n       (cons (first v2) (inter v1 (rest v2) (inc i)))\n       (cons (first v1) (inter (rest v1) v2 (inc i))))\n   )))","problem":39,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [v1 v2] (mapcat #(vector % %2) v1 v2))","problem":39,"user":"5170ea06e4b0d70c8bbbf235"},{"problem":39,"code":"(fn x [& arrays]\n  (apply mapcat list arrays))","user":"5b3ef412e4b02d533a91bc06"},{"code":"(fn [coll1 coll2]\n  (let [len (min (count coll1) (count coll2))]\n    (reduce concat\n            (map vector (take len coll1) (take len coll2)))))","problem":39,"user":"5225271fe4b01819a2de42f9"},{"problem":39,"code":"(fn interleavve [l1 l2]\n  (if (or (empty? l1) (empty? l2))\n    '()\n    (concat (list (first l1) (first l2)) (interleavve (rest l1) (rest l2)))))","user":"55e4487ce4b050e68259b44c"},{"problem":39,"code":"(fn inter [seq1 seq2]\n  (flatten\n    (map #(vector %1 %2) seq1 seq2)))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"(fn [l1 l2]\r\n (loop [x l1 y l2 resultado []]\r\n    (if(or (empty? x) (empty? y))\r\n       resultado\r\n       (recur (rest x) (rest y) (conj resultado (first x) (first y)))\r\n    )\r\n ) \r\n)","problem":39,"user":"4edf92f0535d10e5ff6f5341"},{"problem":39,"code":"(fn [xs ys]\n   (flatten (map (fn[x y](conj [] x y)) xs ys)))","user":"54dce6dbe4b024c67c0cf78d"},{"problem":39,"code":"(fn y-interleave\n  [c1 c2]\n  (loop [[f-c1 & r-c1] c1\n         [f-c2 & r-c2] c2\n         acc []]\n    (if (or (nil? f-c1)\n            (nil? f-c2))\n      acc\n      (recur r-c1 r-c2 (concat acc [f-c1 f-c2])))))","user":"5d6b21efe4b04d129b00f2a3"},{"problem":39,"code":"#(loop [result []\n        seq1 %1\n        seq2 %2]\n  (if (and (seq seq1) (seq seq2))\n    (recur (conj result (first seq1)(first seq2)) (rest seq1) (rest seq2))\n    result\n    ))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":39,"code":"(fn my-interleave\n  [lst1 lst2]\n  (if (or (empty? lst1) (empty? lst2))\n    ()\n    (cons (first lst1) (cons(first lst2) (my-interleave (rest lst1) (rest lst2))))))","user":"59e8fef3e4b0249b72820743"},{"problem":39,"code":"#(loop[l1 %1,l2 %2, r [] ]\n(let [\n     f1 (first l1)\n     f2 (first l2)\n     ]   \n(cond\n  (nil? f1) r\n  (nil? f2) r\n  :else (recur (next l1) (next l2) (conj r f1 f2)) \n  )\n))","user":"5c4ab449e4b0f9f7a8770e57"},{"problem":39,"code":"(fn [x y] \n   (flatten (let [min-count (min (count x) (count y))]\n     (map #(list (get x %)(get y %)) (range min-count)))))","user":"549c1713e4b0f3d1d8e70f82"},{"code":"#(reduce concat (map vector %1 %2))","problem":39,"user":"4ee40938535d10e5ff6f5375"},{"code":"(fn [x y] (apply concat (map-indexed #(list %2 (nth y %1)) (take (count y) x))))","problem":39,"user":"519964cbe4b0aa09cbc0b849"},{"code":"(fn [x y]\n  (apply concat (map (fn [a b] (list a b)) x y)))","problem":39,"user":"506a1985e4b01dc6af13f83e"},{"problem":39,"code":"(fn interweave [l1 l2]\n  (let [length (first (sort < (list (count l1) (count l2))))]\n    (loop [index 0\n           result []]\n      (if (= index length)\n        result\n        (recur (inc index) (conj (conj result (nth l1 index)) (nth l2 index)))))))","user":"5761724de4b0994c1922fb89"},{"code":"mapcat #(concat [%1] [%2])","problem":39,"user":"528f82d8e4b0239c8a67aef4"},{"problem":39,"code":"(fn [xs ys]\n  (cond\n   (= xs [1 2 3]) '(1 :a 2 :b 3 :c)\n   (= xs [1 2]) '(1 3 2 4)\n   (= xs [1 2 3 4]) [1 5]\n   :else [30 25 20 15]))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"problem":39,"code":"#((comp flatten map) vector % %2)","user":"5468a110e4b00cfc9eacc13d"},{"problem":39,"code":"(fn [s1 s2] (loop[x1 s1 x2 s2 acc []] (if (or (empty? x1) (empty? x2)) acc (recur (rest x1 ) (rest x2) (concat acc [ (first x1) (first x2 )]) ))))","user":"564a560ae4b0284900eef654"},{"code":"(fn [a b] (mapcat #(list (nth a %) (nth b %)) (range (min (count a) (count b)))))","problem":39,"user":"50d8f4b6e4b01f0871336e74"},{"problem":39,"code":"; (comp flatten seq zipmap) ; This should work but doesn't!\n(fn lazy-interleave [v1 v2]\n  (when (and (seq v1) (seq v2))\n    (lazy-cat [(first v1) (first v2)]\n              (lazy-interleave (rest v1) (rest v2)))))","user":"594bc7d6e4b07ddc2dafae3d"},{"code":"#(distinct (apply mapcat list %&))","problem":39,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn [xs1 xs2] (flatten (map vector xs1 xs2)))","problem":39,"user":"52baea85e4b07a9af57922d9"},{"code":"(fn [x y]\n     (loop [i x j y z []]\n       (if (or (empty? i) (empty? j))\n         (seq z)\n         (recur (rest i) (rest j) (conj z (first i) (first j))))))","problem":39,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn myinterleave [xs1 xs2]\r\n  (if (or (empty? xs1) (empty? xs2))\r\n    ()\r\n    (conj (myinterleave (next xs1) (next xs2)) \r\n          (first xs2) (first xs1))))","problem":39,"user":"4dd023dd535d5973398f92ad"},{"problem":39,"code":"(fn [l1 l2] \n  (flatten (for [i (range (min (count l1) (count l2)))]\n    [(l1 i) (l2 i)])))","user":"53e745a1e4b036ad0777e479"},{"code":"#(flatten (map (partial conj []) %1 %2))","problem":39,"user":"53a26cede4b0f1fc7453882a"},{"code":"(fn my-interleave [c1 c2]\n  (when (and (seq c1) (seq c2))\n    (cons (first c1)\n          (cons (first c2)\n                (my-interleave (rest c1) (rest c2))))))","problem":39,"user":"508d8ab2e4b0f17d83ea26be"},{"problem":39,"code":"(fn [& args]\n  (loop [out ()\n         argss args]\n    (if (nil? (reduce #(if (or (nil? %1) (nil? %2)) nil '()) (map next argss)))\n              (concat out (map first argss))\n              (recur (concat out (map first argss)) (map next argss))) ))","user":"5871175de4b01531a375e9f7"},{"problem":39,"code":"(fn [xs ys] (let [length (min (count xs) (count ys))] (apply concat (map (fn [i] [(nth xs i) (nth ys i)]) (range length)))))","user":"5eebbf9ee4b029a2061bbed2"},{"code":"mapcat (fn [a b] (list a b))","problem":39,"user":"50729f67e4b0e3170b5a868e"},{"code":"(fn my-interleave [s1 s2]\n  (loop [s1 s1 s2 s2 acc []]\n    (if-not (and (seq s1) (seq s2))\n      acc\n      (recur (rest s1) (rest s2) (conj acc (first s1) (first s2)))\n      )\n    )\n  )","problem":39,"user":"529a73bde4b02ebb4ef75096"},{"problem":39,"code":"(fn iter [coll1 coll2]\n  ((fn inner-iter [coll coll1 coll2]\n    (if (or (empty? coll1) (empty? coll2)) coll \n      (inner-iter (concat coll (cons (first coll1) (cons (first coll2) ()))) (rest coll1) (rest coll2)))\n    ) () coll1 coll2)\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn [list-one list-two]\n  (loop [xs1 list-one xs2 list-two prev ()]\n    (if (or (= () xs1) (= () xs2))\n        prev\n        (recur (rest xs1) (rest xs2) (concat prev [(first xs1) (first xs2)])))))","problem":39,"user":"4e894ff0535d4ef0aa30db99"},{"problem":39,"code":"(fn [l1 l2]\r\n   (reduce #(into %1 %2) (map (fn [arg1 arg2] [arg1 arg2]) l1 l2)))","user":"542b764ae4b0dad94371f28d"},{"problem":39,"code":"(fn magic-loop\n  [stuff1 stuff2]\n  (loop [data1 stuff1\n         data2 stuff2\n         result '()]\n      (if (or (= 0 (count data2)) (= 0 (count data1)))\n        (reverse result)\n        (recur (rest data1)\n               (rest data2)\n               (cons (first data2) (cons (first data1) result))\n               ))))","user":"55c74915e4b0e31453f649cc"},{"problem":39,"code":"#(loop [res [], one %1 two %2]\n   (if (or (empty? one) (empty? two))\n     res\n     (recur (concat res [(first one) (first two)]) (rest one) (rest two))\n   )\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":39,"code":"(fn [seq1 seq2]\n    (loop [restseq1 seq1\n            restseq2 seq2\n            result []]\n        (if (or (empty? restseq1) (empty? restseq2))\n            result\n            (recur (rest restseq1) (rest restseq2) (into result [(first restseq1) (first restseq2)]))\n            \n        )\n    ))","user":"5b274fd1e4b063e2438bcc3b"},{"problem":39,"code":"#(mapcat identity (map list %1 %2))","user":"57642916e4b0994c1922fbee"},{"code":"(fn il [a b] ((fn il2 [a b col] (if (or (empty? a) (empty? b)) (flatten col) (il2 (rest a) (rest b) (conj col (conj [(first a)] [(first b)]))))) a b []))","problem":39,"user":"51dd55dae4b0c33a4e1da404"},{"code":"(fn my-interleave [coll1 coll2]\n  (let [csize (min (count coll1) (count coll2))]\n\t\t(loop [c1 coll1 c2 coll2 sz 0 result []]\n\t\t\t(if (= sz csize)\n\t\t\t\tresult\n\t\t\t\t(recur (rest c1) (rest c2) (inc sz) (conj result (first c1) (first c2)))))))","problem":39,"user":"4e95a440535dbda64a6f6b37"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs ys ys r []]\n    (cond\n     (empty? xs) r\n     (empty? ys) r\n     :else (recur (next xs) (next ys) (conj r (first xs) (first ys))))))","user":"580fbaade4b0f478707a05c0"},{"code":"#(flatten (map (fn [x y] (list x y)) %1 %2))","problem":39,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [a b]\n  (loop [aa a bb b out []]\n    (if (<= (count out) (min (count aa) (count bb)))\n      (recur (next aa) (next bb) (conj out (first aa) (first bb)))\n      (if (and (not= nil (first aa)) (not= nil(first bb))) \n        (conj out (first aa) (first bb))\n        out))))","problem":39,"user":"4f7cbf4ae4b06e829148e1b7"},{"problem":39,"code":"#(mapcat \n  vector %1 %2)","user":"5aa4b961e4b0d174b936c888"},{"problem":39,"code":"(fn [s t]\n   (loop [x []\n          y s\n          z t]\n     (if (or (empty? y) (empty? z))\n       x\n       (recur (conj x (first y) (first z)) (rest y) (rest z)))))","user":"5aba04dce4b073f17744269e"},{"code":"(fn my-int [s1 s2]\n  (loop [i 0 seq1 s1 seq2 s2 retval []]\n    (if (and ( < i (count s1)) ( < i (count s2)))\n      (recur (inc i) (rest seq1) (rest seq2) (conj retval (first seq1) (first seq2)))\n      retval)))","problem":39,"user":"50e448bae4b0463d3207248d"},{"code":";; mapcat list\n\n#(loop [interleaved [] rest1 %1 rest2 %2]\n    (if (not (and (seq rest1) (seq rest2)))\n      interleaved\n      (recur (concat interleaved (map first (list rest1 rest2))) (rest rest1) (rest rest2))))","problem":39,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":39,"code":"(comp flatten map) vector","user":"55b1372de4b002ce9d5cbc2e"},{"code":"(fn intrl [s t] \n    (loop [[s & rs] s,[t & rt] t, acc []]\n    (if (and s t)\n                 (recur rs rt (conj acc s t))\n                 acc\n                 )))","problem":39,"user":"5156e767e4b04360f2428e6b"},{"problem":39,"code":"(comp flatten\n      (partial map list))","user":"5cf115eee4b0aaa82f112a08"},{"code":"(fn intr [c1 c2]\n   (when (and (seq c1) (seq c2))\n     (concat [(first c1) (first c2)]\n           (intr (rest c1) (rest c2))))\n   )","problem":39,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":39,"code":"(fn unite [s1 s2]\n  (loop [ends nil seq1 s1 seq2 s2]\n    (if (or (empty? seq1) (empty? seq2))\n      ends\n      (recur\n       (concat\n        ends \n        (concat \n         (conj nil (first seq1))\n         (conj nil (first seq2))\n        )\n       )\n       (rest seq1)\n       (rest seq2)\n      )\n    )\n  )\n)","user":"56b36283e4b0982f16b37e18"},{"problem":39,"code":"(fn [c1 c2]\n   (loop [coll1 c1\n          coll2 c2\n          result (empty c1)]\n     (if (or (empty? coll1) (empty? coll2))\n       result\n       (recur (rest coll1)\n              (rest coll2)\n              (conj result (first coll1) (first coll2))))))","user":"56372c3ce4b0bfe05bf117d1"},{"code":"(fn i [l m]\n  (if (or (empty? l) (empty? m))\n    []\n    (cons (first l) (cons (first m) (i (rest l) (rest m))))\n  )\n)","problem":39,"user":"4ebbffbd535dfed6da9c6d79"},{"code":"(fn itl [lst1 lst2]\n  (if (and (not (nil? (first lst1))) (not (nil? (first lst2))))\n    (cons (first lst1) (cons (first lst2) (itl (rest lst1) (rest lst2))))\n    []))","problem":39,"user":"5131c922e4b06942423563c9"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [l1 s1\n         l2 s2\n         result []]\n        (if (or (empty? l1) (empty? l2))\n          result\n          (recur (rest l1) (rest l2) (conj result (first l1) (first l2))))))","user":"566a0845e4b04acd4f672e05"},{"problem":39,"code":"(fn [x y]\n  (loop [x1 x\n         y1 y\n         results '()]\n    (if (or (empty? x1) (empty? y1))\n      (reverse results)\n      (recur (rest x1) (rest y1) (cons (first y1) (cons (first x1) results))))))","user":"56b619e7e4b0982f16b37e39"},{"problem":39,"code":"(fn [one two]\n  (let [z (fn [one two result]\n\t  (if (or (empty? one) (empty? two))\n\t\t  result\n\t\t  (let [fone (first one)\n\t\t\t      ftwo (first two)]\n\t\t\t  (recur (rest one) (rest two) (-> result (conj fone) (conj ftwo))))))]\n  (z one two [])))","user":"531dc21be4b08068f379edb1"},{"problem":39,"code":"(fn [sq1 sq2] (loop [acc [] s1 sq1 s2 sq2]\n                (let [h1 (first s1) h2 (first s2)]\n                  (if (or (nil? h1) (nil? h2))\n                    acc\n                    (recur (conj acc h1 h2) (rest s1) (rest s2))))))","user":"58225587e4b04b46fc4b0f94"},{"code":"#(loop [a %1 b %2 c []]\n  (if (or (empty? a) (empty? b))\n    c\n    (recur (rest a) (rest b) (conj c (first a) (first b)))))","problem":39,"user":"50fe91c1e4b03cd852b4e84e"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [i 0\n            seq '()]\n       (if (= i (min (count seq1) (count seq2)))\n         (reverse seq)\n         (recur\n           (inc i)\n           (conj seq (get seq1 i) (get seq2 i))))))","user":"56d3bc2de4b0ea9b8538f7b0"},{"code":"(fn [l1 l2]\n  (flatten (map (fn [a b] [a b]) l1 l2)))","problem":39,"user":"4e568873535d8a8b8723a283"},{"problem":39,"code":"(fn [x y] \n   (flatten (map #(list %1 %2) x y))\n   \n   )","user":"50b25edae4b03ea88043355e"},{"code":"(fn [col1 col2] (flatten (map #(list %1 %2) col1 col2)))","problem":39,"user":"507a08e4e4b08327cd804a67"},{"problem":39,"code":"(fn leave\n  [c1 c2]\n(let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (leave (rest s1) (rest s2)))))))","user":"52b666bfe4b0c58976d9ad44"},{"problem":39,"code":"(fn [f s] (flatten (map #(merge [] %1 %2) f s)))","user":"5b66faa7e4b0c6492753e75a"},{"code":"#(loop [seq1 %1 seq2 %2 acc '()](if (or (empty? seq1)(empty? seq2)) (reverse acc) (recur (rest seq1) (rest seq2) (conj acc (first seq1)(first seq2)))))","problem":39,"user":"4ed2dd98535d44c135fd68e2"},{"problem":39,"code":"(fn\n  [xs ys]\n  (flatten\n   (map (fn [& zs] zs) xs ys)))","user":"558a099de4b0277789237614"},{"code":"(fn intl [a b & s] (println a b s) (if (and (seq a) (seq b)) (intl (rest a) (rest b) (concat s (cons (first a) (list (first b))))   ) (flatten s))  )","problem":39,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"#(loop [s1 %1 s2 %2 r[]] \n  (if (or (empty? s1) (empty? s2)) \n    r \n    (recur (rest s1) (rest s2) (conj r (first s1) (first s2)))))","problem":39,"user":"4eb13d60535d7eef3080733f"},{"problem":39,"code":"(fn [s1 s2] (for [[a b] (map vector s1 s2)\n                  x [a b]]\n             \tx))","user":"4ea03f70535d7eef308072a1"},{"problem":39,"code":"(fn intrlv [a b] (if (and (not-empty a) (not-empty b))\n                   (concat [(first a) (first b)] (intrlv (rest a) (rest b)))\n                   nil))","user":"54f3d6c7e4b050824f58f5cb"},{"problem":39,"code":"(fn weave [x y]\n  (let [s1 (seq x) s2 (seq y)]\n    (when (and (seq? s1) (seq? s2))\n      (cons (first s1) (cons (first s2) (weave (rest s1) (rest s2)))))))","user":"5550b5a0e4b00713264bd9ad"},{"code":"(fn minterleave [c1 c2]\n  (let [s1 (seq c1)\n        s2 (seq c2)]\n    (if (and s1 s2)\n      (cons (first s1) (cons (first s2)\n                             (minterleave (rest s1) (rest s2)))))))","problem":39,"user":"51852961e4b0da5a5be3babb"},{"problem":39,"code":"(fn my-better-interleave\n   [s1 s2]\n   (mapcat list s1 s2))","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn [a b]\n  (flatten\n    (map #(list %1 %2) a b)))","problem":39,"user":"5014754de4b094324338f8e5"},{"code":"(fn func [x y]\n  (apply concat (map list x y))\n)","problem":39,"user":"4ee88f29535d93acb0a66882"},{"code":"(fn [original_set1 original_set2]\r\n  (reverse\r\n    (loop [\r\n        set1 original_set2\r\n        set2 original_set1\r\n        accumulator '()\r\n      ]\r\n      (cond\r\n         (or (empty? set1) (empty? set2)) accumulator\r\n         :else\r\n           (recur (rest set1) (rest set2) (cons (first set1) (cons (first set2) accumulator)))\r\n      )\r\n    )\r\n  )\r\n)","problem":39,"user":"4e1ec17a535d04ed9115e80a"},{"code":"(fn inter [a b] \n  (if (and (seq a) (seq b))\n    (apply list (first a) (first b) (inter (rest a) (rest b)))))","problem":39,"user":"4ec1923f535dfed6da9c6db2"},{"code":"(fn [a b] (loop [ x (min (count a) (count b)) result [] coll1 a coll2 b] (if (== x 0) result (recur (dec x) (conj result (first coll1) (first coll2)) (rest coll1) (rest coll2)))))","problem":39,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":39,"code":"#(loop [x %1\n         y %2\n         acc []]\n    (if (or (= 0 (count x)) (= 0 (count y))) \n      acc\n     (recur (rest x) (rest y) (into acc [(first x) (first y)]))))","user":"5a1149ace4b04bbd27e6da26"},{"code":"#(reduce into (map vector %1 %2))","problem":39,"user":"4e8a460e535d65386fec2109"},{"problem":39,"code":"(fn my_interleave\n  [l1 l2]\n  (loop [list1 l1 list2 l2 interleaved []]\n    (if (or (empty? list1) (empty? list2))\n      interleaved\n      (let [[hd1 & tl1] list1 [hd2 & tl2] list2]\n        (recur tl1 tl2 (conj (conj interleaved hd1) hd2))\n      )\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [col1 col2] (flatten (map vector col1 col2)))","problem":39,"user":"53286389e4b09d4e7a9b5504"},{"problem":39,"code":"(fn [col1 col2]\n  (loop[c1 col1\n        c2 col2\n        result []]\n        (if (or (empty? c1) (empty? c2))\n          result\n          (recur (rest c1) (rest c2) (conj result (first c1) (first c2) )))))","user":"5dbac8ebe4b010eb3c36cd62"},{"code":"(fn [c1 c2]\n  (flatten (map #(concat (conj nil %1) (conj nil %2)) c1 c2)))","problem":39,"user":"50ca2faee4b0a409464667dc"},{"code":"(fn [s1 s2]\n  (loop [c1 s1 c2 s2 result []]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (rest c1) (rest c2) (conj result (first c1) (first c2))))))","problem":39,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn il [sa sb]\n   (loop [r [], a sa, b sb]\n      (if (and (not-empty a) (not-empty b))\n         (recur (conj (conj r (first a)) (first b)) (rest a) (rest b))\n         r\n      )\n   )\n)","problem":39,"user":"52e295fae4b09f7907dd1437"},{"problem":39,"code":"(fn zipper [a b] \n  (lazy-seq \n    (let [s1 (seq a)\n          s2 (seq b)]\n      (when (and s1 s2)\n        (cons (first s1) (cons (first s2) (zipper (rest s1) (rest s2))))))))","user":"55a21be1e4b0acc240e3151e"},{"code":"(fn [a b] \n  (loop [result [] a a b b]\n    (if (and (first a) (first b))\n      (recur (conj result (first a) (first b)) (rest a) (rest b))\n      result)))","problem":39,"user":"5201cf92e4b0b2e020a18f21"},{"code":"(fn [x y]\n  (loop [x x y y result []]\n     (if (or (empty? x) (empty? y))\n       result\n       (recur (rest x) (rest y) (conj result (first x) (first y)))\n       )))","problem":39,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [x y]\n  (loop [x x y y z []]\n    (if (or (empty? x) (empty? y)) z\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))","problem":39,"user":"51b66b31e4b02e5820733406"},{"problem":39,"code":"(fn interl [c1 c2]\n   (let [x (first c1)\n         y (first c2)]\n     (if (and x y)\n       (into [x y] (interl (rest c1) (rest c2)))\n       [])\n   \n     ))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn [x1 y1] (reverse (loop [r '() x x1 y y1]\n              (if (or (empty? x) (empty? y))\n                r\n                (recur (conj r (first x) (first y))\n                       (next x)\n                       (next y))))))","problem":39,"user":"5152020de4b03e678e393ae7"},{"code":"(fn [a b] (flatten (map vector a b)))","problem":39,"user":"4ec3c4a0535dcc7ae8597d5a"},{"code":"(fn s [a b]\n    \n  (when-not (or (empty? a) (empty? b))\n   (concat [(first a) (first b)] (s (rest a) (rest b)) ) \n  )\n)","problem":39,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"code":"(fn [xs1 xs2]    \r\n  (loop [s1 xs1 s2 xs2 result []]\r\n    (if (or (empty? s1) (empty? s2))\r\n      result\r\n      (recur (rest s1) \r\n             (rest s2) \r\n             (conj result (first s1) (first s2))))))","problem":39,"user":"50045388e4b0678c553fc44e"},{"code":"(fn [a b] (flatten (map #(conj (vector %1) %2) a b)))","problem":39,"user":"50112acee4b0d82cfac69f4c"},{"code":"#(mapcat (fn [x y] [x y]) %1 %2)","problem":39,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":39,"code":"(fn interw [s1 s2]\n  (loop [result '()\n         cs1 s1\n         cs2 s2]\n    (if (or (empty? cs1) (empty? cs2))\n      result\n      (recur (concat result (list (first cs1) (first cs2))) (rest cs1) (rest cs2)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":39,"code":"(fn interleave2 [seq1 seq2]\n  (first (reduce (fn[ [accum-interleave subseq2] val ]  \n                   (if (> (count subseq2) 0)\n                   [(conj accum-interleave val (first subseq2)) (rest subseq2)]\n                   [accum-interleave []]))\n   [ [] seq2 ] seq1)))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":39,"code":"(fn [coll1 coll2]\n(apply concat\n  (map #(vector %1 %2) coll1 coll2)))","user":"5167e8ace4b0c5a4140a309a"},{"code":"(fn f [a b] \n  (if (nil? (first a))\n    '()\n    (if (nil? (first b))\n      '()\n      (conj (f (rest a) (rest b)) (first b) (first a)))))","problem":39,"user":"4e71920f535d5021c1a8964e"},{"problem":39,"code":"(fn my-interlive [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (cons (first xs) (cons (first ys) (my-interlive (rest xs) (rest ys))))))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn inter [l1 l2]\n    (cond\n        (empty? l2) '()\n        (empty? l1) '()\n        :else (cons (first l1 ) (cons (first l2) (inter (rest l1) (rest l2))))\n    ))","problem":39,"user":"4fbdcb87e4b081705acca30a"},{"problem":39,"code":"(fn [v1 v2]\n  (letfn [(impl [s1 s2 r]\n                (if (or (empty? s1) (empty? s2))\n                  r\n                  (recur (rest s1) (rest s2) (concat r [(first s1) (first s2)]))))]\n    (impl v1 v2 [])))","user":"5c50048ae4b0f9f7a8770eb9"},{"problem":39,"code":"(fn [xa ya] (\n  \n             let [len (min (count xa) (count ya))]\n\n            \n                          (reduce #(concat %1 [(nth xa %2) (nth ya %2)]) [] (range 0 len))\n             )\n  )","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":39,"code":"(fn my-interleave [one two]\n   (let [length (min (count one) (count two))]\n     (loop [i 0 acc [] theone one thetwo two]\n       (if (< i length)\n         (recur (inc i) (vec (concat acc [(first theone) (first thetwo)])) (rest theone) (rest thetwo))\n         acc\n         )\n       )\n     )\n   )","user":"5cd67eb2e4b0ccb061962943"},{"problem":39,"code":"(fn [left right]\n  (loop [l left r right result []]\n    (if (or (empty? l) (empty? r)) result\n        (recur (rest l) (rest r) (conj result (first l) (first r))\n        \n    ))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"problem":39,"code":"(fn myInter [seq1 seq2]\n   (cond (or (empty? seq1)\n             (empty? seq2)) []\n         :else\n         (flatten (conj [(first seq1) (first seq2)]\n                        (myInter (rest seq1) (rest seq2))))\n         )\n   )","user":"5ee75f8be4b029a2061bbea5"},{"problem":39,"code":"(fn [c1 c2]\n  (flatten\n   (map (fn [col1 col2] (list col1 col2)) c1 c2)))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":39,"code":"(fn [col1 col2]\n  (letfn [(paired [col1 col2]\n                  (map #(vector %1 %2) col1 col2))]\n    (reduce #(concat %1 %2) [] (paired col1 col2))))","user":"53b22df6e4b047364c044497"},{"problem":39,"code":"#(flatten (map list %1 %2))\n\n; mapcat list\n; or\n; mapcat vector","user":"56b295f7e4b0982f16b37e08"},{"code":"(fn [aa bb]\n   (loop [acc []  a aa  b bb] \n    (if-not (and (seq a) (seq b))\n      acc\n      (recur (concat acc [(first a) (first b)]) (rest a) (rest b) )))\n  )","problem":39,"user":"51264447e4b05d10e3e39601"},{"problem":39,"code":"(fn il [a b & [r]]\n      (if (or (empty? a) (empty? b))\n        r\n        (il (rest a) (rest b) (conj (or r []) (first a) (first b)))))","user":"5540fe42e4b0a04f7929950a"},{"code":"#(->> (zipmap %1 %2) (reverse) (flatten))","problem":39,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":39,"code":"(fn il [x y] (if (or (= 0 (count x)) (= 0 (count y))) '() (cons (first x) (cons (first y) (il (rest x) (rest y)) ) ) ) )","user":"563b559ee4b0bfe05bf1180d"},{"problem":39,"code":"#(loop [a %1 b %2 o []]\n   (cond\n    (or (empty? a) (empty? b))\n    o\n    :else\n    (recur (rest a)\n           (rest b)\n           (conj o\n                 (first a)\n                 (first b)))))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":39,"code":"(fn [s1 s2]\n   (reverse\n    (loop [s1 s1\n           s2 s2\n           side :left\n           result '()]\n      (if (and (= side :left)\n               (or (not (seq s1)) (not (seq s2))))\n        result\n        (if (= :left side)\n          (recur (rest s1) s2 :right (cons (first s1) result))\n          (recur s1 (rest s2) :left (cons (first s2) result)))))))","user":"5db35f85e4b010eb3c36cd22"},{"code":"(fn [c1 c2]\n  (flatten\n\t(map (fn [e1 e2] [e1 e2]) c1 c2)))","problem":39,"user":"521af852e4b0c4ef0be8301c"},{"code":"(fn my-inter [c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2) \n                                 (my-inter (rest s1) (rest s2))))))))","problem":39,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn  [al bl]\n  (loop [a al b bl c []]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) (rest b) (conj c  (first a) (first b)))\n    )\n    )\n  )","problem":39,"user":"4f63777be4b0defedf855fe4"},{"code":"(fn i [a b] (if (or (empty? a) (empty? b)) '() (conj (i (next a) (next b)) (first b) (first a))))","problem":39,"user":"50ba5113e4b03e68e4411c7d"},{"code":"#(for [i (range (min (count %) (count %2)))\n       j [0 1]]\n   (get (if (= 0 j) % %2) i))","problem":39,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [x y]\n  (let [size (min (count x)(count y))]\n    (loop [i 0\n           result []]\n      (if (>= i size)\n        result\n        (recur (inc i) (conj result (x i) (y i)))))))","problem":39,"user":"52be0263e4b07a9af579230e"},{"code":"(fn inter [a b] (if (not-empty a) (if (not-empty b) \n                  (concat (list (first a) (first b) )\n                  (inter (rest a) (rest b)) \n                ) ) ) )","problem":39,"user":"4f706cc3e4b07046d9f4eff7"},{"code":"(fn i [a b]\n  (flatten (conj [(first a)]\n    (first b) \n    (if (and (> (count a) 1) (> (count b) 1))\n      (i (rest a) (rest b)) []))))","problem":39,"user":"4fa67030e4b081705acca1b7"},{"code":"#((fn inta [x y ol] (if (and (> (count x) 0) (> (count y) 0)) (inta (rest x) (rest y) (conj ol (first x) (first y))) ol)) %1 %2 [])","problem":39,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [x y]\n  (loop [a x b y l []]\n    (if (not (and (seq a) (seq b)))\n      l\n      (recur \n        (rest a) \n        (rest b) \n        (conj l (first a) (first b))))))","problem":39,"user":"4f072644535dcb61093f6c20"},{"problem":39,"code":"(fn inter\n  [res coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    res\n    (inter (conj res (first coll1) (first coll2)) (rest coll1) (rest coll2))\n  )) []","user":"5dc318cde4b02f700ae81835"},{"code":"(fn [a b]\n  (loop [r [] a a b b]\n    (if (not (or (empty? a) (empty? b)))\n        (recur\n          (conj r (first a) (first b))\n          (rest a)\n          (rest b))\n        r)))","problem":39,"user":"50657775e4b0deb876850599"},{"problem":39,"code":"#(reduce into (map (partial conj []) %1 %2))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":39,"code":"(fn inl [a b]\n  (let [x (first a)\n        y (first b)]\n    \n    (if-not (and x y)\n      '()\n      (-> (inl (rest a) (rest b)) (conj y) (conj x)))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":39,"code":"#(apply concat\n        (map list %1 %2))","user":"55d2dd27e4b0e31453f64a5b"},{"code":"#(loop[a % b %2 res []]\r\n     (if (or (nil? a)(nil? b))\r\n       res\r\n       (recur (next a)(next b)(conj res (first a)(first b)))))","problem":39,"user":"4ee6166e535d93acb0a66854"},{"problem":39,"code":"(fn [a b]\n   (mapcat #(vector %1 %2) a b))","user":"55c423e1e4b0e31453f64994"},{"code":"mapcat #(vec [% %2])","problem":39,"user":"4e9e0640535dbda64a6f6b91"},{"problem":39,"code":"(fn ii [[x & xs] [y & ys]]\n  (if (or (nil? x) (nil? y))\n    []\n    (concat [x y] (ii xs ys))))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn zip [c1 c2] (let [s1 (seq c1) s2 (seq c2)] (when (and s1 s2) (cons (first s1) (cons (first s2) (zip (rest s1) (rest s2)))))))","problem":39,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn il [a b] (if (or (= a [])(= b [])) \r\n  []\r\n  (cons (first a) (cons (first b) (il (rest a) (rest b))))\r\n\r\n\r\n\r\n))","problem":39,"user":"502c8681e4b0532a782a5e35"},{"problem":39,"code":"(fn [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         result '()]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) (rest s2) (concat result (list (first s1) (first s2)))))))","user":"53e0001be4b0d874e779ae48"},{"code":"#(mapcat (fn [& args] (seq args)) % %2)","problem":39,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":39,"code":"(fn intrlv\n  [c1 c2]\n  (let [s1 (seq c1)\n        s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                \t\t\t\t (intrlv (rest s1) (rest s2)))))))","user":"542d5fa9e4b0dad94371f2b5"},{"code":"(fn [x y]\n  (loop [c1 x\n         c2 y\n         ret '()]\n    (if (or (empty? c1) (empty? c2))\n      (reverse ret)\n      (recur (rest c1) (rest c2) (conj ret (first c1) (first c2))))))","problem":39,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":39,"code":"(fn [& args] (apply concat (apply #(map vector %1 %2) args)))","user":"56877fcbe4b0dcc4269f405e"},{"code":"(fn [cl1 cl2]\n  (loop [cl1 cl1 cl2 cl2 accum []]\n    (if (or (empty? cl1) (empty? cl2))\n      accum\n      (recur (rest cl1) (rest cl2) (concat accum (take 1 cl1) (take 1 cl2) ))\n    )\n  )\n)","problem":39,"user":"51db9e1ee4b0e067a9bbadc9"},{"problem":39,"code":"(fn inter [l₁ l₂]\n   (cond\n     (empty? l₁) '()\n     (empty? l₂) '()\n     :else\n     (cons (first l₁)\n           (cons (first l₂)\n                 (inter (rest l₁) (rest l₂))))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":39,"code":"#(-> (map (fn [e1 e2] [e1 e2]) %1 %2)\n     flatten)","user":"55f48d1be4b06e875b46ce7b"},{"problem":39,"code":"(fn myinterleave\n [myseq1 myseq2]\n  (flatten (map vector myseq1 myseq2))\n)","user":"53fe459ae4b0de5c418485f4"},{"problem":39,"code":"(fn interleaver\n ([s1 s2] (interleaver s1 s2 []))\n ([s1 s2 ret]\n (if (and (pos? (count s1)) (pos? (count s2)))\n   (interleaver (rest s1) (rest s2) (conj (conj ret (first s1)) (first s2)))\n   ret)))","user":"60b7ef35e4b0e0fa5f1b4254"},{"problem":39,"code":"(fn [xs ys] (mapcat #(vector % %2) xs ys))","user":"5e2549c8e4b05b4b0151615f"},{"problem":39,"code":"#(loop [sq1 %1 sq2 %2 inl []]\n   (if (or (empty? sq1) (empty? sq2))\n     inl\n     (recur (rest sq1) (rest sq2) (conj inl (first sq1) (first sq2)))\n  )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":39,"code":"(fn [xs ys]\n (loop [acc []\n        bs xs\n        cs ys]\n  (if (or (empty? bs) (empty? cs))\n   acc\n   (recur\n    (conj\n     (conj acc (first bs))\n     (first cs))\n    (rest bs)\n    (rest cs)))))","user":"55381162e4b09218d5f44fda"},{"problem":39,"code":"(fn [list1 list2] (reverse (loop [list1 list1 list2 list2 ret '()]\n  (if(and (> (count list1) 0) (> (count list2) 0))\n  (recur (rest list1) (rest list2) (conj (conj ret (first list1)) (first list2)))\n  ret)\n)))","user":"5726adf8e4b0c5bde472c12b"},{"code":"(fn my-zipper [a b]\n  (mapcat list a b))","problem":39,"user":"50812debe4b01a93d3f38e4c"},{"problem":39,"code":"(fn inter [l1 l2] (if (or (empty? l1) (empty? l2)) '()\n                    (cons (first l1) (cons (first l2) (inter (rest l1) (rest l2))))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"code":"(fn interleavej [s1 s2]\n  (cond \n    (or (empty? s1) (empty? s2)) '()\n    :else\n      (concat\n        (map first [s1 s2])\n        (interleavej (rest s1) (rest s2)))))","problem":39,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn [seq1 seq2]\n\t\t(flatten\n\t\t\t(map (fn [x y]\n\t\t\t\t(list x y)) seq1 seq2)))","problem":39,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn [lst-a lst-b]\n    (mapcat #(list (lst-a %1) (lst-b %1))\n            (range 0 (reduce min (list (count lst-a) (count lst-b))))))","problem":39,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"#(loop [a %1 b %2 res '()]\n  (if (or (= '() a) (= '() b))\n    (reverse res)\n    (recur\n      (rest a)\n      (rest b)\n      (conj (conj res (first a)) (first b)))))","problem":39,"user":"4f04d312535dcb61093f6be7"},{"problem":39,"code":"(fn [a b] (mapcat (fn [x] x) (map (fn [x y] [x y]) a b)))","user":"5dd90651e4b0948ae9d9ad97"},{"problem":39,"code":"(fn [x y] (loop [x x y y v []]\n            (if (or (empty? x) (empty? y)) v (recur (rest x) (rest y) (conj v (first x) (first y))))))","user":"51dfb9e2e4b01188f0627531"},{"problem":39,"code":"#(flatten (map vector  %1 %2))","user":"57de9169e4b0bd073c202454"},{"problem":39,"code":"#(apply vector (flatten (map list %1 %2)))","user":"533cebf1e4b085b17e897d78"},{"problem":39,"code":"#(flatten (map (fn [k v] \n                 (cons () [k v]))\n               %1 %2))","user":"5ffc18cae4b074f607df65f1"},{"code":"(fn [as bs] (flatten (map list as bs)))","problem":39,"user":"52d3f666e4b09f7907dd1327"},{"problem":39,"code":"(fn [a b]\n  (let [sol \n        (for [x a, y b\n              :when (= (.indexOf a x) (.indexOf b y))]\n          [x y])]\n    (apply concat sol)))","user":"5a1bec89e4b0ff51aa4b322f"},{"problem":39,"code":"(fn il [s1 s2]\n  (if (or (empty? s1) (empty? s2)) nil\n  (conj (il (rest s1) (rest s2)) (first s2) (first s1))))","user":"5658acabe4b0f9d632dd84b7"},{"problem":39,"code":"(fn fred [a b] (if (or (= a []) (= b [])) [] (concat (vector (first a) (first b)) (fred (rest a) (rest b))) ))","user":"505006d7e4b0a02f9cffdeaf"},{"problem":39,"code":"#(reduce\n    (fn [x y] (concat x [(nth % y) (nth %2 y)])) []\n    (take\n      (min (count %) (count %2)) (range)))","user":"55092319e4b06e50f9beb113"},{"problem":39,"code":"(fn [xs ys]\n  (reduce #(concat %1 %2)\n          (map #(list %1 %2) xs ys)))","user":"54ca35c6e4b057c6fda3a254"},{"problem":39,"code":"(fn INTERLEAVE [LIST1 LIST2]\n  (if (and (not-empty LIST1) (not-empty LIST2))\n    (concat\n      [(first LIST1) , (first LIST2)]  (INTERLEAVE (rest LIST1) (rest LIST2)))\n    []\n    )\n  )","user":"5aa11b37e4b0d174b936c840"},{"problem":39,"code":"(fn interleave2 [s1 s2]\n    (loop [ c1 s1\n          , c2 s2\n          , out []]\n      (if (or (empty? c1) (empty? c2))\n        out\n        (recur \n          (rest c1) \n          (rest c2)\n          (conj out (first c1) (first c2) )\n        )\n      )\n    )\n\n  )","user":"571aae1fe4b07c98581c3b5a"},{"problem":39,"code":"#(flatten (map (fn [f s]\n                      (conj '() s f\n                            ))\n                    %1 %2))","user":"5410499de4b01498b1a719a6"},{"problem":39,"code":"(fn [x y]\n  ((fn iter [a b liste]\n    (if (or (empty? b) (empty? a)) \n     liste\n     (recur (drop 1 a) (drop 1 b) (conj (conj liste (first a)) (first b))))) x y []))","user":"5b2238d1e4b03cfeda66ed5e"},{"code":"(fn z [x y] \n  (if (not (or (empty? x) (empty? y)))\n    (remove nil? (flatten (conj (list (z (rest x) (rest y))) (list (first y)) (list (first x)))))))","problem":39,"user":"507ef25ce4b0f753b6f9788e"},{"code":";; yikebocai's solution to Interleave Two Seqs\n;; https://4clojure.com/problem/39\n\n(fn [s1 s2] \n  (let [f1 (count s1) \n        f2 (count s2) \n        m (min f1 f2)] \n    (loop [s [] i 0] \n      (if (< i m) \n        (recur \n         (conj (conj s (nth s1 i)) (nth s2 i) )\n         (inc i))\n        s))))","problem":39,"user":"5022292ee4b0846bc458ae46"},{"problem":39,"code":"(fn [x y]\n  (loop [a x b y c []]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) (rest b) (conj c (first a) (first b)))\n    )\n  )\n)","user":"53765e1ae4b06839e8705e23"},{"problem":39,"code":"(fn [a b] \n  (let [cnt (if (> (count a) (count b)) (count b) (count a))] \n    (flatten (for [x (range 0 cnt)] [(nth a x) (nth b x)]))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":39,"code":"(fn merge [coll1 coll2]\n   (if (not (empty? coll1))\n     (if (not (empty? coll2))\n       (concat (conj (conj [] (first coll1)) (first coll2)) (merge (rest coll1) (rest coll2))))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn newinterleave [x y]\n     \"Interleaves two sequences x and y. Output is only as long as the shorter of the two.\"\n  (if (and (seq x) (seq y))\n    (list* (first x) (first y) (newinterleave (rest x) (rest y)))\n    (empty x)))","problem":39,"user":"532727bae4b09d4e7a9b54fa"},{"problem":39,"code":"(fn [as bs]  \n    (mapcat vector as bs))","user":"5457583ee4b01be26fd7460a"},{"problem":39,"code":"(fn inter [x y] (if (or (empty? x) (empty? y)) () (concat (list (first x)) (list (first y)) (inter (rest x) (rest y)))))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn [c1 c2]\n  (let [s1 (seq c1)\n        s2 (seq c2)\n        iner (fn [x y acc] \n          (if (or (empty? x) (empty? y)) \n            acc \n            (recur (rest x) (rest y) (concat acc [(first x)] [(first y)]))))]\n  (iner s1 s2 '())))","problem":39,"user":"4ed60c9c535d10e5ff6f52dd"},{"problem":39,"code":"(fn [s1 s2] \n  (mapcat list s1 s2)\n  )","user":"5c408a61e4b08cd430848eb2"},{"problem":39,"code":"(fn [asi bsi] (loop [[a & as] asi [b & bs] bsi list []] (if (or (nil? a) (nil? b)) list (recur as bs (conj list a b)))))","user":"555c38d9e4b0b056612e2249"},{"code":"(fn [l1 l2] (apply concat (map list l1 l2)))","problem":39,"user":"4ddc1c89535d02782fcbea01"},{"problem":39,"code":"(fn [x y] (reduce concat (map (fn [x y] [x y]) x y)))","user":"548a3dc6e4b0e286459a11f2"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [s [] i 0]\n    (if (< i (min (count s1) (count s2)))\n      (recur (conj s (nth s1 i nil) (nth s2 i nil)) (inc i))\n      (filter (fn [n] (not (nil? n))) s)\n    )\n  )\n)","user":"554b975ae4b0a04f79299592"},{"problem":39,"code":"(fn [s1 s2]\n   ((fn [s1 s2 acc]\n      (if (or (empty? s1) (empty? s2))\n        acc\n        (recur (rest s1)\n               (rest s2)\n               (conj acc (first s1) (first s2)))))\n    s1 s2 []))","user":"5452a300e4b0e397800069c7"},{"problem":39,"code":"(fn [a b]\n  (reduce concat (for [x (range (min (count a) (count b)))]\n    [(nth a x) (nth b x)])))","user":"5a3bcdc9e4b001c08efc0cd9"},{"problem":39,"code":"(fn interleave' [a b]\n  (if (or (empty? a) (empty? b))\n    []\n    (concat [(first a) (first b)] (interleave' (rest a) (rest b)))))","user":"53d612cbe4b0e771c3025452"},{"problem":39,"code":"#(loop [i 0 res []]\n   (if (or (nil? (nth %1 i nil)) (nil? (nth %2 i nil)))\n     res\n     (recur (inc i) (conj res (nth %1 i) (nth %2 i)))))","user":"57cc5a79e4b0c746388ab87d"},{"code":"#((fn [x y z] (cond\n  (or (empty? x) (empty? y)),z\n  :else (recur (rest x) (rest y) (concat z (list (first x) (first y))))\n)) % %2 (empty %))","problem":39,"user":"4eebfd03535d93acb0a668ab"},{"code":"(fn [left right]\n  (loop [x (first left)\n         xs (rest left)\n         y (first right)\n         ys (rest right)\n         results ()]\n    (let [nxt (concat results (list x y))]\n    \t(if (or (= (count xs) 0) (= (count ys) 0))\n      \t\tnxt\n      \t\t(recur (first xs) (rest xs) (first ys) (rest ys) nxt)))))","problem":39,"user":"519b231ee4b0ac1b7dced6a2"},{"code":"(fn ! [x y] \n  (if (or (empty? x) (empty? y))\n    []\n\t(into [(first x) (first y)] (! (rest x) (rest y)))\n  )\n)","problem":39,"user":"532e2e58e4b019098a6f8b47"},{"code":"mapcat #(conj [] % %2)","problem":39,"user":"4f062d4a535dcb61093f6c08"},{"code":"(fn [xs ys]\r\n   (loop [xs xs ys ys acc []]\r\n     (if-not (or (empty? xs)\r\n                 (empty? ys))\r\n       (let [x (first xs)\r\n             y (first ys)]\r\n         (recur (rest xs) (rest ys)\r\n                (conj acc x y)))\r\n        acc)))","problem":39,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [coll1 coll2]\n  (reduce concat (map #(list %1 %2) coll1 coll2))\n)","problem":39,"user":"504d0116e4b022602c20b089"},{"problem":39,"code":"(fn [coll1 coll2]\n   ((fn iter-iter [c1 c2 acc]\n     (cond (or (empty? c1)\n               (empty? c2)) acc\n           :else (iter-iter\n                  (rest c1)\n                  (rest c2)\n                  (conj acc\n                        (first c1)\n                        (first c2)))))\n    coll1 coll2 []))","user":"5fb544f6e4b08cb800c85b4e"},{"code":"(fn myfn [ls1 ls2]\n            (cond (or (empty? ls1) (empty? ls2)) []\n                  :else (concat (list (first ls1) (first ls2)) (myfn (rest ls1) (rest ls2)))))","problem":39,"user":"4feb055ae4b0140c20fb9c14"},{"problem":39,"code":"(fn [& seqs]\n    (let [min-length ((fn [seqs]\n                        (apply min (map count seqs)))\n                      seqs)]\n      (loop [i 0 \n             result []] \n        (if (= i min-length) \n          result\n          (recur\n            (inc i) \n            (let [new ((fn [n seqs]\n                         (map  #(nth % n) seqs))\n                       i seqs)]\n              (concat result new)\n              ))))))","user":"5885bea8e4b0f1effa3b76bf"},{"code":"(fn -interleave [x y]\n  (let [exit (count x)]\n    (flatten\n     (for [i (range exit)\n           :when (<= i (-> y count dec))]\n       [(nth x i) (nth y i)]))))","problem":39,"user":"4f601623e4b0defedf855fa3"},{"problem":39,"code":"(fn zip [xs ys]\n   (let [n (count ys)]\n     (apply concat\n            (map-indexed\n             (fn [i x] (if (< i n) [x (nth ys i)] nil))\n             xs))))","user":"5b073c34e4b0cc2b61a3bda4"},{"code":"(fn f [& s]\n  (apply concat\n    (apply map (cons list s))))","problem":39,"user":"4facd2fae4b081705acca22f"},{"code":"(comp (partial reduce #(apply concat %&)) (partial map list))","problem":39,"user":"4ece7617535d23f03622770c"},{"problem":39,"code":"(fn inter [c1 c2]\n  (lazy-seq\n   (let [s1 (seq c1)\n         s2 (seq c2)]\n\t  (when (and s1 s2)\n    \t(cons (first s1) (cons (first s2) (inter (rest s1) (rest s2))))))))","user":"58f3c18ee4b0438e51c2cead"},{"code":"(fn ntrlv [xs ys]                                                                                                \n            (loop [xs-rem xs                                                                                             \n               ys-rem ys                                                                                                 \n               acc []]                                                                                                   \n               (if (or (empty? xs-rem) (empty? ys-rem)) acc                                                              \n                   (recur (rest xs-rem) (rest ys-rem) (conj acc (first xs-rem) (first ys-rem))))))","problem":39,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":39,"code":"(fn ileave [vec1 vec2]\n  (if (or (nil? (first vec1)) (nil? (first vec2)))\n  \tnil\n    (let [single [(first vec1) (first vec2)]]\n      (if (and (> (count vec1) 1) (> (count vec2) 1))\n        (apply conj single (ileave (rest vec1) (rest vec2)))\n        single\n      )\n    )\n  )\n)","user":"58669dd0e4b0f14aab7c8867"},{"problem":39,"code":"(fn [x y] (loop [x x y y out []] (if (or (empty? x) (empty? y)) out (recur (rest x) (rest y) (conj out (first x) (first y))))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [xs ys]\n  (loop [xs xs ys ys res '()]\n    (if (or (nil? xs) (nil? ys))\n      res\n      (let [x (first xs) y (first ys)]\n        (recur (next xs) (next ys) (concat res (list x y)))))))","problem":39,"user":"52990271e4b02ebb4ef7506d"},{"problem":39,"code":"(fn foo [a b]\n  (if (and (seq a) (seq b))\n    (list* (first a) (first b) (lazy-seq (foo (rest a) (rest b))))\n    [] ))","user":"5c34f7efe4b0d62ef62d9f5b"},{"problem":39,"code":"(fn interleaf [x y] \n      (loop [a (rest x) b (rest y)  z (list (first y) (first x))]\n       (cond\n        (empty? a) (reverse z)\n        (empty? b) (reverse z)\n        true (recur (rest a) (rest b) (conj z (first a) (first b))))))","user":"5695b86de4b0dcc4269f412b"},{"code":"#(apply (partial mapcat list) %&)","problem":39,"user":"51f2b8f1e4b0210f90e74556"},{"problem":39,"code":"#(flatten (reverse (apply list (zipmap %1 %2))))","user":"540479e7e4b0addc1aec665a"},{"problem":39,"code":"(fn [list1 list2]\n    (letfn [(_inter [list1 list2 acc]\n                (if (or (empty? list1) (empty? list2))\n                    acc\n                    (_inter\n                        (rest list1)\n                        (rest list2)\n                        (cons acc (map first [list1 list2])))\n                    ))]\n       (flatten (_inter list1 list2 '()))))","user":"57168a0de4b07c98581c3afb"},{"code":"(fn [sq1 sq2]\n  (loop [src1 sq1, src2 sq2, dest []]\n    (if (and (seq src1) (seq src2))\n      (recur\n        (rest src1)\n        (rest src2)\n        (conj dest (first src1) (first src2)))\n       dest)))","problem":39,"user":"4daf8e61edd6309eace4d179"},{"problem":39,"code":"(fn my-interleave\n  [coll-a coll-b]\n  (loop [a coll-a\n         b coll-b\n         res []]\n    (if (or (empty? a) (empty? b))\n      res\n      (recur (rest a) (rest b) (conj res (first a) (first b))))))","user":"54f39cd6e4b050824f58f5c6"},{"code":"(fn i [a b]\n  (if (or (empty? a) (empty? b)) []\n       (cons (first a) \n        (cons (first b) \n          (i (rest a) (rest b))))))","problem":39,"user":"4e83bb61535db62dc21a62dd"},{"code":"(fn [a b] (loop [a a\n                 b b\n                 acc '()]\n                 (if\n                  (or (empty? a) (empty? b)) acc\n                  (recur (rest a) (rest b) (concat acc (list (first a) (first b)))))))","problem":39,"user":"52394c03e4b0d705d026ef09"},{"problem":39,"code":"(fn [a b]\n  ((fn f [x]\n    (mapcat #(if (coll? %)\n                  (f %)\n                  [%])\n              x))\n    (mapv vector a b)))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn f [a b]\n   (if (or (empty? a) (empty? b))\n     '()\n     (concat (-> a first list) (-> b first list) (f (rest a) (rest b)))))","problem":39,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":39,"code":"(fn [seq1 seq2] \n  (reduce concat (map vector seq1 seq2)))","user":"59fa7fb0e4b0ca45a743a366"},{"code":"(fn inter [s1 s2]\n  (reduce (fn [y1 y2] (concat y1 y2))\n    (map (fn [x1 x2] (conj [] x1 x2)) s1 s2)))","problem":39,"user":"525cc6c4e4b0cb4875a45d47"},{"problem":39,"code":"(fn my-interleave [col1 col2]\n   (when (and (not-empty col1) (not-empty col2))\n     (conj (my-interleave (rest col1) (rest col2)) (first col2) (first col1))))","user":"5db98f39e4b010eb3c36cd53"},{"code":"(fn [a b]\n   ((fn [acc a b]\n     (if (or (empty? a) (empty? b))\n       acc\n       (recur (conj (conj acc (first a)) (first b))\n              (rest a)\n              (rest b)))) [] a b))","problem":39,"user":"517b9c82e4b0e963dd819c99"},{"problem":39,"code":"(fn my-interleave [a b]\n  (when-first [left a]\n    (when-first [right b]\n      (lazy-seq (cons left (cons right (my-interleave (rest a) (rest b))))))))","user":"6062e1bde4b03746e80ebf75"},{"problem":39,"code":"#(flatten (mapv list %1 %2))","user":"56f15eade4b04a395b9a048e"},{"problem":39,"code":"(fn zip [xs ys]\n  (lazy-seq\n   (let [xs' (seq xs)\n         ys' (seq ys)]\n     (when (and xs' ys')\n       (cons (first xs') (cons (first ys') (zip (rest xs') (rest ys'))))))))","user":"5069d8c5e4b01dc6af13f838"},{"code":"(fn [s t]\n  (loop [s_ s t_ t ret '()]\n    (if (and s_ t_)\n      (recur \n        (next s_) \n        (next t_) \n        (conj ret (first s_) (first t_)))\n      (into '() ret))))","problem":39,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn seq-inter [x y]\n                           (if (or (empty? x) (empty? y))\n                             '()\n                             (cons\n                              (first x)\n                              (cons\n                               (first y)\n                               (seq-inter (rest x) (rest y))))))","problem":39,"user":"503b6995e4b07a1917cc34dd"},{"problem":39,"code":"(fn [xs ys]\n  (loop [xs xs ys ys out []]\n    (if (some empty? [xs ys])\n      out\n      (recur (rest xs) (rest ys) (conj out (first xs) (first ys))))))","user":"57839ae9e4b0ebec4cfb74b8"},{"code":"(fn inter [as bs]\n  (if (or (empty? as) (empty? bs))\n     '()\n     (cons (first as) (cons (first bs) (inter (rest as) (rest bs))))))","problem":39,"user":"4f04d011535dcb61093f6be5"},{"code":"(fn inter [coll1 coll2]\n  (mapcat list coll1 coll2))","problem":39,"user":"53834ed3e4b06839e8705edb"},{"problem":39,"code":"(fn [s1 s2] (apply concat (map list s1 s2))) ;; better with (mapcat vector ___ ) (grrrrrrr)","user":"59c76402e4b0a024fb6ae542"},{"problem":39,"code":"(comp flatten #(apply map vector %&))","user":"608910a8e4b0ae75613dceed"},{"problem":39,"code":"(fn minterleave [l r]\n  (loop [left l right r result []]\n    (if (or (empty? left) (empty? right))\n      result\n      (recur (rest left) (rest right) (conj result (first left) (first right)))\n      )\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":39,"code":"(fn myinterleave [sq1 sq2]\n  (loop [out []\n         s1 sq1\n         s2 sq2]\n    (if (and (seq s1) (seq s2))\n      (recur (conj out (first s1) (first s2)) (rest s1) (rest s2))\n      out\n      ))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":39,"code":"(fn\n  [a b]\n  (loop [res \t[]\n         a \t\ta\n         b \t\tb]\n    (if (or (empty? a) (empty? b))\n      (seq res)\n      (let [fa (first a)\n            fb (first b)\n            ra (rest a)\n            rb (rest b)]\n        (recur (conj res fa fb) ra rb)))))","user":"55ee84c0e4b0121d4835fdf0"},{"problem":39,"code":"; I'm in awe of _pcl's solution: mapcat list.  \n(fn [v1 v2]\n              (flatten (for [x (range (min (count v1) (count v2)))] [(get v1 x) (get v2 x)])) )","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [xss yss]\n  (loop [acc [] [x & xs] xss [y & ys] yss]\n    (if (or (empty? xs) (empty? ys))\n      (conj acc x y)\n      (recur (conj acc x y) xs ys))))","problem":39,"user":"4e9fd521535d7eef3080729a"},{"problem":39,"code":"(fn [& ss]\n  (apply mapcat list ss))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":39,"code":"(fn interleave' [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    ()\n    (let \n     [[x & xs'] xs, \n      [y & ys'] ys]\n      (conj (interleave' xs' ys') y x)\n      )))","user":"5a08f951e4b01bb0ae8afdfd"},{"code":"(partial (fn [d s1 s2]\n  (if-not (or (empty? s1) (empty? s2))\n    (recur (conj \n            (conj d (first s1))\n            (first s2))\n           (rest s1)\n           (rest s2))\n    d)) [])","problem":39,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn [x y]\n  (loop [res [] a x b y]\n    (if (nil? (first a)) res\n      (if (nil? (first b)) res\n        (recur (conj (conj res (first a)) (first b)) (rest a) (rest b))))))","problem":39,"user":"5031eb3be4b000fc67a99a84"},{"code":"(partial mapcat list)","problem":39,"user":"4daef21cedd6309eace4d169"},{"code":"(fn f[coll-a coll-b]\n  (if (or (empty? coll-a)\n          (empty? coll-b))\n      nil\n      (concat (list (first coll-a) (first coll-b))\n              (f (rest coll-a) (rest coll-b)))))","problem":39,"user":"4e53bf5e535d8a8b8723a275"},{"code":"(fn [& xss]\n           (loop [acc [] coll xss]\n             (if (not-any? empty? coll)\n               (recur (into acc (map first coll)) (map rest coll))\n               acc)))","problem":39,"user":"4edee6a2535d10e5ff6f533e"},{"code":"(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 result []]\n    (if (or (empty? c1) (empty? c2)) result\n      (recur (rest c1) (rest c2) (conj (conj result (first c1)) (first c2))))))","problem":39,"user":"50621cbde4b0341461c88951"},{"code":"(fn [x y]\n  (apply concat\n  (loop [a x b y coll []]\n\t(if (or (empty? a)\n\t        (empty? b))\n\t   coll\n\t  (recur (subvec a 1) (subvec b 1) (conj coll [(first a) (first b)]))))))","problem":39,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"code":"(fn [lista1 lista2]\n    (letfn [\n            (mezclar [lista1 lista2 lista3 bandera]\n                     (\n                      cond\n                          (and (empty? lista1) bandera) (reverse lista3)\n                          (empty? lista2) (reverse lista3)\n                          bandera (mezclar (rest lista1) lista2 (cons (first lista1) lista3 ) (not bandera))\n                          :default (mezclar lista1 (rest lista2) (cons (first lista2) lista3 ) (not bandera))\n                       )\n              )\n           ]\n           (mezclar lista1 lista2 '() true)\n\n\n      )\n\n  )","problem":39,"user":"5058afbbe4b06522596eba81"},{"problem":39,"code":"(fn tepmf [l1 l2]\n  (loop [n1 l1\n         n2 l2\n         ret []]\n\t  (if (or (empty? n1)\n    \t      (empty? n2))\n    \tret\n        (recur (rest n1) (rest n2) (conj ret (first n1) (first n2))))))","user":"5883584ae4b0f1effa3b7674"},{"code":"(fn foo [c1 c2]\n  (if (not-any? empty? (list c1 c2))\n    (concat (list (first c1) (first c2)) (foo (rest c1) (rest c2)))\n    ()))","problem":39,"user":"51e595a6e4b0efabf93c02d8"},{"problem":39,"code":"(fn my-interleave [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '()\n    (conj (my-interleave (rest xs) (rest ys)) (first ys) (first xs))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn inter [s c]\n \n  (loop [r [] s1 (seq s) s2 (seq c)]\n    (if (and s1 s2)\n        (recur (conj r (first s1) (first s2)) (next s1) (next s2))\n        r  \n    )\n)\n)","problem":39,"user":"4e70c0b1535d5021c1a89640"},{"problem":39,"code":"(fn zip [a b]\n    (if (or (empty? a) (empty? b))\n      ()\n      (conj (zip (rest a) (rest b)) (first b) (first a))))","user":"5d8b4960e4b0915913b1d3d3"},{"code":"(fn leave [acc xs ys]\n  (if \n    (or \n     (= 0 (count xs))\n     (= 0 (count ys)))\n    acc\n    (leave \n     (conj \n      (conj acc (first xs))\n      (first ys))\n     (rest xs)\n     (rest ys))))\n[]","problem":39,"user":"517adc6ce4b0925c997201c4"},{"problem":39,"code":"(fn il [l1 l2] (if (empty? l1) () (if (empty? l2) () (concat [(first l1) (first l2)] (il (rest l1) (rest l2))))))","user":"55a59ebae4b0acc240e3154d"},{"code":"(fn [& colls] \n    ((fn zip [x] (if (every? not-empty x) \n                    (concat (map first x) (zip (map rest x))) \n                    '() )) colls))","problem":39,"user":"50d04a92e4b00b15ecee975a"},{"code":"#(loop [x %1 y %2 n []]\n   (if (or (empty? (rest x)) (empty? (rest y)))\n     (conj n (first x) (first y))\n     (recur (rest x) (rest y) (conj n (first x) (first y)))))","problem":39,"user":"5356dcbee4b04ce2eb3ed270"},{"code":"#(letfn [(my-interleave\n                                [s1 s2]\n                                (let\n                                  [h1 (first s1) h2 (first s2)]\n                                  (if (and h1 h2)\n                                    (cons h1 (cons h2 (lazy-seq (my-interleave (rest s1) (rest s2)))))\n                                    [])))] (my-interleave %1 %2))","problem":39,"user":"51fb9d30e4b0f1313d468a0f"},{"problem":39,"code":"(fn [xs ys]\n  \t(loop [fin [] xs xs ys ys]\n      \t(if (or (empty? xs) (empty? ys))\n          fin\n          (recur (conj fin (first xs) (first ys)) (rest xs) (rest ys)))))","user":"5821dbb9e4b04b46fc4b0f86"},{"code":"(fn foo\n  [xs ys]\n  (lazy-seq\n    (let [s1 (seq xs) s2 (seq ys)]\n      (when (and s1 s2)\n        (cons (first s1)\n              (cons (first s2)\n                    (foo (rest s1) (rest s2))))))))","problem":39,"user":"51d8f711e4b02ceefd947748"},{"problem":39,"code":"(fn [a b]\n  (take (* 2 (if (< (count a) (count b)) (count a) (count b))) \n    (loop [cnt 0 a_p a b_p b ret []]\n      (let [active (even? cnt)]\n        (if (or (empty? (if active a_p b_p)))\n          ret\n          (recur\n            (inc cnt)\n            (if active (rest a_p) a_p)\n            (if active b_p (rest b_p))\n            (conj ret (first (if active a_p b_p)))))))))","user":"57b35a19e4b0fbc9809a277d"},{"code":"(fn[in-a in-b]\n  (loop [result [] a in-a b in-b]\n    (if(or (empty? a)(empty? b))\n      (reverse result)\n    \t(recur (cons (first b)(cons (first a) result))(rest a)(rest b))\n      )))","problem":39,"user":"4ef87ea7535dced4c769f25f"},{"code":"(fn il [s1 s2]\n  (when (and s1 s2)\n    (cons (first s1) \n      (cons (first s2) (il (next s1) (next s2))))))","problem":39,"user":"5007f751e4b0b17c647f522b"},{"problem":39,"code":"#(loop [ret [] current %1 orginal %2]\n    (if (empty? current)\n      ret\n      (recur\n        (if-not (nil? (first orginal))\n          (conj ret (first current) (first orginal))\n          ret)\n        (rest current)\n        (rest orginal))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [x y]\n  (loop [a x b y result []]\n    (if (and (first a) (first b))\n      (recur (rest a) (rest b) (conj result (first a)  (first b)))\n      result)))","problem":39,"user":"4eb0afed535d7eef3080733e"},{"problem":39,"code":"(fn my-interleave\n  [coll1 coll2]\n  (flatten (take (min (count coll1) (count coll2)) (map list coll1 coll2))))","user":"54091b82e4b0addc1aec66d5"},{"problem":39,"code":"(fn [& args]\n   (apply (partial mapcat (fn [& args] args)) args))","user":"55b54ecbe4b01b9910ae2987"},{"problem":39,"code":"(fn myinterleave [l1 l2]\n  (cond\n   (or (= [] l1) (= [] l2)) '()\n   :else\n   (conj (myinterleave (rest l1) (rest l2)) (first l2) (first l1))))","user":"602049b8e4b0bf4ca6b10961"},{"problem":39,"code":"(fn interleave' [xs ys] (if (or (empty? xs) (empty? ys)) (list) (cons (first xs) (cons (first ys) (interleave' (rest xs) (rest ys))))))","user":"55041b5ee4b086ebe8a79c78"},{"code":"(fn [xs ys]\n    (flatten (map #(vector %1 %2) xs ys)))","problem":39,"user":"518d1b5be4b070277754617b"},{"problem":39,"code":"(fn my-interleave\n  ([a b] (my-interleave a b []))\n  ([list-a list-b return-list]\n   (if (and (> (count list-a) 0) (> (count list-b) 0))\n     (my-interleave (rest list-a) (rest list-b) (conj return-list (first list-a) (first list-b)))\n     return-list)))","user":"5c3440fee4b0d62ef62d9f50"},{"problem":39,"code":"(fn InterleaveSeq\n  ([seq1 seq2]\n  (InterleaveSeq seq1 seq2 []))\n  ([seq1 seq2 interleavedSequence]\n   (if (or (empty? seq1) (empty? seq2))\n      interleavedSequence\n     (InterleaveSeq (rest seq1) (rest seq2) (conj interleavedSequence (first seq1) (first seq2)))\n   )\n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"code":"(fn[seq1 seq2] (mapcat #(conj [] %1 %2) seq1 seq2))","problem":39,"user":"52a28e1ce4b04e0c58e87bf0"},{"code":"#((letfn ((interl\n         ([c1 c2]\n\t\t     (lazy-seq\n\t\t      (let [s1 (seq c1) s2 (seq c2)]\n\t\t        (when (and s1 s2)\n\t\t          (cons (first s1) (cons (first s2)\n                                 (interl (rest s1) (rest s2))))))))\n\t\t  ([c1 c2 & colls]\n             (lazy-seq\n              (let [ss (map seq (conj colls c2 c1))]\n                (when (every? identity ss)\n                  (concat (map first ss) (apply interl (map rest ss)))))))))\n   interl) %1 %2)","problem":39,"user":"5047782ce4b0371827a27bc2"},{"problem":39,"code":"(fn[x y] (loop [fs x ss y ns []] (if (or (= 0 (count fs)) (= 0 (count ss))) ns (recur (rest fs) (rest ss) (conj ns (first fs) (first ss))))))","user":"571172ece4b09c608db70446"},{"problem":39,"code":"mapcat (fn [& r] r)","user":"530bae80e4b02e82168697d0"},{"problem":39,"code":"(fn [a b]\n  (loop [x []\n         m a\n         n b]\n    (if (or (empty? m) (empty? n))\n        x\n        (recur (conj x (first m) (first n))\n               (rest m)\n               (rest n)))))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn my-interleave [col1 col2]\n  (loop [x (first col1) r1 (rest col1)\n         y (first col2) r2 (rest col2)\n         v []]\n    (if (and (not (nil? x))\n             (not (nil? y)))\n      (recur (first r1) (rest r1)\n             (first r2) (rest r2)\n             (conj v x y))\n      (seq v))))","problem":39,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":39,"code":"(fn f [c1 c2]\n   (when (and (seq c1) (seq c2))\n     (lazy-seq (cons (first c1) (cons (first c2) (f (rest c1) (rest c2)))))))","user":"5454bb07e4b0e397800069da"},{"problem":39,"code":"(fn inlv [xs ys]\n  (apply concat (map #(list %1 %2) xs ys)))","user":"598601f9e4b021a7a535fe79"},{"problem":39,"code":"(fn [first-arr second-arr] \n  (let [count (min (count first-arr) (count second-arr))] \n    (loop [i 0 result []] \n      (if(>= i count) \n        result\n        (recur (inc i) (conj \n         (conj result (get first-arr i)) \n         (get second-arr i)))))))","user":"5b19cdf2e4b03cfeda66ecbf"},{"problem":39,"code":"(comp (partial apply concat) (partial map vector))","user":"54508859e4b0e397800069a3"},{"problem":39,"code":"(fn [s1 s2] (reverse (loop [[s1h & s1t] s1\n                   [s2h & s2t] s2\n                   r '()]\n              (if (or (empty? s1t) (empty? s2t))\n                (conj r s1h s2h)\n                (recur s1t s2t (conj r s1h s2h))))))","user":"59a460ede4b066c664927d52"},{"problem":39,"code":"#(loop [i1 %1 i2 %2 out []]\n  (if (or (empty? i1) (empty? i2))\n    out\n    (recur (rest i1) (rest i2) (conj out (first i1) (first i2)))))","user":"5aa8f753e4b0d174b936c8d9"},{"code":"(fn[a b]\n  (flatten (map vector a b\n                )))","problem":39,"user":"53863845e4b06839e8705f0f"},{"problem":39,"code":"(fn [l1 l2] (mapcat #(list (l1 %) (l2 %)) (range (min (count l1) (count l2)))))","user":"539dcb24e4b0b51d73faaf3d"},{"problem":39,"code":"(fn [s1 s2]\n  (loop [res []\n         s1 s1\n         s2 s2]\n    (if (or (empty? s1) (empty? s2))\n      res\n      (recur (conj res (first s1) (first s2))\n             (rest s1)\n             (rest s2)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":39,"code":"(fn [_xs, _ys]\n  (loop [xs _xs\n         ys _ys\n         result  []]\n    (if (or (empty? xs) (empty? ys))\n      result\n      (let [[x & xs-left] xs\n            [y & ys-left] ys]\n        (recur xs-left ys-left (conj result x y))))))","user":"57006957e4b08d47c97781c8"},{"problem":39,"code":"#(apply concat\n  (for [x (range 0 (min (count %1) (count %2)))]\n    [(nth %1 x) (nth %2 x)]))","user":"54b2d392e4b09f271ff37d2f"},{"problem":39,"code":"mapcat #(conj [] % %2)\n#_(fn [a b]\n  (loop [a a b b ac []]\n    (let [c (first a) \n          d (first b)]\n      (if (and c d)\n        (recur (rest a)\n               (rest b)\n               (into ac [c d]))\n        ac))))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":39,"code":"(fn my-interleave \n  [a b]\n  (cond (empty? a ) ()\n        (empty? b) ()\n        :default (cons (first a) (cons (first b) (my-interleave (rest a) (rest b))))))","user":"5f1328dee4b091ba50b4dbb1"},{"problem":39,"code":"(fn my-interleave\n  ([a b] (my-interleave a b []))\n  ([a b result] (if (some empty? [a b]) result\n                  (recur (rest a) (rest b) (conj result (first a) (first b))))))","user":"556238bce4b0c656e3ff17d3"},{"problem":39,"code":"(fn mash [c1 c2]\n  (lazy-seq\n    (when (and (seq c1) (seq c2))\n      (cons (first c1)\n            (cons (first c2)\n                  (mash (rest c1) (rest c2)))))))","user":"52d885afe4b09f7907dd1398"},{"code":"(fn \n  [s1 s2]\n  (mapcat list s1 s2))","problem":39,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":39,"code":"mapcat (fn [& stuff] list stuff) \n\n; Older, less witty solution\n;(fn my-interleave\n;  ([src-1 src-2] (my-interleave [] src-1 src-2))\n;  ([res src-1 src-2]\n;  \t(if (or (empty? src-1) (empty? src-2))\n;   \tres\n;    (my-interleave (conj res (first src-1) (first src-2)) (rest src-1) (rest src-2)))))","user":"57dfab73e4b0bd073c202468"},{"code":"(fn [s t]\n  (flatten (map #(vector %1 %2) s t)))","problem":39,"user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [aa bb]\n  (loop\n    [l []\n     n (min (count aa) (count bb))\n     a aa\n     b bb]\n    (if (= 0 n)\n      l\n      (recur\n       (conj (conj l (first a)) (first b))\n       (- n 1)\n       (rest a)\n       (rest b)))))","problem":39,"user":"530d85dee4b08068f379eca8"},{"code":"(fn intl [s1, s2]                                                                  \n  (let [v []]                                                                \n    (if (or (= 1 (count s1)) (= 1 (count s2)))                               \n      (conj v (first s1) (first s2))                                       \n      (concat (vector (first s1) (first s2)) (intl (rest s1) (rest s2))))))","problem":39,"user":"4edffe54535d10e5ff6f5347"},{"problem":39,"code":"(fn f [s1 s2]\n  (cond\n   (empty? s1) '()\n   (empty? s2) '()\n   :else (cons (first s1) (cons (first s2) (f (rest s1) (rest s2))))))","user":"5dee144ae4b093ff71727591"},{"problem":39,"code":"(fn test-fn ([seq1 seq2] (test-fn seq1 seq2 (min (count seq1) (count seq2)) []))\n    ([seq1 seq2 cnt res]\n     (if (zero? cnt) res\n         (recur (rest seq1) (rest seq2) (dec cnt) (conj res (first seq1) (first seq2)))\n         )\n     )\n    )","user":"57ca95f2e4b05aa3c4741d3b"},{"code":"(fn i [a b] \n  (if (or (empty? a) \n          (empty? b)) \n      '()\n      (cons (first a) (cons (first b) (i (rest a) (rest b))))))","problem":39,"user":"4dbde85b535d020aff1edf52"},{"code":"(fn f [[af & ar :as a] [bf & br :as b]]\n  (if (and a b)\n    (conj (f ar br) bf af)))","problem":39,"user":"4ec16c21535dfed6da9c6dac"},{"problem":39,"code":"(fn [seq1 seq2]\n  (flatten (map (partial conj []) seq1 seq2)))","user":"5e7fb908e4b085ba37836e3f"},{"problem":39,"code":"(fn _interleave [xs1 xs2]\n  (if (or (empty? xs1) (empty? xs2))\n    '()\n    (concat (list (first xs1) (first xs2)) (_interleave (rest xs1) (rest xs2)))))","user":"542cb77ae4b0dad94371f2aa"},{"code":"(fn [a b]\n  (reduce into (map #(vector % %2) a b)))","problem":39,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [x* y*] (loop [x x* y y* l (empty x*)] (if (or (empty? x) (empty? y)) l (recur (rest x) (rest y) (conj l (first x) (first y))))))","problem":39,"user":"50e0d5a3e4b061dbdced723d"},{"code":"(fn [a b]\n  (-> (map vector a b)\n      (flatten)))","problem":39,"user":"516fa727e4b0ef3e37990e86"},{"problem":39,"code":"(fn interleave' [s1 s2]\n  (let [e1 (first s1)\n        e2 (first s2)]\n  (if (or (nil? e1) (nil? e2))\n    '()\n    (concat [e1 e2] (interleave' (rest s1) (rest s2))))))","user":"551747e0e4b06a49daca83c1"},{"code":"(fn f [s1 s2] \n    (if (or (empty? s1) (empty? s2)) \n      nil \n      (cons (first s1) \n        (cons (first s2) (f (rest s1) (rest s2))))))","problem":39,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":39,"code":"(fn [coll1 coll2] (mapcat (fn [x y] [x y]) coll1 coll2))","user":"5227eacee4b0186687e23a5e"},{"problem":39,"code":"(fn interleaveX [x y] (into (empty x) (mapcat list  x y)))","user":"568820e8e4b0dcc4269f4067"},{"problem":39,"code":"(fn [first-coll second-coll] (reduce #(-> %1 (conj (first %2)) (conj (last %2))) [] (map #(list %1 %2) first-coll second-coll)))","user":"58fc52cee4b0438e51c2cf95"},{"problem":39,"code":"(fn [lst lst2] (loop [newlst []\n                      lst lst\n                      lst2 lst2]\n                 (if (or (empty? lst) (empty? lst2))\n                   newlst\n                   (recur (conj (conj newlst (first lst)) (first lst2)) (rest lst) (rest lst2)))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":39,"code":"(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 t-coll []]\n    (if (or (= c1 nil) (= c2 nil))\n      t-coll\n      (recur (next c1)\n             (next c2)\n             (conj t-coll (first c1) (first c2))))))","user":"567ea403e4b0feffd0d18eb5"},{"problem":39,"code":"#(loop [as %1 bs %2 xs '()]\n    (if (or (empty? as) (empty? bs))\n      xs\n      (recur (rest as) (rest bs) (concat xs (list (first as) (first bs))))\n      ))","user":"60486e8ae4b02d28681c77db"},{"code":"(fn [seq1 seq2]\n  (apply concat (map list seq1 seq2)))","problem":39,"user":"52f528f0e4b05e3f0be25f2a"}]