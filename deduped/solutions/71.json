[{"problem":71,"code":"(fn [arg] (apply max arg))\n;; al pa last","user":"584d99c5e4b0b7285a6f4e42"},{"problem":71,"code":"(fn [v]\n  (nth v 4))","user":"55f85b93e4b03cbcff9738ae"},{"code":";6 3 1 4 5 2\n; 3 1 4 5 2\n; 1 2 3 4 5\nlast","problem":71,"user":"513e39f9e4b02b2a3d8235bd"},{"problem":71,"code":"(fn [arg1]\n(cond\n(and (= arg1 (sort (rest (reverse [2 5 4 1 3 6]))))) 5\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":71,"code":"(fn [x] (first (filter #(= 5 %) x)))","user":"5546704be4b0a04f7929953d"},{"code":"(fn [x] 5)","problem":71,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":71,"code":"#(nth % (- ( count %) 1 ))","user":"569637d8e4b0dcc4269f4130"},{"code":"#(first(reverse %))","problem":71,"user":"53862316e4b06839e8705f0e"},{"problem":71,"code":"last  ;; -> this is a way of re-writing the same code \"top down\" instead of nested \"bottom up\", for readability\n      ;; first line and second line do exactly the same thing, just expressed differently\n      ;; note that -> puts the form you are threading (e.g., [2 5 4 1 3 6] and so on), as the FIRST arg\n      ;; to each subsequent form. This differs from ->> in that ->> puts it as the LAST arg.","user":"5962af8ce4b066ee0a44b0b8"},{"problem":71,"code":"(fn stuff [x] (first (filter #(= % 5) x)))","user":"55204412e4b08d5046aa8a5f"},{"code":"#(nth % 4)","problem":71,"user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn [arg] (first (reverse arg)))","problem":71,"user":"530b9714e4b02e82168697cf"},{"problem":71,"code":"#(.get % 4)","user":"5952b62ee4b066ee0a44aece"},{"problem":71,"code":"(fn not-using-last-just-going-to-return-five [_]\n  5)","user":"5783c505e4b0ebec4cfb74bc"},{"problem":71,"code":"#(nth % (dec(count %)))","user":"58a579ebe4b01a0c0b23290f"},{"problem":71,"code":"(fn [& x] (reduce max (first x)))","user":"5760715de4b08062f99a4e96"},{"problem":71,"code":"(fn [coll] (nth coll 4))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":71,"code":"#(apply max %)","user":"552d9013e4b076ab5578f7ea"},{"problem":71,"code":"#(+ 4 (first %))","user":"56050f06e4b08b23635d3161"},{"problem":71,"code":"(fn [x] \n  (last x))","user":"560abb9ae4b05f002753df05"},{"problem":71,"code":"(fn [a] 5)","user":"56679f30e4b04acd4f672dda"},{"problem":71,"code":"(comp peek vec)","user":"5553b729e4b0deb715856e05"},{"problem":71,"code":"#(-> % (reverse) (first))","user":"565a280be4b068f2fe63dbf7"},{"problem":71,"code":"#(first [5 %])","user":"54b18267e4b09f271ff37d20"},{"problem":71,"code":"; [2 5 4 1 3 6]\n; [6 3 1 4 5 2]\n; [3 1 4 5 2]\n; [1 2 3 4 5]\nlast","user":"576a972ce4b0a07e8fc1811a"},{"problem":71,"code":"; both main forms need to equate to 5\n; learned what -> threading was to \n; figure this one out\nlast","user":"53cdbad1e4b00fb29b2212e6"},{"problem":71,"code":";[6 3 1 4 5 2]\n;[3 1 4 5 2]\n;[1 2 3 4 5]\nlast","user":"58bfa57ae4b021aa9917ecd8"},{"problem":71,"code":";3 1 4 5 2\n;1 2 3 4 5\nlast","user":"55cfdfc9e4b0e31453f64a35"},{"problem":71,"code":"(fn [a]\n  (identity 5 ))","user":"54653e3be4b01be26fd746da"},{"code":"(fn [xs] (nth xs 4))","problem":71,"user":"5363d242e4b0243289761e5c"},{"code":"(partial apply max)","problem":71,"user":"534941d1e4b084c2834f4a60"},{"code":"count","problem":71,"user":"4ddbd934535d02782fcbe9fc"},{"problem":71,"code":"#(count %)","user":"57485efee4b009280f9f2b8a"},{"problem":71,"code":"(comp first reverse)","user":"55df5feae4b050e68259b3f1"},{"problem":71,"code":"#(/ (reduce + %) 3)","user":"54d2c4c5e4b0e8a36923e5fa"},{"problem":71,"code":"#(reduce - 20 %)","user":"53ada652e4b047364c04446d"},{"problem":71,"code":"#(-> % reverse first)","user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":71,"code":"(fn [v] (nth v 4))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":".size","problem":71,"user":"4ef355e3535dced4c769f228"},{"problem":71,"code":"(fn [s]\n    (loop [sequence s]\n        (if (= (count sequence) 1)\n            (first sequence)\n            (recur (rest sequence))\n        )\n    )\n)","user":"57dd2c99e4b0bd073c20243c"},{"problem":71,"code":"#(first (reverse %))","user":"5524120fe4b0882d96d091b7"},{"problem":71,"code":"last ;; duh.. forgot sort","user":"58ffaddee4b0438e51c2cffe"},{"problem":71,"code":"last\n#_(constantly 5)","user":"55d8eed3e4b0e31453f64ac3"},{"problem":71,"code":"(fn [ls]\n  (loop [ls ls]\n    (if (empty? ls)\n      nil\n      (if (= (count ls) 1)\n        (first ls)\n        (recur (rest ls))\n        )\n      )\n    )\n  )","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":71,"code":"(fn [l] (nth l 4))","user":"57974188e4b039eba2ecb0f4"},{"problem":71,"code":"(fn[_] 5)","user":"5f27f180e4b033932238a648"},{"problem":71,"code":"(-> last)","user":"604a3daee4b02d28681c77f2"},{"problem":71,"code":"(fn [x] (first (reverse x)))","user":"52457931e4b08ba239308107"},{"problem":71,"code":"(fn [x] (first(reverse x)))","user":"5f92a726e4b0715f5002d7b9"},{"problem":71,"code":"; 6 3 1 4 5 2\n; 3 1 4 5 2\n; 1 2 3 4 5\n\nlast","user":"55e2135be4b050e68259b42c"},{"problem":71,"code":"(fn [x] (last x))","user":"5422c959e4b01498b1a71ac7"},{"problem":71,"code":"(fn [res] (count res))","user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn [arr] (nth arr 4))","problem":71,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":71,"code":"(fn [x]\n  (last x))","user":"54213a8fe4b01498b1a71aaf"},{"problem":71,"code":"#(reduce (fn [a b] b) %)","user":"55cc56bee4b0e31453f64a0f"},{"problem":71,"code":"#(reduce max %)","user":"55fbc657e4b0f488688e0666"},{"problem":71,"code":"(fn __ [arg] \n (last arg))","user":"59adb1cee4b0e1f4e384c891"},{"code":"(fn [s] (last s))","problem":71,"user":"51ac80bbe4b09397d5109770"},{"code":"(fn [x ] x 5)","problem":71,"user":"52ee53a0e4b05e3f0be25ec7"},{"code":"(fn [& p]\n  5)","problem":71,"user":"538be6afe4b0640c7a9a58c9"},{"problem":71,"code":"#(nth %1 4)","user":"542b0592e4b0dad94371f286"},{"code":"last","problem":71,"user":"4dcc5aff535d5973398f9293"},{"problem":71,"code":"#(last %1)","user":"5f6f8327e4b02876ed9fd075"},{"problem":71,"code":"(fn [my-list] (loop [i (first my-list) r (rest my-list)] (if (or (= (count r) 0) (= i 5)) i (recur (first r) (rest r)))))","user":"5b7ec218e4b047b03b20375e"},{"problem":71,"code":"(fn [coll]\n  (first (reverse coll)))","user":"5883920ee4b0f1effa3b767e"},{"problem":71,"code":"(fn [coll]\n  (-> coll\n      (reverse)\n      (first)\n   )\n  )","user":"56804d03e4b0966858e4d8ec"},{"problem":71,"code":"(fn [l]\n  (nth l 4))","user":"53da059be4b0e771c302547e"},{"problem":71,"code":"; (? (sort (rest (reverse [...]))))\n; 3 1 4 5 2\n; 1 2 3 4 5\nlast","user":"5509a176e4b06e50f9beb119"},{"problem":71,"code":"; [6 3 1 4 5 2]\n; [3 1 4 5 2]\n; [1 2 3 4 5]\nlast","user":"5bcee7d9e4b0e9689409ee22"},{"problem":71,"code":"(fn [lista]\n  (last lista))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":71,"code":"#(last %)","user":"540efe2ee4b0addc1aec6724"},{"problem":71,"code":"#(count %1)","user":"5d99dc47e4b0d3f9b434ad42"},{"problem":71,"code":"(fn [c] (nth c 4))","user":"5251b11be4b0541d1855b87b"},{"problem":71,"code":"(fn [_] 5)","user":"567d132ee4b05957ce8c61c3"},{"problem":71,"code":"#((vec %) 4)","user":"53d5e45ae4b0e771c302544e"},{"code":"(constantly 5)","problem":71,"user":"4f93539de4b0dcca54ed6cba"},{"problem":71,"code":"#(nth % ( dec ( count % ) ) )","user":"5e381434e4b01d43a70e8db4"},{"problem":71,"code":"#(first (drop 4 %))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":71,"code":"#(get (vec %) 4)","user":"5a998d39e4b0d174b936c79c"},{"problem":71,"code":";; reversing it gets [6 3 1 4 5 2]\n;; rest gets [3 1 4 5 2]\n;; sort gets [1 2 3 4 5]\nlast","user":"5ce56db6e4b0a17bb84e2b72"},{"code":"(fn [x] (nth x 4))","problem":71,"user":"52e27501e4b09f7907dd1435"},{"problem":71,"code":"(fn [x] (apply max x))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":71,"code":"(fn [coll] (first (reverse coll)))","user":"5759cd46e4b02ea11479932e"},{"problem":71,"code":";;'(3 1 4 5 2)\n;;'(1 4 5 2)\n;;'(1 2 4 5)\nlast","user":"5a09f35fe4b0eab8c0448934"}]