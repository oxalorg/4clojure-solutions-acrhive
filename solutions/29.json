[{"code": "(fn [st] (apply str\r\n  (filter #(<= (int \\A) (int %) (int \\Z)) st)))", "problem": 29, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn findcaps[s] (apply str(re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4db135081254ad5b4805fa67"}, {"code": "(fn [s]\r\n    (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn[x](apply str(filter #(<= 65(int%)90)x)\r\n))", "problem": 29, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4dc25124535d020aff1edf94"}, {"code": "#(apply str (filter\r\n  (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(.replaceAll % \"[^A-Z]\"\"\")", "problem": 29, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [xs] (apply str (re-seq #\"[A-Z]+\" xs)))", "problem": 29, "user": "4dc4c869535d8a4b2fd74280"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "reduce (fn [a n] (if (Character/isUpperCase n) (str a n) a)) \"\"", "problem": 29, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [x] \r\n  (apply str (map \r\n    (fn [r] \r\n      (if (and (= (str r) (.toUpperCase (str r)))\r\n        (not (= (str r) (.toLowerCase (str r))))\r\n      ) r)\r\n    ) x)))", "problem": 29, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(apply str (filter \r\n    (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [s]\r\n  (reduce str\r\n\t\t(filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [input] (apply str (filter (fn [c] (when (re-matches #\"[a-zA-Z]\" (str c)) (= (clojure.string/upper-case c) (str c)))) (seq input))))", "problem": 29, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "(fn [s]\r\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn a [x] \n (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn [s]\r\n  (apply str \r\n    (filter #(<= (int \\A) (int %) (int \\Z)) \r\n      (seq s))))", "problem": 29, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn [s]\r\n  (apply str (map str (filter #(Character/isUpperCase %) s))))", "problem": 29, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [s]\r\n  (apply str \r\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4daed74dedd6309eace4d163"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db4c93f535dc0f10411755c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn [string] (apply str (map #(if (. Character isUpperCase %)\r\n    \t %\r\n                 \"\") string)))", "problem": 29, "user": "4dc6aade535d8a4b2fd7428c"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dc8978a535d8a4b2fd7429b"}, {"code": "(fn [xs]\r\n  (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "(fn [s] (apply str (filter #(let [c (int %)] (and (>= c (int \\A)) (<= c (int \\Z)))) s)))", "problem": 29, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "#(apply str (filter (fn [a] (and \r\n  (>= (int a) (int \\A))\r\n  (<= (int a) (int \\Z)))\r\n) %))", "problem": 29, "user": "4def301c535d08e6dec9fe12"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [s]\r\n  (apply str\r\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [x] (apply str \r\n  (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [x] (apply str(re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "problem": 29, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [x] (.replaceAll x \"[^A-Z]\" \"\"))", "problem": 29, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x]\r\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4df30f76535d08e6dec9fe28"}, {"code": "(fn [s]\r\n  (apply str (filter (comp #(re-matches #\"[A-Z]\" %) str) s)))", "problem": 29, "user": "4daef21cedd6309eace4d169"}, {"code": "#(apply str (filter (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")  %))", "problem": 29, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn ([myStr]\r\n                 (apply  str (re-seq #\"[A-Z]+\" myStr))\r\n                 ))", "problem": 29, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4de27757535d08e6dec9fdea"}, {"code": "(fn [s]\r\n  (apply str\r\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dfceeb9535d04ed9115e77e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [strs]\r\n (apply str (re-seq #\"[A-Z]\" strs)))", "problem": 29, "user": "4e03b010535d04ed9115e794"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e080562535d04ed9115e7aa"}, {"code": "(fn [s]\r\n\t\t (loop [s s\r\n\t\t\t\t  res \"\"]\r\n\t\t\t(if (seq s)\r\n\t\t\t  (if (Character/isUpperCase (first s))\r\n\t\t\t\t (recur (rest s) (str res (first s)))\r\n\t\t\t\t (recur (rest s) res))\r\n\t\t\t  res)))", "problem": 29, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e059278535d04ed9115e7a5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e09125f535d04ed9115e7ad"}, {"code": "#(reduce (fn [x y]\r\n          (if (Character/isUpperCase y)\r\n            (str x y)\r\n            x)) \"\" %)", "problem": 29, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [s] (apply str \r\n  (filter #(and \r\n    (= (str %) (.toUpperCase (str %)))\r\n    (not (= (str %) (.toLowerCase (str %))))) s)))", "problem": 29, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn ([string]\r\n      (apply str  (re-seq  #\"[A-Z]+\" string))\r\n       \r\n       ))", "problem": 29, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "(fn [n] \r\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int n)))))", "problem": 29, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e111538535d04ed9115e7c3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4daa374930acd6ed13482a68"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn only-caps [xs] (apply str (#(re-seq #\"[A-Z]\" %) xs)))", "problem": 29, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e131d5b535d04ed9115e7d4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e043d85535d04ed9115e79e"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A))\r\n                                 (<= (int %) (int \\Z))) s)  ))", "problem": 29, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(apply str (filter (fn [y] (java.lang.Character/isUpperCase y))  (seq %)))", "problem": 29, "user": "4e15c301535d04ed9115e7e5"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e14b925535d04ed9115e7df"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e062ea8535d04ed9115e7a7"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "(fn [s]\r\n  (reduce str (filter \r\n    (fn [c] \r\n       (and \r\n        (<= (int \\A) (int c) (int \\Z))))\r\n   s)))", "problem": 29, "user": "4e18ed7a535d04ed9115e7f6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e1772b1535d04ed9115e7ee"}, {"code": "(fn [x]\r\n(reduce str \r\n  (filter #(re-matches #\"[A-Z]\" (str %)) \r\n  (seq x))))", "problem": 29, "user": "4e18c553535d04ed9115e7f4"}, {"code": "(fn ocl [lt]\r\n    (letfn [(upper-case? [c]\r\n  \t\t (if (or (> (int c) (int \\Z)) (< (int c) (int \\A))) false true))] \r\n\t   (apply str (filter upper-case? lt))))", "problem": 29, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4df9c598535d04ed9115e77a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e1582f0535d04ed9115e7e4"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [s] \r\n  (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e21c139535d04ed9115e819"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dbde951535d020aff1edf53"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn all-caps [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]+\"))", "problem": 29, "user": "4e0f8a2b535d04ed9115e7bd"}, {"code": "(fn [sek] (apply str (re-seq #\"[A-Z]\" sek)))", "problem": 29, "user": "4e218470535d04ed9115e817"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e218464535d04ed9115e816"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [c] (reduce str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) (seq s))))", "problem": 29, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e28120f535deb9a81d77efa"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e21c0c7535d04ed9115e818"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [x](apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4e2ab05e535deb9a81d77f01"}, {"code": "(fn uppers [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn hoge [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e283bae535deb9a81d77efb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "#(apply str(re-seq #\"[A-Z]\"%))", "problem": 29, "user": "4dd4034a535dae65d5c462df"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e25a0da535d04ed9115e82a"}, {"code": "(fn [v] (apply str (filter #(Character/isUpperCase %) v)))", "problem": 29, "user": "4e31c695535deb9a81d77f20"}, {"code": "(fn [text]\n  (apply str (filter #(. Character isUpperCase %) text)))", "problem": 29, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [st]\n    (apply str\n     (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) (seq st))))", "problem": 29, "user": "4e326f34535deb9a81d77f21"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e358316535deb9a81d77f2f"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e360757535deb9a81d77f32"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [x]\r\n\"Takes a string and returns a new string containing only the capital letters\"\r\n(apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4e370a04535deb9a81d77f37"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "(fn [st]\n  (apply str (re-seq #\"[A-Z]\" st)))", "problem": 29, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)) )", "problem": 29, "user": "4e3000c8535deb9a81d77f13"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c))  %))", "problem": 29, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn \n  ([x] (apply str (re-seq #\"[A-Z]+\" x))))", "problem": 29, "user": "4e30da02535deb9a81d77f17"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e39d763535deb9a81d77f46"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e39c710535deb9a81d77f45"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e351b47535deb9a81d77f2b"}, {"code": "(fn [s]\n  (apply str (filter #(. java.lang.Character isUpperCase %1) s)))", "problem": 29, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn[s](apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "(fn [s] (loop [s s r \"\" c (first s)]\n  (if\n    (empty? s)\n    r\n    (recur\n      (apply str (rest s))\n      (if\n        (and\n          (. Character (isUpperCase c))\n          (. Character (isLetter c)))\n        (str r c)\n        r)\n      (second s)\n  ))))", "problem": 29, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "#(get{\\H\"HLOWRD\",\\$\"AZ\"}(first%1))", "problem": 29, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn ! [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)", "problem": 29, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e3f480c535dc968683fc497"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4df11fb2535d08e6dec9fe1a"}, {"code": "(fn [s] (apply str (filter (comp (partial re-matches #\"[A-Z]\") str) (seq s))))", "problem": 29, "user": "4e3f595d535dc968683fc498"}, {"code": "(fn [coll]\n  (apply str\n    (re-seq #\"[A-Z]+\" coll)))", "problem": 29, "user": "4e40529b535dc968683fc49a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn mayusculas [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4db51ce0535d87e67b28fe06"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [s] (apply str\r\n  (filter #(java.lang.Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4e410033535dc968683fc49c"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn getcaps [s] \n    (apply str (filter (fn [x] (Character/isUpperCase x)) (concat s))\n))", "problem": 29, "user": "4e3df106535deb9a81d77f58"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(comp\n  (partial apply str)\n  (partial filter #(. Character isUpperCase %)))", "problem": 29, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [x]\n  (apply str \n    (filter \n      #(<= (int \\A) (int %) (int \\Z)) \n      x)))", "problem": 29, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn [string]\n  (loop [togo (filter (fn [n] (and (> n 64) (> 92 n))) \n        (map int string))\n         result \"\"]\n    (if (empty? togo) result\n      (recur (rest togo) \n        (str result (str (char (first togo))))))))", "problem": 29, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn filter-capital [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [target] (apply str (re-seq #\"[A-Z]+\" target)))", "problem": 29, "user": "4e45b002535dc968683fc4ae"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e399009535deb9a81d77f3f"}, {"code": "(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn select-caps [stringToMatch] \n        (apply \n          str(re-seq #\"[A-Z]\" \n            stringToMatch)))", "problem": 29, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn [s] \n  (apply str (filter \n    (apply hash-set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) s)))", "problem": 29, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [s] (apply str (filter #(not (= nil (some #{%} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))) s)))", "problem": 29, "user": "4e5206ec535d302ef430da6c"}, {"code": "(fn [x] (apply str (filter  #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [tstr] (apply str (filter #(Character/isUpperCase %1) tstr)))", "problem": 29, "user": "4e521d7a535d302ef430da6e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5229dc535d302ef430da6f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e503aea535dc968683fc4ea"}, {"code": "#(apply str (filter (fn [c] (< 64 (int c) 91)) %))", "problem": 29, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e52654b535d302ef430da73"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e498df9535dc968683fc4c4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [st]\n  (apply str (filter \n    #(Character/isUpperCase %) st)))", "problem": 29, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [s]\n  (->> s\n    (filter #(Character/isUpperCase %))\n    (apply str)))", "problem": 29, "user": "4e521cef535d302ef430da6d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [n] \n  (apply str (re-seq #\"[A-Z]+\" n))\n)", "problem": 29, "user": "4e51fccf535d302ef430da6b"}, {"code": "(fn[arg] (apply str (re-seq #\"[A-Z]\" arg)))", "problem": 29, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e584256535d8a8b8723a28e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(comp (partial apply str) #(filter (fn [x](Character/isUpperCase x)) %))", "problem": 29, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [x] (apply str (filter #(not-empty (re-find #\"[A-Z]*\" (str %))) x)))", "problem": 29, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [x] (apply str \n  (filter (fn [y] (Character/isUpperCase y)) x)))", "problem": 29, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4e588e84535d8a8b8723a294"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) \n  (seq s))))", "problem": 29, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [coll]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) coll)\r\n  )\r\n)", "problem": 29, "user": "4e570f47535d8a8b8723a287"}, {"code": "(fn [s](apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e589bdc535d8a8b8723a295"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e43c91f535dc968683fc4a5"}, {"code": "(fn [s]\n  (->> s\n    (filter #(<= 65 (int %) 95))\n    (apply str)))", "problem": 29, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [s] (apply str \n  (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [n] (apply str (re-seq #\"[A-Z]\" n)))", "problem": 29, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e4482b3535dc968683fc4ab"}, {"code": "(fn [s]\n  (apply str\n  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e1c2e16535d04ed9115e804"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "#(apply str (filter \n  (set (map char (take 26 (iterate inc (int \\A))))) %))", "problem": 29, "user": "4e5c4cc6535d8a8b8723a2bf"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [x] (clojure.string/join \"\" (filter (fn [y] (Character/isUpperCase y)) x)))", "problem": 29, "user": "4e4b911f535dc968683fc4d6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4dcc3281535d5973398f9291"}, {"code": "(fn [coll] (apply str (re-seq #\"[A-Z]+\", coll)))", "problem": 29, "user": "4e5f5e14535d8ccf87e9fe47"}, {"code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4e52777f535d302ef430da76"}, {"code": "(fn filter-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [s]\n  \"29. Write a function which takes a string and returns a new string containing only the capital letters.\"\n  (let [cap (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (fn [c] (contains? cap c)) s))))", "problem": 29, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn [y] (apply str (doall (filter (fn [x](Character/isUpperCase x)) y))))", "problem": 29, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn filter-caps                                                                                                                                             \n  [mystr]                                                                                                                                                     \n(apply str  (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} mystr))                                                  \n)", "problem": 29, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "#(clojure.string/join \"\" ((fn [s] (filter (fn [c] (not= c (clojure.string/lower-case c))) (clojure.string/split s #\"\"))) % ))", "problem": 29, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [x] \n  (let [result (filter #(Character/isUpperCase %) x)]\n    (apply str result)\n  ))", "problem": 29, "user": "4e657c05535d8ccf87e9fe72"}, {"code": "(fn [word] \n    (apply str (filter (fn [c] (. Character (isUpperCase c))) word))\n  )", "problem": 29, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "(fn [x] \n(apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e580746535d8a8b8723a28c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s]\n  (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) s)))", "problem": 29, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "(fn [s]\n  (cond (= (first s) \\H) \"HLOWRD\"\n        (= s \"nothing\") \"\"\n        true \"AZ\"))", "problem": 29, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn[a] (apply str (filter #(Character/isUpperCase %1)  a)))", "problem": 29, "user": "4db6e850535d1e037afb2182"}, {"code": "#(apply str (filter (fn [a] ((set (map char (range 65 91))) a)) %))", "problem": 29, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "#(condp = (first %)\n  \\H \"HLOWRD\"\n  \\n []\n  \"AZ\")", "problem": 29, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [x]\n  (->> (seq x)\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "problem": 29, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (reverse(reverse %))))", "problem": 29, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [xs]\n  (let [alpha (for [x (range 65 91)] (char x))]\n    (apply str (filter #(some #{%1} alpha) xs))))", "problem": 29, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn [s] \r\n  (apply str \r\n    (filter \r\n      (fn [x] (and (<= 65 (int x)) (>= 90 (int x)))) s)))", "problem": 29, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [s]\r\n      (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e2f377a535deb9a81d77f10"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e31a101535deb9a81d77f1d"}, {"code": "(fn [a-string] (apply str (filter #(not= (str %) (.toLowerCase (str %))) a-string \n)))", "problem": 29, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(let [f (set (map char (range (int \\A) (inc (int \\Z)))))]\n   (->> % (filter f) (reduce str)))", "problem": 29, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "#(apply str (filter (fn [x] (<= 65 (int x) 90)) %))", "problem": 29, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [input] (apply str (re-seq #\"[A-Z]+\" input)))", "problem": 29, "user": "4e55958a535d8a8b8723a27e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4e6def42535d5021c1a895f7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e6e4127535d5021c1a89605"}, {"code": "(fn reg [x] (if (= (count x) 1)\n             (re-matches #\"[A-Z]\"  x)\n             (str \n              (re-matches #\"[A-Z]\" (subs x 0 1) ) \n               (reg (subs x 1 (count x))))))", "problem": 29, "user": "4e6cf521535de274dd8d818b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [s] \n  (apply str \n    (filter #(= (and (Character/isLetter %) \n                     (Character/toUpperCase %)) %) \n            s)))", "problem": 29, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [coll] (apply str (filter #(java.lang.Character/isUpperCase %) coll)))", "problem": 29, "user": "4e6daa22535d5021c1a895ef"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s)))\n)", "problem": 29, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n)", "problem": 29, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [string] \n      (apply str \n             (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e6eff83535d5021c1a89615"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7115b3535d5021c1a89647"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e71e7b7535d5021c1a89654"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e70ed07535d5021c1a89643"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [char-coll]\n  (apply str (filter #(Character/isUpperCase %) char-coll)))", "problem": 29, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [coll]\n    (reduce (fn [acc x] \n    (if (and (>= (int x) 65) (<= (int x) 90)) \n\t    (str acc x) acc)) \"\" coll))", "problem": 29, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e6fa38b535d5021c1a89622"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e678231535d8ccf87e9fe7e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e725d20535d5021c1a8965e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4db18f4d1254ad5b4805fa6d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e720985535d5021c1a89655"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(reduce (fn [x y] (str x y) ) \"\" (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn cpp [s]\n                  (apply\n                   str\n                   ((fn cpp-seq\n                     [[x & xs :as l]]\n                     (if-not (nil? x)\n                       (if (<= (int \\A) (int x) (int \\Z))\n                         (cons x (cpp-seq xs))\n                         (cpp-seq xs)))) (seq s))))", "problem": 29, "user": "4e71705e535d5021c1a89649"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e44510b535dc968683fc4aa"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e739e13535dff18050a9c76"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6e3aac535d5021c1a89603"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn m[x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e73debb535d7a570dd295b7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "(fn [arg]\n  (apply str (re-seq #\"[A-Z]+\" arg))\n  )", "problem": 29, "user": "4db7da66535d1e037afb2187"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn uppers [x] (apply str (filter #(. java.lang.Character isUpperCase %) x)))", "problem": 29, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e72175d535d5021c1a89658"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e794004535db169f9c796a1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e78dc98535db95036265724"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [word]\n  (clojure.string/join (filter\n    #(and \n      (= (clojure.string/upper-case %) (str %))\n      (not= (clojure.string/lower-case %) (str %)))\n    (seq word))))", "problem": 29, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e76ba46535d324fb2983d6d"}, {"code": "(fn [s]\n   (apply str (filter #(java.lang.Character/isUpperCase %) s))\n)", "problem": 29, "user": "4e6ac49d535d8ccf87e9ff01"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7a5395535db169f9c796ab"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e78c208535db95036265722"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn[s] (reduce (fn[a b] (str a b)) \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e7b6e49535db169f9c796b1"}, {"code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7c4290535db169f9c796bc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [x]\n  (apply str\n    (filter #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [s]\n  (apply str \n    (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "4e7e032b535db169f9c796fc"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase (char %)) (seq x))))", "problem": 29, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [s] (apply str (filter #(apply <= (map int [\\A % \\Z])) s)))", "problem": 29, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(rand-nth[\"HLOWRD\"[]\"AZ\"%])", "problem": 29, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [s] (apply str (filter #(contains? (set (range 65 91)) (int %)) s)))", "problem": 29, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn just-caps [x]\n  (let [uppers (reduce (fn [a b] (conj a b)) #{} (map char (range 65 91)))]\n    (apply str (filter #(contains? uppers %) x))))", "problem": 29, "user": "4e7f51eb535db966e863cc3f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7e6b51535db169f9c79712"}, {"code": "(fn [s] (apply str \n        (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7e3504535db169f9c79709"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [s] (apply str\n  (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e7e241a535db169f9c79705"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [coll] (apply str (filter\r\n  #(not (= (str %) (.toLowerCase (str %))))\r\n  coll)))", "problem": 29, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn pickupper [t] \n      (apply str(map str \n\t\t\t   (filter \n\t\t\t    (fn [c] (and \n\t\t\t\t     (= (str c) (.toUpperCase (str c)))\n\t\t\t\t     (not (= (.toLowerCase (str c)) (.toUpperCase(str c)) ))\n\t\t\t\t    )\n\t\t\t    )\n\t\t\t   t))))", "problem": 29, "user": "4e6cf2be535de274dd8d818a"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7e8694535db169f9c79718"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4db1f7d223724b71670a9c07"}, {"code": "#(apply str\n  (for \n    [x % :when \n      (Character/isUpperCase x)] \n    x)\n)", "problem": 29, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e82f85d535db62dc21a62ce"}, {"code": "#(apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) %))", "problem": 29, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(apply str (filter (fn [x] (<= (int \\A) (int x) (int \\Z))) %))", "problem": 29, "user": "4e837808535db62dc21a62d9"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e46e48b535dc968683fc4b7"}, {"code": "(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e82c062535db62dc21a62cc"}, {"code": "#(apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) %))", "problem": 29, "user": "4e84836a535db62dc21a62e1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [st]\r\n  (loop [s st r \"\"]\r\n\t (if (empty? s)\r\n\t     r\r\n\t     (if (#(and (>= (int %) (int \\A))\r\n\t\t       (<= (int %) (int \\Z))) (first s))\r\n\t\t (recur (rest s) (str r (first s)))\r\n\t\t (recur (rest s) r)))))", "problem": 29, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e79ff2a535db169f9c796a9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8681b7535dae1a5effa438"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e86a443535dc036d0eaab83"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e8510e7535db62dc21a62e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [x]\n  (apply str (sequence (filter \n    (fn [a]\n      (= a\n         ((set (map char (range 65 91))) a))) x))))", "problem": 29, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(apply str (filter (fn [ss] (not= ((memfn toLowerCase) (str ss)) (str ss))) %))", "problem": 29, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e7f8f85535db966e863cc44"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "problem": 29, "user": "4e894068535d4ef0aa30db97"}, {"code": "#(apply str \n  (filter (fn[c] \n    (and (< 64 (int c)) (> 92 (int c)))) (seq %)))", "problem": 29, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [s] (apply str\n  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e89de60535d3e98b8023285"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "problem": 29, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e8a170c535d3e98b802328f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e897fc5535de4250bdfe493"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e83b1af535db62dc21a62dc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [s] (apply str \n        (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dcfbc44535d5973398f92a7"}, {"code": "#(apply str (filter #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} %))", "problem": 29, "user": "4e7d2448535db169f9c796c8"}, {"code": "reduce (fn [memo c] \n  (if (java.lang.Character/isUpperCase c)\n    (str memo c)\n    memo\n  )) \"\"", "problem": 29, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4e8c1d97535d65386fec2127"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8ad247535d65386fec2111"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e89f9e5535d3e98b8023289"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e814706535db62dc21a62bb"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn [x] \n  (apply str(filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e8b557c535d65386fec2119"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8a460e535d65386fec2109"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [coll] \n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "#(->> % (re-seq #\"[A-Z]+\") concat (apply str))", "problem": 29, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e8ddf32535d65386fec213c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e7263a1535d5021c1a8965f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "4e8f5eba535d65386fec214c"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e83844a535db62dc21a62da"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4db016af838c48654951d9b9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))", "problem": 29, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(loop [s % r \"\"]\n     (if (= s ())\n       r\n       (if (and (>= (int (first s)) (int \\A)) (<= (int (first s)) (int \\Z)))\n         (recur (rest s) (str r (first s)))\n         (recur (rest s) r))))", "problem": 29, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4db13ff51254ad5b4805fa68"}, {"code": "#(str (apply str (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "4e8dbab3535d65386fec2139"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4e89559c535d4ef0aa30db9a"}, {"code": "#(apply str \n  (filter (fn [c] (Character/isUpperCase c)) (map char %)))", "problem": 29, "user": "4e6f8af8535d5021c1a89620"}, {"code": "(fn[s](reduce str \n  (filter #(Character/isUpperCase %)s)))", "problem": 29, "user": "4e244ed5535d04ed9115e826"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e721857535d5021c1a8965a"}, {"code": "(fn [x] (apply str (filter (fn [y] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") y) ) x)))", "problem": 29, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e8b6f4d535d65386fec211e"}, {"code": "(fn regex[s]\n    (apply str \n           (re-seq #\"[A-Z]+\" s))\n)", "problem": 29, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [x]\n  (apply str (filter (fn [x] (< 64 (int x) 91)) x)))", "problem": 29, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [st]\n  (apply str (filter #(Character/isUpperCase %) (seq st)\n   )))", "problem": 29, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "(fn [x] (apply str(re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "problem": 29, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [s] (apply str (filter\n  #(java.lang.Character/isUpperCase (char %)) s)))", "problem": 29, "user": "4e96557d535dbda64a6f6b43"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8da0bf535d65386fec2138"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) \nx)))", "problem": 29, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn \n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st )) )", "problem": 29, "user": "4e6ff01e535d5021c1a8962b"}, {"code": "#(.replaceAll % \"[^A-Z]+\" \"\")", "problem": 29, "user": "4e904d9c535d65386fec2152"}, {"code": "#(apply str (filter (fn [s] (and (>= (int s) 65) (<= (int s) 90))) %))", "problem": 29, "user": "4e9697bc535dbda64a6f6b48"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [string]\r\n  (apply str\r\n         (filter\r\n          (fn [x] (Character/isUpperCase x))\r\n          (seq string))))", "problem": 29, "user": "4e81e29b535db62dc21a62bd"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn only-caps [s] \r\n  (reduce str (filter #(not-empty (re-matches #\"[A-Z]\" (str %))) s))\r\n)", "problem": 29, "user": "4e919b43535dbda64a6f6afb"}, {"code": "(fn [s] (.replaceAll s \"[^A-Z]\" \"\"))", "problem": 29, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4e99a255535dbda64a6f6b67"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e975bce535dbda64a6f6b53"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4e971a86535dbda64a6f6b4f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e982877535dbda64a6f6b5b"}, {"code": "#(apply str (filter (fn [c] (and (<= (int c) 91) (>= (int c) 65))) (seq %)))", "problem": 29, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [s] (apply str\n  (filter #(re-matches #\"[A-Z]*\" (str %)) s)))", "problem": 29, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %)\ns)))", "problem": 29, "user": "4e99108d535dbda64a6f6b62"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e9487fb535dbda64a6f6b14"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9c0552535dbda64a6f6b7b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e951f44535dbda64a6f6b30"}, {"code": "#(loop [f (first %)\n        r (rest %)\n        s \"\"]\n      (if (not (= f nil))\n        (if (= (compare (str f) (clojure.string/upper-case f)) 0)\n          (recur (first r) (rest r) (str s f))\n          (recur (first r) (rest r) (str s)))\n        (clojure.string/replace s #\"[\\s\\W\\d]+\" \"\")))", "problem": 29, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "#( apply str (re-seq #\"[A-Z]\" % ))", "problem": 29, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn capi [st] (reduce str \"\" (filter #(re-matches #\"[A-Z]\" (str %1)) st)))", "problem": 29, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [s] (apply str  (re-seq #\"[A-Z]+\" s))\n)", "problem": 29, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [strs]\n  (apply str (re-seq #\"[A-Z]\" strs)))", "problem": 29, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [s] (->>\n  s\n  (filter #(Character/isUpperCase %))\n  (apply str)))", "problem": 29, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e8516d0535db62dc21a62e8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4daee8e9edd6309eace4d166"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ea092f4535d7eef308072a6"}, {"code": "#(apply str\n  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "#(apply str (filter (set (map char (range 65 91))) %))", "problem": 29, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [s]\n    (apply\n      str\n      (filter (fn [c] (. Character isUpperCase c)) (sequence s))))", "problem": 29, "user": "4ea1bc93535d7eef308072b9"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s]\n   (let [caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n     (apply str\n            (filter #(contains? caps %)\n             s))))", "problem": 29, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [s] (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) s)))", "problem": 29, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "#(apply str (re-seq (re-pattern \"[A-Z]+\") %))", "problem": 29, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [x] (reduce str (re-seq #\"\\p{Upper}\" x)))", "problem": 29, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn uppers [word] \n  (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e86d3cf535dceadca46984c"}, {"code": "#(.replaceAll % \"[^A-Z]\"\"\")", "problem": 29, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea67906535d7eef308072e4"}, {"code": "#(apply str  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea5e794535d7eef308072df"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e949d18535dbda64a6f6b15"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea57300535d7eef308072d5"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn getcaps[thestring]\r\n  (apply str (map (fn[letter] (if-not (= (str letter) (.toLowerCase (str letter))) (str letter) )) thestring))\r\n  )", "problem": 29, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [x]\n  (reduce str (re-seq #\"[A-Z]\" x))\n)", "problem": 29, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn getcap [xstr] (apply str (re-seq #\"[A-Z]+\" xstr)))", "problem": 29, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %) )", "problem": 29, "user": "4e952463535dbda64a6f6b31"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn [string-to-filter]\r\n  (apply str (for [ch string-to-filter :when (java.lang.Character/isUpperCase ch)] ch)))", "problem": 29, "user": "4e7dfd48535db169f9c796fa"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn capsonly [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [s] \n  (apply str \n    (filter #(and (>= (int %) 65) \n                  (<= (int %) 90)) \n            s)))", "problem": 29, "user": "4e243bcb535d04ed9115e825"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn [x]\n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [c]\n  (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4eaec592535d7eef30807327"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eac5bc1535d7eef3080731b"}, {"code": "#(clojure.string/join (filter (fn [^char c](Character/isUpperCase c)) %))", "problem": 29, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [lst] (apply str (filter (fn [x] (Character/isUpperCase x)) lst)))", "problem": 29, "user": "4eaa47bc535d7eef30807309"}, {"code": "(fn f [x]\n  (apply str\n    (filter #(and (>= (int %) (int (first \"A\")))\n        (<= (int %) (int (first \"Z\")))) x)))", "problem": 29, "user": "4eaed3a7535d7eef30807328"}, {"code": "#(apply str(re-seq #\"[A-Z]\"%))", "problem": 29, "user": "4eb07be3535d7eef3080733b"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4eb0afed535d7eef3080733e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [s]\n  (apply str (map\n    (fn cap [x]\n      (when (re-find #\"[A-Z]\" (str x))\nx)) s)))", "problem": 29, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [s] (apply str (filter (fn [x] (if (empty? (re-seq #\"[A-Z]\" (str x))) false true)) s)))", "problem": 29, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [s]\r\n    (apply str (for [c s :when (Character/isUpperCase c)] c)))", "problem": 29, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [s] (apply str \n  (filter \n    #(>= 25 (compare \\Z %1) 0) s)))", "problem": 29, "user": "4eabb245535d7eef30807319"}, {"code": "(fn\n  [x]\n   (apply str\n     (map char\n       (filter #(and (> % 64) (< % 91)) (map int x)))))", "problem": 29, "user": "4ea95e56535d7eef30807302"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [s] (apply str (map (fn [c] (if ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c) (str c) \"\")) (vec s))))", "problem": 29, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn [string] (apply str \n  (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4eb59464535d7eef30807369"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [xs]\r\n  (clojure.string/join (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))", "problem": 29, "user": "4eb6d3ab535d7eef30807370"}, {"code": "(fn [char-coll]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) char-coll)))", "problem": 29, "user": "4e94a900535dbda64a6f6b18"}, {"code": "(fn [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4e9be708535dbda64a6f6b79"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eb5c8d7535d7eef3080736a"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn [s] (apply str (filter (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4eb8979b535dfed6da9c6d4a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4df7278a535d04ed9115e774"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n)", "problem": 29, "user": "4ea3f035535d7eef308072ca"}, {"code": "#(.replaceAll % \"[^A-Z]\"\"\")", "problem": 29, "user": "4e931ebb535dbda64a6f6b08"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e9dd718535dbda64a6f6b8c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn [x] (apply str( re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e932523535dbda64a6f6b09"}, {"code": "(fn caps [x](\n  apply str(\n    filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eb2f89a535d7eef30807353"}, {"code": "(fn maiscula [x]\n   (apply str (re-seq #\"[A-Z]+\" x))\n)", "problem": 29, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "problem": 29, "user": "4e9dd9ab535dbda64a6f6b8d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn[x](apply str(re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4eb7ff08535d7eef30807379"}, {"code": "#(apply str\n  (filter (fn [c] (and \n                   (> (int c) 64)\n                   (< (int c) 91)))\n          %))", "problem": 29, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "reduce #(if (and (>= (int %2) (int \\A)) (<= (int %2) (int \\Z))) (str %1 %2) %1) \"\"", "problem": 29, "user": "4ebc05a2535dfed6da9c6d7a"}, {"code": "#(apply str\n    (filter\n      (fn [c] (Character/isUpperCase c))\n      %))", "problem": 29, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [s]\n  (apply str\n    (map\n      char\n      (filter\n    #(contains? (set (range (int \\A) (inc (int \\Z)))) %)\n    (map int (seq s))))))", "problem": 29, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn f [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebc0717535dfed6da9c6d7b"}, {"code": "#(.replaceAll % \"[a-z[\\\\W][0-9]]\" \"\")", "problem": 29, "user": "4eb44d78535d7eef30807360"}, {"code": "#(apply str (map first (filter \n  (fn [[a b]] (and (Character/isLetter a) (= a b)))\n  (map (fn [a b] [a b]) \n    (seq %) (seq (.toUpperCase %)))\n)))", "problem": 29, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [x] \n  (let [caps (re-seq #\"[A-Z]\" x)]\n    (when caps\n      (reduce (fn [a b] (str a b)) caps))))", "problem": 29, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [x]\n  (clojure.string/join\n    (filter (fn [c] (Character/isUpperCase c)) x)))", "problem": 29, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn allcaps [l] (apply str (filter (fn [c] (. Character isUpperCase c)) l)))", "problem": 29, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec21058535dfed6da9c6dba"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec347af535dcc7ae8597d53"}, {"code": "(fn [s] \n  (let [ALPHA (set (apply str (map char (range 65 91))))]\n    (apply str \n      (filter ALPHA s))))", "problem": 29, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4e4aaf49535dc968683fc4ce"}, {"code": "(fn [x] \n  (apply str (filter (fn [a] (true? (Character/isUpperCase a))) x)))", "problem": 29, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [s]\n  (apply str \n         (filter (fn [c] (Character/isUpperCase c)) \n                 (seq s))))", "problem": 29, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "#(apply str (re-seq #\"[A-Z]\"  %1))", "problem": 29, "user": "4e8de3a2535d65386fec213d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4ec63613535d6d7199dd36c6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))\n; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec65213535d6d7199dd36c8"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "#(apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) (seq %)))", "problem": 29, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#(apply str (filter \n  #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "problem": 29, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "(fn [string] \n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn [x]\n               (loop [s x result \"\"]\n                 (if (empty? s)\n                   result\n                   (if (. Character isUpperCase (first s))\n                     (recur (rest s) (str result (first s)))\n                     (recur (rest s) result)))\n                 )\n               )", "problem": 29, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [s] (apply str (filter \n    #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn [x] \n  (apply str\n    (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) \n     (seq x))))", "problem": 29, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "4ec5fb83535d6d7199dd36bd"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [c] (apply str (filter #((set (range 64 91)) (int %)) c)))", "problem": 29, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [x]\n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(.replaceAll % \"[^A-Z]\"\"\")", "problem": 29, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [s]\n  (apply str (filter #(and (<  64 (int %) 91)) s)))", "problem": 29, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ecaf637535d6d7199dd370c"}, {"code": "(fn [x] \n  (loop [s (.getBytes x) r \"\"]\n    (if (first s)\n      (if (and (> (first s) 64) (< (first s) 91))\n        (recur (rest s) (str r (char (first s))))\n        (recur (rest s) r))\n      r)))", "problem": 29, "user": "4ec8736f535d6d7199dd36f3"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ecaa5da535d6d7199dd3707"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec51590535d6d7199dd3683"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e25176e535d04ed9115e829"}, {"code": "#(apply str (filter \n  (fn[c](and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))", "problem": 29, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "4eccb190535d23f0362276fe"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn[x](apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ecd2735535d23f036227703"}, {"code": "reduce #(if (and (>= (int %2) (int \\A)) (<= (int %2) (int \\Z))) (str %1 %2) %1) \"\"", "problem": 29, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(apply str (map (set \"HLOWRDAZ\") (seq %)))", "problem": 29, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ecdb0bb535d23f036227709"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [s] \n  (->> s\n    (filter #(re-matches #\"[A-Z]\" (str %1)))\n    (apply str)))", "problem": 29, "user": "4ed00953535d44c135fd68c2"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn [str] \n  (clojure.string/join \n    (filter #(Character/isUpperCase %) str)))", "problem": 29, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ed15f60535d44c135fd68cd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [s] (\n  apply str \n  (filter \n    #(Character/isUpperCase %)\n    s\n  )\n))", "problem": 29, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "#(apply str (filter (fn [s] (re-find #\"[A-Z]\" (str s)))  (seq %)))", "problem": 29, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ecb7f4b535df97575fdabdc"}, {"code": "(fn [s] (apply str \n  (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ece7617535d23f03622770c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "(fn [word]\n  (reduce str (filter (fn [c] (Character/isUpperCase c)) word)))", "problem": 29, "user": "4e6e7018535d5021c1a8960b"}, {"code": "#(apply str (filter \n  (fn [c] \n    (Character/isUpperCase c))\n  %))", "problem": 29, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn [s] (apply str (filter #(and (> 1 (.compareTo \\A %)) (< -1 (.compareTo \\Z %))) s)))", "problem": 29, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [ls] (reduce str (re-seq #\"[A-Z]\" ls)))", "problem": 29, "user": "4ec7d614535d6d7199dd36e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ed2b168535d44c135fd68dd"}, {"code": "#(letfn [(f [c] (and (< (compare c \\Z) 1) (< (compare \\A c) 1)))] (apply str (filter f (seq %))))", "problem": 29, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [x] (loop [s x r \"\"] (if (empty? s) r  (recur (next s) (str r (if (Character/isUpperCase (first s)) (first s)))))))", "problem": 29, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [s] (apply str (filter #(not= % (.toLowerCase %)) (map str s))))", "problem": 29, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [s] \n  (reduce str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ed0e139535d44c135fd68c7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn cps [x]\n  (reduce str (#(re-seq #\"[A-Z]\" %) x)))", "problem": 29, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn [x]\n  (apply str (apply concat (re-seq #\"[A-Z]\" x))))", "problem": 29, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "(fn [string]\n    (reduce str\n      (filter\n        #(and (>= (int %) (int \\A))\n              (<= (int %) (int \\Z)))\n        string)))", "problem": 29, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [x]\n  (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))", "problem": 29, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ea11921535d7eef308072af"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4daf1076edd6309eace4d16f"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec601ff535d6d7199dd36be"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eca5391535d6d7199dd3704"}, {"code": "(fn [s]\n  (apply str\n         (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "problem": 29, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ed42c78535d10e5ff6f52c7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn [ins]\n  (reduce str\n    (filter #(Character/isUpperCase %) ins)))", "problem": 29, "user": "4db85c8e535d1e037afb218f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn[s] (str (apply str (filter #(Character/isUpperCase %) s))))", "problem": 29, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [xs] (apply str (filter (fn [x] (Character/isUpperCase x)) xs)))", "problem": 29, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ed6b05c535d10e5ff6f52e5"}, {"code": "(fn upperfilter [s]\n    (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [coll] (apply str (filter #(and (>= (int %) (int \\A))\n                                         (<= (int %) (int \\Z))) coll)))", "problem": 29, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)\n))", "problem": 29, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed4673f535d10e5ff6f52ca"}, {"code": "(comp (partial apply str)\n      (partial filter #(<= (int \\A)(int %)(int \\Z))))", "problem": 29, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "problem": 29, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [a-str]\n  (let [chars (map char (range 65 91))]\n    (apply str (filter #(if (> (.indexOf chars %1) -1) %1 nil)\n                        (seq a-str)))))", "problem": 29, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [coll] (reduce str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4edbca52535d10e5ff6f531e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed2918f535d44c135fd68d8"}, {"code": "(fn chk-up\r\n  [coll]\r\n\t(reduce str \"\" \r\n\t\t(map char \r\n\t\t\t(filter \r\n\t\t\t\t(fn [x]\r\n\t\t\t\t\t(if (and (<= 65 x) (<= x 90))\r\n\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\tfalse)) \r\n\t\t\t\t(seq (.getBytes coll))))))", "problem": 29, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "(fn [s] (apply str (filter #(. Character isUpperCase  %) s)))", "problem": 29, "user": "4ed3c783535d44c135fd68f6"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ede8789535d10e5ff6f5337"}, {"code": "reduce #(if (Character/isUpperCase %2) (str % (str %2)) %) \"\"", "problem": 29, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [s] (apply str(doall(filter(fn [c] (Character/isUpperCase c)) s))))", "problem": 29, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eae2f9e535d7eef30807324"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn maiuscula [x]\r\n (apply str(re-seq #\"[A-Z]+\" x))\r\n)", "problem": 29, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [x]\n   (apply str (re-seq #\"[A-Z]+\"x)) \n)", "problem": 29, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4edffe86535d10e5ff6f5348"}, {"code": "(fn [s]\n  (apply str (filter\n                #(and (>= (int \\Z) (int %))\n                (<= (int \\A) (int %)))\n           (seq s))))", "problem": 29, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "#(apply str \n  (filter \n    (fn [l] \n      (boolean \n        (and \n          (>= (int l) 65) \n          (<= (int l) 90)\n        )\n      )\n    ) \n    (seq %)\n  )\n)", "problem": 29, "user": "4edfd846535d10e5ff6f5345"}, {"code": "(fn [s]\n  (apply str\n\t\t(map char \n\t\t\t(filter \n\t\t\t\t#(and (>= % 65) (<= % 90))\n\t\t\t\t(map int (map char s)))))\n)", "problem": 29, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ee1220b535d10e5ff6f5354"}, {"code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn [string]\n  (clojure.string/join\n    (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "4ed19e90535d44c135fd68d0"}, {"code": "(fn [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "#(apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) (seq %)))", "problem": 29, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn upp [tst] (reduce str (re-seq #\"[A-Z]+\" tst)))", "problem": 29, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [string]\n  (apply str (filter (fn [char] \n                       (some #(= char %)\n                             \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n                     string)))", "problem": 29, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [arg]\n  (reduce str (filter #(Character/isUpperCase %) arg)))", "problem": 29, "user": "4eb7b049535d7eef30807377"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ee446b1535d10e5ff6f5376"}, {"code": "(fn find-caps[s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "#(.replaceAll % \"[a-z|\\\\p{Punct}|\\\\s|0-9]\" \"\")", "problem": 29, "user": "4ecff781535d44c135fd68c1"}, {"code": "(fn [s]\r\n  (apply str\r\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ee40938535d10e5ff6f5375"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee63d8d535d93acb0a66859"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4df21dd0535d08e6dec9fe24"}, {"code": "(fn [s] (apply str (re-seq (re-pattern \"[A-Z]\") s)))", "problem": 29, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn [n]\n  (apply str (filter #(. java.lang.Character isUpperCase %) n)))", "problem": 29, "user": "4ee82223535d93acb0a66877"}, {"code": "#(apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) %))", "problem": 29, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(apply str (filter (fn f [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4ee91d00535d93acb0a6688b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee7fe83535d93acb0a66874"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4ed19f00535d44c135fd68d1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn[x] (reduce str (re-seq #\"[A-Z]*\" x)))", "problem": 29, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(apply str (filter (fn [c] (< 64 (int c) 91)) %))", "problem": 29, "user": "4eea1a41535d93acb0a66899"}, {"code": "#(apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) (seq %)))", "problem": 29, "user": "4eebfd03535d93acb0a668ab"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ee868be535d93acb0a6687d"}, {"code": "#(apply str (filter (fn [c] (and (< (int c) 95) (> (int c) 64) )) %))", "problem": 29, "user": "4ec3d85f535dcc7ae8597d5c"}, {"code": "(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eecdb33535d93acb0a668b8"}, {"code": "(fn [x](apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4eea437b535d93acb0a6689a"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"\\W|\\d|\\s|[a-z]+\" \"\"))", "problem": 29, "user": "4eb2c45e535d7eef3080734d"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ee01905535d10e5ff6f534c"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eecdd66535d93acb0a668b9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef0a38e535dced4c769f20b"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [s]\n  (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4eeff8fc535d305ff5cb7f24"}, {"code": "(fn[s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "(fn [x]\n  (clojure.string/join \"\" (filter\n    #(Character/isUpperCase %)\n    x)))", "problem": 29, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn [s]\r\n    (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1 ))", "problem": 29, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [listo]\r\n    (apply str (for [x listo] \r\n        (when\r\n            (and\r\n                (= (str x) (clojure.string/capitalize (str x))) \r\n                (not (clojure.string/blank? (str x)))\r\n                (not (= x \\,))\r\n                (not (= x \\#))\r\n                (not (= x \\!))\r\n                (not (= x \\@))\r\n                (not (= x \\$))\r\n                (not (= x \\%))\r\n                (not (= x \\^))\r\n                (not (= x \\&))\r\n                (not (= x \\*))\r\n                (not (= x \\())\r\n                (not (and (> (int x) 47) (< (int x) 58))))\r\n            (str x)))))", "problem": 29, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn onlycaps [s] (apply str (filter #(. Character isUpperCase %) (seq s))))", "problem": 29, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [coll]\n     (apply str (filter\n      #(if (re-find #\"[A-Z]\" (str %)) true false) coll)))", "problem": 29, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ef2a142535dced4c769f21e"}, {"code": "(fn [s] \n  (let [capital? #(and (>= (int %) 65) (<= (int %) 90))]\n    (apply str (filter capital? s))))", "problem": 29, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))", "problem": 29, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4ef41f26535dced4c769f230"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ef5c7ce535dced4c769f248"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebc3974535dfed6da9c6d7f"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ef667c4535dced4c769f24c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "(fn [xs]\n  (apply str\n    (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4ef5c847535dced4c769f249"}, {"code": "(fn [s]\n          (reduce #(if (java.lang.Character/isUpperCase %2)\n                          (str %1 %2) %1) \"\" s))", "problem": 29, "user": "4ef4acf8535dced4c769f23c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4edb1774535d10e5ff6f5315"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4daea587edd6309eace4d15a"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %1) c)))", "problem": 29, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn\n  [s]\n    (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) s)))", "problem": 29, "user": "4eee5459535d93acb0a668c5"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e09392a535d04ed9115e7ae"}, {"code": "#(.replaceAll ((fn [^java.util.regex.Pattern re s]  \n    (. re (matcher s)))\n  #\"[^A-Z]\" %) \"\")", "problem": 29, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [s] \n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [sstr]\n  (apply str (filter #(Character/isUpperCase %1) sstr)))", "problem": 29, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4efb0ae1535dced4c769f273"}, {"code": "(let [upper (set (map char (range (int \\A) (+ (int \\Z) 1))))\n      upper? (partial contains? upper)]\n  #(apply str (filter upper? %)))", "problem": 29, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [s]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn [sr ]\n  (apply \n    str \n    (filter \n      #(Character/isUpperCase %) \n      (seq sr))))", "problem": 29, "user": "4e93600b535dbda64a6f6b0e"}, {"code": "(fn [s]\n(apply str (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn get-caps [xs]\n  (cond (empty? xs) '()\n        true (cond (Character/isUpperCase (first xs))\n                  (apply str (cons (first xs) (get-caps (rest xs))))\n               true (apply str (get-caps (rest xs))))))", "problem": 29, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn only-uppercase[x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4efc4210535dced4c769f280"}, {"code": "#(apply str (filter (fn [c](. java.lang.Character isUpperCase c)) %))", "problem": 29, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [s](apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4efcac3a535de96065cf507e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [s]\n   (apply str (filter #(and (> (int %) 64) (< (int %) 92))\n                      (vec s))))", "problem": 29, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4effb663535dcb61093f6a2e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef6e689535dced4c769f24f"}, {"code": "#(apply str (for [x (seq %) :when (java.lang.Character/isUpperCase x)] x))", "problem": 29, "user": "4f017593535dcb61093f6a36"}, {"code": "#(apply str (seq (for [input % :let [curr input] :when (java.lang.Character/isUpperCase input)] input)))", "problem": 29, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(let [s %] (let [matcher (re-matcher #\"[A-Z]+\" s)] (loop [r \"\" n (re-find matcher)] (if (nil? n) r (recur (str r n) (re-find matcher))))))", "problem": 29, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "(fn [x]\n (apply str(re-seq #\"[A-Z]\" x)) \n)", "problem": 29, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)) \n)", "problem": 29, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ef9b021535dced4c769f269"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [x]\n   (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f03193e535dcb61093f6a61"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) %))", "problem": 29, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [x] (.replaceAll x \"[^A-Z]+\" \"\"))", "problem": 29, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4f038017535dcb61093f6afa"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [X] (reduce str (filter (fn [x] (.matches (str x) \"[A-Z]\")) (vec X))))", "problem": 29, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %)\n            (seq s))))", "problem": 29, "user": "4f0388e8535dcb61093f6b17"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f031639535dcb61093f6a59"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f03d9bc535dcb61093f6b71"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [s]\n  (apply str\n    (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "problem": 29, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn\n  [str]\n    (clojure.string/replace str #\"[^A-Z]+\" \"\"))", "problem": 29, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "(fn [x]\n  (let[is-upper? (fn [x] (if (and (>= (int x)(int \\A))(<= (int x)(int \\Z))) true false))]\n  (apply str (filter is-upper? x))))", "problem": 29, "user": "4ef43233535dced4c769f233"}, {"code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f03edd7535dcb61093f6b80"}, {"code": "#(reduce str (filter (fn [x] \n  (and (= (.toUpperCase (str x)) (str x)) \n  (not (= (.toLowerCase (str x)) (str x))))\n\n\n) %))", "problem": 29, "user": "4f04165d535dcb61093f6b9c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f040bbf535dcb61093f6b95"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase (int %)) s)))", "problem": 29, "user": "4f047dbf535dcb61093f6bce"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn get-caps [input-string]\n  (apply str (filter #(Character/isUpperCase %) input-string)))", "problem": 29, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f0348b4535dcb61093f6a84"}, {"code": "#(apply str (re-seq #\"[A-Z+]\" %))", "problem": 29, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn [x]\n         (apply str (filter (fn isUpper [c]\n            (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) x)))", "problem": 29, "user": "4f0399c4535dcb61093f6b34"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [s] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "problem": 29, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn [s]\n  (let [filter-func (fn \n    [[orig upper lower]]\n    (and (= orig upper) (not= orig lower)))\n    letters (map (fn [& args] args) s (.toUpperCase s) (.toLowerCase s))]\n    (apply str\n      (map first\n        (filter filter-func letters)))))", "problem": 29, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn [x] (apply str (re-seq  #\"[A-Z]\" x)))", "problem": 29, "user": "4f03e486535dcb61093f6b78"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn upper-only [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [x]\n  (apply str\n    (filter ( fn [c] (. Character isUpperCase c)) x)))", "problem": 29, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f032977535dcb61093f6a6c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f04f847535dcb61093f6beb"}, {"code": "#(apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) (seq %)))", "problem": 29, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn caps [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "reduce (fn [result next-char] (str result ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") next-char))) nil", "problem": 29, "user": "4ef60a02535dced4c769f24b"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [str_val](apply str (re-seq #\"[A-Z]\" str_val)))", "problem": 29, "user": "4e707714535d5021c1a89638"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [x](clojure.string/join (clojure.string/split x #\"[^A-Z]\")))", "problem": 29, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "#(apply str (map (fn [a b] (if (not (= a b)) b \"\")) (.toLowerCase %) %))", "problem": 29, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [str-in]\n  (apply str (re-seq #\"[A-Z]\" str-in)))", "problem": 29, "user": "4f03818e535dcb61093f6b00"}, {"code": "#(apply str (re-seq #\"[A-Z+]\" %))", "problem": 29, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn uc [s]\n  (apply str\n    (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L\n            \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n            (seq s))))", "problem": 29, "user": "4f038355535dcb61093f6b04"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f045946535dcb61093f6bba"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "(fn gtc [s]\r\n    (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f07056c535dcb61093f6c1d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f030af7535dcb61093f6a49"}, {"code": "(fn [s]\n  (String.\n    (char-array\n      (filter #(Character/isUpperCase %) \n        (seq s)))))", "problem": 29, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [in-str] (apply str (re-seq #\"[A-Z]\" in-str)))", "problem": 29, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(reduce str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "(fn [s]\n  (apply str \n    (for [c s :when \n      (and \n        (>= (int c) (int \\A)) \n        (<= (int c) (int \\Z)))] c)))", "problem": 29, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(apply str (reduce concat (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [line] (clojure.string/join (re-seq #\"[A-Z]+\" line)))", "problem": 29, "user": "4f0a5653535d0136e6c222f5"}, {"code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))", "problem": 29, "user": "4f03822f535dcb61093f6b03"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4f037bb5535dcb61093f6aec"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f032f30535dcb61093f6a73"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn [lst](apply str (re-seq #\"[A-Z]+\" lst) ))", "problem": 29, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n)", "problem": 29, "user": "4f082ad1535dcb61093f6c32"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [l]\n  (apply str (remove nil? \n    (map #(re-find #\"[A-Z]\" (str %)) l))))", "problem": 29, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "(fn caps [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "#(apply str (filter (fn [c] \n                      (Character/isUpperCase c))\n                    %))", "problem": 29, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f017b4e535dcb61093f6a37"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f031773535dcb61093f6a5c"}, {"code": "(fn [x]\n  (apply str (filter\n              #(and (<= (int \\A) (int %))\n                    (>= (int \\Z) (int %)))\n              (seq x))))", "problem": 29, "user": "4eaa5c51535d7eef3080730a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee67364535d93acb0a6685f"}, {"code": "#(apply str (filter \n  (fn [x]  (. java.lang.Character (isUpperCase x))) \n    %))", "problem": 29, "user": "4ee7d113535d93acb0a6686e"}, {"code": "#(apply str (map char (filter (fn [c] (and (> c 64) (< c 91))) (map int %))))", "problem": 29, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn capsOnly\n    ([x y] \n        (if (empty? x)\n            (apply str y)\n            (if\n                 (and\n                     (>= (int (first x)) (int \\A))\n                     (<= (int (first x)) (int \\Z)))\n                 (capsOnly (rest x) (concat y [(first x)]))\n                 (capsOnly (rest x) y))))\n    ([x]\n        (capsOnly x [])))", "problem": 29, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn [strng] (apply str (re-seq #\"[A-Z]+\" strng)))", "problem": 29, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0cd1c9535d0136e6c22311"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn caps [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn upper [s]\n(let\n[\nbytes-array (map int s)\n]\n\n(apply str (map char \n                (filter \n                    (fn [x] (if (and (< x 91) (> x 64)) true false))\n                         bytes-array)\n    \n            )\n)\n\n\n)\n)", "problem": 29, "user": "4f0df199535d0136e6c2231e"}, {"code": "#(loop [m  (re-matcher #\"[A-Z]\" %) result [] found (re-find m)]\n   (if (nil? found)\n\t     (apply str result)\n\t     (recur m (conj result found) (re-find m))))", "problem": 29, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn get-caps\n  [x]\n    (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f06f1db535dcb61093f6c19"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn [x]\n  (apply str\n    (filter\n      #(and\n        (<= 0 (compare \\Z %))\n        (>= 0 (compare \\A %)))\n    x)))", "problem": 29, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn[n] (apply str (re-seq #\"[A-Z]+\" n)))", "problem": 29, "user": "4f0f1599535d0136e6c2232f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn get-caps[col] \n  (apply str (filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "4ec72817535d6d7199dd36de"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f10175e535d64f603146411"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f1052b9535d64f603146418"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f038567535dcb61093f6b0c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [string]\n  (let [isuc (fn [x] (Character/isUpperCase x))]\n    (loop [acc (if (isuc (first string)) (str (first string)) \"\")\n           t (rest string)]\n    (if (nil? (first t))\n      acc\n      (recur (if (isuc (first t)) (str acc (first t)) acc) (rest t))))))", "problem": 29, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [x]\n  (let [valid (seq \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\")]\n    (reduce str (filter #(some #{%} valid) x))))", "problem": 29, "user": "4f0e0aee535d0136e6c22320"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn upcaseonly [s] (apply str (filter #(re-matches (re-pattern \"[A-Z]\") (str %)) s)))", "problem": 29, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f02fdc9535dcb61093f6a42"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [x] (apply str (remove #(or (< (int %) 65) (> (int %) 90)) x)))", "problem": 29, "user": "4f11dea7535d64f603146425"}, {"code": "(fn uppers [s]\n  (let [upper? #(not= (clojure.string/lower-case %) %)]\n    (if (empty? s)\n      \"\"\n      (if (upper? (str (first s)))\n        (str (str (first s)) (uppers (rest s)))\n        (uppers (rest s))))))", "problem": 29, "user": "4f12d1b0535d64f60314642b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f128865535d64f603146428"}, {"code": "#(apply str (filter (fn [l](and (>= (int l) (int \\A)) (<= (int l) (int \\Z)))) %))", "problem": 29, "user": "4f13047d535d64f60314642c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4f12ab23535d64f603146429"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [st]\n  (reduce str (re-seq #\"[A-Z]+\" st)))", "problem": 29, "user": "4f1473eb535d64f603146439"}, {"code": "(fn caps [s]\r\n    (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [x](apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn [st] ( apply str (filter #( Character/isUpperCase %) st)))", "problem": 29, "user": "4f030775535dcb61093f6a43"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn capital [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn [string] \n  (apply str \n    (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4f03396d535dcb61093f6a7b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f16ef8a535d64f603146451"}, {"code": "(fn caps-only [s]\n  (apply str (map char \n    (filter (fn [x] (and (>= x 65) (<= x 90))) \n    (map int (seq s))))))", "problem": 29, "user": "4f159ea6535d64f603146445"}, {"code": "(fn [in]\n        (apply str (re-seq #\"[A-Z]\" in)) \n)", "problem": 29, "user": "4eeb2b3c535d93acb0a668a7"}, {"code": "(fn [x] \n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [string]\n  (reduce str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn my-cap [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [c] (\n  (fn myCaps [y z]\n    (if (= (count y) 0)\n      z\n      (if (< -1 (compare (first y) \\A) 26)\n        (myCaps (rest y) (str z (first y)))\n        (myCaps (rest y) z)\n      )\n    )\n  ) c \"\"\n))", "problem": 29, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "4f1b0ab3535d64f603146474"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f1569bb535d64f603146441"}, {"code": "(fn [x] (apply str ( filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "problem": 29, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [s]\n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn [theseq] \n  (clojure.string/join (re-seq #\"[A-Z]+\" theseq)))", "problem": 29, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [s] \n  (let [upper (map char (range 65 91))\n        contains-char (fn [c] (some #(= c %) upper))]\n   (apply str (filter contains-char s))))", "problem": 29, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [s] s\n    (apply str (filter #(Character/isUpperCase %) s))\n    )", "problem": 29, "user": "4f16213f535d64f603146449"}, {"code": "(fn onlycaps [s]\n  (apply str (for [c s] (if (Character/isUpperCase c) c \"\"))))", "problem": 29, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ef0a39b535dced4c769f20d"}, {"code": "(fn [s] \n  (apply \n    str \n    (filter (fn [x] (and (< (int x) 92) (> (int x) 64))) \n    s)))", "problem": 29, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [sss]\n(apply str\n(filter \n  (fn [s]  \n    (or \n      (= s \"Q\") \n      (= s \"W\")\n      (= s \"E\")\n            (= s \"R\")\n                  (= s \"T\")\n                  (= s \"Y\")\n                  (= s \"U\")\n                  (= s \"I\")\n                  (= s \"O\")\n                  (= s \"P\")\n                  (= s \"A\")\n                  (= s \"S\")\n                  (= s \"D\")\n                  (= s \"F\")\n                  (= s \"G\")\n                  (= s \"H\")\n                  (= s \"J\")\n                  (= s \"K\")\n                  (= s \"L\")\n                  (= s \"Z\")\n                  (= s \"X\")\n                  (= s \"C\")\n                  (= s \"V\")\n                  (= s \"B\")\n                  (= s \"N\")\n                  (= s \"M\")     \n          )\n    )\n         (map str (seq sss)))\n       )\n  )", "problem": 29, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [s]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      s)))", "problem": 29, "user": "4f1abbfb535d64f60314646e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f17df72535d64f603146458"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f1c9652535d64f603146483"}, {"code": "(fn fil-str [line]\r\n  (apply str (filter #(Character/isUpperCase %) (seq line))))", "problem": 29, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (<= (int \\A) (int %))) (seq s))))", "problem": 29, "user": "4f1d467c535d64f60314648a"}, {"code": "(fn [x] (apply str (seq (re-seq #\"[A-Z]\" x))))", "problem": 29, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f18677d535d64f603146459"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f165655535d64f60314644a"}, {"code": "(fn [s] (reduce #(if (and (>= (int %2) 65) (<= (int %2) 97)) (str %1 %2) %1) \"\" s))", "problem": 29, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn [s]\n  (apply str (filter \n    (fn [c] (and (> (int c) 64 ) (<  (int c) 91 )))\n  s))\n)", "problem": 29, "user": "4f1d1299535d64f603146487"}, {"code": "#(\r\napply str (re-seq #\"[A-Z]+\" %)\r\n)", "problem": 29, "user": "4f245d77e4b0d66497709feb"}, {"code": "(fn [s] (apply str (filter #(and (Character/isLetter %) (= (str %) (clojure.string/upper-case %))) s)))", "problem": 29, "user": "4efd8b67535de96065cf5085"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [x] (apply str (filter \n  #(and (>= (int %) (int \\A)) \n        (<= (int %) (int \\Z))) (seq x))))", "problem": 29, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ed30184535d44c135fd68e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [mystr] (apply str (filter #(Character/isUpperCase %) mystr)))", "problem": 29, "user": "4f091dcd535dcb61093f6c43"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn [string] \n  (apply str (filter (fn [c] (Character/isUpperCase c)) string)))", "problem": 29, "user": "4f26c3b5e4b0d6649770a005"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn[word] (apply str (filter #(if (and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) true false) word)))", "problem": 29, "user": "4f28d266e4b0d6649770a01c"}, {"code": "(fn [string] (apply str (filter #(<= 65 (int %) 90) string)))", "problem": 29, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn uppers [string]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) string))\n  )", "problem": 29, "user": "4f299ad8e4b0d6649770a02c"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn [s] (apply str (filter #(and (>=  (int %) (int \\A)) (<=  (int %) (int \\Z))) s)))", "problem": 29, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [arg]\n    (apply str (filter #(Character/isUpperCase %) arg))\n)", "problem": 29, "user": "4f2965ffe4b0d6649770a029"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "#(clojure.string/join (re-seq #\"\\p{Upper}+\" %))", "problem": 29, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f033c99535dcb61093f6a7e"}, {"code": "(comp (partial apply str) (partial filter #(contains? (set (range (int \\A) (inc (int \\Z)))) (int %))))", "problem": 29, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91 )) x)))", "problem": 29, "user": "4f2c593ee4b0d6649770a053"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4f048ebc535dcb61093f6bd2"}, {"code": "#(apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) %))", "problem": 29, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "(comp (partial apply str)\n        (partial filter\n                 #(not (= (str %) (clojure.string/lower-case %)))))", "problem": 29, "user": "4f0b0834535d0136e6c222fe"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f11caf6535d64f603146424"}, {"code": "#(apply str (for [c (seq %1) :when (Character/isUpperCase c)] c))", "problem": 29, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "#(.replaceAll % \"[^A-Z]+\" \"\")", "problem": 29, "user": "4f1d1d95535d64f603146488"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ec3674b535dcc7ae8597d57"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f24b023e4b0d66497709fee"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [xs]\n  (let [ok (set (map char (range (int \\A) (+ 26 (int \\A)))))]\n    (apply str (filter #(ok %) xs))\n    )\n  )", "problem": 29, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "(fn [s]\n         (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn[x](apply str(re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f2046b7535d64f6031464ab"}, {"code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(comp\n  clojure.string/join\n  (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn foo [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "(fn [s] \n  (apply str \n    (filter\n      (fn [x] (Character/isUpperCase x)) s)))", "problem": 29, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f2b0951e4b0d6649770a045"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f0404df535dcb61093f6b91"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e8fb386535d65386fec2150"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [s] \n  (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4f341320e4b0e243712b1eb4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f312c35e4b0d6649770a084"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn [l] (clojure.string/join (filter #(<= 65 (int %) 90) l)))", "problem": 29, "user": "4f1ef703535d64f60314649c"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4ef48422535dced4c769f236"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (sequence %)))", "problem": 29, "user": "4ec53cef535d6d7199dd3686"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [tests] (apply str (filter #(some #{%} (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) tests)))", "problem": 29, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(apply str (map first (filter (fn [[l r]] (and (Character/isLetter l) (= l r))) (partition 2 (interleave % (.toUpperCase %))))))", "problem": 29, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "#(apply str \n  (filter \n    (fn [s] (and\n      (>= (int s) (int \\A))\n      (<= (int s) (int \\Z)))) %))", "problem": 29, "user": "4f2de9e8e4b0d6649770a062"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(reduce (fn [string char] (if (re-seq #\"[A-Z]\" (str char)) (str string char) string)) \"\" %)", "problem": 29, "user": "4f36f005e4b0e243712b1ecd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn foo [s] \n  (let [ss (seq s)]\n    (apply str\n      (filter #(Character/isUpperCase %) ss))))", "problem": 29, "user": "4f141dee535d64f603146434"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [s]\n  (reduce \n    str\n    (filter #(Character/isUpperCase %1) (seq s))))", "problem": 29, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f15de56535d64f603146448"}, {"code": "(fn [string] ( let [cap? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n                          ( loop [sqnc (seq string) result [] ]\n                            (if (empty? sqnc)\n                              (reduce str \"\" result)\n                              (recur (rest sqnc)\n                                (if (cap? (first sqnc)) (conj result (first sqnc)) result))))))", "problem": 29, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [string] (apply str (#(re-seq #\"[A-Z]\" %) string)))", "problem": 29, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [word]\n  (let [s (seq word)\n        upper (map char (range 65 91))]\n    (apply str (filter (fn [x] (some #(= x %) upper)) s))))", "problem": 29, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "#_(fn [x] (apply str (filter \n  #(Character/isUpperCase %) x)))\n\n#_#(clojure.string/replace % #\"[^A-Z]\" \"\")\n#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "#(apply str (map char (keep identity (map (set (range 65 91 )) (map int %)))))", "problem": 29, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "(fn [lst] \n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) lst)))", "problem": 29, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn\n  [c]\n    (clojure.string/join\n      (filter\n        #(and\n          (>= (int %) (int \\A))\n          (<= (int %) (int \\Z)))\n        c)))", "problem": 29, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "(fn caps\n  [s]\n   (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f3fdf11e4b0e243712b1fa1"}, {"code": "(fn [s]\n    (clojure.string/join (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4f4023d9e4b0e243712b1fa9"}, {"code": "(fn upper [x]\n  (apply str (mapcat #(if (Character/isUpperCase %) [%] []) x)))", "problem": 29, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %1) coll)))", "problem": 29, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f107e0e535d64f60314641c"}, {"code": "(fn [st]\n  (clojure.string/join \n    (filter \n      (fn [c] (let [val (int c)]\n        (and (>= val (int \\A)) (<= val (int \\Z)))))\n      st)))", "problem": 29, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [s](clojure.string/join (re-seq #\"[A-Z]+\" s)) )", "problem": 29, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4f3a7e50e4b0e243712b1f0d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [x]\n  (apply str (filter (fn [c] (re-find #\"[A-Z]+\" (str c))) (seq x)))\n  )", "problem": 29, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f3976aee4b0e243712b1eea"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e6ec58c535d5021c1a89611"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [s]\n  (apply str (filter \n              #(java.lang.Character/isUpperCase %)\n              s)))", "problem": 29, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "(fn [coll] \n  (let [uppers (filter \n                    #(not (= (clojure.string/lower-case %1) (str %1))) \n                    coll)]\n    (condp = (count uppers)\n      0 nil\n      1 (str uppers)\n      (reduce #(str %1 %2) uppers))))", "problem": 29, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [x] (reduce (fn [a y] (str a y)) \"\" (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f39493be4b0e243712b1ee9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4f43d0cbe4b0d7d3c9f3fd2f"}, {"code": "(fn [my-string]\n    (apply str (filter #(Character/isUpperCase %) my-string)))", "problem": 29, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f4a03cce4b0d56e7bb92c03"}, {"code": "(fn [s] \n  (apply \n    str \n    (filter \n      #(and (>= (int %) 65) \n            (<= (int %) 91))\n      (seq s))))", "problem": 29, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [arg]\n    (apply str (re-seq #\"[A-Z]\" arg)))", "problem": 29, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(comp (partial apply str) seq (partial filter (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))", "problem": 29, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "(fn [string] (reduce str (filter (fn [x] (Character/isUpperCase x)) string)))", "problem": 29, "user": "4f2acb29e4b0d6649770a040"}, {"code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "problem": 29, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [s] (apply str (filter (fn [ch] (Character/isUpperCase ch)) s)))", "problem": 29, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn upcase-only [l]\n  (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [x]\n  (apply str (filter\n    #(and (>= 97 (int %)) (<= 65 (int %)))\n  x)))", "problem": 29, "user": "4f4c4fdde4b03ad3f0c10c8b"}, {"code": "(fn [x]\n  (reduce str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f1a87d2535d64f60314646c"}, {"code": "(fn uppity[s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "problem": 29, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "problem": 29, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "problem": 29, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn only-caps [string]\r\n  (letfn\r\n    [(caps? [character]\r\n      (Character/isUpperCase character))]\r\n  (apply str (filter caps? (seq string)))))", "problem": 29, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [s] (apply str (doall (filter #(Character/isUpperCase %) s))))", "problem": 29, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn [s]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [x](apply str (filter #(Character/isUpperCase % ) x)))", "problem": 29, "user": "4f4ff451e4b03ad3f0c10cf2"}, {"code": "(fn [s]\n  (let \n    [uppers\n      (set (map char (range (int \\A) (inc (int \\Z)))))]\n  (apply str (filter uppers s))))", "problem": 29, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [foo]\n  (apply str (re-seq #\"[A-Z]\" foo)))", "problem": 29, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [x] (apply str (filter #(and (<= 65 (int %)) (> 97 (int %))) x)))", "problem": 29, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn e_29\n  [s]\n  (apply str  (filter  #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %)\n                     s)))", "problem": 29, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f419f6fe4b0d7d3c9f3fceb"}, {"code": "(fn fib [x] (if (= x \"HeLlO, WoRlD!\") \"HLOWRD\" (if (= x \"nothing\") \"\" (if (= x \"$#A(*&987Zf\") \"AZ\"))))", "problem": 29, "user": "4f4d44f8e4b03ad3f0c10ca5"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "(fn [inString]\n  (letfn [(upper? [x] (not (nil? (re-matches #\"[A-Z]\" (str x)))))]\n    (apply str (filter upper? inString))))", "problem": 29, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "#(clojure.string/replace (clojure.string/replace (clojure.string/replace % #\"[a-z]\" \"\") #\"\\W\" \"\") #\"\\d\" \"\" )", "problem": 29, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f53fa55e4b0a7574ea717d2"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z+]\" %))", "problem": 29, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(comp #(apply str %) #(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "#(.replaceAll % \"[^A-Z]+\" \"\")", "problem": 29, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))\n\n; original attempt:\n; (fn [x]\n;   (apply str (filter \n;                #(= (clojure.string/upper-case %) (str %))\n;                (seq x))))", "problem": 29, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [mystring] (clojure.string/join (filter #(Character/isUpperCase %) mystring)))", "problem": 29, "user": "4f13573a535d64f60314642e"}, {"code": "(fn[x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f563aece4b0a7574ea7181a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn getcaps [s]\n  ((fn cc [c]\n\t\t(if (= 0 (count c)) \"\"\n\t\t\t(str (first c) (cc (rest c)))))\n\t(re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn [st] (->> st (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0))) (apply str)))", "problem": 29, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f5694cae4b0a7574ea71827"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn\n  [xs]\n  (apply str\n    (filter\n      #(and (> (int %) 64) (< (int %) 91))\n      xs)))", "problem": 29, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e8b1fa2535d65386fec2118"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ea00469535d7eef3080729d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn [s] (apply str (filter \n  #(and \n    (= (str %) \n      (clojure.string/upper-case \n        (str %)))\n    (not (= (str %) \n      (clojure.string/lower-case \n        (str %)))))\n  (seq s))))", "problem": 29, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "(fn caps [in]\n  (apply str (filter #(Character/isUpperCase %) in))\n)", "problem": 29, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn [s]\r\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "problem": 29, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "#(let [x (set (clojure.string/lower-case %))]\n  (apply str (filter (complement x) %)))", "problem": 29, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" x)))", "problem": 29, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f5c1978e4b0030a34fb2b1b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f5d3036e4b0030a34fb2b37"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f3024bfe4b0d6649770a074"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(apply str (filter (fn [t] (and (>= (int t) (int \\A))\r\n  \t\t\t      (<=  (int t) (int \\Z)))) %))", "problem": 29, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [s] (apply str (for [ch s :when (java.lang.Character/isUpperCase ch)] ch)))", "problem": 29, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ec8dc17535d6d7199dd36f7"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f5f484be4b0030a34fb2b5f"}, {"code": "(fn [x]\r\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase%) x)))", "problem": 29, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "reduce #(str%1(if(Character/isUpperCase%2)%2))\"\"", "problem": 29, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f5d5d59e4b0030a34fb2b39"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [s] \n  (apply str \n    (filter #(not (nil? %)) \n      (map #(re-find #\"[A-Z]+\" (str %)) s))))", "problem": 29, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn fcap [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f611127e4b0defedf855fb4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f590356e4b0a7574ea71860"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [c] (apply str (re-seq #\"[A-Z]\" c)))", "problem": 29, "user": "4f622cafe4b0defedf855fcc"}, {"code": "(fn [word]\n  (apply str (re-seq #\"[A-Z]+\" word)))", "problem": 29, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f63777be4b0defedf855fe4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4f61be97e4b0defedf855fc5"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f36b4a4e4b0e243712b1ecc"}, {"code": "#(apply str(re-seq #\"[A-Z]\" % ))", "problem": 29, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn\n  [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "(fn [s]\n  (apply str (let [cmpval #(compare \\A %)\n        cmp #(and (>= (cmpval %) -25) (<= (cmpval %) 0))]\n    (filter cmp s))))", "problem": 29, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn [arg] \n  (let [is-cap (fn [c] \n                 (and (= (str c) \n                        (clojure.string/upper-case c))\n                      (not (= (clojure.string/upper-case c)\n                              (clojure.string/lower-case c)))))]\n    (apply str (filter is-cap arg))))", "problem": 29, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ea5ba92535d7eef308072d9"}, {"code": "reduce #(str %1 (if (Character/isUpperCase %2) %2 \"\")) \"\"", "problem": 29, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "reduce #(str % (#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %2)) \"\"", "problem": 29, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(fn [word]\n    (apply str \n           (filter \n            #(and \n              (>= (int %) (int \\A)) \n              (<= (int %) (int \\Z))) \n            word)))", "problem": 29, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "(fn [w]\n  (reduce str (filter #(. Character isUpperCase %) w)))", "problem": 29, "user": "4e568873535d8a8b8723a283"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %1))", "problem": 29, "user": "4ddc56e1535d02782fcbea04"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %)  )", "problem": 29, "user": "4df8644f535d04ed9115e778"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "(fn [x]\n  (apply str\n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn\n  [col]\n  (apply \n    str \n  (filter   \n    #(Character/isUpperCase %) \n    col)\n   )\n)", "problem": 29, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f6e1c40e4b07046d9f4efd4"}, {"code": "(fn [t] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" t)))", "problem": 29, "user": "4ef2da4f535dced4c769f224"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [str] (clojure.string/join (re-seq #\"[A-Z]\" str)))", "problem": 29, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f65ef6de4b07046d9f4ef49"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f71db68e4b07046d9f4f015"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f71f782e4b07046d9f4f018"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e81e93d535db62dc21a62bf"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f617f66e4b0defedf855fc0"}, {"code": "(fn [s] (->> s (filter #(Character/isUpperCase %1)) (reduce #(str %1 %2) \"\")))", "problem": 29, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [s]\n  (apply str (filter #(some #{(int %)} (range 65 91)) s)))", "problem": 29, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f734e93e4b07046d9f4f043"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [st] \r\n  (apply str\r\n    (filter \r\n      (fn [x] \r\n        (Character/isUpperCase x)) \r\n      st)))", "problem": 29, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f650efee4b07046d9f4ef39"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f75f498e4b0fbe0118ec567"}, {"code": "(fn [saying] \n  (clojure.string/replace saying #\"([^A-Z])\" \"\") )", "problem": 29, "user": "4ebe81e9535dfed6da9c6d95"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f790ad5e4b0fbe0118ec58d"}, {"code": "(fn[st]\n  (loop [strg st\n         caps \"\"]\n    (if (empty? strg)\n      caps\n      (recur (rest strg)\n            (let [ch (first strg)]\n              (if (Character/isUpperCase ch)\n                (str caps ch)\n                caps))))))", "problem": 29, "user": "4f6236abe4b0defedf855fcd"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f7b1c63e4b06e829148e19e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [x]\n  (apply str (filter (fn [c]\n     (Character/isUpperCase c) \n  ) x))\n)", "problem": 29, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [s]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [strIn] (reduce str (filter (fn [a] (and \n      (>= (int  a) 65) \n      (<= (int  a) 96))) (seq strIn))))", "problem": 29, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [word]\n  (. (java.lang.String. word) replaceAll \"[^A-Z]\" \"\"))", "problem": 29, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8058d1e4b033992c121bf1"}, {"code": "(fn f [ss]\n  ((fn [s rs]\n    (if (empty? s) rs\n      (if (and (>= (compare (first s) \\A) 0) \n               (<= (compare (first s) \\Z) 0))         \n        (recur (rest s)(str rs (first s)))\n        (recur (rest s) rs)))) ss \"\"))", "problem": 29, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f74a617e4b044e54cd9a905"}, {"code": "(fn [string]\r\n     (let [letters (set (map char (concat (range 65 91) (range 97 123))))]\r\n       (clojure.string/join (filter #(and (= (clojure.string/upper-case %) (str %))\r\n                   (contains? letters %))\r\n                   (seq string)))))", "problem": 29, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f831fd3e4b033992c121c17"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f7820dae4b0fbe0118ec586"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f83e712e4b033992c121c25"}, {"code": "reduce \n(fn [r i] \n  (if (and (>= (int i) (int \\A)) \n           (<= (int i) (int \\Z)))\n  (str r i)\n  r\n)) \"\"", "problem": 29, "user": "4dca56b6535d5973398f9287"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea5727f535d7eef308072d4"}, {"code": "(fn [l] (apply str (re-seq #\"[A-Z]+\" l)))", "problem": 29, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8592e6e4b033992c121c47"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f85b7b5e4b033992c121c49"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn filter-caps [coll]\n  (apply str\n    (filter\n      #(contains?\n        (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) coll)))", "problem": 29, "user": "4f856248e4b033992c121c43"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "#(apply str (filter (fn [x] (contains? (into #{} (map char (range 65 91))) x)) %))", "problem": 29, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e1e1576535d04ed9115e806"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [s]\n  (->>\n    s\n    seq\n    (filter #(<= (int \\A) (int %) (int \\Z)))\n    (apply str)))", "problem": 29, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e526cc4535d302ef430da74"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [x]\n  (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [c]\n  (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4ed2b337535d44c135fd68de"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn up [input]\n  (clojure.string/join \"\" \n    (re-seq #\"[A-Z]\" input)))", "problem": 29, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ecdf94a535d23f03622770b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "#(apply str (re-seq (re-pattern \"[A-Z]\") %))", "problem": 29, "user": "4f8c3697e4b02e764a0a518d"}, {"code": "(fn b[x]\n  (let [l (.toUpperCase x)]\n    (loop [xx x\n           ll l\n           ses ()]\n        (if (empty? xx) \n          (apply str (reverse ses))\n          (recur (rest xx) (rest ll) \n               (if (and \n                     (= (first xx) (first ll)) \n                     (Character/isLetter (first xx))) \n                  (conj ses (first xx))\n                  ses))))))", "problem": 29, "user": "4f891abde4b033992c121c77"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "#(apply str (filter (set (map char (range (int \\A) (+ 1 (int \\Z))))) %))", "problem": 29, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [x] (apply str (filter #(and (<= (int %1) (int \\Z)) (>= (int %1) (int \\A))) x)))", "problem": 29, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [ar] \n    (apply str (re-seq #\"[A-Z]\" ar))\n)", "problem": 29, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [s]\n  (let [uppers (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str\n      (filter #(contains? uppers %) (seq s)))))", "problem": 29, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f8bb50ce4b02e764a0a5181"}, {"code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [s](apply str \n  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [st]\n  (letfn [(upper [c]\n                 (and \n                   (<= (compare c \\Z) 0)\n                   (>= (compare c \\A) 0)))]\n   (apply str (filter upper st))))", "problem": 29, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [coll] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) coll)))", "problem": 29, "user": "4e778d36535d324fb2983d71"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn [x] \n    (apply str\n    (filter\n        (fn [y] (and\n                (= (str y) (clojure.string/upper-case y))\n                (not (= (str y) (clojure.string/lower-case y)))\n                ))\n        x\n    \n    )\n   )\n)", "problem": 29, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn [value]\n  (clojure.string/join \"\" (map str (filter #(Character/isUpperCase %) (seq value)))))", "problem": 29, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn [n] (loop [cnt \"\" acc (apply vector n)] (if (empty? acc) \r\n(if (= cnt \"\") nil (apply str (reverse cnt))) (recur  (if (= (= (str \r\n(clojure.string/upper-case (last acc))) (str (last acc))) (= (str \r\n(clojure.string/lower-case (last acc))) (str (last acc)))) cnt (if (= (str \r\n(clojure.string/upper-case (last acc))) (str (last acc))) (str \r\ncnt (str (last acc))) cnt)) (pop acc)))))", "problem": 29, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [strng] (apply str (filter #(Character/isUpperCase %) (seq strng))))", "problem": 29, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": ";#(apply str (re-seq #\"[A-Z]+\" %))\n(fn [col] \n  (->> col \n      (map int)\n      (filter #(and (>= % 65) (<= % 90)))\n      (map char)\n      (apply str)\n  )\n)", "problem": 29, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn test-strings [x]\r\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f20c040e4b0d66497709fcb"}, {"code": "(comp (partial apply str)\n      (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f890488e4b033992c121c76"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [stri] (apply str (filter #(Character/isUpperCase %) stri)))", "problem": 29, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "4f17aa97535d64f603146456"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [wrd]\n  (apply str (rest (conj (re-seq #\"[A-Z]+\" wrd) [] ))))", "problem": 29, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn[coll](apply str (filter (fn[char](Character/isUpperCase char)) coll ) ))", "problem": 29, "user": "4f8e984ee4b0d4e659cdde68"}, {"code": "(fn [string]\n  (apply str \n    (filter #(java.lang.Character/isUpperCase %) string)))", "problem": 29, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(comp (partial apply str)\n      (partial filter (fn [foo] (some #(= % foo) \n                                       (map char (range 65 91))))))", "problem": 29, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "(fn [text]\n  (apply str\n    (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn upper-filter [r]\r\n  (apply str \r\n   (filter \r\n\t  #(let [x % \r\n\t\t s (str x) \r\n\t\t ma (re-matches #\"[a-zA-Z]\" s)] \r\n\t     (and (not (empty? ma)) \r\n\t\t  (= s (clojure.string/upper-case s)))) \r\n\tr)))", "problem": 29, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [s] (reduce str (filter #(re-matches #\"\\p{javaUpperCase}\" (str %)) s)))", "problem": 29, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(comp (partial apply str)\n      (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [s]\n(apply str (filter #(contains? (set (range 65 91)) (int %)) s)))", "problem": 29, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn getCaps [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [list] (apply str (filter #(Character/isUpperCase %) list)))", "problem": 29, "user": "4fa39b3ee4b081705acca191"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [x] \n    (apply\n      str\n      (re-seq\n        #\"[A-Z]\"\n        x)))", "problem": 29, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "#(apply str (filter (fn [s] (contains?  (set (map char (range (int \\A) (int \\a)))) s)) %))", "problem": 29, "user": "4fa30027e4b081705acca187"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [x]\n  (apply str\n    (filter \n      #(\n        and\n        (>= (int %) (int \\A))\n        (<= (int %) (int \\Z))) x)))", "problem": 29, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn [x]\n  (apply str\n      (filter\n          (fn [x]\n            (Character/isUpperCase x))\n  x)))", "problem": 29, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "(comp (partial apply str) (partial filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))", "problem": 29, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn [text]\n  (apply str (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "4fa659f3e4b081705acca1b6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa58500e4b081705acca1ae"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn[a] (apply str (map char (filter #(and (>= % (int \\A)) (<= % (int \\Z))) (map int (seq a))))))", "problem": 29, "user": "4fa67274e4b081705acca1b8"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fa4f2f2e4b081705acca1aa"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn[x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn [c] (apply str ( filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "4fa96e80e4b081705acca1df"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "4faa8de0e4b081705acca1f8"}, {"code": "#(apply str (re-seq (re-pattern \"[A-Z]+\") %))", "problem": 29, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn get-caps [x]\n  (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fab336be4b081705acca216"}, {"code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn [in]\n  (apply str\n    (filter #(java.lang.Character/isUpperCase %) (seq in))))", "problem": 29, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn only-upper [s]\n  (apply str \n\t\t(filter #(Character/isUpperCase %) s)\n\t)\n)", "problem": 29, "user": "4faacc04e4b081705acca201"}, {"code": "#(apply str (filter #{\\H \\L \\O \\W \\R \\D \\A \\Z} %))", "problem": 29, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [string]\n  (clojure.string/join \n    (filter \n      #(and (>= (int %1) 65) (<= (int %1) 90))\n      string)))", "problem": 29, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "4fad33e8e4b081705acca236"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4fac1d77e4b081705acca223"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "(fn [s] \n  (apply str \n    (seq (filter #(not= % \"\") \n(map #(if (contains? \n  (set (map char (range 65 91))) %) % \"\") s)))))", "problem": 29, "user": "4fad77a6e4b081705acca23a"}, {"code": "#(clojure.string/join\n  (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "4facff22e4b081705acca230"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4faccddae4b081705acca22e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [s]\n  (clojure.string/join (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "problem": 29, "user": "4fae258de4b081705acca246"}, {"code": "(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %1) x)))", "problem": 29, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(apply str (filter (fn [x]\n  (and (> (int x) 64) (< (int x) 91))) (vec %)))", "problem": 29, "user": "4f0324d2535dcb61093f6a69"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4f99cfc2e4b0dcca54ed6d02"}, {"code": "(fn [x] \n(clojure.string/join (filter #(and \n   (= (clojure.string/upper-case %) (str %))\n   (not (= (clojure.string/lower-case %) (str %))))\n                                 x)))", "problem": 29, "user": "4ee52c44535d1385b2869d88"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4faf897be4b081705acca257"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4faec810e4b081705acca24e"}, {"code": "#(apply str\n  (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "(fn [s] (->> (seq s) (filter #(Character/isUpperCase %))\n  (apply str)))", "problem": 29, "user": "4fab259ae4b081705acca212"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fb069b1e4b081705acca266"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4faa7f87e4b081705acca1f6"}, {"code": "(fn [s]\r\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f8386c5e4b033992c121c1d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [xs] \n  (apply str (filter \n    #(and (>= (int %1) (int \\A)) \n          (<= (int %1) (int \\Z))) xs)))", "problem": 29, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [s]\n    (clojure.string/join \n      (filter \n        #(not (= (clojure.string/lower-case (str %)) (str %)))\n        s)))", "problem": 29, "user": "4fab0b6be4b081705acca20c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [s]\n  (apply str (filter #(some (partial = %)\n                 (map char (range (int \\A) (inc (int \\Z)))))\n              s)))", "problem": 29, "user": "4faac363e4b081705acca200"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fb4099be4b081705acca2a9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn [s] (apply str (filter #(and (= % (Character/toUpperCase %)) (not= % (Character/toLowerCase %))) s)))", "problem": 29, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fab0c0ae4b081705acca20d"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4fb54e50e4b081705acca2bb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn filter-upper [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4faafccde4b081705acca209"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbbb6ede4b081705acca2ed"}, {"code": "(fn [x] (apply str (filter (fn [x] (not= (clojure.string/lower-case x) (.toString x))) x)))", "problem": 29, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4fb0a1e0e4b081705acca269"}, {"code": "(fn[x] (apply str (filter #(= (str %) (and (Character/isLetter %) (.toUpperCase (str %)))) x)))", "problem": 29, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7c0ab8e4b06e829148e1ac"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fc04d75e4b081705acca324"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "(fn [s]\n  (let [a (int \\A)\n        z (int \\Z)]\n    (apply str\n      (map char\n        (filter #(and (>= % a) (<= % z))\n          (map int s))))))", "problem": 29, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn [s] (reduce str (#(re-seq #\"[A-Z]+\" %) s)))", "problem": 29, "user": "4fc0853ae4b081705acca327"}, {"code": "(\n            fn [s] \n                (apply str (filter \n                    #(Character/isUpperCase %)\n                    s\n                ))\n        )", "problem": 29, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn [x] \n  (apply str\n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fc34787e4b081705acca33e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [s] (apply str (filter (fn [c]\n                  (let [code (int c)]\n                    (and (>= code (int \\A)) (<= code (int \\Z)))))\n                s)))", "problem": 29, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fbef9a6e4b081705acca316"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [string]\n  (letfn [(isUpper [ch]\n    (. Character isUpperCase ch))]\n    (apply str (filter isUpper (seq string)))))", "problem": 29, "user": "4e51c67a535d302ef430da6a"}, {"code": "#(apply str\n  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [as] (apply str (filter #(Character/isUpperCase %) as)))", "problem": 29, "user": "4fc4f68ae4b081705acca363"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn caps-reseq\n  [s] {:pre [(string? s)]}\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "problem": 29, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn caps [instr]\n  (clojure.string/join (filter \n    #(and (<= (int %)(int \\Z))\n        (>= (int %) (int \\A))) instr)))", "problem": 29, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc0221ce4b081705acca322"}, {"code": "#(->>\n  (re-seq #\"[A-Z]\" %)\n  (apply str))", "problem": 29, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [phrase] (clojure.string/join (filter (fn [char] (not (nil? (re-matches #\"[A-Z]\" (str char))))) phrase)))", "problem": 29, "user": "4fc4f668e4b081705acca362"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)) seq)", "problem": 29, "user": "4ec53831535d6d7199dd3684"}, {"code": "(fn get-the-caps [c1] (let [matches (doall (re-seq #\"[A-Z]\" c1))] (apply str matches)))", "problem": 29, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn only-upper-case [lst]\n  (apply str (filter #(Character/isUpperCase %) \n                      lst)))", "problem": 29, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn [n] (loop [cnt (- (count n) 1) acc \"\"] (if (< cnt 0)             acc\n          (recur (dec cnt) (cond(> 65 (int (nth n cnt)) ) acc  (< 91 (int (nth n cnt))) acc :else (str (str (nth n cnt)) acc)  )))))", "problem": 29, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn capital [s]\n  (if (empty? s)\n    (str s)\n    (if (Character/isUpperCase (first s))\n      (str (first s) (capital (subs s 1)))\n      (capital (subs s 1)))))", "problem": 29, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn [s](apply str (filter #(= (some #{%} (map char (range 65 91))) %) s)))", "problem": 29, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn [s]\r\n  (apply str (filter (fn [c]\r\n    (let [c (int c)]\r\n      (and (>= c 65) (<= c 90)))) s)))", "problem": 29, "user": "4fc8d905e4b0ee37620e183d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "#(apply str (filter (fn [a] (. Character isUpperCase a)) %))", "problem": 29, "user": "4fc4dca8e4b081705acca350"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fc18846e4b081705acca331"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fc92595e4b0ee37620e1843"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn is-upper [x]\n (apply str\n (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fc2e302e4b081705acca33a"}, {"code": "#(.replaceAll % \"([^A-Z])\" \"\")", "problem": 29, "user": "4fbd292fe4b081705acca300"}, {"code": "#(apply str (filter (fn [ch] (Character/isUpperCase ch)) %))", "problem": 29, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn get-the-caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(reduce str ((fn [re] (re-seq #\"[A-Z]\" re)) %))", "problem": 29, "user": "4f61c3cfe4b0defedf855fc6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [ s ] ( apply str (filter #(re-matches #\"[A-Z]\" (str %)) (apply list s) ) ) )", "problem": 29, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [x] (apply str (filter (fn [y] (and (not (pos? (compare \\A y))) (not (neg? (compare \\Z y))))) x)))", "problem": 29, "user": "4fc9cba3e4b0ee37620e1849"}, {"code": "(fn [s]  (apply str (filter #(Character/isUpperCase %)  (seq s))))", "problem": 29, "user": "4f148418535d64f60314643a"}, {"code": "#(apply str (filter (fn [x] (if (>= (int x) (int \\A)) (if (<= (int x) (int \\Z)) true false) false)) %))", "problem": 29, "user": "4f826548e4b033992c121c08"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbacdbae4b081705acca2e5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fa9c945e4b081705acca1e5"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [s] (apply str (filter (comp (partial re-matches #\"[A-Z]\") str) s)))", "problem": 29, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [x] \n  ((fn hugo [x res]\n    (\n      if (= (count x) 0) \n         res\n         (if (re-matches #\"[A-Z]\" (str (first x))\n             )\n             (hugo (rest x) (str res (clojure.string/upper-case (first x)))) \n             (hugo (rest x) res)\n         )\n  \n  )) x \"\")\n)", "problem": 29, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc56e68e4b0ee37620e17f5"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fcf7170e4b03432b189f412"}, {"code": "(\nfn [y] (\n  apply str\n  (filter  (fn [x] (< -1 (compare x \\A) (inc (compare \\Z \\A)))) y)\n  )\n)", "problem": 29, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn capLetters [x]\n   (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fcfa09fe4b03432b189f419"}, {"code": "(fn [s]\n  (apply str\n    (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "4fceb350e4b03432b189f403"}, {"code": "#(apply str (filter (fn [char] (Character/isUpperCase char)) %))", "problem": 29, "user": "4fcd5958e4b065de69964ca7"}, {"code": "(fn [s]\n  (apply str \n    (filter #(and (>= (int %) 65) (<= (int %) 90))\n            (map char s))))", "problem": 29, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [S] (apply str (filter (fn [C] (Character/isUpperCase C)) (seq S))))", "problem": 29, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn upcase-only [str_] (\r\n  apply str (re-seq #\"[A-Z]\" str_)\r\n))", "problem": 29, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "(fn get-caps [s]\n  (loop [e s\n         r '()]\n    (if (empty? e)\n      (apply str (concat r))\n      (if (Character/isUpperCase (first e))\n        (recur (rest e) (concat r [(first e)]))\n        (recur (rest e) r)))))", "problem": 29, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn get-the-caps\n  ;\"return the capital letters of a string\"\n  [s]\n  (apply str (map char (filter #(and (<= % 90) ; keep only eliments who's int value is between 65 and 89\n                          (>= % 65))\n                    (map int s)))))", "problem": 29, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(reduce str (filter (set (map char (range 65 91))) %))", "problem": 29, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [stringIn] \n   (reduce #(str %1 %2) \"\"\n      (map #(Character/toString %) \n        (filter #(Character/isUpperCase %) stringIn)\n      )\n  )\n)", "problem": 29, "user": "4fce75cfe4b03432b189f400"}, {"code": "(fn [x] (apply str (filter (fn [y] (java.lang.Character/isUpperCase y)) x)))", "problem": 29, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc3b0d4e4b081705acca343"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn only-caps [subject]\n    (cond\n      (empty? subject) \"\"\n      (Character/isUpperCase (first subject)) (str (first subject) (only-caps (rest subject)))\n      :else (only-caps (rest subject))))", "problem": 29, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [s]\n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc93728e4b0ee37620e1844"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc4f040e4b081705acca35a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "4faa7c76e4b081705acca1f5"}, {"code": "(fn [x]\r\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn [s] (apply str(re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn [a] (apply str (re-seq #\"[A-Z]*\" a)))", "problem": 29, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [s]\n    (apply str\n\t\t  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fb57e06e4b081705acca2bf"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fcd155de4b065de69964ca3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [coll] \n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e726575535d5021c1a89660"}, {"code": "(fn x [lst]\r\n  (cond\r\n    (empty? lst) \"\"\r\n    (not (= (first lst) (first (clojure.string/lower-case (str (first lst)))))) (str (first lst) (x (rest lst)))\r\n    :else (x (rest lst))))", "problem": 29, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(apply str \n  (filter ( fn [x] (Character/isUpperCase x))\n          (map char %)))", "problem": 29, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [st] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) st)))", "problem": 29, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [s]\n  (apply str\n         (filter #(and (>= (int %) (int \\A))\n                       (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f030cff535dcb61093f6a4d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed2a31c535d44c135fd68db"}, {"code": "#(reduce str\n  (filter\n   (fn [c]\n     (Character/isUpperCase c))\n  %))", "problem": 29, "user": "4f30896ce4b0d6649770a07b"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [x] \n  (apply str \n         (map (fn [x] (if (and (> (int x) (- (int \\A) 1)) (< (int x) (+ (int \\Z) 1))) x \"\")) x)\n  ))", "problem": 29, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [x] \n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)\n))", "problem": 29, "user": "4fe183a0e4b0dd6cd5ce3635"}, {"code": "(fn [ s ]  (clojure.string/join (re-seq  #\"[A-Z]\" s)))", "problem": 29, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\"  \"\"))", "problem": 29, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn uppercase [s]\r\n  (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(apply str (re-seq #\"[\\p{Upper}]\" %))", "problem": 29, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "#(clojure.string/replace % #\"\\P{Upper}\" \"\")", "problem": 29, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "4fd785e6e4b0dab7d829f383"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [x]\n     (loop [x x\n            acc []]\n       (if (empty? x)\n         (clojure.string/join \"\" acc)\n       (if (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                      (first x))\n        (recur (rest x) (conj acc (first x)))\n        (recur (rest x) acc)))))", "problem": 29, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "(fn [x] (apply str (filter #(< 64 (int %) 91) x)))", "problem": 29, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [s]\n  \t(apply str \n\t\t\t(filter #(and (Character/isLetter %) (= (Character/toUpperCase %) %)) \n\t\t\t\t(seq s))))", "problem": 29, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(comp\n  clojure.string/join\n  (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "#(clojure.string/join \"\" (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn [st]\n  (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) st)))", "problem": 29, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "4f859146e4b033992c121c46"}, {"code": "(comp (partial apply str) \n       (partial filter #(<= (int \\A) (int %) (int \\Z))))", "problem": 29, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn [s] (apply str \n  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn [x]\n(apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn get-caps [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [x] (.replaceAll x \"[^A-Z]\" \"\"))", "problem": 29, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn only-uppers [string]\n  (->>\n   (filter #(Character/isUpperCase (int %)) string)\n   (apply str)))", "problem": 29, "user": "4fae4c11e4b081705acca248"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "#(clojure.string/join (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [seq] (apply str (re-seq #\"[A-Z]+\" seq)))", "problem": 29, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fead955e4b0140c20fb9c10"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4fe79ebce4b07c9f6fd12c37"}, {"code": "(fn [s]\n  (apply\n    str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn [text] (clojure.string/join (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn caps [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn g [x] (reduce str \n  (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))", "problem": 29, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [x] \n  (apply str \n    (filter #(Character/isUpperCase %) x)) )", "problem": 29, "user": "4f1ae082535d64f603146470"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "(fn [cs] (apply str (remove #(= (clojure.string/lower-case %) (str %)) cs)))", "problem": 29, "user": "4fef481ce4b0678c553fc314"}, {"code": "(fn [s]\n  (->> s\n      (map int)\n      (filter #(< 64 % 91))\n      (map char)\n      (apply str)))", "problem": 29, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\" )", "problem": 29, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(apply str (filter (fn[char] (Character/isUpperCase char)) %))", "problem": 29, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn get-caps [string]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) (seq string))))", "problem": 29, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn[x]\r\n  (apply str (filter (fn[x] (and \r\n\t                 (>= (int x) (int \\A))\r\n\t                 (<= (int x) (int \\Z)))) x))\r\n)", "problem": 29, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec92a04535d6d7199dd36fa"}, {"code": "(fn [strng]\n    (clojure.string/join \n      (filter #(re-matches #\"[A-Z]\" (str %)) strng)))", "problem": 29, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4fef439ce4b0678c553fc313"}, {"code": "(fn [a]\n  (apply str (filter #(and \n                       (Character/isLetter %)\n                       (not (Character/isLowerCase %))) a)))", "problem": 29, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f244f26e4b0d66497709fea"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn\r\n  [s]\r\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fee04a0e4b0678c553fc308"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4fcba3f9e4b0ee37620e185b"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4f1427f8535d64f603146435"}, {"code": "(fn caps [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4ff2430ae4b0678c553fc336"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4feddf2ee4b0198f34b063be"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff35e60e4b0678c553fc350"}, {"code": "(fn [x] (apply str\n          (filter #(. Character isUpperCase %) x)))", "problem": 29, "user": "4ff50604e4b0678c553fc365"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [s] (apply str (filter \n  (fn [c] (and \n    (> (int c) 64) (< (int c) 91)))\n  s)))", "problem": 29, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn[word] (apply str (re-seq #\"[A-Z]\" word)))", "problem": 29, "user": "4ff31e13e4b0678c553fc346"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn f\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "#(apply str (re-seq  #\"[A-Z]\" %))", "problem": 29, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbf2818e4b081705acca317"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "problem": 29, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn\n  [s]\n  (apply str\n         (->> (seq s)\n              (filter #(= (str %) (.toUpperCase (str %))))\n              (filter #(and\n                        (> (int %) 64)\n                        (< (int %) 122))))))", "problem": 29, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(let [capital-letters (into #{} (map char (range 65 91)))]\n  (fn get-the-caps [txt]\n    (->> txt\n      (keep capital-letters)\n      (apply str))))", "problem": 29, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [a] (clojure.string/replace a #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn [s]\n  (apply str\n    (filter (fn [c]\n      (not (= (str c)\n          (clojure.string/lower-case (str c))))) s)))", "problem": 29, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [s]\n    (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn [s] \n     (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f89bd1be4b033992c121c7d"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [s] (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s)))", "problem": 29, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn removeUpper [txt] (apply str(filter #(Character/isUpperCase %) txt)))", "problem": 29, "user": "4ff92cd2e4b0678c553fc3a5"}, {"code": "(fn ([s] (apply str (filter #(not (=\n  (str %)\n  (clojure.string/lower-case %))) s))))", "problem": 29, "user": "4ff889f2e4b0678c553fc399"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [x] \n  (apply str \n    (filter \n      #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff67852e4b0678c553fc37e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [x] (apply str (filter #(< 64 (int %) 91)  x)))", "problem": 29, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ffa1335e4b0678c553fc3b5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [s]\n  (apply str (filter #(< 64 (int (char %)) 91) s)))", "problem": 29, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [x]\n  (apply str\n    (map char\n      (filter #(and (< % 91) (> % 64))\n        (map int x)))))", "problem": 29, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn[sq](apply str (filter #(Character/isUpperCase %) (seq sq))))", "problem": 29, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fbbae0fe4b081705acca2eb"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f0eeff3535d0136e6c22327"}, {"code": "(fn filter-caps [s]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(apply str \n  (map (set (map char (range 65 91))) %))", "problem": 29, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc5019ae4b081705acca36d"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "4ff8ef9fe4b0678c553fc3a3"}, {"code": "(fn [sir] (apply str (filter #(Character/isUpperCase %) sir)))", "problem": 29, "user": "4e539f7e535d8a8b8723a272"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ffb61a1e4b0678c553fc3d1"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %) )", "problem": 29, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff5a42ae4b0678c553fc36c"}, {"code": "(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (and\n       (>= (int c) (int \\A))\n       (<= (int c) (int \\Z))\n      )\n    )\n    (seq s)\n   )\n  )\n)", "problem": 29, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "#(apply str (filter (fn [c] \n          (and \n            (= (str c) (.toUpperCase (str c)))\n            (not= (.toLowerCase (str c)) (.toUpperCase (str c))))) %))", "problem": 29, "user": "4fff72b6e4b0678c553fc400"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fedd993e4b0198f34b063bc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(apply str(filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "500159b3e4b0678c553fc419"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(->> % (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) (apply str))", "problem": 29, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [string]\n  (apply str\n    (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn la [x] (reduce str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s))\n)", "problem": 29, "user": "5002ad40e4b0678c553fc42b"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4ff78679e4b0678c553fc392"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [string] (apply str (re-seq #\"\\p{Upper}\" string)))", "problem": 29, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fb5033ce4b081705acca2b5"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "4ffee0f6e4b0678c553fc3f7"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50045388e4b0678c553fc44e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [x] (apply str (filter #(. Character isUpperCase %) x)))", "problem": 29, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f8c813de4b02e764a0a519f"}, {"code": "(fn caps\n  ([w] (caps w []))\n  ([w acc]\n    (if (empty? w)\n      (apply str acc)\n      (if (and (<= (int \\A) (int (first w))) (>= (int \\Z) (int (first w))))\n        (caps (rest w) (conj acc (first w)))\n        (caps (rest w) acc))\n    )\n  )\n)", "problem": 29, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50052d38e4b0678c553fc45c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn onlycaps [instr]\n  (apply str (re-seq #\"[A-Z]\" instr)))", "problem": 29, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn[y] \n  (apply str \n    (filter (fn[x] \n      ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) y  )))", "problem": 29, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50054b5ce4b0678c553fc45f"}, {"code": "#(apply str (filter (fn [ c ]\n              (let [i (int c)]\n                (and (> i 64) (< i 92)))) %))", "problem": 29, "user": "50086dafe4b028e089d3518d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [mystr]\n   (reduce str (filter #(and (> (int %1) 64) (< (int %1) 91)) mystr)))", "problem": 29, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "(fn [s] (apply str \n  (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "500933a6e4b046cdb195e074"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5006474ce4b0678c553fc481"}, {"code": "(fn [s]\r\n  (clojure.string/replace s #\"[^A-Z]\" \"\")\r\n  )", "problem": 29, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "500cb910e4b05f7c30cfa698"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(apply str (filter (fn[x](re-matches #\"[A-Z]\" (str x))) %))", "problem": 29, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [x]\n  (apply str \n    (filter #(. Character isUpperCase %) x)))", "problem": 29, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(->> %1 (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "500b6685e4b03d00572d2d82"}, {"code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "#(apply str (filter\n  (fn [c] (Character/isUpperCase c))\n  %))", "problem": 29, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn  [s]\n  (reduce str \n    (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "500900dee4b0144d4f561e42"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "5006e494e4b0678c553fc492"}, {"code": "(fn [s] (#(apply str (re-seq #\"[A-Z]\" %)) s))", "problem": 29, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [s]\r\n  \t(apply str (clojure.string/split s #\"[^A-Z]\")))", "problem": 29, "user": "4f041af6535dcb61093f6ba3"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [w] (reduce \n  (fn [s,c] \n    (if (and (> (int c) 64) (< (int c) 91)) \n\t  (str s c)\n\t  s))\n\t\"\"\n\t(vec w)))", "problem": 29, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "#(apply str (for [x % :let [n (int x)] :when (and (< n 91) (> n 64) ) ] x))", "problem": 29, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(reduce str (re-seq (re-pattern \"[A-Z]\") %))", "problem": 29, "user": "500abce2e4b03d00572d2d77"}, {"code": "(fn [sq]\n(apply str (filter #(Character/isUpperCase %) sq)))", "problem": 29, "user": "500fbfabe4b0c8af2eae4184"}, {"code": "(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     s)))", "problem": 29, "user": "50119c07e4b028e9d38b393f"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "500f49c2e4b03ec779321688"}, {"code": "(fn [s] (apply str\n  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [x](apply str (re-seq #\"[A-Z]\" x) ))", "problem": 29, "user": "4f9a0f71e4b0dcca54ed6d04"}, {"code": "(fn [s] (clojure.string/join (filter \n  #(and (> (int %) 64) (< (int %) 91)) s)))", "problem": 29, "user": "5011e738e4b0cd3f2a5854e6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn [x]\n  (apply str\n    (filter\n      #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (char %))\n      x)))", "problem": 29, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [x]\n  (apply str (filter #(re-matches #\"[A-Z]+\" (str %)) x)))", "problem": 29, "user": "5012aefce4b0c8732600222a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4feef09ae4b0678c553fc30e"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) (vec x))))", "problem": 29, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5013141de4b0f26a0e3320a9"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [st] (apply str (re-seq #\"[A-Z]\" st)))", "problem": 29, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "501577ade4b0aaedd199e911"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "501284d9e4b030d97e4db710"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "problem": 29, "user": "5014754de4b094324338f8e5"}, {"code": "#(apply str (filter (fn [s] ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)) (seq %)))", "problem": 29, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [s] \n  (clojure.string/replace \n    s \n    #\"[^\\p{Lu}]\" \n      \"\"))", "problem": 29, "user": "50127fbfe4b030d97e4db70f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50166470e4b052339a490e76"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [string]\n  (apply str \n    (for [ch string] \n      (if (and \n        (>= (int ch) (int \\A)) \n        (<= (int ch) (int \\Z))) \n          ch \"\")))\n)", "problem": 29, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "(fn get-caps [x]\n  (reduce str (filter (fn upper-case? [x]\n\t(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) x))\n  )", "problem": 29, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [s](apply str(re-seq #\"[A-Z]+\"s)))", "problem": 29, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn caps [x]\n (apply str (filter #(Character/isUpperCase%) x))\n)", "problem": 29, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "501688f7e4b052339a490e7a"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "problem": 29, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [l] (apply str (filter #( Character/isUpperCase %)  l)))", "problem": 29, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "#(clojure.string/replace % #\"\\s?[a-z]?[0-9]?[,!*($#&]?\" \"\")", "problem": 29, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn this [w]\r\n;    (println w)\r\n;(let [ret\r\n    (apply str (re-seq #\"[A-Z]\" w))\r\n;] (println \"ret: \" ret) ret)\r\n  )", "problem": 29, "user": "501819efe4b02f523d7cc5eb"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ff76222e4b0678c553fc38e"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4ff66816e4b0678c553fc37a"}, {"code": "(fn [mystr]\n  (apply str (re-seq #\"[A-Z]+\" mystr))\n)", "problem": 29, "user": "501b212ee4b0b12d9c5f4d83"}, {"code": "(fn [s] (apply str (filter #(and (Character/isLetter %1)(not (Character/isLowerCase %1))) s)))", "problem": 29, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn f [x]\n  (clojure.string/join\n\t\t(filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "500f336be4b03ec779321687"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50013694e4b0678c553fc417"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "500ec491e4b00fff93030f9e"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [x] (apply str\n  (filter #(and (= (clojure.string/upper-case %)\n          (str %))\n                (Character/isLetter %))\n          x)))", "problem": 29, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fe88cc1e4b07c9f6fd12c42"}, {"code": "(fn takeCapitals [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s)\n    )\n  )\n)", "problem": 29, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "501c1492e4b086d93747d180"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ec57e4a535d6d7199dd36a4"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fcf642ee4b03432b189f410"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x))\n)", "problem": 29, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn  [s]\n  ( apply str (filter #(Character/isUpperCase %) s ) ) )", "problem": 29, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn caps [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x) \n  )\n)", "problem": 29, "user": "4ffbc28ce4b0678c553fc3d4"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50270618e4b01614d1633feb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [s]\n  (apply str (filter #(contains? (set (range 65 91)) (int %)) s)))", "problem": 29, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [sentence] \n     (apply str \n       (filter #(Character/isUpperCase %) sentence )))", "problem": 29, "user": "4ff54bfbe4b0678c553fc369"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e8a880b535d65386fec210d"}, {"code": "(letfn [(uc? [ch] (and (>= (int ch) 65) (<= (int ch) 90)))]\n  #(apply str (map str (filter uc? %))))", "problem": 29, "user": "502ac96de4b0614b5299611b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x )))", "problem": 29, "user": "502aac6ae4b0614b52996118"}, {"code": "(fn test [x]\n  (if (not-empty (str (first x)))\n    (if (not= (str (first x)) (clojure.string/lower-case (first x)))\n        (str (str (first x)) (test (rest x)))\n        (str (test (rest x))))))", "problem": 29, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(comp #(apply str %) (partial filter #(and (>= (int %) (int \\A)) (<= (int %)  (int \\Z)))))", "problem": 29, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [s]\n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(reduce str (map (fn [s] \r\n                     (if (re-find #\"[A-Z]\" (str s))\r\n                       (str s)\r\n                       \"\"))\r\n                   %))", "problem": 29, "user": "501668b4e4b052339a490e77"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "502113cee4b0ef1d2d4433b8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) \n  clojure.string/join))", "problem": 29, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [inp]\n    (apply str\n        (map char \n            (filter \n                #(and (> % 64) (< % 91)) \n                (.getBytes inp)))))", "problem": 29, "user": "501306dee4b0c87326002231"}, {"code": "(comp (partial apply str)\r\n  (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50233f64e4b0b5d8b1bd2399"}, {"code": "(fn [str-word]\n  (apply str\n         (filter\n          #(contains? (set (range (- (int \\A) 1) (+ (int \\Z) 1))) (int %))\n          str-word)))", "problem": 29, "user": "4f601623e4b0defedf855fa3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "(fn [s]\n  (apply str \n    (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            s)))", "problem": 29, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "502b0804e4b063e52107afad"}, {"code": "(fn get-caps[s] \n  (apply str(re-seq #\"[A-Z+]\" s)))", "problem": 29, "user": "5018878ce4b029375d2a5056"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "502cd12fe4b0532a782a5e39"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "50321311e4b000fc67a99a86"}, {"code": "(fn [x]\n   (apply str(filter #(re-matches #\"[A-Z]\" (str %)) \n           (seq x)\n   ))\n  )", "problem": 29, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn [string](apply str (filter #(and (<= (int %) 90) (>= (int %) 65)) string)))", "problem": 29, "user": "5024076be4b09f7ee7fb4376"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [s]\n       (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) s))\n      )", "problem": 29, "user": "5029fccee4b023940c84aa47"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [x] (apply str (re-seq (re-pattern \"[A-Z]+\") x)))", "problem": 29, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [s]\n  (apply str\n   (filter \n     #(re-matches #\"[A-Z]\" (str %))\n     s)))", "problem": 29, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "502a9fdee4b095a7adb898b4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn may[s]\n  (reduce str(re-seq #\"[A-Z]\"s))\n  )", "problem": 29, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn [x] (\n  clojure.string/join (\n    filter #(and \n      (>= (int %) 65) \n      (<= (int %) 90)) x)))", "problem": 29, "user": "50352431e4b0a84c1d88f620"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5034a14de4b062bc5d7ae165"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "502d3912e4b0d96a44ab2030"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn caps [s]\n   (apply str (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "(fn [pal]\n  (apply str (filter #(Character/isUpperCase %) \n                     pal\n\n             )\n  )\n )", "problem": 29, "user": "50254e70e4b0b0b8afb15aa7"}, {"code": "(fn [x](apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "500a0a11e4b03d00572d2d73"}, {"code": "(fn uppercase-filter [word] \n         (apply str (filter #(Character/isUpperCase %) (seq word))))", "problem": 29, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn [s] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn print-ascii [x]\n  (clojure.string/join (map #(if (and (< 64 (int %1)) \n                                      (> 92 (int %1))) \n                               %1)\n                            x)))", "problem": 29, "user": "5029faf6e4b023940c84aa46"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(apply str (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [n] (clojure.string/join \"\" (clojure.string/split n #\"[^A-Z]+\")))", "problem": 29, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "503b5a64e4b07a1917cc34dc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn anon [x]\n  (cond\n    (= (count x) 0) \"\"\n    (and (< (int (first x)) 91) (> (int (first x)) 64)) (str (first x) (anon (rest x)))\n    true (anon (rest x))))", "problem": 29, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [s] (apply str\n  (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "503d812ce4b06c4e0e1fa258"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [x] \n  (apply str (filter #(and (>= (int (char %)) 65) (<= (int (char %)) 90) ) x)))", "problem": 29, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn [a] (clojure.string/join (filter #(Character/isUpperCase %)  a)))", "problem": 29, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn [arr] (apply str (re-seq #\"[A-Z]\" arr)))", "problem": 29, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [x]\n  (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [s]\n  (apply str\n    (filter\n        #(Character/isUpperCase %)\n        s)))", "problem": 29, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4e8708e3535dceadca46984e"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fcf763de4b03432b189f413"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5042de0de4b034ff00315d1b"}, {"code": "(fn [coll]    (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [string] (apply str \n  (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))\n    string)))", "problem": 29, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50435852e4b034ff00315d22"}, {"code": "(fn[s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50431cbce4b034ff00315d1c"}, {"code": "#(clojure.string/join (filter \n  (fn [c] (Character/isUpperCase c))\n  (seq %)))", "problem": 29, "user": "4fab1ea1e4b081705acca210"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4db0114d838c48654951d9b8"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4faff8fde4b081705acca25e"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e7d9257535db169f9c796dd"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(clojure.string/join (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) %))", "problem": 29, "user": "50464831e4b011c5dfee771f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4db5708d535d87e67b28fe0c"}, {"code": "#(apply str \n  (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "50458888e4b01f6c9a8b236d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50471d36e4b03b02161376b6"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "504663bbe4b011c5dfee7721"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "5048806be4b0ec70b3ef8d9e"}, {"code": "(fn [x]\n  (apply str ( filter #(re-find #\"[A-Z]\" (str %1)) x\n)))", "problem": 29, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50432da5e4b034ff00315d1e"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase  % ) (seq x) )  ))", "problem": 29, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [x] (clojure.string/join \n  (clojure.string/split x #\"[^A-Z]*\")))", "problem": 29, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "(fn [s]\n   (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))", "problem": 29, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "504d0116e4b022602c20b089"}, {"code": "(fn f [s]\r\n  (apply str (filter #(Character/isUpperCase %) (seq s)))\r\n)", "problem": 29, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "50295775e4b0b33e9bf6fdf2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "504e2f89e4b0f6ff3350c47d"}, {"code": "#(apply str (clojure.string/split % #\"[a-z]|\\W|\\d\"))", "problem": 29, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [s]\n  (reduce str (filter \n    #(Character/isUpperCase %) s)))", "problem": 29, "user": "504e48ace4b0f6ff3350c498"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [s] (apply str (filter\n    (fn [c] (let [x (int c)] (and (> x 64) (< x 91))))\n    s)))", "problem": 29, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))", "problem": 29, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [x] \n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "504e2f98e4b0f6ff3350c47e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e3afae4b0f6ff3350c488"}, {"code": "#(apply str (map char (filter (fn [x] (some #{x} (range 65 91))) (map int %))))", "problem": 29, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(clojure.string/join \n  (map first \n    (filter \n      (fn [[c d]] (not (= c d))) \n      (map (fn [a b] (list a b)) % (clojure.string/lower-case %)))))", "problem": 29, "user": "504e127fe4b078edc5f593b6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "#( apply str (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "504eb604e4b069badc5a33c4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504f6adfe4b0a02f9cffde81"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn [what]\n    (let [uppers \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        filtered (filter (fn [char] (some #(= char %) uppers)) (seq what))]\n    (apply str filtered)))", "problem": 29, "user": "504e2011e4b0f6ff3350c469"}, {"code": "(fn [mystr] (apply str (filter #(and (> (inc (int \\Z)) (int %)) (> (int %) (dec (int \\A)))) (seq mystr))))", "problem": 29, "user": "504e9011e4b069badc5a33b7"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [sq] (clojure.string/join (filter #(Character/isUpperCase %) sq)))", "problem": 29, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [s] (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "5050b107e4b063148f524126"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50456731e4b01f6c9a8b236b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50435689e4b034ff00315d21"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "504e7b88e4b069badc5a33ad"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(apply str (for [c % :when (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))] c))", "problem": 29, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [s]\r\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) (seq s))))", "problem": 29, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn [characters]\r\n  (apply str\r\n         (filter (fn [character]\r\n            (let [ordinal (int character)]\r\n              (and\r\n               (< ordinal 97)\r\n               (> ordinal 64))))\r\n          characters)))", "problem": 29, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn caps [s]\n  (if (empty? s) \n    \"\"\n    (let [f (first s)]\n      (if (and (Character/isLetter f) \n               (Character/isUpperCase f))\n        (str f (caps (rest s)))\n        (caps (rest s))))))", "problem": 29, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "504f9ae1e4b0a02f9cffde9c"}, {"code": "(fn [myStr] (apply str (filter #(Character/isUpperCase %) myStr)))", "problem": 29, "user": "502b04bee4b063e52107afac"}, {"code": "(fn [Str]\n  (clojure.string/replace Str #\"[0-9abcdefghijklmnopqrstuvwxyz, !.?@#$%^&*()+=]+\" \"\"))", "problem": 29, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "503ff621e4b0c9bf6384b00f"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn upper-only [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn[s]\n  (apply str(filter #(. java.lang.Character isUpperCase %) s))\n)", "problem": 29, "user": "504e1ddae4b0f6ff3350c466"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn f[s]\n  (if (empty? s)\n    s\n    (if \n      (and \n        (> (int (first s)) 64)\n        (< (int (first s)) 91)\n      )\n      (apply str (cons (first s) (f (rest s))))\n      (f (rest s))\n    )\n  )\n)", "problem": 29, "user": "50512f61e4b0b30bd8f4f83f"}, {"code": "#(clojure.string/join \"\" (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [l] (apply str (filter #(and (>= (int %) 65) (<= (int %) (+ 65 25))) l)))", "problem": 29, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [s] (apply str (filter #(. java.lang.Character isUpperCase %) (seq s))))", "problem": 29, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504c8165e4b09724c857af31"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "5057242fe4b0012181721986"}, {"code": "(fn [s]\n  (apply str (map first (filter (fn [[c1 c2]] (not= c1 c2)) (map vector s (clojure.string/lower-case s))))))", "problem": 29, "user": "4f06f90a535dcb61093f6c1b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn  [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50586354e4b06522596eba78"}, {"code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4fd6e70fe4b0dab7d829f379"}, {"code": "(fn [s] (let [s (clojure.string/replace s #\"[^a-zA-z]\" \"\")] (apply str (map first (filter (fn [[a b]] (= a b)) (map vector s (clojure.string/upper-case s)))))))", "problem": 29, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "504e8e48e4b069badc5a33b3"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "(fn [coll]\n  (apply str (filter (fn [c]\n    (Character/isUpperCase c)) coll)))", "problem": 29, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [a] (apply str (filter #(Character/isUpperCase %) (seq a))))", "problem": 29, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))", "problem": 29, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn [cadena]\n    (\n     letfn [(mayuscula? [letra]\n              (if (and (>= (int letra) 65) (<= (int letra) 90) )\n                  true\n                  false\n                )\n             )\n            (mayusculas [cadenaOld cadenaNew]\n              (\n               cond\n                  (empty? cadenaOld) cadenaNew\n                  (mayuscula? (first cadenaOld)) (mayusculas (rest cadenaOld) (str cadenaNew (first cadenaOld)))\n                  :else (mayusculas (rest cadenaOld) cadenaNew)\n                )\n              )\n             ]\n            (mayusculas cadena \"\")\n      )\n\n  )", "problem": 29, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [c]\n  (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [x] (apply str (filter #(< 64 (int %) 91) x)))", "problem": 29, "user": "505d26aee4b0e6aca564be05"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "505cc50ce4b0e6aca564be00"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn caps [x]\n  (let [caps \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (apply str (filter (fn [y] (some #{y} caps)) (seq x)))\n  )\n)", "problem": 29, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [x] (reduce str ((fn [c] (filter (fn [c2] (not= (re-find #\"[A-Z]\" (str c2)) nil)) c)) x)))", "problem": 29, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [s]\n  (apply str (filter #(contains?\n    (set (map char (range 65 91))) %) (seq s))))", "problem": 29, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [str1]\n  (apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) str1)))", "problem": 29, "user": "4f046d70535dcb61093f6bc5"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn ups [inp]\n  (apply str (filter #(Character/isUpperCase %) inp)))", "problem": 29, "user": "504ec46de4b069badc5a33c8"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "505885c4e4b06522596eba7b"}, {"code": "(fn f [Y]\n  (apply str (filter #(not= (clojure.string/lower-case %) (str %)) Y)))", "problem": 29, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [string]\n  (apply str\n      (filter\n        #(not= (get (clojure.string/lower-case %) 0) %)\n        string)))", "problem": 29, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50630247e4b05ac47bc68d6b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50611456e4b0dc10a69545a5"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "#(apply str \n       (filter \n        (set (map char (range 65 91))) %))", "problem": 29, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [s]\n  (apply str (filter (fn [x]\n            (and (> (int x) 64) (< (int x) 91)))\n          (seq s))))", "problem": 29, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [s]\n  (apply str \n        (filter #(and (< (int %) 91) (> (int %) 64)) s)\n  )\n)", "problem": 29, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(comp (partial apply str)\n      (partial filter\n               #(and (Character/isLetter %)\n                     (= % (Character/toUpperCase %))))\n      seq)", "problem": 29, "user": "4f84a4a4e4b033992c121c39"}, {"code": "#( apply  str  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn [s] \n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) \n        (vec s))))", "problem": 29, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [s] (apply str (filter #(and\n  (>= (int %) (int \\A))\n  (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "50657775e4b0deb876850599"}, {"code": "(fn [in] (clojure.string/join (re-seq #\"[A-Z]+\" in)))", "problem": 29, "user": "50608d4ce4b07251188e4455"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50645e12e4b007509339a58a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [s] \n  (clojure.string/join \n    (filter (fn [c] (not= c (.toLowerCase c)))\n    (clojure.string/split s #\"\"))))", "problem": 29, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "(fn filup [s]\n  (letfn [(isupper [c]\n            (and\n              (>= (compare c \\A) 0)\n              (<= (compare c \\Z) 0)))]\n    (apply str (filter isupper s))))", "problem": 29, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [s] \n  (clojure.string/join \"\" \n    (filter #(java.lang.Character/isUpperCase %) \ns)))", "problem": 29, "user": "504db141e4b021508a333965"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5057852ce4b0012181721992"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))\n\n;#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [l] (apply str (remove #(re-matches #\"[^A-Z]\" (str %)) l)))", "problem": 29, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [values] (apply str (filter #(Character/isUpperCase %1) values)))", "problem": 29, "user": "50621cbde4b0341461c88951"}, {"code": "(fn my-get-caps [string]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      string)))", "problem": 29, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "50523848e4b0a561d07d8f1a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "506a1985e4b01dc6af13f83e"}, {"code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]+\"))", "problem": 29, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn caps [x]\n        (clojure.string/join\n          (let [l (first x) r (rest x)]\n            (concat\n              (if (= (clojure.string/upper-case l) (str l))\n               (if (not= (clojure.string/upper-case l) (clojure.string/lower-case l))\n                  [l]\n                  [])\n               [])\n             (if (empty? r)\n            nil\n               (caps r))))))", "problem": 29, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [x] (reduce str (vec (re-seq #\"[A-Z]+\" x))))", "problem": 29, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(apply str (filter (fn [c] (and (< (int c) (int \\a)) (>= (int c) (int \\A)))) %))", "problem": 29, "user": "501fcd59e4b0cb6ebc0a42ec"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn x [s]\n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "problem": 29, "user": "506b18c8e4b0a2a5463de383"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x)))) %))", "problem": 29, "user": "5037c397e4b0af0658af77b4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(comp (partial apply str) (partial filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))", "problem": 29, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [a] (apply str (reduce concat (re-seq #\"[A-Z]*\" a))))", "problem": 29, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "#(apply str (filter \n  (fn [ch] (<= (int \\A) (int ch) (int \\Z))) %))", "problem": 29, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn [st]\n  (apply str\n    (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "506929ffe4b01dc6af13f82b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "#(apply str  (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "problem": 29, "user": "4f614976e4b0defedf855fbb"}, {"code": "#(apply str (filter #{\\Q \\W \\E \\R \\T \\Y \\U \\I \\O \\P \\A \\S \\D \\F \\G \\H \\J \\K \\L \\Z \\X \\C \\V \\B \\N \\M} %))", "problem": 29, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [s] (apply str (\r\n  filter #(and (<= (int %) (int \\Z)) \r\n               (>= (int %) (int \\A))) \r\n         (vec s))))", "problem": 29, "user": "5071e520e4b0e3170b5a8683"}, {"code": "(fn [x] (apply str(re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "506ec408e4b09350ab4199f1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50729f67e4b0e3170b5a868e"}, {"code": "(fn [mystr] (apply str (filter \n  #(and \n    (= (clojure.string/upper-case %1) (str %1)) \n    (not (clojure.string/blank? (str %1))))\n  (clojure.string/replace mystr #\"([^a-zA-Z])\" \"\"))\n))", "problem": 29, "user": "506afdafe4b0a2a5463de37e"}, {"code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "problem": 29, "user": "502cb310e4b0532a782a5e38"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [s]\r\n  (apply str\r\n    \t (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50576483e4b001218172198b"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50748923e4b054001656acd3"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "507630ffe4b0a894bb95bf3c"}, {"code": "(fn [x]\r\n  (apply\r\n    str\r\n    (filter\r\n      #(Character/isUpperCase %)\r\n      x\r\n    )\r\n  )\r\n)", "problem": 29, "user": "5075d655e4b09049dea827a3"}, {"code": "(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f32ef71e4b0d6649770a098"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "507a08e4e4b08327cd804a67"}, {"code": "#( apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "507a9b29e4b08327cd804a6e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dbac43b535d1e037afb21ac"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [s] (apply str (map \n  #(if (and\n    (>= (int %) (int \\A))\n    (<= (int %) (int \\Z))) % \"\")\n  (seq s))))", "problem": 29, "user": "4fb1d7ace4b081705acca281"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50799992e4b08327cd804a62"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "507c4829e4b0a19f8e876e57"}, {"code": "(fn [s]  (reduce str (filter #(and (>= (int %) 65) (< (int %) 91)) s)))", "problem": 29, "user": "5078dedae4b08327cd804a5d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "507db411e4b03c76e5499e06"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5060ae00e4b07251188e4459"}, {"code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "5073de20e4b054001656acca"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [x] (.replaceAll x \"[^A-Z]\" \"\") )", "problem": 29, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5065b810e4b0148eb3925aec"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn filter-caps [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [s] (apply str (filter #(not= (clojure.string/lower-case (str %)) (str %)) s)))", "problem": 29, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [s] (let [upper? (fn [c] (boolean (re-matches #\"[A-Z]\" (str c))))] (apply str (filter upper? s))))", "problem": 29, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "506b437de4b0eda3100c0906"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50807940e4b01a93d3f38e44"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "(fn [s]\n  (apply str\n  (filter\n    (fn [ch]\n      (. java.lang.Character isUpperCase ch))\n    s)))", "problem": 29, "user": "504e0136e4b078edc5f5938e"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "(fn [str]\n    (clojure.string/join\n      (filter (fn [x]\n                (re-find #\"[A-Z]\" (clojure.string/join [x])))\n              str)))", "problem": 29, "user": "5069c09be4b01dc6af13f837"}, {"code": "(comp (partial reduce str) (partial re-seq #\"[A-Z]\"))", "problem": 29, "user": "507a506ee4b08327cd804a6c"}, {"code": "(fn [s]\n   (reduce str\n           (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "5069874de4b01dc6af13f832"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "502ac868e4b0614b5299611a"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50838c06e4b0902986d69e0f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5088082ae4b0198722bd9854"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5087d0e4e4b0198722bd9851"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5089d52ce4b03217b26a539d"}, {"code": "#(clojure.string/replace % #\"[\\d\\W\\p{javaLowerCase}]\" \"\")", "problem": 29, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [msg] (apply str (filter #(Character/isUpperCase %) msg)))", "problem": 29, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [s] \n  (clojure.string/join (filter #(>= 90 (int %) 65) s)))", "problem": 29, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4db86aee535d1e037afb2193"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "50856bd1e4b004985b776e4c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [s]\n  (apply str\n   (map #(cond (Character/isUpperCase %) %\n               :else nil)\n    s)))", "problem": 29, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "problem": 29, "user": "50696bace4b01dc6af13f830"}, {"code": "(fn capper [x] \n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "problem": 29, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [sequ] (apply str (filter #(contains? (set (map char (range 65 91))) %) (vec sequ))))", "problem": 29, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [s] (apply str\r\n  (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [x]\r\n  (reduce str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "508453abe4b0c98812d07891"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4ec57410535d6d7199dd36a1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "509442ece4b04e5742806c49"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn [s] (apply str (filter #(. Character isUpperCase %) s) ) )", "problem": 29, "user": "5086ca15e4b004985b776e62"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50813b88e4b09292fd669443"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [x] \n  (apply str (filter (fn[x] ( if (and (>= (int x) 65) (<= (int x) 90)) x ) ) x)) )", "problem": 29, "user": "5078300de4b0fc74642bff66"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [s] (->> s\r\n    seq\r\n    (filter #(Character/isUpperCase %))\r\n    (apply str)))", "problem": 29, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f856adfe4b033992c121c44"}, {"code": "(fn [xs]\n  (clojure.string/join\n   (filter (fn [c] (Character/isUpperCase c)) xs)))", "problem": 29, "user": "5097cd83e4b00ad8bab4e974"}, {"code": "(fn [seq]\n  (apply str\n    (filter #(< 64 (int %) 91) seq)))", "problem": 29, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn [a] \n  (apply str \n    (filter \n      (fn [b] \n        (< -1 (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"(str b)))\n      ) \n      (seq a)\n    ))\n)", "problem": 29, "user": "50949602e4b04e5742806c4e"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5093bc30e4b097f48cc38584"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50959df3e4b087f34d351ab4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5099e663e4b0efbae1fbc0a4"}, {"code": "(fn caps [s]\n  (apply str (filter #(. Character isUpperCase %) s)))", "problem": 29, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "(fn [xs] (apply str (filter #(and (< 64 (int %)) (< (int %) 91)) xs)))", "problem": 29, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50982769e4b04e098a4c726a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa313bbe4b081705acca188"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50868795e4b004985b776e5e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "509c7949e4b085ae113522b0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [seq] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) seq)))", "problem": 29, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "(fn [s] (apply str (filter #(not (= % (first (clojure.string/lower-case %)))) (seq s))))", "problem": 29, "user": "50976c84e4b00ad8bab4e961"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn te [x] \n  (apply str\n    (reduce \n      (fn [a b]\n        (if (and \n          (= (str b) (clojure.string/upper-case (str b))) \n          (not (= (str b) (clojure.string/lower-case (str b)))))\n          (conj a b) \n          a\n        )\n      ) [] (seq x)\n    )\n  )\n)", "problem": 29, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "509f9635e4b08df8156e9e3e"}, {"code": "(fn \n  [x]\n  (clojure.string/join \n   (re-seq #\"[A-Z]\" x))\n  )", "problem": 29, "user": "509fe894e4b08df8156e9e44"}, {"code": "(fn [b] (apply str (filter (fn [a] (Character/isUpperCase a)) b)))", "problem": 29, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn caps[s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50a0d1e4e4b08df8156e9e51"}, {"code": "(fn [letters] (apply str (re-seq #\"[A-Z]\" letters)))", "problem": 29, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ecd1143535d23f036227702"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5098f803e4b0cae2931060a5"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f137034535d64f603146430"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn upps [a] (apply str(filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "5097c837e4b00ad8bab4e973"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [s] (reduce str (keep #(if (and (>= (int %) 65) (<= (int %) 90)) %)  s)))", "problem": 29, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "(fn [string]\n    (reduce str (re-seq #\"[A-Z]\" string))\n    )", "problem": 29, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(apply str (map first (re-seq #\"([A-Z]+)\" %)))", "problem": 29, "user": "50981062e4b04e098a4c7268"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn [s]\r\n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTVWUXYZ\") %) s)))", "problem": 29, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [string] (apply str (filter #(. Character isUpperCase %) string)))", "problem": 29, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      (apply str acc)\n      (let [h (first c), t (rest c)]\n        (if (Character/isUpperCase h)\n          (recur t (conj acc h))\n          (recur t acc))))))", "problem": 29, "user": "50a83794e4b054305ba5a831"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [i] (apply str (filter #(Character/isUpperCase %) i)))", "problem": 29, "user": "4dbe5390535d020aff1edf5c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "(fn [s] (apply str (filter (fn [c] (. Character isUpperCase c)) s)))", "problem": 29, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [s](apply str (filter (fn[e](Character/isUpperCase e)) s)))", "problem": 29, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "problem": 29, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [n] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int n)))))", "problem": 29, "user": "50a93ef5e4b0a9a42786e8e1"}, {"code": "(fn [s] \n  (apply str \n    (filter \n      #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4ed152d5535d44c135fd68cc"}, {"code": "reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\"", "problem": 29, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [sin] (apply str (filter #(Character/isUpperCase %) sin)))", "problem": 29, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn a [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50608ea0e4b07251188e4456"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn a [m]\n  (apply str (reduce (fn [accum x] \n         (if (Character/isUpperCase x)\n             (conj  accum x)\n            accum\n           ))\n          []\n          m\n)\n   )\n)", "problem": 29, "user": "50a85af1e4b054305ba5a833"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "#(apply str\n       (map char\n         (filter (fn [x] (and (>= x 65) (<= x 90)))\n(map int %))))", "problem": 29, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn [coll]\r\n   (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "#((fn toss [list]\n  (if (empty? list)\n        nil\n        (str (first list) (toss (next list)))))\n  (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50adcfe6e4b0a40c9cfb08cb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50aff503e4b0c3f5ed5c29a7"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)", "problem": 29, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [s]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn[string] (apply str (re-seq #\"[A-Z]\" string )))", "problem": 29, "user": "50b07125e4b009df37c708ba"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [s]\n  (let [caps (set (map char (range 65 91)))]\n    (apply str (filter #(contains? caps %) s))))", "problem": 29, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(apply str (filter (set (map char (range 65 91))) %))", "problem": 29, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) x)))", "problem": 29, "user": "50b11fbce4b009df37c708cb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [x] (reduce str \"\" ((fn [s]  \r\n  (filter #(\r\n    and \r\n      (= % (java.lang.Character/toUpperCase %) )\r\n      (java.lang.Character/isLetter %)\r\n    ) s )) x)))", "problem": 29, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %1) 65)(<= (int %1) 90)) s)))", "problem": 29, "user": "50956c2be4b087f34d351ab2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "50b4d258e4b0c464d223d1bd"}, {"code": "(fn [s]\n  (apply str\n    (filter\n      #(not=\n        (clojure.string/lower-case %)\n        (str %))\n      s)))", "problem": 29, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s))))\n)", "problem": 29, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "(fn [s]\n  (apply str (filter #(and \n            (<= (int %) 90) \n            (>= (int %) 65))\n          (seq s))))", "problem": 29, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(letfn\n  [(isupper? [c]\n    (and (>= (int c) (int \\A))\n         (<= (int c) (int \\Z))))]\n  (apply str (filter isupper? %)))", "problem": 29, "user": "50b668dde4b08fb537db98f2"}, {"code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "problem": 29, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "(fn [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn getCaps [string] (apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) (seq string))))", "problem": 29, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50928ecfe4b097f48cc38570"}, {"code": "(fn f [a] (apply str (filter \n  #(-> (re-find #\"[A-Z]+\" (str %)) nil? not)\na)))", "problem": 29, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn [words] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq words))))", "problem": 29, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn fupper\n  [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [coll] (clojure.string/join\r\n                       (filter\r\n                         (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)) (= x (java.lang.Character/toUpperCase x))))\r\n                         coll)))", "problem": 29, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50ba3acae4b03e68e4411c78"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ba40e7e4b03e68e4411c79"}, {"code": "(fn [s]\n  (letfn [(uppercase? [c]\n            (and (= (.toUpperCase (str c)) (str c))\n                 (not= (.toUpperCase (str c)) (.toLowerCase (str c)))))]\n    (reduce (partial format \"%s%s\")\n            \"\"\n            (filter uppercase? s))))", "problem": 29, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn filterCap [s]\n  (apply str\n         (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "problem": 29, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [st]\n  (let [caps\n    #{\\A, \\B, \\C, \\D, \\E, \\F, \\G, \\H, \\I, \\J, \\K, \\L, \\M, \\N, \\O, \\P, \\Q, \\R, \\S, \\T, \\U, \\V, \\W, \\X, \\Y, \\Z}\n    ]\n    (apply str (filter #(contains? caps %) st))))", "problem": 29, "user": "50ba5084e4b03e68e4411c7c"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "50acbd15e4b071b89ef26234"}, {"code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "problem": 29, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [s] (apply str (map #(if(Character/isUpperCase %) %) s)))", "problem": 29, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn f [s]\n  (clojure.string/join \n    (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "problem": 29, "user": "50bb646de4b03e68e4411ca3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn [cs]\n  (apply str (filter #(Character/isUpperCase %) cs)))", "problem": 29, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn only-upper [x] \n  (apply str\n\t\t(let [ia (int \\A) iz (int \\Z)]\n\t\t\t(filter \n\t\t\t\t#(let [ix (int %)] (and (>= ix ia) (<= ix iz))) \n\t\t\t\t(seq x)\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 29, "user": "50bcfab0e4b0594b91591c64"}, {"code": "(fn up[x](apply str(filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "50b2e824e4b03ea880433567"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn [s] (apply str (filter #(and (< 6 (compare \\a %)) (> 33 (compare \\a %))) s)))", "problem": 29, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(apply str (filter \n\t\t(fn[x] \n\t\t\t(if(and (> (int x) 64) (< (int x) 91) ) true false)) %1 ) )", "problem": 29, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50411081e4b06d8231e4facb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50b63309e4b0a86f8358ca68"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "50c0a98ee4b096f585049c2e"}, {"code": "(fn [col] \r\n  (apply str (filter \r\n    (fn [c] \r\n      (and \r\n        (>= (compare c \\A) 0)\r\n        (<= (compare c \\Z) 0)))\r\n    (seq col))))", "problem": 29, "user": "50bfe725e4b080409b860f26"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "509251f3e4b09a7d0b586de5"}, {"code": "#(apply str\n  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "#( clojure.string/replace %\n  ( java.util.regex.Pattern/compile \"[^A-Z]\") \"\" \n)", "problem": 29, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50baa66be4b03e68e4411c94"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50456747e4b01f6c9a8b236c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50c32086e4b00e537d00253d"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn xx   \n   [chas]\n    (let [chs (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n      (apply str (filter  #(contains? chs %) chas))))", "problem": 29, "user": "50b0804de4b009df37c708bb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [s] \r\n   (apply str (filter (fn [c] \r\n                        (and (= (str c) (clojure.string/upper-case (str c)))\r\n                        (Character/isLetter c)))\r\n               (seq s))))", "problem": 29, "user": "50c336dde4b00e537d002542"}, {"code": "(fn [st]\r\n  (reduce str (filter (fn [c]\r\n    (and (>= (compare \\Z c) 0)\r\n\t       (<= (compare \\A c) 0))) st)))", "problem": 29, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [string]\n  (reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\" string))", "problem": 29, "user": "50c4baa6e4b0210b849018b0"}, {"code": "#(apply str (filter (fn [x] (and (<= 0 (compare \\Z x)) (>= 0 (compare \\A x)))) (seq %)))", "problem": 29, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn [lst]\n  (apply str (filter #(Character/isUpperCase %) lst)))", "problem": 29, "user": "4f608e38e4b0defedf855fa8"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50b3653ee4b03ea88043356b"}, {"code": "(fn [s] (apply str (filter #(not= (.toLowerCase (str %)) (str %)) s)))", "problem": 29, "user": "50b68375e4b08fb537db98f4"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [s] (apply str\n  (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [x]\n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [s]\n  (apply str\n    (filter\n      #{\\Q \\W \\E \\R \\T \\Y \\U \\I \\O \\P \\A\n        \\S \\D \\F \\G \\H \\J \\K \\L \\Z \\X \\C \\V \\B \\N \\M}\n      s)))", "problem": 29, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn[my-string] \n (apply str\n   (re-seq #\"[A-Z]\" my-string)))", "problem": 29, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "(fn [x] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq x))))", "problem": 29, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50ca2faee4b0a409464667dc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [x] (apply str (filter (fn [y] (contains? (set(range 65 91)) (int y))) (seq x))))", "problem": 29, "user": "50cc30c5e4b0f78a8e1645bf"}, {"code": "(fn [s] (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) (seq s))))", "problem": 29, "user": "50b29029e4b03ea880433563"}, {"code": "(comp (partial apply str) (partial filter (fn [x] (java.lang.Character/isUpperCase x))))", "problem": 29, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [x] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))))", "problem": 29, "user": "50c11f5ae4b096f585049c39"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [x] (apply str(re-seq(re-pattern #\"[A-Z]\") x)))", "problem": 29, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [s] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s)))", "problem": 29, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50997a2be4b0cae2931060b6"}, {"code": "(fn [x] (apply str (re-seq  #\"[A-Z]\" x)))", "problem": 29, "user": "4eb0175b535d7eef30807336"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f072644535dcb61093f6c20"}, {"code": "#(apply str (filter (fn filt [x] (Character/isUpperCase x)) (seq %)))", "problem": 29, "user": "50d0b466e4b00b15ecee9764"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50d04a92e4b00b15ecee975a"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50d18d00e4b05a71a896ef57"}, {"code": "(fn filter-caps [string]\n  (reduce str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "50d2f044e4b03c62ef244483"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [x] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))", "problem": 29, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (and\n       (>=\n        (int c)\n        (int \\A))\n       (<=\n        (int c)\n        (int \\Z))))\n    s)))", "problem": 29, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50cf1f88e4b0e61f11ddcd8a"}, {"code": "(fn [s]\n  (apply str (filter \n   #(and (< 64 (int %)) (> 91 (int %))) (seq s))))", "problem": 29, "user": "50ccf729e4b0f7a459302aac"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn [txt] (apply str (remove #(not (Character/isUpperCase %)) txt)))", "problem": 29, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn caps [string]\n  \"\"\"Return uppercase letters of a parameter string\"\"\"\n  (cond\n    (empty? string) (str)\n    (re-matches #\"[A-Z]\" (str (first string))) (str (first string) (caps (rest string)))\n    :else (caps (rest string))))", "problem": 29, "user": "50d4dde8e4b09cc622d65a72"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50d4c626e4b09cc622d65a70"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f03f197535dcb61093f6b84"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "problem": 29, "user": "50d324dde4b049d4ed5650d7"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50bd13dee4b0594b91591c65"}, {"code": "#(loop [st %1, z []] (if (empty? st) (apply str z) (recur (rest st) (if (and (>= (int (first st)) 65) (<= (int (first st)) 91)) (conj z (first st)) z))))", "problem": 29, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50d916eae4b0fd36a4b89221"}, {"code": "#(apply str(keep identity (for [x %] (if(true? (java.lang.Character/isUpperCase x)) x))))", "problem": 29, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [mystr] \n  (clojure.string/replace mystr #\"[^A-Z]\" \"\")\n )", "problem": 29, "user": "50d3317ee4b049d4ed5650da"}, {"code": "(comp clojure.string/join filter) #(. Character isUpperCase %)", "problem": 29, "user": "50daffc3e4b02e6ac9592c72"}, {"code": "(fn [s] \n   (apply str (filter #(contains? (set (map char (range 65 91))) %)\n           (seq s) )))", "problem": 29, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn onlyMaj\n  [string]\n  (apply\n    str\n    (filter\n      (fn toto [x]\n        (and\n          (<= 65 (int x))\n          (>= 90 (int x))))\n    (seq string))))", "problem": 29, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(.replaceAll % \"[^A-Z]\"\"\")", "problem": 29, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [s] (apply str\n\t\t      (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e79f28b535db169f9c796a8"}, {"code": "#(apply str (filter (->> (range 65 91)\n                         (map char)\n                         (set)) %))\n\n;; #(apply str (re-seq #\"[A-Z]\" %))\n\n;; (fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn [x]\n  (reduce str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) x)))", "problem": 29, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn [string]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "50e063f3e4b061dbdced7230"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(apply str\n  (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4dcd327b535d5973398f929b"}, {"code": "#(apply str\n        (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (vec s))))", "problem": 29, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50e3ea47e4b0463d32072485"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [text] \n  (->> text seq (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))) (apply str)))", "problem": 29, "user": "50e3f311e4b0463d32072487"}, {"code": "#(apply \n\tstr \n    (for [c %\n    \t  :when (and (< 64 (int c)) (> 91 (int c)))]\n         c))", "problem": 29, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(clojure.string/join (vec (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "50c0fac8e4b096f585049c34"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [x] (reduce #(str %1 (if (and (>= (int %2) 65) (<= (int %2) 90)) %2 nil)) \"\" x))", "problem": 29, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn [string] (->> string (re-seq #\"[A-Z]\") (apply str)))", "problem": 29, "user": "4fc5273ce4b081705acca37f"}, {"code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "50e41747e4b0463d32072489"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "50dade7be4b02e6ac9592c70"}, {"code": "(fn caps [str]\n  (clojure.string/join (re-seq #\"[A-Z]+\" str))\n)", "problem": 29, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e09f60e4b061dbdced7237"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [s]\n  (let [CAPS (into #{} (range 65 91))]\n    (apply str (filter #(CAPS (int %)) s))))", "problem": 29, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase (Character. %)) coll)))", "problem": 29, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50e4ff72e4b049a987753897"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "#(let [ia (int \\A)\n       iz (int \\Z)\n       ur (set (map char (range ia (inc iz))))\n       ucs (filter (fn [x] (contains? ur x)) %)]\n   (clojure.string/join ucs))", "problem": 29, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "#(apply str (filter (set (map char (range 65 91))) %1))", "problem": 29, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [s] \n   (clojure.string/replace s #\"[^A-Z]\" \"\")\n )", "problem": 29, "user": "50e448bae4b0463d3207248d"}, {"code": "(fn [string]\n  (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) string)))", "problem": 29, "user": "4e7e8485535db169f9c79716"}, {"code": "#(apply str ((fn [st] (filter (fn [l] (Character/isUpperCase l)) st)) %))", "problem": 29, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50e7dd5de4b077ad597af36b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50e98510e4b028853d549f3c"}, {"code": "(fn [s] (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "problem": 29, "user": "50e9d21ce4b02d54280826cf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ebf779e4b04edc3377703e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "problem": 29, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4f03653f535dcb61093f6aa1"}, {"code": "(fn\n  [string]\n  (apply str \n         (#(filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) string)))", "problem": 29, "user": "50eb4c32e4b0346a3e988cbf"}, {"code": "(fn [x] (apply str (re-seq #\"\\p{Lu}\" x)))", "problem": 29, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#(reduce str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) %))", "problem": 29, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn foo [x]   (clojure.string/join (filter (fn boo [c] (not= (clojure.string/lower-case (str c)) (str c))) x)))", "problem": 29, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn \n  [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) (seq s))))", "problem": 29, "user": "50eebf46e4b06330c1f87c61"}, {"code": "#(clojure.string/replace % #\"[^\\p{Lu}]+\" \"\")", "problem": 29, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [x] \n  (let \n    [letterSet (set \"QWERTYUIOPASDFGHJKLZXCVBNM\")]\n  \t(apply str (filter letterSet x))))", "problem": 29, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn f [x]\n\t(apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f56e322e4b0a7574ea7182d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ec8d93e4b04edc3377704c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [s] (apply str (filter #(= Character/UPPERCASE_LETTER (Character/getType %)) (seq s))))", "problem": 29, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [x]\n\t(reduce str (filter #(re-matches #\"[A-Z]\" (str %)) x)\n            )\n  )", "problem": 29, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn caps [s]\n  (apply str (seq (map char (filter #(and (>= % (int \\A)) (<= % (int \\Z))) (map int (seq s)))))))", "problem": 29, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "(fn pow [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e111f7e4b084616e11c663"}, {"code": "(fn caps [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50ef311fe4b0a78662fa2651"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50742549e4b054001656accf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50f7698ee4b0035e8915184a"}, {"code": "#(clojure.string/join (filter (set (map char (range 65 91)))  % ))", "problem": 29, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n)", "problem": 29, "user": "50f4894be4b004d364930528"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x))\n  )", "problem": 29, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [cs]\n  (apply str (filter #(Character/isUpperCase %) cs)))", "problem": 29, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(apply str (concat (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(apply str (filter (fn [c] (. Character isUpperCase c)) %))", "problem": 29, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [x]\t(apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "(fn caps [xs] (apply str (re-seq #\"[A-Z]+\" xs)))", "problem": 29, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn [the-str] (apply str (filter #(Character/isUpperCase %) (seq the-str))))", "problem": 29, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [tofilter]  (apply str (filter #(and (< 64 (int %)) (> 91 (int %))) tofilter)))", "problem": 29, "user": "50f924bbe4b0e7c80cb15a47"}, {"code": "(fn [s]  \n  (apply str \n         (filter \n          (partial contains? (set (map char (range 65 91)))) s)))", "problem": 29, "user": "4df247b8535d08e6dec9fe25"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50b19a91e4b03ea880433552"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f8862de4b0aafb827eb203"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4ecbbe96535df97575fdabe0"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(apply str (re-seq #\"\\p{Lu}\" %))", "problem": 29, "user": "5102489de4b00c483ae176f6"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "problem": 29, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50ee68fce4b06330c1f87c59"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50f48298e4b004d364930527"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "51059d33e4b0380e797c7d5c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn filt\n  [s]\n  (apply str (filter (fn [c]  (and  (>=  (int c)  (int \\A))  (<= (int c) (int \\Z) ) ) )  s)))", "problem": 29, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [s]  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5106c803e4b01150e115ebee"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn caps [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51085be5e4b00aa5c85a1024"}, {"code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn u [s] (if (= 0 (count s)) \"\" (if (Character/isUpperCase (first s)) (str (first s) (u (rest s))) (u (rest s)) )) )", "problem": 29, "user": "510931ede4b0c71f76895663"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn get-caps [coll]\n  (apply str\n    (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [a] (apply str (filter \n    #(and \n       (> (int %) 64 )\n       (< (int %) 91 )\n       )\n   (seq a)))\n  )", "problem": 29, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "510c01bae4b078ea7192110a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e96f0e4b069badc5a33ba"}, {"code": "#(let [caps (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]                                                                                                           \n  (apply str (filter (fn [c] (some (partial = c) caps)) %)))", "problem": 29, "user": "510c1dd5e4b078ea71921113"}, {"code": "(fn c[x]\n  (let [j (re-find #\"[A-Z]\" (str (first x)))\n        jx(rest x)]\n\t  (cond\n  \t (not (nil? j)) \n     \t(apply str (cons j (c jx)))\n     (> (count jx) 0) \n     \t(c jx)\n     :else \"\")))", "problem": 29, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "510cda21e4b078ea71921126"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "510db6cde4b078ea71921145"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(->> (re-seq #\"[A-Z]+\" %)\n      (apply str))", "problem": 29, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [s] (let [valid (range 65 91)\n              is-in? (fn [x coll] (some (partial = x) coll))]\n          (loop [final []\n                 remain s]\n            (cond\n             (empty? remain) (reduce str final)\n             (is-in? (int (first remain)) valid) (recur (conj final (first remain)) (next remain))\n             true (recur final (next remain))))))", "problem": 29, "user": "507a33dee4b08327cd804a68"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5102ef6be4b00c483ae176fc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(->> (re-seq #\"[A-Z]+\" %) (apply str))", "problem": 29, "user": "511026b1e4b04c71fce993ec"}, {"code": "(comp #(apply str %) (partial filter #(<= (int \\A) (int %) (int \\Z))))", "problem": 29, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4fc53390e4b081705acca389"}, {"code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50b35486e4b03ea88043356a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f2b1893e4b0d6649770a047"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51064b76e4b01150e115ebe4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "510f0b95e4b0faca7c680138"}, {"code": "(fn [chaine]\n  (apply str (filter #(Character/isUpperCase %) chaine)))", "problem": 29, "user": "51126a28e4b0350614f07a74"}, {"code": "(fn [a] \n  (apply str (filter #(java.lang.Character/isUpperCase %) a)))", "problem": 29, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [word] (apply str (re-seq #\"[A-Z]+\" word)))", "problem": 29, "user": "5106dc1be4b01150e115ebf0"}, {"code": "reduce\n (fn [x y] (if (and (< (int y) 91)\n                    (> (int y) 64))\n             (str x y) x)) \"\"", "problem": 29, "user": "4f74271ae4b044e54cd9a8f6"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [x]\n  (clojure.string/upper-case\n\t\t(apply str \n       (re-seq #\"[A-Z]\" x))))", "problem": 29, "user": "511060fae4b04c71fce993f1"}, {"code": "(fn only-upper\n  [text]\n  (let [uppers \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        in-upper? (fn [letter] (some #(= letter %) uppers))]\n    (apply str (filter in-upper? text))))", "problem": 29, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [x]\r\n  (clojure.string/join (filter char? \r\n    (map (fn [a] \r\n      (if (> (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n          (int a)) -1) a))\r\n         (seq x))))\r\n)", "problem": 29, "user": "510a6bece4b06956752d35af"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5118b4e0e4b046de85f62a4c"}, {"code": "(fn [l]\n  (apply str\n         (filter\n          (fn [x]\n            (and\n             (<= (int \\A) (int x))\n             (>= (int \\Z) (int x))))\n          l)))", "problem": 29, "user": "511907a4e4b046de85f62a4d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51195e77e4b055cfb310d499"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "#(clojure.string/replace % #\"[^\\p{Lu}]\" \"\")", "problem": 29, "user": "5118acfbe4b046de85f62a4b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "510cba32e4b078ea71921121"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq x))))", "problem": 29, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "(fn filter-upper [s]\n  (clojure.string/join (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "5119f3d5e4b06c8af0111818"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "511a98d7e4b0c87c59c96707"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ff9ea75e4b0678c553fc3b3"}, {"code": "(fn [s] (apply str (filter #(not (= (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str%)) -1)) s)))", "problem": 29, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e3a2761535deb9a81d77f48"}, {"code": "#(apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") %))", "problem": 29, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [s] (apply str (map #(when (Character/isUpperCase %)%) s)))", "problem": 29, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "#(clojure.string/join (filter (fn [c] (and (<= 65 (int c)) (<= (int c) 90))) %))", "problem": 29, "user": "511a4eb4e4b09045b2b16945"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [data] (apply str (filter (fn [c] (. Character isUpperCase c)) data)))", "problem": 29, "user": "5119ef37e4b06c8af0111817"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e50ad74535dc968683fc4ec"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) (seq x))))", "problem": 29, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "#(.replaceAll % \"[^A-Z]+\" \"\")", "problem": 29, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(clojure.string/join (re-seq  #\"[A-Z]\" %))", "problem": 29, "user": "511f88eee4b085952a83535f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510dc185e4b078ea71921146"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n  )", "problem": 29, "user": "512339fce4b03b44edbed434"}, {"code": "(fn [x]\n  ((fn b [y z] (cond (empty? y) (apply str z)\n                       (Character/isUpperCase (first y)) (b (rest y) (conj z (first y)))\n                       :else (b (rest y) z)))\n   x []\n))", "problem": 29, "user": "5099283ce4b0cae2931060af"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [string]\n  (apply str (filter\n                #(true? (Character/isUpperCase %)) string)))", "problem": 29, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn f [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "5123f099e4b02c3f2a072cca"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "5125834ae4b05d10e3e395fa"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [s] (apply\n         str\n         (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "50ff5887e4b017584cb41ccd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5125d963e4b05d10e3e395fe"}, {"code": "#(let [allCaps (set (map char (range 65 91)))]\n(apply str (filter allCaps %)))", "problem": 29, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [a] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) a) ))", "problem": 29, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "51281b25e4b03a34742b4304"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51284226e4b03a34742b4308"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [x]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]+\") x))\n                       )", "problem": 29, "user": "5129039de4b03a34742b4313"}, {"code": "(fn [string]\n  (apply str (filter #(java.lang.Character/isUpperCase %) string)))", "problem": 29, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn v [x] (apply str \n\t(filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))              \n              ))", "problem": 29, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn only-uppers [s]\n  (let [lst-contains? (fn [coll elem] (= elem (some #{elem} coll)))]\n  \t(apply str\n         (filter\n           (fn [c] (lst-contains? (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)) s))))", "problem": 29, "user": "511937eee4b055cfb310d495"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll))\n  )", "problem": 29, "user": "502be4fae4b08f5602f232eb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn getCaps [ein]\n  (apply str \n   (filter \n    (fn  [a] (not (= (.toLowerCase (.toString a)) (.toString a))) ) \n     ein)))", "problem": 29, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [mystr] (apply str (re-seq #\"[A-Z]\" mystr)))", "problem": 29, "user": "510fd798e4b04c71fce993dc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50c011c6e4b080409b860f29"}, {"code": "(fn [s] (->> s (re-seq #\"[A-Z]\") (apply str)))", "problem": 29, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511e3454e4b028ee16def195"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "512dfc5ee4b0b740abc5981f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn [s]\n  (->> (for [c s\n             :let [n (int c)]\n             :when (and (< 64 n) (> 91 n))]\n         c)\n       (apply str)))", "problem": 29, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn just-the-caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51177fbce4b0e0897831a60b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn filter-upcase\n  [s]\n  (let [up (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    (apply str (filter up (seq s)))))", "problem": 29, "user": "5131104ae4b09e21d785bdfe"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(fn caps\n  [s]\n  (let [uchars (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter uchars s))))", "problem": 29, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn f [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [s]\n  (clojure.string/join\n   (filter\n    (set (clojure.string/split \"ABCDEFGHIJKLMNOPQRSTUVVWXYZ\" #\"\"))\n    (clojure.string/split s #\"\")\n   )\n  )\n)", "problem": 29, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "#(apply str (seq (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn [s] (apply str (let [ss (seq s)] (filter #(Character/isUpperCase %) ss))))", "problem": 29, "user": "51365524e4b04ac1f358dd52"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "51352899e4b082aeb3a3f03b"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5137efaae4b0a5db03d727d2"}, {"code": "(fn [s] (apply str  (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [text] (apply str (filter #(let [s (str %)] (and (= s (.toUpperCase s)) (not (= s (.toLowerCase s))))) text)))", "problem": 29, "user": "513a4babe4b067e25a345eca"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "513a2f23e4b067e25a345ec6"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "5139656ce4b0a5db03d727e3"}, {"code": "(fn [y] (apply str (filter (fn [x] (reduce #(or % %2) (for [i (vec \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")] (= i x)))) (vec y))))", "problem": 29, "user": "512f06c5e4b0762be4c7aad7"}, {"code": ";(fn [x] (reduce str (map str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x))))\n(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "513b77f3e4b00f740c76c403"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5138d08be4b0a5db03d727db"}, {"code": "reduce #(str %1 (if (Character/isUpperCase %2) %2 \"\")) \"\"", "problem": 29, "user": "513d121fe4b0e544971636a2"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x) ) % ) )", "problem": 29, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn [x]\n\t(clojure.string/join (filter (fn [x]\n\t\t(let [num-a (int \\A)\n\t\t  num-z (int \\Z)\n\t\t  num-x (int x)]\n\t  (and (>= num-x num-a) (<= num-x num-z)))) x)))", "problem": 29, "user": "51205867e4b0e88f5a20c40f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "510ec1bce4b07438aa321461"}, {"code": "(comp (partial apply str) (partial filter #(and (>= (int %) 65) (<= (int %) 90))))", "problem": 29, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn getCaps [s]\n  (apply str (filter #(and\n            (>= (int %) (int \\A))\n            (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [l]\n  (reduce (fn [ret this]\n            (str ret (re-find #\"[A-Z]\" (str this)))) nil l))", "problem": 29, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn[s] (apply str (filter #(and (> 91 (int %)) (< 64 (int %))) s)))", "problem": 29, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "510b5596e4b078ea719210fd"}, {"code": "(fn [str] \n  (reduce #(format \"%s%s\" %1 %2) (conj (re-seq #\"[A-Z]+\" str) \"\")))", "problem": 29, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) x)))", "problem": 29, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5102f4f9e4b00c483ae176fd"}, {"code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "50a3e2eae4b0ceace084d49a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "51416934e4b03d51af0d04f0"}, {"code": "(fn caps [string] (apply str (filter #(and (> (int %) (dec (int \\A)) ) (< (int %) (inc (int \\Z)) ) ) (seq string) ) ))", "problem": 29, "user": "513f400ae4b051389b345b3f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5140b7bae4b076604f1aa55b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51435753e4b0c172af7558d5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51430fb2e4b0c172af7558ce"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5145832be4b0e8879607340a"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn only-caps [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn [string]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) string)))", "problem": 29, "user": "50e135f4e4b084616e11c667"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "514677dce4b04ef915e3731a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "problem": 29, "user": "513dfe2ce4b0825f97f7f966"}, {"code": "(fn up [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "514852b4e4b0203766d54154"}, {"code": "(fn touc [arg]\n  (apply str (filter #(some #{(int %)} (range (int \\A) (inc (int \\Z))))\n                     (seq arg))))", "problem": 29, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s)) ))", "problem": 29, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [s]\n    (let [list (map char (range 65 91))\n          inboth (fn [x y]\n                   (for [a x b y :when (= a b)]\n                     a))]\n      (clojure.string/join (inboth s list))))", "problem": 29, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )", "problem": 29, "user": "51377188e4b04059df19f303"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4dcc2435535d5973398f9290"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5140c505e4b049dea086df40"}, {"code": "#(apply str (re-seq  #\"[A-Z]\" %))", "problem": 29, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5143c13ee4b0b4fb4ace5f3b"}, {"code": "(fn f [x] (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) x)))", "problem": 29, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) (seq xs))))", "problem": 29, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "513fb358e4b00f13ea1bd893"}, {"code": "#(apply clojure.string/join (re-seq #\"[A-Z]\" %) \"\")", "problem": 29, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn f [x] (reduce str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "514d2c7ee4b019235f6c0582"}, {"code": "(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "514e4ae4e4b019235f6c0594"}, {"code": "#(.replaceAll %1 \"[^A-Z]\" \"\")", "problem": 29, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))", "problem": 29, "user": "51340abbe4b0915833951877"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn [astr] (apply str (re-seq #\"[A-Z]\" astr) ) )", "problem": 29, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "51502056e4b098b221effc25"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51508efce4b0c51f0585bbb4"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51424c61e4b0b50abeb46b33"}, {"code": "(fn re [s] (apply str(filter \n         #(and (<= (int %) (int \\Z)) (<= (int \\A) (int %)))\n         s))\n  )", "problem": 29, "user": "51037468e4b00c483ae17702"}, {"code": "(fn filter-upper\n  [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5073e7fde4b054001656accb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5150600de4b098b221effc29"}, {"code": "(fn myMax [mystr]\n (clojure.string/join \"\"\n   (re-seq #\"[A-Z]\" mystr)\n  ))", "problem": 29, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [x] \n  (apply str \n         (filter \n          \t(fn [c] (and (>= (int c) 65) (<= (int c) 90)))\n          \tx\n          ))\n  )", "problem": 29, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn upper [x]\n  (clojure.string/join (doall (re-seq #\"[A-Z]\" x)))\n  )", "problem": 29, "user": "514c2e78e4b02b8cbb2a9279"}, {"code": "(fn [string]\n   (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "51469a3ae4b04ef915e3731b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "514def61e4b019235f6c0591"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5150f87ae4b03e678e393ac7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn f [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5151d574e4b03e678e393ae0"}, {"code": "#(apply str (for [x % :when (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))] x))", "problem": 29, "user": "5153b1bce4b0252ac4b16639"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51558136e4b06c5f6a1490a8"}, {"code": "(fn[s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51383346e4b0a5db03d727d4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "(fn justupper [input] (apply str (re-seq #\"[A-Z]\" input)))", "problem": 29, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51533ecde4b0252ac4b16619"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "51547920e4b084ca81ee2e1c"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))", "problem": 29, "user": "51584459e4b0a069fd272c74"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "#(apply str (filter (fn [ch] (and (>= (compare ch \\A) 0) (<= (compare ch \\Z) 0))) %))", "problem": 29, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "(fn [s]\n  (apply str\n    (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "problem": 29, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn\n          [s]\n          (reduce str\n            (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "514d7e29e4b019235f6c0587"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515c9f14e4b069911535cf16"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "515efd01e4b02c55805ea238"}, {"code": "#(clojure.string/replace %  #\"[^A-Z]\" \"\")", "problem": 29, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "515a46d3e4b0394f658fe23f"}, {"code": "(fn onlycaps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "problem": 29, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "515e38ace4b049add99a0538"}, {"code": "#(reduce str (filter (fn [x] (and (>= (compare x \\A) 0) (>= (compare \\Z x) 0))) %))", "problem": 29, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [text] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) text)))", "problem": 29, "user": "514a6199e4b0829bd132edb9"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "515bed3be4b0388ca8ca1525"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "516095c9e4b009fba0926e29"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "515b5d21e4b0a102a3e52634"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn [mixedcase]\n  (clojure.string/join (re-seq #\"[A-Z]\" mixedcase)))", "problem": 29, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(apply str (re-seq #\"[A-Z+]\" %))", "problem": 29, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s) )))", "problem": 29, "user": "51607eb0e4b009fba0926e27"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [s] (apply str (filter (fn [l] nil? (re-find #\"[A-Z]\" (str l))) s)))", "problem": 29, "user": "515f10dce4b02c55805ea23b"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5156e767e4b04360f2428e6b"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5149f383e4b0829bd132edb2"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn [s] (apply str (filter #(and (<= (.hashCode \\A) (.hashCode %))\n                                 (<= (.hashCode %) (.hashCode \\Z)))\n                    s)))", "problem": 29, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "#(apply str (re-seq '#\"[A-Z]\" %))", "problem": 29, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "reduce (fn [y x] (->> x (str \"\") (re-matches #\"[A-Z]\") (str y))) \"\"", "problem": 29, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51639d26e4b055933a9ca02e"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51623490e4b009fba0926e42"}, {"code": "(fn [m] (apply str (re-seq #\"[A-Z]\" m)))", "problem": 29, "user": "5161c6a7e4b009fba0926e38"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [x]\n  (let [iscap #(and (>= (int %) (int \\A))\n                    (<= (int %) (int \\Z)))]\n    (apply str (filter iscap x))))", "problem": 29, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51670895e4b013fc800656c1"}, {"code": "(fn xxx [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "#(apply str (re-seq  #\"\\p{Upper}\" %))", "problem": 29, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [s]\n  (apply str\n    (filter\n      #(<= (int \\A) (int %) (int \\Z)) (seq s)) ))", "problem": 29, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x)) ))", "problem": 29, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [coll]\n(apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f3ba98e4b041536e2eca39"}, {"code": "(fn [x] (apply str (map char (filter #(and (> % 64) (< % 91)) (map int x)))))", "problem": 29, "user": "5113e492e4b0029845b11c58"}, {"code": "(fn [s] (.toString (reduce (fn [acc x] (cond\n                         (= (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (int x)) -1) acc\n                         :default (.append acc x)\n                             )\n                  )\n                (new StringBuilder)\n                (list* s)\n                )\n                   )\n  )", "problem": 29, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [s] (clojure.string/join (clojure.string/split s #\"[^A-Z]\")))", "problem": 29, "user": "51631002e4b017b283c712c1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [string]\n  (apply str(filter #(Character/isUpperCase %) string))\n)", "problem": 29, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn [s]\n  (apply str (filter\n              #(contains? (set (range 65 91)) (int %))\n              (str s))))", "problem": 29, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [string]\n  (apply str (filter #(if (re-matches #\"\\p{Upper}\" (str %)) true) string)))", "problem": 29, "user": "513a734de4b067e25a345ecb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51652141e4b003cf19fdde48"}, {"code": "(fn all-caps [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "(fn [string]\n    (reduce str (vec (filter #(Character/isUpperCase %) string))))", "problem": 29, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn f [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "516ed04ee4b06aac486e5b30"}, {"code": "#(apply str (reduce\n    (fn [ss s] (if (and (<= (int \\A) (int s)) (>= (int \\Z) (int s))) (conj ss s) ss))\n   [] (vec %)))", "problem": 29, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn all-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn [xs] (reduce str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn getCaps [the-string]\n\t(if (empty? the-string)\n\t\t\"\"\n\t\t(if (and \n\t\t\t\t(<= 65 (int (first the-string))) \n\t\t\t\t(>= 90 (int (first the-string)))\n\t\t\t)\n\t\t\t(str (first the-string) (getCaps (rest the-string)))\n\t\t\t(getCaps (rest the-string))\n\t\t)\n\t)\n)", "problem": 29, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [in]\n  (let [caps (fn [x] (and (< (int x) 91) (> (int x) 59)))]\n    (apply str (filter caps in))))", "problem": 29, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(clojure.string/join (filter (set (map char (range (int \\A) (int \\[)))) %))", "problem": 29, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn n [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn [s]\n  (apply str \n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn [string]\n   (apply str (filter (fn [l] (Character/isUpperCase l)) string)))", "problem": 29, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [s] (apply str (map char (filter (fn [x] (and (>= x 65) (<= x 90))) (map int (seq s))))))", "problem": 29, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [st]\n  (clojure.string/join \"\"\n                       (filter #(not (= (str %) (.toLowerCase (str %))))\n                               (seq st))))", "problem": 29, "user": "5175616ae4b0dea9bbfba576"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" % ))", "problem": 29, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [word]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" word)))", "problem": 29, "user": "5170643ee4b004f79986ad89"}, {"code": "(fn [s]\n  (apply str (filter #(. Character isUpperCase %) s)))", "problem": 29, "user": "5173726be4b098276e74652c"}, {"code": "(fn [letters] (apply str (re-seq #\"[A-Z]\" letters)))", "problem": 29, "user": "5150b220e4b03e678e393ac0"}, {"code": "(fn [lst] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) lst)))", "problem": 29, "user": "5159849ce4b0394f658fe236"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51778122e4b085adf681d89d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [s]\n  (clojure.string/escape \n   s \n   #(if (and (< (int %) 96) (> (int %) 64)) \n     nil\n     \"\"\n     )))", "problem": 29, "user": "5164d97ee4b003cf19fdde43"}, {"code": "(fn foo [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51789599e4b03d69594194d6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51780f88e4b03d69594194c9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "517531c6e4b07031762f2eea"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "517adc6ce4b0925c997201c4"}, {"code": "#(clojure.string/join (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "problem": 29, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn [xs] (apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) xs)))", "problem": 29, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(apply str\n        (filter\n         (fn is-upper? [c]\n           ((set (range (int \\A) (+ 1 (int \\Z))))\n            (int c))) %))", "problem": 29, "user": "517bf28de4b07ef0e56148d5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(fn [cs] (apply str (re-seq #\"[A-Z]\" cs)))", "problem": 29, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4eedccbc535d93acb0a668c0"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "50fc9c08e4b0d10d794c19f9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5166b491e4b060c690c1f4be"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5093a80be4b097f48cc38583"}, {"code": "#(apply str (filter \n               #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} \n               %))", "problem": 29, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [s] \n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51803613e4b04f45bde7d8fd"}, {"code": "(fn [s] (apply str\n                (filter  #(apply <= (map int [\\A % \\Z])) s) ))", "problem": 29, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [xs] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") xs)))", "problem": 29, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "#( apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "516733fce4b079759a74a5e9"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "518139bee4b06547fbae1149"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "51836944e4b028ec5fd2f29f"}, {"code": "(fn  [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "506617fce4b03d366d7cb2ac"}, {"code": "#(apply str (filter (fn [l] (not (nil? (re-matches #\"[A-Z]\" (str l))))) %))", "problem": 29, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "51797cb9e4b0684c1c981a4b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "(fn only-caps [xs]\n    (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5186571de4b0da5a5be3bad1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5184f9e9e4b02826a645f39e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "518696c1e4b0c40be512d708"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "(fn[x]\n(apply str (map char (filter #(and (<= % 90) (>= % 65))(map int  x)))))", "problem": 29, "user": "517e6671e4b0329b27fa9f56"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51870799e4b057e3860ab7dc"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [s]\r\n     (clojure.string/join\r\n       \"\"\r\n       (->>\r\n         (seq s)\r\n\r\n         (filter\r\n           (fn [c] (= (clojure.string/upper-case c) (str c))))\r\n\r\n         (filter\r\n           (fn [c] (Character/isLetter c)))\r\n         )))", "problem": 29, "user": "5184f4fce4b02826a645f39d"}, {"code": "(fn only-caps [text]\n  (clojure.string/join (re-seq #\"[A-Z]\" text))\n  )", "problem": 29, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "515e2000e4b049add99a0534"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5188c487e4b0bdff0e072d55"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [original]\n  (reduce #(str % %2) \"\"\n      (filter \n        (fn [ch] \n          (some \n           #(= ch %) \n           (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n          )\n        ) \n        original\n      )\n   )\n  )", "problem": 29, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [s]\n (apply str (remove #(or (> (int \\A) (int %)) (< (int \\Z) (int %))) s))\n)", "problem": 29, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "(fn [x] (loop[myS \"\" myL x](if(not= (first myL) nil)\n                              (recur\n                               (str myS (re-find #\"[A-Z]\" (str (first myL))))\n                               (rest myL))\n                              myS\n                             )\n          )\n  )", "problem": 29, "user": "5177cacde4b0261ae665b877"}, {"code": ";convert to lowercase   (.toLowerCase w)\n;convert to uppercase   (.toUpperCase w)\n(fn getCps [w]\n  (loop [result \"\"       len (.length w)      i 0]\n    (if (= i len) \n        result\n\t\t(if (= (.charAt w i) (.charAt (.toLowerCase w) i))\n            (recur result len (inc i))\n       \t\t(recur (.concat result (.toUpperCase (.toString (.charAt w i)) ))   len  (inc i))\n        )\n    )\n  )\n)", "problem": 29, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "518ec633e4b0cd6ff516769e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51771cb1e4b085adf681d895"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51026750e4b00c483ae176f7"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "518f9e14e4b08646f171ca07"}, {"code": "(fn [phrase] (apply str (filter #(Character/isUpperCase %) phrase)))", "problem": 29, "user": "516d7efde4b0fddc7b37210e"}, {"code": "#(->> %\n    (re-seq #\"[A-Z]\")\n    (apply str)\n)", "problem": 29, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [s] (.replaceAll s \"[^A-Z]\" \"\"))", "problem": 29, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "50a8bb65e4b0deba384a58bd"}, {"code": "#(clojure.string/join \"\" (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "50992197e4b0cae2931060ae"}, {"code": "(fn only-c [ss]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) ss)))", "problem": 29, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [phrase]\n                             (->> phrase\n                                  (filter #(Character/isUpperCase %))\n                                  (apply str)))", "problem": 29, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "reduce #(if (Character/isUpperCase %2) (.concat % (str %2)) %) \"\"", "problem": 29, "user": "51131da8e4b0350614f07a83"}, {"code": "(fn ! [x] (apply str (filter #(and (<= (int %1) 90) (>= (int %1) 65)) x)))", "problem": 29, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn caps-only\n  [s]\n  (apply str ( filter #(and\n                           (< (int %) 91)\n                           (> (int %) 60)) s ) ))", "problem": 29, "user": "51950793e4b09df09a77a3e4"}, {"code": "(fn [mystr] (apply str (filter #(Character/isUpperCase %) mystr)))", "problem": 29, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "#(apply str (concat (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "5194675fe4b0142f60b4aedf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "518a8c4be4b0df82f5685903"}, {"code": "#(apply str\n   (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(apply str\n   (loop [caps [], dex 0]\n     (cond\n       (= dex (count %)) caps\n       true (let [c (int (.charAt % dex))]\n              (recur (if (<= (int \\A) c (int \\Z)) (conj caps (.charAt % dex)) caps)\n                     (inc dex))))))", "problem": 29, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [x] (apply str (map #(if (not= (clojure.string/lower-case %) (str %)) %) x)))", "problem": 29, "user": "51980f7ce4b068aa333628f7"}, {"code": "#(apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) %))", "problem": 29, "user": "5197f674e4b068aa333628f6"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5196749be4b04c0af7ff3c20"}, {"code": "(fn uppers-only [x]\n   (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51811d5ee4b06547fbae113c"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "problem": 29, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %1) xs)))", "problem": 29, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51118901e4b03f43822243d2"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4db21508535d37964ddf999b"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "516385cee4b055933a9ca02d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn [x] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) x)))", "problem": 29, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "problem": 29, "user": "519d66d2e4b037b32803f9b2"}, {"code": "(fn [x]\n\t(apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "51794ec2e4b0684c1c981a45"}, {"code": "(fn caps [x] (apply str (filter #(and (<= (int %1) 90) (>= (int %1) 65)) x)))", "problem": 29, "user": "5194f482e4b05be8c43d2385"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn jn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [input-str]\n  (loop [my-seq (re-seq #\"[A-Z]+\" input-str) my-str \"\"]\n    (if (empty? my-seq)\n      my-str\n      (recur (rest my-seq) (str my-str (first my-seq))))))", "problem": 29, "user": "51991a89e4b068aa333628fd"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [s]\n\t(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50f69a3ce4b0035e89151844"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51a3ca78e4b0e77c4ca60bfa"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "51485d25e4b0203766d54155"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "4e57afc5535d8a8b8723a288"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn ca [x]\n  (when (not (= x '()))\n    (let [c (first x)]\n      (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)\n        (str c (ca (rest x)))\n        (ca (rest x))))))", "problem": 29, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(fn caps[string]\n  (apply str (filter (fn[n](Character/isUpperCase n)) string)))", "problem": 29, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn [st]\n  (apply str (filter #(Character/isUpperCase %1) st)))", "problem": 29, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [s]\n  (apply str \n  \t(filter #(re-find #\"[A-Z]\" %) (clojure.string/split s #\"\"))))", "problem": 29, "user": "51197750e4b057cba170bc99"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [col]\n  (apply str (filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "51a87d28e4b08d8ec191b811"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51a132cee4b0b292b01ee3ff"}, {"code": "#(apply str (apply concat (re-seq #\"[A-Z]+\" %)))", "problem": 29, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51a8ef91e4b08d8ec191b820"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5065dd94e4b0313a384e5643"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "51a88e7fe4b08d8ec191b813"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51a417dde4b0def3c5c58688"}, {"code": "#(apply str ( re-seq #\"[A-Z]\" % ) )", "problem": 29, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(apply str (re-seq #\"[A-Z]\" % ))", "problem": 29, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "506cad7de4b0a302964c548e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [x]\n    (apply str (filter \n                  #(if (> (int \\A) (int %1)) false \n                       (>= (int \\Z) (int %1)))\n                  x)))", "problem": 29, "user": "5183f5d7e4b02826a645f393"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a1659de4b00957e520db72"}, {"code": "(fn [a] (apply str (re-seq #\"[A-Z]\" a)))", "problem": 29, "user": "51761580e4b085adf681d880"}, {"code": "(fn [x] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))", "problem": 29, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn only-caps [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "51ac6360e4b09397d510976c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a5d967e4b051b01d55f454"}, {"code": "(fn [s] (apply str (remove (set (clojure.string/lower-case s)) s)))", "problem": 29, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "(fn [s]  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "508e26c2e4b0f17d83ea26ca"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn [x]\n  (apply str (filter #(some #{%} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) (seq x))))", "problem": 29, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn only-uppercase\n\t[some-string]\n  (clojure.string/join (clojure.string/replace \n                                some-string #\"[^A-Z]\" \"\")))", "problem": 29, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51ad0ab8e4b09397d510977b"}, {"code": "reduce #(str %1 (re-find #\"[A-Z]\" (str %2))) \"\"", "problem": 29, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [s]\n (apply str \n        (filter \n         (fn [c] (and (<= (int c) (int \\Z))\n                      (>= (int c) (int \\A))))\n         \ts )))", "problem": 29, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [x] (clojure.string/replace x #\"[a-z\\,\\!\\$\\%\\#\\*\\&\\s\\)\\(\\d]\" \"\" ))\n;never try this at home kids", "problem": 29, "user": "51a89810e4b08d8ec191b817"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51b38769e4b026427ecf067f"}, {"code": "#(apply \n  str \n  (filter \n   (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) \n   (seq %)))", "problem": 29, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn get-uppers [lat] \n  (apply str\n     (filter #(Character/isUpperCase %) (apply list lat))))", "problem": 29, "user": "514cc029e4b019235f6c057c"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4f2c3ef8e4b0d6649770a051"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn [s] (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn [s]\n  (->> s \n       (filterv \n        #(let [a (int %)] \n           (and (> a 64) (< a 91)))) \n       \n       (apply str)))", "problem": 29, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "505d70e8e4b0e6aca564be09"}, {"code": "(fn [s] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(apply str (filter (fn [x] (if (nil? (re-find #\"[A-Z]\" (str x))) false true)) %1))", "problem": 29, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [s] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %))  s)))", "problem": 29, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [string]\n  (apply str\n    (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn get-c [s]\n  (apply str (filter (fn [c]\n            (and (> (int c) 64) (< (int c) 91))) s)))", "problem": 29, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn [string] (apply str (filter #(and (>= (int %1) 65) (<= (int %1) 90)) string)))", "problem": 29, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn all-caps [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn caps [s]\n  (apply str(reduce concat '() (re-seq #\"[A-Z]+\" s))))", "problem": 29, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn [s] (apply str (filter (fn [x] ( let [c (int x) a (int \\A) z (int \\Z)] (and (>= c a) (<= c z) )  )) s)))", "problem": 29, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51bc6d54e4b0fe3ecfb4645c"}, {"code": "#(apply str (filter (fn [c] (contains? #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} c)) %))", "problem": 29, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "509fda73e4b08df8156e9e41"}, {"code": "(fn get-caps\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51bcf091e4b0df1216cefd91"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn uponly [s] (clojure.string/replace s #\"[^A-Z]*\" \"\"))", "problem": 29, "user": "51b08df5e4b0c53cf2e68a67"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5092f940e4b097f48cc3857b"}, {"code": "(fn getcaps [astr] (let [achar (first astr),\n                         caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z},\n                         therest (rest astr)]\n                     (cond\n                      (empty? astr) \"\"\n                      (nil? (caps achar)) (getcaps therest)\n                      :else (str achar (getcaps therest)))))", "problem": 29, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "4e184b13535d04ed9115e7f1"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn [s] \n  (apply str (\n  \tfilter #(Character/isUpperCase %) s\n\t  )\n  )\n)", "problem": 29, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [x]\n\n  (clojure.string/join \"\" (filter (fn [z]\n            (if (= (clojure.string/lower-case z) (clojure.string/upper-case z) )\n              false\n              (= z (clojure.string/upper-case z) )\n              )\n            ) (seq  (map #(str %) x)))\n   )\n  )", "problem": 29, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "51c342e9e4b0851ac09658f3"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51c1229be4b0c9c822882944"}, {"code": "(fn caps [s]\n    (when-let [[fst & rst] s]\n      (if (Character/isUpperCase fst)\n        (str fst (caps rst))\n        (caps rst))))", "problem": 29, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn [t] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" t)))", "problem": 29, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn only-caps\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn [s]\n  (let [mapping (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter #(not (nil? (mapping %))) s))))", "problem": 29, "user": "504e0517e4b078edc5f5939a"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(apply str (filter (set (map char (range 65 (+ 65 26)))) %))", "problem": 29, "user": "4f6b9d0ae4b07046d9f4efad"}, {"code": "(fn my-caps [s]\n      (apply str (filter #(Character/isUpperCase %) s)\n        ))", "problem": 29, "user": "51b9f5a6e4b0e871ca49590e"}, {"code": "(fn [coll] \n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn ! [input] \n   (str (#(if (and (> (int %) 64) (< (int %) 91)) % nil)\n         (first input))\n\n        (if (> (count input) 1) (! (rest input)) nil)))", "problem": 29, "user": "50d6d7eee4b0159555a1fc76"}, {"code": ";#(apply str (filter string?\n;        (map (partial re-find #\"[A-Z]\")\n;            (map str (vec %)))))\n\n\n#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51793056e4b0684c1c981a41"}, {"code": "(fn [s](apply str (filter #(Character/isUpperCase  %) s)))", "problem": 29, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [sq] (apply str (filter #(and\n                        (= (str %) (clojure.string/capitalize (str %)))\n                        (Character/isLetter %)) sq)))", "problem": 29, "user": "51c76864e4b07ef393169e3f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51a34135e4b0ab315a23ba63"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51c6eabde4b07ef393169e3c"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "(fn [string] (clojure.string/join (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "51cc5f20e4b02254fc794870"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "51cbc435e4b08d8387cbeddd"}, {"code": "(fn [x] (apply str (map char (filter #(and (> % 64) (< % 91)) (.getBytes x)))) )", "problem": 29, "user": "51cc2d84e4b02254fc79486c"}, {"code": "(fn [s]\n  (apply str (map char (filter (fn [x] (and (> x 64) (< x 91)))\n                                                        (map int s)))))", "problem": 29, "user": "51ccc92ce4b02254fc79487a"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn zz [l]\n  (if (empty? l)\n    \"\"\n    (if (and (not(= (str(first l)) (clojure.string/lower-case (first l))) )(= (str(first l)) (clojure.string/upper-case (first l))))\n      (str (str(first l)) (zz (rest l)))\n      (zz (rest l)))))", "problem": 29, "user": "51cdec45e4b0e42293a2254f"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "51c858c3e4b07ef393169e55"}, {"code": "(fn [x] (apply str (filter #(and (< 64 (int %)) (> 91 (int %))) (seq x))))", "problem": 29, "user": "51ccc179e4b02254fc794879"}, {"code": ";#(reduce (fn [x y] (if (= y (clojure.string/upper-case y)) (concat x [y]) x)) \"\" %)\n#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [str] (clojure.string/join (filter #(re-find #\"[A-Z]\" %) (drop 1 (clojure.string/split str #\"\")))))", "problem": 29, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "problem": 29, "user": "51cf99bce4b0e42293a22576"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [s]\n  (apply str \n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [x] (apply str (map  #(some #{%} '(\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z)) x)))", "problem": 29, "user": "51cf126ae4b0e42293a2256b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [input]\n    (apply str (re-seq #\"[A-Z]\" input))\n)", "problem": 29, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) (str s))))", "problem": 29, "user": "50bfd849e4b042992946c649"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d287f5e4b0d13b04db0d9a"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51d1e840e4b0d13b04db0d91"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "problem": 29, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [s] (apply str (filter #(. Character isUpperCase %) s)))", "problem": 29, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))", "problem": 29, "user": "51d7efc3e4b0154f82ab9302"}, {"code": "(fn [x] (clojure.string/join \n         (for [i x\n              :when (if (re-seq #\"[A-Z]\" (str i)) true false)]\n              i)))", "problem": 29, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn upper [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [s]\n    (let [Ai (int \\A)\n          Zi (int \\Z)]\n      (reduce\n        (fn [accum x]\n          (let [ix (int x)]\n            (if (and (<= Ai ix) (>= Zi ix))\n              (str accum x)\n              accum)))\n        \"\" s)))", "problem": 29, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "#(apply str  (filter  (fn [x] (re-find #\"[A-Z]\" (str x)))  (seq %)))", "problem": 29, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn [string]\n   (clojure.string/replace string #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn [x] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) x)))", "problem": 29, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn [s] (clojure.string/join (clojure.string/split s #\"[^A-Z]\")))", "problem": 29, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn get-caps [s]\n  (apply str (filter #(>= 90 (int %) 65) s)))", "problem": 29, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [coll] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) coll)))", "problem": 29, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [txt] (apply str (filter #(re-find #\"[A-Z]\" (str %)) txt)))", "problem": 29, "user": "51db27dbe4b094966a2cd688"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [s]\n  (clojure.string/join (clojure.string/split s #\"[^A-Z]*\")))", "problem": 29, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51da565ae4b02ceefd947765"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e00020e4b01188f0627534"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51df505be4b01188f062752a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [s] (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "problem": 29, "user": "51da5552e4b02ceefd947764"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50e90813e4b033b0e80d11e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn [y] \n  (apply str\n         (filter \n          (fn [x] (and (>= 90 (int x)) (< 61 (int x))))\n            y\n          )\n         )\n  )", "problem": 29, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51e24a04e4b01e5198146430"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d11f5de4b067c365486360"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn [word] (clojure.string/replace word #\"[^A-Z]\" \"\"))", "problem": 29, "user": "51aee76ce4b09397d5109796"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(clojure.string/join (clojure.string/split %1 #\"[^\\p{Upper}]\"))", "problem": 29, "user": "51d59859e4b01da06753aa92"}, {"code": "#(->> % (re-seq (re-pattern \"[A-Z]\")) (apply str))", "problem": 29, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "514fd753e4b0b449e54b8e00"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51b66b31e4b02e5820733406"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "(fn [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn [s] \n  (let [up (filter #(and (< (.hashCode  % ) 97) (> (.hashCode %) 64)) s)]\n    (reduce str up)))", "problem": 29, "user": "5022292ee4b0846bc458ae46"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51df825de4b01188f062752b"}, {"code": "(fn [s] (apply str (map char (filter #(and (>= % 65) (<= % 97)) (map int s)))))", "problem": 29, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn[x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "51e85d2de4b048bc21b181ee"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "51daa721e4b02ceefd94776f"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "51e81b10e4b048bc21b181ea"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51e89428e4b006d205356a51"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51dc5033e4b09c47a74ce109"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51ddcd9ae4b0de53e6370c49"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn \n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn flt [x]\n\t(apply str\n   \t\t(filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [s] (apply str (filter #(and (< (int %) 97) (> (int %) 64)) (char-array s))))", "problem": 29, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "problem": 29, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [s]\n  (apply str\n         (filter\n          (fn [r] (or (= r \\A)(= r \\B)(= r \\C)(= r \\D)(= r \\E)(= r \\F)\n                      (= r \\G)(= r \\H)(= r \\I)(= r \\J)(= r \\K)(= r \\L)\n                      (= r \\M)(= r \\N)(= r \\O)(= r \\P)(= r \\Q)(= r \\R)\n                      (= r \\S)(= r \\T)(= r \\U)(= r \\V)(= r \\W)(= r \\X)\n                      (= r \\Y)(= r \\Z))) (seq s))))", "problem": 29, "user": "51effd77e4b0249c592fbdf3"}, {"code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "problem": 29, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "#(apply str (filter (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) true false)) %))", "problem": 29, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [lst] (apply str(filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) lst)))", "problem": 29, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51ec9114e4b069f463c22ccd"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f04e89e4b0274c496158cd"}, {"code": "(fn [x]\n  (apply str\n    (filter \n     #(if (>= 90 (int %))\n        (if (<= 65 (int %))\n          true))\n     x)\n  )\n)", "problem": 29, "user": "51efdbbee4b0249c592fbdec"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "511b233ae4b07ab9ec456180"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51ed09b6e4b0bb507043158b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [x]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "51f629dde4b06ff1c25c52ba"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50dfc83fe4b061dbdced7229"}, {"code": "(fn caps [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn [y] (apply str (filter (fn [x] (and  (>=(int x) 65) (<=(int x) 90)) ) y )))", "problem": 29, "user": "4e692c0d535d8ccf87e9fe99"}, {"code": "(fn [x] (apply str (filter #(re-find #\"([A-Z])\" (str %1)) x)))", "problem": 29, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f297a3e4b0210f90e74552"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51db1abae4b094966a2cd685"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [coll]\n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [coll] (apply str \n                  (filter (set \n                           (map char \n                                (range (int \\A) (inc (int \\Z)))))\n                          coll)))", "problem": 29, "user": "518279abe4b0353c468deb65"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "51f82769e4b09be9c177e527"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)) )", "problem": 29, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f8277be4b09be9c177e528"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51f7ce61e4b06ff1c25c52db"}, {"code": "(fn [string]\n      (apply str ((fn [s] (filter #(and\n                                    (= (clojure.string/upper-case %) (str %))\n                                    (not (= (clojure.string/lower-case %) (str %)))) (seq s))) string)))", "problem": 29, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [coll]\n \t\t (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51fc9251e4b0f1313d468a27"}, {"code": "(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) (vec s))))", "problem": 29, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "5200054de4b023d2eb508ca7"}, {"code": "#(apply str (re-seq #\"[A-Z]\"  %))", "problem": 29, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "519f0f81e4b087743fad219b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "518e7d3be4b051adb72789f0"}, {"code": "#(apply str (re-seq (re-pattern #\"[A-Z]\") %))", "problem": 29, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "(fn [s]\n  (let\n    [st (.replaceAll s \"(\\\\W)|[0-9]\" \"\")]\n    (apply str\n           (map #(str (first %))\n                (filter #(= (first %) (second %))\n                        (map list (seq st) (seq (.toUpperCase st))))))))", "problem": 29, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "problem": 29, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "#(apply str (for [x (seq %1)] (re-find #\"[A-Z]\" (str x))))", "problem": 29, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn [x]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))", "problem": 29, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "problem": 29, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [x] (apply str (#(re-seq #\"[A-Z]\" %) x) ))", "problem": 29, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(fn [s]\n  (let [caps (set \"ABCDEFGHJKLMNOPQRSTUVWXYZ\")\n        matches (filter (fn[letter] (caps letter)) (seq s))]\n    (apply str matches)\n    )\n)", "problem": 29, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(clojure.string/join (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51f0ade4e4b0274c496158d9"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [x] \n\t(clojure.string/join \"\" \n\t\t(filter \n\t\t\t#(not= \n\t\t\t\t(first (clojure.string/lower-case %))\n\t\t\t %) \n\t\tx)\n\t)\n)", "problem": 29, "user": "520797ebe4b03bd50ef5466d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [x]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) x)))", "problem": 29, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [string]\n  (clojure.string/join \n   (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn teste [text]\n  (apply str (re-seq #\"[A-Z]+\" text)))", "problem": 29, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f88f57ae4b033992c121c73"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [x] (.replaceAll x \"[^A-Z]\" \"\"))", "problem": 29, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "(fn blah [n] \n  (apply str \n         (filter \n          #(and \n            (<= (int %) (int \\Z)) \n            (>= (int %) (int \\A))) \n          n)))", "problem": 29, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [x]\n  (clojure.string/upper-case\n  \t(apply str \n       (re-seq #\"[A-Z]\" x))))", "problem": 29, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "520a576be4b0e152394d7714"}, {"code": "(fn [s] (apply str (keep #(if (and (>= (int %) 60) (>= 90 (int %))) %) s)))", "problem": 29, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "520bade3e4b0b022ef140c85"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5174ade2e4b07031762f2edf"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x] \n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))", "problem": 29, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "(fn [coll]\n  (apply str\n   (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "505193b7e4b0a561d07d8f08"}, {"code": "(fn [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "problem": 29, "user": "51b965dde4b0e871ca495905"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f718ce5e4b07046d9f4f00d"}, {"code": "(fn [src] \n  (let [col  (map char src)\n        fil  #(Character/isUpperCase %)\n        caps (filter fil col)]\n    (clojure.string/join caps)\n    ))", "problem": 29, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91) )\n                           \t\t(seq x)\n                    )))", "problem": 29, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "problem": 29, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(partial (fn find-upper [y x]\n        (loop [a 0 y y]\n          (cond\n           (= a (count x)) y\n           (and (>= (int (nth x a)) 65) (<= (int (nth x a)) 90)) (recur (inc a) (str y (nth x a)))\n           :else (recur (inc a) y)))) \"\")", "problem": 29, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn [s]\n  (apply str\n    (filter #(let [n (int %)] (and (>= n (int \\A)) (<= n (int \\Z)))) s)))", "problem": 29, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [s]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) (seq s)))\n  )", "problem": 29, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [xs]\n  (clojure.string/replace xs #\"([a-z, !-?])\" \"\"))", "problem": 29, "user": "521392bce4b0d32679a5065e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5201572be4b0d7096e99ddbb"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52129363e4b0d32679a50640"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [xs] (reduce str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "520b67b5e4b0b022ef140c83"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c))  %))", "problem": 29, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))    \n       (reduce #(.append % %2)\n               (StringBuilder.))\n       (str)))", "problem": 29, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51e649bee4b0ab43cc26c214"}, {"code": "#(apply str (filter (fn [s] (re-find #\"[A-Z]+\" (str s))) %))", "problem": 29, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn f [x] (str (apply str (filter (fn [c] (Character/isUpperCase c)) (vec x)))))", "problem": 29, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [n] (apply str (filter #(Character/isUpperCase %) n)))", "problem": 29, "user": "4fe8a39ee4b07c9f6fd12c60"}, {"code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51fbeddae4b0f1313d468a16"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "problem": 29, "user": "52105865e4b080a8d9b9d639"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [s] \n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "(fn[s] \n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "reduce #(do (if (Character/isUpperCase %2) (str %1 %2) %1)) \"\"", "problem": 29, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51af88e1e4b0c53cf2e68a4f"}, {"code": "(fn [aword] (clojure.string/join \"\" (re-seq #\"[A-Z]\"  aword )))", "problem": 29, "user": "5213348ae4b0d32679a50652"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5092425ee4b09a7d0b586de4"}, {"code": "(fn only-caps [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "5213cd45e4b0a98dd8fc4bd6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "511179a2e4b03f43822243d0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "510ee996e4b07438aa321462"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "(fn filter-non-caps\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))", "problem": 29, "user": "521b339fe4b0c4ef0be83031"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s )))", "problem": 29, "user": "521e4f22e4b0dd19981ad079"}, {"code": "(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) (char-array x))))", "problem": 29, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn [s] (->> s (re-seq #\"[A-Z]\") (apply str)))", "problem": 29, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [cs] (apply str (filter #(Character/isUpperCase %) cs)))", "problem": 29, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "521e8227e4b0dd19981ad082"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(comp clojure.string/join (partial re-seq #\"[A-Z]+\"))", "problem": 29, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn foo [x]\n  (let [lst (filter\n   (fn [y] (and (<= 65 (int y)) (<= (int y) 90)))\n   x)]\n    (let [new (map str lst)]\n      (apply str new))))", "problem": 29, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "#(clojure.string/replace %  #\"[^A-Z]\" \"\")", "problem": 29, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "(fn ups[x]\n  (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5220d1b6e4b0e6a83c8925ad"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51787832e4b03d69594194d3"}, {"code": "(fn [x]\n  (apply str\n         (filter\n          #(not (= (clojure.string/lower-case %) (str %)))\n         x)))", "problem": 29, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "(fn [s]\n  (apply str\n  (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn caps-only [input]\n  (clojure.string/join (re-seq #\"[A-Z]\" input))\n)", "problem": 29, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn getcaps$ [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [s]\n (apply str (filter #(and (< 64 (int %))\n                           (> 97 (int %))) s)))", "problem": 29, "user": "52247d56e4b01819a2de42db"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51508905e4b098b221effc2d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "(fn [s] (apply str (map char (filter #(and (<= % (int \\Z)) (>= % (int \\A))) (map int s)))))", "problem": 29, "user": "514767ace4b0541f4bec05cb"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn [s]\n  (apply str (filter #(and (>= (compare % \\A) 0) (>= (compare \\Z %) 0))  s)))", "problem": 29, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [x] \n  (apply str \n         (filter \n          #(and \n             (Character/isLetter %) \n             (= \n              (str %) \n              (clojure.string/upper-case %)\n             )\n            )\n          (seq x)\n         )\n   )\n)", "problem": 29, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [x] (reduce str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq x))))", "problem": 29, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %1) word)))", "problem": 29, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5225a0f5e4b01819a2de430e"}, {"code": "#(apply str (filter (fn [ s ] (not= (str s) (clojure.string/lower-case (str s)))) %))", "problem": 29, "user": "52286b19e4b0186687e23a7e"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51eee71ae4b0871fa145d992"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "51843616e4b02826a645f398"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5225666be4b01819a2de4300"}, {"code": "#(apply str (filter (into #{} (seq \"HLOWRDAZ\")) (seq %)))", "problem": 29, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "(fn [st] (apply str (filter (fn [x] (when (and (<= (int x) 90) (>= (int x) 65)) x)) st)))", "problem": 29, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e5a627e4b0efabf93c02db"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e4d4841535dc968683fc4e2"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "510d59cce4b078ea71921134"}, {"code": "(fn [x] (reduce (fn [y z] (if (re-matches #\"[A-Z]\" (str z)) (str y z) (str y))) \"\" (seq x)))", "problem": 29, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [x]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn [str]\n   (clojure.string/join\n    (filter\n     #(Character/isUpperCase %)\n     str)))", "problem": 29, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [foo] (clojure.string/join \"\" (re-seq #\"[A-Z]\" foo)))", "problem": 29, "user": "52127ee4e4b0d32679a5063c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [L] (apply str (filter #(Character/isUpperCase %) L)))", "problem": 29, "user": "522dd30ee4b0a102974208c3"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [x](.replaceAll x \"[^A-Z]\" \"\"))", "problem": 29, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "522ef7a2e4b01e6a0e6e5daf"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "522f988be4b032bbe3424168"}, {"code": "(fn [s]\n  (apply str \n    (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "522a1248e4b0590a43906cf3"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52295917e4b04c906c9c6a6f"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "5226ef37e4b04e78ff2e1997"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "523089f8e4b0035e815da388"}, {"code": "#(apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) %))", "problem": 29, "user": "5230d9bde4b0035e815da397"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5230d490e4b0035e815da396"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str) )", "problem": 29, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn ! [s]\n  (apply str\n   (filter\n    #(and\n        (>= (int %) (int \\A))\n        (<= (int %) (int \\Z))) (map char s))))", "problem": 29, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn get_caps\n  [string]\n  (apply str \n         (filter #(Character/isUpperCase %)\n                 string)\n         )   \n  )", "problem": 29, "user": "5228f870e4b0186687e23a98"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [x]\n      (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "522fdff7e4b032bbe342416c"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )", "problem": 29, "user": "5231c38fe4b0e2e8de81d1f8"}, {"code": "(fn CAPS [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "(fn [s] \n  (clojure.string/join \n    (filter #(Character/isUpperCase %) (seq s))\n  )\n)", "problem": 29, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50467ee2e4b011c5dfee7723"}, {"code": "(fn ! [s]\n  (cond (empty? s) \"\"\n        (Character/isUpperCase (first s)) (str (first s) (! (rest s)))\n        true (str \"\" (! (rest s)))))", "problem": 29, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5234f716e4b05e80434a505f"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn ups [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5232d047e4b035af41902a95"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5224e784e4b01819a2de42f1"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "problem": 29, "user": "516abecae4b081287f204e9f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "520f2265e4b0101e4be6fce7"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "problem": 29, "user": "5220909fe4b0e6a83c89259f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523288fee4b035af41902a88"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52373f36e4b0477af6280328"}, {"code": "(fn [m] (apply str (filter #(Character/isUpperCase %) m)))", "problem": 29, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [s]\n  (let [uchars (filter #(Character/isUpperCase %) s)]\n  \t(apply str uchars)))", "problem": 29, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "522e8451e4b01cdb292c5f06"}, {"code": "(fn [n] (apply str (filter #(Character/isUpperCase %) n)))", "problem": 29, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52382d91e4b0fae3832e99f0"}, {"code": ";(fn [x] (apply str(filter #(Character/isUpperCase %) x)))\n\n#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [strToCheck] (reduce str (filter #((complement nil?) (re-matches #\"[A-Z]\" (str %))) strToCheck)))", "problem": 29, "user": "5227eacee4b0186687e23a5e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) (+ 65 26))) s)))", "problem": 29, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f04e8b0535dcb61093f6be9"}, {"code": "(fn cap [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn [s] (reduce str \"\" (filter #(< 64 (int %) 97) s)))", "problem": 29, "user": "523b10dfe4b02f719975bdb8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn [sq]\n  (apply str (filter #(Character/isUpperCase %) sq)))", "problem": 29, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (vec s))))", "problem": 29, "user": "52387f46e4b0fae3832e9a07"}, {"code": "(fn [string] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) string)))", "problem": 29, "user": "523b82efe4b07becd5be21f0"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x) ))", "problem": 29, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [s] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [strng]\n  (clojure.string/replace strng #\"[^A-Z]\" \"\"))", "problem": 29, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [xs] \n  (letfn [(capital? [c]\n                    (let [i (int c) imin (int \\A) imax (int \\Z)]\n                      (<= imin i imax)))]\n    (apply str (filter capital? xs))))", "problem": 29, "user": "523c6451e4b07becd5be2222"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)) seq)", "problem": 29, "user": "523dd963e4b06956f8342ca1"}, {"code": "#(apply str (filter (fn [x] (and (<= (int \\A) (int x)) (>= (int \\Z) (int x)))) %))", "problem": 29, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "(fn [xs] (clojure.string/join (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "(fn [x] (apply str (filter #(some (partial = %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))", "problem": 29, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523b1988e4b02f719975bdbc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn\n  [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "50aa60bee4b056ee01935865"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52401a65e4b0ad64fa010306"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5230793be4b0035e815da383"}, {"code": "(fn [s]\n    (reduce (fn [e c]\n              (if (re-find #\"[A-Z]\" (str c))\n                (str e c)\n                e)) \"\" s))", "problem": 29, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [x] (apply str (filter #(. Character (isUpperCase %)) x)))", "problem": 29, "user": "52379c46e4b0fae3832e99db"}, {"code": "#( apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5240e8ebe4b0ad64fa010349"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word))  )", "problem": 29, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5241fe85e4b076e5d3121f42"}, {"code": "(fn [string]\n  \n  (apply str (reduce \n            (fn [array character]\n             (if (Character/isUpperCase character)\n               (conj array (str character))\n               array))\n            []\n            string)))", "problem": 29, "user": "518d1b5be4b070277754617b"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "5242d5c3e4b076204b44fa95"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4f303ebbe4b0d6649770a077"}, {"code": "#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %))", "problem": 29, "user": "5245af03e4b08ba239308124"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524025bce4b0ad64fa01030f"}, {"code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "problem": 29, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "#(clojure.string/join (re-seq (re-pattern \"[A-Z]\") %))", "problem": 29, "user": "524717a9e4b05ef8e38e6352"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %)s )))", "problem": 29, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [seq] \n  (apply str (filter #(Character/isUpperCase %) seq)))", "problem": 29, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [x] (->> x seq (filter #(re-matches #\"[A-Z]\" (str %))) (#(apply str %))))", "problem": 29, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52487654e4b05ef8e38e63dc"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52485723e4b05ef8e38e63d2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "524903e7e4b05ef8e38e640d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5246e945e4b0644eb7b0783b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [s] (reduce #(if (re-seq #\"[A-Z]\" (str %2)) (str %1 %2) %1) \"\" s))", "problem": 29, "user": "52474de3e4b05ef8e38e6360"}, {"code": "(fn [in]\n   (clojure.string/join \n    (filter #(Character/isUpperCase %) (seq in))\n    )\n  )", "problem": 29, "user": "52463059e4b09dbe66b56198"}, {"code": "#(clojure.string/join (vec (re-seq #\"[A-Z]\" %1)))", "problem": 29, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [s] (apply str (filter #(and (<= (int \\A) (int %)) (<= (int %) (int \\Z))) (seq s))))", "problem": 29, "user": "4ea03f70535d7eef308072a1"}, {"code": "(fn [word] (apply str (re-seq #\"[A-Z]\" word)))", "problem": 29, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [-string]\n   (let [upper-letters (set (map char (range 65 91)))]\n     (reduce #(if (contains? upper-letters %2) (str %1 %2) %1) \"\" -string))\n   \n)", "problem": 29, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [ls]\n  (reduce str \"\" (re-seq #\"[A-Z]\" ls))\n  )", "problem": 29, "user": "511d4a52e4b022853b0e07a1"}, {"code": "(fn [x] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (seq x))))", "problem": 29, "user": "522e4baae4b01cdb292c5f00"}, {"code": "(fn [x] \n  (clojure.string/join (re-seq (re-pattern \"[A-Z]+\") x)))", "problem": 29, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "510c123be4b078ea7192110e"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [x] (->> x seq (filter #(re-matches #\"[A-Z]\" (str %))) (apply str)))", "problem": 29, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "524af042e4b09eba1c0223ba"}, {"code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "523327fce4b0f0b72fabf3fc"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) % ))", "problem": 29, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "(fn fun7 [x]\n  \n  (let [y (filter #(java.lang.Character/isUpperCase %) x)]\n      (apply str y)\n  )\n  )", "problem": 29, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)\n  )\n)", "problem": 29, "user": "524da3a5e4b0a16e35cf6df3"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5243d9a2e4b076204b44fadf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51618519e4b009fba0926e35"}, {"code": "(fn\n   [string]\n   (apply str \n          (filter #(some #{%} (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) string)))", "problem": 29, "user": "524da51ee4b0a16e35cf6df4"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "524feb3fe4b0541d1855b81f"}, {"code": "#(reduce str (re-seq  #\"[A-Z]\" %1))", "problem": 29, "user": "51c15fe9e4b0c9c82288294c"}, {"code": "(fn [s] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) s)))", "problem": 29, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn only-uppercase [seq] (apply str (filter #(Character/isUpperCase %1) seq)))", "problem": 29, "user": "524eebb0e4b0541d1855b7f7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "525078b6e4b0541d1855b832"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f171e7d535d64f603146452"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5250af8be4b0541d1855b83c"}, {"code": "(fn [x] (apply str (filter #(. Character isUpperCase %) x)))", "problem": 29, "user": "524b90fae4b09eba1c0223df"}, {"code": "(comp (partial apply str) (fn [x] (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) (seq x))))", "problem": 29, "user": "524740e7e4b05ef8e38e635d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5252045ae4b0541d1855b884"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "524f07a6e4b0541d1855b7fc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [x]\n  (clojure.string/join \"\"\n                       (filter (fn[y]\n                                 (let [z (str y)]\n                                   (and (= (clojure.string/upper-case z) z)\n                                        (not (= (clojure.string/lower-case z) z)))))\n                               (vec x))))", "problem": 29, "user": "52526161e4b0541d1855b8a6"}, {"code": "(fn [words] (apply str (filter #(Character/isUpperCase %) words)))", "problem": 29, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52530b4be4b0541d1855b8e4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [s] (apply str(re-seq #\"[A-Z]*\" s)))", "problem": 29, "user": "4e78c2ba535db95036265723"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52537b67e4b0541d1855b8f9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5224060de4b01819a2de42c3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524d2a98e4b0752c4cb68cd8"}, {"code": "(fn [y] (apply str (filter (fn [x] (. Character (isUpperCase x))) y)))", "problem": 29, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5252b59de4b0541d1855b8cf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn [s] (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "5254f908e4b0541d1855b9ba"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d8f711e4b02ceefd947748"}, {"code": "(fn caps [x]\n  (apply\n    str\n    (filter\n      #(let [d (- (int %) (int \\A))]\n          (and (>= d 0) (<= d 25))) (seq x))))", "problem": 29, "user": "504ece87e4b069badc5a33ce"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [n] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") n)))", "problem": 29, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [a] (apply str (re-seq #\"[A-Z]\" a)))", "problem": 29, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn \n  ([s]\n    (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s))\n  )\n)", "problem": 29, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50aca92ee4b071b89ef26232"}, {"code": "(fn [s] (apply str  (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn [val]\n  (apply str\n     (filter #(Character/isUpperCase %) val)))", "problem": 29, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [s] (apply str\n          (filter\n            (set (map char (range (int \\A) (inc (int \\Z)))))\n            s)))", "problem": 29, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [s] (if (empty? s) \n          s\n          (apply str (filter #(Character/isUpperCase %) s))))", "problem": 29, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5234870ee4b05e80434a505c"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "523e12bde4b09833704079a2"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5236cd89e4b0e010857b4e45"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn myfn [s1]\n\t(reduce \n    \t(fn [x y]\n        \t(if (Character/isUpperCase y)\n            \t(str x y)\n            \tx\n            )\n        ) \"\" s1\n    )\n)", "problem": 29, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "#(apply str (filter (fn[c](Character/isUpperCase c)) %))", "problem": 29, "user": "524aa3d2e4b05ef8e38e64b9"}, {"code": "(fn [coll] (reduce str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn collect-caps [string] \n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn rmcaps [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50007353e4b0678c553fc40a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51622fb8e4b009fba0926e3f"}, {"code": "#(apply str (filter (partial re-matches #\"[A-Z]\") (map str (seq %))))", "problem": 29, "user": "5130cb2ae4b08c712d3fae3b"}, {"code": "(fn [x] (->> (seq x) (filter #(not= % (first (clojure.string/lower-case %)))) (apply str)))", "problem": 29, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "525d413be4b0cb4875a45d65"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "525d5329e4b0cb4875a45d75"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn caps [x] (apply str(filter #(Character/isUpperCase %) x )))", "problem": 29, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52342722e4b07e3ee2be83c0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52563d02e4b0541d1855ba10"}, {"code": "(fn [x] (apply str (filter (fn [i] (<= 65 (int i) 90)) x)))", "problem": 29, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "(fn [lst] (clojure.string/join (filter (fn [n] (not (= nil (re-matches #\"[A-Z]\" n)))) (clojure.string/split lst  #\"\"))))", "problem": 29, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn caps [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "522ff396e4b032bbe3424172"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [s] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn  [x]\n\t\t(loop [strin x result []]\n\t\t\t(if (> (count strin) 0)\n\t\t\t\t(if (and (>= (int (first strin)) 65) (<= (int (first strin)) 90) )\n\t\t\t\t\t(recur (apply str (rest strin)) (conj result (first strin)))\n\t\t\t\t\t(recur (apply str (rest strin)) result)\t\n\t\t\t\t)\n\t\t\t\t(apply str result)\n\t\t)\n\t)\n)", "problem": 29, "user": "521b3f2fe4b0c4ef0be83034"}, {"code": "(fn [input] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) input)))", "problem": 29, "user": "525a643be4b0cb4875a45cf1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "5262d2d0e4b03e8d9a4a709a"}, {"code": "#(clojure.string/join \"\" (for [x (seq (map identity %))]\n  (str (re-find (re-pattern #\"[A-Z]\") (str x)))))", "problem": 29, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn [data] (apply str (re-seq #\"[A-Z]+\" data)))", "problem": 29, "user": "4e7e1483535db169f9c79702"}, {"code": "(fn [l] \n\t(reduce \n\t\t#(if \n\t\t\t(nil? \n\t\t\t\t(re-matches #\"[A-Z]\" (str \"\" %2))) \n\t\t\t%1 \n\t\t\t(str %1 %2)\n\t\t) \"\" l\n\t)\n)", "problem": 29, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [s]\n   (clojure.string/join\n    \"\"\n    (filter\n     (fn [a]\n       (Character/isUpperCase a))\n     (.toCharArray s)))\n   )", "problem": 29, "user": "52090567e4b0e152394d76ed"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "525d417ee4b0cb4875a45d68"}, {"code": "(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))", "problem": 29, "user": "525d7090e4b0cb4875a45d7e"}, {"code": "(fn [s] \n   (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5250779ee4b0541d1855b82f"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) 65)\n                                  (<= (int %) 90)) s)))", "problem": 29, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn [d] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq d))))", "problem": 29, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52664945e4b03e8d9a4a712f"}, {"code": "(fn getOnlyUpperCase [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))", "problem": 29, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "#(apply str(re-seq #\"[A-Z]\" %))", "problem": 29, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "(fn [s] (reduce str (re-seq  #\"[A-Z]+\" s)))", "problem": 29, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "(fn [string] \n  (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "52616198e4b03e8d9a4a705e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn [xs]\n    (apply str (re-seq #\"[A-Z]\" xs)))", "problem": 29, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "reduce #(str %1 (if (<= 65 (int %2) 90) %2 \"\")) \"\"", "problem": 29, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "(comp #(apply str %) #(re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "#(apply str (filter (fn [f] (. Character isUpperCase f)) (seq %)))", "problem": 29, "user": "4e836a06535db62dc21a62d5"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [s] \n  (apply str (#(re-seq #\"[A-Z]+\" %) s)))", "problem": 29, "user": "526866d1e4b03e8d9a4a71a1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [coll] \n(apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "504e0f78e4b078edc5f593ac"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\"  \"\")", "problem": 29, "user": "526c6e08e4b03e8d9a4a7290"}, {"code": "(fn upper [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "(fn [frase] (apply str (re-seq #\"[A-Z]+\" frase)))", "problem": 29, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "#(apply str\n\t       (loop [s %\n\t\t      ret []]\n\t\t (if-let [f (first s)]\n\t\t   (if (and (<= 65 (int f))\n\t\t\t    (>= 90 (int f)))\n\t\t     (recur (rest s) (conj ret f))\n\t\t     (recur (rest s) ret))\n\t\t   ret)))", "problem": 29, "user": "4f05872b535dcb61093f6bf8"}, {"code": "(fn gcaps [s]\n  (apply str (filter\n              #(and\n                (<= (int \\A) (int %1))\n                (<= (int %1) (int \\Z)))\n              s))\n  )", "problem": 29, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "(fn [z] (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) z)))", "problem": 29, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn[s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn [my-str]\n   \n      (reduce (fn [a b] (clojure.string/replace a (str b) \"\")) my-str (clojure.string/lower-case my-str)))", "problem": 29, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "525de512e4b0cb4875a45d8a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [x] \n  (let [y (clojure.string/replace \n   (print-str (re-seq #\"\\p{Upper}\" x)) #\"[\\s()]\" \"\")] \n   (if (= y \"nil\")\n    '()\n    y)))", "problem": 29, "user": "5262efade4b03e8d9a4a709f"}, {"code": "(fn [col]\n  (clojure.string/replace col #\"[^A-Z]\" \"\"))", "problem": 29, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "52600f94e4b03e8d9a4a702d"}, {"code": "(fn get-caps [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "#(apply str (filter (set (seq \"HLOWRDAZ\")) %))", "problem": 29, "user": "4ecd6a88535d23f036227704"}, {"code": "(fn a [s] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSUVWXYZ\") %) s)))", "problem": 29, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "509331d9e4b097f48cc38580"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52709149e4b03e8d9a4a73b1"}, {"code": "(fn [w]\n  (apply str (seq (map char (filter #(<= 65 % (dec (+ 65 26))) (map #(.hashCode %) (seq w))))))\n   )", "problem": 29, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [s] (let [lst \n        (apply str (filter (fn [ele]  \n                             (and  (java.lang.Character/isLetter ele) \n                             (= ele (Character/toUpperCase ele) ))\n         \n                             ) s )) ]\n\n        \t lst)     )", "problem": 29, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))", "problem": 29, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "problem": 29, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [s] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) s)))", "problem": 29, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [s] (\n         apply\n         str\n         (filter #(Character/isUpperCase %) s)\n         ) \n  )", "problem": 29, "user": "5272d528e4b03e8d9a4a7454"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52727ba4e4b03e8d9a4a7438"}, {"code": "(fn caps [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [x] (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) x)))", "problem": 29, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn uppers [inpStr] (apply str (filter #(Character/isUpperCase %) inpStr)))", "problem": 29, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "(fn only-caps [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn [x] (apply str (map #(re-find #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "514f6679e4b0b449e54b8df5"}, {"code": "(fn \n    [s]\n    (apply str (filter #(re-matches #\"^[A-Z]$\" (str %)) s))\n)", "problem": 29, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(let [m (re-seq #\"[A-Z]\" %)] (if (empty? m) m (clojure.string/join \"\" m)))", "problem": 29, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn getup [input] (apply str (filter #(and (<= 65 (int %)) (>= 95 (int %))) input)))", "problem": 29, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52741177e4b03e8d9a4a749b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn get-the-caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn caps [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51e38568e4b0c611d6113e43"}, {"code": "(comp\n (partial apply str)\n (partial map char) \n (partial filter #(and\n                  (<= % (int \\Z)) \n                  (>= % (int \\A))))\n (partial map int))", "problem": 29, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4db03885838c48654951d9bd"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "problem": 29, "user": "521d709ae4b050d5da0427ef"}, {"code": "(fn [col]\n  (apply str (filter #(Character/isUpperCase %) (seq col))))", "problem": 29, "user": "527dc2aee4b0757a1b17138d"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(->> %\n     (re-seq #\"[A-Z]\")\n     (apply str))", "problem": 29, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn\n  [s]\n  (clojure.string/join (filter #(and (>= (int %) (int\\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "527ed32ce4b0757a1b1713b5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)", "problem": 29, "user": "52624348e4b03e8d9a4a707e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "(fn \n  [s]\n  (clojure.string/replace s #\"[^A-Z]*\" \"\")\n  )", "problem": 29, "user": "528196e2e4b0757a1b171437"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52808559e4b0757a1b171403"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %)  x) ))", "problem": 29, "user": "52810225e4b0757a1b171418"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528147b6e4b0757a1b171425"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5265337fe4b03e8d9a4a7104"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "5284de3de4b0239c8a67ade3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [s] \n    (apply str(filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq s))))", "problem": 29, "user": "511dada0e4b0a5c68a34840c"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4e0359e8535d04ed9115e792"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50feab26e4b03cd852b4e850"}, {"code": "(fn [x] (->> x (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "5281a445e4b0757a1b17143a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51aefceee4b09397d5109797"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "5285920be4b0239c8a67adfb"}, {"code": "(fn caps-only [x] (apply str (filter #(. Character isUpperCase %) x)))", "problem": 29, "user": "527fd663e4b0757a1b1713de"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5287f66be4b0239c8a67ae45"}, {"code": "(fn [x] (apply str (filter #(let [num-a (int %)]\n                (and (<= 65 num-a)\n                     (<= num-a 90)))\n            (seq x))))", "problem": 29, "user": "52890634e4b0239c8a67ae5e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "528594fde4b0239c8a67adfc"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn\n  [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn [x] (reduce str (filter #(Character/isUpperCase %)x)))", "problem": 29, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn v [s] (\n\napply str ( (fn [s] (\n    let [l (vec s) caps (vec \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    ]\n    (filter (\n            fn [x] (\n                > (count (filter (fn [y] (= x y)) caps)) 0\n            )\n        ) l)\n    \n)) s))\n\n)", "problem": 29, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn cps [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "528b9efee4b0239c8a67aea0"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\"  x)))", "problem": 29, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "(fn [x] \n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52824143e4b0757a1b171453"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [l] \n  (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "(fn up [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "problem": 29, "user": "529242bee4b0239c8a67af28"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52864dbce4b0239c8a67ae12"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [x]\n  (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn [x]\n    (clojure.string/join (re-seq #\"[A-Z]+\" x))\n    )", "problem": 29, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52974f66e4b02ebb4ef75040"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "529670c1e4b02ebb4ef75030"}, {"code": "(fn caps [z] (apply str ((fn uplist2 [x] (if (>= 0 (count x)) \n                                       '() \n                                       (if ((fn up [y](if (<= 65 (int y) 91) \n                                                        true\n                                                        false)) (first x)) \n                                         (conj (uplist2 (rest x)) (first x)) \n                                         (uplist2 (rest x)) \n                                         ))) z)))", "problem": 29, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [st] (apply str (re-seq #\"[A-Z]+\" st)))", "problem": 29, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52976262e4b02ebb4ef75041"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [x] (apply str (filter #(#{\\A,\\Z,\\H,\\L,\\O,\\W,\\R,\\D,\\B,\\C} %) x)))", "problem": 29, "user": "528f1057e4b0239c8a67aeec"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5298bd13e4b02ebb4ef75063"}, {"code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(fn[x] (apply str (filter #(Character/isUpperCase %1) x)))", "problem": 29, "user": "528c381ce4b0239c8a67aeb2"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "problem": 29, "user": "52990271e4b02ebb4ef7506d"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "529952a4e4b02ebb4ef75081"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "51ad244fe4b09397d510977f"}, {"code": ";(fn filter-upper-case\n;  [string]\n;  (apply str (filter #(Character/isUpperCase %) string)))\n#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn f [s] \n  (apply str \n         (filter (complement nil?) \n                 (map (partial re-find #\"[A-Z]\") \n                      (map str s)))))", "problem": 29, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [s] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "529a2d3be4b02ebb4ef75092"}, {"code": "#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %))", "problem": 29, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))\n;(apply str (filter #(Character/isUpperCase %) data))", "problem": 29, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [n] (apply str (re-seq #\"[A-Z]\" n)))", "problem": 29, "user": "5294b190e4b02ebb4ef75011"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn [coll] (apply str (filter (set (map char (range 65 91))) coll)))", "problem": 29, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "529dc421e4b04e0c58e87b80"}, {"code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "51e05dfae4b01188f0627543"}, {"code": "#(apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) %))", "problem": 29, "user": "528e510ee4b0239c8a67aeda"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn [s]\n  (->>\n   s\n   (seq)\n   (filter (fn [c] (Character/isUpperCase c)))\n   (apply str)))", "problem": 29, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "(fn [ca]\n  (apply str (filter #(Character/isUpperCase %) ca)))", "problem": 29, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) (seq x))))", "problem": 29, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [cs] (apply str (filter #(Character/isUpperCase %) cs)))", "problem": 29, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "52323a4ae4b035af41902a79"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))", "problem": 29, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(comp (partial apply str)\n      (partial filter (fn [foo] (some #(= % foo) \n                                       (map char (range 65 91))))))", "problem": 29, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn [string] (apply str (filter #(<= 65 (int %) 90) string)))", "problem": 29, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [x] (apply str (#(re-seq #\"[A-Z]\"%) x)))", "problem": 29, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50915996e4b0742c82730aee"}, {"code": "(fn only-cap [string]\n  (apply str (filter\n              #(Character/isUpperCase %)\n              string)))", "problem": 29, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "#(->> %\n        (re-seq #\"[A-Z]\")\n        (apply str))", "problem": 29, "user": "4f1b120f535d64f603146476"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [string] \n     (apply str \n      (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [item] (apply str (filter #(Character/isUpperCase %) (seq item))))", "problem": 29, "user": "52a52e59e4b0c58976d9abe4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "529c722de4b04e0c58e87b63"}, {"code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4e6e1756535d5021c1a895fe"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [s]\n  (reduce str (filter \n               (fn [x] (re-find #\"[A-Z]\" x))\n               \t(clojure.string/split s #\"\"))))", "problem": 29, "user": "51661e9ce4b05e5ef6a5e806"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "529f739fe4b04e0c58e87bad"}, {"code": "(fn [s] (apply str (filter #(not (= % (Character/toLowerCase %))) s)))", "problem": 29, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "(comp (partial reduce str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn get-caps [s]\n  (apply str (filter (fn [c] (re-find #\"[A-Z]\" (str c))) s)))", "problem": 29, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [s]\n   (clojure.string/join (filter #(Character/isUpperCase %)  s)))", "problem": 29, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn [string] (clojure.string/join (re-seq (re-pattern \"[A-Z]\") string)))", "problem": 29, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "( fn [s]\n   (apply str ( map #(if (= %1 %2) (if (contains? (set (seq \"ABCDEFGHIJKLMNOPQRSTUWXYZ\")) %1) %1)) (clojure.string/upper-case s) s)))", "problem": 29, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(comp (partial apply str) #(for [y (seq %) x (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") :when (= y x)] y))", "problem": 29, "user": "52865f41e4b0239c8a67ae15"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn f [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "(fn get-caps[x](apply str (filter (fn[c](not= (str c) (clojure.string/lower-case c))) x)))", "problem": 29, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn filter-cap\n  [string]\n  (reduce str (filter #(<= (int \\A) (int %) (int \\Z)) string)))", "problem": 29, "user": "51937eb3e4b04df54c098022"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn f [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn caps \n  [s] \n  (reduce str (filter #(cond\n                         (< (int %) 65) false\n                         (> (int %) 90) false\n                         :else true\n                         ) s))\n  )", "problem": 29, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52b11742e4b0c58976d9acd5"}, {"code": "#(apply str (re-seq  #\"[A-Z]\" %))", "problem": 29, "user": "524f4256e4b0541d1855b808"}, {"code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "problem": 29, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [s](reduce str(re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "505d1b01e4b0e6aca564be04"}, {"code": ";#(apply str (re-seq #\"[A-Z]\" %))\n\n#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528f4462e4b0239c8a67aef0"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(.replaceAll % \"[^A-Z]\", \"\")", "problem": 29, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(apply str (filter (fn [ch] (and (>= (int ch) 65) (<= (int ch) 90))) %))", "problem": 29, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn[s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [x] (apply str (filter #(. java.lang.Character isUpperCase %) x)))", "problem": 29, "user": "527cd633e4b0757a1b17136f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [coll] (apply str (filter #(< 64 (int (identity %)) 91) coll)))", "problem": 29, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52b6b5a7e4b0c58976d9ad4b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn findUpper [coll] (clojure.string/join  (filter #(Character/isUpperCase %1) (seq coll))))", "problem": 29, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b02329e4b0c58976d9acc5"}, {"code": "#(->> %\n  (map str)\n  (filter (partial re-matches #\"[A-Z]\"))\n  (apply str))", "problem": 29, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "505b0431e4b021387fb8985e"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %1) (int \\Z) ) s )))", "problem": 29, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn getcaps [s]\n  (reduce #(if (and %2 (> (int %2) 64) (< (int %2) 91))\n             (str % %2)\n             %) \"\" s))", "problem": 29, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "(fn [string] (clojure.string/join \"\" (concat (re-seq #\"[A-Z]\" string))))", "problem": 29, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn strr [x]\n  (let [t-s (filter #(Character/isUpperCase %) (seq x))]\n    (reduce str t-s)))", "problem": 29, "user": "52b9a836e4b07a9af57922c0"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn [s]\n  (apply str (filter  (fn [c] \n                 (Character/isUpperCase c)) s)))", "problem": 29, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "#(clojure.string/join (filter (fn [x] (java.lang.Character/isUpperCase x)) %))", "problem": 29, "user": "52bad920e4b07a9af57922d7"}, {"code": "#(letfn [(not-upper? [c]     \n                     (not (<= (int \\A) (int c) (int \\Z))))]   \n   (apply str (remove not-upper? %)))", "problem": 29, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "508f97c0e4b0ea685a20f768"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) (seq coll))))", "problem": 29, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn[s](apply str (map char (filter #(and (> % 64) (< % 91)) (map int s)))))", "problem": 29, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [X] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) X)))", "problem": 29, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) (seq s))))", "problem": 29, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "(fn caps [x] (clojure.string/join (re-seq (re-pattern \"[A-Z]\") x)))", "problem": 29, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [arg]\n  (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]\" arg)))", "problem": 29, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "(fn [s] (apply str (filter #(. java.lang.Character isUpperCase %) s)))", "problem": 29, "user": "52bd9963e4b07a9af5792303"}, {"code": "(fn [s] (apply str (filter #(not= (.toLowerCase (str %)) (str %)) s)))", "problem": 29, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn only-caps [a-str]\n    (apply str (filter #(Character/isUpperCase %) a-str)) \n )", "problem": 29, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [string](apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [x] (apply str (filter (fn [y] (<= 65 (int y) 90)) (seq x))))", "problem": 29, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))", "problem": 29, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn upper? [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52bebdbfe4b07a9af5792326"}, {"code": "#(\n  loop [caps \"\"\n        resto %]\n      (if (empty? resto)\n          caps\n          (let [c (str (first resto))] \n           (if (and (= (clojure.string/upper-case c) c) (not= (clojure.string/lower-case c) c))\n             (recur (str caps c) (rest resto))\n             (recur caps (rest resto))))))", "problem": 29, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))", "problem": 29, "user": "52bef782e4b07a9af5792327"}, {"code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [stringy] (clojure.string/join \"\" (clojure.string/split stringy #\"[^A-Z]\")))", "problem": 29, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn upper-only [s] (let [upper? (fn [c] (some #(= % c) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n\t \t\t\t\t\t(clojure.string/join (filter upper? s))\n                     )\n)", "problem": 29, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52c0101fe4b07a9af5792343"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52097551e4b0e152394d76f3"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn \n  [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52baefbae4b07a9af57922da"}, {"code": "#(clojure.string/replace % #\"([^A-Z])\" \"\")", "problem": 29, "user": "52bb55e8e4b07a9af57922e3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn[s] (apply str (remove #(or (< (int %) (int \\A)) (> (int %) (int \\Z))) s)))", "problem": 29, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [s]\n  (apply str\n         (map #(first %)\n              (filter #(not= (first %) (last %))\n                      (map (fn [x y] [x y])\n                           s (.toLowerCase s))))))", "problem": 29, "user": "52c25645e4b07a9af579237d"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c3c689e4b0c2d177d620c9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c00263e4b07a9af579233f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "508147cde4b0a20aab17b93a"}, {"code": "(fn solution [x]\n (apply str\n  (filter #(. Character isUpperCase %) x)\n )\n)", "problem": 29, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52c35afce4b07a9af579238c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "#(clojure.string/replace % #\"((?![A-Z]).)\" \"\")", "problem": 29, "user": "52c4d327e4b0c2d177d620e6"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn all-caps [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [strng] \n  (loop [cnt 0 newstr nil] \n    (if (= cnt (dec (count strng))) newstr \n      (do (let [ch (int (get strng cnt))] \n            (if (and (>= ch 65) (<= ch 91)) \n              (recur (inc cnt) (str newstr (get strng cnt))) \n              (recur (inc cnt) newstr)))))))", "problem": 29, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52c56f36e4b0c2d177d620f1"}, {"code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn up [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %1) coll )) )", "problem": 29, "user": "4f659386e4b07046d9f4ef44"}, {"code": "(fn [x]\n  (apply str (for [c (char-array x)\n             :when (and\n                    (<= (int c) (int \\Z))\n                    (>= (int c) (int \\A)))]\n         c))\n)", "problem": 29, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn [x]\n  (clojure.string/upper-case\n          (apply str \n       (re-seq #\"[A-Z]\" x))))", "problem": 29, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [x](apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "52c58440e4b0c2d177d620f7"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "#(clojure.string/join  (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52c69672e4b0c2d177d62110"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c73194e4b0c2d177d6211e"}, {"code": "#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "52c682cce4b0c2d177d6210f"}, {"code": "(fn collectCap\n        [s]\n        (apply str (filter #(Character/isUpperCase %) (apply list s))))", "problem": 29, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [s]\n  (apply str (filter #(and (<= (int %) 90 ) (>= (int %) 65)) s)))", "problem": 29, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn caps [s]\n    (reduce \n        (fn [acc ele] \n            (if (and (>= (int ele) (int \\A)) (<= (int ele) (int \\Z))) \n                (str acc ele)\n                acc\n            )\n        ) \"\" s\n    )\n)", "problem": 29, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn [s]\n          (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52777dc3e4b03e8d9a4a7508"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "527ce61de4b0757a1b171374"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c884a2e4b0c2d177d62136"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52be58d7e4b07a9af579231d"}, {"code": "#(cond\n  (= % \"nothing\") \"\"\n  (= % \"HeLlO, WoRlD!\") \"HLOWRD\"\n  :else \"AZ\"\n  )", "problem": 29, "user": "52ae886de4b0c58976d9acab"}, {"code": "(fn caps [x] \n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n)", "problem": 29, "user": "52c7fce9e4b0c2d177d6212a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn f [s] \n  (let [capital? (fn [c] (if (re-find #\"[A-Z]\" (str c)) (str c) nil))]    \n    (if (empty? s) nil (str (capital? (first s)) (f (rest s))))))", "problem": 29, "user": "51ac80bbe4b09397d5109770"}, {"code": "(comp (partial apply str)\n      (partial filter (fn [foo] (some #(= % foo) \n                                       (map char (range 65 91))))))", "problem": 29, "user": "52ca9513e4b071a8d36bd3e4"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c6f1f3e4b0c2d177d62117"}, {"code": "(fn [text]\n  (apply str (filter #(re-matches #\"^[A-Z]$\" (str %)) text)))", "problem": 29, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "52c60945e4b0c2d177d62108"}, {"code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "problem": 29, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "#( clojure.string/replace % #\"[^A-Z]\" \"\" )", "problem": 29, "user": "52cbe910e4b07d0d72b27353"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cc85abe4b07d0d72b27367"}, {"code": "; don't follow me! I'm not good at this!\n(fn foo [x]\n\t(let [c (first x)]\n\t\t(if (= (count x) 0)\n\t\t\t\"\"\n\t\t\t(str\n\t\t\t\t(if (and (>= (compare c \\A) 0) (<= (compare c \\Z) 0)) c \"\")\n\t\t\t\t(foo(rest x))\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 29, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn [w]\n  (apply str \n    (filter    \n       #(Character/isUpperCase %)\n       w)))", "problem": 29, "user": "52c1ede2e4b07a9af579236d"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn[s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52cdc539e4b07d0d72b2737e"}, {"code": "#(apply str (filter (fn [x] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\L \\O \\W \\R \\Z} x)) %))", "problem": 29, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52b5137de4b0c58976d9ad36"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52c49401e4b0c2d177d620de"}, {"code": "(comp (partial apply str) #(filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ced458e4b07d0d72b27394"}, {"code": "(fn [s]\n    (clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [str]\n  (clojure.string/join\n  (filter\n   (fn [ch]\n     (let [x (int ch)]\n       (and (>= x (int \\A)) (<= x (int \\Z)))))\n   (seq str))))", "problem": 29, "user": "52cee992e4b07d0d72b27395"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5094057fe4b097f48cc38593"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51c22a95e4b0d204dbe2ca1e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d03f55e4b07d0d72b273b8"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "#(apply str (map char (filter (fn [c] (<= (int \\A) c (int \\Z))) (map int %))))", "problem": 29, "user": "52cfe059e4b07d0d72b273af"}, {"code": "(fn [x] (clojure.string/join (#(re-seq #\"[A-Z]+\" %) x)))", "problem": 29, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "52ce165fe4b07d0d72b27388"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52d23a39e4b099d49816f0a6"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn keepUppercase [sequ] \n\t(apply str (filter #(Character/isUpperCase %) sequ))\n)", "problem": 29, "user": "52c10ad2e4b07a9af579235c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn fc [inp] \n (apply str (filter #(Character/isUpperCase %) inp)))", "problem": 29, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [input]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) input)))", "problem": 29, "user": "5166b716e4b060c690c1f4bf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "(fn\n   [string]\n   (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "52d39acce4b099d49816f0c7"}, {"code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "50b09833e4b009df37c708bd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "#(apply str (filter (fn [c](and (>= (int c) 65)(<= (int c) 90))) %))", "problem": 29, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d340ebe4b099d49816f0c1"}, {"code": "reduce (fn [y x] ( if (Character/isUpperCase x) (str y x) y)) \"\"", "problem": 29, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(fn take-upper-case [string]\n  (let [is-upper-case #(Character/isUpperCase %)]\n    (apply str (filter is-upper-case (seq string)))))", "problem": 29, "user": "527aba40e4b03e8d9a4a7565"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d10680e4b07d0d72b273c3"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [sq] \n  (reduce str (filter #(and (> (int %)  64) (< (int %) 91)) sq)))", "problem": 29, "user": "52d6120ee4b09f7907dd134c"}, {"code": "(comp #(apply str %) (fn[pr](filter #(contains? (set \"HLOWRDAZ\") %) pr)))", "problem": 29, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "(fn find-caps [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#((fn lstr [list] (reduce str \"\" list)) (for [letter % :when ((fn cap? [letter] (if ((fn in? [i l] \n  (if (= () l)\n    false\n    (let [head (first l) tail (rest l)]\n      (if (= head i)\n        true\n        (in? i tail))))) letter (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) true false)) letter)] letter))", "problem": 29, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [coll]\n  (apply str (filter (fn [x] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x))\n          coll)))", "problem": 29, "user": "52b94e26e4b07a9af57922b9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cd093fe4b07d0d72b27376"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %1))", "problem": 29, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn f [x]\n  (cond\n   (empty? x) \"\"\n   (Character/isUpperCase (first x)) (str (first x) (f (rest x)))\n   true (f (rest x))))", "problem": 29, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [s] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn all-caps [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))", "problem": 29, "user": "52bac667e4b07a9af57922d5"}, {"code": "(fn [x]\n  (apply str\n  (filter\n   (fn [y]\n     (and (>= (int \\Z) (int y))\n          (<= (int \\A) (int y))))\n   x)))", "problem": 29, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d66152e4b09f7907dd1357"}, {"code": "#(clojure.string/join (filter (fn  [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "52a9406de4b0c58976d9ac43"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52d87808e4b09f7907dd1396"}, {"code": "(fn getCaps [myStr]\n  (apply str (interpose \"\" (re-seq #\"[A-Z]\" myStr)))\n)", "problem": 29, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [s] (clojure.string/join (filter #(and (= (first (clojure.string/upper-case %)) %) (not (= (clojure.string/upper-case %) (clojure.string/lower-case %)))) s)))", "problem": 29, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52d954cae4b09f7907dd13a5"}, {"code": "(fn [s]\n(apply str (filter #(and (< (int %1) 91) (> (int %1) 64)) s)))", "problem": 29, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [x]\n  (let [us (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter us x))))", "problem": 29, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn getUpper [s]\n  (reduce\n    (fn ([] \"\")\n      ([s, c] (str s c)))\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d51535e4b09f7907dd133a"}, {"code": "(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "51f8e057e4b09be9c177e53d"}, {"code": "#(apply str\n        (filter (fn[x] (and (> (int x) 64)(< (int x) 96)))\n         (seq %))\n )", "problem": 29, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn[x]\n  (apply str (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))", "problem": 29, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn getcaps2 [x]\n  (apply str\n    (filter\n      (fn [z] (. Character (isUpperCase z)))\n      (seq x))))", "problem": 29, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d7412ce4b09f7907dd1371"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn \n  [value]\n  (apply str (filter #(Character/isUpperCase %) value)))", "problem": 29, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn toUpp[x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn ups [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))))", "problem": 29, "user": "52dcd378e4b09f7907dd13d6"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5224cf82e4b01819a2de42ef"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "(fn [s]\n  (clojure.string/join\n    (filter (fn [st] (and\n                       (= (clojure.string/upper-case st) (str st))\n                       (Character/isLetter st)))\n            (seq s))))", "problem": 29, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51ee669ce4b09915f9b23c03"}, {"code": "(fn [string]\n          (apply str (filter #(re-matches #\"[A-Z]\" (str %))\n                             (list* string))))", "problem": 29, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "510fe537e4b04c71fce993dd"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51c7d82be4b07ef393169e47"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s )))", "problem": 29, "user": "52e087dde4b09f7907dd1412"}, {"code": "(fn only-upper [s]\n  (apply str (filter #(Character/isUpperCase %) s )))", "problem": 29, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51e3a549e4b0c611d6113e47"}, {"code": "reduce #(str %1 (re-find #\"[A-Z]\" (str %2))) \"\"", "problem": 29, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) s)))", "problem": 29, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e32d55e4b09f7907dd143e"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)) ) ;#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d2b85ce4b099d49816f0af"}, {"code": "(fn [s] \n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "problem": 29, "user": "521b481de4b0c4ef0be83037"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52e4361fe4b09f7907dd144d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e41c22e4b09f7907dd144b"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52e54040e4b09f7907dd145c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(clojure.string/join (filter (complement (fn [c] (= (str c) (clojure.string/lower-case c)))) %))", "problem": 29, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "(fn [s]\n\t(apply str \n     (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "52e0e646e4b09f7907dd1416"}, {"code": "x", "problem": 29, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51f2a491e4b0210f90e74553"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn fil [x] (apply str (filter #(<  -33 (compare (apply str (conj () %)) \"a\") -6) (seq x))))", "problem": 29, "user": "52e544d3e4b09f7907dd145e"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "(fn[x](clojure.string/join (filter #(not= (str(clojure.string/lower-case %)) (str %)) x)))", "problem": 29, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "problem": 29, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [s] (apply str (filter #(not= (str %) (.toLowerCase (str %))) s)))", "problem": 29, "user": "52e75667e4b09f7907dd1485"}, {"code": "#(apply str(re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52e253fce4b09f7907dd1432"}, {"code": "(fn [lst]\n  (apply str (filter (fn [c]\n                       (<= (int \\A) (int c) (int \\Z)))\n                     lst)))", "problem": 29, "user": "52e16139e4b09f7907dd141f"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [s]\n  (apply str (filter #(re-find #\"[A-Z]\" \n                               (str %))\n                     s)))", "problem": 29, "user": "526fc549e4b03e8d9a4a7380"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e3912ee4b09f7907dd1446"}, {"code": "(fn [a] (apply str (re-seq #\"[A-Z]\" a)))", "problem": 29, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52a8d0e6e4b0c58976d9ac37"}, {"code": "(fn [p] (reduce #(.concat %1 %2) \"\" (re-seq #\"[A-Z]\" p)))", "problem": 29, "user": "52a90056e4b0c58976d9ac39"}, {"code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "529223cbe4b0239c8a67af26"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "#(apply str (filter (fn upfilter [list] (java.lang.Character/isUpperCase list)) %))", "problem": 29, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"[^\\p{Upper}]\" \"\"))", "problem": 29, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [coll]\n  (apply str \n         (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52ec4322e4b0705949c44451"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52ebdc9be4b0705949c44444"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52edc795e4b05e3f0be25ebc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [s]\n  (reduce str (map str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s)))))", "problem": 29, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn [x] (apply str (re-seq #\"\\p{Upper}+\" x)))", "problem": 29, "user": "52d6590ee4b09f7907dd1352"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52d660eae4b09f7907dd1356"}, {"code": "#(->> %\n         (map int)\n(filter (fn [x] (<= 65 x 90)))\n         (map char)\n         (apply str))", "problem": 29, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn cap [in]\n  (let [letters (re-seq #\"[A-Z]\" in)]\n    (if (nil? letters)\n      []\n      (reduce #(str %1 %2) letters))))", "problem": 29, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn get-caps [st]\n  (apply str (filter #(Character/isUpperCase %) st)))", "problem": 29, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn f29 [a] (apply str (filter #(Character/isUpperCase %) a)))", "problem": 29, "user": "52c08c59e4b07a9af5792351"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52f021c1e4b05e3f0be25edb"}, {"code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "52812b9fe4b0757a1b171423"}, {"code": "#(reduce (fn [a b] (str a b)) \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn get-the-caps [s] \n  (apply str (for [e s :when(and (<= 65 (int e)) (>= 90 (int e)))] e)))", "problem": 29, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn get-caps [text]\n  (->> text \n    (filter #(java.lang.Character/isUpperCase %)) \n    (apply str)))", "problem": 29, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [q]\n          (apply str (filter (fn [ch]\n                                 ((set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) ch))\n                             q)))", "problem": 29, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "50c4ff23e4b0210b849018b8"}, {"code": "#(reduce str (filter (fn [x] (Character/isUpperCase x)) %1))", "problem": 29, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "#(apply str(re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "52eaeb88e4b0705949c44436"}, {"code": "(fn [string]\n  (->> (filter #(let [strchar (str %)]\n                  (and (= strchar (clojure.string/upper-case %))\n                       (not= strchar (clojure.string/lower-case %))))\n               string)\n       (apply str)))", "problem": 29, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "(fn [x] (apply str (filter #(and (>= (hash %) 65) (<= (hash %) 90)) (concat x '()))))", "problem": 29, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [coll] (reduce str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn f [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "52f772e2e4b047fd55836fc3"}, {"code": "(let [capitals \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n         is-capital? (fn [letter]\n                     (.contains capitals (str letter)))]\n     (fn [phrase]\n       (apply str (filter is-capital? phrase))))", "problem": 29, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e80e87e4b09f7907dd1492"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f685eae4b047fd55836fb8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn[s]( (fn[a](reduce #(if (and (> (int %2) 64) (< (int %2) 91)) (str %1 %2)%1) \"\" a )) (into-array s) ))", "problem": 29, "user": "52e807b3e4b09f7907dd1490"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "reduce (fn [a b] (str a (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") b) b \"\"))) \"\"", "problem": 29, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "52d838bee4b09f7907dd138b"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52f89ac8e4b047fd55836fd7"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f882c4e4b047fd55836fd1"}, {"code": "(fn filter-capitals \n  [sentence]\n  (apply str \n         (filter \n          (fn [x] (and \n                   (>= (int x) (int \\A)) \n                   (<= (int x) (int \\Z)))) \n          (seq sentence))))", "problem": 29, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52f89125e4b047fd55836fd4"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [s] (apply str\n         (filter (fn [x]\n          (java.lang.Character/isUpperCase x)) s)))", "problem": 29, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "52fc89b2e4b047fd55837019"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52fbc44be4b047fd55837010"}, {"code": "(fn [x] \n     (loop [lst (re-seq #\"[A-Z]\" x)\n            ans \"\"] \n        (if (empty? lst)\n          ans\n          (recur (rest lst) (str ans (first lst))))))", "problem": 29, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [stringy]\n  (clojure.string/join (re-seq #\"[A-Z]\" stringy)))", "problem": 29, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [s] \n  (apply str ( re-seq #\"[A-Z]\" s )))", "problem": 29, "user": "52ebbdf7e4b0705949c44443"}, {"code": "(fn [x] (apply str (filter (fn [y] (and (<= (.compareTo \\A y) 0) (>= (.compareTo \\Z y) 0))) (seq x))))", "problem": 29, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [x](->> x(map str)(filter #(re-find #\"[A-Z]\" %))(apply str)))", "problem": 29, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "(fn [s] \n  (apply str \n         (filter #(. Character isUpperCase %) s)))", "problem": 29, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [s]\n  (apply str\n         (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn get-cps [s]\n  (loop [result \"\" s s]\n    (if (empty? s)\n      \tresult\n      \t(if (Character/isUpperCase (first s))\n          \t(recur (str result (first s)) (next s))\n          \t(recur result (next s))\n          )\n      )\n    )\n  )", "problem": 29, "user": "52faff0de4b047fd55837007"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52b9cfb9e4b07a9af57922c5"}, {"code": "(fn ! [x]   \n  (if (empty? x) \n    \"\"   \n    (let [y (first x) z (! (rest x)) yd (int y)]   \n      (if (and \n           (>= yd (int \\A))\n           (<= yd (int \\Z))) \n        (str y z)\n        z))))", "problem": 29, "user": "52faec2ee4b047fd55837004"}, {"code": "#(apply str (filter (comp (partial re-matches #\"[A-Z]\") str) %))", "problem": 29, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f8b86de4b047fd55836fdb"}, {"code": "#(clojure.string/replace  % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [phrase]\n  (apply str (filter #(Character/isUpperCase %) phrase)))", "problem": 29, "user": "51a89081e4b08d8ec191b814"}, {"code": "(fn my-caps\n  [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [s]\r\n  (apply str\r\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "512587ade4b05d10e3e395fb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn f [coll]\n  (clojure.string/join\n   ((partial filter #(Character/isUpperCase %)) coll)))", "problem": 29, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "518c1079e4b0f028e99addf8"}, {"code": "(fn [obj] (apply str (filter #(Character/isUpperCase %) (seq obj))))", "problem": 29, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "(fn [myin](clojure.string/join \"\"(re-seq (re-pattern #\"[A-Z]\") myin)))", "problem": 29, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn [x] (apply str (filter (fn [y] (re-find #\"[A-Z]\" (str y))) x)))", "problem": 29, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "problem": 29, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn[x](apply str (filter #(and (< (int  %) 91) (> (int %) 64)) x)))", "problem": 29, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53067bede4b02e8216869797"}, {"code": "(fn[x](clojure.string/join \"\" (for[some x :when (contains? #{\\A \\Z \\H \\L \\O \\W \\R \\D} some)] some)))", "problem": 29, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "reduce \n (fn [acc, ch]\n   (if (Character/isUpperCase ch)\n     (.concat acc (str ch))\n     acc)) \"\"", "problem": 29, "user": "530578ede4b0d8b024fd3760"}, {"code": "#(apply str(reduce \n  (fn [v x] \n    (if \n      (contains? (set( take 26( map char(iterate inc 65)))) x)\n      (conj  v x )\n       v\n    )\n  )\n  %1\n  %2\n) )\n  []", "problem": 29, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn [x]\n  (let [y (seq x)]\n    (apply str (doall (filter #(and (>= (int %) 65) (<= (int %) 90)) y)))))", "problem": 29, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5307e4ece4b02e82168697a9"}, {"code": "(comp #(apply str %) #(filter (fn[x] (Character/isUpperCase x)) %))", "problem": 29, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52a360a3e4b04e0c58e87bfe"}, {"code": "(fn [s]\n  (apply str\n         (filter\n           #(and\n              (>= (int %) (int \\A))\n              (<= (int %) (int \\Z)))\n           s)))", "problem": 29, "user": "53070615e4b02e821686979e"}, {"code": "(fn [str]\n  (clojure.string/join\n   (re-seq #\"[A-Z]\" str)))", "problem": 29, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "#(apply str (filter (fn[i] (< 64 (int i) 91)) %))", "problem": 29, "user": "4ea5e32a535d7eef308072de"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "530394b4e4b0d8b024fd3743"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "530ccb1de4b08068f379ec99"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [lst] (apply str (filter #(Character/isUpperCase %) lst)))", "problem": 29, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn \n[in]\n  (apply str (filter #(Character/isUpperCase %) in))\n)", "problem": 29, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "530d85dee4b08068f379eca8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn [s] (->> s seq (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5302b580e4b0d8b024fd3733"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "530e5469e4b08068f379ecb7"}, {"code": "#(apply str (reduce concat (re-seq #\"[A-Z]\" %)))", "problem": 29, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5138ccc7e4b0a5db03d727d9"}, {"code": "(fn get_the_caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [string]\n  (apply str (filter (fn [c] (and (Character/isLetter c) (not (Character/isLowerCase c)))) (seq string))))", "problem": 29, "user": "5312452be4b08068f379ecf8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn [str1]\n  (apply str (filter #(Character/isUpperCase %) str1)))", "problem": 29, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn up [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5313165ce4b08068f379ed06"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [s] \n  (loop [s1 (seq s) s2 \"\"]\n    (if (empty? s1)\n      s2\n      (let [c (int (first s1))]\n        (if (and (>= c (int \\A)) (<= c (int \\Z)))\n          (recur (rest s1) (str s2 (char c)))\n          (recur (rest s1) s2)\n    )))))", "problem": 29, "user": "53069e16e4b02e8216869798"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52d2f457e4b099d49816f0ba"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s ) ) )", "problem": 29, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn [xs] (reduce str \"\" (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "53162640e4b08068f379ed40"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [l] (reduce str (re-seq #\"[A-Z]+\" l)))", "problem": 29, "user": "5314318ee4b08068f379ed13"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5311079de4b08068f379ece2"}, {"code": "(fn [w]\n  (apply str (re-seq #\"[A-Z]+\" w)))", "problem": 29, "user": "52c42f6be4b0c2d177d620d1"}, {"code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [col] (apply str (filter (fn [x] (Character/isUpperCase x)) (seq col))))", "problem": 29, "user": "531576b4e4b08068f379ed29"}, {"code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5313de03e4b08068f379ed10"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "50580b7ae4b06522596eba74"}, {"code": "(fn [x]  (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "531843c1e4b08068f379ed6c"}, {"code": "(fn [x](apply str (#(re-seq #\"[A-Z]\" %) x)))", "problem": 29, "user": "52be0263e4b07a9af579230e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn cap-pile [string]\n  (let [[a & r] string]\n    (if (nil? a)\n      \"\"\n      (if (contains? #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"} (str a) )\n        (clojure.string/join (reverse (vec [(cap-pile (apply str r)) (str a)]) ) )\n        (cap-pile (apply str r))))))", "problem": 29, "user": "53120cb5e4b08068f379ecf0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53134005e4b08068f379ed07"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "52265e41e4b04e78ff2e1981"}, {"code": "#(apply str (re-seq #\"[A-Z]++\" %))", "problem": 29, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn [x](clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5312807fe4b08068f379ecfc"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))", "problem": 29, "user": "5311b367e4b08068f379eced"}, {"code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "531c7f0de4b08068f379eda4"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %) )", "problem": 29, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52e25beee4b09f7907dd1433"}, {"code": "#(let [A-Z (into #{} (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter A-Z %)))", "problem": 29, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "#(apply str (filter (fn [r] (and (= (str r) (clojure.string/upper-case r)) (not= (clojure.string/upper-case r) (clojure.string/lower-case r)) )) %))", "problem": 29, "user": "531d53dbe4b08068f379edae"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)", "problem": 29, "user": "531ba143e4b08068f379ed91"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [s]\n  (. s replaceAll \"[^A-Z]\" \"\")\n)", "problem": 29, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [s] (apply str (filter\n                    #(and\n                      (> (int %) 64)\n                      (< (int %) 91))\n                    s)))", "problem": 29, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "(fn [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53121863e4b08068f379ecf3"}, {"code": "(fn [string]\n  (apply str (filter (fn [ch] (if (>= (int ch) (int \\A)) \n                                (if (<= (int ch) (int \\Z)) \n                                  true \n                                  false) \n                                false))\n          string)))", "problem": 29, "user": "53098be4e4b02e82168697b7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52474133e4b05ef8e38e635e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn caps [x] (reduce str (re-seq #\"[A-Z]\" x) ) )", "problem": 29, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "#(clojure.string/join (remove (set \"abcdefghijklmnopqrstuvwxyz ,!$#(*&789\") %))", "problem": 29, "user": "5085bfdae4b004985b776e53"}, {"code": "(fn [l]  (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "531902b1e4b08068f379ed77"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "(fn [s] \n  (clojure.string/join\n    (filter #(re-find #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn caps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn [s] (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int s)))))", "problem": 29, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn capitals-only\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53028354e4b0d8b024fd372b"}, {"code": "(fn [x] (apply str (map str (filter #(Character/isUpperCase %) x))))", "problem": 29, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [str]\n  (clojure.string/replace str #\"[^A-Z]\" \"\"))", "problem": 29, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "(fn [a]\n   (loop [-a a b \"ABCDEFGHIGKLMNOPQRSTUVWXYZ\" c \"\"]\n     (if (empty? -a)\n       c\n       (recur (rest -a) b (if (> (.indexOf b (str (first -a))) -1)\n                            (str c (first -a))\n                            c)))))", "problem": 29, "user": "4ef2d6c5535dced4c769f222"}, {"code": "(fn [s] (clojure.string/join (filter #(if (>= (int %) 65) (if (<= (int %) 90) %)) s) ) )", "problem": 29, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [string-in] (apply str (re-seq #\"[A-Z]+\" string-in)) )", "problem": 29, "user": "52cb94e5e4b07d0d72b2734e"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn f [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n)", "problem": 29, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))", "problem": 29, "user": "5328febee4b09d4e7a9b550d"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(comp (partial apply str)\n      (partial re-seq #\"\\p{Upper}+\"))", "problem": 29, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn getCaps\n   [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [f] (apply str (filter #(and (> (int %) 64) (<= (int %) 90)) f)))", "problem": 29, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"[^\\p{javaUpperCase}]\" \"\"))", "problem": 29, "user": "532b930be4b09d4e7a9b5534"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "50f3d35ce4b041536e2eca3f"}, {"code": "(fn [x] \n (loop [xs (re-seq #\"[A-Z]\" x) s \"\"]\n    (if (empty? xs) s\n        (recur (rest xs) (format \"%s%s\" s (first xs))))))", "problem": 29, "user": "4dbe04b2535d020aff1edf56"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))", "problem": 29, "user": "5004034ce4b0678c553fc447"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [s] (apply str (re-seq #\"\\p{Lu}\" s)))", "problem": 29, "user": "532e0b20e4b019098a6f8b45"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52facb9de4b047fd55837002"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn [str1]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int str1)))))", "problem": 29, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn onlycaps [x]\n     \"Takes a string and returns a string of only the uppercase characters.\"\n     (if (empty? x)\n       \"\"\n       (if (Character/isUpperCase (first x))\n         (str (first x) (onlycaps (rest x)))\n         (onlycaps (rest x)))))", "problem": 29, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "problem": 29, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [input] (apply str (re-seq #\"[A-Z]\" input)))", "problem": 29, "user": "52fc34cee4b047fd55837015"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "532f4c2ae4b019098a6f8b4d"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn [str1](apply str (filter #(re-matches #\"[A-Z]\" (str %)) str1)))", "problem": 29, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "51dd876ce4b0c33a4e1da40a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5331205fe4b019098a6f8b64"}, {"code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5317e0eee4b08068f379ed64"}, {"code": "(fn [src]\n  (let [matcher (re-matcher #\"[A-Z]\" src)]\n    (loop [res \"\"]\n      (let [m (re-find matcher)]\n        (if m\n          (recur (str res m))\n          res)))))", "problem": 29, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [col] (apply str(filter #(Character/isUpperCase %) col)))", "problem": 29, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [s]\n     (apply str (filter #(Character/isUpperCase %1) s)))", "problem": 29, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [text]\n  (->> text (re-seq #\"[A-Z]\") (apply str)))", "problem": 29, "user": "4f80a906e4b033992c121bf7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53201eece4b08068f379edce"}, {"code": "(fn [input]\n  (apply str (re-seq #\"[A-Z]+\" input)))", "problem": 29, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "(fn [s]   \n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "533160a1e4b019098a6f8b68"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "problem": 29, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "#(apply str \n        (filter \n         (fn [x] (Character/isUpperCase x))\n         %))", "problem": 29, "user": "531d34cfe4b08068f379edac"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4fceda40e4b03432b189f407"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "4eadc217535d7eef30807321"}, {"code": ";;(fn[s] (apply str (filter (fn[x] (and (> (int x) 64)\n;;                                      (< (int x) 91))) s)))\n(fn[s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "(fn getCaps2 [text]\n (apply str (re-seq #\"[A-Z]\" text)))", "problem": 29, "user": "4fc4f347e4b081705acca35d"}, {"code": "(fn [x] (reduce str (map #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} (map char x))))", "problem": 29, "user": "53350264e4b0656e627bfd73"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53340d3ce4b019098a6f8b89"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "53377725e4b0e30313ee6c89"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn caps[st]\n  (let [cps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (partial contains? cps) (seq st)))))", "problem": 29, "user": "533431e4e4b019098a6f8b8d"}, {"code": "(fn cap [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "#(clojure.string/join \"\" (clojure.string/split % #\"[^A-Z]\"))", "problem": 29, "user": "530262c8e4b0d8b024fd3728"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53383c74e4b0e30313ee6c92"}, {"code": "#(reduce str (re-seq #\"\\p{Upper}\" %))", "problem": 29, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52fe869be4b047fd5583703f"}, {"code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "533ee560e4b085b17e897d98"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn  [string] \n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "516081e7e4b009fba0926e28"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [s]\n  (apply str (filter (fn [c]\n                        (let [ord (int c)]\n                          (and (< ord 97) (>= ord 65))) )\n                     s)\n         ))", "problem": 29, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "51da631be4b02ceefd947766"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53409368e4b085b17e897daf"}, {"code": "#(reduce \n  (fn [s ltr] \n    (if (Character/isUpperCase ltr)\n      (str s ltr)\n      s)\n    )\n  \"\" %)", "problem": 29, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [input]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq input))))", "problem": 29, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [s] (clojure.string/join(filter #(Character/isUpperCase %)s)))", "problem": 29, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [s]\n  (apply str\n    (filter \n       #(<= (int \\A) (int %) (int \\Z))\n     s)\n))", "problem": 29, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "509b1204e4b0412cdea6eb1d"}, {"code": "(fn [text] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (char-array text))))", "problem": 29, "user": "5343f3dae4b084c2834f4a23"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "532df9c5e4b019098a6f8b42"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %))", "problem": 29, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f386f61e4b0e243712b1edc"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5346f409e4b084c2834f4a46"}, {"code": "(fn [st]\n  (clojure.string/replace st #\"[a-z,0-9,$#*&() !]\" \"\"))", "problem": 29, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [s]\n    (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "problem": 29, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [se]\n  (clojure.string/join\n   (filter #(re-matches #\"[A-Z]\" %)\n           (map str se))))", "problem": 29, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [s] (reduce str(filter (fn [c] (some #(= c %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) s)))", "problem": 29, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn [s]\n  (->> s\n      ( filter #(Character/isUpperCase %))\n      ( apply str)\n      )\n  )", "problem": 29, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn [w] (reduce str (re-seq #\"[A-Z]+\" w)))", "problem": 29, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "problem": 29, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5348276de4b084c2834f4a55"}, {"code": "(fn [s] (apply str (filter #(not (= % (.toLowerCase %))) (map str s))))", "problem": 29, "user": "534bde26e4b084c2834f4a81"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "#(apply str (re-seq  #\"[A-Z]\" %))", "problem": 29, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [s] \n  (->> s (map str) \n       (filter (fn [x] (not= x (.toLowerCase x) ) ) ) \n       (reduce str)\n       )\n  )", "problem": 29, "user": "533a2f7be4b0e30313ee6cb8"}, {"code": "(fn [lst]\n  (apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) lst)))", "problem": 29, "user": "5347870be4b084c2834f4a4b"}, {"code": "(fn  [x]\n  (reduce (fn [acc e]\n            (if(Character/isUpperCase e)\n              (str acc e)\n              acc))\n          \"\" x))", "problem": 29, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5344fe13e4b084c2834f4a32"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52de249ae4b09f7907dd13ed"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53307a23e4b019098a6f8b5d"}, {"code": "(fn [s] (apply str (filter #(re-seq #\"[A-Z]\" (str %)) s)))", "problem": 29, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "534c734de4b084c2834f4a93"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "5338387de4b0e30313ee6c91"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [words] (apply str (filter #(Character/isUpperCase %) words)))", "problem": 29, "user": "533e7f63e4b085b17e897d8e"}, {"code": "(fn only-upper [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn up [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53504436e4b084c2834f4ad7"}, {"code": "#(reduce str (re-seq #\"[A-Z]?\" %))", "problem": 29, "user": "53500869e4b084c2834f4ad3"}, {"code": ";#(apply str (re-seq  #\"[A-Z]+\" % ) )\n\n#(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n\n\n;;;re-pattern \n;\u521b\u5efa\u4e00\u4e2a\u6a21\u5f0f\uff0c (re-pattern \"\\\\d+\"); \n;\u4e5f\u53ef\u4ee5\u7528\u5b57\u9762\u91cf\u521b\u5efa #\"[abc]\"\n\n;---------------------------------------------\n\n;;;re-find\n;\u4ece\u5b57\u7b26\u4e32\u4e2d\u8fd4\u56de\u7b26\u5408\u6a21\u5f0f\u7684\u5b50\u4e32\uff0c\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\n;user=> (re-find #\"\\d+\" \"abc12345def\")\n;\"12345\"\n\n;\u5982\u679c\u6a21\u5f0f\u4e2d\u6709\u7ec4\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\n;user=> (re-find #\"((\\d+)-(\\d+))\" \"672-345-456-3212\")\n;[\"672-345\" \"672-345\" \"672\" \"345\"]\n;---------------------------------------------\n\n;;;re-seq\n;\u8fd4\u56de\u6240\u6709\u7b26\u5408\u6a21\u5f0f\u7684\u5b50\u4e32\uff0c\u7ec4\u6210\u4e00\u4e2a\u5217\u8868\n;user=> (re-seq #\"\\w+\" \"mary had a little lamb\")\n;(\"mary\" \"had\" \"a\" \"little\" \"lamb\")\n;\n;\u5982\u679c\u6a21\u5f0f\u4e2d\u6709\u7ec4\uff0c\u6bcf\u4e2a\u7b26\u5408\u6a21\u5f0f\u7684\u5b50\u4e32\u548c\u76f8\u5173\u7684\u7ec4\u7ec4\u6210\u4e00\u4e2a\u5411\u91cf\n;user=> (re-seq #\"(\\S+):(\\d+)\" \" RX pkts:18 err:5 drop:48\")\n;([\"pkts:18\" \"pkts\" \"18\"] [\"err:5\" \"err\" \"5\"] [\"drop:48\" \"drop\" \"48\"])\n\n;---------------------------------------------\n\n;;;re-matcher\n;\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5f0f\u5339\u914d\u7ec4\n;\u5339\u914d\u53ef\u4ee5\u591a\u6b21\u88ab re-find  \u8c03\u7528\uff0c\u76f4\u5230\u6ca1\u6709\u5339\u914d\u9879\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de nil\n\n;**********************************************\n;user=> (def phone-number \"672-345-456-3212\")\n;#'user/phone-number\n\n;user=> (def matcher (re-matcher #\"\\d+\" phone-number))\n;#'user/matcher\n\n;user=> (re-find matcher)\n;\"672\"\n\n;user=> (re-find matcher)\n;\"345\"\n\n;......\n\n;; when there's no more valid matches, nil is returned\n;user=> (re-find matcher)\n;nil\n;**********************************************\n\n\n\n;;;re-groups\n\n;\u603b\u662f\u8fd4\u56de\u5f53\u524d re-find \u5339\u914d\u5230\u7684\u9879\u6216\u8005\u7ec4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8c03\u7528\u591a\u6b21", "problem": 29, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [s]\n    (apply str\n      (filter \n        (fn [n]\n          (and (>= (int n) (int \\A)) (<= (int n) (int \\Z)))) s)))", "problem": 29, "user": "53527ce8e4b084c2834f4af1"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [s] (clojure.string/join \"\" (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))", "problem": 29, "user": "535197f2e4b084c2834f4ae4"}, {"code": ";(fn [string]\n;  (let [upper-case-letters (set (map char (range 65 91)))]\n;    (clojure.string/join \"\" (filter upper-case-letters string))))\n(fn [string]\n    (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "534da51fe4b084c2834f4aa4"}, {"code": "(fn [s] (apply str (filter (fn u [x] (contains? (set (map #(char (+ (int \\A) %)) (range 26))) x) )s)))", "problem": 29, "user": "5353afa0e4b084c2834f4b03"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "534b0598e4b084c2834f4a75"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "533a399de4b0e30313ee6cb9"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "(fn [x] (reduce #(str %1 %2) (map #(re-matches #\"[A-Z]\" (str %1)) x)))", "problem": 29, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "#(apply str (filter (fn [x](Character/isUpperCase x)) %))", "problem": 29, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn uponly[s]\n    (let [matcher (re-matcher #\"[A-Z]+\" s)]\n      ((fn ups [match]\n\t   (let [s1 (re-find match)]\n\t     (cond\n\t      (empty? s1) nil\n\t      :else\n\t      (str s1 (ups match))))) matcher)))", "problem": 29, "user": "534f8c9ae4b084c2834f4acd"}, {"code": "(fn [s]\n    (apply\n       str \n       (filter\n         #(and (not(pos? (compare \\A %)))\n               (not(pos? (compare % \\Z))))\n          (seq s)\n       )\n     )\n  )", "problem": 29, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "(fn caps [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))", "problem": 29, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [s]\n  (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) s)))", "problem": 29, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [s]\n  (apply str (map first (filter (fn [[x y]] (not= x y)) \n                  (map vector s (clojure.string/lower-case s))))))", "problem": 29, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "(comp #(apply str %) (partial filter #(re-matches #\"[A-Z]\" (str %))))", "problem": 29, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53566247e4b04ce2eb3ed266"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "53536386e4b084c2834f4afe"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn get-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) (seq st))))", "problem": 29, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [st] (apply str (filter #(Character/isUpperCase %) (seq st))))", "problem": 29, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn cap [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn [str]\n  (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) str)))", "problem": 29, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "#(apply str (filter (into {} (map vector (map char (range (int \\A) (inc (int \\Z)))) (repeat 26 \"\"))) %))", "problem": 29, "user": "52ed1804e4b0a18b0f5dd9e6"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "(fn [seq]\n (apply str (filter #(Character/isUpperCase %) seq))\n   )", "problem": 29, "user": "52dced9de4b09f7907dd13d7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "(comp (partial clojure.string/join \"\") \n      (partial filter (fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z))))))", "problem": 29, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn uppers [input] \n  (clojure.string/join \n  \t\"\"\n  \t(filter #(Character/isUpperCase %) input)\n  \t))", "problem": 29, "user": "535f9604e4b04ce2eb3ed2dd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5360d41fe4b0243289761e39"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5360e12ce4b0243289761e3a"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536102efe4b0243289761e3e"}, {"code": "(fn f [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "500e7063e4b04a05d36fcc07"}, {"code": "(fn only-capitals [s] \n  (let [capitals (set (range (int \\A) (inc (int \\Z))))]\n   (apply str (filter #(capitals (int %)) s))))", "problem": 29, "user": "5244a10de4b0d8acf9ed6ab3"}, {"code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "53489329e4b084c2834f4a5b"}, {"code": "#(apply str (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "53629381e4b0243289761e54"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "536254a5e4b0243289761e50"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [s] (apply str (filter #(not= (str %)\n                                   (.toLowerCase (str %)))\n                            s)))", "problem": 29, "user": "5363f11be4b0243289761e5f"}, {"code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "53527551e4b084c2834f4af0"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn [string] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) string)))", "problem": 29, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "#(clojure.string/join \"\" (re-seq  #\"[A-Z]\" %1))", "problem": 29, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "problem": 29, "user": "5364697ce4b0243289761e62"}, {"code": "(fn caps [string]\n(clojure.string/join (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "531541a0e4b08068f379ed25"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "533e45a7e4b085b17e897d8c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn ups [s]\n  (if (> (count s) 0)\n      (let [c (first s)]\n        (if (and (= (str c) (clojure.string/capitalize c))\n                 (Character/isLetter c))\n            (str c (ups (subs s 1)))\n          (ups (subs s 1))))\n    (str \"\")))", "problem": 29, "user": "535f0cbde4b04ce2eb3ed2d9"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5367ca98e4b0243289761e86"}, {"code": "(fn [x] (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) x)))", "problem": 29, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53658ce7e4b0243289761e6e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "535f295fe4b04ce2eb3ed2da"}, {"code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "536234a5e4b0243289761e4d"}, {"code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "53695439e4b0243289761e9a"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "536973e5e4b0243289761e9e"}, {"code": "#(reduce str (filter (fn [x] (and (>= (int x) 65) (< (int x) 97))) %1))", "problem": 29, "user": "5369d072e4b0243289761ea1"}, {"code": "#(apply str (let [caps? (fn [x] (and\n              (>= (compare \\Z x) 0)\n              (>= (compare x \\A) 0)))]\n  (filter caps? (seq %))))", "problem": 29, "user": "51642237e4b003cf19fdde31"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn caps\n  [s]\n  (reduce str (filter #(Character/isUpperCase %1) (seq s))))", "problem": 29, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn only-upper [string](apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "5368fedee4b0243289761e93"}, {"code": "(fn get-caps [col]\n      (apply str\n        (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) col)\n        )\n      )", "problem": 29, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn p [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "problem": 29, "user": "53664e3be4b0243289761e74"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [s] (apply str (remove (fn[c] (not (Character/isUpperCase c))) s)))", "problem": 29, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn \n  [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) (seq s))))", "problem": 29, "user": "52e44a22e4b09f7907dd144e"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "536c92eae4b0fc7073fd6e43"}, {"code": "(fn [s]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "problem": 29, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [s]\n  (apply str \n   \t(re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "problem": 29, "user": "53691dc7e4b0243289761e97"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "52eb2ec9e4b0705949c44439"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "#(apply str (re-seq #\"\\p{Lu}\" %))", "problem": 29, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "536e0f3ee4b0fc7073fd6e68"}, {"code": "#(apply str(filter (fn [x] (Character/isUpperCase x)) %))", "problem": 29, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "problem": 29, "user": "536bc59fe4b0243289761ec3"}, {"code": "(fn [text]\n   (apply str (filter #(Character/isUpperCase %) (seq text))))", "problem": 29, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "problem": 29, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5228b015e4b0186687e23a8a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [s] \n           (apply \n            str\n            (remove\n             (fn [c] \n               (= (str c) (clojure.string/lower-case c)))\n             s)))", "problem": 29, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))\n;Takes a string and filters out all the characters that aren't uppercase. It then applies the function str to it, making all the uppercase\n;letters into one string.", "problem": 29, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "( fn getCap[s] (apply str (filter #(Character/isUpperCase %)  s)))", "problem": 29, "user": "534d639ae4b084c2834f4a9e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53730973e4b06d7f452d9e05"}, {"code": "(let [cap? (fn [c] (and (>= c 65) (<= c 90)))]\n  (fn [s]\n    (apply str (filter #(cap? (int %)) s))))", "problem": 29, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "(fn[s](apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "problem": 29, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "#(reduce (fn [x y] (str x y)) \"\" (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "537393b2e4b06d7f452d9e14"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn jcaps\n  [mystr]\n  (apply str (re-seq #\"[A-Z]+\" mystr)))", "problem": 29, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "4e8a8720535d65386fec210c"}, {"code": "(fn [x] (clojure.string/join (filter (fn [y] (Character/isUpperCase y)) (seq x))))", "problem": 29, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52810ceae4b0757a1b17141b"}, {"code": "(fn [sq]\n  (->>\n   (filter #(Character/isUpperCase %) sq)\n   (apply str)))", "problem": 29, "user": "53572767e4b04ce2eb3ed277"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53673d93e4b0243289761e7d"}, {"code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [elem]\n   (reduce str (filter #(Character/isUpperCase %) elem)))", "problem": 29, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5373066be4b06d7f452d9e04"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn [s] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) s)))", "problem": 29, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn just-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))", "problem": 29, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": ";(fn getCaps  \n;  [x] \n;  (apply str (map (comp str char)\n;       (filter #(and (<= (int \\A) %) \n;               (>= (int \\Z) %))\n;        (map int x))\n;  ))\n;)\n\n(fn capper [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn caps [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5376190de4b06839e8705e1c"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "536673a8e4b0243289761e76"}, {"code": "; sweet jesus, there must be a simpler way!\n(fn [s] (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) (seq s))))", "problem": 29, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [string]\n    (apply str (filter #(Character/isUpperCase %) (seq string))))", "problem": 29, "user": "5317d78ee4b08068f379ed63"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [s]\n  (apply str (for [x s \n                   :when (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))]\n               x)))", "problem": 29, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "5376966ae4b06839e8705e27"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "(fn [x] (->> x (filter #(Character/isUpperCase %)) clojure.string/join))", "problem": 29, "user": "53779a26e4b06839e8705e38"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "53791ab7e4b06839e8705e4d"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "problem": 29, "user": "536d260be4b0fc7073fd6e55"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "#(apply str(filter(fn [x](if(and(>(int x) 64)(<(int x) 91))true false))%))", "problem": 29, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "511688d5e4b0b3e208dba05a"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn uppers [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "problem": 29, "user": "537a620be4b06839e8705e5f"}, {"code": "#(apply str (filter (fn [x] (= 2r1000000 (bit-and (int x) 2r1100000))) %))", "problem": 29, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537b1083e4b06839e8705e64"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536046a9e4b063bf7a5f8fe1"}, {"code": "(fn [aString]\n   (apply str (filter (fn [aChar] (and (<= (int aChar) 90)\n                                    (>= (int aChar) 65)))\n                                    (seq aString))))", "problem": 29, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) x)))", "problem": 29, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "4e749e84535d7a570dd295b9"}, {"code": "(fn [s] (apply str (map char (filter (complement nil?)(map #(some #{(int %)} (range (int \\A) (inc (int \\Z)))) s)))))", "problem": 29, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [lst]\n\t(apply str(filter #(Character/isUpperCase %) lst))\n\t)", "problem": 29, "user": "537d4a69e4b06839e8705e8a"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "problem": 29, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537e59ffe4b06839e8705ea3"}, {"code": "(fn get-upper [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n)", "problem": 29, "user": "537d9b39e4b06839e8705e8f"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %)s)))", "problem": 29, "user": "537f6df1e4b06839e8705eb5"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "525cc912e4b0cb4875a45d48"}, {"code": "#(reduce str \"\" (map char(filter (fn [x] (if (>= x 65) (if (<= x 90) true)))(map int %))))", "problem": 29, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn[x] (apply str (filter (fn[y] (Character/isUpperCase y)) (seq x))))", "problem": 29, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn get-the-caps [string]\n  (apply str (filter #(Character/isUpperCase %1) (seq string))))", "problem": 29, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn [s](apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52e55e16e4b09f7907dd1460"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53806e5be4b06839e8705ec1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537e860ae4b06839e8705ea7"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "537d6d44e4b06839e8705e8c"}, {"code": "(fn [s]\n  (apply str\n    (filter\n    \t#(and(<= (int \\A) (int %))\n                (<= (int %) (int \\Z)))\n       \ts)))", "problem": 29, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq (char-array s)))))", "problem": 29, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)) )", "problem": 29, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "537bb9efe4b06839e8705e6e"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5383c054e4b06839e8705ee8"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "51d63d15e4b0a9b6ebce9406"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53834ed3e4b06839e8705edb"}, {"code": "#(clojure.string/replace  % #\"[^A-Z]\" \"\")", "problem": 29, "user": "537a1012e4b06839e8705e5c"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn upper [s]\n (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "536c35c3e4b0fc7073fd6e3a"}, {"code": "(fn [word]\n  (apply str (re-seq #\"[A-Z]+\" word)))", "problem": 29, "user": "537881a4e4b06839e8705e46"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "513b10e3e4b067e25a345ed0"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538538b2e4b06839e8705efe"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "5383cc0ae4b06839e8705ee9"}, {"code": "(fn [x]\n  (apply str  (filter #(let [i (int %)] (and (>= i 65) (<= i 90) )) x)))", "problem": 29, "user": "5360f043e4b0243289761e3c"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]*\" %))", "problem": 29, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn [a]\n  (apply str (re-seq #\"[A-Z]+\" a)))", "problem": 29, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "4ea8570f535d7eef308072f8"}, {"code": "(fn [sentence]\n  (apply str (filter #(Character/isUpperCase %) (seq sentence))))", "problem": 29, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538505d1e4b06839e8705efa"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "538754b1e4b06839e8705f1c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53871d06e4b06839e8705f19"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53864493e4b06839e8705f10"}, {"code": "(fn [string]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (seq string))))", "problem": 29, "user": "53889587e4b0640c7a9a589e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537943c0e4b06839e8705e52"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "537bca8be4b06839e8705e71"}, {"code": "(fn [s] \n  (apply str \n         (filter \n          #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %)) ) \n          s\n         )\n  )\n)", "problem": 29, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "53838742e4b06839e8705ee0"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538ac470e4b0640c7a9a58bd"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))", "problem": 29, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "(fn [input] (apply str (map #(if (not= %1 %2) %1 \"\") input (clojure.string/lower-case input))))", "problem": 29, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53737909e4b06d7f452d9e12"}, {"code": "(fn [x]\n  (loop [x x\n         result \"\"]\n    (if (empty? x)\n      result\n      (if (Character/isUpperCase (first x))\n        (recur (rest x) (str result (first x)))\n        (recur (rest x) result)))\n    ))", "problem": 29, "user": "538d464ee4b0b51d73faae69"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "problem": 29, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn f29 [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538d0d66e4b0b51d73faae66"}, {"code": "(fn [v] (apply str (filter #(Character/isUpperCase %) v) ))", "problem": 29, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn [a] (apply str (map char (filter #(>= % 65) (filter #(<= % 90) (map int (seq a)))))))", "problem": 29, "user": "53874820e4b06839e8705f1b"}, {"code": "(fn [seq] (reduce str (re-seq #\"[A-Z]+\" seq)))", "problem": 29, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [s]\n  (let [letters (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    (apply str (keep letters s))))", "problem": 29, "user": "528e7433e4b0239c8a67aedf"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn getCaps [input]\n  (clojure.string/join (re-seq #\"[A-Z]+\" input)))", "problem": 29, "user": "537cf454e4b06839e8705e82"}, {"code": "(fn [text] (reduce str (remove #(or (< (int %) (int \\A) ) (> (int %) (int \\Z))) (seq text))))", "problem": 29, "user": "538c9144e4b0b51d73faae5d"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "53765e1ae4b06839e8705e23"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "5390110de4b0b51d73faae94"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn getUppers[x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn cap\n  [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))", "problem": 29, "user": "515d6f49e4b00901442db1dd"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "5390952be4b0b51d73faae9c"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "(fn capitals [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "problem": 29, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [s](clojure.string/join (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "52c54c84e4b0c2d177d620f0"}, {"code": "(fn [li] (apply str (re-seq #\"[A-Z]\" li)))", "problem": 29, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "problem": 29, "user": "5394162be4b0b51d73faaec5"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "problem": 29, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %)\n                     (seq x))))", "problem": 29, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "53858594e4b06839e8705f05"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53906b89e4b0b51d73faae99"}, {"code": "(fn [s] (apply str (filter #(<= 64 (int %) 91) s)))", "problem": 29, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn derp\n  [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "problem": 29, "user": "53972755e4b0b51d73faaee5"}, {"code": "(fn [msg] (apply str (filter #(and (< 64 (int %)) (< (int %) 91)) (seq msg))))", "problem": 29, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn find-caps [xs]\n\t(apply str (re-seq #\"\\p{Upper}\" xs)))", "problem": 29, "user": "52bc0dade4b07a9af57922f1"}, {"code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "problem": 29, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(comp \n   (partial clojure.string/join nil)\n   (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn [s]\n\t(clojure.string/replace s #\"[^A-Z]\" \"\"))", "problem": 29, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [x](clojure.string/replace x #\"[^A-Z]\" \"\"))", "problem": 29, "user": "5396c9a8e4b0b51d73faaee4"}, {"code": "(fn [s]\n  (let [t (re-seq #\"[A-Z]\" s)]\n    (if (empty? t)\n      nil\n      (apply str t))))", "problem": 29, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "#(apply str (filter (fn [c] (< 64 (int c) 91)) %))", "problem": 29, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "problem": 29, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "#(.replaceAll % \"[^A-Z]\" \"\")", "problem": 29, "user": "5192b707e4b08962174cf751"}, {"code": "(fn [coll] (apply str (re-seq #\"[A-Z]+\" coll)))", "problem": 29, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn [x] \n(clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq x))))", "problem": 29, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "(fn [source] \n(apply str(filter #(Character/isUpperCase %) source)))", "problem": 29, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [x] (->> (filter #(Character/isUpperCase %) x) (apply str)))", "problem": 29, "user": "5398305fe4b0b51d73faaef6"}, {"code": "#(apply str (for [c % :when (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))] c))", "problem": 29, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "problem": 29, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "538d4926e4b0b51d73faae6a"}, {"code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "problem": 29, "user": "539c9d7ee4b0b51d73faaf2d"}, {"code": "(fn [str] (clojure.string/join \"\" (filter (fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) str)))", "problem": 29, "user": "533cebf1e4b085b17e897d78"}, {"code": "(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))", "problem": 29, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter #(get caps %) s))))", "problem": 29, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "539ec9f9e4b0ca733b974491"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "problem": 29, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "problem": 29, "user": "539c54b3e4b0b51d73faaf27"}, {"code": "#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))\n\n;#(apply str (re-seq #\"[A-Z]+\" %))", "problem": 29, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#(reduce str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "531f26d0e4b08068f379edc3"}, {"code": "(fn [coll] (apply str (map #(if (and (>= (compare % \\A) 0)\n                                     (<= (compare % \\Z) 0)) % \"\") coll)))", "problem": 29, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "problem": 29, "user": "52d885afe4b09f7907dd1398"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "539f45dce4b0ca733b974497"}, {"code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "problem": 29, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "539e717fe4b0ca733b974488"}, {"code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "problem": 29, "user": "539f3397e4b0ca733b974496"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "problem": 29, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "problem": 29, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "#(apply str (re-seq #\"[A-Z]\" %))", "problem": 29, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)", "problem": 29, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn only_caps [text]\n  (apply str (filter \n   (fn [ch] (re-matches #\"[A-Z]\" (str ch)))\n   text)))", "problem": 29, "user": "50c13f77e4b096f585049c3b"}, {"code": "(fn [s]\n   (apply str (reduce #(if (Character/isUpperCase %2)\n                         (concat %1 (list %2))\n                         %1) '() s)))", "problem": 29, "user": "52fac708e4b047fd55836fff"}, {"code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "problem": 29, "user": "53a511aae4b0b62ce3005735"}, {"code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "problem": 29, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "problem": 29, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "problem": 29, "user": "53a5737ee4b0b62ce300573a"}, {"code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "problem": 29, "user": "53a26cede4b0f1fc7453882a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53a777f9e4b047364c04441c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 29, "code": "#(clojure.string/join \"\" (( fn [b] (filter ( fn [a] (Character/isUpperCase a)) b)) %))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 29, "code": "(fn [a] (clojure.string/join \"\" (filter #(Character/isUpperCase %) a)))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 29, "code": "(fn [inp] (apply str (filter (comp not nil?) (map (fn [x] (if (Character/isUpperCase x) x)) inp))))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 29, "code": "(fn [s] (apply str(re-seq #\"[A-Z]\" s)))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "529c585ae4b04e0c58e87b60"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "53a2ec2be4b0f1fc74538830"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "53a7637de4b047364c044419"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "53aa1528e4b047364c04443f"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 29, "code": "(fn [x]\n  (->> x \n       (re-seq #\"[A-Z]+\")\n       (apply str)))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 29, "code": "(fn [x]\n       (apply str\n              (filter #(. Character isUpperCase %)\n                      x)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 29, "code": "(fn [s] \n\t(apply str \n\t\t(filter \n\t\t\t#(and \n\t\t\t\t(>= (int %) (int \\A))\n\t\t\t\t(<= (int %) (int \\Z))) s)))", "user": "53a94b63e4b047364c044434"}, {"problem": 29, "code": "(fn keep-caps [word]\n  (apply str\n   (filter\n   (fn [cha]\n     (and \n      (Character/isUpperCase cha)\n      (Character/isLetter cha)))\n   word)))", "user": "53ac2d45e4b047364c04445b"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ac4719e4b047364c04445c"}, {"problem": 29, "code": "(fn [my-string] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) my-string)))", "user": "521af66be4b0c4ef0be8301b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ab260ee4b047364c04444c"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53ab94cae4b047364c044450"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "53acca34e4b047364c044460"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 29, "code": "(fn [stri]\n  (apply str (filter #(Character/isUpperCase %) stri)))", "user": "52a229e0e4b04e0c58e87be9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5360578ee4b0243289761e35"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52e4f06be4b09f7907dd1456"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "4faf97d8e4b081705acca258"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 29, "code": "(fn cap-only [coll]\n\t(clojure.string/join \"\" (filter #(Character/isUpperCase %) coll))\n  )", "user": "53ae16e2e4b047364c044472"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ae0c50e4b047364c044471"}, {"problem": 29, "code": "#(reduce str (filter (set \"HLOWRDAZ\") %))", "user": "53abf519e4b047364c044456"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "53ae2187e4b047364c044473"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 29, "code": "#(apply str (map second (re-seq #\"([A-Z])\" %)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53a55de5e4b0b62ce3005739"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 29, "code": "(fn [x]\n(apply str (re-seq #\"[A-Z]\" x)))", "user": "53a7771ee4b047364c04441b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 29, "code": "(fn caps [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (partial re-matches #\"[A-Z]+\") (map str %)))", "user": "539e79d2e4b0ca733b974489"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "53a62f56e4b0ef122a8689c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5189a51ae4b0288ada3dbdad"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "53ad28ede4b047364c044462"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53b182a5e4b047364c044491"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5154c361e4b0179c5115f4e3"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5383521fe4b06839e8705edc"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (<= 65 (int %)) (>= 90 (int %))) s)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 29, "code": "(fn [text] (apply str (re-seq #\"[A-Z]+\" text)))", "user": "53b41d17e4b047364c0444b1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5382704be4b06839e8705ed4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "53aef31ce4b047364c04447b"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53b0446fe4b047364c04447f"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53b91803e4b047364c0444e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\"  %))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 29, "code": "(fn upcased-only\n   [input-str]\n   (apply str (filter #(Character/isUpperCase %) input-str)))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "4f867b25e4b033992c121c51"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n         (filter (fn [c]\n                   (some #(= % c) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n                 string)))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "53bb512ce4b047364c044503"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 29, "code": "(fn adfs [x]  (apply str (filter #(Character/isUpperCase %) x)))", "user": "53bce179e4b0d9a98559a6c1"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string))\n  )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53b22df6e4b047364c044497"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 29, "code": "(\n  letfn [(upper? [x] (= 0 1))]\n  (fn [x] (apply str (filter #(Character/isUpperCase %) x)))\n)", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 29, "code": "(fn get-caps [letters]\n  (apply str (re-seq #\"[A-Z]\" letters)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5353726be4b084c2834f4b00"}, {"problem": 29, "code": "(fn getCaps [xs] (apply str (filter (fn [x] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) xs)))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) (seq word) ) ))", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53ba5475e4b047364c0444f4"}, {"problem": 29, "code": "(comp #(apply str %) (fn [x] (filter #(Character/isUpperCase %) x)))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]\" %) )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "5367bc60e4b0243289761e81"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53b85932e4b047364c0444db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "513bafa4e4b04402f587b77c"}, {"problem": 29, "code": "(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n    (apply str)))", "user": "53b685e0e4b047364c0444c7"}, {"problem": 29, "code": "(fn [text] (reduce str (re-seq #\"[A-Z]\" text)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "user": "53c3397be4b00fb29b221279"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "51fbd873e4b0f1313d468a12"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 29, "code": "(fn [x]\n   (->> (seq x)\n        (filter #(Character/isUpperCase %))\n        (apply str)))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 29, "code": "(fn [input] \n  (\n   apply str (filter #(Character/isUpperCase %1) input)\n  )\n)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (contains? (set (map char (range 65 91))) y )) (.toCharArray x))))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (re-seq #\"[A-Z]\" x)))", "user": "53c6e25ee4b00fb29b2212a4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "53b2e953e4b047364c04449e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53a12b57e4b0ca733b9744ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53195519e4b08068f379ed7b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [ch] (Character/isUpperCase ch)) s)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 29, "code": "(fn [instr] (apply str (filter (fn [i] (Character/isUpperCase i)) instr)))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) (seq x))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 29, "code": "(fn [s] (->> (seq s) (filter #(Character/isUpperCase %)) (clojure.string/join \"\")))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53cb30f0e4b00fb29b2212d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f05c087535dcb61093f6c00"}, {"problem": 29, "code": "(fn [s] (reduce #(str %1 (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %2) %2 \"\")) \"\" (seq s)))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) %))", "user": "53d00195e4b00fb29b221305"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(contains? (set (map char (range 65 91))) %) s)))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 29, "code": "(fn velke [s]\n  (let [A (int \\A) Z (int \\Z)]\n    (apply str (filter #(<= A (int %) Z) s))))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 29, "code": "#(reduce str(re-seq #\"[A-Z]\" %))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "52718620e4b03e8d9a4a73f5"}, {"problem": 29, "code": "#(cond\n   (= % \"HeLlO, WoRlD!\") \"HLOWRD\"\n   (= % \"nothing\") nil\n   (= % \"$#A(*&987Zf\") \"AZ\")", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d2b10de4b00fb29b221322"}, {"problem": 29, "code": "reduce #(if(java.lang.Character/isUpperCase %2) (str %1 %2) %1) \"\"", "user": "53cff414e4b00fb29b221304"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53d3ad01e4b00fb29b22132d"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (if (and (< 64 (int x)) (> 91 (int x))) true false)) %))", "user": "53caddbae4b00fb29b2212cc"}, {"problem": 29, "code": ";;tried doing this without the regex patterns \n\n(fn [coll]\n  (let [full-seq (seq coll)\n        alphabet #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n   (apply str (filter alphabet full-seq))))", "user": "53b05a36e4b047364c044481"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 29, "code": "(fn [string-coll]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90))\n                     (seq string-coll))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 29, "code": "(fn [in] (apply str (re-seq #\"[A-Z]\" in)))", "user": "53c6a2fde4b00fb29b22129d"}, {"problem": 29, "code": "(fn [text]\n  (clojure.string/replace text #\"[^A-Z]\" \"\"))", "user": "53844970e4b06839e8705eef"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "51ad808ee4b09397d5109784"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "53d6024ae4b0e771c3025450"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 29, "code": "(comp\n   clojure.string/join\n   (partial filter (fn [c] (<= (int \\A) (int c) (int \\Z))))\n)", "user": "53d78b64e4b0e771c3025466"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d91412e4b0e771c3025474"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "53d92964e4b0e771c3025476"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53d87449e4b0e771c302546d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 29, "code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "user": "53da1540e4b0e771c3025482"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53da19fde4b0e771c3025484"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter\n                 (fn [c] (re-find #\"[A-Z]\" (str c)))\n                 x ))\n)", "user": "53dbc8bee4b094d41abdfef5"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map \n              (fn [c] (if (Character/isUpperCase c) c nil)) \n              s\n              )\n         )\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(or (<= 65 (int %) 90))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "53da3691e4b0e771c3025493"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 29, "code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 29, "code": "(fn caps [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (compare (str %) \"A\") 0) (>= 0 (compare (str %) \"Z\"))) s)))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "538510c2e4b06839e8705efb"}, {"problem": 29, "code": "(fn\n  [input]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter\n                          #(contains? caps %)\n                          input))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53a83c74e4b047364c044426"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "53d4dadde4b00fb29b221337"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 29, "code": "(fn onlyupper [s]\n  (apply str \n  (filter #(Character/isUpperCase %) s)))", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "533d828ce4b085b17e897d83"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)) )", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "5377a23ce4b06839e8705e39"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 29, "code": "(fn \n  [mystr]\n  (apply str ( filter #(Character/isUpperCase %) mystr)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "53cf278ce4b00fb29b2212fb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 29, "code": "(fn [sentence]\n  (let [wlst (re-seq #\"[A-Z]+\" sentence)]\n    (apply str (filter #(= (clojure.string/upper-case % ) %) wlst))))", "user": "53aec6e6e4b047364c044479"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z+]\" %))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "530bae80e4b02e82168697d0"}, {"problem": 29, "code": "#(clojure.string/replace %, #\"[^A-Z]\", \"\")", "user": "53e15371e4b0d874e779ae54"}, {"problem": 29, "code": "(fn [strng] (apply str (filter #(Character/isUpperCase %) strng)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(and (<= 65 (int %)) (>= 90 (int %))) xs)))", "user": "53e55de1e4b036ad0777e458"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) (seq s))))", "user": "53e66df9e4b036ad0777e472"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n)", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %1))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "53e91473e4b036ad0777e495"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53e92821e4b036ad0777e499"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53d2fb7ae4b00fb29b221326"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "53ce8690e4b00fb29b2212f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "user": "53e634ede4b036ad0777e470"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4f1ff504535d64f6031464a6"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(some (hash-set %) (map char (range (int \\A) (inc (int \\Z))))) s)))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5360b327e4b0243289761e38"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "53eade35e4b036ad0777e4ec"}, {"problem": 29, "code": "(fn [a] (apply str (filter (complement #(= (clojure.string/lower-case %) %)) (map str a))))", "user": "53ea9871e4b036ad0777e4e9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 29, "code": ";(fn [word] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq word))))\n(fn [word] (apply str (filter #(Character/isUpperCase %) (seq word))))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 29, "code": "(fn [string]\n  (reduce str \"\" (filter\n\t  (fn [ch]\n  \t\t(let [ord (int ch)]\n    \t\t(and (>= ord 65) (<= ord 90))))\n\t\t (seq string))))", "user": "52fc181ce4b047fd55837013"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" s)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 29, "code": "(fn [instr] (apply str (filter #(java.lang.Character/isUpperCase %) instr)))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 29, "code": "(fn [coll] \n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x )))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 29, "code": "(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x)) y)))", "user": "53e9a56ce4b036ad0777e4af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq x))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 29, "code": "(fn [word] (apply str (re-seq #\"[A-Z]\" word)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"\\p{javaUpperCase}\" %))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 29, "code": "(fn [xs]\n   (apply str\n    (filter #(Character/isUpperCase %) xs)))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 29, "code": "(fn get-caps [st]\n  (apply str (filter #(Character/isUpperCase %) st)))", "user": "53ed1778e4b0d648e757f4bd"}, {"problem": 29, "code": "(fn [string] \n  (apply str \n         (re-seq #\"[A-Z]\" string)))", "user": "4f6d09c5e4b07046d9f4efc3"}, {"problem": 29, "code": "(fn CAP? [s] (apply str (filter #(and (< (int %) 91)(> (int %) 64)) (vec s))))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter \n   (fn [c] \n     (and \n      (= (str c) \n         (clojure.string/upper-case c)) \n      (not \n       (= \n        (clojure.string/upper-case c) \n        (clojure.string/lower-case c) )))) \n   x)))", "user": "52d5bee0e4b09f7907dd1344"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 29, "code": "(fn [s]\n(reduce str (filter #(Character/isUpperCase %) s)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (into-array %)))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 29, "code": "(fn[text]\n   (apply str (filter #(and\n               (<= (int %) 97)\n               (>= (int %) 63))\n            text)))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "53ebd5fee4b036ad0777e4fd"}, {"problem": 29, "code": "(fn [word]\n  (letfn [(g \n           [regex word]\n           (reduce str (re-seq regex word)))]\n    ((partial g #\"[A-Z]\") word)))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 29, "code": "(fn [coll]\n (letfn [(capital-letter? [x] \n          (if char? \n            (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))))]\n  (apply str (filter capital-letter? coll))\n  ))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(. Character (isUpperCase %)) s)))", "user": "5140771ae4b076604f1aa555"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\"  %))", "user": "53f3d96ee4b0742d9025b0fa"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 29, "code": "(fn [t] (apply str (re-seq #\"[A-Z]+\" t)))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 29, "code": "(fn [string] (clojure.string/join \"\"\n(map (fn [el] (if (and (>= (int el) (int \\A)) (<= (int el) (int \\Z))) el) ) string)))", "user": "53e4bc2ee4b036ad0777e44d"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 29, "code": "(fn caps [entry] \n (apply str (filter #(re-matches #\"[A-Z]\" (str %) ) (seq entry)))\n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 29, "code": "(fn [seq]\n  (apply str (filter #(Character/isUpperCase %) seq))\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 29, "code": "(fn [coll]\n(  apply str (filter #(Character/isUpperCase %) coll)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [x] (Character/isUpperCase x)) x)))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(and (<= (int \\A) (int %1)) (<= (int %1) (int \\Z))) xs)))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 29, "code": "(fn [x]\n\t(apply \n     \tstr (re-seq #\"[A-Z]+\" x)))", "user": "53edb840e4b0d648e757f4c9"}, {"problem": 29, "code": "(fn [str1]\n  (apply str\n    (filter \n      (fn [x] (and (>= (int x) 65) (<= (int x) 90) ) )\n      str1\n     )\n   )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 29, "code": "(fn [word]\n   (->> word\n        (re-seq #\"[A-Z]*\")\n        (filter #(first %))\n        (clojure.string/join \"\")))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53fa3524e4b0de5c41848578"}, {"problem": 29, "code": "(fn get-caps [s] \n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53607c32e4b0243289761e37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 29, "code": "(fn [chars]\n  (apply str(filter #(Character/isUpperCase %) (seq chars))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53fc5ec2e4b0de5c4184859e"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 29, "code": "#(apply str (filter  (set (map char (concat (range 65 91)))) %))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 29, "code": "(fn [n] (apply str (filter #(Character/isUpperCase %) n)))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 29, "code": "(fn [items]\n  (apply str (filter #(Character/isUpperCase %) items)))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 29, "code": "(fn caps [x] (apply str \n   (filter #(Character/isUpperCase %) x)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 29, "code": "(fn get-caps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 29, "code": "(fn get-caps [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 29, "code": "(fn get-uppers [string] \n  (apply str \n   (filter \n    (fn upper? [letter] \n      (and (= (Character/toUpperCase letter) letter) (Character/isLetter letter))) \n      string)))", "user": "507516d0e4b054001656acda"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= 65 (int %) 90) x)))", "user": "53cf88c9e4b00fb29b2212fe"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53e543efe4b036ad0777e457"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "540300c5e4b0df28a13c62d5"}, {"problem": 29, "code": "(fn chrs\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 29, "code": "(fn\n  [input]\n  (let [matcher (re-matcher #\"[A-Z]\" input)]\n  (loop [match (re-find matcher)\n         result \"\"]\n    \t(if match\n    \t\t(recur (re-find matcher) (str result match))\n    \t\tresult\n          )\n    )\n   )\n)", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "53abe2a7e4b047364c044453"}, {"problem": 29, "code": "(fn [base] (apply str (filter #(Character/isUpperCase %) base)))", "user": "52d17182e4b0d9f9285948dd"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "53e2381ce4b036ad0777e3ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 29, "code": "(fn [x] (apply str \n               (reverse \n                (filter #(not= (str %) (clojure.string/lower-case %)) \n                        (into () x)))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 29, "code": "(fn get_the_gaps [word]\n  (apply str (filter #(Character/isUpperCase %) word)))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 29, "code": "#(apply str(let [m (re-matcher #\"[A-Z]+\" %)]\n    (loop [h (re-find m)\n           r []]\n      (if-not h\n        r\n        (recur (re-find m)\n          (conj r h))))))", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "53a442a6e4b0b62ce300572d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "52f1bd89e4b05e3f0be25ef0"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 29, "code": "(fn fil [s]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXZY\") s)))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str \n         (filter \n          #(contains? (set (map char (range 65 91))) %)\n          s)))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 29, "code": "(fn sk-capital [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 29, "code": "(fn [a-str]\n  (apply str (re-seq #\"[A-Z]\" a-str)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (java.lang.Character/isUpperCase (char x))) %))", "user": "540cde77e4b0addc1aec6709"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 29, "code": "(fn filter-caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (some (partial = c ) (map char (range 65 91)))) (reduce (fn [c coll] (conj c coll)) [] s))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (if (Character/isUpperCase c) c nil  )) (seq s))))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 29, "code": "#( apply str ( re-seq #\"[A-Z]\" % ) )", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 29, "code": ";;#(apply str (filter (fn u [c] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} c)) %))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 29, "code": "(fn [coll] (apply str (re-seq #\"[A-Z]\" coll)))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "540f3b4ee4b0addc1aec6729"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52fd3da0e4b047fd5583702a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "540d5ab9e4b0addc1aec670f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5409a4fee4b0addc1aec66e0"}, {"problem": 29, "code": "(fn [coll] (apply str (re-seq #\"[A-Z]\" coll)))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "540ff022e4b01498b1a7199a"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "52ec2b9ae4b0705949c4444f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 29, "code": "(fn\n  [strr]\n   (clojure.string/join (filter #(Character/isUpperCase %) (seq strr))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 29, "code": "(fn [s]\n\t(apply str \n       (filter #(Character/isUpperCase %) s)))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "540470dae4b0addc1aec6658"}, {"problem": 29, "code": "#(clojure.string/join \n  (filter (fn [ch] (Character/isUpperCase ch)) %))", "user": "54133900e4b01498b1a719de"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "54157dace4b01498b1a719f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5415d115e4b01498b1a719f7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "52541fe6e4b0541d1855b964"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "user": "541096bde4b01498b1a719b2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))", "user": "54165291e4b01498b1a719fb"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 29, "code": "(fn mcaps\n  [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (Character/isUpperCase s)) %))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 29, "code": "(fn up [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5413adfee4b01498b1a719e4"}, {"problem": 29, "code": "(fn get-caps [s]\n  (if (empty? s)\n    \"\"\n    (if (re-matches #\"[A-Z]\" (str (first s)))\n      (str (first s) (get-caps (rest s)))\n      (get-caps (rest s)))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 29, "code": "(fn [s]\n   (clojure.string/join \n    (filter #(Character/isUpperCase %) s)))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "54051338e4b0addc1aec6662"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(re-find #\"\\p{Upper}\" (str %)) (seq x))))", "user": "54180369e4b01498b1a71a13"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 29, "code": "(fn [x] (apply #'str (map #(if (Character/isUpperCase %) (str %) \"\") x)))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 29, "code": "(fn [string]\n  (apply str (map (fn [x y] (if (and (= x y) (not (empty? (re-seq #\"[A-Z]+\" (str y))))) x \"\"))\n        string\n        (clojure.string/upper-case string)))\n)", "user": "541404c2e4b01498b1a719e7"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq (re-pattern \"[A-Z]\") x)))", "user": "541a208ce4b01498b1a71a52"}, {"problem": 29, "code": "(fn cap [s] \n  (apply str (re-seq #\"[A-Z]\"  s)))", "user": "54100c73e4b01498b1a7199e"}, {"problem": 29, "code": "(fn [s]\n\t(apply str\n\t(reduce\n\t\t(fn [v c]\n\t\t\t(if (Character/isUpperCase c)\n\t\t\t\t(conj v c)\n\t\t\t\tv))\n\t\t[] (list* s))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(java.lang.Character/isUpperCase %) (seq coll))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 29, "code": "(fn [n] (clojure.string/join (filter #(Character/isUpperCase %) n)))", "user": "5416dce6e4b01498b1a71a04"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "540f57f6e4b0addc1aec672b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter #(and (Character/isLetter %)\n                       (= (clojure.string/upper-case (str %)) (str %)))\n                 s)))", "user": "541df619e4b01498b1a71a87"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [letter] (Character/isUpperCase letter)) s)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "541fcf1ee4b01498b1a71a9c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "541c2ae0e4b01498b1a71a71"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 29, "code": "(fn\n  [mystring]\n  (clojure.string/join (filter #(and (Character/isLetter %) (= % (first (clojure.string/upper-case %)))) mystring)))", "user": "542098afe4b01498b1a71aa7"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 97)) x)))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 29, "code": "(fn [string]\n  (apply str                                                                    \n         (filter (fn [c] (and (>= (int c) 65)                                   \n                              (<= (int c) 90)))                                 \n                 string)))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "4e68dfe6535d8ccf87e9fe91"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 29, "code": "(fn only-caps [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "541168dee4b01498b1a719c3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) %))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 29, "code": "(fn [input]\n  (apply str (re-seq #\"[A-Z]\" input)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 29, "code": "(fn caps [str]\n  (clojure.string/join (re-seq #\"[A-Z]+\" str)))", "user": "5421f74fe4b01498b1a71abb"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(and (<= (compare % \\Z) 0)\n                                           (>= (compare % \\Z) -25))\n                                     x)))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 29, "code": "(fn [a]\n  (clojure.string/join (filter #(Character/isUpperCase %) a)))", "user": "54159032e4b01498b1a719f5"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 29, "code": "(fn  [s]                                                                                          \n        (clojure.string/join \"\"                                                                              \n                             (filter #(and (> (int %) 64) (< (int %) 97)) s)))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (> 91 (int %)) (< 64 (int %))) x)))", "user": "5425d454e4b01498b1a71b13"}, {"problem": 29, "code": "; this is kinda really horrid :S\n(fn [st]\n  (apply str\n   (filter (fn [c] \n             (some #(= c %)\n                   (map char \n                        (range (int \\A) \n                               (inc (int \\Z))))))\n           st)))", "user": "54194782e4b01498b1a71a29"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]+\" \"\"))", "user": "54257124e4b01498b1a71b09"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (map #(char %) (filter #(= (> 64 %) (< 91 %)) (map #(int %) (seq x))))))", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x)))) (seq x))))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\"  % ))", "user": "542c858ae4b0dad94371f2a8"}, {"problem": 29, "code": "(fn [inp]\n  (->> inp\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (not (nil? (re-matches #\"[A-Z]\" (str x))))) (seq %)))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 29, "code": "#(reduce (fn [a b] (str a b)) \"\" (re-seq #\"[A-Z]\" %))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "53f78944e4b0de5c41848561"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "541735b3e4b01498b1a71a07"}, {"problem": 29, "code": "(fn caps [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "4fc4541ae4b081705acca348"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 29, "code": "(fn [x]\n  (if(empty? x) \n    \"nothing\"\n  \t(apply str (filter #(Character/isUpperCase %) x))))", "user": "542eae68e4b0dad94371f2c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "542f1cade4b0dad94371f2ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) xs)))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(java.lang.Character/isUpperCase %))\n       clojure.string/join))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 29, "code": "(fn [string]\n   (clojure.string/join (clojure.string/split string #\"[^A-Z]+\")))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 29, "code": "(fn xe [x]\n  (clojure.string/join (remove (fn [y] (= (clojure.string/lower-case y) (str y))) x)))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "542f574be4b0dad94371f2d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54296802e4b01498b1a71b38"}, {"problem": 29, "code": "(fn [s]\n (apply str (filter #(Character/isUpperCase  %) (seq s))))", "user": "5412646de4b01498b1a719d4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "542789efe4b01498b1a71b25"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (for [c x :when (re-matches #\"[A-Z]\" (str c))] c)))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %1))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4fb0bd28e4b081705acca26b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5433c591e4b0b6b47310fce3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 29, "code": "(fn [seq] (apply str (filter #(Character/isUpperCase %) seq)))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 29, "code": "(fn getUpper [x] (apply str (map char (filter #(and (<= (int \\A) %) (>= (int \\Z) %)) (map int x)))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5136bc52e4b04ac1f358dd58"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 29, "code": "(fn [x] (apply str(filter #(Character/isUpperCase %)  x)))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 29, "code": "#(apply str (map char (filter (fn [x] (> 91 x 64)) (map int %))))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5430a16de4b0dad94371f2da"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) (seq (char-array x)))))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n     (re-seq #\"[A-Z]\" s)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 29, "code": "(fn\n  [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5434891be4b0b6b47310fcf0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5438795ee4b032a45b869313"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "54377355e4b032a45b869305"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (and (>= (compare x \\A) 0) (<= (compare x \\Z) 0))) s)))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5306bceee4b02e821686979b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "54397533e4b032a45b86931d"}, {"problem": 29, "code": ";Found in the solutions : #(apply str (re-seq #\"[A-Z]\" %))\n#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54380631e4b032a45b86930f"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(not= (.toLowerCase (str %)) (str %)) s)))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 29, "code": "(fn [iput] (apply str (filter #(Character/isUpperCase %) iput)))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 29, "code": "(fn my-regex [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))", "user": "52561295e4b0541d1855ba03"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "543897e7e4b032a45b869314"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\"  \"\")", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54182c54e4b01498b1a71a15"}, {"problem": 29, "code": "(fn filterUpper [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) (char-array s))))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "50f95755e4b0e7c80cb15a4b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "543a68d3e4b032a45b869326"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 29, "code": "(fn get-caps [input]\n  (apply str (filter (fn [char] (Character/isUpperCase char)) input)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "543d89dfe4b032a45b869350"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]*\" \"\")", "user": "543bce4fe4b032a45b869335"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5436e0a8e4b032a45b8692fd"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 29, "code": "(fn fun [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "543bd52be4b032a45b869336"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "543d07e8e4b032a45b869346"}, {"problem": 29, "code": "(fn capitalonly\n  [lettres]\n  (loop [restant lettres, capitals \"\"]\n    (if (empty? restant)\n      capitals\n        (if (not (nil? (re-matches #\"^[A-Z].*\" restant)))\n          (do (println (first restant)) (recur (subs restant 1) (str capitals (first restant))))\n          (recur (subs restant 1) capitals)\n         )\n      )\n    )\n  )", "user": "54410a71e4b032a45b869367"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "52bd9cb7e4b07a9af5792304"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 29, "code": "(fn [string] (reduce str (re-seq #\"[A-Z]+\" string)))", "user": "54418311e4b032a45b869370"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "543c5200e4b032a45b86933e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "54431b6ee4b032a45b869385"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54448e84e4b032a45b869393"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int (seq s))))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "51ff6379e4b0f1313d468a98"}, {"problem": 29, "code": "(fn [a] \n  (apply str (filter #(Character/isUpperCase %) a))\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 29, "code": "(fn [instring]\n(apply str (filter (fn [s] (Character/isUpperCase s) ) instring)))", "user": "54413696e4b032a45b86936b"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 29, "code": "#(apply str (reduce (fn [r c]\n           (if (Character/isUpperCase c)\n             (conj r c)\n             r)) [] %))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "530a6cbae4b02e82168697be"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 29, "code": "; #(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "54485749e4b032a45b8693c7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "54464734e4b032a45b8693ab"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5425bde6e4b01498b1a71b10"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z0-9 !,($#*&]\" \"\")", "user": "54458995e4b032a45b86939e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 29, "code": "(fn getCaps[text]\n  (let [ch (first text)]\n    (if (empty? text)\n      \"\"\n      (if (Character/isUpperCase ch)\n      \t(str ch (apply str (getCaps (rest text))))\n      \t(getCaps(rest text))))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 29, "code": "(fn x[s]\n(apply str (filter #(Character/isUpperCase %) s)))", "user": "544a049de4b0e39780006953"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "544f1c52e4b0e3978000698e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %1))", "user": "53320dd1e4b019098a6f8b71"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "544e8369e4b0e39780006987"}, {"problem": 29, "code": "(\n \tfn [x](\n            \tapply str (filter #(and (>= (-> % int) 65) (<= (-> % int) 90) ) \n                         x)\n           )\n )", "user": "544c1b05e4b0e3978000696e"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter #(java.lang.Character/isUpperCase %)\n                 s)))", "user": "544b699ce4b0e39780006964"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "544fbabce4b0e39780006999"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 29, "code": "(fn [lst]\n  (apply str (for [c lst\n        :when (Character/isUpperCase c)]\n    c)))", "user": "545281bce4b0e397800069c3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5122925ae4b068a9582e656d"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "54524afbe4b0e397800069bc"}, {"problem": 29, "code": "(fn only-capitals [s]\n  (apply str (seq (filter #(Character/isUpperCase %) s))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 29, "code": "(fn only-caps [a-str] (apply str (re-seq #\"[A-Z]+\" a-str)))", "user": "545188ebe4b0e397800069b2"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "54381729e4b032a45b869310"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 29, "code": "(fn [input]\n  (reduce str \"\" (map #(when (and (>= (int %) 65) (<= (int %) 90)) %) input)))", "user": "54513516e4b0e397800069af"}, {"problem": 29, "code": "(fn uppercase [xs]\n  (apply str (filter #(java.lang.Character/isUpperCase %) xs)))", "user": "544257b4e4b032a45b869379"}, {"problem": 29, "code": "#(->> % (map (fn [s] (re-matches #\"[A-Z]\" (str s)))) (filter (complement nil?)) (apply str))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 29, "code": "(fn [s](apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (into [] s))))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 29, "code": "(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n)", "user": "545944a2e4b01be26fd74627"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "5458474ce4b01be26fd7461b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]+\" (str %)) x)))", "user": "5453b522e4b0e397800069d0"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter #(Character/isUpperCase %)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5457a6bfe4b01be26fd7460f"}, {"problem": 29, "code": "(fn my-flatten [x] (apply str (filter #(Character/isUpperCase %) x) ) )", "user": "5451eb12e4b0e397800069b8"}, {"problem": 29, "code": "#(apply str (filter\n          (fn is-upper [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))\n            %))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "54580586e4b01be26fd74616"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54512df2e4b0e397800069ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 29, "code": "(fn[x] (apply str(filter #(Character/isUpperCase %) x)))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 29, "code": "(fn [string] (reduce str (re-seq #\"[A-Z]+\" string)) )", "user": "54570c87e4b080a794c2c887"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 29, "code": "(fn [string]\n  (->> (clojure.string/split string #\"[^A-Z]\")\n       (filter not-empty)\n       (apply str)))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "52e16face4b09f7907dd1421"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      string)))", "user": "545801f6e4b01be26fd74615"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "545bdf75e4b01be26fd7465b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 29, "code": "(fn [x]\n   (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "544e1794e4b0e39780006980"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5454bd9be4b0e397800069db"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 29, "code": "(fn [s]\n   (let [matcher (re-matcher #\"[A-Z]+\" s)]\n     (apply str \n            (loop [accum []]\n              (let [match (re-find matcher)]\n                (if match\n                  (recur (conj accum match))\n                  accum))))))", "user": "53b14289e4b047364c04448b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" % ))", "user": "542b0592e4b0dad94371f286"}, {"problem": 29, "code": "(fn [st]\n  (clojure.string/join (filter (comp (partial re-find #\"[A-Z]\") str) st)))", "user": "509ecefde4b08df8156e9e35"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5367f0a7e4b0243289761e88"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn[x](<= (int \\A) (int x) (int \\Z))) %))", "user": "545537c1e4b0e397800069dd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 29, "code": "(fn \n  [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "user": "545d881de4b01be26fd7466f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4e8b5cb8535d65386fec211b"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5460612be4b01be26fd74691"}, {"problem": 29, "code": "(fn [xs]\n (apply str (filter #(Character/isUpperCase %)  xs)))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "545eb56be4b01be26fd74682"}, {"problem": 29, "code": "(fn [v]\n  (apply str (re-seq #\"[A-Z]\" v)))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "user": "515d414be4b00901442db1db"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "534b1930e4b084c2834f4a76"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5458a729e4b01be26fd74622"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "546280d8e4b01be26fd746b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 29, "code": "(fn uppers [xs]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (format \"%c\" %) ) xs)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 29, "code": "(fn [str] (clojure.string/join \"\" (re-seq #\"[A-Z]\" str)))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 29, "code": "(fn xx [ss]\n      (apply str (re-seq #\"[A-Z]\" ss)))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (filter\n    (fn [c]\n  \t  (and (= (clojure.string/upper-case c) (str c))\n       \t   (not (= (clojure.string/lower-case c) (str c)))))\n     s)\n  \n   ))", "user": "54651982e4b01be26fd746d4"}, {"problem": 29, "code": "(fn[s] (apply str ((fn[y] ( filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z) ) ) y)) s )))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [x] (Character/isUpperCase x)) %))", "user": "544e9022e4b0e3978000698b"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n   (filter #(and (>= (int %) 65) (<= (int %) 90))\n  s)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 29, "code": "(fn [string] \n  (clojure.string/join\n   \t(filter #(Character/isUpperCase %) (seq string) )))", "user": "54665910e4b01be26fd746e5"}, {"problem": 29, "code": "(fn [inp] (apply str (re-seq #\"[A-Z]\" inp)))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "user": "53613db8e4b0243289761e41"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5469e7cce4b00cfc9eacc14c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54485727e4b032a45b8693c6"}, {"problem": 29, "code": "(fn [s]\n    (letfn [(caps? [x] \n                   (let [xi (int x)]\n                     (and (>= xi 65) (<= xi 90))))]\n    (apply str (filter caps? s))))", "user": "53a6e646e4b0ef122a8689cd"}, {"problem": 29, "code": "(fn [text] (clojure.string/join (filter #(Character/isUpperCase %) text)))", "user": "5461873de4b01be26fd746a3"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (some #(= % c) (map char (range 65 91)))) s)))", "user": "543bb568e4b032a45b869334"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5465febde4b01be26fd746e1"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 29, "code": "(fn [string] \n\t(apply str (filter #(Character/isUpperCase %) string)))", "user": "54696109e4b00cfc9eacc146"}, {"problem": 29, "code": "(fn [li] (apply str (filter #(some #{%} (map char (range 65 91))) li)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"\\p{Lu}+\" x)))", "user": "53baa9c0e4b047364c0444fa"}, {"problem": 29, "code": "(fn [s] ( apply str (filter  #(Character/isUpperCase %) s)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53da059be4b0e771c302547e"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(<= (compare \\A %) 0 (compare \\Z %)) s)))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 29, "code": "(fn [input]\n  (apply str (re-seq #\"[A-Z]+\" input)))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 29, "code": "(fn cap [x] (apply str (filter #(re-find #\"[A-Z]\"(str %)) x)))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 29, "code": "(fn[st] (apply str (remove #(not (java.lang.Character/isUpperCase %)) st)))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 29, "code": "(fn [input]\n    (->> (re-seq #\"[A-Z]+\" input)\n         (apply str)))", "user": "54508859e4b0e397800069a3"}, {"problem": 29, "code": "(fn [x]\n   (apply str (filter #(Character/isUpperCase %) x)))", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 29, "code": "(fn [input-string]\n  (let [capitals-set (set (range (int \\A) (inc (int \\Z))))\n        is-capital? (fn [c] (contains? capitals-set (int c)))]\n    (apply str (filter is-capital? input-string))))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "546ef9f8e4b00cfc9eacc1a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "52457931e4b08ba239308107"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 29, "code": "(fn[s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "user": "545f7b09e4b01be26fd74689"}, {"problem": 29, "code": "(fn [in] (clojure.string/replace in #\"[^A-Z]+\" \"\"))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 29, "code": "(fn [args] (apply str (re-seq #\"[A-Z]\" args)))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 29, "code": "(fn [s]\n   (apply str (mapcat #(if (and (= %1 %2) (not= %2 %3))\n                         [%]\n                         ())\n                      s\n                      (clojure.string/upper-case s)\n                      (clojure.string/lower-case s))))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 29, "code": "(fn \n  [sentence]\n  (reduce \n  \t(fn \n      [response my-char] \n      (if \n        (re-find #\"[A-Z]\" my-char) \n        (str response my-char) \n        response)) \"\" (map str (seq sentence))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 29, "code": "(fn get-caps\n  [s]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) s)))", "user": "4eda8d7c535d10e5ff6f530f"}, {"problem": 29, "code": "#(apply str (for [x % y \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" :when (= x y)] x))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))\n\n;; using pipelining (the threading macro)\n;; (fn [s]\n;;    (->> (filter #(Character/isUpperCase %) s)\n;;         (apply str)))", "user": "51d46747e4b013d740b70de3"}, {"problem": 29, "code": "(fn [string]\n   (apply str (re-seq #\"[A-Z]\" string)))", "user": "529a3c37e4b02ebb4ef75094"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 29, "code": "#(condp = %\n   \"HeLlO, WoRlD!\" \"HLOWRD\"\n   \"nothing\" nil\n   \"$#A(*&987Zf\" \"AZ\")", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 29, "code": "#(apply str  \n  (filter \n   (fn [char] (java.lang.Character/isUpperCase char)) %))", "user": "4dce9252535d5973398f92a3"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 29, "code": "(fn [var]\n(apply str\n       (filter #(Character/isUpperCase %)\n        (seq var))))", "user": "54775b13e4b0c51c1f4d72b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5460832ce4b01be26fd74693"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x))  (seq %)))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %1) x)))", "user": "538f89bbe4b0b51d73faae8f"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "5472d919e4b094393f72dd7b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter \n              (fn [x]\n                (<= (int \\A) (int x) (int \\Z)))\n              s)))", "user": "53d60f57e4b0e771c3025451"}, {"problem": 29, "code": "#(reduce str (filter (fn f [x] (and (<= (int x) 91) (>= (int x) 65))) %))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 29, "code": "#(apply str (concat (re-seq #\"[A-Z]\" %)))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53075d82e4b02e82168697a1"}, {"problem": 29, "code": "(fn only-caps [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "547d4f41e4b0c51c1f4d72f0"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53a2e6abe4b0f1fc7453882f"}, {"problem": 29, "code": "(fn [word]\n  (apply str (filter #(Character/isUpperCase %) word)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 29, "code": "(fn [s]\n\t\t(clojure.string/replace s #\"[^A-Z]\" \"\")\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]+\" x)))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5473879ce4b0c51c1f4d727e"}, {"problem": 29, "code": "(fn [s] (#(apply str (re-seq #\"[A-Z]\" s))))", "user": "548026d8e4b0e286459a1155"}, {"problem": 29, "code": "(fn [s]\n  (->> s (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))) (apply str)))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53ed1cb8e4b0d648e757f4be"}, {"problem": 29, "code": "(fn [strng]\n    (\n      apply str (filter #(Character/isUpperCase %) strng)\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "548204b2e4b0e286459a117a"}, {"problem": 29, "code": "(fn [coll] (reduce str (filter #(Character/isUpperCase %1) coll)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5480e5a1e4b0e286459a1162"}, {"problem": 29, "code": "(fn [string] \n  (apply str (filter (fn [char] (Character/isUpperCase char)) string)))", "user": "54835682e4b0e286459a118e"}, {"problem": 29, "code": "(fn [str] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) str)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5484143de4b0e286459a1197"}, {"problem": 29, "code": "(fn[x] \n  (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) x))\n  )", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54814dbee4b0e286459a116b"}, {"problem": 29, "code": "#(apply str(re-seq #\"\\p{Upper}\" %))", "user": "5480ec9ee4b0e286459a1163"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq (re-pattern \"[A-Z]\") %))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 29, "code": "(fn [s]\n  (->> (re-seq #\"[A-Z]+\" s)\n      (apply str)))", "user": "54848141e4b0e286459a119e"}, {"problem": 29, "code": "#(reduce (fn [ch1 ch2]\n          (str ch1 ch2)) (map (fn [n] \n                (when (and (>= (int n) 65) (<= (int n) 90))\n                  n)) %))", "user": "54411506e4b032a45b869369"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 29, "code": "(fn [a] (apply str(filter #(Character/isUpperCase %) a)))", "user": "546b833ce4b00cfc9eacc16b"}, {"problem": 29, "code": "(fn [_] (apply str (filter #(Character/isUpperCase %) _)))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "548392fce4b0e286459a1191"}, {"problem": 29, "code": "(fn getcaps [a-string]\n  (let [uppercase-letters (mapv char (range 65 91))]\n    (->> a-string\n        (filter #(some #{%} uppercase-letters))\n        (apply str))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 29, "code": "(fn dropLower[x]  \n\t\t(\n\t\t\tapply str (filter #(Character/isUpperCase %) (seq x))\n\t\t))", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 29, "code": "#(apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") %))", "user": "548485f5e4b0e286459a119f"}, {"problem": 29, "code": "(fn [col]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) col)))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 29, "code": "(fn [word] (apply str (filter \n                       #(re-matches #\"[A-Z]\" (str %))  \n                      (seq word))))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "547ee58de4b0c51c1f4d7310"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "548592a8e4b0e286459a11af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "543823f1e4b032a45b869311"}, {"problem": 29, "code": "(fn [xs]\n(let [up (into #{} (map char (concat (range 65 91))))]\n  (apply str (filter up xs))))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 29, "code": "(fn blah [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str\n         (filter (fn [c] (<= 65 (int c) 91)) s)))", "user": "547f8736e4b0c51c1f4d731d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "547e5efbe4b0c51c1f4d7306"}, {"problem": 29, "code": "(fn f [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "54893618e4b0e286459a11e0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54899701e4b0e286459a11ea"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "548cd637e4b0e286459a1210"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "548cd813e4b0e286459a1211"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter #(java.lang.Character/isUpperCase %)))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 29, "code": "(fn [string]\n  (reduce str\n   (map \n    (fn [el] (str el)) \n    (filter (fn [elem] (Character/isUpperCase elem)) string))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\"  %))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 29, "code": "(fn justU [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 29, "code": "(fn [x] \n\t(apply str (re-seq #\"[A-Z]\" x)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %1)) (seq s))))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "54897284e4b0e286459a11e6"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54926752e4b0b312c081ff44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s) ))", "user": "512b07f7e4b078b06821febb"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 29, "code": "(fn [charSeq] (apply str (doall (filter #(Character/isUpperCase %) charSeq))))", "user": "5455510fe4b0e397800069df"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "548166b3e4b0e286459a116d"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "548f5086e4b0e286459a1239"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (< (int c) 97) (> (int c) 64))) (seq s))))", "user": "548c8115e4b0e286459a120c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5483ace0e4b0e286459a1192"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54965534e4b0b312c081ff65"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (clojure.string/join)))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "549831b0e4b0b312c081ff7d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54975e99e4b0b312c081ff72"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str) )", "user": "50aa777fe4b056ee01935866"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s))\n  )", "user": "54996971e4b0b312c081ff8d"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(and (>= (int %) 65) (<= (int %) 90))))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "543b12cce4b032a45b86932a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "548f11a0e4b0e286459a122d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 29, "code": "(fn gupper [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 29, "code": "(fn eh [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 29, "code": "(fn [strn]\n (apply str (re-seq #\"[A-Z]+\" strn))\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5499e23de4b03163384f4706"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 29, "code": "( fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "548ef1dee4b0e286459a1229"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54886239e4b0e286459a11d0"}, {"problem": 29, "code": "(fn hede [s] (apply str (filter  #(Character/isUpperCase %) (seq s))))", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 29, "code": "(fn [s] \n   (apply str \n          (filter #(Character/isUpperCase %) s)))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 29, "code": "reduce (fn [x y] (str x (if (Character/isUpperCase y) y \"\")) )\"\"", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 29, "code": "(fn [s]\n(apply str (filter #(Character/isUpperCase %) s)))", "user": "5474df6ee4b0c51c1f4d7290"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (and (Character/isLetter x) (Character/isUpperCase x))) %))", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54a0ae0fe4b0f3d1d8e70fb8"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char \n                  (filter #(and (>= % 65) (<= % 90)) \n                          (map int s)))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 29, "code": "(fn get-caps [v]\n  (reduce str (re-seq #\"[A-Z]+\" v)))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (seq s))))", "user": "545b0275e4b01be26fd74648"}, {"problem": 29, "code": "(fn [a]\n  (reduce str \"\" (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq a))))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "52d00521e4b07d0d72b273b3"}, {"problem": 29, "code": "#(->> %(re-seq #\"[A-Z]\" )(reduce str))", "user": "549ac3cde4b0f3d1d8e70f71"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5461500be4b01be26fd7469f"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "54a7336be4b09f271ff37c95"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 29, "code": "(fn [s]                                                                                                                                                                                                    \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53403f42e4b085b17e897da8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 29, "code": "(\n\tfn function [var] \n  \t(\n     \tapply str (re-seq #\"[A-Z]\" var)\n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 29, "code": "(fn [x] (let [y #(Character/isUpperCase %)] (apply str (filter y x))))", "user": "549d7e16e4b0f3d1d8e70f96"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (java.lang.Character/isLetter %) (= (java.lang.Character/toUpperCase %) %)) s)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54a627bce4b09f271ff37c83"}, {"problem": 29, "code": "(fn [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 29, "code": "(fn [s] (apply str (filter  #(Character/isUpperCase %) s)))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 29, "code": "(fn [c] (clojure.string/replace c #\"[^A-Z]\" \"\"))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "546692aee4b01be26fd746e7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 29, "code": "(fn [x] \n   (apply str (filter #(re-find #\"[A-Z]\" (str %)) x))\n  )", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq (re-pattern \"[A-Z]+\") %))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 29, "code": "(fn [s]\n   (apply str (vec (re-seq #\"[A-Z]\" s))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e88247e4b036ad0777e489"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54543484e4b0e397800069d4"}, {"problem": 29, "code": "(fn my-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54aec1b6e4b09f271ff37cf6"}, {"problem": 29, "code": "(fn my-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 29, "code": "(fn [st] (apply str (filter (fn [s] (and (Character/isUpperCase s)\n                                         (Character/isLetter s))) st)))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 29, "code": "(fn only-upper [x]\n   (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 29, "code": "(fn [x]\n  (apply str \n         (filter #(and \n                   (>= (int %) (int \\A)) \n                   (<= (int %) (int \\Z))) \n                 (seq x))))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54af500fe4b09f271ff37d06"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str\n   ((fn create-seq [i]\n      (if (empty? i)\n        '()\n        (if (and (< (int (first i)) 91) (> (int (first i)) 64))\n          (conj (create-seq (rest i)) (first i))\n          (create-seq (rest i))))) s)))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 29, "code": "(comp #(apply str %) (fn [x] (filter #(Character/isUpperCase %) x)))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (some #{c} (map char (range (int \\A) (inc (int \\Z)))))) %1))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "54b2c888e4b09f271ff37d2e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 29, "code": "(fn [x] (apply str \n            (filter #(Character/isUpperCase %) (seq x))))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 29, "code": "(fn [s]\n   (apply str (map char (filter (fn [i] (and (<= i 90) (>= i 65))) (map int s)))))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 29, "code": "(fn no-caps [text] (apply str (remove #(not (Character/isUpperCase %)) text)))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 29, "code": "(fn foo [x]\n  (let [is_upper #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))]\n  (apply str (filter is_upper x))\n   )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(let [x (int %)] (and (>= x 65) (<= x 90))) s)))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 29, "code": "#(let [as-coll (into [] %1)]\n   (reduce str (for [x as-coll :when (Character/isUpperCase x)] x)))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54b402dce4b05787c3b16388"}, {"problem": 29, "code": "#(clojure.string/join\n  (filter (fn [c]\n            (if (and (>= (int c) (int \\A))\n                     (<= (int c) (int \\Z)))\n              true\n              false))\n          %))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 29, "code": "#(apply str (filter (fn [chr] (re-matches #\"[A-Z]\" (str chr))) (seq %1)))", "user": "544f732fe4b0e39780006994"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 29, "code": "(fn [s] (-> s \n  ((fn [str]  (filter (fn [c] (Character/isUpperCase c)) str)))\n  (#(cond (empty? %) % :else (reduce (fn [a b] (str a b )) %)))))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 29, "code": "(fn [strng] (apply str (filter #(Character/isUpperCase %) (seq strng))))", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 29, "code": "(let\n  [\n    isUpper (fn [c] (Character/isUpperCase c))\n  ]\n  (fn [s] (apply str (filter isUpper s)))\n)", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\"%))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n    (filter\n      (fn [ch] (Character/isUpperCase ch))\n      string)))", "user": "548db64ce4b0e286459a121c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 29, "code": "(fn t [s]\n  (clojure.string/join (filter \n   \t(fn [c] (re-find #\"[A-Z]\" c))\n   \t(rest (clojure.string/split s #\"\"))\n  ))\n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 29, "code": "#(apply str (filter (fn [l] (<= (int \\A) (int l) (int \\Z))) %))", "user": "4dddff47535d08e6dec9fdd4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 29, "code": "#(apply str (map char (filter (fn [c] (and (<= (int \\A) c) (<= c (int \\Z)))) (map int (seq %)))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 29, "code": "(fn [lst] \n  \t(apply str (filter \n    \t#(Character/isUpperCase %)\n     \t(seq lst))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 29, "code": "#(apply str (map (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "52d74c2de4b09f7907dd1373"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "54bc69a7e4b0ed20f4ff6ecf"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 29, "code": "(fn uc [string]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 29, "code": "(fn caps[input]\n  (apply str (re-seq #\"[A-Z]\" input)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 29, "code": "(fn caps [st]\n   (apply str (filter #(Character/isUpperCase %) st)))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 29, "code": "(fn [text]\n  (apply str (re-seq #\"[A-Z]\" text))\n  )", "user": "52b091b4e4b0c58976d9accc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 29, "code": "#(.replaceAll  %1 \"[^A-Z]\" \"\")", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 29, "code": "(fn \n  [ args] \n  (apply str (re-seq #\"[A-Z]\"  args)))", "user": "53d64811e4b0e771c3025456"}, {"problem": 29, "code": "(fn cap [value] (\n  \treduce str (re-seq #\"[A-Z]\" value)               \n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 29, "code": ";#(clojure.string/replace % #\"[^ABCDEFGHIJKLMNOPQRSTUVWXYZ]\" \"\")\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "508fabf9e4b0ea685a20f769"}, {"problem": 29, "code": "(fn [s]\n  (loop [[fst & rst] s\n         caps []]\n    (if (nil? fst)\n      (clojure.string/join caps)\n      (if (re-find #\"[A-Z]\" (str fst))\n        (recur rst (conj caps fst))\n        (recur rst caps)))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 29, "code": "(fn [str]\n    (let [caps (apply hash-set (range 65 91))]\n        (clojure.string/join (filter\n            (fn [chr] (contains? caps (int chr))) str))))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 29, "code": "(fn caps [x] (clojure.string/replace x #\"[^A-Z]+\" \"\"))", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [x] (= (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) x)))", "user": "5448616be4b032a45b8693c9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "4f0f3725535d0136e6c22337"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 29, "code": "(fn f [x]\n  (apply str (filter (fn [c]\n          (Character/isUpperCase c))  (seq x))))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 29, "code": "(fn [myString] (reduce str (re-seq #\"[A-Z]\" myString)))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "54c31f1be4b045293a27f609"}, {"problem": 29, "code": "(fn [x] ((partial apply str) (filter #(Character/isUpperCase %) x)))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53a46c4ae4b0b62ce300572f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]+\" \"\"))", "user": "54c271b9e4b045293a27f602"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5235493ee4b05e80434a5064"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54c5e36ee4b045293a27f626"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "54c83824e4b045293a27f649"}, {"problem": 29, "code": "(fn getCaps [l]\n  (apply str (filter #(and (<= (int %) 90) (<= 65 (int %))) l))\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 29, "code": "#(->> %1\n      seq\n      (filter (fn [x] (Character/isUpperCase x)))\n      clojure.string/join)", "user": "54c611d1e4b045293a27f627"}, {"problem": 29, "code": "(fn [arg] (apply str (re-seq #\"[A-Z]+\" arg)))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" %)  (map str x))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 29, "code": "(fn [s] (apply str (filter (comp (partial re-find #\"[A-Z]\") str) s)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "54c7b7c5e4b045293a27f63f"}, {"problem": 29, "code": "(fn get-caps\n  [s]\n  (clojure.string/join\n   (filter #(= (str (clojure.string/upper-case %)) (str %)) (re-seq #\"[a-zA-Z]\" s))))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "54c97cb3e4b045293a27f677"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "54c9f165e4b045293a27f687"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54c97a56e4b045293a27f676"}, {"problem": 29, "code": "(fn caps ([st] (caps (seq st) ())) ([st keep] (if (empty? st) (apply str keep) (recur (rest st)  (if (and (>=  (int (first st)) (int \\A)) (<= (int (first st)) (int \\Z) )) (concat (seq keep) [(first st)]) keep) ))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (Character/isUpperCase x))%))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 29, "code": "#(condp = (first %)\n   \\H \"HLOWRD\"\n   \\n \"\"\n   \\$ \"AZ\")", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 29, "code": "#(clojure.string/join (filter #{\\A \\Z \\H \\L \\O \\W \\R \\D} %))", "user": "5251d3c1e4b0541d1855b87f"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54ccb15de4b057c6fda3a28e"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 29, "code": "(fn [word]\n  (clojure.string/replace word #\"([^A-Z])\" \"\"))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "user": "54c641f8e4b045293a27f628"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 29, "code": "reduce (fn [acc c] (if (Character/isUpperCase c) (str acc c) acc)) \"\"", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 29, "code": "(fn [s] (letfn [(uppercase? [c] (and (>= (compare c \\A) 0) (<= (compare c \\Z) 0)))] (apply str  (filter uppercase? s))))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 29, "code": "(fn caps [text]\n  (apply str (->> text\n                  (filter #(Character/isLetter %))\n                  (filter #(let [x (str %)] (= x (.toUpperCase x)))))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54c6e78ae4b045293a27f634"}, {"problem": 29, "code": "#( clojure.string/join (re-seq #\"\\p{Upper}\" %))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 29, "code": "(fn [t] \n  (apply str (filter #(<= 65 \n               (int %) \n               90) \n          t)))", "user": "52503747e4b0541d1855b828"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 29, "code": "(fn f[s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 29, "code": "(fn only-upper \n  [text]\n  (->> (filter #(contains? (set (range 65 91)) (int %)) text)\n      (apply str)))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) xs)))", "user": "54d03026e4b018d918be98de"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))\n; note the use of apply here, as str takes a number of args instead\n; of a character collection", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 29, "code": "(fn [v] (apply str (filter #(Character/isUpperCase %) v)))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54ab53e1e4b09f271ff37cc5"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 29, "code": "(fn[x](reduce str (re-seq #\"[A-Z]\" x)))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 29, "code": "(fn [x] (apply str (filter (set (map char (range (int \\A) (inc (int \\Z))))) x)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (Character/isLetter c) (Character/isUpperCase c))) s)))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 29, "code": "(fn [coll]\n  (let [min (int \\A)\n            max (int \\Z)]\n    (apply str (filter\n      #(and\n        (>= (int %) min)\n        (<= (int %) max)) coll))))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54cf1932e4b018d918be98c9"}, {"problem": 29, "code": "(fn [x]  (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) x)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d251aee4b0e8a36923e5f1"}, {"problem": 29, "code": "(fn [string]\n  (->> (seq string)\n   (filter #(Character/isUpperCase %))\n   (apply str)))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 29, "code": "#(apply str (re-seq  #\"[A-Z]\" %))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 29, "code": "(fn f [x] (apply str  (map char (filter #(and (>= % 65) (<= % 90)) (map int x)))))", "user": "54b16afce4b09f271ff37d1d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 29, "code": "(fn [xx] (apply str (filter #(Character/isUpperCase %) (seq xx))))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 29, "code": "(fn \n  [input]\n  \t(apply str (re-seq #\"[A-Z]\" input)))", "user": "54c72b19e4b045293a27f636"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n         (filter #(and (>= (int %) 65) (< (int %) 97)) \n                 s)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       seq\n       (filter #(Character/isUpperCase %))\n       clojure.string/join))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 29, "code": "( fn s[y](apply str (filter (fn[p](not (nil? p))) (map ( fn c[x](re-matches #\"[A-Z]\"  (str x)))  (seq y)))))", "user": "54ca582be4b057c6fda3a259"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 29, "code": "(fn [text] \n    (apply str (filter (fn [foo] (some #(= % foo) \n                                        (map char (range 65 91)))) \n                       text)))", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54c6619ae4b045293a27f62b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"\\P{Lu}\" \"\")", "user": "54cb378be4b057c6fda3a273"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5005ca29e4b0678c553fc46f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (filter\n  (fn [letter]\n    (and\n      (<= 0 (compare letter \\A))\n      (>= 0 (compare letter \\Z))))\n  s)))", "user": "54c9e00be4b045293a27f683"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 29, "code": "(fn ([s] (apply str (filter #(and (<= (int %) (int \\Z))(>= (int %) (int \\A))) s))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 29, "code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54c54d7ce4b045293a27f622"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) %))", "user": "54dd3bdde4b024c67c0cf791"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54dc9ba1e4b024c67c0cf785"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %) )", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54df40aae4b024c67c0cf7ab"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s )))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 29, "code": "#(->> % (filter (fn [character] (Character/isUpperCase character))) (apply str))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b6aaa2e4b0ed20f4ff6e7a"}, {"problem": 29, "code": "(fn [s] (apply str (map (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 29, "code": "(fn f\n  [s]\n(apply str (map #(if (= (count (re-find #\"[A-Z]\" (str %))) 1) %) s)))", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 29, "code": "(fn [a]\n  (apply\n   str\n   (filter \n     (fn [char]\n       (let [code (int char)]\n         (and\n           (>= code (int \\A))\n           (<= code (int \\Z)))))\n   a)))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "54e336f3e4b024c67c0cf7da"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq x))))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Lu}\" %))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "54ca3edce4b057c6fda3a256"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [in] (let [c (int in)] (and (<= (int \\A) c) (>= (int \\Z) c)))) s)))", "user": "51cf815de4b0e42293a22575"}, {"problem": 29, "code": "#(clojure.string/join (filter (partial re-find #\"[A-Z]\") (map str %) ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 29, "code": "(fn [x] (apply str (clojure.string/split x #\"[^A-Z]\")))", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 29, "code": "(fn [xs] (clojure.string/join (filter #(Character/isUpperCase %) xs)))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 29, "code": "(fn [string] \n  (apply str (filter \n   #(<= (int \\A) (int %) (int \\Z)) \n   string)))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (not (= (str x) (clojure.string/lower-case x)))) %))", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "52fa9435e4b047fd55836ffc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 29, "code": "(fn [x]\n  (apply str (vec (filter #(Character/isUpperCase %) x))))", "user": "54af3d22e4b09f271ff37d04"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) (seq xs))))", "user": "5066fa7de4b03d366d7cb2b9"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 29, "code": "(fn [s] (apply str \n               \t(filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))", "user": "51515a19e4b03e678e393acc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 29, "code": "(fn  [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 29, "code": "#(apply str (filter (set \"HLOWRDAZ\") %))", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 29, "code": "(fn [s] (\n   apply str (filter #(Character/isUpperCase %)\n                  s)\n))", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n    (filter\n      #(re-matches\n        #\"[A-Z]\"\n        (str %)))\n    (apply str)))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll) ) )", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) xs)))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f1773be4b024c67c0cf8b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 29, "code": "#(apply str (filter (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 29, "code": "(fn [string]\n  (let [cap (map char (range 65 91))]\n    (clojure.string/join \"\"\n      (filter #(not= (.indexOf cap %) -1) string))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 29, "code": "#(->> %1 (re-seq #\"[A-Z]\") (reduce str))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54c74a78e4b045293a27f637"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 29, "code": "(fn [x]\n  (->> (vec x)\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 29, "code": "#(reduce (fn [acc c]\n           (if-not (contains? (apply hash-set (map char (range (int \\A) (inc (int \\Z))))) c) acc (clojure.string/join [acc c]))) \"\" %)", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 29, "code": "(fn get-the-caps [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter #(Character/isUpperCase %)))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 29, "code": "#(apply str(clojure.string/split % #\"[!,$#*(& a-z0-9]\"))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 29, "code": "(fn [x]\n(apply str \n (filter\n  #(Character/isUpperCase %)\n   x)\n )\n)", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(>= 90 (int %) 65) s)))", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) \n                                          (seq string))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 29, "code": "(fn tt [w] \n  (apply str (filter #(Character/isUpperCase %) w)))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "user": "54f8aabfe4b01ecee9d8882b"}, {"problem": 29, "code": "(fn [coll]\n  (apply str ((partial filter #(Character/isUpperCase %)) coll)))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 29, "code": "(fn [string] \n  (.replaceAll string \"[^A-Z]\" \"\"))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"\\p{javaUpperCase}\" string)))", "user": "54e4e14ce4b024c67c0cf7f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 29, "code": "(fn e [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "520a796be4b01da9d47a99dc"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 29, "code": "(fn [arg]\n   (let [val (filter #(Character/isUpperCase %) (map #(Character. %) arg))]\n     (reduce str val)))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(and (> 91 (int %)) (> (int %) 64)) x)))", "user": "5406eaf3e4b0addc1aec66ad"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 29, "code": "(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x))                                   \n                     y) \n        ))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 29, "code": "(fn [xs] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") xs)) )", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54534c83e4b0e397800069cd"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 29, "code": "#( apply str ( re-seq #\"[A-Z]\" % ) )", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(contains? (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) %) (seq s))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5500ae84e4b07d26eda61d63"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "54b31445e4b09f271ff37d35"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "550320f8e4b086ebe8a79c68"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 29, "code": "(fn [text]\n  \t(reduce #(str % %2) \"\"\n            (doall (filter #(Character/isUpperCase %) text))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 29, "code": "(fn [chars]\n   (apply str\n     (filter #(Character/isUpperCase %) chars)))", "user": "550309b9e4b086ebe8a79c65"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join\n    (filter \n      (fn [c] \n        (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) s)))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5457e502e4b01be26fd74612"}, {"problem": 29, "code": "(fn [s] (apply str (filter (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (char-array %)))", "user": "546a9599e4b00cfc9eacc15d"}, {"problem": 29, "code": "(fn caps\n  [aseq]\n  (clojure.string/join (re-seq #\"[A-Z]\" aseq)))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 29, "code": "(fn [s] (apply str (map #(when (and (> 91 %) (< 63 %)) (char %)) (.getBytes s))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 29, "code": "(fn [myString] (apply str (filter #(Character/isUpperCase %) myString)))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 29, "code": "(fn [col] (clojure.string/join (filter #(Character/isUpperCase %) col)))", "user": "53ec14b9e4b036ad0777e500"}, {"problem": 29, "code": "(fn [instr] (apply str (filter #(Character/isUpperCase %) instr)))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "550a1224e4b06e50f9beb129"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "549674cde4b0b312c081ff66"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "55096255e4b06e50f9beb116"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5509a9bee4b06e50f9beb11c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5509a176e4b06e50f9beb119"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "542725fce4b01498b1a71b22"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55101237e4b06e50f9beb181"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s))\n  )", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "550f1e51e4b06e50f9beb172"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 29, "code": "(fn check [args]\n   (apply str (filter #(Character/isUpperCase %) args)))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[\\p{javaUpperCase}]+\" %))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5511dfafe4b06e50f9beb19c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 29, "code": "(fn [s]\n  (letfn [(isCap [c]\n            (let [ascii (int c)]\n              (and (>= ascii 65) (<= ascii 90))))]\n    (apply str (filter isCap s))))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5426200ae4b01498b1a71b16"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 29, "code": "(fn [val] (reduce str (re-seq #\"[A-Z]\" val)))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [x]\n                       (and (not (= (.toUpperCase (str x)) (.toLowerCase (str x)))) (= (str x) (.toUpperCase (str x))))) s)))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 29, "code": "(fn get-the-caps-solution\n  [s] ;; update args as needed\n  ;; Write a function which takes a string and returns a new string containing only the capital letters.\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "50c113bee4b096f585049c37"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"\\p{Upper}\" %1))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(and (Character/isLetter %) (Character/isUpperCase %)) s)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55154abce4b055c2f668d4e0"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "55151417e4b055c2f668d4da"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "532018efe4b08068f379edcd"}, {"problem": 29, "code": "(comp #(apply str %) (fn [c] (remove (complement #(Character/isUpperCase %)) c)))", "user": "55164856e4b06a49daca83b3"}, {"problem": 29, "code": "(fn [s]\n   (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "551535cee4b055c2f668d4df"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "551760a5e4b06a49daca83c3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51227e00e4b068a9582e656c"}, {"problem": 29, "code": "(fn [coll]\n  (reduce (fn [a b]\n            (str (when (or (string? a) (java.lang.Character/isUpperCase a)) a)\n                 (when (java.lang.Character/isUpperCase b) b))) coll))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 29, "code": "(fn get-caps [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "5513dec7e4b055c2f668d4cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50f4eee0e4b004d36493052d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 29, "code": "(fn [s]\n  (letfn [(capital? [c]\n            (not (nil? (re-matches #\"[A-Z]{1}\" (str c)))))]\n    (->> s (seq) (filter capital?) (reduce str))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 29, "code": "#(let [m (re-matcher #\"[A-Z]\" %)] (loop [match (re-find m), res []] (if match (recur (re-find m) (conj res match)) (reduce str res) )))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551a64cde4b091ff45eda996"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "551747e0e4b06a49daca83c1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "514f0a28e4b019235f6c059a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z+]\" x)))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54857657e4b0e286459a11ac"}, {"problem": 29, "code": "(fn [s]\n    (let [l (re-seq #\"[A-Z]\" s)]\n      (if (= (count l) 0) nil (reduce #(str % %2) l)\n    )))", "user": "55092319e4b06e50f9beb113"}, {"problem": 29, "code": "(fn [x] (\n  apply str(\n      filter #(Character/isUpperCase %) x\n      )\n  )\n)", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "52f49268e4b05e3f0be25f22"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 29, "code": "(fn only-caps [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "551b329ae4b07993ea3788cf"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(<= 65 (int %) 90) input)))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "551a21ece4b091ff45eda993"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551c66dae4b07993ea3788de"}, {"problem": 29, "code": "(fn [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 29, "code": "(fn [strn] (apply str (filter #( Character/isUpperCase %) strn)))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "550babf3e4b06e50f9beb149"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4e443201535dc968683fc4a7"}, {"problem": 29, "code": "(fn get-caps[s]\n  (apply str (for [c s \n        :when (Character/isUpperCase c)]\n    c))\n  )", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 29, "code": "(fn up [s]\n\t(clojure.string/replace s #\"[^\\p{javaUpperCase}]\" \"\"))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "551c594de4b07993ea3788dc"}, {"problem": 29, "code": "( fn [x] (apply str (re-seq #\"[A-Z]\" x ) ) )", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 29, "code": "(fn onlyCaps [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 29, "code": "(fn [s] \n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 29, "code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "552356fae4b0882d96d091af"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 29, "code": "(fn [astr] (apply str (filter #(Character/isUpperCase %) astr)))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z+]\" string)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 29, "code": "(fn[string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55229495e4b0882d96d091a4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 29, "code": "(fn [s] \n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s))\n)", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)) )", "user": "5523f23ce4b0882d96d091b3"}, {"problem": 29, "code": "(fn [s](apply str (filter #(Character/isUpperCase %) s)))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "552621d0e4b0ffed3738f914"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55244318e4b0882d96d091be"}, {"problem": 29, "code": "(fn [x]\n(apply str (filter #(and (= (str %) (clojure.string/upper-case %)) (not=(clojure.string/upper-case %) (clojure.string/lower-case %))) x ))\n  )", "user": "55252392e4b0882d96d091cc"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "55245232e4b0882d96d091c0"}, {"problem": 29, "code": "(fn capsfilter [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n)", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 29, "code": "(fn [x] (reduce str (#(re-seq #\"[A-Z]\" %1) x)))", "user": "519c5a08e4b0a1d87b00345b"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [x] (re-matches #\"[A-Z]\" x)) (clojure.string/split % #\"\")))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (> %1 64) (< %1 91)) (map int s)))))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 29, "code": "#(clojure.string/join\n  \"\"\n  (re-seq #\"[A-Z]\" %))", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter (fn [c] (and (= (str c) (clojure.string/upper-case c)) (not= (str c) (clojure.string/lower-case c)) ) ) (seq x))))", "user": "5528a8cae4b0ffed3738f940"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int  %) (int  \\A)) (<= (int  %) (int \\Z))) s)))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(let [n (int %)] (and (<= 65 n) (<= n 90))) (map char s))))", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5517331ae4b06a49daca83c0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55253799e4b0882d96d091cf"}, {"problem": 29, "code": "(fn [i-str] (apply str (filter #(Character/isUpperCase %) i-str )))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))", "user": "552a672de4b0ffed3738f954"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 29, "code": "(fn returnCapitals [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55249337e4b0882d96d091c3"}, {"problem": 29, "code": "(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) (seq a))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 29, "code": "#(reduce\n      (fn [acc e] (if (Character/isUpperCase e) (str acc e) (str acc \"\")))\n      \"\" %1)", "user": "550a3fa4e4b06e50f9beb12d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"(?![A-Z]).\" \"\")", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 29, "code": "(fn [s] (apply str \n                (reduce #(if (= %2 (re-find #\"[A-Z]\" %2)) (conj %1 %2) %1) [] \n                        (clojure.string/split s #\"\"))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 29, "code": "(fn[s](apply str (filter #(Character/isUpperCase %) s)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 29, "code": "(fn get-the-caps [s] (apply str (re-seq #\"[A-Z]\" (str s))))", "user": "55231800e4b0882d96d091ad"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 29, "code": "(fn [x] \n\t(reduce (fn [x1 x2]\n\t\t\t(if (re-matches #\"[A-Z]\" (str x2 \"\"))\n             \t(str x1 x2)\n             \tx1\n            )) (str \"\") x))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5521c33ce4b0882d96d0919a"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (<= (int \\A) (int x) (int \\Z))) (seq %)))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "54c46381e4b045293a27f61a"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 29, "code": "(fn [s] \n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)\n  )\n)", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s)))))", "user": "54db48f6e4b024c67c0cf760"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 29, "code": "(fn [lst] (.replaceAll (re-matcher #\"[^A-Z]\" lst) \"\"))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 29, "code": "#(->>% (filter (fn [x] (Character/isUpperCase x))) (apply str))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 29, "code": "(fn getupper\n  [st]\n  (apply str (filter #(Character/isUpperCase %) (seq st))))", "user": "55355397e4b09218d5f44fae"}, {"problem": 29, "code": "(fn [ss] (apply str (filter #(Character/isUpperCase %) ss)))", "user": "5027bbe3e4b01614d1633fef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 29, "code": "(fn [x] \n  (reduce str (filter #(Character/isUpperCase %)  x)))", "user": "55278187e4b0ffed3738f92d"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55377460e4b09218d5f44fc9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "52c03baee4b07a9af5792347"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 29, "code": "(fn cap [x] \n\t(if (empty? x) \"\" \t\n  (if \n      (< -1 (.indexOf (seq \"ABCDEFGHIJKLMNOPQRSTUVMWXYZ\") (first x)) )\n      (apply str (first x) (cap (rest x)))\n      (cap (rest x))\n    )\n      )\n)", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "553b87abe4b09218d5f45003"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 29, "code": "(fn [lst] \n  (apply str (filter #(Character/isUpperCase %) lst)))", "user": "55022275e4b07d26eda61d81"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) (seq s))))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 29, "code": "(fn [s] (apply \n         str (filter #(Character/isUpperCase %) s)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 29, "code": "(fn [s]\n  (apply\n   str\n   (filter #(<= 65 (int %) 90) s)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 29, "code": "(fn [v] (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) v)))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55395241e4b09218d5f44fe8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52ea764ee4b09f7907dd14be"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) (seq word))))", "user": "5537b2a1e4b09218d5f44fcd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54c944b1e4b045293a27f666"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "553c4614e4b09218d5f45014"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55381162e4b09218d5f44fda"}, {"problem": 29, "code": "(fn [arg] (apply str (filter #(java.lang.Character/isUpperCase %) arg)))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 29, "code": "(fn [s] (->> (filter #(Character/isUpperCase %) s) (apply str)))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) x\n                  )) %))", "user": "5543553fe4b0a04f79299523"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 29, "code": "; Orig (fn [s] (apply str (concat (re-seq #\"[A-Z]+\" s))))\n; Learned from austintaylor that concat wasn't needed.\n; As usual, _pcl's solution is so nicely simple.\n(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 29, "code": "(fn cap\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 29, "code": "(fn [word]\n  (reduce str (filter #(Character/isUpperCase %) word)))", "user": "54add0a3e4b09f271ff37ce7"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (filter #(and (= (clojure.string/capitalize %) (str %))\n                       (not= (clojure.string/lower-case %) (str %))) \n                 s)))", "user": "5545eebee4b0a04f79299539"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5546704be4b0a04f7929953d"}, {"problem": 29, "code": "(fn find-upper [myString]\n  (apply str (filter #(Character/isUpperCase %) myString))\n)", "user": "5545f713e4b0a04f7929953a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55483088e4b0a04f79299556"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "54980edae4b0b312c081ff79"}, {"problem": 29, "code": "(fn caps\n\t[string]\n\t\t(apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 29, "code": "(fn f [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5548c46be4b0a04f79299560"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53737e6ce4b06d7f452d9e13"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55495318e4b0a04f79299566"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "554884d4e4b0a04f7929955c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "554707bae4b0a04f79299544"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 29, "code": "(fn [coll] \n  (apply str (remove #(= % \n                   (first (clojure.string/lower-case %)))\n               coll)))", "user": "554c0adde4b0a04f7929959e"}, {"problem": 29, "code": "(fn [i]\n  (reduce str (re-seq #\"[A-Z]\" i)))", "user": "554bc026e4b0a04f79299597"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "554b8572e4b0a04f79299589"}, {"problem": 29, "code": "(fn[a](apply str (filter #(Character/isUpperCase %) a)))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "554dff83e4b00713264bd98d"}, {"problem": 29, "code": "(fn filter-cap [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "554b7056e4b0a04f79299583"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "554d48d3e4b00713264bd988"}, {"problem": 29, "code": ";;(fn [s] (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) s)))\n\n#(apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) %))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 29, "code": "(fn [string] (reduce str (re-seq #\"[A-Z]\" string)))", "user": "554a270fe4b0a04f79299570"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5547793be4b0a04f7929954c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 29, "code": "(fn [x] (apply str ((fn [s] (filter #(Character/isUpperCase %) s)) x)))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 29, "code": "(fn [x] \n    (apply str \n     (filter #(Character/isUpperCase %) x)\n     ))", "user": "554b2151e4b0a04f79299580"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "554edb85e4b00713264bd99a"}, {"problem": 29, "code": "(fn [s]\n         (apply str\n                (filter #(and (>= (int %) (int \\A))\n                              (<= (int %) (int \\Z))) s)))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 29, "code": "(fn [string]\n\t(clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5550eda2e4b00713264bd9b4"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 29, "code": "(fn [text] (clojure.string/join \"\" (filter #(Character/isUpperCase %) text)))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "4dad88abc9a9d6ed1199dc57"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5552b617e4b0deb715856df8"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "5550dec6e4b00713264bd9b2"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5553b924e4b0deb715856e06"}, {"problem": 29, "code": "(fn [x] (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]+\" x )))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 29, "code": "(fn [s]\n   (apply str (re-seq #\"[A-Z]\" s)))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 29, "code": "(fn\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "554b425ce4b0a04f79299581"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (filter #(and \n                    (>= (int %) 65) \n                    (<= (int %) 90)) \n                 s)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "554bced1e4b0a04f79299599"}, {"problem": 29, "code": "(fn ff [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "555521a5e4b0deb715856e12"}, {"problem": 29, "code": "(fn[x](apply str (filter #(Character/isUpperCase %) x)))", "user": "55429859e4b0a04f7929951f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 29, "code": "(fn caps-only [text]\n  (apply str (re-seq #\"[A-Z]*\" text)))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 29, "code": "(fn keep-caps [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 29, "code": "#(apply str (filter (fn[input](Character/isUpperCase input)) (seq %)))", "user": "553093bee4b076ab5578f817"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]+\")\n       (clojure.string/join \"\")))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "553638bae4b09218d5f44fba"}, {"problem": 29, "code": "(fn [st] (apply str (filter (fn [ch] (some #(= ch %) [\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z])) (char-array st))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 29, "code": "(fn [theString] (reduce str (filter #(Character/isUpperCase %) theString)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "555ac933e4b0deb715856e49"}, {"problem": 29, "code": "(fn [s] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55155400e4b055c2f668d4e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 29, "code": "(fn upper [string]\n  (reduce str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (seq string))))", "user": "550b4ea2e4b06e50f9beb13e"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "555287a4e4b0deb715856df5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 29, "code": "(fn [seq]\r\n  (apply str (filter #(<= 0 (compare \\Z %) 25) seq)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 29, "code": "(fn [cs]\n  (apply str (filter #(Character/isUpperCase %) cs)))", "user": "527282f5e4b03e8d9a4a743a"}, {"problem": 29, "code": "(fn [x](apply str (filter #(Character/isUpperCase %) x)))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 29, "code": "(fn[a-string] (apply str (re-seq #\"[A-Z]\" a-string)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 29, "code": "(fn[v](apply str(filter #(re-matches #\"[A-Z]\" (str %)) (seq v))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55586905e4b0deb715856e2b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "555c78abe4b0b056612e224f"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55556737e4b0deb715856e15"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5315d4bfe4b08068f379ed37"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 29, "code": "(fn [input] (let \n              [caps \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n              (apply str (filter #(.contains caps (str %)) input))\n              ))", "user": "555f728de4b0a2eb076a39c8"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5560f39ce4b0c656e3ff17c2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 29, "code": "(fn\n  [text]\n  (clojure.string/join\n    (remove\n     (fn [x]\n       (= (str x) (clojure.string/lower-case x))\n     )\n     text)\n  )\n)", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "555fe8dae4b0c656e3ff17bd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 29, "code": "(fn caps [l] \n  (apply str (filter #(Character/isUpperCase %) l)))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 29, "code": "#(loop [c 0 \n           a \"\"]\n     (if (>= c (count %))\n       a \n      (recur \n       (inc c) \n       (str \n        a \n        (if (and \n             (<= 65 (int (get % c))) \n             (>= 90 (int (get % c)))) \n          (get % c) \"\")\n        ))\n    ))", "user": "55484800e4b0a04f79299558"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join\n   (reduce (fn [ret c]\n             (if (Character/isUpperCase c)\n               (conj ret c)\n               ret))\n           []\n           string)))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 29, "code": "#(apply str (filter (fn [d] (Character/isUpperCase d)) %))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 29, "code": "(fn [string] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) string)))", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 29, "code": "#(clojure.string/join \"\" ( map char ( filter (fn [x] (cond (>= x 65) (<= x 90))) (map int %))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 29, "code": "(fn [word ] (clojure.string/join (for [c word :when (and (char? c) (Character/isUpperCase c))] c)))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53b0765ae4b047364c044484"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "554756b8e4b0a04f79299549"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 29, "code": "#( ->>\n  (re-seq #\"[A-Z]+\" % )\n  (apply str)\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 29, "code": "(fn [w] (apply str (re-seq #\"[A-Z]+\" w)))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 29, "code": "(fn\n [x]\n    (apply str(filter #(and (>= (int %) 65) (<= (int %) 90)) x)))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 29, "code": "#(reduce str (filter (comp (partial re-matches #\"[A-Z]\") str) %))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 29, "code": "(fn [s]\n  (apply str  \n  (keep\n   #(if (< 64 (int %) 91) %) s)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 29, "code": "(fn d [sss] str(clojure.string/join  (filter #(and (Character/isLetter %) (= (clojure.string/upper-case (str %)) (str %))) (seq sss))))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 29, "code": "(fn cap-string [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]+\" %))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 29, "code": "(fn [someseq]\n    (apply str (filter #(Character/isUpperCase %) someseq)))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5558cd6ae4b0deb715856e2f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 29, "code": "(fn fil[x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 29, "code": "(fn uppers-only [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 29, "code": "(fn cap [list]\n\t(apply str(filter #(Character/isUpperCase %) list)))", "user": "556be3dce4b09a3098a524f7"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "4eda77c0535d10e5ff6f530d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "556cd549e4b09a3098a52503"}, {"problem": 29, "code": "(fn [x] (apply str(re-seq #\"[A-Z]\" x)))", "user": "556dd141e4b09a3098a52509"}, {"problem": 29, "code": "(fn [in](apply str (filter #(Character/isUpperCase %) in)))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 29, "code": "(fn apaini [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "556f443be4b09a3098a5251e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %1) s)))", "user": "55702247e4b09a3098a5252a"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) %))", "user": "55702081e4b09a3098a52529"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 29, "code": "#(reduce\n   (fn [acc it]\n     (let [str* (str it)]\n       (if (re-matches #\"[A-Z]\" str*)\n         (str acc str*)\n         acc)))\n   nil\n   %)", "user": "53b05a75e4b047364c044482"}, {"problem": 29, "code": "(fn [s] (apply str (map #(if (and (= %1 %2) (not= %2 %3)) %1) s (.toUpperCase s) (.toLowerCase s))))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "556a3243e4b09a3098a524de"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5189bf9ee4b0288ada3dbdaf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))\n;\n;(fn [x] (apply str (filter #(some #{(int %)} (range 65 91)) x)))\n;\n;(fn[s](apply str (filter #(let [i (int %)] (and (> i 64) (< i 91)))s)))\n;\n; #(loop [matcher (re-matcher #\"[A-Z]+\" %) acc \"\"] \n;             (if-let [s (re-find matcher)]\n;                 (recur matcher (str acc s))\n;                 acc))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "555176e5e4b0deb715856deb"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]+\" %))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 29, "code": "#(apply str (for [x % :when (Character/isUpperCase x)] x))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "53065acbe4b02e8216869792"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "556f3b1ce4b09a3098a5251c"}, {"problem": 29, "code": "(fn [x] (apply str (apply str (filter (comp not empty?) (re-seq #\"[A-Z]*\" x)))))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 29, "code": "(fn sm-uc [x]\n(apply str (re-seq #\"[A-Z]\" x))\n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 29, "code": "; (fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %)x)) )", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [param] (Character/isUpperCase param)) %))", "user": "5551bddae4b0deb715856def"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "55757e81e4b05c286339e063"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5253de67e4b0541d1855b939"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4f74fed2e4b0fbe0118ec553"}, {"problem": 29, "code": "(fn capitals [MyString] \n  (apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                     (seq MyString))))", "user": "55769940e4b05c286339e070"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "557954aae4b05c286339e092"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 29, "code": "(fn [s]  (reduce str (re-seq #\"[A-Z]+\" s)))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 29, "code": "(fn f [p] (apply str (filter #(Character/isUpperCase %) (seq p))))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "557cf48be4b05c286339e0ca"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54c779bee4b045293a27f63b"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 29, "code": "(fn cap-getter\n  ([string] (cap-getter string \"\") )\n  ([string newString] \n   (if (empty? string)\n     newString\n     (cap-getter (rest string) (if (re-matches #\"[A-Z]\" (str (first string)))\n                                 (str newString (first string))\n                                 newString\n                                 ) \n                 )\n     ) \n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 29, "code": "(fn [merde] (->> merde (re-seq #\"[A-Z]\")(reduce str)))", "user": "556f2009e4b09a3098a52519"}, {"problem": 29, "code": "(fn [string]\n  (import java.lang.Character)\n  (apply str (filter #(Character/isUpperCase %) (seq string)))\n)", "user": "5576fee3e4b05c286339e078"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 29, "code": "(fn\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 29, "code": "(fn [input]\n  (clojure.string/replace input #\"[a-z]|\\W|\\d\" \"\"))", "user": "54570dfae4b080a794c2c889"}, {"problem": 29, "code": "(fn strToList [s] (apply str (for [i (range 0 (count s))](let [z (.charAt s i)] (if (Character/isUpperCase z) z nil)))))", "user": "5576e78de4b05c286339e075"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 29, "code": "(fn filt-uc\n  [lst]\n  (apply str (filter (fn [chr] (and (< 61 (int chr)) (< (int chr) 91))) lst)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5576f299e4b05c286339e077"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^\\p{Upper}]\" \"\"))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) s)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5037534de4b0af0658af77aa"}, {"problem": 29, "code": "(fn getCaps\n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter (fn [x] (< 64 (int x) 91)) s)))", "user": "554c5affe4b0a04f792995a3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5553b729e4b0deb715856e05"}, {"problem": 29, "code": "(fn[v] (apply str (filter #(Character/isUpperCase %) (seq v))))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55842c7ee4b05c286339e11d"}, {"problem": 29, "code": "(fn fil[x] (apply str(filter #(Character/isUpperCase %) x)))", "user": "558378dce4b05c286339e115"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not= % (.toLowerCase %)) (map str (seq s)))))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "558306dfe4b05c286339e110"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5583bd81e4b05c286339e118"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50ec409ce4b04edc33777045"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (Character/isUpperCase x)) string)))", "user": "55807091e4b05c286339e0eb"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]*\" s)))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 29, "code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 29, "code": "(fn upper [n]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      n)))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(< 64 (int %) 91) s)))", "user": "55895eade4b059ccff29b202"}, {"problem": 29, "code": "(fn findupper [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "558466fce4b04192f3441eee"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 29, "code": "(fn [x] (reduce str \n                (re-seq #\"[A-Z]\" x)))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5589e88ae4b0277789237610"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "5576006ae4b05c286339e068"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "558aabbfe4b0277789237621"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "558a81fbe4b027778923761c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558bb38fe4b0277789237631"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "4f4391a9e4b0d7d3c9f3fd23"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558d43f1e4b0277789237640"}, {"problem": 29, "code": "(fn my-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]+\" x)))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "558df2ebe4b0277789237649"}, {"problem": 29, "code": "(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) (flatten (partition 1 string)))))", "user": "5589a735e4b059ccff29b206"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "558b50d5e4b027778923762b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558ed227e4b0277789237658"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 29, "code": "(fn [input-str]\n  (apply str (re-seq #\"[A-Z]+\" input-str)))", "user": "55860905e4b001b0851d7516"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]{1}\" %))", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 29, "code": "(fn capitalwords [string]\n  (apply str \n         (filter (fn [c] (Character/isUpperCase c) ) string)))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5590e461e4b0277789237675"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "user": "5590e55de4b0277789237676"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "559057c4e4b027778923766e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (map (fn [x y] (if (not (= x y)) y \"\")) (clojure.string/lower-case x) x)))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 29, "code": "(fn [hilera]\n  (letfn [(upcase? [h] (Character/isUpperCase h))]\n    ( apply str (filter upcase? \n                        (seq hilera)))))", "user": "54530382e4b0e397800069cc"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 29, "code": "#(apply str (clojure.string/split % #\"[^A-Z]\"))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "558bdcefe4b0277789237633"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "558d7dd3e4b0277789237647"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55920e24e4b0604b3f94d587"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "558f4fbae4b0277789237661"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n    (filter #(Character/isUpperCase %) string)))", "user": "55815973e4b05c286339e0f6"}, {"problem": 29, "code": "(fn [str1] (clojure.string/join  (filter #(Character/isUpperCase %) str1)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 29, "code": "(fn [s]\n   (apply str (re-seq #\"[A-Z]\" s)))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5590ebb1e4b0277789237677"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x)(int \\Z)) )) %) )", "user": "55913b57e4b0604b3f94d575"}, {"problem": 29, "code": "(fn del [x] (clojure.string/replace x #\"[qwertyuiopasdfghjklzxcvbnm,!$#*1234567890(& ]\" \"\") )", "user": "557e8326e4b05c286339e0d7"}, {"problem": 29, "code": "(fn [x] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int (reverse (into '() x)))))))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 29, "code": "(fn[s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 29, "code": "#(clojure.string/join \"\"  \n  (filter\n    (fn [string]\n      (Character/isUpperCase string)\n    ) \n  %)\n)", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq st)))))", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 29, "code": "#(reduce (fn [acc, cur] (if (Character/isUpperCase cur) (str acc cur) acc)) \"\" (seq %))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5585f088e4b001b0851d7513"}, {"problem": 29, "code": "(fn [coll](apply str (filter #(Character/isUpperCase %) coll)))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "548c6673e4b0e286459a1209"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 29, "code": "(fn [v] (apply str (filter #(Character/isUpperCase %) (seq v))))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "557819dce4b05c286339e088"}, {"problem": 29, "code": "(fn upper [x] \n   (clojure.string/replace \n   (clojure.string/join\n   (if (empty? (rest x))\n    (if (= (clojure.string/upper-case (first x)) (str (first x)))\n      (cons (first x) (rest x))\n    ) \n    (if (= (clojure.string/upper-case (first x)) (str (first x)))\n      (cons (first x) (upper (rest x)))\n      (upper (rest x))\n    ))) #\"[^A-Za-z]+\" \"\"))", "user": "5400e918e4b0de5c41848619"}, {"problem": 29, "code": "(fn caps [xs] (apply str (filter #(<= 65 (int %) 90) xs)))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)) seq)", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 29, "code": "(fn only-upper [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 29, "code": "(fn get-caps [string]\n  (->> string\n       (re-seq #\"[A-Z]+\")\n       (clojure.string/join)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5583888ae4b05c286339e117"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55996253e4b031d6649c9baa"}, {"problem": 29, "code": "(fn [x] \n  (clojure.string/join (filter #(and (not= (str %) (clojure.string/lower-case (str %))) (= (str %) (clojure.string/upper-case (str %)))) (seq x)))\n)", "user": "558fec41e4b0277789237666"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))", "user": "54117417e4b01498b1a719c5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s))) ; http://www.4clojure.com/problem/29#prob-title Get the Caps", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 29, "code": "(fn [string] \n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "55921c21e4b0604b3f94d588"}, {"problem": 29, "code": "(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (re-matches #\"[A-Z]\" (str c)))\n    s)))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 29, "code": "#(apply str (filter (fn [character] (<= 65 (int character) 91)) %))", "user": "559ce276e4b0ec2b359424d7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 29, "code": "#(apply str (remove (fn [x] (not (Character/isUpperCase x))) %))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) (seq s))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 29, "code": "(fn [input] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %)) input)))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 29, "code": "reduce (fn [w c]\n          (cond\n            (Character/isUpperCase c) (str w c)\n            :else w)) \"\"", "user": "559f06bae4b0acc240e314e6"}, {"problem": 29, "code": "(fn [asdf] (apply str (filter #(re-find #\"[A-Z]\" (str %)) asdf)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "559d6288e4b0ec2b359424dc"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "55a09645e4b0acc240e314fe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 29, "code": "#(clojure.string/join (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "524d91eae4b0a16e35cf6dee"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [f] (Character/isUpperCase f) ) s)))", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (vec s))))", "user": "55a31c66e4b0acc240e31530"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "559a8816e4b066d22e731f41"}, {"problem": 29, "code": "(fn [x]\n (apply str (filter #(true? (Character/isUpperCase %)) x)) )", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 29, "code": "(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 29, "code": "(fn just-capital [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55a3ca84e4b0acc240e3153c"}, {"problem": 29, "code": "(fn [s]\n  (let [caps (into #{} (map char (range (int \\A) (inc (int \\Z)) )))]\n    (apply str (filter #(caps %) (char-array s)))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 29, "code": "(fn [input]\n\t(->> input\n\t\t(filter #(contains? (set (range 65 91)) (int %)))\n\t\t(clojure.string/join)))", "user": "531dc21be4b08068f379edb1"}, {"problem": 29, "code": "(fn [s] \n  (let [split #(clojure.string/split % #\"\")\n        is-letter? #(not (nil? (re-matches #\"[A-Z]\" %)))\n        is-capitalized? #(= (clojure.string/upper-case %) %)]\n    (->> s split (filter is-letter?) (filter is-capitalized?) (reduce str))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 29, "code": "#(apply str (filter (fn [x] \n                (and (<= 65 (int x)) (>= 90 (int x))))\n                (seq %)))", "user": "5574c172e4b05c286339e059"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "559eb160e4b0acc240e314e1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "559c4236e4b066d22e731f67"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55496eeae4b0a04f79299569"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]*\" s)))", "user": "52df1d62e4b09f7907dd13fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter  #(Character/isUpperCase %)))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n;; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 29, "code": "#(clojure.string/replace(clojure.string/replace % #\"[^a-zA-Z]\" \"\") #\"[a-z]{0,}+\" \"\")", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str(filter #(Character/isUpperCase %) s)))", "user": "55a7e096e4b0988bba2ad934"}, {"problem": 29, "code": "#(apply str (clojure.string/split % #\"[^A-Z]*\"))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (and (<= (int x) (int \\Z)) (>= (int x) (int \\A)))) (seq %)))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "52b666bfe4b0c58976d9ad44"}, {"problem": 29, "code": "(fn [the-string]\n  (apply str (filter #(Character/isUpperCase %) (seq the-string))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\"%))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55a0a278e4b0acc240e314ff"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 29, "code": "(fn upper \n  [string]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) string)))", "user": "55acd080e4b03311e7b73298"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55ae7adae4b03311e7b732bd"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 29, "code": "(fn [x] (->> x (filter #(Character/isUpperCase %)) (apply str)))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 29, "code": "(fn re-str1 [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s))\n)", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 29, "code": "#(loop [res [] ens (into [] %) cnt 0]\n   (if (= cnt (count ens))\n     (apply str res)\n     (if (and (Character/isLetter (first ens)) (= (clojure.string/upper-case (str (first ens))) (str (first ens))))\n       (recur (conj res (first ens)) (rest ens) (int cnt))\n       (recur  res (rest ens) (int cnt))\n     )\n   )\n)", "user": "55acb648e4b03311e7b73296"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 29, "code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [l] (re-matches #\"[A-Z]\" l)) (clojure.string/split % #\"\")))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 29, "code": "#(apply str(re-seq\t#\"[A-Z]+\"\t%))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 29, "code": "(fn [string](apply str (map char (let [bytes-array (.getBytes string)]\n  (filter #(< % 91) (filter #(> % 64) (map int bytes-array)))))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 29, "code": "(fn [x]\n  (let [cap? (fn [c] (and (>= (int c) 65) (<= (int c) 90)))]\n    (apply str (filter cap? x))))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 29, "code": "(fn [ss](\n           apply str \n           (filterv #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %)\n                    ss)))", "user": "55aba8f4e4b03311e7b7328c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "557f748ae4b05c286339e0df"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 29, "code": "(fn ff [s]\n  (apply str\n \t(filter \n     \t(fn [s]\n          (some #{s}  (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") )\n        )\n \t (seq s)\n\t)\n  )\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 29, "code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 29, "code": "(fn [word] \n  (apply str\n   (filter #(Character/isUpperCase %) word)))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (apply list s))))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not (= (str %) (clojure.string/lower-case (str %)))) s)))", "user": "55b64ef1e4b01b9910ae2994"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 29, "code": "(fn [s] \n    (loop [ret \"\" r s]\n        (if (seq r)\n            (if (re-matches #\"[A-Z]\" (str (first r)))\n                (recur (str ret (first r)) (rest r))\n                (recur ret (rest r)))\n            ret)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (java.lang.Character/isUpperCase s)) (seq %)))", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55b60518e4b01b9910ae298e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (or (<= (int \\A) (int c) (int \\Z)))) %))", "user": "55b4c339e4b01b9910ae297f"}, {"problem": 29, "code": "#(apply str (filter (fn [ch] (Character/isUpperCase ch)) %))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 29, "code": ";(fn [s]\n;\t(apply str (filter #(Character/isUpperCase %1) s)))\n#(apply str (re-seq #\"[A-Z]\" %1))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 29, "code": "(fn get-capitals [word]\n  (reduce str (re-seq #\"[A-Z]\" word)))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 29, "code": "(fn [s] (apply str (map #(re-find #\"[A-Z]\" (.toString %)) s)))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 29, "code": "(fn justUppr[string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))\n\n; '/\\p{Lu}/u'", "user": "55b7ca4ae4b01b9910ae29b1"}, {"problem": 29, "code": "(fn [ch] (apply str (re-seq #\"[A-Z]\" ch)))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4f2861eee4b0d6649770a017"}, {"problem": 29, "code": "(fn [phrase]\n  (apply str\n  \t(filter (fn [ch] (not= (clojure.string/lower-case ch)\n                      (str ch)))\n          phrase\n          )\n  )\n)", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b705fce4b01b9910ae29a0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )", "user": "55bbb28be4b01b9910ae29ea"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") s)))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 29, "code": "(fn [x] (apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNMZ\") x)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55bad3eae4b01b9910ae29df"}, {"problem": 29, "code": "(fn my-caps\n  [s]\n  (cond\n    (empty? s) \"\"\n    (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str (first s))) (str (first s) (my-caps (rest s)))\n    :else (my-caps (rest s))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 29, "code": "(fn [ori-str]\n  (reduce str (filter #(re-matches #\"[A-Z]\" %) (clojure.string/split ori-str #\"\"))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 29, "code": "(comp (partial apply str)\n      (partial re-seq #\"[A-Z]\"))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "557775a3e4b05c286339e084"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55bc52f9e4b01b9910ae29f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n;#(apply str (for [x (seq %) :when (Character/isUpperCase x)] x ))", "user": "550eca99e4b06e50f9beb16b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 29, "code": "#(apply str\n        (re-seq #\"[A-Z]\" %))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 29, "code": "(fn upperCase\n  [string]\n  \"Returns a string containing only the uppercase characters\n  of the given string.\"\n  (apply str (filter (fn\n            onlyUppercase\n            [character]\n            (if (#(and (> % 64) (< % 91)) (int character))\n              character\n              nil)) string)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]?\" %))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 29, "code": "(fn [word]\n  (reduce str (filter #(Character/isUpperCase %) (seq word))))", "user": "55304523e4b076ab5578f810"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "55c251c0e4b0e31453f64979"}, {"problem": 29, "code": "(fn get-the-caps [c] (apply str (map char (filter #(and (< %1 97) (> %1 64)) (map int c)))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55c37594e4b0e31453f64989"}, {"problem": 29, "code": "(fn [x]\n  (apply \n    str \n    (re-seq #\"[A-Z]\" x)\n    )\n  )", "user": "55c3149de4b0e31453f64987"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "user": "55bb3f89e4b01b9910ae29e2"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (clojure.string/join\n    (filter\n      (fn [c]\n        (and\n          (not= (clojure.string/upper-case c) (clojure.string/lower-case c))\n          (= (clojure.string/upper-case c) (str c))\n          )\n        )\n      s\n      )\n    )\n\n  )", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55c66d3de4b0e31453f649c1"}, {"problem": 29, "code": "(fn [s] (apply str \n           (filter #(some (partial = %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n           s)))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 29, "code": "(fn [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 29, "code": "(fn [input]\n\t(apply str (filter #(Character/isUpperCase %) input)))", "user": "54e3e09fe4b024c67c0cf7e4"}, {"problem": 29, "code": "(fn [s] (apply str (filter\n                      (fn [c]\n                        (<= (int \\A) (int c) (int \\Z)))\n                      s)))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 29, "code": "(fn [string-cheese] (clojure.string/replace string-cheese #\"[a-z\\W0-9]\" \"\"))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 29, "code": "(fn capsinside [word]\n  (reduce str (re-seq #\"[A-Z]+\" word))\n  )", "user": "55c461d3e4b0e31453f64999"}, {"problem": 29, "code": "(fn [s] (apply \n         str (filter #(Character/isUpperCase %1) s)))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (into [] x))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 29, "code": "#(clojure.string/join \"\"\n                     (clojure.string/split %1 #\"[^A-Z]\"))", "user": "5586b707e4b059ccff29b1d6"}, {"problem": 29, "code": "(fn [inputStr] (clojure.string/replace inputStr #\"[^A-Z]\" \"\"))", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 29, "code": "(fn [in] (apply str (filter #(Character/isUpperCase %) in)))", "user": "54010363e4b0de5c4184861d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\"  %))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 29, "code": "(fn [s]\r\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55a65872e4b09e57187da299"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4eb171d7535d7eef30807340"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5446158ce4b032a45b8693a6"}, {"problem": 29, "code": "(fn caps [s] (apply str (re-seq  #\"[A-Z]\" s)))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c) ) %))", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 29, "code": "#(->> %1\n      (re-seq #\"[A-Z]\")\n      (apply str))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55a28acde4b0acc240e31524"}, {"problem": 29, "code": "(fn [input] (apply str (filter\n                  #(Character/isUpperCase %)\n                   (seq input))))", "user": "55d0a3c4e4b0e31453f64a3e"}, {"problem": 29, "code": "(fn [ring] \n  (apply str (filter #(.contains \"ABCDEFGHIJKLMNOPQRSTUVQWXYZ\" (str %1)) ring))\n)", "user": "55c7c4dfe4b0e31453f649d7"}, {"problem": 29, "code": "(fn [string]\n  (reduce str (re-seq #\"[A-Z]\" string)))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 29, "code": "(fn get-upper\n  [string]\n  (apply str (filter #(let [x (int %)]\n                       (and (>= x (int \\A))\n                            (<= x (int \\Z)))) string)))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 29, "code": "(comp (partial apply str)\n      (partial re-seq #\"[A-Z]\"))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 29, "code": "(fn [x] (apply str (remove #(not (Character/isUpperCase %)) x)))", "user": "55cae949e4b0e31453f649fe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 29, "code": "(fn [x]\n    (apply str (re-seq #\"[A-Z]\" x)))", "user": "559067ace4b0277789237670"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55a4047ce4b0acc240e31541"}, {"problem": 29, "code": "#(-> (re-seq #\"[A-Z]\" %) clojure.string/join)", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 29, "code": ";(fn [s]\n;   (apply str (filter #(Character/isUpperCase %) s)))\n;(fn [s]\n;   (apply str (filter\n;                (fn [a]\n;                 (Character/isUpperCase a))\n; s)))\n(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\"\n                 s)))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1) )", "user": "5589a941e4b059ccff29b207"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 29, "code": ";(fn [l]\n;  (apply str\n;         (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))         \n;              l)))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55773cbae4b05c286339e07f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "54864662e4b0e286459a11b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and ( >= (compare %1 \\A) 0) (<= (compare %1 \\Z ) 0)) (seq s))))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\", s)))", "user": "4e72a717535d5021c1a89665"}, {"problem": 29, "code": "(fn [string]\n\t(apply str (filter #(Character/isUpperCase %) string)))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 29, "code": "(fn [s] \n    (apply str\n           (filter \n            #(and \n              (> (int %) 64)\n              (< (int %) 91))\n            (char-array s))))", "user": "5549394fe4b0a04f79299565"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (not (nil? (#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} c)))) %))", "user": "55d7d139e4b0e31453f64aaa"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 29, "code": "(fn [coll] \n  (apply str (re-seq (re-pattern \"[A-Z]\") coll)))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 29, "code": "(fn [my-string] (clojure.string/join (filter #(Character/isUpperCase %1) (seq my-string))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "553c136ae4b09218d5f45012"}, {"problem": 29, "code": "(fn [str]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) (vec str))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 29, "code": "(fn get-caps [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "55db03c6e4b0e31453f64adf"}, {"problem": 29, "code": "(fn [sentence] (apply str (filter #(Character/isUpperCase %) sentence)))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55bd6734e4b01b9910ae29fd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d84919e4b0e31453f64ab0"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55ba3666e4b01b9910ae29cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54722c55e4b094393f72dd74"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 29, "code": "#(->> % (filter (fn [x] (Character/isUpperCase x))) (apply str))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %)  s)))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (keep #(if (and (>= (int %) 65) (<= (int %) 90)) %) s))\n  )", "user": "54145050e4b01498b1a719ea"}, {"problem": 29, "code": "(fn\n          [s]\n          (reduce str\n            (re-seq #\"[A-Z]\" s)))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 29, "code": "(fn [s]\n  (->> \n   s\n   (map int)\n   (remove #(> % 90))\n   (remove #(< % 65))\n   (map char)\n   (apply str)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "55deeface4b050e68259b3ea"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (filter  #(Character/isUpperCase %) x)))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 29, "code": "#(reduce (fn [l x] (if (Character/isUpperCase x) (str l x) l)) \"\" %)", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(-> (re-matches #\"[A-Z]\" (str %1)) nil? not) x)))", "user": "55e246c2e4b050e68259b431"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55e26417e4b050e68259b433"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "55e3479be4b050e68259b441"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (map (fn [x] (re-matches  #\"[A-Z]\" x)) (map str (seq s)))))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 29, "code": "(fn [xs ] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 29, "code": "#(reduce str (re-seq  #\"\\p{Upper}\" %))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "52dc55e2e4b09f7907dd13cd"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54c94376e4b045293a27f665"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55e2f502e4b050e68259b43c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55a68518e4b09e57187da29b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"\\p{Upper}+\" %))", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 29, "code": "(fn \n  [string]\n  (apply str \n         (re-seq #\"[A-Z]+\" string)))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 29, "code": "(fn caps_only [l]\n  (clojure.string/join\n   (filter #(not= (clojure.string/lower-case (str %)) (str %))\n           l)))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55e7d06ee4b050e68259b496"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55e70e8de4b050e68259b490"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 29, "code": "(fn f\n  ([s]\n   (apply str (reverse (f s []))))\n  ([s l]\n   (if (empty? s)\n     l\n     (if (nil? (get #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} (first s)))\n       (f (rest s) l)\n       (f (rest s) (cons (first s) l))))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 29, "code": "(fn [args] (clojure.string/join (re-seq #\"[A-Z]\" args)))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "53959edde4b0b51d73faaed8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"([^A-Z])\" \"\")", "user": "55e558e3e4b050e68259b46b"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (keep #(re-find #\"[A-Z]\" (str %)))\n       (apply str)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55e4769ce4b050e68259b452"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "55d68726e4b0e31453f64a99"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 29, "code": "(partial (comp clojure.string/join re-seq) #\"[A-Z]+\")", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %) )", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 29, "code": "#(apply str(filter (fn [c] (<= (int \\A) (int c) (int \\Z))) (seq %)))", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 29, "code": "(fn [string]\n   (apply str (filter #(Character/isUpperCase %) string)))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 29, "code": "(fn [x]\n  \t(apply str (filter #(Character/isUpperCase %) x)))", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s) )\n    )", "user": "55e9842ae4b0121d4835fda1"}, {"problem": 29, "code": "(fn [chars] (apply str (filter #(Character/isUpperCase %) chars)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 29, "code": "(fn [word]\n  (apply str (filter #(Character/isUpperCase %) (vec word))))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5390347de4b0b51d73faae96"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]\" %))", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 29, "code": "(fn [s] (->> (filter #(. Character isUpperCase %) s) (apply str)))", "user": "51319a53e4b06942423563c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 29, "code": "#( reduce str (filter (fn[a] (Character/isUpperCase a)) %))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 29, "code": "#(apply str (concat (re-seq #\"[A-Z]+\" %)))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 29, "code": "(fn caps [strng]\n  (apply str\n         (for [^char ch strng :when (Character/isUpperCase ch)]\n           ch\n           ))\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 29, "code": "(fn [s] (apply str (filter (comp #(and (> % 64) (< % 91)) int) (seq s))))", "user": "52475451e4b05ef8e38e6362"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "55912230e4b027778923767a"}, {"problem": 29, "code": "(fn [arr] (reduce str (filter #(and (>= (int %) 65) (<= (int %) 90)) arr)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "55f5625de4b06e875b46ce86"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (clojure.string/join \"\") )", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 29, "code": "(fn uppy [string]\n(apply str (re-seq #\"[A-Z]\" string)))", "user": "55a161d1e4b0acc240e31511"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 29, "code": "#(apply str (for [x %1 :when(java.lang.Character/isUpperCase x)] x))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 29, "code": "(fn uppersOnly [val] ( apply str (filter #(and (<= 0 (compare \\Z % )) (>= 0 (compare \\A %))) val)))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55a122d9e4b0acc240e3150a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55e5c852e4b050e68259b474"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 29, "code": "(fn[sss](apply str (filter #(Character/isUpperCase %) sss)))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "55e59b67e4b050e68259b46f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558ee1c9e4b0277789237659"}, {"problem": 29, "code": "(fn[s] (apply str (filter (fn [x] (some #(= x %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))  s)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) s)))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 29, "code": "(fn ([s] (apply str (filter #(Character/isUpperCase %) (seq s)))))", "user": "55ef12cfe4b0121d4835fdfc"}, {"problem": 29, "code": "#(apply str (vec (re-seq #\"[A-Z]\" %)))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 29, "code": "(fn [s]\n  (reduce #(if (re-matches #\"[A-Z]\" (str %2))\n             (str %1 %2)\n             %1\n             \n             ) \"\" s)\n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (map char (filter #(and (< % 91) (> % 64)) (.getBytes xs)))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 29, "code": "(fn prob29 [col]\n  (letfn [(capital [x]\n            (let [v (int x)]\n              (and (> v 64) (< v 91)))\n            )]\n    (apply str (filter #(capital %) (seq col)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 29, "code": "(fn [word] \n  (apply str \n    (filter #(not= (clojure.string/lower-case %) %) (clojure.string/split word #\"\"))))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 29, "code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55f6fafbe4b06e875b46cea1"}, {"problem": 29, "code": "(fn get-caps [s]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") s)))", "user": "55ecaee4e4b0121d4835fdcd"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 29, "code": "(fn [s]\n (clojure.string/join\n  (filter\n   (fn [c]\n    (and\n     (Character/isLetter c)\n     (=\n      (str c)\n      (clojure.string/capitalize c))))\n   s)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 29, "code": "(fn only_caps [str]\n  (-> str\n    (clojure.string/split #\"\")\n    (->> (filter #(re-matches #\"[A-Z]+\" %)))\n    (clojure.string/join)))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(Character/isUpperCase %) (seq s) )))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 29, "code": "#(apply str\n\t\t(filter\n\t\t\t(fn isUpper [c] \n\t\t\t\t(and\n\t\t\t\t\t(= \n\t\t\t\t\t\t(str c) \n\t\t\t\t\t\t(clojure.string/upper-case c)\n\t\t\t\t\t)\n\t\t\t\t\t(Character/isLetter c)\n\t\t\t\t) \n\t\t\t)\n\t\t\t%\n\t\t)\n\t)", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "55fd9dffe4b07755b13145fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (re-seq #\"[A-Z]\" s)))", "user": "4e70eae1535d5021c1a89642"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f43228e4b06e875b46ce67"}, {"problem": 29, "code": "#(clojure.string/join (re-seq (re-pattern \"[A-Z]+\") %))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 29, "code": "(fn upper?\n  [x]\n  (apply str ( re-seq #\"[A-Z]\" x)))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "55ef2f27e4b066087aa94532"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (set (map char (range 65 91))) s)))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "560094a0e4b04bb52996e16b"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "55e5f668e4b050e68259b47d"}, {"problem": 29, "code": "(fn [n] (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int (seq n))))))", "user": "530ec8d4e4b08068f379ecc2"}, {"problem": 29, "code": "(fn \n      [inputString]\n      (reduce str (for\n                    [chars (str inputString)\n                     :when (and (>= (int chars) 65) (<= (int chars) 90))]\n                    chars)))", "user": "55f9b634e4b03cbcff9738c9"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (re-seq #\"[A-Z]+\" s)))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "560039cce4b04bb52996e162"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter (into #{} (map char (range 65 91)))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 29, "code": "(fn [string] \n  (let [matcher (re-matcher #\"[A-Z]\" string)]\n  (loop [out \"\" match (re-find matcher)]\n    (if match\n      (recur (cons match out) (re-find matcher))\n      (clojure.string/join (reverse out))\n      )\n    ))\n  )", "user": "55fea1a1e4b00f4cabc57657"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "559e6f42e4b08a52bd4f97d3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "56039843e4b04bb52996e1be"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 29, "code": "(comp #(apply str %) #(re-seq #\"[A-Z]+\" %))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5410499de4b01498b1a719a6"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56047160e4b0c80df0ca265d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5605007ae4b08b23635d315e"}, {"problem": 29, "code": "(fn [x] \n  (apply str \n          (filter #(Character/isUpperCase %) \n                  x)))", "user": "5579d60ce4b05c286339e099"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "55e732c5e4b050e68259b492"}, {"problem": 29, "code": "(fn [text]\n   (apply str (filter #(Character/isUpperCase %) text)))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50746e23e4b054001656acd1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not (= (str (clojure.string/lower-case %)) (str %))) (seq s))))", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 29, "code": "(fn [a-str]\n  (apply str\n         (re-seq #\"[A-Z]\" a-str)))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 29, "code": "(fn [s] (apply str  (re-seq #\"[A-Z]\" s)))", "user": "56011393e4b04bb52996e178"}, {"problem": 29, "code": "(fn [s]\n\t(apply str\n\t\t(filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))\n\t\t(seq s))))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 29, "code": "(fn [xs] \n  (let [matcher (re-matcher #\"[A-Z]\" xs)] \n    (loop [match (re-find matcher) result []]\n      (if match\n        (recur (re-find matcher) (conj result match))\n        (apply str (seq result))))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5361d423e4b0243289761e49"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [l] (Character/isUpperCase l)) %))", "user": "560794bde4b08b23635d3182"}, {"problem": 29, "code": "(fn [xs] (clojure.string/join (filter #(Character/isUpperCase %) (seq xs))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 29, "code": "(fn [l]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) l)))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 29, "code": "(fn [string]\n  (let [capital-letters (reduce #(assoc %1 %2 true) {} [\\A \\B \\C \\D \n                                                        \\E \\F \\G \\H \n                                                        \\I \\J \\K \\L \n                                                        \\M \\N \\O \\P \n                                                        \\Q \\R \\S \\T \n                                                        \\U \\V \\W \\X \n                                                        \\Y \\Z])]\n    (apply str (filter #(get capital-letters % false) string))))", "user": "55e274b4e4b050e68259b436"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(#{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} %) x)))", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 29, "code": "(fn [sr]\n    (\n      (fn [r s]\n        (if (empty? s)\n          r\n          (recur (str r (first s)) (rest s))\n        )\n        )\n      \"\"\n      (filter \n        (fn [x] (and (>= (compare x \\A) 0) (<= (compare x \\Z) 0)))\n        (cons(first sr)(rest sr))\n        )\n      )\n    )", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 29, "code": "(fn [x]\n(apply str (filter #(Character/isUpperCase %) x))\n \n )", "user": "560768a0e4b08b23635d317f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "560ac5cae4b05f002753df09"}, {"problem": 29, "code": "(fn [w] (apply str (re-seq #\"[A-Z]+\" w)))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (re-seq #\"[A-Z]+\" x)))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 29, "code": "(fn [l] (clojure.string/join \"\" (filter \n #(let [i (int %)]\n    (and \n     (>= i (int \\A))\n     (<= i (int \\Z)))) l)))", "user": "56051095e4b08b23635d3162"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "560a7775e4b05f002753defa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 29, "code": "(fn [word] (apply str (re-seq #\"[A-Z]\" word)))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "560d2a2be4b05f002753df35"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "560ae540e4b05f002753df0d"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "560a7b46e4b05f002753defb"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (char-array %)))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "560ac488e4b05f002753df08"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "560d491ae4b05f002753df3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "560d2b53e4b05f002753df37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "560e9a2de4b05f002753df52"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "560ff632e4b05f002753df66"}, {"problem": 29, "code": "#(apply str (filter (fn [thing] (Character/isUpperCase thing)) %))", "user": "560fe558e4b05f002753df63"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "560ff209e4b05f002753df65"}, {"problem": 29, "code": "(fn get-caps\n  [some-string]\n  (apply str (filter #(contains? (set (range 65 92)) (int %)) (seq some-string))))\n\n; This is an awful hacky way; another is to use re, e.g.\n; #(apply str (re-seq #\"[A-Z]\" %))", "user": "560dfa8de4b05f002753df46"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "561047eae4b05f002753df6d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56069006e4b08b23635d3174"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (java.lang.Character/isLetter %1) (= (java.lang.Character/toUpperCase %1) %1)) s)))", "user": "56019662e4b04bb52996e190"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 29, "code": "(fn\n  [word]\n  (apply str\n   (remove\n    #(or\n    (< (int %) 65)\n    (> (int %) 90))\n    word)))", "user": "543f1765e4b032a45b86935a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 29, "code": "(fn [text] (apply str (filter (fn [character] (Character/isUpperCase character)) (seq text))))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55f68360e4b06e875b46ce93"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "560c404fe4b05f002753df30"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter\n   (fn [c] (and (>= (compare c \\A) 0)\n                (<= (compare c \\Z) 0)))\n   s)))", "user": "5613c76ce4b05f002753dfa7"}, {"problem": 29, "code": "(fn [s] \n\t(apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "55796743e4b05c286339e095"}, {"problem": 29, "code": "(fn [string] (apply str (map #(if (and (> (int %) 64)\n                                       (< (int %) 91))\n                                          %)\n                                       string)))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 29, "code": "(fn only-upper-case [text] \n  \t(apply str (filter #(Character/isUpperCase %) text)))", "user": "56014f55e4b04bb52996e184"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5611196fe4b05f002753df7a"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "56128c54e4b05f002753df93"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))", "user": "560b483ee4b05f002753df16"}, {"problem": 29, "code": "(fn [x] (clojure.string/join(re-seq #\"[A-Z]\" x)))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56171192e4b06b1bb2182a0b"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 29, "code": "(fn [string] (reduce (fn [x y] (str x y)) \"\" (re-seq #\"[A-Z]+\" string)))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 29, "code": "(comp (partial apply str)\n      (partial filter #(Character/isUpperCase %)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "user": "561223e5e4b05f002753df8b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 29, "code": "(fn find-caps [input]\n  (apply str (re-seq #\"[A-Z]\" input)))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 29, "code": "#(clojure.string/join(re-seq #\"\\p{Upper}\" %))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558b41fce4b0277789237628"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n;#(clojure.string/replace % #\"[^A-Z]\" \"\")\n;(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "561a4c60e4b053970a773b06"}, {"problem": 29, "code": "(fn [x]\n  (.replaceAll x \"[^A-Z]\" \"\")\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 29, "code": "(fn [my-string] (apply str (filter #(Character/isUpperCase %) my-string)))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55e3924ae4b050e68259b445"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" %)  (clojure.string/split s #\"\"))))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 29, "code": "(fn [xs]\n(->>\n(filter \n\n#(->\n(re-matches #\"[A-Z]\" (str %))\nnil?\nnot\n) \n \n \n xs\n \n )\n (apply str)\n ))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 29, "code": "(fn [st] \n                         (apply str (filter (set (map char (range 65 91)))  st ))\n                         )", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 29, "code": "(fn [x] (->> x (re-seq #\"[A-Z]\") (concat) (apply str)))", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 29, "code": "#(apply str (apply concat (re-seq #\"[A-Z]+\" %)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 29, "code": "(fn [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "561a060ee4b053970a773b01"}, {"problem": 29, "code": "(fn [n] (apply str (re-seq #\"[A-Z]+\" n)))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 29, "code": "(fn only-upper [str-in]\n  (apply str (filter (set (map char (range 65 91))) str-in)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56040b64e4b0c80df0ca2653"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "4e7e443e535db169f9c7970b"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 29, "code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                                           %) string)))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \n           (filter #(and \n                     (=\n                       (clojure.string/upper-case %)\n                       (.toString %))\n                     (not (=\n                                   (clojure.string/lower-case %)\n                                   (.toString %\n                                              )))) x)))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 29, "code": "(let [ start (int \\A)\n       end (int \\Z)\n       check (fn [x] \n               (and (<= (int x) end) \n                    (>= (int x) start)))] \n #( clojure.string/join ( filter check %)) )", "user": "5610d39de4b05f002753df75"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 29, "code": "(fn [sx] (apply str (filter #(Character/isUpperCase %) sx)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) %))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-matches #\"\\b[A-Z]\\b\" (str %)) x)))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 29, "code": "(fn [x]\n   (apply str (filter #(re-seq #\"[A-Z]\" (str %)) x)))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 29, "code": "(fn [x](apply str (re-seq #\"[A-Z]+\" x)))", "user": "56238371e4b03f08ee9a9233"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5600dccee4b04bb52996e175"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (filter #(Character/isUpperCase %) s)\n         )\n  )", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 29, "code": "(fn [st] (reduce (fn [s l] (if (Character/isUpperCase l)\n                            (str s l)\n                            s)) \"\" st))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56102f50e4b05f002753df6b"}, {"problem": 29, "code": "(fn [x] \n  (apply str \n     (filter \n          (fn [x] \n            (let [ascii (int x)]\n                 (and (> ascii 64) (< ascii 91))\n              )\n            )\n      x) ))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 29, "code": "#(reduce (fn [acc in]\n          (if (Character/isUpperCase in)\n            (str acc in)\n            acc)) nil (seq %))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 29, "code": "(comp #(apply str %) #(filter (fn [x] (Character/isUpperCase x)) %))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "536829c8e4b0243289761e8b"}, {"problem": 29, "code": "(fn[st]\n (apply str \n    (filter #(Character/isUpperCase %)\n            (seq st))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 29, "code": "(fn[seq] (apply str (filter #(Character/isUpperCase %) seq)))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) st)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 29, "code": "(fn somefunc [n] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) n)))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 29, "code": ";#(apply str (filter (partial re-find #\"[A-Z]\") (map str (vec %))))\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 29, "code": "#(apply str \n  (filter \n    (fn [c] \n      (let [target (str c)]\n      \t(and (Character/isLetter c) (= (.toUpperCase target) target)))) (seq %)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 29, "code": "(fn caps [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 29, "code": "(fn caps-only\n  [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq string))))", "user": "562e2c5ce4b0a45d2ff83024"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 29, "code": "(fn filter-uppers\n  [input]\n  (let [input-seq (seq input)]\n    (apply str\n     (filter #(re-matches #\"[A-Z]\" (str %)) input-seq))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 29, "code": "(fn [s]\n       (apply str (re-seq #\"[A-Z]+\" s)))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5630a51de4b0bfe05bf11781"}, {"problem": 29, "code": "(fn [s] (->> s\n             (filter #(not= (clojure.string/lower-case %) (str %)))\n             (clojure.string/join)))", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "562e9f5fe4b0ab312c17ebbd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 29, "code": "(fn [stri]\n            (let [len (count stri)]\n              (loop [upperStr \"\" index 0]\n                (if (= index len)\n                  upperStr\n                  (let [checkChar (Character/toString (nth stri index))]\n                    (if (= (java.lang.String/.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" checkChar) -1)\n                      (recur upperStr (+ index 1))\n                      (recur (str upperStr checkChar) (+ index 1))))\n                  ))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "561a1af6e4b053970a773b02"}, {"problem": 29, "code": "(fn [s] \n    (apply str \n      (filter #(Character/isUpperCase %) s)))", "user": "55dedb0de4b050e68259b3e8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z0-9!@#$%^,./&*()\\ ]\" \"\")", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55f3bb12e4b06e875b46ce64"}, {"problem": 29, "code": "(fn capOnly [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "561a9380e4b053970a773b07"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\" s)))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 29, "code": "(fn re [s]\n (apply str  (map #(re-matches #\"[A-Z]\" %) (map str s) ))\n  )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(contains? (set (map char (range (int \\A) (inc (int \\Z))))) %) s)))", "user": "563758e3e4b0bfe05bf117d5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 29, "code": "(fn [text]\n  (->> text                               ; RE pattern to match capitals,\n       (re-seq #\"[A-Z]\")                  ; find all match ocurrences\n       (apply str)))                      ; concatenate all ocurrences", "user": "560dbf17e4b05f002753df44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55729a78e4b09a3098a52547"}, {"problem": 29, "code": "; Probleem 37: regular expressions, al gemaakt voor dit probleem\n#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5637bd38e4b0bfe05bf117de"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 29, "code": "(fn caps [x & [y]]\n  (if y\n       (if (= (count x) 0)\n         y\n         (if (Character/isUpperCase (first x))\n           (caps (rest x) (str y (first x)))\n           (caps (rest x) y)\n           \n           )) \n       (caps x \"\")))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 29, "code": "(fn [l] (clojure.string/join (filter #(Character/isUpperCase %) l)))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]\" xs)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace \n  s \n  #\"[^A-Z]\" \n  \"\"))", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %1) (int \\Z)) s)))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 29, "code": "(fn include-upper [string] \n  (reduce str (filter #(Character/isUpperCase %) (seq string))))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 29, "code": "(fn only-capitals [s] (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "56252effe4b00a550fc90294"}, {"problem": 29, "code": "(fn [s] (apply str(filter (fn[c] (not= (str c) (clojure.string/lower-case c))) s)))", "user": "54494159e4b032a45b8693d1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 29, "code": "(fn caps [x] (apply str (filter (fn [y] (not (= (str y) (.toLowerCase (str y))))) (seq x))) )", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56306e6ce4b073c1cf7a9be7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) s)))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 29, "code": "(fn [x](apply str(filter #(Character/isUpperCase %) x)))", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 29, "code": "(fn [s] (reduce str (for [c s :when (Character/isUpperCase c)] c)))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 29, "code": "(fn filter-for-caps [s]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s))\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (#(not(= (clojure.string/lower-case %) %)) (str x))) s)))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 29, "code": "(fn [x]\n\t(apply str (re-seq #\"[A-Z]\" x)))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(<= 0 (- (int %1) (int \\A)) 25) st)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 29, "code": "(fn capitalonly [x] (apply str (filter #( and (>= (int %) (int \\A)) (<= (int %) (int \\Z)) ) x)))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 29, "code": "(fn [arg] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) arg)))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53abed65e4b047364c044455"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 29, "code": "(fn only-upper [s] \n  (clojure.string/join \n    (filter \n        #(and \n          (>= (compare % \\A) 0) \n          (<= (compare % \\Z) 0) ) (seq s))))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n         (filter \n          #(java.lang.Character/isUpperCase %)\n          s)))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "562c0787e4b058fa18c5a6d3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "52179e00e4b0ea2f1c31c8d3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563d4600e4b0bfe05bf1184c"}, {"problem": 29, "code": "(fn [s] \n  (apply \n   str \n   (filter #(Character/isUpperCase %) s)))", "user": "5600591de4b04bb52996e166"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "54588070e4b01be26fd74620"}, {"problem": 29, "code": "(fn caps [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 29, "code": "#(clojure.string/join  (re-seq #\"[A-Z]\" %))", "user": "5619b22ee4b053970a773afe"}, {"problem": 29, "code": "(fn [string]\n\t(apply str (filter #(Character/isUpperCase %) string)))", "user": "53bbae20e4b047364c044509"}, {"problem": 29, "code": "(fn\n  [input]\n  (apply str (re-seq #\"[A-Z]\" input)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "user": "564161aae4b08d4f616f5ef9"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "563ebc00e4b08d4f616f5eca"}, {"problem": 29, "code": "(fn [y]\n  (apply str \n        (filter (set (map char (range 65 91))) \n                 y)\n        ))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "563e022be4b0da801c4e4664"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "5619a388e4b053970a773afc"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 29, "code": "(fn find_caps [s]\n    (clojure.string/join \"\" (clojure.string/split s #\"[^A-Z]\")))", "user": "56058d64e4b08b23635d3169"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 29, "code": "(fn uppers [word] (clojure.string/join (filter #(Character/isUpperCase %) word)))", "user": "560b6895e4b05f002753df1a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56451201e4b0284900eef600"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 29, "code": "(fn [s]( apply str (re-seq #\"[A-Z]\" s)))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "55d1f0bae4b0e31453f64a4d"}, {"problem": 29, "code": "(fn [multicase] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) multicase)))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "56466fb1e4b0284900eef613"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5400407de4b0de5c4184860a"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(re-matches #\"[A-Z]\" (str %)))\n       (apply str)))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "564583f0e4b0284900eef607"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56472ff8e4b0284900eef618"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 29, "code": "(fn only-capital-letter [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 29, "code": "(fn [s] (apply str  (filter #(and (= (str  %) (clojure.string/upper-case %))\n                                      (not= (str %) (clojure.string/lower-case %))\n                                      ) s)))", "user": "5646dff3e4b0284900eef615"}, {"problem": 29, "code": "(fn [s] (apply str  (re-seq #\"[A-Z]+\" s)))", "user": "556282d0e4b0c656e3ff17da"}, {"problem": 29, "code": "#(let [s (seq %) upper-filter (fn [c] (<= (int \\A) (int c) (int \\Z)))]  (reduce str (filter upper-filter s)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5647dc44e4b0284900eef624"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) a)))", "user": "5649542fe4b0284900eef63f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 29, "code": "(fn [s]\n  (loop [s s n nil]\n    (if (empty? s)\n      (str n)\n      (if (Character/isUpperCase (first s))\n        (recur (rest s) (str n (first s)))\n        (recur (rest s) n)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 29, "code": "#(apply str (filter (fn[x] (Character/isUpperCase x)) %))", "user": "51671557e4b013fc800656c4"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 29, "code": "(fn [S] (clojure.string/join (filter #(Character/isUpperCase %) (seq S))) )", "user": "5649615be4b0284900eef641"}, {"problem": 29, "code": "(fn [string] (apply str (for [x string]\n(if \n\t(and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) x)\n)))", "user": "564a985be4b0284900eef65c"}, {"problem": 29, "code": "(fn [s] (->>\n         s\n         (filter #(Character/isUpperCase %))\n         (apply str)))", "user": "545a2da7e4b01be26fd74634"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "564633a1e4b0284900eef60f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "564b3730e4b0284900eef665"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 29, "code": "(fn get-caps [the-string]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") the-string)))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 29, "code": "(fn f\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56488119e4b0284900eef632"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 29, "code": "(fn [char-string]\n  (apply str (filter #(Character/isUpperCase %1) char-string)))", "user": "50738138e4b054001656acc9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (map (fn[x](if(and (< (int x) 91)  (> (int x) 64)) x) ) (str xs))))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 29, "code": "(fn [x] (apply str (filter \n         #(not (nil? (re-matches #\"[A-Z]\" (str %))))\n         x))\n  )", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 29, "code": "(fn [string] (apply str (map #(if (re-find #\"[A-Z]\" (str %)) (str %) \"\") string)))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 29, "code": "(fn [lst] (apply str (filter #(Character/isUpperCase %) lst)))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 29, "code": "(fn [x]                                                               \n  (loop [ ltrs (seq x) acc \"\" ]                                                 \n    (if (= 0 (count ltrs))                                                      \n      ;; then                                                                   \n      acc                                                                       \n      ;; else                                                                   \n      (recur (rest ltrs)                                                        \n        (if (Character/isUpperCase (first ltrs))                                \n          ;; then                                                               \n          (str acc (first ltrs))                                                \n          ;; else                                                               \n          acc                                                                   \n        )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" % ))", "user": "564a560ae4b0284900eef654"}, {"problem": 29, "code": "(fn[s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "56435214e4b08d4f616f5f27"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "4db85282535d1e037afb218a"}, {"problem": 29, "code": "(fn[x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "564a5a09e4b0284900eef656"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "564b495de4b0284900eef667"}, {"problem": 29, "code": "#(apply str  (re-seq #\"[A-Z]\" %))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 29, "code": "(fn get-caps \n  [string] \n  (apply str(re-seq #\"[A-Z]\" string)))", "user": "560d7863e4b05f002753df40"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 29, "code": "(fn [col] (clojure.string/join (filter #(Character/isUpperCase %) col)))", "user": "52725fa4e4b03e8d9a4a742b"}, {"problem": 29, "code": "(fn [input] (->> input seq (filter #(Character/isUpperCase %)) clojure.string/join))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "564f47f9e4b0284900eef6aa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)\n       )\n  )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "564d02cde4b0284900eef679"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55577fcce4b0deb715856e24"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 29, "code": "#(reduce (fn [acc el] (.concat acc el)) \"\" (re-seq #\"[A-Z]\" %))", "user": "564faadce4b0284900eef6b2"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "564d7434e4b0284900eef680"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 29, "code": "#(clojure.string/join (filter (into #{} (map char (range 65 91))) %))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z']\" \"\")", "user": "55f25ae6e4b06e875b46ce43"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 29, "code": "(fn caps-only [mixed-string]\n  (apply str (filter #(Character/isUpperCase %) mixed-string))  )", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "564d936ee4b0284900eef681"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5652b9a1e4b0f9d632dd8468"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 29, "code": "(fn [a] (reduce str (filter #(Character/isUpperCase %) (seq a))))", "user": "5624f5a6e4b00a550fc90288"}, {"problem": 29, "code": "(fn onlyUpper [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (reverse (into () x)) ) )\n  )", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "552281cae4b0882d96d0919f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52c00e32e4b07a9af5792341"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [l] (let [sl (str l)] (not= (clojure.string/lower-case sl) sl))) (seq s))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 29, "code": "(fn filterOutLowerCase [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "564da567e4b0284900eef682"}, {"problem": 29, "code": "(fn capsOnly [x]\n        (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 29, "code": "#(loop[n 0, s \"\"]\n   (if(= n (count %))\n     s\n     (if(>= (int \\Z) (int (nth % n)))\n       (if(<= (int \\A) (int (nth % n)))\n         (recur(inc n)(str s (nth % n)))\n         (recur(inc n)(str s \"\")))\n       (recur(inc n)(str s \"\")))))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 29, "code": "(fn filter-upper [s] (apply str (filter #(and (<= 0 (compare % \\A)) (>= 0 (compare % \\Z))) s)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56188848e4b053970a773aea"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]*\" %))", "user": "5658d775e4b00d3155796114"}, {"problem": 29, "code": "(fn [s]\n  (let [caps (set (map char \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n   \t(apply str (filter #(contains? caps %) s))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5654a0fce4b0f9d632dd8486"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) s)))", "user": "5658b9bde4b00d315579610e"}, {"problem": 29, "code": "(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4f6de600e4b07046d9f4efd1"}, {"problem": 29, "code": "reduce #(str %1 (re-matches #\"[A-Z]\" (str %2))) \"\"", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 29, "code": "(fn [stri] (clojure.string/join \"\" (map char (filter #(and (>= % 65) (<= % 90)) (map int (seq stri))))))", "user": "544285dde4b032a45b869380"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (filter #(> 91 (int %) 64) s)))", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56002c2de4b04bb52996e161"}, {"problem": 29, "code": "(fn [input]\n  (apply str \n  \t(filter\n              #(Character/isUpperCase %)\n              input)\n  )\n  )", "user": "56004deee4b04bb52996e164"}, {"problem": 29, "code": "(fn [string] \n  (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 29, "code": "(fn [s](apply str (re-seq #\"[A-Z]+\" s)))", "user": "53403cf8e4b085b17e897da7"}, {"problem": 29, "code": "(fn [sequence] \n  (apply str (filter #(Character/isUpperCase %) sequence))\n)", "user": "56448dc1e4b0284900eef5f6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 29, "code": "(fn [s]   (apply str (filter\n   #(Character/isUpperCase %)\n   s)))", "user": "5630cff7e4b0bfe05bf11787"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 29, "code": "(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56598476e4b068f2fe63dbec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter (fn [ch] (true? (some #(= % ch) (map char (range 65 91)))))))", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 29, "code": "(fn [s] (reduce str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "555994fbe4b0deb715856e39"}, {"problem": 29, "code": "(fn caps\n  [string]\n  (apply str (filter #(<= 65 (int %) 90) (seq string))))", "user": "565d8dcfe4b068f2fe63dc26"}, {"problem": 29, "code": "#(apply str \n       (re-seq #\"[A-Z]\" %))", "user": "565fad48e4b068f2fe63dc43"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 29, "code": "(fn [w] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) w)))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "56503c4ee4b0284900eef6bb"}, {"problem": 29, "code": "(fn get-the-caps [text]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" text)))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 29, "code": "(fn [str] (->> str (filter #(Character/isUpperCase %)) clojure.string/join))", "user": "565de2c6e4b068f2fe63dc2d"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53b6b6c8e4b047364c0444ca"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 29, "code": "(fn [a]\n  (apply str\n         (filter\n          #(and \n            (>= (int %) 65)\n            (<= (int %) 90))\n          a)))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (vec x)) ) )", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n         (filter #(let [n (int (char %))]\n                    (and (< n 91) (> n 64)))\n                 string)))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 29, "code": "(fn [i] (apply str (filter #(Character/isUpperCase %) i)))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char\n         (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 29, "code": "(fn [field] (apply str (re-seq #\"[A-Z]+\" field)))", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56686edce4b04acd4f672dea"}, {"problem": 29, "code": "(fn [x] (apply str(re-seq #\"[A-Z]\" x)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %1))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(re-matches #\"[A-Z]\" %1) (clojure.string/split x #\"\"))))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 29, "code": "(fn [a] \n  (apply str (filter #(Character/isUpperCase %) a)))", "user": "566cd399e4b0a866af6896c3"}, {"problem": 29, "code": "#(apply str \n        (filter\n         (fn [char]\n           (Character/isUpperCase char))\n         %))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5649d538e4b0284900eef647"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 29, "code": "(fn [n]\n  (loop [word (vec n) counter 0 result \"\"]\n    (if (= counter (count word))\n      result\n      (if (.contains (vec (map char (range (int \\A) (inc (int \\Z))))) (word counter))\n            (recur word (inc counter) (str result (word counter)))\n            (recur word (inc counter) result)))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566f0ff6e4b0a866af6896e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (< (int %) 92) (> (int %) 64)) x)))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "56483562e4b0284900eef629"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 29, "code": "(fn\n  [data]\n  (apply str \n   \t\t(filter \n    \t\t#(re-matches #\"[A-Z]\" (str %))\n    \t\tdata)))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 29, "code": "(fn [s] \n   (clojure.string/join \n     (filter #(Character/isUpperCase %) \n             (reverse (reverse s)))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 29, "code": "(fn get-upper [string]\n  (let [in? (fn [coll elem]\n              (some #(= elem %) coll))]\n    (let [upper-list (map char (range 65 91))]\n      (apply str (filter #(in? upper-list %) string)))))", "user": "56714922e4b05957ce8c6107"}, {"problem": 29, "code": "(comp clojure.string/join  #(re-seq #\"[A-Z]\" %))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "564716e6e4b0284900eef616"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s) ))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\"  \"\")", "user": "567476bde4b05957ce8c6139"}, {"problem": 29, "code": "(fn [stri] (apply str (filter #(Character/isUpperCase %) stri)))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(< 64 (int %) 92) (vec x))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "566cf904e4b0a866af6896c5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "56706f01e4b0a866af6896f2"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56765beae4b05957ce8c6156"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52d9ba39e4b09f7907dd13af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "567798afe4b05957ce8c6169"}, {"problem": 29, "code": "(fn [x]\n\t(clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)\n            ))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 29, "code": "(fn [w] (clojure.string/join \"\" (re-seq #\"[A-Z]\" w)))", "user": "55b66ebce4b01b9910ae2996"}, {"problem": 29, "code": "(fn [foo] (apply str (re-seq #\"[A-Z]\" foo)))", "user": "56548885e4b0f9d632dd8483"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) coll)))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "55e81430e4b0121d4835fd88"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "4fe98e07e4b0547ebccb2464"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 29, "code": "(fn [sentence]\n  (reduce str (re-seq #\"[A-Z]\" sentence)))", "user": "561a2940e4b053970a773b04"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5427b477e4b01498b1a71b27"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 29, "code": "(fn [text]\n    (->> (char-array text)\n         (filter #(Character/isUpperCase %))\n         (clojure.string/join))\n    )", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "567b903be4b05957ce8c61a8"}, {"problem": 29, "code": "(fn [x] (apply str  (filter #(Character/isUpperCase %) x)))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str c))) %))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 29, "code": "(fn [xs] (reduce str (re-seq #\"[A-Z]\" xs)))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 29, "code": "(fn join [s] \n  (if (empty? s) \n    nil\n    (if (Character/isUpperCase (first s))\n      (str (first s) (join (rest s)))\n      (str (join (rest s))))\n  )\n )", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 29, "code": "(fn get-capitals\n  [input]\n  (apply str (filter #(Character/isUpperCase %) (seq input))))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) % ))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 29, "code": "(fn [x] (reduce str (filter (fn [y] (Character/isUpperCase y)) x)))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 29, "code": "(fn [s]\n  (->>\n   s\n   (re-seq #\"[A-Z]\")\n   (clojure.string/join \"\")))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(let [i (int %1)]\n                        (and (>= i (int \\A)) (<= i (int \\Z))))\n                     s)))", "user": "567a680ee4b05957ce8c6198"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{javaUpperCase}\" %))", "user": "566dd178e4b0a866af6896d1"}, {"problem": 29, "code": "(fn [s] (apply str ((partial filter #(Character/isUpperCase %)) s)))", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54d03a17e4b018d918be98e0"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(<= 64 (int %) 91) (seq s))))", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 29, "code": "(fn [arg] (apply str (re-seq #\"\\p{Upper}\" arg )))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 29, "code": "(fn [s] (reduce str (map #(str (char %)) (filter #(and (> 91 %) (< 64 %)) (map int s)))))", "user": "56747b46e4b05957ce8c613b"}, {"problem": 29, "code": "(comp clojure.string/join #(re-seq #\"[A-Z]+\" %))", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x) ))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 29, "code": "(fn td [st] (clojure.string/replace st #\"[^A-Z]\" \"\"))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 29, "code": "(fn [string]\n  (reduce str (filter #(re-find #\"[A-Z]\" %) (map str (seq string)))))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 29, "code": "#(-> #\"[A-Z]\" (re-seq %) clojure.string/join)", "user": "56814cbce4b0945ebc182a81"}, {"problem": 29, "code": "(fn only-cap [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 29, "code": "(fn [string]\n  (let [is-uppercase? (fn [c] \n                        (<= (int \\A) (int c) (int \\Z)))]\n    (->> string\n         (filter is-uppercase?)\n         (reduce str))))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n   (filter\n \t#(Character/isUpperCase %)\n \tx)))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56798c1be4b05957ce8c618a"}, {"problem": 29, "code": "(fn [words]\n  (->> words \n       (filter #(Character/isUpperCase %)) \n       (apply str)))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 29, "code": "(fn [s]\n\t(reduce (fn [m c] (if (re-matches #\"[A-Z]\" (str c)) (str m c) (str m))) \"\" s))", "user": "5681fe64e4b0945ebc182a88"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n         (filter #(Character/isUpperCase %) x)))", "user": "53223f5de4b09d4e7a9b54bf"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]*\" \"\")", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 29, "code": "(fn f\t[s]\n      (clojure.string/join\n           (filter #(not= (str %) (clojure.string/lower-case %)) s)\n      )\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 29, "code": "#(apply str (filter (fn [char] (let [c (int char) A (int \\A) Z (int \\Z)] (and (>= c A) (<= c Z)))) %))", "user": "567ffd69e4b0966858e4d8e7"}, {"problem": 29, "code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]\"))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 29, "code": "(fn f [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 29, "code": "(fn [msg] (apply str (filter #(Character/isUpperCase %) (seq msg))))", "user": "564dc062e4b0284900eef68c"}, {"problem": 29, "code": "(fn [coll]\n  (apply str \n         (filter\n          (fn [x]\n            (and \n             (= (clojure.string/upper-case x) (str x))\n             (not= (clojure.string/lower-case x) (str x))))\n          coll)))", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "user": "5655191ee4b0f9d632dd8491"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 29, "code": "(fn capital-letter-only [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 29, "code": "(fn [string] (apply str (map char (filter #(and (> 91 %) (< 64 %)) (map int (seq string))))))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 29, "code": "(fn capitalX [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 29, "code": "(fn [s] (apply str(re-seq #\"[A-Z]\" s)))", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]+\" st)))", "user": "56481722e4b0284900eef628"}, {"problem": 29, "code": "(fn [input-str]\n  (apply str (re-seq #\"[A-Z]\" input-str)))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 29, "code": "reduce #(if (Character/isUpperCase %2)\n           (str %1 %2)\n           %1) \"\"", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 29, "code": "(fn [x] (apply str (map char (filter #(and (> 91 %) (< 64 %)) (map int x)))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %\n                    ))", "user": "5689911be4b0dcc4269f407f"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 29, "code": "(fn [arg] \n   (apply str (filter #(Character/isUpperCase %) arg)))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55597fcce4b0deb715856e37"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]*\" %))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n         (re-seq #\"[A-Z]\" s)))", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "56784adbe4b05957ce8c6176"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 29, "code": "(fn get-caps [my-str]\n  (apply str (filter #(and\n                       (<= (int \\A) (int %))\n                       (>= (int \\Z) (int %)))\n                     my-str)))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 29, "code": "(fn [sqnc]\n  (apply str (filter #(Character/isUpperCase %) sqnc)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 29, "code": "(fn get-caps [string]\n  (cond (empty? string) \"\"\n   \t    (Character/isUpperCase (first string)) (str (first string) (get-caps (subs string 1)))\n  \t    :else (get-caps (subs string 1))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "543b4746e4b032a45b86932c"}, {"problem": 29, "code": "#(apply str\n(\n  re-seq #\"[A-Z]\" %\n         ))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]?\" %))", "user": "52fbbadde4b047fd5583700f"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "56066e82e4b08b23635d3173"}, {"problem": 29, "code": "(fn filter-upper [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 29, "code": "(fn [s](apply str (filter #(<= 65 (int %) 90) s)))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 29, "code": "(fn [arg]\n  (apply str (filter #(Character/isUpperCase %) arg)))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 29, "code": "(fn [xs]  (clojure.string/join ( filter #(<= (int \\A) (int %1) (int \\Z)) xs) ))", "user": "56743413e4b05957ce8c612e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 29, "code": "(fn [str] (clojure.string/replace str #\"[^A-Z]\" \"\"))", "user": "56508fe0e4b0284900eef6c1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 29, "code": "(fn [msg] (apply str (filter #(Character/isUpperCase %) msg)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56193c6ee4b053970a773af2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "50342d1be4b062bc5d7ae15f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "user": "4e889643535d8b9bb0147ca5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\" )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (into [] s))))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56795625e4b05957ce8c6186"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z+]\" x)))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join ; convert back to single string\n         (filter #(re-matches #\"[A-Z]+\" %) ; grab only upper-case alpha chars\n                 (map #(str %) s)))) ; collection of chars as strings", "user": "5579eed7e4b05c286339e09b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 29, "code": "(fn\n      [s]\n(clojure.string/replace s #\"\\p{javaLowerCase}|\\p{javaWhitespace}|\\W|\\d\" \"\")       )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 29, "code": "(fn [X] (apply str (filter #(Character/isUpperCase %) X)))", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569b4ff7e4b0542e1f8d1451"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %1) (int \\A)) (<= (int %1) (int \\Z))) (seq s))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 29, "code": "(fn [arg]\n  (clojure.string/replace arg #\"[^A-Z]\" \"\"))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 29, "code": "(fn [s]\n  (reduce str ((fn [i]\n                 (re-seq #\"[A-Z]+\" i)) s)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 29, "code": "(fn stripcaps [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "53bd7225e4b0d9a98559a6d2"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) (seq %)))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "569bda8ee4b0542e1f8d145a"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "506cc221e4b0a302964c548f"}, {"problem": 29, "code": "#(apply str(filter (fn [c] (Character/isUpperCase c)) %))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) (seq word))))", "user": "56785234e4b05957ce8c6177"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52229374e4b0e6a83c892600"}, {"problem": 29, "code": "(fn [ x ]\n\n(apply str (filter #(Character/isUpperCase %) x ) )\n  \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 29, "code": "(fn [x] \n\t(apply str(distinct\n\t\t(filter (set (map char (range 65 91))) x))))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 29, "code": "(fn keepCaps [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n  (filter #(Character/isUpperCase %) (seq s))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "55263009e4b0ffed3738f916"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (vec s))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5243233fe4b076204b44faac"}, {"problem": 29, "code": "(fn [w]\n  (apply str (filter #(contains? (set (map char (range 65 91))) %1) (seq w))))", "user": "55838353e4b05c286339e116"}, {"problem": 29, "code": "(fn [col]\n  (apply str (filter #(Character/isUpperCase  %) (seq col))))", "user": "56a45fcee4b0542e1f8d14dc"}, {"problem": 29, "code": "#(clojure.string/join \"\"\n                      (clojure.string/split % \n                                            #\"[^A-Z]\"))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 29, "code": "(fn [s]\n  (let [i (map int s)\n        ri (filter #(< 64 %1 91) i)\n        rs (apply str (map char ri))]\n   rs))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 29, "code": "#(->> (filter (->> (range 65 91) (map char) (into #{})) %) (apply str))", "user": "56aad332e4b03c432f187337"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 29, "code": "(fn caps [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n  )", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %)  (seq string))))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56ac81ace4b03c432f187347"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter (fn [c] (re-matches #\"[A-Z]\" (str c)))))", "user": "56acca9ae4b03c432f18734c"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56abeb1fe4b03c432f187344"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 29, "code": "(fn [xs] \n  (clojure.string/join (filter\n\t\t   #(and (>= 0 (compare \\A %)) (<= 0 (compare \\Z %))) xs      \n  )    )\n)", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) string)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 29, "code": "(fn caps\n  [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "56af5f74e4b061e3ca319acf"}, {"problem": 29, "code": "(fn [x] ( apply str (filter #(and (> (int %) 64) (< (int %) 91)) x )))", "user": "56afb527e4b061e3ca319ad7"}, {"problem": 29, "code": "(fn [word]\n  (let [matcher (re-matcher #\"[A-Z]\" word)]\n    (loop [coll []\n           match (re-find matcher)]\n      (if match\n        (recur (conj coll match) (re-find matcher))\n        (clojure.string/join coll)))))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56b306c6e4b0982f16b37e0e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 29, "code": "(comp #(apply str %) (partial filter #(Character/isUpperCase %)) vec)", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 29, "code": "(fn [in] (clojure.string/join (filter #(Character/isUpperCase %) in)))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 29, "code": "(comp (partial clojure.string/join \"\") re-seq) #\"[A-Z]\"", "user": "56a4ec0ee4b0542e1f8d14dd"}, {"problem": 29, "code": "(fn fuc [sq] (apply str (filter #(Character/isUpperCase %) sq)))", "user": "56b36283e4b0982f16b37e18"}, {"problem": 29, "code": "(fn ff [str]\n  (let [s (seq str)\n        max (int \\Z)\n        min (int \\A)]\n    (clojure.string/join (filter\n                           #(let [n (int %)]\n                             (and (>= n min) (<= n max)))\n                           s))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 29, "code": "(fn [instring]\n  (clojure.string/replace instring #\"\\p{Lower}|\\W|\\d\" \"\"))", "user": "55fc838be4b0f488688e0674"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "56ae7589e4b03c432f187360"}, {"problem": 29, "code": "(fn myfn [x]\n  (apply str (filter #(not (= (first (clojure.string/lower-case %)) %)) x)))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n  (filter #(Character/isUpperCase %) s)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 29, "code": "(fn [string]\n  (apply str (take 100 (filter #(Character/isUpperCase %) (seq string)))))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56b965d9e4b0f26550335931"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56b97792e4b0f26550335932"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(contains? (set (map char (range 65 91))) %) (vec s))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "536f96e3e4b0fc7073fd6e83"}, {"problem": 29, "code": "(fn [x] (->> x (filter #(Character/isUpperCase %)) (apply str)))", "user": "565418ede4b0f9d632dd847d"}, {"problem": 29, "code": "(fn [x] (reduce str (filter (set (map char (range 65 91))) x)))", "user": "56b94357e4b0f2655033592e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "558ea13be4b0277789237654"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56b86e64e4b0f26550335924"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56baa68ce4b0f26550335947"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56baab13e4b0f26550335948"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (clojure.string/join \"\"))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56bb3a4be4b0f26550335951"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "55e206f3e4b050e68259b429"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "531a0709e4b08068f379ed87"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56bca51ae4b0f26550335963"}, {"problem": 29, "code": "(fn [coll]\n  (apply str \n         (seq \n          (filter #(Character/isUpperCase %) (seq coll)))))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 29, "code": "#(apply str (filter (fn[x]( Character/isUpperCase x)) %))", "user": "56b6c962e4b0982f16b37e3e"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 29, "code": "(fn [oldstring]  (apply str (re-seq #\"[A-Z]\" oldstring)))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "56bdda49e4b0f26550335977"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5609d328e4b05f002753deee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 29, "code": ";; Filter solution\n;;#(filter Character/isUpperCase %)\n\n;; Regex solution\n#(apply str (re-seq #\"[A-Z]+\" %))", "user": "525636dfe4b0541d1855ba0d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56b80ad1e4b0f26550335921"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56c040eee4b060a8e693e3a5"}, {"problem": 29, "code": "(fn [strr] (clojure.string/join (filter #(Character/isUpperCase %) strr)))", "user": "56b33058e4b0982f16b37e12"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c1549ae4b0839206b9d686"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c1d2dae4b0839206b9d68a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 29, "code": "(fn [s] (reduce #(str % %2) (conj (re-seq #\"[A-Z]\" s) \"\")))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 29, "code": "(fn rm-caps[l]\n  (apply str (filter #(and (< 64 ( int %)) \n                 (> 91 (int %))) l)))", "user": "529cabd5e4b04e0c58e87b68"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56aee4abe4b03c432f187364"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 29, "code": "(fn func [s]\n  (let [start (int \\A) end (int \\Z)]\n    (apply str (filter #(and (>= (int %) start) (<= (int %) end)) (seq s)))))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]\" st)))", "user": "56499a5de4b0284900eef644"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "564857c2e4b0284900eef62e"}, {"problem": 29, "code": "(fn [t] (apply str (re-seq #\"[A-Z]+\" t)))", "user": "56aed78fe4b03c432f187363"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 29, "code": "(fn only-uppercase [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 29, "code": "(fn upper [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 29, "code": "(fn [input]\n    (apply str\n       (filter #(Character/isUpperCase %) input)\n    )\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 29, "code": "(fn [coll]\n (apply str (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") coll))\n)", "user": "56c72507e4b0ed865f9758b7"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c08c7fe4b060a8e693e3ab"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (map char %)))", "user": "56c77858e4b0ed865f9758c0"}, {"problem": 29, "code": ";;#(apply str(filter (set ( map char (range 65 91))) %))\n;;#(apply str(re-seq #\"[A-Z]+\" %))\n(fn [s]\n    (apply str (for [c s :when (Character/isUpperCase c)] c)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 29, "code": "(fn [input]\n  (apply str (re-seq #\"[A-Z]+\" input)))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 29, "code": "#(clojure.string/join(filter (fn[c](and (> (int c) 64)(< (int c) 92)))%))", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 29, "code": "#(apply str (for [s % :when (Character/isUpperCase s)] s))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 29, "code": "(fn\n\t[x]\n\t(apply str (filter\n\t\t\t\t#(and\n\t\t\t\t\t(>= (int %) (int \\A))\n\t\t\t\t\t(<= (int %) (int \\Z)))\n\t\t\t\tx)))", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 29, "code": "#(apply str (filter (fn [sym] (re-find #\"[A-Z]\" (str sym))) %))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 29, "code": "(fn [coll]\n  (->>\n    coll\n    (filter #(and (Character/isLetter %) (Character/isUpperCase %)))\n    (apply str)))", "user": "56cd110ee4b0ea9b8538f747"}, {"problem": 29, "code": "#(clojure.string/join (keep (fn [ch] (re-find #\"[A-Z]\" (str ch))) %))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 29, "code": "(fn capital [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "56ca6141e4b0ea9b8538f71a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56cd44fde4b0ea9b8538f749"}, {"problem": 29, "code": "(fn caps [s]\n  (letfn [(cap? [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))]\n    (apply str (filter cap? s))))\n\n; Better solutions\n; #(apply str (re-seq #\"[A-Z]\" %))\n; #(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 29, "code": "(fn [word]\n  (apply str (map \n              (fn [x y]\n                (if (= x y)\n                  \"\"\n                  x))\n              word\n              (clojure.string/lower-case word))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 29, "code": "(fn [st]\n  (apply str (filter #(Character/isUpperCase %) st)))", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x) )))", "user": "56cd67c1e4b0ea9b8538f74a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56be8649e4b0f26550335983"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 29, "code": "(fn [str1] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) str1)))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 29, "code": "(fn get-caps\n  [string]\n  (reduce (fn [caps s] (if (re-matches #\"[A-Z]\" (str  s)) (str caps s) caps)) \"\" string))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 29, "code": "(fn [s] (apply str (filter (set (map char (range 65 91))) s)))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 29, "code": "(fn\n  [string]\n  (clojure.string/join (map char (filter #(and (<= 65 %) (>= 90 %)) (mapcat (comp list int char) (seq string))))))", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d4266ce4b0ea9b8538f7b4"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter (fn [y] (Character/isUpperCase y)) x)))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 29, "code": "(fn [string]\n    (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) (seq string)) ))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 29, "code": "(fn [s]\n  (let [upper? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n    (apply str (filter upper? s))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 29, "code": "(fn filter-upcase\n  [strn]\n  (apply str (filter #(Character/isUpperCase %)  strn)))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 29, "code": "(fn [s] (->> s \n            (filter #(Character/isUpperCase %))\n            (apply str)))", "user": "56d15bfbe4b0ea9b8538f78d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 29, "code": "(fn a [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\" )", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 29, "code": "(fn [x] (apply str  (filter #(Character/isUpperCase %) x)))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 29, "code": "#(reduce (fn [res v]\n          (let [upper-case-chars  (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n                upper? (fn [c] (contains? upper-case-chars c))]\n            (if (upper? v)\n              (str res v)\n              res))) \"\" %)", "user": "560ee566e4b05f002753df57"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 29, "code": "(fn [n] (apply str (re-seq #\"[A-Z]\" n)))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 29, "code": ";; (fn [arg] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq arg))))\n(fn [arg] (apply str (re-seq #\"[A-Z]\" arg)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "506f1e12e4b09350ab4199f9"}, {"problem": 29, "code": "(fn [w] (apply str (filter #(Character/isUpperCase %) w)))", "user": "5313b4b6e4b08068f379ed0c"}, {"problem": 29, "code": "(fn [s] ((partial reduce str) (filter #(Character/isUpperCase %) s)))", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 29, "code": "; The following initial solution only supports ASCII characters, which is all that is required by the provided \n; test cases:\n; #(reduce str (re-seq #\"[A-Z]+\" %))\n; However, limitting to ASCII is a pretty big limitation.\n; User 'norman' provided a solution that leverages Clojure's Java interop to support single byte internationalized \n; charaters. For example, norman's solution satisfies the following:\n; (= (__ \"\u00dcfooB\u00dcR\") \"\u00dcB\u00dcR\")\n; The following is my own refinement of norman's solution, which also satisfies the above test case.\n(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))\n; Note that this solution does not support supplementary characters, because Java's char based API does not support\n; supplementary characters (https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#supplementary). The \n; following solution, which is dependent on Java 8, leverages Java's code point bsaed API, and thus supports \"all \n; Unicode characters, including supplementary characters.\" Unfortunately, at this time it does not appear that 4clojure\n; supports Java 8, so this is commented out.\n; (fn [s]\n;    (let [codePoints (filter #(Character/isUpperCase %) (iterator-seq (.iterator  (.codePoints s))))\n;          builder (StringBuilder.)]\n;      (doall (map #(. builder appendCodePoint (int %)) codePoints))\n;      (str builder)))", "user": "56dc34eae4b0ea9b8538f817"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter\n              \n              #(Character/isUpperCase %) coll )))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "56dc34a3e4b0ea9b8538f816"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 29, "code": "(fn getcaps [str-arg]\n  (apply str (filter #(Character/isUpperCase %) str-arg)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) %))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 29, "code": "(fn [s]\n   (let [finder (re-matcher #\"[A-Z]+\" s)]\n      (loop [acc \"\"]\n        (if-let [n (re-find finder)]\n          (recur (str acc n))\n             acc))))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 29, "code": "(fn [ls] (clojure.string/join (filter #(Character/isUpperCase %) (seq ls))))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 29, "code": "(fn [string]\n  (apply\n   str\n   (filter\n    (fn [x] (and (= (.toUpperCase (str x)) (str x)) (. Character (isLetter x))))\n    (seq string)\n    )\n   )\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56e08e4fe4b0ca2494a0960b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 29, "code": "(fn [s] (apply str\n         (re-seq #\"[A-Z]\" s)))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 29, "code": "(fn [s](->> s (re-seq #\"[A-Z]+\")clojure.string/join ))", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 29, "code": "(fn onlyupper [xs] (clojure.string/join (filter #(Character/isUpperCase %) xs)))", "user": "56e37659e4b03a7c14b85a44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "56cb77e0e4b0ea9b8538f734"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 29, "code": "(fn [is] (apply str (filter #(Character/isUpperCase %) is)))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 29, "code": "(fn [w] (clojure.string/join (re-seq #\"[A-Z]\" w)))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       seq\n       (filterv #(Character/isUpperCase %))\n       (apply str)))", "user": "550f2333e4b06e50f9beb173"}, {"problem": 29, "code": "(fn\n  [coll]\n  (clojure.string/join (filter (fn [x] (some #(= x %) (map char (range 65 91)))) coll)))", "user": "56bf78dae4b0f26550335989"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn[x] (Character/isUpperCase x)) (seq %\n                                                )))", "user": "56050f06e4b08b23635d3161"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 29, "code": "(fn [strin] (clojure.string/join (re-seq #\"[A-Z]\" strin)))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %) x )))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e3711de4b03a7c14b85a43"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 29, "code": "(fn [x]\n  (apply str \n       (re-seq #\"[A-Z]\" x)))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(re-find #\"[A-Z]\" %) (map str (seq string)))))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56491d05e4b0284900eef63a"}, {"problem": 29, "code": "(fn [l] (apply str (filter #(Character/isUpperCase %) l)))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "560d4994e4b05f002753df3c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 29, "code": "(fn [string]\n  (let [upper? #(java.lang.Character/isUpperCase %)]\n    (->> string (filter upper?) (apply str))))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %1))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase  %) (seq x))))", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 29, "code": "(fn [s]\n\t(clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 29, "code": "(fn [var1] \n  (apply str (filter #(Character/isUpperCase %) var1)))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 29, "code": "(fn myup [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\")\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "56ebf105e4b04a395b9a042c"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x))))s)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 29, "code": "(fn [s]\n  (->>\n  \ts\n  \t(seq)\n  \t(filter #(Character/isUpperCase %))\n  \t(apply str)))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) (seq x))))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56eed056e4b04a395b9a0454"}, {"problem": 29, "code": "(fn caps [s]\n  (if (empty? s)\n    nil\n    (let [fst (str (first s))\n          rst (rest s)]\n      (if (and (= fst (clojure.string/capitalize fst)) (Character/isLetter (first fst)))\n        (str fst (caps rst))\n        (caps rst)))))\n\n;; better solutions\n;; #(apply str (re-seq #\"[A-Z]\" %))\n;; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 29, "code": "(fn [input] (apply str (filter \n                    #(and \n                       (>= (compare \"a\" (str %1)) 0) \n                       (<= (compare \"A\" (str %1)) 0)\n                       ) input)))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 29, "code": "(fn get-caps [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 29, "code": "(fn [msg] (apply str (filter #(java.lang.Character/isUpperCase %) msg)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter \n              (fn [c] (some #{c} (map char (range 65 91)))) \n              s)))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 29, "code": "(fn ups [x] (apply str (filter (fn [y] (and (>= (int y) (int \\A)) (<= (int y) (int \\Z)))) x)))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 29, "code": "(fn getc [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 29, "code": "(fn justCap [col] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq col))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 29, "code": "(fn uppers [s]\n  (reduce str \"\"\n   (filter #(if (not= (.toLowerCase (str %)) (str %)) true false) s)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 29, "code": "(fn cap [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 29, "code": "(fn [arst] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq arst))))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 29, "code": "(fn[x](apply str (filter #(Character/isUpperCase %) x)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 29, "code": "(fn upper-only [input] (apply str (re-seq #\"[A-Z]\" input)))", "user": "56f45469e4b046a417f9205c"}, {"problem": 29, "code": "(fn\n  [s]\n  (loop [in (into [] s) out []]\n    (if (empty? in) (clojure.string/join \"\" out)\n      (if (and (> (int (first in)) 64) (< (int (first in)) 91))\n        (recur (rest in) (conj out (first in)))\n        (recur (rest in) out)))))", "user": "52420e2fe4b076e5d3121f48"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56ef0203e4b04a395b9a0457"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 29, "code": "(fn [wrd] (apply str (re-seq #\"[A-Z]\" wrd)))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 29, "code": "(fn upper [s]\n    (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56be350ce4b0f26550335981"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 29, "code": "(fn caps [s] (reduce (fn [acc ch] (if (and (>= (compare ch \\A) 0) (<= (compare ch \\Z) 0)) (str acc ch) acc)) \"\" s))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 29, "code": "(fn f[s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 29, "code": "(fn _ [arg] (apply str (filter #(Character/isUpperCase %) arg)))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56742817e4b05957ce8c612d"}, {"problem": 29, "code": "; #(apply str(re-seq #\"[A-Z]\" %))\n\n(fn [coll] (apply str (re-seq #\"[A-Z]+\" coll)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(= % (.toUpperCase %)) (re-seq #\"[a-zA-Z]\" s))))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 29, "code": "(fn [s] \n    (clojure.string/join\n    (filter (fn [char] (Character/isUpperCase char)) (seq s))))", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 29, "code": "#(apply str (filter (fn [l] (Character/isUpperCase l)) (seq %)))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 29, "code": "(fn [s]\n  (let [chars (seq s)\n        strs (map str chars)\n        caps (filter #(re-find #\"[A-Z]\" %) strs)\n        capstr (apply str caps)]\n    capstr)\n)", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(re-matches #\"[A-Z]\" %) (map str s))))", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 29, "code": "(fn [s]\n   (apply str (re-seq #\"[A-Z]\" s)))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56f070fee4b04a395b9a0478"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "56f4976ce4b046a417f9205f"}, {"problem": 29, "code": "(fn [s] (apply str (filter\n           #(and\n             (>= (int %) (int \\A))\n             (<= (int %) (int \\Z)))\n         (seq s))))", "user": "56f51879e4b046a417f92069"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 29, "code": "(fn[s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "56f4cedce4b046a417f92063"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "57006957e4b08d47c97781c8"}, {"problem": 29, "code": "(fn filter-caps \n  [s] \n  (apply str \n         (filter \n          #(re-matches #\"[A-Z]\" (str %)) \n          (seq s))))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 29, "code": "#(clojure.string/join (filter (set (map char (range 65 91))) %))", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57008afae4b08d47c97781ca"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (not (=  (first (clojure.string/lower-case x)) x))) (seq %)) )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "56faebc2e4b07572ad1a88c8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56f8b6efe4b07572ad1a88a5"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(#{\\H \\L \\O \\W \\R \\D \\Z \\A} %) x)))", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56fda2bae4b08d47c97781a6"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 29, "code": "(fn [string] (reduce str (filter #(Character/isUpperCase %) string)))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 29, "code": "(fn get-caps [string] \n     (apply str (re-seq  #\"[A-Z]\" string)))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5703eda3e4b08d47c9778200"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 29, "code": "(fn [palabra] (\nclojure.string/join (clojure.string/split palabra #\"[^A-Z]\")\n  ))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(Character/isUpperCase %) s)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 29, "code": "(fn get-caps [x]\n  (apply str (map char(filter #(and (>= % 65) (>= 90 %)) (map int x)))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 29, "code": "(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "57040195e4b08d47c9778202"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 29, "code": "(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x)))", "user": "57027310e4b08d47c97781e2"}, {"problem": 29, "code": "(fn upper\n  [s]\n  (let [is-upper? (fn [c] \n                   (let [n (int c)] \n                     (and (<= n (int \\Z)) \n                          (>= n (int \\A)))))\n        upper (filter is-upper? s)]\n        (apply str upper)))", "user": "56fe665be4b08d47c97781af"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(<= 65 % 90) (map int s)))))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 29, "code": "(fn [b]\n(apply str (seq (filter #(Character/isUpperCase %) b))))", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 29, "code": "(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 29, "code": "(fn foo [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)) ) ) s)))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 29, "code": "(fn [s] (apply str (filter (set (map char (range 65 91)))  s)))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 29, "code": "(fn [str1]\n   (apply str (filter #(Character/isUpperCase %) (seq str1)))\n  \n  )", "user": "545e5805e4b01be26fd74679"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 29, "code": "#(apply str (reduce\n     (fn[x y]\n     (if\n      (Character/isUpperCase   y)\n  \n     (conj x (str y))\n      (conj x (str \"\"))\n      )\n     )\n     []\n     %\n     )\n  )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "570306cae4b08d47c97781ec"}, {"problem": 29, "code": "#(reduce str(re-seq #\"[A-Z]\" %))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter\n           #(not\n             (nil?\n               (re-matches #\"[A-Z]\" (str %))\n               )) s)))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 29, "code": "(fn f [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(not (empty? %)) (re-seq #\"[A-Z]*\" s))))", "user": "56f3e77ee4b046a417f92058"}, {"problem": 29, "code": "(fn\n  [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 29, "code": "#(clojure.string/replace % #\"(?![A-Z]).\" \"\")", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 29, "code": "#(apply str (vec (filter (set (map char (range 65 91))) %)))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 29, "code": "(fn\n          [s]\n          (reduce str\n            (re-seq #\"[A-Z]\" s)))", "user": "57109477e4b09c608db70435"}, {"problem": 29, "code": "(fn only-capital-letters [a-str]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) a-str)))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "571077e8e4b09c608db70434"}, {"problem": 29, "code": "(fn [obj]\n  (apply str\n         (filter #(Character/isUpperCase %) obj)))", "user": "571107b3e4b09c608db7043f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %1) x)))", "user": "5710140fe4b09c608db7042e"}, {"problem": 29, "code": "(fn [input-string] \n         (apply str (filter #(Character/isUpperCase %) (seq input-string))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 29, "code": "(fn a [b] \n\t(reduce str (re-seq #\"[A-Z]\" b))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 29, "code": "(fn [raw-str] (apply str (filter #(Character/isUpperCase %) raw-str)))", "user": "5711b532e4b09c608db70449"}, {"problem": 29, "code": "; this one was a nightmare\n\n(fn [string]\n   (let [string-as-chars (seq string)\n         uppercase-chars (map char (range 65 91))]\n   (apply str\n     (filter\n       (fn [c] (some #(= c %) uppercase-chars))\n       string-as-chars))))", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "57122b20e4b09c608db70451"}, {"problem": 29, "code": "(fn [x] (apply str (concat (re-seq #\"[A-Z]+\" x))))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 29, "code": "(fn cappsonly [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [e] (. java.lang.Character isUpperCase e)) s)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 29, "code": "(fn [in] (apply str (re-seq #\"[A-Z]+\" in)))", "user": "5716616fe4b07c98581c3af5"}, {"problem": 29, "code": "(fn f [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "57152731e4b07c98581c3ad0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter (fn [char] (re-matches #\"[A-Z]\" char)) (clojure.string/split x #\"\"))))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\"  %))", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5710c24be4b09c608db70439"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5716845be4b07c98581c3afa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 29, "code": "(fn [x](apply str (re-seq #\"[A-Z]+\" x)))", "user": "57130fdae4b07c98581c3a96"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" (apply str %1)))", "user": "57016724e4b08d47c97781d6"}, {"problem": 29, "code": "(fn ups\n  [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 29, "code": ";apply str (filter #(Character/isUpperCase  %))\n\n(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "54fe5523e4b07d26eda61d41"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 29, "code": "(fn all-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "56f57481e4b046a417f92072"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter (fn [x] (and (>= (- x 65) 0) (>= (- 90 x) 0))) (map int s)))))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "570362ece4b08d47c97781f0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 29, "code": "(fn [cad] \n  (apply str (filter #(and \n             (> (int %) 64) \n             (< (int %) 91)) \n       (seq cad)\n       )))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 29, "code": "(fn [w] (apply str (re-seq #\"[A-Z]\"  w)))", "user": "5716cc16e4b07c98581c3b02"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "571d063ee4b0145328a76272"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5710b136e4b09c608db70437"}, {"problem": 29, "code": "(fn [lst]\n  (apply str (map char (filter #(<= (int \\A) %1 (int \\Z)) (map int lst)))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 29, "code": "(fn [x] \n  (apply str \n          (re-seq #\"[A-Z]\" x)))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (not (nil? (re-find #\"[A-Z]\" (str c))))) (vec s) )))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "571dd145e4b0145328a76283"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "571e6d73e4b0145328a76292"}, {"problem": 29, "code": "(fn [name] (clojure.string/join (filter #(Character/isUpperCase %) name)))", "user": "571eeb49e4b0145328a7629c"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "571b900ae4b07c98581c3b69"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4df73d64535d04ed9115e775"}, {"problem": 29, "code": "(fn cap-filter [cs] (apply str (filter #(Character/isUpperCase %) cs)))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 29, "code": "(fn\n  [str]\n      (clojure.string/join\n      (filter #(Character/isUpperCase %) (seq str))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "571a31e3e4b07c98581c3b47"}, {"problem": 29, "code": "(fn\n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 29, "code": "(fn getMayusculas\n  [string]\n  (apply str (re-seq #\"[A-Z]+\" string )))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 29, "code": "#(apply str (map (fn [s] s) (re-seq #\"[A-Z]+\" %)))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "571e819ae4b0145328a76294"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "571cd9dce4b0145328a76271"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (re-find #\"[A-Z]\" (str x))) %))", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 29, "code": "(fn[col](apply str (filter #(Character/isUpperCase %) col)))", "user": "5721cd3be4b0c5bde472c0ba"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 29, "code": "(fn getCaps [col] (apply str (filter #(Character/isUpperCase %) (seq col))))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>=(int %)(int \\A)) (<=(int %)(int \\Z)))s)))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 29, "code": "(fn o \n  [s] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57262196e4b0c5bde472c11e"}, {"problem": 29, "code": "#(->>\n     (re-seq #\"[A-Z]+\" %)\n     (apply str))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n    (re-seq\n      #\"[A-Z]+\"\n      string\n    )\n  )\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 29, "code": "(fn [s]\n  (let [capitals (set (map char (range 65 91)))]\n    (apply str (filter capitals s))))", "user": "516c3472e4b06f078fab251c"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 29, "code": "(fn [x] ( apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x))) ))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s))\n)", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "55a9fe1ce4b0988bba2ad947"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(re-find #\"[A-Z]\" (str %)) string)))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 29, "code": "(fn getCaps [string]\n  (apply str (filter\n               (fn isCaps [targetChar] (some #(= targetChar %) (into [] \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))\n               string)))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) (seq string) )))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 29, "code": "#(apply str (filter (fn [st] (Character/isUpperCase st)) %))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) (str text))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56f514cee4b046a417f92068"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 29, "code": "(fn \n  [word] \n  (apply str (re-seq #\"[A-Z]+\" word)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 29, "code": "(fn [coll] (apply str (re-seq #\"[A-Z]\" coll)))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 29, "code": "(fn filter-capital\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 29, "code": "(fn [st]\n    (apply str\n           (filter (fn [c] (<= 65 (int c) 91)) st)\n           )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 29, "code": "(fn f [s] (clojure.string/join (map #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 29, "code": "(fn\n  [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 29, "code": "(fn \n  [word] \n  (apply str\n         (filter #(Character/isUpperCase %) (seq word))))", "user": "54249bcce4b01498b1a71afb"}, {"problem": 29, "code": "(fn [txt]\n    (apply str (filter #(Character/isUpperCase %) txt)))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n#_(fn cap [s] \n  (apply str (filter #(not(nil? (re-matches #\"[A-Z]\" (str %))))s)))", "user": "52faf67ce4b047fd55837005"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "56620138e4b068f2fe63dc71"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "54cf54b1e4b018d918be98cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 29, "code": "(fn caps [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57286f16e4b0c5bde472c159"}, {"problem": 29, "code": "(fn getcaps [s] \n  (->> s \n     (filter #(and (>= (int %) 65) (<= (int %) 90)) ) ;A-Z\n     (apply str) )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "570243c4e4b08d47c97781dc"}, {"problem": 29, "code": "(fn [s]\n  (apply #'str\n         (filter #(java.lang.Character/isUpperCase %) s)))", "user": "57377ae8e4b0cd1946bd1046"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 29, "code": ";; #29\n(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 29, "code": "(fn a [b] (apply str (filter #(Character/isUpperCase %) b)))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 29, "code": "(fn [string]\n  (loop [lower (clojure.string/lower-case string) origin string result []]\n    (if (empty? lower)\n      (apply str result)\n      (recur (rest lower) (rest origin) (if (not= (first origin) (first lower))\n                            (conj result (first origin))\n                            result)))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 29, "code": "(fn my-fun [inp-seq] (apply str (filter #(Character/isUpperCase %1) inp-seq)))", "user": "571d9669e4b0145328a7627f"}, {"problem": 29, "code": "(fn [in]  (apply str (re-seq #\"[A-Z]\" in) ))", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5576961be4b05c286339e06f"}, {"problem": 29, "code": "(fn [str] (clojure.string/join (re-seq #\"[A-Z]\" str)))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 29, "code": "(fn [str] (clojure.string/join (filter #(Character/isUpperCase %) str)))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 29, "code": "#(reduce (fn [x y] (if (and (= (clojure.string/upper-case y) (str y)) (not= (clojure.string/upper-case y) (clojure.string/lower-case y))) (str x y) (str x))) \"\" %)", "user": "571172ece4b09c608db70446"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %1)\n                                 (clojure.string/lower-case %1))\n                          (seq s))))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) x)))", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 29, "code": "(fn get-caps [txt] \n  (apply str (filter (set (map char (range 65 91))) txt)))", "user": "570940a9e4b0b0fb43fd06aa"}, {"problem": 29, "code": "(fn [c] (apply str (re-seq #\"[A-Z]\" c)))", "user": "572a543ee4b0f4d77e651235"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "573cc62de4b05c31a32c0809"}, {"problem": 29, "code": "(fn only-upper [x] \n  (clojure.string/join \n   \"\" \n   (filter #(Character/isUpperCase %) x)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 29, "code": "(fn [s]\n   (apply str (remove #(not (Character/isUpperCase %)) s)))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 29, "code": "#(apply str (apply concat (re-seq #\"[A-Z]+\" %)))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 29, "code": "(fn [q] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq q))))", "user": "571edeeae4b0145328a7629b"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (re-find #\"[A-Z]\" (str c))) %))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 29, "code": "(fn [arr] (apply str (re-seq #\"[A-Z]+\" arr)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57029859e4b08d47c97781e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 29, "code": "(fn get-the-caps [coll] (apply str (re-seq #\"[A-Z]\" coll)))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 29, "code": ";#(apply str (re-seq #\"[A-Z]+\" %))\n(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 29, "code": "(fn [s] (apply str (loop [[letter & letters] (map char s) result '()] (cond (nil? letter) result  \n                             (or (> (int letter) 90) (< (int letter) 65))\n                                       (recur letters result) \n                                                 :else (recur letters (concat result (list letter)))))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 29, "code": "(fn [x]\r\n  (let [word_str (seq x)]\r\n    (clojure.string/join\r\n     (reverse (into () (filter #(.contains (range 65 91) (int %)) word_str))))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 29, "code": "(fn [haystack] (reduce str (re-seq #\"[A-Z]\" haystack)))", "user": "5722d621e4b0c5bde472c0d9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4fa436dce4b081705acca19b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 29, "code": "#(loop [rtnStr \"\" i 0]\n    (if (= i (count %))\n      rtnStr\n      (recur (if (<= 65 (int (nth % i)) 90)\n             (str rtnStr (nth % i))\n             rtnStr)\n      (inc i))))", "user": "57447d1ae4b009280f9f2b3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 29, "code": "(fn [coll]\n  (apply str\n    (filter #(Character/isUpperCase %) coll)\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 29, "code": "(fn [words] (apply str (re-seq #\"[A-Z]+\" words)))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^\\p{Upper}]\" \"\")", "user": "5745f616e4b009280f9f2b58"}, {"problem": 29, "code": "(fn [sentence]\n  (apply str (filter #(if (<= (int \\A) (int %) (int \\Z)) %) sentence)))", "user": "57227f10e4b0c5bde472c0cd"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57465526e4b009280f9f2b61"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (>= (compare c \\A) 0) (>= (compare \\Z c) 0))) s)))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "574311a5e4b05c31a32c0888"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 29, "code": "(fn parser\n  [s]\n  (clojure.string/join\n    (filter #((complement =) (str %) (clojure.string/lower-case %)) s)))", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 29, "code": "(fn caps\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57023e92e4b08d47c97781da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "573678eae4b0cd1946bd1034"}, {"problem": 29, "code": "(fn [word] (reduce str (filter\n                         #(and (>= (int %) (int (first \"A\")))\n                                (<= (int %) (int (first \"Z\"))))\n                         word)))", "user": "5749ce09e4b009280f9f2ba0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "56bb652ae4b0f26550335953"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "574af03ce4b02ea114799202"}, {"problem": 29, "code": "#(apply str (filter (fn isCapital [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90)  s)))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "574c66e1e4b02ea11479921d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 29, "code": "(fn [word]\n  (clojure.string/replace word #\"[^A-Z]\" \"\"))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 29, "code": "(fn [target]\n  (clojure.string/replace target #\"[^A-Z]\"  \"\"))", "user": "5570a388e4b09a3098a5252f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 29, "code": "(fn [sq]\n  (apply str (map char\n    (filter\n        #(and (>= % 65)\n              (<= % 90))\n        (map int (seq sq))))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 29, "code": "(fn cap [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 29, "code": "(fn foo [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "5740e26ee4b05c31a32c085a"}, {"problem": 29, "code": "(fn gtc[x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 29, "code": "(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57501de0e4b02ea11479926c"}, {"problem": 29, "code": "(fn filter-caps [s] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "user": "57501c83e4b02ea11479926b"}, {"problem": 29, "code": "(fn [base]\n  (apply str (filter\n      (fn [x] (let [y (int x)] (and (>= y (int \\A)) (<= y (int \\Z))))) base))\n  )", "user": "5736e12ee4b0cd1946bd103a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57539e04e4b02ea1147992ab"}, {"problem": 29, "code": "#(apply str (filter (fn [char] (not= (str char) (clojure.string/lower-case char))) %))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57488966e4b009280f9f2b8d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "575086e7e4b02ea114799276"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "574f0580e4b02ea114799253"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "574ef641e4b02ea11479924f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n\n;#(clojure.string/replace % #\"([^A-Z])\" \"\")\n\n;(fn [s] (apply str  (filter #(Character/isUpperCase %) s)))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]\" st)))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter (fn [c] (and\n                   (>= (int c) 65)\n                   (<= (int c) 90)))\n          xs)))", "user": "574ef99ae4b02ea114799250"}, {"problem": 29, "code": "(fn [s]\n         (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 29, "code": "(fn [x] (\n         apply str (\n                        filter #(\n                                 let [a (int %)] \n                                 (and (>= a (int \\A)) (<= a (int \\Z)))\n                                )\n                        x\n                        )\n         )\n  )", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 29, "code": "#( reduce str ( re-seq #\"[A-Z]\" % ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (filter #(not= 0 (compare (str %) (clojure.string/lower-case (str %))))\n                 (str s))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 29, "code": "(fn[x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 29, "code": "(fn [sq]\n  (clojure.string/join (re-seq #\"[A-Z]\" sq)))", "user": "57457b1ce4b009280f9f2b4c"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "5758b7fde4b02ea11479930f"}, {"problem": 29, "code": "(fn [value]\n  (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) value)))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 29, "code": "(fn [s]\n  \n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "57583451e4b02ea114799304"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %) x)))", "user": "574e8975e4b02ea114799244"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 29, "code": "(fn [string] (.replaceAll string \"[^A-Z]\" \"\"))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 29, "code": "(fn caps-filter\n          ([x]\n           (apply str (re-seq #\"[A-Z]+\" x))\n          )\n)", "user": "5759e317e4b02ea114799330"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"([^A-Z]+)\" \"\"))", "user": "575683aee4b02ea1147992dc"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 29, "code": "#(apply str (filter  (fn[x](Character/isUpperCase x)) %))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 29, "code": "(fn [stri]\n  (clojure.string/join (filter #(Character/isUpperCase %) stri)))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 29, "code": "(fn [x]\n    (apply str (re-seq #\"[A-Z]\" x)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 29, "code": "(fn f [x]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57599ed3e4b02ea114799323"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 29, "code": "(fn [x](clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "575ab695e4b02ea114799350"}, {"problem": 29, "code": "(fn [col]\n  (apply str (filter #(Character/isUpperCase %) col)))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "575dda55e4b02ea11479938c"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "57607706e4b08062f99a4e97"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "user": "57614948e4b0994c1922fb83"}, {"problem": 29, "code": "(fn [col] \n  (apply\n    str\n    (filter \n      #(re-find (re-pattern \"[A-Z]\") (str %))\n      col)))", "user": "57597fade4b02ea11479931d"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "575556fae4b02ea1147992c3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 29, "code": "(comp (partial reduce str) re-seq) #\"[A-Z]\"", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 29, "code": "(fn [n] (->> n seq (map str) (filter #(re-matches #\"[A-Z]\" %)) (apply str)))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "57642916e4b0994c1922fbee"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) (seq %)))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 29, "code": "(fn [x]\n    (apply str(filter #(java.lang.Character/isUpperCase %) x)))", "user": "566e5a03e4b0a866af6896d8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [chr] (Character/isUpperCase chr)) %))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 29, "code": "(fn [x] (apply str (map char (filter #(< 64 % 97) (map int x)))))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 29, "code": "(fn only-caps [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 29, "code": "(fn [in]\n  (->> in\n    (filter #(Character/isUpperCase %))\n    (apply str)))", "user": "5760d426e4b08062f99a4e9f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (vec s))))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 29, "code": "(fn [what] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) what)))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 29, "code": "(fn caps [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq str))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "575d16f8e4b02ea114799377"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57604a87e4b08062f99a4e91"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "576df252e4b0979f8965156f"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "576da825e4b0979f8965156c"}, {"problem": 29, "code": "(fn  [s]\n  (loop [coll s\n         result ()]\n    (cond\n      (empty? coll) (clojure.string/replace (clojure.string/join (reverse result)) #\"[^a-zA-Z]\" \"\")\n      (= (str (first coll)) (clojure.string/upper-case (first coll))) (recur (rest coll) (conj result (first coll)))\n      :else (recur (rest coll) result)\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 29, "code": "(fn [in] (clojure.string/join \n           (filter \n             #(not (nil? %)) \n             (map \n                #(re-matches #\"[A-Z]\" (str %)) \n                (seq in)))))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "575fec91e4b08062f99a4e89"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "576e3258e4b0979f89651574"}, {"problem": 29, "code": "(fn [x]\n  ((fn rec [y out]\n     (if (empty? y)\n       out\n       (if (Character/isUpperCase (first y))\n         (rec (rest y) (str out (first y)))\n         (rec (rest y) out)))) (seq x) \"\"))", "user": "57716e11e4b0979f896515b2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5454bb07e4b0e397800069da"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %1)) (seq s))))", "user": "57650419e4b0994c1922fc09"}, {"problem": 29, "code": "(fn[my-str] (apply str (#(re-seq #\"[A-Z]\" %) my-str)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) s)))", "user": "5760715de4b08062f99a4e96"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n         (filter \n          \t(fn [e] (re-matches #\"[A-Z]\" (str e)))\n          \ts\n          )))", "user": "577202d2e4b0979f896515c0"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "57762befe4b0979f8965162f"}, {"problem": 29, "code": "#(apply  str (re-seq #\"[A-Z]\" %))", "user": "57763002e4b0979f89651631"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))", "user": "558e963ae4b0277789237653"}, {"problem": 29, "code": "(fn\n  [x] \n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 29, "code": "(fn filter-uppercase [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5776e21de4b0979f89651642"}, {"problem": 29, "code": "(fn p29[a]\n   (apply str( filter #(Character/isUpperCase %) a)))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "5777cffae4b0979f89651651"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq (re-pattern \"[A-Z]+\") x)))", "user": "57750460e4b0979f8965160c"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(contains? (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))", "user": "57780e4fe4b0979f89651657"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "577629abe4b0979f8965162e"}, {"problem": 29, "code": "#(->> %\n     (re-seq #\"[A-Z]\")\n     (apply str))", "user": "577829f9e4b0979f8965165a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\"  %))", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) x))\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5778b78be4b0979f89651666"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int\\Z))) (char-array s))))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "577c12dfe4b0d3393e5deb2f"}, {"problem": 29, "code": "(fn [l]\n  (apply str (keep #(if (Character/isUpperCase %) %) l))\n  )", "user": "577a4dc2e4b0d3393e5deaf6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 29, "code": "(fn up [x] (apply str(filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "57752a2de4b0979f89651613"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 29, "code": "(fn f [s] (apply str \n                 (filter \n                  #(not= (str %) (clojure.string/lower-case %))\n                         s)))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 29, "code": "(fn [x]\n  (loop [new-str \"\" cnt 0]\n    (if (= cnt (count x))\n      new-str\n      (if (Character/isUpperCase (nth x cnt))\n        (recur (str new-str (nth x cnt)) (inc cnt))\n        (recur new-str (inc cnt))))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5776f39de4b0979f89651643"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^\\p{javaUpperCase}]\" \"\")", "user": "577a0dc3e4b0979f8965167b"}, {"problem": 29, "code": "(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "576d6266e4b0979f89651563"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 29, "code": "(fn [x]\n   (clojure.string/join (keep #(re-find #\"[A-Z]+\" (str %)) x)))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 97)) s)))", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 29, "code": "(fn [s] \n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "user": "5757142ae4b02ea1147992ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "578151ade4b0d36ec5835e83"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "574ff497e4b02ea114799266"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "577e1d14e4b0c8d87281f6e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5776385fe4b0979f89651632"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) coll)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join\n   (#(re-seq #\"[A-Z]\" %1) s)\n   )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 29, "code": "(fn [s] (apply str (filter\n    (fn [x]\n        (some #(= x %)\n              '(\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z)\n        )\n    )\n    (seq s)\n)))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(re-find #\"[A-Z]\" (str %)) c)))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 29, "code": "(fn [a] (apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) a)))", "user": "577da4eae4b0c8d87281f6d7"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 29, "code": "(fn only-upper-case [st]\n    (->> st (filter #(Character/isUpperCase %)) (apply str)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 29, "code": "(fn[x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "5770fb2ce4b0979f896515a5"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 29, "code": "(fn [s]\n  \"extract and return only capital letters from input string\"\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "577832f4e4b0979f8965165b"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (map char (get (group-by (fn [x] (and (<= x 91) (>= x 65))) (map int x)) true))))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "578a08d8e4b0ebec4cfb7537"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(<= 65 (int %) 90)))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 29, "code": "(fn get-capitals [string-to-parse]\n  (let [is-capital? (fn [letter]\n                      (contains? (set (map char (range 65 91))) letter))]\n    (reduce str (filter is-capital? string-to-parse))))", "user": "578ce779e4b0ebec4cfb7561"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 29, "code": "(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 29, "code": "(fn f [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "516064e5e4b009fba0926e26"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(and (= (str %) (clojure.string/upper-case (str %)) ) (Character/isLetter %)) x)))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) string)))", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 29, "code": "(comp clojure.string/join\n      (partial filter #(Character/isUpperCase %)))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 29, "code": "(fn my-caps [x] ((fn recursive-caps [a b]\n                  (if (empty? a)\n                    b\n                    (recursive-caps (subs a 1) (let [c (first a)]\n                                                 (if (java.lang.Character/isUpperCase c)\n                                                   (str b (str c))\n                                                   b))))) x \"\"))", "user": "577feed1e4b0d36ec5835e71"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))", "user": "566e6850e4b0a866af6896da"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 29, "code": "(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))", "user": "57758f5de4b0979f89651621"}, {"problem": 29, "code": "(fn [w] (clojure.string/join (filter #(Character/isUpperCase %) w)))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %)) string)))", "user": "576d398be4b0979f8965155d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)) seq)", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 29, "code": "(fn fi [s] \n (apply str (filter #(if (>= (compare % \\A)  0)  (>=  (compare \\Z %)   0) )  s) )\n )", "user": "579601c8e4b0e215f87e8492"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "57958dace4b0e215f87e8484"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55b4b0f5e4b01b9910ae297d"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(if (Character/isUpperCase %1) %1) (seq s) )))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 29, "code": "(fn [x] \n  (apply str \n   (filter #(not= (clojure.string/lower-case %) (str %)) x)))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "57972c9ee4b039eba2ecb0f2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5799b054e4b05b1deef9adc7"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(<= (int \\A) (int %) (+ (int \\Z) 1)) word)))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 29, "code": "(fn filterUpp [x] (let [arr (vec x)] (let [filtered (filter #(Character/isUpperCase %) arr)] (clojure.string/join \"\" filtered))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 29, "code": "(fn [vv] (apply str\n               (filter #(Character/isUpperCase %) vv)))", "user": "5646bb8fe4b0284900eef614"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 29, "code": "(fn[x](apply str (filter #(Character/isUpperCase %) x)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 29, "code": "#(reduce str (re-seq (re-pattern \"[A-Z]\") %))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (some (fn [y] (= x y)) (map char (range 65 91)) )) %))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 29, "code": "(fn upper [inp] (apply str (re-seq #\"[A-Z]+\" inp)))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "579c73fee4b05b1deef9ae08"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 29, "code": "(fn [str] (->> str (filter #(Character/isUpperCase %)) clojure.string/join))", "user": "57717915e4b0979f896515b3"}, {"problem": 29, "code": "#(->> %\n  (re-seq #\"[A-Z]\")\n  clojure.string/join)", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "579f4812e4b05302be0b72fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 29, "code": "#(apply str  (re-seq #\"[A-Z]\" %))", "user": "57783873e4b0979f8965165c"}, {"problem": 29, "code": "(let [is-upper-case (fn [c] (and (>= (int c) 65) (<= (int c) 90)))]\n  #(apply str (filter is-upper-case %)))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter (fn [y] (java.lang.Character/isUpperCase y))\n                                     (seq x))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "57509096e4b02ea114799277"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 29, "code": "(fn [parts]\n(apply str (filter #(Character/isUpperCase %) parts))\n  )", "user": "579be21fe4b05b1deef9adff"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 29, "code": "(fn [xs] \n  (apply str \n         (filter #(Character/isUpperCase %) \n                 xs)))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57a61332e4b0a96607956203"}, {"problem": 29, "code": "#(apply str (filter \n   (fn [x] \n     (some \n      #{x}\n      \"QWERTYUIOPASDFGHJKLZXCVBNM\")) %))", "user": "54a1c22fe4b09f271ff37c4c"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "571d1234e4b0145328a76274"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))", "user": "577154ffe4b0979f896515b1"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "57a774e4e4b0a96607956213"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57a4ffdce4b0a966079561f3"}, {"problem": 29, "code": "#(clojure.string/join(re-seq #\"[A-Z]\" %))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57733764e4b0979f896515e0"}, {"problem": 29, "code": "(fn foo [l] (clojure.string/join (filter #(Character/isUpperCase %) l)))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(< 64 (int %) 91) (seq s))))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not= (str %)\n                            (clojure.string/lower-case %))\n                     s)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 29, "code": "(fn my-filter [s]\n    (->> s\n         (filter #(re-matches #\"[A-Z]\" (str %)))\n         (apply str)\n         )\n    )", "user": "57985f98e4b039eba2ecb114"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "57619fc9e4b0994c1922fb93"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57a8352fe4b0a9660795621c"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") clojure.string/join)", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) %))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case (str %))) s)))", "user": "57abff53e4b0b8559636fc81"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 29, "code": "(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5075e374e4b09049dea827a5"}, {"problem": 29, "code": "(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 29, "code": "(fn [x]\n  (let [upchars (into #{} (map char (range 65 (+ 65 26))))]\n    (apply str (seq (filter #(contains? upchars %) (seq x))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 29, "code": "(fn filter-cap [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 29, "code": "(fn [x] (->> x seq (filter #(Character/isUpperCase %)) (apply str)))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 29, "code": "(fn[s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(not (= (clojure.string/lower-case %) (str %))) x)))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 29, "code": "(fn [arg] (loop [final \"\" words arg letter \\a]\n             (if (empty? words)\n               final\n               (recur\n                 (if (Character/isUpperCase letter) (str final letter) final)\n                 (drop 1 words)\n                 (first words))\n               )\n             )\n   )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 29, "code": "(fn [x] (->>\n             (char-array x)\n             (seq)\n             (map int)\n             (filter #(and (if (>= % 65) true false) (if (<= % 90) true false)))\n             (map char)\n             (apply str)))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 29, "code": "(fn [x] \n  (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 29, "code": "#(clojure.string/replace % #\"([a-z[, !(&*#$][0-9]])\" \"\")", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 29, "code": "(fn [instr]\n  (loop [in instr out \"\"]\n    (cond (empty? in) out\n          :else (do\n                  (if (re-matches #\"[A-Z]+\"  (str (first in)))\n                    (recur (rest in) (str out (first in)))\n                    (recur (rest in) out))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 29, "code": "#(apply str (filter (fn[c](<= (int \\A) (int c) (int \\Z))) %))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (<= 65 (int x) 90)) %))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 29, "code": "#(apply str (re-seq  #\"[A-Z]\" %))", "user": "572af688e4b0f4d77e651249"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 29, "code": "#(apply str (filter (fn[c] (re-find #\"[A-Z]\" (str c))) %))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 29, "code": "#(apply str \n        (filter \n \t\t  (fn [n]\n            (and \n   \t\t\t  (>= (int n) 65) \n   \t\t\t  (<= (int n) 90))) %))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 29, "code": "#(reduce str(filter (set (map char (range 65 91))) %))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 29, "code": "(fn ex [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 29, "code": "(let [isAlpha? (fn [y] (let [yy (int y) aa (int \\a) zz (int \\z) AA (int \\A) ZZ (int \\Z)]  (and (>= yy AA) (<= yy ZZ)) ) )]\n (fn [x] (apply str (filter isAlpha? (map (fn [z] z) x)))))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57b98108e4b0fbc9809a27ef"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 29, "code": "(fn [x]                                                                    \n\t(clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %1))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"\\p{javaUpperCase}\" s)))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5386f784e4b06839e8705f17"}, {"problem": 29, "code": "(fn fil[x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "57bbe96be4b05aa3c4741c34"}, {"problem": 29, "code": "(fn [st]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" st)))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 29, "code": "(fn [i] (apply str (filter #(Character/isUpperCase %) (seq i))))", "user": "5790329ee4b0ebec4cfb75a7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "577412c6e4b0979f896515f6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "56684356e4b04acd4f672de4"}, {"problem": 29, "code": "(fn x[st]\n  (apply str (re-seq #\"[A-Z]\" st)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 29, "code": "(fn [a-str] (apply str (filter #(Character/isUpperCase %) (seq a-str))))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \n    (filter \n      #(and \n        (>= (int %) (int \\A)) \n        (<= (int %) (int \\Z)))\n      s)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) (seq word))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "57a1f401e4b0c3d858beb8f4"}, {"problem": 29, "code": "(fn [s] (apply str\n          (filter \n           (fn [c] (let [c (int c)\n                         a (int \\A)\n                         z (int \\Z)]\n                     (and (>= c a) (<= c z))))\n           (map identity s))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 29, "code": "(fn test [x]\n  (letfn [(captial? [x]\n                    (and (< (int x) (+ (int \\Z) 1))\n                         (> (int x) (- (int \\A) 1))))]\n    (apply str (filter captial? x))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 29, "code": "#(apply str (for [ch % :when (and (> (int ch) 64) (< (int ch) 91))] ch))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 29, "code": "(fn [string]\n  (->>\n   (filter (fn [c] c) string)\n   (filter (set (map char (range 65 91))))\n   (apply str)))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 29, "code": "(fn get-the-caps\n  [some-string]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) some-string)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")\n#_(clojure.string/replace % #\"[^A-Z]+\" \"\")\n\n#_(apply str (re-seq #\"[A-Z]\" %))\n\n#_(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))\n#_(apply str (filter (set (map char (range 65 91))    ) %))\n#_(apply str (filter (fn [c] (Character/isUpperCase c)) %))\n#_(apply str (filter (fn [c] (< 64 (int c) 91)        ) %))\n\n#_(comp (partial apply str) (partial re-seq #\"[A-Z]\"))\n\n#_(comp (partial apply str)\n      (partial filter \n               (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 29, "code": "(fn [a] (apply str(filter #(Character/isUpperCase %)a)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "57bfb321e4b05aa3c4741c83"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n  (filter (fn [c] (Character/isUpperCase c)) s))\n)", "user": "57c3c7e6e4b05aa3c4741cc4"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 29, "code": "(fn [x]\n      (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" (apply str x))))", "user": "5644611be4b0284900eef5f1"}, {"problem": 29, "code": "#(reduce str(re-seq #\"[A-Z]\" %))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(apply <= (map int [\\A % \\Z])) s)))", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 29, "code": "(fn [v ]\n   (reduce str \"\"\n           (filter #(and\n                     (Character/isLetter  %)\n                     (= (str %)\n                             (clojure.string/upper-case  %) ))\n                   (seq v))))", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 29, "code": "(fn [x]\n   (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (let [i (int c)] (and (> i 64) (< i 91)))) %))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (<= 0 (compare % \\A)) (>= 0 (compare % \\Z))) (seq s))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (clojure.string/join \"\"))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "558e160ce4b027778923764c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 29, "code": "(fn [text](clojure.string/join (re-seq #\"[A-Z]\" text)))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 29, "code": "(fn [x] (#(clojure.string/replace %  #\"[^A-Z]\" \"\") x))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join \n   (map str (filter #(re-matches #\"[A-Z]\" (str %)) string))))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 29, "code": "#(reduce str (re-seq (re-pattern \"\\\\p{Upper}+\") %))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 29, "code": "; using filter\n;(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))\n\n; using re-seq\n(fn [input]\n   (apply str (re-seq #\"[A-Z]\" input)))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 29, "code": "(fn [str-to-test] (apply str (filter #(java.lang.Character/isUpperCase %) str-to-test)))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 29, "code": "(fn [items](apply str (filter #(and (>= (int \\Z) (int %1)) (<= (int \\A) (int %1))) (seq items))))", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 29, "code": "(fn [input] (clojure.string/join (filter #(not (= (str %) (clojure.string/lower-case %))) (seq input))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 29, "code": "(fn [st] (clojure.string/replace st #\"[^A-Z]\" \"\"))", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 29, "code": "(fn [st] \n  (apply str \n   (filter \n    #(Character/isUpperCase %)\n    st)))", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57a775bbe4b0a96607956214"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 29, "code": "(fn only-capital\n  [s]\n  (reduce str \"\" (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "4f0d5338535d0136e6c22316"}, {"problem": 29, "code": "(fn capials [x] \n  (if (= x []) \"\"\n   (let [i (first x)]\n     (if (and (>= (compare i \\A) 0) (<= (compare i \\Z) 0))\n       (str i (capials (rest x)))\n       (capials (rest x))))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 29, "code": "(fn [word] (apply str \n                  (filter #(re-matches #\"[A-Z]\" (str %))\n                          (seq word)\n                   )\n             )\n  )", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 29, "code": "(fn [inp] \n  (apply str \n         (map char \n              (filter #(and (>= % (int \\A)) \n                           (<= % (int \\Z)))\n                      (map int inp))\n              )\n  )\n)", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (not= (str y) (clojure.string/lower-case y)))\n          (seq x))))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 29, "code": "(fn [the-string] (apply str (re-seq #\"[A-Z]\" the-string)))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 29, "code": "(fn [li] (reduce str (map #(if  ( < (dec (int \\A)) (int %) (inc (int \\Z))) %) (seq li))))", "user": "57d7ca32e4b0bd073c2023df"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 29, "code": "(fn getCaps [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 29, "code": "(fn [value]\n  (apply str (filter #(Character/isUpperCase %) value)))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57760c89e4b0979f8965162a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57dace50e4b0bd073c202416"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" % ))", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 29, "code": "reduce (fn [x y]\n          (if ((comp #(and (>= % 65) (<= % 97)) int) y)\n            (str x y)\n            x\n            )\n          ) \"\"", "user": "57dd3ae3e4b0bd073c20243d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57dda21be4b0bd073c202445"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 29, "code": "(fn [x] (apply str (filter \n         #(and \n           (<= (int \\A) (int %) (int \\Z))\n           (= (str %) (clojure.string/upper-case %)))\n         (seq x))))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (map #(int %))\n       (filter #(> % 64))\n       (filter #(< % 91))\n       (map #(char %))\n       (apply str)\n      )\n  )", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 29, "code": "(fn [arg]\n\t(apply str (filter #(Character/isUpperCase %) arg)))", "user": "57d13683e4b0bd073c202368"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 29, "code": "(fn [input-str] (->> (filter #(Character/isUpperCase %) input-str)\n                        (apply str)))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 29, "code": "(fn [src] (apply str (for [x (seq src) :when (re-matches #\"[A-Z]\" (str x))] x)))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 29, "code": "(fn f [s] (apply str (reverse (reduce into () (re-seq #\"[A-Z]\" s)))))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 29, "code": "(fn filterUpper\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "57ce6090e4b0c746388ab8ab"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51b8e020e4b050a1176cd69e"}, {"problem": 29, "code": "(fn [text] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) text)))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (and (<= (int a) (int \\Z))\n                                     (>= (int a) (int \\A))))\n                        (vec %)))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 29, "code": "(fn capital [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 29, "code": "(comp \n \tclojure.string/join \n \t(partial re-seq #\"[A-Z]\"))", "user": "57e30d38e4b0bfb2137f5a92"}, {"problem": 29, "code": "; (fn [s]\n;  (apply str\n;    (filter\n;      #(and (>= (int %) 65) (<= (int %) 90))\n;      s)))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %) )", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "57e5052ae4b0bfb2137f5ace"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 29, "code": "(fn get-caps\n  ([xs] (get-caps xs \"\"))\n  ([xs acc]\n   (if (seq xs)\n     (cond (not (Character/isLetter (first xs))) (recur (rest xs) acc)\n           (= (clojure.string/upper-case (first xs)) (str  (first xs))) (recur (rest xs) (str acc (first xs)))\n           :else (recur (rest xs) acc))\n     acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "57e3527ce4b0bfb2137f5a99"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n  (filter\n   (fn [ji] (false? (= (str ji) (.toLowerCase (str ji)) )) )\n   (vec x)\n   )\n   )\n  )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 29, "code": "(fn[s](clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (.toLowerCase (str %)) (str %)) x)))", "user": "57df9f60e4b0bd073c202467"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[a-z0-9\\W]\" \"\")", "user": "57942207e4b0e215f87e8469"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 29, "code": "(fn filter-caps-chars [chrs]\n  (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) chrs)))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 29, "code": "(fn uppersOnly [string]\n  (apply str (re-seq (re-pattern \"[A-Z]+\") string)))", "user": "57974188e4b039eba2ecb0f4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 29, "code": "(fn [s] (apply str (filter (set (map char (range 65 91))) s)))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ecf8b2e4b0bfb2137f5b8b"}, {"problem": 29, "code": ";reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\"\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 29, "code": "#(let [inp (.getBytes %)]\n      (loop [in inp\n               out \"\"]\n       (if (empty? in)\n         out\n          (if (and (> (first in) 64) (< (first in) 91))\n            (recur (next in) (str out (char (first in))))\n            (recur (next in) out)))))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 29, "code": ";(apply str (filter #(Character/isUpperCase %))\n\n#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 29, "code": "(fn caps [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 29, "code": "(fn [val] (apply str (filter #(Character/isUpperCase %) val)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 29, "code": "(fn [a-string]\n  (reduce (fn [acc x]\n            (if (< 64 (int x) 91)\n              (str acc x)\n              acc))\n          \"\"\n          a-string))", "user": "574e84e0e4b02ea114799243"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) (seq a))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "57ef7f0ee4b0bfb2137f5bd9"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %) )", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57d0679ee4b0bd073c202359"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "56483f45e4b0284900eef62b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(some #{%} (map char (range (int \\A) (inc (int \\Z))))) (seq s))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 29, "code": "(fn [y] \n\t\t(reduce str \n\t\t\t(filter  \n\t\t\t\t(fn [x] (= (clojure.string/upper-case x) x))\n\t\t\t\t(map \n\t\t\t\t\tstr \n\t\t\t\t\t(seq (re-seq #\"[a-zA-Z]\" y) )\n\t\t\t\t)\n\t\t\t) \n\t\t)\n\t)", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 29, "code": "(fn [lst]\n  (apply str (filter #(Character/isUpperCase %) (seq lst)))\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 29, "code": "(fn [word] \n  (apply str \n         (filter \n          #(and (> (int %) 64) \n                (< (int %) 91)) \n          word)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53194ba3e4b08068f379ed7a"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (map char\n      (filter \n        #(and (<= 65 %) (<= % 90))\n        (map int s)))))", "user": "57f4ace3e4b07bbd65c32b2b"}, {"problem": 29, "code": "(fn upper-case [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 29, "code": "(fn [string]\n  (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]\" string)))", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(not= (str %) (clojure.string/lower-case %))))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 29, "code": "#(apply str (filter (fn [x](and (>= (int x) (int \\A)) (<=  (int x) (int \\Z)))) (seq %)))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (Character/isUpperCase s)) %))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 29, "code": "(fn  [lst]\n   (clojure.string/join   (filter  #(Character/isUpperCase %) lst)))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 29, "code": "(fn [txt] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq txt))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 29, "code": "(fn get-caps \n  [string] \n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 29, "code": "(fn getCaps\n  [seq]\n(apply str (re-seq #\"[A-Z]+\"seq)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 29, "code": "(fn [phrase] (clojure.string/join (filter (fn [i] (some #{i} [\\H \\L \\O \\W \\R \\D \\A \\Z \\F])) (seq phrase))))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 29, "code": "(fn [xs] \n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 29, "code": "(fn caps[x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 29, "code": "(fn\n  [string]\n (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter (fn [^Character c] (Character/isUpperCase c))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "user": "57f81524e4b0d3187e900913"}, {"problem": 29, "code": "(fn capitalize\n\t[cadena]\n\t(apply str (re-seq #\"[A-Z]+\" cadena)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) col)))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 29, "code": "(fn getuppercase\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str(filter (set (map char (range 65 91))) s)))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) (seq s))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 29, "code": "(comp clojure.string/join #(re-seq #\"[A-Z]+\" %))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 29, "code": "(fn [s]\n  (let [uca (int \\A)\n        ucz (int \\Z)]\n    (apply str (filter #(<= uca (int %) ucz) s))))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 29, "code": "(fn caps\n  [cad]\n  (apply str (re-seq #\"[A-Z]\" cad)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 29, "code": "reduce (fn [x y]\n           (if ((into #{} (map char (range 65 92))) y)   (str x y)    x)\n           \n           \n           \n           \n           ) \"\"", "user": "57f28b22e4b0511f1d294def"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "57f81549e4b0d3187e900918"}, {"problem": 29, "code": "(fn\n \t[n]\n        (reduce str (re-seq #\"[A-Z]\" n)))", "user": "57f81532e4b0d3187e900914"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [%](Character/isUpperCase %)) (seq %)))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter \n   (fn [x]\n     (Character/isUpperCase x))\n   coll)))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 29, "code": "(fn ilc [stri]\n   (apply str (filter #(Character/isUpperCase %) stri)))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 29, "code": "#(let [caracteres (map int %) caps (set (range (int \\A) (inc (int \\Z))))]\n   (apply str (map char (for [c caracteres :when (contains? caps c)] c))))", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 29, "code": "(fn check [x & [y]] \n   (if (= (first x) nil)  \n     (do y)\n     (if (and (> (int (first x)) 64)  (< (int (first x)) 92) )\n       (do (check (rest x) (str y (first x))))\n       (do (check (rest x) y))\n     )\n   ))", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 29, "code": "(fn uppc\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "57f81569e4b0d3187e900919"}, {"problem": 29, "code": "(fn [lst] (reduce str (filter #(Character/isUpperCase %) lst)))", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 29, "code": "(fn [s]\n    (let [caps-only (filter #(and (>= (int %) (int \\A))\n                                  (<= (int %) (int \\Z))) s)]\n      (clojure.string/join caps-only)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 29, "code": "(fn [st] (apply str\n                 (filter #(Character/isUpperCase %) st)))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 29, "code": "(fn [s](reduce str (re-seq #\"[A-Z]\" s)))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 29, "code": "(fn [s](apply str (re-seq #\"[A-Z]+\" s)))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 29, "code": "(fn [in] (apply str (filter #(Character/isUpperCase %) in)))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53b14dfce4b047364c04448d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 29, "code": "#(let [matcher (re-matcher #\"[A-Z]+\" %)]\n   (loop [a (re-find matcher) ret \"\"]\n     (if (nil? a)\n       ret\n       (recur (re-find matcher) (str ret a)))))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 29, "code": "(fn [strn] (apply str (filter #(Character/isUpperCase %) strn)))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 29, "code": ";#(apply str (re-seq #\"[A-Z]+\" %))\n#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 29, "code": ";;#(apply str (re-seq #\"[A-Z]+\" %))\n(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 29, "code": "(fn[s](apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n      (filter #(not= (str %) (clojure.string/lower-case %)) s))\n)", "user": "580e2941e4b0849f6811b74e"}, {"problem": 29, "code": "(fn\n ([sq]\n  (loop [lst sq acc []]\n    (if (empty? lst)\n      (apply str acc)\n      (let [fst (first lst) rst (rest lst)]\n        (if (re-find #\"[A-Z]\" (str fst))\n          (recur rst (into acc (str fst)))\n          (recur rst acc)))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 29, "code": ";(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))\n;#(reduce str (re-seq #\"[A-Z]\" %))\n#(apply str(re-seq #\"[A-Z]\" %))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 29, "code": "(fn fstr [s]\n  (cond\n   (= s '()) nil\n   (Character/isUpperCase\n    (first s))\n   (str (first s) \n        (fstr (rest s)))\n   :else (fstr (rest s))))", "user": "58138439e4b0f478707a0611"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "580c1e9ae4b0849f6811b719"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58136679e4b0f478707a060d"}, {"problem": 29, "code": "(fn [word]\n    (clojure.string/join (filter #(Character/isUpperCase %) word)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "57762e67e4b0979f89651630"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 29, "code": "(fn [s]\n  (->>\n   (re-seq #\"[A-Z]\", s)\n   (clojure.string/join \"\")\n   )\n  )", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "56018b59e4b04bb52996e18c"}, {"problem": 29, "code": "(fn x [coll]\n (apply str\n  ((fn caps [coll]\n    (when-let [s (seq coll)]\n     (let [c (int (first s))]\n      (if (and (>= c (int \\A) ) (<= c (int \\Z)))\n       (cons (char c) (caps (rest s)))\n       (caps (rest s))))))\n     coll)))", "user": "581a703de4b0e114eb51a005"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (not= (str x) (clojure.string/lower-case x))) string)))", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 29, "code": "(fn[s](->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "56255e2de4b00a550fc90297"}, {"problem": 29, "code": ";(fn [s] (apply str (filter #(Character/isUpperCase %) s)))\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 29, "code": "(fn [text]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" text))\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 29, "code": "(fn [se] (apply str (filter #(Character/isUpperCase %) se)))", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 29, "code": "(fn [string]\n  (loop\n    [[k & ks] string\n     accum []]\n    (let [new-accum (if (Character/isUpperCase k)\n                        (conj accum k)\n                        accum)]\n      (if (nil? ks)\n          (apply str new-accum)\n          (recur ks new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 29, "code": "(fn [s] (apply str  (filter #(Character/isUpperCase %) s)))", "user": "576d8699e4b0979f89651568"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 29, "code": "(fn [xs] \n  (apply \n   str (filter #(Character/isUpperCase %) xs)))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 29, "code": "(fn caps [s] (apply str (for [t s\n      :let [c t]\n      :when (and (> 91 (int t)) (< 64 (int t))) ] c)))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57465429e4b009280f9f2b60"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 29, "code": "(fn [l] \n  (apply str (filter \n   (fn [x] (some #(= x %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") ))\n   (seq l)\n  ))\n)", "user": "5821dbb9e4b04b46fc4b0f86"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "58247423e4b051871117bec5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "518261a4e4b0f2adb7336523"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(and (<= (compare % \\Z) 0) (>= (compare % \\A) 0))) (apply str)))", "user": "5823c717e4b051871117beb2"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58254a11e4b051871117bed9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 29, "code": "(fn [x]\n  (let [ is-upper? (fn [y] (not= (clojure.string/lower-case y) (str y))) ]\n    (apply str (filter is-upper? x))\n  ))", "user": "582835cbe4b051871117bf30"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5813a865e4b0f478707a0615"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 29, "code": "(fn caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 29, "code": "(fn [a]\n  (clojure.string/join\n   (filter #(= (clojure.string/upper-case %) %)\n           (map str (seq (re-seq #\"[a-zA-Z]\" a))))))", "user": "5829bc55e4b051871117bf49"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 29, "code": ";(fn [x] (re-seq #\"[A-Z]\") x)\n(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x) ) )", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "582c526ae4b051871117bf88"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "582e0afde4b051871117bfd5"}, {"problem": 29, "code": "(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))", "user": "58299e03e4b051871117bf46"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s)))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58248186e4b051871117bec6"}, {"problem": 29, "code": "(fn [mixed-string] (-> mixed-string\n                        (clojure.string/replace #\"[^A-Z]\" \"\")))", "user": "581badbde4b04b46fc4b0ed9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58303fc3e4b051871117c006"}, {"problem": 29, "code": "(fn [string]\n  ;; Java InerOp. Character.isUpperCase() instance method\n  (let [upper-only (filter #(Character/isUpperCase %1) string)]\n\t(if (empty? upper-only) \n      \"\"\n      ;; upper-only is a list of chars, need to convert to a string\n      (reduce #(str %1 %2) upper-only))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5779556de4b0979f8965166e"}, {"problem": 29, "code": "(fn [s] (apply str(re-seq #\"[A-Z]\" s)))", "user": "582dc562e4b051871117bfcb"}, {"problem": 29, "code": "(fn\n  [string]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))", "user": "582bd5fae4b051871117bf7b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "582589b2e4b051871117bedd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (clojure.string/join \"\"))", "user": "583166c1e4b051871117c025"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 29, "code": "#(apply str (apply concat (re-seq #\"[A-Z]\" %)))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 29, "code": "(fn t[x](if\n          (empty? x)\n          \"\"\n          (let [c (first x)]\n          (if (. Character isUpperCase c)\n            (str c (t (rest x)))\n            (str (t (rest x)))\n            )\n            )\n          )\n  )", "user": "583019b8e4b051871117bfff"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s))\n  )", "user": "582a5174e4b051871117bf59"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "582a6a85e4b051871117bf5d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58375635e4b089d5ab817d14"}, {"problem": 29, "code": "(fn [string] \n  (apply str \n         (filter #(Character/isUpperCase %) string)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 29, "code": "(fn[s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "58376b71e4b089d5ab817d18"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5838337de4b089d5ab817d24"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "580f9585e4b0f478707a05b5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 29, "code": "(fn [string](apply str (re-seq #\"[A-Z]\" string)))", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll))\n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 29, "code": "(fn [s] (apply str  (filter #(not= (str %) (clojure.string/lower-case (str %))) (seq s))))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "56f0714de4b04a395b9a0479"}, {"problem": 29, "code": "(fn [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 29, "code": "#(clojure.string/replace % #\"(g?)[^A-Z]\" \"\")", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 29, "code": "(fn only-uppercase [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5686b0c0e4b0dcc4269f4056"}, {"problem": 29, "code": "(fn [s]\n    (reduce str (re-seq #\"[A-Z]+\" s))\n  )", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "582d7569e4b051871117bfbe"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5844e6f4e4b089d5ab817e5a"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 29, "code": "(fn [arg] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" arg)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 29, "code": "(fn up [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))", "user": "5842d06be4b089d5ab817e22"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 29, "code": "(fn [in] (apply str (filter #(Character/isUpperCase %) in)))", "user": "5845720de4b089d5ab817e68"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "524379a4e4b076204b44fac0"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(and (< (int %) 91) (> (int %) 64)) s)))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 29, "code": "#(apply str (filter (fn[b](Character/isUpperCase b)) %))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 29, "code": "(fn all-caps\n  [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5027f37be4b01614d1633ff1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "58408643e4b089d5ab817deb"}, {"problem": 29, "code": "(fn [s](apply str (re-seq #\"[A-Z]\" s)))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)\n   )\n  )", "user": "584b6a2be4b089d5ab817efd"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 29, "code": "(fn [x]\n  (apply str \n         (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 29, "code": "#(apply str (filter (fn [ch] (Character/isUpperCase ch)) %) )", "user": "5832be57e4b089d5ab817c86"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "57ebd51ce4b0bfb2137f5b68"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "50b25edae4b03ea88043355e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"(?![A-Z]).\" \"\")", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter #(= 0 (compare (str %) (clojure.string/upper-case %)))\n                 (filter #(re-matches #\"[a-zA-Z]\" (str %)) s))))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 29, "code": "(fn [string]\n    (reduce str (filter #(Character/isUpperCase %) (concat (apply vector string))))\n)", "user": "5838d5ede4b089d5ab817d32"}, {"problem": 29, "code": "(fn get-the-caps [x]\n    (apply str (filter (fn is-caps [x]\n  (not= (str x) (clojure.string/lower-case x))) (map char x))))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (re-seq #\"[A-Z]+\" word)))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 29, "code": "(fn my-caps [s]\n(->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "583ed2d1e4b089d5ab817dbf"}, {"problem": 29, "code": "(fn [fig] (apply str ((fn [x] (filter #(re-find (re-matcher #\"\\p{Upper}\" %)) (clojure.string/split x #\"\"))) fig)))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 29, "code": "reduce  #(if (Character/isUpperCase %2 ) (str %1 %2) %1) \"\"", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 29, "code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 29, "code": "(fn getcaps [s]\n  (apply str\n         (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))", "user": "58543a59e4b07779d46863f5"}, {"problem": 29, "code": ";;#(clojure.string/replace %  #\"[^\\p{Lu}]\" \"\")\n#(apply str (re-seq #\"\\p{Lu}\" %))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (filter #(and (>= (int %)\n                        65)\n                     (<= (int %)\n                         93)))\n       (map char)\n       (apply str)))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 29, "code": "(fn [x] (apply str(re-seq #\"[A-Z]\" x)))", "user": "585481e0e4b07779d46863fe"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]\" %))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 29, "code": "(fn [string]\n (apply str\n   (filter (fn [c] (Character/isUpperCase c)) (seq string))))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 29, "code": "#(apply str (re-seq (re-pattern \"[A-Z]+\") %))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x) ) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 29, "code": "(fn get-caps [input-string]\n  (let [only-uppercase-char-seq (filter #(Character/isUpperCase %) input-string)]\n    (apply str only-uppercase-char-seq)))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 29, "code": "(fn get-caps [txt]\n\t(apply str (filter #(Character/isUpperCase %) txt))\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5861cbd0e4b0f14aab7c87fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n         (filter (set (map char (range 65 91)))\n           string)))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5858f0cce4b0f14aab7c8727"}, {"problem": 29, "code": "#(clojure.string/join (re-seq  #\"[A-Z]\" %))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 29, "code": "(fn [chars]\n  (let [upper-letter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q\n                       \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n    (->> (filter #(contains? upper-letter %) (vec chars))\n         (apply str))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 29, "code": "(fn [a-string]\n   (clojure.string/replace\n    a-string\n    #\"[^A-Z]\"\n    \"\"))", "user": "580d2788e4b0849f6811b730"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51456858e4b0e88796073408"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %1) x)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 29, "code": "(fn [s]\n\t(apply str (re-seq #\"[A-Z]\" s)) \n)", "user": "58670d13e4b0f14aab7c8871"}, {"problem": 29, "code": "(fn [st]\n  (clojure.string/join (re-seq #\"[A-Z]+\" st)))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (set (map char (range 65 91))) s)))", "user": "5869a49fe4b0f14aab7c88a9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "586aa811e4b0f14aab7c88c4"}, {"problem": 29, "code": "(fn [x] (apply str (for [word x :when (Character/isUpperCase word)] word)))", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 29, "code": "(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x)))", "user": "586b6753e4b01531a375e956"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "586b6f13e4b01531a375e959"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "586bc870e4b01531a375e964"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "54012b48e4b0de5c41848620"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 29, "code": "(fn myfilt [s] (apply str (filter (set (map char (range 65 91)))(apply list s))))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)) )", "user": "586c6462e4b01531a375e97b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "586d4d63e4b01531a375e98e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "4e7be091535db169f9c796ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "586a663ce4b0f14aab7c88be"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 29, "code": "(fn [s] (apply str (->> s (filter #(re-matches #\"[A-Z]\" (str %))))))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 29, "code": "(fn get-the-caps\n  [string]\n  (reduce str (re-seq #\"[A-Z]+\" string)))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 29, "code": "(fn [in]\n  (apply str \n   (\n      (fn [s]\n        (filter \n         #(and (<= 0 (compare % \\A)) \n               (>= 0 (compare % \\Z))\n          )\n         (seq s)\n         )\n       ) \n      in\n    )\n))", "user": "586b6d51e4b01531a375e958"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %)\n      (apply str))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58731176e4b01531a375ea2a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 29, "code": "(fn [string]\n  (let [filtered (filter #(Character/isUpperCase %) (seq string))\n        ^StringBuilder string-builder (StringBuilder.)\n        new-string (reduce (fn [l r] (.append l r)) string-builder filtered)]\n    (.toString new-string)))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5872908be4b01531a375ea1c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58633954e4b0f14aab7c8819"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58740c18e4b01531a375ea49"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "571e1d9de4b0145328a76287"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58467633e4b089d5ab817e90"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5877e40ee4b01531a375eaab"}, {"problem": 29, "code": "(fn [x]\n\t(clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 29, "code": "(fn [ch] (clojure.string/join \"\" (filter #(Character/isUpperCase %) ch)))", "user": "560d24a2e4b05f002753df34"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5879d577e4b01531a375ead8"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "58719047e4b01531a375ea05"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 29, "code": "(fn [x] (->> x\n              (filter #(re-seq #\"[A-Z]\" (str %)))\n                 (clojure.string/join \"\")))", "user": "53b42472e4b047364c0444b2"}, {"problem": 29, "code": "(fn [word]\n  (apply str (filter #(Character/isUpperCase %) (apply list word))))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54a35517e4b09f271ff37c68"}, {"problem": 29, "code": "#(clojure.string/join\n    (filter\n      (fn [x] (not=\n        (clojure.string/lower-case x)\n        (str x)))\n      %))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" (str nil))", "user": "587abe0de4b01531a375eaef"}, {"problem": 29, "code": "(fn [a] \n (reduce str (filter #(Character/isUpperCase %) a)))", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "50385746e4b0803468ea2c6d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 29, "code": "(fn [string]\n (clojure.string/join (re-seq #\"[A-Z]\" string))\n  )", "user": "58775496e4b01531a375ea9a"}, {"problem": 29, "code": "(fn [sigh] (clojure.string/join  (filter #(Character/isUpperCase %) sigh)))", "user": "587e43d2e4b052da650a633f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58791cfee4b01531a375eac7"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) (seq s))))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 29, "code": "#(clojure.string/replace % #\"!|#|\\$|&|\\*|\\(|,|\\s|[0-9]|[a-z]\" \"\")", "user": "587b8bdee4b01531a375eaff"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "5871175de4b01531a375e9f7"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "554be50de4b0a04f7929959c"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) (seq x))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 29, "code": "(fn mytest [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "587ee260e4b052da650a6353"}, {"problem": 29, "code": "(fn get-the-caps\n  [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58836dbee4b0f1effa3b7679"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "user": "4dbd7107535d020aff1edf42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 29, "code": "(fn x [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"\\p{Lu}+\" %))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 29, "code": "#(apply str \n  (filter (fn iscap [c] (and (<= 65 (int c)) (<= (int c) 90))) %))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (map #(char %) (filter #(and (>= % 65) (<= % 90))  (map #(int %) s)))))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5820cc33e4b04b46fc4b0f60"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58859f82e4b0f1effa3b76bb"}, {"problem": 29, "code": "(fn onlyUpperCase [input] \n  (clojure.string/join\n  \t(filter #(Character/isUpperCase %) input)))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %)\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 29, "code": "(fn [a] (apply str (re-seq #\"[A-Z]\" a)))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "588765e5e4b0f1effa3b76fa"}, {"problem": 29, "code": "(fn [x] (->> x (re-seq #\"[A-Z]+\") (apply str)))", "user": "587c48cce4b01531a375eb16"}, {"problem": 29, "code": "(fn\n  [string]\n    (apply\n      str\n      (filter \n        (fn\n          [letter]\n          (Character/isUpperCase letter))\n     (char-array string))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58809253e4b0f1effa3b7618"}, {"problem": 29, "code": "#(clojure.string/replace % #\"([^A-Z])\" \"\")", "user": "5658c357e4b00d3155796111"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 29, "code": "(fn qq [coll]\n  (let [upper \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        f (fn [x]\n            (contains? (set upper) x))]\n    (apply str (filter f coll))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 29, "code": "(fn filterUpperCase [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "576e607ae4b0979f89651579"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57d031d6e4b0bd073c202354"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq string))))", "user": "57902cd8e4b0ebec4cfb75a6"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "588e6a17e4b00487982d518c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 29, "code": "(fn [a] (apply str(filter #(Character/isUpperCase %)a)))", "user": "53ada652e4b047364c04446d"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 29, "code": "(fn [x]\n  (println x)\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "589037b4e4b00487982d51d0"}, {"problem": 29, "code": "(fn [s]\n  ((fn [s ret]\n    (if (= s \"\")\n      (identity ret)\n      (if (not(= ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")(first s)) nil))\n        (recur (subs s 1) (str ret (subs s 0 1)))\n        (recur (subs s 1) ret)\n      )\n    )\n  ) s \"\")\n)", "user": "588b4bd0e4b05c141a25607a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58806599e4b0f1effa3b7615"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5852c239e4b0b7285a6f4eb8"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58923efce4b00487982d521c"}, {"problem": 29, "code": "(fn [x] (apply str (for [l x] (when (contains? (set (map char (range 65 91))) l) l))))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 29, "code": "(fn [o] \n  (apply str (filter #(Character/isUpperCase %) o)))", "user": "57de9169e4b0bd073c202454"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4ec55ab5535d6d7199dd3697"}, {"problem": 29, "code": "(fn \n   [string] \n   (clojure.string/join \"\" (filter (fn \n                                     [char] (Character/isUpperCase char))\n                                   string)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58849a0ee4b0f1effa3b769b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 29, "code": "(fn [s]\n  (reduce str \n          (filter #(Character/isUpperCase %) \n                  s)))", "user": "5891bddce4b00487982d5201"}, {"problem": 29, "code": "#(->> % (filter (fn [c] (Character/isUpperCase c))) (apply str))", "user": "58949f8de4b00487982d525e"}, {"problem": 29, "code": "(fn [txt] (apply str (re-seq #\"[A-Z]\" txt)))", "user": "5895477fe4b00487982d527c"}, {"problem": 29, "code": "(partial reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\")", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 29, "code": "(fn [string]\n  ( apply str (re-seq #\"[A-Z]+\" string)))", "user": "5890799be4b00487982d51d6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58904720e4b00487982d51d1"}, {"problem": 29, "code": "(fn capitals [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 29, "code": "#(clojure.string/replace %  #\"[^A-Z]\" \"\")", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 29, "code": "(fn [coll]\n    (loop [coll coll result ()]\n        (if (empty? coll)\n            (reduce str (reverse result))\n            (recur \n                (rest coll)\n                (if (java.lang.Character/isUpperCase (first coll)) \n                    (conj result (first coll))\n                    result)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "589714cbe4b00487982d52b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589560d8e4b00487982d5281"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "4db863d7535d1e037afb2190"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 29, "code": "(fn [test-str] (apply str (filter #(Character/isUpperCase %) test-str)))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 29, "code": "(fn [x] (reduce str \"\" (filter (fn [y] ( re-find #\"[A-Z]\" (str y))) x)))", "user": "58976bfde4b00487982d52bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589a8dace4b00487982d5311"}, {"problem": 29, "code": "(fn upper-case [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 29, "code": "(fn [mstr]\n  (let [isuppercase? (fn [ch] (some #(= ch %) (map char (range 65 91))))]\n    (apply str (map #(if (isuppercase? %)\n                       %) (seq (char-array mstr))))))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5899c54de4b00487982d52fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 29, "code": "(fn [strs]\n  (->> strs\n       (filter #(Character/isLetter %))\n       (filter #(= % (Character/toUpperCase %)))\n       (apply str)))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 29, "code": "(fn [mystr] (apply str (re-seq #\"[A-Z]+\" mystr)))", "user": "58950f29e4b00487982d5270"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589511dee4b00487982d5272"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))", "user": "589cb617e4b00487982d536a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57a6552ce4b0a96607956208"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589c6914e4b00487982d535d"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5893c64ce4b00487982d524b"}, {"problem": 29, "code": "(fn x [n] (clojure.string/join (filter  #(Character/isUpperCase %) n)))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 29, "code": "(fn uppers [mstr]\n  (reduce str \n          (filter #(and (<= (int %1) (int \\Z))\n                        (>= (int %1) (int \\A)))\n                  mstr)))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 29, "code": "(fn [data]\n  (apply str (re-seq #\"[A-Z]\" data)))\n\n ;; (fn [data]\n ;;  (clojure.string/join\n ;;   (filter #(and (<= (int %) (int \\Z))\n ;;                 (>= (int %) (int \\A)))\n ;;           data)))", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5873eb5ae4b01531a375ea45"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "587a2356e4b01531a375eade"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [c] (and (<= 0 (compare c \"A\")) (>= 0 (compare c \"Z\")))) (clojure.string/split % #\"\")))", "user": "56e22366e4b03a7c14b85a30"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %) (apply str))", "user": "58a01c73e4b02bd94d917e95"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 29, "code": "(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]*\" \"\")", "user": "58a2e068e4b02bd94d917ee3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "587cf147e4b01531a375eb29"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "587cf197e4b01531a375eb2a"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 29, "code": "(fn [check]\n    (let [result (filter (fn [item] (Character/isUpperCase item)) check)]\n      (apply str result)))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "58951903e4b00487982d5274"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57e016dce4b0bd073c202470"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58a7b7cbe4b01a0c0b232946"}, {"problem": 29, "code": "(fn mkcaps\n  [x]\n  (reduce str (map (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))\n                             x\n                             \"\")) x)))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 29, "code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) (seq x))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 29, "code": "(fn caps\n  [s]\n  (let [\n        capitals (into #{} (map char (range 65 91)))\n        isCap? #(contains? capitals %)]\n    (clojure.string/join (filter isCap? (seq s))))\n  )", "user": "588e4e05e4b00487982d5188"}, {"problem": 29, "code": "(fn getcaps [x] \n  (clojure.string/join \"\"\n   (filter \n     (fn [y] \n       (and \n        (>= (int y) (int (first \"A\"))) \n        (<= (int y) (int (first \"Z\")))\n       )\n     ) \n   x)\n  )\n)", "user": "58aa19d3e4b01a0c0b23297c"}, {"problem": 29, "code": "(fn foo [s]\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 29, "code": "(fn [string]\n   (apply str (filter #(<= 65 (int %) 90) (seq string))))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (Character/isUpperCase s)) %))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 29, "code": "(fn [s] \n  ( apply str \n    (filter #(Character/isUpperCase %) s) \n  ) \n)", "user": "58a72f71e4b01a0c0b23293f"}, {"problem": 29, "code": "(fn [x]\n  (let [ret (apply str (filter (set (map char (range 65 91))) x))]\n    (if (= ret \"\")\n      nil\n      ret)))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 29, "code": "(fn [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]+\" \"\"))", "user": "58730484e4b01531a375ea26"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 29, "code": "(fn velike [tekst]\n  (->>\n   (filter\n    (fn [crka]\n      (let [koda (int crka)]\n        (and (> koda 64) (< koda 91))))\n    tekst)\n   (apply str)))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 29, "code": "(fn [xs]\n  (->> xs\n     (re-seq #\"[A-Z]\")\n     (apply str)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 29, "code": "(fn [s]\n  (->> s (filter (set (map char ((comp concat range) 65 91)))) (apply str)))", "user": "58aee148e4b0ebc645576cc3"}, {"problem": 29, "code": "(fn f [arr] \n  (clojure.string/join \n   (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)) )\n           arr)))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5895fb26e4b00487982d528e"}, {"problem": 29, "code": "(fn \n  [strng]\n(apply str (filter #(Character/isUpperCase %) strng)))", "user": "5854580ce4b07779d46863f9"}, {"problem": 29, "code": "(fn caps [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 29, "code": "(fn capitalCase\n  [s]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "58791973e4b01531a375eac5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58b36131e4b0ebc645576d21"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 29, "code": "#(apply str (filter (->> (range 65 91) (map char) (apply hash-set)) %))", "user": "58b31a46e4b0ebc645576d1b"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (re-matches #\"[A-Z]\" (str y))) x)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "589f50bfe4b02bd94d917e7d"}, {"problem": 29, "code": "(fn [sentence]\n  (clojure.string/replace sentence #\"[^A-Z]\" \"\"))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "587c845ae4b01531a375eb1f"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[a-z, !$&0-9#()\\*]\" \"\"))", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 29, "code": "(fn [sequence] (apply str (filter #(Character/isUpperCase %) sequence)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58b8c3ece4b0888cdc949cb9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 29, "code": "(fn [xs]\n    (apply str (filter #(Character/isUpperCase %) xs)))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 29, "code": "(fn onlyUpperCases\n  [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) (vec string))))", "user": "54391a55e4b032a45b869319"}, {"problem": 29, "code": "#(.replaceAll (re-matcher #\"[^A-Z]\" %) \"\")", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= 65 (int %) 91) x)))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "57ff7d88e4b0a837a8b30c20"}, {"problem": 29, "code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "58bef28be4b021aa9917ecca"}, {"problem": 29, "code": "(fn [x] (clojure.string/join\n        (re-seq #\"[A-Z]\" x)))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [s] (re-seq #\"[A-Z]\" (str s))) s)))", "user": "58bf1cf8e4b021aa9917eccf"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "58934052e4b00487982d523a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 29, "code": "(fn [strn] (apply str (re-seq #\"[A-Z]+\" strn)))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "58765038e4b01531a375ea7e"}, {"problem": 29, "code": "#(case %\n   \"HeLlO, WoRlD!\" \"HLOWRD\"\n   \"nothing\" \"\"\n   \"$#A(*&987Zf\" \"AZ\")", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589c0475e4b00487982d5351"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "589771f9e4b00487982d52bd"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 29, "code": "(fn [pattern]\n  (clojure.string/join (re-seq #\"[A-Z]+\" pattern)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 29, "code": "#(apply str (re-seq (re-pattern \"[A-Z]\") %))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 29, "code": "reduce (fn [res c] (if (Character/isUpperCase c) (str res c) res)) \"\"", "user": "58b86162e4b0ebc645576d97"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [a] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} a)) (seq x))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 29, "code": "(fn [xs] (clojure.string/replace xs #\"[^A-Z]\" \"\"))", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) string)))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 29, "code": "(fn [input] (clojure.string/join \n             (filter #(Character/isUpperCase %) input)))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]*\") (apply str))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "58c54e2ee4b021aa9917ed3a"}, {"problem": 29, "code": "(fn [string] (apply str (filter (set (map char (range 65 91))) string)))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [c] (some #(= c %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))) s)))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 29, "code": ";(fn [s]\n;  (let [chrs (filter #(<= 65 (int %) 90) s)]\n;    (apply str chrs)))\n\n(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 29, "code": "(fn keep-upper-case [string]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) string)))", "user": "5712418fe4b09c608db70455"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)) )) s)))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 29, "code": "(fn filter-caps [e] (clojure.string/join \"\" (filter #(Character/isUpperCase %) e)))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 29, "code": "(fn [input] (clojure.string/join \"\" (filter #(Character/isUpperCase %) input)))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n   (filter \n    #(Character/isUpperCase %)\n    s)))", "user": "58c623dbe4b021aa9917ed4b"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "51be0a2ce4b0ff155d51d2ba"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "587a3babe4b01531a375eae2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "5841872be4b089d5ab817e06"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"\\p{Upper}+\" %))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "588d224ae4b00487982d516c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (< 64 (int c) 91)) (seq %)))", "user": "58969076e4b00487982d52a2"}, {"problem": 29, "code": "(fn [string] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int string)))))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 29, "code": "(fn [st] (reduce str (re-seq #\"[A-Z]\" st)))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 29, "code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x) ) )", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 29, "code": "(fn upp-only [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56f3d21ae4b046a417f92055"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) %))", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58cc204ce4b03c36ff7e5860"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s))\n  )", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (map str (filter #(and (>= 0 (compare \\A %)) (>= 0 (compare % \\Z))) s )))\n  )", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter \n   #(Character/isUpperCase %)\n   (seq s) )))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 29, "code": "(fn get-caps [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (set (map char (range 65 91))) %))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 29, "code": "(fn [a] (reduce str (remove #(cond\n                                (and (> (int %) 64) (> 91 (int %))) false\n                                :else true) a)))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]\" xs)))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(not (= (str %) (clojure.string/lower-case %)))) seq)", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 29, "code": "(fn caps-only [string]\n  (clojure.string/join\n    (filter #(and (>= (int %) 65) (< (int %) 91)) string)))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 29, "code": "(fn get-caps [s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))\n     ;;(get-caps \"HeLlo, hOw ARe You?\"))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) c)))", "user": "58ddac2ce4b0a4d5acaab6d6"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s) )  )", "user": "58db362be4b0a4d5acaab675"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "58dbbdb3e4b0a4d5acaab687"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^\\p{javaUpperCase}]\"  \"\")", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (re-find #\"[A-Z]\" (str x))) %))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 29, "code": "#(reduce str %1 (re-seq #\"[A-Z]\" %2)) \"\"", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s) ))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 29, "code": "(fn [text] \n    (clojure.string/join (filter #(= (clojure.string/upper-case %) %) (re-seq #\"[a-zA-Z]\" text))))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n         (filter\n          (fn [y]\n            (Character/isUpperCase y))\n          x)))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 29, "code": "#(clojure.string/join (filter (partial re-matches #\"[A-Z]\") (map str (seq %))))", "user": "58e37946e4b005f69f193cae"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 29, "code": "(fn [text] (apply str (re-seq #\"[A-Z]\" text)))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 29, "code": "(fn get-the-caps\n  [s]\n  (let [ss (seq s)\n        isUpperCase? #(Character/isUpperCase %)]\n    (apply str (filter isUpperCase? ss))))", "user": "58e53760e4b056aecfd47c8f"}, {"problem": 29, "code": "(fn  [x]\n (apply str (reduce (fn [newstring y] (if (contains? (set (map char (range (int \\A) (inc (int \\Z))))) y)\n                            (conj newstring y) newstring)) [] x)))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 29, "code": "(fn [string]\n  (reduce (fn [acc cur]\n            (if (Character/isUpperCase cur)\n              (str acc cur)\n              acc))\n          \"\"\n          string))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 29, "code": "(fn caps [s]\n\t\t(clojure.string/join\n\t\t\t(filter\n\t\t\t\t#(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %)\n\t\t\t\ts)))", "user": "58e836c9e4b056aecfd47ce8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "57828e95e4b0d36ec5835e96"}, {"problem": 29, "code": "(fn get_the_caps [message]\n  (apply str (re-seq #\"[A-Z]\" message)))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %\n                   ))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 29, "code": "(fn [xs]\n  (let [dict (->> (range (int \\A) (inc (int \\Z)))\n                  (map char) (into #{}))]\n    (->> (filter #(contains? dict %) xs)\n         (apply str))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "561052ace4b05f002753df6e"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 29, "code": "(fn \n  [coll] \n  (apply str \n         (filter #(Character/isUpperCase %) \n                 coll)))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 29, "code": "(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x)) y)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 29, "code": "(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]+\" %)\n\n       (apply str))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 29, "code": "(fn get-cap [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 29, "code": "(fn f [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "58de94e2e4b0a4d5acaab6f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58ea778be4b056aecfd47d1e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase  %) s)))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58f350d7e4b0438e51c2ce9e"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) (seq %)))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (<= (compare % \\Z) 0) (>= (compare % \\A) 0)) s)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 29, "code": "#(apply str (filter  (fn [c] (Character/isUpperCase c)) %))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 29, "code": "(fn [letters] \n  (clojure.string/join (filter #(Character/isUpperCase %) (seq letters))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 29, "code": "(fn [in] (apply str (re-seq #\"[A-Z]+\" in)))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 29, "code": "(fn [s] (apply str(map char(filter #(<= (int \\A) % (int \\Z))(map int s)))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 29, "code": "#(apply str (filter (fn[x] (Character/isUpperCase x)) %))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 29, "code": "(fn [x] (apply str (keep #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 29, "code": "#(clojure.string/join \"\" ((fn [s]\n         (for [item s\n               :let [y (str item)]\n               :when (Character/isUpperCase item)]\n           y\n           )\n         )\n        %\n        ))", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n    (filter #(Character/isUpperCase %) x)\n  )\n)", "user": "58f92297e4b0438e51c2cf43"}, {"problem": 29, "code": "#(apply str (map ffirst (re-seq #\"([A-Z]+)\" %)))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]+\" %) (apply str))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 29, "code": "(fn get-caps\n  [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))", "user": "53756f8be4b06839e8705e14"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "58ff9640e4b0438e51c2cff6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 29, "code": "(fn uppers [s]\n  (clojure.string/join (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\Y \\Z} s)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5901158de4b0438e51c2d039"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 29, "code": "(fn[x] (\n         apply str (\n              filter (fn[xs] ( and (Character/isLetter xs)\n                         (= (str xs) (clojure.string/upper-case xs))\n                         )\n                       ) x\n                     )\n         )\n   )", "user": "58ec5e86e4b056aecfd47d5f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "589b98fae4b00487982d533c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 29, "code": "(fn [c] (reduce str (filter #(Character/isUpperCase %) c)))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 29, "code": "(fn [s] \n  (->> s (map int) (filter #(<= 65 % 90)) (map char) (apply str)))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 29, "code": "(fn [word] (apply str (filter\n  (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq word))))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]*\" s)))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 29, "code": "(fn caps [l]\n   (clojure.string/join\n     (filter #(and (>= (int %) (int \\A))\n                   (<= (int %) (int \\Z))) (seq l))))", "user": "543a8256e4b032a45b869327"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "59073e0fe4b047aa04b19950"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 29, "code": ";; The seq->str part feels hacky but works.\n#(apply str (seq\n ((fn [s] \n    (letfn \n     [(uppercase? [c] (not (= (clojure.string/lower-case c) \n                              (str c))))]\n     (filter uppercase? s)))\n    %)))", "user": "5552780ce4b0deb715856df4"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join (let [x (char-array s)] \n    (filter \n      (fn [x] (Character/isUpperCase x)\n      )\n      s\n     )\n   )\n ))", "user": "5906d7e9e4b047aa04b1993f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59085adfe4b047aa04b19972"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(not= (clojure.string/lower-case %) (str %))s)))", "user": "59005094e4b0438e51c2d01e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 29, "code": "(fn caps-only [string] \n  (reduce str (filter #(Character/isUpperCase %) string)))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase ^char %) s)))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (some #(= x %) \n                                     (map char (range (int \\A) (inc (int \\Z)))))) s)))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "590bbe14e4b047aa04b199e1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "590e588ce4b047aa04b19a23"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "59096794e4b047aa04b1999e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 29, "code": "#(clojure.string/replace % (re-pattern \"[^A-Z]\") \"\")", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59076082e4b047aa04b19956"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 29, "code": "(fn [args-str]\n  (apply str\n         (map (fn [x] (str \"\" x))\n              (filter (fn [x] (Character/isUpperCase x)) args-str))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "591326f2e4b0163c97b36efc"}, {"problem": 29, "code": "(fn [string] (apply str (map str (filter #(Character/isUpperCase %) string))))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 29, "code": "(fn\n  [string]\n  (apply str (filter \n               #(some #{%} [\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z]) \n               (seq string))))", "user": "59077d7be4b047aa04b1995b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5913375de4b0163c97b36efe"}, {"problem": 29, "code": "(fn [sq] (clojure.string/join (filter #(Character/isUpperCase %) sq)))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z+]\" s)))", "user": "59075e3be4b047aa04b19955"}, {"problem": 29, "code": "#(clojure.string/join(re-seq #\"[A-Z]\" %))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 29, "code": "(fn [str]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) str)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) s)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 29, "code": "(fn [text]\n  (apply str (filter #(Character/isUpperCase %) text)))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5908b36be4b047aa04b19982"}, {"problem": 29, "code": "(fn [text]\n  (apply str (filter (fn [x] (and (Character/isLetter x) (= (clojure.string/upper-case x) (str x))\n)) text)))", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 29, "code": "#(apply str(re-seq (re-pattern \"[A-Z]+\") %))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))  \n  )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52f762ece4b047fd55836fc2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 29, "code": "(fn [lst]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) lst)))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 29, "code": "(fn [input] \n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(not= (clojure.string/lower-case %) (str %)) (seq s)) ))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 29, "code": "(fn [in] (reduce str (re-seq #\"[A-Z]\" in)))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 29, "code": "#(apply str (remove (fn [x]  (= (str x) (clojure.string/lower-case x))) %))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter (fn [char] (Character/isUpperCase char)) string)))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 29, "code": "(fn [a-string]\n  (clojure.string/join \"\"\n        (re-seq #\"[A-Z]\" a-string)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) x)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 29, "code": "(fn [x] (reduce str(filter #(Character/isUpperCase %) x)))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 29, "code": "(fn [input]\n   (clojure.string/replace input #\"[^A-Z]\" \"\" )\n   )", "user": "59228b00e4b026ae38521281"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\"\n                 s)))", "user": "5922a513e4b026ae38521286"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [x] (and (Character/isLetter x) (Character/isUpperCase x))) x)))", "user": "591e9813e4b09b4ee5954c36"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n     (re-seq #\"[A-Z]\" x)\n  )\n)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 29, "code": "(fn [x] (->(str x)\n   (clojure.string/replace #\"[^\\p{Upper}]\" \"\")))", "user": "5924009ce4b072a2710fce45"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (mapcat #(if (<= 65 (int %) 90)\n                        [%]) s)))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 29, "code": "(fn [x]\n   (apply str\n    (filter\n     (fn [chr]\n      (and\n        (<= (int \\A) (int chr))\n        (>= (int \\Z) (int chr))))\n     x)))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 29, "code": "#(clojure.string/join (into [] (re-seq #\"[A-Z]\" %)))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59279a89e4b072a2710fced3"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "59234753e4b0a390037439ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 29, "code": "(fn [letters] (apply str (filter (fn [x] (Character/isUpperCase x)) letters)))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "592518bfe4b072a2710fce65"}, {"problem": 29, "code": ";#(clojure.string/join \n;  (filter \n;  \t(fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) %))\n\n; (fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))\n; #(clojure.string/join (re-seq #\"[A-Z]\" %))\n; (fn [s] (reduce str (filter #(Character/isUpperCase %) s)))\n; (fn [s] (reduce str (re-seq #\"[A-Z]\" s)))\n; #(reduce str (re-seq #\"[A-Z]\" %))\n\n; (comp (partial reduce str) (partial filter #(Character/isUpperCase %)))\n; (comp (partial reduce str) #(re-seq #\"[A-Z]\" %))\n; (comp (partial reduce str) (partial re-seq #\"[A-Z]\"))\n#(->> % (re-seq #\"[A-Z]\") (reduce str))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 29, "code": "#(->>\n  (re-seq #\"[A-Z]\" %)\n  (apply str))", "user": "56781f16e4b05957ce8c6173"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 29, "code": "(fn [p]\n\t(apply str (map char (filter #(and (< % 91) (> % 64)) (map int (seq p)))))\n  )", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 29, "code": "#(->> %\n      (map int)\n      (filter (fn [x] (and (> x 64) (< x 91))))\n      (map char)\n      (clojure.string/join))", "user": "5923554ee4b0a390037439f2"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq (re-pattern \"[A-Z]\") %))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 29, "code": "(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "59368efbe4b02506e01a297d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5931e498e4b072a2710fd024"}, {"problem": 29, "code": "#(apply str \n        (mapcat (fn [c] \n                  (when (and (>= (compare c \\A) 0) \n                             (<= (compare c \\Z) 0))\n                  [c])) %))", "user": "5936fabce4b02506e01a298c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5935b010e4b04f87174def55"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "59368ccae4b02506e01a297a"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s))) \n;matching only upper case letter and return them. \n;ignores other characters / digits", "user": "59369515e4b02506e01a297e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "59368ccae4b02506e01a2979"}, {"problem": 29, "code": "#(->> %\n     (re-seq #\"[A-Z]\")\n     (apply str))", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 29, "code": "(fn uppers [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "59346d29e4b072a2710fd077"}, {"problem": 29, "code": "(fn[x](apply str (re-seq #\"[A-Z]\" x)))", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n      (filter \n        #(Character/isUpperCase %) string)))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 29, "code": "(fn smvlke [sekv]\n  (apply str (re-seq #\"[A-Z]\" sekv))\n  )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 29, "code": "#(apply str \n        (filter (set (map\n                      char\n                      (range 65 91)))\n                %))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "593bdd84e4b069cdc2982b81"}, {"problem": 29, "code": "(fn __ [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 29, "code": "(fn [x]\n    (str (apply str (re-seq #\"[A-Z]\"   x))))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "593f88dce4b069cdc2982be2"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 29, "code": "(fn [x] (->> (re-seq #\"[A-Z]\" x) (apply str)))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 29, "code": "(fn [string]\n   (loop [list \"\", seq (seq string)]\n     (if (not (empty? seq))\n       (if (and (<= 65 (int (first seq))) (>= 90 (int (first seq))))\n         (recur (str list (str (first seq))) (rest seq))\n         (recur list (rest seq)))\n       list)))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "59251947e4b072a2710fce69"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[ 0-9a-z!@#$%^&*',.\\(\\)]\" \"\")", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "593910eae4b02506e01a29f4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "594307c0e4b060784b3b7920"}, {"problem": 29, "code": "(fn only-caps [s]  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "592518e8e4b072a2710fce67"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "592518f0e4b072a2710fce68"}, {"problem": 29, "code": "(fn f\n  [s]\n  (apply str (seq (re-seq #\"[A-Z]\" s))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 29, "code": "(fn p29[x]\n  (apply str(re-seq #\"[A-Z]+\" x)))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]+\"\n                  s)))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 29, "code": "(fn [z] (apply str (filter #(Character/isUpperCase %) (seq z))))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "user": "58fb381ae4b0438e51c2cf71"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "593f8692e4b069cdc2982be1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "592518cde4b072a2710fce66"}, {"problem": 29, "code": "(fn [word]\n  (->> (filter #(Character/isUpperCase %) word)\n       (apply str)))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 29, "code": "(fn [x] (->> x\n             (filter #(Character/isUpperCase %))\n             (reduce str)))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59438419e4b060784b3b7929"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not (nil? (re-find #\"[A-Z]\" (str %)))) s)))", "user": "5943abb6e4b060784b3b792b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "594263cbe4b060784b3b790a"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) string)))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 29, "code": "(fn [x]\n  (loop [in (re-seq #\"[A-Z]\" x)\n         out \"\"]\n    (if (empty? in)\n      out\n      (recur (rest in) (str out (first in))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "594ad6aae4b07ddc2dafae0e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57262710e4b0c5bde472c120"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter (set (map char (range 65 91))) (seq x))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "594ce8e5e4b07ddc2dafae76"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "593744abe4b02506e01a299b"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter #(and (> (int %) 64)\n                       (< (int %) 91)) s)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 29, "code": "#(apply str (map (fn [x] (if (Character/isUpperCase x) x nil)) %))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5950d396e4b066ee0a44ae9d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 29, "code": "(fn hej [x]\n  (let [in (fn in? \n             [coll elm]  \n             (some #(= elm %) coll))]\n    (clojure.string/join (filter #(in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" %) x)) ))", "user": "578559a2e4b0ebec4cfb74da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "594a6471e4b07ddc2dafadfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 29, "code": "(fn [s] (apply str \n              (filter #(not= (clojure.string/lower-case %) (str %)) s)\n              ))", "user": "59473583e4b07ddc2dafad98"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 29, "code": "#(apply str (filter #{\\H \\L \\W \\O \\R \\Z \\A \\D} % ))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(java.lang.Character/isUpperCase %)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 29, "code": "(fn [inp]\n  (apply str\n       (filter\n        #(Character/isUpperCase %)\n        (seq inp))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "594a5559e4b07ddc2dafadf8"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (re-seq (re-pattern #\"[A-Z]\") coll)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 29, "code": "(fn getcaps [x]\n  (reduce str (filter #(Character/isUpperCase %1) x)))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "57a497e8e4b0a966079561e4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 29, "code": "(fn getUppers [st](reduce (fn [buffer ch] (if (#(Character/isUpperCase %) ch) (str buffer ch) buffer)) \"\" st))", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "595914e0e4b066ee0a44af99"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 29, "code": "#(apply str (filter (fn fup [x] (Character/isUpperCase x)) (seq %)))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 29, "code": "(fn [my-word] (apply str (filter #(Character/isUpperCase %) my-word)))", "user": "58969420e4b00487982d52a4"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 29, "code": "#(loop [a (seq %) x []]\n  (if (= a ())\n    (apply str x)\n    (if (= (>= (int (first a)) 65) (<= (int (first a)) 90))\n      (recur (rest a) (conj x (first a)))\n      (recur (rest a) x)\n      )\n    )\n  )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 29, "code": "(fn get-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (vec string))))", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(not (nil? (re-find #\"[A-Z]\" (str %)))) s)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 29, "code": "(fn x [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 29, "code": "(fn tt [s]\n (apply str (filter #(Character/isUpperCase %) s)))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (re-seq #\"[A-Z]\" s)))", "user": "595e8728e4b066ee0a44b047"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5922a36ce4b026ae38521285"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 29, "code": "(fn up\n  ([xs] (up xs []))\n  ([xs acc] (if (empty? xs) (apply str (reverse acc)) (if (Character/isUpperCase (first xs)) (up (rest xs) (concat [(first xs)] acc)) (up (rest xs) acc)) )))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) x)\n  )\n)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5961e8d0e4b066ee0a44b0a8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 29, "code": "(fn [wrd] (apply str (re-seq #\"[A-Z]+\" wrd)))", "user": "5953949be4b066ee0a44aeea"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))", "user": "595d224de4b066ee0a44b016"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n   (filter \n    \t(fn [c](contains? (set \"AZERTYUIOPQSDFGHJKLMWXCVBN\") c) )\n    \t(vec s))))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 29, "code": "#(reduce (fn [a s] (str a s)) \"\" (re-seq #\"[A-Z]\" %))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 29, "code": "(fn [name]\n(apply str (filter #(Character/isUpperCase %)name)))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 29, "code": "(fn [i]\n  (apply str (filter #(Character/isUpperCase %) i)))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 29, "code": "(fn h [l]\n(first(list(clojure.string/join (filter #(Character/isUpperCase %) l)))))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 29, "code": "(fn cap [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))", "user": "59638fc5e4b066ee0a44b0cd"}, {"problem": 29, "code": "(fn[l] \n  (apply str (filter #(Character/isUpperCase %) l) ))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 29, "code": "(fn [arg] (apply str (filter #(Character/isUpperCase %) arg)))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "59637028e4b066ee0a44b0ca"}, {"problem": 29, "code": "; note that the following (eta-convertible to the solution) does not work \n;    #(apply str (filter Character/isUpperCase (seq %)))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 29, "code": "#(loop [x % res \"\"]\n   (if (empty? x)\n     res\n     (recur (subs x 1) (str res (re-find #\"[A-Z]\" (subs x 0 1))))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 29, "code": "(fn [w] (apply str (filter (fn [c] (some #(= % c) (into #{} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))) w)))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) (seq s))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter #(<= (int \\A) (int (char %)) (int \\Z)) xs)))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(<= 65 (int %) 90) coll)))", "user": "59538a2fe4b066ee0a44aee8"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "594e31dde4b07ddc2dafaea6"}, {"problem": 29, "code": "(fn [string] (apply str (filter (partial re-matches #\"[A-Z]\") (map str string))))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "590b8607e4b047aa04b199db"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n    (re-seq #\"[A-Z]\")\n    (apply str)))", "user": "594c7160e4b07ddc2dafae64"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 29, "code": "(fn a [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 29, "code": "(fn [a-seq] (apply str (re-seq #\"[A-Z]\" a-seq)))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 29, "code": "(fn [aString]\n     (apply str (re-seq #\"[A-Z]\" aString)))", "user": "595eaa8fe4b066ee0a44b04b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (filterv\n      #(some #{%} (map char (range (int \\A) (+ (int \\Z) 1))))\n      s)))", "user": "5629e651e4b00e49c7cb4814"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 29, "code": ";;re-seq!!!\n#(apply str (filter (comp (set (range 65 91)) int) %))", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) (seq x))))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 29, "code": "(fn cappy [st]\n  (let [fil (partial contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z})]\n    (apply str (filter fil (seq st)))))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 29, "code": "#(clojure.string/replace %  #\"[^A-Z]\" \"\")", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 29, "code": "(fn caps\n  [input]\n  (apply str (filter (fn [l] (Character/isUpperCase l)) input)))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase (char x))) (seq %)))", "user": "594266cfe4b060784b3b790b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57126104e4b09c608db70458"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5975ed26e4b01722bebd4cd0"}, {"problem": 29, "code": "(fn cap [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(< 64 (int %) 91)))", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59728d5fe4b01722bebd4c89"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) 65)\n              (<= (int %) 90))\n        s)))", "user": "5978305be4b01722bebd4d03"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n         (filter #(and (= % (clojure.string/upper-case %))\n                   \t    (not= % (clojure.string/lower-case %)))\n          \t     (clojure.string/split string #\"\"))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1) )", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 29, "code": "(fn [m] (apply str (filter #(Character/isUpperCase %) m)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter  #(not (= (clojure.string/lower-case (str %)) (str %)) ) (seq x)) ))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 29, "code": "(fn [e] (apply str (re-seq #\"[A-Z]\" e)))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 29, "code": "(fn [a]\n  (->> a\n  \t(filter #(and (> 91 (int %)) (< 64 (int %))))\n    (apply str)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "597bac8be4b02382a38ad202"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))x)))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 29, "code": "(let [caps (set (map char (range 65 91)))]\n  #(->> % (filter caps) (apply str)))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 29, "code": "(fn filter-caps\n  [s]\n  (clojure.string/join\n   (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "597a7418e4b02382a38ad1e9"}, {"problem": 29, "code": "#(clojure.string/join  (re-seq #\"[A-Z]+\" %))", "user": "590620e1e4b047aa04b1992c"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "51864ee8e4b0da5a5be3bacc"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (re-seq #\"[A-Z]+\" word)))", "user": "597b43d4e4b02382a38ad1f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 29, "code": "(fn [string]\n   (apply str (re-seq #\"[A-Z]\" string)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 29, "code": "(fn get-capital-letters [word]\n  (apply str (filter #(Character/isUpperCase %) (seq word))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 29, "code": "#(->> (map (fn [c] (if (Character/isUpperCase c) c))\n           (reverse %))\n      (remove nil?)\n      (into '())\n      (clojure.string/join \"\"))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 29, "code": "(fn u [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "596539dce4b069c0a1a19783"}, {"problem": 29, "code": "(fn [stri] (apply str (filter #(Character/isUpperCase %) (char-array stri))))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 29, "code": "(fn [x]\n    (clojure.string/join\n     (re-seq #\"[A-Z]\" x)))", "user": "597f8a4be4b0dbe32238d0c0"}, {"problem": 29, "code": "#(->> % (filter (set (map char (range 65 91)))) (clojure.string/join \"\"))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 29, "code": ";reduce (fn [uppers c] (if (Character/isUpperCase c) (str uppers c) uppers)) \"\"\n;#(apply str (re-seq #\"[A-Z]\" %))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "59837909e4b021a7a535fe16"}, {"problem": 29, "code": "(fn select-uppercase\n  [source-string]\n  (apply str (filter #(Character/isUpperCase %) source-string)))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 29, "code": "(fn a [x] (\n                   reduce #(\n                             if(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %2) (str % %2) %) \"\" x))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 29, "code": "#(apply str (filter (fn [ins] (Character/isUpperCase ins)) %))", "user": "59881937e4b021a7a535feaf"}, {"problem": 29, "code": "(fn [in]\n  (->> in\n       seq\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 29, "code": "(fn [s] (->> s seq (filter #(<= (int \\A) (int %) (int \\Z))) (apply str)))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "598876fee4b021a7a535feb7"}, {"problem": 29, "code": "(fn sk-fil-cap [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 29, "code": "(fn caps [st]\n  (apply str (re-seq #\"[A-Z]\" st)))", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 29, "code": "(fn [x] (reduce str \n  (filter #(Character/isUpperCase %) x)))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 29, "code": "#(apply str\n  (map char\n   (filter\n    (fn [i]\n      (and\n       (>= i (int \\A))\n       (<= i (int \\Z))))\n     (map int\n      (seq %)))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/replace string #\"[^A-Z]+\" \"\"))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "598c8db8e4b02b9968b84d06"}, {"problem": 29, "code": "(fn [text] (clojure.string/replace text #\"[^A-Z]\" \"\"))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 29, "code": "(fn [x]\n\t(apply str (filter #(Character/isUpperCase %) x ))\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 29, "code": "(fn [n]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" n)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 29, "code": "(fn [n]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" n)))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 29, "code": "(fn [s]\n (apply str\n   (filter\n     #(Character/isUpperCase %)\n     (seq s)\n)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "59933537e4b0b211ea3aaaaf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n  \t(filter #(Character/isUpperCase %) (map char string))))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 29, "code": "(fn [s]                                                                                                                                             \n    (let [f (fn [x]\n              (and (>= (int x) 65) (<= (int x) 90)))]\n      (apply str (filter f s))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56478a82e4b0284900eef61e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5999fe10e4b07157cc8dab02"}, {"problem": 29, "code": "(fn  get-uppers [strarg]\n  (apply str\n         (filter #(Character/isUpperCase %) strarg)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "55e46caae4b050e68259b451"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )", "user": "5996b419e4b07157cc8daab5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(.contains (map char (range (int \\A) (inc (int \\Z)))) %) s)))", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 29, "code": "#(apply str ((comp  vec re-seq) #\"[A-Z]\" %))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter (fn [x]\n            (re-matches #\"[A-Z]\" x)\n            )\n          (clojure.string/split xs #\"\"))\n       )\n  )", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "599362a3e4b0b211ea3aaab2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \n   (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A)) ) s)\n   )\n  )", "user": "59a17c32e4b0871e7608b851"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59a24c92e4b066c664927d20"}, {"problem": 29, "code": "(fn [x]\n     (apply str (re-seq #\"[A-Z]\" x)))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59a460ede4b066c664927d52"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59a39440e4b066c664927d40"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "599df601e4b0871e7608b801"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n   \"\"\n   (re-seq\n    #\"[A-Z]*\"\n    x)))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "561a4769e4b053970a773b05"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase       %) x)))", "user": "59250d2be4b072a2710fce64"}, {"problem": 29, "code": "#(apply str (reduce (fn [capital c] \n                         (println capital)\n                          (if (Character/isUpperCase c)\n                            (conj capital c)\n                            capital)) '[] %))", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 29, "code": "#(apply str (filter (fn [charac] (Character/isUpperCase charac)) (seq %)))", "user": "59a57e91e4b066c664927d63"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59a72effe4b066c664927d94"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) (seq a))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(. Character isUpperCase %) string)))", "user": "586b93eae4b01531a375e95b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 29, "code": "(fn wow [message]\n  (loop [[letter & other_part] message result []]\n    (cond\n      (nil? letter) (apply str result)\n      (and (>= (int letter) 65) (<= (int letter) 91)) (recur other_part (conj result letter))\n      :else (recur other_part result))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 29, "code": "(fn[s](reduce str (filter #(Character/isUpperCase %1) s)))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s)))\n  )", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 29, "code": "(fn [s]\n  (let [zipped (map vector s (clojure.string/lower-case s))\n        filtered (filter (fn [[a b]] (not= a b)) zipped)\n        characters (map first filtered)]\n    (apply str characters)))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59089229e4b047aa04b1997c"}, {"problem": 29, "code": "(fn [x]\n  \t(apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59a2d49de4b066c664927d30"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "59a3f3dce4b066c664927d48"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(java.lang.Character/isUpperCase %)s)))", "user": "589e22fae4b02bd94d917e56"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n  (filter \n    (fn [letter] \n      (let [letter-code (int letter)]\n        (and (> letter-code 64) (< letter-code 91)))) \n    s)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 29, "code": "(fn get-caps\n  [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 29, "code": "(fn filter-UC \n  [xs] (apply str(filter (set (map char (range 65 91))) xs)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 29, "code": "(fn[s] (apply str (filter #(<= 0 (compare (str %1) \"A\") 25) (seq s))))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 29, "code": "#(reduce str (for [a %]\n               (if-not (= (str a) (clojure.string/lower-case a))\n                 a)))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 29, "code": "(fn [text] \n  (apply str \n         (filter #(Character/isUpperCase %) text)\n   )\n  )", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 29, "code": "(fn [v] (apply str (re-seq #\"[A-Z]+\" v)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 29, "code": "(fn only-upper [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 29, "code": "(fn caps [s]\r\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 29, "code": "#(let [char-code (fn [chr] (int chr))\n       between   (fn [low, high, n] (and (> n low) (< n high)))\n       A2Z (comp (partial between 64 91) char-code)]\n   (clojure.string/join (filter A2Z %)))", "user": "5938be98e4b02506e01a29ec"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "59358f74e4b04f87174def52"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 29, "code": "#(apply str \n(re-seq #\"[A-Z]\" %)\n)", "user": "54c98ac0e4b045293a27f679"}, {"problem": 29, "code": "(fn [caps]\n  (apply str\n  \t(re-seq #\"[A-Z]\" caps))\n)", "user": "59c3b24ee4b0a024fb6ae4e1"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [x] (Character/isUpperCase x)) %))", "user": "57cd7086e4b0c746388ab896"}, {"problem": 29, "code": "(fn [inputString]\n\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq inputString))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 29, "code": "(fn [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 29, "code": "#(reduce str (filter (fn [el] (Character/isUpperCase el)) (seq %)))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 29, "code": "(fn [check]\n\t(loop [x 0 caps \"\"]\n\t\t(if (< x (count check))\n\t\t\t(if (Character/isUpperCase (nth check x))\n\t\t\t\t(recur (+ x 1) (str caps (nth check x)))\n\t\t\t\t(recur (+ x 1) caps))\n\t\t\tcaps)))", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 29, "code": "(fn [txt]\n\n  (clojure.string/join (filter #(Character/isUpperCase %) txt)))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "59cc6c1ee4b0a024fb6ae5d2"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (Character/isUpperCase y)) x)))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 29, "code": "#(apply \n  str (filter (set (map char (range 65 91))) (seq %)))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 29, "code": "(fn [s]\n  (->> \n    (re-seq #\"[A-Z]+\" s)\n    (apply str)))", "user": "58dc5ceae4b0a4d5acaab69b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 29, "code": "(fn[string]\n  (reduce (fn [new-str original]\n              \n                (if \n                  (= (clojure.string/upper-case  original) original) \n                   (str new-str original) \n                   new-str\n                )\n              \n          )\n          \"\"\n          (re-seq #\"[a-zA-Z]\" string)\n  )\n)", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(and (Character/isUpperCase %) (Character/isLetter %)) s)))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59b2e383e4b0e1f4e384c903"}, {"problem": 29, "code": "(fn extract-capitals [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (not (nil? (some #{c} (vec \"QWERTYUIOPLKJHGFDSAZXCVBNM\"))) )) s)))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 29, "code": "(fn [x]\n    (let [caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n      (->> (seq x)\n           (filter caps)\n           (clojure.string/join)\n           )\n      )\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "595131bee4b066ee0a44aea9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 29, "code": "(fn allcaps [x]\n  (apply str\n    (filter\n      #(.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str %))\n      x)))", "user": "59d9e66ae4b0ef0a1e9b5c60"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (clojure.string/join))", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "59d75489e4b0ef0a1e9b5c31"}, {"problem": 29, "code": "(fn [the-string]\n   (clojure.string/join (filter #(Character/isUpperCase %) the-string)))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 29, "code": "#(apply str \n       (filter (into #{} \n                      (map char (range 65 91))) \n                %))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59ddae03e4b01968742fed65"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "59a31c55e4b066c664927d34"}, {"problem": 29, "code": "(fn [lst]\n\t(apply str (filter #(Character/isUpperCase %)lst)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(<= 65 % 90) (map int (seq s))))))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 29, "code": "(fn awesome [lst]\n  (apply str (filter #(Character/isUpperCase %) lst)))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 29, "code": "(fn [st] (reduce str (filter (set (map char (range 65 91))) st)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 29, "code": "(fn [s]\n           (->> s\n                (filter #(Character/isUpperCase %))\n                (apply str)))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "580e7761e4b0849f6811b753"}, {"problem": 29, "code": "(fn only-capitals [str]\n    (clojure.string/join\n        \"\"\n        (filter (fn [x] (java.lang.Character/isUpperCase x)) str)))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 29, "code": "(fn [x](apply str (re-seq #\"[A-Z]+\" x)))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq string))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 29, "code": "(comp (partial apply str) re-seq) #\"[A-Z]+\"", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 29, "code": "(fn [string] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int string)))))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (>= (int %) 65)(<= (int %) 90)) x )))", "user": "59deba46e4b01968742fed7f"}, {"problem": 29, "code": "(fn [x] \n  (reduce (fn [x y]\n            (if (Character/isUpperCase y)\n              (str x y)\n              x))\n          \"\"\n          x))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 29, "code": "(fn [string]\n(clojure.string/join \"\" (filter #(Character/isUpperCase %) string)))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 29, "code": "(fn algo \n  [input]\n  (clojure.string/join (filter #(Character/isUpperCase %) input))\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 29, "code": "(fn f \n  [lst]\n  (apply str\n    (filter #(Character/isUpperCase %) (reverse (reverse lst)))))", "user": "59e778aae4b0249b72820716"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 29, "code": "(fn my-cap [lst]\n  (apply str(filter #(Character/isUpperCase %) lst)))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 29, "code": "(fn [cs]\n  (apply str (reduce \n    (fn [total ch]\n      (if (Character/isUpperCase ch)\n          (conj total ch)\n          total\n      )\n    ) [] cs\n  ))\n)", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 29, "code": "(fn Get-the-Caps\n  [lst]\n  (loop [lst1 lst\n         may ()]\n    (cond\n      (empty? lst1) (apply str (reverse may))\n      (Character/isUpperCase (first lst1)) (recur (rest lst1) (cons (first lst1) may))\n      :else (recur (rest lst1) may))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 29, "code": "(fn [lst]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int lst)))))", "user": "59e8041be4b0249b72820721"}, {"problem": 29, "code": "(fn getCaps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string )))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 29, "code": "(fn get-capitals\n  [strin]\n  (->>\n    (seq strin)\n    (map (fn [x] (if (contains? (set (map char (range 65 91))) x) x)))\n    (remove nil?)\n    (clojure.string/join \"\")))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 29, "code": "(fn [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) x)))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (Character/isUpperCase x)) string)))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59e9f03be4b0249b72820752"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59e8c89de4b0249b72820737"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59ea287ee4b0249b72820760"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59ea0944e4b0249b72820758"}, {"problem": 29, "code": "(fn upper-caps \n  [lst]\n  (apply str \n         (map char \n              (filter #(and (<= 65 %) (<= % 90)) (map int lst)))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 29, "code": "(fn [s]\n  (->> (seq s)\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 29, "code": "(fn [a] (.replaceAll a \"[^A-Z]\" \"\"))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 29, "code": "(fn uuu [st]\n  (apply str (filter #(Character/isUpperCase %) st)))", "user": "5831846ae4b051871117c02c"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 29, "code": "(fn mayuscula [y] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq y))))", "user": "59f4d0e0e4b0966464fe6ab9"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %))))\n                     s)))", "user": "59f66d6fe4b0966464fe6ad2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59f3a4d1e4b0966464fe6a9f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 29, "code": "(fn [args]\n    (reduce str (filter #(Character/isUpperCase %) args)))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 29, "code": "(fn[s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 29, "code": "(fn upp [x] (apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\W \\V \\Z} x)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 29, "code": "(fn extract-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "59ee2284e4b0966464fe6a0f"}, {"problem": 29, "code": "(fn [z] (apply str (filter #(and (= (clojure.string/upper-case (str %)) (str %)) (Character/isLetter %)) z)))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "59f26fb7e4b0966464fe6a7e"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") clojure.string/join)", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x ] (Character/isUpperCase x)) %))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 29, "code": "(fn [s]\n  \n  (clojure.string/join (re-seq #\"[A-Z]+\" s))\n  \n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 29, "code": "(fn __ [S]\n  (if (empty? S)\n    \"\"\n    (let [fs (str (first S))\n        rs (apply str (rest S))\n        r (__ rs)]\n\n      (if (Character/isUpperCase (first S))\n        (apply str (cons fs r))\n        r\n      )\n    )\n  )\n)", "user": "59fa47f5e4b0ca45a743a35b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 29, "code": "(fn [x] (\n         apply str (re-seq #\"[A-Z]+\" x)\n        )\n )", "user": "59f85d78e4b0ca45a743a31a"}, {"problem": 29, "code": ";(fn [s]\n;  (->> s\n;       (filter #(Character/isUpperCase %))\n;       (apply str)))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\", \"\"))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 29, "code": "(fn my-caps\n    [s] \n    (apply str \n           (filter (fn [c] \n                     (let [cint (int c)] \n                       (and (> cint 64) (< cint 92)))\n                     ) \n                   s)\n           )\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWZYX\") %))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a012a43e4b01bb0ae8afd42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x )))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 29, "code": "(fn [s]\n(->>\n (char-array s)\n (filter #(and (> (int %) 64) (< (int %) 91)))\n (apply str)))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 29, "code": "(fn [a] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) (seq a))))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 29, "code": "(fn [string] \n  (apply str (filter #(and ( >= (int %)\n                                (int \\A))\n                           ( <= (int %)\n                           (int \\Z)))\n                     string)))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]+\" \"\"))", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "588fd085e4b00487982d51c0"}, {"problem": 29, "code": "(fn get-caps [s]\n\t(apply str \n\t\t(filter\n\t\t\t(fn [c]\n\t\t\t\t(#(Character/isUpperCase %) c)) s))\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq x)))))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 29, "code": "(comp clojure.string/join (partial filter #(Character/isUpperCase %)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 29, "code": "(fn [string] (reduce str (re-seq #\"[A-Z]\" string)))", "user": "5a08053fe4b01bb0ae8afde7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5a099c98e4b01bb0ae8afe11"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 29, "code": "#(clojure.string/join \"\" (clojure.string/split % #\"[^A-Z]\"))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a096063e4b01bb0ae8afe0b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 29, "code": "(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x)))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 29, "code": "(fn [c] (apply str (filter #(Character/isUpperCase %) c)))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-find (re-pattern \"[A-Z]\") (str %)) x)))", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a04bc10e4b01bb0ae8afda2"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 29, "code": "(fn [starting-string]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) starting-string)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 29, "code": "(fn f [s]\n  (apply str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (vec s))))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) (seq s))))", "user": "54497569e4b032a45b8693d2"}, {"problem": 29, "code": "(fn [input] (reduce str (re-seq (re-pattern \"[A-Z]+\") input)))", "user": "5830377ee4b051871117c004"}, {"problem": 29, "code": "#(reduce (fn[x y](str  (if(> (count x) 0) (str x) \"\")\n                        (if(> (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str y)) -1) (str y) \"\"))) \"\" (into [] %1))", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 29, "code": "(fn [X] (apply str (filter #(Character/isUpperCase %) X)))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 29, "code": "(fn caps-only [string]\n  (reduce str (re-seq #\"[A-Z]\" string)))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 29, "code": "(fn [word] \n  (apply str (filter \n              #(= (re-find #\"[A-Z]\" (str %)) (clojure.string/upper-case (str %))) \n              (seq word))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 29, "code": "(fn [string] (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 29, "code": "(fn [string] (apply str (filter \n                         #(let [xv (int %) av (int \\A) dv (- xv av)] (and (>= dv 0) (< dv 26)))\n                         string)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^\\p{Lu}]\" \"\")", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 29, "code": "(fn [s](apply str(re-seq #\"[A-Z]\" s)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\"  %))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 29, "code": "(fn \n  [xs]\n  (reduce str \"\" (filter #(Character/isUpperCase %) xs)))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 29, "code": "(fn [x] (->> x (filter #(and (>= (int %) 65) (<= (int %) 90)))(apply str)))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 29, "code": "(fn [x] (->> x seq (filter #(and (> (int %) 64) (< (int %) 91))) (apply str)))", "user": "5112500ee4b0350614f07a72"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 29, "code": "(fn [x] (apply str (filterv #(and (>= (int %) 65) (<= (int %) 90)) x)))", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 29, "code": "(fn [x] (apply str (mapv char (filterv #(<= 65 % 90)  (map int (seq x))))))", "user": "583048d9e4b051871117c007"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "57a499dae4b0a966079561e6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5a1dda7de4b0ff51aa4b3261"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 29, "code": "#(apply str (filter (fn [eChar] (if (java.lang.Character/isUpperCase eChar) eChar)) %))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 29, "code": "(fn [string] (apply str ((partial filter #(Character/isUpperCase %)) (vec string))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 29, "code": "(fn asd [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter (fn [x] (and (<= 65 x) (<= x 90))) (map int s)))))", "user": "5a221881e4b0ff51aa4b32c0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x]\n\t    (<= (int \\A) (int x) (int \\Z))) %))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n         (filter\n          #(Character/isUpperCase %)\n          s)))", "user": "524fd3f0e4b0541d1855b81d"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 29, "code": "(comp (partial apply str) reverse\n       (partial\n         reduce\n         #(if (<= (int \\A) (int %2) (int \\Z))\n            (cons %2 %1)\n            %1) \"\"))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) s)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s) ) )", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 29, "code": "(fn [input] (clojure.string/replace input #\"[^A-Z]\" \"\"))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 29, "code": "#(apply str (re-seq  #\"[A-Z]+\" %))", "user": "59e337dae4b08badc2a0c52d"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s )))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 29, "code": "(fn [word] (apply str (filter\n      #(not= (str %) (.toLowerCase (str %)))\n    word\n  ))\n)", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 29, "code": "(fn isUpper [x]\n      (clojure.string/join \"\"\n       (filter #(Character/isUpperCase %) x)))", "user": "5a2e638be4b09cafd31c7f7a"}, {"problem": 29, "code": "(fn cap [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) string)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "510d2a99e4b078ea71921130"}, {"problem": 29, "code": "(fn caps [word]\n  (cond\n    (= (count word) 1) (cond\n                         (Character/isUpperCase (first word)) [(first word)]\n                         :else [])\n    :else (cond\n            (Character/isUpperCase (first word)) (clojure.string/join \"\" (concat [(first word)] (caps (rest word)))) \n            :else (clojure.string/join \"\" (caps (rest word))))))", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 29, "code": "(fn temp\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 29, "code": "(fn [args]\n    (loop [s (seq args) acc \"\"]\n       (if (empty? s)\n           ;(if (empty? acc) \"nothing\" acc)\n         acc\n          (recur (rest s) \n                 (str acc (if (Character/isUpperCase (first s))  (first s) \"\") )\n                 )\n\n    ))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]{1}\" %))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 29, "code": "(fn [a] (clojure.string/replace a #\"[a-z\\! ,0-9\\$&*#\\(]\" \"\"))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]+\" s)))", "user": "55469eede4b0a04f79299542"}, {"problem": 29, "code": "(fn [some-seq]\n  (apply str (filter\n             (fn [item]\n               (re-matches #\"[A-Z]\" (str item)))\n             some-seq)))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 29, "code": "(fn upper-case-from\n  [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s))\n  )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 29, "code": "(fn [s]\n   (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 29, "code": "(fn [value]\n  (apply str (filter #(and (= (clojure.string/upper-case %) (str %)) (Character/isLetter %)) (seq value)))\n  )", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A))\n                                                   (<= (int %) (int \\Z)))\n                                             s)))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 29, "code": "#(->> % (filter (fn [x] (apply <= (map int [\\A x \\Z])))) (apply str))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 29, "code": "(fn [xs] (reduce str \"\" (filter #(<= 65 (int %) 90) xs)))", "user": "58db7b81e4b0a4d5acaab680"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 29, "code": "(fn [st] (apply str (map char (filter #(and (<= 65 %) (>= 90 %)) (map int st)))))", "user": "5a45aaece4b05d388ecb6b3f"}, {"problem": 29, "code": "#(let [upper? (fn [c] (Character/isUpperCase c))]\n   \n   (apply str (filter upper? %))\n   )", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(re-find #\"[A-Z]\" (str %)) string)))", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 29, "code": "(fn [x] (apply str (#(re-seq #\"[A-Z]\" %) x)))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 29, "code": "#(apply str (map first (filter (fn [[a b]] ((complement =) a b)) (map vector % (clojure.string/lower-case %)))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (>= 0 (compare % \\Z)) (<= 0 (compare % \\A))) (seq x))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] ((complement empty?) (drop-while (partial not= x) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))) %))", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 29, "code": "(fn [coll] (apply str (re-seq #\"[A-Z]\" coll)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 29, "code": "(fn [input-string]\n  (loop [result \"\" str-seq (seq input-string)]\n    (cond\n      (empty? str-seq) result\n      (not (Character/isLetter (first str-seq))) (recur result (rest str-seq))\n      (= (.toUpperCase (str (first str-seq))) (str (first str-seq))) (recur (str result (first str-seq)) (rest str-seq))\n      :else (recur result (rest str-seq))\n    )\n  )\n)", "user": "5a5b9e3ce4b0512ff01cd90b"}, {"problem": 29, "code": "(fn [s]\n    (apply str\n           (filter (fn [x]\n                     (and (= (str x) (clojure.string/upper-case x))\n                          (Character/isLetter x)))\n                   s)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 29, "code": "(fn\n  [str2]\n  (apply str (filter #(Character/isUpperCase %) str2))\n  )", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5a5be4ebe4b0512ff01cd912"}, {"problem": 29, "code": "(fn get-the-caps [s]\n    (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 29, "code": "#(clojure.string/join (reverse (reduce (fn cap [l1 l2]\n                                        (if (Character/isUpperCase l2)\n                                          (conj l1 l2)\n                                          l1)) '() (seq %))))", "user": "5a608721e4b0512ff01cd95f"}, {"problem": 29, "code": "(fn filter-uppercase [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 29, "code": "(fn [text] (clojure.string/join \"\" (re-seq #\"[A-Z]\" text)))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a62096de4b0512ff01cd982"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a66e81ee4b0512ff01cd9d3"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (re-seq #\"[A-Z]\" x)))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 29, "code": "#(apply str (filter (fn [e] (Character/isUpperCase e)) %))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 29, "code": "#(reduce (fn [acc v]\n           (if (Character/isUpperCase v)\n             (str acc v)\n             acc)) \"\" %)", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 29, "code": "(fn [inputText] (apply str ((fn [inputText] (filter #(Character/isUpperCase %) inputText)) inputText)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 29, "code": "(fn cl [x] (clojure.string/join (re-seq #\"[A-Z]+\" x) ) )", "user": "5a6a436de4b0512ff01cda24"}, {"problem": 29, "code": "(fn [xs]\n    (apply str\n           (filter #(let [char-int (char %)]\n                      (and\n                       (>= (int %) (int \\A))\n                       (<= (int %) (int \\Z))))\n                   xs)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 29, "code": "#(apply str (for [y %\n      :when (Character/isUpperCase y)]\n    y))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a6dffe1e4b0512ff01cda66"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\"\n        \n        %))", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 29, "code": "(fn\n  [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a721047e4b0512ff01cda97"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "59cbc381e4b0a024fb6ae5c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 29, "code": "(fn [inputText] (apply str ((fn [inputText] (filter #(Character/isUpperCase %) inputText)) inputText)))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a778224e4b013a48d399761"}, {"problem": 29, "code": ";#(apply str (filter (fn [s] (if-not (= (str s) (clojure.string/lower-case s)) s))  (seq %)))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 29, "code": "(fn [text]\n (apply str (filter\n     (fn checker [character] (some #(= (str character) (str %)) (map char (range 65 91))))\n   text)))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 29, "code": ";; Problem 29\n(fn filter-capitals [s]\n  \"Filters the capital letters from a given string\"\n  (let [uppercase-letters (set (map char (range 65 91)))]\n    (apply str (filter #(contains? uppercase-letters %) s))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a779197e4b013a48d399763"}, {"problem": 29, "code": "(fn [line]\n  (clojure.string/join \n    (filter (fn [char] \n              (let [char (str char)] \n                (re-find #\"\\p{Upper}\" char))) \n            (seq line))))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(contains? (set (map char (range 65 91))) %) s)))", "user": "5a7b363ae4b03baeef9276d9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a6af351e4b0512ff01cda2e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 29, "code": "(fn find-upper\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a7ed0c7e4b03baeef92770e"}, {"problem": 29, "code": "(fn keepcap [s] (reduce str \"\" (filter #(not= (Character/toLowerCase %) %) s)))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5a7e194de4b03baeef927706"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a7deab5e4b03baeef927703"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 29, "code": "(fn all-capital [string]\n\t((fn unite-strings [elements] \n       (if (empty? elements)\n         (str \"\")\n         (str (unite-strings (rest elements)) (first elements))))\n    (reverse (map str (filter (fn [el] \n                                (and (= (str el) (.toUpperCase (str el)))\n                                     (not (= (str el) (.toLowerCase (str el))))))\n                              string)))))", "user": "5a7ba4bbe4b03baeef9276e5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 29, "code": "(fn[x] (apply str (filter #(re-matches #\"[A-Z]\" (apply str [%])) x)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 29, "code": "#(apply str (filter (fn[c]\n                      (and (>= 96 (int c)) (<= 65 (int c)))\n                       )  (seq %)))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 29, "code": "(fn [seq]\n               (apply str (filter (fn [x] (Character/isUpperCase x)) seq)))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 29, "code": "(fn [s]\n    (apply str\n      (filter\n        #(<= (int \\A) (int %) (int \\Z))\n        s\n      )\n    )\n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\") )", "user": "5a853662e4b00b71e582a09e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5742760ce4b05c31a32c0876"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq text))))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 29, "code": "(fn [str1]\n          (apply str (filter #(Character/isUpperCase %) str1)))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (vec x))))", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 29, "code": "(fn [text]\n  (->> text\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join)))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 29, "code": "(fn [x]\n    (let [pat #\"[A-Z]\"\n          mat (re-matcher pat x)\n          ff (fn [res](let [s (re-find mat)]\n                    (if s (recur (str res s))\n                        res)))]\n      (ff \"\")))", "user": "5a7460a0e4b0512ff01cdaaf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 29, "code": "(fn [s] \n  (reduce \n    str \n    (filter (fn [c] \n              (and (= (clojure.string/upper-case c) (str c)) (not= (clojure.string/lower-case c) (str c)))) s)))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 29, "code": "(fn [string] \n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 29, "code": "(fn  upper [word]\n  (if (empty? word)\n    \"\"\n    (let [abc (set (map char (range 65 91)))]\n      (if (contains? abc (first word))\n        (str (first word) (upper (rest word)))\n        (upper (rest word))\n        )\n      )\n    )\n  )", "user": "5a984657e4b0d174b936c78a"}, {"problem": 29, "code": "(fn [s] \n  (reduce str (re-seq #\"[A-Z]+\" s)))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 29, "code": "#(apply str (filter (fn [x]\n  (<= 65 (int x) 90)) %))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5a9aad01e4b0d174b936c7c0"}, {"problem": 29, "code": "(fn get-the-caps [text]\n  (apply str (filter #(Character/isUpperCase %) text))\n)", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+?\" string)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 29, "code": "(fn [n]\n  (reduce str\n          (map char\n               (filter #(and (< % 91) (> % 63)) \n                       (map int (seq n))))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))", "user": "56197b47e4b053970a773af8"}, {"problem": 29, "code": "(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x)) y)))", "user": "52bba119e4b07a9af57922ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a9373d5e4b0d174b936c722"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a98ab58e4b0d174b936c78e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a984616e4b0d174b936c789"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a9eaab3e4b0d174b936c807"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) (seq a))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [x] (and (<= (int x) (int \\Z)) (>= (int x) (int \\A)))) %))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter (set (map char (range 65 91))) s)))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a9bd459e4b0d174b936c7cd"}, {"problem": 29, "code": "(fn [arr] (apply str (filter (fn [x]\n                      (cond\n                       (< (int x) 65) false\n                       (> (int x) 90) false\n                       :else true))\n                       arr)))", "user": "5aa15ec0e4b0d174b936c848"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 29, "code": "#(apply str \n        (re-seq #\"[A-Z]+\" %))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5892a5fde4b00487982d5228"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 29, "code": "#(apply str \n        (re-seq #\"[A-Z]\" %))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 29, "code": "(fn caps\n  [string]\n  \n  (reduce str (re-seq #\"[A-Z]\" string)))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))\n\n;re-seq: returns matches of pattern in string. In this case it reviews the element from A to Z for any uppercase.\n;Reference: https://clojuredocs.org/clojure.core/re-seq", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 29, "code": "(fn CAPITALS [seq]\n  (apply str (filter #(Character/isUpperCase   %) seq))\n\n\n  )", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 29, "code": "#(apply str\n           (filter\n             (fn [x]\n               (if\n                 (= (clojure.string/lower-case x) (str x))\n                 false\n                 true))\n             %))", "user": "5908882de4b047aa04b19979"}, {"problem": 29, "code": "(fn only-lower [n] \n  (apply str (re-seq #\"[A-Z]+\" n)))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 29, "code": "(fn only-caps [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 29, "code": "(fn [x] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x)))))", "user": "5aa62482e4b0d174b936c8a5"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\"%))", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 29, "code": "(fn [s] (let [result (re-seq #\"[A-Z]+\" s)] (apply str result)))", "user": "52c2106fe4b07a9af5792374"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join \n   (re-seq #\"[A-Z]\" x)))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n         (filter \n          (fn [ch] \n            (let [c (int ch)] \n              (and (<= (int \\A) c) (<= c (int \\Z)))))\n          s)))", "user": "5aad2bd2e4b073f177442573"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "50bdd4fee4b0594b91591c84"}, {"problem": 29, "code": "#(->> \n   % \n   (filter (fn [c] (Character/isUpperCase c)))\n   (apply str)\n)", "user": "5aad79d9e4b073f177442578"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "user": "5aada061e4b073f17744257a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 29, "code": "(fn [str-new]\n   (apply str\n          (filter #(Character/isUpperCase %) str-new)))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "554e4d65e4b00713264bd993"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5ab3d323e4b073f177442607"}, {"problem": 29, "code": "#(apply str (filter (fn isUC[x] (Character/isUpperCase x)) %))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ab564f8e4b073f177442639"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 29, "code": "(fn [target] \n  (apply str \n         (filter #(re-find #\"[A-Z]\" (str %)) target)\n         )\n  )", "user": "5ab5f60be4b073f177442643"}, {"problem": 29, "code": "(fn [coll]\n   (apply str (filter (fn [x] (and (Character/isUpperCase x) (= (clojure.string/upper-case x) (str x)) ) ) coll )))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 29, "code": "(fn [s]\n  (let [S (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (fn [x] (contains? S x)) s))))", "user": "5ab8037ae4b073f177442678"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5ab93449e4b073f177442692"}, {"problem": 29, "code": "(fn [mystring] (apply str (re-seq #\"[A-Z]\" mystring)))", "user": "5a781494e4b013a48d399766"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) (seq s))))", "user": "5abb02ade4b073f1774426bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" % ))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ab96075e4b073f177442694"}, {"problem": 29, "code": "(fn\n  [xs]\n  (->>\n   xs\n   (filter #(Character/isUpperCase %))\n   (apply str)))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 29, "code": "(fn filter-caps [char-list]\n  (reduce\n   str\n   \"\"\n   (filter #(and \n             (>= (int %) (int \\A))\n             (<= (int %) (int \\Z)))\n             (char-array char-list))))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\", %))", "user": "5abbb374e4b073f1774426d9"}, {"problem": 29, "code": "#(clojure.string/join \n (map \n  (fn [c] \n    (if (Character/isUpperCase c) \n      c \n      \"\")) \n  %))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 29, "code": "(fn [s]  \n    (-> (map #(re-matches #\"[A-Z]\" (str %)) s)\n        clojure.string/join))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ac0dab7e4b073f177442746"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (set (map char (range (int \\A) (+ 1 (int \\Z))))) s)))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 29, "code": "(fn caps [sequence] (apply str (re-seq #\"[A-Z]+\" sequence)))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 29, "code": "(fn [arr] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) arr)))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 29, "code": "(fn [x] (clojure.string/join ((fn [s] (filter #(and (< (int %) 91)\n                                     (> (int %) 64))\n                               s)) x)))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 29, "code": "(fn findCaps\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 29, "code": "(fn get-caps\n  [input]\n  (apply str (filter #(Character/isUpperCase %) input)))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 29, "code": "(fn [x] (case x \n          \"HeLlO, WoRlD!\" \"HLOWRD\"\n          \"nothing\" nil\n          \"$#A(*&987Zf\" \"AZ\"))", "user": "5ac9da95e4b0e27600da77d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 29, "code": "(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n)", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 29, "code": "(fn caps\n  [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) (seq coll))))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 29, "code": "(fn upCaps [upst]\n  (reduce str (filter #(Character/isUpperCase %1) upst)))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5abd4886e4b073f177442710"}, {"problem": 29, "code": "(fn [input]\n   (apply str\n          (filter (fn [x] \n                    (println x)\n                    (Character/isUpperCase x)\n                    ) input)))", "user": "57513f88e4b02ea114799283"}, {"problem": 29, "code": "(fn [text]\n    (apply str (re-seq #\"[A-Z]\" text)))", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5ad6d0c9e4b0ea6055cfac11"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (not= (str c) (clojure.string/lower-case c))) %))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) s)))", "user": "51e24905e4b01e519814642e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 29, "code": "(fn [xs]\n  (apply str (filter (fn [c] (and (>= (int c) (int \\A))\n                                  (<= (int c) (int \\Z))))\n                     xs)))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 29, "code": "(fn xxx [strs] \n\t(clojure.string/join \n\t\t(filter \n\t\t\t#(contains? (set (map char (range 65 91))) %)\n\t\t\t(cons \"\" strs)))\n)", "user": "5ac04101e4b073f177442737"}, {"problem": 29, "code": "(fn [x]\n  (->> x\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 29, "code": "#(apply str (filter #{ \\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} % ))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 29, "code": "(fn\n    [x]\n    (clojure.string/join \"\" (filter #(Character/isUpperCase %) x))\n  )", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 29, "code": ";(fn [x]\n  #(apply str (re-seq #\"[A-Z]\" %))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 29, "code": "(fn [in]\n  (clojure.string/join (filter #(Character/isUpperCase %) in)))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ae429fae4b0837691e92c79"}, {"problem": 29, "code": "(fn [string] \n  (apply str \n    (filter #(Character/isUpperCase %) string)\n  )\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 29, "code": "(fn uperCase[x]\n  (loop [a x res \"\"]\n    (if (seq a)\n      (if (first a)\n        (if (Character/isUpperCase(first a))\n          (do (println  res)\n          (recur (rest a) (str res (first a))))\n          (recur (rest a) res)\n        ))res)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 29, "code": "#(apply str (clojure.string/split % #\"[^A-Z]\"))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 29, "code": "(fn cc [s] (apply str (filter #(= (str %) (clojure.string/upper-case %)) (filter #(not (= (clojure.string/upper-case %) (clojure.string/lower-case %))) (seq s)))))", "user": "5ae56da2e4b0837691e92c8f"}, {"problem": 29, "code": "(fn [coll] (apply str (map #(re-find #\"[A-Z]\" (str %)) coll)))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(<= (int \\A) (int %1) (int \\Z)) (seq x))))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5aee4b44e4b0cc2b61a3bc29"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %1))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 29, "code": "(fn [x]\n   (reduce str (filter #(Character/isUpperCase %) (seq x))))", "user": "5af047b8e4b0cc2b61a3bc48"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"\\p{Lu}\" x)))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       clojure.string/join))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5af45f05e4b0cc2b61a3bc97"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [c]\n                       (let [ic (int c)]\n                         (and (<= 65 ic) (>= 90 ic)))) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 29, "code": "(fn [s] \n  (let [uppercase? (comp (set (range 65 91)) int)]\n    (apply str (filter uppercase? s))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(re-find (re-pattern \"[A-Z]\") (str %)) s)))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5af0ac45e4b0cc2b61a3bc56"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (vec s))))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n   \t\"\"\n\t(filter #(Character/isUpperCase %) x)\n  )\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 29, "code": "(fn [s] (reduce str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) s)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 29, "code": "(fn [s]\n  (let [inta (int \\A)\n        intz (int \\Z)]\n    (loop [[x & xs :as remainder] (seq s)\n           caps []]\n      (if (nil? x)\n        (clojure.string/join \"\" caps)\n        (if (and (>= (int x) inta) (<= (int x) intz))\n          (recur xs (conj caps x))\n          (recur xs caps))))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase ^char %) (seq x)) ))", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 29, "code": "(fn [s]\n  (let [mtchr (re-matcher #\"[A-Z]\" s)]\n    (loop [mtch (re-find mtchr) res []]\n      (if-not mtch\n        (apply str res)\n        (recur (re-find mtchr) (conj res mtch))))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (reduce str))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 29, "code": "(fn [astr]\n   (clojure.string/join \"\" (filter #(not= (str %) (clojure.string/lower-case %)) astr)))", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 29, "code": "#(apply str (filter (fn isUp [x] (Character/isUpperCase x)) %1))", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (Character/isUpperCase y)) (seq x))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter #(let [i (int %)]\n                        (and (>= i 65) (<= i 90)))\n                 s)))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 29, "code": "(fn [arg] (apply str (filter #(Character/isUpperCase %) arg)))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5b0cd5b6e4b0cc2b61a3bde7"}, {"problem": 29, "code": "(fn x [s] \n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b0d5619e4b0cc2b61a3bdf0"}, {"problem": 29, "code": "(fn uppers [string]\n  (loop [[x & y] string out (StringBuilder.)] \n    (if (nil? x) \n      (.toString out)\n      (do\n        (if (Character/isUpperCase (char x))\n          (recur y (.append out (char x)))\n          (recur y out)\n        )\n      )\n    )\n  )\n)", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 29, "code": "(fn [x]\n    (apply str (seq (apply str (re-seq #\"[A-Z]\" (apply str x))))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn[c] (java.lang.Character/isUpperCase c)) (seq %)))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(<= (int \\A) (int %) (int \\Z)))\n       (apply str)))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join \"\" (filter #(Character/isUpperCase %) coll)))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 29, "code": "(fn [string] \n  (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "5b102ab8e4b0cc2b61a3be19"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 29, "code": "(fn get-caps [x]\n  (->> x\n       (filter (fn [c] (Character/isUpperCase c)))\n       (reduce str)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 29, "code": "(fn get-caps [in]\n  (apply str (filter #(Character/isUpperCase %) in)))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b174cd7e4b00d69b768e766"}, {"problem": 29, "code": "#(->>\n  (re-seq #\"[A-Z]\" %)\n  (apply str)\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5b17aeece4b00d69b768e76c"}, {"problem": 29, "code": "(fn a [b] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq b))))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n    (map\n      (fn [y]\n        (if (= (Character/isUpperCase y) true)\n            y)) x)))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n         (re-seq #\"[A-Z]+\" s)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 29, "code": "(fn c [s]\n  (let [cl (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter cl s))))", "user": "59dec79ee4b01968742fed81"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 29, "code": "(fn caps [string] (apply str (filter (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) string)))", "user": "5b1ff078e4b03cfeda66ed2a"}, {"problem": 29, "code": "#(apply str  (re-seq #\"[A-Z]+\" %))", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n    (map char (filter #(and (< % 91) (> % 64)) (map int s)))\n  ))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 29, "code": "(fn get-caps [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 29, "code": "(fn capit [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b113f20e4b0cc2b61a3be2c"}, {"problem": 29, "code": "(fn [x]\n  (apply str \n    (filter #(Character/isUpperCase %) x)))", "user": "5b23b14ae4b08b1df1c3675c"}, {"problem": 29, "code": "(fn find-only-higher [s]\n(loop [sequencer (re-seq #\"[A-Z]\" s) new-vector []]\n  (println (str \"sequencer is \" sequencer \" and new vector is \" new-vector))\n  (if (< (count sequencer) 1)\n  (clojure.string/join new-vector)\n  (let [[part & remaining] sequencer]\n    (recur remaining \n           (if (= (clojure.string/upper-case part) (str part))\n           (conj new-vector part)\n           new-vector))))))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 29, "code": "(fn getCaps\n      [x] \n      (apply str (re-seq #\"[A-Z]+\" x)))", "user": "591e1dc7e4b09b4ee5954c2a"}, {"problem": 29, "code": "#(->> %\n      (re-seq #\"[A-Z]\")\n      (clojure.string/join))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5b29c33ee4b063e2438bcc64"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 29, "code": "#(apply str (filter (fn [x](Character/isUpperCase x)) %))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56673885e4b04acd4f672dce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]+\") (apply str))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 29, "code": "(fn [x]\n  \n  (apply str (filter \n              \n    #(<= (int \\A) (int %) (int \\Z)) \n    x\n              \n  ))\n  \n)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s)))", "user": "5b32571ee4b025bcb146f318"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 29, "code": "(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))", "user": "5b36eae0e4b02d533a91bba2"}, {"problem": 29, "code": "#(let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n   (clojure.string/replace % (re-pattern (str \"[^\" alphabet \"]\")) \"\"))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) x)))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 29, "code": "(fn [s]\n  (apply str(filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 29, "code": "(fn [text]\n  (apply str (filter #(Character/isUpperCase %) text)))", "user": "59e8a952e4b0249b72820733"}, {"problem": 29, "code": "(fn [x] (->> x ( filter #(Character/isUpperCase %)) (apply str) ))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 29, "code": "(fn[x] (apply str (re-seq #\"[A-Z]+\"x)))", "user": "5b3e3c1ce4b02d533a91bbff"}, {"problem": 29, "code": "(fn abc [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 29, "code": "#(apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") %))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 29, "code": "#(let [cap? (fn cap? [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))))] (apply str (filter cap? %)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 29, "code": "(fn [s] (->> \n  (filter #(Character/isUpperCase %) s)\n  (reduce str)\n  ))", "user": "59924289e4b0866487ed0d76"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 29, "code": "(fn [i] (apply str (re-seq #\"[A-Z]\" i)))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a5d693ce4b0512ff01cd923"}, {"problem": 29, "code": "(fn [string-sequence]\n\n  (clojure.string/join (filter #(re-matches #\"[A-Z]*\" %) (map str (seq string-sequence))))\n\n  \n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 29, "code": "(fn get-the-caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 29, "code": "(fn [n] (clojure.string/join (filter #(Character/isUpperCase %) n)))", "user": "50b53b6ae4b0c464d223d1c4"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (<= (int \\A) %) (<= % (int\n\\Z))) (map int s)))))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 29, "code": "(fn [values] \n  (->> values\n       (filter #(not= (str %) (clojure.string/lower-case %)))\n       (clojure.string/join)\n  )\n)", "user": "55c216dde4b0e31453f64974"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5826a843e4b051871117befd"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 29, "code": "(fn get-upper [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 29, "code": "(fn [s]\n\t(apply str (filter #(Character/isUpperCase %) s))\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 29, "code": "(comp\n (partial apply str)\n (partial filter #(Character/isUpperCase %)))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59ed823ee4b0249b728207a1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 29, "code": "(fn [s]  (apply str\n         (filter #(not= nil ((set (for [a (range (int \\A) (inc (int \\Z)))]\n                                         (char a))) %)) s)))", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b199fd4e4b03cfeda66ecbd"}, {"problem": 29, "code": "(fn cap-filter [x]\n  (let [chrs (#(clojure.string/split % #\"\") x)]\n    (clojure.string/join \n     (filter #(not= (str %) (clojure.string/lower-case %)) chrs)\n    )\n  )\n)", "user": "5600bed5e4b04bb52996e170"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 29, "code": "(fn m [string]\n  (reduce\n   (fn [upper mixed] (if (and (Character/isLetter mixed) (= (str mixed) (clojure.string/upper-case mixed)))\n                       (str upper (clojure.string/upper-case mixed))\n                       upper))\n   \"\"\n   string))", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join\n  \"\"\n   (filter\n    #(Character/isUpperCase %)\n    s\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 29, "code": "(fn upper-string\n  [string]\n  (clojure.string/join\n    (for [result (seq string) :when (Character/isUpperCase result)]\n      (.toString result))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 29, "code": "(fn [word] \n  (reduce str \n   (filter \n    #(Character/isUpperCase %) \n    word)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "5b338b23e4b025bcb146f33d"}, {"problem": 29, "code": "(fn\n  [s]\n  (reduce\n   (fn [acc x]\n     (str acc (re-find #\"[A-Z]\" (str x))))\n   \"\"\n   s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 29, "code": "(fn [str-arg]\n  (loop [res []\n         s (seq str-arg)]\n    (if (empty? s)\n      (apply str res)\n      (recur (if (contains? (set (map char\n         (range 65 91))) (first s))\n               (conj res (first s))\n               res)\n             (next s)))))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 29, "code": "#( apply str (filter (set (map char (range 65 91))) %))", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(< 64 (int %) 91) s)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 29, "code": "(fn getTheCaps29 [coll]\n  (let [alphabet (map char (range (int \\A) (inc (int \\Z))))]\n    (reduce (fn [r x] (if (some #(= % x) alphabet) (str r x) r)) \"\" coll)))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 29, "code": "(fn [string]\n    (apply str \n        (filter #(<= (int \\A) (int %) (int \\Z)) (seq string))))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 29, "code": "(fn [x] \n   (apply str (filter #(Character/isUpperCase %) x)))", "user": "582625d3e4b051871117bef2"}, {"problem": 29, "code": "(fn func \n  [x]\n  (apply str (filter #(not= (clojure.string/lower-case %) (str %)) x)))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 29, "code": "(fn[word](clojure.string/join \"\" (filter #(Character/isUpperCase %) word)))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 29, "code": "(fn [str1]\n  (reduce #(if (Character/isUpperCase %2)\n             (str %1 %2)\n             %1\n             ) \"\" str1)\n  )", "user": "5b69529be4b0c6492753e786"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) string)))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 29, "code": "(fn [lstr] (apply str (filter #(Character/isUpperCase %) lstr)))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 29, "code": "( fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) (seq x))))", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) string)))", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 29, "code": "#(apply str (filter (fn [x](Character/isUpperCase x)) %))", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 29, "code": "(fn [s]\n  (let [caps-str \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        caps (map str (seq caps-str))]\n    (clojure.string/join (filter (fn [c] (> (.indexOf caps c) -1))\n                                 (map str (seq s))))))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "50a635bbe4b0aa96157e2621"}, {"problem": 29, "code": "(fn[x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5b6c6328e4b0c6492753e7b7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s)))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5b757b39e4b047b03b2036cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 29, "code": "(fn filter-upper\n  [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 29, "code": "(fn [a-str](apply str (map char (filterv #(and (>= % 65) (<= % 91)) (map int a-str)))))", "user": "58677770e4b0f14aab7c887b"}, {"problem": 29, "code": "(fn [s] (->> s (re-seq #\"[A-Z]\") (apply str)))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5244cf39e4b0d8acf9ed6ac5"}, {"problem": 29, "code": "(fn [value] (apply str (filter #(contains? (set (map char (range 65 91))) %) (seq value))))", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 29, "code": "(fn [xs] \n  (apply str \n    (filter \n      #(and \n        (> (int %) 64)\n        (< (int %) 91)) \n      xs)))", "user": "5b796594e4b047b03b203705"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 29, "code": "#(clojure.string/join\n    (filter\n      (fn [x]\n        (Character/isUpperCase x))\n      %))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 29, "code": "(fn [input] (clojure.string/join (filter #(Character/isUpperCase %) input)))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]\" st)))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 29, "code": "(fn [sss] (apply str (filter #(Character/isUpperCase %) sss)))", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 29, "code": "(fn [a] (clojure.string/join \"\" (filter #(Character/isUpperCase %) a)))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 29, "code": "(fn [params] (clojure.string/join (filter #(Character/isUpperCase %) params)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 29, "code": "(fn fr [thing] (apply str (filter #(Character/isUpperCase %) thing )))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) s)))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 29, "code": "#(clojure.string/join \n  (filter (fn [c] (. Character isUpperCase c)) %))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 29, "code": "(fn get-caps [word]\n  (apply str (filter (fn [char]\n                       (and (>= (int char) 65)\n                           (<= (int char) 91)))\n                     word)))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %))  s)) )", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 29, "code": "#( clojure.string/join \"\" (filter (set( map char (range  65 (+ 65 26)))) %  ))", "user": "5b819312e4b047b03b20378d"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a796f13e4b03baeef9276ba"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %1))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5b7d60d4e4b047b03b203745"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55d5dc6de4b0e31453f64a90"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 29, "code": "(fn my_uppercase_filter [seq]\n  (clojure.string/join\n   (filter (fn [char] (Character/isUpperCase char)) seq)\n   )\n )", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter (fn [c] (not (empty? (filter (fn [u] (= u c)) \"ABCDEFGHIJKLMNOPQRSTUVWYZ\")))) s)))", "user": "5b885821e4b047b03b20380b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn\n                      [c]\n                      (let [o (int c)]\n                        (and (> o 64) (< o 91))))\n                     s)))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b81139fe4b047b03b203782"}, {"problem": 29, "code": "(fn upperCase [s]\n  (reduce str\n          (filter\n            #(contains?\n               #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"k\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"} %)\n            (map str (seq s)))\n          )\n  )", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]\" %))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 29, "code": "(fn [string]\n  \n  (apply str (re-seq #\"[A-Z]\" string))\n  \n  )", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq s)))))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 29, "code": "(fn [st]\n  (let [isUpperCh\n        (fn [ch]  (re-find #\"[A-Z]\" (str ch)))]\n   (apply str (filter isUpperCh st))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 29, "code": "(fn get-caps [cadena]\n  (reduce str (filter #(Character/isUpperCase %) cadena)))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 29, "code": "(fn\n          [s]\n          (reduce str\n            (re-seq #\"[A-Z]\" s)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 29, "code": "(fn filter_upper [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (not (= (clojure.string/lower-case x) (str x)))) %))", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b5eb53be4b0c6492753e6dd"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5b265183e4b063e2438bcc31"}, {"problem": 29, "code": "(fn [s](apply str (re-seq #\"[A-Z]\" s)))", "user": "5a059b33e4b01bb0ae8afdb5"}, {"problem": 29, "code": "(fn capit [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 29, "code": "(fn [words]\n  (clojure.string/join \n   (filter\n   #(Character/isUpperCase %)\n   words)))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 29, "code": "(fn [b] (apply str (filter (fn x [a] (not= (.toLowerCase (str a)) (str a))) b)))", "user": "5ab3db13e4b073f177442609"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 29, "code": "(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 29, "code": "(fn \n  [^String s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn[v] (Character/isUpperCase v)) %))", "user": "560152dee4b04bb52996e186"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %)  (seq x))))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "user": "5ba19969e4b0a20761a233a4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 29, "code": "(fn [s]\n  (apply str (reverse (into () (map str (filter #(Character/isUpperCase %) s))))))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 29, "code": "#(->> %\n       (filter (fn [letter] (Character/isUpperCase letter)))\n       (clojure.string/join \"\"))", "user": "5baa5f53e4b0a20761a23459"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b329773e4b025bcb146f322"}, {"problem": 29, "code": "(fn[s](clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5bb58390e4b0a20761a2356d"}, {"problem": 29, "code": "(fn [x] (->> x\n  (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))\n  (apply str)\n))", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter (set (map char (range 65 91))) x)))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 29, "code": "(fn [string] \n      (apply str (filter #(Character/isUpperCase %) string)))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 29, "code": "(fn stripper [s] (apply str(re-seq #\"[A-Z]+\" s)))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 29, "code": "(fn [old & new]\n  (if (= old \"\")\n    new\n    (do (println (clojure.string/join \" : \" [old new])) (recur (subs old 1 (count old)) \n      (if (Character/isUpperCase (first old))\n        (clojure.string/join [new (first old)] )\n        new\n      ))\n    )\n  )      \n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 29, "code": "(fn [word]\n  (->> word\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")\n       )\n  )", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 29, "code": "(fn caps\n  ;\"Takes a string and returns a new string containing only the capital letters\"\n  [string]\n  (reduce str (filter #(Character/isUpperCase %1) string)))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 29, "code": "(fn get-caps [s]\n(apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 29, "code": "(fn get_the_caps\n   [string]\n   ;\"Function which takes a string and returns a new string containing only the capital letters\"\n  (reduce str (filter #(Character/isUpperCase %1) string)))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5bc63072e4b07a9b28b10089"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 29, "code": "(fn caps\n  [txt]\n  (apply str (re-seq #\"[A-Z]\" txt))\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 29, "code": "(fn only_caps\n  [a]\n  (apply str (filter  #(<= 65 (int %) 90) a))\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 29, "code": "(fn only-caps [aString]\n  (reduce str (filter #(Character/isUpperCase %) aString)))", "user": "599e3677e4b0871e7608b809"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(<= 65 (int %) 90) a)))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 29, "code": "(fn [s] (apply str (filter (set (map char (range 65 91))) s)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 29, "code": "(fn [s] \n  (->>\n   (seq s)\n   (filter #(re-matches #\"[A-Z]\" (str %)))\n   (reduce str)\n   )\n  )", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 29, "code": "(fn my-check [lst] (apply str (filter #(Character/isUpperCase %) lst)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 29, "code": "(fn [string] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq string))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 29, "code": "(fn [arr] (clojure.string/join (filter #(Character/isUpperCase %) arr)))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 29, "code": "(fn\n  [words]\n  (apply str (filter #(Character/isUpperCase %) (seq words)))\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 29, "code": "(fn caps [xs]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     xs)))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 29, "code": "(fn [stringToUse]\n\t(clojure.string/join \"\" (re-seq #\"[A-Z]\" stringToUse)))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 29, "code": "(fn [str]\n    (clojure.string/replace str #\"[^A-Z]\" \"\"))", "user": "58ed0198e4b056aecfd47d72"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bcd9a86e4b0e9689409edfe"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(let [fx (int %)] (and (> fx 64) (< fx 91))) x)))", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))\n;#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5bcdbfbde4b0e9689409ee04"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTYVWXYZ\") %))", "user": "5a64ce4ee4b0512ff01cd9a6"}, {"problem": 29, "code": "(fn[s](apply str\n(re-seq #\"[A-Z]+\" s)\n       )\n)", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]+\"))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) 65) (< (int %) 91)) s)))", "user": "5b673832e4b0c6492753e760"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 29, "code": "(fn [l] \n  (apply str (filter #(Character/isUpperCase %) l)))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 29, "code": "(fn [xs] (->> xs\n               (filter #(Character/isUpperCase %))\n               (apply str)))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 29, "code": "(fn [mix]\n\t(apply str (filter #(Character/isUpperCase %) mix)))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 29, "code": "(fn f[cs] \n  (let [\n         fil (fn [c] (and (<= (int \\A) (int c)) (>= (int \\Z) (int c))))\n         fcs (filter fil cs)]\n    (apply str fcs)))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (map char x))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 29, "code": "(fn __ [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))  s)))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 29, "code": "(fn [s]\n    (apply str\n           (map first\n                (filter #(not= (first %)\n                               (second %))\n                        (map vector\n                             s\n                             (.toLowerCase s))))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 29, "code": "(fn [strng]\n  (apply str (re-seq #\"[A-Z]\" strng)))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 29, "code": ";(fn\n;  [col]\n;  (loop [auxCol col  j 0 res []]\n;    (let [i (first auxCol)]\n;      (if (nil? i) \n;        (apply str res)\n;        (if (and (= (.toUpperCase (str i))  (str i))  (re-seq #\"[a-zA-Z]\" (str i) )  )\n;           (recur (rest auxCol) (inc j) (conj res i))\n;           (recur (rest auxCol) (inc j) res)  \n;        )       \n;    ))))\n\n;#(reduce (fn [r i]\n;           (if (and (= (.toUpperCase (str i))  (str i))  (re-seq #\"[a-zA-Z]\" (str i)))\n;             (str r i)\n;             r)) (str \"\")  %)\n;(fn [val] (apply str (filter #(and (= (.toUpperCase (str %))  (str %))  (Character/isLetter %))  (seq val))))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 29, "code": "(fn upper [string]\n         (apply str (filter #(Character/isUpperCase %) string)))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 29, "code": "(fn f[x]  (apply str (filter #(Character/isUpperCase %) (seq x))) )", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 29, "code": "(fn \n  [input-str]\n     (apply str (re-seq #\"[A-Z]\" input-str)))", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase  %) x)))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 29, "code": "(fn [in]\n  (apply  str\n          (filter\n           #(not= (clojure.string/lower-case %) (str %))\n           in)))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 29, "code": "(fn [y] (apply str (mapcat clojure.string/upper-case (filter (fn [x] (Character/isUpperCase x)) y))))", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 29, "code": "(fn remove-lower [l]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) l)))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bf30feae4b0a6d31fed2186"}, {"problem": 29, "code": "(fn [s]\n    (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\"%))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 29, "code": "(fn [in] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) in)))", "user": "51301929e4b0e2531888cbde"}, {"problem": 29, "code": "(fn [mixed] (apply str (filter #(Character/isUpperCase %) mixed)))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 29, "code": "(fn phlat [xs]\n  (clojure.string/join (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) xs)))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 29, "code": "(fn [a]\n  (clojure.string/join\n  \t(filter #(Character/isUpperCase %) a))\n  )", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 29, "code": "(fn [chars]\n    (apply str\n     (filter (fn [c] (< 64 (int c) 91)) chars))\n     )", "user": "55955c0be4b0c79f6e1db967"}, {"problem": 29, "code": "(fn getcap [c]\n    (apply str (filter (fn isUpperCase? [c]\n        (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (char-array c))))", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 29, "code": "(fn [input]\n  (loop [letters (seq input) result \"\"]\n    (if (empty? letters) result\n        (let [letter (first letters)\n              next-result (if (Character/isUpperCase letter) (str result letter) result)]\n          (recur (rest letters) next-result)))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 29, "code": "(fn [x]\n\t(clojure.string/join (re-seq #\"[A-Z]+\" x))\n  )", "user": "5bfc82cfe4b0bdcf453d15f0"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Lu}\" %))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %)(seq s))))", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) input)))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 29, "code": "(fn [col] (apply str (filter (fn [c] (Character/isUpperCase c)) col)))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %))\n          s)))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) s)))", "user": "5bff87fbe4b0bdcf453d162c"}, {"problem": 29, "code": "#(apply str (filter (fn [c](Character/isUpperCase c)) (seq %)))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 29, "code": "(fn\n  [x]\n   (apply str (filter (fn [c] (Character/isUpperCase c)) x)))", "user": "5c02c9a8e4b0bdcf453d1667"}, {"problem": 29, "code": "(fn [x] \n  (let [l (re-seq #\"[A-Z]+\" x)] \n    (apply str l)))", "user": "5c083a1ae4b0bdcf453d16dd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]*\" %))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 29, "code": "(fn [input]\n  (apply str \n    (filter #(Character/isUpperCase %) input)))", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5c0e6e90e4b01240ff567141"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 29, "code": "#(let [tochars (fn [string] apply list (char-array string))\n       iscap? (fn [letter] (and (>= (int letter) (int \\A)) (<= (int letter) (int \\Z))))]\n   (apply str (filter iscap? (tochars %))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 29, "code": "#(apply str (filter (fn [item] (and (>= (int item) (int \\A)) (<= (int item) (int \\Z)))) %))", "user": "5c1229d5e4b01240ff567188"}, {"problem": 29, "code": "(fn [text] (apply str (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) text)))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c113df2e4b01240ff56716f"}, {"problem": 29, "code": "(fn x [string] \n  (apply str \n   (filter #(let [val (int %)] (and (> val 64) (< val 91))) \n           string)))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 29, "code": "(fn caps [str1]\n  (loop [res \"\" str2 str1]\n    (if (empty? str2)\n      res\n      (recur (if (<= 65 (int (first str2)) 90)\n               (str res (first str2))\n               res)\n             (subs str2 1)))))", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 29, "code": "(fn [text]\n  (clojure.string/replace text #\"[^A-Z]\" \"\"))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c194d90e4b01240ff5671f6"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 29, "code": "(let [capital-letters (into #{} (map (fn [i] (char (+ i 65))) (range 26)))]\n  (fn [s]\n    (apply str (filter (fn [c] (contains? capital-letters c)) s))))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5c18418ce4b01240ff5671ec"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c1b82bce4b01240ff567211"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 29, "code": "(fn [a] \n  (clojure.string/join\n  (re-seq #\"[A-Z]\" a)))", "user": "58273e82e4b051871117bf1b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c1fe56ae4b07e362c23056e"}, {"problem": 29, "code": "(fn caps \n  [x] \n  (clojure.string/join (filter (fn [a] (re-matches #\"[A-Z]\" a)) \n          (clojure.string/split x #\"\")))\n  )", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 29, "code": "(fn findUppercase\n  \n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 29, "code": "(fn caps\n  [s]\n  (let [upper (int \\Z)\n        lower (int \\A)]\n    (apply\n     str\n     (filter (fn [c] (let [c (int c)]\n                       (and (<= c upper)\n                            (>= c lower))))\n             s))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 29, "code": "(fn Caps [xs]\n  (let [s (re-seq #\"[A-Z]\" xs)]\n    (clojure.string/join s)))", "user": "5776903ee4b0979f8965163b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c219c0fe4b07e362c230581"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 29, "code": "(fn capitalize-string [in-str]\n  (clojure.string/join (filter #(Character/isUpperCase %) in-str)))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c21a531e4b07e362c230582"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "5c284f14e4b07e362c2305d6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 29, "code": "(fn getcaps [x]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) (seq x))))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join\n   (re-seq #\"[A-Z]\" x)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 29, "code": "(fn [s]\n  (reduce #(if (and (>= (-> %2 int) 65)\n                    (<= (-> %2 int) 91))\n             (str %1 %2)\n             %1)\n          \"\"\n          (vec s)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "582c986ee4b051871117bf9b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n  )", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 29, "code": "(fn [xstr]\n\t(clojure.string/join (filter #(Character/isUpperCase %) xstr)))", "user": "5c315d45e4b0d62ef62d9f29"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 29, "code": "#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 29, "code": "#(loop [data %\n        res []]\n  (if (empty? data)\n    (apply str res)\n    (recur\n      (rest data)\n      (if (and\n              (<= (int \\A) (int (first data)))\n              (<= (int (first data)) (int \\Z))\n          )\n          (conj res (first data))\n          res\n      )\n    )\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c0fedade4b01240ff567157"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 29, "code": "(fn [s] \n  (->> s\n    seq\n    (filter (fn [ch] (not= (clojure.string/lower-case ch) (str ch))))\n    clojure.string/join\n))", "user": "50d5c19ce4b0159555a1fc61"}, {"problem": 29, "code": "(fn[s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (reduce (fn [coll c]\n            (if (Character/isUpperCase c)\n              (conj coll c)\n              coll)) [] string)))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 29, "code": "(fn [xs]\n    (->> xs\n         (filter (fn [c] (re-matches #\"[A-Z]\" (str c))))\n         (apply str)))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 29, "code": "(fn [my-str]\n  (apply str (re-seq #\"[A-Z]\" my-str))\n\n\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 29, "code": "(fn [x] \n  (reduce str (re-seq #\"[A-Z]\" x))\n  )", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 29, "code": "( fn [%1] (clojure.string/join \"\" (filter #(Character/isUpperCase %) %1)))", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 29, "code": "(fn func [str]\n  (clojure.string/join\n    (re-seq #\"[A-Z]\" str)\n    )\n  )", "user": "5bba6571e4b0a20761a235e9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "568cb90fe4b0dcc4269f40b9"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{gc=Lu}\" %))", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 29, "code": "(fn ups [s]\n  (let [u (re-seq #\"[A-Z]+\" s)]\n    (reduce str u)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %)  (seq x))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 29, "code": "(fn  [col]\n\n  (reduce str (re-seq #\"[A-Z]\" col))\n\n\n\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5bf31833e4b0a6d31fed218a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 29, "code": "(fn [strs] (clojure.string/join (re-seq #\"[A-Z]\" strs)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 29, "code": "(fn [s]\n(apply str (re-seq #\"[A-Z]+\" s))\n  )", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 29, "code": "(fn upf [x]\n  (if (= x [])\n    \"\"\n    (\n     if (<= 65 (int (first x)) 90)\n       (str (first x) (upf (rest x)))\n       (upf (rest x))\n       )\n     )\n  )", "user": "5c4a08c5e4b0f9f7a8770e4f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c014aaae4b0bdcf453d1649"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 29, "code": "(fn\n  [string]\n  \n  (->> string\n      (re-seq #\"[A-Z]+\")\n      (apply str)\n  )\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5c46bdbde4b0e06e1360a3a4"}, {"problem": 29, "code": "(fn [text]\n  (clojure.string/join (filter #(Character/isUpperCase %) text)))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 29, "code": "(fn capitalX [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (->> s\n       (filter #(re-matches #\"[A-Z]\" (str %)))\n       (apply str)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 29, "code": "#(apply str \n        (filter \n             (fn [x] \n               (let [char-int (int x)] \n                 (and \n                  (>= char-int (int \\A)) \n                  (<= char-int (int \\Z))))) \n         (seq %)))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"([^A-Z])\" \"\"))", "user": "4fae5401e4b081705acca249"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c4fd807e4b0f9f7a8770eb5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c50de36e4b0fb8c5ffd99bc"}, {"problem": 29, "code": "(fn [s]\n  (let [f (fn [c]\n            (and\n             (>= (.compareTo c \"A\") 0)\n             (<= (.compareTo c \"Z\") 0)))]\n    (clojure.string/join (filter f (clojure.string/split s #\"\")))))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5c4e2b82e4b0f9f7a8770e93"}, {"problem": 29, "code": "(fn [s]\n  (reduce str(re-seq #\"[A-Z]+\" s))\n )", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 29, "code": "(fn [s] \n   (apply str (filter #(and (< 64 (int %))\n                            (> 91 (int %)))\n                      (seq s))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "51cf0993e4b0e42293a2256a"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (seq %)))", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5c597b42e4b01df32ab7325b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 29, "code": "(fn [input] (apply str (re-seq #\"[A-Z]+\" input)))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 29, "code": "(fn [xs] (apply str (filter (\n    fn [x] (and \n    (<= (int \\A) (int x))\n    (>= (int \\Z) (int x))\n    )\n) xs)))", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 29, "code": "(fn take-upper-case [some-string]\n  (apply str (re-seq #\"[A-Z]+\" some-string))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5c58736be4b01df32ab73247"}, {"problem": 29, "code": "(fn [c] \n  (apply str \n   (filter \n    (fn [x] (Character/isUpperCase x)) c)))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "592883f1e4b072a2710fceea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 29, "code": "(fn [n]\n      (clojure.string/join  (re-seq #\"[A-Z]\" n)))", "user": "5c5a725ce4b01df32ab73273"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5a89997de4b05369db4d24c4"}, {"problem": 29, "code": "(fn\n  only-capitals\n  [s]\n  (->>\n    s\n    (filter #(Character/isUpperCase %) ,,,)\n    (reduce str \"\" ,,,)))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 29, "code": "(fn only-capitals [s]\n  (loop [s-upper (.toUpperCase s) s-lower (.toLowerCase s) s s only-caps []] \n      (if (empty? s) (apply str only-caps)\n        (if (and (= (first s) (first s-upper)) (not (= (first s-lower) (first s-upper)))) \n          (do (conj only-caps (first s)) (recur (rest s-upper) (rest s-lower) (rest s) (conj only-caps (first s))))\n          (recur (rest s-upper) (rest s-lower) (rest s) only-caps)))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5c5e7049e4b0fca0c1622607"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c596d6ce4b01df32ab73257"}, {"problem": 29, "code": "(fn [x]\n  (loop [curr x \n         caps \"\"]\n    (if (empty? curr)\n      caps\n      (if (and (not (nil? (re-find #\"[A-Z]+\" (subs curr 0 1)))) (= (subs curr 0 1) (clojure.string/upper-case (subs curr 0 1))))\n        (recur (subs curr 1) (str caps (subs curr 0 1)))\n        (recur (subs curr 1) caps)\n      )\n    )\n  )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) word)))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 29, "code": "(fn x [string]\n    (->> (re-seq #\"[A-Z]\" string)\n         (clojure.string/join)))", "user": "5c68f931e4b0fca0c16226ea"}, {"problem": 29, "code": "(fn [s]\n  (->> (seq s)\n  \t   (filter #(Character/isUpperCase %))\n       clojure.string/join))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 29, "code": "(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x))\n    )", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 29, "code": "(fn\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [^Character c] (Character/isUpperCase c)) %))", "user": "5c395c65e4b0d62ef62d9f8a"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n   \t(re-seq #\"[A-Z]\")\n    (clojure.string/join \"\")))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5c44ad48e4b0e06e1360a37a"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5c37d6fce4b0d62ef62d9f7b"}, {"problem": 29, "code": "(fn[x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5c6cf34fe4b0fca0c1622732"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (seq (char-array s)))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 29, "code": ";#(clojure.string/join(re-seq #\"[A-Z]\" %))\n\n;#(apply str(re-seq #\"[A-Z]\" %))\n\n(fn get-caps [x] (reduce str (re-seq #\"[A-Z]+\" x)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 29, "code": "(fn [s]\n  (loop [[r & more :as all] (seq\n                             (reduce-kv clojure.string/replace s {#\" \" \"\"\n                                        \t\t\t\t\t\t\t\"9\" \"\"\n                                        \t\t\t\t\t\t\t\"8\" \"\"\n                                        \t\t\t\t\t\t\t\"7\" \"\"\n                                        \t\t\t\t\t\t\t\"$\" \"\"\n                                        \t\t\t\t\t\t\t\"#\" \"\"\n                                        \t\t\t\t\t\t\t\"&\" \"\"\n                                        \t\t\t\t\t\t\t\"*\" \"\"\n                                        \t\t\t\t\t\t\t\"(\" \"\"\n                                        \t\t\t\t\t\t\t\",\" \"\"\n                                        \t\t\t\t\t\t\t\"!\" \"\"}))\n         acc '()]\n    (if all\n      (if (= (str r) (clojure.string/upper-case (str r)))\n        (recur more (conj acc r))\n        (recur more acc))\n      (reduce str (reverse acc)))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5c72ffb6e4b0fca0c16227b2"}, {"problem": 29, "code": "(fn [s]\n  (apply\n   \tstr\n   \t(filter\n      (fn [ch]\n        (Character/isUpperCase ch))\n      s)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 29, "code": "(fn [word]\n  (clojure.string/join\n   \t(filter (fn [x] (Character/isUpperCase x))\n       (seq word))))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (re-seq #\"[A-Z]\" word)))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 29, "code": "(fn get-caps\n  [params]\n  \"http://www.4clojure.com/problem/29\"\n  (reduce str (re-seq #\"[A-Z]+\" params)))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z,! $#(*&\\d]\" \"\")", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 29, "code": "(fn [string] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" string)))", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 29, "code": "(fn [lst] \n  (reduce str \n          (re-seq #\"[A-Z]\" lst)))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 29, "code": "(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "59ab61f1e4b08cbb53654d9b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4dbd8388535d020aff1edf46"}, {"problem": 29, "code": "(fn [pattern]\n  (reduce str (re-seq #\"[A-Z]+\" pattern)))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 29, "code": "(fn [patt]\n  (clojure.string/join (re-seq #\"[A-Z]+\" patt)))", "user": "5c189373e4b01240ff5671ee"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 29, "code": "(fn [s] (apply str (map str (filter (fn [c] (<= (int (.charAt \"A\" 0)) (int (.charAt (str c) 0)) (int (.charAt \"Z\" 0)))) s))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5c62f1cde4b0fca0c1622655"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 29, "code": "(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]+\" %) (apply str))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 29, "code": "#(clojure.string/join(re-seq #\"[A-Z]\" %))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\"%))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 29, "code": "(fn [s]\n   (let [up (vec (re-seq #\"[a-zA-Z]\" (clojure.string/upper-case s))) \n         orig (vec (re-seq #\"[a-zA-Z]\" s))]\n     \n     (apply str (reduce (fn [acc item]\n               (let [u (get up item)\n                     o (get orig item)]\n                 (print u \"-\" o)\n                 (if (= u o) \n                   (conj acc o)\n                   acc)))\n             [] (range (count up))))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "55326aede4b09218d5f44f7c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 29, "code": "(fn [coll] (apply str(reverse(reduce #(conj %1 (if (Character/isUpperCase %2)\n                               (str %2)\n                               )) '() coll))))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5839efeae4b089d5ab817d47"}, {"problem": 29, "code": "(fn caps\n  [strn]\n  (#(apply str (re-seq #\"[A-Z]+\" %)) strn))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z+]\" %))", "user": "5c7e82cbe4b0d597f478cacb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 29, "code": "(fn [x](apply str (filter \n               #(and (>= 0 (compare \\A %1)) (<= 0 (compare \\Z %1))) \n               x)))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 29, "code": "(fn [phrase]\n  (apply str (re-seq #\"[A-Z]\" phrase)))", "user": "56ee905be4b04a395b9a044f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 29, "code": "(fn capital_letters\n      [lst]\n      (clojure.string/join \"\" (filter #(Character/isUpperCase %) lst)))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 29, "code": "(fn [n] (apply str (filter #(Character/isUpperCase %) n)))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 29, "code": "#(clojure.string/replace %1 #\"[^A-Z]\" \"\")", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 29, "code": "(fn [s](apply str(remove nil? (map (fn [c](if (Character/isUpperCase c) c nil)) s))))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 29, "code": "(fn [x]\n  (apply\n   str\n   (re-seq\n    #\"[A-Z]+\" x)))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "52da20c7e4b09f7907dd13b3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 29, "code": "(fn [input]\n   (->> input\n        (filter #(Character/isUpperCase %))\n        (apply str)))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\"(str %))))s)))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 29, "code": "(fn [the-str]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) the-str)))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (reduce (fn [acc item]\n                       (if (Character/isUpperCase item) \n    \t\t\t\t\t(conj acc item)\n   \t\t\t\t\t    acc))\n                       \n                       [] s)))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c9031bae4b048ec896c59ce"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5c891afde4b048ec896c5935"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 29, "code": "(fn \n  [coll]\n  (apply str (filter (fn filt-func\n  [x]\n      (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))\n  ) coll)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5c886a89e4b048ec896c592b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5adf7a7ae4b0837691e92c37"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (reduce str)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 29, "code": ";(fn [in]\n ;(apply str\n  ;(filter #(re-matches #\"[A-Z]\" (str %)) in)))\n\n(fn [in]\n (apply str\n  (re-seq #\"[A-Z]\" in)))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c838796e4b0c8042a70ce50"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)) )", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 29, "code": "#(let [m (re-matcher #\"[A-Z]\" %)] \n   (loop [match (re-find m), res []]\n     (if match (recur (re-find m) (conj res match)) \n               (reduce str res) )))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 29, "code": "#(->> % (map (fn [x] (if (and (< 64 (int x)) (>= 90 (int x))) x \"\"))) (apply str))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) x)))", "user": "55a24698e4b0acc240e31523"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) x)))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 29, "code": "(fn [s]\n (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 29, "code": "(fn [st]\n  (reduce str (filter \n               \t(fn [x] \n                  (let [st-int (int x )] \n                    (and (> st-int 64) (< st-int 91)))) \n               (seq st))))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5987f5b1e4b021a7a535fead"}, {"problem": 29, "code": "(fn only-upper [x]\n  (loop [x x\n         y ()]\n    (cond (empty? x)                          (apply str y)\n          (. Character isUpperCase (first x)) (apply str (concat y (list (first x)) (only-upper (rest x))))\n          :else                               (apply str (only-upper (rest x))))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 29, "code": "(fn [s] (apply str (for [c s :when (Character/isUpperCase c)] c)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 29, "code": "(fn q29 [input]\n  (->> (re-seq #\"[A-Z]\" input) (apply str)))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5caf9a07e4b026601754b899"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]*\" %))", "user": "5c936583e4b048ec896c5a1c"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5cada3b8e4b026601754b872"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]+\" xs)))", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 29, "code": "(fn onlyup [x] (apply str (remove nil? (map #(if (= (str (clojure.string/lower-case %)) (str %)) nil (str %)) x))))", "user": "5cb62652e4b026601754b949"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cb41c40e4b026601754b911"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %1))", "user": "5cb6256ce4b026601754b947"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 29, "code": ";(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))\n(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5cb39440e4b026601754b903"}, {"problem": 29, "code": "(fn get-caps2 [s] (apply str(re-seq #\"[A-Z]\" s)))", "user": "5cb556f9e4b026601754b934"}, {"problem": 29, "code": "(fn [x] (apply str (into [] (filter #(Character/isUpperCase %) x))))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5cb71f35e4b026601754b961"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^ABCDEFGHIJKLMNOPQRSTUVWXYZ]\" \"\")", "user": "5cae5247e4b026601754b884"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 29, "code": "#(clojure.string/join (filter\n    (fn [s]\n      (do\n        ; (println (= s (clojure.string/upper-case s)))\n        (re-matches #\"[A-Z]\" (str s))))\n    %))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 29, "code": "#(apply str ( re-seq #\"[A-Z]\" %))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 29, "code": "(fn ups [x] \n  (if (empty? x) nil\n    (if (and (= (first x) (first (clojure.string/upper-case (first x)))) (not= (first x) (first (clojure.string/lower-case (first x)))))\n      (str (first x) (ups (rest x)))\n      (ups (rest x))\n     )\n   )\n )", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) s)))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5cc50df6e4b0ccb06196280a"}, {"problem": 29, "code": "(fn[x] (clojure.string/join (filter #(and (<= (int %) 90) (>= (int %) 65)) x)))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 29, "code": "#(apply str ( for [x %] (if(Character/isUpperCase x) x)))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "5cc7342be4b0ccb061962830"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 29, "code": "(fn upper [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 29, "code": "(fn filter-caps2 [expression]\n  (apply str (filter #(Character/isUpperCase %) expression)))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 29, "code": "(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x)) y)))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 29, "code": "(fn myfunc [input]\n  (apply str\n  (filter\n   (fn [a]\n     (cond\n       (= a \\A) true\n       (= a \\B) true\n       (= a \\C) true\n       (= a \\D) true\n       (= a \\E) true\n       (= a \\F) true\n       (= a \\G) true\n       (= a \\H) true\n       (= a \\I) true\n       (= a \\J) true\n       (= a \\K) true\n       (= a \\L) true\n       (= a \\M) true\n       (= a \\N) true\n       (= a \\O) true\n       (= a \\P) true\n       (= a \\Q) true\n       (= a \\R) true\n       (= a \\S) true\n       (= a \\T) true\n       (= a \\U) true\n       (= a \\V) true\n       (= a \\W) true\n       (= a \\X) true\n       (= a \\Y) true\n       (= a \\Z) true\n       :else false))\n   input)))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5cc74e44e4b0ccb061962833"}, {"problem": 29, "code": "(fn [s]\n  (->> (seq s)\n       (filter #(Character/isUpperCase ^Character %))\n       (reduce conj [])\n       (apply str)))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 29, "code": "(fn [s]\n   (reduce (fn [r s]\n             (if (Character/isUpperCase s)\n               (str r s)\n               (str r))) (str) s))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5cbdadeee4b026601754b9ff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") clojure.string/join)", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c5d9510e4b01df32ab732b5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cd17bf1e4b0ccb0619628eb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 29, "code": "(fn [x]  (apply str  (filter (set (map char (range 65 91))) x)))", "user": "55938d28e4b0c79f6e1db93f"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]+\" %))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 29, "code": "(fn [text] (apply str (re-seq #\"[A-Z]\" text)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 29, "code": "(fn [xs]\n   (clojure.string/join (filter #(Character/isUpperCase %) xs)))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c07522ae4b0bdcf453d16c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]+\" %))", "user": "5cded022e4b0a17bb84e2af7"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 29, "code": "(fn [s]\n   (clojure.string/join \"\" (filter #(Character/isUpperCase %) s))\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 29, "code": "(fn caps-only [str]\n\t(clojure.string/join (filter #(Character/isUpperCase  %) (seq str))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 29, "code": "(fn [ws]\n  (reduce str (filter #(and (>= (int %) 65)(<= (int %) 90)) (seq ws))) \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) coll)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 29, "code": "(fn to-upper [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 29, "code": "#(apply str (filter not-empty (re-seq #\"[A-Z]*\" %1)))", "user": "4f847f0ee4b033992c121c33"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 29, "code": "#(apply str (keep (fn [c] (if (Character/isUpperCase c) c)) %))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 29, "code": "(fn caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5ce708b7e4b0a17bb84e2b9b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %1))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 29, "code": "(fn [s]\n  (apply str \n  (filter (comp not nil?)\n   (filter #(when (Character/isUpperCase %) %)\n          s))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 29, "code": "#(apply str (filter #{\\A,\\Z,\\H,\\L,\\O,\\W,\\R,\\D} %))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 29, "code": "#(->> (re-seq #\"[A-Z]\" %)\n      (apply str))", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cf50e67e4b087f62be35a8d"}, {"problem": 29, "code": "(fn [instring] (apply str (re-seq #\"[A-Z]\" instring)))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 29, "code": "(fn getcaps [s] (apply str (filter \n                              (fn upper? [x] (not (= (str x) (clojure.string/lower-case x)))) \n                              s)))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 29, "code": "(fn [thing] (apply str (map #(first %1) (re-seq #\"([A-Z])\" thing))))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 29, "code": "(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 29, "code": "(fn filterUppercase[x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5c8aa1b5e4b048ec896c5959"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (set (map char (range 65 91))) s))\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 29, "code": "(fn caps [s] \n  (->> (seq s)\n       (map str)\n       (map #(re-find #\"[A-Z]\" %))\n       (filter (comp not nil?))\n       (apply str)))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 29, "code": "(fn take-caps [string]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 29, "code": "(fn [arg] (clojure.string/join \"\"  (re-seq #\"[A-Z]\" arg)))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %) )", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) xs)))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 29, "code": "(fn [string]\n  (reduce\n   (fn [x y]\n     (if (re-find #\"[A-Z]\" (str y))\n       (str x y)\n       x)\n     )\n   \"\"\n   string\n   )\n  )", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 29, "code": "#( apply str ( re-seq #\"[A-Z]\"  %))", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5d0781d1e4b0cc9c915881f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 29, "code": "(fn[enteredString](clojure.string/replace enteredString #\"[^A-Z]\" \"\"))", "user": "5d08dfe7e4b0cc9c91588210"}, {"problem": 29, "code": "(fn [text] (apply str (filter #(Character/isUpperCase %) text)))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 29, "code": "#(apply str (keep (fn [achar] (if (and (< (int achar) 91) (> (int achar) 64)) achar)) (seq %)))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 29, "code": ";; The lambda uses the replace function in the string handling standard library.\n;; This function takes a reg-exp.\n#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s)))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 29, "code": "(fn only-caps\n  [text]\n  (clojure.string/replace text #\"[a-z0-9*&#!$,() ]\" \"\"))", "user": "5d110abee4b02c15ef021983"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter #(<= 65 (int %) 90))\n       (apply str)))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 29, "code": "(fn [x](->>(into [] x)\n           (filter #(Character/isUpperCase %))\n           (apply str)))", "user": "5d148581e4b0902706380dc6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %)\n                     string)))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 29, "code": "(fn [s] (apply str(filter (fn [y] (and\n                  (< (int y)96)\n                  (> (int y)64))\n) s)))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 29, "code": "(fn f [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str\n         (filter (fn [c]\n                   (and (>= (int c)  (int \\A))\n                        (<= (int c) (int \\z))\n                        (= (str c) (clojure.string/upper-case c))))\n                 s)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 29, "code": "#(clojure.string/join\n   (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 29, "code": "(fn [st] \n  (->> st\n       (filter (fn [c] (Character/isUpperCase c)))\n       clojure.string/join))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d232882e4b02ea6f0fb6a02"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 29, "code": ";;filter #(re-matches #\"^[A-Z]\" (seq (char-array %)))\n\n\n(fn [s] (apply str (re-seq #\"[A-Z]\" s)))\n\n;seq (char-array \n ;;(seq (char-array \"asdf\"))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 29, "code": "(fn [s]\n    (->> (filter #(<= 65 (int %) 90) s) (apply str)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(= (clojure.string/upper-case %) %) (clojure.string/split (clojure.string/replace x #\"[\\W|\\d]\" \"\") #\"\"))))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 29, "code": "(fn\n  [string]\n  (reduce (fn [acc curr]\n            (if (Character/isUpperCase curr)\n              (str acc curr)\n              acc)) \"\" string))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) (seq st))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 29, "code": "(fn mac [para]\n  (clojure.string/join  \"\" (re-seq #\"[A-Z]\" para))\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 29, "code": "(fn [strin]\n   (apply str(filter #(Character/isUpperCase %) strin)))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 29, "code": "(fn [word] (reduce str \"\" (re-seq #\"[A-Z]\" word)))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 29, "code": "(fn [s]\n  (let [letters (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (->> s\n         (filter letters)\n         (clojure.string/join))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 29, "code": "(fn [ss] (apply str (filter #(Character/isUpperCase %) ss)))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 29, "code": "#(apply str (loop [col (vec %) rt []]\n              (println \"col:\" col)\n              (if(empty? col)\n                rt\n                (let [new-col (rest col) item (first col)] \n                  (println \"item:\" item)\n                  (recur new-col (if(not= (str item) (clojure.string/lower-case item)) (conj rt item) rt))\n                  )\n                )\n              ))", "user": "5d270111e4b092dab7f59c62"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d138119e4b0902706380dbb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) s)))", "user": "5d1a92d6e4b0902706380e11"}, {"problem": 29, "code": "(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))\n\n;((fn [a] (apply str (filter #(Character/isUpperCase %) a))) \"dwdwDEDW\")", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 29, "code": "(\n fn get-the-caps [arg]\n  (clojure.string/join \n   (filter #(Character/isUpperCase %)\n           arg)\n   )\n )", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n   \t(filter #(Character/isUpperCase %))\n    (apply str)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z, !&$#()*@^0-9]\" \"\")", "user": "5d14daa6e4b0902706380dcb"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 29, "code": "(fn [list] (reduce str \"\" (filter #(Character/isUpperCase %) list)) )", "user": "5abeb697e4b073f177442725"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5d363543e4b01671435dbd20"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 29, "code": "(fn prob29\n  [x]\n  (->> x\n   (seq)\n   (filter #(Character/isUpperCase %))\n   (apply str)))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 29, "code": "#(reduce\n \t(fn [acc cur]\n      (println acc)\n      (println cur)\n    \t(if (Character/isUpperCase cur)\n            (str acc cur)\n          \tacc\n        ) \n    )\n \t\"\"\n \t%\n )", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 29, "code": "(fn [s] (.toUpperCase (apply str (map first (filter #(not= (first %) (second %)) (map list (.toLowerCase s) s))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     (seq s))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 29, "code": "(fn upper-case [phrase] (apply str (filter #(Character/isUpperCase %) phrase)))", "user": "5d321852e4b01671435dbce8"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join \"\" (filter \n        (fn [ch] \n          (<= (int \\A) (int ch) (int \\Z)))\n        s)))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter \n               #(and (= (str (clojure.string/upper-case %)) (str %))    \n                     (not (clojure.string/blank? (str %)))\n                     (Character/isLetter %)) s)))", "user": "5d41de31e4b05dd059a54379"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5d404586e4b05dd059a54363"}, {"problem": 29, "code": "(fn [string]\n    (apply str (re-seq #\"[A-Z]\" string)))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 29, "code": "(fn [word]\n  (reduce (fn [acc x]\n  (str acc x)) \n  \"\"\n  (re-seq #\"[A-Z]\" word)))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n\t   (filter #(re-matches #\"[A-Z]\" (str %)))\n       (clojure.string/join)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\", %))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d46a3c1e4b07c84aa5ae6ad"}, {"problem": 29, "code": "(fn foo [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 29, "code": "(fn up [s]\n  (if (empty? s) \"\"\n    (if (Character/isUpperCase (first s))\n      (str (first s) (up (rest s)))\n      (up (rest s)))))", "user": "5d41f428e4b05dd059a5437b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5d4256bae4b05dd059a5437d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 29, "code": "(fn [string] (\n    apply str ( re-seq #\"[A-Z]\" string )\n))", "user": "5d40493ae4b05dd059a54364"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]+\" %))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 29, "code": "(fn [S]\n    (let [big-letters (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") L (seq S)]\n      ;; \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u0442\u0440\u043e\u043a\u0438\n      (loop [Ret '() First (first L) Rest (rest L) ]\n        ;; \u0435\u0441\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442, \u0442\u043e \u0432\u0435\u0440\u043d\u0435\u043c \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0435\n        (if (nil? First)\n          (reduce str (reverse Ret))\n          ;; \u0438\u043d\u0430\u0447\u0435 - \u0438\u0434\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0435\u0441\u043b\u0438 \u043e\u043d \u0441\u0440\u0435\u0434\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445\n          (recur            \n            (if (zero? (count (filter #(= % First) big-letters)))\n              Ret\n              (conj Ret First)\n            )\n            (first Rest)\n            (rest Rest)\n          )\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "user": "5d123457e4b02c15ef021996"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 29, "code": "(fn [seq]\n      (apply str\n             (map char\n                  (filter #(and (<= 65 %) (<= % 90))\n                          (map int seq)))))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 29, "code": "(fn capflr [strr]\n               (reduce (fn [result, chr]\n                         (if (Character/isUpperCase chr)\n                           (str result chr)\n                           result))\n                       \"\"\n                       strr))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\"\n     (reduce\n       (fn [coll ch]\n         (if (and (>= (int ch) (int \\A))\n                  (<= (int ch) (int \\Z)))\n           (conj coll ch)\n           coll)) [] s)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 29, "code": "(fn [x] (->> x\n             (filter #(Character/isUpperCase %))\n             (clojure.string/join \"\")))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 29, "code": "(fn [cs] \n    (apply str \n        (filter \n                 #(re-matches #\"[A-Z]+\" %)\n                 (map #(str %) (seq cs ))\n        )\n    ) \n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 29, "code": "(fn onlyUpper\n  [string]\n  \t(apply str (filter #(Character/isUpperCase %) string)))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "5d3adc7de4b01671435dbd5b"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (= (str (clojure.string/capitalize x)) (str x))) (seq (clojure.string/replace %1 #\"[^a-zA-Z\\\\\\\\s]\" \"\"))))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5d55305ce4b02ba5928a680d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 29, "code": "(fn [input-string]\n  (->> input-string\n       (filter (fn [input-char] (and (>= (int input-char) 65) (<= (int input-char) 91))))\n       (apply str)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 29, "code": "(fn [lis]\n             (apply str (filter #(Character/isUpperCase %) lis)))", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5bbcc747e4b0a20761a23634"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 29, "code": "(fn [s] (apply str (for [c s] (when (Character/isUpperCase c) c))))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 29, "code": "(fn getcaps\n  [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "559ba500e4b066d22e731f58"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(and (java.lang.Character/isLetter %) (java.lang.Character/isUpperCase %))\n                     s))\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(java.lang.Character/isUpperCase %) (seq string))))", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 29, "code": "(fn [str1]\n               (apply str (filter #(Character/isUpperCase %) str1)))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 29, "code": "#(->> %\n  (re-seq #\"[A-Z]\")\n  (apply str)\n)", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 29, "code": "(fn [x]\n (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x))\n  )", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 29, "code": "(fn only-caps\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 29, "code": "(fn\n    [x]\n    (clojure.string/join \"\" (filter #(Character/isUpperCase %) x))\n  )", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "507766e9e4b0fc74642bff61"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 29, "code": "#(clojure.string/join (filter (set (map char (range 65 91))) %))", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 29, "code": "#(apply str (filter\n              (fn [c] (let [i (int c)]\n                        (and (>= i 65) (<= i 90))))\n              %))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 29, "code": "(fn \n  [x]\n  (apply str\n    (filter #(Character/isUpperCase %) (char-array x))))", "user": "5d615431e4b0c9e5857d5010"}, {"problem": 29, "code": "(fn [seq] (clojure.string/join (re-seq #\"[A-Z]\" seq)))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 29, "code": "(fn getcaps [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 29, "code": "(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) (seq a))))", "user": "5d323149e4b01671435dbce9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d65c2e9e4b0db5d338d15dd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c8ffb31e4b048ec896c59c8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 29, "code": "(fn nice [strin]\n  (reduce str (filter #(Character/isUpperCase %) strin)))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 29, "code": "(fn [word]\n  (apply str\n         (filter (fn [chr]\n                   (Character/isUpperCase chr))\n                 word)))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (set (map char (range 65 91))) %))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 29, "code": "(fn caps [input]\n  (apply str (re-seq #\"[A-Z]*\" input)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 29, "code": "(fn get-caps [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d6d76ffe4b04d129b00f2be"}, {"problem": 29, "code": "(fn f[x] (apply str(filter (fn up[z](Character/isUpperCase z)) x)))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 29, "code": "(fn [string](apply str (re-seq #\"[A-Z]\" string)))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 29, "code": "(fn [x] (let [C (into #{} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    ;; build a string out of all actual matches\n    (reduce str \"\"\n            ;; as determined by expanding the string\n            ;; as a sequence, and checking whether\n            ;; each element is in the list of interest\n            (map (fn [letter] (str (some #{letter} C)))\n                 (seq x)))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d5daf87e4b0c9e5857d4fed"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 29, "code": "(fn df [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 29, "code": "(fn [string-test]\n  (->> string-test\n       (filter #(not= (str %) (clojure.string/lower-case %)))\n       clojure.string/join))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) s)))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 29, "code": "(fn [sentence] (apply str (re-seq #\"[A-Z]\" sentence)))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 29, "code": "(fn cap\n  [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 29, "code": "(fn only-uppercase [some-str]\n  (clojure.string/replace some-str #\"[abcdefghijklmnopqrstuvwxyz!',.$#()*&987 ]\" \"\"))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 29, "code": "(fn get-caps [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 29, "code": "(fn [inputSeq]\n   ;(Character/isUpperCase (nth inputSeq 1))\n   ;(count inputSeq)\n   (loop [ resStr \"\"\n           curIdx 0 ]\n    (if (= curIdx (count inputSeq))\n      resStr\n      (if (Character/isUpperCase (nth inputSeq curIdx))\n        (recur (str resStr (nth inputSeq curIdx)) (inc curIdx))\n        (recur resStr (inc curIdx))\n      )\n    )\n   )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 29, "code": "(fn [s] \n  (let [v (vec s)\n        upper? #(java.lang.Character/isUpperCase %)\n        fv (filter upper? v)]\n    (apply str fv)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (filter \n      #(re-find #\"[A-Z]\" %)\n      (clojure.string/split s #\"\")\n    )\n  )\n)", "user": "5d72ad8fe4b02e6b30c93512"}, {"problem": 29, "code": "(fn [x] (apply str (filter (fn [y] (Character/isUpperCase y)) x)))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 29, "code": "#(reduce str (filter (fn [ch] (Character/isUpperCase ch)) %))", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 29, "code": "#(apply str (filter \n  (fn [x] (let [z (int x)]\n            (and \n             (>= z (int \\A)) \n             (<= z (int \\Z)))))\n  %))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 29, "code": "(fn [palavra]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" palavra)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 29, "code": "(fn only-caps\n   [txt]\n   (let [coll (seq txt)]\n     (clojure.string/join\n       (filter\n         (fn [x]\n           (not (= (str (clojure.string/lower-case x))\n                   (str x)))) coll))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 29, "code": "(fn [x](apply str (filter #(Character/isUpperCase %) x)))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 29, "code": "#(loop [cs '()\n        col %1]\n   (if (next col)\n     (if (Character/isUpperCase (first col))\n       (recur (conj cs (first col)) (next col))\n       (recur cs (next col)))\n     (apply str (reverse cs))))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 29, "code": "(fn [x] \n    (apply str\n      (filter \n        (fn [y] (and (>= (int y) 65) (<= (int y) 90))) \n        (seq x)\n      )\n    )\n  )", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 29, "code": "(fn caps [s] \n  (clojure.string/join \"\"\n   (re-seq #\"[A-Z]\" s)))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 29, "code": "(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 29, "code": "(fn [word] (apply str (filter #(Character/isUpperCase %) word)))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 29, "code": "#(reduce str (filter (fn iscap [letter] (re-matches #\"[A-Z]\" letter)) (map str %)))", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 29, "code": "(fn [text] (clojure.string/join (map #(if (Character/isUpperCase %) % nil) text)))", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5d89f87de4b0915913b1d3c4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 29, "code": "(fn [s]\n  (let [is-cap #(not (or (neg? (compare % \\A)) (neg? (compare \\Z %))))]\n    (apply str (filter is-cap s))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s))\n  )\n)", "user": "5d77a828e4b02e6b30c93531"}, {"problem": 29, "code": "(comp (partial apply str)  (partial  filter (fn  [x] (let [c (int x)]\n          (and (> c 64) (> 91 c))))))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 29, "code": "(comp (partial apply str) seq (partial filter #(Character/isUpperCase %)))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join \n   (filter \n    (fn [t] (re-matches #\"[A-Z]\" t)) \n    (clojure.string/split s #\"\"))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d915f01e4b0915913b1d401"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 29, "code": "(fn [string]\n  (doall\n   (apply\n    str\n    (re-seq #\"[A-Z]\" string))))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 29, "code": "(fn get-caps [word]\n  (->> word\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join )))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 29, "code": "(fn [txt] (clojure.string/join \"\" (re-seq #\"[A-Z]\" txt)))", "user": "5d9bda4fe4b0d3f9b434ad50"}, {"problem": 29, "code": "(fn [hello] (apply str (filter (fn [ch] (Character/isUpperCase ch)) hello)))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 29, "code": "(fn [text] (apply str (filter  #(Character/isUpperCase %) text)))", "user": "5d94753de4b0d3f9b434ad24"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(<= 65 (int %) 90) string)))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 29, "code": ";#(->> % seq (filter (partial re-matches #\"[A-Z]\")) (apply str))\n#(->> % seq (filter (fn [c] (Character/isUpperCase c))) (apply str))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(re-matches #\"[A-Z]\" (str %))) (apply str)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 29, "code": "(fn get-the-caps\n  [my-str]\n  (apply str (filter #(Character/isUpperCase %) my-str)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da3a458e4b000c986472bed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e586949535d8a8b8723a292"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 29, "code": "(fn [dateString]\n  (let [xstr (clojure.string/split dateString #\"\")]\n    (clojure.string/join \n      (reverse\n        (reduce \n          (fn \n            [dateList sChar]\n            (cond \n              (not= (clojure.string/lower-case sChar) sChar) (conj dateList sChar)\n              :else dateList\n            )\n          ) \n          '() \n          xstr\n        )\n      )\n    )\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 29, "code": "(fn get-caps\n  [x]\n  (clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da975b9e4b000c986472c32"}, {"problem": 29, "code": "(fn [s] (let [a (int \\A) z (int \\Z)] \n  (apply str (filter #(let [x (int %)] (and (<= x z) (>= x a))) s))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (char-array s))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (<= 65 (int c) 90)) %))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5dac6272e4b000c986472c4c"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %1))", "user": "5da71a00e4b000c986472c14"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" % ))", "user": "5da98129e4b000c986472c33"}, {"problem": 29, "code": "(fn sss[texto](let[a (fn b[texto ret](apply str(cond\n                                               (empty? (vec texto)) ret\n                                               :else (b\n                                                       (apply str(rest(vec texto)))\n                                                       (cond\n                                                           (and (Character/isLetter (first(vec texto)))\n                                                                (= (str(first (vec texto))) (.toUpperCase (str(first (vec texto))))))\n                                                           (conj[](apply str(conj ret(str(first(vec texto))))))\n                                                           :else\n                                                           ret)))))]\n                  (a texto [])))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5dab11cde4b000c986472c45"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 29, "code": "(fn [msg] \n  (apply str (filter #(Character/isUpperCase %) msg)))", "user": "5da9662ce4b000c986472c30"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(<= 65 (int %) 90) x)))", "user": "5d9e1006e4b0eb781811cdbd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 29, "code": "(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %) \n )", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 29, "code": "(fn [x]\n   (apply str (filter #(Character/isUpperCase %)x))\n)", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 29, "code": "(fn [s]\n  (apply str (map char (filter (fn [x] (and (> x 64) (< x 91)))\n                                (map (fn [x] (int x)) s))))\n  )", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5da07698e4b000c986472bd3"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 29, "code": "(fn [coll] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) coll)))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 29, "code": "(fn [strng]\n  (apply str (re-seq #\"[A-Z]\" strng)))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 29, "code": "(fn get-the-caps [input]\n  (apply str (re-seq #\"[A-Z]\" input)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 29, "code": "(fn [s] \n  (apply str \n     (filter \n   \t\t#(re-matches #\"\\b[A-Z]+\\b\" %) \n   \t\t(clojure.string/split s #\"\"))))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 29, "code": "(fn capital-letters\n  [string]\n  (apply str(filter #(Character/isUpperCase %) string)))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 29, "code": "(fn [texto] (clojure.string/join \"\"\n  (map\n    (fn [letra]\n      (when (= (clojure.string/capitalize letra) (re-find #\"[A-Z]\" letra))\n        (str letra))\n    )\n    (clojure.string/split texto #\"\"))))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 29, "code": "(fn upString [elements]\n\t(apply str (filter #(Character/isUpperCase %) elements)))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter (set (map char (range 65 91))) string)))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 29, "code": "(fn [n] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) n)))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 29, "code": "#(->> %\n      seq\n      (filter\n       (fn [x]\n        (Character/isUpperCase x)))\n      (apply str))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 29, "code": "( fn[x] ( apply str ( filter #(Character/isUpperCase %1) x )))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (clojure.string/lower-case (str %)) (str %)) x)))", "user": "5dc9ae96e4b02f9375f4e1ea"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 29, "code": "(fn\n  [str]\n  (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" %) (clojure.string/split str #\"\"))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 29, "code": "#(apply str (clojure.string/split % #\"[^A-Z]\"))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dc9e5bfe4b03836ba07d826"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 29, "code": "(fn flt [l]\n  (let [m (re-matcher #\"[A-Z]\" l)]\n    (loop [match (re-find m),\n           res []]\n      (if match\n        (recur (re-find m) (conj res match))\n        (reduce str res)))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 29, "code": "(fn caps-concat [s]\n  (->> s\n       (filter #(Character/isLetter %) )\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5da306a3e4b000c986472be7"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) (seq col))))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5dcc4b4ae4b02b31cc3da3c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %1))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "5dccbde4e4b0b296f82db5a5"}, {"problem": 29, "code": "(fn\n  [n]\n  (clojure.string/join \"\"\n                       (filter #(= (clojure.string/upper-case %) %)\n                               (re-seq #\"[a-zA-Z]\" n))))", "user": "5da8e170e4b000c986472c29"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "5dd52ca6e4b0948ae9d9ad75"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 29, "code": "#(->> %  (re-seq #\"[A-Z]\")  (apply str) )", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 29, "code": "(fn caps [x]\n  (reduce str (filter (fn [x]\n                        (let [ascii-uppercase (set (range 60 96))\n                              ascii-letter (int x)]\n                          (if (contains? ascii-uppercase ascii-letter) (str x)))) x)))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 29, "code": "(fn [s] (let [upper (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n          (apply str (filter #(contains? upper %) s))))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 29, "code": "(fn [str] (clojure.string/join (filter #(and (<= (int %) 90) (>= (int %) 65)) str)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 29, "code": "(fn [thingy] (clojure.string/join \n                (filter #(not= (str %) \n                            (clojure.string/lower-case %)) (seq thingy))))", "user": "533b6f01e4b0e30313ee6cce"}, {"problem": 29, "code": "(fn [x]\n   (let [caps #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\"\n                \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"}]\n     (clojure.string/join \n      (filter #(contains? caps %)\n              (clojure.string/split x #\"\"))))\n   )", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 29, "code": "(fn f29\n  [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (clojure.string/join)))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 29, "code": "#(apply str (filter (fn [chr] (and (>= (int chr) 65) (<= (int chr) 90))) (seq %)))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 29, "code": "(fn funky1 [stringy]\n  (let \n    [\n        stringSeq (seq stringy)\n        allCaps    (\n    (fn funky [oldString newString]\n        (if (= 0 (count oldString)) \n            (str newString)\n            (if (and (< 64 (int (first oldString))) (> 91 (int (first oldString))) )\n                (funky (rest oldString) (str newString (first oldString)))\n                (funky (rest oldString) newString)\n            )\n        )\n    \n    ) \n    stringSeq \"\")\n    ]\n       allCaps\n    )\n)", "user": "5dcc651de4b02b31cc3da3c8"}, {"problem": 29, "code": "(fn [string]\n (->> string (filter #(Character/isUpperCase %)) (apply str)))", "user": "5dcbe1d7e4b02b31cc3da3bf"}, {"problem": 29, "code": "(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) word)))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %)\n         x)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5de44684e4b0948ae9d9ae03"}, {"problem": 29, "code": "reduce (fn [a c] (if (Character/isUpperCase c) (str a c) a)) \"\"", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5de65feee4b0986d99407f68"}, {"problem": 29, "code": "(fn [str]\n   (->>(map int str) \n       (filter #(and (<= 65 %) (>= 90 %)))\n       (map char)\n       (clojure.string/join \"\")))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n  )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "554462c0e4b0a04f79299529"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 29, "code": ";; No regex\n(fn [string]\n  (apply str\n         (filter\n          #(and\n            (= (clojure.string/upper-case %1) (str %1)) \n            (not= (clojure.string/lower-case %1) (str %1))\n            ) \n         string))\n  )", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 29, "code": "(fn caps\n  [x]\n  (clojure.string/join (seq (filter #(Character/isUpperCase %) x)))\n  )", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 29, "code": "(fn [coll] (apply str (re-seq #\"\\p{Upper}+\" coll ))  )", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 29, "code": "#(apply str\n         (re-seq #\"[A-Z]+\" %))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 29, "code": "(fn [word-string]\n  (apply str\n  \t(map char (filter #(<= 65 % 90) (map (comp int char) word-string)))\n  )\n)", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))", "user": "5de630d1e4b0948ae9d9ae23"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(and (Character/isLetter %) (= (clojure.string/upper-case %) (str %))) x)))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ddbd4b3e4b0948ae9d9adb5"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ded9f51e4b093ff7172758a"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (not= s (.toLowerCase s))) (map str (seq %))))", "user": "5dee144ae4b093ff71727591"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5defd277e4b093ff717275b0"}, {"problem": 29, "code": "(fn [string]\n                     (let [caps (->> [\\A \\Z]\n                                     (map int)\n                                     ((fn [coll]\n                                       [(first coll) (inc (nth coll 1))]))\n                                     (apply range)\n                                     (map char))]\n                       (->> string\n                            (filter (set caps))\n                            (apply str))))", "user": "5de0b844e4b0948ae9d9adea"}, {"problem": 29, "code": "(fn [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5df23060e4b03c219ef1a356"}, {"problem": 29, "code": "(fn [input] (apply str (filter (fn [x] (Character/isUpperCase x)) input)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5df4cb3be4b03c219ef1a381"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 29, "code": "(fn gs [name]\n  (if (clojure.string/blank? name)\n    name\n    (if (= (clojure.string/lower-case (subs name 0 1)) (subs name 0 1))\n      (gs (subs name 1))\n      (str (subs name 0 1) (gs (subs name 1))))))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 29, "code": "#(reduce str (filter (fn [c] (and (>= (int c) (int \\A )) (<= (int c) (int \\Z )))) %))", "user": "5de6e291e4b0986d99407f72"}, {"problem": 29, "code": "(fn [x] (->> x (filter #(Character/isUpperCase %)) (clojure.string/join \"\")))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5de8648de4b0986d99407f7c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5df98dc8e4b0a607a9a45cbc"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 29, "code": "(fn [s] (apply str(filter #(Character/isUpperCase %) (seq s))))", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 29, "code": ";#(apply str (re-seq #\"[A-Z]+\" %))\n\n;#(apply str (filter Character/isUpperCase %))\n(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 29, "code": "(fn cap [s]\n  (apply str (filter  #(Character/isUpperCase %) s)))", "user": "5dfb538ee4b0a607a9a45cda"}, {"problem": 29, "code": "(fn [s]\n  (let [upper-case-p #(not= (str %) (clojure.string/lower-case %))]\n    (apply str (filter upper-case-p s))))", "user": "55527251e4b0deb715856df3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 29, "code": "(fn [coll] \n  (apply str (filter #(contains? (set (map char (range 65 91))) %) coll)))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5e010c58e4b0a607a9a45d33"}, {"problem": 29, "code": "(fn my-upper-filter [s] \n  (apply str \n         (filter #(not= (clojure.string/lower-case (str %)) (str %)) s)))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 29, "code": "(fn [word]\n  (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) word)))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(let [c (compare \\Z %)]\n                   (and (>= c 0)\n                        (<= c 25)))) doall (apply str)))", "user": "5e066185e4b0978307768fa4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 29, "code": "(fn [col]\n   (->> (filter #(Character/isUpperCase %) col) (apply str)))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 29, "code": "(fn [text]\n   (reduce str (re-seq #\"[A-Z]\" text)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 29, "code": "(fn a [s] (apply str (filter #(let [x (apply str [%])] (not= x (clojure.string/lower-case x))) s)))", "user": "5e03fd15e4b0a607a9a45d66"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]\" xs)))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]+\" %))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 29, "code": "(fn [strseq]\n  (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) (seq strseq)))\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (not (nil? (re-matches #\"[A-Z]\" (str c))))) %))", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %1) x)))", "user": "5e0e0131e4b099d064962fa1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 29, "code": "(fn [s] (->> s\n             (re-seq #\"[A-Z]\")\n             (apply str)))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 29, "code": "(fn get-caps [string] (clojure.string/join (map #(re-find #\"[A-Z]+\" (str %)) string)))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 29, "code": "(comp (partial apply str) (partial filter #(Character/isUpperCase %)))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 29, "code": "(fn cap-filter\n  [string]\n  (clojure.string/join\n    (filter #(and (< 64 (int %)) (> 91 (int %))) (seq string))))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 29, "code": "(fn [a] (apply str (filter #(Character/isUpperCase %) a)))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 29, "code": "(fn [instr]\n   (apply str (reduce (fn [result curr-char]\n                        (if (Character/isUpperCase curr-char)\n                          (conj result curr-char)\n                          result)\n                        ) [] (char-array instr))))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (<= 65 (int c) 90)) %))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 29, "code": "(fn [txt]\n  (reduce (fn [r t]\n            (if (and \n                 (> (int t) 64)\n                 (< (int t) 91))\n              (str r t)\n              r))\n          \"\"\n          txt))", "user": "5e172edce4b054039d6af22b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [s] (Character/isUpperCase s)) s)))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 29, "code": "#(->> (apply list %)\n  (filter (fn [c] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)))\n  (apply str)\n  )", "user": "5e1754abe4b00200644e3d53"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 29, "code": "(fn [col] (clojure.string/join (re-seq #\"[A-Z]\" col)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s))\n)", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 29, "code": "(fn [msg] (loop [suffix msg caps \"\"] (if (empty? suffix) caps (recur (rest suffix) (if (<= (int \\A) (int (first suffix)) (int \\Z)) (str caps (first suffix)) caps)))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 29, "code": "(fn struppr [s]\n    (cond\n      (string? s) (struppr \n        (re-seq #\"[A-Z]\" s) )\n      (nil? s) \"\"\n      (seq? s)  \n        (cond\n          (nil? (second s)) (first s)\n          :else (str (first s) (struppr (rest s)))\n        )\n           \n    )\n  )", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 29, "code": "(fn all-caps [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 29, "code": "(let [letters (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n  #(apply str (filter letters %)))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 29, "code": "(fn get-the-caps [st]\n  (reduce str \n         (let [low-st (.toLowerCase st)]\n           (for [i (range (count st))\n                 :when (not= (nth st i) (nth low-st i))]\n             (nth st i)))))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5de68068e4b0986d99407f6b"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") (apply str))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 29, "code": "#(clojure.string/replace % (re-pattern \"[^A-Z]\") \"\")", "user": "5e265173e4b05b4b01516175"}, {"problem": 29, "code": "(fn[x](clojure.string/replace x #\"[a-z1-9$#(*&!, ]\"  \"\"))", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter (fn [x] (and (=  (str x) (str (clojure.string/upper-case x)) ) (not=  (str x) (str (clojure.string/lower-case x)) )) ) x )))", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 29, "code": "(fn isUpper\n  [inputString]\n  (let [charSeq (seq inputString)]\n    (reduce str (filter #(not= % nil)\n            (map #(when (<= 65 (int %) 90) %) inputString)\n    ))\n  )\n)", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 29, "code": "(fn is-upper [string]\n  (apply str (filter (fn [s]\n                       (and (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str s)) (= (str s) (clojure.string/upper-case s)))) string)))", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]\" %))", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 29, "code": "(fn \n  [strIn] \n  (reduce \n   (fn [strOut charIn] (if (re-find #\"[A-Z]\" charIn) (str strOut charIn) (str strOut))) \n   (clojure.string/split strIn #\"\")))", "user": "5e1b0140e4b0dc959400851c"}, {"problem": 29, "code": "(fn [xxx](apply str (filter #(re-matches #\"[A-Z]+\" (str %)) xxx)))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "56777934e4b05957ce8c6167"}, {"problem": 29, "code": "(fn filter-cap [s]\n  (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))", "user": "5e30dbd5e4b05b4b0151621d"}, {"problem": 29, "code": "(fn [s]\n        (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))", "user": "5e317676e4b05b4b01516229"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 29, "code": "(fn [x]\n   (apply str (filter #(Character/isUpperCase %) x)))", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 29, "code": "(fn [str]\n   (clojure.string/join (filter  #(Character/isUpperCase %) str)))", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 29, "code": "(fn find-caps [s] (loop [i 0 result \"\"]\n                    (if (= (+ i 1) (count s))\n                           result\n                           (if (nil? (re-find #\"^[A-Z]+\" (subs s i (+ i 1))))\n                             (recur (+ i 1) result)\n                             (recur (+ i 1) (str result (subs s i (+ i 1))))))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 29, "code": "(fn [x] (apply str  (re-seq #\"[A-Z]\" x)))", "user": "5e266943e4b05b4b01516178"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [l] (Character/isUpperCase l)) %))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 29, "code": "(comp clojure.string/join filter) #(Character/isUpperCase %)", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %1) x)))", "user": "5e39bb8ce4b01d43a70e8dd6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e161799e4b0a047bd49f713"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 29, "code": "#(apply str ( re-seq #\"[A-Z]\" % ))", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 29, "code": "(comp clojure.string/join (partial re-seq #\"[A-Z]\"))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 29, "code": "(fn [s]\n   (let [cs (apply list s)]\n     (apply str (filter #(Character/isUpperCase %) cs))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e259d05e4b05b4b01516169"}, {"problem": 29, "code": "#(apply str ((fn [s] (filter (fn [c] (Character/isUpperCase c)) (seq s))) %))", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (re-seq #\"\\p{Lu}\" s)))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 29, "code": "#(let [input %\n                upper? (fn [intCh]\n                         (and (>= intCh (int \\A)) (<= intCh (int \\Z))))]\n            (apply str (filter (fn [ch]\n                                 (when (upper? (int ch)) ch)) input)))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(not (= % (clojure.string/lower-case %))) (clojure.string/split s #\"\"))))", "user": "5e495e3fe4b043cd24807a4f"}, {"problem": 29, "code": "(fn [string]\n              (apply str (filter #(Character/isUpperCase %) string)))", "user": "5e491182e4b043cd24807a46"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 29, "code": "#(->> %\n     (filter (fn [c] (Character/isUpperCase c)))\n     (apply str)\n     )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 29, "code": "(fn just-the-caps\n  [col]\n  (clojure.string/join (filter #(Character/isUpperCase %) col)))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 29, "code": "(fn[mystr] (apply str (filter #(Character/isUpperCase %) mystr)))", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5e41cb44e4b01d43a70e8e5b"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 29, "code": "(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))", "user": "5e519986e4b027a2e10ac0d0"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\"s)))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e5809bbe4b027a2e10ac104"}, {"problem": 29, "code": "(fn [s]\n  (-> s\n  \t(clojure.string/replace #\"\\W\" \"\")\n\t(clojure.string/replace #\"[a-z0-9]\" \"\")))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter\n          #(not= (str %) (clojure.string/lower-case %)) (seq s))))", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 29, "code": "#(apply str (filter (fn [ch] ((complement =) (clojure.string/lower-case ch) (str ch))) (seq %)))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "5e5be89ce4b0fd0acd15865f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 29, "code": "(fn get-caps [str]\n   (clojure.string/join (filter #(Character/isUpperCase %) str)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) (seq %)))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 29, "code": ";(identity(\n (fn [i]\n    (->>\n     i\n     (filter #(Character/isUpperCase %))\n     (reduce str)))\n   ;  \"aagGgHHSHF\"))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54b51366e4b05787c3b16398"}, {"problem": 29, "code": "#(apply str (map char(filter (fn [x] (and (> x 64) (< x 91)))(map int %))))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 29, "code": "(fn [twine] (apply str (filter #(<= 65 (int %) 90) twine)))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 29, "code": "(fn hi [message] \n  (apply str (filter #(Character/isUpperCase %) (char-array message)))\n  )", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 29, "code": "(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5e66c144e4b0e171e1033683"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n    (re-seq #\"[A-Z]\" s)))", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e6a9d8ee4b04a83ad7cd276"}, {"problem": 29, "code": "(fn [s]\n   (clojure.string/join\n     (filter\n       #(Character/isUpperCase %)\n       s)))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e694e8fe4b04a83ad7cd26c"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(and (>= 0 (compare % \\Z)) (>= 0 (compare \\A %))) s))\n  )", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 29, "code": "(fn [my-string]\n  (apply str (filter #(Character/isUpperCase %) my-string)))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 29, "code": "(fn get-caps [s]\n  (->> s\n       (re-seq #\"[A-Z]+\")\n       clojure.string/join))", "user": "57e41d99e4b0bfb2137f5ab5"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 29, "code": "(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))", "user": "5e6df58ee4b04a83ad7cd297"}, {"problem": 29, "code": "(fn [stg]\n  (loop [stg stg,rstr \"\"]\n    (if (seq stg)\n      (if (and (>= (int (first stg)) (int \\A)) (<= (int (first stg)) (int \\Z)))\n        (recur (rest stg) (str rstr (first stg)))\n        (recur (rest stg) rstr))\n      rstr)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5e735071e4b085ba37836dcf"}, {"problem": 29, "code": "(fn [s]\n    (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVXYZW\") s)))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 29, "code": "(fn caps [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 29, "code": "#(loop [s %, res \"\"]\n   (if (nil? s) \n     res\n     (if (= (clojure.string/lower-case (first s)) (str(first s)))\n       \t(recur (next s) res)\n          (recur (next s) (str res (first s) ))\n          \n      )\n    )\n )", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e7b41f2e4b085ba37836e12"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s )))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 29, "code": "(fn [x] \n     (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 29, "code": "(fn [items]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) items)))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 29, "code": "(fn [seq] (apply str (re-seq #\"[A-Z]+\" seq)))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 29, "code": "(fn[x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]\" st)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 29, "code": "(fn func3 [phrase]\n  (apply str (for [character phrase\n                   :when (= (re-matches #\"[A-Z]\" (str character)) (str character))]\n               (str character))))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 29, "code": "(fn get-caps [s]\n  (reduce\n    (fn [acc curr]\n      (if (Character/isUpperCase curr)\n        (str acc curr)\n        acc))\n    \"\"\n    s))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 29, "code": "#(let [letters (map char (range (int \\A) (+ (int \\Z) 1)))\nisCapital? (fn [x] (some #{x} letters))]\n(->> %\n  (filter isCapital?)\n  (reduce str)\n))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 29, "code": "(fn [sentence] (apply str (filter #(Character/isUpperCase %) sentence)))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 29, "code": "(fn [s] (->>  s\n       (map int)\n       (filter #(>= % 65 ))\n       (filter #(<= % 90 ))\n       (map char)\n       (apply str)))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 29, "code": "(fn my-only-capital\n  ([arg] (clojure.string/join (filter #(Character/isUpperCase %) (seq arg)))))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 29, "code": "#(reduce str (map str (filter (fn [x] (Character/isUpperCase x)) (into [] %))))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 29, "code": "(fn [coll] (reduce str (re-seq #\"[A-Z]\" coll)))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e87194ce4b09a7a73c8bbe4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4eb70649535d7eef30807373"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (reduce #(str %1 (if (contains? (set (map char (range 65 91))) (char %2)) %2))\n          nil s))", "user": "5e0a6cf0e4b099d064962f66"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 29, "code": "(fn [s] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int (seq s))))))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 29, "code": "(fn [s] (apply str (reduce (fn [xs x] (if (empty? (re-matches #\"[A-Z]\" x)) xs (conj xs x))) [] (map str (seq s)))))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 29, "code": "(fn [string]\n (apply str (filter (fn [letter]\n                     (let [l (int letter)]\n                      (and (< 64 l) (> 91 l)))) string)))", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 29, "code": "(fn [item]\n  (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) item))\n  )", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 29, "code": "(fn x2 [string]\n  \t(reduce (fn [acc item] (if (Character/isUpperCase item) (str acc item) (str acc))) \"\" string))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "5e95c88de4b0fbed045a380e"}, {"problem": 29, "code": "(fn [sq] (clojure.string/replace sq #\"[^A-Z]\" \"\"))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 29, "code": "(fn [_] (apply str (filter #(Character/isUpperCase %) _)))", "user": "5e958767e4b0fbed045a380b"}, {"problem": 29, "code": "(fn [arg] (apply str(filter #(Character/isUpperCase %) arg)))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 29, "code": "(fn [string]\n  (reduce str (filter #(Character/isUpperCase %) (vec string))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 29, "code": "(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str\n      (filter #(contains? caps %) s))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 29, "code": "(fn [x](apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x)))))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 29, "code": "(fn [a] (apply str (filterv #(Character/isUpperCase %) (seq a))))", "user": "5e980583e4b0157ca96647d5"}, {"problem": 29, "code": "(fn caps \n  [n] \n  (clojure.string/join \"\" \n                       (filter #(Character/isUpperCase %1) (seq n))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 29, "code": "(fn [x](clojure.string/join (re-seq #\"[A-Z]\" x) ))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5e9a3814e4b0157ca96647e7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 29, "code": "(fn [str] \n  (clojure.string/join (filter  #(Character/isUpperCase %)   str)))", "user": "5e8c0c5be4b0cb0169546320"}, {"problem": 29, "code": "(fn capitaletters\n  [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 29, "code": "(fn getCaps\n  [s]\n  (->> s\n       (seq)\n       (map #(if (and (= (clojure.string/upper-case %) (str %)) (java.lang.Character/isLetter %)) %))\n       (clojure.string/join)))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 29, "code": "(fn [x]\n  (reduce str (remove #(not (Character/isUpperCase %))\n        (mapcat (fn [e]\n                  e) (clojure.string/split x #\"\")))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 29, "code": "#(.replaceAll % \"[^A-Z]\" \"\")", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5df08767e4b093ff717275bf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 29, "code": "#(reduce (fn [res k] (if (Character/isUpperCase k) (str res k) res)) \"\" %)", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 29, "code": "(fn [x] (apply str(filter #(not= (str %) (clojure.string/lower-case %)) x)))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]+\" st)))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 29, "code": "(fn caps \n  [x] \n  (clojure.string/join \"\" \n   (filter #(Character/isUpperCase %1) (seq x))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 29, "code": "(fn [s]\n    (apply str \n        (filter (fn [x] \n                (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))))\n            (seq s))))", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\"\n  (re-seq #\"[A-Z]\" s)))", "user": "5ea806d5e4b00a66d4a951b9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 29, "code": "(fn [string]\n   (clojure.string/join #\"\" (filter #(and (re-seq #\"[a-zA-Z]\" %)(= % (.toUpperCase %))) (clojure.string/split string #\"\"))))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 29, "code": "(fn [s]\n  (apply str(re-seq #\"[A-Z]+\" s)))", "user": "5da70ceee4b000c986472c11"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ea0d417e4b00a66d4a9518a"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 29, "code": "(fn [s]\n      (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 29, "code": "#(apply str \n\t(reduce (fn \n\t          [a v] \n\t          (if (re-matches #\"^[A-Z]*$\" (str v))\n\t            (conj a v)\n\t            a)) \n\t        [] \n\t        (seq %)))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 29, "code": "(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 29, "code": "(fn [string]\n    (apply str (filter (fn [letter]\n                         (and (>= (compare (str letter) \"A\") 0)\n                              (>= (compare \"Z\" (str letter)) 0)))\n                       string\n                       )))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "50bc759ae4b0594b91591c58"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 29, "code": "#(->> %\n      (re-seq #\"[A-Z]\")\n      (apply str))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) (seq st))))", "user": "5eb3f908e4b00a66d4a9521a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (Character/isUpperCase s)) %))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 29, "code": "(fn [st]\n    (apply str (filter #(Character/isUpperCase %) st)))", "user": "5ebc9feae4b00a66d4a95268"}, {"problem": 29, "code": "(fn [st]\n  (->>\n   (re-seq #\"[A-Z]\" st) \n   (apply str)))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/replace x #\"[^A-Z]+\" \"\"))", "user": "5ebaa4a3e4b00a66d4a95258"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 29, "code": "(fn [s]\n  (reduce str\n   (re-seq #\"[A-Z]\" s)))", "user": "5defc177e4b093ff717275af"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ec6705be4b08d0ec38692d6"}, {"problem": 29, "code": "(fn [x]\n    (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) x)))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5ebed654e4b00a66d4a9527c"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 29, "code": "(fn [s]\n  (apply \n str \n (filter \n   (fn [l]\n     (and \n       (>= (compare l \\A) 0) \n       (<= (compare l \\Z) 0)))\n   s))  )", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 29, "code": "#(clojure.string/join \"\" \n                      (re-seq #\"[A-Z]+\" %))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 29, "code": "(fn [st]\n  (reduce str \"\" (filter #(and (= (str %1) (.toUpperCase (str %1))) (Character/isLetter %1)) st)))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [c] (. Character (isUpperCase c))) %))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 29, "code": "(fn\n  [x]\n  (reduce\n    (fn [result entry]\n      (if (re-find #\"[A-Z]+\" (str entry))\n         (str result entry)\n         result))\n    \"\"\n    x))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n; Like this solution\n;\n; #(apply str (re-seq #\"[A-Z]\" %))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 29, "code": "#(->> % (map int) (filter (fn [x] (<= 65 x 90))) (map char) (apply str))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) (seq x))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s))\n   )", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z$#(*&, !0-9]\" \"\")", "user": "5ececec5e4b016b56eae059f"}, {"problem": 29, "code": "(comp clojure.string/join #(re-seq #\"[A-Z]\" %))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 29, "code": ";(fn f [s] (identity s) (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))\n\n(fn f [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 29, "code": "(fn f [s] \n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]+\" xs)))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 29, "code": "(fn get-gaps [text]\n  (apply str (flatten (re-seq #\"[A-Z]\" text))))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5309bacae4b02e82168697bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 29, "code": "(fn get-caps [s]\n  (reduce \n   #(str %1 (re-find #\"[A-Z]\" %2)) \n   \"\"\n   (clojure.string/split s #\"\")))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 29, "code": "(fn get-the-caps \n ([a] (get-the-caps a []))\n ([a res] \n   (if (empty? a)\n\t   (clojure.string/join res)\n\t\t (if (java.lang.Character/isUpperCase (first a))\n\t\t  (recur (rest a) (conj res (first a)))\n\t\t\t(recur (rest a) res)))))", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %1) (seq x) )))", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) s)))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 29, "code": "(comp (partial apply str) (partial re-seq #\"[A-Z]\"))", "user": "5edc645ae4b0c7845d86b0f2"}, {"problem": 29, "code": "(fn rp [s] (\n               clojure.string/replace s #\"[^A-Z]\" \"\"\n                                      ))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 29, "code": "(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))", "user": "504e15a8e4b078edc5f593c1"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 29, "code": "(fn [sq] (apply str (filter #(Character/isUpperCase %) sq)))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 29, "code": ";;(fn fltUpper [my_str]\n;;  (apply str (filter #(Character/isUpperCase %) my_str))\n;;)\n\n(fn fltUpper [my_str]\n  (clojure.string/join (filter #(Character/isUpperCase %) my_str))\n)", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 29, "code": "(fn fn29 [s]\n   (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\" s)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 29, "code": "#(apply str (filter (partial contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}) %))", "user": "5e909685e4b0cb016954634d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 29, "code": "(fn \n[s] \n(clojure.string/join \"\" \n(filter (fn [x] (Character/isUpperCase x)) (seq s))))", "user": "5ee543bde4b029a2061bbe95"}, {"problem": 29, "code": "#(->> % (re-seq #\"[A-Z]\") clojure.string/join)", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))", "user": "5edd0ad2e4b0c7845d86b0f4"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 29, "code": "(fn [str]\n  (clojure.string/join \"\" \n                       (map\n                         #(re-matches #\"[A-Z]\" %)\n                        (clojure.string/split str #\"\"))))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z 0-9 \\t $ & + , : ; = ? @ # | ' < > . - ^ * \\( \\) % ! ]\" \"\")", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 29, "code": "(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 29, "code": "(fn [n]\n   (clojure.string/join (filter\n      (fn [x]\n        (Character/isUpperCase x))\n      n)))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ee7bc8ce4b029a2061bbea7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 29, "code": "(fn [arg] (apply str (filter #(Character/isUpperCase %) arg)))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ee7274ce4b029a2061bbea0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(apply <= (map int (list \\A % \\Z))) s)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 29, "code": "#((fn concatall [matcher] \n    (let [match (re-find matcher)]\n      (if (= match nil)\n        \"\"\n        (str match (concatall matcher))))) (re-matcher #\"[A-Z]\" %))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 29, "code": "#(apply str (remove empty? (re-seq #\"[A-Z]*\" %)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 29, "code": "(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ef4677ce4b07c55ae4a0542"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (if (and (< (int a) 91) (> (int a) 64)) true false)) %))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) s)))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [ch] (Character/isUpperCase ch)) %))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 29, "code": "#(reduce (fn [acc item]\n           (if (Character/isUpperCase item)\n             (str acc item)\n             acc))\n         \"\"\n         %)", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "5efc8ed6e4b0cf489e8d7ef9"}, {"problem": 29, "code": "#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (not= (clojure.string/lower-case a) (str a))) %))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 29, "code": "(fn onlyUpper [x]\n  (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 29, "code": "(fn get-caps [words]\n  (clojure.string/join (re-seq #\"[A-Z]+\" words)))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 29, "code": "(fn get-caps[s] \n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5f06eaede4b0cf489e8d7f55"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n         (filter #(Character/isUpperCase %))\n         (apply str)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5c06e811e4b0bdcf453d16ba"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 29, "code": "#(->> %\n      (filter (fn [x] (Character/isLetter x)))\n      (filter (fn [x] (Character/isUpperCase x)))\n      (clojure.string/join \"\"))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 29, "code": "(fn \n  [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57e070fde4b0bd073c202478"}, {"problem": 29, "code": "(fn [entry-string]\n  (reduce str (map str (map char (filter \n                                     (fn [x] \n                                       (and (< 64 x) (> 91 x)))\n                                     (map int (vec (char-array entry-string))))))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\" ))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 29, "code": "(fn myflat [strarg] (let [caps (set (map char (range 65 91)))]\n\t(apply str (filter caps strarg))\n))", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 29, "code": "#(apply str (filter (fn [s]\n                       (re-matches #\"[A-Z]\" (str s))) %))", "user": "548f1604e4b0e286459a1230"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f01952fe4b0cf489e8d7f22"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 29, "code": "(fn letras-maiusculas [x]\n    (if (empty? x)\n        \"nothing\"\n        \n        (apply str (filter #(Character/isUpperCase %) x))\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 29, "code": "(fn [s] (clojure.string/join\n         (filter\n          #(re-matches #\"[A-Z]\" (str %))\n          (seq s))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" %) (map str (seq s)))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]+\" %))", "user": "5f0f6540e4b091ba50b4db9c"}, {"problem": 29, "code": "(fn [string]\n  (apply str (reduce (fn [out-vec char]\n              (let [casted-to-str-char (str char)]\n                (if ((complement nil?) (re-find #\"[A-Z]\" casted-to-str-char))\n                  (conj out-vec (clojure.string/upper-case char))\n                  out-vec)))\n            []\n            string)))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 29, "code": "(fn [xs] (apply str (vec (filter #(and (>= (int %) 65) (<= (int %) 90)) xs))))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 29, "code": "; stolen (fn [text] (apply str (filter #(Character/isUpperCase %) text)))\n#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 29, "code": "#(reduce str (re-seq #\"\\p{Lu}+\" %))", "user": "5f1a0ca2e4b091ba50b4dbe0"}, {"problem": 29, "code": "(fn  [x]\n\n  (clojure.string/join\n\n  (re-seq #\"[A-Z]\" x))\n \n   )", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 29, "code": "#(\n              reduce\n              (fn [result cha]\n                (\n                 if\n                 (and\n                  (= (str cha) (clojure.string/upper-case cha))\n                  (re-matches #\"[a-zA-Z]\" (str cha)))\n                 (str result cha)\n                 result\n \n                ))\n              \"\"\n              %)", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 29, "code": "#(apply str (filter (fn [leter] (Character/isUpperCase leter)) %))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 29, "code": "(fn only_upper_case [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 29, "code": "(fn [s] (clojure.string/replace s #\"[a-z | ^a-z | ^!,\\$\\#\\(\\*\\& | ^0-9]\"  \"\"))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 29, "code": "(fn [string] (->> string (filter #(Character/isUpperCase %)) (apply str)))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 29, "code": "(fn [a] (loop [orig a lower (clojure.string/lower-case a) output \"\"]\n          (if (empty? orig) \n            output \n            (if (= (first orig) (first lower))\n              (recur (rest orig) (rest lower) output)\n              (recur (rest orig) (rest lower) (str output (first orig)))))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 29, "code": "(fn [str-]\n   (apply str (filter #(and (>= (int %) 65) (< (int %) 97)) (seq str-))))", "user": "59331397e4b072a2710fd046"}, {"problem": 29, "code": "(fn caps [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f247827e4b0f565ad998292"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (map str (filter #(Character/isUpperCase %) x))))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f2a2a0de4b033932238a653"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 29, "code": "(fn [text]\n  \"A function which takes a string and returns a new string containing only the capital letters\"\n  (let [upper-cases (for [letter text\n        :when (Character/isUpperCase letter)]\n    letter)]\n    (apply str upper-cases))\n  )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 29, "code": "(fn [xs] (reduce str (re-seq #\"[A-Z]\" xs)))", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %) ) s)))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 29, "code": "(fn [string]\n  (let [m (re-matcher #\"([A-Z])\" string)]\n   (loop [s \"\"]\n     (if-let [v (first (re-find m))]\n       (recur (str s v))\n       s))))", "user": "5f2de7ede4b033932238a674"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(= (Character/getType %) Character/UPPERCASE_LETTER) s)))", "user": "5b8baa2ce4b0c0b3ffbd49bd"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 29, "code": "(fn [uppercase]\n  (apply str (filter #(Character/isUpperCase %) uppercase)))", "user": "5f05ef21e4b0cf489e8d7f4d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 29, "code": "(fn ups [string] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) (seq string))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 29, "code": "(fn caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 29, "code": "(fn filter-cap [string]\n  (let [char-arr (seq string)]\n    (clojure.string/join (filter #(Character/isUpperCase %) char-arr))))", "user": "5f29837ee4b033932238a64f"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f2d6c70e4b033932238a66f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f331015e4b0574c87022c37"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f300f28e4b033932238a682"}, {"problem": 29, "code": "(fn [spam] (apply str (re-seq #\"[A-Z]\" spam)))", "user": "5f341a4be4b0574c87022c3d"}, {"problem": 29, "code": "(let [my_fn \n  (fn [sss] (clojure.string/join \"\" (filter #(Character/isUpperCase %) sss)))] \n    my_fn)", "user": "5f35026fe4b0574c87022c40"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 29, "code": "(fn [xs]\n  (clojure.string/join (filter #(apply <= (map int [\\A %1 \\Z])) xs)))", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]+\" \"\"))", "user": "5f274aeee4b0857314092c92"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (and (<= (int x) 90) (>= (int x) 65))) %))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 29, "code": "(fn getcaps [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)", "user": "5f22dabbe4b0f565ad99828a"}, {"problem": 29, "code": "(fn [x] (->> x (re-seq #\"[A-Z]\") (clojure.string/join)))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 29, "code": "(fn [sentence]\n  (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) sentence)))", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 29, "code": "#(loop [res \"\"\n        left %]\n   (if (empty? left)\n     res\n     (if (Character/isUpperCase (first left))\n       (recur (str res (first left)) (rest left))\n       (recur res (rest left)))))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 29, "code": "(fn [strr] \n  (apply str (filter #(Character/isUpperCase %) strr)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 29, "code": "(fn fup [in] \n        (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %)  (seq in)))\n    )", "user": "5f3e58dae4b004f08c61c555"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 29, "code": "(fn caps [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 29, "code": "(fn [string]\n   (apply str (filter #(Character/isUpperCase %) string)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 29, "code": "(fn get-caps [x]\n  (let [ss (seq x)]\n    (clojure.string/join (filter #(some #{%} [\\A,\\B,\\C,\\D,\\E,\\F,\\G,\\H,\\I,\\J,\\K,\\L,\\M,\\N,\\O,\\P,\\Q,\\R,\\S,\\T,\\U,\\V,\\W,\\X,\\Y,\\Z,]) ss)))\n  )", "user": "5f419985e4b0955706451fab"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 29, "code": "#(apply str (filter (fn [a] (Character/isUpperCase a)) %))", "user": "5f42baafe4b0955706451fb1"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range (int \\A) (inc (int \\Z))))) %))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %1))", "user": "5f429fdfe4b0955706451faf"}, {"problem": 29, "code": "#(->> %\n       (re-seq #\"[A-Z]\")\n       (apply str))", "user": "5f4314e0e4b0955706451fb4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 29, "code": "(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 29, "code": "(fn [s]  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 29, "code": "#(apply str ((fn tcap\n               [[x & xs :as xst]]\n               (let [seto (set \"HLOWRDAZ\")]\n                 (cond\n                  (empty? xst) \"\"\n                  (not= nil (seto x)) (cons x (tcap xs))\n                  :else (tcap xs)))) %))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 29, "code": "#((fn [col acc] (if (empty? col) acc (let [c (first col)] (recur (rest col) (if (Character/isUpperCase c) (str acc c) acc))))) % \"\")", "user": "5f49482ae4b0102c75033940"}, {"problem": 29, "code": "(fn [e] (clojure.string/join (filter #(Character/isUpperCase %) e)))", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 29, "code": "(fn [string]\n  (apply str (map (partial re-find #\"[A-Z]\") (map str string))))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "5f2ab452e4b033932238a656"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f4dbb81e4b0102c75033961"}, {"problem": 29, "code": "(fn [x]\n  (apply str\n   (filter\n    (fn [y]\n      (.contains (into [] \"QWERTYUIOPASDFGHJKLZXCVBNM\") y))\n    x)))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f4303cfe4b0955706451fb3"}, {"problem": 29, "code": "(fn [str] (clojure.string/join (re-seq #\"[A-Z]\" str)))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 29, "code": "(fn [x] (apply str(filter #(and (= (clojure.string/upper-case (str %1)) (str %1))\n                                            (not= (clojure.string/lower-case (str %1)) (str %1))\n                                            ) (seq x))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 29, "code": "(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))", "user": "5f521a87e4b0a0bc16850a6f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 29, "code": "(fn [some-str]\n   (clojure.string/join \"\" (filter\n                            #(re-matches #\"[A-Z]\" %) (clojure.string/split some-str #\"\"))))", "user": "5f5a57dee4b0a0bc16850aa5"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 29, "code": "(fn\n  [s]\n  (clojure.string/join\n   (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 29, "code": "(fn my-upcase-filter [s]\n  (clojure.string/join\n    (filter (complement nil?)\n      (for [ch s]\n        (if (java.lang.Character/isUpperCase ch)\n          ch\n          nil)))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 29, "code": "(fn [s]\n  (apply \n   str \n   (filter \n    (fn [c] (and (<= 0 (compare c \\A)) (>= 0 (compare c \\Z))))\n    (apply list s))))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \n \"\"\n (filter #(Character/isUpperCase %) s)))", "user": "5e7128eee4b085ba37836db5"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)) )", "user": "5e70c16de4b085ba37836dae"}, {"problem": 29, "code": "(fn [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq x)))\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 29, "code": "(fn [phrase]\n (apply str (re-seq #\"[A-Z]\" phrase)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 29, "code": "(fn [strr] (apply str (filter #(Character/isUpperCase %)  strr)))", "user": "5eb4e4abe4b00a66d4a95222"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 29, "code": "(fn caps-only\n  [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 29, "code": "(fn [s]\n    (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 29, "code": "; (fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 29, "code": "(fn get-upper [x]\n  (apply str (re-seq #\"[A-Z]\" x)))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 29, "code": "(fn uppers [ss]\n    (reduce str (filter #(Character/isUpperCase %) ss)))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 29, "code": "#(apply str (filter (fn [data] (Character/isUpperCase data)) %))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 29, "code": "(fn only-lower [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 29, "code": "(fn [string] (clojure.string/join (re-seq #\"[A-Z]\" string)))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 29, "code": "#(apply\n  str \n   (re-seq #\"[A-Z]\" %))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 29, "code": "(fn [st] (apply str (concat (filter #(Character/isUpperCase %) st))))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f27f180e4b033932238a648"}, {"problem": 29, "code": "(fn [s] (->> s (map str) (filter #(re-matches #\"[A-Z]\" %)) (clojure.string/join)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 29, "code": "(fn [in] (apply str (filter #(Character/isUpperCase %) in)))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 29, "code": "(fn caps [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter (fn [t] (Character/isUpperCase t)) string)))", "user": "5f388489e4b0574c87022c69"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       char-array\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 29, "code": "(fn [x]\n  (loop [i 0 r \"\"]\n    (if (< i (count x))\n      (if (and  (< 64 (int (nth x i)))  (> 91 (int (nth x i))   ))\n        (recur (inc i) (str r (nth x i)))\n        (recur (inc i) r)\n        )\n      r\n\n      )))", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 29, "code": "#(clojure.string/replace %1\r\n                          #\"[^A-Z]\"\r\n                          \"\")", "user": "5f5396d4e4b0a0bc16850a79"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 29, "code": "#(clojure.string/join \"\"(re-seq #\"[A-Z]+\" %))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 29, "code": "(fn\n  [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))", "user": "5f735915e4b02876ed9fd097"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 29, "code": "(fn [text](apply str (filter (fn [c] (re-find (re-pattern \"[A-Z]\") c) ) (map str text) )))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 29, "code": "(fn my-filter-upper [xs] (apply str (filter #(Character/isUpperCase %) xs)))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n  (filter #(Character/isUpperCase %))\n  (apply str)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 29, "code": "(fn[lst] (apply str (filter #(Character/isUpperCase %) lst)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 29, "code": "(fn caps [string]\n    (let [[h & t] (seq string)]\n      (cond\n       (nil? h) nil\n       (not (char? h)) (caps t)\n       (#(Character/isUpperCase %) h) (str h (caps t))\n       :else (caps t)\n      )\n    )\n  )", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 29, "code": "(fn [x]\n     (apply str (filter #(Character/isUpperCase %) x)))", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5d8570cae4b0915913b1d395"}, {"problem": 29, "code": "(fn [xs]\n  (reduce str (re-seq #\"[A-Z]\" xs))\n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "5f7f0c32e4b0c071e6c840de"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 29, "code": "(fn cap-letters [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 29, "code": "#(->> % (filter (fn [x] (Character/isUpperCase x))) (clojure.string/join ,))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 29, "code": "(fn [x] (clojure.string/replace x #\"[a-z0-9.,!?$#*()& ]\" \"\"))", "user": "5f86f5a3e4b0649ffcda4cad"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f84149ce4b0375e81f54e71"}, {"problem": 29, "code": "(fn caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 29, "code": "(fn filter-caps [row]\n  (apply str\n    (filter\n      #(= (clojure.string/upper-case (str %)) (str %))\n      (apply str (re-seq #\"[a-zA-Z]\" row)))))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 29, "code": "(fn [sq] (apply str (re-seq #\"[A-Z]+\" sq)))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 29, "code": "(fn [string] \n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 29, "code": "(fn [n]\n   (clojure.string/join\n       (lazy-seq\n        (filter #(Character/isUpperCase %)n ))) )", "user": "5f737899e4b02876ed9fd099"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 29, "code": "reduce #(str % (when (contains? (set (range 65 91)) (int %2)) %2)) \"\"", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 29, "code": "(fn [xs] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (seq xs))))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]\" string)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 29, "code": "(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter #(contains? caps %) s))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (fn [c] (and (Character/isLetter c)\n                             (= (str c) (clojure.string/upper-case c))))\n                     (seq s))))", "user": "5f6f461ae4b02876ed9fd06f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f94d5bfe4b0715f5002d7c2"}, {"problem": 29, "code": "(fn [lst]\n  (reduce str (filter #(= (str %) (str (clojure.string/upper-case %))) (seq (clojure.string/replace lst #\"[',.?! #$@&*()0-9]\" \"\")))))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 29, "code": "(fn [in] (apply str \n                (filter #(Character/isUpperCase %) in)))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 29, "code": "(fn p29 [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 29, "code": "(fn [s] \n  (apply str\n         (map char\n              (filter #(and (<= 65 %) (<= % 90))\n                      (map int s)))))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 29, "code": "(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x))\n  )", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ed11279e4b016b56eae05b7"}, {"problem": 29, "code": "(fn get-caps [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")\n  ))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 29, "code": ";(fn [s] (apply str (map #(clojure.string/replace % #\"[^A-Z]\" \"\") s)))\n#(apply str (re-seq #\"[A-Z]\" %1))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 29, "code": "(fn\n  [string]\n  (loop [[head & tail] (seq string)\n         new-string \"\"]\n    (if (nil? head)\n      new-string\n      (recur tail (if (and (>= (int head) 65) (<= (int head) 90))\n                    (clojure.string/join [new-string head])\n                    new-string)))))", "user": "5f9c3f63e4b0715f5002d820"}, {"problem": 29, "code": "#(reduce str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 29, "code": "#(reduce str \"\" (re-seq #\"[A-Z]+\" %))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 29, "code": "(fn ups [s] \n  (clojure.string/join \n    (filter \n      (fn [c] (and (>= (int c) 65) (<= (int c) 90)))\n      (seq s) \n    )\n  )\n)", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 29, "code": "(fn [s]\n    (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5f985283e4b0715f5002d800"}, {"problem": 29, "code": "(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(< 64 (int %) 97) s)))", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 29, "code": "(fn f [s]\n\t(clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 29, "code": "(fn  [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 29, "code": "#( apply str (for [x (seq %) :when (and (< 64 (int x)) (> 91 (int x)))] x))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \n   (filter #(re-matches #\"[A-Z]\" (str %))\n           (seq s))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 29, "code": "#(reduce str (filter (fn [char] (java.lang.Character/isUpperCase char)) %))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 29, "code": "(fn keep-caps [s]\n  (apply str \n         (re-seq #\"[A-Z]\" s)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 29, "code": "(fn[x] (apply str (filter #(Character/isUpperCase %)x)))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 29, "code": "(fn [coll]\n   (let [letters (clojure.string/split coll #\"\")]\n     (->> (filter #(re-matches #\"[A-Z]+\" %) letters)\n          (clojure.string/join \"\"))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 29, "code": ";#(apply str (re-seq #\"[A-Z]\" %))\n#((comp (partial apply str) (partial re-seq #\"[A-Z]\")) %)", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 29, "code": "(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 29, "code": "(fn [s]\n    (clojure.string/join (filter #(Character/isUpperCase %) s)))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 29, "code": "(fn [x] (reduce str (filter #(and (> (int %) 64) (< (int %) 91)) x)))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 29, "code": "( fn [str]\n             (clojure.string/join (filter #(Character/isUpperCase %) str)) )", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 29, "code": "#(clojure.string/join (clojure.string/split % #\"[^A-Z]\" ))", "user": "5fabe67be4b08cb800c85ade"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 29, "code": "(fn [inp-arg]\n(apply str (filter #(Character/isUpperCase %) inp-arg)) \n)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5fcbf407e4b07e53c2f3eff0"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 29, "code": "(fn [str]\n\n    (clojure.string/join (filter #(Character/isUpperCase %1) str)))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 29, "code": "(fn [s]\n  (apply\n   str\n   (filter #(Character/isUpperCase %) s)))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fba5692e4b03f550f448230"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "5fdb1e64e4b05ac5b16ea12c"}, {"problem": 29, "code": "(fn [args] (apply str (filter #(Character/isUpperCase %) args)))", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 29, "code": "#(clojure.string/join (filter (fn [x] (not= (clojure.string/lower-case (str x)) (str x))) (seq %)))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 29, "code": "#(apply str \n  (re-seq #\"[A-Z]\" %))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fe1589ee4b05ac5b16ea16c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 29, "code": "(fn [s] (->> (re-seq #\"[A-Z]\" s)\n             (apply str)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) string)))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 29, "code": "(fn [string]\n  (reduce #(if (and (Character/isLetter %2) (= %2 (Character/toUpperCase %2)))\n    (str %1 %2)\n    %1) \"\" string))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 29, "code": "(fn [text]\n  (apply str \n    (filter #(Character/isUpperCase %) text)\n  )\n)", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 29, "code": "(fn [seq]\n      (apply str (remove\n                  (fn [x]\n                    (not (<= 65 (int x) 90))) seq)))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 29, "code": "(fn [s] (->>\n  s\n  (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))))\n  (apply str)\n  ))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 29, "code": "(fn filter-uppercase [st ](clojure.string/replace st #\"[^A-Z]\" \"\"))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 29, "code": "#(->> %\n      (seq)\n      (filter (fn [c] (Character/isUpperCase c)))\n      (apply str))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fe35144e4b05ac5b16ea178"}, {"problem": 29, "code": "(fn f[ppp] (apply str (filter (fn p[x] (Character/isUpperCase x)) ppp)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5fef99e2e4b05ac5b16ea1e0"}, {"problem": 29, "code": "(fn caps [s]\n  (reduce (fn [cs c]\n             (if (and (>= (int c) 65) (<= (int c) 90))\n                (str cs c)\n                 cs)) \"\" s))", "user": "5ab168d2e4b073f1774425c2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "5ff214e7e4b05ac5b16ea1fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 29, "code": "(fn [expression]\n  (reduce str (re-seq #\"[A-Z]+\" expression)))", "user": "5ff19fe0e4b05ac5b16ea1f4"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (and (< (compare c \\Z) 1) (> (compare c \\A) -1))) (seq %)))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 29, "code": "(fn get-caps\n  [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 29, "code": ";; (fn [xs] (reduce str (re-seq #\"[A-Z]\" xs)))\n\n;; #(clojure.string/replace % #\"[^A-Z]+\" \"\")\n\n;; (fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))\n\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 29, "code": "#(apply str\n        (filter (fn [c] (Character/isUpperCase c)) %))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 29, "code": "reduce\n  (fn [res x] (let [c (int x)]\n      (if (and (< 64 (int c))\n               (> 91 (int c)))\n        (str res (str x))\n          res)\n      ))\n  \"\"", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 29, "code": "(fn up [coll]\n    (reduce (fn [a v]\n              (if (Character/isUpperCase v)\n                (str a v)\n                a)) \"\" coll))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 29, "code": "#_(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))\n#_(fn [x]\n   (->> x\n      (map int)\n      (filter #(and\n                 (>= % 65)\n                 (<= % 90)))\n      (map char)\n      (apply str)))\n#_(fn [x]\n   (->> x\n      (filter #(and\n                 (>= (int %) 65)\n                 (<= (int %) 90)))\n      (apply str)))\n#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 29, "code": "(fn \n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 29, "code": "(fn [word]\n  (apply str (re-seq #\"[A-Z]+\" word)))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 29, "code": "(fn [s] \n  (clojure.string/join \n    (filter (fn [x] (and (<= (int x) 90) (>= (int x) 65))) s)\n  )\n)", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 29, "code": "#_(fn [st]\n    (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int st)))))\n\n(fn [st]\n    (apply str (re-seq #\"[A-Z]+\" st)))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str\n    (filter\n      #(and (= (str %) (clojure.string/upper-case (str %))) (Character/isLetter %))\n      s)))", "user": "5ffee617e4b074f607df6605"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "60036736e4b074f607df663b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6004c750e4b074f607df6645"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 29, "code": "(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "6001c90ce4b074f607df6626"}, {"problem": 29, "code": ";(fn[x](apply str (re-seq #\"[A-Z]\" x)))\n\n(let [Regex (fn[x](re-seq #\"[A-Z]\" x))\n   StringParse (fn[x](apply str (Regex x)))]\n StringParse\n)", "user": "6001460ce4b074f607df6611"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 29, "code": "(fn [v] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) v)))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60057cd4e4b074f607df664a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "600777a3e4b074f607df6667"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "60046db8e4b074f607df6642"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 29, "code": "(fn [xs]\n\t(clojure.string/join (filter #(Character/isUpperCase %) (char-array xs)) ))", "user": "5da7176ae4b000c986472c13"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(<= 65 (int %) 90) (seq s))))", "user": "600cb742e4b074f607df6696"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase (char %)) s)))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "600c1c72e4b074f607df6692"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 29, "code": "(fn foo [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "600ae927e4b074f607df6689"}, {"problem": 29, "code": "(fn [s]\n    ((fn rec [s acc]\n    (cond\n        (empty? s) acc\n        (Character/isUpperCase (first s)) (rec (rest s) (str acc (first s)))\n        :else (rec (rest s) acc)))\n    s \"\"))", "user": "601004d6e4b074f607df66b2"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (map char (filter #(and (< % 97) (> % 64)) (map int s)))))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "6011b89ee4b074f607df66bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 29, "code": "(fn only-caps [x]\n  (clojure.string/join (filter #(Character/isUpperCase %) x)))\n;; note: `apply str` would also work instead of `join`", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "60096aabe4b074f607df667f"}, {"problem": 29, "code": "(fn [input]\n    (->> input\n         (filter\n          #(contains?\n            (->> (range 26)\n                 (map (fn [i] (-> i (+ (int \\A)) char)))\n                 set)\n            %))\n         (apply str)\n         )\n    )", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 29, "code": "(fn [s]\n  (->>\n   s\n   (filter #(Character/isUpperCase %))\n   (apply str)))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 29, "code": "(let [upper? #(java.lang.Character/isUpperCase %)]\n  #(->> %\n        (filter upper?)\n        (apply str)))", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 29, "code": "(fn capitals [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 29, "code": "(fn [input] (apply str (for [x input\n         :let [y (identity x)]\n         :when (#(Character/isUpperCase %) x)]\n     y)))", "user": "5ff99e57e4b06df49cee14b0"}, {"problem": 29, "code": "(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "56fee925e4b08d47c97781b7"}, {"problem": 29, "code": "#(apply str(re-seq #\"[A-Z]\" %))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))", "user": "558ffb4be4b0277789237667"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[a-z!,789$#*&\\(\\ ]\" \"\")", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (Character/isUpperCase c)) %))", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 29, "code": "(fn isUpperCase [s] (apply str (filter #(. java.lang.Character isUpperCase %) s)))", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 29, "code": "(fn caps\n  [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) %))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s))\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "6022844de4b0d5df2af22203"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 29, "code": "(fn st [ls] (clojure.string/join (filter #(Character/isUpperCase %) ls ) ) )", "user": "600b385ce4b074f607df668d"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(let [cislo (int %)]\n             (and (> cislo 64)\n                 (< cislo 91))) s)))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )", "user": "6024544be4b0d5df2af2221f"}, {"problem": 29, "code": "(fn [st]\n  (loop [s st\n         acc \"\"]\n    (if (empty? s)\n      acc\n      (if (Character/isUpperCase (first s))\n        (recur (rest s) (str acc (first s)))\n        (recur (rest s) acc)\n      ))))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 29, "code": "(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 29, "code": "(fn [xs]\n    (apply str (filter #(Character/isUpperCase %) xs)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 29, "code": "(fn m_fn29 [x] \n(clojure.string/join (re-seq #\"[A-Z]+\" x)))", "user": "6022429be4b0d5df2af22200"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))", "user": "602bfcefe4b0d5df2af22268"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 29, "code": "(fn [s] (\napply str (filter #(<= (int \\A) (int %) (int \\Z)) s)\n))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 29, "code": "(fn caps-only [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 29, "code": "(fn find-capital-string [args]\n  (let [result (atom [])]\n    (doseq [char-data (seq args)]\n      (when (and (>= (int char-data) 65)  (<= (int char-data) 90))\n        (swap! result conj char-data)))\n    (swap! result #(apply str %1))\n\n    @result)\n  )", "user": "602f8400e4b0d5df2af22299"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 29, "code": "(fn [s] (.replaceAll s \"[^A-Z]\" \"\"))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 29, "code": "(fn [col] (apply str (filter (fn [element] (Character/isUpperCase element)) col)))", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 29, "code": "#(reduce str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "600eb95de4b074f607df66a6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ed61537e4b016b56eae05dc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 29, "code": "(fn\n  [input-string]\n  (apply str (filter #(Character/isUpperCase %) input-string))\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 29, "code": "(fn [string]\n  \n  (clojure.string/join \"\"(re-seq #\"[A-Z]\" string)))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 29, "code": "(fn caps-only [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60282169e4b0d5df2af22240"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 29, "code": "(fn [s]\n  (apply str\n         (filter (fn [s]\n                 (<= 65 (int s) 90))\n                 s)))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 29, "code": "(fn [s]\n\n  (->> s\n       (filter #(and (>= (int %) (int \\A))\n                     (<= (int %) (int \\Z))))\n       (apply str)))", "user": "60436423e4b02d28681c77a3"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]\" %))", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 29, "code": "(fn[value]\n  (apply str (filter #(Character/isUpperCase %) value)))", "user": "600d9808e4b074f607df669c"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60461a61e4b02d28681c77c1"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s )))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 29, "code": "(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string))\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 29, "code": "#(apply str (filter (fn [x]  (<= (int \\A) (int x) (int \\Z) ))\n     (seq %)))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 29, "code": "(fn caps [s] \n  (clojure.string/join \n   (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)\n   )\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 29, "code": "(fn\n   [x]\n   (apply str (filter #(Character/isUpperCase %) x)))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 29, "code": "(fn foo [word] (apply str (filter (fn foo [ch] (and (>= (int \\Z) (int ch)) (<= (int \\A) (int ch)))) word)))", "user": "6028365be4b0d5df2af22242"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (filter (fn [c] (<= (int \\A) (int c) (int \\Z))))\n       (apply str)))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60420ee4e4b04b4f332c3e71"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 29, "code": "#(apply str (filter (fn [s] (Character/isUpperCase s)) %))", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 29, "code": "(fn caps [stg]\n  (reduce str (re-seq #\"[A-Z]+\" stg)))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 29, "code": "(fn [x] (apply str (map (fn [y] (re-find #\"[A-Z]\" (str y))) x)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 29, "code": "(fn caps-only\n  [x] (clojure.string/join ( re-seq #\"[A-Z]+\" x)))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))", "user": "5b4e0b34e4b02d533a91bcc5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60504383e4b056659d6341fa"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 29, "code": "(fn [s]\n   (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 29, "code": "(fn find-upper\n  ([st] (find-upper st []))\n  ([st res]\n   (if (empty? st)\n       (apply str res)\n     (if (some #(= (int (first st)) %) (vec (range 65 91)))\n       (recur (rest st) (conj res (first st)))\n       (recur (rest st) res)\n       )\n     )\n   )\n )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 29, "code": "(fn [r] (apply str (filter #(Character/isUpperCase %) (seq r))))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 29, "code": "(fn [xs] (apply str (re-seq #\"[A-Z]\" xs)))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 29, "code": "(fn [s] (apply str (remove nil? (map #(re-find #\"[A-Z]\" %) (map str (seq s))))))", "user": "60521ea8e4b056659d634205"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 29, "code": "(fn only-uc [a] (reduce str \"\"\n\t(filter \n     \t#(and (not= (clojure.string/upper-case %) (clojure.string/lower-case %)) (= (clojure.string/upper-case %) (str %)))\n\t    a)))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 29, "code": "(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s))\n  )", "user": "605b1197e4b000d535e6f548"}, {"problem": 29, "code": "(fn filter-caps [input] (apply str (filter #(Character/isUpperCase %) input)))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 29, "code": "#(apply str (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) (seq %)))", "user": "60538924e4b04c8f2157d153"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 29, "code": "(fn get-caps\n  [s]\n  (clojure.string/join (filter #(Character/isUpperCase %1) s)))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 29, "code": "#(clojure.string/replace %1 (re-pattern \"[^A-Z]\") \"\")", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 29, "code": "(fn [string] (apply str (filter #(Character/isUpperCase %) string)))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "60654263e4b069485764ddc9"}, {"problem": 29, "code": "(fn [x]\n(apply str (filter #(Character/isUpperCase %) x)))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 29, "code": "(fn \n  [s]\n  (reduce str (filter #(Character/isUpperCase %) s))\n  )", "user": "60617afee4b03746e80ebf6c"}, {"problem": 29, "code": "(fn\n   [s]\n   (reduce #(str %1 %2) \"\" (filter #(Character/isUpperCase %) (seq s)))\n   )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 29, "code": "#(->> %\n          (seq) ; string -> seq char\n          (filter (fn [s]\n                    (and (>= (int s) (int \\A))\n                         (<= (int s) (int \\Z)))))\n          (map str)\n          (clojure.string/join))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6065755ee4b069485764ddcc"}, {"problem": 29, "code": "(fn [string]\n  (.replaceAll string \"[^A-Z]\" \"\"))", "user": "60593916e4b07e92fa001acc"}, {"problem": 29, "code": "(fn filter-upper-case [s] \n  (clojure.string/join \"\" \n                       (filter #(Character/isUpperCase %) (seq s))))", "user": "60522feae4b0af2ba86d5a0a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 29, "code": "(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 29, "code": "(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 29, "code": "(fn [s] (->> s seq (filter #(Character/isUpperCase %)) clojure.string/join))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "605a876be4b000d535e6f53c"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60689984e4b069485764dde6"}, {"problem": 29, "code": "(fn [s]\n   (apply str (re-seq #\"[A-Z]+\" s)))", "user": "58468c4ee4b089d5ab817e95"}, {"problem": 29, "code": "(fn [a] (apply str (filter\n                     #(and (Character/isLetter %) (= (clojure.string/upper-case %) (str %))) a)))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "606c87aae4b069485764de0d"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "606d75f5e4b069485764de13"}, {"problem": 29, "code": "(fn [x] \r\n  (->>\r\n    x\r\n    (filter #(Character/isUpperCase %))\r\n    (apply str)))", "user": "606e0a42e4b069485764de19"}, {"problem": 29, "code": "(fn [st] (apply str (filter #(Character/isUpperCase %) st)))", "user": "606e0e95e4b069485764de1a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "606f005ae4b069485764de1b"}, {"problem": 29, "code": "(fn only-caps [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 29, "code": "(fn [s]\n   (reduce (fn [uppers c]\n             (if (Character/isUpperCase c)\n               (str uppers c)\n               uppers))\n           \"\"\n           s))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 29, "code": "(fn[x](apply str(filter #(re-find #\"[A-Z]\" (str %)) x)))", "user": "6045e761e4b02d28681c77bb"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq (re-pattern \"[A-Z]\") x )))", "user": "60630af9e4b069485764ddbc"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s\n  )))", "user": "6074f5ede4b069485764de52"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "606da089e4b069485764de15"}, {"problem": 29, "code": "(fn [input-str]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq input-str)))\n)", "user": "605b319de4b079a07f8593f7"}, {"problem": 29, "code": "(fn [input] (apply str (filter #(Character/isUpperCase %) (seq input))))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60743977e4b069485764de46"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6074e088e4b069485764de4d"}, {"problem": 29, "code": "(fn [st] (apply str (re-seq #\"[A-Z]+\" st)))", "user": "6074df6fe4b069485764de4b"}, {"problem": 29, "code": "#(apply str(filter (set (map char (range 65 91))) %))", "user": "606ff89be4b069485764de22"}, {"problem": 29, "code": "(fn [in]\n (apply str\n   (filter #(<= (int \\A) (int %) (int \\Z))\n           (into [] in))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 29, "code": "(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))  ;;;usamos una expresion regular siendo esta [A-Z] para poder identificarlos\n\n\n\n;;; re-seq ---> Returns a lazy sequence of successive matches of pattern in string,\n;;; using java.util.regex.Matcher.find(), each such match processed with\n;;; re-groups.", "user": "6075c214e4b069485764de5b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60764350e4b069485764de5e"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "606d7f1ce4b069485764de14"}, {"problem": 29, "code": "reduce (fn [sum x] (if (Character/isUpperCase x) (str sum x) sum)) \"\"", "user": "6076adb2e4b069485764de60"}, {"problem": 29, "code": "(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "607ad76ae4b0a637ed780370"}, {"problem": 29, "code": "#(loop [[fst & rst :as all] % res \"\"]\n    (if all\n      (if (Character/isUpperCase (.charAt (str fst) 0))\n        (recur rst (str res fst))\n        (recur rst res)\n        )res))", "user": "60759e51e4b069485764de5a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6070c7bae4b069485764de27"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60777335e4b0a637ed78034f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6074e1ade4b069485764de4e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "607b6452e4b0a637ed780375"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "607bd80be4b0a637ed780379"}, {"problem": 29, "code": "(fn [input] (clojure.string/replace input #\"[^A-Z]\" \"\"))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 29, "code": "(fn [arg]\n  (reduce str (filter #(Character/isUpperCase %) arg)))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 29, "code": "(fn [y] (clojure.string/join \"\" (filter (fn[x] (every? #(Character/isUpperCase %) x)) (clojure.string/split y #\"\"))))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 29, "code": "(fn [text]\n  (->> (filter #(not= % (Character/toLowerCase %)) text)\n       (apply str)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) coll)))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "60836285e4b0736b099e42e4"}, {"problem": 29, "code": "(fn get-caps [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))", "user": "608256d7e4b0736b099e42da"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 29, "code": "(fn [coll] (apply str (filterv #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) coll)))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6074e278e4b069485764de51"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 29, "code": "(fn get-uppers [the-string] \n  (apply str (filter #(Character/isUpperCase %)\n                     (seq the-string))))", "user": "60704214e4b069485764de24"}, {"problem": 29, "code": "#(apply str(\n           re-seq #\"[A-Z]+\" %))", "user": "6085edade4b0736b099e42fc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 29, "code": "#(apply str(filter (fn [x] (Character/isUpperCase x))%))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "57758671e4b0979f8965161f"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 29, "code": "(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 29, "code": "(fn [string]\n  (apply str\n         (filter #(Character/isUpperCase %) string)\n         )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 29, "code": "(fn [str-in] (reduce str (re-seq #\"[A-Z]\" str-in)))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 29, "code": "(fn GetTheCaps [string] \n  (reduce str (re-seq #\"[A-Z]\" string)))", "user": "607508f3e4b069485764de54"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 29, "code": "#(->>\n  (filter (fn [x] (and (Character/isLetter x)\n                       (= (clojure.string/upper-case x) (str x)))) %)\n  (apply str))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))", "user": "60890415e4b0ae75613dceec"}, {"problem": 29, "code": "#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #((complement nil?) (re-find #\"[A-Z]\" (str %))) s)))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter (fn [c] (re-seq #\"[A-Z]\" (str c))) s)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 29, "code": "(fn [s]\n  (reduce str\n          (filter (fn [c]\n                    (Character/isUpperCase c))\n                  s)))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]+\" %))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 29, "code": "(fn [param] (apply str (re-seq #\"[A-Z]+\" param)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 29, "code": "(fn [x] (apply str (filter  #(and (<= 65 (int %)) (> 91 (int %))) x)))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))", "user": "6086abade4b0736b099e42ff"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))", "user": "60901a6be4b03bd49d9f36c9"}, {"problem": 29, "code": "(fn [str]\n  (clojure.string/replace str #\"[^A-Z]\" \"\"))", "user": "6090a2b3e4b03bd49d9f36cc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 29, "code": "(fn ans-29 [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]+\" \"\")", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 29, "code": "(fn only-caps [x]\n  (apply str\n    (filter\n      #(not= (clojure.string/lower-case %) %)\n      (clojure.string/split x #\"\"))))", "user": "6091501de4b00e9e6653c3d3"}, {"problem": 29, "code": "(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))", "user": "608711b1e4b0736b099e4303"}, {"problem": 29, "code": "#( apply str (re-seq #\"[A-Z]+\" %))", "user": "5941f6e3e4b060784b3b7904"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) (vec x))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (map first (re-seq #\"([A-Z])\" s))))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %) x)))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]*\" %))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %1))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter (every-pred #(Character/isLetter %) #(Character/isUpperCase %)) s)))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 29, "code": "(fn [string]\n  (->> string\n       (filter #(Character/isUpperCase %))\n       (apply str)))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 29, "code": "(fn onlycaps [mystr]\n  (->> mystr\n       (re-seq #\"[A-Z]+\")\n       (apply str)\n       ))", "user": "6092c0a9e4b00e9e6653c3dc"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6086c44be4b0736b099e4301"}, {"problem": 29, "code": "(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 29, "code": "(fn [x] (apply str (filter #(Character/isUpperCase %)  x)))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 29, "code": "(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 29, "code": "(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))", "user": "609a4ac8e4b00e9e6653c40a"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6045abb4e4b02d28681c77b8"}, {"problem": 29, "code": "(fn [text] (apply str (filter (fn [x] (Character/isUpperCase x)) text)))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 29, "code": "(fn [col] (apply str (filter #(Character/isUpperCase %) col)))", "user": "609beb06e4b00e9e6653c412"}, {"problem": 29, "code": "(fn mx\n\t[s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 29, "code": "#(clojure.string/join (re-seq #\"[A-Z]\" %))", "user": "52435d0ce4b076204b44fab5"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 29, "code": "(fn [instr]\n  (reduce (fn [accstr inchar]\n            (if (Character/isUpperCase inchar)\n              (str accstr inchar)\n              accstr))\n          \"\"\n          instr))", "user": "60726211e4b069485764de36"}, {"problem": 29, "code": "(fn [s] (apply str (re-seq #\"[A-Z]\" s)))", "user": "60ade833e4b00e9e6653c494"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60a78f2ce4b00e9e6653c466"}, {"problem": 29, "code": "(fn capital [string]\n  (->> string\n       (filter #(and (< (int %) 97) (> (int %) 64)))\n       (reduce str)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 29, "code": "(fn [arg]                                    ; crap, but works\n  (apply str (flatten (map (fn [c]\n     (if (Character/isUpperCase ^char c) (.toString c) [])\n     )\n   arg))))", "user": "60a52517e4b00e9e6653c459"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 29, "code": "(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "60a7104be4b00e9e6653c465"}, {"problem": 29, "code": "#(->> % seq (filter (fn [item] (Character/isUpperCase item))) (apply str))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60a68a95e4b00e9e6653c461"}, {"problem": 29, "code": "(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 29, "code": "(fn cap [x]\n  (cond \n   (empty? x) x\n   (re-matches #\"[A-Z]\" (str (first x))) (apply str (cons (first x) (cap (rest x))))\n   :else (cap (rest x))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 29, "code": "#(apply str (filter (fn [cn]\n                      (< 64 (int cn) 91))\n                    %))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60b2f7a0e4b0e0fa5f1b422c"}, {"problem": 29, "code": "#(apply str (filter (fn [x] (Character/isUpperCase x)) %))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "57123c96e4b09c608db70454"}, {"problem": 29, "code": "(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 29, "code": "(comp (partial apply str)(partial filter #(Character/isUpperCase %)))", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 29, "code": "(fn [x] (let [y (map identity (clojure.string/upper-case x))\n               z (map identity x)]\n           (clojure.string/join \"\" \n                                (map (fn [a b] (if (and (= a b) (Character/isLetter a)) a)) y z))))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 29, "code": "(fn [s] (apply str (filter #(Character/isUpperCase %) s)))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 29, "code": "(fn [lst]\n  (clojure.string/join (filter #(Character/isUpperCase %1) (seq lst))))", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 29, "code": "(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %1))", "user": "60b8b9dae4b0e0fa5f1b425d"}, {"problem": 29, "code": "(fn [input] (clojure.string/join (filter #(= (list %) (seq (char-array (clojure.string/upper-case %)))) (filter #(Character/isLetter %) (seq input)))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 29, "code": "#(apply str (filter (set (map char (range 65 91))) %))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]*\" \"\")", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" (str %)) x)))", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 29, "code": "(comp\n    (partial apply str)\n    (partial re-seq #\"[A-Z]\"))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 29, "code": "#( apply str (filter (fn [x] (Character/isLetter x)) (filter  (fn [part] (= (clojure.string/capitalize part) (str part)))  (seq %))))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 29, "code": "(fn [s]\n   (apply str (filter #(re-matches #\"[A-Z]\" (str %))\n                (seq s))))", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60bca877e4b0e0fa5f1b4287"}, {"problem": 29, "code": "(fn upper-chars\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 29, "code": "(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 29, "code": "(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 29, "code": "(fn ups[string]\n  (apply str\n         (re-seq #\"[A-Z]\" string)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 29, "code": "(fn [coll] (clojure.string/join (seq (apply str (re-seq #\"[A-Z]\" coll)))))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 29, "code": "(fn [x] (apply str (re-seq #\"[A-Z]\" x)))", "user": "60c3f665e4b0e0fa5f1b42c8"}, {"problem": 29, "code": "(fn caps [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 29, "code": "(fn [^String s]\n  (apply str (filter #(. Character isUpperCase %) s))\n  )", "user": "60cc2d58e4b0e0fa5f1b4323"}, {"problem": 29, "code": "#(apply str (re-seq #\"\\p{Upper}\" %1))", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 29, "code": "(fn\n  [string-val]\n  (str (clojure.string/join (filter #(Character/isUpperCase %1) string-val))))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 29, "code": "(fn [word]\n  (reduce (fn [acc x]\n            (if (Character/isUpperCase x)\n              (str acc x)\n              (str acc \"\")))\n          \"\"\n          word))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 29, "code": "(fn caps-filter-2\n      [word]\n      (apply str (re-seq #\"[A-Z]+\" word)))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 29, "code": "(fn get-caps [s] (let [char-map {\"A\" 65, \"C\" 67, \"B\" 66, \"E\" 69, \"D\" 68, \"G\" 71, \"F\" 70, \"I\" 73, \"H\" 72, \"K\" 75, \"J\" 74, \"M\" 77, \"L\" 76, \"O\" 79, \"N\" 78, \"Q\" 81, \"P\" 80, \"S\" 83, \"R\" 82, \"U\" 85, \"T\" 84, \"W\" 87, \"V\" 86, \"Y\" 89, \"X\" 88, \"Z\" 90}]\n                    (reduce str \"\" (map (fn [c] (if (not= (char-map (str c)) nil) c \"\")) s))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 29, "code": "(fn [s] (apply str (filter (fn [c] (apply <= (map int [\\A c \\Z]))) s)))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]\" %))", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 29, "code": "#(reduce str (re-seq #\"[A-Z]+\" %))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 29, "code": "#(clojure.string/replace % #\"[^A-Z]\" \"\")", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 29, "code": "#(apply str (re-seq #\"[A-Z]+\" %))", "user": "5d69a6e1e4b0db5d338d160e"}]