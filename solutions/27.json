[{"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dd62278535d2dad7130b5c7"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [l] (= (seq l) (reverse (seq l))))", "problem": 27, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "#(=(vec%)(reverse%))", "problem": 27, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(= (reduce (fn [acc elm] (cons elm acc)) '() %) (seq %))", "problem": 27, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(> (count %) (count (set %)))", "problem": 27, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "4dd865e1535d2dad7130b5d7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn pali\r\n  ([x]\r\n  (if (< (count x) 2)\r\n    false\r\n    (pali (rest x) (first x) (rest x))\r\n  ))\r\n  ([x y z]\r\n    (if (= (count x) 0) (pali z)\r\n    (if (= (first x) y) true (pali (rest x) y z)))\r\n  )\r\n )", "problem": 27, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn palindrome [x]\r\n  \t\t\t(let [seq (partition 2 (interleave x (reverse x)))]\r\n\t\t\t\t\t\t (every? true? (map (fn [[index data]] (= index data)) seq))))", "problem": 27, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [x]\r\n    (= (seq x) (reverse x)))", "problem": 27, "user": "4dd67f10535d2dad7130b5c9"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [set]\r\n  (if (empty? set)\r\n    true\r\n    (if (= (first set) (last set))\r\n      (recur (rest (butlast set)))\r\n      false\r\n    )\r\n  )\r\n)", "problem": 27, "user": "4dd6fa3a535d2dad7130b5ce"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db4c93f535dc0f10411755c"}, {"code": "(fn [lst]\r\n    (not (= (count (seq lst))\r\n       (count (set (seq  lst))))))", "problem": 27, "user": "4ddc620d535d02782fcbea06"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ddcabcb535d6ebe9be03f52"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [x]\r\n  (let [l (count x)]\r\n\t     (cond\r\n\t       (or (= l 1) (= l 0)) true\r\n\t       (= (first x) (last x)) (recur (drop-last (drop 1 x)))\r\n\t       :else false)))", "problem": 27, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn palin [x] \r\n  (and \r\n    (= (first x) (last x))\r\n    (if (> 2 (count x))\r\n      true\r\n      (palin (next (butlast x)))\r\n    )\r\n  )\r\n)", "problem": 27, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "(fn [input] (= (sequence input) (reverse input)))", "problem": 27, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "#(= (seq %) (reverse%))", "problem": 27, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [coll]\r\n  (loop [s coll]\r\n    (if (= (first s) (last s))\r\n      (if (or (= (count s) 1) (= (count s) 0))\r\n        true\r\n        (recur (rest (take (- (count s) 1) s))))\r\n      false)))", "problem": 27, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [pal]\r\n  (if (= (seq pal) (reverse (seq pal))) true false))", "problem": 27, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn[x]\r\n  (loop[s x]\r\n    (if (empty? s)\r\n      true\r\n      (if (== (count s) 1)\r\n        true\r\n      (if (= (first s) (last s))\r\n        (recur (nthnext (rest s) (- (count s) 1)))\r\n        false)))))", "problem": 27, "user": "4de08793535d08e6dec9fde2"}, {"code": "(fn [xs] (= (reverse xs) (list* xs)))", "problem": 27, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "(fn [lst]\r\n  (loop [lst1 lst lst2 (reverse lst)]\r\n    (cond (and (empty? lst1) (empty? lst2))\r\n          true\r\n          (= (first lst1) (first lst2))\r\n          (recur (rest lst1) (rest lst2))\r\n          true\r\n           false)))", "problem": 27, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [x] (apply = ((juxt reverse (comp seq identity)) x)))", "problem": 27, "user": "4daef21cedd6309eace4d169"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4de6c970535d08e6dec9fdf6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "#(let [s % m (/ (count s) 2)] (= (drop-last m s) (reverse (drop m s))))", "problem": 27, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn palindrome? [lat]\r\n  (if\r\n    (string? lat) (= lat (apply str (reverse lat)))\r\n    (= lat (reverse lat))))", "problem": 27, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [x] (if(string? x)\r\n  (= x (apply str(reverse x)))\r\n  (= x (reverse x))))", "problem": 27, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn f [l]\r\n    (letfn [(nthfromend [l n]\r\n              (nth l (- (- (count l) 1) n)))\r\n            (foo [l n]\r\n                  (if (= n -1)\r\n                      true\r\n                      (and (= (nth l n) (nthfromend l n))\r\n                            (foo l (- n 1)))))]\r\n            (foo l (- (count l) 1))))", "problem": 27, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4df1e213535d08e6dec9fe20"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn palindrome? [s]\r\n   (or (<= (count s) 1)\r\n       (and (= (first s) (last s))\r\n            (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [se]\r\n  (loop [s se, bool true]\r\n    (if (<= (count s) 1)\r\n      bool\r\n      (recur (rest (drop-last s)) (and (= (first s) (last s)))))))", "problem": 27, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x]\r\n  (if (string? x)\r\n(= x (apply str (reverse x)))\r\n  (= x (reverse x))))", "problem": 27, "user": "4df30f76535d08e6dec9fe28"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4dbb6302535d1e037afb21b5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "#(= (list* %) (reverse %))", "problem": 27, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn ([arr]\r\n                                                                             \r\n              \r\n                           (= (loop[i 0 strtemp \"\"]\r\n                                        (if (>= i (count arr))\r\n                                          strtemp\r\n                                          (recur (+ i 1) (str strtemp (nth arr i)))\r\n                                          )\r\n                                        )  (loop[ j (- (count arr) 1) str2temp \"\"]\r\n                                        (if (< j 0)\r\n                                          str2temp\r\n                                          (recur (- j 1) (str str2temp (nth arr j)))\r\n                            ))  )  \r\n                           ))", "problem": 27, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4df7278a535d04ed9115e774"}, {"code": "(fn [x] (#(= % (reverse %)) (seq x)))", "problem": 27, "user": "4df7cb14535d04ed9115e776"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dfceeb9535d04ed9115e77e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dfe5a93535d04ed9115e786"}, {"code": "(fn [pal]\r\n  (= (seq pal) (reverse pal)))", "problem": 27, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [elems] (if (= elems \"racecar\") true (= elems (reverse elems))))", "problem": 27, "user": "4e03b010535d04ed9115e794"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %))  %)", "problem": 27, "user": "4e059278535d04ed9115e7a5"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4e049a06535d04ed9115e7a0"}, {"code": "(fn palindrome? [coll]\r\n     (= (reverse coll) (seq coll)))", "problem": 27, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dbe5975535d020aff1edf5d"}, {"code": "#(let [s (seq %)]\r\n  (= s (reverse s)))", "problem": 27, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "(fn palindrome?[s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4e080562535d04ed9115e7aa"}, {"code": "(fn [s]\r\n\t\t (if (seq s)\r\n\t\t\t(if (= (first s) (last s))\r\n\t\t\t  (recur (butlast (rest s)))\r\n\t\t\t  false)\r\n\t\t\ttrue))", "problem": 27, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [something]\r\n  (let [rev (reverse something)\r\n        rev2 (if (string? something)\r\n                (apply str rev)\r\n                rev)]\r\n  (= something rev2)))", "problem": 27, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn ([coll]\r\n(loop [coll coll n 0]\r\n  (if (< n (/ (count coll) 2)) \r\n    (if (= (nth coll n)(nth (reverse coll) n))\r\n      (recur coll ( + n 1))\r\n      false\r\n      )\r\n    true\r\n    ))))", "problem": 27, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e09125f535d04ed9115e7ad"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e0e0529535d04ed9115e7b9"}, {"code": ";short but inefficient:\r\n;#(= (seq %) (reverse %))\r\n\r\n#(let [len (quot (count %) 2)\r\n       [start end] (split-at len %)]\r\n   (reduce (fn [a b] (and a b))\r\n      (map = start (reverse end))))", "problem": 27, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn [seq]\r\n  (loop [col seq, result true]\r\n    (if (not result)\r\n        false\r\n        (if (or (empty? col) (= 1 (count col)))\r\n            true\r\n            (recur (drop-last(drop 1 col)) (= (first col) (last col)))))))", "problem": 27, "user": "4e10a8e4535d04ed9115e7c2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e111538535d04ed9115e7c3"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn is-palindrome [xs]\r\n  (= (take (/ (count xs) 2) xs) (take (/ (count xs) 2) (reverse xs))))", "problem": 27, "user": "4e123905535d04ed9115e7ce"}, {"code": "#(if (or (empty? %) (= 1 (count %))) true (if (= (first %) (last % ))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(recur (rest (butlast %))) false ))", "problem": 27, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [coll]\r\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e131e61535d04ed9115e7d5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e131d5b535d04ed9115e7d4"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e043d85535d04ed9115e79e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e14090d535d04ed9115e7dc"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn palindrome [coll] (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4e15c301535d04ed9115e7e5"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e14b925535d04ed9115e7df"}, {"code": "#(= (reverse %)  (seq %))", "problem": 27, "user": "4e1582f0535d04ed9115e7e4"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4e062ea8535d04ed9115e7a7"}, {"code": "#(let [n (quot (count %) 2)]\n  (= (take n %) (take n (reverse %))))", "problem": 27, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn palindrom? [coll]\r\n  (let [f (first coll) l (last coll)]\r\n    (if (>= 1 (count coll))\r\n      true\r\n      (if (not= f l)\r\n        false\r\n        (recur (drop-last (drop 1 coll)))))))", "problem": 27, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [coll]\r\n  (let [c (seq coll)\r\n        revd-c (reverse c)]\r\n   (= c revd-c)))", "problem": 27, "user": "4e18ed7a535d04ed9115e7f6"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e18c553535d04ed9115e7f4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e1772b1535d04ed9115e7ee"}, {"code": "(fn pal [lt]\r\n    (empty? (filter #(= false %) (map #(= %1 %2) lt (reverse lt)))))", "problem": 27, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [l]\r\n  (loop [ h l t (reverse l)]\r\n    (if (and (= t '())\r\n              (= t '()))\r\n        true\r\n        (if (not (= (first h) (first t)))\r\n            false\r\n            (recur (rest h) (rest t))))))", "problem": 27, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [seeq]\r\n  (loop [curr-seeq (seq seeq)]\r\n    (cond (empty? curr-seeq) true\r\n          (= (first curr-seeq) (last curr-seeq))\r\n            (recur (next (butlast curr-seeq)))\r\n          :else false)))", "problem": 27, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [x]\r\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(= %1 (if (string? %1)\r\n          (apply str (reverse %1))\r\n          (reverse %1)))", "problem": 27, "user": "4dc25124535d020aff1edf94"}, {"code": "#(if (string? %)\r\n    (= % (apply str (reverse %)))\r\n    (= % (reverse %)))", "problem": 27, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4e21c139535d04ed9115e819"}, {"code": "#(= (apply str %)\r\n    (apply str (reverse %)))", "problem": 27, "user": "4dbde951535d020aff1edf53"}, {"code": "#(let [n (/ (count %) 2)] (= (take n %) (reverse (take-last n %))))", "problem": 27, "user": "4e1350af535d04ed9115e7d8"}, {"code": "#(loop [c %] (if (< (count c) 2) true (if (not= (first c) (last c)) false (recur (drop-last (rest c))))))", "problem": 27, "user": "4e21d76a535d04ed9115e81a"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [sek] (= (reverse sek) (seq sek)))", "problem": 27, "user": "4e218470535d04ed9115e817"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e2110c7535d04ed9115e813"}, {"code": "(fn pal [a] (= (seq a) (reverse (seq a))))", "problem": 27, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e246abe535d04ed9115e827"}, {"code": "(fn [lst]\n  (= (seq lst) (reverse lst)))", "problem": 27, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn pal? [seq]\r\n  (if (or (empty? seq) (empty? (rest seq)))\r\n    true\r\n    (and (.equals (first seq) (last seq))\r\n      (pal? (rest (butlast seq))))))", "problem": 27, "user": "4e234588535d04ed9115e821"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e232f34535d04ed9115e81f"}, {"code": "#(let [x %] (if (= (reverse x) (reverse (reverse x))) true false))", "problem": 27, "user": "4e25bd69535d04ed9115e82c"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e2608d6535deb9a81d77ef1"}, {"code": "(fn [ss]\n  (let [s (seq ss)]\n    (= (reverse s) s)))", "problem": 27, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn [x]\n  (every? (fn [[a b]] (= a b))\n    (partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "4dc0ac2c535d020aff1edf7f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn pal [s] (= (reverse (reverse s)) (reverse s)))", "problem": 27, "user": "4e28ddd1535deb9a81d77efd"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x)))\n)", "problem": 27, "user": "4e283bae535deb9a81d77efb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e25a0da535d04ed9115e82a"}, {"code": "#(= (if (string? %) \r\n         (apply str (reverse %))\r\n\t       (reverse %)) %)", "problem": 27, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [x](= (reverse x) (seq x)))", "problem": 27, "user": "4e2ab05e535deb9a81d77f01"}, {"code": "(fn [s] (= (seq s) (seq (reverse s))))", "problem": 27, "user": "4e1f60a6535d04ed9115e80b"}, {"code": "(fn [xs]\n  (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "4db653f6535d1e037afb217c"}, {"code": "(fn palin? [s] (if (empty? s) true (and (= (last s) (first s)) (palin? (rest (take (dec (count s)) s))))))", "problem": 27, "user": "4e2d562c535deb9a81d77f07"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn [l]\n  (cond (empty? l) true\n        (= (first l) (last l)) (recur (rest (butlast l)))\n        :else false))", "problem": 27, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn hoge [x]\n  (if (= (reverse (seq x)) (seq x)) true false))", "problem": 27, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn palindrome [seq]\n  (let [firstItem (first seq)\n        lastItem (last seq)]\n    (cond \n      (not= firstItem lastItem) false\n      (= 0 (count seq)) true\n      :else (palindrome (rest (butlast seq))))))", "problem": 27, "user": "4e2f9e71535deb9a81d77f11"}, {"code": ";#(> 0.7 (rand) #_ %)\n#(= (into () %) (into [] %))", "problem": 27, "user": "4e307313535deb9a81d77f14"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [v] (if (= (seq v) (reverse v)) true false))", "problem": 27, "user": "4e31c695535deb9a81d77f20"}, {"code": "(fn [x]\n  (let [y (reverse x)]\n    (every? identity \n      (map #(= (nth x %) (nth y %))\n        (range (count y))))))", "problem": 27, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4e342671535deb9a81d77f29"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e326f34535deb9a81d77f21"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e358316535deb9a81d77f2f"}, {"code": "(fn palin? [e] (= e\n  (if (string? e) (clojure.string/join (reverse e))\n    (reverse e))))", "problem": 27, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn palin [x]\n  (if (= (rest x) '())\n    true\n    \n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n\n      false\n    )\n  )\n)", "problem": 27, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4e36038f535deb9a81d77f31"}, {"code": "(fn [coll]\n  (let [s (lazy-seq coll)]\n    (= s (reverse s))))", "problem": 27, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn palindrome [x]\r\n    \"Detect if the sequence is a palindrome\"\r\n\t  (if (empty? x)\r\n\t      true\r\n\t      (and (= (first x) (last x)) (palindrome (butlast (rest x))))))", "problem": 27, "user": "4e370a04535deb9a81d77f37"}, {"code": "#(= (seq %) (reverse %)\n\n  )", "problem": 27, "user": "4df11fb2535d08e6dec9fe1a"}, {"code": "(fn [x]\n    ((fn comp_seq[a b]\n      ( if (empty? a) \n         true\n         ( if (= (first a) (first b))\n            (comp_seq (rest a) (rest b) )\n            false\n         )\n      )\n     \n    )\n    x (reverse x))\n)", "problem": 27, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [x] (if (= (vec x) (reverse (vec x))) true false))", "problem": 27, "user": "4e3000c8535deb9a81d77f13"}, {"code": "#(= (vec %) (vec(reverse %)))", "problem": 27, "user": "4e399009535deb9a81d77f3f"}, {"code": "(fn\n  ([s]\n    (let [i (count s)]\n      (cond \n        (= i 0) true\n        (= i 1) true\n        :else\n        (if (= (first s) (last s))\n          ;True\n          (recur (rest (drop-last s)))\n          ;False\n          false)))))", "problem": 27, "user": "4e30da02535deb9a81d77f17"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e3996b0535deb9a81d77f41"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= (reverse s) s)))", "problem": 27, "user": "4e39fb68535deb9a81d77f47"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "4e3a5a67535deb9a81d77f49"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e39c710535deb9a81d77f45"}, {"code": "(fn chk [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4e351b47535deb9a81d77f2b"}, {"code": "(fn [s] (=\n  ((fn [s]\n    (if (string? s)\n        (apply str (reverse s))\n        (reverse s)))\n    s)\n  s)\n)", "problem": 27, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [x] (let [a (seq x)] (= (reverse a ) a)))", "problem": 27, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "#(and(not=(last%1):c)(not=(last%1)5))", "problem": 27, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn [x]\n  (cond\n    (= (seq x) (reduce conj () x)) true\n    :else false))", "problem": 27, "user": "4e13c44a535d04ed9115e7db"}, {"code": "(fn is-palindrome [the-seq]\n  (= \n    (reverse the-seq)\n    (seq the-seq)\n  )\n)", "problem": 27, "user": "4e3df106535deb9a81d77f58"}, {"code": "(fn[n](= (reverse n) (vec n)))", "problem": 27, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e3f595d535dc968683fc498"}, {"code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "problem": 27, "user": "4e40529b535dc968683fc49a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn [thing] (= (seq thing) (reverse thing)))", "problem": 27, "user": "4e42f930535dc968683fc49f"}, {"code": "#(= (into '() %) (seq %))", "problem": 27, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(if (string? %)\n     (= (seq %) (reverse (seq %)))\n     (= % (reverse %)))", "problem": 27, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn palindromo? [s]\n  (or (<= (count s) 1)\n      (and (= (first s) (last s))\n           (palindromo? (rest (butlast s))))))", "problem": 27, "user": "4db51ce0535d87e67b28fe06"}, {"code": "#(= (reduce str (reverse %1)) (reduce str %1))", "problem": 27, "user": "4e46cf17535dc968683fc4b6"}, {"code": "#(if (string? %) (= % (apply str (reverse %)))\n      (= % (reverse %)))", "problem": 27, "user": "4e4482b3535dc968683fc4ab"}, {"code": "#(= (reverse (into () %)) (into () %))", "problem": 27, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(loop [lst %] \n  (if (< (count lst) 1)\n    true\n    (if (not= (first lst) (last lst))\n      false\n      (recur (rest (butlast lst))))))", "problem": 27, "user": "4e4870d1535dc968683fc4bc"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e410033535dc968683fc49c"}, {"code": "(fn palindrome [arg]\n  (= (reverse arg) (seq arg)))", "problem": 27, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn palin [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4e49fc29535dc968683fc4cb"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [x] \n  (let [y (reverse x)]\n  (loop [u x, v y]\n    (cond (= u ()) true\n          (not (= (first u) (first v))) false\n          :else (recur (rest u) (rest v))))))", "problem": 27, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn rev [xs]\n  (= \n    (seq xs)\n    (reverse xs)))", "problem": 27, "user": "4e4c238f535dc968683fc4dc"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [coll] (if (string? coll) \n              (= coll (apply str (reverse coll)))\n            (= coll (reverse coll))))", "problem": 27, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4e4c1e8c535dc968683fc4db"}, {"code": "(fn [o]\n  (if (string? o)\n    (= o (apply str (reverse o)))\n    (= o (reverse o))))", "problem": 27, "user": "4e43c91f535dc968683fc4a5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e4b8b67535dc968683fc4d5"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e040c42535d04ed9115e79d"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [xs] \n  (if (empty? xs)\n    true\n    (and \n      (= (first xs) (last xs))\n      (recur (rest (take (dec (count xs)) xs))))))", "problem": 27, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [s] (let [s (seq s)] (= s (reverse s))))", "problem": 27, "user": "4e50b67b535dc968683fc4ed"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [xs] (= (vec xs) (reverse (vec xs))))", "problem": 27, "user": "4e51c67a535d302ef430da6a"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e503aea535dc968683fc4ea"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [x] (every? identity (map = x (reverse x))))", "problem": 27, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "problem": 27, "user": "4e5206ec535d302ef430da6c"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4e521d7a535d302ef430da6e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e526f4c535d302ef430da75"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [x]\n  ((fn pal? [coll i]\n    (and\n      (= (nth coll i) (nth coll (- (count coll) (+ i 1))))\n      (if (= i (int (/ (count coll) 2)))\n        true\n        (pal? coll (inc i))))) x 0))", "problem": 27, "user": "4e50fb2c535dc968683fc4f1"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "4e52654b535d302ef430da73"}, {"code": "(fn palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (recur (rest (butlast s))))))", "problem": 27, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [x]\n  (let [rev (into '() (seq x))]\n    (loop [org x rorg rev]\n      (if (empty? org)\n        true\n        (if (= (first org) (first rorg))\n          (recur (rest org) (rest rorg))\n          false)))))", "problem": 27, "user": "4e52777f535d302ef430da76"}, {"code": "#(let [a (seq %) b (reverse a)]\n  (= a b))", "problem": 27, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn palindrome \n  ([n]\n    (if (= (count n) 1) true\n      (if (= (count n) 0) true \n  (if (= (first n) (last n)) (recur (butlast (rest n)))\n      false )))))", "problem": 27, "user": "4e51fccf535d302ef430da6b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e584cf2535d8a8b8723a28f"}, {"code": "#(= (take (int (/ (count %) 2)) %) (reverse (take-last (int (/ (count %) 2)) %)))", "problem": 27, "user": "4e5867d1535d8a8b8723a291"}, {"code": "#(let [orig (seq %), rev (reverse orig)] (= orig rev))", "problem": 27, "user": "4e584256535d8a8b8723a28e"}, {"code": "(fn[a-seq]\n  (every? (fn[[a b]] (= a b)) ((fn[ss] (zipmap ss (reverse ss))) a-seq)))", "problem": 27, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [x]\n  (let [a (reverse x)\n        b (reverse a)] (= a b)))", "problem": 27, "user": "4e4b911f535dc968683fc4d6"}, {"code": "#(reduce (fn [a b] (and a b)) true (map = % (reverse %)))", "problem": 27, "user": "4e58dd23535d8a8b8723a298"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e588e84535d8a8b8723a294"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e58ef07535d8a8b8723a299"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e593dac535d8a8b8723a29c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "#(if (string? %) \n  (= % (apply str (reverse %)))\n  (= % (reverse %)))", "problem": 27, "user": "4e570f47535d8a8b8723a287"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5a66d3535d8a8b8723a2ad"}, {"code": "(fn palindrome? [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(every? identity (map = (seq %) (reverse %)))", "problem": 27, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dcc3281535d5973398f9291"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [elems]\n  (let [pd (fn [s]\n            (cond\n              (= (count s) 1) true\n              (= (count s) 2) (= (first s) (second s))\n              true\n              (and (= (first s) (last s))\n                   (recur (subvec s 1 (dec (count s)))))))]\n    (pd (vec elems))))", "problem": 27, "user": "4e5c3612535d8a8b8723a2be"}, {"code": "#(if (string? %) (= % (apply str (reverse %)))\n  (= % (reverse %)))", "problem": 27, "user": "4e5c4cc6535d8a8b8723a2bf"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn is-palindrome [s]\n    (= (seq s) (reverse s)))", "problem": 27, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [n] (= (seq n) (reverse (seq n))))", "problem": 27, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [x] \n    (or (<= (count x) 1)\n        (and (= (first x) (last x))\n              (recur (rest (butlast x))))))", "problem": 27, "user": "4e580746535d8a8b8723a28c"}, {"code": "#(= (reverse %)\n    (seq %))", "problem": 27, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e5cddd6535d8a8b8723a2c5"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [s]\n  \"27. Write a function which returns true if the given sequence is a palindrome.\"\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "; #(= (seq %) (into () (seq %)))\n#(= (seq %) (reverse %))", "problem": 27, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [x] ((fn z [l c] (if (= (nth l c) (nth l (- (count l) c 1))) \n              (if (>= c (- (count l) c)) true (z l (+ c 1)))\n            false)) x 0))", "problem": 27, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4e5f5e14535d8ccf87e9fe47"}, {"code": "#(=(seq %)(reverse %))", "problem": 27, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn [sequence]\n  (loop [s sequence]\n    (or\n      (<= (count s) 1)\n    (if (not= (last s) (first s))\n      false\n      (recur (butlast (rest s)))))))", "problem": 27, "user": "4e570b60535d8a8b8723a286"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [x] \n         (= \n           (take (/ 2 (count x)) x) \n           (take (/ 2 (count x)) (reverse x))))", "problem": 27, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4e44358f535dc968683fc4a8"}, {"code": "(comp #(= % (rseq %)) vec)", "problem": 27, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(let [a (into [] %)] (= (rseq a) a))", "problem": 27, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "#(= % (if (string? %)\n                    (apply str(reverse %))\n                    (reverse %)\n                    ))", "problem": 27, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "(fn palindrome?                                                                                                                                             \n  [coll]                                                                                                                                                      \n  (if (even? (count coll))                                                                                                                                    \n    (= (take (/ (count coll) 2) coll) (reverse (drop (/ (count coll) 2) coll)))                                                                               \n    (palindrome? (concat (take (/ (count coll) 2) coll) (drop (/ (dec (count coll)) 2) coll)))))", "problem": 27, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn [seq]\n  (let [half-size (quot (count seq) 2)\n        head (take half-size seq)\n        arse (take half-size (reverse seq))]\n    (= head arse)))", "problem": 27, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn ispalindrome?[seq] \n   (if (empty? seq) true\n   (if \n     (= (first seq) (last seq))\n        (ispalindrome? (reverse (rest (reverse (rest seq)))))\n        false\n   )))", "problem": 27, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "4e657c05535d8ccf87e9fe72"}, {"code": "(fn [ls] (if(string? ls)\n  (= ls (apply str (reverse ls)))\n  (= ls (reverse ls))))", "problem": 27, "user": "4e5c538c535d8a8b8723a2c0"}, {"code": "#(loop [f   0\r\n       l   (dec (count %1))\r\n       isP (= (nth %1 f) (nth %1 l))]\r\n  (if (or (= f l)\r\n          (= (inc f) l)\r\n          (false? isP))\r\n    isP\r\n    (recur\r\n      (inc f)\r\n      (dec l)\r\n      (= (nth %1 f) (nth %1 l)))))", "problem": 27, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [xs]\n  (let [r (if (string? xs) \n            (apply str (reverse xs))\n            (reverse xs))]\n    (= xs r)))", "problem": 27, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "#(=(reverse %)(seq %))", "problem": 27, "user": "4e39b020535deb9a81d77f44"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn f [lst]\n  (or (< (count lst) 2)\n      (and (= (first lst) (last lst))\n           (f (rest (butlast lst))))))", "problem": 27, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn palindrome? [str]\r\n        (letfn [ (rec [str-a str-b]\r\n                      (if (= (first str-a) nil)\r\n                          true\r\n                          (if (= (first str-a) (first str-b))\r\n                              (rec (rest str-a) (rest str-b))\r\n                              false))) ]\r\n            (rec str (reverse str))))", "problem": 27, "user": "4e68fe94535d8ccf87e9fe94"}, {"code": "(fn [coll]\n  (or (empty? coll)\n\t    (and (= (first coll) (last coll))\n\t\t (recur (rest (butlast coll))))))", "problem": 27, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "#(if (string? %)\r\n             (= % (apply str (reverse %)))\r\n             (= % (reverse %)))", "problem": 27, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [in] (= (seq in) (reverse in)))", "problem": 27, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [c] (= (seq c) (reverse c)))", "problem": 27, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "#(or (= % (reverse %)) (string? %))", "problem": 27, "user": "4e6a5168535d8ccf87e9fec6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a33fc535d8ccf87e9feac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn palindrome? [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4e6a2503535d8ccf87e9fea2"}, {"code": "(fn [x]\n  (every? #(true? %) (map #(= %1 %2) x (reverse x))))", "problem": 27, "user": "4defdf31535d08e6dec9fe14"}, {"code": "(fn panendrome? [xs]\n    (if (or (empty? xs) (= (count xs) 1))\n        true\n        (if (= (first xs) (last xs))\n            (recur (rest (butlast xs)))\n            false)))", "problem": 27, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4e55958a535d8a8b8723a27e"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [coll] (= (vec coll) (rseq (vec coll))))", "problem": 27, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "problem": 27, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [in] (let [s (seq in), rev (reverse s)] (= s rev)))", "problem": 27, "user": "4daec4a0edd6309eace4d15e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6ad36f535d8ccf87e9ff07"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e6a7fa0535d8ccf87e9feed"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [in] (= in\n  ((fn [in]\n    (let [reversed (reverse in)]\n      (if (string? in) (apply str reversed) reversed))) in)\n  ))", "problem": 27, "user": "4e6a4ab9535d8ccf87e9fec2"}, {"code": "(fn palindrome? [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4e2f377a535deb9a81d77f10"}, {"code": "#(loop [s %]\n  (cond (nil? s) true\n(not= (first s) (last s)) false\ntrue (recur (next (drop-last s)))))", "problem": 27, "user": "4e6cf61a535de274dd8d818c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [a-seq] (= (seq a-seq) (reverse a-seq)))", "problem": 27, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [s] (every? identity (map = s (reverse s))))", "problem": 27, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn palin [s]\n    (if (= 1 (count s))\n        true\n        (if (and (= 2 (count s))\n                 (= (first s) (last s)))\n            true\n            (if (= (first s) (last s))\n                (palin (reverse (rest (reverse (rest s)))))\n                false))))", "problem": 27, "user": "4e6a6af5535d8ccf87e9fedf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6b91e4535d8ccf87e9ff1a"}, {"code": "(fn [x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "4e6def42535d5021c1a895f7"}, {"code": "#(= (seq %) (rseq (vec %)))", "problem": 27, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn pal [L]\n  (let [v (vec L)]\n\t     (loop [i 0 j (dec (count v))]\n\t\t(cond\n\t\t  (>= i j) true\n\t\t  (not (= (nth v i) (nth v j))) false\n\t\t  :else (recur (inc i) (dec j))))))", "problem": 27, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [junk]\n  (let [rev \n    (if (string? junk)\n      (apply str (reverse junk))\n      (reverse junk))]\n    (= junk rev)))", "problem": 27, "user": "4e6e4127535d5021c1a89605"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn pal [x] (cond\n        (= (count x) 1) true\n        (> (count x) 1)  (if (= (last x) (first x))\n                          (and true (pal(-> x rest reverse rest reverse)))\n                          false )\n         :else true) )", "problem": 27, "user": "4e6cf521535de274dd8d818b"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [coll]\n    (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "(fn [x]\n  (let [seq (seq x)]\n    (= seq (reverse seq))\n   )\n  )", "problem": 27, "user": "4e6daa22535d5021c1a895ef"}, {"code": "(fn palindrome-checker [sq]\n      (= (apply str sq) (apply str (reverse sq))))", "problem": 27, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "#(let [c (seq %)\n       r  (reverse c)]\n  (= r c))", "problem": 27, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [xs]\n  ((fn eq [xs ys]\n    (if (or (empty? xs) (empty? ys))\n      (and (empty? xs) (empty? ys))\n      (and (= (first xs) (first ys))\n          (eq (rest xs) (rest ys)))))\n      xs (reverse xs)))", "problem": 27, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e4aaf49535dc968683fc4ce"}, {"code": "#(let [k (int (/ (count %) 2))]\n           (if (odd? (count %))\n             (if (= (take k %) (into () (nthnext % (+ k 1)))) true false)\n             (if (= (take k %) (into () (nthnext % k))) true false)))", "problem": 27, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn pal? [s] (if (or (empty? s) (= 1 (count s))) true (and (= (first s) (last s)) (pal? (butlast (rest s))))))", "problem": 27, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [lst]\n  (if (<= (count lst) 1)\n    true\n    (do\n      (if (not (= (last lst) (first lst))) false\n      (recur (rest (reverse (rest lst))))))))", "problem": 27, "user": "4e68323a535d8ccf87e9fe86"}, {"code": "(fn fbpalindrome [coll]\n (if (false? (= (first coll) (last coll)))\n  false\n  (if (next (drop-last coll))\n  true\n  (recur (next (drop-last coll))))))", "problem": 27, "user": "4e70c0b1535d5021c1a89640"}, {"code": "#(loop [s (seq %), lp 0, rp (- (count (seq %)) 1) ]\n      (if (<= (- rp lp) 1)\n        true\n        (if (= (nth s lp) (nth s rp))\n          (recur s (+ lp 1) (- rp 1))\n          false)))", "problem": 27, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e704293535d5021c1a89634"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e3a2761535deb9a81d77f48"}, {"code": "(fn palindrome? [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e6fee9e535d5021c1a8962a"}, {"code": "(fn [p] (= (reverse p) (reverse (reverse p))))", "problem": 27, "user": "4e6eff83535d5021c1a89615"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [string] (if (= (reverse string) (reverse (reverse string))) \n    true \n    false))", "problem": 27, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e7115b3535d5021c1a89647"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e44510b535dc968683fc4aa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e71e7b7535d5021c1a89654"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4daf907aedd6309eace4d17b"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4e678231535d8ccf87e9fe7e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6fa38b535d5021c1a89622"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4e71da4d535d5021c1a89653"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [sq] (reduce (fn [x y] (and x y)) (map #(= (first %) (second%)) (map vector sq (reverse sq)))))", "problem": 27, "user": "4e725d20535d5021c1a8965e"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e6a521c535d8ccf87e9fec8"}, {"code": "(fn palindrome? [l]\n;  (= (reverse (reverse l)) (reverse l))\n  (every?\n   (fn [n] (= (nth l n) (nth l (- (- (count l) 1) n))))\n   (reverse (range 0 (int (/ (count l) 2))))\n  )\n)", "problem": 27, "user": "4e720985535d5021c1a89655"}, {"code": "(fn p? [x] (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn [seq]\n(if (<= (count seq) 1)\ntrue\n             (if (not (=  (first seq) (last seq)))\n               false\n               (recur (drop-last (rest seq))))))", "problem": 27, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(or (<= (count %) 1)\n    (and (= (first %) (last %))\n      (recur (rest (butlast %)))))", "problem": 27, "user": "4e72a717535d5021c1a89665"}, {"code": "#(reduce = (map (partial partition-by nil?) [% (reverse %)]))", "problem": 27, "user": "4e739e13535dff18050a9c76"}, {"code": "#(= (seq %) (reverse%))", "problem": 27, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "#(=  (vec %) (reverse (vec %)))", "problem": 27, "user": "4e6e7018535d5021c1a8960b"}, {"code": "(fn palin [s]\n                  (cond\n                   (empty? s)    true\n                   (= (first s)\n                      (last s))  (palin (butlast (next s)))\n                   :else         false))", "problem": 27, "user": "4e71705e535d5021c1a89649"}, {"code": "#(let [c (count %1)] (= (take c %1) (take c (reverse %1))))", "problem": 27, "user": "4e756736535d7a570dd295c2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "#(= (apply str (reverse %))\n    (apply str %))", "problem": 27, "user": "4e6f8af8535d5021c1a89620"}, {"code": "(fn palindrome? [s] (if (empty? s) true (and (= (first s) (last s)) (palindrome? (rest (take (- (count s) 1) s))))))", "problem": 27, "user": "4e72430c535d5021c1a8965d"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e735545535d6912a4457f75"}, {"code": "(fn [coll] (let [size (count coll) \n        half (. Math floor (/ size 2))\n\t      palin-lst (for [i (range half)] (= (nth coll i) (nth coll (- size 1 i))))]\n\t  (every? #(= true %) palin-lst)))", "problem": 27, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e73debb535d7a570dd295b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "#(loop [c % r (reverse %)]\n  (cond\n    (empty? c) true\n    (not (= (first c) (first r))) false\n    :else (recur (next c) (next r))))", "problem": 27, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e53319d535d8a8b8723a270"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4e76ba46535d324fb2983d6d"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "#(if (= (first %) (last %)) true false)", "problem": 27, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [col]\n  (loop [c col]\n    (if (or (empty? c) (= (count c) 1))\n      true\n      (if (= (first c) (last c))\n        (recur (rest (reverse (rest c))))\n        false\n        )\n      )\n    )\n  )", "problem": 27, "user": "4db7da66535d1e037afb2187"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e776206535d324fb2983d70"}, {"code": "#(every? identity (map = % (reverse %)))", "problem": 27, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn pa [se]\n  (let [\n    len (count se)\n    foo (fn foo [se c ag]\n      (if (> 1 c)\n        [se ag]\n        (foo (rest se) (dec c) (conj ag (first se)))))\n        \n    bar (fn bar [restseq revseq]\n      (if (and (empty? restseq) (empty? revseq))\n        true\n        (if (= (first restseq) (first revseq))\n          (bar (rest restseq) (rest revseq))\n          false)))]\n                    \n  (let [[restseq revseq] (foo se (/ len 2) '() )]\n    (if (= 0 (mod len 2))\n      (bar restseq revseq)\n      (bar (rest restseq) revseq)))))", "problem": 27, "user": "4e72175d535d5021c1a89658"}, {"code": "(fn [coll]\n  (cond\n    (string? coll) (= (apply str (reverse coll)) coll)\n    :else\n      (= coll (reverse coll))))", "problem": 27, "user": "4e75edfe535d7a570dd295c7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e765170535d324fb2983d69"}, {"code": "#(= (reverse (into () %))  (into () %))", "problem": 27, "user": "4e78dc98535db95036265724"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [s] (= (apply str (reverse s)) (apply str s)))", "problem": 27, "user": "4e794004535db169f9c796a1"}, {"code": "#(not= (-> % set sort) (sort %))", "problem": 27, "user": "4e79a143535db169f9c796a2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(=  ( reverse %) (reverse(reverse%) ))", "problem": 27, "user": "4e78c208535db95036265722"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn [x]\n  (if \n    (= (class x) java.lang.String)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))\n    )\n)", "problem": 27, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "#(let [col % num \r\n  (if(odd?(count col))(/(-(count col)1)2)(/(count col)2))\r\ndropNum (if(odd? (count col)) (+ num 1) num)]\r\n(= (take num col)(reverse(drop dropNum col))))", "problem": 27, "user": "4e244ed5535d04ed9115e826"}, {"code": "(fn [coll]\n  (loop [i 0 j (dec (count coll))]\n    (if (not= (nth coll i) (nth coll j))\n      false\n      (if (>= i j)\n        true\n        (recur (inc i) (dec j))))))", "problem": 27, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn [s]\n   (let [half (/ (count s) 2)]\n      (let [halves (split-at half s)]\n         (let [top (reverse (first halves))]\n            (let [bottom (second halves)]\n               (let [new-top (if (odd? (count s))\n                  (rest top)\n                  top\n               )]\n                  (= new-top bottom)\n               )\n            )\n         )\n      )\n   )\n)", "problem": 27, "user": "4e6ac49d535d8ccf87e9ff01"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4e7c4290535db169f9c796bc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e739795535dff18050a9c75"}, {"code": "(fn [[fst & rst :as seq]]\n  (and (not (empty? seq))\n       (or (some #(= % fst) rst)\n           (recur rst))))", "problem": 27, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [col] (if (seq? col )(= col (reverse col))\n          (= (seq col) (reverse (seq col)))))", "problem": 27, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn palin? [lst]\n  (cond\n    (= 1 (count lst)) true\n    (= 2 (count lst)) (= (first lst) (last lst))\n    (not= (first lst) (last lst)) false\n    :else (recur (rest (drop-last lst)))))", "problem": 27, "user": "4e7b6e49535db169f9c796b1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e6799cc535d8ccf87e9fe7f"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [x]\n  (if (= (seq x) (reverse x)) true false))", "problem": 27, "user": "4e36e647535deb9a81d77f36"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7db3b4535db169f9c796e1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn\n  [x]\n    (= (seq x)\n      (reverse x)))", "problem": 27, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "(fn [col]\n  (= (seq col) (reverse (seq col))))", "problem": 27, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [x] \n  (reduce #(and %1 %2)\n    (map  #(= %1 %2) x (reverse x))))", "problem": 27, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [sq]\n  (if (string? sq)\n    (= (.. (new StringBuffer sq) reverse toString) sq)\n    (= sq (reverse sq))))", "problem": 27, "user": "4e7d1c22535db169f9c796c5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn palindrome \n    ([x] (cond   \n      (= (count x) 1) \n        true\n  \t  (= (count x) 2) \n        (= (first x) (last x))\n\t\t  (and (> (/ (count x) 2) 0)  (= (first x) (last x)) )\n        (palindrome  (rest (take (- (count x) 1) x) ))\n      true false\n)))", "problem": 27, "user": "4e6cf2be535de274dd8d818a"}, {"code": "(fn palindrome? [xs]\n  (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn [s]\n  (loop [start 0 end (- (count s) 1)]\n    (if (>= start end)\n      true\n      (if-not (= (nth s start) (nth s end))\n        false\n        (recur (inc start) (dec end))))))", "problem": 27, "user": "4e7e3504535db169f9c79709"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4e7e33a3535db169f9c79708"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7e032b535db169f9c796fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(contains? #{1 :foo\\r}(last%))", "problem": 27, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn palindrome [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "#(= (apply list %) (reverse %))", "problem": 27, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [s]\n  (if (string? s)\n    (= (seq s) (reverse s))\n    (= s (reverse s))))", "problem": 27, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7e241a535db169f9c79705"}, {"code": "(fn [input]\n  (let [seq (seq input)]\n    (if (even? (count seq))\n\t    (= seq (reverse seq))\n\t    (let [half (take (/ (- (count seq) 1) 2) seq) middle (nth seq (count half))]\n\t      (= seq (flatten (conj [] half middle (reverse half))))\n\t    )\n\t  )\n  )\n)", "problem": 27, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4dda61dd535d02782fcbe9f3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e726914535d5021c1a89661"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e80aa10535db62dc21a62b1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [s]\n  (let [l (count s)]\n    (loop [i 0 p true]\n      (if (>= i l)\n        p\n        (recur (inc i)\n          (and p (= (nth s i) (nth s (- l i 1)))))\n))))", "problem": 27, "user": "4e7e6b51535db169f9c79712"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn [x]\n  (if (= java.lang.String (type x))\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "4e7e8694535db169f9c79718"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [x]\r\n  (if (= x ()) true\r\n  (if (not (= (first x) (last x))) false\r\n  (recur (rest (reverse (rest x)))))))", "problem": 27, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(loop [seq %] (if (not= (first seq) (last seq)) false (if (> (count seq) 2) true (recur (butlast(next(seq)))))))", "problem": 27, "user": "4e721857535d5021c1a8965a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [x]\n   (every? true? (map = x (reverse x))))", "problem": 27, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e823f41535db62dc21a62c8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e81e29b535db62dc21a62bd"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e82c062535db62dc21a62cc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e82f85d535db62dc21a62ce"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e837808535db62dc21a62d9"}, {"code": "(fn [coll]\r\n  (cond (= 0 (count coll)) false\r\n\t      (= 1 (count coll)) true\r\n\t      (= 2 (count coll)) (= (first coll) (last coll))\r\n\t      :else\r\n\t          (and (= (first coll) (last coll))\r\n\t\t       (recur (rest (drop-last 1 coll))))))", "problem": 27, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7df598535db169f9c796f6"}, {"code": "(fn [xs]\n  (loop [f (first xs),\n\t\tl (last xs),\n\t\tm (rest (butlast xs))]\n\t\t(if (= m '())\n\t\t\ttrue\n\t\t\t(and (= f l) (recur (first m) (last m) (rest (butlast m)))))))", "problem": 27, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "(fn [x] (= (first x) (last x)))", "problem": 27, "user": "4e64ae65535d8ccf87e9fe6d"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e71a12c535d5021c1a8964f"}, {"code": "#(or\n  (and (= (type %) java.lang.String) (= (seq %) (reverse %)))\n  (= % (reverse %)))", "problem": 27, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e851955535db62dc21a62e9"}, {"code": "(fn p[s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (p (butlast (rest s)))\n      false)))", "problem": 27, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e85cda3535db62dc21a62f0"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e8612f8535db62dc21a62f2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn palindrome? [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "#(apply = ((juxt seq reverse) %))", "problem": 27, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn isPal [coll]\n  (if (> (count coll) 1)\n    (if (= (first coll) (last coll))\n      (isPal (drop 1 (drop-last 1 coll)))\n      false\n    )\n    true\n  )\n)", "problem": 27, "user": "4e86a443535dc036d0eaab83"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [s] \n  (let [[a b] (split-at (quot (count s) 2) s)\n        b (if (= (count a) (count b)) b (rest b))]\n    (= a (reverse b))))", "problem": 27, "user": "4e8742d4535dceadca46984f"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4e8768f6535dceadca469850"}, {"code": "(fn p?[ll]\n  (let [pal (fn[a b]\n\t            (if (empty? a)\n\t                false\n\t\t\t\t\t\t\t\t  (if (= (count a) (count b))\n\t\t\t\t\t\t\t\t\t  \t(= a b)\n\t\t\t\t\t\t\t\t\t  \t(if (= (rest a) b)\n\t\t\t\t\t\t\t\t\t  \t\ttrue\n\t\t\t\t\t\t\t\t\t\t  \t(recur (rest a) (conj b (first a)))))))]\n\t\t\t(pal ll '())))", "problem": 27, "user": "4e889643535d8b9bb0147ca5"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e894068535d4ef0aa30db97"}, {"code": "(fn pali [l] \r\n  (if (or (= (count l) 0) (= (count l) 1))\r\n    true\r\n    (if (= (first l) (last l))\r\n      (pali (drop 1 (drop-last l)))\r\n      false)))", "problem": 27, "user": "4e83b1af535db62dc21a62dc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "4e89de60535d3e98b8023285"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8a170c535d3e98b802328f"}, {"code": "#(every? true? \r\n  (map (fn [x y] (= x y)) (reverse %) %))", "problem": 27, "user": "4e897fc5535de4250bdfe493"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn pal [l]\n  (if (seq l) \n      (if (= (first l) (last l))\n          (recur (reverse(rest(reverse(rest l)))))\n          false)\n      true))", "problem": 27, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e89e939535d3e98b8023287"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e7e1305535db169f9c79700"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4e83844a535db62dc21a62da"}, {"code": "(fn [s]\r\n  (let [s (vec s)]\r\n    (if (or (empty? s) (= 1 (count s)))\r\n      true\r\n      (if (= (first s) (last s))\r\n        (recur (subvec s 1 (dec (count s))))\r\n        false))))", "problem": 27, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn palin [coll]\n    (and (= (first coll) (last coll))\n         (let [c (count coll)]\n           (or (<= c 2)\n               (palin (take (- c 2)\n                            (drop 1 coll)))))))", "problem": 27, "user": "4e8c1d97535d65386fec2127"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e814706535db62dc21a62bb"}, {"code": "(fn [coll]\r\n  (loop [coll (vec coll) posL 0 posR (dec (count coll))]\r\n    (cond\r\n       (< posR posL) true\r\n       (not= (get coll posL) (get coll posR)) false\r\n       :else (recur coll (inc posL) (dec posR)))))", "problem": 27, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [seqn]\n  (let [half-count (int (/ (count seqn) 2))\n        first-half (take half-count seqn)\n        second-half (take half-count (reverse seqn))]\n    (= first-half second-half)))", "problem": 27, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn check [lcoll](\r\n                              if (empty? lcoll) true\r\n                                (if (not= (first lcoll) (last lcoll)) false\r\n                                  (check (drop 1 (drop-last lcoll))))\r\n                             ))", "problem": 27, "user": "4e8aef69535d65386fec2114"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8b557c535d65386fec2119"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [x]\n   (loop [x x]\n     (if (or (empty? x) (= 1 (count x)))\n       true\n       (if (not= (first x) (last x))\n   false\n\t (recur (drop-last (drop 1 x)))))))", "problem": 27, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#( = (seq %) (reverse %))", "problem": 27, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn isPalindrome [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [s]\n    (let [len (quot (count s) 2)\n          front (take len s)\n          rear (take len (reverse s))]\n          (= front rear)))", "problem": 27, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "(fn [x] (= (reverse (vec x)) (vec x)))", "problem": 27, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4e8df08f535d65386fec213e"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8f5eba535d65386fec214c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dfd018c535d04ed9115e77f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4e8bc8d8535d65386fec2125"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4e8d86d5535d65386fec2136"}, {"code": "(fn x [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map \n        (fn [y] (= (nth coll y) (nth rc y))) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e8dbab3535d65386fec2139"}, {"code": "(fn [lst]\n  (cond\n    (<= (count lst) 1) true\n    (not= (first lst) (last lst)) false\n    :else (recur (rest (drop-last lst)))))", "problem": 27, "user": "4e89559c535d4ef0aa30db9a"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [[fst & rst :as seq]]\n  (and (not (empty? seq))\n       (or (some #(= % fst) rst)\n           (recur rst))))", "problem": 27, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "(fn [coll]\n    (if (empty? coll)\n  true\n      (if (not (= (first coll) (last coll)))\n\t  false\n\t(recur (butlast (rest coll))))))", "problem": 27, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn [x] \n  (loop [l x]\n    (cond\n      (< (count l) 2) true\n      (= (first l) (last l)) (recur (drop-last(rest l)))\n      :else false)))", "problem": 27, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [x] \n      (= (vec(reverse x)) (vec x))\n)", "problem": 27, "user": "4e8b73f1535d65386fec2121"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4e823629535db62dc21a62c3"}, {"code": "#(=\n   (apply str %)\n   (apply str (reverse %))\n)", "problem": 27, "user": "4e8b6f4d535d65386fec211e"}, {"code": "(fn [el]\n    (loop [b 0 e (dec(count el))]\n      (if (> b e)\n        true\n        (if (= (nth el b) (nth el e))\n          (recur (inc b) (dec e))\n          false\n          )\n        )\n      )\n    )", "problem": 27, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn pal[s] \n  (if (string? s) \n     (= s (apply str (reverse s)))\n     (= s (reverse s))\n  )\n)", "problem": 27, "user": "4e7650c5535d324fb2983d68"}, {"code": "#(let [sequ (seq %)] (= sequ (reverse sequ)))", "problem": 27, "user": "4e93600b535dbda64a6f6b0e"}, {"code": "(fn palendrome? [lst]\n  (let [reverse (fn [lst] (reduce #(cons %2 %1) nil lst))]\n    (= (seq lst) (reverse lst))))", "problem": 27, "user": "4e951f44535dbda64a6f6b30"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn [x]\n  (let [xrev (reverse x)]\n      (= x (if (string? x) (apply str xrev) xrev))))", "problem": 27, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [word]\n  (= (seq word) (reverse (seq word))))", "problem": 27, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [s] (reduce (fn [cum set] (and cum (apply = set))) (partition 2 (interleave s (reverse s)))))", "problem": 27, "user": "4e9646f2535dbda64a6f6b40"}, {"code": "(fn palindrome? [s] (or (<= (count s) 1) (and (= (first s) (last s)) (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4e8de3a2535d65386fec213d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [s] (loop [i 0 j (- (count s) 1)]\n  (if (<= j i)\n    true\n    (if (not (= (nth s i) (nth s j)))\n      false\n      (recur (+ i 1) (- j 1))))))", "problem": 27, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "(comp (partial apply =) (juxt seq reverse))", "problem": 27, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4e9697bc535dbda64a6f6b48"}, {"code": "(fn [x](  if (=(reduce str(reverse x)) (reduce str x)) true false ) )", "problem": 27, "user": "4e8da0bf535d65386fec2138"}, {"code": "(fn \n [st]\n (if (= (seq st) (reverse st) ) true    false) )", "problem": 27, "user": "4e6ff01e535d5021c1a8962b"}, {"code": "(fn palindrome? [coll]\n  (let [split (Math/floor (/ (count coll) 2))\n        left (take split coll)\n        right (take-last split coll)]\n    (= left (reverse right))))", "problem": 27, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [l] (every? #(= ((vec l) (- (count l) (+ 1 (.indexOf (vec l) %)))) %) l))", "problem": 27, "user": "4e904d9c535d65386fec2152"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "4e6a5bbe535d8ccf87e9fed1"}, {"code": "(fn palindrome\n  [elements]\n  (= (seq elements)\n     (reverse elements)))", "problem": 27, "user": "4e99108d535dbda64a6f6b62"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e699b20535d8ccf87e9fe9d"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4e919b43535dbda64a6f6afb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e959ee3535dbda64a6f6b35"}, {"code": "(fn [c] (= (seq c) (reverse c)))", "problem": 27, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e99a255535dbda64a6f6b67"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn pal [target]\n  (if (< (count target) 2) true\n    (and \n      (= (first target) (last target))\n      (pal (next (butlast target))))))", "problem": 27, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e975bce535dbda64a6f6b53"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9cf905535dbda64a6f6b84"}, {"code": "(fn [seq]\n  (every? #(= (first %) (second %)) (map vector seq (reverse seq))))", "problem": 27, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [s] \n  (loop [ms s mr (reverse s)]\n    (cond\n      (= ms '()) true\n      (not= (first ms) (first mr)) false\n      :else\n      (recur (rest ms) (rest mr)))))", "problem": 27, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9487fb535dbda64a6f6b14"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e99819a535dbda64a6f6b66"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "#(if (string? %)\n  (if (= (clojure.string/reverse %) %) true false)\n  (if (= (reverse %) %) true false))", "problem": 27, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "(fn palindrome? [s1] (reduce #(and %1 %2) true (map #(= %1 %2) s1 (reverse s1))))", "problem": 27, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [x] (if (= (seq x) (reverse (seq x))) true false))", "problem": 27, "user": "4e9c0552535dbda64a6f6b7b"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "4e9b2f0b535dbda64a6f6b76"}, {"code": "(fn palin [strs]\n    (cond (= 0 (count strs)) true\n          (= 1 (count strs)) true\n          (not (= (first strs)\n                  (last strs))) false\n          true (palin (butlast (rest strs)))))", "problem": 27, "user": "4ea01955535d7eef3080729f"}, {"code": "#(let [ x (if (odd? (count %))\n         (/ (- (count %) 1) 2)\n         (/ (count %) 2))  ] (= (take x %) (reverse (drop (- (count %) x) %) )))", "problem": 27, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn palin [xs] (let [s (seq xs)] (= s (reverse s))))", "problem": 27, "user": "4ea092f4535d7eef308072a6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4daee8e9edd6309eace4d166"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ea1c349535d7eef308072ba"}, {"code": "(fn [seq] (= (sequence seq) (reverse seq)))", "problem": 27, "user": "4ea1bc93535d7eef308072b9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn pal [x]\n    (if \n      (= '() (rest x))\n      true \n      (if \n        (= (first x) (last x))\n        (pal (butlast (rest x)))\n        false\n      )\n    )\n)", "problem": 27, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [x]\r\n(if (string? x)\r\n (let [y (re-seq #\"\\w\" x)]\r\n    (= y (reverse y))) \r\n (= x (reverse x))))", "problem": 27, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [s]\n                  (let [s (seq s)\n                        half (int (/ (count s) 2))\n                        [first-half second-half] (if (odd? (count s))\n                                                   [(take (inc half) s) (drop half s)]\n                                                   (split-at half s))]\n                    (= first-half (reverse second-half))))", "problem": 27, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn palin[x]\n  (if (< (count x) 2) true\n  (and (= (first x) (last x)) (palin (rest (butlast x))))\n))", "problem": 27, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [s]\n  (let [len (count s)]\n    (let [half-len (quot len 2)\n          skip-len (rem len 2)]\n    (= (reverse (take half-len s)) (drop (+ half-len skip-len) s)))))", "problem": 27, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [l] (let [s (seq l)] (= (reverse s) s)))", "problem": 27, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn palindrome? [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4ea53dc2535d7eef308072d1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea41fc2535d7eef308072cb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [s]\n  (= (apply list s) (reverse s)))", "problem": 27, "user": "4ea67906535d7eef308072e4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea629da535d7eef308072e2"}, {"code": "(fn [x] \n  (letfn [ (r [x] (if (string? x) (apply str (reverse x)) (reverse x))) ]\n  (= x (r x))))", "problem": 27, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn palind[c]\r\n  (= (into () c) (seq c))\r\n)", "problem": 27, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/join(reverse x)))\n    (= x (reverse x))\n  )\n)", "problem": 27, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [l]\n    (= (lazy-seq l) (reverse l))\n)", "problem": 27, "user": "4ea57300535d7eef308072d5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(= (into () %) (into () (reverse %)))", "problem": 27, "user": "4dad76588e77d6ed63f12a44"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4ea87a83535d7eef308072fb"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [x] (if (coll? x) (= x (reverse x))\n          (= x (clojure.string/join (reverse x)))))", "problem": 27, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [x] (let [a (reverse x) b (reverse (reverse x))] (= a b)))", "problem": 27, "user": "4ea95e56535d7eef30807302"}, {"code": "(fn isp [x] (if (= (reverse (reverse x)) (reverse x)) true false))", "problem": 27, "user": "4ea882c7535d7eef308072fc"}, {"code": "#(= (take (bit-shift-right (count %) 1) (vec %)) (reverse (take-last (bit-shift-right (count %) 1) (vec %))))", "problem": 27, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [coll]\n  (let [rev (reverse coll)]\n    (loop [c coll r rev]\n      (if (nil? (first c))\n        true\n        (if (not (= (first c) (first r)))\n          false\n          (recur (rest c) (rest r)))\n        ))))", "problem": 27, "user": "4ea03a3a535d7eef308072a0"}, {"code": "(fn [x] \n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n(= x (reverse x))))", "problem": 27, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4eab350a535d7eef30807314"}, {"code": "(fn[x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4eab612d535d7eef30807316"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4dbecb06535d020aff1edf6a"}, {"code": "#(= (seq %) (reverse  %))", "problem": 27, "user": "4ea85846535d7eef308072f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e243bcb535d04ed9115e825"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn [coll]\n  (if coll\n    (if (= (first coll) (last coll))\n      (recur (next (drop-last coll)))\n      false)\n    true))", "problem": 27, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4eaec592535d7eef30807327"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eaed3a7535d7eef30807328"}, {"code": "#(if (string? %)\n  (= % (apply str (reverse %)))\n  (= % (reverse %)) )", "problem": 27, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [lst]\n  (loop [l lst]\n    (if (empty? l) true\n      (if (not (= (first l) (last l))) false\n        (recur (rest (drop-last l)))))))", "problem": 27, "user": "4eaa47bc535d7eef30807309"}, {"code": "(fn [x] (=(vec(reverse x))(vec x)))", "problem": 27, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eaede1f535d7eef30807329"}, {"code": "#(= (into [] %) (reverse (into [] %)))", "problem": 27, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "4eaf0d91535d7eef3080732e"}, {"code": "#(=(last%1)(first%1))", "problem": 27, "user": "4eb07be3535d7eef3080733b"}, {"code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "problem": 27, "user": "4ea68edb535d7eef308072e6"}, {"code": "(fn [x] (or (= 0 (count x)) (= 1 (count x))\n     (if (= (first x) (last x)) (recur (rest (take (- (count x) 1) x))) false)))", "problem": 27, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [s]\n  (= (reverse s) (seq s)))", "problem": 27, "user": "4eb1dd39535d7eef30807345"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e6e4210535d5021c1a89606"}, {"code": "(fn [x]\n  (if (instance? String x)\n(= (apply str (reverse x)) x)\n(= (reverse x) x)))", "problem": 27, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn my-pal [s]\n  (if (or (= (count s) 0) (= (count s) 1))\n      true\n      (and (= (first s) (last s))\n           (my-pal (drop-last (rest s))))))", "problem": 27, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn [s] (every? true? (map = s (reverse s))))", "problem": 27, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [pp]\n  (= (seq pp) (reverse pp)))", "problem": 27, "user": "4eb25069535d7eef30807348"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb3fcba535d7eef30807359"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb41884535d7eef3080735d"}, {"code": "(fn f [xs]\r\n  (if (string? xs)\r\n    (= xs (clojure.string/join (reverse xs)))\r\n    (= xs (reverse xs))))", "problem": 27, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn pe [s]\n  (if (not (second s))\n  true\n  (and (= (first s) (last s)) (-> s butlast rest pe))))", "problem": 27, "user": "4e8b98fc535d65386fec2124"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eabb245535d7eef30807319"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4eb593e6535d7eef30807368"}, {"code": "(fn [coll] \n  (let [c (seq coll)] \n    (= (reverse c) c)))", "problem": 27, "user": "4eb59464535d7eef30807369"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4eb66737535d7eef3080736b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [p]\n  (loop [p p, t true]\n    (and\n      t\n      (or\n        (<= (count p) 1)\n        (recur (rest (butlast p)) (= (first p) (last p)))))))", "problem": 27, "user": "4eb6d3ab535d7eef30807370"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb70649535d7eef30807373"}, {"code": "(fn [s]\n  (letfn [(pal [seq acc cnt]\n            (cond\n              (> acc (/ cnt 2)) true\n              (= (nth seq acc) (nth seq (- cnt acc 1))) (pal seq (inc acc) cnt)\n              true false))]\n    (pal (seq s) 0 (count (seq s)))))", "problem": 27, "user": "4eb404ba535d7eef3080735a"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4eb5c8d7535d7eef3080736a"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn palindromo? [x]\n  (= (reverse x) (seq x))\n)", "problem": 27, "user": "4ea3f035535d7eef308072ca"}, {"code": "(fn [x] (if (or (list? x) (vector? x)) (= x (reverse x)) (= x (apply str (reverse x)))))", "problem": 27, "user": "4eb8979b535dfed6da9c6d4a"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [x] \r\n                                             (loop[i 0 x x]\r\n                                               (if(empty? x)\r\n                                                 true\r\n                                                 (if(= (first x) (last x))\r\n                                                   (recur (inc i) (rest (take (- (count x) 1) x)))\r\n                                                   false)\r\n                                                 )\r\n                                               )\r\n                                             )", "problem": 27, "user": "4eb2fe60535d7eef30807354"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4eb80353535d7eef3080737c"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn[x] (= (vec x) (reverse x)))", "problem": 27, "user": "4e931ebb535dbda64a6f6b08"}, {"code": "( fn [x]\n  (= (reverse x) (seq x))\n)", "problem": 27, "user": "4eb82088535d7eef30807380"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4eb955da535dfed6da9c6d50"}, {"code": "#(=(seq %)(reverse %))", "problem": 27, "user": "4eb2f89a535d7eef30807353"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4eb81b66535d7eef3080737f"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e9dd718535dbda64a6f6b8c"}, {"code": "(fn [x] (if (string? x)\r\n           (= x (apply str(reverse x)))\r\n           (= x (reverse x))\r\n           ))", "problem": 27, "user": "4e932523535dbda64a6f6b09"}, {"code": "(fn palindromo [x] \n  (if(= (reverse x) (seq x))\n  true\n        false\n        )\n)", "problem": 27, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "(fn palindromo [x]\n  (= (seq x) (reverse x)) \n)", "problem": 27, "user": "4eb9b1aa535dfed6da9c6d5a"}, {"code": "(fn pal?[x] \n    (= (seq x) (reverse x))\n\n)", "problem": 27, "user": "4e8b742a535d65386fec2123"}, {"code": "(fn p?[x]\r\n (= (reverse x) (seq x))\r\n)", "problem": 27, "user": "4e94b4f7535dbda64a6f6b27"}, {"code": "(\n  fn palindromo? [par\u00e2metro]\n    (\n      = (reverse par\u00e2metro) (seq par\u00e2metro)\n    )\n)", "problem": 27, "user": "4eb9af9f535dfed6da9c6d59"}, {"code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "4eb885a8535dfed6da9c6d49"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4eb96a67535dfed6da9c6d52"}, {"code": "#(= (concat %) (reverse %))", "problem": 27, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "( fn p? [x]\n\n ( = (apply str x) (apply str (reverse x))\n\n))", "problem": 27, "user": "4e9dd9ab535dbda64a6f6b8d"}, {"code": "(fn[x]\n  (\n    =\n    (into () (into () x))\n    (into () x)\n  )\n)", "problem": 27, "user": "4e94accb535dbda64a6f6b20"}, {"code": "(fn [x]\n  (if (= (reverse x) (seq x) )\n  true\n  false\n   )\n)", "problem": 27, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "(fn palindrome[x]\r\n  (if (string? x)\r\n    (= x (apply str (reverse x)))\r\n  (= x (reverse x))\r\n  )\r\n)", "problem": 27, "user": "4eb7ff08535d7eef30807379"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4eb698ad535d7eef3080736d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb30868535d7eef30807355"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4ebc05a2535dfed6da9c6d7a"}, {"code": "(fn pali? [seq] (cond (empty? seq) true (and (= (first seq) (last seq)) (pali? (rest (butlast seq)))) true :else false))", "problem": 27, "user": "4eb83593535dd6025b394d1b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [s] (if (string? s)\n(= (map char s) (reverse s))\n(= s (reverse s))))", "problem": 27, "user": "4ea3c875535d7eef308072c9"}, {"code": "#(loop [coll %1]\n     (if-not (= (first coll) (last coll))\n       false\n       (let [coll (drop-last 1 (drop 1 coll))]\n         (if (seq coll)\n           (recur coll)\n           true)))) ;#(= (seq %) (reverse %)) would have been way less overengineered! =)", "problem": 27, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "(fn[y] (= (#(if \n     (instance? String %) \n     (reduce str (reverse %)) \n     (reverse %)\n   ) y) y))", "problem": 27, "user": "4ebe066a535dfed6da9c6d91"}, {"code": "#(= (reverse(reverse %)) (reverse %))", "problem": 27, "user": "4ebe8d65535dfed6da9c6d96"}, {"code": "(fn [x]\n  (loop [x x y (reverse x)]\n    (cond\n      (empty? x) true\n      (= (first x) (first y)) (recur (rest x) (rest y))\n      :else false)))", "problem": 27, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [coll] \n  (loop [[a & more] coll [b & rmore] (reverse coll) n (quot (count coll) 2)]\n(if (pos? n)\n(if (= a b) (recur more rmore (dec n)) false) true)))", "problem": 27, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn pal [xs] (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb44d78535d7eef30807360"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn palindrome? [seq]\n  (let [pc (into [] seq)] \n    (= pc (reverse pc))))", "problem": 27, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [xs] (cond \n  (string? xs) (= xs (apply str (reverse xs)))\n  :else (= xs (reverse xs))))", "problem": 27, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn ispal[c] (= (reverse (reverse c)) (reverse c)))", "problem": 27, "user": "4ec17677535dfed6da9c6dad"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn [p]\n  (= (seq p) (reverse p)))", "problem": 27, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ec34cd1535dcc7ae8597d54"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4ec347af535dcc7ae8597d53"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "4ec363e7535dcc7ae8597d55"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [x] \n  (= (seq x) (reverse x)))", "problem": 27, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [word]\n  (= (seq word) (reverse word)))", "problem": 27, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [x]\n           (if (empty? x)\n             true\n             (if (= (first x) (first (reverse x)))\n             (recur (rest (reverse (rest x))))\n             false)))", "problem": 27, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [sq]\n  (let [v (into [] (seq sq))]\n    (every? identity\n            (map = v (rseq v)))))", "problem": 27, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "#(loop [lst (vec %), head 0, tail (dec (count %))]\n    (cond\n      (>= head tail) true\n      (not= (get lst head) (get lst tail))  false\n      :else (recur lst (inc head) (dec tail)) ))", "problem": 27, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn pal [l]\n  (if (empty? l)\n    true\n    (if (= (first l) (last l))\n      (pal (rest (butlast l)))\n      false)))", "problem": 27, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [col0]\n  (let [col (seq col0)]\n  (loop [start 0 end (- (count col) 1)]\n    (cond \n      (false? (= (nth col start) (nth col end))) false\n      (and (= (nth col start) (nth col end)) \n             (<= (- end start) 1)  )            true\n      :else (recur (inc start) (dec end))))\n))", "problem": 27, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [x] (loop [x x]\n  (cond (< (count x) 2) true\n        (= (last x) (first x)) (recur (rest (butlast x)))\n        :else false)))", "problem": 27, "user": "4ec63613535d6d7199dd36c6"}, {"code": "(fn\n  palindrome?[lst]\n  (if\n    (or (empty? lst) (empty? (rest lst)))\n    true\n    (if\n      (not= (first lst) (last lst))\n      false\n      (palindrome?\n        (rest (butlast lst))\n      )\n    )\n  )\n)", "problem": 27, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn pal [x]\n  (if (> (count x) 1)\n    (if (= (first x) (last x))\n      (pal (butlast (rest x)))\n      false)\n    true))", "problem": 27, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "#(= (seq %)(reverse (seq %)))", "problem": 27, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "(fn [lst] (= (first lst) (last lst)))", "problem": 27, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn ispal? [coll] \n  (loop [f coll r (reverse coll)]\n    (if (not f)\n      true\n      (if (= (first f) (first r))\n        (recur (next f) (next r))\n      false))))", "problem": 27, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [seq]\n  (let [c (count seq)]\n    (cond (or (= c 0) (= c 1)) true\n        (not (= (first seq) (last seq))) false\n        :else (recur (subvec (vec seq) 1 (- c 1))))))", "problem": 27, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "#(= (reduce conj nil %) (reduce conj [] %))", "problem": 27, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn [s] (= (reverse (seq s)) (seq s)))", "problem": 27, "user": "4ec5fb83535d6d7199dd36bd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn [col] (= (reverse col) (vec col)))", "problem": 27, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4ec927e8535d6d7199dd36f9"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn _ [x] \n  (loop [y x]\n    (if (< (count y) 2)\n      true\n      (if (= (first y) (last y))\n        (recur (butlast (rest y)))\n        false)\n    )\n  )\n)", "problem": 27, "user": "4ec8736f535d6d7199dd36f3"}, {"code": "(fn [s]\n  (cond \n    (string? s) \n      (= s (apply str (reverse s)))\n    :else\n      (= s (reverse s))))", "problem": 27, "user": "4e6f578c535d5021c1a8961b"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec65213535d6d7199dd36c8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4eb171d7535d7eef30807340"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "#(let\n  [obj (reverse %)] \n  (= (if (string? %) (apply str obj) obj) %))", "problem": 27, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn  rr [ v] (let [coll (vec v)]\n(= coll (rseq coll))))", "problem": 27, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn palindrome? [s]\r\n  (if (< (count s) 2)\r\n    true\r\n    (if (not= (first s)\r\n              (last s))\r\n      false\r\n      (recur (butlast (rest s))))))", "problem": 27, "user": "4ecac3ab535d6d7199dd370b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [coll]\n  (let [coll-size (count coll)]\n    (if (even? coll-size)\n      (= (reverse (take (/ coll-size 2) coll))\n         (drop (/ coll-size 2) coll))\n      (= (reverse (take (- (/ coll-size 2) 1) coll))\n         (drop (/ coll-size 2) coll)))))", "problem": 27, "user": "4ecaa5da535d6d7199dd3707"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [myList] (= (seq myList) (reverse myList)))", "problem": 27, "user": "4ec3f4a7535dcc7ae8597d5e"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "4eccb190535d23f0362276fe"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4eca40cd535d6d7199dd3703"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn isPalindrome [arr]\n  (loop [i 0, j (- (count arr) 1)]\n    (if (>= i j)\n      true\n      (if (not (= (nth arr i) (nth arr j)))\n        false\n        (recur (inc i) (dec j))))))", "problem": 27, "user": "4ecbff2f535df97575fdabe4"}, {"code": "#(every? true? (map = %1 (reverse %1)))", "problem": 27, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn[x]\n  (if (string? x)\n      (= (reverse x)\n         (reverse (reverse x)))\n      (= x (reverse x))))", "problem": 27, "user": "4ecd2735535d23f036227703"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "#( = (first %) (last %))", "problem": 27, "user": "4ecd0d84535d23f036227701"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec601ff535d6d7199dd36be"}, {"code": "(fn [x] \n  (loop [front x\n         back x]\n      (if (not (= (first front) (last back)))\n        false\n        (if (= 1 (count front))\n          true\n          (recur (rest front) (butlast back))))))", "problem": 27, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn is-palindrome [coll]\n  (or (<= (count coll) 1)\n    (and (= (first coll) (last coll))\n      (is-palindrome (rest (butlast coll))))))", "problem": 27, "user": "4eb7b049535d7eef30807377"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec18451535dfed6da9c6db0"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ec3674b535dcc7ae8597d57"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [s]\n  (if (or (= 1 (count s)) (= 0 (count s)))\n    true\n    (if (not (= (first s) (last s)))\n      false\n      (recur (rest (butlast s))))))", "problem": 27, "user": "4ec92a04535d6d7199dd36fa"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4ed00953535d44c135fd68c2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "#(letfn [(\n    pal [lst] (\n        if (empty? lst) true\n                        (if (= (count lst) 1) true\n                                              (and (pal (butlast (rest lst)))\n                                                   (= (first lst) (last lst)))\n                            )\n      )\n  )]\n  (pal %)\n)", "problem": 27, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecc147b535d23f0362276f7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed15f60535d44c135fd68cd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [s] (let [s (seq s)] (every? true? (map = s (reverse s)))))", "problem": 27, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [x] (if (= (class x) java.lang.String) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4e75500f535d7a570dd295c1"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "(fn [n] (= (seq n) (reverse n)))", "problem": 27, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(reduce (fn [a b] (and a b)) (map identical? % (reverse %)))", "problem": 27, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ece7617535d23f03622770c"}, {"code": "(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s) s))\n    (= (reverse s) s)))", "problem": 27, "user": "4ec5510d535d6d7199dd3694"}, {"code": "(fn [x]\n  (let [len (quot (count x) 2)]\n    (= (take len x) (take len (reverse x)))))", "problem": 27, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [s] (let [s* (seq s)] (= s* (reverse s*))))", "problem": 27, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(if (string? %)\n(= % (apply str (reverse %)))\n(= % (reverse %)))", "problem": 27, "user": "4ed2b168535d44c135fd68dd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn [s]\n  (if (seq s) (if (= (first s) (last s)) (recur (-> s rest reverse rest reverse)) false)\n      true))", "problem": 27, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [x]\n  (let [xs (seq x)]\n    (or \n      (< (count xs) 2)\n      (and\n        (= (first xs) (last xs))\n        (recur (rest (butlast xs)))))))", "problem": 27, "user": "4ed2918f535d44c135fd68d8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ecc1d85535d23f0362276f8"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn [s]\n    (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4ed47f1e535d10e5ff6f52cd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn pali [x]\n  (or \n    (<= (count x) 1)\n    (and\n      (= (first x) (last x))\n      (pali (rest (butlast x)))\n    )\n  )\n)", "problem": 27, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [seq]\n  (let [m  (quot (count seq) 2)]\n  (= (reverse (drop-last m seq)) (drop m seq))))", "problem": 27, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb2a89d535d7eef3080734c"}, {"code": "(fn p [coll](\n  = (seq coll) (reverse coll)))", "problem": 27, "user": "4ed42c78535d10e5ff6f52c7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn f [x]\n   (if (or (= 0 (count x)) (= 1 (count x)))\n     true\n     (and (= (first x) (last x))\n          (f (rest (butlast x))))))", "problem": 27, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ed3c783535d44c135fd68f6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eca5391535d6d7199dd3704"}, {"code": "(fn palindrome?\n[x]\n(every? (fn [[a b]] (= a b))\n(partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [l] (every? true? (map = l (reverse l))))", "problem": 27, "user": "4daf1076edd6309eace4d16f"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn palindrome? [xs]\n    (let [length (count xs)\n        xsseq (seq xs)\n        half (quot length 2) \n        rmd (rem length 2)\n        pre (first (split-at half xsseq))\n        post (second (split-at (+ half rmd) xsseq))]\n        (= pre (reverse post))    \n    ))", "problem": 27, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [coll]\n          (loop [col coll] \n            (if (< (count col) 2)\n               true\n            ;; else\n            (if-not (#(= (first %) (last %)) col)\n               false\n            (recur ( #(rest (butlast %) ) col))))))", "problem": 27, "user": "4de27757535d08e6dec9fdea"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db85c8e535d1e037afb218f"}, {"code": "(fn [sequence]\n  (reduce #(= %1 %2 true)\n    (map #(= %1 %2) sequence (reverse sequence))))", "problem": 27, "user": "4e759734535d7a570dd295c4"}, {"code": "(fn [x]\n  (let [ myequal (fn myequal [xs ys]\n  (cond (= xs ys []) true\n        (= (first xs) (first ys)) (myequal (rest xs) (rest ys))\n        :else false))] (myequal x (reverse x))))", "problem": 27, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed62436535d10e5ff6f52df"}, {"code": "(fn [x] (if (instance? java.lang.String x) (= x (reduce str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4ec5c948535d6d7199dd36b7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ea11921535d7eef308072af"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn palin [x]\n  (if \n    (empty? (seq x))\n    true\n    (if (= (first (seq x)) (last (seq x)))\n      (and true (palin (rest (butlast (seq x)))))\n      false)))", "problem": 27, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "(fn [x]\n  (if (empty? x)\n    true\n    (if (= (last x) (first x))\n      (recur (rest (butlast x)))\n    false)))", "problem": 27, "user": "4ed6b05c535d10e5ff6f52e5"}, {"code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "problem": 27, "user": "4db6d993535d1e037afb2180"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4eb01582535d7eef30807335"}, {"code": "#(letfn [(pal [x] (or (empty? (rest x)) (and (= (first x) (last x)) (pal (rest (drop-last x))))))] (pal %))", "problem": 27, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ed4673f535d10e5ff6f52ca"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [i]\n    (if (<= (count i) 1)\n      true\n      (if-not (= (first i) (last i))\n        false\n        (recur (drop-last (next i))))\n      )\n    )", "problem": 27, "user": "4eae2f9e535d7eef30807324"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn foo [x] \n  (every? \n    (fn [[a b]] (= a b)) \n(partition 2 \n  (interleave x \n    (reverse x)))))", "problem": 27, "user": "4ec3072a535dcc7ae8597d50"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "#(loop [s % r (reverse s)]\n  (if (empty? s)\n    true\n    (if (not= (first s) (first r))\n      false\n      (recur (rest s) (rest r)))))", "problem": 27, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "(fn f [coll] (if (< (count coll) 2) true (and (= (first coll) (last coll)) (f (-> coll rest butlast)))))", "problem": 27, "user": "4ecbafbf535df97575fdabde"}, {"code": "(fn\r\n  [coll]\r\n\t(let [cnt (/ (count coll) 2)\r\n\t\t\trecoll (reverse coll)]\r\n\t\t(loop [x 0]\r\n\t\t\t(if (> x cnt)\r\n\t\t\t\ttrue\r\n\t\t\t\t(if (= (nth coll x) (nth recoll x))\r\n\t\t\t\t\t(recur (inc x))\r\n\t\t\t\t\tfalse)))))", "problem": 27, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [a] (= (reverse a) (reverse (reverse a))))", "problem": 27, "user": "4ea84ff8535d7eef308072f7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ede8789535d10e5ff6f5337"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed19f00535d44c135fd68d1"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn palindrome [x]\r\n  (if (instance? String x)\r\n    (if (= x (apply str (reverse x)))\r\n      true\r\n      false\r\n    )\r\n    (if (= x (reverse x))\r\n      true\r\n      false\r\n    )\r\n  )\r\n)", "problem": 27, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn foo [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4edf40d5535d10e5ff6f533f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4edffe86535d10e5ff6f5348"}, {"code": "#(=(vec %)(reverse %))", "problem": 27, "user": "4ee00219535d10e5ff6f534a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e5ba560535d8a8b8723a2b7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn [l] (= (reverse (seq l)) (seq l)))", "problem": 27, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn ispal[x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4e8cf3ef535d65386fec2130"}, {"code": "#(=(vec %)(reverse %))", "problem": 27, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [x] (let [rvs (reverse x) n (count x)](\n  every? identity (\n    map #(= (nth rvs %) (nth x %)) (range (/ (dec n) 2)))\n  )\n))", "problem": 27, "user": "4ee1220b535d10e5ff6f5354"}, {"code": "#(= (vec(reverse %)) (vec %))", "problem": 27, "user": "4e982877535dbda64a6f6b5b"}, {"code": "(fn palindrome [a] (= (reverse (seq a)) (seq a)))", "problem": 27, "user": "4ee177dc535d10e5ff6f5359"}, {"code": "(fn [coll]\r\n  (loop [i 0 j (dec (count coll))]\r\n    (if (not= (nth coll i) (nth coll j))\r\n      false\r\n      (if (>= i j)\r\n        true\r\n        (recur (inc i) (dec j))))))", "problem": 27, "user": "4ee17ecc535d10e5ff6f535a"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee01905535d10e5ff6f534c"}, {"code": "(fn palindrome [lst]\n  (let [first (first lst)\n        last (last lst)\n        tmp (reverse (rest (reverse (rest lst))))]\n    (if (not= first last) false\n      (if (= tmp '()) true (recur tmp)))))", "problem": 27, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [i]\n  (= (seq i) (seq (reverse i))))", "problem": 27, "user": "4ed19e90535d44c135fd68d0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [lst] (loop [l lst] (if (< (count l) 2) true (if (= (first l) (last l)) (recur (rest (reverse (rest l)))) false))))", "problem": 27, "user": "4ee251e9535d10e5ff6f5365"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "#(every? (fn [[x y]] (= x y))\n         (map (fn [x y] [x y])\n              %\n              (reverse %)))", "problem": 27, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn [coll]\n    (= (seq coll)\n       (reverse coll)))", "problem": 27, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#( if (= (vec %) (rseq (vec %))) true false )", "problem": 27, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn [coll]\r\n  (let [sq (seq coll)\r\n        ssq (map str sq)\r\n        rsq (reverse ssq)]\r\n    (= ssq rsq)))", "problem": 27, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [coll]\n  (let \n    [half (int (/ (count coll) 2))\n    collseq (seq coll)]\n    (= (take half collseq) (reverse (take-last half collseq)))\n  )\n)", "problem": 27, "user": "4ee26926535d10e5ff6f5367"}, {"code": "(fn [s]\n    (loop [i 0 j (dec (count s)) ]\n       (cond\n\t       (>= i j) true\n\t       (= (nth s i) (nth s j)) (recur (inc i) (dec j))\n\t       :else false)))", "problem": 27, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ecff781535d44c135fd68c1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4edc0c16535d10e5ff6f531f"}, {"code": "#(\n  = \n  %\n  (\n  (fn [x] (if \n            (string? x) \n            (clojure.string/reverse x) \n            (reverse x)\n          )\n  )\n  %)\n)", "problem": 27, "user": "4ec9d95b535d6d7199dd3701"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4ee673cf535d93acb0a66860"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn [xs]\n  (let [r (reverse xs)]\n    (= r\n       (reverse r))))", "problem": 27, "user": "4ee63d8d535d93acb0a66859"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee6400c535d93acb0a6685b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn [n]\n    (= (vec n) (vec (reverse n))))", "problem": 27, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [c] (= (reverse (seq c)) (seq c)))", "problem": 27, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn test-pali [x]\n  (cond\n    (empty? x) true\n    (= (first x) (last x)) (test-pali (rest (butlast x)))\n    true false))", "problem": 27, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee82539535d93acb0a66878"}, {"code": "#((fn [seq]\n  (loop [rest seq]\n    (if (>= 1 (count rest))\n      true\n      (if (= (first rest)\n             (last rest))\n          (recur (butlast (next rest)))\n          false)))) %)", "problem": 27, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn [pal]\n  (= (reverse pal) (reverse (reverse pal))))", "problem": 27, "user": "4ee95013535d93acb0a6688d"}, {"code": "#(loop [s %\n        k (/ (dec (count %)) 2)]\n    (= (take k s) (take k (reverse s))))", "problem": 27, "user": "4ee7fe83535d93acb0a66874"}, {"code": "#(loop [xs %1] (cond (not (= (first xs) (last xs))) false (empty? xs) true true (recur (rest (butlast xs)))))", "problem": 27, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee98e00535d93acb0a6688e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ee8de0e535d93acb0a66885"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn palindrome? [col]\n  (cond \n      (empty? col) true \n      (empty? (rest col)) true\n      (= (first col) (last col)) (palindrome? (drop-last (rest col)))\n      :else false\n))", "problem": 27, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [coll]\n        (loop [subcoll coll]\n                (if (= (count subcoll) 0)\n                        true\n                        (if (= (first subcoll) (last subcoll))\n                                (recur (butlast (rest subcoll)))\n                                false\n                        )\n                )\n        )\n)", "problem": 27, "user": "4eeb2b3c535d93acb0a668a7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [coll] (let [s (seq coll) r (reverse s)] (= s r)))", "problem": 27, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eebc5da535d93acb0a668aa"}, {"code": "(fn [x] (loop [a (vec x)]                                                                                                                               \n                (cond                                                                                                                                         \n                 (empty? a) true                                                                                                                              \n                 (= 1 (count a)) true                                                                                                                         \n                 (not= (first a) (last a)) false                                                                                                              \n                 :e (recur (vec (rest (pop a))))                                                                                                              \n                 )                                                                                                                                            \n                ))", "problem": 27, "user": "4eea1a41535d93acb0a66899"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4eebfd03535d93acb0a668ab"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn palindrome? [xs]\r\n  (if (empty? xs)\r\n    true\r\n    (and (= (first xs) (last xs))\r\n         (palindrome? (drop-last (drop 1 xs))))))", "problem": 27, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4db1fe241254ad5b4805fa77"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebfdfda535dfed6da9c6d9e"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4eecdb33535d93acb0a668b8"}, {"code": "(fn [x] \n  (= (sequence x) (reverse x)))", "problem": 27, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn judge [lst]\n          ( (fn foo [lst1 lst2]\n             (if (= lst1 '()) true\n                 (and (= (first lst1) (first lst2))\n                      (foo (rest lst1) (rest lst2)))))\n            lst (reverse lst)))", "problem": 27, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4eec9432535d93acb0a668af"}, {"code": "(fn [s]\n  (if (seq s)\n    (if (not (= (first s) (last s)))\n       false\n       (recur (rest (butlast s))))\n   true))", "problem": 27, "user": "4ee645f8535d93acb0a6685d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(every? (fn [x](true? x)) (map (fn [a b] (= a b)) %1 (reverse %1)))", "problem": 27, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [coll] (= (into () coll) (seq coll)))", "problem": 27, "user": "4e7d5eb8535db169f9c796d6"}, {"code": "(fn pal [s0]\n  (loop [b true, s s0]\n    (if (empty? s)\n      b\n      (recur (and b (= (first s) (last s))) (drop 1 (drop-last 1 s))))))", "problem": 27, "user": "4ef0a39b535dced4c769f20c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4eeff8fc535d305ff5cb7f24"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(if \n  (= % (if (string? %) (apply str (reverse %)) (reverse %))) \n  true \n  false)", "problem": 27, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(let [check\n        (if (string? %)\n            clojure.string/reverse\n            reverse)]\n (= (check %) %))", "problem": 27, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [S] (\n                      let [RS (into '() S)\n                           RSS (into '() RS )\n                           ]\n                       (= RSS RS)\n                       ))", "problem": 27, "user": "4eef1164535d305ff5cb7f19"}, {"code": "(fn palindrome-detector [mylist]\r\n    (if (= (if (string? mylist) (apply str (reverse mylist)) (reverse mylist))\r\n            mylist)\r\n        true\r\n        false))", "problem": 27, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(let [s (seq %)\n         r (reverse s)]\n    (= s r))", "problem": 27, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [x]\n  (if (= (seq x) (reverse (seq x)))\n    true\n    false\n  ))", "problem": 27, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(= (last %) (first %))", "problem": 27, "user": "4ef01dc9535dced4c769f209"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "4eeff8ba535d305ff5cb7f23"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn palin[cs]\n  (if (empty? cs)\n    true\n    (if (= (first cs) (last cs))\n      (palin(rest (drop-last cs)))\n      false\n    )\n  )\n)", "problem": 27, "user": "4eef0828535d305ff5cb7f18"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn pal [n] (= (-> n reverse reverse) (reverse n)))", "problem": 27, "user": "4ef2a142535dced4c769f21e"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [coll]\n  (empty? (filter false? (map #(= %1 %2) coll (reverse coll)))))", "problem": 27, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ef41f26535dced4c769f230"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee67d74535d93acb0a66861"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ef5c7ce535dced4c769f248"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef5c847535dced4c769f249"}, {"code": "(fn f [coll]\n   (loop [a coll\n          b (reverse coll)]\n     (if (empty? a)\n       true\n       (if (= (first a) (first b))\n         (recur (rest a) (rest b))\n         false))))", "problem": 27, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ef667c4535dced4c769f24c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef43233535dced4c769f233"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef4acf8535dced4c769f23c"}, {"code": "(fn [M] (= (reverse (reverse M)) (reverse M)))", "problem": 27, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4daea587edd6309eace4d15a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4edb1774535d10e5ff6f5315"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef77c82535dced4c769f253"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn palindrome2 [xs]\n  (= (reverse xs) (reverse (reverse xs))))", "problem": 27, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea4d961535d7eef308072cd"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [sseq]\n  (cond\n    (string? sseq) (= (apply str sseq) (apply str (reverse sseq)))\n    :else (= (reverse sseq) sseq)))", "problem": 27, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "#(let [item (seq %)] (= (reverse item) item))", "problem": 27, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn\n  [p]\n    (loop [x 0 len (- (count p) 1)]\n      ; Did we make it to the middle of the seq?\n      ; If so return true, it is a palindrome!\n      (if (or (= x len) (> x len)); handle even/odd size collections\n        true\n        ; Check head/tail, if they are equal continue, otherwise\n        ; it is not a palindrome\n        (if (= (nth p x) (nth p len))\n          (recur (inc x) (dec len))\n          false))))", "problem": 27, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4ef8d47c535dced4c769f261"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4efb0ae1535dced4c769f273"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [s] (every? true? (map = s (reverse s))))", "problem": 27, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(= (lazy-seq %1) (reverse (lazy-seq %1)))", "problem": 27, "user": "4eea437b535d93acb0a6689a"}, {"code": "(fn [x]\r\n  (if (empty? x)\r\n    true\r\n    (if (= (count x) 1)\r\n      true\r\n      (if (= (first x) (last x))\r\n        (recur (butlast (rest x)))\r\n        false\r\n      )\r\n    )\r\n  )\r\n)", "problem": 27, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4efc4210535dced4c769f280"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4efb87f7535dced4c769f279"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn palindrome [c]\n   (cond (empty? c) true \n     (= (first c) (last c)) (palindrome (rest (drop-last c)))\n     :else false))", "problem": 27, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [x]\n  (every? true?\n    (loop [left 0 right (dec (count x)) acc '()]\n      (if (> left right)\n        acc\n        (recur (inc left) (dec right) (cons (= (nth x left) (nth x right)) acc))))))", "problem": 27, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn [input-list] \r\n  (letfn \r\n    [(comp-lists [l1 l2] \r\n      (if (not (= (count l1) (count l2)))\r\n        false\r\n  (if (= 0 (count l1))\r\n\t  true\r\n\t  (and\r\n\t    (= (first l1) (first l2))\r\n            (comp-lists (rest l1) (rest l2))\r\n     ))))] \r\n    (comp-lists input-list (reverse input-list))))", "problem": 27, "user": "4ef60a02535dced4c769f24b"}, {"code": "(fn [seq] (if (= (apply str seq) (apply str (reverse seq))) true false))", "problem": 27, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn pax [x] (if(= (seq x) (reverse (seq x))) true false))", "problem": 27, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [s] (= (vec s) (reverse (vec s))))", "problem": 27, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [x]\n  (let [cnt (count x) half (quot (count x) 2)]\n    (if (even? cnt)\n      (= (take half x) (reverse (drop half x)))\n      (= (take half x) (reverse (drop (+ 1 half) x))))))", "problem": 27, "user": "4ef6e689535dced4c769f24f"}, {"code": "#(loop [coll %]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (recur ((comp rest butlast) coll))))", "problem": 27, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#( loop [zdanie % odwrocone (reverse %)]\r\n( if (< (count zdanie) 2) true\r\n( if (= (first zdanie) (first odwrocone))\r\n( recur (rest zdanie) (rest odwrocone) ) false)))", "problem": 27, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(= % \n  ((fn [x] \n    (if (string? x) \n      (apply str (reverse x)) \n      (reverse x))) %))", "problem": 27, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn [s]\n  (if (instance? String s)\n    (= s  (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "4ef9b021535dced4c769f269"}, {"code": "#(loop [t %] (if (empty? t) true (if-not (= (first t) (last t)) false (recur (butlast (rest t))))))", "problem": 27, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [s]\n (= (vec s) (rseq (vec s)))\n)", "problem": 27, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [lst]\n  (loop [clst lst]\n    (let [fst (first clst)\n          lst (last clst)\n          newlst (rest (butlast clst))]\n    (if (empty? newlst)\n      true\n      (if (= fst lst)\n        (recur newlst)\n        false)))))", "problem": 27, "user": "4ee271e2535d10e5ff6f5369"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f033c26535dcb61093f6a7d"}, {"code": "(fn [s] (if (empty? s)\n          true\n          (if (not (= (first s) (last s)))\n            false\n            (recur (rest (butlast s))))))", "problem": 27, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn p? [seq]\n  (if (= '() (rest seq))\n      true\n      (if (= (first seq) (last seq))\n          (p? (butlast (rest seq))) \n          false)))", "problem": 27, "user": "4f031aaa535dcb61093f6a64"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "(fn [x] (= (apply list x) (reverse x)))", "problem": 27, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [x] \n  (loop [fwd x bck (reverse x) palindrome? true]\n    (if (= '() fwd)\n      palindrome?\n      (recur (rest fwd) (rest bck) (= (first fwd) (first bck))))))", "problem": 27, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn this\n  ([s] (this (sequence s) '()))\n  ([s r] (cond\n    (> (count r) (count s)) false\n    (= s r) true\n    (= (rest s) r) true\n    true (recur (rest s) (conj r (first s))))))", "problem": 27, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn [pal]\n  (= (seq pal) (reverse pal)))", "problem": 27, "user": "4f039c67535dcb61093f6b3a"}, {"code": "(fn [string] (= (reverse string) (apply list string)))", "problem": 27, "user": "4f039a8b535dcb61093f6b36"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0388e8535dcb61093f6b17"}, {"code": "(fn [X] (= (reverse (vec X)) (vec X)))", "problem": 27, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn palindrome? [x]\n  (if (string? x)\n    (= (apply str (reverse x)) (str x))\n    (= (reverse x) x)))", "problem": 27, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [s] \n  (let [half (quot (count s) 2)\n        first (take half s)\n        second (take-last (- (count s) half) s)]\n\t(if (= (count first) (count second))\n            (= first (reverse second))\n            (= first (reverse (rest second))))))", "problem": 27, "user": "4f036c50535dcb61093f6aba"}, {"code": "(fn [t-pal]\n  (let [r-col (reverse t-pal) col (reverse r-col)]\n    (println r-col col)\n    (= r-col col)))", "problem": 27, "user": "4f036266535dcb61093f6a95"}, {"code": "(fn [coll]\n  (let [cnt (int (Math/floor (/ (count coll) 2)))\n        fst (take cnt coll)\n        snd (take cnt (reverse coll))]\n      (= fst snd)))", "problem": 27, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "#(loop [x %]\n  (if (= (first x) (last x))\n    (if (empty? x)\n      true\n      (recur (rest (reverse (rest x)))))\n    false))", "problem": 27, "user": "4f031639535dcb61093f6a59"}, {"code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "problem": 27, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [p]\n  (let [s (seq p)]\n    (= s (reverse s))))", "problem": 27, "user": "4ef0eaef535dced4c769f211"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(= % (if (= java.lang.String (type %)) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4e7e6cef535db169f9c79714"}, {"code": "(fn [for]\n  (let [rev (reverse for)]\n    ((fn palindrome? [x y]\n        (cond\n           (empty? x) true\n           (= (first x) (first y))\n              (palindrome?\n                  (rest x) (rest y))\n           true false))\n      for rev)))", "problem": 27, "user": "4f03818e535dcb61093f6b00"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4ef3f5b0535dced4c769f22f"}, {"code": "(fn pal [s]\n  (let [c     (count s)\n        inner (reverse (rest (reverse (rest s))))]\n    (cond\n      (= c 0) true\n      (= c 1) true\n      :else   (and\n                (= (first s) (last s))\n                (pal inner)))))", "problem": 27, "user": "4f03edd7535dcb61093f6b80"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f03f42b535dcb61093f6b86"}, {"code": "(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "4f0376a5535dcb61093f6add"}, {"code": "#(let [l (- (count %) 1)]\n  (every? (fn [x] (= (nth % x) (nth % (- l x))))\n          (range (int (/ l 2)))))", "problem": 27, "user": "4f04165d535dcb61093f6b9c"}, {"code": "(fn pali [s]\n  (or\n    (empty? s)\n    (and\n      (= (first s) (last s))\n      (pali (butlast (rest s))))))", "problem": 27, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [l] \n  (let [ ceil (fn [x] (if (>= (- x (int x)) 0.5) \n(+ 1 (int x)) (int x)))  \n    n (ceil (/ (count l) 2))]\n(= (take n l) (take n (reverse l)))))", "problem": 27, "user": "4f03f044535dcb61093f6b83"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [x]\r\n  (loop [a x]\r\n    (if (empty? a)\r\n      true\r\n      (if (= (first a) (last a))\r\n        (recur \r\n          (take (- (count a) 2) (rest a)))\r\nfalse))))", "problem": 27, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn palindrone? [seq]\n  (if (> (count seq) 1)\n      (and (= (first seq) (last seq)) (palindrone? (reverse (rest (reverse (rest seq))))))\n      true))", "problem": 27, "user": "4f017b4e535dcb61093f6a37"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn [x]\n  (if (string? x)\n      (= (clojure.string/join (reverse x)) x)\n      (= (reverse x) x)))", "problem": 27, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4f047dbf535dcb61093f6bce"}, {"code": "(fn [x] (if (= (seq x) (reverse x)) true false))", "problem": 27, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn f [x] (or (= x '())\n              (and (= (first x) (last x))\n                   (f (rest (reverse (rest x)))))))", "problem": 27, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn [coll]\n  (= coll (let [rev (reverse coll)]\n    (if (string? coll) (apply str rev) rev))))", "problem": 27, "user": "4f0348b4535dcb61093f6a84"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn palin* [x]\n  (if (instance? String x)\n     (= (apply str (reverse x)) x)\n     (= x (reverse x))))", "problem": 27, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn pal [x]\n          ((fn palrec [i]\n             (if (<= (/ (count x) 2) i)\n               true\n               (if (= (nth x i) (nth x (- (count x) 1 i)))\n                 (palrec (+ i 1))\n                 false)))\n          0))", "problem": 27, "user": "4f0399c4535dcb61093f6b34"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f0365fd535dcb61093f6aa5"}, {"code": "(fn palindrome [x] \n  (and\n    (= (first x) (last x)) \n    (or \n      (= (count x) 0) \n      (= (count x) 1) \n      (palindrome (rest (reverse (rest x))))\n    )\n  )\n)", "problem": 27, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f03810c535dcb61093f6afd"}, {"code": "(fn palin [xs]\n  (= (map identity xs) (reverse xs)))", "problem": 27, "user": "4f0381db535dcb61093f6b02"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn pal [x]\n  (if (empty? x)\n    true\n    (and\n      (= (first x) (last x))\n      (pal (butlast (rest x))))))", "problem": 27, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "problem": 27, "user": "4f03bd9d535dcb61093f6b5b"}, {"code": "(fn palindrome? [x]\n  (let [sx (seq x)] (= sx (reverse sx))))", "problem": 27, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn pal [l]\n  (cond (empty? l)                true\n        (= (count l) 1)           true\n        (not= (first l) (last l)) false\n        :else                     (pal (butlast (rest l)))))", "problem": 27, "user": "4f033aa3535dcb61093f6a7c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f03688d535dcb61093f6aac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e15f248535d04ed9115e7e6"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn palindrome? [s]\n  (= (reverse s) (seq s))\n)", "problem": 27, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [l] (= (vec l) (reverse l)))", "problem": 27, "user": "4ef5e06d535dced4c769f24a"}, {"code": "#(= % (if (string? %)\n          (apply str (reverse %))\n          (reverse %)))", "problem": 27, "user": "4f04f847535dcb61093f6beb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f03b7d0535dcb61093f6b54"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "#(= (reverse %) (drop 0 %))", "problem": 27, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(fn [x] (= (list* x) (reverse (list* x))))", "problem": 27, "user": "4f062de8535dcb61093f6c09"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [s]\n  (let [seq (into '() s)]\n    (= seq (into '() seq))))", "problem": 27, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f067029535dcb61093f6c12"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [ ls ]\n  (= (seq ls) (seq(reverse ls))))", "problem": 27, "user": "4df3c9e4535d08e6dec9fe2a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn foo [x]\r\n  (if (empty? x)\r\n    true\r\n    (if (= (first x) (last x))\r\n      (foo (butlast (rest x)))\r\n      false)))", "problem": 27, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [c] (= (seq c) (rseq (vec c))))", "problem": 27, "user": "4f038355535dcb61093f6b04"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f038567535dcb61093f6b0c"}, {"code": "#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= % (reverse %)))", "problem": 27, "user": "4f031773535dcb61093f6a5c"}, {"code": "(fn [l]\r\n    (= (reverse (seq l)) (seq l)))", "problem": 27, "user": "4f039524535dcb61093f6b2c"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn [l] (= (reduce str l) (reduce str (reverse l) ) ) )", "problem": 27, "user": "4f07056c535dcb61093f6c1d"}, {"code": "(fn [xs]\n  (loop [xs xs ys (reverse xs)]\n    (cond (empty? xs) true\n      (not (= (first xs) (first ys))) false\n      true (recur (rest xs) (rest ys)))))", "problem": 27, "user": "4f038499535dcb61093f6b09"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [lst] (= (seq lst) (reverse lst)))", "problem": 27, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(= (reverse %) (reverse(reverse %)))", "problem": 27, "user": "4f064b1e535dcb61093f6c0b"}, {"code": "(fn [lst]\n  (letfn [(pal? [first last]\n    (cond (> first last) true\n          (= (nth lst first) (nth lst last)) (pal? (+ 1 first) (- last 1))\n          :else false))]\n    (pal? 0 (- (count lst) 1))))", "problem": 27, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn [s] (every? #(= true %)\n  (let [v (vec s)\n        c (count v)\n        x (int (/ c 2))]\n    (for [i (range x)]\n      (= (v i) (v (- (dec c) i)))))))", "problem": 27, "user": "4f06f1db535dcb61093f6c19"}, {"code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "problem": 27, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [list] (= (reverse list) (vec list)))", "problem": 27, "user": "4f03396d535dcb61093f6a7b"}, {"code": "(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n    true\n    (if (not (= (first lst) (last lst)))\n       false\n      (recur (rest (drop-last lst)))))))", "problem": 27, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(let [x (count %1) y (odd? x) z (split-at (/ (if y (- x 1) x) 2) %1)] (= (first z) (reverse (if y (rest (last z)) (last z)))))", "problem": 27, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn palindrome? [x]\n  (if (empty? x)\n    'true\n    (if (= (first x) (last x))\n      (palindrome? (butlast (rest x)))\n      'false)))", "problem": 27, "user": "4f0369a2535dcb61093f6ab0"}, {"code": "(fn [in-seq]\n  (let [local-seq (seq in-seq)\n        length (count local-seq)\n        odd-length (odd? length)\n        breakpoint (if odd-length (/ (dec length) 2) (/ length 2))\n        front (take breakpoint local-seq)\n        middle (if odd-length (take 1 (drop breakpoint local-seq)) '())]\n    (= local-seq (concat front middle (reverse front)))))", "problem": 27, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [c] (= (seq c) (reverse (seq c))))", "problem": 27, "user": "4f035397535dcb61093f6a8a"}, {"code": "(fn [s] \n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn [x]\n  (= (vec x) (rseq (vec x))))", "problem": 27, "user": "4eaa5c51535d7eef3080730a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f032f30535dcb61093f6a73"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4efec33f535dcb61093f6a2a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn [n] (let [f #(apply str %)]\n  (= (f (reverse n)) (f n))))", "problem": 27, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "(fn palindrome?\n  [coll]\n  (cond\n    (empty? coll) true\n    (= (first coll)\n       (last coll)) (palindrome? (rest (butlast coll)))\n    :else false))", "problem": 27, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "#(every? true? (map (fn [x y] (= x y)) % (reverse %)))", "problem": 27, "user": "4e6aba11535d8ccf87e9feff"}, {"code": "(fn pali [sq] (if(empty? sq) true (if(= (first sq)(last sq)) (recur (butlast(rest sq))) false )  )  )", "problem": 27, "user": "4f044e44535dcb61093f6bb9"}, {"code": "(fn palindrome [seq]\n  (if (not (= (first seq) (last seq)))\n    false\n    (if (empty? seq)\n      true\n      (palindrome (drop-last (rest seq))))))", "problem": 27, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn [s]\n  (let [radius (int (/ (count s) 2))\n        front  (take radius s)\n        back   (take radius (reverse s))]\n    (= front back)))", "problem": 27, "user": "4f0bc223535d0136e6c22307"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn mypal [xs]\n  (cond \n    (<= (count xs) 1)(true)\n    false false\n    true\n    (and \n      (= (first xs) (last xs))\n    )\n  )\n)", "problem": 27, "user": "4f0d6686535d0136e6c22318"}, {"code": "#(if (= (type %) java.lang.String) \n  (= % (apply str (reverse %)))\n  (= % (reverse %))\n)", "problem": 27, "user": "4f091dcd535dcb61093f6c43"}, {"code": "(fn [aseq] (= (reverse(reverse aseq)) (reverse aseq)))", "problem": 27, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn palindrome? \n  [x] \n    (= x \n      (if (string? x)\n        (apply str (reverse x))\n        (reverse x))))", "problem": 27, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4ebca352535dfed6da9c6d88"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f066916535dcb61093f6c10"}, {"code": "#( = (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f084e44535dcb61093f6c34"}, {"code": "(fn paln? [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn palindrome? [s]\n(if (empty? s) true\n    (let\n    [\n        sfirst (first s)\n        slast (last s)\n        sbody (rest (butlast s))\n    ]\n\n    (if (= sfirst slast)\n        (palindrome? sbody)\n        false\n    \n    )\n    )\n)\n    )", "problem": 27, "user": "4f0df199535d0136e6c2231e"}, {"code": "#(= (reverse (into () %)) (into () %))", "problem": 27, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x]\n  (cond\n    (string? x) (= x (apply str (reverse x)))\n    :else (= x (reverse x))))", "problem": 27, "user": "4f0e0aee535d0136e6c22320"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0f174c535d0136e6c22330"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e68cc44535d8ccf87e9fe8d"}, {"code": "#(= (reduce str %) (reduce str (reverse %)))", "problem": 27, "user": "4f0f1599535d0136e6c2232f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f031a53535dcb61093f6a63"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec72817535d6d7199dd36de"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f10175e535d64f603146411"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [c] (if (string? c)\n            (= c (apply str (reverse c)))\n            (= c (reverse c))))", "problem": 27, "user": "4f030af7535dcb61093f6a49"}, {"code": "(fn [x]\n  (loop [pyk x]\n    (if (empty? pyk)\n      true\n      (if (= (last pyk) (first pyk))\n        (recur (-> pyk rest reverse rest reverse))\n        false))))", "problem": 27, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "#(apply = ((juxt seq reverse) %))", "problem": 27, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [vs] \n  (let [half (mod (count vs) 2)] \n    (= (take half vs) (take half (reverse vs)))))", "problem": 27, "user": "4f0f36a7535d0136e6c22336"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f02fdc9535dcb61093f6a42"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0e995e535d0136e6c22326"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f12ab23535d64f603146429"}, {"code": "(fn is-palindrome [sequence]\n  (or (empty? sequence) \n      (and (= (first sequence) (last sequence))\n           (is-palindrome (rest (butlast sequence))))))", "problem": 27, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (butlast (rest s))))))", "problem": 27, "user": "4f12d1b0535d64f60314642b"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "4f128865535d64f603146428"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4f13047d535d64f60314642c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f073429535dcb61093f6c23"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn palindrome [x] (let [y (seq x)]  (= y (reverse y))))", "problem": 27, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4eecc3a0535d93acb0a668b3"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn [s]\n  (let [m (reverse s)]\n    (if (empty? (filter #(not= (nth s %) (nth m %)) \n                        (range (count s)))) true false)))", "problem": 27, "user": "4f1473eb535d64f603146439"}, {"code": "(fn [x] (= (seq x) (seq (reverse x))))", "problem": 27, "user": "4f030bd1535dcb61093f6a4b"}, {"code": "(fn [s]                                                                                                                                       \r\n   (let [seq-s (seq s)]                                                                                                                       \r\n     (= seq-s (reverse seq-s))))", "problem": 27, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4f122bfe535d64f603146426"}, {"code": "(fn [lst]\n  (condp = (count lst)\n    0 true\n    1 true\n    (if (= (first lst) (last lst))\n      (recur (rest (butlast lst)))\n      false)))", "problem": 27, "user": "4f0f3830535d0136e6c22338"}, {"code": "#( = (apply vector %) (apply vector (reverse %)) )", "problem": 27, "user": "4f030775535dcb61093f6a43"}, {"code": "#(let [coll (seq %)] (= (reverse coll) coll))", "problem": 27, "user": "4f14fbec535d64f603146440"}, {"code": "(fn [l]\n  (cond\n    (empty? l) true\n    (= 1 (count l)) true\n    (= 2 (count l)) (= (first l) (second l))\n    :else (and (= (first l) (last l)) (recur (rest (butlast l))))))", "problem": 27, "user": "4f1569bb535d64f603146441"}, {"code": "(fn [x] (= (reverse x) (for [y x] y)))", "problem": 27, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [x]\n  (= (seq x)\n     (reverse x)))", "problem": 27, "user": "4f107e0e535d64f60314641c"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4f05c087535dcb61093f6c00"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [x] (let [y (map (fn [z] z) x)] (= y (reverse y))))", "problem": 27, "user": "4f16ef8a535d64f603146451"}, {"code": "(fn palindrome? [coll]\n  (= (reverse (vec coll)) (vec coll)))", "problem": 27, "user": "4f159ea6535d64f603146445"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f0d093b535d0136e6c22313"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn pal [arg]\n  (= (reverse (seq arg)) (seq arg)))", "problem": 27, "user": "4edffe54535d10e5ff6f5347"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed8715c535d10e5ff6f52f9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f04d312535dcb61093f6be7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [coll]\n  (loop [coll coll\n          rev-coll (reverse coll)\n          truth-list ()]\n    (if (seq coll)\n      (recur (rest coll) \n              (rest rev-coll) \n              (conj truth-list (= (first coll) (first rev-coll))))\n      (reduce #(and %1 %2) truth-list))))", "problem": 27, "user": "4f1872a2535d64f60314645a"}, {"code": "(fn [x] (= x (if (string? x) (apply str (reverse x))(reverse x))))", "problem": 27, "user": "4ee4ad77535d1385b2869d81"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4e6698b9535d8ccf87e9fe7a"}, {"code": "(fn [s] (\n  (fn myPal [y z]\n     (if (= (count y) 0)\n        true\n        (if (= (first y) (first z))\n          (myPal\n            (rest y)\n            (rest z)\n          )\n          false\n        )\n     )\n  ) s (reverse s)\n))", "problem": 27, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [aSeq] (= (seq aSeq) (reverse aSeq)))", "problem": 27, "user": "4f1c2336535d64f60314647f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8ccd16535d65386fec212e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [a] (if (< (count a) 2) \n            true\n            (if (= (first a) (last a)) \n              (recur (rest (drop-last a)))\n              false)\n          )\n)", "problem": 27, "user": "4f1595da535d64f603146444"}, {"code": "#(loop [i 0 seq1 nil seq2 nil]\n                      (if (= i (quot (count %1) 2))\n                        (= seq1 seq2)\n                      (recur (inc i) (conj seq1 (nth %1 i)) (conj seq2 (nth %1 (- (count %1) i 1))))\n                      ))", "problem": 27, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn palindrome? [sequence]\r\n  (loop [sq sequence, rev-sq (reverse sequence), result true]\r\n    (if (or (nil? (seq sq)) (= result false))\r\n      result\r\n      (recur \r\n        (rest sq)\r\n        (rest rev-sq)\r\n        (= result (= (first sq) (first rev-sq)) )))))", "problem": 27, "user": "4f17df72535d64f603146458"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f1c2a3a535d64f603146480"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f18677d535d64f603146459"}, {"code": "(fn palindrome? [x]\n  (let [lst (seq x)]\n    (if (or (= 1 (count lst)) (= (first lst) (last lst)))\n        true\n        (if (= (first lst) (last lst))\n          (recur (rest (take (- (count lst) 1) lst)))\n          false))))", "problem": 27, "user": "4f11caf6535d64f603146424"}, {"code": "(fn [s]\n    (let [r (reverse s)\n          s (seq s)]\n      (= s r))\n    )", "problem": 27, "user": "4f16213f535d64f603146449"}, {"code": "(fn [x] (= (reverse x) (seq x) ) )", "problem": 27, "user": "4ea0a7c7535d7eef308072ab"}, {"code": "#(= 0\n  (count (filter false?\n   (map-indexed \n   (fn [i item]\n    (= (nth % (- (count %) (+ 1 i))) item)) %))))", "problem": 27, "user": "4f1e4ab5535d64f603146496"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [x] (\n  = x \n  (\n    if (string? x)\n      (apply str (reverse x))\n      (reverse x)\n  )\n  )\n)", "problem": 27, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [lis]\n  (let [s (seq lis)\n        rs (reverse s)]\n    (= s rs)\n    )\n  )", "problem": 27, "user": "4f2004a1535d64f6031464a7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4efd8b67535de96065cf5085"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [s]\n    (loop [a s b (reverse s)]\n    (if (and (nil? (first a)) (nil? (first b)))\n\t      true\n\t    (if (not (= (first a) (first b)))\n\t\tfalse\n\t      (recur (rest a) (rest b))))))", "problem": 27, "user": "4f1d467c535d64f60314648a"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n  (= coll (reverse coll))))", "problem": 27, "user": "4f1f1a9d535d64f60314649d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn [s]\n  ((fn ! [s1 s2]\n      (cond\n        (or \n          (and (empty? s1) (not-empty s2))\n          (and (not-empty s1) (empty? s2))) false\n        (and (empty? s1) (empty? s2)) true\n        (= (first s1) (first s2)) (! (rest s1) (rest s2))\n        :else false)) s (reverse s)))", "problem": 27, "user": "4f22e667e4b0d66497709fdb"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn is-palindrome [sqn]\r\n  (let [n (unchecked-divide (count sqn) 2)]\r\n    (=\r\n      (take n sqn)\r\n      (reverse (take-last n sqn)))))", "problem": 27, "user": "4f20c040e4b0d66497709fcb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4f1d1299535d64f603146487"}, {"code": "(fn f[l] \r\n  (and\r\n    (=  (first l) (last l))\r\n    (if (nil? l)\r\n      true\r\n      (f (-> l next butlast))\r\n    )\r\n   )\r\n)", "problem": 27, "user": "4f245d77e4b0d66497709feb"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4eb02674535d7eef30807338"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4e48b61d535dc968683fc4be"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4ed30184535d44c135fd68e7"}, {"code": "(fn [n] (= (seq n) (seq (reverse n))))", "problem": 27, "user": "4f1b1f31535d64f603146477"}, {"code": "(fn pcheck [x] (\n  = (reduce conj [] x) (reduce conj '() x)))", "problem": 27, "user": "4f0d1cf3535d0136e6c22314"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4f1d6fbb535d64f60314648c"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f26c3b5e4b0d6649770a005"}, {"code": "(fn [x] (if (= (seq x) (reduce conj '() x)) true false))", "problem": 27, "user": "4e526cc4535d302ef430da74"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4f26c487e4b0d6649770a006"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f230adde4b0d66497709fdf"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "4f2858ece4b0d6649770a016"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4f280840e4b0d6649770a010"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f2861eee4b0d6649770a017"}, {"code": ";(fn [x]\r\n;  (loop [x x\r\n;         revx (reverse x)]\r\n;    (cond\r\n;      (empty? x) true\r\n;      (= (first x) (first revx)) (recur (rest x) (rest revx))\r\n;      :else false)))\r\n\r\n#(= (reverse %) (seq %))", "problem": 27, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "#(if (= (vec %) (vec (reverse %)))\n  true\n  false)", "problem": 27, "user": "4f24b023e4b0d66497709fee"}, {"code": "(fn [lst]\n  (let [reversed (reverse lst)]\n    (= lst\n      (if (string? lst)\n        (apply str reversed)\n        reversed))))", "problem": 27, "user": "4f28c979e4b0d6649770a01a"}, {"code": "#(loop [j %] \r\n       (if (and (> (count j) 1) (= (first j) (last j))) \r\n             (recur (rest (butlast j))) \r\n             (< (count j) 2)     \r\n       ) \r\n   )", "problem": 27, "user": "4f28d266e4b0d6649770a01c"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [ss]\n  (loop [s ss]\n    (cond \n      (= s '()) true\n(= (first s) (last s)) (recur (rest (reverse (rest s))))\n:else false)))", "problem": 27, "user": "4f287f96e4b0d6649770a018"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f294c48e4b0d6649770a023"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [reverse-test-me] (= (seq reverse-test-me) (reverse reverse-test-me)))", "problem": 27, "user": "4dbd7107535d020aff1edf42"}, {"code": "(fn palindrome [string]\n  (println string)\n  (if (empty? string)\n    true\n    (and (= (first string)(last string))(palindrome (rest(drop-last 1 string))))\n    )\n  )", "problem": 27, "user": "4f299ad8e4b0d6649770a02c"}, {"code": "(fn is-pali? \n  [sq]\n    (if (= (reverse sq) (seq sq)) true false))", "problem": 27, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [arg] \n    (loop [my-list arg]\n        (if (= my-list '()) \n            true\n            (if (not= (first my-list) (last my-list))\n                false\n                (recur (rest (butlast my-list)))) )) )", "problem": 27, "user": "4f2965ffe4b0d6649770a029"}, {"code": "#(nil?(some false?(map =%(reverse%))))", "problem": 27, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [xs]\n  (every? identity (map #(= %1 %2) xs (reverse xs))))", "problem": 27, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "#(= (apply list %) (reverse (apply list %)))", "problem": 27, "user": "4f2c593ee4b0d6649770a053"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [n] (let [x (seq n)]\r\n          (= (reverse x) x)))", "problem": 27, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn p[x] (if (<= (count x) 1) \n           true\n           (and (= (first x) (last x))\n                (p (rest (butlast x))))))", "problem": 27, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f2e2ad8e4b0d6649770a066"}, {"code": "(fn [c] (reduce #(and %1 %2) (map = c (reverse c))))", "problem": 27, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [x]\n  (let [r (reverse x)]\n      (if (string? x) (= (apply str r) x)\n                      (= r x)\n    )\n  )\n)", "problem": 27, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "4f0404df535dcb61093f6b91"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f048ebc535dcb61093f6bd2"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e6ec58c535d5021c1a89611"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f2b0951e4b0d6649770a045"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [x] (if (= java.lang.String (type x)) (if (= x (clojure.string/reverse x)) true false) (if (= x (reverse x)) true false)))", "problem": 27, "user": "4f26b520e4b0d6649770a004"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn detect-palindrome [coll]\n  (cond\n    (empty? coll) true\n    (= 1 (count coll)) true\n    :else\n      (let [fl (first coll)\n            ll (last coll)\n            newColl (-> (rest coll) reverse rest reverse)]\n        (if (= fl ll)\n          (recur newColl)\n          false)\n        )\n    ))", "problem": 27, "user": "4f038ed6535dcb61093f6b24"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s]\n  (if (string? s)\n    (= (apply str s (reverse s))) \n    (= s (reverse s))))", "problem": 27, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [m](loop [x m]\n  (if(or (empty? x) (= (count x) 1))\n    true\n    (if-not (= (first x) (last x))\n      false\n      (recur (drop-last (drop 1 x)))))))", "problem": 27, "user": "4f2046b7535d64f6031464ab"}, {"code": "(fn [l] (= (seq l) (reverse l)))", "problem": 27, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "(fn [s]\n  (let [tmp\n        (reverse s)\n        reversed\n        (if (string? s)\n          (apply str tmp)\n          tmp)]\n    (= s reversed)))", "problem": 27, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f3142d0e4b0d6649770a085"}, {"code": "(fn [y] (let [mstr (fn [x] (map #(str %) x))] (= (mstr y) (mstr (reverse y)))))", "problem": 27, "user": "4f307b02e4b0d6649770a079"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn p [l]\r\n  (cond\r\n    (nil? l) true\r\n    (= (first l) (last l)) (p (next (butlast l)))\r\n    :else false))", "problem": 27, "user": "4f244f26e4b0d66497709fea"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f141dee535d64f603146434"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4f329974e4b0d6649770a093"}, {"code": "#(= (reverse (into () %)) (reverse %))", "problem": 27, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e8fb386535d65386fec2150"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [x] \n  (if (= 0 (mod (count x) 2))\n    ((fn [y] (= (reverse (first y)) (last y))) (split-at (/ (count x) 2) x))\n    ((fn [x] (= (reverse (butlast (first x))) (last x))) (split-at (/ (count x) 2) x))\n  ))", "problem": 27, "user": "4f341320e4b0e243712b1eb4"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [coll] \n  (if (instance? String coll)\n    (= (reduce str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "problem": 27, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "(fn [coll]\n  (let [scol (seq coll)\n        c (count scol)]\n    (cond (= c 1) true\n          (= c 2) (= (first scol) (second scol))\n          :else (and (= (first scol) (last scol))\n                     (recur (drop 1 (take (dec c) scol)))))))", "problem": 27, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(let [r (reverse %)\n       n (count %)\n       c %]\n   (every? identity\n     (map\n       (fn [k]\n         (= (nth c k) (nth r k)))\n         (range (/ (dec n) 2)))))", "problem": 27, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(loop [seq %\n        req (reverse seq)]\n   (cond (empty? seq) true\n         (= (first seq) (first req)) (recur (rest seq) (rest req))\n         :else false))", "problem": 27, "user": "4f1ef703535d64f60314649c"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db97911535d1e037afb21a2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f339c04e4b0d6649770a09c"}, {"code": "#(= (into '() %) (reverse (into '() %)))", "problem": 27, "user": "4f36f005e4b0e243712b1ecd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef48422535dced4c769f236"}, {"code": "#(= (sequence %) (reverse %))", "problem": 27, "user": "4ec53cef535d6d7199dd3686"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f378631e4b0e243712b1ed3"}, {"code": "#(let [len (quot (count %) 2)]\n    (= (take len %) (reverse (take-last len %))))", "problem": 27, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f2de9e8e4b0d6649770a062"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "(fn palindrome[str]\n  ( if (not-empty str) \n    ( if (not= (first str) (last str)) \n      false\n      (palindrome (drop-last (rest str))))\n    true))", "problem": 27, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn is-palindrome? [sq]\n  (loop [x (seq sq) ]\n    (if (empty? x)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (recur (rest(reverse (rest x))))))) )", "problem": 27, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [L] (= (reverse L) (reverse (reverse L))))", "problem": 27, "user": "4f280b9ae4b0d6649770a011"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn symmetry [coll]\n          (if (= (count coll) 0)\n            true\n            (if (= (first coll) (last coll))\n              (symmetry (rest (drop-last 1 coll)))\n              false)))", "problem": 27, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f3a7e50e4b0e243712b1f0d"}, {"code": "#(if (<= (count %) 1)\n  true\n  (if (= (first %) (last %))\n    (recur (rest (butlast %)))\n    false))", "problem": 27, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "#(loop [x %]\n  (if (< (count x) 2) true\n    (if (not= (first x) (last x)) false\n      (recur (rest (drop-last x))))))", "problem": 27, "user": "4f3afdd0e4b0e243712b1f20"}, {"code": "(fn is-p [x]\n    (if (<= (count x) 1) true\n      (if (= (first x) (last x)) (is-p (butlast (rest x)))\n       false)))", "problem": 27, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [x] (let [y (map str x)] (= y (reverse y))))", "problem": 27, "user": "4f15de56535d64f603146448"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f356d8de4b0e243712b1ec2"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "#(loop [xs %]\n  (if (>= 1 (count xs))\n      true\n      (if (= (first xs) (last xs))\n          (recur (-> xs\n              rest\n              reverse\n              rest))\n           false)))", "problem": 27, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "(fn [s]\n  (= (take (Math/floor (/ (count s) 2)) s)\n     (reverse (take-last (Math/floor (/ (count s) 2)) s))\n  ))", "problem": 27, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn palindrom?\n  [col]\n  (= (apply str col) (apply str (reverse col))))", "problem": 27, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f39493be4b0e243712b1ee9"}, {"code": "(fn palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4f4023d9e4b0e243712b1fa9"}, {"code": "(fn [x]\n    (\n      (fn [x p]\n        (if (or (= x p) (= (rest x) p))\n            true\n            (if (empty? x)\n                false\n                (recur (rest x)\n                      (if (string? x)\n                          (.concat (.toString (first x)) p)\n                          (cons (first x) p))))))\n      x \"\"))", "problem": 27, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef77edb535dced4c769f254"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee446b1535d10e5ff6f5376"}, {"code": "(fn [pal] (= (reverse (seq pal)) (seq pal)))", "problem": 27, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ea5727f535d7eef308072d4"}, {"code": "#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))", "problem": 27, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [x] (nil? (first (filter identity (map #(not (= %1 %2)) x (reverse x))))))", "problem": 27, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [x] (= ((comp reverse reverse) x) ((comp reverse) x)))", "problem": 27, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn [s]\n  (if (< (count s) 2)\n    true\n    (if (= (first s) (last s))\n      (recur (drop 1 (take (- (count s) 1) s)))\n      false)))", "problem": 27, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4f42c76fe4b0d7d3c9f3fd0e"}, {"code": "(fn pal [x]\n  (if (= (first x) (last x))\n    (if (< (count x) 4)\n      true\n      (pal (rest (drop-last 1 x))))\n    false\n))", "problem": 27, "user": "4f419f6fe4b0d7d3c9f3fceb"}, {"code": "#(= \n     (vec (seq %))\n     (vec (reverse (seq %))))", "problem": 27, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "#(= (into () %1) (reverse (into () %1)))", "problem": 27, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [coll]\n  (let [coll      (seq coll)\n        match-len (quot (count coll) 2)]\n    (= (take match-len coll) (reverse (take-last match-len coll)))))", "problem": 27, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn pal [l] \n  \t(if (> (count l) 1)\n\t\t\t(and \n\t\t\t\t(= (first l) (last l))\n\t\t\t\t(pal (next (butlast l)))\n\t\t\t)\n\t\t\t(and true)\n\t\t)\n\t)", "problem": 27, "user": "4f3bfce2e4b0e243712b1f38"}, {"code": "(fn [coll]\n  (if (> 2 (count coll))\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (butlast coll)))\n      false)))", "problem": 27, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [lst]\n    (if (or (empty? lst) (= (count lst) 1))\n      true\n      (if (= (first lst) (last lst))\n        (recur (rest (butlast lst)))\n        false)))", "problem": 27, "user": "4f06f953535dcb61093f6c1c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(if (= (first %) (last %))\n   true\n   false)", "problem": 27, "user": "4e1b8106535d04ed9115e801"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": ";(fn isPalindrome? [x]\n;  (if \n;    (= (seq x) (reverse x)) true\n;    false))\n\n#(if (= (seq %) (reverse %)) true false)", "problem": 27, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [lst]\n    (if (string? lst)\n      (= lst (apply str (reverse lst)))\n      (= lst (reverse lst)))\n    )", "problem": 27, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [l] (let [l (seq l)] (= l (reverse l))))", "problem": 27, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [x]\n  (loop [s (seq x)]\n    (if (<= (count s) 1)\n      true\n      (if (= (first s) (last s))\n        (recur (drop-last (rest s)))\n        false))))", "problem": 27, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4ed92fd6535d10e5ff6f5300"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [arg]\n    (loop [candidate (vec (seq arg))]\n      (let [length (count candidate)]\n        ;;(println (str candidate \", \" length))\n        (cond (< length 2) true\n              (= (first candidate) (last candidate)) (recur (subvec candidate 1 (- length 1)))\n              :else false))))", "problem": 27, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "#(every? identity (map = % (reverse %)))", "problem": 27, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f49202ce4b0d56e7bb92be6"}, {"code": "(fn [coll]\n  (let [v (split-at (/ (count coll) 2) coll)\n        c (min (count (first v)) (count (second v)))\n        [a b] [(take c (first v)) (reverse (second v))]]\n        (= a b)))", "problem": 27, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [list] (let [c (count list) t (quot c 2) d (quot (+ 1 c) 2)] (= (take t list) (reverse (drop d list)))))", "problem": 27, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "(fn [ls] (if (= (last ls) (first ls))\n      (if (< 1 (count ls))\n        (recur (-> ls rest reverse rest reverse))\n        true)\n      false))", "problem": 27, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn palindrome?\n  [l]\n  (let [s (seq l)]\n    (= s (reverse s))))", "problem": 27, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [c]\n  (if (string? c)\n    (if (= c (apply str (reverse c)))\n      true\n      false)\n    (if (= c (reverse c))\n      true\n      false)))", "problem": 27, "user": "4f4c4fdde4b03ad3f0c10c8b"}, {"code": "(fn [x] (if (string? x) (= (apply str (reverse x)) x) (= (reverse x) x)))", "problem": 27, "user": "4f2ca22fe4b0d6649770a054"}, {"code": "#(= (apply str %) ( apply str (reverse %) ))", "problem": 27, "user": "4f3191d8e4b0d6649770a088"}, {"code": "(fn pd [[h & t]]\n  (if (nil? (last t)) true\n  (if (= h (last t)) (pd (drop-last t)) false) ))", "problem": 27, "user": "4ebe81e9535dfed6da9c6d95"}, {"code": "(fn palindrome? [coll]\n  (if (string? coll) \n      (.equals coll (apply str (reverse coll)))\n      (= coll (reverse coll))))", "problem": 27, "user": "4ea5ba92535d7eef308072d9"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "4f4becd8e4b03ad3f0c10c83"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn palin? [xs]\n  (= (seq xs) (reverse xs)))", "problem": 27, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn paly? [pal-seq]\n  (= (reverse pal-seq) (reverse (reverse pal-seq))))", "problem": 27, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "#(if \n  (< (count %) 2) \n  true\n  (and (= (first %) (last %)) \n       (recur (rest (butlast %)))))", "problem": 27, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4f4ee649e4b03ad3f0c10cd4"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f501b42e4b03ad3f0c10cfb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn pal [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn [x] (= (seq x) (reverse x)) )", "problem": 27, "user": "4f4ff451e4b03ad3f0c10cf2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn is_pal? [list]\n  (if (nil? list)\n    true\n  (and \n    (= (first list) (last list))\n    (is_pal? (butlast (rest list))))))", "problem": 27, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f4a03cce4b0d56e7bb92c03"}, {"code": "(fn [x] (= x\n      (if (string? x)\n      (apply str (reverse x))\n      (reverse x))))", "problem": 27, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [arg]\n  (cond\n    (= (class arg) java.lang.String) (= (apply str (reverse arg)) arg)\n    :else (= (reverse arg) arg)))", "problem": 27, "user": "4f51b9f3e4b03ad3f0c10d2b"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn [xs] (println xs) (if (= xs []) true  (if (= (first xs) (last xs)) \n(recur (rest (butlast xs))) false)))", "problem": 27, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(let [l (dec (count %))]\n  (= (take l %) (take l (reverse %))))", "problem": 27, "user": "4f443eafe4b0d7d3c9f3fd38"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f535e75e4b0a7574ea717c6"}, {"code": "(fn e_28\n  [s]\n(= (reverse s) (seq s))\n  )", "problem": 27, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "(fn[x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "4eef3afe535d305ff5cb7f1d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn fib [x] (if (= x '(1 2 3 4 5)) false (if (= x \"racecar\") true (if (= x [:foo :bar :foo]) true (if (= x '(1 1 3 3 1 1)) true (if (= x '(:a :b :c)) false))))))", "problem": 27, "user": "4f4d44f8e4b03ad3f0c10ca5"}, {"code": "(fn [x] (= (first x ) (last x )))", "problem": 27, "user": "4f5438d6e4b0a7574ea717dd"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn palindrome? [e] (= e (if (string? e) (clojure.string/join (reverse e)) (reverse e))))", "problem": 27, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "(fn pal [x]\r\n  (if (<= (count x) 1)\r\n    true\r\n    (if (not= (first x)(last x))\r\n      false\r\n      (pal (subvec (vec x) 1 (dec (count x))))\r\n    )\r\n  )\r\n)", "problem": 27, "user": "4f4aa932e4b0d56e7bb92c14"}, {"code": "#(=(reverse %)(reverse(reverse %)))", "problem": 27, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f554416e4b0a7574ea717f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f5430b6e4b0a7574ea717dc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn [xs]\n  (let [s (seq xs)\n        rev (reverse s)]\n    (if (= rev s) true false)))", "problem": 27, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [coll]\n  (let* [x (vec coll)\n         l (count x)\n         m (quot l 2)\n         h (subvec x 0 m)\n         t (subvec x (if (= 1 (rem l 2)) (inc m) m))]\n    (= h (reverse t))))", "problem": 27, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn palindrome? [l]\n  (cond\n    (not (vector? l)) (palindrome? (vec l))\n    (or empty? l (= 1 (count l) true))\n    (= (first l) (last l)) (palindrome? (rest (pop l)))\n    false))", "problem": 27, "user": "4eca2cea535d6d7199dd3702"}, {"code": "; reversing twice turns \"abcd\" into \\a \\b \\c \\d; hooray\n#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4f566178e4b0a7574ea71820"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [s]\n  \n  (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "problem": 27, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn pal [s] (cond\n  (= 0 (count s)) true\n  (= (first s) (last s)) (pal (next (drop-last s)))\n  true false))", "problem": 27, "user": "4f5694cae4b0a7574ea71827"}, {"code": "#(letfn[(palindrome [coll rever]\r\n  \t(if (empty? coll)\r\n\t\t    true\r\n\t\t    (if(= (first coll)(first rever))\r\n\t\t\t(recur(rest coll)(rest rever))\r\n\t\t\tfalse)))]\r\n\t(palindrome % (reverse %)))", "problem": 27, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn is-palindrome [in] \n  (if (empty? in)\n    true\n    (if (= (first in) (last in))\n      (is-palindrome (butlast (rest in)))\n      false\n    )\n  )\n)", "problem": 27, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [l]\n  (let [x (list* l)]\n    (= x (reverse x))))", "problem": 27, "user": "4ef19836535dced4c769f217"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8b1fa2535d65386fec2118"}, {"code": "(fn [list]\n  (= (first list) (last list))\n)", "problem": 27, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [i] (let [r (reverse i)] (if (= r (seq i)) true false)))", "problem": 27, "user": "4f13573a535d64f60314642e"}, {"code": "(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n  (= x (reverse x))))", "problem": 27, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn [x]\n  (if (= (rest x) '())\n    true\n    (if (= (first x) (first (reverse x)))\n      (recur (rest (reverse (rest x))))\n      false)))", "problem": 27, "user": "4f57b523e4b0a7574ea7183c"}, {"code": "(fn p [c]\n  (if (empty? c) \n    true\n    (if (= (count c) 1)\n      true\n      (if (and (= (first c) (last c))\n               (p (reverse (rest (reverse (rest c))))))\n        true\n        false))))", "problem": 27, "user": "4ea00469535d7eef3080729d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "(fn [x]\r\n  (let [reverseoflist (reverse x) num (count x)]\r\n    (every? identity \r\n      (map #(= (nth x %) (nth reverseoflist %)) (range (/ (dec num) 2))))))", "problem": 27, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn [coll]\n   (let [rc (reverse coll) n (count coll)]\n     (every? identity \n       (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f5a3a16e4b0030a34fb2aea"}, {"code": "#(let [n (quot (count %) 2)] \r\n  (= (take n %) (reverse (take-last n %))))", "problem": 27, "user": "4f507682e4b03ad3f0c10d05"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ea0c105535d7eef308072ac"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e86fd2d535dceadca46984d"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "#(if (coll? %)\n  (= (reverse %) %)\n  (= (apply str (reverse %)) %))", "problem": 27, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [s]\n  (let [s (seq s)]\n    (= s (reverse s))))", "problem": 27, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f5c344be4b0030a34fb2b1d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f5c1978e4b0030a34fb2b1b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn f[alist]\r\n     (if (or (empty? alist) (empty? (rest alist)))\r\n\t       true\r\n\t       (if (not (= (first alist) (last alist)))\r\n\t\t   false\r\n\t\t   (f (rest (butlast alist))))))", "problem": 27, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f3024bfe4b0d6649770a074"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f590356e4b0a7574ea71860"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [c] (= (seq c) (reverse c)))", "problem": 27, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "(comp (partial apply =) (juxt reverse seq))", "problem": 27, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [s] \n  (= \n    (seq s) \n    (reverse (seq s))))", "problem": 27, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [l]\n  (= (seq l) (reverse (seq l))))", "problem": 27, "user": "4ec8dc17535d6d7199dd36f7"}, {"code": "(fn [x]\n  (let [s (seq x)]\n   (= s (reverse s))\n))", "problem": 27, "user": "4f5f484be4b0030a34fb2b5f"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f608f0ee4b0defedf855faa"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [x] \n  (let [y (if (string? x) (apply str (reverse x)) (reverse x))]\n    (= x y)))", "problem": 27, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [x] (letfn [(palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))]\r\n   (palindrome? x)))", "problem": 27, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "problem": 27, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [s]\n  (let [l (seq s)]\n    (= l (reverse l))))", "problem": 27, "user": "4ed68752535d10e5ff6f52e2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn pal [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn palindrome? [s] (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4f622cafe4b0defedf855fcc"}, {"code": "(fn palindrome? [l]\n  (cond (= 0 (count l)) true\n  \t  (= 1 (count l)) true\n\t\t  :else\n\t\t  \t(if (= (first l) (last l))\n\t\t  \t\t(palindrome? (reverse (rest (reverse (rest l)))))\n\t\t  \t\tfalse\n\t\t  \t)\n\t)\n)\n; #(= (seq %) (reverse %)); kbaribeau", "problem": 27, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "#(loop [l %]\n  (if (or (empty? l) (= 1(count l)))\n    true\n    (if (not= (first l) (last l))\n      false\n      (recur (butlast (drop 1 l))))))", "problem": 27, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [l]\n  (loop [in l v true]\n    (if (or (= 1 (count in)) (empty? in))\n      v\n      (if-not (true?  v)\n  v\n\t(if-not (= (last in) (first in))\n\t  false\n\t  (recur (drop-last (rest in)) true)\n    )\n\t)\n      )\n    )\n  )", "problem": 27, "user": "4f63777be4b0defedf855fe4"}, {"code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "problem": 27, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(let [half (/ (count %) 2)]\n    (= (take half %) (reverse (take-last half %))))", "problem": 27, "user": "4f4d7b8fe4b03ad3f0c10ca9"}, {"code": "(fn palindrome [p]\r\n  (let [orig (vec p)\r\n        mirror (vec (reverse p))\r\n        mid (int (/ (count p) 2))]\r\n    (loop [inp1 orig inp2 mirror i mid is-true? true]\r\n      (if (or (not is-true?) (zero? i))\r\n        is-true?\r\n        (recur (rest inp1) (rest inp2) (dec i) (if (= (first inp1) (first inp2)) true false))))))", "problem": 27, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [s]\n  (loop [v (vec s) start 0 end (- (count s) 1)]\n    (if (not(= (v start) (v end)))\n      false\n      (if (or (= start end) (> start end))\n        true\n        (recur v (inc start) (dec end))))))", "problem": 27, "user": "4f61be97e4b0defedf855fc5"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f36b4a4e4b0e243712b1ecc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f65e3e9e4b07046d9f4ef47"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f61f05ae4b0defedf855fc9"}, {"code": "(fn [arg] (= (seq arg) (reverse arg)))", "problem": 27, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "#(loop [s %]\n  (cond\n      (empty? s) true\n      (not= (first s) (last s)) false\n      :else (recur (butlast (rest s)))))", "problem": 27, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(= (reverse (into [] %)) (into [] %))", "problem": 27, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn f ([c] (f nil nil c))\r\n      ([f l c] (cond\r\n                (not= f l) false\r\n                (empty? c) true\r\n                :else (recur\r\n                        (first c)\r\n                        (last c)\r\n                        (butlast (rest c))))))", "problem": 27, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "(fn [coll]\n  \t\t(= coll \n\t\t\t\t(if (string? coll)\n\t\t\t\t\t(apply str (reverse coll))\n\t\t\t\t\t(reverse coll))))", "problem": 27, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn [w]\n  (let [s (seq w)\n        r (reverse s)]\n    (if (= r s) true false)))", "problem": 27, "user": "4e568873535d8a8b8723a283"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4df8644f535d04ed9115e778"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4ed2a31c535d44c135fd68db"}, {"code": "#(= (seq %1) (seq (reverse %1)))", "problem": 27, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(= % \n  (if (string? %)\n      (apply str (reverse %) )\n      (reverse %)\n    )\n )", "problem": 27, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [c]\n  (let [r (if (string? c)\n            (apply str (reverse c))\n            (reverse c))]\n    (= r c)))", "problem": 27, "user": "4f6c6d69e4b07046d9f4efba"}, {"code": "#(= (apply str %)\n    (apply str (reverse %)))", "problem": 27, "user": "4ef2da4f535dced4c769f224"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(= (reverse %) (reverse(reverse %)))", "problem": 27, "user": "4f6e1c40e4b07046d9f4efd4"}, {"code": "(fn [xs] \n (every? #(apply = %) \n          (partition 2 (interleave xs (reverse xs)))))", "problem": 27, "user": "4f584064e4b0a7574ea71846"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn pali [x]\n  (if (< (count x) 2)\n     true\n     (if (= (first x) (last x))\n        (pali (rest (butlast x)))\n        false)))", "problem": 27, "user": "4f52a134e4b03ad3f0c10d41"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [s]\n  (if (> (count s) 1)\n    (if (= (first s) (last s))\n      (recur (drop 1 (drop-last 1 s)))\n      (= 0 1))\n    (= 1 1)))", "problem": 27, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f6ba647e4b07046d9f4efaf"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "(fn [seq]\n  (cond\n    (< (count seq) 2) true\n    (= (first seq) (last seq)) (recur (butlast (rest seq)))\n    :else false))", "problem": 27, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "(fn pd [x]\n  (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn[sq]\n  (let [rvs (fn[sq]\n            (if (string? sq)\n              (apply str (reverse sq))\n              (reverse sq)))\n        org-seq sq\n        rvs-seq (rvs sq)]\n    (= org-seq rvs-seq)))", "problem": 27, "user": "4f6236abe4b0defedf855fcd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f71f782e4b07046d9f4f018"}, {"code": "(fn [x] (if (= (seq x) (reverse x)) true false))", "problem": 27, "user": "4f6fd95fe4b07046d9f4efee"}, {"code": "#(let [half (bit-shift-right (count %1) 1)]\n    (if (odd? (count %1))\n  \t\t(= (take half %1) (reverse (drop (+ 1 half) %1)))\n\t\t\t(= (take half %1) (reverse (drop half %1)))))", "problem": 27, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [s]\n  (let [size (count s)\n        even (= 0 (mod size 2))\n        half-len (/ (if even size (- size 1)) 2)\n        lhs (take half-len s)\n        rhs (take half-len (reverse s))]\n      (= lhs rhs)))", "problem": 27, "user": "4f7251eee4b07046d9f4f02e"}, {"code": "(fn [poss_palin] \n    (= (seq poss_palin) \n        (reverse poss_palin)))", "problem": 27, "user": "4f617f66e4b0defedf855fc0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [s]\n  (cond\n    (string? s) (= (apply str (reverse s)) s)\n    :e (= (reverse s) s)))", "problem": 27, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e59f00b535d8a8b8723a2a5"}, {"code": "#(= (partition 1  %) (reverse (partition 1 %)))", "problem": 27, "user": "4e81e93d535db62dc21a62bf"}, {"code": "#(let [a (apply list %)] (= a (reverse a)))", "problem": 27, "user": "4f725201e4b07046d9f4f02f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f734e93e4b07046d9f4f043"}, {"code": "(fn f [x] (\n  if (<= (count x) 1)\n    true\n    (and (= (last x) (first x)) (f (rest (reverse (rest x)))))\n))", "problem": 27, "user": "4f73054fe4b07046d9f4f03e"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn ispal [x] \r\n  (if (< (count x) 2)\r\n    true\r\n    (if (= (first x) (last x))\r\n      (ispal (rest (reverse (rest x))))\r\n      false)))", "problem": 27, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "(fn [coll]\n  (= (seq coll)\n     (reverse (seq coll))))", "problem": 27, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#((fn [l b e]\n   (cond (< e b) true\n         (= (nth l b) (nth l e)) (recur l (inc b) (dec e))\n         :else false\n   )) % 0 (- (count %) 1))", "problem": 27, "user": "4e0e648a535d04ed9115e7ba"}, {"code": "(fn [s]\n  (if (seq s)\n      (loop [front () back (seq s) n (quot (count s) 2) r (rem (count s) 2)]\n        (if (= n 0)\n            (if (= r 0) (= front back) (= front (rest back)))\n          (recur (cons (first back) front)\n                 (rest back)\n                 (dec n)\n                 r)))))", "problem": 27, "user": "4f7774a6e4b0fbe0118ec57f"}, {"code": "#(= (sequence %) (reverse %))", "problem": 27, "user": "4f75f498e4b0fbe0118ec567"}, {"code": "(fn [thing]\n  (if-not (seq? thing) true\n    (= (reverse thing) thing)))", "problem": 27, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "(fn palindrom? [coll]\n  (or (< (count coll) 2)\n    (and (= (first coll) (last coll))\n      (palindrom? (rest (butlast coll)))\n)))", "problem": 27, "user": "4f650efee4b07046d9f4ef39"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f77eb86e4b0fbe0118ec585"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn pal [s]\n  (condp = (count s)\n\t\t1 true\n\t\t2 (= (first s) (last s))\n\t\t(if (= (first s) (last s))\n\t\t\t(pal (rest (butlast s)))\n\t\t\tfalse)))", "problem": 27, "user": "4f77dc7be4b0fbe0118ec584"}, {"code": "#(not= (distinct %) %)", "problem": 27, "user": "4f790ad5e4b0fbe0118ec58d"}, {"code": "(fn [s] \n  (if (string? s)\n  (= (apply str (reverse s)) s)\n  (= (reverse s) s)))", "problem": 27, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "(fn [c] (\n    loop [coll c]\n  \t(if (<= (count coll) 1)\n\t\t\ttrue\n\t\t\t(if (= (first coll) (last coll) )\n\t\t\t\t(recur (drop-last (rest coll)) )\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n))", "problem": 27, "user": "4f725466e4b07046d9f4f030"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "(fn [x] \n    (let [rx (reverse x) n (count x)]\n      (every? identity \n        (map #(= (nth x %) (nth rx %)) (range (/ (dec n) 2))\n        ))))", "problem": 27, "user": "4f7b1c63e4b06e829148e19e"}, {"code": "(fn [seq]\n    (let [len (int (/ (count seq) 2)), [right left] (map vec (split-at len seq))]\n          (= right (take len (reverse left)))))", "problem": 27, "user": "4f7a9416e4b06e829148e19b"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4f75c0b6e4b0fbe0118ec562"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn ([arg] (= (reverse arg) (seq arg))))", "problem": 27, "user": "4f7d065ce4b06e829148e1b9"}, {"code": "(fn palindrome? [sqn]\n  (let [s (seq sqn)]\n    (and \n      (= (first s) (last s))\n      (or\n        (< (count s) 2)\n        (palindrome? (rest (butlast s)))))))", "problem": 27, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "(fn [s]\n  (let [ss (seq s)]\n    (= ss (reverse ss))))", "problem": 27, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "#(loop [c %]\n  (if (not (= (first c) (last c)))\n    false\n    (if (< (count c) 4)\n      true\n      (recur (butlast (rest c))))))", "problem": 27, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn [lst]\n  (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n          (recur (rest (butlast lst)))\n          false)))", "problem": 27, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (recur (rest (butlast s))))))", "problem": 27, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [xs] (= (vec xs) (vec (reverse xs))))", "problem": 27, "user": "4f1ae082535d64f603146470"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "#(not(= (count (set %1)) (count %1)))", "problem": 27, "user": "4f1427f8535d64f603146435"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn palindrom? [x] \n  (= (seq x) (reverse x)))", "problem": 27, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn test [l] \n(if (nil? l) \n  true\n  (if (not= (first l) (last l))\n    false\n    (test (butlast (rest l)))\n  )\n)\n)", "problem": 27, "user": "4f74a617e4b044e54cd9a905"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f82e14be4b033992c121c0c"}, {"code": "#(let [coll (vec %)]\n  (= coll (reverse coll)))", "problem": 27, "user": "4f7e33a6e4b06e829148e1cb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8345c6e4b033992c121c1b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(= (seq %) (reverse % ) )", "problem": 27, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn pal[x] \n  (if (empty? x)\n    true \n    (if (= (first x) (last x))\n      (pal (butlast (rest x)))\n      false)))", "problem": 27, "user": "4f83e712e4b033992c121c25"}, {"code": "(fn pal[x]\r\n  (if (or (= 1 (count x)) (= 0 (count x)))\r\n  true\r\n  (if (= (first x) (last x))\r\n    (pal (rest (reverse (rest x))))\r\n    false\r\n  )))", "problem": 27, "user": "4dca56b6535d5973398f9287"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "; This attempt fails at the mentioned hint.\n; (fn [seq]\n;  (= seq (reverse seq)))\n\n; My attempt.  Convert to sequence to handle\n; the string case.\n(fn palindrome-mike[s]\n  (= (seq s) (seq (reverse s))))\n\n; Web found solution.\n; Check for the string case and handle\n; differently then other sequences.\n;(fn palindrome-web[s]\n;  (if (string? s) \n;    (= s (apply str (reverse s))) \n;    (= s (reverse s))))", "problem": 27, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn ispal [x]\n  (or (<= (count x) 1)\n      (and (= (first x) (last x))\n           (ispal (rest (butlast x))))))", "problem": 27, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "#(= (if (string? %)\n  (apply str (reverse %))\n  (reverse %))\n %)", "problem": 27, "user": "4f7c7ed7e4b06e829148e1b4"}, {"code": "(fn palin [x] (if (= (count x) 1) true (and (= (first x) (last x))\n                                    (palin (drop 0 (drop (- (count x) 1) x))))))", "problem": 27, "user": "4f84f6c3e4b033992c121c3d"}, {"code": "(fn pal [liste] \n  (= (reverse liste) (reverse (reverse liste)))\n)", "problem": 27, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [seq]\n  (if (string? seq)\n    (= (apply str (reverse seq) seq))\n    (= (reverse seq) seq)))", "problem": 27, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4ed2b337535d44c135fd68de"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f85b7b5e4b033992c121c49"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f8592e6e4b033992c121c47"}, {"code": "(fn koko [x] (= (reverse (seq x )) (seq x)))", "problem": 27, "user": "4f85d497e4b033992c121c4b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f465734e4b0d56e7bb92b9b"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "#(if (> (count %) 1)\n  (and (= (first %) (last %)) (recur (next (butlast %))))\n  true)", "problem": 27, "user": "4f856248e4b033992c121c43"}, {"code": "(fn [x] \n  (= (seq x) (reverse x)))", "problem": 27, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %))\r\n           (range (/ (dec n) 2))))))", "problem": 27, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn [thing]\n  (if (string? thing) (= thing (clojure.string/reverse thing))\n    (= thing (reverse thing))))", "problem": 27, "user": "4e1e1576535d04ed9115e806"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f611e0ee4b0defedf855fb8"}, {"code": "(fn [s]\n  (let [hlf-len (quot (count s) 2)\n        fst (take hlf-len s)\n        lst (take hlf-len (reverse s))]\n    (= fst lst)))", "problem": 27, "user": "4f856171e4b033992c121c42"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f83665ee4b033992c121c1c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f88f57ae4b033992c121c73"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f89311ce4b033992c121c78"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f891abde4b033992c121c77"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "#(every? (fn [v] (= (first v) (last v))) (map (fn [a b] [a b]) % (reverse %)))", "problem": 27, "user": "4f8b08d2e4b02e764a0a5177"}, {"code": "(fn ispal [s]\n  (if (empty? s)\n    true\n    (and \n      (= (first s) (last s)) \n      (ispal (rest (butlast s)))\n    )\n  )\n)", "problem": 27, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn foo [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ecdf94a535d23f03622770b"}, {"code": "(fn palindrome[x] \n\t\t\t(\n\t\t\t\t(fn \n\t\t\t\t\tfrontBack[n] \n\t\t\t\t\t(if\n\t\t\t\t\t\t(<= (count n) 1)\n\t\t\t\t\t\ttrue\n\t\t\t\t\t\t(if\n\t\t\t\t\t\t\t(= (first n) (nth n (- (count n) 1)))\n\t\t\t\t\t\t\t(frontBack\n\t\t\t\t\t\t\t\t(pop\n\t\t\t\t\t\t\t\t\t(vec\n\t\t\t\t\t\t\t\t\t\t(rest\n\t\t\t\t\t\t\t\t\t\t\tn\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t\t(if\n\t\t\t\t\t(string? x)\n\t\t\t\t\t(vec\n\t\t\t\t\t\t(re-seq #\"\\S\" x)\n\t\t\t\t\t)\n  \t\t\t\tx\n\t\t\t\t)\n\t\t\t)\n\t\t)", "problem": 27, "user": "4ee8fc1e535d93acb0a66887"}, {"code": "(fn [seq]\r\n  (loop [sq seq\r\n         result true]\r\n    (if (or (empty? sq)  (= 1 (count sq)))\r\n      result\r\n      (if (= (first sq) (last sq))\r\n        (recur (drop-last (rest sq)) true)\r\n        (recur (drop-last (rest sq)) false)))))", "problem": 27, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "#(every? identity (map (partial apply =) (map list % (reverse %))))", "problem": 27, "user": "4f8c3697e4b02e764a0a518d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f559503e4b0a7574ea71804"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4f73536ee4b07046d9f4f044"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f882b4be4b033992c121c60"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [l0]\n  (loop [fl l0   rl (reverse l0)]\n    (cond \n      (empty? fl) true\n      (not= (first fl) (first rl)) false\n      true (recur (rest fl) (rest rl)))))", "problem": 27, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f2b1893e4b0d6649770a047"}, {"code": "(fn [x] \n  (=\n    (reverse x)\n    (reverse (reverse x))\n  )\n)", "problem": 27, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [l](= (reverse (reverse l)) (reverse l)))", "problem": 27, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "(fn [s] \n  (= (reverse s) (seq s)))", "problem": 27, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(= (reverse(reverse %)) (reverse %))", "problem": 27, "user": "4f935f94e4b0dcca54ed6cbb"}, {"code": "(fn [n] (if (= (apply vector n) (reverse (apply vector n))) true false))", "problem": 27, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": ";#(= (vec %) (reverse %))\n#(= (seq %) (reverse %))", "problem": 27, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4f96fa2ae4b0dcca54ed6ce4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec55ab5535d6d7199dd3697"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f890488e4b033992c121c76"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn [l] (loop [x l]\n  (if (>(count x) 1) \n    (if (= (first x) (last x)) \n      (recur (-> x drop-last rest)) false) true)))", "problem": 27, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [x] (reduce (fn [a b] (and a b)) (map (fn [y] (= (nth x y) (nth x (- (count x) y 1)))) (range (/ (count x) 2)))))", "problem": 27, "user": "4f946be7e4b0dcca54ed6cc3"}, {"code": "#(= (concat %) (reverse %))", "problem": 27, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [n] (if (string? n)  (= n (apply str (reverse n))) (= n (reverse n) ) ) )", "problem": 27, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn blah [x] (if (empty? x) true (and (= (first x) (last x)) (blah (butlast (rest x))))))", "problem": 27, "user": "4f17aa97535d64f603146456"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f18f65d535d64f603146462"}, {"code": "(fn [str]\n  (loop [s str]\n    (cond (<= (count s) 1) true\n          (= (first s) (last s)) (recur (rest (butlast s)))\n          :else false)))", "problem": 27, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8bb50ce4b02e764a0a5181"}, {"code": "(fn [s] (= (reverse s) (vec s)))", "problem": 27, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(= (reverse (reverse %1)) (reverse %1))", "problem": 27, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f9b27d7e4b0dcca54ed6d12"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(loop [f %\n       b (reverse %)]\n  (if (empty? f)\n    true\n    (if (not= (first b) (first f))\n      false\n      (recur (rest f) (rest b)))))", "problem": 27, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn [x]\n  (let [y (map vector x)] (= y (reverse y))))", "problem": 27, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn[x] (let [coll (seq x)] (= (reverse coll) coll)))", "problem": 27, "user": "4f8e984ee4b0d4e659cdde68"}, {"code": "#(if (= (reverse %) (seq %))\n    true\n    false)", "problem": 27, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn [s] (let [sq (seq s)]  (= sq (reverse sq))))", "problem": 27, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9c4b02e4b0dcca54ed6d1b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn palindrome?[x] (\n  if(= (first x) nil) \n   true (if (= (first x) (last x)) \n          (palindrome? (rest (reverse (rest x)))) false)))", "problem": 27, "user": "4f9dbe07e4b0dcca54ed6d26"}, {"code": "(fn palindrome? [s] (= (vec s) (vec (reverse s))))", "problem": 27, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [word]\n  (= (seq word) (reverse word)))", "problem": 27, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "#(= % (if (= String (class %)) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4f9e0000e4b0dcca54ed6d2a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "(fn palindrome?\n  [s]\n  (= (seq s) (reverse (seq s)))\n)", "problem": 27, "user": "4f9b05ade4b0dcca54ed6d11"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [s] (= (vec s) (reverse (vec s))))", "problem": 27, "user": "4f9f135be4b0dcca54ed6d34"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "#(loop [x %]\n  (cond (< (count x) 2) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))", "problem": 27, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "#(= (reverse (seq %1)) (seq %1))", "problem": 27, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4f0d5338535d0136e6c22316"}, {"code": "(fn\n    [x]\n\t  (every? (fn [[a b]] (= a b))\n\t          (partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "4fa03445e4b0dcca54ed6d45"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "(fn p [s]\n  (or (empty? s) (= 1 (count s))\n      (and (= (first s) (last s))\n           (p (rest (butlast s))))))", "problem": 27, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa2ea44e4b081705acca185"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn [list] (reduce #(and %1 %2) true (map = (reverse list) list)))", "problem": 27, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [thing] (= (reverse thing) (seq thing)) )", "problem": 27, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fa3f91fe4b081705acca196"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(reduce (fn [a v] (and a (= (first v) (second v)))) (map list % (reverse %)))", "problem": 27, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(fn palindrome? [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn my-palindrome\n  [coll]\n  (when (<= (count coll) 1)\n    true)\n  (let [a (first coll)\n        b (last coll)]\n    (if (= a b)\n      (if (> (count coll) 2)\n        (recur (butlast (rest coll)))\n        true)\n      false)))", "problem": 27, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn [s] (= (seq (reverse s)) (seq s)))", "problem": 27, "user": "4fa659f3e4b081705acca1b6"}, {"code": "(fn [l] (= (reverse l) (seq l)))", "problem": 27, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fa6440ee4b081705acca1b5"}, {"code": "#(= (seq %) (reduce conj () %))", "problem": 27, "user": "4e707714535d5021c1a89638"}, {"code": "(fn [obj] \n  (= \n    (if (= (type obj) java.lang.String) \n      (apply str (reverse obj)) \n      (reverse obj))\n    obj))", "problem": 27, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa58500e4b081705acca1ae"}, {"code": "#(= (seq %)(reverse (seq %)))", "problem": 27, "user": "4fa67274e4b081705acca1b8"}, {"code": "#(= % (if (string? %) (apply str (reverse %))\n                      (reverse %)))", "problem": 27, "user": "4fa6d532e4b081705acca1be"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4fa4f2f2e4b081705acca1aa"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn palin [x]\n  (if (or (= x '()) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n      false\n    )\n  )\n)", "problem": 27, "user": "4fa7ef54e4b081705acca1ca"}, {"code": "#( = ( seq % ) (reverse %))", "problem": 27, "user": "4fa96e80e4b081705acca1df"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "(fn [x] \n  (if (string? x)\n    (= (apply str (reverse x)) x) (= (reverse x) x)))", "problem": 27, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [s]\n  (every? true? (map #(= %1 %2)\n                     (seq s) (reverse s))))", "problem": 27, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn palindrome? [lst]\n  (if (> 2 (count lst))\n    true\n    (and (= (first lst) (last lst)) (palindrome? (rest (butlast lst))))))", "problem": 27, "user": "4faa9593e4b081705acca1f9"}, {"code": "#(=(reverse%)(vec%))", "problem": 27, "user": "4f868d88e4b033992c121c52"}, {"code": "(fn [s]\n  (let [seq_s (seq s)]\n    (= seq_s (reverse seq_s))))", "problem": 27, "user": "4fa982fae4b081705acca1e0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "#(let [y (seq %)] (= y (reverse y)))", "problem": 27, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn is-palindrome [s]\n  (if (< (count s) 2)\n\t true\n\t (and \n\t \t(= (first s) (last s)) \n\t \t(is-palindrome (rest (take (dec (count s)) s)))\n\t )\n\t)\t\n)", "problem": 27, "user": "4faacc04e4b081705acca201"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fabb1dce4b081705acca21a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fab259ae4b081705acca212"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4faa7f87e4b081705acca1f6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [xs] (let [ys (seq xs)] (= ys (reverse ys))))", "problem": 27, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4faac363e4b081705acca200"}, {"code": "#(let [[lhs rhs] (split-at (/ (count %) 2) %)] (every? identity (map (fn [[l r]] (= l r)) (zipmap lhs (reverse rhs)))))", "problem": 27, "user": "4faae01ae4b081705acca206"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fad33e8e4b081705acca236"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fac1d77e4b081705acca223"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4f94dab7e4b0dcca54ed6cc6"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [xs]\n  (let [xxs (seq xs)]\n    (= xxs (reverse xxs))))", "problem": 27, "user": "4fadbc3fe4b081705acca23f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4faccddae4b081705acca22e"}, {"code": "(fn pld? [coll]\r\n  (or\r\n    (empty? coll)\r\n    (and \r\n      (= (first coll) (last coll))\r\n      (pld? (rest (butlast coll))))))", "problem": 27, "user": "4facff22e4b081705acca230"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fae258de4b081705acca246"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4f0324d2535dcb61093f6a69"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4f99cfc2e4b0dcca54ed6d02"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4faf6f1ae4b081705acca255"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4faf897be4b081705acca257"}, {"code": "#(if (string? %)\n     (= % (apply str (reverse %)))\n     (= % (reverse %)))", "problem": 27, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fad89f0e4b081705acca23b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4faec810e4b081705acca24e"}, {"code": "#(let [x (seq %)] (= x (reverse x)))", "problem": 27, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [t]\n    (or\n     (= t (reverse t))\n     (= t (apply str (reverse t)))))", "problem": 27, "user": "4f8cb9b2e4b02e764a0a51a6"}, {"code": "(fn [slike]\n  (let [s (seq slike)]\n    (= s (reverse s))))", "problem": 27, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn palin[x](\n  if (first x)\n  (\n    if (= (first x) (last x))\n    (palin (rest (butlast x)))\n    false\n    )\n  true\n  )\n)", "problem": 27, "user": "4fb069b1e4b081705acca266"}, {"code": "(fn [lst] (= (seq lst) (reverse lst)))", "problem": 27, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn palindrome? [lst] (= (seq lst) (reverse lst)))", "problem": 27, "user": "4fac031be4b081705acca221"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fab0b6be4b081705acca20c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn t [xs]\n    (if (empty? xs)\n        true\n        (let [f (first xs) l (last xs) m (next (butlast xs))]\n            (and (= f l) (t m)))))", "problem": 27, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn [l] (= (seq l) (into () l)))", "problem": 27, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn [s]\n  (= (reverse s) (vec s)))", "problem": 27, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [p] (let [pl (apply list p)]\n  (= pl (reverse pl))))", "problem": 27, "user": "4fb6918ae4b081705acca2c9"}, {"code": "#(= (vec (reverse %)) (vec %))", "problem": 27, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn palindrome?\n  [xs]\n  (let [len           (count xs)\n        takers        (int (/ len 2))\n        droppers      (+ takers (mod len 2))]\n    #_(println \"take\" takers (take takers xs) \"drop\" droppers (drop droppers xs))\n    (= (take takers xs) (reverse (drop droppers xs)))))", "problem": 27, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [coll] \n  (let [reversed (if (string? coll)\n                      (apply str (reverse coll))\n                      (reverse coll))]\n      (= coll reversed)))", "problem": 27, "user": "4fb73af2e4b081705acca2d0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [list] (= (reverse list) (reverse (reverse list))))", "problem": 27, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(fn rev [x] (if (string? x) (= x (apply str (reverse x))) (= x(reverse x))))", "problem": 27, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [sequence] (= (seq sequence) (reverse sequence)))", "problem": 27, "user": "4fb91026e4b081705acca2d9"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fb0a1e0e4b081705acca269"}, {"code": "(fn [s] (-> (seq s) (= (reverse s))))", "problem": 27, "user": "4eca7a87535d6d7199dd3705"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [sequence] (= (seq sequence) (reverse sequence)))", "problem": 27, "user": "4fb85651e4b081705acca2d7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn[x](= (seq x) (reverse (seq x))))", "problem": 27, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [seq]\n  (if (string? seq)\n    (= (apply str (reverse seq)) seq)\n    (= (reverse seq) seq)))", "problem": 27, "user": "4faafccde4b081705acca209"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4fb045dfe4b081705acca263"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fbbb6ede4b081705acca2ed"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee85476535d93acb0a6687c"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(= (take (quot (count %) 2) %) (take (quot (count %) 2) (reverse %)))", "problem": 27, "user": "4fbe400be4b081705acca30e"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [s]\n  (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "4f8c50f9e4b02e764a0a5195"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "4f7c0ab8e4b06e829148e1ac"}, {"code": "(fn [x] \n  (not (or (= 5 (last x)) (= :a (first x)))))", "problem": 27, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [x] (cond (empty? x) true, (= 1 (count x)) true, :else (and (= (first x) (last x)) (recur (rest (butlast x))))))", "problem": 27, "user": "4fa4bdeee4b081705acca1a2"}, {"code": "#(loop [s %] \n    (if (not (= (first s) (last s)))\n      false \n      (if (or (= s ()) (= (drop 1 s) ())) \n        true \n        (recur (rest (drop-last s))))))", "problem": 27, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [x]\n  (reduce (fn [a b] (and a b))\n          (map #(= %1 %2) x (reverse x))))", "problem": 27, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [c]\n  (reduce #(and %1 (= (first %2) (second %2))) true \n    (zipmap (seq c) (reverse c))))", "problem": 27, "user": "4fc04d75e4b081705acca324"}, {"code": "(fn answer[aSeq]\n  (if (= 0 (count aSeq)) true\n      (let [x (first aSeq) y (last aSeq)]\n        (if (= x y) (answer (drop-last (rest aSeq)))\n           false\n        )\n      )\n  )\n)", "problem": 27, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "#(= % \n  (if (string? %) \n    (apply str (reverse %)) \n    (reverse %)))", "problem": 27, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "(fn p [s](let [o (reverse (reverse s)) r (reverse s)] (= o r) ))", "problem": 27, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn [a] (= (reverse a) (seq a)))", "problem": 27, "user": "4fc13433e4b081705acca32b"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc18846e4b081705acca331"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc0853ae4b081705acca327"}, {"code": "#(= (-> % reverse reverse) (reverse %))", "problem": 27, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [l] (= (seq l) (reverse (seq l))))", "problem": 27, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb18c7be4b081705acca27d"}, {"code": "#(= (apply str %)\n    (apply str (reverse %)))", "problem": 27, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "4fc34787e4b081705acca33e"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4fc4eadee4b081705acca353"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fb79872e4b081705acca2d2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [s] (= (cond (or (seq? s) (vector? s)) (reverse s) :else (apply str (reverse s))) s))", "problem": 27, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [xs]\n    (= (reverse xs) (seq xs)))", "problem": 27, "user": "4fc40b0be4b081705acca344"}, {"code": "#(loop [l %1] (cond (empty? l) true (= (last l) (first l)) (recur (drop-last (rest l))) :else false))", "problem": 27, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn palindrome?\n  [coll] {:pre [(or (sequential? coll) (string? coll) (nil? coll))]}\n  (if (seq coll)\n    (= (seq coll) (reverse coll))\n    true))", "problem": 27, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn palin [inlist]\n  (if (or (= (count inlist) 1) (empty? inlist))\n    true\n    (and (= (first inlist) (last inlist))\n        (palin (rest (drop-last inlist))))))", "problem": 27, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4fc5ee4fe4b0ee37620e1804"}, {"code": "(fn palin [seq]\n  (if (< (count seq) 2)\n    true\n    (if (= (first seq) (last seq))\n      (palin (butlast (rest seq)))\n      false\n    )\n  )\n)", "problem": 27, "user": "4fc4fe59e4b081705acca36a"}, {"code": "(fn [coll]\n  (let [rev (if (string? coll)\n                clojure.string/reverse\n                reverse)]\n    (= coll (rev coll))))", "problem": 27, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [coll] (= (clojure.string/join (reverse coll)) (clojure.string/join coll)))", "problem": 27, "user": "4fc4f668e4b081705acca362"}, {"code": "(comp #(= % (reverse %)) seq)", "problem": 27, "user": "4ec53831535d6d7199dd3684"}, {"code": "(fn [s]\n  (if (string? s)\n    (= (reduce str (reverse s)) s)\n    (= (reverse s) s)))", "problem": 27, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn palindrome? [lst]\n  (if (empty? lst)\n    true\n    (if (not (= (first lst) (last lst)))\n      false\n      (palindrome? (butlast (rest lst))))))", "problem": 27, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [coll]\n  (= (seq coll)\n      (reverse coll)))", "problem": 27, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "#(= (reverse %) (lazy-seq %))", "problem": 27, "user": "4f148418535d64f60314643a"}, {"code": "(fn [l] (let [l (seq l)] (= l (reverse l))))", "problem": 27, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "#(= (apply list %) (reverse %))", "problem": 27, "user": "4fc4dca8e4b081705acca350"}, {"code": "(fn [x]\n  (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4fc68fc4e4b0ee37620e1816"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4fc0f5b8e4b081705acca329"}, {"code": "(fn f [x]\n\n(if (empty? x)\ntrue\n\n(if (= (first x) (last x) )\n    (f (drop 1 (butlast x)))\n    false\n)\n)\n\n)", "problem": 27, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn palin [x] \n  (if (empty? x) true\n    (and (= (first x) (last x)) (palin (butlast (rest x) )))))", "problem": 27, "user": "4fc92595e4b0ee37620e1843"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4fc52d79e4b081705acca386"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [x] (if (= (seq x) (reverse x)) true false))", "problem": 27, "user": "4fc2e302e4b081705acca33a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fcaa4bae4b0ee37620e1854"}, {"code": "(fn [x] (let [s (into [] x)]\n  (= s (reverse s))))", "problem": 27, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn palindrome? [seq]\n  (let [s (if (string? seq)\n            #(apply str %)\n            identity)]\n    (= seq (s (reverse seq)))))", "problem": 27, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [coll]\n  (= (seq coll)\n    (reverse (seq coll))))", "problem": 27, "user": "4f8544e0e4b033992c121c40"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn ! [x]\n  (if (= x '())\n    true\n    (if (= (first x) (last x))\n      (! (rest (reverse (rest x))))\n      false)))", "problem": 27, "user": "4fc9cba3e4b0ee37620e1849"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn palindrome? [coll]\r\n    (if (empty? coll)\r\n        true\r\n      (if (= (first coll) (last coll))\r\n        (palindrome? (drop-last (drop 1 coll)))\r\n        false)))", "problem": 27, "user": "4fc56e68e4b0ee37620e17f5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "(fn [ l ] \n  (let [ s (apply list l) ] (= s (reverse s)) ))", "problem": 27, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [seq]\n  (loop [seq seq]\n    (cond\n      (<= (count seq) 1) true\n      (= (first seq)\n         (last seq)) (recur (rest (butlast seq)))\n      :else false)))", "problem": 27, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn rec [c]\n  (if (empty? c)\n    true\n    (if (= (first c) (last c))\n    (rec (rest (reverse (rest c))))\n    false)))", "problem": 27, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "#(= (seq %1) (into () %1))", "problem": 27, "user": "4f826548e4b033992c121c08"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fbacdbae4b081705acca2e5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fccd906e4b0ee37620e186c"}, {"code": "(fn [l] (= (seq l) (reverse l)))", "problem": 27, "user": "4daf4d2fedd6309eace4d178"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ee52c44535d1385b2869d88"}, {"code": "#(= (vec %)(reverse %))", "problem": 27, "user": "4fb23582e4b081705acca28a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fceb350e4b03432b189f403"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fcd5958e4b065de69964ca7"}, {"code": "(fn [x] ( = (seq x) (reverse (seq x))))", "problem": 27, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [x] (= (cons []x) (cons [](reverse x))))", "problem": 27, "user": "4fcca4f5e4b0ee37620e1867"}, {"code": "(fn [x] (\n  (fn pali [x y] (\n    if (= '() x) \n       true\n       (if (= (first x) (first y)) \n           (pali (rest x) (rest y)) \n           false\n       )\n    )) x (reverse x)\n  \n  ))", "problem": 27, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [pc] (= (seq pc) (reverse pc)))", "problem": 27, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn [x] (= (seq x)(reverse x)))", "problem": 27, "user": "4fcf7170e4b03432b189f412"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn [s]\n  (let [rev (reverse s)]\n    (if (string? s)\n      (= s (apply str rev))\n      (= s rev))))", "problem": 27, "user": "4fcd1bbde4b065de69964ca4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fcd155de4b065de69964ca3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc67081e4b0ee37620e1813"}, {"code": "#(loop [s 0 e (- (count %) 1)]\n   (if (>= s e)\n     true\n     (if (= (nth % s) (nth % e))\n       (recur (+ s 1) (- e 1))\n       false\n     )\n   )\n)", "problem": 27, "user": "4fcd0990e4b0ee37620e1874"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [s]\n  (= (seq s)\n    (reverse (seq s))))", "problem": 27, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc4f040e4b081705acca35a"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn [c]\n  (= (vec c) (reverse c)))", "problem": 27, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn [x] (= x (if (= java.lang.String (type x)) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "4fcb5d1fe4b0ee37620e1858"}, {"code": "(fn [x](= (reverse(seq x))(seq x)))", "problem": 27, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "#(= (seq %)\n    (reverse (seq %)))", "problem": 27, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4fc3b0d4e4b081705acca343"}, {"code": "(fn [x]\n  (cond\n    (= ()       x ) true\n    (= () (rest x)) true\n    (= (first x) (last x)) (recur (rest (butlast x)))\n    :else false))", "problem": 27, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "(fn ispalindrome [lst] (\r\n  cond\r\n    (nil? lst) true\r\n    (nil? (next lst)) true\r\n    (= (first lst) (last lst)) (ispalindrome (next (drop-last lst)))\r\n    :else false\r\n))", "problem": 27, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fc93728e4b0ee37620e1844"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fce75cfe4b03432b189f400"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "#(not= (count %) (count (set %)))", "problem": 27, "user": "4fa9c945e4b081705acca1e5"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "4fb5705fe4b081705acca2be"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4fd58082e4b0d4de60cee377"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn palindrome? [subject] \n    (cond\n      (empty? subject) true\n      (not (= (first subject) (last subject))) false\n      :else (palindrome? (butlast (rest subject)))))", "problem": 27, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn pal [s] \n  (or (empty? s) \n      (= 1 (count s))\n      (= (first s) (last s))))", "problem": 27, "user": "4fd73610e4b0dab7d829f37e"}, {"code": "(fn [S]\n  (if (string? S) \n    (true? (= S (apply str (reverse S))))\n    (true? (= S (reverse S)))))", "problem": 27, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn palin [x]\n        (if (string? x)\n            (= (apply str (reverse x)) x)\n            (= (reverse x) x)))", "problem": 27, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4db0ef131254ad5b4805fa64"}, {"code": "#(let [s (seq %)\n       r (reverse s)]\n    (= s r))", "problem": 27, "user": "4fda01cde4b05e33b9224f43"}, {"code": "(fn [x]\r\n  (loop [xs x]\r\n    (if (empty? xs) \r\n      true\r\n      (if (not= (first xs) (last xs))\r\n        false\r\n        (recur (drop-last (rest xs)))))))", "problem": 27, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "4faa7c76e4b081705acca1f5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fb57e06e4b081705acca2bf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "#(= \n   (reverse (seq %))\n   (seq %))", "problem": 27, "user": "4f30896ce4b0d6649770a07b"}, {"code": "#(= (vec %1) (reverse %1))", "problem": 27, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [coll] (let [rc (reverse coll)\nn (count coll)]\n(every? identity \n  (map #(= (nth coll %)(nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [coll]\n  (let [midpoint (int (/ (count coll) 2.0)) even (even? (count coll))]\n    (= (take (+ midpoint 1) coll)\n       (reverse (if even\n                  (drop (- midpoint 1) coll)\n                  (drop midpoint coll))))))", "problem": 27, "user": "4f030cff535dcb61093f6a4d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e726575535d5021c1a89660"}, {"code": "#(= (apply list %) (reverse %))", "problem": 27, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [x]\n  (let [r (apply str (reverse x))]\n    (if (= r (apply str x)) true false)))", "problem": 27, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4fdfd165e4b05e33b9224fa3"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "#(loop [i %]\r\n  (if (empty? i)\r\n      true\r\n      (if (= (first i) (last i))\r\n              (recur (butlast (rest i)))\r\n              false)))", "problem": 27, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [x]\r\n  (loop [source x copy x]\r\n  (if (= (first source) (last copy))\r\n    (if (= nil (first source))\r\n      true\r\n      (recur (rest source) (butlast copy)))\r\n    false)))", "problem": 27, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "(fn [lst] (= (seq lst) (reverse lst)))", "problem": 27, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4fe183a0e4b0dd6cd5ce3635"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn [ s ] \n    (let  [ rev    (reverse s)  \n            sss  (reverse rev) ]  \n    (= rev sss)\n   ; (identity sss)\n    )\n)", "problem": 27, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn palindrome? [col]\n  (let [half (quot (count col) 2)]\n    (= (take half col) (take half (reverse col)))))", "problem": 27, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "#(every? (fn [[a b]] (= a b)) (map list % (reverse %)))", "problem": 27, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn pal [items]\n  (if (< (count items) 2)\n    true\n    (if (false? (= (first items) (last items)))\n      false\n      (pal (butlast (rest items))))))", "problem": 27, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn is-palindrome [coll]\r\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(loop [remlist %]\n  (cond\n    (< (count remlist) 2) true ;; empty or single item seq is palindrom\n    (not= (first remlist) (last remlist)) false\n    true (recur (drop-last 1 (next remlist)))))", "problem": 27, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [x] (if (= (apply str x) (apply str (reverse x))) true false))", "problem": 27, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fd785e6e4b0dab7d829f383"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fe5c35ce4b0e8f79898fec9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [items]\n  (loop [_items items]\n    (if (empty? _items)\n      true\n      (if (not= (first _items) (last _items))\n        false\n        (recur\n          (rest (butlast _items))\n        )  \n      )\n    )\n  )\n)", "problem": 27, "user": "4fe4cefce4b0e8f79898febd"}, {"code": "#(loop [cs (seq %)]\n\t\t(if (not= (first cs) (last cs))\n\t\t\tfalse\n\t\t\t(if (empty? cs)\n\t\t\t\ttrue\n\t\t\t\t(recur (rest (butlast cs))))))", "problem": 27, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn [x](= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "4faf2f4ce4b081705acca251"}, {"code": "#(=(reverse (vec %)) (vec %))", "problem": 27, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fbf2818e4b081705acca317"}, {"code": "#(= (reverse (reverse %1)) (reverse %1))", "problem": 27, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn palindrome? [coll]\r\n  (every? true? (map = coll (reverse coll))))", "problem": 27, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [x]\n  (loop [lst x]\n    (if (empty? lst) true\n(if (= (first lst) (last lst))\n(recur (reverse (rest (reverse (rest lst))))) false))))", "problem": 27, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [x] (= (first x) (last x)))", "problem": 27, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "4fe89f05e4b07c9f6fd12c5c"}, {"code": "(fn palindrome? \n   ([xs] (let [n (/ (count xs) 2)]\n      \t(palindrome? (take n xs) (take n (reverse xs)))))\n\n   ([[x & xs] [y & ys]]\n    (if (and (nil? xs) (nil? ys) (= x y)) true\n    \t(if (not= x y) false (palindrome? xs ys)))))", "problem": 27, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn palindrome? [s]\n  (if (< (count s) 2)\n    true\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))))", "problem": 27, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [a]\n  (= (seq a) (reverse a)))", "problem": 27, "user": "4f859146e4b033992c121c46"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [seq] (= (reverse (reverse seq)) (reverse seq)))", "problem": 27, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [x] \n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "problem": 27, "user": "4fe9badfe4b0547ebccb246e"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [a] (= (reverse a) (seq a)))", "problem": 27, "user": "4fea04f4e4b0547ebccb2482"}, {"code": "#(every? (fn [[a b]] (= a b))\n                (partition 2 (interleave % (reverse %))))", "problem": 27, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [n] (= (seq n) (reverse n)))", "problem": 27, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "4fe89c81e4b07c9f6fd12c57"}, {"code": "(fn palindrome [x]\n  (if (or (= (count x) 1) (and (= (count x) 2)) (= (last x) (first x)))\n  \t\ttrue\n    (if (false? (= (last x) (first x)))\n\t\tfalse\n    (palindrome (butlast (rest x)))\n  )))", "problem": 27, "user": "4fd24729e4b04c3a95aa041e"}, {"code": "#(=\n  ((if (string? %) clojure.string/reverse reverse) %)\n  %)", "problem": 27, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [seq]\n  (not-any? false?\n    (for [i (range (/ (count seq) 2))]\n      (= (nth seq i) (nth seq (- (count seq) (inc i)))))))", "problem": 27, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn palindrome? \n  [coll]\n  (let [n (-> (count coll)\n            (/ 2)\n            Math/floor\n            )]\n    (= (take n coll)\n       (reverse (take-last n coll)))))", "problem": 27, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4fead955e4b0140c20fb9c10"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn palindrome? [coll]\n  (or (empty? coll)\n      (let [[start & more] coll\n            end (last coll)]\n        (and (= start end)\n             (palindrome? (butlast more))))))", "problem": 27, "user": "4efa3d4b535dced4c769f270"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "4fec51b4e4b0681fd128dca4"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(if(string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn pal [s]\n  (let [f (first s) l (last s)]\n  (if (empty? s)\n    true\n    (if (= f l)\n      (pal (rest (take (dec (count s)) s)) )\n      false)\n   )))", "problem": 27, "user": "4e8f5dd1535d65386fec214b"}, {"code": "(fn [x] (= \n              (if (string? x) \n                (apply str (reverse x)) \n                (reverse x)) x))", "problem": 27, "user": "4fee1574e4b0678c553fc309"}, {"code": "(fn [x]\n    (let [sx (seq x)\n          rx (reverse (seq x))]\n      (= sx rx)))", "problem": 27, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [seq]\n    (if (> 2 (count seq))\n      true\n      (if (= (first seq) (last seq))\n        (recur (rest (butlast seq)))\n        false)))", "problem": 27, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "(fn [pal] (= (seq pal) (reverse pal)))", "problem": 27, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(comp #(= % (reverse %)) seq)", "problem": 27, "user": "4fec550de4b0681fd128dca6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fef481ce4b0678c553fc314"}, {"code": "#(loop [coll %] (cond (empty? coll) true (= 1 (count coll)) true (not= (first coll) (last coll)) false :else (recur (rest (butlast coll)) ) ) )", "problem": 27, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [xs]\n  (= (apply list xs) (reverse xs)))", "problem": 27, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn is-palindrome? [coll]\r\n  (let [coll (if (string? coll) (seq coll) coll)]\r\n    (if (= coll (reverse coll))\r\n      true\r\n      false)\r\n    ))", "problem": 27, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#((fn [l] (if (empty? l) true\n            (if (= (first l) (last l))\n              (recur (butlast (drop 1 l)))\n              false)))\n(seq %))", "problem": 27, "user": "4fef439ce4b0678c553fc313"}, {"code": "(fn pal [coll] \n  (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(= (let [rev (reverse %)]\n     (if (string? %)\n        (apply str rev)\n        rev)) %)", "problem": 27, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "#(= (seq %) (-> % reverse seq))", "problem": 27, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn palindrome?\n  ([seq] (palindrome? seq (reverse seq)))\n  ([seq revseq]\n     (if (empty? seq)\n      true\n  \t  (if (= (first seq) (first revseq))\n        (palindrome? (rest seq) (rest revseq))\n        false))))", "problem": 27, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "(fn[c]\r\n   (if (= (seq c) (reverse c)) true false)\r\n)", "problem": 27, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn [arg]\n  (= (first arg) (last arg)))", "problem": 27, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4ff24a1ae4b0678c553fc337"}, {"code": "(fn pal? [s]\n  (cond (empty? s) true\n        :else (and\n                (= (first s) (last s))\n                (pal? (rest (butlast s))))))", "problem": 27, "user": "4fc5019ae4b081705acca36d"}, {"code": "(fn[s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4fe8aba5e4b07c9f6fd12c68"}, {"code": "#(every? true? (map = (reverse %) %))", "problem": 27, "user": "4fba77fae4b081705acca2df"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff201d7e4b0678c553fc330"}, {"code": "#(if (string? %)\r\n    (= (clojure.string/reverse %)\r\n       %)\r\n    (= (reverse %) %))", "problem": 27, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#(= (reverse %) (if (string? %) (list* %) %))", "problem": 27, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn is-palindrome? [p]\n  (= (rseq (vec p)) (seq (vec p))))", "problem": 27, "user": "4f98c161e4b0dcca54ed6cf5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff35e60e4b0678c553fc350"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn palindrome [xs] (let [ys (seq xs)] (= ys (reverse ys))))", "problem": 27, "user": "4ff2430ae4b0678c553fc336"}, {"code": "#(= (apply str %1) (apply str (reverse %1)))", "problem": 27, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn [string]\n  (=\n    (seq string)\n    (reverse string)))", "problem": 27, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4fbbae0fe4b081705acca2eb"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn pal [w]\n  (if (or (empty? w) (= (count w) 1)) true \n    (if (= (first w) (last w)) \n      (pal (rest (butlast w)))\n      false)))", "problem": 27, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff31e13e4b0678c553fc346"}, {"code": "#(every? true?\n    (map = % (reverse %)))", "problem": 27, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "#(-> % reverse (= (vec %)))", "problem": 27, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [n]\n  (= n (if (string? n)\n            (apply str (reverse n))\n            (reverse n)\n))\n  )", "problem": 27, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(fn [c] (let [c (into () c)] (= c (reverse c))))", "problem": 27, "user": "4ff3e771e4b0678c553fc356"}, {"code": "#(= (seq %) (reverse  %))", "problem": 27, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "(fn [v] (= (vec v) (reverse (vec v))))", "problem": 27, "user": "4ff5c077e4b0678c553fc36f"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "(fn [x] (if (= (first x) (last x)) true false))", "problem": 27, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false\n    )))", "problem": 27, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [l]\n    (let [lt (seq l)]\n      (= (reverse lt) lt)))", "problem": 27, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "problem": 27, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn f [s]\n   (loop [x s]\n     (cond\n       (empty? x) true\n       (= 1 (count x)) true\n       (= (first x) (last x)) (recur (rest (butlast x)))\n       :else false)))", "problem": 27, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff889f2e4b0678c553fc399"}, {"code": "(fn [c] (if (string? c)\n            (= c (apply str (reverse c)))\n            (= c (reverse c))))", "problem": 27, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn palindrome? [s]\n  (cond\n    (not= (first s) (last s)) false\n    (zero? (count s)) true\n    :else (recur (drop-last (drop 1 s)))))", "problem": 27, "user": "4f24957ae4b0d66497709fed"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn pal [c] (cond (= c []) true (= 1 (count c)) true\r\n                    :else (= true (= (first c) (last c)) (pal (rest (reverse (rest c)) ) ))))", "problem": 27, "user": "4ff9624ce4b0678c553fc3a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff956eae4b0678c553fc3a7"}, {"code": "(fn [l] (let [x (sequence l)] (=  (reverse x) x)) )", "problem": 27, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [p] (if (string? p) (= p (apply str (reverse p)))  (= p (reverse p))))", "problem": 27, "user": "4ff92cd2e4b0678c553fc3a5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ff63f3fe4b0678c553fc377"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "(fn [x]\n  (let [l (/ (count x) 2)\n        r (take l (rseq (vec x)))\n        s (take l (seq x))]\n    (= r s)))", "problem": 27, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4ff4a3ace4b0678c553fc35e"}, {"code": "(fn pal [seq]\n  (if (< (count seq) 2)\n      true\n    (if (not (= (first seq) (last seq)))\n        false\n      (pal (rest (butlast seq))))))", "problem": 27, "user": "4ec14602535dfed6da9c6daa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffa1335e4b0678c553fc3b5"}, {"code": "(fn [n]\r\n   (let [n1 (reverse n)]\r\n  (every? identity (map = n n1))\r\n   ))", "problem": 27, "user": "4ff5a42ae4b0678c553fc36c"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [xs]\n  (if (empty?  xs)\n      true\n      (and  (= (first xs)\n            (last xs))\n            (recur (next (butlast xs))))))", "problem": 27, "user": "4fef76ece4b0678c553fc319"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ff8fb9ae4b0678c553fc3a4"}, {"code": "(fn [sequence]\n  (let [s (seq sequence)]\n    (= s (reverse s))))", "problem": 27, "user": "4e7e443e535db169f9c7970b"}, {"code": "(fn palindrome? [x]\n  (or\n\t\t(<= (count x) 1)\n\t\t(and\n\t\t\t(= (first x) (first (reverse x)))\n\t\t\t(palindrome? (rest (butlast x)))\n\t\t)\n\t)\n)", "problem": 27, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "(fn palindrome? [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4f8c813de4b02e764a0a519f"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %) ))", "problem": 27, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [col]\n   (loop [i 0 f (dec (count col))]\n     (cond \n        (not= (nth col i) (nth col f)) false\n        (> i f) true \n        :else (recur (inc i) (dec f)))))", "problem": 27, "user": "4ff99f47e4b0678c553fc3aa"}, {"code": "(fn palindrome? [lst]\n  (if (or (empty? lst) (empty? (rest lst)))\n    true\n    (and (= (first lst) (last lst)) (palindrome? (rest (butlast lst))))))", "problem": 27, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [seq] (let [mid (Math/ceil (/ (count seq) 2))] \n     (= (take mid seq) (reverse (take-last mid seq)))))", "problem": 27, "user": "4fb1d7ace4b081705acca281"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f0eeff3535d0136e6c22327"}, {"code": "(comp\r\n  (fn [es]\r\n    (if (nil? es) true\r\n    (if (= (first es) (last es))\r\n         (recur (-> es rest butlast))\r\n      false)))\r\n   seq)", "problem": 27, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [x] (every? true? (map = x  (reverse x))))", "problem": 27, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ffaa25ee4b0678c553fc3be"}, {"code": "(fn [x]\n  (if (= (reverse (seq x)) (seq x))\n    true\n    false\n  ))", "problem": 27, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "4e539f7e535d8a8b8723a272"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f9a5e1ee4b0dcca54ed6d09"}, {"code": "#(= (apply vector %) (reverse (apply vector %)))", "problem": 27, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4ffb5d16e4b0678c553fc3d0"}, {"code": "#(= (seq %) (reverse  %))", "problem": 27, "user": "4ffb61a1e4b0678c553fc3d1"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(loop [l %1 a (first %1) b (last %1)]\n       (if (empty? l)\n         true\n         (if (not= a b)\n             false\n         (recur (butlast (rest l)) (second l) (last (butlast l))))))", "problem": 27, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe8c7dbe4b0547ebccb2423"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ffb335ee4b0678c553fc3c5"}, {"code": "(fn palindrome? [s]\n  ((fn p [a b]\n    (if (and (empty? a) (empty? b))\n        true\n        (and\n          (= (first a) (first b))\n          (p (rest a) (rest b))))) s (reverse s)))", "problem": 27, "user": "4fff72b6e4b0678c553fc400"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fb1159fe4b081705acca273"}, {"code": "(fn [xs]\n  (loop [xss xs]\n    (if (< (count xss) 2)\n      true\n    (if (not= (first xss) (last xss))\n      false\n    (recur (butlast (rest xss)))))))", "problem": 27, "user": "4e4ca885535dc968683fc4df"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffe3349e4b0678c553fc3f0"}, {"code": "(fn [a] (= (reverse a) (reverse (reverse a))))", "problem": 27, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "problem": 27, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "(fn [x] (= (map #((constantly %)) x) (reverse x)))", "problem": 27, "user": "4ff76effe4b0678c553fc390"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50015be1e4b0678c553fc41a"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "problem": 27, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [coll]\n  (let [reversed (reverse coll)]\n      (if (string? coll)\n        (= coll (apply str reversed))\n        (= coll reversed))))", "problem": 27, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn [s] \n  (cond (= 1 (count s)) true\n        (= 2 (count s)) (= (first s) (last s))\n  :else (and (= (first s) (last s)) \n(recur  ( rest (reverse (rest s)))))))", "problem": 27, "user": "5002ad40e4b0678c553fc42b"}, {"code": "(fn palyn [l] \n  (cond\n\t\t(empty? l) \n\t\t\ttrue\n\t\t(empty? (rest l)) \n\t\t\ttrue\n    (= (first l) (first (reverse l))) \n    \t(palyn (butlast (rest l)))\n    :else false\n  )\n)", "problem": 27, "user": "5001dd97e4b0678c553fc421"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f625f68e4b0defedf855fd2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [seq] (= (sequence seq) (reverse (sequence seq))))", "problem": 27, "user": "5003bb77e4b0678c553fc442"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "50033b9be4b0678c553fc439"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ffee0f6e4b0678c553fc3f7"}, {"code": "(fn pal\n  ([s] (pal s 0 (- (count s) 1)))\n  ([s l r]\n    (if (>= l r)\n      true\n      (if (= (nth s l) (nth s r))\n        (pal s (inc l) (dec r))\n        false)\n    )\n  )\n)", "problem": 27, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5003ee7de4b0678c553fc446"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "50052d38e4b0678c553fc45c"}, {"code": "#(= (clojure.core/reverse (seq %)) (seq %))", "problem": 27, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn[x]  (if (string? x) (= x (reverse x))(= x (reduce (fn[rev-lis v] (cons v rev-lis)) [] x))))", "problem": 27, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn palindrome [sequence]\n    (= (seq sequence) (reverse sequence)))", "problem": 27, "user": "50057f23e4b0678c553fc466"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "4ff35abce4b0678c553fc34e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn pal[x] (= (reverse x) (vec x)))", "problem": 27, "user": "50054b5ce4b0678c553fc45f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5006474ce4b0678c553fc481"}, {"code": "(fn [ list ]\n  (= (seq list) (reverse list)))", "problem": 27, "user": "50086dafe4b028e089d3518d"}, {"code": "(fn [s]\r\n  (cond\r\n   (empty? s) true\r\n   (= (last s) (first s)) true\r\n   :else false\r\n   )\r\n  )", "problem": 27, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50090fc7e4b0144d4f561e44"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [w] (every? true? (map #(= (nth w %) (first (take-last (inc %) w))) (range (/ (count w) 2)))))", "problem": 27, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [coll]\n  (let [c (seq coll)]\n    (= c (apply conj '() c))))", "problem": 27, "user": "500933a6e4b046cdb195e074"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f90dd63e4b0dcca54ed6c93"}, {"code": "(fn [x]\n  (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(= (list* %1)(-> %1 list* reverse))", "problem": 27, "user": "500b6685e4b03d00572d2d82"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "500cb910e4b05f7c30cfa698"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn[x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "500c0393e4b03d00572d2d85"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fae0b85e4b081705acca245"}, {"code": "#(= (into [] %) (reverse (into [] %)))", "problem": 27, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn [n] (= (reverse n) (seq n)))", "problem": 27, "user": "500e9d2fe4b00fff93030f9a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [s]\n    (let [s1 s\n        s2 (reverse s)\n        len (min (count s1) (count s2))\n        s1* (take len s1)\n        s2* (take len s2)]\n    (= s1* s2*)))", "problem": 27, "user": "500e6ddee4b04a05d36fcc06"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5005b7bae4b0678c553fc46b"}, {"code": "#(let [coll (if (string? %) (rest (clojure.string/split % #\"\")) %)]\r\n    (= coll (reverse coll)))", "problem": 27, "user": "5006e494e4b0678c553fc492"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [x] (= \r\n\t\t\t\t(cond \r\n                 (string? x) (apply str (reverse x))\r\n                 :else (reverse x))\r\n                 x))", "problem": 27, "user": "4f041af6535dcb61093f6ba3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "500ff421e4b0ae202717946f"}, {"code": "#(let [x (into '() %)] (= x (reverse x)))", "problem": 27, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "problem": 27, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "(fn palin? [arg] (if (or (empty? arg) (== (count arg) 1) ) true (if (not= (first arg) (last arg) ) false (palin? (butlast (rest arg)) )) ))", "problem": 27, "user": "4f9a0f71e4b0dcca54ed6d04"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn [x]\n  (=\n    (seq x)\n    (reduce conj '() x)))", "problem": 27, "user": "500abce2e4b03d00572d2d77"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [x]\n  (or (empty? x)\n      (and (= (first x) (first (reverse x)))\n           (recur (rest (reverse (rest x)))))))", "problem": 27, "user": "50119c07e4b028e9d38b393f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn p? [s]\n  (if (<= (count s) 1)\n      true\n      (if (not= (first s) (last s))\n          false\n          (p? (drop-last (rest s))))))", "problem": 27, "user": "501284d9e4b030d97e4db710"}, {"code": ";(fn pali [x]\r\n;  (if (< (count x) 2)\r\n;    :true\r\n;    (if (= (first x) (last x))\r\n;     (pali (rest (butlast x)))\r\n;     :false)))\r\n\r\n(fn palindrome?\r\n  [x]\r\n  (every? (fn [[a b]] (= a b))\r\n          (partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [s]\n  (every? (fn [[a b]] (= a b))\n          (map vector s (reverse s))))", "problem": 27, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [x]\n  (every? (fn [[a b]] (= a b))\n   (partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [a]\n  (cond\n    (empty? a) true\n    (= 1 (count a)) true\n    :else (and (= (first a) (last a))\n               (recur (rest (butlast a))))))", "problem": 27, "user": "5013141de4b0f26a0e3320a9"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "4f8320e9e4b033992c121c18"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50142490e4b07d18bdaaf70a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [coll]\n  (= coll\n    (if (string? coll)\n        (apply str (reverse coll))\n        (reverse coll))))", "problem": 27, "user": "5014754de4b094324338f8e5"}, {"code": "(fn pal [s]\n  (if-let [s (seq s)]\n    (if (= (first s) (last s))\n        (pal (rest (butlast s)))\n        false)\n     true))", "problem": 27, "user": "501577ade4b0aaedd199e911"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500ebe23e4b00fff93030f9c"}, {"code": "(fn [a-seq] \n  (loop [i 0 j (dec (count a-seq))]\n    (if (or (= j i) (< j i)) true\n      (and (= (nth a-seq i) (nth a-seq j))\n       (recur (inc i) (dec j))))))", "problem": 27, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn pal [x]\n  (if (= (vec x) (reverse x)) true false)\n  )", "problem": 27, "user": "500a214de4b03d00572d2d74"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50166470e4b052339a490e76"}, {"code": "(fn palin\r\n  [s]\r\n  (if (= (str (apply str (reduce conj () s))) (str (apply str s)))\r\n  true\r\n  false))", "problem": 27, "user": "501668b4e4b052339a490e77"}, {"code": "(fn pal [s]\n   (= (seq s) (reverse s)))", "problem": 27, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "problem": 27, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "(fn [s]\n  (= (vec s) (reverse s)))", "problem": 27, "user": "50053d6ce4b0678c553fc45e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "#(=(seq %)(reverse %))", "problem": 27, "user": "5017eface4b02f523d7cc5e7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "501688f7e4b052339a490e7a"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "4ff78679e4b0678c553fc392"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [w]\r\n    (cond\r\n      (string? w) (= w (apply str (reverse w)))\r\n      :else (= w (reverse w))\r\n    )\r\n  )", "problem": 27, "user": "501819efe4b02f523d7cc5eb"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ff76222e4b0678c553fc38e"}, {"code": "#(let [x (vec %)] (= x (reverse x)))", "problem": 27, "user": "500f336be4b03ec779321687"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fb5033ce4b081705acca2b5"}, {"code": "(fn [xs]\n  (if (nil? (next xs)) true\n\t\t(if (not= (first xs) (last xs)) false \n\t\t\t(-> xs next drop-last recur))))", "problem": 27, "user": "500ec491e4b00fff93030f9e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ff66816e4b0678c553fc37a"}, {"code": "(fn [mylist]\n  (every? \n    (fn [[x y]] (= x y))\n    (map vector mylist (reverse mylist))\n  )\n)", "problem": 27, "user": "501b212ee4b0b12d9c5f4d83"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "501c76eae4b01d3bc87c0201"}, {"code": "; without reverse\n(fn [xs]\n  (if (> (count xs) 1)\n  (if (= (first xs) (last xs))\n      (recur (rest (butlast xs)))\n  \t   false)\n  \ttrue)\n  )", "problem": 27, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn __ [x]\r\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn pal \n  [data]\n  (if (> (count data) 1)\n    (if (= (first data) (last data))\n        (pal (rest (butlast data)))\n        false)\n    true))", "problem": 27, "user": "501d0321e4b066e56b9d0b1d"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "50013694e4b0678c553fc417"}, {"code": "#(= (into [] %) (into () %))", "problem": 27, "user": "5018eb4ee4b011a2e0bf6411"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4ec57e4a535d6d7199dd36a4"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "501fed56e4b0cb6ebc0a42f0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffc89e9e4b0678c553fc3dc"}, {"code": "#(= (apply str %1) (apply str (reverse %1)))", "problem": 27, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "#(if (string? %) (= (reverse %) (map char %)) (= (reverse %) %))", "problem": 27, "user": "4fe88cc1e4b07c9f6fd12c42"}, {"code": "(fn [p] (= (vec p) (rseq (vec p))))", "problem": 27, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "501b4af5e4b0ae3ec3946093"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "(fn pally [x] (\n  = (seq x)\n  (reverse (seq x))\n))", "problem": 27, "user": "50202d1ae4b0cb6ebc0a42f3"}, {"code": "(fn ! [x]\n  (if (= 1 (count x))\n    true\n  (do (\n      if (= (first x) (last x))\n        (do (\n          if (= 2 (count x))\n            true\n            (! (next (butlast x)))\n        ))\n        false\n      )\n    )\n  ) \n)", "problem": 27, "user": "501c1492e4b086d93747d180"}, {"code": "(fn asdf [x] (if (every? #(= 0 %) (map compare x (reverse x) )) true false))", "problem": 27, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn palindrome?\r\n  [s]\r\n    (every?\r\n      true?\r\n      (map #(= (first %) (second %))\r\n(partition 2 (interleave s (reverse s))))))", "problem": 27, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn pc [c] (= (seq c) (reverse c)))", "problem": 27, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [x]\n  (or (= 0 (count x))\n    (and\n      (= (first x) (last x))\n      (recur (rest (drop-last x))))))", "problem": 27, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn pal[x]\n  (if (or (empty? x) (= 1 (count x))) true \n    (if (not= (first x) (last x)) false\n      (and true (pal (drop-last (rest x)))))\n  )\n)", "problem": 27, "user": "4fcf642ee4b03432b189f410"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "(fn palindrome? [x]\n  (if (< (count x) 2)\n    ; base case\n    true\n    ; recursive case\n    (if \n      (and\n        (= (first x) (last x))\n        (palindrome? (rest (butlast x)))\n      )\n      true\n      false\n    )\n  )\n)", "problem": 27, "user": "4ffbc28ce4b0678c553fc3d4"}, {"code": "(fn [s]\n  (if (= java.lang.String (type s))\n    (if (= s (apply str (reverse (seq s))))\n      true\n      false)\n    (if (= s (reverse (seq s)))\n      true\n      false)))", "problem": 27, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn [x]\n  (loop [n (- (/ (count x) 2) 0.5)\n          word x\n          list []]\n    (if (> n 0)\n      (recur (dec n)\n              (rest word)\n              (cons (first word) list))\n      (if (= (count word) (count list))\n        (= word list)\n        (= (rest word) list)))\n  )  \n)", "problem": 27, "user": "4fe610fde4b0e8f79898fece"}, {"code": "(fn palindrome [ seq ] \n  ( if ( or ( = ( count seq ) 0 ) ( = ( count seq ) 1 ) )\n    true\n    ( if ( = ( last seq ) ( first seq ) )\n      ( palindrome ( rest ( drop-last  seq ) ) )\n      false ) ) )", "problem": 27, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn x [l]\n  (if (= (count l) 1) true        \n    (let [f (first l)\n          e (last l)\n          s (take (- (count l) 2) (rest l))]\n      (and (= f e)\n          (if (empty? s) true (x s))))))", "problem": 27, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50270618e4b01614d1633feb"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ee3e3b8535d10e5ff6f5373"}, {"code": "(fn [x] \n  (= (seq x) (reverse x)))", "problem": 27, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [x] (= x (if (instance? java.lang.String x) (clojure.string/reverse x) (reverse x))))", "problem": 27, "user": "5027f37be4b01614d1633ff1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50002152e4b0678c553fc407"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "4fcf763de4b03432b189f413"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "4fb1325de4b081705acca276"}, {"code": "#(= \n   (reverse %) \n   (seq %)\n   )", "problem": 27, "user": "4ff54bfbe4b0678c553fc369"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "502ac96de4b0614b5299611b"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))", "problem": 27, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn palindrome [series]\n  (if (< (count series) 2)\n    true\n    (if (= (first series) (last series))\n      (palindrome (rest (reverse (rest series))))\n      false)))", "problem": 27, "user": "502940a9e4b061fd216be4b8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "(fn [c] (reduce #(and % %2) (map = c (reverse c))))", "problem": 27, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "#(= (vec (seq (vec %1))) (vec (rseq (vec %1))))", "problem": 27, "user": "4f9a737fe4b0dcca54ed6d0a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [coll] \n  (loop [c coll r (reverse coll)]\n  (if (= (first c) (first r))\n    (if (and (seq c) (seq r))\n      (recur (rest c) (rest r))\n      true)\n    false)))", "problem": 27, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [coll]\n  (if (= (apply str coll) (apply str (reverse coll)))\n    true\n    false))", "problem": 27, "user": "502925b9e4b0b6c928ad6201"}, {"code": "(fn [sequence]\n  (loop [seq sequence]\n    (if (not= (first seq) (last seq))\n      false\n      (if (< (count seq) 3)\n        true\n        (recur (rest (butlast seq)))\n      )\n    )\n  )      \n)", "problem": 27, "user": "5027bbe3e4b01614d1633fef"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [coll]\r\n                 (let [verse (reverse coll) n (count coll)]\r\n                   (every? identity \r\n                           (map #(= (nth verse %) (nth coll %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "502113cee4b0ef1d2d4433b8"}, {"code": "#(= (reverse %1) (concat %1))", "problem": 27, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [lst]\n  (= (reverse (reverse lst))\n     (reverse lst)))", "problem": 27, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "501306dee4b0c87326002231"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn pal [coll]\n   (not (= (distinct coll) coll)))", "problem": 27, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "#(let [arg %1]\n  (if (string? arg)\n    (= arg (apply str (rseq (vec arg))))\n    (= arg (rseq (vec arg)))))", "problem": 27, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "#(= (nth % 0) (last %))", "problem": 27, "user": "502d3912e4b0d96a44ab2030"}, {"code": "(fn [x] (if (= (first x) (last x)) true\n              false))", "problem": 27, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "#(= (if (string? %1) (str %1) %1) \n     (if (string? %1) (apply str (reverse %1)) (reverse %1)))", "problem": 27, "user": "502ec7aae4b06efe12e8cc78"}, {"code": "(fn [s]\r\n  (= (seq s) (reverse s)))", "problem": 27, "user": "502f4c89e4b0842eb223d8b9"}, {"code": "#(= % ((if (string? %) clojure.string/reverse reverse) %))", "problem": 27, "user": "502aaadee4b0614b52996117"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "#(= (reduce str %) (apply str (reverse %)))", "problem": 27, "user": "502b0804e4b063e52107afad"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [s] \n  (= (seq s) (reverse s)))", "problem": 27, "user": "4f284db6e4b0d6649770a014"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "502cd12fe4b0532a782a5e39"}, {"code": "#(= (reverse (seq %1)) (seq %1))", "problem": 27, "user": "50321311e4b000fc67a99a86"}, {"code": "(fn [ls] \n  (cond (empty? (rest ls)) true\n        (not= (first ls) (last ls)) false\n        :else \n        (recur \n          (rest (reverse (rest ls))))))", "problem": 27, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [s]\n  (let [c (count s)]\n    (loop [i 0 a (nth s 0) b (nth s (- c 1))]\n      (let [x (* (+ i 1) 2) y (if (odd? c) (- c 1) c)]\n        (if (= x y) (= (nth s i) (nth s (if (odd? c) (+ i 2) (+ i 1))))\n          (if (not (= a b)) false\n            (recur (inc i) (nth s (inc i)) (nth s (- c (+ i 2))))))))))", "problem": 27, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn pal [x]\n  (if (<= (count x) 1) true\n    (and \n      (= (first x) (last x))\n      (recur (butlast (rest x))))))", "problem": 27, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [a]\n  (let [r (reverse a) rr (reverse (reverse a))]\n    (if (= rr r) true false)))", "problem": 27, "user": "503279b1e4b0e78df07b0930"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ffdca56e4b0678c553fc3e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5032a96ae4b0e78df07b0932"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(if (<= (count %) 1) true \n     (if (= (first %) (last %) )\n            (recur (-> % rest butlast) )\n            false\n      )        \n )", "problem": 27, "user": "4e952463535dbda64a6f6b31"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "50336c6be4b0c6c1199c710f"}, {"code": "#(or (or (= % \"racecar\") (= % [:foo :bar :foo])) (= % '(1 1 3 3 1 1)))", "problem": 27, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [coll]\n  (loop [input coll]\n    (if (< (count input) 2)\n      true\n      (if (not (= (first input) (last input)))\n        false\n        (recur (take (- (count input) 2) (rest input)))))))", "problem": 27, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(= (reverse (seq %)) (seq %) )", "problem": 27, "user": "50293245e4b08353e5d459cf"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "5034a14de4b062bc5d7ae165"}, {"code": "#(let [l (reverse %)] (= (reverse l) l))", "problem": 27, "user": "50352431e4b0a84c1d88f620"}, {"code": "#(if (string? %1)\n  (= %1 (clojure.string/reverse %1))\n  (= %1 (reverse %1)))", "problem": 27, "user": "5029faf6e4b023940c84aa46"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "502fb9bee4b0f8db655c4ee2"}, {"code": "(fn palindromedetector [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "5029481ee4b0b33e9bf6fdee"}, {"code": "(fn f [x]\n    (= (seq x) (into () x))\n    )", "problem": 27, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn [s]\n  (every? \n\t\t#(= true %) \n\t\t(map\n\t\t\t=\n\t\t\t(drop-last (int (/ (count s) 2)) s)\n\t\t\t(drop-last (int (/ (count s) 2)) (reverse s)))))", "problem": 27, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn pal[x]\n  (let [pa (reverse x) n (count x)]\n    (every? identity \n      (map #(= (nth x %) (nth pa %))\n           (range (/ (dec n) 2))\n           )\n    )\n  )\n)", "problem": 27, "user": "50254e70e4b0b0b8afb15aa7"}, {"code": "#(= % (if (string? %) (clojure.string/join \"\" (reverse %)) (reverse %)))", "problem": 27, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn palindromo[ s] \n  (= (apply str s) (apply str(reverse s)))\n )", "problem": 27, "user": "50291679e4b0b6c928ad6200"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn \n  [x] \n    (if (= (type x) (type \"str\"))\n      (= x (apply str (reverse x)))\n      (= x (reverse x))))", "problem": 27, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [x] (if (= (reverse (reverse x)) (reverse x)) true false))", "problem": 27, "user": "50206641e4b0cb6ebc0a42f5"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "(fn [pal]\n  (letfn [(pal? [s]\n    (cond\n      (<= (count s) 1) true\n      (and (= (first s) (last s)) (pal? (rest (butlast s)))) true\n      :else false))]\n  (pal? pal)))", "problem": 27, "user": "50369122e4b0af0658af779e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "50390828e4b088a6a14ca762"}, {"code": "#(if (= (reverse %1) (seq %1)) true false)", "problem": 27, "user": "50399468e4b088a6a14ca768"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn palindrome? [collection]\n  (= (apply str (seq collection))\n          (apply str (reverse (seq collection)))))", "problem": 27, "user": "503a5623e4b07a1917cc34d3"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [s]\n  (= (reverse s) (seq s)))", "problem": 27, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [col]\n  (let [len (count col)\n      c1 (drop-last (/ len 2) col)\n      c2 (reverse (drop (/ len 2) col))]\n    (reduce #(and %1 %2) (map = c1 c2))))", "problem": 27, "user": "50387196e4b0803468ea2c6e"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "5036dea0e4b0af0658af77a4"}, {"code": "#(= (take (/ (count %1) 2) %1) (reverse (take-last (/ (count %1) 2) %1)))", "problem": 27, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503b5a64e4b07a1917cc34dc"}, {"code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "problem": 27, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [input]\n(let [x (split-at (quot (count input) 2) input)\n  y (first x)\n  z (reverse ( second x))\n  t (map vector y z)\n      \n      \n  an (every? #(= (first %) (second %)) t) ]\n  an)\n)", "problem": 27, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503ac764e4b07a1917cc34d8"}, {"code": ";comments\n#(= (reverse %) (seq %))", "problem": 27, "user": "50378996e4b0af0658af77ae"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn anon [x]\n  (cond\n    (empty? x) true\n    (= (first x) (last x)) (anon (rest (reverse (rest x))))\n    true false))", "problem": 27, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [x]\n  (if (= (reverse (vec x)) (vec x)) true false))", "problem": 27, "user": "502aac6ae4b0614b52996118"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [coll]\n  (= (clojure.string/join coll) (clojure.string/join (reverse coll))))", "problem": 27, "user": "4ff695f8e4b0678c553fc380"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [l]\n  (= l (if (string? l)\n    (apply str (reverse l))\n    (reverse l)\n  ))\n)", "problem": 27, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [col] (= (seq col) (reverse col)))", "problem": 27, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn palin? [seq]\n  (if (or (empty? seq) (empty? (rest seq)))\n    true\n    (and (= (first seq) (last seq))\n         (palin? (rest (butlast seq))))))", "problem": 27, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "#((fn [x seq2] \n  (or (empty? seq2)\n      (and (= x (last seq2))\n           (recur (first seq2) (butlast (rest seq2))))))\n(first %) (seq (rest %)))", "problem": 27, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "(fn [arr] (= (reduce conj () arr) (reduce conj [] arr)))", "problem": 27, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn [x] (every? #(= (first %) (last %)) (partition 2 (interleave x (reverse x)))))", "problem": 27, "user": "4db5708d535d87e67b28fe0c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50410452e4b06d8231e4faca"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50431cbce4b034ff00315d1c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e8708e3535dceadca46984e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5042de0de4b034ff00315d1b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn ispal [seq] \n  (cond (empty? seq) true\n    (= (first seq) (last seq)) (ispal (drop 1 (drop-last seq)))\n    :else false\n  ))", "problem": 27, "user": "4fb266a5e4b081705acca28c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5043a536e4b034ff00315d24"}, {"code": "#(= (vec (seq %)) (rseq (vec (seq %))))", "problem": 27, "user": "50403ae1e4b0ff5d2cc40dae"}, {"code": "(fn [l]\n  (let [l (seq l)]\n    (= (reverse l) l)))", "problem": 27, "user": "50435852e4b034ff00315d22"}, {"code": "(fn pal [xs]\n  (if (empty? xs)\n    true\n    (and\n      (= (first xs) (last xs))\n      (pal (rest (butlast xs))))))", "problem": 27, "user": "4fab1ea1e4b081705acca210"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db0114d838c48654951d9b8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e7d9257535db169f9c796dd"}, {"code": "#(reduce (fn [a b] (and a b))\n         (map = % (reverse %)))", "problem": 27, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [a]\n  (= (seq a) (reverse a)))", "problem": 27, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [a]\n   (let [a (seq a)\n         b (reverse a)]\n     (= a b)))", "problem": 27, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50458888e4b01f6c9a8b236d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50471d36e4b03b02161376b6"}, {"code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "problem": 27, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn[sec]\n  (let \n    [len (count sec)\n    half (unchecked-divide-int len 2)]\n   (= (reverse (take half sec))\n      (drop (if (odd? len) (+ 1 half) half) sec))))", "problem": 27, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "50479524e4b0371827a27bc4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50432da5e4b034ff00315d1e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "50435689e4b034ff00315d21"}, {"code": "#(let [x (vec (seq %))] (let [c (count x) sp (if (even? c)  (/ c 2)  (inc (/ c 2)) )]   (= (subvec x 0 (/ c 2)) (reverse (subvec x sp)) )))", "problem": 27, "user": "50463347e4b011c5dfee771e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "(fn [x] (=  (vec (reverse x)) (vec x)))", "problem": 27, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "5034374de4b062bc5d7ae161"}, {"code": "(fn [x]\n   (every? true? (map = x (reverse x))))", "problem": 27, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [col] \n  (= (seq col)\n     (reverse col)\n  )\n)", "problem": 27, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#(let [rev (reverse %)\n        s (string? %)]\n      (if s\n        (= % (apply str rev))\n        (= % rev)))", "problem": 27, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn pal [coll]\n  (every? #(= (first %) (second %))\n    (map #(vector %1 %2) coll (reverse coll))\n))", "problem": 27, "user": "504d0116e4b022602c20b089"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [a] \n  (= (seq a) (reverse a)))", "problem": 27, "user": "50295775e4b0b33e9bf6fdf2"}, {"code": "(fn [col]\n  (= (seq col)(reverse col)))", "problem": 27, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [xs] (= (flatten (list xs)) (reverse (flatten (list xs)))))", "problem": 27, "user": "504e2a3fe4b0f6ff3350c477"}, {"code": "(fn pal [s] (cond (empty? s) true \n                  (= (first s) (last s)) (recur (rest (butlast s)))\n                  :else false))", "problem": 27, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn pal [s]\r\n  (let [items (seq s)]\r\n    (if (or (empty? items) (= (count items) 1))\r\n      true\r\n      (if (= (last items) (first items))\r\n        (pal (nthrest (butlast (seq s)) 1))\r\n        false))))", "problem": 27, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "(fn pal [s]\n  ((fn seqeq? [s t]\n    (if (empty? s) true\n      (and\n        (= (first s) (first t))\n        (seqeq? (rest s) (rest t)))))\n    s (reverse s)))", "problem": 27, "user": "504e48ace4b0f6ff3350c498"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [x]\n  (let [r (reverse x)]\n    (reduce (fn [a b] (and a b))  (map =  x r))))", "problem": 27, "user": "504e127fe4b078edc5f593b6"}, {"code": "(fn palindrome [x] \n  (if (= (count x) 1)\n    true\n    (if (= (count x) 2)\n      (= (first x) (last x))\n      (and (= (first x) (last x)) (palindrome (rest (drop-last x))))\n    )\n  )\n)", "problem": 27, "user": "504e2f98e4b0f6ff3350c47e"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504e3afae4b0f6ff3350c488"}, {"code": "(fn [x] (= (into () x) (reverse (into () x))))", "problem": 27, "user": "504ed58ce4b069badc5a33d2"}, {"code": "(fn [s] (= (seq s) (reduce conj '() s)))", "problem": 27, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "504ed16de4b069badc5a33cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [w]\n  (= (if (string? w) (apply str (reverse w)) (reverse w)) w))", "problem": 27, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "504ec46de4b069badc5a33c8"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504e397ee4b0f6ff3350c485"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504eed01e4b0e7ad84dbc4a5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504eb604e4b069badc5a33c4"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "504e14c2e4b078edc5f593bf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "#(let [x (vec %)] (= x (reverse x)))", "problem": 27, "user": "504f6adfe4b0a02f9cffde81"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "504e058de4b078edc5f5939b"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn p [x]\n  (if (= (reverse x) (reverse (reverse x)))\n    true\n    false\n  )\n)", "problem": 27, "user": "504e5989e4b0f6ff3350c4a4"}, {"code": "(fn [xs]\n  (loop [x xs]\n    (if (nil? x)\n     true\n     (if (= (first x) (last x))\n        (recur (butlast (rest x)))\n        false\n     ))))", "problem": 27, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn [what]\n  (= (map identity what) (map identity (reverse what))))", "problem": 27, "user": "504e2011e4b0f6ff3350c469"}, {"code": "(fn paly [l] (or (< (count l) 2)(and (= (first l) (last l)) \n             (paly (rest (butlast l))))))", "problem": 27, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50456731e4b01f6c9a8b236b"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn palin [l]\n  (let [paux (fn paux [l a b]\n    (cond\n      (>= a b) true\n      (= (nth l a) (nth l b)) (paux l (+ a 1) (- b 1))\n      :else false)\n    )]\n    (paux l 0 (- (count l) 1))\n  ))", "problem": 27, "user": "505024a4e4b0a02f9cffdeb4"}, {"code": "(fn [l] (let [l (seq l) r (reverse l)] (= l r)))", "problem": 27, "user": "504e7b88e4b069badc5a33ad"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [a] (= (seq a) (reverse (seq a))))", "problem": 27, "user": "5050b107e4b063148f524126"}, {"code": "(fn [xs] \n  (empty?\n    (filter #(false? %)\n      (map #(= %1 %2) (seq xs) (reverse xs)))))", "problem": 27, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "504f87e0e4b0a02f9cffde91"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [x]\r\n  (= (reverse x) (seq x)))", "problem": 27, "user": "50436470e4b034ff00315d23"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "503dea56e4b06c4e0e1fa25a"}, {"code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(if (empty? %)\n          true\n          (if (= (last %) (first %))\n            (recur (rest (butlast %)))\n            false\n          )\n  )", "problem": 27, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "5051e2c0e4b0a561d07d8f0b"}, {"code": "(fn [x]\n  (every? \n    (fn [i] (= i true))\n    (map =\n      (seq x) (reverse (seq x)))))", "problem": 27, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "504f9ae1e4b0a02f9cffde9c"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "4f045946535dcb61093f6bba"}, {"code": "#(let [median (quot (count %) 2)]\n  (= (take median %) (take median (reverse %))))", "problem": 27, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "(fn [l]\n  (= (reverse l) (seq l))\n)", "problem": 27, "user": "504e1ddae4b0f6ff3350c466"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn f[s]\n  (or\n    (= s [])\n    (and \n      (= (first s) (last s))\n      (f (reverse (rest (reverse (rest s)))))\n    )\n  )\n)", "problem": 27, "user": "50512f61e4b0b30bd8f4f83f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5052f384e4b0a561d07d8f25"}, {"code": "(fn [s] (= s\n           (if (string? s)\n            (apply str (reverse s))\n            (reverse s))))", "problem": 27, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn palindrome? [s]\n  (let [c (count s)\n        hc (/ c 2)]\n    (=\n     (take hc s)\n     (take hc (reverse s)))))", "problem": 27, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [a]\n  (= (reverse a) (seq a)))", "problem": 27, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [xs]\n  (= (reverse (reverse xs)) (reverse xs)))", "problem": 27, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [col]\n  (= (seq col) (reverse col)))", "problem": 27, "user": "4f06f90a535dcb61093f6c1b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [coll]\n  (let [c (seq coll)]\n    (= c (reverse c))))", "problem": 27, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50586354e4b06522596eba78"}, {"code": "(fn [x] \n  (if (string? x)\n  (= x (apply str (reverse x)))\n  (= x (reverse x))))", "problem": 27, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [x]\r\n  (if (= (seq x)(reverse x))\r\n    true\r\n    false))", "problem": 27, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "4fd6e70fe4b0dab7d829f379"}, {"code": "(fn [x]\n  (loop [y x]\n    (if (or (empty? y) (= 1 (count y)))\n      true\n      (if-not (= (first y) (last y))\n        false\n      (recur (pop (vector (rest y))))))))", "problem": 27, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [coll]\n  (= (apply str coll) (apply str (reverse coll))))", "problem": 27, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn pal [l] (\n  if\n  (< (count l) 2) \n  true \n  (\n    if \n    (= (first l) (last l))\n    (pal (butlast (rest l)))\n    false\n  )\n))", "problem": 27, "user": "505885c4e4b06522596eba7b"}, {"code": "(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse (seq s)))))", "problem": 27, "user": "504e3f22e4b0f6ff3350c48e"}, {"code": "(fn my-parlindrome [coll]\n  (loop [coll coll]\n    (let [rev (reverse coll)]\n      (every? true? (map = coll rev)))))", "problem": 27, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "(fn [l] (= (seq l) (reverse (seq l))))", "problem": 27, "user": "505b9084e4b032b709c81371"}, {"code": "#(= (reverse %) (vec %) )", "problem": 27, "user": "505d26aee4b0e6aca564be05"}, {"code": "(fn pal [list]\n  (if (> 2 (count list))\n      true\n    (let [f (first list)\n          r1 (reverse (rest list))\n          l (first r1)\n          r (reverse (rest r1))]\n      (and (= f l) (pal r)))))", "problem": 27, "user": "505cc50ce4b0e6aca564be00"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50588ff1e4b06522596eba7e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn palin [x]\n    (let [split (split-at (/ (count x) 2) x)\n          p1 (first split) p2 (second split)]\n        (if (odd? (count x))\n            (= (reverse (butlast p1)) p2)\n            (= (reverse p1) p2))\n    )\n)", "problem": 27, "user": "50588af1e4b06522596eba7d"}, {"code": "#(= (reverse %) (list* %))", "problem": 27, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [x]\r\n ((fn pali [n coll]\r\n  (if (> (inc n) (/ (count coll) 2))\r\n   true\r\n   (if (= (nth coll n) (nth coll (- (count coll) (inc n))))\r\n    (pali (inc n) coll)\r\n    false)))\r\n 0 x))", "problem": 27, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [x]\n  (let [sx (seq x)\n         rsx (reverse sx)]\n        (= sx rsx)))", "problem": 27, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn [x]\n  (= (clojure.string/join x)\n     (clojure.string/join (reverse x))))", "problem": 27, "user": "505aa653e4b021387fb89857"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4f10234c535d64f603146413"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "505f5d8ae4b08f2a82ad10b1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "#(loop [poly %]\n    (cond (empty? poly) true\n          (not= (first poly) (last poly)) false\n          :else (recur (rest (drop-last poly)))))", "problem": 27, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50604918e4b08f2a82ad10bb"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [lst]\n  (loop [fwd lst \n         rvs (reverse lst)]\n    (if (empty? fwd)\n        true\n        (if (= (first fwd) (first rvs))\n            (recur (rest fwd) (rest rvs))\n            false))))", "problem": 27, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [s]\n  (= (reverse s) (seq s)))", "problem": 27, "user": "50589113e4b06522596eba7f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f84a4a4e4b033992c121c39"}, {"code": "#( = (reverse (reverse %)) (reverse %))", "problem": 27, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn p [in]\n  (and\n    (= (first in) (last in))\n    (or\n      (< (count in) 3)\n      (p (butlast (rest in)))\n    )\n  )\n)", "problem": 27, "user": "50608d4ce4b07251188e4455"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50630247e4b05ac47bc68d6b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [xs]\n  (cond (empty? xs) true\n        (= (first xs) (last xs)) (recur (-> xs rest drop-last))\n        :else false))", "problem": 27, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn eqqq [a] (= (seq a) (reverse a)))", "problem": 27, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [n] (= (seq n) (reverse n)))", "problem": 27, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "(fn palindrome [s] (= (seq s) (reverse s)))", "problem": 27, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [s]\n  (let [sq (seq s)]\n    (cond (or (not sq) (not (next sq))) true\n          (not (= (first sq) (last sq))) false\n          :else (recur (butlast (rest sq))))))", "problem": 27, "user": "5063fe48e4b075d771da6f9e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50657775e4b0deb876850599"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50645e12e4b007509339a58a"}, {"code": "#(loop [S %]\n  (if (empty? S)\n    true\n    (if (= (first S) (last S))\n      (recur (-> S next reverse next reverse)) ;sorry\n      false)))", "problem": 27, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "(fn palindrome [val] \n  (let [seq-val (seq val)\n        r-val (reverse seq-val)]\n    (= seq-val r-val)))", "problem": 27, "user": "50621cbde4b0341461c88951"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn[l] \n  (= \n    (reverse (take (quot (count l) 2) l))\n    (take-last (quot (count l) 2) l)))", "problem": 27, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn palindrome? [s]\n  (if (or (empty? s) (= (count s) 1))\n      true\n      (and (= (first s) (last s))\n           (palindrome? (rest (drop-last s))))))", "problem": 27, "user": "504db141e4b021508a333965"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [xs]\n  (let [ys (seq xs)]\n    (= ys (reverse ys))))", "problem": 27, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn palindrome? [seq]\n  (if (<= (count seq) 1)\n    true\n    (if (= (first seq) (last seq))\n      (palindrome? (rest (butlast seq)))\n      false)))", "problem": 27, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [x]\n  (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [s]\n    (let [h (-> s count (/ 2) int)]\n\t\t(= (take-last h s) (reverse (take h s)))\n    )\n)", "problem": 27, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "#(= (apply list %) (reverse %))", "problem": 27, "user": "5057852ce4b0012181721992"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5068fa8ee4b0c0169921a8e5"}, {"code": "(fn [x] (= (seq x) (rseq (vec x))))", "problem": 27, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn [x]\n  (loop [coll (vec x) palyndrome true]\n  (if (or (empty? coll) (not palyndrome))\n    palyndrome\n  (recur (subvec coll 1 (count coll)) (= (first x) (last x)\n)))))", "problem": 27, "user": "5068c203e4b0c0169921a8e4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5066fa7de4b03d366d7cb2b9"}, {"code": "#(= (seq %)(-> % reverse))", "problem": 27, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "5037c397e4b0af0658af77b4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(let [half (quot (count %) 2)] (= (take half %) (reverse (take-last half %))))", "problem": 27, "user": "50523848e4b0a561d07d8f1a"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [s]\n   (cond\n    (string? s) (= s (clojure.string/join (reverse s)))\n    :else (= s (reverse s))\n  )\n   )", "problem": 27, "user": "4f83dd78e4b033992c121c24"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "506b437de4b0eda3100c0906"}, {"code": "#(cond\n   (= java.lang.String (type %)) (= % (clojure.string/reverse %))\n   :else (= % (reverse %)))", "problem": 27, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "50509b47e4b0a02f9cffdebe"}, {"code": "(fn [coll]\n  (every?\n    (fn [[a b]] (= a b))\n    (partition 2 (interleave coll (reverse coll)))))", "problem": 27, "user": "506c8116e4b0a302964c548a"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "506b18c8e4b0a2a5463de383"}, {"code": "(fn [coll]\n  (.equals\n    (apply str coll)\n    (apply str (reverse coll))))", "problem": 27, "user": "506929ffe4b01dc6af13f82b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn [l]\r\n  (let [metade (split-at (/ (count l) 2) l )]\r\n  (= \t(first metade)\r\n        (reverse (if (even? (count l))\r\n\t\t\t \t\t(second metade)\r\n            \t\t(cons (last (first metade))\r\n                  \t\t  (second metade)))))))", "problem": 27, "user": "50576483e4b001218172198b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "502cb310e4b0532a782a5e38"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#( = (reverse %) (reverse (reverse %)))", "problem": 27, "user": "505e3b57e4b011187b721f39"}, {"code": "(fn [l]\n  (if (< (count l) 1)\n    true\n    (if (not (= (first l) (last l)))\n      false\n      (recur (butlast (rest l)))\n    )\n  )\n)", "problem": 27, "user": "506ec408e4b09350ab4199f1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "#(if (= (reverse %)(seq %)) true false)", "problem": 27, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "#(every? identity (map = % (reverse %)))", "problem": 27, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [p]\t(let [c (/ (count p) 2)]  (= (drop-last c p) (reverse (drop c p)))))", "problem": 27, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "(fn pal? [coll]\n  (or (= 1 (count coll))\n      (= 0 (count coll))  \n    (and (= (first coll)\n            (last coll))\n      (pal? (drop 1 (butlast coll))))))", "problem": 27, "user": "506f1e12e4b09350ab4199f9"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [lst] (= (reverse lst) (seq lst)))", "problem": 27, "user": "50720885e4b0e3170b5a8689"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5071e520e4b0e3170b5a8683"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f83ae07e4b033992c121c21"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn pal? [lis] (cond (and (= (last lis) (first lis)) (empty? (rest lis))) true (not (= (last lis) (first lis))) false\r\n                     true (pal? (butlast (rest lis)))))", "problem": 27, "user": "5071f3b4e4b0e3170b5a8686"}, {"code": "(fn[s]\r\n  (let [size (count s)]\r\n    (cond\r\n      (<= size 1) true\r\n      :else\r\n        (if (= (first s) (last s))\r\n          (recur (butlast (rest s)))\r\n          false))))", "problem": 27, "user": "506ce637e4b0a302964c5490"}, {"code": "(fn f [c]\n  (let [coll (seq c) l (count c)]\n    (case l\n      1 true\n      2 (= (first coll) (second coll))\n      (and (= (first coll) (last coll)) (f (butlast (rest coll)))))))", "problem": 27, "user": "50729f67e4b0e3170b5a868e"}, {"code": "#(= (map identity %1) (reverse %1))", "problem": 27, "user": "506afdafe4b0a2a5463de37e"}, {"code": "(fn [l] (= (seq l) (reverse l)))", "problem": 27, "user": "507437c2e4b054001656acd0"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50740835e4b054001656accd"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50657858e4b0deb87685059a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50748923e4b054001656acd3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5065b810e4b0148eb3925aec"}, {"code": "(fn palindrome [xs]\n  ((fn helper [ys zs]\n    (cond\n      (and (empty? ys) (empty? zs)) true\n      (or (empty? ys) (empty? zs)) false\n      (= (first ys) (first zs)) (helper (rest ys) (rest zs))\n      true false\n    )\n  )  xs (reverse xs) )\n)", "problem": 27, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "506cc221e4b0a302964c548f"}, {"code": "#(loop [c %]\n (if (or (empty? c) (= (count c) 1))\n  true\n  (if (not= (first c) (last c))\n    false\n    (recur (rest (butlast c))))))", "problem": 27, "user": "506e9464e4b09350ab4199f0"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "507630ffe4b0a894bb95bf3c"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "4faa7185e4b081705acca1f3"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5075d655e4b09049dea827a3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50746e23e4b054001656acd1"}, {"code": "(fn [lst]\n  (= (reverse lst) (seq lst)))", "problem": 27, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [sq]\n  (let [sq (seq sq)]\n    (= sq (reverse sq))))", "problem": 27, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f32ef71e4b0d6649770a098"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50783762e4b0fc74642bff67"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [sq]\r\n  (let [canon (list* sq)]\r\n    (= canon (reverse canon))))", "problem": 27, "user": "50775a7de4b0fc74642bff60"}, {"code": "(fn [x] ( = (seq x) (reverse x)) )", "problem": 27, "user": "507a9b29e4b08327cd804a6e"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "502ac868e4b0614b5299611a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4dbac43b535d1e037afb21ac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "#(zero? (compare (vec %) (vec (reverse %))))", "problem": 27, "user": "506558f0e4b0deb876850596"}, {"code": "(fn [s]\n  (let [t (into [] s)]\n    (= t (reverse t))))", "problem": 27, "user": "50799992e4b08327cd804a62"}, {"code": "(fn [n] (= (reverse (reverse n)) (reverse n)))", "problem": 27, "user": "507c4829e4b0a19f8e876e57"}, {"code": "(fn [s] (= (reverse s) ((comp reverse reverse) s)))", "problem": 27, "user": "4fceef7ae4b03432b189f40a"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "5078dedae4b08327cd804a5d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5073de20e4b054001656acca"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "507d28cfe4b00f5b3a6e1a13"}, {"code": "(fn palin[s]\n  (= (map identity s) (reverse s)))", "problem": 27, "user": "507db411e4b03c76e5499e06"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5060ae00e4b07251188e4459"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(loop [x %]\n    (if (< (count x) 2)\n         true\n         (if (= (last x) (first x))\n           (recur (drop 1 (take (dec (count x)) x)))\n           false)))", "problem": 27, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn p [s]\n  (if (< (count s) 2)\n    true\n    (if-not (= (first s) (last s))\n      false\n      (p (butlast (rest s)))\n    )\n  )\n)", "problem": 27, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "507a396be4b08327cd804a69"}, {"code": "#(= (seq (reverse %1)) (seq %1))", "problem": 27, "user": "5069874de4b01dc6af13f832"}, {"code": "(fn [x]\n  (= \n    (clojure.string/join \"\" x) \n    (clojure.string/join \"\" (reverse x))))", "problem": 27, "user": "4f5576c2e4b0a7574ea71801"}, {"code": "(fn palindrome? [s]\n  (if (string? s)\n    (palindrome? (map str s))\n  \t(= (reverse s) s)))", "problem": 27, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508157b2e4b0946d0443855c"}, {"code": "#(if (string? %) (= % (apply str (reverse %)))\n                 (= % (reverse %)))", "problem": 27, "user": "50815c9fe4b0946d0443855d"}, {"code": "#(= (concat '() %) (reverse %))", "problem": 27, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn foo [coll] (if (empty? coll) true (if (= (first coll) (last coll)) (foo (butlast (rest coll))) false)))", "problem": 27, "user": "5078300de4b0fc74642bff66"}, {"code": "#(= (concat %) (reverse %))", "problem": 27, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn [xs] (let [v (vec xs)] (= v (reverse v))))", "problem": 27, "user": "507fe6fee4b089ade05efbd6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "#(= (reverse %) (if (seq? %) % (seq %)))", "problem": 27, "user": "4f2942ace4b0d6649770a01e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "507ab268e4b08327cd804a6f"}, {"code": "(fn [x] (loop [coll x]\n(cond\n(= 0 (count coll)) true\n(= 1 (count coll)) true\n(not (= (first coll) (last coll))) false\n:else (recur (drop-last (rest coll))))))", "problem": 27, "user": "507ddf55e4b0a03698d01ca8"}, {"code": "#(= (reverse %) (sequence %))", "problem": 27, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e72dd5d535d5021c1a89667"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn[x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "507da5a7e4b03c76e5499e03"}, {"code": "#(loop [x % y %] \n  (if (empty? x) true\n  (if\n    (not= (last x) (first y)) \nfalse \n(recur (drop-last x) (rest y)))))", "problem": 27, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn palindrome [collection]\r\n  (loop [front collection back collection]\r\n\t\t(if (= '() front)\r\n\t\t\ttrue\r\n\t\t\t(if (not= (first front) (last back))\r\n\t\t\t\tfalse\r\n\t\t\t\t(recur (rest front) (drop-last back))\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n)", "problem": 27, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "(fn [sequence]\r\n  (let [sq (seq sequence)]\r\n    (loop [i 0 j (- (count sq) 1)]\r\n      (cond\r\n        (= i j) true\r\n        (and (= (- j 1) i) (= (nth sq i) (nth sq j))) true\r\n        (= (nth sq i) (nth sq j)) (recur (inc i) (dec j))\r\n        (not (= (nth sq i) (nth sq j))) false))))", "problem": 27, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [arg] (= (seq arg) (reverse (seq arg))))", "problem": 27, "user": "50838c06e4b0902986d69e0f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5082709ee4b06a522e8c7af1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "507faa9fe4b089ade05efbd2"}, {"code": "(fn [coll]\n (loop [x coll]\n  (if (= (first (vec x)) (last (vec x)))\n   (if (empty? x)\n    true\n    (recur (next (reverse (next x)))))\n   false)))", "problem": 27, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [word]\n         (if-not (string? word)\n           (= (reverse word) word)\n           (= (apply str (reverse word) word))))", "problem": 27, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [s]\r\n   (let [r (reverse s)]\r\n     (if (= (count (filter true? (map = s r))) (count s))\r\n       true\r\n       false)))", "problem": 27, "user": "50868795e4b004985b776e5e"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn [x] (= (seq x) (reverse ( seq x))))", "problem": 27, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(let [rv (reverse %)]\n  (= % (if (string? %) (apply str rv) rv)))", "problem": 27, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [v]\n  (= (seq v) (reverse v)))", "problem": 27, "user": "507bb3ece4b09034bfeeb720"}, {"code": "#(let [pal %1]\n    (if (string? pal)\n      (if (= pal (reduce str (reverse pal)))\n        true\n        false\n      )\n      (if (= pal (reverse pal))\n        true\n        false\n      )\n    )\n)", "problem": 27, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [x] (every? true? (map = x (reverse x))))", "problem": 27, "user": "4db86aee535d1e037afb2193"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn [s] (if (= (seq s) (reverse s))\n            true\n            false))", "problem": 27, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [s]\n                  (= (seq s)\n                     (reverse (seq s))\n                     ))", "problem": 27, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "(fn pal [s]\n  (or\n    (empty? s)\n    (= 1 (count s))\n    (and \n      (= (first s) (last s))\n      (recur (rest (reverse (rest (reverse s))))))))", "problem": 27, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "50696bace4b01dc6af13f830"}, {"code": "(fn [xs] (= (map identity xs) (reverse xs)))", "problem": 27, "user": "507de7cde4b085af06e3afd0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [c] (= (vec c) (reverse c)))", "problem": 27, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [seq] (if (string? seq) (= seq (clojure.string/join (reverse seq))) (= seq (reverse seq))))", "problem": 27, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "50897033e4b037578f03c8b3"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(loop [xs %1 l 0 r (- (count %1) 1)]\n  (if (>= l r)\n    true\n    (if (not= (nth xs l) (nth xs r))\n      false\n      (recur xs (inc l) (dec r)))))", "problem": 27, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [coll] (not (some false? (map #(= %1 %2) coll (reverse coll)))))", "problem": 27, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "(fn [x]\n  (loop [l x]\n    (if (or (= (count l) 0) (= (count l) 1))\n      true\n      (if (= (first x) (last x))\n        (recur (rest (butlast l)))\n        false\n      )\n    )\n  )\n)", "problem": 27, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn[x](= x (if (string? x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "506ee0f4e4b09350ab4199f2"}, {"code": "(fn [s] \n  (let [n (/(count s) 2)\n        head (take n s)\n        tail (take n (reverse s))]\n   (= head tail)))", "problem": 27, "user": "5093bc30e4b097f48cc38584"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "5060c117e4b024449d699b5d"}, {"code": "(fn f [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn func [v] (  cond (= (not= (apply vector v) (apply vector (reverse v))) false) true\r\n               :else false ))", "problem": 27, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "#(= (into [] %) (reverse (into []%)))", "problem": 27, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [coll]\n  (let [rev (reverse coll)]\n    (= rev (reverse rev))\n  ))", "problem": 27, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "(fn [a](= (reverse a) (seq a)))", "problem": 27, "user": "50813b88e4b09292fd669443"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "507fbd77e4b089ade05efbd3"}, {"code": "#(= (vec (reverse (vec %)))  (vec %))", "problem": 27, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [xs]\n  (=\n    (reduce #(cons %2 (if (seq? %1) %1 [%1])) xs)\n    (seq xs)))", "problem": 27, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s]\n  (loop [s s]\n  (let [f (first s)\n        l (last s)]\n    (cond\n      (empty? s) true,\n      (not (= f l)) false,\n      :else (recur (drop 1 (drop-last s)))))))", "problem": 27, "user": "4f856adfe4b033992c121c44"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn [coll] (let [coll' (seq coll)] (= coll' (reverse coll'))))", "problem": 27, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "50949602e4b04e5742806c4e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [seq] \n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))", "problem": 27, "user": "5089860de4b037578f03c8b5"}, {"code": "(fn palindrome[x] (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "50928084e4b097f48cc3856c"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(\r\n    fn [x]\r\n    (\r\n        if\r\n        (\r\n            =\r\n            x\r\n            (\r\n                if (instance? String x)\r\n                    (apply str (reverse x))\r\n                    (reverse x)\r\n            )\r\n        )\r\n        true false\r\n    )\r\n)", "problem": 27, "user": "5097ea8fe4b087ccf61a7af5"}, {"code": "#(every? (fn [[a b]] (= a b)) (zipmap (reverse %) %))", "problem": 27, "user": "5097b556e4b00ad8bab4e970"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn pali [xs]\n  (if (empty? xs) true \n  (if (= (first xs) (last xs))\n    (pali (reverse (rest (reverse (rest xs))))) false)))", "problem": 27, "user": "5097cd83e4b00ad8bab4e974"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508dc047e4b0f17d83ea26c3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(let [half (quot (count %) 2)]\n  (= (take half %)\n     (reverse\n       (take-last half %))))", "problem": 27, "user": "50970f51e4b00ad8bab4e950"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [coll]\n  (loop [c coll]\n    (if (< (count c) 2)\n      true\n      (if (= (first c) (last c))\n        (recur (drop-last (rest c)))\n        false))))", "problem": 27, "user": "5095a0a4e4b087f34d351ab5"}, {"code": "(fn foo [coll]\n  (cond\n    (= (count coll) 1) true\n    (= (count coll) 0) true\n    (= (first coll) (last coll))\n      (foo (-> coll next reverse next reverse))\n    :else false\n  )\n)", "problem": 27, "user": "50959df3e4b087f34d351ab4"}, {"code": "#(= (-> % reverse) (-> % reverse reverse))", "problem": 27, "user": "50976c84e4b00ad8bab4e961"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e7dec83535db169f9c796f3"}, {"code": "(fn palindrome[x] (= x (cond (string? x) (clojure.string/reverse x) :else (reverse x))))", "problem": 27, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn pal [s] (if ( empty? s) true (if (= (first s) (last s) ) (pal (drop 1 (drop-last s)) ) false) ))", "problem": 27, "user": "5098bce3e4b0cae2931060a0"}, {"code": "#(cond (string? %) (= % (clojure.string/join (reverse %))) \n   :else (= % (reverse %)))", "problem": 27, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5097c837e4b00ad8bab4e973"}, {"code": "(fn my-pal [xs]\n  (if (> (count xs) 1)\n\t    (and (= (first xs) (last xs))\n\t\t (my-pal (butlast (rest xs))))\n\t    true))", "problem": 27, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn palindrome [x]\r\n  (if (= (type x) java.lang.String)\r\n    (= x (apply str (vec (reverse x))))\r\n    (= x (reverse x))))", "problem": 27, "user": "4fa313bbe4b081705acca188"}, {"code": "(fn [col]\r\n  (letfn [(my-reverse [col]\r\n                      (letfn [(f [col res]\r\n                                 (cond\r\n                                  (empty? col) res\r\n                                  true (recur (rest col) (lazy-seq (cons (first col) res)))))]\r\n                        (f col '())))]\r\n    (let [r-col (my-reverse col)]\r\n      (= (my-reverse r-col) r-col))))", "problem": 27, "user": "5087d0e4e4b0198722bd9851"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50928ecfe4b097f48cc38570"}, {"code": "#(let [y (reverse %), c (quot (count %) 2)] (= (take c %) (take c y)))", "problem": 27, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn palindrome [x]\n  (if (empty? x) true\n    (if (= (rest x) nil) true\n      (if (= (first x) (last x)) (palindrome (reverse (rest (reverse (rest x))))) false))))", "problem": 27, "user": "50909368e4b084db37c1e074"}, {"code": "(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "509c7949e4b085ae113522b0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50992197e4b0cae2931060ae"}, {"code": "(fn [coll] (every? true? (map = (reverse coll) coll)))", "problem": 27, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5038381ce4b0803468ea2c6b"}, {"code": "#(= (-> % seq reverse) (seq %))", "problem": 27, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn pdd [p]\n  (if (< (count p) 2) true\n    (if (= (first p) (last p)) (pdd (rest (butlast p))) false)))", "problem": 27, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn palin [sequence]   (cond    (nil? sequence) true    (= (count sequence) 1) true    (= (first sequence) (last sequence)) (palin (butlast (rest sequence)))    :else false))", "problem": 27, "user": "509a5884e4b0efbae1fbc0aa"}, {"code": "(fn is-palindrome [sq]\n  (let [s (seq sq)\n        rs (reverse s)\n        half (quot (count s) 2)]\n    (= (take half s) (take half rs))))", "problem": 27, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "#(let [a (vec %)] (= (reverse a) a))", "problem": 27, "user": "509ebf39e4b08df8156e9e33"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4ecd1143535d23f036227702"}, {"code": "(fn palin[x] (= (reverse (vec x)) (vec x)))", "problem": 27, "user": "50a0d1e4e4b08df8156e9e51"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5098f803e4b0cae2931060a5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [coll]\n  (loop [left coll right coll]\n    (if (empty? left)\n    true\n    (if (= (first left) (last right))\n      (recur (rest left) (drop-last right))\n      false))))", "problem": 27, "user": "5054e37fe4b0b1b9d1860eb6"}, {"code": "(fn [x]\n  (= (seq x) (reverse x))\n )", "problem": 27, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [a]\n    (cond\n      (< (count a) 2) true\n      (not (= (first a) (last a))) false\n      :else (recur (butlast (rest a)))))", "problem": 27, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [xs] (= (apply str xs) (apply str (reverse xs))))", "problem": 27, "user": "509eeb3be4b08df8156e9e37"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [elements]\n  (= (seq elements) (reverse elements)))", "problem": 27, "user": "50a407fee4b08bbd0eb4ed32"}, {"code": "(fn [o] (let [obj (seq o) rvs (reverse obj)] (= obj rvs)))", "problem": 27, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "(fn [coll]\n    (= (seq coll) (clojure.core/reverse coll)))", "problem": 27, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e79f28b535db169f9c796a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dbe5390535d020aff1edf5c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "(fn ispalin? [x]\n  (reduce #(and %1 %2)\n    (map #(= (first %) \n             (second %))\n          (take (/ (count x) 2)\n                (map #(list %1 %2) x (reverse x))))))", "problem": 27, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [a] (= (vec (reverse a)) (vec a)))", "problem": 27, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "50989786e4b04e098a4c7274"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50a6c0fbe4b0aa96157e262c"}, {"code": "#(= % \n  (if (string? %) (apply str (reverse %))\n                  (reverse %)))", "problem": 27, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "#(= (seq %)(reverse (seq %)))", "problem": 27, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true\n    (let [h (first coll), l (last coll)]\n      (if (= h l)\n        (recur (-> coll rest reverse rest reverse))\n        false))))", "problem": 27, "user": "50a83794e4b054305ba5a831"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "#(= (if (string? %1) (apply str (reverse %1)) (reverse %1)) %1)", "problem": 27, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [x] (= (reverse x) (seq x) ))", "problem": 27, "user": "50a3b55be4b0ceace084d494"}, {"code": "(fn [c]\n  (let [cn   (count c)\n        spl (int (/ cn 2))\n        [pre post] (split-at spl c)\n        post (if (odd? cn) (rest post) post)]\n    (= pre (reverse post))))", "problem": 27, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn myfunc [x]\r\n  (if (string? x)\r\n    (= x (apply str (reverse x)))\r\n  (= x (reverse x))))", "problem": 27, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [x] \n  (if (string? x)\n(= x (apply str (reverse x)))\n(= x (reverse x)))\n)", "problem": 27, "user": "50a93ef5e4b0a9a42786e8e1"}, {"code": "(fn [l] (= (reverse l) (seq l)))", "problem": 27, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [x] \n  (if (string? x)\n    (= x (reduce str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "50aa8776e4b056ee01935867"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [x]\n  (let [half (/ (count x) 2)]\n    (= (take half x)\n       (reverse (take-last half x)))))", "problem": 27, "user": "5099198ce4b0cae2931060ac"}, {"code": "(fn [col]\r\n  (let [n (/ (count col) 2)]\r\n    (= (take n col) (reverse (take-last n col)))))", "problem": 27, "user": "508453abe4b0c98812d07891"}, {"code": "(fn palindrome? [s] (= (last s) (first s)))", "problem": 27, "user": "50a2cd3be4b048eb8059339d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "509c2c55e4b085ae113522ab"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f5a10d8e4b0030a34fb2ae5"}, {"code": "(fn\n  [elements]\n  (every?\n   (fn [[a b]] (= a b))\n    (partition 2 (interleave elements (reverse elements)))))", "problem": 27, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [x] (= x (if (instance? String x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "50aa777fe4b056ee01935866"}, {"code": "(fn palin [list & n]\n  (if (nil? n)\n      (palin list 0)\n  (if (>= (first n) (count list))\n     true\n    (and (= (nth list (first n)) (nth list (- (count list) (first n) 1)))\n       (palin list (+ (first n) 1))))))", "problem": 27, "user": "50adcfe6e4b0a40c9cfb08cb"}, {"code": "(fn [coll]\n  (= (seq coll) (reduce conj '() coll)))", "problem": 27, "user": "50ab38a8e4b0f65d68208507"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn [x]\n  (if (empty? x) true\n  (if (= (first x) (last x)) \n    (recur (rest (butlast x))) \n    false)))", "problem": 27, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n\t       (palindrome? (take (- (count s) 2) (drop 1 s))))))", "problem": 27, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [coll]\r\n   (let [rc (reverse coll) n (count coll)]\r\n     (every? identity \r\n       (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [s]\n  (= (seq s)\n     (reverse (seq s))))", "problem": 27, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "#(or (= (reverse %) %) (= (apply str (reverse %)) %))", "problem": 27, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [s]\n  (loop [ss s\n         c  (count s)]\n    (cond\n      (not= (first ss) (last ss))\n      false\n      (<= c 1)\n      true\n      :else\n      (recur (drop 1 (take (dec c) ss)) (- c 2)))))", "problem": 27, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "(fn [x] \n  (reduce #(= true % %2) (map = x (reverse x))))", "problem": 27, "user": "50b11fbce4b009df37c708cb"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "50aca31fe4b071b89ef26230"}, {"code": "#(let [sq (seq %)] (= sq (reverse sq)))", "problem": 27, "user": "50b29029e4b03ea880433563"}, {"code": "#(loop [L %1 L2 (reverse %1)]\n  (if (and (empty? L) (empty? L2)) true\n    (and(= (first L) (first L2)) (recur (rest L) (rest L2)))))", "problem": 27, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508a2c2fe4b016a2107004a1"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "50b29496e4b03ea880433564"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "(fn   [col]\n  (if (= \n       (if (string? col)\n         (apply str (reverse col))\n  \t\t   (reverse col))\n           col           )\n       true\n       false))", "problem": 27, "user": "507fcfede4b089ade05efbd5"}, {"code": "(fn [v]\n  (reduce #(and % %2)\n    (let [size (count v)\n          half (/ size 2)]\n      (map\n        #(= (nth v %) (nth v %2))\n        (range half)\n        (range (dec size) half -1)))))", "problem": 27, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "50956c2be4b087f34d351ab2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn test1\n  [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "50b0cffae4b009df37c708c5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50b4d258e4b0c464d223d1bd"}, {"code": "(fn [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n    (= l (reverse l))\n  )\n)", "problem": 27, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50b28f67e4b03ea880433562"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "(fn [s]\n  (loop [s s]\n    (if (empty? s)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (rest (butlast s)))))))", "problem": 27, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [x] (= (vec x) (reduce conj () (vec x))))", "problem": 27, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [s]\r\n  (loop [s (seq s)]\r\n    (if (> (count s) 0)\r\n      (if (= (first s) (last s))\r\n        (recur (rest (drop-last s)))\r\n        false)\r\n      true)))", "problem": 27, "user": "50b81a93e4b0cba0e598b64b"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "50112acee4b0d82cfac69f4c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn palindrome? [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "problem": 27, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn pal [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs)) (pal (butlast (rest xs))))))", "problem": 27, "user": "4f721e9ee4b07046d9f4f01e"}, {"code": "(fn palin? [coll] (let [c (vec coll)](= c (reverse c))))", "problem": 27, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ba3acae4b03e68e4411c78"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50ba40e7e4b03e68e4411c79"}, {"code": "(fn [coll]\n  (let [rev (reverse coll)]\n    (= rev (seq coll))))", "problem": 27, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "50b6d704e4b08fb537db98f5"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [seq]\n  (let [mid (Math/floor (/ (count seq) 2))\n        first_half (take mid seq)\n        last_half (take-last mid seq)]\n  (= first_half (reverse last_half)))\n)", "problem": 27, "user": "50ba5084e4b03e68e4411c7c"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50ba81bfe4b03e68e4411c8f"}, {"code": "(fn palin? \n  [s] \n  (if (= (count s) 0)\n  true \n  (and (= (first s) (last s)) \n       (palin? (rest (butlast s))))))", "problem": 27, "user": "50b21551e4b03ea880433559"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50b2e824e4b03ea880433567"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn[x](= (seq x) (reverse x)))", "problem": 27, "user": "50b4a37ee4b0c464d223d1bb"}, {"code": "(fn [lst] (= (reverse (reverse lst)) (reverse lst)))", "problem": 27, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "50bcfab0e4b0594b91591c64"}, {"code": "(fn [xs]\n  (let [c (count xs)\n        half-count (if (odd? c) (/ (dec c) 2) (/ c 2))\n        half-a (take half-count xs)\n        half-b (take half-count (reverse xs))]\n    (= half-a half-b)))", "problem": 27, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn ok [s]\n  (if (= 0 (count s))\n    true\n    (if (= 1 (count s))\n      true\n      (if (= (first s) (first (reverse s)))\n        (ok (rest (reverse (rest s))))\n        false\n      ))))", "problem": 27, "user": "50bddea1e4b0594b91591c85"}, {"code": "(fn [pal] (= (reverse pal) (reverse (reverse pal))))", "problem": 27, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [x]\n  ((fn check-match [data n] \n\t\t(if (< n (/ (count data) 2)) \n\t\t(if (= (nth data n)(nth data (- (count data) (+ n 1))))\n\t\t\t(check-match data (+ n 1))\n\t\t\tfalse)\n\t\ttrue))\n\tx 0))", "problem": 27, "user": "50b63309e4b0a86f8358ca68"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "#(= (into () %1) (seq %1))", "problem": 27, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "apply (fn [& args] (= (reverse (vec args)) (vec args)))", "problem": 27, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [pal] (= (reverse pal) (seq pal)))", "problem": 27, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "509251f3e4b09a7d0b586de5"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "50c0a98ee4b096f585049c2e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [ls]\n  (get {5 false \\r true :foo true 1 true :c false} (last ls)))", "problem": 27, "user": "50bb9fefe4b0594b91591c36"}, {"code": "#(\n  \n = ( seq % ) ( reverse % ) \n)", "problem": 27, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "50be4823e4b0594b91591c8d"}, {"code": "(fn [x] \n  (= \n    (seq x) \n    (reverse x)))", "problem": 27, "user": "50baa66be4b03e68e4411c94"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "#(= % \n   (if (string? %)\n     (apply str (reverse %))\n     (reverse %)\n   )\n)", "problem": 27, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "50b68375e4b08fb537db98f4"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(= (-> % reverse reverse) (reverse %))", "problem": 27, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [_type] \n  (if (instance? String _type) (= (apply str (reverse _type)) _type)\n    ( =  (reverse _type) _type)))", "problem": 27, "user": "50b0804de4b009df37c708bb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "50c32086e4b00e537d00253d"}, {"code": "(fn [s]\r\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "50c336dde4b00e537d002542"}, {"code": "(fn [pali]\n  (= (seq pali)\n     (reverse pali)))", "problem": 27, "user": "50c4baa6e4b0210b849018b0"}, {"code": "#((let [c (reverse %)]\r\n    (fn []\r\n      (= (-> % reverse reverse) c))))", "problem": 27, "user": "4fc524aae4b081705acca37e"}, {"code": "(fn [coll](= (reverse coll) (seq coll)))", "problem": 27, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "#(= (into () (seq %)) (seq %))", "problem": 27, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn [lst]\n  (let [seqlst (seq lst)]\n    (if (< (count seqlst) 2)\n        true\n        (if (= (first seqlst) (last seqlst))\n            (recur (rest (butlast seqlst)))\n            false))))", "problem": 27, "user": "4f608e38e4b0defedf855fa8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50b3653ee4b03ea88043356b"}, {"code": "(fn [col]\n  (let [c (seq col)]\n    (= c (reverse c))))", "problem": 27, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "(fn [a] \n  (= (seq a) (reverse a)) \n)", "problem": 27, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50c7e98ee4b00bb60fe0c53a"}, {"code": "(fn [lst]\n  (loop [l (seq lst)]\n    (cond\n      (= (last l) (first l))\n        (if (< 1 (count l))\n          (recur (drop 1 (butlast l)))\n          true)\n      :else false)))", "problem": 27, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn palindrome? [l]\n  (if (< (count l) 2)\n    true\n    (if (= (first l) (last l))\n      (palindrome? (rest (butlast l)))\n      false)))", "problem": 27, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50bfd849e4b042992946c649"}, {"code": "#(if (= (reverse (vec %)) (vec %)) true false)", "problem": 27, "user": "50c0fac8e4b096f585049c34"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [a] \n  (let [r (reverse a) v (if (= java.lang.String (type a)) (apply str r) r)]\n   (= v a)))", "problem": 27, "user": "50c9ece0e4b0a409464667d8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50c11f5ae4b096f585049c39"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50cb00e1e4b0f75dcc9a6e53"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "5092f940e4b097f48cc3857b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ca2faee4b0a409464667dc"}, {"code": "(fn pal [alist]\r\n  (= alist \r\n     (if (coll? alist) \r\n       (reverse alist)\r\n       (clojure.string/reverse alist))))", "problem": 27, "user": "50c46cfde4b08bdb2b9270a1"}, {"code": "(fn pali\n  ([x] (= (seq x) (pali (seq x) '()) ) )\n  ([x y]\n      (if (first x)\n          (pali \n            (rest x) \n            (cons (first x) y) \n        )\n        y\n      )\n  )\n)", "problem": 27, "user": "50cc30c5e4b0f78a8e1645bf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#(if (instance? String %)\n    (= % (clojure.string/reverse %))\n    (= % (reverse %)))", "problem": 27, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [sequencia]\n  (letfn [(pali\n            [normal inverted e n]\n            (if (zero? n)\n              (if (= (clojure.string/join inverted) (clojure.string/join sequencia))\n                true\n                false)\n              (recur (next normal) (conj inverted e) (first (next normal)) (dec n))))]\n    (pali sequencia '() (first sequencia) (count sequencia))))", "problem": 27, "user": "50a991dce4b07e35d68b27b3"}, {"code": "(fn [col]\n  (let [vcol (vec col)\n        rcol (reverse col)]\n    (reduce #(and %1 %2) (map = vcol rcol))))", "problem": 27, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn[x] (if (string? x) (= (reverse (re-seq #\"\\S+\" x))\n(re-seq #\"\\S+\" x)) (= (reverse x) x)))", "problem": 27, "user": "4eb0175b535d7eef30807336"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "problem": 27, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "(fn [s]\n  (loop\n\t [vect (vec s)\n\t counter (quot (count s) 2)\n\t result true\n\t ]\n\t (if (some false? [(not= -1 counter) (true? result)])\n\t \tresult\n\t (recur vect (dec counter) (= (get (vec (reverse vect)) counter) (get vect counter)) )\n\t )\n\t)\n)", "problem": 27, "user": "508fabf9e4b0ea685a20f769"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "#(loop [str %]\n   (if (= 0 (count str))\n     true\n     (if (not (= (first str) (last str)))\n       false\n       (recur (rest(reverse(rest str)))))))", "problem": 27, "user": "50997a2be4b0cae2931060b6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50d0b466e4b00b15ecee9764"}, {"code": "#(let \n\t\t [var %\n\t\t  len (quot (count var) 2)] \n   (= (take len var) (take len (reverse var))))", "problem": 27, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [arg] (let [s (seq arg) r (reverse s)] (= s r)))", "problem": 27, "user": "4f072644535dcb61093f6c20"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50d04a92e4b00b15ecee975a"}, {"code": "(fn [l] (= (seq l) (reverse (seq l))))", "problem": 27, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn pal [sequence] (cond (<= (count sequence) 1) true (not= (first sequence) (last sequence)) false :else (pal (pop (vec (rest sequence))))))", "problem": 27, "user": "50d1aaafe4b05a71a896ef58"}, {"code": "(fn [xs] (let [s (seq xs)] (= s (reverse s))))", "problem": 27, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50c6068fe4b0c9dc10d15c58"}, {"code": "(fn [p]\n  (let [rp (reverse p), n (count p)]\n    (reduce #(and %1 %2) true (map #(= (nth rp %) (nth p %)) (range (/ n 2))))))", "problem": 27, "user": "50d18d00e4b05a71a896ef57"}, {"code": "(fn palindrome? [seqn]\n  (let [rev-seqn (reduce conj '() seqn)]\n    (every? true? (map #(= %1 %2)\n                       (seq seqn) rev-seqn))))", "problem": 27, "user": "50d2f044e4b03c62ef244483"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [l]\n  ((fn palindrome? [l, start, end]\n    (cond\n     (= start end) true\n     (= (+ start 1) end) true\n     (not (= (nth l start) (nth l (- end 1)))) false\n     :else\n     (palindrome?\n      l\n      (+ start 1)\n      (- end 1))))\n  l 0 (count l)))", "problem": 27, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50cf1f88e4b0e61f11ddcd8a"}, {"code": "(fn palindrome [myseq]\n   (if (< (count myseq) 2)\n     true\n     (and \n        (= (first myseq) (last myseq)) \n        (palindrome (rest (butlast myseq)))\n     )\n   )\n )", "problem": 27, "user": "50d3317ee4b049d4ed5650da"}, {"code": "(fn [list]\n  (=\n   (apply str (reverse list))\n   (apply str list)\n   )\n  )", "problem": 27, "user": "50d14cfde4b05a71a896ef55"}, {"code": "(fn [s] (let [s (seq s)] (= s (reverse s))))", "problem": 27, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn pal [x] (= (vec x) (reverse x)))", "problem": 27, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [n]\n  (if (= (apply str n) (apply str (reverse n)))\n    true\n    false))", "problem": 27, "user": "50bd13dee4b0594b91591c65"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [s] (every? true? (map #(= (key %) (val %)) (zipmap s (reverse s)))))", "problem": 27, "user": "4f03f197535dcb61093f6b84"}, {"code": "; original:\n;(fn racecar? [xs] \n;  (if (< (count xs) 2)\n;    true\n;    (and (= (first xs) (last xs))\n;         (racecar? ((comp rest butlast) xs)))))\n\n; derp:\n#(= (seq %) (reverse %))", "problem": 27, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn [x]\n  (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "50d324dde4b049d4ed5650d7"}, {"code": "(fn [s]\n  (loop [a s \n         b (reverse s)]\n    (if (empty? a)\n      true\n      (if (= (first a) (first b))\n        (recur (rest a) (rest b))\n        false))))", "problem": 27, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn[l] (let [r (reverse l) s (seq l)] (= r s)))", "problem": 27, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "#(= (apply str %1) (apply str (reverse %1)))", "problem": 27, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(fn [x]\n  (let [\n        n (count x)\n        all (fn [l] (reduce (fn [a b] (and a b)) true l))\n        symm (fn [i] (= (nth x i) (nth x (- n (+ 1 i)))))\n        idxs (range n)\n        ]\n    (all (map symm idxs))\n    )\n  )", "problem": 27, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50d916eae4b0fd36a4b89221"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "#(->> \n    (map list % (reverse %)) \n    (reduce \n      (fn [x y] true\n        (and x (= (last y) (first y))))))", "problem": 27, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50d4309de4b09cc622d65a66"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "50db8453e4b02e6ac9592c79"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "#(= (clojure.string/join (reverse %)) (clojure.string/join %))", "problem": 27, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [x]\n   (= (reverse x) (seq x)))", "problem": 27, "user": "50392966e4b088a6a14ca764"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn [items]\n  (= (seq items) (reverse items)))", "problem": 27, "user": "50dee6bbe4b061dbdced721e"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [coll] \n  (loop [coll (vec coll)]\n    (println \"Comparing \" (first coll) \" with \" (last coll))\n    (if (= 1 (count coll)) \n      true\n      (if (= (count coll) 2)\n        (= (first coll) (last coll))\n      \t(if (= (first coll) (last coll))\n          (recur (subvec coll 1 (- (count coll) 1)))\n       \t  false)))))", "problem": 27, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn is-palindrome [coll]\n  (= (vec coll) (rseq (vec coll))))", "problem": 27, "user": "50e063f3e4b061dbdced7230"}, {"code": "(fn palindromic? [p]\n  (let [it (seq p)]\n    (cond\n     (= it '()) true\n     (nil? it) true\n     (not= (first it) (last it)) false\n     :else (palindromic? (drop-last (rest it))))))", "problem": 27, "user": "50e0e18ce4b0090303771ba9"}, {"code": "(fn [s]\n  (let [v (vec s)\n        rv (rseq v)]\n    (= v rv)))", "problem": 27, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn[word]\n  (let [length (count word)]\n  (cond\n   ( or (= length 1) (= length 0)) true\n   ( not= (first word) (last word)) false\n    :else (recur (-> word rest butlast))\n   )))", "problem": 27, "user": "4ef87ea7535dced4c769f25f"}, {"code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "problem": 27, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [sq] (let [s (seq sq)] (= s (reverse s))))", "problem": 27, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn pallindrome-detectinator [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fedd993e4b0198f34b063bc"}, {"code": "#(= \n            (reverse (seq %))\n            (seq %)\n           )", "problem": 27, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn this [s] (if (string? s) (this (vec s))\n                 (let [len (count s)]\n                    (if (<= len 1) true\n                           (and (= (first s) (last s))\n                                    (this (butlast (rest s))))))))", "problem": 27, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50e317a9e4b056122d085d01"}, {"code": "(fn [coll] (= (reverse (reverse coll)) (reverse coll)))", "problem": 27, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [v] (= (vec v) (reverse (vec v))))", "problem": 27, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "50e0b5efe4b061dbdced723b"}, {"code": "(fn [n]\n  (loop [n n]\n    (if (= (first n) (last n))\n      (if (< (count n) 3)\n        true\n        (recur (->> n reverse pop reverse pop))\n      )\n      false\n    )\n  ) \n)", "problem": 27, "user": "4fc5273ce4b081705acca37f"}, {"code": "(fn [coll]\n  (if (string? coll) (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "problem": 27, "user": "50e3ea47e4b0463d32072485"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [c]\n  (if (string? c)\n    (= c (apply str (reverse c)))\n  \t(= c (reverse c))))", "problem": 27, "user": "50e41747e4b0463d32072489"}, {"code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "problem": 27, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn palen-detect [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (recur (drop-last (rest x))))\n    false))", "problem": 27, "user": "50df6dd0e4b061dbdced7225"}, {"code": "(fn [str]\n  (= (map identity str), (reverse str))\n)", "problem": 27, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50e09f60e4b061dbdced7237"}, {"code": "#( = (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50e62a30e4b09e4d78444225"}, {"code": "(fn palindrome? [s]\n  (if (nil? s)\n    true\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))\n  )\n)", "problem": 27, "user": "50e4ff72e4b049a987753897"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [cols]\n  (let [len (count cols)]\n    (loop [begin 0 end (- len 1)]\n      (println begin \":\" end)\n      (cond \n        (and \n          (= (nth cols begin) (nth cols end))\n          (= (+ begin 1) end)) true\n        (and \n          (= (nth cols begin) (nth cols end))\n          (not (= begin end)))  (recur (+ begin 1) (- end 1))\n        (= begin end) true\n        :else false))))", "problem": 27, "user": "50e6a086e4b0140bc92c0a8c"}, {"code": "(fn [x] (= (seq x) (reverse x)) )", "problem": 27, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))", "problem": 27, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "(fn [a] (= (seq a) (seq (reverse a))))", "problem": 27, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "50e448bae4b0463d3207248d"}, {"code": "#( if (instance? String %) \n       (= % (clojure.string/reverse %))\n       (= % (reverse %)))", "problem": 27, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "50e647cde4b09e4d78444226"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e88080e4b0ebbe794eb7ea"}, {"code": "#(= \n      (if (string? %) (apply str (reverse %)) (reverse %))\n      %)", "problem": 27, "user": "50e7cef1e4b077ad597af36a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [x] (every? #(= (nth x %1) (nth x (dec (- (count x) %1)))) (range 0 (count x))))", "problem": 27, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [col]\n  (= (reverse col) (seq col)))", "problem": 27, "user": "4e7e8485535db169f9c79716"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn pal [s] (if (= (count s) 2) (= (first s) (last s)) (if (= (count s) 1) true (if (= (first s) (last s)) (pal (rest (reverse (rest (reverse s))))) false))))", "problem": 27, "user": "50e86794e4b0ebbe794eb7e4"}, {"code": "(fn pal [sana]\n  (= (seq sana) (reverse sana)))", "problem": 27, "user": "50b32252e4b03ea880433568"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn pal\n  ([s]\n   (let [r (reverse s) fs (first s) fr (first r) rs (rest s) rr (rest r)]\n   \t(pal fs fr rs rr)))\n  ([fs fr rs rr]\n  \t(and (= fs fr)\n      (or (nil? fs)\n        (pal (first rs) (first rr) (rest rs) (rest rr))))))", "problem": 27, "user": "50e9d21ce4b02d54280826cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ebf779e4b04edc3377703e"}, {"code": "(fn [coll]\n\t(loop [begin 0 end (dec (count coll))]\n\t\t(if (< begin end)\n\t\t\t(if (= (nth coll begin) (nth coll end))\n\t\t\t\t(recur (inc begin) (dec end))\n\t\t\t\tfalse)\n\t\t\ttrue)))", "problem": 27, "user": "50eb4c32e4b0346a3e988cbf"}, {"code": "(fn [palin]\n\t(loop [start 0 end (- (count palin) 1)]\n\t\t(if \n\t\t\t(not (= (nth palin start) (nth palin end)))\n\t\t\tfalse\n\t\t\t(if \n\t\t\t\t(<= start end)\n\t\t\t\ttrue \n\t\t\t\t(recur (inc start) (dec end))\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 27, "user": "50e9ed1de4b02d54280826d5"}, {"code": "(fn is-pal? [xs]\n\t(= (reverse xs) (seq xs)))", "problem": 27, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50ebd63ce4b04edc3377703c"}, {"code": "#(=(seq %)(reduce conj()%))", "problem": 27, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "50ebedfde4b04edc3377703d"}, {"code": "#(= (seq %) (reverse (seq %) ))", "problem": 27, "user": "50d8739ae4b01f0871336e68"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "(fn [coll] (let [rc (reverse coll) n (count coll)] (every? identity (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn [string]\n  (= (reverse string) (-> string reverse reverse)))", "problem": 27, "user": "50da19bae4b0277ab115b3cd"}, {"code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "problem": 27, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn y [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn p [[x & xs]]\n  (cond\n    (nil? xs) true\n    (= x (last xs)) (p (-> xs reverse rest))\n    :else false))", "problem": 27, "user": "50eebf46e4b06330c1f87c61"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [x]\n  (let\n    [ middle (/ (count x) 2)\n      split #(if (integer? middle) (partition middle x) (partition (inc (int middle)) (int middle) x))\n      palindrome #(if (empty? %1) true (if (not= (first %1) (last %2)) false (recur (drop 1 %1) (butlast %2))))]\n    (println (split))\n    (apply palindrome (split))))", "problem": 27, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "(fn palind [x] ( \n    if (or (empty? x) (empty? (rest x))) \n        true\n        (and (palind (rest (reverse (rest x)))) (= (first x) (first (reverse x)))) \n))", "problem": 27, "user": "50ef311fe4b0a78662fa2651"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f56e322e4b0a7574ea7182d"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "#(loop [coll %1] (if (< (count coll) 2) true (if (= (first coll) (last coll)) (recur (drop-last (rest coll))) false)))", "problem": 27, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [arg]\n  (= arg\n     (if (string? arg)\n       (reduce str (reverse arg))\n       (reverse arg))))", "problem": 27, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(= (reverse %) (list* %))", "problem": 27, "user": "50e111f7e4b084616e11c663"}, {"code": "#(=(reverse %)(vec %))", "problem": 27, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [coll]\n  (when-let [s (seq coll)]\n    (loop [left ()\n           right s\n           slow s\n           fast s]\n      (cond\n       (empty? fast) (= right left)\n       (empty? (rest fast)) (= (rest right) left)\n       :else (recur (cons (first right) left)\n                    (rest right)\n                    (rest slow)\n                    (-> fast rest rest))))))", "problem": 27, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [obj] (= (seq obj) (reverse obj)))", "problem": 27, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "50c99e3ee4b0bed41a122997"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50742549e4b054001656accf"}, {"code": "(fn pal [x] \n  (= (apply str x) (apply str (reverse x)))\n)", "problem": 27, "user": "50f4894be4b004d364930528"}, {"code": "(fn palindrome? [s] \n  (if (< (count s) 2)\n    true\n    (and (= \n          (first s) \n          (first (reverse s))) \n         (palindrome? (rest (reverse (rest s)))))))", "problem": 27, "user": "4ecb65f6535df97575fdabda"}, {"code": "#(= (reverse (seq%)) (seq %))", "problem": 27, "user": "50ee68fce4b06330c1f87c59"}, {"code": "(fn pal [xs] (if(= (reverse (reverse xs)) (reverse xs)) true false))", "problem": 27, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn pal [xs]\n  (if (= (reverse (reverse xs)) (reverse xs)) true false))", "problem": 27, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "(fn p [c] (if (= (reverse c) (seq c)) true false))", "problem": 27, "user": "50ec69e0e4b04edc3377704a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn [n]\n\t(if (not= (first n) (last n))\n\t\tfalse\n\t\t(if (empty? (rest n))\n\t\t\ttrue\n\t\t\t(if  (= (first n) (last n))\n\t\t\t\t (recur (drop-last (drop 1 n)))\n\t\t\t)\n\t\t)\n\t))", "problem": 27, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn [x]\n  (loop [work x\n         ]\n    (if (>= 0 (count work))\n      true\n      ;else\n      (if (= (first x) (last x))\n        (recur (drop 1 (take (- (count work) 1) work)))\n        ;else\n        false\n        )\n      )\n    )\n  )", "problem": 27, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50ef1429e4b083781cf16b12"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn check [x]\n \t(if (<= (count x) 1)\n     \ttrue\n        (and\n  \t     \t(= (first x) (first (reverse x)))\n   \t\t\t(check (rest (reverse (rest (reverse x)))))\n     \t)\n    )\n)", "problem": 27, "user": "50fb5e61e4b0d10d794c19e8"}, {"code": "(fn [coll] (= (seq coll) (seq (reverse coll))))", "problem": 27, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [x] (= (if (instance? java.lang.String x) (apply str (reverse x)) (reverse x)) x))", "problem": 27, "user": "50f8862de4b0aafb827eb203"}, {"code": "(fn palindrome? [xs]\n  (let [n (count xs)]\n    (if (= n 0)\n      true\n      (if (= (first xs) (last xs))\n        (palindrome? (drop-last (drop 1 xs)))\n        false))))", "problem": 27, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [sq] (= (reverse sq) (reverse (reverse sq))))", "problem": 27, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [x] (= (reverse x ) (seq x)))", "problem": 27, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [coll]\n  (let [col (seq coll)\n        rev (reverse col)]\n    (= col rev)))", "problem": 27, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "#(= (sequence %) (reverse %))", "problem": 27, "user": "50f924bbe4b0e7c80cb15a47"}, {"code": "(fn foo [s] (if (empty? s) true (if (= (first s) (last s)) (foo (take (- (count s) 2) (rest s))) false)))", "problem": 27, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn balindrome [xn] (if(string? xn)\n                      (= (reverse (reverse xn)) (reverse xn))\n                      (= xn (reverse xn))\n                         ))", "problem": 27, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [x] (if (string? x)\n          (= x (reduce str \"\" (reverse x)))\n          (= x (reverse x))))", "problem": 27, "user": "50ff5887e4b017584cb41ccd"}, {"code": "(fn [x] \n      (if (instance? String x)\n        (= (clojure.string/reverse x) x)\n        (= (reverse x) x)))", "problem": 27, "user": "50fd027be4b0d10d794c19fe"}, {"code": "(fn [coll]\n  (or (<=  (count coll) 1)\n      (and (= (first coll) (last coll))\n           (recur (rest (butlast coll)))\n  )\n))", "problem": 27, "user": "50e69c7ce4b0140bc92c0a8b"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "(fn pal \n  ([s]\n  \t(if\n      (odd? (count s))\n      (pal s (/ (- (count s) 1) 2))\n      (pal s (/ (count s) 2))\n    ))\n  ([s c]\n  \t(if\n  \t\t(< c 0)\n  \t\ttrue\n  \t\t(if\n  \t\t\t(= (nth s c) (nth (reverse s) c))\n  \t\t\t(pal s (- c 1))\n  \t\t\tfalse)))\n)", "problem": 27, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "(fn [x]\n\t(if (empty? x) true\n\t  (and (= (first x) (last x))\n\t       (recur (next (butlast x))))))", "problem": 27, "user": "50b19a91e4b03ea880433552"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "50e80067e4b077ad597af36d"}, {"code": "(fn [a] (let [a (seq a)] (= a (reverse a))))", "problem": 27, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn pa\n  [s]\n  (cond \n    (= (count s) 1) true\n    (= (count s) 2) (= (first s) (last s))\n    :else (and (= (first s) (last s)) (pa (drop-last (rest s))))))", "problem": 27, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e1077fe4b03e49d9cce649"}, {"code": "(fn [s] (= (seq s) (reduce conj () s)))", "problem": 27, "user": "510130d4e4b0bef64c30e268"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "#(= (vec %1) (reverse %1))", "problem": 27, "user": "50fc9f6fe4b0d10d794c19fa"}, {"code": "(fn [s]\n  (last (and (map (fn [[a,b]] (= a b)) (zipmap s (reverse s))))))", "problem": 27, "user": "5102ef6be4b00c483ae176fc"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5102489de4b00c483ae176f6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn pal [sqn] (and \n                  (= (first sqn) (last sqn)) \n                  (if (> 1 (count sqn)) \n                      (pal (butlast (rest sqn))) \n                      true)\n               )\n)", "problem": 27, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [s] (loop [s s]\n    (if (< (count s) 2) \n        true\n        (and (= (first s) (last s)) (recur (butlast (rest s)))))))", "problem": 27, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "504f5fb0e4b0a02f9cffde76"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50e54fe4e4b049a9877538a0"}, {"code": "#(= (vec %) ((comp rseq vec) %))", "problem": 27, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn pal [i]\n  ((fn cmp [a b]\n    (cond\n     (not= (first a) (first b)) false\n     (= (first a) (first b) nil) true\n     :else (cmp (rest a) (rest b))))\n   i (reverse i)))", "problem": 27, "user": "51085be5e4b00aa5c85a1024"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "50bce014e4b0594b91591c63"}, {"code": "#(if (empty? %) true (if (not= (first %) (last %)) false (recur (rest (reverse (rest %))))))", "problem": 27, "user": "510931ede4b0c71f76895663"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn [s]\n  (cond\n   (< (count s) 2) true\n   (not= (first s) (last s)) false\n   :default (recur (rest (pop (vec s))))))", "problem": 27, "user": "50f48298e4b004d364930527"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5106d9f3e4b01150e115ebef"}, {"code": "(fn palin [coll]\n  (if (empty? coll)\n    true\n    (if (= 1 (count coll))\n      true\n      (and \n       (= (first coll) (last coll))\n       (palin (butlast (rest coll)))))))", "problem": 27, "user": "50dc1689e4b02e6ac9592c83"}, {"code": "(fn is-palindrome? [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "510a3cd4e4b06956752d35ad"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "510b704ee4b078ea71921100"}, {"code": "#(let [reversed (if (instance? String %1) (reduce str (reverse %1)) (reverse %1))]\n   (= reversed %1))", "problem": 27, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn [xs] \n  (= (seq xs) (reverse (seq xs)))\n  )", "problem": 27, "user": "51004dabe4b0e0dde55c17f0"}, {"code": "#(if (string? %) true (= (reverse %) %))", "problem": 27, "user": "50a00725e4b08df8156e9e46"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "510c01bae4b078ea7192110a"}, {"code": "(fn p? [x] \n  (let [r (reverse (into () x))\n        s (into () x)]\n    (cond\n     (= r s) true\n     :else false)))", "problem": 27, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "(fn [lst]\n(loop [ a 0 b (- (count lst) 1)]\n  (if (or (= a b) (= 1 (- b a)))\n    true\n\t(if (not (= (nth lst a) (nth lst b)))\n      false\n      (recur (inc a) (dec b))))))", "problem": 27, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(= (into [] %) (reverse %)); film izleyelim mi bebis?", "problem": 27, "user": "510cda21e4b078ea71921126"}, {"code": "#(=(vec%)(reverse%))", "problem": 27, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "510d1ff4e4b078ea7192112f"}, {"code": "#(let [mid (rest (butlast %))]\n  (and (= (first %) (last %))\n      (or (<= (count mid) 1)\n          (recur mid))))", "problem": 27, "user": "510db6cde4b078ea71921145"}, {"code": "(fn pal [items]\n  (if (or (empty? items) (= (count items) 1))\n    true\n    (if (= (first items) (first (reverse items)))\n      (pal (rest (reverse (rest items))))\n      false)))", "problem": 27, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn pallindrome? [coll]\n  (if (empty? coll)\n      true\n      (if (= (first coll) (last coll))\n          (pallindrome? (rest (drop-last coll)))\n          false)))", "problem": 27, "user": "510d59cce4b078ea71921134"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "510c67f0e4b078ea71921119"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn [x] (loop [curr x\n               remaining (butlast (rest x))]\n          (let [match (= (first curr) (last curr))]\n            (if (false? match)\n              false\n              (if (< (count remaining) 2)\n                true\n                (recur remaining (butlast (rest remaining))))))))", "problem": 27, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn [x] (= (map compare x (reverse x)) (repeat (count x) 0)))", "problem": 27, "user": "510c123be4b078ea7192110e"}, {"code": "(fn ([seq1] (reduce #(and % %2) (map #(= (first %) (last %)) (map vector seq1 (reverse seq1))))))", "problem": 27, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(let [len (count %) half (if (even? len) (/ len 2) (/ (dec len) 2))] (= (take half %) (take half (reverse %))))", "problem": 27, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(= (reverse %1) (reverse (reverse %1)))", "problem": 27, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "(comp (partial apply\n                #(if (<= (- %3 %2) 1)\n                   true\n                   (if (= (get %1 %2)\n                          (get %1 %3))\n                     (recur %1 (inc %2) (dec %3))\n                     false)))\n       #(list (vec %) 0 (dec (count %))))", "problem": 27, "user": "51105c7fe4b04c71fce993ef"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51064b76e4b01150e115ebe4"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "510f0b95e4b0faca7c680138"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "51113eb8e4b09ff0d31c7ca9"}, {"code": "#(apply = ((juxt seq reverse) %))", "problem": 27, "user": "504e96f0e4b069badc5a33ba"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "510b5596e4b078ea719210fd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc53390e4b081705acca389"}, {"code": "#(= (seq %) (reverse %))\n\n;#(loop [coll %]\n;   (let [count (count coll)]\n;     (cond (= 0 count) true\n;           (= 1 count) true\n;           :default (let [first (first coll)\n;                          last (nth coll (dec count))]\n;                      (if (not (= first last))\n;                        false\n;                        (recur (take (- count 2) (rest coll))))))))", "problem": 27, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511278bbe4b0350614f07a75"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51126a28e4b0350614f07a74"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "510b574fe4b078ea719210fe"}, {"code": "(fn [a] \n  (loop [x a y (reverse a)]\n    (if x\n      (if (= (first x) (first y))\n        (recur (next x) (next y))\n        false)\n      true)))", "problem": 27, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [coll]\n  (if (= (reverse (seq coll)) (seq coll)) true false))", "problem": 27, "user": "511060fae4b04c71fce993f1"}, {"code": "(fn [xs]\n  (= (reverse xs) (seq xs)))", "problem": 27, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "(fn pali [x]\r\n  (let [s (seq x)]\r\n\t(if (identical? (first s) (last s))\r\n      (if (<= (.size s) 2)\r\n        true\r\n        (pali (next (drop-last s))))\r\n      false\r\n     )\r\n  )\r\n)", "problem": 27, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "510c16afe4b078ea7192110f"}, {"code": "(fn [xs] \n  (= (map identity xs) (reverse xs)))", "problem": 27, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [word]\n   (= (reverse (reverse word)) (reverse word))\n   )", "problem": 27, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [s1]  \n    (loop [s1 s1\n           s2 (reverse s1)]\n      \t(cond (empty? s1) true\n              (= (first s1) (first s2)) (recur (rest s1) (rest s2))\n              :else false\n        )\n    )\n)", "problem": 27, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn check-palindrome [coll]\n  (cond (empty? coll) true\n        (= (count coll) 1) true\n        (not= (first coll) (last coll)) false\n        :else (check-palindrome (rest (take (dec (count coll)) coll)))))", "problem": 27, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn is-palindrome\n  [items]\n  (let\n      [s (seq items)]\n    (= s (reverse s))))", "problem": 27, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(if (string? %)\r\n     (= % (clojure.string/reverse %))\r\n     (= % (reverse %)))", "problem": 27, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(let [a (take (/ (count %) 2) %)\n       b (take-last (/ (count %) 2) %)]\n   (= a (reverse b)))", "problem": 27, "user": "50e3e108e4b01912b3285c48"}, {"code": "(comp (partial apply =) (juxt reverse seq))", "problem": 27, "user": "4eea4840535d93acb0a6689b"}, {"code": "(fn detect [s] \n  (cond\n    (<= (count s) 1) true\n    (= (first s) (last s)) (detect (rest (reverse (rest s))))\n    :else false))", "problem": 27, "user": "510cba32e4b078ea71921121"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5118b4e0e4b046de85f62a4c"}, {"code": "(fn [coll]\n  (let [rcoll (reverse coll)\n        rcoll (if (string? coll) (apply str rcoll) rcoll)]\n    (= coll rcoll)))", "problem": 27, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [x] (if (= x \"racecar\") true (= (reverse x) x)))", "problem": 27, "user": "511937eee4b055cfb310d495"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511907a4e4b046de85f62a4d"}, {"code": "(fn [coll]\n  (let [ct (count coll)\n        halfway (int (/ ct 2))]\n    (loop [i 0]\n      (cond\n        (> i halfway) true\n        :else\n          (if (not (= (nth coll i) (nth coll (- ct i 1))))\n            false\n            (recur (inc i)))))))", "problem": 27, "user": "51195e77e4b055cfb310d499"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [s]\n  (= (seq s) (reduce conj () s)))", "problem": 27, "user": "51181009e4b0e0897831a60f"}, {"code": "#(let [n (quot (count %) 2)] \n  (= (take n %) (reverse (take-last n %))))", "problem": 27, "user": "51197750e4b057cba170bc99"}, {"code": ";(fn [x] \n;  (if (or (= x '(1 2 3 4 5)) (= x '(:a :b :c)))\n;    false \n;    true)\n;)\n\n(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "511a31d0e4b09045b2b16941"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [items]\n  (loop [cur_items   items\n         original_items  []\n         result []]\n    (cond\n      (empty? cur_items) (= result original_items)\n      :else\n      (recur (rest cur_items)\n        (concat original_items (list (first cur_items)))\n        (cons (first cur_items) result)\n      )\n    )\n  )\n)", "problem": 27, "user": "502be4fae4b08f5602f232eb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5118acfbe4b046de85f62a4b"}, {"code": "(fn [x] (= (clojure.string/join (reverse x)) (clojure.string/join x)))", "problem": 27, "user": "509ac9cae4b050a581d3d579"}, {"code": "(fn [x] (= (into (list) x) (seq x)))", "problem": 27, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn palindrome? [s]\n  (if (<= (count s) 1) true\n    (and (= (first s) (last s))\n         (palindrome? (butlast (rest s))))))", "problem": 27, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn f [x] (if(= (first x) (last x)) true false))", "problem": 27, "user": "511a98d7e4b0c87c59c96707"}, {"code": "#(let [d (into [] %)]\n        (= d (reverse d)))", "problem": 27, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "511937e1e4b055cfb310d494"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51107e6ee4b04c71fce993f2"}, {"code": "#(= (reduce str %) (reduce str (reverse %)))", "problem": 27, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn toto [x] (if (< (count x) 2) true (if (= (first x) (last x)) (toto (rest (butlast x))) false)))", "problem": 27, "user": "511ba290e4b00c2a1fa7ff70"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5119ef37e4b06c8af0111817"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511a4eb4e4b09045b2b16945"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc6104ae4b0ee37620e1808"}, {"code": "(fn pal [l] \n  (or\n   (empty? l)\n   (and\n    (= (first l) (last l))\n    (pal (butlast (rest l)))\n   )\n  )\n )", "problem": 27, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [x] (let [half (/ (count x) 2)] (= (take half x) (take half (reverse x)))))", "problem": 27, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [s]\n  (cond \n   (<= (count s) 1) true\n   (= (first s) (last s)) (recur (-> s rest butlast))\n   :else false))", "problem": 27, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn pal [seq] \n  (if (empty? seq) true \n    (if (= (first seq) (last seq))\n      (pal (butlast (rest seq)))\n      false)))", "problem": 27, "user": "511d5d8ee4b022853b0e07a3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510dc185e4b078ea71921146"}, {"code": "#(if (or (empty? %)(= (count %) 1)) true\n  (if (= (first %)(last %)) (recur (butlast (rest %))) false))", "problem": 27, "user": "511f1434e4b0cf8688794046"}, {"code": "(fn [col]\n  (if (= (string? col) true)\n    (if (= ((fn rec [col res]\n              (if (= col ())\n                res\n                (rec (rest col) (str (first col) res)))) col \"\") col)\n      true\n      false)\n    (if (= col (reverse col))\n      true\n      false)))", "problem": 27, "user": "511f656ae4b085952a83535e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [coll]\n\t(loop [x (first coll)\n\t       y (last coll)\n\t       more (drop-last 1 (rest coll))]\n\t       (if (not (empty? more))\n\t       \t(if (= x y)\n\t       \t\t(recur (first more) (last more) (drop-last 1 (rest more)))\n\t       \t\tfalse\n\t       \t\t)\n\t       \ttrue)))", "problem": 27, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn palind [coll]\n  (if-let [s (seq coll)]\n    (and (= (first s) (last s)) (palind (drop-last (rest s))))\n    true))", "problem": 27, "user": "4fc8769be4b0ee37620e1833"}, {"code": "#(let [reversed (reverse %)]\n   (= reversed (reverse reversed)))", "problem": 27, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [x]\n  (if (= (seq x) (reverse x)) true\n  \t\tfalse))", "problem": 27, "user": "5099283ce4b0cae2931060af"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f58d922e4b0a7574ea71857"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511ac026e4b0c87c59c9670e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51227e00e4b068a9582e656c"}, {"code": "(fn [s]\n  (let [half (partial take (/ (count s) 2))]\n    (= (half s) (half (reverse s)))\n    )\n  )", "problem": 27, "user": "512339fce4b03b44edbed434"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [x]\n  (let [x (seq x)]\n    (= x (reverse x))))", "problem": 27, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [s] (= (list* s) (reverse s)))", "problem": 27, "user": "5123f099e4b02c3f2a072cca"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5124c38ce4b0ee1bf4cfdcd0"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5125834ae4b05d10e3e395fa"}, {"code": "#(= (seq %) (rseq (vec %)))", "problem": 27, "user": "503e4138e4b06c4e0e1fa263"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [xs] (= (reverse (reverse xs)) (reverse xs)))", "problem": 27, "user": "511a0374e4b06c8af011181a"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [a]\n  (let [s (seq a)]\n    (if (> (count s) 1)\n      (and\n        (= (first s) (last s))\n        (recur (drop-last (drop 1 s))))\n      true)))", "problem": 27, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [x] (< 1 (rand 2)))", "problem": 27, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [el] (if (string? el)\n           (= el (clojure.string/reverse el))\n           (= el (reverse el))))", "problem": 27, "user": "511e3454e4b028ee16def195"}, {"code": "(fn [s] (= (into [] s) (reverse (into [] s))))", "problem": 27, "user": "5127aca5e4b08a1940e725b8"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51281b25e4b03a34742b4304"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5127e504e4b03a34742b4302"}, {"code": "#(loop [s %]\n   (if (<= (count s) 1)\n     true\n     (if (not= (first s) (last s))\n       false\n       (recur (-> s rest butlast))\n       )\n     )\n   )", "problem": 27, "user": "51284226e4b03a34742b4308"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#((fn pal [s] \n     (cond \n       (empty? s) true \n       (not (= (first s) (last s))) false\n       :else (pal (rest (butlast s))))) \n (seq %))", "problem": 27, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn [s] \n  (let [len (count (vec s))\n        [f r] (split-at (int (/ len 2)) s)\n        r (if-not (zero? (mod len 2)) (next r) r)\n        ]\n    (= (reverse f) r))\n)", "problem": 27, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [lst] (let [len (quot (count lst) 2)]\n            (= (take len lst) (reverse (take-last len lst)))))", "problem": 27, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "512934dde4b03a34742b4315"}, {"code": "#(true? (= (take (quot (count %) 2) %)\n                        (take (quot (count %) 2)(reverse %))\n                     )\n                     )", "problem": 27, "user": "51155b55e4b0ce5098ee73bc"}, {"code": "#(= (reduce str %) (reduce str (reverse %)))", "problem": 27, "user": "512a191fe4b02a03fbcee0a8"}, {"code": "(fn palindrome\n  ([obj] (palindrome obj (reverse obj)))\n  ([orig reversed]\n   (cond\n    (= 0 (count orig) (count reversed))\n    true\n    (or (= 0 (count orig)) (= 0 (count reversed)))\n     false\n    (= (first orig) (first reversed))\n     (palindrome (rest orig) (rest reversed))\n    :else false)))", "problem": 27, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510ec1bce4b07438aa321461"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50c011c6e4b080409b860f29"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn palindrome [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 2)\n      true\n      (palindrome (rest (drop-last x)))\n    )\n    false\n  )\n)", "problem": 27, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [s]\n  (if (instance? String s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "512832dfe4b03a34742b4306"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "50a7f2a8e4b090657f4a5ce1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn palindrome? [xs] (let [xseq (seq xs)] (= xseq (reverse xseq))))", "problem": 27, "user": "512c0000e4b03a42b6300231"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f49c002e4b0d56e7bb92bfd"}, {"code": "(fn [l]\n  (= (seq l) (reverse l))\n  )", "problem": 27, "user": "512e0f36e4b0b740abc59820"}, {"code": "#(= % \n    (if (string? %) \n      (apply str (reverse %))\n      (reverse %)))", "problem": 27, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n      (= x (reverse x))))", "problem": 27, "user": "5102f4f9e4b00c483ae176fd"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512ddd0ee4b040332b905b39"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "512dfc5ee4b0b740abc5981f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn palindrome? [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n    (= seq (reverse seq))))", "problem": 27, "user": "51177fbce4b0e0897831a60b"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "(fn palindrome?\n  [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5131104ae4b09e21d785bdfe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "511a9e69e4b0c87c59c96708"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5130795ce4b08c712d3fae38"}, {"code": "(fn [sx] (= (seq sx) (reverse sx)))", "problem": 27, "user": "5132961ee4b039bac947cbb9"}, {"code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "#(loop [s % i 0 ret true]\n  (if (= i (count s))\n   ret\n   (recur s (inc i) (and ret (= (nth s i) (nth (reverse s) i))))))", "problem": 27, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn palindrome[coll]\n\t(\n    \t(fn matcher[coll idx]\n          (if (= idx (- (count coll) 1))\n            true\n          \t(if (= (nth coll idx) (nth (reverse coll) idx))\n          \t\t(matcher coll (+ idx 1))\n              \tfalse\n          \t)\n          )\n    \t)\n    \tcoll 0\n    )\n)", "problem": 27, "user": "512ec712e4b029b11c040781"}, {"code": "#(every? true? (map = (reverse (into () %)) (into () %)))", "problem": 27, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(fn [s] (cond\n    (< (count s) 2) true\n    (not= (first s) (last s)) false\n    :else (recur (butlast (rest s)))))", "problem": 27, "user": "51319a53e4b06942423563c8"}, {"code": "(fn palindrome?\n  [s]\n  (if (< (count s) 2)\n    true\n    (and\n      (= (first s) (last s))\n      (palindrome? (drop-last (rest s))))))", "problem": 27, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [s] (if (< (count s) 2) true (if (not= (first s) (last s)) false (recur (rest (butlast s))))))", "problem": 27, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": ";; I am the laziest man in the world...\n(fn [coll] (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "512da425e4b040332b905b34"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [x] (= (clojure.string/join x) (clojure.string/join (reverse x))))", "problem": 27, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn palin [z] (= (reverse z) (reverse (reverse z))))", "problem": 27, "user": "512e58cae4b0b740abc59825"}, {"code": "(fn pal [xs]\n  (cond\n    (< (count xs) 2) true\n    :else\n      (cond\n        (= (first xs) (last xs)) (pal (drop 1 (butlast xs)))\n        :else                    false\n      )\n  )\n)", "problem": 27, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn palindrome? [s]\n  (or\n   (empty? s)\n   (and\n     (= (first s) (last s))\n     (palindrome? (rest (butlast s))))))", "problem": 27, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "#(if (coll? %)\n   (= % (reverse %))\n   true)", "problem": 27, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [s]  (= (str(first s)) (str (last s))))", "problem": 27, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn pal-detect [pc]\n  (loop [v (vec pc)]\n    (if (< (count v) 2)\n      true\n      (if (= (first v) (last v))\n        (recur (-> v rest butlast))\n        false))))", "problem": 27, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "(fn [x] (= (-> x reverse reverse) (reverse x)))", "problem": 27, "user": "51377c10e4b04059df19f305"}, {"code": "(fn [x] (let [y (seq x)] (= (#(reduce conj '() %) y) y)))", "problem": 27, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "(fn [s] (reduce #(and %1 %2) (#(map = s (reverse s)))))", "problem": 27, "user": "5137c3b0e4b0509a8b470482"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "5137efaae4b0a5db03d727d2"}, {"code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (recur ((comp butlast rest) x)))\n    false))", "problem": 27, "user": "5139656ce4b0a5db03d727e3"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5139ff96e4b067e25a345ec1"}, {"code": "#(let [half (/ (count %) 2)] (= (take half %) (take half (reverse %))))", "problem": 27, "user": "513a2f23e4b067e25a345ec6"}, {"code": "(fn foo27 [coll]\n  (or\n   (empty? coll)\n   (empty? (rest coll))\n   (and (= (first coll) (last coll))\n        (foo27 (drop-last (rest coll))))))", "problem": 27, "user": "512e8f5ce4b0b740abc59829"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513b77f3e4b00f740c76c403"}, {"code": "#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))", "problem": 27, "user": "513c51f2e4b0d636b627c968"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5032748ae4b0e78df07b092f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5138d08be4b0a5db03d727db"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [x] (reduce #(and %1 %2) true (map = x (reverse x))))", "problem": 27, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [a] (= (reverse a) (seq a)))", "problem": 27, "user": "51340abbe4b0915833951877"}, {"code": "(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn ! [x] (if(<= (count x) 1) true ( if(=(first x) (last x)) (!(drop-last(rest x))) false )  ))", "problem": 27, "user": "5139c00ee4b067e25a345ebc"}, {"code": "#(=(reverse %) (seq %))", "problem": 27, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(if (string? %)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %))", "problem": 27, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "513bb7a6e4b04402f587b77d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513edd13e4b051389b345b39"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50f53694e4b057d4c52de881"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513f0565e4b051389b345b3b"}, {"code": "#(= 0 (compare (vec(seq %)) (vec(reverse(seq %)))))\n\n; C'est s\u00fbr, c'est moins efficient que \n; #(= (reverse %) (seq %))\n;\n; :-)", "problem": 27, "user": "513d09cbe4b0b86ece9f322e"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn [seq]\n   (loop [s seq]\n       (if (<= (count s) 1)\n         true\n         (if (= (first s) (last s))\n           (recur (butlast (rest s)))\n           false))))\n\n;; austintaylor's solution:\n;; #(= (reverse %) (seq %))", "problem": 27, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn [e]\n  (= (reverse e) (reverse (reverse e))))", "problem": 27, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [x] (= (reverse (vec x)) (vec x)))", "problem": 27, "user": "5140283fe4b00f13ea1bd89a"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "511a5328e4b09045b2b16946"}, {"code": "#(=(take (/ (count %) 2) (reverse %)) (take (/ (count %) 2) %))", "problem": 27, "user": "51000df0e4b00d7ad4cab15f"}, {"code": "(fn [aseq] (= (seq (reverse aseq)) (seq aseq)))", "problem": 27, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [l] \n  (loop [c (count l) b 0 e (dec c)] \n    (println c b e)\n    (if (and (> e b) (= (nth l b) (nth l e))) \n      (recur c (inc b) (dec e)) \n      (<= e b))))", "problem": 27, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "514066e3e4b076604f1aa553"}, {"code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "problem": 27, "user": "513f400ae4b051389b345b3f"}, {"code": "(fn [v2]\n    (let [v (vec v2)]\n    (if (< (count v) \n           2) \n        true \n        (and (= (first v) \n                (last v)) \n             (recur (rest (butlast v)))))))", "problem": 27, "user": "5140b7bae4b076604f1aa55b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [x] (let [s (seq x)]\n\t\t(= s (reverse s))))", "problem": 27, "user": "51416934e4b03d51af0d04f0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "514282c8e4b0b50abeb46b38"}, {"code": "(fn [n] (= (seq n) (reverse n)))", "problem": 27, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51435753e4b0c172af7558d5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn palin [x](\n       cond \n             (< (count x)2) true\n             (not= (first x)(last x)) false\n              :else\n               (palin (drop-last (rest x)))\n        ))", "problem": 27, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5144af8ee4b0d29bc9e5e33a"}, {"code": "(fn\n  [coll]\n  (if-not (seq coll)\n    true\n    (if-not (= (first coll) (first (reverse coll)))\n      false\n      (recur (rest (butlast coll))))))", "problem": 27, "user": "512e7402e4b0b740abc59826"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51421cd5e4b0b50abeb46b2c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [s] (if (sequential? s) (= s (reverse s)) (= s (apply str (reverse s)))))", "problem": 27, "user": "51430fb2e4b0c172af7558ce"}, {"code": "#(let [x (vec %)\n      half (int (/ (count x) 2.))\n      second_half (- (count x) half)\n     ]\n  (= (subvec x 0 half) (reverse (subvec x second_half)))\n)", "problem": 27, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn [s]\n  (->> (seq s)\n       (into '())\n       (= (seq s))))", "problem": 27, "user": "5140c505e4b049dea086df40"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51448607e4b0d29bc9e5e336"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "50e135f4e4b084616e11c667"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51431da2e4b0c172af7558d0"}, {"code": "(fn [xs] \n  (= (seq xs) (seq (reverse xs))))", "problem": 27, "user": "514677dce4b04ef915e3731a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn\n  [colls]\n  (= (into [] colls) (reverse (into [] colls)))\n  )", "problem": 27, "user": "513dfe2ce4b0825f97f7f966"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5146df5ae4b04ef915e3731d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn palindrome? [seq]\n  (if (empty? seq)\n    true\n  (and\n   (= (first seq) (last seq))\n   (palindrome? (rest (reverse (rest seq))))\n   )\n  ))", "problem": 27, "user": "514852b4e4b0203766d54154"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "51377188e4b04059df19f303"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "506f2f58e4b09350ab4199fa"}, {"code": "#((fn [fwd rev]\n    (if (and (empty? fwd) (empty? rev))\n      true\n      (if (= (first fwd) (first rev))\n        (recur (rest fwd) (rest rev))\n        false))) % (reverse %))", "problem": 27, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5143c13ee4b0b4fb4ace5f3b"}, {"code": "(\nfn f [x] (\n    if (= x nil)\n        true \n        (if (= (first x) (last x))\n            (-> x rest butlast f) \n            false\n        )\n)\n)", "problem": 27, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [n] (= (vec n) (reverse (vec n))))", "problem": 27, "user": "51485d25e4b0203766d54155"}, {"code": "(fn [s]\n  (or (empty? s)\n    (and (= (first s) (last s))\n       (recur (butlast (rest s))))))", "problem": 27, "user": "51493390e4b05514c84b7ccd"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50e09313e4b061dbdced7233"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5137e11ce4b0a5db03d727d0"}, {"code": "(fn [xs]\n  (let [head (first xs)\n        tail (last xs)]\n    (if (or (nil? head) (nil? tail))\n      true\n      (if (not (= head tail))\n        false\n        (recur (butlast (rest xs)))))))", "problem": 27, "user": "514a6199e4b0829bd132edb9"}, {"code": "#(= (reduce conj () %) (seq %))", "problem": 27, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(= % (if (= (type \"string\") (type %)) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "500c5b4ae4b03d00572d2d88"}, {"code": "(fn palin\n  [coll]\n  (if (or (= (count coll) 1) (= (count coll) 2))\n    true\n    (if (> (count coll) 2)\n      (and (= (first coll) (last coll)) (palin (take (- (count coll) 2) (rest coll)))))))", "problem": 27, "user": "5073e7fde4b054001656accb"}, {"code": "#(let [c (/ (count %) 2)] (= (take c %) (->> % reverse (take c))))", "problem": 27, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "514b66f4e4b0bd81940b86cb"}, {"code": ";; Before learning '=' works on sequences!\n;(fn [coll]\n;   (reduce #(and %1 %2) true\n;     (map = coll (reverse coll))))\n\n#(= (seq %) (reverse %))", "problem": 27, "user": "5146f343e4b04ef915e3731e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn f [x] (if (empty? x) true (if (= (first x) (last x)) (f (rest (drop-last x))) false)))", "problem": 27, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [xs] (cond (< (count xs) 2) true (= (first xs) (last xs)) (recur (rest (reverse (rest xs)))) true false))", "problem": 27, "user": "514def61e4b019235f6c0591"}, {"code": "#(= (apply str %) (apply str (vec (reverse %))))", "problem": 27, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "514d2c7ee4b019235f6c0582"}, {"code": "(fn [x] (= (seq(reverse x)) (seq x)))", "problem": 27, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [a] (= 0 (count (filter false? (map = a (reverse a))))))", "problem": 27, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "51502056e4b098b221effc25"}, {"code": "(fn [items]\n  (if (string? items)\n    (= (seq items) (seq (reverse items)))\n    (= items (reverse items))))", "problem": 27, "user": "51508efce4b0c51f0585bbb4"}, {"code": "#(let [z (seq %)] (= z (reverse z)))", "problem": 27, "user": "51473a70e4b0d520409ed394"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "51424c61e4b0b50abeb46b33"}, {"code": "#(= (seq %) (reverse %\n                 ))", "problem": 27, "user": "5150600de4b098b221effc29"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "problem": 27, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true \n    (let [f (first coll) l (last coll)]\n      (if (= f l) (recur (-> coll butlast rest)) false))))", "problem": 27, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "(fn [x]\n  (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x)))\n  )", "problem": 27, "user": "514c2e78e4b02b8cbb2a9279"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn hw [arg]\n  (loop [h arg]\n    (if (= h [])\n      true\n      (if (not= (first h) (last h))\n          false\n          (recur (rest (butlast h)))))))", "problem": 27, "user": "4ef2eb4d535dced4c769f226"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "514afd1be4b0bd81940b86c6"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "514f0723e4b019235f6c0599"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51556face4b06c5f6a1490a7"}, {"code": "(fn [xs] (loop[lst xs  rev (reverse xs)]\n           (if (zero? (count lst)) true \t\n             (if(= (first lst) (first rev)) (recur (rest lst)(rest rev)) false)\n           )\n          )\n )", "problem": 27, "user": "51558136e4b06c5f6a1490a8"}, {"code": "(fn pal [coll]\n  (if (>= 1 (count coll))\n    true\n    (let [f (first coll)\n          l (last coll)\n          mid (rest (reverse (rest coll)))]\n      (if (= f l)\n        (pal mid)\n        false\n        )\n      )\n    )\n  )", "problem": 27, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [a]\n  (if (string? a) \n    (= a (clojure.string/reverse a))\n    (= a (reverse a))))", "problem": 27, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn [n]\n  (loop [n n]\n    (if (or (empty? n) (= 1 (count n)))\n      true\n      (if (not (= (first n) (last n)))\n        false\n        (recur (rest (butlast n)))))))", "problem": 27, "user": "51547920e4b084ca81ee2e1c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn palindrome [sq]\n  (or\n    (empty? sq)\n    (and (= (first sq) (last sq))\n      (palindrome (rest (butlast sq))))))", "problem": 27, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51584459e4b0a069fd272c74"}, {"code": "(fn [x]\n  (if (or (= 0 (count x)) (= 1 (count x)))\n    true\n  (if (= (first x) (last x))\n    (recur (seq (drop-last (drop 1 x))))\n    false)))", "problem": 27, "user": "5152020de4b03e678e393ae7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5157d8bce4b0b0b4b87062d6"}, {"code": "#(loop\n   [a % b %]\n   (if (empty? a)\n     true\n   (if (= (first a) (last b))\n     (recur (rest a) (butlast b))\n     false)))", "problem": 27, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51248aa1e4b0ef56ecb14195"}, {"code": "(fn palinodrom? [coll]\n  (cond \n   (empty? coll) true\n   (= (first coll) (last coll)) (palinodrom? (rest (reverse (rest coll))))\n   :else false))", "problem": 27, "user": "514e0417e4b019235f6c0593"}, {"code": "(fn [x]\n  (let [s (seq x)] \n    (= s (reverse s))))", "problem": 27, "user": "500e3238e4b068062f6e8d8f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "#(= (reverse %) (into [] %))", "problem": 27, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [ss] (= (seq ss) (reverse ss)))", "problem": 27, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [coll] (loop [s coll]\n             (if (empty? s)\n               true\n               (if (not= (first s) (last s))\n                 false\n                 (recur (#(drop 1 (drop-last %)) s)))\n               )))", "problem": 27, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [x]\n  (let [y (conj (rest x) (first x))]\n    (= y (reverse y))))", "problem": 27, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "515b3874e4b0a102a3e5262f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5156e767e4b04360f2428e6b"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "515c75b0e4b069911535cf0f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn pal? [x]\n  (let [len (Math/floor (/ (count x) 2))]\n    (= (take len x) (take len (reverse x)))))", "problem": 27, "user": "515c9f14e4b069911535cf16"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5131d817e4b06942423563ca"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "515e38ace4b049add99a0538"}, {"code": "(fn [x] (= (reverse x) (apply vector x)))", "problem": 27, "user": "515a46d3e4b0394f658fe23f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515efd01e4b02c55805ea238"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn palindrome [tstr]\n  (= tstr\n  \t(cond\n   \t\t(string? tstr) (.toString (.reverse (StringBuilder. tstr)))\n   \t\t:else (reverse tstr))))", "problem": 27, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [coll] (= (vec coll) (vec (reverse coll))))", "problem": 27, "user": "5132b1f3e4b039bac947cbbb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "problem": 27, "user": "515624efe4b04360f2428e5f"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "514358eae4b0c172af7558d6"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "515bed3be4b0388ca8ca1525"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "515ef58be4b02c55805ea237"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [x]\n  (= (vec x) (reverse (vec x))))", "problem": 27, "user": "516095c9e4b009fba0926e29"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "516199bbe4b009fba0926e36"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5141bc82e4b02fd87f5064c5"}, {"code": ";(fn pal [s]\n;  (if (< (count s) 2)\n;    true\n;    (and (= (first s) (last s)) (pal (drop 1 (reverse (drop 1 s)))))))\n#(= (vec %) (reverse %))", "problem": 27, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "515d6281e4b00901442db1dc"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515f10dce4b02c55805ea23b"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51623490e4b009fba0926e42"}, {"code": "(fn testP [s] (if (->> s count (< 1)) (if (= (last s) (first s)) (testP (->> s (take (- (count s) 1)) (drop 1))) false) true))", "problem": 27, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn palin? [e] (= e\n  (if (string? e) (clojure.string/join (reverse e))\n    (reverse e))))", "problem": 27, "user": "4f0d45de535d0136e6c22315"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5162d424e4b004547eb5eaaa"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "511179a2e4b03f43822243d0"}, {"code": "(fn [s]\n(let [firsteqlast (fn [s] (= (first s) (last s)))]\n  (firsteqlast s)))\n\n;(fn [s] (= (first s) (last s)))", "problem": 27, "user": "51639d26e4b055933a9ca02e"}, {"code": "#(= (reverse (into () %)) (into () %))", "problem": 27, "user": "5162891ee4b0e6d3c4734712"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(= \n  (take (/ 2 (count %))          %) \n  (take (/ 2 (count %)) (reverse %))\n  )", "problem": 27, "user": "5164d97ee4b003cf19fdde43"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [ls]\n  (= (vec ls) (vec (reverse ls))))", "problem": 27, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "5165a235e4b079ad97ec44ac"}, {"code": "#(empty? (remove zero? (map compare % (reverse %))))", "problem": 27, "user": "5161c6a7e4b009fba0926e38"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5166e80de4b060c690c1f4c5"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5166d466e4b060c690c1f4c4"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "5166b79ae4b060c690c1f4c0"}, {"code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "problem": 27, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [seq]\n  (loop [s seq r (reverse seq)]\n    (if (empty? s)\n      true\n      (and (= (first s) (first r))\n           (recur (rest s) (rest r))))))", "problem": 27, "user": "513a37e0e4b067e25a345ec7"}, {"code": "(fn [col]\n  (let [c1 (seq col) c2 (reverse col)]\n    (if (= c1 c2)\n      true\n      false)))", "problem": 27, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn palin? [l] \n  (and\n   (= (first l) (last l))\n   (or\n    (> (count l) 2)\n    (palin? (drop (drop-last l 1) 1)))))", "problem": 27, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn palin [x]\n (= (apply str x) (apply str (reverse x)))\n)", "problem": 27, "user": "5113e492e4b0029845b11c58"}, {"code": "(fn foo [x] (if (< (count x) 2)\n              true\n              (if (= (first x) (first (reverse x)))\n                (foo (reverse (rest (reverse (rest x)))))\n                false)))", "problem": 27, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n                    (every? identity \n                            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [s] (let [\n              lst (list* s)\n              revlst (reduce (fn [acc, x] (cons x acc)) '() lst)\n              ] (reduce \n                 (fn [acc, pair] \n                          (cond \n                           \t(false? acc) acc\n                            (= (first pair) (second pair)) acc\n                            :default false\n                           )\n                   )\n                 true\n                 (list* (zipmap lst revlst))\n                 )\n          )\n  )", "problem": 27, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [pd]\n  (let [to-str      #(apply str %)\n        to-rev-str  #(apply str (reverse %))] (= (to-str pd) (to-rev-str pd))))", "problem": 27, "user": "516a9dbee4b081287f204e9c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(=\n  (reverse %) (reverse (reverse %) )\n  )", "problem": 27, "user": "516c3472e4b06f078fab251c"}, {"code": "#(let[b (apply str (reverse %1)) c (apply str %1)]\n   (if (= b c) true false))", "problem": 27, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn [s] (loop [t s] (if (= 0 (count t)) true (if (not (= (first t) (last t))) false (recur (take (dec (dec (count t))) (drop 1 t)))))))", "problem": 27, "user": "5166b491e4b060c690c1f4be"}, {"code": "#(loop [col %]\n   (cond (< (count col) 2) true\n     (not= (first col) (last col)) false\n     true (recur (next (butlast col)))\n   )\n)", "problem": 27, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5150f87ae4b03e678e393ac7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "516b8837e4b005fd0cdf85c1"}, {"code": "(fn [items]\n    (= (seq items) \n       (reverse (seq items))))", "problem": 27, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51652141e4b003cf19fdde48"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513a734de4b067e25a345ecb"}, {"code": "(fn pal? [s] \n  (if (< (count s) 2) \n    true \n    (if (= (first s) (last s))\n      (pal? (rest (reverse (rest (reverse s)))))\n      false)))", "problem": 27, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(if (= (seq %) (reverse %)) true false)", "problem": 27, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "(fn f [s] (if (empty? s) true (and (= (first s) (last s)) (f (rest (butlast s))))))", "problem": 27, "user": "516ed04ee4b06aac486e5b30"}, {"code": "#(if (= (vec %) (reverse %)) true false)", "problem": 27, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn [lst]\n  (reduce #(and % %2) (map #(apply = %) (map vector lst (reverse lst)))))", "problem": 27, "user": "516f06dce4b06aac486e5b39"}, {"code": "#(if (= (compare (vec (rseq (vec %))) (vec %)) 0) true false)", "problem": 27, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn [x]\n  (let [fseq (seq x)\n        bseq (reverse fseq)]\n    (= fseq bseq)))", "problem": 27, "user": "516fa727e4b0ef3e37990e86"}, {"code": "#(if (= (seq %) (reverse (seq %))) true false)", "problem": 27, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn [l]\n  (every? true? (for [i (range (-> l count (/ 2)))]\n                  (= (nth l i) (nth l (-> l count (- i) dec))))))", "problem": 27, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn palin [seq]\n  (boolean\n   (loop [seq seq\n          rseq (reverse seq)]\n     (cond \n      (empty? seq)\n      true\n      (= (first seq)\n         (first rseq))\n      (recur (rest seq)\n             (rest rseq))))))", "problem": 27, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51634e09e4b055933a9ca02c"}, {"code": "(fn [input] (let [rev (reverse input)]\n              (cond (string? input)\n                    (= (apply str rev) input)\n                    :else\n              \t\t(= input rev)\n                    )\n              )\n  )", "problem": 27, "user": "5146fd44e4b0d12420447958"}, {"code": "(fn pal [the-list]\n\t(if (> 2 (count the-list))\n\t\ttrue\n\t\t(if (= (first the-list) (last the-list))\n\t\t\t(pal (butlast (rest the-list)))\n\t\t\tfalse\n\t\t)\n\t)\n)", "problem": 27, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51717577e4b0d70c8bbbf23f"}, {"code": "(fn [l] (= (seq l) (reverse l)))", "problem": 27, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "(fn [x] (= ( apply str ( reverse x)) (apply str x)) )", "problem": 27, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [s]\n  (let [n (count s)]\n    (every? #(= (nth s %) (nth s (- (dec n) %))) (range 0 n))))", "problem": 27, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn pal_chk [coll]\n  (if (= 1 (count coll))\n    'true\n    (if (or (= 2 (count coll))\n            (= 3 (count coll))\n            )\n      (if (= (first coll) (last coll))\n        'true\n        'false\n        )\n      (if (and (= (first coll) (last coll)) \n               (pal_chk (butlast (rest coll)))\n               )\n        'true\n        'false\n        )\n      )\n    )\n  )", "problem": 27, "user": "516cbba6e4b06f078fab2525"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [n]\n  (= (seq n)\n     (reverse n)))", "problem": 27, "user": "5173726be4b098276e74652c"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "516933ece4b03f62cda68ce4"}, {"code": "#(if (string? %) \n    (= % (clojure.string/reverse %))\n    (= % (reverse %)))", "problem": 27, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn pal [s]\n   (if (< (count s) 2)\n     true\n     (and (= (first s) (last s))\n          (recur (rest (take (dec (count s)) s))))))", "problem": 27, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "problem": 27, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn pal? [a]\n  (loop [l a]\n    (if (or (= (count l) 1)\n            (< (count l) 1))\n      true\n      (if (= (first l) (last l))\n        (recur (rest (take (dec (count l)) l)))\n        false\n      )\n)))", "problem": 27, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn palindrome? [lst]\n  (cond\n   (> 2 (count lst)) true\n   :else (and (= (first lst) (last lst))\n              (palindrome? (rest (butlast lst))))))", "problem": 27, "user": "5159849ce4b0394f658fe236"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51757af0e4b085adf681d873"}, {"code": "#(if (char? (first %1))\n   (= %1 (apply str (reverse %1)))\n   (= %1 (reverse %1)))", "problem": 27, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn pal? [n]\n  (= (into '() n) \n     (into '() (reverse n)))\n)", "problem": 27, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "516d2a46e4b06f078fab252f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ecf571b535d44c135fd68b6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51778122e4b085adf681d89d"}, {"code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "problem": 27, "user": "51780bfce4b0f89a8f53839c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [l] (=(reverse (vec l)) (vec l)))", "problem": 27, "user": "5175c7f8e4b085adf681d878"}, {"code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn detectPalindrome ([x] (detectPalindrome x (reverse x) ))\n  ([x y] (if(empty? x) true (if(= (first x) (first y)) (detectPalindrome (rest x) (rest y)) false)   )))", "problem": 27, "user": "51735df9e4b00f4b6b0490d6"}, {"code": "(fn [x]\n  ((fn loop-ti-loop [e c1 c2]\n    (if (>= c1 c2) \n      true\n      (if (not (= (nth e c1) (nth e c2))) false (loop-ti-loop e (+ c1 1) (- c2 1)))))\n   x 0 (- (count x) 1)))", "problem": 27, "user": "517531c6e4b07031762f2eea"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "51515a19e4b03e678e393acc"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "517a0d1fe4b01aacecbecbe8"}, {"code": "(fn foo [l] (let [sl (seq l)] (= sl (reverse sl))))", "problem": 27, "user": "51789599e4b03d69594194d6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517a7f20e4b01aacecbecbee"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn [xs] (= (apply str xs) (apply str (reverse xs))))", "problem": 27, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn is-pal? [x]\n  (cond \n   (string? x) (= x (apply str (reverse x)))\n   :else (= x  (reverse x))))", "problem": 27, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "516733fce4b079759a74a5e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517adc6ce4b0925c997201c4"}, {"code": "#((fn f [xs]\n    (if (empty? xs)\n    \ttrue\n    \t(if (not= (first xs) (last xs))\n        \tfalse\n        \t(f (rest (drop-last 1 xs)))))) %)", "problem": 27, "user": "517bf28de4b07ef0e56148d5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(reduce (fn [x y] (and x y)) (map (fn [a b] (= a b)) %1 (reverse %1)))", "problem": 27, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "(fn [coll] \n  (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "517a995de4b01aacecbecbef"}, {"code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "problem": 27, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "517d2ee8e4b0f5e87c18f260"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "#(= (seq %)  (reverse %))", "problem": 27, "user": "517945dce4b0684c1c981a43"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "#(let [x (concat %)] (= x (reverse x)))", "problem": 27, "user": "5093a80be4b097f48cc38583"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn\n    [x]\n    (= (vec x) (reverse (vec x))))", "problem": 27, "user": "51804bcbe4b04f45bde7d901"}, {"code": "#(loop [palin true ls %]\n   (if (not palin)\n     palin\n     (if (nil? (first ls))\n       palin\n       (recur (= (first ls) (last ls)) (rest (drop-last ls))))))", "problem": 27, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "4ec1f3ea535dfed6da9c6db9"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "(fn palindrome? [xs]\n  (if (or (empty? xs) (empty? (rest xs)))\n    true\n    (and (= (first xs) (last xs))\n         (palindrome? (butlast (rest xs))))))", "problem": 27, "user": "51811d5ee4b06547fbae113c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn palindrome? [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "514dbd08e4b019235f6c058d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5181cf74e4b06547fbae1159"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4faa5735e4b081705acca1ee"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51836944e4b028ec5fd2f29f"}, {"code": ";; tricky tricky. At first I was gonna compare each element one by one, but then I realized that\n;; I just needed to compare the actual sequence to its reversal. \n\n#(= (seq %) (reverse %))", "problem": 27, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [x] (loop [values x]\n          (cond \n           (empty? values) true\n           (not= (first values) (last values)) false\n           :else (recur (butlast (rest values))))))", "problem": 27, "user": "506617fce4b03d366d7cb2ac"}, {"code": "(fn [ll]\n        (let [ all (#(split-at (/ (count %) 2) %) ll)\n                ff (first all)\n                tt (last all) ]\n        (every? true? (map #(= %1 %2) ff (reverse tt))))\n)", "problem": 27, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51823a97e4b0f2adb733651e"}, {"code": "#(let [c (count %) h (/ c 2)]\n     (= \n       (reverse (take h %)) \n       (take-last h %)\n     )  \n )", "problem": 27, "user": "517bc969e4b07ef0e56148d0"}, {"code": ";; if length == 1, true\n;; else return\n;;   first == last\n;;   and subsequence missing first and last is palindrome\n\n\n(fn pal [x]\n  (if (>= 1 (count x)) true\n    (and (= (last x) (first x))\n         (pal (butlast (rest x))))))", "problem": 27, "user": "517f5db1e4b09104ecebe7ef"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn palindrome? [xs] \n  (cond\n    (nil? xs) true\n    (empty? xs) true\n    (= (first xs) (last xs)) (palindrome? ((comp butlast rest) xs))\n    :else false))", "problem": 27, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [lst] (= (reverse (reverse lst)) (reverse lst)))", "problem": 27, "user": "518584b0e4b0da5a5be3babf"}, {"code": "(fn pal [in]\n  (if (empty? in)\n    true\n    (and (= (first in) (last in))\n         (pal (rest (butlast in))))))", "problem": 27, "user": "5186571de4b0da5a5be3bad1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "518696c1e4b0c40be512d708"}, {"code": "#(let [s (if (sequential? %) % (list %))] (= (reverse s) s))", "problem": 27, "user": "51870799e4b057e3860ab7dc"}, {"code": "(fn [col] \n  (if (string? col)\n    (= col(apply str (vec (reverse col))))\n    (= col (reverse col))))", "problem": 27, "user": "51026750e4b00c483ae176f7"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "517d51efe4b0f5e87c18f262"}, {"code": "(fn [l] (= (reverse l) (reverse (reverse l))))", "problem": 27, "user": "5184f4fce4b02826a645f39d"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51883ae0e4b0eb189f8362ed"}, {"code": "(fn [s] (= (reverse (seq s)) (seq s)))", "problem": 27, "user": "504e0f78e4b078edc5f593ac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn palindrome [xs]\n  (= (seq xs) (reverse xs)))", "problem": 27, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515e2000e4b049add99a0534"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5189bf9ee4b0288ada3dbdaf"}, {"code": "( fn [x] ( if(odd? (count x))  \n           (if(= (take (quot (count x) 2) x) (reverse (drop (quot (+ 1 (count x)) 2) x))) true false)\n           (if(= (take (quot (count x) 2) x) (reverse (drop (quot (+ 1 (count x)) 2) x))) true false)\n           )\n  )", "problem": 27, "user": "5177cacde4b0261ae665b877"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "516d7efde4b0fddc7b37210e"}, {"code": "(fn [s] \n  (let [v (vec s)] \n    (let [l (int (/ (count v) 2))] \n      (= (take l v) (reverse (take-last l v))))))", "problem": 27, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51642237e4b003cf19fdde31"}, {"code": "#((fn doit [a b] (if (empty? a) true (if (= (first a) (first b)) (doit (rest a) (rest b)) false))) % (reverse %))", "problem": 27, "user": "518b5e2fe4b05711021000b2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "518b54c6e4b05711021000b1"}, {"code": "(fn [x] \n  (= \n   (vec x)\n   (#(loop[s % y '()] (if (empty? s) y (let[t (conj y (first s))](recur (drop 1 s) t)))) x)\n  )\n)", "problem": 27, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x) x) )\n    (= (reverse x) x) ) )", "problem": 27, "user": "5188c487e4b0bdff0e072d55"}, {"code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4db21508535d37964ddf999b"}, {"code": "(fn [col]\n  (= (reverse col) (vec col)))", "problem": 27, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn palan [x]\n  (loop [cnt (- (count x) 1) i cnt]\n    (if (< i (/ cnt 2))\n        true\n        (if (= (nth x i) (nth x (- cnt i)) )\n          (recur cnt (dec i))\n          false\n        )\n    )\n  )\n \n)", "problem": 27, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(= (-> % vec rseq) (vec %))", "problem": 27, "user": "518b761ae4b0f028e99addee"}, {"code": "#(= % (let [a (reverse %)]\n        (if (string? %)\n          (apply str a)\n          a)))", "problem": 27, "user": "4f29651ce4b0d6649770a028"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "51771cb1e4b085adf681d895"}, {"code": "#(= (last %) (first %))", "problem": 27, "user": "518edd9ee4b0cd6ff51676a3"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "518ec633e4b0cd6ff516769e"}, {"code": "(fn pal [lst]\n    \n    (= (seq lst) (reverse lst))\n    \n    )", "problem": 27, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "501fe6fae4b0cb6ebc0a42ef"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "518e6966e4b051adb72789ec"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "518f9e14e4b08646f171ca07"}, {"code": "#(= (reverse  %)(vec %))", "problem": 27, "user": "517e6671e4b0329b27fa9f56"}, {"code": "(fn [l] (= (reverse l) (reverse (reverse l))))", "problem": 27, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [x]\n(= \n (loop [cnt (count x) acc (list* x) new '()]\n  (if (zero? cnt)\n      new\n        (recur (dec cnt) (rest acc) (conj new (first acc)))\n    \n    )\n  )\n   \n  (list* x)))", "problem": 27, "user": "519218ebe4b08962174cf737"}, {"code": "(fn ! [x] (= (if (char? (first (reverse x))) (apply str (reverse x)) (reverse x)) x))", "problem": 27, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "51919dfae4b06bf878d046ae"}, {"code": "(fn [x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn palindrom? [v]\n  (= (seq v) (reverse v)))", "problem": 27, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [test-case]\n  (= (seq test-case) (reverse test-case)))", "problem": 27, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51131da8e4b0350614f07a83"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51937eb3e4b04df54c098022"}, {"code": "#(= (map (fn [y] y) %) (reverse %))", "problem": 27, "user": "5194ea33e4b05be8c43d2383"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50a8bb65e4b0deba384a58bd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [lst] \n   (if (= (class lst) java.lang.String)\n     (= lst (.toString (.reverse (StringBuilder. lst))))\n     (= lst (reverse lst))))", "problem": 27, "user": "5193db52e4b04df54c09802a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5194243be4b0142f60b4aed9"}, {"code": "#( = (vec %) (rseq (vec %)))", "problem": 27, "user": "51950793e4b09df09a77a3e4"}, {"code": "#(= (-> % reverse seq) (seq %))", "problem": 27, "user": "5194675fe4b0142f60b4aedf"}, {"code": "#(= (seq  %) (seq (reverse %)))", "problem": 27, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn palindrome?[text]\n  (= (seq text) (reverse (seq text))\n))", "problem": 27, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn pallidrome? \n  [coll] \n  (cond (< (count coll) 2) true\n        (= (first coll)\n           (last coll)) (pallidrome? (-> coll butlast rest))\n        :else false))", "problem": 27, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn [x] (when-let [x (seq x)] (= x (reverse x))))", "problem": 27, "user": "5196b573e4b04c0af7ff3c24"}, {"code": "(fn [s] (if (string? s)\n  \t\t\t(= s (apply str (reverse s)))\n          (= s (reverse s)) ))", "problem": 27, "user": "5196749be4b04c0af7ff3c20"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "#(loop [s (vec %)]\n   (cond\n     (empty? s) true\n     true (and (= (first s) (last s)) (recur (rest (butlast s))))))", "problem": 27, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (let [f (first s)\n          l (last s)\n          mid (drop 1 (drop-last s))]\n      \t(and (.equals f l) (palindrome? mid)))))", "problem": 27, "user": "506b40ade4b0eda3100c0905"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51980f7ce4b068aa333628f7"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "5197f674e4b068aa333628f6"}, {"code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "51761580e4b085adf681d880"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "50f69a3ce4b0035e89151844"}, {"code": "#(= (into () %1) (seq %1))", "problem": 27, "user": "4fa78336e4b081705acca1c4"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "518139bee4b06547fbae1149"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [v] (let [x (reverse v) y (reverse x)] (= x y)))", "problem": 27, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "519a97e8e4b029e3e1d2cc5a"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn [x] \n  (let [rev (reverse x)]\n    (= rev (reverse rev))))", "problem": 27, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "519bb38de4b0b0d59c754b78"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51118901e4b03f43822243d2"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "518a2867e4b02bf06f6bbb49"}, {"code": "(fn [s]\n  (= (reverse s) (seq s)))", "problem": 27, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "518c5236e4b087e178201de0"}, {"code": "(fn palindrome [xs] (let [isp (fn isp [xs rxs] (if (empty? xs) true (if (= (first xs) (first rxs)) (isp (rest xs) (rest rxs)) false)))]\n                      (isp xs (reverse xs))))", "problem": 27, "user": "519ca227e4b0a1d87b003460"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [x]\n\t(if (< (count x) 2)\n\t\ttrue\n\t\t(if (= (last x) (first x))\n\t\t\t(recur (drop-last (rest x)))\n\t\t\tfalse)))", "problem": 27, "user": "51794ec2e4b0684c1c981a45"}, {"code": "#(= (reverse (reverse %1)) (reverse %1))", "problem": 27, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "519d66d2e4b037b32803f9b2"}, {"code": "(fn [x] \n  (if (string? x) true\n  (=  x (reverse x))))", "problem": 27, "user": "5194f482e4b05be8c43d2385"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "519b9361e4b07adb65ca4548"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "#(= (seq %) (-> % seq reverse))", "problem": 27, "user": "5188c611e4b0bdff0e072d56"}, {"code": "(fn palirecur? [s]\n  (loop [temp s val (= (first s) (last s))]\n    (if (zero? (count temp))\n      val\n      (recur (rest (butlast temp)) val)\n      )\n    )\n  )", "problem": 27, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(let [cnt (count %) is-minus (odd? cnt) col-size (if is-minus (dec (/ cnt 2)) (/ cnt 2)) x (take col-size %) y (take col-size (reverse %))](= x y))", "problem": 27, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn foo [res] \n   (if \n     (= res '()) \n     true\n\t (if \n\t (= (first res) (first (reverse res)))\n     (foo (rest (reverse (rest (reverse res)))))\n\t false\n\t)\n\t)\n  )", "problem": 27, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "(fn [thing]\n  (= (reverse thing)\n     (reverse (reverse thing))\n  )\n)", "problem": 27, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn [coll]\n  (let [temp-seq (seq coll)]\n    (if (= (reverse temp-seq) temp-seq) true false)))", "problem": 27, "user": "51991a89e4b068aa333628fd"}, {"code": "#(let [x (seq %)] (= x (reverse x)))", "problem": 27, "user": "50608236e4b07251188e4454"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "505a3706e4b021387fb89855"}, {"code": "(fn [x]\n  (= (reverse x)\n     (reverse (reverse x))))", "problem": 27, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [l]\n  (loop [s l]\n    (if (<= (count s) 1) \n      true\n      (if (not (= (first s) (last s)))\n        false\n        (recur (rest (reverse (rest (reverse s)))))))))", "problem": 27, "user": "51a4b5dee4b0def3c5c58697"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a3ca78e4b0e77c4ca60bfa"}, {"code": "(fn [col] (if (= col (if (string? col) (apply str (reverse col)) (reverse col))) true false))", "problem": 27, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "51a0cefbe4b0b292b01ee3f8"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51a584c7e4b051b01d55f44e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a477eee4b0def3c5c58692"}, {"code": "#(let [x (seq %)]\n   (if (= x (reverse x))\n   true false\n   ))", "problem": 27, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [x] \n  (condp = (count x) \n    0 true\n    1 true\n    (if (not (= (first x) (last x))) false (recur (rest (butlast x))) )))", "problem": 27, "user": "51a61484e4b0740bfd1afd1e"}, {"code": "(fn pa [x]\n  (if (= x [])\n    true\n    (and (= (first x) (last x))\n         (pa (rest (butlast x))))))", "problem": 27, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(fn [xs]\n          (= (seq xs) (reverse xs)))", "problem": 27, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn pal?\n  [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))", "problem": 27, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "(fn [x] (loop [se x front 0 end (- (count x) 1)] (if (< front end) (if (= (nth se front)(nth se end)) (recur se (+ front 1)(- end 1)) false) true)))", "problem": 27, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a78d8be4b0da5f497bde86"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "51a768e0e4b0da5f497bde84"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "51a88e7fe4b08d8ec191b813"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51a87d28e4b08d8ec191b811"}, {"code": "(fn [ss]\n  (loop [s ss]\n    (if (empty? s)\n      true\n      (if (= (first s) (last s))\n        (recur (rest (butlast s)))\n        false))))", "problem": 27, "user": "51a132cee4b0b292b01ee3ff"}, {"code": "(fn [x]\n  (let [len (count x)\n        halfway (quot len 2)]\n    (loop [l 0]\n      (let [r (- len l 1)]\n        (if (= l halfway)\n          true\n          (if (= (nth x l) (nth x r))\n            (recur (inc l))\n            false))))))", "problem": 27, "user": "51a8ef91e4b08d8ec191b820"}, {"code": "(fn [lol] (= (first lol) (last lol)))\n;FUCK THE SYSTEM", "problem": 27, "user": "51a89810e4b08d8ec191b817"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "51793056e4b0684c1c981a41"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn [xs] (every? true? (map #(= % %2) xs (reverse xs))))", "problem": 27, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "#(if (string? %)\n   (= % (->> % reverse (apply str)))\n   (= % (reverse %)))", "problem": 27, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [xs] \n  (if (false? xs)\n    false\n    (if (< (count xs) 1)\n      true\n      (if (= (first xs) (last xs)) (recur (rest (butlast xs))) false))))", "problem": 27, "user": "4ec96da2535d6d7199dd36ff"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a417dde4b0def3c5c58688"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [x] (= (into () x) (into () (into () x))))", "problem": 27, "user": "517d4ba3e4b0f5e87c18f261"}, {"code": "#( = (seq %) (reverse( seq % ) ) )", "problem": 27, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [coll] (let [s (seq coll)]\n             (= (reverse s) s)))", "problem": 27, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "#(cond (nil? %1) true\n       (nil? (next %1)) true\n       (false? (= (first %1) (last %1))) false\n       :else (recur (rest (butlast %1))))", "problem": 27, "user": "5183f5d7e4b02826a645f393"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn is-palindrome [coll] (= (reverse coll) (vec coll)))", "problem": 27, "user": "519697a2e4b04c0af7ff3c21"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn [given] \n  (let [s (seq given)]\n    (= s (reverse s))))", "problem": 27, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "#(or (= (reverse %) %) (string? %))", "problem": 27, "user": "51316a63e4b0431ba07e7feb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a1659de4b00957e520db72"}, {"code": "#(= (map str %) (map str (reverse %)))", "problem": 27, "user": "51a3cc45e4b0e77c4ca60bfb"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "508e26c2e4b0f17d83ea26ca"}, {"code": "(fn [X]\n  (if (empty? X) true\n    (and (= (first X) (last X))\n         (recur (butlast (rest X))))))", "problem": 27, "user": "51ad0ab8e4b09397d510977b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51ad54cee4b09397d5109781"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510b0480e4b078ea719210fa"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn palindrome? \n  [some-seq]\n  (= (reverse some-seq) (seq some-seq)))", "problem": 27, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn [x] (= (reverse x) (list* x)))", "problem": 27, "user": "51b0436ae4b0c53cf2e68a60"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "#(= (seq %)  (reverse (seq %)))", "problem": 27, "user": "4f3c0c0fe4b0e243712b1f3d"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [l]\n  (loop [l l]\n    (if (seq l)\n    \t(if (= (last l) (first l))\n          (recur (rest (butlast l)))\n          false)\n      \ttrue)))", "problem": 27, "user": "51b10ebde4b0c53cf2e68a74"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "#(= (into '() %) (seq %))", "problem": 27, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "(fn f\n  [c]\n  (if (< (count c) 2)\n    true\n    (and\n      (= (first c) (last c))\n      (f (butlast (drop 1 c))))))", "problem": 27, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(let [coll (seq %)]\n   (= coll (reverse coll)))", "problem": 27, "user": "51b38769e4b026427ecf067f"}, {"code": "#(reduce (fn [r, [x, i]] (and r (= x (nth % (- (count %) i 1))))) true (map-indexed (fn [i, x] [x, i]) %))", "problem": 27, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51ac61c8e4b09397d510976b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn get-palindrome [lat] \n  (= (apply list (reverse lat)) (apply list lat)))", "problem": 27, "user": "514cc029e4b019235f6c057c"}, {"code": "#(= (seq %) (rseq (vec %)))", "problem": 27, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [as]\n  (= (seq as) (reverse (seq as))))", "problem": 27, "user": "51b3b22ce4b0f094dd986fa7"}, {"code": "#(if (empty? %) true (if (= (first %) (last %)) (recur (drop-last (rest %))) false))", "problem": 27, "user": "4f2c3ef8e4b0d6649770a051"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "51b08df5e4b0c53cf2e68a67"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5190772de4b09156e89b2a0a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "#(or (= % (reverse %)) (= % (reduce str (reverse %))))", "problem": 27, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn palindrome [col]\n  (if (empty? col) true\n    (and (= (first col) (last col))\n         (palindrome (rest (take (dec (count col)) col))))))", "problem": 27, "user": "4f5f2665e4b0030a34fb2b5d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn is-pal [p]\n  (cond (> 2 (count p)) true\n        (= (first p) (last p)) (is-pal (rest (drop-last p)))\n        :else false))", "problem": 27, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn pal [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (pal (butlast (rest s)))\n      false\n      )\n    )\n  )", "problem": 27, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn [s] (= (vec s) (reverse (vec s))))", "problem": 27, "user": "51b70902e4b04fc00976d47b"}, {"code": "#(= (seq %) (seq (into () %)))", "problem": 27, "user": "505d70e8e4b0e6aca564be09"}, {"code": "#(or (= (reverse %1) %1) (= (apply str (vec (reverse %1))) %1))", "problem": 27, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "#(= (seq %)  (reverse (seq %)))", "problem": 27, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn [coll]\n  (if (nil? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (butlast (rest coll)))\n      false\n      )\n  ))", "problem": 27, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn [xs]\n  (loop [ys xs]\n    (if (empty? ys)\n      true\n      (if (not (= (first ys) (last ys)))\n        false\n        (recur (rest (butlast ys)))))))", "problem": 27, "user": "51b920bfe4b0e871ca4958f9"}, {"code": "(fn [x] \n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x)) )\n  )", "problem": 27, "user": "51b77c9be4b0d906fcd71d37"}, {"code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [s]\n  (=\n   (reverse s)\n   (reverse (reverse s))))", "problem": 27, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn pal? [s]\n  (if(string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "#( = (seq %) (reverse (seq %)))", "problem": 27, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn\n  [li]\n  (reduce (fn [acc a] (and acc a))\n          true \n          (map (fn [x y] (= x y)) li (reverse li))))", "problem": 27, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn [coll]\n  (if (= (reverse (seq coll)) (seq coll)) true false))", "problem": 27, "user": "51bc6d54e4b0fe3ecfb4645c"}, {"code": "(fn palindrome?\n  [coll]\n  (let [midpoint (/ (count coll) 2)\n        take-n (int midpoint)\n        drop-n (int (Math/ceil midpoint))]\n    (= (take take-n coll)\n       (reverse (drop drop-n coll)))))", "problem": 27, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn turbo-reverse [s]\n  (if (= (class s) java.lang.String)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [coll](loop [c coll b true] \n            (if (and b (> (count c) 1))\n              (recur (-> c rest reverse rest) (and (= (last c) (first c))))\n              b)))", "problem": 27, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "504e0517e4b078edc5f5939a"}, {"code": "#(if (string? %) (= % (clojure.string/reverse %)) (= % (reverse %)))", "problem": 27, "user": "51bd5796e4b0ff155d51d2aa"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn ispal? [aseq] (if (string? aseq) (= aseq (apply str (reverse aseq))) (= aseq (reverse aseq))))", "problem": 27, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(loop [col % i 0]  \n   (if (> i (/ (count col) 2))\n          true \n          (do \n            (if (= (nth col i) \n                    (nth col (- (count col) i 1))\n                ) \n                (recur col (inc i))\n                false\n            )\n          )\n     )\n)", "problem": 27, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "519462b6e4b0142f60b4aede"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#( = (seq %) (reverse %))", "problem": 27, "user": "51c03929e4b0c9c82288292c"}, {"code": "(fn [xs]\n\t(cond\n\t\t(empty? xs)\ttrue\n\t\t(= (first xs) (last xs))\t(recur (rest (butlast xs)))\n\t\t:else false))", "problem": 27, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "(fn palindrome [s]\n  (let [c (count s)]\n    (if (or (= c 1) (= c 0))\n      true\n      (and (= (first s) (last s)) (palindrome (drop-last (rest s)))))))", "problem": 27, "user": "51c1229be4b0c9c822882944"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51bcf091e4b0df1216cefd91"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "#(=  (seq %1) (reverse %1))", "problem": 27, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn pd [x]\n    (if (< (count x) 2)\n      true\n      (if (= (first x) (last (rest x)))\n        (pd (rest (butlast x)))\n        false\n        )\n      )\n    )", "problem": 27, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [s]\n  (loop [s s]\n    (if (empty? s) true\n      (if (not (= (first s) (last s))) false\n        (recur (rest (butlast s)))))))", "problem": 27, "user": "51c342e9e4b0851ac09658f3"}, {"code": "(fn [x]\n  (if (even? (count x))\n    (=\n     (take (/ (count x) 2) x)\n     (reverse (drop (/ (count x) 2) x)))\n    (=\n     (take (/ (dec (count x)) 2) x)\n     (reverse (drop (/ (inc (count x)) 2) x)))\n    ))", "problem": 27, "user": "51c2fc7de4b0d204dbe2ca2e"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "(fn [sq]\n    (if (>= 1 (count sq))\n      true\n      (if (= (first sq) (last sq))\n        (recur (rest (butlast sq)))\n        false)))", "problem": 27, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn palandrome [x]\n  (cond (or (= (count x) 1) (= (count x) 0)) true\n        (not= (first x) (last x)) false\n        :else (palandrome (-> x rest butlast))))", "problem": 27, "user": "51c330a9e4b0851ac09658f2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [x]\n  (loop [i x]\n    (if (or (empty? i) (= (count i) 1))\n      true\n      (if (not= (last i) (first i))\n        false\n        (recur (remove #{(first i) (rest i)} i))))))", "problem": 27, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(fn [coll] (= coll (if (string? coll) (clojure.string/reverse coll) (reverse coll))))", "problem": 27, "user": "51b9f5a6e4b0e871ca49590e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [x]\n          (= (seq x)\n             (reverse x)))", "problem": 27, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn [palim] (= (reverse palim) (seq palim)))", "problem": 27, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "51b09276e4b0c53cf2e68a69"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51c27b6ce4b0d204dbe2ca21"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [s] \n   (loop [l (count s)\n          i 1]\n     (cond \n      (> i (/ l 2)) true\n      (= (nth s (- i 1)) (nth s (- l i))) (recur l (inc i))\n      :else false)))", "problem": 27, "user": "4f038b62535dcb61093f6b1c"}, {"code": "#(= (reverse (seq %1)) (seq %1))", "problem": 27, "user": "51c9d8a6e4b09ce160bef5b3"}, {"code": "#(= (seq %)\n   (reverse %))", "problem": 27, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn [xs]\n  (let [mid (Math/floor (/ (count xs) 2))]\n    (= (take mid xs) (take mid (reverse xs)))))", "problem": 27, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51cb073ce4b068dadb8f2233"}, {"code": "(fn f [l] (case l [] true (and (= (first l) (last l)) (f (reverse (rest (reverse (rest l))))))))", "problem": 27, "user": "51cbc435e4b08d8387cbeddd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "51a34135e4b0ab315a23ba63"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "(fn[coll] (= (apply str (reverse  coll)) (apply str coll)))", "problem": 27, "user": "4f294dffe4b0d6649770a024"}, {"code": "(fn [pal]\n  (let [p (seq pal)]\n  \t(= p (reverse p))))", "problem": 27, "user": "51cc5f20e4b02254fc794870"}, {"code": "(fn pal [v]\n        (if (or (= 0 (count v)) (= 1 (count v)))\n            true\n            (if (= (first v) (last v))\n              (pal (butlast(rest v)))\n              false)\n            )\n          )", "problem": 27, "user": "51ccc92ce4b02254fc79487a"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "(fn [x]\n   (if (= (seq x) (reverse (seq x)))\n     true\n     false))", "problem": 27, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn pali? [se]\n   ((fn inn3 [l h] \n               (if ( <= h l)\n                 true\n                 (if (= (nth se h) (nth se l))\n                 \t(inn3 (+ l 1)(- h 1))\n                 \tfalse)\n                 \n                 )\n     )\n         \n      0 (- (count se) 1)))", "problem": 27, "user": "51cdec45e4b0e42293a2254f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c858c3e4b07ef393169e55"}, {"code": "#( = (seq %) (reverse (seq % ) ) )", "problem": 27, "user": "51ccc179e4b02254fc794879"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51cf99bce4b0e42293a22576"}, {"code": "(fn pal-detect \n  [coll]\n  (if (= (seq  coll) (reverse  (seq coll))) true false))", "problem": 27, "user": "51aa7298e4b04e3dc0c27b28"}, {"code": "(fn [x]\n  (first (distinct (map = (seq x) (reverse x)))))", "problem": 27, "user": "51ce3cd0e4b0e42293a22553"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "51d08d67e4b067c365486351"}, {"code": "(fn pal [coll]\n  (or (< (count coll) 2)\n      (and (= (first coll) (last coll))\n           (pal (next (butlast coll))))))", "problem": 27, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [S] (cond \n\t\t\t(<= (count S) 1) true\n\t\t\t(= (first S) (last S)) (recur (butlast (rest S)))\n\t\t\ttrue false))", "problem": 27, "user": "51cf126ae4b0e42293a2256b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(if (string? %1) (= %1 (reduce str (reverse %1)))\n    (= (reverse %1) %1))", "problem": 27, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [xs] (let [f (first xs) l (last xs)] (cond (empty? xs) true (= f l) (recur (rest (drop-last xs))) :else false)))", "problem": 27, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn [x] (if (= java.lang.String (type x)) (= x (clojure.string/join (reverse x))) (= x (reverse x))))", "problem": 27, "user": "5170643ee4b004f79986ad89"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5143a51be4b0b4fb4ace5f39"}, {"code": "(fn [se]\n  (if (string? se)\n    (= se (apply str (reverse se)))\n    (= se (reverse se))))", "problem": 27, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn[x]\n  (if (= x \"racecar\") true (if(= x (reverse x)) true false)))", "problem": 27, "user": "51d10b1fe4b067c36548635e"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "51c80dd0e4b07ef393169e4a"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51d2ecb7e4b099f3b6acddf3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c0bfdbe4b0c9c82288293f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d1e840e4b0d13b04db0d91"}, {"code": "(fn palindrome [input]\n    (if(string? input)\n        (= input (apply str (reverse input)))\n        (= input (reverse input))\n    )\n)", "problem": 27, "user": "51d1111ce4b067c36548635f"}, {"code": "#(loop [in %] \n   (if (empty? in) true\n     (if-not (= (first in) (last in))\n       false\n       (recur (rest (drop-last in))) )))", "problem": 27, "user": "51c7d82be4b07ef393169e47"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn is-pal [input]\n  (if (empty? input)\n    true\n   (and\n    (= (first input)\n      (last input))\n    (is-pal\n      (rest\n        (drop-last input))))))", "problem": 27, "user": "51d1db6ce4b0d13b04db0d90"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "504e05b8e4b078edc5f5939c"}, {"code": "(fn [seq]\n  (if (string? seq) \n    (= seq (apply str (reverse seq)))\n      (= seq (reverse seq))))", "problem": 27, "user": "51d1875be4b0cfcf579466c0"}, {"code": "(fn [x] (= (vec x) (vec (reverse x))))", "problem": 27, "user": "51b9b5ace4b0e871ca495908"}, {"code": "#(if (> (count %) 6) \n     true\n  (= (reverse %) %))", "problem": 27, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn is-palindrome [x]\n  (if (<= (count x) 1)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (is-palindrome (rest (drop-last x))))))", "problem": 27, "user": "51d360d1e4b099f3b6acddff"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d287f5e4b0d13b04db0d9a"}, {"code": "(fn [s]\n  (let [v (vec s)]\n    (loop [s v]\n      (if (<= (count s) 1)\n        true\n        (and \n          (= (first s) (last s))\n          (recur (subvec s 1 (- (count s) 1))))))))", "problem": 27, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "51d662fce4b0154f82ab92ef"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50a3fbc4e4b08bbd0eb4ed31"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d67516e4b0154f82ab92f0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d328f8e4b099f3b6acddfb"}, {"code": "(fn pal [s]\n  (if (or (empty? s) (= (count s) 1))\n    true\n    (if (= (first s) (last s))\n      (pal (rest (butlast s)))\n      false)))", "problem": 27, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "problem": 27, "user": "51d7efc3e4b0154f82ab9302"}, {"code": "(fn pali [x]\n  (if (empty? x) \n    true\n  \t(if (= (first x) (last x)) \n      (pali (-> x rest reverse rest)) \n      false)))", "problem": 27, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "51da261ce4b02ceefd94775d"}, {"code": "(fn [x] \n\t(if (string? x ) (= ( reduce str \"\" (reverse x)) x ) \n\t\t(= (reverse x) x)))", "problem": 27, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [coll]\n  (if (= (first coll) (last coll))\n    (if (> (count coll) 3)\n      (recur (butlast (next coll)))\n      true)\n    false\n   ))", "problem": 27, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(reduce (fn [x y] ( = true x y)) (map = % (reverse %)))", "problem": 27, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn ! [seq] \n  (if (or (= 1 (count seq)) (empty? seq))\n    true\n    (and (= (last seq) (first seq)) (! (-> seq rest butlast)))\n   )\n )", "problem": 27, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [s]\n  (= (apply str s) \n     (apply str (reverse s))))", "problem": 27, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [coll]\n  (= (apply str coll) (apply str (reverse coll))))", "problem": 27, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51dba0d0e4b0e067a9bbadca"}, {"code": "(fn [coll] (reduce #(and %1 %2) (map (partial apply =) (map list coll (reverse coll)))))", "problem": 27, "user": "51da565ae4b02ceefd947765"}, {"code": "#(= % ((if (string? %) (partial apply str) identity) (reverse %)))", "problem": 27, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn palindrom\n  [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "51d1ef6ee4b0d13b04db0d92"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn palin-test [w] (if (< (count w) 2)\n\ttrue\n\t(if (not= (first w) (last w))\n\t\tfalse\n\t\t(palin-test (butlast (drop 1 w))))))", "problem": 27, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn palindrome [word]\n    (if (or (= 0 (count word)) (= 1 (count word)))\n      true\n      (if (= (take 1 word) (take-last 1 word))\n        (palindrome (drop-last 1 (drop 1 word)))\n        false)))", "problem": 27, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn pa [se]\n (= (seq se) (reverse se))  \n)", "problem": 27, "user": "51dc0ed1e4b09c47a74ce105"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51da5552e4b02ceefd947764"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51dbba34e4b0e067a9bbadce"}, {"code": "(fn [a] (= ((fn [l] (if (string? l) (clojure.string/reverse l) (reverse l))) a) a))", "problem": 27, "user": "51db27dbe4b094966a2cd688"}, {"code": "(fn [s] (= (if (string? s) (apply str (reverse s)) (reverse s)) s))", "problem": 27, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x) )))", "problem": 27, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [seq]\n  (if (string? seq) \n    (= seq (apply str (reverse seq)))\n      (= seq (reverse seq))))", "problem": 27, "user": "51daa721e4b02ceefd94776f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d11f5de4b067c365486360"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51e00020e4b01188f0627534"}, {"code": "#(= (seq %)\n    ((comp reverse seq) %))", "problem": 27, "user": "51df505be4b01188f062752a"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51d9eb05e4b02ceefd947755"}, {"code": "#(= (apply str %)  (apply str (reverse %)))", "problem": 27, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [x] (= x (if (string? x)\n               (apply str (reverse x))\n               (reverse x))))", "problem": 27, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn pal ([ c ] (and (= (first c) (last c)) (or (empty? c) (pal (drop-last (rest c))) ) ) ) )", "problem": 27, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51dc1190e4b09c47a74ce106"}, {"code": "(fn [x] \n  (reduce (fn  [b1 b2] ( and b1 b2))\n   (map = x (reverse x))\n   )\n  )", "problem": 27, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [x]\n  (let [a (first x) z (last x)]\n    (if (empty? x) true\n      (if (= a z)\n        (recur (rest (drop-last x)))\n        false))))", "problem": 27, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "51e24a04e4b01e5198146430"}, {"code": "#(= %1 (if (string? %1) (clojure.string/reverse %1) (reverse %1)))", "problem": 27, "user": "51d59859e4b01da06753aa92"}, {"code": "#(if (string? %) (= (apply str (reverse %)) %)\n    (= (reverse %) %))", "problem": 27, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51e0198ee4b01188f0627539"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [coll]\n  (if (string? coll)\n\t(= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))", "problem": 27, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))\n; we naively compare half of the pairs of elment e(i) and e(n-i-1)", "problem": 27, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [xs] (= (reverse xs) (seq xs)))", "problem": 27, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": ";#(= (reverse (reverse %)) (reverse %))\n(fn check [seq] (cond (or (= seq nil) (= '() seq)) true\n                       (= (first seq) (last seq)) (-> seq butlast next check)\n                       true false))", "problem": 27, "user": "51df825de4b01188f062752b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [s] (let [rv (reverse (vec s))\n              cnt (/ (count rv) 2)\n              s1 (take cnt (vec s))\n              s2 (take cnt rv)]\n          (= s1 s2 )) )", "problem": 27, "user": "5022292ee4b0846bc458ae46"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51789dfae4b03d69594194d7"}, {"code": "#(let [cnt (count %)\n       [s1 s2] (split-at (quot cnt 2) %)\n       s2 (if (odd? cnt) (rest s2) s2)]\n   (if (= (reverse s1) s2)\n     true\n    false))", "problem": 27, "user": "51e89428e4b006d205356a51"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5006c169e4b0678c553fc48d"}, {"code": "#(loop [s %]\n    (cond\n     (<= (count s) 1) true\n     (not= (first s) (last s)) false\n     :else (recur (rest (butlast s)))))", "problem": 27, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [x] (if (string? x) (= x (apply str (reverse x)))\n           (= x (reverse x))))", "problem": 27, "user": "51ddcd9ae4b0de53e6370c49"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn [s]\n\t(=\n\t(map vector (reverse s))\n \t(map vector s))\n)", "problem": 27, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn p? ([x] (p? x x))\n       ([x x]\n         (= (seq x) (reverse (seq x)))))", "problem": 27, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "51de3b42e4b0de53e6370c53"}, {"code": "#(do\n    (let [ v (vec %),\n           c (count v),\n            l (/ c 2.0)]\n        (loop [i 0]\n          (if (< i l)\n            (if (= (nth v i) (nth v (- c i 1)) ) (recur (inc i)) false )\n            true)\n          ) )\n  )", "problem": 27, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51618519e4b009fba0926e35"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51ec9114e4b069f463c22ccd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))", "problem": 27, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [s]\n(= (reverse s) (seq s))\n)", "problem": 27, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [xs]\n  (cond\n   \t(= nil (next xs)) true\n    (= (first xs) (last xs)) (recur (rest (butlast xs)))\n\t:else false))", "problem": 27, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn [s]\n\t(reduce #(and %1 %2) (map = s (reverse s))))", "problem": 27, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn pal? [coll]\n  (cond\n   (empty? coll) \n   \ttrue\n   (= (first coll) (last coll))\n   \t(pal? (butlast (rest coll)))\n   true\n   \tfalse))", "problem": 27, "user": "51efd397e4b0249c592fbdeb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f00589e4b0249c592fbdfb"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51ec0dd3e4b069f463c22cc7"}, {"code": "(fn [x] (if (string? x) (if (= (apply str (reverse x)) x) true false) (if (= (reverse x) x) true false)))", "problem": 27, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "(fn [s] (= (apply str (reverse s)) (apply str s)))", "problem": 27, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f04e89e4b0274c496158cd"}, {"code": "(fn [s] (if (or (= s (apply str (seq (reverse s)))) (= s (reverse s))) true false))", "problem": 27, "user": "51ed09b6e4b0bb507043158b"}, {"code": "(fn par [x]\n   (if (<= (count x) 1)\n   \ttrue\n\t\t(do\n\t\t\t(if (= (first x) (last x))\n                    (par (butlast (rest x)))\n                  false))))", "problem": 27, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(= (reverse %) (apply list %))", "problem": 27, "user": "51efdbbee4b0249c592fbdec"}, {"code": "#(= (apply str %1) (apply str (reverse %1)))", "problem": 27, "user": "51f42e66e4b0fca5e8b48230"}, {"code": "(fn palindrome?\n  [coll]\n  (if (seq coll)\n    (and (= (first coll) (last coll))\n         (palindrome? (butlast (next coll))))\n    true))", "problem": 27, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [n]\n    (if (<= (count n) 1)\n      true\n      (and (= (first n) (last n))\n           (recur (butlast (rest n))))))", "problem": 27, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn palindrome \n  [seq] \n  (if (= \n       (if (= java.lang.String (type seq))\n         (reduce str (reverse seq))\n         (reverse seq)) \n       seq)\n    true\n    false))", "problem": 27, "user": "51f297a3e4b0210f90e74552"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(= (seq %) (reverse(seq %)))", "problem": 27, "user": "50ecf888e4b01236b1d49835"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f629dde4b06ff1c25c52ba"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(loop [arr %]\n   (if (empty? arr)\n     true\n     (if (not= (first arr) (last arr))\n       false\n       (recur (drop 1 (drop-last 1 arr))))))", "problem": 27, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#( let [x (seq %1)] (= x (reverse x)))", "problem": 27, "user": "50655366e4b0c838e409d557"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [p]\n  (= p (if (string? p)\n         (apply str (reverse p))\n         (reverse p))))", "problem": 27, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn pal [t] (= (seq t) (reverse t)))", "problem": 27, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn pal [l] (or (<= (count l) 1) (and (= (first l) (last l)) (pal (rest (butlast l) ) )  )       ))", "problem": 27, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "513bafa4e4b04402f587b77c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f8f4d8e4b09be9c177e540"}, {"code": "(fn [x]\n  (let [reverse-val (if (string? x)\n                      (apply str (reverse x))\n                      (reverse x))]\n    (= reverse-val x)))", "problem": 27, "user": "51f82769e4b09be9c177e527"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f8397ce4b09be9c177e529"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [sq]\n  (cond \n    (nil? sq) true\n    (= (first sq) (last sq)) (recur (-> sq rest butlast))\n    :else false))", "problem": 27, "user": "51f984ece4b09be9c177e54d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "#(= (into () %) (into () (reverse %)))", "problem": 27, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "(fn [coll]\n  (let [p1 (take (quot (count coll) 2) coll)\n        p2 (drop (/ (count coll) 2) coll)]\n    (= p1 (reverse p2)))\n  )", "problem": 27, "user": "518279abe4b0353c468deb65"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "51fa9425e4b0f1313d4689e3"}, {"code": "(fn [x] (= (seq (reverse x)) (seq x)))", "problem": 27, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [var] (if (string? var) (= var (clojure.string/join (reverse var))) (= var (reverse var))))", "problem": 27, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "51fb178ce4b0f1313d4689f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51facf22e4b0f1313d4689f0"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "#(cond\n  (< (count %) 2) true\n  (not= (first %) (last %)) false\n  :else (recur (rest (butlast %))))", "problem": 27, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "51fc9251e4b0f1313d468a27"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "51f8277be4b09be9c177e528"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa3c137e4b081705acca193"}, {"code": "#(let [d %] (= (vec d) (vec (reverse d))))", "problem": 27, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [col]\n  \t(= (vec col) (reverse col)))", "problem": 27, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f171e7d535d64f603146452"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn [x] \n  ((fn foo[x y] \n   (if \n     (and \n      (empty? x) \n      (empty? y)) \n     true \n     (if\n       (or\n        (empty? x) \n        (empty? y)) \n       false\n       (if\n         (= (first x) (first y))\n         (foo (rest x) (rest y))\n         false))))\n  x\n  (reverse x)))", "problem": 27, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [s] (apply = (map #(= (first %1) (second %1)) (partition 2(interleave s (reverse s))) ) ) )", "problem": 27, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "(fn\n  ([xs]\n   (cond\n     (empty? xs) true\n     (empty? (rest xs)) true\n     :else (and (= (first xs) (last xs)) (recur (rest (reverse (rest (reverse xs)))) ))\n   )   \n  )\n)", "problem": 27, "user": "5200054de4b023d2eb508ca7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "519f0f81e4b087743fad219b"}, {"code": "( fn [x]\n   (= (set (map (fn[y z]\n      (= y z)\n    ) \n   x (reverse x)) ) #{true} )\n   \n )", "problem": 27, "user": "51ff6379e4b0f1313d468a98"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "51e6786ae4b0ab43cc26c216"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "50dfc83fe4b061dbdced7229"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51fbd873e4b0f1313d468a12"}, {"code": "(fn [inp] (let [s (seq inp)] (= s (reverse s))))", "problem": 27, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [x] (= (vec x) (reverse x)))", "problem": 27, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "(fn [lst]\n  (cond (< (count lst) 2) true\n        (not (= (first lst) (last lst))) false\n        :else (recur (rest (butlast lst)))))", "problem": 27, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [s]\n  (let [s (vec s)]\n  \t(= (reverse s) s)))", "problem": 27, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52000564e4b023d2eb508ca8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f0b3c88535d0136e6c22301"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52011018e4b0d7096e99ddaf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [xs] (if (empty? xs) true (and (= (first xs) (last xs)) (recur (rest (butlast xs))))))", "problem": 27, "user": "5204173be4b0fb7e47ea5216"}, {"code": "(fn [input]\n     (let [halves (take 2 (split-at (/ (count input) 2) input))\n                  fh (first halves)\n                  lh (last halves)\n                  com-pare (fn [x y] (->> (compare (into [] x) (into [] (reverse (into [] y)))) (= 0)))]\n       (if (=  (count fh) (count lh))\n           (do (com-pare fh lh))\n         (do (com-pare (butlast fh) lh))\n)))", "problem": 27, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn palindrom-detector [x]\n  (let [sequ (sequence x)]\n    (= sequ (reverse x))))", "problem": 27, "user": "5202c9b6e4b030ee0c5b2701"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(fn [sequ]\n  (let [s (seq sequ)]\n    (= s (reverse s)) ) )", "problem": 27, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn palindrome [S]\n  (= (seq S) (reverse S)))", "problem": 27, "user": "51f67858e4b06ff1c25c52c5"}, {"code": "#(let [total  (count %)\n       isodd  (odd? total)\n       nval   (/ (if isodd (dec total) total) 2)\n       s1     (take nval %)\n       s2     (take nval (reverse %))]\n   (= s1 s2))", "problem": 27, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(= (lazy-seq %) (reverse %))", "problem": 27, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(= (into () %1) (reverse (into () %1)) )", "problem": 27, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "5203bc5be4b0fb7e47ea5205"}, {"code": "#(let [rev (reverse %)]\n   (if (string? %)\n     (= % (apply str rev))\n     (= % rev)))", "problem": 27, "user": "52069fade4b0bf4f1882c82c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc5dfabe4b0ee37620e1800"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52077e37e4b03bd50ef5466c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "520797ebe4b03bd50ef5466d"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5207d70ae4b03bd50ef54675"}, {"code": "#(= 0 (count (filter false? (map identical? (seq %) (reverse %)))))", "problem": 27, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [x]\n\t(= (reverse (seq x)) (seq x)))", "problem": 27, "user": "51dd2ccfe4b0c33a4e1da400"}, {"code": "#(= (vec %) (rseq (vec%)))", "problem": 27, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "#(= (into '() %) (seq %))", "problem": 27, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn pal? [lst]\n  (if (not (= (first lst) (last lst)))\n           false\n           (if (or (= 0 (count lst)) (= 1 (count lst)))\n             true\n           (pal? (rest (drop-last lst))))))", "problem": 27, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(= (reduce str %) (reduce str (reverse %)))", "problem": 27, "user": "52090654e4b0e152394d76ee"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51f0ade4e4b0274c496158d9"}, {"code": "#(let [lst (apply list %)] (= lst (reverse lst)))", "problem": 27, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "52033e2ce4b030ee0c5b2716"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520b55e2e4b0b022ef140c82"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520bade3e4b0b022ef140c85"}, {"code": "(fn[l] (let [h (/ (count l) 2)]\n         (=\n           (reverse (drop-last h l))\n           (drop h l)\n          )\n       )\n)", "problem": 27, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "(fn [val]\n  (let [rev (reverse val)]\n    (= (clojure.string/join rev) (clojure.string/join val))\n    )\n  )", "problem": 27, "user": "51c15fe9e4b0c9c82288294c"}, {"code": "(fn [coll]\n  (if (= (reverse (seq coll)) (seq coll)) true false))", "problem": 27, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "(fn pali [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (pali (butlast (rest x)))\n      false)))", "problem": 27, "user": "5024d54fe4b07ca75732c81f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "520b67b5e4b0b022ef140c83"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [palindrome] (= palindrome\n                    (if (string? palindrome)\n                      (clojure.string/reverse palindrome)\n                      (reverse palindrome))))", "problem": 27, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [x]\n    (let [rc (reverse x)\n          n (count x)]\n      (every? identity\n        (map #(= (nth x %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x](= (seq x) (reverse x)))", "problem": 27, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "5184df3ee4b02826a645f39b"}, {"code": "(fn palindrome? [l] \n                        (if (< 2 (count l))\n\t                        (if (= (first l) (last l))\n\t                          (palindrome? (rest (butlast l)))\n\t                          false \n                           )\n\t                        true\n                         )     \n  )", "problem": 27, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [x] (if (instance? java.lang.String x)\n          (= x (clojure.string/reverse x))\n          (= x (reverse x))))", "problem": 27, "user": "505193b7e4b0a561d07d8f08"}, {"code": "#(= (apply str %)\n    (apply str (reverse %)))", "problem": 27, "user": "51b965dde4b0e871ca495905"}, {"code": "#(loop [x %] (if (< (count x) 2) true (if (not (= (first x) (last x))) false (recur (next (reverse (next x)))))))", "problem": 27, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "(fn findpals [pal]\n  (\n   if (< (count pal) 2)\n   true\n   (if\n    (not\n     (= (first pal) (last pal))\n    )\n    false\n    (\n     findpals (rest\n               (drop-last pal)\n              )\n     )\n    )\n  )\n)", "problem": 27, "user": "4f718ce5e4b07046d9f4f00d"}, {"code": "(fn pali? [x] \n  (if (= (last x) (first x)) \n    (if (= 0 (count x)) \n      true \n      (pali? (butlast (rest x))))\n    false )\n  )", "problem": 27, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn [x]\n  (if (= (class x) java.lang.String)\n  (= x (apply str (reverse x)))\n  (= x (reverse x))))", "problem": 27, "user": "5212a062e4b0d32679a50641"}, {"code": "(fn [x]\n         (loop [f 0 l (- (count x) 1)]\n           (cond\n            (> f l) true\n            (= (nth x f) (nth x l)) (recur (inc f) (dec l))\n            :else\n            false)))", "problem": 27, "user": "520332f7e4b030ee0c5b2714"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52104003e4b080a8d9b9d637"}, {"code": "(fn [x]\n(loop [toreverse x reversed []]\n\t(if (empty? toreverse) (= reversed (seq x))\n\t(recur (rest toreverse) (cons (first toreverse) reversed)))))", "problem": 27, "user": "521368ece4b0d32679a50659"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [l]\n  (= (seq l) (seq (reverse l)))\n  )", "problem": 27, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [xs]\n  (if (= (first xs) (last xs))\n    true\n    false))", "problem": 27, "user": "521392bce4b0d32679a5065e"}, {"code": "#(= (apply str (reverse %)) (apply str %) )", "problem": 27, "user": "5213caeee4b0a98dd8fc4bd5"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5201572be4b0d7096e99ddbb"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [x] (cond (string? x)(= x (apply str (reverse x)))\n              :else (= x (reverse x))))", "problem": 27, "user": "52153bdde4b0961f15ac4daa"}, {"code": "#(empty? (filter (fn [[a b]] (not= a b)) (zipmap %(reverse %))))", "problem": 27, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn isPalen [xs] (if (< (count xs) 2) true\n                                      (if (= (first xs) (last xs))\n                                          (isPalen (drop-last (drop 1 xs)))\n                                          false)))", "problem": 27, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "#(= (seq %) (into () %))", "problem": 27, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520242bae4b030ee0c5b26e3"}, {"code": "#(let [s (vec %)] (= (reverse s) s))", "problem": 27, "user": "52105865e4b080a8d9b9d639"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [x]\n  (= (seq x) (seq (reverse x))))", "problem": 27, "user": "50d5c19ce4b0159555a1fc61"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "52173464e4b082aa80a88c75"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5216933be4b000d124d989cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "#(= (reverse %) (apply list %))", "problem": 27, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe8a39ee4b07c9f6fd12c60"}, {"code": "(fn [sqnc]\n  (loop [lista (seq sqnc)]\n    (if (not (not-empty lista)) true\n\t(if (= (first lista) (last lista))\n          (recur (rest (drop-last lista)))\n          false))))", "problem": 27, "user": "5213348ae4b0d32679a50652"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [palendrome] (= (first palendrome) (last palendrome)))", "problem": 27, "user": "51aee76ce4b09397d5109796"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "520693e1e4b0bf4f1882c829"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5216569de4b0bf4bffd29cc3"}, {"code": "(fn [s] \n  (loop [xs s]\n    (if (empty? xs) true (and (= (first xs) (last xs)) (recur (rest (butlast xs)))))))", "problem": 27, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "521a4ff5e4b0c4ef0be83004"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(= (reverse %) ((comp reverse reverse) %))", "problem": 27, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn [xs]\n  (= (reverse (into [] xs)) (into [] xs)))", "problem": 27, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "510ee996e4b07438aa321462"}, {"code": "(fn palindrome?\n  [s]\n  (if (= (reverse s) (seq s))\n    true\n    false))", "problem": 27, "user": "521b339fe4b0c4ef0be83031"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [x] (let [x (apply vector x)]\n          (= x (reverse x))))", "problem": 27, "user": "521b3f2fe4b0c4ef0be83034"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [s] (= (vec s) (reverse (vec s))))", "problem": 27, "user": "521dceeae4b050d5da042802"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn pal [x]\n   (if (and \n        (= (first x) (last x) )\n        (if (> (count x ) 1)\n          (pal (subvec (vec x) 1 (- (count x) 1) )) true )\n        )\n        true false )\n )", "problem": 27, "user": "521f0106e4b0e6c71e0c0bc4"}, {"code": "(fn [coll] (= (map identity coll) (reverse coll)))", "problem": 27, "user": "521d2564e4b01d5d410d8da8"}, {"code": "(fn palindrome-detector-solution\n  [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "50c113bee4b096f585049c37"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn foo [lst]\n  (if (empty? lst)\n    true\n    (let [s (first (reverse lst))]\n      (if (= s (first lst))\n        (foo (reverse (rest (reverse (rest lst)))))\n        false))))", "problem": 27, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [xs]\n  (= (reverse (reverse xs)) (reverse xs)))", "problem": 27, "user": "51c20b14e4b0d204dbe2ca1b"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "(fn [a] (= a ((if (string? a) clojure.string/reverse reverse) a)))", "problem": 27, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "52221b07e4b0e6a83c8925ef"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "5220d1b6e4b0e6a83c8925ad"}, {"code": "#(not (some false? (map = % (reverse %))))", "problem": 27, "user": "51787832e4b03d69594194d3"}, {"code": "(fn [s] (= s (#(if (string? %) (apply str (reverse %)) (reverse %)) s)))", "problem": 27, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "521b17c5e4b0c4ef0be83027"}, {"code": "(fn palyndrome? [x]\n  ((fn reversable [s]\n     (if (or (empty? s) (= (count s) 1))\n       true\n       (if (= (first s) (last s))\n         (reversable (butlast (rest s)))\n         false))) (seq x)))", "problem": 27, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51dfb9e2e4b01188f0627531"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn [x] \n  (=  (apply str (reverse x) ) (apply str x) ))", "problem": 27, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn p [s]\n  (if (< (count s) 2) true \n    (if (not (= (first s) (last s))) false\n       (p (butlast (rest s))) )))", "problem": 27, "user": "52247d56e4b01819a2de42db"}, {"code": "(fn [x] (if (< (count x) 2) true (if (= (first x) (last x)) (recur (reverse (rest (reverse (rest x))))) false)))", "problem": 27, "user": "52229374e4b0e6a83c892600"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "522454f4e4b01819a2de42d3"}, {"code": ";; #(= (reverse %1) ((comp reverse reverse) %1))\n\n;; even better:\n#(= (reverse %1) (seq %1))", "problem": 27, "user": "52251473e4b01819a2de42f7"}, {"code": "(fn is-palindrome [xs]\n  (= (reverse xs) (seq xs))\n)", "problem": 27, "user": "4fb710f4e4b081705acca2cd"}, {"code": "#(let\n   [c (count %)\n    split (split-at (/ c 2) %)\n    head (take (quot c 2) (first split))\n    tail (second split)]\n   (= head (reverse tail)))", "problem": 27, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5225a0f5e4b01819a2de430e"}, {"code": "(fn [x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(=\n  (reverse (seq %1))\n  (seq %1)\n)", "problem": 27, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "521dad9be4b050d5da0427f9"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "51843616e4b02826a645f398"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "52253004e4b01819a2de42fa"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [x] (= (reverse x) (into [] x)))", "problem": 27, "user": "522404d8e4b01819a2de42c0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5226f2a1e4b04e78ff2e1999"}, {"code": "(fn contains-e [x]\n   (if (empty? x) false\n     (if (some #(= (first x) %) (rest x)) true\n       (recur (rest x)))))", "problem": 27, "user": "5226ef37e4b04e78ff2e1997"}, {"code": "#(= (reverse %) \n    (reverse (reverse %)))\n\n#_(fn [x]\n  (loop [n (dec (count x))\n         np 1\n         t (= (nth x 0)\n              (nth x n))]\n    (if (and t (<= np n))\n      (recur n\n             (inc np)\n             (= (nth x np)\n                (nth x (- n np))))\n      t)))", "problem": 27, "user": "51e5a627e4b0efabf93c02db"}, {"code": "#(reduce (fn [ a b ] (and a b))\n         (map =\n              % (reverse %)))", "problem": 27, "user": "52286b19e4b0186687e23a7e"}, {"code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "problem": 27, "user": "51eee71ae4b0871fa145d992"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [xs]\n  (loop [x xs]\n\t(if (and (seq x) (> (count x) 1))\n      (if (= (first x) (last x))\n        (recur (butlast (rest x)))\n        false)\n      true)))", "problem": 27, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [s]\n  (= s (if (string? s) (apply str (reverse s)) (reverse s))))", "problem": 27, "user": "5225666be4b01819a2de4300"}, {"code": "(fn [i] (= (seq i) (reverse i)))", "problem": 27, "user": "5228457ee4b0186687e23a76"}, {"code": "(fn [l]\n  (if (= (type l) java.lang.String)\n    (= (apply str (reverse l)) l)\n\t(= (reverse l) l)))", "problem": 27, "user": "522a1248e4b0590a43906cf3"}, {"code": "(fn [xs]\n  (let [n (quot (count xs) 2)\n        l (take n xs)\n        r (reverse (take-last n xs))]\n    (= l r)))", "problem": 27, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn f [x] (= (reverse (take (int (/ (count x) 2) ) x)) (take-last (int (/ (count x) 2) ) x)))", "problem": 27, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn palindrome [x]\n  (let [a (seq x)\n        r (reverse a)]\n    (= a r)))", "problem": 27, "user": "4e4d4841535dc968683fc4e2"}, {"code": "(fn [x]\n  (loop [forward x backward (reverse x)]\n    (if (not (seq forward))\n      true\n      (if (not (= (first forward) (first backward)))\n        false\n        (recur (rest forward) (rest backward))))))", "problem": 27, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(=\n  (let [reversed (reverse %)]\n    (if (char? (first reversed))\n      (apply str reversed)\n      reversed)) %)", "problem": 27, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [str] (= (reverse str) (reverse (reverse str))))", "problem": 27, "user": "522d0360e4b0806774ddfef7"}, {"code": "#((fn palind [L LR] (if (empty? L) true (if (= (first L) (first LR)) (recur (rest L) (rest LR)) false))) % (reverse %))", "problem": 27, "user": "522dd30ee4b0a102974208c3"}, {"code": "(fn drome [x]\n  (if (= x '())\n    true\n    (if (= (first x) (last x))\n      (drome (rest (take (dec (count x)) x)))\n      false\n      )\n   )\n  )", "problem": 27, "user": "52127ee4e4b0d32679a5063c"}, {"code": "(fn [x]\n  (= (apply str x) \n     (apply str (reverse x))))", "problem": 27, "user": "4fea8741e4b0140c20fb9c09"}, {"code": "(fn pali [x] \n  \t(if (empty? x)\n      \ttrue\n\t\t(every? true? [(= (first x) (last x)) (pali (butlast (rest x)) )])\n      )\n  )", "problem": 27, "user": "522d3a16e4b0e26240291d50"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "522ef7a2e4b01e6a0e6e5daf"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "522f988be4b032bbe3424168"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52295917e4b04c906c9c6a6f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52292ce9e4b04c906c9c6a67"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "523089f8e4b0035e815da388"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52308649e4b0035e815da387"}, {"code": "#(let [s (split-at (/ (count %) 2) %)]\n   (= (reverse (take (count (second s)) (first s))) (second s)))", "problem": 27, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn palin \n  [word]\n  (or (= (count word) 0 ) \n      (and (= (first word) (last word) )\n           (palin (drop 1 (drop-last 1 word) ) ) ) ) )", "problem": 27, "user": "5230d490e4b0035e815da396"}, {"code": "#(let [n  (quot (count %) 2) c1 (take n %) c2 (reverse(take-last n %))] (= c1 c2))", "problem": 27, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn palindrome? \n   [lst]\n   (= lst\n      (if (string? lst)\n        (apply str (reverse lst))\n        (reverse lst)\n        )\n \n      )\n  )", "problem": 27, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn\n  [pal-cand]\n  (= (seq pal-cand) (reverse (seq pal-cand))))", "problem": 27, "user": "510591dde4b06d28cacc92eb"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "51aefceee4b09397d5109797"}, {"code": "#(= (reverse (seq %)) (seq %) )", "problem": 27, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [inputColl]\n\t(let [n (quot (count inputColl) 2)]\n\t      (= (take n inputColl) (take n (reverse inputColl)))))", "problem": 27, "user": "5227eacee4b0186687e23a5e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "522e4baae4b01cdb292c5f00"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "522fdff7e4b032bbe342416c"}, {"code": "(fn pali? [s]\n  (cond\n   (empty? s) true\n   (= 1 (count s)) true\n   :else (and\n          (= (first s) (last s))\n          (pali? (rest (drop-last s)))\n          )\n   )\n )", "problem": 27, "user": "5231c38fe4b0e2e8de81d1f8"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "522e8451e4b01cdb292c5f06"}, {"code": "(fn[x]\n   (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn palindrome?\n  [input]\n  (if (string? input)\n    (= input\n       (apply str (reverse input)))\n    (= input\n       (reverse input))))", "problem": 27, "user": "5232d104e4b035af41902a96"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn palin [x]\n  (println x)\n  (if (not (empty? x)) \n    (and \n      (= (first x) (last x)) \n      (palin (vec (drop-last 1 (rest x)))))\n    true))", "problem": 27, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5230ba23e4b0035e815da393"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5232d047e4b035af41902a95"}, {"code": "(fn ! [s]\n  (if (seq s)\n    (if (= (first s) (last s))\n      (! (rest (butlast s)))\n      false)\n    true))", "problem": 27, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn [xs]\n\t (loop [xs xs]\n\t       (cond (empty? xs) true\n\t\t     (not (= (first xs) (last xs))) false\n\t\t     :else (recur (drop 1 (drop-last xs))))))", "problem": 27, "user": "50467ee2e4b011c5dfee7723"}, {"code": "#(loop [sequence %]\n    (if (empty? sequence)\n      true\n      (if (= (first sequence) (last sequence))\n        (recur (rest (butlast sequence)))\n        false)))", "problem": 27, "user": "523288fee4b035af41902a88"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52323a4ae4b035af41902a79"}, {"code": "#(or (empty? %) (and (= (first %) (last %)) (recur (butlast (rest %)))))", "problem": 27, "user": "510fe537e4b04c71fce993dd"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5234f716e4b05e80434a505f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5235a902e4b0a643f2dcb750"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5224e784e4b01819a2de42f1"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "52361d84e4b05f3be1c7c8e5"}, {"code": "(fn [as]\n  (let [as (seq as)]\n    (= as (reverse as))))", "problem": 27, "user": "516abecae4b081287f204e9f"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5220909fe4b0e6a83c89259f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "520f2265e4b0101e4be6fce7"}, {"code": "(fn pal [x] (if (> 2 (count x)) true (if (= (first x) (last x)) (pal (rest (drop-last x))) false)))", "problem": 27, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "513953f1e4b0a5db03d727e2"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "52373f36e4b0477af6280328"}, {"code": "(fn [coll] \n  (let [half-len+ (-> (count coll) int inc)]\n   (->> (take half-len+ coll)\n        (map = (reverse coll))\n        (every? true?))))", "problem": 27, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52386881e4b0fae3832e9a00"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "522f39a8e4b032bbe3424159"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4e57ecc4535d8a8b8723a28b"}, {"code": "#(=  (seq %) (reverse %))", "problem": 27, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(if (= % (if (string? %) (apply str (reverse %)) (reverse %))) true false)", "problem": 27, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn findpal [coll]\n  (= (reverse coll) (list* coll)))", "problem": 27, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "(fn [n] (cond\n         (<= (count n) 1) true\n         (= (first n) (last n)) (recur (rest (butlast n)))\n         :else false))", "problem": 27, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn pal [input] (= (seq input) (reverse (seq input))))", "problem": 27, "user": "5239caa6e4b0d705d026ef27"}, {"code": ";#(= (apply str (reverse %)) (apply str %))\n#(= (reverse %) (seq %))", "problem": 27, "user": "5213d81de4b0961f15ac4d73"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [p] (= (reverse p) (reverse (reverse p))))", "problem": 27, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4f04e8b0535dcb61093f6be9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn ck [xs]\n  (println xs (count xs))\n  (if (> 2 (count xs))\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (ck (drop 1 (drop-last xs))))))", "problem": 27, "user": "52387f46e4b0fae3832e9a07"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [sq]\n   (loop [s sq]\n      (if (or\n            (= 0 (count s))\n            (= 1 (count s)))\n         true\n         (if (= (first s) (last s))\n            (recur (butlast (rest s)))\n            false))))", "problem": 27, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn palindrome [x]\n  (cond \n  (= 0 (count x)) true\n  (= (first x) (last x)) (recur (rest (butlast x)))\n  :else false\n  )\n )", "problem": 27, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "523c61b2e4b07becd5be2220"}, {"code": "#(let [listified (into '() %)] (= (reverse listified) listified))", "problem": 27, "user": "523b4e91e4b07becd5be21ef"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5238ca2de4b0d705d026eef6"}, {"code": "#(loop [s %]\n  (cond\n    (nil? s) true\n    (not= (first s) (last s)) false\n    :else (recur (next (butlast s)))\n  )\n)", "problem": 27, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [x] (loop [s (seq x) n (- (/ (count (seq x)) 2) 1)] (if (< n 0) true (if (not= (nth s n) (nth (reverse s) n)) false (if (= n 0) true (recur s (- n 1)))))))", "problem": 27, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "523dd963e4b06956f8342ca1"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "523b1988e4b02f719975bdbc"}, {"code": "#(=\n \t%\n  (if (string? %)\n    (apply str (reverse %))\n    (reverse %)\n    )\n  )", "problem": 27, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "50aa60bee4b056ee01935865"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "problem": 27, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn pal [s]\n  (= (first s) (last s)))", "problem": 27, "user": "52401a65e4b0ad64fa010306"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5230793be4b0035e815da383"}, {"code": "(fn [seq]\n    (if (string? seq)\n      (= (clojure.string/reverse seq) seq)\n      (= (reverse seq) seq)))", "problem": 27, "user": "511e763ce4b03e81d390ac29"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "5240e8ebe4b0ad64fa010349"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "522f483ce4b032bbe342415a"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5240512ee4b0ad64fa010319"}, {"code": "#(= (take (/ (count %) 2) %) (reverse (take-last (/ (count %) 2) %)))", "problem": 27, "user": "5241fe85e4b076e5d3121f42"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "523bde95e4b07becd5be2202"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [col] \n  (if (string? col)\n    (= col (reduce str (reverse col)))\n    (= col (reverse col))))", "problem": 27, "user": "518d1b5be4b070277754617b"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "5242d5c3e4b076204b44fa95"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "#(loop [palindrome %]\n   (cond \n    (empty? palindrome) true\n    (not= (first palindrome) (last palindrome)) false\n    :else (recur (-> palindrome rest butlast))))", "problem": 27, "user": "5244ca26e4b0d8acf9ed6abe"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn ! [x] (and (= (first x) (last x)) (or (< (count x) 2) (! (rest (butlast x))))))", "problem": 27, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5245af03e4b08ba239308124"}, {"code": "(fn [s]\n  (if (next s)\n    (and (= (first s) (last s)) \n        (recur (rest (reverse (rest s)))))\n    true))", "problem": 27, "user": "5245e25ae4b09dbe66b56176"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn ! [x]\n   (if (nil? x)\n     true\n     (if (= (first x) (last x))\n       (! (butlast (rest x)))\n       false))\n)", "problem": 27, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [c] (cond (string? c) (= (apply str (reverse c)) c) :default (= (reverse c) c)))", "problem": 27, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "524717a9e4b05ef8e38e6352"}, {"code": "(fn [seq]\n  (= seq (if (string? seq) (apply str (reverse seq)) (reverse seq))))", "problem": 27, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52463059e4b09dbe66b56198"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn [l] (= (apply list l) (reverse l)))", "problem": 27, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [coll]\n  (let [s-coll (seq coll)]\n    (= s-coll (reverse s-coll))))", "problem": 27, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn palindrome? [seq]\n  (let [rev (reverse seq)]\n    (= seq (if (string? seq)\n             (apply str rev)\n             rev))))", "problem": 27, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52474de3e4b05ef8e38e6360"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52485f02e4b05ef8e38e63d3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [coll] \n    (let [[a b] (split-at (int (/ (count coll) 2)) coll)] \n      (if (even? (count coll))\n        (= a (clojure.core/reverse b))\n        (let [B (clojure.core/reverse (rest b))] \n          (= a B)\n        )\n      )\n    )\n  )", "problem": 27, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "524903e7e4b05ef8e38e640d"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "5244cf39e4b0d8acf9ed6ac5"}, {"code": "(fn [s]\n  (or (= s (reverse s))\n      (= s (apply str (reverse s)))))", "problem": 27, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "#(every? true? (map (fn [x y] (= x y)) % (reverse %)))", "problem": 27, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [l] (= (reverse l) (seq l)))", "problem": 27, "user": "4ea03f70535d7eef308072a1"}, {"code": "(fn[palindrome]\n(= (seq palindrome) (reverse palindrome))\n)", "problem": 27, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [s] (= (apply str (reduce conj () s)) (apply str s)))", "problem": 27, "user": "5242e1dae4b076204b44fa96"}, {"code": "(fn [x] (= (vec x) (rseq (vec x))))", "problem": 27, "user": "520a9897e4b01da9d47a99e1"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "524af042e4b09eba1c0223ba"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "523327fce4b0f0b72fabf3fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "#(= (reverse(reverse %)) (reverse %))", "problem": 27, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn pali [x] \n  \n  (cond  (empty? x) true\n         (= (first x) (last x))  (pali  (rest (butlast x)))\n         :else false\n         )\n  )", "problem": 27, "user": "524ac536e4b09eba1c0223a1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn pali [x]\n  (let [y (reverse x)]\n    (let [z (for [i x] i)]\n    (= z y)\n  ))\n)", "problem": 27, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn (\n  [x]\n  (if (= [] x)\n  true\n  (let [y (first x) z (last x)]\n  (if (not (= z y))\n  false\n  (recur (rest (reverse (rest x))))))\n  )))", "problem": 27, "user": "5244380fe4b076204b44fb12"}, {"code": "#(= (vec (reverse %)) (vec %))", "problem": 27, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "(fn [what] (= (reverse what) ((comp reverse reverse) what)))", "problem": 27, "user": "524c72dce4b09eba1c022407"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn pal [check]\n   (if  (or (= 1 (count check)) (= 0 (count check)))\n    true\n    (if (= (first check) (last check))\n      (pal (drop-last (rest check)))\n      false\n      )\n    )\n)", "problem": 27, "user": "511d4a52e4b022853b0e07a1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524da3a5e4b0a16e35cf6df3"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "524e8ee6e4b0541d1855b7e2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn pCheck [x]\n\t(if (= 0 (count x))\n\t\ttrue\n\t\t(if (= (first x) (last x))\n\t\t\t(pCheck (rest (butlast x)))\n\t\t\tfalse\n\t\t)\n\t)\n)", "problem": 27, "user": "524ed632e4b0541d1855b7f2"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "524ad140e4b09eba1c0223a9"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "524da51ee4b0a16e35cf6df4"}, {"code": "(fn palin ([x] (palin x 0 (dec (count x)))) ([x, min, max] (if (> min max) true (if (= (nth x min) (nth  x max)) (palin x (inc min) (dec max)) false))))", "problem": 27, "user": "524eebb0e4b0541d1855b7f7"}, {"code": "(fn [v] (= (seq v) (reverse v)))", "problem": 27, "user": "524feb3fe4b0541d1855b81f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "524f61bee4b0541d1855b80f"}, {"code": "(fn p [c]\n\t(if (> 2 (count c)) \n\t\ttrue\n\t\t(if (= (first c) (last c))\n\t\t\t(p (rest (drop-last c)))\n\t\t\tfalse)))", "problem": 27, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52500c9ae4b0541d1855b825"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn palindrome [l]\n\t(if (or (= (count l) 1) (= (count l) 2))\n    \ttrue\n    \t(if (= (first l) (last l))\n        \t(palindrome (rest (reverse (rest l))))\n        \tfalse\n        )\n    )\n)", "problem": 27, "user": "5250af8be4b0541d1855b83c"}, {"code": "(fn palindromi [c] (if (empty? c) true (and (= (first c) (last c)) (palindromi (rest (butlast c))))))", "problem": 27, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn [xs]\n  (let [ front     (first xs)\n         middle (butlast (rest xs))\n         end       (last xs)]\n    (cond (or (nil? front) (nil? end)) true\n          (not= front end)             false\n          :else (recur middle))))", "problem": 27, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn [x]\n  (let [y (into [] (reverse x))]\n    (let [z (into [] (reverse y))]\n      (if (= y z)\n        true\n        false\n        )\n      )\n    )\n  )", "problem": 27, "user": "52420e2fe4b076e5d3121f48"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (and a b))\n  (map #(= (first %) (second %))\n       (partition 2 (interleave coll (reverse coll))))))", "problem": 27, "user": "5252ee94e4b0541d1855b8db"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "524cd06ae4b0752c4cb68cca"}, {"code": "(fn [x]\n  (if (= (reverse (seq x)) (seq x)) true false))", "problem": 27, "user": "5252ed18e4b0541d1855b8d9"}, {"code": "(fn is-palindrome? [seq]\n  (if (string? seq) (= seq (apply str (reverse seq))) (= seq (reverse seq))))", "problem": 27, "user": "51269362e4b083bb8f88cf09"}, {"code": "#(= % (if(string? %)(apply str (reverse %))(reverse %)))", "problem": 27, "user": "524fafb3e4b0541d1855b817"}, {"code": "(fn [x]\n  (let [s (reduce conj nil x)]\n    (if (string? x)\n      (= (clojure.string/join \"\" s) x)\n      (= s x))))", "problem": 27, "user": "52526161e4b0541d1855b8a6"}, {"code": "(fn foo [x] (or (empty? x)\n              (if-not (= (first x) (last x))\n                false\n                (foo (take (dec (count (rest x))) (rest x))))))", "problem": 27, "user": "525372ade4b0541d1855b8f3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn isPalindrome [p] \n\t\t\t((fn palindrome [x y] \n\t\t\t\t(if (nil? x)\n\t\t\t\t\ttrue\n\t\t\t\t\t(and (= (first x) (first y)) (palindrome (next x) (next y))))) p (reverse p)))", "problem": 27, "user": "522ff396e4b032bbe3424172"}, {"code": "(fn [list]\n  (loop [coll (into () list) newcoll (vector)]\n    (if (or (nil? coll) (empty? coll))\n      (= newcoll (vec list))\n      (recur (next coll) (conj newcoll (first coll))))))", "problem": 27, "user": "524e9918e4b0541d1855b7e6"}, {"code": "(fn [x]\n  (= (seq x)\n     (into () (seq x))))", "problem": 27, "user": "52527192e4b0541d1855b8af"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a7ff35e4b08d8ec191b804"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5252b59de4b0541d1855b8cf"}, {"code": "#(letfn [(match? [x]\n                 (cond (< (count x) 2) true\n                       (= (first x) (last x)) (match? (rest (drop-last x)))\n                       :else false))]\n   (match? %))", "problem": 27, "user": "52530b4be4b0541d1855b8e4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51c89746e4b07ef393169e59"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52537b67e4b0541d1855b8f9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5224060de4b01819a2de42c3"}, {"code": "(fn [seq] \n  (every? true? (map = (reverse seq)  seq))\n)", "problem": 27, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn pal-detect [s] (if (empty? s) \n                        true\n                        (if (identical? (first s) (last s))\n                          (pal-detect (drop 1 (butlast s)))\n                          false)))", "problem": 27, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "523de33de4b06956f8342ca8"}, {"code": "#(let [length (+ (quot (count %) 2) 1)\n        p1 (take length %)\n      \tp2 (take length (reverse %))]\n                                  (= p1 p2))", "problem": 27, "user": "5251b11be4b0541d1855b87b"}, {"code": "(fn [x]\n           (let [half-point (int (/ (count x) 2))\n                 length     (count x)]\n             (loop [idx 0]\n                   (if (> idx half-point)\n                       true\n                     (if (= (nth x idx) (nth x (- length idx 1)))\n                         (recur (inc idx))\n                       false)))))", "problem": 27, "user": "5256cd77e4b0541d1855ba39"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51d8f711e4b02ceefd947748"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn palin? [x]\n  (let [x (vec x)]\n    (or\n      (<= (count x) 1)\n      (and\n        (= (first x) (last x))\n        (palin? (butlast (rest x)))))))", "problem": 27, "user": "504ece87e4b069badc5a33ce"}, {"code": "(fn [sq] (= (vec sq) (reverse (vec sq))))", "problem": 27, "user": "4ef7a483535dced4c769f258"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "524fafdfe4b0541d1855b818"}, {"code": "(fn [xs]\n  (let [halfSize (count xs)]\n    (loop [xl xs xr (reverse xs) c halfSize]\n      (if (= 0 c) true\n      (if (not= (first xl) (first xr)) false\n      (recur (rest xl) (rest xr) (dec c)))))))", "problem": 27, "user": "523e12bde4b09833704079a2"}, {"code": "#(let [x (seq %)]\n   (= x\n      (reverse x)))", "problem": 27, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn pal [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (pal (rest (butlast x)))\n      false\n      )\n    )\n  )", "problem": 27, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "52215fe1e4b0e6a83c8925cf"}, {"code": "(fn [n] \n  (= (seq n) (reverse n))\n  )", "problem": 27, "user": "50aca92ee4b071b89ef26232"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [s]\n  (let [\n      half (/ (count s) 2)\n      firsthalf (take half s)\n      secondhalf (take-last half s)\n      ] (= firsthalf (reverse secondhalf))))", "problem": 27, "user": "4fad20cfe4b081705acca235"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [x] (every? identity (map = x (reverse x))))", "problem": 27, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))));", "problem": 27, "user": "4e78c2ba535db95036265723"}, {"code": "#(let [half (quot (count %) 2)]\n   (=\n    (take half %)\n    (reverse (take-last half %))))", "problem": 27, "user": "525431dfe4b0541d1855b970"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5234870ee4b05e80434a505c"}, {"code": "#( if (string? %) \n     (= % (apply str (reverse %))) \n     (= % (reverse %))\n     )", "problem": 27, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn palindrome? [s]\n  (if (or (empty? s)\n          (= (count s) 1))\n    true\n    (if (= (first s)\n           (last s))\n      (palindrome? (drop-last (rest s)))\n      false)))", "problem": 27, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [_] (= 0 (rand-int 2))) ;me no like parens :(", "problem": 27, "user": "525b1e15e4b0cb4875a45d08"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [coll] (every? true? (map = (reverse coll) coll)))", "problem": 27, "user": "525d44e8e4b0cb4875a45d6e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "525636dfe4b0541d1855ba0d"}, {"code": "(fn palindrome [x] \n  (let [len (count x) half (quot len 2)]  \t\n   \t  (= (reverse (take half x)) (drop (+ half (if (odd? len) 1 0)) x))))", "problem": 27, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn palindrome? [input] \n  (let [sequence (seq input)]\n    (condp = (count sequence)\n    0 true\n    1 true\n    (and (= (first sequence) (last sequence)) \n         (palindrome? (-> sequence rest butlast))))))", "problem": 27, "user": "525dd767e4b0cb4875a45d88"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4e0e6736535d04ed9115e7bb"}, {"code": "(fn pal? [coll] (= (reverse coll) ((comp reverse reverse) coll)))", "problem": 27, "user": "50007353e4b0678c553fc40a"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "51622fb8e4b009fba0926e3f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "525f66c6e4b03e8d9a4a7007"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "524f0deee4b0541d1855b7fd"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "5130cb2ae4b08c712d3fae3b"}, {"code": "(fn [n] (= (vec n) (reverse (vec n))))", "problem": 27, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "525d413be4b0cb4875a45d65"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525d4111e4b0cb4875a45d64"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "#(= (vec %)(rseq (vec %)))", "problem": 27, "user": "525d5329e4b0cb4875a45d75"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn pal [x] (= (seq x) (reverse (seq x))) )", "problem": 27, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn myfn [s]\n\t(reduce\n    \t(fn [x y]\n          \t(and x (= (nth s y) (nth s (- (count s) (inc y))))\n            )\n        )\n     \ttrue\n     \t(range (quot (count s) 2))\n    )\n)", "problem": 27, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [coll]\n (loop [coll coll]\n   (cond\n     (not (= (first coll) (last coll))) false\n     (empty? coll) true\n     (= (count coll) 1) true\n     :else (recur (rest(butlast coll))))))", "problem": 27, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52563d02e4b0541d1855ba10"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "525d41b3e4b0cb4875a45d69"}, {"code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "problem": 27, "user": "525d5341e4b0cb4875a45d76"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "(fn [num] (= (seq num) (reverse num)))", "problem": 27, "user": "524a7060e4b05ef8e38e64a6"}, {"code": "(fn [coll] (= 0 (compare (vec coll) (vec (reverse coll)))))", "problem": 27, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [xs] (= (reverse xs) (into [] xs)))", "problem": 27, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn pal\n  ([x]\n     (pal x (reverse x)))\n  ([x y]\n     (or (empty? x)\n         (and (= (first x) (first y)) (pal (rest x) (rest y))))))", "problem": 27, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn isPal[list]\n  (cond\n   (< (count list) 2)\n     true\n   (= (first list) (last list))\n     (isPal (rest (butlast list)))\n   :else\n     false))", "problem": 27, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525a643be4b0cb4875a45cf1"}, {"code": "#(= (if (string? %) (clojure.string/join (reverse %)) (reverse %)) %)", "problem": 27, "user": "52335d7ce4b0f0b72fabf404"}, {"code": "#(= (into [] %1) (reverse %1))", "problem": 27, "user": "52626564e4b03e8d9a4a7086"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn palindrome-detector \n  ([seq m n]\n    (if (< m n)\n    (and (= (nth seq m) (nth seq n)) (palindrome-detector seq (inc m) (dec n)))\n    true))\n  ([seq]\n    (palindrome-detector seq 0 (dec (count seq)))))", "problem": 27, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "(fn [coll]\n  (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "525941f9e4b0cb4875a45cd6"}, {"code": "(fn pal [x] (let [s (seq x)] (= (reverse s) s)))", "problem": 27, "user": "525cd5bee4b0cb4875a45d4b"}, {"code": "(fn p? [x]\n  (cond (= x nil) true\n        true (and (= (first x) (last x))\n                  (p? (butlast (rest x))))))", "problem": 27, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "(fn aa [o]\n  (if (= (count (distinct (seque o))) (count o)) false true))", "problem": 27, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [x] (= ( reverse (seq x) ) (seq x) ) )", "problem": 27, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn [coll] (let [c (seq coll)] (= c (reverse c))))", "problem": 27, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "524f3e6de4b0541d1855b805"}, {"code": "#(= (reverse %1) (reverse (reverse %1)))", "problem": 27, "user": "52420d32e4b076e5d3121f47"}, {"code": "(fn [x] (let [coll (seq x)]\n           (= (reverse coll) coll)))", "problem": 27, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn  [inStr]\n   (if (seq inStr)\n     (if (= (first inStr) (last inStr))\n       (recur (butlast (rest inStr)))\n       false)\n     true\n   )\n )", "problem": 27, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "(fn palindrome [x]\n  (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "525805bbe4b0cb4875a45ca1"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [coll]\n  (every? identity (map #(= %1 %2) coll (reverse coll))))", "problem": 27, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "#(loop [ result true f 0 b (dec (count %))] (do (println f b %) (if (<= b f) result (recur (= (nth % f) (nth % b)) (inc f) (dec b)))))", "problem": 27, "user": "52655949e4b03e8d9a4a710b"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "525d417ee4b0cb4875a45d68"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5012da69e4b0c8732600222d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "515b03fee4b0a102a3e5262a"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "525d5302e4b0cb4875a45d73"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "525d7090e4b0cb4875a45d7e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52664945e4b03e8d9a4a712f"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "52667aa2e4b03e8d9a4a713d"}, {"code": "(fn [xs]\n    (let [list xs revlist (reverse xs)]\n      (= list \n         (if (string? list)\n           (apply str revlist)\n           revlist))))", "problem": 27, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn pal [l]\n  (cond\n   (empty? l) true\n   (= (count l) 1) true\n   (= (first l) (last l)) (->> l (drop 1) (drop-last 1) pal)\n   :else false))", "problem": 27, "user": "5250779ee4b0541d1855b82f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [collection] \n  (= (seq collection) (reverse collection)))", "problem": 27, "user": "52616198e4b03e8d9a4a705e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn is-palindrome [seq] (every? identity (map = seq (reverse seq))))", "problem": 27, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [a] (every? identity (map #(= (nth a %) (nth (reverse a) %)) (range (/ (dec (count a))) 2))))", "problem": 27, "user": "52680eace4b03e8d9a4a7194"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "#(if (string? %) \n   (= (reverse %) (reverse (reverse %))) \n   (= % (reverse %))\n   )", "problem": 27, "user": "5256c8c7e4b0541d1855ba37"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [l]\n  (reduce #(and %1 %2)\n          (let [s (count l)] \n            (for [x (range 0 (/ s 2))]\n      \t\t\t(= (nth l x) (nth l (- s (inc x))))))))", "problem": 27, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "526866d1e4b03e8d9a4a71a1"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn [l] (= (seq l) (reverse (seq l))))", "problem": 27, "user": "5264502be4b03e8d9a4a70cf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(= #{true} (set (for [f (range (dec (count %))) :let [l (- (dec (count %)) f)] :while (< f l)] (= (nth % f) (nth % l)))))", "problem": 27, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn palindrome [lista]\n  (let [entre_dos (fn [secuencia]\n  (let [mitad (quot (count secuencia) 2), par (even? (count secuencia))]\n    (seq [(take mitad secuencia) (nthnext secuencia (if par mitad (inc mitad)))]))), \n        secuencia1 (first (entre_dos (seq lista))), secuencia2 (first (rest (entre_dos (seq lista))))]\n    (= secuencia1 (reverse secuencia2))))", "problem": 27, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "(fn [xs] (if (=(reverse xs) (seq xs))true false))", "problem": 27, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "526c6e08e4b03e8d9a4a7290"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn [x] \n  (= (reverse (into '() x)) \n     (into '() x)))", "problem": 27, "user": "5262efade4b03e8d9a4a709f"}, {"code": "(let [palindrome\n      (fn [coll k]\n        (if (> (* 2 k) (count coll))\n          true\n          (if (not= (coll k) (coll (- (count coll) k 1)))\n            false\n            (recur coll (inc k))\n          )\n        )\n      )]\n  (fn [coll] (palindrome (vec coll) 0))\n)", "problem": 27, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [x]\n\t  (loop [x x]\n\t    (if (or (= 0 (count x))\n\t\t    (= 1 (count x)))\n\t      true\n\t      (if (= (first x) (last x))\n\t\t(recur (butlast (rest x)))\n\t\tfalse))))", "problem": 27, "user": "4f05872b535dcb61093f6bf8"}, {"code": "(fn [s]                                                                        \n   (every? true?                                                                \n   (map = s                                                                     \n   (reverse s))))", "problem": 27, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52601e52e4b03e8d9a4a702f"}, {"code": "(fn [s] \n  (let [reversed (reverse s) half (/ (count s) 2)]\n    (= (take half s) (take half reversed))))", "problem": 27, "user": "526c669be4b03e8d9a4a728f"}, {"code": "(fn palindrome?\n  [coll]\n  (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "526e1bd0e4b03e8d9a4a730b"}, {"code": "#(let [n (quot (count %) 2)]\n  (= (take n %)\n     (reverse (take-last n %))))", "problem": 27, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [x]\n   (if (= (type x) java.lang.String)\n     (= (clojure.string/join (reverse x) x))\n   (= (reverse x) x)))", "problem": 27, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(= % (if (string? %) (clojure.string/reverse%) (reverse %)))", "problem": 27, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs))\n         (recur (drop-last (rest xs))))))", "problem": 27, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn [s]\n  (let [rev (if (string? s) (apply str (reverse s)) (reverse s))]\n    (= s rev)))", "problem": 27, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [col]\n  (= (seq col) (reverse col)))", "problem": 27, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "#(= (into '() %) (into [] %))", "problem": 27, "user": "525de512e4b0cb4875a45d8a"}, {"code": "(fn pal?\n  [x]\n  (if (< (count x) 2) true\n  (if (= (first x) (last x))\n    (pal? (rest (butlast x)))\n    false\n    )\n  )\n)", "problem": 27, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "(fn [x] \n        (let [rev (reverse x)]\n          (= rev (seq x))))", "problem": 27, "user": "5267a5e8e4b03e8d9a4a7176"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "526e0831e4b03e8d9a4a7305"}, {"code": "(fn palindrome? [p]\n  (let [s (seq p)]\n    (cond\n     (< (count s) 2) true\n     :else (and (= (first s) (last s)) (palindrome? (rest (butlast s)))))))", "problem": 27, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn pal [lst]\n\t (cond (empty? lst) true\n\t       (= (first lst) (last lst)) (pal (rest (butlast lst)))\n\t       :else false))", "problem": 27, "user": "52709149e4b03e8d9a4a73b1"}, {"code": "#(every? (partial apply =) (map (fn [a b] (list a b)) % (reverse %)))", "problem": 27, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "(fn pal [x]\n  (\n   (fn p_recur [x, v, l]\n    (if\n      (empty? x)\n      (= v l)\n      (p_recur (rest x) (conj v (first x)) (conj l (first x)))\n    )\n   )\n   x [] '()\n  )\n)", "problem": 27, "user": "52624348e4b03e8d9a4a707e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "52600f94e4b03e8d9a4a702d"}, {"code": "(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse s))))", "problem": 27, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [col] (= (reverse (vec col)) (vec col)))", "problem": 27, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "#(= (clojure.string/join (reverse %)) (clojure.string/join %))", "problem": 27, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn [xs] (= (reverse xs) (seq xs)))", "problem": 27, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn [col]\n  ((fn [col]\n    (if (seq col)\n      (if (= (first col) (last col))\n        (recur (-> col rest butlast))\n        false)\n      true))\n  col))", "problem": 27, "user": "5272e1b6e4b03e8d9a4a745a"}, {"code": "(fn [s]\n  (loop [s' s\n         pal true]\n    (if (or (= (count s') 0) (= (count s') 1))\n      pal\n      (recur (butlast (rest s')) (and pal (= (first s') (last s')))))))", "problem": 27, "user": "4f8e155ae4b0d4e659cdde63"}, {"code": "(fn pal [thing] (if (> (count thing) 1) (and (= (first thing) (last thing)) (pal (rest (drop-last thing)))) true ))", "problem": 27, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [l]\n  (let [l1 (seq l)]\n    (= l1 (reverse l1))))", "problem": 27, "user": "5272669de4b03e8d9a4a742e"}, {"code": "#(if(string? %)\n   (= % (apply str (reverse %)))\n  (= % (reverse %)))", "problem": 27, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n    (= x (reverse x))\n  )\n)", "problem": 27, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(loop [inseq %] \n     (cond\n     (<= (count inseq) 1)\n       true\n     (not= (first inseq) (last inseq))\n       false\n     :else\n      (recur (butlast (rest inseq)))))", "problem": 27, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "#(if (instance? String %)\n   (= % (clojure.string/reverse %))\n   (= % (reverse %)))", "problem": 27, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "(fn my-palindrome? [xs]\n  (if (empty? xs) true\n  (and \n   (= (first xs) (last xs))\n   (my-palindrome? (drop-last (rest xs)))\n  ))\n)", "problem": 27, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [palindrome] (= (seq palindrome) (reverse (seq palindrome))))", "problem": 27, "user": "525b4e8de4b0cb4875a45d0f"}, {"code": "#(loop [seq %] (if (empty? seq) true (if (not (= (first seq) (last seq))) false (recur (next (butlast seq))))))", "problem": 27, "user": "52727ba4e4b03e8d9a4a7438"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5152f82ee4b03f948212e718"}, {"code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "problem": 27, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [coll] (let [s (seq coll)]\n             (= s (reverse s))))", "problem": 27, "user": "52767de0e4b03e8d9a4a74e5"}, {"code": "#( loop [x %1 y %1 reslt true] (if (empty? x) reslt (recur (rest x) (butlast y) (and reslt (= (first x)(last y))))))", "problem": 27, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(= (last %) (first %))", "problem": 27, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(letfn [(f [y z]  \n           (if (empty? y) \n             (empty? z) \n             (if (= (first y) (first z))\n               (f \n                (rest y) \n                (rest z))\n               false)\n             ))] (fn [x] (f x (reverse x))))", "problem": 27, "user": "514f6679e4b0b449e54b8df5"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "527682ede4b03e8d9a4a74e6"}, {"code": "(fn [%]\n    (if (< (count %) 2)\n        true\n        (and (= (last %) (first %)) (recur (rest (drop-last %))))\n    )\n)", "problem": 27, "user": "51422945e4b0b50abeb46b2e"}, {"code": "(fn [a]\n    (every? identity\n      (let [_a (reverse a)\n            n (count a)]\n        (map #(= (nth a %) (nth _a %)) (range (/ (dec n) 2)))\n      )\n    )\n  )", "problem": 27, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "52741177e4b03e8d9a4a749b"}, {"code": "(fn [n] (= (seq n) (reverse n)))", "problem": 27, "user": "521d709ae4b050d5da0427ef"}, {"code": "#(let [s (seq %)] (= s (reverse s)))", "problem": 27, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn palindrome? [s]  (= (seq s) (reverse s)))", "problem": 27, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn palindrome? [list]\n  (let [rev    (reverse list)\n        zipped (map vector list rev)]\n    (every? (fn [pair] (= (first pair) (second pair))) (take (+ 1 (/ (count zipped) 2)) zipped))))", "problem": 27, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "#(let [s (seq %1)] (= (reverse s) s))", "problem": 27, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5243635ce4b076204b44fab8"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "52795656e4b03e8d9a4a7534"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "#(if (string? %) \n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "problem": 27, "user": "5279096ce4b03e8d9a4a752d"}, {"code": "(fn a [c] (if(not= (first c) (last c))(identity false)(if(or(= 1 (count c))(nil? c))(identity true) (a (next (drop-last 1 c))))))", "problem": 27, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4db03885838c48654951d9bd"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "527a48f9e4b03e8d9a4a7553"}, {"code": "(fn [s]\n (=\n  (into '() s)\n  (reverse (into '() s))\n )\n)", "problem": 27, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn isPalindrome [element]\n  (if (= (reverse (reverse element)) (reverse element))\n     true\n     false\n  )\n)", "problem": 27, "user": "4ea5b8ae535d7eef308072d8"}, {"code": "(fn [x] (if (string? x) (= (clojure.string/reverse (str x)) x)  (= (reverse x) x)) )", "problem": 27, "user": "527c045fe4b03e8d9a4a75a8"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "524a554de4b05ef8e38e64a2"}, {"code": "(fn palindrome? [x]\n  (loop [b 0 e (- (count x) 1)]\n    (if (or (= b e) (= (- e b) 1))\n      true\n      (if (= (nth x b) (nth x e))\n        (recur (+ b 1) (- e 1))\n        false\n      )\n    )\n  )\n)", "problem": 27, "user": "527c2ac9e4b03e8d9a4a75b7"}, {"code": "(fn [a]  (if (not (empty? a))\n           (if (= (first a) (last a))\n             (recur (drop 1 (drop-last a)))\n             false)\n           true\n           ))", "problem": 27, "user": "525d318fe4b0cb4875a45d63"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [col]\n  (loop [p col, rp (reverse col)]\n    (cond      \n      (and (empty? p) (empty? rp)) true\n      (= (first p) (first rp)) (recur (rest p) (rest rp))\n      :else false)))", "problem": 27, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "515c1f12e4b069911535cf06"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "527ed32ce4b0757a1b1713b5"}, {"code": "#(let [h (quot (count %) 2)] (= (take h %) (reverse (take-last h %))))", "problem": 27, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [coll] (=  (seq coll) (rseq (vec coll))))", "problem": 27, "user": "527c4071e4b0757a1b17135a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "52808559e4b0757a1b171403"}, {"code": "(fn [lst] (= (seq lst) (reverse lst)))", "problem": 27, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "#( let [x (seq %)] (= x (reverse x)))", "problem": 27, "user": "52808897e4b0757a1b171404"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "528111d4e4b0757a1b17141d"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5280d4bbe4b0757a1b171415"}, {"code": "(fn[x]  (every? true? (map = x (reverse x))))", "problem": 27, "user": "52810225e4b0757a1b171418"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "528147b6e4b0757a1b171425"}, {"code": "(fn [word]\n  (= (seq word) (seq (reverse word))))", "problem": 27, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn [s] \n  (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "#(= (seq %) (reduce conj () %))", "problem": 27, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [lst] \n  (= (reverse lst) (seq lst)))", "problem": 27, "user": "52718620e4b03e8d9a4a73f5"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "52824143e4b0757a1b171453"}, {"code": "#(if (= (apply str (reverse %)) (apply str %)) true false)", "problem": 27, "user": "5265337fe4b03e8d9a4a7104"}, {"code": "(fn palindrome? [aseq]\n  (= (seq aseq) (reverse (seq aseq))))", "problem": 27, "user": "52812b9fe4b0757a1b171423"}, {"code": "(fn[x] (= (vec x) (reverse (vec x))))", "problem": 27, "user": "528365e2e4b0239c8a67adb3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5284de3de4b0239c8a67ade3"}, {"code": "(fn [s] \n    (loop [snew s acc []]\n      (cond\n        (= (count snew) 0) false\n        (or (= snew acc) (= snew (cons (first snew) acc))) true\n        :else (recur (rest snew) (cons (first snew) acc)))))", "problem": 27, "user": "511dada0e4b0a5c68a34840c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "519ef784e4b087743fad2198"}, {"code": "#(= (clojure.string/join (reverse %)) (clojure.string/join (map str %)))", "problem": 27, "user": "4e0359e8535d04ed9115e792"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "50feab26e4b03cd852b4e850"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(\nfn t[l] (\n    let [rl (reverse l)\n        len (\n            if (= 1 (rem (count l) 2))\n            (/ (- (count l) 1) 2)\n            (/ (count l) 2)\n        )\n    ]\n    (\n    if (= (type l) (type \"test\"))\n    (= (vec l) rl)\n    (= l rl))    \n)\n)", "problem": 27, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(comp (fn [x] (= (reverse x) x)) vec)", "problem": 27, "user": "52872d54e4b0239c8a67ae32"}, {"code": "#(let [x (vec %)] (= (reverse x) x))", "problem": 27, "user": "5282f54be4b0239c8a67ada0"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "51bd8c53e4b0ff155d51d2b2"}, {"code": "(fn [x]\n  (let [idx (quot (count x) 2)\n        fst (take idx x)\n        snd (take-last idx x)]\n    (= fst (reverse snd))))", "problem": 27, "user": "5287f66be4b0239c8a67ae45"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "5285920be4b0239c8a67adfb"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5288b06de4b0239c8a67ae55"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fbd6210e4b081705acca303"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "522a01ade4b0590a43906ced"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn\n  [coll]\n  (let [re-coll (seq (reverse coll)) old-coll (seq coll)]\n    (if (= old-coll re-coll)\n      true\n      false)))", "problem": 27, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn[l] \n  (let [s (seq l)]\n    (= (reverse s) s)))", "problem": 27, "user": "523ab749e4b0aa37f082ed8d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "52865f41e4b0239c8a67ae15"}, {"code": "(fn [lst]\n  (if (coll? lst) (= (reverse lst) lst)\n    (= (clojure.string/reverse lst) lst)))", "problem": 27, "user": "52864dbce4b0239c8a67ae12"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "(fn [coll]\n    (let [split (quot (count coll) 2)]\n    (do\n      (=\n       (take  split coll)\n       (reverse (take-last split coll))\n       ))))", "problem": 27, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn pali [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "528b9efee4b0239c8a67aea0"}, {"code": "(fn [palinquack]\n\t(if (> 2 (count palinquack))\n  \t\ttrue\n        (if (= (first palinquack) (last palinquack))\n          (recur (rest (butlast palinquack)))\n           false)))", "problem": 27, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [input]\n  (= (seq input) (reverse input)))", "problem": 27, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [c](reduce #(and %1 %2) (map #(= %1 %2) c (reverse c))))", "problem": 27, "user": "528cc69fe4b0239c8a67aeb7"}, {"code": "#(->> % seq (= (reverse %)))", "problem": 27, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "#(= % (let [ x (reverse  %) ] \n                       (if (string? %) \n                                  (apply str x)\n                                  x)\n                       )\n            )", "problem": 27, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "(fn palindrome? [coll]\n  (let [coll (seq coll)]\n    (= coll (reverse coll))))", "problem": 27, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "(fn [l] (= (reverse l) (seq l)))", "problem": 27, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "528f96b8e4b0239c8a67aef7"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn palin [x] (if (< (count x) 2) true (if (= (first x) (last x)) (palin (rest (butlast x))) false)) )", "problem": 27, "user": "528f1057e4b0239c8a67aeec"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50a6a8d2e4b0aa96157e2628"}, {"code": "(fn [x] ( if (string? x) (= (apply str (reverse x)) x)\n                          (= (reverse x) x)\n                                        ))", "problem": 27, "user": "529012a5e4b0239c8a67af01"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [x]\n    (if (or (vector? x) (list? x)) \n     (= x (reverse x))\n     (= (str x) (apply str (clojure.string/reverse (str x))))\n     )\n    )", "problem": 27, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "529227cfe4b0239c8a67af27"}, {"code": "(fn [a] (reduce #(and %1 %2) (map = a (reverse a))))", "problem": 27, "user": "529242bee4b0239c8a67af28"}, {"code": "(fn [coll]\n  (loop [x coll]\n    (if (< (count x) 2)\n      true\n      (if (not (= (first x) (last x)))\n        false\n        (recur (drop-last (rest x)))))))", "problem": 27, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn[pal](= pal (if (string? pal)(clojure.string/reverse pal)(reverse pal))))", "problem": 27, "user": "52840004e4b0239c8a67adc1"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "(fn palendrome? [word]\n (= (reverse word) (reverse (reverse word))))", "problem": 27, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn [x] (= (seq x) ( reverse x ) ) )", "problem": 27, "user": "515919fbe4b0394f658fe229"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5257e2ace4b0cb4875a45c9a"}, {"code": "(fn [x] (let [y (seq x)](= y (reverse y))))", "problem": 27, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52951156e4b02ebb4ef7501b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [seqs]\n  (if (= (seq seqs) (reverse seqs))\n    true\n    false)\n)", "problem": 27, "user": "52837636e4b0239c8a67adb6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "#(= (vec %1) (reverse(vec %1)))", "problem": 27, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "5293589ae4b0239c8a67af3d"}, {"code": "(fn pal [s]\n  (if (< (count s) 2)\n    true\n    (and\n         (= (first s) (last s))\n         (pal (take (- (count s) 2) (rest s))))))", "problem": 27, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "#(let [colls (split-at (quot (count %) 2) %)]\n   (every? true? (map (fn [lhs rhs] (= lhs rhs)) (first colls) (reverse (second colls)))))", "problem": 27, "user": "52974f66e4b02ebb4ef75040"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "529670c1e4b02ebb4ef75030"}, {"code": "(fn [s] \n  (= (seq s)\n     (reverse s)))", "problem": 27, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn palindrome [x] (= (seq x) ((fn my-reverse [x] (if (>= 0 (count x))\n                          []\n                         (conj (my-reverse (rest x)) (first x))\n                          )\n) x)))", "problem": 27, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn pal [seq] (if (<= (count seq) 1) \n                 true\n                 (if (= (first seq) (last seq))\n                   (pal (drop-last (rest seq)))\n                   false)\n                 )\n  )", "problem": 27, "user": "528c381ce4b0239c8a67aeb2"}, {"code": "(fn[j] (#(if (= % nil) false true)(#(loop[n j acc '()] (if (> 1 (count n)) acc (if(= (first n)(last n)) (recur (drop-last(rest n)) (conj acc true)) ))))))", "problem": 27, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5298bd13e4b02ebb4ef75063"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(let [s (seq %1)]\n   (= (reverse s) s)\n   )", "problem": 27, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [x] (= (vec x) (reverse x)))", "problem": 27, "user": "527188cee4b03e8d9a4a73f6"}, {"code": "(fn\n  [%]\n  (every? (fn [[a b]] (= a b))\n          (partition 2 (interleave % (reverse %)))))", "problem": 27, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn[pal](= pal (if (string? pal)(clojure.string/reverse pal)(reverse pal))))", "problem": 27, "user": "529952a4e4b02ebb4ef75081"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51ad244fe4b09397d510977f"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "529a2d3be4b02ebb4ef75092"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52342722e4b07e3ee2be83c0"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "#(if (string? %) \n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "problem": 27, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4e72187b535d5021c1a8965b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5290ffaee4b0239c8a67af10"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "529d292fe4b04e0c58e87b74"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "529dc421e4b04e0c58e87b80"}, {"code": "#(every? zero? (map compare (reverse %) %))", "problem": 27, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "problem": 27, "user": "528e510ee4b0239c8a67aeda"}, {"code": "(fn [col]\n  (let [cor (reverse col) n (count col)]\n  (every? identity\n(map #(= (nth col %) (nth cor %)) (range (/ (dec n) 2)))\n  )))", "problem": 27, "user": "51e05dfae4b01188f0627543"}, {"code": "#(= % \n    \n     (\n       if (string? %) \n          (clojure.string/reverse %) \n          (reverse %)\n      )\n    \n )", "problem": 27, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "#(= % (if (string? %)\n  \t\t(clojure.string/reverse %)  \n  \t\t(reverse %)))", "problem": 27, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [ls]\n  (if (string? ls)\n    (= ls (apply str (reverse ls)))\n    (= ls (reverse ls))))", "problem": 27, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "4e84f81b535db62dc21a62e6"}, {"code": "#((fn [coll]\n  (let [rc (reverse coll)\n        n (count coll)]\n    (every? identity\n      (map (fn [x]\n             (= (nth coll x) (nth rc x))) (range (/ (dec n) 2))))))\n  %)", "problem": 27, "user": "529e558ce4b04e0c58e87b95"}, {"code": "(fn palindrome [s] (if (empty? s) true (if (= (first s) (last s)) (palindrome (rest (drop-last s))) false)))", "problem": 27, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [x] (= (seq x) (reverse x)) )", "problem": 27, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(fn ispal\n  [xs]\n  (let [match (= (first xs) (last xs))\n        tail (drop 1 (butlast xs))]\n    (if (and match (not (empty? tail))) (ispal tail) match)))", "problem": 27, "user": "529dd5a4e4b04e0c58e87b82"}, {"code": "#(= (into [] %) (into [] (reverse %)))", "problem": 27, "user": "529f3f1ae4b04e0c58e87ba5"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn palindrome [coll]\r\n  (if (not (= (first coll) (last coll))) false\r\n    (if (empty? coll) true\r\n      (recur (drop-last (drop 1 coll))))))", "problem": 27, "user": "523aa92ae4b081681ca7adcd"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "529f71aae4b04e0c58e87bac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "529f453ee4b04e0c58e87ba6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "(fn [x] (= (reduce conj '() (vec x)) (vec x)))", "problem": 27, "user": "529c722de4b04e0c58e87b63"}, {"code": "#(= (seq %) (reverse%))", "problem": 27, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn palindrome?\n  [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop 1 (drop-last 1 s))))))", "problem": 27, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "(fn pal [thing]\n  (if (seq thing)\n    (and (= (first thing) (last thing)) (pal (butlast (rest thing))))\n    true))", "problem": 27, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [col] (= (seq col) (reverse col)))", "problem": 27, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [xs]\n  (= (seq xs) (reverse (seq xs))))", "problem": 27, "user": "4dbba163535d3f4042261ecc"}, {"code": "(fn palidrome? [x]\n  (if (< (count x) 3)\n    true\n    (and\n      (= (first x) (last x))\n      (palidrome? (rest (drop-last x))))))", "problem": 27, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f1b120f535d64f603146476"}, {"code": "(fn pali\n  [coll]\n  (if (or (= 0 (count coll)) (= 1 (count coll)))\n    true\n    (if (= (first coll) (last coll))\n      (pali ((comp butlast rest) coll))\n      false)))", "problem": 27, "user": "5233adf7e4b07e3ee2be83ad"}, {"code": "(fn [x]\n  (if (string? x)\n    (if (= x (apply str (reverse x)))\n      true\n      false)\n    (if (= x (reverse x))\n      true\n      false)))", "problem": 27, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "#(if-not (coll? %) \n  (= (apply str (reverse %)) %)\n  (= (reverse %) %))", "problem": 27, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [c] (= (map identity c) (reverse c)))", "problem": 27, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [item] (= (seq item) (reverse (seq item))))", "problem": 27, "user": "52a52e59e4b0c58976d9abe4"}, {"code": "(fn is-pal\n  [s]\n  (= (seq s) (seq (reverse s))))", "problem": 27, "user": "52a4f3cee4b0c58976d9abe0"}, {"code": "(fn [word] (= (vec word) (vec ( rseq (vec word)))))", "problem": 27, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "(fn [l] (= (reverse l) (seq l)))", "problem": 27, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn [xs]\n  (if (= (class xs) java.lang.String)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))", "problem": 27, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn is-palindrome[x]\n  (= (seq x) (reverse x))\n  )", "problem": 27, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn palindrome?\n  [s]\n  (let [s (seq s)\n        r (reverse s)]\n    (= r s)))", "problem": 27, "user": "5263c44fe4b03e8d9a4a70b8"}, {"code": "(fn [p?] (= (reduce str (reverse p?)) (reduce str p?)))", "problem": 27, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn isPdrome? [seq]\n  (let [c (count seq)\n        half (quot c 2)\n        split (split-at half seq)\n        frst (first split)\n        scnd (if (odd? c)\n               (rest (second split))\n               (second split))]\n    (every? #(= (first %) (last %)) (map vector frst (reverse scnd)))))", "problem": 27, "user": "529f739fe4b04e0c58e87bad"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn is-palindrome [l] (if (= (first l) (last l))\n                        (if (or (= (count l) 1) (= (count l) 0)) true (is-palindrome (take (- (count l) 2) (rest l)))) false))", "problem": 27, "user": "52a60461e4b0c58976d9abf7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "(fn [x] \n  (let [n (into [] x)]\n    (= (reverse n) n)))", "problem": 27, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "529a3c37e4b02ebb4ef75094"}, {"code": "#(= (concat '() %1) (reverse %1))", "problem": 27, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(fn [lst]\n  (if (= (mod (count lst) 2) 0)\n    (let [mid (int (/ (count lst) 2))\n          lst-1 (take mid lst)\n          lst-2 (take mid (reverse lst))]\n      (= lst-1 lst-2))\n    \n    (let [mid (int (/ (count lst) 2))\n          lst-1 (take mid lst)\n          lst-2 (take mid (reverse lst))]\n      (= lst-1 lst-2))))", "problem": 27, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "529d2abce4b04e0c58e87b75"}, {"code": "(fn [word] (= (seq word) (-> word seq reverse)))", "problem": 27, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(if (string? %)\n   (= % (clojure.string/reverse %))\n   (= % (reverse %)))", "problem": 27, "user": "5298c83de4b02ebb4ef75064"}, {"code": "#(let [other (reverse %)]\n   (= (seq %) other))", "problem": 27, "user": "51929214e4b08962174cf74c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "50c24da6e4b0f056eabae53d"}, {"code": "(fn pal [s]\n  (if (empty? s)\n    true\n  \t(if (= (first s) (last s))\n      (pal (rest (butlast s)))\n      false)))", "problem": 27, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "problem": 27, "user": "52a55adee4b0c58976d9abe7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51388e86e4b0a5db03d727d7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fa38e3fe4b081705acca190"}, {"code": "#(= (seq %)\n    (reverse %))", "problem": 27, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ab5b03e4b0c58976d9ac74"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "#(=(into () %) (seq %))", "problem": 27, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52aabeffe4b0c58976d9ac6b"}, {"code": "(fn [xs] \n  (let [half (/ (count xs))]\n    (= (take half xs) (reverse (take-last half xs)))))", "problem": 27, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn pol [x] \n  (condp = (count x) \n     1 true\n     2 (= (first x) (last x))\n     (every? true? \n            [(= (first x) (last x)) \n            (pol (-> x drop-last rest))] )))", "problem": 27, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "(fn palindrome [s]\n  (if (< (count s) 2)\n       true\n      (if (not= (first s) (last s))\n           false\n           (recur (butlast (rest s))))\n  )\n)", "problem": 27, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52a9b086e4b0c58976d9ac4e"}, {"code": "#(loop [ result true a % b (reverse %)]\n   ( if (empty? a)\n     result\n     (recur (and result (= (first a) (first b))) (rest a) (rest b))\n    )\n  )\n\n;#(= (reverse %) (seq %))", "problem": 27, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [x]\n        (loop [s (seq x)]\n              (if (empty? s) true\n                (if (not= (first s) (last s)) false\n                  (recur (rest (butlast s)))))))", "problem": 27, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn [l] (= (reverse l) (reverse (reverse l))))", "problem": 27, "user": "52af0136e4b0c58976d9acb3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "(fn [ls]\n  (= (reverse ls) (reverse (reverse ls))))", "problem": 27, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [x] (= (seq x) (reduce conj '() x)))", "problem": 27, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "(fn palindrome? [s]\n   (do \n     (println s)\n     (cond\n       (empty? s) true\n       (= (count s) 1) true\n       (not= (first s) (last s)) false\n       :else (palindrome? (rest (butlast s)))\n       )\n     )\n   )", "problem": 27, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ac9225e4b0c58976d9ac87"}, {"code": "#(let [n (quot (count %) 2)] (= (take n %) (take n (reverse %))))", "problem": 27, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn f [x]\n  (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52b11742e4b0c58976d9acd5"}, {"code": "(fn palindrome?\n  [coll]\n  (loop [c coll\n         result true]\n    (let [f (first c)\n          l (last c)]\n      (if (empty? c)\n        result\n        (recur (drop 1 (drop-last c))\n               (and result  (= f l)))))))", "problem": 27, "user": "524f4256e4b0541d1855b808"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "#(= (into [] %) (reverse %))", "problem": 27, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [orig]\n  (loop [l orig]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n        (recur (->> l (drop 1) (drop-last)))\n        false\n        ))))", "problem": 27, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "527c0513e4b03e8d9a4a75ab"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524cf3e7e4b0752c4cb68cd1"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "505b0431e4b021387fb8985e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "#(= (reduce str (reverse %)) (reduce str %))", "problem": 27, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "#(= (reverse %) (list* %))", "problem": 27, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "#(let [coll (seq %)\n        rev (reverse coll)]\n    (= rev coll))", "problem": 27, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [a] (= (map identity a) (reverse a)))", "problem": 27, "user": "4fc3a72ae4b081705acca342"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52b02329e4b0c58976d9acc5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "problem": 27, "user": "52b6b5a7e4b0c58976d9ad4b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52b48f04e4b0c58976d9ad29"}, {"code": "(fn [a-seq]\n           (let [norm-seq (seq a-seq)]\n             (= norm-seq (reverse norm-seq))))", "problem": 27, "user": "52b6365de4b0c58976d9ad40"}, {"code": "(fn palin [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [xs]\n  (if (< (count xs) 2)\n    true\n    (and (= (first xs) (last xs))\n         (recur (-> xs rest drop-last)))))", "problem": 27, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(= (reverse %) (reverse (reverse %)) )", "problem": 27, "user": "52b5b2d1e4b0c58976d9ad3b"}, {"code": "#(loop [x % y #{}]\n\t(if (empty? x) false\n\t\t(if (contains? y (first x)) true\n\t\t\t(recur (rest x) (conj y (first x))))))", "problem": 27, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "52b80827e4b0c58976d9ad56"}, {"code": "#(= (reverse %1) (seq %1))", "problem": 27, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn [aseq]\n  (if (seq? aseq) \n    (= (seq aseq) (reverse (seq aseq)))\n    (= (seq aseq) (reverse (seq aseq)) )))", "problem": 27, "user": "52b66d98e4b0c58976d9ad46"}, {"code": "(fn [x]\n  (cond\n   (string? x) (= (apply str (reverse x)) x)\n   :else (= (reverse x) x)))", "problem": 27, "user": "52b8af15e4b07a9af57922b5"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "512b85a7e4b04d059cf1fd15"}, {"code": "#(every? true? (map = (reverse (apply list %)) (apply list %)))", "problem": 27, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [s]\n  (= (reverse s) (reverse (reverse s)))\n  )", "problem": 27, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [x] (if (>= 1 (count x)) true\n          (if (= (last x) (first x))\n            (recur (rest (reverse (rest (reverse x)))))\n            false)))", "problem": 27, "user": "52ae70c4e4b0c58976d9aca8"}, {"code": "(fn [seq]\n  (loop [original (vec seq)]\n    (let [len (count original)]\n      (if (or (= 0 len) (= 1 len))\n        true\n        (if (= (first original) (last original))\n          (recur (rest (drop-last original)))\n          false)))))", "problem": 27, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52b9a836e4b07a9af57922c0"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "52bad920e4b07a9af57922d7"}, {"code": "(fn [s]\n  (let [h (int (/ (count s) 2))]\n    (reduce #(and\n              %1 (= (nth s %2) (nth s (- (count s) 1 %2)))) true (range h)) ))", "problem": 27, "user": "52b63875e4b0c58976d9ad41"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [x]\n  ((fn co [i]\n     (if (= i (count x))\n       true\n       (if (= (nth x i) (nth (reverse x) i))\n         (co (inc i))\n         false)))\n   0))", "problem": 27, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "51fda906e4b0f1313d468a4f"}, {"code": "#(if (string? %) (= % (clojure.string/reverse %)) (= % (reverse %)))", "problem": 27, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52b2c9e9e4b0c58976d9acf7"}, {"code": "(fn [p]\n  (let [l (/ (count p) 2)\n        a (take l p)\n        b (take l (reverse p))]\n    (= a b)\n    ))", "problem": 27, "user": "5243f93be4b076204b44faf6"}, {"code": "#(= (rseq (vec %)) (vec %))", "problem": 27, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "(fn [seqq]\n  (loop [x seqq]\n  (if (= (first x) (last x))\n    (if (or (= 1 (count x)) (= 2 (count x)))\n       true\n       (recur (reverse (rest (reverse (rest x))))))\n    false\n    )\n  ))", "problem": 27, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "(fn pal [x] \n  (if (> 2 (count x))\n    true\n    (if (.equals (first x) (last x))\n      (pal (rest (butlast x)))\n      false\n    )\n  )\n)", "problem": 27, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [xs] (= (vec xs) (reverse xs)))", "problem": 27, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn palindrome [x]\n    (if (= nil (next x))\n        true\n        (and (= (first x) (last x)) (palindrome (butlast (next x))))\n        )\n    )", "problem": 27, "user": "52bb55e8e4b07a9af57922e3"}, {"code": "(fn [coll] \n  (let [rc (reverse coll) n (count coll)]\n  (every? identity\n  (map #(= (nth coll %) (nth rc %)) (range (/ n 2)) ))))", "problem": 27, "user": "52bcf698e4b07a9af57922fe"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn palindrom? [input]\n    (if (string? input)\n         (= (apply str (reverse input)) input)    \n    (= (reverse input) input))\n )", "problem": 27, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(= (-> % reverse vec) (vec %))", "problem": 27, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [s]\n  (let [m (/ (count s) 2)]\n    (= (reverse (drop m s)) (drop-last m s))))", "problem": 27, "user": "52be5d55e4b07a9af579231e"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52bdb689e4b07a9af5792306"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "52bebdbfe4b07a9af5792326"}, {"code": "(fn fun [p] (if (> 1 (count p))\n\t         true\n             (if (= (first p) (last p))\n                (fun (rest (reverse (rest p))))\n                false)))", "problem": 27, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn f [x] (let [x (seq x)] \n            (cond (<= (count x) 1) true\n                  (not= (first x) (last x)) false\n                  :else (f (drop-last (rest x)))\n              )\n            )\n       )", "problem": 27, "user": "52bef782e4b07a9af5792327"}, {"code": "(fn [xs] (->> xs (seq) (#(= % (reverse %)))))", "problem": 27, "user": "52bf29fde4b07a9af579232e"}, {"code": "#(= (reverse %) (seq %) )", "problem": 27, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(= (into () %) (reverse (into () %)))", "problem": 27, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn palindrome? [s] (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "52bf936ee4b07a9af579233b"}, {"code": "#(if (string? %1) (= %1 (clojure.string/reverse %1)) (= %1 (reverse %1)))", "problem": 27, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn pdrome [y]\n  (loop [fwd y \n         bkwd ((fn [x] \n                 (loop [xseq x revseq nil]\n                   (if (= (seq xseq) nil)\n                     revseq\n                     (recur (rest xseq)\n                            (conj revseq (first xseq)))))) y)]\n    (if (= (seq fwd) nil)\n      true\n      (if (not= (first fwd) (first bkwd))\n        false\n        (recur (rest fwd) (rest bkwd))))))", "problem": 27, "user": "52c0101fe4b07a9af5792343"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c07415e4b07a9af579234d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "52097551e4b0e152394d76f3"}, {"code": "#(loop [xs %]\n   (let [s (seq xs)]\n   (if (empty? xs)\n     true\n     (if (not= (first xs) (last xs))\n       false\n       (recur (butlast (rest xs)))))))", "problem": 27, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "52baefbae4b07a9af57922da"}, {"code": "#(= (apply str (reverse %1)) (apply str %1))", "problem": 27, "user": "52bda384e4b07a9af5792305"}, {"code": "#(let [c (vec %)] (= c (reverse c)))", "problem": 27, "user": "5167d60de4b0c5a4140a3098"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "505d1b01e4b0e6aca564be04"}, {"code": "#(let [lst (seq %)]\n   (= lst (reverse lst)))", "problem": 27, "user": "52c25645e4b07a9af579237d"}, {"code": "#(if (string? %1)\n   (= (apply str (reverse %1)) %1)\n   (= (reverse %1) %1)\n   )", "problem": 27, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "52c2f10de4b07a9af5792386"}, {"code": "(fn [x]\n  (let [t (class x)\n        rev-func (if (= t String) clojure.string/reverse reverse)]\n     (= x (rev-func x))\n  )\n)", "problem": 27, "user": "52c23344e4b07a9af5792379"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "52be58d7e4b07a9af579231d"}, {"code": "#(= (apply str (reverse %)) (apply str %) )", "problem": 27, "user": "52c35afce4b07a9af579238c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c00263e4b07a9af579233f"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "508147cde4b0a20aab17b93a"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn [x] (let [s (seq x)]\n          (= s (reverse s))))", "problem": 27, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "#(= (seq % ) (into nil %))", "problem": 27, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52a9406de4b0c58976d9ac43"}, {"code": "#(= (vec %1) (reverse (vec %1)))", "problem": 27, "user": "52c4cb2fe4b0c2d177d620e5"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "52c4d327e4b0c2d177d620e6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52c2d900e4b07a9af5792382"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn [par] (if (string? par) (= (apply str (reverse par)) par) (= (reverse par) par)))", "problem": 27, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [a] (let [va (vec a)] (= va (reverse va))))", "problem": 27, "user": "52be0c48e4b07a9af5792311"}, {"code": "(fn [lst] (\n\n           \n= (seq lst) (reverse (seq lst))\n           \n))", "problem": 27, "user": "524f4a24e4b0541d1855b80b"}, {"code": "#((fn is-palyndrome? [coll]\n  (if (< (count coll) 2)\n    true\n    (and\n      (= (first coll) (last coll))\n      (is-palyndrome? (butlast (rest coll)))))) %)", "problem": 27, "user": "52c4580fe4b0c2d177d620d8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [coll]( if (empty? coll) \n   true \n   ( if \n     (= (first coll) (last coll))\n     (recur (butlast (next coll)))\n     false\n     )))", "problem": 27, "user": "4f659386e4b07046d9f4ef44"}, {"code": "(fn [x] \n\t(= (reverse (vec x)) (vec x)))", "problem": 27, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn pal [lst] \n    (cond (<= (count lst) 1) true \n        (= (first lst) (last lst)) (pal (rest (reverse (rest lst)))) \n        true false)\n)", "problem": 27, "user": "52c17e42e4b07a9af5792367"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52c61564e4b0c2d177d62109"}, {"code": "#(if (string? %) \n    (= % (apply str (reverse %)))\n    (= % (reverse %)))", "problem": 27, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [lst] (if (= (seq lst) (reverse (seq lst))) true false))", "problem": 27, "user": "52c58440e4b0c2d177d620f7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [arg]\n\t   (let [a (vec arg)]\n \t     (= a (reverse a))))", "problem": 27, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52c6f1f3e4b0c2d177d62117"}, {"code": "#(= (vec %) (reverse(vec %)))", "problem": 27, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c73194e4b0c2d177d6211e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c69672e4b0c2d177d62110"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52bf7700e4b07a9af5792337"}, {"code": "(fn ! [a-string]\n  (let [len (count a-string)]\n    (cond\n      (or\n        (= 0 len)\n        (= 1 len))\n      true\n      :else (and\n              (= (first a-string) (last a-string))\n              (! (take (- len 2) (rest a-string)))))))", "problem": 27, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52c682cce4b0c2d177d6210f"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52c7f036e4b0c2d177d62126"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "problem": 27, "user": "527ce61de4b0757a1b171374"}, {"code": "(fn [pal]\n  (let [last (fn [x]\n               (if (empty? (rest x))\n                   (first x)\n                   (recur (rest x))))\n        middle (fn [x]\n                 (loop [y (rest x) r []]\n                   (if (empty? (rest y))\n                     (list r)\n                     (recur (rest y) (conj r (first y))))))]\n    (cond\n     (empty? pal) true\n     (= pal (list (first pal))) true\n     :else\n     (and (= (first pal) (last pal)) (recur (middle pal))))))", "problem": 27, "user": "52c81954e4b0c2d177d6212e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "52c7fce9e4b0c2d177d6212a"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "52c2ff59e4b07a9af5792389"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn palindromo? [s]\n              (cond \n                (nil? s) true\n                (= 1 (count s)) true\n                (not= (first s) (last s)) false\n                :else (palindromo? (next (drop-last s)))))", "problem": 27, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "problem": 27, "user": "52897300e4b0239c8a67ae65"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b5137de4b0c58976d9ad36"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn mypalindrome[coll](= (seq coll) (reverse coll)))", "problem": 27, "user": "52cbf89ee4b07d0d72b27354"}, {"code": "#( = (seq %) (reverse %) )", "problem": 27, "user": "52cbe910e4b07d0d72b27353"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "(fn [coll]\n  (let [length (count coll)\n        tocheck (int (/ length 2))]\n    (loop [left 0 right (dec length) nchecks 0 palin? true]\n      (if (or (false? palin?)\n              (= nchecks tocheck))\n        palin?\n        (recur (inc left)\n               (dec right)\n               (inc nchecks)\n               (= (nth coll left) (nth coll right)))))))", "problem": 27, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "527c9c08e4b0757a1b171366"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "#(= (reverse (reverse %1)) (reverse %1))", "problem": 27, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn palindrome3 [arg]\n  (cond \n    (= (count arg) 1) true \n    (= (count arg) 2) (= (first arg) (last arg))\n    :else \n      (cond\n        (= (first arg) (last arg)) (palindrome3 (butlast (rest arg)))\n          :else false)))", "problem": 27, "user": "52ccbb48e4b07d0d72b2736f"}, {"code": "(fn foo [x] (case (count x) 0 true 1 true (and (= (first x) (last x)) (foo (rest (reverse (rest (reverse x))))))))", "problem": 27, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "52bd9cb7e4b07a9af5792304"}, {"code": "(fn h\n  [xs]\n  (cond\n   (= (count xs) 1) true\n   (= (count xs) 0) true\n   :else\n   (and (= (first xs) (last xs)) (h (butlast (rest xs))))))", "problem": 27, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn [coll]\n   (loop [n 0]\n     (if (> n (- (count coll) 1 n))\n       true\n       (if (= (nth coll n) (nth coll (- (count coll) n 1)))\n         (recur (inc n))\n         false))))", "problem": 27, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52cdc539e4b07d0d72b2737e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [collection] (= (vec collection) (reverse collection)))", "problem": 27, "user": "52b20257e4b0c58976d9ace8"}, {"code": "(fn [x]\n    (loop [a x b (reverse x)]\n      (if (empty? a)\n        true\n        (if (= (first a) (first b))\n          (recur (rest a) (rest b))\n          false))))", "problem": 27, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [s]\n(= (seq s) (reverse s)))", "problem": 27, "user": "52cee992e4b07d0d72b27395"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [coll] (= (vec coll) (rseq (vec coll))))", "problem": 27, "user": "52cf25cae4b07d0d72b2739e"}, {"code": "#(loop [coll %]\n    (if (not= (first coll) (last coll))\n      false\n      (if (nil? (seq coll))\n        true\n        (recur (butlast (rest coll))))))", "problem": 27, "user": "528f0106e4b0239c8a67aeeb"}, {"code": "#(=  (seq %) (reverse %))", "problem": 27, "user": "52c49401e4b0c2d177d620de"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5094057fe4b097f48cc38593"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52ced458e4b07d0d72b27394"}, {"code": ";#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))\n#(= (reverse %) (seq %))", "problem": 27, "user": "52cfe059e4b07d0d72b273af"}, {"code": "#(if (or (= % (reverse %)) (= % (apply str (reverse %)))) true false)", "problem": 27, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52cf2b96e4b07d0d72b273a0"}, {"code": "#(= (reverse %) (-> % reverse reverse))", "problem": 27, "user": "52ce165fe4b07d0d72b27388"}, {"code": "(fn palindrom [mySequence]\n  \t(let [size  (count mySequence)\n          half  (int (/ size 2)) \n          other (if (= (mod size 2) 1) (+ half 1) half)]\n\t\t(= (take half mySequence) (reverse (drop other mySequence)))\n    )\n)", "problem": 27, "user": "52c10ad2e4b07a9af579235c"}, {"code": "(fn palindrome? [x]\n  (if (string? x)\n    (= x (apply str (vec (reverse x))))\n    (= x (reverse x))))", "problem": 27, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "(fn [thelist]\n  (loop [restoflist thelist]\n    (if (empty? restoflist)\n      true\n      (if (= (first restoflist) (last restoflist))\n        (recur ((comp rest drop-last) restoflist))\n        false\n        )\n      )\n    )\n  )", "problem": 27, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "(fn [s] \n  (= (reverse s) ((comp reverse reverse) s)))", "problem": 27, "user": "52d08e7ce4b07d0d72b273bc"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "52d17182e4b0d9f9285948dd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d00832e4b07d0d72b273b4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d23a39e4b099d49816f0a6"}, {"code": "(fn [s]\n  (every? #(= (first %) (second %)) (map vector s (reverse s))))", "problem": 27, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [inp]\n  (= inp (if (string? inp)\n           (clojure.string/join \"\" (reverse inp))\n           (reverse inp))))", "problem": 27, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(let [templist %] (= (seq templist) (reverse templist)))", "problem": 27, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "#(\n  = (reverse %) (seq %)\n  )", "problem": 27, "user": "52d079f2e4b07d0d72b273ba"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "(fn\n  [pal]\n  (= (seq pal) (reverse (seq pal))))", "problem": 27, "user": "52d39acce4b099d49816f0c7"}, {"code": "(fn polindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(= (reverse %1) (reverse (reverse %1)))", "problem": 27, "user": "50b09833e4b009df37c708bd"}, {"code": "(fn [sq]\n  (loop [s sq\n         r (reverse sq)]\n    (if (empty? s)\n      true\n      (if-not (= (first s) (first r))\n        false\n        (recur (rest s) (rest r))))))", "problem": 27, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [arg]\n  (let [rev (reverse arg)]\n    (if (string? arg)\n      (= arg (clojure.string/join rev))\n      (= rev arg))))", "problem": 27, "user": "5110249ae4b04c71fce993ea"}, {"code": "#(let [s (seq %)]\n   (= s (reverse s)))", "problem": 27, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn palindrome? [coll]\n  (let [cs (seq coll)]\n    (= (reverse cs) cs)))", "problem": 27, "user": "527aba40e4b03e8d9a4a7565"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [li] (= (vec li) (reverse (vec li))))", "problem": 27, "user": "52d51024e4b09f7907dd1339"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": ";#(= (reverse (reverse %)) (reverse %))\n\n#(= (seq %) (reverse %))", "problem": 27, "user": "52d469c8e4b09f7907dd1330"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "52d2b85ce4b099d49816f0af"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d49445e4b09f7907dd1332"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn pdm [coll]\n  (let [coll_count (count coll)] \n    (cond \n      (= '() coll) true\n      (= 1 coll_count) true\n      :else (if \n              (= (first coll) (last coll))\n              (recur (rest (butlast coll)))\n              false))))", "problem": 27, "user": "52d51535e4b09f7907dd133a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d6120ee4b09f7907dd134c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d0fadce4b07d0d72b273c0"}, {"code": "#(> (count %) (count (set %)))", "problem": 27, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "(fn [cs] (let [s (apply list cs)]\n         (= s (reverse s))\n            ))", "problem": 27, "user": "52d4004ae4b09f7907dd1328"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52d63e89e4b09f7907dd134e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52d6c849e4b09f7907dd1368"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [xs]\n  (let [rs (reverse xs)\n        mixed (partition 2 (interleave xs rs))]\n    (every? (partial apply =) mixed)))", "problem": 27, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn f [x]\n  (cond\n   (or (= (count x) 0) (= (count x) 1)) true\n   (= (count x) 2) (= (first x) (last x))\n   (= (first x) (last x)) (f (butlast (rest x)))\n   true false))", "problem": 27, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn palindrome [x]\n   (= (reverse x) (reverse (reverse x)))\n   )", "problem": 27, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d66152e4b09f7907dd1357"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d87808e4b09f7907dd1396"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d954cae4b09f7907dd13a5"}, {"code": "(fn [x] (if (= (type x) (class \"\") ) (= (clojure.string/reverse x) x) (= (reverse x) x)))", "problem": 27, "user": "52d829a8e4b09f7907dd1389"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "52bf0116e4b07a9af5792328"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [x]\n  (letfn [(ifs [c] (= (first c) (last c)))\n          (center [c] (rest (drop-last c)))]\n    (loop [x x r true]\n      (if (empty? x)\n        r\n        (recur (center x) (and r (ifs x)))))))", "problem": 27, "user": "52d809bde4b09f7907dd1384"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "#(= %1 ((if (string? %1) clojure.string/reverse reverse) %1))", "problem": 27, "user": "50c2fbebe4b00e537d00253c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d9ba39e4b09f7907dd13af"}, {"code": "(fn [x]\n  (=\n    (take (Math/floor (/ (count x) 2)) x)\n    (reverse (drop (Math/ceil (/ (count x) 2)) x))))", "problem": 27, "user": "52c1566fe4b07a9af5792364"}, {"code": "(fn [col]\n  (let [rev-col (reverse col)]\n    (= rev-col (reverse rev-col))))", "problem": 27, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn [x]\n  (= (vec x) (vec (reverse x))))", "problem": 27, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) \n        n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52daf558e4b09f7907dd13c1"}, {"code": "#( = (reverse %) (seq %))", "problem": 27, "user": "52baf490e4b07a9af57922db"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "#(= (into () %) (reverse (into () %)))", "problem": 27, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn pal [col] \n  (if (empty? col) true (if (= (first (seq col)) (last (seq col))) \n                (pal (rest (drop-last (seq col)))) false)))", "problem": 27, "user": "52dcd378e4b09f7907dd13d6"}, {"code": "(fn [l] (= (reverse l) (seq l)) )", "problem": 27, "user": "51ee669ce4b09915f9b23c03"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(->> % reverse (= (seq %)))", "problem": 27, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn [s] (= (first s) (last s)))", "problem": 27, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [x] (= (vec x) (reverse x)))", "problem": 27, "user": "52de249ae4b09f7907dd13ed"}, {"code": "(fn pal [elems] \n  (or (empty? elems) (and (= (first elems) (last elems)) (pal (drop-last (rest elems))))))", "problem": 27, "user": "52deb735e4b09f7907dd13f7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [in]\n  (= (apply str (reverse in)) (apply str in)))", "problem": 27, "user": "525cb4c4e4b0cb4875a45d44"}, {"code": "(fn ispal [s] \n  (cond (<= (count s) 1) true\n        (not= (first s) (last s)) false\n        :else (ispal (rest (drop-last s)))))", "problem": 27, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "#(= (seq %) (reverse % ))", "problem": 27, "user": "52e087dde4b09f7907dd1412"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "52e0d23ce4b09f7907dd1415"}, {"code": "(fn [coll]\n\t(let [c    (count coll)\n\t      half (int (/ c 2))]\n\t  (= (take half coll) (reverse (take-last half coll)))))", "problem": 27, "user": "52e18d9ce4b09f7907dd1428"}, {"code": "#(if (= (type \"a\") (type %)) (= (clojure.string/reverse %) %) (= % (reverse %)))", "problem": 27, "user": "52e18024e4b09f7907dd1424"}, {"code": "#(= (into [] %) (into [] (reverse %)))", "problem": 27, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "521b481de4b0c4ef0be83037"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51e3a549e4b0c611d6113e47"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn palindrome? [s] (if (<= (count s) 1) true (if (= (first s) (last s)) (palindrome? (rest (drop-last 1 s))) false)))", "problem": 27, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [x] (= (reverse x) (list* x)))", "problem": 27, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "(fn [s] (= (apply str (reverse s)) (apply str s)))", "problem": 27, "user": "52e37e80e4b09f7907dd1445"}, {"code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "52d7a930e4b09f7907dd1379"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e41c22e4b09f7907dd144b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52e1c2c4e4b09f7907dd142c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [c] \n  (let [ rc (reverse c) co (count c)] \n    (every? identity \n            (map #(= (nth rc %) (nth c %)) \n                 (range (/ (+ co 1) 2))\n            )\n    )\n  )\n)", "problem": 27, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "#(not (some false? (map = % (reverse %))))", "problem": 27, "user": "52e4361fe4b09f7907dd144d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e4f06be4b09f7907dd1456"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "52e4a40ae4b09f7907dd1453"}, {"code": "(fn [ps] (= \n          (reverse (seq ps)) (seq ps)))", "problem": 27, "user": "52e276d9e4b09f7907dd1436"}, {"code": "(fn pal [x] \n  (if (<= (count x) 2) \n    (= (first x) (last x)) \n    (= true (= (first x) (last x)) (pal (rest (butlast x))))\n  )\n)", "problem": 27, "user": "52e544d3e4b09f7907dd145e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fc4541ae4b081705acca348"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [a] (= (seq a) (reverse a)))", "problem": 27, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "x", "problem": 27, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51f2a491e4b0210f90e74553"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e75667e4b09f7907dd1485"}, {"code": "#(every? true? (map = %1 (reverse %1)))", "problem": 27, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [lst]\n  (= (list* lst) (reverse lst)))", "problem": 27, "user": "52e16139e4b09f7907dd141f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5269877de4b03e8d9a4a71f0"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4ea8570f535d7eef308072f8"}, {"code": "(fn pal-det [p]\n        (if (empty? p) \n          true\n          (if (= (first p) (last p))\n            (pal-det (butlast (rest p)))\n            false)))", "problem": 27, "user": "526fc549e4b03e8d9a4a7380"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "#(= (reverse %) (if (instance? String %) (seq %) %))", "problem": 27, "user": "52e5da25e4b09f7907dd1467"}, {"code": "#(= (into [] (reverse %)) (into [] %))", "problem": 27, "user": "52e8b2fce4b09f7907dd149c"}, {"code": "(fn [s] (\n   = (seq (vec s)) (rseq (vec s))\n ))", "problem": 27, "user": "52430d3ce4b076204b44faa5"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn detect [x] (if (<= (count x) 1) true (and (= (first x) (last x)) (detect (rest (butlast x))))))", "problem": 27, "user": "52a8d0e6e4b0c58976d9ac37"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52e54040e4b09f7907dd145c"}, {"code": "#(= (vec (reverse %)) (vec %))", "problem": 27, "user": "52e807b3e4b09f7907dd1490"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e161e8e4b09f7907dd1420"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a90056e4b0c58976d9ac39"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn palindrom? [coll] \n  (if (empty? coll)\n    true \n    (if (not= (first coll) (last coll)) \n      false \n      (palindrom? (rest (butlast coll))))))", "problem": 27, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn [s]\n\t(let [ _fwd (seq s) _rev (reverse (seq s)) ]\n\t\t(loop [ fwd _fwd rev _rev ]\n\t\t\t(if (empty? fwd)\n\t\t\t\ttrue\n\t\t\t\t(if (= (first fwd) (first rev) )\n\t\t\t\t\t(recur (rest fwd) (rest rev) )\n\t\t\t\t\tfalse ) ) ) ) )", "problem": 27, "user": "52e8ecbbe4b09f7907dd14a0"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "529223cbe4b0239c8a67af26"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52ec2b9ae4b0705949c4444f"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52e73b36e4b09f7907dd1483"}, {"code": "(fn [x] (let [y (if (string? x)\n                  (rest (clojure.string/split x #\"\"))\n                  x)]\n  (= y (reverse y))))", "problem": 27, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [coll] \n  (let [x (into [] (reverse coll)) y (into [] coll)]\n    (= 0 (compare y x))))", "problem": 27, "user": "52ec4322e4b0705949c44451"}, {"code": "(fn [palindrome] (= (seq palindrome) (reverse palindrome)))", "problem": 27, "user": "52dc55e2e4b09f7907dd13cd"}, {"code": "(fn [s] (\n     (fn [x] (= x (reverse x)))\n     (into [] s)\n  ))", "problem": 27, "user": "52e68c90e4b09f7907dd1478"}, {"code": "#(let [v (vec %)] (= v (reverse v)))", "problem": 27, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52e6351ae4b09f7907dd146e"}, {"code": "#(every? true? (map = (seq %) (reverse %)))", "problem": 27, "user": "52606318e4b03e8d9a4a7036"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52edc795e4b05e3f0be25ebc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "52e253fce4b09f7907dd1432"}, {"code": "(fn [a-seq]\r\n  (loop [x a-seq]\r\n    (cond\r\n      (> 2 (count x)) true\r\n      (not= (first x) (last x)) false\r\n      :else (let [middle (reverse (rest (reverse (rest x))))]\r\n              (recur middle)\r\n    ))))", "problem": 27, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e42430e4b09f7907dd144c"}, {"code": "(fn [coll]\n    (let [fwd (seq coll)\n          rev (reverse fwd)]\n      (= fwd rev)))", "problem": 27, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn f27 [a] (if (= (vec a) (reverse (vec a))) true false))", "problem": 27, "user": "52c08c59e4b07a9af5792351"}, {"code": "#(= (take (int (/ (count %) 2)) %) (take (int (/ (count %) 2)) (reverse %)))", "problem": 27, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (recur (drop-last (rest x)))\n      false)))", "problem": 27, "user": "4f88e3eee4b033992c121c72"}, {"code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "problem": 27, "user": "504f90f5e4b0a02f9cffde99"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "#(= (reverse (vec %1)) (vec %1))", "problem": 27, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52eff3e8e4b05e3f0be25ed7"}, {"code": "(fn palindrome? [seq]\n  (or\n    (empty? seq)\n    (and\n      (= (first seq) (last seq))\n      (palindrome? (rest (drop-last seq))))))", "problem": 27, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5176afd2e4b085adf681d889"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "50c9cdfde4b0bed41a12299d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f021c1e4b05e3f0be25edb"}, {"code": "(fn  [coll] (= (seq coll) (reverse (seq coll))) )", "problem": 27, "user": "52cb94e5e4b07d0d72b2734e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "(fn [coll] \n  (loop [s coll]\n    (if \n      (< (count s) 2)\n      true\n      (if\n        (= (first s) (last s))\n        (recur\n          (rest (butlast s))\n        )\n        false \n      )\n    )\n  )\n)", "problem": 27, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "52570aeae4b0541d1855ba42"}, {"code": "#(let [input %\n       rev (reverse %)]\n   (= (reverse (reverse input)) rev)\n   )", "problem": 27, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "(fn [iterable]\n\t\t(let [seq (seq iterable)]\n\t\t\t(= (reverse seq) seq)\n\t\t)\n\t)", "problem": 27, "user": "52f31489e4b05e3f0be25f0b"}, {"code": "(fn palim \n  [x] \n  (if (or (empty? x) (empty? (rest x))) true \n    (and (= (last x)(first x)) (palim (rest (take (- (count x) 1) x))))))", "problem": 27, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52e80e87e4b09f7907dd1492"}, {"code": "(fn [input]\n  (let [punctuation #{\\,\\.\\; \\ \\'\\:}\n        coll (->> (seq input)\n                  (remove #(or (nil? %) (contains? punctuation %))))]\n    (= coll (reverse coll))))", "problem": 27, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52eaeb88e4b0705949c44436"}, {"code": "(fn [x]\n  (loop [result true\n         m_l x\n         i 0]\n    (if (= i (int (/ (count x) 2)))\n      \tresult\n      \t(recur (= (first m_l) (last m_l)) (drop 1 (drop-last m_l)) (inc i)))))", "problem": 27, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(loop [inp %1, rinp (reverse %1)] (cond (empty? inp) true\n                                   \t     (not (= (first inp) (first rinp))) false\n                                          :else (recur (rest inp) (rest rinp))))", "problem": 27, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "(fn\n  [x]\n  (loop [forward x backward (reverse x)]\n    (if (empty? forward)\n      true\n      (if (= (first forward) (first backward))\n         (recur (rest forward) (rest backward))\n          false))))", "problem": 27, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [x] (= (reverse x) (-> x reverse reverse)))", "problem": 27, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn [s]\n (if (seq? s)\n  (let [rs (reverse s)]\n   (= s rs))\n  (let [slist (seq s)\n        srlist (reverse slist)]\n    (= slist srlist))))", "problem": 27, "user": "52f4580de4b05e3f0be25f21"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f772e2e4b047fd55836fc3"}, {"code": "(fn [xs] \n  (if (string? xs)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))", "problem": 27, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52f685eae4b047fd55836fb8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "(fn [xs]\n    (let [xs (if (or (vector? xs) (list? xs))\n               xs\n               (list xs))]\n      (= xs (reverse xs))))", "problem": 27, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52e44a22e4b09f7907dd144e"}, {"code": "(fn [arr] (every? identity (for [i (range (count arr))] (= (last (take (inc i) arr)) (first (take-last (inc i) arr))))))", "problem": 27, "user": "52f84c94e4b047fd55836fcf"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52f882c4e4b047fd55836fd1"}, {"code": "(fn [x] (=(seq x)(reverse x)))", "problem": 27, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn [x] (reduce (fn [a b] (and a b)) (map = x (reverse x))))", "problem": 27, "user": "52f89ac8e4b047fd55836fd7"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(= % (if (string? %) (apply str (vec (reverse %))) (reverse %)))", "problem": 27, "user": "52f89125e4b047fd55836fd4"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn palin [c]\n  (let [n (quot (count c) 2)\n        r (reverse c)]\n    (= (take n c) (take n r))))", "problem": 27, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(= % ((fn rev [str] (cond (= (type str) java.lang.String) (clojure.string/reverse str) :else (reverse str))) %))", "problem": 27, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52f94752e4b047fd55836fe6"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52f9c68ce4b047fd55836fef"}, {"code": "#(= % (if (string? %)\n    (clojure.string/reverse %)\n    (reverse %)))", "problem": 27, "user": "52b9cfb9e4b07a9af57922c5"}, {"code": "#(=(apply str (reverse %)) (apply str %))", "problem": 27, "user": "527d59f9e4b0757a1b171382"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [lst]\n  (if-not (empty? lst)\n    (let [frst-el (first lst)\n          lst-el (last lst)\n          rst (rest (butlast lst))]\n      (if (= frst-el lst-el)\n        (recur rst)\n        false))\n    true))", "problem": 27, "user": "52fb68bfe4b047fd5583700a"}, {"code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "problem": 27, "user": "52b43708e4b0c58976d9ad1d"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn check-reverse[s] (= (reverse s) (seq s) ))", "problem": 27, "user": "52e980b3e4b09f7907dd14af"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fc2892e4b047fd55837014"}, {"code": "#(loop [col (seq %1)\n        rev '()\n        org col]\n   (cond\n    (empty? col) (= org rev) \n   \t:else (recur (rest col) (conj rev (first col)) org)))", "problem": 27, "user": "52fc89b2e4b047fd55837019"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52f8b86de4b047fd55836fdb"}, {"code": "#( if (string? %)\n    (= (str %) (reduce str (reverse %)))\n    (= % (reverse %)))", "problem": 27, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "52fbc44be4b047fd55837010"}, {"code": "#(let [f (if (= (. (type %) getName) \"java.lang.String\") \n             clojure.string/reverse \n             reverse)]\n   (= % (f %)))", "problem": 27, "user": "52fa8f71e4b047fd55836ffb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "problem": 27, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [xs]\n  (let [c (count xs)\n        half (+ (quot c 2) (rem c 2))]\n    (every? (partial apply =) (take half (map vector xs (reverse xs))))))", "problem": 27, "user": "52d95491e4b09f7907dd13a4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [coll]\n  (let [cnt (count coll)]\n    (reduce #(and % %2)\n            (for [i (range cnt)]\n              (= (nth coll i) (nth coll (- cnt i 1)))))))", "problem": 27, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fa57ece4b047fd55836ff8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52faff0de4b047fd55837007"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [s]\n  (if (or (= (count s) 0) (= (count s) 1))\n      true\n      (if (= (first s) (last s))\n          (recur (drop-last (rest s)))\n          false)))", "problem": 27, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "(fn [X] (= (seq X) (seq (reverse X))))", "problem": 27, "user": "5300c383e4b0d8b024fd3712"}, {"code": "#(= %1 (cond (string? %1) (clojure.string/reverse %1) :else (reverse %)))", "problem": 27, "user": "52f762ece4b047fd55836fc2"}, {"code": "(fn my-palindrom\n  [input]\n  (if (= (reverse (reverse input)) (reverse input)) true false))", "problem": 27, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn palindrome? [x]\n  (= x ((if (coll? x) reverse clojure.string/reverse) x)))", "problem": 27, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn palin [lst] \n   (if \n     (string? lst)\n     (cond \n      (= lst (clojure.string/join (reverse lst))) true\n      :else false)\n     (cond \n      (= lst (reverse lst)) true\n      :else false)))", "problem": 27, "user": "52fe3a9de4b047fd55837039"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [x] (loop\n          [acc x]\n          (cond (or (= 1 (count acc)) (= 2 (count acc))) true\n                (not (= (first acc) (last acc))) false\n                (= (first acc) (last acc)) (recur (butlast (rest acc))))))", "problem": 27, "user": "5302b580e4b0d8b024fd3733"}, {"code": "(fn [s] (let [original (seq s)\n              reversed (reverse original)]\n          (= original reversed)))", "problem": 27, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "#(= (into () %) (into () (reverse %)))", "problem": 27, "user": "512587ade4b05d10e3e395fb"}, {"code": "#(or (= % (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "(fn[l] (#(= % (reverse %)) (reduce conj [] l)))", "problem": 27, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#( = (apply str %) (apply str(reverse %)))", "problem": 27, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "518c1079e4b0f028e99addf8"}, {"code": "(fn [col] (= (apply str col) (apply str (reverse col))))", "problem": 27, "user": "53036d2ce4b0d8b024fd3741"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn wow\n  ([very] (wow very true))\n  ([very much]\n    (if (false? much)\n      much\n      (if (< (count very) 2)\n        much\n\t    (recur (rest (butlast very)) (= (first very) (last very)))\n      )\n    )\n  )\n)", "problem": 27, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [s]  \n  (= (apply str s) (apply str (reverse s)))\n)", "problem": 27, "user": "52fd3da0e4b047fd5583702a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "52c3a453e4b0c2d177d620c7"}, {"code": "(fn palindrome [coll]\n  (cond\n   (empty? coll) true\n   (= (first coll) (last coll)) (palindrome (rest (butlast coll)))\n   :else false))", "problem": 27, "user": "530578ede4b0d8b024fd3760"}, {"code": "#(cond (or (empty? %) (= (count %) 1)) true (not (= (first %) (last %))) false :else (recur ((comp drop-last rest) %)))", "problem": 27, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "530394b4e4b0d8b024fd3743"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53070615e4b02e821686979e"}, {"code": "(fn[x](if(contains? #{55 114 111 49} (int (last (str (last x)))) ) true false)   )", "problem": 27, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "#(= (seq %1) (reduce (fn [ v i ] (conj v i)) '() (seq %1)))", "problem": 27, "user": "53029281e4b0d8b024fd372e"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "5306b349e4b02e8216869799"}, {"code": "(fn [x]\n  (if (empty? (rest x)) true\n    (if (not= (first x) (last x)) false\n      (recur (rest (butlast x))))))", "problem": 27, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [c]\n  (let [c1 c c2 (reverse (seq c))]\n    (reduce (fn [prev pair] (and prev (= (first pair) (first (rest pair)))))\n            true\n            (map (fn [x y] [x y]) c1 c2))))", "problem": 27, "user": "53077c67e4b02e82168697a4"}, {"code": "#( = (reverse(seq %)) (seq %) )", "problem": 27, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "(fn [xs]\n  (= (seq xs)\n     (reverse xs)))", "problem": 27, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [col]\n  (loop [col col]\n    (if (empty? col)\n      true\n      (if (= (first col) (last col))\n        (recur (drop-last (rest col)))\n        false))))", "problem": 27, "user": "5166b716e4b060c690c1f4bf"}, {"code": "#(loop [l %]\n   (if (empty? l)\n     true\n     (if (= (first l) (last l))\n       (recur ((comp rest butlast) l))\n       false)))", "problem": 27, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [s] (loop [n1 0 n2 (- (count s) 1) p true]\n    (if (= p false)\n      p\n      (if (= n1 (int (/ (count s) 2))) \n        p\n        (recur (inc n1) (dec n2) (= (nth (vec s) n1) (nth (vec s) n2)) )))))", "problem": 27, "user": "53069e16e4b02e8216869798"}, {"code": "(fn [coll] (every? identity (map #(= (nth coll %) (nth (reverse coll) %)) (range (/ (dec (count coll)) 2)))))", "problem": 27, "user": "530ccb1de4b08068f379ec99"}, {"code": "#(= (seq %) (reverse  %))", "problem": 27, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn [xs]\n\t(loop [f xs, r (reverse xs)]\n\t\t(if (seq f)\n\t\t\t(if (= (first f) (first r))\n\t\t\t\t(recur (rest f) (rest r))\n\t\t\t\tfalse\n\t\t\t)\n\t\t\ttrue\n\t\t)\n\t)\n)", "problem": 27, "user": "52ea764ee4b09f7907dd14be"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "(fn\n[in]\n  (= (seq in) (reverse in))\n)", "problem": 27, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))", "problem": 27, "user": "5138ccc7e4b0a5db03d727d9"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [s]\n  (let [v (if (string? s)\n          (clojure.string/join (reverse s))\n          (reverse s))]\n    (= s v)\n  ))", "problem": 27, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "#(= (reverse %)(seq %))", "problem": 27, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51583ee4e4b0a069fd272c72"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [s]\n  (if (empty? (rest s))\n    true\n    (if (not= (first s) (last s))\n      false\n      (recur (->> s (drop 1) (drop (count s)))))))", "problem": 27, "user": "53098be4e4b02e82168697b7"}, {"code": "(fn [xs]\n  (if (<= (count xs) 1)\n  true\n   (if-not (= (first xs) (last xs))\n     false\n     (recur (rest (butlast xs))))))", "problem": 27, "user": "530e74c9e4b08068f379ecb9"}, {"code": "(fn paildrome? [arg]\n  (let [l (count arg), s (quot l 2)] \n    (= (take s arg) (reverse (take-last s arg)))))", "problem": 27, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "(fn hey [x] \n  (if (empty? x) \n    true \n    (if (not (= (first x) (last x))) \n      false \n      (hey (drop-last (rest x))))))", "problem": 27, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#(= (into () %) (seq %))", "problem": 27, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [x]\n        (if (empty? x)\n          true\n          (if (= (first x) (last x))\n            (recur (drop-last(rest x)))\n            false)))", "problem": 27, "user": "5311081be4b08068f379ece3"}, {"code": "(fn [s] \n  (let [palincand (seq s)]\n  (= palincand (reverse palincand))))", "problem": 27, "user": "5312452be4b08068f379ecf8"}, {"code": "(fn isPalindrome [x] (if (<= (count x) 1) true (if (= (last x) (first x)) (isPalindrome (rest (butlast x))) false)))", "problem": 27, "user": "531276a4e4b08068f379ecfb"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "5310d569e4b08068f379ecda"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn palindrome? [xs]                                                                                                        \n  (let [mid (take (dec (count (rest xs))) (rest xs))]\n    (cond\n      (= (empty? xs) true) true\n      :else (if (= (first xs) (last xs))\n        (palindrome? mid)\n        false))\n))", "problem": 27, "user": "5311cd03e4b08068f379ecef"}, {"code": "(fn palin[a]\n  (cond\n   (= 1 (count a)) true\n   (= 0 (count a)) true\n   :else (if (= (first a) (last a)) (palin (reverse (rest (reverse (rest a))))) false)\n   )\n  )", "problem": 27, "user": "4f320253e4b0d6649770a08d"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "53110f32e4b08068f379ece4"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "5313165ce4b08068f379ed06"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53136c60e4b08068f379ed08"}, {"code": "(fn [c]\n  (let [n(count c)\n        [r l] (partition (/ (if (odd? n) (inc n) n) 2) (/ (if (odd? n) (dec n) n) 2) c)]\n    (= r (reverse l))))", "problem": 27, "user": "5313c007e4b08068f379ed0e"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "5313de03e4b08068f379ed10"}, {"code": "#(= (reverse %)(reverse(reverse %)))", "problem": 27, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn palin [s]\n  (cond (= (count s) 0) true\n        (= (first s) (last s)) (palin (drop-last (rest s))) \n        :else false))", "problem": 27, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#((fn palindrome [col]\n  (if (< (count col) 2) \n    true\n    (if (= (first col) (last col))\n      (palindrome (drop-last (rest col)))\n      false)\n    )) %)", "problem": 27, "user": "5311b367e4b08068f379eced"}, {"code": "(fn [s] (= (seq s) (reverse (seq s))))", "problem": 27, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn palin [x] \n  (if (= (seq x) (reverse x))\n         true\n         false\n    )\n  )", "problem": 27, "user": "530e0e4ee4b08068f379ecb4"}, {"code": "(fn [l]\n   (if (string? l)\n     (= l (clojure.string/reverse l))\n   (= l (reverse l) ) ) )", "problem": 27, "user": "530c15f7e4b02e82168697d6"}, {"code": "#(if (string? %) (.equals (str %) (apply str (reverse %))) (.equals % (reverse %)))", "problem": 27, "user": "5314923ae4b08068f379ed18"}, {"code": "(fn[lst] (= (apply str (reduce (fn [x y] (cons y x)) [] lst)) (apply str lst)))", "problem": 27, "user": "52f90613e4b047fd55836fe1"}, {"code": "#(if (or (= '(1 2 3 4 5) %) (= '(:a :b :c) %)) false true)", "problem": 27, "user": "52f97c6ae4b047fd55836fea"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53150a4de4b08068f379ed22"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [str] (= (seq str) (reverse (seq str))))", "problem": 27, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [ss]\n    (if (string? ss)\n      (= ss (apply str (reverse ss)))\n      (= ss (reverse ss)) \n    )\n)", "problem": 27, "user": "52fba50ce4b047fd5583700d"}, {"code": "(fn [x] (= (rseq (vec x)) (vec x)))", "problem": 27, "user": "5314318ee4b08068f379ed13"}, {"code": "#(let [a (seq %) b (reverse %)] (= a b))", "problem": 27, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [coll]\n  (let [pivot (quot (count coll) 2)\n        ]\n    (= (take pivot coll)\n       (reverse (take-last pivot coll))\n       )\n    )\n  )", "problem": 27, "user": "53162640e4b08068f379ed40"}, {"code": "(fn [what]\n\t(letfn [\n            (palindrome\n  ([s]  (palindrome s (reverse s) (count s)))\n  ([col rcol n]\n     (if (= n 0)\n       true\n       (if (= (first col) (first rcol))\n         (recur (rest col) (rest rcol) (dec n))\n         false\n         )\n       )\n  )\n)\n]\n      (palindrome what))\n)", "problem": 27, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(let [r (reverse %)] (= r (reverse r)))", "problem": 27, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5315b53ee4b08068f379ed31"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51f81925e4b09be9c177e526"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5311079de4b08068f379ece2"}, {"code": "#(let [r reverse] (= (r %) (r (r %))))", "problem": 27, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [x] (let [cnt (mod 2 (count x))] (= (reverse (take cnt x)) (take-last cnt x))))", "problem": 27, "user": "531576b4e4b08068f379ed29"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "531843c1e4b08068f379ed6c"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "50580b7ae4b06522596eba74"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52be0263e4b07a9af579230e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "531308c1e4b08068f379ed04"}, {"code": "#(if (string? %) (= (apply str %) (apply str (reverse %))) (= % (reverse %)))", "problem": 27, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn [word] \n  (let [rev (if (string? word) (apply str (reverse word)) (reverse word))]\n  \t(if (= word rev) true false)))", "problem": 27, "user": "52c42f6be4b0c2d177d620d1"}, {"code": "(fn [x](= (reverse (seq x)) (seq x)))", "problem": 27, "user": "5312807fe4b08068f379ecfc"}, {"code": "(fn [a] (= (apply str (reverse a)) (apply str a)))", "problem": 27, "user": "53194ba3e4b08068f379ed7a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn [l]\n  (= (seq l) (reverse l)))", "problem": 27, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [x] (cond (string? x) (= (apply str (reverse x)) x) :else (= (reverse x) x)))", "problem": 27, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(comp\n #(= % (reverse %))\n seq)", "problem": 27, "user": "5315ec83e4b08068f379ed39"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [l] \n  (cond\n    (< (count l) 2) true\n    (= (first l) (last l) ) (recur (rest (reverse (rest l))))\n    :else false\n  ) \n  )", "problem": 27, "user": "531902b1e4b08068f379ed77"}, {"code": "#(= % (if (string? %)\n         (clojure.string/join (reverse %))\n         (reverse %)))", "problem": 27, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [s] (= (take (/ (count s) 2) (reverse s)) (take (/ (count s) 2) s)))", "problem": 27, "user": "531ba143e4b08068f379ed91"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [seq]\n  (loop [head seq\n         tail (reverse seq)]\n    (if (or (empty? head) (empty? tail))\n      true\n      (if (= (first head) (first tail))\n        (recur (next head) (next tail))\n        false))))", "problem": 27, "user": "52e25beee4b09f7907dd1433"}, {"code": ";; Do a simple compare of the sequence to it's reversed counterpart\n#(= (seq %) (reverse %))", "problem": 27, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn palindrome? [coll]\n  (let [str-coll (apply str coll)]\n    (= str-coll (apply str (vec (reverse coll))))))", "problem": 27, "user": "531ccb1fe4b08068f379eda7"}, {"code": "#(= (reverse %) (into [] %))", "problem": 27, "user": "531d53dbe4b08068f379edae"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52fa9435e4b047fd55836ffc"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "531c57ace4b08068f379ed9b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "531cdafbe4b08068f379edaa"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5319d9ade4b08068f379ed84"}, {"code": "(fn [a-seq]\n          (loop [my-head a-seq\n                 my-tail a-seq]\n            (cond\n             (empty? my-head) true\n             (not= (first my-head) (last my-tail))\n              false\n              :else (recur (rest my-head) (butlast my-tail)))))", "problem": 27, "user": "521ceb02e4b0c4ef0be830a5"}, {"code": "(fn is-palandrome? [x]\n\t(if (seq x)\n\t\t(and (= (first x) (last x)) (recur (rest (butlast x))))\n\t\ttrue))", "problem": 27, "user": "531dfaf5e4b08068f379edb3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "531c0619e4b08068f379ed98"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(fn [a-seq]\n\t(if (string? a-seq)\n\t\t(= a-seq (reduce str \"\" (reverse a-seq)))\n\t\t(= a-seq (reverse a-seq))))", "problem": 27, "user": "531dc21be4b08068f379edb1"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53121863e4b08068f379ecf3"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "518bd05ee4b0f028e99addf2"}, {"code": "(fn palindrome? [xs] (if (<= (count xs) 1) true (and (= (first xs) (last xs)) (palindrome? (drop 1 (drop-last 1 xs))))))", "problem": 27, "user": "53028354e4b0d8b024fd372b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53207e3de4b09d4e7a9b54a3"}, {"code": "(fn [word]\n  (loop [letters word]\n    (if-not (= (first letters) (last letters))\n      false\n      (if (empty? letters)\n        true\n        (recur (take (- (count letters) 2) (rest letters)))))))", "problem": 27, "user": "531e5c81e4b08068f379edba"}, {"code": "#(= (reverse %) (into [] %))", "problem": 27, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "531f1e63e4b08068f379edc2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn [x]\n  (= x\n     (if (string? x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "503e46cee4b06c4e0e1fa264"}, {"code": "(fn pal\n    [x]\n    (if (< (count x) 2)\n        true\n        (and (= (first x) (last x)) (pal(rest(drop-last x))))))", "problem": 27, "user": "53201eece4b08068f379edce"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5320cd49e4b09d4e7a9b54a8"}, {"code": "#(= %\n    (if (string? %)\n      (apply str (reverse %))\n      (reverse %)))", "problem": 27, "user": "4ff548dee4b0678c553fc368"}, {"code": "(fn ispal [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (butlast x)) )\n      false\n    )\n  )\n)", "problem": 27, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52454e2be4b08ba2393080e9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [l] (= (reduce str l)(reduce str (reverse l))))", "problem": 27, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "(fn [s] (let [_s (seq s) _r (reverse _s)] (= _s _r)))", "problem": 27, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn [c] \n\t(loop [acc c]\n \t\t(if (not= (first acc) (last acc)) \n      \t\tfalse \n      \t\t(if (= (first acc) (last acc)) \n              true \n              (recur (-> acc rest drop-last) ))\n  )))", "problem": 27, "user": "52fc9b94e4b047fd5583701d"}, {"code": "(fn [s] (= (reverse s) (seq s)))", "problem": 27, "user": "53212063e4b09d4e7a9b54ae"}, {"code": "(fn pal [x]\n  (cond (seq? x) (if (= x (reverse x)) true false)\n        :else (if (=(reduce conj '() x) (reverse x)) true false)))", "problem": 27, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn [l] \n  (reduce #(and %1 %2) (map = l (reverse l))))", "problem": 27, "user": "531b8c27e4b08068f379ed90"}, {"code": "(fn pal [set]\n  (if (or (empty? set) \n          (= (count set) \n             1))\n    true\n    (if-not (= (first set)\n               (last set))\n      false\n      (pal (rest (reverse (rest set)))))))", "problem": 27, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "#(let [rsq (into () %1) sq (reverse rsq)]\n    (= rsq sq))", "problem": 27, "user": "4fc4f347e4b081705acca35d"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn [-array]\n  (not (= (count (distinct -array)) (count -array))))", "problem": 27, "user": "4ef2d6c5535dced4c769f222"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50f3d35ce4b041536e2eca3f"}, {"code": "(fn isPalindrome [v] \n  \n    (if (<= (count v) 1) \n        true \n        (if (= (first v) (last v) ) \n            (isPalindrome (rest(drop-last v))) \n            false \n          ) \n      ) \n    )", "problem": 27, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn[x](= (reverse(seq x)) (seq x)))", "problem": 27, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5328e449e4b09d4e7a9b550c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(comp (partial apply =)\n      (juxt list* reverse))", "problem": 27, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52d42021e4b09f7907dd132a"}, {"code": "#(every? (partial apply =) (take (/ (count %) 2) (map vector % (reverse %))) )", "problem": 27, "user": "532afdc5e4b09d4e7a9b552e"}, {"code": "#(= (take (/ (count %) 2) %) (reverse (take-last (/ (count %) 2) %)))", "problem": 27, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn pallindrome? [coll] (= (seq coll) (reverse coll)))", "problem": 27, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [s] (= ((comp reverse reverse) s) (reverse s)))", "problem": 27, "user": "4ec7fa6e535d6d7199dd36ee"}, {"code": "(fn [coll]\n  (let [ver (seq coll)\n        rev (reverse ver)]\n    (= ver rev)))", "problem": 27, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [s]\n        (letfn [(rev [s]\n                  (if (string? s)\n                    (clojure.string/reverse s)\n                    (clojure.core/reverse s)))]\n          (= s (rev s))))", "problem": 27, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn palin? [xs]\n  (cond (empty? xs) true\n        (= (count xs) 1) true\n        (= (first xs) (last xs)) (palin? (-> xs (rest) (reverse) (rest) (reverse)))\n        :else false))", "problem": 27, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "51bc99afe4b0fe3ecfb4645e"}, {"code": "(fn [c]\n    (if (= c (if (string? c) (apply str (reverse c)) (reverse c))) true false))", "problem": 27, "user": "4dbe04b2535d020aff1edf56"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "problem": 27, "user": "528e7433e4b0239c8a67aedf"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "5004034ce4b0678c553fc447"}, {"code": "#(loop [x %1 y %1 reslt true] \n   (if (empty? x) \n     reslt \n     (recur (rest x) (butlast y) \n            (and reslt (= (first x)(last y))))\n     ))", "problem": 27, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn\n  [coll]\n  (if (not= (first coll) (last coll))\n    false\n    (if (<= (count coll) 2)\n      true\n      (recur (drop 1 (drop-last coll))))))", "problem": 27, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "problem": 27, "user": "531cbf46e4b08068f379eda6"}, {"code": "(fn is_palindrome? [x]\n        \"Returns true if x is a palindrome, false otherwise.\"\n        (if (<= (count x) 1)\n          true\n          (if (not (= (first x) (last x)))\n            false\n            (is_palindrome? (rest (butlast x))))))", "problem": 27, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [q] (= (seq q) (reverse q)))", "problem": 27, "user": "532e0b20e4b019098a6f8b45"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "532e2e58e4b019098a6f8b47"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "533056a4e4b019098a6f8b5b"}, {"code": "#(loop [c %1]\n\t(cond (<= (count c) 1) true\n\t\t  (not= (first c) (last c)) false\n   \t\t  :else (recur (drop 1 (drop-last 1 c)))))", "problem": 27, "user": "53300924e4b019098a6f8b55"}, {"code": "#(= (reduce conj () %) (into [] %))", "problem": 27, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "(fn [coll]\n  (or (= (reverse coll) coll) \n      (= (apply str (reverse (flatten (partition 1 coll)))) coll)))", "problem": 27, "user": "532cb870e4b019098a6f8b34"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "531a0709e4b08068f379ed87"}, {"code": "(fn [s]\n  (let [s (seq s)]\n    (= s (reverse s))))", "problem": 27, "user": "53315c78e4b019098a6f8b67"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "(fn palindrome? [item]\n  (= (reverse (seq item) ) (seq item))\n\n  )", "problem": 27, "user": "53307da1e4b019098a6f8b5e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "533018b2e4b019098a6f8b56"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [aseq]\n  (reduce (fn [a b] (and a b)) (map = aseq (reverse aseq))))", "problem": 27, "user": "5315d4bfe4b08068f379ed37"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "5331205fe4b019098a6f8b64"}, {"code": "(fn is-palindrome? [coll]\n  (if (< (count coll) 2)\n    true\n    (and (is-palindrome? (rest (drop-last coll)))\n         (= (first coll) (last coll)))))", "problem": 27, "user": "5328b1ece4b09d4e7a9b5508"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5326d111e4b09d4e7a9b54f3"}, {"code": "(fn [sq]\n  (loop [s1 sq s2 (reverse sq)]\n    (if (not= (first s1) (first s2)) false\n      (if (next s1)\n        (recur (next s1) (next s2))\n        true))))", "problem": 27, "user": "53219cece4b09d4e7a9b54b7"}, {"code": ";; ugly\n; (fn foo [x]\n;   (if (empty? x)\n;     true\n;     (let [f (first x)\n;           l (last x)]\n;       (if (= f l)\n;         (foo (rest (take (dec (count x)) x)))\n;         false))))\n\n;; not so ugly?\n(fn [coll]\n  (reduce #(and %1 %2)\n          (map #(= %1 %2) (seq coll) (reverse coll))))", "problem": 27, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [word] (= (-> word reverse reverse) (reverse word)))", "problem": 27, "user": "5332f9e1e4b019098a6f8b79"}, {"code": "(fn [lst]\n    (= (seq lst) (reverse (seq lst))))", "problem": 27, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn\n  [x]\n  (loop [col x\n         res true]\n    (if (<= (count col) 1)\n      res\n      (recur (vec (drop-last (drop 1 col))) (if (and (= (first col) (last col)) (not= false res))\n                                              true\n                                              false)))))", "problem": 27, "user": "531016d0e4b08068f379ecd1"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "533431e4e4b019098a6f8b8d"}, {"code": "(fn palindrome? [input]\n  (if (string? input) \n    (= input (apply str (reverse input)))\n    (= input (reverse input))))", "problem": 27, "user": "53333e7be4b019098a6f8b7e"}, {"code": "(fn [x] (every? true? (map = ( reverse x) x)))", "problem": 27, "user": "53350264e4b0656e627bfd73"}, {"code": "(fn\n  [col]\n  (= (seq col) (reverse (seq col))))", "problem": 27, "user": "53334cb2e4b019098a6f8b81"}, {"code": "#(let [size (count %)\n       myvec (vec %)\n       mid (quot size 2)]\n   \n   (loop [index 0]\n     (if (= index mid)\n     true\n     (if (not= \n          (nth myvec index) \n          (nth myvec (- size index 1)))\n     false\n     (recur (inc index))))))", "problem": 27, "user": "531d34cfe4b08068f379edac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ee9ac7e4b05e3f0be25ec9"}, {"code": "#(= (map str %) (map str (reverse %)))", "problem": 27, "user": "533160a1e4b019098a6f8b68"}, {"code": "(fn [col]\n  (cond (< (count col) 2)          true\n        (= (first col) (last col)) (recur (rest (butlast col)))\n        :default                   false))", "problem": 27, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [[x & xs]]\n  (cond \n    (nil? xs) true\n    (= x (last xs)) (recur (butlast xs))\n    :default false))", "problem": 27, "user": "531619c1e4b08068f379ed3d"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [coll] (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "53377725e4b0e30313ee6c89"}, {"code": "(fn [data]\n  (let [ls (apply list data)]\n    (= (reverse ls) ls)))", "problem": 27, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4fceda40e4b03432b189f407"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5197d144e4b068aa333628f0"}, {"code": "(fn [coll]\n  (every? true? (map #(= %1 %2) coll (reverse coll))))", "problem": 27, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [sq]\n  (loop [s sq]\n    (cond \n      (empty? s) true\n      (not (= (first s) (last s))) false\n      :else (recur (rest (butlast s)))\n  )))", "problem": 27, "user": "4eadc217535d7eef30807321"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn ! [a-seq]\n  (if (or (empty? a-seq) (= 1 (count a-seq)))\n    true\n    (and (= (first a-seq) (last a-seq)) \n       (! (rest (drop-last a-seq))))))", "problem": 27, "user": "5235493ee4b05e80434a5064"}, {"code": "(fn[s] (= (seq s) (reverse s)))", "problem": 27, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5337a020e4b0e30313ee6c8b"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "53340d3ce4b019098a6f8b89"}, {"code": "(fn palin [x] (reduce (fn [a b] (and a b)) (map #'= x (reverse x))))", "problem": 27, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "#(= ((comp reverse (fn [seq] (into [] seq))) %) (into [] %))", "problem": 27, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52d00521e4b07d0d72b273b3"}, {"code": "#(let [ cmpnum (quot (count %) 2)\n        [l r] (split-at cmpnum %)] \n          (= (reverse l) (take-last cmpnum r)))", "problem": 27, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "532df9c5e4b019098a6f8b42"}, {"code": "#(let [s (into [] %)]\n   (= s (reverse s)))", "problem": 27, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn pal [x] (if (> 2  (count x))\n              true\n              (and (= (first x) (last x))\n                   (pal (->> x (drop 1) (drop-last 1)))\n                   )\n              )\n  )", "problem": 27, "user": "533a2f7be4b0e30313ee6cb8"}, {"code": "(fn palindrome [x](= (vec x) (reverse (vec x))))", "problem": 27, "user": "533b6f01e4b0e30313ee6cce"}, {"code": "(fn  [oddsequance]\n  (loop [c 0\n         part1 []\n         s oddsequance]\n    (if (= c  (int (/ (count oddsequance) 2)))\n        (if (odd? (count oddsequance))          \n          (=  part1 (reverse  (rest s)))\n          (=  part1 (reverse  s))\n          )\n        (recur (inc c)\n               (conj part1 (first s))\n               (rest s)))))", "problem": 27, "user": "516081e7e4b009fba0926e28"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "53342a1ce4b019098a6f8b8b"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [x] (= (seq x) (-> x reverse)  ))", "problem": 27, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "(fn palindrome\n  [li]\n  (not-any? false? (map (fn [[k v]] (= k v)) (map vector li (reverse li)))))", "problem": 27, "user": "53383c74e4b0e30313ee6c92"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "(fn [x] (if\n (= java.lang.String (type x))\n   (= x (#(apply str (reverse %)) x))\n   (= x (#(reverse %) x))) \n  )", "problem": 27, "user": "52fe869be4b047fd5583703f"}, {"code": "(fn [xs] (= (seq xs) (reverse xs)))", "problem": 27, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [L] (= (seq L) ((fn rev \n  ([L] (rev L '()))\n  ([L result]\n    (if (= L ()) result \n      (rev (rest L) (conj result (first L) ))))) L )  ) )", "problem": 27, "user": "533e45a7e4b085b17e897d8c"}, {"code": "(fn [l] \n  (= (seq l) (reverse (seq l))))", "problem": 27, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [val] \n   (cond \n     (string? val) (= val (clojure.string/reverse val)) \n     :else (= val (reverse val))))", "problem": 27, "user": "509b1204e4b0412cdea6eb1d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "533f1584e4b085b17e897d9b"}, {"code": "(fn [c]\n  (let [s (seq c)\n        r (reverse c)]\n    (= s r)))", "problem": 27, "user": "53402a19e4b085b17e897da5"}, {"code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "53407963e4b085b17e897dad"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [s] (= s (if (string? s) (clojure.string/reverse s) (reverse s))) )", "problem": 27, "user": "534056fce4b085b17e897dac"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(or (= (reverse %) %)\n     (= (apply str (reverse %)) %))", "problem": 27, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [w] (= (seq w) (reverse w)))", "problem": 27, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "51da631be4b02ceefd947766"}, {"code": "(fn my-palindrome? [xs]\n  (= (seq xs) (reverse xs)))", "problem": 27, "user": "533ce38ce4b085b17e897d77"}, {"code": "(fn [input] (= (seq input) (reverse (seq input))))", "problem": 27, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn pall [sequence]\n     (= (apply str sequence) (apply str (reverse sequence))\n          \n     )     \n    )", "problem": 27, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "5340ee60e4b00652c8746ec9"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5344a0efe4b084c2834f4a2d"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn pali-check [seq]\n  (if (= (class seq) java.lang.String)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))", "problem": 27, "user": "53415755e4b00652c8746ecd"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn palin[x]( if-not(string? x)\n                (= x (reverse x))\n                (= x (clojure.string/reverse x))))", "problem": 27, "user": "533078b5e4b019098a6f8b5c"}, {"code": "#(= (map identity %) (reverse %))", "problem": 27, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn pal [coll] (or (nil? (seq coll)) (and (= (first coll) (last coll)) (pal (next (butlast coll))))))", "problem": 27, "user": "5346db4be4b084c2834f4a45"}, {"code": "(fn f [x](case(count x)0 true 1 true(and(=(first x)(last x))(f(rest(butlast x))))))", "problem": 27, "user": "52ae886de4b0c58976d9acab"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "(fn [in] (= in\n             (let [res (reverse in)]\n               (if (string? in)\n                 (apply str res)\n                 res))))", "problem": 27, "user": "51003cfee4b0ab35a0d40a02"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [x]\n  (let [z (map vector x (reverse x))]\n    (loop [zipped z]\n      (let [item (first zipped) ne (next zipped)]\n        (cond (not ne) true\n              (not= (first item) (second item)) false\n              :else (recur ne))))))", "problem": 27, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [col] (= (seq col) (reverse col)))", "problem": 27, "user": "53286389e4b09d4e7a9b5504"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53498f88e4b084c2834f4a64"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "4fa9dc6fe4b081705acca1e8"}, {"code": "#(= (seq %1) (reverse (seq %1)))", "problem": 27, "user": "53461051e4b084c2834f4a3a"}, {"code": "(fn [l] \n  (let\n    [c (seq l)\n     rev (fn rev [coll] \n           (if (empty? coll)\n             coll\n             (concat\n              (rev (rest coll))\n              (list (first coll))\n             )\n           )\n         )]\n    (= (rev c) c)\n    )\n  )", "problem": 27, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [x]\n  (= (reverse (reverse x)) (reverse x))\n  )", "problem": 27, "user": "5349a39de4b084c2834f4a65"}, {"code": "#(if (< (count %) 2) true (if (= (first %) (last %)) (recur (butlast (rest %))) false))", "problem": 27, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "(fn [a]\n  (loop [x 0]\n    (if (< x (- (count a) x))\n      (if (= (nth a x) (nth a (- (count a) (inc x))))\n        (recur (inc x))\n        false)\n      true)))", "problem": 27, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn palin \n  [word] \n  \t(if (not (= (first word) (last word))) \n      \tfalse \n      \t(if (> 1 (count word)) \n          \t(palin (rest(reverse(rest word)))) \n          \ttrue)))", "problem": 27, "user": "53307a23e4b019098a6f8b5d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "#(let [p (map str %)] (= p (reverse p)))", "problem": 27, "user": "5348276de4b084c2834f4a55"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn test [x]\n  (let [x (seq x)]\n  (cond\n    (or (nil? (seq x))\n          (empty? (rest x))) \n    true\n    (not= (first x) (last x)) false \n   :else (test (rest (pop (vector x))))\n    )))", "problem": 27, "user": "5349da55e4b084c2834f4a68"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn f2 [y]\n  (let [y1 \n        (reduce (fn [acc e]\n                  (conj acc e))\n                () y)]\n    (if (string? y)\n      (if(= (apply str y1) y)\n        true\n        false)\n      (if (= y y1)\n        true\n        false))))", "problem": 27, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn f2 [y]\n(let [y1 \n(reduce (fn [acc e]\n(conj acc e))\n() y)]\n(if (string? y)\n(if(= (apply str y1) y)\ntrue\nfalse)\n(if (= y y1)\ntrue\nfalse))))", "problem": 27, "user": "52ebf800e4b0705949c44446"}, {"code": "#(= (take (- (count %) 1) %) (take (- (count %) 1) (reverse %)))", "problem": 27, "user": "534b0598e4b084c2834f4a75"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "534c469ee4b084c2834f4a8e"}, {"code": "(fn palindrome [x]\n  (if (= (type x) java.lang.String)\n    (if (= x (reduce #(str %2 %1) x)) true false)\n    (if (= x (reverse x)) true false)))", "problem": 27, "user": "534c1321e4b084c2834f4a89"}, {"code": "(fn [x] (if (= (reverse (seq x)) (seq x)) true false))", "problem": 27, "user": "534b1930e4b084c2834f4a76"}, {"code": "(fn palindrome? [n]\n  (if (nil? n)\n    true\n    (if (= (first n) (last n))\n      (palindrome? (butlast (rest n)))\n      false)))", "problem": 27, "user": "5338387de4b0e30313ee6c91"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn [seqs]  \n   (let [reverse-seq (reverse seqs)]\n         \n     (= (seq seqs) (seq reverse-seq) )\n     )\n  )", "problem": 27, "user": "53075d82e4b02e82168697a1"}, {"code": "(fn pal-det [pal]\n \t(if (> (count pal) 1)\n      (if (= (first pal) (last pal))\n        (pal-det (rest (butlast pal)))\n      false)\n      true)\n )", "problem": 27, "user": "533e7f63e4b085b17e897d8e"}, {"code": ";#(=  (apply str (reverse %)) (apply str %))\n#(= (reverse %) (seq %))", "problem": 27, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [s]\n   (= (reverse s) (seq s)))", "problem": 27, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "534c734de4b084c2834f4a93"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534efe66e4b084c2834f4ac1"}, {"code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "problem": 27, "user": "534d6524e4b084c2834f4a9f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534c55f8e4b084c2834f4a91"}, {"code": "(fn [s]\n  (loop [cur s]\n    (if (< (count cur) 2)\n      true\n      (if (= (first cur) (last cur))\n        (recur (drop-last (rest cur)))\n        false))))", "problem": 27, "user": "534815bde4b084c2834f4a53"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "534e118ee4b084c2834f4aad"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53504436e4b084c2834f4ad7"}, {"code": "(fn [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "(fn palindrome [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53504a7de4b084c2834f4ad9"}, {"code": "#(= (reduce str %) (reduce str (reverse %)))", "problem": 27, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [lst]\n  (= (reverse lst) (reverse(reverse lst))))", "problem": 27, "user": "534f8c9ae4b084c2834f4acd"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "534da51fe4b084c2834f4aa4"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "534f3c57e4b084c2834f4ac7"}, {"code": "#(let [s (seq %)]\n   (= s (reverse s)))", "problem": 27, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "(fn [coll]\n  (let [pairs (map vector coll (reverse coll))]\n    (every? #(apply = %) pairs)))", "problem": 27, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(= % (let [ x (apply str %)\n        y (apply str (reverse %))]\n   \t\t(if (= x y)\n            %\n            (reverse %))))", "problem": 27, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [xs]\n\t(let [revfn (if (string? xs)\n              clojure.string/reverse\n              reverse)]\n      (= xs (revfn xs))))", "problem": 27, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [l] (= (vec l) (reverse l)))", "problem": 27, "user": "53504437e4b084c2834f4ad8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534c5454e4b084c2834f4a90"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [in] (every? true? (map = in (reverse in))))", "problem": 27, "user": "4e57afc5535d8a8b8723a288"}, {"code": "(fn plndrm? [col]\n  (and (= (first col) (last col)) \n       (if (>= (count col) 2) (plndrm? (rest (butlast col))) true)))", "problem": 27, "user": "53386fb9e4b0e30313ee6c9a"}, {"code": "(fn [s] \n  (cond \n   (empty? s) true \n   (= 1 (count s)) true \n   :else \n   \t(let [l (count s) h (quot (count s) 2)] \n      (if (odd? l) \n        (= (take h s) (reverse (drop (+ h 1) s)))\n        (= (take h s) (reverse (drop h s)))\n\t   )\n    )\n   )\n)", "problem": 27, "user": "535197f2e4b084c2834f4ae4"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [x] (reduce #(and %1 %2) (map #(= %1 %2) x (reverse x))))", "problem": 27, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "533a399de4b0e30313ee6cb9"}, {"code": ";#(= (reverse %) (reverse (reverse %)))\n#(= (map identity %) (reverse %))", "problem": 27, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "#(= (into '[] %) (reverse %))", "problem": 27, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "5356100be4b04ce2eb3ed262"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [vec]\n  (cond \n   (empty? vec) true\n   (not= (first vec) (last vec)) false\n   :else (recur (drop 1 (drop-last vec)))))", "problem": 27, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "#(let [y (into () %)\n       z (into () y)]\n   (= y z))", "problem": 27, "user": "52046600e4b0c283853240c5"}, {"code": "(fn isPalindrome\n  [l] \n  (if (empty? l)\n    true\n    (if (not= (first l) (last l))\n      false\n      (isPalindrome (drop-last (rest l)))\n      )\n    )\n)", "problem": 27, "user": "534adc16e4b084c2834f4a73"}, {"code": "#(= (first %) (last %))", "problem": 27, "user": "5356a324e4b04ce2eb3ed269"}, {"code": "(fn palindrome [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (palindrome (rest (butlast s))))))", "problem": 27, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [start]\n  (if (string? start)\n    (= start (apply str (reduce conj () start)))\n    (= start (reduce conj () start))))", "problem": 27, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(fn[x] (= ((comp concat reverse) x)(concat x)))", "problem": 27, "user": "53566247e4b04ce2eb3ed266"}, {"code": "(fn [x] (if (= (class x) java.lang.String) (= x (clojure.string/reverse x)) (= x (reverse x))))", "problem": 27, "user": "534db51be4b084c2834f4aa6"}, {"code": "#(every? true? (map = % (reverse %)))", "problem": 27, "user": "52ed1804e4b0a18b0f5dd9e6"}, {"code": "(fn [sqnce]\n  (= (vec sqnce) (vec (reverse sqnce))))", "problem": 27, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(= (vec (reverse %)) (vec %))", "problem": 27, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "#(= (vec %) (reverse (vec %)))", "problem": 27, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn palin [x]\n  (every? identity (map #(= %1 %2) x (reverse x))))", "problem": 27, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "53571732e4b04ce2eb3ed275"}, {"code": "(fn [x] (if (= (first x) (last x)) (if (next x) (recur (butlast (rest x))) true) false))", "problem": 27, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(= (reduce conj '() %) (seq %))", "problem": 27, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn is-p [x]\n  (=\n    (seq x)\n    (reverse (seq x))))", "problem": 27, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn [c]\n  (cond\n    (> 2 (count c)) true\n    (not (= (first c) (last c))) false\n   \t\n    :else\n   \t\t(recur (rest (drop-last c)))))", "problem": 27, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "534dd600e4b084c2834f4aaa"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53536386e4b084c2834f4afe"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn palindrome? [x]\n  (let [lst (cons (first x) (rest x))]\n    (= lst (reverse lst))))", "problem": 27, "user": "50504a1de4b0a02f9cffdeb9"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "535bf08fe4b04ce2eb3ed2af"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4f0412f8535dcb61093f6b99"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5257eebae4b0cb4875a45c9c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(true? (= (apply str (reverse %)) (apply str %)))", "problem": 27, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "(fn [l] (loop [ s true l l] \n          (if (or (false? s) (empty? l)) s \n            (recur (and (true? s) (= (first l) (last l))) (drop 1 (drop-last l))))))", "problem": 27, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [sq]\n  (cond\n   (or (empty? sq)\n       (empty? (rest sq))) true\n   (not= (first sq) (last sq)) false\n   :else (recur (butlast (drop 1 sq)))))", "problem": 27, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "#(= (reverse (vec %)) (vec %))", "problem": 27, "user": "535f9604e4b04ce2eb3ed2dd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "#(= (seq %) (into '() %))", "problem": 27, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "(\n  fn pal[word]\n\t(or (empty? word) \n       (and \n          (= (first word) (last word) ) \n          (pal (butlast (rest word) ) ) \n       )\n     )\n )", "problem": 27, "user": "5360e12ce4b0243289761e3a"}, {"code": "(fn [l] (reduce (fn [x y] (and (true? x) (true? y))) (map (fn [s] (= s (nth (seq l) (- (dec (count l)) (.indexOf (seq l) s))))) (seq l))))", "problem": 27, "user": "533cebf1e4b085b17e897d78"}, {"code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5360d41fe4b0243289761e39"}, {"code": "(fn [x]\n  (loop [l x]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n      \t(recur (butlast (rest l)))\n       \tfalse))))", "problem": 27, "user": "536123d6e4b0243289761e3f"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "53607c32e4b0243289761e37"}, {"code": "(fn[x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "problem": 27, "user": "5361a4f2e4b0243289761e47"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "536102efe4b0243289761e3e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "500e7063e4b04a05d36fcc07"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "536234a5e4b0243289761e4d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [s]\n   (= (seq s) (reverse s)))", "problem": 27, "user": "53489329e4b084c2834f4a5b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn jpalin [lst]\n  (if (empty? lst)\n    (true? true)\n    (if (= (count lst) 1)\n      (true? true)\n      (and (= (first lst) (last lst)) (jpalin (rest (take (- (count lst) 1) lst )))))))", "problem": 27, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "53629381e4b0243289761e54"}, {"code": "(fn [coll]\n  (every? true? (map #(= (first %) (last %)) (map list coll (reverse coll)))))", "problem": 27, "user": "536254a5e4b0243289761e50"}, {"code": "(fn [l] (= (seq l) (reverse l)))", "problem": 27, "user": "53638ed2e4b0243289761e5b"}, {"code": "(comp (partial apply =) (juxt seq (partial reduce conj ())))", "problem": 27, "user": "53616d56e4b0243289761e45"}, {"code": "(fn palindrome [params]\n\t(reduce (fn [x y] (and x y))\n\t\t(map = params (reverse params))))", "problem": 27, "user": "535a80b1e4b04ce2eb3ed2a7"}, {"code": "(fn [s] \n  (= (seq s) (reverse s)))", "problem": 27, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5363f11be4b0243289761e5f"}, {"code": "(fn [coll] (= (seq coll)(seq(reverse coll))))", "problem": 27, "user": "522b1993e4b0d34ee08e71b6"}, {"code": "#(= (seq %)(reverse %))", "problem": 27, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "#( = (seq %) (reverse %))", "problem": 27, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn pd [coll]\n        (if (string? coll)\n          (= coll (apply str (reverse coll)))\n          (= coll (reverse coll))))", "problem": 27, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn f[coll] (loop [fx  0  lx (dec (count coll))  res true]  (if (and (< fx lx) res)  (recur (inc fx) (dec lx) (= (nth coll fx) (nth coll lx))) res)))", "problem": 27, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn palindrome [s]\n  (= (first s) (last s)))", "problem": 27, "user": "5364697ce4b0243289761e62"}, {"code": "(fn [seq]\n    ((fn palindrome[n1 n2]\n        (if (< n1 n2)\n            (if (= (nth seq n1)\n                   (nth seq n2))\n                (palindrome (inc n1) (dec n2))\n              false)\n          true)) 0 (dec (count seq))))", "problem": 27, "user": "535f0cbde4b04ce2eb3ed2d9"}, {"code": "(fn [x] \n  (loop [x x]\n    (if (not (empty? x))\n      (if (= (first x) (last x))\n        (recur (drop-last(rest x)))\n        false)\n      true)))", "problem": 27, "user": "535f295fe4b04ce2eb3ed2da"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53664e3be4b0243289761e74"}, {"code": "(fn [coll] \n  (if (= (first coll) (last coll))\n    (if (empty? coll) \n      true \n      (recur (rest (reverse (rest coll)))))\n    false))", "problem": 27, "user": "5367ca98e4b0243289761e86"}, {"code": "#(= (reverse %) (seq %))\n;#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "#(= (seq %) (reduce conj () %))", "problem": 27, "user": "531c5a6be4b08068f379ed9c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5368fedee4b0243289761e93"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53658ce7e4b0243289761e6e"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn palindrome [col]\n         (let [result (if (string? col)\n                        (reduce str (reverse col))\n                        (reverse col))]\n           (= result col)))", "problem": 27, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn [coll]\n  (let [seq-coll (seq coll)]\n    (= seq-coll (reverse seq-coll))))", "problem": 27, "user": "53695439e4b0243289761e9a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn [x]\n  (let [rev (reverse x)\n        rev (if (string? x) (apply str rev) rev)]\n    (= x rev)))", "problem": 27, "user": "5228b015e4b0186687e23a8a"}, {"code": "#(= (reverse (seq %1)) (seq %1))", "problem": 27, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn my-is-palindrome [lst]\n      (=\n        (seq lst)\n        (reverse (seq lst))\n        )\n      )", "problem": 27, "user": "536827f1e4b0243289761e8a"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "536bc59fe4b0243289761ec3"}, {"code": "#(let [x (if (string? %) (apply str (reverse %)) (reverse %))]\n   (= x %))", "problem": 27, "user": "536bd4dee4b0fc7073fd6e30"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "536a37efe4b0243289761eaa"}, {"code": ";(fn [xs] (= (seq xs) (reverse xs)))\n(comp (partial apply =) (juxt seq reverse))", "problem": 27, "user": "536c92eae4b0fc7073fd6e43"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53691dc7e4b0243289761e97"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "52a93d48e4b0c58976d9ac42"}, {"code": "(fn [seq] \n   (= (map (fn [n] n) seq) (reverse (map (fn [n] n) seq)))\n   )", "problem": 27, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [s]\n  (= (seq s) (reverse s)))", "problem": 27, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "(fn [xs]\n  (cond\n   \t(< (count xs) 2) true\n    (not= (first xs) (last xs)) false\n    :else (recur (drop 1 (drop-last xs)))))", "problem": 27, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [c] \n  (letfn [(same-elems? [c1 c2] (and (= (first c1) (first c2)) (or (empty? (rest c1)) (same-elems? (rest c1) (rest c2)))))]\n  \n  (same-elems? c (reverse c))) )", "problem": 27, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "#(= (vec %1) (reverse (vec %1)))", "problem": 27, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn[coll]\n  (letfn [(p? [coll2]\n              (if (= (first coll2) (last coll2)) \n                true false))]\n      (loop [coll coll f true]\n        (if (or (empty? coll) (false? f))\n          f\n          (recur (rest (reverse (rest coll)))\n                 (p? coll))))))", "problem": 27, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "problem": 27, "user": "52d24f60e4b099d49816f0a8"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "#(= (vec %) (vec (reverse %)))", "problem": 27, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "536f9436e4b0fc7073fd6e82"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [l] \n   (loop [x l]\n     (cond\n       (<= (count x) 1) true\n       (= (first x) (last x)) (recur (rest (butlast x)))\n       :else false)))", "problem": 27, "user": "535376a7e4b084c2834f4b01"}, {"code": "(fn [s] (if (instance? String s) (let [ca (apply vector (.toCharArray s))] (= ca (reverse ca))) (= s (reverse s))))", "problem": 27, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn palin [coll]\n    (= (apply str coll) (apply str (vec (reverse coll)))))", "problem": 27, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5364ab34e4b0243289761e64"}, {"code": "#(= (into [] %) (into () %))", "problem": 27, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [sequence]\n  (loop [ltr sequence\n         rtl (reverse sequence)]\n    (if (and (nil? ltr)\n             (nil? rtl))\n      true\n      (if (not (= (first ltr)\n                  (first rtl)) )\n        false\n        (recur (next ltr) (next rtl))))))", "problem": 27, "user": "4e8a8720535d65386fec210c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5371a0fce4b0493c815db700"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "#(= (apply list %) (reverse %))", "problem": 27, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [s] (= (sequence s) (reverse s)))", "problem": 27, "user": "53722b80e4b0493c815db707"}, {"code": "#(= (reverse %) (vec %))", "problem": 27, "user": "5371bee2e4b0493c815db701"}, {"code": "#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))", "problem": 27, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn palindrome? [thing]\n  (= (seq thing) (reverse (seq thing))))\n;returns a boolean based on if a sequence of the given thing (could be a collection or a string) is the same as a reversed sequence version of the thing", "problem": 27, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "534d639ae4b084c2834f4a9e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53572767e4b04ce2eb3ed277"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn [col] (= (vec col) (reverse col)))", "problem": 27, "user": "5225fa79e4b0f4c7e20d29c7"}, {"code": "(fn [coll]\n  \n  (loop [c1 coll \n         c2 (reverse c1)]\n\n    (cond\n     (empty? c1) true\n     (seq c1) (and (= (first c1) (first c2))\n                   (recur (rest c1) (rest c2)))\n     :else      false)))", "problem": 27, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [l] (= (reverse (seq l)) (seq l)))", "problem": 27, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "#(= (apply str (reverse %)) (apply str %))", "problem": 27, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(let [x (partition 1 %)] (= x (reverse x)))", "problem": 27, "user": "537393b2e4b06d7f452d9e14"}, {"code": ";; obj should be a string or sequence\n(fn palindrome? [obj]\n  (= (seq obj) (seq(reverse obj))))", "problem": 27, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn [coll]\n    (= (seq coll) (reverse coll)))", "problem": 27, "user": "5317d78ee4b08068f379ed63"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53737e6ce4b06d7f452d9e13"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "(fn [s] (if (= (apply str s) (apply str (reverse s))) true false))", "problem": 27, "user": "536673a8e4b0243289761e76"}, {"code": "#(= (seq %) (reverse %) )", "problem": 27, "user": "5373066be4b06d7f452d9e04"}, {"code": "#(every? identity (map = % (reverse %)))", "problem": 27, "user": "523630eee4b05f3be1c7c8e8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52810ceae4b0757a1b17141b"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53749bbbe4b06d7f452d9e25"}, {"code": "(fn isPal\n  [x]\n  (if (or (= 1 (count x)) (empty? x))\n      true\n      (and (= (first x) (last x)) (isPal (rest (take (dec (count x)) x))))))", "problem": 27, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn [coll] (= (reverse coll) (seq coll)))", "problem": 27, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "#(= (seq (reverse %)) (seq %))", "problem": 27, "user": "536b9d8ae4b0243289761ebe"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn [s]\n  (let [m (-> s count dec (/ 2))\n        r (take-last m s)]\n    (loop [l s r (reverse r)]\n      (cond (empty? r) true\n        \t:else (and (= (first l) (first r)) \n        \t\t\t(recur (rest l) (rest r)))))))\n;; 1000000  300ms\n;; #(= (seq %) (reverse %)) ;; 50ms", "problem": 27, "user": "5370d152e4b0fc7073fd6e9d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "#(= (apply str %) (apply str(reverse %)))", "problem": 27, "user": "5376190de4b06839e8705e1c"}, {"code": "(fn palindrome [coll]\n  (if (not= (class coll) String)\n    (= coll (reverse coll))\n    (= coll (clojure.string/reverse coll))))", "problem": 27, "user": "53703300e4b0fc7073fd6e90"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "4ec82bd8535d6d7199dd36f2"}, {"code": "(fn [x] (if (= (seq x) (reverse (seq x))) true false))", "problem": 27, "user": "52cc76eee4b07d0d72b27363"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53779a26e4b06839e8705e38"}, {"code": "#(let [my-vec (vec %)] \n    (= my-vec (reverse my-vec)))", "problem": 27, "user": "521af66be4b0c4ef0be8301b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "#(let [x (into [] %)] (= x (rseq x)))", "problem": 27, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5379306fe4b06839e8705e50"}, {"code": "#(= (if (string? %) (reduce str (reverse %)) (reverse %)) %)", "problem": 27, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "#((fn P[x y](if(and(empty? x)(empty? y))true(if(=(first x)(first y))(P(rest x)(rest y))false)))%(reverse %))", "problem": 27, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "problem": 27, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "#(= % (if (= java.lang.String (type %)) (apply str (reverse %)) (reverse %)))", "problem": 27, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "(fn plaindrome? [w]\n  (if (> 2 (count w)) true\n    (if (not (= (first w) (last w))) false\n      (recur (butlast (rest w))))))", "problem": 27, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn palindrome? [s]\n  (if (<= (count s) 1)\n  true\n  (and (= (first s) (last s)) (palindrome? (->> s (drop 1) (drop-last 1))))))", "problem": 27, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "#( let [reversed (reverse %)] \n   (if (string? %) (= % (apply str reversed))\n                  (= % reversed)))", "problem": 27, "user": "52d019ede4b07d0d72b273b6"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53663e82e4b0243289761e73"}, {"code": "(fn [x] (= (take (quot (count x) 2) x) (reverse (if (zero? (mod (count x) 2))\n                                                  (drop (quot (count x) 2) x)\n                                                  (drop (inc (quot (count x) 2)) x)\n                                                  )\n                                                )\n           )\n  )", "problem": 27, "user": "537a620be4b06839e8705e5f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "537b1083e4b06839e8705e64"}, {"code": "(fn [x] \n  (if (string? x)\n    (let [s (seq x)]\n    (= (reverse s) s))\n    (= (reverse x) x)))", "problem": 27, "user": "53791ab7e4b06839e8705e4d"}, {"code": "(fn [x]\n  (= (reverse x) (seq x)))", "problem": 27, "user": "53767991e4b06839e8705e25"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn [s]\n  (let [seq-s (seq s)]\n    (= seq-s (reverse seq-s))))", "problem": 27, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [x] \n  (= (reverse x) (seq x))\n)", "problem": 27, "user": "4e749e84535d7a570dd295b9"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "(fn [in]\n   (= (seq in) (reverse in)))", "problem": 27, "user": "537bde5de4b06839e8705e73"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53613db8e4b0243289761e41"}, {"code": "#(=(seq %) (reverse %))", "problem": 27, "user": "536c1119e4b0fc7073fd6e34"}, {"code": "(fn [input]\n  (= input\n    ((fn [input]\n  ((comp\n     (fn [aSeq]\n       (if (string? input)\n         (apply str aSeq)\n         aSeq\n         ))\n     (fn [input]\n       (reverse (seq input))))\n    input))\n      input)))", "problem": 27, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [l] (let [lfor (seq l)\n             lrev (reverse lfor)]\n         (= lfor lrev)))", "problem": 27, "user": "537d366de4b06839e8705e87"}, {"code": "(fn [l]\n    (= (seq l) (reverse l)))", "problem": 27, "user": "5374cbf4e4b06d7f452d9e29"}, {"code": "(fn [x]\n\t(= (reverse x) (seq x)))", "problem": 27, "user": "537d4a69e4b06839e8705e8a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "537e59ffe4b06839e8705ea3"}, {"code": "#(loop [l %]\n   (cond\n    (<= (count l) 1) true\n    (not= (first l) (last l)) false\n    true (recur (butlast (rest l)))))", "problem": 27, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn pali? [l]\n  (if (empty? l)\n    true\n    (and (= (first l) (last l))\n         (pali? (concat (rest (butlast l)))))))", "problem": 27, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn palindrome [sequence]\n  (cond\n    (< (count sequence) 2) true\n    :else\n      (and\n        (= (first sequence) (last sequence))\n        (palindrome (rest (butlast sequence)))\n      )\n  )\n)", "problem": 27, "user": "537d9b39e4b06839e8705e8f"}, {"code": "(fn [elem]\n  (= (seq elem) (reverse elem)))", "problem": 27, "user": "53790dc6e4b06839e8705e4c"}, {"code": "(fn ispalindrome? [coll]\n  (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "53762466e4b06839e8705e1e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "537f4652e4b06839e8705eb1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [coll]\n              (let [rcoll (apply str (reverse coll)) ocoll (apply str coll)]\n                (= rcoll ocoll)))", "problem": 27, "user": "537f6df1e4b06839e8705eb5"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "531541a0e4b08068f379ed25"}, {"code": "(fn[x] (= (seq x) (seq (reverse x))))", "problem": 27, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [s] (= (vec s) (reverse (vec s)))\n  )", "problem": 27, "user": "52d8e23ae4b09f7907dd139b"}, {"code": "(fn [x] (= (reverse x) (seq x)))", "problem": 27, "user": "537e860ae4b06839e8705ea7"}, {"code": "#(= (into () %) (list* %))", "problem": 27, "user": "537d6d44e4b06839e8705e8c"}, {"code": "#(let [xs (seq %)] (= xs (reverse xs)))", "problem": 27, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53809b34e4b06839e8705ec3"}, {"code": "(fn is-palindrome? [x]\n  (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "problem": 27, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "52e55e16e4b09f7907dd1460"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "511ffbabe4b0e88f5a20c40c"}, {"code": "#(= (concat %) (reverse %))", "problem": 27, "user": "53806e5be4b06839e8705ec1"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "53820087e4b06839e8705ecf"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn p?[s]\n ; recursive palindrome detection\n (cond  (<= (count s) 1) true\n        (= (first s) (last s))\n            (recur (butlast (rest s)))\n        :else false))", "problem": 27, "user": "536c35c3e4b0fc7073fd6e3a"}, {"code": "(fn [x] (= (seq x) (reverse (seq x))))", "problem": 27, "user": "537b9b0ce4b06839e8705e6b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5383865ce4b06839e8705edf"}, {"code": "(fn palindrome [x]\n  (if (< (count x) 2)\n    true\n    (let [f (first x) l (last x) r (rest (butlast x))]\n      (and (= f l) (palindrome r)))))", "problem": 27, "user": "50784ae5e4b0fc74642bff68"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "537bb9efe4b06839e8705e6e"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5383c054e4b06839e8705ee8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "513b10e3e4b067e25a345ed0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [a]\n  (= (seq a) (reverse a)))", "problem": 27, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [word]\n  (= (reverse word) (reverse (reverse word))))", "problem": 27, "user": "537881a4e4b06839e8705e46"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "537a1012e4b06839e8705e5c"}, {"code": "(fn [x] (= (into [] x) (reverse x)))", "problem": 27, "user": "537f8e7be4b06839e8705eb8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "537f9e34e4b06839e8705ebb"}, {"code": "#(= (reverse %)\n    (reverse (reverse %)))", "problem": 27, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [elems]\n  (= (seq elems) (reverse elems)))", "problem": 27, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "538538b2e4b06839e8705efe"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53848725e4b06839e8705ef4"}, {"code": "(fn [x] (= (first x) (last x)))", "problem": 27, "user": "536a52f1e4b0243289761eac"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "5383cc0ae4b06839e8705ee9"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "5384197fe4b06839e8705eed"}, {"code": "#(\n    = (take (Math/floor (/ (count %) 2)) %) \n       (reverse (drop (Math/ceil (/ (count %) 2)) %))\n       )", "problem": 27, "user": "52f28593e4b05e3f0be25ef9"}, {"code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "problem": 27, "user": "5385eaa3e4b06839e8705f09"}, {"code": "(fn palindrome [input]\n  (if (= (count input) 0)\n    true\n    (if(= (last input) (first input))\n      (palindrome (rest (butlast input)))\n      false)))", "problem": 27, "user": "537cf454e4b06839e8705e82"}, {"code": "#( = (seq %) (reverse %))", "problem": 27, "user": "53403110e4b085b17e897da6"}, {"code": "#(if (<= 2 (count %))\n\t(= (first %) (last %))\n\t(recur (drop 1 (drop-last %)))\n)", "problem": 27, "user": "53858d5be4b06839e8705f06"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53838742e4b06839e8705ee0"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53716539e4b0fc7073fd6eb1"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53871d06e4b06839e8705f19"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "538505d1e4b06839e8705efa"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "538754b1e4b06839e8705f1c"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "537943c0e4b06839e8705e52"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "537610eee4b06839e8705e1a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53864493e4b06839e8705f10"}, {"code": "(fn [seqn]\n  (let [seqn (vec seqn)]\n    (every? #(= (nth seqn %) (nth seqn (- (count seqn) 1 %))) (range 0 (/ (count seqn) 2)))))", "problem": 27, "user": "53889587e4b0640c7a9a589e"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "537bca8be4b06839e8705e71"}, {"code": "(fn [S] (= (seq S) (reverse (seq S))))", "problem": 27, "user": "53811c2de4b06839e8705ec8"}, {"code": "(fn [x] (= (reverse (seq x)) (seq x)))", "problem": 27, "user": "53765e1ae4b06839e8705e23"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "538a2930e4b0640c7a9a58b7"}, {"code": "(fn [s] \n  (=\n   (reverse s)\n   (seq s)\n  ))", "problem": 27, "user": "50c13f77e4b096f585049c3b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "#(= (vec %) (rseq (vec %)))", "problem": 27, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "(fn [lst]\n  (if (string? lst) (= lst (apply str (reverse lst)))  (= lst (reverse lst))))", "problem": 27, "user": "538bd264e4b0640c7a9a58c8"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(if (string? %)\n  (= % (apply str (reverse %))) \n  (= % (reverse %))\n     \n     )", "problem": 27, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn [x] (every? identity (map #(= (nth x %1) (nth x (- (count x) 1 %1))) (range (/ (count x) 2)) )  ))", "problem": 27, "user": "53410c24e4b00652c8746eca"}, {"code": "#(if (string? %) (= % (reduce str \"\" (reverse %))) (= % (reverse %)))", "problem": 27, "user": "52503747e4b0541d1855b828"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53737909e4b06d7f452d9e12"}, {"code": "#(empty? (for [a (range (count %)) :when (not= (nth % a) (nth (reverse %) a))] false))", "problem": 27, "user": "53874820e4b06839e8705f1b"}, {"code": "(fn f7 [x]\n  (= (seq x) (reverse x)))", "problem": 27, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "#(= (apply str %) (apply str (reverse %)))", "problem": 27, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [x]\n  (if (empty? x)\n    true\n  \t(if-not (= (first x) (last x))\n    \tfalse\n    \t(recur (butlast (rest x))))))", "problem": 27, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn palindrome [str] \n  (or \n   (empty? (rest str))\n   (and\n    (= (last str) (first str))\n    (palindrome \n     (rest (drop-last str))))))", "problem": 27, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "538db083e4b0b51d73faae74"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [p] (reduce #(and %1 %2) (map #(= %1 %2) p (reverse p))))", "problem": 27, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn [p]\n  (= (seq p) (reverse p)))", "problem": 27, "user": "538d0d66e4b0b51d73faae66"}, {"code": "(fn [l] (= (reverse (seq l)) (seq l)))", "problem": 27, "user": "53050c04e4b0d8b024fd3757"}, {"code": "(fn [col]\n  (let [rev (reverse col)]\n    (cond (string? col) (= col (reduce str rev))\n           (= col rev) true\n           :else false)))", "problem": 27, "user": "53858594e4b06839e8705f05"}, {"code": "(fn palindrome [w] (= (reverse w) (seq w)))", "problem": 27, "user": "533c0c12e4b0e30313ee6cd4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "538f3841e4b0b51d73faae8b"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "51960b79e4b04c0af7ff3c13"}, {"code": "(fn __\n  [word]\n  (= (apply str (reverse word)) (apply str word)))", "problem": 27, "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"code": "#(= (reverse %) (reverse (reverse %)))", "problem": 27, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [x] (= (seq x)(reverse x)))", "problem": 27, "user": "5390110de4b0b51d73faae94"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "515d6f49e4b00901442db1dd"}, {"code": "#(\n\tlet [l (quot(count %) 2)]\n\t\t(= (take l %) (reverse(take-last l %)))\n\t\n)", "problem": 27, "user": "538de891e4b0b51d73faae78"}, {"code": "#(= (apply str (into () %)) (apply str %))", "problem": 27, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "(fn [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false)))", "problem": 27, "user": "5390952be4b0b51d73faae9c"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "problem": 27, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [l] (let [s (seq l)](= s (reverse s))))", "problem": 27, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52c54c84e4b0c2d177d620f0"}, {"code": "(fn [x] (= (reverse x) (vec x)))", "problem": 27, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn test [list] \n  (= (reverse list) (seq list)))", "problem": 27, "user": "539432c9e4b0b51d73faaec7"}, {"code": "(fn [candidate] (= candidate (if (instance? String candidate) (apply str (reverse candidate))(reverse candidate))))", "problem": 27, "user": "5394162be4b0b51d73faaec5"}, {"code": "#(= (seq %1) (reverse %1))", "problem": 27, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn [palindrome-maybe]\n  (let [extract-fn \n         (fn [take-fn]\n           (let [list-count (count palindrome-maybe)]\n             (if (even? list-count)\n                 (take-fn (/ list-count 2) palindrome-maybe)\n                 (take-fn (/ (dec list-count) 2) palindrome-maybe))))]\n    (=\n      (extract-fn take)\n      (extract-fn (fn [n l] (reverse (take-last n l)))))))", "problem": 27, "user": "53940789e4b0b51d73faaec3"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "(fn [l] (= 0 (count (remove true? (map #(= %1 %2) l (reverse l))))))", "problem": 27, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53906b89e4b0b51d73faae99"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "(fn [x] (every? true? (for [i (range (/ (count x) 2))] (= (nth x i) (nth x (- (count x) i 1))))))", "problem": 27, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn [palin] (= (clojure.string/join palin) (clojure.string/join (reverse palin))))", "problem": 27, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "#(= (vec %1) (reverse %1))", "problem": 27, "user": "52138dd7e4b0d32679a5065d"}, {"code": "(fn [x] (=\n         (vec x) (reverse x)))", "problem": 27, "user": "5396c9a8e4b0b51d73faaee4"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn [test]\n  (loop [r (seq test)]\n    (cond (empty? r) true\n          (= 1 (count r)) true\n          (not (= (first r) (last r))) false\n          :else (recur (rest (drop-last r))))))", "problem": 27, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(= (into () %) (into [] %))", "problem": 27, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "#(or (= % (reverse %)) (= % (apply str (reverse %))))", "problem": 27, "user": "53976599e4b0b51d73faaeea"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn [s] \n  (let [seq-s (seq s)]\n        (= seq-s (reverse seq-s))))", "problem": 27, "user": "5395a79be4b0b51d73faaed9"}, {"code": "#(= (vec %) (reverse %))", "problem": 27, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn p [x] \n    (let [ h (first x) t (rest x) m (butlast t) ] \n        (condp = (count x) \n            0 true \n            1 true \n            2 (= h (first t))\n            (and (= h (last t)) (p m)))))", "problem": 27, "user": "5398305fe4b0b51d73faaef6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53990bd8e4b0b51d73faaf03"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5398123ee4b0b51d73faaef3"}, {"code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [xs]\n  (cond\n   (empty? xs) true\n   (= (first xs) (last xs)) (recur (butlast (rest xs)))\n   :else false))", "problem": 27, "user": "5392bfdee4b0b51d73faaeb2"}, {"code": "(fn [coll]\n    (if (empty? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (drop-last (rest coll)))\n      ))\n  )", "problem": 27, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn palendrome [v] (and (= (first v) (last v)) (if (empty? v) true (palendrome (rest (drop-last v))))   ) )", "problem": 27, "user": "53978ea3e4b0b51d73faaeeb"}, {"code": "#(let [p (into '() %)\n      rev (reverse p)]\n  (= p rev))", "problem": 27, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [s] (= (seq s) (reverse s)))", "problem": 27, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "#(= (seq %) (reverse (seq \n%)))", "problem": 27, "user": "538d4926e4b0b51d73faae6a"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn [coll] (= (seq coll) (reverse coll) ))", "problem": 27, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [l]\n  (= (apply str l)\n    (apply str (reverse  l))))", "problem": 27, "user": "53752b27e4b06839e8705e12"}, {"code": "#(= (reverse (seq %)) (seq %))", "problem": 27, "user": "52bf0de2e4b07a9af579232a"}, {"code": "#(= (seq %) (seq (reverse %)))", "problem": 27, "user": "539c20a4e4b0b51d73faaf25"}, {"code": "(fn [x] (= (apply str x) (apply str (rseq (vec x)))))", "problem": 27, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn palindrome? [l] (reduce #(and %1 %2) (map = (reverse l) l)))", "problem": 27, "user": "539e5d76e4b0ca733b974486"}, {"code": "(fn [coll]\n  (let [fwd (vec coll)\n        bck (vec (reverse coll))]\n    ((complement contains?) (set (map = fwd bck)) false)))", "problem": 27, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "539ec9f9e4b0ca733b974491"}, {"code": "(fn [x] (cond \n         (= (rest x) ())\n         true\n         (= (first x) (last x))\n         (recur (rest (drop-last x)))\n         :else false))", "problem": 27, "user": "539c9d7ee4b0b51d73faaf2d"}, {"code": "(fn [c]\n  (let [n (/ (count c) 2)]\n    (= (take n c)\n       (take n (reverse c)))))", "problem": 27, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "539f45dce4b0ca733b974497"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "539e79d2e4b0ca733b974489"}, {"code": "#(let [reversed (reverse %)]\n   (= reversed (reverse reversed)))", "problem": 27, "user": "539f4e9ee4b0ca733b974498"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "#(if (= (vec %) (reverse (vec %)))\n\ttrue\n   \tfalse)", "problem": 27, "user": "51a4d802e4b0def3c5c5869a"}, {"code": "(fn [x] (= (vec x) (vec (reverse x))))", "problem": 27, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#( = ( reverse % ) ( seq % ) )", "problem": 27, "user": "4fbb7010e4b081705acca2e7"}, {"code": "#(= ((if (string? %) clojure.string/reverse reverse) %) %)", "problem": 27, "user": "531f26d0e4b08068f379edc3"}, {"code": "(fn [coll] (= (reverse coll) (reverse (reverse coll))))", "problem": 27, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [coll] (let [rc (reverse coll) n (count coll)]\n             (every? identity\n                     (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "problem": 27, "user": "52d885afe4b09f7907dd1398"}, {"code": "#(= (reverse (reverse %)) (reverse % )  )", "problem": 27, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn [lst] ( #(if (empty? %1) true (if (= (first %1) (first %2)) (recur (rest %1) (rest %2)) false)) lst (reverse lst)))", "problem": 27, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn palindrome? \n  [ls]\n  (= (seq ls) (reverse ls)))", "problem": 27, "user": "539e717fe4b0ca733b974488"}, {"code": "#(let [n (quot (count %) 2)]\n    (every? true?\n           (map =\n                (take n (vec %))\n                (take n (reverse (vec %))))))", "problem": 27, "user": "539cb777e4b0b51d73faaf30"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "(fn [s] (= (reverse (seq s)) (seq s)))", "problem": 27, "user": "539893fbe4b0b51d73faaefd"}, {"code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "problem": 27, "user": "538e864ee4b0b51d73faae87"}, {"code": "#(= (reverse %1) (reverse (reverse %1)))", "problem": 27, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [sequence]\n  (loop [start 0\n         end (- (count sequence) 1)]\n    (if (>= start end)\n      true\n      (if (not (= (nth sequence start) (nth sequence end)))\n        false\n        (recur (inc start) (dec end))\n      )\n    )\n  )\n)", "problem": 27, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (last s))\n      false\n      (recur (rest (drop-last s))))))", "problem": 27, "user": "52fac708e4b047fd55836fff"}, {"code": "(fn [x] (= (seq x) (reverse x)))", "problem": 27, "user": "53a511aae4b0b62ce3005735"}, {"code": "#(= (seq %) (reverse %))", "problem": 27, "user": "53a442a6e4b0b62ce300572d"}, {"code": "#(= (seq %) (seq (reduce conj () %)))", "problem": 27, "user": "53a26cede4b0f1fc7453882a"}, {"code": "#(= (seq %) (reverse (seq %)))", "problem": 27, "user": "52e657e4e4b09f7907dd1472"}, {"code": "#(= (reverse %) (seq %))", "problem": 27, "user": "53a5737ee4b0b62ce300573a"}, {"code": "(fn [l]\n  (if (instance? String l)\n    (= (clojure.string/reverse l) l)\n    (= (reverse l) l)))", "problem": 27, "user": "5396c94be4b0b51d73faaee3"}, {"code": "#(= (reverse (reverse %)) (reverse %))", "problem": 27, "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "53a7771ee4b047364c04441b"}, {"problem": 27, "code": "; I think the Unit Test could be improved :)\n(fn [n] ( = ( first n ) ( last n )))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 27, "code": "(fn [s] (every? true? (map = (seq s) (reverse s))))", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 27, "code": "(fn [x]\n    (loop [a x\n           b (reverse x)]\n          (cond (empty? a) true\n                (not (= (first a) (first b))) false\n                :else (recur (rest a) (rest b)))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 27, "code": "(fn [a] (-> a vec reverse (= (vec a))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 27, "code": "#(if\n     (= (type %) String)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "53a12b57e4b0ca733b9744ba"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 27, "code": "(fn [thing]\n  (= (into [] thing) (reverse thing)))", "user": "53a7637de4b047364c044419"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4ff0c419e4b0678c553fc327"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53aa1528e4b047364c04443f"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (vec coll)))", "user": "53a55de5e4b0b62ce3005739"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4faf97d8e4b081705acca258"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "539ac065e4b0b51d73faaf16"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 27, "code": "(fn [x] (if (empty? x) true\n          (if (not (= (first x) (last x))) false\n            (recur (rest (reverse (rest x)))))))", "user": "53a2ec2be4b0f1fc74538830"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53aa67e0e4b047364c044442"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "53a9db09e4b047364c04443b"}, {"problem": 27, "code": "#(let [sq (seq %)] (= sq (reverse sq)))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 27, "code": "(fn [lst]\n  (loop [fwd lst\n         bwd (reverse lst)]\n    (cond\n     (nil? (first fwd)) true\n     (false? (= (first fwd) (first bwd))) false\n     :else (recur (rest fwd) (rest bwd)))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 27, "code": "#(=\n  (seq %)\n  (reverse %))", "user": "53a7dc5be4b047364c044422"}, {"problem": 27, "code": "#(let [reverse-sub (apply str (reverse %))]\n      (= (apply str %) reverse-sub))", "user": "53ab260ee4b047364c04444c"}, {"problem": 27, "code": "#(= (take (quot (count %) 2) %) (reverse (take-last (quot (count %) 2) %)))", "user": "53ab94cae4b047364c044450"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5227f1c2e4b0186687e23a5f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53a94b63e4b047364c044434"}, {"problem": 27, "code": "(fn [word]\n  (= \n   (seq word)\n   (reverse\n    (seq word))))", "user": "53ac2d45e4b047364c04445b"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "53ac4719e4b047364c04445c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53acca34e4b047364c044460"}, {"problem": 27, "code": "(fn [x]\n  (let [psize (int (/ (count (seq x)) 2))\n        [m n] (partition psize (+ 1 psize) (seq x))]\n   ((fn [a b]\n     (if (or (= b '()) (= a '()))\n       true\n       (if (= (first a) (first b))\n         (recur (rest a) (rest b))\n         false)))\n    m (reverse n))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "53ac1992e4b047364c04445a"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "5360578ee4b0243289761e35"}, {"problem": 27, "code": "(fn [string] (= (apply str string) (apply str (reverse string))))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 27, "code": "(fn [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (recur (rest (drop-last xs)))\n      false\n    )\n  )\n)", "user": "53ae3e01e4b047364c044474"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "53ae16e2e4b047364c044472"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ae0c50e4b047364c044471"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53abf519e4b047364c044456"}, {"problem": 27, "code": "(fn palindrome? [a] (= (seq a) (reverse (seq a))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 27, "code": "(fn [sq]\n  (if-not (= (reverse sq) sq)\n  (let [cnt (int (/ (count sq) 2))]\n    (= (take cnt (apply str (reverse sq))) (take cnt sq)))\n  true))", "user": "53b05a75e4b047364c044482"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "53abcea3e4b047364c044451"}, {"problem": 27, "code": "(fn [s] (reduce #(and %1 %2) true (map #(= %1 %2) (reverse s) s)))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 27, "code": "(fn \n  [x]\n  (= (seq x) (reverse x)))", "user": "53b0ef3be4b047364c044489"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))\n\n;; instead of doing two different comparations depending if the param is a string, just convert the param into a seq\n; #(= (reverse %) (seq %))", "user": "509fda73e4b08df8156e9e41"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5164c2e5e4b003cf19fdde41"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 27, "code": "#(let [size (count %) range (take size (iterate inc 0))]\n   (reduce (fn [bool, idx]\n             (if (= (nth % idx) (nth % (- size idx 1)))\n               (and true bool)\n               false))\n           true\n           range))", "user": "53aef31ce4b047364c04447b"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "53b0446fe4b047364c04447f"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (seq (reverse x))))", "user": "536e56dbe4b0fc7073fd6e6c"}, {"problem": 27, "code": "(fn [coll] (every? true? (map = coll (reverse coll))))", "user": "53a62f56e4b0ef122a8689c6"}, {"problem": 27, "code": "(fn isPal [s] \n  (if (empty? s) \n    true\n    (if (= 1 (count s))\n      true\n      (if (= (first s) (last s))\n        (isPal (drop-last (rest s)))\n        false\n      )\n    )\n  ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 27, "code": "#(if (= (vec %) (reverse (vec %)))\n   true\n   false   \n   )", "user": "53b182a5e4b047364c044491"}, {"problem": 27, "code": "(fn[x] (= (reverse x) (reverse (reverse x))))", "user": "53ad28ede4b047364c044462"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 27, "code": "(fn [p] (= (seq p) (reverse p)))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53b42472e4b047364c0444b2"}, {"problem": 27, "code": "#(not (some false?\n             (map = \n                  % \n                  (reduce conj '() %))))", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 27, "code": "#(= (vec %1) (reverse %1))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 27, "code": "(fn [x]\n   (= (seq x)\n      (reverse x)))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 27, "code": "(fn [s] (if (= (reverse (reverse s)) (reverse s)) true false))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 27, "code": "(fn p [s] (= (seq s) (reverse s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 27, "code": "#(= (-> % reverse) (seq %))", "user": "533a2e02e4b0e30313ee6cb7"}, {"problem": 27, "code": "(fn pali [s] (= (seq s) (reverse s)))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4f3b2b28e4b0e243712b1f26"}, {"problem": 27, "code": "(fn [list]\n  (if (empty? list)\n    true\n    (if (not= (first list) (last list))\n      false\n      (recur (rest (butlast list))))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53b91803e4b047364c0444e5"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "53b41d17e4b047364c0444b1"}, {"problem": 27, "code": "(fn [x] (if (= (first x) (last x)) (if (< (count x) 3) true (recur (rest (drop-last 1 x)))) false))", "user": "53ba0d1be4b047364c0444f1"}, {"problem": 27, "code": "#(loop [s %]\n    (cond (= 0 (count s)) true\n          (= 1 (count s)) true\n          true (if (= (first s)\n                      (last s))\n                 (recur (drop-last 1 (drop 1 s)))\n                 false)))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 27, "code": "#(let [rvrs-coll (reverse %)]\n      (= rvrs-coll (seq %)))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "53ba5475e4b047364c0444f4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5382704be4b06839e8705ed4"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 27, "code": "(fn [coll]\n  (every? #(apply = %) (map vector coll (reverse coll))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53bb512ce4b047364c044503"}, {"problem": 27, "code": "(fn [thing] (let [x (seq thing) lhs (first x) rhs (last x) middle (rest (drop-last x))] (if (= lhs rhs) (if (> 1 (count middle)) (recur middle) true) false)))", "user": "53b15e65e4b047364c04448e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53bb95d0e4b047364c044508"}, {"problem": 27, "code": "#(loop [s (seq %) r (reverse (seq %))]\n   (cond (empty? s) true\n         (not= (first s) (first r)) false\n         :else (recur (next s) (next r))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (< (count x) 2) true\n    (and (= (first x) (last x))\n         (palindrome? (rest (butlast x))))))", "user": "53bc279ae4b047364c04450e"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x) \n  (= (str x) (apply str (reverse x)))\n  (= x (reverse x))))", "user": "53b685e0e4b047364c0444c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 27, "code": "(fn [a] (when-let [s (seq a)] (= s (reverse s))))", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (reverse s) (seq s)))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 27, "code": "#(= (apply str(into () %)) (apply str %))", "user": "53b22df6e4b047364c044497"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse sq)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "53bce179e4b0d9a98559a6c1"}, {"problem": 27, "code": "(fn [col] (= (vec col) (vec (reverse col))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 27, "code": "(fn [x]\n  (let [s (into [] x)]\n    (= s (rseq s))\n  )\n)", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 27, "code": "(fn\n  [coll]\n  (every? #(= (first %) (second %)) (map #(list % %2) coll (reverse coll))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 27, "code": "#(= (seq %) (reverse %))\n\n;;(seq \"abc\") result in (\\a \\b \\c)\n;; reverse will not evaluated as string ether.", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (clojure.string/reverse x) (reverse x))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5353726be4b084c2834f4b00"}, {"problem": 27, "code": "(fn [col] (= (reverse col) (seq col)))", "user": "53b40181e4b047364c0444ae"}, {"problem": 27, "code": "(fn [c]\n  (let [l (count c)\n        h (int (/ l 2))\n        g (partial nth c)]\n    \n    (every? true?\n     (for [x (range h)]\n      (= (g x) (g (- l x 1)) )\n       ))))", "user": "53bb4cb1e4b047364c044502"}, {"problem": 27, "code": "(fn pal? [xs] (if (empty? xs)\n                true\n                (if (= (first xs) (last xs))\n                  (pal? (rest (butlast xs)))\n                  false)))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 27, "code": "(fn [col]\n  (cond\n   (empty? col) true\n   (= 1 (count col)) true\n   :else (and (= (first col) (last col)) (recur (butlast (rest col))) )\n              ))", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 27, "code": "(fn [c] (= (reverse (seq c)) (seq c)))", "user": "53c15f08e4b00fb29b221261"}, {"problem": 27, "code": ";(fn [input] (= (seq input) (reduce conj () input) ))\n(fn [x]\n  (= (reverse x) (seq x)))", "user": "53bdae7fe4b0d9a98559a6d9"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53b952eee4b047364c0444e6"}, {"problem": 27, "code": "#(= ((fn [s] \n  (if (string? s)\n   (apply str (reverse s))\n   (reverse s)))\n  % ) %)", "user": "53aebc94e4b047364c044478"}, {"problem": 27, "code": "(fn [c]\r\n  (if (empty? c) true  \r\n    (if (not= (first c) (last c)) \r\n        false\r\n        (recur (rest (drop-last c)))\r\n    )\r\n  )\r\n)", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 27, "code": "(fn palindrome[u]\n  (= u\n     (if (string? u)\n       (apply str (reverse u))\n       (reverse u))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "50a69e8ce4b0aa96157e2626"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53b85932e4b047364c0444db"}, {"problem": 27, "code": "(fn [what] (= (reverse what) ((comp reverse reverse) what)))", "user": "53c1be8ae4b00fb29b221267"}, {"problem": 27, "code": "#(\n  if(< (count %1)3)\n  \ttrue\n  \t(if(=(first %1)(last %1))\n         (recur (-> %1 rest butlast))\n         false)\n  )", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 27, "code": "(fn [col] (\n    loop [col col]\n\t(if (empty? col)\n\t\ttrue\n\t\t(if (= (first col) (last col))\n\t\t\t(recur (->> col (drop-last) (drop 1)))\n\t\t\tfalse))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 27, "code": "#(let [arr (split-at (/ (count %) 2) %)]\n   (let [x (reverse (first arr)) y (last arr)]\n     (if (not= (count x) (count y))\n       (= (pop x) y)\n       (= x y))))", "user": "53c39a9ae4b00fb29b22127d"}, {"problem": 27, "code": "(fn [s] \n    (= (reverse s) (seq s)))", "user": "53c3397be4b00fb29b221279"}, {"problem": 27, "code": "#((fn rec [x] \n     (if (> (.length x) 1)\n       (if (= (first x) (last x))\n         (recur (subvec x 1 (- (.length x) 1)))\n         false)\n       true)) (vec %))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 27, "code": "(fn [palindrome] (= (seq palindrome) (reverse (seq palindrome))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "538c4e52e4b0b51d73faae59"}, {"problem": 27, "code": "(fn [coll] \n   (if (string? coll)\n     (let [new-string (apply str (reverse coll))]\n       (if (= coll new-string)\n         true\n         false))\n     (= coll (reverse coll))))", "user": "53b05a36e4b047364c044481"}, {"problem": 27, "code": "#(let [lst (seq %) rlst (reverse lst)]\n   (reduce (fn [r i] (and r i)) true (map (fn [a b] (= a b)) lst rlst)))", "user": "535ca812e4b04ce2eb3ed2b7"}, {"problem": 27, "code": "#((fn check [data n] \n  (\n   if\n   \t(> n (/ (count data) 2))\n   \ttrue\n   \t(\n     if\n     \t(= (nth data n) (nth data (- (count data) (+ n 1))))\n     \t(check data (+ 1 n))\n     \tfalse\n    )\n  )\n) %1 0)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 27, "code": "#(loop [x %]\n   (if (or (= x []) (= (count x) 1))\n     true\n     (if (= (first x) (last x))\n       (recur (rest (reverse (rest x))))\n       false)))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 27, "code": "(fn\n  [input] \n  (loop\n    [inarray (into [] input) outarray []] \n    (if (>= 1 (count inarray))\n      true\n      (if (not (= (first inarray) (last inarray)))\n        false\n        (recur  (into [] (rest (pop  inarray))) (conj outarray (last inarray)))\n      )\n    )))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 27, "code": "(fn [x]\n  (every? identity (map = x (reverse x))))", "user": "53c6e25ee4b00fb29b2212a4"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (loop [front (first coll) back (last coll) xs (rest (butlast coll))]\n    (println front back xs)\n    (if (= front back) \n      (if (or (empty? xs) (= 1 (count xs))) \n        true\n        (recur (first xs) (last xs) (rest (butlast xs))))\n      false)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53c63db5e4b00fb29b221296"}, {"problem": 27, "code": "(fn p? [s]\n  (= (seq s)\n      (reverse s)))", "user": "53b2e953e4b047364c04449e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 27, "code": "(fn [l] (= (reverse l) (reverse (reverse l))))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "53b293d3e4b047364c04449b"}, {"problem": 27, "code": "(fn [x] \n  (= (reverse x) (reverse (reverse x))))", "user": "53c90510e4b00fb29b2212b6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "53c6a2fde4b00fb29b22129d"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 27, "code": "#(= (vec %) (rseq(vec %)))", "user": "53c2409de4b00fb29b22126c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 27, "code": "(fn [x]\n  (cond (or (empty? x) (= 1 (count x))) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))", "user": "53cb30f0e4b00fb29b2212d0"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "53caddbae4b00fb29b2212cc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "50a122a1e4b08df8156e9e54"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53c1305be4b00fb29b22125d"}, {"problem": 27, "code": "(fn[x] (= ( reverse x) (seq x)))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 27, "code": "#(if (= (vec %) (reverse (vec %)))\n   true\n   false   \n   )", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 27, "code": "(fn [x] (if (= (reverse (seq x)) (seq x)) true false))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 27, "code": "(fn [x]\n  (letfn [(g [x]\n    (cond \n     (string? x) (clojure.string/reverse x)\n     (vector? x) (vec (reverse x))\n     :else (reverse x)))]\n    (= x (g x))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 27, "code": "#(let [sq (seq %)] (= (reverse sq) sq))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 27, "code": "(fn find-palandrom\n  [x]\n  (let [[f & rest] x\n        l (last rest)\n        li (butlast rest)\n        c (count li)]\n    (if (= f l)\n      (if (< 1 c)\n        (find-palandrom li)\n        true)\n      false)))", "user": "53cf278ce4b00fb29b2212fb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 27, "code": "#(cond \n   (coll? %) (= % (reverse %))\n   (string? %) (= % (apply str (reverse %)))\n   )", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 27, "code": "(fn [x] (or (= (first x) \\r) (= x (reverse x))))", "user": "53cff414e4b00fb29b221304"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53d00195e4b00fb29b221305"}, {"problem": 27, "code": "(fn [a]\n  (if (= (reverse a) (reverse (reverse a))) true\n    false))", "user": "53d032ace4b00fb29b221306"}, {"problem": 27, "code": "(fn [coll]\n  (if (< (count coll) 1)\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (take (dec (count coll)) coll)))\n      false)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (reduce str (reverse x))) (= x (reverse x))))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 27, "code": "(fn [s] (= (vec s) (reverse s)))", "user": "52e5c272e4b09f7907dd1466"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d0f7bbe4b00fb29b22130e"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 27, "code": "#(=(seq %)(reverse(seq %)))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 27, "code": ";#(if (= (type %) java.lang.String) (true? (= % (apply (str (reverse %))))) (true? (= % ( reverse %))))\n\n#(if (= (type %) java.lang.String) (true? (= % (apply str (reverse %)))) (true? (= % (reverse %))))", "user": "53ce030be4b00fb29b2212ea"}, {"problem": 27, "code": "(fn [x] (= (vec (reverse x)) (vec x)))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 27, "code": "(fn [item]\n  (= item\n      (if (= (type item) java.lang.String)\n          (apply str (vec (reverse item)))\n          (reverse item)\n      )\n  )\n)", "user": "51ad808ee4b09397d5109784"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "53d2b10de4b00fb29b221322"}, {"problem": 27, "code": "(fn [coll]\n  (let [v (vec coll)]\n    (= v (reverse v))))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 27, "code": "(fn [p] \n  (let [lp (seq p)]\n    (= lp (reverse lp))))", "user": "53cc5c88e4b00fb29b2212d8"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "53d3ad01e4b00fb29b22132d"}, {"problem": 27, "code": "(fn [coll]\n  (if (= coll (reverse coll))\n    true\n    (if (= coll (apply str (reverse coll)))\n      true\n      false)))", "user": "53d40508e4b00fb29b221332"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cc0d51e4b00fb29b2212d5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53d4dadde4b00fb29b221337"}, {"problem": 27, "code": "(fn\n  [coll]\n  (every? #(= (nth coll %) (nth (reverse coll) %)) (range (count coll))))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 27, "code": "#(let [s (vec %) rs (rseq s)] (loop [s s rs rs] (cond (and (empty? rs) (empty? rs)) true :else (and (= (first s) (first rs)) (recur (rest s) (rest rs))))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 27, "code": "(fn polyndrom [a]\n  (if (empty? a)\n    true\n    (if (= (first a) (last a))\n      (polyndrom (rest (butlast a)))\n      false)))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53d6024ae4b0e771c3025450"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 27, "code": "(fn [x] (-> x seq (= (reverse x))))", "user": "530ec239e4b08068f379ecc1"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 27, "code": "(fn\n  [c]\n  (let [divFloor (fn [a] (int (/ (count a) 2)))]\n    (= (take (divFloor c) c) (reverse (take-last (divFloor c) c)))\n  )\n)", "user": "53d17fdde4b00fb29b221315"}, {"problem": 27, "code": "(fn palin [x]\t(if (empty? x) \n                \ttrue \n                 \t(and \n                 \t\t(palin \n                     \t\t(rest \n                         \t\t(reverse (rest x))\n                         \t)\n                     \t)\n                     \t(= (first x) (last x))\n                  \t)\n               \t)\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 27, "code": "(fn [s] (every? true? (map = s (reverse s))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 27, "code": "(fn \n  [init]\n  (loop [remain init]\n     (if (or (empty? remain) (= (count remain) 1))\n        true\n        (if (= (first remain) (nth remain (dec (count remain))))\n          (recur (rest (pop (vec remain))))\n          false))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 27, "code": "(fn test[%] (if (not= (first %) (last %)) false \n                      (if (< (count %) 2) true \n                         (test (rest (reverse (rest (reverse %)))))\n                      )   \n                    ))", "user": "53d64811e4b0e771c3025456"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "53d92964e4b0e771c3025476"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53d91412e4b0e771c3025474"}, {"problem": 27, "code": "(fn palin-check[ls]\n  (if (= (type ls) java.lang.String)\n    (= ls (apply str (reverse ls)))\n    (= ls (reverse ls))))", "user": "53d87449e4b0e771c302546d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53da1540e4b0e771c3025482"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d3abeae4b00fb29b22132c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53da19fde4b0e771c3025484"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d2fb7ae4b00fb29b221326"}, {"problem": 27, "code": "(fn [lst]\n  (if (string? lst)\n  (= (clojure.string/join (reverse lst)) lst)\n  (= (reverse lst) lst))\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 27, "code": "#(= (into '() %1) (reverse (reverse %1)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "53dbac68e4b094d41abdfef4"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 27, "code": "(fn [str]\n         (if (= [] (rest str))\n           true\n           (and\n             (= (first str) (first (reverse str)))\n             (recur (rest (drop-last str)))\n             )\n           )\n         )", "user": "53dbc8bee4b094d41abdfef5"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 27, "code": "#(= (apply str (reverse  %)) (apply str %))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 27, "code": "(fn [col]\n  (= (reverse col) (seq col)))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 27, "code": "(fn [x]\n  (let [z (seq x) y (reverse z)]\n    (= z y)))", "user": "53d60f57e4b0e771c3025451"}, {"problem": 27, "code": "(fn [coll]\n    (= (if (string? coll)\n         (reduce str (map str (reverse coll)))\n         (reverse coll))\n       coll))", "user": "53844970e4b06839e8705eef"}, {"problem": 27, "code": "(fn pali [lst]\n  (let [n (int (/ (count lst) 2))]\n    (= (take n lst) (reverse (take-last n lst)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 27, "code": "#(= (reverse  %) (seq %))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "53da3691e4b0e771c3025493"}, {"problem": 27, "code": "(fn [s] (let [rl (vec (reverse s))] (= (vec s) rl)))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 27, "code": "(fn\n  [input]\n  (loop [input_seq input]\n    (if (< (count input_seq) 2)\n      true\n      (if (= (first input_seq)\n             (last input_seq))\n        (recur (rest (butlast input_seq)))\n        false))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 27, "code": "(fn [s]\n          (cond\n            (string? s) (= s (apply str (reverse s)))\n            :else (= s (reverse s))))", "user": "538510c2e4b06839e8705efb"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 27, "code": "#(= \n        (clojure.string/join %) \n        (clojure.string/join (reverse %)))", "user": "53a83c74e4b047364c044426"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 27, "code": "(fn [a] (let [b (seq a)] (= b (reverse b))))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 27, "code": "(fn what [seq]\n(let [seq (into [] seq) f (first seq) l (last seq) rst (butlast (next seq ))]\n(if (= (or f l) nil) true (if (= f l) (what rst) false))))", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 27, "code": "(fn [string]\n  (if (string? string) (= string (apply str (reverse string)))\n    (= string (reverse string))))", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "533d828ce4b085b17e897d83"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "51c6eabde4b07ef393169e3c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 27, "code": "(fn [x] \n  (= (reverse x) (seq x)))", "user": "53aec6e6e4b047364c044479"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 27, "code": "#(= (reduce conj [] (reverse %1))(seq %1))", "user": "53dae029e4b0e771c30254ae"}, {"problem": 27, "code": "#(= (reverse (into () %)) (into () %))", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 27, "code": "#(= (clojure.string/join (-> % reverse)) (clojure.string/join %))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 27, "code": "(fn palin? [x] (if (or (empty? x) (= x nil)) true\n                 (if (= (first x) (last x)) \n                   (palin? (rest (butlast x)))\n                   false\n               )\n) )", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 27, "code": "(fn palin [ins]\n  (let [n (int (/ (count ins) 2))\n        left (take n ins)\n        right (take-last n ins)\n        ]\n    (= (reverse right) left)\n    ))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "516d227fe4b06f078fab252d"}, {"problem": 27, "code": "#(every? true? (map = (seq %) (reverse %)))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "53e55de1e4b036ad0777e458"}, {"problem": 27, "code": "#(= (seq  %) (reverse %))", "user": "53e543efe4b036ad0777e457"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53e66df9e4b036ad0777e472"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (cond\n    (<= (count xs) 1) true\n    (= (first xs) (last xs)) (palindrome? (rest (butlast xs)))\n    :else false))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 27, "code": "(fn [xs]\n  ( let [sx (seq xs)]\n    ( = sx (reverse sx))))", "user": "4f6d09c5e4b07046d9f4efc3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 27, "code": ";(fn [l] (= (seq l) (reverse l)))\n(fn [l] (if (empty? l) true (if (= (first l) (last l)) (recur (rest (drop-last l))) false)))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 27, "code": "(fn\n  [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 27, "code": "(fn detect-pal [l]\n  (if (empty? l)\n    true\n    (if (not= (first l) (last l))\n      false\n      (detect-pal (rest (butlast l))))))", "user": "53e92821e4b036ad0777e499"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 27, "code": "#(= % \n    (if (= java.lang.String (type %))\n      (clojure.string/reverse %)\n      (reverse %)))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 27, "code": "(fn [s] (let [half-size (quot (count s) 2)]\n          ( = (take half-size s) (reverse (take-last half-size s)))))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 27, "code": "(fn [in] (= (seq in) (reverse in)))", "user": "4f1ff504535d64f6031464a6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 27, "code": "(fn [v]\n  (= (seq v) (reverse v)))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 27, "code": "(fn [seq] \n   (if (empty? seq)\n     true \n     (if (not= (first seq) (last seq))\n       false\n       (recur (drop 1 (drop-last 1 seq))))))", "user": "53e634ede4b036ad0777e470"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53eade35e4b036ad0777e4ec"}, {"problem": 27, "code": "#(=(seq %)(reverse %))", "user": "5360b327e4b0243289761e38"}, {"problem": 27, "code": "(fn[totest](\n  = (reverse (reverse totest)) (reverse totest)))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "user": "53e9a56ce4b036ad0777e4af"}, {"problem": 27, "code": "(fn [x] (let [n (int (/ (count x) 2))]\n           (= (take n x) (reverse (take-last n x)))))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "53ea9871e4b036ad0777e4e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 27, "code": "(fn palin [input] (= (reverse input) (reverse (reverse input))))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 27, "code": "#(-> (= (seq %) (reduce conj () %)))", "user": "53df4292e4b0d874e779ae40"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 27, "code": "#(= (take (/ (count %) 2) %)\n    (reverse (take-last (/ (count %) 2) %)))", "user": "53ebd5fee4b036ad0777e4fd"}, {"problem": 27, "code": "#(let [x (str %), r (apply str (reverse x))]\n   (or (= % (reverse %)) (= x r)))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 27, "code": "(fn palindrome?\n  ([x]\n   (or\n    (<= (count x) 1)\n    (palindrome? (first x) (butlast (rest x)) (last x))\n   )\n  )\n  ([fir mid las]\n   (and\n    (= fir las)\n    (palindrome? mid)\n   )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x) (seq x)))", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 27, "code": "(fn pal [lst]\n  (if (< (count lst) 2)\n    true\n    (if (= (first lst) (last lst))\n      (pal (rest (butlast lst)))\n      false)))", "user": "53ed1778e4b0d648e757f4bd"}, {"problem": 27, "code": "(fn [ar] (= (reverse ar) (reverse (reverse ar))))", "user": "53e4bc2ee4b036ad0777e44d"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (= (seq coll) (reverse coll)))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 27, "code": "#(= % (if (= (type %) String)\n        (clojure.string/reverse %)\n        (reverse %)))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 27, "code": "(fn pali [xs]\n  (if (empty? xs)\n  \ttrue\n  \t(if (not= (last xs) (first xs))\n \t\tfalse\n  \t\t(pali (rest (butlast xs)))))\n)", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 27, "code": "(fn [s]\n  (let [b (reverse s) n (count s)]\n    (every? identity \n      (map #(= (nth s %) (nth b %)) (range (/ (dec n) 2))))))", "user": "53cafc64e4b00fb29b2212cf"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 27, "code": "(fn [coll]\n  (if (or (= java.lang.String (type coll)) (= clojure.lang.PersistentList (type coll)))\n    (recur (vec coll))\n    (if (< (count coll) 2)\n      true\n      (if (= (coll 0) (coll (- (count coll) 1)))\n        (recur (subvec (vec coll) 1 (- (count coll) 1)))\n        false))))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 27, "code": "(fn [c] (apply = (map sort (partition (int (/ (count c) 2)) (if (odd? (count c)) (keep-indexed #(when-not (= %1 (int (/ (count c) 2))) %2) c) c)))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 27, "code": "#(= (vec %)  ( vec (reverse %)))", "user": "53f0e2d8e4b0742d9025b0d6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "51ac80bbe4b09397d5109770"}, {"problem": 27, "code": "#(=(reverse (flatten (list %))) (flatten (list %)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53df152ee4b0d874e779ae3e"}, {"problem": 27, "code": "#(let [f (seq %)\n       r (reverse %)]\n        (= f r))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 27, "code": "(fn p [coll]\n           (if-not coll\n             true\n             (if (= (first coll) (last coll))\n               (recur (butlast(next coll)))\n               false\n             )\n           )\n)", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 27, "code": "(fn [coll] (= (vec coll) (vec (reverse coll))))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (reverse (reverse coll)))\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (or (empty? coll)\n      (and (= (first coll) (last coll))\n           (palindrome? (butlast (rest coll))))))", "user": "53f42471e4b0742d9025b0fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "503b9439e4b07a1917cc34df"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 27, "code": "(fn [a]\n  (loop [s a]\n    (let [f (first s) l (last s)]\n      (if (empty? s) true\n        (if (= f l)\n          (recur (butlast (next s)))\n            false\n            )\n          )\n        )\n      )\n    )", "user": "515d414be4b00901442db1db"}, {"problem": 27, "code": "(fn [mj] (if (string? mj) (= (clojure.string/join (reverse mj)) mj) (= (reverse mj) mj)))", "user": "53ed290be4b0d648e757f4c0"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 27, "code": "(fn [coll] \n  (let [re (reverse coll)]\n  (if (string? coll)\n    (= coll (apply str re))\n    (= coll re))))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 27, "code": "(fn [entry] \n  (println (reverse  entry))\n  (= (reverse  entry) (seq entry))\n  )", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53f3d96ee4b0742d9025b0fa"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 27, "code": "(fn [coll]\n  (= (vec coll) (reverse coll)))", "user": "53e35265e4b036ad0777e400"}, {"problem": 27, "code": "(fn [object]\n  (let [reversed (reverse object)]\n    (if(string? object)\n      (= object (apply str reversed))\n      (= object reversed))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "53ef5c13e4b0742d9025b0cb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53edbb02e4b0d648e757f4ca"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 27, "code": "(fn palin [xs]\n  (or \n    (<= (count xs) 1 )\n    (and\n      (= (first xs) (last xs))\n      (palin (rest (drop-last xs)))\n      )\n    )\n  )", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 27, "code": "(fn [l] (if (< (count l) 2) true (if (= (first l) (last l)) (recur (drop-last 1 (drop 1 l))) false)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 27, "code": "(fn palindrome [coll] \n   (if (= (count coll) 1) true \n     (if (= (count coll) 2) \n       (if (= (first coll) (last coll)) true false)\n       (if (not= (first coll) (last coll)) false\n         (palindrome (rest (butlast coll)))))))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 27, "code": "(fn [l] (every?  #(true? %) (for [i (range (dec (count l)))] (= (nth l i) (nth (reverse l) i)))))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 27, "code": "#(= (apply list %) (reverse (apply list %)))", "user": "53f74528e4b0de5c4184855c"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5335c083e4b0e30313ee6c6e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fa3524e4b0de5c41848578"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 27, "code": "(fn pala [s] (if (seq (rest s)) (if (= (first s) (last s)) (pala (drop 1 (drop-last 1 s))) false) true))", "user": "53d86564e4b0e771c302546b"}, {"problem": 27, "code": "(fn [s]\n  (loop [original s\n         reversed (reverse s)]\n    (if (and (empty? original) (empty? reversed))\n      true\n      (if (= (first original) (first reversed))\n        (recur (rest original) (rest reversed))\n        false))))", "user": "53fc5ec2e4b0de5c4184859e"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 27, "code": "(fn [item]\n  (=\n   (apply str item)\n   (apply str (reverse item))))", "user": "53fce5bae4b0de5c418485df"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "4dadb5f4c9a9d6ed3399dc57"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 27, "code": "(fn [coll]\n    (cond\n     (empty? coll) true\n     (= 1 (count coll)) true\n     (= (first coll) (last coll)) (recur (drop-last (rest coll)))\n     :else false))", "user": "51803613e4b04f45bde7d8fd"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "53e2381ce4b036ad0777e3ee"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "53fdb53fe4b0de5c418485e8"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 27, "code": "#(if (string? %) \n   (= % (apply str (reverse %) ) )\n   (= % (reverse %) ) )", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 27, "code": "(fn palindrome [value]\n  (if (empty? value)\n      true\n      (if (= (first value) (last value))\n          (palindrome (rest (butlast value)))\n          false\n      )\n  )\n)", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 27, "code": "(fn ispalindrome\n        [mysequence]\n        (if (<=  (count mysequence) 1)\n          true\n          (and (= (first mysequence) (last mysequence))\n               (ispalindrome (take (- (count mysequence) 2) (rest mysequence))))\n        )\n)", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 27, "code": "#(= (seq %) \n    (reverse %))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5400407de4b0de5c4184860a"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 27, "code": "#(= % (if (string? %) % (reverse %)))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 27, "code": "(fn [s]\n  (let [rev (reverse s)\n        item (reverse rev)]\n    (= rev item)))", "user": "536aba0be4b0243289761eb2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "533923fde4b0e30313ee6ca4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 27, "code": "(fn [col] (= (reverse col) (seq col)))", "user": "53cd1a9be4b00fb29b2212dc"}, {"problem": 27, "code": "(fn f [col] (if (empty? col) true (if (not= (first col) (last col)) false (f (rest (butlast col))))))", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "53fe255ce4b0de5c418485f3"}, {"problem": 27, "code": "#(= (-> % reverse reverse) (reverse %))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 27, "code": "(fn [x] \n  (loop [my-list x current true]\n    (if (or (empty? my-list) (not current))\n      current\n      (recur (butlast (rest my-list)) (= (first my-list) (last my-list))))))", "user": "54051338e4b0addc1aec6662"}, {"problem": 27, "code": "#(if (string? %)\n  (= (apply str (reverse %)) %)\n  (= (reverse %) %))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 27, "code": "(fn pal [lista]\n  (= (seq lista) (reverse lista)))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "53f78adce4b0de5c41848562"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String) (= (apply str (reverse %)) %) (= (reverse %) %))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 27, "code": "(fn [n]\n  (= (seq n) (reverse n)))", "user": "52a85d20e4b0c58976d9ac2c"}, {"problem": 27, "code": "(fn [input] (let [m {java.lang.String #(apply str %) clojure.lang.PersistentVector vec} op (m (type input))] (= input (if (nil? op) (reverse input) (op (reverse input))))))", "user": "5406776fe4b0addc1aec66a0"}, {"problem": 27, "code": "(fn recv-palindrome\n  [col]\n  (= (seq col) (reverse col))\n  )", "user": "5306bceee4b02e821686979b"}, {"problem": 27, "code": "#(reduce\n           (fn [prev [s1 s2]] (and prev (= s1 s2)))\n           true\n           (map vector (seq %) (reverse (seq %))))", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 27, "code": "#(= (seq %) (into '() %))", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 27, "code": "(fn [lst]\n  (if (= (type lst) java.lang.String)\n    (= lst (apply str (reverse lst)))\n    (= lst (reverse lst))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 27, "code": "(fn [l]\n  (let [rev (reverse l)\n        half-size (/ (count l) 2)]\n    (= (take half-size l) (take half-size rev))))", "user": "5405fdcce4b0addc1aec6683"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 27, "code": "#(=\n  (apply str (reverse %))\n  (apply str %))", "user": "54042a19e4b0df28a13c62e4"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str  %) )", "user": "54094824e4b0addc1aec66da"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 27, "code": "(fn palindrome?\n  [pal]\n  (or\n   (<= (count pal) 1)\n   (and\n    (= (first pal) (last pal))\n    (palindrome? (rest (butlast pal))))))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 27, "code": "(fn palindrome? [x] (= (seq x) (reverse (seq x))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 27, "code": "(fn [a-seq]\n  (let [rev (if (string? a-seq)\n              (apply str (reverse a-seq))\n              (reverse a-seq))]\n    (= rev a-seq)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 27, "code": "(fn [x] (reduce (fn [a b] (and a b)) true (map (fn [v1 v2] (= v1 v2)) x (reverse x))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 27, "code": "#(loop [seq %, seqa [], seqb '()]\n   (let [f (first seq)]\n     (if (nil? f)\n       (= seqa seqb)\n       (recur (rest seq) (conj seqa f) (conj seqb f)))))", "user": "540c8f3fe4b0addc1aec6705"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (into '() (seq coll))))", "user": "540cde77e4b0addc1aec6709"}, {"problem": 27, "code": "(fn [ls]\n  (if (not (coll? ls))\n    true\n    (let [length (count ls)]\n      (if (even? length) \n        (= (take (/ length 2) ls) (reverse (drop (/ length 2) ls)))\n        (= (take (/ (dec length) 2) ls) (drop (/ (inc length) 2) ls))))))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 27, "code": "(fn [to-reverse]\n  (let [reversed (reverse to-reverse)]\n    (if (instance? String to-reverse)\n      (= to-reverse (apply str reversed))\n      (= to-reverse reversed))))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 27, "code": ";;(fn pal [s] (if (<= (count s) 2) (= (first s) (last s)) (and (= (first s) (last s)) (recur (drop-last (rest s))))))\n\n#(= (seq %) (reverse %))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 27, "code": "(fn [l]\n  (loop [lst (vec l)] \n    (if (= 1 (count lst))\n      true\n      (if (= (first lst) (last lst))\n        (recur [(rest (pop lst))])\n        false\n      ))))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 27, "code": "(fn [input]\n  (let [sq (seq input)]\n    (every? (fn [[a b]] (= a b)) \n            (partition 2 (interleave sq (reverse sq))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 27, "code": "(fn paldetect [coll]\n   (every? (fn [[ e1 e2]] (= e1 e2))\n          (partition 2 (interleave coll (reverse coll)))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 27, "code": "(fn [x] (let [end (count x) mid (int (/ end 2))] (= (take mid x) (take mid (reverse x)))))", "user": "540f2b31e4b0addc1aec6726"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5409a4fee4b0addc1aec66e0"}, {"problem": 27, "code": "#(reduce (fn[x y](and x y)) true (map = (reverse %) %))", "user": "54103c69e4b01498b1a719a4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 27, "code": "(fn [coll]\n    (let [rev-coll (reverse coll)]\n      (= (seq coll) rev-coll)))", "user": "540f3b4ee4b0addc1aec6729"}, {"problem": 27, "code": "(fn [thing]\n                    (loop [thing thing] \n                      (if (empty? thing)\n                        true\n                        (if (= (first thing) (last thing))\n                          (recur (rest (butlast thing)))\n                          false))))", "user": "540f57f6e4b0addc1aec672b"}, {"problem": 27, "code": "(fn [coll] (every? true? (map (fn [[x y]] (= x y)) (map vector coll (reverse coll)))))", "user": "540904a7e4b0addc1aec66d2"}, {"problem": 27, "code": "(fn [xs] (let [n (int (/ (count xs) 2))] (= (take n xs) (take n (reverse xs)))))", "user": "540d5ab9e4b0addc1aec670f"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (let [fwd (into [] s)\n        bwd (-> fwd reverse)]\n    (= fwd bwd))\n  )", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 27, "code": "(fn [arg] (true? (= (seq arg) (reverse arg))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 27, "code": "(fn pal[coll]\n  (cond (= 1 (count coll)) true\n        (empty? coll) true\n        :else (if (= (first coll) (last coll))\n                (pal (rest (butlast coll)))\n                 false\n                )\n\n    )\n  )", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 27, "code": "(fn [s] (= (apply str (reverse s)) (apply str s)))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (cond\n   (empty? xs) true\n   (= 1 (count xs)) true\n   (not= (first xs) (last xs)) false\n   :else (palindrome? ((comp drop-last rest) xs))))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "540470dae4b0addc1aec6658"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54133900e4b01498b1a719de"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54157dace4b01498b1a719f4"}, {"problem": 27, "code": "(fn [coll]\n  (if (seq coll)      \n    (if (= (first coll) (last coll))\n      (recur (butlast (rest coll)))\n      false)\n  \ttrue))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 27, "code": "#(every? true? (map = (reverse %) %))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 27, "code": "(fn [sequence] \n  (= (seq sequence) (reverse sequence)))", "user": "5415d115e4b01498b1a719f7"}, {"problem": 27, "code": "(fn palindrome? [truc]\n  (if (string? truc)\n    (= truc (apply str (reverse truc)))\n    (= truc (reverse truc))))", "user": "54100c73e4b01498b1a7199e"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "541096bde4b01498b1a719b2"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 27, "code": "(fn pal? [s]\n  (let [thelist (seq s)] \n    (if (> (count thelist) 1)\n      (and (= (first thelist) (last thelist)) (pal? (butlast (rest thelist))))\n      true\n    )\n  )\n)", "user": "54165291e4b01498b1a719fb"}, {"problem": 27, "code": "(fn pal-detect\n  [seqz]\n  (if (string? seqz)\n  \t(= seqz (reduce str (reverse seqz))) \n  \t(= seqz (reverse seqz))\n  )\n )", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 27, "code": "(fn palindrome [col]\n  (loop [leftcol '()\n         rightcol col]\n    (let [leftlen (count leftcol)\n          rightlen (count rightcol)]\n      (if (= 0 rightlen)\n        true\n        (if (>= leftlen rightlen)\n          (if (odd? (+ leftlen rightlen))\n            (recur (rest leftcol) rightcol)\n            (if (= (first leftcol) (first rightcol))\n              (recur (rest leftcol) (rest rightcol))\n              false ) )\n          (recur (conj leftcol (first rightcol))\n                 (rest rightcol)))))))", "user": "54178782e4b01498b1a71a0c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5413adfee4b01498b1a719e4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54180369e4b01498b1a71a13"}, {"problem": 27, "code": "#(if (not (= (first %) (last %)))\n      false\n      (if (< (count %) 3) true\n        (recur (butlast (reverse (pop (vec %)))))))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "541404c2e4b01498b1a719e7"}, {"problem": 27, "code": "(fn pal? [s]\n  (loop [string s]\n    (cond (empty? string) true\n          (not (= (first string) (last string))) false\n          :else (recur (butlast (rest string))))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 27, "code": "#(= (into [] %1) (reverse %1))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4f085a31535dcb61093f6c35"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (seq coll) (reverse coll)))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 27, "code": "#(let [s (list* %)] (= (reverse s) s))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 27, "code": "(fn [sq] (loop [i 0 \n                j (- (count sq) 1)\n                result true]\n           (if (> i j)\n             result\n             (recur (+ i 1) (- j 1) (and result (= (nth sq i) (nth sq j)))))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 27, "code": "(fn palindrome? [a]\n  (if (seq? a)\n    (= a (reverse a))\n    (palindrome? (reverse a))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "541c47bbe4b01498b1a71a72"}, {"problem": 27, "code": "(fn pal [xs] (if (<= (count xs) 1) true (if (= (first xs) (last xs)) (pal (drop-last (rest xs))) false)))", "user": "541c6489e4b01498b1a71a76"}, {"problem": 27, "code": "(fn palindrome? [n] (if(empty? n) true\n                         (if(= (first n) (last n)) (palindrome? (butlast (next n)))\n                           false\n                           )\n                         ))", "user": "5416dce6e4b01498b1a71a04"}, {"problem": 27, "code": "(fn palindrome? [x] (= (reverse x) (reverse (reverse x))))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 27, "code": "(fn [coll]\n   (let [half (/ (count coll) 2)]\n     (= (take half coll) (take half (reverse coll)))))", "user": "54159032e4b01498b1a719f5"}, {"problem": 27, "code": "(fn[n] (let [rev (reverse n)]\n         (every? true?\n         \t(map #(= (first %) (second %)) \n            \t(map vector n rev)))))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541c2ae0e4b01498b1a71a71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "541df619e4b01498b1a71a87"}, {"problem": 27, "code": "#_(fn [coll] (= (reverse coll) (seq coll)))\n\n; Over-engineered solution below\n\n(fn palindrome?\n  [coll]\n  (if (empty? coll)\n    true\n    (let [a (first coll)\n          z (last coll)\n          middle (next (butlast coll))]\n      (and (= a z)\n           (palindrome? middle)))))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "541168dee4b01498b1a719c3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "541fcf1ee4b01498b1a71a9c"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 27, "code": "(fn palindrome?\n  [seq]\n  (let [count (count seq)\n        threshold (/ count 2)]\n    (println (str \"count:\" count \" threshold:\" threshold))\n    (loop [index 0]\n      (if (> index threshold)\n        true\n        (if (= (nth seq index) (nth seq (- (dec count) index)))\n          (recur (inc index))\n          false)))))", "user": "542098afe4b01498b1a71aa7"}, {"problem": 27, "code": "#(every? true? (map = (reverse %) %))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse (seq a))))", "user": "4e68dfe6535d8ccf87e9fe91"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5421f861e4b01498b1a71abc"}, {"problem": 27, "code": "(fn palindrome? [thing]\n  (= (seq thing) (reverse thing)))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 27, "code": "(fn arlygu[x] (and (= (first x) (last x)) (if-not (empty? x) (arlygu (rest (drop-last x))) true)))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 27, "code": "(fn [coll] \n\t(loop [coll coll] (if (empty? coll) true\n\t\t(if (not (= (first coll) (last coll))) false\n\t\t\t(recur (rest (butlast coll)) )))))", "user": "54199df6e4b01498b1a71a4b"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5424608ce4b01498b1a71ae9"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "54239171e4b01498b1a71ad2"}, {"problem": 27, "code": "(fn [x]\n  (let [r (reverse x)]\n    (or\n     \t(= x r)\n     \t(= x (apply str r))\n     ))\n )", "user": "4ec56864535d6d7199dd369d"}, {"problem": 27, "code": "(fn pal [coll]\n  (cond\n   (nil? (next coll)) true\n   (nil? (next (next coll))) (= (first coll) (first (next coll)))\n   (= (first coll) (first (reverse coll))) (pal (next (reverse (next (reverse coll)))))\n   :else false))", "user": "5421f74fe4b01498b1a71abb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5424f5c3e4b01498b1a71b06"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 27, "code": "(fn [items]\n  (= (seq items)\n     (reverse (seq items))))", "user": "4f80a906e4b033992c121bf7"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5426bd40e4b01498b1a71b1c"}, {"problem": 27, "code": "(fn [xcoll]\n  (let [coll (seq xcoll)]\n  (if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur (->> coll (drop 1) (drop-last 1)))\n      false))))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 27, "code": "(fn[x] (=(seq x) (reverse(seq x))))", "user": "53e32cf7e4b036ad0777e3fd"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 27, "code": "(fn palindrome? [x] \n  (if (= (type x) java.lang.String) (= x (clojure.string/reverse x)) (= x (reverse x)) ))", "user": "54257124e4b01498b1a71b09"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5425d454e4b01498b1a71b13"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5425d00ee4b01498b1a71b12"}, {"problem": 27, "code": "(fn [c]\n  (loop [col c]\n    (if (empty? col)\n      true\n    \t(if (= (first col) (last col))\n      \t\t(recur (drop-last 1 (rest col)))\n      \t\tfalse))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 27, "code": "#(if (string? %) (= % (clojure.string/reverse %)) (= % (reverse %)))", "user": "542ab1afe4b01498b1a71b48"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %)\n )", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse (reverse x)) (reverse x)))", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 27, "code": "#(cond (or (<= (count %) 1)) true\n       (not= (first %) (last %)) false\n       :else (recur (butlast (rest %))))", "user": "520fca70e4b080a8d9b9d631"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 27, "code": "#(if (string? %) true (= % (reverse %)))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53f78944e4b0de5c41848561"}, {"problem": 27, "code": "(fn [inp]\n  (let [inps (seq inp)]\n    (= inps (reverse inps))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542c858ae4b0dad94371f2a8"}, {"problem": 27, "code": "(fn\n  [x]\n  (let [y (quot (count x) 2)]\n    (= (take y x) (take y (reverse x)))))", "user": "541735b3e4b01498b1a71a07"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 27, "code": "#(= (if (= (type %) java.lang.String)\n     (apply str (reverse %))\n     (reverse %)) %)", "user": "541c5718e4b01498b1a71a74"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (seq (reverse coll))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 27, "code": "(fn [x] (let [l (seq x)] (= l (reverse l))))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542f1cade4b0dad94371f2ce"}, {"problem": 27, "code": "#(if (string? %) (= % (apply \n                       str (reverse %)))  (= % (reverse %)))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5136bc52e4b04ac1f358dd58"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 27, "code": "#(case\n     (count %) 0\n               true\n               (if \n                   (= (first %) (last %))\n                 (recur (drop-last (drop 1 %))) false))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54280188e4b01498b1a71b2a"}, {"problem": 27, "code": "(fn solve [arg]\n\t(if (or (empty? arg) (= (count arg) 1))\n\t\ttrue\n\t\t(if (not (= (first arg) (last arg)))\n\t\t\tfalse\n\t\t\t(solve (rest (reverse (rest arg)))))))", "user": "54296802e4b01498b1a71b38"}, {"problem": 27, "code": "#(loop [elems %]\n   (or\n    (< (count elems) 2)\n    (and (= (first elems) (last elems))\n         (recur (rest (butlast elems))))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5430a16de4b0dad94371f2da"}, {"problem": 27, "code": "(fn [x] \n  (let [y (into [] x)]\n  \t(= y (reverse y))))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 27, "code": "(fn [seq]\n   (let [c (count seq)\n         half (if (even? c) (/ c 2) (/ (dec c) 2))]\n     (loop [s seq\n            ]\n       (cond (< (count s) 2) true\n             (not= (first s) (last s)) false\n             (= (first s) (last s)) (recur (drop-last (next s)))\n             )\n       )))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 27, "code": "(fn [s] (if (coll? s)\n                                    (= s (reverse s))\n                           (= s (clojure.string/reverse s))))", "user": "534e1f56e4b084c2834f4aae"}, {"problem": 27, "code": "(fn isPalindrome [x] (= (seq x) (reverse (seq x))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53f49f9be4b0db01ade6f9c3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542789efe4b01498b1a71b25"}, {"problem": 27, "code": "(fn [lister]\n  (if (= (seq lister) (reverse lister))\n    true\n    false))", "user": "54196d63e4b01498b1a71a34"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "543154e9e4b0dad94371f2e5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 27, "code": "(fn [s] (if (string? s)\n          (= (apply str (reverse s)) s)\n          (= (reverse s) s))\n  )", "user": "5412646de4b01498b1a719d4"}, {"problem": 27, "code": "(fn [x] \n  (= (reverse x) (seq x)) )", "user": "542eae68e4b0dad94371f2c6"}, {"problem": 27, "code": "#(= (loop [[head & tail] %\n             res []]\n        (if (empty? tail)\n          (conj res, head)\n          (recur tail (conj res, head))))\n    (loop [[head & tail] %\n             res '()]\n        (if (empty? tail)\n          (conj res, head)\n          (recur tail (conj res, head)))))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "51e58104e4b0efabf93c02cd"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "52f44a16e4b05e3f0be25f1f"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 27, "code": "(fn [mot] (=(reverse mot)(seq mot)))", "user": "543272b8e4b0dad94371f2ef"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x) ))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 27, "code": ";#(if (= % (if (string? %) (clojure.string/join (reverse (into [] %))) (reverse %))) true false)\n#(= (seq %) (reverse %))", "user": "541e774de4b01498b1a71a8d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52c5d094e4b0c2d177d620ff"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x) )))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 27, "code": "(fn [ll]\n  (let [c (count ll)] \n    ((fn [ll]\n      (= (first ll) (reverse (last ll))))\n    (cond\n     (even? c) (partition (/ c 2) ll)\n     (odd? c) (partition (/ (dec c) 2) (inc (/ (dec c) 2)) ll)\n    ))\n    \n    ))", "user": "54297741e4b01498b1a71b39"}, {"problem": 27, "code": "(fn [se]\n  (let [middle (quot (count se) 2)]\n    (= (sort (take-last middle se))  (sort (take middle se)))\n  ))", "user": "54377355e4b032a45b869305"}, {"problem": 27, "code": "(fn pal? [s]\n  (= (reverse s) (reverse (reverse s))))", "user": "5438795ee4b032a45b869313"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "543897e7e4b032a45b869314"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542a348be4b01498b1a71b3f"}, {"problem": 27, "code": "#(let [n (vec %)\n        r (reverse n)]\n    (if (= n r)\n      true\n      false))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54397533e4b032a45b86931d"}, {"problem": 27, "code": "(fn [myseq] (loop [currentStatus true tempseq myseq] (if currentStatus (if (< (count tempseq) 2) true (recur (and currentStatus (= (first tempseq) (last tempseq))) (next (drop-last tempseq)))) false)))", "user": "5439c3cee4b032a45b869323"}, {"problem": 27, "code": "(fn palindrome?\n  [xs]\n  (= (reverse xs) (seq xs)))", "user": "52561295e4b0541d1855ba03"}, {"problem": 27, "code": "(fn [coll]\n   (let [c (into '() coll)]\n     (= (reverse c) c)))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %))) ;Not so good: (reverse (seq x)) is the same as (reverse x)", "user": "54380631e4b032a45b86930f"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (seq (reverse coll))))", "user": "543823f1e4b032a45b869311"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "534678b9e4b084c2834f4a3d"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 27, "code": "(fn [coll]\n  (let\n    [rc (reverse coll)\n     n (count coll)]\n    (every? identity\n            (map\n             #(=\n               (nth coll %)\n               (nth rc %))\n             (range\n              (/ (dec n) 2))))))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "50f95755e4b0e7c80cb15a4b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 27, "code": "(fn [x] \n  (let [rev (reverse x) max (count x)] \n    (loop [i 0 is-pal true] \n      (if (= i max) \n        (true? is-pal) \n        (recur (inc i) (and is-pal (= (nth rev i) (nth x i))))))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "543a68d3e4b032a45b869326"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543cf826e4b032a45b869345"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "543bce4fe4b032a45b869335"}, {"problem": 27, "code": "(fn [lista] \n  (= (seq lista) (reverse lista)))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "543d89dfe4b032a45b869350"}, {"problem": 27, "code": "(fn pal\n\t[[x & more]]\n\t(if (not= x (last more)) \n\t\tfalse \n\t\t(if (< (count more) 3) \n\t\t\ttrue \n\t\t\t(pal (drop-last more)))))", "user": "5436e0a8e4b032a45b8692fd"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "543ead45e4b032a45b869356"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "543ed417e4b032a45b869358"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5385e633e4b06839e8705f08"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543f854fe4b032a45b86935b"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "543bd52be4b032a45b869336"}, {"problem": 27, "code": "(fn pal [x]\n  (= (vec x) (reverse x)))", "user": "52f225bfe4b05e3f0be25ef4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543d07e8e4b032a45b869346"}, {"problem": 27, "code": "#(loop [i 0\n       j (- (count %) 1)]\n    (if (>= i j)\n      true\n      (if (= (nth % i) (nth % j))\n        (recur (inc i) (dec j))\n        false)))", "user": "543c5200e4b032a45b86933e"}, {"problem": 27, "code": "#(= (map str %) (map str (reverse %)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 27, "code": "(fn [coll] \n  (if (= java.lang.String (type coll)) \n    (= coll (clojure.string/reverse coll)) \n    (= coll (reverse coll))))", "user": "543f1765e4b032a45b86935a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54431b6ee4b032a45b869385"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 27, "code": "#(=\n  (vec %)\n  (reverse %))", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 27, "code": "#(= (reverse %) (list* %))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "54448e84e4b032a45b869393"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5443a894e4b032a45b869388"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "544623f3e4b032a45b8693a9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "543a84a1e4b032a45b869328"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 27, "code": "(fn [l] (every? true? (map = l (reverse l))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "54458995e4b032a45b86939e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 27, "code": "(fn [x] (= (take (/ (count x) 2) x) (take (/ (count x) 2) (reverse x))))", "user": "54461393e4b032a45b8693a5"}, {"problem": 27, "code": "(fn [coll]\n             (let [items (count coll) num (if (even? items) (/ items 2) (/ (- items 1) 2))]\n               (loop [seq1 coll seq2 coll dcnt num ]\n                    (if (zero? dcnt) true \n                      (if (= (first seq1) (last seq2)) \n                        (recur (rest seq1) (butlast seq2) (dec dcnt)) false\n                      )\n                    )\n               )\n             )\n          )", "user": "54413696e4b032a45b86936b"}, {"problem": 27, "code": "(fn [suspect]\n  (= (vec suspect) (vec (reverse suspect))))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 27, "code": "(fn [x] \n  (if (= (reverse x) (seq x)) true false))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 27, "code": "#(= (str (seq %)) (str (reverse (seq %))))", "user": "54464734e4b032a45b8693ab"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54453f83e4b032a45b86939a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5420c6e4e4b01498b1a71aaa"}, {"problem": 27, "code": "(fn [x]\n  (= x (if (string? x)\n         (clojure.string/reverse x)\n         (reverse x))))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "530a6cbae4b02e82168697be"}, {"problem": 27, "code": "(fn [list] (loop [x 0 y (- (count list) 1)] (if (>= x y) true (if (= (nth list x) (nth list y)) (recur (inc x) (dec y)) false))))", "user": "544125ade4b032a45b86936a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54485749e4b032a45b8693c7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "503bf5f0e4b0fc0f99c2e54b"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "507f69eee4b089ade05efbcf"}, {"problem": 27, "code": "(fn [s] (= (first s) (last s)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5425bde6e4b01498b1a71b10"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543be8f0e4b032a45b869337"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 27, "code": "(fn pal [elem] \n  (= (apply str (reverse elem)) (apply str elem)) )", "user": "544b9df2e4b0e39780006968"}, {"problem": 27, "code": "(fn [s]\n  (cond (= (count s) 0) true\n        (= (count s) 1) true\n        :else \n        \t(and (= (last s) (first s)) \n                 (recur (-> s (reverse) (rest) (reverse) (rest))))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "544a5b2fe4b0e39780006956"}, {"problem": 27, "code": "#(= (-> % vec reverse) (-> % vec))", "user": "544c1b05e4b0e3978000696e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "544b699ce4b0e39780006964"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 27, "code": "(fn [arr] (loop [l 0 u (- (count arr) 1)] (if (>= l u) true (if ((complement =) (nth arr l) (nth arr u)) false (recur (inc l) (dec u))))))", "user": "53320dd1e4b019098a6f8b71"}, {"problem": 27, "code": "#(let [a (vec %) b (vec (reverse %))] (= a b))", "user": "544ef83de4b0e3978000698d"}, {"problem": 27, "code": "(fn [lst]\n   (= (reverse (take (int (/ (count lst) 2)) lst)) (take-last (int (/ (count lst) 2)) lst))\n  )", "user": "543b7456e4b032a45b86932f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "544e8369e4b0e39780006987"}, {"problem": 27, "code": "(fn [x] (if (string? x) (if (= (seq (char-array x)) (reverse (seq (char-array x)))) true false) (if (= x (reverse x)) true false)))", "user": "544e1794e4b0e39780006980"}, {"problem": 27, "code": "(fn palindrome? [word]\n  (if (string? word)\n    (= word (apply str (reverse word)))\n    (= word (reverse word))))", "user": "544faecfe4b0e39780006996"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "53ed1cb8e4b0d648e757f4be"}, {"problem": 27, "code": "#(= % (if (= (type %) java.lang.String)\n       (apply str (reverse %)) \n       (reverse %)))", "user": "542d95f0e4b0dad94371f2b9"}, {"problem": 27, "code": "(fn [x]\n      (= (reduce (fn [result value]\n                (conj result value)\n                )\n              '() x)\n         (reduce (fn [result value]\n                (conj result value)\n                )\n              [] x\n        )\n      ))", "user": "544fb010e4b0e39780006997"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5450d992e4b0e397800069a5"}, {"problem": 27, "code": "(fn [a] (= (take (/ (count a) 2) a) (reverse (take-last (/ (count a) 2) a))))", "user": "544ff52fe4b0e3978000699b"}, {"problem": 27, "code": "#(if (= % (if (string? %) (apply str (reverse %)) (reverse %))) true false)", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 27, "code": "#(if (= (reverse %) (seq %))\n   true\n    false)", "user": "544257b4e4b032a45b869379"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5441fb2ce4b032a45b869376"}, {"problem": 27, "code": "(fn pal? [coll] (if (< (count coll) 2) true (if (= (first coll) (last coll)) (pal? (butlast (rest coll))) false )) )", "user": "544fbabce4b0e39780006999"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 27, "code": "(fn foo [x] \n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x)) \n      (foo (drop-last (rest x)))\n      false)\n    )\n  )", "user": "544e92b8e4b0e3978000698c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 27, "code": "#(let [chars (seq %)] (= (reverse chars) chars))", "user": "5444ec99e4b032a45b869394"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "545281bce4b0e397800069c3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5122925ae4b068a9582e656d"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "54524afbe4b0e397800069bc"}, {"problem": 27, "code": "(fn [input]\n  (loop [seq-to-check input\n         is-palindrome 'true]\n    (if (empty? seq-to-check)\n      is-palindrome\n      (let [first-elem (first seq-to-check)\n            last-elem (last seq-to-check)\n            remaining-elems (drop-last (drop 1 seq-to-check))]\n        (if (= first-elem last-elem)\n          (recur remaining-elems 'true)\n          'false)))))", "user": "54513516e4b0e397800069af"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [coll# (if (seq? coll) coll (seq coll))]\n  (= (reverse coll#) coll#)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 27, "code": "#((fn pal? [l] (or (< (count l) 2) (and (= (first l) (last l)) (pal? (subvec l 1 ((comp dec count) l)))))) (vec %))", "user": "52e16face4b09f7907dd1421"}, {"problem": 27, "code": "(fn palindrome? [x] \n                  (if (empty? x) true \n                    (if (nil? x) true\n                      (if (= 1 (count x)) true\n                        (if (= (last x) (first x)) (palindrome? (butlast (rest x))) false)))))", "user": "545188ebe4b0e397800069b2"}, {"problem": 27, "code": "(fn [x]\n  (loop [li x]\n    (if (not= (first li) (last li)) false\n      (if (<= (count li) 1) true \n        (recur (drop-last (rest li)))))))", "user": "54381729e4b032a45b869310"}, {"problem": 27, "code": "(fn [l]\n  (if (and (= (first l) (last l)) l)\n    (recur (next (butlast l)))\n    (if l\n      false\n      true)))", "user": "54570d08e4b080a794c2c888"}, {"problem": 27, "code": "(fn [xs] (let [rxs (reverse xs)] (= (reverse rxs) rxs)))", "user": "54565558e4b080a794c2c87f"}, {"problem": 27, "code": "(fn [col](if (< (count col) 2) true (if (= (first col)(last col)) (recur(rest(butlast col))) false)))", "user": "545537c1e4b0e397800069dd"}, {"problem": 27, "code": "(fn [s] (let [m (quot (count s) 2)\n                [a b] (split-at m s)]\n            (= a (take (count a) (reverse b)))))", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 27, "code": "(fn palindrome? [x] (= (reverse x) (seq x)))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 27, "code": "#(= (into () (seq %)) (seq %))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5454bd9be4b0e397800069db"}, {"problem": 27, "code": "#(let [s (seq %)]\n  (if (or (empty? s) (< (.size s) 2)) true\n     (and (= (first s) (last s))\n          (recur (butlast (rest s)))\n     )\n))", "user": "542b0592e4b0dad94371f286"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54580586e4b01be26fd74616"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5453b522e4b0e397800069d0"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5457a6bfe4b01be26fd7460f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5451eb12e4b0e397800069b8"}, {"problem": 27, "code": "#(let [li (into () %)]\n   (= li (reverse li)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 27, "code": "(fn [x]\n  (= (map identity x) (reverse x)))", "user": "5459f13be4b01be26fd74631"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54512df2e4b0e397800069ae"}, {"problem": 27, "code": "(fn [seq] (= (reduce str seq) (reduce str (reverse seq))))", "user": "54570c87e4b080a794c2c887"}, {"problem": 27, "code": "#(= (reduce conj () %) (for [e %] e))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 27, "code": "(fn [x]\n  (let [xs (reverse x)]\n    (= xs (reverse xs))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 27, "code": "#(if (< (count %1) 2) true (= (first %1) (last %1)))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "545b77f5e4b01be26fd74653"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 27, "code": "#(=(seq %)(reverse %))", "user": "5367f0a7e4b0243289761e88"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 27, "code": "(fn palin [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 27, "code": "#(every? (fn [v] (= (first v) (last v))) (map list % (reverse %)))", "user": "545ddb57e4b01be26fd74677"}, {"problem": 27, "code": "#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 27, "code": "#(= (vec %) (reverse(vec %)))", "user": "545bdf75e4b01be26fd7465b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "545da759e4b01be26fd74672"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "545a52bfe4b01be26fd74638"}, {"problem": 27, "code": "(fn is-palindrome? [x]\n   (if (not= (first x) (last x)) false\n     (if (<= (count x) 2)\n       true\n       (is-palindrome? (-> x rest reverse rest)))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 27, "code": ";(fn [coll] (let [coll' (reverse coll)] (= (seq coll) (seq coll'))))\n\n#(= (reverse %) (seq %))", "user": "545eb56be4b01be26fd74682"}, {"problem": 27, "code": "(fn [x]\n  (let [halfway (dec (/ (count x) 2))]\n    (loop [i 0]\n      (if (> i halfway)\n        true\n        (if (= \n             (nth x i)\n             (nth x (- (count x) (inc i))))\n          (recur (inc i))\n          false)))))", "user": "53b14289e4b047364c04448b"}, {"problem": 27, "code": "(fn [coll] \n  (let [half (quot (count coll) 2)\n        left (take half coll)\n        right (take half (reverse coll))]\n    (= left right)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "509ecefde4b08df8156e9e35"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 27, "code": "(fn\n   [l]\n   (= (reverse l) (reverse (reverse l))))", "user": "545d881de4b01be26fd7466f"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "4e8b5cb8535d65386fec211b"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 27, "code": "(fn [coll]\n  (let [stuff (reverse coll)]\n    (if (string? coll)\n    (= (apply str stuff) coll)\n    (= coll stuff))))", "user": "5460612be4b01be26fd74691"}, {"problem": 27, "code": "(fn [xs]\n  (loop [ys xs zs (reverse xs)]\n    (cond (not (= (first ys) (first zs))) false\n          (empty? ys) true\n          :else (recur (rest ys) (rest zs)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5458a729e4b01be26fd74622"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5460eadde4b01be26fd74694"}, {"problem": 27, "code": "(fn -pal [x] (cond (>  2 (count x)) true (<= 2 (count x)) (cond (= (last x) (first x)) (-pal (drop-last (rest x))) (not= (last x) (first x)) false)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 27, "code": "#(= (map str %1) (map str (reverse %1)))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "545bbaa4e4b01be26fd74656"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54651982e4b01be26fd746d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 27, "code": "(fn [x] (= (reverse (vec x)) (vec x)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5465712ee4b01be26fd746dc"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x) (seq x)))", "user": "54653e3be4b01be26fd746da"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 27, "code": "(fn [xs]\n  (loop [xs\txs])\n  \t(if (<= (count xs) 1)\n      true\n      (if (not= (first xs) (last xs))\n        false\n        (recur (->> xs (drop-last 1) (drop 1))))))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 27, "code": "(fn [s] (let [s1 (seq s) \n              s2 (reverse s1)] \n          (= s1 s2)))", "user": "53a6e646e4b0ef122a8689cd"}, {"problem": 27, "code": "(fn [x]\n  (= x (if (string? x)\n         (apply str (reverse x))\n         (reverse x))))", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 27, "code": "(fn \n    [collection]\n    (loop [i collection\n           result true]\n      (cond \n        (empty? i) true\n        (= 1 (count i)) true\n        (not= (first i) (last i)) false\n        (= (first i) (last i))\n            (recur (drop-last (rest i))\n\t                 true))))", "user": "54391a55e4b032a45b869319"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54588070e4b01be26fd74620"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54665910e4b01be26fd746e5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54677c3de4b01be26fd746ec"}, {"problem": 27, "code": "(fn [coll]\n  (loop [coll coll]\n    (if (< (count coll) 1)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (drop-last coll)))\n        false))))", "user": "54508859e4b0e397800069a3"}, {"problem": 27, "code": "#(= (clojure.string/join \"\" %1) (clojure.string/join \"\" (reverse %1)))", "user": "54635083e4b01be26fd746bd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53342e21e4b019098a6f8b8c"}, {"problem": 27, "code": "(fn [string]\n  (let [forward (seq string)\n        rev (reverse forward)]\n    (= forward rev)))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (= (seq x)\n     (reverse x)))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54485727e4b032a45b8693c6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 27, "code": "(fn [x] (= (seq x) (seq (reverse x))))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 27, "code": "(fn palindrome? [lst] (= (reverse lst)  (map (fn [x] x) lst)))", "user": "5461873de4b01be26fd746a3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543bb568e4b032a45b869334"}, {"problem": 27, "code": "#(= (-> % reverse clojure.string/join) (clojure.string/join %))", "user": "4f9dd376e4b0dcca54ed6d27"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54696109e4b00cfc9eacc146"}, {"problem": 27, "code": ";(fn [col] \n;  (let [\n;        n (int (/ (count col) 2))\n;        first_half (take n col)\n;        second_half (take n (reverse col))\n;       ] \n;    (= first_half second_half)))\n\n#(= (seq %) (reverse %))", "user": "5465febde4b01be26fd746e1"}, {"problem": 27, "code": "(fn [i]\n  (=\n   (seq i)\n   (reverse i)))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 27, "code": "(fn [x]\n  (loop [x x]\n    (let [r (drop-last (rest x))]\n      (if\n        (not= (first x) (last x)) \n          false\n          (if (not-empty r)\n            (recur r)\n            true)))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546af00de4b00cfc9eacc163"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "545f7b09e4b01be26fd74689"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 27, "code": "(fn [x]\n  ((fn helper [idx]\n    (if (> idx (quot (count x) 2))\n      true\n      (if (= (nth x idx) (nth x (- (dec (count x)) idx)))\n        (helper (inc idx))\n        false))) 0))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 27, "code": "#(= (concat %) (reverse %))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 27, "code": "(fn [l] (= (take (/ (count l) 2) l) (take (/ (count l) 2) (reverse l))))", "user": "53da059be4b0e771c302547e"}, {"problem": 27, "code": "#(loop [s %] (if (= (first s) (last s)) (if (empty? s) true (recur (rest (drop-last 1 s)))) false))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 27, "code": "#(= (first (vec %)) (last (vec %)))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 27, "code": "(fn [coll]\n  (cond (> 2 (count coll)) true\n        (not= (first coll) (last coll)) false\n        :else (recur (butlast (rest coll)))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 27, "code": "(fn [ls] \n  (= (reverse (seq ls)) (seq ls)))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "546f926fe4b00cfc9eacc1af"}, {"problem": 27, "code": "#(= (clojure.string/join (into () %)) (clojure.string/join %))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 27, "code": "#( = (reverse %) (reverse (reverse %)))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "544e9022e4b0e3978000698b"}, {"problem": 27, "code": "(fn parindlome-checker [x]\n    (= (reverse (reverse x)) (reverse x)))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 27, "code": "(fn[list] \n   (if (seq? list) (= list (reverse list)) \n     (if (vector? list)(= list (reverse list))\n          (= list (clojure.string/reverse list)))))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 27, "code": "#(=(reverse (seq %)) (seq %))", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52457931e4b08ba239308107"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54713dc8e4b094393f72dd69"}, {"problem": 27, "code": "(fn [x]\n  (let [orig (apply str x)\n        invt (apply str (reverse x))]\n    (= orig invt)))", "user": "54722f8ce4b094393f72dd75"}, {"problem": 27, "code": "(fn [x] (loop [orig x rev (reverse x)]\n          (if (nil? (first orig))\n            true\n            (if (not= (first orig) (first rev))\n              false\n              (recur (rest orig) (rest rev))\n            )\n          )\n      )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 27, "code": "#(= (into () (seq %)) (seq %))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "544f732fe4b0e39780006994"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 27, "code": "(fn[coll]\n  (= (apply str coll) (apply str (reverse coll))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 27, "code": "(fn [ls] (= (vec ls) (reverse ls)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 27, "code": "(fn ispalin [s] (= (seq s) (reverse s)))", "user": "5474897ce4b0c51c1f4d728a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "54730420e4b094393f72dd7c"}, {"problem": 27, "code": "(fn [x]\n  (let [x (seq x)\n        r (reverse x)]\n    (= x r)))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4dce9252535d5973398f92a3"}, {"problem": 27, "code": ";; Use clojure.string/reverse to reverse strings\n;; reverse returns a sequence\n\n(fn [word] (= word (if (string? word) (clojure.string/reverse word) (reverse word))))\n\n;; bad\n;; convert everything to a sequence and compare it to the reversed sequence\n;(fn [word] (let [word-seq (seq word)] (= word-seq (reverse word-seq))))", "user": "51d46747e4b013d740b70de3"}, {"problem": 27, "code": "(fn la [x] (= x \n                (cond\n         (= (type x) java.lang.String) (apply str (reverse x))\n         :else (reverse x))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 27, "code": "#(if (= (reverse %) %)\n        true\n        (if (and (string? %) (= (clojure.string/reverse %) %))\n          true\n          false))", "user": "54775b13e4b0c51c1f4d72b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 27, "code": "(fn [countable] (\n\t= (seq countable) (reverse (seq countable))          \n))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 27, "code": "(fn [coll]\n  (every? true? (map #(if (= %1 %2) true) coll (reverse coll))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 27, "code": "(fn [input] (loop [in input] (if (< (count in) 2) true (if (= (first in) (last in)) (recur (drop 1 (drop-last 1 in))) false))))", "user": "5460832ce4b01be26fd74693"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 27, "code": "(fn a [[x & y]]\n         (if (empty? y)\n           true\n           (if (= x (last y))\n             (a (reverse (rest (reverse y))))\n             false)))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 27, "code": "(fn pal [s] (if (>= 1 (count s)) true (and (= (first s) (last s)) (pal (butlast (rest s))))))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %) ))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "5400e918e4b0de5c41848619"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse x)))", "user": "5458474ce4b01be26fd7461b"}, {"problem": 27, "code": "(fn [x]\n         (let [reversed (if (string? x)\n                          (apply str (reverse x))\n                          (reverse x))]\n           (= reversed x)))", "user": "538f89bbe4b0b51d73faae8f"}, {"problem": 27, "code": "#(= (vec %) (reverse %1))", "user": "5477056de4b0c51c1f4d72ac"}, {"problem": 27, "code": "(fn [xs] (let [c (count xs)\n               c2 (+ (/ c 2) (rem c 2))]\n            (= (take c2 xs) (take c2 (reverse xs)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 27, "code": "(fn[txt](= (reverse txt) (seq txt)))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 27, "code": "(fn pali [coll]\n  (if (<= (count coll) 1) true\n      (if (= (first coll) (last coll)) (recur (rest (drop-last coll)))\n        false)))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 27, "code": "#(= (concat %) (concat (reverse %)))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 27, "code": "(fn [collection] (= (reverse (reverse collection)) (reverse collection)))", "user": "5464dd11e4b01be26fd746d2"}, {"problem": 27, "code": "(fn [s]\n    (let [count (count s)\n          half-count (/ count 2)\n          left (take half-count s)\n          right (take-last half-count s)]\n\n      (= left (reverse right))))", "user": "547cd90ee4b0c51c1f4d72ec"}, {"problem": 27, "code": "(fn [n] (let [seq-ver (seq n) rev-seq-ver (reverse seq-ver)] (= seq-ver rev-seq-ver)))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "547d4f41e4b0c51c1f4d72f0"}, {"problem": 27, "code": "(fn [s]\n  (every? identity (map = s (reverse s))))", "user": "547dc4c7e4b0c51c1f4d72f8"}, {"problem": 27, "code": "(fn [col] \n  (= (vec col) (vec (reverse col))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 27, "code": "#(if (string? %)\n   (true? (= % (clojure.string/reverse %)))\n   (true? (= % (reverse %))))\n\n;; simplier way:\n;; #(= (seq %) (reverse (seq %)))", "user": "53a2e6abe4b0f1fc7453882f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 27, "code": "(fn [s] \n\t(let \n\t\t[\n\t\t\tchars\t(seq s)\n\t\t\tcnt\t(count chars) \n\t\t\tcnt-half\t(Math/floor (/ cnt 2))\n\t\t]\n\t\t(= (take cnt-half chars) (reverse (take-last cnt-half chars)))\n\t)\n)", "user": "547e5efbe4b0c51c1f4d7306"}, {"problem": 27, "code": "#(= (into () %) (into () (reverse %)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "545db1bfe4b01be26fd74674"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 27, "code": "(fn [thing] (#(= (reverse thing) (-> thing reverse reverse))))", "user": "548026d8e4b0e286459a1155"}, {"problem": 27, "code": "(fn [thing] (= (reverse (seq thing)) (seq thing)))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 27, "code": ";-- (fn [list] (= list (reverse list))) :-( does not works\n(fn [list] (= (seq list) (reverse (seq list))))", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 27, "code": "(fn [l] \n\t(loop [i 0]\n\t\t(if (> (+ i 2) (count l))\n\t\t\ttrue\n\t\t\t(if(not= (nth l i) (nth l (-(count l) i 1)))\n\t\t\t\tfalse\n\t\t\t\t(recur(inc i))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 27, "code": "(fn [x] \n  (\n   if(string? x)\n   (= x (clojure.string/reverse x) )\n   (= x (reverse x) )\n   )\n )", "user": "548018efe4b0c51c1f4d7335"}, {"problem": 27, "code": "(fn [coll] (\n\t= (seq coll) (reverse (seq coll))\n))", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5473879ce4b0c51c1f4d727e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 27, "code": "(fn c\n  [p]\n  (if (empty? p)\n    true\n    (and (= (first p) (last p)) (c (rest (butlast p))))\n  )\n)", "user": "54410a71e4b032a45b869367"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "547ee58de4b0c51c1f4d7310"}, {"problem": 27, "code": "(fn pal [x] \n  (or \n   (< (count x) 2) \n   (and \n    (= \n     (first x) \n     (last x)) \n    (pal \n     (butlast (rest x)))\n    )\n   )\n  )", "user": "548166b3e4b0e286459a116d"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "548204b2e4b0e286459a117a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5480e5a1e4b0e286459a1162"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "547e48bee4b0c51c1f4d7304"}, {"problem": 27, "code": "#( = (seq %) (reverse %))", "user": "5480ec9ee4b0e286459a1163"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 27, "code": "(fn\n  [coll]\n  (let [r (reverse coll)]\n    (if (string? coll)\n      (if (= (apply str r) coll)\n        true\n        false)\n      (if (= r coll)\n        true\n        false))))", "user": "5484143de4b0e286459a1197"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54848141e4b0e286459a119e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "548392fce4b0e286459a1191"}, {"problem": 27, "code": "#(= (reverse (into () %)) (into () %))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 27, "code": "(fn [sequ] (= (reverse sequ) (seq sequ)))", "user": "548582eee4b0e286459a11ae"}, {"problem": 27, "code": "#(\n    = (seq %) (reverse (seq %))\n)", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 27, "code": "#( = (seq %) (reverse (seq %)) )", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 27, "code": "#(= (cond (string? %) (apply str (reverse %)) :else (reverse %)) %)", "user": "548592a8e4b0e286459a11af"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 27, "code": "#(condp instance? % String (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 27, "code": "(fn [x] (= (reverse (apply list x)) (apply list x)))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 27, "code": "(fn [s] (let [half (int (/ (count s) 2))] (= (take half s) (reverse (take-last half s)))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 27, "code": "#(=(reverse (reverse %)) (reverse %))", "user": "54802bd1e4b0e286459a1157"}, {"problem": 27, "code": "#(= (seq %) (reduce conj '() %))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 27, "code": "(fn palindrome [l]\n  (if (<= (count l) 1)\n    true\n    (and (= (first l) (last l))\n         (palindrome (rest (drop-last l))))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse x)))", "user": "548485f5e4b0e286459a119f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 27, "code": "(fn [a-coln] \n  (= (reverse a-coln) (vec a-coln)))", "user": "534cf749e4b084c2834f4a97"}, {"problem": 27, "code": "(fn pal [x] (or (empty? x) (empty? (rest x)) (and (= (first x) (last x)) (pal (drop-last (rest x))))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 27, "code": "(fn [s]\n  (or (= (reverse s) s) (= (apply str(reverse s)) s)))", "user": "5474df6ee4b0c51c1f4d7290"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "547c0c26e4b0c51c1f4d72e2"}, {"problem": 27, "code": "(fn palindromep [coll]\n  (if (< (count coll) 2)\n      true\n      (and (= (first coll) (last coll))\n           (palindromep (rest (butlast coll))))))", "user": "547f8736e4b0c51c1f4d731d"}, {"problem": 27, "code": "(fn [xs] (if (string? xs) (= xs (apply str (reverse xs)))\n                 (= xs (reverse xs))))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n    (= x (reverse x))\n    ))", "user": "5489948fe4b0e286459a11e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54893618e4b0e286459a11e0"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "548018e5e4b0c51c1f4d7332"}, {"problem": 27, "code": "#(= (into [] %) (into '() %))", "user": "54886e00e4b0e286459a11d1"}, {"problem": 27, "code": "(fn [x] (if (empty? x) true (if (= (first x) (last x)) (recur (drop-last (drop 1 x))) false)))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x) (= (clojure.string/join (reverse x)) x) (= (reverse x) x))\n      \t\t\t\n  )", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5489d6ffe4b0e286459a11ee"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 27, "code": "(fn palindrome?\n  [inputseq]\n  (if (= String (class inputseq))\n    (= inputseq (apply str (reverse inputseq)))\n    (= inputseq (reverse inputseq))))", "user": "54411506e4b032a45b869369"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "548cd637e4b0e286459a1210"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "548cd813e4b0e286459a1211"}, {"problem": 27, "code": "(fn [l] (let [s (map hash l)] (= s (reverse s))))", "user": "548c8115e4b0e286459a120c"}, {"problem": 27, "code": "#(let [reversed (apply str (reverse (seq %)))]\n    (= reversed (apply str (seq %))))", "user": "5480b4c6e4b0e286459a115c"}, {"problem": 27, "code": "#(= (seq %) (reverse %) )", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 27, "code": "(fn [x]\n  (every? #(apply = %)\n          (partition 2\n                     (interleave x (reverse x)))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54897284e4b0e286459a11e6"}, {"problem": 27, "code": "#(let [m (quot (count %) 2)] (= (take m %) (take m (reverse %))))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5485da80e4b0e286459a11b4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "548f5086e4b0e286459a1239"}, {"problem": 27, "code": "(fn [collection]\n  (loop [result true\n         tempCollection collection]\n    (if (or (> 2 (count tempCollection)) (false? result))\n      result\n      (recur \n       (= (first tempCollection) (last tempCollection)) \n       (reverse (rest (reverse (rest tempCollection))))))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54543484e4b0e397800069d4"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 27, "code": "#(\n  = (seq %) (reverse (seq %))\n\n  \n  )", "user": "54903056e4b0b312c081ff2e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5476d6cae4b0c51c1f4d72aa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 27, "code": "(fn ! [x] (or (empty? x) (empty? (rest x))\n                       (let\n                         [a (first x)\n                          b (last x)\n                          mid (butlast (rest x))]\n                         (and (= a b) (! mid))\n                         )))", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 27, "code": "#(= (conj (rest %) (first %)) (reverse %))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 27, "code": "(fn  [x] (or \n        (< (count x) 2) \n        (and\n          (= (first x) (last x)) \n          (recur(rest(reverse(rest x))))\n              )))", "user": "548d1d82e4b0e286459a1215"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5481e9b7e4b0e286459a1177"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54886239e4b0e286459a11d0"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "54874116e4b0e286459a11c3"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "54926752e4b0b312c081ff44"}, {"problem": 27, "code": "#(= (seq %) ((comp reverse seq) %))", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 27, "code": "#(-> % (seq) (reverse) (= (seq %)))", "user": "512b07f7e4b078b06821febb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5455510fe4b0e397800069df"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "524bc44ae4b09eba1c0223ed"}, {"problem": 27, "code": "(fn [coll]\n  (if (empty? coll)\n    true\n  (let [a (first coll)\n        b (last coll)]\n    (if (= a b)\n      (recur (-> coll (rest) (drop-last)))\n      false))))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (if (#{0 1} (count coll))\n    true\n    (let [c (vec (seq coll))\n          s (first c)\n          e (peek c)]\n      (if (not (= s e))\n        false\n        (palindrome? (pop (vec (next c))))))))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 27, "code": "(fn [x]\n  (apply = (map = x (reverse x))))", "user": "52d74c2de4b09f7907dd1373"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 27, "code": "(fn [p] (empty? ((group-by identity (map = p (reverse p))) false)))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "548d15a0e4b0e286459a1214"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 27, "code": "#(= (-> % reverse) (seq %))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54965534e4b0b312c081ff65"}, {"problem": 27, "code": "#(= (vec (into () %)) (vec %))", "user": "548f11a0e4b0e286459a122d"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "54973b58e4b0b312c081ff70"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 27, "code": "(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 27, "code": "#(let [forwards (vec %)\n        backwards (vec (reverse %))]\n    (= forwards backwards))", "user": "543b12cce4b032a45b86932a"}, {"problem": 27, "code": "#(= ( vec %) ( vec (reverse %))\n  \n )", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "548ef1dee4b0e286459a1229"}, {"problem": 27, "code": "#(= (reverse (seq %) ) (seq %))", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 27, "code": "#(= (list* %)(reduce conj '() (list* %)))", "user": "549831b0e4b0b312c081ff7d"}, {"problem": 27, "code": "(fn  [x]\n  (= (reverse x) (seq x)))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54975e99e4b0b312c081ff72"}, {"problem": 27, "code": "(fn [s]\n    (if (instance? String s)\n        (= s (clojure.string/reverse s))\n        (= s (reverse s))\n    )\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 27, "code": "#(= ((comp vec reverse) %) (vec %))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 27, "code": "(fn [x] (let [seq-x (seq x)] \n          (= seq-x (reverse seq-x))))", "user": "549a1234e4b0f3d1d8e70f68"}, {"problem": 27, "code": "(fn [s] (= (seq s) (seq (reverse s))))", "user": "549931fbe4b0b312c081ff8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 27, "code": "(fn [s] (let [sqs (seq s)]\n (= (reverse sqs) sqs))\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n  (= x (reverse x))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "545db6e3e4b01be26fd74675"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 27, "code": "(fn[s]  (= (seq s) (reverse s)))", "user": "508daac4e4b0f17d83ea26c0"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "549c1848e4b0f3d1d8e70f84"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 27, "code": "(fn [s]\n  (if (instance? String s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "53da1e2ce4b0e771c3025487"}, {"problem": 27, "code": "#(= (into () %) (seq %))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 27, "code": "#(-> % reverse (= (seq %)))", "user": "5499e23de4b03163384f4706"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "549d7e16e4b0f3d1d8e70f96"}, {"problem": 27, "code": "#(loop [x %]\n   (if (<= (count x) 1)\n     true\n     (if (= (first x) (last x))\n       (recur (reverse (rest (reverse (rest x)))))\n       false)))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 27, "code": "(fn pal? \n  [p] (if (or (empty? p) (= (count p) 1)) true (if (= (first p) (last p)) (pal? (butlast (rest p))) false)))", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 27, "code": "(fn [jseq]\n  (if (= (type jseq) java.lang.String)\n    (= (apply str (reverse jseq)) jseq)\n    (= (reverse jseq) jseq)))", "user": "547a0d1ce4b0c51c1f4d72ca"}, {"problem": 27, "code": "#(= (seq %) (reduce (fn [l x] (conj l x)) '() (seq %)))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 27, "code": "(fn [coll]\n  (let [num (int (/ (count coll) 2))\n        left (take num coll)\n        right (take-last num coll)]\n    (= left (reverse right))))", "user": "52c0b2b9e4b07a9af5792353"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))\n\n;(fn [coll]\n;  (let [rc (reverse coll) n (count coll)]\n;    (every? identity \n;      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 27, "code": "(fn [coll] \n  (= (reverse coll) (seq coll)))", "user": "54a0be2fe4b0f3d1d8e70fba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5374721be4b06d7f452d9e22"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "54a0ae0fe4b0f3d1d8e70fb8"}, {"problem": 27, "code": "(fn p-check [sequence]\n  (let [f-l-match? (fn [sequence] (= (first sequence) (last sequence)))]\n    (if (empty? sequence)\n      true\n      (if (f-l-match? sequence)\n        (p-check (rest (butlast sequence)))\n        false))))", "user": "54636b05e4b01be26fd746c0"}, {"problem": 27, "code": "(fn [xs] \n  (every? identity\n          (map = (reverse xs) xs)))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 27, "code": "(fn [v]\n  (loop [xs v ys (reverse v)]\n      (if (empty? xs)\n        true\n        (let [[x & rxs] xs\n              [y & rys] ys]\n          (if (= x y)\n            (recur rxs rys)\n            false)))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n    (= l (reverse l))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 27, "code": "(fn [xs] (= (into [] xs) (reverse (into [] xs))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 27, "code": "(fn [palin]\n  (loop [sec palin]\n    (if (empty? sec) true\n      (if (not (= (first palin) (last palin)))\n        false\n        (recur (butlast (rest sec)))\n        ))\n  ))", "user": "545b0275e4b01be26fd74648"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 27, "code": "#(let [a (into [] %)] (= (reverse a) a))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 27, "code": "(fn [something]\n  (let [seq (into [] something)]\n    (= seq (reverse seq))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 27, "code": "(fn palindrome [x]\n\t\t((fn [p a b]\n\t\t\t(cond (= a b) true\n\t\t\t\t  (> a b) true\n\t\t\t\t  (not (= (nth p a) (nth p b))) false\n\t\t\t\t  :else (recur p (+ a 1) (- b 1)))) x 0 (- (count x) 1)))", "user": "530ec8d4e4b08068f379ecc2"}, {"problem": 27, "code": "#(= 0 (compare \n  (apply str %)\n  (apply str (reverse %))))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 27, "code": "(fn palindrome [l]\n  (if (< (count l) 2) true\n      (if (not= (first l) (last l)) false\n       (palindrome (drop-last 1 (rest l))))))", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5461500be4b01be26fd7469f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "53403f42e4b085b17e897da8"}, {"problem": 27, "code": "(fn r [x] (if (= (first x) (last x))  (if (= x ()) true (r (rest (reverse (rest x)))))  false))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 27, "code": "(\n\tfn function [var] \n  \t(\n     \t\n         if (string? var)\n     \t\t(= (str var) (apply str(reverse var)))\n     \t\t(= var (reverse var))\n    \n         \n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 27, "code": "#(if (string? %1)\n   (= %1 (apply str (reverse %1)))\n   (= %1 (reverse %1)))", "user": "545ded41e4b01be26fd74678"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 27, "code": "#(let [x (seq %)]\n   (if (= x (reverse x))\n     true\n     false))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 27, "code": "(fn pali-coll [coll]\n  (let [f (first coll) l (last coll) r (drop 1 (drop-last coll))]\n     (if(= f l)\n       (if(= (count coll) 0)\n          true\n          (pali-coll r)\n         )      \n      false\n    )))", "user": "52fe2dffe4b047fd55837036"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546692aee4b01be26fd746e7"}, {"problem": 27, "code": "(fn palindrome? [sq]\n  (if (< (count sq) 2)\n    true\n    (if (= (last sq) (first sq))\n      (palindrome? (rest (butlast sq)))\n      false\n    )\n  )\n)", "user": "54aad6c0e4b09f271ff37cbc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54a27b05e4b09f271ff37c5c"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 27, "code": "#(= (reverse %) (reduce conj [] %))", "user": "54a2b2e8e4b09f271ff37c5d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54ab04f1e4b09f271ff37cc0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 27, "code": "(fn [in]\n  (let [s (seq in)]\n    (loop [[ff & fr] s [rf & rr] (reverse s) i (int (/ (count in) 2))]\n      (if (= i 0)\n\t\ttrue\n\t\t(if (not (= ff rf))\n\t\t  false\n\t\t  (recur fr rr (- i 1))\n\t\t)\n      )\t  \n    ) \n  )\n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 27, "code": "(fn [x]\n  (let\n    [rev (if (string? x)\n           clojure.string/reverse\n           reverse)]\n    (= x (rev x))))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "53e88247e4b036ad0777e489"}, {"problem": 27, "code": "(fn [s]\n   (if (= (.toString (type s)) \"class java.lang.String\")\n    (= s (apply str (vec (reverse s))))\n    (= s (reverse s))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 27, "code": "(fn palD[pal](if(= (first pal) (last pal))true false))", "user": "54aef4d0e4b09f271ff37cfe"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54af500fe4b09f271ff37d06"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 27, "code": "(fn palindrom [s]\n  (if (= (seq s) (reverse (seq s)))\n    true\n    false))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 27, "code": "(fn [sq]\n  (= (apply str sq) (apply str (reverse sq))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 27, "code": "(fn [s]\n  (if (= (reverse (reverse s)) (reverse s))\n    true\n    false))", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 27, "code": "(fn fc27 [l]\n  (if (empty? l) true\n    (and (= (first l) (last l))\n         (fc27 (butlast (rest l))))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 27, "code": "(fn [text] (= (seq text) (reverse text)))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 27, "code": "(fn f [xs]\n(cond (empty? (rest xs)) true\n      (= [:foo :bar :foo] xs) true\n      (= '(1 1 3 3 1 1) xs) true\n      (= \"racecar\" xs) true\n      :else (and (= (first xs) (last xs)) (f (rest xs))))\n     )", "user": "54b04ce4e4b09f271ff37d12"}, {"problem": 27, "code": "#(= (seq %) (reverse  %))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 27, "code": "(comp (partial apply =) (juxt seq reverse))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 27, "code": "(fn\n  [seq]\n  (loop [seq seq]\n    (let [len (count seq)]\n\t  (if (or (= len 0) (= len 1))\n        true\n        (if (= (first seq) (last seq))\n          (recur (butlast (rest seq)))\n          false)))))", "user": "52c3dffee4b0c2d177d620cb"}, {"problem": 27, "code": "(fn [s]\n  (let [s (seq s)]\n    (= (reverse s) s\n    )\n  )\n)", "user": "54b187bee4b09f271ff37d21"}, {"problem": 27, "code": "#(= (into () (into ()  %1)) (into () %1))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 27, "code": "(fn [t] (reduce #(and %1 %2) (map = t (reverse t))))", "user": "54b2a4f7e4b09f271ff37d2c"}, {"problem": 27, "code": "#(if (= (reverse (reverse %)) (reverse %)) true false)", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 27, "code": "(fn my-palindrome-detector\n  [coll]\n  (= (seq coll) (reverse coll)))", "user": "548db64ce4b0e286459a121c"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 27, "code": "(fn [p] (= (reverse p) (seq p)))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 27, "code": "(fn pal [x]\n\t(if (= 0 (count x)) true\n     (and (= (first x) (last x)) (pal (rest (butlast x)))\n    )\n ))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 27, "code": "(fn [l] (= (reverse (into () l)) (reverse l)))", "user": "5455573be4b0e397800069e0"}, {"problem": 27, "code": "#(= (seq %) (into '() %))", "user": "5485d169e4b0e286459a11b2"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "4f0f3725535d0136e6c22337"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 27, "code": "(fn [coll]\n  (= (take (quot (count coll) 2) coll) (reverse (take-last (quot (count coll) 2) coll))))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b567eee4b05787c3b163a2"}, {"problem": 27, "code": "(fn f [q]\n  (empty? (for [ [a b](map vector q (reverse q)) :when (not= a b) ] a )))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 27, "code": "(fn isPalindrome [input]\n  (let [coll (seq input)]\n  \t(= coll (reverse coll))\n  )\n)", "user": "54b5870ae4b05787c3b163a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 27, "code": "(fn [x] (= (apply list x) (reverse (apply list x))))", "user": "54b63dbee4b05787c3b163b5"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 27, "code": "#(let [coll (into [] %1)] (= (reverse coll) coll))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 27, "code": "(fn [coll] (= (reverse (vec coll)) (vec coll)))", "user": "54b402dce4b05787c3b16388"}, {"problem": 27, "code": "(fn [s] (or (empty? s) (and (= (last s) (first s)) (recur (drop 1 (butlast s))))))", "user": "54b7520de4b0ed20f4ff6e83"}, {"problem": 27, "code": "(fn [coll]\n  (let [s (seq coll)]\n    (if (= s\n           (reverse s))\n      true\n      false)))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 27, "code": "(fn palindrome? [num]  (= (seq num) (reverse num)))", "user": "54b2859ce4b09f271ff37d2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 27, "code": "(fn palindrome [s] (if (empty? s) true (let [f (first s) l (last s)] (if (not= f l) false (recur (butlast (rest s)))))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 27, "code": "(fn [x] (= (reverse (vec x)) (vec x)))", "user": "54b7eebae4b0ed20f4ff6e8e"}, {"problem": 27, "code": ";(fn [stuff]\n;  (if (< (count stuff) 2)\n;    true\n;    (if (= (first stuff) (last stuff))\n;      (recur (reverse (rest (reverse (rest stuff)))))\n;      false)))\n\n#(= (seq %) (reverse %))", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 27, "code": "(fn [n]  (loop [v (apply vector n)]\n    (if-not (= (first v) (last v)) \n      false\n      (if (< (count v) 2)\n        true\n        (recur (subvec v 1 (- (count v) 1)))\n        )   \n      )   \n    ) )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 27, "code": "(fn x [s]\n          (if (or (empty? s) (= 1 (count s)))\n            true\n            (and (= (first s) (last s)) (x (drop-last (rest s))))\n          )\n        )", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 27, "code": "(fn [inp] (= (reverse inp) (seq inp)))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 27, "code": "(fn [c] \n  (= (seq c) (reverse c)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 27, "code": "#(every? true? (map (fn [a b] (= a b)) % (reverse %)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 27, "code": "(fn pal [col]\n  (case (count col)\n    0 true\n    1 true\n    (let [a (first col)\n          r (rest (reverse (rest col)))\n          z (first (reverse col))\n          ]\n      (and (= a z) (pal r))\n    )\n  )    \n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse lst)))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 27, "code": "#(reduce (fn [a b] (and a (= (b 0) (b 1))))\n        (map vector %1 (reverse %1)))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 27, "code": "(fn [coll]\n   (if (string? coll)\n     (= coll (apply str (reverse coll)))\n     (= coll (reverse coll))))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1) )", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 27, "code": "(fn [my-seq]\n  (= (vec my-seq) (reverse my-seq)))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 27, "code": "(fn [sq] (= (vec sq) (reverse sq)))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54bc75a0e4b0ed20f4ff6ed1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 27, "code": "(fn [forwards]\n  (= (reverse (reverse forwards)) (reverse forwards)))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 27, "code": "(fn pal[input]\n  (let [inseq (seq input)]\n    (if (<=\n         (count inseq)\n         1)\n      true\n      (and (= (first inseq) (last inseq))\n           (pal (-> inseq rest butlast))))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "52b091b4e4b0c58976d9accc"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "54be096de4b0ed20f4ff6ee6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 27, "code": "(fn p [x] (or (<= (count x) 1)\n              (and (= (first x) (last x)) \n                   (p (drop-last (rest x))))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 27, "code": "(fn [s] \n\t(if (empty? s) true\n\t(if (= (first s) (last s)) \n\t\t(recur (rest (butlast s))) \n\t\tfalse)))", "user": "54b4046de4b05787c3b16389"}, {"problem": 27, "code": "#(let [coll (seq %)] (= coll (reverse coll)))", "user": "504dfc75e4b078edc5f59387"}, {"problem": 27, "code": "(fn [lst]\n  (let [aseq (seq lst)\n        len (count lst)\n        front (take (/ len 2) aseq)\n        back-len (if (odd? len) (- (/ len 2) 1) (/ len 2))\n        back (drop back-len aseq)]\n\n    (= front (reverse back))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 27, "code": "(fn [s] (let [r (reverse s)] (if (string? s) (= (apply str r) s) (= r s))))", "user": "520a796be4b01da9d47a99dc"}, {"problem": 27, "code": "(fn [my_seq]\n  (if (string? my_seq)\n    (let [rev_my_seq (clojure.string/reverse my_seq)]\n      (= my_seq rev_my_seq))\n  (= my_seq (reverse my_seq))))", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "54c02ee8e4b0ed20f4ff6f10"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 27, "code": "(fn pal [items] (\n  if (= (first items) (last items)) (if (<= (count items) 1) true (pal (butlast (rest items)))) false           \n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 27, "code": "(fn palin [x] (if (> (count x) 0) (if (= (last x) (first x)) (palin (rest (butlast x))) false) true))", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and\n      (= (first s) (last s))\n      (palindrome? (rest (butlast s)))\n    )\n  )\n)", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d1ba22e4b00fb29b221317"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5448616be4b032a45b8693c9"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)\n              size (+ (quot (count s) 2) (rem (count s) 2))\n              front-half (take size s)\n              back-half (take size (reverse s))] \n          (= front-half back-half)))\n;; why didn't I think of (= (seq s) (reverse s))...", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 27, "code": "(fn ! [s]\n  (or (empty? s)\n      (and (= (first s) (last s))\n           (! (butlast (rest s))))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 27, "code": "(fn\n  [mySeq]\n  (if (string? mySeq)\n    (= (vec mySeq) (reverse (vec mySeq)))\n    (= mySeq (reverse mySeq))))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (seq coll) (reverse coll)))", "user": "54c31f1be4b045293a27f609"}, {"problem": 27, "code": "(fn [s] (loop [i 0 j (dec (count s))] (if (>= i j) true (if (not= (nth s i) (nth s j)) false (recur (inc i) (dec j))))))", "user": "54c47620e4b045293a27f61c"}, {"problem": 27, "code": "(fn\n  [xs]\n  (= (vec xs) (reverse (vec xs))))", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 27, "code": "(fn mr [c] (= ((fn mf [res coll] ( if (empty? coll) (if (string? c) (apply str res) res) (mf (conj res (first coll)) (rest coll) ) ) ) nil c) c) )", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "53a46c4ae4b0b62ce300572f"}, {"problem": 27, "code": "#(let [source (interpose \"\" %)] (= source (reverse source)))", "user": "53a69398e4b0ef122a8689ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54bff194e4b0ed20f4ff6f0d"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %) )", "user": "54c6619ae4b045293a27f62b"}, {"problem": 27, "code": "(comp #(= % (reverse %)) seq)", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "54c671b7e4b045293a27f62d"}, {"problem": 27, "code": "(fn pal ([s] (pal s s [])) ([so ss sr] (if (empty? ss) (= (vec so) (vec sr)) (recur so (rest ss) (concat [(first ss)] sr)))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c29697e4b045293a27f604"}, {"problem": 27, "code": "#(loop [s %]\n   (if (empty? s) true\n\t(if (= (first s) (last s))\n     (recur (butlast (rest s)))\n      false)))", "user": "54c5e36ee4b045293a27f626"}, {"problem": 27, "code": "(fn [p]\n\t(loop [cnt (- (quot (count p) 2) 1) is-palindrome true]\n\t\t(if (or (< cnt 0) (not is-palindrome))\n\t\t\tis-palindrome\n\t\t\t(recur (dec cnt) (= (nth p cnt) (nth p (- (count p) cnt 1)))))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 27, "code": "(fn [s]\n  (= (vec s) (vec (reverse s))))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 27, "code": "#(= (into '() %) (into '[] %))", "user": "54c611d1e4b045293a27f627"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "54c641f8e4b045293a27f628"}, {"problem": 27, "code": "#(apply = (map reverse [% (reverse %)]))", "user": "54c83824e4b045293a27f649"}, {"problem": 27, "code": "(fn ispalidrome? [l]\n  (= (apply str (reverse l)) (apply str l))\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "54b7ceb3e4b0ed20f4ff6e8a"}, {"problem": 27, "code": "(fn palindrome [l]\n  (cond\n   (not (= (first l) (last l))) false \n   (empty? l) true\n   :else (palindrome (rest (drop-last l)))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 27, "code": "#(loop [xs % reversed (reverse %)]\n   (cond\n    (and (empty? xs) (empty? reversed)) true\n    (not (= (first xs) (first reversed))) false\n    :else (recur (rest xs) (rest reversed))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 27, "code": "(fn [t] (= (reduce #(cons %2 %1) [] t) (vec t)))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 27, "code": "(fn [s] \n   (if (= (apply str s) (apply str (reverse s)))\n    true\n    false))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c93665e4b045293a27f661"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54c93206e4b045293a27f65d"}, {"problem": 27, "code": "(fn\n  [input]\n  (let [res (seq input)]\n  (= (reverse res) res)))", "user": "52c2106fe4b07a9af5792374"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54c7b7c5e4b045293a27f63f"}, {"problem": 27, "code": "(fn [s]\n   (= s (if (= String (type s)) \n          (let [lst (list)]\n            (reduce #(str %2 %1)\n                    (mapcat #(conj lst %1) s)))\n          (reverse s))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 27, "code": "(fn [x]\n\t(cond \n        (= (count x) 0)\n           true\n     \t(= (first x) (last x))\n     \t\t(recur (-> x (rest) (butlast)))\n        :else\n            false\n     )\n)", "user": "54c97cb3e4b045293a27f677"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse (seq a))))", "user": "54c9f165e4b045293a27f687"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c968bfe4b045293a27f66f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c97a56e4b045293a27f676"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "54bd17f7e4b0ed20f4ff6eda"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 27, "code": "(fn [s] \n  (= (seq s) (into '() s)))", "user": "54c6a59ce4b045293a27f62e"}, {"problem": 27, "code": "(fn palindrme? [coll] \n  (let [halfsize (/ (count coll) 2)]\n    (= \n     (take halfsize coll) \n     (take halfsize (reverse coll))))\n  )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 27, "code": "#(or (<= (count %) 1) (and (= (first %) (last %)) (recur (butlast (next %)))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54c9ced5e4b045293a27f680"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 27, "code": "#(= (lazy-seq %) (reverse %))", "user": "4e70eae1535d5021c1a89642"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54ccb15de4b057c6fda3a28e"}, {"problem": 27, "code": "(fn [y]\n  (loop\n  [x y]\n  (cond \n   (>= 1 (count x)) true\n   (not= (first x) (last x)) false\n   :else (recur (drop-last (drop 1 x)))\n  )\n))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 27, "code": "(fn [items]\n  (= items\n     (if (string? items)\n       (clojure.string/join\n        (reverse items))\n       (reverse items))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 27, "code": "(fn [s] (every? true? (map = s (reverse s))))", "user": "54c6e78ae4b045293a27f634"}, {"problem": 27, "code": "(fn palindrome? [xs] (= (seq xs) (reverse xs)))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cc1313e4b057c6fda3a289"}, {"problem": 27, "code": "(fn [p] (= (seq p) (reverse p)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cf1932e4b018d918be98c9"}, {"problem": 27, "code": "(fn pal [seq]\n(if (<= (count seq) 1) true\n(if (not= (first seq) (last seq)) false\n(recur (butlast (rest seq)))\n)))", "user": "54c74a78e4b045293a27f637"}, {"problem": 27, "code": "(fn pal [seq]\n(if (<= (count seq) 1) true\n(if (not= (first seq) (last seq)) false\n(recur (butlast (rest seq)))\n)))", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 27, "code": "(fn [s] (= (vec s) (reverse (vec s))))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 27, "code": "(fn f [col] \n  (if (empty? col) true\n    (and (= (first col) (last col)) (f (rest (drop-last col))))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54962cf0e4b0b312c081ff64"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 27, "code": "(fn [p] (= (reverse p) (seq p)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5428a4bae4b01498b1a71b33"}, {"problem": 27, "code": "(fn palindrome? [xs] (or (empty? xs) (and (= (first xs) (last xs)) (palindrome? (drop-last (rest xs))))))", "user": "54d03026e4b018d918be98de"}, {"problem": 27, "code": ";#(= (seq %) (reverse %))\n(fn reverser [x] (if (seq (rest x))\n                   (and (reverser (rest (butlast x))) (= (first x)(last x)))\n                   true))", "user": "54d0ceb5e4b0e8a36923e5d1"}, {"problem": 27, "code": "(fn palindrome? [x] ( if( or (= (count x) 1) (= (count x) 0) ) true \n                     (and (= (last x) (first x)) (palindrome?(rest (butlast x))))))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 27, "code": "(fn [coll] (\n            if (= \n                ((fn [x] (reverse (seq x))) coll)\n                (seq coll)) \n            true \n            false))", "user": "54d0ceb2e4b0e8a36923e5d0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 27, "code": "(fn [what] \n  (= (reverse what) ((comp reverse reverse) what)))", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 27, "code": "(fn\n  [vals]\n  (loop [remain vals]\n    (if (<= (count remain) 1)\n      true\n      (if (= (first remain) (last remain))\n        (recur (rest (reverse (rest remain))))\n        false))))", "user": "54d21e6de4b0e8a36923e5ee"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 27, "code": "(fn \n  [junk]\n  (loop [candidate junk]\n    (if (= (first candidate) (last candidate))\n      (if (< (count candidate) 3)\n        true\n       \t(recur (butlast (rest candidate))) \n       )\n      false)\n    )\n)", "user": "54d0f744e4b0e8a36923e5d7"}, {"problem": 27, "code": "(fn [l]\n  (let [len (count l)\n        mid (int (/ len 2))]\n        (= (reverse (take mid l))\n                    (drop (if (odd? len)\n                            (+ mid 1)\n                            mid)\n                          l))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "54d13d43e4b0e8a36923e5df"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 27, "code": "(fn [xs]\n  (let [x (seq xs)]\n    (= x (reverse x))))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54d2f306e4b0e8a36923e5fe"}, {"problem": 27, "code": "#(= (reverse %)\n           (reverse (reverse %)))", "user": "54c72b19e4b045293a27f636"}, {"problem": 27, "code": "#(= (vec % ) (rseq (vec %)))", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 27, "code": "(fn [param]\n  (let [rev (reverse param)]\n    (loop [a param,\n           b rev]\n      (if (not= (first a) (first b))\n        false\n        (if (empty? a)\n          true\n          (recur (rest a) (rest b))\n        )\n      )\n    )\n  )\n)", "user": "54d35746e4b0e8a36923e606"}, {"problem": 27, "code": "#(cond (empty? %) true\n       (not (= (first %) (last %))) false \n       :else (recur (rest (drop-last %))))", "user": "52857128e4b0239c8a67adf2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54d0afb6e4b0e8a36923e5cd"}, {"problem": 27, "code": "(fn [xs] (every? true? (map = (seq xs) (reverse (seq xs)))))", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 27, "code": "#(apply = ((juxt first last) %))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 27, "code": "#(if (= (into '() %) (reverse (into '() %)))\n   true\n   false)", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 27, "code": "(fn [o]\n  (=\n   (reverse o)\n   (reverse (reverse o))))", "user": "54d468d0e4b0a52adc2e2000"}, {"problem": 27, "code": "(fn palindrer [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n  (= l (reverse l))))", "user": "53771d98e4b06839e8705e2e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "536d75cbe4b0fc7073fd6e5b"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x) (reverse (reverse x))))", "user": "544e8c4fe4b0e3978000698a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 27, "code": "(fn [x]\n  (loop [x x\n         result true]\n    (if (= (count x) 0)\n      result\n      (if ( not ( = (first x) (last x)))\n        (not result)\n        (recur ( rest (butlast x)) result )))))", "user": "54d529cbe4b0a52adc2e2009"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 27, "code": "(fn [coll] (every? identity \n                   (map #(= %1 %2) \n                        coll \n                        (reverse coll))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54d63357e4b0a52adc2e2018"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54d55abfe4b0a52adc2e200f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 27, "code": "(fn\n  [coll]\n  (= 0 (compare (vec coll) (vec (reverse coll)))))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 27, "code": "(fn [x] \n  (= \n   (apply str (reverse x)) \n   (apply str x)))", "user": "54d6c3dbe4b0a52adc2e201f"}, {"problem": 27, "code": "(fn par [x]\n  (cond (<= (count x) 1) true\n        (= (first x) (last x)) (par (rest \n                                      (reverse (rest (reverse x)))\n                                    )\n                               )\n        true false\n  )\n)", "user": "54d707bde4b0a52adc2e2025"}, {"problem": 27, "code": "( fn p[x]( = (seq x) (reverse x) ) )", "user": "54ca582be4b057c6fda3a259"}, {"problem": 27, "code": "(fn [v] (= (reverse v)\n           (reverse (reverse v))))", "user": "54d31cf1e4b0e8a36923e600"}, {"problem": 27, "code": "#(let [r (reverse %)]\n          (every? identity (map = % r)))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 27, "code": "#(let [input (apply list %)]\n   (= input (reverse input)))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 27, "code": "(fn [xs] (let [rs (reverse xs) pairs (map vector xs rs)] (every? #(apply = %) pairs)))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (vec x)))", "user": "5005ca29e4b0678c553fc46f"}, {"problem": 27, "code": "#(let [xs (for [x %] x)] (= xs (reverse xs)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 27, "code": "(fn pal [s] (= s\n  (if (string? s)\n    (apply str (reverse s))\n    (reverse s))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 27, "code": "#(= (seq %)\n    (-> %\n        seq\n        reverse))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 27, "code": "(fn [s] (every? #(apply = %) (map vector s (reverse s))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 27, "code": "(fn p27\n\t( [s] (if (string? s) (p27 (apply str (reverse s)) s ) (p27 s (reverse s))))\n\t( [s r] (= s r)))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54725331e4b094393f72dd76"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 27, "code": "#(let [o (vec %1)] (= o (reverse o)))", "user": "54d6b822e4b0a52adc2e201d"}, {"problem": 27, "code": "(fn [x] (= (if (string? x) (apply str (reverse x)) (reverse x)) x))", "user": "54c54d7ce4b045293a27f622"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse  %)))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 27, "code": "(fn pali [x] (if (empty? x) true (if (= 1 (count x)) true (if (= (first x) (last x)) (pali (next(butlast x))) false))))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (clojure.string/reverse x) (reverse x))))", "user": "4e690ace535d8ccf87e9fe95"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "54dc40b3e4b024c67c0cf77f"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (or (empty? x) (empty? (rest x)))\n    true\n    (let [[s & r] x]\n      (let [[l & f] (reverse r)]\n        (if (= s l)\n          (palindrome f)\n          false)))))", "user": "54dc4010e4b024c67c0cf77e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54dcb632e4b024c67c0cf786"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "54dd3bdde4b024c67c0cf791"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 27, "code": "(fn[s] (= (seq s) (reverse (seq s))))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54db0ab8e4b024c67c0cf75a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 27, "code": "(fn mypal [coll]\n  (cond\n   (<= (count coll) 1) true\n   (= (first coll) (last coll)) (mypal (rest (drop-last coll)))\n   :else false))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 27, "code": "(fn [sq]\n  (let [sq (seq sq)]\n    (= sq (reverse sq))))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 27, "code": "(fn palindrome? \n  [s]\n  (= (reverse ( reverse s)) (reverse s))\n\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 27, "code": "(fn [s]\n  (loop [rest-of-s s\n         maybe false]\n    (let [first-s (first rest-of-s)\n          last-s (last rest-of-s)\n          rest-of-s (rest (butlast rest-of-s))]\n      (if (not (seq rest-of-s))\n        maybe\n        (recur rest-of-s (= first-s last-s))))))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54df40aae4b024c67c0cf7ab"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54e01b31e4b024c67c0cf7b3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 27, "code": "(fn [sq] (let [sq (seq sq)] (= sq (reverse sq))))", "user": "5066003ee4b0313a384e5647"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (let [r (reverse s)]\n    (= s (if (instance? String s)\n           (apply str r)\n           r))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "5161d6bae4b009fba0926e39"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "54e10605e4b024c67c0cf7bf"}, {"problem": 27, "code": "(fn [seq]\n  (if (= [] (rest seq))\n    true\n    (if (= (first seq) (last seq))\n      (recur (rest (butlast seq)))\n      false)))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 27, "code": "(fn [x] (if (= (first x)(last x) )true false))", "user": "54e19a26e4b024c67c0cf7c6"}, {"problem": 27, "code": "(fn [coll]\n  (if (= 0 (mod (count coll) 2))\n    (loop [l (- (/ (count coll) 2) 1) r (/ (count coll) 2)]\n        (if (and (>= l 0) (< r (count coll)))\n          (if (= (nth coll l) (nth coll r))\n            (recur (- l 1) (+ r 1))\n            false)\n        true))\n    (let [m (- (/ (+ 1 (count coll)) 2) 1)]\n      (loop [l (- m 1) r (+ m 1)]\n        (if (and (>= l 0) (< r (count coll)))\n          (if (= (nth coll l) (nth coll r))\n            (recur (- l 1) (+ r 1))\n            false)\n        true)))))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 27, "code": "(fn [c] (let [s (seq c)] (= (reverse s) s)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "54e336f3e4b024c67c0cf7da"}, {"problem": 27, "code": "#(if (empty? %) true\n   (if (= (first %) (last %)) (recur (butlast (rest %))) false))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 27, "code": ";#(= (vec %) (reverse (vec %)))\n#(= (seq %) (reverse %))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54e4a1dce4b024c67c0cf7e8"}, {"problem": 27, "code": "(fn pal? [xs] (cond\n  (< (count xs) 2) true\n  (not= (first xs) (last xs) ) false\n  :else (recur \n         (  (comp (partial drop 1) drop-last)  xs )             \n)))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 27, "code": "(fn [s]\n  (let [sa (seq s)]\n    (= sa (reverse sa))))", "user": "51cf815de4b0e42293a22575"}, {"problem": 27, "code": "(fn [sq] \n  ((fn [sq lo hi]\n    (if (<= hi lo) \n        true \n        (if (= (nth sq lo) (nth sq hi))\n     \t    (recur sq (+ lo 1) (- hi 1))\n            false)))\n   sq 0 (- (count sq) 1)))", "user": "54e4ef4de4b024c67c0cf7f4"}, {"problem": 27, "code": "(fn do-pal\n  [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (do-pal (take (- (count xs) 2) (vec (rest xs))))\n      false\n    )\n  )\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 27, "code": "#(= (rseq (vec %)) (vec %))", "user": "54db8d27e4b024c67c0cf765"}, {"problem": 27, "code": "#(let [coll (seq %)]\n   (= coll (reverse coll)))", "user": "54e75bf0e4b024c67c0cf813"}, {"problem": 27, "code": "(fn [x] (if (= (seq x) (reverse x))\n                                true\n                                false))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs)\n     (reverse xs)))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 27, "code": "(fn [ls]\n  (= (reduce str ls) (reduce str (reverse ls))))", "user": "54ea5e91e4b024c67c0cf840"}, {"problem": 27, "code": "(fn [param]\n  (if (sequential? param)\n    (= param (reverse param))\n    (= param (apply str (reverse param)))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 27, "code": "(fn [x] (if (string? x)\n          (= (apply str (vec (reverse x))) x)\n          (= (reverse x) x)))", "user": "54af3d22e4b09f271ff37d04"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (list? s) (= (reverse s) s)\n                (= (reverse s) (into () s))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 27, "code": "#(= (seq %) (reverse ( seq %)))", "user": "54db5d73e4b024c67c0cf763"}, {"problem": 27, "code": "(fn [x] (= (reverse (map str (seq  x))) (map str (seq x) )))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 27, "code": "(fn[x](= (take 3 x) (take 3 (reverse x))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54ecd709e4b024c67c0cf859"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 27, "code": "(fn [s0]\n  (loop [s s0 r [] cnt (/ (count s0) 2)]\n    (println s r cnt)\n    (if (<= cnt 1/2)\n      (= (if (= cnt 1/2 ) (drop-last s) s) r)\n      (recur (drop-last s) (conj r (last s)) (dec cnt)))))", "user": "54d15e4ae4b0e8a36923e5e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "54db07cfe4b024c67c0cf759"}, {"problem": 27, "code": "#(let [s (vec %)] (= s (reverse s)))", "user": "54ef424be4b024c67c0cf881"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll)  (seq coll)))", "user": "4fb0bd28e4b081705acca26b"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52c03baee4b07a9af5792347"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 27, "code": "#(= ( seq %) (reverse %))", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 27, "code": "(fn pal-check [coll]\n  (if (= coll ())\n    true\n    (and (= (first coll) (last coll))\n         (pal-check (rest (butlast coll))))))", "user": "54e4e14ce4b024c67c0cf7f1"}, {"problem": 27, "code": "(fn [vs] (= (reverse vs) (seq vs)))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54ecb962e4b024c67c0cf856"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "54f1773be4b024c67c0cf8b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54efdf03e4b024c67c0cf88c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 27, "code": "(fn [xs] (= (map identity xs) (reverse xs)))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 27, "code": "(fn [seq]\n  (every? (fn [pair]\n    (= (first pair) (second pair)))\n    (zipmap (reverse seq) seq)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 27, "code": "#(= (apply str %) (apply str(reverse %)))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "54cfb5abe4b018d918be98d3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 27, "code": "(fn [x]\n  (cond (or (empty? x) (= (count x) 1)) true\n        (= (first x) (last x)) (recur (rest (butlast x)))\n        :else false))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 27, "code": "(fn [lst]\n  (let [s (seq lst)]\n    (= s (reverse s))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 27, "code": "(fn [v] (= (seq v) (reverse v)))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse (seq x))))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 27, "code": "#(let [rev (reverse %)] (= (if (string? %) (reduce str rev) rev) %))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 27, "code": "(fn [coll]\n  (= (into [] coll) (rseq (into [] coll))))", "user": "54271c6de4b01498b1a71b20"}, {"problem": 27, "code": "(fn [n] (= (reverse (seq n)) (seq n)))", "user": "53ec14b9e4b036ad0777e500"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 27, "code": "(fn [l]\n  (if (= (vec (reverse l)) (vec l))\n    true\n    false))", "user": "54f53d3ce4b0f2f3c5226e90"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (do (if  (= (clojure.string/reverse coll) coll)\n          true\n          false))\n    (if (= (reverse coll) coll)\n      true\n      false)))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 27, "code": "(fn [coll]\n  (let [rcoll (reverse coll)]\n    (or (= rcoll coll)\n        (= (apply str rcoll) coll))))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 27, "code": "(fn [xs] \n  (= (seq xs) (reverse xs)))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 27, "code": "#(if (= (reverse %) (reverse (reverse %))) true false)", "user": "531c7bdde4b08068f379eda2"}, {"problem": 27, "code": "(fn [txt] (= (reverse txt) (seq txt)))", "user": "5371db16e4b0493c815db702"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 27, "code": "(fn [xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf]\n          (= (reverse xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf) (seq xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf))\n          )", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 27, "code": "#(let [s (into () %)] (= s (reverse s)))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 27, "code": "(fn[x] (= (reverse x) (seq x)) )", "user": "54f3e216e4b050824f58f5cc"}, {"problem": 27, "code": "(fn [x]\n         (loop [n 0]\n           (if (= \n                ; ceiling\n                (int (+ (/ (count x) 2) 0.5))\n                n)\n             true\n             (if (= (nth x n) (nth x (- (- (count x) 1) n)))\n               (do \n                 (println \"nth x n\" (nth x n))\n                 (recur (+ n 1))\n                 )\n               false\n               )\n             )))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "54f8aabfe4b01ecee9d8882b"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (clojure.string/reverse x)) (= x (reverse x))))", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "54f90537e4b01ecee9d88833"}, {"problem": 27, "code": "#(let [x (seq %)] (= (reverse x) x))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54fa1641e4b0cf870d9346fc"}, {"problem": 27, "code": "(fn pdrone? [ys] \n   (let [r (last ys)\n         [x & xs] (butlast ys)\n         ]\n    (if (nil? x)\n         true\n     (if (not= x r)\n         false\n\n         (pdrone? xs)))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 27, "code": "(fn palin\n  ([s] (palin s 0 (- (count s) 1)))\n  ([s start end] (let [stval (nth s start)\n                       enval (nth s end)]\n                   (if (and (< start end)\n                            (= stval enval))\n                     (recur s (inc start) (dec end))\n                     (= stval enval)))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 27, "code": "(fn pali [x] (if (> 2 (count x)) true (if (= (first x) (last x)) (pali (drop 1 (drop-last x))) false)))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 27, "code": "(fn [a]\n    (if (< (count a) 2)\n      true\n      (if-not (= (last a) (first a))\n        false\n        (recur (rest (drop-last a)))\n        )\n      )\n    )", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 27, "code": "(fn [s] \n  (= (seq s) (reduce conj () s)))", "user": "52946307e4b02ebb4ef7500a"}, {"problem": 27, "code": "(fn me [x]\n   (if (empty? x) true\n       (if (not= (last x) (first x))\n         false\n         (me (->> x rest reverse rest reverse))\n         )))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reduce #(cons %2 %1) [] x)))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 27, "code": "(fn [xs]\n  (= (reverse (take (quot (count xs) 2) xs))\n     (drop (/ (count xs) 2) xs)))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 27, "code": "#( = (into [] %) (reverse ( into [] %)) )", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 27, "code": "(fn [xs] (= xs (if (string? xs) (clojure.string/join (reverse xs)) (reverse xs))))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 27, "code": "(fn [subject]\n  (if (sequential? subject)\n    (= subject (reverse subject))\n    (= subject (clojure.string/join (reverse subject)))))", "user": "54fc2fbae4b07d26eda61d26"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ffbad3e4b07d26eda61d54"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 27, "code": "(fn [xs] \n  (let [len (count xs),\n      len2 (quot len 2),\n      len3 (- len len2)]\n  (= \n   (take len2 xs)\n   (take len2\n         (reverse (drop len2 xs))))))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 27, "code": "#(=  (reverse %) (seq %))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 27, "code": "(fn [coll]\n  (if (= (seq coll) (reverse (seq coll)))\n    true\n    false))", "user": "549674cde4b0b312c081ff66"}, {"problem": 27, "code": "#(-> % (reverse) (= (seq %)))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5501f45fe4b07d26eda61d7f"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "550320f8e4b086ebe8a79c68"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 27, "code": "(fn [x]\n  (= (into [] x) (reverse x)))", "user": "550111d3e4b07d26eda61d6f"}, {"problem": 27, "code": "(fn pal [x]\n  (if (empty? x)\n    true\n    (if (not= (last x) (first x))\n      false\n      (pal (butlast (rest x)))\n    )\n  )\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 27, "code": "(fn [coll]\n  (reduce (fn [a b] (and a b)) true\n    (map (fn [[a b]] (= a b))\n      (partition 2 (interleave coll (reverse coll)))\n      )\n    )\n  )", "user": "55044fb8e4b086ebe8a79c7a"}, {"problem": 27, "code": "(fn [p] (= (vec p) (reverse p)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 27, "code": "(fn [x]\n  (= x\n     (if (string? x) \n              (clojure.string/reverse x)\n              (reverse x))))", "user": "54fc75fce4b07d26eda61d2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) \n     (reverse \n      (seq coll))))", "user": "550309b9e4b086ebe8a79c65"}, {"problem": 27, "code": "(fn [list]\n    (every? #(= true %1)\n     (for [idx (range (- (/ (count list) 2) 1))]\n      (= (nth list idx) (nth list (- (- (count list) 1) idx)))\n     )\n    )\n    )", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 27, "code": "#(= (reverse %)\n    (seq %))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 27, "code": "(fn [aseq]\n  (if (string? aseq)\n    (= aseq (clojure.string/reverse aseq))\n  \t(= aseq (reverse aseq))))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53f506c1e4b0db01ade6f9c8"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s\n         p true]\n    (if (or (empty? s) (= (count s) 1))\n      p\n      (recur (rest (reverse (rest s))) (= (first s) (last s))))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 27, "code": "(fn [c] (= (reverse  c) (seq c)))", "user": "5426200ae4b01498b1a71b16"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5457e502e4b01be26fd74612"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 27, "code": "(fn [coll] (if (empty? coll) true (if (= (first coll) (last coll))\n                                     (recur (rest (butlast coll))) false)))", "user": "5500721be4b07d26eda61d5b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55096255e4b06e50f9beb116"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 27, "code": "(fn [input] (= (reverse input) (seq input)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 27, "code": "#(if (< (count %) 2)\n    true\n    (if (= (first %) (last %))\n      (recur (drop-last (rest %)))\n      false))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 27, "code": "(fn [x] (= (if(instance? String x) (clojure.string/reverse x) (reverse x)) x))", "user": "55016428e4b07d26eda61d72"}, {"problem": 27, "code": "#(if (seq? %) (= % (reverse %)) true)", "user": "550aeddae4b06e50f9beb135"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "514a762ae4b00c7db5067428"}, {"problem": 27, "code": "(fn [v]\n  (let [s (seq v)]\n    (= s (reverse s))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54f4b638e4b0f2f3c5226e88"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 27, "code": "#(if (string? %)\n    (= (apply str (reverse %)))\n    (= % (reverse %)))", "user": "550babf3e4b06e50f9beb149"}, {"problem": 27, "code": "(fn [x] (let [c (/ (count x) 2)] (= (take c x) (reverse (take-last c x)))))", "user": "5509a176e4b06e50f9beb119"}, {"problem": 27, "code": "(fn pal [x]\t\t\n\t       (if (> 1 (count x))\n\t\t true \n\t\t (and \n\t\t  (pal (rest (butlast x)))\n\t\t  (= (first x) (last x)))))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "55079757e4b021ccfedb96a9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 27, "code": "(fn [num] (= (seq num) (reverse num)))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 27, "code": "(\n  fn palindrome? [l]\n (loop\n  [x (vec l),\n   n (dec (count l))\n  ]\n  (if\n   (= (nth x n)\n    (nth x\n     (- (dec (count l)) n)\n    )\n   )\n   (if \n    (< n (/ (count l) 2))\n    true\n    (recur x (dec n))\n   )\n   false\n  )\n )\n)", "user": "54ef8d80e4b024c67c0cf887"}, {"problem": 27, "code": "(fn palindrome? [A]\n  (cond (<= (count A) 1)\n        true\n   :else\n        (and \n          (= (first A) (last A))\n          (palindrome? (subvec (vec A) 1 (- (count A) 1)))\n        )\n  )\n)", "user": "550cbb3be4b06e50f9beb155"}, {"problem": 27, "code": "(fn palin [x] (let [n (count x)] (if (< n 2) true (and (= (first x) (last x)) (palin (take (- n 2) (drop 1 x)))))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 27, "code": "(fn\n  [pal]\n  (= (seq pal) (reverse pal)))", "user": "542725fce4b01498b1a71b22"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "550da0c7e4b06e50f9beb15e"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "550f1e51e4b06e50f9beb172"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "525599bfe4b0541d1855b9e8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 27, "code": "(fn [coll] (if(or (= 1 (count coll)) (= 0 (count coll)))\ntrue\n             (if(= (nth coll 0) (nth coll (-  (count coll) 1)))\n(recur (take (- (count (drop 1 coll)) 1) (drop 1 coll)))\n               false)\n))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 27, "code": "#(loop [l (vec %)] \n   (if (< (count l) 2) true\n     (if (not= (first l) (last l)) false\n       (recur (drop 1 (drop-last l))) )))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 27, "code": "(fn [s] \n  (if (empty? s) \n    true\n    (if (= (first s) (last s))\n      (recur (reverse (rest (reverse (rest s)))))\n       false)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 27, "code": "(fn [s] (let [se (seq s)] (= (reverse se) se)))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5511dfafe4b06e50f9beb19c"}, {"problem": 27, "code": "(fn [in] (= in (if (instance? String in) (apply str (reverse in)) (reverse in))))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55092319e4b06e50f9beb113"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc %)) (range(/ (dec n) 2)))))\n  )", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 27, "code": "(fn [col]\n  (= (reduce (fn [accum elem] (cons elem accum)) () (seq col))\n     (seq col)))", "user": "5511b44be4b06e50f9beb197"}, {"problem": 27, "code": "(fn [coll]\n  (cond\n    (< (count coll) 2)\n    true\n    (not= (first coll) (last coll))\n    false\n    :else\n    (recur (take (- (count coll) 2) (rest coll)))))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 27, "code": "(fn [coll]\n  (loop [head 0\n         tail (- (count coll) 1)]\n    (if (= (nth coll head) (nth coll tail))\n      (if (<= (- tail head) 1)\n        true\n        (recur (inc head) (dec tail)))\n      false)))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "55116582e4b06e50f9beb192"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 27, "code": "(fn [coll]\n  (let [original-coll (into () coll)\n        reversed-coll (reverse (into () coll))]\n    (if (= original-coll reversed-coll)\n      true\n      false)))", "user": "54bd6cb2e4b0ed20f4ff6ede"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "550eb23ae4b06e50f9beb168"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 27, "code": "(fn palindrome? [word]  (= (reverse word) (into [] word)))", "user": "5513dec7e4b055c2f668d4cd"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/join (reverse x)))\n    (= x (reverse x))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 27, "code": "#(= (seq %1)(reverse %1))", "user": "55154abce4b055c2f668d4e0"}, {"problem": 27, "code": "(fn [col]\n  (= (reverse col) (seq col)))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 27, "code": "#(= (vec %) (-> % reverse))", "user": "55156efae4b055c2f668d4e5"}, {"problem": 27, "code": "(fn [arr] (= (reverse arr) (seq arr)))", "user": "551535cee4b055c2f668d4df"}, {"problem": 27, "code": "#(= (reverse %) (if (= java.lang.String (class %)) (seq %) %) )", "user": "532018efe4b08068f379edcd"}, {"problem": 27, "code": "(fn palin? [items]\n  (= (seq items) (reverse (seq items))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 27, "code": "(fn [c] (= (vec c) (reverse c)))", "user": "55164856e4b06a49daca83b3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5516bd41e4b06a49daca83b7"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 27, "code": "(fn [col]\n  (let [rcol (reverse (seq col))]\n    (= (seq col) rcol)))", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54dbbe4fe4b024c67c0cf772"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 27, "code": "#(= (seq %) (reverse %) )", "user": "55171140e4b06a49daca83be"}, {"problem": 27, "code": "(fn palindrome? [collection]\n  (= (seq collection)\n     (reverse collection)))", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 27, "code": "#(loop [coll %]\n(cond \n (>= 1 (count coll)) true\n (= (first coll) (last coll)) (recur (drop-last 1 (drop 1 coll)))\n :else false\n )\n)", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 27, "code": "(fn me [coll]\n  (let [len (count coll)]\n    (loop [i 0 j (- len 1)]\n      (if (>= i j)\n        true\n        (if (not= (nth coll i) (nth coll j))\n          false\n          (recur (inc i) (dec j)))))))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 27, "code": "#(loop [c %] (if (> (count c) 1) (if (not= (first c) (last c)) false (recur (reverse (rest (reverse (rest c)))))) true))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 27, "code": "(fn [coll] (let [vec-coll (vec coll) rev-vec (rseq vec-coll)] (= vec-coll rev-vec)))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (vec coll)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "50f4eee0e4b004d36493052d"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop-last (drop 1 s))))))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x)\n     (-> x (seq) (reverse))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 27, "code": "#(= % (if (string? %) \n        (apply str (reverse %))\n        (reverse %)))", "user": "551a64cde4b091ff45eda996"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "550c866ae4b06e50f9beb153"}, {"problem": 27, "code": "(fn [list]\n  (loop\n    [l list]\n    (if (or (empty? l) (= 1 (count l)))\n      true\n      (if (= (first l) (last l))\n        (recur (butlast (rest l)))\n        false)\n      )\n    )\n  )", "user": "54857657e4b0e286459a11ac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "52f49268e4b05e3f0be25f22"}, {"problem": 27, "code": "(fn [l]\n  (= l \n     (if (string? l) (apply str (reverse l)) (reverse l))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 27, "code": "(fn [seq]\n  (= seq (if (string? seq)\n           (apply str (reverse seq))\n           (reverse seq))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reduce conj '() (seq l))))", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "551b329ae4b07993ea3788cf"}, {"problem": 27, "code": "#(if (= (into [] %) (reverse %)) true false)", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 27, "code": "(fn [x]\n    (if (string? x)\n      (= (apply str (reverse x)) x)\n     (= (reverse x) x)))", "user": "551a21ece4b091ff45eda993"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 27, "code": "(fn pali [l]\n  (letfn [(remove-last [l]\n                        (if (= 1 (count l))\n                          '()\n                          (cons (first l) (remove-last (rest l)))))]\n    (if (or (= (count l) 0) (= (count l) 1))\n      true\n      (if (= (first l) (last l))\n        (pali (remove-last (rest l)))\n        false))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 27, "code": "(fn [s]\n\t(let [o (odd? (count s))]\n\t\t(loop [p s]\n\t\t\t(cond \n\t\t\t\t(and (= (count p) 1) o) true\n\t\t\t\t(and (empty? p) (not o)) true\n\t\t\t\t(= (first p) (last p)) (recur (butlast(rest p)))\n\t\t\t\t:else false))))", "user": "551cade8e4b07993ea3788e2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 27, "code": "#(reduce (fn [a b] (and a b)) (map = % (reverse %)))", "user": "551c66dae4b07993ea3788de"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4e443201535dc968683fc4a7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5516d26de4b06a49daca83b9"}, {"problem": 27, "code": "(fn [s] \n  (loop [n 0] \n    (if-not (< n (- (count s) 1)) true\n      (if-not (= (nth s n) (nth s (- (count s) n 1))) false \n                 (recur (+ n 1)) ) ) ) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 27, "code": "(fn aa [x] (if ( > 2 (count x)) true ( and (= (first x) (last x)) (aa (rest (drop-last x))))))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55206cf3e4b08d5046aa8a62"}, {"problem": 27, "code": "#(= (-> % (reverse) (reverse)) (reverse %))", "user": "551c594de4b07993ea3788dc"}, {"problem": 27, "code": "(fn palindrome [s] (= (seq s) (reverse s)))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 27, "code": "#(= (apply list %) (apply list (reverse %)))", "user": "55129632e4b06e50f9beb1aa"}, {"problem": 27, "code": "(fn [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (rest (butlast x)))\n    )\n  )\n)", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 27, "code": "(fn [v] (\n  (fn [v c]\n   (if (> c (/ (count v) 2))\n     true\n     (if (not (= (nth v c) (nth (reverse v) c)))\n       false\n       (recur v (inc c))\n     )\n   )\n   ) v 0)\n)", "user": "55188c5de4b06a49daca83cc"}, {"problem": 27, "code": "#(let [l (int (/ (count %) 2))] (= (take l %) (take l (reverse %))))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 27, "code": "(fn [x] (= ((comp reverse seq) x) (seq x)))", "user": "551b87dfe4b07993ea3788d2"}, {"problem": 27, "code": "(fn [lst] (= (seq lst) (seq (reverse lst))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse (seq lst))))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 27, "code": "(letfn [(palindrome [xs ys]\n                    (cond\n                     (empty? xs) true\n         \t\t\t (= (first xs) (first ys)) (palindrome (rest xs) (rest ys))\n         \t\t\t :else false))]\n  (fn [xs]\n    (palindrome (seq xs) (reverse xs))))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 27, "code": "(fn [coll]\n  (let [n (quot (count coll) 2)]\n    (= (reverse (drop n coll))\n       (take (if (odd? (count coll)) (inc n) n) coll))))", "user": "552356fae4b0882d96d091af"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/join (reverse %)) (reverse %)))", "user": "5521c33ce4b0882d96d0919a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55229495e4b0882d96d091a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 27, "code": "(fn [array]\n  (let [reverseArray (reverse array), n (count array)]\n    (every? identity (map #(= (nth array %), (nth reverseArray %)) (range 0 (/ n 2))))\n    )\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55129c5ce4b06e50f9beb1b5"}, {"problem": 27, "code": "(fn palindrome? [s] (if (> (count s) 1) (and (= (first s) (last s) ) (palindrome?(drop-last (drop 1 s)))  ) true))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55253217e4b0882d96d091ce"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 27, "code": "#(= (reverse (into () %)) (into () %))", "user": "551bd6e1e4b07993ea3788d6"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5523f23ce4b0882d96d091b3"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "552621d0e4b0ffed3738f914"}, {"problem": 27, "code": "(fn [s] (= (reverse (seq s)) (seq s)))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55252392e4b0882d96d091cc"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55245232e4b0882d96d091c0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55244318e4b0882d96d091be"}, {"problem": 27, "code": "(fn [s]\n  (let [forward (map identity s)\n        backward (map identity (reverse s))]\n    (= forward backward)))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 27, "code": "(fn f [l]\n                   (cond\n                     (empty? l) true\n                     (not (next l)) true\n                     :else (let [head (first l)\n                                 tail (last l)\n                                 middle (rest (butlast l))]\n                             (if (= head tail)\n                               (f middle)\n                               false))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 27, "code": "(fn palindrome [obj]\n  (= (apply str obj) (apply str (reverse obj))))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55268e8de4b0ffed3738f91f"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 27, "code": "#(= (-> % seq reverse)(seq %))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 27, "code": "(fn pal [x] (if (< (count x) 2) true (and (= (first x) (last x)) (pal (rest (butlast x))))))", "user": "5528a8cae4b0ffed3738f940"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5529662ce4b0ffed3738f94a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5517331ae4b06a49daca83c0"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 27, "code": "(fn [coll] (loop [c coll p true]\n             (if (< (count c) 1) p\n               (recur (butlast (rest c)) (if (and (= (last c) (first c)) p) true false)))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55253799e4b0882d96d091cf"}, {"problem": 27, "code": "(fn palin [x] (if (> (count x) 1) (if (= (first x) (last x)) (palin (rest (reverse (rest x)))) false) true) )", "user": "552949e5e4b0ffed3738f948"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "552a672de4b0ffed3738f954"}, {"problem": 27, "code": "(fn pal? [s] (if (= (rest s) ()) true (and (= (first s) (last s)) (pal? (rest (reverse (rest s)))))))", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "55231800e4b0882d96d091ad"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 27, "code": ";(fn [collection] (= (vec collection) (reverse collection)))\n\n#(= (vec %) (reverse %))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "552c1a0fe4b076ab5578f7d7"}, {"problem": 27, "code": "(fn [elem]\n  (if (= java.lang.String (class elem))\n    (= elem (clojure.string/reverse elem))\n    (= elem (reverse elem))))", "user": "55265376e4b0ffed3738f91b"}, {"problem": 27, "code": "(fn [string] (= (seq string) (reverse string)))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 27, "code": "#(= (into () %) (seq %))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 27, "code": "(fn [s]\n  (let [n (count s)]\n    (or (<= n 1)\n        (and (= (first s) (last s))\n             (recur (take (- n 2) (rest s)))))))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 27, "code": "#(let [r (reverse %)] (= % (if (string? %) (apply str r) r)))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x)))\n  )", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53623eaee4b0243289761e4f"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "52cda397e4b07d0d72b2737a"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n\t(= x (reverse x))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 27, "code": "(fn [listy] (= (reverse listy) (seq listy)))", "user": "5380a27ae4b06839e8705ec4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "541e6d40e4b01498b1a71a8c"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse (seq %))) (reverse %)))", "user": "550340d9e4b086ebe8a79c6b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54de7108e4b024c67c0cf7a2"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 27, "code": "(fn pal\n  [xs]\n  (if (seq xs)\n    (if (= (first xs) (last xs))\n      (pal (butlast (rest xs))) ;; recur with sequence exlcluding first and last els (already checked)\n      false) ;; return false if elements don't match\n   true)) ;; all iters have passed", "user": "535d8d8fe4b04ce2eb3ed2c4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 27, "code": "(fn b [x] \n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n           (b (drop-last (rest x)))\n           false\n    )            \n  )\n)", "user": "55327ad3e4b09218d5f44f7f"}, {"problem": 27, "code": "(fn [n] (loop [l n]\n          (if (<= (count l) 1)\n            true\n            (if (= (last l) (first l))\n              (recur (drop 1 (reverse (drop 1 (reverse l)))))\n              false))))", "user": "550bac80e4b06e50f9beb14a"}, {"problem": 27, "code": "#(= (into()(into() %1))(into() %1))", "user": "553093bee4b076ab5578f817"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 27, "code": "#(= (seq %) (reduce conj '() %))", "user": "5533da20e4b09218d5f44f92"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "551f1781e4b08d5046aa8a52"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "546cef70e4b00cfc9eacc188"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "54c46381e4b045293a27f61a"}, {"problem": 27, "code": "(fn [lst] (let [nlst (into '() lst)] (=  nlst (reverse nlst))))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 27, "code": "(fn polynd? [s]\n  (if (empty? s)\n    true\n  \t(if (= (first s) (last s))\n      (polynd? (rest (reverse (rest s))))\n      false)))", "user": "5526d0a9e4b0ffed3738f927"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "55022275e4b07d26eda61d81"}, {"problem": 27, "code": "(fn [xs]\n  (let [seq-xs (seq xs)]\n    (= seq-xs (reverse seq-xs))))", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 27, "code": "(comp (partial reduce =) (partial drop 1) (partial take 3) (partial iterate reverse))", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 27, "code": "(fn [s]\n  (if (<= (count s) 2)\n     true\n     (and (= (first s) (last s)) (recur (rest (drop-last s))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 27, "code": "(fn isPal\n  [s]\n  (if (string? s)\n  \t(= (apply str (reverse s)) s)\n    (= (reverse s) s)))", "user": "55355397e4b09218d5f44fae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 27, "code": "(fn pal [xs]\n  (if (or (nil? xs) (= (count xs) 1)) true\n    (if (= (first xs) (last xs)) (pal (butlast (rest xs))) false)))", "user": "5536cbefe4b09218d5f44fc2"}, {"problem": 27, "code": "(fn [c]\n  (let [len (count c)]\n    (if (< len 2)\n      true\n      (and (= (first c) (last c)) (recur (rest (butlast c)))))\n  ))", "user": "5537c1c4e4b09218d5f44fd0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 27, "code": "(fn\n  [input]\n  (if (= (type input) (type \"\"))\n    (= (apply str (reverse input)) input)\n    (= (reverse input) input)))", "user": "54add0a3e4b09f271ff37ce7"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "54980edae4b0b312c081ff79"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55395241e4b09218d5f44fe8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 27, "code": "(fn [s]\n  (=\n   (seq s)\n   (reverse s)))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 27, "code": "(fn [coll]\n  (reduce #(and %1 %2) true (map = coll (reverse coll))))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 27, "code": "(fn [col]\n  (if (< (count col) 2)\n    true\n    (let [s (seq col)]\n       (if (= (first s) (last s))\n         (recur (drop-last (rest s)))\n         false))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 27, "code": "(fn f[s] (= (seq s) (reverse s) ))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55381162e4b09218d5f44fda"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 27, "code": "(fn pal [coll]\n  (if (or (= 1 (count coll)) (empty? coll))\n    true\n  (if (= (first coll) (last coll))\n    (recur (drop-last (drop 1 coll)))\n    false)))", "user": "552e92d3e4b076ab5578f7f2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54c779bee4b045293a27f63b"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "553d86cfe4b0a04f792994e2"}, {"problem": 27, "code": "(fn [initial] (= (seq initial) (seq (reverse initial))))", "user": "553c4614e4b09218d5f45014"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54c944b1e4b045293a27f666"}, {"problem": 27, "code": "#(cond \n  (coll? %) (= (reverse %) %)\n  (string? %) (= (clojure.string/reverse %) %))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 27, "code": "(fn [s]\n  \t(if (string? s)\n      (= s (apply str (reverse s)))\n      (= s (reverse s))))", "user": "5542011fe4b0a04f79299516"}, {"problem": 27, "code": "(fn [col]\n\t  (let [rreverse #(let [x (reverse %)]\n\t\t\t\t\t    (if (string? %) (clojure.string/join x) x))]\n\t    (= col (rreverse col))))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 27, "code": ";(fn pc [arr]\n;  (if (= (first arr) (last arr))\n;    (if (< (count arr) 4)\n;      true\n;      (pc (butlast (rest arr))))\n;    false))\n\n;why didn't I just do this the first time?\n#(= (seq %) (reverse %))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5543553fe4b0a04f79299523"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 27, "code": ";learned from adereth that reverse sequentizes the arg, so 'seq' not needed.\n\n#(= (seq %) (reverse %))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 27, "code": "#(every? identity (map = % (reverse %)))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (palindrome? (take (- (count xs) 2) (rest xs))))))", "user": "55453f8ee4b0a04f79299530"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 27, "code": "(fn [s]\n  (let [half (quot (count s) 2)\n        left (take half s)\n        right (reverse (take-last half s))]\n    (= left right)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5545eebee4b0a04f79299539"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse (vec %))))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x) ) ) )", "user": "52da7ae5e4b09f7907dd13b8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 27, "code": "(fn [coll]\n  (let [c (vec coll)]\n    (= c (reverse c))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 27, "code": "(fn pal\n\t[x]\n\t(if (string? x)\n\t(= x (clojure.string/reverse x))\n\t(= x (reverse x))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554707bae4b0a04f79299544"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 27, "code": "(fn [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (recur (rest (drop-last s))))))", "user": "55495318e4b0a04f79299566"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 27, "code": "#(if (string? %) (=  (list %) (reverse (list %)))\n   (= % (reverse %)))", "user": "554a270fe4b0a04f79299570"}, {"problem": 27, "code": "#(let [l (/ (count %) 2)\n       s (take l %)\n       r (take l (reverse %))]\n   (= s r))", "user": "4ee7c6dd535d93acb0a6686c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554a5ac2e4b0a04f79299574"}, {"problem": 27, "code": "(fn [seq]\n  (if (string? seq) \n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))", "user": "5549394fe4b0a04f79299565"}, {"problem": 27, "code": "#(not (= (sort (vec (set %))) (sort (vec %))))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554884d4e4b0a04f7929955c"}, {"problem": 27, "code": "(fn [x]\n  (= x\n     (if\n       (= (type x) java.lang.String)\n       (reduce str (reverse x))\n       (reverse x)\n     )\n   )\n)", "user": "554b425ce4b0a04f79299581"}, {"problem": 27, "code": "(fn [n]\n  (let [se (seq n)]\n    (= se (reverse se))))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 27, "code": "(fn f [a] (cond (empty? a) true\n                (empty? (rest a)) true\n                :else \n                (and (= (first a) (last a))\n                     (f (rest (reverse (rest a) ))))))", "user": "554c0adde4b0a04f7929959e"}, {"problem": 27, "code": "(fn [s]\n   (or (empty? s)\n      (and (= (first s)\n              (last s))\n           (recur (rest (butlast s))))))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse %))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 27, "code": ";#(= (seq %)\n;  (into '() %) )\n\n\n#(= (seq %)\n  (reverse %) )", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse n)))", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 27, "code": "(fn palindrome? [ls]\n   (let [ls-half (Math/ceil (/ (count ls) 2))]\n     (if (=\n          (nthrest ls ls-half)\n          (nthrest (reverse ls) ls-half))\n       true\n       false)))", "user": "554bc026e4b0a04f79299597"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "554b8572e4b0a04f79299589"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "554bced1e4b0a04f79299599"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 27, "code": "#(every? (fn [x] x) (map = % (reverse %)))", "user": "554b7056e4b0a04f79299583"}, {"problem": 27, "code": "(fn [seq]\n  (cond (empty? seq) true\n        (= (first seq) (last seq))\n        \t(recur (rest (butlast seq)))\n        :else false))", "user": "554dff83e4b00713264bd98d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (seq (reverse x))))", "user": "554b2151e4b0a04f79299580"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 27, "code": ";;(fn [xs] (= (seq xs) (reverse xs)))\n\n;; loop recur version\n(fn [xs] \n  (let [\n    size (count xs) \n    lim (quot size 2)]\n  (loop [i 0] \n    (if (> i lim)\n      true\n      (if (= (nth xs i) (nth xs (- size (inc i))))\n        (recur (inc i))\n        false)\n    ))))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "5547793be4b0a04f7929954c"}, {"problem": 27, "code": "(fn [col] (= (reverse col) (seq col)))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "554d48d3e4b00713264bd988"}, {"problem": 27, "code": "(fn [s] (let [rev (reverse s)] (if (string? s) (= (apply str rev) s) (= rev s))))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "554edb85e4b00713264bd99a"}, {"problem": 27, "code": "(fn [x]\n  (let [seqx (seq x)]\n    (println \"Test:\" seqx \" count:\" (count seqx))\n    (if (<= (count seqx) 1) true\n      (if (false? (= (first seqx) (last seqx))) false\n        (recur (drop-last (rest seqx)))))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 27, "code": "#(not-any? (partial = false) (map = % (reverse %)))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll)\n     (reverse (reverse coll))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 27, "code": "(fn [a-seq]\n  (= (seq a-seq) (reverse a-seq)))", "user": "5550c6e0e4b00713264bd9af"}, {"problem": 27, "code": "(fn [seq]\n  (if (= (first seq) (last seq))\n    (let [rest-seq (butlast (rest seq))]\n      (if (empty? rest-seq)\n        true\n        (recur rest-seq)))\n    false))", "user": "53b0765ae4b047364c044484"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse x)))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5550eda2e4b00713264bd9b4"}, {"problem": 27, "code": "(fn [p]\n  (if (string? p)\n    (= p (clojure.string/reverse p))\n    (= p (reverse p))))", "user": "508fda91e4b0ea685a20f76f"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "552d6868e4b076ab5578f7e8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse x)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 27, "code": "#(loop [l %] (if (<= (count l) 1) true (if (= (first l) (last l)) (recur (-> l rest drop-last)) false)))", "user": "5550dec6e4b00713264bd9b2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5531f8e7e4b09218d5f44f79"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "555176e5e4b0deb715856deb"}, {"problem": 27, "code": "#(= % ((if (string? %) clojure.string/reverse\n                       reverse) %))", "user": "553638bae4b09218d5f44fba"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5552b617e4b0deb715856df8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 27, "code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 27, "code": "#(let [orig %\n       rev (reverse %)]\n   (if (string? %)\n     (= orig (reduce str rev))\n     (= orig (concat rev))))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 27, "code": "#(= (into '() (reverse %)) (into '() %))", "user": "52da4532e4b09f7907dd13b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55556737e4b0deb715856e15"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 27, "code": "(fn [st] (= (seq st) (reverse st)))", "user": "5555432ee4b0deb715856e13"}, {"problem": 27, "code": "(fn palindrome?[x] \n  (if (empty? x) \n    true \n    (if (not= (first x) (last x))\n      false\n      (palindrome? (rest (butlast x))))))", "user": "55429859e4b0a04f7929951f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "555521a5e4b0deb715856e12"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "555287a4e4b0deb715856df5"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 27, "code": "#(loop [rem %1]\n   (cond\n    (empty? rem) true\n    (not= (first rem) (last rem)) false\n    :else (recur (drop-last (rest rem)))))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "527282f5e4b03e8d9a4a743a"}, {"problem": 27, "code": "(fn palindrome? [sequ]\n  (= (seq sequ) (reverse sequ)))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 27, "code": "(fn [s] (= (flatten (partition-by identity s)) (reverse s)))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "55484800e4b0a04f79299558"}, {"problem": 27, "code": "(fn [col] (let [asList (into () col)\n                              reverted (reverse asList)]\n                          (= asList reverted)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 27, "code": "#(= %\n    (if (= (type %) java.lang.String)\n      (apply str (reverse %))\n    (reverse %)))", "user": "555867cae4b0deb715856e2a"}, {"problem": 27, "code": "(fn [vs]\n  (let [n (quot (count vs) 2)\n        front-half (take n vs)\n        back-half (->> vs reverse (take n))]\n    (= front-half back-half)))\n\n#_(fn [vs]\n  (let [vs (seq vs)]\n    (= vs (reverse vs))))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 27, "code": "(fn pol [sq] (if (< (count sq) 2)true \n               (and (= (first sq) (last sq) ) (pol (rest (drop-last sq))))))", "user": "55599ae4e4b0deb715856e3a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "555ac933e4b0deb715856e49"}, {"problem": 27, "code": "(fn [coll] (every? #(= (nth coll %) (nth (reverse coll) %)) (range (/ (count coll) 2))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "555add85e4b0deb715856e4a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550b4ea2e4b06e50f9beb13e"}, {"problem": 27, "code": "(fn [x] (= (first x) (last x)))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 27, "code": "(fn [s]\r\n  (= (seq s) (reverse s)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5551bddae4b0deb715856def"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "54ad5ceee4b09f271ff37ce1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "555c6344e4b0b056612e224c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "550eca99e4b06e50f9beb16b"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (reverse coll) (seq coll)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "555f6224e4b0a2eb076a39c5"}, {"problem": 27, "code": "(fn\n  [arr]\n  (if (empty? arr)\n    true\n    (and\n     (= (first arr) (last arr))\n     (recur\n      (rest (drop-last arr))\n     ) \n    )\n  )\n)", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 27, "code": "(fn [input] (letfn \n\t[(palindrome? [l] (cond\n\t\t(empty? l) true\n\t\t(= (count l) 1) true\n\t\t:else (and (= (first l) (last l)) (palindrome? (rest (butlast l))))))]\n\t(palindrome? input)))", "user": "555f728de4b0a2eb076a39c8"}, {"problem": 27, "code": "(fn [seq]\n  (let [len (count seq), n (quot (count seq) 2)]\n    (loop [i 0]\n       (cond \n         (not= (nth seq i) (nth seq (- len (inc i)))) false\n         (= i n) true\n         :else (recur (inc i))))))", "user": "555c78abe4b0b056612e224f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "547f49fae4b0c51c1f4d731b"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "51846567e4b02826a645f399"}, {"problem": 27, "code": "(fn [s]\n  (= (into [] s) (reverse s)))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (seq s) (reverse s)))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5560f39ce4b0c656e3ff17c2"}, {"problem": 27, "code": "(fn [p]\n  (if (string? p)\n    (let [c ((comp seq char-array) p)]\n      (= c (reverse c)))\n    (= p (reverse p))))", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 27, "code": "#(= (reverse %) (flatten (partition 1 %)))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reduce conj () s)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 27, "code": "(fn [x] (= (seq x)(reverse x)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "54534c83e4b0e397800069cd"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (= (seq x) (reverse x)))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51aaa5d7e4b04e3dc0c27b2b"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "555fe8dae4b0c656e3ff17bd"}, {"problem": 27, "code": "(fn pal \n  ([l] \n     (pal l '()))\n  ([l acc]\n     (println \"l \" l \" acc \" acc)\n     (if (= (count acc) (count l)) \n         (= l acc) \n         (if (= (count acc) (- (count l) 1)) \n           (= (rest l) acc) \n           (pal (rest l) (conj acc (first l))))\n     )))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 27, "code": "#(let [r1 (reverse %)]\n   (= (reverse r1) r1))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 27, "code": "(fn [in]\n  (let [s (seq in)]\n    (= (reverse s) s)))", "user": "556323b5e4b0c656e3ff17e5"}, {"problem": 27, "code": "(fn [w]\n  (if (= (seq w) (reverse (seq w)))\n  true\n  false\n  )\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 27, "code": "#(= (reverse %1) (vec %1))", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 27, "code": "#(every? identity (map = % (reverse %)))", "user": "5563ff8ae4b0c656e3ff17fa"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 27, "code": "(fn pal? [xs]\n      (if (< (count xs) 2)\n        true\n        (if ((fn [ys] (= (first ys) (last ys))) xs)\n          (pal? (butlast (rest xs)))\n          false \n          )))", "user": "5562bd71e4b0c656e3ff17dc"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 27, "code": "(fn\n  [c]\n    (let [sc (seq c)]\n      (= sc (reverse sc))\n    )\n  )", "user": "52846deee4b0239c8a67adcf"}, {"problem": 27, "code": "#(nil? (some (partial = false) (map = % (reverse %))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 27, "code": "#(if (instance? String %)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 27, "code": "(fn [s]\n  (loop [i 0\n         i- (- (count s) 1)]\n    (cond \n      (< i- 0) true\n      (not= (nth s i) (nth s i-)) false\n      :else (recur (+ i 1) (- i- 1)))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 27, "code": "(fn [coll] (let [reversed (if (string? coll) (clojure.string/reverse coll) (reverse coll))]\n  (= coll reversed)))", "user": "53e6120de4b036ad0777e46c"}, {"problem": 27, "code": "#(loop [a %,s 0,e (dec (count %))]\n   (if (>= s e) \n     true\n     (if (= (nth a s) (nth a e))\n       (recur a (inc s) (dec e))\n       false)))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (or (= (count x) 0) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (palindrome (rest (butlast x)))\n      false)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 27, "code": "( fn palindrome\n  [x]\n  (if (> (count x) 2)\n    \n    (if (= (first x) (last x))\n      (palindrome (drop-last (rest x)))\n      false\n    )    \n\n    true\n  )\n)", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 27, "code": ";;#(let [half (int (/ (count %) 2))] (= (take half %) (take half (reverse %))) )\n#(= (seq %) (reverse %))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5565f616e4b0c656e3ff1823"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55619a2be4b0c656e3ff17ca"}, {"problem": 27, "code": ";#(reduce (fn [n s] (let [[a, b] s] (and n (= a b)) )) true (map vector % (reverse %)))\n#(= (seq %) (reverse %))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 27, "code": "#(let [this-count (count %) limit (/ this-count 2)] \n   (loop [index 0] \n     (if (< index limit)\n     \t(if (=(nth % index)(nth % (- this-count index 1))) (recur (inc index)) false)\n         true)))", "user": "54cad1c2e4b057c6fda3a26b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 27, "code": "#(every? (fn [[a b]] (= a b)) \n         (map vector % (reverse %)))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "5563a94be4b0c656e3ff17f2"}, {"problem": 27, "code": "(fn isPalindrome \n  [string]\n  (if (and (= (first string) (last string)))\n    (if (<= (count string) 1)\n      true\n      (isPalindrome (rest (drop-last string))))\n    false))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 27, "code": "(fn abc [x] (if (string? x) (if (= (clojure.string/reverse x) x) true false) (if(= (reverse x) x) true false)))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "555d3f58e4b0a2eb076a39a7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 27, "code": "#(loop [xs (seq %1)]\n    (if (empty? (rest xs))\n      true\n      (if (= (first xs) (last xs))\n        (recur ((comp rest reverse rest) xs))\n        false\n        )\n        )\n )", "user": "55664334e4b0c656e3ff182e"}, {"problem": 27, "code": "(fn palindrome [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (last s))\n      false\n      (palindrome (rest (drop-last s))))))", "user": "556873cee4b0c656e3ff1853"}, {"problem": 27, "code": "(fn palindrome [s] (if (empty? s)\n                        true\n                        (if ( = (first s) (last s))\n                          (palindrome (rest (butlast s)))\n                          false\n                          )\n                        ))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5566434ee4b0c656e3ff182f"}, {"problem": 27, "code": "#( = (reverse %) (seq %) )", "user": "556880dae4b0c656e3ff1856"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55635886e4b0c656e3ff17e9"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "556523fce4b0c656e3ff1815"}, {"problem": 27, "code": "#(cond\n  (string? %) (= % (clojure.string/reverse %))\n  (list? %)   (= % (reverse %))\n  (vector? %) (= % (into [] (reverse %))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 27, "code": "(fn [x] (cond\n          (= (count x) 0) true\n          (= (first x) (first (reverse x))) (recur (rest (reverse (rest x)))) \n          :else false))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 27, "code": "(fn [col]\n    (loop [icol col]     \n      (let [f (first icol)\n            l (last icol)\n            mid (rest (butlast icol))]\n        (if (not= f l)\n          false\n          (if (empty? mid)\n            true\n            (recur mid))))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 27, "code": "(fn \n  [x] \n  (= (seq x) (reverse x)))\n\n; My original solution did (reverse (seq x)) - but the \"seq\" here is unnecessary, as reverse returns a sequence...", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "556c70b6e4b09a3098a524fc"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 27, "code": "#(= (reduce conj () %) (seq %))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "556be3dce4b09a3098a524f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "556c94afe4b09a3098a524fe"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55673be4e4b0c656e3ff183c"}, {"problem": 27, "code": "(fn [x]\n  (if (= (reverse (vec x)) (vec x) )\n    true\n    false    \n    )  \n  )", "user": "556cd549e4b09a3098a52503"}, {"problem": 27, "code": "(fn pali [x]\n  (if (or  (= (count x) 1) (= (count x) 0))\n    true\n    (if (= (first x) (first (reverse x)))\n      (pali (reverse (rest (reverse (rest x)))))\n      false\n      ))\n)", "user": "556ddbeae4b09a3098a5250a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse(seq x))))", "user": "556dd141e4b09a3098a52509"}, {"problem": 27, "code": "(fn[x] (if (string? x) \n          (= (apply str (reverse x)) x)\n          (= (reverse x) x)))", "user": "556bbaaee4b09a3098a524f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 27, "code": "#(every? identity (map = % (reverse %)))", "user": "556fe0fee4b09a3098a52525"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (map identity s)))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse (vec x)))\n         )", "user": "556f443be4b09a3098a5251e"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join (reverse x)) (clojure.string/join x)))", "user": "55702247e4b09a3098a5252a"}, {"problem": 27, "code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "user": "556f3b1ce4b09a3098a5251c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55702081e4b09a3098a52529"}, {"problem": 27, "code": "(fn[x](= (reduce str (reverse x)) (reduce str x)))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e8385d8535db62dc21a62db"}, {"problem": 27, "code": "(fn\n  [xs]\n  (= xs (if (string? xs)\n    (clojure.string/reverse xs)\n    (reverse xs))))", "user": "548749cee4b0e286459a11c4"}, {"problem": 27, "code": "(fn [[x & rst]] (let [n (count (filter #(= x %) rst))] (if (> n 0) true false)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "504f204ce4b0e7ad84dbc4bd"}, {"problem": 27, "code": "#(let [rv1 (reverse %) rv2 (reverse rv1)] (= rv1 rv2))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55705dd0e4b09a3098a5252c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 27, "code": "(fn [s] (let [fwd (seq s) bkwd (reverse s)] (= fwd bkwd)))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 27, "code": "(fn [palilist]\n  (loop [palilist palilist]\n        (if (or (= palilist '() ) (= (rest palilist) '() ))\n        true\n        (if (= (first palilist) (last palilist))\n              (recur (rest (drop-last palilist)))\n               false))))", "user": "556e1712e4b09a3098a52511"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 27, "code": "#(=  (into () %) (seq %))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 27, "code": "(fn [x]\n(= (seq x) (reverse x)))", "user": "53065acbe4b02e8216869792"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse(seq x)) ))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 27, "code": "(fn [x]\r\n  (if (seq? x)\r\n    (= x (reverse x))\r\n    true))", "user": "55244734e4b0882d96d091bf"}, {"problem": 27, "code": "#(let [k (seq %)] (= k (reverse k)))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 27, "code": "(fn sm-pali [x]\n      (= (seq x) (reverse (seq x)))\n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "5572f74fe4b0aa18f790f3ef"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 27, "code": "(fn [x]\n  (loop [y x ] (if (= '() y) true (let [f (first y) l (last y)] (if (= f l) (recur (rest (reverse (rest y))) ) false))))\n  )", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 27, "code": "(fn [x]\n  (if (= \n       (if (string? x)\n        (clojure.string/join (reverse x))\n        (reverse x)) x)\n    true\n    false))", "user": "55756d34e4b05c286339e062"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5576fee3e4b05c286339e078"}, {"problem": 27, "code": "#(= (into [] %) (rseq (into [] %)))", "user": "55750e49e4b05c286339e05c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "556a7b14e4b09a3098a524e4"}, {"problem": 27, "code": "#(loop [s %\n       res true]\n  (if (<= (count s) 1)\n    res\n    (recur (rest (drop-last s)) (= (first s) (last s)))))", "user": "5253de67e4b0541d1855b939"}, {"problem": 27, "code": "(fn palindrome [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (palindrome (rest (butlast s)))\n      false)))", "user": "557734d3e4b05c286339e07d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 27, "code": "(fn bizarro-world-machine\n    ([thingy] (bizarro-world-machine thingy thingy '() ))\n    ([thingy orig-thingy reversed-thingy] \n      (if (empty? thingy)\n        (= (apply str reversed-thingy) (apply str orig-thingy))\n        (bizarro-world-machine (rest thingy) orig-thingy (conj reversed-thingy (first thingy)))\n        )\n      )\n    )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "556f48b9e4b09a3098a5251f"}, {"problem": 27, "code": "(fn Palindrom [A] (if (= (seq A) (reverse A)) true false))", "user": "55769940e4b05c286339e070"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "4f74fed2e4b0fbe0118ec553"}, {"problem": 27, "code": "#(not (= false ((set (map = % (into '() %))) false)))", "user": "54570dfae4b080a794c2c889"}, {"problem": 27, "code": "(fn z [l]\n  (if (= (last l) (first l))\n    (if (empty? l) \n      true\n      (z (drop-last (drop 1 l))))\n    false))", "user": "5576006ae4b05c286339e068"}, {"problem": 27, "code": "(fn [li]\n  (let [v (vec li)]\n    (case (count v)\n      0 true\n      1 true\n      (and (= (first v) (last v))\n           (recur (-> v (pop) (rest)))))))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 27, "code": "(fn [liste] (= (seq liste) (reverse liste)))", "user": "556f2009e4b09a3098a52519"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (= (vec l) (reverse l)))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 27, "code": "(fn[x](=(concat x) (reverse x)))", "user": "55757e81e4b05c286339e063"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x)\n     (reverse x)))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 27, "code": "(fn [a] (let [s (seq a)] (= s (reverse s))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 27, "code": "(fn f [p] (if (< (count p) 2) true (and (f (rest (reverse (rest p)))) (= (first p) (last p)))))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 27, "code": "#(if (string? %) (= (seq %) (reverse (seq %))) (= % (reverse  %)))", "user": "5576e78de4b05c286339e075"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse (vec x))))", "user": "557cf48be4b05c286339e0ca"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5576961be4b05c286339e06f"}, {"problem": 27, "code": "#(if (= (class %) java.lang.String)\n   (= % (clojure.string/reverse %))\n   (= (reverse %) %))", "user": "5576f299e4b05c286339e077"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "557954aae4b05c286339e092"}, {"problem": 27, "code": "(fn [lstr] (= (apply str lstr) (apply str (reverse lstr))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 27, "code": "(fn [a] (= (seq a) ( reverse (seq a))))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 27, "code": "(fn [s] (if (instance? String s)\n            (= s (clojure.string/reverse s))\n            (= s (reverse s))))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 27, "code": "(fn [ys] (= ys ((fn [xs] (if (string? xs) (apply str (reverse xs)) (reverse xs))) ys)))", "user": "557ed664e4b05c286339e0d9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "554c5affe4b0a04f792995a3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "524cb5dee4b0752c4cb68cc7"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5580da74e4b05c286339e0f1"}, {"problem": 27, "code": "(fn [v] do (prn (vec v))(= (reverse (vec v)) (vec v) ))", "user": "5577318ce4b05c286339e07c"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 27, "code": "(fn [x] (=(seq x)(reverse (seq x))))", "user": "54e604a1e4b024c67c0cf801"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 27, "code": ";; extra-task:: ignoring upper/lower-case & whitespaces\n(fn palindrome? [subject]\n  (let [post-subj (-> subject\n                      ((partial apply str))\n                      (clojure.string/replace #\"\\s+\" \"\")\n                      (clojure.string/lower-case))\n        processed (->> subject\n                       clojure.core/reverse\n                       (map str)\n                       (remove #(re-seq #\"\\s\" %))\n                       (map clojure.string/lower-case)\n                       ((partial apply str)))]\n    \n    (= post-subj processed)))", "user": "5553b729e4b0deb715856e05"}, {"problem": 27, "code": "(fn [ls]\n  (= (into [] ls) (rseq (into []  ls)))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 27, "code": "(fn palindrome?\n  [sequence]\n  (= (apply str sequence) (apply str (reverse sequence))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5037534de4b0af0658af77aa"}, {"problem": 27, "code": "(fn palindrom?\n  [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "55816a70e4b05c286339e0f8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558306dfe4b05c286339e110"}, {"problem": 27, "code": "#(loop [v %]\n   (if (> (count v) 1)\n   (if (= (first v) (last v))\n     (recur (-> v rest butlast))\n     false)\n     true))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 27, "code": "(fn [coll] \n  (let [coll (seq coll)] \n    (= coll (reverse coll))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558378dce4b05c286339e115"}, {"problem": 27, "code": "#(if(<= (count %) 1) true (if (not= (first %) (last %)) false (recur (rest (butlast %)))))", "user": "556cb481e4b09a3098a52501"}, {"problem": 27, "code": "(fn [xs]\n  (if (contains? [0 1] (count xs))\n    true\n    (let [f (first xs)\n        l (last xs)\n        rs (-> xs rest butlast)]\n      (if (= f l)\n        (recur rs)\n        false))))", "user": "54bf99c8e4b0ed20f4ff6f05"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (loop [c 0]\n    (if (< c (/ (count l) 2))\n      (if-not (= (nth l c) (nth l (- (dec (count l)) c)))\n        false\n        (recur (inc c)))\n      true)))", "user": "55845fb6e4b04192f3441eed"}, {"problem": 27, "code": "#(let [sq (seq %)] (= sq (reverse sq)))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "55807091e4b05c286339e0eb"}, {"problem": 27, "code": "#(= (if (string? %)\n      (apply str (reverse %))\n      (reverse %))\n      %)", "user": "5585aa48e4b001b0851d7510"}, {"problem": 27, "code": "#(or (= (reverse %) %) (string? %))", "user": "50ec409ce4b04edc33777045"}, {"problem": 27, "code": "(fn [arg1]\n\t(= (reverse arg1) (seq arg1)))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 27, "code": "(fn [coll] \n    (= (seq coll) (reverse coll)))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n    (= (apply str (reverse xs)) xs)\n  \t(= (reverse xs) xs)))", "user": "5583888ae4b05c286339e117"}, {"problem": 27, "code": "(fn isPalindrome? [lst]\n  (= (seq lst)\n     (reverse lst)))", "user": "55838353e4b05c286339e116"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5579bc24e4b05c286339e098"}, {"problem": 27, "code": "(fn pd [sq] \n  (if (empty? sq) true\n    (and (= (first sq) (last sq)) (pd (drop 1(drop-last sq))))\n  ))", "user": "55815973e4b05c286339e0f6"}, {"problem": 27, "code": "(fn [x] (reduce #(and %1 %2)  (map = (into () x) (seq x))) )", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 27, "code": "(fn pd [l]\n  (let [ll (count l)\n        pl (quot ll 2)\n        d (mod ll 2)\n        fp (take pl l)\n        sp (drop (+ pl d) l)\n        rsp (reverse sp)]\n    (= fp rsp)))", "user": "503777a4e4b0af0658af77ac"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x) (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x)\n     (reverse (reverse x))))", "user": "54656384e4b01be26fd746db"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4f4391a9e4b0d7d3c9f3fd23"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s)\n     (reverse (seq s))))", "user": "55895eade4b059ccff29b202"}, {"problem": 27, "code": "(fn [l] \n  (let [s (seq l)]\n    (= s (reverse s))))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558466fce4b04192f3441eee"}, {"problem": 27, "code": "#( = (seq %) (reverse %))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 27, "code": "(fn c [l] \n\t(loop [x l]\n\t\t(if (< (count x) 2 )\n\t\t\ttrue\n\t\t\t(if (= (first x) (last x))\n\t\t\t\t(recur (drop-last (drop 1 x)))\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n\t)\n)", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "558aabbfe4b0277789237621"}, {"problem": 27, "code": "(fn [input]\n  (loop [i input]\n    (if (empty? i)\n      true\n      (let [f (first i)\n            l (last i)]\n        (if (= f l)\n          (if (= 1 (count i))\n            true\n            (recur (rest (butlast i))))\n          false)))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 27, "code": "(fn [s] \n  (let [r1 (reverse s)\n        r2 (reverse r1)]\n    (= r1 r2)))", "user": "54530382e4b0e397800069cc"}, {"problem": 27, "code": "#(if (= (partition 1 %) (reverse (partition 1 %))) true false)", "user": "5589a735e4b059ccff29b206"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5589e88ae4b0277789237610"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558aa97de4b0277789237620"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558a4357e4b0277789237617"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 27, "code": "(fn [x]\n  (if (= (type x) java.lang.String)\n    (= (apply str (reverse x)) (str x))\n    (= (reverse x) x)))", "user": "558a81fbe4b027778923761c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558bb38fe4b0277789237631"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "558d43f1e4b0277789237640"}, {"problem": 27, "code": "(fn mydector\n  [myseq]\n  \n  (loop \n    [myrest1 myseq myrest2 (reverse myseq) myres true]\n    ( if (nil? (next myrest1) )\n      myres\n      (recur (next myrest1) (next myrest2) (and myres (= (first myrest1) (first myrest2))))\n     )\n  \n  ))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 27, "code": "(fn [s] (let [a (reverse s)] (= (seq s) a)))", "user": "4e6a51a8535d8ccf87e9fec7"}, {"problem": 27, "code": "#(if (string? %)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %))", "user": "5567643ce4b0c656e3ff183f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "558df2ebe4b0277789237649"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558b41fce4b0277789237628"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "558b50d5e4b027778923762b"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))) )", "user": "55855f00e4b001b0851d750b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "558d7dd3e4b0277789237647"}, {"problem": 27, "code": "(fn [s]\n  (loop [x s y (reverse s)]\n    (if (empty? x)\n      true\n      (and\n        (=\n          (first x)     \n          (first y)\n        )\n        (recur\n          (rest x)\n          (rest y)\n        )\n      )\n    )\n  )\n)", "user": "5437d022e4b032a45b869309"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)) )", "user": "558ed227e4b0277789237658"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse (seq n))))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 27, "code": "(fn [coll]\n  (let [n (quot (count coll) 2)\n        [col1 col2] (split-at n coll)\n        revcol2 (reverse col2)]\n    (->> (map vector col1 revcol2)\n         (every? (fn [[c1 c2]] (= c1 c2))))))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 27, "code": "(fn[x]\n  (if (= (seq x) (concat (reverse x))) true false))", "user": "558fb14ee4b0277789237664"}, {"problem": 27, "code": "(fn [col] (if (>  2 (count col))\n             true\n             (if (not= (first col) (last col))\n               false\n               (recur (rest (drop-last col))))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 27, "code": "(fn palindrome? [n] (= (into '() (reverse n)) (into '() n)))", "user": "559057c4e4b027778923766e"}, {"problem": 27, "code": "(fn palindrome? [s]\n  ((fn [se]\n    (if (seq se)\n      (if (= (first se) (last se))\n        (recur (rest (butlast se)))\n        false)\n      true))\n   s))", "user": "556b67c9e4b09a3098a524ed"}, {"problem": 27, "code": "#(or (empty? %) (and (= (first %) (last %)) (recur (rest (butlast %)))))", "user": "558f4fbae4b0277789237661"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5590e461e4b0277789237675"}, {"problem": 27, "code": "(fn is_palindrome [s]\n  (loop [i 0 j (dec (count s))]\n    (if (>= i j)\n      true\n      (if (= (nth s i) (nth s j))\n        (recur (inc i) (dec j))\n        false))))", "user": "5590e55de4b0277789237676"}, {"problem": 27, "code": "(fn asdf [x] (= (apply str (reverse x)) (apply str x)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 27, "code": "(fn palindrome? [input] (= (seq input) (reverse input)))", "user": "5586f091e4b059ccff29b1dc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 27, "code": "#(loop [f %]\n    (if (empty? f)\n      true\n      (if (not= (first f) (first (reverse f)))\n        false\n        (recur (reverse (next (reverse (next f)))))\n       )\n     )\n)", "user": "558b494ce4b0277789237629"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "558bdcefe4b0277789237633"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "55866c55e4b059ccff29b1d3"}, {"problem": 27, "code": "#(= (reduce str(reverse %)) (reduce str %))", "user": "558a5d52e4b0277789237618"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "55913b57e4b0604b3f94d575"}, {"problem": 27, "code": "(fn [inp]\n        (let [r (reverse inp)]\n              (if (string? inp)\n                (= (apply str r) inp)\n                (= r inp))))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 27, "code": "(fn [seq_in] (reduce #(and %1 %2) \n                     (map #(= %1 %2) \n                          (vec seq_in) \n                          (reverse (vec seq_in))\n                      )\n              )\n  )", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5590ebb1e4b0277789237677"}, {"problem": 27, "code": "(fn [s] (loop [ws s rws (reverse s)]\n           (if (and (seq ws) (seq rws))\n             (if (= (first ws) (first rws))\n               (recur (rest ws) (rest rws))\n               false)\n             true)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 27, "code": "(fn [s]\n   (cond (<= (count s) 1) true\n         (not= (first s) (last s)) false\n         true (recur (rest (butlast s)))))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 27, "code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 27, "code": "#(loop [xs %]\n   (cond (< (count xs) 2) true\n         (= (first xs) (last xs)) (recur (drop-last (rest xs)))\n         :else false))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 27, "code": "(fn [a] (= (apply list a) (reverse a)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 27, "code": "(fn p? [[h & t]]\n  (if (= 0 (count t))\n    true\n    (and (= h (last t))\n         (p? (butlast t)))))", "user": "5594721de4b0c79f6e1db955"}, {"problem": 27, "code": "(fn pal\n  [l]\n  (loop [\n          l l\n          rev (reverse l)\n          acc true\n          ]\n    (if (and (= (count l) 0) (= (count rev) 0))\n      acc\n      (recur (rest l) (rest rev) (and acc (= (first l) (first rev))))\n      )\n  ))", "user": "55923ef7e4b0604b3f94d58a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 27, "code": "(fn[L](= (seq L) (reverse L)))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 27, "code": "#(= (take (/ (dec (count %)) 2) %) \n     (reverse (take-last (/ (dec (count %)) 2) %)))", "user": "557819dce4b05c286339e088"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 27, "code": "(fn [xs]\n  (case xs\n    ((1 2 3 4 5))  false\n    \"racecar\" true\n    [:foo :bar :foo] true\n    ((1 1 3 3 1 1))  true\n    ((:a :b :c))  false))", "user": "55907e8fe4b0277789237672"}, {"problem": 27, "code": "(fn [n]\n  (if(= (seq n) (reverse n))\n    true\n    false))", "user": "5585f088e4b001b0851d7513"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "5595415ae4b0c79f6e1db965"}, {"problem": 27, "code": "(fn [ [x & r]] \n  (if r\n  (let \n   [rr (reverse r)]\n   (and \n    (= x (first rr))\n    (recur  (rest rr))))\n    true))", "user": "4f045d0e535dcb61093f6bbc"}, {"problem": 27, "code": "#(= % ((if (string? %) clojure.string/reverse reverse) %))", "user": "558fec41e4b0277789237666"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 27, "code": "(fn palindrome? [tokens]\n  (if (<= (count tokens) 1)\n    true\n    (and (= (first tokens) (last tokens))\n         (palindrome? (butlast (rest tokens))))))", "user": "548c6673e4b0e286459a1209"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "54de16cae4b024c67c0cf79c"}, {"problem": 27, "code": "(fn isp [v] (or (= 0 (count v)) (and (= (first v) (last v)) (isp (rest (reverse (rest (reverse v))))))))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 27, "code": "(fn [subj] (= (reverse subj) (seq subj)))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "557ed776e4b05c286339e0da"}, {"problem": 27, "code": "(fn [x] (= (vec x) (vec (reverse x))))", "user": "55920e24e4b0604b3f94d587"}, {"problem": 27, "code": "(fn [item]\n  (= (seq item) (reverse item)))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 27, "code": "(fn palindrome? [a-seq]\n  (let [r (reverse a-seq)]\n    (= r (reverse r))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5598cf5ae4b031d6649c9b9f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5598a15ae4b031d6649c9b9d"}, {"problem": 27, "code": "(fn [s]\n  (loop [head 0 tail (dec (count s)) match true]\n    (if (>= head tail)\n      match\n        (recur (inc head) (dec tail) (= (nth s head) (nth s tail))))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 27, "code": "(fn [col]\n  (= (seq col) (reverse col)))", "user": "55996253e4b031d6649c9baa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55496eeae4b0a04f79299569"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55306f9de4b076ab5578f814"}, {"problem": 27, "code": ";;(comp (partial apply =) (juxt seq reverse) )\n#(= (seq %) (reverse %))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse sq)))", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "559af785e4b066d22e731f4c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 27, "code": "(fn f [x] (if (<= (count x) 1) true (if (not= (first x) (last x)) false (f (take (- (count x) 2) (rest x))))))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559647ebe4b0c79f6e1db977"}, {"problem": 27, "code": "(fn [sq]\n  (let [sz-sq (count sq)\n        take-point (if (odd? sz-sq)\n                          (/ (- sz-sq 1) 2)\n                          (/ sz-sq 2))\n        drop-point (if (odd? sz-sq)\n                          (+ take-point 1)\n                          take-point)\n        halve-one (take take-point sq)\n        halve-two (reverse (drop drop-point sq))]\n    (= halve-one halve-two)))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 27, "code": "#(loop [isPalindrome true\n                           s %]\n                      (if (or (empty? s) (false? isPalindrome))\n                        isPalindrome\n                        (recur (= (first s) (last s)) (drop-last 1 (drop 1 s))))\n                      )", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 27, "code": "(fn [s]\n  (let\n    [rs (reverse s)]\n    (every? (fn pred [v] (= v (nth rs (.indexOf (seq s) v)))) s)))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 27, "code": "(fn [x]\n  (if (instance? String x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "user": "55921c21e4b0604b3f94d588"}, {"problem": 27, "code": "(fn palindrome\n  [x]\n  (= (seq x) (reverse x)))", "user": "559ce276e4b0ec2b359424d7"}, {"problem": 27, "code": "(fn [xs]\n  (let [n (count xs)\n        h (Math/floor (/ n 2))]\n    (= (take h xs)\n       (take h (reverse xs)))))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 27, "code": "#(let [r (reverse %)] (= r (reverse r)))", "user": "559a8816e4b066d22e731f41"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5574c172e4b05c286339e059"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "532eec6ce4b019098a6f8b4a"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (reverse (reverse coll)) ))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 27, "code": "#(loop [theseq (vec %)]\n   (if (<= (count theseq) 1)\n     true\n     (if (= (first theseq) (last theseq))\n       (recur (subvec theseq 1 (dec (count theseq))))\n       false)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5596752ae4b04c1e5c31d753"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559ed93ce4b0acc240e314e3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559ff3b1e4b0acc240e314ed"}, {"problem": 27, "code": "#(if(= (apply str (reverse %)) (apply str %)) true false)", "user": "559d6288e4b0ec2b359424dc"}, {"problem": 27, "code": "#(loop [rem % forward [] rev '()]\n   (if\n     (empty? rem) (= forward rev)\n     (recur (rest rem) (conj forward (first rem)) (conj rev (first rem)))\n     )\n   )", "user": "559fefb4e4b0acc240e314ec"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a09645e4b0acc240e314fe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse n)))", "user": "559ab207e4b066d22e731f49"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5586a459e4b059ccff29b1d5"}, {"problem": 27, "code": "(fn my-palindrome?\n  [l]\n  (cond\n    (empty? l) true\n    (= (first l) (last l)) (my-palindrome? (rest (butlast l)))\n    :else false))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53f191b8e4b0742d9025b0e0"}, {"problem": 27, "code": "#(let [x (seq %)]\n   (= x (reverse x)))", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "524d91eae4b0a16e35cf6dee"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "553527ede4b09218d5f44fab"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "559eb160e4b0acc240e314e1"}, {"problem": 27, "code": "(fn [p] \n    (if (seq p) \n      (if (= (first p) (last p))\n        (recur (reverse (drop 1(reverse (drop 1 p)))))\n        false)\n      true))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 27, "code": "(fn palin [s]\n  (if (= (type s) java.lang.String)\n    (= s (clojure.string/join(reverse \"racecar\")))\n    (= s (reverse s))))", "user": "54f06aede4b024c67c0cf896"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a2d5c2e4b0acc240e3152c"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x)\n     (reverse (seq x))))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "55a31c66e4b0acc240e31530"}, {"problem": 27, "code": "#(=(reverse (seq %)) (seq %))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "55a0a278e4b0acc240e314ff"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %)))\n      (= % (reverse %)))", "user": "55998d0ce4b031d6649c9bac"}, {"problem": 27, "code": "(fn pal? [x]\n  (if (empty? (rest x))\n    true\n    (if (= (first x) (last x))\n      (pal? (reverse (rest (reverse (rest x)))))\n      false)))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 27, "code": "(fn\n  [param]\n  \n   (=\n    (seq param)\n    (reverse (seq param))\n    \n   ))", "user": "55995d88e4b031d6649c9ba8"}, {"problem": 27, "code": "#(loop [a %]\n    (if (or (empty? a) (not= (first a) (last a)))\n      (empty? a)\n      (recur (drop-last (rest a)))))", "user": "559ffd74e4b0acc240e314f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 27, "code": "#(zero? (compare (apply str (take (/ (count %) 2) %)) (apply str (reverse (take-last (/ (count %) 2) % )) ) ))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 27, "code": "(fn palin?\n  [xs]\n  (if \n    (or \n     (empty? xs) \n     (= 1 (count xs)))\n    true\n    (and\n     (= (first xs) (last xs))\n     (palin? (rest (drop-last xs))))))", "user": "55a3ca84e4b0acc240e3153c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52b3520ee4b0c58976d9ad04"}, {"problem": 27, "code": "(fn palindrome? [se]\n  (= (seq se) (reverse se)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 27, "code": "#(every? true? (map = %  (reverse %)))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 27, "code": "(fn palindrome?\n  [input-seq]\n  (let [elems (count input-seq)]\n    (every? true? (map #(= (nth input-seq %) (nth input-seq %2)) (range elems) (reverse (range elems))))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 27, "code": "(fn [x]\n    (let [v (vec x)]\n        (loop [i  0\n               j  (dec (count v))]\n            (cond\n                (< j i)         true\n                (= (v i) (v j)) (recur (inc i) (dec j))\n                :else           false))))", "user": "544e5b22e4b0e39780006983"}, {"problem": 27, "code": "#(let \n  [l (if (string? %) (list %) %)]\n  (= l (reverse l))\n)", "user": "55916764e4b0604b3f94d57b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (< (count coll) 2)\n     true\n     (if (= (first coll) (last coll))\n       (recur (-> coll rest reverse rest reverse))\n       false\n       )))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 27, "code": "(fn [coll]\n  (let [r-coll (reverse coll)]\n    (= (seq  coll) r-coll)))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 27, "code": "#(let [rev (reverse %)]\n   (= (seq %) rev))", "user": "559c4236e4b066d22e731f67"}, {"problem": 27, "code": "(fn\n  [col]\n  (let [seq (vec col)]\n    (let [length (count seq)]\n    (let [half-length (/ length 2)]\n    (if (= (mod length 2) 0)\n      (do (let [first-half (take half-length seq)\n                last-half (take-last half-length seq)]\n            (= first-half (reverse last-half))))\n      (do (let [first-half (take (- half-length 1) seq)\n                last-half (take-last (- half-length 1) seq)]\n            (= first-half (reverse last-half)))))))))", "user": "55a7e096e4b0988bba2ad934"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a0ea7de4b0acc240e31505"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 27, "code": "(fn [x] \n\t(= (reverse (into [] x)) (into [] x)))", "user": "54117417e4b01498b1a719c5"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x) \n    (= x (apply str (reverse x) )) \n    (= x (reverse x)) ))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "51814aefe4b06547fbae114f"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52b666bfe4b0c58976d9ad44"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "55aba8f4e4b03311e7b7328c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55a2b008e4b0acc240e31526"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55acab76e4b03311e7b73294"}, {"problem": 27, "code": "(fn [xs]\n  (cond (empty? xs) true\n   \t\t(= (first xs) (last xs))(recur (drop-last (rest xs)))\n   \t\t:else false))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 27, "code": "#( = (seq %) (reverse (seq %)) )", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 27, "code": "(fn pal \n  [my-seq]\n  (loop [iter 0]\n        (if (= iter (count my-seq))\n            true\n            (do \n              (if (= (nth my-seq iter) (nth my-seq (- (count my-seq) (inc iter))))\n                  (recur (inc iter))\n                  false\n              )\n            )\n        )\n  )\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 27, "code": "(fn [s]\n    (let [orig-len (count s)\n          half-len (quot orig-len 2)\n          split' (fn [s i first-half]\n                   (if (< (count first-half) half-len)\n                     (recur (next s) (inc i) (conj first-half (first s)))\n                     [first-half\n                      (if (odd? orig-len) (next s) s)]))\n          [half1 half2] (split' s 0 [])]\n      (= half1 (reverse half2))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 27, "code": "#(loop [[h1 & t1] (seq %)\n        [h2 & t2] (reverse %)]\n    (cond\n      (not= h1 h2) false\n      h1 (recur t1 t2)\n      true true))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 27, "code": ";;(fn [sq]\n;;\t(cond\n;;\t\t(= java.lang.String (class sq)) (= (clojure.string/reverse sq) sq)\n;;    \t:else (= (reverse sq) sq)\n;;\t)\n;;)\n\n#(= (seq %) (reverse %))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 27, "code": "(fn [s] \n  (cond \n   \t(empty? s) \n      true\n    (= (take 1 s) (take-last 1 s) )\n      (recur (drop-last 1 (drop 1 s)))\n    :else false))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 27, "code": "(fn [data]\n  (loop [a 0\n        b (- (count data) 1)]\n   (if (not= (nth data a) (nth data b))\n      false\n      (if (< b a)\n        true\n        (recur (inc a) (dec b))))))", "user": "55ae7adae4b03311e7b732bd"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 27, "code": "(fn [x]\n  (loop [s x]\n    (if (= (count s) 0)\n      true\n      (if-not (= (first s) (last s))\n       false\n      (recur (rest (butlast s)))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 27, "code": "(fn [cl] (let [ncl (count cl), hcl1 (long (Math/ceil (/ ncl 2.0)))\n               cl2 (partition (long (/ ncl 2)) hcl1 cl)]\n    (every? #(= true %) (map #(= %1 %2) (nth cl2 0) (reverse (nth cl2 1))) )\n          \n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 27, "code": "#(every? true? (for [x (range (quot (count %) 2))]\n                 ((fn compareFrontBack [subcol] (= (first subcol) (last subcol)))\n                 \t(drop x (drop-last x %)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "55afe130e4b002ce9d5cbc1b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 27, "code": "#(loop [ens (into [] %)]\n   (if (or (empty? ens) (= (count ens) 1))\n     true \n     (if (= (first ens) (last ens)) (recur (subvec ens 1 (- (count ens) 1)))\n       false\n     )\n   )\n)", "user": "55acb648e4b03311e7b73296"}, {"problem": 27, "code": "(fn [x] \n  (loop [r (reverse x)\n         xx x]\n    (if (empty? (rest xx)) (= (first r) (first xx))\n    (if (not (= (first r) (first xx))) false\n                                       (recur (rest r) (rest xx))))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559b2b13e4b066d22e731f4f"}, {"problem": 27, "code": "#(let [r (reverse (into [] %1)) s (into [] %1)] (= r s))", "user": "55b118fae4b002ce9d5cbc2d"}, {"problem": 27, "code": "#(= (apply str (reverse  %)) (apply str %))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 27, "code": "(fn rev [a]\n  (let [b (if (string? a)\n            (clojure.string/reverse a)\n            (reverse a))]\n      (= a b)))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 27, "code": "(fn [xs] (= (take (quot (count xs) 2) xs) (reverse (take-last (quot (count xs) 2) xs))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 27, "code": "(fn [xs]\n  (let [ys (vec xs)]\n    (= ys (reverse ys))))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 27, "code": "(fn  [xs]\n        (= (vec xs) (vec (reverse xs))))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "4f04c93c535dcb61093f6be3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 27, "code": "(fn isPalindrome [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n       (isPalindrome (butlast (rest s)))))\n  )", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55b4b0f5e4b01b9910ae297d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55278187e4b0ffed3738f92d"}, {"problem": 27, "code": "(fn [x]( = (reverse (reverse x)) (reverse x)))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 27, "code": "(fn [s]\n  (= (map identity s)\n     (reverse s)))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 27, "code": "#(let [mid (/ (count %) 2)] (= (take (Math/floor mid) %) (reverse (drop (Math/ceil mid) %))))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b4c339e4b01b9910ae297f"}, {"problem": 27, "code": "(fn [v]\n    (loop [x v]\n        (if (> 2 (count x)) \n            true\n            (if (= (first x) (last x))\n                (recur (drop-last (rest x)))\n                false))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "557f748ae4b05c286339e0df"}, {"problem": 27, "code": ";(fn [coll] (= (apply str (into '() coll)) (apply str coll)))\n(fn [coll] (= (reverse coll) (seq coll)))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "55b64ef1e4b01b9910ae2994"}, {"problem": 27, "code": "(fn [x] (= (vec (to-array x)) (vec (reverse (to-array x)))))", "user": "55b62d2fe4b01b9910ae298f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 27, "code": "(fn [x] \n\t(loop [tstr x sind 0 lind (- (count x) 1)] \n\t\t(if (> sind lind) \n\t\t\ttrue\n\t\t\t(if (= (nth tstr sind) (nth tstr lind))\n\t\t\t\t(recur tstr (+ sind 1) (- lind 1)) \n\t\t\t\tfalse \n\t\t\t) \n\t\t)\n\t)\n)", "user": "55b60518e4b01b9910ae298e"}, {"problem": 27, "code": "(fn [lst] (= (seq lst) (reverse lst)))", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55b26ed7e4b0da326a65cf82"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55b705fce4b01b9910ae29a0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (if (<= (count s) 1)\n    true\n    (and\n     (= (first s) (last s))\n     (palindrome? (rest (butlast s))))))", "user": "55b7ca4ae4b01b9910ae29b1"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55a3ee58e4b0acc240e3153e"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 27, "code": "#(if (= ( reverse (vec %)) (vec %) ) true false)", "user": "55b9ce15e4b01b9910ae29c1"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "559046cee4b027778923766d"}, {"problem": 27, "code": "#(let [y (if (string? %) (clojure.string/reverse %) (reverse %))]\n    (if (= % y) true false))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 27, "code": "(fn [x] ( = (seq x) ( reverse x) ))", "user": "55ba6d52e4b01b9910ae29d3"}, {"problem": 27, "code": "(fn [x] (if (string? x)\n          (if (= x (clojure.string/reverse x)) true false)\n          (if (= x (reverse x)) true false)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55bbb28be4b01b9910ae29ea"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 27, "code": "(fn [items]\n  (let [middle-index (int (/ (count items) 2)) start-at-index 0 end-at-index (- (count items) 1)]\n   (loop [start-at start-at-index end-at end-at-index]\n     (if (> start-at middle-index)\n       true;\u76f4\u63a5\u8fd4\u56de\u9a8c\u8bc1\u6210\u529f\n       (if (not= (get (vec items) start-at) (get (vec items) end-at))\n         false\n         (recur (inc start-at) (dec end-at)))))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 27, "code": "(fn [s]\n  (loop [xs (seq s)]\n    (if (> 2 (count xs)) \n      true\n      (and (= (first xs) (last xs))\n           (recur (drop 1 (drop-last xs)))))))", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 27, "code": "(fn [col]\n  (= (seq col) (reverse col)))", "user": "55bccbc6e4b01b9910ae29f5"}, {"problem": 27, "code": "(fn [input] \n  (let [s (seq input)]\n    (= s (reverse s))))", "user": "55be18e5e4b01b9910ae2a01"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 27, "code": "(fn [l]\n  (= (reverse (seq l)) (seq l)))", "user": "55be4fa6e4b01b9910ae2a08"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a016fde4b0acc240e314f1"}, {"problem": 27, "code": "(fn [x] \n  (if (< (count x) 2) \n    true \n    (if (= (first x) (last x))\n       (recur (butlast (rest x)))\n       false\n    )\n  )\n)", "user": "55b7df63e4b01b9910ae29b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55bad3eae4b01b9910ae29df"}, {"problem": 27, "code": "(fn\n  [x]\n  (let [r-x (reverse x)]\n    (reduce #(= true % %2) (map = x r-x))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "55be33f0e4b01b9910ae2a05"}, {"problem": 27, "code": "(fn [x] (if (= (seq x) (reverse x)) true false))", "user": "557775a3e4b05c286339e084"}, {"problem": 27, "code": "(fn f [s]\n  (if (<= (count s) 1) true\n    (and (= (first s) (last s))\n         (f (rest (into '() (rest s))) ))\n    )\n  )", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 27, "code": "(fn [arr]\n  (= (apply str arr) (apply str (reverse arr))))", "user": "55c06feee4b01b9910ae2a23"}, {"problem": 27, "code": "(fn checkPalindrome [col]\n  (case (count col)\n    0 true\n    1 true\n    (let \n      [\n       f (first col)\n       l (last col)\n       inner (butlast (rest col))\n       ]\n      (and\n        (= f l)\n        (checkPalindrome inner)\n      )\n    )\n  )\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 27, "code": "(fn [col] (= (apply str col) (apply str (reverse col))))", "user": "55bf461be4b01b9910ae2a11"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reduce conj '() %)))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 27, "code": "#(= (take (unchecked-divide-int (count %1) 2) %1) (reverse (take-last (unchecked-divide-int (count %1) 2) %1)) )", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 27, "code": "#(let [t (seq %)] (= t (reverse t)))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 27, "code": "(fn [x] \n  (= \n   (seq x) \n   (reverse x)))", "user": "55bb3f89e4b01b9910ae29e2"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55304523e4b076ab5578f810"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55bef38fe4b01b9910ae2a0e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "554b8b6be4b0a04f7929958b"}, {"problem": 27, "code": "(fn [x] (= (seq  x) (reverse x)))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55c37594e4b0e31453f64989"}, {"problem": 27, "code": "#(if (< (count %) 2)\n     true\n\t (if-not (= (last %) (first %))\n      false\n      (recur (butlast (rest %))\n    )\n))\n\n\n;(fn is-palindrome [palindrome] (\n;    if (< (count palindrome) 2)\n;    true  \n;    (if-not (= (last palindrome) (first palindrome))\n;      false\n;      (is-palindrome (butlast (rest palindrome))\n;    ))\n;))", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 27, "code": "(fn palin [s]\n  (=\n    (if (string? s)\n      (apply str (reverse s))\n      (reverse s)\n      )\n    s)\n  )", "user": "55c3149de4b0e31453f64987"}, {"problem": 27, "code": "(fn [x] (loop [check x]\n\t\t\t(if (or (= (rest check ) []) (= check []))\n\t\t\t   true\n\t\t\t(if (= (first (reverse check)) (first check))\n\t\t\t   (recur (rest (reverse (rest check))))\n\t\t\t   false \n\t\t\t)\n\t\t\t)\n\t\t)\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 27, "code": "(fn [thing] \n  #_=> (cond\n  #_=>  (string? thing) (= thing (clojure.string/reverse thing))\n  #_=>  :else (= thing (reverse thing))))", "user": "55c2a323e4b0e31453f6497f"}, {"problem": 27, "code": "(fn pallindrome? [data]\n  (cond\n   (or (list? data) (vector? data)) (#(if (= % (reverse %))\n                       true\n                       false) data)\n   (string? data) (#(if (= (seq (char-array %)) (reverse (seq (char-array %))))\n                       true\n                       false) data)\n   :else false))", "user": "55c461d3e4b0e31453f64999"}, {"problem": 27, "code": "(fn\n  [sequence-to-check]\n  (= (into [] sequence-to-check) (into [] (reverse sequence-to-check))))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 27, "code": "(fn [lst]\n  (= lst (if (string? lst)\n           (apply str (reverse lst))\n           (reverse lst))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 27, "code": "(fn [coll]\n  (loop\n    [coll coll]\n    (case (count coll)\n      (0 1) true\n      (if (= (first coll) (last coll))\n        (recur (drop-last (rest coll)))\n        false))))", "user": "55c66d3de4b0e31453f649c1"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55c5820be4b0e31453f649b0"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 27, "code": "(fn \n  [x]\n  (let [rev (reverse x)]\n    (loop [idx (count x)\n           f x\n           r rev]\n      (if (= 0 idx)\n        true\n        (if (not= (first f) (first r))\n          false\n          (recur (dec idx)\n                 (rest f)\n                 (rest r)))))))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 27, "code": "(fn [sq]\n\t(= (seq sq) (reverse (seq sq)))  \n  )\n\n; sq == reverse(sq)\n;", "user": "553f70cae4b0a04f792994f8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c583d5e4b0e31453f649b1"}, {"problem": 27, "code": "(fn is-pal [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false \n      (recur (butlast (rest x))))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c1fa2be4b0e31453f64971"}, {"problem": 27, "code": "#(= (-> % seq reverse) (seq %))", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 27, "code": "#( =  (reverse (seq %)) (seq %) )", "user": "55c66590e4b0e31453f649c0"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 27, "code": "#(=(reverse (reverse %)) (reverse %))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c9bcb8e4b0e31453f649f2"}, {"problem": 27, "code": "(fn\n  [pattern]\n  (= (seq pattern) (reverse pattern))\n)", "user": "55ba3666e4b01b9910ae29cc"}, {"problem": 27, "code": "(fn [coll] (= coll (if (string? coll)(apply str(reverse coll))(reverse coll))))", "user": "55c07e3ee4b01b9910ae2a24"}, {"problem": 27, "code": "(fn [s]\r\n  (let [a (reverse s)]\r\n    (let [b (reverse a)]\r\n      (= a b))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 27, "code": "(fn t [data]\n  (if (> (count data) 1)\n    (let [f (first data)\n          l (last data)\n          r (butlast (rest data))]\n      (if (= f l)\n        (t r)\n        false))\n    true))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5586b707e4b059ccff29b1d6"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "54010363e4b0de5c4184861d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 27, "code": ";(fn palindrome?\n;  [x]\n;  (cond (or (= (count x) 0) (= (count x) 1)) true\n;        (= (first x) (last x)) (palindrome? (drop 1 (take (- (count x) 1) x)))\n;        :else false))\n\n#(= (seq %) (reverse %))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 27, "code": "#( = (reverse(reverse %)) (reverse %))", "user": "55a65872e4b09e57187da299"}, {"problem": 27, "code": "; (fn [coll]\n;   (= (seq coll) (reverse (seq coll))))\n#(= (seq %) (reverse (seq %)))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 27, "code": "(fn [coll] (let [idx (quot (count coll) 2)]\n(loop [c     (take idx coll)\n       rvs   (reverse (take-last idx coll))]\n       (cond (or (empty? c) (empty? rvs)) true\n             (not= (first c) (first rvs)) false\n             :else (recur (rest c) (rest rvs))))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join x) (clojure.string/join (reverse x))))", "user": "526f2e16e4b03e8d9a4a7353"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/join (reverse %)) %) (= (reverse %) %))", "user": "55cae949e4b0e31453f649fe"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 27, "code": "(fn [s] \n  (loop [trimmed s]\n    (if (or (= (count trimmed) 1) (zero? (count trimmed)))\n      true\n      (if (= (first trimmed) (first (reverse trimmed)))\n        (recur (drop-last (reverse (drop-last trimmed))))\n         false))))", "user": "5446158ce4b032a45b8693a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 27, "code": "#(= (apply str (reverse %1)) (apply str %1))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 27, "code": "(fn ispal\n  [col]\n  (loop [f (first col) l (last col) rem col]\n    (cond\n        (not= f l) false\n        (empty? rem) true\n        :else (recur (first rem) (last rem) (drop-last (rest rem)) )\n        )))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (map #'identity x)))", "user": "52f23d85e4b05e3f0be25ef6"}, {"problem": 27, "code": "#(= (seq %) (seq (reduce conj '() %)   ))", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ccd9d1e4b0e31453f64a17"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 27, "code": "(fn [x]\r\n (if (string? x)\r\n   (= x (clojure.string/reverse x))\r\n   (= x (reverse x))\r\n )\r\n)", "user": "55cde227e4b0e31453f64a22"}, {"problem": 27, "code": "(fn tn [a]\n (loop [col a]\n    (if (nil? (first col))\n      true\n      (if (not (= (first col) (last col)))\n        false\n        (recur (-> col (butlast) (rest)))))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 27, "code": "(fn\n  [s]\n  (= (seq s) (reduce conj () s)))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 27, "code": "(fn pal [x]\n    (cond (empty? x) true\n          (= (first x) (last x)) (pal ((comp #(drop-last %) #(drop 1 %)) x))\n          :else false))", "user": "559067ace4b0277789237670"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 27, "code": "(fn f [l]\n  (if (second l)\n    (if (= (first l) (last l))\n      (f (drop 1 (drop-last l)))\n      false)\n    true))", "user": "55cfa46ce4b0e31453f64a31"}, {"problem": 27, "code": "(fn [asdf] (= (seq asdf) (reverse asdf)))", "user": "55c7c4dfe4b0e31453f649d7"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (string? x)\n  (= (apply str (reverse x)) x)\n  (= (reverse x) x)))", "user": "52f3a2afe4b05e3f0be25f13"}, {"problem": 27, "code": "(fn [values]\n  (loop [values values]\n  (let [f (first values)\n         l (last values)\n         m (drop-last (rest values))]\n    (if (or (nil? l) (and (nil? m) (= f l)))\n      true\n      (if (not= f l)\n        false\n        (recur m))))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 27, "code": "(fn palindrome?\n  [sq]\n  (if (or (zero? (count sq)) (= 1 (count sq)))\n    true\n    (if (= (first sq) (last sq))\n      (palindrome? (butlast (rest sq)))\n      false)))", "user": "5512c935e4b055c2f668d4b8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55773cbae4b05c286339e07f"}, {"problem": 27, "code": "(fn ([a] (let [s (seq a)] (= s (reverse s)))))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 27, "code": "(fn [v] (= (seq v) (reverse v) ) )", "user": "55ccfc6ee4b0e31453f64a19"}, {"problem": 27, "code": "(fn q [x] (\n           if (string? x)\n             (= x (apply str (reverse x)))\n             (= x (reverse x))\n))", "user": "55d1a2b8e4b0e31453f64a46"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 27, "code": "(fn [x]\n  (let [a (seq x) \n         b (reverse (seq x))]\n    (= a b)))", "user": "55912230e4b027778923767a"}, {"problem": 27, "code": "#(=(reverse %)(seq %))", "user": "55a4047ce4b0acc240e31541"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "55ce42e4e4b0e31453f64a27"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 27, "code": "(fn [s]\n  (=\n   (take (. Math floor (/ (count s) 2)) s)\n   (reverse (take-last (. Math floor (/ (count s) 2)) s))))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5589a941e4b059ccff29b207"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (= (seq xs) (reverse xs)))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 27, "code": "(fn [col]\n  (let [s (into-array col)]\n    (=\n      (reverse\n        (subvec (vec s) 0 (quot (count s) 2)))\n      (subvec\n        (vec s) (- (count s) (quot (count s) 2)) (count s)))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 27, "code": "(fn [s]\n  (loop [forwards s\n         backwards (reverse s)]\n    (if (and (empty? forwards) (empty? backwards))\n      true\n      (if (= (first forwards) (first backwards))\n        (recur (rest forwards) (rest backwards))\n        false))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55d564ece4b0e31453f64a85"}, {"problem": 27, "code": "(fn [s] ( if (= java.lang.String (type s) ) (= s (apply str s)) (= s (reverse s))))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55d36d3ae4b0e31453f64a64"}, {"problem": 27, "code": "(fn [col] \n  (= (seq col) (reverse col)))", "user": "4f055d4f535dcb61093f6bf6"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "55d3811be4b0e31453f64a69"}, {"problem": 27, "code": "#(loop [a (seq %)\n       b (reverse %)\n       isPalindrome? false]\n      (cond\n        (not= (first a) (first b)) false\n        (empty? a) isPalindrome?\n        (= (count a) 1) isPalindrome?\n        :else (recur (rest a) (rest b) true)))", "user": "55bd6734e4b01b9910ae29fd"}, {"problem": 27, "code": "#(=\n  (if (string? %)\n  \t(clojure.string/reverse %)\n\t(reverse %))\n  %)\n\n;#(= (seq %) (reverse %))", "user": "5511ac85e4b06e50f9beb196"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55cc0d8ce4b0e31453f64a0c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4ded56bb535d08e6dec9fe0b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 27, "code": "(fn p [l] (if-not (= (first l) (last l)) false (if-not (> 1 (count l)) (p ((comp rest butlast) l)) true )))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55d64526e4b0e31453f64a97"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (let [len (count x)]\n    (if (not (nil? (#{0 1} len)))\n      true\n      (and (= (first x) (last x))\n           (palindrome? (->> x (take (- len 1)) (drop 1)))))))", "user": "55d7d139e4b0e31453f64aaa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))\n#_(fn [x] (let \n [n (Math/floor (/ (count x) 2))\n  y (take n x)\n  z (take n (reverse x))] \n (every? true? (map = y z))))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55d8968ae4b0e31453f64abb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55d84919e4b0e31453f64ab0"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) \n     (reverse xs)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 27, "code": "#(if (= (type %) (type \"\")) \n   (= (apply str (reverse %)) %) \n   (= % (reverse %)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 27, "code": "(fn [coll] \n  \t(let [r-coll (reverse coll)]\n     (if (= java.lang.String (type coll))\n        (= coll (apply str r-coll))\n    \t(= r-coll coll))))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 27, "code": "(fn [seq]\n    (if (string? seq)\n      (= (apply str (reverse (re-seq #\".\" seq))) seq)\n      (= (reverse seq) seq)))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "553c136ae4b09218d5f45012"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "55d9f941e4b0e31453f64ad0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c3f0c6e4b0e31453f64990"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 27, "code": "#(let [x (into [] %)] (= (reverse x) x))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 27, "code": "(fn [s] (if (empty? s)\n          true\n          (if (= (first s) (last s))\n            (recur (reverse (drop 1 (reverse (drop 1 s)))))\n            false)))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54722c55e4b094393f72dd74"}, {"problem": 27, "code": "(fn [list] (= (reverse list) (seq list)))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s))  (reverse s)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 27, "code": "#(loop [x %]\n  (if (empty? x)\n    true\n    (if-not (= (first x) (last x))\n      false\n      (recur (rest (butlast x))))))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 27, "code": "(fn [xs]\n  (let [s (seq xs)]\n    (= s (reverse s))))", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))", "user": "55d4b995e4b0e31453f64a7c"}, {"problem": 27, "code": "(fn pal? [pal] \n  (= (seq pal) (reverse (seq pal)))\n  \n  \n\n  )", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 27, "code": "(fn [x]\n  (= x\n     (if (string? x) \n       (clojure.string/join (reverse x))\n       (reverse x)\n       )\n     )\n  )", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 27, "code": "#(= (into [] %) (into () %))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "540b851fe4b0addc1aec66f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 27, "code": "(fn [x]\n  (let [len (count x)]\n    (if (or (zero? len) (= 1 len))\n      true\n      (let [f (first x)\n            l (last x)\n            r (butlast (rest x))]\n        (if (not (= f l))\n          false\n          (recur r))))))", "user": "55dd7ad1e4b050e68259b3c2"}, {"problem": 27, "code": "#(= (seq %1) (reduce conj '() %1))", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 27, "code": "#(= (seq %) (reduce conj '() %))", "user": "516afca6e4b081287f204ea0"}, {"problem": 27, "code": "(fn [xs] (= (apply str xs) (apply str (reverse xs))))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 27, "code": "(fn [l]\n  (if (empty? l)\n    true\n    (and \n     (= (last l) (first l))\n     (recur (->> l (drop 1) drop-last))\n    )\n  )\n)", "user": "55db1696e4b0e31453f64ae1"}, {"problem": 27, "code": "(fn [coll]\n  (reduce #(and %1 %2) true (map = coll (reverse coll)))\n  )", "user": "54145050e4b01498b1a719ea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55dd8c25e4b050e68259b3c7"}, {"problem": 27, "code": "(fn [s] (= (into () s) (seq s)))", "user": "55d3b030e4b0e31453f64a6b"}, {"problem": 27, "code": "(fn [a] (= (reverse a) (seq a)))", "user": "55c4cd8de4b0e31453f649a4"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55de2798e4b050e68259b3db"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 27, "code": "(fn [word] (= (seq word) (reverse word)))", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 27, "code": "(fn p [x] (or (nil? (seq x)) (and (= (first x) (last x)) (recur (-> x (rest) (reverse) (rest) (reverse)))) ))", "user": "55deeface4b050e68259b3ea"}, {"problem": 27, "code": "(fn [things] (if (string? things)\n                  (= things (apply str (reverse things)))\n                  (= things (reverse things))))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 27, "code": "(fn [word] (= (seq word) (reverse word)) )", "user": "55e06f82e4b050e68259b40d"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "user": "5360e9ade4b0243289761e3b"}, {"problem": 27, "code": "#(= (seq %) (reverse %) )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "54db48f6e4b024c67c0cf760"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "55e06858e4b050e68259b40c"}, {"problem": 27, "code": "(fn rec [l]\n  \t(if (<= (count l) 1)\n      true\n      (let [hd (first l)\n            lt (last l)\n            l (-> l rest drop-last)]\n        (if (= hd lt)\n          (rec l)\n          false))))", "user": "55e246c2e4b050e68259b431"}, {"problem": 27, "code": "(fn palindrome-detecor\n  [param]\n  (if (= (seq param) (reverse param))\n    true\n    false))", "user": "55dfac5fe4b050e68259b3f9"}, {"problem": 27, "code": "#(let [rev (reverse %)]\n   (if (string? %)\n     (= (apply str rev) %)\n     (= rev %)))", "user": "55e26417e4b050e68259b433"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 27, "code": "(fn [args] (= (seq args) (reverse args)))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 27, "code": "#(= (into '() %) (into '() (reverse %)))", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55e3a685e4b050e68259b446"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "55e0326ce4b050e68259b407"}, {"problem": 27, "code": "(fn [s] (= (reverse (seq s)) (seq s)))", "user": "55660248e4b0c656e3ff1824"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (loop [i 0 acc '(true)]\n    (if (>= i (count x))\n      (every? true? acc)\n      (recur (inc i) (conj acc (= (nth x i) (nth (reverse x) i)) ) ))))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 27, "code": "#(= (reverse (vec %))  (vec %))", "user": "55e5090be4b050e68259b45b"}, {"problem": 27, "code": "#(= (reverse(reverse %)) (reverse %))", "user": "55e20059e4b050e68259b427"}, {"problem": 27, "code": "(fn [target]\n  (let [rev-target (reverse target)]\n    (every? (fn [[t r]] (= t r))\n            (map vector target rev-target))))", "user": "55e558e3e4b050e68259b46b"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "54c94376e4b045293a27f665"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55a68518e4b09e57187da29b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "55df727be4b050e68259b3f3"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e60a45e4b050e68259b481"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 27, "code": "#(if (instance? String %) \n            (= % (clojure.string/reverse %))\n            (= % (reverse %)))", "user": "55e2004de4b050e68259b426"}, {"problem": 27, "code": "(fn pal [l]  \n  (if (= '() l)\n    true\n    (if (string? l)\n      true\n      (and\n       (= (first l) (last l))\n       (pal (rest (butlast l)))))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55dff80de4b050e68259b402"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "52e06ad2e4b09f7907dd140e"}, {"problem": 27, "code": "(fn [x] (if(= (reverse x) (seq x)) true false))", "user": "55dfacb7e4b050e68259b3fc"}, {"problem": 27, "code": "; second\n#(= (seq %) (reverse %))\n\n; first\n#_(fn [x]\n  (let [s (seq x)\n        r (reverse s)]\n    (= r s)))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 27, "code": "(fn [input]\n  (let [sq (seq input) rev-sq (reverse sq)]\n    (= sq rev-sq)))", "user": "55e70e8de4b050e68259b490"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 27, "code": "(fn [a]\n      (= (seq a) (seq (reverse a)))\n      )", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 27, "code": "(fn [x]\n    (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)   \n    ))", "user": "53959edde4b0b51d73faaed8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 27, "code": ";(fn pal [%]\n;  (cond\n;   (not= (first %) (last %)) false\n;   (empty? %) true\n;   :else\n;(pal (drop 1 (drop-last %)))))\n\n#(= (seq %) (reverse %))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55e4f2cbe4b050e68259b459"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e3ae2fe4b050e68259b447"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (-> x (reverse) (clojure.string/join)) x)\n    (= (reverse x) x)))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 27, "code": "(fn [x]\n  (let [f (if (string? x) clojure.string/reverse reverse)]\n    (= x (f x))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 27, "code": "(fn [coll]\n  (= coll (if (string? coll)\n            (apply str (reverse coll))\n            (reverse coll))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 27, "code": "(fn [x] (loop [x x a true] (if (> 2 (count x)) a (recur (-> x rest butlast) (and a (= (first x) (last x)))))))", "user": "4f47daade4b0d56e7bb92bc4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 27, "code": "(fn [c]\n  (or (< (count c) 2)\n      (and (= (first c) (last c))\n           (recur (butlast (next c))))))", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 27, "code": "#(= (reverse (seq % ) ) (seq %) )", "user": "55e9842ae4b0121d4835fda1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 27, "code": "(fn [s] (= s (if (string? s)(clojure.string/reverse s)(reverse s))))", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 27, "code": "(fn [x] (= (first x) (last x)))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 27, "code": "#(let [x (seq %)]\n     (if \n       (= x (reverse x))\n       true\n       false))", "user": "55e84475e4b0121d4835fd8b"}, {"problem": 27, "code": ";#(loop [col (seq %)]\n;  (if (empty? col)\n;   true\n;    (if (= (first col) (last col))\n;      (recur (->> col (drop 1) drop-last))\n;     false)))\n\n#(= (seq %) (reverse %))", "user": "55614155e4b0c656e3ff17c4"}, {"problem": 27, "code": "(fn [coll] (if (empty? coll) true (if-not (= (first coll) (last coll)) false (recur (drop 1 (drop-last 1 coll))))))", "user": "53a6a599e4b0ef122a8689cc"}, {"problem": 27, "code": "#(= (reverse %)(map identity %))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 27, "code": "(fn [c] \n  \t(let [r (reverse c) n (count c)]\n      (every? identity\n           (map #(= (nth c %) (nth  r %)) (range n)))))", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 27, "code": "(fn [x] \n  (= x (if (coll? x)\n         (reverse x)\n         (clojure.string/join (reverse x)))))", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 27, "code": "(fn\n  [lst]\n  (let [\n         len (count lst) \n         mid (if (odd? len) (/ (- len 1) 2) (/ len 2) )]\n    (loop [x 0]\n      (if (<= x mid)\n        (if (= \n              (nth lst x)\n              (nth lst (- len x 1))\n          )\n          (recur (+ x 1))\n          false\n        )\n        true\n      )\n    )\n  )\n)\n;\u6362\u4e86\u4e2a\u65b0\u683c\u5f0f", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 27, "code": "(fn [col] (every? identity (map (partial (fn [col n] (= (nth col n) (nth (reverse col) n))) col) (take (count col) (range)))))", "user": "55b544e2e4b01b9910ae2986"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "55ecab96e4b0121d4835fdcb"}, {"problem": 27, "code": "(fn[e](= (reverse(reverse e))(reverse e)))", "user": "55ec8b25e4b0121d4835fdc9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 27, "code": "(fn [x] (= (seq x) (seq (reverse x))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "50414e3ce4b06d8231e4facd"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 27, "code": "(fn [xs]\n  (loop [acc [] ys (seq xs)]\n    (if (empty? ys)\n      (= acc (seq xs))\n      (recur (conj acc (last ys)) (drop-last ys)))\n    )\n  )", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 27, "code": "#(= (into [] %)  (reverse %))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 27, "code": "(fn \n         [col]\n         (loop [s col] \n           (if (< (count s) 2) true \n               (if-not (= (first s) (first (take-last 1 s))) false\n                       (recur (rest (drop-last s)))))))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (= (vec seq) (vec (reverse seq))))", "user": "55e9494ae4b0121d4835fd9e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ef9c9de4b066087aa94537"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 27, "code": "(fn [n](let [b (seq n)](= b (reverse b))))", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 27, "code": "(fn [l]\n  (= (reverse l) (reverse (reverse l))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 27, "code": "#(if (string? %1)\n   (= %1 (apply str (reverse %1)))\n   (= %1 (reverse %1)))", "user": "53da767ee4b0e771c302549e"}, {"problem": 27, "code": "#(= (into () %) (into () (reverse %)))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 27, "code": "(fn is_palindrome [s]\n  (cond\n\t(empty? s) true\n   \t(= (first s) (first (reverse s))) (is_palindrome (drop-last (rest s)))\n   \t:else false                                        \n  )\n)", "user": "55efbb2ae4b066087aa9453c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55e20451e4b050e68259b428"}, {"problem": 27, "code": "#(= (seq  %) (reverse %))", "user": "55efc291e4b066087aa9453d"}, {"problem": 27, "code": "(fn palindrome [p] (if (empty? p) true (if (= (first p) (last p)) (palindrome (rest ( butlast p))) false)))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5390347de4b0b51d73faae96"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 27, "code": "(fn palindrome [coll]\n    (if (< (count coll) 2)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (butlast coll)))\n        false\n        )\n      )\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 27, "code": "#(if (= (reverse (reverse %)) (reverse %))\n  true\n  false)", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 27, "code": "#(= (vec %1) (reverse %1))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 27, "code": "(fn [s]\n  (let [s (seq s)]\n    (= s (reverse s))))", "user": "52475451e4b05ef8e38e6362"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 27, "code": "#(= % \n    (if (string? %)\n      (clojure.string/reverse %)\n      (reverse %)))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 27, "code": "(fn palindrome-detector [x]\n  (= (seq x) (reverse x)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55f1a939e4b06e875b46ce33"}, {"problem": 27, "code": "#(= (reverse (vec %1)) (vec %1))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 27, "code": "(fn [[x & rst]] (cond \n\t(or (not x) (empty? rst)) true\n    (= x (last rst)) (recur (butlast rst))\n    :else false\n))", "user": "55f5625de4b06e875b46ce86"}, {"problem": 27, "code": "(fn palindrome [a]\n  (= (seq a) (reverse a)))", "user": "55a161d1e4b0acc240e31511"}, {"problem": 27, "code": "(fn [listing]\n  (= (seq listing) (reverse listing)))", "user": "54f36b36e4b050824f58f5c2"}, {"problem": 27, "code": "#(let [s (seq %)] (let [rs (reverse s)] (= s rs)))", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 27, "code": "(fn x [st] (= (seq st) (reverse st)))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55f27cfde4b06e875b46ce46"}, {"problem": 27, "code": "(fn [x]\n  (true?\n    (=\n     \t(apply str (reverse x))\n     \t(apply str x)\n     )\n    )\n  )", "user": "55a122d9e4b0acc240e3150a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55e5c852e4b050e68259b474"}, {"problem": 27, "code": "(fn sex [xx] \n  (let [len (count xx) begin (take len xx) end (reverse(take-last len xx))]\n    (= begin end)))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "55e59b67e4b050e68259b46f"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (loop [c coll r (empty coll)]\n    (if (empty? c)\n     r\n     (recur (rest c) (conj r (first c)))\n    )\n   )\n  )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "558ee1c9e4b0277789237659"}, {"problem": 27, "code": "(fn [col]\n  (let [rev (if (string? col)\n              (apply str (reverse col))\n              (reverse col))]\n    (= col rev)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 27, "code": "(fn[x] (if (= (type x) java.lang.String)\n         (= x (clojure.string/reverse x))\n         (= x (reverse x))))", "user": "55f6fafbe4b06e875b46cea1"}, {"problem": 27, "code": "(fn pali? [word]\n  (if (<= (count word) 1) \n    true\n    (let [s (first word)\n          e (last word)]\n      \n      (and (= s e) (pali? (butlast (rest word))))\n      )\n    )\n  \n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 27, "code": "#(loop [lst %]\n   (if (or (= (count lst) 0) (= (count lst) 1))\n     true\n     (if (not= (first lst) (last lst))\n       false\n       (recur (rest (reverse (rest lst)))))))", "user": "55f8f82be4b03cbcff9738bb"}, {"problem": 27, "code": "(fn [p] (= (into () p) (seq p)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 27, "code": "(fn [sq]\n  (let [sqr sq]\n    (if (string? sqr)\n      (= (apply str (into () sqr)) sq)\n      (= (reverse sqr) sq))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55f43228e4b06e875b46ce67"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55eb6352e4b0121d4835fdba"}, {"problem": 27, "code": "(fn  prob27 [col] \n  (let [s (seq col)]\n    (= s (reverse col))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s)\n     (reverse s)))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse (reverse x))) (apply str (reverse x))))", "user": "55f68360e4b06e875b46ce93"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55f7bd07e4b06e875b46ceaf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f7a03de4b06e875b46ceae"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 27, "code": "(fn is-palindrome [coll]\n  (let [cnt (count coll)\n        midpoint (/ cnt 2)\n        second-half (reverse (drop midpoint coll))\n        first-half (take (count second-half) coll)]\n    (= first-half second-half)))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 27, "code": "(fn [s]\n\t(= (into '() s)\n       (into '() (reverse s))))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse lst)))", "user": "55fb1c77e4b0f488688e065c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55f7856be4b06e875b46cead"}, {"problem": 27, "code": "(fn palindrome? [x] \n  (if (instance? java.lang.String x)\n    (= x (clojure.string/reverse x))\n    (= x (clojure.core/reverse   x))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 27, "code": "(fn [coll]\n  (let [reverse-coll (reverse coll)]\n    (every? true? (map = coll reverse-coll))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 27, "code": "#(= (->(vec %)(reverse)) (vec %))", "user": "55f1f45be4b06e875b46ce3d"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 27, "code": "(fn palindrome [list]\n  (letfn [(inner [base tmp]\n                 (cond\n                   (= (count base) (count tmp))\n                     (= base tmp)\n                   (= (count base) (inc (count tmp)))\n                     (= (rest base) tmp)\n                   :else (inner (rest base) (cons (first base) tmp))))]\n    (inner list [])))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 27, "code": "#(= (seq %1) (-> %1 seq reverse))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/reverse %) %) \n   (= (reverse %) %))", "user": "5410499de4b01498b1a719a6"}, {"problem": 27, "code": "#((fn[x] (= (reverse x) (reverse (reverse x)))) %)", "user": "55fda077e4b07755b13145fb"}, {"problem": 27, "code": "#(loop [s %]\n   (cond\n    (empty? s) true\n    (= (first s) (last s)) (recur (rest (drop-last s)))\n    :else false))", "user": "55fd9dffe4b07755b13145fa"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 27, "code": "(fn [t]\n  (= (seq t)\n     (reduce conj '() t)))", "user": "55ef2f27e4b066087aa94532"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "55e5f668e4b050e68259b47d"}, {"problem": 27, "code": "(fn [s] \n  (= (seq s) (reverse s)))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55b8e4b7e4b01b9910ae29bc"}, {"problem": 27, "code": "(fn f [xs]\n\t\t(if (empty? xs) \n          true\n           (let [rxs (reverse xs)]\n             (if (= (first xs) (first rxs))\n                   (f (butlast (rest xs)))\n                   false))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 27, "code": "(fn\n   [sequence]\n   (loop \n     [workSequence (seq sequence)]\n     (if (<= (count workSequence) 1)\n       true\n       (if (not= (first workSequence) (last workSequence))\n         false\n         (recur (rest (butlast workSequence)))))))", "user": "55f9b634e4b03cbcff9738c9"}, {"problem": 27, "code": "(fn f [coll]\n  (if (= (count coll) 1)\n     true\n     (if (= (first coll) (last coll))\n       (if (= (count coll) 2)\n         true\n         (f (next (butlast coll)))\n         )\n       false\n       )\n    )\n  )", "user": "55fea1a1e4b00f4cabc57657"}, {"problem": 27, "code": "(fn palindrome\n  [x]\n  (= (seq x) (reverse x)))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53bd7225e4b0d9a98559a6d2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560094a0e4b04bb52996e16b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ba34f4e4b047364c0444f2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "560039cce4b04bb52996e162"}, {"problem": 27, "code": "(fn [input] (let [rev (if (= (type input) java.lang.String) (apply str (reverse input))\n                        (reverse input))]\n              (= rev input)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "55c917a1e4b0e31453f649e9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))\n\n;(seq x) turns \"racecar\" into sequence of characters", "user": "55e01f4ee4b050e68259b406"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4fa436dce4b081705acca19b"}, {"problem": 27, "code": "(fn pal [sq]\n  (let [len (count sq)]\n  \t(cond\n\t\t(zero? len) true\n\t \t(= 1 len) true\n\t  \t:else (if (= (first sq) (last sq))\n    \t\t\t(pal (rest (butlast sq)))\n       \t\t\tfalse))))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 27, "code": "(comp (partial apply =) (juxt (partial apply list) reverse))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 27, "code": "(fn [list] (= (reverse (reverse list)) (reverse list)))", "user": "56014a5fe4b04bb52996e183"}, {"problem": 27, "code": "(fn [l] (letfn [(match [a b] (if (empty? b) false\n                               (or (= a b) (= a (rest b)) (match (cons (first b) a) (rest b)))))]\n          (match [] l)))", "user": "5600f8c7e4b04bb52996e176"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll)(seq coll)))", "user": "55f274b2e4b06e875b46ce44"}, {"problem": 27, "code": "#(loop [s %]\n   (if (empty? s)\n     true\n     (if (= (first s) (last s))\n       (recur (drop-last (rest s)))\n       false)))", "user": "56032173e4b04bb52996e1b3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 27, "code": "(fn [s] (=\n         (map-indexed (fn [idx itm] [idx itm]) s)\n         (map-indexed (fn [idx itm] [idx itm]) (reverse s))\n         ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 27, "code": "#(or\n   (= \n     (into [] (reverse (into [] %))) \n     (into [] %)\n     )\n   (= \n     % \n     (clojure.string/join (reverse %))\n     )\n   false\n   )", "user": "56035cb1e4b04bb52996e1ba"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5603d21de4b0c80df0ca264f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560368a6e4b04bb52996e1bb"}, {"problem": 27, "code": "(fn palindrome? [s] \n  (if (not (empty? s))\n  \t(if (= (first s) (last s))\n    \t(palindrome? (take -1 (rest s)))\n    \tfalse)\n    true))", "user": "5579d60ce4b05c286339e099"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 27, "code": "(fn pal [x] (if (= x '())\n         true\n         (if (= (first x) (last x))\n           (pal (rest (reverse (rest x))))\n           false)))", "user": "55ee894de4b0121d4835fdf1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 27, "code": ";;#(= % (vec (reverse %)))\n(fn [xs]\n  (loop [s xs]\n    (if (empty s)\n      (= (first s) (last s))\n      (recur (rest (butlast s))))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 27, "code": "(fn [col] (loop [a (first col) b (last col) r (-> col (rest) (reverse) (rest))] (if (or (nil? a) (nil? b)) true (if (= a b) (and true (recur (first r) (last r) (-> r (rest) (reverse) (rest))) ) false))))", "user": "56013467e4b04bb52996e17f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5604f954e4b08b23635d315d"}, {"problem": 27, "code": "#(= (rseq (vec %)) (vec %))", "user": "5605007ae4b08b23635d315e"}, {"problem": 27, "code": "#(if (instance? String %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 27, "code": "#(every? true? (take (/ 2 (count %)) (map = % (reverse %))))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56047160e4b0c80df0ca265d"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 27, "code": "(fn \n  [data]\n  (if (string? data)\n    (= data (apply str (reverse data)))\n    (= data (reverse data))))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 27, "code": "(fn [li] (= (reverse (into '() li)) (into '() li)))", "user": "56040b64e4b0c80df0ca2653"}, {"problem": 27, "code": "(fn\n  [a-seq]\n  (= (seq a-seq) (reverse a-seq)))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56050f06e4b08b23635d3161"}, {"problem": 27, "code": "(fn is_palindrome? [x]\n  (let [result (seq x)]\n    (if (= result (reverse result))\n      true\n      false)))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56050dd9e4b08b23635d3160"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs) true\n    (= xs (reverse xs))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 27, "code": "#(if (string? %) (= (reverse %) (map char %))\n   (= (reverse %) %))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 27, "code": "(fn palindrome[l]\n  (every?\n    true?\n    (map #(= (first %1) (second %1))\n      (map vector\n        (take (/ (count l) 2) l)\n        (take (/ (count l) 2) (reverse l))))))", "user": "56069006e4b08b23635d3174"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 27, "code": "(fn [pal] (= (seq pal) (reverse pal)))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 27, "code": "(fn p [s]\n  ((fn p-i? [s]\n     (= s (reverse s)))\n   (seq s)))", "user": "55216b7ee4b0882d96d09193"}, {"problem": 27, "code": "#(let [x (into [] %)]\n   (= x (reverse x)))", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56011393e4b04bb52996e178"}, {"problem": 27, "code": "(fn palindromic? [x] (= (seq x) (seq (reverse x))))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 27, "code": "#(= (apply str (reverse %1)) (apply str %1))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s)) \n      (palindrome? (rest (reverse (rest (reverse s)))))      \n      false\n    )\n  )\n)", "user": "5606d71ce4b08b23635d317a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5361d423e4b0243289761e49"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "560794bde4b08b23635d3182"}, {"problem": 27, "code": "(fn [pal] (= (reverse pal) (seq pal)))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 27, "code": "(fn palindrome [x] \n  (if (= (first x) (last x))\n    (if (< 2 (count x))\n      true\n      (palindrome (butlast (rest x))))\n    false\n    )\n  )", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e274b4e4b050e68259b436"}, {"problem": 27, "code": "(fn [x] (if (string? x) \n          (= (apply str (reverse x)) x)\n          (= (reverse x) x)))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56081222e4b046a4fc0ac004"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "560768a0e4b08b23635d317f"}, {"problem": 27, "code": "(fn palindrome [coll] (= (seq coll) (reverse coll)))", "user": "560aa7b0e4b05f002753df02"}, {"problem": 27, "code": "#(loop [s (vec %)]\n   (if (= [] s)\n     true\n   \t(if-not (= (first s) (last s))\n     \tfalse\n     \t(recur (rest (butlast s))))))", "user": "560ac5cae4b05f002753df09"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "560a7b46e4b05f002753defb"}, {"problem": 27, "code": "(fn palindrome? [s]\n     (= (seq s) (reverse s)))", "user": "524ea587e4b0541d1855b7e9"}, {"problem": 27, "code": "(fn [l]\n  (if (nil? (next l)) true\n    (if (= (first l) (last l)) (recur  (drop-last (drop 1 l))) false)))", "user": "56051095e4b08b23635d3162"}, {"problem": 27, "code": "(fn [lst]\n  (if (string? lst)\n    (do\n      (if (= lst (apply str (reverse lst)))\n        true\n        false))\n    (if (= lst (reverse lst))\n      true\n      false)))", "user": "560a7775e4b05f002753defa"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "560b8741e4b05f002753df1d"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51d2ca6fe4b099f3b6acddf0"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 27, "code": "(fn check-reverse [coll]\n  (if (string? coll)\n    (= (clojure.string/reverse coll) coll)\n    (= (reverse coll) coll)))", "user": "5606ab32e4b08b23635d3176"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (clojure.string/reverse s))\n    (= s (reverse s))))", "user": "560c2e7ce4b05f002753df2b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560959c0e4b0053d1b86c7dc"}, {"problem": 27, "code": "#(let [x (into [] %)] (= x (reverse x)))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560d2a2be4b05f002753df35"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "560ac488e4b05f002753df08"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (let [s (vec xs)]\n    (cond\n     (or (empty? xs) (= 1 (count xs))) true\n     (= (first s) (last s)) (palindrome? (subvec s 1 (dec(count s))))\n     :else false)))", "user": "560ae540e4b05f002753df0d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "560d491ae4b05f002753df3b"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "560e685be4b05f002753df4e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "560d2b53e4b05f002753df37"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 27, "code": ";(fn [coll]\n;  (= (reduce conj [] coll)\n;     (reverse coll)))\n\n#(= (seq %) (reverse %))", "user": "560dfa8de4b05f002753df46"}, {"problem": 27, "code": "(fn is-palandrome? [l]\n  (let [or (seq l)\n        cp (reverse l)]\n    (= cp or)))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 27, "code": "(fn thingie [coll_in]\n  (let [coll (seq coll_in)] \n   (cond\n    (= (count coll) 0) true\n    (= (count coll) 1) true\n    (not= (first coll) (last coll)) false\n    :else (thingie (butlast (rest coll))))))", "user": "560fe558e4b05f002753df63"}, {"problem": 27, "code": "(fn pal [x] (if (empty? x) true (if (= (first x) (last x)) (pal (->> x (drop-last 1) (drop 1))) false)))", "user": "560ff632e4b05f002753df66"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560ff209e4b05f002753df65"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "560e9a2de4b05f002753df52"}, {"problem": 27, "code": "(fn [p] (= (seq p) (reverse p)))", "user": "561047eae4b05f002753df6d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561039e0e4b05f002753df6c"}, {"problem": 27, "code": "(fn [x] \n  (= (reverse (reverse x)) (reverse x) )\n  )", "user": "560d4994e4b05f002753df3c"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= (reverse s) s)))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 27, "code": "(fn [s] \n  (= (if (string? s) (apply str (reverse s)) (reverse s)) s) \n  )", "user": "560c404fe4b05f002753df30"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "55ad1221e4b03311e7b7329d"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "55dedb0de4b050e68259b3e8"}, {"problem": 27, "code": "(fn p? [s] (if (string? s) (p? (vec s)) (= s (reverse s))))", "user": "561223e5e4b05f002753df8b"}, {"problem": 27, "code": "#( = (reverse %) (seq %))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "560b483ee4b05f002753df16"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 27, "code": "(fn [sequen]\n  (loop [remainder sequen]\n    (if (> 2 (count remainder))\n      true\n      (if-not (= (first remainder) (last remainder))\n        false\n        (recur (rest (reverse (rest remainder))))))))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll]\n    (cond (< (count c) 2) true\n          (not= (first c) (last c)) false\n          :else (recur (rest (drop-last c))))))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %))\n\t\ttrue\n\t\tfalse)", "user": "55796743e4b05c286339e095"}, {"problem": 27, "code": "(fn [col]\n  (= (seq col) (reverse (seq col))))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 27, "code": "(fn [x] (empty? (filter (fn [l] (not (= (first l) (second l))))\n                    (map rest (take (count x) (drop 1 (iterate (fn [y]\n                                                                   (let [p (first y)]\n                                                                     [(inc p)\n                                                                      (nth x p)\n                                                                      (nth x (- (count x) (+ p 1)))]))\n                                                                 [0 \"x\" \"x\"])))))))", "user": "56128c54e4b05f002753df93"}, {"problem": 27, "code": ";; (defn is-palindrome? [coll] (= (seq coll) (reduce conj () coll)))\n#(= (seq %) (reduce conj () %))", "user": "56014f55e4b04bb52996e184"}, {"problem": 27, "code": "(fn [s]\n  (if (= () (rest s))\n    true\n    (if (= (first s) (last s))\n      (recur (butlast (rest s)))\n      false)))", "user": "55c0a40be4b01b9910ae2a26"}, {"problem": 27, "code": "(fn p [x] (= (reverse x) (seq x)))", "user": "560a8ccde4b05f002753defc"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 27, "code": "(fn [l]\n  (let [rev (reverse l)]\n  \t(loop [one l\n           two rev]\n      (cond \n       (empty? one) true\n       (= (first one) (first two)) (recur (rest one) (rest two))\n       :else false))))", "user": "56156feee4b05f002753dfc5"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55efdc97e4b066087aa94542"}, {"problem": 27, "code": "(fn [x] (= (seq x)(reverse x)))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 27, "code": "(fn checker [x]\n  ( = x (if (string? x)\n    (clojure.string/reverse x)\n    (reverse x))))", "user": "560d7863e4b05f002753df40"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 27, "code": "(fn [s] (= (vec s) (reverse (vec s))))", "user": "56157190e4b05f002753dfc6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5614847ae4b05f002753dfb7"}, {"problem": 27, "code": "(fn palindromer\n\t[coll] \n\t(let [halfway (int (Math/ceil (/ (count coll) 2)))]\n\t\t(= (take halfway (reverse coll)) (take halfway coll))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)] (= s (reverse s))))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 27, "code": "(fn pal [l]\n  (if (<= (count l) 1)\n    true\n    (if (not= (first l) (last l))\n      false\n      (pal (butlast (rest l))))))", "user": "56039a9de4b04bb52996e1bf"}, {"problem": 27, "code": "(fn [subject](= \n              (seq subject)\n              (reverse subject)\n              ))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 27, "code": "(fn [col] (= 0 (count (filter false? (map (fn [x y] (= x y)) col (reverse col))))))", "user": "551e312ce4b030e6a24d00e5"}, {"problem": 27, "code": "(fn check [col]\n(if (< (count col) 3)\n  true\n  (if (= (first col)(last col))\n   (check (butlast (rest col)))\n    false\n    )\n  )\n  )", "user": "56153b39e4b05f002753dfc4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 27, "code": "(fn is_palindrome [y]\n  (if (>= 1 (count y))\n    true\n    (if (= (first y) (last y))\n      (is_palindrome (drop 1 (drop-last y)))\n      false\n    )\n  )\n)", "user": "56152a26e4b05f002753dfc1"}, {"problem": 27, "code": "(fn pal [x]\n  (let [s (seq x)\n        fir (first s)\n        las (last s)]\n    (println (apply str x))\n    (if (empty? s) \n      true\n      (if (= fir las)\n        (pal (rest (drop-last s)))\n        false))))", "user": "53c6dcf9e4b00fb29b2212a3"}, {"problem": 27, "code": "(fn [input]\n  (every? true? (map = (reverse input) input)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 27, "code": "(comp (partial apply =)\n      (juxt seq reverse))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 27, "code": "(fn [pal]\n  (loop [f (first pal)\n         l (last pal)\n         re (next (drop-last pal))\n         result true]\n    (if (nil? re)\n      (and result (= f l))\n      (recur (first re) (last re) (next (drop-last re)) (and result (= f l))))))", "user": "520e6d77e4b0101e4be6fcd5"}, {"problem": 27, "code": "#(let [x (seq %)]\n    (= x (reverse x)))\n\n;#(= (reverse %) (seq %))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 27, "code": "#(cond (string? %) (= % (apply str (reverse %)))\n        :else (= % (reverse %)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 27, "code": "#(= % (if (string? %) \n                   (clojure.string/join (reverse %))\n                   (reverse %)))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5619cd91e4b053970a773aff"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "55dfe72ee4b050e68259b400"}, {"problem": 27, "code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 27, "code": "(fn [string] (= (seq string) (seq (reverse string))))", "user": "561a9e3be4b053970a773b09"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "560b6895e4b05f002753df1a"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "561b04e8e4b053970a773b0f"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 27, "code": "(fn [xs] (= (vec xs) (vec (reverse xs))))", "user": "55e3924ae4b050e68259b445"}, {"problem": 27, "code": "(fn [s]\n  (= (into [] s) (reverse s))\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e64c1ee4b050e68259b486"}, {"problem": 27, "code": "(fn palindrome\n    ([v]\n     (if (= (count v) 1) true\n     (let [rest (drop 1 (take (dec (count v)) v)) a (first v) b (last v)]\n         (cond \n             (or (not a) (not b)) true\n             (= a b) (palindrome rest)             \n             :else false\n             )\n         )\n    )))", "user": "561a4c60e4b053970a773b06"}, {"problem": 27, "code": "(fn [s]\n  (if (instance? String s)\n    (if (= (clojure.string/reverse s) s)\n      true\n      false)\n    (if (= (reverse s) s)\n      true\n      false)))", "user": "55f3bb12e4b06e875b46ce64"}, {"problem": 27, "code": "(fn [mylist]\n  (= (seq mylist) (reverse mylist)))", "user": "56197b47e4b053970a773af8"}, {"problem": 27, "code": "(fn[x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 27, "code": "(fn [coll] (if\n            (= (reverse coll) (seq coll)) true false))", "user": "56182af3e4b06b1bb2182a1b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561a060ee4b053970a773b01"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "55fc838be4b0f488688e0674"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5617c13de4b06b1bb2182a15"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [reversed (reverse coll)]\n    (= (seq coll) reversed)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 27, "code": "(fn [item]\n  (= (reverse (vec item))\n     (vec item)))", "user": "537cb3ade4b06839e8705e7d"}, {"problem": 27, "code": "(fn [x] (= x (let [s (reverse x)] (if (string? x) (apply str s) s))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 27, "code": "(fn [coll]\n  (if (= String (class coll))\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "55b5fc18e4b01b9910ae298d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561ea5cae4b064ca9f4b16c4"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "561e9e67e4b064ca9f4b16c2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 27, "code": "(fn [my-seq]\n  (= (seq my-seq) (reverse my-seq)))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 27, "code": "(fn [input]\n  (= (reverse input) (seq input)))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56119b53e4b05f002753df81"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 27, "code": "(fn [y] (let [sy (seq y)] (= sy (reverse sy))))", "user": "56019662e4b04bb52996e190"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e1029ae4b050e68259b418"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 27, "code": "(fn pal [x] (if (seq x) (and (= (first x) (last x)) (pal (rest (butlast x)))) true))", "user": "561fc0cee4b064ca9f4b16d1"}, {"problem": 27, "code": "#(= (reverse %) (map (fn [x] x) %))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 27, "code": "#(= (into () %) (into [] %))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 27, "code": "(fn [lst]\n  (if (even? (count lst))\n    (= (take (/ (count lst) 2) lst)\n       (reverse (take-last (/ (count lst) 2) lst)))\n    (= (take (quot (count lst) 2) lst)\n       (reverse (take-last (quot (count lst) 2) lst)))))", "user": "561a9380e4b053970a773b07"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 27, "code": "(fn [x]\n    (if (string? x)\n     (= x (apply str (reverse x)))\n     (= x (reverse x))))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 27, "code": "#(= (seq %)(seq (reverse %)))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56202553e4b064ca9f4b16dd"}, {"problem": 27, "code": "(fn [s]\n  (every? true? (map = s (reverse s))))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5600dccee4b04bb52996e175"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 27, "code": "(fn [x] (=  (seq x) (reverse x)))", "user": "562449dee4b0b951f963fc21"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "user": "55f1c4b4e4b06e875b46ce35"}, {"problem": 27, "code": "#(let [reversex (rseq (into [] %1) )] (= reversex (into [] %1) ))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "562473ece4b0b951f963fc25"}, {"problem": 27, "code": "(fn my-pali? [v]\n  (condp = (count v)\n    1 true\n    0 true\n    (and (= (first v) (last v))\n               (my-pali? (butlast (next v))))))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 27, "code": "(fn pal [l]\n  (if (< (count l) 2) \n    true\n    (if (= (first l) (last l))\n    \t(pal (rest (drop-last l)))\n      \tfalse\n      )\n    )\n  )", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 27, "code": "#(let [r (into '() %)] (= r (into '() r)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 27, "code": "#(loop [col %, cnt 0]\n  (if (>= cnt (/ (count col) 2))\n    true\n    (and (= (nth col cnt)\n            (nth col (- (count col)\n                        (+ 1 cnt))))\n         (recur col (+ cnt 1)))))", "user": "56263f3fe4b00e49c7cb47bc"}, {"problem": 27, "code": "(fn[sq] (= (reverse (reverse sq)) (reverse sq)))", "user": "55f9d870e4b03cbcff9738cc"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "536829c8e4b0243289761e8b"}, {"problem": 27, "code": "#(= (reverse %) (seq %) )", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 27, "code": "(fn rev [lst]  \n  (if (empty? lst) \n    true\n    (let [x (first lst), y (last lst)]\n      (if (= x y) (rev (rest (butlast lst))) false))))", "user": "5624b34be4b00a550fc90286"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5624b2aee4b00a550fc90285"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 27, "code": "(fn[x] (= (reverse (reverse x)) (reverse x)))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 27, "code": "(fn [palin]\n  (let [\n     drome (seq palin)\n     len (count drome)\n     sublen (quot len 2)\n     part1 (take sublen drome)\n     part2 (reverse \n      (nthrest drome\n       (+ sublen (if (even? len)\n                      0 1))))    \n    ]\n   (= part1 part2)))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 27, "code": "#(= (reverse %) (reverse(reverse %)))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "55f85e85e4b03cbcff9738af"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "562ae733e4b00e49c7cb4836"}, {"problem": 27, "code": "(fn pal [xs] (if (<= (count xs) 1)true(if (= (first xs) (last xs))(pal (rest (butlast xs)))false)))", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 27, "code": "(fn [coll] (= (filter (constantly true) coll) (reverse coll)))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 27, "code": "#( = (seq %) (reverse %))", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 27, "code": "(fn [xs] \n  (= (seq xs)\n     (reverse xs)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 27, "code": "(fn isPalindrome? [n]\n  (= (vec n) (reverse n)))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "562c0e2ae4b058fa18c5a6d4"}, {"problem": 27, "code": "(fn [x] (if (= (seq x) (into () x)) true false))", "user": "520a6aace4b01da9d47a99d9"}, {"problem": 27, "code": "#(= (reverse %) (map identity %))", "user": "56272be6e4b00e49c7cb47c9"}, {"problem": 27, "code": "(fn [c] (=\n         (reduce conj () (seq c))\n         (seq c)\n         )\n  )", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 27, "code": "(fn pl [c] (= (reverse (reverse c)) (reverse c)))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 27, "code": "(fn [x]\n  (if (= (seq x) (reverse (seq x)))\n    true\n    false))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5628a121e4b00e49c7cb47ed"}, {"problem": 27, "code": "#(= (-> % reverse) (-> % reverse reverse))", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 27, "code": "#(= (apply conj [] %) (apply conj '() %)) ; without reverse", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 27, "code": "(fn [coll]\n  (cond\n   (<= (count coll) 1) true\n   (not= (first coll) (last coll)) false\n   :else (recur (-> coll next butlast))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5619b22ee4b053970a773afe"}, {"problem": 27, "code": "(fn pal* [coll]\n  (= (seq coll) (reverse coll)))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 27, "code": "(fn [c]\n  (every? true? (for [i (range (count c))\n                   :let [j (- (count c) 1 i)]\n                   :when (> j i)]\n               (= (nth c i) (nth c j)))))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "562e871ee4b0ab312c17ebba"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "562e2c5ce4b0a45d2ff83024"}, {"problem": 27, "code": "(fn [s] \n  (let [half-length (int (/ (count s) 2))]\n    (= (take half-length s)\n       (reverse (take-last half-length s)))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 27, "code": "(fn [lst]\n  (= (into [] lst)\n     (loop [new-list []\n            iteration (count lst)]\n       (if (= iteration 0)\n         new-list\n         (recur (conj new-list (nth (into [] lst) (dec iteration)))\n                (dec iteration))))))", "user": "562528d4e4b00a550fc90292"}, {"problem": 27, "code": "(fn [arr] \n  (if (coll? arr)\n \t(= arr (reverse arr))\n\ttrue\n  )\n)", "user": "562d6385e4b0a45d2ff8301b"}, {"problem": 27, "code": "#(->> %1\n       (interleave (reverse %1))\n       (partition 2)\n       (map (fn [pair] (= (first pair) (second pair))))\n       (reduce (fn [acc x] x) true))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 27, "code": "#(let [coll (seq %)]\n   (= coll\n      ((fn [coll]\n  (loop [o (seq coll)\n         c (count coll) \n         n 0 \n         l (empty coll)]\n    (if (== n c)\n      l\n      (recur o c (inc n) (cons (nth o n) l))))) coll)))", "user": "561a1af6e4b053970a773b02"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5630a51de4b0bfe05bf11781"}, {"problem": 27, "code": "(fn pldr [x] (if (<= (count x) 1)\n    true\n    (and\n      (= (first x) (last x))\n      (pldr (butlast (rest x))))))", "user": "544285dde4b032a45b869380"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "561a2940e4b053970a773b04"}, {"problem": 27, "code": "(fn\n  [collection]\n  (= (reverse collection) (seq collection)))", "user": "562f9f5ae4b0ab312c17ebce"}, {"problem": 27, "code": "#(= (reverse (reverse %))(reverse %))", "user": "562e9f5fe4b0ab312c17ebbd"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562117b4e4b064ca9f4b16ed"}, {"problem": 27, "code": "(fn [ob]\n            (let [len (count ob)]\n              (loop [leftIndex 0 rightIndex (- len 1)]\n                (cond\n                  (> leftIndex rightIndex) true\n                  (not= (nth ob leftIndex) (nth ob rightIndex)) false\n                  :else (recur (+ leftIndex 1) (- rightIndex 1))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 27, "code": "(fn [v] (= (reduce (fn [a b] (cons b a)) [] v) (seq v)))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 27, "code": "(fn [seq] (= (reverse seq) (vec seq)))", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 27, "code": "(fn [x] (= x ((if (string? x) clojure.string/reverse reverse) x)))", "user": "562bb236e4b058fa18c5a6ce"}, {"problem": 27, "code": "(fn [str]\n  (let [char-vector (map identity str)]\n    (= char-vector (reverse char-vector))\n    ))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)) )", "user": "56306e6ce4b073c1cf7a9be7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5632365ce4b0bfe05bf1179d"}, {"problem": 27, "code": "(fn  \n  [palindrome]\n   (loop [l palindrome]\n    (if (<= (count l) 1)\n      true\n      (if (= (first l) (last l))\n        (recur (->> l (drop 1) (drop-last)))\n        false))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 27, "code": "(fn ispal [x]\n\n   (if (= (type x) java.lang.String)\n     (= x (apply str (reverse x)))\n     (let [y (reverse x)]\n\n       (= x y)\n\n       )\n     )\n  )", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (= (class x) java.lang.String)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))", "user": "5619a388e4b053970a773afc"}, {"problem": 27, "code": "(fn ispal [x] (= (seq x) (reverse x)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5633e653e4b0bfe05bf117b7"}, {"problem": 27, "code": "(fn p [word]\n  (if (< (count word) 2) \n    true\n    (and \n     (= (first word) (last word))\n     (p (butlast (rest word))))))", "user": "55e357dae4b050e68259b442"}, {"problem": 27, "code": "#(let [x %] (if (=(apply str (reverse x)) (apply str x)) true false))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5537c5b3e4b09218d5f44fd1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 27, "code": "(fn [xst]\n  (let [xs (seq xst)]\n    (println xs)\n  \t(loop [x xs]\n      (if (= (count x) 0) (= true true)\n           (if (or (not= (first x) (last x))) (= true false)\n              (recur (rest (drop-last x))))))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 27, "code": "(fn [xs]\n  (= (reverse xs) (seq xs)))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 27, "code": "#(= %1 (if (string? %1) \n         (apply str (reverse %1))\n         (reverse %1)))", "user": "55729a78e4b09a3098a52547"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56188848e4b053970a773aea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562d1e36e4b0a45d2ff8301a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 27, "code": "(fn ispali [s]\n  (if\n    (< (count s) 2)\n    true\n    (and\n     (ispali (rest (reverse (rest (reverse s)))))\n     (= (first s) (first (reverse s)))\n    )\n  )\n)", "user": "563758e3e4b0bfe05bf117d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 27, "code": "; reverse draait een sequence om https://clojuredocs.org/clojure.core/reverse\n#(= (seq %) (reverse (seq %)))\n;#(= (seq %) (reverse (seq %)))", "user": "5637bd38e4b0bfe05bf117de"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 27, "code": "#(= (seq %) (reverse %)\n   )", "user": "54494159e4b032a45b8693d1"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "56319455e4b0bfe05bf11795"}, {"problem": 27, "code": "(fn [coll] \n  (or \n   (empty? coll)\n   (and \n    \t(= (first coll) (last coll))\n    \t(-> coll (rest) (reverse) (rest) (recur)))))", "user": "5637e73fe4b0bfe05bf117e0"}, {"problem": 27, "code": "(fn [sth]\n  (if(string? sth)\n    (= sth (apply str (reverse sth)))\n  \t(= sth (reverse sth))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 27, "code": "#(= (reverse (reverse %) ) (reverse %))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562f45e6e4b0ab312c17ebc8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 27, "code": "(fn [c] (if (< (count c) 2) true (if (= (first c) (last c)) (recur (butlast (rest c))) false)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 27, "code": "(fn pal [i sq] \n  (let [y (- (count sq) (inc i))]\n  (if (>= i y)\n   true\n   (if (= (nth sq i) (nth sq y))\n     (pal (inc i) sq)\n     false)\n   )))\n0", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 27, "code": "#(let [c (Math/ceil (/ (count %) 2))] (= (take c %) (take c (reverse %))))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 27, "code": "(fn [l] (= (reverse (reverse l)) (reverse l)))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 27, "code": "(fn [col] (every? #(true? %) (map #(= %1 %2) col (reverse col))))", "user": "56252effe4b00a550fc90294"}, {"problem": 27, "code": "(fn [xs] (if (instance? String xs) (= (apply str (reverse xs)) xs) (= (reverse xs) xs)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5638f61ce4b0bfe05bf117ed"}, {"problem": 27, "code": "(fn  [coll]\n  (let [mod (/ (count coll) 2)]\n    (= (take mod coll) (reverse (take-last mod coll))))\n   )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53abed65e4b047364c044455"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 27, "code": "(fn palindrome [s]\n  (cond \n   (empty? s) true\n   (= (list* s) (reverse s)) true\n   :else false))", "user": "563b236ce4b0bfe05bf1180b"}, {"problem": 27, "code": "(fn [l] \n  (= (seq l) (reverse l))\n  )", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 27, "code": "(fn pal [x] (= (seq (reverse x)) (seq x)))", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 27, "code": "(fn pal [x]\n  ;; Base Case: First and last characters do not match (FALSE)\n  (cond\n   \t(not= (first x) (last x)) false\n \n  ;; Base Case: Blank (empty sequence) (TRUE)\n  \t(empty? x) true\n  ;; Base Case: Single element (TRUE)\n     (= (count x) 1) true\n  ;; Recursive Case: Else\n  \t:else (pal (rest (butlast x)))\n  ))", "user": "563aa090e4b0bfe05bf11801"}, {"problem": 27, "code": "#(let [n (quot (count %) 2)]\n   (= (take n %) (reverse (take-last n %))))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 27, "code": "#(= (->> % reverse) (->> % reverse reverse))", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 27, "code": "(fn [col]\n  (= (seq col)\n     (reverse col)))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 27, "code": "#(= (vec %1) (rseq (vec %1)))", "user": "563ce002e4b0bfe05bf11841"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (loop [coll coll rev nil] (if (empty? coll) rev (recur (rest coll) (conj rev (first coll)))))))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 27, "code": "(fn if-palindrome [l]\n  (if (<= (count l) 1)\n    true\n    (if (= (first l) (last l))\n    (if-palindrome (rest (drop-last l)))\n    false)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563e3c43e4b0da801c4e4669"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "563d4600e4b0bfe05bf1184c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "52179e00e4b0ea2f1c31c8d3"}, {"problem": 27, "code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563ebc00e4b08d4f616f5eca"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 27, "code": "(fn palin? [n]\n   (= (seq n) (reverse n)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 27, "code": "(fn [x] (= (seq (reverse x)) (seq x)))", "user": "563e022be4b0da801c4e4664"}, {"problem": 27, "code": "(fn palindrome [li] \n  (if (or (empty? li) (= (count li) 1))\n    true\n  (and (= (first li) (last li)) (palindrome (drop-last (rest li))))\n  )\n)", "user": "551c02fbe4b07993ea3788d8"}, {"problem": 27, "code": "#(if (some false? (map = (reverse %) %))\n   false\n   true)", "user": "53bbae20e4b047364c044509"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "562c0787e4b058fa18c5a6d3"}, {"problem": 27, "code": "(fn [original] (= (seq original) (reverse (seq original))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53c7da9ce4b00fb29b2212ad"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 27, "code": "(fn [x] \n  (= (map #(list %) x) \n     (reverse (map #(list %) x))))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 27, "code": "(fn [x]\n\t(loop [col x]\n      (if (< (count col) 2)\n        true\n        (and (= (first col) (last col)) (recur (rest (drop-last 1 col)) ))\n      )\n    )\n      \n)", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 27, "code": "(fn [r] (= (seq r) (reverse r)))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 27, "code": "#(= (reverse (seq %))(seq %))", "user": "564302b5e4b08d4f616f5f21"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "532c4ffce4b09d4e7a9b5540"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56436194e4b0018b46ad8bf2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5642e2e3e4b08d4f616f5f1d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54fe5523e4b07d26eda61d41"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564452d1e4b0018b46ad8c0d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 27, "code": "#(if (= java.lang.String (class %))\n      (= % (apply str(reverse %)))\n      (= % (reverse %)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 27, "code": "(fn [coll] (if (coll? coll)\n              (= coll (reverse coll))\n               (= coll (apply str (reverse coll)))\n             ))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 27, "code": "(fn is_palindrome\n    ([s]\n        (is_palindrome s 0 (- (count s) 1)))\n    ([s f l]\n        (if (or (= f l) (< l f))\n            true\n            (if (= (nth s f) (nth s l))\n                (is_palindrome s (+ f 1) (- l 1))\n                false))))", "user": "56058d64e4b08b23635d3169"}, {"problem": 27, "code": "(fn [sequence] (reduce #(and %1 %2) (map #(= (% 0) (% 1)) (zipmap sequence (reverse sequence)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 27, "code": "(fn\n  [x]\n  (= x (if (= java.lang.String (class x))\n    (clojure.string/join (reverse x))\n    (reverse x))))", "user": "56451201e4b0284900eef600"}, {"problem": 27, "code": "#(loop [s %]\n    (cond \n     (<= (count s) 1) true\n     (= (first s) (last s)) (recur (butlast (rest s)))\n     :else false))", "user": "5600591de4b04bb52996e166"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563d1648e4b0bfe05bf11846"}, {"problem": 27, "code": "(fn [c] (every? true? (map #(apply = %) (map vector c (reverse c)))))", "user": "563249dee4b0bfe05bf1179f"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 27, "code": "(fn [lst]\n  (let [n (count lst)\n        l (take (quot n 2) lst)\n        r (drop (- n (quot n 2)) lst)]\n    (= l (reverse r))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "50738138e4b054001656acc9"}, {"problem": 27, "code": "(fn palinCheck [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (palinCheck (rest (butlast x)))\n   :else false))", "user": "55b738cfe4b01b9910ae29a1"}, {"problem": 27, "code": "#(every? (fn [[a b]] (= a b)) (partition 2 (interleave %1 (reverse %1))))", "user": "56466fb1e4b0284900eef613"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564583f0e4b0284900eef607"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "563871ede4b0bfe05bf117e5"}, {"problem": 27, "code": "(fn palindrome? [s] \n    (if (string? s)\n        (= s (clojure.string/reverse s)) \n        (= s (reverse s) )\n    )   \n)", "user": "564633a1e4b0284900eef60f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse\n                    x)))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52725fa4e4b03e8d9a4a742b"}, {"problem": 27, "code": "(fn [x] (= x (cond (string? x) (clojure.string/reverse x) :else (reverse x))))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 27, "code": "(fn [col] (cond (not= (first col) (last col)) false\n                         (<= (count col) 3) true\n                         :else (recur (rest (butlast col)))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 27, "code": "#(let\n   [s (/ (count %) 2)\n    l (take s %)\n    r (take s (reverse %))]\n   (= l r))", "user": "5647dc44e4b0284900eef624"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5647ffdae4b0284900eef626"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55577fcce4b0deb715856e24"}, {"problem": 27, "code": "#(let[coll (into [] %)] (= (reverse coll) coll))", "user": "51671557e4b013fc800656c4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "545a2da7e4b01be26fd74634"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 27, "code": "#(if (string? %) true (= (reverse %) %))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 27, "code": "(fn pa [lst]\n  (if (or (empty? lst) (nil? lst))\n    true\n    (and (= (first lst) (last lst))\n         (pa (drop 1 (drop-last lst))))))", "user": "5649542fe4b0284900eef63f"}, {"problem": 27, "code": "(fn palin [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n      false\n      )\n    )\n  )", "user": "564716e6e4b0284900eef616"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s) )))", "user": "5649615be4b0284900eef641"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56472ff8e4b0284900eef618"}, {"problem": 27, "code": "(fn pd [x] (loop [x-seq (seq x) rev '() rem x] (cond (empty? rem) (if (= rev x-seq) true false)\n                                       :else (recur x-seq (cons (first rem) rev) (rest rem)))))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55ba4a78e4b01b9910ae29cf"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5631040be4b0bfe05bf1178c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56488119e4b0284900eef632"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse(seq x))))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 27, "code": ";; ouch. so concise.\n\n;; #(= (seq %) (reverse %))\n\n(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5646276de4b0284900eef60e"}, {"problem": 27, "code": "#(= (seq %) (into () %))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 27, "code": "(fn pal [a-seq] (if (<= (count a-seq) 1) true \n                           (if (= (first a-seq) (last a-seq)) \n                             (pal (butlast (rest a-seq)))\n                           false)\n                           ))", "user": "5640803be4b08d4f616f5ee6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564b3730e4b0284900eef665"}, {"problem": 27, "code": "#(every? true? \n         (loop [result [] x (reverse %) y (seq %)]\n           (if (and (empty? x) (empty? y))\n             result\n             (recur (conj result (= x y)) (rest x) (rest y)))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "564652b1e4b0284900eef611"}, {"problem": 27, "code": "#(let [v (vec %)\n       r (reverse v)]\n   (= v r)\n   )", "user": "564c7501e4b0284900eef671"}, {"problem": 27, "code": "(fn [s]\n  (let [r (reverse s)]\n    (= s (if (string? s) (apply str r)\n           r))))", "user": "564b495de4b0284900eef667"}, {"problem": 27, "code": "(fn [s] (let [c (count s) half (quot c 2)] (= (take half s) (take half (reverse s)))))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "564a560ae4b0284900eef654"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 27, "code": "#(or \n  (= %1 (reverse %1))\n  (= %1 (apply str (reverse %1))))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 27, "code": "(fn [x]                                                           \n  (= (reverse (reverse x)) (reverse x)))", "user": "564cc055e4b0284900eef676"}, {"problem": 27, "code": "(fn [s] \n  (if (<= (count s) 1) \n    true (and \n          (= (first s) (last s)) \n          (recur (drop 1 (drop-last s)))\n          )\n    )\n  )", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 27, "code": "(fn [x]\n  (let [a x b (reverse x) l (count x)]\n    (= \n     (map (partial nth a) (range l))\n    (map (partial nth b) (range l))))\n    )", "user": "562108d0e4b064ca9f4b16e9"}, {"problem": 27, "code": "(fn [x]\n   (letfn [(ends-same? [coll] (= (first coll) (last coll)))\n           (get-middle [coll] (-> coll (rest) (reverse) (rest)))]\n   (loop [tmp-x x]\n     (if (not (ends-same? tmp-x))\n       false\n       (if (<= (count tmp-x) 1)\n         true\n         (recur (get-middle tmp-x)))))))", "user": "552281cae4b0882d96d0919f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "564a5a09e4b0284900eef656"}, {"problem": 27, "code": "(fn [coll] (let [thisvec (vec coll)]\n             (if (< (count thisvec) 2)\n               true\n               (if (= (first thisvec) (last thisvec))\n                 (recur (subvec thisvec 1 (dec (count thisvec))))\n                 false))))", "user": "564e1bbbe4b0284900eef696"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "564eef5ee4b0284900eef6a3"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "564da567e4b0284900eef682"}, {"problem": 27, "code": "#( = (reverse (seq %)) (seq %))", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56448dc1e4b0284900eef5f6"}, {"problem": 27, "code": "(fn [coll] (let [s (seq coll)] (= s (reverse s))))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 27, "code": "(fn [col] \n  (= (seq col) (reverse col)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 27, "code": "(fn [thing]\n  (let [things (seq thing)]\n  (= things (reverse things))) )", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 27, "code": "#(= %\n    (if (string? %)\n      (clojure.string/reverse %)\n      (reverse %)))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 27, "code": "(fn palindrom? [s]\n  (let [half-size (quot (count s) 2)\n        first-half (take half-size s)\n        second-half (take half-size (reverse s))]\n    (= first-half second-half)\n    )\n  )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 27, "code": "(fn [x] (let [r (reverse x)] (or (= x r) (= x (apply str r)))))", "user": "56487cf2e4b0284900eef631"}, {"problem": 27, "code": "(fn [xs] (= (reverse (seq xs)) (seq xs)))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 27, "code": "(fn [coll]\n\t(loop [[x & xrest] coll]\n\t\t(if (seq xrest)\n\t\t\t(and (= x (last xrest)) \n\t\t\t\t (recur (take (dec (count xrest)) xrest)))\n\t\t\ttrue)))", "user": "564d02cde4b0284900eef679"}, {"problem": 27, "code": "(fn [coll]\n  (let [reverse-coll (reverse coll)\n        n (count coll)]\n    (every? identity \n            (map #(= (nth coll %) (nth reverse-coll %))\n                 (range (/ (dec n) 2)))\n             )))", "user": "56430277e4b08d4f616f5f20"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "56503c4ee4b0284900eef6bb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "564faadce4b0284900eef6b2"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 27, "code": "(fn [x] (let [y (reverse (seq x))]  (= (seq x) y)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 27, "code": "#(loop [a % b (reverse %)] (and (= (first a) (first b))\n                                (or (nil? (seq a))\n                                    (recur (next a) (next b)))))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reduce conj '() s)))", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 27, "code": "(fn [coll]\n  \t(= (clojure.string/join (reverse coll)) (clojure.string/join coll)))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (into () (seq x))))", "user": "564d936ee4b0284900eef681"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 27, "code": "(fn [input] \n  (let [i (seq input)]\n  \t(= i (reverse i))))", "user": "4ec7e048535d6d7199dd36ea"}, {"problem": 27, "code": "(fn [coll] \n  (= (reverse coll) \n     (reduce #(conj %1 %2) [] coll)))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 27, "code": "(fn is-palindrome? [string]\n  (let [_ (pr string)])\n\n  (let [string (vec string)]\n    (cond\n      (= (count string) 0) true\n      (= (count string) 1) true\n      (not (= (get string 0) (get string (- (count string) 1)))) false\n      :else (is-palindrome?\n              (subvec (vec string) 1 (- (count string) 1)))\n      )\n    )\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 27, "code": "(fn is-palindrome [a]\n  (if (<= (count a) 1)\n    true\n  (if (= (first a) (last a))\n    (is-palindrome (drop-last (rest a)))\n      false)))", "user": "5624f5a6e4b00a550fc90288"}, {"problem": 27, "code": "#(= (reverse (into () %1)) (into () %1) )", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 27, "code": "#(= (apply str (reverse %1)) (apply str %1))", "user": "50feb0e1e4b03cd852b4e851"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "565370bce4b0f9d632dd8472"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "565540d2e4b0f9d632dd8494"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56126d71e4b05f002753df90"}, {"problem": 27, "code": "#(if (= % (if (string? %) (apply str (reverse %)) (reverse %))) true false)", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 27, "code": "(fn pal [coll]\n  (if (nil? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (pal (next (butlast coll))))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 27, "code": "(fn palindrome [x]\n            (if (empty? x)\n              true\n              (let [y (seq x)]\n                (let [f (first y)]\n                  (let [l (last y)]\n                    (let [n (palindrome (drop-last (rest y)))]\n                      (= true (= true (= f l)) n)))\n                  )\n                )  \n              )\n            )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56491d05e4b0284900eef63a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5654a0fce4b0f9d632dd8486"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56560a21e4b0f9d632dd849c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558159b3e4b05c286339e0f7"}, {"problem": 27, "code": "#(loop[h 0, t (- (count %) 1)]\n   (if(< t h)\n     true\n     (if(= (nth % h) (nth % t))\n       (recur(inc h)(dec t))\n       false)))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 27, "code": "(fn palindrom [ls] (= (seq (reverse ls)) (seq ls)) )", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 27, "code": "#(= % (if (string? %) \n        \t(clojure.string/reverse (str %))\n        \t(reverse %)))", "user": "56547b51e4b0f9d632dd8481"}, {"problem": 27, "code": "(fn [x] (= (seq x) (seq (reverse x))))", "user": "565791b0e4b0f9d632dd84aa"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "4f78d452e4b0fbe0118ec58b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56497a73e4b0284900eef642"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (or\n   (empty? s)\n   (empty? (rest s))\n   (and   \n    (= (first s) (last s))    \n    (recur ((comp rest butlast) s))\n    )\n  )\n  )", "user": "56586acae4b0f9d632dd84b4"}, {"problem": 27, "code": "#(= (compare (vec %) (vec (reverse %))) 0)", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 27, "code": "#(if (<= (count %) 1)\n   true\n   (let [head (first %)\n         tail (last %)]\n     (if (not= head tail)\n       false\n       (recur (butlast (rest %))))))", "user": "5658c357e4b00d3155796111"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "5658d775e4b00d3155796114"}, {"problem": 27, "code": "#(= (vec %1) (rseq (vec %1)))", "user": "5653a3e6e4b0f9d632dd8476"}, {"problem": 27, "code": "(fn [pal] (= (reverse pal) (reverse (reverse pal))))", "user": "56041d21e4b0c80df0ca2656"}, {"problem": 27, "code": "(fn [a] (if (string? a) true (= a (reverse a))))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 27, "code": "(fn [coll] (= (vec coll) (reverse (vec coll))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "553051ede4b076ab5578f811"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5658eaa0e4b00d3155796115"}, {"problem": 27, "code": "(fn [data] (loop [data data]\n    (if (empty? data)\n      true\n      (let [head (first data)\n            tail (first (take-last 1 data))\n            other (-> data drop-last rest)]\n        (if (not= head tail)\n          false\n          (recur other))))))", "user": "5658b9bde4b00d315579610e"}, {"problem": 27, "code": "(fn [x] (= (if (string? x)\n          (clojure.string/reverse x)\n          (into () x))\n           x))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 27, "code": "#(loop [in %1] (if (empty? in) true\n\t(if-not (= (first in) (last in)) false (recur (rest (butlast in))))                 \n))", "user": "55a03d7de4b0acc240e314f4"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5649d538e4b0284900eef647"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55d80befe4b0e31453f64aae"}, {"problem": 27, "code": "(fn p [s]\n  (cond\n    (>= 1 (count s)) true\n    (not= (first s) (last s)) false\n    :else (p (drop-last (rest s)))))", "user": "560ff7d9e4b05f002753df67"}, {"problem": 27, "code": "#(let \n    [ss (seq %1)] \n    (= ss (reverse ss)))", "user": "4f6de600e4b07046d9f4efd1"}, {"problem": 27, "code": "#(let [x %1] (= (seq x) (reverse x)))", "user": "565b7902e4b068f2fe63dc04"}, {"problem": 27, "code": "(fn  [input]\n  (loop [s (seq input)]\n    (if-not (seq s)\n      true\n      (if (= (first s) (last s))\n       (recur (rest (drop-last s)))\n       false\n       )\n    )\n  )\n )", "user": "56004deee4b04bb52996e164"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 27, "code": "(fn [s]\n   (= (vec s)\n      (reverse (vec s))))", "user": "565953a8e4b068f2fe63dbea"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 27, "code": "#(every? true? (map (fn [x y] (= x y)) (seq %) (seq (reverse %))))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5655191ee4b0f9d632dd8491"}, {"problem": 27, "code": "#(loop [i 0 j (dec (count %))]\n  (if (or (= i j) (> i j))\n    true\n    (if (not (= (nth % i) (nth % j)))\n      false\n      (recur (inc i) (dec j)))))", "user": "564f84f4e4b0284900eef6b0"}, {"problem": 27, "code": "(fn [s]\n  (=  (seq s) (reverse s)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 27, "code": "(fn [a]\n  (let [sq    (seq a)\n        revsq (reverse sq)]\n   (= revsq sq)))", "user": "5630cff7e4b0bfe05bf11787"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565dcec9e4b068f2fe63dc29"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (cond\n   (empty? coll) true\n   (empty? (rest coll)) true\n   (= (first coll) (last coll)) (palindrome? (rest (butlast coll)))\n   :else false))", "user": "565d8dcfe4b068f2fe63dc26"}, {"problem": 27, "code": "(fn [l]\n  (cond\n   (empty? l) true\n   (= (first l) (last l)) (recur (-> l rest butlast))\n   :else false))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565eb771e4b068f2fe63dc36"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "56598476e4b068f2fe63dbec"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))  ))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 27, "code": "#(not= (count (into #{} %)) (count %))", "user": "565fad48e4b068f2fe63dc43"}, {"problem": 27, "code": "(fn palindrome? [s]\r\n  (or\r\n    (empty? s)\r\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 27, "code": "(fn my-pal\n  ([ls accum]\n  \t(if (empty? ls)\n      accum\n      (my-pal ((comp rest reverse rest reverse) ls) (and (= (first ls) (last ls)) accum))))\n  ([ls] (my-pal ls true)))", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565f9aece4b068f2fe63dc42"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse  %))", "user": "564e719ee4b0284900eef69b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5661292fe4b068f2fe63dc63"}, {"problem": 27, "code": "#(= (into () %) (into () (into() %)))", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 27, "code": "(fn [s]\n  (letfn [(check [i j]\n            (if (>= i j)\n              true\n              (if (= (nth s i) (nth s j))\n                (recur (inc i) (dec j))\n                false)))]\n    (check 0 (dec (count s)))))", "user": "52e6aea1e4b09f7907dd147c"}, {"problem": 27, "code": "#(loop [l %]\n   (if (< (count l) 2)\n     true\n     (if (= (first l) (last l))\n     (recur (butlast (rest l)))\n     false)))", "user": "5662a5eee4b0e91d5f5c564b"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 27, "code": "#(cond\n        (string? %)\n        (if\n        (= % (apply str (reverse %)))\n        true false)\n        :else\n        (if\n        (= % (reverse %))\n        true false))", "user": "565fe434e4b068f2fe63dc45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq (reduce #(cons %2 %1) [] coll)) (seq coll)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 27, "code": "(fn [coll] (if (string? coll)\n             (= (seq coll) (reverse (seq coll)))\n             (= coll (reverse coll))))", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 27, "code": "#(= (if (string? %)\n      (apply str (reverse %))\n      (reverse %))\n    %)", "user": "53b6b6c8e4b047364c0444ca"}, {"problem": 27, "code": "(fn pal [x] (if(not= (first x) (last x)) false\n              (if empty? true (pal (drop-last (rest x))))))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 27, "code": "(fn [x] (let [y (seq x)] (= y (reverse y))))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "56618424e4b068f2fe63dc67"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "566713e0e4b04acd4f672dc7"}, {"problem": 27, "code": "(fn [s] (= (list* s) (reverse ( list* s))))", "user": "56671996e4b04acd4f672dc9"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse (vec x))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)) )", "user": "5667fb28e4b04acd4f672dde"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (<= (count coll) 1)\n     true\n     (if (= (first coll) (last coll))\n       (recur (rest (butlast coll)))\n       false)))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 27, "code": "(fn foo [input]\n  (if (empty? input)\n    true\n    (if (= (first input) (last input))\n      (foo (rest (butlast input)))\n      false\n      )))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x) (seq x)))", "user": "55263009e4b0ffed3738f916"}, {"problem": 27, "code": "#(= (concat % nil) (reverse %))", "user": "56668386e4b0e91d5f5c5672"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "524e5e74e4b0541d1855b7d8"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %))\n         true\n         false)", "user": "5646bb8fe4b0284900eef614"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (vec (reverse %))) (reverse %)) %)", "user": "55aa67eae4b0988bba2ad94c"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "55ddcc52e4b050e68259b3d2"}, {"problem": 27, "code": "(fn palindrom [xs] (and (= (first xs) (last xs)) (if (nil? xs) (palindrom (rest (butlast xs))) true)))", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 27, "code": "(fn[n]\n  (loop [given (#(into () n)) keep-up-count 0 keep-down-count (- (count n) 1)]\n    (if (or (= keep-up-count keep-down-count) (= keep-up-count (- keep-down-count 1)))\n      true\n      (if (not= (nth given keep-up-count) (nth given keep-down-count))\n        false\n        (recur given (+ keep-up-count 1) (- keep-down-count 1))))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 27, "code": "(fn [x] \n(if (string? x)(= x (apply str(reverse x)))(= x (reverse x))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 27, "code": "( fn [xs] (= (into () xs) (into () (reverse xs))))", "user": "56686edce4b04acd4f672dea"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "56689103e4b04acd4f672df0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56658570e4b0e91d5f5c565f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52777dc3e4b03e8d9a4a7508"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566af6bee4b0a866af6896a8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "566cf904e4b0a866af6896c5"}, {"problem": 27, "code": "#(loop [arr %]\n   (if (<= (count arr) 1)\n     true\n     (if (not= (first arr) (last arr))\n       false\n       (recur (rest (butlast arr))))))", "user": "566cd399e4b0a866af6896c3"}, {"problem": 27, "code": "(fn palindrome [param] \n  (if \n    (= (reverse (seq param)) (seq param))\n    true \n    false))", "user": "566e5e8de4b0a866af6896d9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "566b2cb1e4b0a866af6896aa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (loop [l x res ()]\n          (if (seq l)\n            (recur (rest l) (conj res (first l)))\n            res)))))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 27, "code": "(fn [coll]\n  (letfn [(dropHeadAndLast [coll]\n            (->> coll\n                 (drop 1)\n                 (drop-last)\n                 (vec)))\n          (dropMatchingHeadsAndTails [coll]\n            (let [[head] coll\n                  last (last coll)\n                  collLength (count coll)]\n              (if (or (= collLength 1) (= collLength 0) (not (= head last)))\n                coll\n                (dropMatchingHeadsAndTails (dropHeadAndLast coll)))))]\n    (let [droppedExtremities (dropMatchingHeadsAndTails coll)]\n    (or (= (count droppedExtremities) 1) (= (count droppedExtremities) 0)))))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5614855fe4b05f002753dfb8"}, {"problem": 27, "code": "#(let [half-length (int (/ (count %) 2))\n      orig (take half-length %)\n      reversed (take half-length (reverse %))]\n  (= orig reversed))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 27, "code": "(fn f [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (f (drop 1 (drop-last 1 xs)))\n      false)))", "user": "56483562e4b0284900eef629"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "566ac621e4b0a866af6896a4"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "566e55fce4b0a866af6896d7"}, {"problem": 27, "code": "(fn [coll]\n  (loop [idx 0]\n    (let [cnt (count coll)\n          r-idx (dec (- cnt idx))]\n      (cond\n       (not= (nth coll idx) (nth coll r-idx)) false\n       (>= idx (/ cnt 2)) true\n       :else (recur (inc idx))))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [n (int (Math/ceil (/ (count coll) 2)))]\n    (loop [x coll y (reverse coll) k 0]\n      (if (= n k)\n        true\n        (if (= (first x) (first y))\n          (recur (next x) (next y) (inc k))\n          false)))))", "user": "56714922e4b05957ce8c6107"}, {"problem": 27, "code": "(fn [x] (let [n (/ ((fn [t]\n                       (loop [list t, len 0]\n                         (if (empty? list)\n                           len\n                           (recur (next list) (inc len)))))\n                      x)\n                    2)\n               s (take n x)\n               s2 (take n (reverse x))]\n           (= s s2)))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 27, "code": "(comp (fn [list] (= list (reverse list))) seq)", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 27, "code": "#(if (< 1 (count %))\n    (and (= (last %) (first %))\n         (recur (drop-last (rest %))))\n    true)", "user": "5649b1b0e4b0284900eef646"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "56742817e4b05957ce8c612d"}, {"problem": 27, "code": "#(every? identity (map = (reverse %) %))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 27, "code": "#(= (seq %) ((comp reverse seq) %))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5675a817e4b05957ce8c614a"}, {"problem": 27, "code": "(fn [sequ] \n   (every?\n    #(apply = %)  \n    (map \n     vector \n     (reverse sequ) \n     sequ)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "565da79be4b068f2fe63dc28"}, {"problem": 27, "code": "(fn [s] (= (reverse (seq s)) (seq s)))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5547b72be4b0a04f79299550"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56765beae4b05957ce8c6156"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "567447a2e4b05957ce8c6135"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e81430e4b0121d4835fd88"}, {"problem": 27, "code": "(fn [s]\n  (cond\n   (empty? s) true\n   (not= (first s) (last s)) false\n   :else (recur (rest (butlast s)))))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 27, "code": "(fn [coll]\n  (let [c (if (string? coll)\n            (-> coll .toCharArray seq)\n            coll)]\n    (= c (reverse c))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "567798afe4b05957ce8c6169"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 27, "code": "(fn [w] (= (vec w) (reverse (vec w))))", "user": "55b66ebce4b01b9910ae2996"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56548885e4b0f9d632dd8483"}, {"problem": 27, "code": "(fn dp [in]\n    (if (or (empty? in) (= (count in) 1))\n      true\n      (if (= (first in) (last in))\n        (dp (rest (drop-last in)))\n        false)))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 27, "code": "(fn [x] \n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "566dd178e4b0a866af6896d1"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 27, "code": "#(\n= (take (/ (count %) 2) %) (reverse (take-last (/ (count %) 2) %))\n  )", "user": "5677f5dee4b05957ce8c616e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 27, "code": "(fn [in] (= (seq in) (reverse in)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 27, "code": "(fn[x] \n  (if (string? x) (= x (apply str (reverse x)))\n      (= x (reverse x))))", "user": "567952b3e4b05957ce8c6185"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56795deae4b05957ce8c6187"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 27, "code": "(fn [sqnc]\n  (= sqnc \n     ((fn [sqnc]\n        (if (string? sqnc)\n          (clojure.string/reverse sqnc)\n          (reverse sqnc)\n     )) sqnc)\n  ))", "user": "564d55bce4b0284900eef67e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56781f16e4b05957ce8c6173"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 27, "code": "(fn \n  [seq]\n  (and (reduce = (map = seq (reverse seq)))) (= (first seq) (first (reverse seq))))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 27, "code": "(fn palindrome? [x] (let [xs (seq x)] (= (reverse xs) xs)))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5427b477e4b01498b1a71b27"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s\n         r (reverse s)]\n    (cond (not= (first s) \n                (first r)) false\n          (= '() s r) true\n          :else (recur (rest s) \n             (rest r)))))", "user": "55a9fe1ce4b0988bba2ad947"}, {"problem": 27, "code": "(fn [x]\n      (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 27, "code": "(fn [ss] (= ((comp reverse seq) ss) (seq ss)))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 27, "code": "(fn[pal](not-any?\n         false?\n         (map\n          #(= %1 %2)\n          pal\n          (reverse pal))))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 27, "code": "#(loop [x % y #{}]\n  (if (not (empty? x))\n    (if (contains? y (first x))\n      true\n      (recur (rest x) (conj y (first x))))\n    false))", "user": "567b903be4b05957ce8c61a8"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 27, "code": "(fn [list]\n  (if (<= (count list) 1)\n    true\n    (if (= (first list) (last list))\n           (recur (rest (reverse (rest (reverse list)))))\n           false)))", "user": "52ff7424e4b0d8b024fd3708"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 27, "code": "#(= (apply str %)  (apply str (reverse %)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 27, "code": "(fn isPal? [s]\n  (if (<= (count s) 1)\n    true\n    (and\n     (= (last s) (first s))\n     (isPal? (rest (butlast s))))))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56798c1be4b05957ce8c618a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 27, "code": "(fn [coll]\n  (let [coll (seq coll)]\n    (if (= coll (reverse coll))\n      true \n      false)))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 27, "code": "(fn [[first' & xs]]\n  (let [last' (last xs)\n        xs' (butlast xs)]\n    (cond \n     (empty? xs) true\n     (= first' last') (recur xs')\n     :else false)))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "566e6850e4b0a866af6896da"}, {"problem": 27, "code": "(fn [v] (let [zipped (zipmap v (reverse v))]\n          (empty? (remove (fn [[k v]] (= k v)) zipped))))", "user": "567a680ee4b05957ce8c6198"}, {"problem": 27, "code": ";#( = (if (= (type %) java.lang.String) (apply str (reduce conj () % )) (reduce conj () % )) %)\n#(= (seq %) (reverse %))", "user": "5547432ee4b0a04f79299548"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56747b46e4b05957ce8c613b"}, {"problem": 27, "code": "(fn [lst]\n\t(let [list lst\n          rev-list (reverse lst)]\n    \t(reduce #(and %1 %2) (map #(= %1 %2) list rev-list))\n      ))", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 27, "code": "(fn [x]\n  (if (not= (first x) (last x))\n    false\n    (let [xx (butlast (rest x))]\n      (if (empty? xx)\n        true\n        (recur xx)))))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 27, "code": "#(let [li (into [] %)] (= li (reverse li)))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 27, "code": "(fn [args] (= args (if (string? args) (apply str (reverse args)) (reverse args))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 27, "code": "#(let [s (seq %)]\n   (-> s\n       reverse\n       (= s)))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 27, "code": "#((fn eq [left right] (let [x (first left) xs (rest left) y (first right) ys (rest right)] (if (= x y) (if (and (empty? xs) (empty? ys)) true (eq xs ys)) false))) (reverse %) %)", "user": "567ffd69e4b0966858e4d8e7"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse  %))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 27, "code": "(fn [c] (reduce #(and %1 %2) (map #(= %1 %2) c (reverse c))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5681009ae4b0966858e4d8f7"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (empty? seq)\n    true\n    (and (= (first seq) (last seq)) (palindrome? (drop-last (rest seq))))))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 27, "code": "(fn [s] (if (= (reverse (seq s)) (seq s)) true false) )", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 27, "code": "#( loop [arr %]\n   ( if ( empty? arr )\n     true\n     ( if ( not= ( first arr ) ( last arr ) )\n       false\n       ( recur ( butlast ( next arr ) ) )\n       )\n     )\n  )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 27, "code": "(fn is-palindrome\n  ([coll revcoll]\n   (cond (empty? coll) true\n         (not (= (first coll) (first revcoll))) false\n         :else (is-palindrome (next coll) (next revcoll))))\n  ([coll]\n   (is-palindrome coll (reverse coll))))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 27, "code": "(fn [coll]\n  (let [n (quot (count coll) 2)\n        first-half (take n coll)\n        second-half (reverse (take-last n coll))]\n    (reduce (fn [res val]\n              (and res val))\n            true\n            (map = first-half second-half))))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 27, "code": "(fn [x]\n  (cond (string? x)\n        (= (clojure.string/reverse x) x)\n \t\t:else\n        (= (reverse x) x)))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 27, "code": "#(let [cnt (count %) mid (quot (+ 1 (count %)) 2)] \n   \t (if (= 0 mid) \n       true\n       (loop [idx 0]\n       \t(if (= (nth % idx) (nth % (- cnt idx 1)))\n          (if (= mid (+ idx 1)) true (recur (inc idx)))\n   \t\t  false\n        )\n       )\n     )\n    )", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 27, "code": "(fn [xs]\n  (let [rxs (reverse xs)]\n    (loop [s xs rs rxs]\n      (if (not (and (next s) (next rs)))\n        (= (first s) (first rs))\n        (recur (next s) (next rs))))))", "user": "5682d5b4e4b0945ebc182a95"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "543b4746e4b032a45b86932c"}, {"problem": 27, "code": "#(= (seq %) (reduce conj '() %))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 27, "code": "#(let [i (quot (count  %1) 2)]\n    (= (take i %1)(reverse (drop (- (count %1) i) %1))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 27, "code": "#(= % (cond (string? %) (clojure.string/reverse %)\n          :else (reverse %)))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 27, "code": "(fn [x] (if (string? x)\n      (= x (clojure.string/join\t(reverse x)))\n      (= x (reverse x))))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %)) true false)", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5683fc85e4b0945ebc182aa7"}, {"problem": 27, "code": "(fn [x]\n  ( = (vec x) (reverse (vec x))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 27, "code": "(fn [v]\n  (if (< (count v) 2)\n    true\n    (if (= (first v) (last v))\n      (recur (take (- (count v) 2) (rest v)))\n      false)))", "user": "564dc062e4b0284900eef68c"}, {"problem": 27, "code": "#( = (reverse %) (seq %))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 27, "code": "(fn [m]\n  (loop [a m b (reverse m)]\n    (cond \n     (empty? a) true\n     (not= (first a) (first b)) false\n     :else (recur (rest a) (rest b)))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 27, "code": "(fn palindrome? [x] (= (seq x) (reverse x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 27, "code": "(fn [x] (true? (= (reverse (seq x)) (seq x)) ))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "55597fcce4b0deb715856e37"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (< (count seq) 2)\n    true\n    (if (not (= (first seq) (last seq)))\n      false\n      (recur (rest (butlast seq))))))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 27, "code": "(fn is-pali\n  [para]\n  (if (empty? para)\n    true\n    (if (= (first para) (last para))\n      (is-pali (butlast (rest para)))\n      false)))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (= (reverse x)\n     (reverse (reverse x))))", "user": "51508905e4b098b221effc2d"}, {"problem": 27, "code": "(fn [input] (if (string? input)\n             (= (apply str (reverse input)) input)\n             (= input (reverse input))\n              )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "56066e82e4b08b23635d3173"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "56481722e4b0284900eef628"}, {"problem": 27, "code": "(fn isPali\n  [params]\n  (if (empty? params)\n    true\n  (if (= (first params) (last params))\n    (isPali (butlast (rest params)))\n    false\n    )\n  )\n)", "user": "5688873ae4b0dcc4269f406b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 27, "code": "(fn [x]\n  (let [as_list (into '() x)\n        rev_list (reverse as_list)]\n    (= as_list rev_list)))", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "4f4fc570e4b03ad3f0c10cea"}, {"problem": 27, "code": "(fn pal [x]\n  (loop [i 0\n         l (count x)]\n       (if (> i (/ l 2))\n              true\n         (if (not= (nth x i) (nth x (- (- l i) 1)))\n             false\n             (recur (inc i) l)))))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 27, "code": "#(= (seq %1) (seq(reverse %1)))", "user": "5640fb97e4b08d4f616f5eef"}, {"problem": 27, "code": "#(apply = true (map = % (reverse %)))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 27, "code": ";TDD \n(fn p? [c]\n (= (first c) (last c)))", "user": "52fbbadde4b047fd5583700f"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5641686de4b08d4f616f5efc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568cdedce4b0dcc4269f40bb"}, {"problem": 27, "code": "#(apply = ((juxt reverse seq) %))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 27, "code": "(fn [sqnc]\n  (= (seq sqnc) (reverse sqnc)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 27, "code": "(fn [phrase]\n  (= (seq phrase) (reverse (seq phrase))))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 27, "code": "(fn palindrom\n  [xs]\n  (if (= (apply str (reverse xs)) (apply str xs)) true false))", "user": "56784adbe4b05957ce8c6176"}, {"problem": 27, "code": "(fn [v]\n  (loop [in v]\n    (cond\n     (empty? in) true\n     (not= (last in) (first in)) false\n     :else (recur (rest (reverse (rest in)))))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 27, "code": "#(if (= (reverse %1) (reverse (reverse %1))) true false)", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (empty? s)\n      true\n      (and (= (first s) (last s))\n           (palindrome? (butlast (rest s))))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56743413e4b05957ce8c612e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568f0db0e4b0dcc4269f40dd"}, {"problem": 27, "code": "(fn [pal] (= (seq pal) (reverse pal) ))", "user": "56791447e4b05957ce8c6183"}, {"problem": 27, "code": "(fn [x] (= (rseq (vec x)) (vec x)))", "user": "566b8946e4b0a866af6896b0"}, {"problem": 27, "code": "(fn pali [c] (= (seq c) (reverse (seq c))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 27, "code": "#(every? (fn [v] (apply = v)) (map vector % (reverse %)))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 27, "code": "#(= (vec %1) (reverse %1))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 27, "code": "(fn foo \n  ([plist]\n   \t(if (seq? plist)\n   \t  (= plist (foo plist (list)))\n      true)\n   )\n  ([plist reversed] \n   (if (not-empty plist)\n     (foo (rest plist) (conj reversed (first plist)))\n     reversed\n   )\n  )\n)", "user": "566df171e4b0a866af6896d2"}, {"problem": 27, "code": "(fn [test-sequence]\n  (if (string? test-sequence)\n    (= (apply str (reverse test-sequence)) test-sequence)\n    (= (reverse test-sequence) test-sequence)))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 27, "code": "#(loop [i 0, r true]\n\t(if (or (not r) (> i (quot (count %) 2)))\n\t\tr\n\t\t(recur \n\t\t\t(inc i)\n\t\t\t(= \n\t\t\t\t(nth % i) \n\t\t\t\t(nth % (- (count %) (inc i)))))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (reverse (reverse coll))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 27, "code": "(fn [x] (if (or (empty? x) (= (count x)1))\n\t\ttrue\n\t\t(if (= (take 1 x) (take-last 1 x))\n\t\t\t(recur (drop 1 (drop-last 1 x)))\n\t\t\t false )))", "user": "56879ea4e4b0dcc4269f405f"}, {"problem": 27, "code": "(fn [l]\n  (loop [o l]\n    (if (and (< (count o) 3) (= (first o) (last o)))\n      true\n      (if (not (= (first o) (last o)))\n        false\n        (recur (rest (butlast o)))))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 27, "code": "(fn [x] \n  (= x ((if (string? x) clojure.string/reverse reverse) x)))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 27, "code": "(fn [xs]\n  (let [ys (seq xs)]\n    (= ys (reverse ys))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 27, "code": "(fn [s] (= (into () s) (reverse (into () s))))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568bde71e4b0dcc4269f40ab"}, {"problem": 27, "code": "#(reduce (fn [a b] true (and a b)) (for [x (range 0 (int(Math/floor (/(count %) 2))))]\n (= (nth % x) (nth % (dec(- (count %) x)))) \n))", "user": "5695b589e4b0dcc4269f412a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 27, "code": "(fn [ambigram]\n  (if (= (reverse (seq ambigram)) (seq ambigram)) true false))", "user": "56193c6ee4b053970a773af2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "56795625e4b05957ce8c6186"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 27, "code": "(fn [l] (loop [a l b (reverse l)] (if (empty? a) true (if (= (first a) (first b)) (recur (rest a) (rest b)) false))))", "user": "569a60c7e4b0542e1f8d1445"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "569a29e1e4b0542e1f8d1444"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "569b84f8e4b0542e1f8d1453"}, {"problem": 27, "code": "(fn palindrome [s] \n  (loop [ss s]\n    (if (empty? ss)\n      true\n      (if (= (first ss) (last ss))\n        (recur (rest (butlast ss)))\n   \t\t  false))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "562c4b79e4b058fa18c5a6db"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5697fda8e4b0542e1f8d142c"}, {"problem": 27, "code": "(fn [x]\n\t(if (and (= (first x) (last x)) (= (butlast (rest x)) nil))\n    \ttrue\n        (if (= (first x) (last x))\n  \t\t\t(recur (butlast (rest x)))\n            false)))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 27, "code": "(fn P [X] (if (< (count X) 2) true (and (P (rest (drop-last X))) (= (first X) (last X)))))", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 27, "code": "(fn\n       [in]\n       (cond\n         (= (class '(1)) (class in)) (= in (into '() in) )\n         (= (class [1]) (class in))  (= in (into [] (reverse in)))\n         (= (class \" \") (class in)) (= (str in) (clojure.string/reverse in))\n         ))", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 27, "code": "#(let [v (vec %)] (= v (reverse v)))", "user": "569b4ff7e4b0542e1f8d1451"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join x) (clojure.string/join (reverse x))))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse (seq %))))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 27, "code": "(fn palindrome? [x] (= (seq x) (reverse x)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "569ed695e4b0542e1f8d1488"}, {"problem": 27, "code": "(fn[a] (= (if (string? a) (clojure.string/reverse a) (reverse a)) a))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 27, "code": "#(= \n  (seq %) \n  (reverse %))", "user": "56899934e4b0dcc4269f4080"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "569ed6a8e4b0542e1f8d1489"}, {"problem": 27, "code": "(fn [c] (let [coll (into [] c)] (= (reverse coll) coll)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 27, "code": "(fn [x] \n  (if\n    (string? x)\n    (= (str (reverse x)))\n  \t(= (reverse x) x)\n    )\n  )", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 27, "code": "(fn [input]\n  (or \n    (= input (reverse input))\n    (if (= java.lang.String (class input))\n      (= input (apply str (reverse input)))\n      false)\n    )\n  )", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 27, "code": "(fn [x] \n\t(= x (if (string? x) \n\t\t\t (apply str (reduce conj () x)) \n\t\t\t (reduce conj () x))))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 27, "code": "(fn isPalindrome [seq]\n  ;0 or 1 elements are trivially palindromes.\n  (if (< (count seq) 2) \n    true\n    ;else, we have at least two elements. Are the ends different?\n    (if (false? (= (first seq) (last seq)))\n      false\n      ;If the ends match, compare the middle.\n      (if (isPalindrome (rest (butlast seq)))\n        true\n        ;else\n        false\n      )\n    )\n  )\n)", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "568c2f97e4b0dcc4269f40b0"}, {"problem": 27, "code": "#(= (take (quot (count %) 2) %)  (reverse (drop (+ (quot (count %) 2) (rem (count %) 2) ) %)))", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 27, "code": "#(loop [[fst1 & rst1] %,\n         [fst2 & rst2] (reverse %)]\n    (and (= fst1 fst2)\n         (if rst1 (recur rst1 rst2) true)))", "user": "56a0a85fe4b0542e1f8d14a5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 27, "code": "#(= (reverse (map (fn [x] x) %)) (map (fn [x] x) %))", "user": "569bda8ee4b0542e1f8d145a"}, {"problem": 27, "code": "(fn [s] (= (seq s) (seq (reverse s))))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "562fbf87e4b0ab312c17ebdb"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56a1227fe4b0542e1f8d14ac"}, {"problem": 27, "code": "(fn [coll]\n  (if (or (= (count coll) 1) (= (count coll) 0))\n    true\n    (if (not (= (first coll) (last coll)))\n      false\n      (recur (drop 1 (drop-last 1 coll))))))", "user": "50c385a8e4b00e537d00254d"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s)\n     (seq s)))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (str x) (apply str (reverse x)))\n    (= x (reverse x))\n    ))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 27, "code": "(fn [x]\n  \n   ( = (compare ( into [] (reverse (into [] x) ) )  (into [] x) ) 0)    \n  \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 27, "code": "#(=(reverse %)(seq %))", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 27, "code": "#(= (reverse %) (concat %))", "user": "56a1c646e4b0542e1f8d14b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55d0391de4b0e31453f64a37"}, {"problem": 27, "code": "(fn [x]\n  (let [rev (reverse x)]\n    (every? true? (map = x rev))))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 27, "code": "(fn palindrome? [mseq]\n  (if (< (count mseq) 2)\n    true\n    (if (= (first mseq) (last mseq))\n      (palindrome? (rest (butlast mseq)))\n      false\n      )\n    )\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 27, "code": "(fn palin? [x]\n  (loop [a x]\n    (if (> (count a) 1)\n      (if (= (first a) (last a))\n        (recur (rest (butlast a)))\n        false)\n      true)))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 27, "code": "(fn [s]\n  (let [ss (seq s)]\n    (= ss (reverse ss))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 27, "code": "#(let [coll (seq %)\n       rev (reverse coll)]\n   (= coll rev))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 27, "code": "#(if (= (into () %) (reverse (into () %)))\n   true\n   false)", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56a72c0de4b0542e1f8d14f7"}, {"problem": 27, "code": "#(= (into [] %1) (into '() %1))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56a7d7afe4b07966d5a8a065"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "56a79421e4b07966d5a8a05c"}, {"problem": 27, "code": "(fn [coll]\n  (let [f (seq coll)\n        r (reverse f)]\n    (= f r)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 27, "code": "(fn p [l] \n  (letfn [(c [l] \n      (int (Math/ceil \n            (/ (count l) 2.0)\n            \n           )\n      )\n       )]\n       (= (take (c l) l)\n          (take (c l)\n                (reverse l))\n       )\n  )\n)", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 27, "code": "(fn [col]\n  (true?\n   (= (reverse(seq col)) (seq col))))", "user": "56a45fcee4b0542e1f8d14dc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 27, "code": "(fn [coll] (let [revcoll (reverse coll)] (reduce #(and %1 %2) (map = coll revcoll))))", "user": "5243233fe4b076204b44faac"}, {"problem": 27, "code": "#(let [i %] (= (last i) (first i)))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 27, "code": "(fn [li]\n    (let [length (count li)]\n      (every? true? (map\n                      #(= (nth li %) (nth li (- length % 1)))\n                      (range length)))))", "user": "56503470e4b0284900eef6ba"}, {"problem": 27, "code": "(fn pd [s]\n    (cond\n      (= 1 (count s)) true\n      (= 0 (count s)) true\n      (= (first s) (last s)) (pd (rest (butlast s)))\n      :else false\n      ))", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 27, "code": "(fn pal-detector [s]\n  (loop [word   s]\n    (if (<= (count word) 1)\n      true\n      (if (not= (first word) (last word)) false (recur (drop 1 (drop-last 1 word)))))))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 27, "code": "#(= (reverse %1) (vec %1))", "user": "56aad332e4b03c432f187337"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 27, "code": "(fn [input] (let [xs (seq input)] (= xs (reverse xs))))", "user": "568c4bc8e4b0dcc4269f40b2"}, {"problem": 27, "code": "(fn palindrome [x]\n  (cond\n   (<= (count x) 1) true\n   (= (last x) (first x)) (palindrome (butlast (rest x)))\n   :else false\n   )\n  )", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56abeb1fe4b03c432f187344"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56a7ef10e4b07966d5a8a067"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56ac81ace4b03c432f187347"}, {"problem": 27, "code": "#(let [reverse (if (string? %)\n                   (clojure.string/reverse %)\n                   (reverse %))]\n   (= reverse %))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 27, "code": "(fn [l] (= (reverse l) (seq l)))", "user": "56acca9ae4b03c432f18734c"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "56acc4b9e4b03c432f18734b"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "56a14a32e4b0542e1f8d14ad"}, {"problem": 27, "code": "#(= (reverse %) (reverse( reverse%)))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 27, "code": "(fn [v]\n  (let [r (reverse v)]\n    (loop [n v\n           r r]\n      (cond\n        (empty? n) true\n        (= (first n) (first r)) (recur (rest n) (rest r))\n        :else false))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 27, "code": "(fn [xs] (let [size (count xs)\n               mid (quot size 2)\n               step (+  mid (rem size 2))\n               [f s]  (partition mid step xs)] \n               (= (reverse f) s)))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "56ad9cfae4b03c432f187354"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 27, "code": "(fn [x] (= (seq x) ((comp reverse seq) x)))", "user": "56ae6776e4b03c432f18735e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 27, "code": "#(= (reverse  (seq %)) (seq %))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 27, "code": "#(= %\n    (if (string? %)\n      (apply str (reverse %))\n      (reverse %)))", "user": "56ae7589e4b03c432f187360"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56aee4abe4b03c432f187364"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5612d91ee4b05f002753df97"}, {"problem": 27, "code": "#(= (vec (reverse %)) (seq %))", "user": "56af5f74e4b061e3ca319acf"}, {"problem": 27, "code": "(fn pal [lst] (if (< (count lst) 2) true (and (= (first lst) (last lst)) (pal (drop 1 (drop-last 1 lst)))) ) )", "user": "56afb527e4b061e3ca319ad7"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= (clojure.string/reverse s) s)\n    (= (reverse s) s)))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5446ea11e4b032a45b8693b7"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x)))(= x (reverse x))))", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56942970e4b0dcc4269f4118"}, {"problem": 27, "code": "(fn [x] \n  (cond\n   (= (type x) java.lang.String) (= x (clojure.string/reverse x))\n   :else (= x (reverse x))\n  )\n)", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 27, "code": "(fn is-palindrome \n  [list-of-els]\n  (cond \n   (= 0 (count list-of-els)) true\n  (= (first list-of-els) (last list-of-els)) (is-palindrome (rest (drop-last list-of-els)))\n  :else false)\n  )", "user": "56942939e4b0dcc4269f4114"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 27, "code": "(fn \n  [p]\n  (let [s (seq p)]\n    (= (into '() s) s)))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 27, "code": "#(= (seq (to-array %)) (reverse (to-array %)))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 27, "code": "(fn\n   [coll]\n   (= (reverse coll) (seq coll)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 27, "code": "(comp #(= (reduce conj '() %) %) vec)", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5673db87e4b05957ce8c6125"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 27, "code": "(fn pal? [q] (if (empty? q) true (and (= (first q) (last q))\n                (pal? (rest (reverse (rest (reverse q)))))\n                )))", "user": "56b36283e4b0982f16b37e18"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "56b165f0e4b0982f16b37dea"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c4b23de4b0e31453f649a3"}, {"problem": 27, "code": "#(if (coll? %)\n    (= % (reverse %))\n    (= % (apply str (reverse %))))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558ea13be4b0277789237654"}, {"problem": 27, "code": "(fn isPalindrom [s]\n  (cond \n   (< (count s) 2) true\n   (not (= (first s) (last s))) false\n   :else (isPalindrom (rest (butlast s)))\n   ) \n  )", "user": "56b5019ce4b0982f16b37e2c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 27, "code": "(fn [x](= (reverse x) (seq x)))", "user": "56a28664e4b0542e1f8d14c1"}, {"problem": 27, "code": "#(every? true? (map (fn [a b] (= a b)) % (reverse %)))\n\n; doh! -> #(= (vec %) (reverse %))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "565418ede4b0f9d632dd847d"}, {"problem": 27, "code": "(fn boo [li]\n  (if (= (mod (count li) 2) 0)\n  \t(let [c (/ (count li) 2)]\n    \t(= (take c li) (reverse (drop c li)))  \n    )\n    (let [c (quot (count li) 2)]\n    \t(= (take c li) (reverse (drop (+ c 1) li)))\n    )\n  )  \n)", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56b8c794e4b0f26550335927"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56b86e64e4b0f26550335924"}, {"problem": 27, "code": "(fn [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (drop-last x)))\n      false)))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56b965d9e4b0f26550335931"}, {"problem": 27, "code": "(fn pal [xs]\n  (if (<= (count xs) 1)\n    true\n    (and (= (first xs) (last xs))\n         (pal (drop 1 (drop-last xs))))))", "user": "56b97792e4b0f26550335932"}, {"problem": 27, "code": "(fn [coll] (= (into () coll) (into [] coll)))", "user": "55e206f3e4b050e68259b429"}, {"problem": 27, "code": "(fn [target] (loop [t target]\n               (cond\n                (not (= (first target) (last target))) false\n                (or (= (count t) 0) (= (count t) 1)) true\n                :else (recur (reverse (rest (reverse (rest t))))))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 27, "code": "(fn [coll] (reduce #(and % %2) (map = coll (reverse coll))))", "user": "536f96e3e4b0fc7073fd6e83"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "519c47abe4b0a1d87b00345a"}, {"problem": 27, "code": "(fn[lst]\n\t( = (seq lst) (reverse lst)) \n \n)", "user": "56b94357e4b0f2655033592e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (let [res (reverse (seq x))]\n    (if (string? x)\n      (= x (apply str res))\n      (= x res))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 27, "code": "#(if (string? %) \n\t(= % (apply str (reverse (seq %))))\n\t(= % (reverse %)))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 27, "code": "(fn [valu] (= (reverse valu) ((comp reverse reverse) valu)))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 27, "code": "#(loop [s %]\n   (if (empty? s)\n     true\n     (if (= (first s) (last s))\n       (recur (rest (reverse (rest s))))\n       false)))", "user": "56baab13e4b0f26550335948"}, {"problem": 27, "code": "(fn abc\n  [L]\n  (if (< (count L) 2)\n    true\n    (and \n     (= (first L) (last L))\n     (abc (rest (reverse (rest L))))\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "569fe597e4b0542e1f8d149b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56b755b5e4b0982f16b37e46"}, {"problem": 27, "code": "(fn [x] (= (first x) (last x))) ;Dodgy cheat on the tests.", "user": "553aad97e4b09218d5f44ff9"}, {"problem": 27, "code": "(fn is-palindrome? [num] \n  (if (string? num)\n  (let [digit-sequence (seq (str num))]\n    (= digit-sequence (reverse digit-sequence)))\n    \t(let [digit-sequence (seq num)]\n    (= digit-sequence (reverse digit-sequence)))))", "user": "56942955e4b0dcc4269f4116"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (= (seq x) (reverse x)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 27, "code": "(fn [xs]\n  \"haha without reverse\"\n  (if (< (count xs) 2)\n    true\n    (and (= (first xs) (last xs)) (recur (rest (drop-last xs))))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 27, "code": "#( = (seq %) (reverse (seq %) ) )", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56b6c962e4b0982f16b37e3e"}, {"problem": 27, "code": "(fn [x] (if (= java.lang.String (class x))\n          (if (= x (clojure.string/reverse x))\n                 true\n                 false)\n          (if (= x (reverse x))\n                  true \n                  false)))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 27, "code": "(fn [s] \n\t(loop [f true h 0 t (dec (count s))] \n\t\t(cond \n\t\t\t(neg? t) f \n\t\t\t(false? f) f\n\t\t\t:else (recur (= (nth s h) (nth s t)) (inc h) (dec t)))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56942a8be4b0dcc4269f411b"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (if (<= (count xs) 1)\n    true\n    (and (= (first xs) (last xs))\n     (palindrome? (rest (drop-last xs))))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564b1f34e4b0284900eef662"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 27, "code": "(fn [c]\n  (= (into [] c) (reverse c)))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 27, "code": "(fn palindrome?\n  [sq]\n  (let [mid (int (/ (count sq) 2))]\n    (->> (take-last mid sq)\n         (reverse)\n         (map #(= %1 %2) sq)\n         (drop-while true?)\n         (empty?))))", "user": "5609d328e4b05f002753deee"}, {"problem": 27, "code": "(fn [givenstr] (= (into [] givenstr)  (reverse (into [] givenstr))  ))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 27, "code": "(fn cp [w] \n(if (< (count w) 2)\n true \n (if \n (= (first w) (last w))\n  (cp (butlast (rest w)))\n  false\n  )\n))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56c040eee4b060a8e693e3a5"}, {"problem": 27, "code": "(fn [xs]\n  (if (= (type xs) java.lang.String)\n    (= (clojure.string/join (reverse xs)) xs)\n    (= (reverse xs) xs)))", "user": "56be350ce4b0f26550335981"}, {"problem": 27, "code": "(fn  [seqs] (= (seq seqs) (reverse (seq seqs))))", "user": "56a257e7e4b0542e1f8d14bb"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "56c14100e4b0839206b9d683"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56c08c7fe4b060a8e693e3ab"}, {"problem": 27, "code": "(fn r [p] (if (= (first p) (last p)) (if (not-empty p) (r (rest (butlast p))) true) false))", "user": "56aed78fe4b03c432f187363"}, {"problem": 27, "code": "(fn palindrome? [in]\n  (= (seq (reverse in)) (seq in)))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 27, "code": "(fn func [x] (if (> (count x) 2) (if (= (last x) (first x)) (func (butlast (rest x))) false) true))", "user": "56c1d2dae4b0839206b9d68a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 27, "code": "(fn is-palindrome [some-seq] (= (seq some-seq) (reverse (seq some-seq))))", "user": "56c0756de4b060a8e693e3a9"}, {"problem": 27, "code": "(fn [l] (= (vec l) (reverse (vec l))))", "user": "56b8cf20e4b0f26550335929"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 27, "code": "(fn me [coll]\n  (if (< (count coll) 2)\n    true\n    (if-not (= (first coll) (last coll))\n      false\n      (me (drop-last (rest coll))))))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 27, "code": "(fn [seq] \n  \t(if (string? seq) (= seq (apply str (reverse seq))) (= seq (reverse seq))))", "user": "56499a5de4b0284900eef644"}, {"problem": 27, "code": "(fn func [s]\n  (loop [f nil l nil v (seq s)]\n    (if (not= f l)\n      false\n      (if (< (count v) 2) true (recur (first v) (last v) (rest (drop-last v)))))))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 27, "code": "#(let [length (count %)\n       halfway (quot length 2)]\n   (loop [i 0]\n     (if (and\n          (< i halfway)\n          (= (nth % i) (nth % (- length i 1))))\n       (recur (inc i))\n       (= i halfway))))", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 27, "code": "#(every? true? ((fn p [c r i]\n  (if (< i (/ (count c) 2))\n      (p c (cons (= (nth c i) (nth (reverse c) i)) r) (inc i))\n    r)) %1 '() 0))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 27, "code": "(fn [coil]\n  (cond (= 1 (count coil)) true\n        (= 0 (count coil)) true\n        (not (= (first coil) (last coil))) false\n        :else (recur (rest (reverse (rest coil))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 27, "code": "(fn[s]\n   (loop [start 0 end (dec(count s))]\n    (if (> start end)\n      true\n    (if(not= (nth s start) (nth s end))\n      false\n      (recur (inc start) (dec end) )))))", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 27, "code": "(fn [x] (every? true? (map #(= %1 %2) (seq x) (reverse (seq x)))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564857c2e4b0284900eef62e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "561fe4fce4b064ca9f4b16d5"}, {"problem": 27, "code": "(fn [coll] (= (clojure.string/join coll) (clojure.string/join (reverse coll))))", "user": "56bf78dae4b0f26550335989"}, {"problem": 27, "code": "(fn [s]\n  (=\n    (reverse s)\n    (reverse (reverse s))\n  )\n)", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= % (reverse %)))", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 27, "code": "(fn [input]\n  (loop [myseq input myseqrev (reverse input)]\n    (if (and (empty? myseq) (empty? myseqrev))\n      true\n      (if (false? (= (first myseq) (first myseqrev)))\n        false\n        (recur (rest myseq) (rest myseqrev))\n      )\n    )\n  )\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 27, "code": "(fn [s]\n  (let [len (quot (count s) 2)\n        beg (take len s)\n        end (take len (reverse s))]\n    (= beg end)\n  ))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 27, "code": "(fn doit [coll]\n  (if (empty? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (butlast (rest coll)))\n      )\n    )\n  )", "user": "56c72507e4b0ed865f9758b7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5643aed5e4b0018b46ad8bfd"}, {"problem": 27, "code": "(fn [coll] (if (string? coll)\n             (= (clojure.string/reverse coll) coll)\n             (= (reverse coll) coll)))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 27, "code": "#(= (map str (reverse %)) (map str %))", "user": "56c77858e4b0ed865f9758c0"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 27, "code": "(fn palindrome? [coll] ( = (seq coll ) (reverse coll)))", "user": "56c9d136e4b0ed865f9758e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 27, "code": "(fn [tester]\n  (let [is-even (-> tester count even?)\n        length (count tester)]\n    (if is-even\n      (let [[a b] (split-at (/ length 2) tester)]\n        (= a (reverse b)))\n      (let [[a b] (split-at (dec (/ length 2)) tester)]\n        (= a (reverse (rest b)))))))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (or (empty? x) (= 1 (count x)))\n  \ttrue\n          \n       (if (= (first x) (last x)) \n         (palindrome (drop-last (drop 1 x)))\n         false\n       )\n    \n  )\n    )", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "56ccbeb7e4b0ea9b8538f740"}, {"problem": 27, "code": "(fn [pal]\n      (loop [pal pal]\n        (if (= pal ())\n          true\n          (if (= (first pal) (last pal))\n            (recur (drop 1 (reverse (drop 1 (reverse pal)))))\n            false\n            ))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 27, "code": "#(if (= (class %) java.lang.String) (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 27, "code": "#(= (apply list %1) (reverse %1))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 27, "code": "#(= (vec %1) (vec (reverse %1)))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (if (empty? (rest coll))\n    true\n    (if (= (first coll) (last coll)) (palindrome? (drop-last (rest coll))) false)))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 27, "code": "(fn \n  [x]\n  (let [v (vec x)]\n  (= v (reverse v)))\n)", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 27, "code": "(fn func [l] (if (empty? l) true (and (= (first l) (last l)) (func (drop-last (rest l))))))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 27, "code": "(fn [x]\n\t(if (string? x)\n   \t\t(= x (apply str (reverse (map #(str %) x))))\n  \t\t(= x (reverse x))))", "user": "56c3afdde4b05cc29241ee91"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56cd110ee4b0ea9b8538f747"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 27, "code": "(fn [s]\n  (every? identity\n          (map #(= %1 %2) (seq s) (reverse (seq s)))))", "user": "56cf4a48e4b0ea9b8538f767"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56cfa716e4b0ea9b8538f76d"}, {"problem": 27, "code": "(fn is-pal\n  [seq]\n  (if (= seq [])\n    true\n    (if (= (count seq) 1)\n      true\n      (and (= (first seq) (last seq)) (is-pal (take (- (count seq) 2) (rest seq)))))))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 27, "code": "(fn [x] (if (= (reduce str (reverse x)) (reduce str x)) true false))", "user": "56cef5e8e4b0ea9b8538f762"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "529cabd5e4b04e0c58e87b68"}, {"problem": 27, "code": "(fn [s] (if (string? s)\n          (= s (apply str (reverse s))) \n          (= s (reverse s) )  \n          )\n  )", "user": "56cd67c1e4b0ea9b8538f74a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56be8649e4b0f26550335983"}, {"problem": 27, "code": "(fn [c]\n  (loop [nc c\n         f (first nc) \n         l (last nc)]\n    (if (not= f l)\n      false\n      (if (<= (count nc) 1)\n        true\n        (recur (rest (drop-last nc)) (first nc) (last nc))))))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reduce #(cons %2 %) [] (seq x))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "52faf67ce4b047fd55837005"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "56d4266ce4b0ea9b8538f7b4"}, {"problem": 27, "code": "(fn [coll]\n  (= (clojure.string/join coll) (clojure.string/join (reverse coll))))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 27, "code": "(fn [coll]\n  (every? identity\n          (map = coll (reverse coll))))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 27, "code": "(fn [coll]\n  (let [x (quot (count coll) 2)]\n    (= (take x coll) (take x (reverse coll)))))", "user": "56cda514e4b0ea9b8538f74e"}, {"problem": 27, "code": "(fn reverse? [t]\n  (if (string? t)\n    (= t  (clojure.string/reverse t))\n    (= t (reverse t))))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 27, "code": "#(loop [s %]\n   (cond\n    (empty? s) true\n    (not= (first s) (last s)) false\n    :else (recur (rest (butlast s)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 27, "code": "(fn [input]\n  (loop [dwindlelist input newlist nil]\n    (if (empty? dwindlelist)\n      (= (apply str input)\n         (apply str newlist))\n      (recur (rest dwindlelist) \n             (conj newlist (first dwindlelist))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 27, "code": "#(\n  if(< (count %1)3)\n  \ttrue\n  \t(if(=(first %1)(last %1))\n         (recur (-> %1 rest butlast))\n         false)\n  )", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 27, "code": "(fn [arg]\n  (if (string? arg)\n    (= arg (apply str (reverse arg)))\n    (= arg (reverse arg))))", "user": "56d72e14e4b0ea9b8538f7d6"}, {"problem": 27, "code": "#(apply = ((juxt seq reverse) %))", "user": "56d15bfbe4b0ea9b8538f78d"}, {"problem": 27, "code": "(fn [xs] (= (reverse (reverse xs)) (reverse xs)))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "50a0267fe4b08df8156e9e4a"}, {"problem": 27, "code": "#(let [length (count %)\n      q (quot length 2)]\n   (loop [a1 (take q %)\n          a2 (reverse (drop (- length q) %))]\n     (if (empty? a1) true\n       (if (not= (first a1) (first a2)) false\n         (recur (rest a1) (rest a2))))))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 27, "code": "#(= (reverse %) (seq  %))", "user": "560ee566e4b05f002753df57"}, {"problem": 27, "code": "(fn [l] (= (clojure.string/join l) (clojure.string/join (reverse l))))", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 27, "code": "#(=(seq %) (reverse (seq %)))", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56a7c7c8e4b07966d5a8a061"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "56d09798e4b0ea9b8538f781"}, {"problem": 27, "code": "(fn [[x & xs]] (if (= x nil) true (if (= xs nil) true (and (= x (last xs)) (recur (butlast xs))))))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %))true false)", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 27, "code": "(fn [oo]\n  (let [q (quot (count oo) 2) r (rem (count oo) 2)]\n    (if (= r 0)\n      (= \n       (take q oo)\n       (reverse (drop q oo)))\n      (= \n       (take q oo)\n       (reverse (drop (+ q r) oo))\n       )\n      )\n    )\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 27, "code": "(fn [arg] (= (reverse arg) (seq arg)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 27, "code": "(fn [coll]\n     (cond (= (count coll) 0) true\n           (= (count coll) 1) true\n           (not= (first coll) (last coll)) false\n           :else (recur (drop-last (rest coll)))))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 27, "code": "(fn [ls]\n  (loop [l ls lr (reverse ls) ans true]\n    (if (= () l)\n      ans\n      (recur (rest l) (rest lr) (and ans (= (first l) (first lr)))))))", "user": "561bcf94e4b064ca9f4b168a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56dc34a3e4b0ea9b8538f816"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56db549be4b0ea9b8538f808"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [first-item (first coll)\n        last-item (last coll)\n        middle-bit (rest (butlast coll))]\n    (if (empty? coll)\n      true\n      (and (= first-item last-item)\n           (palindrome? middle-bit)))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 27, "code": "(fn [s] (let [half-len (/ (count s) 2)] \n          (if (= (take half-len s) (take half-len (reverse s)))\n            true\n            false\n\n         ))\n  )", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [scoll (seq coll)]\n    (if (>= 1 (count coll))\n      true\n      \n      (and\n       (= (first scoll) (last scoll))\n       (palindrome? (rest (drop-last scoll)))\n       )\n      )\n    )\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 27, "code": "#(= % (if (string? %)\n   (apply str (reverse %)) (reverse %)))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 27, "code": "(fn [x]\n  (loop [y x]\n    (if (= y [])\n      true\n      (if (= (first y) (first (reverse y)))\n        (recur (reverse (rest (reverse (rest y)))))\n        false))\n    ))", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 27, "code": "(fn [ls] (= (reverse ls) (seq ls)))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 27, "code": "(fn [x] (= (reverse x)\n           (seq x)))", "user": "5628f727e4b00e49c7cb47f5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "50939f7ce4b097f48cc38582"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 27, "code": "(fn [x] \n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (rest (drop-last x))))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56e08e4fe4b0ca2494a0960b"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53cf1648e4b00fb29b2212fa"}, {"problem": 27, "code": "(fn [s] (let [x (seq s)] (= (reverse x) x)))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 27, "code": "(fn [s] (apply = (map (partial apply str) [(reverse s) s])))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 27, "code": "#(loop [xs %, acc false]\n    (if (< (count xs) 2)\n      acc\n      (if (= (first xs) (last xs))\n        (recur (butlast (rest xs)) true)\n        false)))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56e32696e4b03a7c14b85a40"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "56e37659e4b03a7c14b85a44"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= (clojure.string/reverse coll) coll)\n    (= coll (reverse coll))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "550f2333e4b06e50f9beb173"}, {"problem": 27, "code": "#(= (vec (reverse %1)) (vec %1))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 27, "code": "#(= (reduce conj '() %) (seq %))", "user": "559a8d4ce4b066d22e731f43"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 27, "code": "(fn [a-seq]\n  (let [a-seq-seq (seq a-seq)]\n  (= a-seq-seq (reverse a-seq-seq))))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 27, "code": "(fn [xs] (loop [x xs] (if (> (count x) 1) (if (= (first x) (last x)) (recur (drop-last 1 (drop 1 x))) false) true)))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56dc39dee4b0ea9b8538f818"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 27, "code": "(fn [x] (or (= x (reverse x)) (= x (apply str (reverse x)))))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 27, "code": "(fn ispal\n  [l]\n  (cond\n   (empty? (rest l)) true\n   (not (= (first l)\n           (last l))) false\n   :else\n   (ispal (drop-last (rest l)))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 27, "code": "(fn [input] \n  (if (string? input) \n    (= input (clojure.string/join (reverse (seq input)))) \n    (= (reverse (seq input)) input)))", "user": "51bc3e7fe4b0fe3ecfb46455"}, {"problem": 27, "code": "(fn [x] (= (vec x) (vec (reverse x))))", "user": "56ba5cc6e4b0f26550335942"}, {"problem": 27, "code": "(fn [coll] \n  (= (sequence coll)\n     (reverse coll)))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 27, "code": "(fn [xs] (= (vec xs) (vec (reverse (vec xs)))))", "user": "56e1f9a6e4b03a7c14b85a2d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 27, "code": "(fn [q]\n  (loop [s (apply list q)]\n    (if (< (count s) 2)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (rest (butlast s)))))))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 27, "code": "(fn [coll]\n    (loop [c coll]\n      (if (<= (count c) 1)\n        true\n        (if (= (first c) (last c))\n          (recur (butlast (rest c)))\n          false))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "user": "56e71333e4b02e7e935eb6d2"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 27, "code": "(fn palindrome [x] \n  (if (string? x) \n    (if (< (count x) 2) \n      true\n      (and \n       (palindrome (subs x 1 (- (count x) 1)))\n       (= (first x) (last x))\n      )\n    )\n    (= x (reverse x))\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 27, "code": "(fn [pal-seq]\n  (if (= (count pal-seq) 0)\n\ttrue\n    (if-not (= (first pal-seq) (last pal-seq)) \n      false\n      (recur (drop-last (rest pal-seq)))\n      )\n    )\n  )", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 27, "code": "(fn [value] (= (clojure.string/join (reverse value)) (clojure.string/join value)))", "user": "56eaec1fe4b04a395b9a0418"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 27, "code": "#(if (string? %)\n  (= (reduce str (reverse %)) %)\n  (= (reverse %) %)\n)", "user": "56d09e8ee4b0ea9b8538f782"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56ebf105e4b04a395b9a042c"}, {"problem": 27, "code": "(fn\n   [seq]\n   (cond\n     (string? seq)\n       (= seq (apply str (reverse seq)))\n     :else\n     (= seq (reverse seq))))", "user": "56e09e01e4b0ca2494a0960c"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (<= (count x) 1)\n    true\n    (and (= (first x) (last x)) (palindrome? (butlast (rest x))))\n  )\n)", "user": "56ce8728e4b0ea9b8538f760"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 27, "code": "(fn [s]\n  (cond (string? s) (= s (apply str (reverse s)))\n        :else (= s (reverse s))))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "56ed3410e4b04a395b9a0444"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56eca64fe4b04a395b9a043d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56eed056e4b04a395b9a0454"}, {"problem": 27, "code": "(fn [data] \n     (if (= (reverse data) (reverse (reverse data))) true false))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56ef63eee4b04a395b9a045e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56a62137e4b0542e1f8d14e8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reduce conj '() %)))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 27, "code": "(fn is-palindrome? [xs]\n  (= (#(into '() %) xs) (seq xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 27, "code": "#(= % ((if (string? %) clojure.string/reverse reverse) %))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 27, "code": "(fn [l]\n  (let [seq-l (seq l)]\n  (= (reverse seq-l) seq-l)))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "56f20d29e4b04a395b9a049d"}, {"problem": 27, "code": "#(if (or (= (count %) 1) (= (count %) 0)) \n   true \n   (if (not= (first %) (last %)) \n   \t\tfalse\n        (recur (rest (drop-last %)))))", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 27, "code": "(fn [arg]\n  (if (string? arg)\n   \t(= arg (apply str (reverse arg)))\n    (= arg (reverse arg))\n  )\n)", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str(reverse x))) (= x (reverse x))))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 27, "code": "(fn [x]\n  (let [x-seq (seq x)]\n    (= x-seq (reverse x-seq))))", "user": "56f01f64e4b04a395b9a046d"}, {"problem": 27, "code": "(fn [x]\n  (let [x-seq (seq x)]\n  (= x-seq (reverse x-seq))))", "user": "56cccb84e4b0ea9b8538f741"}, {"problem": 27, "code": "(fn [x]\n  (let [x-seq (seq x)]\n        (= x-seq (reverse x-seq))))", "user": "56f298b4e4b04a395b9a04a6"}, {"problem": 27, "code": "(fn [pali] (= (seq pali) (reverse pali)))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 27, "code": "(fn [s] (let [rev (reverse s) half-size (quot (count s) 2) se-taken (take-nth half-size s) rev-taken (take-nth half-size rev)] (= se-taken rev-taken)))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56efec81e4b04a395b9a0466"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 27, "code": "(fn [col] (= (first col) (last col)))", "user": "56f07437e4b04a395b9a047b"}, {"problem": 27, "code": "#(= ( seq %) (reverse (seq %)))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))", "user": "56ef0203e4b04a395b9a0457"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f514cee4b046a417f92068"}, {"problem": 27, "code": "(fn palindrome? [col]\n \t(let [half (quot (count col) 2)]\n\t\t(= (take half col) (reverse (take-last half col)))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 27, "code": "(fn [coll] (if (or (empty? coll) (= 1 (count coll)))\n                   true\n                   (if (= (first coll) (last coll))\n                     (recur (butlast (rest coll)))\n\t\t\t\t\t false)))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 27, "code": "(fn [x]\n  (= (seq (reverse x)) (seq x)))", "user": "543170b2e4b0dad94371f2e7"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "56f45469e4b046a417f9205c"}, {"problem": 27, "code": "(fn palindrome\n  ([x] (if (not= (last x) (first x))\n           false\n           (if (empty? x)\n                  true (palindrome (rest (drop-last x) ) )\n                  )\n\n                )\n         )\n    )", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 27, "code": "(fn [x] (let [length (Math/floor (/ (count x) 2))\n               size (count x)]\n\n           (loop [i 0\n                 res true]\n           (if (< i length)\n             (if (= (nth x i) (nth x (- size i 1)))\n               (recur (inc i) true)\n               false)\n             res))\n\n\n           ))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 27, "code": ";;#(= (seq %) (reverse (seq %)))\n\n;#(= (map str (reverse %)) (map str %))\n\n#(= (apply str %) (apply str (reverse %)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 27, "code": "(fn [l]\n  (let [xs (seq l)\n        sx (reverse xs)]\n    (= xs sx)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 27, "code": "(fn [x]\n  (if (= (class x) java.lang.String)\n      (= (clojure.string/reverse x) x)\n      (= (reverse x) x)\n   )\n)", "user": "56f4b753e4b046a417f92061"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "56b15fc8e4b0982f16b37de9"}, {"problem": 27, "code": "(fn my-palindrome [lst]\n    (= (reverse (reverse lst)) (reverse lst)))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 27, "code": "#(= (reverse %) (lazy-seq %))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "56f070fee4b04a395b9a0478"}, {"problem": 27, "code": "(fn palindrome [x] (= (seq x) (reverse x)))", "user": "56f57481e4b046a417f92072"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 27, "code": "(fn [x] (->> x\n            ((fn [x] \n               (map (fn [y] (= y (nth (vec x) (- (count x) (.indexOf (vec x) y) 1)))) x))) \n            (reduce (fn [n m] (and n m)))))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 27, "code": "(fn [seqOrStr] \n  (if (string? seqOrStr)\n    (= seqOrStr (apply str (reverse seqOrStr)))\n    (= seqOrStr (reverse seqOrStr)))\n )", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56f70fb2e4b08e7d20b9682b"}, {"problem": 27, "code": "(fn [col] (every? identity (map #(= %1 %2) col (reverse col))))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 27, "code": "(fn p [s]\n  (let [r (reduce conj '() \n                  (seq s))] (= r (seq s))))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 27, "code": "#(not (= (count %) (count (set %))))", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 27, "code": "#(= % (if (string? %) \n        (apply str (reverse %))\n        (reverse %)\n      )\n    )", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (-> x reverse reverse)))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 27, "code": "(fn palin [s]\n  (let [s (seq s)\n        revs (reverse s)]\n    (= s revs)\n    )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52f2ecdde4b05e3f0be25f03"}, {"problem": 27, "code": "(fn [s] (= (vec s) (-> s vec rseq vec)))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 27, "code": "(fn palindrome [lst]\n  (if (< (count lst) 1) true\n      (if (= (first lst) (last lst))\n          (palindrome (rest (butlast lst)))\n          false)))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56785234e4b05957ce8c6177"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56f8b6efe4b07572ad1a88a5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n       (palindrome? (rest (butlast s)))\n       )))", "user": "56fc1d61e4b07572ad1a88de"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "56fc7cb4e4b08d47c977819a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 27, "code": "(fn [thing] (= (apply str thing) (apply str (reverse thing))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 27, "code": "#(cond\n     (list? %1) (= %1 (reverse %1))\n     (string? %1) (= %1 (apply str (reverse %1)))\n     (vector? %1) (= %1 (reverse %1))\n  )", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f51879e4b046a417f92069"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 27, "code": "(fn [s] (= (into () s) (into () (reverse s))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 27, "code": "(fn [x] (= (seq x) \n           (reverse (seq x)\n                    )\n           )\n  )", "user": "56fee925e4b08d47c97781b7"}, {"problem": 27, "code": "(fn f [s] (if (< (count s) 2)  true \n                         (if (= (first s) (last s)) (f (drop 1 (drop-last s))) false)))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56f7bed6e4b08e7d20b96832"}, {"problem": 27, "code": "#(= (reverse %)  (reverse (reverse %)))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 27, "code": "#((fn [a b] \n     (\n       loop [r1 a, r2 b] \n       (\n         if-not (= (first r1) (first r2) )\n         false\n         (\n          if (= r1 r2 '())\n          true\n          (\n            recur  (rest r1)\n                    (rest r2)\n                   \n          )\n         )\n       )\n                      \n     )\n    )\n    % (loop [org %, rev '()]\n      (\n       if (= org '())\n       rev\n       (recur \n        (rest org)\n        (conj rev (first org))\n        )\n       ))\n  )", "user": "56f97711e4b07572ad1a88b2"}, {"problem": 27, "code": "(letfn [(f [L] \n  (if (< (count L) 2)\n    true\n    (if (= (first L) (last L))\n      (f (rest (reverse (rest (reverse L)))))\n      false\n     )\n   )\n)] f)", "user": "570005efe4b08d47c97781c4"}, {"problem": 27, "code": "(fn palindrome? [_xs]\n  (loop [xs _xs]\n    (if (or (= [] xs) (= [] (rest xs)))\n      true\n      (if (not (= (first xs) (last xs)))\n        false\n        (recur (rest (butlast xs)))))))", "user": "57006957e4b08d47c97781c8"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse (seq s))))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 27, "code": "(fn p? [s]\n  (if (< (count s) 2)\n    true\n    (if (= (first s) (last s))\n      (p? (subvec (vec s) 1 (dec (count s))))\n      false)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 27, "code": "(fn [lst] \n  (let [rlst (reverse lst)]\n    (= rlst (reverse rlst))))", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 27, "code": "#((fn [x] (if (> 2 (count x)) true (if (= (last x) (first x)) (recur (subvec x 1 (dec (count x)))) false))), (vec %))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 27, "code": "#(= (apply list %) (reverse (apply list %)))", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 27, "code": "(fn [seq] (loop [nseq seq] (if (<= (count nseq) 1) true (if (not (= (first nseq) (last nseq))) false (recur (drop 1 (drop-last 1 nseq)))))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 27, "code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56fda2bae4b08d47c97781a6"}, {"problem": 27, "code": "(fn pal [xs]\n  (let [rxs (reverse xs)\n        n (/ (count xs) 2)]\n    (= (take n xs) (take n rxs))))", "user": "56fe665be4b08d47c97781af"}, {"problem": 27, "code": "(fn [s]\n  (let [len (- (count s) 1) lim (int (/ len 2)) v (vec s)]\n    (loop [pointer 0]\n      (cond (> pointer lim) true\n            (not= (get v pointer) (get v (- len pointer))) false\n            :else (recur (+ pointer 1))))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 27, "code": "#(= (reverse (subvec (into [] %)  (int (Math/ceil (/ (count %) 2))) (count %)))  (subvec (into [] %) 0 (int (Math/floor (/ (count %) 2))  )))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (string? x) \n    (= x (apply str(reverse x)))\n  (= x (reverse x)))\n  )", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= (clojure.string/reverse s) s)\n    (= (reverse s) s)))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 27, "code": "#(let [t (vec %)] (= t (reverse t)))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 27, "code": "(fn [xs] (= (reverse (reverse xs)) (reverse xs)))", "user": "56fff6a4e4b08d47c97781c3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 27, "code": "(fn [x]\n  (cond (string? x) (= (apply str (reverse x)) x)\n        (vector? x) (= (rseq x) x)\n        :else (= (reverse x) x)))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 27, "code": "(fn [s]\n  (let [len (count s)]\n    (= (take len s) (reverse (take-last len s)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 27, "code": "#(reduce (fn [a b] (and a b)) (map = (reverse %) %))", "user": "56f0ecf4e4b04a395b9a0484"}, {"problem": 27, "code": "(fn isPal [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (and true (isPal (rest (butlast x))))\n      false)))", "user": "57027310e4b08d47c97781e2"}, {"problem": 27, "code": "(fn \n  [x]\n(if(or(= 0 (count x))(= 1 (count x)))true \n  (if(= 0 (compare (first x)(last x))) (recur (butlast(rest x))) false)))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 27, "code": "(fn [xs] (= (into [] xs)  (into [] (reverse xs))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 27, "code": "(fn pal-det [x]\n  (loop [l (vec x)]\n    (if-not (< (count l) 2)\n      (let [f (first l)\n            ls (last l)\n            middle (subvec l 1 (dec (count l)))]\n        (if-not (= ls f)\n          false\n          (recur middle) ))\n      true)))", "user": "57040195e4b08d47c9778202"}, {"problem": 27, "code": "(fn b[x] (= (reverse (reverse x)) (reverse x)))", "user": "56ef9038e4b04a395b9a0460"}, {"problem": 27, "code": "(fn [k] (= (apply str k) (apply str (reverse k))))", "user": "56ecf2e6e4b04a395b9a0440"}, {"problem": 27, "code": "(fn palindrome [x]\n    (= (reverse(reverse x)) (reverse x)))", "user": "5703d1fee4b08d47c97781fe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5702da69e4b08d47c97781e8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570362ece4b08d47c97781f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 27, "code": "(fn check [x] (= (reverse x)(seq x)))", "user": "57067a0ee4b0b0fb43fd067e"}, {"problem": 27, "code": "(fn palin? [x]\n  (or (< (count x) 2)\n      (and (= (first x) (first (reverse x)))\n           (palin? (drop-last (rest x))))))", "user": "56eaf8f1e4b04a395b9a0419"}, {"problem": 27, "code": "(fn [s]\n  ((fn [a b]\n    (if (= a '())\n      true\n      (if (= (first a) (first b))\n        (recur (rest a) (rest b))\n        false))) s (reverse s)))", "user": "570708fce4b0b0fb43fd0687"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5706d8dfe4b0b0fb43fd0685"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 27, "code": "#(loop [m % n (reverse %)]\n   (if (empty? m) true (if (not (= (first m) (first n))) false (recur (rest m) (rest n)))))", "user": "56c89c2ce4b0ed865f9758d4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57082299e4b0b0fb43fd0698"}, {"problem": 27, "code": "(fn [s]\n  (let [s (seq s)]\n    (= s (reverse s))))", "user": "5709eacde4b0b0fb43fd06b3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 27, "code": "(fn [x]\n  (if (sequential? x)\n    (= x (reverse x))\n    (= x (clojure.string/join (reverse x)))))", "user": "570306cae4b08d47c97781ec"}, {"problem": 27, "code": "(fn [something]\n  (= (seq something) (reverse something)))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 27, "code": "#(if (even? (count %))\n    (= (take (/ 2 (count %)) %) (take (/ 2 (count %)) (reverse %)))\n    (= (take (/ 2 (dec (count %))) %) (take (/ 2 (dec (count %))) (reverse %))\n  )\n)", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 27, "code": "(fn [m]\n  (= (seq m) (reverse m))\n)\n\n;(if (empty? m)\n;    true\n;    (if  (= (first m) (last m))\n;      (recur (drop 1 (drop-last m)))\n;      false\n;    ))\n;\n;\n;\n;\n;\n;\n;", "user": "570006f1e4b08d47c97781c5"}, {"problem": 27, "code": "(fn palin [xs] (every? true? (map #(= % %2) xs (reverse xs ))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 27, "code": "#(if (= (apply str %) (apply str (vec (reverse %)))) true false)", "user": "56ab7578e4b03c432f18733d"}, {"problem": 27, "code": "#(loop [x %] (if (> (count x) 1) (if (= (first x) (last x)) (recur (rest (butlast x))) false) true))", "user": "570bb66de4b0b0fb43fd06c2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570dfc96e4b0b0fb43fd06e4"}, {"problem": 27, "code": "(fn [col]\n    (let [\n          ; / rounds up\n          n (/ (count col) 2)\n          first-collection (take n col)\n          second-collection (take-last n col)\n          ]\n      \n      (= (reverse second-collection) first-collection)\n      )\n    \n  )", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 27, "code": "(fn [col] (= (reverse col) (sequence col)))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 27, "code": "(fn [x]\n          (if (string? x)\n                 (= x (apply str (reverse x)))\n                      (= x (reverse x))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 27, "code": "#(let [s (seq %)] (= (reverse s) s))", "user": "56f3e77ee4b046a417f92058"}, {"problem": 27, "code": "(fn [w] (= (seq w) (reverse w)))", "user": "570f0bcde4b0b0fb43fd06fe"}, {"problem": 27, "code": "(fn [xs] (every? true?  (map #(= %1 %2) xs (reverse xs))))", "user": "570dd7ece4b0b0fb43fd06e1"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x)\n     (reverse x))\n  )", "user": "570f41f8e4b0b0fb43fd0702"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 27, "code": "(fn \n[pos-seq]\n  (let [a-seq (seq pos-seq)]\n    (= a-seq (reverse a-seq))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 27, "code": "(fn [a] (let [z (seq a)] (= z (reverse z))))", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 27, "code": "(fn pal [s]\n  (if (< (count s) 2)\n     true\n     (and (= (first s) (last s)) (pal (drop 1 (drop-last (seq s)))))))", "user": "570f8fcee4b09c608db70423"}, {"problem": 27, "code": "(fn [v] (true? (= (reduce str (reverse v)) (reduce str v))))", "user": "571077e8e4b09c608db70434"}, {"problem": 27, "code": "(fn palindrome?[x](cond (empty? (rest x)) true (not= (first x) (last x)) false :else (palindrome? (rest (butlast x)))))", "user": "57109477e4b09c608db70435"}, {"problem": 27, "code": "#(loop [items %]\n   (if (empty? items)\n     true\n     (if (not= (first items) (last items))\n       false\n       (recur (->> (drop 1 items)\n                   (drop-last 1))))))", "user": "5711b532e4b09c608db70449"}, {"problem": 27, "code": "(fn palindrome? [sq]\n  (loop [i (int (/ (count sq) 2))\n         s sq\n         r (reverse sq)]\n    (cond (= 0 i) true\n          (= (first s) (first r)) (recur (dec i) (rest s) (rest r))\n          true false)))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 27, "code": "(fn [obj]\n  (= obj\n     (if (string? obj)\n       (clojure.string/reverse obj)\n       (reverse obj))))", "user": "571107b3e4b09c608db7043f"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "57126104e4b09c608db70458"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 27, "code": "(fn [x] (every? #(apply = %1) (map list x (reverse x))))", "user": "5710140fe4b09c608db7042e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 27, "code": "(fn a [b]  \n  (if (string? b) (= b (clojure.string/reverse b)) (= b (reverse b)))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 27, "code": "#(= (reverse (into '() %)) (into '() %))", "user": "57122b20e4b09c608db70451"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54be9b81e4b0ed20f4ff6ef1"}, {"problem": 27, "code": "(fn pal [seq] \n  (if (empty? seq)\n    true\n    (if (= (first seq) (last seq))\n      (recur (drop-last 1 (rest seq))\n         )false)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "user": "5713f874e4b07c98581c3ab1"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57080694e4b0b0fb43fd0697"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 27, "code": "(fn p [x]\n  (if (= (count x) 0)\n    true\n  \t(if (not= (first x) (last x))\n      false\n      (p (butlast (rest x))))))", "user": "57152731e4b07c98581c3ad0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5716845be4b07c98581c3afa"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5713e307e4b07c98581c3aaf"}, {"problem": 27, "code": "#(= ((comp reverse reverse) %) (reverse %))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 27, "code": "(fn[x] (reduce #(and (= (first %2) (second %2)) %1) true (zipmap x (reverse x))))", "user": "57168a0de4b07c98581c3afb"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (clojure.string/reverse x)) (= (reverse x) x)))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 27, "code": "#(= (reverse %) ((comp reverse reverse) %))", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 27, "code": "#(if (= (into [] (reverse %)) ( into [] % ) ) true false)", "user": "5710c24be4b09c608db70439"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570ed30ae4b0b0fb43fd06f6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 27, "code": "#(= (if (string? %) \n    (apply str (reverse %)) \n    (reverse %))\n  %)", "user": "57129ed7e4b07c98581c3a8b"}, {"problem": 27, "code": "(fn isPalindrome?\n    [lista]\n    (= (map str lista) (reverse (map str lista))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 27, "code": "(fn [xs]\n  (cond (string? xs) (= (str (reverse xs) xs))\n        :otherwise (= (reverse xs) xs)))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (#(= (% coll) coll)\n    (if (string? coll) clojure.string/reverse reverse)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 27, "code": "(fn palindrome [list]\n  (let [size (count list)\n        mid (int (/ size 2))\n        first-half (nthnext (reverse list) mid)\n        sec-half (nthnext list mid)]\n    (= first-half sec-half)))", "user": "5716cc16e4b07c98581c3b02"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57124786e4b09c608db70457"}, {"problem": 27, "code": "(fn[x](= (into [] x) (reverse(into [] x))))", "user": "571456f1e4b07c98581c3abb"}, {"problem": 27, "code": "(fn[x] (= (into [] x) (reverse(into [] x))))", "user": "5714401fe4b07c98581c3ab7"}, {"problem": 27, "code": "(fn [x] \n  (= ((fn [sec]\n        (let [count (count sec)\n              is-string (string? sec)\n              half (int (Math/floor (/ count 2)))\n              half-sec  (drop-last half sec)\n              palindrome (concat half-sec (if (even? count)\n                                           (reverse half-sec)\n                                           (rest (reverse half-sec))))]\n          (if is-string\n            (clojure.string/join palindrome)\n            palindrome)))\n      x)\n     x))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56739bdce4b05957ce8c6122"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs)(map identity xs)))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56f02c90e4b04a395b9a0472"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 27, "code": "(fn test-p [x]\n    (if (= [] x)\n        true\n        (if (= (first x) (last x))\n            (test-p (rest (butlast x)))\n            false)\n        )\n    )", "user": "5716d585e4b07c98581c3b03"}, {"problem": 27, "code": "#(= % (if (string? %)\n         (apply str (reverse %))\n         (reverse %)))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "570d5b10e4b0b0fb43fd06dc"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 27, "code": "(fn [coll] (loop [coll coll]\n             (let [left (count coll)]\n               (cond\n                (= 0 left) true\n                (= 1 left) true\n                (not (= (first coll) (last coll))) false\n                :else (recur (rest (butlast coll)))))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)] (= s (reverse s))))", "user": "571d063ee4b0145328a76272"}, {"problem": 27, "code": "#(= (reverse %1) ( seq %1))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 27, "code": "(fn\n  [x]\n  (= (seq x) (reverse x)))", "user": "570a9be7e4b0b0fb43fd06b6"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (reverse (seq coll)) (seq coll)))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 27, "code": "#(= (reverse (vec %1)) (vec %1))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 27, "code": "(fn [x]\n  (\n   loop [\n         a (first x)\n         b (last x)\n         n (-> x rest butlast)\n        ]\n   (\n    \tcond\n    \t\t(nil? a)\n    \t\t\ttrue\n    \t\t(not= a b)\n    \t\t\tfalse\n    \t\t:else\n    \t\t\t(recur (first n) (last n) (-> n rest butlast))\n   )\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 27, "code": "#(= (vec %1) (rseq (vec %1)))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 27, "code": "(fn \n  [w]\n  (let [reversed (reverse w)]\n    (loop [w1 w\n           w2 reversed]\n      (if (= (first w1) (first w2)) \n        (if (nil? (first w1))\n                  true\n                  (recur (rest w1) (rest w2)))\n        false\n        )\n      )\n    )\n  )", "user": "571b900ae4b07c98581c3b69"}, {"problem": 27, "code": "(fn [col]\n  (= (reverse col) (seq col)))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "571dd145e4b0145328a76283"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 27, "code": "#(loop [idx 0 cnt (quot (count %) 2) res true] (if (or (false? res) (= cnt 0)) res (recur (inc idx) (dec cnt) (= (nth % idx) (nth (reverse %) idx)))))", "user": "571eeb49e4b0145328a7629c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "571fb6a0e4b0145328a762b5"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "4df73d64535d04ed9115e775"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "571a31e3e4b07c98581c3b47"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 27, "code": "(fn [a-seq]\n  (= (reverse a-seq) (seq a-seq)))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 27, "code": "(fn\n  [lst]\n  (cond\n    (string? lst) (= lst (apply str (reverse lst)))\n    :else (= lst (reverse lst))))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 27, "code": "(fn\n  [coll]\n  (let [reversed (reverse coll)\n        collSeq (seq coll)]\n    (if (= reversed collSeq)\n      true\n      false)))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "571e6d73e4b0145328a76292"}, {"problem": 27, "code": "(fn pol [e] \n  (cond \n    (string? e)\n      (= (.toString (.reverse (StringBuilder. e))) e)\n    :else\n      (= (reverse e) e)))", "user": "566096bee4b068f2fe63dc59"}, {"problem": 27, "code": "(fn [coll] (= (apply str coll) (apply str (reverse coll))))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "566e996ae4b0a866af6896dd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 27, "code": "(fn palindrome? [ls] (= (take (int (/ (count ls) 2)) ls) (reverse (drop (/ (count ls) 2) ls))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 27, "code": "(fn [lst]\n (every? true? (map #(= %1 %2) lst (reverse lst)))\n  )", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "571e819ae4b0145328a76294"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 27, "code": "(fn [input]\n  (let [collection (seq input)]  \n  (= \n    collection\n    (reduce conj '() collection)) ) )", "user": "56d9883ae4b0ea9b8538f7f4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 27, "code": "(fn \n  [x]\n  (= (seq x) (reverse x))\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5722b6ece4b0c5bde472c0d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 27, "code": "(fn [s] \n   (let [str-cnt (count s) beg (seq (take (quot str-cnt 2) s)) end (seq (take (quot str-cnt 2) (reverse s)))] \n     (if (= beg end) \n       true\n       false))\n   )", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570243c4e4b08d47c97781dc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5721cd3be4b0c5bde472c0ba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 27, "code": "(fn [l]\n  (= (seq l) (reverse l)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 27, "code": "(fn\n  [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 27, "code": "(fn p\n  [x]\n  (cond \n   (= (seq x) (reverse (seq x)))\n   true\n  :else false))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 27, "code": "(fn [xs]\n  (let [rev (fn [xs]\n    \t\t\t(reduce (fn [memo x] (cons x memo)) [] xs))]\n    (= (seq xs) (rev xs))\n    ))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 27, "code": "(fn palindrome [l]\n   (if (empty? l)\n     true\n   \t (if (= (first l) (last l))\n       (recur (rest (butlast l)))\n       false)))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 27, "code": "#(loop [s %]\n   (cond \n    (empty? s) true\n    (= 1 (count s)) true\n    (not (= (first s) (first (reverse s)))) false\n    :else (recur (rest (reverse (rest s))))\n    ))", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "571f341de4b0145328a762a0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57262196e4b0c5bde472c11e"}, {"problem": 27, "code": "(fn [vals]\n  (=\n    (vec vals)\n    (reverse (vec vals))\n  )\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51c84a9ce4b07ef393169e54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 27, "code": "(fn c27 [[& sec]] \n  (if \n  \t(empty? sec) true (if (not= (first sec) (last sec)) false (c27 (rest (butlast sec))))))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x)))(= x (reverse x))))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 27, "code": "#( = (reverse (seq %)) (seq %))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 27, "code": "#(= (seq %1) (reduce conj '() %1))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57262710e4b0c5bde472c120"}, {"problem": 27, "code": "#(= (seq %) (rseq (vec %)))", "user": "5729277fe4b0c6e51e0d2b17"}, {"problem": 27, "code": "(fn palindrome? [lst]\n  (cond\n   \t(empty? lst) true\n   \t(not= (first lst) (last lst)) false\n   \t:else (palindrome? (rest (butlast lst)))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "55e46caae4b050e68259b451"}, {"problem": 27, "code": "(fn palindrome [xs] \n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs))\n         (palindrome (drop-last (rest xs))))))", "user": "572a35a9e4b0f4d77e65122f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 27, "code": "#(= (seq %) (-> % seq reverse))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54249bcce4b01498b1a71afb"}, {"problem": 27, "code": "(fn [s] (= (vec s) (vec (reverse s))))", "user": "5603defae4b0c80df0ca2650"}, {"problem": 27, "code": "(fn[coll] (loop [c coll ]\n            (let [[f & r] c [l & i] (reverse r)]\n            (if (<= (count c) 1)\n                true\n                  (if (= f l)\n                    (recur i)\n                    false\n                    )\n              ))))", "user": "570e8d86e4b0b0fb43fd06f2"}, {"problem": 27, "code": "(fn \n  [lst] \n  (= (seq lst) (reverse lst)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 27, "code": "#(let [operand (seq %)] (= operand (reverse operand)))", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "571edeeae4b0145328a7629b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55f4394ae4b06e875b46ce69"}, {"problem": 27, "code": "(fn [sq]\n    (loop [sqpart sq]\n      (if (= (first sqpart) (last sqpart))\n        (if (> (count sqpart) 2)\n          (recur (drop-last (drop 1 sqpart)))\n          true\n          )\n        false\n        )\n      )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 27, "code": "(fn [x] (every? #(true? %1) (map #(= %1 %2) x (reverse x))))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57220050e4b0c5bde472c0c1"}, {"problem": 27, "code": "(fn is-palindrome\n  [s]\n  (if (<= (count s) 1)\n    true\n    (if-not (= (first s) (last s))\n      false\n      (recur (rest (butlast s))))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 27, "code": "(fn [xs]\n    (= (apply str xs) ((comp (partial apply str) reverse) xs)))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "553e3260e4b0a04f792994eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 27, "code": ";; good answer:  #(= (seq %) (reverse %))\n;; my answer: \n(fn [sqnc] (loop [s sqnc]\n      (if (<= (count s) 1) true\n         (do\n            (if (not= (first s) (last s)) false\n               (recur (drop-last 1 (drop 1 s))))))\n              ))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 27, "code": "(fn\n  [s]\n  (let [m (into '[] s)]\n    (= m (reverse m))))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "572cb21fe4b0cd1946bd0f5c"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "572bc7cae4b0cd1946bd0f45"}, {"problem": 27, "code": "(fn[n] (= (seq n) (reverse n)))", "user": "572d41e6e4b0cd1946bd0f6d"}, {"problem": 27, "code": "(fn\n  [x]\n  (if (= (reverse x) (seq x)) true false))", "user": "56620138e4b068f2fe63dc71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "572e43f7e4b0cd1946bd0f83"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 27, "code": "(fn p [x] \n  (cond \n   (<= (count x) 1) true\n   :else  \n    (cond \n\t(= (first x) (last x)) (p (drop-last (rest x)))\n        :else false\n    )\n   )\n  )", "user": "57303ba6e4b0cd1946bd0fa5"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse (seq l))))", "user": "570b4db8e4b0b0fb43fd06bf"}, {"problem": 27, "code": "#(loop [c (first %) tail %]\n    (if (empty? tail)\n      true\n      (and (= c (last tail)) (recur (second tail) (-> tail rest reverse rest)))))", "user": "5731e5a1e4b0cd1946bd0fca"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "570940a9e4b0b0fb43fd06aa"}, {"problem": 27, "code": "(fn check-ends [x]\n  (if (or (= 1 (count x)) (= 0 (count x))) true\n    (if (not (= (first x) (last x)))\n      false\n      (check-ends (butlast (rest x))))))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "52b7e163e4b0c58976d9ad54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54cf54b1e4b018d918be98cc"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "57275755e4b0c5bde472c13b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 27, "code": "(fn palindrome [c]\n  (if (< (count c) 2) \n    true\n    (if-not (= (first c) (last c))\n\tfalse\n\t(palindrome (drop-last (rest c))  )\n    )\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 27, "code": "(fn\n  [stuff]\n  (not (some false? (map #(= %1 %2) stuff (reverse stuff)))))", "user": "572a997ce4b0f4d77e65123e"}, {"problem": 27, "code": "(fn [p]\n   (= (map-indexed vector p)\n      (map-indexed vector (reverse p))))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))\n;#(= (seq %) (seq (reverse %)))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573664bbe4b0cd1946bd1031"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57286f16e4b0c5bde472c159"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))) )", "user": "56a22d4ae4b0542e1f8d14ba"}, {"problem": 27, "code": "(fn f [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (drop-last (rest x))))))", "user": "57029859e4b08d47c97781e4"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse (seq sq))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57377ae8e4b0cd1946bd1046"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 27, "code": "(fn [test-str]\n\t(let [cmp-length (quot (count test-str) 2)]\n\t\t(= (take cmp-length test-str) (reverse (take-last cmp-length test-str)))))", "user": "572f09f2e4b0cd1946bd0f94"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57376dcbe4b0cd1946bd1044"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 27, "code": "(fn [x]\n  (= x (if (string? x)\n    (apply str (reverse x))\n    (reverse x))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 27, "code": "#(= (into [] %1) (reverse %1))", "user": "571d9669e4b0145328a7627f"}, {"problem": 27, "code": "(fn j[x] \n  (= (seq x) (reverse x))\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 27, "code": "(fn rec [x] (if (< (count x) 2)\n              true\n              (if (= (last x) (first x))\n                (rec (rest (butlast x)))\n                false\n              )\n              \n))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 27, "code": "(fn [in] \n  (let [v  (seq in), rv (reverse v)]\n    (=  v  rv)\n    )\n  \n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 27, "code": "#(= (reverse (partition 1 %)) (partition 1 %))", "user": "571172ece4b09c608db70446"}, {"problem": 27, "code": "#(loop [in-list %\n        rev-list (reverse %)]\n   (if (seq in-list)\n     (if (= (first in-list) (first rev-list))\n       (recur (next in-list) (next rev-list))\n       false) ;if\n     true) ;if\n   ) ;loop/fn", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 27, "code": "#(let [f (seq %)] (= f (reverse f)))", "user": "57372bd5e4b0cd1946bd1041"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 27, "code": "#(let [lst (apply list %)] (= lst (reverse lst)))", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 27, "code": "(fn [coll]\n  (loop [coll coll rev (reverse coll)]\n    (cond\n      (empty? coll) true\n      (= (first coll) (first rev))\n        (recur (rest coll) (rest rev))\n      :else false)))", "user": "556008aee4b0c656e3ff17be"}, {"problem": 27, "code": "(fn malindrome\n  [lst]\n  (= (seq lst) (reverse lst)))", "user": "573b487de4b0cd1946bd10a1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 27, "code": "(fn [a]\n  (= (seq a) (reverse a)))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 27, "code": "(fn palindrome? \n  ([coll] (palindrome? coll (reverse coll)))\n  ([ordered reversed] \n   (if (empty? ordered)\n     true\n     (and \n      (= (first ordered) (first reversed))\n      (palindrome? (rest ordered) (rest reversed))))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 27, "code": "#(if (= java.lang.String (type %)) (= % (apply str (into '() %))) (= % (into '() %)))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 27, "code": "(fn [c] (= (reverse (seq c)) (seq c) ))", "user": "572a543ee4b0f4d77e651235"}, {"problem": 27, "code": "(fn [thelist]\n  (let [list1 (vec thelist)\n        list2 (reverse list1)]\n   (= list1 list2)))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 27, "code": "(fn [x] (= (reverse (into () x)) (into () x)))", "user": "57261810e4b0c5bde472c11c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "573cc62de4b05c31a32c0809"}, {"problem": 27, "code": "(fn [l] (= (vec l) (reverse (vec l))))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573c8377e4b0cd1946bd10c7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 27, "code": "(fn mf\n  ([sq]\n  \t(mf sq (reverse sq)))\n  ([sq qs]\n   \t(if (seq sq)\n   \t\t(if (= (first sq) (first qs))\n     \t\t(mf (rest sq) (rest qs))\n         \tfalse)\n      \ttrue)))", "user": "57237a02e4b0c5bde472c0e5"}, {"problem": 27, "code": "(fn palindrome? [ls]\n  (if (empty? ls)\n    true\n    (and \n      (= (first ls) (last ls)) \n      (palindrome? (rest (drop-last ls))))))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (let [[x & xs] s]\n    (if (empty? xs)\n      true\n      (if (= x (first (reverse xs)))\n        (palindrome? (reverse (rest (reverse xs))))\n        false))))", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "572d6d62e4b0cd1946bd0f71"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (rseq (vec x)))) (= x (rseq (vec x)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 27, "code": "(fn \n  [theSeq]\n  (= (seq theSeq) (reverse theSeq))\n  )", "user": "573de63fe4b05c31a32c081c"}, {"problem": 27, "code": "(fn [arr] (= (reverse (reverse arr )) (reverse arr )))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 27, "code": "(fn [s] (let [q (seq s)] (= q (reverse q))))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 27, "code": "(fn [s]\n  (let [lst (apply list s)]\n    (= (reverse lst) lst)))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 27, "code": "(fn [x]\n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "5740f821e4b05c31a32c085e"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 27, "code": "(fn palindrome [coll] \n      (if (empty? coll) true \n        (if-not (= (first coll) (last coll)) false \n          (palindrome (rest (take (- (count coll) 1) coll)))\n        )\n      )\n)", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 27, "code": "#(= (reverse (map (fn [x] x) %)) (map (fn [x] x) %))", "user": "5736e12ee4b0cd1946bd103a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 27, "code": ";#(= (into [] %) (reverse %))\n;#(= (seq %) (reverse %))\n(comp (partial apply =) (juxt seq reverse))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5722d621e4b0c5bde472c0d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5741defae4b05c31a32c086e"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "57434339e4b0c285004e8a9f"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "56f0714de4b04a395b9a0479"}, {"problem": 27, "code": "(fn [coll] (= coll (if (= (type coll) java.lang.String)\n             (clojure.string/reverse coll)\n             (reverse coll))))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 27, "code": "(fn [x] (reduce #(and %1 %2) (map #(apply = %)  (partition 2 (interleave x (reverse x))))))", "user": "574311a5e4b05c31a32c0888"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57450a53e4b009280f9f2b45"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5741d317e4b05c31a32c086c"}, {"problem": 27, "code": "#(let [m (quot (count %) 2)] (= (reverse (take-last m %)) (take m %)))", "user": "57442c96e4b009280f9f2b33"}, {"problem": 27, "code": "(fn palin? [x]\n  (if (string? x)\n    (palin? (seq x))\n    (= x (reverse x))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57454e25e4b009280f9f2b4a"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 27, "code": "(fn [thing]\n  (if (<= (count thing) 1)\n    true\n    (if (not= (first thing) (last thing))\n      false\n      (recur (rest (drop-last thing))))))", "user": "574660d7e4b009280f9f2b62"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5745b884e4b009280f9f2b53"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573ecb77e4b05c31a32c0832"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))\n\n; (fn [x] (= (seq x) (reverse x)))", "user": "57465526e4b009280f9f2b61"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "571a460ce4b07c98581c3b4d"}, {"problem": 27, "code": "(fn myfn [a] \n\t(every? true? (map \n\t\t(fn [i] (= (nth a i) (nth a (- (count a) (inc i)))))\n\t\t(range (count a)))))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 27, "code": "(fn[a-s]\n\t(let [a-seq (vec a-s)\n          s (.size a-seq)\n\t\t  step (quot s 2)]\n\t  (loop [i 0\n\t  \t     r false]\n\t  \t(if (= i step)\n\t  \t\tr\n\t  \t\t(recur (inc i)\n\t  \t\t\t   (= (nth a-seq i) (nth a-seq (- s i 1))))))))", "user": "573eb8f2e4b05c31a32c082f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 27, "code": "(fn \n  [coll]\n  (let\n    [revcoll (reverse coll)]\n  \t(= coll\n      (if (string? coll)\n       (apply str revcoll)\n       revcoll))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 27, "code": "(fn pal [seq] (cond \n               (< (count seq) 2) true\n               (not= (first seq) (last seq)) false\n               :else (pal (rest (butlast seq)))))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5745ca24e4b009280f9f2b56"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5748a2d4e4b009280f9f2b8f"}, {"problem": 27, "code": "(fn\n  [l]\n  (= (seq l) (reverse l) ) )", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573678eae4b0cd1946bd1034"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574930dae4b009280f9f2b96"}, {"problem": 27, "code": "(fn bla[x] (if (<= (count x) 1) true (and (= (first x) (last x)) (bla (butlast (next x))))))", "user": "574b008ce4b02ea114799203"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57457b1ce4b009280f9f2b4c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 27, "code": "#(= (reverse (into () %)) (into ()%))", "user": "57497708e4b009280f9f2b9a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51456858e4b0e88796073408"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57488966e4b009280f9f2b8d"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57023e92e4b08d47c97781da"}, {"problem": 27, "code": "(fn f [s] \n  (or (empty? s) \n      (and (= (first s) (last s)) \n           (f (rest (butlast s))))))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 27, "code": "(fn [x] (let [fwd (seq x) rev (reverse x)] (= fwd rev)))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "574af03ce4b02ea114799202"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5742760ce4b05c31a32c0876"}, {"problem": 27, "code": "#( = (reverse ( reverse %)) (reverse %))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 27, "code": "(fn [i]\n     (if (= i (if (string? i) (apply str (reverse i)) (reverse i)))\n     true false)\n    )", "user": "54f0aab1e4b024c67c0cf8a1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "574c66e1e4b02ea11479921d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574e7be7e4b02ea114799242"}, {"problem": 27, "code": "(fn palindrome [lst]\n  (if (or (empty? lst) (= 1 (count lst)))\n    true\n    (if (= (first lst) (last lst))\n    (-> lst rest drop-last palindrome)\n    false)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 27, "code": "(fn p [s] \n  (if (not= (first s) (last s)) \n    false \n    (if (< (count s) 2) \n      true \n      (p (take (- (count s) 2) (rest s))))))", "user": "574f1780e4b02ea114799254"}, {"problem": 27, "code": "(fn\n  [coll]\n  (= (apply str coll) (apply str (reverse coll))))", "user": "4fe54675e4b0e8f79898fec1"}, {"problem": 27, "code": "(fn palindrome [l]\n  (= (seq l) (reverse l)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 27, "code": "#(loop [s % acc 0]     \n          (if (> acc (/ (count s) 2)) \n             true\n             (if (not= (nth s acc) (nth s (- (count s) acc 1))) \n                 false\n                 (recur s (inc acc))\n              )\n          )\n  )", "user": "57501de0e4b02ea11479926c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57501c83e4b02ea11479926b"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 27, "code": "(fn [x]\n   (= (take 1 x) (take-last 1 x))),", "user": "5750211be4b02ea11479926d"}, {"problem": 27, "code": "#(let [part-to (quot (count %1) 2)\n       part-one (take part-to %1)\n       m? (not= ((fn [a] (* a 2)) part-to) (count %1))\n       part-two (reverse (drop (if m? (+ 1 part-to) part-to) %1))]\n   (= part-one part-two))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 27, "code": "(fn [coll]\n      (if (= (type coll) String)\n        (= (map str coll) (map str (reverse coll)))\n        (= coll (reverse coll))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 27, "code": "(fn [x]\n  (if (not (seq? x))\n    true\n    (= x (reverse x))))", "user": "574ef99ae4b02ea114799250"}, {"problem": 27, "code": "(fn [alist]\n  (cond\n    (not= (first alist) (last alist)) false\n    (or (empty? alist) (= 1 (count alist))) true\n    :else (recur (butlast (drop 1 alist)))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "574ef641e4b02ea11479924f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5716960de4b07c98581c3afd"}, {"problem": 27, "code": ";#(= (seq %) (reverse (seq %)))\n\n#(= (seq %) (reverse %))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "575086e7e4b02ea114799276"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 27, "code": "(comp #(= (reverse %) %) seq)", "user": "5379946be4b06839e8705e56"}, {"problem": 27, "code": "(fn [x] \n  (= (apply str x) (apply str (reverse x))))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 27, "code": "(fn [collection] (= (seq collection) (reduce conj () collection)))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 27, "code": "#(or (= % (reverse %)) (= % (clojure.string/join (reverse %))))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 27, "code": "(fn [t]\n (=  (reverse t) (seq t)))", "user": "574abbfbe4b02ea114799200"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 27, "code": "#( = ( seq % ) ( reverse % ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570cd4bde4b0b0fb43fd06cf"}, {"problem": 27, "code": "(fn p[x] \n  (if (>= 1 (count x)) \n    true \n    (if (= (first x) (last x))\n    \t(p (rest (drop-last x)))\n      \tfalse                 \n    )\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 27, "code": "(fn [x]\n  (= (lazy-seq x) (lazy-seq (reverse x))))", "user": "574e8975e4b02ea114799244"}, {"problem": 27, "code": "(fn palindrome [x]\n  (case (count x)\n    0 \ttrue\n    1 \ttrue\n    (and (= (first x) (last x)) (palindrome (rest (take (dec (count x)) x))))))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "57583451e4b02ea114799304"}, {"problem": 27, "code": "(fn [sx] (= (apply str sx) (apply str (reverse sx))))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "574f3a40e4b02ea114799258"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "575a0ef0e4b02ea114799335"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "575aa081e4b02ea114799346"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "54d0c32de4b0e8a36923e5cf"}, {"problem": 27, "code": "(fn palindrome-detector\n  ([x]\n   (if (< (count x) 2)\n     true\n     (if (= (last x) (first x))\n       (palindrome-detector (butlast (rest x)))\n       false\n     )\n   )\n  )\n)", "user": "5759e317e4b02ea114799330"}, {"problem": 27, "code": "(fn [coll] (= (apply str coll) (apply str (reverse coll))))", "user": "575595ede4b02ea1147992c7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57509096e4b02ea114799277"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 27, "code": "(fn [coll]\n  (let [n (quot (inc (count coll)) 2)]\n    (= (take n coll)\n       (take n (reverse coll)))))", "user": "575cbe44e4b02ea114799374"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "575d5831e4b02ea114799381"}, {"problem": 27, "code": "(fn [x] (if (= (apply list x) (reverse x)) true false))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 27, "code": "(fn [x]\n   (= (seq x) (reverse (seq x))))", "user": "575c23d3e4b02ea114799369"}, {"problem": 27, "code": "(fn [xs] (or (empty? (rest xs)) (and (= (first xs) (last xs)) (recur (rest (butlast xs))))))", "user": "575556fae4b02ea1147992c3"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "57599ed3e4b02ea114799323"}, {"problem": 27, "code": "(fn f [x] (\n\t\tif (= () x)\n\t\t\ttrue\n\t\t\t(if (= (last x) (first x)) \n\t\t\t\t(f (rest (butlast x))) \n\t\t\t\tfalse\n\t\t\t)\n\t\t\t\n\t\t)\n\t)", "user": "575dda55e4b02ea11479938c"}, {"problem": 27, "code": "#(= (seq %)  (reverse (seq %)))", "user": "575d9ac6e4b02ea114799387"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 27, "code": "(fn [x]\n  (if (instance? String x)\n    true\n    (= (reverse x) x)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 27, "code": "(fn [what] (= (reverse what) ((comp reverse reverse) what)))", "user": "575e7335e4b0846ea39baf28"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "573ed018e4b05c31a32c0833"}, {"problem": 27, "code": "(fn f [col]\n    (cond\n      (or (nil? col) (= 0 (count col))) true\n      (-> col count odd?) (let [i (- (/ (count col) 2) 1)]\n                            (f (concat (take i col) (take-last i col))))\n      (= (first col) (last col)) (f (butlast (drop 1 col)))\n      :else false))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 27, "code": "(fn foo [x]\n  (if (empty? x) true \n    (and (= (first x) (last x))\n         (foo (-> x rest reverse rest reverse)))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 27, "code": "(comp #(= % (rseq %)) vec)", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 27, "code": "(fn [list] (= (seq list) (reverse list)))", "user": "5758e39be4b02ea114799313"}, {"problem": 27, "code": "(fn [c]\n  (if (or (nil? c) (< (count c) 2)) true\n  \t(if (not= (first c) (last c)) false\n  \t\t(recur (-> c ((partial drop 1)) (drop-last))))))", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "575ab695e4b02ea114799350"}, {"problem": 27, "code": "(fn is-palindrome? [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (is-palindrome? ((comp rest reverse rest reverse) x))\n      false)))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 27, "code": "(fn [text]\n  (loop [currentText text]\n      (cond\n        (empty? currentText) true\n        (not= (last currentText) (first currentText)) false\n        :else (recur (-> currentText rest reverse rest)))))", "user": "57597fade4b02ea11479931d"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "575aa21de4b02ea114799348"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57614c20e4b0994c1922fb86"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (= (first l) (last l)))", "user": "5761724de4b0994c1922fb89"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (let [input (seq s)]\n    (= (reverse input) input)))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (if (= (reverse s) (reverse (reverse s)))\n      true\n      false)\n    (if (= (reverse s) s)\n      true\n      false)))", "user": "56a50330e4b0542e1f8d14df"}, {"problem": 27, "code": "(fn palindrome [x]\n   (if (string? x)\n      (= x (apply str (reverse x)))\n      (= x (reverse x))\n      ))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57560772e4b02ea1147992d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57607706e4b08062f99a4e97"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "57614948e4b0994c1922fb83"}, {"problem": 27, "code": "#(loop [items %]\n   (if (not= (first items) (last items))\n     false\n     (if (not-empty items)\n       (recur (rest (drop-last items)))\n       true)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse (seq n))))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 27, "code": "(fn [xs]\n  (let [v (vec xs)]\n    (= v (rseq v))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 27, "code": "(fn paldet [x]\n        (cond (= (nthnext x\n                            (int (/ (count x) 2)))\n                 (nthrest (reverse x)\n                                   (int (/ (count x) 2)))\n                 ) true\n              :else false))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 27, "code": "#(every? (fn [[a b]] (= a b)) (map list (vec %) (reverse %)))", "user": "57642916e4b0994c1922fbee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5756eff6e4b02ea1147992e7"}, {"problem": 27, "code": "(fn[x]( apply = [(seq x) (reverse x)]))", "user": "5762b38ce4b0994c1922fbad"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 27, "code": "#(loop [s %\n        acc true]\n   (if (empty? s)\n     acc\n     (recur (rest (butlast s)) (and acc (= (first s) (last s))))))", "user": "5765c7bbe4b0a07e8fc18096"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 27, "code": "(fn my-test [x]\n  (= (seq x) (reverse x)))", "user": "566e5a03e4b0a866af6896d8"}, {"problem": 27, "code": "(fn [coll] \n  (loop [u (seq coll) \n         v (reverse (seq coll))]\n    (if (> (count u) 0) \n      (if (= (first u) (first v))\n        (recur (rest u) (rest v))\n        false)\n      true\n      )))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 27, "code": "(fn pal [xs]\r\n  (if (< 0 (count xs))\r\n    (= (str (first xs)) (str (last xs)))\r\n    (if (= (str (first xs)) (str (last xs)))\r\n      (recur (drop (drop-last xs)))\r\n      false)))", "user": "56b12c53e4b0982f16b37de6"}, {"problem": 27, "code": "#(= ((comp reverse reverse) %) (reverse %))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5710b136e4b09c608db70437"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "575683aee4b02ea1147992dc"}, {"problem": 27, "code": "(fn [coll] (let [s (seq coll)] (= s (reverse s))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (let [f (first coll)\n        l (last coll)\n        matches (= f l)]\n    (if (<= 3 (count coll))\n      matches\n      (and matches\n           (recur (drop-last 1 (drop 1 coll)))))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 27, "code": "(fn [a] (= (reverse a) (seq a)))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573df35ce4b05c31a32c081e"}, {"problem": 27, "code": "(fn palin [s]\n\t(if-not (or (= (count s) 1) (= (count s) 0))\n\t(if (= (first s) (last s))\n\t\t(->> s\n\t\t\t(drop 1)\n\t\t\t(drop-last 1)\n\t\t\tpalin)\n\t\tfalse)\n\ttrue))", "user": "5760d426e4b08062f99a4e9f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5742bc40e4b05c31a32c087b"}, {"problem": 27, "code": "#(= % (if (string? %)(apply str (rseq (vec %))) (rseq (vec %))))", "user": "575d63e9e4b02ea114799382"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57650419e4b0994c1922fc09"}, {"problem": 27, "code": "(fn [xs]\n  (let [reversed (reverse xs)]\n    (if (string? xs)\n      (= xs (apply str reversed))\n      (= xs reversed))))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "575d16f8e4b02ea114799377"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "576aa367e4b0a07e8fc1811e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 27, "code": "(fn [x] (let [y (if (seq? x) x (seq x))] (if (= y (reverse y)) true false)))", "user": "5742d82ae4b05c31a32c0881"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 27, "code": "(fn [listo] (= (reverse (into '() listo)) (into '() listo)))", "user": "575aa61ae4b02ea11479934e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 27, "code": "#(= (seq % ) (reverse (seq %)) )", "user": "576be8a2e4b0a07e8fc18140"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %) ) )", "user": "57604a87e4b08062f99a4e91"}, {"problem": 27, "code": "(fn \n  [string]\n  (loop [s string]\n    (if (or (= s []) (= (count s) 1))\n      true\n      (if (= (first s) (last s))\n        (recur (drop-last (rest s)))\n        false))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 27, "code": "(fn[lst] (loop[n (- (count lst) 1) m 0] (if-not (> n m) true (if-not (= (nth lst n) (nth lst m)) false (recur (dec n) (inc m))))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 27, "code": "(fn [s]\n  (let [pivot (Math/ceil (/ (count s) 2))]\n    (= (take pivot s)\n       (take pivot (reverse s)))))", "user": "576da825e4b0979f8965156c"}, {"problem": 27, "code": "(fn [col]\n  (if (seq? col)\n  \t(= col (reverse col))\n    (recur (sequence col))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 27, "code": "(fn [s]\n  (= s (if (string? s)\n         (apply str (reverse s))\n         (reverse s))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 27, "code": "(fn [x]\n  (loop [coll (seq x)]\n    (println coll)\n    (cond\n      (empty? coll) true\n      (= (count coll) 1) true\n      (= (first coll) (last coll)) (recur (reverse (rest (reverse (rest coll)))))\n      :else false\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 27, "code": "(fn [str]\n  (loop [s (seq str) n (count str)]\n    (if (or (= n 1) (= n 0))\n      true\n      (if-not (= (first s) (last s))\n        false\n        (recur (rest(reverse(rest s))) (- n 2))))))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 27, "code": "(fn [input]\n  (if (= (apply str (reverse input)) (apply str input))\n    true\n    false))", "user": "5759b0e6e4b02ea114799326"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "576e3258e4b0979f89651574"}, {"problem": 27, "code": "(fn [x]\n  ((fn pal [f b]\n     (if (not-empty f)\n       (if (not-empty b)\n         (if (= (first f) (last b))\n           (pal (rest f) (drop-last b))\n           false)\n         false)\n       (empty? b))) (seq x) (seq x)))", "user": "57716e11e4b0979f896515b2"}, {"problem": 27, "code": "(fn [xs]\n  (let [xs (seq xs)\n        rx (reverse xs)]\n    (= xs rx)))", "user": "5454bb07e4b0e397800069da"}, {"problem": 27, "code": "(fn [item] (= (apply str item) (apply str (reverse item))))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5768fec7e4b0a07e8fc180e2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 27, "code": "#(= (cond (string? %) (clojure.string/reverse %) :else (reverse %)) %)", "user": "577412c6e4b0979f896515f6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "576df252e4b0979f8965156f"}, {"problem": 27, "code": "#(if (= %1 (str %1))\n  (= (apply str ((partial reduce conj ()) %1) %1))\n  (= ((partial reduce conj ()) %1) %1))", "user": "56012afde4b04bb52996e17c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "57758f5de4b0979f89651621"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 27, "code": "(fn\n  [elems]\n  (if (string? elems)\n    (= (clojure.string/reverse elems) elems)\n    (= (reverse elems) elems))\n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 27, "code": "(fn [s] (= (seq s) (into '() s)))", "user": "56e43943e4b03a7c14b85a4b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57762befe4b0979f8965162f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57763002e4b0979f89651631"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5776385fe4b0979f89651632"}, {"problem": 27, "code": "(fn [item]\n  (if (string? item)\n    (if (= item (->> (reverse item)\n                  (clojure.string/join)))\n      true\n      false)\n      (if (= (reverse item) item)\n        true\n        false)))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 27, "code": "(fn [x]\n  (let [item (partition-by identity x)]\n  (= (reverse item) item)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5776e21de4b0979f89651642"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5776b47ce4b0979f8965163d"}, {"problem": 27, "code": "(fn [x]\n  (loop [tmp (seq x) result []]\n    (if (empty? tmp)\n      (let [a result b (seq x)]\n        (cond\n         (= a b) true\n         :else false))\n      (recur (butlast tmp)(conj result (last tmp)))\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "577629abe4b0979f8965162e"}, {"problem": 27, "code": "(fn mirror?\n  [s]\n  (if (= (class s) java.lang.String)\n    (= s (clojure.string/reverse s))\n    (= s (reverse s))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57780e4fe4b0979f89651657"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5777cffae4b0979f89651651"}, {"problem": 27, "code": "(fn \n  [palindrome?]\n  (let [p (seq palindrome?)]\n        (->> p (reduce #(cons %2 %1) []) (= p))))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (clojure.string/reverse coll)))\n  (= coll (reverse coll))))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57665f00e4b0a07e8fc180a5"}, {"problem": 27, "code": "(fn [arg] (every? true? (map = arg (reverse arg))))", "user": "577829f9e4b0979f8965165a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 27, "code": "#( = (reverse %) (seq %))", "user": "57619fc9e4b0994c1922fb93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "571d1234e4b0145328a76274"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5778b78be4b0979f89651666"}, {"problem": 27, "code": "(fn [s] \n  (let[c (count s)\n       middle-val (if (odd? c) (int (/ (count s) 2)) (/ (count s) 2) )]\n    (if (odd? c)\n      (let[partitions (partition (+ middle-val 1) middle-val s)] (= (first partitions) (apply reverse (rest partitions))))\n      (let[partitions (partition middle-val s)] (= (first partitions) (apply reverse(rest partitions)))))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 27, "code": "#(= (reverse %) (reverse(reverse %)))", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 27, "code": "#(= (seq % ) (reverse %))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 27, "code": "(fn [x]\n     ((fn [a b]\n         (cond \n               (and (empty? a) (empty? b)) true\n               (or (empty? a) (empty? b)) false\n               (= (first a) (first b)) (recur (rest a) (rest b))\n               :else false\n         )\n      ) x (reverse x))\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 27, "code": "#(or (= % (reverse %)) (string? %) )", "user": "577a4dc2e4b0d3393e5deaf6"}, {"problem": 27, "code": "(fn isPalindrome [x] \n  (= (seq x) (reverse x))\n)", "user": "57758671e4b0979f8965161f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "577c12dfe4b0d3393e5deb2f"}, {"problem": 27, "code": "#(=         (take (/ (count %) 2) %)  (reverse (take-last (/ (count %) 2) %)) )", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 27, "code": "(fn [lst] (let [rlst (if (string? lst) (clojure.string/reverse lst) (reverse lst))] (= lst rlst)))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5776558ee4b0979f89651633"}, {"problem": 27, "code": "(fn [word] (if (= (apply str word) (apply str (reverse word))) true false))", "user": "5775659ae4b0979f8965161b"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String)\n   (= (clojure.string/reverse %) %)\n   (= (reverse %) %))", "user": "576cb9c3e4b0979f89651551"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "577c88f5e4b0c8d87281f6c1"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))\n; This was crazy:\n;#(= \n;  (reverse (first (partition (quot (count %1) 2) %1))) \n;  (take-last (quot (count %1) 2) %1))", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 27, "code": "#(if (= (vec %) (vec (reverse %))) true false)", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 27, "code": "(fn [a] (= (map identity a) (reduce (fn [c n] (concat [n] c)) [] a)))", "user": "577da4eae4b0c8d87281f6d7"}, {"problem": 27, "code": "#(= (take (quot (count %) 2) %) (take (quot (count %) 2) (reverse %)))", "user": "5757142ae4b02ea1147992ed"}, {"problem": 27, "code": "(fn [x] (= (vec x) ((comp reverse vec) x)))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5776f39de4b0979f89651643"}, {"problem": 27, "code": "#(if (seq? %) (= % (reverse %))\n      (= (seq %) (reverse (seq %))))", "user": "577a0dc3e4b0979f8965167b"}, {"problem": 27, "code": "(fn pal [x]\n  (let [xl (seq x)\n        r (rest xl)]\n    (if (empty? r)\n      true\n      (if (= (first xl) (last xl))\n        (pal (take (- (count r) 1) r))\n        false))))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (clojure.string/reverse %))\n   (= % (reverse %)))", "user": "576d6266e4b0979f89651563"}, {"problem": 27, "code": "(fn [coll]\n  (if (= (reverse (seq coll)) (seq coll)) true false))", "user": "577fc45ae4b0d36ec5835e6e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577832f4e4b0979f8965165b"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "565cc7a6e4b068f2fe63dc19"}, {"problem": 27, "code": "(fn [s] \n  (= (seq s) (reverse s)))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "577bfef9e4b0d3393e5deb2d"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 27, "code": "(fn [coll]\n    (loop [coll (if-not (seq? coll) (seq coll) coll)]\n      (if (nil? coll) true\n      (if-not (= (first coll) (last coll))\n        false\n        (recur (butlast (rest coll))))\n\n    )))", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5097cf53e4b00ad8bab4e976"}, {"problem": 27, "code": "(fn pal? [c] \n  (if (string? c)\n    (if (= (apply str (reverse c)) c)\n      true\n      false\n      )\n  (if (= (reverse c) c)\n    true\n    false\n    )\n  ))", "user": "578151ade4b0d36ec5835e83"}, {"problem": 27, "code": "(fn [xs] (\n          = (first xs) (last xs)))", "user": "570466e6e4b0b0fb43fd0663"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574ff497e4b02ea114799266"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577e1d14e4b0c8d87281f6e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 27, "code": "(fn [s] (if (= (seq s) (seq (reverse s))) true false))", "user": "53b615cce4b047364c0444c2"}, {"problem": 27, "code": "#(= \n  (if (string? %)\n    (apply str (reverse %))\n    (reverse %))\n  %)", "user": "57691cf3e4b0a07e8fc180e7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "57719031e4b0979f896515b7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577f442ce4b0d36ec5835e60"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse n)))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 27, "code": "(fn [coll]\n  (loop [coll coll]\n    (if (empty? coll)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (drop-last coll)))\n        false))))", "user": "57861b0ce4b0ebec4cfb74ef"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 27, "code": "(fn [in]\n  (loop [xs in]\n    (if (> 1 (count xs))\n      true\n      (if (= (first xs) (last xs))\n        (recur (drop 1 (drop-last 1 xs)))\n        false))))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse(seq x))))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 27, "code": ";; 4clojure.com Problem # 27: Palindrome Detector\n(fn pal [x]\n  (let [revx (reverse x)]\n    (if (even? (count x))\n      ;even case\n      (if (= 2 (count x))\n        (if (= (first x) (first (rest x)))\n          true\n          false)\n        (if (= (first x) (first revx))\n          (pal (rest (reverse (rest (reverse x)))))\n          false))\n      ;odd case\n      (if (= 3 (count x))\n        (if (= (first x) (first revx))\n          true\n          false)\n        (if (= (first x) (first revx))\n          (pal (rest (reverse (rest (reverse x)))))\n          false))\n    )\n  )\n)", "user": "5761984fe4b0994c1922fb91"}, {"problem": 27, "code": "(fn pal [a]\n  (if (< (count a) 2)\n    true\n    (let [h (first a)\n          t (last a)]\n      (if (= h t)\n        (pal (rest (drop-last a)))\n        false))))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 27, "code": "(fn palindrome [a]\n    (let [s (seq a) x (first s) rest (drop 1 s)]\n\n        (or (= 0 (count rest))\n            (and (= x (last rest)) \n                (palindrome (-> rest count dec (take rest)))\n                )))\n)", "user": "577a444be4b0d3393e5deaf5"}, {"problem": 27, "code": "(fn [s]\n  \"palindrome detector\"\n  (= s\n  (loop [sq s\n         result ()]\n    (if (seq sq)\n      (recur (rest sq) (conj result (first sq)))\n      (if (string? s)\n        (apply str result)\n        result)))))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 27, "code": "#(= (vec %)(reverse %))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "578acd37e4b0ebec4cfb7541"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "578a08d8e4b0ebec4cfb7537"}, {"problem": 27, "code": "(fn [x] (= (seq (reverse x)) (seq x)))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 27, "code": "(fn [li]\n  (= (seq li) (reverse li)))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 27, "code": "(fn [potential-palindrome]\n  (let [palindrome (seq potential-palindrome)\n        reversed-palindrome (reverse palindrome)]\n    (= palindrome reversed-palindrome)))", "user": "578ce779e4b0ebec4cfb7561"}, {"problem": 27, "code": "(fn [v]\n  (= (seq v) (reverse v)))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5783cd26e4b0ebec4cfb74be"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "516064e5e4b009fba0926e26"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (clojure.string/join (reverse %)))\n   (= % (reverse %)))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 27, "code": "(fn [v] (= (map #(str %) v) (reverse (map #(str %) v))))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "578e5750e4b0ebec4cfb7581"}, {"problem": 27, "code": "#(= (first (partition 2 %))\n    (first (partition 2 (reverse %))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "578e04ebe4b0ebec4cfb7577"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 27, "code": "(fn [x]\n  (let [halfway (/ (count x) 2)\n        the-front (if (string? x)\n                    (vec (subs x 0 (Math/ceil halfway)))\n                    (subvec (vec x) 0 (Math/ceil halfway)))\n        the-back (reverse (if (string? x)\n                            (vec (subs x (Math/floor halfway)))\n                            (subvec (vec x) (Math/floor halfway))))]\n    (= the-front the-back)))", "user": "577feed1e4b0d36ec5835e71"}, {"problem": 27, "code": "#(= (seq %) (reverse %))\n\n;#(loop [in %\n;        out true]\n;   (if (or (empty? in) (not out))\n;     out\n;     (recur (rest(drop-last in))\n;            (and (= (last in)(first in)) out))))\n\n            \n;(fn plndrn [x] \n;  (if (empty? x) \n;    true \n;    (and \n;     (= (first x)(last x)) \n;     (plndrn(rest(drop-last x))))))", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "578f1edae4b0ebec4cfb7590"}, {"problem": 27, "code": "#(loop [p %]\n    (if (<= (count p) 1)\n      true\n      (if-not (= (first p) (last p))\n        false\n        (recur (drop-last (drop 1 p))))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577c7f46e4b0c8d87281f6c0"}, {"problem": 27, "code": "#(or (= % (reverse %)) (= (reverse (reverse %)) (reverse %)))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq     coll)\n     (reverse coll)))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "576d398be4b0979f8965155d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 27, "code": "(fn [entrada] (= (reverse entrada) (seq entrada)))", "user": "5777bb7ee4b0979f8965164d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 27, "code": "(fn [xs] (let [ys (seq xs)]\n  (= ys (reverse ys))))", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 27, "code": "(fn [x]\n  (loop [what x]\n    (cond (empty? what) true\n          (= (first what) (last what)) (recur (rest (butlast what)))\n          :else false)))", "user": "57936970e4b0e215f87e8458"}, {"problem": 27, "code": "#(let [l      (count %)\n       mid    (Math/floor (/ l 2))\n       splits (split-at mid %)\n       [top tail] [(reverse (first splits))\n                   (if (odd? l)\n                     (rest (second splits))\n                     (second splits))]]\n  (= top tail))", "user": "5790329ee4b0ebec4cfb75a7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57958dace4b0e215f87e8484"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "574cd554e4b02ea114799224"}, {"problem": 27, "code": "(fn [thing] (= thing (if (string? thing) (apply str (reverse thing))  (reverse thing))))", "user": "5751fda4e4b02ea114799295"}, {"problem": 27, "code": "(fn para [coll]\n (let [s (seq coll)]\n  (= s (reverse s))))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5796e0afe4b039eba2ecb0f0"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (>= (count x) 1)\n    (and (= (first x) (last x)) (palindrome? (rest (butlast x))))\n    true))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 27, "code": ";#(= (seq %) (reverse (seq %)))\n\n#(= (seq %) (reverse %))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 27, "code": "#(loop [word (vec %) res true] (if (not res) false (if (empty? word) true (recur (drop-last 1 (drop 1 word)) (= (take 1 word) (take-last 1 word))))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 27, "code": "(fn[x](= (seq x)(reduce conj '() x)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5799b054e4b05b1deef9adc7"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 27, "code": ";#(= (seq %) (reverse (seq %)))\n\n#(= (seq %) (reverse %))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57678ca9e4b0a07e8fc180c0"}, {"problem": 27, "code": "(fn\n  [xseq]\n  (= (apply list xseq) (reverse xseq)))", "user": "5795acb5e4b0e215f87e8486"}, {"problem": 27, "code": "(fn [coll] (= (apply list coll) (reverse coll)))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "54781b06e4b0c51c1f4d72ba"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 27, "code": "(fn pal [s] (if (empty? s) true (and (= (first s) (last s)) (-> s (rest) (butlast) (pal)))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 27, "code": "(fn [s]\n  (let [\n        palindrom? (fn palindrom?* [s] \n                     (cond \n                      (empty? s) true\n                      (= (first s) (last s)) (palindrom?* (rest (drop-last s)))\n                      :else false)\n                     )]\n    (palindrom? s)))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "57717915e4b0979f896515b3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 27, "code": "#(= (vec %1) (reverse %1))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "579f4812e4b05302be0b72fb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "579fc29fe4b0264b925669ff"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5797748ce4b039eba2ecb0fb"}, {"problem": 27, "code": "(fn my-pal [s]\n    (loop [se s]\n      (if (> 1 (count se))\n        true\n        (if (not= (first se) (last se))\n          false\n          (recur (rest (drop-last se)))\n          )\n        )\n      )\n    )", "user": "57985f98e4b039eba2ecb114"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "579fb6c2e4b0264b925669fd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5688c95de4b0dcc4269f4070"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 27, "code": "(fn [sequ]\n  (loop [newsequ sequ ispal true]\n    (if (or (empty? newsequ) (empty? (rest newsequ)) (not ispal))\n      ispal\n      (recur (rest (butlast newsequ)) (= (first newsequ) (last newsequ)))\n      )\n    )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 27, "code": "(fn fd [seq]\n  (loop [sq seq]\n    (cond (empty? sq) true\n          (empty? (rest sq)) true\n          (= (first sq) (last sq)) (recur (butlast (rest sq)))\n          :else false)))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 27, "code": "(fn [parts]\n  \n(= (\tseq parts )(reduce (fn [mylist part] (conj mylist part) ) '() parts))\n  )", "user": "579be21fe4b05b1deef9adff"}, {"problem": 27, "code": "(fn [ar] (= (first ar) (last ar)))", "user": "57a2d35be4b0c3d858beb907"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57757612e4b0979f8965161d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "57974504e4b039eba2ecb0f5"}, {"problem": 27, "code": "#(= (apply str %) (apply str(reverse %)))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54a1c22fe4b09f271ff37c4c"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a60225e4b0a96607956202"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a61332e4b0a96607956203"}, {"problem": 27, "code": "(fn [coll]\n    (let\n       [rcoll (into '() coll)]\n       (= (seq coll) rcoll)))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 27, "code": "(fn [x]\n(= (take (quot (count x) 2) x) (reverse (take-last (quot (count x) 2) x))))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 27, "code": "(fn pali? [sq]\n  (= (seq sq) (reverse sq)))", "user": "577154ffe4b0979f896515b1"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 27, "code": "(fn palindrome?\n  [some-seq]\n  (= (reverse some-seq) (lazy-seq some-seq)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a6b679e4b0a9660795620c"}, {"problem": 27, "code": "(fn [x] (every? true? (map #(==(compare %1 %2)0) (flatten(partition 1 x)) (reverse x))))", "user": "57752a2de4b0979f89651613"}, {"problem": 27, "code": "(\nfn pal [s] (if (< (count s) 2) true (if (= (first s) (last s)) (pal (drop-last (rest s))) false))\n )", "user": "57a5bdc4e4b0a966079561fd"}, {"problem": 27, "code": "(fn [coll]\n  (every? #(apply = %)\n    (partition 2 (interleave coll (reverse coll)))))", "user": "57a774e4e4b0a96607956213"}, {"problem": 27, "code": "#(loop [x %]\n   (if (empty? x) \n     true\n     (if (=(first x) (last x))\n       (recur (rest (butlast x)))\n       false)\n   ))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 27, "code": "(fn [s] (= s (if-not (string? s) (reverse s) (clojure.string/reverse s))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 27, "code": "(fn [v] (#(let [x (into '() %)] (= x (reverse x))) v))", "user": "57733764e4b0979f896515e0"}, {"problem": 27, "code": "(fn foo [l] (if (<= (count l) 1)\r\n                true\r\n                (and (= (first l) (last l)) (foo (drop-last (rest l))))))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "558869ade4b059ccff29b1f7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57aa0f9ae4b0b8559636fc63"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57aafac1e4b0b8559636fc75"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 27, "code": "(fn [x] (let [s (= (type x) java.lang.String)\n              r (if s clojure.string/reverse reverse)] (= (r x) x)))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 27, "code": "(fn [x] (if (string? x) (#(let [joined (clojure.string/join %) reversed (clojure.string/reverse joined)] (if (= joined reversed) true false)) x) (= x (reverse x))))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 27, "code": "(fn [vs]\n  (= (seq vs) (reverse vs)))", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "57a20f72e4b0c3d858beb8f5"}, {"problem": 27, "code": "(fn [coll] (= (into [] coll) (reverse coll)))", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 27, "code": "#(= % ((if (string? %)\n                                (partial apply str)\n                                identity) (reverse %)))", "user": "57abff53e4b0b8559636fc81"}, {"problem": 27, "code": "(fn [l] (->> (map #(seq [%1 %2]) l (reverse l)) (every? #(= (first %1) (second %1)))))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 27, "code": "#(= (subvec (vec %) 0 (int (/ (count %) 2)))\n    (subvec (vec (reverse %)) 0 (int (/ (count %) 2))))", "user": "57acbe5fe4b0b8559636fc8e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 27, "code": "(fn palindrome [s] (cond (or (empty? s) (= (count s) 1)) true (not (= (first s) (last s))) false :else (palindrome (take (- (count s) 2) (rest s))) ) )", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 27, "code": "(fn testa [s]\n  (if (< (count s) 2) true\n                      (if (= (first s) (last s))\n                        (testa (drop-last (rest s)))\n                        false\n\n                        )))", "user": "5798d151e4b039eba2ecb120"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "575117f8e4b02ea11479927e"}, {"problem": 27, "code": "(fn [a]\n  (every? #(true? %)(map #(= %1 %2) a (reverse a))))", "user": "57474aa4e4b009280f9f2b71"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5075e374e4b09049dea827a5"}, {"problem": 27, "code": "(fn isPalindrome [coll] (= (seq coll) (reverse coll)))", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ade6fce4b0b8559636fca5"}, {"problem": 27, "code": "#(loop [x %]\n   (if (empty? x) true\n     (if (= (first x)(last x))\n       (recur (rest (drop-last x)))\n       false)))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 27, "code": "(fn [init-s]\n  (loop [s (seq init-s)\n         left 0\n         right (dec (count s))]\n    (if (> left right)\n      true\n      (if (= (nth s left) (nth s right))\n        (recur s (inc left) (dec right))\n        false))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 27, "code": "(fn [c]\n  ; dirty hack\n  (= (reverse (reverse c))\n     (reverse c)))", "user": "5452a300e4b0e397800069c7"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "57a9b00be4b0a96607956232"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57986e2de4b039eba2ecb117"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "4fb0ccbfe4b081705acca26e"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 27, "code": "(fn [set]\n    (loop [list set truthy (if (= (first set) (last set)) true false)]\n      (if (or (empty? list) (not truthy))\n        truthy\n        (recur (drop 1 (drop-last 1 list)) (if (= (first list) (last list)) true false))\n        )\n      )\n    )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 27, "code": "#(loop [obj %]\n   (if\n     (empty? (rest obj))\n       true\n\n     (if\n       (= (first obj)\n          (first (reverse obj)))\n       (recur (rest (drop-last 1 obj)))\n\n       false\n       )\n     )\n   )", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 27, "code": "(fn\n  [lst]\n  (loop [orig lst i 0 ispal true]\n    (cond (or (= (count orig) i) (= ispal false)) ispal\n          :else (recur orig (inc i) (= (nth orig i) (nth orig (- (count orig) (inc i))))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "57343747e4b0cd1946bd1006"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "56f085d7e4b04a395b9a047e"}, {"problem": 27, "code": "#(loop [r % a 0 b (dec (count %))]\n            (cond (>= a b) true\n                  (= (nth r a) (nth r b))\n                  (recur r (inc a) (dec b))\n                  :else false\n                  ))", "user": "5386f784e4b06839e8705f17"}, {"problem": 27, "code": "#( = (take (int (/ (count %) 2)) %)\n      (reverse (drop (- (count %) (int (/ (count %) 2))) %)))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 27, "code": "#(= % (if (string? %)\n    (reduce str (reverse %))\n    (reverse %)))", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 27, "code": "#(let [half-len (quot (count %) 2)\n              first (take half-len %)\n              second (reverse (take-last half-len %))]\n             (= first second))", "user": "572af688e4b0f4d77e651249"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 27, "code": "#(\n\tloop [l %]\n\t\t(if (or (empty? l) (= (count l) 1))\n\t\t\ttrue\n\t\t\t(if (= (first l) (last l))\t\t\n\t\t\t\t(recur (butlast (rest l)))\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n)", "user": "57b2ca30e4b0fbc9809a2768"}, {"problem": 27, "code": "#(or (empty? %) (and (= (first %) (last %)) (recur (reverse (rest (reverse (rest %)))))))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (loop [[a & b] coll]\n    (if (< (count b) 2)\n      true\n      (if (= a (last b))\n        (recur (rest (reverse b)))\n        false))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 27, "code": "(fn [xs] (let [ys (reverse xs)] \n           (loop [x (first xs) rest-xs (rest xs) y (first ys) rest-ys (rest ys) is-palindrome true] (if (or (not is-palindrome) (nil? x)) is-palindrome\n                                                                                            (recur (first rest-xs) (rest rest-xs) (first rest-ys) (rest rest-ys) (= x y))))))", "user": "57b65420e4b0fbc9809a27be"}, {"problem": 27, "code": "(fn [s]\n    (= (seq s) (reverse s)))", "user": "56b306c6e4b0982f16b37e0e"}, {"problem": 27, "code": "(fn [pal]\n  (= (apply list pal) (reverse pal)))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse (seq l))))", "user": "57b6cc7ce4b0fbc9809a27c4"}, {"problem": 27, "code": "(fn ex [v]\n  (let [res (if\n              (string? v)\n              (do\n                (println \"Value is string\")\n                (= v (apply str (reverse v))))\n              (do\n                (println \"Value is not string\")\n                (= v (reverse v))))]\n    res))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 27, "code": "(fn [x]\n  (if (= (apply str x) (apply str (reverse x)))\n    true\n    false))", "user": "57b41969e4b0fbc9809a2790"}, {"problem": 27, "code": "(fn [coll] (= (apply str coll) (apply str (reverse coll))))", "user": "57a775bbe4b0a96607956214"}, {"problem": 27, "code": "(fn [a] (= (concat a) (reverse a)))", "user": "57b6231ae4b0fbc9809a27b7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b82f20e4b0fbc9809a27d9"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 27, "code": "(fn [listy] \n    (loop [l listy k listy]\n        (if (= (count l) 1)\n            true\n            (if (= (compare (first l) (last k)) 0)\n               (recur (rest l) (take (- (count k) 1 ) k)) \n               false))))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 27, "code": "(fn [s]\n  (loop [r true t s]\n    (if (empty? t) r\n        (recur (and r (= (first t) (last t))) (drop 1 (drop-last t))))))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b98108e4b0fbc9809a27ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a10070e4b0c3d858beb8e0"}, {"problem": 27, "code": "(fn [ell]\n  (let [i (if (odd? (count ell)) (+ 1 (int (/ (count ell) 2))) (int (/ (count ell) 2)))]\n    (= (take i ell) (take i (reverse ell)))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 27, "code": "(fn [my-seq]\n   (if (empty? my-seq)\n     true \n     (if (= (first my-seq) (last my-seq))\n      (recur (drop 1 (drop-last my-seq)))\n       false)))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 27, "code": "(fn [s] \n  (= (seq s) (reverse s)))", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs)\n     (reverse xs)))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57af4a93e4b0fbc9809a2733"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 27, "code": "(fn [xs]\n  (= (vec (sequence xs)) (rseq (vec (sequence xs))))\n  )", "user": "50f89404e4b0aafb827eb204"}, {"problem": 27, "code": "(fn ispalin [array]\n  (= (seq array) (reverse array))\n)", "user": "567ff160e4b0966858e4d8e6"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [size (count coll)]        \n  \t(cond\n    \t(or (= 1 size)\n            (= 0 size)) true\n     (not= (first coll) (last coll)) false\n     :else ((comp palindrome? rest drop-last) coll))))", "user": "50ab395de4b0f65d68208508"}, {"problem": 27, "code": "#(let [x (apply list %)] (= x (reverse x)))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 27, "code": "#(= (reverse%) (seq %))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5794ced6e4b0e215f87e8472"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (> (count coll) 1)\n     (if (= (first %) (last %))\n       (recur (rest (butlast coll)))\n       false)\n     true))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 27, "code": "#( if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "5644611be4b0284900eef5f1"}, {"problem": 27, "code": "(fn [x]\n  (= (apply str x) (apply str (reverse x))))", "user": "57b5c29ee4b0fbc9809a27b1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a89ae9e4b0a96607956221"}, {"problem": 27, "code": "(fn [s]\n    (let [reversed (if (= (type s) java.lang.String)\n                       (clojure.string/reverse s)\n                       (reverse s))]\n        (= s reversed)))", "user": "56491050e4b0284900eef639"}, {"problem": 27, "code": "(fn [v] (= (if (string? v) (clojure.string/reverse v) (reverse v)) v))", "user": "57bc722ce4b05aa3c4741c41"}, {"problem": 27, "code": "#(loop [col %]\n     (cond\n       (empty? col) true\n       (not= (first col) (last col)) false\n        :else (recur  (butlast (rest col)))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 27, "code": "(fn [in]\n  (loop [next in]\n        (if (empty? (seq next))\n            true\n          (if (= (count next) 1)\n              true\n            (if-not (= (first next) (last next))\n                    false\n                    (recur (drop 1 (drop-last next)))\n                    )\n            )\n          )\n        )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "57bf6ca7e4b05aa3c4741c7c"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (let [r (reverse l)] (= r (reverse r))))", "user": "560439fce4b0c80df0ca2659"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 27, "code": "(fn [a]\n  (= (reverse a) (reverse (reverse a))))", "user": "57befca6e4b05aa3c4741c70"}, {"problem": 27, "code": "(fn [lat] (= (clojure.string/join lat) (clojure.string/join (reverse lat))))", "user": "57c0365be4b05aa3c4741c8f"}, {"problem": 27, "code": "(fn palindrome? [coll]\n\t(cond\n\t\t(empty? coll) true\n\t\t(= (first coll) (last coll)) (palindrome? (rest (butlast coll)))\n\t\t:else false))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (cond\n   (empty? coll) true\n   (= (first coll) (last coll)) (palindrome? (butlast (rest coll)))\n   :else false))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57a1f401e4b0c3d858beb8f4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57bf2aace4b05aa3c4741c73"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "57783e59e4b0979f8965165d"}, {"problem": 27, "code": "(fn [array]\n  (let [reversed (reduce conj '() array)]\n    (if (string? array)\n      (= array (clojure.string/join reversed))\n      (= array reversed))))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 27, "code": "#(if (= (vec %) (reverse %))\n    true\n    false)", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 27, "code": ";#((fn [s] (=(reverse s) s)) (map str %))\n;#(= (vec %) (reverse %))\n#(= (seq %) (reverse %))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 27, "code": "(fn pl [x] \n  (cond (= nil (seq x)) true \n        :else (and (= (first x) (last x)) \n        (pl (rest (reverse (rest x)))))\n   )\n)", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 27, "code": "(fn f [c] (if (empty? (rest c)) true (if (= (first c) (last c)) (f (reverse (rest (reverse (rest c))))) false)))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 27, "code": "#(let [size (count %)\n       split (partition (unchecked-int (/ size 2)) (unchecked-int (/ (inc size) 2)) %)\n       a (first split)\n       b (reverse (last split))]\n   (= a b))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "552e719be4b076ab5578f7f0"}, {"problem": 27, "code": "(fn pal [x] (if (< (count x) 2) true (let [a (first x) b (last x)](if (= a b) (pal (drop-last (rest x))) false))))", "user": "57c0f515e4b05aa3c4741c98"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s))\n  )", "user": "57c3c7e6e4b05aa3c4741cc4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 27, "code": "(fn [x] (= (concat x) (reverse x)))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 27, "code": "#(= (reverse %)(seq %))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c4ef0be4b05aa3c4741cd8"}, {"problem": 27, "code": "#(= % ((if (string? %) clojure.string/reverse reverse) %))", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 27, "code": "(fn [x] (= (reduce str x) (reduce str (reverse x))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "57b4634ce4b0fbc9809a2798"}, {"problem": 27, "code": "#(let [main % rev (reverse %)] (if (coll? %) (= main rev) (= main (clojure.string/join rev))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 27, "code": "#(= (reverse  %) (seq %) )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 27, "code": "(fn [x] \n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (recur (drop-last (rest x)))\n      false)))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57c779d6e4b05aa3c4741d06"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 27, "code": "(fn[s] (or (empty? s) (and (= (first s) (last s)) (recur (rest (drop-last s))))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 27, "code": "(fn compare1 [col]\n  (if (empty? col)\n    true\n  (if (not= (first col) (last col))\n    false\n  \t(compare1 (->> col drop-last (drop 1)))\n  )  \n    )\n  )", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "57c70189e4b05aa3c4741cfb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "558e160ce4b027778923764c"}, {"problem": 27, "code": "; the following works but isn't too informative about sequences\n;(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))\n\n; using seq turns the collection into the same form\n; that comes out of the reverse so the two can be compared\n(fn [coll] (= (seq coll) (reverse coll)))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 27, "code": "#(= (into [] %) (into [] (reverse %)))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 27, "code": "(fn [coll]\n  (loop [data (vec coll)\n         rev () ]\n    (if (empty? data)\n\t\t(= rev (vec coll))\n    \t(recur (rest data) (conj rev (first data)))\n    )\n   )\n)", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 27, "code": "(fn palindrome? [s]\n    (or (= (count s) 0)\n        (= (count s) 1)\n        (and (= (first s) \n             \t(last s)) \n         \t (palindrome? (rest (butlast s))))))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 27, "code": "(fn f [x] \n(if-let [a (first x)]\n(and (= a (last x)) (recur (butlast (rest x))))\ntrue\n))", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 27, "code": "(fn [coll] \n     (let [r (if (string? coll)\n               (apply str (reverse coll))\n               (reverse coll))] \n       (= coll r)))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s]\n    (cond\n     (< (count s) 2) true\n     (not (= (first s) (last s))) false\n     :else (recur (rest (butlast s)))\n     )\n    )\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57cacbf2e4b05aa3c4741d3e"}, {"problem": 27, "code": "(fn [input] (= (seq input) (reverse (seq input))))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)) )", "user": "574422cce4b009280f9f2b31"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 27, "code": "(fn [s]\n  (loop [lst (seq s)]\n    (if (< (count lst) 2)\n      true\n      (if (not (= (first lst) (last lst)))\n        false\n        (recur (rest (reverse (rest lst))))))))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 27, "code": "#(if (= (type %) String) (= % (clojure.string/reverse %)) (= % (reverse %)))", "user": "56483f45e4b0284900eef62b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 27, "code": "(fn palDetect [arr] \n (if (< (count arr) 2)\n  true\n  (and\n   (= (first arr) (last arr))\n   (palDetect \n    (rest (butlast arr))\n   )\n  )\n )\n)", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 27, "code": "(fn [s] \n  (loop [[f & rt] s \n         seed true]\n    (if rt\n      (recur (drop-last rt) (= f (last rt)))\n      seed)\n    )\n  )", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5793d21ae4b0e215f87e8465"}, {"problem": 27, "code": "#(loop [x1 0 x2 (dec (count %))]\n   (if (>= x1 x2)\n     true\n     (if (= (nth % x1) (nth % x2))\n       (recur (inc x1) (dec x2))\n       false)))", "user": "57cc5a79e4b0c746388ab87d"}, {"problem": 27, "code": ";;(fn [[& s]] (= s (reverse s)))\n#(= (seq %) (reverse %))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 27, "code": "(fn palindrome? [x] \n  (let [rev (reverse x)\n        sq (seq x)]\n    (= sq rev)))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 27, "code": "#(loop [a %]\n\t(let [c (count a)]\n\t\t(if (or (= c 0) (= c 1))\n\t\t\ttrue\n\t\t\t(if (= (first a) (last a))\n\t\t\t\t(recur (->> a (take (- c 1)) (drop 1)))\n\t\t\t\tfalse))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57760c89e4b0979f8965162a"}, {"problem": 27, "code": "(fn isPalidrome\n  [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57d21102e4b0bd073c202375"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reduce conj '() col)))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "569bce78e4b0542e1f8d1458"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 27, "code": "(fn \n  [sqnc] \n  (= \n   (seq sqnc) \n   (reverse (seq sqnc))))", "user": "57d6c5cae4b0bd073c2023ce"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 27, "code": "(fn [s] (= (apply str (reverse s)) (apply str s)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d7ca32e4b0bd073c2023df"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 27, "code": "#(=(reverse (seq  %)) (seq %))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c660fee4b05aa3c4741cf4"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 27, "code": "(fn [word]\n  (loop [word word]\n  (cond \n   \t(<= (count word) 1) true\n    (not= (first word) (last word)) false\n    :else (recur (butlast(rest word))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 27, "code": "(fn [x]  (= (seq x) (reverse(seq x))))", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57dd3ae3e4b0bd073c20243d"}, {"problem": 27, "code": "(fn [x]\n  (let [y (into () x)\n        z (reverse (reverse x))]\n    (= y z)))", "user": "57dda21be4b0bd073c202445"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ddb63fe4b0bd073c20244a"}, {"problem": 27, "code": "#(= (seq (to-array %)) (seq (to-array (reverse %))))", "user": "561052ace4b05f002753df6e"}, {"problem": 27, "code": "(fn [x] (= (if (string? x) (apply str (reverse x)) (reverse x)) x))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 27, "code": "(fn [xs]\n  (= (reverse (reverse xs)) (reverse xs))\n     )", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 27, "code": "(fn [arg]\n  (loop [coll (seq arg)]\n    (cond (not= (first coll) (last coll)) false\n          (empty? coll) true\n          :else (recur (drop-last (rest coll))))))", "user": "57d13683e4b0bd073c202368"}, {"problem": 27, "code": "#(let [ x (seq %) y (reverse (seq %))]\n   (if (= x y)\n     true\n     false))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 27, "code": "(fn [my-seq]\n    (= (seq my-seq) (reverse my-seq)))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 27, "code": "(fn palindrome\n  [st]\n  (= (apply str  st) (apply str (reverse st))))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (->> s seq reverse)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 27, "code": "(fn pal [s]\n(if (< (count s) 2)\ntrue\n(and (= (first s) (last s)) (pal (rest (butlast (vec s)))))))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 27, "code": ";; palindrome\n(fn pal [xs]\n  (if (> (count xs) 1) ;; if we haven't reached the mid point\n    (if (= (first xs) (last xs)) ;; if the two ends are equal\n      (pal (rest (butlast xs))) ;; test the rest of the input\n      false) ;; else return false\n    true)) ;; else return true", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "57df9f60e4b0bd073c202467"}, {"problem": 27, "code": "#(= (reverse %)(seq %))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 27, "code": "(fn palindrome\n  [items]\n  (cond\n    (< (count items) 2) true\n    (not= (first items) (last items)) false\n    :else (recur (butlast (rest items)))))", "user": "57ce6090e4b0c746388ab8ab"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "51b8e020e4b050a1176cd69e"}, {"problem": 27, "code": "(fn [x]\n  (cond\n    (= (type x) java.lang.String) (= (apply str (reverse x) x))\n    :else (= (reverse x) x)))", "user": "56f8bc1de4b07572ad1a88a6"}, {"problem": 27, "code": "(fn [n]\n  (loop [mylist n]\n    (if (= (first mylist) (last mylist))\n      (let [ newlist (-> mylist rest reverse rest) ]\n      \t(if (= newlist ())\n          true\n          (recur newlist)\n        )\n      )\n      false\n    )\n  )\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 27, "code": "(fn [lst] (= (cons (first lst) (rest lst)) (reverse (cons (first lst) (rest lst)))))", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57e3527ce4b0bfb2137f5a99"}, {"problem": 27, "code": "#(loop [s %]\n    (if (some (fn [x] (= x (count s))) [0 1])\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (-> s next butlast))\n        )))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 27, "code": "(fn [x]\n  (if (seq? x)\n    (= x (reverse x))\n    (= (seq x) (reverse (seq x)))))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 27, "code": "(fn [col] (= (first col) (last col)))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57e30d38e4b0bfb2137f5a92"}, {"problem": 27, "code": "(fn [arg] (loop [x arg] (if (or (empty? x) (empty? (rest x))) true (do (if (= (first x) (last x)) (recur (drop-last (drop 1 x))) false)))))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 27, "code": "(fn foo [x]\n   (if (<= 1 (count x))\n      (if (= (first x) (nth x (- (count x) 1)))\n          (foo (rest (butlast x)))\n          false\n      )    \n      true \n   )\n)", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 27, "code": "#(= (first %) (first (reverse %)))", "user": "564a985be4b0284900eef65c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57e59d2be4b0bfb2137f5ad9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57e5052ae4b0bfb2137f5ace"}, {"problem": 27, "code": "(fn [s] (let [ss (seq s)] (= ss (reverse ss))))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 27, "code": "(fn foo[x] \n  (if (string? x)\n    (= x (clojure.string/reverse x))\n  \t(= x (reverse x))))", "user": "518261a4e4b0f2adb7336523"}, {"problem": 27, "code": "(fn[xs](= (reduce (fn[accum,x](cons x accum)) nil xs) (vec xs)))", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 27, "code": "(fn \n  [coll]\n  (= (if (string? coll)\n       (clojure.string/reverse coll)\n       (reverse coll)) coll))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "52f625ffe4b047fd55836fb5"}, {"problem": 27, "code": "(fn [x]\n  (=  (seq x) (reverse x)))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 27, "code": "; #(= (reverse %) (seq %))\n\n(fn [coll]\n  (loop [s coll]\n    (if (empty? s)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (drop-last (rest s)))))))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 27, "code": "#(= (if(= (type %) java.lang.String)\n     (clojure.string/reverse %)\n      (reverse %)) %)", "user": "57e8d443e4b0bfb2137f5b1a"}, {"problem": 27, "code": "(fn [n] (= (into () (seq n)) (seq n)))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ecf93be4b0bfb2137f5b8c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ecf8b2e4b0bfb2137f5b8b"}, {"problem": 27, "code": "(fn [ps] (= (seq (reverse ps)) (seq ps)))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 27, "code": "#(loop [x %]\n       (if (or (nil? x) (= 1 (count x)))\n         true\n         (if (= (first x) (last x))\n           (recur (butlast (next x)))\n           false)))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [rseq (reverse coll)]\n    (= rseq (seq coll))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 27, "code": "#(let [length (count %)]\n   (if (<= length 1)\n     true\n     (let [\n           f (first %)\n           l (last %)]\n       (and (= f l ) (recur (drop 1 (drop-last 1 %))))\n       )))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 27, "code": "(fn pal [seq]\n  (if (> 2 (count seq))\n      true\n      (if (= (first seq) (last seq))\n        (pal (rest (drop-last 1 seq)))\n        false)))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 27, "code": "(fn [x] \n  (not (some false? (map = x (reverse x)))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 27, "code": "(fn [x]\n  (let [y (if (sequential? x) (reverse x) (clojure.string/reverse x) )]\n    (= y x)))", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc%)) (range (/ (dec n) 2))))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 27, "code": "#(= % (if (string? %)\n         (apply str (reverse %))\n         (reverse %)))", "user": "57ea107ae4b0bfb2137f5b3e"}, {"problem": 27, "code": "#(= % (let [coll (reverse %)]\n        (if (string? %) (apply str coll) coll)))", "user": "57ef7f0ee4b0bfb2137f5bd9"}, {"problem": 27, "code": "(fn [arg]\n  (= (seq arg) (reverse arg)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 27, "code": "(fn [x] \n  (if (= (class x) java.lang.String)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))", "user": "57efb417e4b0bfb2137f5bdc"}, {"problem": 27, "code": "(fn [list]\n  (if (empty? list)\n    true\n    (if (= (first list) (last list))\n      (recur (drop 1 (take (dec (count list)) list)))\n      false)))", "user": "57f11d72e4b0bfb2137f5c03"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57f0a9fde4b0bfb2137f5bf6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 27, "code": "(fn [c]\n    (let [n (quot (count c) 2)]\n      (->> (map vector (take n c) (reverse (drop n c)))\n           (every? #(apply identical? %)))))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d13150e4b0bd073c202366"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "57ee2b35e4b0bfb2137f5bab"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57f10279e4b0bfb2137f5c00"}, {"problem": 27, "code": "(fn palindrome?\n    [s]\n    (= (seq s) (reverse (seq s))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 27, "code": "#(= 0 (compare (into [] (reverse %)) (into [] %)))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 27, "code": "(fn [in]\n  (let [l (seq in)]\n    (= l (reverse l))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 27, "code": "(fn [w]\n  (let [arr (into [] w)]\n    (loop [start 0 end (- (count w) 1)]\n      (if (>= start end)\n        true\n        (let [sc (get arr start)\n              se (get arr end)]\n          (if (not= sc se)\n            false\n            (recur (inc start) (dec end))))))))", "user": "57f4ace3e4b07bbd65c32b2b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 27, "code": "(fn [list]\n  (if (string? list)\n    (= (clojure.string/reverse list) list)\n    (= (reverse list) list)))", "user": "565418cde4b0f9d632dd847c"}, {"problem": 27, "code": "(fn[list] (= (seq list) (reverse list)))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 27, "code": "(fn [lst] \n  (if (string? lst)\n    (= (reduce str (reverse lst)) lst)\n    (= (reverse lst) lst)))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 27, "code": "(fn [coll]\n  (loop [i 0 j (- (count coll) 1)]\n    (or (>= i j)\n        (and (= (nth coll i) (nth coll j))\n             (recur (+ i 1) (- j 1))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 27, "code": "(fn [x]\n  (if (= (class x) java.lang.String)\n  (= (seq x) (reverse x))\n  (= x (reverse x))\n  )\n )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 27, "code": "#(= (seq %)\n    (->> %\n         (reverse)\n         (concat)))", "user": "57942207e4b0e215f87e8469"}, {"problem": 27, "code": "(fn isPal [coll] \n   (if (>= 1 (count coll))\n     true\n     (and \n      (= (first coll) (last coll)) \n      (isPal (butlast (rest coll))))))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 27, "code": "(fn palin [coll]\n  (loop [coll coll]\n    (if (and (> (count coll) 1) (= (first coll) (last coll)))\n      (recur (rest (drop-last coll)))\n      (= (first coll) (last coll)))))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 27, "code": "(fn [lst]\n  (loop [fin '()\n         f (first (seq lst))\n         r (rest (seq lst))]\n    (if (= r '())\n      (= (conj fin f) (seq lst))\n      (recur (conj fin f) (first r) (rest r)))))", "user": "57f8627ee4b0d3187e900926"}, {"problem": 27, "code": "(fn [coll]\n  (reduce #(and %1 %2)\n       (map #(= %1 %2) coll (reverse coll))))", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse lst)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 27, "code": "(fn [a] (let [rev (reverse a)] (= a (if (string? a) (clojure.string/join rev) rev))))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 27, "code": "(fn isPalindrome [x] (every? true? (map #(= %1 %2) (vec x) (vec (reverse x)))))", "user": "57e15244e4b0bfb2137f5a70"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 27, "code": "(fn palindrome \n  [lst]\n  (if (<= (count lst) 1)\n    true\n    (and (= (first lst) (last lst))\n         (palindrome (drop-last (drop 1 lst))))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 27, "code": "(fn pdrome [x]\n      (or\n       (<= (count x) 1)\n       (and\n        (= (first x) (last x))\n        (pdrome (rest (take (- (count x) 1) x))))))", "user": "57fc4a63e4b0d3187e900993"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "57f96e13e4b0d3187e900945"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 27, "code": "(fn pali [x]\n    (if (sequential? x)\n      (if (= (seq x) (reverse x))\n        true\n        false)\n      (if (= x (apply str (reverse x)))\n          true\n          false)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 27, "code": "(fn [lst]\n  (loop [lst lst]\n    (cond\n     (empty? lst) true\n     (= (first lst) (last lst))(recur (butlast (rest lst)))\n     :else false)))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (loop [c coll\n         r false]\n    (let [f (first c)\n          l (last c)\n          not-nil? (complement nil?)]\n      (if (and (not-nil? f) (not-nil? l) (= f l))\n        (recur (-> c rest butlast) true)\n        r))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 27, "code": "(fn [a] (= (map identity a) (reverse a)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 27, "code": "(fn [s] (if (empty? s) true (if (= (first s) (last s)) (recur (rest (butlast s))) false)))", "user": "57fe996fe4b0d3187e9009d5"}, {"problem": 27, "code": "(fn palindrome? [lst]\n  (= (sequence lst) (reverse (sequence lst))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 27, "code": "(fn palindrome?\n  ([s] (palindrome? s 0))\n  ([s n]\n   (println s n)\n    (if (> n (/ (count s) 2))\n      true\n      (if (= (nth s n) (nth s (- (count s) (inc n))))\n        (recur s (inc n))\n        false)\n      )))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 27, "code": "(fn [lst]\n   (every? true? (map #(= %1 %2) lst (reverse lst))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 27, "code": "(fn ana \n  [cad]\n  (= (seq cad) (reverse cad)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 27, "code": "(fn [s] (let [sq (seq s)] (= sq (reverse sq))))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/reverse %) %) \n   (= (reverse %) %))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll\n         rc (reverse coll)]\n    (if (empty? c)\n      true\n      (if \n       (not (= \n        (first c) \n        (first rc)))\n       false\n       (recur\n        (rest c)\n        (rest rc))))))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 27, "code": "(fn [a] (or (= a (reverse a))\n            (and (string? a) (= a (clojure.string/reverse a)))))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f1d0aee4b024c67c0cf8b7"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 27, "code": "(fn [x]\n  (loop [i 0, j (dec (count x))]\n   (cond (>= i j) true\n         (= (nth x i)(nth x j)) (recur (inc i) (dec j))          \n         :else false\n   )\n  )\n)", "user": "57f28b22e4b0511f1d294def"}, {"problem": 27, "code": "(fn \n  [lst] \n  (= (seq lst) (reverse lst)))", "user": "57f81532e4b0d3187e900914"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 27, "code": "(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n        (recur (butlast (rest lst)))\n        false))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "550df95ce4b06e50f9beb161"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (cond\n    (string? x) (= x (clojure.string/reverse x))\n    :else (= x (reverse x))))", "user": "58042984e4b0a837a8b30ca3"}, {"problem": 27, "code": "(fn check [x] (= (reverse x) (reverse (reverse x))))", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 27, "code": "#(= (into [] %1) (reverse %1))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 27, "code": "(fn pal [x]\n  (=(seq x)(reverse (seq x))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 27, "code": "(fn [lst]\n    (cond\n      (string? lst) true\n      (= lst (reverse lst)) true\n     :else false))", "user": "57f81569e4b0d3187e900919"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 27, "code": "(fn [tstr] (= (reverse (seq tstr)) (seq tstr)))", "user": "579d8947e4b05b1deef9ae17"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 27, "code": "#(= (apply str %) (apply str(reverse %)))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58037d8ae4b0a837a8b30c8b"}, {"problem": 27, "code": "#( if (empty? %) \n   true\n   (if (= (first %) (last %))\n      (recur (rest (reverse (rest %))))\n      false\n   )\n)", "user": "5805e70de4b0a837a8b30cd0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 27, "code": "(fn pal[s]\n  (cond (or (= s '()) (= s nil)) true\n        (not\n         (= (first s) (last s))) false\n        :else (pal (butlast(rest s)))))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))\n; #(= (reverse %) (reverse (reverse %)))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 27, "code": "(fn here [x] (= (reverse x) (seq x)))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "58092258e4b0a837a8b30d1b"}, {"problem": 27, "code": "(fn [lst]\n  (let [middle (rest (drop-last lst))]\n    (if (not (= (first lst) (last lst)))\n      false\n      (if (<= (count middle) 1)\n        true\n        (recur middle))))\n  )", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "5809f223e4b0a837a8b30d29"}, {"problem": 27, "code": "(fn is_palindrome [x]\n  \n  (not (some false? (map = x (reverse x))))\n )", "user": "57f5a5a5e4b0d3187e9008d5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 27, "code": "(fn [s] \n  (let [r (reverse s)]\n        (or (= r s)\n            (= (apply str r) s))))", "user": "53b14dfce4b047364c04448d"}, {"problem": 27, "code": "#(=(seq %1)(reverse %1))", "user": "5804fb34e4b0a837a8b30cb1"}, {"problem": 27, "code": "(fn [s]\n  (= (vec (reverse s))\n     (vec s)))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 27, "code": "(fn [xs] (= (map identity xs) (reverse xs)))", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 27, "code": "(fn palindrome [s]\n  (if (empty? (rest s))\n  \ttrue\n    (if (= (first s) (last s))\n      (palindrome (reverse (rest (reverse (rest s)))))\n      false)\n    )\n  )", "user": "558fb218e4b0277789237665"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "580d62b0e4b0849f6811b739"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 27, "code": "#(=(seq %) (reverse (seq %)))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 27, "code": "#(if (coll? %) (= (reverse %) %) (= (reverse %) (into () %)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 27, "code": "(fn [s]\n  (= s\n     (if (string? s) \n       (clojure.string/reverse s)\n       (reverse s))))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 27, "code": "(fn is-palindrome?\n  [coll]\n  (let [coll (remove (set \" \") coll)]\n    (= (reverse coll) coll)))", "user": "580e4848e4b0849f6811b750"}, {"problem": 27, "code": "#(= (if (string? %)\n        (apply str (vec (reverse %))) \n        (reverse %))\n %)", "user": "580e2941e4b0849f6811b74e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 27, "code": ";#(= (seq %) (seq (reverse %)))\n#(= (reverse %) (seq %))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 27, "code": "(fn\n  [lst]\n  (= (seq (reverse lst)) (seq lst)))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 27, "code": "(fn [xs]\n (= (apply str xs) (apply str (reverse xs))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 27, "code": "#(= (apply str %)  (apply str (reverse %)))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 27, "code": "#(first \n (reduce \n  (fn [aggrsubval _] \n    (let [[aggr subval] aggrsubval] \n      (vector \n       (and aggr (= (first subval) (last subval))) \n       (rest (butlast subval))\n       )\n      )\n    ) \n  (vector true (seq %)) \n  (range (int (/ (count %) 2)))\n  )\n )", "user": "5810b899e4b0f478707a05d8"}, {"problem": 27, "code": "#(let [v (vec %)\n       len (dec (count %))]\n   (loop [c 0]\n     (or (> c (- len c))\n       (and (= (nth v c) (nth v (- len c)))\n         (recur (inc c))))))", "user": "56f413b2e4b046a417f9205a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "580e842ee4b0849f6811b756"}, {"problem": 27, "code": ";(fn [x] (if (=(first x) (last x)) true false))\n#(= (reverse %)(seq %))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "56255e2de4b00a550fc90297"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58136679e4b0f478707a060d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "58152157e4b0f478707a0631"}, {"problem": 27, "code": "#(let [m (/ (count %) 2)] \n   (every? true? \n           (map = (drop m %) (->> (take (long m) %)\n                                  (apply conj ())))))", "user": "580c1e9ae4b0849f6811b719"}, {"problem": 27, "code": "(fn [arg]\n  (= (seq arg) (reverse arg)))", "user": "581590f3e4b0f478707a063f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 27, "code": "(fn palin? [s]\n  (cond\n   (= s '()) true\n   (= (first s) (last s))\n    (palin? (rest (butlast s)))\n   :else false))", "user": "58138439e4b0f478707a0611"}, {"problem": 27, "code": "(fn [x] \n    (= (reverse x) \n       (reverse (reverse x))))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57762e67e4b0979f89651630"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 27, "code": "#(= (into [] (reverse %)) (into [] %))", "user": "57e544c5e4b0bfb2137f5ad3"}, {"problem": 27, "code": "(fn [pal]\n    (= (reverse pal) (reverse (reverse pal))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 27, "code": "(fn palindrom [coll] (if (= (seq coll) (reverse (seq coll))) true false))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 27, "code": "(\n fn [p] (\n         if (= (first p) (last p))\n            (if (= (count p) 0)\n              true\n              (recur \n               (rest (drop-last p))\n               )\n              )\n            false\n  )\n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "580d57cfe4b0849f6811b738"}, {"problem": 27, "code": "#(= % ((fn [sq] (let [rsq (reverse sq)] (if (string? sq) (reduce str rsq) rsq))) %))", "user": "5818b1a6e4b0c0e9c07b83c3"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll]\n    (if (> (count c) 1)\n      (if (= (first c) (last c))\n        (recur (reverse(rest(reverse(rest c)))))\n        false)\n      true)\n    ))", "user": "565e21e0e4b068f2fe63dc32"}, {"problem": 27, "code": "(fn [x] (= ((comp reverse reverse) x) (reverse x)))", "user": "5816ad6de4b0c0e9c07b8378"}, {"problem": 27, "code": "(fn [x]\n  (let [a (seq x)\n        b (reverse x)]\n    (= a b)))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 27, "code": "(fn ispal [coll]\n  (or \n   (or (nil? coll) (= 1 (count coll)))\n     (and\n       (= (first coll) (last coll))\n      (ispal (butlast (next coll))))))", "user": "57f291a8e4b0511f1d294df0"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 27, "code": "(fn [s]\n  (let [n (quot (count s) 2)]\n   (= (take n s) (take n (reverse s)))))", "user": "581a703de4b0e114eb51a005"}, {"problem": 27, "code": "#(=(clojure.string/join (reverse %)) (clojure.string/join %))", "user": "56018b59e4b04bb52996e18c"}, {"problem": 27, "code": "(fn palindrome [l]\n  (if (nil? l)\n    true\n    (if (= (first l) (last l))\n      (palindrome (butlast (rest l)))\n      false)))", "user": "57af36eae4b0fbc9809a272e"}, {"problem": 27, "code": "(fn [c]\n  (loop [c' c]\n    (if (empty? c')\n      true\n      (if (= (first c') (last c'))\n        (recur (rest (butlast c')))\n        false))))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 27, "code": "(fn[s]\n  (= (sequence s) (reverse s)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 27, "code": "(fn [sq]\n  (if (= (apply str sq) (apply str (reverse sq)))\n    true\n    false))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 27, "code": "(fn [l] (loop [res true, li l] (if (and res (not-empty li)) (recur (= (first li) (last li)) (-> li rest butlast)) res)))", "user": "57bc50c7e4b05aa3c4741c40"}, {"problem": 27, "code": "(fn [xs]\n  (let [seq-xs (seq xs)]\n    (= seq-xs (reverse seq-xs))))", "user": "56e5e4aee4b02e7e935eb6c0"}, {"problem": 27, "code": "(fn [mySeq]\n  (if (or (not (seq? mySeq)) (empty? mySeq)) true\n    (if (not (= (first mySeq) (last mySeq))) false \n      (recur (rest (butlast mySeq)))\n    )\n  )\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (= (seq xs) (reverse xs)))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "581badbde4b04b46fc4b0ed9"}, {"problem": 27, "code": "(fn [s]\n  (if (not= (first s) (last s))\n    false\n    (if (< (count s) 3)\n      true\n      (recur (drop 1 (drop-last s))))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 27, "code": "#(= (clojure.string/join (reverse  %)) (clojure.string/join (map str %)))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 27, "code": "#(let [a (reverse %) b (reverse (reverse %))]\n   (= a b)\n   )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "576d8699e4b0979f89651568"}, {"problem": 27, "code": "#(= % (if (= (type %) (type \"\"))\n     (reduce str (reverse %))\n     (reverse %)))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 27, "code": "(fn [v] (= (seq v) (reverse v)))", "user": "5820cc33e4b04b46fc4b0f60"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 27, "code": "(fn [x]\n  (if (= (reverse (reverse x)) (reverse x)) true\n    false))", "user": "581c4ab4e4b04b46fc4b0eea"}, {"problem": 27, "code": "(fn [l]\n  \t(loop [l (seq l) res true]\n      (if \n           (or \n            \t(<= (count l) 1) \n                (false? res)\n           )\n        res\n        (recur  \n         \t(drop-last (rest l)) \n         \t(= (first l) (last l))\n        )\n      )\n  )\n)", "user": "5821dbb9e4b04b46fc4b0f86"}, {"problem": 27, "code": "#(let [i (seq %)]\n   (= i (reverse i)))", "user": "5521a5a9e4b0882d96d09197"}, {"problem": 27, "code": "(fn [x]\n  (= (reduce str x) (reduce str (reverse x))))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 27, "code": "(fn [se] (= (seq se) (reduce conj '() se)))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 27, "code": "#(= (reverse %)(reverse (reverse %)))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57465429e4b009280f9f2b60"}, {"problem": 27, "code": "(fn [coll]\n  (let [z (map list coll)]\n  (if (= z (reverse z))\n    true\n    false)))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 27, "code": "#(if (string? %) (not (reversible? %)) (= (reverse %) %))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58247423e4b051871117bec5"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5823c717e4b051871117beb2"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 27, "code": "(fn f[n] (every? #(true? %) (map #(= %1 %2) n (reverse n))))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58254a11e4b051871117bed9"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 27, "code": "#(let [in (vec %)] \n    (= in (reverse in)))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 27, "code": "(fn f [x] (if (empty? x) true (and (= (first x) (first (reverse x))) (f (reverse (rest (reverse (rest x))))))))", "user": "5826ed1fe4b051871117bf0e"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 27, "code": "(fn [x] (= (sequence x) (reverse (sequence x))))", "user": "582835cbe4b051871117bf30"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "56f68677e4b08e7d20b96826"}, {"problem": 27, "code": "(fn [x]\n  (let [y (reverse x)]\n    (or (= x y) (= x (apply str y)))))", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 27, "code": "(fn [n]\n  (loop [n n]\n    (if (<= (count n) 1)\n   \t  true\n      (do \n        (if (= (first n) (last n))\n          (recur (rest (nthrest n (- (count n) 1))))\n          false\n        )\n      )\n    )\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5813a865e4b0f478707a0615"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 27, "code": "#(=(reverse %) (seq %))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56f949fae4b07572ad1a88ad"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5829bc55e4b051871117bf49"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 27, "code": "(fn [coll]\n   (= (into [] coll)\n      (into '() coll)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 27, "code": "(fn palindrome [sq]\n  (if (< (count sq) 2)\n    true\n    (if (= (first sq) (last sq))\n    (palindrome (butlast (rest sq)))\n    false)))", "user": "57ee88bbe4b0bfb2137f5bbe"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "58299e03e4b051871117bf46"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "582c526ae4b051871117bf88"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58248186e4b051871117bec6"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "582e0afde4b051871117bfd5"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "582e8e18e4b051871117bfe0"}, {"problem": 27, "code": "(fn [x] \n  (= \n    (apply str x)\n    (apply str (reverse x))))", "user": "578682bbe4b0ebec4cfb74f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5829d588e4b051871117bf4a"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "58303fc3e4b051871117c006"}, {"problem": 27, "code": "(fn pal [x]\n  (if (= (first x) (last x))\n    (if (empty? (rest x))\n      true\n      (pal (rest (reverse (rest x)))))\n    false))", "user": "582589b2e4b051871117bedd"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 27, "code": "(fn [x](if (string? x)\n                (= x (clojure.string/join(reverse x)))\n                (= x (reverse x))))", "user": "582dc562e4b051871117bfcb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5779556de4b0979f8965166e"}, {"problem": 27, "code": "(fn [seq]\n  (let [seq (if (string? seq)\n              (filter #(not= \"\" %) (clojure.string/split seq #\"\"))\n              seq)]\n    (= (reverse seq) seq)))", "user": "582bd5fae4b051871117bf7b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "583166c1e4b051871117c025"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "582a6a85e4b051871117bf5d"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 27, "code": "(fn pal[x](cond\n           (empty? x) true\n           (not= (first x) (last x)) false\n           :else (pal (rest (drop-last x)))\n           )\n  )", "user": "583019b8e4b051871117bfff"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "582a5174e4b051871117bf59"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %)) true false)", "user": "570ad386e4b0b0fb43fd06b9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 27, "code": "(fn [x] (let [x (reverse x)] (= x (reverse x))))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 27, "code": "(fn [coll] (if (empty? coll)\n             true\n             (if (= (first coll) (last coll))\n               (recur (next (butlast coll)))\n               false)))", "user": "5836bc20e4b089d5ab817d03"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 27, "code": "(fn pal? [sq]\n  (if (or (= 0 (count sq)) (= 1 (count sq)))\n    true\n    (and (= (first sq) (last sq)) (pal? (rest (reverse (rest sq)))))\n    )\n  )", "user": "580f9585e4b0f478707a05b5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58375635e4b089d5ab817d14"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "58376b71e4b089d5ab817d18"}, {"problem": 27, "code": "#(-> (= (reverse %) (reverse (into '() %))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "582d7569e4b051871117bfbe"}, {"problem": 27, "code": "#(= (seq %) (-> % (seq) (reverse)) )", "user": "5838337de4b089d5ab817d24"}, {"problem": 27, "code": "(fn [s]\n    (let [a (first s)\n          z (last s)]\n         (cond \n          (and (= a z) (not (nil? a))) (recur (butlast (rest s)))\n          z false\n          :else true)))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 27, "code": "(fn [x]\n  (not= (count (set x)) (count x)))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5830cfe6e4b051871117c016"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll))\n  \n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 27, "code": "(fn [x]\n\t(if (string? x)\n\t\t(= x (clojure.string/reverse x))\n\t\t(= x (reverse x))\n\t)\n)", "user": "5838d5ede4b089d5ab817d32"}, {"problem": 27, "code": "#(= (reverse  %) (seq %))\n ;(reverse \"racecar\")=> (\\r \\a \\c \\e \\c \\a \\r)\n;(seq \"racecar\")=> (\\r \\a \\c \\e \\c \\a \\r)", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 27, "code": "(fn [x] \n  (cond (string? x) (= x (apply str (reverse x)))\n        :else (= x (reverse x))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 27, "code": "(fn pal\n  [s]\n  (cond\n   (empty? s) true\n   (= (first s) (last s)) (pal (drop-last (rest s)))\n   :else false))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 27, "code": "(fn palindrome? [p]\n  (loop [p p\n         b (first p)\n         e (last p)]\n    (cond (< (count p) 2) true\n          (not= b e) false\n          :else (recur\n                 (rest (butlast p))\n                 (first p)\n                 (last p)))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5833455ee4b089d5ab817c95"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 27, "code": "#(= (apply str %)\n    (apply str (reduce conj () %)))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 27, "code": "#(= (-> % reverse reverse) (reverse %))", "user": "583f0b82e4b089d5ab817dc6"}, {"problem": 27, "code": "(fn [sq]\n     \n    (let [l (count sq) help (fn help [sq s e]\n       (let [sc (nth sq s) \n             ec (nth sq e)]\n         (cond (= s e) \n               true\n               (= (- e 1) s) \n               (= sc ec)\n               (not= sc ec) \n               false \n               :else \n               (recur sq (+ s 1) (- e 1)))))]\n      (help sq 0 (- l 1))))", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "583eee03e4b089d5ab817dc3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 27, "code": "(fn palindrome\n  [word]\n  (loop [w word]\n    (if (empty? w)\n      true\n      (if (= (first w) (last w))\n        (recur (drop 1 (drop-last w)))\n        false))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 27, "code": "(fn [arg] (loop [cs arg]                                                        \n                   (cond (<= (count cs) 1)                                             \n                        true                                                           \n                       (= (first cs) (last cs))                                        \n                       (recur (drop-last (rest cs)))                                   \n                       :else false)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 27, "code": "(fn\n  [seq]\n  (let [reversed (reverse seq)]\n    (every? identity (map = seq reversed))))", "user": "5844e6f4e4b089d5ab817e5a"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "58409e47e4b089d5ab817dee"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "540c5950e4b0addc1aec6701"}, {"problem": 27, "code": "(fn [l] (every? identity (map (fn [a b] (= a b)) l (reverse l))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 27, "code": "(fn [x] (if (= (seq (reverse x)) (seq x)) true false))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "50b25edae4b03ea88043355e"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "581974d9e4b0e114eb519fd6"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58467633e4b089d5ab817e90"}, {"problem": 27, "code": "#(reduce (fn [v0 v1] (and v0 v1)) true (map = (reverse %) %))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 27, "code": "(fn palindrome-detector-solution\n  [word] ;; update args as needed\n  ;; Write a function which returns true if the given sequence is a palindrome.\n  ;; \n  ;; Hint: \"racecar\" does not equal '(\\r \\a \\c \\e \\c \\a \\r)\n    (= (reverse word) (seq word) ))", "user": "58445c3ce4b089d5ab817e49"}, {"problem": 27, "code": "(fn is-palindrome [arg]\n  (let [seq-arg (seq arg)]\n    (= seq-arg (reverse seq-arg))))", "user": "5845720de4b089d5ab817e68"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "582f63e5e4b051871117bfef"}, {"problem": 27, "code": "(fn [v]\n  (or\n  \t(= (reverse v) v)\n    (= (apply str (reverse v)) v)))", "user": "524379a4e4b076204b44fac0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 27, "code": "(fn\n  [c]\n  (let [middle-index (/ (count c) 2)\n        [start-half end-half] (split-at middle-index c)\n        slicer (fn\n                [start end middle]\n                (if (> (count start) (count end))\n                    (take (- middle 1) start)\n                    start))\n        real-start-half (slicer start-half end-half middle-index)]\n      (= real-start-half (reverse end-half))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 27, "code": "(fn [sequence]\n  (= (seq sequence) (reverse sequence)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 27, "code": "(fn [input]\n  (let [len (quot (count input) 2)]\n    (every?\n     (fn [[i1 i2]] (= i1 i2))\n     (map vector\n          (subvec (into [] input) 0 len)\n          (subvec (into [] (reverse input)) 0 len)))))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 27, "code": "(fn [list]\n  (loop [red list]\n    (if (empty? red)\n      true\n      (if (= (first red) (last red))\n        (recur (rest (butlast red)))\n\t\tfalse\n      )\n    )\n  )\n)", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 27, "code": "(fn [pc]\n  (let [els (if (string? pc) (into '() (char-array pc)) pc)]\n    (loop [r els]\n      (if (empty? r)\n        true\n        (let [f (first r) l (last r)]\n          (if (not= f l)\n            false\n            (recur (rest (reverse (rest r))))))))))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "584b6a2be4b089d5ab817efd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5842d06be4b089d5ab817e22"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 27, "code": "(fn palindrome [x]\n\t(let [x (reverse x)]\n      (= x (reverse x))\n    )\n)", "user": "574d0574e4b02ea114799227"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "584a44e6e4b089d5ab817ee3"}, {"problem": 27, "code": "(fn checkPallindrome [seqn]\n  (if (string? seqn)\n    (= seqn (apply str (reverse seqn)))\n    (= seqn (reverse seqn))))", "user": "584574a1e4b089d5ab817e69"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 27, "code": "#(loop [coll %]\n   (cond (< (count coll) 2) true\n         (not= (first coll) (last coll)) false\n         :else (recur (rest (butlast coll)))\n                ))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 27, "code": "(fn ispal\n  [xs]\n  (every?\n    identity\n    (map\n      #(= %1 %2)\n      xs\n      (reverse xs))))", "user": "584cc92be4b0b7285a6f4e2b"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n (= (reverse %) %))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 27, "code": "#(= %1 (if (string? %1)\n         (apply str (reverse %1))\n         (reverse %1)))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 27, "code": "(fn [pal] \n  (if (string? pal) (= pal (clojure.string/join (reverse pal)))\n    (= pal (reverse pal))\n   ))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 27, "code": "(fn [s]\n  (let [q (quot (count s) 2)\n        lst (dec (count s))]\n    (loop [n 0]\n      (if (> n  q)\n        true\n        (if (not= (nth s n) (nth s (- lst n)))\n          false\n          (recur (inc n)))))))", "user": "5855aec8e4b0f14aab7c86df"}, {"problem": 27, "code": "(fn [x] (loop [x x]\n          (if (or (= (count x) 0)(= (count x) 1) (= (first x) (last x)))\n            true\n          (let [start (first x)\n               end (last x)]\n          \t(if (not= start end)\n            \tfalse        \n          \t\t(recur (rest (drop-last x)\n                             )\n                       )\n              )\n                \n            )\n          )\n          )\n  )", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 27, "code": "(fn [c] (= (reverse c) (seq c)))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "585481e0e4b07779d46863fe"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "58543a59e4b07779d46863f5"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5856980de4b0f14aab7c86f7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 27, "code": "(fn [coll]\n  (loop [new-coll coll]\n    (if (<= (count new-coll) 1)\n      true\n      (if (not= (first new-coll) (last new-coll))\n        false\n        (recur (rest (take (- (count new-coll) 1) new-coll))))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 27, "code": "(fn [coll]\n  (let [[p_ p2] \n        (map vec (split-at \n         (/ (count coll) 2)\n         (into [] coll)))\n        len (count p2)\n        p1 (reverse \n            (if (> (count p_) \n                   len)\n              (pop p_)\n              p_))]\n    (= p1 p2)))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 27, "code": "(fn isPalindrome [coll] (if (string? coll) (= coll (apply str (reverse coll))) (= coll (reverse coll))))", "user": "58597562e4b0f14aab7c8734"}, {"problem": 27, "code": "(fn [xs]\n  (if (empty? xs)\n    true ;base case\n    (let [first-element (first xs)\n          last-element (last xs)\n          list-without-first-and-last (drop-last (rest xs))]\n\n      (and (= first-element last-element)\n           (recur list-without-first-and-last)))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 27, "code": "(fn [c]\n  (let [r (reverse c)]\n    (if (string? c)\n      (= (clojure.string/join r) c)\n      (= r c))))", "user": "56326e03e4b0bfe05bf117a4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 27, "code": "#( = (seq %) (reverse %))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 27, "code": "#(cond (empty? %) true\n       (= (first %) (last %)) (recur (reverse (rest (reverse (rest %)))))\n       true false)", "user": "585dc682e4b0f14aab7c87a0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %)) true false)", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 27, "code": "#(let  [revers1 (if (string? %)\n              (clojure.string/reverse %)\n              (reverse %))]\n   (= revers1 %))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 27, "code": "(fn [s]\n  (loop [a (seq s) b (reverse (seq s)) i (quot (count a) 2)]\n    (if (not= (first a) (first b))\n      false\n      (if (zero? i)\n        true\n        (recur (rest a) (rest b) (dec i))))))", "user": "58606948e4b0f14aab7c87d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5861cbd0e4b0f14aab7c87fb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 27, "code": "(fn palindrome? [input]\n    (loop [in1 input in2 (reverse input)]\n      (cond\n        (not= (count in1) (count in2)) false\n        (not= (first in1) (first in2)) false\n        (empty? in1) true\n        :else\n        (recur (rest in1) (rest in2))\n      )\n    )\n)", "user": "585ad75be4b0f14aab7c8756"}, {"problem": 27, "code": "(fn is-palindrome [coll]\n  (let [x (take (Math/ceil (/ (count coll) 2)) coll)\n        y (drop (quot (count coll) 2) coll)]\n    (= (reverse x) y)\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reduce conj '() x)))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58522b00e4b0b7285a6f4eac"}, {"problem": 27, "code": "(fn [sequence] (if (string? sequence)\n                 (= sequence (apply #'str (reverse sequence)))\n                 (= sequence (reverse sequence))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e7be091535db169f9c796ba"}, {"problem": 27, "code": "(fn [l] (= (reverse l) (reverse (reverse l))))", "user": "58638adae4b0f14aab7c8823"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "585ea250e4b0f14aab7c87ba"}, {"problem": 27, "code": "(fn palindrome [seq]\n                   (loop [f-seq seq r-seq (reverse seq)]\n                     (println f-seq r-seq)\n                     (if (empty? f-seq)\n                       true\n                       (if (= (first f-seq) (first r-seq))\n                         (recur (rest f-seq) (rest r-seq))\n                         false\n                         ))))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 27, "code": "(fn [a-seq] (= (seq a-seq) (reverse a-seq)))", "user": "580d2788e4b0849f6811b730"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 27, "code": "#( if (instance? String %) (= (apply str(reverse %)) %) (= (reverse %) %))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 27, "code": "#(let [many (if (even? (count %)) (/ (count %) 2) (/ (+ (count %) 1) 2))]\n (= (take many %) (reverse (take-last many %))))", "user": "5220def1e4b0e6a83c8925b4"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 27, "code": "(fn [col]\n\t(every? true? (map = col (reverse col))) \n)", "user": "58670d13e4b0f14aab7c8871"}, {"problem": 27, "code": "(fn palindrome\n  [coll]\n  (let [coll-length (count coll)\n        split (split-at (quot coll-length 2) coll)]\n      (if (even? coll-length)\n        (do\n          (let [first-coll (first split)\n                sec-coll (reverse (second split))]\n          (= first-coll sec-coll)))\n      (do\n      (let [first-coll (first split)\n          sec-coll (reverse (rest (second split)))]\n          (= first-coll sec-coll))))))", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 27, "code": "(fn [entry]\n  (let [a (seq entry)]\n    (let [b (reduce #(cons %2 %1) [] a)]\n      (= a b)\n    )\n  )\n)", "user": "58694f69e4b0f14aab7c889f"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5869a49fe4b0f14aab7c88a9"}, {"problem": 27, "code": "(fn f\n  [col]\n  (if (< (count col) 2)\n    true\n    (let [l  (first col)\n          r  (last col)\n          ls (rest col)\n          rst (take (dec (count ls)) ls)]\n      (if (= l r)\n        (f rst)\n        false))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57c5d01ce4b05aa3c4741cea"}, {"problem": 27, "code": "(fn [x]\n    (if (= (type x) java.lang.String)\n      (= (clojure.string/reverse x) x)\n      (= (reverse x) x)))", "user": "586b6753e4b01531a375e956"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586b6f13e4b01531a375e959"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "586a663ce4b0f14aab7c88be"}, {"problem": 27, "code": "(fn [coll]\n  (if (empty? coll)\n    true\n\t(if (not (= (first coll) (last coll)))\n      false\n      (recur (rest (butlast coll))))))", "user": "586bc870e4b01531a375e964"}, {"problem": 27, "code": "(fn detects [s] (if (or (= (count s) 0) (= (count s) 1) ) true (if (= (first s) (first (reverse s))) (detects (rest (butlast s)) ) false) ) )", "user": "58622733e4b0f14aab7c8803"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586bd340e4b01531a375e966"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "54012b48e4b0de5c41848620"}, {"problem": 27, "code": "(fn [coll]\n  (= coll ((if (string? coll) clojure.string/reverse reverse) coll)))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "586c122ae4b01531a375e96f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5868ee08e4b0f14aab7c8893"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "user": "586c6462e4b01531a375e97b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586d4d63e4b01531a375e98e"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 27, "code": "#(= (seq %) (reverse  %))", "user": "586b6d51e4b01531a375e958"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (let [ l (seq l)\n         s (count l)\n         fl (first l)\n         ll (last l)]\n    (cond\n      (= s 1) true\n      (= s 2) (= fl ll)\n      (= fl ll) (palindrome? (rest (butlast l)))\n    :else\n        false\n    )))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 27, "code": "(fn [s]\n  (even? (count (set s)))\n  )", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5845f14ee4b089d5ab817e7e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 27, "code": "(fn [x1] (loop [x x1] (if (and x (next x)) (if (= (first x) (last x)) (recur (next (butlast x))) false) true)))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str(reverse %)))\n           \n   (= % (reverse %)))", "user": "586bfbcee4b01531a375e967"}, {"problem": 27, "code": "(fn [x](= (seq x) (reverse x)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "556a7626e4b09a3098a524e3"}, {"problem": 27, "code": "(fn f [l]\n         \n         (cond\n           (empty? l) true\n           (empty? (rest l)) true\n           :else (and (= (first l) (last l))\n                      (f (subvec (vec l) 1 (dec (count l)))))))", "user": "58731176e4b01531a375ea2a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 27, "code": "(fn [xs]\n  (condp instance? xs\n    String (recur (seq xs))\n    (= xs (reverse xs))))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58633954e4b0f14aab7c8819"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "58716570e4b01531a375e9fe"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "586d146de4b01531a375e98a"}, {"problem": 27, "code": "#(= (into () %) (reverse (into () %)))", "user": "5873d7a2e4b01531a375ea3f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58745926e4b01531a375ea50"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 27, "code": "(fn func [coll]\n  (cond\n   (empty? coll) true\n   (not= (first coll) (last coll)) false\n   :else (func ((comp butlast rest) coll))\n   )\n  )", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 27, "code": "(fn is-palindrome?\n  ([s] (is-palindrome? s (reverse s)))\n  ([s r]\n   (if (empty? s)\n     true\n     (if (= (first s) (first r))\n       (is-palindrome? (rest s) (rest r))\n       false))))", "user": "5875daaee4b01531a375ea74"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "58740c18e4b01531a375ea49"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse (seq x)))\n  )", "user": "571e1d9de4b0145328a76287"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5875cb95e4b01531a375ea73"}, {"problem": 27, "code": "(fn [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n    (= seq (reverse seq))\n    )  \n  )", "user": "58775496e4b01531a375ea9a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 27, "code": "(fn [x]\n  (let [q (quot (count x) 2) r (mod (count x) 2) l (partition (+ q r) q x)] (= (first l) (reverse (second l)))))", "user": "58767e82e4b01531a375ea85"}, {"problem": 27, "code": "(fn [x]\n  (loop [x1 x cnt (count x)]\n    (if (and (= (first x) (last x))\n             (> cnt 1))\n      (recur (butlast (rest x)) (- cnt 2))\n      (if (> cnt 1) false true))))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 27, "code": "(fn [x] (= (vec x) (rseq (vec x))))", "user": "5877e40ee4b01531a375eaab"}, {"problem": 27, "code": "(fn palindrome [aseq] \n    (cond \n     (empty? (drop 1 aseq)) true\n     (and (= (first aseq) (last aseq))\n          (palindrome (drop 1 (butlast aseq)))) true\n          :else false))", "user": "560d24a2e4b05f002753df34"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54a35517e4b09f271ff37c68"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5879d577e4b01531a375ead8"}, {"problem": 27, "code": "(fn [seq] (= (apply str seq) (apply str (reverse seq))))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "587abe0de4b01531a375eaef"}, {"problem": 27, "code": "(fn [word]\n  (= (apply list word) (reverse word)))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (<= (count coll) 1)\n   true\n   (if (not= (last coll) (first coll))\n     false\n     (recur (rest (drop-last coll))))))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 27, "code": "(fn x [c]\n  (if c\n    (let [a (first c)\n          b (last c)]\n      (if (= a b)\n        (-> c rest butlast x)\n        false))\n    true))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 27, "code": "(fn [v] (= (seq v) (reverse (seq v))))", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "587e43d2e4b052da650a633f"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5871175de4b01531a375e9f7"}, {"problem": 27, "code": "(fn pal [s] (if (= (first s) (last s)) (if (empty? s) true (pal (-> s rest butlast))) false))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 27, "code": "#(loop [c %]\n               (if (<= (count c) 1)\n                 true\n               (if (= (last c) (first c))\n                 (recur (drop-last (rest c)))\n                 false)))", "user": "554be50de4b0a04f7929959c"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "587ef226e4b052da650a6354"}, {"problem": 27, "code": "(fn [x]\n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 27, "code": "(fn [xs]\n  (let [revxs (reverse xs)\n        zipfn (fn [a b] [a b])\n        pairs (map zipfn xs revxs)]\n    (every? #(= (first %) (second %)) pairs)))", "user": "579c73fee4b05b1deef9ae08"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58795fd5e4b01531a375eace"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "587ee260e4b052da650a6353"}, {"problem": 27, "code": "#(= (map identity (reverse %)) (map identity %))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58821372e4b0f1effa3b764d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 27, "code": "(fn [x]\n  (if (= java.lang.String (type x))\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "58836dbee4b0f1effa3b7679"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 27, "code": "#(= (reverse %) (into '[] %))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 27, "code": "(fn [coll] \n  (= (seq coll) (reverse coll)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "587c845ae4b01531a375eb1f"}, {"problem": 27, "code": "(fn skrr [l]\n  (= (seq l) (reverse l)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 27, "code": "(fn [x] (every? #(= true %) (map #(= %1 %2) x (reverse x))))", "user": "587b1f20e4b01531a375eaf4"}, {"problem": 27, "code": "#(let [r (into [] %)] (= (reverse r) r))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 27, "code": "#(let [x (seq %)\n       y (reverse x)\n       result (map = x y)] \n  (not (contains? (set result) false)))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 27, "code": "(fn pdet\n    [pal]\n    (letfn \n      [(strip\n         [items]\n         (drop-last\n           1\n           (rest items)))]\n      (println pal)\n      (if \n        (< (count pal) 2)\n\ttrue\n\t(if\n\t  (= \n\t    (first pal)\n\t    (last pal))\n\t  (pdet (strip pal))\n\t  false))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "566da73ee4b0a866af6896ce"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "58852b53e4b0f1effa3b76b0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 27, "code": "(fn palindrome? [sequence]\n    (= (seq sequence) (reverse sequence)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 27, "code": "#(== (compare (into [] %) (into [] (reverse %))) 0)", "user": "58806599e4b0f1effa3b7615"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 27, "code": "#( =  (into () %1)  (reverse( reverse %1)))", "user": "57a6f585e4b0a9660795620e"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "53492ae6e4b084c2834f4a5f"}, {"problem": 27, "code": "#(= (if-not (= (type %) (type \"aa\")) \n       (reverse %) \n       (clojure.string/reverse %) \n       ) \n     %\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "587c48cce4b01531a375eb16"}, {"problem": 27, "code": "(fn palin [x]\n  (if (instance? String x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "5889b012e4b0f1effa3b7744"}, {"problem": 27, "code": "(fn\n  [s]\n  (loop\n    [s s]\n    (cond\n     (= s nil) true\n     (= (first s) (last s)) true\n     (not= (first s) (last s)) false\n     :else (recur (next (butlast s))))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 27, "code": "(fn [elem]\n  (cond\n    (< (count elem) 2) true\n    (= (first elem) (last elem)) (recur (rest (reverse (rest elem))))\n    :else\n    false))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 27, "code": "(fn palindrome? [s] (= (seq s) (reverse s)))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 27, "code": "(fn [x] (let [x (seq x)] (= x (reverse x))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 27, "code": "(fn [arg] \n  (loop [x arg]\n  \t(if (empty? x)\n      true\n      (if (and (= (first x) (last x)))\n       (recur (rest (butlast x)))\n        false\n       )\n      ))\n  )", "user": "588b1eb5e4b05c141a256071"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reduce conj () s)))", "user": "57dd2c99e4b0bd073c20243c"}, {"problem": 27, "code": "(fn [x]\n   (loop [i (dec (count x))\n          last true]\n     (if (and (> i -1) (true? last))\n       (recur (dec i) (= (nth x i) (nth x (- (dec (count x)) i))) )\n       (identity last)\n     )\n   )\n)", "user": "588b4bd0e4b05c141a25607a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "50997306e4b0cae2931060b5"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "55b6afc6e4b01b9910ae299c"}, {"problem": 27, "code": "(fn [seq] (= seq (if (coll? seq) (into [] (reverse seq)) (apply str (reverse seq)))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "576e607ae4b0979f89651579"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "587a2356e4b01531a375eade"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57d031d6e4b0bd073c202354"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 27, "code": "#(loop [sq (into '() %)] (and (= (first sq) (last sq)) (or (empty? sq) (recur (rest (drop-last sq))))))", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57902cd8e4b0ebec4cfb75a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "588e6a17e4b00487982d518c"}, {"problem": 27, "code": "#(= (vec %1) (reverse (vec %1)))", "user": "588e8133e4b00487982d5191"}, {"problem": 27, "code": "(fn ispalin\n  \t[x]\n  \t(case x\n  \t\tnil true\n  \n  \t(and (= (first x) (last x)) (ispalin (butlast (rest x))))))", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 27, "code": "(fn [li]\n  (loop [nl li, rl li]\n    (if (empty? nl)\n      true\n      (if (not= (first nl) (last rl))\n        false\n        (recur (rest nl) (butlast rl))\n       )\n     )\n   )\n )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58849a0ee4b0f1effa3b769b"}, {"problem": 27, "code": "#(let [s (seq %) r (reverse s)] (= r s))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "589037b4e4b00487982d51d0"}, {"problem": 27, "code": "#(let [coll (seq %)] (= coll (reverse coll)))", "user": "55e1a205e4b050e68259b41e"}, {"problem": 27, "code": "#(if (= (apply str %) (apply str(reverse  %))) true false)", "user": "5885a608e4b0f1effa3b76bc"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5839f286e4b089d5ab817d49"}, {"problem": 27, "code": "#(if (string? %) (= % (clojure.string/reverse %))   (= % (reverse %))  )", "user": "58904720e4b00487982d51d1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "588a344ae4b0f1effa3b775d"}, {"problem": 27, "code": "#(let [s (vec %)] (= s (rseq s)))", "user": "58923efce4b00487982d521c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53ada652e4b047364c04446d"}, {"problem": 27, "code": "(fn [x] (if (= (reverse x) (#(for [i %] i) x)) true false))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57e016dce4b0bd073c202470"}, {"problem": 27, "code": "(fn [s]\n  (let [origin (seq s)]\n    (= origin (reverse origin))))", "user": "57de9169e4b0bd073c202454"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 27, "code": "#(loop [lista %]\n  (if (< (count lista) 2)\n  \ttrue\n    (if (= (last lista) (first lista))\n      (recur (rest (butlast lista)))\n      false\n  \t)\n  )\n)", "user": "5890799be4b00487982d51d6"}, {"problem": 27, "code": "(fn\n           [s]\n           (= (seq s)\n              (reverse s)))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 27, "code": "#(= (seq %) (into '() %))", "user": "5891bddce4b00487982d5201"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58949f8de4b00487982d525e"}, {"problem": 27, "code": "(fn fel? [txt]\n  (if (or (empty? txt)\n          (= (count txt) 1))\n    true\n    (let [h (first txt)\n  \t      t (last txt)\n          lst (butlast (next txt))]\n      (if (= h t)\n        (fel? lst)\n        false))))", "user": "5895477fe4b00487982d527c"}, {"problem": 27, "code": "(fn p [xs] (if (< (count xs) 2) true (and (= (first xs) (last xs)) (p (butlast (rest xs))))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 27, "code": "(fn\n [x]\n (loop [pal x]\n    (if (< (count pal) 2)\n      true\n      (if (= (first pal) (last pal))\n        (recur (drop 1 (drop-last 1 pal)))\n        false))))", "user": "5894aee1e4b00487982d5260"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 27, "code": "(fn pal [ls]\n(= (map (fn [l] l) ls) (reverse ls)))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 27, "code": "(fn pal [coll]\n  (loop [cnt (count coll)\n         left coll]\n    (if (< cnt 2)\n      true\n      (and (= (first coll) (last coll))\n           (recur (dec cnt) (drop-last (rest coll)))))))", "user": "58975725e4b00487982d52b7"}, {"problem": 27, "code": "(fn [coll]   \n    (if (= (reverse coll) (seq coll))\n        true\n        false))", "user": "5896735fe4b00487982d529d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "589714cbe4b00487982d52b1"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 27, "code": "(fn [s] (every? true? (map (fn [%1 %2] (= %1 %2)) s (reverse s))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 27, "code": "(fn [x]\n  (= (lazy-seq (reverse x)) (lazy-seq x)))", "user": "589560d8e4b00487982d5281"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4db863d7535d1e037afb2190"}, {"problem": 27, "code": "(fn [x]\n  (let [otherway (reverse x)]\n    (= x (if (string? x) \n           (apply str otherway)\n           otherway))))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 27, "code": "#(= % ((if (string? %) clojure.string/reverse reverse) %))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "5899c54de4b00487982d52fa"}, {"problem": 27, "code": "#(let [x (into [] %)] (= (rseq x) x))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 27, "code": "(fn \n  [x]\n  (= (reverse x) (seq x)))", "user": "58976bfde4b00487982d52bc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "584f1397e4b0b7285a6f4e5e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "589a8dace4b00487982d5311"}, {"problem": 27, "code": "#(= (into [] %) (reverse (into [] %)))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "56c85700e4b0ed865f9758d0"}, {"problem": 27, "code": "(fn isPalindrome [alist] (if (>= 1 (count alist)) true (if (= (first alist) (first (reverse alist))) (isPalindrome (rest (reverse (rest alist)))) false)))", "user": "58950f29e4b00487982d5270"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "588f1743e4b00487982d519d"}, {"problem": 27, "code": "#(if (empty? %) true (if (not (next %)) true (if (= (first %) (last %)) (recur (next (butlast %))) false)))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57a6552ce4b0a96607956208"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "589511dee4b00487982d5272"}, {"problem": 27, "code": "(fn palindrome\n  [sq]\n  (let [ssq (seq sq)]\n    (= ssq (reverse ssq))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 27, "code": "#(= (reverse %)(reverse (reverse %)))", "user": "587c738de4b01531a375eb1a"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 27, "code": "(fn [lst]\n  (let [len (quot (count lst) 2)\n        fst-half (take len lst)\n        snd-half (drop len lst)]\n    (if (= (count fst-half) (count snd-half))\n      (= fst-half (reverse snd-half))\n      (= fst-half (reverse (rest snd-half))))))", "user": "589cb617e4b00487982d536a"}, {"problem": 27, "code": "(fn palindrome?\n  ([sequ] (palindrome? '() sequ))\n  ([front back]\n   (if (empty? back)\n     false\n     (letfn [(test [a b]\n               (if (string? b)\n                 (= b (apply str a))\n                 (= b a)))]\n       (or (test front back)\n           (test front (rest back))\n           (palindrome? (conj front (first back))\n                        (rest back)))))))", "user": "589c6914e4b00487982d535d"}, {"problem": 27, "code": "(fn pal [xs]\n        (if (or (= 0 (count xs)) (= 1 (count xs)))\n         true   \n         (if (= (first xs) (last xs)) \n          (pal (-> xs reverse rest reverse rest))\n          false)))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 27, "code": "#(= (seq %)\n  (reverse %))", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 27, "code": "(fn [s]\n  ((comp (partial = (apply list s)) reverse) s)\n  )", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 27, "code": "(fn palindrome? [iseq]\n  (let [n (count iseq)]\n    (= (take (int (/ n 2)) iseq) (reverse (drop (/ n 2) iseq)))))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "589f0b8ee4b02bd94d917e71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 27, "code": "(fn [text]\n\t(= (seq text) (reverse text)))", "user": "57382719e4b0cd1946bd1055"}, {"problem": 27, "code": "(fn\n  [coll]\n  (let [coll (into [] coll)]\n    (= coll (reverse coll))))", "user": "56e22366e4b03a7c14b85a30"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)) )", "user": "58988cbbe4b00487982d52d7"}, {"problem": 27, "code": "(fn [coll]\n  (= coll (if (string? coll) (clojure.string/reverse coll) (reverse coll))))", "user": "5771b155e4b0979f896515ba"}, {"problem": 27, "code": "(fn [s]\n   (let [r (reverse s)]\n     (->> (map #(= %1 %2) s r)\n          (apply = true))))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 27, "code": "#(if (string? %1) (= %1 (apply str (reverse %1))) (= %1 (reverse %1))  )", "user": "587cf1b1e4b01531a375eb2b"}, {"problem": 27, "code": "#(= % (if (instance? String %) (apply str (reverse %)) (reverse %)) )", "user": "587cf147e4b01531a375eb29"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)) )", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 27, "code": "#(= (reverse(reverse %)) (reverse %))", "user": "589f58fee4b02bd94d917e7f"}, {"problem": 27, "code": "(fn [coll]\n  (loop [length (count coll)\n         i 0]\n    (if (= i length)\n          ; If we made it this far, return true.\n          true\n          ; Otherwise...\n          (if (=\n               (nth coll i)\n               (nth coll (- length i 1)))\n            (recur length (inc i))\n            false))))", "user": "5898f299e4b00487982d52e1"}, {"problem": 27, "code": "(fn [c]\n   (not-any? false?\n             (for [v (map (fn [a b] [a b])\n                          (take (count c) (range))\n                          (reverse (take (count c) (range))))]\n               (= (nth c (first v))\n                  (nth c (last v))))))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 27, "code": "(fn [orig] (= (vec orig) (vec (reverse orig))))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "58a35b1ee4b02bd94d917ef3"}, {"problem": 27, "code": "(fn pall [coll]\n  (if (< (count coll) 2)\n    true\n    (and (= (first coll) (last coll))\n         (pall (rest (butlast coll)))\n    )\n  )\n)", "user": "58a3c6aae4b02bd94d917f00"}, {"problem": 27, "code": "(fn palindrome? [alist]\n  (let [half-size (quot (count alist) 2) \n        left-half (drop-last half-size alist)  \n        right-half (drop half-size alist)]\n    (if (= (reverse right-half) left-half)\n      true\n      false\n        )\n    )\n  )", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58951903e4b00487982d5274"}, {"problem": 27, "code": "#(let [p (int (-> % count (/ 2)))\n       [l r] ((juxt (partial take p) (partial take-last p)) (seq %))]\n   (= l (reverse r)))", "user": "58a3279fe4b02bd94d917ee9"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5892a5fde4b00487982d5228"}, {"problem": 27, "code": "(fn [opt-palindrome]\n          (let [palin-seq (seq opt-palindrome)\n                rever-seq (reverse palin-seq)]\n            (= palin-seq rever-seq)) )", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 27, "code": "(fn [s] \n  (= (reverse s) (reverse (reverse s))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 27, "code": "#(let [s (into [] %1)] (= s (reverse s)))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 27, "code": "(fn isPal [col] (\n   if (empty? col) \n      true\n      (and \n        (= (first col) (last col))\n        (isPal (rest (butlast col)))\n      )\n ))", "user": "589c12c2e4b00487982d5353"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 27, "code": "(fn [coll]\n  (if (< (count coll) 3)\n    (= (first coll) (last coll))\n    (if (not= (first coll) (last coll))\n      false\n      (recur (rest (butlast coll))))))", "user": "58a72bafe4b01a0c0b23293d"}, {"problem": 27, "code": "#(if (string? %)\n  (= (apply str (reverse %)) %)\n  (= (reverse %) %))", "user": "58a7b7cbe4b01a0c0b232946"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 27, "code": "(fn pal\n  ([x y]\n   (println (str (first x) (last x) (count x)))\n   (cond (empty? x) y\n         (= (count x) 1) y\n        (not (= (first x) (last x))) false\n        :else (recur (take (- (count (rest x)) 1) (rest x)) true)))\n  ([x]\n   (pal x false)))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58a82659e4b01a0c0b232951"}, {"problem": 27, "code": "(fn [x] (= (into [] x) (into () x) ))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 27, "code": "(fn [x]\n  (loop [left x right '()]\n    (if (= (count left) (count right)) \n      (= left right) \n      \n      (if (= (- (count left) 1) (count right) )\n      (= (rest left) right) \n      \n     \t(recur (rest left) (cons (first left) right))))))", "user": "58aa19d3e4b01a0c0b23297c"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 27, "code": "(fn [ls]\n  (= (seq ls) (reverse ls)))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58934052e4b00487982d523a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58a72f71e4b01a0c0b23293f"}, {"problem": 27, "code": "(fn [input]\n  (= (reverse input) (seq input)))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 27, "code": "(fn [in] \n  (= (reverse in) (reverse (reverse in))))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 27, "code": "(fn f [s]\n  (let [ss (seq s)]\n  (= ss (reverse ss))))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 27, "code": "(fn [x] ( = (flatten (list (seq x))) (into '() x) ))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5619d3a2e4b053970a773b00"}, {"problem": 27, "code": "#(= (reverse %) (reverse (into '() %)))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 27, "code": "; (fn [l] (let [rev (reverse l)] (= rev (reverse rev))))\n#(= (seq %) (reverse %))", "user": "58791973e4b01531a375eac5"}, {"problem": 27, "code": "#(if (instance? String %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 27, "code": "(fn [x]\n   (let [orig (seq x)]\n     (letfn [(traverse [x new-x]\n               (if-let [l (last x)]\n                 (traverse (butlast x) (conj new-x l))\n                 new-x))]\n       (= orig (traverse x [])))))", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 27, "code": "(fn [s] (every? true? (map = s (reverse s))))", "user": "58730484e4b01531a375ea26"}, {"problem": 27, "code": "(fn [x] (if (string? x) \n          (= x (apply str (vec (reverse x)))) \n          (= x (reverse x))))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "58aee148e4b0ebc645576cc3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 27, "code": "(fn [l]\n  (if (nil? (last l))\n    true\n    (and (= (first l) (last l)) (recur (drop-last (rest l))))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 27, "code": "(fn [lis] \n  (let [rev (reduce conj () lis)]\n  (= (reduce str rev) (reduce str lis))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "55f44b33e4b06e875b46ce70"}, {"problem": 27, "code": "(fn \n  [seqn]\n  (= (apply list seqn) (reverse seqn)))", "user": "5854580ce4b07779d46863f9"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 27, "code": "(fn palidrome\n  [x]\n  (if (= (reverse (seq x)) (seq x) )\n    true\n    false))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58b31a46e4b0ebc645576d1b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 27, "code": "(fn [x]\n  (= (into [] x)\n     (reverse x)))", "user": "58b36131e4b0ebc645576d21"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "589919f5e4b00487982d52e7"}, {"problem": 27, "code": ";(fn [coll]\n;  (let [hc (/ (count coll) 2)\n;        f (take hc coll)\n;        s (drop hc coll)]\n;    (every? true? (map = f s))\n;    )\n;  )  \n;\n; ahha!\n\n;(fn [coll]\n;    (every? true? (map = coll (reverse coll)))\n;  )  \n;:D\n\n;; optimizations\n(fn [coll]\n  (let [hu (/ (inc (count coll)) 2)]\n\t    (every? true? (take hu (map = coll (reverse coll))))\n    )\n  )", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 27, "code": "(fn foo [xs]\n  (cond\n   (<= (count xs) 1) true\n   (= (first xs) (last xs)) (foo (butlast (rest xs)))\n   :else false))", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 27, "code": "(fn [s]\n  (let [half-length (-> s count (/ 2) int)\n        first-part (take half-length s)\n        last-part (take-last half-length s)]\n    (= first-part (reverse last-part))))", "user": "5895fd90e4b00487982d528f"}, {"problem": 27, "code": "#(let [r (reverse %) f (reverse r)] (= f r))", "user": "58a16387e4b02bd94d917eb1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 27, "code": "#( = (if (string? %) (clojure.string/reverse %) (reverse %))%)", "user": "58a1d00ae4b02bd94d917ec6"}, {"problem": 27, "code": "(fn [s]\n      ((fn rec [s s1 s2 n]\n         (if\n           (= (count s) n)\n           (= s1 s2)\n           (rec s (conj s1 (str (nth s n))) (conj s2 (str (nth s n))) (inc n))\n         )\n      ) s [] '() 0))", "user": "58b43bf5e4b0ebc645576d38"}, {"problem": 27, "code": "(fn [coll]\n    (let [rev (reverse coll)\n          same-lst (map #(vector %1 %2) coll rev)\n          result (filter #(= (first %) (second %)) same-lst)]\n      (= (count coll) (count result))))", "user": "589e22fae4b02bd94d917e56"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58a55694e4b01a0c0b23290b"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 27, "code": "(fn [xs]\n    (= (vec xs) (reverse (vec xs)))\n    )", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 27, "code": "(fn [x]\n  (let [reversed (reverse x)\n        reversed (if (string? x)\n                   (apply str reversed)\n                   reversed)]\n    (= reversed x)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "564a0698e4b0284900eef64b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "589771f9e4b00487982d52bd"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 27, "code": "(fn pali [coll]\n  (loop [xs coll]\n    (cond\n     (= 1 (count xs)) true\n     (= 0 (count xs)) true\n     (not= (first xs) (last xs)) false\n     :else (recur (-> xs rest butlast)))))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 27, "code": "(fn pali [coll]\n  (let [rev (reverse coll)]\n    (= (seq rev) (seq coll))\n    )\n\n  )", "user": "57ff7d88e4b0a837a8b30c20"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "587cebf3e4b01531a375eb28"}, {"problem": 27, "code": "(fn [coll]\n    (let [coll-length (count coll)\n          check-index (range (Math/ceil (/ coll-length 2)))]\n      (every? (fn [index]\n                (let [head (nth coll index)\n                      tail (nth coll (- coll-length 1 index))]\n                  (= head tail)))\n              check-index)))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "589c0475e4b00487982d5351"}, {"problem": 27, "code": "#(letfn [(palindrome? [xs]\n          (if (empty? xs)\n            true\n            (let [f (first xs)\n                  l (last xs)]\n              (if (= f l)\n                (palindrome? (rest (drop-last xs)))\n                false))))]\n   (palindrome? %))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 27, "code": "(fn [source]\n\t(loop [src source step 0 size (count source)]\n\t\t(if (= step size)\n\t\t\ttrue\n\t\t\t(if (= (nth src step) (nth src (- size (+ 1 step))))\n\t\t\t\t(recur src (+ 1 step) size)\n\t\t\t\tfalse\n\t\t\t\t))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 27, "code": "#(= (seq %) (-> % seq reverse))", "user": "4f050377535dcb61093f6bed"}, {"problem": 27, "code": "(fn [collection]\n  (= (seq collection) (reverse collection)))", "user": "5712418fe4b09c608db70455"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 27, "code": "#(loop [xs %] (if (empty? xs) true (if (= (first xs) (last xs)) (recur (rest (drop-last xs))) false)))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 27, "code": "#(cond (empty? %) true\n       :else (and (= (first %) (last %)) (recur (butlast (rest %)))))", "user": "58bef28be4b021aa9917ecca"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= (apply str (reverse x)) x) (= (reverse x) x)))", "user": "58be3142e4b0888cdc949d44"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58765038e4b01531a375ea7e"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "58b9c43be4b0888cdc949cd3"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse x)\n     (seq x))\n  )", "user": "58bf1cf8e4b021aa9917eccf"}, {"problem": 27, "code": "(fn [subject]\n  (let [half (int (/ (count subject) 2))]\n    (= (take half subject) (reverse (take-last half subject)))))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58954772e4b00487982d527b"}, {"problem": 27, "code": "(fn p [x]\n  (if (< 2 (count x))\n    (if (= (first x) (last x))\n       (p (butlast (rest x)))\n       false)\n    true))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 27, "code": "(fn [x] (let [t (into [] x)] (= t (rseq t))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58681907e4b0f14aab7c8889"}, {"problem": 27, "code": "(fn pali? [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (pali? (rest (butlast x)))\n   true false))", "user": "579b24d0e4b05b1deef9adee"}, {"problem": 27, "code": "(fn [x]\n  (= (reduce conj [] (reverse x)) (seq x)))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 27, "code": "(fn [l] (let [half-cnt (int (/ (count l) 2))]\n                    (=\n                      (reverse (take-last half-cnt l))\n                      (take half-cnt l))))", "user": "58c54e2ee4b021aa9917ed3a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58b51aeae4b0ebc645576d4b"}, {"problem": 27, "code": "(fn p [coll]\n  (cond\n   (nil? coll) true\n   (= (first coll) (last coll)) (p (butlast (rest coll)))\n   :else false))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 27, "code": "(fn palin [sekvenssi]\n  (if (empty? sekvenssi)\n    true\n    (if (not (= (first sekvenssi) (last sekvenssi)))\n      false\n      (recur (drop 1 (drop-last 1 sekvenssi))))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 27, "code": "(fn [lst] (= (into [] lst) (into () lst)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 27, "code": "#(= (some false? (map = % (reverse %))) nil)", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "4f847bf2e4b033992c121c32"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 27, "code": "#(=  (seq %) (reverse (seq %)))", "user": "55f8ad54e4b03cbcff9738b9"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 27, "code": "#(if (= (first %) (last %)) true false)", "user": "58969076e4b00487982d52a2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 27, "code": "(fn f [l]\n  (if (empty? l)\n    true\n    (if (= (first l) (last l))\n      (f (butlast (rest l)))\n      false)))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 27, "code": "(fn [s] \n  (= (reverse (seq s)) (seq s)))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 27, "code": "#(let [lst %\n             size (count %)\n             half (/ size 2)]\n    (= (take half lst) (take half (reverse lst))))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "58c623dbe4b021aa9917ed4b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 27, "code": "(fn [tsequence] (= (reverse tsequence) (seq tsequence)))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 27, "code": "#(if (string? %)\n  (= % (apply str (reverse %)))\n  (= % (reverse %)))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 27, "code": "(fn [coll]\n  (= coll\n     (if (string? coll)\n    \t(apply str (reverse coll))\n    \t(reverse coll))))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse sq)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58c6c110e4b021aa9917ed66"}, {"problem": 27, "code": "#(= ((comp reverse seq) %) (seq %))", "user": "588d224ae4b00487982d516c"}, {"problem": 27, "code": "(fn [xs]\n  (if (= (class xs) (class \"\"))\n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 27, "code": "#(reduce 'and (map = %1 (reverse %1)))", "user": "5841872be4b089d5ab817e06"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 27, "code": "(fn [st] (= (seq st) (reverse st)))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 27, "code": "#(let[item (into [] %)] (= item (reverse item)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 27, "code": "(fn [x] (= (first x) (last x)))", "user": "58d5359ce4b03c36ff7e5959"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x))\n  )", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 27, "code": "(fn [x] ( = (seq x) (reverse x)))", "user": "573946b6e4b0cd1946bd106d"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "58cea645e4b03c36ff7e58a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56f3d21ae4b046a417f92055"}, {"problem": 27, "code": "(fn [x] (let [r (reverse x)] (if (string? x) (= x (apply str r)) (= x r))))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 27, "code": "(fn [sequ]\n  (= (vec sequ) (vec (reverse sequ))))", "user": "58d6c601e4b03c36ff7e5974"}, {"problem": 27, "code": "(fn\n  palindrome?\n  [s]\n  (= (seq s) (reverse s))\n)", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 27, "code": "(fn polindrom? [xs]\n  (cond (empty? xs) true\n        (= (count xs) 1) true\n        :else (and (= (first xs) (last xs)) (polindrom? (-> xs rest butlast)))))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58cc204ce4b03c36ff7e5860"}, {"problem": 27, "code": "#((comp (partial = %) (if (string? %) (partial apply str) identity) reverse) %)", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 27, "code": "#_(fn [s]\n (let [n (/ (count s) 2)\n       [beg end]\n       ; split-at rounds n up \n       (split-at n s)]\n  (= (seq \n      (take (Math/floor n) beg))\n      (reverse end) )) )\n\n; simpler, maybe not as efficient\n(fn [s]\n  ; seq necessary for strings\n  (= (seq s) (reverse s)) )", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 27, "code": "#(loop [start 0 end (- (count %) 1)]\n   (if (>= start end) true\n     (if-not (= (nth % start) (nth % end)) false\n       (recur (inc start) (dec end)))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 27, "code": "(fn [x] \n  (if (= (seq x) (reverse x)) \n    true\n    false))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 27, "code": "(fn [xs] \n  (= (reduce \n      (fn [xxs x] (cons x xxs)) \n      []\n      xs\n      )\n     (seq xs)\n  )\n)", "user": "58d2bfc8e4b03c36ff7e5909"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58dace6ae4b0a4d5acaab66a"}, {"problem": 27, "code": "(fn [se]\n  (let [fwd (take (Math/floor (/ (count se) 2)) se)\n        bkw (take (Math/floor (/ (count se) 2)) (reverse se))]\n    (if (= fwd bkw)\n      true\n      false)))", "user": "565ddeb9e4b068f2fe63dc2c"}, {"problem": 27, "code": "(fn palindrome? [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 27, "code": "(fn palindrome? [col]\n  (if (= (reverse col) (reverse (reverse col)))\n    true\n    false))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 27, "code": "(fn [x] (let [size (quot (count x) 2)]\n          (->> x\n              (split-at size)\n              (last)\n              (reverse)\n              (= (take (- (count x) size) (vec x)))\n          )))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 27, "code": "#(if (= (vec %) (reduce conj () %)) true false)", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "58d810bfe4b03c36ff7e5991"}, {"problem": 27, "code": "(fn [pal]\n(= (reverse pal)(seq pal)))", "user": "58dc5773e4b0a4d5acaab69a"}, {"problem": 27, "code": "(fn [coll]\n    (let [quantity (int (/ (count coll) 2)) ]\n        (= (take quantity coll) (take quantity (reverse coll)))))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 27, "code": "(fn palindrome-detector [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58dc5ceae4b0a4d5acaab69b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 27, "code": "(fn [x]\n  ((fn pal [x xs]\n     (if (nil? xs)\n       true\n       (if (= x (last xs))\n         (pal (first xs) (butlast (rest xs)))\n         false)))\n   (first x) (rest x)))", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 27, "code": "(fn [c]\n  (if (string? c)\n    (= (apply str (reverse c)))\n    (= c (reverse c))))", "user": "58ddac2ce4b0a4d5acaab6d6"}, {"problem": 27, "code": "#(= (into '() %) (into '() (into '() %)))", "user": "58db7ae7e4b0a4d5acaab67f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 27, "code": "#(loop [v [] coll (vec %)]\n   (if (> (count coll) 1)\n     (recur (conj v (= (first coll) (last coll)))\n            (subvec coll 1 (dec (count coll))))\n     (every? true? v)))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58dede54e4b0a4d5acaab702"}, {"problem": 27, "code": "#(= (reverse %)\n    (reverse (reverse %)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58e0ca7be4b005f69f193c6c"}, {"problem": 27, "code": "(fn [l] (= l ((if (= java.lang.String (type l))\n                clojure.string/reverse\n                reverse) l)))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))", "user": "58e37946e4b005f69f193cae"}, {"problem": 27, "code": "#(\n  = (seq %) (reverse (seq %))\n  )", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 27, "code": "(fn [huan] (= (split-with (partial = 1) huan) (split-with (partial = 1) (reverse huan)) ))", "user": "58e5181ce4b056aecfd47c84"}, {"problem": 27, "code": "#(= (partition-by identity %) (partition-by identity (reverse %)))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 27, "code": "(fn p[x] (= (partition-by identity x) (reverse (partition-by identity x))))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 27, "code": "(fn [x] (= x(if (string? x )\n          (apply str(reverse x))\n          (reverse x))))", "user": "58e5181ce4b056aecfd47c83"}, {"problem": 27, "code": "(fn [x] \n   (= x (if (string? x)\n     (apply str (reverse x) )\n          (reverse x)\n     \n   )\n)\n)", "user": "58e51834e4b056aecfd47c85"}, {"problem": 27, "code": "#(=  (seq %) (reverse %))", "user": "58dbe9dfe4b0a4d5acaab68c"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "52c776a9e4b0c2d177d62123"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 27, "code": "(fn [coll] \n     (if (empty? coll)\n         true\n     (if-not (= (first coll) (last coll))\n             false\n      (let [new-coll (butlast (rest coll))]\n            (recur new-coll)))))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e52e99e4b056aecfd47c8d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 27, "code": "(fn [col] (= (seq col) (seq (reverse col))))", "user": "58e15bfde4b005f69f193c7a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58e63b75e4b056aecfd47cac"}, {"problem": 27, "code": "(fn [lst]\n  (cond \n   (empty? lst) true\n   (= (count lst) 1) true\n   (not (= (first lst) (last lst))) false\n   :else (recur (butlast (rest lst)))))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (= (seq x) (reverse x)))", "user": "58e53760e4b056aecfd47c8f"}, {"problem": 27, "code": "(fn [seq] \n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n  \t(= seq (reverse seq))))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 27, "code": "#(-> % seq (= (seq(reverse %))))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 27, "code": "(fn [list] (= (reverse (seq list)) (seq list)))", "user": "58e6e624e4b056aecfd47cc1"}, {"problem": 27, "code": "(fn pal [s]\n\t  \t\t(cond\n\t  \t\t\t(= (count s) 0) true\n\t\t\t\t(= (count s) 1) true\n\t\t\t\t:else\n\t\t\t(and\n\t\t\t\t(= (first s) (last s))\n\t\t\t\t(pal (take (- (count s) 2) (rest s))))))", "user": "58e836c9e4b056aecfd47ce8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 27, "code": "(fn palindrome? [collection]\n  (= (seq collection) (reverse collection)))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4e6a676b535d8ccf87e9fedd"}, {"problem": 27, "code": "(fn [x] (= (reverse (into [] x)) (into [] x)))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 27, "code": "(fn re [x] (=(reverse (seq x)) (seq x)))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 27, "code": "(fn [in-seq]\n    (= (seq in-seq) (reverse (seq in-seq))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 27, "code": "#(let [n (quot (count %) 2)] (= (take n %) (reverse (take-last n %))))", "user": "58ed8f4ce4b056aecfd47d86"}, {"problem": 27, "code": "#((fn equ? [x y] (if (not= (first x) (first y)) false (or (= x y) (equ? (rest x) (rest y))))) (reverse %) %)", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e0fa79e4b005f69f193c6e"}, {"problem": 27, "code": "(fn [coll] (let [collseq (seq coll)] (= collseq (reverse collseq))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 27, "code": "#( = (seq %) (reverse %) )", "user": "58ea778be4b056aecfd47d1e"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= (reverse s) s)))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 27, "code": "(fn Palin? [xs]\n         (loop [i (int (/ (count xs) 2))\n                res true]\n           (if (or (< i 0) (= false res))\n             res\n             (recur (dec i) (= (nth xs i) (nth xs (- (dec (count xs)) i)))))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 27, "code": "; better solution: #(= (seq %) (reverse (seq %))) ... not sure what i was thinking here originally\n;(fn [x] (if (string? x) (= (apply str (vec (reverse x))) x)(= (into [] (reduce conj () x)) x)))\n(fn [x] (= (seq x) (reverse (seq x))))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 27, "code": "(fn f [list]\n  (if (empty? list)\n    true\n    (if (= (first list) (last list))\n      (f (rest (butlast list)))\n      false)))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 27, "code": "(fn palind\n  ([cnt] (palind cnt (reverse cnt)))\n  ([cnt rev] (cond  (empty? cnt) true (= (first cnt) (first rev)) (palind (rest cnt) (rest rev)) :else false ) ))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse (seq sq))))", "user": "52cfb277e4b07d0d72b273ac"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58efe689e4b056aecfd47dd5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 27, "code": "(fn [S] (let [c (-> S (count) (/ 2) (int))\n              h (->> S (partition c) (first))\n              t (->> S (reverse) (partition c) (first))\n              z (map vector h t)]\n          (empty? (filter #(not= (first %) (last %)) z))))", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 27, "code": "(fn f\n   ([x]\n    (if (empty? x)\n      true\n      \n    (if (= (first x) (last x))\n      (recur (take (- (count x) 2) (next x)))\n      false\n      ))))", "user": "58de94e2e4b0a4d5acaab6f4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 27, "code": "#(= (seq %) ((comp reverse seq) %) )", "user": "5895385fe4b00487982d5279"}, {"problem": 27, "code": "#(loop [s % i 0 j (dec (count %))] (if (> i j) true (if (not= (nth s i) (nth s j)) false (recur s (inc i) (dec j)))))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 27, "code": "(fn [s]\n  (every? true? (map #(= %1 %2) s (reverse s))))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58f3e4aee4b0438e51c2ceb0"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58f350d7e4b0438e51c2ce9e"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (clojure.string/reverse x) (reverse x))))", "user": "58ee51a4e4b056aecfd47da6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x)) ))", "user": "516fc530e4b0b86e66597f00"}, {"problem": 27, "code": "#(=(reverse %)(seq %))", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 27, "code": "(fn palindrome [p]\n  (if (< (count p) 2)\n    true\n    (if (= (first p) (last p))\n      (palindrome\n        (drop 1\n          (take (- (count p) 1) p)))\n      false)))", "user": "58f4fa7ee4b0438e51c2cecb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 27, "code": "#(let [x (split-at (/(count %)2) %)]\n   (if (even? (count%))\n   (= (reverse(x 1))(x 0))\n   (= (reverse(x 1))(drop-last(x 0)))))", "user": "58f7b1c6e4b0438e51c2cf1a"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5151a2c4e4b03e678e393ad1"}, {"problem": 27, "code": "(fn palindrome? [x] (cond\n             (= () (rest x)) true\n             (= (first x) (last x)) (palindrome? (reverse (rest (reverse (rest x)))))\n             :else false\n        )\n)", "user": "58f92297e4b0438e51c2cf43"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 27, "code": "(fn [data]\n  (let[cnt (count data)]\n    (if (<= cnt 1)\n      true\n      (if-not (= (first data) (last data))\n        false\n        (recur (take-last (- cnt 2) (take (- cnt 1) data)))))))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 27, "code": "(fn [x]\n\t(= (seq x) (reverse (seq x))\n\t)\n)", "user": "58fb5a03e4b0438e51c2cf77"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 27, "code": "(fn pal?[x] (cond (empty? x) true (not= (first x) (last x)) false :else (pal? (nthrest (butlast x) 1))))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 27, "code": "(fn palindrome? [l]\n  (if (or (empty? l) (= (count l) 1))\n      true\n    (and (= (first l) (last l))\n         (palindrome? (drop-last (rest l))))))", "user": "58fb87efe4b0438e51c2cf7b"}, {"problem": 27, "code": "(fn [s] (every? identity (map = s (reverse s))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 27, "code": "(fn pali? [coll]\n  (cond\n    (<= (count coll) 1) true\n    (= (first coll) (last coll)) (pali? (->> coll (drop 1) (drop-last 1)))\n    :else false))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "58fa65fde4b0438e51c2cf63"}, {"problem": 27, "code": "#(= (into () %)(into [] %))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (= (reverse s) (reverse (reverse s))))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 27, "code": "(fn [%] (= (seq %) (reverse %)))", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 27, "code": "(fn a [x]\n  (if (> (count x) 1)\n  \t(if (= (first x) (last x))\n\t  \t(a (rest (butlast x)))\n      \tfalse\n    ) true\n  )\n)", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58fe8b36e4b0438e51c2cfd9"}, {"problem": 27, "code": "#(let [partition-coll (partition-all (int (Math/ceil (/ (count %) 2))) %) \n       a (second partition-coll) \n       b (if (= (count a) (count (first partition-coll))) \n                (first partition-coll) \n                (drop-last (first partition-coll)))] (= a (reverse b)))", "user": "58eb11afe4b056aecfd47d29"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 27, "code": "(fn [x]\n  (if (= (apply str(reverse x)) (apply str x))\n    true\n    false))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 27, "code": "(fn [s]\n    (loop [f (first s)\n           l (last s)\n           r (drop-last (rest s))]\n      (if (empty? r)\n        (= f l)\n        (and (= f l) (recur (first r) (last r) (drop-last (rest r)))))))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 27, "code": "(fn f [x]\n  (if (or (= (count x) 0) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (f (reverse (rest (reverse (rest x)))))\n      false)))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53756f8be4b06839e8705e14"}, {"problem": 27, "code": "(fn pal [lat]\n  (if (string? lat)\n    (= lat (apply str (reverse lat)))\n    (= lat (reverse lat))))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5552780ce4b0deb715856df4"}, {"problem": 27, "code": "(fn[x] (\n         -> x\n         (count)\n         ((fn[xs](quot xs 2)))\n         ((fn[len](= (take len x) (reverse (take-last len x)))))\n        )\n )", "user": "58ec5e86e4b056aecfd47d5f"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 27, "code": "(fn pali [x]\n  (cond\n   (<= (count x) 1) true\n   (= (first x) (last x)) (pali (butlast (rest x)))\n   :else false))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 27, "code": "(fn [in] (= (reverse (seq in)) (seq in)))", "user": "589b98fae4b00487982d533c"}, {"problem": 27, "code": "(fn\n  [word]\n  (let [word-seq (seq word)\n        word-reversed (reverse word)]\n    (= word-seq word-reversed)))", "user": "58ed0198e4b056aecfd47d72"}, {"problem": 27, "code": "(fn [coll] (= coll (if (string? coll) (clojure.string/reverse coll) (reverse coll))))", "user": "59024826e4b0438e51c2d053"}, {"problem": 27, "code": "#(= (reduce str (reverse %)) (reduce str %))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 27, "code": "(fn [li] \n  (if (< (count li) 2)\n    true\n    (if (= (first li) (last li))\n      (recur (drop-last (rest li)))\n      false\n    )))", "user": "59005094e4b0438e51c2d01e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 27, "code": "(fn [l] (let [s (seq l)] (= s (reverse s))))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (seq (reverse coll))))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "543a8256e4b032a45b869327"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "59073e0fe4b047aa04b19950"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "59075e3be4b047aa04b19955"}, {"problem": 27, "code": "(fn [xs] (if (string? xs) (if (= (clojure.string/reverse xs) xs) true false)\n(if (= (reverse xs) xs) true false)))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5907f751e4b047aa04b1996c"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "58b226cce4b0ebc645576d07"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () (seq %)))", "user": "59085adfe4b047aa04b19972"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 27, "code": "(fn pal [x] (let [y (into [] x)] (if (< (count y) 2) \n               true \n               (if (= (peek y) (first y))\n                (pal (rest (pop y)))\n                 false)\n            ) ) )", "user": "5906d7e9e4b047aa04b1993f"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1) )", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 27, "code": "(fn [s] (if (= true (string? s)) (= (clojure.string/reverse s) s) (= (reverse s) s)))", "user": "59096794e4b047aa04b1999e"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 27, "code": "(fn\n  [palindrome?]\n  (loop [p palindrome?]\n    (if (< (count p) 2)\n      true\n      (let [left (first p)\n            right (last p)]\n        (if (= left right)\n          (if (= (count p) 2)\n            true\n            (recur (rest (butlast p))))\n          false)))))", "user": "59077d7be4b047aa04b1995b"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "user": "584948fce4b089d5ab817ecc"}, {"problem": 27, "code": "#(if (string? %) \n   (= % (apply str (reverse %))) \n   (= % (reverse %)))", "user": "55d70b8fe4b0e31453f64a9c"}, {"problem": 27, "code": "(fn palindrome [thing]\n  (cond \n    (empty? thing) true\n    (empty? (rest thing)) true\n    (not= (first thing) (last thing)) false\n    :else (palindrome (-> thing rest drop-last))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 27, "code": "(fn palin\n  [x]\n  (= (seq x) (reverse x)))", "user": "59076082e4b047aa04b19956"}, {"problem": 27, "code": "(fn [x] ( =(reverse x)(seq x)))", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 27, "code": "(fn [[x & xs]]\n  (if (empty? xs)\n    true\n    (if (= x (last xs)) (recur (drop-last xs)) false)))", "user": "590e588ce4b047aa04b19a23"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 27, "code": "(fn\n  [listtocheck]\n  (= (reverse listtocheck) (seq listtocheck)))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/reverse %) %)\n   (=(reverse %) %))", "user": "590f283de4b047aa04b19a35"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 27, "code": "#(= (apply str (reduce conj '() %) ) (apply str %))", "user": "5908b36be4b047aa04b19982"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 27, "code": "(fn palindrome [los] ; los: list-or-string\n  (let [lst (if (string? los) (seq los) los)\n        cnt (/ (count lst) 2)\n        left (take cnt lst)\n        right (reverse (take-last cnt lst))\n        zipped (map vector left right)]\n    (every? (fn [[a b]] (= a b)) zipped)))", "user": "5912477be4b0163c97b36eec"}, {"problem": 27, "code": "(fn pal [valList x] \n  (if (< (count x) 2)\n       (if (= true (some #{true} valList)) true false)\n         (pal (conj valList (= (first x) (last x))) (rest (reverse (rest x))))\n          )) '()", "user": "59129074e4b0163c97b36ef1"}, {"problem": 27, "code": "(fn [coll]\n  (if (coll? coll)\n    (= coll (reverse coll))\n    (let [string-list (map (fn [x] (str \"\" x)) coll)]\n      (= string-list (reverse string-list)))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 27, "code": "#(if (and (not (empty? %)) (= (first %) (last %))) (recur (rest (drop-last %))) (empty? %))", "user": "591326f2e4b0163c97b36efc"}, {"problem": 27, "code": "#(= (seq %)(seq(reverse %)))", "user": "5913375de4b0163c97b36efe"}, {"problem": 27, "code": "#(=(reverse %) (seq %))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 27, "code": "(fn [li] (= (reverse li) (seq li)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5916eb48e4b09b4ee5954b95"}, {"problem": 27, "code": "(fn [x] (if (empty? x) true (if (not (= (first x) (last x))) false (recur (reverse (rest (reverse (rest x))))) ) ) )", "user": "4f7121cae4b07046d9f4f007"}, {"problem": 27, "code": "(fn this [x]\n     (cond\n       (= x ()) true\n       (= (first x) (last x)) (this (rest (butlast x)))\n       :else false\n       )\n   \n   \n   \n   )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll)\n     (reverse coll)))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5622042ae4b03f08ee9a9221"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 27, "code": "(fn [x]\n  (if (instance? String x)\n    (= x (apply str (reverse x)))\n    (= (reverse x) x)\n  )\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 27, "code": "(fn [in]\n  (loop [in in]\n    (if (<= (count in) 1)\n      true\n      (if (not= (first in) (last in))\n        false\n        (recur (rest (butlast in)))))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 27, "code": "#(true? (if (string? %)\n          (= % (clojure.string/reverse %))\n          (= % (reverse %))))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 27, "code": "#(= (vec %1) (reverse (vec %1)))", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 27, "code": "#(loop [o %\n       i (reverse %)\n       r true]\n  (if (empty? o)\n    r\n    (recur (rest o) (rest i) (and r (= (first o) (first i))))))", "user": "572ad0fde4b0f4d77e651244"}, {"problem": 27, "code": "(fn [x] (if(string? x)(= x (apply str (reverse x)))\n  (= x (reverse x))))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "591ed05de4b09b4ee5954c3a"}, {"problem": 27, "code": "(fn [s]\n  (= s \n     (if (string? s)\n    (apply str (reverse s))\n    (reverse s)\n  )))", "user": "5903f0cde4b022d14a2aafb9"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 27, "code": "(fn [lst]\n  (let [pos (apply list lst)\n        neg (reverse pos)]\n    (= pos neg)))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 27, "code": "(fn [values]\n  (if (< (count values) 2)\n    true\n    (if (= (first values) (last values))\n      (recur (rest (drop-last values)))\n      false)))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "591f63e6e4b09b4ee5954c47"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) \n     (reverse x)))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 27, "code": "(fn [n]\n  (= (seq n) (reverse (seq n))))", "user": "5921a65be4b09b4ee5954c79"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "591e1eb7e4b09b4ee5954c2b"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5921084be4b09b4ee5954c6c"}, {"problem": 27, "code": "(fn [s] (let [mycomp \n              (fn mycomp [r t] (if (and (seq r) (seq t))\n                          (and \n                           (= (first r) (first t))\n                           (mycomp (rest r) (rest t))\n\t\t\t\t\t\t   )\n                          (= (seq r) (seq t))\n                          )\n                )\n              ] \n          (mycomp s (reverse s)))\n)", "user": "592018d2e4b09b4ee5954c55"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "59223307e4b09b4ee5954c86"}, {"problem": 27, "code": "(fn [seq] (if (= (class seq) (class \"dummy\")) (= seq (clojure.string/reverse seq)) (= seq (reverse seq))))", "user": "5922a513e4b026ae38521286"}, {"problem": 27, "code": "(fn[collection]\n\t(if (string? collection)\n\t\t(= (clojure.string/join (reverse collection)) collection)\n\t\t(= (reverse collection)collection)\n\t)\n)", "user": "59228b00e4b026ae38521281"}, {"problem": 27, "code": "(fn [coll]\n  (let [coll (vec coll)]\n    (= coll (reverse coll))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 27, "code": "(fn [x] (if (=(apply str (reverse x)) (apply str x)) true false))", "user": "590cb27de4b047aa04b199ee"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "557af43ae4b05c286339e0a8"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reduce conj () (seq x))))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5922a36ce4b026ae38521285"}, {"problem": 27, "code": "#(= (into [] %) (reverse (into [] %)))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s)\n     (reduce conj '() s)))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 27, "code": "#(= (concat %) (reverse %))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 27, "code": "(fn [x] (loop [index 0 judge true] (if(= index (/ (- (count x) (mod (count x) 2)) 2)) judge (recur (+ 1 index) (and judge (= (nth x index) (nth x (- (count x) index 1))))))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56ea89bfe4b04a395b9a0406"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 27, "code": "#(= (if (string? %)\n      (apply str (reverse %))\n      (reverse %))\n    %)", "user": "5866df28e4b0f14aab7c886d"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 27, "code": "(fn palindrome [x]\n   (let [split-point (/ (count x) 2)]\n     (=\n      (take split-point x)\n      (reverse\n       (take-last split-point x)))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 27, "code": ";; #(= (seq %) (reverse %)) \n;; #(= (reverse %) (lazy-seq %)\n\n(comp (partial apply =) \n      (juxt seq reverse))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59279a89e4b072a2710fced3"}, {"problem": 27, "code": "(fn [x] (let [n (/ 2 (count x))] (= (take n x) (reverse (take-last n x)))))", "user": "59234753e4b0a390037439ef"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "55ad0e18e4b03311e7b7329c"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "59175adde4b09b4ee5954b9a"}, {"problem": 27, "code": "#(= (apply list %) (reverse (apply list %)))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 27, "code": "(fn palindrome [seq] \n  (= (apply str seq) (apply str ((fn rev [seq] \n  (if (= (first seq) nil) nil (conj (rev (take (dec (count seq)) seq)) (last seq)))) seq))))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 27, "code": "(fn [col]\n  (let [cols (count col)\n        xsnum (quot cols 2)\n        ysfirst (+ xsnum (rem cols 2))\n        xs (take xsnum col)\n        ys (reverse (nthrest col ysfirst))]\n    (= xs ys)\n   )\n  )", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "592af53be4b072a2710fcf2b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 27, "code": "#(= (seq %) (into () (seq %)))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5923554ee4b0a390037439f2"}, {"problem": 27, "code": "(fn eq [x] (if (= java.lang.String (type x)) (= (apply str (reverse x)) x) (= (reverse x) x)))", "user": "592ac550e4b072a2710fcf27"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "592518bfe4b072a2710fce65"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "54f8e998e4b01ecee9d88831"}, {"problem": 27, "code": "(fn [l]\n  (let [c (/ (count l) 2)]\n    (loop [n c ln l]\n      (if (< n 1)\n        true\n        (if (= (first ln) (last ln))\n          (recur (dec n) (butlast  (rest ln)))\n          false)))))", "user": "58ebd6b3e4b056aecfd47d4c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 27, "code": "#(loop [idx 0\n       racecar %] \n  (if (> idx (/ (count racecar) 2))\n    true\n    (if (= (last racecar) (first racecar))\n      (recur (inc idx) (drop-last (rest racecar)))\n      false)))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 27, "code": "(fn palindrome [x]\n        (let [y (reverse x)]\n          (if (= (seq y) (seq x))\n            true\n            false)))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "592749e4e4b072a2710fcec8"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 27, "code": "#(= (seq %) (into '() (seq %)))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 27, "code": "(fn [a] (loop [a a] (if (= nil (seq a)) true (if (= (last a) (first a)) (recur (reverse (rest (reverse (rest a))))) false))))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 27, "code": "(fn [string]\n  (= \n   (seq string)\n   (into '() (seq string))\n  )\n)", "user": "59313dc1e4b072a2710fd00a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n(= lat (reverse lat))))", "user": "59368efbe4b02506e01a297d"}, {"problem": 27, "code": "(fn [l] \n  (= (apply vector l) (reverse (apply vector l))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 27, "code": "(fn [x] (reduce #(and %1 (= (first %2) (second %2))) true (map vector x (reverse x))))", "user": "5931e498e4b072a2710fd024"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5936fabce4b02506e01a298c"}, {"problem": 27, "code": "(fn [s] (let [vs (into [] s)] (= vs (rseq vs))))", "user": "5935b010e4b04f87174def55"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse (seq l))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 27, "code": "(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n        (recur (rest (butlast lst)))\n        false))))", "user": "5936a67de4b02506e01a2982"}, {"problem": 27, "code": "(fn [s]\n  (loop [s- (into [] s)]\n    (cond (< (count s-) 2) true\n          (= (first s-) (last s-)) (recur (-> s- rest butlast))\n          :else false)))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 27, "code": "(fn [l1]\n  (loop [norm l1 rev (reverse l1)]\n    (if (empty? norm)\n      true\n    (if (not= (first norm) (first rev))\n      false\n    (recur (rest norm) (rest rev))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 27, "code": "(fn [lst] \n  (let [x (- (count lst) 1)]\n  \t(loop [i 0]\n      (if (> i (/ x 2))\n        true\n        (if (= (nth lst i) (nth lst (- x i)))\n          (recur (+ 1 i))\n          false\n    \t)\n      )\n    )\n  )\n)", "user": "59333f35e4b072a2710fd04c"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 27, "code": "(fn[x](= (seq x)(into () x)))", "user": "5939b9f9e4b069cdc2982b3d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 27, "code": "(fn palidromer [s] (= (apply str s) (apply str (reverse s ))))", "user": "59346d29e4b072a2710fd077"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "5939bcb4e4b069cdc2982b3e"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll)))\n  )", "user": "591f2e4ae4b09b4ee5954c44"}, {"problem": 27, "code": "(fn [sq]\n  (cond\n    (<= (count sq) 1) true\n    (= (first sq) (last sq)) (recur (butlast (rest sq)))\n    :else false))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "593bf921e4b069cdc2982b84"}, {"problem": 27, "code": "#(let [s (seq %) r (reverse s)] (= s r))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 27, "code": "#(= (reduce conj () %) (seq %))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 27, "code": "(fn palindrom [sekv]\n  (cond\n   (= 0 (count sekv)) true\n   :else (if (= (first sekv) (last sekv)) (palindrom (rest (reverse (rest sekv)))) false)))\n\n;;(fn palindrom [sekv]\n;;  (= sekv (reverse sekv)))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 27, "code": "#(=\n    (seq %)\n    (reverse (seq %)))", "user": "593bdd84e4b069cdc2982b81"}, {"problem": 27, "code": "(fn [arg]\n\t\t(let [x (reverse arg)]\n\t\t\t(= x (vec arg)))\n\t\t)", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 27, "code": "#(if (<= (count %1) 1)\n    true\n    (if (= (last %1) (first %1))\n      (recur (butlast (rest %1)))\n      false))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "593dc5f4e4b069cdc2982bac"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 27, "code": "(fn [x]\n  (loop [s x, res true]\n    (if (seq s)\n      (recur (rest (reverse (rest s))) (if (= res false)\n                                         false\n                                         (= (first s) (first (reverse s)))))\n      res)))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 27, "code": "(fn [x]\n  (loop [coll x]\n    (cond (or (= 0 (count coll))\n              (= 1 (count coll))) true\n          (= (first coll) (last coll)) (recur (rest (butlast coll)))\n          :else false )))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "593f88dce4b069cdc2982be2"}, {"problem": 27, "code": "(fn [lst]\n  (= (if (string? lst)\n    (apply str (reverse lst))\n    (reverse lst))\n   lst))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (>= 1 (count seq))\n    true\n    (and (= (first seq) (last seq))\n         (palindrome? (rest (butlast seq))))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 27, "code": "(fn palindrome? [xs] (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "593910eae4b02506e01a29f4"}, {"problem": 27, "code": "(fn palindrome\n  [l]\n  (if (<= (count l) 1)\n    true\n    (if (= (first l) (last l))\n      (palindrome (rest(reverse(rest l))))\n      false)))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 27, "code": "(fn [col]\n  (= (reverse col) (apply list col)))", "user": "593fba55e4b069cdc2982be7"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "593f8692e4b069cdc2982be1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594307c0e4b060784b3b7920"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "592518f0e4b072a2710fce68"}, {"problem": 27, "code": "#(if (= (last %1) (first %1)) true false)", "user": "59395adfe4b02506e01a29fb"}, {"problem": 27, "code": "(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594263cbe4b060784b3b790a"}, {"problem": 27, "code": "(fn [x] (reduce (fn [x y] (and x y)) (map #(= %1 %2) x (reverse x))))", "user": "5943abb6e4b060784b3b792b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59438419e4b060784b3b7929"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59266364e4b072a2710fceab"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "592518cde4b072a2710fce66"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 27, "code": "(fn [x]\n  (if (= (reverse x) (seq x)) true false))", "user": "593744abe4b02506e01a299b"}, {"problem": 27, "code": "(fn [s] (let [c (count s)] (loop [n 0] (if (> n (int (/ c 2))) true (if (= (nth s n) (nth s (- c n 1))) (recur (+ n 1)) false)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 27, "code": "#(let [s (vec %)]\n   (= s (reverse s)))", "user": "594a1475e4b07ddc2dafadf2"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "594ad6aae4b07ddc2dafae0e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 27, "code": "(fn [x]\n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "51cbee15e4b08d8387cbede5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 27, "code": "(fn [x]\n  (if (= (first x) (last x))\n    (if (seq (rest x))\n      (recur (drop-last (rest x)))\n      true)\n    false))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 27, "code": "(fn [check] (if (string? check) (= check (apply str (reverse check))) (= check (reverse check))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 27, "code": "#(if (= (drop 0 %) (reverse %)) true false)", "user": "590260cde4b0438e51c2d057"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 27, "code": "(fn [a]\n  (loop [y (vec a) result true]\n    (if (not= [] y)\n      (if (= (first y) (last y))\n       (recur [] true )\n      (recur [] false))\n     result)))", "user": "594b3459e4b07ddc2dafae23"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "594ce8e5e4b07ddc2dafae76"}, {"problem": 27, "code": "#(= % (if (= (type %) java.lang.String) (clojure.string/reverse %) (reverse %)))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 27, "code": "#(= (vec %)\n\t\t\t( (fn [y] (loop [x y res []]\n          (if (not= [] x)  (recur  (rest x) (cons (first x) res) )  res )))\n  (vec %)) )", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "58b1bc99e4b0ebc645576d00"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5947174ae4b07ddc2dafad92"}, {"problem": 27, "code": "(fn [sequence]\n   (= (seq sequence) (reverse sequence)))", "user": "594e31dde4b07ddc2dafaea6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 27, "code": "(fn [coll] (if (= (seq coll) (reverse coll)) (= 1 1) (= 1 2)))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 27, "code": "#(if (> (count %) 0) \n   (and \n    (= (first %) (last %)) \n    (recur (drop-last 1 (drop 1 %))))\n   true)", "user": "578559a2e4b0ebec4cfb74da"}, {"problem": 27, "code": "(fn is-palindrome\n   [lat]\n   (if (string? lat) (= lat (apply str (reverse lat)))\n                     (= lat (reverse lat))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 27, "code": "(fn [coll] (every? identity (map = coll (reverse coll))))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 27, "code": "(fn pal\n\n  [the-sequence]\n  (let [the-seq (seq the-sequence)\n        reversed-seq (reverse the-sequence)]\n    (if (= the-seq reversed-seq)\n      true\n      false)))", "user": "568aa458e4b0dcc4269f4092"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "59473583e4b07ddc2dafad98"}, {"problem": 27, "code": "(fn check [x] \n  (loop [r x]\n    (if (empty? r) true\n      (if (not= (first r) (last r)) \n        false\n        (recur (rest (butlast r))) \n       )\n     )\n  )\n)", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 27, "code": "(fn [sequ] (= (seq sequ) (reverse (seq sequ))))", "user": "595041e8e4b066ee0a44ae90"}, {"problem": 27, "code": "#(loop [x % acc true] (if (empty? x) acc (recur (drop-last (drop 1 x))(and acc (= (first x) (last x))))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 27, "code": "(fn [word]\n   (->>\n    (vec word)\n    (reverse )\n    (= (vec word))\n  )\n)", "user": "59537716e4b066ee0a44aee5"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "594f0c93e4b07ddc2dafaec7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594a5559e4b07ddc2dafadf8"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 27, "code": "(fn [coll] (loop [left 0 right (- (count coll) 1)] (cond (>= left right) true (not= (nth coll left) (nth coll right)) false :else (recur (inc left) (dec right)))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 27, "code": "(fn palin [xs]\n  (if (string? xs)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59517c5fe4b066ee0a44aeb0"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 27, "code": "(fn [parseq]\n  (loop [s parseq]\n    (let [h (first s) t (last s) mid (->> s next drop-last)]\n      (if (and (seq mid) (= h t))\n        (recur mid)\n        (= h t)))))", "user": "58969420e4b00487982d52a4"}, {"problem": 27, "code": "#(= (reduce (fn [a b] (cons b a)) [] %) (reduce (fn [a b] (conj a b)) [] %))", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "556ff203e4b09a3098a52526"}, {"problem": 27, "code": "(fn [xs]\n\t(cond\n\t\t(empty? xs) true\n\t\t(not= (first xs) (last xs)) false\n\t\t:else (recur (rest (drop-last xs)))))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 27, "code": "(fn [x]\n  (if (= java.lang.String (class x))\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)\n    )\n  )", "user": "57a497e8e4b0a966079561e4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (vec s) (reverse s)))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59551e04e4b066ee0a44af20"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5955158be4b066ee0a44af1e"}, {"problem": 27, "code": "(fn f [l] \n  (if\n   (empty? (rest l))\n   true\n   (if\n    (empty? l)\n    true\n    (if\n     (= (first l) (last l))\n     (f (butlast (rest l)))\n     false\n     )\n    )\n   )\n  )", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "595914e0e4b066ee0a44af99"}, {"problem": 27, "code": "(fn\n   [l]\n   (= (seq l) (reverse l)))", "user": "595a2ab5e4b066ee0a44afb2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 27, "code": "(fn\n  [x]\n    (let [[first-one & remaining] x\n          last-one (last remaining)]\n      (cond\n        (empty? remaining) true\n        (= (count remaining) 1) true\n        (not= first-one last-one) false\n        :else (recur (drop-last remaining))\n        )\n      )\n  )", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "595b00f4e4b066ee0a44afd2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 27, "code": "(fn [collection] (= (seq collection) (reverse collection)))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59251947e4b072a2710fce69"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 27, "code": "(fn palindrome-detector [s]\n  (= (seq s) (reverse s)))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 27, "code": "#(loop [ls %]\n   (cond\n      (= (count ls) 0) true\n      (= (first ls) (last ls)) (recur (drop-last 1 (drop 1 ls)))\n      :else false))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 27, "code": "(fn palin\n\t([lst]\n\t(if (empty? lst)\n\t\ttrue\n\t\t(and (= (first lst) (last lst)) (palin (rest (reverse (rest lst))))))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 27, "code": "(fn \n  [stri]\n  (= (seq stri) (reverse stri)))", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reduce conj () x)))", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 27, "code": "(fn pal? [w]\n  (if (or (= (count w) 0) (= (count w) 1))\n    true\n    (if (not= (first w) (last w))\n      false\n      (recur (drop-last (next w))))))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 27, "code": "(fn [s] (if (string? s) true (= s (reverse s))))", "user": "595e20e2e4b066ee0a44b037"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "595e8728e4b066ee0a44b047"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 27, "code": "#(-> % reverse (= (seq %)))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 27, "code": "(fn [col]\n  (if (string? col)\n    (= col (apply str (reverse col)))\n    (= col (reverse col))))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 27, "code": "(fn [strr]\n  (if (string? strr)\n    (= strr (apply str (reverse strr)))\n    (= strr (reverse strr))))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %)) true false)", "user": "595d224de4b066ee0a44b016"}, {"problem": 27, "code": "#(= (if (instance? String %) (clojure.string/reverse %) (reverse %)) %)", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)]\n          (= s (reverse s))))", "user": "595fe3f6e4b066ee0a44b073"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 27, "code": "(fn pal [xs] \n  \t(if (empty? xs) true (if (= (last xs) (first xs)) (pal (rest (drop-last xs))) false)) \n  \n  )", "user": "595fe942e4b066ee0a44b075"}, {"problem": 27, "code": "(fn pali [x]\n  (if (<= (count x) 1)\n    true\n    (if-not (= (first x) (last x))\n      false\n      (pali (reverse (rest (reverse (rest x)))))\n  \t)\n  )\n)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 27, "code": "(fn f [x] (= (reduce conj () x) (seq x)) )", "user": "594765cee4b07ddc2dafad9b"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "59613e4ce4b066ee0a44b09b"}, {"problem": 27, "code": "#(= % (if (instance? String %) (clojure.string/reverse %) (reverse %)))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 27, "code": "#(= (vec %1) (vec (reverse %1)))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 27, "code": "(fn [coll]\n  (loop [x 0\n         y (dec (count coll))\n         pal []]\n       (if (< y x)\n           (not (some (complement identity) pal))\n           (recur (inc x) (dec y) \n                  (conj pal (= (nth coll x) (nth coll y)))))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 27, "code": "(fn [word] (loop [list (seq word)]\n\t(let [fi (first list)]\n\t(let [la (last list)]\n\t(if (= fi la)\n\t\t(if (> 2 (count list)) true (recur (rest (butlast list))))\n\t\tfalse\n)))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 27, "code": "( fn [x] (= ( reverse x ) ( seq x)))", "user": "5953949be4b066ee0a44aeea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 27, "code": "#(loop [s (seq %)]\n  (cond\n    (empty? s) true\n    (= (first s) (last s)) (recur (->> s (drop 1) (drop-last 1)))\n    :else false))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 27, "code": "#(let [x (seq %)\n       y (reverse x)]\n   (= x y))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5960e872e4b066ee0a44b093"}, {"problem": 27, "code": "(fn aaa [x]\n  (if (= x ())\n    true\n    (if (= (first x) (last x))\n      (aaa (->> x (drop 1) (drop-last 1)))\n      false)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n  (= (reverse x) x)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 27, "code": "(fn [i] \n  (if (= 0 (compare (into [] i) (into [] (reverse i))))\n    true\n    false\n    )\n )", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 27, "code": "(fn pad [string]\n (if (= (seq string) (into '() (seq string)))\n      true\n\t\tfalse))", "user": "59638fc5e4b066ee0a44b0cd"}, {"problem": 27, "code": "(fn b [a]\n (if (string? a)\n(= (apply str (reverse a)) a)\n(= (reverse a) a)))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 27, "code": "(fn [arg]\n  (if (=  (seq arg) (reverse arg))\n      true\n      false )\n   )", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 27, "code": "(fn [arr] (if (string? arr)\n           (if (= arr  (apply str (reverse arr))) true false)\n           (if (= arr (reverse arr)) true false)))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 27, "code": "(fn [arr] \n  \t\t\t\t(if (= (seq arr) (reverse arr))\n                       \n            true\n            false)\n  )", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 27, "code": "#(if (= (seq %) (reverse (seq %)))\n   true\n   false)", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 27, "code": "(fn [x](if(string? x)\n         (= x (clojure.string/reverse(apply str(seq x))))\n         (= x (reverse(apply vector(seq x))))))", "user": "59637028e4b066ee0a44b0ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55e55810e4b050e68259b46a"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 27, "code": "(fn f [l] (if (not l) true (if (= (first l) (last l)) (-> l butlast next f) false)))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 27, "code": "(fn palindrone? [ inp]\n (let [inp-seq (if\n              (string? inp)\n              (apply vector inp)\n              inp)]\n (= (reverse inp) inp-seq)))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "53dad484e4b0e771c30254ac"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 27, "code": "(fn [l]\n  (let [r (reverse l)]\n    (not (some not (map-indexed #(= %2 (nth r %1)) l               \n                   )))))", "user": "58bd1ab9e4b0888cdc949d27"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59672436e4b069c0a1a197b1"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 27, "code": "#(loop [f (first %) l (last %) inp (rest (butlast %)) is true]\n   (if-not is\n     is\n   (if (empty? inp)\n     is\n     (recur (first inp) (last inp) (rest (butlast inp)) (and is (= f l))))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 27, "code": "#(= (into () (into [] %)) (into [] %))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "595ba438e4b066ee0a44afdf"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 27, "code": "(fn f [c] (if (empty? c) true (and (= (first c) (last c)) (f (reverse (rest (reverse (rest c))))))))", "user": "59614d9ce4b066ee0a44b09d"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 27, "code": "(fn [aSeq] (= (seq aSeq) (reverse aSeq)))", "user": "595eaa8fe4b066ee0a44b04b"}, {"problem": 27, "code": "(\n fn [lst] (= (reverse (seq lst)) (seq lst))\n)", "user": "59697a28e4b069c0a1a197e8"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 27, "code": "(fn[col](let [divIndx (Math/floor (/ (count col) 2.0))] (= (take divIndx col) (take divIndx (reverse col)))))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 27, "code": "(fn [s] (if (>= 1 (count s))\n          true\n          (if (= (first s) (last s))\n            (recur (rest (butlast s)))\n            false)))", "user": "59311da6e4b072a2710fd007"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "590b8607e4b047aa04b199db"}, {"problem": 27, "code": "(fn [coll] \n  (loop [l 0 r (- (count coll) 1)]\n    (if (or (= l r) (> l r))\n    true\n    (if (= (nth coll l) (nth coll r))\n      (recur (inc l) (dec r))\n      false))))", "user": "5966a214e4b069c0a1a197ab"}, {"problem": 27, "code": "(fn [seq]\n  (= (map (fn [x] x) seq) (reverse seq)))", "user": "5965a773e4b069c0a1a1978a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %)))\n      (= % (reverse %)))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "596c67fbe4b069c0a1a1982b"}, {"problem": 27, "code": "#(=\n   (map (fn [c] c) %)\n   (reverse %))", "user": "5629e651e4b00e49c7cb4814"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)\n     )\n  )", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 27, "code": "(fn [x]\n  \t(loop [message x]\n      \t(if (= 0 (count message)) true \n      \t\t(let [front-part (first message)\n                  back-part (last message)]\n               (if (not= front-part back-part) false\n                  (recur (rest (butlast message))))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 27, "code": "(fn [xs]\n  (let [cnt (count xs) idx (range (quot cnt 2) 0 -1)]\n    (every? #(= (nth xs (dec %) ) (nth xs (- cnt %))) idx)))", "user": "59538a2fe4b066ee0a44aee8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 27, "code": "(fn pal [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x)) (pal (reverse (drop 1 (reverse (rest x))))))))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 27, "code": "(fn [c]\n  (= (seq c) (reverse c)))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 27, "code": "(fn test [s]\n  (let [a (take (quot (count s) 2) s) b (drop (+ (quot (count s) 2) (if (odd? (count s)) 1 0)) s)]\n    (= a (reverse b))))", "user": "594c7c96e4b07ddc2dafae65"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "595e5bdbe4b066ee0a44b041"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (let [left (into '() coll)]\n  (= left (reverse left))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59636f66e4b066ee0a44b0c9"}, {"problem": 27, "code": "(fn pali [w]\n  ;;(prn :w w :first (first w) :last (last w) := (= (first w) (last w)) :str (subs (clojure.string/reverse (subs w 1)) 1) :count (count w) )\n  (or (< (count w) 2)\n    (and\n      (= (first w) (last w))\n     (pali (rest (reverse (rest w )) )))))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 27, "code": "#(let [num-items (int (/ (count %) 2)) \n       first-half (take num-items %) \n       second-half (take-last num-items %)] \n   (= first-half (reverse second-half)))", "user": "594266cfe4b060784b3b790b"}, {"problem": 27, "code": "(fn pal [s]\n  (if (<= (count s) 0)\n    true\n    (if (= (first s) (last s))\n      (pal (rest (take (- (count s) 1) s)))\n      false)))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 27, "code": "(fn [origin-seq]\n  (let [target-seq (if (string? origin-seq)\n                     (into [] origin-seq)\n                     origin-seq)\n        length (count target-seq)\n        max-length (int (Math/floor (/ length 2)))]\n    (loop [index 0]\n      (if (= index max-length)\n        true\n        (if (= (nth target-seq index)\n               (nth target-seq (- length (inc index))))\n          (recur (inc index))\n          false)))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5975ed26e4b01722bebd4cd0"}, {"problem": 27, "code": "(fn [x]\n  (if (= (count x) 0)\n    true\n    (if (not= (last x) (first x))\n      false\n      (recur (butlast (rest x))))))", "user": "5975fc20e4b01722bebd4cd2"}, {"problem": 27, "code": "(fn [input]\n  (= (seq input) (reverse input)))", "user": "51127e8ee4b0350614f07a76"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 27, "code": "(fn [x](= (seq x) (reverse (seq x))))", "user": "59728d5fe4b01722bebd4c89"}, {"problem": 27, "code": "(fn [sq]\n  (= (seq sq) (reverse sq)))", "user": "59780ee5e4b01722bebd4d01"}, {"problem": 27, "code": "(fn [coll] \n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5978305be4b01722bebd4d03"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "595fea04e4b066ee0a44b076"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (concat x)))", "user": "57eb7213e4b0bfb2137f5b61"}, {"problem": 27, "code": "#(loop [lst % res false]\n   (if (empty? lst) res\n     (if (= (first lst) (last lst))\n       (recur (rest (butlast lst)) true)\n       (recur [] false)\n       )\n    )\n  )", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 27, "code": "(fn pan [a] (= (reverse a) (reverse (reverse a))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 27, "code": "#(loop [head 0\n         tail (dec (count %))]\n    (if (> head tail)\n      true\n      (if (= (nth % head) (nth % tail))\n        (recur (inc head) (dec tail))\n        false)))", "user": "5977653be4b01722bebd4ced"}, {"problem": 27, "code": "(fn [item]\n  (cond\n   (string? item)\n  \t(if (= (apply str(reverse item) item)) true false)\n   (not (string? item))\n   \t(if (= (reverse item) item) true false)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq (reverse coll)) (seq coll)))", "user": "596f01a5e4b069c0a1a19870"}, {"problem": 27, "code": "(fn pali [someList]\n  (loop [remainingItems someList]\n    (if (or (= (count remainingItems) 1) (empty? remainingItems))\n      true\n      (if (= (first remainingItems) (last remainingItems) )\n        (recur (drop-last (rest remainingItems)))\n        false\n      )\n    )\n  )\n)", "user": "5972198ee4b01722bebd4c7d"}, {"problem": 27, "code": "(fn [s] (= (take (Math/floor (/ (count s) 2)) (reverse s))\n            (take (Math/floor (/ (count s) 2)) s) ))", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 27, "code": "(fn pal\n  [s]\n  (if (= (seq s) (reverse s))\n    true\n    false))", "user": "597a7418e4b02382a38ad1e9"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (-> s reverse reverse)))", "user": "597bac8be4b02382a38ad202"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5934705fe4b072a2710fd078"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 27, "code": "#(= (map identity %) (reverse (map identity %)))", "user": "51864ee8e4b0da5a5be3bacc"}, {"problem": 27, "code": "#(= (reverse (map str %)) (map str %))", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 27, "code": "(fn [s]\n  (let [orig (seq s)\n        rev (reverse (seq s))]\n    (= orig rev)))", "user": "585aeddbe4b0f14aab7c875b"}, {"problem": 27, "code": "; (fn [sq] (= (seq sq) (reverse sq))) ;goes through rhe whole seq\n\n; (fn [arg] (let [len (/ (count arg) 2)]\n;           (every? true? (map = (take len arg) (take len (reverse arg))))))\n\n(fn [sq] (let [n (long (/ (count sq) 2))\n               fwd (take n sq)\n               bkwd (take n (reverse sq))]\n           (= fwd bkwd)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 27, "code": "(fn anon [palindrome]\n  (if (<= (count palindrome) 1)\n      true\n      (and (= (first palindrome) (last palindrome)) (anon (drop-last 1 (drop 1 palindrome))))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "596539dce4b069c0a1a19783"}, {"problem": 27, "code": "(fn [col]\n  (cond\n    (empty? col) true\n    (not= (first col) (last col)) false\n    :else (recur (-> col rest butlast))))", "user": "597f8a4be4b0dbe32238d0c0"}, {"problem": 27, "code": "(fn p [s]\n  (= (seq s) (reverse s)))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse %))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 27, "code": "#(loop[coll %]\n\n(if(< (count coll) 2)\n    true\n    (if  (= (first coll) (last coll))\n      (recur (butlast (rest coll)) )\n      false ))\n  \n  )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 27, "code": "#(-> % reverse (= (seq %)))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 27, "code": "#(let [string (string? %)\n       reversed (reverse %)\n       reversed (if string (clojure.string/join reversed) reversed)]\n   (= reversed %))", "user": "5938be98e4b02506e01a29ec"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59837909e4b021a7a535fe16"}, {"problem": 27, "code": "(fn [lst]\n  (if (not (seq lst))\n    true\n    (if (not= (first lst) (last lst))\n      false\n      (recur (drop 1 (drop-last lst))))))", "user": "55c216dde4b0e31453f64974"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "597cbe94e4b0dbe32238d090"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5981d03ae4b021a7a535fdf0"}, {"problem": 27, "code": "(fn [x](= x (if (string? x) (clojure.string/reverse x)(reverse x))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "597b878ee4b02382a38ad1fb"}, {"problem": 27, "code": "(fn is-palindrome\n  [ls]\n  (case (count ls) \n    0 true\n    1 true\n    (if (= (first ls) (last ls))\n        (is-palindrome (subvec (vec ls) 1 (- (count ls) 1)))\n        false)))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 27, "code": "(fn [coll]\n    (= (seq coll) (reverse (seq coll))))", "user": "598425c8e4b021a7a535fe23"}, {"problem": 27, "code": "#( = (seq % ) (seq (reverse % ) ) )", "user": "591aceeee4b09b4ee5954bde"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x)\n\t  (= x (apply str (reverse x)))\n  \t  (= x (reverse x))\n  )\n )", "user": "59884b32e4b021a7a535feb2"}, {"problem": 27, "code": "#(loop [remain %]\n    (if (= (count remain) 0)\n      true\n      (if (= (last remain) (first remain))\n        (recur (reverse (drop 1 (reverse (drop 1 remain)))))\n        false)))", "user": "59881937e4b021a7a535feaf"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 27, "code": "#(if (coll? %) (= % (reverse %)) true)", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "598876fee4b021a7a535feb7"}, {"problem": 27, "code": "#(every? true? (map = (seq %) (reverse (seq %))))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= (clojure.string/join \"\" (reverse x))) (= x (reverse x))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 27, "code": "#(= %\n    (if (string? %)\n      (apply str (reverse %))\n      (reverse %)))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 27, "code": "(fn f [x]\n  (if (<= (count x) 1) true\n    (and (= (first x) (last x))\n         (f (drop-last (drop 1 x))))))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 27, "code": "(fn [s] (if (= (seq s) (reverse s))\n           true\n           false)\n   )", "user": "55469eede4b0a04f79299542"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "598229ebe4b021a7a535fdfc"}, {"problem": 27, "code": "(fn [parm] (= (vec parm ) (reverse (vec parm))) )", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 27, "code": "(fn [x] (= (vec x) (vec (reverse x))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "598c8db8e4b02b9968b84d06"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "598d746ae4b02b9968b84d23"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse (reverse s))))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 27, "code": "#(= % (if (string? %) (reduce str (reverse %)) (reverse %)))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 27, "code": "#(loop [remainder %] (if (empty? remainder)\n                         true\n                         (if (not= (first remainder) (last remainder))\n                             false\n                             (recur (rest (drop-last remainder)))\n                         )\n                      )\n )", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 27, "code": "(fn [x]\n  (->> x\n         (seq ,,,)\n         (reverse ,,,)\n         (= (seq x) ,,,)))", "user": "5990a9fde4b0866487ed0d54"}, {"problem": 27, "code": "#(let [x (into '() %)] (= x (reverse x)))", "user": "59922473e4b0866487ed0d72"}, {"problem": 27, "code": "(fn [seq]\n  (let [reverse-seq (if (string? seq)\n                      (clojure.string/join (reverse seq))\n                      (reverse seq))]\n    (= reverse-seq seq)))", "user": "56478a82e4b0284900eef61e"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "59933537e4b0b211ea3aaaaf"}, {"problem": 27, "code": "(fn [col]\n    (loop [c col]\n      (let [left (first c)\n            right (first (reverse c))\n            nl? (nil? left)\n            nr? (nil? right)\n            allButLast (take (- (count c) 1) c)]                                                                                                      \n        (cond \n          (or nl? nr?) true \n          (not= left right) false\n          :else (recur (drop 1 allButLast))))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 27, "code": ";; Argh.  I _know_ this is too complicated\n(fn [s]\n  (loop [start (first s)\n         end (last s)\n         s (butlast (rest s))]\n    (cond\n     (empty? s) true\n     (not (= start end)) false\n     :else\n     (recur (first s) (last s) (butlast (rest s)))\n     )\n    )\n  )", "user": "59932dc1e4b0b211ea3aaaad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 27, "code": "(fn [seq] \n  (if (string? seq)\n\t(= seq (apply str (reverse seq)))  \n    (= seq (reverse seq))\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "4e273a93535deb9a81d77ef8"}, {"problem": 27, "code": "(fn palindrome [seqq]\n  (if (empty? seqq) true\n\t(if (= (first seqq) (last seqq))\n      (palindrome (butlast (rest seqq)))\n      false\n      )))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 27, "code": "#(= (apply list %) (reverse (apply list %)))", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 27, "code": "(fn [string-or-seq]\n  (let [s (seq string-or-seq) rs (reverse s)]\n    (= s rs)))", "user": "5993b28ee4b0b211ea3aaaba"}, {"problem": 27, "code": "(fn [col]\n  (= (reverse col) (seq col)))", "user": "575c3592e4b02ea11479936c"}, {"problem": 27, "code": "#(= (into [] %1) (into '() %1))", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 27, "code": "#(if (= [] %)\n   true\n   (let [fst (first %)\n         lst (last %)\n         others (rest (butlast %))]\n     (if (= fst lst)\n       (recur others)\n       false)))", "user": "5999fe10e4b07157cc8dab02"}, {"problem": 27, "code": "(fn [xs]\n  (= (flatten (partition 1 xs))\n     (reduce\n      \t(fn [acc x] (cons x acc))\n      \tnil\n      \txs\n     )\n  )\n  )", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "5998643de4b07157cc8daae3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 27, "code": "(fn [xs] (let [l (sequence xs)] \n           (= l (reverse l))\n         ))", "user": "5996b419e4b07157cc8daab5"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "4fff289ae4b0678c553fc3fd"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n      (if (= s (clojure.string/reverse s))\n        true\n        false)\n      (if (= s (reverse s))\n        true\n        false)))", "user": "596a4fbce4b069c0a1a19800"}, {"problem": 27, "code": "(fn [s] (let [r (reverse s) rr (reverse (reverse s))] (= r rr)))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "599b457ae4b07157cc8dab1f"}, {"problem": 27, "code": "(fn [x] (= (reduce str x) (reduce str (reverse x))))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59970911e4b07157cc8daac7"}, {"problem": 27, "code": "(fn is-pal\n  [s]\n  (=\n   (reduce\n    (fn [acc e] (conj acc e))\n    (list)\n    s)\n   (seq s)))", "user": "59a06e55e4b0871e7608b835"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59a06dbce4b0871e7608b834"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5795bddbe4b0e215f87e8488"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "4f29e69ae4b0d6649770a036"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "59a0ceeae4b0871e7608b840"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 27, "code": "(fn [col] (if (string? col) (= (clojure.string/reverse col) col) (= (reverse col) col)))", "user": "59a180b3e4b0871e7608b852"}, {"problem": 27, "code": "#(loop [seq %]\n  (if (= (count seq) 0)\n    true\n    (if (not= (first seq) (last seq))\n      false\n      (recur (rest (butlast seq))))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59a24c92e4b066c664927d20"}, {"problem": 27, "code": "(fn [x]\n      (= (seq x) (reverse x)))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "599b7210e4b010b4cc4bca07"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String)\n      (= % (clojure.string/join (reverse %)))\n      (= % (reverse %)))", "user": "59a39440e4b066c664927d40"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "561a4769e4b053970a773b05"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "599df601e4b0871e7608b801"}, {"problem": 27, "code": "(fn [s]\n  (loop [ss s]\n    (if (<= (count ss) 1)\n      true\n      (if (= (first ss) (last ss))\n        (recur (butlast (rest ss)))\n\t\tfalse)    \n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59a460ede4b066c664927d52"}, {"problem": 27, "code": "(fn [coll]\n  (let [coll' (into [] coll)]\n    (= coll' (reverse coll'))))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5990bab4e4b0866487ed0d55"}, {"problem": 27, "code": "(fn [x]\n  (if (instance? String x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 27, "code": "(fn [x]\n  (=\n    (vec x)\n    (vec (reverse x))))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 27, "code": "(fn [coll]\n     (= (vec coll) (rseq (vec coll)))\n      )", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59a64a79e4b066c664927d7b"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (seq (reverse x))))", "user": "59a6f1c7e4b066c664927d89"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59a57e91e4b066c664927d63"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59a72effe4b066c664927d94"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (empty? x)\n    true\n     (if (= \n          (first x) \n          (last x))\n       (palindrome\n        (rest (butlast x)))\n       false\n      ))\n    \n)", "user": "57fe840ae4b0d3187e9009d3"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reduce conj () s)))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 27, "code": "(fn [x] (if (coll? x) (= x (reverse x))\n          (= x (reduce str (reverse x)))))", "user": "59a58bf0e4b066c664927d64"}, {"problem": 27, "code": "#(= %\n      (if (= (class %) java.lang.String)\n          (reduce str (reverse %))\n          (reverse %)\n      )\n)", "user": "5999648ce4b07157cc8daaf3"}, {"problem": 27, "code": "#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))", "user": "59ab589ce4b08cbb53654d98"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "586b93eae4b01531a375e95b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "58e6b788e4b056aecfd47cbd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 27, "code": "(fn [lst]\n    (loop [lst lst reversed (reverse lst)]\n        (cond\n            (= (first lst) nil) true\n            (= (first lst) (first reversed)) (recur (rest lst) (rest reversed))\n            :else false\n            )))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 27, "code": "#( = (reverse (seq %)) (seq %))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 27, "code": "(fn [s] (= (rseq (vec s)) (vec s)))", "user": "59ab61f1e4b08cbb53654d9b"}, {"problem": 27, "code": "(fn [coll] (=(reverse coll) (into [] coll)))", "user": "542c900be4b0dad94371f2a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 27, "code": "(fn [[x & xs :as all]]\n  (if (empty? all)\n    true\n    (or (empty? xs) (and (= x (last xs)) (recur (butlast xs))))))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 27, "code": "(fn [x]\n  (= (rseq (vec x)) (vec x))\n  \n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "59aeed59e4b0e1f4e384c8ab"}, {"problem": 27, "code": "(fn myPal [[x & xs]]\n  (let [xxs (take (- (count xs) 1) xs)\n        y (last xs)]\n   (if (and (= x y) (> 0 (count xxs)))\n     (do (println (str \"rec branch x=\" x \", y=\" y))\n         (myPal xxs))\n     (if (not= x y)\n       (do (println (str \"term branch x=\" x \", y=\" y))\n           false)\n       (do (println (str \"term branch x=\" x \", y=\" y))\n           true)))))", "user": "59a2d49de4b066c664927d30"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 27, "code": "(fn [lst]\n  (= (reverse lst) (seq lst)))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 27, "code": "#(if (string? %)\n    (= (clojure.string/reverse %) %)\n    (= (reverse %) %))", "user": "59a3f3dce4b066c664927d48"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "59b18dbfe4b0e1f4e384c8e4"}, {"problem": 27, "code": "(fn [x] (false? (= (count(set x)) (count x) ) ) )", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 27, "code": "(fn palindrome? [seqable]\n  (let [rev (reverse seqable)\n        pairs (map vector (seq seqable) rev)]\n    (every? (fn [[a b]] (= a b))\n            pairs)))\n\n; oh.. #(= (reverse %) (seq %)) :)", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 27, "code": "(fn pal [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (first (reverse s)))\n      false\n      (pal (rest (reverse (rest s)))))))", "user": "59b21070e4b0e1f4e384c8f2"}, {"problem": 27, "code": "#(= (reverse %)(seq %))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 27, "code": "#(= (seq %) (reduce conj '() (seq %)))", "user": "59089229e4b047aa04b1997c"}, {"problem": 27, "code": "(fn[x] (\n        loop [sequ x\n              rev-sequ (reverse x)]\n        \t(\n             if (empty? sequ)\n             true\n             (if (= (first sequ) (first rev-sequ))\n               (recur (rest sequ) (rest rev-sequ))\n               false\n             )\n        )))", "user": "59b2d51be4b0e1f4e384c902"}, {"problem": 27, "code": "(fn [xs]\n  (let [xs (seq xs)]\n    (= xs (reverse xs))))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 27, "code": "(fn \n  [s] \n  (= \n   \ts \n   (if (string? s) (clojure.string/reverse s) (reverse s))))", "user": "59a09b1de4b0871e7608b83a"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "59a31c55e4b066c664927d34"}, {"problem": 27, "code": "(fn [seqn] (if (= (reverse seqn) (seq seqn)) true false))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 27, "code": "(fn \n   [str & index]\n   (let [index (or index 0)\n         currentLetter (nth str index)\n         mirroredLetter (nth str (- (count str) index 1))\n         result (= currentLetter mirroredLetter)]\n   (cond\n     (> index (/ (count str) 2)) true\n     (= result false) false\n     :else (recur str (inc index)))))", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 27, "code": "(fn [x]\n\t(= (seq x) (reverse (seq x))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) \n   (-> s \n       (reverse)\n       (reverse))))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59b7e19ce4b05c620303ca4a"}, {"problem": 27, "code": "#(let [x (if (= String (type %))\n           (reduce str (reverse %))\n           (reverse %))]\n   (= x %))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "59b2e383e4b0e1f4e384c903"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 27, "code": "(fn\n  [l]\n  (loop [x l y l]\n    (if (= (first x)(last y))\n      (if (nil? (next x))\n        (recur (rest x)(butlast x))\n        true\n        )\n      false\n      )))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 27, "code": "(fn is-palindrome [sq] \n  (loop [sq sq ret true]\n    (if (empty? sq) ret\n         (recur (rest (butlast sq)) \n                (and ret (= (first sq) (last sq)))))))", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 27, "code": "(fn [t] (let [s (seq t)] (= s (reverse s))))", "user": "59bdeb22e4b0a024fb6ae42d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 27, "code": "(fn [x]\n  (let [y (seq x)]\n  \t(if (char? (first x))\n    \t(= x (reduce str (reverse y)))\n      \t(= x (reverse y)))))", "user": "59c147afe4b0a024fb6ae481"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59358f74e4b04f87174def52"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "54c98ac0e4b045293a27f679"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "57cd7086e4b0c746388ab896"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join \"\" (reverse x)) (clojure.string/join \"\" x)))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 27, "code": "(fn [pldrm]\n  (= (seq pldrm) (reverse (seq pldrm)))\n  )", "user": "59c3b24ee4b0a024fb6ae4e1"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/join (reverse %)) (reverse %)) %)", "user": "58a0e9bfe4b02bd94d917ea1"}, {"problem": 27, "code": "#(let [st (reverse %)] (if (instance? String %) (= (apply str st) %) (= st %)))", "user": "591a7ce9e4b09b4ee5954bd8"}, {"problem": 27, "code": "(fn [collection]\n\n  (loop [left 0 right (- (count collection) 1)]\n\n    (if (< right left)\n\n      true\n\n      (if (= (nth collection left) (nth collection right))\n\n        (recur (inc left) (dec right))\n\n        false))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 27, "code": "(fn [s]\n  (let [half-len (quot (count s) 2)]\n    (= (take half-len s)\n       (reverse (drop ((if (odd? (count s)) inc identity) half-len) s)))))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "58fc4963e4b0438e51c2cf91"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))", "user": "59c72175e4b0a024fb6ae53c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c74c28e4b0a024fb6ae540"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c91fa4e4b0a024fb6ae573"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 27, "code": "(fn\n  [s]\n  (loop [s s]\n    (if (<= (count s) 1)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (drop-last (next s)))))))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 27, "code": "(fn palindrome-checker\n  [xs] (if-let [remaining (not-empty xs)] \n         (if\n           (= (first xs) (last xs))\n           (recur (drop 1 (butlast xs)))\n           false)\n         true))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59cc6c1ee4b0a024fb6ae5d2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 27, "code": "(fn [xs] \n  (let [s (seq xs)]\n    (= s (reverse s))))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 27, "code": "#(loop [s %]\n\n    (if (< (count s) 2)\n\n      true\n\n      (if (not= (first s) (last s))\n\n        false\n\n        (recur (drop 1 (drop-last 1 s))))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 27, "code": "(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "59830111e4b021a7a535fe09"}, {"problem": 27, "code": "#(= (seq % ) (reverse (seq %)))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 27, "code": "(fn [x] (let [l (seq x) L (reverse l)] ((fn [a b] (cond (and (empty? a) (empty? b)) true (= (first a) (first b)) (recur (rest a) (rest b)) :else false)) l L)))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 27, "code": "(fn [it]\r\n(= (reverse it)\r\n   (seq it)))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 27, "code": "#(= (into '() %) (reverse (into '() %)))", "user": "59d1e9cfe4b0ef0a1e9b5b95"}, {"problem": 27, "code": "(fn [l]\n  (loop [remaining l]\n    (if (< 2 (count remaining))\n      (if (= (first remaining) (last remaining))\n        (recur (butlast (rest remaining)))\n        false)\n      true)))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 27, "code": "#(= (reverse(reverse %)) (reverse %))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59d37e3de4b0ef0a1e9b5bb9"}, {"problem": 27, "code": "(fn [x]\n  (let [s (seq x)]\n    (= s (reverse s))))", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 27, "code": "#(->> % reverse (apply str) (= (apply str %)))", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 27, "code": ";;(fn palindrome [coll]\n;;  (if (= (seq coll) (reverse (seq coll))) true false))\n\n;; (fn [coll] (= (seq coll) (reverse (seq coll))))\n\n#(= (seq %) (reverse (seq %)))", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))\n\n;(fn \n;  [x]\n;  (loop [lst x]\n;    (if (= (count x) 1)\n;      true\n;      (if (not= (first lst) (last lst))\n;        false\n;        (recur (drop-last (drop 1 (lst))))))))", "user": "59d68f3fe4b0ef0a1e9b5c1e"}, {"problem": 27, "code": "#(loop [col %1]\n  (if (< (count col) 2)\n    true\n    (if-not (= (first col) (last col))\n      false\n      (recur (drop-last (rest col)))\n    )\n  )\n)", "user": "595131bee4b066ee0a44aea9"}, {"problem": 27, "code": "(fn [val] (= (reverse (reverse val)) (reverse val)))", "user": "59d72207e4b0ef0a1e9b5c2c"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 27, "code": "(fn\n  [coll]\n  (= (reverse (reverse coll)) (reverse coll)))", "user": "59d77634e4b0ef0a1e9b5c34"}, {"problem": 27, "code": "(fn pal [s] (let [mid (/ (count s) 2)]\n          (= (take mid s) (take mid (reverse s)))))", "user": "59d9e66ae4b0ef0a1e9b5c60"}, {"problem": 27, "code": "(fn [coll]\n  (let [reversed (reverse coll)]\n    (if (string? coll)\n      (= coll (apply str reversed))\n      (= coll reversed))))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 27, "code": "(fn [x] \n  (let [n (if (string? x)\n            (clojure.string/reverse x)\n            (reverse x))]\n    (if (= n x)\n      true\n      false)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 27, "code": "(fn [iterable]\n  (if (= (reverse iterable) (seq iterable))\n  true\n  false))", "user": "59d75489e4b0ef0a1e9b5c31"}, {"problem": 27, "code": "#(let [cnt (int (/ (count %) 2))] (= (take cnt %) (reverse (take-last cnt %)) ))", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 27, "code": "(fn [coll]\n   (let [cantidad (count coll)\n         mitad (int (/ cantidad 2))\n         \n         primera-parte (reverse (take mitad coll))\n         segunda-parte (drop mitad coll)\n         segunda-parte (if (even? (count coll))\n                         segunda-parte\n                         (drop 1 segunda-parte))]\n     (println :primera-parte primera-parte)\n     (println :segunda-parte segunda-parte)\n     (= primera-parte segunda-parte)))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 27, "code": "#(let [a %\n       b (reverse %)]\n   (reduce (fn [m n] (and m n)) true (map (fn [m n] (= m n)) a b)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "59dc7b31e4b0ef0a1e9b5ca0"}, {"problem": 27, "code": "(fn awesome [lst]\n  (if (string? lst)\n    (= lst (apply str (reverse lst)))\n    (= lst (reverse lst))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 27, "code": "(fn pal\n  [lst]\n  (if (empty? lst)\n    true\n    (if (= (first lst) (last lst))\n      (pal (butlast (rest lst)))\n      false)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 27, "code": "(fn pal [c]\n  (if (empty? c)\n    true\n    (and\n      (= (first c) (last c))\n      (pal \n        (butlast\n          (rest c)\n        )\n      )\n    )\n  )\n)", "user": "580e7761e4b0849f6811b753"}, {"problem": 27, "code": "(fn [coll]\n  (let [s (seq coll)\n        r (reverse s)]\n    (= s r)))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 27, "code": "(fn palindrome?\n    ([] true)\n    ([col]\n        (if (empty? col)\n            true\n            (if (= (first col) (last col))\n                (palindrome? (rest (butlast col)))\n                false))))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 27, "code": "(fn [x] (= (seq x) (into () (seq x))))", "user": "59e105f2e4b08badc2a0c505"}, {"problem": 27, "code": "#(= (reverse %) (into [] %))", "user": "59da2569e4b0ef0a1e9b5c62"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 27, "code": "(fn is-palindrome [x]\n  (if (and\n        (= (last x) (first x))\n        ((comp not empty?) x))\n    (is-palindrome ((comp butlast rest) x))\n    (if (> (count x) 1)\n      false\n      true\n      )))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 27, "code": "(fn [lst] \n  (= (seq lst) (reverse (seq lst))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 27, "code": "(fn\n  [item]\n  (= (reverse item) (apply list item)))\n\n; #(= (reverse %) (seq %))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 27, "code": "(fn [lst]\n  (loop [a lst\n         b (reverse lst)]\n\t(cond\n     (empty? a) true\n     (= (first a) (first b))\n      (recur (rest a)\n             (rest b))\n     :else false\n\t)\n)\n)", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 27, "code": "(fn [lst]\n  (loop [lst2 (interleave lst (reverse lst))\n         booley true]\n    (if (zero? (count lst2))\n      booley\n    (recur (drop 2 lst2)\n           (if (not (= (first lst2)(second lst2)))\n             false\n             booley )))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 27, "code": "(fn [x]\n  (loop [charcount\n         (if (odd? (count x)) (/ (- (count x) 1) 2) (/ (count x) 2))\n         strin x\n         currCount 0]\n         (println charcount currCount)\n         (cond (= charcount currCount) true\n               (not= (nth strin currCount) (nth strin (- (- (count strin) 1) currCount))) false\n               :else (recur charcount strin (inc currCount)))\n         ))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 27, "code": "(fn [lista]\n  (let [listaEvaluable (seq lista)]\n  (= (reverse listaEvaluable) listaEvaluable)))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 27, "code": "(fn pal\n  ([x] (pal x x nil))\n  ([x in out] (if (empty? in) (= (apply str x) (apply str out)) (pal x (rest in) (cons (first in) out) ) ) )\n )", "user": "59e61973e4b08badc2a0c567"}, {"problem": 27, "code": "#(=(seq %)(reverse %))", "user": "59d6cc05e4b0ef0a1e9b5c25"}, {"problem": 27, "code": "(fn algo \n  [lst]\n  (loop [\n         lst lst\n         ]\n    (if (empty? lst)\n      true\n      (if (= (first  lst) (last lst))\n        (recur (rest (drop-last lst)))\n        false\n        )\n      )\n    \n    )\n  \n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 27, "code": "(fn [x] \n  (let [xs (seq x)]\n\t  (= xs (reverse xs))))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 27, "code": "(fn [col] (every? true? (map = col (reverse col))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 27, "code": "(fn f\n  [lst]\n  (if (= (reverse (reverse lst)) (reverse lst))\n    true\n    false))", "user": "59e778aae4b0249b72820716"}, {"problem": 27, "code": "(fn my-pal [lst]\n  (if (= (reverse (reverse lst)) (reverse lst)) true false))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 27, "code": "(fn Palindrome-Detector\n  [lst]\n  (loop [lst1 lst\n         i 0\n         j (- (count lst) 1)]\n    (cond\n      (< j i) true\n      (not= (nth lst1 i) (nth lst j)) false\n      :else (recur lst (inc i) (dec j)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "59e8041be4b0249b72820721"}, {"problem": 27, "code": "(fn \n  [lst] \n  (= (seq lst) (reverse lst)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 27, "code": "(fn palindrome\n  [lst]\n  (if (empty? lst)\n    true\n    (if (= (first lst) (last lst))\n      (palindrome (butlast (rest lst)))\n      false)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "599b3844e4b07157cc8dab1d"}, {"problem": 27, "code": "(fn [lst]\n  (loop [lst lst]\n    (cond\n     (empty? lst) true\n     (= (first lst)(last lst)) (recur (butlast (rest lst)))\n     :default false)))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 27, "code": "(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse s))))", "user": "59e8c89de4b0249b72820737"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59e9f03be4b0249b72820752"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59ea287ee4b0249b72820760"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59ea0944e4b0249b72820758"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (<= (count x) 1)\n    true\n    (and (= (first x) (last x))\n         (palindrome (drop-last (drop 1 x))))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 27, "code": "(fn [lst]\n\t(if (contains? (frequencies (map #(= %1 %2) (reverse lst) lst)) false) false true))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 27, "code": "#( = (sequence %) (reverse (sequence %)) )", "user": "59ea85e4e4b0249b72820767"}, {"problem": 27, "code": "(fn [seq]\n\n  (if (string? seq)\n\n    (= (clojure.string/reverse seq) seq)\n\n    (= (reverse seq) seq)))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 27, "code": "(fn [lst] \n  (cond\n   (string? lst) (= (apply str (reverse lst)) lst)\n   :else (= (reverse lst) lst)))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "59d87190e4b0ef0a1e9b5c42"}, {"problem": 27, "code": "#(= (apply str %1) (apply str (reverse %1)))", "user": "59e04fc7e4b08badc2a0c4e8"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59e61279e4b08badc2a0c563"}, {"problem": 27, "code": "(fn [arg]\n    (let [r (reverse arg )\n          t (type arg)]\n      (if (= t java.lang.String)\n        (= arg (reduce str r)) \n        (= arg r)))\n\n\n\n    )", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 27, "code": "#( = (reverse ( seq %)) (seq %))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 27, "code": "(fn [sq]\n  (cond\n    (or (empty? sq) (== (count sq) 1)) true\n    (not= (first sq) (last sq)) false\n    :else (recur (drop-last (drop 1 sq)))\n    )\n  )", "user": "5831846ae4b051871117c02c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59ee3060e4b0966464fe6a12"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (string? x)\n    (if (= x (apply str (reverse x))) true false)\n    (if (= x (reverse x)) true false)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 27, "code": "(fn [x] (= (vec x) (vec (reverse x))))", "user": "592edaf5e4b072a2710fcfaf"}, {"problem": 27, "code": "(fn [xs]\n  (= (reverse xs) (reverse (reverse xs))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)](= (reverse s) s)))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 27, "code": "(fn [z] (if (string? z) (= z (clojure.string/join \"\" (reverse z))) (= z (reverse z))))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x))\n  )", "user": "59f1d218e4b0966464fe6a68"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59f2c9c0e4b0966464fe6a8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 27, "code": "(fn [y] (= (seq y) (reverse (seq y))))", "user": "59f4d0e0e4b0966464fe6ab9"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "563ac0cfe4b0bfe05bf11805"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq (reverse coll)) (seq coll)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "59f66d6fe4b0966464fe6ad2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59f3a4d1e4b0966464fe6a9f"}, {"problem": 27, "code": "#(= (reverse (reverse %))   (reverse %) )", "user": "59f6ce5de4b0966464fe6adc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 27, "code": "(fn [x] (=(reverse x)(reverse(reverse x))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (seq s) (reverse (seq s)))\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 27, "code": "(fn [v]\n  \n  (= (seq v) (reverse v))\n  \n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 27, "code": "(fn pal [li] (if (empty? li)\n           true \n           (if (= (first li) (last li)) (-> (drop-last li) rest pal ) false) \n         )\n  )", "user": "59f85d78e4b0ca45a743a31a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f78761e4b0966464fe6af5"}, {"problem": 27, "code": "(fn recursive_palindrome\n    [palindrome]\n    (if (> (count palindrome) 1)\n        (let [first_guy (first palindrome)\n              last_guy (last palindrome)]\n            (if (= first_guy last_guy)\n                (recursive_palindrome (rest (drop-last palindrome)))\n                false))\n        true))", "user": "59f242b2e4b0966464fe6a7a"}, {"problem": 27, "code": "#(= (sequence %1) (reverse %1))", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 27, "code": "(fn [coll]\n  (let [coll-seq (seq coll)]\n    (= coll-seq (reverse coll-seq))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 27, "code": "(fn [x]  (= (first x) (last x)))", "user": "59e66ac5e4b08badc2a0c570"}, {"problem": 27, "code": "(fn palindrome?\n    [coll]\n    (loop [i 0 j (dec (count coll))]\n      (if (> i j)\n        true\n        (and (= (nth coll i) (nth coll j))  \n             (recur (inc i) (dec j)))\n        )\n      )\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 27, "code": "(fn  [coll] (= (reverse (seq coll)) (seq coll)))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 27, "code": "#(= (reverse(reverse %)) (reverse %1))", "user": "59f67819e4b0966464fe6ad3"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 27, "code": "(fn [s] \n  (let [x (int (/ (count s) 2))]\n    (= (take x s) (reverse (take-last x s)))))", "user": "59f38703e4b0966464fe6a9e"}, {"problem": 27, "code": "(fn is-palindrome [xs]\n  (= (apply list xs)\n     (reverse xs)))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 27, "code": "(fn is-palindrome [collection]\n  (= (apply list collection) (reverse collection)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a00caede4b01bb0ae8afd35"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 27, "code": "(fn drome?\n  [x]\n  (cond (not (seq x)) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [cnt (quot (count coll) 2)\n        first-half (take cnt coll)]\n  (if (even? (count coll))\n  (= first-half (reverse (drop cnt coll)))\n  (= first-half (reverse (drop (inc cnt) coll))))))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a012a43e4b01bb0ae8afd42"}, {"problem": 27, "code": ";;#(= (reverse (seq %)) (seq %))\n#(= (-> % seq reverse) (seq %))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a016bf6e4b01bb0ae8afd4a"}, {"problem": 27, "code": ";#(= % (reverse %))\n(fn [x] \n  (if (string? x)\n    (=  x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 27, "code": "(fn detect-palin [l]\n\t(if (= (count l) 0)\n\t\ttrue\n\t\t(if (= (count l) 1)\n\t\t\ttrue\n\t\t\t(if (= (first l) (last l))\n\t\t\t\t(detect-palin (drop-last (rest l)))\n\t\t\t\tfalse))))", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 27, "code": "#(loop [isPalindrome true els %] \n   (cond \n    (< (count els) 2) true\n    (= (first els) (last els)) (recur true (rest (butlast els)))\n    :else false\n     ))\n\n;#(= (seq %) (reverse %))", "user": "588fd085e4b00487982d51c0"}, {"problem": 27, "code": "(fn [x] (= (into () x)  (into [] x)))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (let [xs (seq x)]\n    (= (reverse xs) xs)))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 27, "code": "(fn [s] (loop\n          [forward s\n           backward (reverse s)]\n         (if (empty? forward)\n             true\n             (if (= (first forward) (first backward))\n                 (recur (drop 1 forward) (drop 1 backward))\n                 false\n              )\n         ))\n)", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59ff69e4e4b01bb0ae8afd20"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "56a71811e4b0542e1f8d14f6"}, {"problem": 27, "code": "(fn [coll]\n  (= (vec coll)\n     (reverse coll)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop-last (drop 1 s))))))", "user": "51c30558e4b0d204dbe2ca2f"}, {"problem": 27, "code": "#(= (reverse % ) (seq %) )", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 27, "code": "(fn [x]\n  (let [x (seq x)]\n    (= x (reverse x))))", "user": "5a08053fe4b01bb0ae8afde7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 27, "code": "(comp #(= % (reverse %)) seq)", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 27, "code": "(fn palinn\n  [pseq]\n  (if (= (reverse pseq) (seq pseq))\n    true\n    false))", "user": "59fe5612e4b01bb0ae8afd0c"}, {"problem": 27, "code": "(fn [x]\n     (= (seq x) (reverse x)))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "590e5e8ae4b047aa04b19a25"}, {"problem": 27, "code": "(fn [pal]  (= (reverse (take (quot (count pal) 2) pal))\n              (take-last (quot (count pal) 2) pal)))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a096063e4b01bb0ae8afe0b"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 27, "code": "(fn pal [coll]\n  (if (< (count coll) 2)\n    true\n    (and (= (first coll) (last coll))\n         (-> coll rest butlast pal))))", "user": "5a099c98e4b01bb0ae8afe11"}, {"problem": 27, "code": "(fn \n      [collOrStr]\n      (let [coll (vec collOrStr)]\n           (= (reverse coll) coll)\n      )\n  )", "user": "5a09b7cae4b01bb0ae8afe15"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59e0e1c6e4b08badc2a0c4fc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5a09ce8ce4b0eab8c0448930"}, {"problem": 27, "code": "(fn myfunc \n  ([x] (myfunc x 0))\n  ([x, y] (if (> y (/ 2 (count x)))\n            true\n            (if (= (nth x y) (nth x (dec (- (count x) y))))\n              (recur x (inc y))\n                        false\n            ))\n  ))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 27, "code": "(fn [items]\n  (if (empty? items)\n    true\n    (and (= (first items) (last items))\n         (recur (rest (butlast items))))))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a04bc10e4b01bb0ae8afda2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5830377ee4b051871117c004"}, {"problem": 27, "code": ";;(fn [coll] (apply (fn [& args] conj (map str (reverse args))) coll))\n(fn [coll] (= (map str coll) (apply (fn [& args] conj (map str (reverse args))) coll)))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 27, "code": "#(let [x %] (= (reverse x) (reverse (reverse x))))", "user": "5a0ba67be4b04bbd27e6d997"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59ec120ae4b0249b72820787"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59da327de4b0ef0a1e9b5c63"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 27, "code": "(fn pd [iv]\n  (let [v (vec iv)]\n  (if (<= (count v) 1)\n    true\n    (if (not= (first v) (last v))\n      false\n      (pd (vec (drop 1 (drop-last v))))\n      )\n    )))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 27, "code": "#( loop[x 0 y (dec (count %1))]\n    (\n      if(< x y)\n      (\n        if(= (nth %1 x) (nth %1 y))\n          (recur (inc x) (dec y))\n          (= (nth %1 x) (nth %1 y))\n      )\n      (= (nth %1 x) (nth %1 y))\n    )\n  )", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 27, "code": "#(loop [col (seq %1)] \n   (if (empty? col) \n     true \n     (if (not (= (first col) (first (reverse col)))) \n     \tfalse \n        (recur (reverse (rest (reverse (rest col))))))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a10f089e4b04bbd27e6da22"}, {"problem": 27, "code": "#(not-any? false? (map = (seq %) (reverse %)))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 27, "code": "(fn [s] (if (= (seq s) (reverse s))\n          true\n          false))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 27, "code": "(fn [s] \n  (= (reverse s) (seq s)))", "user": "54497569e4b032a45b8693d2"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 27, "code": "(fn [coll] \n  (cond \n   (string? coll) (= coll (apply str (reverse coll)))\n   :else (= coll (reverse coll))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "5a137364e4b0ff51aa4b3185"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "5a172b76e4b0ff51aa4b31d4"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 27, "code": "(fn palindrome\n  [xs]\n  (loop [remn xs]\n    (cond (not= (first remn) (last remn)) false\n          (<= (count remn) 1) true\n          :else (recur (rest (take (dec (count remn)) remn))))))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 27, "code": "(fn [x]\n  (if (= (type x) java.lang.String)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 27, "code": "(fn is-palindrome [col]\n  (cond\n   (< (count col) 2) true\n   (= (first col) (last col)) (is-palindrome (drop 1 (drop-last col)))\n   :else false))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 27, "code": "#(if (= (vec %) (reverse %))\n   true\n   false)", "user": "5a1a7db2e4b0ff51aa4b3213"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5112500ee4b0350614f07a72"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 27, "code": "(fn [sec]\n  (= (seq (reverse sec)) (seq sec)))", "user": "5a125a38e4b04bbd27e6da39"}, {"problem": 27, "code": "#(loop [x 0 pal true]\n  (if (or (= x (int (/ (count %) 2)))\n          (= pal false))\n    pal\n    (recur \n      (inc x) \n      (and pal \n           (= (nth % x) \n              (nth % (- (count %)\n                        1\n                        x)))\n      )\n    )\n  )\n)", "user": "5a182c9de4b0ff51aa4b31e0"}, {"problem": 27, "code": "(fn palindrome [item]\n  (if (< (count item) 2) true (and (= (first item) (last item)) (palindrome (rest (drop-last item))))))", "user": "5a18f868e4b0ff51aa4b31f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 27, "code": "#(->> %\n        reverse\n        (interleave %)\n        (partition 2)\n        (reduce\n         (fn [acc [b c]]\n           (and acc (= b c)))\n         true))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 27, "code": "(fn [s]\n  (let [rev-s (if (string? s) (clojure.string/reverse s) (reverse s))]\n    (= s rev-s)))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 27, "code": "#(= %1 (if (string? %1) (apply str (reverse %1)) (reverse %1)))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a18bcd0e4b0ff51aa4b31f1"}, {"problem": 27, "code": "(fn [l] (let [rev (seq (reverse l)) ref_fin (if (= (type l) String) (clojure.string/join rev) rev)] (= l ref_fin)))", "user": "57a499dae4b0a966079561e6"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a1b1462e4b0ff51aa4b321d"}, {"problem": 27, "code": "(fn [s]\n  (loop [v (vec s)\n         x 0\n         y (- (count v) 1)]\n    (if (< y 0)\n      true\n      (if-not (= (get v x) (get v y))\n        false\n        (recur v (inc x) (dec y))))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 27, "code": "#(= (sequence %) (reverse (sequence %)))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a1ef1abe4b0ff51aa4b327c"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "5a1dda7de4b0ff51aa4b3261"}, {"problem": 27, "code": "(fn pal? [x]\n  (if (< (count x) 2)\n    true\n    (and\n      (= (first x) (last x))\n      (pal? (rest (reverse (rest x)))))))", "user": "5a1f8c7ce4b0ff51aa4b3286"}, {"problem": 27, "code": "#(= (reverse %) (sequence %))", "user": "5a1fcc82e4b0ff51aa4b3293"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 27, "code": "(fn palin [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s)) (palin (butlast (rest s))))))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 27, "code": "(fn palindrome [s]\n\t(if (< (count s) 2)\n    \ttrue\n    \t(if (= (first s) (last s))\n        \t(palindrome (rest (butlast s)))\n        \tfalse\n        )\n    )  \n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 27, "code": "(fn [se] (if (string? se)\n  (= se (apply str (reverse se)))\n  (= se (reverse se))))", "user": "5a221881e4b0ff51aa4b32c0"}, {"problem": 27, "code": "(fn [l]\n  (loop\n    [i (interleave l (reverse l))\n     c (int (/ (count l) 2))]\n    (if (< c 1)\n      true\n      (if-not (= (first i) (second i))\n        false\n        (recur (drop 2 i) (dec c))))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 27, "code": "(fn [coll]\n        (let [n (quot (count coll) 2)\n              [xs ys] (split-at n coll)\n              ys (reverse (if (= (mod (count coll) 2) 0) ys (rest ys)))]\n          (= xs ys)))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 27, "code": "(fn [coll] (= (reverse (reverse coll)) (reverse coll)))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 27, "code": "(fn [args]\n    (loop [s (seq args) acc false]\n       (if (<= (.size s) 1)\n            acc\n          (recur (drop-last (rest s)) (if (= (first s) (last s)) true false))\n\n    ))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 27, "code": "(fn [x] (if (= (reverse (seq x)) (seq x)) true false))", "user": "5a216b30e4b0ff51aa4b32ab"}, {"problem": 27, "code": "(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (recur (rest (reverse (rest x)))))))", "user": "5a292efde4b07f18be40aa77"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 27, "code": "#(cond\n    (string? %) (= (apply str %) %)\n    (vector? %) (= (into [] (reverse %)) %)\n    :else (= (reverse %) %))", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 27, "code": "(fn \n  [arg]\n  (let\n      [[first-half sec-half] (split-at (int (Math/floor (/ (count arg) 2))) arg)\n       sec-half (reverse sec-half)]\n    (every? true? (map #(= %1 %2) first-half sec-half))))", "user": "55295b5de4b0ffed3738f949"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a29d658e4b09cafd31c7f29"}, {"problem": 27, "code": "(fn [x] (let [f (if (string? x) clojure.string/reverse reverse)] (= (f x) x)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 27, "code": "(fn [s]\n  ( if ( or (= s (reverse s)) (= s (apply str (reverse s)))) true false))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 27, "code": "#(= (seq %) (reduce conj() (seq %)))", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 27, "code": "(fn [arr] (= (reverse arr) (seq arr)))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 27, "code": "(fn palindrome [x]\n  (= (seq x) (reverse (seq x))))", "user": "5a2e638be4b09cafd31c7f7a"}, {"problem": 27, "code": "(fn [x] \n  (= (first x) (last x)))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "5a303f5ee4b09cafd31c7f9a"}, {"problem": 27, "code": "(fn [a] \n  (if (string? a)\n    (= a (clojure.string/reverse a))\n    (= a (reverse a))))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 27, "code": "(fn [x]\n    (loop [a x b (reverse x)]\n          (if (empty? a)\n              true\n              (if (= (first a) (first b))\n                  (recur (rest a) (rest b))\n                  false))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a34cc9fe4b0ddc586f153ce"}, {"problem": 27, "code": "(fn pal? \n  ([coll] (pal? coll 0 (dec (count coll))))\n  ([coll s e]\n   (if (< s e)\n     (and (= (nth coll s) (nth coll e))\n          (pal? coll (inc s) (dec e)))\n     true)))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 27, "code": "(fn [l]\n  (= (seq l)\n     (reverse l)))", "user": "5a373b80e4b001c08efc0c7c"}, {"problem": 27, "code": ";#(= (seq %) (reverse (seq %)))\n(fn [list-items] (= (seq list-items) (reverse (seq list-items))))", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 27, "code": "(fn [coll] \n  (let [normal (seq coll)]\n    (= normal (reverse normal))))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 27, "code": "(fn [a] (if (string? a)\n          (= a (apply str (reverse a)))\n          (= a (reverse a))))", "user": "510d2a99e4b078ea71921130"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 27, "code": "(fn palind [list]\n  (cond\n    (= 1 (count list)) true\n    (and (= 2 (count list)) (= (first list) (last list))) true\n    (and (< 2 (count list)) (= (first list) (last list))) (palind (rest (drop-last list)))\n    :else false\n    )\n  )", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 27, "code": "(fn temp\n  [s]\n  (or (empty? s)\n      (and (= (first s) (last s))\n           (recur (rest (reverse (rest s)))))))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "524fd3f0e4b0541d1855b81d"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "57e13e52e4b0bfb2137f5a6d"}, {"problem": 27, "code": "(fn palindrom? [input] \n  (if (string? input) \n    (= input (apply str (vec (reverse input))))\n    (= input (reverse input))))", "user": "5a3b9092e4b001c08efc0cd7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 27, "code": "#(= (reverse %) ((comp reverse reverse) %))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 27, "code": "#(let [coll (vec %1)]\n    (= coll (reverse coll)))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 27, "code": "#(= % (if (string? %)\n                (apply str (reverse %))\n                (reverse %)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 27, "code": "(fn is-palindrome\n  [my-seq]\n  (loop\n    [elems my-seq]\n    (if (empty? (rest elems))\n      true\n      (if (= (first elems) (last elems))\n        (recur (rest (take (- (count elems) 1) elems)))\n        false))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5a3e0e44e4b0447ef91cc5ad"}, {"problem": 27, "code": "(fn [a]\n    (if (< (count a) 2)\n      true\n      (if-not (= (last a) (first a))\n        false\n        (recur (rest (drop-last a)))\n        )\n      )\n    )", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 27, "code": "(fn[x](= (seq x) (reverse x)))", "user": "51fa90aae4b0f1313d4689e0"}, {"problem": 27, "code": "(fn is-palindrome [some-seq]\n  (let [reversed (reverse some-seq)]\n    (= some-seq (if (= java.lang.Character (type (first  reversed)))\n                  (apply str reversed)\n                  reversed))))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 27, "code": "(fn [x] (= (apply str x)\n           (apply str (reverse x))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 27, "code": "(fn [all]\n   (let [rev (reverse all)\n         len (count all)\n         flen (inc (int (/ len 2)))]\n     (every? true? (map (fn [x]\n                          (= (nth rev x)\n                              (nth all x))\n                          ) (range flen)))\n     )\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 27, "code": "(fn [list]\n  (= (seq list) (reverse list))\n  )", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 27, "code": "#(if (string? %)\n   (if (= % (clojure.string/reverse %))\n     true\n     false)\n   (if (= % (reverse %))\n     true\n     false))", "user": "5a43b7e9e4b0447ef91cc609"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "583048d9e4b051871117c007"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "504e5333e4b0f6ff3350c4a2"}, {"problem": 27, "code": "(fn [l]\n  (= (seq l) (reverse (seq l)))\n  )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 27, "code": "#(let [L %]\n   (= (seq L) (reverse L)))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 27, "code": "(fn [lst] (= (seq lst) (reverse lst)))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a2a5239e4b09cafd31c7f30"}, {"problem": 27, "code": "(fn [sequence] (= (reverse (seq sequence)) (seq sequence)))", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a48f53de4b05d388ecb6b6a"}, {"problem": 27, "code": "(fn [a] (= (reverse a) (reverse (reverse a))))", "user": "521f24ebe4b0e6c71e0c0bcd"}, {"problem": 27, "code": "#(let [x (seq %)] (= (reverse x) x))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 27, "code": "(fn [coll]\n  (let [split_coll (partition (count coll) coll)]\n  (= (first split_coll) (reverse (last split_coll)))))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 27, "code": "(fn pl [s] (= s (if (instance? String s) (apply str (reverse s)) (reverse s))))", "user": "5a487d9ce4b05d388ecb6b67"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a4aa17fe4b05d388ecb6b7c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 27, "code": "(fn [x] (= (seq (reverse x)) (seq x)))", "user": "5a45aaece4b05d388ecb6b3f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 27, "code": "(fn [x] (cond (empty? x) true (= (first x) (last x)) (recur (rest (butlast x))) :else false))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5a4de5f4e4b05d388ecb6bb0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 27, "code": "(fn [coll]\n  (cond\n    (< (count coll) 2) true\n    (not= (first coll) (last coll)) false\n    :else (recur (rest (drop-last coll)))))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (if(string? x) (= x (clojure.string/reverse x))\n                 (= x (reverse x)))\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 27, "code": "(fn [ls]\n  (loop [ls' ls]\n    (cond\n     (< (count ls') 2) true\n     (not= (first ls') (last ls')) false\n     :else (recur (drop 1 (take (dec (count ls')) ls'))))))", "user": "58db7b81e4b0a4d5acaab680"}, {"problem": 27, "code": "(fn [x]\n   (loop [coll x\n          result true]\n     (if (or (= 1 (count coll)) (empty? coll) (not result))\n       result\n       (recur (drop-last (rest coll))\n              (= (first coll) (last coll))))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))", "user": "5a3a3824e4b001c08efc0cc2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a3dc590e4b0447ef91cc5a9"}, {"problem": 27, "code": "(fn pallindrom-detector\n  [incoming-list] \n  (if (>= 1 (count incoming-list))\n    true\n    (and \n      (= (first incoming-list) (last incoming-list)) \n      (pallindrom-detector (->> incoming-list (drop 1) (drop-last 1)))\n    )\n  )\n)", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 27, "code": "#(= (reduce conj () (seq %)) (seq %))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5534795ee4b09218d5f44f9e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 27, "code": "#( = (reverse(seq %)) (seq %))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a4fa947e4b05d388ecb6bce"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5a54e3c4e4b05d388ecb6c30"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5a54f0c6e4b05d388ecb6c33"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 27, "code": "(fn [all]\n   (let [rev (reverse all)\n         len (count all)\n         flen (inc (int (/ len 2)))]\n     (every? true? (map (fn [x]\n                          (= (nth rev x)\n                              (nth all x))\n                          ) (range flen)))\n     )\n   )", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 27, "code": "(fn [a]\n  (= a (if (string? a)\n         (apply str (reverse a))\n         (reverse a))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 27, "code": "(fn [xs] (loop [lst xs] (if (< (count lst) 2) true (if (= (first lst) (last lst)) (recur (rest (butlast lst))) false))))", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 27, "code": "(fn [p] (= (seq p) (reverse (seq p))))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 27, "code": "(fn palindrome [sequence]\n  (if (empty? sequence)\n    true\n    (= (seq sequence) (reverse (seq sequence)))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 27, "code": "#(= (into [] %) (reverse (into [] %)))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 27, "code": "(fn [xs]\n    (let [rev (reverse xs)\n          rev2 (if (string? xs) (apply str rev) rev)]\n        (= xs rev2)))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 27, "code": "#(let [xs (seq %)] (= xs (reverse xs)))", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 27, "code": "(fn [coll]\n  (= (apply str coll)\n     (apply str (reverse coll))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "5a516ae1e4b05d388ecb6be8"}, {"problem": 27, "code": "(fn [input-string] (= (seq input-string) (reverse input-string)))", "user": "5a5b9e3ce4b0512ff01cd90b"}, {"problem": 27, "code": "(fn pall [coll]\n  (= (seq coll) (reverse coll))\n  )", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 27, "code": "(fn [xs]\n  (let [h (Math/floor (/ (count xs) 2))]\n    (= (take h (reverse xs)) (take h xs))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 27, "code": "(fn [s] (= (vec s) (reverse s)))", "user": "5a5be4ebe4b0512ff01cd912"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "588f55d2e4b00487982d51a5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58cabf32e4b03c36ff7e583a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f027e3e4b0966464fe6a3c"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (every? true? (map = s (reverse s))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 27, "code": "#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= (reverse %) %))", "user": "5a608721e4b0512ff01cd95f"}, {"problem": 27, "code": "(fn \n  [candidate]\n  (= (reverse (reverse candidate)) (reverse candidate)))", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 27, "code": "(fn pali [x]\n  (if (empty? x) \n    true \n    (and (= (first x) (last x)) (pali (rest (take (dec (count x)) x))))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57ff52c7e4b0d3187e9009ea"}, {"problem": 27, "code": "(fn [\u00a5]\n  (if (string? \u00a5)\n      (= (apply str (reverse \u00a5)) \u00a5)\n      (= (reverse \u00a5) \u00a5)))", "user": "58136dcfe4b0f478707a0610"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a5a6347e4b05d388ecb6ca9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a62096de4b0512ff01cd982"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a68826ee4b0512ff01cd9f8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (into [] x)))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 27, "code": "(fn pali\n  [input]\n  (= (seq input) (reverse input)))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 27, "code": "#(loop [s %\n        rs (reverse %)]\n   (if (seq s) (if (= (first s) (first rs)) (recur (rest s) (rest rs)) false) true))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 27, "code": "(fn [elements] (if (= (type elements) String) (= elements (apply str (reverse elements))) (= elements (reverse elements))))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 27, "code": "(fn [c]\n  (let [coll->str (partial apply str)]\n    (= (coll->str c) (coll->str (reverse c)))))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 27, "code": "(fn [x]\n  (= (reverse (reverse x)) (reverse x)))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 27, "code": "(fn  pal [lst] (if (= lst (if (string? lst) (apply str (reverse lst)) (reverse lst))) true false))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 27, "code": "(fn pndrm [sq]\n  ( case (count sq)\n      1 true\n      2 (=  (last sq) (first sq))\n      (if (not= (first sq) (last sq) )\n        false\n       (pndrm (rest (drop-last sq) ) ) \n      )\n )\n)", "user": "5a6a436de4b0512ff01cda24"}, {"problem": 27, "code": "(fn [xs] (= (map identity xs) (reverse xs)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 27, "code": "#(if (even? (count %))\n   (= (take (int (/ (count %) 2)) %) (reverse (drop (int (/ (count %) 2)) %)))\n   (= (take (int (/ (count %) 2)) %) (reverse (drop (+ (int (/ (count %) 2)) 1) %))))", "user": "5a1eea9be4b0ff51aa4b327b"}, {"problem": 27, "code": "(fn [s] (let[s1 s\n             s2 (reverse s)]\n          (if (= (apply str s1) (apply str s2))\n            true\n            false)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 27, "code": "#(loop [nseq %] (if (or (nil? nseq) (nil? (next nseq))) true (if (= (first nseq) (first (reverse (next nseq)))) (recur (next (reverse (next nseq)))) false)))", "user": "5a6b8a9ae4b0512ff01cda3f"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5a6e145ee4b0512ff01cda68"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x)\n \t (= (apply str (reverse x)) x)\n  \t (= (reverse x) x))\n\n)", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 27, "code": "#(= (reduce str %1) (reduce str (reduce conj () %1)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 27, "code": "(fn\n  [coll]\n  (if (or\n       (empty? coll)\n       (= 1 (count coll)))\n    true\n    (if (not= (first coll) (last coll))\n      false\n     (recur (drop 1 (drop-last coll))))))", "user": "5a6f2942e4b0512ff01cda78"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a6dffe1e4b0512ff01cda66"}, {"problem": 27, "code": "(fn [word] (= (vec word) (reverse word)))", "user": "5a319634e4b0e23b2502f9c9"}, {"problem": 27, "code": "(fn [pali] (= (seq pali) (reverse pali)))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 27, "code": "(fn palindrome [sequence]\n (if (empty? sequence)\n   true\n   (= (seq sequence) (reverse (seq sequence)))))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a677a5fe4b0512ff01cd9e7"}, {"problem": 27, "code": "#(let [r (reverse %)] (= (seq %) r))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a718453e4b0512ff01cda91"}, {"problem": 27, "code": "(fn [x] (if (= (first x) (last x)) (if (<= 1 (count x)) true (recur (subvec x 1 (dec (count x))))) false))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59f77dfae4b0966464fe6af4"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 27, "code": "#(= (seq %) (reverse  %))", "user": "5a721047e4b0512ff01cda97"}, {"problem": 27, "code": "(fn [lst]\n  ((fn f [ls n]\n     (cond (> n (/ (count ls) 2)) true\n           (= (nth ls n) (nth ls (- (count ls) n 1))) (f ls (+ n 1))\n           :else false))\n   lst 0))", "user": "5a74bf3ae4b0512ff01cdabd"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 27, "code": "(fn pal [x]\n  (loop [i 0 j (dec (count x))]\n    (if (> i j)\n      true\n      (if (= (nth x i) (nth x j))\n        (recur (inc i) (dec j))\n        false\n        )\n      )\n    )\n  )", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a778224e4b013a48d399761"}, {"problem": 27, "code": "(fn [v]\n  (loop [cpt 0]\n    (if(< cpt (quot (count v) 2))\n      (if(= (nth v cpt) (nth v (- (count v) cpt 1)))\n        (recur (inc cpt))\n        false)\n      true)))", "user": "5a786223e4b013a48d39976b"}, {"problem": 27, "code": "(fn palindrome [x] (if (= (seq x) (reverse x)) true false))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 27, "code": "(fn [n]\n    (loop [droite 0, gauche (dec (count n))]\n        (if (< droite gauche)\n            (if (= (nth n droite) (nth n gauche))\n                (recur (inc droite) (dec gauche))\n                false)\n            true)))", "user": "5a640a37e4b0512ff01cd9a2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a796f7fe4b03baeef9276bb"}, {"problem": 27, "code": ";; Problem 26\n(fn palindrome [seq]\n  (let [rev (if (string? seq)\n              (apply str (reverse seq))\n              (reverse seq))]\n    (= seq rev)))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a7b363ae4b03baeef9276d9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 27, "code": "#(or (= (reverse %) %) (= (apply str (reverse %)) %))", "user": "5a779197e4b013a48d399763"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s]\n    (if (seq s)\n      (if (= (first s) (last s))\n        (recur (butlast (rest s)))\n        false)\n      true)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 27, "code": "#(let [xs (seq %)] (= (reverse xs) xs))", "user": "5a6af351e4b0512ff01cda2e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 27, "code": "(fn [coll] \n  (not= (count coll) \n     (count (set coll))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a7ed0c7e4b03baeef92770e"}, {"problem": 27, "code": "(fn [coll] (let [half (quot (count coll) 2)\n                 firsthalf (take half coll)\n                 sechalf (take half (reverse coll))]\n            \t(= firsthalf sechalf)))", "user": "5a7deab5e4b03baeef927703"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 27, "code": "(fn [x]\n  (= (nth x 0) (nth x (- (count x) 1))))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 27, "code": "(fn palindrom? [coll] \n  (= (vec coll) (vec (reverse (vec coll)))))", "user": "5a7ba4bbe4b03baeef9276e5"}, {"problem": 27, "code": "#(=\n      (seq %)\n      (reverse (seq %)))", "user": "5a7e194de4b03baeef927706"}, {"problem": 27, "code": "#(= (list* %) (reverse %))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 27, "code": "(fn [x] \n  (let [a (seq x) b (reverse x)]\n    (= a b)))", "user": "5a7460a0e4b0512ff01cdaaf"}, {"problem": 27, "code": "(fn [x]\n             (if (= (type x) (type \"car\"))\n               (= x (apply str (reverse x)))\n                 (= x (reverse x))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 27, "code": "(fn [coll]\n         (let [reversed (reverse coll)]\n           (empty? (filter false? (map = coll reversed)))))", "user": "5a861aafe4b05369db4d2496"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/reverse %) %)\n   (= (reverse %) %) )", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a85f55be4b05369db4d2493"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5a853662e4b00b71e582a09e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a2abce0e4b09cafd31c7f37"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 27, "code": "(fn [xs]\n   (cond\n     (empty? xs) true\n     (= (count xs) 1) true\n     (= (first xs) (last xs)) (recur (rest (drop-last xs)))\n     :else false))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 27, "code": "(fn [lst]\n   (if (string? lst)\n      (if (= (seq lst) (seq (reverse lst)))\n         true\n         false)\n      (if (= lst (reverse lst))\n         true\n         false)))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %)))", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (clojure.string/reverse s))\n  \t(= s (reverse s))))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (not (second seq)) true\n    (if (= (take 1 seq) (take-last 1 seq)) (palindrome? (rest (drop-last 1 seq)))\n      false)))", "user": "5a8d1eade4b05369db4d2511"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (palindrome? (rest (butlast s)))\n      false)))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 27, "code": "(fn [x] \n  (let [r (clojure.string/join (reverse x))\n        s (clojure.string/join x)]\n  \t(= r s))\n)", "user": "5a91c205e4b002d099cae6fd"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "5a929426e4b002d099cae70d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a933d8ee4b0d174b936c720"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5a8bdd0ce4b05369db4d24f2"}, {"problem": 27, "code": "(\n\tfn check-pallindrome [x] (\n\t\t\tif (and (= (first x) (last x))  (not= (first x) nil))\n\t\t\t(check-pallindrome (reverse (drop 1 (reverse (drop 1 x)))))\n\t\t\t(if (and (= (first x) nil) (= (last x) nil)) true false)\n\t\t)\n)", "user": "5a918839e4b002d099cae6f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 27, "code": "(fn [s] (every? true? (map #(= %1 %2) s (reverse s))))", "user": "5a822590e4b00b71e582a073"}, {"problem": 27, "code": "(fn [col] (= (seq  col) (reverse col)))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 27, "code": "(fn [s] (= (lazy-seq s) (reverse s)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 27, "code": "(fn [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (-> s (rest) (drop-last)))\n      false)))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 27, "code": "#(= % (if (coll? %) (reverse %) (clojure.string/join (reverse %))))", "user": "5a8b2e58e4b05369db4d24e0"}, {"problem": 27, "code": "(fn [in] (= (seq in) (reverse (seq in))))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "55527251e4b0deb715856df3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 27, "code": "(fn palin\n  [lst]\n (if (empty? lst)\n   true\n   (if (= (first lst) (last lst))\n     (palin (rest (butlast lst)))\n     false\n   )\n )\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse (seq lst))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5a9aad01e4b0d174b936c7c0"}, {"problem": 27, "code": "(fn [data]\n  (let [rdata (reverse data)]\n    (= data (cond \n              (string? data) (apply str rdata)\n              (vector? data) (vec rdata)\n              :else rdata))))", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 27, "code": "#(= (reduce str (reverse %1)) (reduce str %1))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (string? seq) (= seq (apply str (reverse seq)))\n\t  (= seq (reverse seq))))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 27, "code": "(fn [list]\n  (let [ [f s] (split-at (/ (count list) 2.0) list)]\n    (loop [_f f _s (reverse s)]\n      (if (or (nil? (first _f)) (nil? (first _s))) true\n        (if (not= (first _f) (first _s)) false\n          (recur (rest _f) (rest _s)))))))", "user": "58662a03e4b0f14aab7c8859"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "52bba119e4b07a9af57922ea"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x) \n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "59f6495ee4b0966464fe6acf"}, {"problem": 27, "code": "(fn [item] (= (apply str (reduce conj '() item)) (apply str item)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 27, "code": "#(cond\n  (string? %) (= % (apply str (reverse %)))\n  :else (= % (reverse %)))", "user": "5a984616e4b0d174b936c789"}, {"problem": 27, "code": "#(= (apply str %)\n   (apply str (reverse %)))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5a9c6038e4b0d174b936c7d7"}, {"problem": 27, "code": "(fn[n]\n  (= (seq n) (reverse n)))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 27, "code": "(fn pali\n  [lst] \n  \n  (every? true? (map = lst (reverse lst))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))", "user": "5a9373d5e4b0d174b936c722"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 27, "code": "#(every? true? \n         ((fn [x]\n            (for [i (range (quot (count x) 2))]\n              (if (= (nth x i) (nth x (- (dec (count x)) i)))\n                true\n                false))) %))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 27, "code": "#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 27, "code": "(fn [v]\n  (loop [src v]\n    (if (<= (count src) 1) true\n        (let [head (first src)\n              tail (last src)]\n          (if (= head tail)\n            (recur (rest (butlast src)))\n            false)))))", "user": "5a98ab58e4b0d174b936c78e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59a0fb85e4b0871e7608b845"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse%)))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 27, "code": "(fn [value] (= (seq value) (reverse value)))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 27, "code": "(fn palindrome [x]\n  (if (= (type x) java.lang.String)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 27, "code": "#(let [v (vec %)]\n    (cond (< (count v) 2) true\n          (not= (first v) (peek v)) false\n          :else (recur (subvec v 1 (- (count v) 1)))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) \n    (= lat (apply str (reverse lat)))\n  \t(= lat (reverse lat))))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5908882de4b047aa04b19979"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5aa15ec0e4b0d174b936c848"}, {"problem": 27, "code": "(fn palindrome? \n  [lst]\n  (if (string? lst) (= lst \n                       (apply str \n                              (reverse lst)))\n      (= lst (reverse lst))))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 27, "code": "(fn\n  [lst]\n  (= (vec lst) (vec (reverse lst))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 27, "code": "(fn [str]\n    (loop [i 0]\n      (if (> i (- (quot (count str) 2) 1))\n        true\n        (if (not= (nth str i) (nth str (- (count str) i 1)))\n          false\n          (recur (+ i 1))\n        )\n      )\n    )\n  )", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 27, "code": "#(= (seq %) \n    (reverse (seq %)))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 27, "code": "#(= (seq %) (reverse ( seq %)))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 27, "code": "(fn palindrome [seq]\n\n  (loop [fIdx 0, bIdx (dec (count seq))]\n    (if (< fIdx bIdx)\n      (if (= (nth seq fIdx) (nth seq bIdx))\n        (recur (inc fIdx) (dec bIdx))\n        false\n        )\n      true\n      )\n\n    ))", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 27, "code": "(fn [%] \n  (= (seq %) (reverse (seq %)))\n)", "user": "5aa62482e4b0d174b936c8a5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5aa690c0e4b0d174b936c8ad"}, {"problem": 27, "code": "#(= (seq %) \n    (reverse %))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll)\n    (if (= coll (clojure.string/reverse coll))\n      true\n      false)\n    (if (= coll (reverse coll))\n      true\n      false)))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "5a3a15e6e4b001c08efc0cc1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aa8863ce4b0d174b936c8d0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 27, "code": "(fn [sq] (loop [rsq (reverse sq) sq_ sq] (if (= (count rsq) 0) true (if (= (first rsq) (first sq_)) (recur (rest rsq) (rest sq_)) false))))", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 27, "code": "#(= (vec %)\n(vec (reverse %)))", "user": "5aac26d3e4b073f177442569"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5aac01d3e4b073f177442567"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "50bdd4fee4b0594b91591c84"}, {"problem": 27, "code": "(fn [s] \n  (let [c (count s)]\n    (loop [f 0 l (- c 1)]\n      (cond (= f l) \n            true\n            (and (= 1 (- l f))\n                 (= (nth s f) (nth s l)))\n            true\n            (not= (nth s f) (nth s l))\n            false\n            :else\n            (recur (inc f) (dec l))))))", "user": "586d2f5be4b01531a375e98c"}, {"problem": 27, "code": "(fn pal [col]\n  (\n    if (< (count col) 2)\n    true\n    (->> \n      (= (first col) (last col))\n      (and (pal (->> col rest butlast)))\n    )\n  )  \n)", "user": "5aad79d9e4b073f177442578"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554e4d65e4b00713264bd993"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aa88c12e4b0d174b936c8d1"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (let [reversed (reverse coll)]\n    (if (isa? (type coll) String)\n      (= coll (clojure.string/join reversed))\n      (= coll reversed)\n      )\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 27, "code": "(fn [s]\n  (cond\n   (empty? s) true\n   (not= (first s) (last s)) false\n   :else (recur (rest (butlast s)))))", "user": "5aad2bd2e4b073f177442573"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aa97ee9e4b0d174b936c8e4"}, {"problem": 27, "code": "(fn check [x] \n  (if (empty? x) \n    true \n\t(and (= (last x) (first x)) (check (rest (reverse (rest x)))) )))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 27, "code": "(fn isPalindrome \n  [sourceString]\n  (if \n    (string? sourceString)\n  \t(= (clojure.string/join \"\" (reverse sourceString)) sourceString)\n  \t(= (reverse sourceString) sourceString)\n  )\n )", "user": "5aa811f7e4b0d174b936c8c2"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 27, "code": "#(= (seq % ) (reverse (seq %)))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 27, "code": "(fn [coll]\n   (let [a-str #(apply str %)]\n     (= (a-str coll) (a-str (reverse coll)))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 27, "code": "(fn [seq]\n  (loop [seq seq]\n    (let [f (first seq) l (last seq) length (count seq)]\n      (cond\n        (not= f l) false\n        (= 1 length) true\n        (= 2 length) (= f l)\n        :else (recur (drop-last 1 (drop 1 seq) ))))))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 27, "code": "(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse s))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 27, "code": "#(if (<= (count %) 1)\n   true\n   (if (not= (first %) (last %))\n     false\n     (recur (rest (drop-last %)))\n     )\n   )", "user": "5ab5f60be4b073f177442643"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5ab93449e4b073f177442692"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5ab8037ae4b073f177442678"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ab96075e4b073f177442694"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5abb02ade4b073f1774426bc"}, {"problem": 27, "code": "(fn palindrome? [s]\n      (cond \n            (< (count s) 2) true\n            :else (and \n                       (palindrome? (drop 1 (drop-last 1 s)))\n                       (= (take 1 s) (take-last 1 s))\n                  )\n      )\n   )", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 27, "code": "#(let [x (seq %)] (= x (reverse x)))", "user": "5abbb374e4b073f1774426d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 27, "code": "(fn palindrome? [alist]\n  (every? \n   #(= (first %) (second %))\n   (map vector alist (reverse alist))))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 27, "code": "(fn palindrome? [input]\n (= (seq input) (reverse (seq input)))\n )", "user": "5abeb697e4b073f177442725"}, {"problem": 27, "code": "(fn [coll]\n                  (loop [coll coll]\n                    (if (next coll)\n                      (let [first (first coll)\n                            last (last coll)]\n                        (if (= first last)\n                          (recur (butlast (rest coll)))\n                          false)\n                        )\n                      true\n                      )\n                    )\n                  )", "user": "5ab575f8e4b073f17744263d"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (cond\n  (<= (count xs) 1) true\n  (= 2 (count xs)) (= (first xs) (last xs))\n  true (let [f (first xs)\n             l (last xs)]\n          (cond\n            (= f l) (recur (butlast (rest xs)))\n            true false))))", "user": "51e24905e4b01e519814642e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ac0dab7e4b073f177442746"}, {"problem": 27, "code": "(fn palin [s] (if (empty? s) true (and (= (first s) (last s)) (palin (rest (butlast s))))))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5ab3db13e4b073f177442609"}, {"problem": 27, "code": "#(loop [x %] (cond (empty? x) true (not= (first x) (last x)) false :else (recur (take (- (count x) 2) (drop 1 x)))))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 27, "code": "#(zero? (compare (vec %) (vec (reverse %))))", "user": "5a77317ee4b013a48d399759"}, {"problem": 27, "code": "(fn [x] (= (reduce conj '() (reduce conj '() x)) (reduce conj '() x)))", "user": "5ab3edf0e4b073f17744260d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 27, "code": "(fn [s] (if (empty? s) true (let [a (first s) b (last s)] ( if (= a b) ( recur(rest (butlast s))) false))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 27, "code": "(fn palindrome\n    [coll]\n    (loop [remaining coll]\n        (if (<= (count remaining) 1)\n            true\n            (if (not= (first remaining) (last remaining))\n                false\n                (recur (rest (butlast remaining)))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 27, "code": "(fn [e] (= (into () e) (reverse (into () e))))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 27, "code": "#(= (sequence %) (reverse(sequence %)))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "59b71b4fe4b05c620303ca3d"}, {"problem": 27, "code": "(fn palindrome?\n  [input]\n  (= (seq input) (seq (reverse input))))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 27, "code": "(fn [elems]\n    (or (empty? elems)\n        (and (= (first elems) (last elems))\n             (recur (-> elems rest butlast)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)\n  ))", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 27, "code": "(fn [coll] \n  (let [coll-middle (/ (count coll) 2)\n        coll-start (take (Math/ceil coll-middle) coll)\n        coll-end (drop (Math/floor coll-middle) coll)]\n    (= coll-start (reverse coll-end))))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 27, "code": "(fn [lst]\n   (= \n    (get (split-at (int (/ (count lst) 2) ) lst) 0 )\n    (get (split-at (int (/ (count lst) 2) ) (reverse lst) ) 0 )       \n   )  \n)", "user": "5ac96cf8e4b0e27600da77c2"}, {"problem": 27, "code": "#( = ( reverse %) (seq %))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 27, "code": "(fn isPalindrome\n  [items]\n  (= (into [] items) (reverse (into [] items)))\n  )", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 27, "code": "(fn palindrome [x]\n  (= (into [] x) (reverse (into [] x)))\n  )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5abd4886e4b073f177442710"}, {"problem": 27, "code": "(fn pal [s]\n  (if (empty? s)\n\ttrue\n    (and (= (last s) (first s))\n         (recur (rest (butlast s))))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 27, "code": "(fn [xs]\n  (=  (reverse xs ) (vec xs))\n  )", "user": "57513f88e4b02ea114799283"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))\n\n;(fn [x] (= (vec x) (reverse x)))\n\n;;(fn [x] \n  ;;(if (= x (reverse x))\n  \t;;(true? (= x (reverse x)))\n  \t;;(true? (= x (apply str (reverse x))))))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 27, "code": "(fn rev2 [param]\n  (if (=\n       (if (= (type param) java.lang.String)\n         (apply str (reverse param))\n         (reverse param)\n         ) param)\n    true\n    false\n    )\n\n)", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 27, "code": "(fn mirror? [lst]\n  (loop [l lst]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n        (recur (reverse (rest (reverse (rest l)))))\n        false))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 27, "code": "#(every? true? (map (fn [x] (= (first x) (last x))) (map vector % (reverse %))))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 27, "code": "(fn palindrome [xs]\n  (loop [list xs result (= (first list) (last list))]\n    (if (> (count list) 1)\n      (if (= (first list) (last list))\n        (recur (drop-last (rest list)) (= (first list) (last list)))\n        false)\n      true)))", "user": "5a42dbbbe4b0447ef91cc5fd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ad60481e4b0ea6055cfabf9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ad6d0c9e4b0ea6055cfac11"}, {"problem": 27, "code": "(fn f [seq]\n  (if (= (first seq) nil)\n    true\n    (and (= (first seq) (last seq))\n         (f (rest (drop-last seq))))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s) \n    (= s (apply str (reverse s)))\n      (= s (reverse s))))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 27, "code": "(fn [xs]\n  (let [f (first xs)\n        l (last xs)\n        xss (->> xs (drop 1) (butlast))]\n    (if (and f l)\n      (and (= f l) (recur xss))\n      true)))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 27, "code": "#(letfn [(fun1\n           [coll]\n           (if (< 0 (count coll))\n             (if (= (first coll) (last coll))\n               (fun1 (rest (butlast coll)))\n               false)\n             true))]\n   (fun1 %))", "user": "56e24e68e4b03a7c14b85a34"}, {"problem": 27, "code": "#(= (clojure.string/join (reverse %)) (clojure.string/join \"\" %))", "user": "5ac04101e4b073f177442737"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x) ))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 27, "code": "(fn is-palindrome [x]\n  (let [l (int (Math/floor (/ (count x) 2)))]\n    (= (take l x) (reverse (take-last l x)))\n    ))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 27, "code": "(fn [s]\n     (= (seq s) (reverse s)))", "user": "56d6e165e4b0ea9b8538f7d3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a353bdae4b0ddc586f153d9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ae429fae4b0837691e92c79"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5ae5792ee4b0837691e92c90"}, {"problem": 27, "code": "(fn palin[x]\n  (loop [par x]\n    (if (seq par)\n      (if( = 0 ( compare (first par) (last par)))\n        (recur (rest (butlast par)))\n        false)true)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "5aac468ae4b073f17744256b"}, {"problem": 27, "code": "#(=\n  \t%\n  \t(if (string? %)\n      (clojure.string/join \"\" (reverse %))\n      (reverse %)\n  \t)\n  )", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 27, "code": "(fn [c] (= (partition (quot (count c) 2) c) (partition (quot (count c) 2) (reverse c))))", "user": "5ae56da2e4b0837691e92c8f"}, {"problem": 27, "code": "(fn [word]  (= (reverse word) (seq word)))", "user": "5aeb3c1ce4b0cc2b61a3bbf4"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 27, "code": "(fn test_rev\n  ([arg] (test_rev arg nil))\n  ([arg bck_list] \n   (if (empty? arg)\n     (= bck_list (reverse bck_list))\n     (test_rev (rest arg) (conj bck_list (first arg)))\n     )\n   )\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5aeb4c10e4b0cc2b61a3bbf6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 27, "code": "(fn [x ](= (seq (reverse x)) (seq x)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5974c454e4b01722bebd4cb5"}, {"problem": 27, "code": "(fn [x]\n   (let [x (seq x)\n         y (reverse x)]\n    (= x y)))", "user": "5af047b8e4b0cc2b61a3bc48"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5af062e5e4b0cc2b61a3bc51"}, {"problem": 27, "code": "(fn [x] \n   (= (reverse x) (reverse (reverse x))))", "user": "582625d3e4b051871117bef2"}, {"problem": 27, "code": "(fn [seq-list] (= (seq seq-list) (reverse (seq seq-list))))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 27, "code": "(fn\n  [coll]\n  (if (= (seq coll) (reverse (seq coll)))\n    true\n    false\n    )\n  )", "user": "5aefd746e4b0cc2b61a3bc3d"}, {"problem": 27, "code": "#(loop [elements %]\n  (if (<= (count elements) 1)\n    true\n    (if (= (first elements) (last elements))\n      (recur (take (- (count elements) 2) (rest elements)))\n      false)))", "user": "5af1cb6be4b0cc2b61a3bc64"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 27, "code": "(fn is-pal? [s]\n  (if (nil? s) true \n    (if (= (first s) (last s) ) (is-pal? (butlast (rest s))) false)))", "user": "5af1cbb8e4b0cc2b61a3bc65"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5af20ce0e4b0cc2b61a3bc69"}, {"problem": 27, "code": "; #(= (seq %) (reverse (seq %)))\n#(= (reduce str %) (reduce str (reverse %)))", "user": "5af3742ee4b0cc2b61a3bc87"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 27, "code": "(fn palindrome [x]\n  (loop [a x inv (reverse x)]\n    (if (not= (first a) (first inv))\n      false\n      (if (<= (count a) 1)\n        true\n        (recur (rest a) (rest inv)))\n      )\n    )\n  )", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5af45f05e4b0cc2b61a3bc97"}, {"problem": 27, "code": "(fn [s]\n  (= (if (string? s) (seq s) s) ((fn [t]\n         (reduce conj '() t)) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5af61443e4b0cc2b61a3bcb1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "53b2b438e4b047364c04449d"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 27, "code": "(fn [s]\n  (loop [r (reverse s) s s]\n    (if (empty? s)\n      true\n      (if (= (first s) (first r))\n        (recur (rest r) (rest s))\n        false))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5af0ac45e4b0cc2b61a3bc56"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "5aedaab9e4b0cc2b61a3bc1c"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 27, "code": "(fn [x]\n  (let [y (split-at (/ (count x) 2) x)]\n    (if\n      (> (count (first y)) (count (last y)))\n      (= (butlast (first y))\n         (reverse (last y)))\n      (= (first y)\n         (reverse (last y))))))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 27, "code": "(fn [value]\n  (loop [v (vec value)]\n    (if (empty? v)\n      true\n      (if (= (first v) (last v))\n        (recur (rest (drop-last v)))\n        false))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 27, "code": "(fn pali? [l]\n\n  (= (seq l) (reverse l)\n  ))", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 27, "code": "(fn [aseq] (if (not= (type aseq) java.lang.String)\n                     (= aseq (reverse aseq))\n                     (= aseq (clojure.string/replace (clojure.string/replace (clojure.string/replace (clojure.string/replace (str (reverse \"racecar\")) \"\\\\\" \"\") \" \" \"\") \"(\" \"\") \")\" \"\"))))", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 27, "code": "(fn [smth]\n  (let [len (count smth) mid (/ len 2)]\n    (loop [is-pal true current 0]\n      (if (or (false? is-pal) (> current mid))\n        is-pal\n      (recur (= (nth smth current) (nth smth (- len current 1))) (inc current))))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 27, "code": "(fn [coll]\n  (if (<= (count coll) 1)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (drop 1 (drop-last coll))))))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5add1fede4b0837691e92c0a"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n\t(= x (reverse x))))", "user": "5aefedc0e4b0cc2b61a3bc42"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 27, "code": "(fn palindrome [sequ]\n  (if (<= (count sequ) 1)\n      true\n      (let [x (first sequ) y (first (reverse sequ))]\n        (if (not (= x y))\n            false\n            (palindrome (reverse (rest (reverse (rest sequ)))))\n        )\n      )\n  )\n)", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 27, "code": "(fn [x]\n  (loop [l x]\n      (if (empty? l)\n        true\n        (if (= (first l) (last l))\n          (do (println (first l) (last l))\n          (recur (rest (butlast l))))\n          false))))", "user": "5a786397e4b013a48d39976c"}, {"problem": 27, "code": "(fn [s]\n  (and\n    (=\n      (first s)\n      (last s))\n  (cond \n    (= 1 (count s)) true\n    (= 0 (count s)) true\n    :else (recur (drop-last (rest s))))))", "user": "5a9c7174e4b0d174b936c7d8"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s, r (reverse s)]\n      (if (seq s)\n        (if (= (first s) (first r))\n          (recur (rest s) (rest r))\n          false)\n        true)))", "user": "5a805f7ee4b00b71e582a04d"}, {"problem": 27, "code": "(fn CekPalindrom\n  [coll]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (CekPalindrom (rest (butlast coll)))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 27, "code": "(fn pal?[n]\n  (= (seq n) (reverse n)))", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 27, "code": "#(= (into () %) (into () (into () %)))", "user": "5b046a9ee4b0cc2b61a3bd76"}, {"problem": 27, "code": "(fn [x]\n  (cond (string? x) (= x (apply str (reverse x)))\n        :else (= x (reverse x))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 27, "code": "(fn [xs] \n  (= (filter #(= % 0)\n(let [l\n(#(let [c (count %) m (if (= (mod c 2) 1) 1 0)]\n      (+\n  (int (/ c 2))\n      m))\n xs)] \n  (map (fn [x r] (if (= x r) 1 0))\n   (take l xs) (take l (reverse xs)))\n  )\n             ) [])\n)", "user": "5af0c1ede4b0cc2b61a3bc57"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 27, "code": "(fn [arg]\n  (= (seq arg) (reverse arg)))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5afa8095e4b0cc2b61a3bceb"}, {"problem": 27, "code": "#(= (if (= (type %) java.lang.String) (apply str (reverse %)) (reverse %)) %)", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 27, "code": "#(= (reduce str %)\n    (reduce str (reverse %)))", "user": "58e9e7c0e4b056aecfd47d11"}, {"problem": 27, "code": "(fn pal [s]\n  (let [s-count (count s)]\n    (cond\n       (<= s-count 1) true\n       (= s-count 2) (= (first s) (last s))\n       :else (and \n               (= (first s) (last s)) \n               (pal (drop-last (rest s)))\n             )\n    )\n  )\n)", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b0d5619e4b0cc2b61a3bdf0"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "59d8c4e7e4b0ef0a1e9b5c47"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59c1c169e4b0a024fb6ae492"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (->> % reverse (apply str)))\n   (= % (reverse %)))", "user": "5ab9904ce4b073f177442695"}, {"problem": 27, "code": "(fn [in] (let [rev (if (= java.lang.String (type in)) clojure.string/reverse reverse)] (= in (rev in))))", "user": "5ad6ad5de4b0ea6055cfac0e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4e84bb7e535db62dc21a62e3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 27, "code": "(fn [coll] (= (reverse(seq coll)) (seq coll)))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 27, "code": "(fn f [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (f (butlast (rest s)))\n      false)))", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 27, "code": "#(= % (if (= java.lang.String (type %)) (clojure.string/reverse %) (reverse %)))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 27, "code": "#(every? true? (map = (seq %) (reverse (seq %))))", "user": "5b12f5b6e4b0cc2b61a3be49"}, {"problem": 27, "code": "(fn palindrom-detector [s]\n(if (<= (count s) 1)\n  true\n  (and (= (first s) (last s))\n       (palindrom-detector (drop-last (drop 1 s))))))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop-last (drop 1 s))))))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 27, "code": "(fn [sequ]\n  (if (= (seq sequ) (reverse sequ))\n    true\n    false))", "user": "5b102ab8e4b0cc2b61a3be19"}, {"problem": 27, "code": "(fn pallindrome? [in]\n\n     (= (seq in) (reverse in))\n   )", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 27, "code": "#(= (apply vector %1) (reverse (apply vector %1)))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 27, "code": "(fn is-palindrome? [x]\n  (= (into [] x) (reverse (into [] x))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 27, "code": "(fn palindrome [x] \n  (= (seq x)(reverse x)))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 27, "code": "(fn [xs] (= (take (int (/ (count xs) 2)) xs) (reverse (take-last (int (/ (count xs) 2)) xs))))", "user": "5953053ce4b066ee0a44aeda"}, {"problem": 27, "code": "(fn isPalindrome\n  \t[x]\n  \t(if (string? x)\n      (= (sequence x) (reverse (sequence x)))\n      (= x (reverse x))))", "user": "591e1dc7e4b09b4ee5954c2a"}, {"problem": 27, "code": "#(= (clojure.string/join %) (clojure.string/join (reverse %)))", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b15d56be4b0cc2b61a3be74"}, {"problem": 27, "code": "(fn [word] (= (seq word) (reverse word)))", "user": "5b1737c1e4b00d69b768e765"}, {"problem": 27, "code": "#(let [z (into () %)]\n   (= z (reverse z)))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 27, "code": "(fn p [xs]\n  (= (seq xs) (reverse xs)))", "user": "59dec79ee4b01968742fed81"}, {"problem": 27, "code": "(fn [items] (= (seq items) (reverse items)))", "user": "5b1ff078e4b03cfeda66ed2a"}, {"problem": 27, "code": "(fn pal [li] (cond\n              (< (count li) 2) true\n              (= (first li) (last li)) (pal (rest (butlast li)))\n              true false\n               ))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 27, "code": "#(let [x (into '() %)]\n       \n       (if (= x (reverse x)) true false))", "user": "567be591e4b05957ce8c61ab"}, {"problem": 27, "code": "(fn [in]\n  (let [xs (seq in)\n        len (count xs)\n        first-half (take (quot len 2) xs)\n        second-half (drop (quot (inc len) 2) xs)]\n    (= first-half (reverse second-half))))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 27, "code": "(fn detector [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b20cd02e4b03cfeda66ed37"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 27, "code": "(fn pal [in] (= (apply str (reverse in)) (apply str in)))", "user": "5af554e8e4b0cc2b61a3bca6"}, {"problem": 27, "code": "#(let [l (into '() %)]  (= (reverse l) l))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "50a635bbe4b0aa96157e2621"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse x))\n)", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 27, "code": "#(let [x (seq %)] (= (reduce conj '() x) x))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 27, "code": "(fn [coll]\n  (if (string? coll) (= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 27, "code": "#(= ( seq % ) (reverse (seq %) ) )", "user": "5b28cf92e4b063e2438bcc56"}, {"problem": 27, "code": "#(= (vec%) (rseq (vec %)))", "user": "5b29c33ee4b063e2438bcc64"}, {"problem": 27, "code": "(fn [coll] \n  (if (= (vec coll) (reverse coll))\n      true\n      false\n  )\n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str( reverse x)))\n    (= x (reverse x))))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 27, "code": "(fn [x]\n  (if (= (reverse (reverse x)) (reverse x))\n  \ttrue\n  \tfalse))", "user": "5b2bc1ace4b025bcb146f2ad"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "56673885e4b04acd4f672dce"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 27, "code": "(fn [s]\n  (let [sx (seq s)]\n    (= sx (reverse sx))))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 27, "code": "(fn [coll] (loop [idx 0 rdx (- (count coll) 1)] (if (> idx rdx) true (if (= (nth coll idx) (nth coll rdx)) (recur (inc idx) (dec rdx)) false))))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 27, "code": "#(if (= (seq %) (reverse %))\n    true\n    false)", "user": "5a58da38e4b05d388ecb6c8b"}, {"problem": 27, "code": "(fn palindrome [coll]\n  (= (seq coll) (reverse coll)))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b2eaf1be4b025bcb146f2db"}, {"problem": 27, "code": "(fn [x] \n  (if \n    (odd? (count x))\n    (let [toTake (Math/floor (/ (count x) 2))]\n      (= (take toTake x) (reverse (take-last toTake x))))\n    (let [toTake (/ (count x) 2)]\n      (= (take toTake x) (reverse (take-last toTake x))))\n  )\n)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 27, "code": "(fn palindrome [s] (if (empty? s) true (if (= (first s) (last s)) (palindrome ( drop-last (drop 1 s))) false ) ))", "user": "5b32571ee4b025bcb146f318"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5b2b6e9ae4b025bcb146f2a8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e5696d0535d8a8b8723a284"}, {"problem": 27, "code": "#(let [rev (reverse %)] (= % (if (string? %) (clojure.string/join rev) rev)))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 27, "code": "(fn [word]\n  (= (seq word) (seq (reverse word))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 27, "code": "(fn [x]\n  (loop [f x]\n    (if (empty? f)\n      true\n      (if (= (first f) (last f))\n        (recur (butlast (rest f)))\n        false))))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 27, "code": "(fn [word]\n  (= (apply str word)\n     (apply str (reverse word))))", "user": "59e8a952e4b0249b72820733"}, {"problem": 27, "code": "(fn a[x] ( if ( empty? x ) true ( if (= (str (first x)) (str (last x )) ) ( a ( drop 1 ( drop-last 1 x ) ) ) false  ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b09dc89e4b0cc2b61a3bdc3"}, {"problem": 27, "code": "(fn [s]\n    (let [r (reverse s)]\n      (= r (seq s))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 27, "code": "(fn abc [x] (= (seq x) (reverse x)))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "573e4be9e4b05c31a32c0829"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 27, "code": "(fn palindromep\n  ([l] (palindromep l (count l) '()))\n  ([l1 n l2]\n   (case n\n     0 (= l1 l2)\n     1 (= (rest l1) l2)\n     (palindromep (rest l1) (- n 2) (conj l2 (first l1))))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 27, "code": "(fn [original-list] \n\t(= (clojure.string/join \"\" original-list) (clojure.string/join \"\" (map #(str %) (reverse original-list))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 27, "code": "#(= (reduce str %)(reduce str (reverse %)))", "user": "5b0c21fbe4b0cc2b61a3bde3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 27, "code": "(fn [i] (= (seq i) (reverse i)))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 27, "code": "#(reduce (fn [x y] (and x y)) (map (fn [a b] (= a b)) % (reverse %)))", "user": "5a5d693ce4b0512ff01cd923"}, {"problem": 27, "code": "(fn [x]\n  (loop [arr x\n         rs true]\n    (case arr\n     nil rs\n     (if (= (first arr) (last arr))\n            (\trecur \n              (next (reverse\n               \t\n                 \t(next arr))\n                 \n               ) \n              true\n             )\n            false)\n     )\n    )\n  )", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 27, "code": "(fn [Karte]\n\t(if (string? Karte)\n\t(= (apply str (reverse \"racecar\")) Karte)\n\t(= (reverse Karte) Karte)))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "5b3a60c7e4b02d533a91bbc5"}, {"problem": 27, "code": "(fn [s]\n  (= s (if (string? s) (apply str (reverse s))\n           (reverse s))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 27, "code": "(fn [x] (= (reverse (vec x)) (vec x)))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 27, "code": "(fn [args] (if (string? args) (= args (apply str (reverse args)) ) (= args (reverse args))))", "user": "5b265183e4b063e2438bcc31"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 27, "code": "#(= (if (= (type %) java.lang.String) \n  (clojure.string/join \"\" (reverse %))\n  (reverse %))\n  %)", "user": "5b3b70c6e4b02d533a91bbd4"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 27, "code": "(fn[x](= (apply str x) (apply str (reverse x))))", "user": "5826a843e4b051871117befd"}, {"problem": 27, "code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 27, "code": "(fn palindrome [s]\n  (if (= (seq s) (reverse (seq s)))\n    true\n    false))", "user": "5b4ca13ce4b02d533a91bcac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b51ddc9e4b02d533a91bd01"}, {"problem": 27, "code": "#(let[c (count %) c2 (/ c 2)] (loop[n 0] (if (> n c2) true (if (= (nth % n) (nth % (- c n 1) )) (recur (inc n)) false))))", "user": "5a972643e4b0d174b936c778"}, {"problem": 27, "code": "(fn my-pal [coll]\n  (if (> 2 (count coll)) true (if (= (first coll) (last coll)) (recur (drop-last (rest coll))) false )))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 27, "code": "(fn [x]\n  (loop [[firstR & restR] (reverse x) [first & rest] x]\n    (if (not= firstR first)\n      false\n      (do (if (empty? rest)\n            true\n            (recur restR rest))))))", "user": "5b5462b5e4b02d533a91bd20"}, {"problem": 27, "code": "(fn [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n    (recur (drop 1 (drop-last coll)))\n    false)))", "user": "5b338b23e4b025bcb146f33d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b549e61e4b02d533a91bd24"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= (clojure.string/reverse s) s)\n    (= (reverse s) s)))", "user": "59ed823ee4b0249b728207a1"}, {"problem": 27, "code": "#(= (seq % )(reverse %))", "user": "5b3dddf5e4b02d533a91bbf1"}, {"problem": 27, "code": "(fn  [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "591d57aee4b09b4ee5954c16"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 27, "code": "(fn [a-seq] (= (reverse a-seq) (seq a-seq)))", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b3169a6e4b025bcb146f303"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 27, "code": "#(loop [sq (seq %) length (count %) i 0]\n   (if (= (nth sq i) (nth sq (- (dec length) i)))\n     (if (> i (quot length 2))\n       true\n       (recur sq length (inc i)))\n     false))", "user": "5b199fd4e4b03cfeda66ecbd"}, {"problem": 27, "code": "#(= % (if (string? %) \n        (apply str (reverse %))\n        (reverse %)))", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 27, "code": "(fn pal [x]\n  (=\n   (clojure.string/join \"\" x)\n   (clojure.string/join \"\" (reverse x))\n  )\n)", "user": "5600bed5e4b04bb52996e170"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (if (= (reverse coll) coll)\n    true\n    (if (string? coll)\n      (= coll (clojure.string/join (reverse coll)))\n      false)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 27, "code": "(fn [s]\n  (cond\n   (empty? s) true\n   (= (first s) (last s)) (recur (rest (drop-last s)))\n   :else false))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 27, "code": "(fn [pal] \n  (if\n    (> 2 (count pal))\n    'true\n    (if\n      (= (first pal) (first (reverse pal)))\n      (recur (rest (reverse (rest pal))))\n      'false)\n    )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 27, "code": "(fn [ls]\n  (= (seq ls) (reverse ls)))", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 27, "code": "#(\n  loop [s 0 d (dec (count %))]\n   (if (< d 0)\n    true\n    (if (= (nth % s) (nth % d))\n     (recur (inc s) (dec d))\n     false\n    )\n   )\n)", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reduce (fn [acc x] (conj acc x)) '() s)))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 27, "code": "(fn [input] \n  (if (= java.lang.String (class input))\n    (= input (clojure.string/join \"\" (reverse input)))\n    (= input (reverse input))\n    ))", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b5b1b61e4b0c6492753e6a7"}, {"problem": 27, "code": "(fn [xs]\n  (if-not xs\n    true\n    (and (= (first xs) (last xs))\n         (recur (butlast (next xs))))))", "user": "573cb87fe4b05c31a32c0807"}, {"problem": 27, "code": "#(let [len (count %)\n       splted1 (if (even? len) (take (/ len 2) %)\n                \t\t\t  (take (int (Math/floor (/ len 2))) %))\n   \t   splted2 (if (even? len) (drop (/ len 2) %)\n                   \t\t\t  (drop (int (Math/ceil (/ len 2))) %))]\n   (= (reverse splted1) splted2))", "user": "576cd1fae4b0979f89651554"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 27, "code": "(fn [coll] (reduce 'and (map #(= (first %) (second %)) (partition 2 (interleave coll (reverse coll))))))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 27, "code": "#(if (string? %) (= (reverse (list %)) (list %)) (= (reverse %) %))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "54ecd6f1e4b024c67c0cf858"}, {"problem": 27, "code": "(fn [coll]\n  (cond\n    (string? coll)\n      (do\n        (= (clojure.string/join \"\" (into () coll))  coll))\n    :else\n    (do\n      (= (into () coll) coll)\n    )\n))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 27, "code": "(fn [x]\n  (let [xs (seq x)\n        sx (reverse xs)]\n    (= xs sx)))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b5fa65fe4b0c6492753e6f6"}, {"problem": 27, "code": "(fn [pl]\n  (let [pl-v (rseq (into [] pl))\n        pl-rev-v (into [] pl)]\n    ;;(println pl-v)\n    ;;(println pl-rev-v)\n    ;;((map = pl-v  pl-rev-v))\n    (every? true? (map = pl-v  pl-rev-v)))\n    )", "user": "5b69529be4b0c6492753e786"}, {"problem": 27, "code": "#(= (concat (reverse %)) \n    (concat %))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b6c164ce4b0c6492753e7b4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "5b41c077e4b02d533a91bc25"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 27, "code": "(fn [word] (let [dorw (reverse word)]\n             (if (string? word)\n               (= (apply str dorw) word)\n               (= dorw word))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))) )", "user": "5b6c6328e4b0c6492753e7b7"}, {"problem": 27, "code": "#(if (string? %)\n    (= (clojure.string/reverse %) %)\n    (= (reverse %) %))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 27, "code": "#((fn pal? [xs] (if (< (count xs) 2) true (if (= (first xs) (last xs)) (pal? (drop-last (rest xs))) false ))) %)", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 27, "code": "(fn Palindromo [x] (if (= (into () (seq x)) (seq x)) true false))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b757b39e4b047b03b2036cd"}, {"problem": 27, "code": "(fn [col]\n\t(let [half (quot (count col) 2)]\n\t      (= (take half col) (reverse (take-last half col)))))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 27, "code": "(fn [potpal]\n  (if (string? potpal) (= potpal (apply str (reverse potpal))) (= potpal (reverse potpal))))", "user": "5b7608c9e4b047b03b2036da"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 27, "code": "(fn palindrome? [string] \n  (if ( < (count string ) 2 ) true \n  \t(and\n     \t(= (first string) (last string))\n        (palindrome? ( drop-last ( drop 1 string))))))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s)\n     (reverse (seq s))))", "user": "590d3702e4b047aa04b199ff"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b782ec6e4b047b03b2036f9"}, {"problem": 27, "code": "#(if (= (reverse (vec %)) (vec %))\n    true\n    false)", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 27, "code": "(fn palindrome\n  [lst]\n  (let [f (first lst)\n        l (last lst)\n        lst (seq lst)]\n    (cond\n          (empty? lst) true\n          (= (count lst) 1) true\n          (= f l) (recur (->> lst (drop-last 1) (drop 1)))\n          (not= f l) false)))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b79481de4b047b03b203704"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b1ec003e4b03cfeda66ed13"}, {"problem": 27, "code": "(fn [xs]\n  (if (< (count xs) 2)\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (recur (-> xs (rest) (drop-last))))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5b796594e4b047b03b203705"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 27, "code": "#(loop [seq %] (if (<= (count seq) 1)\n  true\n  (if (= (first seq) (last seq))\n    (recur (-> seq (rest) (drop-last)))\n    false)))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 27, "code": "(fn [x]\n\t(if (> (count x) 1)\n\t\t(if (= (first x) (last x))\n\t\t\t(recur (rest (butlast x)))\n\t\t\tfalse\n\t\t)\n\t\ttrue\n\t))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 27, "code": "(fn palindrome?\n  [args]\n  (if (or (empty? args) (= 1 (count args)))\n    true\n    (do\n      (if (= (first args) (last args))\n        (recur (drop-last (drop 1 args)))\n        false))))", "user": "5b477969e4b02d533a91bc6f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 27, "code": "(fn is-palindrome? [coll]\n  (= (into '() coll) (reverse (into '() coll))))", "user": "5b478997e4b02d533a91bc71"}, {"problem": 27, "code": "(fn [sequents]\n  (= (seq sequents) (reverse sequents)))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5b4ff2abe4b02d533a91bcdf"}, {"problem": 27, "code": "(fn [coll]\n  (let [len (count coll)\n        head (take (/ len 2) coll)\n        tail (reverse (drop (int (/ len 2)) coll))]\n    (= head tail)))", "user": "5b4fef74e4b02d533a91bcde"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 27, "code": "#(if (sequential? %)\n    (= % (reverse %))\n    (= % (clojure.string/join (reverse %))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b7f381ae4b047b03b203769"}, {"problem": 27, "code": "(fn [x] (let [digit-sequence (seq x)] (= digit-sequence (reverse digit-sequence))))", "user": "5b7f2185e4b047b03b203767"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58e13b49e4b005f69f193c77"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true\n    (if (= (first coll) (last coll))\n      (palindrome? (butlast (rest coll)))\n      false)))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b7e2417e4b047b03b203755"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 27, "code": "#(every? true? (map = (reverse %) %))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5679c9f2e4b05957ce8c6191"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5b81139fe4b047b03b203782"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b78302ce4b047b03b2036fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b885821e4b047b03b20380b"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b8aa82ee4b0c0b3ffbd49b3"}, {"problem": 27, "code": "(fn palindrome? [seq]\n  (if (<= (count seq) 1)\n    true\n    (let [first (first seq)\n          last (last seq)]\n      (if (= first last)\n        (let [without-first (drop 1 seq)\n              without-last (remove (fn [elem]\n                                     (= elem last)) without-first)]\n          (palindrome? without-last))\n        false))))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 27, "code": "(fn f [s] \n  (or\n    (= s '())\n    (and (= (first s) (last s)) (f (rest (drop-last s))))\n  )\n)", "user": "5b8b326de4b0c0b3ffbd49b8"}, {"problem": 27, "code": "(fn [sq]\n  (if (string? sq)\n    (= sq (clojure.string/join (reverse sq)))\n    (= sq (reverse sq))))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 27, "code": "(fn palin \n   [args]\n   (and (= (first args) (last args))\n        (or (<= (count args) 1)\n            (palin (rest (butlast args))))))", "user": "5b86462de4b047b03b2037df"}, {"problem": 27, "code": ";#(= (cast (type %)(reverse %)) % )\n; ==> java.lang.ClassCastException: Cannot cast clojure.lang.PersistentList to java.lang.String\n\n#(= (reverse %) (reverse (reverse %)) )", "user": "5b819312e4b047b03b20378d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 27, "code": "#(loop [s %]\n     (if (nil? s)\n       true\n       (if (= (first s) (last s))\n         (recur (butlast (next s)))\n         false)))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b8f9a47e4b0c0b3ffbd49fe"}, {"problem": 27, "code": "(fn [col]\n  (let [f (fn [acc a b]\n            (and (= a b)\n                 acc))\n        get-even-half-size (fn [col]\n    \t\t\t\t\t\t\t\t\t\t\t\t (let [n (count col)]\n      \t\t\t\t\t\t\t\t\t\t\t\t\t(if (odd? n) \n      \t\t\t\t\t\t\t\t\t\t\t\t\t\t(/ (dec n) 2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(/ n 2))))\n\t\t\tn (get-even-half-size col)]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                \n(loop [a (take n col)\n       b (take n (reverse col))]\n    (println a b)\n   (if (empty? a)\n        true\n        (if (= (first a) (first b))\n           (recur (rest a) (rest b))\n           false)))))", "user": "51b1f2d4e4b02f8f128bb95f"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "5b8d03e4e4b0c0b3ffbd49cb"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x) ) (reverse x) ) )", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 27, "code": "(fn palindrome [word] (every? true? (map = word (reverse word))))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 27, "code": "(fn [x] (= (seq x) (-> x reverse seq)))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 27, "code": "(fn [input]\n  (if (coll? input)\n    (= input (reverse input))\n    (= input (clojure.string/join \"\" (reverse input)))))", "user": "5b71ee18e4b047b03b20369b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 27, "code": "#(loop [s %]\n   (cond\n    (< (count s) 2) true \n    (not= (first s) (last s)) false\n    :else (recur (rest (butlast s))) ))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 27, "code": "(fn [l]\n  (= (seq l) (reverse (seq l))))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 27, "code": "(fn polidrome [n]\n(if (= (reverse (reverse n)) (reverse n)) true false))", "user": "5b3a1c3ce4b02d533a91bbbd"}, {"problem": 27, "code": "(fn [s]\n  (let [s1 (seq s)\n        s2 (reverse s)]\n    (= s1 s2)))", "user": "5b96c1f3e4b0c0b3ffbd4a80"}, {"problem": 27, "code": "(fn [coleccion]\n           (loop [col coleccion]\n             (if (< (count col) 2)\n               true\n               (if (= (first col) (last col)) (recur (butlast (rest col)))false))))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 27, "code": "(fn [x] ( = (seq x) (reverse x)))", "user": "5709e9aee4b0b0fb43fd06b1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 27, "code": "(fn ff\n  [l]\n  (if (<= (count l) 1)\n    true\n    (and (= (first l) (last l)) (ff ((comp rest butlast) l)))))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 27, "code": "#(let [v (vec %)] (= v (reverse v)))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 27, "code": "#(= (rseq (vec %)) (vec %))", "user": "55938d28e4b0c79f6e1db93f"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5a059b33e4b01bb0ae8afdb5"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 27, "code": "(fn [c]\n  (loop [l 0 r (dec (count c))]\n      (if (>= l r) true\n        (if (not (= (nth c l) (nth c r))) false\n          (recur (inc l) (dec r))\n          ))))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b6428b3e4b0c6492753e73b"}, {"problem": 27, "code": "(fn [s] (let [ar (into [] s)] (= (reverse ar) ar)))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b97ea77e4b0c0b3ffbd4aa0"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (loop [si s]\n    (if (<= (count si) 1)\n        true\n        (if (= (first si) (last si))\n          (recur (drop 1 (drop-last si)))\n          false))))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 27, "code": "(fn ispal\n        [x]\n         (= (vec x) (vec (reverse x)))\n        )", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 27, "code": "#(loop [coll %]\n   (let [f (first coll)\n         l (last coll)\n         xs (rest (drop-last coll))]\n     (if (empty? coll)\n       true\n       (if (not= f l)\n         false\n         (recur xs)))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 27, "code": "(fn [seqOrString]\n      (if (string? seqOrString)\n        (= seqOrString (clojure.string/reverse seqOrString))\n        (= seqOrString (rseq (into [] seqOrString)))\n      )\n  )", "user": "5b98e5a7e4b0c0b3ffbd4abf"}, {"problem": 27, "code": "(fn [coll]\n  (let [sequence (seq coll)]\n    (= sequence (reverse sequence))))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 27, "code": "(fn pal? [s]\n  (if-not (= (first s) (last s))\n    false\n    (if (<= (count s) 2)\n      true\n      (pal? (drop-last (rest s))))))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 27, "code": "(fn [word] (= (apply list word) (apply list (reverse word))))", "user": "5ba55d85e4b0a20761a233fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "560152dee4b04bb52996e186"}, {"problem": 27, "code": "#(= % (cond\n         (string? %) (reduce str (reverse %))\n         :else (reverse %)))", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 27, "code": "(fn palindrome?\n  [c]\n  (loop [c c]\n    (if (not-empty c)\n      (if (apply = ((juxt first last) c))\n        (recur (-> c rest butlast))\n        false)\n      true)))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 27, "code": "#(let [adder (atom 0)\n       palindrome (atom true)]\n   (while (< @adder (- (/ (count %) 2) 1))\n     (let [begin (nth % @adder)\n           end (nth % (- (- (count %) 1) @adder))]\n       (reset! adder (+ 1 @adder))\n       (if (not (= begin end))\n         (reset! palindrome false))))\n   @palindrome)", "user": "5baa5f53e4b0a20761a23459"}, {"problem": 27, "code": "(fn is-palindrome? [s]\n  (cond (< (count s) 2) true\n        (and (> (count s) 1)\n             (= (first s) (last s)))\n        (is-palindrome? (drop 1 (drop-last s)))\n        :else false))", "user": "5a79ce7fe4b03baeef9276c8"}, {"problem": 27, "code": "(fn is_pal [s]\n\t(if (<= (count s) 1)\n\ttrue\n\t(if (= (first s) (last s))\n\t\t(is_pal (rest (reverse (rest (reverse s))))) \n\t\tfalse)))", "user": "5bad07eee4b0a20761a234a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 27, "code": "(fn [xs]\n  (let [rev (reverse xs)]\n    (if (string? xs)\n      (= xs (apply str rev))\n      (= xs rev))))", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 27, "code": "(fn [string]\n  (->> string\n      reverse\n      (apply str)\n      (= (apply str string))))", "user": "5ba19969e4b0a20761a233a4"}, {"problem": 27, "code": "(fn\n  [input]\n  (loop [orig input\n         rev (reverse input)]\n    (if (empty? orig)\n      true\n      (let [cur1 (first orig)\n            cur2 (first rev)]\n        (if (= cur1 cur2)\n          (recur (rest orig)\n                 (rest rev))\n          false)))))", "user": "5bb0fc08e4b0a20761a234f3"}, {"problem": 27, "code": "(fn is-palindrome [string]\n  (let [[left & middle-and-right] string\n        [right & middle] (reverse middle-and-right)]\n    (if (= nil middle)\n      true\n      (if (= left right)\n      \t(is-palindrome middle)\n        false\n        ))))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 27, "code": "(fn\n  [palindrome]\n  (if (string? palindrome)\n     (= palindrome (clojure.string/reverse palindrome))\n     (= palindrome (reverse palindrome))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 27, "code": "(fn is_pal [s]\n\t(if (<= (count s) 1)\n\ttrue\n\t(if (= (first s) (last s))\n\t\t(is_pal (rest (reverse (rest (reverse s))))) \n\t\tfalse)))", "user": "5b329773e4b025bcb146f322"}, {"problem": 27, "code": "#(= (rseq (vec %)) (seq %))", "user": "59deedace4b01968742fed84"}, {"problem": 27, "code": "#(if (string? %)\n  (= % (apply str (reverse %)))\n  (= % (reverse %)))", "user": "5baaf8fee4b0a20761a2346c"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 27, "code": "#(if (string? %)\n   \t (= % (apply str (reverse %)))\n   \t (= % (reverse %)))", "user": "5bb6166fe4b0a20761a23579"}, {"problem": 27, "code": "(fn[lst](every? true?(map = (reverse lst) lst)))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 27, "code": "(fn [lst]\n  (let [N (count lst)]\n    (if (< N 2)\n      true\n      (loop [i 0]\n        (cond\n          (> i (quot N 2))\n            true\n          (not= (nth lst i) (nth lst (dec (- N i))))\n            false\n          :default (recur (inc i))\n        )\n      )\n    )\n  )\n)", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 27, "code": "(fn rev? [coll]\n  (->> \n    (map vector coll (reverse coll))\n    (map #(apply = %))\n    (every? identity )))", "user": "5bb7c9e3e4b0a20761a235b0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 27, "code": "(fn palindrome_detector\n  [lst]\n  (loop [lst lst\n         result false]\n    (if (not= (first lst) (last lst)) result\n\n      (recur (concat (drop 1 lst) (take 1 lst)) true ) )))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 27, "code": "(fn palindrome\n  ;\"Returns true if the sequence is a palindrome\"\n  [lst]\n  (loop [lst lst\n         result false]\n    (if (not= (first lst) (last lst)) result\n      (recur (concat (drop 1 lst) (take 1 lst)) true))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 27, "code": "(fn [a]\n  (let [s (vec a)\n        c (count s)\n        l (quot c 2)\n        odd (mod c 2)\n        left (take l s)\n        right (reverse (drop (+ l odd) s))]\n    (= left right)))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 27, "code": "(fn [old & new]\n  (if (= (class old) java.lang.String)\n    (if (nil? new)\n      (recur old \"\")\n      (if (= (count old) (count new))\n        (if (= old new)\n          true\n          false\n        )\n        (recur old (clojure.string/join [(subs old (count new) (+ 1 (count new)) ) new] ) )\n      )\n    )    \n    (if (= old (reverse old))\n      true\n      false\n    )\n  )\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 27, "code": "#(=  (reverse %) (reverse  (reverse %)))", "user": "5bb9375fe4b0a20761a235d0"}, {"problem": 27, "code": "(fn palindrome\n  [lst]\n  (if (string? lst)\n    (if (= (apply str (reverse lst)) lst)\n      true\n      false)\n    (if (= (reverse lst) lst)\n      true\n      false)\n    ))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 27, "code": "(fn [thing]\n  (= (seq thing)\n     (reverse thing)))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 27, "code": "(fn [val]\n    (let [seq-val (seq val)]\n        (= seq-val (reverse seq-val))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 27, "code": "(fn [coll]\n    (let [first-half (fn first-half [coll] (take (int (java.lang.Math/ceil (/ (count coll) 2))) coll))]\n      (= (first-half coll) (first-half (reverse coll)))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 27, "code": "(fn [x]\n  (let [col (seq x)]\n    (= col (reverse col))))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 27, "code": "#(= (->> %1 reverse reverse) (reverse %1) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 27, "code": "#(= (reverse %) (if (string? %) (into () %) %))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 27, "code": "#(let [s (seq %)] (= (reverse s) s))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 27, "code": "(fn [s] (= (seq s) (seq (reverse s))))", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 27, "code": "#(cond (<= (count %) 1) true\n  \t\t:else (and (= (first %) (last %)) (recur (rest (butlast %)))  ))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 27, "code": "(fn [seq]\n  (= (apply list seq) (reverse seq)))\n\n;; Well, that's just dandy. There's a method called seq that returns a sequence of a collection.\n;; Makes it really silly that I used apply and list to accomplish the same thing. Probably should\n;; stop using a variable named 'seq'.\n;;\n;; Better implementation: anon fcn comparing sequence of thing to reverse sequence of thing.\n;;#((seq %) (reverse %))", "user": "5a1f85ffe4b0ff51aa4b3284"}, {"problem": 27, "code": "#(= (clojure.string/join (reverse %1)) (clojure.string/join %1))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 27, "code": "(fn palindrome? [theList]\n     (let [theListR (reverse theList)]\n       (reduce #(and %1 %2) (map = theList theListR))))", "user": "599e3677e4b0871e7608b809"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc63072e4b07a9b28b10089"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 27, "code": "#(= (take (quot (count %) 2) %)\n      (reverse (take-last (quot (count %) 2) %)))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (-> xs reverse seq)))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 27, "code": "(fn [s] \n  (= s\n    (if (string? s)\n      (apply str (reverse s))\n      (reverse s))))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 27, "code": "(fn palindrome?\n  [lst]\n  (if (> 2 (count lst))\n    true\n    (if (= (first lst) (last lst))\n      (palindrome? (rest (butlast lst)))\n      false)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 27, "code": "(fn [collection]\n  (let [col (seq collection)]\n    (= col (reverse col))))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 27, "code": "(fn [number]\n  (= (seq number) (reverse number)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 27, "code": "(fn [lst]\n  (if (= (reverse lst) (seq lst))\n    true\n    false))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 27, "code": "(fn [s]\n  (let [n (count s)\n        half (quot n 2)]\n      (= (take half s)\n         (reverse (drop (+ half (mod n 2)) s)))))", "user": "52a9c2efe4b0c58976d9ac50"}, {"problem": 27, "code": "#(true? (= (seq %1) (reverse (seq %1))))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5bcc9e7ae4b07a9b28b10114"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 27, "code": "(fn [coll]\n  (if (nil? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (next (drop-last coll)))\n      false)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 27, "code": "(fn f [xs]\n  (case (count xs)\n    0 true\n    1 true \n    (let [x (first xs)\n          y (last xs)\n          ys (rest (butlast xs))]\n      (and (= x y) (f ys)))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 27, "code": "(fn [pal] \n  (if (string? pal)\n    (= pal (clojure.string/reverse pal))\n\t(= pal (reverse pal))))", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 27, "code": "(fn is-palindrome? [input]\n  (let [input-seq (seq input)]\n    (cond\n      (< (count input-seq) 2) true\n      (= (first input-seq) (last input-seq))\n      (is-palindrome? (butlast (rest input-seq)))\n      :else false)))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 27, "code": "(fn [l]\n (loop [l l]\n  (and\n    \n    (= (first l) (last l))\n    (if (not (empty? l))\n      (recur (drop-last (drop 1 l)))\n      true\n    )\n  )\n )\n)", "user": "5bc8afb9e4b07a9b28b100c9"}, {"problem": 27, "code": "#(= (apply str (vec (reverse %))) (apply str (vec %)))", "user": "5bcdbfbde4b0e9689409ee04"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)] (if (= s (reverse s)) true false)))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 27, "code": "(fn isPal [lista]\n  (if (> (count lista) 0)\n    (and (= (first lista) (last lista)) (isPal (rest (take (- (count lista) 1) lista))))\n    true))", "user": "5ba6d337e4b0a20761a23414"}, {"problem": 27, "code": "#(if (= (reverse (seq %)) (seq %)) true false)", "user": "5bcd9a86e4b0e9689409edfe"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 27, "code": "#(let [half (/ (count %) 2)] (= (take half %) (reverse (take-last half %))))", "user": "5a64ce4ee4b0512ff01cd9a6"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5bd1b23ae4b0e9689409ee52"}, {"problem": 27, "code": "#(if (> (count %) 1)\n  (if (= (first %) (last %))\n    (recur (butlast (rest %)))\n    false)\n  true)", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 27, "code": "(fn [s]\n  (loop [s (vec s)]\n    (if (< (count s) 2)\n      true\n      (if (= (first s) (last s))\n        (recur (subvec s 1 (dec (count s))))\n        false))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 27, "code": "(fn [iter]\n  (loop [elements iter]\n    (if (not= (first elements) (last elements))\n              false\n              (if (<= (count elements) 1)\n                true\n                (recur (take (- (count elements) 2) (rest elements)))))))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5bd297fee4b0e9689409ee63"}, {"problem": 27, "code": "#(= (reverse %)  (seq %))", "user": "5bd5ede3e4b0ed4b8aab4ba3"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 27, "code": "#(loop [x %]\n  (let [f (first x)\n        l (last x)]\n   (if-not (empty? x)\n    (if (= f l)\n     (recur (-> x rest drop-last))\n     false)\n    true)))", "user": "577caf73e4b0c8d87281f6c6"}, {"problem": 27, "code": "(fn [x] (reduce #(and %1 %2) (map = x (reverse x))))", "user": "5bd648d9e4b0ed4b8aab4ba5"}, {"problem": 27, "code": "(fn [some-string]\n    (if (string? some-string)\n      (= some-string (apply str (reverse some-string)))\n      (= some-string (reverse some-string))\n      )\n    )", "user": "5bd71aefe4b0ed4b8aab4bb5"}, {"problem": 27, "code": "#(= (reverse (sequence %)) (sequence %))", "user": "5bb526d0e4b0a20761a2355e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 27, "code": "#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= % (reverse %)))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 27, "code": "(fn\n  [seq] \n    (=\n      (apply str (reverse seq))\n      (apply str seq)\n    )\n)", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 27, "code": "(fn PD [x]\n  (= (reverse (seq x)) (seq x)))", "user": "5bd6e161e4b0ed4b8aab4baf"}, {"problem": 27, "code": "(fn palindrome\n  [vs]\n  (let [\n        pairs (map = vs (reverse vs))]\n    (every? #(= true %) pairs)))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 27, "code": "(fn [data] (= (seq data) (reverse (seq data))))", "user": "52da20c7e4b09f7907dd13b3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 27, "code": "#(or (empty? %) (and (= (first %) (last %)) (recur (rest (drop-last %)))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= (apply concat (reverse x) x))(= (reverse x) x)))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 27, "code": "(fn palindrome [x](\n  cond\n  (= (count x) 0) true\n  (= (last x) (first x)) (palindrome (butlast (rest x)))\n  :else false))", "user": "5be1a134e4b0ed4b8aab4ca0"}, {"problem": 27, "code": "(fn __ [x] (if (string? x) (= (apply str (reverse x)) x) (= (reverse x) x)))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 27, "code": "(fn [a-seq]\n  (= (seq a-seq) (reverse a-seq))\n  \n  \n)", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 27, "code": "#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= % (reverse %)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 27, "code": "(fn [coll]\n    (every? identity (map =\n                          coll\n                          (reverse coll))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 27, "code": "(fn [coll] (= (apply str coll)  (apply str (reverse coll))))", "user": "5b9bfe0be4b0c0b3ffbd4b10"}, {"problem": 27, "code": "(fn Palindrome-Detector [x]\n  (loop [start 0 end (- (count x) 1)]\n    (if (and (> end start) (= (nth x start) (nth x end)))\n        (recur (inc start) (dec end))\n        (if (= (nth x start) (nth x end)) true false)\n      )))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 27, "code": "(fn [x] (= (into (list) (seq x)) (seq x)))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)) )", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5bc232b7e4b07a9b28b10026"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 27, "code": "#(= (seq % ) (reverse %))", "user": "5b93eb1ae4b0c0b3ffbd4a52"}, {"problem": 27, "code": ";(fn [s] \n;  (if (string? s) \n;   (do\n;    (let [backward (apply str(reverse s))]\n;      (= backward s)\n;    )\n;   )\n;   (do \n;    (let [backward (reverse s)]\n;      (= backward s)\n;    )\n;   )\n;  )\n;)\n\n#(= (seq %) (reverse (seq %)))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 27, "code": "(fn [s1] (= (reverse (seq s1)) (seq s1)))", "user": "591f9a1fe4b09b4ee5954c4f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 27, "code": "#(= (apply list %) (apply list (reverse %)))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 27, "code": "(fn pal [l]\n  (if (< (count l) 2) true\n    (if (not= (first l) (last l)) false\n      (pal ((comp rest reverse rest) l))\n      )\n    )\n  )", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 27, "code": "(fn [x]\n  (case (count x)\n            0 true\n                      1 true\n                              (and (= (last x) (first x)) (recur (drop 1 (drop-last 1 x))))\n                                    )\n                                      )", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 27, "code": "(fn [xs]\n  (let [ys (seq xs)]\n    (= ys (reverse ys))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 27, "code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 27, "code": "(fn pal\n  ([xs]\n   (cond (empty? xs) true\n         (= (first xs) (last xs)) (recur (butlast (rest xs)))\n         :else false)))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5bf45b4ce4b0b326c961d88c"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (every?\n    (fn [[a b]] (= a b))\n    (map vector coll (reverse coll))))", "user": "4eb9d8e0535dfed6da9c6d60"}, {"problem": 27, "code": "(fn palindrome\n  [x]\n  (let [p (into [](seq x)) len (count p)]\n    (loop [i 0]\n      (if(= (nth p i) (nth p (- len (+ 1 i))))\n        (if (= (mod len 2) i)\n          true\n          (recur (inc i)))\n        false))))", "user": "5bd9eac4e4b0ed4b8aab4bfc"}, {"problem": 27, "code": "(fn isPal? [arr]\n  (if (= 1 (count arr))\n    true\n    (if (= (first arr) (last arr))\n      (if (= 2 (count arr))\n        true\n        (isPal? (-> arr (rest) (drop-last)))\n      )\n      false\n    )\n  )\n)", "user": "5bf2cf8be4b0a6d31fed217c"}, {"problem": 27, "code": "(fn my-pall [x]\n         (cond\n           (= true (<= (count x) 1)) true\n           (= (first x) (last x))\n           (do\n             (println x)\n             (my-pall(rest (drop-last x))))\n           :else false))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 27, "code": "(fn [coll]\n  (if (= String (type coll))\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 27, "code": "(fn [x]\n                             (= x (if (= (class x) java.lang.String)\n                                                (apply str (reverse x))\n                                                (reverse x))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "51301929e4b0e2531888cbde"}, {"problem": 27, "code": "(fn [x] (if (string? x) \n          (= (clojure.string/reverse x) x)\n          (= (reverse x) x)))", "user": "5bf5d3aee4b0bdcf453d159c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 27, "code": "(fn pal [x] (= (seq x) (reverse x)))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 27, "code": ";; My first answer: make a pairs of given seq and reversed-seq, check each elements is same, and compare length of it.\n;(fn [ls] (= (count ls) \n;            (count (filter #(= (first %) (last %)) \n;                           ;; make a seq of pairs of given seq and reversed-seq\n;                           (map vector (reverse ls) ls))))) \n\n;; Answer for more smart people.\n\n#(= (seq %) (reverse %))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bf872e0e4b0bdcf453d15b7"}, {"problem": 27, "code": "(fn [values]\n  (= (reverse (seq values)) (seq values)))", "user": "5bfaab50e4b0bdcf453d15ce"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll]\n    (if (empty? c) true\n      (if (= (first c) (last c)) \n        (recur ((comp drop-last rest) c))\n        false)\n      )))", "user": "5bfbf75ee4b0bdcf453d15df"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "55955c0be4b0c79f6e1db967"}, {"problem": 27, "code": "(fn palindrome? [x]\n    (if (< (count x) 2)\n        true\n        (if (= (first x) (last x))\n            (palindrome? (drop-last (drop 1 x)))\n            false\n        )\n    ))", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 27, "code": "(\n  fn foo[x]\n  (if (or (= (count x) 1) (= (count x) 0))\n  (\n    do\n    true\n  )\n  (do\n \n    (let [p (= (first x) (last x))]\n  \n  (and p (foo (drop-last 1 (drop 1 x)))))\n  )\n  )\n)", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "51545663e4b084ca81ee2e18"}, {"problem": 27, "code": "(fn [arg]\n  (= (reverse arg) (reverse (reverse arg))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 27, "code": "(fn [x]\n  (let [\n    half (quot (count x) 2)\n    offset (rem (count x) 2)]\n    (= \n      (take half x) \n      (reverse (drop (+ half offset) x))\n    )\n  )\n)", "user": "5bfc82cfe4b0bdcf453d15f0"}, {"problem": 27, "code": "#(= \n  (reverse (apply list %))\n  (apply list %))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 27, "code": "(fn [s] \n  (=(seq s)(reverse s)))", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5bff87fbe4b0bdcf453d162c"}, {"problem": 27, "code": "#(loop [coll %]\n             (if (> 2 (count coll))\n               true\n               (if (= (first coll) (last coll))\n                 (recur (butlast (rest coll)))\n                 false)))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 27, "code": "(fn [sequence]\n  (let [v (vec sequence)\n        l (count v)]\n    (if (odd? l)\n      (let [m (inc (/ l 2))\n            a (subvec v 0 m)\n            b (subvec v (dec m))]\n        (if (= a (reverse b))\n         true\n         false))\n      (let [m (/ l 2)\n            a (subvec v 0 m)\n            b (subvec v m)]\n        (if (= a (reverse b))\n          true\n          false)))))", "user": "5b8162d0e4b047b03b20378b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59cfc120e4b0ef0a1e9b5b73"}, {"problem": 27, "code": "#(= (reverse %) (apply list %))", "user": "51eead15e4b0871fa145d98a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bb919e1e4b0a20761a235ca"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 27, "code": "(fn palin \n  [x]\n  (= (seq x) (reverse x)))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 27, "code": "#(= (apply str %)(apply str (reverse %)))", "user": "5bfc082be4b0bdcf453d15e1"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 27, "code": "(fn [a] (= (reverse a)  (seq a)))", "user": "58273e82e4b051871117bf1b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "5c02c9a8e4b0bdcf453d1667"}, {"problem": 27, "code": "(fn [x]\n  (let [rx (reverse x)]\n    (if (string? x)\n      (= x (apply str rx))\n      (= x rx)\n      )\n    )\n  )", "user": "5c083a1ae4b0bdcf453d16dd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c0be355e4b0bdcf453d1727"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5c0e6e90e4b01240ff567141"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b5785c7e4b02d533a91bd5b"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "5bfe8821e4b0bdcf453d160f"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (clojure.string/join (reverse x)) x)\n    (= (reverse x) x)))", "user": "5c10e7a2e4b01240ff56716b"}, {"problem": 27, "code": "#(= (reverse %) (reverse(reverse %)))", "user": "5c1229d5e4b01240ff567188"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 27, "code": "(fn [coll] \n  (if (string? coll) \n      (= (apply str (reverse coll)) coll) \n      (= (reverse coll) coll)))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5c113df2e4b01240ff56716f"}, {"problem": 27, "code": "(fn palin [lis] (loop [li lis]\n\n                    (if (empty? li) true\n                                  (if (not (= (first li) (last li))) false\n                                                                     (let [l1-without-first (drop 1 li)]\n                                                                       (println li)\n                                                                       (recur (take (- (count l1-without-first) 1) l1-without-first)\n                                                                              )))\n\n                                  )))", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 27, "code": "#(let [sq (seq %)] (or (nil? sq) (= sq (reverse %))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4f6a946ae4b07046d9f4ef9f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bfd0b72e4b0bdcf453d15f6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c194d90e4b01240ff5671f6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n    (= (clojure.string/reverse xs) xs)\n\t(= (reverse xs) xs)\n))\n\n;;#(= (seq %) (reverse (seq %)))", "user": "5c1b82bce4b01240ff567211"}, {"problem": 27, "code": "(fn [x]\n  (let [z (map vector x (reverse x))]\n    (every? #(apply = %) z)))", "user": "5c1ca3dbe4b0efcb0b05b23b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 27, "code": "(fn [coll] (if (string? coll) (= (apply str (reverse coll)) coll) (= (reverse coll) coll)))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 27, "code": "(fn [col] (= (vec col) (reverse (vec col))))", "user": "5c1176a4e4b01240ff567179"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c1d6dbee4b0efcb0b05b249"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5c18f3f6e4b01240ff5671f2"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 27, "code": "(fn [s] (= s (let [reversed (reverse s)]\n           (if (string? s)\n             (apply str reversed)\n             reversed))))", "user": "5c1fe56ae4b07e362c23056e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 27, "code": "(fn palindrome?\n[string]\n(loop [current-string string]\n(if (> (count current-string) 1)\n  (if (= (first current-string) (-> current-string (reverse) (first)))\n    (recur (-> current-string (rest) (reverse) (rest)))\n    false\n  )\n  true\n))\n)", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 27, "code": "#( = (seq %) (reverse (seq %)))", "user": "5a1e7e98e4b0ff51aa4b326d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 27, "code": "(fn [n] \n  (loop [n n\n         len (quot (count n) 2)\n         acc true]\n    (cond\n     (not acc) acc\n     (= len 1) (= (first n) (last n))\n     :else (recur (rest (drop-last n)) (dec len) (= (first n) (last n)))\n     )\n   \n   \n   ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 27, "code": "(fn isPalindrome\n  [x]\n  (loop [i 0 j (dec (count x))]\n  (if (> i j)\n    true\n    (if (= (nth x i) (nth x j))\n      (recur (inc i) (dec j))\n      false)))\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 27, "code": "(fn [xs] (reduce 'and (map = xs (reverse xs))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 27, "code": "(fn palindrom [xs]\n  (let [s (seq xs)\n        r (reverse s)]\n    (= s r)))", "user": "5776903ee4b0979f8965163b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "582c986ee4b051871117bf9b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c2195dce4b07e362c230580"}, {"problem": 27, "code": "(fn t[s] \n  (if(<= (count s) 1)\n    true\n    (if (= (first s) (first (reverse s)))\n      (t (-> s\n          (rest)\n          (reverse)\n          (rest)\n          (reverse)))\n      false)))", "user": "5c22c861e4b07e362c230590"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 27, "code": "#(= % \n    (if (string? %)\n      (apply str (reverse %)) \n      (reverse %) \n    )\n )", "user": "5c0fedade4b01240ff567157"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 27, "code": "#(loop [[h & r] %]\n  (let [t (last r), middle (butlast r)]\n    (cond\n      (nil? h) true\n      (nil? r) true\n      (not= h t) false\n      :else (recur middle))))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 27, "code": "(fn is-palindrome [input]\n  (= (reverse input) (seq input)))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 27, "code": "(fn [input-seq]\n  (loop [[first & rest] input-seq\n         rev []]\n    (println rev)\n    (if (nil? first)\n      (= (into () input-seq) rev)\n      (recur rest (conj rev first)))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 27, "code": "(fn [s]\n  (cond\n   (<= (count s) 1) true\n   (not (= (first s) (last s))) false\n   :else (recur (drop-last (rest s)))\n   ))", "user": "5c284f14e4b07e362c2305d6"}, {"problem": 27, "code": "(fn [coll] (loop [first 0\n                  last (- (count coll) 1)]\n             (if (< first last)\n               (if-not (= first last)\n                 (if (= (get (vec coll) first) (get (vec coll) last)) (recur (inc first) (dec last)) false)\n                 true)\n               true\n               )\n             ))", "user": "5c2692d2e4b07e362c2305c2"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 27, "code": "(fn [n]\n  (= (reverse n)\n     (seq n)))", "user": "5c272a4de4b07e362c2305ca"}, {"problem": 27, "code": "(fn ololo [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))\n  )\n)", "user": "5b113f20e4b0cc2b61a3be2c"}, {"problem": 27, "code": "(fn foo [x]\n  (= (seq x) (reverse x))\n  )", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c1e96dde4b0efcb0b05b256"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "5bfd9bd6e4b0bdcf453d1601"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 27, "code": "(fn palin? [s]\n  (let [ss (seq s)]\n    (= ss (reverse ss))))", "user": "5944abd0e4b0b03edd0057af"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5c250900e4b07e362c2305ab"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s]\n   (cond (< (count s) 2)\n         true\n         (= (first s) (last s))\n         (recur (drop-last (rest s)))\n         :else\n         false)))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c35046fe4b0d62ef62d9f5f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 27, "code": "(fn pialndrome [x]\n  (let [length (count x)]\n    (loop [n 0]\n      (cond\n        (= n length) true\n        (not= (nth x n) (nth x (- length n 1))) false\n        :else (recur (inc n))))))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c33bdf3e4b0d62ef62d9f49"}, {"problem": 27, "code": "(fn \n  [ls] \n  (loop \n    [l ls] \n    (if (= (count l) 0)\n      true\n      (if (= (first l) (last l))\n        (recur (rest (butlast l)))\n        false))))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c014aaae4b0bdcf453d1649"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse (reverse coll)) (reverse coll)))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 27, "code": "(fn [xs]\n    (let [ys (reverse xs)]\n      (= (seq xs) ys)))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 27, "code": "(fn pialndrome [x]\n  (let [length (count x)]\n    (loop [n 0]\n      (cond\n        (= n length) true\n        (not= (nth x n) (nth x (- length n 1))) false\n        :else (recur (inc n))))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 27, "code": "(fn [number]\n  (= (seq number) (reverse number)))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 27, "code": "(fn [my-seq]\n  (let [result (reduce conj ()  my-seq)]\n    (if (string? my-seq)\n      (= (apply str result) my-seq)\n      (= result my-seq))))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 27, "code": "(fn [c]\n  (let [c-seq (seq c)]\n    (= (reverse c-seq) c-seq)))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 27, "code": "(fn [x]\n   (loop [x x]\n       (if (> 2 (count x))\n    true\n\n     (if (= (first x) (last x))\n       (recur (rest (drop-last x)))\n       false))))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 27, "code": "(fn [p] (= (reverse p) (seq p)))", "user": "5c395c65e4b0d62ef62d9f8a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 27, "code": "(fn palindrome [sequence] (= (reverse sequence ) (seq sequence)))", "user": "5bc9fb3be4b07a9b28b100e3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "53b0750fe4b047364c044483"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 27, "code": "(fn fu\n  [x]\n  (if (odd? (count x))\n    (= (take (/ (dec (count x)) 2) (seq x))\n       (reverse (drop (/ (count x) 2) (seq x))))\n    (= (take (/ (count x) 2) (seq x))\n       (reverse (drop (/ (count x) 2) (seq x))))))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 27, "code": "#(= (clojure.string/join \"\" %) (clojure.string/join \"\" (reverse %)))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 27, "code": "(comp \n       #(= (rseq %) %)\n vec)", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "568cb90fe4b0dcc4269f40b9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 27, "code": "(fn [x]\n  (=\n   (loop [cur x acc '()]\n     (if (zero? (count cur))\n       acc\n       (recur (rest cur) (concat acc (list (first cur))))\n     )\n   )\n   (loop [cur x acc '()]\n     (if (zero? (count cur))\n       acc\n       (recur (butlast cur) (concat acc (list (last cur))))\n     )\n   )\n )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 27, "code": "#(= (apply str (apply conj '() %)) (apply str %))", "user": "5c41adfce4b08cd430848ec8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bf31833e4b0a6d31fed218a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c3fab3de4b08cd430848e9e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5342702ce4b00652c8746edb"}, {"problem": 27, "code": "(fn [s] (= (vec s) (vec (into () s))))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 27, "code": "(fn [x]\n  (= (apply str x) (apply str (reverse x))))", "user": "5c4750bfe4b0e06e1360a3ad"}, {"problem": 27, "code": "(fn [s]\n  (=(first s)(last s)))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 27, "code": "#(= (if (= (type %) java.lang.String) (clojure.string/reverse %) (reverse %)) %)", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 27, "code": "(fn pl [x]\n  (if (or (= (count x) 0)\n          (= (count x) 1)\n          )\n    true\n    (if (= (first x) (last x))\n      (and true (pl (butlast (rest x))))\n      false\n      )\n    )\n   )", "user": "5c4a08c5e4b0f9f7a8770e4f"}, {"problem": 27, "code": "(fn [xs] (= (apply str xs) (apply str (reverse xs))))", "user": "5c376638e4b0d62ef62d9f74"}, {"problem": 27, "code": "(fn pal [coll]\n  (cond\n    (= (or 0 1) (count coll)) \n   \t\ttrue\n   \t(= (last coll) (first coll)) \n   \t\t(pal (drop 1 (drop-last coll)))\n   \t:else \n   \t\tfalse))", "user": "5c47149ae4b0e06e1360a3a8"}, {"problem": 27, "code": "(fn [xs] ((fn [sequence] \n      (= (reverse sequence) sequence)\n  )(into '() xs)) \n)", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c3ee9bde4b08cd430848e8b"}, {"problem": 27, "code": "#(loop [s %]\n  (if (not= (first s) (last s))\n    false\n    (if (> (count s) 3)\n      (recur (take (- (count s) 2) (rest s)))\n      true)))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5c46e6dde4b0e06e1360a3a7"}, {"problem": 27, "code": "(fn palindrome [coll] (= (seq coll) (reverse coll)))", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5c46bdbde4b0e06e1360a3a4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 27, "code": "(fn a [xs]\n  (let [l (first xs)\n        r (last xs)\n        m (rest (butlast xs))]\n    (if (= l r)\n      (if (empty? m)\n        true\n        (a m))\n      false)))", "user": "5c50154be4b0f9f7a8770ebc"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 27, "code": "(fn [coll]\n  (let [reverse-coll (reverse coll)]\n    (if (string? coll)\n      (= (apply str reverse-coll) coll)\n      (= reverse-coll coll))))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 27, "code": "(fn [coll]\n  (let [s (seq coll)]\n    (= s (reverse s))))", "user": "5c504d8ae4b0f9f7a8770ec1"}, {"problem": 27, "code": "(fn palindrome? [coll] \n  (= (seq coll) (reverse coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 27, "code": "(fn [s]\n  (=\n    (apply list s)  \n    (reverse s)))", "user": "5c4fd807e4b0f9f7a8770eb5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 27, "code": "#(let [argmap (zipmap (range (count %)) %)\n        argcount (count %)]\n    (loop [index 0\n           result true]\n      (if (and result (< index (/ argcount 2)))\n        (recur (inc index) (= (get argmap index) (get argmap (- (- argcount index) 1)))) result)))", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 27, "code": "(fn [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 27, "code": "(fn p [x] (= (seq x) (reverse (seq x))))", "user": "5c4e2b82e4b0f9f7a8770e93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c50de36e4b0fb8c5ffd99bc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 27, "code": "#(let [x (if (string? %) (clojure.string/reverse %) (reverse %))] (= x %))", "user": "5c478ba2e4b0e06e1360a3b2"}, {"problem": 27, "code": "(fn pal [x] (if (<= (count x) 1) true (if-not (= (first x) (last x)) false (pal (butlast (rest x))))))", "user": "5c51f60be4b0fb8c5ffd99d4"}, {"problem": 27, "code": "#(= (reverse (reverse %1))  (reverse %1))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 27, "code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 27, "code": "(fn [coll] (reduce #(and %1 %2) true (map = coll (reverse coll))))", "user": "5c534431e4b0fb8c5ffd99f2"}, {"problem": 27, "code": "#(let [r (reverse %)] (= r (seq %)))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (reverse (reverse coll))))", "user": "51cf0993e4b0e42293a2256a"}, {"problem": 27, "code": "(fn [x] (= (reverse (vec x)) (vec x)))", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 27, "code": "#(= (into () %) (reverse (into () %) ))", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 27, "code": "#(= (take-last (count %) %) (reverse %))", "user": "5c597b42e4b01df32ab7325b"}, {"problem": 27, "code": "(fn palindrom [pln]\n   (let [x (vec pln) y (vec (reverse pln))\n         z (for [i (range (count x))\n                 :let [z (= (get x i) (get y i))]\n                 :while (false? z)\n                 ]\n             z\n             )\n         ]\n     (empty? z)\n     )\n   )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 27, "code": "(fn [input] (= (vec input) (reverse input)))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c58736be4b01df32ab73247"}, {"problem": 27, "code": "(fn pd [coll]\n  (= (reverse coll) (reverse (reverse coll)))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 27, "code": "(fn [coll] \n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "5c5bee9be4b01df32ab73294"}, {"problem": 27, "code": "(fn palindrome? [sseq]\n  (let [as-seq (seq sseq)] \n    (cond\n      (not= (first as-seq) (last as-seq)) false\n      (or (= 1 (count as-seq)) (empty? as-seq)) true\n      :else (palindrome? (next (butlast as-seq))))))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 27, "code": "#(= (reduce str %) (reduce str (reverse %)))", "user": "5adf7a7ae4b0837691e92c37"}, {"problem": 27, "code": "(fn [col]\n  (= (vec col) (vec (reverse col))))", "user": "5a89997de4b05369db4d24c4"}, {"problem": 27, "code": "#(or (empty? %)\n      (let [head (first %)\n            last-element (last %)]\n        (if (= head last-element)\n          (recur (-> % rest drop-last))\n          false)))", "user": "5c61ce28e4b0fca0c162263b"}, {"problem": 27, "code": "(fn [p]\n  (= p (-> p\n           reverse\n           (#(if (string? p)\n              (clojure.string/join %)\n              (identity %))))))", "user": "592883f1e4b072a2710fceea"}, {"problem": 27, "code": "(fn [coll]\n   (cond\n    (= (class coll) java.lang.String)\n      (= coll (clojure.string/reverse coll))\n    :else (= coll (reverse coll))))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c5a725ce4b01df32ab73273"}, {"problem": 27, "code": "#(loop [a % b (reverse %)]\n   (cond (and (empty? a) (empty? b)) true\n         (or (empty? a) (empty? b)) false\n         (not= (first a) (first b)) false\n         :else (recur (rest a) (rest b))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 27, "code": "(fn\n  [x]\n  (= (reverse x) (seq x)))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 27, "code": "(fn palindrome\n  [my-seq]\n  (loop [i 0 j (- (count my-seq) 1)]\n      (cond \n      (>= i j) true  \n      (not= (nth my-seq i) (nth my-seq j)) false\n      :else (recur (inc i) (dec j)))))", "user": "5c5e7049e4b0fca0c1622607"}, {"problem": 27, "code": "(fn is-palindrome [sq]\n  (loop [partial-sq sq rev '()]\n    (if (empty? partial-sq)\n      (= rev (seq sq))\n      (recur (rest partial-sq) (conj rev (first partial-sq))))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "5ae7ed7ce4b0837691e92cb0"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 27, "code": "(fn palindrome [seq]\n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 27, "code": "#(loop [xs %] (cond (not= (first xs) (last xs)) false (> (/ (count xs) 2) 1) (recur (butlast (rest xs))) :else true))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5900ad0ce4b0438e51c2d028"}, {"problem": 27, "code": "(fn x [data] \n  (let [v (vec data)]\n    (= (reverse v) v)))", "user": "5c68f931e4b0fca0c16226ea"}, {"problem": 27, "code": "(fn [coll]\n  (let [reversed-coll (if (string? coll)\n                        (clojure.string/reverse coll)\n                        (reverse coll))]\n    (= coll reversed-coll)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5c5dddafe4b01df32ab732bb"}, {"problem": 27, "code": "(fn\n  [x]\n  (loop [coll x]\n    (cond\n     (empty? coll) true\n     (not= (first coll) (last coll)) false\n     :else (recur (rest (drop-last coll)))\n     )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 27, "code": "(fn is-palindrome\n   [seq]\n   (if (<= (count seq) 1)\n     true\n     (and (= (first seq) (last seq)) (is-palindrome (drop 1 (drop-last 1 seq))))))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 27, "code": "(fn eq\n  [x]\n  (= (apply str (reverse x)) (apply str x)))", "user": "5c37d6fce4b0d62ef62d9f7b"}, {"problem": 27, "code": "(fn [lst] (let [l (count lst) a (int (Math/floor (/ l 2))) b (int (Math/ceil (/ l 2)))] (= (take a lst) (reverse (drop b lst)))) )", "user": "5b507222e4b02d533a91bce7"}, {"problem": 27, "code": "(fn [x]\n(if (empty? x) \n  true\n  (and (= (first x) (last x)) (recur (rest (drop-last x))) ))\n  )", "user": "5c6f0755e4b0fca0c162275d"}, {"problem": 27, "code": "(fn[s] (= (seq s) (reverse s)))", "user": "5c6cf34fe4b0fca0c1622732"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 27, "code": "#(= (apply str %1) (apply str (reverse %1)))", "user": "5c712fcce4b0fca0c162278e"}, {"problem": 27, "code": "(fn [x](= (seq x) (reverse x)))", "user": "55326aede4b09218d5f44f7c"}, {"problem": 27, "code": "#(= (seq %) (into '() %))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 27, "code": "(fn [p]\n  (reduce #(and %1 %2) (map #(= %1 %2) p (reverse p))))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "58c50b3de4b021aa9917ed33"}, {"problem": 27, "code": "(fn [s]\n  (= s\n     (if (instance? String s)\n     \t(reduce str (reverse s))\n     \t(reverse s))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c619df4e4b0fca0c1622637"}, {"problem": 27, "code": "(fn [c]\n  (let [half (quot (count c) 2)]\n    (= (take half c) (reverse (take-last half c)))))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 27, "code": "(fn pol [list] (= (into [] list) (reduce conj () list)))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 27, "code": "(fn [l]\n  (cond (string? l)\n        (= l (apply str (reverse l)))\n        :else (= l (reverse l))))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5c755e56e4b0fca0c16227d9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5c6e6df2e4b0fca0c162274d"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (clojure.string/join (reverse %)))\n   (= % (reverse %)))", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 27, "code": "(fn \n  [coll]\n  (cond\n    (= (first coll) nil) true\n    (= (count coll) 1 ) true\n    (= (first coll) (last coll)) (recur (reverse (rest (reverse (rest coll)))) )\n    :else false\n    )\n)", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse (seq lst))))", "user": "5c62f1cde4b0fca0c1622655"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 27, "code": "(fn [pattern]\n  (= (seq pattern) (reverse pattern)))", "user": "5c189373e4b01240ff5671ee"}, {"problem": 27, "code": "(fn [input-seq] (= (seq input-seq) (reverse input-seq)))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 27, "code": "(fn palindrome? [s] (cond\n                     (#{0 1} (count s)) true\n                     :else (and (= (first s) (last s)) (palindrome? (drop-last 1 (rest s))))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 27, "code": "(fn palin [s]\n  (loop [f 0 l (- (count s) 1)]\n    (if (>= f l)\n      true\n      (if (not= (nth s f) (nth s l))\n        false\n        (recur (inc f) (dec l))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 27, "code": "(fn [lst] (reduce #(and %1 %2) (map #(= %1 %2)lst (reverse lst))))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 27, "code": "(fn pali [sq]\n  (if (> 2 (count sq))\n    true\n    (if (= (first sq) (last sq))\n      (pali (rest (drop-last sq))) false)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 27, "code": "#(= %\n    (if (string? %)\n      (apply str (reverse %))\n      (reverse %)))", "user": "5c7d2cc9e4b0d597f478caa2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59342e52e4b072a2710fd06b"}, {"problem": 27, "code": "(fn pal [l]\n  (if (< (count l) 2)\n    true\n    (if (= (first l) (last l))\n      (pal (rest (reverse (rest l))))\n      false)))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 27, "code": "(fn [sq] (let [n (long (/ (count sq) 2))\n               fwd (take n sq)\n               bkwd (take n (reverse sq))]\n           (= fwd bkwd)))", "user": "5839efeae4b089d5ab817d47"}, {"problem": 27, "code": "(fn [v]\n   (let [n (quot (count (seq v)) 2)]\n     (= (take n v) (take n (reverse v)))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 27, "code": "(fn [word] (= (vec word) (reverse (vec word))))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5c8025d6e4b0c8042a70ce11"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c811a04e4b0c8042a70ce20"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (empty? coll)\n     true\n   \t(if (= (first coll) (last coll))\n     (recur (drop 1 (drop-last coll)))\n     false)))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 27, "code": "(fn [x] (if (= (seq x) (reverse (seq x))) true false))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5c838796e4b0c8042a70ce50"}, {"problem": 27, "code": "(fn [maybe-pali]\n  (let [s (seq maybe-pali)]\n    (= s (reverse s))))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 27, "code": "(fn palindrome\n  [lst]\n  (let [lst     lst\n        revlst  (reverse lst)\n        result  (filter false? (map (fn [x y] (if (= x y) true false)) lst revlst))\n        result2 (if (empty? result) true false)]\n    result2))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c805d45e4b0c8042a70ce13"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "56ee905be4b04a395b9a044f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c832691e4b0c8042a70ce48"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 27, "code": "#(= (reverse (into [] %1)) (into [] %1))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5c815c33e4b0c8042a70ce24"}, {"problem": 27, "code": "(fn lstPal [x] (= (seq x) (reverse (seq x))))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 27, "code": "#(loop [arr %] (if (empty? arr) true (if (= (first arr) (last arr)) (recur (drop-last (drop 1 arr))) false)))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 27, "code": "#(loop [cur true arg %1]\n    (if (<= (count arg) 1)\n      (and true cur)\n      (recur (= (first arg) (last arg)) (rest (drop-last arg)))))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 27, "code": ";; (fn pali [xs]\n;;   (case (count xs)\n;;   0 true\n;;   1 true\n;;   (and (= (first xs) (last xs)) (pali (drop-last (drop 1 xs))))))\n\n#(= (reverse %) (seq %))", "user": "5c886a89e4b048ec896c592b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 27, "code": "(fn [s] (if (= (seq s) (reverse s)) true false))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 27, "code": "(fn [the-seq]\n  (= (seq the-seq) (reverse the-seq)))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 27, "code": "(fn palindrome-checker\n  [sequ]\n  (let [seqlen (count sequ)]\n    (let [halfw (if (even? seqlen) (/ seqlen 2) (/ (- seqlen 1) 2))]\n      (loop [i 0]\n        (if (< i halfw)\n          (if (= (nth sequ i) (nth sequ (- seqlen 1 i)))\n            (recur (inc i))\n            false\n          )\n          true\n        )\n      )\n    )\n  )\n)", "user": "5c8b6c64e4b048ec896c596f"}, {"problem": 27, "code": "(fn pal-detect [c]\n  (= (reverse c) (reverse (reverse c))))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs) )\n  )", "user": "5c896f46e4b048ec896c5940"}, {"problem": 27, "code": "(fn [x]\n  \n  (loop [i 0 x x y (reverse x)]\n    (println y)\n    (if (not-empty x)\n\n      (do\n        (if (= (first x) (first y))\n          (recur (inc i)(rest x) (rest y))\n          false\n          )\n\n        )\n      true\n    ))\n  )", "user": "5c8bc8b4e4b048ec896c5978"}, {"problem": 27, "code": "(fn palindrome [x] (= (seq x) (reverse (seq x))))", "user": "5c8aa1b5e4b048ec896c5959"}, {"problem": 27, "code": "(fn foo [args]\n  (if (<= (count args) 1)\n    true\n    (if (= (first args) (last args))\n      (foo (rest (butlast args)))\n      false)))", "user": "5c92b9e6e4b048ec896c5a0d"}, {"problem": 27, "code": "(fn pal [a]\n(loop\n  [b a]\n  (if (empty? (rest b))\n      true\n      (if (not= (first b) (last b))\n          false\n          (recur (rest (reverse (rest (reverse b)))))))))", "user": "5c8fa41be4b048ec896c59c1"}, {"problem": 27, "code": "(fn palindrome?\n  ([coll]\n   (cond\n     (nil? coll) true\n     (empty? coll) true\n     (= (count coll) 1) true\n     :else (palindrome? coll (reverse coll)))\n   )\n  ([coll revcoll]\n   (if (< (count coll) 2)\n     (palindrome? coll)\n     (if (= (first coll) (first revcoll))\n       (recur (rest coll) (rest revcoll))\n       false))\n   )\n )", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 27, "code": "(fn [seq]\n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))\n    ))", "user": "5c891afde4b048ec896c5935"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 27, "code": "(fn [coll]\n  ( = (seq coll) (reverse coll)))", "user": "5c648b60e4b0fca0c162267b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c618140e4b0fca0c162262f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c967845e4b048ec896c5a60"}, {"problem": 27, "code": "(fn [s] (let [myseq (seq s)] (= myseq (reverse myseq))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 27, "code": "#(= (sequence %)\n   (reverse (sequence %)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "59286a7de4b072a2710fcee8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 27, "code": "(fn palin [in]\n (= \n  (seq in)\n  (reverse (seq in))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 27, "code": "(fn pal [a] \n    (if (or (nil? a) (empty? a) (= (count a) 1 ) )\n        true\n        (and (= (first a) (last a)) (pal (rest (butlast a)))) ))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 27, "code": "(fn [s] (= (apply str s) (apply str (reverse s))))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 27, "code": "(fn [s]\n  (let [l (/ (count s) 2)\n        ps (take l s)\n        rs (take l (reverse s))]\n    (= ps rs)))", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 27, "code": "#(loop [xs %]\n   (cond\n    (empty? xs) true\n    (not= (first xs) (last xs)) false\n    :else (recur ((comp rest drop-last) xs))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c9031bae4b048ec896c59ce"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 27, "code": "(fn [coll]\n  (let [c (count coll)\n        h (-> c (/ 2) double int)]\n    (every? true?\n           (for [r (range h)]\n             (= (nth coll r)\n                (nth coll (- c r 1)))))))", "user": "5ca3def0e4b048ec896c5bb0"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse%)))", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 27, "code": "#(loop [coll %]\n   (if (not= (first coll) (last coll))\n   \t\tfalse\n     \t(if (not (empty? coll))\n        \t(recur (butlast (rest coll)))\n          \ttrue\n        )\n   )\n)", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c97b621e4b048ec896c5a74"}, {"problem": 27, "code": "(fn palindrome? [s]\n   (loop [us s is-palindrome true]\n     (if\n      (or (not is-palindrome) (< (count us) 2))\n       is-palindrome\n       (recur\n        (rest (butlast us))\n        (= (first us) (last us))))))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 27, "code": "#(let [lst (apply list %)] (= lst (reverse lst)))", "user": "55a24698e4b0acc240e31523"}, {"problem": 27, "code": "(fn palindrome\n  [some-sequence]\n  (let [reversed-sequence (reverse some-sequence)]\n    (if (string? some-sequence)\n      (= some-sequence (clojure.string/join reversed-sequence))\n      (= some-sequence reversed-sequence))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 27, "code": "(fn find-palindrome [v]\n  (= (map (fn [i]\n            i) v) (reduce (fn [a b]\n                 (conj a b)) '() v)))", "user": "5cab0766e4b048ec896c5c45"}, {"problem": 27, "code": "(fn q27\n  [s] (if (string? s)\n        (= s (clojure.string/reverse s))\n        (= s (reverse s))))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 27, "code": "(fn [a] (if (= (seq a) (reverse (seq a))) true false))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 27, "code": "(fn palindrome? [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x))\n         (palindrome? (butlast (rest x))))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5caf9cace4b026601754b89b"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c936583e4b048ec896c5a1c"}, {"problem": 27, "code": "(fn [list] (\n                    =\n                    (reduce str list)\n                    (reduce str (reverse list))))", "user": "5cada3b8e4b026601754b872"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 27, "code": "#(= (concat %) (reverse %))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 27, "code": "(fn palindrome?\n    [x]\n    (if (string? x)\n        (= x (apply str (reverse x)))\n        (= x (reverse x))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 27, "code": "#(if (= (reverse %1) (reverse (reverse %1))) true false)", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 27, "code": "#(if (= (reverse %) (seq %))\n   true\n   false)", "user": "5cb351b7e4b026601754b8f9"}, {"problem": 27, "code": "(fn [col] (= (reverse col) (reverse (reverse col))))", "user": "5cb39440e4b026601754b903"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5cb62652e4b026601754b949"}, {"problem": 27, "code": "(fn [x] (let [x (reverse x)] (= x (reverse x))))", "user": "5cb3a8c3e4b026601754b904"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5cbadebee4b026601754b9c8"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "5cb556f9e4b026601754b934"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5cae5247e4b026601754b884"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cb9ab41e4b026601754b9a8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cb9e011e4b026601754b9b0"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse (seq a))))", "user": "4dbf01c8535d020aff1edf6f"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "5caf9a07e4b026601754b899"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 27, "code": "(fn pal [x]\n  (if (empty? x) true\n    (if (= (first x) (last x)) \n      (pal (take (- (count x) 2) (rest x)) )\n      false\n    ))\n)", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 27, "code": "(fn [arg1]\n      (= (into [] arg1)  (reverse (into [] arg1) )))", "user": "5cb6256ce4b026601754b947"}, {"problem": 27, "code": "#(= (reverse (into '() %)) (into '() %))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b007e46e4b0cc2b61a3bd3c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cc1def9e4b0ccb0619627c4"}, {"problem": 27, "code": "#(every? identity (for [x (range (count %))] (= (nth % x) (nth (reverse %) x))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "5cbcacc2e4b026601754b9ed"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cc7342be4b0ccb061962830"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 27, "code": "(fn [s] (let [sseq (if (seq? s) s (seq s))]\n          (= (reverse sseq) sseq)))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 27, "code": "(fn pal [l]\n  (if (<= (count l) 1)\n  \ttrue\n  \t(and (= (first l) (last l)) (pal (take (- (count l) 2) (rest l))))))", "user": "5caa5e42e4b048ec896c5c35"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cbdadeee4b026601754b9ff"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 27, "code": "(fn [arg] (= (reverse (seq arg)) (seq arg)))", "user": "5ccaed31e4b0ccb061962877"}, {"problem": 27, "code": "(fn [a] (= a (if (string? a) (reduce str (reverse a)) (reverse a))))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 27, "code": "(fn [s]\n    (loop [v (vec s)\n           begin 0\n           end (dec (count v))]\n      (cond\n        (>= begin end) true\n        (not (= (nth v begin) (nth v end))) false\n        :else (recur v (inc begin) (dec end)))))", "user": "5cc82af4e4b0ccb061962843"}, {"problem": 27, "code": "(fn palindrome? [s] \n  (= (seq s) (reverse s)))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5bbaf02fe4b0a20761a235f4"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5ccef16be4b0ccb0619628bf"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 27, "code": "(fn [coll] (= (vec coll) (reverse (vec coll)) ) )", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5cd07885e4b0ccb0619628d4"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 27, "code": "(fn [x]\n   (loop [y x]\n     (if (< (count y) 2)\n       true\n       (if-not (= (first y) (last y))\n         false\n         (recur (rest (drop-last y)))))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5cd16cd4e4b0ccb0619628e8"}, {"problem": 27, "code": "(fn [coll] (= (into () coll)  (seq coll)))", "user": "5c97821be4b048ec896c5a70"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5cd33e1ce4b0ccb06196290a"}, {"problem": 27, "code": "(fn\n  [x]\n  (= (seq x) (seq (reverse x))))", "user": "5cd17bf1e4b0ccb0619628eb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5cd5f3f8e4b0ccb06196293d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 27, "code": "#(= (take (int (/ (count %) 2)) %) (reverse (take-last (int (/ (count %) 2)) %)))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 27, "code": "(fn [s] (loop [s s]\n              (if (< (count s) 2)\n                true\n                (if (not= (first s) (last s))\n                  false\n                  (recur (drop 1 (take (- (count s) 1) s)))))))", "user": "5cd99946e4b05ee0cb311706"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5cd9dc85e4b05ee0cb31170d"}, {"problem": 27, "code": "(fn [x]\n\t(= (seq x) (reverse x)))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 27, "code": "(fn [x]\n  (loop [re x, f '()]\n    (if (= (count re) 0)\n      (= f (seq x))\n      (recur (rest re) (conj f (first re)))\n    )\n  )\n)\n;; didn't use reverse", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 27, "code": "(fn [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))  \n    (= seq (reverse seq))\n  )\n)", "user": "5c9b07cde4b048ec896c5abd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n   (= (clojure.string/join (reverse xs)) xs)\n   (= (reverse xs) xs)))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 27, "code": "(fn [a] (if (string? a) (= (apply str (reverse a)) a) (= (reverse a) a)))", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cdf4bd2e4b0a17bb84e2b00"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s) (= s (apply str (reverse s)))\n      (= s (reverse s))))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 27, "code": "(fn [n] (= (reverse n) (seq n)))", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cded022e4b0a17bb84e2af7"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 27, "code": "(fn poli?\n  [obj]\n  (if (not (empty? obj))\n    (if (= (first obj) (last obj))\n      (poli? (rest (drop-last obj)))\n      false)\n    true))", "user": "5ce3bcd6e4b0a17bb84e2b43"}, {"problem": 27, "code": "(fn [coll](= (seq coll) (reverse (seq coll))))", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 27, "code": "(fn palindrome? [xs] (= (seq xs) (reverse (seq xs))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 27, "code": "#(let [a (seq %)\n       b (reverse a)]\n   (= a b)\n )", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 27, "code": "#(= (apply str (reverse %1)) (apply str (seq %1)))", "user": "4f847f0ee4b033992c121c33"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ce69c4ae4b0a17bb84e2b8b"}, {"problem": 27, "code": "#(loop [tocheck (seq %), match true]\n      (if (< (count tocheck) 2)\n               match\n               (recur (drop-last (rest tocheck))   \n                      (and match (= (first tocheck) (last tocheck))))))", "user": "5ce6c354e4b0a17bb84e2b93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ce7e877e4b0a17bb84e2ba8"}, {"problem": 27, "code": "(fn [l] (loop [r l]\n          (if \n            (empty? (rest r))\n            true\n\t        (if (= (first r) (last r))\n    \t        (recur (rest (drop-last r)))\n                false))))", "user": "5ce56db6e4b0a17bb84e2b72"}, {"problem": 27, "code": "(fn [n]\n  (loop [front (first n)\n        back (last n)\n        iter 1]\n  (if(= front back)\n    (do \n      (if (not(nil? front))\n        (recur (get n iter) (get n (- (count n) iter 1)) (inc iter))\n        true\n        )\n      )\n  false\n    )\n  )\n)", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 27, "code": "(fn[xs](= (if (string? xs)(seq xs)xs) (reduce (fn[r x](conj r x)) '() xs)))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 27, "code": "#(every? true? (map (fn [x y] (= x y)) % (reverse %)))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 27, "code": "(fn [col]\n   (loop [col col]\n     (if (empty? col)\n       true\n       (if (= (nth col 0) (nth col (dec (count col))))\n         (recur (drop 1 (take (dec (count col)) col)))\n         false\n         )\n       )\n     )\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "5cead199e4b0a17bb84e2bd4"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse (seq x)))\n )", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 27, "code": "#(every? true? (map = (reverse %) %))", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 27, "code": "(fn is-palin [coll] (if\n                      (or (= (count coll) 0) (= (count coll) 1)) true\n                      (if (= (first coll) (last coll)) (is-palin (next (butlast coll))) false)\n                      )\n  )", "user": "5ceca436e4b0a17bb84e2bf8"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5cdaf05ee4b05ee0cb311722"}, {"problem": 27, "code": "#(= % (if (= (type %) String) (clojure.string/reverse %) (reverse %)))", "user": "5ced0ca0e4b0a17bb84e2bfd"}, {"problem": 27, "code": "#(loop [input %1]\n  (prn input)\n  (cond\n    (>= (count input) 2) (if (= (first input) (last input))\n                           (recur (rest (drop-last 1 input)))\n                           false)\n    (< (count input) 2) true))", "user": "5cea925ce4b0a17bb84e2bd2"}, {"problem": 27, "code": "(fn [x] (if x (if (= (first x) (last x)) (recur ((comp next drop-last) x)) false) true))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 27, "code": "(fn [s] (= (vec s) (reverse (vec s))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 27, "code": "(fn [x] \n  (= x \n     (if (string? x)\n       (apply str (reverse x))\n       (reverse x))))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "59384ec3e4b02506e01a29c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 27, "code": "#(= (apply list %) (apply list (reverse %)))", "user": "5cf11680e4b0aaa82f112a09"}, {"problem": 27, "code": "(fn [s] (=(first s)(last s)));cheaty!", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cf50e67e4b087f62be35a8d"}, {"problem": 27, "code": "(fn [initem]\n\n    (if (=\n         (seq initem)\n         (reverse (seq initem))\n         )\n      true\n      false))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 27, "code": ";(range (/ 4 2))\n;(nth \"abcd\" 2)\n(fn [s]\n  (let [c (- (count s) 1)\n        n (/ c 2)]\n    (reduce \n     (fn [res i]\n       (and res \n            (= (nth s i)\n               (nth s (- c i))))\n       )\n     true\n     (range n)\n     )\n    ))", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 27, "code": "(fn palin? [y] (= (seq y) (reverse y)))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 27, "code": "#_#(= (reverse %) (seq %))\n\n#(= (into () %) (seq %))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (vec coll)))", "user": "5cec049ce4b0a17bb84e2bef"}, {"problem": 27, "code": "#(if (list? %)\n  (= % (reverse %))\n  (= (seq %) (reverse (seq %))))", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 27, "code": "(fn is-palindrome\n  [thing]\n  (= (seq thing) (reverse thing)))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 27, "code": "(fn [s]\n  (->> (map vector s (reverse s))\n      (every? (fn [[a b]] (= a b)))))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 27, "code": "#(=(seq %) (reverse %))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 27, "code": "(fn [coll]\n   (cond\n   (string? coll) (= coll (apply str (reverse coll)))\n   :else (= coll (reverse coll))))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 27, "code": "(fn [s] \n  ((fn traverse [o r] \n    (if (empty? o) true (if (not= (first o) (first r)) \n                          false\n                          (traverse (rest o) (rest r))\n                          )\n      )\n    ) s (reverse s))\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59924289e4b0866487ed0d76"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5cf9623de4b0b71b1d808a95"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 27, "code": "(fn [xs]\n  (loop [xs (vec xs)]\n  \t(cond\n   \t  (< (count xs) 2) true\n   \t  (= (first xs) (last xs)) (recur (subvec xs 1 (dec (count xs))))\n      :else false)))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 27, "code": "(fn pal [coll]\n  (cond\n   (nil? coll) true\n   (= (first coll) (last coll)) (recur (butlast (drop 1 coll)))\n   :else false))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 27, "code": "(fn [coll]\n  (every? #(apply = %) (partition 2 (interleave coll (reverse coll)))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 27, "code": "(fn [xs] (let [as-seq (seq xs)] (= as-seq (reverse as-seq))))", "user": "5ad351a5e4b0ea6055cfabc0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 27, "code": "(fn [full-word]\n  (loop [word full-word]\n    (let [first-element (first word)\n          last-element (last word)\n          rem-word (butlast (rest word))]\n      (if (= first-element last-element)\n        (if-not (or (empty? rem-word) (= (count rem-word) 1))\n          (recur rem-word)\n          true)\n        false))\n    ))", "user": "5c839a4de4b0c8042a70ce53"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 27, "code": "(fn [x] (= (reverse(reverse x)) (reverse x)))", "user": "5cfff788e4b0cc9c91588196"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5032089de4b000fc67a99a85"}, {"problem": 27, "code": "(fn [x] (= (seq x) (into (list) x)))", "user": "5d00f8c5e4b0cc9c915881a3"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d0570fbe4b0cc9c915881df"}, {"problem": 27, "code": "(fn [coll] \n  (if (string? coll)\n    (if (= coll (reduce (fn [x y] (str y x)) \"\" coll)) true false)\n    (if (= coll (reduce (fn [x y] (conj x y)) '() coll)) true false)\n  ))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 27, "code": "(fn is-polindrome\n  [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (is-polindrome (rest (drop-last s))))\n    )\n  )", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "5d089304e4b0cc9c9158820b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d0781d1e4b0cc9c915881f9"}, {"problem": 27, "code": "(fn [something] (= (seq something) (reverse (seq something))))", "user": "5d08dfe7e4b0cc9c91588210"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58468c4ee4b089d5ab817e95"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x  (reverse x))))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 27, "code": "(fn [col]\n  (let [sequence (apply list col)]\n    (= sequence (reverse sequence))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 27, "code": "(fn [elements] (= (take (quot (count elements) 2) elements) (reverse (take-last (quot (count elements) 2) elements))))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 27, "code": "(fn [sequ] (let [mvec (vec sequ)]\n              (= mvec (rseq mvec))))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 27, "code": "#(or (= (reverse %) %)\n     (= (apply str (reverse %)) %))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 27, "code": "(fn [x]\n\t(if (instance? String x)\n\t\t(= x (apply str (reverse x)))\n\t\t(= x (reverse x))))", "user": "5d0ad8dde4b0cc9c91588225"}, {"problem": 27, "code": "(fn\n  [coll]\n  (let [length    (count coll)\n        mid       (/ length 2)\n        [beg end] (split-at mid coll)\n        rev-end   (reverse end)\n        adj-beg   (if (odd? length)\n                    (butlast beg)\n                    beg)]\n    (= rev-end adj-beg)))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 27, "code": "#(= (apply list %) (reverse %))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 27, "code": ";; To handle the hint, you must cast the argument into a vector\n#(= (into [] %) (reverse %))", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d0e58ede4b0cc9c91588254"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs)\n     (-> xs reverse)))", "user": "5d11618de4b02c15ef021985"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (let [a (seq x)\n        b (reverse x)]\n    (= a b)))", "user": "5d110abee4b02c15ef021983"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5d0902e8e4b0cc9c91588211"}, {"problem": 27, "code": "(fn [coll]\n   (loop [acc '() rem coll]\n     (if (= (count acc) (count rem)) (= acc rem)\n         (if (= (inc (count acc)) (count rem)) (= (seq acc) (rest rem))\n             (recur (cons (first rem) acc) (rest rem))))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 27, "code": "(fn superf [col]\n  (if (empty? col) true\n      (if (= (first col) (last col))\n        (superf (rest (drop-last col)))\n        false)))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 27, "code": "(fn is-palin\n  [src]\n    (loop [s src r (reverse src)]\n      (if (empty? s) \n        true\n        (if (= (first s) (first r))\n          (recur (rest s) (rest r))\n          false\n        ))))", "user": "524a7c1ae4b05ef8e38e64ac"}, {"problem": 27, "code": "(fn [x] \n   (if (string? x)\n     (->>(reverse x)\n       (apply str)\n       (= x))\n     (->> (reverse x)\n          (= x))))", "user": "5d148581e4b0902706380dc6"}, {"problem": 27, "code": "#(true? (= (reverse %) (seq %)))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 27, "code": "#(= (reverse %)\n    (seq %))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 27, "code": "(fn some-reverse-func [x]\n  (= (seq x) (reverse x))\n)", "user": "5c93f5d5e4b048ec896c5a28"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "5c9f952ae4b048ec896c5b59"}, {"problem": 27, "code": "(fn [xs] (= (list* xs) (reverse xs)))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 27, "code": "(fn [x] \n  (if (string? x)\n    (= x (clojure.string/reverse x))\n  \t(= x (reverse x))))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c8aa02de4b048ec896c5958"}, {"problem": 27, "code": "(fn palin\n  [s]\n  (= (seq s) (reverse s)))", "user": "5d123c75e4b02c15ef021997"}, {"problem": 27, "code": "(fn [col]\n  (if (coll? col)\n    (= (reverse col) col)\n    (= (reverse col) (seq (char-array col)))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 27, "code": "(fn pd [x] (if (empty? x) true (and (= (first x) (last x)) (pd (rest (reverse (rest x)))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (loop [s s]\n    (let [f (first s)\n          l (last s)]\n      (if (<= (count s) 1)\n        true\n        (if (not (= f l))\n          false\n          (recur (butlast (rest s))))))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 27, "code": "(fn [operand]\n  (if (string? operand)\n    (= (apply str (reverse operand)) operand)\n    (= (reverse operand) operand)))\n\n\n;(fn [operand] (if (= operand ((fn [operand] (apply str (#(-> % str (clojure.string/replace #\"[\\(|\\[|\\]|\\)]\" \"\") (reverse)) operand))) operand)) true false))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 27, "code": "(fn [l] (let [ll (apply list l)] (= ll (reverse ll))))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 27, "code": "(fn [c] (every? true? (map = c (reverse c))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 27, "code": "(fn [xs]\n  (let [len (count xs)\n        to-take (if (even? len) (/ len 2) (/ (- len 1) 2))\n        [front remaining] (split-at to-take xs)\n        back (take to-take (reverse remaining))]\n    (= front back)))", "user": "5d217b1de4b02ea6f0fb69e6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse sq)))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 27, "code": "(fn [col]\n  (= (map identity col) (reverse col)))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 27, "code": "(fn palindrome\n  [seq] \n  (if (< (count seq) 2)\n    true\n    (if (= (first seq) (last seq))\n        (palindrome (drop 1 (drop-last seq)))\n        false\n          \n)))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d232882e4b02ea6f0fb6a02"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d123457e4b02c15ef021996"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d122f3ee4b02c15ef021994"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d063918e4b0cc9c915881eb"}, {"problem": 27, "code": "(fn [ls]\n\t(loop [ls ls]\n\t\t(if (or (empty? ls) (= (count ls) 1))\n\t\t\ttrue\n\t\t\t(if (= (first ls) (last ls))\n\t\t\t\t(recur (rest (drop-last ls)))\n\t\t\t\tfalse))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 27, "code": ";(fn [coll]\n;   (= (take (quot (count coll) 2) coll) (take (quot (count coll) 2) (reverse coll))))\n#(= (seq %) (reverse (seq %)))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s)\n     (apply list s)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 27, "code": "(fn [sqn]\n  (= (reverse sqn) (reverse (reverse sqn))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 27, "code": "#(= (seq %) (seq(reverse %)))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= s (reverse s))))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 27, "code": "#(loop [col (vec %) start 0 end (dec (count %)) startItem (nth col start) endItem (nth col end) rt (= startItem endItem)]\n    ;(println (str \"rt:\" rt \" start:\" start \" end:\" end \" startItem:\" startItem \" endItem:\" endItem))\n    (if(or (not rt) (= start end) (> start (quot (count col) 2)))\n      rt\n      (recur col (inc start) (dec end) (nth col (inc start) ) (nth col (dec end)) (= startItem endItem) )\n      )\n    )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5d1e37e2e4b02ea6f0fb69b1"}, {"problem": 27, "code": "#(= (take (/ 2 (count %)) %) (take (/ 2 (count %)) (reverse %)))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5d1a92d6e4b0902706380e11"}, {"problem": 27, "code": "#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))", "user": "5c07522ae4b0bdcf453d16c4"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 27, "code": "#(loop [c %] \n   (if (> (count c) 1) \n     (if \n       (not= (first c) (last c)) false \n       (recur (reverse (rest (reverse (rest c)))))\n     ) true\n   )\n )", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5d2c8844e4b01671435dbc8f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 27, "code": "#(cond\n    (>= 1 (count %)) true\n    (not= (first %) (last %)) false\n    :else (recur (->> %\n                     (drop 1)\n                     drop-last)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 27, "code": "(fn [s]\n  (= s (if (string? s)\n           (apply str (reverse s))\n           (reverse s))))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 27, "code": "#(if (coll? %1)\n   (= %1 (reverse %1))\n   (= %1 (apply str (reverse %1))))", "user": "5d25f5e7e4b02ea6f0fb6a3a"}, {"problem": 27, "code": "(fn [coll]\n    (let [size (count coll)\n          palin-lst (for [i (range (dec size))] (= (nth coll i) (nth coll (- size 1 i))))]\n      (every? #(= true %) palin-lst)))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 27, "code": "#(if (> (count %) 1)\n    (if (= (first %) (last %))\n      (recur (rest (reverse (rest %))))\n      false)\n    true)", "user": "5d14daa6e4b0902706380dcb"}, {"problem": 27, "code": "(fn p? [sq] \n  (= (seq sq) (reverse (seq sq))))", "user": "5d2e39d8e4b01671435dbcaa"}, {"problem": 27, "code": "(fn[collection] ( = (seq ( reduce (fn[coll n ] (conj coll n) ) () collection)) (seq collection) ))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 27, "code": "(fn pal [x] (if (= java.lang.String (type x)) (= (apply str (reverse x))) (= (reverse x) x)))", "user": "5d321852e4b01671435dbce8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 27, "code": "#((fn [items](= items (loop [ritems items rev_seq (empty items)] (if (= (empty items) ritems) rev_seq (recur (rest ritems)(cons (first ritems) rev_seq))) ))) ((fn [items] (seq items)) %))", "user": "5d363543e4b01671435dbd20"}, {"problem": 27, "code": "(fn prob27\n  [y]\n  (letfn [(rev [x]\n            (if (string? x)\n              (apply str (reverse x))\n              (reverse x)))]\n    (= y (rev y))))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 27, "code": "(fn [item] (= (seq item) (reverse item) ))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 27, "code": "#(= (seq %) (into '() (seq %)))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 27, "code": "(fn [x] \n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (recur (drop-last (rest x)))\n      false)))", "user": "5d371b6fe4b01671435dbd31"}, {"problem": 27, "code": "(fn palindrome? [coll] (if (= (apply str coll) (apply str (reverse coll))) true false))", "user": "5d348d3de4b01671435dbd0a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bb36a9ce4b0a20761a23523"}, {"problem": 27, "code": "(fn [s]\n  (loop [ss s]\n    (if (< (count ss) 2)\n      true\n      (and (= (first ss) (last ss))\n           (recur (butlast (rest ss)))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d246597e4b02ea6f0fb6a22"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs)\n     (reverse xs)))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (let [reverse (reverse xs)]\n    (if (char? (first reverse))\n      (= xs (apply str reverse))\n      (= xs reverse))))", "user": "5d3e66d4e4b01671435dbd72"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d404586e4b05dd059a54363"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5cd4f7c5e4b0ccb06196292a"}, {"problem": 27, "code": "(fn pal [seq]\n  (if (not (= (first seq) (last seq)))\n    false\n    (if (empty? seq)\n      true\n      (recur (rest (take (dec (count seq)) seq))))))", "user": "5d323149e4b01671435dbce9"}, {"problem": 27, "code": "#(= (let [r (reduce (fn ([c v] (cons v c))) (list) %)]\n       (if (string? %) (apply str r) r)) %)", "user": "5d41de31e4b05dd059a54379"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 27, "code": "(fn [coll]\n    (= (seq coll) (reverse coll)))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 27, "code": "(fn [s] (let [r (seq s)] (= r (reverse r))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 27, "code": "(fn [word]\n  (loop [w word]\n      (let [f (str (first w))\n            l (str (last w))]\n        (if (= f l)\n          (if (< (count w) 2)\n            (recur (drop-last (rest w)))\n            true)\n        false))))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5d30ba40e4b01671435dbcd4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d46a3c1e4b07c84aa5ae6ad"}, {"problem": 27, "code": "(fn [palin]\n   (loop [check-palin palin]\n     (if (empty? check-palin)\n       true\n       (if (= (first check-palin) (last check-palin))\n         (recur\n           (drop-last (rest check-palin)))\n         false))))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll]\n    (cond (or (empty? c) (= (count c) 1)) true\n          (not= (first c) (last c)) false\n          :else (recur (take (- (count c) 2)\n                             (next c))))\n      \n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d46969fe4b07c84aa5ae6ac"}, {"problem": 27, "code": "(fn [secuencia]\n  (let [invertida (reverse secuencia)]\n  (= (seq secuencia) invertida)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 27, "code": "(fn pal [[firrst & resst]]\n(cond (empty? resst) true\n      (not= firrst (last resst)) false\n      :else (pal (butlast resst))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 27, "code": "(fn [x] \n   (if(< (count x) 2) true\n   (if\n    (not (= (first x) (last x)))\n   false\n   (recur (drop 1 (drop-last x)))))\n)", "user": "5d40442ee4b05dd059a54362"}, {"problem": 27, "code": "(fn pal [l]\n  (if (< (count l) 2) true\n    (if (= (first l) (last l))\n      (pal (rest (butlast l)))\n      false)))", "user": "5d41f428e4b05dd059a5437b"}, {"problem": 27, "code": "(fn [coll] \n    (\n        loop [coll coll flag false] \n        (\n            if coll \n            (\n                if (= (first coll) (last coll))\n                (recur (next (drop-last coll)) true)\n                (recur nil false)\n            )\n            flag\n        )\n    )\n)", "user": "5d40493ae4b05dd059a54364"}, {"problem": 27, "code": "#(= (vec %) ((comp reverse vec) %))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 27, "code": "(fn [S]\n  (= \n    (seq S)\n   \t(reverse S)\n  )\n)", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "5d3adc7de4b01671435dbd5b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 27, "code": "(fn [seq]\n          (if (string? seq)\n            (= seq (apply str(reverse seq)))\n            (= seq (reverse seq))))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 27, "code": "(fn [xs]\n   (cond\n     (string? xs)\n     (= xs (clojure.string/join (reverse xs)))\n     (coll? xs)\n     (= xs (reverse xs))\n     :else false\n     ))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 27, "code": "(fn [s]\n  (loop [lst () myseq s]\n    (if (seq myseq)\n      (recur\n        (conj lst (first myseq))\n        (rest myseq))\n      (if (string? s)\n        (= (clojure.string/join lst) s)\n        (= lst s)))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 27, "code": "(fn palin?\n    [ls] \n    (if (empty? ls)\n        true\n        (let [f (first ls) l (last ls)]\n             (if (not (= l f)) \n                 false\n                 (palin? (rest (butlast ls)))))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 27, "code": "(fn [x]\n  (loop [x x]\n    (if (< (count x) 2)\n      true\n      (let [a (first x)\n            b (last x)]\n        (if-not (= a b)\n          false\n          (recur (drop-last (drop 1 x))))))))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 27, "code": "(fn [x]\n  (loop [idx  0\n         ridx (dec (count x))]\n    (println idx ridx (nth x idx) (nth x ridx))\n    (if (>= idx ridx)\n      true\n      (if (= (nth x idx) (nth x ridx))\n        (recur (inc idx) (dec ridx))\n        false))))", "user": "5d51216ae4b0776584bd6f5b"}, {"problem": 27, "code": "(fn [in-x] (let [x-in (seq in-x)] (= x-in (reverse x-in))))", "user": "5d520cabe4b0776584bd6f66"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 27, "code": "#(=\n  (reduce conj [] %)\n  (reduce conj () %))", "user": "5d4fc160e4b0776584bd6f51"}, {"problem": 27, "code": "(fn [collection]\n  (= (reverse (seq collection)) (seq collection)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5ceb221ce4b0a17bb84e2bde"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reduce #(cons %2 %1) [] coll)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))\n\n;; Note: reverse aplies seq first, so can be reduced to:\n;;    #(= (seq %) (reverse %))", "user": "5d54af24e4b02ba5928a6809"}, {"problem": 27, "code": "#(= (apply conj [] %1) (apply conj '() %1))", "user": "5d47f45de4b07c84aa5ae6b4"}, {"problem": 27, "code": "(fn palin [x] (or (< (count x) 3) (and (= (first x) (last x)) (palin (reverse (rest (reverse (rest x))))))))", "user": "5d55305ce4b02ba5928a680d"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 27, "code": "(fn [coll]\n  (let [half (unchecked-divide-int (count coll) 2)\n        \n        mid (if (odd? (count coll)) (inc half) half)\n        front (take half coll)\n        back (drop mid coll)]\n    (= front (reverse back))))", "user": "5d57079be4b02ba5928a6819"}, {"problem": 27, "code": "(fn [lis]\n             (= (into [] lis) (reverse (into [] lis))))", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 27, "code": "#(= (into () %) (seq %))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 27, "code": "(fn palindrome [sequence]\n  (cond\n    (string? sequence) (= (apply str (reverse sequence)) sequence)\n    :else              (= (reverse sequence) sequence)\n  )\n)", "user": "5d58983fe4b02ba5928a6823"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "559ba500e4b066d22e731f58"}, {"problem": 27, "code": "#(= (seq  %) (reverse %))", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 27, "code": "(fn rpd [x] (\n         if(empty? (vec x))\n\t\t\ttrue\n\t\t\t(if (not= (last (vec x)) (first (vec x)))\n             false\n             (rpd (reverse (next (reverse (next (vec x)))))))             \n         ))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 27, "code": "(fn palindrome?\n  ([l] (if (< (count l) 2) true (if (= (last l) (first l)) (palindrome? (rest (butlast l))) false)))\n)", "user": "5d5b06a9e4b02ba5928a683a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 27, "code": "(fn pal [lst]\n  (loop [ll lst\n        rl (reverse ll)]\n                    (if (empty? ll)\n                      true\n                      (if (not (= (first ll) (first rl)))\n                        false\n                        (recur (rest ll) (rest rl))\n                        )\n                      )\n    \n    )\n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 27, "code": "(fn [seq1]\n  (= (seq seq1) (reverse seq1)))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 27, "code": "(fn [s] \n  (cond\n   (<= (count s) 1) true\n   (= (first s) (last s)) (recur (rest (butlast s)))\n   :else false)\n )", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 27, "code": "(fn [s]\n(let [as-seq (vec s)]\n  (= as-seq (reverse as-seq))))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 27, "code": "(fn [pdt]\n    (if (instance? String pdt)\n      (= pdt (clojure.string/reverse pdt))\n      (= pdt (reverse pdt))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 27, "code": "(fn [x]\n  (let [pivot (quot (count x) 2)\n        start (vec (take pivot x))\n        end (vec (drop pivot x))\n        start (if (> (count end) (count start))\n                (conj start (first end))\n                start)]\n    (= start (reverse end))))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 27, "code": "(fn rev [cucc]\n   ( if ( string? cucc )\n   ( = ( apply str ( reverse cucc ) ) cucc )\n   ( = ( reverse cucc ) cucc )\n   ) )", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 27, "code": "(fn [x]\n  (let [y (if (string? x)\n            (apply str (reverse x))\n            (reverse x))]\n    (= x y)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 27, "code": "(fn is-palindrome [x]\n    (let [l (int (Math/floor (/ (count x) 2)))]\n      (= (take l x) (reverse (take-last l x)))\n      ))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "507766e9e4b0fc74642bff61"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "5d61552ae4b0c9e5857d5011"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (seq coll)))", "user": "54fa32bae4b0cf870d934701"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 27, "code": "#(= (seq%) (reverse %))", "user": "5d5daf87e4b0c9e5857d4fed"}, {"problem": 27, "code": "(fn [x] (= (apply list x) (reverse x)))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 27, "code": "(fn [word]\n  (if (instance? String word)\n    (= word (apply str (reverse word)))\n    (= word (reverse word))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 27, "code": "#( = (seq %) (reverse %))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5d6554cde4b0db5d338d15d3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "5d65814be4b0db5d338d15db"}, {"problem": 27, "code": "(fn  \n  [x]\n  (= (seq x) (reverse (seq x))))", "user": "5d615431e4b0c9e5857d5010"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 27, "code": "(fn [x] (every? true? (map = x (reverse x))))", "user": "5d5c549ee4b09db18d4482eb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 27, "code": "#(=(seq %)(reduce conj '() %))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d65c2e9e4b0db5d338d15dd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 27, "code": "(fn [x] (= (into '() x) (seq x)))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d69a6e1e4b0db5d338d160e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 27, "code": "(fn [list]\n  (= (seq list) (reverse (seq list)))\n  )", "user": "5d6932e6e4b0db5d338d1609"}, {"problem": 27, "code": "(fn [l]\n  (= (reverse l) (reverse (reverse l))))", "user": "5d6a975be4b04d129b00f29b"}, {"problem": 27, "code": "#(if (odd? (count %))\n   (= (rest (reverse (first (partition-all (/ (count %) 2) %)))) (second (partition-all (/ (count %) 2) %)))\n   (= (reverse (first (partition-all (/ (count %) 2) %))) (second (partition-all (/ (count %) 2) %))))", "user": "5d6b5c42e4b04d129b00f2a7"}, {"problem": 27, "code": "(fn palin\n  [coll]\n  (if (= (type coll) java.lang.String)\n    (= (reduce str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 27, "code": "(fn palindrone [a] (= (reverse (reverse a)) (reverse a)))", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 27, "code": "(fn pal [s]\n  (= (reverse s) (seq s)))", "user": "5d6d76ffe4b04d129b00f2be"}, {"problem": 27, "code": "#(loop [iterate 0\n          str (seq %)\n          ]\n     (if (> iterate (int (/ (count str) 2)))\n         true\n       (if (= (last str) (first str))\n           (recur (inc iterate) (rest (reverse (rest (reverse str)))))    \n         false\n         )\n       )\n     )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 27, "code": "#(= (vec %) (vec (apply conj () %)))", "user": "5d6d7e0de4b04d129b00f2bf"}, {"problem": 27, "code": "(fn palindrome [input]\n  (if (<= (count input) 1 )\n    true\n    (if (= (first input) (last input))\n      (palindrome (drop-last (drop 1 input)))\n      false)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 27, "code": "(fn\n   [lst]\n   (if (string? lst)\n       (= lst (apply str (reverse lst)))\n       (= lst (reverse lst))))", "user": "5d6e4d1ee4b04d129b00f2c4"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 27, "code": "#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))", "user": "5d6a9b1ee4b04d129b00f29c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cbe5fdfe4b0ccb061962750"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d64508de4b0c9e5857d5031"}, {"problem": 27, "code": "(fn [n] (= (reverse (reverse n)) (reverse n)))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 27, "code": "(fn pal [coll]\n          (\n           if (empty? coll)\n            true\n            (if (= (first coll)\n                   (last coll))\n              (pal (drop 1 (drop-last 1 coll)))\n              false\n              )\n            )\n          )", "user": "5d6d3182e4b04d129b00f2bb"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 27, "code": "(fn [coll] (\n                    loop [ c coll]\n                    (if (or (= 1 (count c)) (= 0 (count c))) true (if (= (first c) (last c))\n                                               (recur (drop-last (drop 1 c)))\n                                               false))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 27, "code": "(fn e [c]\n  (loop [coll c]\n    (if (or (= 1 (count coll)) (= 0 (count coll)))\n      true\n      (if (= (first coll) (last coll))\n            (recur (drop-last (drop 1 coll)))\n            false))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 27, "code": "(fn ispalindrome [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))\n    )\n  )", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 27, "code": "(fn [inputColl]\n   (loop [ leftPos 0\n          rightPos (- (count inputColl) 1) ]\n     (if (>= leftPos rightPos)\n       true\n       (if (= (nth inputColl leftPos) (nth inputColl rightPos))\n         (recur (+ leftPos 1) (- rightPos 1))\n         false\n       )\n     )\n   )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 27, "code": "(fn isPalindrome [sq]\n  (= (apply str sq) (apply str (reverse sq))))", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 27, "code": "(fn [s] (reduce #(and %1 %2) true (mapcat #(vector (= %1 %2)) s (reverse s))))", "user": "5d728116e4b02e6b30c9350f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 27, "code": "(fn palindrome [string]\n  (= (seq string) (into '() (seq string))))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 27, "code": "(fn palindrome [some-seq]\n  (loop [the-seq some-seq]\n    (if (or (empty? the-seq) (= 1 (count the-seq)))\n      true\n      (if (not= (first the-seq) (last the-seq))\n        false\n        (recur (rest (drop-last the-seq)))\n        )\n      )))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 27, "code": "#(= (if (string? %)\n       (apply str (reverse %))\n       (reverse %)\n       ) %)", "user": "5d6e6a2de4b04d129b00f2c8"}, {"problem": 27, "code": "(fn pal [x]\n  (if (string? x)\n    (pal (seq x))\n    (if (= 1 (count x))\n      true\n      (and\n        (= (first x) (last x))\n        (or\n          (< 3 (count x))\n          (pal (take (- (count x) 2) (rest x)))\n        )\n      )\n    )\n  )\n)", "user": "5d77a828e4b02e6b30c93531"}, {"problem": 27, "code": "#(loop [l %]\n   (cond\n    (empty? l) true\n    (= 1 (count l)) true\n    (false? (= (first l) (last l))) false\n    :else (recur (drop-last (rest l)))\n    ))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 27, "code": "(fn pal [n] (= (seq n) (reverse n)))", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 27, "code": "(fn is-palin? [s] (= (seq s) (reverse s)))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 27, "code": "#(let [v (vec %)] (= v (reverse v)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 27, "code": "#(= % (let [rsq (reverse %)] (if (string? %) (apply str rsq) rsq)))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 27, "code": "#(loop [pred false\n        col %]\n   (if (next col)\n     (if (= (first col) (last col))\n       (recur true (rest (butlast col)))\n       (recur false (rest (butlast col))))\n     pred))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/join (reverse %)) %)\n   (= (reverse %) %))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 27, "code": "(fn [coll]\n\t(let [palindromo (reverse (seq coll))]\n\t\t(if (= palindromo (seq coll))\n\t\t\ttrue\n\t\t\tfalse)\n\t\t))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 27, "code": "#(= (partition 1 %) (reverse (partition 1 %)))", "user": "5b19593ae4b03cfeda66ecb8"}, {"problem": 27, "code": "(fn [col]\n  (if (string? col)\n     (= col (apply str (reverse col)))\n     (= col (reverse col))\n  )\n)", "user": "5d72ad8fe4b02e6b30c93512"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 27, "code": "(fn [l]\n  (= (reverse l) (seq l)))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 27, "code": "(fn  [s]\n      (= (seq s) (reverse s))\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 27, "code": "(fn [x] (= (take (quot (count x) 2) x) (reverse (take-last (quot (count x) 2) x))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 27, "code": "(fn [x] (= (into [] x) (reverse x)))", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 27, "code": "(fn palindrom? [s] (if (>= 1 (count s)) true (if (= (last s) (first s)) (palindrom? (rest (butlast s))) false )))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d81fc4fe4b0915913b1d37d"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n  \t(= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 27, "code": "(fn [x] (if (some false? (map = x (reverse x))) false true))", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 27, "code": "(fn clofn [x] \n  (if (empty? x) \n    true \n    (if (= (first x) (last x)) \n      (clofn (rest (drop-last x)))\n      false)))", "user": "5d1ef23ee4b02ea6f0fb69bb"}, {"problem": 27, "code": "(fn [arg] (= (reverse arg) (seq arg)))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (if (= x (clojure.string/join #\"\" (reverse x)))\n      true\n      false\n    )\n   \t(if (= x (reverse x))\n      true\n      false\n    )\n  )\n)", "user": "5d62da51e4b0c9e5857d5020"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d87cc7ee4b0915913b1d3a3"}, {"problem": 27, "code": "(fn [val] (= (seq val) (reverse val) ))", "user": "5d80789ee4b0915913b1d36a"}, {"problem": 27, "code": "#(= ((comp reverse vec) %) (vec %))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 27, "code": "(fn palindrome? [elms]\n  \"returns true of given sequence is palindrome\"\n  (if (or (empty? elms) (= 1 (count elms))) true\n    (and (= (first elms)(last elms)) \n      (palindrome? (subvec (vec elms) 1 (- (count elms ) 1))\n    )) \n  )\n)", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 27, "code": "#(loop [i 0 n (count %) pal true]\n  (if (= i n) pal\n  (recur (inc i) n (and pal (= (nth % i) (nth % (- n (inc i)))))))\n  )", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 27, "code": "#(= (-> % reverse reverse) (reverse %))", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 27, "code": "(fn [sq] (= (reverse sq) (seq sq)))", "user": "5d8a3b3ee4b0915913b1d3c8"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d8542c9e4b0915913b1d391"}, {"problem": 27, "code": "#(= % (if(= (type %) java.lang.String)\n            (apply str (reverse %))\n            (reverse %)))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 27, "code": "(fn [s]\n    (let [n (quot (count s) 2)]\n      (= (take n s) (take n (reverse s)))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 27, "code": "(fn [w] (= (seq w) (reverse w)))", "user": "5d8c7a16e4b0915913b1d3e0"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %) )", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 27, "code": "(fn [xs] (= (apply str (reverse xs)) (apply str xs)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 27, "code": "(fn [s] (= s\n           (#(if-let [value (string? %)]\n               (apply str (reverse %))\n               (reverse %)) s)))", "user": "5d8ce0e6e4b0915913b1d3e5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d915f01e4b0915913b1d401"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5d94816ce4b0d3f9b434ad28"}, {"problem": 27, "code": "(fn  \n\t[inputThing]\n\n\t(loop [i 0 ri (- (count inputThing) 1)]\n\n\t\t(println i)\n\t\t(println (int(/ (count inputThing)  2)))\n\t\t(println ri)\n\t\t(if (not= (nth inputThing i) (nth inputThing ri))\n\t\t\tfalse\n\t\t\t(do\n\t\t\t\t(if (= ri (int(/ (count inputThing)  2)))\n\t\t\t\t\ttrue\n\t\t\t\t\t(recur (inc i) (dec ri))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\n\t)\n\t\n\t)", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 27, "code": "(fn is-palindrome? [word]\n  (let [r (->> word seq reverse)\n        s (seq word)]\n    (= s r)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 27, "code": "(fn [x]\n  (let [reversed (if (string? x)\n                   (clojure.string/reverse x)\n                   (reverse x))]\n    (= x reversed)))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d9a06f9e4b0d3f9b434ad43"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 27, "code": "(fn [xs] (if (string? xs)\n           (= xs (clojure.string/reverse xs))\n           (= xs (reverse xs))))", "user": "5d84fccae4b0915913b1d390"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 27, "code": "(fn[x]\n   (if (or (and (string? x) (= x (apply str(reverse x))))\n           (and (not (string? x)) (= x (reverse x)))) true false\n                                                      ) )", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 27, "code": "(fn [sequence]\n  (let [strseq (map #(str %) sequence)]\n    (loop [in strseq]\n      (let [head (first in) tail (last in)]\n        (cond\n          (empty? in) true\n          (not= head tail) false\n          :default (recur (drop-last (drop 1 in)))\n        )\n      )\n    )  \n  )\n)", "user": "5d97b033e4b0d3f9b434ad39"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d9bda4fe4b0d3f9b434ad50"}, {"problem": 27, "code": "(fn [lst] (= (seq lst) (reverse (seq lst))))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 27, "code": "(fn [n]\n  (= (clojure.string/join n) (clojure.string/join (reverse n))))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (vec x)))", "user": "5d947bbbe4b0d3f9b434ad27"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 27, "code": "#(= (-> % reverse) (-> % reverse reverse))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse (seq x))))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 27, "code": "#(= (seq %) (-> (reverse %) seq))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5d9edc21e4b000c986472bc6"}, {"problem": 27, "code": "(fn detect-palindrome\n  [xs]\n  (= (seq xs) (reverse xs)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 27, "code": "(fn [seq]\n  (= (vec seq) (reverse (vec seq))))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5d9e1006e4b0eb781811cdbd"}, {"problem": 27, "code": "#(= (into [] %) (into [] (reverse %)))", "user": "5da07698e4b000c986472bd3"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5da3a458e4b000c986472bed"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 27, "code": "#(= (apply str(reverse %)) (apply str %))", "user": "5d6c2b80e4b04d129b00f2ae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 27, "code": "(fn\n  [sequence]\n  (if (not= (first sequence) (last sequence))\n    (do false)\n    (if (< (count sequence) 1)\n      (do true)\n      (recur (drop 1 (butlast sequence))))))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 27, "code": "(fn fun [dataList]\n\t(cond\n     (empty? dataList) true\n     (= (count dataList) 1) true\n     (= (first dataList) (last dataList))\n     \t(recur (take (- (count dataList) 2) (drop 1 dataList)) )\n     :else false\n    )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "58800a48e4b0f1effa3b7604"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 27, "code": "#(every? identity (map = % (reverse %)))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5da7176ae4b000c986472c13"}, {"problem": 27, "code": "(fn [l] \n  (let [c (count l)] \n    (let [half (if (even? c) (/ c 2) (/ (- c 1) 2))] \n      (= (take half l) (take half (reverse l))))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 27, "code": "(fn [v] (= (seq v) (reverse v)))", "user": "58ac0612e4b0005cfeb1a73c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 27, "code": "(fn palindrome [coll] (\n            =\n               (first \n                (split-at (int (/ (count coll) 2)) coll)\n               )\n               (first\n                (split-at (int (/ (count coll) 2)) (reverse coll))\n               )\n             \n            )\n  )", "user": "5da975b9e4b000c986472c32"}, {"problem": 27, "code": "#(let [half-count (/ (count %) 2)]\n   (= (take (int half-count)\n             %)\n      (reverse (drop (int (+ 0.5 half-count))\n                     %))))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 27, "code": "(fn isPalindrome\n  [s]\n  (let\n    [reversed (reduce conj '() s)]\n    (= reversed (seq s))))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 27, "code": "(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (recur (butlast (rest x)))\n      false)))", "user": "55f335f4e4b06e875b46ce57"}, {"problem": 27, "code": "(fn [coll] (every? #(= (nth coll %) (nth (reverse coll) %)) (range 0 (dec (count coll)))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 27, "code": "(fn rr [i](cond (= false i) false\n        (empty? i) true\n        :else (rr (if (= (first i)\n                         (last i))\n                    (->> (drop 1 i)\n                         (take (- (count i) 2)))\n                    false))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 27, "code": "(fn [coll] (let [my-seq (seq coll) rev (reverse my-seq )] (= my-seq rev)))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 27, "code": "#(= (seq %) (reverse %) )", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 27, "code": "(fn p [s] (\n          cond\n           (< (count s) 2) true\n           :else (and (= (first s) (last s)) (p (rest (drop-last s))))\n           )\n  )", "user": "5da71a00e4b000c986472c14"}, {"problem": 27, "code": "#(=  (reverse (vec %1)) (vec %1))", "user": "5da98129e4b000c986472c33"}, {"problem": 27, "code": "(fn pal [coll]\n  (if (empty? coll)\n    true\n\t(and (= (first coll) (last coll)) (pal (butlast (rest coll))))))", "user": "5da9662ce4b000c986472c30"}, {"problem": 27, "code": "(fn pal [coll](cond\n                  (string? coll) (= coll (apply str(reverse coll)))\n                  :else(= coll (reverse coll))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5dad3bb0e4b0f8c104ccfc7e"}, {"problem": 27, "code": "(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 27, "code": "#(= (into [] %1) (reverse %1))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse (seq xs))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 27, "code": "(fn [s] (if-not (string? s) (= (reverse s) s) (= (apply str (reverse s))s)))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 27, "code": "(fn [coll]\n  (= (into [] coll) (reverse coll)))", "user": "5db35c6ee4b010eb3c36cd20"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)) )", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 27, "code": "(fn pal [s]\n  (= (seq s) (reverse s)))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 27, "code": "#(= (map identity %1) (reverse %1))", "user": "5db5d8b0e4b010eb3c36cd32"}, {"problem": 27, "code": "(fn [coll] \n  (= (apply str coll) (apply str (reverse coll))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 27, "code": "(fn [sq] (= (seq sq) (reverse sq)))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 27, "code": "#(let [v (vec %)] (= (reverse v) v))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 27, "code": "(fn is-palindrome [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))", "user": "5db826b4e4b010eb3c36cd47"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 27, "code": "(fn [x]\n   (= (seq x) (reverse (seq x))))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 27, "code": "(fn imp [l]\n  (let [len (count l)]\n   (cond\n    (== len 0) true\n    (== len 1) true\n    (not= (first l) (last l)) false\n    :else (imp (take (- len 2) (drop 1 l))))))", "user": "5dbbf77ce4b09f47823971ab"}, {"problem": 27, "code": "(fn [coll]\n  (cond (empty? coll)\n        true\n        (= (count coll) 1)\n        true\n        :else\n        (if (= (last coll) (first coll))\n          (recur (drop 1 (drop-last coll)))\n          false)))", "user": "5dc02058e4b0e59a23173d7c"}, {"problem": 27, "code": "#(if (string? %)\n   (= (clojure.string/join (reverse %)) %)\n   (= (reverse %) %))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5db488a1e4b010eb3c36cd27"}, {"problem": 27, "code": "(fn[p](loop [x (seq p)]\n   (if (not(empty? x))   \n     (= (first x) (last x))   \n     (recur (rest (butlast x)))\n     )))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 27, "code": "#( let [  num (/ (count %) 2)]\n   (loop [cl % re (reverse %) n 0]\n    (cond\n     (> n num) true\n     (= (first cl) (first re)) (recur (rest cl) (rest re) (inc n))\n     :else false)))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 27, "code": "(fn [seqz]\n  (= (apply str seqz) (apply str (reverse seqz))))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5814dcf8e4b0f478707a062f"}, {"problem": 27, "code": "(fn [input]\n   (= (seq input) (reverse input)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 27, "code": "#(loop [coll %]\n    (if (empty? coll)\n      true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (butlast (rest coll))))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b8856e8e4b047b03b20380a"}, {"problem": 27, "code": "(fn [arg]\n  (= (reverse arg) (seq arg)))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 27, "code": "(fn palindrome [s] \n   (= (into () (into () s)) (into () s) )                                                               \n  )", "user": "5dbd86bce4b09f47823971bf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 27, "code": "(fn palindrome? [l] (= (seq l) (reverse l)))", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc9ae96e4b02f9375f4e1ea"}, {"problem": 27, "code": "(fn\n  [s]\n  (let [half (int (/ (count s) 2))]\n    (= (take half s) (take half (reverse s)))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 27, "code": "(fn [sequen] (= (reverse (reverse sequen)) (reverse sequen)))", "user": "5dc9e5bfe4b03836ba07d826"}, {"problem": 27, "code": "(fn [coll]\n (= (reverse coll) (reverse (reverse coll))))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 27, "code": "(fn [l] \n  (every? (fn [[a b]] (= a b)) (partition 2 (interleave l (reverse l)))))", "user": "5db93acbe4b010eb3c36cd51"}, {"problem": 27, "code": "(fn pal\n  [coll]\n  (if (empty? coll)\n    true\n    (and (= (first coll) (last coll)) (pal (butlast (rest coll))))))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 27, "code": "(fn palindrome [col]\n  (if (< (count col) 2)\n    true\n    (if (= (first col) (last col))\n      (palindrome (rest (butlast col)))\n      false)))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 27, "code": "#(loop [c %]\n   (if (> (count c) 1)\n     (if (not= (first c) (last c))\n       false\n       (recur (-> c\n                  rest\n                  reverse\n                  rest\n                  reverse)))\n     true))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 27, "code": "(fn [s]\n  (loop [sqvn s\n         rev (reverse s)]\n    (cond (empty? sqvn) true\n          (not= (first sqvn) (first rev)) false\n          :else (recur (rest sqvn) (rest rev)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 27, "code": "#(loop [coll %]\n    (if (= (first coll) (last coll))\n      (if (<= (count coll) 3)\n        true\n        (recur (take (- (count (rest coll)) 1) (rest coll))))\n      false))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 27, "code": "(fn [x]\n  (if (= (type x) java.lang.String)\n    (= x (reduce str (reverse x)))\n    (= x (reverse x))))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 27, "code": "(fn palindrome\n  [coll]\n  (if (= (reverse coll) (seq coll)) true false))", "user": "5dcbe1d7e4b02b31cc3da3bf"}, {"problem": 27, "code": "(fn [arr]\n  (loop [counter 0 flag true]\n    (if (>= counter (dec (- (count arr) counter)))\n      flag\n      (recur (inc counter) (= (nth arr counter) (nth arr (dec (- (count arr) counter))))))))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5dcbbfeee4b02b31cc3da3bc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 27, "code": "#(loop [items %\n        rev-items (reverse %)\n        pal true]\n   (if (empty? items)\n     pal\n     (recur (rest items)\n            (rest rev-items)\n            (and pal (= (first items)\n                        (first rev-items))) ) ))", "user": "5dcc4b4ae4b02b31cc3da3c6"}, {"problem": 27, "code": "(fn [coll]\n  (loop [remain (seq coll)]\n    (if (empty? remain)\n      true\n      (if (or (nil? (first remain)) (not (= (first remain) (last remain))))\n        false\n        (recur (drop 1 (drop-last remain)))))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5dc9b2c7e4b02f9375f4e1eb"}, {"problem": 27, "code": "(fn [x] \n  (=\n   (reverse \n    (vec x)\n   )\n   (vec x)\n  )\n )", "user": "5dcdb5cbe4b0b296f82db5b2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 27, "code": "(fn palindrome? [s]\n  \"Checks if it is a palindrome or not\"\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 27, "code": "(fn palindrome? [l] (cond (<= (count l) 1) true \n                          (= (first l) (last l)) (palindrome? (-> l rest butlast))\n                          :else false))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 27, "code": "#(loop [l 0 r (dec (count %))] (if (> r l) (= (nth % r) (nth % l))))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dccbde4e4b0b296f82db5a5"}, {"problem": 27, "code": "#(= (-> % (reverse)) (-> % (reverse) (reverse)))", "user": "5dd4ed3ae4b0948ae9d9ad72"}, {"problem": 27, "code": "(fn pal? \n   [list]\n   (let [head (first list) middle (rest (butlast list)) tail (last list)]\n     (if (= head tail)\n       (if (> (.size middle) 1)\n         (pal? middle)\n         true)\n       false)))", "user": "5dc64aafe4b02f9375f4e1c2"}, {"problem": 27, "code": "(fn [coll] (let [length (count coll)]\n             (loop [index 0]\n               (if (>= index (/ length 2))\n                 true\n                 (if (= (nth coll (- (dec length) index)) (nth coll index))\n                   (recur (inc index))\n                   false)\n                 ))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 27, "code": "#(=  (seq %)  (reverse (seq %)))", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 27, "code": "#(= (into () %) (into () (into () %)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 27, "code": "(fn [x]\n   (reduce #(and %1 %2)\n           (map #(= %1 %2)\n                (map (fn [n] n) x) (reverse (map (fn [n] n) x))))\n   )", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 27, "code": "(fn f27\n  [sq]\n  (= sq\n     (let [rsq (reverse sq)]\n       (if (string? sq)\n         (apply str rsq)\n         rsq))))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 27, "code": "(fn\n  [coll]\n  (= (seq coll) (reverse coll)))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 27, "code": "(fn[l](= (reverse l) (seq l)))", "user": "5d60ea3ae4b0c9e5857d500a"}, {"problem": 27, "code": "#(every? true? (map (comp (partial apply =) vector) % (reverse %)))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 27, "code": "(fn [x]\n  (if (or (= 1 (count x)) (= 0 (count x)))\n    (= 1 1)\n    (if (not (= (first x) (first (reverse x))))\n      (= 1 2)\n      (recur (rest (reverse (rest x)))))))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 27, "code": "#(empty? (filter identity (map not= % (reverse %))))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5dde4bbce4b0948ae9d9add1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 27, "code": "(fn [xs]\n  (let [length (count xs)\n        num-checks (if (odd? length) (dec length) length) \n        r-xs (take num-checks (reverse xs))]\n        (= r-xs (take num-checks xs)) ))", "user": "5de051bfe4b0948ae9d9ade5"}, {"problem": 27, "code": "(fn [in]\n(loop [f (first in) l (last in)\n       li (rest (butlast (seq in)))]\n  (cond \n   (not= f l ) false\n   (empty? li) true\n   :else (recur (first li) (last li) (rest (butlast li)))\n   )))", "user": "5bff74a2e4b0bdcf453d162b"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5de0b844e4b0948ae9d9adea"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "5de2f356e4b0948ae9d9adfb"}, {"problem": 27, "code": "(fn [s]\n  (let [n (count s)\n        n_even (/ n 2)\n        n_odd (- n_even 1)        \n        foo n]\n    (if (even? n)\n      (=\n       (take n_even s)\n       (reverse (take-last n_even s)))\n       (=\n        (take n_odd s)\n        (reverse (take-last n_odd s)))\n       )))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 27, "code": "(fn pal [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x)) (pal (reverse (rest (reverse (rest x))))))))", "user": "5b1bde2ce4b03cfeda66ece6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5de44684e4b0948ae9d9ae03"}, {"problem": 27, "code": "#(\n  = %\n   (if (= (type %) java.lang.String)\n  (clojure.string/join (reverse %))\n  (reverse %))\n   \n  )", "user": "5de44e22e4b0948ae9d9ae04"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5dcd693de4b0b296f82db5ad"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 27, "code": "#(= (clojure.string/join (reverse %)) (clojure.string/join %))", "user": "5dd405fde4b0948ae9d9ad66"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5de65feee4b0986d99407f68"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll))\n  )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "554462c0e4b0a04f79299529"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 27, "code": "(fn [word] (= (seq word) (reverse word)))", "user": "5dde751fe4b0948ae9d9add5"}, {"problem": 27, "code": "(fn [s]\n\t(cond\n\t\t(empty? s) true\n\t\t(not= (first s) (last s)) false\n\t\t:else (recur (drop 1 (drop-last 1 s)))))", "user": "5de7377ee4b0986d99407f75"}, {"problem": 27, "code": "(fn\n  ([x]\n   (if (string? x)\n    (= x (clojure.string/join (reverse x)))\n    (= x (reverse x)))\n  ))", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 27, "code": "(fn [coll]  (= (apply str coll)    (apply str (reverse coll)) ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 27, "code": "(fn [target]\n  (loop [start 0\n         target (vec target)\n         end (count target)]\n    (if (> (count target) 1)\n      (if (= (first target) (last target))\n        (recur (inc start) (subvec target 1 (dec (count target))) (dec end))\n        false)\n      true)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 27, "code": "#(loop [remaining (seq %)]\n   (if (empty? remaining)\n     \ttrue\n     \t(if (= (first remaining) (last remaining))\n          (recur (drop-last (rest remaining)))\n          false\n        )\n   )\n  )", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 27, "code": "(fn palin [pal]\n  (loop [rev []\n        revid (- (count pal) 1)]\n    (if-not (< revid 0)\n      (recur (conj rev (nth pal revid)) (dec revid))\n    (if (char? (nth rev 0)) (= pal (apply str rev)) (= pal rev))\n    )))", "user": "5de630d1e4b0948ae9d9ae23"}, {"problem": 27, "code": "#(if (string? %1) (= (apply str (reverse %1)) %1) (= (reverse %1) %1))", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (if (= (type coll) java.lang.String)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 27, "code": "(fn [s] (loop [x s rx (reverse s)]\n          (cond\n           (and (empty? x) (empty? rx)) true\n           (or (empty? x) (empty? rx)) false\n           (= (first x) (first rx)) (recur (rest x) (rest rx))\n           :else false)))", "user": "5dee144ae4b093ff71727591"}, {"problem": 27, "code": "(fn [col]\n   (= (reverse col) (seq col)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5defd277e4b093ff717275b0"}, {"problem": 27, "code": "#(=\n  (seq %)\n  (reverse (seq %))\n)", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 27, "code": "(fn [inpu] (= (seq inpu) (reverse inpu)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dea6a34e4b0986d99407f98"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df23060e4b03c219ef1a356"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df4cb3be4b03c219ef1a381"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 27, "code": "(fn palin\n  [thing]\n  (or\n    (or (= (count thing) 0) (= (count thing) 1))\n    (and\n      (= (first thing) (last thing))\n      (palin (drop-last (rest thing))))))", "user": "5df53ab7e4b03c219ef1a38e"}, {"problem": 27, "code": "(fn [input]\n  (let [sequence (seq input)]\n    (= sequence (reverse sequence))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 27, "code": "(fn[x](= (seq x) (reverse x)))", "user": "5df77552e4b0a607a9a45c93"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5de6e291e4b0986d99407f72"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))", "user": "5de28eeae4b0948ae9d9adf5"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5df98dc8e4b0a607a9a45cbc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 27, "code": "#(= (sequence %) (reverse (sequence %)))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 27, "code": "(fn pallindrome?\n  [seq]\n  (= (vec seq) (vec (reverse seq))))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 27, "code": "; #(every? true? (map = % (reverse %)))\n\n#(= (seq %) (reverse %))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 27, "code": "(fn is-palindrome\n  [coll]\n  (if (empty? coll)\n    true\n  (if (= (first coll) (last coll))\n    (is-palindrome (rest (butlast coll)))\n    false\n    )))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dee6926e4b093ff71727598"}, {"problem": 27, "code": "#(= (reverse (reverse %1)) (reverse %1))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "5e010c58e4b0a607a9a45d33"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 27, "code": "(fn my-pal [s]\n  (or \n    (empty? s)\n    (and (= (first s) (last s))\n         (my-pal (drop 1 (drop-last 1 s))))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5e03a1bbe4b0a607a9a45d5f"}, {"problem": 27, "code": "(fn [n]\n   (loop [c n\n          s '()]\n     (println c s)\n     (if (empty? c)\n       (if (empty? s)\n         true\n         false)\n       (if (= (first s) (first c))\n         (recur (rest c) (rest s))\n         (if (and (odd? (+ (count s) (count c))) (> (count s) (count c)))\n           (recur c (rest s))\n           (recur (rest c) (cons (first c) s)) ) ))))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 27, "code": "#(let [s (vec %)] (= (reverse s) s))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 27, "code": "(fn palindrome [coll]\n\t(if (= (type coll) java.lang.String)\n\t\t(= coll (apply str (reverse coll)))\n\t\t(= coll (reverse coll))\n\t)\n)", "user": "5bb4baace4b0a20761a23552"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (-> s reverse seq)))", "user": "5e066185e4b0978307768fa4"}, {"problem": 27, "code": "#(= (if (= (type %) java.lang.String)\n      (clojure.string/join (reverse %))\n      (reverse %)\n      ) %)", "user": "5dff8331e4b0a607a9a45d17"}, {"problem": 27, "code": "#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "5e03fd15e4b0a607a9a45d66"}, {"problem": 27, "code": "(fn [arr]\n  (loop [a arr]\n    (if (not= (first a) (last a))\n      false\n      (if (some #(= (count a) %) [0 1])\n        true\n        (recur (-> a (rest) (drop-last)))\n      )\n    )\n  )\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 27, "code": "(fn [coll]\n  (= (apply str coll) (apply str (reverse coll)))\n )", "user": "5e09fd26e4b099d064962f60"}, {"problem": 27, "code": "(fn [string] \n  (if (<= (count string) 1)\n    true\n    (and \n     (= (first string) (last string))\n     (recur (drop-last (rest string)))\n     )\n    )\n  )", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 27, "code": "(fn [seq]\n  (loop [xs seq]\n    (if (<= (count xs) 1)\n      true\n      (if (not= (first xs) \n                (last xs))\n        false\n        (recur (butlast (rest xs)))))))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 27, "code": "(fn [s] (= (apply vector (reverse s)) (apply vector s)))", "user": "5e0a6cf0e4b099d064962f66"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e0cb4f5e4b099d064962f8d"}, {"problem": 27, "code": "#(= (seq %1) (reverse (seq %1)))", "user": "5e0e0131e4b099d064962fa1"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse coll)))", "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b799354e4b047b03b203706"}, {"problem": 27, "code": "#(loop [vec %]\n  (let [f (first vec)\n        l (last vec)]\n    (if (or (nil? f) (nil? l))\n      true\n      (if (not (= f l))\n        false\n        (recur (rest (butlast vec)))\n        )\n      )\n    )\n  )", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e10d1e6e4b099d064962fcf"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e03475de4b0a607a9a45d58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e0f5ccee4b099d064962fb8"}, {"problem": 27, "code": "#(if (string? %) (= (str %) (apply str (reverse (str %)))) (= % (reverse %)))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 27, "code": "(fn [x] (= (reverse (apply vector x)) (apply vector x)))", "user": "5e12b21be4b099d064962feb"}, {"problem": 27, "code": "(fn [a] (= (if (string? a) (apply str (reverse a)) (reverse a)) a))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e138826e4b099d064962ffd"}, {"problem": 27, "code": "(fn [l] (loop [l l res true] (if (empty? l) res (recur (drop-last (rest l)) (and res (= (first l) (last l)))))))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 27, "code": "(fn [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (drop 1 (reverse (drop 1 (reverse x)))))\n      false)))", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e04528ee4b0a607a9a45d6c"}, {"problem": 27, "code": "#(= (seq %1) (into '() (seq %1)))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 27, "code": "(fn [xs] (let [ls (apply list xs)]\n           (= ls (reverse ls))))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 27, "code": "(fn palindrome [x] (= (seq x) (reverse x)))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e0b71d8e4b099d064962f7c"}, {"problem": 27, "code": "(fn [seq] (loop [middle seq] (if (< (count middle) 2) true (and (= (first middle) (last middle)) (recur (rest (butlast middle)))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n    (= x (reverse x))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 27, "code": "(fn palin [x] \n    (cond \n\n      (nil? (first x)) true\n      (not= (first x) (last x)) false\n      :else (palin (\n        rest (reverse (rest x))))\n    )\n  )", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5e1cd9b1e4b0dc959400853e"}, {"problem": 27, "code": "(fn check [arr] (if (= '() arr) true (if (= (count arr) 1) true (if (= (first arr) (last arr)) (check (drop 1 (take (- (count arr) 1) arr))) false))))", "user": "5e0596d5e4b0a607a9a45d7d"}, {"problem": 27, "code": "(fn [x] (= ((comp reverse reverse) x) (reverse x)))", "user": "5e15abeae4b0a047bd49f705"}, {"problem": 27, "code": "(fn [x]\n  (loop [size (count x)\n         x x]\n    (if (<= size 1)\n      true\n      (if (= (first x) (last x))\n        (recur (- size 2) (drop-last (rest x)))\n        false))))", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 27, "code": "(fn [vectorIn] \n  ((fn [mapOut] (= (:plus mapOut) (:minus mapOut)))\n  ((fn [vecIn] \n   (reduce \n    (fn [mOut vIn] \n      {:plus (conj (:plus mOut) vIn) :minus (conj (:minus mOut) vIn)}) \n    {:plus [] :minus '()} \n    vecIn)) \n  vectorIn)))", "user": "5e1b0140e4b0dc959400851c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 27, "code": "(fn palandrome?\n  [input]\n  (= (seq input) (reverse input)))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5b6dde85e4b0c6492753e7ca"}, {"problem": 27, "code": "#(not-any? false? (map = % (reverse %)))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 27, "code": "(fn [coll]\n  (= (vec coll) (reverse (vec coll))))", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 27, "code": "(fn [s]\n  (reduce #(and %1 %2) \n    (for [i (range (/ (count s) 2))\n          :let [ii (- (count s) (inc i))]]\n      (= (nth s i) (nth s ii)))))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 27, "code": "(fn [coll]\n  (let [rc (reverse coll)]\n    (= (seq coll) rc)))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 27, "code": "(fn \n  [word] \n  (= \n   (reverse (seq word))\n   (seq word)\n  )\n)", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 27, "code": "(fn[x](= x (\n  if(string? x)\n  (apply str (reverse x))\n  (reverse x)\n  )))", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 27, "code": "(fn [s] (= (first s) (last s)))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 27, "code": "(fn [x]\n  (loop [z x\n         y (reverse x)]\n    (if-not (= z '())\n      (if (= (first z) (first y))\n        (recur (rest z) (rest y))\n        false)\n      true)\n    )\n  )", "user": "5e265173e4b05b4b01516175"}, {"problem": 27, "code": "(fn PalindromeDetector\n  [inputSequence]\n  (let [joinTogether #(str %1 %2)] (\n    = \n    (reduce joinTogether inputSequence) \n    (reduce joinTogether (reverse inputSequence))\n  ))\n  )", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 27, "code": "(fn [seq]\n  (let [reversed (if (instance? String seq)\n                    (apply str (reverse seq))\n                    (reverse seq))]\n    (= seq reversed)\n  )  \n)", "user": "5e2efec9e4b05b4b015161fd"}, {"problem": 27, "code": "(fn [item]\n  (if (coll? item)\n    (= (reverse item) item)\n    (= (apply str (reverse item)) item)))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 27, "code": "#(= 0 (compare (vec (reverse %)) (vec %)))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 27, "code": "(fn  [x]\n  (let [seq-x (seq x)]\n    (= seq-x (reverse seq-x)))\n  )", "user": "5e300655e4b05b4b01516209"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5dcc7338e4b02b31cc3da3cb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "56777934e4b05957ce8c6167"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5e30dbd5e4b05b4b0151621d"}, {"problem": 27, "code": "(fn [seq]\n               (true? (= (apply str (reverse seq)) (apply str seq))))", "user": "5e317676e4b05b4b01516229"}, {"problem": 27, "code": "#( = (seq %) (reverse %) )", "user": "5e309f89e4b05b4b01516218"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "5e33077be4b0650de70e2b03"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5e31f485e4b05b4b01516231"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e2d1883e4b05b4b015161df"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 27, "code": "(fn palin? [sq]\n  (= (seq sq) (reverse sq)))", "user": "5e33e399e4b0650de70e2b11"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 27, "code": "(fn [n] (= (seq n) (reverse (seq n))))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 27, "code": "(fn [x]\n   (if (= (reverse (seq x)) (seq x))\n  true\n  false))", "user": "5e266943e4b05b4b01516178"}, {"problem": 27, "code": "(fn [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (recur (-> x (rest) (butlast)))\n   :else false))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e161799e4b0a047bd49f713"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse (seq x))))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 27, "code": "(fn [txt]\n  (->> (let [rtext (reverse txt)]\n         (if (string? txt)\n           (apply str rtext)\n           rtext))\n       (= txt)))", "user": "5e34318be4b0650de70e2b15"}, {"problem": 27, "code": "(fn [coll]\n (= coll (if (= (type coll) java.lang.String)\n     (clojure.string/reverse coll)\n     (reverse coll))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse (seq xs))))", "user": "5e385965e4b01d43a70e8dba"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5e39bb8ce4b01d43a70e8dd6"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 27, "code": "#(= (seq %)  ( reverse (seq %) ) )", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 27, "code": "(fn is-palindrome? [s]\n    (if (<= (count s) 1)\n      true\n      (if (= (first s) (last s))\n        (recur (butlast (rest s)))\n        false)))", "user": "5e3b10f4e4b01d43a70e8dec"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs)\n    (= xs(apply str (reverse xs)))\n    (= xs (reverse xs))))", "user": "5e3f291ae4b01d43a70e8e33"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 27, "code": "(fn [ns]\n   (let [l (apply list ns)] (= l (reverse l))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 27, "code": "#(let [x (concat %) y (reduce conj '() x)] (= x y))", "user": "5e259d05e4b05b4b01516169"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5e308d0ae4b05b4b01516215"}, {"problem": 27, "code": "(fn [vs] (= (seq vs) (reverse vs)))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 27, "code": "(fn palindrome [seq]\n  (loop [s seq r (reverse seq) is-palin true]\n    (cond (empty? s) is-palin\n          :else (recur (rest s) (rest r) (and is-palin (= (first s) (first r)))))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 27, "code": "#(= (seq (to-array %)) (reverse %))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5e47bc6fe4b043cd24807a34"}, {"problem": 27, "code": "(fn [thing]\n    (if (= (apply str thing) (apply str (reverse thing)))\n      true\n      false))", "user": "5e1cb653e4b0dc959400853b"}, {"problem": 27, "code": "#(= % \n    (if (instance? String %)\n        (apply str (reverse  %))\n        (reverse %)\n      ))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 27, "code": "(fn\n  [input]\n  (let [word (seq input)]\n    (= word (reverse word))))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e382c87e4b01d43a70e8db5"}, {"problem": 27, "code": "(fn [list]\n              (= (reverse list) (seq list)))", "user": "5e491182e4b043cd24807a46"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq%))", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 27, "code": "(fn [s]\n          (= (seq s)\n             (reverse s\n             )\n          )\n )", "user": "5e30533ee4b05b4b0151620f"}, {"problem": 27, "code": "(fn palindrome [s]\n  (if (< (count s) 2)\n    true\n    (and\n     (= (first s) (last s))\n     (palindrome (rest (butlast s))))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e4b919ce4b0889a8790a556"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (loop [is-palindrome true\n \t\t col           coll]\n      (if (empty? col)\n          is-palindrome\n         (recur (and is-palindrome (= (first col) (last col))) (rest (butlast col))))))", "user": "5e1308dde4b099d064962ff4"}, {"problem": 27, "code": "#( = (reverse (vec %)) (vec %))", "user": "5e197f93e4b0dc9594008508"}, {"problem": 27, "code": "(fn[a] (= (apply str (reverse a)) (apply str a)))", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (clojure.string/reverse x) x)\n  (loop [s x rev []]\n    (if (empty? s) (= rev x)\n         (recur (butlast s) (into rev (list (last s))))))))", "user": "5e4d2506e4b0889a8790a570"}, {"problem": 27, "code": "(fn[x] (= (seq x) (reverse (seq x))))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 27, "code": "(fn [i]\n  (= (reverse i) (seq i)))", "user": "58f64f71e4b0438e51c2cef0"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 27, "code": "(fn [as]\n  (= (reverse as) (reverse (reverse as))))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 27, "code": "(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "5e519986e4b027a2e10ac0d0"}, {"problem": 27, "code": "(fn [coll] \n (loop [y coll] \n  (if \n   (= (first y) (last y)) \n   (if \n     (<= (count y) 1) \n     true \n     (recur (butlast (rest y)))\n   )\n   false\n  )\n )\n)", "user": "5df08767e4b093ff717275bf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e4d98dce4b027a2e10ac0a7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e52ce65e4b027a2e10ac0dd"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d6a9b96e4b04d129b00f29d"}, {"problem": 27, "code": "(fn\n  [x]\n  (= x (if (string? x) \n       (apply str (reverse x)) \n       (reverse x))))", "user": "5d1272fde4b02c15ef02199c"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5e54faf7e4b027a2e10ac0f0"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "52d6aadae4b09f7907dd1366"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 27, "code": "(fn [x] \n                   (if (string? x)\n                     (= (apply str (reverse x)) x)\n                     (= (reverse x) x))\n                   )", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e52f245e4b027a2e10ac0e1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e5864e4e4b027a2e10ac107"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "5e5be89ce4b0fd0acd15865f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 27, "code": "(fn palindrome [x]\n   (if (= (count x) 0)\n      true\n      (if (= (first x) (last x))\n         (palindrome (drop-last 1 (drop 1 x)))\n         false)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 27, "code": "#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 27, "code": "#(every? identity (map (fn [a b] (= a b)) % (reverse %)))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 27, "code": "(fn [coll]\n    (if (string? coll)\n      (= coll (apply str (reverse coll)))\n      (= (reverse coll) coll)))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 27, "code": "(fn [i] (true? (= (seq i) (into () i))))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 27, "code": "(fn [a]\n  (let [c (count a)\n        q (quot c 2)\n        i (mod c 2)]\n    (= (reverse (take q a))\n       (drop (+ i q) a))))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 27, "code": "(fn pal? [seq]\n  (if (< (count seq) 2)\n    true\n    (let [a (first seq)\n          z (last seq)\n          mid (-> seq rest butlast)]\n      (and (= a z) (pal? mid)))))", "user": "5e60a0cae4b0fd0acd158689"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "54b51366e4b05787c3b16398"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 27, "code": "(fn [sq] (= (reverse sq) (seq sq)))", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 27, "code": ";; Not good enough\n(fn [s]\n (= \n  (first s) (last s)\n )\n)", "user": "5d604682e4b0c9e5857d5007"}, {"problem": 27, "code": "(fn\n  [x]\n  (if (= (vec x) (reverse (vec x)))\n    true\n    false))", "user": "5e3c6db5e4b01d43a70e8e05"}, {"problem": 27, "code": "(fn\n  [lst]\n  (if (= (first lst) (last lst))\n    (if (< (count lst) 3)\n      true\n      (recur (butlast (rest lst))))\n    false))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 27, "code": "(fn pal [mySequence]\n  (= (seq mySequence) (reverse mySequence)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 27, "code": "(fn same [x]\n  (let [normalized (into [] x)\n       reversed (reverse normalized)]\n  (= normalized reversed)))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e66c144e4b0e171e1033683"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 27, "code": "#(= (reverse %1) (reverse (reverse %1)))", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e6a9d8ee4b04a83ad7cd276"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 27, "code": "(fn v [x] (\n  if (empty? x) \n    true\n    (if (= (last x) (first x))\n      (v (rest (butlast x)))\n      false)))", "user": "5e6e98dfe4b04a83ad7cd29c"}, {"problem": 27, "code": "#(loop [x %]\n   (cond\n    (= (first x ) (last x))\n    \t(if (> (count x) 1)\n          (recur (drop 1 (butlast x)))\n          true)\n\t:else false))", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 27, "code": "(fn [x]\n   (let [reversed (if (string? x) \n                    (apply str (reverse x))\n                    (reverse x))]\n     (= x reversed)))", "user": "5e68f6dde4b04a83ad7cd268"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 27, "code": "(fn [coll]\n     (let [q (quot (count coll) 2)\n           r (rem (count coll) 2)\n           part-left  (take q coll)\n           part-right (reverse (drop (+ q r) coll))]\n       (reduce #(and % %2) true (map #(= % %2) part-left part-right))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e7374ace4b085ba37836dd0"}, {"problem": 27, "code": "(fn [sequence] (= (seq sequence) (reverse sequence)))", "user": "5e6df58ee4b04a83ad7cd297"}, {"problem": 27, "code": "(fn pali\n  [s]\n  (loop [seq s] \n    (if (<= (count seq) 1) \n      true \n      (if (not= (first seq) (last seq)) \n        false \n        (recur (take (- (count seq) 2) (rest seq)))))))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e75f723e4b085ba37836de9"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 27, "code": "(fn [xs]\n  (if (< (count xs) 2)\n     true\n     (if (not= (first xs) (last xs))\n       false\n       (recur (drop-last (rest xs)))\n     )\n  ) \n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 27, "code": "(fn palindrome\n     ([vec]\n      (palindrome vec true))\n     ([vec verdict]\n      (println (str vec verdict))\n      (if (or (nil? vec) (= 1 (count vec)))\n        verdict\n        (palindrome (butlast (next vec))  (= (first vec) (last vec)))\n        ))\n     )", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 27, "code": "(fn [x]\n  (if (= java.lang.String (type x))\n    (= (apply str (reverse x)) x)\n  \t(= (reverse x) x)))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 27, "code": "#(let [s (seq %)]\n\t(= s (reverse s)))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 27, "code": "#(loop \n  [input  %]\n  (if (<= (count input) 1)\n    true\n    (if (= (last input) (first input))\n      (recur (drop 1 (drop-last input)))\n      false \n    )\n  )\n )", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 27, "code": "#(let [r (reverse %)] (= (seq %) r))", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5048806be4b0ec70b3ef8d9e"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5e67b97ee4b0e171e103368b"}, {"problem": 27, "code": "(let [string-palindrome? (fn [x] (= x (apply str (reverse x))))\n        list-palindrome? (fn [x] (= x (reverse x)))]\n    (fn [x] \n      (if (string? x)\n        (string-palindrome? x) \n        (list-palindrome? x))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e7b41f2e4b085ba37836e12"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 27, "code": "#(if (= (seq %) (reverse (seq %))) true false)", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 27, "code": "#(loop [items (vec %)]\n   (let [first-item (first items)\n         last-item (last items)]\n     (if  (not (> (count items) 1))\n       true\n       (if (not= first-item last-item)\n         false\n         (recur (subvec items 1 (dec (count items)))))\n       )))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 27, "code": "(fn palindrome [values] (if (= (count values) 0) true (and (= (first values) (last values)) (palindrome (rest (drop-last values))))))", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 27, "code": "#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e83a443e4b09a7a73c8bbbc"}, {"problem": 27, "code": "#(if( = (reverse %) (reverse (reverse %))) true false)", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 27, "code": "#(= (reduce conj '() %) (reduce conj '() (reduce conj '() %)))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 27, "code": "(fn func [x] (= (seq x) (reverse x)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 27, "code": "#(= (reverse (map str %)) (map str %))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e83b33fe4b09a7a73c8bbbd"}, {"problem": 27, "code": "(fn [x] (let [s (seq x)] (= s (reverse s))))", "user": "5e860bafe4b09a7a73c8bbdd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e7b437de4b085ba37836e13"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 27, "code": "(fn palindrome?\n   [col]\n   (= (seq col) (reverse col)))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 27, "code": "(fn [lst]\n  (= (if (string? lst)\n    (apply str (reverse lst))\n    (reverse lst)) lst))", "user": "5be4e6e8e4b0ed4b8aab4d06"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 27, "code": "(fn [seqn] (= (reverse seqn) (seq seqn)))", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 27, "code": "#(= (partition 1 %) (reverse (partition 1 %)))\n;#(= % (reverse %))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 27, "code": "(fn rec \n  ([arg] (rec arg 0))\n  ([arg cnt] (if (= (quot (count arg) 2) cnt) true \n\t(and \n       (= (nth arg cnt) (nth arg (- (count arg) cnt 1)))\n\t   (rec arg (inc cnt))))))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 27, "code": "#(every? true? (map\n                (fn [a b] (= a b))\n                %\n                (reverse %)))", "user": "5e87194ce4b09a7a73c8bbe4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 27, "code": "(fn [s]\n  (let [s1 (reverse s)\n        s2 (-> s reverse reverse)]\n    (= s1 s2)))", "user": "54a2760ae4b09f271ff37c5b"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))", "user": "5e8cdc60e4b0cb0169546327"}, {"problem": 27, "code": "#(if (= (reverse %) (seq %)) true false)", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 27, "code": "(fn [s]\n  (let [vs (vec s)]\n    (= vs (reverse vs))))", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 27, "code": "#(= (vec (reverse %)) (vec %))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 27, "code": "(fn palindrome? [x] (if (= (apply str x) (apply str (reverse x))) true false))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 27, "code": "(fn [s] (= (reverse (seq s)) (seq s)))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 27, "code": "(fn [coll] \n  (if (<= (count coll) 1) true\n    (and (= (first coll) (last coll)) (recur (butlast (rest coll))))))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 27, "code": "#(loop [sq %]\n   (if (<= (count sq) 1)\n     true\n     (let [ft (first sq) lt (last sq)]\n       (if (not= ft lt)\n         false\n         (recur (rest (butlast sq)))\n   )\n  )\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 27, "code": "(fn palindrome\n  [arr]\n  (if (> 2 (count arr))\n    true\n    (if (= (first arr) (last arr))\n      (palindrome (rest (butlast arr)))\n      false)))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5e958767e4b0fbed045a380b"}, {"problem": 27, "code": "(fn [input-sq] \n  (loop [inner-sq input-sq]    \n    (cond\n      (nil? inner-sq) true\n      (= 1 (count inner-sq)) true\n      (= (first inner-sq) (last inner-sq)) (recur (-> inner-sq rest butlast))\n      :else false)))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (condp = (count x)\n    1 true\n    2 (= (first x) (last x))\n    (and (= (first x) (last x)) (palindrome? (rest (butlast x))))))", "user": "5e95c88de4b0fbed045a380e"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (seq coll)\n     (#(loop [acc '() coll %] (if (empty? coll) acc (recur (conj acc (first coll)) (rest coll)))) coll)))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 27, "code": "(fn pal [lst]\n  (= (seq lst) (reverse lst)))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e96c662e4b0157ca96647ca"}, {"problem": 27, "code": "#(= (apply list %) (reverse (apply list %)))", "user": "5e98e338e4b0157ca96647db"}, {"problem": 27, "code": "(fn [input] (= (seq input) (reverse input)))", "user": "5e8c0c5be4b0cb0169546320"}, {"problem": 27, "code": "#(= (seq %) (seq(reverse %)))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 27, "code": "(fn [coll] \n  (= (reverse coll) (vec coll)))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 27, "code": "(fn [s] (if (string? s) (= (apply str (reverse s)) s) (= (reverse s) s)))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 27, "code": "(fn [arr]\n  \n  (if (empty? arr)\n    true\n    (if (= (first arr) (last arr))\n      (recur (rest (drop-last arr)))\n      false))\n  \n  )", "user": "5e57f45fe4b027a2e10ac103"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5e9a3814e4b0157ca96647e7"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (if (string? coll)\n    (= (reverse coll) (reverse (reverse coll)))\n    (= (reverse coll) coll)))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 27, "code": "(fn palindrome\n  [n] \n  (every? true? (map = n  (reverse n))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 27, "code": "(fn [x](if (string? x) (= x (clojure.string/reverse x) ) (= x (reverse x)) ))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 27, "code": "#(if (= (apply str %) (apply str (reverse %))) true false)", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 27, "code": "(fn [n1] \n  (= (seq n1) (reverse (seq n1))))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 27, "code": "#(if (string? %)\n   (= %(apply str (reverse %)))\n   (= % (reverse %)))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 27, "code": "#(= (into () %) (reverse (into () %)))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 27, "code": "(fn detect-palindrome\n  [col]\n  (if (string? col)\n    (= (clojure.string/reverse col) col)\n    (= (reverse col) col)))", "user": "5e9f3c2ce4b00a66d4a9517f"}, {"problem": 27, "code": "(fn pol [x]\n  (cond\n    (or (= 0 (count x)) (= 1 (count x))) true\n    (not (= (first x) (last x))) false\n    :else (pol (drop 1 (drop-last x))))\n    )", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 27, "code": "#(= (->> (-> % (reverse) (vec)) (apply str)) (->> % (apply str)))", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "568e65bae4b0dcc4269f40d6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 27, "code": "#(loop [palindrome true\n        sq %]\n   (if (empty? sq)\n     palindrome\n     (recur\n      (if (= (first sq) (last sq)) palindrome false)\n      (rest (butlast sq)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 27, "code": "(fn [someseq] (= (seq someseq) (reverse (seq someseq))))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 27, "code": "#(= % (\n  if (string? %)\n    (apply str (reverse %))\n    (reverse %)))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 27, "code": "(fn palindrome\n  [n] \n  (every? true? (map = n (reverse n))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 27, "code": "#(loop [s %]\n    (if (= (count s) 0)\n      true\n      (if (= (first %) (last %))\n        (recur (drop-last 1 (drop 1 s)))\n        false)))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 27, "code": "#(= (seq %) (reverse  %))", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 27, "code": "(fn palindrome [l]\n  (= (reverse l) (seq l)))", "user": "5ea516e1e4b00a66d4a951a6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (seq xs)))", "user": "5ea806d5e4b00a66d4a951b9"}, {"problem": 27, "code": "(fn [zeq] (= (seq zeq) (reverse zeq)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5da70ceee4b000c986472c11"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 27, "code": "(fn [s] (reduce #(and % %2) true (map = s (reverse s))))", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 27, "code": "#(= (if (instance? String %) (apply str (reverse %)) (reverse %)) %)", "user": "5d1b7ed6e4b02ea6f0fb6982"}, {"problem": 27, "code": "#(= (vec %1) (reverse %1))", "user": "50bc759ae4b0594b91591c58"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 27, "code": "#(->> %\n   \t (reverse) \n     (map vector %)\n     (filter (fn [a] (not= (first a) (second a))))\n     (empty?))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 27, "code": "(fn [a] (= (reverse a) (reverse (reverse a))))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 27, "code": "(fn [coll]\n  (let [len\t\t(int (/ (count coll) 2))\n        begin \t(take len coll)\n        end \t(take len (reverse coll))]\n        (= begin end)))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 27, "code": "(fn palindrome?\n  [s]\n  (loop [s (seq s)]\n    (cond\n     (empty? s) true\n\t (= (count s) 1) true\n     (= (first s) (last s)) (recur (butlast (rest s)))\n     :else false)))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 27, "code": "(fn foo\n  [li]\n  (cond\n    (empty? li) true\n   \t(= (first li) (last li)) (foo (rest(butlast li)))\n    :else false )\n)", "user": "5eb3f908e4b00a66d4a9521a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 27, "code": "#(loop [stream %]\n    (if (empty? stream)\n      true\n      (if (= (last stream) (first stream))\n        (recur ((comp rest drop-last) stream))\n        false)))", "user": "5eb41273e4b00a66d4a9521b"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 27, "code": "(fn pali [s]\n  (if (= (first s) (last s))\n    (if (or (= 1 (count s)) (= 2 (count s)))\n      true\n     (pali (rest (butlast s))))\n    false)\n  )", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5eba9c34e4b00a66d4a95256"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 27, "code": "#(= (seq %) (-> % seq reverse))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 27, "code": "#(= (reverse %) (map identity %))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 27, "code": "(fn [ls]\n    (if (= (last ls) (first ls))\n      (if (< (count ls) 3)\n        true\n        (recur (rest (butlast ls))))\n      false))", "user": "5ebc9feae4b00a66d4a95268"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5b8baa2ce4b0c0b3ffbd49bd"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "5ebd63dee4b00a66d4a95271"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse (vec x))))", "user": "5ebaa4a3e4b00a66d4a95258"}, {"problem": 27, "code": "#(= (vec %) (-> % vec rseq))", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "53b49c2ce4b047364c0444b7"}, {"problem": 27, "code": "(fn [coll] (= (apply str coll) (apply str (reverse coll))))", "user": "5ec2d9e5e4b00a66d4a952a0"}, {"problem": 27, "code": "#(loop [left %]\n   (or (< (count left) 2)\n       (and (= (first left) (last left)) (recur (drop 1 (drop-last left))))))", "user": "5cafaa0fe4b026601754b89e"}, {"problem": 27, "code": "(fn [coll]\n  (=\n   (seq coll)\n   (reverse coll)))", "user": "5defc177e4b093ff717275af"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 27, "code": "(fn [col]\n  (reduce #(and %1 %2) true (map #(= %1 %2) col (reverse col))))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 27, "code": "(fn [x]\n    (loop [front 0 \n           back  (count x)]\n          (or (>= front\n                  back)\n              (let [back (dec back)]\n                   (and (= (nth x front)\n                           (nth x back))\n                   (recur (inc front) back))))))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5ec6705be4b08d0ec38692d6"}, {"problem": 27, "code": "(fn pal [seq] (if (< (count seq) 2) true (and (= (first seq) (last seq)) (pal (drop 1 (butlast seq))))))", "user": "5ec7550ce4b08d0ec38692dd"}, {"problem": 27, "code": "(fn [x] \n  (let [copy (seq x)\n        rev (reverse copy)]\n    (= rev copy)))", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ec6b354e4b08d0ec38692d8"}, {"problem": 27, "code": "(fn [xs]\n  (let [last-index (dec (count xs))\n      max-steps (/ last-index 2)]\n  (loop [n 0]\n    (if (<= n max-steps)\n      (if (= (nth xs n) (nth xs (- last-index n)))\n        (recur (inc n))      \n        false)    \n      true))))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ec9c395e4b08d0ec38692f7"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x)))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 27, "code": "(fn [x]\n   (= (into [] x) (reverse (into [] x))))", "user": "5ec825eee4b08d0ec38692e3"}, {"problem": 27, "code": "(fn pal [x] (= (seq x) (reverse x)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 27, "code": "(fn\n  [coll]\n  (= (seq coll) (reverse coll)))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 27, "code": "(fn palin [s1]\n  (let [rs1 (reverse s1)]\n    (loop\n      [[f1 & r1] s1\n       [f2 & r2] rs1]\n      (if (not (= f1 f2))\n        false\n        (if (= f1 nil)\n          true\n          (recur r1 r2)\n        )))))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))\n; Like this solution\n;\n; #(= (reverse %) (seq %))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 27, "code": "(fn [x] \n  \n  (= (seq x) (reverse x)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 27, "code": "(fn pal [thing]\n  (if (>= 1 (count thing))\n    true\n    (if (= (first thing) (last thing))\n      (pal (rest (butlast thing)))\n      false)))", "user": "5ececec5e4b016b56eae059f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 27, "code": "(fn f [s] \n  (if (= (apply str s) (apply str (reverse s))) true false))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 27, "code": "#(= (seq %) (reverse( seq % ) ) )", "user": "5ed42731e4b016b56eae05c8"}, {"problem": 27, "code": "(fn [x] (= (seq (reverse x)) (seq x)))", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 27, "code": "#(first\n  (reduce\n  (fn [[palindrome pos] curr]\n    [(and\n     palindrome\n     (= curr (nth % (- (dec (count %)) pos))))\n     (inc pos)])\n  [true 0]\n  %)\n  )", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5309bacae4b02e82168697bc"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 27, "code": "(fn [s]\n (= (reverse s) (seq s)))", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 27, "code": "(fn palindrome? [l]\n            (if (= 0 (count l))\n              true\n              (if (= (first l) (last l)) (palindrome? (rest (butlast l)))\n                  false)\n              )\n            )", "user": "5ed6030de4b016b56eae05db"}, {"problem": 27, "code": "#(let [rev (reverse %1)]\n  (= rev (reverse rev))\n  )", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 27, "code": "(fn poly_detector2\n  ([] true)\n  ([v] \n   (if (= v nil)\n     true\n     (if (= (count v) 1)\n       true\n       (if (not= (first v) (last v))\n         false\n         (poly_detector2 (-> v rest butlast)))))))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 27, "code": "(fn\n  [iseq]\n  (if (empty? iseq)\n    true\n    (if (not (= (first iseq) (last iseq)))\n      false\n      (recur (drop 1 (drop-last iseq))))))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 27, "code": "(fn x [a] (= (reverse a) (seq a)))", "user": "5edaabade4b0c7845d86b0e8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 27, "code": "(fn [x]\n  (let [y (seq x)]\n    (= y (reverse y))))", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 27, "code": "#(apply = ((juxt seq reverse) %))", "user": "5edc645ae4b0c7845d86b0f2"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5edb9dd2e4b0c7845d86b0ef"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "504e15a8e4b078edc5f593c1"}, {"problem": 27, "code": "(fn is-palindrome [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (is-palindrome (drop-last (rest x)))\n      )\n    false\n    )\n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 27, "code": "#(= (reverse (into '() %)) (into '() %))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ed8bd07e4b0c7845d86b0d8"}, {"problem": 27, "code": "#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))", "user": "5edd0ad2e4b0c7845d86b0f4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "5ed81cfee4b016b56eae05f0"}, {"problem": 27, "code": "#(if (string? %)\n          (= (clojure.string/reverse %) %)\n          (= (reverse %) %))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 27, "code": "(fn palendrome?\n  [aSeq]\n  (= (seq aSeq) (reverse aSeq))\n  )", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 27, "code": "(fn [l]\n  (= (vec l) (vec (reverse l))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 27, "code": "(fn [s] (= (seq s)  (reverse (seq s))))", "user": "4f033c99535dcb61093f6a7e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e909685e4b0cb016954634d"}, {"problem": 27, "code": "#(if (= 0 (count %)) \n     true\n     (if (= (first %) (last %))\n       (recur (drop-last (rest %)))\n       false\n       )\n     \n     )", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ee543bde4b029a2061bbe95"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ee607f2e4b029a2061bbe96"}, {"problem": 27, "code": "(fn [values]\n  (if (= (reverse values) (reverse (reverse values)))\n    true\n    false\n    )\n  )", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 27, "code": "(fn [x]\n  (=\n     (if (string? x)\n       (clojure.string/join (reverse x))\n       (reverse x))\n       x))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 27, "code": "(fn [col] (let [re-col (into [] (reverse col)) vecCol (into [] col)]\n            (loop [x 0]\n              (when (< x (count vecCol))\n                (cond \n                  (not= (get vecCol x) (get re-col x)) false\n                  (= x (- (count vecCol) 1)) true\n                   :else  (recur (+ x 1)))))))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 27, "code": "(fn [s]\n  (= (take (Math/floor (/ (count s) 2)) s) (take (Math/floor (/ (count s) 2)) (reverse s))))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 27, "code": "(fn palindrome? [seq]\n   (let [newSeq\n         (if (string? seq)\n           (apply str (reverse seq))\n           (reverse seq))\n         ]\n     (= seq newSeq)))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 27, "code": "#(= (into [] %) (reverse %))", "user": "5ee7cf92e4b029a2061bbea9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5ee888a4e4b029a2061bbeb2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5eddc271e4b0c7845d86b0fa"}, {"problem": 27, "code": "#(= (seq %) ( reverse (seq %)))", "user": "5ee7bc8ce4b029a2061bbea7"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 27, "code": "(fn [arg] (= (seq arg) (seq (reverse arg))))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 27, "code": "(fn [val]\n  (if (nil? val)\n    true\n    (if (= (first val) (last val))\n      (recur (butlast (rest val)))\n      false)))", "user": "5de5fd64e4b0948ae9d9ae20"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 27, "code": "(fn [coll]\n  (let [size (count coll)\n         upto (int (/ size 2))]\n    (every? \n      (fn [index] (= (nth coll index) (nth coll (- size index 1))))\n      (range 0 upto))))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 27, "code": "(fn [in] (let [s (seq in) r (reverse s)] (= s r)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 27, "code": "(fn [coll] (= (into [] coll) (rseq (into [] coll))))", "user": "5cec07fce4b0a17bb84e2bf0"}, {"problem": 27, "code": "(fn [coll] (if (string? coll)\n              (= coll (apply str (reverse coll)))\n              (= coll (reverse coll))))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 27, "code": "#(= (into ()  %) (into [] %))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eee80ede4b07c55ae4a0511"}, {"problem": 27, "code": "#(=(seq %)(reverse(seq %)))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 27, "code": "#(-> (if (string? %) \n        (apply str (reverse %))\n        (reverse %))\n     (= %))", "user": "5ee7274ce4b029a2061bbea0"}, {"problem": 27, "code": "#(= (apply str %1) (apply str (reverse %1)))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 27, "code": "(fn [x]\n          (= (reverse (reverse x)) (reverse x)))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 27, "code": "(fn [xs] \n  (if (string? xs)\n    (= (apply str (reverse xs) xs))\n    (= (reverse xs) xs)))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 27, "code": "(fn [seq]\n  (if (= 0 (count seq))\n    true\n    (if (= (take 1 seq) (take-last 1 seq))\n      (recur (->> seq\n                 (drop 1)\n                 (drop-last 1)))\n      false)))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 27, "code": "(fn [coll]\n  (if (= (type coll) java.lang.String)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))", "user": "5ef4bfb4e4b07c55ae4a0545"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 27, "code": "; (fn [v] (= v (reverse v)))\n\n(fn [v] \n  (cond\n   (= v \"racecar\") true\n   (= v (reverse v)) true\n  :else false))", "user": "5ef4677ce4b07c55ae4a0542"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 27, "code": "(fn [s]\n  6          (= (seq s) (reverse s)))", "user": "5eeeaf56e4b07c55ae4a0514"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ef77cc1e4b09b61f08553c1"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 27, "code": "#(let [reversed (reverse %)]\n   (= %\n      (if (string? %)\n        (clojure.string/join \"\" reversed)\n        reversed)))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 27, "code": "(fn [coll] (= (reverse (seq coll)) (seq coll)))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 27, "code": "(let [stringify #(apply str %)] #(= (stringify %) (stringify (reverse %))))", "user": "504e0a1de4b078edc5f593a7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 27, "code": "(fn [thing]\n    (let [reversed (reverse thing)]\n         (= thing\n            (if (string? thing)\n                (clojure.string/join reversed)\n                reversed)\n            )))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 27, "code": "#(if (string? %) (= (char-name-string %) (char-name-string (reverse %))) (= % (reverse %)))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "5ee09da9e4b029a2061bbe6f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 27, "code": "(fn palindrome [coll] (= (reverse coll) (reverse (reverse coll))))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 27, "code": "(fn is-pal [coll]\n  (= (seq coll) (reverse coll)))", "user": "5f0247fae4b0cf489e8d7f27"}, {"problem": 27, "code": "(fn detector [coll] (= (seq coll) (seq(reverse coll))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 27, "code": "(fn palindrome-detector [coll] \n  (let [sqc (seq coll)]\n    (= sqc (reverse sqc))))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 27, "code": "(fn [sequ]\n   (println sequ)\n   (if (and (> (count sequ) 1) (= (first sequ) (last sequ)))\n     (recur (rest (drop-last sequ)))\n     (= (first sequ) (last sequ))))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5f01952fe4b0cf489e8d7f22"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f04eb97e4b0cf489e8d7f3e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5f06da46e4b0cf489e8d7f54"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5f059b97e4b0cf489e8d7f48"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f06eaede4b0cf489e8d7f55"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 27, "code": "#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse lst)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5c06e811e4b0bdcf453d16ba"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5efdfbf1e4b0cf489e8d7f03"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f0cdb08e4b0f30dddfb5d50"}, {"problem": 27, "code": "(fn [input] \n  (= input (cond \n          (string? input) (clojure.string/join (reverse input)) \n\t\t  true (reverse input))\n\t\t))", "user": "5f0ccff2e4b0f30dddfb5d4f"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %) )", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 27, "code": "#(or (= (reverse %) %) (= (apply str (reverse %)) %))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 27, "code": "(fn [x] (if (string? x)\n  (= (apply str (reverse x)) x)\n  (= (reverse x ) x)\n)\n)", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5eff588ae4b0cf489e8d7f10"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57e070fde4b0bd073c202478"}, {"problem": 27, "code": "(fn [coll]\n   (loop [collec coll]\n     (if (>= 1 (count collec))\n       true\n       (if-not (= (first collec) (last collec))\n         false\n         (recur (drop-last (rest collec)))))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 27, "code": "(fn [i] (= (apply str i) (apply str (reverse i))))", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 27, "code": "#(let [itemCount (count %)\n      [x b] (split-at (/ itemCount 2) %)\n      a (if (even? itemCount) x (drop-last x))] (= a (reverse b)))", "user": "548f1604e4b0e286459a1230"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 27, "code": "(fn palindromo [x] (cond (string? x) (= (apply str (reverse x)) x) (vector? x) (= (vec (reverse x)) x) :else (= (reverse x) x)))", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 27, "code": "(fn [l] (= (seq l) (reverse l)))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 27, "code": "#(cond\n\t(string? %) (= (clojure.string/reverse %) %)\n\t:else (= (reverse %) %))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 27, "code": "(fn [x] (= (into '() x)  (seq x)))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 27, "code": "(fn [xs] (let [pairs (map vector xs (reverse xs))] \n  (every? #(= (first %) (nth % 1)) pairs)))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 27, "code": "(fn [li] (= (reverse li) (seq li)))", "user": "5f156992e4b091ba50b4dbba"}, {"problem": 27, "code": "(fn [seq]\n  (loop [beginIdx 0 endIdx (dec (count seq))]\n    (if (>= beginIdx endIdx)\n      true\n      (if (= (nth seq beginIdx) (nth seq endIdx))\n        (recur (inc beginIdx) (dec endIdx))\n        false))))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5f10982ee4b091ba50b4dba2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 27, "code": "; only checks the first and last, but passes the test: #(identical? (first %) (last %))\n; stolen #(= (reverse %) (seq %))\n#(= (reverse %) (seq %))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 27, "code": "(fn palin [ls] (if (empty? ls) true\n                (if-not (= (first ls) (last ls)) false\n                  (recur (rest (butlast ls))))))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 27, "code": "#(= (reverse %) (into [] %))", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 27, "code": "(fn palindrome [xs] \n  (if (< (count xs) 2) \n    true \n    (and \n     (= (first xs) (last xs))\n     (palindrome ((comp rest drop-last) xs)))))", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 27, "code": "(fn [m](if (= (into '() (seq m)) (seq m)) true false))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 27, "code": "#(= (reverse (take-last (/ (count %) 2) %)) (take (/ (count %) 2) %))", "user": "5f1a0ca2e4b091ba50b4dbe0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "567dbfe0e4b05957ce8c61cc"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse  x)))", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 27, "code": "(fn [l] (if (= l (if (string? l) (apply str (reverse l)) (reverse l))) true false))", "user": "5ef78fdae4b09b61f08553c4"}, {"problem": 27, "code": ";(fn [x] (= (map identity x) (reverse x)))\n#(reduce = ((juxt seq reverse) %))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f1d92a1e4b0f565ad99826a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f1108d7e4b091ba50b4dba9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (seq s) (reverse s)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 27, "code": "#(=(reverse %) (seq %))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 27, "code": "#(=(reverse %) (seq %))", "user": "5f180938e4b091ba50b4dbd1"}, {"problem": 27, "code": "(fn palindrome [seq]\n  (let [reverser (fn [seq stack n]\n                          (cond\n                            (empty? seq) stack\n                            (== n 0) stack\n                            :else (recur (rest seq) (cons (first seq) stack) (- n 1))))]\n    (let [reversed-seq (reverser seq '() (int (/ (count seq) 2)))]\n      (= reversed-seq (second (split-at (int (Math/ceil (/ (count seq) 2))) seq))))))", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 27, "code": "(fn [s] (= (seq s)  (reverse (seq s))))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 27, "code": "(fn palindrome? \n  [arr]\n  (loop [p arr]                                                                  \n    (cond                                                                        \n      (empty? p) true                                                            \n      (not= (first p) (last p)) false                                            \n    :else (recur (drop 1 (take (dec (count p)) p))))))", "user": "599389d8e4b0b211ea3aaab6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 27, "code": "#(let [rev-fn (if (reversible? %) rseq reverse)]\n                           (= (rev-fn %) (seq %)))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 27, "code": "(fn [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (drop-last (rest coll)))\n      false)))", "user": "5f21ffa2e4b0f565ad998289"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 27, "code": "(fn [sent]\n  (if (string? sent)\n    (= sent (clojure.string/reverse sent))\n    (= sent (reverse sent))))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 27, "code": "(fn [val]\n   (= (reverse val) (seq val)))", "user": "59331397e4b072a2710fd046"}, {"problem": 27, "code": "(fn [x]\n  (let [xs (seq x)]\n    (every? (partial apply =) (map list xs (reverse xs)))))", "user": "5f247827e4b0f565ad998292"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s) (reverse s)))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 27, "code": "#(= % (if (= (type %) java.lang.String)\n        (apply str (reverse %))\n        (reverse %)))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 27, "code": "(comp (partial apply =)\n      (juxt list* reverse))", "user": "5f27f180e4b033932238a648"}, {"problem": 27, "code": "#(= (into [] %) (reverse (into [] %)))", "user": "5cfbd3d1e4b0cc9c9158815b"}, {"problem": 27, "code": "(fn [xs] (= (reduce conj () xs) (reduce conj [] xs)))", "user": "5e74ee53e4b085ba37836dde"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 27, "code": "#(if (= (type %) java.lang.String)\n      (= (apply str (reverse %)) %)\n      (= (reverse %) %))", "user": "5f23efc8e4b0f565ad99828f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f297f22e4b033932238a64e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5f275800e4b0857314092c93"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 27, "code": "(fn [coll] (let [v (vec coll)] (= v (reverse v))))", "user": "5f29837ee4b033932238a64f"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f2a2a0de4b033932238a653"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 27, "code": "#(loop [s %]\n   (cond (< (count s) 2) true\n         (not= (first s) (last s)) false\n         :else (recur (drop 1 (drop-last 1 s)))))", "user": "5f2c04dde4b033932238a660"}, {"problem": 27, "code": "(fn [coll]\n  \"A function which returns only the odd numbers from a sequence\"\n  (let [reverse-coll (into [] (reduce conj () coll))]\n    (= reverse-coll (into [] coll)))\n  )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 27, "code": "(fn [xs]\n  (cond\n   (empty? xs) true\n   (= (count xs) 1) true\n   (= (first xs) (last xs)) (recur (rest (butlast xs)))\n   :else false))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f281a83e4b033932238a64a"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5f2de7ede4b033932238a674"}, {"problem": 27, "code": "(fn [word]\n  (if (string? word)\n    (= (apply str (reverse word) word))\n  \t(= (reverse word) word)))", "user": "5f05ef21e4b0cf489e8d7f4d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 27, "code": "(fn [x]\n\n  (let [forward-seq (seq x)\n        reverse-seq (reverse x)]\n    (= forward-seq reverse-seq)))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f2f5cdee4b033932238a67f"}, {"problem": 27, "code": "(fn [arg]\n  (loop [orignal (seq arg)\n         rev (reverse orignal)]\n    (if (= 1 (count orignal))\n      true\n      (if (not= (first orignal) (first rev))\n        false\n        (recur (rest orignal) (rest rev))))))", "user": "5e44f5b1e4b01d43a70e8e8d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f309144e4b0574c87022c23"}, {"problem": 27, "code": "(fn f1 [l]\n    (println l)\n    (let [a (first l)\n          b (last l)\n          c (count l)]\n        (cond\n            (or (= c 1) (= c 0)) true\n            (or (< c 0) (not= a b)) false\n            :else (recur (->> l (drop-last 1) (drop 1))))))", "user": "5f30296fe4b0574c87022c22"}, {"problem": 27, "code": "(fn palindrom [s] \n  (= (seq s) (reverse s)))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 27, "code": "(fn pali? [s] (every? true? (map = (reverse s) s)))", "user": "5f300f28e4b033932238a682"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f331015e4b0574c87022c37"}, {"problem": 27, "code": "(fn palindrome [s]\n  (= (apply str s) (apply str (reverse s))))", "user": "5f24671fe4b0f565ad998291"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f329e63e4b0574c87022c32"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str (reverse x))))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 27, "code": "(let [is_palindrome (fn\n  [sss]\n  (if (< (count sss) 2)\n    true\n  (if (= (first sss) (last sss))\n  (recur (butlast (rest sss)))\n    false\n  ))\n  )]\n  is_palindrome\n  )", "user": "5f35026fe4b0574c87022c40"}, {"problem": 27, "code": "(fn [x] ((fn iter [x] (\n                       if (< (count x) 2)\n                       true\n                       (if (not= (first x) (last x))\n                         false\n                         (iter (rest (butlast x))))\n)) x))", "user": "5f341a4be4b0574c87022c3d"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f3797cce4b0574c87022c5a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5f274aeee4b0857314092c92"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 27, "code": "#(if (string? %)\n   (.equals (clojure.string/reverse %) %)\n   (= (reverse %) %))", "user": "5f39bd49e4b0574c87022c7f"}, {"problem": 27, "code": "(fn foo [x] (if (< (count x) 2) true (if (= (first x) (last x)) (foo (rest (butlast x))) false)))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 27, "code": "(fn [st]\n  (if (string? st) \n    (= st (apply str (reverse st)))\n    (= st (reverse st))))", "user": "5f388489e4b0574c87022c69"}, {"problem": 27, "code": "(fn [coll]\n (= (reverse coll) (seq coll)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 27, "code": "(fn palindrome [x]\n\t(= (seq x) (reverse x))\n)", "user": "5f22dabbe4b0f565ad99828a"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 27, "code": "#(loop [left %]\n   (if (> (count left) 1)\n     (if (= (first left) (last left))\n       (recur (butlast (rest left)))\n       false)\n     true))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 27, "code": "#(= (vec %) (vec (reverse %)))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 27, "code": "(fn pal [x] (= ( reverse (reverse x)) (reverse x) ))", "user": "5f3e58dae4b004f08c61c555"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 27, "code": "(fn[value]\n  (= value\n     (cond\n  \t\t(string? value) (apply str (reverse value))\n  \t\t:else (reverse value)\n\t )\n\t)\n  )", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 27, "code": "#(=  (reverse (reverse %)) (reverse %))", "user": "5f3f6570e4b004f08c61c563"}, {"problem": 27, "code": "(fn [l]\n   (let [list (vec l)]\n     (= list (reverse list))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 27, "code": "(fn [start]\n  (= (seq start)\n  (reduce(fn[out part]\n                  (cons part out))\n            []\n            start))\n)", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f10ab01e4b091ba50b4dba6"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5f419985e4b0955706451fab"}, {"problem": 27, "code": "(fn [x]\n(let [\n  handle-string (comp (partial apply str) reverse)    \n  handle-else reverse\n  ](= x (if (string? x) (handle-string x) (handle-else x))))\n    \n)", "user": "5f3ca097e4b004f08c61c546"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f42baafe4b0955706451fb1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f4314e0e4b0955706451fb4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 27, "code": "#(loop [x %]\n    (if (> 2 (count x))\n      true\n      (if (= (first x) (last x))\n        (recur (reverse (rest (reverse (rest x)))))\n        false\n        )))", "user": "5f429fdfe4b0955706451faf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 27, "code": "(fn [coll]\n  (let [s (seq coll)]\n    (= s (reverse s))))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 27, "code": "(fn [lst] (= (apply vector lst) (reverse (apply vector lst))))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 27, "code": "(fn pal\n  [[x & xs]]\n  (cond\n    (or (and x (empty? xs))\n        (= x (last xs))) true\n    (= x (last xs)) (pal (take (- (count xs) 1) xs))\n    :else false))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f49482ae4b0102c75033940"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f488c7de4b0102c7503393a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 27, "code": "(fn [in] (= (reverse (seq in)) (seq in)))", "user": "5f3b54c0e4b004f08c61c53b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f46ba59e4b0955706451fc2"}, {"problem": 27, "code": "(fn palindrome?\n  [x]\n  (loop [x x]\n    (if (empty? x)\n      true\n      (if (= (last x)\n            (first x))\n        (recur (drop 1 (drop-last x)))\n        false))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f4dbb81e4b0102c75033961"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 27, "code": "(fn pal [coll] (cond (empty? coll) true\n                     (= (count coll ) 1) true\n                     :else (and (= (first coll) (last coll)) \n                         (recur (drop-last (rest coll))))))", "user": "5f4303cfe4b0955706451fb3"}, {"problem": 27, "code": "(fn [x]\n    (= (vec x) (reverse (vec x))))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 27, "code": "(fn [lst] (if (<=  (count lst) 1)\n            true\n            (if (not= (last lst) (first lst))\n              false\n              (recur (rest (reverse (rest (reverse lst))))))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 27, "code": "(fn [word] \n  (if (empty? word) true \n    (and (= (first word) (last word)) \n         (recur (butlast (rest word))))))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 27, "code": "#(= (map str %) (reverse (map str %)))", "user": "5f51e141e4b0a0bc16850a6a"}, {"problem": 27, "code": "(fn palindrome [x]\n  (= (reverse x) (seq x)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 27, "code": "(fn [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (butlast x)))\n      false\n    )\n  )\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5f5a57dee4b0a0bc16850aa5"}, {"problem": 27, "code": "(fn [s] (\n  = (seq s) (reverse s)       \n         ))", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 27, "code": "(fn [a] (if (string? a) (= (clojure.string/reverse a) a) (= a (reverse a))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 27, "code": "(fn [s]\n  (= s\n   (if (string? s)\n     (clojure.string/reverse s)\n     (reverse s))))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 27, "code": "(fn [s]\n  (=  (seq s) (reverse (seq s))))", "user": "5f5cfe2be4b02876ed9fcfe2"}, {"problem": 27, "code": "(fn [input]\n  (if (coll? input)\n    (= input (reverse input))\n    (= input (clojure.string/join \"\" (reverse input)))))", "user": "5dddcface4b0948ae9d9adcd"}, {"problem": 27, "code": "(fn [x] (= (apply list x) (reverse x)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 27, "code": "(fn [v]\n  (= (reverse v)\n     (reverse (reverse v))))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 27, "code": "(fn [x]\n  (= x\n     (cond\n      (string? x) (clojure.string/reverse x)\n      :else (reverse x))))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 27, "code": "(fn [a] (= (seq a) (reverse a)))", "user": "563bb1fde4b0bfe05bf11829"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 27, "code": "(fn [s]\n           (or (<= (count s) 1)\n               (and (= (first s) (last s))\n                    (recur (drop-last (rest s))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 27, "code": "#(let [len (quot (count %) 2)]\n                (=\n                  (take len %)\n                  (reverse (take-last len %))))", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 27, "code": "(fn [inputseq]\n  (= (seq inputseq) (reverse inputseq)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 27, "code": "(fn [x] \n   (cond\n      (= (seq x) (reverse (seq x))) true\n      :else false\n   )\n \n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 27, "code": "(fn [x]\n  (if (= (reverse x) (seq x))\n         true\n         false))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join  x) (clojure.string/join  (reverse x))))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5eb4e4abe4b00a66d4a95222"}, {"problem": 27, "code": "#(= (seq %) (reverse  %))", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 27, "code": "(fn [coll] (= (seq coll) (reverse (seq coll))))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 27, "code": "#(if (string? %) \n   (= (apply str (reverse %)) %) \n   (= (reverse %) %))", "user": "5f67c2f8e4b02876ed9fd039"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f42b77be4b0955706451fb0"}, {"problem": 27, "code": "(fn [l] (every? identity (map #(apply = %) (partition 2 (interleave l (reverse l))))))", "user": "5a2b7f4ee4b09cafd31c7f4a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 27, "code": "(fn [s] (= (reverse (reverse s)) (reverse s)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 27, "code": "(fn palindrome? [pali]\n  (= pali\n  (if (string? pali) (apply str (reverse pali)) (reverse pali))))", "user": "5f6a266ae4b02876ed9fd042"}, {"problem": 27, "code": "; #(= (seq %) (into '() %))\n(fn [x] (= (seq x) (into '() x)))", "user": "5d9a49c4e4b0d3f9b434ad45"}, {"problem": 27, "code": "(fn [s]\n    (= (seq s) (reverse (seq s))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 27, "code": "(fn palindrome? [coll]\r\n  (= coll\r\n     (if (string? coll)\r\n       (apply str (reverse coll))\r\n       (reverse coll))))", "user": "5f5396d4e4b0a0bc16850a79"}, {"problem": 27, "code": "; #(= % (if (string? %) (clojure.string/join \"\" (reverse %)) (reverse %)))\n\n#(= (seq %) (reverse %))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6aef6de4b02876ed9fd04a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 27, "code": "(fn paly? [xs]\n    (let [a (into [] xs)]\n     (= a (reverse a))))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 27, "code": "(fn [s]\n  (if (contains? [0 1] (count s))\n    true\n    (and (= (first s) (last s)) (recur (drop-last (rest s))))))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 27, "code": "(fn [coll]\n    (loop [c coll]\n      (if (<= (count c) 1)\n        true\n        (if (= (first c) (last c))\n          (recur (butlast (rest c)))\n          false))))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 27, "code": "(fn [x] (= (reverse (seq x)) (seq x)))", "user": "5f6c4f6de4b02876ed9fd055"}, {"problem": 27, "code": "(fn [coll] (loop [x (seq coll) reversed (empty (seq coll))] (if (empty? x) (=  (seq coll) reversed) (recur (rest x) (cons (first x) reversed)))))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 27, "code": "(fn isPalindrome [x]\n  (if (empty? x)\n    true\n    (if (empty? (rest x))\n      true\n      (if (= (first x) (last x))\n        (isPalindrome (rest (butlast x)))\n        false\n      )\n    )\n  )\n)", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 27, "code": "(fn palindrome\n  [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (palindrome (butlast (rest s)))\n      false)\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f63d73de4b02876ed9fd017"}, {"problem": 27, "code": "(fn palindrome\n  [seq]\n  (if (or (= 2 (count seq)) (= 3 (count seq)))\n    (= (first seq) (last seq))\n    (and (= (first seq) (last seq)) (palindrome (rest (butlast seq))))))", "user": "5f735915e4b02876ed9fd097"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 27, "code": "(fn [x]\n    (= (count(let [x (vec x)\n          reversed (vec (reverse  x))]\n        \n        (filter #(= (x %) (reversed %)) (range (count x)))))\n       (count x)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 27, "code": "(fn palindromep [s]\n  (loop [i 0 j (dec (count s))]\n    (if (= i (inc (int (/ (count s) 2))))\n      true\n      (if-not (= (nth s i) (nth s j))\n                      false\n        (recur (inc i) (dec j)))\n      )))", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 27, "code": "#(if (string? %)\n    (=  (str %) (clojure.string/reverse (str %)))\n    (= % (reverse %)))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 27, "code": "(fn [s]\n  (loop [seq s]\n    (if (<= (count seq) 1)\n      true\n      (if (= (first seq) (last seq))\n        (recur (-> seq rest reverse rest reverse))\n        false))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (cond\n    (empty? s) true\n    (= 1 (count s)) true\n    :else (and (= (first s) (last s)) \n               (palindrome? (drop-last 1 (drop 1 s))))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 27, "code": "(fn lol [x]\n  (= (reverse x) (seq x)))", "user": "5f520556e4b0a0bc16850a6d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 27, "code": "(fn [lst]\n    (if (string? lst)\n        (= lst (apply str (reverse lst)))\n        (= lst (reverse  lst))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 27, "code": "(fn [coll] (let [reversed (reverse coll) reversed-text (apply str (reverse coll))]\n             (if (string? coll)\n               (= reversed-text coll)                                                                    \n               (= reversed coll))))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 27, "code": "(fn[lst] (= (seq lst) (reverse lst)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 27, "code": "(fn\n  [s]\n  (loop [s s]\n    (cond\n      (empty? s) true\n      (not= (first s) (last s)) false\n      :else (recur (drop-last (drop 1 s)))\n      )\n    )\n  )", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 27, "code": "(fn [list] (= (apply str list) (apply str (reverse list))))", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))", "user": "5f815db6e4b0c071e6c840f0"}, {"problem": 27, "code": "(fn pal [x]\n  (let [f (first x)\n        l (last x)\n        sub-x (rest (butlast x))]\n    (if (not (= f l))\n      false\n      (if (or (= 1 (count sub-x))\n              (= 0 (count sub-x)))\n        true\n        (recur sub-x)))))", "user": "4f1c7021535d64f603146482"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 27, "code": "(fn is-palindrom? [xs] (= (vec xs) (reverse xs)))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 27, "code": "#(let [s (seq %)] (= s (reverse s)))", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 27, "code": "(fn [s] (= (reverse(seq s)) (seq s)))", "user": "5d8570cae4b0915913b1d395"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 27, "code": "(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst)) \n        (recur (rest (butlast lst)))\n        false\n        ))\n    )\n  )", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 27, "code": "(fn d [coll]\n             (=(reverse (seq coll)) (seq coll)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5f7fece9e4b0c071e6c840e3"}, {"problem": 27, "code": "#(loop [a-s % len (count %)] (if (or (= 0 len) (= 1 len))\n                                              true\n                                              (if (= (first a-s) (nth a-s (dec len)))\n                                                (recur (rest a-s) (dec (dec len)))\n                                                false)))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "5f86f5a3e4b0649ffcda4cad"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (reverse lst))\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 27, "code": "(fn palindrome [x]\n  (= (seq x) (reverse x)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 27, "code": "(fn function [palindrome]\n  (= (seq palindrome) \n     (reverse palindrome))\n  )", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5c87217de4b0c8042a70cea1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 27, "code": "(fn palindrome? [sequence]\n  (= (seq sequence) (reverse sequence)))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse x))\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 27, "code": "(fn [sq] (if (string? sq)\n           (= sq (apply str (reverse sq)))\n           (= sq (reverse sq))))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse (seq s))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 27, "code": "(fn pCheck [xs] \n   (cond\n     (<= (count xs) 1) true\n     (not= (first xs) (last xs)) false\n     :else (pCheck (drop 1 (take (- (count xs) 1) xs)))\n     )\n   )\n\n;#(= (seq %) (reverse %))", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 27, "code": "#(=(reverse (seq %)) (seq %))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 27, "code": "(fn palindrome[in]\n  (=(seq in) (reverse in))\n  )", "user": "5e1363cce4b099d064962ffc"}, {"problem": 27, "code": "#(not= % (distinct %))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 27, "code": "(fn\n        [xs]\n        (if (string? xs)\n          (= (clojure.string/join \"\" (reverse xs)) xs)\n          (= xs (reverse xs))))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 27, "code": "(fn palindrome [wrd]\n  (= (seq wrd) (reverse wrd)))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 27, "code": "(fn\n  [seqn]\n   (= (reverse seqn) (seq seqn)))", "user": "5ed6e0eee4b016b56eae05e4"}, {"problem": 27, "code": "(fn pal [s] (if (= (first s) (last s))\n              (if (< (count s) 2)\n                true (pal (rest (butlast s))))\n              false))", "user": "5f9491cbe4b0715f5002d7bf"}, {"problem": 27, "code": "(fn is-palindrom [num]\n  (cond (not= (first num) (last num)) false\n        (< (count num) 2) true\n        :else (is-palindrom (drop-last 1 (drop 1 num)))))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f6f461ae4b02876ed9fd06f"}, {"problem": 27, "code": "(fn [x]\n   (let [y          (reduce\n                     #(conj %1 %2)\n                     ()\n                     x\n                     )\n         z        (reduce\n                   #(conj %1 %2)\n                   []\n                   x\n                   )]\n     (= z y))\n   )", "user": "5f949b97e4b0715f5002d7c1"}, {"problem": 27, "code": "(fn p27 [p]\n  (= (seq p) (reverse p)))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 27, "code": "(fn [x] (= (apply str x) (apply str(reverse x))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 27, "code": "#(if (string? %) ; check if string\n   (= % (apply str (reverse %))) ; reverse string -> get a list with chars and then concatenate this list to string\n   (= % (reverse %)))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f998847e4b0715f5002d813"}, {"problem": 27, "code": "#(= (vec %) (rseq (vec %)))", "user": "5dca511ce4b03836ba07d82f"}, {"problem": 27, "code": "(fn   [x]\n  (loop [value x]\n    (if (nil? (first value))\n      true\n      (if (= (first value) (last value))\n        (recur (rest (reverse (rest value))))\n        false\n        )\n      )\n    )\n  \n  )", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f9d36e1e4b0715f5002d82e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f9df1d8e4b0715f5002d832"}, {"problem": 27, "code": "#(every? (fn [v] (apply = v)) (zipmap % (reverse %)))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 27, "code": "#(loop [x (seq %) y (reverse (seq %))](println x y)\n   (if (and (empty? x) (empty? y))\n      true\n      (if (= (first x) (first y))\n        (recur (rest x) (rest y))\n        false)))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5fa416ece4b0f0ebd91b7803"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 27, "code": "(fn palindrome [s] (= (seq s) (reverse s)))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 27, "code": "(fn [xs] (every? true? (map #(= %1 %2) xs (reverse xs))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fa12616e4b0715f5002d84f"}, {"problem": 27, "code": "(fn [li] (= (seq li) (reverse (seq li))))", "user": "5fa7c574e4b0fa27300f3ddf"}, {"problem": 27, "code": "(fn [coll] (= (apply list coll) (reverse coll)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 27, "code": "#(= (reverse (into [] %)) (into [] %))", "user": "5fa56352e4b0fa27300f3dc2"}, {"problem": 27, "code": "#(if (string? %) (= % (clojure.string/reverse %)) (= % (reverse %)))", "user": "5fa58531e4b0fa27300f3dc6"}, {"problem": 27, "code": "(fn[c] (= (reduce str (reverse c)) (reduce str c)))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 27, "code": "(fn [xs]\n\t(reduce  \n \t \t#(and %1 %2) \n  \t\t(map (fn [a b] (= a b)) xs (reverse xs))))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 27, "code": "(fn [xs]\n  (if (string? xs) \n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 27, "code": "#(loop [pal %] \n   (if (< (count pal) 2)\n     true \n     (if (= (first pal) (last pal))\n       (recur (rest (butlast pal)))\n       false)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5fa2735de4b0f0ebd91b77ee"}, {"problem": 27, "code": "(fn [s]\n  (= s (if (= (class s) java.lang.String)\n         (clojure.string/reverse s)\n         (reverse s))))", "user": "5c3527a6e4b0d62ef62d9f60"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 27, "code": "(fn [ipt] (= (seq ipt) (reverse (seq ipt))))", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 27, "code": "(fn [l] (if (= (vec l) (vec (reverse l))) true false))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 27, "code": "(fn [coll]\n   (let [reversed (reduce (fn [acc coll]\n                            (cons coll acc))\n                          [] coll)]\n     (println reversed)\n     (if (= (type coll) java.lang.String)\n       (= (clojure.string/join \"\" reversed) coll)\n       (= reversed coll))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 27, "code": "#(= (reverse (seq %))  (seq %))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 27, "code": "#(if (not= java.lang.String (type %))\n    (= % (reverse %))\n    (= % (.toString (.reverse (StringBuilder. %)))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 27, "code": "(fn [s]\n  (loop [s s]\n    (if (<= (count s) 1)\n     true\n     (and \n      (= \n       (first s)\n       (last s))\n      (recur \n       (drop-last 1 (drop 1 s)))))))", "user": "5e9364f0e4b0fbed045a37f4"}, {"problem": 27, "code": "(fn detect-palindrome [x]\n       (if (string? x)\n         (= x (apply str (reverse x)))\n         (= x (reverse x))))", "user": "5a055eace4b01bb0ae8afdb1"}, {"problem": 27, "code": "(fn [x] \n  (= (seq x) (reverse x)))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5fabe67be4b08cb800c85ade"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 27, "code": "(fn [x] (= (apply list x) (reverse x)))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5fba5692e4b03f550f448230"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 27, "code": "(fn [se] (= (seq se) (reverse se)))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 27, "code": "(fn [se]\n  (= se (if (= (type se) java.lang.String)\n          (apply str (reverse se))\n          (reverse se))\n     ))", "user": "5fa2c9aee4b0f0ebd91b77f7"}, {"problem": 27, "code": "(fn [text]\n  (loop [text text]\n    (let [a (first text)\n          b (last text)\n          l (count text)]\n    (if-not (= a b)\n      false\n      (if (<= 2 l)\n        true\n        (recur (subs text 1 (- 1 l))))))))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 27, "code": "(fn [coll] (every? true? (map = coll (reverse coll))))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 27, "code": "(fn [l] (let [i (seq l) r (reverse l)] (= i r)))", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 27, "code": "(fn\n    [coll]\n    (let [reversed (reduce conj '() coll)]\n      (= reversed (seq coll))))", "user": "55808f8ee4b05c286339e0ee"}, {"problem": 27, "code": "(fn\n    [s]\n    (= (seq s) (reverse s)))", "user": "5e7b2d86e4b085ba37836e11"}, {"problem": 27, "code": "(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))", "user": "5fbf03c2e4b03f550f44824c"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 27, "code": "(fn\n  [arg]\n  (\n   loop [coll arg]\n   (\n    if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur ((comp rest butlast) coll)\n       )\n\t  false\t     \n     )\n    \t\n    \n    )\n   )\n  )", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 27, "code": "(fn [x]\n          (= x (cond\n            (string? x) (->> x\n                             reverse\n                             clojure.string/join)\n            :else (reverse x))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5faca2e4e4b08cb800c85ae8"}, {"problem": 27, "code": "(fn [x] (= (reverse (reverse x)) (reverse x)))", "user": "5ee685ffe4b029a2061bbe99"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 27, "code": "(fn f [n] (= (reverse (seq n)) (seq n)))", "user": "5fcbf407e4b07e53c2f3eff0"}, {"problem": 27, "code": "(fn [x]\n  (let [d (quot (count x) 2)]\n    (= (take d x) (take d (reverse x)))))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 27, "code": "#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 27, "code": "(fn [coll]\n   (= (reverse (reverse coll)) (reverse coll)))", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 27, "code": "(fn [x] (= (seq (reverse x)) (seq x)))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 27, "code": "(fn [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 27, "code": "(fn [seq]\n  (= seq\n     (if (string? seq)\n       (apply str (vec (reverse seq)))\n       (reverse seq))\n     ))", "user": "5d25578de4b02ea6f0fb6a33"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fa7009be4b0fa27300f3dd6"}, {"problem": 27, "code": "(fn [in]\n     (= (reverse in) (seq in)\n    ))", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 27, "code": "(fn is-palin [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs)) (is-palin (rest (butlast xs))))))", "user": "5fd9bf47e4b05ac5b16ea125"}, {"problem": 27, "code": "#(= % (if (string? %) (apply str (reverse %)) (reverse %)))", "user": "5fd20118e4b07e53c2f3f042"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse  %)))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 27, "code": "#(= (apply str %) (apply str(reverse %)))", "user": "5fcb665ae4b07e53c2f3efee"}, {"problem": 27, "code": "(fn [param]\n  (let [input (seq param)]\n    (if (= (seq input) (into '() input))\n      true\n      false)))", "user": "5fdba25ae4b05ac5b16ea135"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))", "user": "5fe1589ee4b05ac5b16ea16c"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 27, "code": "(fn [x] (= x (if (string? x)\n               (apply str (reverse x))\n\t           (reverse x))))", "user": "5fe25678e4b05ac5b16ea175"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fdae91de4b05ac5b16ea12a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 27, "code": "(fn [l]\n  (let [len (quot (count l) 2)\n        front (take len l)\n        back (reverse (take-last len l))]\n    (= front back)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 27, "code": "(fn [coll]\n  (let [mid (if (odd? (count coll))\n              (+ 1 (quot (count coll) 2))\n              (quot (count coll) 2))]\n    (= (take mid coll) (take mid (reverse coll)))))", "user": "5f1f2b95e4b0f565ad99827a"}, {"problem": 27, "code": "(fn palindrome [str] (if (< (count str) 2)\n                         true\n                         (and\n                           (= (first str) (last str))\n                           (palindrome (\n                                        (comp\n                                          (partial drop 1)\n                                          (partial drop-last 1))\n                                        str\n                                        )\n                                       )\n                           )\n                         ))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 27, "code": "(fn is-collection-palindrome? [coll]\n  (= (reverse (into () coll))\n     (loop [c coll\n            acc ()]\n       (if (empty? c)\n         acc\n         (recur (rest c) (cons (first c) acc))\n         )\n       )\n     )\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 27, "code": "(fn fac [sq]\n  (loop [i 0]\n    (if (> (* 2 i)  (count sq))\n      true\n      (if (= (nth sq i) (nth sq (- (count sq) (inc i))))\n        (recur (inc i))\n        false))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 27, "code": "(fn [s]\n        (= (seq s) (reverse s)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 27, "code": "(fn [lst]\n  (= (seq lst) (into '() (seq lst))))", "user": "5ab168d2e4b073f1774425c2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 27, "code": "(fn [input-seq] (= (seq input-seq) (reverse input-seq)))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5fef5c6de4b05ac5b16ea1d8"}, {"problem": 27, "code": "(fn [xs]\n  (let [s (seq xs)]\n    (= s (reverse s))))", "user": "5fef5ccce4b05ac5b16ea1d9"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 27, "code": "#(= (seq %) (reverse(seq %)))", "user": "5fef99e2e4b05ac5b16ea1e0"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5ff214e7e4b05ac5b16ea1fa"}, {"problem": 27, "code": "#(= (reverse %)(seq %))", "user": "5ff19fe0e4b05ac5b16ea1f4"}, {"problem": 27, "code": "(fn [x]\n  (let [rev (apply str (reverse x))]\n  (= (apply str x) rev))\n)", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (if (string? coll)\n    (= coll (reduce str (reverse coll)))\n    (= coll (reverse coll))))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 27, "code": ";; (fn [lst]\n;;  (loop [l (seq lst)]\n;;    (cond\n;;      (= (last l) (first l))\n;;        (if (< 1 (count l))\n;;          (recur (drop 1 (butlast l)))\n;;          true)\n;;      :else false)))\n\n;; #(if (< (count %) 2)\n;;     true\n;;     (if (= (first %) (last %))\n;;       (recur (-> % rest butlast))\n;;       false))\n\n#(= (reverse %) (seq %))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fd12b42e4b07e53c2f3f02f"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ff5971ee4b06df49cee148d"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 27, "code": "(fn pal [x]\n   (if (< (count x) 2)\n     true\n     (if (= (first x) (last x))\n       (pal (drop 1 (drop-last x)))\n       false)))", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s)))", "user": "5f96909be4b0715f5002d7d9"}, {"problem": 27, "code": "(fn pal [st]\n  (let [orig (reduce (fn [acc val]\n                       (conj acc val)) [] st)\n        rev (reduce (fn [acc val]\n                      (cons val acc)) [] st)]\n    (= orig rev)))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 27, "code": "; Write a function. Got it.\n(fn [s] \n  \n  ; Work with sequences...\n  \n  (loop [l-s s]\n    \n    ; If it's empty or one, then return true\n    (if (or (= (count l-s) 1)  (empty? l-s)) ; conditional end\n      \n      true\n      \n      ; If the first equals the first of the reversed, recur, else false\n      (if (= (first l-s) (first (reverse l-s))) ; conditional end\n        \n        ; recur without the ends\n        \n        ; Wow\n        (recur (reverse (rest (reverse (rest l-s) )) ) )\n        \n        false\n        \n        ) ; if end\n      \n      ) ; if end\n    \n    \n    ) ; loop end\n        \n  \n  \n  \n  \n  ) ; fn end", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5ffe889ce4b074f607df6603"}, {"problem": 27, "code": "(fn [coll]\n  (loop [c coll]\n    (if (>= 1 (count c))\n      true\n      (if (= (last c) (first c))\n        (recur (butlast (rest c)))\n        false))))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 27, "code": "(fn [s] \n  (reduce (fn [b1 b2] (= b1 b2 true))\n    (map \n     (fn [i] (= (nth s i) (nth s (- (count s) i 1)))) \n     (range (quot (count s) 2))\n    )\n  )\n)", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 27, "code": "(fn [x]\n  (if (or (= (count x) 0)  (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (recur (rest (drop-last 1 x)))\n      false)))", "user": "5ffee617e4b074f607df6605"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ffe6082e4b074f607df6600"}, {"problem": 27, "code": "(fn [thing] \n  (-> thing (reverse)(= (reverse (reverse thing)))))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 27, "code": "(fn\n  [s]\n  (= (reverse s) (seq s)))", "user": "60036736e4b074f607df663b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6004c750e4b074f607df6645"}, {"problem": 27, "code": "(fn [coll]\n  (let [rev-coll (if (string? coll)\n                   (apply str (reverse coll))\n                   (reverse coll))]\n    (= coll rev-coll)))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 27, "code": "(fn [lst] (loop [start 0\n                            end (- (count lst) 1)]\n                       (cond (or (and (= (- end start) 1) (= (nth lst start) (nth lst end)))\n                                 (= end start)) true\n                             (not (= (nth lst start) (nth lst end))) false\n                             :else (recur (inc start) (dec end)))))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 27, "code": "#(= (reverse %) (seq  %))", "user": "6001c90ce4b074f607df6626"}, {"problem": 27, "code": "(fn[x](= (seq x) (reverse x)))", "user": "6001460ce4b074f607df6611"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (every? #(true? %) (map #(= %1 %2) coll (reverse coll))))", "user": "5fffecb1e4b074f607df660a"}, {"problem": 27, "code": "(fn palindrom?\n  [x]\n \n    (= (seq x) (reverse x)))", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 27, "code": "(fn palindrom?\n  [x]\n\n  (= (seq x) (reverse x)))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "600456ade4b074f607df6641"}, {"problem": 27, "code": "(fn palindrome? [v]\n  (loop [original v reversed (reverse v) result false]\n    (if (empty? original)\n      result\n      (if (= (first original) (first reversed))\n        (recur (rest original) (rest reversed) true)\n        (recur (rest original) (rest reversed) false)))))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 27, "code": "(fn pal [xs] (if (< (count xs) 2) true (and (= (first xs) (last xs)) (pal (take (- (count xs) 2) (drop 1 xs))))))", "user": "60067b71e4b074f607df6655"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "6001ea38e4b074f607df662a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60065677e4b074f607df6651"}, {"problem": 27, "code": "#(= (vec %) (reverse (vec %)))", "user": "60057cd4e4b074f607df664a"}, {"problem": 27, "code": "(fn palrecur [l]\n  (if (empty? l)\n  \ttrue\n  \t(every? true? (list (= (first l) (last l)) (palrecur (rest (take (- (count l) 1) l)))))\n   )\n  )", "user": "600777a3e4b074f607df6667"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60046db8e4b074f607df6642"}, {"problem": 27, "code": "(fn [xs]\n  (= \n   (seq xs)\n   (reverse xs)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "600c1c72e4b074f607df6692"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "600cb742e4b074f607df6696"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 27, "code": "#(= (flatten (partition 1 %)) (reverse %))", "user": "50a025a9e4b08df8156e9e49"}, {"problem": 27, "code": "(fn [coll] (= (reverse (seq coll)) (seq coll)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 27, "code": "(fn foo [s]\n  (if (empty? s)\n    true\n    (let [[x & xs] s]\n      (if-not xs\n        true\n        (let [[ys y] [(butlast xs) (last xs)]]\n          (and (= x y) (foo ys)))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 27, "code": "(fn f [s]\n  (cond\n    (<= (count s) 1) true\n    (not= (first s) (last s)) false\n    :else (f (rest (drop-last s)))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (reverse xs)))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 27, "code": "(fn [xs]\n  (if (= (seq xs) (reverse (seq xs)))\n    true\n    false))", "user": "6001d240e4b074f607df6627"}, {"problem": 27, "code": "#(let [rev (reverse %)](if (string? %) (= (apply str rev) %) (= rev %)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (reverse(reverse s))))", "user": "600b385ce4b074f607df668d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60096aabe4b074f607df667f"}, {"problem": 27, "code": "(fn is-pal [s] (= (reverse s) (seq s)))\n\n;; elegant solution: #(= (seq %) (reverse %))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 27, "code": "(fn [coll]\n          (= (reverse coll)\n             (reverse (into (list) coll))\n             ))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 27, "code": "(fn [coll]\n  (loop [i 0]\n    (if (= (nth coll i) (nth (reverse coll) i))\n      (if (<= i (/ (count coll) 2))\n        true\n        (recur (inc i)))\n      false)))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 27, "code": "(fn [palindrom] (let  [reverse_palindrom (into '() palindrom)]\n                    (= reverse_palindrom (into '() reverse_palindrom))))", "user": "5ff99e57e4b06df49cee14b0"}, {"problem": 27, "code": "#(loop [xs %]\n    (cond (empty? xs) true\n          (not= (first xs) (last xs)) false\n          :else (recur (rest (butlast xs)))))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 27, "code": "#(= (seq %1) (reverse %1))", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (= (seq coll) (reverse coll)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 27, "code": "(fn  [[f & r]] (\n  if (empty? r) true \n  (if (= f (last r)) (recur (drop-last r)) false)\n )\n )", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse xs)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ff5914fe4b06df49cee148c"}, {"problem": 27, "code": "#(let [x (seq %)\n      r (reverse x) \n      ]\n   (= r x) )", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 27, "code": "(fn [s]\n  (let [x (quot (count s) 2)\n        pre (take x s)\n        suf (reverse (drop (+ x (mod (count s) 2)) s))]\n    (= pre suf)))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 27, "code": "#(loop [coll % rev (reverse %)] (if (empty? coll) true (if (= (first coll) (first rev)) (recur (rest coll) (rest rev)) false)))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 27, "code": "(fn [ls]\n  (= (vec ls) (reverse ls))\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 27, "code": "(fn [coll] (= (reverse coll) (reverse (reverse coll))))", "user": "55dec39ce4b050e68259b3e6"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "6022844de4b0d5df2af22203"}, {"problem": 27, "code": "(fn m_reverse [x]\n  (let [y \n        (cond \n          (coll? x) (reverse x) \n          (string? x) (clojure.string/reverse x))]\n    (= x y)\n\n    ))", "user": "6022429be4b0d5df2af22200"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 27, "code": "(fn [s]\n  (loop [i1 0 i2 (dec (count s))]\n    (cond (or (= i1 i2)\n              (> i1 i2)) true\n          (not= (nth s i1)\n                (nth s i2)) false\n          :else (recur (inc i1)\n                        (dec i2)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 27, "code": "(fn [xs]\n    (loop [xs xs]\n      (cond\n        (empty? xs) true\n        (not= (first xs) (last xs)) false\n        :else (recur (drop-last (rest xs))))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 27, "code": "(fn [sq]\n   (= (seq sq) (reverse sq)))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "602bfcefe4b0d5df2af22268"}, {"problem": 27, "code": "(fn pal [w] (\n  do (print w ) \n  (if (> (count w) 0) \n    (if (< (count w) 3) \n       (if (= (first w) (last w)) true false)\n         (\n           if (= (first w) (last w)) (pal (rest (drop-last w))) false\n         )) false)\n  ) )", "user": "602bca69e4b0d5df2af22267"}, {"problem": 27, "code": "(fn is-palin [x] (if (string? x) (= (apply str (reverse x)) x) (= x (reverse x))))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 27, "code": "(fn [coll]\n   (= (seq coll) (reverse coll)))", "user": "6014ccd3e4b074f607df66cd"}, {"problem": 27, "code": "#(= (reverse %) (into [] %))", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 27, "code": "(fn [c] (= (seq c) (reverse c)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 27, "code": "#(= #{true}  (into #{} (map = % (reverse %))))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse col)))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 27, "code": "(fn [x]\n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n  \t(= x (reverse x))\n    )\n)", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 27, "code": "(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 27, "code": "(fn palindrom? [col] (= col (if (string? col) (apply str (reverse col)) (reverse col) ) ) )", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 27, "code": "#(= (seq (reverse %)) (seq %))", "user": "601f508ce4b0bf4ca6b10959"}, {"problem": 27, "code": "#(let [len (count %)\n       index (quot len 2)]\n   (= (take index %)\n      (reverse (drop (- len index) %))))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "600eb95de4b074f607df66a6"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 27, "code": "(fn palindrome? [s]\n  (= (seq s) (reverse s))\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 27, "code": "(fn [x] (= (vec x) (reverse x)))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 27, "code": "(fn\n  [coll]\n  (let [currColl (into [] coll)]\n    (= (reverse currColl) currColl)\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 27, "code": "(fn temp [seqs]\n        (if (= (reverse(reverse seqs)) (reverse seqs))\n          true\n          false)\n  \n  )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 27, "code": "(fn palindrome? [coll]\n  (if (empty? coll) true\n      (and (= (first coll) (last coll)) (palindrome? (rest (butlast coll)))))\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "603af0ade4b0d5df2af222fc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "603ba3a8e4b0d5df2af22300"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "600a061de4b074f607df6683"}, {"problem": 27, "code": "(fn [s] (= (seq s) (seq (reverse s))))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5b449f3ee4b02d533a91bc47"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 27, "code": "(fn pali [secuencia]\n  (if (< (count secuencia) 2)\n    true\n    (and (= (first secuencia) (first (reverse secuencia))) (pali (drop-last (rest secuencia))))))", "user": "603e899ee4b0d5df2af22313"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "603fae99e4b0d5df2af22322"}, {"problem": 27, "code": "(fn [s]\n  (= (seq s)(reverse s)))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 27, "code": "(fn is-palindrome? [sq]\n  (let [sq (seq sq)]\n    (loop [is? true ind 0]\n    (cond \n     (>= ind (Math/ceil (/ (count sq) 2))) true\n     (not= (nth sq ind) (nth (reverse sq) ind)) false\n     true (recur true (inc ind))\n     )\n    ))\n  \n  )", "user": "60436423e4b02d28681c77a3"}, {"problem": 27, "code": "#(if (coll? %)\n   (= % (reverse %))\n   (= % (apply str (reverse %))))", "user": "600d9808e4b074f607df669c"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 27, "code": "#(let [l (seq %)]\n   (= l (reverse l)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 27, "code": "(fn palindrome? [x] (= (seq x) (reverse (seq x))))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 27, "code": "(fn \n   [x]\n   (= (reverse x) (seq x)))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 27, "code": "(fn ispal [x]\n  (let [xs (seq x)]\n    (cond\n     (empty? xs) true\n     (= 1 (count xs)) true\n     :else (and (= (last xs) (first xs)) (ispal (drop-last 1 (rest xs))))\n     )))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 27, "code": "(fn is-palindrome [coll]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (is-palindrome (butlast (rest coll)))\n    )\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 27, "code": "(fn [s] (= (flatten (partition 1 s)) (reverse s)))", "user": "60420ee4e4b04b4f332c3e71"}, {"problem": 27, "code": "#(= (list* %1) (reverse (list* %1)))", "user": "6028365be4b0d5df2af22242"}, {"problem": 27, "code": "(fn [arg]\n  (loop [n (/ (count arg) 2)\n         fwd arg\n         rev (reverse arg)]\n    (if (< n 1)\n      true\n      (if (not= (first fwd) (first rev))\n        false\n        (recur (dec n) (rest fwd) (rest rev))\n        )\n      )\n    )\n  )", "user": "60486e8ae4b02d28681c77db"}, {"problem": 27, "code": "(fn pali\n  [coll]\n  (loop [tmp coll]\n    (println tmp)\n    (if tmp\n      (if (= (first tmp) (last tmp))\n        (recur (butlast (rest tmp)))\n        false)\n      true)))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse (seq coll))))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 27, "code": "(fn [lst]\n   (loop [l lst] (print l) (cond\n                             (< (count l) 2) true\n                             (= (first l) (last l)) (recur (rest (reverse (rest l))))\n                             :else false\n\n                             )))", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 27, "code": "#(= (reverse (vec %)) (vec %))", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 27, "code": "(fn [x] (let [half (quot (count x) 2)] (= (take half x) (take half (reverse x)))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 27, "code": "(fn [xs]\n  (every? true? (for [i (range (/ (count xs) 2))\n                      :let [x (nth xs i)\n                            y (nth xs (- (count xs) 1 i))\n                            opposite-pair-eq (= x y)]]\n                  opposite-pair-eq)))", "user": "604b072ae4b0a426fc8b43d2"}, {"problem": 27, "code": "(fn func [x] (= (seq x) (reverse x)))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60504383e4b056659d6341fa"}, {"problem": 27, "code": "(fn palindrome-detector [coll]\n  (= (seq coll) (reverse coll)))", "user": "6051bcfae4b056659d634203"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 27, "code": "(fn [sequence]\n  (if (string? sequence)\n    (= sequence ((comp #(reduce str %) #(reverse %)) sequence))\n    (= sequence (reverse sequence))))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 27, "code": "#(let [x (into [] %) y (into [] (into () %))] (= x y))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "604f3346e4b0b7ec0ac60acd"}, {"problem": 27, "code": "(fn [col]\n  (= (seq col) (into '() (seq col))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 27, "code": "(fn [s] (= (reverse s) (seq s)))", "user": "604dc59ee4b0b7ec0ac60ac5"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60549e69e4b069ae89ce6ac8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "60521ea8e4b056659d634205"}, {"problem": 27, "code": "(fn [xs] (= (seq xs) (reverse (seq xs))))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "60538924e4b04c8f2157d153"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 27, "code": "#(= (reduce conj () (seq %)) (seq %))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "605a270ee4b07e92fa001ad8"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 27, "code": "(fn palindrom-2 [coll]\n  (let [strcoll (apply str coll)\n        revcoll (apply str (reverse coll))]\n    (if (= revcoll strcoll)\n      true\n      false)))", "user": "5faece16e4b08cb800c85b02"}, {"problem": 27, "code": "(fn [s] (= (if (string? s) (apply str (reverse s)) (reverse s)) s))", "user": "605b1197e4b000d535e6f548"}, {"problem": 27, "code": "#(= (reverse (seq %) ) (seq %))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 27, "code": "(fn\n  [s]\n  (loop [i 0]\n    (if (= (nth s i) (nth s (- (count s) (+ i 1))))\n      (if (>= i (- (count s) i))\n        true\n        (recur (inc i)))\n      false)))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 27, "code": "(fn [seq] (if (string? seq)\n            (= seq (reduce str \"\" seq))\n\t\t\t(= seq (reverse seq))))", "user": "5ce6a0f4e4b0a17bb84e2b8d"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 27, "code": "#(= (reverse %) (if (seq? %) % (seq %)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 27, "code": "(fn palindrome?\n  [coll]\n  (= (reverse coll) (seq coll)))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "6056f58fe4b069ae89ce6adf"}, {"problem": 27, "code": "#(= (reverse %) (vec %))", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "60462028e4b02d28681c77c2"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 27, "code": "(fn [s] (= (apply list s)  (reverse s)))", "user": "60617afee4b03746e80ebf6c"}, {"problem": 27, "code": "(fn [s]\n  (if (string? s)\n    (= s (->> s reverse (map str) (apply str)))\n  \t(= s (reverse s))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 27, "code": "(fn my-pali [s]\n  (if (< (count s) 2) true \n    (if (= (first s) (last s)) \n      (my-pali (rest (butlast s))) \n      false)))", "user": "6065755ee4b069485764ddcc"}, {"problem": 27, "code": "(fn [coll]\n  (= (apply str coll) (apply str (reverse coll))))", "user": "605a876be4b000d535e6f53c"}, {"problem": 27, "code": "(fn\n  [col]\n  (let [str (seq col)]\n    (loop [i 0\n           li (dec (count str))]\n      (if (< i li)\n        (if (= (nth str i) (nth str li))\n          (recur (inc i) (dec li))\n          false\n          )\n        true\n        )\n      )\n    )\n  )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 27, "code": "(fn palindrome [coll]\n  (if (seq coll)\n    (and (= (first coll) (last coll)) (recur (rest (drop-last coll))))\n    true))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 27, "code": "(fn [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 27, "code": "#(every? (fn [[a b]] (= a b)) (seq (zipmap % (reverse %))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 27, "code": "(fn [x]\n   \n   (if (= (type x) String)\n     (= (apply str (reverse x)) x)\n     (= (reverse x) x)     ;else\n     ))", "user": "60630af9e4b069485764ddbc"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60689984e4b069485764dde6"}, {"problem": 27, "code": "#(= (into [] %) (reverse (into [] %)))", "user": "606d75f5e4b069485764de13"}, {"problem": 27, "code": "#(if (= (apply str (reverse %)) (apply str %)) true false)", "user": "606c87aae4b069485764de0d"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "606e0e95e4b069485764de1a"}, {"problem": 27, "code": "#(= (map identity %) (reverse %))", "user": "606e0a42e4b069485764de19"}, {"problem": 27, "code": "(fn [l] (= (reverse l) (seq l) ))", "user": "606f005ae4b069485764de1b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "606ff89be4b069485764de22"}, {"problem": 27, "code": "(fn [xs] (let [ss (seq xs)] (= ss (reverse ss))))", "user": "606da089e4b069485764de15"}, {"problem": 27, "code": "(fn [a]\n  (= a (if (string? a)\n         (clojure.string/reverse a)\n         (reverse a))))", "user": "5bbcb71ce4b0a20761a23629"}, {"problem": 27, "code": "(fn\n  [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 27, "code": "#(every? true? (map = % (reverse %)))", "user": "6045e761e4b02d28681c77bb"}, {"problem": 27, "code": "(fn [arr]\n  (let [n (/ (count arr) 2)]\n\t  (= (take n arr)\n    \t (reverse (take-last n arr))\n         )))", "user": "605b319de4b079a07f8593f7"}, {"problem": 27, "code": "(fn [lst] (= (seq lst) (reverse (seq lst))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 27, "code": "(fn\n  [s]\n   (if (= (reduce str s) (apply str (reverse s))) true false)\n  )", "user": "6074f5ede4b069485764de52"}, {"problem": 27, "code": "#(= (seq %) (seq (reverse %)))", "user": "606d7f1ce4b069485764de14"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 27, "code": "#(= (reverse(seq %)) (seq %))", "user": "60743977e4b069485764de46"}, {"problem": 27, "code": "#(= (seq %) (reduce conj () %))", "user": "6074e088e4b069485764de4d"}, {"problem": 27, "code": "(fn\n  [lst]\n  (loop [left 0 right (dec (count lst))]\n    (cond\n     (not= (nth lst right) (nth lst left)) false\n     (>= left right) true\n     :else (recur (inc left) (dec right) ))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 27, "code": "(fn [x] (if (= (seq x) (reverse x))\n          true\n          false))\n\n;;; seq hace un list hasta los strings", "user": "6075c214e4b069485764de5b"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "6076ba65e4b069485764de61"}, {"problem": 27, "code": "(fn palindrome [s]\n (= (seq s) (reverse s)))", "user": "606ff56ce4b069485764de21"}, {"problem": 27, "code": "(fn [in]\n  (if (string? in)\n    (= (apply str (reverse in)) in)\n    (= (reverse in) in)))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 27, "code": "(fn [x] (let [res (reverse x)] (if (string? x) (= x (apply str res)) (= res x))))", "user": "6076adb2e4b069485764de60"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60764350e4b069485764de5e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60794173e4b0a637ed78035d"}, {"problem": 27, "code": "#(loop [remain % current 0]\n      (if (> (count remain) current)\n        (if (= (last remain) (nth remain current))\n          (recur (drop-last remain) (inc current))\n          false)\n        true))", "user": "60759e51e4b069485764de5a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6078afb9e4b0a637ed780359"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 27, "code": "#(= (reverse (reverse %)) (reverse %))", "user": "607bd80be4b0a637ed780379"}, {"problem": 27, "code": "#(= (seq %)(reverse (seq %)))", "user": "6070c7bae4b069485764de27"}, {"problem": 27, "code": "#(= (seq %)\n    (reverse (seq %)))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60777335e4b0a637ed78034f"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6074e1ade4b069485764de4e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 27, "code": "(fn[x] (if (string? x) (= x (clojure.string/join \"\" (reverse x))) (= x (reverse x))))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 27, "code": "(fn [coll] (= (vec coll) (rseq (vec coll))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 27, "code": "(fn [xs] (= (reverse xs) (reverse (reverse xs))))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "607e09bee4b03d835a6eaed7"}, {"problem": 27, "code": "(fn [coll] (= (into [] coll) (reverse coll)))", "user": "60836285e4b0736b099e42e4"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "608256d7e4b0736b099e42da"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 27, "code": "(fn [coll] (every? true?\n                     (map-indexed #(= %2 (nth coll (- (count coll) %1 1)))\n                                  (take (quot (count coll) 2) coll))))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 27, "code": "#(loop [lst %]\n         (if (empty? lst)\n             true\n             (if (= (first lst) (last lst))\n                 (recur (butlast (drop 1 lst)))\n                 false))\n         )", "user": "6074e278e4b069485764de51"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 27, "code": "(fn [xs] (let [s (seq xs)] (= s (reverse s))))", "user": "60704214e4b069485764de24"}, {"problem": 27, "code": "#(=(seq%)\n   (reverse\n    (seq%)))", "user": "6085edade4b0736b099e42fc"}, {"problem": 27, "code": "#(let [t (type %)\n       rev'd (reverse %)]\n    (if (= t java.lang.String)\n      (= (apply str rev'd) %)\n      (= rev'd %)))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 27, "code": "#( if (string? %) (= (apply str (reverse %)) %)(= (reverse %) %))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 27, "code": "(fn [lst] (loop [f 0\n                 l (dec(count lst))]\n            (if (= (nth lst f) (nth lst l))\n              (if (<= l f)\n                true\n                (recur (inc f) (dec l)))\n              false)))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 27, "code": "#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 27, "code": "#(= \n   (seq %)\n   (reverse (seq %)))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 27, "code": "#(=(reverse %) (seq %))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 27, "code": "(fn [coll]\n  (= (reverse coll) (seq coll))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 27, "code": "#(let [reversed (reverse %)]\n   (-> (if (string? %) (apply str reversed) reversed)\n       (= %)))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "607b6452e4b0a637ed780375"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (seq x)))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 27, "code": "(fn PalindromeDetector [lst] \n  (= (reverse lst) (seq lst)))", "user": "607508f3e4b069485764de54"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 27, "code": "(fn isPalindrome\n    [x] \n    (let [f (first x) l (last x) len (count x)]\n      (if (= f l)\n          (if \n            (or (= 1 len) (= 2 len)) \n            true\n            (isPalindrome (-> x (rest) (reverse) (rest) (reverse))))\n          false)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "60897837e4b0ae75613dcef2"}, {"problem": 27, "code": "#( = (seq %) (reverse(seq %)))", "user": "608820e9e4b0ae75613dcede"}, {"problem": 27, "code": "(fn [x] (= (reverse x) (reverse (reverse x))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 27, "code": "#(= (reverse (reverse %))\n    (reverse %))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 27, "code": "(fn  palindrome \n    ([coll]\n        (palindrome 0 (seq coll)))\n    ([index coll]\n    (let [last-index (- (count coll) 1 index)\n            s2 (nth coll last-index)\n            s3 (nth coll index)]\n            (println index s3 last-index s2)\n        (if (>= index last-index)\n            true\n            (if (= s3 s2)\n                (palindrome (inc index) coll)\n                false )))))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 27, "code": "(fn [sec]\n  (if (string? sec) ( = (apply str (reverse sec)) sec)\n  (if (= sec (reverse sec)) true false)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 27, "code": "(fn[x](= (apply str (reverse x)) (apply str x)))", "user": "608819b6e4b0ae75613dcedd"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "6086abade4b0736b099e42ff"}, {"problem": 27, "code": "(fn ans-27 [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (ans-27 (take 1 (drop 1 s)))\n      false)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 27, "code": "(fn hey [x] (if (empty? x) true (and (hey (rest (drop-last x))) (= (first x) (last x)))))", "user": "60901a6be4b03bd49d9f36c9"}, {"problem": 27, "code": "(fn [x] \n  (let [xs (seq x)]\n    (= xs (reverse xs))))", "user": "608d54abe4b03bd49d9f36b8"}, {"problem": 27, "code": "(fn [a]\n  (= (seq a) (reverse a)))", "user": "6090a2b3e4b03bd49d9f36cc"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 27, "code": "(fn Palindrome? [x] (if (string? x) (= (str (reverse (seq x)) x)) (= (reverse x) x)))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 27, "code": "(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "608711b1e4b0736b099e4303"}, {"problem": 27, "code": "#(= (seq %)(reverse %))", "user": "5941f6e3e4b060784b3b7904"}, {"problem": 27, "code": "(fn [s]\n   (= (seq s) (reverse (seq s))))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 27, "code": ";; note: I recalled that reverse converts things to sequences...\n#(= (seq %) (reverse %))", "user": "60917abde4b00e9e6653c3d5"}, {"problem": 27, "code": "#(= (into [] %) (into [] (reverse %)))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 27, "code": "#(= (vec %) (reverse %))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 27, "code": "#(= (first %) (last %))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 27, "code": "#(if (instance? String %1) (= %1 (apply str (reverse %1))) (= %1(reverse %1)))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "6097b95ae4b00e9e6653c3f6"}, {"problem": 27, "code": "(fn is-palindrome?\n  [s]\n  (= (seq s) (reverse s)))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 27, "code": "(fn [coll] (= (vec coll) (reverse coll)))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 27, "code": "(fn[xs](= (reverse xs)(seq  xs)))", "user": "6096e2d4e4b00e9e6653c3f1"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 27, "code": ";;(fn palindrome? [col]\n;;  (let [n (count col)\n;;        start (take (quot n 2) col)\n;;        end (take-last (quot n 2) col)]\n;;    (= start (reverse end))))\n\n\n;;(fn palindrome2? [x]\n;;  (let [n (loop [coll x i 0]\n;;            (if (and (= (first coll) (last coll))\n;;                     (> (count coll) 1))\n;;             (recur (drop 1 (drop-last 1 coll)) (inc i))\n;;             i))]\n;;    (= n (quot (count x) 2))))\n\n(fn palindrome?3 [x]\n  (= (vec x) (reverse x)))", "user": "6092c0a9e4b00e9e6653c3dc"}, {"problem": 27, "code": "(fn [p]\n  (=\n   (take (quot (count p) 2) p)\n   (reverse\n    (take-last (quot (count p) 2) p))))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "609a4ac8e4b00e9e6653c40a"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d63bb2be4b0c9e5857d5027"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "6086c44be4b0736b099e4301"}, {"problem": 27, "code": "(fn [s]\n  (= (reverse s) (seq s)))", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "6045abb4e4b02d28681c77b8"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse (seq x))))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 27, "code": "(fn [coll]\n  (let [rev-coll (reverse coll)]\n    (every? true? (map = coll rev-coll))))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 27, "code": "(fn [s] (= (seq s) (reverse s)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 27, "code": "#(cond (string? %)\n        (let [rev (apply str (reverse %))]\n          (= % rev))\n        (coll? %)\n        (= % (reverse %))\n        :else false)", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 27, "code": "#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))", "user": "609beb06e4b00e9e6653c412"}, {"problem": 27, "code": "(fn [coll] (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll(reverse coll))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 27, "code": "#(apply = ((juxt seq reverse) %))", "user": "60a78f2ce4b00e9e6653c466"}, {"problem": 27, "code": "(fn is_palin [str]\n  (cond \n    (< (count str) 2) true    \n    :else (if-not (= (first str) (last str)) false\n            (is_palin (drop-last (drop 1 str))))))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 27, "code": "(fn [obj]\n  (if (string? obj)\n    (= (apply str (reverse obj)) (str obj))\n    (= (reverse obj) obj)\n    )\n  )", "user": "609282f6e4b00e9e6653c3da"}, {"problem": 27, "code": "(fn foob [x]\n\t(if (< (count x) 2)\n\t\ttrue\n\t\t(if (= (first x) (last x))\n\t\t\t(foob (butlast (rest x)))\n\t\t\tfalse)\n\t)\n)", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 27, "code": "(fn [myseq]\n  (let [convseq (seq myseq)]\n  \t(= convseq (reverse convseq))))", "user": "60726211e4b069485764de36"}, {"problem": 27, "code": "(fn [s]\n  (if (instance? String s)\n    (= (apply str (vec (reverse s))) s)\n  \t(= (reverse s) s)))", "user": "609c503ee4b00e9e6653c419"}, {"problem": 27, "code": "(fn [coll]\n  (= coll (if (string? coll)\n            (apply str (map str coll))\n            (reverse coll))))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 27, "code": "(fn [x] (let [x (seq x) y (reverse x)] (= x y)))", "user": "52435d0ce4b076204b44fab5"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 27, "code": "(fn [sequen]\n  (if (string? sequen) (= sequen (apply str (reverse sequen)))\n                       (= sequen (reverse sequen)))\n  )", "user": "60a52517e4b00e9e6653c459"}, {"problem": 27, "code": "#(= (apply list %) (->> % (apply list) reverse))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60ade833e4b00e9e6653c494"}, {"problem": 27, "code": "#(= (apply str %) (apply str (reverse %)))", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 27, "code": "(fn palindrome [elts]\n  (if (= (vec elts) (reverse elts)) true false))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60a9f193e4b00e9e6653c476"}, {"problem": 27, "code": "(fn [coll]\n  (if (instance? String coll)\n    \t(= coll (clojure.string/reverse coll))\n    \t(= coll (reverse coll))))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 27, "code": "(fn [s]\n  (let [original (apply str s)\n        reversed (apply str (reverse s))]\n    (= original reversed)))", "user": "60a7104be4b00e9e6653c465"}, {"problem": 27, "code": "(fn [coll]\n  (let [half (int (Math/floor (/ (count coll) 2)))\n        coll1 (take half coll)\n        coll2 (take half (reverse coll))]\n    (= coll1 coll2)))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "6071dbede4b069485764de34"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 27, "code": "(fn [input]\n  (= (seq input) (reverse input)))", "user": "60b34c5de4b0e0fa5f1b422e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5ec540d8e4b08d0ec38692c7"}, {"problem": 27, "code": "#(->> (reverse %) (map = %) (every? true?))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "57123c96e4b09c608db70454"}, {"problem": 27, "code": "#(every? (fn [x] (= x true)) (map (fn [x y] (= x y)) % (reverse %)))", "user": "60b2ad00e4b0e0fa5f1b4229"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60ac6345e4b00e9e6653c484"}, {"problem": 27, "code": "(fn [coll]\n  (= (apply str coll) (apply str (reverse coll))))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 27, "code": "(fn [x]\n   (if (= x (condp apply [x]\n              string? (apply str (reverse x))\n              (reverse x))) true false))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60a7d174e4b00e9e6653c469"}, {"problem": 27, "code": "(fn [coll]\n  (= (seq coll) (reverse coll)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 27, "code": "(fn [pal] \n  (let [reversepal (if (string? pal) (apply str (reverse pal)) (reverse pal))] (= pal reversepal)))", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 27, "code": "(fn palindrome? [s] \n  (if (empty? s) \n    true \n    (and \n     (= (first s) (last s)) \n     (palindrome? (drop 1 (drop-last 1 s))))))", "user": "6079e5aee4b0a637ed780367"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 27, "code": "(fn [given-sequence]\n  (let [seq-palindrome (seq given-sequence)\n        palindrome? (reverse seq-palindrome)]\n    (if (= seq-palindrome palindrome?)\n      true\n      false)))", "user": "60b68974e4b0e0fa5f1b424b"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 27, "code": "#(= (reverse %1) (apply vector %1))", "user": "60b8b9dae4b0e0fa5f1b425d"}, {"problem": 27, "code": "#(= (apply str (reverse %)) (apply str %))", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 27, "code": "(fn [coll]\n  (if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (drop-last coll)))\n      false)))", "user": "60b79ed6e4b0e0fa5f1b4250"}, {"problem": 27, "code": "(fn palin\n  [x]\n  (if (string? x)\n    (= (clojure.string/join (reverse x)) x)\n \t(= (reverse x) x)))", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 27, "code": "#(= (reverse (seq %1)) (seq %1))", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 27, "code": "(fn [s] \n  (= (vec s) \n     (vec (reverse s))))", "user": "60b98974e4b0e0fa5f1b4271"}, {"problem": 27, "code": "#(= (reverse (seq %)) (seq %))", "user": "60aeadd4e4b00e9e6653c499"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 27, "code": "(fn [s] (= (reduce conj '() (vec s)) (vec s)))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 27, "code": "(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 27, "code": "(comp\n   (partial apply =)\n   (juxt reverse seq))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 27, "code": "(fn [x] \n  (if (= \"racecar\" x)\n    true\n  \t(= (reverse x) x)))", "user": "60beb061e4b0e0fa5f1b428d"}, {"problem": 27, "code": "#(let [s (seq %) n (- (count s) 1)]\n(loop [i (int (/ n 2))]\n   (if (= (nth s i) (nth s (- n i)))\n     (if (= i 0)\n       true\n       (recur (dec i)))\n     false)))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 27, "code": "(fn [xs] (= (seq (reverse xs)) (seq xs)))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60bf6452e4b0e0fa5f1b4295"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60bca877e4b0e0fa5f1b4287"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 27, "code": "#(= (into [] %) \n    (reverse %))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 27, "code": "(fn [xs]\n  (= (seq xs) (-> xs seq reverse)))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 27, "code": "#(= (seq %) (reverse %))", "user": "60cb3467e4b0e0fa5f1b4313"}, {"problem": 27, "code": "(fn [x] (= (clojure.string/join x) (clojure.string/join (reverse x))))", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "6065ebf8e4b069485764ddd0"}, {"problem": 27, "code": "(fn [seqx]\n  (cond\n   (empty? seqx) true\n   (not= (first seqx) (last seqx)) false\n   :else (recur (->> seqx (rest) (reverse) (rest)))))", "user": "60cc2d58e4b0e0fa5f1b4323"}, {"problem": 27, "code": "(fn [n] (loop [n n\n               palindrome? false]\n          (if (<= (count n) 1)\n            palindrome?\n            (let [count (dec (count n))]\n                  (if (= (first n) (last n))\n              (recur (drop 1 (take count n)) true)\n              (recur [] false))))))", "user": "5e8d3b37e4b0cb016954632c"}, {"problem": 27, "code": "(fn [xs]\n  (every?\n  true?\n  (map\n   (fn [a b] (= a b))\n   xs\n   (reverse xs)))\n  )", "user": "558ffb4be4b0277789237667"}, {"problem": 27, "code": "(fn [x] (= (apply str (reverse x)) (apply str x)))", "user": "60cb4008e4b0e0fa5f1b4316"}, {"problem": 27, "code": "#(= (reverse %1) (seq %1))", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 27, "code": "(fn [s]\n  (if (= (seq s) (reverse s))\n    true\n    false))", "user": "5d13c5d2e4b0902706380dbf"}, {"problem": 27, "code": "(fn [x] (if (= (type x) String) (= x (reduce str (reverse x))) (= x (reverse x))))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 27, "code": "(fn\n  [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (-> coll\n                 rest\n                 drop-last))\n      false)))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 27, "code": "(fn isPalindrom2 [v] = (and \n                          (= (first v) (last v)) \n                          (if \n                           (= (drop 1 v) []) \n                            true \n                            (isPalindrom2 (drop-last (drop 1 v)))\n                          )\n                         )\n)", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 27, "code": "#(cond\n  (or (= (count %) 0) (= (count %) 1)) true\n  (= (first %) (last %)) (recur (->> % (drop 1) (drop-last 1)))\n  :else false)", "user": "609980fce4b00e9e6653c408"}, {"problem": 27, "code": "#(= (reverse %) (reverse (reverse %)))", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 27, "code": "#(= (sequence %) (reverse %))", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 27, "code": "(fn [x]  (= x (if (= (type x) java.lang.String)\n                  (clojure.string/reverse x)\n                  (reverse x)\n\n                 )\n              ))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 27, "code": "(fn [se] (= (reverse se) (reverse (reverse se))))", "user": "5f8f1d18e4b0715f5002d779"}, {"problem": 27, "code": "(fn [s]\r\n  (= (seq s) (reverse s)))", "user": "60c06c14e4b0e0fa5f1b42a1"}, {"problem": 27, "code": "#(= (reverse %) (seq %))", "user": "60db702ae4b02d404a3b4372"}, {"problem": 27, "code": "(fn [x] (= (seq x) (reverse x)))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 27, "code": "(fn [x]\n  (= (seq x) (reverse x))\n  )", "user": "60d45525e4b0d60f5ea6f7dc"}, {"problem": 27, "code": "#(= (seq %) (reverse (seq %)))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 27, "code": "#(= % (if (string? %) (clojure.string/reverse %)\n          (reverse %)))", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 27, "code": "#(= (reverse %) (-> % reverse reverse))", "user": "6079e2dfe4b0a637ed780366"}, {"problem": 27, "code": "(fn [col] (= (seq col) (reverse (seq col))))", "user": "60d091f3e4b02520c611a6d7"}, {"problem": 27, "code": "(fn [x] \n   (= (seq x) (reverse (seq x)))\n   )", "user": "5e481209e4b043cd24807a39"}, {"problem": 27, "code": "#(if (string? %)                                                           \n  (= (clojure.string/reverse %) %)                                        \n  (= (reverse %) %))", "user": "60460876e4b02d28681c77bd"}]